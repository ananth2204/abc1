rexx_RXSMFDB2: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(RXSMFDB2)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   RXSMFDB2 {arguments ...}
 Overview: Reads SMF data that was converted to RECFM=VB and shows
           things I was interested in showing.

           Very sparse documentation, compared to SMF records
           from 'every' other product!

           SC18-9851-11 DB2 Version 9.1 for z/OS
           Performance Monitoring and Tuning Guide

           SMPEDB.TZDBS9N.SDSNIVPD(DSNWMSGS); f '1 global' 1 first

           Some strange stuff in the Self Defining Section.
           I found a field that shows how many of the up to 14
           offset/lengths are valid but nothing for which of them
           are valid. The best I come up with so far is if the
           offset or offset+length exceed the total record size
           then it has to be garbage/invalid. Then the number of
           sections ought to be an indicator as well. But even that
           will have garbage in it. The IFCID is a key!

           SM100-Statistics
             Class:
               1
                 0001
                 0002
                 0105
                 0106
                 0202
                 0225
               3
                 0172
                 0196
                 0250
                 0258
                 0261
                 0262
                 0330
                 0335
                 0337
               4
                 0173
                 0191
                 0192
                 0193
                 0194
                 0195
                 0203
                 0204
                 0205
                 0206
                 0207
                 0208
                 0209
                 0210
                 0235
                 0236
                 0238
                 0267
                 0268
                 0334
                 0343
               5
                 0230
                 0254
               6
                 0225
               8
                 0199
           SM101-Accounting
             Class:
               1
                 0003
                 0106
                 0200
                 0239
               2
                 0232
               3
                 0006
                 0007
                 0008
                 0009
                 0032
                 0033
                 0034
                 0035
                 0044
                 0045
                 0051
                 0052
                 0056
                 0057
                 0117
                 0118
                 0127
                 0128
                 0170
                 0171
                 0174
                 0175
                 0213
                 0214
                 0215
                 0216
                 0226
                 0227
                 0242
                 0243
                 0321
                 0322
                 0329
                 0351
                 0352
               5
                 0187
               7
                 0200
                 0232
                 0240
               8
                 0006
                 0007
                 0008
                 0009
                 0032
                 0033
                 0034
                 0035
                 0044
                 0045
                 0051
                 0052
                 0056
                 0057
                 0117
                 0118
                 0127
                 0128
                 0170
                 0171
                 0174
                 0175
                 0213
                 0214
                 0215
                 0216
                 0226
                 0227
                 0241
                 0242
                 0243
                 0321
                 0322
                 0351
                 0352
              10
                 0339
           SM102-Performance
             Class:
               1-Background events
                 0001
                 0002
                 0001
                 0031
                 0042
                 0043
                 0076
                 0077
                 0078
                 0079
                 0102
                 0103
                 0105
                 0106
                 0107
                 0153
               2-Subsystem events
                 0003
                 0068
                 0069
                 0070
                 0071
                 0072
                 0073
                 0074
                 0075
                 0080
                 0081
                 0082
                 0083
                 0084
                 0085
                 0086
                 0087
                 0088
                 0089
                 0106
                 0174
                 0175
               3-SQL events
                 0022
                 0053
                 0055
                 0058
                 0059
                 0060
                 0061
                 0062
                 0063
                 0064
                 0065
                 0066
                 0092
                 0093
                 0094
                 0095
                 0097
                 0106
                 0112
                 0173
                 0177
                 0233
                 0237
                 0250
                 0272
                 0273
                 0325
               4-Read/Write buffer and EDM pools
                 0006
                 0007
                 0008
                 0009
                 0010
                 0029
                 0030
                 0105
                 0106
                 0107
                 0127
                 0128
                 0226
                 0227
                 0321
                 0322
               5-Write to logs
                 0032
                 0033
                 0034
                 0035
                 0036
                 0037
                 0038
                 0039
                 0040
                 0041
                 0104
                 0106
                 0114
                 0115
                 0116
                 0117
                 0118
                 0119
                 0120
                 0228
                 0229
               6-Summary lock information
                 0020
                 0044
                 0045
                 0105
                 0106
                 0107
                 0172
                 0196
                 0213
                 0214
                 0218
                 0337
               7-Detailed lock information
                 0021
                 0105
                 0106
                 0107
                 0223
               8-Data scanning details
                 0013
                 0014
                 0015
                 0016
                 0017
                 0018
                 0105
                 0106
                 0107
                 0125
                 0221
                 0222
                 0231
                 0305
                 0311
               9-Sort detail
                 0026
                 0027
                 0028
                 0095
                 0096
                 0106
              10-Bind, command, utility detail
                 0023
                 0024
                 0025
                 0090
                 0091
                 0105
                 0106
                 0107
                 0108
                 0109
                 0110
                 0111
                 0201
                 0256
              11-Execution unit switch and latch contentions
                 0045
                 0046
                 0047
                 0048
                 0049
                 0050
                 0051
                 0052
                 0056
                 0057
                 0093
                 0094
                 0106
                 0113
              12-Storage manager
                 0098
                 0100
                 0101
                 0106
              13-Edit and validation exits
                 0011
                 0012
                 0019
                 0105
                 0106
                 0107
              14-Entry from and exit to an application
                 0067
                 0106
                 0121
                 0122
              16-Distributed processing
                 0157
                 0158
                 0159
                 0160
                 0161
                 0162
                 0163
                 0167
                 0183
              17-Claim and drain information
                 0211
                 0212
                 0213
                 0214
                 0215
                 0216
              18-Event based console messages
                 0197
              20-Data sharing coherency summary
                 0249
                 0250
                 0251
                 0256
                 0257
                 0261
                 0262
                 0267
                 0268
              21-Data sharing coherency detail
                 0255
                 0259
                 0263
              22-Authorization exit parameters
                 0314
              30-Available for local use
                 ?
              31-Available for local use
                 ?
              32-Available for local use
                 ?

             IFCIDs:
               001 uses QWS0
               002      QWS1
               202      QWS2
               225      ????
               230      QWS3
               003 uses QWA0
               239      QWA1
               004 -> 057         uses QWT0
               058 -> 105, 107 -> 139  QW01
                         106           QWPZ
               201, 203 -> 224,
                    226 -> 249         QW03
               250 ->                  QW04

           At least one data section exists with a short length of just
           16 bytes, and the one field in it consistently shows binary
           zeroes. Too bad they didn't zero out all the pointers!

           Just found IFCID 225 is part of SMF record type 100.

           Having gone thru this exercise I can see why the IBM DB2
           folks refuse to create a proper manual defining their
           SMF record structure. What a freaking mess! Not just poor
           design, but sloppy initialization and placement of fields.

           but with the IBM DB2 folks not really documenting
           these records in a manual, I can only keep hunting.

           And am unable to report funky stuff because it is not
           documented! Lack of comments in macros is not reportable.

=======================================================================

 History of Modifications
 ------------------------
vv.ll When     Who / What you did
----- -------- --------------------------------------------------------
01.00 20130211 "Kenneth Tomiak"<KenTomiak@KTomiak.org>
               1) Original code.
----- -------- --------------------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 24
  Trace "Off"

rexx_Main_RXSMFDB2:
  MAKEBUF
  return_code = rexx_Initialize()
  If (return_code = 0) then do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  DROPBUF
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name rexxpgm_version,53) "="
  say left("= executing under" source_host_env,53) "="
  say left("= as a" source_call_type,53) "="
  say left("= on" date() "at" time()".",53) "="
  offset_from_gmt = get_cvt_tz()
  say left("= The current local" ,
     "time offset from UTC:" offset_from_gmt "hours.",53) "="
  say Copies("=",55)

  default_chunk = "N"
  default_dump  = 0
  desired_debug = ""
  desired_dsect = ""
  desired_print = ""
  input_ctr = 0

  Parse Var all_my_arguments ,
    =1 . "CHUNK(" desired_chunk ")" . ,
    =1 . "DEBUG(" desired_debug ")" . ,
    =1 . "DSECT(" desired_dsect ")" . ,
    =1 . "DUMP(" desired_dump ")" . ,
    =1 . "PRINT(" desired_print ")" .
  if (desired_chunk = "") then do
    desired_chunk = default_chunk
  end
  if (desired_dump = "") then do
    desired_dump = default_dump
  end
  say left("= Chunk dump   :" desired_chunk,53) "="
  say left("= Total dump   :" desired_dump,53) "="
  say left("= Debug pattern:" desired_debug,53) "="
  say left("= DSECT pattern:" desired_dsect,53) "="
  say left("= Print report :" desired_print,53) "="
  say Copies("=",55)

  say ""

  chunk_debug = desired_debug
  desired_debug = ""
  do while (chunk_debug <> "")
    parse var chunk_debug one_debug "," chunk_debug
    number_debug = one_debug + 0
    desired_debug = desired_debug || number_debug" "
  end

  chunk_dsect = desired_dsect
  desired_dsect = ""
  do while (chunk_dsect <> "")
    parse var chunk_dsect one_dsect "," chunk_dsect
    desired_dsect = desired_dsect || strip(one_dsect,"B"," ")" "
  end

  debug_ctr = 0
  debug_record. = ""
  dump_ctr = 0
  dump_record. = ""
  print_ctr = 0
  print_record. = ""

  day_of_week. = "Bad basedate"
  day_of_week.0 = "Monday"
  day_of_week.1 = "Tuesday"
  day_of_week.2 = "Wednesday"
  day_of_week.3 = "Thursday"
  day_of_week.4 = "Friday"
  day_of_week.5 = "Saturday"
  day_of_week.6 = "Sunday"

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  prior_ctr = 0
  do forever
    Address MVS "EXECIO" ,
      "1 DISKR SMFIN (Stem smf_record.)"
    if (smf_record.0 = 0) then leave
    input_ctr = input_ctr + 1
    dec_SMFxLEN = length(smf_record.1) + 4
    half_word = x2c(right(c2x(d2c(dec_SMFxLEN)),4,"0"))
    smf_record.1 = half_word||'0000'x||smf_record.1
    void_rc = parse_chs()
    if (desired_dump > 0) then do
      desired_block = smf_record.1
      void_rc = dump_chunks()
    end
    decimal_rty = display_rty + 0
    select
      when (decimal_rty = 2) then do
        void_rc = rexx_002()
      end
      when (decimal_rty = 3) then do
        void_rc = rexx_003()
      end
      when (decimal_rty = 100) then do
        data_block_of_SM100 = SMFxother_data
        void_rc = rexx_SM100()
      end
      when (decimal_rty = 101) then do
        data_block_of_SM101 = SMFxother_data
        void_rc = rexx_SM101()
      end
      when (decimal_rty = 102) then do
        data_block_of_SM102 = SMFxother_data
        void_rc = rexx_SM102()
      end
      otherwise do
        NOP
      end
    end
  end
  say ""
  say "Read" input_ctr "record(s)."
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  Address MVS "EXECIO" ,
    "0 DISKR SMFIN (FINIS)"
  if (debug_ctr > 0) then do
    Address MVS "EXECIO" ,
      debug_ctr "DISKW DEBUG (stem debug_record. FINIS)"
    debug_ctr = 0
    debug_record. = ""
  end
  if (dump_ctr > 0) then do
    Address MVS "EXECIO" ,
      dump_ctr "DISKW DUMP (stem dump_record. FINIS)"
    dump_ctr = 0
    dump_record. = ""
  end
  if (print_ctr > 0) then do
    Address MVS "EXECIO" ,
      print_ctr "DISKW PRINT (stem print_record. FINIS)"
    print_ctr = 0
    print_record. = ""
  end
  Say Copies("*",55)
  Say left("*" source_uc_exec_name "RC=" return_code,53) "*"
  Say Copies("*",55)
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Follow control blocks and get information about the current task.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Routines to write out any accumulated data.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
write_debug_data_out:
  if (debug_ctr > 0) then do
    void_rc = do_debug_header()
    Address MVS "EXECIO" ,
      debug_ctr "DISKW DEBUG (stem debug_record.)"
  end
  debug_ctr = 1
  debug_record. = " "
  return 0

write_dump_data_out:
  if (dump_ctr > 0) then do
    Address MVS "EXECIO" ,
      dump_ctr "DISKW DUMP (stem dump_record.)"
  end
  dump_ctr = 1
  dump_record. = " "
  return 0

write_print_data_out:
  if (print_ctr > 0) then do
    Address MVS "EXECIO" ,
      print_ctr "DISKW PRINT (stem print_record.)"
  end
  print_ctr = 1
  print_record. = " "
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Common routine to break up a chunk of data into 60 byte groups.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
hurl_chunks:
  hurling_size = 60
  hurling_copies = hurling_size / 10
  do while (desired_block <> "")
    parse var desired_block one_piece +(hurling_size) desired_block
    void_rc = hurl_piece()
  end
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-----------------------------------------------------------------------
Child routine to show a chunk of data in EBCDIC and hexadecimal.
-----------------------------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
hurl_piece:
  piece_length = length(one_piece)
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
   " Chunk EBCDIC:" one_piece
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
   "     - ------:" ,
    left(copies("----+----|",hurling_copies),piece_length)
  half_line = ""
  hex_chunk = c2x(one_piece)
  do hc_ctr = 1 to (piece_length * 2) by 2
    half_line = half_line||substr(hex_chunk,hc_ctr,1)
  end
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
   "     - Hex T :" half_line
  half_line = ""
  hex_chunk = c2x(one_piece)
  do hc_ctr = 2 to (piece_length * 2) by 2
    half_line = half_line||substr(hex_chunk,hc_ctr,1)
  end
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
   "     - Hex B :" half_line
  void_rc = write_debug_data_out()
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Ceiling - raise to a whole number.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
ceiling: Procedure Expose input_ctr
  parse arg whole_number "." real_number
  if (real_number > 0) then whole_number = whole_number + 1
  return whole_number

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Floor - truncate to an integer value.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
floor: Procedure
  parse arg whole_number "." .
  return whole_number

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Common routine to break up a chunk of data into desired_dump groups.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
dump_chunks:
  dumping_copies = ceiling(desired_dump / 10)
  repeat_copies = ceiling(desired_dump / 4) * 4
  dump_ctr = 0
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
   Left(" "copies(display_rty".",repeat_copies),(desired_dump + 1))
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
   Left(" "copies("====",repeat_copies),(desired_dump + 1))
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
    " Record      :" ,
    "#" right(input_ctr,9,"0") ,
    "Type:" display_rty||display_sty ,
    "Length:" length(smf_record.1)
  do while (desired_block <> "")
    parse var desired_block one_piece +(desired_dump) desired_block
    void_rc = dump_piece()
  end
  void_rc = write_dump_data_out()
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-----------------------------------------------------------------------
Child routine to show a chunk of data in EBCDIC and hexadecimal.
-----------------------------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
dump_piece:
  piece_length = length(one_piece)
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
   " E:" one_piece
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
   " -:" ,
    left(copies("----+----|",dumping_copies),piece_length)
  half_line = ""
  hex_chunk = c2x(one_piece)
  do hc_ctr = 1 to (piece_length * 2) by 2
    half_line = half_line||substr(hex_chunk,hc_ctr,1)
  end
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
   " T:" half_line
  half_line = ""
  hex_chunk = c2x(one_piece)
  do hc_ctr = 2 to (piece_length * 2) by 2
    half_line = half_line||substr(hex_chunk,hc_ctr,1)
  end
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = ,
   " B:" half_line
  dump_ctr = dump_ctr + 1
  dump_record.dump_ctr = " "
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Convert STCK into into normal REXX date/time format.
=======================================================================

  REXX function to convert TOD to external clock time.

  https://groups.google.com/forum/?
  fromgroups#!topic/bit.listserv.tsorexx/ts8pBM_LZJw

  This ignores offsets for GMT and DST.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
store_clock: procedure
  Parse Upper Arg timestring
  If (Datatype(timestring,"X") <> 1) Then do
    Say "Invalid data ("timestring") - contains other" ,
      "than hexadecimal characters."
    Return 0
  End
  Numeric Digits 18
  timestring = Left(timestring,13,0)
  work =  X2D(timestring)
  work = work % 1000
  fraction = work // 1000;     work = work % 1000
  seconds  = work // 60;       work = work % 60
  minutes  = work // 60;       work = work % 60
  hours    = work // 24;       work = work % 24
  days     = work - 29218      /* Subtract out 1900-1979 */
  year     = 1980
  Do while (days > 0)
    current = 365 + (year = 4 * (year%4))
    If (days > current) Then year = year + 1
    days = days - current
  End
  days = days + current
  gd_yr = right(year,2)
  days = right(days,3,0)
  gregdate = Date("S",gd_yr||days,"J")
  output = year'.'Right(days,3,0) ,
    gregdate ,
    Right(hours,2,0)":" || ,
    Right(minutes,2,0)":"    ||,
    Right(seconds,2,0)"."    ||,
    Right(fraction,3,0) "UTC"
  return output

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Get the Timezone from the running system. I know, needed to know
 the location at the time the record was done and whether DST was on.
 I have no way to know the location and I am unable to use any kind
 of DST lookup table until I know the date and time. In my opinion, it
 is then better to show it as GMT time. Or is it UTC time? Star date
 could be less confusing.

 The offset of the local time zone from Greenwich Mean Time is kept
 in field CVTTZ in the CVT in units of 1.048576 seconds.

 The cold below was borrowed from Mark Zelden's %IPLINFO.

=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_cvt_tz: procedure
  cvt = c2d(storage('10',4))                          /* CVT address */
  CVTTZ = Storage(D2x(CVT + 304),4)                /* point to cvttz */
  CKTZBYTE = left(cvttz,1)                   /* need to chk 1st byte */
  If (BitAnd(CKTZBYTE,"80"x) = "80"x) then       /* chk for negative */
    CVTTZ = C2d(CVTTZ,4)                      /* negative offset C2d */
  Else CVTTZ = C2d(CVTTZ)                    /* postitive offset C2d */
  CVTTZ = CVTTZ * 1.048576                     /* convert to seconds */
  CVTTZ = CVTTZ / 3600                           /* convert to hours */
  If Format(CVTTZ,3,1) = Format(CVTTZ,3,0) , /* don't use decimal if */
   then CVTTZ = Strip(Format(CVTTZ,3,0))               /* not needed */
  Else CVTTZ = Strip(Format(CVTTZ,3,1))          /* display 1 decimal*/
  return cvttz

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Translate a DB2 timestamp into normal REXX date/time format.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
xlat_timestamp: procedure
  timestamp = left(arg(1),6)  /* bits 0-47 of the incoming timestamp */
  numeric digits 19                  /* request sufficient precision */
  gmt = get_cvt_tz()                              /* Offset from GMT */
  m = 60                                      /* seconds in a minute */
  h = m*m                                      /* seconds in an hour */
  s = h*24                                       /* seconds in a day */
  m2 = c2d(timestamp)                  /* 2 microseconds is the unit */
  sec = m2*128/1E6                  /* convert this value to seconds */
  sec = sec+gmt /* add hour(s), to compensate for deviation from GMT */
  days = sec%s                     /* days since 00:00:00h, 1/1/1900 */
  time = (sec-days*s)%1                    /* time of day in seconds */
  block = 4*365             /* no leap year during the first 4 years */
  if days < block then do       /* date falls in the range 1900-1903 */
    year = 1900                                /* start year at 1900 */
    leap_year_flag = 0                  /* no leaping in this period */
  end
  else do
    days = days+1           /* add 1, since 1900 was NOT a leap year */
    block = block+1                   /* one leap year every 4 years */
    year4 = days%block            /* number of elapsed 4-year blocks */
    days = days-block*year4                        /* days remaining */
    year = 1900+4*year4                         /* set starting year */
    leap_year_flag = 1          /* must take leap years into account */
  end
  do forever                              /* now for the fine tuning */
    len = 365+(year//4=0)*leap_year_flag        /* days in this year */
    if len <= days then parse value year+1 days-len with year days .
    else leave                              /* found the right annum */
  end
/*
 * Compute length of February, initialize Month to 1, and add 1 to the
 * day number - as humans are inclined to call day 0 "day 1":
 */
  parse value (year//4=0)*leap_year_flag+28 ,
    days+1 1 with feb day month .
/* non-leap years are evenly divisible by 400 */
  if ((year // 400) = 0) then do
    feb = 28
  end
  months = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'
  mndays = '31' feb '31  30  31  30  31  31  30  31  30  31'
  do while day > word(mndays,month)
    day = day - word(mndays,month)   /* home in on the correct month */
    month = month + 1
  end
  /* and work out the right time of day */
  parse value time%h time//h with hour time .
  parse value time%m time//m with minute second .
  return right(day,2,"0"),                /* return result to caller */
    word(months,month) year',' ,
    right(hour,2,"0")':'right(minute,2,"0")':'right(second,2,"0")

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Lots of routines to parse various parts of IBM DB2 SMF record types.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Format the different types and parts of date.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
format_date:
  temp_date = c2x(Arg(1))
  temp_c = substr(temp_date,2,1)
  temp_y = substr(temp_date,3,2)
  temp_d = substr(temp_date,5,3)
  DisplayDate = (1900+(temp_c*100)+temp_y)"."temp_d
  if (temp_d = 0) then do
    gregdate ="00/00/0000"
    dow = ""
  end
  else do
    gregdate = Date("S",temp_y||temp_d,"J")
    basedate = Date("B",gregdate,"S") // 7
    dow = day_of_week.basedate
  end
  Return DisplayDate gregdate dow

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Format the different types and parts of time.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
format_time:
  temptime = Arg(1)
  DisplayTIME = ""
  if (temptime > 8640000) then,
    do
      timeDY     = temptime / 8640000
      DisplayDY = TRUNC(timeDY,0)
      temptime = temptime - (DisplayDY * 8640000)
      DisplayTIME = "DAYS("DisplayDY")-"
    end
  timeHR     = temptime / 360000
  DisplayHR = TRUNC(timeHR,0)
  temptime = temptime - (DisplayHR * 360000)
  IF (DisplayHR < 10) THEN DisplayHR = "0"DisplayHR
  timeMN     = temptime / 6000
  DisplayMN = TRUNC(timeMN,0)
  temptime = temptime - (DisplayMN * 6000)
  IF (DisplayMN < 10) THEN DisplayMN = "0"DisplayMN
  timeSC     = temptime / 100
  DisplaySC = TRUNC(timeSC,0)
  temptime = temptime - (DisplaySC * 100)
  displayhs = Right("00"temptime,2)
  IF (DisplaySC < 10) THEN DisplaySC = "0"DisplaySC
  DisplayTIME = DisplayTime||,
    DisplayHR":"DisplayMN":"DisplaySC"."displayhs
  Return DisplayTIME

format_microunits:
  temptime = (temptime / 128)
  tl = length(temptime)
  if (tl < 5) then temptime = 0
  else temptime = left(temptime,tl-4)
  call format_time
  Return 0

format_micro:
  temptime = (temptime * 1024)
  tl = length(temptime)
  if (tl < 5) then temptime = 0
  else temptime = left(temptime,tl-4)
  call format_time
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 delete these if never used.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
format_number:
  reverse_number = Reverse(tempnumber)
  reverse_len = length(reverse_number)
  reverse_display = ""
  do onyx = 1 to reverse_len
    if (((onyx-1) // 3) = 0) then,
      reverse_display = reverse_display","
    next_number = substr(reverse_number,onyx,3)
    reverse_display = reverse_display||next_number
    onyx = onyx + 2
  end
  DisplayNumber = Strip(Reverse(reverse_display),"B"," ")
  DisplayNumber = Strip(displaynumber,"B",",")
  DisplayNumber = Strip(displaynumber,"B"," ")
  return 0

datetime_difference:
  if (dateend <> datestart) then do
    datedif = dateend - datestart
    parse var datedif datedify '.' datedifd
    timeend = timeend + (datedif * 8640000)
  end
  if (timestart > timeend) then do
    displaytime = "# ERROR #",
                timeend "-" timestart "-" timedif
    return 0
  end
  timedif = timeend - timestart
  temptime = timedif
  call format_time
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 handle the smf record and do my thing with it.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
parse_chs:
  parse var smf_record.1 ,
    =00001 SMFxRDW  +4 , /* X - Record descriptor word         00000 */
    =00001 SMFxLEN  +2 , /* X - Record length                  00000 */
    =00003 SMFxSEG  +2 , /* X - Segment descriptor             00002 */
  ,     /* SINGLE   EQU x'00000000'                                  */
  ,     /* FIRST    EQU x'00000001'                                  */
  ,     /* MIDDLE   EQU x'00000002'                                  */
  ,     /* LAST     EQU x'00000003'                                  */
    =00005 SMFxflg +1                             /* 000004 */,
  ,     /* subtyped EQU b'00100000' Sub-types are valid              */
  ,     /* mvssp4up EQU b'00011110' MVS/SP Version 4 and above       */
  ,     /* mvssp3   EQU b'00001110' MVS/SP Version 3                 */
  ,     /* mvssp2   EQU b'00000110' MVS/SP Version 2                 */
  ,     /* vs2      EQU b'00000010' VS2                              */
    =00006 SMFxrty +1                             /* 000005 */,
    =00007 SMFxtme +4                             /* 000006 */,
    =00011 SMFxdte +4                             /* 00000A */,
    =00015 SMFxsid +4                             /* 00000E */,
    =00019 SMFxother_data
  bin_SMFxflg = c2b(SMFxflg)
  hex_SMFxflg = c2x(SMFxflg)
  dec_SMFxrty = c2d(SMFxrty)
  display_rty = right(dec_SMFxrty,3,"0")
  dec_SMFxsty = ""
  hex_SMFxsty = ""
  display_sty = ""
  smfxhdr_length = 18
  if (substr(bin_smfxflg,2,1) = "1") then do
    parse var smf_record.1 ,
      =00019 SMFxssi +4                           /* 000012 */,
      =00023 SMFxsty +2                           /* 000016 */,
      =00025 SMFxother_data
    dec_SMFxsty = c2d(SMFxsty)
    hex_SMFxsty = c2x(SMFxsty)
    display_sty = "-"right(dec_SMFxsty,4,"0")
    smfxhdr_length = 24
  end
  time_SMFxtme = format_time(c2d(SMFxtme))
  date_SMFxdte = format_date(SMFxdte)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("HDR",desired_dsect) > 0)) then do
    if (desired_chunk = "Y") then do
      desired_block = left(smf_record.1,smfxhdr_length)
      void_rc = hurl_chunks()
    end
    void_rc = myqueue_header_data_out()
    void_rc = write_debug_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = ,
      "1"
    print_ctr = print_ctr + 1
    print_record.print_ctr = ,
      " "copies(display_rty".",20)
    print_ctr = print_ctr + 1
    print_record.print_ctr = ,
      " "copies("=",80)
    print_ctr = print_ctr + 1
    print_record.print_ctr = ,
      " Record      :" ,
      "#" right(input_ctr,9,"0") ,
      "Type:" display_rty ,
      "Length:" length(smf_record.1)
    void_rc = write_print_data_out()
  end
  return 0

myqueue_header_data_out:
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
   " flag       b:" bin_smfxflg
  if (substr(bin_smfxflg,2,1) = "1") then do
    smf_subtypes = display_rty
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      "             : .1...... = Sub-types are valid"
  end
  select
    when (substr(bin_smfxflg,4,4) = "1111") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "             : ...1111. = MVS/SP Version 4 and above"
    end
    when (substr(bin_smfxflg,5,3) = "111") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "             : ....111. = MVS/SP Version 3"
    end
    when (substr(bin_smfxflg,6,2) = "11") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "             : .....11. = MVS/SP Version 2"
    end
    when (substr(bin_smfxflg,7,1) = "1") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "             : ......1. = VS2"
    end
    otherwise do
      NOP
    end
  end
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    " Time written:" time_SMFxtme
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    " Date written:" date_SMFxdte
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    " SID        x:" SMFxsid
  if (substr(bin_smfxflg,2,1) = "1") then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " SSI        x:" smfxssi
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " Sub-type   x:" hex_smfxsty
  end
  return 0

do_debug_header:
  if (input_ctr = prior_ctr) then return 0
  prior_ctr = input_ctr
  header_ctr = 1
  header_record.header_ctr = ,
    "1"
  header_ctr = header_ctr + 1
  header_record.header_ctr = ,
    " "copies(display_rty".",20)
  header_ctr = header_ctr + 1
  header_record.header_ctr = ,
    " "copies("=",80)
  header_ctr = header_ctr + 1
  header_record.header_ctr = ,
    " Record      :" ,
    "#" right(input_ctr,9,"0") ,
    "Type:" display_rty||display_sty ,
    "Length:" length(smf_record.1)
    Address MVS "EXECIO" ,
      header_ctr "DISKW DEBUG (stem header_record.)"
  return 0

               /* We still need rexx in comment if read from SYSPROC */
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: <none> length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_002:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      "     SMF dump begin record"
    void_rc = write_debug_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " "
    print_ctr = print_ctr + 1
    print_record.print_ctr = ,
      "     SMF dump begin record"
    void_rc = write_print_data_out()
  end
  return 0

               /* We still need rexx in comment if read from SYSPROC */
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: <none> length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_003:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      "     SMF dump end record"
    void_rc = write_debug_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " "
    print_ctr = print_ctr + 1
    print_record.print_ctr = ,
      "     SMF dump end record"
    void_rc = write_print_data_out()
  end
  return 0

               /* We still need rexx in comment if read from SYSPROC */
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: SM100 length is 0001C Statistics
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_SM100:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_SM100,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: SM100 Length:" ,
      length(data_block_of_SM100)
    void_rc = hurl_chunks()
  end
  parse var smf_record.1 ,
    =00025 SM100BUF +4 , /* X - TEMPORARY POINTER TO BUFFER AR 00018 */
,/* =00029 SM100END +0 ,    C - START OF THE SELF DEFINING SEC 0001C */
    data_block_of_next_section           /* End of DSECT */
  /* next byte at 29 */
  hex_SM100BUF = c2x(SM100BUF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("SM100",desired_dsect) > 0)) then do
    void_rc = queue_SM100_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " SM100:"
    void_rc = write_print_data_out()
  end
  data_block_of_QWS0 = data_block_of_next_section
  void_rc = rexx_QWS0()
  if (dec_QWS00PSL > 0) then do
    ptr_QWS00PSO = dec_QWS00PSO + 1
    if (dec_QWS00PSO > dec_SMFxLEN) then NOP
    else ,
    if (dec_QWS00PSO = 0) then NOP
    else ,
    if (dec_QWS00PSN = 0) then NOP
    else ,
    if ((dec_QWS00PSO +dec_QWS00PSL) > dec_SMFxLEN) then NOP
    else do
      ptr_QWS00R1O = dec_QWS00R1O + 1
      do qws_loop = 1 to dec_QWS00PSN
        data_block_of_QWHS = ,
          substr(smf_record.1,ptr_QWS00PSO,dec_QWS00PSL)
        void_rc = rexx_QWHS()
        ptr_QWS00PSO = ptr_QWS00PSO + dec_QWS00PSL
      end
    end
  end
  select
    when (dec_QWHSIID = 0) then do
      void_rc = rexx_sm100_0000()
    end
    when (dec_QWHSIID = 1) then do
      void_rc = rexx_sm100_0001()
    end
    when (dec_QWHSIID = 2) then do
      void_rc = rexx_sm100_0002()
    end
    when (dec_QWHSIID = 3) then do
      void_rc = rexx_sm100_0003()
    end
    when (dec_QWHSIID = 4) then do
      void_rc = rexx_sm100_0004()
    end
    when (dec_QWHSIID = 5) then do
      void_rc = rexx_sm100_0005()
    end
    when (dec_QWHSIID = 105) then do
      void_rc = rexx_sm100_0105()
    end
    when (dec_QWHSIID = 106) then do
      void_rc = rexx_sm100_0106()
    end
    when (dec_QWHSIID = 140) then do
      void_rc = rexx_sm100_0140()
    end
    when (dec_QWHSIID = 141) then do
      void_rc = rexx_sm100_0141()
    end
    when (dec_QWHSIID = 142) then do
      void_rc = rexx_sm100_0142()
    end
    when (dec_QWHSIID = 143) then do
      void_rc = rexx_sm100_0143()
    end
    when (dec_QWHSIID = 144) then do
      void_rc = rexx_sm100_0144()
    end
    when (dec_QWHSIID = 145) then do
      void_rc = rexx_sm100_0145()
    end
    when (dec_QWHSIID = 146) then do
      void_rc = rexx_sm100_0146()
    end
    when (dec_QWHSIID = 202) then do
      void_rc = rexx_sm100_0202()
    end
    when (dec_QWHSIID = 225) then do
      void_rc = rexx_sm100_0225()
    end
    when (dec_QWHSIID = 230) then do
      void_rc = rexx_sm100_0230()
    end
    otherwise do
      say "    IFCID process 100-"dec_QWHSIID "not handled"
    end
  end
  return 0

queue_SM100_data_out:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TEMPORARY POINTER TO BUFFER  x:" hex_SM100BUF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 0
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0000:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0000 uses ????:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 1
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0001:
  ptr_QWS00R1O = dec_QWS00R1O + 1
  do qws_loop = 1 to dec_QWS00R1N
    data_block_of_QWSA = ,
      substr(smf_record.1,ptr_QWS00R1O,dec_QWS00R1L)
    void_rc = rexx_QWSA()
    ptr_QWS00R1O = ptr_QWS00R1O + dec_QWS00R1L
  end
  ptr_QWS00R2O = dec_QWS00R2O + 1
  do qws_loop = 1 to dec_QWS00R2N
    data_block_of_QWSB = ,
      substr(smf_record.1,ptr_QWS00R2O,dec_QWS00R2L)
    void_rc = rexx_QWSB()
    ptr_QWS00R2O = ptr_QWS00R2O + dec_QWS00R2L
  end
  ptr_QWS00R3O = dec_QWS00R3O + 1
  do qws_loop = 1 to dec_QWS00R3N
    data_block_of_QWSC = ,
      substr(smf_record.1,ptr_QWS00R3O,dec_QWS00R3L)
    void_rc = rexx_QWSC()
    ptr_QWS00R3O = ptr_QWS00R3O + dec_QWS00R3L
  end
  ptr_QWS00R4O = dec_QWS00R4O + 1
  do qws_loop = 1 to dec_QWS00R4N
    data_block_of_Q3ST = ,
      substr(smf_record.1,ptr_QWS00R4O,dec_QWS00R4L)
    void_rc = rexx_Q3ST()
    ptr_QWS00R4O = ptr_QWS00R4O + dec_QWS00R4L
  end
  ptr_QWS00R5O = dec_QWS00R5O + 1
  do qws_loop = 1 to dec_QWS00R5N
    data_block_of_DSNDQ9ST = ,
      substr(smf_record.1,ptr_QWS00R5O,dec_QWS00R5L)
    void_rc = rexx_DSNDQ9ST()
    ptr_QWS00R5O = ptr_QWS00R5O + dec_QWS00R5L
  end
  ptr_QWS00R6O = dec_QWS00R6O + 1
  do qws_loop = 1 to dec_QWS00R6N
    data_block_of_QWSD = ,
      substr(smf_record.1,ptr_QWS00R6O,dec_QWS00R6L)
    void_rc = rexx_QWSD()
    ptr_QWS00R6O = ptr_QWS00R6O + dec_QWS00R6L
  end
  ptr_QWS00R7O = dec_QWS00R7O + 1
  do qws_loop = 1 to dec_QWS00R7N
    data_block_of_QVLS = ,
      substr(smf_record.1,ptr_QWS00R7O,dec_QWS00R7L)
    void_rc = rexx_QVLS()
    ptr_QWS00R7O = ptr_QWS00R7O + dec_QWS00R7L
  end
  ptr_QWS00R8O = dec_QWS00R8O + 1
  do qws_loop = 1 to dec_QWS00R8N
    data_block_of_QVAS = ,
      substr(smf_record.1,ptr_QWS00R8O,dec_QWS00R8L)
    void_rc = rexx_QVAS()
    ptr_QWS00R8O = ptr_QWS00R8O + dec_QWS00R8L
  end
  ptr_QWS00R9O = dec_QWS00R9O + 1
  do qws_loop = 1 to dec_QWS00R9N
    data_block_of_QSST = ,
      substr(smf_record.1,ptr_QWS00R9O,dec_QWS00R9L)
    void_rc = rexx_QSST()
    ptr_QWS00R9O = ptr_QWS00R9O + dec_QWS00R9L
  end
  ptr_QWS00RAO = dec_QWS00RAO + 1
  if (dec_QWS00RAL > 0) then do
    do qws_loop = 1 to dec_QWS00RAN
      data_block_of_QLST = ,
        substr(smf_record.1,ptr_QWS00RAO,dec_QWS00RAL)
      void_rc = rexx_QLST()
      ptr_QWS00RAO = ptr_QWS00RAO + dec_QWS00RAL
    end
  end
  ptr_QWS00RBO = dec_QWS00RBO + 1
  do qws_loop = 1 to dec_QWS00RBN
    data_block_of_DSNDQJST = ,
      substr(smf_record.1,ptr_QWS00RBO,dec_QWS00RBL)
    void_rc = rexx_DSNDQJST()
    ptr_QWS00RBO = ptr_QWS00RBO + dec_QWS00RBL
  end
  ptr_QWS00RCO = dec_QWS00RCO + 1
  do qws_loop = 1 to dec_QWS00RCN
    data_block_of_QDST = ,
      substr(smf_record.1,ptr_QWS00RCO,dec_QWS00RCL)
    void_rc = rexx_QDST()
    ptr_QWS00RCO = ptr_QWS00RCO + dec_QWS00RCL
  end
  ptr_QWS00RDO = dec_QWS00RDO + 1
  do qws_loop = 1 to dec_QWS00RDN
    data_block_of_QWOS = ,
      substr(smf_record.1,ptr_QWS00RDO,dec_QWS00RDL)
    void_rc = rexx_QWOS()
    ptr_QWS00RDO = ptr_QWS00RDO + dec_QWS00RDL
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0002:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0002 uses QWS1:"
    void_rc = write_debug_data_out()
  end
  data_block_of_QWS1 = data_block_of_next_section
  void_rc = rexx_QWS1()
  ptr_QWS00R1O = dec_QWS00R1O + 1
  do qws_loop = 1 to dec_QWS00R1N
    data_block_of_QWSA = ,
      substr(smf_record.1,ptr_QWS00R1O,dec_QWS00R1L)
    void_rc = rexx_QWSA()
    ptr_QWS00R1O = ptr_QWS00R1O + dec_QWS00R1L
  end
  ptr_QWS00R2O = dec_QWS00R2O + 1
  do qws_loop = 1 to dec_QWS00R2N
    data_block_of_QWSB = ,
      substr(smf_record.1,ptr_QWS00R2O,dec_QWS00R2L)
    void_rc = rexx_QWSB()
    ptr_QWS00R2O = ptr_QWS00R2O + dec_QWS00R2L
  end
  ptr_QWS00R3O = dec_QWS00R3O + 1
  do qws_loop = 1 to dec_QWS00R3N
    data_block_of_QWSC = ,
      substr(smf_record.1,ptr_QWS00R3O,dec_QWS00R3L)
    void_rc = rexx_QWSC()
    ptr_QWS00R3O = ptr_QWS00R3O + dec_QWS00R3L
  end
  ptr_QWS00R4O = dec_QWS00R4O + 1
  do qws_loop = 1 to dec_QWS00R4N
    data_block_of_Q3ST = ,
      substr(smf_record.1,ptr_QWS00R4O,dec_QWS00R4L)
    void_rc = rexx_Q3ST()
    ptr_QWS00R4O = ptr_QWS00R4O + dec_QWS00R4L
  end
  ptr_QWS00R5O = dec_QWS00R5O + 1
  do qws_loop = 1 to dec_QWS00R5N
    data_block_of_DSNDQ9ST = ,
      substr(smf_record.1,ptr_QWS00R5O,dec_QWS00R5L)
    void_rc = rexx_DSNDQ9ST()
    ptr_QWS00R5O = ptr_QWS00R5O + dec_QWS00R5L
  end
  ptr_QWS00R6O = dec_QWS00R6O + 1
  do qws_loop = 1 to dec_QWS00R6N
    data_block_of_QWSD = ,
      substr(smf_record.1,ptr_QWS00R6O,dec_QWS00R6L)
    void_rc = rexx_QWSD()
    ptr_QWS00R6O = ptr_QWS00R6O + dec_QWS00R6L
  end
  ptr_QWS00R7O = dec_QWS00R7O + 1
  do qws_loop = 1 to dec_QWS00R7N
    data_block_of_QVLS = ,
      substr(smf_record.1,ptr_QWS00R7O,dec_QWS00R7L)
    void_rc = rexx_QVLS()
    ptr_QWS00R7O = ptr_QWS00R7O + dec_QWS00R7L
  end
  ptr_QWS00R8O = dec_QWS00R8O + 1
  do qws_loop = 1 to dec_QWS00R8N
    data_block_of_QVAS = ,
      substr(smf_record.1,ptr_QWS00R8O,dec_QWS00R8L)
    void_rc = rexx_QVAS()
    ptr_QWS00R8O = ptr_QWS00R8O + dec_QWS00R8L
  end
  ptr_QWS00R9O = dec_QWS00R9O + 1
  do qws_loop = 1 to dec_QWS00R9N
    data_block_of_QSST = ,
      substr(smf_record.1,ptr_QWS00R9O,dec_QWS00R9L)
    void_rc = rexx_QSST()
    ptr_QWS00R9O = ptr_QWS00R9O + dec_QWS00R9L
  end
  ptr_QWS00RAO = dec_QWS00RAO + 1
  if (dec_QWS00RAL > 0) then do
    do qws_loop = 1 to dec_QWS00RAN
      data_block_of_QLST = ,
        substr(smf_record.1,ptr_QWS00RAO,dec_QWS00RAL)
      void_rc = rexx_QLST()
      ptr_QWS00RAO = ptr_QWS00RAO + dec_QWS00RAL
    end
  end
  ptr_QWS00RBO = dec_QWS00RBO + 1
  do qws_loop = 1 to dec_QWS00RBN
    data_block_of_DSNDQJST = ,
      substr(smf_record.1,ptr_QWS00RBO,dec_QWS00RBL)
    void_rc = rexx_DSNDQJST()
    ptr_QWS00RBO = ptr_QWS00RBO + dec_QWS00RBL
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 3
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
/* hereken */
rexx_sm100_0003:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0003 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 4
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0004:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0004 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 5
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0005:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0005 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 105
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0105:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0105 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 106
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0106:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0106 uses QWPZ:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 140
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0140:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0140 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 141
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0141:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0141 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 142
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0142:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0142 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 143
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0143:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0143 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 144
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0144:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0144 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 145
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0145:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0145 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 146
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0146:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0146 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 202
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0202:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0202 uses QWS2:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 225
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0225:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0225 uses some unknown DSECT:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 100 IFCID 230
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm100_0230:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm100_0230 uses QWS3:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWS0 length is 00070
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWS0:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWS0,112)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWS0 Length: 112"
    void_rc = hurl_chunks()
  end
  qws_loop = 0
  parse var data_block_of_QWS0 ,
    =00001 QWS00PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWS00PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWS00PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWS00R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWS00R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWS00R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
    =00017 QWS00R2O +4 , /* R - OFFSET TO THE DATA SECTION     00010 */
    =00021 QWS00R2L +2 , /* X - LENGTH OF THE DATA SECTION     00014 */
    =00023 QWS00R2N +2 , /* X - NUMBER OF DATA SECTIONS        00016 */
    =00025 QWS00R3O +4 , /* R - OFFSET TO THE DATA SECTION     00018 */
    =00029 QWS00R3L +2 , /* X - LENGTH OF THE DATA SECTION     0001C */
    =00031 QWS00R3N +2 , /* X - NUMBER OF DATA SECTIONS        0001E */
    =00033 QWS00R4O +4 , /* X - OFFSET TO THE DATA SECTION     00020 */
    =00037 QWS00R4L +2 , /* X - LENGTH OF THE DATA SECTION     00024 */
    =00039 QWS00R4N +2 , /* X - NUMBER OF DATA SECTIONS        00026 */
    =00041 QWS00R5O +4 , /* X - OFFSET TO THE DATA SECTION     00028 */
    =00045 QWS00R5L +2 , /* X - LENGTH OF THE DATA SECTION     0002C */
    =00047 QWS00R5N +2 , /* X - NUMBER OF DATA SECTIONS        0002E */
    =00049 QWS00R6O +4 , /* X - OFFSET TO THE DATA SECTION     00030 */
    =00053 QWS00R6L +2 , /* X - LENGTH OF THE DATA SECTION     00034 */
    =00055 QWS00R6N +2 , /* X - NUMBER OF DATA SECTIONS        00036 */
    =00057 QWS00R7O +4 , /* X - OFFSET TO THE DATA SECTION     00038 */
    =00061 QWS00R7L +2 , /* X - LENGTH OF THE DATA SECTION     0003C */
    =00063 QWS00R7N +2 , /* X - NUMBER OF DATA SECTIONS        0003E */
    =00065 QWS00R8O +4 , /* X - OFFSET TO THE DATA SECTION     00040 */
    =00069 QWS00R8L +2 , /* X - LENGTH OF THE DATA SECTION     00044 */
    =00071 QWS00R8N +2 , /* X - NUMBER OF DATA SECTIONS        00046 */
    =00073 QWS00R9O +4 , /* X - OFFSET TO THE DATA SECTION     00048 */
    =00077 QWS00R9L +2 , /* X - LENGTH OF THE DATA SECTION     0004C */
    =00079 QWS00R9N +2 , /* X - NUMBER OF DATA SECTIONS        0004E */
    =00081 QWS00RAO +4 , /* X - OFFSET TO THE DATA SECTION     00050 */
    =00085 QWS00RAL +2 , /* X - LENGTH OF THE DATA SECTION     00054 */
    =00087 QWS00RAN +2 , /* X - NUMBER OF DATA SECTIONS        00056 */
    =00089 QWS00RBO +4 , /* X - OFFSET TO THE DATA SECTION     00058 */
    =00093 QWS00RBL +2 , /* X - LENGTH OF THE DATA SECTION     0005C */
    =00095 QWS00RBN +2 , /* X - NUMBER OF DATA SECTIONS        0005E */
    =00097 QWS00RCO +4 , /* X - OFFSET TO THE DATA SECTION     00060 */
    =00101 QWS00RCL +2 , /* X - LENGTH OF THE DATA SECTION     00064 */
    =00103 QWS00RCN +2 , /* X - NUMBER OF DATA SECTIONS        00066 */
    =00105 QWS00RDO +4 , /* X - OFFSET TO THE DATA SECTION     00068 */
    =00109 QWS00RDL +2 , /* X - LENGTH OF THE DATA SECTION     0006C */
    =00111 QWS00RDN +2 , /* X - NUMBER OF DATA SECTIONS        0006E */
,/* =00113 QWS00END +0 ,    C - END OF THE SELF DEFINING SECTI 00070 */
    .           /* End of DSECT */
  /* next byte at 113 */
  dec_QWS00PSO = c2d(QWS00PSO)
  dec_QWS00PSL = c2d(QWS00PSL)
  dec_QWS00PSN = c2d(QWS00PSN)
  dec_QWS00R1O = c2d(QWS00R1O)
  dec_QWS00R1L = c2d(QWS00R1L)
  dec_QWS00R1N = c2d(QWS00R1N)
  dec_QWS00R2O = c2d(QWS00R2O)
  dec_QWS00R2L = c2d(QWS00R2L)
  dec_QWS00R2N = c2d(QWS00R2N)
  dec_QWS00R3O = c2d(QWS00R3O)
  dec_QWS00R3L = c2d(QWS00R3L)
  dec_QWS00R3N = c2d(QWS00R3N)
  dec_QWS00R4O = c2d(QWS00R4O)
  dec_QWS00R4L = c2d(QWS00R4L)
  dec_QWS00R4N = c2d(QWS00R4N)
  dec_QWS00R5O = c2d(QWS00R5O)
  dec_QWS00R5L = c2d(QWS00R5L)
  dec_QWS00R5N = c2d(QWS00R5N)
  dec_QWS00R6O = c2d(QWS00R6O)
  dec_QWS00R6L = c2d(QWS00R6L)
  dec_QWS00R6N = c2d(QWS00R6N)
  dec_QWS00R7O = c2d(QWS00R7O)
  dec_QWS00R7L = c2d(QWS00R7L)
  dec_QWS00R7N = c2d(QWS00R7N)
  dec_QWS00R8O = c2d(QWS00R8O)
  dec_QWS00R8L = c2d(QWS00R8L)
  dec_QWS00R8N = c2d(QWS00R8N)
  dec_QWS00R9O = c2d(QWS00R9O)
  dec_QWS00R9L = c2d(QWS00R9L)
  dec_QWS00R9N = c2d(QWS00R9N)
  dec_QWS00RAO = c2d(QWS00RAO)
  dec_QWS00RAL = c2d(QWS00RAL)
  dec_QWS00RAN = c2d(QWS00RAN)
  dec_QWS00RBO = c2d(QWS00RBO)
  dec_QWS00RBL = c2d(QWS00RBL)
  dec_QWS00RBN = c2d(QWS00RBN)
  dec_QWS00RCO = c2d(QWS00RCO)
  dec_QWS00RCL = c2d(QWS00RCL)
  dec_QWS00RCN = c2d(QWS00RCN)
  dec_QWS00RDO = c2d(QWS00RDO)
  dec_QWS00RDL = c2d(QWS00RDL)
  dec_QWS00RDN = c2d(QWS00RDN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWS0",desired_dsect) > 0)) then do
    void_rc = queue_QWS0_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWS0:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWS0_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWS0:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    " qwhs OFFSET: Product Section       :" dec_QWS00PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTION :" dec_QWS00PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS    :" dec_QWS00PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    " qwsa OFFSET: Control ASID Stats    :" dec_QWS00R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWS00R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWS00R1N
  if (dec_QWHSIID = 1) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwsb OFFSET: IFC Dest Stats        :" dec_QWS00R2O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R2L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R2N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwsc OFFSET: IFCID Stat Info       :" dec_QWS00R3O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R3L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R3N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " q3st OFFSET: Subsystem Support Stat:" dec_QWS00R4O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R4L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R4N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " q9st OFFSET: Command Stats         :" dec_QWS00R5O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R5L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R5N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwsd OFFSET: IFC Checkpoint Info   :" dec_QWS00R6O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R6L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R6N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qvls OFFSET: Latch Stats           :" dec_QWS00R7O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R7L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R7N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qvas OFFSET: Agent Services Stats  :" dec_QWS00R8O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R8L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R8N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qsst OFFSET: Storage Manager Stats :" dec_QWS00R9O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R9L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R9N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qlst OFFSET: DDF Stats             :" dec_QWS00RAO
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00RAL
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00RAN
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qjst OFFSET: Log Manager Stats     :" dec_QWS00RBO
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00RBL
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00RBN
  end
  if (dec_QWHSIID = 2) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwsb OFFSET: IFC Dest Stats        :" dec_QWS00R2O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R2L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R2N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwsc OFFSET: IFCID Stat Info       :" dec_QWS00R3O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R3L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R3N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " q3st OFFSET: Subsystem Support Stat:" dec_QWS00R4O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R4L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R4N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " q9st OFFSET: Command Stats         :" dec_QWS00R5O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R5L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R5N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwsd OFFSET: IFC Checkpoint Info   :" dec_QWS00R6O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R6L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R6N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qvls OFFSET: Latch Stats           :" dec_QWS00R7O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R7L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R7N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qvas OFFSET: Agent Services Stats  :" dec_QWS00R8O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R8L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R8N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qsst OFFSET: Storage Manager Stats :" dec_QWS00R9O
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00R9L
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00R9N
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qlst OFFSET: DDF Stats             :" dec_QWS00RAO
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00RAL
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00RAN
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qjst OFFSET: Log Manager Stats     :" dec_QWS00RBO
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00RBL
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00RBN
  end
  if (dec_QWHSIID = 1) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qdst OFFSET: DDF System Stats      :" dec_QWS00RCO
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00RCL
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00RCN
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      " qwos OFFSET: zOS System Stats      :" dec_QWS00RDO
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      LENGTH OF THE DATA SECTION    :" dec_QWS00RDL
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATA SECTIONS       :" dec_QWS00RDN
  end
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWHS length is 00052
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWHS:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWHS,82)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWHS Length: 82"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWHS ,
    =00001 QWHSLEN +2 , /* X - LENGTH OF THE STANDARD HEADER   00000 */
    =00003 QWHSTYP +1 , /* X - HEADER TYPE                     00002 */
  ,     /* QWHSHS01 EQU x'00000001' ..STANDARD HEADER                */
  ,     /* QWHSHC02 EQU x'00000002' ..CORRELATION HEADER             */
  ,     /* QWHSHT04 EQU x'00000004' ..TRACE HEADER                   */
  ,     /* QWHSHU08 EQU x'00000008' ..CPU HEADER                     */
  ,     /* QWHSHD16 EQU x'00000010' ..DISTRIBUTED HEADER             */
  ,     /* QWHSHA32 EQU x'00000020' ..DATA SHARING HEADER            */
    =00004 QWHSRMID +1 , /* X - RESOURCE MANAGER ID            00003 */
    =00005 QWHSIID +2 , /* X - IFCID                           00004 */
,/* =00007 QWHSRELN +0 ,    X - RELEASE NUMBER AREA            00006 */
    =00007 QWHSNSDA +1 , /* X - NUMBER OF SELF DEFINING AREAS  00006 */
    =00008 QWHSRN +1 , /* X - RELEASE INDICATOR NUMBER - HEX   00007 */
    =00009 QWHSACE +4 , /* A - ACE ADDRESS - DISPATCH UNIT ADD 00008 */
    =00013 QWHSSSID +4 , /* C - SUBSYSTEM NAME                 0000C */
    =00017 QWHSSTCK +8 , /* X - STORE CLOCK VALUE OF HEADER -  00010 */
    =00025 QWHSISEQ +4 , /* X - SEQUENCE NUMBER FOR IFCID      00018 */
    =00029 QWHSWSEQ +4 , /* X - SEQUENCE NUMBER FOR DESTINATIO 0001C */
    =00033 QWHSMTN +4 , /* X - ACTIVE TRACE NUMBER MASK        00020 */
    =00037 QWHSLOCN +16 , /* C - %U LOCAL LOCATION NAME        00024 */
,/* =00053 QWHSLWID +0 ,    C - LUWID                          00034 */
    =00053 QWHSNID +8 , /* C - NETWORK ID                      00034 */
    =00061 QWHSLUNM +8 , /* C - LUNAME                         0003C */
    =00069 QWHSLUUV +6 , /* X - UNIQUENESS VALUE               00044 */
    =00075 QWHSLUCC +2 , /* G - COMMIT COUNT                   0004A */
    =00077 QWHSFLAG +1 , /* X - Flags                          0004C */
    =00078 RSVD0001 +1 , /* X - Reserved                       0004D */
    =00079 QWHSLOCN_Off +2 , /* H - Offset from QWHS to        0004E */
    =00081 QWHSSUBV +2 , /* H - THE SUBVERSION FOR THE BASE RE 00050 */
,/* =00083 QWHSEND +0 ,    C - END OF STANDARD HEADER          00052 */
    =00001 QWHSLOCN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHSLOCN_Var +0 ,    C - %U LOCAL LOCATION NAME     00002 */
  ,     /* QWHS0000 EQU x'00000000' ..DEFAULT - NORMAL TRACE RECORDS */
  ,     /* QWHS0001 EQU x'00000001' 26 ..SYSTEM STATISTICS           */
  ,     /* QWHS0002 EQU x'00000002' 26 ..DATA BASE STATISTICS        */
  ,     /* QWHS0003 EQU x'00000003' 26 ..ACCOUNTING                  */
  ,     /* QWHS0004 EQU x'00000004' 16  START TRACE MESSAGE          */
  ,     /* QWHS0005 EQU x'00000005' 16  STOP TRACE MESSAGE           */
  ,     /* QWHS0006 EQU x'00000006' 10  READ BEGIN                   */
  ,     /* QWHS0007 EQU x'00000007' 10  READ END                     */
  ,     /* QWHS0008 EQU x'00000008' 10  WRITE BEGIN                  */
  ,     /* QWHS0009 EQU x'00000009' 10  WRITE END                    */
  ,     /* QWHS0010 EQU x'0000000A' 10  ASYNCHRONOUS WRITE BEGIN     */
  ,     /* QWHS0011 EQU x'0000000B' 14  VALIDATION EXIT              */
  ,     /* QWHS0012 EQU x'0000000C' 14  ENCODE EXIT                  */
  ,     /* QWHS0013 EQU x'0000000D' 14  HSET ENTRY                   */
  ,     /* QWHS0014 EQU x'0000000E' 14  HSET EXIT                    */
  ,     /* QWHS0015 EQU x'0000000F' 14  OSET ENTRY                   */
  ,     /* QWHS0016 EQU x'00000010' 14  SRT1 ENTRY                   */
  ,     /* QWHS0017 EQU x'00000011' 14  RNXT ENTRY                   */
  ,     /* QWHS0018 EQU x'00000012' 14  EXIT FROM OSET, SRT1, OR RNX */
  ,     /* QWHS0019 EQU x'00000013' 14  DECODE EXIT                  */
  ,     /* QWHS0020 EQU x'00000014' 14  LOCK SUMMARY                 */
  ,     /* QWHS0021 EQU x'00000015' 20  LOCK DETAIL                  */
  ,     /* QWHS0022 EQU x'00000016' 22  MINI PLANS OPTIMIZER         */
  ,     /* QWHS0023 EQU x'00000017' 21  UTILITY START                */
  ,     /* QWHS0024 EQU x'00000018' 21  UTILITY OBJECT CHANGE        */
  ,     /* QWHS0025 EQU x'00000019' 21  UTILITY END                  */
  ,     /* QWHS0026 EQU x'0000001A' 20  SORT WORK FILE               */
  ,     /* QWHS0027 EQU x'0000001B' 20  SORT NEW RUN                 */
  ,     /* QWHS0028 EQU x'0000001C' 20  SORT RUNS CREATED            */
  ,     /* QWHS0029 EQU x'0000001D' 14  EDM I/O START                */
  ,     /* QWHS0030 EQU x'0000001E' 14  EDM I/O END                  */
  ,     /* QWHS0031 EQU x'0000001F' 14  EDM POOL NOT LARGE ENOUGH    */
  ,     /* QWHS0032 EQU x'00000020' 04  BEFORE EXECUTION UNIT SWITCH */
  ,     /* QWHS0033 EQU x'00000021' 04  AFTER EXECUTION UNIT SWITCH  */
  ,     /* QWHS0034 EQU x'00000022' 04  READ  ENTRY                  */
  ,     /* QWHS0035 EQU x'00000023' 04  READ EXIT                    */
  ,     /* QWHS0036 EQU x'00000024' 04  NON I/O BEGIN                */
  ,     /* QWHS0037 EQU x'00000025' 04  NON I/O EXIT                 */
  ,     /* QWHS0038 EQU x'00000026' 04  WRITE ACTIVE ENTRY           */
  ,     /* QWHS0039 EQU x'00000027' 04  WRITE ACTIVE EXIT            */
  ,     /* QWHS0040 EQU x'00000028' 04  WRITE ARCHIVE ENTRY          */
  ,     /* QWHS0041 EQU x'00000029' 04  WRITE ARCHIVE EXIT           */
  ,     /* QWHS0042 EQU x'0000002A' 03  CHECKPOINT ENTRY             */
  ,     /* QWHS0043 EQU x'0000002B' 03  CHECKPOINT EXIT              */
  ,     /* QWHS0044 EQU x'0000002C' 20  IRLM SUSPEND ENTRY           */
  ,     /* QWHS0045 EQU x'0000002D' 20  IRLM SUSPEND EXIT            */
  ,     /* QWHS0046 EQU x'0000002E' 02  SYNCHRONOUS EU SWITCH        */
  ,     /* QWHS0047 EQU x'0000002F' 02  EU SWITCH SRB ENTRY          */
  ,     /* QWHS0048 EQU x'00000030' 02  EU SWITCH SRB EXIT           */
  ,     /* QWHS0049 EQU x'00000031' 02  EU SWITCH TCB ENTRY          */
  ,     /* QWHS0050 EQU x'00000032' 02  EU SWITCH TCB EXIT           */
  ,     /* QWHS0051 EQU x'00000033' 02  SHARED LATCH RESUME          */
  ,     /* QWHS0052 EQU x'00000034' 02  SHARED LATCH SUSPEND ENTRY   */
  ,     /* QWHS0053 EQU x'00000035' 22  END DESCRIBE                 */
  ,     /* QWHS0054 EQU x'00000036' 20  LOCK CONTENTION INFORMATION  */
  ,     /* QWHS0055 EQU x'00000037' 22  SQL SET CURRENT SQLID        */
  ,     /* QWHS0056 EQU x'00000038' 02  EXCLUSIVE LATCH SUSPEND      */
  ,     /* QWHS0057 EQU x'00000039' 02  EXCLUSIVE LATCH RESUME       */
  ,     /* QWHS0058 EQU x'0000003A' 22  SQL CALL COMPLETION          */
  ,     /* QWHS0059 EQU x'0000003B' 22  SQL FETCH                    */
  ,     /* QWHS0060 EQU x'0000003C' 22  SQL SELECT                   */
  ,     /* QWHS0061 EQU x'0000003D' 22  SQL DEL/INSERT/UPDATE        */
  ,     /* QWHS0062 EQU x'0000003E' 22  SQL AUTH/DDL/LOCK            */
  ,     /* QWHS0063 EQU x'0000003F' 22  SQL CALL TEXT                */
  ,     /* QWHS0064 EQU x'00000040' 22  SQL PREPARE                  */
  ,     /* QWHS0065 EQU x'00000041' 22  SQL OPEN CURSOR              */
  ,     /* QWHS0066 EQU x'00000042' 22  SQL CLOSE CURSOR             */
  ,     /* QWHS0067 EQU x'00000043' 26  ACCOUNTING COLLECTION BEGINN */
  ,     /* QWHS0068 EQU x'00000044' 07  ABORT ENTRY                  */
  ,     /* QWHS0069 EQU x'00000045' 07  ABORT EXIT                   */
  ,     /* QWHS0070 EQU x'00000046' 07  COMMIT ENTRY                 */
  ,     /* QWHS0071 EQU x'00000047' 07  COMMIT EXIT                  */
  ,     /* QWHS0072 EQU x'00000048' 07  CREATE THREAD ENTRY          */
  ,     /* QWHS0073 EQU x'00000049' 07  CREATE THREAD EXIT           */
  ,     /* QWHS0074 EQU x'0000004A' 07  TERMINATE THREAD ENTRY       */
  ,     /* QWHS0075 EQU x'0000004B' 07  TERMINATE THREAD EXIT        */
  ,     /* QWHS0076 EQU x'0000004C' 07  END OF MEMORY ENTRY          */
  ,     /* QWHS0077 EQU x'0000004D' 07  END OF MEMORY EXIT           */
  ,     /* QWHS0078 EQU x'0000004E' 07  END OF TASK ENTRY            */
  ,     /* QWHS0079 EQU x'0000004F' 07  END OF TASK EXIT             */
  ,     /* QWHS0080 EQU x'00000050' 07  ESTABLISH EXITS ENTRY        */
  ,     /* QWHS0081 EQU x'00000051' 07  ESTABLISH EXITS EXIT         */
  ,     /* QWHS0082 EQU x'00000052' 07  IDENTIFY ENTRY               */
  ,     /* QWHS0083 EQU x'00000053' 07  IDENTIFY EXIT                */
  ,     /* QWHS0084 EQU x'00000054' 07  PREPARE ENTRY                */
  ,     /* QWHS0085 EQU x'00000055' 07  PREPARE EXIT                 */
  ,     /* QWHS0086 EQU x'00000056' 07  SIGNON ENTRY                 */
  ,     /* QWHS0087 EQU x'00000057' 07  SIGNON EXIT                  */
  ,     /* QWHS0088 EQU x'00000058' 07  SYNC ENTRY                   */
  ,     /* QWHS0089 EQU x'00000059' 07  SYNC EXIT                    */
  ,     /* QWHS0090 EQU x'0000005A' 23  COMMAND ENTRY                */
  ,     /* QWHS0091 EQU x'0000005B' 23  COMMAND EXIT                 */
  ,     /* QWHS0092 EQU x'0000005C' 19  AMS ENTRY                    */
  ,     /* QWHS0093 EQU x'0000005D' 02  SUSPEND                      */
  ,     /* QWHS0094 EQU x'0000005E' 02  RESUME                       */
  ,     /* QWHS0095 EQU x'0000005F' 22  SORT ENTRY                   */
  ,     /* QWHS0096 EQU x'00000060' 22  SORT EXIT                    */
  ,     /* QWHS0097 EQU x'00000061' 19  AMS EXIT                     */
  ,     /* QWHS0098 EQU x'00000062' 06  GETMAIN/FREEMAIN ENTRY       */
  ,     /* QWHS0099 EQU x'00000063' 06  GETMAIN/FREEMAIN EXIT        */
  ,     /* QWHS0100 EQU x'00000064' 06  POOL EXPAND/CONTRACT ENTRY   */
  ,     /* QWHS0101 EQU x'00000065' 06  POOL EXPAND/CONTRACE EXIT    */
  ,     /* QWHS0102 EQU x'00000066' 02  SHORT ON STORAGE ON          */
  ,     /* QWHS0103 EQU x'00000067' 02  SHORT ON STORAGE OFF         */
  ,     /* QWHS0104 EQU x'00000068' 04  LOG DATA SET MAPPING         */
  ,     /* QWHS0105 EQU x'00000069' 10  DBID/OBID MAPPING            */
  ,     /* QWHS0106 EQU x'0000006A' 26  Z PARM INFORMATION           */
  ,     /* QWHS0107 EQU x'0000006B' 10  BUFFER MANAGER OPEN/CLOSE    */
  ,     /* QWHS0108 EQU x'0000006C' 20  BIND/REBIND BEGINNING        */
  ,     /* QWHS0109 EQU x'0000006D' 20  BIND/REBIND END              */
  ,     /* QWHS0110 EQU x'0000006E' 20  FREE BEGINNING               */
  ,     /* QWHS0111 EQU x'0000006F' 20  FREE END                     */
  ,     /* QWHS0112 EQU x'00000070' 20  SUCCESSFUL PLAN ALLOCATION A */
  ,     /* QWHS0113 EQU x'00000071' 20  SUCCESSFUL ALLOCATION SYSTEM */
  ,     /* QWHS0114 EQU x'00000072' 04  BEGIN READ I/O ARCHIVE       */
  ,     /* QWHS0115 EQU x'00000073' 04  END READ I/O ARCHIVE DASD    */
  ,     /* QWHS0116 EQU x'00000074' 04  END READ I/O ARCHIVE TAPE    */
  ,     /* QWHS0117 EQU x'00000075' 04  BEGIN READ ARCHIVE           */
  ,     /* QWHS0118 EQU x'00000076' 04  END READ ARCHIVE             */
  ,     /* QWHS0119 EQU x'00000077' 04  BEG BSDS WRITE               */
  ,     /* QWHS0120 EQU x'00000078' 04  END BSDS WRITE               */
  ,     /* QWHS0121 EQU x'00000079' 07  THREAD LEVEL ENTRY INTO DB2  */
  ,     /* QWHS0122 EQU x'0000007A' 07  THREAD LEVEL EXIT FROM DB2   */
  ,     /* QWHS0123 EQU x'0000007B' 26  RESERVED FOR SRV GENERATED R */
  ,     /* QWHS0124 EQU x'0000007C' 26  SQL STATEMENT ON READS       */
  ,     /* QWHS0125 EQU x'0000007D' 22  MULTIPLE INDEX ACCESS PATH S */
  ,     /* QWHS0126 EQU x'0000007E' 04  BUFFER LOG WRITES..READA     */
  ,     /* QWHS0127 EQU x'0000007F' 10  BEGIN WAIT FOR I/O BY ANOTHE */
  ,     /* QWHS0128 EQU x'00000080' 10  END WAIT FOR I/O BY ANOTHER  */
  ,     /* QWHS0129 EQU x'00000081' 04  BUFFER LOG WRITES..READS     */
  ,     /* QWHS0130 EQU x'00000082' 14  RESERVED INDEX LOGGING       */
  ,     /* QWHS0131 EQU x'00000083' 21  USED BY UTILITIES            */
  ,     /* QWHS0132 EQU x'00000084' 16  DBET Changes                 */
  ,     /* QWHS0133 EQU x'00000085' 14  EDM service                  */
  ,     /* QWHS0134 EQU x'00000086' 14  EDM service                  */
  ,     /* QWHS0135 EQU x'00000087' 14  WORK FILE ALLOC/DELETE BLOCK */
  ,     /* QWHS0136 EQU x'00000088' 22  SQL PARSE                    */
  ,     /* QWHS0137 EQU x'00000089' 22  PATH                         */
  ,     /* QWHS0138 EQU x'0000008A' 14  EDM service                  */
  ,     /* QWHS0139 EQU x'0000008B' 14  EDM service                  */
  ,     /* QWHS0140 EQU x'0000008C' 22  AUTHORIZATION FAILURES       */
  ,     /* QWHS0141 EQU x'0000008D' 22  EXPLICIT GRANTS AND REVOKES  */
  ,     /* QWHS0142 EQU x'0000008E' 22  CREATES, ALTERS, AND DROPS   */
  ,     /* QWHS0143 EQU x'0000008F' 14  FIRST CHANGE (WRITE) AUDIT O */
  ,     /* QWHS0144 EQU x'00000090' 14  FIRST ACCESS (READ) AUDITED  */
  ,     /* QWHS0145 EQU x'00000091' 22  SQL TEXT FOR AUDITED OBJECT  */
  ,     /* QWHS0146 EQU x'00000092' 16  INSTALLATION AUDIT RECORD    */
  ,     /* QWHS0147 EQU x'00000093' 26  ACTIVE THREAD SNAPSHOT       */
  ,     /* QWHS0148 EQU x'00000094' 26  ACTIVE THREAD DETAIL         */
  ,     /* QWHS0149 EQU x'00000095' 16  ALL LOCK HOLDERS OF A RESOUR */
  ,     /* QWHS0150 EQU x'00000096' 16  ALL LOCK FOR A USER          */
  ,     /* QWHS0151 EQU x'00000097' 16  INSTALLATION ACCOUNTING INFO */
  ,     /* QWHS0152 EQU x'00000098' 16  INSTALLATION STATISTICS      */
  ,     /* QWHS0153 EQU x'00000099' 16  INSTALLATION PERFORMANCE EXC */
  ,     /* QWHS0154 EQU x'0000009A' 16  INSTALLATION PERFORMANCE     */
  ,     /* QWHS0155 EQU x'0000009B' 16  INSTALLATION MONITORING      */
  ,     /* QWHS0156 EQU x'0000009C' 16  INSTALLATION SERVICEABILITY  */
  ,     /* QWHS0157 EQU x'0000009D' 25  DRDS REQUESTING SITE DATA    */
  ,     /* QWHS0158 EQU x'0000009E' 25  DRDS RESPONDING SITE DATA    */
  ,     /* QWHS0159 EQU x'0000009F' 25  DRDS CONVERSATION MGR INTERA */
  ,     /* QWHS0160 EQU x'000000A0' 27  DC REQUESTING AGENT DATA     */
  ,     /* QWHS0161 EQU x'000000A1' 27  DC RESPONDING AGENT DATA     */
  ,     /* QWHS0162 EQU x'000000A2' 28  DTM REQUESTING AGENT DATA    */
  ,     /* QWHS0163 EQU x'000000A3' 28  DTM RESPONDING AGENT DATA    */
  ,     /* QWHS0164 EQU x'000000A4' 27  VTAM EXITS TO DB2            */
  ,     /* QWHS0165 EQU x'000000A5' 27  VTAM MACRO CALLS/RETURNS     */
  ,     /* QWHS0166 EQU x'000000A6' 27  BUFFER SENT/RECEIVED         */
  ,     /* QWHS0167 EQU x'000000A7' 27  CONVERSATION ALLOCATION REQU */
  ,     /* QWHS0168 EQU x'000000A8' 22  DISTRIBUTED SQL STATEMENT    */
  ,     /* QWHS0169 EQU x'000000A9' 27  DISTRIBUTED AUTHID TRANSLATI */
  ,     /* QWHS0170 EQU x'000000AA' 02  BEGIN WAIT FOR EU SWITCH     */
  ,     /* QWHS0171 EQU x'000000AB' 02  END WAIT FOR EU SWITCH       */
  ,     /* QWHS0172 EQU x'000000AC' 20  DEADLOCK DATA                */
  ,     /* QWHS0173 EQU x'000000AD' 22  DYNAMIC SQL EXCEEDS ASUTIME  */
  ,     /* QWHS0174 EQU x'000000AE' 03  BEGIN ARC LOG MODE(QUIESCE)  */
  ,     /* QWHS0175 EQU x'000000AF' 03  END ARC LOG MODE(QUIESCE) WA */
  ,     /* QWHS0176 EQU x'000000B0' RESERVED                         */
  ,     /* QWHS0177 EQU x'000000B1' 22  SUCCESSFUL PACKAGE ALLOCATIO */
  ,     /* QWHS0178 EQU x'000000B2' 03  START DSNJW117 EXIT ROUTINE  */
  ,     /* QWHS0179 EQU x'000000B3' 03  END DSNJW117 EXIT ROUTINE    */
  ,     /* QWHS0180 EQU x'000000B4' 27  DSS COMMUNICATION BUFFERS    */
  ,     /* QWHS0181 EQU x'000000B5' 29  DDM LEVEL 6B OBJECTS         */
  ,     /* QWHS0182 EQU x'000000B6' 29  DDM LEVEL 6B OBJECTS         */
  ,     /* QWHS0183 EQU x'000000B7' 25  DRDS RDS/SCC INTERFACE DATA  */
  ,     /* QWHS0184 EQU x'000000B8' 27  DC COMMUNICATION BUFFERS     */
  ,     /* QWHS0185 EQU x'000000B9' 16  CHANGED DATA CAPTURE         */
  ,     /* QWHS0186 EQU x'000000BA' 16  MEPL TRACE                   */
  ,     /* QWHS0187 EQU x'000000BB' 26  Accounting class 5 flag      */
  ,     /* QWHS0188 EQU x'000000BC' 16  CDC PERFORMANCE RECORD       */
  ,     /* QWHS0189 EQU x'000000BD' 10  Activate 5FAC diagnostic log */
  ,     /* QWHS0190 EQU x'000000BE' 22  HYBRID JOIN OVERFLOWS        */
  ,     /* QWHS0191 EQU x'000000BF' 29  DDM LEVEL 6B OBJECTS         */
  ,     /* QWHS0192 EQU x'000000C0' 27  DDM LEVEL 6A HEADER ERRORS   */
  ,     /* QWHS0193 EQU x'000000C1' 28  UOW DISPOSITION/SQLCODE MISM */
  ,     /* QWHS0194 EQU x'000000C2' 27  INVALID SNA FMH-5 RECEIVED   */
  ,     /* QWHS0195 EQU x'000000C3' 25  SQLDA DISCREPANCY            */
  ,     /* QWHS0196 EQU x'000000C4' 20  TIMEOUT DATA                 */
  ,     /* QWHS0197 EQU x'000000C5' 24  DB2 ERROR MESSAGES           */
  ,     /* QWHS0198 EQU x'000000C6' 10  BUFFER MGR GETPAGE/SETWRITE  */
  ,     /* QWHS0199 EQU x'000000C7' 10  BUFFER MGR DATASET LSTATS TR */
  ,     /* QWHS0200 EQU x'000000C8' 26  Accounting - nesting         */
  ,     /* QWHS0201 EQU x'000000C9' 10  ALTER BUFFER POOL COMMAND    */
  ,     /* QWHS0202 EQU x'000000CA' 26  DYNAMIC ZPARM INFORMATION    */
  ,     /* QWHS0203 EQU x'000000CB' 28  Heuristic Decision           */
  ,     /* QWHS0204 EQU x'000000CC' 28  Partner COLD START detected  */
  ,     /* QWHS0205 EQU x'000000CD' 28  Incorrect LOGNAME or Syncpoi */
  ,     /* QWHS0206 EQU x'000000CE' 28  SNA Compare States protocol  */
  ,     /* QWHS0207 EQU x'000000CF' 28  Heuristic damage detected du */
  ,     /* QWHS0208 EQU x'000000D0' 28  SNA Synchpoint protocol erro */
  ,     /* QWHS0209 EQU x'000000D1' 28  Synchpoint communication fai */
  ,     /* QWHS0210 EQU x'000000D2' 28  LOGNAME changed on WARM STAR */
  ,     /* QWHS0211 EQU x'000000D3' 10  Make/Release/Change Claim re */
  ,     /* QWHS0212 EQU x'000000D4' 10  Drain/Release Claim request  */
  ,     /* QWHS0213 EQU x'000000D5' 20  Begin wait for a drain lock  */
  ,     /* QWHS0214 EQU x'000000D6' 20  End wait for a drain lock    */
  ,     /* QWHS0215 EQU x'000000D7' 20  Begin wait for claim count t */
  ,     /* QWHS0216 EQU x'000000D8' 20  End wait for claim count to  */
  ,     /* QWHS0217 EQU x'000000D9' 06  Storage Pool Detail          */
  ,     /* QWHS0218 EQU x'000000DA' 14  Commit_LSN summary record    */
  ,     /* QWHS0219 EQU x'000000DB' 21  Utility LISTDEF record       */
  ,     /* QWHS0220 EQU x'000000DC' 21  Utility dataset close record */
  ,     /* QWHS0221 EQU x'000000DD' 22  Degree of parallelism of a p */
  ,     /* QWHS0222 EQU x'000000DE' 22  Number of rows processed by  */
  ,     /* QWHS0223 EQU x'000000DF' 14  Commit_LSN detail record     */
  ,     /* QWHS0224 EQU x'00000000' 14  Data Manager Select Procedur */
  ,     /* QWHS0225 EQU x'00000000' 06  Storage Pool Summary         */
  ,     /* QWHS0226 EQU x'00000000' 10  Begin Wait due to page latch */
  ,     /* QWHS0227 EQU x'00000000' 10  End Wait due to page latch   */
  ,     /* QWHS0228 EQU x'00000000' 04  Start archive tape unit      */
  ,     /* QWHS0229 EQU x'00000000' 04  End archive deallocation wai */
  ,     /* QWHS0230 EQU x'00000000' 26  Data sharing global statisti */
  ,     /* QWHS0231 EQU x'00000000' 22  PARALLEL TASKS DETAIL RECORD */
  ,     /* QWHS0232 EQU x'00000000' 26  ACCOUNTING CLASS 2 IFCID     */
  ,     /* QWHS0233 EQU x'00000000' 28  START/END CALL TO USER ROUTI */
  ,     /* QWHS0234 EQU x'000000EA' 26  READS AUTHIDS                */
  ,     /* QWHS0235 EQU x'000000EB' 28  Conditional restart data los */
  ,     /* QWHS0236 EQU x'000000EC' 27  XLN Protocol error           */
  ,     /* QWHS0237 EQU x'000000ED' 22  SET CURRENT DEGREE           */
  ,     /* QWHS0238 EQU x'000000EE' 30  Error detected during DB2 re */
  ,     /* QWHS0239 EQU x'000000EF' 26  Package/DBRM acctounting ove */
  ,     /* QWHS0240 EQU x'000000F0' 26  Accounting class 7 IFCID     */
  ,     /* QWHS0241 EQU x'000000F1' 26  Accounting class 8 IFCID     */
  ,     /* QWHS0242 EQU x'000000F2' 28  BEGIN WAIT FOR A STORED PROC */
  ,     /* QWHS0243 EQU x'000000F3' 28  END WAIT FOR A STORED PROCED */
  ,     /* QWHS0244 EQU x'000000F4' 22  Stored Procedure Parameter L */
  ,     /* QWHS0245 EQU x'000000F5' 22  Stored Procedure Paramater L */
  ,     /* QWHS0246 EQU x'000000F6' 22  Stored Procedure Cache Table */
  ,     /* QWHS0247 EQU x'000000F7' 22  Input host variable tracing  */
  ,     /* QWHS0248 EQU x'000000F8' 22  Output host variable tracing */
  ,     /* QWHS0249 EQU x'000000F9' 14  EDM POOL INVALIDATE DBD      */
  ,     /* QWHS0250 EQU x'000000FA' 10  Connect/Disconnect of a grou */
  ,     /* QWHS0251 EQU x'000000FB' 10  Pageset/partition P-lock req */
  ,     /* QWHS0252 EQU x'000000FC' 10  BEGINNING OF XES REQUEST     */
  ,     /* QWHS0253 EQU x'000000FD' RESERVED                         */
  ,     /* QWHS0254 EQU x'000000FE' 10  BACKING CACHE STRUCTURE STAT */
  ,     /* QWHS0255 EQU x'000000FF' 10  Buffer refresh due to        */
  ,     /* QWHS0256 EQU x'00000100' 10  ALTER GROUPBUFFERPOOL comman */
  ,     /* QWHS0257 EQU x'00000101' 20  IRLM Notify request detail   */
  ,     /* QWHS0258 EQU x'00000102' 18  Monitoring extend and space  */
  ,     /* QWHS0259 EQU x'00000103' 10  Page P-lock request or page  */
  ,     /* QWHS0260 EQU x'00000104' 10  END OF XES REQUEST           */
  ,     /* QWHS0261 EQU x'00000105' 10  GBP CHECKPOINT               */
  ,     /* QWHS0262 EQU x'00000106' 10  GBPOOLT CASTOUT THRESHOLD    */
  ,     /* QWHS0263 EQU x'00000107' 10  PAGESET AND PARTITION CASTOU */
  ,     /* QWHS0264 EQU x'00000108' RESERVED                         */
  ,     /* QWHS0265 EQU x'00000109' 31  SCA ACCESS REQUEST BEGIN     */
  ,     /* QWHS0266 EQU x'0000010A' 31  SCA ACCESS REQUEST END       */
  ,     /* QWHS0267 EQU x'0000010B' 20  CF REBUILD START EVENT       */
  ,     /* QWHS0268 EQU x'0000010C' 20  CF REBUILD END EVENT         */
  ,     /* QWHS0269 EQU x'0000010D' 22  TRUSTED CONTEXT - Connection */
  ,     /* QWHS0270 EQU x'0000010E' 22  TRUSTED CONTEXT - DDL info   */
  ,     /* QWHS0271 EQU x'0000010F' 22  SQLDA BEFORE CALL TO STORED  */
  ,     /* QWHS0272 EQU x'00000110' 22  ASSOCIATE LOCATORS statement */
  ,     /* QWHS0273 EQU x'00000111' 22  ALLOCATE CURSOR statement in */
  ,     /* QWHS0274 EQU x'00000112' 22  INPUT SQLDA/host variable ct */
  ,     /* QWHS0275 EQU x'00000113' 22  OUTPUT SQLDA/host variable c */
  ,     /* QWHS0276 EQU x'00000114' 22  INPUT SQLDA/transition varia */
  ,     /* QWHS0277 EQU x'00000115' 22  Routine Get Storage          */
  ,     /* QWHS0278 EQU x'00000116' 22  Routine Free Storage         */
  ,     /* QWHS0279 EQU x'00000117' 22  ASSIGNED                     */
  ,     /* QWHS0280 EQU x'00000118' 28  ERROR SIMULATION             */
  ,     /* QWHS0281 EQU x'00000119' 28  ERROR SIMULATION             */
  ,     /* QWHS0282 EQU x'0000011A' 28  ERROR SIMULATION             */
  ,     /* QWHS0283 EQU x'0000011B' 28  ERROR SIMULATION             */
  ,     /* QWHS0284 EQU x'0000011C' 28  ERROR SIMULATION             */
  ,     /* QWHS0285 EQU x'0000011D' 28  ERROR SIMULATION             */
  ,     /* QWHS0286 EQU x'0000011E' 28  ERROR SIMULATION             */
  ,     /* QWHS0287 EQU x'0000011F' 28  ERROR SIMULATION             */
  ,     /* QWHS0288 EQU x'00000120' 28  ERROR SIMULATION             */
  ,     /* QWHS0289 EQU x'00000121' 28  ERROR SIMULATION             */
  ,     /* QWHS0290 EQU x'00000122' 28  ERROR SIMULATION             */
  ,     /* QWHS0291 EQU x'00000123' 28  ERROR SIMULATION             */
  ,     /* QWHS0292 EQU x'00000124' 28  ERROR SIMULATION             */
  ,     /* QWHS0293 EQU x'00000125' 28  ERROR SIMULATION             */
  ,     /* QWHS0294 EQU x'00000126' 28  ERROR SIMULATION             */
  ,     /* QWHS0295 EQU x'00000127' 28  ERROR SIMULATION             */
  ,     /* QWHS0296 EQU x'00000128' 28  ERROR SIMULATION             */
  ,     /* QWHS0297 EQU x'00000129' 28  ERROR SIMULATION             */
  ,     /* QWHS0298 EQU x'0000012A' 28  ERROR SIMULATION             */
  ,     /* QWHS0299 EQU x'0000012B' 28  DRDA EXCEPTION               */
  ,     /* QWHS0300 EQU x'0000012C' 28  ERROR SIMULATION             */
  ,     /* QWHS0301 EQU x'0000012D' 03  ERROR SIMULATION             */
  ,     /* QWHS0302 EQU x'0000012E' 03  ERROR SIMULATION             */
  ,     /* QWHS0303 EQU x'0000012F' 03  ERROR SIMULATION             */
  ,     /* QWHS0304 EQU x'00000130' 28  ERROR SIMULATION             */
  ,     /* QWHS0305 EQU x'00000131' 14  CHECK CONSTRAINT             */
  ,     /* QWHS0306 EQU x'00000132' 14  LOG RECORDS via IFI READS    */
  ,     /* QWHS0307 EQU x'00000133' 03  ERROR SIMULATION             */
  ,     /* QWHS0308 EQU x'00000134' 03  ERROR SIMULATION             */
  ,     /* QWHS0309 EQU x'00000135' 03  ERROR SIMULATION             */
  ,     /* QWHS0310 EQU x'00000136' 03  ERROR SIMULATION             */
  ,     /* QWHS0311 EQU x'00000137' 14  GLOBAL TEMPORARY TABLES      */
  ,     /* QWHS0312 EQU x'00000138' 28  DCE AUTHORIZATION (obsolete) */
  ,     /* QWHS0313 EQU x'00000139' 03  LONG RUNNING UR S AT CHKPT   */
  ,     /* QWHS0314 EQU x'0000013A' 22  ACCESS CONTROL AUTH EXIT PAR */
  ,     /* QWHS0315 EQU x'0000013B' 22  ASSIGNED                     */
  ,     /* QWHS0316 EQU x'0000013C' 22  PREPARED STATEMENT CACHE STA */
  ,     /* QWHS0317 EQU x'0000013D' 22  PREPARED STATEMENT CACHE STA */
  ,     /* QWHS0318 EQU x'0000013E' 22  PREPARED STATEMENT CACHE SWI */
  ,     /* QWHS0319 EQU x'0000013F' 28  Non RACF identity mapping    */
  ,     /* QWHS0320 EQU x'00000140' 04  DEBUG MESSAGES               */
  ,     /* QWHS0321 EQU x'00000141' 10  Begin force-at-commit        */
  ,     /* QWHS0322 EQU x'00000142' 10  End force-at-commit          */
  ,     /* QWHS0323 EQU x'00000143' 22  PREDICTIVE GOVERNOR SERVICEA */
  ,     /* QWHS0324 EQU x'00000144' 22  FUNCTION RESOLUTION TRACE    */
  ,     /* QWHS0325 EQU x'00000145' 22  TRIGGER BEGIN/END            */
  ,     /* QWHS0326 EQU x'00000146' 02  EU Switch Dump Trigger-inter */
  ,     /* QWHS0327 EQU x'00000147' 22  LE RUNTIME DIAGNOSIS         */
  ,     /* QWHS0328 EQU x'00000148' 22  BUILT IN FUNCTION SERVICE TR */
  ,     /* QWHS0329 EQU x'00000149' 10  Asynch IXLCACHE/IXLFCOMP req */
  ,     /* QWHS0330 EQU x'0000014A' 04  ACTIVE LOG SHORTAGE SITUATIO */
  ,     /* QWHS0331 EQU x'0000014B' 17  Locator service              */
  ,     /* QWHS0332 EQU x'0000014C' 17  TransCSO service             */
  ,     /* QWHS0333 EQU x'0000014D' 17  Traverse CSO                 */
  ,     /* QWHS0334 EQU x'0000014E' 25  DRDA Exceptions for scrollab */
  ,     /* QWHS0335 EQU x'0000014F' 04  System Event Stalled Notific */
  ,     /* QWHS0336 EQU x'00000150' 22  OUTPUT CCSID cntl block      */
  ,     /* QWHS0337 EQU x'00000151' 14  Lock Escalation Occurences   */
  ,     /* QWHS0338 EQU x'00000152' 22  STORAGE ANALYSIS             */
  ,     /* QWHS0339 EQU x'00000153' 26  Package detail switch        */
  ,     /* QWHS0340 EQU x'00000154' 22  SQLCODE trace                */
  ,     /* QWHS0341 EQU x'00000155' 22  Incremental bind for special */
  ,     /* QWHS0342 EQU x'00000156' 14  WF/TD usage per Agent        */
  ,     /* QWHS0343 EQU x'00000157' 14  Max temp space per agent exc */
  ,     /* QWHS0344 EQU x'00000158' 22  SP/UDF function entry/exit p */
  ,     /* QWHS0345 EQU x'00000159' 22  SP/UDF function data point   */
  ,     /* QWHS0346 EQU x'0000015A' 26  Active Package Detail.       */
  ,     /* QWHS0347 EQU x'0000015B' 16  Serviceability IFI trace     */
  ,     /* QWHS0348 EQU x'0000015C' 16  Serviceability IFI trace     */
  ,     /* QWHS0349 EQU x'0000015D' 16  Serviceability IFI trace     */
  ,     /* QWHS0350 EQU x'0000015E' 22  ENTIRE SQL STATEMENT TEXT    */
  ,     /* QWHS0351 EQU x'0000015F' 27  Begin TCP/IP LOB materializa */
  ,     /* QWHS0352 EQU x'00000160' 27  End TCP/IP LOB materializati */
  ,     /* QWHS0353 EQU x'00000161' 22  AuthLE entry/exit trace      */
  ,     /* QWHS0354 EQU x'00000162' 22  AuthLE token get/free        */
  ,     /* QWHS0355 EQU x'00000163' 22  SQL PL Flow                  */
  ,     /* QWHS0356 EQU x'00000164' 22  SQL PL Variables             */
  ,     /* QWHS0357 EQU x'00000165'                                  */
  ,     /* QWHS0358 EQU x'00000166'                                  */
  ,     /* QWHS0359 EQU x'00000167'                                  */
  ,     /* QWHS0360 EQU x'00000168'                                  */
  ,     /* QWHS0361 EQU x'00000169'                                  */
  ,     /* QWHS0362 EQU x'0000016A'                                  */
  ,     /* QWHS0363 EQU x'0000016B'                                  */
  ,     /* QWHS0364 EQU x'0000016C'                                  */
  ,     /* QWHS0365 EQU x'0000016D'                                  */
  ,     /* QWHS0366 EQU x'0000016E'                                  */
  ,     /* QWHS0367 EQU x'0000016F' 32  XML Storage Manager          */
  ,     /* QWHS0368 EQU x'00000170'                                  */
  ,     /* QWHS0369 EQU x'00000171'                                  */
  ,     /* QWHS0370 EQU x'00000172' 10 DATA SET OPEN                 */
  ,     /* QWHS0371 EQU x'00000173' 10 DATA SET CLOSE                */
  ,     /* QWHS0372 EQU x'00000174'                                  */
  ,     /* QWHS0373 EQU x'00000175'                                  */
  ,     /* QWHS0374 EQU x'00000176'                                  */
  ,     /* QWHS0375 EQU x'00000177'                                  */
  ,     /* QWHS0376 EQU x'00000178'                                  */
  ,     /* QWHS0377 EQU x'00000179'                                  */
  ,     /* QWHS0378 EQU x'0000017A'                                  */
  ,     /* QWHS0379 EQU x'0000017B'                                  */
  ,     /* QWHS0380 EQU x'0000017C'                                  */
  ,     /* QWHS0381 EQU x'0000017D'                                  */
  ,     /* QWHS0382 EQU x'0000017E'                                  */
  ,     /* QWHS0383 EQU x'0000017F'                                  */
  ,     /* QWHS0384 EQU x'00000180'                                  */
  ,     /* QWHS0385 EQU x'00000181'                                  */
  ,     /* QWHS0386 EQU x'00000182'                                  */
  ,     /* QWHS0387 EQU x'00000183'                                  */
  ,     /* QWHS0388 EQU x'00000184'                                  */
  ,     /* QWHS0389 EQU x'00000185'                                  */
  ,     /* QWHS0390 EQU x'00000186'                                  */
  ,     /* QWHS0391 EQU x'00000187'                                  */
  ,     /* QWHS0392 EQU x'00000188'                                  */
  ,     /* QWHS0393 EQU x'00000189'                                  */
  ,     /* QWHS0394 EQU x'0000018A'                                  */
  ,     /* QWHS0395 EQU x'0000018B'                                  */
  ,     /* QWHS0396 EQU x'0000018C'                                  */
  ,     /* QWHS0397 EQU x'0000018D'                                  */
  ,     /* QWHS0398 EQU x'0000018E'                                  */
  ,     /* QWHS0399 EQU x'0000018F'                                  */
  ,     /* QWHS0400 EQU x'00000190'                                  */
  ,     /* QWHS0401 EQU x'00000191'                                  */
  ,     /* QWHS0402 EQU x'00000192'                                  */
  ,     /* QWHS0403 EQU x'00000193'                                  */
  ,     /* QWHS0404 EQU x'00000194'                                  */
  ,     /* QWHS0405 EQU x'00000195'                                  */
  ,     /* QWHS0406 EQU x'00000196'                                  */
  ,     /* QWHS0407 EQU x'00000197'                                  */
  ,     /* QWHS0408 EQU x'00000198'                                  */
  ,     /* QWHS0409 EQU x'00000199'                                  */
  ,     /* QWHS0410 EQU x'0000019A'                                  */
  ,     /* QWHS0411 EQU x'0000019B'                                  */
  ,     /* QWHS0412 EQU x'0000019C'                                  */
  ,     /* QWHS0413 EQU x'0000019D'                                  */
  ,     /* QWHS0414 EQU x'0000019E'                                  */
  ,     /* QWHS0415 EQU x'0000019F'                                  */
  ,     /* QWHS0416 EQU x'000001A0'                                  */
  ,     /* QWHS0417 EQU x'000001A1'                                  */
  ,     /* QWHS0418 EQU x'000001A2'                                  */
  ,     /* QWHS0419 EQU x'000001A3'                                  */
  ,     /* QWHS0420 EQU x'000001A4'                                  */
  ,     /* QWHS0421 EQU x'000001A5'                                  */
  ,     /* QWHS0422 EQU x'000001A6'                                  */
  ,     /* QWHS0423 EQU x'000001A7'                                  */
  ,     /* QWHS0424 EQU x'000001A8'                                  */
  ,     /* QWHS0425 EQU x'000001A9'                                  */
  ,     /* QWHS0426 EQU x'000001AA'                                  */
  ,     /* QWHS0427 EQU x'000001AB'                                  */
  ,     /* QWHS0428 EQU x'000001AC'                                  */
  ,     /* QWHS0429 EQU x'000001AD'                                  */
  ,     /* QWHS0430 EQU x'000001AE'                                  */
  ,     /* QWHS0431 EQU x'000001AF'                                  */
  ,     /* QWHS0432 EQU x'000001B0'                                  */
  ,     /* QWHS0433 EQU x'000001B1'                                  */
  ,     /* QWHS0434 EQU x'000001B2'                                  */
  ,     /* QWHS0435 EQU x'000001B3'                                  */
  ,     /* QWHS0436 EQU x'000001B4'                                  */
  ,     /* QWHS0437 EQU x'000001B5'                                  */
  ,     /* QWHS0438 EQU x'000001B6'                                  */
  ,     /* QWHS0439 EQU x'000001B7'                                  */
  ,     /* QWHS0440 EQU x'000001B8'                                  */
  ,     /* QWHS0441 EQU x'000001B9'                                  */
  ,     /* QWHS0442 EQU x'000001BA'                                  */
  ,     /* QWHS0443 EQU x'000001BB'                                  */
  ,     /* QWHS0444 EQU x'000001BC'                                  */
  ,     /* QWHS0445 EQU x'000001BD'                                  */
  ,     /* QWHS0446 EQU x'000001BE'                                  */
  ,     /* QWHS0447 EQU x'000001BF'                                  */
  ,     /* QWHS0448 EQU x'000001C0'                                  */
  ,     /* QWHS0449 EQU x'000001C1'                                  */
  ,     /* QWHS0450 EQU x'000001C2'                                  */
  ,     /* QWHS0451 EQU x'000001C3'                                  */
  ,     /* QWHS0452 EQU x'000001C4'                                  */
  ,     /* QWHS0453 EQU x'000001C5'                                  */
  ,     /* QWHS0454 EQU x'000001C6'                                  */
  ,     /* QWHS0455 EQU x'000001C7'                                  */
  ,     /* QWHS0456 EQU x'000001C8'                                  */
  ,     /* QWHS0457 EQU x'000001C9'                                  */
  ,     /* QWHS0458 EQU x'000001CA'                                  */
  ,     /* QWHS0459 EQU x'000001CB'                                  */
  ,     /* QWHS0460 EQU x'000001CC'                                  */
  ,     /* QWHS0461 EQU x'000001CD'                                  */
  ,     /* QWHS0462 EQU x'000001CE'                                  */
  ,     /* QWHS0463 EQU x'000001CF'                                  */
  ,     /* QWHS0464 EQU x'000001D0'                                  */
  ,     /* QWHS0465 EQU x'000001D1'                                  */
  ,     /* QWHS0466 EQU x'000001D2'                                  */
  ,     /* QWHS0467 EQU x'000001D3'                                  */
  ,     /* QWHS0468 EQU x'000001D4'                                  */
  ,     /* QWHS0469 EQU x'000001D5'                                  */
  ,     /* QWHS0470 EQU x'000001D6'                                  */
  ,     /* QWHS0471 EQU x'000001D7'                                  */
  ,     /* QWHS0472 EQU x'000001D8'                                  */
  ,     /* QWHS0473 EQU x'000001D9'                                  */
  ,     /* QWHS0474 EQU x'000001DA'                                  */
  ,     /* QWHS0475 EQU x'000001DB'                                  */
  ,     /* QWHS0476 EQU x'000001DC'                                  */
  ,     /* QWHS0477 EQU x'000001DD'                                  */
  ,     /* QWHS0478 EQU x'000001DE'                                  */
  ,     /* QWHS0479 EQU x'000001DF'                                  */
  ,     /* QWHS0480 EQU x'000001E0'                                  */
  ,     /* QWHS0481 EQU x'000001E1'                                  */
  ,     /* QWHS0482 EQU x'000001E2'                                  */
  ,     /* QWHS0483 EQU x'000001E3'                                  */
  ,     /* QWHS0484 EQU x'000001E4'                                  */
  ,     /* QWHS0485 EQU x'000001E5'                                  */
  ,     /* QWHS0486 EQU x'000001E6'                                  */
  ,     /* QWHS0487 EQU x'000001E7'                                  */
  ,     /* QWHS0488 EQU x'000001E8'                                  */
  ,     /* QWHS0489 EQU x'000001E9'                                  */
  ,     /* QWHS0490 EQU x'000001EA'                                  */
  ,     /* QWHS0491 EQU x'000001EB'                                  */
  ,     /* QWHS0492 EQU x'000001EC'                                  */
  ,     /* QWHS0493 EQU x'000001ED'                                  */
  ,     /* QWHS0494 EQU x'000001EE'                                  */
  ,     /* QWHS0495 EQU x'000001EF'                                  */
  ,     /* QWHS0496 EQU x'000001F0'                                  */
  ,     /* QWHS0497 EQU x'000001F1'                                  */
  ,     /* QWHS0498 EQU x'000001F2'                                  */
  ,     /* QWHS0499 EQU x'000001F3'                                  */
  ,     /* QWHS0500 EQU x'000001F4'                                  */
  ,     /* QWHS0501 EQU x'000001F5'                                  */
  ,     /* QWHS0502 EQU x'000001F6'                                  */
  ,     /* QWHS0503 EQU x'000001F7'                                  */
  ,     /* QWHS0504 EQU x'000001F8'                                  */
  ,     /* QWHS0505 EQU x'000001F9'                                  */
  ,     /* QWHS0506 EQU x'000001FA'                                  */
  ,     /* QWHS0507 EQU x'000001FB'                                  */
  ,     /* QWHS0508 EQU x'000001FC'                                  */
  ,     /* QWHS0509 EQU x'000001FD'                                  */
  ,     /* QWHS0510 EQU x'000001FE'                                  */
  ,     /* QWHS0511 EQU x'000001FF'                                  */
    .           /* End of DSECT */
  /* next byte at 3 */
  dec_QWHSLEN = c2d(QWHSLEN)
  hex_QWHSTYP = c2x(QWHSTYP)
  dec_QWHSRMID = c2d(QWHSRMID)
  dec_QWHSIID = c2d(QWHSIID)
  dec_QWHSNSDA = c2d(QWHSNSDA)
  hex_QWHSRN = c2x(QWHSRN)
  hex_QWHSACE = c2x(QWHSACE)
  hex_QWHSSSID = c2x(QWHSSSID)
  stck_QWHSSTCK =  store_clock(c2x(QWHSSTCK))
  dec_QWHSISEQ = c2d(QWHSISEQ)
  dec_QWHSWSEQ = c2d(QWHSWSEQ)
  hex_QWHSMTN = c2x(QWHSMTN)
  hex_QWHSLOCN = c2x(QWHSLOCN)
  hex_QWHSNID = c2x(QWHSNID)
  hex_QWHSLUNM = c2x(QWHSLUNM)
  hex_QWHSLUUV = c2x(QWHSLUUV)
  hex_QWHSLUCC = c2x(QWHSLUCC)
  hex_QWHSFLAG = c2x(QWHSFLAG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWHSLOCN_Off = c2x(QWHSLOCN_Off)
  hex_QWHSSUBV = c2x(QWHSSUBV)
  hex_QWHSLOCN_Len = c2x(QWHSLOCN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWHS",desired_dsect) > 0)) then do
    void_rc = queue_QWHS_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWHS:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWHS_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWHS:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE STANDARD HEADER :" dec_QWHSLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HEADER TYPE                  x:" hex_QWHSTYP
  select
    when (hex_QWHSTYP = "01") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 01 STANDARD HEADER"
    end
    when (hex_QWHSTYP = "02") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 02 CORRELATION HEADER"
    end
    when (hex_QWHSTYP = "04") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 04 TRACE HEADER"
    end
    when (hex_QWHSTYP = "08") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 08 CPU HEADER"
    end
    when (hex_QWHSTYP = "10") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 10 DISTRIBUTED HEADER"
    end
    when (hex_QWHSTYP = "20") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 20 DATA SHARING HEADER"
    end
    otherwise do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : ?? ***** ERROR *****"
    end
  end
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      RESOURCE MANAGER ID           :" dec_QWHSRMID
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      IFCID                         :" dec_QWHSIID
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      NUMBER OF SELF DEFINING AREAS :" dec_QWHSNSDA
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      RELEASE INDICATOR NUMBER     x:" hex_QWHSRN
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      ACE ADDRESS - DISPATCH UNIT  x:" hex_QWHSACE
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      SUBSYSTEM NAME                :" QWHSSSID
  select
    when (hex_QWHSSSID = "00") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 00 NORMAL TRACE RECORD"
    end
    when (hex_QWHSSSID = "01") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 01 SYSTEM STATISTICS"
    end
    when (hex_QWHSSSID = "02") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 02 DATA BASE STATISTIC"
    end
    when (hex_QWHSSSID = "03") then do
      debug_ctr = debug_ctr + 1
      debug_record.debug_ctr = ,
        "                                    : 03 ACCOUNTING"
    end
    otherwise do
    end
  end
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      STORE CLOCK VALUE OF HEADER - :"  stck_QWHSSTCK
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      SEQUENCE NUMBER FOR IFCID     :" dec_QWHSISEQ
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      SEQUENCE NUMBER FOR DEST      :" dec_QWHSWSEQ
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      ACTIVE TRACE NUMBER MASK     x:" hex_QWHSMTN
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      %U LOCAL LOCATION NAME        :" QWHSLOCN
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      NETWORK ID                    :" QWHSNID
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      LUNAME                        :" QWHSLUNM
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      UNIQUENESS VALUE             x:" hex_QWHSLUUV
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      COMMIT COUNT                 x:" hex_QWHSLUCC
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      Flags                        x:" hex_QWHSFLAG
  if (BitAnd('80'x,QWHSFLAG) = '80'x) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      "                                    : 80 UNICODE in U% fields"
  end
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      Offset from QWHS to          x:" hex_QWHSLOCN_Off
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = ,
    "      THE SUBVERSION FOR THE BASE  x:" hex_QWHSSUBV
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWHA length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWHA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWHA,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWHA Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWHA ,
    =00001 QWHALEN +2 , /* X - LENGTH OF  HEADER               00000 */
    =00003 QWHATYP +1 , /* X - TYPE OF HEADER - DATA SHARING   00002 */
    =00004 RSVD0001 +1 , /* X - RESERVED                       00003 */
    =00005 QWHAMEMN +8 , /* C - DB2 MEMBER NAME                00004 */
    =00013 QWHADSGN +8 , /* C - DB2 DATA SHARING GROUP NAME    0000C */
,/* =00021 QWHAEND +0 ,    C -                                 00014 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QWHALEN = c2x(QWHALEN)
  hex_QWHATYP = c2x(QWHATYP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWHAMEMN = c2x(QWHAMEMN)
  hex_QWHADSGN = c2x(QWHADSGN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWHA",desired_dsect) > 0)) then do
    void_rc = queue_QWHA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWHA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWHA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWHA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF  HEADER            x:" hex_QWHALEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF HEADER - DATA SHARIN x:" hex_QWHATYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 MEMBER NAME              x:" hex_QWHAMEMN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 DATA SHARING GROUP NAME  x:" hex_QWHADSGN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWHU length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWHU:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWHU,14)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWHU Length: 14"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWHU ,
    =00001 QWHULEN +2 , /* X - LENGTH OF  HEADER               00000 */
    =00003 QWHUTYP +1 , /* X - TYPE OF HEADER - CPU MAPPED QWH 00002 */
    =00004 RSVD0001 +1 , /* X - RESERVED                       00003 */
    =00005 QWHUCPU +8 , /* X - CPU time of the currently dispa 00004 */
    =00013 QWHUCNT +2 , /* X - (S) COUNT FIELD RESERVED        0000C */
,/* =00015 QWHUEND +0 ,    C -                                 0000E */
    .           /* End of DSECT */
  /* next byte at 15 */
  hex_QWHULEN = c2x(QWHULEN)
  hex_QWHUTYP = c2x(QWHUTYP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWHUCPU = c2x(QWHUCPU)
  hex_QWHUCNT = c2x(QWHUCNT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWHU",desired_dsect) > 0)) then do
    void_rc = queue_QWHU_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWHU:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWHU_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWHU:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF  HEADER            x:" hex_QWHULEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF HEADER - CPU MAPPED  x:" hex_QWHUTYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU time of the currently di x:" hex_QWHUCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) COUNT FIELD RESERVED     x:" hex_QWHUCNT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWHD length is 00038
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWHD:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWHD,56)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWHD Length: 56"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWHD ,
    =00001 QWHDLEN +2 , /* X - LENGTH OF THE DISTRIBUTED HEADE 00000 */
    =00003 QWHDTYP +1 , /* X - TYPE OF HEADER - DISTRIBUTED  = 00002 */
    =00004 RSVD0001 +1 , /* X - RESERVED                       00003 */
    =00005 QWHDRQNM +16 , /* C - %U REQUESTER LOCATION NAME -  00004 */
    =00021 QWHDTSTP +8 , /* X - TIMESTAMP FOR DBAT TRACE RECOR 00014 */
    =00029 QWHDSVNM +16 , /* C - %U SRVNAM PARAMETER OF DRDA E 0001C */
    =00045 QWHDPRID +8 , /* C - PRDID PARAMETER OF DRDA ACCRDB 0002C */
    =00053 QWHDRQNM_Off +2 , /* H - Offset from QWHD to        00034 */
    =00055 QWHDSVNM_Off +2 , /* H - Offset from QWHD           00036 */
,/* =00057 QWHDEND +0 ,    F -                                 00038 */
    =00001 QWHDRQNM_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHDRQNM_Var +0 ,    C - %U REQUESTER LOCATION NAME 00002 */
    =00001 QWHDSVNM_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHDSVNM_Var +0 ,    C - %U SRVNAM PARAMETER OF DRD 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QWHDLEN = c2x(QWHDLEN)
  hex_QWHDTYP = c2x(QWHDTYP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWHDRQNM = c2x(QWHDRQNM)
  hex_QWHDTSTP = c2x(QWHDTSTP)
  hex_QWHDSVNM = c2x(QWHDSVNM)
  hex_QWHDPRID = c2x(QWHDPRID)
  hex_QWHDRQNM_Off = c2x(QWHDRQNM_Off)
  hex_QWHDSVNM_Off = c2x(QWHDSVNM_Off)
  hex_QWHDRQNM_Len = c2x(QWHDRQNM_Len)
  hex_QWHDSVNM_Len = c2x(QWHDSVNM_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWHD",desired_dsect) > 0)) then do
    void_rc = queue_QWHD_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWHD:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWHD_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWHD:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DISTRIBUTED HE x:" hex_QWHDLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF HEADER - DISTRIBUTED x:" hex_QWHDTYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U REQUESTER LOCATION NAME - x:" hex_QWHDRQNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP FOR DBAT TRACE REC x:" hex_QWHDTSTP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SRVNAM PARAMETER OF DRDA  x:" hex_QWHDSVNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRDID PARAMETER OF DRDA ACCR x:" hex_QWHDPRID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHD to          x:" hex_QWHDRQNM_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHD             x:" hex_QWHDSVNM_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHDRQNM_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHDSVNM_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWSA length is 0002C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWSA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWSA,44)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWSA Length: 44"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWSA ,
    =00001 QWSAPROC +4 , /* C - LAST FOUR CHARACTERS OF THE PR 00000 */
    =00005 QWSAEJST +8 , /* X - JOB STEP TIMER VALUE FOR ADDRE 00004 */
    =00013 QWSASRBT +8 , /* X - SRB TIMER VALUE FOR ADDRESS SP 0000C */
    =00021 QWSAASID +2 , /* H - ASID OF THE ADDRESS SPACE      00014 */
    =00023 RSVD0001 +2 , /* H - RESERVED                       00016 */
    =00025 QWSAASCB +4 , /* F - ASCB TOKEN                     00018 */
    =00029 QWSAPSRB +8 , /* X - PREEMPTABLE SRB TIMER VALUE FO 0001C */
    =00037 QWSAPSRB_zIIP +8 , /* X - PREEMPTABLE SRB TIMER VAL 00024 */
,/* =00045 QWSAEND +0 ,    C -                                 0002C */
    .           /* End of DSECT */
  /* next byte at 45 */
  hex_QWSAPROC = c2x(QWSAPROC)
  hex_QWSAEJST = c2x(QWSAEJST)
  dec_QWSAEJST = c2d(QWSAEJST)
  hex_QWSASRBT = c2x(QWSASRBT)
  dec_QWSASRBT = c2d(QWSASRBT)
  hex_QWSAASID = c2x(QWSAASID)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWSAASCB = c2x(QWSAASCB)
  hex_QWSAPSRB = c2x(QWSAPSRB)
  hex_QWSAPSRB_zIIP = c2x(QWSAPSRB_zIIP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWSA",desired_dsect) > 0)) then do
    void_rc = queue_QWSA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWSA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWSA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWSA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LAST FOUR CHARACTERS OF THE   :" QWSAPROC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      JOB STEP TIMER VALUE FOR ADD  :" dec_QWSAEJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SRB TIMER VALUE FOR ADDRESS   :" dec_QWSASRBT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASID OF THE ADDRESS SPACE    x:" hex_QWSAASID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASCB TOKEN                   x:" hex_QWSAASCB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PREEMPTABLE SRB TIMER VALUE  x:" hex_QWSAPSRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PREEMPTABLE SRB TIMER VALUE  x:" hex_QWSAPSRB_zIIP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWSB length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWSB:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWSB,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWSB Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWSB ,
    =00001 QWSBNM +4 , /* C - NAME OF THE EXTERNAL OR INTERNAL 00000 */
,/* =00005 QWSBSTAT +0 ,    F - STATISTIC COUNTERS             00004 */
    =00005 QWSBWSEQ +4 , /* F - +UNIQUE SEQUENCE NUMBER        00004 */
    =00009 QWSBSRSW +4 , /* F - +RECORDS    WRITTEN            00008 */
    =00013 QWSBSRNW +4 , /* F - +RECORDS NOT WRITTEN           0000C */
    =00017 QWSBSBUF +2 , /* H - -   BUFFER ERRORS              00010 */
    =00019 QWSBSACT +2 , /* H - -NOT ACTIVE ERRORS             00012 */
    =00021 QWSBSRNA +2 , /* H - -RECORD NOT ACCEPTED           00014 */
    =00023 QWSBSWF +2 , /* H - -WRITER FAILURES                00016 */
,/* =00025 QWSBOTH +0 ,    F - (S)                             00018 */
    =00025 QWSBOTH1 +1 , /* X - (S)                            00018 */
    =00026 QWSBOTH2 +1 , /* X - (S)                            00019 */
    =00027 QWSBOTH3 +1 , /* X - (S)                            0001A */
    =00028 QWSBOTH4 +1 , /* X - (S)                            0001B */
,/* =00029 QWSBEND +0 ,    C -                                 0001C */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QWSBNM = c2x(QWSBNM)
  dec_QWSBWSEQ = c2d(QWSBWSEQ)
  dec_QWSBSRSW = c2d(QWSBSRSW)
  dec_QWSBSRNW = c2d(QWSBSRNW)
  dec_QWSBSBUF = c2d(QWSBSBUF)
  dec_QWSBSACT = c2d(QWSBSACT)
  dec_QWSBSRNA = c2d(QWSBSRNA)
  dec_QWSBSWF = c2d(QWSBSWF)
  hex_QWSBOTH1 = c2x(QWSBOTH1)
  hex_QWSBOTH2 = c2x(QWSBOTH2)
  hex_QWSBOTH3 = c2x(QWSBOTH3)
  hex_QWSBOTH4 = c2x(QWSBOTH4)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWSB",desired_dsect) > 0)) then do
    void_rc = queue_QWSB_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWSB:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWSB_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWSB:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NAME OF THE EXTERNAL OR INTE  :" QWSBNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +UNIQUE SEQUENCE NUMBER       :" dec_QWSBWSEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +RECORDS    WRITTEN           :" dec_QWSBSRSW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +RECORDS NOT WRITTEN          :" dec_QWSBSRNW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -   BUFFER ERRORS             :" dec_QWSBSBUF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -NOT ACTIVE ERRORS            :" dec_QWSBSACT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -RECORD NOT ACCEPTED          :" dec_QWSBSRNA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -WRITER FAILURES              :" dec_QWSBSWF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWSBOTH1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWSBOTH2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWSBOTH3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWSBOTH4
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWSC length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWSC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWSC,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWSC Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWSC ,
    =00001 QWSCIID +2 , /* H - IFCID                           00000 */
    =00003 RSVD0001 +2 , /* H - RESERVED                       00002 */
,/* =00005 QWSCSTAT +0 ,    F - STATISTICS                     00004 */
    =00005 QWSCISEQ +4 , /* F - +IFCID SEQUENCE NUMBER         00004 */
    =00009 QWSCSRSW +4 , /* F - +RECORDS WRITTEN               00008 */
    =00013 QWSCSRNW +4 , /* F - +RECORDS NOT WRITTEN           0000C */
    =00017 QWSCSRND +2 , /* H - -RECORD NOT DESIRED            00010 */
    =00019 QWSCSBNA +2 , /* H - -BUFFER NOT AVAILABLE          00012 */
    =00021 QWSCSCF +2 , /* H - -COLLECTION FAILURE             00014 */
    =00023 QWSCOTH1 +1 , /* X - (S)                            00016 */
    =00024 QWSCOTH2 +1 , /* X - (S)                            00017 */
,/* =00025 QWSCEND +0 ,    C -                                 00018 */
    .           /* End of DSECT */
  /* next byte at 25 */
  dec_QWSCIID = c2d(QWSCIID)
  hex_RSVD0001 = c2x(RSVD0001)
  dec_QWSCISEQ = c2d(QWSCISEQ)
  dec_QWSCSRSW = c2d(QWSCSRSW)
  dec_QWSCSRNW = c2d(QWSCSRNW)
  dec_QWSCSRND = c2d(QWSCSRND)
  dec_QWSCSBNA = c2d(QWSCSBNA)
  dec_QWSCSCF = c2d(QWSCSCF)
  hex_QWSCOTH1 = c2x(QWSCOTH1)
  hex_QWSCOTH2 = c2x(QWSCOTH2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWSC",desired_dsect) > 0)) then do
    void_rc = queue_QWSC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWSC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWSC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWSC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IFCID                         :" dec_QWSCIID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +IFCID SEQUENCE NUMBER        :" dec_QWSCISEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +RECORDS WRITTEN              :" dec_QWSCSRSW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +RECORDS NOT WRITTEN          :" dec_QWSCSRNW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -RECORD NOT DESIRED           :" dec_QWSCSRND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -BUFFER NOT AVAILABLE         :" dec_QWSCSBNA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      -COLLECTION FAILURE           :" dec_QWSCSCF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWSCOTH1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWSCOTH2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: Q3ST length is 0004C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Q3ST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_Q3ST,76)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: Q3ST Length: 76"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_Q3ST ,
,/* =00001 Q3STDATA +0 ,    F - DATA PORTION OF Q3ST           00000 */
    =00001 Q3STIDEN +4 , /* F - SUCCESSFUL DSN3IDEN REQUESTS   00000 */
    =00005 Q3STSIGN +4 , /* F - SUCCESSFUL DSN3SIGN REQUESTS   00004 */
    =00009 Q3STCTHD +4 , /* F - SUCCESSFUL DSN3CTHD REQUESTS   00008 */
    =00013 Q3STTERM +4 , /* F - SUCCESSFUL DSN3TERM REQUESTS   0000C */
    =00017 Q3STRIUR +4 , /* F - SUCCESSFUL DSN3RIUR REQUESTS   00010 */
    =00021 Q3STPREP +4 , /* F - SUCCESSFUL DSN3PREP REQUESTS   00014 */
    =00025 Q3STCOMM +4 , /* F - SUCCESSFUL DSN3COMM REQUESTS   00018 */
    =00029 Q3STABRT +4 , /* F - SUCCESSFUL DSN3ABRT REQUESTS   0001C */
    =00033 Q3STSYNC +4 , /* F - SUCCESSFUL DSN3SYNC REQUESTS   00020 */
    =00037 Q3STEXIT +4 , /* F - SUCCESSFUL DSN3EXIT REQUESTS   00024 */
    =00041 Q3STINDT +4 , /* F - TOTAL NUMBER OF AGENTS HAVING  00028 */
    =00045 Q3STMEOT +4 , /* F - SSAM EOT S                     0002C */
    =00049 Q3STMEOM +4 , /* F - SSAM EOM S                     00030 */
    =00053 Q3STSSSI +4 , /* F - TOTAL NUMBER OF SSI CALLS      00034 */
    =00057 Q3STCTHW +4 , /* F - NUMBER OF DSN3CTHD WHICH WAITE 00038 */
    =00061 Q3STRDON +4 , /* F - NUMBER OF READ ONLY COMMITS    0003C */
    =00065 Q3STHWIB +4 , /* F - High water mark for IDBACK thr 00040 */
    =00069 Q3STHWIF +4 , /* F - High water mark for IDFORE thr 00044 */
    =00073 Q3STHWCT +4 , /* F - High water mark for CTHREAD th 00048 */
,/* =00077 RSVD0001 +0 ,    F -                                0004C */
  ,     /* Q3STDATL EQU x'0000004C' LENGTH OF DATA PORTION           */
    .           /* End of DSECT */
  /* next byte at 77 */
  dec_Q3STIDEN = c2d(Q3STIDEN)
  dec_Q3STSIGN = c2d(Q3STSIGN)
  dec_Q3STCTHD = c2d(Q3STCTHD)
  dec_Q3STTERM = c2d(Q3STTERM)
  dec_Q3STRIUR = c2d(Q3STRIUR)
  dec_Q3STPREP = c2d(Q3STPREP)
  dec_Q3STCOMM = c2d(Q3STCOMM)
  dec_Q3STABRT = c2d(Q3STABRT)
  dec_Q3STSYNC = c2d(Q3STSYNC)
  dec_Q3STEXIT = c2d(Q3STEXIT)
  dec_Q3STINDT = c2d(Q3STINDT)
  dec_Q3STMEOT = c2d(Q3STMEOT)
  dec_Q3STMEOM = c2d(Q3STMEOM)
  dec_Q3STSSSI = c2d(Q3STSSSI)
  dec_Q3STCTHW = c2d(Q3STCTHW)
  dec_Q3STRDON = c2d(Q3STRDON)
  dec_Q3STHWIB = c2d(Q3STHWIB)
  dec_Q3STHWIF = c2d(Q3STHWIF)
  dec_Q3STHWCT = c2d(Q3STHWCT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("Q3ST",desired_dsect) > 0)) then do
    void_rc = queue_Q3ST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " Q3ST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_Q3ST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    Q3ST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3IDEN REQUESTS  :" dec_Q3STIDEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3SIGN REQUESTS  :" dec_Q3STSIGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3CTHD REQUESTS  :" dec_Q3STCTHD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3TERM REQUESTS  :" dec_Q3STTERM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3RIUR REQUESTS  :" dec_Q3STRIUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3PREP REQUESTS  :" dec_Q3STPREP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3COMM REQUESTS  :" dec_Q3STCOMM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3ABRT REQUESTS  :" dec_Q3STABRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3SYNC REQUESTS  :" dec_Q3STSYNC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL DSN3EXIT REQUESTS  :" dec_Q3STEXIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF AGENTS HAVIN  :" dec_Q3STINDT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SSAM EOT S                    :" dec_Q3STMEOT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SSAM EOM S                    :" dec_Q3STMEOM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF SSI CALLS     :" dec_Q3STSSSI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DSN3CTHD WHICH WAI  :" dec_Q3STCTHW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF READ ONLY COMMITS   :" dec_Q3STRDON
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High water mark for IDBACK t  :" dec_Q3STHWIB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High water mark for IDFORE t  :" dec_Q3STHWIF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High water mark for CTHREAD   :" dec_Q3STHWCT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQ9ST length is 000C8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQ9ST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQ9ST,200)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQ9ST Length: 200"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQ9ST ,
,/* =00001 Q9ST +0 ,    C - GCPC STATISTICAL COUNTER BLOCK     00000 */
    =00001 Q9STCTR0 +4 , /* F - COUNTER, CMD=-DISPLAY DATABASE 00000 */
    =00005 Q9STCTR1 +4 , /* F - COUNTER, CMD=-DISPLAY THREAD   00004 */
    =00009 Q9STCTR2 +4 , /* F - COUNTER, CMD=-DISPLAY UTILITY  00008 */
    =00013 Q9STCTR3 +4 , /* F - COUNTER, CMD=-RECOVER BSDS     0000C */
    =00017 Q9STCTR4 +4 , /* F - COUNTER, CMD=-RECOVER INDOUBT  00010 */
    =00021 Q9STCTR5 +4 , /* F - COUNTER, CMD=-START DATABASE   00014 */
    =00025 Q9STCTR6 +4 , /* F - COUNTER, CMD=-START TRACE      00018 */
    =00029 Q9STCTR7 +4 , /* F - COUNTER, CMD=-START SUBSYSTEM  0001C */
    =00033 Q9STCTR8 +4 , /* F - COUNTER, CMD=-STOP DATABASE    00020 */
    =00037 Q9STCTR9 +4 , /* F - COUNTER, CMD=-STOP TRACE       00024 */
    =00041 Q9STCTRA +4 , /* F - COUNTER, CMD=-STOP SUBSYSTEM   00028 */
    =00045 Q9STCTRB +4 , /* F - COUNTER, CMD=-TERM UTILITY     0002C */
    =00049 Q9STCTRC +4 , /* F - COUNTER, CMD=-DIS TRACE        00030 */
    =00053 Q9STCTRD +4 , /* F - COUNTER, CMD=-RESET GENERICLU  00034 */
    =00057 Q9STEROR +4 , /* F - COUNTER, UNRECOGNIZED COMMAND  00038 */
    =00061 Q9STCTRE +4 , /* F - COUNTER, CMD=-START RLIMIT     0003C */
    =00065 Q9STCTRF +4 , /* F - COUNTER, CMD=-STOP RLIMIT      00040 */
    =00069 Q9STCTRG +4 , /* F - COUNTER, CMD=-DISPLAY RLIMIT   00044 */
    =00073 Q9STCTRH +4 , /* F - COUNTER, CMD=-MODIFY TRACE     00048 */
    =00077 Q9STCTRI +4 , /* F - COUNTER, CMD=-START DDF        0004C */
    =00081 Q9STCTRJ +4 , /* F - COUNTER, CMD=-STOP DDF         00050 */
    =00085 Q9STCTRK +4 , /* F - COUNTER, CMD=-CANCEL(DDF)THREA 00054 */
    =00089 Q9STCTRL +4 , /* F - COUNTER, CMD=-DISPLAY LOCATION 00058 */
    =00093 Q9STCTRM +4 , /* F - COUNTER, CMD=-ARCHIVE LOG      0005C */
    =00097 Q9STCTRN +4 , /* F - COUNTER, CMD=-ALTER BUFFERPOOL 00060 */
    =00101 Q9STCTRO +4 , /* F - COUNTER, CMD=-DISPLAY BUFFERPO 00064 */
    =00105 Q9STCTRP +4 , /* F - COUNTER, CMD=-SET ARCHIVE      00068 */
    =00109 Q9STCTRQ +4 , /* F - COUNTER, CMD=-DISPLAY ARCHIVE  0006C */
    =00113 Q9STCTRR +4 , /* F - COUNTER, CMD=-RESET INDOUBT    00070 */
    =00117 Q9STCTRS +4 , /* F - COUNTER, CMD=-ALTER GBPOOL     00074 */
    =00121 Q9STCTRT +4 , /* F - COUNTER, CMD=-DISPLAY GBPOOL   00078 */
    =00125 Q9STCTRU +4 , /* F - COUNTER, CMD=-DISPLAY PROCEDUR 0007C */
    =00129 Q9STCTRV +4 , /* F - COUNTER, CMD=-START PROCEDURE  00080 */
    =00133 Q9STCTRW +4 , /* F - COUNTER, CMD=-STOP PROCEDURE   00084 */
    =00137 Q9STCTRX +4 , /* F - COUNTER, CMD=-DIS GROUP        00088 */
    =00141 Q9STCTRY +4 , /* F - COUNTER, CMD=-ALTER UTILITY    0008C */
    =00145 Q9STCTRZ +4 , /* F - COUNTER, CMD=-DISPLAY FUNCTION 00090 */
    =00149 Q9STCTX0 +4 , /* F - COUNTER, CMD=-START FUNCTION   00094 */
    =00153 Q9STCTX1 +4 , /* F - COUNTER, CMD=-STOP FUNCTION    00098 */
    =00157 Q9STCTX2 +4 , /* F - COUNTER, CMD=-SET LOG          0009C */
    =00161 Q9STCTX3 +4 , /* F - COUNTER, CMD=-DISPLAY LOG      000A0 */
    =00165 Q9STCTX4 +4 , /* F - COUNTER, CMD=-SET SYSPARM      000A4 */
    =00169 Q9STCTX5 +4 , /* F - COUNTER, CMD=-DISPLAY DDF      000A8 */
    =00173 Q9STCTAD +4 , /* F - COUNTER, CMD=-ACCESS DATABASE  000AC */
    =00177 Q9STCTSS +4 , /* F - COUNTER, CMD=-START PROFILE    000B0 */
    =00181 Q9STCTST +4 , /* F - COUNTER, CMD=-STOP PROFILE     000B4 */
    =00185 Q9STCTSD +4 , /* F - COUNTER, CMD=-DISPLAY PROFILE  000B8 */
    =00189 Q9STCTDA +4 , /* F - COUNTER, CMD=-DISPLAY ACCEL    000BC */
    =00193 Q9STCTSA +4 , /* F - COUNTER, CMD=-START ACCEL      000C0 */
    =00197 Q9STCTXA +4 , /* F - COUNTER, CMD=-STOP ACCEL       000C4 */
    .           /* End of DSECT */
  /* next byte at 201 */
  dec_Q9STCTR0 = c2d(Q9STCTR0)
  dec_Q9STCTR1 = c2d(Q9STCTR1)
  dec_Q9STCTR2 = c2d(Q9STCTR2)
  dec_Q9STCTR3 = c2d(Q9STCTR3)
  dec_Q9STCTR4 = c2d(Q9STCTR4)
  dec_Q9STCTR5 = c2d(Q9STCTR5)
  dec_Q9STCTR6 = c2d(Q9STCTR6)
  dec_Q9STCTR7 = c2d(Q9STCTR7)
  dec_Q9STCTR8 = c2d(Q9STCTR8)
  dec_Q9STCTR9 = c2d(Q9STCTR9)
  dec_Q9STCTRA = c2d(Q9STCTRA)
  dec_Q9STCTRB = c2d(Q9STCTRB)
  dec_Q9STCTRC = c2d(Q9STCTRC)
  dec_Q9STCTRD = c2d(Q9STCTRD)
  dec_Q9STEROR = c2d(Q9STEROR)
  dec_Q9STCTRE = c2d(Q9STCTRE)
  dec_Q9STCTRF = c2d(Q9STCTRF)
  dec_Q9STCTRG = c2d(Q9STCTRG)
  dec_Q9STCTRH = c2d(Q9STCTRH)
  dec_Q9STCTRI = c2d(Q9STCTRI)
  dec_Q9STCTRJ = c2d(Q9STCTRJ)
  dec_Q9STCTRK = c2d(Q9STCTRK)
  dec_Q9STCTRL = c2d(Q9STCTRL)
  dec_Q9STCTRM = c2d(Q9STCTRM)
  dec_Q9STCTRN = c2d(Q9STCTRN)
  dec_Q9STCTRO = c2d(Q9STCTRO)
  dec_Q9STCTRP = c2d(Q9STCTRP)
  dec_Q9STCTRQ = c2d(Q9STCTRQ)
  dec_Q9STCTRR = c2d(Q9STCTRR)
  dec_Q9STCTRS = c2d(Q9STCTRS)
  dec_Q9STCTRT = c2d(Q9STCTRT)
  dec_Q9STCTRU = c2d(Q9STCTRU)
  dec_Q9STCTRV = c2d(Q9STCTRV)
  dec_Q9STCTRW = c2d(Q9STCTRW)
  dec_Q9STCTRX = c2d(Q9STCTRX)
  dec_Q9STCTRY = c2d(Q9STCTRY)
  dec_Q9STCTRZ = c2d(Q9STCTRZ)
  dec_Q9STCTX0 = c2d(Q9STCTX0)
  dec_Q9STCTX1 = c2d(Q9STCTX1)
  dec_Q9STCTX2 = c2d(Q9STCTX2)
  dec_Q9STCTX3 = c2d(Q9STCTX3)
  dec_Q9STCTX4 = c2d(Q9STCTX4)
  dec_Q9STCTX5 = c2d(Q9STCTX5)
  dec_Q9STCTAD = c2d(Q9STCTAD)
  dec_Q9STCTSS = c2d(Q9STCTSS)
  dec_Q9STCTST = c2d(Q9STCTST)
  dec_Q9STCTSD = c2d(Q9STCTSD)
  dec_Q9STCTDA = c2d(Q9STCTDA)
  dec_Q9STCTSA = c2d(Q9STCTSA)
  dec_Q9STCTXA = c2d(Q9STCTXA)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQ9ST",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQ9ST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQ9ST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQ9ST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQ9ST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY DATABA  :" dec_Q9STCTR0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY THREAD  :" dec_Q9STCTR1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY UTILIT  :" dec_Q9STCTR2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-RECOVER BSDS    :" dec_Q9STCTR3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-RECOVER INDOUB  :" dec_Q9STCTR4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START DATABASE  :" dec_Q9STCTR5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START TRACE     :" dec_Q9STCTR6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START SUBSYSTE  :" dec_Q9STCTR7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP DATABASE   :" dec_Q9STCTR8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP TRACE      :" dec_Q9STCTR9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP SUBSYSTEM  :" dec_Q9STCTRA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-TERM UTILITY    :" dec_Q9STCTRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DIS TRACE       :" dec_Q9STCTRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-RESET GENERICL  :" dec_Q9STCTRD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, UNRECOGNIZED COMMAN  :" dec_Q9STEROR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START RLIMIT    :" dec_Q9STCTRE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP RLIMIT     :" dec_Q9STCTRF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY RLIMIT  :" dec_Q9STCTRG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-MODIFY TRACE    :" dec_Q9STCTRH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START DDF       :" dec_Q9STCTRI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP DDF        :" dec_Q9STCTRJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-CANCEL(DDF)THR  :" dec_Q9STCTRK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY LOCATI  :" dec_Q9STCTRL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-ARCHIVE LOG     :" dec_Q9STCTRM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-ALTER BUFFERPO  :" dec_Q9STCTRN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY BUFFER  :" dec_Q9STCTRO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-SET ARCHIVE     :" dec_Q9STCTRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY ARCHIV  :" dec_Q9STCTRQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-RESET INDOUBT   :" dec_Q9STCTRR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-ALTER GBPOOL    :" dec_Q9STCTRS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY GBPOOL  :" dec_Q9STCTRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY PROCED  :" dec_Q9STCTRU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START PROCEDUR  :" dec_Q9STCTRV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP PROCEDURE  :" dec_Q9STCTRW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DIS GROUP       :" dec_Q9STCTRX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-ALTER UTILITY   :" dec_Q9STCTRY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY FUNCTI  :" dec_Q9STCTRZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START FUNCTION  :" dec_Q9STCTX0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP FUNCTION   :" dec_Q9STCTX1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-SET LOG         :" dec_Q9STCTX2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY LOG     :" dec_Q9STCTX3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-SET SYSPARM     :" dec_Q9STCTX4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY DDF     :" dec_Q9STCTX5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-ACCESS DATABAS  :" dec_Q9STCTAD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START PROFILE   :" dec_Q9STCTSS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP PROFILE    :" dec_Q9STCTST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY PROFIL  :" dec_Q9STCTSD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-DISPLAY ACCEL   :" dec_Q9STCTDA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-START ACCEL     :" dec_Q9STCTSA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNTER, CMD=-STOP ACCEL      :" dec_Q9STCTXA
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWSD length is 00076
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWSD:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWSD,118)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWSD Length: 118"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWSD ,
    =00001 QWSDCKPT +4 , /* F - DB2 CHECKPOINT COUNT           00000 */
    =00005 QWSDRINV +4 , /* F - REASON WHY STATISTICS WAS INVO 00004 */
    =00009 QWSDLR +8 , /* X - HIGH USED RBA ADDRESS OF LOG     00008 */
    =00017 QWSDSCA +4 , /* F - COUNT OF IFI ABENDS             00010 */
    =00021 QWSDSCU +4 , /* F - COUNT OF IFI UNRECOGNIZED FUNCT 00014 */
    =00025 QWSDSCCO +4 , /* F - COUNT OF IFI COMMAND REQUESTS  00018 */
    =00029 QWSDSCRA +4 , /* F - COUNT OF IFI READA REQUESTS    0001C */
    =00033 QWSDSCRS +4 , /* F - COUNT OF IFI READS REQUESTS    00020 */
    =00037 QWSDSCWR +4 , /* F - COUNT OF IFI WRITE REQUESTS    00024 */
,/* =00041 QWSDCDCS +0 ,    F - IFI DATA CAPTURE STATISTICS    00028 */
    =00041 QWSDCDLC +4 , /* F - NUMBER OF LOG RECORDS CAPTURED 00028 */
    =00045 QWSDCDLR +4 , /* F - NUMBER OF DATA CAPTURE LOG REA 0002C */
    =00049 QWSDCDRR +4 , /* F - NUMBER OF DATA CAPTURE LOG REC 00030 */
    =00053 QWSDCDDR +4 , /* F - NUMBER OF DATA CAPTURE DATA RO 00034 */
    =00057 QWSDCDDD +4 , /* F - NUMBER OF DATA CAPTURE DATA    00038 */
    =00061 QWSDCDMB +4 , /* F - NUMBER OF DATA CAPTURE DESCRIB 0003C */
    =00065 QWSDCDTB +4 , /* F - NUMBER OF DATA CAPTURE TABLES  00040 */
    =00069 QWSDARTH +4 , /* F - Number of rollup accounting re 00044 */
    =00073 QWSDARSG +4 , /* F - Number of rollup accounting re 00048 */
    =00077 QWSDARST +4 , /* F - Number of rollup accounting re 0004C */
    =00081 QWSDARIR +4 , /* F - Number of records failing to q 00050 */
    =00085 RSVD0001 +10 , /* X - Reserved                      00054 */
    =00095 QWSDVTB +24 , /* C - (S)                            0005E */
    =00095 QWSDTOMIAK_001 +8 , /* trace requester name?        0005E */
,/* =00119 QWSDEND +0 ,    C -                                 00076 */
    .           /* End of DSECT */
  /* next byte at 119 */
  dec_QWSDCKPT = c2d(QWSDCKPT)
  hex_QWSDRINV = c2x(QWSDRINV)
  hex_QWSDLR = c2x(QWSDLR)
  dec_QWSDSCA = c2d(QWSDSCA)
  dec_QWSDSCU = c2d(QWSDSCU)
  dec_QWSDSCCO = c2d(QWSDSCCO)
  dec_QWSDSCRA = c2d(QWSDSCRA)
  dec_QWSDSCRS = c2d(QWSDSCRS)
  dec_QWSDSCWR = c2d(QWSDSCWR)
  dec_QWSDCDLC = c2d(QWSDCDLC)
  dec_QWSDCDLR = c2d(QWSDCDLR)
  dec_QWSDCDRR = c2d(QWSDCDRR)
  dec_QWSDCDDR = c2d(QWSDCDDR)
  dec_QWSDCDDD = c2d(QWSDCDDD)
  dec_QWSDCDMB = c2d(QWSDCDMB)
  dec_QWSDCDTB = c2d(QWSDCDTB)
  dec_QWSDARTH = c2d(QWSDARTH)
  dec_QWSDARSG = c2d(QWSDARSG)
  dec_QWSDARST = c2d(QWSDARST)
  dec_QWSDARIR = c2d(QWSDARIR)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWSD",desired_dsect) > 0)) then do
    void_rc = queue_QWSD_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWSD:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWSD_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWSD:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 CHECKPOINT COUNT          :" dec_QWSDCKPT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON WHY STATISTICS WAS IN x:" hex_QWSDRINV
  If (BitAnd('04'x,QWSDRINV) = '04'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 04 DB2 Start up"
  end
  If (BitAnd('08'x,QWSDRINV) = '08'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 08 DB2 Shut down"
  end
  If (BitAnd('0C'x,QWSDRINV) = '0C'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 0C by command"
  end
  If (BitAnd('10'x,QWSDRINV) = '10'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 10 Activated by timer"
  end
  If (BitAnd('14'x,QWSDRINV) = '14'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 14 Activated at checkpoint"
  end
  If (BitAnd('18'x,QWSDRINV) = '18'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 18" ,
        "Activated during accounting"
  end
  If (BitAnd('1C'x,QWSDRINV) = '1C'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 1C READS Request"
  end
  If (BitAnd('20'x,QWSDRINV) = '20'x) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "                                    : 20 Reserved - yet defined"
  end
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HIGH USED RBA ADDRESS OF LOG x:" hex_QWSDLR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF IFI ABENDS           :" dec_QWSDSCA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF IFI UNRECOGNIZED FU  :" dec_QWSDSCU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF IFI COMMAND REQUEST  :" dec_QWSDSCCO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF IFI READA REQUESTS   :" dec_QWSDSCRA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF IFI READS REQUESTS   :" dec_QWSDSCRS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF IFI WRITE REQUESTS   :" dec_QWSDSCWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOG RECORDS CAPTUR  :" dec_QWSDCDLC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE LOG R  :" dec_QWSDCDLR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE LOG R  :" dec_QWSDCDRR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DATA   :" dec_QWSDCDDR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DATA   :" dec_QWSDCDDD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DESCR  :" dec_QWSDCDMB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE TABLE  :" dec_QWSDCDTB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of rollup accounting   :" dec_QWSDARTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of rollup accounting   :" dec_QWSDARSG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of rollup accounting   :" dec_QWSDARST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of records failing to  :" dec_QWSDARIR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Trace requester name?         :" QWSDTOMIAK_001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QVLS length is 00084
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QVLS:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QVLS,132)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QVLS Length: 132"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QVLS ,
    =00001 QVLSLC01 +4 , /* F - Infrequently used              00000 */
    =00005 QVLSLC02 +4 , /* F - Global authorization cache     00004 */
    =00009 QVLSLC03 +4 , /* F - DDF disconnect                 00008 */
    =00013 QVLSLC04 +4 , /* F - SYSSTRING cache                0000C */
    =00017 QVLSLC05 +4 , /* F - IRLM data sharing exits        00010 */
    =00021 QVLSLC06 +4 , /* F - Data sharing index split       00014 */
    =00025 QVLSLC07 +4 , /* F - Index lotch and OBD            00018 */
    =00029 QVLSLC08 +4 , /* F - Query parallelism              0001C */
    =00033 QVLSLC09 +4 , /* F - Utilities or stored            00020 */
    =00037 QVLSLC10 +4 , /* F - Allied agent chain or          00024 */
    =00041 QVLSLC11 +4 , /* F - DGTT allocation                00028 */
    =00045 QVLSLC12 +4 , /* F - Global transaction ID table    0002C */
    =00049 QVLSLC13 +4 , /* F - Pageset operations             00030 */
    =00053 QVLSLC14 +4 , /* F - Bufferpool LRU                 00034 */
    =00057 QVLSLC15 +4 , /* F - ARCHIVE LOG MODE(QUIESCE)      00038 */
    =00061 QVLSLC16 +4 , /* F - UR chain                       0003C */
    =00065 QVLSLC17 +4 , /* F - RURE chain                     00040 */
    =00069 QVLSLC18 +4 , /* F - DDF resynch list               00044 */
    =00073 QVLSLC19 +4 , /* F - Log write                      00048 */
    =00077 QVLSLC20 +4 , /* F - System checkpoint              0004C */
    =00081 QVLSLC21 +4 , /* F - Accounting rollup              00050 */
    =00085 QVLSLC22 +4 , /* F - Internal checkpoint            00054 */
    =00089 QVLSLC23 +4 , /* F - Buffer manager                 00058 */
    =00093 QVLSLC24 +4 , /* F - EDM pool or prefetch           0005C */
    =00097 QVLSLC25 +4 , /* F - Workfile allocation            00060 */
    =00101 QVLSLC26 +4 , /* F - Dynamic statement cache        00064 */
    =00105 QVLSLC27 +4 , /* F - Stored procedures or           00068 */
    =00109 QVLSLC28 +4 , /* F - Stored procedures or           0006C */
    =00113 QVLSLC29 +4 , /* F - Field procs and DDF            00070 */
    =00117 QVLSLC30 +4 , /* F - Agent services                 00074 */
    =00121 QVLSLC31 +4 , /* F - Storage manager                00078 */
    =00125 QVLSLC32 +4 , /* F - Storage manager                0007C */
    =00129 QVLSLC254 +4 , /* F - Index lotch                   00080 */
,/* =00133 QVLSEND +0 ,    C -                                 00084 */
    .           /* End of DSECT */
  /* next byte at 133 */
  dec_QVLSLC01 = c2d(QVLSLC01)
  dec_QVLSLC02 = c2d(QVLSLC02)
  dec_QVLSLC03 = c2d(QVLSLC03)
  dec_QVLSLC04 = c2d(QVLSLC04)
  dec_QVLSLC05 = c2d(QVLSLC05)
  dec_QVLSLC06 = c2d(QVLSLC06)
  dec_QVLSLC07 = c2d(QVLSLC07)
  dec_QVLSLC08 = c2d(QVLSLC08)
  dec_QVLSLC09 = c2d(QVLSLC09)
  dec_QVLSLC10 = c2d(QVLSLC10)
  dec_QVLSLC11 = c2d(QVLSLC11)
  dec_QVLSLC12 = c2d(QVLSLC12)
  dec_QVLSLC13 = c2d(QVLSLC13)
  dec_QVLSLC14 = c2d(QVLSLC14)
  dec_QVLSLC15 = c2d(QVLSLC15)
  dec_QVLSLC16 = c2d(QVLSLC16)
  dec_QVLSLC17 = c2d(QVLSLC17)
  dec_QVLSLC18 = c2d(QVLSLC18)
  dec_QVLSLC19 = c2d(QVLSLC19)
  dec_QVLSLC20 = c2d(QVLSLC20)
  dec_QVLSLC21 = c2d(QVLSLC21)
  dec_QVLSLC22 = c2d(QVLSLC22)
  dec_QVLSLC23 = c2d(QVLSLC23)
  dec_QVLSLC24 = c2d(QVLSLC24)
  dec_QVLSLC25 = c2d(QVLSLC25)
  dec_QVLSLC26 = c2d(QVLSLC26)
  dec_QVLSLC27 = c2d(QVLSLC27)
  dec_QVLSLC28 = c2d(QVLSLC28)
  dec_QVLSLC29 = c2d(QVLSLC29)
  dec_QVLSLC30 = c2d(QVLSLC30)
  dec_QVLSLC31 = c2d(QVLSLC31)
  dec_QVLSLC32 = c2d(QVLSLC32)
  dec_QVLSLC254 = c2d(QVLSLC254)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QVLS",desired_dsect) > 0)) then do
    void_rc = queue_QVLS_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QVLS:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QVLS_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QVLS:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Infrequently used             :" dec_QVLSLC01
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Global authorization cache    :" dec_QVLSLC02
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDF disconnect                :" dec_QVLSLC03
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SYSSTRING cache               :" dec_QVLSLC04
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IRLM data sharing exits       :" dec_QVLSLC05
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Data sharing index split      :" dec_QVLSLC06
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Index lotch and OBD           :" dec_QVLSLC07
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query parallelism             :" dec_QVLSLC08
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Utilities or stored           :" dec_QVLSLC09
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allied agent chain or         :" dec_QVLSLC10
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DGTT allocation               :" dec_QVLSLC11
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Global transaction ID table   :" dec_QVLSLC12
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pageset operations            :" dec_QVLSLC13
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Bufferpool LRU                :" dec_QVLSLC14
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ARCHIVE LOG MODE(QUIESCE)     :" dec_QVLSLC15
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UR chain                      :" dec_QVLSLC16
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RURE chain                    :" dec_QVLSLC17
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDF resynch list              :" dec_QVLSLC18
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Log write                     :" dec_QVLSLC19
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      System checkpoint             :" dec_QVLSLC20
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accounting rollup             :" dec_QVLSLC21
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Internal checkpoint           :" dec_QVLSLC22
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Buffer manager                :" dec_QVLSLC23
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EDM pool or prefetch          :" dec_QVLSLC24
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Workfile allocation           :" dec_QVLSLC25
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Dynamic statement cache       :" dec_QVLSLC26
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Stored procedures or          :" dec_QVLSLC27
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Stored procedures or          :" dec_QVLSLC28
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Field procs and DDF           :" dec_QVLSLC29
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Agent services                :" dec_QVLSLC30
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Storage manager               :" dec_QVLSLC31
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Storage manager               :" dec_QVLSLC32
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Index lotch                   :" dec_QVLSLC254
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QVAS length is 00038
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QVAS:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QVAS,56)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QVAS Length: 56"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QVAS ,
    =00001 QVASSUSP +4 , /* F - (S)                            00000 */
    =00005 QVASXSUS +4 , /* F - (S)                            00004 */
    =00009 QVASXSUT +4 , /* F - (S)                            00008 */
    =00013 QVASXAUS +4 , /* F - (S)                            0000C */
    =00017 QVASXAUT +4 , /* F - (S)                            00010 */
    =00021 QVASXSRS +4 , /* F - (S)                            00014 */
    =00025 QVASXSRT +4 , /* F - (S)                            00018 */
    =00029 QVASADUR +4 , /* F - (S)                            0001C */
    =00033 QVASADDL +4 , /* F - (S)                            00020 */
    =00037 QVASADIR +4 , /* F - (S)                            00024 */
    =00041 QVASCBOS +4 , /* F - (S)                            00028 */
    =00045 QVASCBOF +4 , /* F - (S)                            0002C */
    =00049 QVASMBOS +4 , /* F - (S)                            00030 */
    =00053 QVASMBOF +4 , /* F - (S)                            00034 */
,/* =00057 QVASEND +0 ,    C - END                             00038 */
    .           /* End of DSECT */
  /* next byte at 57 */
  hex_QVASSUSP = c2x(QVASSUSP)
  hex_QVASXSUS = c2x(QVASXSUS)
  hex_QVASXSUT = c2x(QVASXSUT)
  hex_QVASXAUS = c2x(QVASXAUS)
  hex_QVASXAUT = c2x(QVASXAUT)
  hex_QVASXSRS = c2x(QVASXSRS)
  hex_QVASXSRT = c2x(QVASXSRT)
  hex_QVASADUR = c2x(QVASADUR)
  hex_QVASADDL = c2x(QVASADDL)
  hex_QVASADIR = c2x(QVASADIR)
  hex_QVASCBOS = c2x(QVASCBOS)
  hex_QVASCBOF = c2x(QVASCBOF)
  hex_QVASMBOS = c2x(QVASMBOS)
  hex_QVASMBOF = c2x(QVASMBOF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QVAS",desired_dsect) > 0)) then do
    void_rc = queue_QVAS_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QVAS:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QVAS_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QVAS:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASSUSP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASXSUS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASXSUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASXAUS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASXAUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASXSRS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASXSRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASADUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASADDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASADIR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASCBOS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASCBOF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASMBOS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QVASMBOF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QSST length is 0005C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QSST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QSST,92)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QSST Length: 92"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QSST ,
,/* =00001 QSSTHEAD +0 ,    F - CONTROL BLOCK HEADER           00000 */
    =00001 QSSTID +2 , /* C - CONTROL BLOCK ID                 00000 */
    =00003 QSSTLEN +2 , /* H - LENGTH OF CONTROL BLOCK         00002 */
    =00005 QSSTDESC +4 , /* C - EBCDIC EYE-CATCHER             00004 */
,/* =00009 QSSTDATA +0 ,    F - STATISTICAL COUNTERS           00008 */
    =00009 QSSTGPLF +4 , /* F - (S)                            00008 */
    =00013 QSSTFPLF +4 , /* F - (S)                            0000C */
    =00017 QSSTFREF +4 , /* F - (S)                            00010 */
    =00021 QSSTEXPF +4 , /* F - (S)                            00014 */
    =00025 QSSTCONF +4 , /* F - (S)                            00018 */
    =00029 QSSTGPLV +4 , /* F - (S)                            0001C */
    =00033 QSSTFPLV +4 , /* F - (S)                            00020 */
    =00037 QSSTFREV +4 , /* F - (S)                            00024 */
    =00041 QSSTEXPV +4 , /* F - (S)                            00028 */
    =00045 QSSTCONV +4 , /* F - (S)                            0002C */
    =00049 QSSTGETM +4 , /* F - (S)                            00030 */
    =00053 QSSTFREM +4 , /* F - (S)                            00034 */
    =00057 QSSTRCNZ +4 , /* F - (S)                            00038 */
    =00061 QSSTCONT +4 , /* F - (S)                            0003C */
    =00065 QSSTCRIT +4 , /* F - (S)                            00040 */
    =00069 QSSTABND +4 , /* F - (S)                            00044 */
    =00073 QSST_SGETM +4 , /* F - (S)                          00048 */
    =00077 QSST_SGETR +4 , /* F - (S)                          0004C */
    =00081 QSST_SGETEXT +4 , /* F - (S)                        00050 */
    =00085 QSST_SFREEM +4 , /* F - (S)                         00054 */
    =00089 QSST_SFREER +4 , /* F - (S)                         00058 */
,/* =00093 QSSTEND +0 ,    C - END OF CONTROL BLOCK            0005C */
  ,     /* QSSTIDEN EQU x'0000003C' HEADER CONSTANT                  */
  ,     /* QSSTEYEC EQU x'D8E2E2E3' EYE-CATCHER CONSTANT             */
    .           /* End of DSECT */
  /* next byte at 93 */
  hex_QSSTID = c2x(QSSTID)
  hex_QSSTLEN = c2x(QSSTLEN)
  hex_QSSTDESC = c2x(QSSTDESC)
  hex_QSSTGPLF = c2x(QSSTGPLF)
  hex_QSSTFPLF = c2x(QSSTFPLF)
  hex_QSSTFREF = c2x(QSSTFREF)
  hex_QSSTEXPF = c2x(QSSTEXPF)
  hex_QSSTCONF = c2x(QSSTCONF)
  hex_QSSTGPLV = c2x(QSSTGPLV)
  hex_QSSTFPLV = c2x(QSSTFPLV)
  hex_QSSTFREV = c2x(QSSTFREV)
  hex_QSSTEXPV = c2x(QSSTEXPV)
  hex_QSSTCONV = c2x(QSSTCONV)
  hex_QSSTGETM = c2x(QSSTGETM)
  hex_QSSTFREM = c2x(QSSTFREM)
  hex_QSSTRCNZ = c2x(QSSTRCNZ)
  hex_QSSTCONT = c2x(QSSTCONT)
  hex_QSSTCRIT = c2x(QSSTCRIT)
  hex_QSSTABND = c2x(QSSTABND)
  hex_QSST_SGETM = c2x(QSST_SGETM)
  hex_QSST_SGETR = c2x(QSST_SGETR)
  hex_QSST_SGETEXT = c2x(QSST_SGETEXT)
  hex_QSST_SFREEM = c2x(QSST_SFREEM)
  hex_QSST_SFREER = c2x(QSST_SFREER)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QSST",desired_dsect) > 0)) then do
    void_rc = queue_QSST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QSST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QSST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QSST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK ID             x:" hex_QSSTID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF CONTROL BLOCK      x:" hex_QSSTLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EBCDIC EYE-CATCHER            :" QSSTDESC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTGPLF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTFPLF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTFREF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTEXPF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTCONF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTGPLV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTFPLV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTFREV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTEXPV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTCONV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTGETM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTFREM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTRCNZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTCONT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTCRIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSSTABND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSST_SGETM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSST_SGETR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSST_SGETEXT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSST_SFREEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QSST_SFREER
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QLST length is 000B0
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QLST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QLST,dec_QWS00RAL)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QLST Length:" dec_QWS00RAL
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QLST ,
    =00001 QLSTLOCN +16 , /* C - %U LOCATION NAME OF THE  REMO 00000 */
    =00017 QLSTSQLS +4 , /* F - NUMBER OF SQL STATEMENTS SENT  00010 */
    =00021 QLSTSQLR +4 , /* F - NUMBER OF SQL STATEMENTS       00014 */
    =00025 QLSTROWS +4 , /* F - NUMBER OF ROWS OF DATA SENT TO 00018 */
    =00029 QLSTROWR +4 , /* F - NUMBER OF ROWS OF DATA         0001C */
    =00033 QLSTBYTS +4 , /* F - NUMBER OF BYTES OF DATA SENT   00020 */
    =00037 QLSTBYTR +4 , /* F - NUMBER OF BYTES OF DATA        00024 */
    =00041 QLSTCNVS +4 , /* F - NUMBER OF CONVERSATIONS THAT   00028 */
    =00045 QLSTCNVR +4 , /* F - NUMBER OF CONVERSATIONS THAT   0002C */
    =00049 QLSTMSGS +4 , /* F - NUMBER OF MESSAGES SENT TO     00030 */
    =00053 QLSTMSGR +4 , /* F - NUMBER OF MESSAGES RECEIVED    00034 */
    =00057 QLSTTRNS +4 , /* F - NUMBER OF DATABASE ACCESS THRE 00038 */
    =00061 QLSTTRNR +4 , /* F - NUMBER OF DATABASE ACCESS THRE 0003C */
    =00065 QLSTCOMS +4 , /* F - NUMBER OF COMMIT REQUESTS SENT 00040 */
    =00069 QLSTCOMR +4 , /* F - NUMBER OF COMMIT REQUESTS RECE 00044 */
    =00073 QLSTABRS +4 , /* F - NUMBER OF ABORT REQUESTS SENT  00048 */
    =00077 QLSTABRR +4 , /* F - NUMBER OF ABORT REQUESTS RECEI 0004C */
    =00081 QLSTCNVQ +4 , /* F - NUMBER OF CONVERSATION REQUEST 00050 */
    =00085 QLSTCBLB +4 , /* F - NUMBER OF TIMES A SWITCH WAS M 00054 */
    =00089 QLSTRBND +4 , /* F - NUMBER OF SQL STATEMENTS THAT  00058 */
    =00093 QLSTBROW +4 , /* F - NUMBER OF ROWS IN THE MESSAGE  0005C */
    =00097 QLSTBTBF +4 , /* F - NUMBER OF BLOCKS TRANSMITTED U 00060 */
    =00101 QLSTBRBF +4 , /* F - NUMBER OF BLOCKS RECEIVED USIN 00064 */
    =00105 QLSTPRSE +4 , /* F - NUMBER OF PREPARE REQUESTS SEN 00068 */
    =00109 QLSTPRRC +4 , /* F - NUMBER OF PREPARE REQUESTS REC 0006C */
    =00113 QLSTLASE +4 , /* F - NUMBER OF LAST AGENT REQUESTS  00070 */
    =00117 QLSTLARC +4 , /* F - NUMBER OF LAST AGENT REQUESTS  00074 */
    =00121 QLSTCRSE +4 , /* F - NUMBER OF COMMITED REQUESTS SE 00078 */
    =00125 QLSTCRRC +4 , /* F - NUMBER OF COMMITED REQUESTS RE 0007C */
    =00129 QLSTBKSE +4 , /* F - NUMBER OF BACKOUT REQUESTS SEN 00080 */
    =00133 QLSTBKRC +4 , /* F - NUMBER OF BACKOUT REQUESTS REC 00084 */
    =00137 QLSTRRSE +4 , /* F - NUMBER OF FORGET RESPONSES SEN 00088 */
    =00141 QLSTRRRC +4 , /* F - NUMBER OF FORGET RESPONSES REC 0008C */
    =00145 QLSTVYSE +4 , /* F - NUMBER OF REQUEST COMMIT RESPO 00090 */
    =00149 QLSTVYRC +4 , /* F - NUMBER OF REQUEST COMMIT RESPO 00094 */
    =00153 QLSTVNSE +4 , /* F - NUMBER OF BACKOUT RESPONSES SE 00098 */
    =00157 QLSTVNRC +4 , /* F - NUMBER OF BACKOUT RESPONSES RE 0009C */
    =00161 QLSTINDT +4 , /* F - NUMBER OF THREADS THAT BECAME  000A0 */
    =00165 QLSTCPTR +4 , /* F - NUMBER OF COMMIT OPERATIONS PE 000A4 */
    =00169 QLSTRBTR +4 , /* F - NUMBER OF ROLLBACK OPERATIONS  000A8 */
    =00173 QLSTLOCN_Off +2 , /* H - Offset from QLST to        000AC */
    =00175 RSVD0001 +2 , /* H - Reserved                       000AE */
,/* =00177 QLSTEND +0 ,    F -                                 000B0 */
    .           /* End of DSECT */
  /* next byte at 177 */
  hex_QLSTLOCN = c2x(QLSTLOCN)
  hex_QLSTSQLS = c2x(QLSTSQLS)
  hex_QLSTSQLR = c2x(QLSTSQLR)
  hex_QLSTROWS = c2x(QLSTROWS)
  hex_QLSTROWR = c2x(QLSTROWR)
  hex_QLSTBYTS = c2x(QLSTBYTS)
  hex_QLSTBYTR = c2x(QLSTBYTR)
  hex_QLSTCNVS = c2x(QLSTCNVS)
  hex_QLSTCNVR = c2x(QLSTCNVR)
  hex_QLSTMSGS = c2x(QLSTMSGS)
  hex_QLSTMSGR = c2x(QLSTMSGR)
  hex_QLSTTRNS = c2x(QLSTTRNS)
  hex_QLSTTRNR = c2x(QLSTTRNR)
  hex_QLSTCOMS = c2x(QLSTCOMS)
  hex_QLSTCOMR = c2x(QLSTCOMR)
  hex_QLSTABRS = c2x(QLSTABRS)
  hex_QLSTABRR = c2x(QLSTABRR)
  hex_QLSTCNVQ = c2x(QLSTCNVQ)
  hex_QLSTCBLB = c2x(QLSTCBLB)
  hex_QLSTRBND = c2x(QLSTRBND)
  hex_QLSTBROW = c2x(QLSTBROW)
  hex_QLSTBTBF = c2x(QLSTBTBF)
  hex_QLSTBRBF = c2x(QLSTBRBF)
  hex_QLSTPRSE = c2x(QLSTPRSE)
  hex_QLSTPRRC = c2x(QLSTPRRC)
  hex_QLSTLASE = c2x(QLSTLASE)
  hex_QLSTLARC = c2x(QLSTLARC)
  hex_QLSTCRSE = c2x(QLSTCRSE)
  hex_QLSTCRRC = c2x(QLSTCRRC)
  hex_QLSTBKSE = c2x(QLSTBKSE)
  hex_QLSTBKRC = c2x(QLSTBKRC)
  hex_QLSTRRSE = c2x(QLSTRRSE)
  hex_QLSTRRRC = c2x(QLSTRRRC)
  hex_QLSTVYSE = c2x(QLSTVYSE)
  hex_QLSTVYRC = c2x(QLSTVYRC)
  hex_QLSTVNSE = c2x(QLSTVNSE)
  hex_QLSTVNRC = c2x(QLSTVNRC)
  hex_QLSTINDT = c2x(QLSTINDT)
  hex_QLSTCPTR = c2x(QLSTCPTR)
  hex_QLSTRBTR = c2x(QLSTRBTR)
  hex_QLSTLOCN_Off = c2x(QLSTLOCN_Off)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QLST",desired_dsect) > 0)) then do
    void_rc = queue_QLST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QLST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QLST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QLST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME OF THE  REM x:" hex_QLSTLOCN
  if (dec_QWS00RAL > 16) then do
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF SQL STATEMENTS SEN x:" hex_QLSTSQLS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF SQL STATEMENTS     x:" hex_QLSTSQLR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF ROWS OF DATA SENT  x:" hex_QLSTROWS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF ROWS OF DATA       x:" hex_QLSTROWR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BYTES OF DATA SENT x:" hex_QLSTBYTS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BYTES OF DATA      x:" hex_QLSTBYTR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF CONVERSATIONS THAT x:" hex_QLSTCNVS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF CONVERSATIONS THAT x:" hex_QLSTCNVR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF MESSAGES SENT TO   x:" hex_QLSTMSGS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF MESSAGES RECEIVED  x:" hex_QLSTMSGR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATABASE ACCESS TH x:" hex_QLSTTRNS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF DATABASE ACCESS TH x:" hex_QLSTTRNR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF COMMIT REQUESTS SE x:" hex_QLSTCOMS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF COMMIT REQUESTS RE x:" hex_QLSTCOMR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF ABORT REQUESTS SEN x:" hex_QLSTABRS
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF ABORT REQUESTS REC x:" hex_QLSTABRR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF CONVERSATION REQUE x:" hex_QLSTCNVQ
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF TIMES A SWITCH WAS x:" hex_QLSTCBLB
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF SQL STATEMENTS THA x:" hex_QLSTRBND
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF ROWS IN THE MESSAG x:" hex_QLSTBROW
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BLOCKS TRANSMITTED x:" hex_QLSTBTBF
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BLOCKS RECEIVED US x:" hex_QLSTBRBF
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF PREPARE REQUESTS S x:" hex_QLSTPRSE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF PREPARE REQUESTS R x:" hex_QLSTPRRC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF LAST AGENT REQUEST x:" hex_QLSTLASE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF LAST AGENT REQUEST x:" hex_QLSTLARC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF COMMITED REQUESTS  x:" hex_QLSTCRSE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF COMMITED REQUESTS  x:" hex_QLSTCRRC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BACKOUT REQUESTS S x:" hex_QLSTBKSE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BACKOUT REQUESTS R x:" hex_QLSTBKRC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF FORGET RESPONSES S x:" hex_QLSTRRSE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF FORGET RESPONSES R x:" hex_QLSTRRRC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF REQUEST COMMIT RES x:" hex_QLSTVYSE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF REQUEST COMMIT RES x:" hex_QLSTVYRC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BACKOUT RESPONSES  x:" hex_QLSTVNSE
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF BACKOUT RESPONSES  x:" hex_QLSTVNRC
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF THREADS THAT BECAM x:" hex_QLSTINDT
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF COMMIT OPERATIONS  x:" hex_QLSTCPTR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      NUMBER OF ROLLBACK OPERATION x:" hex_QLSTRBTR
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      Offset from QLST to          x:" hex_QLSTLOCN_Off
    debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
      "      Reserved                     x:" hex_RSVD0001
  end
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QLSTLOCN_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QLSTLOCN_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QLSTLOCN_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QLSTLOCN_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QLSTLOCN_D ,
    =00001 QLSTLOCN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QLSTLOCN_Var +0 ,    C - %U LOCATION NAME OF THE  R 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QLSTLOCN_Len = c2x(QLSTLOCN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QLSTLOCN_D",desired_dsect) > 0)) then do
    void_rc = queue_QLSTLOCN_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QLSTLOCN_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QLSTLOCN_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QLSTLOCN_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QLSTLOCN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQJST length is 00070
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQJST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQJST,112)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQJST Length: 112"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQJST ,
,/* =00001 QJST +0 ,    D -                                    00000 */
    =00001 QJSTID +2 , /* C - (S) CONTROL BLOCK ID  X 0093     00000 */
    =00003 QJSTLL +2 , /* H - LENGTH OF BLOCK                  00002 */
    =00005 QJSTEID +4 , /* C - EBCDIC EYECATCHER               00004 */
    =00009 QJSTWRW +4 , /* F - WRITE REQUEST COUNT, WAIT       00008 */
    =00013 QJSTWRNW +4 , /* F - WRITE REQUEST COUNT, NOWAIT    0000C */
    =00017 QJSTWRF +4 , /* F - WRITE REQUEST COUNT, FORCE      00010 */
    =00021 QJSTWTB +4 , /* F - WAIT COUNT DUE TO UNAVAILABLE A 00014 */
    =00025 QJSTRBUF +4 , /* F - LOG READS SATISFIED FROM OUTPU 00018 */
    =00029 QJSTRACT +4 , /* F - READS SATISFIED FROM ACTIVE LO 0001C */
    =00033 QJSTRARH +4 , /* F - READS SATISFIED FROM ARCHIVE L 00020 */
    =00037 QJSTTVC +4 , /* F - NUMBER OF READ ACCESSES DELAYED 00024 */
    =00041 QJSTBSDS +4 , /* F - TOTAL BSDS ACCESS REQUESTS     00028 */
    =00045 QJSTBFFL +4 , /* F - ACTIVE LOG OUTPUT CONTROL INTE 0002C */
    =00049 QJSTBFWR +4 , /* F - COUNT OF CALLS TO WRITE ACTIVE 00030 */
    =00053 QJSTALR +4 , /* F - ARCHIVE LOG READ ALLOCATIONS    00034 */
    =00057 QJSTALW +4 , /* F - ARCHIVE LOG WRITE ALLOCATIONS   00038 */
    =00061 QJSTCIOF +4 , /* F - COUNT OF CONTROL INTERVALS OFF 0003C */
    =00065 QJSTWUR +4 , /* F - NUMBER OF READ ACCESSES DELAYED 00040 */
    =00069 QJSTLAMA +4 , /* F - NUMBER OF LOOK-AHEAD TAPE VOLU 00044 */
    =00073 QJSTLAMS +4 , /* F - NUMBER OF LOOK-AHEAD TAPE VOLU 00048 */
    =00077 QJSTLSUS +4 , /* F - (S)                            0004C */
    =00081 QJSTLOGW +4 , /* F - TOTAL NUMBER OF LOG WRITE I/O  00050 */
    =00085 QJSTCIWR +4 , /* F - TOTAL NUMBER OF LOG CI-S WRITT 00054 */
    =00089 QJSTSERW +4 , /* F - NUMBER OF SERIAL LOG WRITE REQ 00058 */
    =00093 QJSTTHRW +4 , /* F - NUMBER OF TIMES A LOG WRITE RE 0005C */
    =00097 QJSTBPAG +4 , /* F - NUMBER OF TIMES A LOG-WRITE BU 00060 */
    =00101 RSVD0001 +12 , /* F - (S)                           00064 */
,/* =00113 QJSTEND +0 ,    F -                                 00070 */
    .           /* End of DSECT */
  /* next byte at 113 */
  hex_QJSTID = c2x(QJSTID)
  hex_QJSTLL = c2x(QJSTLL)
  hex_QJSTEID = c2x(QJSTEID)
  hex_QJSTWRW = c2x(QJSTWRW)
  hex_QJSTWRNW = c2x(QJSTWRNW)
  hex_QJSTWRF = c2x(QJSTWRF)
  hex_QJSTWTB = c2x(QJSTWTB)
  hex_QJSTRBUF = c2x(QJSTRBUF)
  hex_QJSTRACT = c2x(QJSTRACT)
  hex_QJSTRARH = c2x(QJSTRARH)
  hex_QJSTTVC = c2x(QJSTTVC)
  hex_QJSTBSDS = c2x(QJSTBSDS)
  hex_QJSTBFFL = c2x(QJSTBFFL)
  hex_QJSTBFWR = c2x(QJSTBFWR)
  hex_QJSTALR = c2x(QJSTALR)
  hex_QJSTALW = c2x(QJSTALW)
  hex_QJSTCIOF = c2x(QJSTCIOF)
  hex_QJSTWUR = c2x(QJSTWUR)
  hex_QJSTLAMA = c2x(QJSTLAMA)
  hex_QJSTLAMS = c2x(QJSTLAMS)
  hex_QJSTLSUS = c2x(QJSTLSUS)
  hex_QJSTLOGW = c2x(QJSTLOGW)
  hex_QJSTCIWR = c2x(QJSTCIWR)
  hex_QJSTSERW = c2x(QJSTSERW)
  hex_QJSTTHRW = c2x(QJSTTHRW)
  hex_QJSTBPAG = c2x(QJSTBPAG)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQJST",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQJST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQJST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQJST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQJST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) CONTROL BLOCK ID  X 0093 x:" hex_QJSTID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF BLOCK              x:" hex_QJSTLL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EBCDIC EYECATCHER            x:" hex_QJSTEID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WRITE REQUEST COUNT, WAIT    x:" hex_QJSTWRW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WRITE REQUEST COUNT, NOWAIT  x:" hex_QJSTWRNW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WRITE REQUEST COUNT, FORCE   x:" hex_QJSTWRF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAIT COUNT DUE TO UNAVAILABL x:" hex_QJSTWTB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOG READS SATISFIED FROM OUT x:" hex_QJSTRBUF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      READS SATISFIED FROM ACTIVE  x:" hex_QJSTRACT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      READS SATISFIED FROM ARCHIVE x:" hex_QJSTRARH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF READ ACCESSES DELA x:" hex_QJSTTVC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL BSDS ACCESS REQUESTS   x:" hex_QJSTBSDS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACTIVE LOG OUTPUT CONTROL IN x:" hex_QJSTBFFL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF CALLS TO WRITE ACTI x:" hex_QJSTBFWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ARCHIVE LOG READ ALLOCATIONS x:" hex_QJSTALR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ARCHIVE LOG WRITE ALLOCATION x:" hex_QJSTALW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF CONTROL INTERVALS O x:" hex_QJSTCIOF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF READ ACCESSES DELA x:" hex_QJSTWUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOOK-AHEAD TAPE VO x:" hex_QJSTLAMA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOOK-AHEAD TAPE VO x:" hex_QJSTLAMS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QJSTLSUS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF LOG WRITE I/ x:" hex_QJSTLOGW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF LOG CI-S WRI x:" hex_QJSTCIWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SERIAL LOG WRITE R x:" hex_QJSTSERW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF TIMES A LOG WRITE  x:" hex_QJSTTHRW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF TIMES A LOG-WRITE  x:" hex_QJSTBPAG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QDST length is 00054
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QDST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QDST,84)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QDST Length: 84"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QDST ,
    =00001 QDSTQDBT +4 , /* F - NUMBER OF TIMES THAT A DBAT    00000 */
    =00005 QDSTCSTR +4 , /* F - NUMBER OF COLD START           00004 */
    =00009 QDSTWSTR +4 , /* F - NUMBER OF WARM START           00008 */
    =00013 QDSTRSAT +4 , /* F - NUMBER OF RESYNCHRONIZATION    0000C */
    =00017 QDSTRSSU +4 , /* F - NUMBER OF RESYNCHRONIZATION    00010 */
    =00021 QDSTQCRT +4 , /* F - THE NUMBER OF CONVERSATIONS    00014 */
    =00025 QDSTQCIT +4 , /* F - THE CURRENT NUMBER OF          00018 */
    =00029 QDSTQMIT +4 , /* F - THE MAXIMUM NUMBER OF          0001C */
    =00033 QDSTCNAT +4 , /* F - THE CURRENT NUMBER OF          00020 */
    =00037 QDSTHWAT +4 , /* F - THE MAXIMUM NUMBER OF          00024 */
    =00041 QDSTHWDT +4 , /* F - THE MAXIMUM NUMBER OF          00028 */
    =00045 QDSTNITC +4 , /* F - NUMBER OF CONNECTIONS THAT     0002C */
    =00049 QDSTCIN2 +4 , /* F - CURRENT NUMBER OF TYPE 2       00030 */
    =00053 QDSTMIN2 +4 , /* F - MAXIMUM NUMBER OF TYPE 2       00034 */
    =00057 QDSTQIN2 +4 , /* F - NUMBER OF QUEUED RECEIVE       00038 */
    =00061 QDSTNQR2 +4 , /* F - CURRENT NUMBER OF TYPE 2       0003C */
    =00065 QDSTMQR2 +4 , /* F - MAXIMUM NUMBER OF TYPE 2       00040 */
    =00069 QDSTNADS +4 , /* F - CURRENT NUMBER OF ACTIVE       00044 */
    =00073 QDSTMADS +4 , /* F - MAXIMUM NUMBER OF DATABASE     00048 */
    =00077 QDSTNDBA +4 , /* F - THE NUMBER OF REQUESTS THAT    0004C */
    =00081 QDSTPOOL +4 , /* F - THE NUMBER OF REQUESTS         00050 */
,/* =00085 QDSTEND +0 ,    C -                                 00054 */
    .           /* End of DSECT */
  /* next byte at 85 */
  hex_QDSTQDBT = c2x(QDSTQDBT)
  hex_QDSTCSTR = c2x(QDSTCSTR)
  hex_QDSTWSTR = c2x(QDSTWSTR)
  hex_QDSTRSAT = c2x(QDSTRSAT)
  hex_QDSTRSSU = c2x(QDSTRSSU)
  hex_QDSTQCRT = c2x(QDSTQCRT)
  hex_QDSTQCIT = c2x(QDSTQCIT)
  hex_QDSTQMIT = c2x(QDSTQMIT)
  hex_QDSTCNAT = c2x(QDSTCNAT)
  hex_QDSTHWAT = c2x(QDSTHWAT)
  hex_QDSTHWDT = c2x(QDSTHWDT)
  hex_QDSTNITC = c2x(QDSTNITC)
  hex_QDSTCIN2 = c2x(QDSTCIN2)
  hex_QDSTMIN2 = c2x(QDSTMIN2)
  hex_QDSTQIN2 = c2x(QDSTQIN2)
  hex_QDSTNQR2 = c2x(QDSTNQR2)
  hex_QDSTMQR2 = c2x(QDSTMQR2)
  hex_QDSTNADS = c2x(QDSTNADS)
  hex_QDSTMADS = c2x(QDSTMADS)
  hex_QDSTNDBA = c2x(QDSTNDBA)
  hex_QDSTPOOL = c2x(QDSTPOOL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QDST",desired_dsect) > 0)) then do
    void_rc = queue_QDST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QDST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QDST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QDST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF TIMES THAT A DBAT  x:" hex_QDSTQDBT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF COLD START         x:" hex_QDSTCSTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WARM START         x:" hex_QDSTWSTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RESYNCHRONIZATION  x:" hex_QDSTRSAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RESYNCHRONIZATION  x:" hex_QDSTRSSU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF CONVERSATIONS  x:" hex_QDSTQCRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE CURRENT NUMBER OF        x:" hex_QDSTQCIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE MAXIMUM NUMBER OF        x:" hex_QDSTQMIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE CURRENT NUMBER OF        x:" hex_QDSTCNAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE MAXIMUM NUMBER OF        x:" hex_QDSTHWAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE MAXIMUM NUMBER OF        x:" hex_QDSTHWDT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CONNECTIONS THAT   x:" hex_QDSTNITC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT NUMBER OF TYPE 2     x:" hex_QDSTCIN2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF TYPE 2     x:" hex_QDSTMIN2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF QUEUED RECEIVE     x:" hex_QDSTQIN2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT NUMBER OF TYPE 2     x:" hex_QDSTNQR2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF TYPE 2     x:" hex_QDSTMQR2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT NUMBER OF ACTIVE     x:" hex_QDSTNADS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF DATABASE   x:" hex_QDSTMADS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF REQUESTS THAT  x:" hex_QDSTNDBA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF REQUESTS       x:" hex_QDSTPOOL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWOS length is 00044
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWOS:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWOS,68)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWOS Length: 68"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWOS ,
    =00001 QWOSLNCP +4 , /* F - NO OF CPS ON LPAR              00000 */
    =00005 QWOSLPRU +4 , /* F - CPU UTILIZATION LPAR           00004 */
    =00009 QWOSDB2U +4 , /* F - CPU UTILIZATION DB2 SUBSYS     00008 */
    =00013 QWOSMSTU +4 , /* F - CPU UTILIZATION DB2 MSTR       0000C */
    =00017 QWOSDBMU +4 , /* F - CPU UTILIZATION DB2 DBM1       00010 */
    =00021 QWOSLPIR +4 , /* F - PAGE-IN RATE LPAR              00014 */
    =00025 QWOSDPIR +4 , /* F - PAGE-IN RATE DB2 SUBSYS        00018 */
    =00029 QWOSLRST +4 , /* F - REAL STORAGE ON LPAR IN MB     0001C */
    =00033 QWOSLRSF +4 , /* F - FREE REAL STORAGE LPAR IN MB   00020 */
    =00037 QWOSDRSU +4 , /* F - USED REAL STORAGE DB2 SUBSYS I 00024 */
    =00041 QWOSLVST +4 , /* F - VIRTUAL STORAGE LPAR IN MB     00028 */
    =00045 QWOSLVSF +4 , /* F - FREE VIRTUAL STORAGE LPAR IN M 0002C */
    =00049 QWOSDVSU +4 , /* F - USED VIRTUAL STORAGE DB2 SUBSY 00030 */
    =00053 QWOSLUIC +4 , /* F - UNREFERENCED INTERVAL COUNT    00034 */
    =00057 QWOSFLG +1 , /* C - (S) STATUS FLAG FOR RMF-API     00038 */
    =00058 RSVD0001 +3 , /* C - @116                           00039 */
    =00061 QWOSRCDE +4 , /* F - (S) RETURN CODE FROM RMF-API   0003C */
    =00065 QWOSRSNC +4 , /* F - (S) REASON CODE from RMF-API   00040 */
,/* =00069 QWOSEND +0 ,    C -                                 00044 */
    .           /* End of DSECT */
  /* next byte at 69 */
  dec_QWOSLNCP = c2d(QWOSLNCP,length(QWOSLNCP))
  hex_QWOSLPRU = c2x(QWOSLPRU)
  hex_QWOSDB2U = c2x(QWOSDB2U)
  hex_QWOSMSTU = c2x(QWOSMSTU)
  hex_QWOSDBMU = c2x(QWOSDBMU)
  hex_QWOSLPIR = c2x(QWOSLPIR)
  hex_QWOSDPIR = c2x(QWOSDPIR)
  hex_QWOSLRST = c2x(QWOSLRST)
  hex_QWOSLRSF = c2x(QWOSLRSF)
  hex_QWOSDRSU = c2x(QWOSDRSU)
  hex_QWOSLVST = c2x(QWOSLVST)
  hex_QWOSLVSF = c2x(QWOSLVSF)
  hex_QWOSDVSU = c2x(QWOSDVSU)
  hex_QWOSLUIC = c2x(QWOSLUIC)
  hex_QWOSFLG = c2x(QWOSFLG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWOSRCDE = c2x(QWOSRCDE)
  hex_QWOSRSNC = c2x(QWOSRSNC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWOS",desired_dsect) > 0)) then do
    void_rc = queue_QWOS_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWOS:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWOS_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWOS:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NO OF CPS ON LPAR             :" dec_QWOSLNCP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU UTILIZATION LPAR         x:" hex_QWOSLPRU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU UTILIZATION DB2 SUBSYS   x:" hex_QWOSDB2U
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU UTILIZATION DB2 MSTR     x:" hex_QWOSMSTU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU UTILIZATION DB2 DBM1     x:" hex_QWOSDBMU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE-IN RATE LPAR            x:" hex_QWOSLPIR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE-IN RATE DB2 SUBSYS      x:" hex_QWOSDPIR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REAL STORAGE ON LPAR IN MB   x:" hex_QWOSLRST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FREE REAL STORAGE LPAR IN MB x:" hex_QWOSLRSF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      USED REAL STORAGE DB2 SUBSYS x:" hex_QWOSDRSU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL STORAGE LPAR IN MB   x:" hex_QWOSLVST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FREE VIRTUAL STORAGE LPAR IN x:" hex_QWOSLVSF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      USED VIRTUAL STORAGE DB2 SUB x:" hex_QWOSDVSU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNREFERENCED INTERVAL COUNT   :" dec_QWOSLUIC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) STATUS FLAG FOR RMF-API  x:" hex_QWOSFLG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      @116                         x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) RETURN CODE FROM RMF-API x:" hex_QWOSRCDE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) REASON CODE from RMF-API x:" hex_QWOSRSNC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWS1 length is 00060
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWS1:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWS1,96)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWS1 Length: 96"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWS1 ,
    =00001 QWS10PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWS10PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWS10PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWS10R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWS10R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWS10R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
    =00017 QWS10R2O +4 , /* R - OFFSET TO THE DATA SECTION     00010 */
    =00021 QWS10R2L +2 , /* X - LENGTH OF THE DATA SECTION     00014 */
    =00023 QWS10R2N +2 , /* X - NUMBER OF DATA SECTIONS        00016 */
    =00025 QWS10R3O +4 , /* R - OFFSET TO THE DATA SECTION     00018 */
    =00029 QWS10R3L +2 , /* X - LENGTH OF THE DATA SECTION     0001C */
    =00031 QWS10R3N +2 , /* X - NUMBER OF DATA SECTIONS        0001E */
    =00033 QWS10R4O +4 , /* R - OFFSET TO THE DATA SECTION     00020 */
    =00037 QWS10R4L +2 , /* X - LENGTH OF THE DATA SECTION     00024 */
    =00039 QWS10R4N +2 , /* X - NUMBER OF DATA SECTIONS        00026 */
    =00041 QWS10R5O +4 , /* R - OFFSET TO THE DATA SECTION     00028 */
    =00045 QWS10R5L +2 , /* X - LENGTH OF THE DATA SECTION     0002C */
    =00047 QWS10R5N +2 , /* X - NUMBER OF DATA SECTIONS        0002E */
    =00049 QWS10R6O +4 , /* R - OFFSET TO THE DATA SECTION     00030 */
    =00053 QWS10R6L +2 , /* X - LENGTH OF THE DATA SECTION     00034 */
    =00055 QWS10R6N +2 , /* X - NUMBER OF DATA SECTIONS        00036 */
    =00057 QWS10R7O +4 , /* R - OFFSET TO THE DATA SECTION     00038 */
    =00061 QWS10R7L +2 , /* X - LENGTH OF THE DATA SECTION     0003C */
    =00063 QWS10R7N +2 , /* X - NUMBER OF DATA SECTIONS        0003E */
    =00065 QWS10R8O +4 , /* R - OFFSET TO THE DATA SECTION     00040 */
    =00069 QWS10R8L +2 , /* X - LENGTH OF THE DATA SECTION     00044 */
    =00071 QWS10R8N +2 , /* X - NUMBER OF DATA SECTIONS        00046 */
    =00073 QWS10R9O +4 , /* R - OFFSET TO THE DATA SECTION     00048 */
    =00077 QWS10R9L +2 , /* X - LENGTH OF THE DATA SECTION     0004C */
    =00079 QWS10R9N +2 , /* X - NUMBER OF DATA SECTIONS        0004E */
    =00081 QWS10RAO +4 , /* R - OFFSET TO THE DATA SECTION     00050 */
    =00085 QWS10RAL +2 , /* X - LENGTH OF THE DATA SECTION     00054 */
    =00087 QWS10RAN +2 , /* X - NUMBER OF DATA SECTIONS        00056 */
    =00089 QWS10RBO +4 , /* X - OFFSET TO THE DATA SECTION     00058 */
    =00093 QWS10RBL +2 , /* X - LENGTH OF THE DATA SECTION     0005C */
    =00095 QWS10RBN +2 , /* X - NUMBER OF DATA SECTIONS        0005E */
,/* =00097 QWS10END +0 ,    C - END OF THE SELF DEFINING SECTI 00060 */
    .           /* End of DSECT */
  /* next byte at 97 */
  hex_QWS10PSO = c2x(QWS10PSO)
  hex_QWS10PSL = c2x(QWS10PSL)
  hex_QWS10PSN = c2x(QWS10PSN)
  hex_QWS10R1O = c2x(QWS10R1O)
  hex_QWS10R1L = c2x(QWS10R1L)
  hex_QWS10R1N = c2x(QWS10R1N)
  hex_QWS10R2O = c2x(QWS10R2O)
  hex_QWS10R2L = c2x(QWS10R2L)
  hex_QWS10R2N = c2x(QWS10R2N)
  hex_QWS10R3O = c2x(QWS10R3O)
  hex_QWS10R3L = c2x(QWS10R3L)
  hex_QWS10R3N = c2x(QWS10R3N)
  hex_QWS10R4O = c2x(QWS10R4O)
  hex_QWS10R4L = c2x(QWS10R4L)
  hex_QWS10R4N = c2x(QWS10R4N)
  hex_QWS10R5O = c2x(QWS10R5O)
  hex_QWS10R5L = c2x(QWS10R5L)
  hex_QWS10R5N = c2x(QWS10R5N)
  hex_QWS10R6O = c2x(QWS10R6O)
  hex_QWS10R6L = c2x(QWS10R6L)
  hex_QWS10R6N = c2x(QWS10R6N)
  hex_QWS10R7O = c2x(QWS10R7O)
  hex_QWS10R7L = c2x(QWS10R7L)
  hex_QWS10R7N = c2x(QWS10R7N)
  hex_QWS10R8O = c2x(QWS10R8O)
  hex_QWS10R8L = c2x(QWS10R8L)
  hex_QWS10R8N = c2x(QWS10R8N)
  hex_QWS10R9O = c2x(QWS10R9O)
  hex_QWS10R9L = c2x(QWS10R9L)
  hex_QWS10R9N = c2x(QWS10R9N)
  hex_QWS10RAO = c2x(QWS10RAO)
  hex_QWS10RAL = c2x(QWS10RAL)
  hex_QWS10RAN = c2x(QWS10RAN)
  hex_QWS10RBO = c2x(QWS10RBO)
  hex_QWS10RBL = c2x(QWS10RBL)
  hex_QWS10RBN = c2x(QWS10RBN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWS1",desired_dsect) > 0)) then do
    void_rc = queue_QWS1_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWS1:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWS1_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWS1:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE PRODUCT SECTIO x:" hex_QWS10PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTIO x:" hex_QWS10PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS   x:" hex_QWS10PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R1N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R2O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R2L
  if ((dec_QWHSIID = 1) | ,
      (dec_QWHSIID = 2)) then do
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R2N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R3O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R3L
  end
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R3N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R4O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R4L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R4N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R5O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R5L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R5N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R6O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R6L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R6N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R7O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R7L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R7N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R8O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R8L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R8N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10R9O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10R9L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10R9N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10RAO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10RAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10RAN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS10RBO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS10RBL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS10RBN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWHC length is 0009C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWHC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWHC,156)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWHC Length: 156"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWHC ,
    =00001 QWHCLEN +2 , /* X - LENGTH OF THE CORRELATION HEADE 00000 */
    =00003 QWHCTYP +1 , /* X - TYPE OF HEADER - CORRELATION =2 00002 */
    =00004 RSVD0001 +1 , /* X - RESERVED                       00003 */
    =00005 QWHCAID +8 , /* C - %U AUTHORIZATION ID             00004 */
    =00013 QWHCCV +12 , /* C - CORRELATION ID  VALUE           0000C */
    =00025 QWHCCN +8 , /* C - CONNECTION NAME (NOT VALID ON EN 00018 */
    =00033 QWHCPLAN +8 , /* C - PLAN NAME                      00020 */
    =00041 QWHCOPID +8 , /* C - %U ORIGINAL OPERATOR ID        00028 */
    =00049 QWHCATYP +4 , /* F - CONNECTING SYSTEM TYPE CODE    00030 */
    =00053 QWHCTOKN +22 , /* C - ACCOUNTING TOKEN              00034 */
    =00075 QWHCRES2 +2 , /* C - RESERVED                       0004A */
    =00077 QWHCEUID +16 , /* C - THE END USER S USERID AT THE  0004C */
    =00093 QWHCEUTX +32 , /* C - THE END USER S TRANSACTION NA 0005C */
    =00125 QWHCEUWN +18 , /* C - THE END USER S WORKSTATION NA 0007C */
    =00143 QWHCAID_Off +2 , /* H - Offset from QWHC to         0008E */
    =00145 QWHCOPID_Off +2 , /* H - Offset from QWHC to        00090 */
    =00147 QWHCEUID_Off +2 , /* H - Offset from QWHC to        00092 */
    =00149 QWHCTCXT_Off +2 , /* H - Offset from QWHC to        00094 */
    =00151 QWHCROLE_Off +2 , /* H - Offset from QWHC to        00096 */
    =00153 QWHCOAUD_Off +2 , /* H - Offset from QWHC to origin 00098 */
    =00155 QWHCCTKN_Off +2 , /* H - Offset from QWHC to        0009A */
,/* =00157 QWHCEND +0 ,    F -                                 0009C */
    =00001 QWHCAID_Len +2 , /* H - Length of the following fie 00000 */
,/* =00003 QWHCAID_Var +0 ,    C - %U AUTHORIZATION ID         00002 */
    =00001 QWHCOPID_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHCOPID_Var +0 ,    C - %U ORIGINAL OPERATOR ID    00002 */
    =00001 QWHCEUID_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHCEUID_Var +0 ,    C - END USER S USERID          00002 */
    =00001 QWHCTCXT_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHCTCXT_Var +0 ,    C - %U Trusted Context name    00002 */
    =00001 QWHCROLE_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHCROLE_Var +0 ,    C - %U Role name associated wi 00002 */
    =00001 QWHCOAUD_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHCOAUD_Var +0 ,    C - %U Original application US 00002 */
    =00001 QWHCCTKN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWHCCTKN_Var +0 ,    C - %U Correlation token.      00002 */
  ,     /* QWHCTSO EQU x'00000001' TSO FOREGROUND AND BACKGROUND     */
  ,     /* QWHCDB2C EQU x'00000002' DB2 CALL ATTACH                  */
  ,     /* QWHCDLIB EQU x'00000003' DL/I BATCH                       */
  ,     /* QWHCCICS EQU x'00000004' CICS ATTACH                      */
  ,     /* QWHCIMSB EQU x'00000005' IMS ATTACH BMP                   */
  ,     /* QWHCIMSM EQU x'00000006' IMS ATTACH MPP                   */
  ,     /* QWHCDUW EQU x'00000007' DB2 PRIVATE PROTOCOL              */
  ,     /* QWHCRUW EQU x'00000008' DRDA PROTOCOL                     */
  ,     /* QWHCICTL EQU x'00000009' IMS CONTROL REGION               */
  ,     /* QWHCTBMP EQU x'0000000A' IMS TRANSACTION BMP              */
  ,     /* QWHCUTIL EQU x'0000000B' DB2 UTILITIES                    */
  ,     /* QWHCTRRS EQU x'0000000C' RRSAF ATTACH                     */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QWHCLEN = c2x(QWHCLEN)
  hex_QWHCTYP = c2x(QWHCTYP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWHCAID = c2x(QWHCAID)
  hex_QWHCCV = c2x(QWHCCV)
  hex_QWHCCN = c2x(QWHCCN)
  hex_QWHCPLAN = c2x(QWHCPLAN)
  hex_QWHCOPID = c2x(QWHCOPID)
  hex_QWHCATYP = c2x(QWHCATYP)
  hex_QWHCTOKN = c2x(QWHCTOKN)
  hex_QWHCRES2 = c2x(QWHCRES2)
  hex_QWHCEUID = c2x(QWHCEUID)
  hex_QWHCEUTX = c2x(QWHCEUTX)
  hex_QWHCEUWN = c2x(QWHCEUWN)
  hex_QWHCAID_Off = c2x(QWHCAID_Off)
  hex_QWHCOPID_Off = c2x(QWHCOPID_Off)
  hex_QWHCEUID_Off = c2x(QWHCEUID_Off)
  hex_QWHCTCXT_Off = c2x(QWHCTCXT_Off)
  hex_QWHCROLE_Off = c2x(QWHCROLE_Off)
  hex_QWHCOAUD_Off = c2x(QWHCOAUD_Off)
  hex_QWHCCTKN_Off = c2x(QWHCCTKN_Off)
  hex_QWHCAID_Len = c2x(QWHCAID_Len)
  hex_QWHCOPID_Len = c2x(QWHCOPID_Len)
  hex_QWHCEUID_Len = c2x(QWHCEUID_Len)
  hex_QWHCTCXT_Len = c2x(QWHCTCXT_Len)
  hex_QWHCROLE_Len = c2x(QWHCROLE_Len)
  hex_QWHCOAUD_Len = c2x(QWHCOAUD_Len)
  hex_QWHCCTKN_Len = c2x(QWHCCTKN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWHC",desired_dsect) > 0)) then do
    void_rc = queue_QWHC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWHC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWHC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWHC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE CORRELATION HE x:" hex_QWHCLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF HEADER - CORRELATION x:" hex_QWHCTYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U AUTHORIZATION ID          x:" hex_QWHCAID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CORRELATION ID  VALUE        x:" hex_QWHCCV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTION NAME (NOT VALID O x:" hex_QWHCCN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QWHCPLAN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U ORIGINAL OPERATOR ID      x:" hex_QWHCOPID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTING SYSTEM TYPE CODE  x:" hex_QWHCATYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCOUNTING TOKEN             x:" hex_QWHCTOKN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QWHCRES2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE END USER S USERID AT THE x:" hex_QWHCEUID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE END USER S TRANSACTION N x:" hex_QWHCEUTX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE END USER S WORKSTATION N x:" hex_QWHCEUWN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to          x:" hex_QWHCAID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to          x:" hex_QWHCOPID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to          x:" hex_QWHCEUID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to          x:" hex_QWHCTCXT_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to          x:" hex_QWHCROLE_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to original x:" hex_QWHCOAUD_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWHC to          x:" hex_QWHCCTKN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCAID_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCOPID_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCEUID_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCTCXT_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCROLE_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCOAUD_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWHCCTKN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWHT length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWHT:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWHT,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWHT Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWHT ,
    =00001 QWHTLEN +2 , /* X - LENGTH OF  HEADER               00000 */
    =00003 QWHTTYP +1 , /* X - TYPE OF HEADER - TRACE          00002 */
    =00004 QWHTFLG0 +1 , /* X - FLAGS                          00003 */
  ,     /* QWHTALFG EQU x'00000020' ON - DATA USES ALET TOKEN        */
    =00005 QWHTTID +2 , /* H - ID SPECIFIED DSNWTRC MACRO      00004 */
    =00007 QWHTTAG +1 , /* X - TAG SPECIFIED DSNWTRC MACRO     00006 */
    =00008 QWHTFUNC +1 , /* X - FUNC SPECIFIED DSNWTRC MACRO   00007 */
    =00009 QWHTEB +4 , /* A - EB ADDRESS                       00008 */
    =00013 QWHTPASI +2 , /* H - PASID - EPAR                   0000C */
    =00015 QWHTR14A +2 , /* H - REGISTER 14 ASID               0000E */
    =00017 QWHTR14 +4 , /* F - REGISTER 14                     00010 */
    =00021 QWHTR15 +4 , /* F - REGISTER 15                     00014 */
    =00025 QWHTR0 +4 , /* F - REGISTER 0                       00018 */
    =00029 QWHTR1 +4 , /* F - REGISTER 1                       0001C */
    =00033 QWHTEXU +4 , /* A - ADDRESS OF MVS EXECUTION UNIT   00020 */
    =00037 QWHTDIM +2 , /* H - NUMBER OF DATA ITEMS            00024 */
    =00039 QWHTHASI +2 , /* H - HOME ASID                      00026 */
    =00041 QWHTDATA +4 , /* A - ADDRESS OF THE DATA            00028 */
    =00045 QWHTFLAG +2 , /* H - FLAGS IN THE TRACE LIST        0002C */
    =00047 QWHTDATL +2 , /* H - LENGTH  OF THE DATA            0002E */
,/* =00049 QWHTEND +0 ,    F -                                 00030 */
  ,
  ,/*00048 __no__name__ ORG - QWHTEND - x'00000030' ALET: 4TH  00030 */
    =00049 QWHTALET +4 , /* F - ALET TOKEN FOR DATA FIELD      00030 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QWHTLEN = c2x(QWHTLEN)
  hex_QWHTTYP = c2x(QWHTTYP)
  hex_QWHTFLG0 = c2x(QWHTFLG0)
  hex_QWHTTID = c2x(QWHTTID)
  hex_QWHTTAG = c2x(QWHTTAG)
  hex_QWHTFUNC = c2x(QWHTFUNC)
  hex_QWHTEB = c2x(QWHTEB)
  hex_QWHTPASI = c2x(QWHTPASI)
  hex_QWHTR14A = c2x(QWHTR14A)
  hex_QWHTR14 = c2x(QWHTR14)
  hex_QWHTR15 = c2x(QWHTR15)
  hex_QWHTR0 = c2x(QWHTR0)
  hex_QWHTR1 = c2x(QWHTR1)
  hex_QWHTEXU = c2x(QWHTEXU)
  hex_QWHTDIM = c2x(QWHTDIM)
  hex_QWHTHASI = c2x(QWHTHASI)
  hex_QWHTDATA = c2x(QWHTDATA)
  hex_QWHTFLAG = c2x(QWHTFLAG)
  hex_QWHTDATL = c2x(QWHTDATL)
  hex_QWHTALET = c2x(QWHTALET)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWHT",desired_dsect) > 0)) then do
    void_rc = queue_QWHT_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWHT:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWHT_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWHT:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF  HEADER            x:" hex_QWHTLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF HEADER - TRACE       x:" hex_QWHTTYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QWHTFLG0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ID SPECIFIED DSNWTRC MACRO   x:" hex_QWHTTID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TAG SPECIFIED DSNWTRC MACRO  x:" hex_QWHTTAG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNC SPECIFIED DSNWTRC MACRO x:" hex_QWHTFUNC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EB ADDRESS                   x:" hex_QWHTEB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PASID - EPAR                 x:" hex_QWHTPASI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REGISTER 14 ASID             x:" hex_QWHTR14A
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REGISTER 14                  x:" hex_QWHTR14
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REGISTER 15                  x:" hex_QWHTR15
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REGISTER 0                   x:" hex_QWHTR0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REGISTER 1                   x:" hex_QWHTR1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF MVS EXECUTION UNI x:" hex_QWHTEXU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA ITEMS         x:" hex_QWHTDIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOME ASID                    x:" hex_QWHTHASI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF THE DATA          x:" hex_QWHTDATA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS IN THE TRACE LIST      x:" hex_QWHTFLAG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH  OF THE DATA          x:" hex_QWHTDATL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ALET TOKEN FOR DATA FIELD    x:" hex_QWHTALET
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQXST length is 00220
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQXST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQXST,544)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQXST Length: 544"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQXST ,
,/* =00001 QXST +0 ,    D - RDS ACCOUNTING AREA                00000 */
,/* =00001 QXHEAD +0 ,    F - CONTROL BLOCK HEADER             00000 */
    =00001 QXID +2 , /* H - CONTROL BLOCK ID                   00000 */
    =00003 QXLEN +2 , /* H - CONTROL BLOCK LENGTH              00002 */
    =00005 QXEYE +4 , /* C - CONTROL BLOCK EYE CATCHER         00004 */
,/* =00009 STMT +0 ,    F - OVERLAY ON QXSTATS                 00008 */
,/* =00009 QXSTATS +0 ,    F - ACCOUNTING STATISTICS           00008 */
    =00009 QXSELECT +4 , /* F - # OF SELECTS                   00008 */
    =00013 QXINSRT +4 , /* F - # OF INSERTS                    0000C */
    =00017 QXUPDTE +4 , /* F - # OF UPDATES                    00010 */
    =00021 QXDELET +4 , /* F - # OF DELETES                    00014 */
    =00025 QXDESC +4 , /* F - # OF DESCRIBES                   00018 */
    =00029 QXPREP +4 , /* F - # OF PREPARES                    0001C */
    =00033 QXOPEN +4 , /* F - # OF OPENS                       00020 */
    =00037 QXCLOSE +4 , /* F - # OF CLOSES                     00024 */
    =00041 QXCRTAB +4 , /* F - # OF CREATE TABLE               00028 */
    =00045 QXCRINX +4 , /* F - # OF CREATE INDEX               0002C */
    =00049 QXCTABS +4 , /* F - # OF CREATE TABLESPACE          00030 */
    =00053 QXCRSYN +4 , /* F - # OF CREATE SYNONYM             00034 */
    =00057 QXCRDAB +4 , /* F - # OF CREATE DATABASE            00038 */
    =00061 QXCRSTG +4 , /* F - # OF CREATE STORAGE GROUP       0003C */
    =00065 QXDEFVU +4 , /* F - # OF CREATE VIEW                00040 */
    =00069 QXDRPIX +4 , /* F - # OF DROP INDEX                 00044 */
    =00073 QXDRPTA +4 , /* F - # OF DROP TABLE                 00048 */
    =00077 QXDRPTS +4 , /* F - # OF DROP TABLESPACE            0004C */
    =00081 QXDRPDB +4 , /* F - # OF DROP DATABASE              00050 */
    =00085 QXDRPSY +4 , /* F - # OF DROP SYNONYM               00054 */
    =00089 QXDRPST +4 , /* F - # OF DROP STORAGE GROUP         00058 */
    =00093 QXDRPVU +4 , /* F - # OF DROP VIEW                  0005C */
    =00097 QXALTST +4 , /* F - # OF ALTER STORAGE GROUP        00060 */
    =00101 QXFETCH +4 , /* F - # OF FETCHS                     00064 */
    =00105 QXALTTS +4 , /* F - # OF ALTER TABLESPACE           00068 */
    =00109 QXALTTA +4 , /* F - # OF ALTER TABLE                0006C */
    =00113 QXALTIX +4 , /* F - # OF ALTER INDEX                00070 */
    =00117 QXCMTON +4 , /* F - # OF COMMENT ON                 00074 */
    =00121 QXLOCK +4 , /* F - # OF LOCK TABLE                  00078 */
    =00125 QXGRANT +4 , /* F - # OF GRANT                      0007C */
    =00129 QXREVOK +4 , /* F - # OF REVOKE                     00080 */
    =00133 QXINCRB +4 , /* F - # OF INCREMENTAL BINDS EXCLUDIN 00084 */
    =00137 QXLABON +4 , /* F - # OF LABEL ON                   00088 */
    =00141 QXSETSQL +4 , /* F - # OF Set Current SQLID         0008C */
    =00145 QXCRALS +4 , /* F - # OF CREATE ALIAS               00090 */
    =00149 QXDRPAL +4 , /* F - # OF DROP ALIAS                 00094 */
    =00153 QXMIAP +4 , /* F - # of times RID list processing u 00098 */
    =00157 QXNSMIAP +4 , /* F - # of times a RID list was not  0009C */
    =00161 QXMRMIAP +4 , /* F - # of times one or more RID lis 000A0 */
    =00165 QXSETHV +4 , /* F - # OF Set Host-Variable statemen 000A4 */
    =00169 QXALDAB +4 , /* F - # OF ALTER DATABASE             000A8 */
    =00173 QXDRPPKG +4 , /* F - # OF DROP PACKAGE STATEMENTS   000AC */
    =00177 QXDSCRTB +4 , /* F - # OF DESCRIBE TABLE STATEMENTS 000B0 */
    =00181 QXMAXDEG +4 , /* F - Maximum degree of parallelism  000B4 */
    =00185 QXTOTGRP +4 , /* F - Total number of parallel group 000B8 */
    =00189 QXDEGCUR +4 , /* F - Total number pf parallel group 000BC */
    =00193 QXDEGESA +4 , /* F - Total number of parallel group 000C0 */
    =00197 QXDEGBUF +4 , /* F - Total number of parallel group 000C4 */
    =00201 QXREDGRP +4 , /* F - Total number of parallel group 000C8 */
    =00205 QXNORGRP +4 , /* F - Total number of parallel group 000CC */
    =00209 QXCON1 +4 , /* F - # of CONNECT type 1 statements e 000D0 */
    =00213 QXCON2 +4 , /* F - # of CONNECT type 2 statements e 000D4 */
    =00217 QXREL +4 , /* F - # of RELEASE statements executed  000D8 */
    =00221 QXSETCON +4 , /* F - # of SET CONNECTION statements 000DC */
    =00225 QXSETCDG +4 , /* F - # of SET CURRENT DEGREE statem 000E0 */
    =00229 QXSETCRL +4 , /* F - # of SET CURRENT RULES stateme 000E4 */
    =00233 QXCALL +4 , /* F - # of SQL CALL statements execute 000E8 */
    =00237 QXCALLAB +4 , /* F - # of times a stored procedure  000EC */
    =00241 QXCALLTO +4 , /* F - # of times an SQL CALL stateme 000F0 */
    =00245 QXCALLRJ +4 , /* F - # of times an SQL CALL stateme 000F4 */
    =00249 QXDEGENC +4 , /* F - Total number of parallel group 000F8 */
    =00253 QXRLFDPA +1 , /* X - If non-zero, then Query Parall 000FC */
    =00254 RSVD0001 +3 , /* X - Reserved bytes                 000FD */
    =00257 QXCOORNO +4 , /* F - Total number of parallel group 00100 */
    =00261 QXISORR +4 , /* F - Total number of parallel groups 00104 */
    =00265 QXCRGTT +4 , /* F - # OF CREATE GLOBAL TEMPORARY TA 00108 */
    =00269 QXSTREOP +4 , /* F - Total number of times reoptimi 0010C */
    =00273 QXXCBPNX +4 , /* F - Total number of parallel group 00110 */
    =00277 QXXCSKIP +4 , /* F - The number of times that the p 00114 */
    =00281 QXALOCL +4 , /* F - Number of ASSOCIATE LOCATOR sta 00118 */
    =00285 QXALOCC +4 , /* F - Number of ALLOCATE CURSOR state 0011C */
    =00289 QXSTFND +4 , /* F - The number of times a PREPARE r 00120 */
    =00293 QXSTNFND +4 , /* F - The number of times a PREPARE  00124 */
    =00297 QXSTIPRP +4 , /* F - The number of times that an im 00128 */
    =00301 QXSTNPRP +4 , /* F - The number of times that a pre 0012C */
    =00305 QXSTDEXP +4 , /* F - The number of times that an ap 00130 */
    =00309 QXSTDINV +4 , /* F - The number of times that a pre 00134 */
    =00313 QXRNTAB +4 , /* F - # OF RENAME TABLE               00138 */
    =00317 QXCTRIG +4 , /* F - # OF CREATE TRIGGER             0013C */
    =00321 QXDRPTR +4 , /* F - # OF DROP TRIGGER               00140 */
    =00325 QXSETPTH +4 , /* F - # OF SET CURRENT PATH statemen 00144 */
    =00329 QXDRPFN +4 , /* F - # OF DROP USER DEFINED FUNCTION 00148 */
    =00333 QXDRPPR +4 , /* F - # OF DROP PROCEDURE             0014C */
    =00337 QXCDIST +4 , /* F - # OF CREATE DISTINCT TYPE state 00150 */
    =00341 QXDDIST +4 , /* F - # OF DROP   DISTINCT TYPE state 00154 */
    =00345 QXCRUDF +4 , /* F - # OF CREATE FUNCTION statements 00158 */
    =00349 QXCRPRO +4 , /* F - # OF CREATE PROCEDURE statement 0015C */
    =00353 QXHOLDL +4 , /* F - # OF HOLD LOCATOR statements    00160 */
    =00357 QXFREEL +4 , /* F - # OF FREE LOCATOR statements    00164 */
    =00361 QXREPOP1 +4 , /* F - Total number of parallel group 00168 */
    =00365 QXREPOP2 +4 , /* F - Total number of parallel group 0016C */
    =00369 QXCRATB +4 , /* F - # OF CREATE AUX TABLE statement 00170 */
    =00373 QXSTLOBV +4 , /* F - Max storage used for LOB value 00174 */
    =00377 QXALUDF +4 , /* F - # OF ALTER FUNCTION statements  00178 */
    =00381 QXALPRO +4 , /* F - # OF ALTER PROCEDURE statements 0017C */
    =00385 QXROIMAT +4 , /* F - # of times that direct row acc 00180 */
    =00389 QXROIIDX +4 , /* F - # of times an attempt to use d 00184 */
    =00393 QXROITS +4 , /* F - # of times an attempt to use di 00188 */
    =00397 QXSTTRG +4 , /* F - # of times a statement trigger  0018C */
    =00401 QXROWTRG +4 , /* F - # of times a row trigger was a 00190 */
    =00405 QXTRGERR +4 , /* F - # of times an SQL error occurr 00194 */
    =00409 QXCASCDP +4 , /* F - The maximum level of nested SQ 00198 */
    =00413 QXCAUD +4 , /* F - # of user defined functions exec 0019C */
    =00417 QXCAUDAB +4 , /* F - # of times a UDF ABENDed       001A0 */
    =00421 QXCAUDTO +4 , /* F - # of times a UDF timed out wai 001A4 */
    =00425 QXCAUDRJ +4 , /* F - # of times a UDF was rejected  001A8 */
    =00429 QXSETCPR +4 , /* F - # SET CURRENT PRECISION statem 001AC */
    =00433 QXDCLGTT +4 , /* F - # of DECLARE GLOBAL TEMPORARY  001B0 */
    =00437 QXDEGDTT +4 , /* F - Total number of parallel group 001B4 */
    =00441 QXCRESEQ +4 , /* F - # OF CREATE SEQUENCES          001B8 */
    =00445 QXALTSEQ +4 , /* F - # OF ALTER SEQUENCES           001BC */
    =00449 QXDROSEQ +4 , /* F - # OF DROP SEQUENCES            001C0 */
    =00453 QXPRRESI +4 , /* F - # of PREPAREs for which use of 001C4 */
    =00457 QXALTVW +4 , /* F - # of ALTER VIEW                 001C8 */
    =00461 QXALTJR +4 , /* F - # OF ALTER JAR                  001CC */
    =00465 QXMERGE +4 , /* F - # OF times MERGE statement was  001D0 */
    =00469 QXTRTBL +4 , /* F - # of times TRUNCATE TABLE was e 001D4 */
    =00473 QXCRROL +4 , /* F - # OF CREATE ROLE                001D8 */
    =00477 QXDRPROL +4 , /* F - # OF DROP ROLE                 001DC */
    =00481 QXCRCTX +4 , /* F - # OF CREATE TRUSTED CONTEXT     001E0 */
    =00485 QXALTCTX +4 , /* F - # OF ALTER TRUSTED CONTEXT     001E4 */
    =00489 QXDRPCTX +4 , /* F - # OF DROP  TRUSTED CONTEXT     001E8 */
    =00493 QXRNIX +4 , /* F - # OF RENAME INDEX                001EC */
    =00497 QXSTXMLV +4 , /* F - # Max storage used for XML val 001F0 */
    =00501 RSVD0002 +4 , /* F - # Alignment                    001F4 */
    =00505 QXRWSFETCHD +8 , /* X - #  Number of Rows Fetched   001F8 */
    =00513 QXRWSINSRTD +8 , /* X - #  Number of Rows Inserted  00200 */
    =00521 QXRWSUPDTD +8 , /* X - #  Number of Rows Updated    00208 */
    =00529 QXRWSDELETD +8 , /* X - #  Number of Rows Deleted   00210 */
    =00537 QXACCEL +4 , /* F - # of times Acceleration used    00218 */
    =00541 QXACCELF +4 , /* F - # of times Acceleration failed 0021C */
,/* =00545 QXSTEND +0 ,    F - END OF RDS ACCOUNTING AREA      00220 */
    .           /* End of DSECT */
  /* next byte at 545 */
  hex_QXID = c2x(QXID)
  hex_QXLEN = c2x(QXLEN)
  hex_QXEYE = c2x(QXEYE)
  hex_QXSELECT = c2x(QXSELECT)
  hex_QXINSRT = c2x(QXINSRT)
  hex_QXUPDTE = c2x(QXUPDTE)
  hex_QXDELET = c2x(QXDELET)
  hex_QXDESC = c2x(QXDESC)
  hex_QXPREP = c2x(QXPREP)
  hex_QXOPEN = c2x(QXOPEN)
  hex_QXCLOSE = c2x(QXCLOSE)
  hex_QXCRTAB = c2x(QXCRTAB)
  hex_QXCRINX = c2x(QXCRINX)
  hex_QXCTABS = c2x(QXCTABS)
  hex_QXCRSYN = c2x(QXCRSYN)
  hex_QXCRDAB = c2x(QXCRDAB)
  hex_QXCRSTG = c2x(QXCRSTG)
  hex_QXDEFVU = c2x(QXDEFVU)
  hex_QXDRPIX = c2x(QXDRPIX)
  hex_QXDRPTA = c2x(QXDRPTA)
  hex_QXDRPTS = c2x(QXDRPTS)
  hex_QXDRPDB = c2x(QXDRPDB)
  hex_QXDRPSY = c2x(QXDRPSY)
  hex_QXDRPST = c2x(QXDRPST)
  hex_QXDRPVU = c2x(QXDRPVU)
  hex_QXALTST = c2x(QXALTST)
  hex_QXFETCH = c2x(QXFETCH)
  hex_QXALTTS = c2x(QXALTTS)
  hex_QXALTTA = c2x(QXALTTA)
  hex_QXALTIX = c2x(QXALTIX)
  hex_QXCMTON = c2x(QXCMTON)
  hex_QXLOCK = c2x(QXLOCK)
  hex_QXGRANT = c2x(QXGRANT)
  hex_QXREVOK = c2x(QXREVOK)
  hex_QXINCRB = c2x(QXINCRB)
  hex_QXLABON = c2x(QXLABON)
  hex_QXSETSQL = c2x(QXSETSQL)
  hex_QXCRALS = c2x(QXCRALS)
  hex_QXDRPAL = c2x(QXDRPAL)
  hex_QXMIAP = c2x(QXMIAP)
  hex_QXNSMIAP = c2x(QXNSMIAP)
  hex_QXMRMIAP = c2x(QXMRMIAP)
  hex_QXSETHV = c2x(QXSETHV)
  hex_QXALDAB = c2x(QXALDAB)
  hex_QXDRPPKG = c2x(QXDRPPKG)
  hex_QXDSCRTB = c2x(QXDSCRTB)
  hex_QXMAXDEG = c2x(QXMAXDEG)
  hex_QXTOTGRP = c2x(QXTOTGRP)
  hex_QXDEGCUR = c2x(QXDEGCUR)
  hex_QXDEGESA = c2x(QXDEGESA)
  hex_QXDEGBUF = c2x(QXDEGBUF)
  hex_QXREDGRP = c2x(QXREDGRP)
  hex_QXNORGRP = c2x(QXNORGRP)
  hex_QXCON1 = c2x(QXCON1)
  hex_QXCON2 = c2x(QXCON2)
  hex_QXREL = c2x(QXREL)
  hex_QXSETCON = c2x(QXSETCON)
  hex_QXSETCDG = c2x(QXSETCDG)
  hex_QXSETCRL = c2x(QXSETCRL)
  hex_QXCALL = c2x(QXCALL)
  hex_QXCALLAB = c2x(QXCALLAB)
  hex_QXCALLTO = c2x(QXCALLTO)
  hex_QXCALLRJ = c2x(QXCALLRJ)
  hex_QXDEGENC = c2x(QXDEGENC)
  hex_QXRLFDPA = c2x(QXRLFDPA)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QXCOORNO = c2x(QXCOORNO)
  hex_QXISORR = c2x(QXISORR)
  hex_QXCRGTT = c2x(QXCRGTT)
  hex_QXSTREOP = c2x(QXSTREOP)
  hex_QXXCBPNX = c2x(QXXCBPNX)
  hex_QXXCSKIP = c2x(QXXCSKIP)
  hex_QXALOCL = c2x(QXALOCL)
  hex_QXALOCC = c2x(QXALOCC)
  hex_QXSTFND = c2x(QXSTFND)
  hex_QXSTNFND = c2x(QXSTNFND)
  hex_QXSTIPRP = c2x(QXSTIPRP)
  hex_QXSTNPRP = c2x(QXSTNPRP)
  hex_QXSTDEXP = c2x(QXSTDEXP)
  hex_QXSTDINV = c2x(QXSTDINV)
  hex_QXRNTAB = c2x(QXRNTAB)
  hex_QXCTRIG = c2x(QXCTRIG)
  hex_QXDRPTR = c2x(QXDRPTR)
  hex_QXSETPTH = c2x(QXSETPTH)
  hex_QXDRPFN = c2x(QXDRPFN)
  hex_QXDRPPR = c2x(QXDRPPR)
  hex_QXCDIST = c2x(QXCDIST)
  hex_QXDDIST = c2x(QXDDIST)
  hex_QXCRUDF = c2x(QXCRUDF)
  hex_QXCRPRO = c2x(QXCRPRO)
  hex_QXHOLDL = c2x(QXHOLDL)
  hex_QXFREEL = c2x(QXFREEL)
  hex_QXREPOP1 = c2x(QXREPOP1)
  hex_QXREPOP2 = c2x(QXREPOP2)
  hex_QXCRATB = c2x(QXCRATB)
  hex_QXSTLOBV = c2x(QXSTLOBV)
  hex_QXALUDF = c2x(QXALUDF)
  hex_QXALPRO = c2x(QXALPRO)
  hex_QXROIMAT = c2x(QXROIMAT)
  hex_QXROIIDX = c2x(QXROIIDX)
  hex_QXROITS = c2x(QXROITS)
  hex_QXSTTRG = c2x(QXSTTRG)
  hex_QXROWTRG = c2x(QXROWTRG)
  hex_QXTRGERR = c2x(QXTRGERR)
  hex_QXCASCDP = c2x(QXCASCDP)
  hex_QXCAUD = c2x(QXCAUD)
  hex_QXCAUDAB = c2x(QXCAUDAB)
  hex_QXCAUDTO = c2x(QXCAUDTO)
  hex_QXCAUDRJ = c2x(QXCAUDRJ)
  hex_QXSETCPR = c2x(QXSETCPR)
  hex_QXDCLGTT = c2x(QXDCLGTT)
  hex_QXDEGDTT = c2x(QXDEGDTT)
  hex_QXCRESEQ = c2x(QXCRESEQ)
  hex_QXALTSEQ = c2x(QXALTSEQ)
  hex_QXDROSEQ = c2x(QXDROSEQ)
  hex_QXPRRESI = c2x(QXPRRESI)
  hex_QXALTVW = c2x(QXALTVW)
  hex_QXALTJR = c2x(QXALTJR)
  hex_QXMERGE = c2x(QXMERGE)
  hex_QXTRTBL = c2x(QXTRTBL)
  hex_QXCRROL = c2x(QXCRROL)
  hex_QXDRPROL = c2x(QXDRPROL)
  hex_QXCRCTX = c2x(QXCRCTX)
  hex_QXALTCTX = c2x(QXALTCTX)
  hex_QXDRPCTX = c2x(QXDRPCTX)
  hex_QXRNIX = c2x(QXRNIX)
  hex_QXSTXMLV = c2x(QXSTXMLV)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QXRWSFETCHD = c2x(QXRWSFETCHD)
  hex_QXRWSINSRTD = c2x(QXRWSINSRTD)
  hex_QXRWSUPDTD = c2x(QXRWSUPDTD)
  hex_QXRWSDELETD = c2x(QXRWSDELETD)
  hex_QXACCEL = c2x(QXACCEL)
  hex_QXACCELF = c2x(QXACCELF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQXST",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQXST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQXST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQXST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQXST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK ID             x:" hex_QXID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QXLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EYE CATCHER    x:" hex_QXEYE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SELECTS                 x:" hex_QXSELECT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF INSERTS                 x:" hex_QXINSRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF UPDATES                 x:" hex_QXUPDTE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DELETES                 x:" hex_QXDELET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DESCRIBES               x:" hex_QXDESC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PREPARES                x:" hex_QXPREP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF OPENS                   x:" hex_QXOPEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CLOSES                  x:" hex_QXCLOSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE TABLE            x:" hex_QXCRTAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE INDEX            x:" hex_QXCRINX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE TABLESPACE       x:" hex_QXCTABS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE SYNONYM          x:" hex_QXCRSYN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE DATABASE         x:" hex_QXCRDAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE STORAGE GROUP    x:" hex_QXCRSTG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE VIEW             x:" hex_QXDEFVU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP INDEX              x:" hex_QXDRPIX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP TABLE              x:" hex_QXDRPTA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP TABLESPACE         x:" hex_QXDRPTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP DATABASE           x:" hex_QXDRPDB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP SYNONYM            x:" hex_QXDRPSY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP STORAGE GROUP      x:" hex_QXDRPST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP VIEW               x:" hex_QXDRPVU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER STORAGE GROUP     x:" hex_QXALTST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FETCHS                  x:" hex_QXFETCH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER TABLESPACE        x:" hex_QXALTTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER TABLE             x:" hex_QXALTTA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER INDEX             x:" hex_QXALTIX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF COMMENT ON              x:" hex_QXCMTON
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LOCK TABLE              x:" hex_QXLOCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF GRANT                   x:" hex_QXGRANT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF REVOKE                  x:" hex_QXREVOK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF INCREMENTAL BINDS EXCLU x:" hex_QXINCRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LABEL ON                x:" hex_QXLABON
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF Set Current SQLID       x:" hex_QXSETSQL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE ALIAS            x:" hex_QXCRALS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP ALIAS              x:" hex_QXDRPAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times RID list processi x:" hex_QXMIAP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a RID list was no x:" hex_QXNSMIAP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times one or more RID l x:" hex_QXMRMIAP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF Set Host-Variable state x:" hex_QXSETHV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER DATABASE          x:" hex_QXALDAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP PACKAGE STATEMENTS x:" hex_QXDRPPKG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DESCRIBE TABLE STATEMEN x:" hex_QXDSCRTB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum degree of parallelis x:" hex_QXMAXDEG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXTOTGRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number pf parallel gro x:" hex_QXDEGCUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXDEGESA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXDEGBUF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXREDGRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXNORGRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of CONNECT type 1 statemen x:" hex_QXCON1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of CONNECT type 2 statemen x:" hex_QXCON2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of RELEASE statements exec x:" hex_QXREL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SET CONNECTION statemen x:" hex_QXSETCON
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SET CURRENT DEGREE stat x:" hex_QXSETCDG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SET CURRENT RULES state x:" hex_QXSETCRL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SQL CALL statements exe x:" hex_QXCALL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a stored procedur x:" hex_QXCALLAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times an SQL CALL state x:" hex_QXCALLTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times an SQL CALL state x:" hex_QXCALLRJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXDEGENC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If non-zero, then Query Para x:" hex_QXRLFDPA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved bytes               x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXCOORNO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXISORR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE GLOBAL TEMPORARY x:" hex_QXCRGTT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of times reopti x:" hex_QXSTREOP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXXCBPNX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times that the x:" hex_QXXCSKIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of ASSOCIATE LOCATOR  x:" hex_QXALOCL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of ALLOCATE CURSOR st x:" hex_QXALOCC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times a PREPAR x:" hex_QXSTFND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times a PREPAR x:" hex_QXSTNFND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times that an  x:" hex_QXSTIPRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times that a p x:" hex_QXSTNPRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times that an  x:" hex_QXSTDEXP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of times that a p x:" hex_QXSTDINV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF RENAME TABLE            x:" hex_QXRNTAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE TRIGGER          x:" hex_QXCTRIG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP TRIGGER            x:" hex_QXDRPTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SET CURRENT PATH statem x:" hex_QXSETPTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP USER DEFINED FUNCT x:" hex_QXDRPFN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP PROCEDURE          x:" hex_QXDRPPR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE DISTINCT TYPE st x:" hex_QXCDIST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP   DISTINCT TYPE st x:" hex_QXDDIST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE FUNCTION stateme x:" hex_QXCRUDF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE PROCEDURE statem x:" hex_QXCRPRO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF HOLD LOCATOR statements x:" hex_QXHOLDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FREE LOCATOR statements x:" hex_QXFREEL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXREPOP1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXREPOP2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE AUX TABLE statem x:" hex_QXCRATB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max storage used for LOB val x:" hex_QXSTLOBV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER FUNCTION statemen x:" hex_QXALUDF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER PROCEDURE stateme x:" hex_QXALPRO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times that direct row a x:" hex_QXROIMAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times an attempt to use x:" hex_QXROIIDX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times an attempt to use x:" hex_QXROITS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a statement trigg x:" hex_QXSTTRG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a row trigger was x:" hex_QXROWTRG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times an SQL error occu x:" hex_QXTRGERR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The maximum level of nested  x:" hex_QXCASCDP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of user defined functions  x:" hex_QXCAUD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a UDF ABENDed     x:" hex_QXCAUDAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a UDF timed out w x:" hex_QXCAUDTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times a UDF was rejecte x:" hex_QXCAUDRJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # SET CURRENT PRECISION stat x:" hex_QXSETCPR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of DECLARE GLOBAL TEMPORAR x:" hex_QXDCLGTT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of parallel gro x:" hex_QXDEGDTT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE SEQUENCES        x:" hex_QXCRESEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER SEQUENCES         x:" hex_QXALTSEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP SEQUENCES          x:" hex_QXDROSEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of PREPAREs for which use  x:" hex_QXPRRESI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of ALTER VIEW              x:" hex_QXALTVW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER JAR               x:" hex_QXALTJR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF times MERGE statement w x:" hex_QXMERGE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times TRUNCATE TABLE wa x:" hex_QXTRTBL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE ROLE             x:" hex_QXCRROL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP ROLE               x:" hex_QXDRPROL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CREATE TRUSTED CONTEXT  x:" hex_QXCRCTX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ALTER TRUSTED CONTEXT   x:" hex_QXALTCTX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DROP  TRUSTED CONTEXT   x:" hex_QXDRPCTX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF RENAME INDEX            x:" hex_QXRNIX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Max storage used for XML v x:" hex_QXSTXMLV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Alignment                  x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #  Number of Rows Fetched    x:" hex_QXRWSFETCHD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #  Number of Rows Inserted   x:" hex_QXRWSINSRTD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #  Number of Rows Updated    x:" hex_QXRWSUPDTD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #  Number of Rows Deleted    x:" hex_QXRWSDELETD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times Acceleration used x:" hex_QXACCEL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times Acceleration fail x:" hex_QXACCELF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQTST length is 00100
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQTST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQTST,256)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQTST Length: 256"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQTST ,
,/* =00001 QTST +0 ,    D -                                    00000 */
,/* =00001 QTHEAD +0 ,    F - CONTROL BLOCK HEADER             00000 */
    =00001 QTID +2 , /* H - CONTROL BLOCK ID                   00000 */
    =00003 QTLEN +2 , /* H - CONTROL BLOCK LENGTH              00002 */
    =00005 QTEYE +4 , /* C - CONTROL BLOCK EYE CATCHER         00004 */
,/* =00009 QTSTATS +0 ,    F - STATISTICS                      00008 */
    =00009 QTALLOCA +4 , /* F - ALLOCATION ATTEMPTS            00008 */
    =00013 QTALLOC +4 , /* F - SUCCESSFUL ALLOCATIONS          0000C */
    =00017 QTABINDA +4 , /* F - AUTOMATIC BIND ATTEMPTS        00010 */
    =00021 QTABIND +4 , /* F - SUCCESSFUL AUTOMATIC BINDS      00014 */
    =00025 QTINVRID +4 , /* F - INVALID RESOURCE-IDS           00018 */
    =00029 QTBINDA +4 , /* F - BIND (ADD) SUB-COMMANDS         0001C */
    =00033 QTBINDR +4 , /* F - BIND (REPLACE) SUB-COMMANDS     00020 */
    =00037 QTTESTB +4 , /* F - TEST BINDS (NO PLAN-ID)         00024 */
    =00041 QTPLNBD +4 , /* F - PLANS BOUND                     00028 */
    =00045 QTREBIND +4 , /* F - REBIND SUB-COMMANDS            0002C */
    =00049 QTRBINDA +4 , /* F - ATTEMPTS TO REBIND A PLAN      00030 */
    =00053 QTPLNRBD +4 , /* F - PLANS REBOUND                  00034 */
    =00057 QTFREE +4 , /* F - FREE SUB-COMMANDS                00038 */
    =00061 QTFREEA +4 , /* F - ATTEMPTS TO FREE A PLAN         0003C */
    =00065 QTPLNFRD +4 , /* F - PLANS FREED                    00040 */
    =00069 QTAUCHK +4 , /* F - TOTAL NUMBER OF AUTHORIZATION C 00044 */
    =00073 QTAUSUC +4 , /* F - TOTAL NUMBER OF SUCCESSFUL AUTH 00048 */
    =00077 QTDSOPN +4 , /* F - NUMBER OF DATASETS CURRENTLY OP 0004C */
    =00081 QTMAXDS +4 , /* F - MAXIMUM NUMBER OF DS OPENED CON 00050 */
    =00085 QTAUCCH +4 , /* F - #SUCCESSFUL AUTH CHECKS FOR PLA 00054 */
    =00089 QTAUPUB +4 , /* F - #SUCCESSFUL AUTH CHECKS FOR PLA 00058 */
    =00093 QTMAXPB +4 , /* F - MAXIMUM NOT IN-USE DATA SETS    0005C */
    =00097 QTPACAUT +4 , /* F - #SUCCESSFUL AUTH CHECKS FOR PA 00060 */
    =00101 QTPACPUB +4 , /* F - #SUCCESSFUL AUTH CHECKS FOR PA 00064 */
    =00105 QTPACNOT +4 , /* F - #PACKAGE AUTH CHECKS THAT COUL 00068 */
    =00109 QTREOPN +4 , /* F - # OF TIMES THAT NOT IN-USE OPEN 0006C */
    =00113 QTPACOW1 +4 , /* F - # OF TIMES DB2 OVERWROTE AN AU 00070 */
    =00117 QTPACOW2 +4 , /* F - # OF TIMES DB2 OVERWROTE A PAC 00074 */
    =00121 RSVD0001 +4 , /* C - RESERVED                       00078 */
    =00125 QTDSDRN +4 , /* F - # OF NOT IN-USE DATA SETS CLOSE 0007C */
    =00129 QTPCCT +4 , /* F - # OF INFREQUENTLY UPDATED DATA   00080 */
    =00133 QTSLWDD +4 , /* F - # OF DATA SETS THAT ARE NOT     00084 */
    =00137 QTBINDPA +4 , /* F - BIND (ADD) PACKAGE SUB-COMMAND 00088 */
    =00141 QTBINDPR +4 , /* F - BIND (REP) PACKAGE SUB-COMMAND 0008C */
    =00145 QTPKGBD +4 , /* F - # PACKAGES BOUND                00090 */
    =00149 QTRBINDP +4 , /* F - REBIND PACKAGE SUB-COMMANDS    00094 */
    =00153 QTRBNDPA +4 , /* F - ATTEMPTS TO REBIND A PACKAGE   00098 */
    =00157 QTPKGRBD +4 , /* F - # PACKAGES REBOUND             0009C */
    =00161 QTFREEP +4 , /* F - FREE PACKAGE SUB-COMMANDS       000A0 */
    =00165 QTFREEAP +4 , /* F - ATTEMPTS TO FREE A PACKAGE     000A4 */
    =00169 QTPKGFRD +4 , /* F - # PACKAGES FREED               000A8 */
    =00173 QTAUTOBA +4 , /* F - ATTEMPTS TO AUTOBIND A PACKAGE 000AC */
    =00177 QTPKABND +4 , /* F - # PACKAGES AUTOBOUND           000B0 */
    =00181 QTPKALLA +4 , /* F - ATTEMPTS TO ALLOCATE A PACKAGE 000B4 */
    =00185 QTPKALL +4 , /* F - # PACKAGES ALLOCATED            000B8 */
    =00189 RSVD0002 +12 , /* C - RESERVED                      000BC */
    =00201 QTRACAUT +4 , /* F - #SUCCESSFUL AUTH CHECKS FOR RO 000C8 */
    =00205 QTRACPUB +4 , /* F - #SUCCESSFUL AUTH CHECKS FOR RO 000CC */
    =00209 QTRACNOT +4 , /* F - #ROUTINE AUTH CHECKS THAT COUL 000D0 */
    =00213 QTRACOW1 +4 , /* F - # OF TIMES DB2 OVERWROTE AN AU 000D4 */
    =00217 QTRACOW2 +4 , /* F - # OF TIMES DB2 OVERWROTE A ROU 000D8 */
    =00221 QTRACNAC +4 , /* F - # OF TIMES DB2 WAS NOT ABLE TO 000DC */
    =00225 RSVD0003 +32 , /* C - RESERVED                      000E0 */
,/* =00257 QTSTEND +0 ,    F -                                 00100 */
    .           /* End of DSECT */
  /* next byte at 257 */
  hex_QTID = c2x(QTID)
  hex_QTLEN = c2x(QTLEN)
  hex_QTEYE = c2x(QTEYE)
  hex_QTALLOCA = c2x(QTALLOCA)
  hex_QTALLOC = c2x(QTALLOC)
  hex_QTABINDA = c2x(QTABINDA)
  hex_QTABIND = c2x(QTABIND)
  hex_QTINVRID = c2x(QTINVRID)
  hex_QTBINDA = c2x(QTBINDA)
  hex_QTBINDR = c2x(QTBINDR)
  hex_QTTESTB = c2x(QTTESTB)
  hex_QTPLNBD = c2x(QTPLNBD)
  hex_QTREBIND = c2x(QTREBIND)
  hex_QTRBINDA = c2x(QTRBINDA)
  hex_QTPLNRBD = c2x(QTPLNRBD)
  hex_QTFREE = c2x(QTFREE)
  hex_QTFREEA = c2x(QTFREEA)
  hex_QTPLNFRD = c2x(QTPLNFRD)
  hex_QTAUCHK = c2x(QTAUCHK)
  hex_QTAUSUC = c2x(QTAUSUC)
  hex_QTDSOPN = c2x(QTDSOPN)
  hex_QTMAXDS = c2x(QTMAXDS)
  hex_QTAUCCH = c2x(QTAUCCH)
  hex_QTAUPUB = c2x(QTAUPUB)
  hex_QTMAXPB = c2x(QTMAXPB)
  hex_QTPACAUT = c2x(QTPACAUT)
  hex_QTPACPUB = c2x(QTPACPUB)
  hex_QTPACNOT = c2x(QTPACNOT)
  hex_QTREOPN = c2x(QTREOPN)
  hex_QTPACOW1 = c2x(QTPACOW1)
  hex_QTPACOW2 = c2x(QTPACOW2)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QTDSDRN = c2x(QTDSDRN)
  hex_QTPCCT = c2x(QTPCCT)
  hex_QTSLWDD = c2x(QTSLWDD)
  hex_QTBINDPA = c2x(QTBINDPA)
  hex_QTBINDPR = c2x(QTBINDPR)
  hex_QTPKGBD = c2x(QTPKGBD)
  hex_QTRBINDP = c2x(QTRBINDP)
  hex_QTRBNDPA = c2x(QTRBNDPA)
  hex_QTPKGRBD = c2x(QTPKGRBD)
  hex_QTFREEP = c2x(QTFREEP)
  hex_QTFREEAP = c2x(QTFREEAP)
  hex_QTPKGFRD = c2x(QTPKGFRD)
  hex_QTAUTOBA = c2x(QTAUTOBA)
  hex_QTPKABND = c2x(QTPKABND)
  hex_QTPKALLA = c2x(QTPKALLA)
  hex_QTPKALL = c2x(QTPKALL)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QTRACAUT = c2x(QTRACAUT)
  hex_QTRACPUB = c2x(QTRACPUB)
  hex_QTRACNOT = c2x(QTRACNOT)
  hex_QTRACOW1 = c2x(QTRACOW1)
  hex_QTRACOW2 = c2x(QTRACOW2)
  hex_QTRACNAC = c2x(QTRACNAC)
  hex_RSVD0003 = c2x(RSVD0003)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQTST",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQTST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQTST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQTST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQTST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK ID             x:" hex_QTID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QTLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EYE CATCHER    x:" hex_QTEYE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ALLOCATION ATTEMPTS          x:" hex_QTALLOCA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL ALLOCATIONS       x:" hex_QTALLOC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTOMATIC BIND ATTEMPTS      x:" hex_QTABINDA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUCCESSFUL AUTOMATIC BINDS   x:" hex_QTABIND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INVALID RESOURCE-IDS         x:" hex_QTINVRID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BIND (ADD) SUB-COMMANDS      x:" hex_QTBINDA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BIND (REPLACE) SUB-COMMANDS  x:" hex_QTBINDR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TEST BINDS (NO PLAN-ID)      x:" hex_QTTESTB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLANS BOUND                  x:" hex_QTPLNBD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REBIND SUB-COMMANDS          x:" hex_QTREBIND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ATTEMPTS TO REBIND A PLAN    x:" hex_QTRBINDA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLANS REBOUND                x:" hex_QTPLNRBD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FREE SUB-COMMANDS            x:" hex_QTFREE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ATTEMPTS TO FREE A PLAN      x:" hex_QTFREEA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLANS FREED                  x:" hex_QTPLNFRD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF AUTHORIZATIO x:" hex_QTAUCHK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF SUCCESSFUL A x:" hex_QTAUSUC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATASETS CURRENTLY x:" hex_QTDSOPN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF DS OPENED  x:" hex_QTMAXDS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #SUCCESSFUL AUTH CHECKS FOR  x:" hex_QTAUCCH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #SUCCESSFUL AUTH CHECKS FOR  x:" hex_QTAUPUB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NOT IN-USE DATA SETS x:" hex_QTMAXPB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #SUCCESSFUL AUTH CHECKS FOR  x:" hex_QTPACAUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #SUCCESSFUL AUTH CHECKS FOR  x:" hex_QTPACPUB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #PACKAGE AUTH CHECKS THAT CO x:" hex_QTPACNOT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES THAT NOT IN-USE O x:" hex_QTREOPN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES DB2 OVERWROTE AN  x:" hex_QTPACOW1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES DB2 OVERWROTE A P x:" hex_QTPACOW2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF NOT IN-USE DATA SETS CL x:" hex_QTDSDRN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF INFREQUENTLY UPDATED DA x:" hex_QTPCCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DATA SETS THAT ARE NOT  x:" hex_QTSLWDD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BIND (ADD) PACKAGE SUB-COMMA x:" hex_QTBINDPA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BIND (REP) PACKAGE SUB-COMMA x:" hex_QTBINDPR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # PACKAGES BOUND             x:" hex_QTPKGBD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REBIND PACKAGE SUB-COMMANDS  x:" hex_QTRBINDP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ATTEMPTS TO REBIND A PACKAGE x:" hex_QTRBNDPA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # PACKAGES REBOUND           x:" hex_QTPKGRBD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FREE PACKAGE SUB-COMMANDS    x:" hex_QTFREEP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ATTEMPTS TO FREE A PACKAGE   x:" hex_QTFREEAP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # PACKAGES FREED             x:" hex_QTPKGFRD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ATTEMPTS TO AUTOBIND A PACKA x:" hex_QTAUTOBA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # PACKAGES AUTOBOUND         x:" hex_QTPKABND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ATTEMPTS TO ALLOCATE A PACKA x:" hex_QTPKALLA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # PACKAGES ALLOCATED         x:" hex_QTPKALL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #SUCCESSFUL AUTH CHECKS FOR  x:" hex_QTRACAUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #SUCCESSFUL AUTH CHECKS FOR  x:" hex_QTRACPUB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      #ROUTINE AUTH CHECKS THAT CO x:" hex_QTRACNOT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES DB2 OVERWROTE AN  x:" hex_QTRACOW1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES DB2 OVERWROTE A R x:" hex_QTRACOW2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES DB2 WAS NOT ABLE  x:" hex_QTRACNAC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQBST length is 00114
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQBST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQBST,276)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQBST Length: 276"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQBST ,
,/* =00001 QBST +0 ,    D -                                    00000 */
    =00001 QBSTPID +4 , /* F - BUFFER POOL ID                  00000 */
    =00005 QBSTGET +4 , /* F - # OF GET PAGE REQUESTS.  INCLUD 00004 */
    =00009 QBSTRIO +4 , /* F - # OF SYNC. READ I/O OPERATIONS  00008 */
    =00013 QBSTDWV +4 , /* F - # OF TIMES VERTICAL DEFERRED WR 0000C */
    =00017 QBSTXFL +4 , /* F - # OF GETPAGE FAILURES DUE TO VP 00010 */
    =00021 QBSTXFV +4 , /* F - # OF EXPANSION FAILURE DUE TO S 00014 */
    =00025 QBSTSWS +4 , /* F - # OF SETW ISSUED FOR SYSTEM PAG 00018 */
    =00029 RSVD0001 +4 , /* F - RESERVED                       0001C */
    =00033 QBSTPWS +4 , /* F - # OF PAGE WRITES FOR SYSTEM PAG 00020 */
    =00037 RSVD0002 +4 , /* F - RESERVED                       00024 */
    =00041 QBSTWIO +4 , /* F - # OF ASYNC. WRITE I/O OPERATION 00028 */
    =00045 QBSTCBA +4 , /* F - # OF CURRENT ACTIVE BUFFERS     0002C */
    =00049 QBSTRPI +4 , /* F - # OF PAGE-IN REQUIRED FOR READ  00030 */
    =00053 QBSTWPI +4 , /* F - # OF PAGE-IN REQUIRED FOR WRITE 00034 */
    =00057 QBSTDSO +4 , /* F - # OF DATA SETS OPENED SUCCESSFU 00038 */
    =00061 QBSTIMW +4 , /* F - # OF IMMED (SYNCHRONOUS) WRITE  0003C */
    =00065 QBSTSEQ +4 , /* F - # OF SEQ PREFETCH REQUESTED     00040 */
    =00069 QBSTSPP +4 , /* F - # OF PAGE READ DUE TO SEQ PREFE 00044 */
    =00073 QBSTSPD +4 , /* F - # OF SEQ PREFETCH DISABLED DUE  00048 */
    =00077 QBSTREE +4 , /* F - # OF SEQ PREFETCH DISABLED DUE  0004C */
    =00081 RSVD0003 +4 , /* F - RESERVED FORMER QBSTWEE        00050 */
    =00085 QBSTDWT +4 , /* F - # OF TIMES THAT DEFERRED WRITE  00054 */
    =00089 QBSTDMC +4 , /* F - # OF TIMES THAT THE DATA MANAGE 00058 */
    =00093 QBSTMIG +4 , /* F - # OF TIMES THAT MIGRATED DATA S 0005C */
    =00097 QBSTRTO +4 , /* F - # OF RECALL TIMEOUTS            00060 */
    =00101 QBSTPIO +4 , /* F - # OF SEQ PREFETCH (ASYNCHRONOUS 00064 */
    =00105 QBSTWKPD +4 , /* F - # OF WK PREFETCH ABORTED DUE T 00068 */
    =00109 QBSTMAX +4 , /* F - # OF WK FILE CANNOT BE CREATED  0006C */
    =00113 QBSTWFM +4 , /* F - MAXIMUM WORKFILES EVER BEEN ALL 00070 */
    =00117 QBSTWDRP +4 , /* F - # OF PAGES FOR WHICH DESTRUCTI 00074 */
    =00121 QBSTWBVQ +4 , /* F - # OF PAGES DEQUEUED FROM DATA  00078 */
    =00125 QBSTWFR +4 , /* F - COUNT OF REQUESTS TO QUERY FOR  0007C */
    =00129 QBSTWFT +4 , /* F - SUM OF WORKFILES THAT HAVE BEEN 00080 */
    =00133 QBSTWFD +4 , /* F - SUM OF WORKFILES THAT HAVE BEEN 00084 */
    =00137 QBSTWFF +4 , /* F - # OF TIMES SORT/MERGE COULD NOT 00088 */
    =00141 QBSTLPF +4 , /* F - # OF LIST PREFETCH REQUESTED    0008C */
    =00145 QBSTDPF +4 , /* F - # OF DYNAMIC PREFETCH REQUESTED 00090 */
    =00149 QBSTVPA +4 , /* F - # OF SUCCESSFUL VPOOL EXP/CONTR 00094 */
    =00153 QBSTPCO +4 , /* F - # OF PG on  unlock castout      00098 */
    =00157 QBSTCIO +4 , /* F - # OF I/O on castout             0009C */
    =00161 RSVD0004 +4 , /* F - RESERVED                       000A0 */
    =00165 RSVD0005 +4 , /* F - RESERVED                       000A4 */
    =00169 RSVD0006 +4 , /* F - RESERVED                       000A8 */
    =00173 RSVD0007 +4 , /* F - RESERVED                       000AC */
    =00177 RSVD0008 +4 , /* F - RESERVED                       000B0 */
    =00181 QBSTVPL +4 , /* F - # OF BUFFERS ALLOCATED FOR VIRT 000B4 */
    =00185 RSVD0009 +4 , /* F - RESERVED                       000B8 */
    =00189 QBSTDPP +4 , /* F - # OF PAGE READ DUE TO DYNAMIC P 000BC */
    =00193 QBSTLPP +4 , /* F - # OF PAGE READ DUE TO LIST PREF 000C0 */
    =00197 QBSTDIO +4 , /* F - # OF DYNAMIC PREFETCH (ASYNCHRO 000C4 */
    =00201 QBSTLIO +4 , /* F - # OF LIST PREFETCH (ASYNCHRONOU 000C8 */
    =00205 QBSTSGT +4 , /* F - # OF GET PAGE ISSUED BY SEQUENT 000CC */
    =00209 QBSTSIO +4 , /* F - # OF SYNC. READ I/O OPERATIONS  000D0 */
    =00213 QBSTDWC +4 , /* F - RESERVED                        000D4 */
    =00217 QBSTDWX +4 , /* F - RESERVED                        000D8 */
    =00221 QBSTALX +4 , /* F - RESERVED                        000DC */
    =00225 QBSTNGT +4 , /* F - # OF UNSUCCESSFUL GETPAGE DUE T 000E0 */
    =00229 QBSTXIS +4 , /* F - HIGHEST PREFETCH I/O STREAMS HA 000E4 */
    =00233 QBSTJIS +4 , /* F - # OF PREFETCH I/O STREAMS HAVE  000E8 */
    =00237 QBSTPQO +4 , /* F - TOTAL # OF NEGOTIATIONS BETWEEN 000EC */
    =00241 QBSTPQF +4 , /* F - # OF TIMES PARALLELISM HAS BEEN 000F0 */
    =00245 QBSTPL1 +4 , /* F - TOTAL # OF OCCURRENCES WHEN PRE 000F4 */
    =00249 QBSTPL2 +4 , /* F - TOTAL # OF OCCURRENCES WHEN PRE 000F8 */
    =00253 QBSTNSG +4 , /* F - # OF CONDITIONAL SEQUENTIAL GET 000FC */
    =00257 RSVD0010 +4 , /* F - RESERVED                       00100 */
    =00261 RSVD0011 +4 , /* F - RESERVED                       00104 */
    =00265 RSVD0012 +4 , /* F - RESERVED                       00108 */
    =00269 RSVD0013 +4 , /* F - RESERVED                       0010C */
    =00273 QBSTLPL +4 , /* F - # of times one or more pages we 00110 */
,/* =00277 QBSTEND +0 ,    F -                                 00114 */
    .           /* End of DSECT */
  /* next byte at 277 */
  hex_QBSTPID = c2x(QBSTPID)
  hex_QBSTGET = c2x(QBSTGET)
  hex_QBSTRIO = c2x(QBSTRIO)
  hex_QBSTDWV = c2x(QBSTDWV)
  hex_QBSTXFL = c2x(QBSTXFL)
  hex_QBSTXFV = c2x(QBSTXFV)
  hex_QBSTSWS = c2x(QBSTSWS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QBSTPWS = c2x(QBSTPWS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QBSTWIO = c2x(QBSTWIO)
  hex_QBSTCBA = c2x(QBSTCBA)
  hex_QBSTRPI = c2x(QBSTRPI)
  hex_QBSTWPI = c2x(QBSTWPI)
  hex_QBSTDSO = c2x(QBSTDSO)
  hex_QBSTIMW = c2x(QBSTIMW)
  hex_QBSTSEQ = c2x(QBSTSEQ)
  hex_QBSTSPP = c2x(QBSTSPP)
  hex_QBSTSPD = c2x(QBSTSPD)
  hex_QBSTREE = c2x(QBSTREE)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QBSTDWT = c2x(QBSTDWT)
  hex_QBSTDMC = c2x(QBSTDMC)
  hex_QBSTMIG = c2x(QBSTMIG)
  hex_QBSTRTO = c2x(QBSTRTO)
  hex_QBSTPIO = c2x(QBSTPIO)
  hex_QBSTWKPD = c2x(QBSTWKPD)
  hex_QBSTMAX = c2x(QBSTMAX)
  hex_QBSTWFM = c2x(QBSTWFM)
  hex_QBSTWDRP = c2x(QBSTWDRP)
  hex_QBSTWBVQ = c2x(QBSTWBVQ)
  hex_QBSTWFR = c2x(QBSTWFR)
  hex_QBSTWFT = c2x(QBSTWFT)
  hex_QBSTWFD = c2x(QBSTWFD)
  hex_QBSTWFF = c2x(QBSTWFF)
  hex_QBSTLPF = c2x(QBSTLPF)
  hex_QBSTDPF = c2x(QBSTDPF)
  hex_QBSTVPA = c2x(QBSTVPA)
  hex_QBSTPCO = c2x(QBSTPCO)
  hex_QBSTCIO = c2x(QBSTCIO)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_RSVD0008 = c2x(RSVD0008)
  hex_QBSTVPL = c2x(QBSTVPL)
  hex_RSVD0009 = c2x(RSVD0009)
  hex_QBSTDPP = c2x(QBSTDPP)
  hex_QBSTLPP = c2x(QBSTLPP)
  hex_QBSTDIO = c2x(QBSTDIO)
  hex_QBSTLIO = c2x(QBSTLIO)
  hex_QBSTSGT = c2x(QBSTSGT)
  hex_QBSTSIO = c2x(QBSTSIO)
  hex_QBSTDWC = c2x(QBSTDWC)
  hex_QBSTDWX = c2x(QBSTDWX)
  hex_QBSTALX = c2x(QBSTALX)
  hex_QBSTNGT = c2x(QBSTNGT)
  hex_QBSTXIS = c2x(QBSTXIS)
  hex_QBSTJIS = c2x(QBSTJIS)
  hex_QBSTPQO = c2x(QBSTPQO)
  hex_QBSTPQF = c2x(QBSTPQF)
  hex_QBSTPL1 = c2x(QBSTPL1)
  hex_QBSTPL2 = c2x(QBSTPL2)
  hex_QBSTNSG = c2x(QBSTNSG)
  hex_RSVD0010 = c2x(RSVD0010)
  hex_RSVD0011 = c2x(RSVD0011)
  hex_RSVD0012 = c2x(RSVD0012)
  hex_RSVD0013 = c2x(RSVD0013)
  hex_QBSTLPL = c2x(QBSTLPL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQBST",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQBST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQBST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQBST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQBST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL ID               x:" hex_QBSTPID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF GET PAGE REQUESTS.  INC x:" hex_QBSTGET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SYNC. READ I/O OPERATIO x:" hex_QBSTRIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES VERTICAL DEFERRED x:" hex_QBSTDWV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF GETPAGE FAILURES DUE TO x:" hex_QBSTXFL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF EXPANSION FAILURE DUE T x:" hex_QBSTXFV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SETW ISSUED FOR SYSTEM  x:" hex_QBSTSWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGE WRITES FOR SYSTEM  x:" hex_QBSTPWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ASYNC. WRITE I/O OPERAT x:" hex_QBSTWIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CURRENT ACTIVE BUFFERS  x:" hex_QBSTCBA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGE-IN REQUIRED FOR RE x:" hex_QBSTRPI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGE-IN REQUIRED FOR WR x:" hex_QBSTWPI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DATA SETS OPENED SUCCES x:" hex_QBSTDSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF IMMED (SYNCHRONOUS) WRI x:" hex_QBSTIMW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SEQ PREFETCH REQUESTED  x:" hex_QBSTSEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGE READ DUE TO SEQ PR x:" hex_QBSTSPP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SEQ PREFETCH DISABLED D x:" hex_QBSTSPD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SEQ PREFETCH DISABLED D x:" hex_QBSTREE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FORMER QBSTWEE      x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES THAT DEFERRED WRI x:" hex_QBSTDWT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES THAT THE DATA MAN x:" hex_QBSTDMC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES THAT MIGRATED DAT x:" hex_QBSTMIG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF RECALL TIMEOUTS         x:" hex_QBSTRTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SEQ PREFETCH (ASYNCHRON x:" hex_QBSTPIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF WK PREFETCH ABORTED DUE x:" hex_QBSTWKPD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF WK FILE CANNOT BE CREAT x:" hex_QBSTMAX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM WORKFILES EVER BEEN  x:" hex_QBSTWFM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES FOR WHICH DESTRUC x:" hex_QBSTWDRP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES DEQUEUED FROM DAT x:" hex_QBSTWBVQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF REQUESTS TO QUERY F x:" hex_QBSTWFR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUM OF WORKFILES THAT HAVE B x:" hex_QBSTWFT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUM OF WORKFILES THAT HAVE B x:" hex_QBSTWFD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES SORT/MERGE COULD  x:" hex_QBSTWFF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LIST PREFETCH REQUESTED x:" hex_QBSTLPF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DYNAMIC PREFETCH REQUES x:" hex_QBSTDPF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SUCCESSFUL VPOOL EXP/CO x:" hex_QBSTVPA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PG on  unlock castout   x:" hex_QBSTPCO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF I/O on castout          x:" hex_QBSTCIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0008
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BUFFERS ALLOCATED FOR V x:" hex_QBSTVPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0009
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGE READ DUE TO DYNAMI x:" hex_QBSTDPP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGE READ DUE TO LIST P x:" hex_QBSTLPP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DYNAMIC PREFETCH (ASYNC x:" hex_QBSTDIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LIST PREFETCH (ASYNCHRO x:" hex_QBSTLIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF GET PAGE ISSUED BY SEQU x:" hex_QBSTSGT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SYNC. READ I/O OPERATIO x:" hex_QBSTSIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QBSTDWC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QBSTDWX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QBSTALX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF UNSUCCESSFUL GETPAGE DU x:" hex_QBSTNGT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HIGHEST PREFETCH I/O STREAMS x:" hex_QBSTXIS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PREFETCH I/O STREAMS HA x:" hex_QBSTJIS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL # OF NEGOTIATIONS BETW x:" hex_QBSTPQO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMES PARALLELISM HAS B x:" hex_QBSTPQF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL # OF OCCURRENCES WHEN  x:" hex_QBSTPL1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL # OF OCCURRENCES WHEN  x:" hex_QBSTPL2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CONDITIONAL SEQUENTIAL  x:" hex_QBSTNSG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0010
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0011
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0012
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0013
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times one or more pages x:" hex_QBSTLPL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQIST length is 00050
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQIST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQIST,80)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQIST Length: 80"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQIST ,
,/* =00001 QIST +0 ,    D -                                    00000 */
,/* =00001 QIHEAD +0 ,    F - CONTROL BLOCK HEADER             00000 */
    =00001 QIID +2 , /* C - CONTROL BLOCK ID                   00000 */
    =00003 QILEN +2 , /* H - CONTROL BLOCK LENGTH              00002 */
    =00005 QIEYE +4 , /* C - CONTROL BLOCK EYE CATCHER         00004 */
,/* =00009 QISTATS +0 ,    F - STATISTICS                      00008 */
    =00009 QISTRLLM +4 , /* F - THE NUMBER OF TIMES RID        00008 */
    =00013 QISTRPLM +4 , /* F - THE NUMBER OF TIMES RID        0000C */
,/* =00017 QISTRHAC +0 ,    D - DOUBLE WORD CONTAINING         00010 */
    =00017 QISTRHIG +4 , /* F - HIGHEST NUMBER OF RID          00010 */
    =00021 QISTRCUR +4 , /* F - NUMBER OF RID BLOCKS           00014 */
    =00025 QISTRSTG +4 , /* F - NUMBER OF TIMES RID LIST       00018 */
    =00029 QISTRMAX +4 , /* F - NUMBER OF TIMES THE MAXIMUM    0001C */
    =00033 QISTCOLS +4 , /* F - Total number of columns        00020 */
    =00037 QISTWFMU +4 , /* F - Maximum total storage used     00024 */
    =00041 QISTWFCU +4 , /* F - Current total whole MBs of     00028 */
    =00045 QISTWFCK +4 , /* F - Current total fractional       0002C */
    =00049 QISTWFMX +4 , /* F - Maximum allowable storage      00030 */
    =00053 QISTWFNE +4 , /* F - Number of times the maximum    00034 */
    =00057 QISTWF04 +4 , /* F - Total 4KB tablespace           00038 */
    =00061 QISTW04K +4 , /* F - Total 4KB tablespace           0003C */
    =00065 QISTWF32 +4 , /* F - Total 32KB tablespace          00040 */
    =00069 QISTW32K +4 , /* F - Total 32KB tablespace          00044 */
    =00073 QISTWFP1 +4 , /* F - How many times a 32KB page     00048 */
    =00077 QISTWFP2 +4 , /* F - How many times a 4KB page      0004C */
,/* =00081 QISTEND +0 ,    F -                                 00050 */
    .           /* End of DSECT */
  /* next byte at 81 */
  hex_QIID = c2x(QIID)
  hex_QILEN = c2x(QILEN)
  hex_QIEYE = c2x(QIEYE)
  hex_QISTRLLM = c2x(QISTRLLM)
  hex_QISTRPLM = c2x(QISTRPLM)
  hex_QISTRHIG = c2x(QISTRHIG)
  hex_QISTRCUR = c2x(QISTRCUR)
  hex_QISTRSTG = c2x(QISTRSTG)
  hex_QISTRMAX = c2x(QISTRMAX)
  hex_QISTCOLS = c2x(QISTCOLS)
  hex_QISTWFMU = c2x(QISTWFMU)
  hex_QISTWFCU = c2x(QISTWFCU)
  hex_QISTWFCK = c2x(QISTWFCK)
  hex_QISTWFMX = c2x(QISTWFMX)
  hex_QISTWFNE = c2x(QISTWFNE)
  hex_QISTWF04 = c2x(QISTWF04)
  hex_QISTW04K = c2x(QISTW04K)
  hex_QISTWF32 = c2x(QISTWF32)
  hex_QISTW32K = c2x(QISTW32K)
  hex_QISTWFP1 = c2x(QISTWFP1)
  hex_QISTWFP2 = c2x(QISTWFP2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQIST",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQIST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQIST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQIST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQIST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK ID             x:" hex_QIID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QILEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EYE CATCHER    x:" hex_QIEYE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF TIMES RID      x:" hex_QISTRLLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF TIMES RID      x:" hex_QISTRPLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HIGHEST NUMBER OF RID        x:" hex_QISTRHIG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RID BLOCKS         x:" hex_QISTRCUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF TIMES RID LIST     x:" hex_QISTRSTG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF TIMES THE MAXIMUM  x:" hex_QISTRMAX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of columns      x:" hex_QISTCOLS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum total storage used   x:" hex_QISTWFMU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current total whole MBs of   x:" hex_QISTWFCU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current total fractional     x:" hex_QISTWFCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum allowable storage    x:" hex_QISTWFMX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of times the maximum  x:" hex_QISTWFNE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total 4KB tablespace         x:" hex_QISTWF04
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total 4KB tablespace         x:" hex_QISTW04K
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total 32KB tablespace        x:" hex_QISTWF32
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total 32KB tablespace        x:" hex_QISTW32K
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      How many times a 32KB page   x:" hex_QISTWFP1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      How many times a 4KB page    x:" hex_QISTWFP2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQTXA length is 00058
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQTXA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQTXA,88)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQTXA Length: 88"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQTXA ,
,/* =00001 QTXA +0 ,    D -                                    00000 */
    =00001 QTXADEA +4 , /* F - Deadlock count                  00000 */
    =00005 QTXASLOC +4 , /* F - Number of suspends because of  00004 */
    =00009 QTXATIM +4 , /* F - Timeout counts                  00008 */
    =00013 QTXALES +4 , /* F - Count of lock escal shared      0000C */
    =00017 QTXALEX +4 , /* F - Count of lock escal exclusive   00010 */
    =00021 QTXANPL +4 , /* F - Max number of page or row       00014 */
    =00025 QTXAFLG1 +1 , /* X - First Flag Byte                00018 */
  ,     /* QTXAILMT EQU x'00000080' Infinite Limit                   */
  ,     /* QTXANRUN EQU x'00000040' No Run or Zero Limit             */
    =00026 RSVD0001 +1 , /* X - Unused                         00019 */
    =00027 QTXARLID +2 , /* C - Resource Limit Table ID        0001A */
    =00029 QTXAPREC +4 , /* F - How Limit was determined       0001C */
  ,     /* QTXAPRC1 EQU x'00000001' Limit from specific Authid       */
  ,     /* QTXAPRC2 EQU x'00000002' Limit from specific Authid       */
  ,     /* QTXAPRC3 EQU x'00000003' Limit from specific Planname     */
  ,     /* QTXAPRC4 EQU x'00000004' Limit from blank Authid & Plan   */
  ,     /* QTXAPRC5 EQU x'00000005' Limit from Install - no entry    */
  ,     /* QTXAPRC6 EQU x'00000006' Limit from Install - I/O error   */
  ,     /* QTXAPRC7 EQU x'00000007' Infinite limit - user has        */
  ,     /* QTXAPRC8 EQU x'00000008' Limit from specific Authid,      */
  ,     /* QTXAPRC9 EQU x'00000009' Limit from specific Authid       */
  ,     /* QTXAPR10 EQU x'0000000A' Limit from specific Authid       */
  ,     /* QTXAPR11 EQU x'0000000B' Limit from Authid running        */
  ,     /* QTXAPR12 EQU x'0000000C' Limit from specific package      */
  ,     /* QTXAPR13 EQU x'0000000D' Limit from any Authid and        */
  ,     /* QTXAPR14 EQU x'0000000E' Limit from any Authid and        */
  ,     /* QTXAPR15 EQU x'0000000F' Limit from any Authid, pkg,      */
    =00033 QTXASLMT +4 , /* F - Limit in SU s - ASUTIME        00020 */
    =00037 QTXACLMT +4 , /* F - Limit in CPU 16 microseconds   00024 */
    =00041 QTXACHUS +4 , /* F - Highest CPU 16 microsecs used  00028 */
    =00045 QTXASLAT +4 , /* F - Suspend count - latch conflict 0002C */
    =00049 QTXASOTH +4 , /* F - Suspend count - other conflict 00030 */
    =00053 QTXALOCK +4 , /* F - Lock request count             00034 */
    =00057 QTXAUNLK +4 , /* F - Unlock request count           00038 */
    =00061 QTXAQRY +4 , /* F - Query request count             0003C */
    =00065 QTXACHG +4 , /* F - Change request count            00040 */
    =00069 QTXAIRLM +4 , /* F - Other IRLM request count       00044 */
    =00073 QTXACLNO +4 , /* F - Number of claim requests       00048 */
    =00077 QTXACLUN +4 , /* F - Number of claim requests that  0004C */
    =00081 QTXADRNO +4 , /* F - Number of drain requests       00050 */
    =00085 QTXADRUN +4 , /* F - Number of drain requests that  00054 */
,/* =00089 QTXAEND +0 ,    C -                                 00058 */
    .           /* End of DSECT */
  /* next byte at 89 */
  hex_QTXADEA = c2x(QTXADEA)
  hex_QTXASLOC = c2x(QTXASLOC)
  hex_QTXATIM = c2x(QTXATIM)
  hex_QTXALES = c2x(QTXALES)
  hex_QTXALEX = c2x(QTXALEX)
  hex_QTXANPL = c2x(QTXANPL)
  hex_QTXAFLG1 = c2x(QTXAFLG1)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QTXARLID = c2x(QTXARLID)
  hex_QTXAPREC = c2x(QTXAPREC)
  hex_QTXASLMT = c2x(QTXASLMT)
  hex_QTXACLMT = c2x(QTXACLMT)
  hex_QTXACHUS = c2x(QTXACHUS)
  hex_QTXASLAT = c2x(QTXASLAT)
  hex_QTXASOTH = c2x(QTXASOTH)
  hex_QTXALOCK = c2x(QTXALOCK)
  hex_QTXAUNLK = c2x(QTXAUNLK)
  hex_QTXAQRY = c2x(QTXAQRY)
  hex_QTXACHG = c2x(QTXACHG)
  hex_QTXAIRLM = c2x(QTXAIRLM)
  hex_QTXACLNO = c2x(QTXACLNO)
  hex_QTXACLUN = c2x(QTXACLUN)
  hex_QTXADRNO = c2x(QTXADRNO)
  hex_QTXADRUN = c2x(QTXADRUN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQTXA",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQTXA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQTXA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQTXA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQTXA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Deadlock count               x:" hex_QTXADEA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of suspends because o x:" hex_QTXASLOC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timeout counts               x:" hex_QTXATIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Count of lock escal shared   x:" hex_QTXALES
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Count of lock escal exclusiv x:" hex_QTXALEX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max number of page or row    x:" hex_QTXANPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      First Flag Byte              x:" hex_QTXAFLG1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unused                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Resource Limit Table ID      x:" hex_QTXARLID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      How Limit was determined     x:" hex_QTXAPREC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Limit in SU s - ASUTIME      x:" hex_QTXASLMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Limit in CPU 16 microseconds x:" hex_QTXACLMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Highest CPU 16 microsecs use x:" hex_QTXACHUS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Suspend count - latch confli x:" hex_QTXASLAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Suspend count - other confli x:" hex_QTXASOTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Lock request count           x:" hex_QTXALOCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unlock request count         x:" hex_QTXAUNLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query request count          x:" hex_QTXAQRY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Change request count         x:" hex_QTXACHG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Other IRLM request count     x:" hex_QTXAIRLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of claim requests     x:" hex_QTXACLNO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of claim requests tha x:" hex_QTXACLUN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of drain requests     x:" hex_QTXADRNO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of drain requests tha x:" hex_QTXADRUN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QISE length is 00094
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QISE:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QISE,148)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QISE Length: 148"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QISE ,
    =00001 QISEFAIL +4 , /* F - # OF FAIL DUE TO POOL FULL     00000 */
    =00005 QISEPAGE +4 , /* F - NUMBER OF PAGES IN EDM POOL    00004 */
    =00009 QISECTG +4 , /* F - # OF REQ FOR CT SECTIONS        00008 */
    =00013 QISECTL +4 , /* F - # OF LOAD CT SECT FROM DASD     0000C */
    =00017 QISECT +4 , /* F - # OF PAGES USED FOR CT BELOW BAR 00010 */
    =00021 QISEFREE +4 , /* F - # OF FREE PG IN FREE CHAIN     00014 */
    =00025 QISESTMT +4 , /* F - # OF STMTS IN EDM POOL         00018 */
    =00029 RSVD0001 +4 , /* F - NOT USED, DO NOT REUSE         0001C */
    =00033 QISEDBDG +4 , /* F - # OF REQUESTS FOR DBD          00020 */
    =00037 QISEDBDL +4 , /* F - # OF LOADING DBD FROM DASD     00024 */
    =00041 QISEKTG +4 , /* F - # OF REQ FOR PT SECTIONS        00028 */
    =00045 QISEKTL +4 , /* F - # OF LOAD PT SECT FROM DASD     0002C */
    =00049 QISEKT +4 , /* F - # OF PAGES USED FOR PT           00030 */
    =00053 RSVD0002 +4 , /* F - NOT USED, DO NOT REUSE         00034 */
    =00057 QISEDSI +4 , /* F - # OF INSERTS FOR DYN CACHE      00038 */
    =00061 QISEDSG +4 , /* F - # OF REQUESTS FOR DYN CACHE     0003C */
    =00065 QISEDBD +4 , /* F - # OF PAGES USED FOR DBD         00040 */
    =00069 QISEDFAL +4 , /* F - # OF FAIL DUE TO DBD POOL FULL 00044 */
    =00073 QISEDPGE +4 , /* F - NUMBER OF PAGES IN DBD POOL    00048 */
    =00077 QISEDFRE +4 , /* F - # OF FREE PG IN DBD FREE CHAIN 0004C */
    =00081 QISEDYNP +4 , /* F - # OF PGS USED IN STMT POOL     00050 */
    =00085 QISECFAL +4 , /* F - # OF FAIL DUE TO STMT POOL FUL 00054 */
    =00089 QISECPGE +4 , /* F - # OF PGS IN STMT POOL          00058 */
    =00093 QISECFRE +4 , /* F - # OF FREE PG IN STMT FREE CHAI 0005C */
    =00097 QISESKCT +4 , /* F - # OF PAGES USED FOR SKCT       00060 */
    =00101 QISESKPT +4 , /* F - # OF PAGES USED FOR SKPT       00064 */
    =00105 QISEKFAL +4 , /* F - # OF FAIL DUE TO STMT SKEL POO 00068 */
    =00109 QISEKPGE +4 , /* F - # OF PAGES IN SKEL EDM POOL    0006C */
    =00113 QISEKFRE +4 , /* F - # OF FREE PG IN SKEL EDM POOL  00070 */
    =00117 QISECTA +4 , /* F - # OF PAGES USED IN CT ABOVE BAR 00074 */
    =00121 QISEKTA +4 , /* F - # OF PAGES USED IN PT ABOVE BAR 00078 */
    =00125 QISESFAL +4 , /* F - # OF FAIL DUE TO STMT ABV  POO 0007C */
    =00129 QISESPGE +4 , /* F - # OF PAGES IN STMT ABV EDM POO 00080 */
    =00133 QISESFRE +4 , /* F - # OF FREE PG IN STMT ABV EDM P 00084 */
    =00137 QISEKNFM +4 , /* F - # OF CACHED NOT-FOUND RECORD L 00088 */
    =00141 QISEKNFA +4 , /* F - # OF NOT-FOUND RECORD ADDED TO 0008C */
    =00145 QISEKNFR +4 , /* F - # OF NT-FOUND RCRD REMOVED FRM 00090 */
,/* =00149 QISEEND +0 ,    F - END OF LIST                     00094 */
    .           /* End of DSECT */
  /* next byte at 149 */
  hex_QISEFAIL = c2x(QISEFAIL)
  hex_QISEPAGE = c2x(QISEPAGE)
  hex_QISECTG = c2x(QISECTG)
  hex_QISECTL = c2x(QISECTL)
  hex_QISECT = c2x(QISECT)
  hex_QISEFREE = c2x(QISEFREE)
  hex_QISESTMT = c2x(QISESTMT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QISEDBDG = c2x(QISEDBDG)
  hex_QISEDBDL = c2x(QISEDBDL)
  hex_QISEKTG = c2x(QISEKTG)
  hex_QISEKTL = c2x(QISEKTL)
  hex_QISEKT = c2x(QISEKT)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QISEDSI = c2x(QISEDSI)
  hex_QISEDSG = c2x(QISEDSG)
  hex_QISEDBD = c2x(QISEDBD)
  hex_QISEDFAL = c2x(QISEDFAL)
  hex_QISEDPGE = c2x(QISEDPGE)
  hex_QISEDFRE = c2x(QISEDFRE)
  hex_QISEDYNP = c2x(QISEDYNP)
  hex_QISECFAL = c2x(QISECFAL)
  hex_QISECPGE = c2x(QISECPGE)
  hex_QISECFRE = c2x(QISECFRE)
  hex_QISESKCT = c2x(QISESKCT)
  hex_QISESKPT = c2x(QISESKPT)
  hex_QISEKFAL = c2x(QISEKFAL)
  hex_QISEKPGE = c2x(QISEKPGE)
  hex_QISEKFRE = c2x(QISEKFRE)
  hex_QISECTA = c2x(QISECTA)
  hex_QISEKTA = c2x(QISEKTA)
  hex_QISESFAL = c2x(QISESFAL)
  hex_QISESPGE = c2x(QISESPGE)
  hex_QISESFRE = c2x(QISESFRE)
  hex_QISEKNFM = c2x(QISEKNFM)
  hex_QISEKNFA = c2x(QISEKNFA)
  hex_QISEKNFR = c2x(QISEKNFR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QISE",desired_dsect) > 0)) then do
    void_rc = queue_QISE_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QISE:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QISE_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QISE:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAIL DUE TO POOL FULL   x:" hex_QISEFAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PAGES IN EDM POOL  x:" hex_QISEPAGE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF REQ FOR CT SECTIONS     x:" hex_QISECTG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LOAD CT SECT FROM DASD  x:" hex_QISECTL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED FOR CT BELOW x:" hex_QISECT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FREE PG IN FREE CHAIN   x:" hex_QISEFREE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF STMTS IN EDM POOL       x:" hex_QISESTMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED, DO NOT REUSE       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF REQUESTS FOR DBD        x:" hex_QISEDBDG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LOADING DBD FROM DASD   x:" hex_QISEDBDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF REQ FOR PT SECTIONS     x:" hex_QISEKTG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LOAD PT SECT FROM DASD  x:" hex_QISEKTL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED FOR PT       x:" hex_QISEKT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED, DO NOT REUSE       x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF INSERTS FOR DYN CACHE   x:" hex_QISEDSI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF REQUESTS FOR DYN CACHE  x:" hex_QISEDSG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED FOR DBD      x:" hex_QISEDBD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAIL DUE TO DBD POOL FU x:" hex_QISEDFAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PAGES IN DBD POOL  x:" hex_QISEDPGE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FREE PG IN DBD FREE CHA x:" hex_QISEDFRE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PGS USED IN STMT POOL   x:" hex_QISEDYNP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAIL DUE TO STMT POOL F x:" hex_QISECFAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PGS IN STMT POOL        x:" hex_QISECPGE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FREE PG IN STMT FREE CH x:" hex_QISECFRE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED FOR SKCT     x:" hex_QISESKCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED FOR SKPT     x:" hex_QISESKPT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAIL DUE TO STMT SKEL P x:" hex_QISEKFAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES IN SKEL EDM POOL  x:" hex_QISEKPGE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FREE PG IN SKEL EDM POO x:" hex_QISEKFRE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED IN CT ABOVE  x:" hex_QISECTA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES USED IN PT ABOVE  x:" hex_QISEKTA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAIL DUE TO STMT ABV  P x:" hex_QISESFAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PAGES IN STMT ABV EDM P x:" hex_QISESPGE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FREE PG IN STMT ABV EDM x:" hex_QISESFRE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CACHED NOT-FOUND RECORD x:" hex_QISEKNFM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF NOT-FOUND RECORD ADDED  x:" hex_QISEKNFA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF NT-FOUND RCRD REMOVED F x:" hex_QISEKNFR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QBGL length is 000D4
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QBGL:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QBGL,212)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QBGL Length: 212"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QBGL ,
    =00001 QBGLGN +4 , /* F - Group Buffer Pool id             00000 */
    =00005 QBGLGG +4 , /* F - GetPages for GBP Dep pages       00004 */
    =00009 QBGLXD +4 , /* F - # of GBP-reads under the user    00008 */
    =00013 QBGLXR +4 , /* F - # of GBP-reads under the user    0000C */
    =00017 RSVD0001 +4 , /* F - ++ not used                    00010 */
    =00021 QBGLMD +4 , /* F - # of GBP-reads under the user    00014 */
    =00025 QBGLMR +4 , /* F - # of GBP-reads under the user    00018 */
    =00029 RSVD0002 +4 , /* F - ++ not used                    0001C */
    =00033 QBGLSW +4 , /* F - # of changed pages written       00020 */
    =00037 QBGLWC +4 , /* F - # of clean pages written         00024 */
    =00041 QBGLCT +4 , /* F - # of times castout was initiated 00028 */
    =00045 QBGLGT +4 , /* F - # of times castout was initiated 0002C */
    =00049 QBGLWM +4 , /* F - # of Write and Register          00030 */
    =00053 QBGLWS +4 , /* F - # of Write and Register          00034 */
    =00057 QBGLEX +4 , /* F - # of explicit cross invalidate   00038 */
    =00061 QBGLAW +4 , /* F - # of changed pages written       0003C */
    =00065 QBGLRC +4 , /* F - # of pages castout from the      00040 */
    =00069 QBGLCM +4 , /* F - # Read For Castout Multiple      00044 */
    =00073 QBGLCR +4 , /* F - # of Read For Castout (RFCO)     00048 */
    =00077 QBGLWP +4 , /* F - # of pages written via WARM      0004C */
    =00081 QBGLWF +4 , /* F - # of GBP-write requests that     00050 */
    =00085 QBGLOS +4 , /* F - # of IXLCACHE  read-stgstats     00054 */
    =00089 QBGLAC +4 , /* F - # of changed pages written       00058 */
    =00093 QBGLAX +4 , /* F - # of  register-page-list  (RPL)  0005C */
    =00097 QBGLAY +4 , /* F - # of pages retrieved from the    00060 */
    =00101 RSVD0003 +4 , /* F - +++ not used +++               00064 */
    =00105 QBGLCK +4 , /* F - # of GBP checkpoints triggered   00068 */
    =00109 RSVD0004 +4 , /* F - +++ not used +++               0006C */
    =00113 QBGLUN +4 , /* F - # IXLCACHE  unlock-castout       00070 */
    =00117 QBGLCC +4 , /* F - # IXLCACHE  read-castout-class   00074 */
    =00121 QBGLCS +4 , /* F - # IXLCACHE  read-castout-stats   00078 */
    =00125 QBGLDN +4 , /* F - # IXLCACHE  delete-name          0007C */
    =00129 QBGLRD +4 , /* F - # IXLCACHE  read-dirinfo         00080 */
    =00133 QBGLRG +4 , /* F - # of  register page  requests    00084 */
    =00137 QBGLDG +4 , /* F - # of  unregister page            00088 */
    =00141 RSVD0005 +4 , /* F - +++ not used +++               0008C */
    =00145 QBGL2F +4 , /* F - # writes of changed pages to     00090 */
    =00149 QBGL2S +4 , /* F - # completion checks for writes   00094 */
    =00153 QBGL2D +4 , /* F - # IXLCACHE  delete-name-list     00098 */
    =00157 QBGL2R +4 , /* F - # IXLCACHE  read-castout-stats   0009C */
    =00161 QBGL2N +4 , /* F - # IXLCACHE  delete-name          000A0 */
    =00165 QBGLHS +4 , /* F - # Asynch IXLCACHE invocations    000A4 */
    =00169 QBGL2H +4 , /* F - # Asynch IXLCACHE invocations    000A8 */
    =00173 QBGLP1 +4 , /* F - # page P-lock lock requests for  000AC */
    =00177 QBGLP2 +4 , /* F - # page P-lock lock requests for  000B0 */
    =00181 QBGLP3 +4 , /* F - # page P-lock lock requests for  000B4 */
    =00185 QBGLU1 +4 , /* F - # page P-lock unlock requests    000B8 */
    =00189 QBGLS1 +4 , /* F - # page P-lock lock suspensions   000BC */
    =00193 QBGLS2 +4 , /* F - # page P-lock lock suspensions   000C0 */
    =00197 QBGLS3 +4 , /* F - # page P-lock lock suspensions   000C4 */
    =00201 QBGLN1 +4 , /* F - # page P-lock lock negotiations  000C8 */
    =00205 QBGLN2 +4 , /* F - # page P-lock lock negotiations  000CC */
    =00209 QBGLN3 +4 , /* F - # page P-lock lock negotiations  000D0 */
,/* =00213 QBGLEND +0 ,    C -                                 000D4 */
    .           /* End of DSECT */
  /* next byte at 213 */
  hex_QBGLGN = c2x(QBGLGN)
  hex_QBGLGG = c2x(QBGLGG)
  hex_QBGLXD = c2x(QBGLXD)
  hex_QBGLXR = c2x(QBGLXR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QBGLMD = c2x(QBGLMD)
  hex_QBGLMR = c2x(QBGLMR)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QBGLSW = c2x(QBGLSW)
  hex_QBGLWC = c2x(QBGLWC)
  hex_QBGLCT = c2x(QBGLCT)
  hex_QBGLGT = c2x(QBGLGT)
  hex_QBGLWM = c2x(QBGLWM)
  hex_QBGLWS = c2x(QBGLWS)
  hex_QBGLEX = c2x(QBGLEX)
  hex_QBGLAW = c2x(QBGLAW)
  hex_QBGLRC = c2x(QBGLRC)
  hex_QBGLCM = c2x(QBGLCM)
  hex_QBGLCR = c2x(QBGLCR)
  hex_QBGLWP = c2x(QBGLWP)
  hex_QBGLWF = c2x(QBGLWF)
  hex_QBGLOS = c2x(QBGLOS)
  hex_QBGLAC = c2x(QBGLAC)
  hex_QBGLAX = c2x(QBGLAX)
  hex_QBGLAY = c2x(QBGLAY)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QBGLCK = c2x(QBGLCK)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QBGLUN = c2x(QBGLUN)
  hex_QBGLCC = c2x(QBGLCC)
  hex_QBGLCS = c2x(QBGLCS)
  hex_QBGLDN = c2x(QBGLDN)
  hex_QBGLRD = c2x(QBGLRD)
  hex_QBGLRG = c2x(QBGLRG)
  hex_QBGLDG = c2x(QBGLDG)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QBGL2F = c2x(QBGL2F)
  hex_QBGL2S = c2x(QBGL2S)
  hex_QBGL2D = c2x(QBGL2D)
  hex_QBGL2R = c2x(QBGL2R)
  hex_QBGL2N = c2x(QBGL2N)
  hex_QBGLHS = c2x(QBGLHS)
  hex_QBGL2H = c2x(QBGL2H)
  hex_QBGLP1 = c2x(QBGLP1)
  hex_QBGLP2 = c2x(QBGLP2)
  hex_QBGLP3 = c2x(QBGLP3)
  hex_QBGLU1 = c2x(QBGLU1)
  hex_QBGLS1 = c2x(QBGLS1)
  hex_QBGLS2 = c2x(QBGLS2)
  hex_QBGLS3 = c2x(QBGLS3)
  hex_QBGLN1 = c2x(QBGLN1)
  hex_QBGLN2 = c2x(QBGLN2)
  hex_QBGLN3 = c2x(QBGLN3)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QBGL",desired_dsect) > 0)) then do
    void_rc = queue_QBGL_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QBGL:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QBGL_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QBGL:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group Buffer Pool id         x:" hex_QBGLGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GetPages for GBP Dep pages   x:" hex_QBGLGG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of GBP-reads under the use x:" hex_QBGLXD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of GBP-reads under the use x:" hex_QBGLXR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ++ not used                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of GBP-reads under the use x:" hex_QBGLMD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of GBP-reads under the use x:" hex_QBGLMR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ++ not used                  x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed pages written   x:" hex_QBGLSW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of clean pages written     x:" hex_QBGLWC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times castout was initi x:" hex_QBGLCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of times castout was initi x:" hex_QBGLGT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of Write and Register      x:" hex_QBGLWM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of Write and Register      x:" hex_QBGLWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of explicit cross invalida x:" hex_QBGLEX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed pages written   x:" hex_QBGLAW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of pages castout from the  x:" hex_QBGLRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Read For Castout Multiple  x:" hex_QBGLCM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of Read For Castout (RFCO) x:" hex_QBGLCR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of pages written via WARM  x:" hex_QBGLWP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of GBP-write requests that x:" hex_QBGLWF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of IXLCACHE  read-stgstats x:" hex_QBGLOS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed pages written   x:" hex_QBGLAC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of  register-page-list  (R x:" hex_QBGLAX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of pages retrieved from th x:" hex_QBGLAY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +++ not used +++             x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of GBP checkpoints trigger x:" hex_QBGLCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +++ not used +++             x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  unlock-castout   x:" hex_QBGLUN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  read-castout-cla x:" hex_QBGLCC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  read-castout-sta x:" hex_QBGLCS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  delete-name      x:" hex_QBGLDN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  read-dirinfo     x:" hex_QBGLRD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of  register page  request x:" hex_QBGLRG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of  unregister page        x:" hex_QBGLDG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      +++ not used +++             x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # writes of changed pages to x:" hex_QBGL2F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # completion checks for writ x:" hex_QBGL2S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  delete-name-list x:" hex_QBGL2D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  read-castout-sta x:" hex_QBGL2R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE  delete-name      x:" hex_QBGL2N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Asynch IXLCACHE invocation x:" hex_QBGLHS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Asynch IXLCACHE invocation x:" hex_QBGL2H
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock requests  x:" hex_QBGLP1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock requests  x:" hex_QBGLP2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock requests  x:" hex_QBGLP3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock unlock request x:" hex_QBGLU1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock suspensio x:" hex_QBGLS1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock suspensio x:" hex_QBGLS2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock suspensio x:" hex_QBGLS3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock negotiati x:" hex_QBGLN1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock negotiati x:" hex_QBGLN2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock negotiati x:" hex_QBGLN3
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QTGS length is 00058
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QTGS:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QTGS,88)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QTGS Length: 88"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QTGS ,
    =00001 QTGSLPLK +4 , /* F - # Lock requests for P-locks.   00000 */
    =00005 QTGSCPLK +4 , /* F - # Change requests for P-locks. 00004 */
    =00009 QTGSUPLK +4 , /* F - # Unlock requests for P-locks. 00008 */
    =00013 QTGSLSLM +4 , /* F - # lock requests propagated     0000C */
    =00017 QTGSCSLM +4 , /* F - # change requests propagated   00010 */
    =00021 QTGSUSLM +4 , /* F - # unlock requests propagated   00014 */
    =00025 QTGSIGLO +4 , /* F - # suspends due to IRLM global  00018 */
    =00029 QTGSSGLO +4 , /* F - # suspends due to XES global   0001C */
    =00033 QTGSFLSE +4 , /* F - # of sync to async heuristic   00020 */
    =00037 QTGSDRTA +4 , /* F - # global lock or change        00024 */
    =00041 QTGSNTFY +4 , /* F - # notify messages sent         00028 */
    =00045 QTGSNTFR +4 , /* F - # notify messages received     0002C */
    =00049 QTGSKIDS +4 , /* F - # resources (L-locks or        00030 */
    =00053 QTGSPPPE +4 , /* F - # times this DB2 was driven    00034 */
    =00057 QTGSPGPE +4 , /* F - # times this DB2 was driven    00038 */
    =00061 QTGSOTPE +4 , /* F - # times this DB2 was driven    0003C */
    =00065 QTGSCHNP +4 , /* F - # of CHANGEP requests          00040 */
    =00069 QTGSPEMX +4 , /* F - Max # of engines available for 00044 */
    =00073 QTGSPEQW +4 , /* F - # times an engine is not       00048 */
    =00077 QTGSFLMG +4 , /* F - # false contentions for LOCK   0004C */
    =00081 QTGSCREJ +4 , /* F - # failed DB2 lock requests to  00050 */
    =00085 QTGSFLGS +4 , /* F - Flags that describe various    00054 */
  ,     /* QTGSFCON EQU x'80000000' 1 - QTGSFLMG reports counts per  */
,/* =00089 QTGSEND +0 ,    C -                                 00058 */
    .           /* End of DSECT */
  /* next byte at 89 */
  hex_QTGSLPLK = c2x(QTGSLPLK)
  hex_QTGSCPLK = c2x(QTGSCPLK)
  hex_QTGSUPLK = c2x(QTGSUPLK)
  hex_QTGSLSLM = c2x(QTGSLSLM)
  hex_QTGSCSLM = c2x(QTGSCSLM)
  hex_QTGSUSLM = c2x(QTGSUSLM)
  hex_QTGSIGLO = c2x(QTGSIGLO)
  hex_QTGSSGLO = c2x(QTGSSGLO)
  hex_QTGSFLSE = c2x(QTGSFLSE)
  hex_QTGSDRTA = c2x(QTGSDRTA)
  hex_QTGSNTFY = c2x(QTGSNTFY)
  hex_QTGSNTFR = c2x(QTGSNTFR)
  hex_QTGSKIDS = c2x(QTGSKIDS)
  hex_QTGSPPPE = c2x(QTGSPPPE)
  hex_QTGSPGPE = c2x(QTGSPGPE)
  hex_QTGSOTPE = c2x(QTGSOTPE)
  hex_QTGSCHNP = c2x(QTGSCHNP)
  hex_QTGSPEMX = c2x(QTGSPEMX)
  hex_QTGSPEQW = c2x(QTGSPEQW)
  hex_QTGSFLMG = c2x(QTGSFLMG)
  hex_QTGSCREJ = c2x(QTGSCREJ)
  hex_QTGSFLGS = c2x(QTGSFLGS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QTGS",desired_dsect) > 0)) then do
    void_rc = queue_QTGS_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QTGS:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QTGS_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QTGS:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Lock requests for P-locks. x:" hex_QTGSLPLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Change requests for P-lock x:" hex_QTGSCPLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Unlock requests for P-lock x:" hex_QTGSUPLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # lock requests propagated   x:" hex_QTGSLSLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # change requests propagated x:" hex_QTGSCSLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # unlock requests propagated x:" hex_QTGSUSLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # suspends due to IRLM globa x:" hex_QTGSIGLO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # suspends due to XES global x:" hex_QTGSSGLO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of sync to async heuristic x:" hex_QTGSFLSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # global lock or change      x:" hex_QTGSDRTA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # notify messages sent       x:" hex_QTGSNTFY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # notify messages received   x:" hex_QTGSNTFR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # resources (L-locks or      x:" hex_QTGSKIDS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # times this DB2 was driven  x:" hex_QTGSPPPE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # times this DB2 was driven  x:" hex_QTGSPGPE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # times this DB2 was driven  x:" hex_QTGSOTPE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of CHANGEP requests        x:" hex_QTGSCHNP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max # of engines available f x:" hex_QTGSPEMX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # times an engine is not     x:" hex_QTGSPEQW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # false contentions for LOCK x:" hex_QTGSFLMG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # failed DB2 lock requests t x:" hex_QTGSCREJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags that describe various  x:" hex_QTGSFLGS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQLES length is 000A8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQLES:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQLES,168)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQLES Length: 168"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQLES ,
,/* =00001 QLES +0 ,    D -                                    00000 */
,/* =00001 QLHEAD +0 ,    F - CONTROL BLOCK HEADER             00000 */
    =00001 QLID +2 , /* H - CONTROL BLOCK ID                   00000 */
    =00003 QLLEN +2 , /* H - CONTROL BLOCK LENGTH              00002 */
    =00005 QLEYE +4 , /* C - CONTROL BLOCK EYE CATCHER         00004 */
,/* =00009 QLESTATS +0 ,    F - STATISTICS                     00008 */
    =00009 QLECREAT +4 , /* F - (S)                            00008 */
    =00013 QLETRMST +4 , /* F - (S)                            0000C */
    =00017 QLETRMER +4 , /* F - (S)                            00010 */
    =00021 QLETRMDL +4 , /* F - (S)                            00014 */
    =00025 QLENUMEC +4 , /* F - (S)                            00018 */
    =00029 QLENUMEM +4 , /* F - (S)                            0001C */
    =00033 QLENUMIC +4 , /* F - (S)                            00020 */
    =00037 QLENUMIM +4 , /* F - (S)                            00024 */
    =00041 QLESTGEC +4 , /* F - (S)                            00028 */
    =00045 QLESTGEM +4 , /* F - (S)                            0002C */
    =00049 QLESTGIC +4 , /* F - (S)                            00030 */
    =00053 QLESTGIM +4 , /* F - (S)                            00034 */
    =00057 QLELOWEC +4 , /* F - (S)                            00038 */
    =00061 QLELOWEM +4 , /* F - (S)                            0003C */
    =00065 QLELOWIC +4 , /* F - (S)                            00040 */
    =00069 QLELOWIM +4 , /* F - (S)                            00044 */
    =00073 QLESTG1M +4 , /* F - (S)                            00048 */
    =00077 QLELOW1M +4 , /* F - (S)                            0004C */
    =00081 QLEUSED +8 , /* C - (S)                             00050 */
    =00089 QLETIME +8 , /* C - (S)                             00058 */
    =00097 QLENTRDY +8 , /* C - (S)                            00060 */
    =00105 QLETIMEW +8 , /* C - (S)                            00068 */
    =00113 QLETIMEI +8 , /* C - (S)                            00070 */
    =00121 QLETIMET +8 , /* C - (S)                            00078 */
    =00129 QLETIMEM +8 , /* C - (S)                            00080 */
    =00137 RSVD0001 +32 , /* C - RESERVED                      00088 */
,/* =00169 QLESEND +0 ,    F -                                 000A8 */
    .           /* End of DSECT */
  /* next byte at 169 */
  hex_QLID = c2x(QLID)
  hex_QLLEN = c2x(QLLEN)
  hex_QLEYE = c2x(QLEYE)
  hex_QLECREAT = c2x(QLECREAT)
  hex_QLETRMST = c2x(QLETRMST)
  hex_QLETRMER = c2x(QLETRMER)
  hex_QLETRMDL = c2x(QLETRMDL)
  hex_QLENUMEC = c2x(QLENUMEC)
  hex_QLENUMEM = c2x(QLENUMEM)
  hex_QLENUMIC = c2x(QLENUMIC)
  hex_QLENUMIM = c2x(QLENUMIM)
  hex_QLESTGEC = c2x(QLESTGEC)
  hex_QLESTGEM = c2x(QLESTGEM)
  hex_QLESTGIC = c2x(QLESTGIC)
  hex_QLESTGIM = c2x(QLESTGIM)
  hex_QLELOWEC = c2x(QLELOWEC)
  hex_QLELOWEM = c2x(QLELOWEM)
  hex_QLELOWIC = c2x(QLELOWIC)
  hex_QLELOWIM = c2x(QLELOWIM)
  hex_QLESTG1M = c2x(QLESTG1M)
  hex_QLELOW1M = c2x(QLELOW1M)
  hex_QLEUSED = c2x(QLEUSED)
  hex_QLETIME = c2x(QLETIME)
  hex_QLENTRDY = c2x(QLENTRDY)
  hex_QLETIMEW = c2x(QLETIMEW)
  hex_QLETIMEI = c2x(QLETIMEI)
  hex_QLETIMET = c2x(QLETIMET)
  hex_QLETIMEM = c2x(QLETIMEM)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQLES",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQLES_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQLES:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQLES_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQLES:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK ID             x:" hex_QLID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QLLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EYE CATCHER    x:" hex_QLEYE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLECREAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETRMST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETRMER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETRMDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLENUMEC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLENUMEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLENUMIC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLENUMIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLESTGEC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLESTGEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLESTGIC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLESTGIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLELOWEC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLELOWEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLELOWIC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLELOWIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLESTG1M
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLELOW1M
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLEUSED
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETIME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLENTRDY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETIMEW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETIMEI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETIMET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QLETIMEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QISJ length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QISJ:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QISJ,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QISJ Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QISJ ,
    =00001 QISJTRY +4 , /* F - (S)                             00000 */
    =00005 QISJFAIL +4 , /* F - (S)                            00004 */
    =00009 QISJSIZE +4 , /* F - (S)                            00008 */
    =00013 QISJMAX +4 , /* F - (S)                             0000C */
,/* =00017 QISJEND +0 ,    F -                                 00010 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QISJTRY = c2x(QISJTRY)
  hex_QISJFAIL = c2x(QISJFAIL)
  hex_QISJSIZE = c2x(QISJSIZE)
  hex_QISJMAX = c2x(QISJMAX)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QISJ",desired_dsect) > 0)) then do
    void_rc = queue_QISJ_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QISJ:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QISJ_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QISJ:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QISJTRY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QISJFAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QISJSIZE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QISJMAX
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: Q8ST length is 00140
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Q8ST:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_Q8ST,320)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: Q8ST Length: 320"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_Q8ST ,
    =00001 Q8STNAME_OFF +2 , /* X - ACCELERATOR SERVER ID OFFS 00000 */
    =00003 Q8STPRID +8 , /* C - ACCELERATOR PRODUCT ID         00002 */
    =00011 RSVD0001 +6 , /* C - UNUSED                         0000A */
    =00017 Q8STCONN +8 , /* D - # OF ACCELERATOR CONNECTS.     00010 */
    =00025 Q8STREQ +8 , /* D - # OF ACCELERATOR REQUESTS.      00018 */
    =00033 Q8STTOUT +8 , /* D - # OF TIMED OUT REQUESTS.       00020 */
    =00041 Q8STFAIL +8 , /* D - # OF FAILED REQUESTS.          00028 */
    =00049 Q8STBYTS +8 , /* D - # OF BYTES SENT.               00030 */
    =00057 Q8STBYTR +8 , /* D - # OF BYTES RETURNED.           00038 */
    =00065 Q8STMSGS +8 , /* D - # OF MESSAGES SENT.            00040 */
    =00073 Q8STMSGR +8 , /* D - # OF MESSAGES RETURNED.        00048 */
    =00081 Q8STBLKS +8 , /* D - # OF BLOCKS SENT.              00050 */
    =00089 Q8STBLKR +8 , /* D - # OF BLOCKS RETURNED.          00058 */
    =00097 Q8STROWS +8 , /* D - # OF ROWS SENT.                00060 */
    =00105 Q8STROWR +8 , /* D - # OF ROWS RETURNED.            00068 */
    =00113 Q8STSCPU +8 , /* D - ACCELERATOR SERVICES CPU TIME. 00070 */
    =00121 Q8STSELA +8 , /* D - ACCELERATOR SERVICES ELAPSED T 00078 */
    =00129 Q8STTCPU +8 , /* D - ACCEL SVCS TCP/IP CPU TIME.    00080 */
    =00137 Q8STTELA +8 , /* D - ACCEL SVCS TCP/IP ELAPSED TIME 00088 */
    =00145 Q8STACPU +8 , /* D - ACCUMULATED ACCELERATOR CPU TI 00090 */
    =00153 Q8STAELA +8 , /* D - ACCUMULATED ACCELERATOR ELAPSE 00098 */
    =00161 RSVD0002 +1 , /* X - unused                         000A0 */
    =00162 Q8STTATE +1 , /* X - V1 Accelerator state           000A1 */
    =00163 Q8STACTV +2 , /* H - Current active requests        000A2 */
    =00165 Q8STMAXA +2 , /* H - Maximum active requests        000A4 */
    =00167 Q8STAVGQ +2 , /* H - V1 Average query queue length  000A6 */
  ,
  ,/*00168 __no__name__ ORG - Q8STAVGQ - x'000000A6'           000A8 */
    =00167 Q8STAVGQ03 +2 , /* H - V2 Avg query queue len lst 3 000A6 */
    =00169 Q8STMAXQ +2 , /* H - Query queue length high waterm 000A8 */
    =00171 Q8STCCPU +2 , /* H - Average cpu utilization on     000AA */
    =00173 Q8STCNOD +2 , /* H - V1 Number of active coordinato 000AC */
  ,
  ,/*00174 __no__name__ ORG - Q8STCNOD - x'000000AC'           000AE */
    =00173 Q8STSKEW +2 , /* H - V2 Data Skew                   000AC */
    =00175 Q8STWCPU +2 , /* H - Average cpu utilization on     000AE */
    =00177 Q8STWNOD +2 , /* H - Number of active worker nodes  000B0 */
    =00179 Q8STDRTO +2 , /* H - V1 Ratio between replicated da 000B2 */
  ,
  ,/*00180 __no__name__ ORG - Q8STDRTO - x'000000B2'           000B4 */
    =00179 Q8STAVGQ24 +2 , /* H - V2 Avg query queue len lst 2 000B2 */
    =00181 RSVD0003 +4 , /* F - UNUSED                         000B4 */
    =00185 Q8STQUEW +8 , /* D - Average accelerator queue wait 000B8 */
    =00193 Q8STQUEM +8 , /* D - Maximum accelerator queue wait 000C0 */
    =00201 Q8STMIPS +8 , /* D - Accelerator processing capacit 000C8 */
    =00209 Q8STCORS +8 , /* D - V1 Total amount of processors  000D0 */
    =00217 Q8STSREQ +8 , /* D - Total number of successful que 000D8 */
    =00225 Q8STFREQ +8 , /* D - Total number of failed query   000E0 */
    =00233 Q8STFINV +8 , /* D - Number of failed query request 000E8 */
    =00241 Q8STDSKA +8 , /* D - Disk storage (MB) available    000F0 */
    =00249 Q8STDSKU +8 , /* D - Disk storage (MB) in-use       000F8 */
    =00257 Q8STCPMA +8 , /* D - V1 Physical memory (MB) availa 00100 */
  ,
  ,/*00264 __no__name__ ORG - Q8STCPMA - x'00000100'           00108 */
    =00257 Q8STDSKB +2 , /* H - V2 Disk storage in-use for DB  00100 */
    =00265 Q8STCPMU +8 , /* D - Physical memory (MB) average u 00108 */
    =00273 Q8STWPMA +8 , /* D - V1 Physical memory (MB) availa 00110 */
  ,
  ,/*00280 __no__name__ ORG - Q8STWPMA - x'00000110'           00118 */
    =00273 Q8STNMDS +2 , /* H - V2 Number of Data Slices       00110 */
    =00281 Q8STWPMU +8 , /* D - Physical memory (MB) average u 00118 */
    =00289 Q8STWSMA +8 , /* D - Shared memory (MB) data availa 00120 */
    =00297 Q8STWSMU +8 , /* D - Shared memory (MB) data averag 00128 */
    =00305 Q8STWSMM +8 , /* D - Maximum shared (MB) memory dat 00130 */
    =00313 Q8STAWAT +8 , /* D - ACCUMULATED ACCELERATOR WAIT T 00138 */
,/* =00321 Q8STEND +0 ,    F -                                 00140 */
    .           /* End of DSECT */
  /* next byte at 321 */
  hex_Q8STNAME_OFF = c2x(Q8STNAME_OFF)
  hex_Q8STPRID = c2x(Q8STPRID)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_Q8STCONN = c2x(Q8STCONN)
  hex_Q8STREQ = c2x(Q8STREQ)
  hex_Q8STTOUT = c2x(Q8STTOUT)
  hex_Q8STFAIL = c2x(Q8STFAIL)
  hex_Q8STBYTS = c2x(Q8STBYTS)
  hex_Q8STBYTR = c2x(Q8STBYTR)
  hex_Q8STMSGS = c2x(Q8STMSGS)
  hex_Q8STMSGR = c2x(Q8STMSGR)
  hex_Q8STBLKS = c2x(Q8STBLKS)
  hex_Q8STBLKR = c2x(Q8STBLKR)
  hex_Q8STROWS = c2x(Q8STROWS)
  hex_Q8STROWR = c2x(Q8STROWR)
  hex_Q8STSCPU = c2x(Q8STSCPU)
  hex_Q8STSELA = c2x(Q8STSELA)
  hex_Q8STTCPU = c2x(Q8STTCPU)
  hex_Q8STTELA = c2x(Q8STTELA)
  hex_Q8STACPU = c2x(Q8STACPU)
  hex_Q8STAELA = c2x(Q8STAELA)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_Q8STTATE = c2x(Q8STTATE)
  hex_Q8STACTV = c2x(Q8STACTV)
  hex_Q8STMAXA = c2x(Q8STMAXA)
  hex_Q8STAVGQ = c2x(Q8STAVGQ)
  hex_Q8STAVGQ03 = c2x(Q8STAVGQ03)
  hex_Q8STMAXQ = c2x(Q8STMAXQ)
  hex_Q8STCCPU = c2x(Q8STCCPU)
  hex_Q8STCNOD = c2x(Q8STCNOD)
  hex_Q8STSKEW = c2x(Q8STSKEW)
  hex_Q8STWCPU = c2x(Q8STWCPU)
  hex_Q8STWNOD = c2x(Q8STWNOD)
  hex_Q8STDRTO = c2x(Q8STDRTO)
  hex_Q8STAVGQ24 = c2x(Q8STAVGQ24)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_Q8STQUEW = c2x(Q8STQUEW)
  hex_Q8STQUEM = c2x(Q8STQUEM)
  hex_Q8STMIPS = c2x(Q8STMIPS)
  hex_Q8STCORS = c2x(Q8STCORS)
  hex_Q8STSREQ = c2x(Q8STSREQ)
  hex_Q8STFREQ = c2x(Q8STFREQ)
  hex_Q8STFINV = c2x(Q8STFINV)
  hex_Q8STDSKA = c2x(Q8STDSKA)
  hex_Q8STDSKU = c2x(Q8STDSKU)
  hex_Q8STCPMA = c2x(Q8STCPMA)
  hex_Q8STDSKB = c2x(Q8STDSKB)
  hex_Q8STCPMU = c2x(Q8STCPMU)
  hex_Q8STWPMA = c2x(Q8STWPMA)
  hex_Q8STNMDS = c2x(Q8STNMDS)
  hex_Q8STWPMU = c2x(Q8STWPMU)
  hex_Q8STWSMA = c2x(Q8STWSMA)
  hex_Q8STWSMU = c2x(Q8STWSMU)
  hex_Q8STWSMM = c2x(Q8STWSMM)
  hex_Q8STAWAT = c2x(Q8STAWAT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("Q8ST",desired_dsect) > 0)) then do
    void_rc = queue_Q8ST_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " Q8ST:"
    void_rc = write_print_data_out()
  end
  return 0

queue_Q8ST_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    Q8ST:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVER ID OFFSET x:" hex_Q8STNAME_OFF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR PRODUCT ID       x:" hex_Q8STPRID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR CONNECTS.   x:" hex_Q8STCONN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR REQUESTS.   x:" hex_Q8STREQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMED OUT REQUESTS.     x:" hex_Q8STTOUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAILED REQUESTS.        x:" hex_Q8STFAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES SENT.             x:" hex_Q8STBYTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES RETURNED.         x:" hex_Q8STBYTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSAGES SENT.          x:" hex_Q8STMSGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSAGES RETURNED.      x:" hex_Q8STMSGR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS SENT.            x:" hex_Q8STBLKS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS RETURNED.        x:" hex_Q8STBLKR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS SENT.              x:" hex_Q8STROWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS RETURNED.          x:" hex_Q8STROWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES CPU TIM x:" hex_Q8STSCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES ELAPSED x:" hex_Q8STSELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCEL SVCS TCP/IP CPU TIME.  x:" hex_Q8STTCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCEL SVCS TCP/IP ELAPSED TI x:" hex_Q8STTELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ACCELERATOR CPU  x:" hex_Q8STACPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ACCELERATOR ELAP x:" hex_Q8STAELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      unused                       x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Accelerator state         x:" hex_Q8STTATE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current active requests      x:" hex_Q8STACTV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum active requests      x:" hex_Q8STMAXA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Average query queue lengt x:" hex_Q8STAVGQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V2 Avg query queue len lst 3 x:" hex_Q8STAVGQ03
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query queue length high wate x:" hex_Q8STMAXQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Average cpu utilization on   x:" hex_Q8STCCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Number of active coordina x:" hex_Q8STCNOD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V2 Data Skew                 x:" hex_Q8STSKEW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Average cpu utilization on   x:" hex_Q8STWCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of active worker node x:" hex_Q8STWNOD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Ratio between replicated  x:" hex_Q8STDRTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V2 Avg query queue len lst 2 x:" hex_Q8STAVGQ24
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Average accelerator queue wa x:" hex_Q8STQUEW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum accelerator queue wa x:" hex_Q8STQUEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accelerator processing capac x:" hex_Q8STMIPS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Total amount of processor x:" hex_Q8STCORS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of successful q x:" hex_Q8STSREQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total number of failed query x:" hex_Q8STFREQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of failed query reque x:" hex_Q8STFINV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Disk storage (MB) available  x:" hex_Q8STDSKA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Disk storage (MB) in-use     x:" hex_Q8STDSKU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Physical memory (MB) avai x:" hex_Q8STCPMA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V2 Disk storage in-use for D x:" hex_Q8STDSKB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Physical memory (MB) average x:" hex_Q8STCPMU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V1 Physical memory (MB) avai x:" hex_Q8STWPMA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      V2 Number of Data Slices     x:" hex_Q8STNMDS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Physical memory (MB) average x:" hex_Q8STWPMU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Shared memory (MB) data avai x:" hex_Q8STWSMA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Shared memory (MB) data aver x:" hex_Q8STWSMU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum shared (MB) memory d x:" hex_Q8STWSMM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ACCELERATOR WAIT x:" hex_Q8STAWAT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: Q8STNAME_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Q8STNAME_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_Q8STNAME_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: Q8STNAME_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_Q8STNAME_D ,
    =00001 Q8STNAME_Len +2 , /* H - LENGTH OF THE FOLLOWING FI 00000 */
,/* =00003 Q8STNAME_Var +0 ,    C - ACCELERATOR SERVER NAME    00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_Q8STNAME_Len = c2x(Q8STNAME_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("Q8STNAME_D",desired_dsect) > 0)) then do
    void_rc = queue_Q8STNAME_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " Q8STNAME_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_Q8STNAME_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    Q8STNAME_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE FOLLOWING FIEL x:" hex_Q8STNAME_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWS2 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWS2:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWS2,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWS2 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWS2 ,
    =00001 QWS20PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWS20PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWS20PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWS20R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWS20R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWS20R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
,/* =00017 QWS20END +0 ,    C - END OF THE SELF DEFINING SECTI 00010 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QWS20PSO = c2x(QWS20PSO)
  hex_QWS20PSL = c2x(QWS20PSL)
  hex_QWS20PSN = c2x(QWS20PSN)
  hex_QWS20R1O = c2x(QWS20R1O)
  hex_QWS20R1L = c2x(QWS20R1L)
  hex_QWS20R1N = c2x(QWS20R1N)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWS2",desired_dsect) > 0)) then do
    void_rc = queue_QWS2_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWS2:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWS2_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWS2:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE PRODUCT SECTIO x:" hex_QWS20PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTIO x:" hex_QWS20PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS   x:" hex_QWS20PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS20R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS20R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS20R1N
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQDBP length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQDBP:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQDBP,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQDBP Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQDBP ,
,/* =00001 QDBP +0 ,    D -                                    00000 */
    =00001 QDBPNM +8 , /* C - BUFFER POOL NAME                 00000 */
    =00009 QDBPVPSZ +4 , /* F - VIRTUAL POOL SIZE              00008 */
    =00013 RSVD0001 +4 , /* F - RESERVED                       0000C */
    =00017 QDBPVPSH +1 , /* X - VIRTUAL POOL SEQ THRESHOLD (1- 00010 */
    =00018 RSVD0002 +1 , /* X - RESERVED                       00011 */
    =00019 QDBPDWQT +1 , /* X - POOL DEFERRED WRITE THRESHOLD  00012 */
    =00020 QDBPVDQT +1 , /* X - POOL VERTICAL WRITE THRESHOLD  00013 */
    =00021 RSVD0003 +1 , /* C - RESERVED                       00014 */
    =00022 QDBPPSQT +1 , /* X - parallel sequential threshold  00015 */
    =00023 QDBPXSQT +1 , /* X - assisting parallel sequential  00016 */
    =00024 QDBPPFIX +1 , /* C - PGFIX attribute.  See constant 00017 */
    =00025 QDBPVDQB +2 , /* H - Pool vertical write threshold, 00018 */
    =00027 QDBPSLA +2 , /* H - SERVICEABILITY                  0001A */
    =00029 QDBPPGST +1 , /* C - PGSTEAL attribute.  See consta 0001C */
    =00030 QDBPASIZ +1 , /* C - AUTOSIZE attribute.  See const 0001D */
    =00031 RSVD0004 +2 , /* C - Reserved                       0001E */
  ,     /* QDBPCYC EQU x'00000000' HYPERSPACE CASTOUT =Y             */
  ,     /* QDBPCNC EQU x'000000D5' HYPERSPACE CASTOUT =N             */
  ,     /* QDBPVPC EQU x'000000D7' VPTYPE=PRIMARY                    */
  ,     /* QDBPVDC EQU x'000000C4' VPTYPE=DATASPACE                  */
  ,     /* QDBPPLC EQU x'000000D3' PGSTEAL=LRU                       */
  ,     /* QDBPPFC EQU x'000000C6' PGSTEAL=FIFO                      */
  ,     /* QDBPFYC EQU x'00000000' YES                               */
  ,     /* QDBPFNC EQU x'000000D5' NO                                */
,/* =00033 QDBPEND +0 ,    F -                                 00020 */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QDBPNM = c2x(QDBPNM)
  hex_QDBPVPSZ = c2x(QDBPVPSZ)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QDBPVPSH = c2x(QDBPVPSH)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QDBPDWQT = c2x(QDBPDWQT)
  hex_QDBPVDQT = c2x(QDBPVDQT)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QDBPPSQT = c2x(QDBPPSQT)
  hex_QDBPXSQT = c2x(QDBPXSQT)
  hex_QDBPPFIX = c2x(QDBPPFIX)
  hex_QDBPVDQB = c2x(QDBPVDQB)
  hex_QDBPSLA = c2x(QDBPSLA)
  hex_QDBPPGST = c2x(QDBPPGST)
  hex_QDBPASIZ = c2x(QDBPASIZ)
  hex_RSVD0004 = c2x(RSVD0004)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQDBP",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQDBP_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQDBP:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQDBP_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQDBP:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL NAME             x:" hex_QDBPNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL SIZE            x:" hex_QDBPVPSZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL SEQ THRESHOLD ( x:" hex_QDBPVPSH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POOL DEFERRED WRITE THRESHOL x:" hex_QDBPDWQT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POOL VERTICAL WRITE THRESHOL x:" hex_QDBPVDQT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      parallel sequential threshol x:" hex_QDBPPSQT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      assisting parallel sequentia x:" hex_QDBPXSQT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PGFIX attribute.  See consta x:" hex_QDBPPFIX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pool vertical write threshol x:" hex_QDBPVDQB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SERVICEABILITY               x:" hex_QDBPSLA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PGSTEAL attribute.  See cons x:" hex_QDBPPGST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTOSIZE attribute.  See con x:" hex_QDBPASIZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0004
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWS3 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWS3:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWS3,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWS3 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWS3 ,
    =00001 QWS30PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWS30PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWS30PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWS30R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWS30R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWS30R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
,/* =00017 QWS30END +0 ,    C - END OF THE SELF DEFINING SECTI 00010 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QWS30PSO = c2x(QWS30PSO)
  hex_QWS30PSL = c2x(QWS30PSL)
  hex_QWS30PSN = c2x(QWS30PSN)
  hex_QWS30R1O = c2x(QWS30R1O)
  hex_QWS30R1L = c2x(QWS30R1L)
  hex_QWS30R1N = c2x(QWS30R1N)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWS3",desired_dsect) > 0)) then do
    void_rc = queue_QWS3_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWS3:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWS3_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWS3:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE PRODUCT SECTIO x:" hex_QWS30PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTIO x:" hex_QWS30PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS   x:" hex_QWS30PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWS30R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWS30R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWS30R1N
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QBGB length is 00050
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QBGB:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QBGB,80)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QBGB Length: 80"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QBGB ,
    =00001 QBGBGN +4 , /* F - Group Buffer Pool id             00000 */
,/* =00005 QBGBERR +0 ,    C - Stats collection error informat 00004 */
    =00005 QBGBFLGS +1 , /* X - Error flags - if non-zero, the 00004 */
  ,     /* QBGBFOK EQU x'00000000' OK - no errors in collecting data */
  ,     /* QBGBFSC EQU x'00000001' Error in reading group buffer poo */
  ,     /* QBGBFAB EQU x'00000002' Addressing error while accessing  */
    =00006 RSVD0001 +3 , /* C - Not used                       00005 */
    =00009 QBGBERC +4 , /* F - (S)Return code                  00008 */
    =00013 QBGBERS +4 , /* F - (S)Reason code                  0000C */
    =00017 QBGBGR1 +6 , /* C - Current directory entry / data  00010 */
    =00023 QBGBGR2 +6 , /* C - Pending directory entry / data  00016 */
,/* =00029 QBGBGCO +0 ,    C - Castout class info              0001C */
    =00029 QBGBGCT +1 , /* X - Castout class level threshold ( 0001C */
    =00030 QBGBGGT +1 , /* X - Group buffer pool level thresho 0001D */
    =00031 QBGBGAS +1 , /* C - Current AUTOREC setting         0001E */
  ,     /* QBGBGAY EQU x'00000000' AUTOREC YES                       */
  ,     /* QBGBGAN EQU x'000000D5' AUTOREC NO                        */
    =00032 QBGBGCS +1 , /* C - Current GBPCACHE setting        0001F */
  ,     /* QBGBGCY EQU x'00000000' GBPCACHE YES                      */
  ,     /* QBGBGCN EQU x'000000D5' GBPCACHE NO                       */
    =00033 QBGBGCK +4 , /* F - Group buffer pool checkpoint in 00020 */
    =00037 QBGBGSZ +4 , /* F - Allocated size of the group buf 00024 */
    =00041 QBGBGDR +4 , /* F - Actual number of allocated dire 00028 */
    =00045 QBGBGDT +4 , /* F - Actual number of allocated data 0002C */
    =00049 QBGBDRR +4 , /* F -  Directory-Entry-Reclaim Counte 00030 */
    =00053 QBGBDTR +4 , /* F -  Data-Entry-Reclaim Counter .   00034 */
    =00057 QBGBRXI +4 , /* F -  XI-Directory-Entry-Reclaim Cou 00038 */
    =00061 QBGBTCC +4 , /* F -  Total-Changed Counter .        0003C */
    =00065 QBGBDUP +1 , /* C - Duplex or simplex indicator     00040 */
  ,     /* QBGBDUY EQU x'000000C4' Duplexed                          */
  ,     /* QBGBDUS EQU x'00000000' Simplexed                         */
    =00066 RSVD0002 +3 , /* C - Not used                       00041 */
    =00069 QBGBSZ2 +4 , /* F - If the group buffer pool is dup 00044 */
    =00073 QBGBGDR2 +4 , /* F - If the group buffer pool is du 00048 */
    =00077 QBGBGDT2 +4 , /* F - If the group buffer pool is du 0004C */
,/* =00081 QBGBEND +0 ,    C -                                 00050 */
    .           /* End of DSECT */
  /* next byte at 81 */
  hex_QBGBGN = c2x(QBGBGN)
  hex_QBGBFLGS = c2x(QBGBFLGS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QBGBERC = c2x(QBGBERC)
  hex_QBGBERS = c2x(QBGBERS)
  hex_QBGBGR1 = c2x(QBGBGR1)
  hex_QBGBGR2 = c2x(QBGBGR2)
  hex_QBGBGCT = c2x(QBGBGCT)
  hex_QBGBGGT = c2x(QBGBGGT)
  hex_QBGBGAS = c2x(QBGBGAS)
  hex_QBGBGCS = c2x(QBGBGCS)
  hex_QBGBGCK = c2x(QBGBGCK)
  hex_QBGBGSZ = c2x(QBGBGSZ)
  hex_QBGBGDR = c2x(QBGBGDR)
  hex_QBGBGDT = c2x(QBGBGDT)
  hex_QBGBDRR = c2x(QBGBDRR)
  hex_QBGBDTR = c2x(QBGBDTR)
  hex_QBGBRXI = c2x(QBGBRXI)
  hex_QBGBTCC = c2x(QBGBTCC)
  hex_QBGBDUP = c2x(QBGBDUP)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QBGBSZ2 = c2x(QBGBSZ2)
  hex_QBGBGDR2 = c2x(QBGBGDR2)
  hex_QBGBGDT2 = c2x(QBGBGDT2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QBGB",desired_dsect) > 0)) then do
    void_rc = queue_QBGB_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QBGB:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QBGB_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QBGB:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group Buffer Pool id         x:" hex_QBGBGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Error flags - if non-zero, t x:" hex_QBGBFLGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Return code               x:" hex_QBGBERC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Reason code               x:" hex_QBGBERS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current directory entry / da x:" hex_QBGBGR1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pending directory entry / da x:" hex_QBGBGR2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Castout class level threshol x:" hex_QBGBGCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group buffer pool level thre x:" hex_QBGBGGT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current AUTOREC setting      x:" hex_QBGBGAS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current GBPCACHE setting     x:" hex_QBGBGCS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group buffer pool checkpoint x:" hex_QBGBGCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allocated size of the group  x:" hex_QBGBGSZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual number of allocated d x:" hex_QBGBGDR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual number of allocated d x:" hex_QBGBGDT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Directory-Entry-Reclaim Cou x:" hex_QBGBDRR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Data-Entry-Reclaim Counter  x:" hex_QBGBDTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       XI-Directory-Entry-Reclaim  x:" hex_QBGBRXI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Total-Changed Counter .     x:" hex_QBGBTCC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Duplex or simplex indicator  x:" hex_QBGBDUP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If the group buffer pool is  x:" hex_QBGBSZ2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If the group buffer pool is  x:" hex_QBGBGDR2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If the group buffer pool is  x:" hex_QBGBGDT2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: SM101 length is 0001C Accounting
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_SM101:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_SM101,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: SM101 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var smf_record.1 ,
    =00025 SM101BUF +4 , /* X - TEMPORARY POINTER TO BUFFER AR 00018 */
,/* =00029 SM101END +0 ,    C - START OF THE SELF DEFINING SEC 0001C */
    data_block_of_next_section           /* End of DSECT */
  /* next byte at 29 */
  hex_SM101BUF = c2x(SM101BUF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("SM101",desired_dsect) > 0)) then do
    void_rc = queue_SM101_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " SM101:"
    void_rc = write_print_data_out()
  end
  data_block_of_QWA0 = data_block_of_next_section
  void_rc = rexx_QWA0()
  if (dec_QWA01PSL > 0) then do
    if (dec_QWA01PSO > dec_SMFxLEN) then NOP
    else ,
    if (dec_QWA01PSO = 0) then NOP
    else ,
    if (dec_QWA01PSN = 0) then NOP
    else ,
    if ((dec_QWA01PSO +dec_QWA01PSL) > dec_SMFxLEN) then NOP
    else do
      ptr_QWA01PSO = dec_QWA01PSO + 1
      do qws_loop = 1 to dec_QWA01PSN
        data_block_of_QWHS = ,
          substr(smf_record.1,ptr_QWA01PSO,dec_QWA01PSL)
        void_rc = rexx_QWHS()
        ptr_QWA01PSO = ptr_QWA01PSO + dec_QWA01PSL
      end
    end
  end
  select
    when (dec_QWHSIID = 3) then do
      void_rc = rexx_sm101_0003()
    end
    when (dec_QWHSIID = 239) then do
      void_rc = rexx_sm101_0239()
    end
    otherwise do
      say "    IFCID process 101-"dec_QWHSIID
    end
  end
  return 0

queue_SM101_data_out:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TEMPORARY POINTER TO BUFFER  x:" hex_SM101BUF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 101 IFCID 3
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm101_0003:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm101_0003 uses QWA0:"
    void_rc = write_debug_data_out()
  end
  return 0
  ptr_QWS00R1O = dec_QWS00R1O + 1
  do qws_loop = 1 to dec_QWS00R1N
    data_block_of_QWSA = ,
      substr(smf_record.1,ptr_QWS00R1O,dec_QWS00R1L)
    void_rc = rexx_QWSA()
    ptr_QWS00R1O = ptr_QWS00R1O + dec_QWS00R1L
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 101 IFCID 239
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm101_0239:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm101_0239 uses QWA1:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWA0 length is 00070
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWA0:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWA0,112)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWA0 Length: 112"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWA0 ,
    =00001 QWA01PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWA01PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWA01PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWA01R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWA01R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWA01R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
    =00017 QWA01R2O +4 , /* R - OFFSET TO THE DATA SECTION     00010 */
    =00021 QWA01R2L +2 , /* X - LENGTH OF THE DATA SECTION     00014 */
    =00023 QWA01R2N +2 , /* X - NUMBER OF DATA SECTIONS        00016 */
    =00025 QWA01R3O +4 , /* R - OFFSET TO THE DATA SECTION     00018 */
    =00029 QWA01R3L +2 , /* X - LENGTH OF THE DATA SECTION     0001C */
    =00031 QWA01R3N +2 , /* X - NUMBER OF DATA SECTIONS        0001E */
    =00033 QWA01R4O +4 , /* R - OFFSET TO THE DATA SECTION     00020 */
    =00037 QWA01R4L +2 , /* X - LENGTH OF THE DATA SECTION     00024 */
    =00039 QWA01R4N +2 , /* X - NUMBER OF DATA SECTIONS        00026 */
    =00041 QWA01R5O +4 , /* R - OFFSET TO THE DATA SECTION     00028 */
    =00045 QWA01R5L +2 , /* X - LENGTH OF THE DATA SECTION     0002C */
    =00047 QWA01R5N +2 , /* X - NUMBER OF DATA SECTIONS        0002E */
    =00049 QWA01R6O +4 , /* R - OFFSET TO THE DATA SECTION     00030 */
    =00053 QWA01R6L +2 , /* X - LENGTH OF THE DATA SECTION     00034 */
    =00055 QWA01R6N +2 , /* X - NUMBER OF DATA SECTIONS        00036 */
    =00057 QWA01R7O +4 , /* R - OFFSET TO THE DATA SECTION     00038 */
    =00061 QWA01R7L +2 , /* X - LENGTH OF THE DATA SECTION     0003C */
    =00063 QWA01R7N +2 , /* X - NUMBER OF DATA SECTIONS        0003E */
    =00065 QWA01R8O +4 , /* R - OFFSET TO THE DATA SECTION     00040 */
    =00069 QWA01R8L +2 , /* X - LENGTH OF THE DATA SECTION     00044 */
    =00071 QWA01R8N +2 , /* X - NUMBER OF DATA SECTIONS        00046 */
    =00073 QWA01R9O +4 , /* R - OFFSET TO THE DATA SECTION     00048 */
    =00077 QWA01R9L +2 , /* X - LENGTH OF THE DATA SECTION     0004C */
    =00079 QWA01R9N +2 , /* X - NUMBER OF DATA SECTIONS        0004E */
    =00081 QWA01RAO +4 , /* R - OFFSET TO THE DATA SECTION     00050 */
    =00085 QWA01RAL +2 , /* X - LENGTH OF THE DATA SECTION     00054 */
    =00087 QWA01RAN +2 , /* X - NUMBER OF DATA SECTIONS        00056 */
    =00089 QWA01RBO +4 , /* R - OFFSET TO THE DATA SECTION     00058 */
    =00093 QWA01RBL +2 , /* X - LENGTH OF THE DATA SECTION     0005C */
    =00095 QWA01RBN +2 , /* X - NUMBER OF DATA SECTIONS        0005E */
    =00097 QWA01RCO +4 , /* R - OFFSET TO THE DATA SECTION     00060 */
    =00101 QWA01RCL +2 , /* X - LENGTH OF THE DATA SECTION     00064 */
    =00103 QWA01RCN +2 , /* X - NUMBER OF DATA SECTIONS        00066 */
    =00105 QWA01RDO +4 , /* R - OFFSET TO THE DATA SECTION     00068 */
    =00109 QWA01RDL +2 , /* X - LENGTH OF THE DATA SECTION     0006C */
    =00111 QWA01RDN +2 , /* X - NUMBER OF DATA SECTIONS        0006E */
,/* =00113 QWA01END +0 ,    C - END OF THE SELF DEFINING SECTI 00070 */
    .           /* End of DSECT */
  /* next byte at 113 */
  dec_QWA01PSO = c2d(QWA01PSO)
  dec_QWA01PSL = c2d(QWA01PSL)
  dec_QWA01PSN = c2d(QWA01PSN)
  dec_QWA01R1O = c2d(QWA01R1O)
  dec_QWA01R1L = c2d(QWA01R1L)
  dec_QWA01R1N = c2d(QWA01R1N)
  dec_QWA01R2O = c2d(QWA01R2O)
  dec_QWA01R2L = c2d(QWA01R2L)
  dec_QWA01R2N = c2d(QWA01R2N)
  dec_QWA01R3O = c2d(QWA01R3O)
  dec_QWA01R3L = c2d(QWA01R3L)
  dec_QWA01R3N = c2d(QWA01R3N)
  dec_QWA01R4O = c2d(QWA01R4O)
  dec_QWA01R4L = c2d(QWA01R4L)
  dec_QWA01R4N = c2d(QWA01R4N)
  dec_QWA01R5O = c2d(QWA01R5O)
  dec_QWA01R5L = c2d(QWA01R5L)
  dec_QWA01R5N = c2d(QWA01R5N)
  dec_QWA01R6O = c2d(QWA01R6O)
  dec_QWA01R6L = c2d(QWA01R6L)
  dec_QWA01R6N = c2d(QWA01R6N)
  dec_QWA01R7O = c2d(QWA01R7O)
  dec_QWA01R7L = c2d(QWA01R7L)
  dec_QWA01R7N = c2d(QWA01R7N)
  dec_QWA01R8O = c2d(QWA01R8O)
  dec_QWA01R8L = c2d(QWA01R8L)
  dec_QWA01R8N = c2d(QWA01R8N)
  dec_QWA01R9O = c2d(QWA01R9O)
  dec_QWA01R9L = c2d(QWA01R9L)
  dec_QWA01R9N = c2d(QWA01R9N)
  dec_QWA01RAO = c2d(QWA01RAO)
  dec_QWA01RAL = c2d(QWA01RAL)
  dec_QWA01RAN = c2d(QWA01RAN)
  dec_QWA01RBO = c2d(QWA01RBO)
  dec_QWA01RBL = c2d(QWA01RBL)
  dec_QWA01RBN = c2d(QWA01RBN)
  dec_QWA01RCO = c2d(QWA01RCO)
  dec_QWA01RCL = c2d(QWA01RCL)
  dec_QWA01RCN = c2d(QWA01RCN)
  dec_QWA01RDO = c2d(QWA01RDO)
  dec_QWA01RDL = c2d(QWA01RDL)
  dec_QWA01RDN = c2d(QWA01RDN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWA0",desired_dsect) > 0)) then do
    void_rc = queue_QWA0_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWA0:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWA0_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWA0:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE PRODUCT SECTIO  :" dec_QWA01PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTIO  :" dec_QWA01PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS    :" dec_QWA01PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R1N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R2O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R2L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R2N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R3O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R3L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R3N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R4O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R4L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R4N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R5O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R5L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R5N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R6O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R6L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R6N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R7O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R7L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R7N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R8O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R8L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R8N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01R9O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01R9L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01R9N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01RAO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01RAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01RAN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01RBO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01RBL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01RBN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01RCO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01RCL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01RCN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWA01RDO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWA01RDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWA01RDN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWAC length is 00268
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWAC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWAC,616)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWAC Length: 616"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWAC ,
    =00001 QWACBSC +8 , /* X - BEGINNING STORE CLOCK VALUE     00000 */
    =00009 QWACESC +8 , /* X - ENDING    STORE CLOCK VALUE     00008 */
    =00017 QWACBJST +8 , /* X - Beginning CPU time for all env 00010 */
    =00025 QWACEJST +8 , /* X - Ending CPU time for all enviro 00018 */
    =00033 QWACBSRB +8 , /* X - SRB times are no longer set by 00020 */
    =00041 QWACESRB +8 , /* X - SRB times are no longer set by 00028 */
    =00049 QWACRINV +4 , /* X - REASON ACCOUNTING IS INVOKED - 00030 */
    =00053 QWACNID +16 , /* C - NETWORK ID VALUE FROM CCB      00034 */
    =00069 QWACCOMM +4 , /* F - NUMBER OF COMMIT PHASE 2 REQUE 00044 */
    =00073 QWACABRT +4 , /* F - NUMBER OF ABORT REQUESTS       00048 */
,/* =00077 QWAC1 +0 ,    F -                                   0004C */
    =00077 QWACASC +8 , /* C - ACCUMULATED ELAPSED TIME IN DB2 0004C */
    =00085 QWACAJST +8 , /* C - Accumulated CPU time consumed  00054 */
    =00093 QWACASRB +8 , /* C - SRB times are no longer set by 0005C */
    =00101 QWACAWTI +8 , /* C - ACCUMULATED I/O ELAPSED WAIT T 00064 */
    =00109 QWACAWTL +8 , /* C - Accumulated wait time due to l 0006C */
    =00117 QWACARNA +4 , /* F - NUMBER OF DB2 ENTRY/EXIT EVENT 00074 */
    =00121 QWACARNE +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 00078 */
    =00125 QWACAWTR +8 , /* C - ACCUMULATED WAIT TIME FOR READ 0007C */
    =00133 QWACAWTW +8 , /* C - ACCUMULATED WAIT TIME FOR WRIT 00084 */
    =00141 QWACAWTE +8 , /* C - Accumulated wait time due to s 0008C */
    =00149 RSVD0001 +8 , /* C - Not used                       00094 */
    =00157 QWACARNL +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 0009C */
    =00161 QWACARNR +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000A0 */
    =00165 QWACARNW +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000A4 */
    =00169 QWACARNS +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000A8 */
    =00173 RSVD0002 +4 , /* F - Not used                       000AC */
,/* =00177 QWAC2 +0 ,    F -                                   000B0 */
    =00177 QWACARLG +4 , /* F - Number of wait trace events pr 000B0 */
    =00181 QWACAWLG +8 , /* C - Accumulated wait time for a lo 000B4 */
    =00189 QWACALBC +4 , /* F - Number of wait trace events pr 000BC */
    =00193 QWACALBW +8 , /* C - Accumulated wait time for TCP/ 000C0 */
    =00201 RSVD0003 +12 , /* C - Not used                      000C8 */
    =00213 QWACAWTP +8 , /* C - Accumulated wait time due to p 000D4 */
    =00221 QWACARNH +4 , /* F - Number of wait trace events pr 000DC */
,/* =00225 QWAC3 +0 ,    F -                                   000E0 */
    =00225 QWACFLGS +2 , /* H - FLAGS                          000E0 */
  ,     /* QWACCLS2 EQU x'00000001' THERE IS NON-ZERO ACCOUNTING     */
  ,     /* QWACCLS3 EQU x'00000002' THERE IS NON-ZERO ACCOUNTING     */
  ,     /* QWACCL2O EQU x'00000004' Class 2 accounting data          */
  ,     /* QWACCL3O EQU x'00000008' Class 3 accounting data          */
  ,     /* QWACCL7O EQU x'00000010' Class 7 accounting data          */
  ,     /* QWACCL8O EQU x'00000020' Class 8 accounting data          */
  ,     /* QWACPARR EQU x'00000040' There is rollup data for         */
  ,     /* QWACBADE EQU x'00000400' An error was detected in the     */
    =00227 QWACPKGN +2 , /* H - NUMBER OF PACKAGES/DBRMs FOR   000E2 */
,/* =00229 QWACA261 +0 ,    F -                                000E4 */
    =00229 QWACAWTG +8 , /* C - Accumulated wait time due to s 000E4 */
    =00237 QWACAWTJ +8 , /* C - Accumulated wait time due to g 000EC */
    =00245 QWACARNG +4 , /* F - Number of wait trace events pr 000F4 */
    =00249 QWACARNJ +4 , /* F - Number of wait trace events pr 000F8 */
  ,     /* QWACB302 EQU x'000000FC'                                  */
    =00253 QWACSPCP +8 , /* C - The accumlated CPU time used t 000FC */
  ,     /* QWACA302 EQU x'00000104'                                  */
    =00261 QWACSPTT +8 , /* C - The accumulated CPU time consu 00104 */
    =00269 QWACSPNE +4 , /* F - the number of SQL entry/exit e 0010C */
    =00273 QWACCAST +8 , /* C - the total elapsed time spent w 00110 */
    =00281 QWACCANM +4 , /* F - the number of times an SQL CAL 00118 */
,/* =00285 QWACA282 +0 ,    F -                                0011C */
    =00285 QWACPCNT +4 , /* F - Number of parallel/subtasks cr 0011C */
    =00289 QWACPACE +4 , /* A - Correlating token for parallel 00120 */
    =00293 QWACSUCV +4 , /* X - THIS FIELD CONTAINS THE SU CON 00124 */
    =00297 QWACWLME +8 , /* C - The MVS Workload Manager Servi 00128 */
    =00305 QWACLRN +4 , /* F - log records written             00130 */
    =00309 RSVD0004 +2 , /* X -                                00134 */
,/* =00311 QWACLRAB +0 ,    C - bytes logged                   00136 */
    =00311 QWACLRA2 +2 , /* X - Hi-order 2 bytes               00136 */
    =00313 QWACLRA4 +4 , /* X - Lo-order 4 bytes               00138 */
  ,     /* QWACB303 EQU x'0000013C'                                  */
    =00317 QWACUDCP +8 , /* C - The accumlated CPU time used t 0013C */
  ,     /* QWACA303 EQU x'00000144'                                  */
    =00325 QWACUDTT +8 , /* C - The accumulated CPU time consu 00144 */
    =00333 QWACUDNE +4 , /* F - the number of SQL entry/exit e 0014C */
    =00337 QWACUDST +8 , /* C - the total elapsed time spent w 00150 */
    =00345 QWACUDEA +8 , /* C - The total elapsed time spent i 00158 */
    =00353 QWACUDEB +8 , /* C - The total elapsed time spent e 00160 */
  ,     /* QWACB304 EQU x'00000168'                                  */
    =00361 QWACTRTT +8 , /* C - The accumulated CPU time consu 00168 */
    =00369 QWACTRET +8 , /* C - The accumulated elapsed time e 00170 */
    =00377 RSVD0005 +16 , /* C - Reserved                      00178 */
    =00393 QWACSPEA +8 , /* C - The total elapsed time spent i 00188 */
    =00401 QWACSPEB +8 , /* C - The total elapsed time spent e 00190 */
    =00409 QWACTRTE +8 , /* C - The accumulated CPU time consu 00198 */
    =00417 QWACTREE +8 , /* C - The accumulated elapsed time e 001A0 */
  ,     /* QWACESVP EQU x'000001A8'                                  */
    =00425 QWACSVPT +4 , /* F - the number of savepoint reques 001A8 */
    =00429 QWACRLSV +4 , /* F - the number of release svpt req 001AC */
    =00433 QWACRBSV +4 , /* F - the number of rollback to svpt 001B0 */
  ,     /* QWAC2AW EQU x'000001B4'                                   */
    =00437 QWACAWTK +8 , /* C - Accumulated wait time due to g 001B4 */
    =00445 QWACAWTM +8 , /* C - Accumulated wait time due to g 001BC */
    =00453 QWACAWTN +8 , /* C - Accumulated wait time due to g 001C4 */
    =00461 QWACAWTO +8 , /* C - Accumulated wait time due to g 001CC */
    =00469 QWACAWTQ +8 , /* C - Accumulated wait time due to g 001D4 */
    =00477 QWACARNK +4 , /* F - Number of wait trace events pr 001DC */
    =00481 QWACARNM +4 , /* F - Number of wait trace events pr 001E0 */
    =00485 QWACARNN +4 , /* F - Number of wait trace events pr 001E4 */
    =00489 QWACARNO +4 , /* F - Number of wait trace events pr 001E8 */
    =00493 QWACARNQ +4 , /* F - Number of wait trace events pr 001EC */
  ,     /* QWACZIIP EQU x'000001F0'                                  */
    =00497 QWACCLS1_zIIP +8 , /* C - Accumulated CPU time cons 001F0 */
    =00505 QWACCLS2_zIIP +8 , /* C - Accumulated CPU time cons 001F8 */
    =00513 QWACTRTT_zIIP +8 , /* C - Accumulated CPU time cons 00200 */
    =00521 QWACZIIP_ELIGIBLE +8 , /* C - Accumulated CPU execu 00208 */
    =00529 QWACSPNF_zIIP +8 , /* C - Accumulated CPU time cons 00210 */
    =00537 QWACUDFNF_zIIP +8 , /* C - ** RESERVED FOR FUTURE F 00218 */
  ,     /* QWACNF EQU x'00000220'                                    */
    =00545 QWACSPNF_ELAP +8 , /* C - Accumulated elapsed time  00220 */
    =00553 QWACSPNF_CP +8 , /* C - Accumulated CPU time consum 00228 */
    =00561 QWACUDFNF_ELAP +8 , /* C - ** RESERVED FOR FUTURE F 00230 */
    =00569 QWACUDFNF_CP +8 , /* C - ** RESERVED FOR FUTURE FUN 00238 */
  ,     /* QWACSE EQU x'00000240'                                    */
    =00577 QWACSP_CLS1se +8 , /* C - The accumlated CPU time u 00240 */
    =00585 QWACSP_CLS2se +8 , /* C - The accumulated CPU time  00248 */
    =00593 QWACUDF_CLS1se +8 , /* C - The accumlated CPU time  00250 */
    =00601 QWACUDF_CLS2se +8 , /* C - The accumulated CPU time 00258 */
    =00609 QWACTRTE_se +8 , /* C - The accumulated CPU time co 00260 */
,/* =00617 QWACEND +0 ,    C -                                 00268 */
  ,     /* QWACRACC EQU x'00000001' ACCUMULATING DATA BY END USER FO */
  ,     /* QWACRSTG EQU x'00000002' ACCUMULATING DATA BY END USER FO */
  ,     /* QWACRSTL EQU x'00000003' ACCUMULATING DATA BY END USER FO */
  ,     /* QWACRIFI EQU x'00000004' IFI READS REQUEST FOR IFCID 147  */
  ,     /* QWACRSUS EQU x'00000006' SAME USER RESIGN-ON WITH SAME AU */
  ,     /* QWACRNUS EQU x'00000008' NEW USER - THE AUTHORIZATION ID  */
  ,     /* QWACRINA EQU x'0000000A' DDF THREAD IS BECOMING INACTIVE  */
  ,     /* QWACRIN2 EQU x'0000000B' DDF TYPE 2 INACT IS BECOMING INA */
  ,     /* QWACRDEA EQU x'0000000C' DEALLOCATION - NORMAL PROGRAM    */
  ,     /* QWACRAAC EQU x'0000000E' COMMIT - RRSAF THREAD SPECIFIED  */
  ,     /* QWACEOTN EQU x'00000010' END OF TASK - APPLICATION PROGRA */
  ,     /* QWACEOTA EQU x'00000014' END OF TASK - APPLICATION PROGRA */
  ,     /* QWACEOMA EQU x'00000018' END OF MEMORY - ABNORMAL TERMINA */
  ,     /* QWACRESI EQU x'0000001C' RESOLVE INDOUBT - ABNORMAL       */
  ,     /* QWACCANF EQU x'00000020' CANCEL FORCE - STOP FORCE COMMAN */
  ,     /* QWACETIN EQU x'00000028' END OF TASK - APPLICATION PROGRA */
  ,     /* QWACETIA EQU x'0000002C' END OF TASK - APPLICATION PROGRA */
  ,     /* QWACEMIA EQU x'00000030' END OF MEMORY - ABNORMAL TERMINA */
  ,     /* QWACCNFI EQU x'00000038' CANCEL FORCE - STOP FORCE COMMAN */
    .           /* End of DSECT */
  /* next byte at 617 */
  hex_QWACBSC = c2x(QWACBSC)
  hex_QWACESC = c2x(QWACESC)
  hex_QWACBJST = c2x(QWACBJST)
  hex_QWACEJST = c2x(QWACEJST)
  hex_QWACBSRB = c2x(QWACBSRB)
  hex_QWACESRB = c2x(QWACESRB)
  hex_QWACRINV = c2x(QWACRINV)
  hex_QWACNID = c2x(QWACNID)
  hex_QWACCOMM = c2x(QWACCOMM)
  hex_QWACABRT = c2x(QWACABRT)
  hex_QWACASC = c2x(QWACASC)
  hex_QWACAJST = c2x(QWACAJST)
  hex_QWACASRB = c2x(QWACASRB)
  hex_QWACAWTI = c2x(QWACAWTI)
  hex_QWACAWTL = c2x(QWACAWTL)
  hex_QWACARNA = c2x(QWACARNA)
  hex_QWACARNE = c2x(QWACARNE)
  hex_QWACAWTR = c2x(QWACAWTR)
  hex_QWACAWTW = c2x(QWACAWTW)
  hex_QWACAWTE = c2x(QWACAWTE)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWACARNL = c2x(QWACARNL)
  hex_QWACARNR = c2x(QWACARNR)
  hex_QWACARNW = c2x(QWACARNW)
  hex_QWACARNS = c2x(QWACARNS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QWACARLG = c2x(QWACARLG)
  hex_QWACAWLG = c2x(QWACAWLG)
  hex_QWACALBC = c2x(QWACALBC)
  hex_QWACALBW = c2x(QWACALBW)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QWACAWTP = c2x(QWACAWTP)
  hex_QWACARNH = c2x(QWACARNH)
  hex_QWACFLGS = c2x(QWACFLGS)
  hex_QWACPKGN = c2x(QWACPKGN)
  hex_QWACAWTG = c2x(QWACAWTG)
  hex_QWACAWTJ = c2x(QWACAWTJ)
  hex_QWACARNG = c2x(QWACARNG)
  hex_QWACARNJ = c2x(QWACARNJ)
  hex_QWACSPCP = c2x(QWACSPCP)
  hex_QWACSPTT = c2x(QWACSPTT)
  hex_QWACSPNE = c2x(QWACSPNE)
  hex_QWACCAST = c2x(QWACCAST)
  hex_QWACCANM = c2x(QWACCANM)
  hex_QWACPCNT = c2x(QWACPCNT)
  hex_QWACPACE = c2x(QWACPACE)
  hex_QWACSUCV = c2x(QWACSUCV)
  hex_QWACWLME = c2x(QWACWLME)
  hex_QWACLRN = c2x(QWACLRN)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QWACLRA2 = c2x(QWACLRA2)
  hex_QWACLRA4 = c2x(QWACLRA4)
  hex_QWACUDCP = c2x(QWACUDCP)
  hex_QWACUDTT = c2x(QWACUDTT)
  hex_QWACUDNE = c2x(QWACUDNE)
  hex_QWACUDST = c2x(QWACUDST)
  hex_QWACUDEA = c2x(QWACUDEA)
  hex_QWACUDEB = c2x(QWACUDEB)
  hex_QWACTRTT = c2x(QWACTRTT)
  hex_QWACTRET = c2x(QWACTRET)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QWACSPEA = c2x(QWACSPEA)
  hex_QWACSPEB = c2x(QWACSPEB)
  hex_QWACTRTE = c2x(QWACTRTE)
  hex_QWACTREE = c2x(QWACTREE)
  hex_QWACSVPT = c2x(QWACSVPT)
  hex_QWACRLSV = c2x(QWACRLSV)
  hex_QWACRBSV = c2x(QWACRBSV)
  hex_QWACAWTK = c2x(QWACAWTK)
  hex_QWACAWTM = c2x(QWACAWTM)
  hex_QWACAWTN = c2x(QWACAWTN)
  hex_QWACAWTO = c2x(QWACAWTO)
  hex_QWACAWTQ = c2x(QWACAWTQ)
  hex_QWACARNK = c2x(QWACARNK)
  hex_QWACARNM = c2x(QWACARNM)
  hex_QWACARNN = c2x(QWACARNN)
  hex_QWACARNO = c2x(QWACARNO)
  hex_QWACARNQ = c2x(QWACARNQ)
  hex_QWACCLS1_zIIP = c2x(QWACCLS1_zIIP)
  hex_QWACCLS2_zIIP = c2x(QWACCLS2_zIIP)
  hex_QWACTRTT_zIIP = c2x(QWACTRTT_zIIP)
  hex_QWACZIIP_ELIGIBLE = c2x(QWACZIIP_ELIGIBLE)
  hex_QWACSPNF_zIIP = c2x(QWACSPNF_zIIP)
  hex_QWACUDFNF_zIIP = c2x(QWACUDFNF_zIIP)
  hex_QWACSPNF_ELAP = c2x(QWACSPNF_ELAP)
  hex_QWACSPNF_CP = c2x(QWACSPNF_CP)
  hex_QWACUDFNF_ELAP = c2x(QWACUDFNF_ELAP)
  hex_QWACUDFNF_CP = c2x(QWACUDFNF_CP)
  hex_QWACSP_CLS1se = c2x(QWACSP_CLS1se)
  hex_QWACSP_CLS2se = c2x(QWACSP_CLS2se)
  hex_QWACUDF_CLS1se = c2x(QWACUDF_CLS1se)
  hex_QWACUDF_CLS2se = c2x(QWACUDF_CLS2se)
  hex_QWACTRTE_se = c2x(QWACTRTE_se)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWAC",desired_dsect) > 0)) then do
    void_rc = queue_QWAC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWAC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWAC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWAC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BEGINNING STORE CLOCK VALUE  x:" hex_QWACBSC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENDING    STORE CLOCK VALUE  x:" hex_QWACESC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU time for all e x:" hex_QWACBJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Ending CPU time for all envi x:" hex_QWACEJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SRB times are no longer set  x:" hex_QWACBSRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SRB times are no longer set  x:" hex_QWACESRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON ACCOUNTING IS INVOKED x:" hex_QWACRINV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NETWORK ID VALUE FROM CCB    x:" hex_QWACNID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF COMMIT PHASE 2 REQ x:" hex_QWACCOMM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ABORT REQUESTS     x:" hex_QWACABRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ELAPSED TIME IN  x:" hex_QWACASC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time consume x:" hex_QWACAJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SRB times are no longer set  x:" hex_QWACASRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED I/O ELAPSED WAIT x:" hex_QWACAWTI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DB2 ENTRY/EXIT EVE x:" hex_QWACARNA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QWACARNE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED WAIT TIME FOR RE x:" hex_QWACAWTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED WAIT TIME FOR WR x:" hex_QWACAWTW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QWACARNL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QWACARNR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QWACARNW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QWACARNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARLG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for a  x:" hex_QWACAWLG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACALBC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for TC x:" hex_QWACALBW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QWACFLGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PACKAGES/DBRMs FOR x:" hex_QWACPKGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumlated CPU time used x:" hex_QWACSPCP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACSPTT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of SQL entry/exit x:" hex_QWACSPNE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the total elapsed time spent x:" hex_QWACCAST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of times an SQL C x:" hex_QWACCANM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of parallel/subtasks  x:" hex_QWACPCNT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Correlating token for parall x:" hex_QWACPACE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS FIELD CONTAINS THE SU C x:" hex_QWACSUCV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The MVS Workload Manager Ser x:" hex_QWACWLME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      log records written          x:" hex_QWACLRN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Hi-order 2 bytes             x:" hex_QWACLRA2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Lo-order 4 bytes             x:" hex_QWACLRA4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumlated CPU time used x:" hex_QWACUDCP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACUDTT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of SQL entry/exit x:" hex_QWACUDNE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the total elapsed time spent x:" hex_QWACUDST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The total elapsed time spent x:" hex_QWACUDEA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The total elapsed time spent x:" hex_QWACUDEB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACTRTT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated elapsed time x:" hex_QWACTRET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The total elapsed time spent x:" hex_QWACSPEA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The total elapsed time spent x:" hex_QWACSPEB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACTRTE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated elapsed time x:" hex_QWACTREE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of savepoint requ x:" hex_QWACSVPT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of release svpt r x:" hex_QWACRLSV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of rollback to sv x:" hex_QWACRBSV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWACAWTQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWACARNQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time consume x:" hex_QWACCLS1_zIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time consume x:" hex_QWACCLS2_zIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time consume x:" hex_QWACTRTT_zIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU executed on  x:" hex_QWACZIIP_ELIGIBLE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time consume x:" hex_QWACSPNF_zIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ** RESERVED FOR FUTURE FUNCT x:" hex_QWACUDFNF_zIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated elapsed time con x:" hex_QWACSPNF_ELAP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time consume x:" hex_QWACSPNF_CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ** RESERVED FOR FUTURE FUNCT x:" hex_QWACUDFNF_ELAP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ** RESERVED FOR FUTURE FUNCT x:" hex_QWACUDFNF_CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumlated CPU time used x:" hex_QWACSP_CLS1se
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACSP_CLS2se
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumlated CPU time used x:" hex_QWACUDF_CLS1se
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACUDF_CLS2se
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accumulated CPU time con x:" hex_QWACTRTE_se
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQBAC length is 00040
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQBAC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQBAC,64)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQBAC Length: 64"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQBAC ,
,/* =00001 QBAC +0 ,    D -                                    00000 */
    =00001 QBACPID +4 , /* F - BUFFER POOL ID                  00000 */
    =00005 QBACGET +4 , /* F - # OF GET PAGE REQUESTS ISSUED.  00004 */
    =00009 QBACSWS +4 , /* F - # OF SETW ISSUED FOR SYSTEM PAG 00008 */
    =00013 RSVD0001 +4 , /* F - RESERVED                       0000C */
    =00017 QBACRIO +4 , /* F - # OF SYNCHRONOUS READ I/O       00010 */
    =00021 QBACSEQ +4 , /* F - # OF SEQ PREFETCH REQUESTED     00014 */
    =00025 QBACIMW +4 , /* F - # OF IMMEDIATE (SYNCHRONOUS) WR 00018 */
    =00029 QBACLPF +4 , /* F - # OF LIST PREFETCH REQUESTED    0001C */
    =00033 QBACDPF +4 , /* F - # OF DYNAMIC PREFETCH REQUESTED 00020 */
    =00037 RSVD0002 +4 , /* F - RESERVED                       00024 */
    =00041 RSVD0003 +4 , /* F - RESERVED                       00028 */
    =00045 RSVD0004 +4 , /* F - RESERVED                       0002C */
    =00049 RSVD0005 +4 , /* F - RESERVED                       00030 */
    =00053 QBACNGT +4 , /* F - # OF UNSUCCESSFUL GET PAGE OPER 00034 */
    =00057 QBACSIO +4 , /* F - # OF ASYNCHRONOUS PAGES READ BY 00038 */
    =00061 RSVD0006 +4 , /* F - RESERVED                       0003C */
,/* =00065 QBACEND +0 ,    F -                                 00040 */
    .           /* End of DSECT */
  /* next byte at 65 */
  hex_QBACPID = c2x(QBACPID)
  hex_QBACGET = c2x(QBACGET)
  hex_QBACSWS = c2x(QBACSWS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QBACRIO = c2x(QBACRIO)
  hex_QBACSEQ = c2x(QBACSEQ)
  hex_QBACIMW = c2x(QBACIMW)
  hex_QBACLPF = c2x(QBACLPF)
  hex_QBACDPF = c2x(QBACDPF)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QBACNGT = c2x(QBACNGT)
  hex_QBACSIO = c2x(QBACSIO)
  hex_RSVD0006 = c2x(RSVD0006)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQBAC",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQBAC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQBAC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQBAC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQBAC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL ID               x:" hex_QBACPID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF GET PAGE REQUESTS ISSUE x:" hex_QBACGET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SETW ISSUED FOR SYSTEM  x:" hex_QBACSWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SYNCHRONOUS READ I/O    x:" hex_QBACRIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF SEQ PREFETCH REQUESTED  x:" hex_QBACSEQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF IMMEDIATE (SYNCHRONOUS) x:" hex_QBACIMW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF LIST PREFETCH REQUESTED x:" hex_QBACLPF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DYNAMIC PREFETCH REQUES x:" hex_QBACDPF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF UNSUCCESSFUL GET PAGE O x:" hex_QBACNGT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ASYNCHRONOUS PAGES READ x:" hex_QBACSIO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0006
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QLAC length is 000E8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QLAC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QLAC,232)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QLAC Length: 232"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QLAC ,
    =00001 QLACLOCN +16 , /* C - %U LOCATION NAME OF THE  REMO 00000 */
    =00017 QLACSQLS +4 , /* F - NUMBER OF SQL STATEMENTS SENT  00010 */
    =00021 QLACSQLR +4 , /* F - NUMBER OF SQL STATEMENTS       00014 */
    =00025 QLACROWS +4 , /* F - NUMBER OF ROWS OF DATA SENT TO 00018 */
    =00029 QLACROWR +4 , /* F - NUMBER OF ROWS OF DATA         0001C */
    =00033 QLACBYTS +4 , /* F - NUMBER OF BYTES OF DATA SENT   00020 */
    =00037 QLACBYTR +4 , /* F - NUMBER OF BYTES OF DATA        00024 */
    =00041 QLACCNVS +4 , /* F - NUMBER OF CONVERSATIONS THAT   00028 */
    =00045 QLACCNVR +4 , /* F - NUMBER OF CONVERSATIONS THAT   0002C */
    =00049 QLACMSGS +4 , /* F - NUMBER OF MESSAGES SENT TO     00030 */
    =00053 QLACMSGR +4 , /* F - NUMBER OF MESSAGES RECEIVED    00034 */
    =00057 QLACTRNS +4 , /* F - NUMBER OF DATABASE ACCESS THRE 00038 */
    =00061 QLACTRNR +4 , /* F - NUMBER OF DATABASE ACCESS THRE 0003C */
    =00065 QLACCOMS +4 , /* F - NUMBER OF COMMIT REQUESTS SENT 00040 */
    =00069 QLACCOMR +4 , /* F - NUMBER OF COMMIT REQUESTS      00044 */
    =00073 QLACABRS +4 , /* F - NUMBER OF ABORT REQUESTS SENT  00048 */
    =00077 QLACABRR +4 , /* F - NUMBER OF ABORT REQUESTS       0004C */
    =00081 QLACCNVQ +4 , /* F - NUMBER OF CONVERSATION REQUEST 00050 */
    =00085 QLACCPUL +8 , /* X - ELAPSED TIME AT THE LOCAL SITE 00054 */
    =00093 QLACCPUR +8 , /* X - ELAPSED DATA BASE ACCESS AGENT 0005C */
    =00101 QLACDBAT +8 , /* X - DATA BASE ACCESS AGENT CPU TIM 00064 */
    =00109 QLACCBLB +4 , /* F - NUMBER OF TIMES A SWITCH WAS M 0006C */
    =00113 QLACRBND +4 , /* F - NUMBER OF SQL STATEMENTS THAT  00070 */
    =00117 QLACBROW +4 , /* F - NUMBER OF ROWS IN THE MESSAGE  00074 */
    =00121 QLACBTBF +4 , /* F - NUMBER OF BLOCKS TRANSMITTED U 00078 */
    =00125 QLACBRBF +4 , /* F - NUMBER OF BLOCKS RECEIVED USIN 0007C */
    =00129 QLACCNVA +4 , /* F - NUMBER OF SUCCESSFUL           00080 */
    =00133 QLACCNVT +4 , /* F - NUMBER OF CONVERSATIONS DEALLO 00084 */
    =00137 QLACCIEL +4 , /* F - LARGEST (QLACCNVA - QLACCNVT)  00088 */
    =00141 QLACFLGS +1 , /* C - FLAG BYTE                      0008C */
  ,     /* QLACFLG0 EQU x'00000080' (S)                              */
  ,     /* QLACFLG1 EQU x'00000040' ON IF SYSTEM DIRECTED ACCESS USE */
  ,     /* QLACFLG2 EQU x'00000020' ON IF APPLICATION DIRECTED ACCES */
  ,     /* QLACFLG3 EQU x'00000010' (S)                              */
  ,     /* QLACFLG4 EQU x'00000008' (S)                              */
  ,     /* QLACFLG5 EQU x'00000004' (S)                              */
  ,     /* QLACFLG6 EQU x'00000002' (S)                              */
  ,     /* QLACFLG7 EQU x'00000001' (S)                              */
    =00142 RSVD0001 +3 , /* C - RESERVED                       0008D */
    =00145 QLACPRSE +4 , /* F - THE NUMBER OF PREPARE REQUESTS 00090 */
    =00149 QLACPRRC +4 , /* F - THE NUMBER OF PREPARE REQUESTS 00094 */
    =00153 QLACLASE +4 , /* F - THE NUMBER OF LAST AGENT REQUE 00098 */
    =00157 QLACLARC +4 , /* F - THE NUMBER OF LAST AGENT REQUE 0009C */
    =00161 QLACCRSE +4 , /* F - THE NUMBER OF COMMIT REQUESTS  000A0 */
    =00165 QLACCRRC +4 , /* F - THE NUMBER OF COMMIT REQUESTS  000A4 */
    =00169 QLACBKSE +4 , /* F - THE NUMBER OF BACKOUT REQUESTS 000A8 */
    =00173 QLACBKRC +4 , /* F - THE NUMBER OF BACKOUT REQUESTS 000AC */
    =00177 QLACRRSE +4 , /* F - THE NUMBER OF FORGET RESPONSES 000B0 */
    =00181 QLACRRRC +4 , /* F - THE NUMBER OF FORGET RESPONSES 000B4 */
    =00185 QLACVYSE +4 , /* F - THE NUMBER OF REQUEST COMMIT R 000B8 */
    =00189 QLACVYRC +4 , /* F - THE NUMBER OF REQUEST COMMIT R 000BC */
    =00193 QLACVNSE +4 , /* F - THE NUMBER OF BACKOUT RESPONSE 000C0 */
    =00197 QLACVNRC +4 , /* F - THE NUMBER OF BACKOUT RESPONSE 000C4 */
    =00201 QLACINDT +4 , /* F - THE NUMBER OF THREADS THAT WEN 000C8 */
    =00205 QLACCPTR +4 , /* F - THE NUMBER OF COMMIT OPERATION 000CC */
    =00209 QLACRBTR +4 , /* F - THE NUMBER OF ROLLBACK OPERATI 000D0 */
    =00213 QLACPRID +8 , /* C - THE PRDID OF THE REMOTE LOCATI 000D4 */
    =00221 QLACMDWT +8 , /* C - TOTAL ELAPSED TIME SPENT       000DC */
    =00229 QLACLOCN_Off +2 , /* H - OFFSET FROM QLAC TO        000E4 */
    =00231 RSVD0002 +2 , /* H - RESERVED                       000E6 */
,/* =00233 QLACEND +0 ,    F -                                 000E8 */
    .           /* End of DSECT */
  /* next byte at 233 */
  hex_QLACLOCN = c2x(QLACLOCN)
  hex_QLACSQLS = c2x(QLACSQLS)
  hex_QLACSQLR = c2x(QLACSQLR)
  hex_QLACROWS = c2x(QLACROWS)
  hex_QLACROWR = c2x(QLACROWR)
  hex_QLACBYTS = c2x(QLACBYTS)
  hex_QLACBYTR = c2x(QLACBYTR)
  hex_QLACCNVS = c2x(QLACCNVS)
  hex_QLACCNVR = c2x(QLACCNVR)
  hex_QLACMSGS = c2x(QLACMSGS)
  hex_QLACMSGR = c2x(QLACMSGR)
  hex_QLACTRNS = c2x(QLACTRNS)
  hex_QLACTRNR = c2x(QLACTRNR)
  hex_QLACCOMS = c2x(QLACCOMS)
  hex_QLACCOMR = c2x(QLACCOMR)
  hex_QLACABRS = c2x(QLACABRS)
  hex_QLACABRR = c2x(QLACABRR)
  hex_QLACCNVQ = c2x(QLACCNVQ)
  hex_QLACCPUL = c2x(QLACCPUL)
  hex_QLACCPUR = c2x(QLACCPUR)
  hex_QLACDBAT = c2x(QLACDBAT)
  hex_QLACCBLB = c2x(QLACCBLB)
  hex_QLACRBND = c2x(QLACRBND)
  hex_QLACBROW = c2x(QLACBROW)
  hex_QLACBTBF = c2x(QLACBTBF)
  hex_QLACBRBF = c2x(QLACBRBF)
  hex_QLACCNVA = c2x(QLACCNVA)
  hex_QLACCNVT = c2x(QLACCNVT)
  hex_QLACCIEL = c2x(QLACCIEL)
  hex_QLACFLGS = c2x(QLACFLGS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QLACPRSE = c2x(QLACPRSE)
  hex_QLACPRRC = c2x(QLACPRRC)
  hex_QLACLASE = c2x(QLACLASE)
  hex_QLACLARC = c2x(QLACLARC)
  hex_QLACCRSE = c2x(QLACCRSE)
  hex_QLACCRRC = c2x(QLACCRRC)
  hex_QLACBKSE = c2x(QLACBKSE)
  hex_QLACBKRC = c2x(QLACBKRC)
  hex_QLACRRSE = c2x(QLACRRSE)
  hex_QLACRRRC = c2x(QLACRRRC)
  hex_QLACVYSE = c2x(QLACVYSE)
  hex_QLACVYRC = c2x(QLACVYRC)
  hex_QLACVNSE = c2x(QLACVNSE)
  hex_QLACVNRC = c2x(QLACVNRC)
  hex_QLACINDT = c2x(QLACINDT)
  hex_QLACCPTR = c2x(QLACCPTR)
  hex_QLACRBTR = c2x(QLACRBTR)
  hex_QLACPRID = c2x(QLACPRID)
  hex_QLACMDWT = c2x(QLACMDWT)
  hex_QLACLOCN_Off = c2x(QLACLOCN_Off)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QLAC",desired_dsect) > 0)) then do
    void_rc = queue_QLAC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QLAC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QLAC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QLAC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME OF THE  REM x:" hex_QLACLOCN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SQL STATEMENTS SEN x:" hex_QLACSQLS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SQL STATEMENTS     x:" hex_QLACSQLR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ROWS OF DATA SENT  x:" hex_QLACROWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ROWS OF DATA       x:" hex_QLACROWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BYTES OF DATA SENT x:" hex_QLACBYTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BYTES OF DATA      x:" hex_QLACBYTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CONVERSATIONS THAT x:" hex_QLACCNVS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CONVERSATIONS THAT x:" hex_QLACCNVR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MESSAGES SENT TO   x:" hex_QLACMSGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MESSAGES RECEIVED  x:" hex_QLACMSGR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATABASE ACCESS TH x:" hex_QLACTRNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATABASE ACCESS TH x:" hex_QLACTRNR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF COMMIT REQUESTS SE x:" hex_QLACCOMS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF COMMIT REQUESTS    x:" hex_QLACCOMR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ABORT REQUESTS SEN x:" hex_QLACABRS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ABORT REQUESTS     x:" hex_QLACABRR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CONVERSATION REQUE x:" hex_QLACCNVQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ELAPSED TIME AT THE LOCAL SI x:" hex_QLACCPUL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ELAPSED DATA BASE ACCESS AGE x:" hex_QLACCPUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA BASE ACCESS AGENT CPU T x:" hex_QLACDBAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF TIMES A SWITCH WAS x:" hex_QLACCBLB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SQL STATEMENTS THA x:" hex_QLACRBND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ROWS IN THE MESSAG x:" hex_QLACBROW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BLOCKS TRANSMITTED x:" hex_QLACBTBF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BLOCKS RECEIVED US x:" hex_QLACBRBF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SUCCESSFUL         x:" hex_QLACCNVA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CONVERSATIONS DEAL x:" hex_QLACCNVT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LARGEST (QLACCNVA - QLACCNVT x:" hex_QLACCIEL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BYTE                    x:" hex_QLACFLGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF PREPARE REQUES x:" hex_QLACPRSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF PREPARE REQUES x:" hex_QLACPRRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF LAST AGENT REQ x:" hex_QLACLASE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF LAST AGENT REQ x:" hex_QLACLARC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF COMMIT REQUEST x:" hex_QLACCRSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF COMMIT REQUEST x:" hex_QLACCRRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF BACKOUT REQUES x:" hex_QLACBKSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF BACKOUT REQUES x:" hex_QLACBKRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF FORGET RESPONS x:" hex_QLACRRSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF FORGET RESPONS x:" hex_QLACRRRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF REQUEST COMMIT x:" hex_QLACVYSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF REQUEST COMMIT x:" hex_QLACVYRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF BACKOUT RESPON x:" hex_QLACVNSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF BACKOUT RESPON x:" hex_QLACVNRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF THREADS THAT W x:" hex_QLACINDT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF COMMIT OPERATI x:" hex_QLACCPTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE NUMBER OF ROLLBACK OPERA x:" hex_QLACRBTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE PRDID OF THE REMOTE LOCA x:" hex_QLACPRID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL ELAPSED TIME SPENT     x:" hex_QLACMDWT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QLAC TO          x:" hex_QLACLOCN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QLACLOCN_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QLACLOCN_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QLACLOCN_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QLACLOCN_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QLACLOCN_D ,
    =00001 QLACLOCN_Len +2 , /* H - LENGTH OF THE FOLLOWING FI 00000 */
,/* =00003 QLACLOCN_Var +0 ,    C - %U LOCATION NAME OF THE  R 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QLACLOCN_Len = c2x(QLACLOCN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QLACLOCN_D",desired_dsect) > 0)) then do
    void_rc = queue_QLACLOCN_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QLACLOCN_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QLACLOCN_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QLACLOCN_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE FOLLOWING FIEL x:" hex_QLACLOCN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QMDA length is 00111
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QMDA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QMDA,273)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QMDA Length: 273"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QMDA ,
    =00001 QMDAASLN +1 , /* X - the number of bytes used in    00000 */
,/* =00002 QMDAAINF +0 ,    C - Account Information            00001 */
,/* =00002 QMDAPRID +0 ,    C - the PRODUCT ID value.  This    00001 */
    =00002 QMDAPTYP +3 , /* C - Product Name                   00001 */
    =00005 QMDAPVER +2 , /* C - Product Version                00004 */
    =00007 QMDAPREL +2 , /* C - Product Release                00006 */
    =00009 QMDAPMOD +1 , /* C - Product Modification Level     00008 */
    =00010 QMDAASTR +247 , /* C - The accounting string for    00009 */
    =00257 QMDALOCN_Off +2 , /* H - Offset from QMDA to        00100 */
,/* =00259 QMDAEND +0 ,    C -                                 00102 */
    =00259 QMDASDSN +3 , /* C - QMDAPTYP DSN constant          00102 */
    =00262 QMDASARI +3 , /* C - QMDAPTYP ARI constant          00105 */
    =00265 QMDASSQL +3 , /* C - QMDAPTYP SQL constant          00108 */
    =00268 QMDASJCC +3 , /* C - QMDAPTYP JCC constant          0010B */
    =00271 QMDASQSQ +3 , /* C - QMDAPTYP QSQ constant          0010E */
    .           /* End of DSECT */
  /* next byte at 274 */
  hex_QMDAASLN = c2x(QMDAASLN)
  hex_QMDAPTYP = c2x(QMDAPTYP)
  hex_QMDAPVER = c2x(QMDAPVER)
  hex_QMDAPREL = c2x(QMDAPREL)
  hex_QMDAPMOD = c2x(QMDAPMOD)
  hex_QMDAASTR = c2x(QMDAASTR)
  hex_QMDALOCN_Off = c2x(QMDALOCN_Off)
  hex_QMDASDSN = c2x(QMDASDSN)
  hex_QMDASARI = c2x(QMDASARI)
  hex_QMDASSQL = c2x(QMDASSQL)
  hex_QMDASJCC = c2x(QMDASJCC)
  hex_QMDASQSQ = c2x(QMDASQSQ)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QMDA",desired_dsect) > 0)) then do
    void_rc = queue_QMDA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QMDA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QMDA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QMDA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      the number of bytes used in  x:" hex_QMDAASLN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Product Name                 x:" hex_QMDAPTYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Product Version              x:" hex_QMDAPVER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Product Release              x:" hex_QMDAPREL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Product Modification Level   x:" hex_QMDAPMOD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The accounting string for    x:" hex_QMDAASTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QMDA to          x:" hex_QMDALOCN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QMDAPTYP DSN constant        x:" hex_QMDASDSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QMDAPTYP ARI constant        x:" hex_QMDASARI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QMDAPTYP SQL constant        x:" hex_QMDASSQL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QMDAPTYP JCC constant        x:" hex_QMDASJCC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QMDAPTYP QSQ constant        x:" hex_QMDASQSQ
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QMDAINFO length is 0004C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QMDAINFO:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QMDAINFO,76)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QMDAINFO Length: 76"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QMDAINFO ,
    =00001 QMDALOCN +16 , /* C - %U The DB2 LOCATION name for  00000 */
    =00017 QMDANETN +8 , /* C - The SNA NETID of               00010 */
    =00025 QMDALUNM +8 , /* C - The SNA LU name of             00018 */
    =00033 QMDACNAM +8 , /* C - The DB2 Connection Name at     00020 */
    =00041 QMDACTYP +8 , /* C - The DB2 Connection Type at     00028 */
    =00049 QMDACORR +12 , /* C - The DB2 Correlation ID at     00030 */
    =00061 QMDAAUTH +8 , /* C - The DB2 AUTHID that the SQL    0003C */
    =00069 QMDAPLAN +8 , /* C - The DB2 PLAN that the SQL      00044 */
,/* =00077 QMDAACCT +0 ,    C - The MVS accounting string      0004C */
  ,     /* QMDAACCM EQU x'0000008E' QMDAINFO MVS accounting          */
    .           /* End of DSECT */
  /* next byte at 77 */
  hex_QMDALOCN = c2x(QMDALOCN)
  hex_QMDANETN = c2x(QMDANETN)
  hex_QMDALUNM = c2x(QMDALUNM)
  hex_QMDACNAM = c2x(QMDACNAM)
  hex_QMDACTYP = c2x(QMDACTYP)
  hex_QMDACORR = c2x(QMDACORR)
  hex_QMDAAUTH = c2x(QMDAAUTH)
  hex_QMDAPLAN = c2x(QMDAPLAN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QMDAINFO",desired_dsect) > 0)) then do
    void_rc = queue_QMDAINFO_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QMDAINFO:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QMDAINFO_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QMDAINFO:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U The DB2 LOCATION name for x:" hex_QMDALOCN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The SNA NETID of             x:" hex_QMDANETN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The SNA LU name of           x:" hex_QMDALUNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The DB2 Connection Name at   x:" hex_QMDACNAM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The DB2 Connection Type at   x:" hex_QMDACTYP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The DB2 Correlation ID at    x:" hex_QMDACORR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The DB2 AUTHID that the SQL  x:" hex_QMDAAUTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The DB2 PLAN that the SQL    x:" hex_QMDAPLAN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QMDASQLI length is 0002F
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QMDASQLI:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QMDASQLI,47)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QMDASQLI Length: 47"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QMDASQLI ,
    =00001 QMDAPLAT +18 , /* C - Client Platform               00000 */
    =00019 QMDAAPPL +20 , /* C - Client Application Name       00012 */
    =00039 QMDAATID +8 , /* C - Client Authid                  00026 */
    =00047 QMDASFLN +1 , /* X - Account Suffix Length.         0002E */
,/* =00048 QMDASUFX +0 ,    C - Account Suffix.                0002F */
  ,     /* QMDASUFM EQU x'000000C8' QMDASQLI Accounting Suffix       */
    .           /* End of DSECT */
  /* next byte at 48 */
  hex_QMDAPLAT = c2x(QMDAPLAT)
  hex_QMDAAPPL = c2x(QMDAAPPL)
  hex_QMDAATID = c2x(QMDAATID)
  hex_QMDASFLN = c2x(QMDASFLN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QMDASQLI",desired_dsect) > 0)) then do
    void_rc = queue_QMDASQLI_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QMDASQLI:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QMDASQLI_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QMDASQLI:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Client Platform              x:" hex_QMDAPLAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Client Application Name      x:" hex_QMDAAPPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Client Authid                x:" hex_QMDAATID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Account Suffix Length.       x:" hex_QMDASFLN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QMDALOCN_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QMDALOCN_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QMDALOCN_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QMDALOCN_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QMDALOCN_D ,
    =00001 QMDALOCN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QMDALOCN_Var +0 ,    C - %U The DB2 LOCATION name f 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QMDALOCN_Len = c2x(QMDALOCN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QMDALOCN_D",desired_dsect) > 0)) then do
    void_rc = queue_QMDALOCN_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QMDALOCN_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QMDALOCN_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QMDALOCN_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QMDALOCN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QIFA length is 00040
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QIFA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QIFA,64)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QIFA Length: 64"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QIFA ,
    =00001 QIFAAIET +8 , /* C - ACCUMULATED ELAPSED TIME SPENT 00000 */
    =00009 QIFAAITT +8 , /* C - ACCUMULATED TCB CPU TIME SPENT 00008 */
    =00017 QIFAAMBT +8 , /* C - ACCUMULATED ELAPSED TIME SPENT 00010 */
    =00025 QIFAAMLT +8 , /* C - ACCUMULATED ELAPSED TIME SPENT 00018 */
    =00033 QIFAANIF +4 , /* F - NUMBER OF ENTRY/EXIT TO IFI EV 00020 */
    =00037 QIFAANLR +4 , /* F - NUMBER OF DATA CAPTURE LOG REA 00024 */
    =00041 QIFAANRC +4 , /* F - NUMBER OF LOG RECORDS CAPTURED 00028 */
    =00045 QIFAANRR +4 , /* F - NUMBER OF DATA CAPTURE LOG REC 0002C */
    =00049 QIFAANDR +4 , /* F - NUMBER OF DATA CAPTURE DATA RO 00030 */
    =00053 QIFAANDD +4 , /* F - NUMBER OF DATA CAPTURE DATA DE 00034 */
    =00057 QIFAANMB +4 , /* F - NUMBER OF DATA CAPTURE DESCRIB 00038 */
    =00061 QIFAANTB +4 , /* F - NUMBER OF DATA CAPTURE TABLES  0003C */
,/* =00065 QIFAEND +0 ,    C -                                 00040 */
    .           /* End of DSECT */
  /* next byte at 65 */
  hex_QIFAAIET = c2x(QIFAAIET)
  hex_QIFAAITT = c2x(QIFAAITT)
  hex_QIFAAMBT = c2x(QIFAAMBT)
  hex_QIFAAMLT = c2x(QIFAAMLT)
  hex_QIFAANIF = c2x(QIFAANIF)
  hex_QIFAANLR = c2x(QIFAANLR)
  hex_QIFAANRC = c2x(QIFAANRC)
  hex_QIFAANRR = c2x(QIFAANRR)
  hex_QIFAANDR = c2x(QIFAANDR)
  hex_QIFAANDD = c2x(QIFAANDD)
  hex_QIFAANMB = c2x(QIFAANMB)
  hex_QIFAANTB = c2x(QIFAANTB)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QIFA",desired_dsect) > 0)) then do
    void_rc = queue_QIFA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QIFA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QIFA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QIFA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ELAPSED TIME SPE x:" hex_QIFAAIET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED TCB CPU TIME SPE x:" hex_QIFAAITT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ELAPSED TIME SPE x:" hex_QIFAAMBT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ELAPSED TIME SPE x:" hex_QIFAAMLT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ENTRY/EXIT TO IFI  x:" hex_QIFAANIF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE LOG R x:" hex_QIFAANLR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOG RECORDS CAPTUR x:" hex_QIFAANRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE LOG R x:" hex_QIFAANRR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DATA  x:" hex_QIFAANDR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DATA  x:" hex_QIFAANDD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DESCR x:" hex_QIFAANMB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE TABLE x:" hex_QIFAANTB
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QBGA length is 0005C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QBGA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QBGA,92)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QBGA Length: 92"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QBGA ,
    =00001 QBGAGN +4 , /* F - Group Buffer Pool id             00000 */
,/* =00005 QBGAACCT +0 ,    C -                                00004 */
    =00005 QBGAGG +4 , /* C - GetPages for GBP Dep pages       00004 */
    =00009 QBGAXD +4 , /* F - # of SES-reads                   00008 */
    =00013 QBGAXR +4 , /* F - # of SES-reads                   0000C */
    =00017 QBGAEX +4 , /* F - # of explicit XI s               00010 */
    =00021 QBGAMD +4 , /* F - # of SES-reads necessary         00014 */
    =00025 QBGAMR +4 , /* F - # of SES-reads                   00018 */
    =00029 QBGAMN +4 , /* F - # of pages read from GBP         0001C */
    =00033 QBGASW +4 , /* F - # of changed pages written to    00020 */
    =00037 QBGAWC +4 , /* F - # of clean pages written to      00024 */
    =00041 QBGADG +4 , /* F - # of  unregister page            00028 */
    =00045 QBGAWM +4 , /* F - # of Write and Register          0002C */
    =00049 QBGA2S +4 , /* F - # completion checks for writes   00030 */
    =00053 QBGAHS +4 , /* F - # Asynch IXLCACHE for P GBP      00034 */
    =00057 QBGA2H +4 , /* F - # Asynch IXLCACHE for S GBP      00038 */
    =00061 QBGAP1 +4 , /* F - # page P-lock lock requests for  0003C */
    =00065 QBGAP2 +4 , /* F - # page P-lock lock requests for  00040 */
    =00069 QBGAP3 +4 , /* F - # page P-lock lock requests for  00044 */
    =00073 QBGAU1 +4 , /* F - # page P-lock unlock requests    00048 */
    =00077 QBGAS1 +4 , /* F - # page P-lock lock suspensions   0004C */
    =00081 QBGAS2 +4 , /* F - # page P-lock lock suspensions   00050 */
    =00085 QBGAS3 +4 , /* F - # page P-lock lock suspensions   00054 */
    =00089 QBGAWS +4 , /* F - # of Write and Register (WAR)    00058 */
,/* =00093 QBGAEND +0 ,    C -                                 0005C */
    .           /* End of DSECT */
  /* next byte at 93 */
  hex_QBGAGN = c2x(QBGAGN)
  hex_QBGAGG = c2x(QBGAGG)
  hex_QBGAXD = c2x(QBGAXD)
  hex_QBGAXR = c2x(QBGAXR)
  hex_QBGAEX = c2x(QBGAEX)
  hex_QBGAMD = c2x(QBGAMD)
  hex_QBGAMR = c2x(QBGAMR)
  hex_QBGAMN = c2x(QBGAMN)
  hex_QBGASW = c2x(QBGASW)
  hex_QBGAWC = c2x(QBGAWC)
  hex_QBGADG = c2x(QBGADG)
  hex_QBGAWM = c2x(QBGAWM)
  hex_QBGA2S = c2x(QBGA2S)
  hex_QBGAHS = c2x(QBGAHS)
  hex_QBGA2H = c2x(QBGA2H)
  hex_QBGAP1 = c2x(QBGAP1)
  hex_QBGAP2 = c2x(QBGAP2)
  hex_QBGAP3 = c2x(QBGAP3)
  hex_QBGAU1 = c2x(QBGAU1)
  hex_QBGAS1 = c2x(QBGAS1)
  hex_QBGAS2 = c2x(QBGAS2)
  hex_QBGAS3 = c2x(QBGAS3)
  hex_QBGAWS = c2x(QBGAWS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QBGA",desired_dsect) > 0)) then do
    void_rc = queue_QBGA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QBGA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QBGA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QBGA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group Buffer Pool id         x:" hex_QBGAGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GetPages for GBP Dep pages   x:" hex_QBGAGG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SES-reads               x:" hex_QBGAXD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SES-reads               x:" hex_QBGAXR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of explicit XI s           x:" hex_QBGAEX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SES-reads necessary     x:" hex_QBGAMD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SES-reads               x:" hex_QBGAMR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of pages read from GBP     x:" hex_QBGAMN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed pages written t x:" hex_QBGASW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of clean pages written to  x:" hex_QBGAWC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of  unregister page        x:" hex_QBGADG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of Write and Register      x:" hex_QBGAWM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # completion checks for writ x:" hex_QBGA2S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Asynch IXLCACHE for P GBP  x:" hex_QBGAHS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Asynch IXLCACHE for S GBP  x:" hex_QBGA2H
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock requests  x:" hex_QBGAP1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock requests  x:" hex_QBGAP2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock requests  x:" hex_QBGAP3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock unlock request x:" hex_QBGAU1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock suspensio x:" hex_QBGAS1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock suspensio x:" hex_QBGAS2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # page P-lock lock suspensio x:" hex_QBGAS3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of Write and Register (WAR x:" hex_QBGAWS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QTGA length is 00030
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QTGA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QTGA,48)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QTGA Length: 48"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QTGA ,
    =00001 QTGALPLK +4 , /* F - # Lock requests for P-locks.   00000 */
    =00005 QTGACPLK +4 , /* F - # Change requests for P-locks. 00004 */
    =00009 QTGAUPLK +4 , /* F - # Unlock requests for P-locks. 00008 */
    =00013 QTGALSLM +4 , /* F - # lock requests propagated     0000C */
    =00017 QTGACSLM +4 , /* F - # change requests propagated   00010 */
    =00021 QTGAUSLM +4 , /* F - # unlock requests propagated   00014 */
    =00025 QTGAIGLO +4 , /* F - # suspends due to IRLM global  00018 */
    =00029 QTGASGLO +4 , /* F - # suspends due to XES global   0001C */
    =00033 QTGAFLSE +4 , /* F - # suspends due to sync-to-asyn 00020 */
    =00037 QTGADRTA +4 , /* F - # global lock or change        00024 */
    =00041 QTGANTFY +4 , /* F - # notify messages sent         00028 */
    =00045 QTGAFCNT +4 , /* F - # false contentions for LOCK   0002C */
,/* =00049 QTGAEND +0 ,    C -                                 00030 */
    .           /* End of DSECT */
  /* next byte at 49 */
  hex_QTGALPLK = c2x(QTGALPLK)
  hex_QTGACPLK = c2x(QTGACPLK)
  hex_QTGAUPLK = c2x(QTGAUPLK)
  hex_QTGALSLM = c2x(QTGALSLM)
  hex_QTGACSLM = c2x(QTGACSLM)
  hex_QTGAUSLM = c2x(QTGAUSLM)
  hex_QTGAIGLO = c2x(QTGAIGLO)
  hex_QTGASGLO = c2x(QTGASGLO)
  hex_QTGAFLSE = c2x(QTGAFLSE)
  hex_QTGADRTA = c2x(QTGADRTA)
  hex_QTGANTFY = c2x(QTGANTFY)
  hex_QTGAFCNT = c2x(QTGAFCNT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QTGA",desired_dsect) > 0)) then do
    void_rc = queue_QTGA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QTGA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QTGA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QTGA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Lock requests for P-locks. x:" hex_QTGALPLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Change requests for P-lock x:" hex_QTGACPLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Unlock requests for P-lock x:" hex_QTGAUPLK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # lock requests propagated   x:" hex_QTGALSLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # change requests propagated x:" hex_QTGACSLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # unlock requests propagated x:" hex_QTGAUSLM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # suspends due to IRLM globa x:" hex_QTGAIGLO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # suspends due to XES global x:" hex_QTGASGLO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # suspends due to sync-to-as x:" hex_QTGAFLSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # global lock or change      x:" hex_QTGADRTA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # notify messages sent       x:" hex_QTGANTFY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # false contentions for LOCK x:" hex_QTGAFCNT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWDA length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWDA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWDA,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWDA Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWDA ,
    =00001 QWDAXCQO +8 , /* C - On a child task this field is  00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QWDAXCQO = c2x(QWDAXCQO)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWDA",desired_dsect) > 0)) then do
    void_rc = queue_QWDA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWDA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWDA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWDA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      On a child task this field i x:" hex_QWDAXCQO
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWAX length is 00074
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWAX:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWAX,116)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWAX Length: 116"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWAX ,
,/* =00001 QWAX4 +0 ,    F -                                   00000 */
    =00001 QWAXALOG +8 , /* C - Accumulated wait time due to p 00000 */
    =00009 QWAXALCT +4 , /* F - Number of suspensions due to p 00008 */
,/* =00013 QWAXX +0 ,    F -                                   0000C */
    =00013 QWAXARND +4 , /* F - Number of wait trace events pr 0000C */
    =00017 QWAXAWDR +8 , /* C - Accumulated wait time for a dr 00010 */
    =00025 QWAXAWCL +8 , /* C - Accumulated wait time for a dr 00018 */
    =00033 QWAXARNC +4 , /* F - Number of wait trace events pr 00020 */
    =00037 QWAXAWAR +8 , /* C - Accumulated wait time for:     00024 */
    =00045 QWAXANAR +4 , /* F - Number of wait trace events pr 0002C */
    =00049 QWAXOCSE +8 , /* C - Accumulated wait time due to s 00030 */
    =00057 QWAXSLSE +8 , /* C - Accumulated wait time due to s 00038 */
    =00065 QWAXDSSE +8 , /* C - Accumulated wait time due to s 00040 */
    =00073 QWAXOTSE +8 , /* C - Accumulated wait time due to s 00048 */
    =00081 QWAXOCNS +4 , /* F - Number of wait trace events pr 00050 */
    =00085 QWAXSLNS +4 , /* F - Number of wait trace events pr 00054 */
    =00089 QWAXDSNS +4 , /* F - Number of wait trace events pr 00058 */
    =00093 QWAXOTNS +4 , /* F - Number of wait trace events pr 0005C */
,/* =00097 QWAX2X +0 ,    F -                                  00060 */
    =00097 QWAXAWFC +8 , /* C - Accumulated wait time for comm 00060 */
    =00105 QWAXFCCT +4 , /* F - Number of wait trace events pr 00068 */
    =00109 QWAXIXLE +4 , /* F - Number of wait trace events pr 0006C */
    =00113 QWAXIXLT +4 , /* F - Accumulated wait time for IXLC 00070 */
,/* =00117 QWAXEND +0 ,    C -                                 00074 */
    .           /* End of DSECT */
  /* next byte at 117 */
  hex_QWAXALOG = c2x(QWAXALOG)
  hex_QWAXALCT = c2x(QWAXALCT)
  hex_QWAXARND = c2x(QWAXARND)
  hex_QWAXAWDR = c2x(QWAXAWDR)
  hex_QWAXAWCL = c2x(QWAXAWCL)
  hex_QWAXARNC = c2x(QWAXARNC)
  hex_QWAXAWAR = c2x(QWAXAWAR)
  hex_QWAXANAR = c2x(QWAXANAR)
  hex_QWAXOCSE = c2x(QWAXOCSE)
  hex_QWAXSLSE = c2x(QWAXSLSE)
  hex_QWAXDSSE = c2x(QWAXDSSE)
  hex_QWAXOTSE = c2x(QWAXOTSE)
  hex_QWAXOCNS = c2x(QWAXOCNS)
  hex_QWAXSLNS = c2x(QWAXSLNS)
  hex_QWAXDSNS = c2x(QWAXDSNS)
  hex_QWAXOTNS = c2x(QWAXOTNS)
  hex_QWAXAWFC = c2x(QWAXAWFC)
  hex_QWAXFCCT = c2x(QWAXFCCT)
  hex_QWAXIXLE = c2x(QWAXIXLE)
  hex_QWAXIXLT = c2x(QWAXIXLT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWAX",desired_dsect) > 0)) then do
    void_rc = queue_QWAX_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWAX:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWAX_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWAX:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWAXALOG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of suspensions due to x:" hex_QWAXALCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXARND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for a  x:" hex_QWAXAWDR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for a  x:" hex_QWAXAWCL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXARNC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for:   x:" hex_QWAXAWAR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXANAR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWAXOCSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWAXSLSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWAXDSSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QWAXOTSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXOCNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXSLNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXDSNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXOTNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for co x:" hex_QWAXAWFC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXFCCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QWAXIXLE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for IX x:" hex_QWAXIXLT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: Q8AC length is 00084
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Q8AC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_Q8AC,132)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: Q8AC Length: 132"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_Q8AC ,
    =00001 Q8ACNAME_OFF +2 , /* X - ACCELERATOR SERVER ID OFFS 00000 */
    =00003 Q8ACPRID +8 , /* C - ACCELERATOR PRODUCT ID         00002 */
    =00011 Q8ACCONN +4 , /* X - # OF ACCELERATOR CONNECTS.     0000A */
    =00015 Q8ACREQ +4 , /* X - # OF ACCELERATOR REQUESTS.      0000E */
    =00019 Q8ACTOUT +4 , /* X - # OF TIMED OUT REQUESTS.       00012 */
    =00023 Q8ACFAIL +4 , /* X - # OF FAILED REQUESTS.          00016 */
    =00027 Q8ACBYTS +8 , /* X - # OF BYTES SENT.               0001A */
    =00035 Q8ACBYTR +8 , /* X - # OF BYTES RETURNED.           00022 */
    =00043 Q8ACMSGS +4 , /* X - # OF MESSAGES SENT.            0002A */
    =00047 Q8ACMSGR +4 , /* X - # OF MESSAGES RETURNED.        0002E */
    =00051 Q8ACBLKS +4 , /* X - # OF BLOCKS SENT               00032 */
    =00055 Q8ACBLKR +4 , /* X - # OF BLOCKS RETURNED.          00036 */
    =00059 Q8ACROWS +8 , /* X - # OF ROWS SENT                 0003A */
    =00067 Q8ACROWR +8 , /* X - # OF ROWS RETURNED.            00042 */
    =00075 Q8ACSCPU +8 , /* X - ACCELERATOR SERVICES CPU TIME. 0004A */
    =00083 Q8ACSELA +8 , /* X - ACCELERATOR SERVICES ELAPSED T 00052 */
    =00091 Q8ACTCPU +8 , /* X - ACCELERATOR SVCS TCP/IP CPU TI 0005A */
    =00099 Q8ACTELA +8 , /* X - ACCELERATOR SVCS TCP/IP ELAPSE 00062 */
    =00107 Q8ACACPU +8 , /* X - ACCUMULATED ACCELERATOR CPU TI 0006A */
    =00115 Q8ACAELA +8 , /* X - ACCUMULATED ACCELERATOR ELAPSE 00072 */
    =00123 Q8ACAWAT +8 , /* X - ACCUMULATED ACCELERATOR WAIT T 0007A */
,/* =00133 Q8ACEND +0 ,    F -                                 00084 */
    .           /* End of DSECT */
  /* next byte at 133 */
  hex_Q8ACNAME_OFF = c2x(Q8ACNAME_OFF)
  hex_Q8ACPRID = c2x(Q8ACPRID)
  hex_Q8ACCONN = c2x(Q8ACCONN)
  hex_Q8ACREQ = c2x(Q8ACREQ)
  hex_Q8ACTOUT = c2x(Q8ACTOUT)
  hex_Q8ACFAIL = c2x(Q8ACFAIL)
  hex_Q8ACBYTS = c2x(Q8ACBYTS)
  hex_Q8ACBYTR = c2x(Q8ACBYTR)
  hex_Q8ACMSGS = c2x(Q8ACMSGS)
  hex_Q8ACMSGR = c2x(Q8ACMSGR)
  hex_Q8ACBLKS = c2x(Q8ACBLKS)
  hex_Q8ACBLKR = c2x(Q8ACBLKR)
  hex_Q8ACROWS = c2x(Q8ACROWS)
  hex_Q8ACROWR = c2x(Q8ACROWR)
  hex_Q8ACSCPU = c2x(Q8ACSCPU)
  hex_Q8ACSELA = c2x(Q8ACSELA)
  hex_Q8ACTCPU = c2x(Q8ACTCPU)
  hex_Q8ACTELA = c2x(Q8ACTELA)
  hex_Q8ACACPU = c2x(Q8ACACPU)
  hex_Q8ACAELA = c2x(Q8ACAELA)
  hex_Q8ACAWAT = c2x(Q8ACAWAT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("Q8AC",desired_dsect) > 0)) then do
    void_rc = queue_Q8AC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " Q8AC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_Q8AC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    Q8AC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVER ID OFFSET x:" hex_Q8ACNAME_OFF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR PRODUCT ID       x:" hex_Q8ACPRID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR CONNECTS.   x:" hex_Q8ACCONN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR REQUESTS.   x:" hex_Q8ACREQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMED OUT REQUESTS.     x:" hex_Q8ACTOUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAILED REQUESTS.        x:" hex_Q8ACFAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES SENT.             x:" hex_Q8ACBYTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES RETURNED.         x:" hex_Q8ACBYTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSAGES SENT.          x:" hex_Q8ACMSGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSAGES RETURNED.      x:" hex_Q8ACMSGR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS SENT             x:" hex_Q8ACBLKS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS RETURNED.        x:" hex_Q8ACBLKR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS SENT               x:" hex_Q8ACROWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS RETURNED.          x:" hex_Q8ACROWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES CPU TIM x:" hex_Q8ACSCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES ELAPSED x:" hex_Q8ACSELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SVCS TCP/IP CPU  x:" hex_Q8ACTCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SVCS TCP/IP ELAP x:" hex_Q8ACTELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ACCELERATOR CPU  x:" hex_Q8ACACPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ACCELERATOR ELAP x:" hex_Q8ACAELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ACCELERATOR WAIT x:" hex_Q8ACAWAT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: Q8ACNAME_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Q8ACNAME_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_Q8ACNAME_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: Q8ACNAME_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_Q8ACNAME_D ,
    =00001 Q8ACNAME_Len +2 , /* H - LENGTH OF THE FOLLOWING FI 00000 */
,/* =00003 Q8ACNAME_Var +0 ,    C - ACCELERATOR SERVER NAME    00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_Q8ACNAME_Len = c2x(Q8ACNAME_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("Q8ACNAME_D",desired_dsect) > 0)) then do
    void_rc = queue_Q8ACNAME_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " Q8ACNAME_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_Q8ACNAME_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    Q8ACNAME_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE FOLLOWING FIEL x:" hex_Q8ACNAME_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWA1 length is 00030
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWA1:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWA1,48)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWA1 Length: 48"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWA1 ,
    =00001 QWA11PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWA11PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWA11PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWA11R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWA11R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWA11R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
    =00017 QWA11R2O +4 , /* R - OFFSET TO THE DATA SECTION     00010 */
    =00021 QWA11R2L +2 , /* X - LENGTH OF THE DATA SECTION     00014 */
    =00023 QWA11R2N +2 , /* X - NUMBER OF DATA SECTIONS        00016 */
    =00025 QWA11R3O +4 , /* R - OFFSET TO THE DATA SECTION     00018 */
    =00029 QWA11R3L +2 , /* X - LENGTH OF THE DATA SECTION     0001C */
    =00031 QWA11R3N +2 , /* X - NUMBER OF DATA SECTIONS        0001E */
    =00033 QWA11R4O +4 , /* R - OFFSET TO THE DATA SECTION     00020 */
    =00037 QWA11R4L +2 , /* X - LENGTH OF THE DATA SECTION     00024 */
    =00039 QWA11R4N +2 , /* X - NUMBER OF DATA SECTIONS        00026 */
    =00041 QWA11R5O +4 , /* R - OFFSET TO THE DATA SECTION     00028 */
    =00045 QWA11R5L +2 , /* X - LENGTH OF THE DATA SECTION     0002C */
    =00047 QWA11R5N +2 , /* X - NUMBER OF DATA SECTIONS        0002E */
    .           /* End of DSECT */
  /* next byte at 49 */
  hex_QWA11PSO = c2x(QWA11PSO)
  hex_QWA11PSL = c2x(QWA11PSL)
  hex_QWA11PSN = c2x(QWA11PSN)
  hex_QWA11R1O = c2x(QWA11R1O)
  hex_QWA11R1L = c2x(QWA11R1L)
  hex_QWA11R1N = c2x(QWA11R1N)
  hex_QWA11R2O = c2x(QWA11R2O)
  hex_QWA11R2L = c2x(QWA11R2L)
  hex_QWA11R2N = c2x(QWA11R2N)
  hex_QWA11R3O = c2x(QWA11R3O)
  hex_QWA11R3L = c2x(QWA11R3L)
  hex_QWA11R3N = c2x(QWA11R3N)
  hex_QWA11R4O = c2x(QWA11R4O)
  hex_QWA11R4L = c2x(QWA11R4L)
  hex_QWA11R4N = c2x(QWA11R4N)
  hex_QWA11R5O = c2x(QWA11R5O)
  hex_QWA11R5L = c2x(QWA11R5L)
  hex_QWA11R5N = c2x(QWA11R5N)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWA1",desired_dsect) > 0)) then do
    void_rc = queue_QWA1_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWA1:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWA1_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWA1:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE PRODUCT SECTIO x:" hex_QWA11PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTIO x:" hex_QWA11PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS   x:" hex_QWA11PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWA11R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWA11R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWA11R1N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWA11R2O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWA11R2L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWA11R2N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWA11R3O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWA11R3L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWA11R3N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWA11R4O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWA11R4L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWA11R4N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION   x:" hex_QWA11R5O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION   x:" hex_QWA11R5L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS      x:" hex_QWA11R5N
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QPKG length is 00006
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QPKG:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QPKG,6)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QPKG Length: 6"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QPKG ,
    =00001 QPKGPKGN +2 , /* H - NUMBER OF DSNDQPAC SECTIONS TH 00000 */
    =00003 QPKGPKNF +2 , /* H - NUMBER OF THE FIRST DSNDQPAC D 00002 */
    =00005 QPKGPKNL +2 , /* H - NUMBER OF THE LAST DSNDQPAC DA 00004 */
,/* =00007 QPKGPKEN +0 ,    C - END OF QPKG DSECT              00006 */
    .           /* End of DSECT */
  /* next byte at 7 */
  hex_QPKGPKGN = c2x(QPKGPKGN)
  hex_QPKGPKNF = c2x(QPKGPKNF)
  hex_QPKGPKNL = c2x(QPKGPKNL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QPKG",desired_dsect) > 0)) then do
    void_rc = queue_QPKG_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QPKG:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QPKG_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QPKG:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DSNDQPAC SECTIONS  x:" hex_QPKGPKGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF THE FIRST DSNDQPAC x:" hex_QPKGPKNF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF THE LAST DSNDQPAC  x:" hex_QPKGPKNL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QPAC length is 0019C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QPAC:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QPAC,412)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QPAC Length: 412"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QPAC ,
,/* =00001 QPAC1 +0 ,    F -                                   00000 */
    =00001 QPACRECN +2 , /* H - NUMBER OF THIS DSNDQPAC DATA   00000 */
    =00003 QPACFLGS +2 , /* H - FLAGS                          00002 */
  ,     /* QPACDBRM EQU x'00000001' THIS QPAC DATA ACCOUNTS FOR      */
  ,     /* QPACPACK EQU x'00000002' THIS QPAC DATA ACCOUNTS FOR      */
  ,     /* QPACCLS8 EQU x'00000004' THERE IS NON-ZERO ACCOUNTING     */
  ,     /* QPACCRNT EQU x'00000008' CURRENT OR MOST RECENTLY         */
  ,     /* QPACINSP EQU x'00000010' THIS PACKAGE WAS LOADED BY A     */
  ,     /* QPACCLS7 EQU x'00000020' THERE IS NON-ZERO ACCOUNTING     */
  ,     /* QPACPAC EQU x'00000040' SUCCESSFUL AUTH CHECK WITHOUT     */
,/* =00005 QPACPKNM +0 ,    C - PACKAGE NAME                   00004 */
    =00005 QPACLOCN +16 , /* C - %U LOCATION NAME              00004 */
    =00021 QPACCOLN +18 , /* C - %U PACKAGE COLLECTION ID      00014 */
    =00039 QPACPKID +18 , /* C - %U PROGRAM NAME               00026 */
    =00057 QPACCONT +8 , /* C - CONSISTENCY TOKEN - 64 BIT     00038 */
,/* =00065 QPACA101 +0 ,    F -                                00040 */
    =00065 QPACSQLC +4 , /* F - SQL REQUEST COUNT - The number 00040 */
    =00069 QPACSCB +8 , /* X - STORE CLOCK VALUE AT ENTRY TO D 00044 */
    =00077 QPACSCE +8 , /* X - STORE CLOCK VALUE AT EXIT FROM  0004C */
    =00085 QPACSCT +8 , /* X - TOTAL ELAPSED TIME SPENT PROCES 00054 */
    =00093 QPACBJST +8 , /* X - CPU time at entry to DB2 for t 0005C */
    =00101 QPACEJST +8 , /* X - CPU time at exit from DB2 fro  00064 */
    =00109 QPACTJST +8 , /* X - Total CPU time for all executi 0006C */
    =00117 QPACARNA +4 , /* F - NUMBER OF DB2 ENTRY OR EXIT EV 00074 */
    =00121 QPACARNE +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 00078 */
    =00125 QPACAWTI +8 , /* X - ACCUMULATED I/O ELAPSED WAIT T 0007C */
    =00133 QPACAWTL +8 , /* X - ACCUMULATED LOCK AND LATCH ELA 00084 */
    =00141 QPACAWTR +8 , /* X - ACCUMULATED WAIT TIME FOR READ 0008C */
    =00149 QPACAWTW +8 , /* X - ACCUMULATED WAIT TIME FOR WRIT 00094 */
    =00157 QPACAWTE +8 , /* X - ACCUMULATED WAIT TIME DUE TO S 0009C */
    =00165 QPACALOG +8 , /* X - ACCUMULATED WAIT TIME DUE TO P 000A4 */
    =00173 QPACARNL +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000AC */
    =00177 QPACARNR +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000B0 */
    =00181 QPACARNW +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000B4 */
    =00185 QPACARNS +4 , /* F - NUMBER OF WAIT TRACE EVENTS PR 000B8 */
    =00189 QPACALCT +4 , /* F - NUMBER OF SUSPENSIONS DUE TO P 000BC */
,/* =00193 QPAC2 +0 ,    F -                                   000C0 */
    =00193 QPACARND +4 , /* F - Number of wait trace events pr 000C0 */
    =00197 QPACAWDR +8 , /* X - Accumulated wait time for a dr 000C4 */
    =00205 QPACAWCL +8 , /* X - Accumulated wait time for a dr 000CC */
    =00213 QPACARNC +4 , /* F - Number of wait trace events pr 000D4 */
    =00217 QPACAWAR +8 , /* X - Accumulated wait time for:     000D8 */
    =00225 QPACANAR +4 , /* F - Number of wait trace events pr 000E0 */
    =00229 QPACAWTP +8 , /* X - Accumulated wait time due to p 000E4 */
    =00237 QPACARNH +4 , /* F - Number of wait trace events pr 000EC */
,/* =00241 QPACA261 +0 ,    F -                                000F0 */
    =00241 QPACAWTG +8 , /* C - Accumulated wait time due to s 000F0 */
    =00249 QPACAWTJ +8 , /* C - Accumulated wait time due to g 000F8 */
    =00257 QPACARNG +4 , /* F - Number of wait trace events pr 00100 */
    =00261 QPACARNJ +4 , /* F - Number of wait trace events pr 00104 */
  ,     /* QPACA302 EQU x'00000108'                                  */
    =00265 RSVD0001 +12 , /* C - RESERVED                      00108 */
    =00277 QPACSPNS +4 , /* F - The number of stored procedure 00114 */
  ,     /* QPACA303 EQU x'00000118'                                  */
    =00281 RSVD0002 +8 , /* C - RESERVED                       00118 */
    =00289 QPACUDNU +4 , /* F - Number of user-defined functio 00120 */
  ,     /* QPACA304 EQU x'00000124'                                  */
    =00293 QPACASCH +8 , /* C - %U Nested activity schema name 00124 */
    =00301 QPACAANM +18 , /* C - %U Name of activity           0012C */
    =00319 QPACAAFG +2 , /* C - Activity flag                  0013E */
  ,     /* QPACA305 EQU x'00000140'                                  */
    =00321 QPACAWTK +8 , /* C - Accumulated wait time due to g 00140 */
    =00329 QPACAWTM +8 , /* C - Accumulated wait time due to g 00148 */
    =00337 QPACAWTN +8 , /* C - Accumulated wait time due to g 00150 */
    =00345 QPACAWTO +8 , /* C - Accumulated wait time due to g 00158 */
    =00353 QPACAWTQ +8 , /* C - Accumulated wait time due to g 00160 */
    =00361 QPACARNK +4 , /* F - Number of wait trace events pr 00168 */
    =00365 QPACARNM +4 , /* F - Number of wait trace events pr 0016C */
    =00369 QPACARNN +4 , /* F - Number of wait trace events pr 00170 */
    =00373 QPACARNO +4 , /* F - Number of wait trace events pr 00174 */
    =00377 QPACARNQ +4 , /* F - Number of wait trace events pr 00178 */
    =00381 QPACLOCN_Off +2 , /* H - Offset from QPAC to        0017C */
    =00383 QPACCOLN_Off +2 , /* H - Offset from QPAC to        0017E */
    =00385 QPACPKID_Off +2 , /* H - Offset from QPAC to        00180 */
    =00387 QPACASCH_Off +2 , /* H - Offset from QPAC to        00182 */
    =00389 QPACAANM_Off +2 , /* H - Offset from QPAC to        00184 */
    =00391 QPACSWITCH +2 , /* H - Number of times package was  00186 */
  ,     /* QPACZIIP EQU x'00000188'                                  */
    =00393 QPACCLS7_zIIP +8 , /* C - Total CPU time for all ex 00188 */
  ,     /* QPACA309 EQU x'00000190'                                  */
    =00401 QPACALBC +4 , /* F - Number of wait trace events pr 00190 */
    =00405 QPACALBW +8 , /* C - Accumulated wait time for TCP/ 00194 */
,/* =00413 QPACEND +0 ,    C -                                 0019C */
    =00001 QPACLOCN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QPACLOCN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QPACCOLN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QPACCOLN_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QPACPKID_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QPACPKID_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QPACASCH_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QPACASCH_Var +0 ,    C - %U Nested activity schema  00002 */
    =00001 QPACAANM_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QPACAANM_Var +0 ,    C - %U Name of activity        00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QPACRECN = c2x(QPACRECN)
  hex_QPACFLGS = c2x(QPACFLGS)
  hex_QPACLOCN = c2x(QPACLOCN)
  hex_QPACCOLN = c2x(QPACCOLN)
  hex_QPACPKID = c2x(QPACPKID)
  hex_QPACCONT = c2x(QPACCONT)
  hex_QPACSQLC = c2x(QPACSQLC)
  hex_QPACSCB = c2x(QPACSCB)
  hex_QPACSCE = c2x(QPACSCE)
  hex_QPACSCT = c2x(QPACSCT)
  hex_QPACBJST = c2x(QPACBJST)
  hex_QPACEJST = c2x(QPACEJST)
  hex_QPACTJST = c2x(QPACTJST)
  hex_QPACARNA = c2x(QPACARNA)
  hex_QPACARNE = c2x(QPACARNE)
  hex_QPACAWTI = c2x(QPACAWTI)
  hex_QPACAWTL = c2x(QPACAWTL)
  hex_QPACAWTR = c2x(QPACAWTR)
  hex_QPACAWTW = c2x(QPACAWTW)
  hex_QPACAWTE = c2x(QPACAWTE)
  hex_QPACALOG = c2x(QPACALOG)
  hex_QPACARNL = c2x(QPACARNL)
  hex_QPACARNR = c2x(QPACARNR)
  hex_QPACARNW = c2x(QPACARNW)
  hex_QPACARNS = c2x(QPACARNS)
  hex_QPACALCT = c2x(QPACALCT)
  hex_QPACARND = c2x(QPACARND)
  hex_QPACAWDR = c2x(QPACAWDR)
  hex_QPACAWCL = c2x(QPACAWCL)
  hex_QPACARNC = c2x(QPACARNC)
  hex_QPACAWAR = c2x(QPACAWAR)
  hex_QPACANAR = c2x(QPACANAR)
  hex_QPACAWTP = c2x(QPACAWTP)
  hex_QPACARNH = c2x(QPACARNH)
  hex_QPACAWTG = c2x(QPACAWTG)
  hex_QPACAWTJ = c2x(QPACAWTJ)
  hex_QPACARNG = c2x(QPACARNG)
  hex_QPACARNJ = c2x(QPACARNJ)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QPACSPNS = c2x(QPACSPNS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QPACUDNU = c2x(QPACUDNU)
  hex_QPACASCH = c2x(QPACASCH)
  hex_QPACAANM = c2x(QPACAANM)
  hex_QPACAAFG = c2x(QPACAAFG)
  hex_QPACAWTK = c2x(QPACAWTK)
  hex_QPACAWTM = c2x(QPACAWTM)
  hex_QPACAWTN = c2x(QPACAWTN)
  hex_QPACAWTO = c2x(QPACAWTO)
  hex_QPACAWTQ = c2x(QPACAWTQ)
  hex_QPACARNK = c2x(QPACARNK)
  hex_QPACARNM = c2x(QPACARNM)
  hex_QPACARNN = c2x(QPACARNN)
  hex_QPACARNO = c2x(QPACARNO)
  hex_QPACARNQ = c2x(QPACARNQ)
  hex_QPACLOCN_Off = c2x(QPACLOCN_Off)
  hex_QPACCOLN_Off = c2x(QPACCOLN_Off)
  hex_QPACPKID_Off = c2x(QPACPKID_Off)
  hex_QPACASCH_Off = c2x(QPACASCH_Off)
  hex_QPACAANM_Off = c2x(QPACAANM_Off)
  hex_QPACSWITCH = c2x(QPACSWITCH)
  hex_QPACCLS7_zIIP = c2x(QPACCLS7_zIIP)
  hex_QPACALBC = c2x(QPACALBC)
  hex_QPACALBW = c2x(QPACALBW)
  hex_QPACLOCN_Len = c2x(QPACLOCN_Len)
  hex_QPACCOLN_Len = c2x(QPACCOLN_Len)
  hex_QPACPKID_Len = c2x(QPACPKID_Len)
  hex_QPACASCH_Len = c2x(QPACASCH_Len)
  hex_QPACAANM_Len = c2x(QPACAANM_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QPAC",desired_dsect) > 0)) then do
    void_rc = queue_QPAC_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QPAC:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QPAC_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QPAC:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF THIS DSNDQPAC DATA x:" hex_QPACRECN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QPACFLGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QPACLOCN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QPACCOLN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QPACPKID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN - 64 BIT   x:" hex_QPACCONT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL REQUEST COUNT - The numb x:" hex_QPACSQLC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK VALUE AT ENTRY T x:" hex_QPACSCB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK VALUE AT EXIT FR x:" hex_QPACSCE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL ELAPSED TIME SPENT PRO x:" hex_QPACSCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU time at entry to DB2 for x:" hex_QPACBJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU time at exit from DB2 fr x:" hex_QPACEJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total CPU time for all execu x:" hex_QPACTJST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DB2 ENTRY OR EXIT  x:" hex_QPACARNA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QPACARNE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED I/O ELAPSED WAIT x:" hex_QPACAWTI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED LOCK AND LATCH E x:" hex_QPACAWTL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED WAIT TIME FOR RE x:" hex_QPACAWTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED WAIT TIME FOR WR x:" hex_QPACAWTW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED WAIT TIME DUE TO x:" hex_QPACAWTE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED WAIT TIME DUE TO x:" hex_QPACALOG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QPACARNL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QPACARNR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QPACARNW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WAIT TRACE EVENTS  x:" hex_QPACARNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SUSPENSIONS DUE TO x:" hex_QPACALCT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for a  x:" hex_QPACAWDR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for a  x:" hex_QPACAWCL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for:   x:" hex_QPACAWAR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACANAR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The number of stored procedu x:" hex_QPACSPNS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of user-defined funct x:" hex_QPACUDNU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Nested activity schema na x:" hex_QPACASCH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Name of activity          x:" hex_QPACAANM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Activity flag                x:" hex_QPACAAFG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time due to x:" hex_QPACAWTQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACARNQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QPAC to          x:" hex_QPACLOCN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QPAC to          x:" hex_QPACCOLN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QPAC to          x:" hex_QPACPKID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QPAC to          x:" hex_QPACASCH_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QPAC to          x:" hex_QPACAANM_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of times package was  x:" hex_QPACSWITCH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total CPU time for all execu x:" hex_QPACCLS7_zIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of wait trace events  x:" hex_QPACALBC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for TC x:" hex_QPACALBW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QPACLOCN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QPACCOLN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QPACPKID_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QPACASCH_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QPACAANM_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: DSNDQXPK length is 0002C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_DSNDQXPK:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_DSNDQXPK,44)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: DSNDQXPK Length: 44"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_DSNDQXPK ,
,/* =00001 QXPK +0 ,    D -                                    00000 */
    =00001 QPSELECT +4 , /* F - # of SELECTS                   00000 */
    =00005 QPINSRT +4 , /* F - # of INSERTS                    00004 */
    =00009 QPUPDTE +4 , /* F - # of UPDATES                    00008 */
    =00013 QPDELET +4 , /* F - # of DELETES                    0000C */
    =00017 QPDESC +4 , /* F - # of DESCRIBES                   00010 */
    =00021 QPPREP +4 , /* F - # of PREPARES                    00014 */
    =00025 QPOPEN +4 , /* F - # of OPENS                       00018 */
    =00029 QPCLOSE +4 , /* F - # of CLOSES                     0001C */
    =00033 QPFETCH +4 , /* F - # of FETCHS                     00020 */
    =00037 QPLOCK +4 , /* F - # of LOCK TABLES                 00024 */
    =00041 QPCALL +4 , /* F - # of SQL CALL statements         00028 */
,/* =00045 QPPKEND +0 ,    C -                                 0002C */
    .           /* End of DSECT */
  /* next byte at 45 */
  hex_QPSELECT = c2x(QPSELECT)
  hex_QPINSRT = c2x(QPINSRT)
  hex_QPUPDTE = c2x(QPUPDTE)
  hex_QPDELET = c2x(QPDELET)
  hex_QPDESC = c2x(QPDESC)
  hex_QPPREP = c2x(QPPREP)
  hex_QPOPEN = c2x(QPOPEN)
  hex_QPCLOSE = c2x(QPCLOSE)
  hex_QPFETCH = c2x(QPFETCH)
  hex_QPLOCK = c2x(QPLOCK)
  hex_QPCALL = c2x(QPCALL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("DSNDQXPK",desired_dsect) > 0)) then do
    void_rc = queue_DSNDQXPK_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " DSNDQXPK:"
    void_rc = write_print_data_out()
  end
  return 0

queue_DSNDQXPK_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    DSNDQXPK:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SELECTS                 x:" hex_QPSELECT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of INSERTS                 x:" hex_QPINSRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of UPDATES                 x:" hex_QPUPDTE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of DELETES                 x:" hex_QPDELET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of DESCRIBES               x:" hex_QPDESC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of PREPARES                x:" hex_QPPREP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of OPENS                   x:" hex_QPOPEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of CLOSES                  x:" hex_QPCLOSE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of FETCHS                  x:" hex_QPFETCH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of LOCK TABLES             x:" hex_QPLOCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of SQL CALL statements     x:" hex_QPCALL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: SM102 length is 0001C Performance
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_SM102:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_SM102,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: SM102 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var smf_record.1 ,
    =00025 SM102BUF +4 , /* X - TEMPORARY POINTER TO BUFFER AR 00018 */
,/* =00029 SM102END +0 ,    C - START OF THE SELF DEFINING SEC 0001C */
    data_block_of_next_section           /* End of DSECT */
  /* next byte at 29 */
  hex_SM102BUF = c2x(SM102BUF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("SM102",desired_dsect) > 0)) then do
    void_rc = queue_SM102_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " SM102:"
    void_rc = write_print_data_out()
  end
  data_block_of_QWT0 = data_block_of_next_section
  void_rc = rexx_QWT0()
  if (dec_QWT02PSL > 0) then do
    if (dec_QWT02PSO > dec_SMFxLEN) then NOP
    else ,
    if (dec_QWT02PSO = 0) then NOP
    else ,
    if (dec_QWT02PSN = 0) then NOP
    else ,
    if ((dec_QWT02PSO +dec_QWT02PSL) > dec_SMFxLEN) then NOP
    else do
      ptr_QWT02PSO = dec_QWT02PSO + 1
      do qws_loop = 1 to dec_QWT02PSN
        data_block_of_QWHS = ,
          substr(smf_record.1,ptr_QWT02PSO,dec_QWT02PSL)
        void_rc = rexx_QWHS()
        ptr_QWT02PSO = ptr_QWT02PSO + dec_QWT02PSL
      end
    end
  end
  select
    when (dec_QWHSIID = 1) then do
      void_rc = rexx_sm102_0001()
    end
    when (dec_QWHSIID = 2) then do
      void_rc = rexx_sm102_0002()
    end
    when (dec_QWHSIID = 3) then do
      void_rc = rexx_sm102_0003()
    end
    when (dec_QWHSIID = 4) then do
      void_rc = rexx_sm102_0004()
    end
    when (dec_QWHSIID = 5) then do
      void_rc = rexx_sm102_0005()
    end
    when (dec_QWHSIID = 6) then do
      void_rc = rexx_sm102_0006()
    end
    when (dec_QWHSIID = 7) then do
      void_rc = rexx_sm102_0007()
    end
    when (dec_QWHSIID = 8) then do
      void_rc = rexx_sm102_0008()
    end
    when (dec_QWHSIID = 9) then do
      void_rc = rexx_sm102_0009()
    end
    when (dec_QWHSIID = 10) then do
      void_rc = rexx_sm102_0010()
    end
    when (dec_QWHSIID = 11) then do
      void_rc = rexx_sm102_0011()
    end
    when (dec_QWHSIID = 12) then do
      void_rc = rexx_sm102_0012()
    end
    when (dec_QWHSIID = 13) then do
      void_rc = rexx_sm102_0013()
    end
    when (dec_QWHSIID = 14) then do
      void_rc = rexx_sm102_0014()
    end
    when (dec_QWHSIID = 15) then do
      void_rc = rexx_sm102_0015()
    end
    when (dec_QWHSIID = 16) then do
      void_rc = rexx_sm102_0016()
    end
    when (dec_QWHSIID = 17) then do
      void_rc = rexx_sm102_0017()
    end
    when (dec_QWHSIID = 18) then do
      void_rc = rexx_sm102_0018()
    end
    when (dec_QWHSIID = 19) then do
      void_rc = rexx_sm102_0019()
    end
    when (dec_QWHSIID = 20) then do
      void_rc = rexx_sm102_0020()
    end
    when (dec_QWHSIID = 21) then do
      void_rc = rexx_sm102_0021()
    end
    when (dec_QWHSIID = 22) then do
      void_rc = rexx_sm102_0022()
    end
    when (dec_QWHSIID = 23) then do
      void_rc = rexx_sm102_0023()
    end
    when (dec_QWHSIID = 24) then do
      void_rc = rexx_sm102_0024()
    end
    when (dec_QWHSIID = 25) then do
      void_rc = rexx_sm102_0025()
    end
    when (dec_QWHSIID = 26) then do
      void_rc = rexx_sm102_0026()
    end
    when (dec_QWHSIID = 27) then do
      void_rc = rexx_sm102_0027()
    end
    when (dec_QWHSIID = 28) then do
      void_rc = rexx_sm102_0028()
    end
    when (dec_QWHSIID = 29) then do
      void_rc = rexx_sm102_0029()
    end
    when (dec_QWHSIID = 30) then do
      void_rc = rexx_sm102_0030()
    end
    when (dec_QWHSIID = 31) then do
      void_rc = rexx_sm102_0031()
    end
    when (dec_QWHSIID = 32) then do
      void_rc = rexx_sm102_0032()
    end
    when (dec_QWHSIID = 33) then do
      void_rc = rexx_sm102_0033()
    end
    when (dec_QWHSIID = 34) then do
      void_rc = rexx_sm102_0034()
    end
    when (dec_QWHSIID = 35) then do
      void_rc = rexx_sm102_0035()
    end
    when (dec_QWHSIID = 36) then do
      void_rc = rexx_sm102_0036()
    end
    when (dec_QWHSIID = 37) then do
      void_rc = rexx_sm102_0037()
    end
    when (dec_QWHSIID = 38) then do
      void_rc = rexx_sm102_0038()
    end
    when (dec_QWHSIID = 39) then do
      void_rc = rexx_sm102_0039()
    end
    when (dec_QWHSIID = 40) then do
      void_rc = rexx_sm102_0040()
    end
    when (dec_QWHSIID = 41) then do
      void_rc = rexx_sm102_0041()
    end
    when (dec_QWHSIID = 42) then do
      void_rc = rexx_sm102_0042()
    end
    when (dec_QWHSIID = 43) then do
      void_rc = rexx_sm102_0043()
    end
    when (dec_QWHSIID = 44) then do
      void_rc = rexx_sm102_0044()
    end
    when (dec_QWHSIID = 45) then do
      void_rc = rexx_sm102_0045()
    end
    when (dec_QWHSIID = 46) then do
      void_rc = rexx_sm102_0046()
    end
    when (dec_QWHSIID = 47) then do
      void_rc = rexx_sm102_0047()
    end
    when (dec_QWHSIID = 48) then do
      void_rc = rexx_sm102_0048()
    end
    when (dec_QWHSIID = 49) then do
      void_rc = rexx_sm102_0049()
    end
    when (dec_QWHSIID = 50) then do
      void_rc = rexx_sm102_0050()
    end
    when (dec_QWHSIID = 51) then do
      void_rc = rexx_sm102_0051()
    end
    when (dec_QWHSIID = 52) then do
      void_rc = rexx_sm102_0052()
    end
    when (dec_QWHSIID = 53) then do
      void_rc = rexx_sm102_0053()
    end
    when (dec_QWHSIID = 54) then do
      void_rc = rexx_sm102_0054()
    end
    when (dec_QWHSIID = 55) then do
      void_rc = rexx_sm102_0055()
    end
    when (dec_QWHSIID = 56) then do
      void_rc = rexx_sm102_0056()
    end
    when (dec_QWHSIID = 57) then do
      void_rc = rexx_sm102_0057()
    end
    when (dec_QWHSIID = 58) then do
      void_rc = rexx_sm102_0058()
    end
    when (dec_QWHSIID = 59) then do
      void_rc = rexx_sm102_0059()
    end
    when (dec_QWHSIID = 60) then do
      void_rc = rexx_sm102_0060()
    end
    when (dec_QWHSIID = 61) then do
      void_rc = rexx_sm102_0061()
    end
    when (dec_QWHSIID = 62) then do
      void_rc = rexx_sm102_0062()
    end
    when (dec_QWHSIID = 63) then do
      void_rc = rexx_sm102_0063()
    end
    when (dec_QWHSIID = 64) then do
      void_rc = rexx_sm102_0064()
    end
    when (dec_QWHSIID = 65) then do
      void_rc = rexx_sm102_0065()
    end
    when (dec_QWHSIID = 66) then do
      void_rc = rexx_sm102_0066()
    end
    when (dec_QWHSIID = 67) then do
      void_rc = rexx_sm102_0067()
    end
    when (dec_QWHSIID = 68) then do
      void_rc = rexx_sm102_0068()
    end
    when (dec_QWHSIID = 69) then do
      void_rc = rexx_sm102_0069()
    end
    when (dec_QWHSIID = 70) then do
      void_rc = rexx_sm102_0070()
    end
    when (dec_QWHSIID = 71) then do
      void_rc = rexx_sm102_0071()
    end
    when (dec_QWHSIID = 72) then do
      void_rc = rexx_sm102_0072()
    end
    when (dec_QWHSIID = 73) then do
      void_rc = rexx_sm102_0073()
    end
    when (dec_QWHSIID = 74) then do
      void_rc = rexx_sm102_0074()
    end
    when (dec_QWHSIID = 75) then do
      void_rc = rexx_sm102_0075()
    end
    when (dec_QWHSIID = 76) then do
      void_rc = rexx_sm102_0076()
    end
    when (dec_QWHSIID = 77) then do
      void_rc = rexx_sm102_0077()
    end
    when (dec_QWHSIID = 78) then do
      void_rc = rexx_sm102_0078()
    end
    when (dec_QWHSIID = 79) then do
      void_rc = rexx_sm102_0079()
    end
    when (dec_QWHSIID = 80) then do
      void_rc = rexx_sm102_0080()
    end
    when (dec_QWHSIID = 81) then do
      void_rc = rexx_sm102_0081()
    end
    when (dec_QWHSIID = 82) then do
      void_rc = rexx_sm102_0082()
    end
    when (dec_QWHSIID = 83) then do
      void_rc = rexx_sm102_0083()
    end
    when (dec_QWHSIID = 84) then do
      void_rc = rexx_sm102_0084()
    end
    when (dec_QWHSIID = 85) then do
      void_rc = rexx_sm102_0085()
    end
    when (dec_QWHSIID = 86) then do
      void_rc = rexx_sm102_0086()
    end
    when (dec_QWHSIID = 87) then do
      void_rc = rexx_sm102_0087()
    end
    when (dec_QWHSIID = 88) then do
      void_rc = rexx_sm102_0088()
    end
    when (dec_QWHSIID = 89) then do
      void_rc = rexx_sm102_0089()
    end
    when (dec_QWHSIID = 90) then do
      void_rc = rexx_sm102_0090()
    end
    when (dec_QWHSIID = 91) then do
      void_rc = rexx_sm102_0091()
    end
    when (dec_QWHSIID = 92) then do
      void_rc = rexx_sm102_0092()
    end
    when (dec_QWHSIID = 93) then do
      void_rc = rexx_sm102_0093()
    end
    when (dec_QWHSIID = 94) then do
      void_rc = rexx_sm102_0094()
    end
    when (dec_QWHSIID = 95) then do
      void_rc = rexx_sm102_0095()
    end
    when (dec_QWHSIID = 96) then do
      void_rc = rexx_sm102_0096()
    end
    when (dec_QWHSIID = 97) then do
      void_rc = rexx_sm102_0097()
    end
    when (dec_QWHSIID = 98) then do
      void_rc = rexx_sm102_0098()
    end
    when (dec_QWHSIID = 99) then do
      void_rc = rexx_sm102_0099()
    end
    when (dec_QWHSIID = 100) then do
      void_rc = rexx_sm102_0100()
    end
    when (dec_QWHSIID = 101) then do
      void_rc = rexx_sm102_0101()
    end
    when (dec_QWHSIID = 102) then do
      void_rc = rexx_sm102_0102()
    end
    when (dec_QWHSIID = 103) then do
      void_rc = rexx_sm102_0103()
    end
    when (dec_QWHSIID = 104) then do
      void_rc = rexx_sm102_0104()
    end
    when (dec_QWHSIID = 105) then do
      void_rc = rexx_sm102_0105()
    end
    when (dec_QWHSIID = 106) then do
      void_rc = rexx_sm102_0106()
    end
    when (dec_QWHSIID = 107) then do
      void_rc = rexx_sm102_0107()
    end
    when (dec_QWHSIID = 108) then do
      void_rc = rexx_sm102_0108()
    end
    when (dec_QWHSIID = 109) then do
      void_rc = rexx_sm102_0109()
    end
    when (dec_QWHSIID = 110) then do
      void_rc = rexx_sm102_0110()
    end
    when (dec_QWHSIID = 111) then do
      void_rc = rexx_sm102_0111()
    end
    when (dec_QWHSIID = 112) then do
      void_rc = rexx_sm102_0112()
    end
    when (dec_QWHSIID = 113) then do
      void_rc = rexx_sm102_0113()
    end
    when (dec_QWHSIID = 114) then do
      void_rc = rexx_sm102_0114()
    end
    when (dec_QWHSIID = 115) then do
      void_rc = rexx_sm102_0115()
    end
    when (dec_QWHSIID = 116) then do
      void_rc = rexx_sm102_0116()
    end
    when (dec_QWHSIID = 117) then do
      void_rc = rexx_sm102_0117()
    end
    when (dec_QWHSIID = 118) then do
      void_rc = rexx_sm102_0118()
    end
    when (dec_QWHSIID = 119) then do
      void_rc = rexx_sm102_0119()
    end
    when (dec_QWHSIID = 120) then do
      void_rc = rexx_sm102_0120()
    end
    when (dec_QWHSIID = 121) then do
      void_rc = rexx_sm102_0121()
    end
    when (dec_QWHSIID = 122) then do
      void_rc = rexx_sm102_0122()
    end
    when (dec_QWHSIID = 123) then do
      void_rc = rexx_sm102_0123()
    end
    when (dec_QWHSIID = 124) then do
      void_rc = rexx_sm102_0124()
    end
    when (dec_QWHSIID = 125) then do
      void_rc = rexx_sm102_0125()
    end
    when (dec_QWHSIID = 126) then do
      void_rc = rexx_sm102_0126()
    end
    when (dec_QWHSIID = 127) then do
      void_rc = rexx_sm102_0127()
    end
    when (dec_QWHSIID = 128) then do
      void_rc = rexx_sm102_0128()
    end
    when (dec_QWHSIID = 129) then do
      void_rc = rexx_sm102_0129()
    end
    when (dec_QWHSIID = 130) then do
      void_rc = rexx_sm102_0130()
    end
    when (dec_QWHSIID = 131) then do
      void_rc = rexx_sm102_0131()
    end
    when (dec_QWHSIID = 132) then do
      void_rc = rexx_sm102_0132()
    end
    when (dec_QWHSIID = 133) then do
      void_rc = rexx_sm102_0133()
    end
    when (dec_QWHSIID = 134) then do
      void_rc = rexx_sm102_0134()
    end
    when (dec_QWHSIID = 135) then do
      void_rc = rexx_sm102_0135()
    end
    when (dec_QWHSIID = 136) then do
      void_rc = rexx_sm102_0136()
    end
    when (dec_QWHSIID = 137) then do
      void_rc = rexx_sm102_0137()
    end
    when (dec_QWHSIID = 138) then do
      void_rc = rexx_sm102_0138()
    end
    when (dec_QWHSIID = 139) then do
      void_rc = rexx_sm102_0139()
    end
    when (dec_QWHSIID = 140) then do
      void_rc = rexx_sm102_0140()
    end
    when (dec_QWHSIID = 141) then do
      void_rc = rexx_sm102_0141()
    end
    when (dec_QWHSIID = 142) then do
      void_rc = rexx_sm102_0142()
    end
    when (dec_QWHSIID = 143) then do
      void_rc = rexx_sm102_0143()
    end
    when (dec_QWHSIID = 144) then do
      void_rc = rexx_sm102_0144()
    end
    when (dec_QWHSIID = 145) then do
      void_rc = rexx_sm102_0145()
    end
    when (dec_QWHSIID = 146) then do
      void_rc = rexx_sm102_0146()
    end
    when (dec_QWHSIID = 147) then do
      void_rc = rexx_sm102_0147()
    end
    when (dec_QWHSIID = 148) then do
      void_rc = rexx_sm102_0148()
    end
    when (dec_QWHSIID = 149) then do
      void_rc = rexx_sm102_0149()
    end
    when (dec_QWHSIID = 150) then do
      void_rc = rexx_sm102_0150()
    end
    when (dec_QWHSIID = 151) then do
      void_rc = rexx_sm102_0151()
    end
    when (dec_QWHSIID = 152) then do
      void_rc = rexx_sm102_0152()
    end
    when (dec_QWHSIID = 153) then do
      void_rc = rexx_sm102_0153()
    end
    when (dec_QWHSIID = 154) then do
      void_rc = rexx_sm102_0154()
    end
    when (dec_QWHSIID = 155) then do
      void_rc = rexx_sm102_0155()
    end
    when (dec_QWHSIID = 156) then do
      void_rc = rexx_sm102_0156()
    end
    when (dec_QWHSIID = 157) then do
      void_rc = rexx_sm102_0157()
    end
    when (dec_QWHSIID = 158) then do
      void_rc = rexx_sm102_0158()
    end
    when (dec_QWHSIID = 159) then do
      void_rc = rexx_sm102_0159()
    end
    when (dec_QWHSIID = 160) then do
      void_rc = rexx_sm102_0160()
    end
    when (dec_QWHSIID = 161) then do
      void_rc = rexx_sm102_0161()
    end
    when (dec_QWHSIID = 162) then do
      void_rc = rexx_sm102_0162()
    end
    when (dec_QWHSIID = 163) then do
      void_rc = rexx_sm102_0163()
    end
    when (dec_QWHSIID = 164) then do
      void_rc = rexx_sm102_0164()
    end
    when (dec_QWHSIID = 165) then do
      void_rc = rexx_sm102_0165()
    end
    when (dec_QWHSIID = 166) then do
      void_rc = rexx_sm102_0166()
    end
    when (dec_QWHSIID = 167) then do
      void_rc = rexx_sm102_0167()
    end
    when (dec_QWHSIID = 168) then do
      void_rc = rexx_sm102_0168()
    end
    when (dec_QWHSIID = 169) then do
      void_rc = rexx_sm102_0169()
    end
    when (dec_QWHSIID = 170) then do
      void_rc = rexx_sm102_0170()
    end
    when (dec_QWHSIID = 171) then do
      void_rc = rexx_sm102_0171()
    end
    when (dec_QWHSIID = 172) then do
      void_rc = rexx_sm102_0172()
    end
    when (dec_QWHSIID = 173) then do
      void_rc = rexx_sm102_0173()
    end
    when (dec_QWHSIID = 174) then do
      void_rc = rexx_sm102_0174()
    end
    when (dec_QWHSIID = 175) then do
      void_rc = rexx_sm102_0175()
    end
    when (dec_QWHSIID = 176) then do
      void_rc = rexx_sm102_0176()
    end
    when (dec_QWHSIID = 177) then do
      void_rc = rexx_sm102_0177()
    end
    when (dec_QWHSIID = 178) then do
      void_rc = rexx_sm102_0178()
    end
    when (dec_QWHSIID = 179) then do
      void_rc = rexx_sm102_0179()
    end
    when (dec_QWHSIID = 180) then do
      void_rc = rexx_sm102_0180()
    end
    when (dec_QWHSIID = 181) then do
      void_rc = rexx_sm102_0181()
    end
    when (dec_QWHSIID = 182) then do
      void_rc = rexx_sm102_0182()
    end
    when (dec_QWHSIID = 183) then do
      void_rc = rexx_sm102_0183()
    end
    when (dec_QWHSIID = 184) then do
      void_rc = rexx_sm102_0184()
    end
    when (dec_QWHSIID = 185) then do
      void_rc = rexx_sm102_0185()
    end
    when (dec_QWHSIID = 186) then do
      void_rc = rexx_sm102_0186()
    end
    when (dec_QWHSIID = 187) then do
      void_rc = rexx_sm102_0187()
    end
    when (dec_QWHSIID = 188) then do
      void_rc = rexx_sm102_0188()
    end
    when (dec_QWHSIID = 189) then do
      void_rc = rexx_sm102_0189()
    end
    when (dec_QWHSIID = 190) then do
      void_rc = rexx_sm102_0190()
    end
    when (dec_QWHSIID = 191) then do
      void_rc = rexx_sm102_0191()
    end
    when (dec_QWHSIID = 192) then do
      void_rc = rexx_sm102_0192()
    end
    when (dec_QWHSIID = 193) then do
      void_rc = rexx_sm102_0193()
    end
    when (dec_QWHSIID = 194) then do
      void_rc = rexx_sm102_0194()
    end
    when (dec_QWHSIID = 195) then do
      void_rc = rexx_sm102_0195()
    end
    when (dec_QWHSIID = 196) then do
      void_rc = rexx_sm102_0196()
    end
    when (dec_QWHSIID = 197) then do
      void_rc = rexx_sm102_0197()
    end
    when (dec_QWHSIID = 198) then do
      void_rc = rexx_sm102_0198()
    end
    when (dec_QWHSIID = 199) then do
      void_rc = rexx_sm102_0199()
    end
    when (dec_QWHSIID = 200) then do
      void_rc = rexx_sm102_0200()
    end
    when (dec_QWHSIID = 201) then do
      void_rc = rexx_sm102_0201()
    end
    when (dec_QWHSIID = 202) then do
      void_rc = rexx_sm102_0202()
    end
    when (dec_QWHSIID = 203) then do
      void_rc = rexx_sm102_0203()
    end
    when (dec_QWHSIID = 204) then do
      void_rc = rexx_sm102_0204()
    end
    when (dec_QWHSIID = 205) then do
      void_rc = rexx_sm102_0205()
    end
    when (dec_QWHSIID = 206) then do
      void_rc = rexx_sm102_0206()
    end
    when (dec_QWHSIID = 207) then do
      void_rc = rexx_sm102_0207()
    end
    when (dec_QWHSIID = 208) then do
      void_rc = rexx_sm102_0208()
    end
    when (dec_QWHSIID = 209) then do
      void_rc = rexx_sm102_0209()
    end
    when (dec_QWHSIID = 210) then do
      void_rc = rexx_sm102_0210()
    end
    when (dec_QWHSIID = 211) then do
      void_rc = rexx_sm102_0211()
    end
    when (dec_QWHSIID = 212) then do
      void_rc = rexx_sm102_0212()
    end
    when (dec_QWHSIID = 213) then do
      void_rc = rexx_sm102_0213()
    end
    when (dec_QWHSIID = 214) then do
      void_rc = rexx_sm102_0214()
    end
    when (dec_QWHSIID = 215) then do
      void_rc = rexx_sm102_0215()
    end
    when (dec_QWHSIID = 216) then do
      void_rc = rexx_sm102_0216()
    end
    when (dec_QWHSIID = 217) then do
      void_rc = rexx_sm102_0217()
    end
    when (dec_QWHSIID = 218) then do
      void_rc = rexx_sm102_0218()
    end
    when (dec_QWHSIID = 219) then do
      void_rc = rexx_sm102_0219()
    end
    when (dec_QWHSIID = 220) then do
      void_rc = rexx_sm102_0220()
    end
    when (dec_QWHSIID = 221) then do
      void_rc = rexx_sm102_0221()
    end
    when (dec_QWHSIID = 222) then do
      void_rc = rexx_sm102_0222()
    end
    when (dec_QWHSIID = 223) then do
      void_rc = rexx_sm102_0223()
    end
    when (dec_QWHSIID = 224) then do
      void_rc = rexx_sm102_0224()
    end
    when (dec_QWHSIID = 225) then do
      void_rc = rexx_sm102_0225()
    end
    when (dec_QWHSIID = 226) then do
      void_rc = rexx_sm102_0226()
    end
    when (dec_QWHSIID = 227) then do
      void_rc = rexx_sm102_0227()
    end
    when (dec_QWHSIID = 228) then do
      void_rc = rexx_sm102_0228()
    end
    when (dec_QWHSIID = 229) then do
      void_rc = rexx_sm102_0229()
    end
    when (dec_QWHSIID = 230) then do
      void_rc = rexx_sm102_0230()
    end
    when (dec_QWHSIID = 231) then do
      void_rc = rexx_sm102_0231()
    end
    when (dec_QWHSIID = 232) then do
      void_rc = rexx_sm102_0232()
    end
    when (dec_QWHSIID = 233) then do
      void_rc = rexx_sm102_0233()
    end
    when (dec_QWHSIID = 234) then do
      void_rc = rexx_sm102_0234()
    end
    when (dec_QWHSIID = 235) then do
      void_rc = rexx_sm102_0235()
    end
    when (dec_QWHSIID = 236) then do
      void_rc = rexx_sm102_0236()
    end
    when (dec_QWHSIID = 237) then do
      void_rc = rexx_sm102_0237()
    end
    when (dec_QWHSIID = 238) then do
      void_rc = rexx_sm102_0238()
    end
    when (dec_QWHSIID = 239) then do
      void_rc = rexx_sm102_0239()
    end
    when (dec_QWHSIID = 240) then do
      void_rc = rexx_sm102_0240()
    end
    when (dec_QWHSIID = 241) then do
      void_rc = rexx_sm102_0241()
    end
    when (dec_QWHSIID = 242) then do
      void_rc = rexx_sm102_0242()
    end
    when (dec_QWHSIID = 243) then do
      void_rc = rexx_sm102_0243()
    end
    when (dec_QWHSIID = 244) then do
      void_rc = rexx_sm102_0244()
    end
    when (dec_QWHSIID = 245) then do
      void_rc = rexx_sm102_0245()
    end
    when (dec_QWHSIID = 246) then do
      void_rc = rexx_sm102_0246()
    end
    when (dec_QWHSIID = 247) then do
      void_rc = rexx_sm102_0247()
    end
    when (dec_QWHSIID = 248) then do
      void_rc = rexx_sm102_0248()
    end
    when (dec_QWHSIID = 249) then do
      void_rc = rexx_sm102_0249()
    end
    when (dec_QWHSIID = 250) then do
      void_rc = rexx_sm102_0250()
    end
    when (dec_QWHSIID = 251) then do
      void_rc = rexx_sm102_0251()
    end
    when (dec_QWHSIID = 252) then do
      void_rc = rexx_sm102_0252()
    end
    when (dec_QWHSIID = 253) then do
      void_rc = rexx_sm102_0253()
    end
    when (dec_QWHSIID = 254) then do
      void_rc = rexx_sm102_0254()
    end
    when (dec_QWHSIID = 255) then do
      void_rc = rexx_sm102_0255()
    end
    when (dec_QWHSIID = 256) then do
      void_rc = rexx_sm102_0256()
    end
    when (dec_QWHSIID = 257) then do
      void_rc = rexx_sm102_0257()
    end
    when (dec_QWHSIID = 258) then do
      void_rc = rexx_sm102_0258()
    end
    when (dec_QWHSIID = 259) then do
      void_rc = rexx_sm102_0259()
    end
    when (dec_QWHSIID = 260) then do
      void_rc = rexx_sm102_0260()
    end
    when (dec_QWHSIID = 261) then do
      void_rc = rexx_sm102_0261()
    end
    when (dec_QWHSIID = 262) then do
      void_rc = rexx_sm102_0262()
    end
    when (dec_QWHSIID = 263) then do
      void_rc = rexx_sm102_0263()
    end
    when (dec_QWHSIID = 264) then do
      void_rc = rexx_sm102_0264()
    end
    when (dec_QWHSIID = 265) then do
      void_rc = rexx_sm102_0265()
    end
    when (dec_QWHSIID = 266) then do
      void_rc = rexx_sm102_0266()
    end
    when (dec_QWHSIID = 267) then do
      void_rc = rexx_sm102_0267()
    end
    when (dec_QWHSIID = 268) then do
      void_rc = rexx_sm102_0268()
    end
    when (dec_QWHSIID = 269) then do
      void_rc = rexx_sm102_0269()
    end
    when (dec_QWHSIID = 270) then do
      void_rc = rexx_sm102_0270()
    end
    when (dec_QWHSIID = 271) then do
      void_rc = rexx_sm102_0271()
    end
    when (dec_QWHSIID = 272) then do
      void_rc = rexx_sm102_0272()
    end
    when (dec_QWHSIID = 273) then do
      void_rc = rexx_sm102_0273()
    end
    when (dec_QWHSIID = 274) then do
      void_rc = rexx_sm102_0274()
    end
    when (dec_QWHSIID = 275) then do
      void_rc = rexx_sm102_0275()
    end
    when (dec_QWHSIID = 276) then do
      void_rc = rexx_sm102_0276()
    end
    when (dec_QWHSIID = 277) then do
      void_rc = rexx_sm102_0277()
    end
    when (dec_QWHSIID = 278) then do
      void_rc = rexx_sm102_0278()
    end
    when (dec_QWHSIID = 279) then do
      void_rc = rexx_sm102_0279()
    end
    when (dec_QWHSIID = 280) then do
      void_rc = rexx_sm102_0280()
    end
    when (dec_QWHSIID = 281) then do
      void_rc = rexx_sm102_0281()
    end
    when (dec_QWHSIID = 282) then do
      void_rc = rexx_sm102_0282()
    end
    when (dec_QWHSIID = 283) then do
      void_rc = rexx_sm102_0283()
    end
    when (dec_QWHSIID = 284) then do
      void_rc = rexx_sm102_0284()
    end
    when (dec_QWHSIID = 285) then do
      void_rc = rexx_sm102_0285()
    end
    when (dec_QWHSIID = 286) then do
      void_rc = rexx_sm102_0286()
    end
    when (dec_QWHSIID = 287) then do
      void_rc = rexx_sm102_0287()
    end
    when (dec_QWHSIID = 288) then do
      void_rc = rexx_sm102_0288()
    end
    when (dec_QWHSIID = 289) then do
      void_rc = rexx_sm102_0289()
    end
    when (dec_QWHSIID = 290) then do
      void_rc = rexx_sm102_0290()
    end
    when (dec_QWHSIID = 291) then do
      void_rc = rexx_sm102_0291()
    end
    when (dec_QWHSIID = 292) then do
      void_rc = rexx_sm102_0292()
    end
    when (dec_QWHSIID = 293) then do
      void_rc = rexx_sm102_0293()
    end
    when (dec_QWHSIID = 294) then do
      void_rc = rexx_sm102_0294()
    end
    when (dec_QWHSIID = 295) then do
      void_rc = rexx_sm102_0295()
    end
    when (dec_QWHSIID = 296) then do
      void_rc = rexx_sm102_0296()
    end
    when (dec_QWHSIID = 297) then do
      void_rc = rexx_sm102_0297()
    end
    when (dec_QWHSIID = 298) then do
      void_rc = rexx_sm102_0298()
    end
    when (dec_QWHSIID = 299) then do
      void_rc = rexx_sm102_0299()
    end
    when (dec_QWHSIID = 300) then do
      void_rc = rexx_sm102_0300()
    end
    when (dec_QWHSIID = 301) then do
      void_rc = rexx_sm102_0301()
    end
    when (dec_QWHSIID = 302) then do
      void_rc = rexx_sm102_0302()
    end
    when (dec_QWHSIID = 303) then do
      void_rc = rexx_sm102_0303()
    end
    when (dec_QWHSIID = 304) then do
      void_rc = rexx_sm102_0304()
    end
    when (dec_QWHSIID = 305) then do
      void_rc = rexx_sm102_0305()
    end
    when (dec_QWHSIID = 306) then do
      void_rc = rexx_sm102_0306()
    end
    when (dec_QWHSIID = 307) then do
      void_rc = rexx_sm102_0307()
    end
    when (dec_QWHSIID = 308) then do
      void_rc = rexx_sm102_0308()
    end
    when (dec_QWHSIID = 309) then do
      void_rc = rexx_sm102_0309()
    end
    when (dec_QWHSIID = 310) then do
      void_rc = rexx_sm102_0310()
    end
    when (dec_QWHSIID = 311) then do
      void_rc = rexx_sm102_0311()
    end
    when (dec_QWHSIID = 312) then do
      void_rc = rexx_sm102_0312()
    end
    when (dec_QWHSIID = 313) then do
      void_rc = rexx_sm102_0313()
    end
    when (dec_QWHSIID = 314) then do
      void_rc = rexx_sm102_0314()
    end
    when (dec_QWHSIID = 315) then do
      void_rc = rexx_sm102_0315()
    end
    when (dec_QWHSIID = 316) then do
      void_rc = rexx_sm102_0316()
    end
    when (dec_QWHSIID = 317) then do
      void_rc = rexx_sm102_0317()
    end
    when (dec_QWHSIID = 318) then do
      void_rc = rexx_sm102_0318()
    end
    when (dec_QWHSIID = 319) then do
      void_rc = rexx_sm102_0319()
    end
    when (dec_QWHSIID = 320) then do
      void_rc = rexx_sm102_0320()
    end
    when (dec_QWHSIID = 321) then do
      void_rc = rexx_sm102_0321()
    end
    when (dec_QWHSIID = 322) then do
      void_rc = rexx_sm102_0322()
    end
    when (dec_QWHSIID = 323) then do
      void_rc = rexx_sm102_0323()
    end
    when (dec_QWHSIID = 324) then do
      void_rc = rexx_sm102_0324()
    end
    when (dec_QWHSIID = 325) then do
      void_rc = rexx_sm102_0325()
    end
    when (dec_QWHSIID = 326) then do
      void_rc = rexx_sm102_0326()
    end
    when (dec_QWHSIID = 327) then do
      void_rc = rexx_sm102_0327()
    end
    when (dec_QWHSIID = 328) then do
      void_rc = rexx_sm102_0328()
    end
    when (dec_QWHSIID = 329) then do
      void_rc = rexx_sm102_0329()
    end
    when (dec_QWHSIID = 330) then do
      void_rc = rexx_sm102_0330()
    end
    when (dec_QWHSIID = 331) then do
      void_rc = rexx_sm102_0331()
    end
    when (dec_QWHSIID = 332) then do
      void_rc = rexx_sm102_0332()
    end
    when (dec_QWHSIID = 333) then do
      void_rc = rexx_sm102_0333()
    end
    when (dec_QWHSIID = 334) then do
      void_rc = rexx_sm102_0334()
    end
    when (dec_QWHSIID = 335) then do
      void_rc = rexx_sm102_0335()
    end
    when (dec_QWHSIID = 336) then do
      void_rc = rexx_sm102_0336()
    end
    when (dec_QWHSIID = 337) then do
      void_rc = rexx_sm102_0337()
    end
    when (dec_QWHSIID = 338) then do
      void_rc = rexx_sm102_0338()
    end
    when (dec_QWHSIID = 339) then do
      void_rc = rexx_sm102_0339()
    end
    when (dec_QWHSIID = 340) then do
      void_rc = rexx_sm102_0340()
    end
    when (dec_QWHSIID = 341) then do
      void_rc = rexx_sm102_0341()
    end
    when (dec_QWHSIID = 342) then do
      void_rc = rexx_sm102_0342()
    end
    when (dec_QWHSIID = 343) then do
      void_rc = rexx_sm102_0343()
    end
    when (dec_QWHSIID = 344) then do
      void_rc = rexx_sm102_0344()
    end
    when (dec_QWHSIID = 345) then do
      void_rc = rexx_sm102_0345()
    end
    when (dec_QWHSIID = 346) then do
      void_rc = rexx_sm102_0346()
    end
    when (dec_QWHSIID = 347) then do
      void_rc = rexx_sm102_0347()
    end
    when (dec_QWHSIID = 348) then do
      void_rc = rexx_sm102_0348()
    end
    when (dec_QWHSIID = 349) then do
      void_rc = rexx_sm102_0349()
    end
    when (dec_QWHSIID = 350) then do
      void_rc = rexx_sm102_0350()
    end
    when (dec_QWHSIID = 351) then do
      void_rc = rexx_sm102_0351()
    end
    when (dec_QWHSIID = 352) then do
      void_rc = rexx_sm102_0352()
    end
    when (dec_QWHSIID = 353) then do
      void_rc = rexx_sm102_0353()
    end
    when (dec_QWHSIID = 354) then do
      void_rc = rexx_sm102_0354()
    end
    when (dec_QWHSIID = 355) then do
      void_rc = rexx_sm102_0355()
    end
    when (dec_QWHSIID = 356) then do
      void_rc = rexx_sm102_0356()
    end
    when (dec_QWHSIID = 357) then do
      void_rc = rexx_sm102_0357()
    end
    when (dec_QWHSIID = 358) then do
      void_rc = rexx_sm102_0358()
    end
    when (dec_QWHSIID = 359) then do
      void_rc = rexx_sm102_0359()
    end
    when (dec_QWHSIID = 360) then do
      void_rc = rexx_sm102_0360()
    end
    when (dec_QWHSIID = 361) then do
      void_rc = rexx_sm102_0361()
    end
    when (dec_QWHSIID = 362) then do
      void_rc = rexx_sm102_0362()
    end
    when (dec_QWHSIID = 363) then do
      void_rc = rexx_sm102_0363()
    end
    when (dec_QWHSIID = 364) then do
      void_rc = rexx_sm102_0364()
    end
    when (dec_QWHSIID = 365) then do
      void_rc = rexx_sm102_0365()
    end
    when (dec_QWHSIID = 366) then do
      void_rc = rexx_sm102_0366()
    end
    when (dec_QWHSIID = 367) then do
      void_rc = rexx_sm102_0367()
    end
    when (dec_QWHSIID = 368) then do
      void_rc = rexx_sm102_0368()
    end
    when (dec_QWHSIID = 369) then do
      void_rc = rexx_sm102_0369()
    end
    when (dec_QWHSIID = 370) then do
      void_rc = rexx_sm102_0370()
    end
    when (dec_QWHSIID = 371) then do
      void_rc = rexx_sm102_0371()
    end
    when (dec_QWHSIID = 372) then do
      void_rc = rexx_sm102_0372()
    end
    when (dec_QWHSIID = 373) then do
      void_rc = rexx_sm102_0373()
    end
    when (dec_QWHSIID = 374) then do
      void_rc = rexx_sm102_0374()
    end
    when (dec_QWHSIID = 375) then do
      void_rc = rexx_sm102_0375()
    end

    otherwise do
      say "    IFCID process 102-"dec_QWHSIID
    end
  end
  return 0

queue_SM102_data_out:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TEMPORARY POINTER TO BUFFER  x:" hex_SM102BUF
  void_rc = write_debug_data_out()
  return 0



/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 1
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0001:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0001 uses QWS0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0002:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0002 uses QWS1:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 3
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0003:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0003 does not exist:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 4
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0004:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0001 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 5
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0005:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0005 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 6
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0006:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0006 uses QWt0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 7
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0007:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0007 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0008:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0008 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 9
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0009:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0009 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 10
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0010:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0010 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 11
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0011:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0011 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 12
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0012:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0012 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 13
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0013:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0013 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 14
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0014:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0014 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 15
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0015:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0015 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 16
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0016:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0016 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 17
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0017:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0017 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 18
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0018:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0018 uses QWS0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 19
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0019:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0019 uses QWS0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 20
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0020:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0020 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 21
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0021:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0021 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 22
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0022:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0022 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 23
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0023:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0023 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 24
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0024:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0024 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 25
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0025:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0025 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 26
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0026:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0026 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 27
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0027:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0027 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 28
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0028:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0028 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 29
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0029:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0029 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 30
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0030:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0030 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 31
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0031:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0031 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 32
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0032:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0032 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 33
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0033:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0033 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 34
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0034:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0034 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 35
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0035:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0035 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 36
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0036:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0036 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 37
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0037:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0037 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 38
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0038:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0038 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 39
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0039:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0039 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 40
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0040:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0040 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 41
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0041:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0041 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 42
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0042:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0042 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 43
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0043:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0043 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 44
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0044:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0044 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 45
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0045:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0045 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 46
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0046:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0046 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 47
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0047:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0047 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 48
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0048:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0048 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 49
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0049:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0049 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 50
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0050:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0050 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 51
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0051:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0051 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 52
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0052:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0052 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 53
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0053:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0053 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 54
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0054:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0054 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 55
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0055:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0055 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 56
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0056:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0056 uses QWT0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 57
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0057:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0057 uses QWS0:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 58
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0058:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0058 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 59
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0059:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0059 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 60
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0060:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0060 uses QW01:"
    void_rc = write_debug_data_out()
  end
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 61
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0061:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0061 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 62
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0062:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0062 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 63
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0063:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0063 uses QW01:"
    void_rc = write_debug_data_out()
  end
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 64
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0064:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0064 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 65
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0065:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0065 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 66
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0066:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0066 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 67
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0067:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0067 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 68
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0068:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0068 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 69
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0069:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0069 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 70
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0070:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0070 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 71
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0071:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0071 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 72
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0072:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0072 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 73
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0073:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0073 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 74
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0074:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0074 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 75
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0075:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0075 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 76
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0076:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0076 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 77
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0077:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0077 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 78
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0078:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0078 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 79
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0079:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0079 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 80
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0080:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0080 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 81
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0081:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0081 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 82
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0082:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0082 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 83
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0083:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0083 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 84
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0084:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0084 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 85
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0085:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0085 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 86
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0086:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0086 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 87
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0087:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0087 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 88
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0088:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0088 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 89
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0089:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0089 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 90
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0090:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0090 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 91
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0091:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0091 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 92
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0092:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0092 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 93
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0093:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0093 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 94
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0094:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0094 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 95
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0095:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0095 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 96
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0096:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0096 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 97
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0097:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0097 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 98
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0098:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0098 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 99
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0099:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0099 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 100
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0100:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0100 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 101
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0101:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0101 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 102
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0102:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0102 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 103
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0103:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0103 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 104
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0104:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0104 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 105
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0105:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0105 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 106
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0106:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0106 uses QWPZ:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 107
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0107:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0107 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 108
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0108:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0108 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 109
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0109:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0109 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 110
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0110:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0110 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 111
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0111:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0111 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 112
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0112:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0112 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 113
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0113:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0113 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 114
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0114:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0114 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 115
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0115:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0115 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 116
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0116:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0116 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 117
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0117:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0117 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 118
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0118:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0118 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 119
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0119:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0119 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 120
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0120:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0120 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 121
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0121:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0121 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 122
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0122:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0122 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 123
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0123:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0123 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 124
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0124:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0124 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 125
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0125:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0125 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 126
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0126:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0126 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 127
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0127:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0127 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 128
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0128:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0128 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 129
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0129:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0129 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 130
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0130:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0130 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 131
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0131:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0131 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 132
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0132:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0132 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 133
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0133:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0133 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 134
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0134:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0134 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 135
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0135:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0135 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 136
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0136:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0136 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 137
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0137:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0137 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 138
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0138:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0138 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 139
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0139:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0139 uses QW01:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 140
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0140:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0140"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 141
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0141:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0141"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 142
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0142:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0142"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 143
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0143:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0143"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 144
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0144:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0144"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 145
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0145:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0145"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 146
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0146:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0146"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 147
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0147:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0147"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 148
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0148:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0148"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 149
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0149:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0149"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 150
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0150:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0150"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 151
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0151:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0151"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 152
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0152:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0152"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 153
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0153:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0153"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 154
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0154:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0154"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 155
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0155:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0155"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 156
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0156:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0156"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 157
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0157:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0157"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 158
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0158:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0158"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 159
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0159:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0159"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 160
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0160:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0160"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 161
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0161:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0161"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 162
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0162:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0162"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 163
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0163:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0163"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 164
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0164:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0164"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 165
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0165:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0165"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 166
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0166:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0166"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 167
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0167:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0167"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 168
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0168:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0168"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 169
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0169:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0169"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 170
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0170:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0170"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 171
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0171:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0171"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 172
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0172:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0172"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 173
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0173:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0173"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 174
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0174:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0174"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 175
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0175:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0175"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 176
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0176:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0176"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 177
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0177:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0177"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 178
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0178:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0178"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 179
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0179:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0179"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 180
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0180:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0180"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 181
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0181:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0181"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 182
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0182:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0182"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 183
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0183:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0183"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 184
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0184:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0184"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 185
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0185:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0185"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 186
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0186:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0186"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 187
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0187:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0187"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 188
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0188:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0188"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 189
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0189:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0189"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 190
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0190:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0190"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 191
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0191:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0191"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 192
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0192:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0192"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 193
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0193:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0193"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 194
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0194:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0194"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 195
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0195:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0195"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 196
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0196:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0196"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 197
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0197:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0197"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 198
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0198:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0198"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 199
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0199:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0199"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 200
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0200:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0200"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 201
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0201:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0201 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 202
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0202:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      "    <== insert 102-0202"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 203
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0203:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0203 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 204
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0204:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0204 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 205
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0205:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0205 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 206
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0206:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0206 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 207
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0207:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0207 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 208
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0208:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0208 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 209
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0209:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0209 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 210
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0210:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0210 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 211
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0211:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0211 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 212
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0212:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0212 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 213
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0213:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0213 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 214
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0214:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0214 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 215
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0215:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0215 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 216
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0216:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0216 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 217
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0217:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0217 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 218
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0218:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0218 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 219
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0219:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0219 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 220
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0220:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0220 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 221
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0221:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0221 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 222
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0222:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0222 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 223
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0223:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0223 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 224
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0224:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0224 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 225
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0225:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0225"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 226
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0226:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0226 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 227
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0227:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0227 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 228
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0228:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0228 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 229
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0229:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0229 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 230
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0230:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0230 uses QWS3:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 231
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0231:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0231 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 232
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0232:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0232 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 233
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0233:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0233 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 234
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0234:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0234 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 235
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0235:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0235 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 236
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0236:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0236 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 237
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0237:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0237 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 238
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0238:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0238 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 239
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0239:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0239 uses QWA1:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 240
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0240:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0240 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 241
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0241:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0241 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 242
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0242:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0242 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 243
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0243:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0243 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 244
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0244:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0244 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 245
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0245:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0245 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 246
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0246:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0246 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 247
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0247:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0247 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 248
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0248:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0248 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 249
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0249:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0249 uses QW03:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 250
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0250:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0250 uses QW04:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 251
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0251:
  if (pos(display_rty,desired_debug) > 0) then do
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = ,
      " rexx_sm102_0251 uses QW04:"
    void_rc = write_debug_data_out()
  end
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 252
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0252:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0252"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 253
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0253:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0253"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 254
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0254:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0254"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 255
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0255:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0255"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 256
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0256:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0256"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 257
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0257:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0257"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 258
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0258:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0258"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 259
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0259:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0259"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 260
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0260:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0260"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 261
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0261:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0261"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 262
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0262:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0262"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 263
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0263:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0263"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 264
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0264:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0264"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 265
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0265:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0265"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 266
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0266:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0266"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 267
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0267:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0267"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 268
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0268:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0268"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 269
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0269:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0269"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 270
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0270:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0270"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 271
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0271:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0271"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 272
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0272:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0272"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 273
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0273:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0273"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 274
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0274:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0274"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 275
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0275:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0275"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 276
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0276:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0276"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 277
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0277:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0277"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 278
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0278:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0278"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 279
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0279:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0279"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 280
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0280:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0280"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 281
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0281:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0281"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 282
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0282:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0282"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 283
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0283:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0283"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 284
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0284:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0284"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 285
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0285:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0285"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 286
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0286:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0286"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 287
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0287:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0287"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 288
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0288:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0288"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 289
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0289:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0289"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 290
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0290:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0290"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 291
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0291:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0291"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 292
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0292:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0292"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 293
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0293:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0293"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 294
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0294:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0294"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 295
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0295:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0295"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 296
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0296:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0296"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 297
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0297:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0297"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 298
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0298:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0298"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 299
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0299:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0299"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 300
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0300:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0300"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 301
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0301:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0301"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 302
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0302:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0302"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 303
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0303:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0303"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 304
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0304:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0304"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 305
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0305:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0305"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 306
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0306:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0306"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 307
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0307:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0307"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 308
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0308:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0308"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 309
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0309:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0309"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 310
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0310:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0310"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 311
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0311:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0311"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 312
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0312:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0312"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 313
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0313:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0313"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 314
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0314:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0314"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 315
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0315:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0315"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 316
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0316:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0316"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 317
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0317:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0317"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 318
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0318:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0318"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 319
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0319:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0319"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 320
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0320:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0320"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 321
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0321:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0321"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 322
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0322:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0322"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 323
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0323:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0323"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 324
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0324:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0324"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 325
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0325:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0325"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 326
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0326:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0326"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 327
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0327:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0327"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 328
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0328:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0328"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 329
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0329:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0329"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 330
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0330:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0330"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 331
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0331:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0331"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 332
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0332:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0332"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 333
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0333:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0333"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 334
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0334:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0334"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 335
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0335:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0335"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 336
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0336:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0336"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 337
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0337:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0337"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 338
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0338:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0338"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 339
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0339:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0339"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 340
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0340:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0340"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 341
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0341:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0341"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 342
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0342:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0342"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 343
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0343:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0343"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 344
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0344:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0344"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 345
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0345:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0345"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 346
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0346:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0346"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 347
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0347:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0347"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 348
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0348:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0348"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 349
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0349:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0349"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 350
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0350:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0350"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 351
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0351:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0351"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 352
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0352:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0352"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 353
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0353:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0353"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 354
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0354:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0354"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 355
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0355:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0355"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 356
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0356:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0356"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 357
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0357:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0357"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 358
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0358:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0358"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 359
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0359:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0359"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 360
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0360:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0360"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 361
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0361:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0361"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 362
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0362:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0362"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 363
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0363:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0363"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 364
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0364:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0364"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 365
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0365:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0365"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 366
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0366:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0366"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 367
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0367:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0367"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 368
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0368:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0368"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 369
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0369:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0369"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 370
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0370:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0370"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 371
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0371:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0371"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 372
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0372:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0372"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 373
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0373:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0373"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 374
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0374:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0374"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
SMF Record type 102 IFCID 375
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_sm102_0375:
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "    <== insert 102-0375"
  void_rc = write_debug_data_out()
  return 0


/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWT0 length is 00090
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWT0:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWT0,144)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWT0 Length: 144"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWT0 ,
    =00001 QWT02PSO +4 , /* R - OFFSET TO THE PRODUCT SECTION  00000 */
    =00005 QWT02PSL +2 , /* X - LENGTH OF THE PRODUCT SECTION  00004 */
    =00007 QWT02PSN +2 , /* X - NUMBER OF PRODUCT SECTIONS     00006 */
    =00009 QWT02R1O +4 , /* R - OFFSET TO THE DATA SECTION     00008 */
    =00013 QWT02R1L +2 , /* X - LENGTH OF THE DATA SECTION     0000C */
    =00015 QWT02R1N +2 , /* X - NUMBER OF DATA SECTIONS        0000E */
    =00017 QWT02R2O +4 , /* R - OFFSET TO THE DATA SECTION     00010 */
    =00021 QWT02R2L +2 , /* X - LENGTH OF THE DATA SECTION     00014 */
    =00023 QWT02R2N +2 , /* X - NUMBER OF DATA SECTIONS        00016 */
    =00025 QWT02R3O +4 , /* R - OFFSET TO THE DATA SECTION     00018 */
    =00029 QWT02R3L +2 , /* X - LENGTH OF THE DATA SECTION     0001C */
    =00031 QWT02R3N +2 , /* X - NUMBER OF DATA SECTIONS        0001E */
    =00033 QWT02R4O +4 , /* R - OFFSET TO THE DATA SECTION     00020 */
    =00037 QWT02R4L +2 , /* X - LENGTH OF THE DATA SECTION     00024 */
    =00039 QWT02R4N +2 , /* X - NUMBER OF DATA SECTIONS        00026 */
    =00041 QWT02R5O +4 , /* R - OFFSET TO THE DATA SECTION     00028 */
    =00045 QWT02R5L +2 , /* X - LENGTH OF THE DATA SECTION     0002C */
    =00047 QWT02R5N +2 , /* X - NUMBER OF DATA SECTIONS        0002E */
    =00049 QWT02R6O +4 , /* R - OFFSET TO THE DATA SECTION     00030 */
    =00053 QWT02R6L +2 , /* X - LENGTH OF THE DATA SECTION     00034 */
    =00055 QWT02R6N +2 , /* X - NUMBER OF DATA SECTIONS        00036 */
    =00057 QWT02R7O +4 , /* R - OFFSET TO THE DATA SECTION     00038 */
    =00061 QWT02R7L +2 , /* X - LENGTH OF THE DATA SECTION     0003C */
    =00063 QWT02R7N +2 , /* X - NUMBER OF DATA SECTIONS        0003E */
    =00065 QWT02R8O +4 , /* R - OFFSET TO THE DATA SECTION     00040 */
    =00069 QWT02R8L +2 , /* X - LENGTH OF THE DATA SECTION     00044 */
    =00071 QWT02R8N +2 , /* X - NUMBER OF DATA SECTIONS        00046 */
    =00073 QWT02R9O +4 , /* R - OFFSET TO THE DATA SECTION     00048 */
    =00077 QWT02R9L +2 , /* X - LENGTH OF THE DATA SECTION     0004C */
    =00079 QWT02R9N +2 , /* X - NUMBER OF DATA SECTIONS        0004E */
    =00081 QWT02RAO +4 , /* R - OFFSET TO THE DATA SECTION     00050 */
    =00085 QWT02RAL +2 , /* X - LENGTH OF THE DATA SECTION     00054 */
    =00087 QWT02RAN +2 , /* X - NUMBER OF DATA SECTIONS        00056 */
    =00089 QWT02RBO +4 , /* R - OFFSET TO THE DATA SECTION     00058 */
    =00093 QWT02RBL +2 , /* X - LENGTH OF THE DATA SECTION     0005C */
    =00095 QWT02RBN +2 , /* X - NUMBER OF DATA SECTIONS        0005E */
    =00097 QWT02RCO +4 , /* R - OFFSET TO THE DATA SECTION     00060 */
    =00101 QWT02RCL +2 , /* X - LENGTH OF THE DATA SECTION     00064 */
    =00103 QWT02RCN +2 , /* X - NUMBER OF DATA SECTIONS        00066 */
    =00105 QWT02RDO +4 , /* R - OFFSET TO THE DATA SECTION     00068 */
    =00109 QWT02RDL +2 , /* X - LENGTH OF THE DATA SECTION     0006C */
    =00111 QWT02RDN +2 , /* X - NUMBER OF DATA SECTIONS        0006E */
    =00113 QWT02REO +4 , /* R - OFFSET TO THE DATA SECTION     00070 */
    =00117 QWT02REL +2 , /* X - LENGTH OF THE DATA SECTION     00074 */
    =00119 QWT02REN +2 , /* X - NUMBER OF DATA SECTIONS        00076 */
    =00121 QWT02RFO +4 , /* R - OFFSET TO THE DATA SECTION     00078 */
    =00125 QWT02RFL +2 , /* X - LENGTH OF THE DATA SECTION     0007C */
    =00127 QWT02RFN +2 , /* X - NUMBER OF DATA SECTIONS        0007E */
    =00129 QWT02RGO +4 , /* R - OFFSET TO THE DATA SECTION     00080 */
    =00133 QWT02RGL +2 , /* X - LENGTH OF THE DATA SECTION     00084 */
    =00135 QWT02RGN +2 , /* X - NUMBER OF DATA SECTIONS        00086 */
    =00137 QWT02RHO +4 , /* R - OFFSET TO THE DATA SECTION     00088 */
    =00141 QWT02RHL +2 , /* X - LENGTH OF THE DATA SECTION     0008C */
    =00143 QWT02RHN +2 , /* X - NUMBER OF DATA SECTIONS        0008E */
,/* =00145 QWT02END +0 ,    C - END OF THE SELF DEFINING SECTI 00090 */
    .           /* End of DSECT */
  /* next byte at 145 */
  dec_QWT02PSO = c2d(QWT02PSO)
  dec_QWT02PSL = c2d(QWT02PSL)
  dec_QWT02PSN = c2d(QWT02PSN)
  dec_QWT02R1O = c2d(QWT02R1O)
  dec_QWT02R1L = c2d(QWT02R1L)
  dec_QWT02R1N = c2d(QWT02R1N)
  dec_QWT02R2O = c2d(QWT02R2O)
  dec_QWT02R2L = c2d(QWT02R2L)
  dec_QWT02R2N = c2d(QWT02R2N)
  dec_QWT02R3O = c2d(QWT02R3O)
  dec_QWT02R3L = c2d(QWT02R3L)
  dec_QWT02R3N = c2d(QWT02R3N)
  dec_QWT02R4O = c2d(QWT02R4O)
  dec_QWT02R4L = c2d(QWT02R4L)
  dec_QWT02R4N = c2d(QWT02R4N)
  dec_QWT02R5O = c2d(QWT02R5O)
  dec_QWT02R5L = c2d(QWT02R5L)
  dec_QWT02R5N = c2d(QWT02R5N)
  dec_QWT02R6O = c2d(QWT02R6O)
  dec_QWT02R6L = c2d(QWT02R6L)
  dec_QWT02R6N = c2d(QWT02R6N)
  dec_QWT02R7O = c2d(QWT02R7O)
  dec_QWT02R7L = c2d(QWT02R7L)
  dec_QWT02R7N = c2d(QWT02R7N)
  dec_QWT02R8O = c2d(QWT02R8O)
  dec_QWT02R8L = c2d(QWT02R8L)
  dec_QWT02R8N = c2d(QWT02R8N)
  dec_QWT02R9O = c2d(QWT02R9O)
  dec_QWT02R9L = c2d(QWT02R9L)
  dec_QWT02R9N = c2d(QWT02R9N)
  dec_QWT02RAO = c2d(QWT02RAO)
  dec_QWT02RAL = c2d(QWT02RAL)
  dec_QWT02RAN = c2d(QWT02RAN)
  dec_QWT02RBO = c2d(QWT02RBO)
  dec_QWT02RBL = c2d(QWT02RBL)
  dec_QWT02RBN = c2d(QWT02RBN)
  dec_QWT02RCO = c2d(QWT02RCO)
  dec_QWT02RCL = c2d(QWT02RCL)
  dec_QWT02RCN = c2d(QWT02RCN)
  dec_QWT02RDO = c2d(QWT02RDO)
  dec_QWT02RDL = c2d(QWT02RDL)
  dec_QWT02RDN = c2d(QWT02RDN)
  dec_QWT02REO = c2d(QWT02REO)
  dec_QWT02REL = c2d(QWT02REL)
  dec_QWT02REN = c2d(QWT02REN)
  dec_QWT02RFO = c2d(QWT02RFO)
  dec_QWT02RFL = c2d(QWT02RFL)
  dec_QWT02RFN = c2d(QWT02RFN)
  dec_QWT02RGO = c2d(QWT02RGO)
  dec_QWT02RGL = c2d(QWT02RGL)
  dec_QWT02RGN = c2d(QWT02RGN)
  dec_QWT02RHO = c2d(QWT02RHO)
  dec_QWT02RHL = c2d(QWT02RHL)
  dec_QWT02RHN = c2d(QWT02RHN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWT0",desired_dsect) > 0)) then do
    void_rc = queue_QWT0_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWT0:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWT0_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWT0:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE PRODUCT SECTIO  :" dec_QWT02PSO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PRODUCT SECTIO  :" dec_QWT02PSL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PRODUCT SECTIONS    :" dec_QWT02PSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R1O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R1N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R2O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R2L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R2N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R3O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R3L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R3N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R4O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R4L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R4N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R5O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R5L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R5N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R6O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R6L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R6N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R7O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R7L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R7N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R8O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R8L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R8N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02R9O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02R9L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02R9N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RAO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RAN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RBO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RBL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RBN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RCO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RCL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RCN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RDO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RDN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02REO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02REL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02REN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RFO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RFL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RFN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RGO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RGL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET TO THE DATA SECTION    :" dec_QWT02RHO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE DATA SECTION    :" dec_QWT02RHL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA SECTIONS       :" dec_QWT02RHN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0004 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0004:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0004,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0004 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0004 ,
,/* =00001 RSVD0001 +0 ,    F -                                00000 */
    =00001 QW0004BL +2 , /* H - LENGTH OF THE VARIABLE LENGTH  00000 */
    =00003 QW0004RL +2 , /* H - LENGTH OF THE VARIABLE LENGTH  00002 */
,/* =00005 QW0004MS +0 ,    C - MESSAGE TEXT USED TO START THE 00004 */
    =00005 QW0004CM +8 , /* X - (S)                            00004 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0004BL = c2x(QW0004BL)
  hex_QW0004RL = c2x(QW0004RL)
  hex_QW0004CM = c2x(QW0004CM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0004",desired_dsect) > 0)) then do
    void_rc = queue_QW0004_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0004:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0004_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0004:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE VARIABLE LENGT x:" hex_QW0004BL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE VARIABLE LENGT x:" hex_QW0004RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0004CM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0005 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0005:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0005,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0005 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0005 ,
,/* =00001 RSVD0001 +0 ,    F -                                00000 */
    =00001 QW0005BL +2 , /* H - LENGTH OF THE VARIABLE LENGTH  00000 */
    =00003 QW0005RL +2 , /* H - LENGTH OF THE VARIABLE LENGTH  00002 */
,/* =00005 QW0005MS +0 ,    C - MESSAGE TEXT USED TO STOP  THE 00004 */
    =00005 QW0005CM +4 , /* R - (S)                            00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0005BL = c2x(QW0005BL)
  hex_QW0005RL = c2x(QW0005RL)
  hex_QW0005CM = c2x(QW0005CM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0005",desired_dsect) > 0)) then do
    void_rc = queue_QW0005_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0005:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0005_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0005:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE VARIABLE LENGT x:" hex_QW0005BL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE VARIABLE LENGT x:" hex_QW0005RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0005CM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0006 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0006:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0006,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0006 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0006 ,
    =00001 QW0006DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0006OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0006BP +4 , /* F - BUFFER POOL INTERNAL ID (0-49  00004 */
    =00009 QW0006PN +3 , /* X - FIRST PAGE NUMBER TO BE READ ( 00008 */
    =00012 QW0006F +1 , /* C - FLAG FOR TYPE OF READ           0000B */
  ,     /* QW0006FS EQU x'00000000' SEQUENTIAL PREFETCH REQUEST      */
  ,     /* QW0006FL EQU x'000000D3' LIST PREFETCH REQUEST            */
  ,     /* QW0006FD EQU x'000000C4' DYNAMIC SEQUENTIAL PREFETCH REQU */
  ,     /* QW0006FR EQU x'000000D9' READ  REQUEST                    */
    =00013 QW0006AC +4 , /* F - ACE TOKEN OF REQUESTOR         0000C */
    =00017 QW0006PG +4 , /* F - FIRST PAGE NUMBER TO BE READ   00010 */
    =00021 QW0006FG +1 , /* C - FLAG FOR TYPE OF TABLE SPACE   00014 */
  ,     /* QW0006F1 EQU x'000000D5' NON LARGE TABLE SPACE            */
  ,     /* QW0006F2 EQU x'000000D3' NON-EA LARGE TABLE SPACE         */
  ,     /* QW0006F3 EQU x'00000000' EA-LARGE TABLE SPACE             */
    =00022 RSVD0001 +3 , /* C - RESERVED                       00015 */
    =00025 QW0006PT +4 , /* F - Partition number or 0 if non-  00018 */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0006DB = c2x(QW0006DB)
  hex_QW0006OB = c2x(QW0006OB)
  hex_QW0006BP = c2x(QW0006BP)
  hex_QW0006PN = c2x(QW0006PN)
  hex_QW0006F = c2x(QW0006F)
  hex_QW0006AC = c2x(QW0006AC)
  hex_QW0006PG = c2x(QW0006PG)
  hex_QW0006FG = c2x(QW0006FG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0006PT = c2x(QW0006PT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0006",desired_dsect) > 0)) then do
    void_rc = queue_QW0006_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0006:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0006_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0006:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0006DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0006OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0006BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST PAGE NUMBER TO BE READ x:" hex_QW0006PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF READ        x:" hex_QW0006F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF REQUESTOR       x:" hex_QW0006AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST PAGE NUMBER TO BE READ x:" hex_QW0006PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF TABLE SPACE x:" hex_QW0006FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partition number or 0 if non x:" hex_QW0006PT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0007 length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0007:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0007,14)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0007 Length: 14"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0007 ,
    =00001 QW0007MM +4 , /* F - MEDIA MANAGER RETURN CODE - 0  00000 */
    =00005 QW0007DB +2 , /* X - DATABASE ID (DBID)             00004 */
    =00007 QW0007OB +2 , /* X - PAGESET OBID                   00006 */
    =00009 QW0007AC +4 , /* F - ACE TOKEN OF ACTUAL REQUESTOR. 00008 */
    =00013 QW0007NP +2 , /* H - NUMBER OF PAGES READ           0000C */
    .           /* End of DSECT */
  /* next byte at 15 */
  hex_QW0007MM = c2x(QW0007MM)
  hex_QW0007DB = c2x(QW0007DB)
  hex_QW0007OB = c2x(QW0007OB)
  hex_QW0007AC = c2x(QW0007AC)
  hex_QW0007NP = c2x(QW0007NP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0007",desired_dsect) > 0)) then do
    void_rc = queue_QW0007_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0007:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0007_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0007:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEDIA MANAGER RETURN CODE -  x:" hex_QW0007MM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0007DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0007OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF ACTUAL REQUESTO x:" hex_QW0007AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PAGES READ         x:" hex_QW0007NP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW00072 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW00072:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW00072,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW00072 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW00072 ,
    =00001 QW0007PF +4 , /* F - PAGE PREFETCHED VIA AN IO OPER 00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0007PF = c2x(QW0007PF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW00072",desired_dsect) > 0)) then do
    void_rc = queue_QW00072_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW00072:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW00072_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW00072:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE PREFETCHED VIA AN IO OP x:" hex_QW0007PF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0008 length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0008:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0008,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0008 Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0008 ,
    =00001 QW0008DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0008OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0008WR +4 , /* F - NUMBER OF PAGES TO BE WRITTEN  00004 */
    =00009 QW0008PI +4 , /* F - NUMBER OF ANTICIPATED PAGE FAU 00008 */
    =00013 QW0008BP +4 , /* F - BUFFER POOL INTERNAL ID (0-49  0000C */
    =00017 QW0008AB +4 , /* F - NUMBER OF ACTIVE - NON STEALAB 00010 */
    =00021 QW0008DW +4 , /* F - NUMBER OF UPDATED PAGES ON DEF 00014 */
    =00025 QW0008FC +1 , /* C - FLAG FOR TYPE OF WRITE         00018 */
  ,     /* QW0008F1 EQU x'000000C3' CASTOUT FROM SES TO DISK         */
  ,     /* QW0008F2 EQU x'00000000' NORMAL BUFFER MANAGER DISK WRITE */
    =00026 RSVD0001 +3 , /* C - Reserved                       00019 */
    =00029 QW0008PT +4 , /* F - Partition number or 0 if non-  0001C */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QW0008DB = c2x(QW0008DB)
  hex_QW0008OB = c2x(QW0008OB)
  hex_QW0008WR = c2x(QW0008WR)
  hex_QW0008PI = c2x(QW0008PI)
  hex_QW0008BP = c2x(QW0008BP)
  hex_QW0008AB = c2x(QW0008AB)
  hex_QW0008DW = c2x(QW0008DW)
  hex_QW0008FC = c2x(QW0008FC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0008PT = c2x(QW0008PT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0008",desired_dsect) > 0)) then do
    void_rc = queue_QW0008_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0008:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0008_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0008:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0008DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0008OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PAGES TO BE WRITTE x:" hex_QW0008WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ANTICIPATED PAGE F x:" hex_QW0008PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0008BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ACTIVE - NON STEAL x:" hex_QW0008AB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF UPDATED PAGES ON D x:" hex_QW0008DW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF WRITE       x:" hex_QW0008FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partition number or 0 if non x:" hex_QW0008PT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0009 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0009:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0009,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0009 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0009 ,
    =00001 QW0009MM +4 , /* F - MEDIA MANAGER RETURN CODE - 0  00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0009MM = c2x(QW0009MM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0009",desired_dsect) > 0)) then do
    void_rc = queue_QW0009_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0009:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0009_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0009:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEDIA MANAGER RETURN CODE -  x:" hex_QW0009MM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0010 length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0010:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0010,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0010 Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0010 ,
    =00001 QW0010DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0010OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0010WR +4 , /* F - NUMBER OF PAGES TO BE WRITTEN  00004 */
    =00009 QW0010PI +4 , /* F - NUMBER OF ANTICIPATED PAGE FAU 00008 */
    =00013 QW0010BP +4 , /* F - BUFFER POOL INTERNAL ID (0-49  0000C */
    =00017 QW0010AB +4 , /* F - NUMBER OF ACTIVE BUFFERS IN PO 00010 */
    =00021 QW0010DW +4 , /* F - NUMBER OF UPDATED PAGES ON DEF 00014 */
    =00025 QW0010FC +1 , /* C - FLAG FOR TYPE OF WRITE         00018 */
  ,     /* QW0010F1 EQU x'000000C3' CASTOUT FROM SES TO DISK         */
  ,     /* QW0010F2 EQU x'00000000' NORMAL BUFFER MANAGER DISK WRITE */
    =00026 RSVD0001 +3 , /* C - Reserved                       00019 */
    =00029 QW0010PT +4 , /* F - Partition number or 0 if non-  0001C */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QW0010DB = c2x(QW0010DB)
  hex_QW0010OB = c2x(QW0010OB)
  hex_QW0010WR = c2x(QW0010WR)
  hex_QW0010PI = c2x(QW0010PI)
  hex_QW0010BP = c2x(QW0010BP)
  hex_QW0010AB = c2x(QW0010AB)
  hex_QW0010DW = c2x(QW0010DW)
  hex_QW0010FC = c2x(QW0010FC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0010PT = c2x(QW0010PT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0010",desired_dsect) > 0)) then do
    void_rc = queue_QW0010_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0010:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0010_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0010:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0010DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0010OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PAGES TO BE WRITTE x:" hex_QW0010WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ANTICIPATED PAGE F x:" hex_QW0010PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0010BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ACTIVE BUFFERS IN  x:" hex_QW0010AB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF UPDATED PAGES ON D x:" hex_QW0010DW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF WRITE       x:" hex_QW0010FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partition number or 0 if non x:" hex_QW0010PT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0011 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0011:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0011,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0011 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0011 ,
    =00001 QW0011DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0011PS +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0011OB +2 , /* X - RECORD OBID                    00004 */
    =00007 QW0011TM +8 , /* X - TIME EXIT WAS CALLED (STCK)    00006 */
    =00015 QW0011RT +2 , /* C - EXITS RETURN CODE (EXPLRC1)    0000E */
    =00017 QW0011RE +4 , /* C - EXITS REASON CODE (EXPLRC2)    00010 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0011DB = c2x(QW0011DB)
  hex_QW0011PS = c2x(QW0011PS)
  hex_QW0011OB = c2x(QW0011OB)
  hex_QW0011TM = c2x(QW0011TM)
  hex_QW0011RT = c2x(QW0011RT)
  hex_QW0011RE = c2x(QW0011RE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0011",desired_dsect) > 0)) then do
    void_rc = queue_QW0011_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0011:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0011_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0011:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0011DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0011PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0011OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME EXIT WAS CALLED (STCK)  x:" hex_QW0011TM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXITS RETURN CODE (EXPLRC1)  x:" hex_QW0011RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXITS REASON CODE (EXPLRC2)  x:" hex_QW0011RE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0012 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0012:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0012,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0012 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0012 ,
    =00001 QW0012DB +2 , /* X - DATABASE ID  (DBID)            00000 */
    =00003 QW0012PS +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0012OB +2 , /* X - RECORD OBID                    00004 */
    =00007 QW0012TM +8 , /* X - TIME EXIT WAS CALLED (STCK)    00006 */
    =00015 QW0012RT +2 , /* C - EXITS RETURN CODE (EXPLRC1)    0000E */
    =00017 QW0012RE +4 , /* C - EXITS REASON CODE (EXPLRC2)    00010 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0012DB = c2x(QW0012DB)
  hex_QW0012PS = c2x(QW0012PS)
  hex_QW0012OB = c2x(QW0012OB)
  hex_QW0012TM = c2x(QW0012TM)
  hex_QW0012RT = c2x(QW0012RT)
  hex_QW0012RE = c2x(QW0012RE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0012",desired_dsect) > 0)) then do
    void_rc = queue_QW0012_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0012:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0012_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0012:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID  (DBID)          x:" hex_QW0012DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0012PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0012OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME EXIT WAS CALLED (STCK)  x:" hex_QW0012TM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXITS RETURN CODE (EXPLRC1)  x:" hex_QW0012RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXITS REASON CODE (EXPLRC2)  x:" hex_QW0012RE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0013 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0013:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0013,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0013 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0013 ,
,/* =00001 QW0013S1 +0 ,    F - SELF DEFINING SECTION 1 - QWT0 00000 */
    =00001 QW0013DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0013PS +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0013OB +2 , /* X - RECORD OBID                    00004 */
  ,
  ,/*00006 __no__name__ ORG - QW0013 - x'00000000'             00006 */
,/* =00001 QW0013S2 +0 ,    F - SELF DEFINING SECTION 2 - QWT0 00000 */
    =00001 QW0013C1 +2 , /* X - FIRST COLUMN NUMBER            00000 */
    =00003 QW0013OP +2 , /* C - OPERATOR - NE,G,GE,LE ETC      00002 */
    =00005 QW0013CO +1 , /* C - CONNECTOR A=AND, O=OR, BLANK   00004 */
    =00006 QW0013TF +1 , /* C - T=TRUE / F=FALSE / OR BINARY Z 00005 */
    =00007 QW0013TP +1 , /* C - C=COLUMN OR V=VALUE FOLLOW     00006 */
    =00008 RSVD0001 +1 , /* C - RESERVED                       00007 */
    =00009 QW0013VA +8 , /* C - FIRST EIGHT BYTES OF VALUE     00008 */
  ,
  ,/*00016 __no__name__ ORG - QW0013VA - x'00000008'           00010 */
    =00009 QW0013C2 +2 , /* X - SECOND COLUMN NUMBER           00008 */
    =00011 RSVD0002 +6 , /* X - RESERVED                       0000A */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0013DB = c2x(QW0013DB)
  hex_QW0013PS = c2x(QW0013PS)
  hex_QW0013OB = c2x(QW0013OB)
  hex_QW0013C1 = c2x(QW0013C1)
  hex_QW0013OP = c2x(QW0013OP)
  hex_QW0013CO = c2x(QW0013CO)
  hex_QW0013TF = c2x(QW0013TF)
  hex_QW0013TP = c2x(QW0013TP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0013VA = c2x(QW0013VA)
  hex_QW0013C2 = c2x(QW0013C2)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0013",desired_dsect) > 0)) then do
    void_rc = queue_QW0013_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0013:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0013_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0013:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0013DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0013PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0013OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST COLUMN NUMBER          x:" hex_QW0013C1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATOR - NE,G,GE,LE ETC    x:" hex_QW0013OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTOR A=AND, O=OR, BLANK x:" hex_QW0013CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      T=TRUE / F=FALSE / OR BINARY x:" hex_QW0013TF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      C=COLUMN OR V=VALUE FOLLOW   x:" hex_QW0013TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST EIGHT BYTES OF VALUE   x:" hex_QW0013VA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECOND COLUMN NUMBER         x:" hex_QW0013C2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0014 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0014:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0014,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0014 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0014 ,
    =00001 QW0014RT +4 , /* F - RETURN CODE - 0 SUCCESSFUL     00000 */
    =00005 QW0014RE +4 , /* F - (S)                            00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0014RT = c2x(QW0014RT)
  hex_QW0014RE = c2x(QW0014RE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0014",desired_dsect) > 0)) then do
    void_rc = queue_QW0014_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0014:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0014_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0014:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL   x:" hex_QW0014RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0014RE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0015 length is 00012
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0015:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0015,18)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0015 Length: 18"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0015 ,
,/* =00001 QW0015S1 +0 ,    F - SELF DEFINING SECTION 1 - QWT0 00000 */
    =00001 QW0015AC +4 , /* A - CUB TOKEN    - FOR UNIQUENESS  00000 */
    =00005 QW0015DB +2 , /* X - DATABASE ID (DBID)             00004 */
    =00007 QW0015PS +2 , /* X - PAGESET OBID FOR THE TABLESPAC 00006 */
    =00009 QW0015OB +2 , /* X - RECORD OBID FOR THE TABLE      00008 */
    =00011 QW0015IB +2 , /* X - INDEX OBID                     0000A */
    =00013 RSVD0001 +6 , /* C - RESERVED                       0000C */
  ,
  ,/*00018 __no__name__ ORG - QW0015 - x'00000000'             00012 */
,/* =00001 QW0015S2 +0 ,    F - SELF DEFINING SECTION 2 - QWT0 00000 */
    =00001 QW0015C1 +2 , /* X - FIRST COLUMN NUMBER            00000 */
    =00003 QW0015OP +2 , /* C - OPERATOR - NE,G,GE,LE ETC      00002 */
    =00005 QW0015CO +1 , /* C - CONNECTOR A=AND, O=OR, OR BINA 00004 */
    =00006 QW0015TF +1 , /* C - T=TRUE / F=FALSE / OR BINARY Z 00005 */
    =00007 QW0015TP +1 , /* C - C=COLUMN OR V=VALUE FOLLOW     00006 */
    =00008 RSVD0002 +1 , /* C - RESERVED                       00007 */
    =00009 QW0015VA +8 , /* C - FIRST EIGHT BYTES OF VALUE     00008 */
  ,
  ,/*00016 __no__name__ ORG - QW0015VA - x'00000008'           00010 */
    =00009 QW0015C2 +2 , /* X - SECOND COLUMN NUMBER           00008 */
    =00011 RSVD0003 +6 , /* X - RESERVED                       0000A */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0015AC = c2x(QW0015AC)
  hex_QW0015DB = c2x(QW0015DB)
  hex_QW0015PS = c2x(QW0015PS)
  hex_QW0015OB = c2x(QW0015OB)
  hex_QW0015IB = c2x(QW0015IB)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0015C1 = c2x(QW0015C1)
  hex_QW0015OP = c2x(QW0015OP)
  hex_QW0015CO = c2x(QW0015CO)
  hex_QW0015TF = c2x(QW0015TF)
  hex_QW0015TP = c2x(QW0015TP)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0015VA = c2x(QW0015VA)
  hex_QW0015C2 = c2x(QW0015C2)
  hex_RSVD0003 = c2x(RSVD0003)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0015",desired_dsect) > 0)) then do
    void_rc = queue_QW0015_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0015:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0015_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0015:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CUB TOKEN    - FOR UNIQUENES x:" hex_QW0015AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0015DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID FOR THE TABLESP x:" hex_QW0015PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID FOR THE TABLE    x:" hex_QW0015OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDEX OBID                   x:" hex_QW0015IB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST COLUMN NUMBER          x:" hex_QW0015C1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATOR - NE,G,GE,LE ETC    x:" hex_QW0015OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTOR A=AND, O=OR, OR BI x:" hex_QW0015CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      T=TRUE / F=FALSE / OR BINARY x:" hex_QW0015TF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      C=COLUMN OR V=VALUE FOLLOW   x:" hex_QW0015TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST EIGHT BYTES OF VALUE   x:" hex_QW0015VA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECOND COLUMN NUMBER         x:" hex_QW0015C2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0016 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0016:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0016,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0016 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0016 ,
,/* =00001 QW0016S1 +0 ,    F - SELF DEFINING SECTION 1 - QWT0 00000 */
    =00001 QW0016AC +4 , /* A - CUB TOKEN    - FOR UNIQUENESS  00000 */
    =00005 QW0016DB +2 , /* X - DATABASE ID (DBID)             00004 */
    =00007 QW0016PS +2 , /* X - PAGESET OBID FOR THE TABLESPAC 00006 */
    =00009 QW0016OB +2 , /* X - RECORD OBID FOR THE TABLE      00008 */
    =00011 QW0016WT +2 , /* C - FILE TYPE, POSSIBLE VALUES ARE 0000A */
    =00013 QW0016TL +2 , /* X - TRIGGER LEVEL (UP TO A MAX OF  0000C */
    =00015 QW0016ST +1 , /* C - TRIGGERING SQL TYPE, POSSIBLE  0000E */
    =00016 QW0016RI +1 , /* C - REFERENTIAL INTEGRITY TYPE -   0000F */
  ,     /* QW0016NW EQU x'0000D5E6' NW - NON-WORKFILE                */
  ,     /* QW0016WF EQU x'0000E6C6' WF - WORKFILE                    */
  ,     /* QW0016TT EQU x'0000E3E3' TT - TEMPORARY TABLE             */
  ,     /* QW0016TR EQU x'0000E3D9' TR - TRANSITION TABLE FOR TRIGGE */
  ,     /* QW0016I EQU x'000000C9' I - INSERT                        */
  ,     /* QW0016U EQU x'00000000' U - UPDATE                        */
  ,     /* QW0016D EQU x'000000C4' D - DELETE                        */
  ,     /* QW0016C EQU x'000000C3' C - CASCADE DELETE                */
  ,     /* QW0016S EQU x'00000000' S - SET NULL                      */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0016AC = c2x(QW0016AC)
  hex_QW0016DB = c2x(QW0016DB)
  hex_QW0016PS = c2x(QW0016PS)
  hex_QW0016OB = c2x(QW0016OB)
  hex_QW0016WT = c2x(QW0016WT)
  hex_QW0016TL = c2x(QW0016TL)
  hex_QW0016ST = c2x(QW0016ST)
  hex_QW0016RI = c2x(QW0016RI)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0016",desired_dsect) > 0)) then do
    void_rc = queue_QW0016_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0016:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0016_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0016:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CUB TOKEN    - FOR UNIQUENES x:" hex_QW0016AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0016DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID FOR THE TABLESP x:" hex_QW0016PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID FOR THE TABLE    x:" hex_QW0016OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FILE TYPE, POSSIBLE VALUES A x:" hex_QW0016WT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TRIGGER LEVEL (UP TO A MAX O x:" hex_QW0016TL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TRIGGERING SQL TYPE, POSSIBL x:" hex_QW0016ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REFERENTIAL INTEGRITY TYPE - x:" hex_QW0016RI
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0017 length is 00012
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0017:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0017,18)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0017 Length: 18"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0017 ,
,/* =00001 QW0017S1 +0 ,    F - SELF DEFINING SECTION 1 - QWT0 00000 */
    =00001 QW0017AC +4 , /* A - CUB TOKEN    - FOR UNIQUENESS  00000 */
    =00005 QW0017DB +2 , /* X - DATABASE ID (DBID)             00004 */
    =00007 QW0017PS +2 , /* X - PAGESET OBID                   00006 */
    =00009 QW0017OB +2 , /* X - RECORD OBID                    00008 */
    =00011 RSVD0001 +2 , /* X - RESERVED                       0000A */
    =00013 QW0017TY +2 , /* C - SCAN TYPE, POSSIBLE VALUES ARE 0000C */
    =00015 RSVD0002 +4 , /* C - RESERVED                       0000E */
  ,
  ,/*00018 __no__name__ ORG - QW0017 - x'00000000'             00012 */
,/* =00001 QW0017S2 +0 ,    F - SELF DEFINING SECTION 2 - QWT0 00000 */
    =00001 QW0017C1 +2 , /* X - FIRST COLUMN NUMBER            00000 */
    =00003 QW0017OP +2 , /* C - OPERATOR - NE,G,GE,LE ETC      00002 */
    =00005 QW0017CO +1 , /* C - CONNECTOR A=AND, O=OR, OR BINA 00004 */
    =00006 QW0017TF +1 , /* C - T=TRUE / F=FALSE / OR BINARY Z 00005 */
    =00007 QW0017TP +1 , /* C - C=COLUMN OR V=VALUE FOLLOW     00006 */
    =00008 RSVD0003 +1 , /* C - RESERVED                       00007 */
    =00009 QW0017VA +8 , /* C - FIRST EIGHT BYTES OF VALUE     00008 */
  ,
  ,/*00016 __no__name__ ORG - QW0017VA - x'00000008'           00010 */
    =00009 QW0017C2 +2 , /* X - SECOND COLUMN NUMBER           00008 */
  ,     /* QW0017SQ EQU x'0000E2D8' SQ - SEQUENTIAL SCAN             */
  ,     /* QW0017WF EQU x'0000E6C6' WF - WORKFILE SCAN               */
  ,     /* QW0017TT EQU x'0000E3E3' TT - TEMPORARY TABLE SCAN        */
  ,     /* QW0017TR EQU x'0000E3D9' TR - TRANSITION TABLE SCAN FOR T */
    .           /* End of DSECT */
  /* next byte at 11 */
  hex_QW0017AC = c2x(QW0017AC)
  hex_QW0017DB = c2x(QW0017DB)
  hex_QW0017PS = c2x(QW0017PS)
  hex_QW0017OB = c2x(QW0017OB)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0017TY = c2x(QW0017TY)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0017C1 = c2x(QW0017C1)
  hex_QW0017OP = c2x(QW0017OP)
  hex_QW0017CO = c2x(QW0017CO)
  hex_QW0017TF = c2x(QW0017TF)
  hex_QW0017TP = c2x(QW0017TP)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0017VA = c2x(QW0017VA)
  hex_QW0017C2 = c2x(QW0017C2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0017",desired_dsect) > 0)) then do
    void_rc = queue_QW0017_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0017:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0017_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0017:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CUB TOKEN    - FOR UNIQUENES x:" hex_QW0017AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0017DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0017PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0017OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SCAN TYPE, POSSIBLE VALUES A x:" hex_QW0017TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST COLUMN NUMBER          x:" hex_QW0017C1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATOR - NE,G,GE,LE ETC    x:" hex_QW0017OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTOR A=AND, O=OR, OR BI x:" hex_QW0017CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      T=TRUE / F=FALSE / OR BINARY x:" hex_QW0017TF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      C=COLUMN OR V=VALUE FOLLOW   x:" hex_QW0017TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST EIGHT BYTES OF VALUE   x:" hex_QW0017VA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECOND COLUMN NUMBER         x:" hex_QW0017C2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0018 length is 00058
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0018:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0018,88)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0018 Length: 88"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0018 ,
    =00001 QW0018RT +4 , /* F - (S)                            00000 */
    =00005 QW0018RE +4 , /* F - (S)                            00004 */
    =00009 QW0018AC +4 , /* A - CUB TOKEN    - FOR UNIQUENESS  00008 */
  ,
  ,/*00012 __no__name__ ORG - QW0018 - x'00000000'             0000C */
    =00001 QW0018ID +4 , /* C - IDENTIFICATION (ID) - SEE EQUA 00000 */
    =00005 QW0018RP +8 , /* X - ROWS PROCESSED- ANY RECORD TYP 00004 */
    =00013 QW0018LA +8 , /* X - ROWS LOOKED AT - RIGHT RECORD  0000C */
    =00021 QW0018DQ +8 , /* X - ROWS DATA MANAGER QUALIFIED    00014 */
    =00029 QW0018RQ +8 , /* X - ROWS RDS QUALIFIED             0001C */
    =00037 QW0018IN +8 , /* X - ROWS INSERTED                  00024 */
    =00045 QW0018UP +8 , /* X - ROWS UPDATED                   0002C */
    =00053 QW0018DE +8 , /* X - ROWS DELETED                   00034 */
    =00061 QW0018PS +4 , /* X - PAGES SCANNED                  0003C */
    =00065 QW0018PR +4 , /* X - ADDITIONAL PAGES SCANNED TO EN 00040 */
    =00069 QW0018DR +8 , /* X - ADDITIONAL ROWS DELETED OR SET 00044 */
    =00077 QW0018SK +8 , /* X - ROWS SKIPPED DUE TO INCOMPATIB 0004C */
    =00085 RSVD0001 +4 , /* X - Unused                         00054 */
  ,     /* QW0018IX EQU x'C9D5C4E7' ID = INDEX                       */
  ,     /* QW0018SD EQU x'E2C5D8C4' ID = SEQUENTIAL DATA             */
  ,     /* QW0018SW EQU x'E2C5D8E6' ID = SEQUENTIAL DATA WORKFILE    */
  ,     /* QW0018ST EQU x'E2C5D8E3' ID = SEQUENTIAL DATA TEMP TABLE  */
  ,     /* QW0018SR EQU x'E2C5D8D9' ID = SEQUENTIAL DATA TRANSITION  */
    .           /* End of DSECT */
  /* next byte at 89 */
  hex_QW0018RT = c2x(QW0018RT)
  hex_QW0018RE = c2x(QW0018RE)
  hex_QW0018AC = c2x(QW0018AC)
  hex_QW0018ID = c2x(QW0018ID)
  hex_QW0018RP = c2x(QW0018RP)
  hex_QW0018LA = c2x(QW0018LA)
  hex_QW0018DQ = c2x(QW0018DQ)
  hex_QW0018RQ = c2x(QW0018RQ)
  hex_QW0018IN = c2x(QW0018IN)
  hex_QW0018UP = c2x(QW0018UP)
  hex_QW0018DE = c2x(QW0018DE)
  hex_QW0018PS = c2x(QW0018PS)
  hex_QW0018PR = c2x(QW0018PR)
  hex_QW0018DR = c2x(QW0018DR)
  hex_QW0018SK = c2x(QW0018SK)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0018",desired_dsect) > 0)) then do
    void_rc = queue_QW0018_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0018:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0018_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0018:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0018RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0018RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CUB TOKEN    - FOR UNIQUENES x:" hex_QW0018AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IDENTIFICATION (ID) - SEE EQ x:" hex_QW0018ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS PROCESSED- ANY RECORD T x:" hex_QW0018RP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS LOOKED AT - RIGHT RECOR x:" hex_QW0018LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DATA MANAGER QUALIFIED  x:" hex_QW0018DQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS RDS QUALIFIED           x:" hex_QW0018RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS INSERTED                x:" hex_QW0018IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS UPDATED                 x:" hex_QW0018UP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DELETED                 x:" hex_QW0018DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGES SCANNED                x:" hex_QW0018PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDITIONAL PAGES SCANNED TO  x:" hex_QW0018PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDITIONAL ROWS DELETED OR S x:" hex_QW0018DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS SKIPPED DUE TO INCOMPAT x:" hex_QW0018SK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unused                       x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0019 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0019:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0019,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0019 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0019 ,
    =00001 QW0019DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0019PS +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0019OB +2 , /* X - RECORD OBID                    00004 */
    =00007 QW0019TM +8 , /* X - TIME EXIT WAS CALLED (STCK)    00006 */
    =00015 QW0019RT +2 , /* C - EXITS RETURN CODE (EXPLRC1)    0000E */
    =00017 QW0019RE +4 , /* C - EXITS REASON CODE (EXPLRC2)    00010 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0019DB = c2x(QW0019DB)
  hex_QW0019PS = c2x(QW0019PS)
  hex_QW0019OB = c2x(QW0019OB)
  hex_QW0019TM = c2x(QW0019TM)
  hex_QW0019RT = c2x(QW0019RT)
  hex_QW0019RE = c2x(QW0019RE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0019",desired_dsect) > 0)) then do
    void_rc = queue_QW0019_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0019:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0019_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0019:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0019DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0019PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0019OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME EXIT WAS CALLED (STCK)  x:" hex_QW0019TM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXITS RETURN CODE (EXPLRC1)  x:" hex_QW0019RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXITS REASON CODE (EXPLRC2)  x:" hex_QW0019RE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0020 length is 00016
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0020:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0020,22)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0020 Length: 22"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0020 ,
,/* =00001 QW0020T +0 ,    G - MAX PAGE OR ROW LOCKS HELD AND  00000 */
    =00001 QW0020TP +4 , /* F - Max number of page, row, LOB a 00000 */
    =00005 QW0020TS +2 , /* H - LOCK ESCALATIONS TO SHARED     00004 */
    =00007 QW0020TX +2 , /* H - LOCK ESCALATIONS TO EXCLUSIVE  00006 */
    =00009 QW0020N +2 , /* H - NUMBER OF PAGESET SUB-RECORDS   00008 */
,/* =00011 QW0020P +0 ,    C - TABLESPACE SUB-RECORD           0000A */
    =00011 QW0020PD +2 , /* C - DATA BASE ID                   0000A */
    =00013 QW0020PP +2 , /* C - PAGESET ID (0BID)              0000C */
    =00015 QW0020PL +4 , /* X - Max number of either page, row 0000E */
,/* =00019 QW0020PC +0 ,    X - FOR SEGMENTED TABLESPACE - TOT 00012 */
    =00019 QW0020PS +1 , /* X - FOR UNSEGMENTED TABLESPACE EXC 00012 */
  ,     /* QW0020S1 EQU x'00000001' *  RESERVED                      */
  ,     /* QW0020S2 EQU x'00000002' *  INTENTED    SHARE             */
  ,     /* QW0020S3 EQU x'00000003' *  INTENTED EXCLUSIVE            */
  ,     /* QW0020S4 EQU x'00000004' *  SHARED                        */
  ,     /* QW0020S5 EQU x'00000005' *  UPDATE                        */
  ,     /* QW0020S6 EQU x'00000006' *  SHARED INTENT EXCLUSIVE       */
  ,     /* QW0020S7 EQU x'00000007' *  RESERVED                      */
  ,     /* QW0020S8 EQU x'00000008' *  EXCLUSIVE                     */
    =00020 QW0020PE +1 , /* X - FOR UNSEGMENTED TABLESPACE EXC 00013 */
    =00021 QW0020PF +1 , /* X - TABLESPACE TYPE                00014 */
  ,     /* QW0020F1 EQU x'00000001' *  SIMPLE TABLE SPACE            */
  ,     /* QW0020F2 EQU x'00000002' *  SEGMENTED TABLE SPACE         */
  ,     /* QW0020F3 EQU x'00000003' *  PARTITIONED TABLE SPACE       */
  ,     /* QW0020F4 EQU x'00000004' *  PARTITIONED TABLE SPACE USING */
  ,     /* QW0020F5 EQU x'00000005' *  LOB table space               */
  ,     /* QW0020F6 EQU x'00000006' *  XML table space               */
    =00022 QW0020PR +1 , /* X - TYPE OF LOWER LEVEL LOCK USED, 00015 */
  ,     /* QW0020R0 EQU x'00000000' * NONE                           */
  ,     /* QW0020R1 EQU x'00000001' * PAGE LOCK                      */
  ,     /* QW0020R2 EQU x'00000002' * ROW LOCK                       */
  ,     /* QW0020R3 EQU x'00000003' * LOB lock                       */
  ,     /* QW0020R4 EQU x'00000004' * XML lock                       */
    .           /* End of DSECT */
  /* next byte at 23 */
  hex_QW0020TP = c2x(QW0020TP)
  hex_QW0020TS = c2x(QW0020TS)
  hex_QW0020TX = c2x(QW0020TX)
  hex_QW0020N = c2x(QW0020N)
  hex_QW0020PD = c2x(QW0020PD)
  hex_QW0020PP = c2x(QW0020PP)
  hex_QW0020PL = c2x(QW0020PL)
  hex_QW0020PS = c2x(QW0020PS)
  hex_QW0020PE = c2x(QW0020PE)
  hex_QW0020PF = c2x(QW0020PF)
  hex_QW0020PR = c2x(QW0020PR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0020",desired_dsect) > 0)) then do
    void_rc = queue_QW0020_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0020:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0020_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0020:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max number of page, row, LOB x:" hex_QW0020TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK ESCALATIONS TO SHARED   x:" hex_QW0020TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK ESCALATIONS TO EXCLUSIV x:" hex_QW0020TX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PAGESET SUB-RECORD x:" hex_QW0020N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA BASE ID                 x:" hex_QW0020PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET ID (0BID)            x:" hex_QW0020PP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max number of either page, r x:" hex_QW0020PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FOR UNSEGMENTED TABLESPACE E x:" hex_QW0020PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FOR UNSEGMENTED TABLESPACE E x:" hex_QW0020PE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLESPACE TYPE              x:" hex_QW0020PF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF LOWER LEVEL LOCK USE x:" hex_QW0020PR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0021 length is 00068
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0021:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0021,104)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0021 Length: 104"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0021 ,
    =00001 QW0021RC +4 , /* F - * RETURN CODE FROM IRLM        00000 */
    =00005 QW0021TK +8 , /* C - * DB2 TOKEN - IDENTIFIES SUBSY 00004 */
    =00013 QW0021U +8 , /* C - (S)*                            0000C */
    =00021 QW0021O +8 , /* C - (S)*                            00014 */
    =00029 QW0021RT +4 , /* C - * LOCK REQUEST TOKEN           0001C */
    =00033 QW0021LH +4 , /* X - *  LOCKED RESOURCE NAME HASH V 00020 */
,/* =00037 QW0021LK +0 ,    C - *  DB2 LOCK NAME COMPOSED OF:  00024 */
    =00037 QW0021KL +1 , /* G - *   ()LENGTH OF THE LOCK NAME  00024 */
    =00038 RSVD0001 +2 , /* C - *   ()RESERVED                 00025 */
    =00040 QW0021KT +1 , /* X - *   ()FLAGS FOR THE LOCKED RES 00027 */
  ,     /* QW0021L0 EQU x'00000000' *         DATA PAGE LOCKING      */
  ,     /* QW0021L1 EQU x'00000001' *         DATA BASE LOCKING      */
  ,     /* QW0021L2 EQU x'00000002' *         PAGESET LOCKING        */
  ,     /* QW0021L3 EQU x'00000003' *         PARTITIONED TABLE SPAC */
  ,     /* QW0021L4 EQU x'00000004' *         SKELETON CURSOR TABLE  */
  ,     /* QW0021L5 EQU x'00000005' *         INDEX PAGE LOCKING     */
  ,     /* QW0021L6 EQU x'00000006' *         PARTITION LOCKING      */
  ,     /* QW0021L7 EQU x'00000007' *         PAGESET OR DATA SET OP */
  ,     /* QW0021L8 EQU x'00000008' (S)*                             */
  ,     /* QW0021L9 EQU x'00000009' (S)*                             */
  ,     /* QW0021LA EQU x'0000000A' *         START/STOP LOCK ON DBA */
  ,     /* QW0021LB EQU x'0000000B' (S)*                             */
  ,     /* QW0021LC EQU x'0000000C' (S)*                             */
  ,     /* QW0021LD EQU x'0000000D' *         SYSLGRNG RECORDING LOC */
  ,     /* QW0021LE EQU x'0000000E' *         UTILITY SERIALIZATION  */
  ,     /* QW0021LF EQU x'0000000F' *         MASS DELETE LOCK       */
  ,     /* QW0021LG EQU x'00000010' *         TABLE LOCKING          */
  ,     /* QW0021LI EQU x'00000011' *         HASH ANCHOR LOCK       */
  ,     /* QW0021LJ EQU x'00000012' *         SKELETON PACKAGE TABLE */
  ,     /* QW0021LL EQU x'00000013' *         COLLECTION LOCK        */
  ,     /* QW0021LN EQU x'00000014' *         CS-READ DRAIN LOCK     */
  ,     /* QW0021LW EQU x'00000015' *         RR-READ DRAIN LOCK     */
  ,     /* QW0021LQ EQU x'00000016' *         WRITE DRAIN LOCK       */
  ,     /* QW0021LM EQU x'00000017' *         AUTOBIND/REMOTE BIND L */
  ,     /* QW0021MR EQU x'00000018' *         ROW LOCK               */
  ,     /* QW0021MI EQU x'00000019' *         INDEX END-OF-FILE LOCK */
  ,     /* QW0021LR EQU x'0000001A' *         ALTER BUFFERPOOL LOCK  */
  ,     /* QW0021LS EQU x'0000001B' *         GROUP BUFFERPOOL START */
  ,     /* QW0021LT EQU x'0000001C' *         INDEX MANAGER TREE P-L */
  ,     /* QW0021LU EQU x'0000001D' *         PAGESET/PARTITION P-LO */
  ,     /* QW0021LV EQU x'0000001E' *         PAGE P-LOCK            */
  ,     /* QW0021LX EQU x'0000001F' *         DDF CDB P-lock         */
  ,     /* QW0021LY EQU x'00000020' *         Group Buffer Pool leve */
  ,     /* QW0021LZ EQU x'00000021' *         Pageset or partition l */
  ,     /* QW0021M0 EQU x'00000022' *         RLF P-lock             */
  ,     /* QW0021M1 EQU x'00000023' *         DBD P-lock             */
  ,     /* QW0021M2 EQU x'00000024' *         CATMAINT convert direc */
  ,     /* QW0021M3 EQU x'00000025' *         CATMAINT convert catal */
  ,     /* QW0021M4 EQU x'00000026' *         CATMAINT migration     */
  ,     /* QW0021M5 EQU x'00000027' *         Database exception LPL */
  ,     /* QW0021M6 EQU x'00000028' *         Utility UID lock       */
  ,     /* QW0021M7 EQU x'00000029' *         Utility exclusive exec */
  ,     /* QW0021M8 EQU x'0000002A' *         SCA access for restart */
  ,     /* QW0021M9 EQU x'0000002B' *         Database exception upd */
  ,     /* QW0021MA EQU x'0000002C' *         REPAIR DBD TEST/DIAGNO */
  ,     /* QW0021MB EQU x'0000002D' *         Database command seria */
  ,     /* QW0021ML EQU x'00000030' *         LOB lock               */
  ,     /* QW0021MC EQU x'00000035' *         XML lock               */
  ,     /* QW0021MM EQU x'00000032' *         LPL recovery lock      */
  ,     /* QW0021MN EQU x'00000033' *         Hdr page hash bucket   */
  ,     /* QW0021DL EQU x'00000039' *         DBD Load lock          */
  ,     /* QW0021MX EQU x'0000002F' (S)*                             */
  ,     /* QW002100 EQU x'000000FF' (S)*                             */
,/* =00041 QW0021RN +0 ,    C - * LOCKED RESOURCE NAME (FOR P- 00028 */
    =00041 QW0021KD +2 , /* C - *  () DATABASE ID  *SEE 5. BEL 00028 */
,/* =00043 QW0021KB +0 ,    C - *  () TABLE RECORD OBID *SEE 5 0002A */
    =00043 QW0021KP +2 , /* C - *  () PAGESET OBID OR TABLE RE 0002A */
,/* =00045 QW0021KR +0 ,    C - *  ID of small resource when Q 0002C */
    =00045 QW0021K1 +3 , /* C - *    1. For pageset or data ba 0002C */
    =00048 QW0021K2 +1 , /* X - *    QW0021K1 and QW0021K2 are 0002F */
    =00049 RSVD0002 +1 , /* X - *    2. For partition locks, Q 00030 */
  ,
  ,/*00049 __no__name__ ORG - QW0021KR - x'0000002C' *         00031 */
,/* =00045 QW0021KY +0 ,    C - *  ID of small resource when Q 0002C */
    =00045 QW0021K4 +4 , /* C - *  page number                 0002C */
    =00049 QW0021K5 +1 , /* X - *  record id within page       00030 */
  ,
  ,/*00049 __no__name__ ORG - QW0021KR - x'0000002C'           00031 */
,/* =00045 QW0021KZ +0 ,    C - * ID of sm res when QW0021KT=X 0002C */
    =00045 QW0021K8 +2 , /* X - * partition number             0002C */
    =00047 QW0021K9 +1 , /* X - * hash bucket number           0002E */
    =00048 RSVD0003 +1 , /* X - * unused - 0                   0002F */
  ,
  ,/*00048 __no__name__ ORG - QW0021KR - x'0000002C'           00030 */
,/* =00045 QW0021KX +0 ,    C - * ID of resource for LOB locks 0002C */
    =00045 QW0021K6 +17 , /* C - * Row ID                      0002C */
    =00062 QW0021K7 +2 , /* C - * Version number               0003D */
  ,
  ,/*00063 __no__name__ ORG - QW0021KR - x'0000002C'           0003F */
    =00045 QW0021KC +9 , /* C - * Docid for XML locks          0002C */
    =00054 RSVD0004 +15 , /* C - * Rest of space for 28 byte r 00035 */
    =00069 QW0021FC +1 , /* C - * IRLM FUNCTION CODE           00044 */
  ,     /* QW0021LO EQU x'00000002' *           LOCK FUNCTION        */
  ,     /* QW0021UN EQU x'00000003' *           UNLOCK FUNCTION      */
  ,     /* QW0021CH EQU x'00000004' *           CHANGE FUNCTION      */
    =00070 QW0021ST +1 , /* X - * LOCK STATE                   00045 */
  ,     /* QW0021S0 EQU x'00000000' (S)*                             */
  ,     /* QW0021S1 EQU x'00000001' *  RESERVED                      */
  ,     /* QW0021S2 EQU x'00000002' *  INTENTED    SHARE             */
  ,     /* QW0021S3 EQU x'00000003' *  INTENTED EXCLUSIVE            */
  ,     /* QW0021S4 EQU x'00000004' *  SHARED                        */
  ,     /* QW0021S5 EQU x'00000005' *  UPDATE                        */
  ,     /* QW0021S6 EQU x'00000006' *  SHARED INTENT EXCLUSIVE       */
  ,     /* QW0021S7 EQU x'00000007' *  NON-SHARED UPDATE             */
  ,     /* QW0021S8 EQU x'00000008' *  EXCLUSIVE                     */
    =00071 QW0021DR +1 , /* X - * LOCK DURATION                00046 */
  ,     /* QW002120 EQU x'00000020' *  MANUAL                        */
  ,     /* QW002121 EQU x'00000021' *  MANUAL+1                      */
  ,     /* QW002140 EQU x'00000040' *  COMMIT                        */
  ,     /* QW002141 EQU x'00000041' *  COMMIT+1                      */
  ,     /* QW002160 EQU x'00000060' *  ALLOCATION                    */
  ,     /* QW002180 EQU x'00000080' *  PLAN                          */
  ,     /* QW002181 EQU x'00000081' *  UTIL                          */
  ,     /* QW0021FE EQU x'000000FE' *  INTEREST DURATION             */
  ,     /* QW0021FF EQU x'000000FF' *  DURATION TO FREE ALL LOCKS    */
    =00072 QW0021CL +1 , /* C - * (S)                          00047 */
    =00073 QW0021FL +1 , /* X - * Flags                        00048 */
  ,     /* QW0021CD EQU x'00000080' (S)*                             */
  ,     /* QW0021AQ EQU x'00000040' (S)*                             */
  ,     /* QW0021US EQU x'00000020' (S)*                             */
  ,     /* QW0021SY EQU x'00000010' (S)*                             */
  ,     /* QW0021PR EQU x'00000008' (S)*                             */
  ,     /* QW0021RS EQU x'00000004' (S)*                             */
  ,     /* QW0021MD EQU x'00000002' * ON = MODIFY LOCK               */
  ,     /* QW0021FO EQU x'00000001' * ON = Force request for data sh */
    =00074 QW0021F2 +1 , /* X - (S)*                           00049 */
  ,     /* QW0021J3 EQU x'00000020' (S)*                             */
  ,     /* QW0021J4 EQU x'00000010' (S)*                             */
  ,     /* QW0021J5 EQU x'00000008' (S)*                             */
  ,     /* QW0021J6 EQU x'00000004' (S)*                             */
  ,     /* QW0021J7 EQU x'00000002' (S)*                             */
    =00075 QW0021F3 +1 , /* X - * Flags                        0004A */
  ,     /* QW0021Y1 EQU x'00000080' *  1 = REQUEST WAS SENT TO SLM   */
  ,     /* QW0021Y2 EQU x'00000040' *  1 = ASYNCHRONOUS SLM REQUEST  */
    =00076 QW0021PF +1 , /* X - * P-LOCK FLAG BYTE             0004B */
  ,     /* QW0021Z1 EQU x'00000080' *  1 = P-LOCK REQUEST (SEE THE Q */
  ,     /* QW0021Z2 EQU x'00000040' (S)*                             */
  ,     /* QW0021Z3 EQU x'00000020' (S)*                             */
  ,     /* QW0021Z4 EQU x'00000010' (S)*                             */
,/* =00077 QW0021FB +0 ,    C - * IRLM FEEDBACK AREA           0004C */
    =00077 QW0021SC +4 , /* X - * RETURN SUBCODES              0004C */
    =00081 QW0021FT +4 , /* C - * RETURNED TOKEN - FROM IRLM O 00050 */
    =00085 QW0021PT +4 , /* C - * Parent lock token for explic 00054 */
    =00089 QW0021GF +1 , /* X - * GLOBAL LOCK FLAG BYTE        00058 */
  ,     /* QW0021G1 EQU x'00000080' *  1 = GLOBAL LOCK               */
    =00090 QW0021CS +1 , /* X - * CACHED STATE OF THE P-LOCK   00059 */
    =00091 QW0021IR +2 , /* H - (S)*                           0005A */
    =00093 QW0021SN +8 , /* C - * DB2 Member name of           0005C */
    =00101 QW0021CT +4 , /* A - (S)*                           00064 */
  ,
  ,/*00104 __no__name__ ORG - QW0021RN - x'00000028'           00068 */
,/* =00041 QW0021PL +0 ,    C - * Locked P-lock resource name. 00028 */
,/* =00041 QW0021P8 +0 ,    C -                                00028 */
    =00041 QW0021P1 +1 , /* X -                                00028 */
    =00042 RSVD0005 +1 , /* C - *  Hex zeros                   00029 */
    =00043 QW0021P2 +2 , /* C -                                0002A */
    =00045 QW0021P3 +2 , /* C -                                0002C */
    =00047 QW0021P4 +2 , /* X -                                0002E */
    =00049 QW0021P5 +3 , /* C -                                00030 */
    =00052 RSVD0006 +17 , /* C - *  Hex zeros                  00033 */
  ,
  ,/*00068 __no__name__ ORG - QW0021RN - x'00000028' * Lock na 00044 */
,/* =00041 QW0021A +0 ,    C - * Locked resource name          00028 */
    =00041 QW0021A0 +1 , /* X - * Data Manager RMID            00028 */
    =00042 QW0021A1 +5 , /* C - * Constant  GDBET              00029 */
    =00047 QW0021A6 +2 , /* X - * Database exception hash clas 0002E */
    =00049 RSVD0007 +20 , /* C - * Hex zeros                   00030 */
    .           /* End of DSECT */
  /* next byte at 69 */
  hex_QW0021RC = c2x(QW0021RC)
  hex_QW0021TK = c2x(QW0021TK)
  hex_QW0021U = c2x(QW0021U)
  hex_QW0021O = c2x(QW0021O)
  hex_QW0021RT = c2x(QW0021RT)
  hex_QW0021LH = c2x(QW0021LH)
  hex_QW0021KL = c2x(QW0021KL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0021KT = c2x(QW0021KT)
  hex_QW0021KD = c2x(QW0021KD)
  hex_QW0021KP = c2x(QW0021KP)
  hex_QW0021K1 = c2x(QW0021K1)
  hex_QW0021K2 = c2x(QW0021K2)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0021K4 = c2x(QW0021K4)
  hex_QW0021K5 = c2x(QW0021K5)
  hex_QW0021K8 = c2x(QW0021K8)
  hex_QW0021K9 = c2x(QW0021K9)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0021K6 = c2x(QW0021K6)
  hex_QW0021K7 = c2x(QW0021K7)
  hex_QW0021KC = c2x(QW0021KC)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0021FC = c2x(QW0021FC)
  hex_QW0021ST = c2x(QW0021ST)
  hex_QW0021DR = c2x(QW0021DR)
  hex_QW0021CL = c2x(QW0021CL)
  hex_QW0021FL = c2x(QW0021FL)
  hex_QW0021F2 = c2x(QW0021F2)
  hex_QW0021F3 = c2x(QW0021F3)
  hex_QW0021PF = c2x(QW0021PF)
  hex_QW0021SC = c2x(QW0021SC)
  hex_QW0021FT = c2x(QW0021FT)
  hex_QW0021PT = c2x(QW0021PT)
  hex_QW0021GF = c2x(QW0021GF)
  hex_QW0021CS = c2x(QW0021CS)
  hex_QW0021IR = c2x(QW0021IR)
  hex_QW0021SN = c2x(QW0021SN)
  hex_QW0021CT = c2x(QW0021CT)
  hex_QW0021P1 = c2x(QW0021P1)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0021P2 = c2x(QW0021P2)
  hex_QW0021P3 = c2x(QW0021P3)
  hex_QW0021P4 = c2x(QW0021P4)
  hex_QW0021P5 = c2x(QW0021P5)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0021A0 = c2x(QW0021A0)
  hex_QW0021A1 = c2x(QW0021A1)
  hex_QW0021A6 = c2x(QW0021A6)
  hex_RSVD0007 = c2x(RSVD0007)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0021",desired_dsect) > 0)) then do
    void_rc = queue_QW0021_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0021:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0021_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0021:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * RETURN CODE FROM IRLM      x:" hex_QW0021RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * DB2 TOKEN - IDENTIFIES SUB x:" hex_QW0021TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)*                         x:" hex_QW0021U
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)*                         x:" hex_QW0021O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * LOCK REQUEST TOKEN         x:" hex_QW0021RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  LOCKED RESOURCE NAME HASH x:" hex_QW0021LH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *   ()LENGTH OF THE LOCK NAM x:" hex_QW0021KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *   ()RESERVED               x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *   ()FLAGS FOR THE LOCKED R x:" hex_QW0021KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  () DATABASE ID  *SEE 5. B x:" hex_QW0021KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  () PAGESET OBID OR TABLE  x:" hex_QW0021KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *    1. For pageset or data  x:" hex_QW0021K1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *    QW0021K1 and QW0021K2 a x:" hex_QW0021K2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *    2. For partition locks, x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  page number               x:" hex_QW0021K4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  record id within page     x:" hex_QW0021K5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * partition number           x:" hex_QW0021K8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * hash bucket number         x:" hex_QW0021K9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * unused - 0                 x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Row ID                     x:" hex_QW0021K6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Version number             x:" hex_QW0021K7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Docid for XML locks        x:" hex_QW0021KC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Rest of space for 28 byte  x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * IRLM FUNCTION CODE         x:" hex_QW0021FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * LOCK STATE                 x:" hex_QW0021ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * LOCK DURATION              x:" hex_QW0021DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * (S)                        x:" hex_QW0021CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Flags                      x:" hex_QW0021FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)*                         x:" hex_QW0021F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Flags                      x:" hex_QW0021F3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * P-LOCK FLAG BYTE           x:" hex_QW0021PF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * RETURN SUBCODES            x:" hex_QW0021SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * RETURNED TOKEN - FROM IRLM x:" hex_QW0021FT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Parent lock token for expl x:" hex_QW0021PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * GLOBAL LOCK FLAG BYTE      x:" hex_QW0021GF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * CACHED STATE OF THE P-LOCK x:" hex_QW0021CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)*                         x:" hex_QW0021IR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * DB2 Member name of         x:" hex_QW0021SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)*                         x:" hex_QW0021CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0021P1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  Hex zeros                 x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0021P2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0021P3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0021P4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0021P5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  Hex zeros                 x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Data Manager RMID          x:" hex_QW0021A0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Constant  GDBET            x:" hex_QW0021A1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Database exception hash cl x:" hex_QW0021A6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Hex zeros                  x:" hex_RSVD0007
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0022 length is 000D2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0022:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0022,210)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0022 Length: 210"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0022 ,
    =00001 QW0022QN +4 , /* F - QUERY NUMBER.                  00000 */
    =00005 QW0022QB +2 , /* H - QUERY BLOCK NUMBER.            00004 */
    =00007 QW0022PQ +2 , /* H - PARENT QUERY BLOCK NUMBER.     00006 */
    =00009 QW0022GM +8 , /* C - GROUP MEMBER.                  00008 */
    =00017 QW0022AL +8 , /* C - APPLICATION NAME.              00010 */
    =00025 QW0022PN +8 , /* C - PLAN NAME                      00018 */
    =00033 QW0022CI +18 , /* C - %U COLLECTION ID.             00020 */
    =00051 QW0022PG +8 , /* C - %U PROGRAM NAME.               00032 */
    =00059 QW0022CT +8 , /* X - CONSISTENCY TOKEN.             0003A */
    =00067 QW0022VL +2 , /* H - VERSION LENGTH.                00042 */
    =00069 QW0022VN +64 , /* C - VERSION.                      00044 */
    =00133 QW0022OS +4 , /* X - COST FOR THE SQL STATEMENT     00084 */
    =00137 QW0022LC +2 , /* H - (S)                            00088 */
    =00139 QW0022GC +2 , /* H - (S)                            0008A */
    =00141 QW0022RP +1 , /* X - Query Parallelism is disabled  0008C */
    =00142 RSVD0001 +1 , /* X - Reserved                       0008D */
    =00143 QW0022RX +2 , /* X - X 0000  =   0: Access path det 0008E */
    =00145 QW0022TS +16 , /* C - TIMESTAMP.                    00090 */
    =00161 QW0022QT +6 , /* C - Statement type                 000A0 */
    =00167 QW0022BT +10 , /* C - Bind Time                     000A6 */
    =00177 QW0022CE +4 , /* F - Processor Cost Estimate (milli 000B0 */
    =00181 QW0022AS +4 , /* F - Processor Cost Estimate (SU)   000B4 */
    =00185 QW0022CC +1 , /* C - COST CATEGORY                  000B8 */
  ,     /* QW0022AC EQU x'000000C1' CATEGORY A                       */
  ,     /* QW0022BC EQU x'000000C2' CATEGORY B                       */
  ,     /* QW0022B EQU x'00000040' NOT PROVIDED                      */
    =00186 QW0022RS +1 , /* X - COST CATEGORY B REASON CODE    000B9 */
  ,     /* QW0022RH EQU x'00000080' 1 IF THERE ARE HOST VARIABLES    */
  ,     /* QW0022RT EQU x'00000040' 1 IF TABLE CARD IS MISSING       */
  ,     /* QW0022RG EQU x'00000020' 1 IF TRIGGERS MAY BE USED        */
  ,     /* QW0022RF EQU x'00000010' 1 IF UDFS MIGHT BE INVOKED       */
  ,     /* QW0022RR EQU x'00000008' 1 IF REFERENTIAL CONSTRAINTS     */
  ,     /* QW0022RV EQU x'00000004' 1 IF HAVING CLAUSE               */
    =00187 RSVD0002 +2 , /* X - RESERVED                       000BA */
    =00189 QW0022QO +8 , /* C - %U OPTIMIZATION HINT identifie 000BC */
    =00197 QW0022FG +1 , /* X - FLAGS                          000C4 */
  ,     /* QW0022HT EQU x'00000080' 1 IF OPTIMIZATION HINTS WERE USE */
    =00198 RSVD0003 +3 , /* X - Reserved                       000C5 */
    =00201 QW0022CO +4 , /* X - (S) (FLOAT)                    000C8 */
    =00205 QW0022CI_Off +2 , /* H - Offset from QW0022 to      000CC */
    =00207 QW0022PG_Off +2 , /* H - Offset from QW0022 to      000CE */
    =00209 QW0022QO_Off +2 , /* H - Offset from QW0022 to      000D0 */
  ,
  ,/*00210 __no__name__ ORG - QW0022 - x'00000000'             000D2 */
    =00001 QW0022PL +2 , /* H - PLAN NUMBER.                   00000 */
    =00003 QW0022MN +2 , /* H - NUMBER OF INDEX ACCESS OPERATI 00002 */
,/* =00005 QW0022I +0 ,    X - IDENTIFIER                      00004 */
    =00005 QW0022DD +2 , /* X - DBID                           00004 */
    =00007 QW0022OB +2 , /* X - RECORD OBID                    00006 */
    =00009 QW0022CN +18 , /* C - %U TABLE CORRELATION NAME.    00008 */
    =00027 QW0022CR +8 , /* C - %U TABLE CREATOR.              0001A */
    =00035 QW0022TN +18 , /* C - %U TABLE NAME                 00022 */
    =00053 QW0022LM +3 , /* C - TABLESPACE LOCK MODE.          00034 */
    =00056 QW0022Z +1 , /* X - flags                           00037 */
  ,     /* QW0022CD EQU x'00000080' 1 IF COLUMN FUNCTION EVALUATED A */
  ,     /* QW0022CS EQU x'00000040' 1 IF COLUMN FUNCTION EVALUATED A */
    =00057 QW0022BP +4 , /* F - (S)                            00038 */
,/* =00061 QW0022NI +0 ,    C - MINIPLAN                       0003C */
    =00061 QW0022OD +2 , /* H - ACCESS METHOD                  0003C */
    =00063 QW0022BX +2 , /* H - (S)                            0003E */
    =00065 QW0022YP +1 , /* C - ACCESS TYPE                    00040 */
    =00066 QW0022DT +1 , /* X - PAGE RANGE FLAG.               00041 */
  ,     /* QW0022PR EQU x'00000040' 1 IF PAGE RANGE SCAN             */
    =00067 QW0022ID +2 , /* H - (S)                            00042 */
    =00069 QW0022LR +4 , /* A - (S)                            00044 */
    =00073 QW0022TR +4 , /* A - PTR TO NEXT MINIPLAN IN LIST   00048 */
    =00077 QW0022DX +2 , /* H - (S)                            0004C */
    =00079 QW0022AG +1 , /* X - FLAG FOR NEW (JOIN) TABLE      0004E */
  ,     /* QW0022BL EQU x'00000080' SUMMARY FIELD, 1 IF ANY OTHER    */
  ,     /* QW0022IN EQU x'00000040' 1 IF SORT KEY IS JOIN PREDICATE  */
  ,     /* QW0022DB EQU x'00000020' 1 IF SORT KEY IS ORDERBY LIST    */
  ,     /* QW0022PB EQU x'00000010' 1 IF SORT KEY IS GROUPBY LIST    */
  ,     /* QW0022IQ EQU x'00000008' 1 IF SORT SHOULD ELIMINATE       */
  ,     /* QW0022UN EQU x'00000004' 1 IF SORT KEY IS SET FUNCTION    */
  ,     /* QW0022EF EQU x'00000002' 1 IF PREFETCH                    */
  ,     /* QW0022ES EQU x'00000001' SORT ON RESULT FOR ORDER-BY      */
    =00080 QW0022A2 +1 , /* X - FLAG FOR THE JOIN COMPOSITE    0004F */
  ,     /* QW0022CM EQU x'00000080' SUMMARY FIELD, 1 IF ANY OTHER    */
  ,     /* QW00222J EQU x'00000040' 1 IF SORT KEY IS JOIN PREDICAT   */
  ,     /* QW00222O EQU x'00000020' 1 IF SORT KEY IS ORDERBY LIST    */
  ,     /* QW00222G EQU x'00000010' 1 IF SORT KEY IS GROUP-BY LIST   */
  ,     /* QW00222Q EQU x'00000008' 1 IF SORT SHOULD ELIMINATE DUP   */
  ,     /* QW00222N EQU x'00000004' 1 IF SORT KEY IS SET FUNCTION    */
    =00081 QW0022P1 +2 , /* H - ACCESS_DEGREE - THE DEGREE OF  00050 */
    =00083 QW0022P2 +2 , /* H - ACCESS_PGROUP_ID - THE PARALLE 00052 */
    =00085 QW0022P3 +2 , /* H - JOIN_DEGREE - THE DEGREE OF    00054 */
    =00087 QW0022P4 +2 , /* H - HALF WORD INTEGER FOR JOIN_PGR 00056 */
    =00089 QW0022P5 +4 , /* C - (S)                            00058 */
    =00093 QW0022JC +2 , /* H - NUMBER OF MERGE JOIN COLUMNS.  0005C */
    =00095 QW0022CL +2 , /* H - (S)                            0005E */
    =00097 QW0022AP +4 , /* A - (S)                            00060 */
    =00101 QW0022JP +4 , /* A - (S)                            00064 */
    =00105 QW0022JT +1 , /* C -  L  FOR LEFT OUTER JOIN.       00068 */
    =00106 QW0022WF +1 , /* C - (S)                            00069 */
    =00107 QW0022P6 +2 , /* H - SORT NEW PARALLEL GROUP ID.    0006A */
    =00109 QW0022P7 +2 , /* H - SORT COMPOSITE PARALLEL GROUP  0006C */
    =00111 QW0022PM +1 , /* C - PARALLEL MODE.                 0006E */
    =00112 QW0022XX +5 , /* C - (S)                            0006F */
    =00117 QW0022DS +4 , /* C - (S)                            00074 */
    =00121 QW0022DR +4 , /* C - (S)                            00078 */
    =00125 QW0022RD +4 , /* C - (S)                            0007C */
    =00129 QW0022PA +1 , /* C -  D  if Direct Access is possib 00080 */
    =00130 RSVD0004 +3 , /* C - UNUSED                         00081 */
    =00133 QW0022CY +4 , /* C - Table Cardinality in floating  00084 */
    =00137 QW0022NP +4 , /* F - Number of pages for table      00088 */
    =00141 RSVD0005 +1 , /* C - UNUSED (RESERVED FOR QW00PA IN 0008C */
    =00142 QW0022F2 +1 , /* C - FLAGS                          0008D */
  ,     /* QW0022SJ EQU x'00000010' YES IF THIS TABLE IS STARJOIN BY */
    =00143 QW0022TT +1 , /* C - Table type:  T , F , W , Q     0008E */
    =00144 RSVD0006 +1 , /* C - UNUSED                         0008F */
    =00145 QW0022CN_Off +2 , /* H - Offset from QW0022 to      00090 */
    =00147 QW0022CR_Off +2 , /* H - Offset from QW0022 to      00092 */
    =00149 QW0022TN_Off +2 , /* H - Offset from QW0022 to      00094 */
    =00151 RSVD0007 +10 , /* C - UNUSED                        00096 */
  ,
  ,/*00160 __no__name__ ORG - QW0022 - x'00000000'             000A0 */
    =00001 QW0022MS +2 , /* H - INDEX ACCESS SEQUENCE NUMBER   00000 */
    =00003 QW0022XM +2 , /* H - NUMBER OF MATCH COLUMNS        00002 */
    =00005 QW0022XC +8 , /* C - %U INDEX CREATOR               00004 */
    =00013 QW0022XN +18 , /* C - %U INDEX NAME                 0000C */
    =00031 QW0022MO +1 , /* X - TYPE OF INDEX ACCESS OPERATION 0001E */
  ,     /* QW0022MX EQU x'00000080' 1 IF INDEX SCAN                  */
  ,     /* QW0022MI EQU x'00000040' 1 IF INDEX INTERSECTION          */
  ,     /* QW0022MU EQU x'00000020' 1 IF INDEX UNION                 */
    =00032 QW0022XF +1 , /* X - INDEX ACCESS FLAGS             0001F */
  ,     /* QW0022XO EQU x'00000080' 1 IF INDEX ONLY                  */
  ,     /* QW0022SP EQU x'00000040' 1 IF SEQUENTIAL PREFETCH         */
  ,     /* QW0022LP EQU x'00000020' 1 IF LIST PREFETCH               */
    =00033 QW0022FF +4 , /* C - (S)                            00020 */
    =00037 QW0022XC_Off +2 , /* H - Offset from QW0022 to      00024 */
    =00039 QW0022XN_Off +2 , /* H - Offset from QW0022 to      00026 */
    =00041 RSVD0008 +8 , /* C - UNUSED                         00028 */
    =00001 QW0022CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022CI_Var +0 ,    C - %U COLLECTION ID.          00002 */
    =00001 QW0022PG_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022PG_Var +0 ,    C - %U PROGRAM NAME.           00002 */
    =00001 QW0022QO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022QO_Var +0 ,    C - %U OPTIMIZATION HINT ident 00002 */
    =00001 QW0022CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022CN_Var +0 ,    C - %U TABLE CORRELATION NAME. 00002 */
    =00001 QW0022CR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022CR_Var +0 ,    C - %U TABLE CREATOR.          00002 */
    =00001 QW0022TN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022TN_Var +0 ,    C - %U TABLE NAME              00002 */
    =00001 QW0022XC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022XC_Var +0 ,    C - %U INDEX CREATOR           00002 */
    =00001 QW0022XN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0022XN_Var +0 ,    C - %U INDEX NAME              00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0022QN = c2x(QW0022QN)
  hex_QW0022QB = c2x(QW0022QB)
  hex_QW0022PQ = c2x(QW0022PQ)
  hex_QW0022GM = c2x(QW0022GM)
  hex_QW0022AL = c2x(QW0022AL)
  hex_QW0022PN = c2x(QW0022PN)
  hex_QW0022CI = c2x(QW0022CI)
  hex_QW0022PG = c2x(QW0022PG)
  hex_QW0022CT = c2x(QW0022CT)
  hex_QW0022VL = c2x(QW0022VL)
  hex_QW0022VN = c2x(QW0022VN)
  hex_QW0022OS = c2x(QW0022OS)
  hex_QW0022LC = c2x(QW0022LC)
  hex_QW0022GC = c2x(QW0022GC)
  hex_QW0022RP = c2x(QW0022RP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0022RX = c2x(QW0022RX)
  hex_QW0022TS = c2x(QW0022TS)
  hex_QW0022QT = c2x(QW0022QT)
  hex_QW0022BT = c2x(QW0022BT)
  hex_QW0022CE = c2x(QW0022CE)
  hex_QW0022AS = c2x(QW0022AS)
  hex_QW0022CC = c2x(QW0022CC)
  hex_QW0022RS = c2x(QW0022RS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0022QO = c2x(QW0022QO)
  hex_QW0022FG = c2x(QW0022FG)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0022CO = c2x(QW0022CO)
  hex_QW0022CI_Off = c2x(QW0022CI_Off)
  hex_QW0022PG_Off = c2x(QW0022PG_Off)
  hex_QW0022QO_Off = c2x(QW0022QO_Off)
  hex_QW0022PL = c2x(QW0022PL)
  hex_QW0022MN = c2x(QW0022MN)
  hex_QW0022DD = c2x(QW0022DD)
  hex_QW0022OB = c2x(QW0022OB)
  hex_QW0022CN = c2x(QW0022CN)
  hex_QW0022CR = c2x(QW0022CR)
  hex_QW0022TN = c2x(QW0022TN)
  hex_QW0022LM = c2x(QW0022LM)
  hex_QW0022Z = c2x(QW0022Z)
  hex_QW0022BP = c2x(QW0022BP)
  hex_QW0022OD = c2x(QW0022OD)
  hex_QW0022BX = c2x(QW0022BX)
  hex_QW0022YP = c2x(QW0022YP)
  hex_QW0022DT = c2x(QW0022DT)
  hex_QW0022ID = c2x(QW0022ID)
  hex_QW0022LR = c2x(QW0022LR)
  hex_QW0022TR = c2x(QW0022TR)
  hex_QW0022DX = c2x(QW0022DX)
  hex_QW0022AG = c2x(QW0022AG)
  hex_QW0022A2 = c2x(QW0022A2)
  hex_QW0022P1 = c2x(QW0022P1)
  hex_QW0022P2 = c2x(QW0022P2)
  hex_QW0022P3 = c2x(QW0022P3)
  hex_QW0022P4 = c2x(QW0022P4)
  hex_QW0022P5 = c2x(QW0022P5)
  hex_QW0022JC = c2x(QW0022JC)
  hex_QW0022CL = c2x(QW0022CL)
  hex_QW0022AP = c2x(QW0022AP)
  hex_QW0022JP = c2x(QW0022JP)
  hex_QW0022JT = c2x(QW0022JT)
  hex_QW0022WF = c2x(QW0022WF)
  hex_QW0022P6 = c2x(QW0022P6)
  hex_QW0022P7 = c2x(QW0022P7)
  hex_QW0022PM = c2x(QW0022PM)
  hex_QW0022XX = c2x(QW0022XX)
  hex_QW0022DS = c2x(QW0022DS)
  hex_QW0022DR = c2x(QW0022DR)
  hex_QW0022RD = c2x(QW0022RD)
  hex_QW0022PA = c2x(QW0022PA)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0022CY = c2x(QW0022CY)
  hex_QW0022NP = c2x(QW0022NP)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0022F2 = c2x(QW0022F2)
  hex_QW0022TT = c2x(QW0022TT)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0022CN_Off = c2x(QW0022CN_Off)
  hex_QW0022CR_Off = c2x(QW0022CR_Off)
  hex_QW0022TN_Off = c2x(QW0022TN_Off)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_QW0022MS = c2x(QW0022MS)
  hex_QW0022XM = c2x(QW0022XM)
  hex_QW0022XC = c2x(QW0022XC)
  hex_QW0022XN = c2x(QW0022XN)
  hex_QW0022MO = c2x(QW0022MO)
  hex_QW0022XF = c2x(QW0022XF)
  hex_QW0022FF = c2x(QW0022FF)
  hex_QW0022XC_Off = c2x(QW0022XC_Off)
  hex_QW0022XN_Off = c2x(QW0022XN_Off)
  hex_RSVD0008 = c2x(RSVD0008)
  hex_QW0022CI_Len = c2x(QW0022CI_Len)
  hex_QW0022PG_Len = c2x(QW0022PG_Len)
  hex_QW0022QO_Len = c2x(QW0022QO_Len)
  hex_QW0022CN_Len = c2x(QW0022CN_Len)
  hex_QW0022CR_Len = c2x(QW0022CR_Len)
  hex_QW0022TN_Len = c2x(QW0022TN_Len)
  hex_QW0022XC_Len = c2x(QW0022XC_Len)
  hex_QW0022XN_Len = c2x(QW0022XN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0022",desired_dsect) > 0)) then do
    void_rc = queue_QW0022_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0022:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0022_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0022:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY NUMBER.                x:" hex_QW0022QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY BLOCK NUMBER.          x:" hex_QW0022QB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARENT QUERY BLOCK NUMBER.   x:" hex_QW0022PQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GROUP MEMBER.                x:" hex_QW0022GM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      APPLICATION NAME.            x:" hex_QW0022AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0022PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID.            x:" hex_QW0022CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME.             x:" hex_QW0022PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN.           x:" hex_QW0022CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION LENGTH.              x:" hex_QW0022VL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION.                     x:" hex_QW0022VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COST FOR THE SQL STATEMENT   x:" hex_QW0022OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022GC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query Parallelism is disable x:" hex_QW0022RP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      X 0000  =   0: Access path d x:" hex_QW0022RX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP.                   x:" hex_QW0022TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement type               x:" hex_QW0022QT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Bind Time                    x:" hex_QW0022BT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Processor Cost Estimate (mil x:" hex_QW0022CE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Processor Cost Estimate (SU) x:" hex_QW0022AS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COST CATEGORY                x:" hex_QW0022CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COST CATEGORY B REASON CODE  x:" hex_QW0022RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U OPTIMIZATION HINT identif x:" hex_QW0022QO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0022FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) (FLOAT)                  x:" hex_QW0022CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022PG_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022QO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NUMBER.                 x:" hex_QW0022PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF INDEX ACCESS OPERA x:" hex_QW0022MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID                         x:" hex_QW0022DD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0022OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE CORRELATION NAME.   x:" hex_QW0022CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE CREATOR.            x:" hex_QW0022CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE NAME                x:" hex_QW0022TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLESPACE LOCK MODE.        x:" hex_QW0022LM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      flags                        x:" hex_QW0022Z
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS METHOD                x:" hex_QW0022OD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022BX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS TYPE                  x:" hex_QW0022YP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE RANGE FLAG.             x:" hex_QW0022DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PTR TO NEXT MINIPLAN IN LIST x:" hex_QW0022TR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022DX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR NEW (JOIN) TABLE    x:" hex_QW0022AG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR THE JOIN COMPOSITE  x:" hex_QW0022A2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS_DEGREE - THE DEGREE O x:" hex_QW0022P1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS_PGROUP_ID - THE PARAL x:" hex_QW0022P2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      JOIN_DEGREE - THE DEGREE OF  x:" hex_QW0022P3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HALF WORD INTEGER FOR JOIN_P x:" hex_QW0022P4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022P5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MERGE JOIN COLUMNS x:" hex_QW0022JC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022AP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022JP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       L  FOR LEFT OUTER JOIN.     x:" hex_QW0022JT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022WF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT NEW PARALLEL GROUP ID.  x:" hex_QW0022P6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT COMPOSITE PARALLEL GROU x:" hex_QW0022P7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARALLEL MODE.               x:" hex_QW0022PM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022XX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022DS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       D  if Direct Access is poss x:" hex_QW0022PA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Table Cardinality in floatin x:" hex_QW0022CY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of pages for table    x:" hex_QW0022NP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED (RESERVED FOR QW00PA  x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0022F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Table type:  T , F , W , Q   x:" hex_QW0022TT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022CR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022TN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDEX ACCESS SEQUENCE NUMBER x:" hex_QW0022MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MATCH COLUMNS      x:" hex_QW0022XM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U INDEX CREATOR             x:" hex_QW0022XC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U INDEX NAME                x:" hex_QW0022XN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF INDEX ACCESS OPERATI x:" hex_QW0022MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDEX ACCESS FLAGS           x:" hex_QW0022XF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0022FF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022XC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0022 to        x:" hex_QW0022XN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0008
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022PG_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022QO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022CN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022CR_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022TN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022XC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0022XN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0023 length is 00044
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0023:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0023,68)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0023 Length: 68"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0023 ,
    =00001 QW0023ID +16 , /* C - UTILITY ID                    00000 */
    =00017 QW0023DB +2 , /* X - DBID- NORMALLY ZERO            00010 */
    =00019 QW0023PD +2 , /* X - PSID - NORMALLY ZERO           00012 */
    =00021 QW0023NM +8 , /* C - UTILITY NAME                   00014 */
    =00029 QW0023PH +8 , /* C - PHASE                          0001C */
    =00037 QW0023R1 +4 , /* F - REQUESTED SUBTASK COUNT        00024 */
    =00041 QW0023PT +4 , /* F - RESERVED                       00028 */
    =00045 QW0023NA +8 , /* C - RESERVED                       0002C */
    =00053 QW0023PN +8 , /* C - RESERVED                       00034 */
    =00061 QW0023DN +8 , /* C - UTILITY KEYWORD INVOCATION FLA 0003C */
  ,
  ,/*00068 __no__name__ ORG - QW0023DN - x'0000003C'           00044 */
    =00061 QW0023FA +1 , /* X - KEYWORD FLAGS 1                0003C */
  ,     /* QW0023A1 EQU x'00000080' COPY CONCURRENT                  */
  ,     /* QW0023A2 EQU x'00000040' COPY SHRLEVEL CHANGE             */
  ,     /* QW0023A3 EQU x'00000020' COPY PARALLEL                    */
  ,     /* QW0023A4 EQU x'00000010' COPY CHECKPAGE                   */
  ,     /* QW0023A5 EQU x'00000008' RESERVED                         */
  ,     /* QW0023A6 EQU x'00000004' RESERVED                         */
  ,     /* QW0023A7 EQU x'00000002' RECOVER REUSE                    */
  ,     /* QW0023A8 EQU x'00000001' RECOVER PARALLEL                 */
    =00062 QW0023FB +1 , /* X - KEYWORD FLAGS 2                0003D */
  ,     /* QW0023B1 EQU x'00000080' LOAD KEEPDICTIONARY              */
  ,     /* QW0023B2 EQU x'00000040' LOAD REUSE                       */
  ,     /* QW0023B3 EQU x'00000020' LOAD LOG NO                      */
  ,     /* QW0023B4 EQU x'00000010' LOAD SORTKEYS                    */
  ,     /* QW0023B5 EQU x'00000008' LOAD SHRLEVEL CHANGE             */
  ,     /* QW0023B6 EQU x'00000004' LOAD COPYDDN                     */
  ,     /* QW0023B7 EQU x'00000002' LOAD STATISTICS                  */
  ,     /* QW0023B8 EQU x'00000001' LOAD PART INDDN                  */
    =00063 QW0023FC +1 , /* X - KEYWORD FLAGS 3                0003E */
  ,     /* QW0023C1 EQU x'00000080' RESERVED                         */
  ,     /* QW0023C2 EQU x'00000040' RESERVED                         */
  ,     /* QW0023C3 EQU x'00000020' RESERVED                         */
  ,     /* QW0023C4 EQU x'00000010' RESERVED                         */
  ,     /* QW0023C5 EQU x'00000008' RESERVED                         */
  ,     /* QW0023C6 EQU x'00000004' RESERVED                         */
  ,     /* QW0023C7 EQU x'00000002' RESERVED                         */
  ,     /* QW0023C8 EQU x'00000001' RESERVED                         */
    =00064 QW0023FD +1 , /* X - KEYWORD FLAGS 4                0003F */
  ,     /* QW0023D1 EQU x'00000080' REORG KEEPDICTIONARY             */
  ,     /* QW0023D2 EQU x'00000040' REORG REUSE                      */
  ,     /* QW0023D3 EQU x'00000020' REORG LOG NO                     */
  ,     /* QW0023D4 EQU x'00000010' REORG SORTKEYS                   */
  ,     /* QW0023D5 EQU x'00000008' REORG SORTDATA                   */
  ,     /* QW0023D6 EQU x'00000004' REORG NOSYSREC                   */
  ,     /* QW0023D7 EQU x'00000002' REORG SHRLEVEL CHANGE            */
  ,     /* QW0023D8 EQU x'00000001' REORG SHRLEVEL REFERENCE         */
    =00065 QW0023FE +1 , /* X - KEYWORD FLAGS 5                00040 */
  ,     /* QW0023E1 EQU x'00000080' REORG COPYDDN                    */
  ,     /* QW0023E2 EQU x'00000040' REORG STATISTICS                 */
  ,     /* QW0023E3 EQU x'00000020' REORG FASTSWITCH                 */
  ,     /* QW0023E4 EQU x'00000010' RESERVED                         */
  ,     /* QW0023E5 EQU x'00000008' RESERVED                         */
  ,     /* QW0023E6 EQU x'00000004' RESERVED                         */
  ,     /* QW0023E7 EQU x'00000002' RESERVED                         */
  ,     /* QW0023E8 EQU x'00000001' RESERVED                         */
    =00066 QW0023FF +1 , /* X - KEYWORD FLAGS 6                00041 */
  ,     /* QW0023F1 EQU x'00000080' REBUILD REUSE                    */
  ,     /* QW0023F2 EQU x'00000040' REBUILD SORTKEYS                 */
  ,     /* QW0023F3 EQU x'00000020' REBUILD STATISTICS               */
  ,     /* QW0023F4 EQU x'00000010' REBUILD WORKDDN                  */
  ,     /* QW0023F5 EQU x'00000008' RESERVED                         */
  ,     /* QW0023F6 EQU x'00000004' RESERVED                         */
  ,     /* QW0023F7 EQU x'00000002' RESERVED                         */
  ,     /* QW0023F8 EQU x'00000001' RESERVED                         */
    =00067 QW0023FG +1 , /* X - KEYWORD FLAGS 7                00042 */
  ,     /* QW0023G1 EQU x'00000080' RUNSTATS SAMPLE                  */
  ,     /* QW0023G2 EQU x'00000040' RUNSTATS SHRLEVEL CHANGE         */
  ,     /* QW0023G3 EQU x'00000020' RESERVED                         */
  ,     /* QW0023G4 EQU x'00000010' RESERVED                         */
  ,     /* QW0023G5 EQU x'00000008' RESERVED                         */
  ,     /* QW0023G6 EQU x'00000004' RESERVED                         */
  ,     /* QW0023G7 EQU x'00000002' RESERVED                         */
  ,     /* QW0023G8 EQU x'00000001' RESERVED                         */
    =00068 QW0023FH +1 , /* X - KEYWORD FLAGS 8                00043 */
  ,     /* QW0023H1 EQU x'00000080' UNLOAD SHRLEVEL REFERENCE        */
  ,     /* QW0023H2 EQU x'00000040' UNLOAD SHRLEVEL CHANGE ISOLATION */
  ,     /* QW0023H3 EQU x'00000020' UNLOAD SHRLEVEL CHANGE ISOLATION */
  ,     /* QW0023H4 EQU x'00000010' RESERVED                         */
  ,     /* QW0023H5 EQU x'00000008' RESERVED                         */
  ,     /* QW0023H6 EQU x'00000004' RESERVED                         */
  ,     /* QW0023H7 EQU x'00000002' RESERVED                         */
  ,     /* QW0023H8 EQU x'00000001' RESERVED                         */
    .           /* End of DSECT */
  /* next byte at 69 */
  hex_QW0023ID = c2x(QW0023ID)
  hex_QW0023DB = c2x(QW0023DB)
  hex_QW0023PD = c2x(QW0023PD)
  hex_QW0023NM = c2x(QW0023NM)
  hex_QW0023PH = c2x(QW0023PH)
  hex_QW0023R1 = c2x(QW0023R1)
  hex_QW0023PT = c2x(QW0023PT)
  hex_QW0023NA = c2x(QW0023NA)
  hex_QW0023PN = c2x(QW0023PN)
  hex_QW0023DN = c2x(QW0023DN)
  hex_QW0023FA = c2x(QW0023FA)
  hex_QW0023FB = c2x(QW0023FB)
  hex_QW0023FC = c2x(QW0023FC)
  hex_QW0023FD = c2x(QW0023FD)
  hex_QW0023FE = c2x(QW0023FE)
  hex_QW0023FF = c2x(QW0023FF)
  hex_QW0023FG = c2x(QW0023FG)
  hex_QW0023FH = c2x(QW0023FH)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0023",desired_dsect) > 0)) then do
    void_rc = queue_QW0023_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0023:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0023_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0023:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY ID                   x:" hex_QW0023ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID- NORMALLY ZERO          x:" hex_QW0023DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PSID - NORMALLY ZERO         x:" hex_QW0023PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY NAME                 x:" hex_QW0023NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PHASE                        x:" hex_QW0023PH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTED SUBTASK COUNT      x:" hex_QW0023R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0023PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0023NA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0023PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY KEYWORD INVOCATION F x:" hex_QW0023DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 1              x:" hex_QW0023FA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 2              x:" hex_QW0023FB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 3              x:" hex_QW0023FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 4              x:" hex_QW0023FD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 5              x:" hex_QW0023FE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 6              x:" hex_QW0023FF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 7              x:" hex_QW0023FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEYWORD FLAGS 8              x:" hex_QW0023FH
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0024 length is 00044
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0024:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0024,68)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0024 Length: 68"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0024 ,
    =00001 QW0024ID +16 , /* C - UTILITY ID                    00000 */
    =00017 QW0024DB +2 , /* X - DBID - MAY BE ZERO             00010 */
    =00019 QW0024PD +2 , /* X - PSID - MAY BE ZERO             00012 */
    =00021 QW0024NM +8 , /* C - UTILITY NAME                   00014 */
    =00029 QW0024PH +8 , /* C - PHASE                          0001C */
    =00037 QW0024R1 +4 , /* F - CURRENT SUBTASK COUNT          00024 */
    =00041 QW0024PT +4 , /* F - PARTITION OR DATA SET NUMBER   00028 */
    =00045 QW0024NA +8 , /* C - DATA BASE NAME                 0002C */
    =00053 QW0024PN +8 , /* C - TABLE SPACE/INDEX NAME         00034 */
    =00061 QW0024DN +8 , /* C - NUMBER OF ITEMS  PROCESSED FOR 0003C */
    .           /* End of DSECT */
  /* next byte at 69 */
  hex_QW0024ID = c2x(QW0024ID)
  hex_QW0024DB = c2x(QW0024DB)
  hex_QW0024PD = c2x(QW0024PD)
  hex_QW0024NM = c2x(QW0024NM)
  hex_QW0024PH = c2x(QW0024PH)
  hex_QW0024R1 = c2x(QW0024R1)
  hex_QW0024PT = c2x(QW0024PT)
  hex_QW0024NA = c2x(QW0024NA)
  hex_QW0024PN = c2x(QW0024PN)
  hex_QW0024DN = c2x(QW0024DN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0024",desired_dsect) > 0)) then do
    void_rc = queue_QW0024_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0024:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0024_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0024:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY ID                   x:" hex_QW0024ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID - MAY BE ZERO           x:" hex_QW0024DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PSID - MAY BE ZERO           x:" hex_QW0024PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY NAME                 x:" hex_QW0024NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PHASE                        x:" hex_QW0024PH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT SUBTASK COUNT        x:" hex_QW0024R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARTITION OR DATA SET NUMBER x:" hex_QW0024PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA BASE NAME               x:" hex_QW0024NA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLE SPACE/INDEX NAME       x:" hex_QW0024PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ITEMS  PROCESSED F x:" hex_QW0024DN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0025 length is 0008C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0025:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0025,140)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0025 Length: 140"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0025 ,
    =00001 QW0025ID +16 , /* C - UTILITY ID                    00000 */
    =00017 QW0025DB +2 , /* X - DBID                           00010 */
    =00019 QW0025PD +2 , /* X - PSID                           00012 */
    =00021 QW0025NM +8 , /* C - UTILITY NAME                   00014 */
    =00029 QW0025PH +8 , /* C - PHASE                          0001C */
    =00037 QW0025R1 +4 , /* F - FINAL SUBTASK COUNT            00024 */
    =00041 QW0025PT +4 , /* F - RESERVED                       00028 */
    =00045 QW0025NA +8 , /* C - RESERVED                       0002C */
    =00053 QW0025PN +8 , /* C - RESERVED                       00034 */
    =00061 QW0025DN +8 , /* C - NUMBER OF ITEMS  PROCESSED FOR 0003C */
    =00069 QW0025JN +8 , /* C - UTILITY JOBNAME                00044 */
    =00077 QW0025JS +8 , /* C - UTILITY JOB STEPNAME           0004C */
    =00085 QW0025SL +1 , /* C - SHRLEVEL OF UTILITY            00054 */
  ,     /* QW0025NO EQU x'000000D5' N = SHRLEVEL NONE                */
  ,     /* QW0025RE EQU x'000000D9' R = SHRLEVEL REFERENCE           */
  ,     /* QW0025CH EQU x'000000C3' C = SHRLEVEL CHANGE              */
  ,     /* QW0025S EQU x'00000040' NOT PROVIDED                      */
    =00086 QW0025FL +1 , /* X - FLAGS                          00055 */
  ,     /* QW0025DF EQU x'00000080' DFSORT WAS INVOKED AT LEAST ONCE */
  ,     /* QW0025DS EQU x'00000040' DB2 SORT WAS INVOKED AT LEAST ON */
    =00087 RSVD0001 +2 , /* X - RESERVED                       00056 */
    =00089 QW0025DA +4 , /* F - NUMBER OF PARALLEL DATA SORTS  00058 */
    =00093 QW0025IX +4 , /* F - NUMBER OF PARALLEL INDEX SORTS 0005C */
    =00097 QW0025OS +4 , /* F - NUMBER OF OTHER SORTS          00060 */
    =00101 QW0025UE +8 , /* C - UTILITY ELAPSED TIME AT TERMIN 00064 */
    =00109 QW0025UC +8 , /* C - TOTAL UTILITY CPU TIME         0006C */
    =00117 QW0025UZ +8 , /* C - TOTAL UTILITY ZIIP TIME (IF AC 00074 */
    =00125 QW0025SC +8 , /* C - SORT CPU TIME                  0007C */
    =00133 QW0025SZ +8 , /* C - SORT ZIIP TIME (IF PROVIDED BY 00084 */
    .           /* End of DSECT */
  /* next byte at 141 */
  hex_QW0025ID = c2x(QW0025ID)
  hex_QW0025DB = c2x(QW0025DB)
  hex_QW0025PD = c2x(QW0025PD)
  hex_QW0025NM = c2x(QW0025NM)
  hex_QW0025PH = c2x(QW0025PH)
  hex_QW0025R1 = c2x(QW0025R1)
  hex_QW0025PT = c2x(QW0025PT)
  hex_QW0025NA = c2x(QW0025NA)
  hex_QW0025PN = c2x(QW0025PN)
  hex_QW0025DN = c2x(QW0025DN)
  hex_QW0025JN = c2x(QW0025JN)
  hex_QW0025JS = c2x(QW0025JS)
  hex_QW0025SL = c2x(QW0025SL)
  hex_QW0025FL = c2x(QW0025FL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0025DA = c2x(QW0025DA)
  hex_QW0025IX = c2x(QW0025IX)
  hex_QW0025OS = c2x(QW0025OS)
  hex_QW0025UE = c2x(QW0025UE)
  hex_QW0025UC = c2x(QW0025UC)
  hex_QW0025UZ = c2x(QW0025UZ)
  hex_QW0025SC = c2x(QW0025SC)
  hex_QW0025SZ = c2x(QW0025SZ)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0025",desired_dsect) > 0)) then do
    void_rc = queue_QW0025_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0025:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0025_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0025:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY ID                   x:" hex_QW0025ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID                         x:" hex_QW0025DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PSID                         x:" hex_QW0025PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY NAME                 x:" hex_QW0025NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PHASE                        x:" hex_QW0025PH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FINAL SUBTASK COUNT          x:" hex_QW0025R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0025PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0025NA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0025PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ITEMS  PROCESSED F x:" hex_QW0025DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY JOBNAME              x:" hex_QW0025JN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY JOB STEPNAME         x:" hex_QW0025JS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SHRLEVEL OF UTILITY          x:" hex_QW0025SL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0025FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PARALLEL DATA SORT x:" hex_QW0025DA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PARALLEL INDEX SOR x:" hex_QW0025IX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF OTHER SORTS        x:" hex_QW0025OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY ELAPSED TIME AT TERM x:" hex_QW0025UE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL UTILITY CPU TIME       x:" hex_QW0025UC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL UTILITY ZIIP TIME (IF  x:" hex_QW0025UZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT CPU TIME                x:" hex_QW0025SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT ZIIP TIME (IF PROVIDED  x:" hex_QW0025SZ
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0026 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0026:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0026,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0026 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0026 ,
    .           /* End of DSECT */
  /* next byte at 141 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0026",desired_dsect) > 0)) then do
    void_rc = queue_QW0026_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0026:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0026_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0026:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0027 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0027:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0027,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0027 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0027 ,
    =00001 QW0027NR +4 , /* F - NUMBER OF RECORDS IN THE NEW W 00000 */
    =00005 QW0027SP +1 , /* C - TYPE OF QW0027 RECORD:         00004 */
  ,     /* QW0027CT EQU x'00000000' MERGE PASS END - INDICATES SPARS */
  ,     /* QW0027CO EQU x'000000D6' MERGE PASS END - INDICATES       */
  ,     /* QW0027CW EQU x'00000000' INPUT PHASE OR MERGE PASS END -  */
    =00006 RSVD0001 +3 , /* C - RESERVED                       00005 */
    =00009 QW0027OZ +4 , /* F - SIZE OF IN-MEMORY WORKFILE IF  00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0027NR = c2x(QW0027NR)
  hex_QW0027SP = c2x(QW0027SP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0027OZ = c2x(QW0027OZ)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0027",desired_dsect) > 0)) then do
    void_rc = queue_QW0027_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0027:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0027_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0027:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RECORDS IN THE NEW x:" hex_QW0027NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF QW0027 RECORD:       x:" hex_QW0027SP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SIZE OF IN-MEMORY WORKFILE I x:" hex_QW0027OZ
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0028 length is 00030
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0028:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0028,48)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0028 Length: 48"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0028 ,
    =00001 QW0028NP +4 , /* F - NUMBER OF WORKFILES CREATED DU 00000 */
    =00005 QW0028WA +4 , /* F - NUMBER OF WORKFILES ASKED FOR  00004 */
    =00009 QW0028WG +4 , /* F - NUMBER OF WORKFILES ACTUALLY G 00008 */
    =00013 QW0028MP +4 , /* F - CURRENT MERGE PASS             0000C */
    =00017 QW0028TY +1 , /* C - TYPE OF QW0028 RECORD:         00010 */
  ,     /* QW0028CI EQU x'000000C9' INPUT PHASE END - CONSTANT FOR   */
  ,     /* QW0028CS EQU x'00000000' MERGE PASS START - CONSTANT FOR  */
  ,     /* QW0028CE EQU x'000000C5' MERGE PASS END - CONSTANT FOR    */
  ,     /* QW0028CZ EQU x'00000000' WORKFILE PARTITIONING START -    */
  ,     /* QW0028CW EQU x'00000000' WORKFILE PARTITIONING -          */
  ,     /* QW0028CX EQU x'00000000' WORKFILE PARTITIONING END -      */
  ,     /* QW0028CK EQU x'000000D2' LAST MERGE PASS PARTITIONING STA */
  ,     /* QW0028CM EQU x'000000D4' LAST MERGE PASS PARTITIONING -   */
  ,     /* QW0028CL EQU x'000000D3' LAST MERGE PASS PARTITIONING END */
  ,     /* QW0028CT EQU x'00000000' ONE RECORD PARTITIONING START -  */
  ,     /* QW0028CO EQU x'000000D6' ONE RECORD PARTITIONING - CONSTA */
  ,     /* QW0028CU EQU x'00000000' ONE RECORD PARTITIONING END -    */
  ,     /* QW0028CV EQU x'00000000' PRE-SORTED RECORDS PARTITIONING  */
  ,     /* QW0028CP EQU x'000000D7' PRE-SORTED RECORDS PARTITIONING  */
  ,     /* QW0028CY EQU x'00000000' PRE-SORTED RECORDS PARTITIONING  */
  ,     /* QW0028CA EQU x'000000C1' MULTIPLE DISTINCT SORT START -   */
  ,     /* QW0028CB EQU x'000000C2' MULTIPLE DISTINCT SORT END -     */
  ,     /* QW0028CC EQU x'000000C3' MULTIPLE DISTINCT GROUPBY START  */
  ,     /* QW0028CD EQU x'000000C4' MULTIPLE DISTINCT GROUPBY END -  */
    =00018 RSVD0001 +3 , /* C - RESERVED                       00011 */
    =00021 QW0028PW +4 , /* F - REFERS TO THE PARTITION (WORKF 00014 */
    =00025 QW0028PN +4 , /* F - NUMBER OF RECORDS ON THE PARTI 00018 */
    =00029 QW0028NR +4 , /* F - NUMBER OF RECORDS SORTED INTO  0001C */
    =00033 QW0028DS +4 , /* F - TOTAL NUMBER OF MULTIPLE DISTI 00020 */
    =00037 QW0028DR +4 , /* F - NUMBER OF RECORDS READ INTO GR 00024 */
    =00041 QW0028DG +4 , /* F - TOTAL NUMBER OF MULTIPLE DISTI 00028 */
    =00045 QW0028DC +4 , /* F - CURRENT MULTIPLE DISTINCT SORT 0002C */
    .           /* End of DSECT */
  /* next byte at 49 */
  hex_QW0028NP = c2x(QW0028NP)
  hex_QW0028WA = c2x(QW0028WA)
  hex_QW0028WG = c2x(QW0028WG)
  hex_QW0028MP = c2x(QW0028MP)
  hex_QW0028TY = c2x(QW0028TY)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0028PW = c2x(QW0028PW)
  hex_QW0028PN = c2x(QW0028PN)
  hex_QW0028NR = c2x(QW0028NR)
  hex_QW0028DS = c2x(QW0028DS)
  hex_QW0028DR = c2x(QW0028DR)
  hex_QW0028DG = c2x(QW0028DG)
  hex_QW0028DC = c2x(QW0028DC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0028",desired_dsect) > 0)) then do
    void_rc = queue_QW0028_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0028:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0028_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0028:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WORKFILES CREATED  x:" hex_QW0028NP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WORKFILES ASKED FO x:" hex_QW0028WA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WORKFILES ACTUALLY x:" hex_QW0028WG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT MERGE PASS           x:" hex_QW0028MP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF QW0028 RECORD:       x:" hex_QW0028TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REFERS TO THE PARTITION (WOR x:" hex_QW0028PW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RECORDS ON THE PAR x:" hex_QW0028PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RECORDS SORTED INT x:" hex_QW0028NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF MULTIPLE DIS x:" hex_QW0028DS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RECORDS READ INTO  x:" hex_QW0028DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF MULTIPLE DIS x:" hex_QW0028DG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT MULTIPLE DISTINCT SO x:" hex_QW0028DC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0029 length is 00052
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0029:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0029,82)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0029 Length: 82"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0029 ,
    =00001 QW0029ID +2 , /* C - DB=DBDID, CT=CURSOR TABLE, PT= 00000 */
    =00003 QW0029DB +2 , /* X - DBID FOR ID DB                 00002 */
    =00005 QW0029DL +4 , /* X - LENGTH OF THE  SECTION ASSOCIA 00004 */
  ,
  ,/*00008 __no__name__ ORG - QW0029DB - x'00000002' CT SECTIO 00008 */
    =00003 QW0029PL +8 , /* C - PLAN NAME FOR ID CT            00002 */
    =00011 QW0029RN +4 , /* X - RDS IDENTIFICATION NUMBER      0000A */
    =00015 QW0029SN +2 , /* X - RESERVED                       0000E */
    =00017 QW0029CL +4 , /* X - LENGTH OF THE CT SECTION IN BY 00010 */
  ,
  ,/*00020 __no__name__ ORG - QW0029DB - x'00000002' PT SECTIO 00014 */
,/* =00003 QW0029KL +0 ,    C - SKPT RECORD KEY                00002 */
    =00003 QW0029LN +16 , /* C - %U LOCATION NAME.  BLANK IF L 00002 */
    =00019 QW0029SV +2 , /* C - (S)                            00012 */
    =00021 QW0029CI +18 , /* C - %U COLLECTION ID              00014 */
    =00039 QW0029PI +18 , /* C - %U PACKAGE ID                 00026 */
    =00057 QW0029CT +8 , /* C - CONSISTENCY TOKEN              00038 */
    =00065 QW0029RS +2 , /* C - RESERVED                       00040 */
    =00067 QW0029KN +4 , /* X - RDS IDENTIFICATION NUMBER      00042 */
    =00071 QW0029GN +2 , /* X - SEQUENCE NUMBER WITHINRDS SECT 00046 */
    =00073 QW0029GL +4 , /* X - LENGTH OF THE PT SECTION IN BY 00048 */
    =00077 QW0029LN_Off +2 , /* H - Offset from QW0029 to      0004C */
    =00079 QW0029CI_Off +2 , /* H - Offset from QW0029 to      0004E */
    =00081 QW0029PI_Off +2 , /* H - Offset from QW0029 to      00050 */
    =00001 QW0029LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0029LN_Var +0 ,    C - %U LOCATION NAME.  BLANK I 00002 */
    =00001 QW0029CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0029CI_Var +0 ,    C - %U COLLECTION ID           00002 */
    =00001 QW0029PI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0029PI_Var +0 ,    C - %U PACKAGE ID              00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0029ID = c2x(QW0029ID)
  hex_QW0029DB = c2x(QW0029DB)
  hex_QW0029DL = c2x(QW0029DL)
  hex_QW0029PL = c2x(QW0029PL)
  hex_QW0029RN = c2x(QW0029RN)
  hex_QW0029SN = c2x(QW0029SN)
  hex_QW0029CL = c2x(QW0029CL)
  hex_QW0029LN = c2x(QW0029LN)
  hex_QW0029SV = c2x(QW0029SV)
  hex_QW0029CI = c2x(QW0029CI)
  hex_QW0029PI = c2x(QW0029PI)
  hex_QW0029CT = c2x(QW0029CT)
  hex_QW0029RS = c2x(QW0029RS)
  hex_QW0029KN = c2x(QW0029KN)
  hex_QW0029GN = c2x(QW0029GN)
  hex_QW0029GL = c2x(QW0029GL)
  hex_QW0029LN_Off = c2x(QW0029LN_Off)
  hex_QW0029CI_Off = c2x(QW0029CI_Off)
  hex_QW0029PI_Off = c2x(QW0029PI_Off)
  hex_QW0029LN_Len = c2x(QW0029LN_Len)
  hex_QW0029CI_Len = c2x(QW0029CI_Len)
  hex_QW0029PI_Len = c2x(QW0029PI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0029",desired_dsect) > 0)) then do
    void_rc = queue_QW0029_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0029:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0029_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0029:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB=DBDID, CT=CURSOR TABLE, P x:" hex_QW0029ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID FOR ID DB               x:" hex_QW0029DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE  SECTION ASSOC x:" hex_QW0029DL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME FOR ID CT          x:" hex_QW0029PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RDS IDENTIFICATION NUMBER    x:" hex_QW0029RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0029SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE CT SECTION IN  x:" hex_QW0029CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME.  BLANK IF  x:" hex_QW0029LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0029SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID             x:" hex_QW0029CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0029PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN            x:" hex_QW0029CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0029RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RDS IDENTIFICATION NUMBER    x:" hex_QW0029KN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SEQUENCE NUMBER WITHINRDS SE x:" hex_QW0029GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PT SECTION IN  x:" hex_QW0029GL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0029 to        x:" hex_QW0029LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0029 to        x:" hex_QW0029CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0029 to        x:" hex_QW0029PI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0029LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0029CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0029PI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0030 length is 00052
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0030:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0030,82)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0030 Length: 82"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0030 ,
    =00001 QW0030ID +2 , /* C - DB=DBDID, CT=CURSOR TABLE, PT= 00000 */
    =00003 QW0030DB +2 , /* X - DBID FOR ID DB                 00002 */
    =00005 QW0030DC +4 , /* X - NUMBER OF CALLS TO DATA MANAGE 00004 */
  ,
  ,/*00008 __no__name__ ORG - QW0030DB - x'00000002' CT SECTIO 00008 */
    =00003 QW0030PL +8 , /* C - PLAN NAME FOR ID CT            00002 */
    =00011 QW0030RN +4 , /* X - RDS IDENTIFICATION NUMBER      0000A */
    =00015 QW0030SN +2 , /* X - RESERVED                       0000E */
    =00017 QW0030CC +4 , /* X - NUMBER OF CALLS TO DATA MANAGE 00010 */
  ,
  ,/*00020 __no__name__ ORG - QW0030DB - x'00000002' PT SECTIO 00014 */
,/* =00003 QW0030KL +0 ,    C - SKPT RECORD KEY                00002 */
    =00003 QW0030LN +16 , /* C - %U LOCATION NAME.  BLANK IF L 00002 */
    =00019 QW0030SV +2 , /* C - (S)                            00012 */
    =00021 QW0030CI +18 , /* C - %U COLLECTION ID              00014 */
    =00039 QW0030PI +18 , /* C - %U PACKAGE ID                 00026 */
    =00057 QW0030CT +8 , /* C - CONSISTENCY TOKEN              00038 */
    =00065 QW0030RS +2 , /* C - RESERVED                       00040 */
    =00067 QW0030KN +4 , /* X - RDS IDENTIFICATION NUMBER      00042 */
    =00071 QW0030GN +2 , /* X - SEQUENCE NUMBER WITHIN RDS SEC 00046 */
    =00073 QW0030GC +4 , /* X - NUMBER OF CALLS TO DATA MANAGE 00048 */
    =00077 QW0030LN_Off +2 , /* H - Offset from QW0030 to      0004C */
    =00079 QW0030CI_Off +2 , /* H - Offset from QW0030 to      0004E */
    =00081 QW0030PI_Off +2 , /* H - Offset from QW0030 to      00050 */
    =00001 QW0030LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0030LN_Var +0 ,    C - %U LOCATION NAME.  BLANK I 00002 */
    =00001 QW0030CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0030CI_Var +0 ,    C - %U COLLECTION ID           00002 */
    =00001 QW0030PI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0030PI_Var +0 ,    C - %U PACKAGE ID              00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0030ID = c2x(QW0030ID)
  hex_QW0030DB = c2x(QW0030DB)
  hex_QW0030DC = c2x(QW0030DC)
  hex_QW0030PL = c2x(QW0030PL)
  hex_QW0030RN = c2x(QW0030RN)
  hex_QW0030SN = c2x(QW0030SN)
  hex_QW0030CC = c2x(QW0030CC)
  hex_QW0030LN = c2x(QW0030LN)
  hex_QW0030SV = c2x(QW0030SV)
  hex_QW0030CI = c2x(QW0030CI)
  hex_QW0030PI = c2x(QW0030PI)
  hex_QW0030CT = c2x(QW0030CT)
  hex_QW0030RS = c2x(QW0030RS)
  hex_QW0030KN = c2x(QW0030KN)
  hex_QW0030GN = c2x(QW0030GN)
  hex_QW0030GC = c2x(QW0030GC)
  hex_QW0030LN_Off = c2x(QW0030LN_Off)
  hex_QW0030CI_Off = c2x(QW0030CI_Off)
  hex_QW0030PI_Off = c2x(QW0030PI_Off)
  hex_QW0030LN_Len = c2x(QW0030LN_Len)
  hex_QW0030CI_Len = c2x(QW0030CI_Len)
  hex_QW0030PI_Len = c2x(QW0030PI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0030",desired_dsect) > 0)) then do
    void_rc = queue_QW0030_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0030:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0030_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0030:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB=DBDID, CT=CURSOR TABLE, P x:" hex_QW0030ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID FOR ID DB               x:" hex_QW0030DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CALLS TO DATA MANA x:" hex_QW0030DC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME FOR ID CT          x:" hex_QW0030PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RDS IDENTIFICATION NUMBER    x:" hex_QW0030RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0030SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CALLS TO DATA MANA x:" hex_QW0030CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME.  BLANK IF  x:" hex_QW0030LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0030SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID             x:" hex_QW0030CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0030PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN            x:" hex_QW0030CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0030RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RDS IDENTIFICATION NUMBER    x:" hex_QW0030KN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SEQUENCE NUMBER WITHIN RDS S x:" hex_QW0030GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CALLS TO DATA MANA x:" hex_QW0030GC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0030 to        x:" hex_QW0030LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0030 to        x:" hex_QW0030CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0030 to        x:" hex_QW0030PI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0030LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0030CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0030PI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0031 length is 00052
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0031:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0031,82)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0031 Length: 82"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0031 ,
    =00001 QW0031ID +2 , /* C - DB=DBDID, CT=CURSOR TABLE, PT= 00000 */
    =00003 QW0031DB +2 , /* X - DBID FOR ID DB OR ID XT        00002 */
    =00005 QW0031DL +4 , /* X - LENGTH OF THE  SECTION ASSOCIA 00004 */
  ,
  ,/*00008 __no__name__ ORG - QW0031DB - x'00000002' CT SECTIO 00008 */
    =00003 QW0031PL +8 , /* C - PLAN NAME FOR ID CT            00002 */
    =00011 QW0031RN +4 , /* X - RDS IDENTIFICATION NUMBER      0000A */
    =00015 QW0031SN +2 , /* X - RESERVED                       0000E */
    =00017 QW0031CL +4 , /* X - LENGTH OF THE CT SECTION IN BY 00010 */
  ,
  ,/*00020 __no__name__ ORG - QW0031DB - x'00000002' PT SECTIO 00014 */
,/* =00003 QW0031KL +0 ,    C - SKPT RECORD KEY                00002 */
    =00003 QW0031LN +16 , /* C - %U LOCATION NAME.  BLANK IF L 00002 */
    =00019 QW0031SV +2 , /* C - (S)                            00012 */
    =00021 QW0031CI +18 , /* C - %U COLLECTION ID              00014 */
    =00039 QW0031PI +18 , /* C - %U PACKAGE ID                 00026 */
    =00057 QW0031CT +8 , /* C - CONSISTENCY TOKEN              00038 */
    =00065 QW0031RS +2 , /* C - RESERVED                       00040 */
    =00067 QW0031KN +4 , /* X - RDS IDENTIFICATION NUMBER      00042 */
    =00071 QW0031GN +2 , /* X - SEQUENCE NUMBER WITHIN RDS SEC 00046 */
    =00073 QW0031GL +4 , /* X - LENGTH OF THE PT SECTION IN BY 00048 */
    =00077 QW0031LN_Off +2 , /* H - Offset from QW0031 to      0004C */
    =00079 QW0031CI_Off +2 , /* H - Offset from QW0031 to      0004E */
    =00081 QW0031PI_Off +2 , /* H - Offset from QW0031 to      00050 */
    =00001 QW0031LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0031LN_Var +0 ,    C - %U LOCATION NAME.  BLANK I 00002 */
    =00001 QW0031CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0031CI_Var +0 ,    C - %U COLLECTION ID           00002 */
    =00001 QW0031PI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0031PI_Var +0 ,    C - %U PACKAGE ID              00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0031ID = c2x(QW0031ID)
  hex_QW0031DB = c2x(QW0031DB)
  hex_QW0031DL = c2x(QW0031DL)
  hex_QW0031PL = c2x(QW0031PL)
  hex_QW0031RN = c2x(QW0031RN)
  hex_QW0031SN = c2x(QW0031SN)
  hex_QW0031CL = c2x(QW0031CL)
  hex_QW0031LN = c2x(QW0031LN)
  hex_QW0031SV = c2x(QW0031SV)
  hex_QW0031CI = c2x(QW0031CI)
  hex_QW0031PI = c2x(QW0031PI)
  hex_QW0031CT = c2x(QW0031CT)
  hex_QW0031RS = c2x(QW0031RS)
  hex_QW0031KN = c2x(QW0031KN)
  hex_QW0031GN = c2x(QW0031GN)
  hex_QW0031GL = c2x(QW0031GL)
  hex_QW0031LN_Off = c2x(QW0031LN_Off)
  hex_QW0031CI_Off = c2x(QW0031CI_Off)
  hex_QW0031PI_Off = c2x(QW0031PI_Off)
  hex_QW0031LN_Len = c2x(QW0031LN_Len)
  hex_QW0031CI_Len = c2x(QW0031CI_Len)
  hex_QW0031PI_Len = c2x(QW0031PI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0031",desired_dsect) > 0)) then do
    void_rc = queue_QW0031_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0031:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0031_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0031:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB=DBDID, CT=CURSOR TABLE, P x:" hex_QW0031ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID FOR ID DB OR ID XT      x:" hex_QW0031DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE  SECTION ASSOC x:" hex_QW0031DL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME FOR ID CT          x:" hex_QW0031PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RDS IDENTIFICATION NUMBER    x:" hex_QW0031RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0031SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE CT SECTION IN  x:" hex_QW0031CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME.  BLANK IF  x:" hex_QW0031LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0031SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID             x:" hex_QW0031CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0031PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN            x:" hex_QW0031CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0031RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RDS IDENTIFICATION NUMBER    x:" hex_QW0031KN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SEQUENCE NUMBER WITHIN RDS S x:" hex_QW0031GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE PT SECTION IN  x:" hex_QW0031GL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0031 to        x:" hex_QW0031LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0031 to        x:" hex_QW0031CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0031 to        x:" hex_QW0031PI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0031LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0031CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0031PI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0032 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0032:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0032,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0032 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0032 ,
    =00001 QW0032RT +4 , /* C - REQUEST TYPE                   00000 */
  ,     /* QW0032WF EQU x'E6C6D9C3' WRITE,FORCE                      */
    =00005 QW0032RB +4 , /* F - (S)                            00004 */
    =00009 QW0032FT +4 , /* C - FUNCTION TYPE                  00008 */
  ,     /* QW0032AR EQU x'C1D9C340' ARCHIVE LOG COMMAND              */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0032RT = c2x(QW0032RT)
  hex_QW0032RB = c2x(QW0032RB)
  hex_QW0032FT = c2x(QW0032FT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0032",desired_dsect) > 0)) then do
    void_rc = queue_QW0032_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0032:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0032_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0032:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUEST TYPE                 x:" hex_QW0032RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0032RB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNCTION TYPE                x:" hex_QW0032FT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0033 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0033:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0033,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0033 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0033 ,
    =00001 QW0033RT +4 , /* F - RETURN CODE - 0 SUCCESSFUL FRO 00000 */
    =00005 QW0033RS +4 , /* F - (S)                            00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0033RT = c2x(QW0033RT)
  hex_QW0033RS = c2x(QW0033RS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0033",desired_dsect) > 0)) then do
    void_rc = queue_QW0033_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0033:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0033_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0033:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL F x:" hex_QW0033RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0033RS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0034 length is 00013
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0034:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0034,19)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0034 Length: 19"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0034 ,
    =00001 QW0034DI +8 , /* C - DATA SET ID                    00000 */
    =00009 QW0034AC +4 , /* A - ACE TOKEN                      00008 */
,/* =00013 QW0034RB +0 ,    C - (S)                            0000C */
    =00013 QW0034HR +2 , /* H - (S)                            0000C */
    =00015 QW0034LR +4 , /* X - (S)                            0000E */
    =00019 QW0034TY +1 , /* G - WAIT TIME TYPE                 00012 */
  ,     /* QW0034T0 EQU x'00000000' ACTIVE LOG READ                  */
  ,     /* QW0035T1 EQU x'00000001' ACTIVE LOG PREFETCH READ         */
  ,     /* QW0034T2 EQU x'00000002' BDSD READ                        */
  ,     /* QW0035T3 EQU x'00000003' PEER-BSDS READ                   */
    .           /* End of DSECT */
  /* next byte at 20 */
  hex_QW0034DI = c2x(QW0034DI)
  hex_QW0034AC = c2x(QW0034AC)
  hex_QW0034HR = c2x(QW0034HR)
  hex_QW0034LR = c2x(QW0034LR)
  hex_QW0034TY = c2x(QW0034TY)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0034",desired_dsect) > 0)) then do
    void_rc = queue_QW0034_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0034:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0034_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0034:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET ID                  x:" hex_QW0034DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0034AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0034HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0034LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAIT TIME TYPE               x:" hex_QW0034TY
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0035 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0035:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0035,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0035 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0035 ,
    =00001 QW0035RT +4 , /* F - RETURN CODE - 0 SUCCESSFUL     00000 */
    =00005 QW0035AC +4 , /* A - ACE TOKEN                      00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0035RT = c2x(QW0035RT)
  hex_QW0035AC = c2x(QW0035AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0035",desired_dsect) > 0)) then do
    void_rc = queue_QW0035_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0035:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0035_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0035:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL   x:" hex_QW0035RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0035AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0036 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0036:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0036,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0036 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0036 ,
    =00001 QW0036EI +4 , /* C - EVENT ID TYPES FOLLOW          00000 */
  ,     /* QW0036EA EQU x'C1D3D3C3' ALLOCATION                       */
  ,     /* QW0036EC EQU x'C3D3D6E2' CLOSE                            */
  ,     /* QW0036ED EQU x'C4C5C1D3' DEALLOCATE                       */
  ,     /* QW0036EH EQU x'C8E2D4D9' HSM RECALL MUST BE COMPLETED.  R */
  ,     /* QW0036EL EQU x'C3D3D6C3' WAIT FOR CATALOG LOCATE.         */
  ,     /* QW0036EN EQU x'E4E4D5C9' WAIT FOR UNAVAILABLE UNIT (TAPE) */
  ,     /* QW0036EO EQU x'D6D7C5D5' OPEN                             */
  ,     /* QW0036EP EQU x'D7D6E2C9' WAIT FOR TAPE VOLUME POSITIONING */
  ,     /* QW0036ER EQU x'E4D9E2E3' WAIT FOR UNAVAILABLE READER SERV */
  ,     /* QW0036EU EQU x'C4E3C1E4' DATA SET UNAVAILABLE             */
  ,     /* QW0036EV EQU x'D4C4E2E5' WAIT FOR MULTI-DATASET VOLUME    */
  ,     /* QW0036EW EQU x'E6E3D6D9' WAIT FOR REPLY FROM WTOR         */
    =00005 QW0036DI +8 , /* C - DATA SET ID                    00004 */
    =00013 QW0036AC +4 , /* A - ACE TOKEN - THE ACE MAY BE CAL 0000C */
    =00017 QW0036RT +4 , /* C - REQUEST TYPE                   00010 */
  ,     /* QW0036DA EQU x'C1D3D3C4' DEMAND ALLOCATION                */
  ,     /* QW0036LA EQU x'C1D3D3D3' LOOK-AHEAD (PREMOUNT) ALLOCATION */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0036EI = c2x(QW0036EI)
  hex_QW0036DI = c2x(QW0036DI)
  hex_QW0036AC = c2x(QW0036AC)
  hex_QW0036RT = c2x(QW0036RT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0036",desired_dsect) > 0)) then do
    void_rc = queue_QW0036_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0036:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0036_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0036:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EVENT ID TYPES FOLLOW        x:" hex_QW0036EI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET ID                  x:" hex_QW0036DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN - THE ACE MAY BE C x:" hex_QW0036AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUEST TYPE                 x:" hex_QW0036RT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0037 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0037:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0037,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0037 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0037 ,
    =00001 QW0037RT +4 , /* F - RETURN CODE - 0 SUCCESSFUL     00000 */
    =00005 QW0037RC +4 , /* F - (S)                            00004 */
    =00009 QW0037AC +4 , /* A - ACE TOKEN                      00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0037RT = c2x(QW0037RT)
  hex_QW0037RC = c2x(QW0037RC)
  hex_QW0037AC = c2x(QW0037AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0037",desired_dsect) > 0)) then do
    void_rc = queue_QW0037_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0037:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0037_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0037:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL   x:" hex_QW0037RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0037RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0037AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0038 length is 00028
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0038:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0038,40)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0038 Length: 40"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0038 ,
    =00001 QW0038CN +4 , /* F - ACTIVE LOG COPY NUMBER         00000 */
    =00005 QW0038DI +8 , /* C - DATA SET ID                    00004 */
    =00013 QW0038VR +4 , /* F - (S)                            0000C */
    =00017 QW0038CC +4 , /* F - NUMBER OF CONTIGUOUS CI        00010 */
    =00021 QW0038FR +4 , /* F - (S)                            00014 */
    =00025 QW0038LR +4 , /* F - (S)                            00018 */
    =00029 QW0038LC +4 , /* F - (S)                            0001C */
    =00033 QW0038LB +4 , /* A - (S)                            00020 */
    =00037 QW0038AC +4 , /* A - ACE TOKEN                      00024 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW0038CN = c2x(QW0038CN)
  hex_QW0038DI = c2x(QW0038DI)
  hex_QW0038VR = c2x(QW0038VR)
  hex_QW0038CC = c2x(QW0038CC)
  hex_QW0038FR = c2x(QW0038FR)
  hex_QW0038LR = c2x(QW0038LR)
  hex_QW0038LC = c2x(QW0038LC)
  hex_QW0038LB = c2x(QW0038LB)
  hex_QW0038AC = c2x(QW0038AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0038",desired_dsect) > 0)) then do
    void_rc = queue_QW0038_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0038:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0038_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0038:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACTIVE LOG COPY NUMBER       x:" hex_QW0038CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET ID                  x:" hex_QW0038DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0038VR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CONTIGUOUS CI      x:" hex_QW0038CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0038FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0038LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0038LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0038LB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0038AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0039 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0039:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0039,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0039 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0039 ,
    =00001 QW0039CN +4 , /* F - ACTIVE LOG COPY NUMBER         00000 */
    =00005 QW0039DI +8 , /* C - DATA SET IDENTIFIER            00004 */
    =00013 QW0039RT +4 , /* F - RETURN CODE - 0 SUCCESSFUL     0000C */
    =00017 QW0039RC +4 , /* F - (S)                            00010 */
    =00021 QW0039AC +4 , /* A - ACE TOKEN                      00014 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0039CN = c2x(QW0039CN)
  hex_QW0039DI = c2x(QW0039DI)
  hex_QW0039RT = c2x(QW0039RT)
  hex_QW0039RC = c2x(QW0039RC)
  hex_QW0039AC = c2x(QW0039AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0039",desired_dsect) > 0)) then do
    void_rc = queue_QW0039_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0039:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0039_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0039:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACTIVE LOG COPY NUMBER       x:" hex_QW0039CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET IDENTIFIER          x:" hex_QW0039DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL   x:" hex_QW0039RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0039RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0039AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0040 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0040:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0040,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0040 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0040 ,
    =00001 QW0040DI +8 , /* C - DATA SET ID - COPY NUMBER NOT  00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0040DI = c2x(QW0040DI)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0040",desired_dsect) > 0)) then do
    void_rc = queue_QW0040_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0040:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0040_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0040:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET ID - COPY NUMBER NO x:" hex_QW0040DI
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0041 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0041:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0041,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0041 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0041 ,
    =00001 QW0041RT +4 , /* F - RETURN CODE - 0 SUCCESSFUL     00000 */
    =00005 QW0041BW +4 , /* F - NUMBER OF BLOCKS WRITTEN       00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0041RT = c2x(QW0041RT)
  hex_QW0041BW = c2x(QW0041BW)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0041",desired_dsect) > 0)) then do
    void_rc = queue_QW0041_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0041:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0041_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0041:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL   x:" hex_QW0041RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BLOCKS WRITTEN     x:" hex_QW0041BW
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0042 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0042:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0042,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0042 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0042 ,
,/* =00001 QW0042RE +0 ,    C - (S)                            00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0042",desired_dsect) > 0)) then do
    void_rc = queue_QW0042_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0042:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0042_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0042:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0043 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0043:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0043,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0043 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0043 ,
    =00001 QW0043BC +8 , /* X - BEGINNING CHECKPOINT RBA - RIG 00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0043BC = c2x(QW0043BC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0043",desired_dsect) > 0)) then do
    void_rc = queue_QW0043_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0043:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0043_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0043:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BEGINNING CHECKPOINT RBA - R x:" hex_QW0043BC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0044 length is 00036
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0044:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0044,54)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0044 Length: 54"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0044 ,
    =00001 QW0044RT +4 , /* C - * LOCK REQUEST TOKEN           00000 */
    =00005 QW0044LH +4 , /* X - *  LOCKED RESOURCE NAME HASH V 00004 */
,/* =00009 QW0044LK +0 ,    C - *  DB2 LOCK NAME COMPOSED OF:  00008 */
    =00009 QW0044KL +1 , /* G - *   ()LENGTH OF THE LOCK NAME  00008 */
    =00010 RSVD0001 +2 , /* C - *   ()RESERVED                 00009 */
    =00012 QW0044KT +1 , /* X - *   ()FLAGS FOR THE LOCKED RES 0000B */
  ,     /* QW0044L0 EQU x'00000000' *         DATA PAGE LOCKING      */
  ,     /* QW0044L1 EQU x'00000001' *         DATA BASE LOCKING      */
  ,     /* QW0044L2 EQU x'00000002' *         PAGESET LOCKING        */
  ,     /* QW0044L3 EQU x'00000003' *         PARTITIONED TABLE SPAC */
  ,     /* QW0044L4 EQU x'00000004' *         SKELETON CURSOR TABLE  */
  ,     /* QW0044L5 EQU x'00000005' *         INDEX PAGE LOCKING     */
  ,     /* QW0044L6 EQU x'00000006' *         PARTITION LOCKING      */
  ,     /* QW0044L7 EQU x'00000007' *         PAGESET OR DATA SET OP */
  ,     /* QW0044L8 EQU x'00000008' (S)*                             */
  ,     /* QW0044L9 EQU x'00000009' (S)*                             */
  ,     /* QW0044LA EQU x'0000000A' *         START/STOP LOCK ON DBA */
  ,     /* QW0044LB EQU x'0000000B' (S)*                             */
  ,     /* QW0044LC EQU x'0000000C' (S)*                             */
  ,     /* QW0044LD EQU x'0000000D' *         SYSLGRNG RECORDING LOC */
  ,     /* QW0044LE EQU x'0000000E' *         UTILITY SERIALIZATION  */
  ,     /* QW0044LF EQU x'0000000F' *         MASS DELETE LOCK       */
  ,     /* QW0044LG EQU x'00000010' *         TABLE LOCKING          */
  ,     /* QW0044LI EQU x'00000011' *         HASH ANCHOR LOCK       */
  ,     /* QW0044LJ EQU x'00000012' *         SKELETON PACKAGE TABLE */
  ,     /* QW0044LL EQU x'00000013' *         COLLECTION LOCK        */
  ,     /* QW0044LM EQU x'00000017' *         AUTOBIND/REMOTE BIND L */
  ,     /* QW0044MR EQU x'00000018' *         ROW LOCK               */
  ,     /* QW0044MI EQU x'00000019' *         INDEX END-OF-FILE      */
  ,     /* QW0044LR EQU x'0000001A' *         ALTER BUFFERPOOL LOCK  */
  ,     /* QW0044LS EQU x'0000001B' *         GROUP BUFFERPOOL START */
  ,     /* QW0044LT EQU x'0000001C' *         INDEX MANAGER TREE P-L */
  ,     /* QW0044LU EQU x'0000001D' *         PAGESET/PARTITION P-LO */
  ,     /* QW0044LV EQU x'0000001E' *         PAGE P-LOCK            */
  ,     /* QW0044LX EQU x'0000001F' *         DDF CDB P-lock         */
  ,     /* QW0044LY EQU x'00000020' *         Group Buffer Pool leve */
  ,     /* QW0044LZ EQU x'00000021' *         Pageset or partition l */
  ,     /* QW0044M0 EQU x'00000022' *         RLF P-lock             */
  ,     /* QW0044M1 EQU x'00000023' *         DBD P-lock             */
  ,     /* QW0044M2 EQU x'00000024' *         CATMAINT convert direc */
  ,     /* QW0044M3 EQU x'00000025' *         CATMAINT convert catal */
  ,     /* QW0044M4 EQU x'00000026' *         CATMAINT migration loc */
  ,     /* QW0044M5 EQU x'00000027' *         Database exception LPL */
  ,     /* QW0044M6 EQU x'00000028' *         Utility UID lock       */
  ,     /* QW0044M7 EQU x'00000029' *         Utility exclusive exec */
  ,     /* QW0044M8 EQU x'0000002A' *         SCA access for restart */
  ,     /* QW0044M9 EQU x'0000002B' *         Group database excepti */
  ,     /* QW0044MA EQU x'0000002C' *         REPAIR DBD TEST/DIAGNO */
  ,     /* QW0044MB EQU x'0000002D' *         Database command seria */
  ,     /* QW0044MX EQU x'0000002F' (S)*                             */
  ,     /* QW0044ML EQU x'00000030' *         LOB lock               */
  ,     /* QW0044MM EQU x'00000032' *         LPL recovery lock      */
  ,     /* QW0044MN EQU x'00000033' *         Hash bucket lock       */
  ,     /* QW0044MC EQU x'00000035' *         XML lock               */
  ,     /* QW0044DL EQU x'00000039' *         DBD Load lock          */
  ,     /* QW004400 EQU x'000000FF' (S)*                             */
,/* =00013 QW0044RN +0 ,    C - * LOCKED RESOURCE NAME (FOR P- 0000C */
    =00013 QW0044KD +2 , /* C - *  () DATABASE ID  *SEE 5. BEL 0000C */
,/* =00015 QW0044KB +0 ,    C - *  () TABLE RECORD OBID *SEE 5 0000E */
    =00015 QW0044KP +2 , /* C - *  () PAGESET OBID OR TABLE RE 0000E */
,/* =00017 QW0044KR +0 ,    C - *    ID OF SMALL RESOURCE      00010 */
    =00017 QW0044K1 +3 , /* C - *      1. For pageset or data  00010 */
    =00020 QW0044K2 +1 , /* X - *      QW0044K1 and QW0044K2 a 00013 */
    =00021 RSVD0002 +1 , /* X - *      2. For partition locks, 00014 */
  ,
  ,/*00021 __no__name__ ORG - QW0044KR - x'00000010' *         00015 */
,/* =00017 QW0044KY +0 ,    C - *  ID of small resource when Q 00010 */
    =00017 QW0044K4 +4 , /* C - *  page number                 00010 */
    =00021 QW0044K5 +1 , /* X - *  record id within page       00014 */
  ,
  ,/*00021 __no__name__ ORG - QW0044KR - x'00000010' *         00015 */
,/* =00017 QW0044KZ +0 ,    C - * ID of sm res when QW0021KT=X 00010 */
    =00017 QW0044K8 +2 , /* X - * partition number             00010 */
    =00019 QW0044K9 +1 , /* X - * hash bucket number           00012 */
    =00020 RSVD0003 +1 , /* X - * unused - 0                   00013 */
  ,
  ,/*00020 __no__name__ ORG - QW0044KR - x'00000010'           00014 */
,/* =00017 QW0044KX +0 ,    C - * ID of resource for LOB locks 00010 */
    =00017 QW0044K6 +17 , /* C - * Row ID                      00010 */
    =00034 QW0044K7 +2 , /* C - * Version number               00021 */
  ,
  ,/*00035 __no__name__ ORG - QW0044KR - x'00000010'           00023 */
    =00017 QW0044KC +9 , /* C - * Docid for XML locks          00010 */
    =00026 RSVD0004 +15 , /* C - * Rest of space for 28 byte r 00019 */
    =00041 QW0044FC +1 , /* C - * IRLM FUNCTION CODE           00028 */
  ,     /* QW0044LO EQU x'00000002' *           LOCK FUNCTION        */
  ,     /* QW0044UN EQU x'00000003' *           UNLOCK FUNCTION      */
  ,     /* QW0044CH EQU x'00000004' *           CHANGE FUNCTION      */
  ,     /* QW0044NT EQU x'00000005' *           Notify function (int */
  ,     /* QW0044QY EQU x'00000006' *           QUERY FUNCTION - ANY */
    =00042 QW0044ST +1 , /* X - * LOCK STATE                   00029 */
  ,     /* QW0044S0 EQU x'00000000' (S)*                             */
  ,     /* QW0044S1 EQU x'00000001' *  RESERVED                      */
  ,     /* QW0044S2 EQU x'00000002' *  INTENTED    SHARE             */
  ,     /* QW0044S3 EQU x'00000003' *  INTENTED EXCLUSIVE            */
  ,     /* QW0044S4 EQU x'00000004' *  SHARED                        */
  ,     /* QW0044S5 EQU x'00000005' *  UPDATE                        */
  ,     /* QW0044S6 EQU x'00000006' *  SHARED INTENT EXCLUSIVE       */
  ,     /* QW0044S7 EQU x'00000007' *  NON SHARED UPDATE             */
  ,     /* QW0044S8 EQU x'00000008' *  EXCLUSIVE                     */
    =00043 QW0044DR +1 , /* X - * LOCK DURATION                0002A */
  ,     /* QW004420 EQU x'00000020' *  MANUAL                        */
  ,     /* QW004421 EQU x'00000021' *  MANUAL+1                      */
  ,     /* QW004440 EQU x'00000040' *  COMMIT                        */
  ,     /* QW004441 EQU x'00000041' *  COMMIT+1                      */
  ,     /* QW004460 EQU x'00000060' *  ALLOCATION                    */
  ,     /* QW004480 EQU x'00000080' *  PLAN                          */
  ,     /* QW004481 EQU x'00000081' *  UTIL                          */
  ,     /* QW0044FF EQU x'000000FF' *  DURATION TO FREE ALL LOCKS    */
  ,     /* QW0044FE EQU x'000000FE' *  Interest duration             */
    =00044 QW0044CL +1 , /* C - * (S)                          0002B */
    =00045 QW0044FL +1 , /* X - * Flags                        0002C */
  ,     /* QW0044CD EQU x'00000080' * (S)                            */
  ,     /* QW0044AQ EQU x'00000040' * (S)                            */
  ,     /* QW0044US EQU x'00000020' * (S)                            */
  ,     /* QW0044SY EQU x'00000010' * (S)                            */
  ,     /* QW0044MD EQU x'00000002' * ON = MODIFY LOCK               */
  ,     /* QW0044FO EQU x'00000001' * ON = Force (see QW0021FO)      */
    =00046 QW0044WS +2 , /* C - Reason for the suspend         0002D */
  ,     /* QW0044W1 EQU x'0000D3C7' IRLM generic latch contention    */
  ,     /* QW0044W2 EQU x'0000C9D8' IRLM queued request              */
  ,     /* QW0044W3 EQU x'0000D9D3' Contention with retained lock    */
  ,     /* QW0044W4 EQU x'0000D3C3' Local resource contention        */
  ,     /* QW0044W5 EQU x'0000C7C3' (S)                              */
  ,     /* QW0044W6 EQU x'0000C9E2' Inter-system communication requi */
  ,     /* QW0044W7 EQU x'0000D540' Inter-system message sending     */
  ,     /* QW0044W8 EQU x'0000D3D4' IRLM Main Latch contention       */
  ,     /* QW0044W9 EQU x'0000D3D9' IRLM Resource latch contention   */
  ,     /* QW0044WA EQU x'0000D3E6' IRLM Work Unit latch contention  */
  ,     /* QW0044WB EQU x'0000D3D5' IRLM Notify latch contention     */
    =00048 QW0044GF +1 , /* X - FLAG                           0002F */
  ,     /* QW0044G1 EQU x'00000080' ON = GLOBAL LOCK                 */
    =00049 QW0044PF +1 , /* X - FLAG                           00030 */
  ,     /* QW0044Z1 EQU x'00000080' ON = P-LOCK                      */
    =00050 QW0044F3 +1 , /* X - FLAG                           00031 */
  ,     /* QW0044Y1 EQU x'00000080' ON = REQUEST WAS PROPAGATED TO S */
  ,     /* QW0044Y2 EQU x'00000040' ON = REQUEST WAS SENT ASYNCHRONO */
    =00051 QW0044PT +4 , /* C - * Parent lock token for explic 00032 */
  ,
  ,/*00054 __no__name__ ORG - QW0044RN - x'0000000C'           00036 */
,/* =00013 QW0044PL +0 ,    C - * Locked P-lock resource name. 0000C */
,/* =00013 QW0044P8 +0 ,    C - * See QW0021PL for a descritio 0000C */
    =00013 QW0044P1 +1 , /* X - * resource name mappings for P 0000C */
    =00014 RSVD0005 +1 , /* C -                                0000D */
    =00015 QW0044P2 +2 , /* C -                                0000E */
    =00017 QW0044P3 +2 , /* C -                                00010 */
    =00019 QW0044P4 +2 , /* X -                                00012 */
    =00021 QW0044P5 +3 , /* C -                                00014 */
    =00024 RSVD0006 +17 , /* C -                               00017 */
  ,
  ,/*00040 __no__name__ ORG - QW0044RN - x'0000000C' * Lock na 00028 */
,/* =00013 QW0044A +0 ,    C - * Locked resource name          0000C */
    =00013 QW0044A0 +1 , /* C - * Data Manager RMID            0000C */
    =00014 QW0044A1 +5 , /* C - * Constant  GDBET              0000D */
    =00019 QW0044A6 +2 , /* C - * Database exception hash clas 00012 */
    =00021 RSVD0007 +20 , /* C - * Hex zeros                   00014 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW0044RT = c2x(QW0044RT)
  hex_QW0044LH = c2x(QW0044LH)
  hex_QW0044KL = c2x(QW0044KL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0044KT = c2x(QW0044KT)
  hex_QW0044KD = c2x(QW0044KD)
  hex_QW0044KP = c2x(QW0044KP)
  hex_QW0044K1 = c2x(QW0044K1)
  hex_QW0044K2 = c2x(QW0044K2)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0044K4 = c2x(QW0044K4)
  hex_QW0044K5 = c2x(QW0044K5)
  hex_QW0044K8 = c2x(QW0044K8)
  hex_QW0044K9 = c2x(QW0044K9)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0044K6 = c2x(QW0044K6)
  hex_QW0044K7 = c2x(QW0044K7)
  hex_QW0044KC = c2x(QW0044KC)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0044FC = c2x(QW0044FC)
  hex_QW0044ST = c2x(QW0044ST)
  hex_QW0044DR = c2x(QW0044DR)
  hex_QW0044CL = c2x(QW0044CL)
  hex_QW0044FL = c2x(QW0044FL)
  hex_QW0044WS = c2x(QW0044WS)
  hex_QW0044GF = c2x(QW0044GF)
  hex_QW0044PF = c2x(QW0044PF)
  hex_QW0044F3 = c2x(QW0044F3)
  hex_QW0044PT = c2x(QW0044PT)
  hex_QW0044P1 = c2x(QW0044P1)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0044P2 = c2x(QW0044P2)
  hex_QW0044P3 = c2x(QW0044P3)
  hex_QW0044P4 = c2x(QW0044P4)
  hex_QW0044P5 = c2x(QW0044P5)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0044A0 = c2x(QW0044A0)
  hex_QW0044A1 = c2x(QW0044A1)
  hex_QW0044A6 = c2x(QW0044A6)
  hex_RSVD0007 = c2x(RSVD0007)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0044",desired_dsect) > 0)) then do
    void_rc = queue_QW0044_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0044:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0044_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0044:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * LOCK REQUEST TOKEN         x:" hex_QW0044RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  LOCKED RESOURCE NAME HASH x:" hex_QW0044LH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *   ()LENGTH OF THE LOCK NAM x:" hex_QW0044KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *   ()RESERVED               x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *   ()FLAGS FOR THE LOCKED R x:" hex_QW0044KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  () DATABASE ID  *SEE 5. B x:" hex_QW0044KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  () PAGESET OBID OR TABLE  x:" hex_QW0044KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *      1. For pageset or dat x:" hex_QW0044K1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *      QW0044K1 and QW0044K2 x:" hex_QW0044K2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *      2. For partition lock x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  page number               x:" hex_QW0044K4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  record id within page     x:" hex_QW0044K5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * partition number           x:" hex_QW0044K8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * hash bucket number         x:" hex_QW0044K9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * unused - 0                 x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Row ID                     x:" hex_QW0044K6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Version number             x:" hex_QW0044K7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Docid for XML locks        x:" hex_QW0044KC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Rest of space for 28 byte  x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * IRLM FUNCTION CODE         x:" hex_QW0044FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * LOCK STATE                 x:" hex_QW0044ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * LOCK DURATION              x:" hex_QW0044DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * (S)                        x:" hex_QW0044CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Flags                      x:" hex_QW0044FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason for the suspend       x:" hex_QW0044WS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG                         x:" hex_QW0044GF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG                         x:" hex_QW0044PF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG                         x:" hex_QW0044F3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Parent lock token for expl x:" hex_QW0044PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * resource name mappings for x:" hex_QW0044P1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0044P2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0044P3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0044P4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0044P5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Data Manager RMID          x:" hex_QW0044A0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Constant  GDBET            x:" hex_QW0044A1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Database exception hash cl x:" hex_QW0044A6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Hex zeros                  x:" hex_RSVD0007
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0045 length is 00003
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0045:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0045,3)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0045 Length: 3"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0045 ,
    =00001 QW0045R +1 , /* C - REASON FOR RESUME               00000 */
  ,     /* QW0045D EQU x'000000C4' D = DEADLOCK                      */
  ,     /* QW0045I EQU x'000000C9' I = IDENTIFY TO IRLM              */
  ,     /* QW0045N EQU x'000000D5' N = NORMAL RESUME                 */
  ,     /* QW0045T EQU x'00000000' T = TIMEOUT                       */
    =00002 QW0045SR +1 , /* X - Reason for the suspend - this  00001 */
  ,     /* QW0045W1 EQU x'00000080' IRLM latch contention            */
  ,     /* QW0045W2 EQU x'00000040' IRLM queued request              */
  ,     /* QW0045W3 EQU x'00000020' Local resource contention        */
  ,     /* QW0045W4 EQU x'00000010' Contention with retained lock    */
  ,     /* QW0045W5 EQU x'00000008' Intersystem communication requir */
  ,     /* QW0045W6 EQU x'00000004' Global resource contention       */
  ,     /* QW0045W7 EQU x'00000002' Inter-system message sending     */
  ,     /* QW0045W8 EQU x'00000001' False resource contention        */
    =00003 QW0045XR +1 , /* X - Flags to determine the extent  00002 */
  ,     /* QW0045X1 EQU x'00000080' (S)                              */
  ,     /* QW0045X2 EQU x'00000040' (S)                              */
  ,     /* QW0045X3 EQU x'00000020' ON = MVS XES resource contention */
  ,     /* QW0045X4 EQU x'00000010' ON = IRLM global resource conten */
  ,     /* QW0045X5 EQU x'00000008' (S)                              */
  ,     /* QW0045X6 EQU x'00000004' (S)                              */
  ,     /* QW0045X7 EQU x'00000002' (S)                              */
  ,     /* QW0045X8 EQU x'00000001' (S)                              */
    .           /* End of DSECT */
  /* next byte at 4 */
  hex_QW0045R = c2x(QW0045R)
  hex_QW0045SR = c2x(QW0045SR)
  hex_QW0045XR = c2x(QW0045XR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0045",desired_dsect) > 0)) then do
    void_rc = queue_QW0045_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0045:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0045_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0045:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR RESUME            x:" hex_QW0045R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason for the suspend - thi x:" hex_QW0045SR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags to determine the exten x:" hex_QW0045XR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0046 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0046:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0046,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0046 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0046 ,
    =00001 QW0046AC +4 , /* A - POINTER TO THE NEW OR CALLERS  00000 */
    =00005 RSVD0001 +2 , /* X - BINARY ZERO                    00004 */
    =00007 QW0046ID +1 , /* X - (S)                            00006 */
    =00008 QW0046FC +1 , /* X - (S)                            00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0046AC = c2x(QW0046AC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0046ID = c2x(QW0046ID)
  hex_QW0046FC = c2x(QW0046FC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0046",desired_dsect) > 0)) then do
    void_rc = queue_QW0046_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0046:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0046_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0046:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POINTER TO THE NEW OR CALLER x:" hex_QW0046AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0046ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0046FC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0047 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0047:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0047,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0047 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0047 ,
    =00001 RSVD0001 +2 , /* X - BINARY ZERO                    00000 */
    =00003 QW0047ID +1 , /* X - (S)                            00002 */
    =00004 QW0047FC +1 , /* X - (S)                            00003 */
    =00005 QW0047R0 +4 , /* F - (S)                            00004 */
    =00009 QW0047R1 +4 , /* F - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0047ID = c2x(QW0047ID)
  hex_QW0047FC = c2x(QW0047FC)
  hex_QW0047R0 = c2x(QW0047R0)
  hex_QW0047R1 = c2x(QW0047R1)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0047",desired_dsect) > 0)) then do
    void_rc = queue_QW0047_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0047:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0047_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0047:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0047ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0047FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0047R0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0047R1
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0048 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0048:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0048,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0048 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0048 ,
    =00001 QW0048R0 +4 , /* F - (S)                            00000 */
    =00005 QW0048R1 +4 , /* F - (S)                            00004 */
    =00009 QW0048RF +4 , /* F - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0048R0 = c2x(QW0048R0)
  hex_QW0048R1 = c2x(QW0048R1)
  hex_QW0048RF = c2x(QW0048RF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0048",desired_dsect) > 0)) then do
    void_rc = queue_QW0048_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0048:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0048_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0048:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0048R0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0048R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0048RF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0049 length is 00074
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0049:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0049,116)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0049 Length: 116"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0049 ,
    =00001 RSVD0001 +2 , /* X - BINARY ZERO                    00000 */
    =00003 QW0049ID +1 , /* X - (S)                            00002 */
    =00004 QW0049FC +1 , /* X - (S)                            00003 */
    =00005 QW0049R0 +4 , /* F - (S)                            00004 */
    =00009 QW0049R1 +4 , /* F - (S)                            00008 */
    =00013 QW0049SQ +104 , /* C - (S)                          0000C */
    .           /* End of DSECT */
  /* next byte at 117 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0049ID = c2x(QW0049ID)
  hex_QW0049FC = c2x(QW0049FC)
  hex_QW0049R0 = c2x(QW0049R0)
  hex_QW0049R1 = c2x(QW0049R1)
  hex_QW0049SQ = c2x(QW0049SQ)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0049",desired_dsect) > 0)) then do
    void_rc = queue_QW0049_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0049:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0049_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0049:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0049ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0049FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0049R0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0049R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0049SQ
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0050 length is 00074
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0050:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0050,116)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0050 Length: 116"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0050 ,
    =00001 QW0050R0 +4 , /* F - (S)                            00000 */
    =00005 QW0050R1 +4 , /* F - (S)                            00004 */
    =00009 QW0050RF +4 , /* F - (S)                            00008 */
    =00013 QW0050SQ +104 , /* C - (S)                          0000C */
    .           /* End of DSECT */
  /* next byte at 117 */
  hex_QW0050R0 = c2x(QW0050R0)
  hex_QW0050R1 = c2x(QW0050R1)
  hex_QW0050RF = c2x(QW0050RF)
  hex_QW0050SQ = c2x(QW0050SQ)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0050",desired_dsect) > 0)) then do
    void_rc = queue_QW0050_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0050:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0050_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0050:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0050R0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0050R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0050RF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0050SQ
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0051 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0051:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0051,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0051 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0051 ,
    =00001 QW0051LA +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* X - BINARY ZERO                    00004 */
    =00008 QW0051LC +1 , /* X - (S)                            00007 */
    =00009 RSVD0002 +2 , /* X - RESERVED                       00008 */
    =00011 QW0051SH +2 , /* H - (S)                            0000A */
    =00013 RSVD0003 +2 , /* X - RESERVED                       0000C */
    =00015 QW0051SL +2 , /* H - (S)                            0000E */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0051LA = c2x(QW0051LA)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0051LC = c2x(QW0051LC)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0051SH = c2x(QW0051SH)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0051SL = c2x(QW0051SL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0051",desired_dsect) > 0)) then do
    void_rc = queue_QW0051_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0051:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0051_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0051:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0051LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0051LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0051SH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0051SL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0052 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0052:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0052,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0052 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0052 ,
    =00001 RSVD0001 +3 , /* X - BINARY ZERO                    00000 */
    =00004 QW0052LC +1 , /* X - (S)                            00003 */
    =00005 QW0052LA +4 , /* A - (S)                            00004 */
    =00009 QW0052LF +4 , /* A - (S)                            00008 */
    =00013 RSVD0002 +3 , /* X - RESERVED                       0000C */
    =00016 QW0052RM +1 , /* C - (S)                            0000F */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0052LC = c2x(QW0052LC)
  hex_QW0052LA = c2x(QW0052LA)
  hex_QW0052LF = c2x(QW0052LF)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0052RM = c2x(QW0052RM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0052",desired_dsect) > 0)) then do
    void_rc = queue_QW0052_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0052:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0052_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0052:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0052LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0052LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0052LF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0052RM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0053 length is 000E2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0053:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0053,226)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0053 Length: 226"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0053 ,
    =00001 QW0053LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0053PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0053PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0053TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0053OS +2 , /* C - RESERVED                       0003C */
    =00063 QW0053SQ +136 , /* C - SQLCA CONTENTS               0003E */
    =00199 RSVD0001 +2 , /* C - RESERVED                       000C6 */
    =00201 QW0053SN +4 , /* F - STATEMENT NUMBER               000C8 */
    =00205 QW0053LN_Off +2 , /* H - Offset from QW0053 to      000CC */
    =00207 QW0053PC_Off +2 , /* H - Offset from QW0053 to      000CE */
    =00209 QW0053PN_Off +2 , /* H - Offset from QW0053 to      000D0 */
    =00211 QW0053CID +8 , /* X - QUERY COMMAND ID              000D2 */
    =00219 QW0053QID +8 , /* X - QUERY INSTANCE ID             000DA */
  ,
  ,/*00226 __no__name__ ORG - QW0053 - x'00000000'             000E2 */
    =00001 QW0053ID +4 , /* C - IDENTIFICATION (ID) - SEE EQUA 00000 */
    =00005 RSVD0002 +4 , /* C - UNUSED                         00004 */
    =00009 QW0053RP +8 , /* X - ROWS PROCESSED- ANY RECORD TYP 00008 */
    =00017 QW0053LA +8 , /* X - ROWS LOOKED AT - RIGHT RECORD  00010 */
    =00025 QW0053DQ +8 , /* X - ROWS DATA MANAGER QUALIFIED    00018 */
    =00033 QW0053RQ +8 , /* X - ROWS RDS QUALIFIED             00020 */
    =00041 QW0053IN +8 , /* X - ROWS INSERTED                  00028 */
    =00049 QW0053UP +8 , /* X - ROWS UPDATED                   00030 */
    =00057 QW0053DE +8 , /* X - ROWS DELETED                   00038 */
    =00065 QW0053PS +4 , /* F - PAGES SCANNED                  00040 */
    =00069 QW0053PR +4 , /* F - ADDITIONAL PAGES SCANNED TO EN 00044 */
    =00073 QW0053DR +8 , /* X - ADDITIONAL ROWS DELETED OR SET 00048 */
    =00081 QW0053PL +4 , /* X - Additional pages scanned in a  00050 */
    =00085 QW0053UL +4 , /* X - Count of LOB data pages update 00054 */
  ,     /* QW0053IX EQU x'C9D5C4E7' ID = INDEX                       */
  ,     /* QW0053SD EQU x'E2C5D8C4' ID = SEQUENTIAL DATA             */
  ,     /* QW0053SW EQU x'E2C5D8E6' ID = SEQUENTIAL DATA WORKFILE    */
  ,
  ,/*00088 __no__name__ ORG - QW0053 - x'00000000'             00058 */
    =00001 QW0053CONN +4 , /* X - # OF ACCELERATOR CONNECTS.   00000 */
    =00005 QW0053REQ +4 , /* X - # OF ACCELERATOR REQUESTS.    00004 */
    =00009 QW0053TOUT +4 , /* X - # OF TIMED OUT REQUESTS.     00008 */
    =00013 QW0053FAIL +4 , /* X - # OF FAILED REQUESTS.        0000C */
    =00017 QW0053BYTS +8 , /* X - # OF BYTES SENT.             00010 */
    =00025 QW0053BYTR +8 , /* X - # OF BYTES RETURNED.         00018 */
    =00033 QW0053MSGS +4 , /* X - # OF MESSAGES SENT.          00020 */
    =00037 QW0053MSGR +4 , /* X - # OF MESSGAGE RETURNED.      00024 */
    =00041 QW0053BLKS +4 , /* X - # OF BLOCKS SENT             00028 */
    =00045 QW0053BLKR +4 , /* X - # OF BLOCKS RETURNED.        0002C */
    =00049 QW0053ROWS +8 , /* X - # OF ROWS SENT               00030 */
    =00057 QW0053ROWR +8 , /* X - # OF ROWS RETURNED.          00038 */
    =00065 QW0053SCPU +8 , /* X - ACCELERATOR SERVICES CPU TIM 00040 */
    =00073 QW0053SELA +8 , /* X - ACCELERATOR SERVICES ELAPSED 00048 */
    =00081 QW0053TCPU +8 , /* X - ACCELERATOR SVCS TCP/IP CPU  00050 */
    =00089 QW0053TELA +8 , /* X - ACCELERATOR SVCS TCP/IP ELAP 00058 */
    =00097 QW0053ACPU +8 , /* X - OVERALL ACCELERATOR CPU TIME 00060 */
    =00105 QW0053AELA +8 , /* X - OVERALL ACCELERATOR ELAPSED  00068 */
    =00001 QW0053LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0053LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0053PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0053PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0053PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0053PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0053LN = c2x(QW0053LN)
  hex_QW0053PC = c2x(QW0053PC)
  hex_QW0053PN = c2x(QW0053PN)
  hex_QW0053TS = c2x(QW0053TS)
  hex_QW0053OS = c2x(QW0053OS)
  hex_QW0053SQ = c2x(QW0053SQ)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0053SN = c2x(QW0053SN)
  hex_QW0053LN_Off = c2x(QW0053LN_Off)
  hex_QW0053PC_Off = c2x(QW0053PC_Off)
  hex_QW0053PN_Off = c2x(QW0053PN_Off)
  hex_QW0053CID = c2x(QW0053CID)
  hex_QW0053QID = c2x(QW0053QID)
  hex_QW0053ID = c2x(QW0053ID)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0053RP = c2x(QW0053RP)
  hex_QW0053LA = c2x(QW0053LA)
  hex_QW0053DQ = c2x(QW0053DQ)
  hex_QW0053RQ = c2x(QW0053RQ)
  hex_QW0053IN = c2x(QW0053IN)
  hex_QW0053UP = c2x(QW0053UP)
  hex_QW0053DE = c2x(QW0053DE)
  hex_QW0053PS = c2x(QW0053PS)
  hex_QW0053PR = c2x(QW0053PR)
  hex_QW0053DR = c2x(QW0053DR)
  hex_QW0053PL = c2x(QW0053PL)
  hex_QW0053UL = c2x(QW0053UL)
  hex_QW0053CONN = c2x(QW0053CONN)
  hex_QW0053REQ = c2x(QW0053REQ)
  hex_QW0053TOUT = c2x(QW0053TOUT)
  hex_QW0053FAIL = c2x(QW0053FAIL)
  hex_QW0053BYTS = c2x(QW0053BYTS)
  hex_QW0053BYTR = c2x(QW0053BYTR)
  hex_QW0053MSGS = c2x(QW0053MSGS)
  hex_QW0053MSGR = c2x(QW0053MSGR)
  hex_QW0053BLKS = c2x(QW0053BLKS)
  hex_QW0053BLKR = c2x(QW0053BLKR)
  hex_QW0053ROWS = c2x(QW0053ROWS)
  hex_QW0053ROWR = c2x(QW0053ROWR)
  hex_QW0053SCPU = c2x(QW0053SCPU)
  hex_QW0053SELA = c2x(QW0053SELA)
  hex_QW0053TCPU = c2x(QW0053TCPU)
  hex_QW0053TELA = c2x(QW0053TELA)
  hex_QW0053ACPU = c2x(QW0053ACPU)
  hex_QW0053AELA = c2x(QW0053AELA)
  hex_QW0053LN_Len = c2x(QW0053LN_Len)
  hex_QW0053PC_Len = c2x(QW0053PC_Len)
  hex_QW0053PN_Len = c2x(QW0053PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0053",desired_dsect) > 0)) then do
    void_rc = queue_QW0053_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0053:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0053_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0053:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0053LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0053PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0053PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0053TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0053OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLCA CONTENTS               x:" hex_QW0053SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0053SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0053 to        x:" hex_QW0053LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0053 to        x:" hex_QW0053PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0053 to        x:" hex_QW0053PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0053CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0053QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IDENTIFICATION (ID) - SEE EQ x:" hex_QW0053ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS PROCESSED- ANY RECORD T x:" hex_QW0053RP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS LOOKED AT - RIGHT RECOR x:" hex_QW0053LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DATA MANAGER QUALIFIED  x:" hex_QW0053DQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS RDS QUALIFIED           x:" hex_QW0053RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS INSERTED                x:" hex_QW0053IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS UPDATED                 x:" hex_QW0053UP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DELETED                 x:" hex_QW0053DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGES SCANNED                x:" hex_QW0053PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDITIONAL PAGES SCANNED TO  x:" hex_QW0053PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDITIONAL ROWS DELETED OR S x:" hex_QW0053DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Additional pages scanned in  x:" hex_QW0053PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Count of LOB data pages upda x:" hex_QW0053UL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR CONNECTS.   x:" hex_QW0053CONN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR REQUESTS.   x:" hex_QW0053REQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMED OUT REQUESTS.     x:" hex_QW0053TOUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAILED REQUESTS.        x:" hex_QW0053FAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES SENT.             x:" hex_QW0053BYTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES RETURNED.         x:" hex_QW0053BYTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSAGES SENT.          x:" hex_QW0053MSGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSGAGE RETURNED.      x:" hex_QW0053MSGR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS SENT             x:" hex_QW0053BLKS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS RETURNED.        x:" hex_QW0053BLKR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS SENT               x:" hex_QW0053ROWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS RETURNED.          x:" hex_QW0053ROWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES CPU TIM x:" hex_QW0053SCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES ELAPSED x:" hex_QW0053SELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SVCS TCP/IP CPU  x:" hex_QW0053TCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SVCS TCP/IP ELAP x:" hex_QW0053TELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OVERALL ACCELERATOR CPU TIME x:" hex_QW0053ACPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OVERALL ACCELERATOR ELAPSED  x:" hex_QW0053AELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0053LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0053PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0053PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0055 length is 00016
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0055:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0055,22)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0055 Length: 22"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0055 ,
    =00001 QW0055OI +8 , /* C - %U PREVIOUS (CURRENT) SQLID    00000 */
    =00009 QW0055NI +8 , /* C - %U NEW (ATTEMPTED ) SQLID      00008 */
    =00017 QW0055ST +1 , /* C - STATUS OF STATEMENT(SUCCESS or 00010 */
    =00018 RSVD0001 +1 , /* C - Reserved                       00011 */
    =00019 QW0055OI_Off +2 , /* H - Offset from QW0055 to      00012 */
    =00021 QW0055NI_Off +2 , /* H - Offset from QW0055 to      00014 */
  ,     /* QW0055S EQU x'00000000' SUCCESSFUL STATUS                 */
  ,     /* QW0055F EQU x'000000C6' FAILED STATUS                     */
  ,     /* QW0055X EQU x'00000000' SUCCESSFUL - USER HAD SYSADM AUTH */
    =00001 QW0055OI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0055OI_Var +0 ,    C - %U PREVIOUS (CURRENT) SQLI 00002 */
    =00001 QW0055NI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0055NI_Var +0 ,    C - %U NEW (ATTEMPTED ) SQLID  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0055OI = c2x(QW0055OI)
  hex_QW0055NI = c2x(QW0055NI)
  hex_QW0055ST = c2x(QW0055ST)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0055OI_Off = c2x(QW0055OI_Off)
  hex_QW0055NI_Off = c2x(QW0055NI_Off)
  hex_QW0055OI_Len = c2x(QW0055OI_Len)
  hex_QW0055NI_Len = c2x(QW0055NI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0055",desired_dsect) > 0)) then do
    void_rc = queue_QW0055_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0055:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0055_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0055:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PREVIOUS (CURRENT) SQLID  x:" hex_QW0055OI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U NEW (ATTEMPTED ) SQLID    x:" hex_QW0055NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATUS OF STATEMENT(SUCCESS  x:" hex_QW0055ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0055 to        x:" hex_QW0055OI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0055 to        x:" hex_QW0055NI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0055OI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0055NI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0056 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0056:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0056,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0056 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0056 ,
    =00001 RSVD0001 +3 , /* X - BINARY ZERO                    00000 */
    =00004 QW0056LC +1 , /* X - Latch class. See DSNDQVLS for  00003 */
    =00005 QW0056LA +8 , /* X - (S)                            00004 */
    =00013 QW0056LF +4 , /* A - (S)                            0000C */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0056LC = c2x(QW0056LC)
  hex_QW0056LA = c2x(QW0056LA)
  hex_QW0056LF = c2x(QW0056LF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0056",desired_dsect) > 0)) then do
    void_rc = queue_QW0056_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0056:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0056_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0056:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Latch class. See DSNDQVLS fo x:" hex_QW0056LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0056LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0056LF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0057 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0057:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0057,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0057 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0057 ,
    =00001 QW0057LA +8 , /* X - (S)                            00000 */
    =00009 RSVD0001 +3 , /* X - BINARY ZERO                    00008 */
    =00012 QW0057LC +1 , /* X - Latch class. See DSNDQVLS for  0000B */
    =00013 QW0057TS +4 , /* F - (S)                            0000C */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0057LA = c2x(QW0057LA)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0057LC = c2x(QW0057LC)
  hex_QW0057TS = c2x(QW0057TS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0057",desired_dsect) > 0)) then do
    void_rc = queue_QW0057_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0057:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0057_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0057:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0057LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Latch class. See DSNDQVLS fo x:" hex_QW0057LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0057TS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0058 length is 000E2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0058:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0058,226)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0058 Length: 226"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0058 ,
    =00001 QW0058LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0058PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0058PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0058TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0058OS +2 , /* C - RESERVED                       0003C */
    =00063 QW0058SQ +136 , /* C - SQLCA CONTENTS               0003E */
    =00199 RSVD0001 +2 , /* C - Reserved                       000C6 */
    =00201 QW0058SN +4 , /* F - STATEMENT NUMBER               000C8 */
    =00205 QW0058LN_Off +2 , /* H - Offset from QW0058 to      000CC */
    =00207 QW0058PC_Off +2 , /* H - Offset from QW0058 to      000CE */
    =00209 QW0058PN_Off +2 , /* H - Offset from QW0058 to      000D0 */
    =00211 QW0058CID +8 , /* X - QUERY COMMAND ID              000D2 */
    =00219 QW0058QID +8 , /* X - QUERY INSTANCE ID             000DA */
  ,
  ,/*00226 __no__name__ ORG - QW0058 - x'00000000'             000E2 */
    =00001 QW0058ID +4 , /* C - IDENTIFICATION (ID) - SEE EQUA 00000 */
    =00005 RSVD0002 +4 , /* C - UNUSED                         00004 */
    =00009 QW0058RP +8 , /* X - ROWS PROCESSED- ANY RECORD TYP 00008 */
    =00017 QW0058LA +8 , /* X - ROWS LOOKED AT - RIGHT RECORD  00010 */
    =00025 QW0058DQ +8 , /* X - ROWS DATA MANAGER QUALIFIED    00018 */
    =00033 QW0058RQ +8 , /* X - ROWS RDS QUALIFIED             00020 */
    =00041 QW0058IN +8 , /* X - ROWS INSERTED                  00028 */
    =00049 QW0058UP +8 , /* X - ROWS UPDATED                   00030 */
    =00057 QW0058DE +8 , /* X - ROWS DELETED                   00038 */
    =00065 QW0058PS +4 , /* X - PAGES SCANNED                  00040 */
    =00069 QW0058PR +4 , /* X - ADDITIONAL PAGES SCANNED TO EN 00044 */
    =00073 QW0058DR +8 , /* X - ADDITIONAL ROWS DELETED OR SET 00048 */
    =00081 QW0058PL +4 , /* X - Additional pages scanned in a  00050 */
    =00085 QW0058UL +4 , /* X - Count of LOB data pages update 00054 */
  ,     /* QW0058IX EQU x'C9D5C4E7' ID = INDEX                       */
  ,     /* QW0058SD EQU x'E2C5D8C4' ID = SEQUENTIAL DATA             */
  ,     /* QW0058SW EQU x'E2C5D8E6' ID = SEQUENTIAL DATA WORKFILE    */
  ,
  ,/*00088 __no__name__ ORG - QW0058 - x'00000000'             00058 */
    =00001 QW0058CONN +4 , /* X - # OF ACCELERATOR CONNECTS.   00000 */
    =00005 QW0058REQ +4 , /* X - # OF ACCELERATOR REQUESTS.    00004 */
    =00009 QW0058TOUT +4 , /* X - # OF TIMED OUT REQUESTS.     00008 */
    =00013 QW0058FAIL +4 , /* X - # OF FAILED REQUESTS.        0000C */
    =00017 QW0058BYTS +8 , /* X - # OF BYTES SENT.             00010 */
    =00025 QW0058BYTR +8 , /* X - # OF BYTES RETURNED.         00018 */
    =00033 QW0058MSGS +4 , /* X - # OF MESSAGES SENT.          00020 */
    =00037 QW0058MSGR +4 , /* X - # OF MESSGAGE RETURNED.      00024 */
    =00041 QW0058BLKS +4 , /* X - # OF BLOCKS SENT             00028 */
    =00045 QW0058BLKR +4 , /* X - # OF BLOCKS RETURNED.        0002C */
    =00049 QW0058ROWS +8 , /* X - # OF ROWS SENT               00030 */
    =00057 QW0058ROWR +8 , /* X - # OF ROWS RETURNED.          00038 */
    =00065 QW0058SCPU +8 , /* X - ACCELERATOR SERVICES CPU TIM 00040 */
    =00073 QW0058SELA +8 , /* X - ACCELERATOR SERVICES ELAPSED 00048 */
    =00081 QW0058TCPU +8 , /* X - ACCELERATOR SVCS TCP/IP CPU  00050 */
    =00089 QW0058TELA +8 , /* X - ACCELERATOR SVCS TCP/IP ELAP 00058 */
    =00097 QW0058ACPU +8 , /* X - OVERALL ACCELERATOR CPU TIME 00060 */
    =00105 QW0058AELA +8 , /* X - OVERALL ACCELERATOR ELAPSED  00068 */
    =00001 QW0058LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0058LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0058PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0058PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0058PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0058PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0058LN = c2x(QW0058LN)
  hex_QW0058PC = c2x(QW0058PC)
  hex_QW0058PN = c2x(QW0058PN)
  hex_QW0058TS = c2x(QW0058TS)
  hex_QW0058OS = c2x(QW0058OS)
  hex_QW0058SQ = c2x(QW0058SQ)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0058SN = c2x(QW0058SN)
  hex_QW0058LN_Off = c2x(QW0058LN_Off)
  hex_QW0058PC_Off = c2x(QW0058PC_Off)
  hex_QW0058PN_Off = c2x(QW0058PN_Off)
  hex_QW0058CID = c2x(QW0058CID)
  hex_QW0058QID = c2x(QW0058QID)
  hex_QW0058ID = c2x(QW0058ID)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0058RP = c2x(QW0058RP)
  hex_QW0058LA = c2x(QW0058LA)
  hex_QW0058DQ = c2x(QW0058DQ)
  hex_QW0058RQ = c2x(QW0058RQ)
  hex_QW0058IN = c2x(QW0058IN)
  hex_QW0058UP = c2x(QW0058UP)
  hex_QW0058DE = c2x(QW0058DE)
  hex_QW0058PS = c2x(QW0058PS)
  hex_QW0058PR = c2x(QW0058PR)
  hex_QW0058DR = c2x(QW0058DR)
  hex_QW0058PL = c2x(QW0058PL)
  hex_QW0058UL = c2x(QW0058UL)
  hex_QW0058CONN = c2x(QW0058CONN)
  hex_QW0058REQ = c2x(QW0058REQ)
  hex_QW0058TOUT = c2x(QW0058TOUT)
  hex_QW0058FAIL = c2x(QW0058FAIL)
  hex_QW0058BYTS = c2x(QW0058BYTS)
  hex_QW0058BYTR = c2x(QW0058BYTR)
  hex_QW0058MSGS = c2x(QW0058MSGS)
  hex_QW0058MSGR = c2x(QW0058MSGR)
  hex_QW0058BLKS = c2x(QW0058BLKS)
  hex_QW0058BLKR = c2x(QW0058BLKR)
  hex_QW0058ROWS = c2x(QW0058ROWS)
  hex_QW0058ROWR = c2x(QW0058ROWR)
  hex_QW0058SCPU = c2x(QW0058SCPU)
  hex_QW0058SELA = c2x(QW0058SELA)
  hex_QW0058TCPU = c2x(QW0058TCPU)
  hex_QW0058TELA = c2x(QW0058TELA)
  hex_QW0058ACPU = c2x(QW0058ACPU)
  hex_QW0058AELA = c2x(QW0058AELA)
  hex_QW0058LN_Len = c2x(QW0058LN_Len)
  hex_QW0058PC_Len = c2x(QW0058PC_Len)
  hex_QW0058PN_Len = c2x(QW0058PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0058",desired_dsect) > 0)) then do
    void_rc = queue_QW0058_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0058:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0058_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0058:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0058LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0058PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0058PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0058TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0058OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLCA CONTENTS               x:" hex_QW0058SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0058SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0058 to        x:" hex_QW0058LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0058 to        x:" hex_QW0058PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0058 to        x:" hex_QW0058PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0058CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0058QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IDENTIFICATION (ID) - SEE EQ x:" hex_QW0058ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS PROCESSED- ANY RECORD T x:" hex_QW0058RP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS LOOKED AT - RIGHT RECOR x:" hex_QW0058LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DATA MANAGER QUALIFIED  x:" hex_QW0058DQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS RDS QUALIFIED           x:" hex_QW0058RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS INSERTED                x:" hex_QW0058IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS UPDATED                 x:" hex_QW0058UP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DELETED                 x:" hex_QW0058DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGES SCANNED                x:" hex_QW0058PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDITIONAL PAGES SCANNED TO  x:" hex_QW0058PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDITIONAL ROWS DELETED OR S x:" hex_QW0058DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Additional pages scanned in  x:" hex_QW0058PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Count of LOB data pages upda x:" hex_QW0058UL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR CONNECTS.   x:" hex_QW0058CONN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACCELERATOR REQUESTS.   x:" hex_QW0058REQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF TIMED OUT REQUESTS.     x:" hex_QW0058TOUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF FAILED REQUESTS.        x:" hex_QW0058FAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES SENT.             x:" hex_QW0058BYTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BYTES RETURNED.         x:" hex_QW0058BYTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSAGES SENT.          x:" hex_QW0058MSGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF MESSGAGE RETURNED.      x:" hex_QW0058MSGR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS SENT             x:" hex_QW0058BLKS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF BLOCKS RETURNED.        x:" hex_QW0058BLKR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS SENT               x:" hex_QW0058ROWS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ROWS RETURNED.          x:" hex_QW0058ROWR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES CPU TIM x:" hex_QW0058SCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SERVICES ELAPSED x:" hex_QW0058SELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SVCS TCP/IP CPU  x:" hex_QW0058TCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCELERATOR SVCS TCP/IP ELAP x:" hex_QW0058TELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OVERALL ACCELERATOR CPU TIME x:" hex_QW0058ACPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OVERALL ACCELERATOR ELAPSED  x:" hex_QW0058AELA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0058LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0058PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0058PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0059 length is 00074
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0059:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0059,116)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0059 Length: 116"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0059 ,
    =00001 QW0059LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0059PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0059PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0059TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0059OS +2 , /* C - Reserved                       0003C */
    =00063 QW0059ST +1 , /* C - STATEMENT TYPE                 0003E */
  ,     /* QW0059FE EQU x'00000001' FETCH TYPE                       */
    =00064 QW0059CL +2 , /* X - CURSOR NAME LENGTH             0003F */
    =00066 QW0059CN +18 , /* C - %U CURSOR NAME                00041 */
    =00084 RSVD0001 +1 , /* C - Reserved                       00053 */
    =00085 QW0059SN +4 , /* F - STATEMENT NUMBER               00054 */
    =00089 QW0059FS +1 , /* C - FETCH SENSITIVITY              00058 */
  ,     /* QW0059SF EQU x'00000000' FETCH SENSITIVE                  */
  ,     /* QW0059IF EQU x'000000C9' FETCH INSENSITIVE                */
  ,     /* QW0059UF EQU x'00000040' FETCH SENSITIVITY UNSPECIFIED    */
    =00090 QW0059FO +1 , /* C - FETCH ORIENTATION              00059 */
  ,     /* QW0059FF EQU x'000000C6' FETCH FIRST                      */
  ,     /* QW0059FL EQU x'000000D3' FETCH LAST                       */
  ,     /* QW0059FB EQU x'000000C2' FETCH BEFORE                     */
  ,     /* QW0059FA EQU x'000000C1' FETCH AFTER                      */
  ,     /* QW0059FN EQU x'000000D5' FETCH NEXT                       */
  ,     /* QW0059FP EQU x'000000D7' FETCH PREV                       */
  ,     /* QW0059FC EQU x'000000C3' FETCH CURRENT                    */
  ,     /* QW0059FT EQU x'00000000' FETCH ABSOLUTE                   */
  ,     /* QW0059FR EQU x'000000D9' FETCH RELATIVE                   */
  ,     /* QW0059FU EQU x'00000040' FETCH ORIENTATION UNSPECIFIED    */
    =00091 RSVD0002 +2 , /* C - Reserved                       0005A */
    =00093 QW0059LN_Off +2 , /* H - Offset from QW0059 to      0005C */
    =00095 QW0059PC_Off +2 , /* H - Offset from QW0059 to      0005E */
    =00097 QW0059PN_Off +2 , /* H - Offset from QW0059 to      00060 */
    =00099 QW0059CN_Off +2 , /* H - Offset from QW0059 to      00062 */
    =00101 QW0059CID +8 , /* X - QUERY COMMAND ID              00064 */
    =00109 QW0059QID +8 , /* X - QUERY INSTANCE ID             0006C */
    =00001 QW0059LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0059LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0059PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0059PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0059PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0059PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0059CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0059CN_Var +0 ,    C - %U CURSOR NAME             00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0059LN = c2x(QW0059LN)
  hex_QW0059PC = c2x(QW0059PC)
  hex_QW0059PN = c2x(QW0059PN)
  hex_QW0059TS = c2x(QW0059TS)
  hex_QW0059OS = c2x(QW0059OS)
  hex_QW0059ST = c2x(QW0059ST)
  hex_QW0059CL = c2x(QW0059CL)
  hex_QW0059CN = c2x(QW0059CN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0059SN = c2x(QW0059SN)
  hex_QW0059FS = c2x(QW0059FS)
  hex_QW0059FO = c2x(QW0059FO)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0059LN_Off = c2x(QW0059LN_Off)
  hex_QW0059PC_Off = c2x(QW0059PC_Off)
  hex_QW0059PN_Off = c2x(QW0059PN_Off)
  hex_QW0059CN_Off = c2x(QW0059CN_Off)
  hex_QW0059CID = c2x(QW0059CID)
  hex_QW0059QID = c2x(QW0059QID)
  hex_QW0059LN_Len = c2x(QW0059LN_Len)
  hex_QW0059PC_Len = c2x(QW0059PC_Len)
  hex_QW0059PN_Len = c2x(QW0059PN_Len)
  hex_QW0059CN_Len = c2x(QW0059CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0059",desired_dsect) > 0)) then do
    void_rc = queue_QW0059_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0059:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0059_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0059:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0059LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0059PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0059PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0059TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0059OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0059ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR NAME LENGTH           x:" hex_QW0059CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME               x:" hex_QW0059CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0059SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FETCH SENSITIVITY            x:" hex_QW0059FS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FETCH ORIENTATION            x:" hex_QW0059FO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0059 to        x:" hex_QW0059LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0059 to        x:" hex_QW0059PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0059 to        x:" hex_QW0059PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0059 to        x:" hex_QW0059CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0059CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0059QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0059LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0059PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0059PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0059CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0060 length is 0005E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0060:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0060,94)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0060 Length: 94"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0060 ,
    =00001 QW0060LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0060PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0060PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0060TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0060OS +2 , /* C - Reserved                       0003C */
    =00063 QW0060ST +1 , /* C - STATEMENT TYPE                 0003E */
    =00064 QW0060I +1 , /* C - STATEMENT ISOLATION LEVEL       0003F */
    =00065 QW0060RO +2 , /* X - REOPTIMIZATION                 00040 */
  ,     /* QW0060RR EQU x'000000D9' RR ISOLATION LEVEL               */
  ,     /* QW0060RS EQU x'00000000' RS ISOLATION LEVEL               */
  ,     /* QW0060CS EQU x'00000000' CS ISOLATION LEVEL               */
  ,     /* QW0060UR EQU x'00000000' UR ISOLATION LEVEL               */
  ,     /* QW0060R0 EQU x'00000000' REOPTIMIZATION DID NOT OCCUR     */
  ,     /* QW0060R1 EQU x'00000001' REOPTIMIZATION OCCURRED FOR INPU */
  ,     /* QW0060SE EQU x'00000000' SELECT TYPE                      */
    =00067 RSVD0001 +2 , /* C - Reserved                       00042 */
    =00069 QW0060SN +4 , /* F - STATEMENT NUMBER               00044 */
    =00073 QW0060LN_Off +2 , /* H - Offset from QW0060 to      00048 */
    =00075 QW0060PC_Off +2 , /* H - Offset from QW0060 to      0004A */
    =00077 QW0060PN_Off +2 , /* H - Offset from QW0060 to      0004C */
    =00079 QW0060CID +8 , /* X - QUERY COMMAND ID              0004E */
    =00087 QW0060QID +8 , /* X - QUERY INSTANCE ID             00056 */
    =00001 QW0060LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0060LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0060PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0060PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0060PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0060PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0060LN = c2x(QW0060LN)
  hex_QW0060PC = c2x(QW0060PC)
  hex_QW0060PN = c2x(QW0060PN)
  hex_QW0060TS = c2x(QW0060TS)
  hex_QW0060OS = c2x(QW0060OS)
  hex_QW0060ST = c2x(QW0060ST)
  hex_QW0060I = c2x(QW0060I)
  hex_QW0060RO = c2x(QW0060RO)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0060SN = c2x(QW0060SN)
  hex_QW0060LN_Off = c2x(QW0060LN_Off)
  hex_QW0060PC_Off = c2x(QW0060PC_Off)
  hex_QW0060PN_Off = c2x(QW0060PN_Off)
  hex_QW0060CID = c2x(QW0060CID)
  hex_QW0060QID = c2x(QW0060QID)
  hex_QW0060LN_Len = c2x(QW0060LN_Len)
  hex_QW0060PC_Len = c2x(QW0060PC_Len)
  hex_QW0060PN_Len = c2x(QW0060PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0060",desired_dsect) > 0)) then do
    void_rc = queue_QW0060_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0060:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0060_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0060:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0060LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0060PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0060PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0060TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0060OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0060ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT ISOLATION LEVEL    x:" hex_QW0060I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPTIMIZATION               x:" hex_QW0060RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0060SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0060 to        x:" hex_QW0060LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0060 to        x:" hex_QW0060PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0060 to        x:" hex_QW0060PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0060CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0060QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0060LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0060PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0060PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0061 length is 00074
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0061:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0061,116)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0061 Length: 116"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0061 ,
    =00001 QW0061LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0061PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0061PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0061TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0061OS +2 , /* C - Reserved                       0003C */
    =00063 QW0061ST +1 , /* C - STATEMENT TYPE                 0003E */
  ,     /* QW0061IS EQU x'00000010' INSERT TYPE                      */
  ,     /* QW0061UN EQU x'00000020' UPDATE TYPE- NON CURSOR          */
  ,     /* QW0061UC EQU x'00000021' UPDATE TYPE- CURSOR              */
  ,     /* QW0061MG EQU x'00000030' MERGE  TYPE                      */
  ,     /* QW0061DN EQU x'00000040' DELETE TYPE- NON CURSOR          */
  ,     /* QW0061DC EQU x'00000041' DELETE TYPE- CURSOR              */
  ,     /* QW0061TR EQU x'00000050' TRUNCATE TYPE                    */
    =00064 QW0061CL +2 , /* X - CURSOR NAME LENGTH             0003F */
    =00066 QW0061CN +18 , /* C - %U CURSOR NAME                00041 */
    =00084 QW0061I +1 , /* C - STATEMENT ISOLATION LEVEL       00053 */
  ,     /* QW0061RR EQU x'000000D9' RR ISOLATION LEVEL               */
  ,     /* QW0061RS EQU x'00000000' RS ISOLATION LEVEL               */
  ,     /* QW0061CS EQU x'00000000' CS ISOLATION LEVEL               */
    =00085 QW0061RO +2 , /* X - REOPTIMIZATION                 00054 */
  ,     /* QW0061R0 EQU x'00000000' REOPTIMIZATION DID NOT OCCUR     */
  ,     /* QW0061R1 EQU x'00000001' REOPTIMIZATION OCCURRED FOR INPU */
    =00087 RSVD0001 +2 , /* C - Reserved                       00056 */
    =00089 QW0061SN +4 , /* F - STATEMENT NUMBER               00058 */
    =00093 QW0061LN_Off +2 , /* H - Offset from QW0061 to      0005C */
    =00095 QW0061PC_Off +2 , /* H - Offset from QW0061 to      0005E */
    =00097 QW0061PN_Off +2 , /* H - Offset from QW0061 to      00060 */
    =00099 QW0061CN_Off +2 , /* H - Offset from QW0061 to      00062 */
    =00101 QW0061CI +8 , /* X - QUERY COMMAND ID               00064 */
    =00109 QW0061QI +8 , /* X - QUERY INSTANCE ID              0006C */
    =00001 QW0061LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0061LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0061PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0061PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0061PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0061PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0061CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0061CN_Var +0 ,    C - %U CURSOR NAME             00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0061LN = c2x(QW0061LN)
  hex_QW0061PC = c2x(QW0061PC)
  hex_QW0061PN = c2x(QW0061PN)
  hex_QW0061TS = c2x(QW0061TS)
  hex_QW0061OS = c2x(QW0061OS)
  hex_QW0061ST = c2x(QW0061ST)
  hex_QW0061CL = c2x(QW0061CL)
  hex_QW0061CN = c2x(QW0061CN)
  hex_QW0061I = c2x(QW0061I)
  hex_QW0061RO = c2x(QW0061RO)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0061SN = c2x(QW0061SN)
  hex_QW0061LN_Off = c2x(QW0061LN_Off)
  hex_QW0061PC_Off = c2x(QW0061PC_Off)
  hex_QW0061PN_Off = c2x(QW0061PN_Off)
  hex_QW0061CN_Off = c2x(QW0061CN_Off)
  hex_QW0061CI = c2x(QW0061CI)
  hex_QW0061QI = c2x(QW0061QI)
  hex_QW0061LN_Len = c2x(QW0061LN_Len)
  hex_QW0061PC_Len = c2x(QW0061PC_Len)
  hex_QW0061PN_Len = c2x(QW0061PN_Len)
  hex_QW0061CN_Len = c2x(QW0061CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0061",desired_dsect) > 0)) then do
    void_rc = queue_QW0061_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0061:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0061_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0061:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0061LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0061PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0061PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0061TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0061OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0061ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR NAME LENGTH           x:" hex_QW0061CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME               x:" hex_QW0061CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT ISOLATION LEVEL    x:" hex_QW0061I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPTIMIZATION               x:" hex_QW0061RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0061SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0061 to        x:" hex_QW0061LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0061 to        x:" hex_QW0061PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0061 to        x:" hex_QW0061PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0061 to        x:" hex_QW0061CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0061CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0061QI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0061LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0061PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0061PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0061CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0062 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0062:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0062,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0062 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0062 ,
    =00001 QW0062ST +1 , /* C - STATEMENT TYPE                 00000 */
  ,     /* QW0062CJ EQU x'000000F0' CREATE JAR                       */
  ,     /* QW0062CA EQU x'000000F1' CREATE ALIAS                     */
  ,     /* QW0062CX EQU x'000000F2' CREATE AUX TABLE                 */
  ,     /* QW0062CT EQU x'000000F3' CREATE TABLE                     */
  ,     /* QW0062CL EQU x'000000F4' CREATE GLOBAL TEMPORARY TABLE    */
  ,     /* QW0062CI EQU x'000000F5' CREATE INDEX                     */
  ,     /* QW0062CF EQU x'000000F6' CREATE FUNCTION                  */
  ,     /* QW0062CB EQU x'000000F7' CREATE TABLESPACE                */
  ,     /* QW0062CP EQU x'000000F8' CREATE PROCEDURE                 */
  ,     /* QW0062CS EQU x'000000F9' CREATE SYNONYM                   */
  ,     /* QW0062CD EQU x'000000FB' CREATE DATABASE                  */
  ,     /* QW0062CE EQU x'000000FC' CREATE DISTINCT TYPE             */
  ,     /* QW0062CG EQU x'000000FD' CREATE STORAGE GROUP             */
  ,     /* QW0062CR EQU x'000000FE' CREATE TRIGGER                   */
  ,     /* QW0062CV EQU x'000000FF' CREATE VIEW                      */
  ,     /* QW0062CQ EQU x'000000C0' CREATE SEQUENCES                 */
  ,     /* QW0062RC EQU x'000000B1' CREATE ROLE                      */
  ,     /* QW0062CU EQU x'000000B2' CREATE TRUSTED CONTEXT           */
  ,     /* QW0062DJ EQU x'00000000' DROP JAR                         */
  ,     /* QW0062DA EQU x'00000000' DROP ALIAS                       */
  ,     /* QW0062DT EQU x'00000000' DROP TABLE                       */
  ,     /* QW0062DI EQU x'00000000' DROP INDEX                       */
  ,     /* QW0062DB EQU x'00000000' DROP TABLESPACE                  */
  ,     /* QW0062DF EQU x'00000000' DROP UDF                         */
  ,     /* QW0062DS EQU x'00000000' DROP SYNONYM                     */
  ,     /* QW0062DP EQU x'000000EA' DROP PROCEDURE                   */
  ,     /* QW0062DD EQU x'000000EB' DROP DATABASE                    */
  ,     /* QW0062DE EQU x'000000EC' DROP DISTINCT TYPE               */
  ,     /* QW0062DG EQU x'000000ED' DROP STORAGE GROUP               */
  ,     /* QW0062DR EQU x'000000EE' DROP TRIGGER                     */
  ,     /* QW0062DV EQU x'000000EF' DROP VIEW                        */
  ,     /* QW0062DK EQU x'000000D2' DROP PACKAGE                     */
  ,     /* QW0062DQ EQU x'000000B0' DROP SEQUENCES                   */
  ,     /* QW0062DU EQU x'000000B3' DROP TRUSTED CONTEXT             */
  ,     /* QW0062RD EQU x'000000B4' DROP ROLE                        */
  ,     /* QW0062AG EQU x'000000DD' ALTER STORAGE GROUP              */
  ,     /* QW0062AT EQU x'000000D3' ALTER TABLE                      */
  ,     /* QW0062AF EQU x'000000D4' ALTER FUNCTION                   */
  ,     /* QW0062AI EQU x'000000D5' ALTER INDEX                      */
  ,     /* QW0062AP EQU x'000000D6' ALTER PROCEDURE                  */
  ,     /* QW0062AB EQU x'000000D7' ALTER TABLESPACE                 */
  ,     /* QW0062AD EQU x'000000DB' ALTER DATABASE                   */
  ,     /* QW0062AQ EQU x'000000A0' ALTER SEQUENCES                  */
  ,     /* QW0062AJ EQU x'000000A2' ALTER JAR                        */
  ,     /* QW0062AV EQU x'000000DA' ALTER VIEW                       */
  ,     /* QW0062AU EQU x'000000B5' ALTER TRUSTED CONTEXT            */
  ,     /* QW0062DC EQU x'000000C1' DECLARE GLOBAL TEMPORARY TABLE   */
  ,     /* QW0062CO EQU x'000000C3' COMMENT ON                       */
  ,     /* QW0062LO EQU x'000000C5' LABEL ON                         */
  ,     /* QW0062LK EQU x'000000C7' LOCK                             */
  ,     /* QW0062GR EQU x'000000C9' GRANT                            */
  ,     /* QW0062RV EQU x'000000CB' REVOKE                           */
  ,     /* QW0062RX EQU x'000000CC' RENAME INDEX                     */
  ,     /* QW0062RT EQU x'000000CD' RENAME TABLE                     */
  ,     /* QW0062HL EQU x'000000CE' HOLD LOCATOR                     */
  ,     /* QW0062FL EQU x'000000CF' FREE LOCATOR                     */
    =00002 QW0062OT +1 , /* C - OBJECT TYPE                    00001 */
  ,     /* QW0062T EQU x'00000000' TABLE                             */
  ,     /* QW0062I EQU x'000000C9' INDEX                             */
  ,     /* QW0062P EQU x'000000D7' TABLESPACE                        */
  ,     /* QW0062Y EQU x'00000000' SYNONYM                           */
  ,     /* QW0062D EQU x'000000C4' DATA BASE                         */
  ,     /* QW0062S EQU x'00000000' STORAGE GROUP                     */
  ,     /* QW0062V EQU x'00000000' VIEW                              */
  ,     /* QW0062A EQU x'000000C1' ALIAS                             */
  ,     /* QW0062K EQU x'000000D2' PACKAGE                           */
  ,     /* QW0062F EQU x'000000C6' FUNCTION                          */
  ,     /* QW0062O EQU x'000000D6' STORED PROCEDURE                  */
  ,     /* QW0062R EQU x'000000D9' TRIGGER                           */
  ,     /* QW0062E EQU x'000000C5' DISTINCT TYPE                     */
  ,     /* QW0062J EQU x'000000D1' JAR                               */
  ,     /* QW0062Q EQU x'000000D8' SEQUENCES                         */
  ,     /* QW0062U EQU x'00000000' TRUSTED CONTEXT                   */
  ,     /* QW0062L EQU x'000000D3' ROLE                              */
  ,     /* QW0062N EQU x'000000D5' NONE                              */
    =00003 QW0062OL +2 , /* X - OBJECT NAME LENGTH+2           00002 */
,/* =00005 QW0062ON +0 ,    C - %U OBJECT NAME                 00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0062ST = c2x(QW0062ST)
  hex_QW0062OT = c2x(QW0062OT)
  hex_QW0062OL = c2x(QW0062OL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0062",desired_dsect) > 0)) then do
    void_rc = queue_QW0062_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0062:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0062_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0062:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0062ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBJECT TYPE                  x:" hex_QW0062OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBJECT NAME LENGTH+2         x:" hex_QW0062OL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0063 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0063:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0063,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0063 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0063 ,
    =00001 QW0063OT +1 , /* X - PARSER OPTIONS AND HOST LANGUA 00000 */
  ,     /* QW0063OQ EQU x'00000080' OPTION - APOST(0) OR QUOTE(1)    */
  ,     /* QW0063OD EQU x'00000040' OPTION - PERIOD(0) OR COMMA(1)   */
  ,     /* QW0063OR EQU x'00000020' OPTION - APOSTSQL(0) OR QUOTESQL */
  ,     /* QW0063OM EQU x'00000010' OPTION - MIXED=NO (0) OR MIXED=Y */
  ,     /* QW0063OH EQU x'00000007' OPTION - HOST LANGUAGE BIT MASK  */
  ,     /* QW0063OA EQU x'00000001' OPTION - HOST ASSEMBLER LANGUAGE */
  ,     /* QW0063OC EQU x'00000002' OPTION - HOST COBOL              */
  ,     /* QW0063OP EQU x'00000003' OPTION - HOST PL/I               */
  ,     /* QW0063OS EQU x'00000004' OPTION - DYNAMIC SQL             */
  ,     /* QW0063OF EQU x'00000005' OPTION - HOST FORTRAN            */
  ,     /* QW0063O2 EQU x'00000006' OPTION - HOST COB2               */
  ,     /* QW006307 EQU x'00000007' LOOK AT FIELD QW0063HL TO DETERM */
    =00002 QW0063HL +1 , /* X - HOST LANGUAGE SECOND FIELD     00001 */
  ,     /* QW0063HB EQU x'000000C2' OPTION - HOST ASSEMBLER          */
  ,     /* QW0063HC EQU x'000000C3' OPTION - HOST COBOL              */
  ,     /* QW0063HD EQU x'000000C4' OPTION - HOST C                  */
  ,     /* QW0063HF EQU x'000000C6' OPTION - HOST FORTRAN            */
  ,     /* QW0063HP EQU x'000000D7' OPTION - HOST PL/I               */
  ,     /* QW0063H2 EQU x'000000F2' OPTION - HOST COBOL II           */
  ,     /* QW0063H3 EQU x'000000F3' OPTION - HOST IBM COBOL          */
  ,     /* QW0063H4 EQU x'000000F4' OPTION - HOST C++                */
    =00003 QW0063LL +2 , /* X - LL - LENGTH OF FOLLOWING FIELD 00002 */
,/* =00005 QW0063ST +0 ,    C - %U SQL STATEMENT REQUESTED TO  00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0063OT = c2x(QW0063OT)
  hex_QW0063HL = c2x(QW0063HL)
  hex_QW0063LL = c2x(QW0063LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0063",desired_dsect) > 0)) then do
    void_rc = queue_QW0063_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0063:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0063_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0063:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARSER OPTIONS AND HOST LANG x:" hex_QW0063OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOST LANGUAGE SECOND FIELD   x:" hex_QW0063HL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LL - LENGTH OF FOLLOWING FIE x:" hex_QW0063LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0064 length is 00070
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0064:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0064,112)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0064 Length: 112"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0064 ,
    =00001 QW0064LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0064CI +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0064PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0064TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0064OS +2 , /* C - Reserved                       0003C */
    =00063 QW0064ST +1 , /* C - STATEMENT TYPE                 0003E */
  ,     /* QW0064PC EQU x'00000081' PREPARE TYPE, CURSOR SECTION     */
  ,     /* QW0064P EQU x'00000080' PREPARE TYPE,NON CURSORSECTION    */
    =00064 QW0064CL +2 , /* X - CURSOR NAME LENGTH             0003F */
    =00066 QW0064CN +18 , /* C - %U CURSOR NAME                00041 */
    =00084 RSVD0001 +1 , /* C - Reserved                       00053 */
    =00085 QW0064SN +4 , /* F - STATEMENT NUMBER               00054 */
    =00089 QW0064LN_Off +2 , /* H - Offset from QW0064 to      00058 */
    =00091 QW0064CI_Off +2 , /* H - Offset from QW0064 to      0005A */
    =00093 QW0064PN_Off +2 , /* H - Offset from QW0064 to      0005C */
    =00095 QW0064CN_Off +2 , /* H - Offset from QW0064 to      0005E */
    =00097 QW0064CID +8 , /* X - QUERY COMMAND ID              00060 */
    =00105 QW0064QID +8 , /* X - QUERY INSTANCE ID             00068 */
    =00001 QW0064LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0064LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0064CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0064CI_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0064PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0064PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0064CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0064CN_Var +0 ,    C - %U CURSOR NAME             00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0064LN = c2x(QW0064LN)
  hex_QW0064CI = c2x(QW0064CI)
  hex_QW0064PN = c2x(QW0064PN)
  hex_QW0064TS = c2x(QW0064TS)
  hex_QW0064OS = c2x(QW0064OS)
  hex_QW0064ST = c2x(QW0064ST)
  hex_QW0064CL = c2x(QW0064CL)
  hex_QW0064CN = c2x(QW0064CN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0064SN = c2x(QW0064SN)
  hex_QW0064LN_Off = c2x(QW0064LN_Off)
  hex_QW0064CI_Off = c2x(QW0064CI_Off)
  hex_QW0064PN_Off = c2x(QW0064PN_Off)
  hex_QW0064CN_Off = c2x(QW0064CN_Off)
  hex_QW0064CID = c2x(QW0064CID)
  hex_QW0064QID = c2x(QW0064QID)
  hex_QW0064LN_Len = c2x(QW0064LN_Len)
  hex_QW0064CI_Len = c2x(QW0064CI_Len)
  hex_QW0064PN_Len = c2x(QW0064PN_Len)
  hex_QW0064CN_Len = c2x(QW0064CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0064",desired_dsect) > 0)) then do
    void_rc = queue_QW0064_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0064:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0064_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0064:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0064LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0064CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0064PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0064TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0064OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0064ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR NAME LENGTH           x:" hex_QW0064CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME               x:" hex_QW0064CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0064SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0064 to        x:" hex_QW0064LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0064 to        x:" hex_QW0064CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0064 to        x:" hex_QW0064PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0064 to        x:" hex_QW0064CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0064CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0064QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0064LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0064CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0064PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0064CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0065 length is 00078
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0065:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0065,120)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0065 Length: 120"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0065 ,
    =00001 QW0065LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0065PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0065PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0065TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0065OS +2 , /* C - Reserved                       0003C */
    =00063 QW0065ST +1 , /* C - STATEMENT TYPE                 0003E */
  ,     /* QW0065OC EQU x'00000091' OPEN TYPE                        */
    =00064 QW0065CL +2 , /* X - CURSOR NAME LENGTH +2          0003F */
    =00066 QW0065CN +18 , /* C - %U CURSOR NAME                00041 */
    =00084 QW0065I +1 , /* C - STATEMENT ISOLATION LEVEL       00053 */
  ,     /* QW0065RR EQU x'000000D9' RR ISOLATION LEVEL               */
  ,     /* QW0065RS EQU x'00000000' RS ISOLATION LEVEL               */
  ,     /* QW0065CS EQU x'00000000' CS ISOLATION LEVEL               */
  ,     /* QW0065UR EQU x'00000000' UR ISOLATION LEVEL               */
  ,     /* QW0065XR EQU x'00000000' RR ISOLATION LEVEL WITH X-LOCK   */
  ,     /* QW0065XS EQU x'000000D3' RS ISOLATION LEVEL WITH X-LOCK   */
    =00085 QW0065RO +2 , /* X - REOPTIMIZATION                 00054 */
    =00087 RSVD0001 +2 , /* C - Reserved                       00056 */
    =00089 QW0065SN +4 , /* F - STATEMENT NUMBER               00058 */
    =00093 QW0065SC +1 , /* C - Cursor SCROLLABILITY           0005C */
  ,     /* QW0065SS EQU x'00000000' Cursor declared SCROLL           */
  ,     /* QW0065NS EQU x'00000040' Cursor declared non-SCROLL       */
    =00094 QW0065SV +1 , /* C - Cursor SENSITIVITY             0005D */
  ,     /* QW0065SE EQU x'00000000' Cursor attribute SENSITIVE       */
  ,     /* QW0065SI EQU x'000000C9' Cursor attribute INSENSITIVE     */
  ,     /* QW0065SU EQU x'00000040' Cursor sensitivity unspecified   */
    =00095 QW0065RT +1 , /* C - Cursor result table type       0005E */
  ,     /* QW0065SA EQU x'00000000' Cursor result table STATIC       */
  ,     /* QW0065DY EQU x'000000C4' Cursor result table DYNAMIC      */
  ,     /* QW0065RU EQU x'00000040' Cursor result table unspecified  */
    =00096 RSVD0002 +1 , /* C - Reserved                       0005F */
    =00097 QW0065LN_Off +2 , /* H - Offset from QW0065 to      00060 */
    =00099 QW0065PC_Off +2 , /* H - Offset from QW0065 to      00062 */
    =00101 QW0065PN_Off +2 , /* H - Offset from QW0065 to      00064 */
    =00103 QW0065CN_Off +2 , /* H - Offset from QW0065 to      00066 */
    =00105 QW0065CID +8 , /* X - QUERY COMMAND ID              00068 */
    =00113 QW0065QID +8 , /* X - QUERY INSTANCE ID             00070 */
  ,     /* QW0065R0 EQU x'00000000' REOPTIMIZATION DID NOT OCCUR     */
  ,     /* QW0065R1 EQU x'00000001' REOPTIMIZATION OCCURRED FOR INPU */
    =00001 QW0065LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0065LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0065PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0065PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0065PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0065PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0065CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0065CN_Var +0 ,    C - %U CURSOR NAME             00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0065LN = c2x(QW0065LN)
  hex_QW0065PC = c2x(QW0065PC)
  hex_QW0065PN = c2x(QW0065PN)
  hex_QW0065TS = c2x(QW0065TS)
  hex_QW0065OS = c2x(QW0065OS)
  hex_QW0065ST = c2x(QW0065ST)
  hex_QW0065CL = c2x(QW0065CL)
  hex_QW0065CN = c2x(QW0065CN)
  hex_QW0065I = c2x(QW0065I)
  hex_QW0065RO = c2x(QW0065RO)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0065SN = c2x(QW0065SN)
  hex_QW0065SC = c2x(QW0065SC)
  hex_QW0065SV = c2x(QW0065SV)
  hex_QW0065RT = c2x(QW0065RT)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0065LN_Off = c2x(QW0065LN_Off)
  hex_QW0065PC_Off = c2x(QW0065PC_Off)
  hex_QW0065PN_Off = c2x(QW0065PN_Off)
  hex_QW0065CN_Off = c2x(QW0065CN_Off)
  hex_QW0065CID = c2x(QW0065CID)
  hex_QW0065QID = c2x(QW0065QID)
  hex_QW0065LN_Len = c2x(QW0065LN_Len)
  hex_QW0065PC_Len = c2x(QW0065PC_Len)
  hex_QW0065PN_Len = c2x(QW0065PN_Len)
  hex_QW0065CN_Len = c2x(QW0065CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0065",desired_dsect) > 0)) then do
    void_rc = queue_QW0065_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0065:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0065_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0065:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0065LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0065PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0065PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0065TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0065OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0065ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR NAME LENGTH +2        x:" hex_QW0065CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME               x:" hex_QW0065CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT ISOLATION LEVEL    x:" hex_QW0065I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPTIMIZATION               x:" hex_QW0065RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0065SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Cursor SCROLLABILITY         x:" hex_QW0065SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Cursor SENSITIVITY           x:" hex_QW0065SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Cursor result table type     x:" hex_QW0065RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0065 to        x:" hex_QW0065LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0065 to        x:" hex_QW0065PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0065 to        x:" hex_QW0065PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0065 to        x:" hex_QW0065CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0065CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0065QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0065LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0065PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0065PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0065CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0066 length is 00070
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0066:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0066,112)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0066 Length: 112"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0066 ,
    =00001 QW0066LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0066PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0066PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0066TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0066OS +2 , /* C - Reserved                       0003C */
    =00063 QW0066ST +1 , /* C - STATEMENT TYPE                 0003E */
  ,     /* QW0066OC EQU x'000000A1' CLOSE TYPE                       */
    =00064 QW0066CL +2 , /* X - CURSOR NAME LENGTH             0003F */
    =00066 QW0066CN +18 , /* C - %U CURSOR NAME                00041 */
    =00084 RSVD0001 +1 , /* C - Reserved                       00053 */
    =00085 QW0066SN +4 , /* F - STATEMENT NUMBER               00054 */
    =00089 QW0066LN_Off +2 , /* H - Offset from QW0066 to      00058 */
    =00091 QW0066PC_Off +2 , /* H - Offset from QW0066 to      0005A */
    =00093 QW0066PN_Off +2 , /* H - Offset from QW0066 to      0005C */
    =00095 QW0066CN_Off +2 , /* H - Offset from QW0066 to      0005E */
    =00097 QW0066CID +8 , /* X - QUERY COMMAND ID              00060 */
    =00105 QW0066QID +8 , /* X - QUERY INSTANCE ID             00068 */
    =00001 QW0066LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0066LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0066PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0066PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0066PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0066PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0066CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0066CN_Var +0 ,    C - %U CURSOR NAME             00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0066LN = c2x(QW0066LN)
  hex_QW0066PC = c2x(QW0066PC)
  hex_QW0066PN = c2x(QW0066PN)
  hex_QW0066TS = c2x(QW0066TS)
  hex_QW0066OS = c2x(QW0066OS)
  hex_QW0066ST = c2x(QW0066ST)
  hex_QW0066CL = c2x(QW0066CL)
  hex_QW0066CN = c2x(QW0066CN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0066SN = c2x(QW0066SN)
  hex_QW0066LN_Off = c2x(QW0066LN_Off)
  hex_QW0066PC_Off = c2x(QW0066PC_Off)
  hex_QW0066PN_Off = c2x(QW0066PN_Off)
  hex_QW0066CN_Off = c2x(QW0066CN_Off)
  hex_QW0066CID = c2x(QW0066CID)
  hex_QW0066QID = c2x(QW0066QID)
  hex_QW0066LN_Len = c2x(QW0066LN_Len)
  hex_QW0066PC_Len = c2x(QW0066PC_Len)
  hex_QW0066PN_Len = c2x(QW0066PN_Len)
  hex_QW0066CN_Len = c2x(QW0066CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0066",desired_dsect) > 0)) then do
    void_rc = queue_QW0066_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0066:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0066_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0066:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0066LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0066PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0066PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0066TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0066OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE               x:" hex_QW0066ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR NAME LENGTH           x:" hex_QW0066CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME               x:" hex_QW0066CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0066SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0066 to        x:" hex_QW0066LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0066 to        x:" hex_QW0066PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0066 to        x:" hex_QW0066PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0066 to        x:" hex_QW0066CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0066CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0066QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0066LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0066PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0066PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0066CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0067 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0067:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0067,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0067 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0067 ,
,/* =00001 RSVD0001 +0 ,    C - (S)                            00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0067",desired_dsect) > 0)) then do
    void_rc = queue_QW0067_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0067:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0067_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0067:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0068 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0068:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0068,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0068 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0068 ,
    =00001 QW0068FR +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0068CK +1 , /* X - CALLER S PSW KEY               00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0068FR = c2x(QW0068FR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0068CK = c2x(QW0068CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0068",desired_dsect) > 0)) then do
    void_rc = queue_QW0068_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0068:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0068_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0068:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0068FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALLER S PSW KEY             x:" hex_QW0068CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0069 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0069:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0069,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0069 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0069 ,
    =00001 QW0069RT +4 , /* F - (S)                            00000 */
    =00005 QW0069RS +4 , /* F - (S)                            00004 */
    =00009 QW0069NI +16 , /* C - (S)                           00008 */
    =00025 QW0069FR +4 , /* A - (S)                            00018 */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0069RT = c2x(QW0069RT)
  hex_QW0069RS = c2x(QW0069RS)
  hex_QW0069NI = c2x(QW0069NI)
  hex_QW0069FR = c2x(QW0069FR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0069",desired_dsect) > 0)) then do
    void_rc = queue_QW0069_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0069:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0069_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0069:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0069RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0069RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0069NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0069FR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0070 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0070:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0070,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0070 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0070 ,
    =00001 QW0070FR +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0070CK +1 , /* X - CALLER S PSW KEY               00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0070FR = c2x(QW0070FR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0070CK = c2x(QW0070CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0070",desired_dsect) > 0)) then do
    void_rc = queue_QW0070_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0070:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0070_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0070:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0070FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALLER S PSW KEY             x:" hex_QW0070CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0071 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0071:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0071,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0071 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0071 ,
    =00001 QW0071RT +4 , /* F - (S)                            00000 */
    =00005 QW0071RS +4 , /* F - (S)                            00004 */
    =00009 QW0071NI +16 , /* C - (S)                           00008 */
    =00025 QW0071FR +4 , /* A - (S)                            00018 */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0071RT = c2x(QW0071RT)
  hex_QW0071RS = c2x(QW0071RS)
  hex_QW0071NI = c2x(QW0071NI)
  hex_QW0071FR = c2x(QW0071FR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0071",desired_dsect) > 0)) then do
    void_rc = queue_QW0071_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0071:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0071_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0071:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0071RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0071RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0071NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0071FR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0072 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0072:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0072,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0072 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0072 ,
    =00001 QW0072RN +8 , /* C - RESOURCE NAME ALIAS PLAN NAME  00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0072RN = c2x(QW0072RN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0072",desired_dsect) > 0)) then do
    void_rc = queue_QW0072_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0072:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0072_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0072:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESOURCE NAME ALIAS PLAN NAM x:" hex_QW0072RN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0073 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0073:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0073,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0073 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0073 ,
    =00001 QW0073RT +4 , /* F - (S)                            00000 */
    =00005 QW0073RS +4 , /* F - (S)                            00004 */
    =00009 RSVD0001 +1 , /* X - BINARY ZERO                    00008 */
    =00010 QW0073IN +3 , /* C - (S)                            00009 */
    =00013 QW0073CT +8 , /* C - (S)                            0000C */
    =00021 QW0073WT +4 , /* F - (S)                            00014 */
    =00025 QW0073QL +4 , /* F - QUEUE LENGTH                   00018 */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0073RT = c2x(QW0073RT)
  hex_QW0073RS = c2x(QW0073RS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0073IN = c2x(QW0073IN)
  hex_QW0073CT = c2x(QW0073CT)
  hex_QW0073WT = c2x(QW0073WT)
  hex_QW0073QL = c2x(QW0073QL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0073",desired_dsect) > 0)) then do
    void_rc = queue_QW0073_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0073:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0073_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0073:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0073RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0073RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0073IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0073CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0073WT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUEUE LENGTH                 x:" hex_QW0073QL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0074 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0074:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0074,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0074 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0074 ,
    .           /* End of DSECT */
  /* next byte at 29 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0074",desired_dsect) > 0)) then do
    void_rc = queue_QW0074_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0074:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0074_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0074:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0075 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0075:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0075,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0075 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0075 ,
    =00001 QW0075RT +4 , /* F - (S)                            00000 */
    =00005 QW0075RS +4 , /* F - (S)                            00004 */
    =00009 QW0075CO +4 , /* C - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0075RT = c2x(QW0075RT)
  hex_QW0075RS = c2x(QW0075RS)
  hex_QW0075CO = c2x(QW0075CO)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0075",desired_dsect) > 0)) then do
    void_rc = queue_QW0075_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0075:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0075_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0075:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0075RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0075RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0075CO
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0076 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0076:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0076,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0076 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0076 ,
    =00001 QW0076SS +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C -                                00004 */
    =00008 QW0076CK +1 , /* X - SSI CALLER S PSW KEY           00007 */
    =00009 QW0076AM +4 , /* A - (S)                            00008 */
    =00013 QW0076FC +4 , /* F - (S)                            0000C */
    =00017 QW0076F1 +1 , /* X - FLAGS                          00010 */
  ,     /* QW0076PB EQU x'00000080' INTERFACE CALLER S P-BIT         */
  ,     /* QW0076AB EQU x'00000040' INTERFACE CALLER S A-BIT         */
  ,     /* QW0076AE EQU x'00000020' ABNORMAL END OF MEMORY           */
    =00018 RSVD0002 +3 , /* C - BINARY ZERO                    00011 */
    =00021 QW0076AS +4 , /* A - (S)                            00014 */
    =00025 RSVD0003 +2 , /* H -                                00018 */
    =00027 QW0076ID +2 , /* H - EOM ASID                       0001A */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0076SS = c2x(QW0076SS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0076CK = c2x(QW0076CK)
  hex_QW0076AM = c2x(QW0076AM)
  hex_QW0076FC = c2x(QW0076FC)
  hex_QW0076F1 = c2x(QW0076F1)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0076AS = c2x(QW0076AS)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0076ID = c2x(QW0076ID)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0076",desired_dsect) > 0)) then do
    void_rc = queue_QW0076_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0076:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0076_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0076:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0076SS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SSI CALLER S PSW KEY         x:" hex_QW0076CK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0076AM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0076FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0076F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0076AS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EOM ASID                     x:" hex_QW0076ID
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0077 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0077:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0077,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0077 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0077 ,
    =00001 QW0077R0 +4 , /* F - RETURN CODE (ALWAYS ZERO)      00000 */
    =00005 QW0077PR +4 , /* C - PROCESSED EOM ( YES  ) -OR-    00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0077R0 = c2x(QW0077R0)
  hex_QW0077PR = c2x(QW0077PR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0077",desired_dsect) > 0)) then do
    void_rc = queue_QW0077_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0077:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0077_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0077:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE (ALWAYS ZERO)    x:" hex_QW0077R0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROCESSED EOM ( YES  ) -OR-  x:" hex_QW0077PR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0078 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0078:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0078,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0078 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0078 ,
    =00001 QW0078AC +4 , /* A - ACE TO BE TERMINATED           00000 */
    =00005 QW0078AG +4 , /* A - (S)                            00004 */
    =00009 QW0078AS +4 , /* A - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0078AC = c2x(QW0078AC)
  hex_QW0078AG = c2x(QW0078AG)
  hex_QW0078AS = c2x(QW0078AS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0078",desired_dsect) > 0)) then do
    void_rc = queue_QW0078_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0078:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0078_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0078:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TO BE TERMINATED         x:" hex_QW0078AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0078AG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0078AS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0079 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0079:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0079,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0079 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0079 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0079",desired_dsect) > 0)) then do
    void_rc = queue_QW0079_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0079:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0079_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0079:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0080 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0080:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0080,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0080 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0080 ,
    =00001 QW0080FR +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0080CK +1 , /* X - CALLER S PSW KEY               00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0080FR = c2x(QW0080FR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0080CK = c2x(QW0080CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0080",desired_dsect) > 0)) then do
    void_rc = queue_QW0080_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0080:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0080_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0080:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0080FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALLER S PSW KEY             x:" hex_QW0080CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0081 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0081:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0081,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0081 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0081 ,
    =00001 QW0081RT +4 , /* F - (S)                            00000 */
    =00005 QW0081RS +4 , /* F - (S)                            00004 */
    =00009 RSVD0001 +2 , /* C - BINARY ZERO                    00008 */
    =00011 QW0081RQ +2 , /* C - (S)                            0000A */
    =00013 RSVD0002 +2 , /* C - BINARY ZERO                    0000C */
    =00015 QW0081CD +2 , /* C - (S)                            0000E */
    =00017 QW0081EC +4 , /* A - (S)                            00010 */
    =00021 QW0081FR +4 , /* A - (S)                            00014 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0081RT = c2x(QW0081RT)
  hex_QW0081RS = c2x(QW0081RS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0081RQ = c2x(QW0081RQ)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0081CD = c2x(QW0081CD)
  hex_QW0081EC = c2x(QW0081EC)
  hex_QW0081FR = c2x(QW0081FR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0081",desired_dsect) > 0)) then do
    void_rc = queue_QW0081_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0081:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0081_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0081:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0081RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0081RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0081RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0081CD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0081EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0081FR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0082 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0082:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0082,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0082 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0082 ,
    =00001 QW0082SS +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0082CK +1 , /* X - SSI CALLER S PSW KEY           00007 */
    =00009 QW0082AM +4 , /* A - (S)                            00008 */
    =00013 QW0082FC +4 , /* F - (S)                            0000C */
    =00017 QW0082F1 +1 , /* X - FLAGS                          00010 */
  ,     /* QW0082PB EQU x'00000080' SSI CALLER S P-BIT (PROB STATE)  */
  ,     /* QW0082AB EQU x'00000040' SSI CALLER S A-BIT (AMODE 31)    */
    =00018 RSVD0002 +3 , /* C - BINARY ZERO                    00011 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0082SS = c2x(QW0082SS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0082CK = c2x(QW0082CK)
  hex_QW0082AM = c2x(QW0082AM)
  hex_QW0082FC = c2x(QW0082FC)
  hex_QW0082F1 = c2x(QW0082F1)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0082",desired_dsect) > 0)) then do
    void_rc = queue_QW0082_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0082:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0082_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0082:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0082SS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SSI CALLER S PSW KEY         x:" hex_QW0082CK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0082AM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0082FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0082F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0083 length is 00084
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0083:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0083,132)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0083 Length: 132"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0083 ,
    =00001 QW0083RT +4 , /* F - (S)                            00000 */
    =00005 QW0083RS +4 , /* F - (S)                            00004 */
    =00009 QW0083AD +1 , /* X - ACCESS DENIED INDICATORS       00008 */
  ,     /* QW0083AF EQU x'00000080' ACCESS DENIED BY SAF/SECURITY SY */
  ,     /* QW0083AX EQU x'00000040' ACCESS DENIED BY IDENTIFY AUTH E */
    =00010 QW0083RO +3 , /* C - REC COORD OPTION ( YES | NO  ) 00009 */
    =00013 QW0083CT +8 , /* C - (S)                            0000C */
    =00021 QW0083QD +8 , /* C - CURRENT SQL ID                 00014 */
    =00029 QW0083OP +8 , /* C - ORIGINAL PRIMARY AUTHORIZATION 0001C */
    =00037 RSVD0001 +2 , /* H - RESERVED                       00024 */
    =00039 QW0083SA_Num +2 , /* H - Number of Secondary Author 00026 */
    =00041 QW0083SA_Off +2 , /* H - Offset from QW0083 to the  00028 */
    =00043 QW0083UT +80 , /* C - ACEE UTOKEN                   0002A */
    =00123 QW0083SL +2 , /* H - LENGTH OF SECONDARY AUTHORIZAT 0007A */
    =00125 QW0083SA +8 , /* C - %U SECONDARY AUTHORIZATION IDS 0007C */
    =00001 QW0083SA_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0083SA_Var +0 ,    C - %U SECONDARY AUTHORIZATION 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0083RT = c2x(QW0083RT)
  hex_QW0083RS = c2x(QW0083RS)
  hex_QW0083AD = c2x(QW0083AD)
  hex_QW0083RO = c2x(QW0083RO)
  hex_QW0083CT = c2x(QW0083CT)
  hex_QW0083QD = c2x(QW0083QD)
  hex_QW0083OP = c2x(QW0083OP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0083SA_Num = c2x(QW0083SA_Num)
  hex_QW0083SA_Off = c2x(QW0083SA_Off)
  hex_QW0083UT = c2x(QW0083UT)
  hex_QW0083SL = c2x(QW0083SL)
  hex_QW0083SA = c2x(QW0083SA)
  hex_QW0083SA_Len = c2x(QW0083SA_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0083",desired_dsect) > 0)) then do
    void_rc = queue_QW0083_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0083:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0083_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0083:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0083RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0083RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS DENIED INDICATORS     x:" hex_QW0083AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REC COORD OPTION ( YES | NO  x:" hex_QW0083RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0083CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT SQL ID               x:" hex_QW0083QD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ORIGINAL PRIMARY AUTHORIZATI x:" hex_QW0083OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of Secondary Authoriz x:" hex_QW0083SA_Num
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0083 to the fi x:" hex_QW0083SA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACEE UTOKEN                  x:" hex_QW0083UT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF SECONDARY AUTHORIZ x:" hex_QW0083SL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SECONDARY AUTHORIZATION I x:" hex_QW0083SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0083SA_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0084 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0084:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0084,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0084 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0084 ,
    =00001 QW0084FR +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0084CK +1 , /* X - CALLER S PSW KEY               00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0084FR = c2x(QW0084FR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0084CK = c2x(QW0084CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0084",desired_dsect) > 0)) then do
    void_rc = queue_QW0084_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0084:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0084_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0084:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0084FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALLER S PSW KEY             x:" hex_QW0084CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0085 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0085:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0085,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0085 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0085 ,
    =00001 QW0085RT +4 , /* F - (S)                            00000 */
    =00005 QW0085RS +4 , /* F - (S)                            00004 */
    =00009 QW0085NI +16 , /* C - (S)                           00008 */
    =00025 QW0085FR +4 , /* A - (S)                            00018 */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0085RT = c2x(QW0085RT)
  hex_QW0085RS = c2x(QW0085RS)
  hex_QW0085NI = c2x(QW0085NI)
  hex_QW0085FR = c2x(QW0085FR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0085",desired_dsect) > 0)) then do
    void_rc = queue_QW0085_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0085:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0085_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0085:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0085RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0085RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0085NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0085FR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0086 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0086:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0086,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0086 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0086 ,
    =00001 QW0086FR +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0086CK +1 , /* X - CALLER S PSW KEY               00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0086FR = c2x(QW0086FR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0086CK = c2x(QW0086CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0086",desired_dsect) > 0)) then do
    void_rc = queue_QW0086_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0086:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0086_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0086:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0086FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALLER S PSW KEY             x:" hex_QW0086CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0087 length is 0007E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0087:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0087,126)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0087 Length: 126"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0087 ,
    =00001 QW0087RT +4 , /* F - (S)                            00000 */
    =00005 QW0087RS +4 , /* F - (S)                            00004 */
    =00009 QW0087AD +1 , /* X - ACCESS DENIED INDICATOR        00008 */
  ,     /* QW0087AX EQU x'00000040' ACCESS DENIED BY SIGNON AUTH EXI */
    =00010 RSVD0001 +3 , /* X - PADDING FOR ALIGNMENT.  RESERV 00009 */
    =00013 QW0087QD +8 , /* C - CURRENT SQL ID                 0000C */
    =00021 QW0087OP +8 , /* C - ORIGINAL PRIMARY AUTHORIZATION 00014 */
    =00029 RSVD0002 +2 , /* H - RESERVED                       0001C */
    =00031 RSVD0003 +2 , /* H - RESERVED                       0001E */
    =00033 QW0087SA_Num +2 , /* H - Number of Secondary Author 00020 */
    =00035 QW0087SA_Off +2 , /* H - Offset from QW0087 to the  00022 */
    =00037 QW0087UT +80 , /* C - ACEE UTOKEN                   00024 */
    =00117 QW0087SL +2 , /* H - LENGTH OF SECONDARY AUTHORIZAT 00074 */
    =00119 QW0087SA +8 , /* C - SECONDARY AUTHORIZATION IDENTI 00076 */
    =00001 QW0087SA_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0087SA_Var +0 ,    C - %U SECONDARY AUTHORIZATION 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0087RT = c2x(QW0087RT)
  hex_QW0087RS = c2x(QW0087RS)
  hex_QW0087AD = c2x(QW0087AD)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0087QD = c2x(QW0087QD)
  hex_QW0087OP = c2x(QW0087OP)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0087SA_Num = c2x(QW0087SA_Num)
  hex_QW0087SA_Off = c2x(QW0087SA_Off)
  hex_QW0087UT = c2x(QW0087UT)
  hex_QW0087SL = c2x(QW0087SL)
  hex_QW0087SA = c2x(QW0087SA)
  hex_QW0087SA_Len = c2x(QW0087SA_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0087",desired_dsect) > 0)) then do
    void_rc = queue_QW0087_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0087:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0087_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0087:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0087RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0087RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS DENIED INDICATOR      x:" hex_QW0087AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PADDING FOR ALIGNMENT.  RESE x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT SQL ID               x:" hex_QW0087QD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ORIGINAL PRIMARY AUTHORIZATI x:" hex_QW0087OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of Secondary Authoriz x:" hex_QW0087SA_Num
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0087 to the fi x:" hex_QW0087SA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACEE UTOKEN                  x:" hex_QW0087UT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF SECONDARY AUTHORIZ x:" hex_QW0087SL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECONDARY AUTHORIZATION IDEN x:" hex_QW0087SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0087SA_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0088 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0088:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0088,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0088 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0088 ,
    =00001 QW0088FR +4 , /* A - (S)                            00000 */
    =00005 RSVD0001 +3 , /* C - BINARY ZERO                    00004 */
    =00008 QW0088CK +1 , /* X - CALLER S PSW KEY               00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0088FR = c2x(QW0088FR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0088CK = c2x(QW0088CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0088",desired_dsect) > 0)) then do
    void_rc = queue_QW0088_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0088:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0088_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0088:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0088FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BINARY ZERO                  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALLER S PSW KEY             x:" hex_QW0088CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0089 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0089:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0089,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0089 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0089 ,
    =00001 QW0089RT +4 , /* F - (S)                            00000 */
    =00005 QW0089RS +4 , /* F - (S)                            00004 */
    =00009 QW0089FR +4 , /* A - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0089RT = c2x(QW0089RT)
  hex_QW0089RS = c2x(QW0089RS)
  hex_QW0089FR = c2x(QW0089FR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0089",desired_dsect) > 0)) then do
    void_rc = queue_QW0089_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0089:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0089_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0089:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0089RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0089RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0089FR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0090 length is 0000A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0090:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0090,10)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0090 Length: 10"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0090 ,
    =00001 QW0090LN +2 , /* H - LENGTH OF THE FOLLOWING TEXT + 00000 */
,/* =00003 QW0090CT +0 ,    C - COMMAND TEXT (VARIABLE LENGTH  00002 */
    =00003 RSVD0001 +4 , /* R - (S)                            00002 */
    =00007 RSVD0002 +4 , /* R - RESERVED (ALWAYS ZERO)         00006 */
    .           /* End of DSECT */
  /* next byte at 11 */
  hex_QW0090LN = c2x(QW0090LN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0090",desired_dsect) > 0)) then do
    void_rc = queue_QW0090_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0090:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0090_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0090:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE FOLLOWING TEXT x:" hex_QW0090LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED (ALWAYS ZERO)       x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0091 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0091:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0091,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0091 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0091 ,
    =00001 QW0091RC +4 , /* F - (S)                            00000 */
    =00005 QW0091RS +4 , /* F - (S)                            00004 */
    =00009 QW0091BA +4 , /* A - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0091RC = c2x(QW0091RC)
  hex_QW0091RS = c2x(QW0091RS)
  hex_QW0091BA = c2x(QW0091BA)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0091",desired_dsect) > 0)) then do
    void_rc = queue_QW0091_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0091:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0091_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0091:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0091RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0091RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0091BA
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0092 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0092:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0092,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0092 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0092 ,
    =00001 QW0092PL +2 , /* H - AMS COMMAND LENGTH + 2         00000 */
,/* =00003 QW0092P1 +0 ,    C - AMS COMMAND (160 BYTE MAX)     00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0092PL = c2x(QW0092PL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0092",desired_dsect) > 0)) then do
    void_rc = queue_QW0092_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0092:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0092_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0092:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMS COMMAND LENGTH + 2       x:" hex_QW0092PL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0093 length is 0005A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0093:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0093,90)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0093 Length: 90"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0093 ,
    =00001 QW0093RB +80 , /* C - (S)                           00000 */
    =00081 QW0093RF +4 , /* C - (S)                            00050 */
    =00085 QW0093RC +4 , /* F - (S)                            00054 */
    =00089 QW0093AC +2 , /* H - (S)                            00058 */
    .           /* End of DSECT */
  /* next byte at 91 */
  hex_QW0093RB = c2x(QW0093RB)
  hex_QW0093RF = c2x(QW0093RF)
  hex_QW0093RC = c2x(QW0093RC)
  hex_QW0093AC = c2x(QW0093AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0093",desired_dsect) > 0)) then do
    void_rc = queue_QW0093_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0093:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0093_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0093:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0093RB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0093RF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0093RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0093AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0094 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0094:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0094,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0094 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0094 ,
    =00001 QW0094RC +4 , /* F - (S)                            00000 */
    =00005 QW0094CK +8 , /* X - TOD CLOCK VALUE - WHEN SUSPEND 00004 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0094RC = c2x(QW0094RC)
  hex_QW0094CK = c2x(QW0094CK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0094",desired_dsect) > 0)) then do
    void_rc = queue_QW0094_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0094:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0094_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0094:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0094RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOD CLOCK VALUE - WHEN SUSPE x:" hex_QW0094CK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0095 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0095:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0095,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0095 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0095 ,
    .           /* End of DSECT */
  /* next byte at 13 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0095",desired_dsect) > 0)) then do
    void_rc = queue_QW0095_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0095:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0095_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0095:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0096 length is 0006C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0096:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0096,108)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0096 Length: 108"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0096 ,
    =00001 QW0096NR +4 , /* F - NUMBER OF RECORDS SORTED       00000 */
    =00005 QW0096DL +4 , /* F - SORT DATA AREA SIZE (IN BYTES) 00004 */
    =00009 QW0096KL +4 , /* F - SORT KEY SIZE (IN BYTES)       00008 */
    =00013 QW0096IN +4 , /* F - (S)                            0000C */
    =00017 QW0096RD +4 , /* F - (S)                            00010 */
    =00021 QW0096WR +4 , /* F - SORT RECORD SIZE (IN BYTES)    00014 */
    =00025 QW0096WF +4 , /* F - NUMBER OF WORK FILES USED      00018 */
    =00029 QW0096RC +2 , /* H - SORT RETURN CODE               0001C */
    =00031 RSVD0001 +2 , /* H - RESERVED                       0001E */
    =00033 QW0096IR +4 , /* F - NUMBER OF INITIAL WORKFILES    00020 */
    =00037 QW0096RL +4 , /* F - ROWS DELETED DUE TO MERGING    00024 */
    =00041 QW0096MP +4 , /* F - NUMBER OF MERGE PASSES DURING  00028 */
    =00045 QW0096TS +4 , /* C - THE TYPE OF SORT THAT OCCURRED 0002C */
  ,     /* QW0096CE EQU x'C5E2C140' ESA SORT - CONSTANT FOR QW0096TS */
  ,     /* QW0096CG EQU x'C5E2C1C7' GROUP BY SORT - CONSTANT FOR     */
  ,     /* QW0096CH EQU x'D9C3E8C3' GROUP BY SORT - CONSTANT FOR     */
  ,     /* QW0096CS EQU x'C5E2C1E3' ESA TAG SORT - CONSTANT FOR      */
  ,     /* QW0096CT EQU x'D9C5C740' NON ESA SORT - CONSTANT FOR QW00 */
  ,     /* QW0096CN EQU x'D5D6D5C5' NO SORT OCCURRED - CONSTANT FOR  */
    =00049 QW0096PN +18 , /* C - %U PROGRAM NAME FOR THE QUERY 00030 */
    =00067 QW0096PC +18 , /* C - %U PACKAGE COLLECTION ID FOR  00042 */
    =00085 QW0096SN +4 , /* F - THE STATEMENT NUMBER FOR THE Q 00054 */
    =00089 QW0096PW +4 , /* F - NUMBER OF WORKFILES (EQUAL TO  00058 */
    =00093 QW0096PP +1 , /* C - INDICATES IF PARTITIONING OF T 0005C */
    =00094 QW0096PO +1 , /* C - INDICATES IF ONLY PARTITIONING 0005D */
    =00095 QW0096PT +1 , /* C - INDICATES WHERE THE PARTITIONI 0005E */
  ,     /* QW0096CW EQU x'00000000' PARTITION WORKFILE - CONSTANT FO */
  ,     /* QW0096CM EQU x'000000D4' PARTITION LAST MERGE PASS -      */
  ,     /* QW0096CO EQU x'000000D6' PARTITION ONE RECORD - CONSTANT  */
  ,     /* QW0096CP EQU x'000000D7' PARTITION PRE-SORTED RECORDS -   */
  ,     /* QW0096CB EQU x'000000D5' NOT PARTITIONING RECORDS -       */
    =00096 RSVD0002 +1 , /* C - RESERVED                       0005F */
    =00097 QW0096SC +2 , /* H - NUMBER OF SORT COLUMNS         00060 */
    =00099 QW0096SK +2 , /* H - NUMBER OF SORT KEYS            00062 */
    =00101 QW0096RU +4 , /* F - (S)                            00064 */
    =00105 QW0096PN_Off +2 , /* H - Offset from QW0096 to      00068 */
    =00107 QW0096PC_Off +2 , /* H - Offset from QW0096 to      0006A */
    =00001 QW0096PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0096PN_Var +0 ,    C - %U PROGRAM NAME FOR THE QU 00002 */
    =00001 QW0096PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0096PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0096NR = c2x(QW0096NR)
  hex_QW0096DL = c2x(QW0096DL)
  hex_QW0096KL = c2x(QW0096KL)
  hex_QW0096IN = c2x(QW0096IN)
  hex_QW0096RD = c2x(QW0096RD)
  hex_QW0096WR = c2x(QW0096WR)
  hex_QW0096WF = c2x(QW0096WF)
  hex_QW0096RC = c2x(QW0096RC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0096IR = c2x(QW0096IR)
  hex_QW0096RL = c2x(QW0096RL)
  hex_QW0096MP = c2x(QW0096MP)
  hex_QW0096TS = c2x(QW0096TS)
  hex_QW0096PN = c2x(QW0096PN)
  hex_QW0096PC = c2x(QW0096PC)
  hex_QW0096SN = c2x(QW0096SN)
  hex_QW0096PW = c2x(QW0096PW)
  hex_QW0096PP = c2x(QW0096PP)
  hex_QW0096PO = c2x(QW0096PO)
  hex_QW0096PT = c2x(QW0096PT)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0096SC = c2x(QW0096SC)
  hex_QW0096SK = c2x(QW0096SK)
  hex_QW0096RU = c2x(QW0096RU)
  hex_QW0096PN_Off = c2x(QW0096PN_Off)
  hex_QW0096PC_Off = c2x(QW0096PC_Off)
  hex_QW0096PN_Len = c2x(QW0096PN_Len)
  hex_QW0096PC_Len = c2x(QW0096PC_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0096",desired_dsect) > 0)) then do
    void_rc = queue_QW0096_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0096:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0096_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0096:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RECORDS SORTED     x:" hex_QW0096NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT DATA AREA SIZE (IN BYTE x:" hex_QW0096DL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT KEY SIZE (IN BYTES)     x:" hex_QW0096KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0096IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0096RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT RECORD SIZE (IN BYTES)  x:" hex_QW0096WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WORK FILES USED    x:" hex_QW0096WF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT RETURN CODE             x:" hex_QW0096RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF INITIAL WORKFILES  x:" hex_QW0096IR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROWS DELETED DUE TO MERGING  x:" hex_QW0096RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MERGE PASSES DURIN x:" hex_QW0096MP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE TYPE OF SORT THAT OCCURR x:" hex_QW0096TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME FOR THE QUER x:" hex_QW0096PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID FOR x:" hex_QW0096PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE STATEMENT NUMBER FOR THE x:" hex_QW0096SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WORKFILES (EQUAL T x:" hex_QW0096PW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDICATES IF PARTITIONING OF x:" hex_QW0096PP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDICATES IF ONLY PARTITIONI x:" hex_QW0096PO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDICATES WHERE THE PARTITIO x:" hex_QW0096PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SORT COLUMNS       x:" hex_QW0096SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF SORT KEYS          x:" hex_QW0096SK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0096RU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0096 to        x:" hex_QW0096PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0096 to        x:" hex_QW0096PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0096PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0096PC_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0097 length is 00006
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0097:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0097,6)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0097 Length: 6"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0097 ,
    =00001 QW0097RC +4 , /* F - AMS RETURN CODE                00000 */
    =00005 QW0097PL +2 , /* H - AMS COMMAND LENGTH + 2         00004 */
,/* =00007 QW0097P1 +0 ,    C - AMS COMMAND (160 BYTE MAX)     00006 */
    .           /* End of DSECT */
  /* next byte at 7 */
  hex_QW0097RC = c2x(QW0097RC)
  hex_QW0097PL = c2x(QW0097PL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0097",desired_dsect) > 0)) then do
    void_rc = queue_QW0097_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0097:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0097_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0097:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMS RETURN CODE              x:" hex_QW0097RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMS COMMAND LENGTH + 2       x:" hex_QW0097PL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0098 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0098:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0098,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0098 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0098 ,
    =00001 QW0098T +1 , /* C - TYPE OF REQUEST                 00000 */
  ,     /* QW0098TF EQU x'000000C6' FREEMAIN                         */
  ,     /* QW0098TG EQU x'000000C7' GETMAIN                          */
    =00002 QW0098C +2 , /* C - TYPE OF CONDITION               00001 */
  ,     /* QW0098CC EQU x'0000D9C3' CONDITIONAL                      */
  ,     /* QW0098CU EQU x'0000D9E4' UNCONDITIONAL                    */
    =00004 QW0098SC +1 , /* X - (S)                            00003 */
    =00005 QW0098AM +4 , /* F - AMOUNT OF STORAGE REQUESTED    00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0098T = c2x(QW0098T)
  hex_QW0098C = c2x(QW0098C)
  hex_QW0098SC = c2x(QW0098SC)
  hex_QW0098AM = c2x(QW0098AM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0098",desired_dsect) > 0)) then do
    void_rc = queue_QW0098_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0098:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0098_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0098:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF REQUEST              x:" hex_QW0098T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF CONDITION            x:" hex_QW0098C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0098SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF STORAGE REQUESTED  x:" hex_QW0098AM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0099 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0099:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0099,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0099 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0099 ,
    =00001 QW0099RC +4 , /* F - (S)                            00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0099RC = c2x(QW0099RC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0099",desired_dsect) > 0)) then do
    void_rc = queue_QW0099_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0099:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0099_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0099:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0099RC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0100 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0100:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0100,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0100 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0100 ,
    =00001 QW0100T +1 , /* C - TYPE OF REQUEST                 00000 */
  ,     /* QW0100TC EQU x'000000C3' CONTRACT - SHORT FORM            */
  ,     /* QW0100TE EQU x'000000C5' EXPAND - SHORT FORM              */
  ,     /* QW0100TX EQU x'00000000' EXPAND - LONG FORM               */
  ,     /* QW0100TG EQU x'000000C7' GETMAIN - SHORT FORM             */
  ,     /* QW0100TF EQU x'000000C6' FREEMAIN - SHORT FORM            */
    =00002 QW0100C +2 , /* C - TYPE OF CONDITION               00001 */
  ,     /* QW0100CC EQU x'0000D9C3' CONDITIONAL                      */
  ,     /* QW0100CU EQU x'0000D9E4' UNCONDITIONAL                    */
    =00004 QW0100SC +1 , /* X - (S)                            00003 */
    =00005 QW0100AM +4 , /* F - AMOUNT OF STORAGE REQUESTED    00004 */
,/* =00009 QW0100PH +0 ,    C - (S)                            00008 */
    =00009 RSVD0001 +4 , /* F - (S)                            00008 */
    =00013 RSVD0002 +20 , /* C - (S)                           0000C */
,/* =00033 QW0100SF +0 ,    F - END OF SHORT FORM              00020 */
    =00033 QW0100SB +8 , /* X - STORE CLOCK BEFORE GETMAIN - T 00020 */
    =00041 QW0100SA +8 , /* X - STORE CLOCK AFTER  GETMAIN - T 00028 */
    =00049 QW0100RC +4 , /* F - RETURN CODE - TYPE X           00030 */
,/* =00053 QW0100LF +0 ,    F - END OF LONG FORM               00034 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0100T = c2x(QW0100T)
  hex_QW0100C = c2x(QW0100C)
  hex_QW0100SC = c2x(QW0100SC)
  hex_QW0100AM = c2x(QW0100AM)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0100SB = c2x(QW0100SB)
  hex_QW0100SA = c2x(QW0100SA)
  hex_QW0100RC = c2x(QW0100RC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0100",desired_dsect) > 0)) then do
    void_rc = queue_QW0100_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0100:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0100_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0100:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF REQUEST              x:" hex_QW0100T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF CONDITION            x:" hex_QW0100C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0100SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF STORAGE REQUESTED  x:" hex_QW0100AM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK BEFORE GETMAIN - x:" hex_QW0100SB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK AFTER  GETMAIN - x:" hex_QW0100SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - TYPE X         x:" hex_QW0100RC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0101 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0101:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0101,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0101 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0101 ,
    =00001 QW0101RC +4 , /* F - RETURN CODE - 0 SUCCESSFUL     00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0101RC = c2x(QW0101RC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0101",desired_dsect) > 0)) then do
    void_rc = queue_QW0101_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0101:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0101_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0101:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE - 0 SUCCESSFUL   x:" hex_QW0101RC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0102 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0102:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0102,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0102 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0102 ,
    .           /* End of DSECT */
  /* next byte at 5 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0102",desired_dsect) > 0)) then do
    void_rc = queue_QW0102_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0102:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0102_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0102:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0103 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0103:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0103,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0103 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0103 ,
    =00001 QW0103SC +8 , /* X - STORE CLOCK TIME               00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0103SC = c2x(QW0103SC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0103",desired_dsect) > 0)) then do
    void_rc = queue_QW0103_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0103:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0103_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0103:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK TIME             x:" hex_QW0103SC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0104 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0104:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0104,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0104 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0104 ,
    =00001 QW0104DI +8 , /* C - DATA SET IDENTIFIER            00000 */
    =00009 QW0104DN +44 , /* C - DATA SET NAME - ACTIVE LOG ON 00008 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0104DI = c2x(QW0104DI)
  hex_QW0104DN = c2x(QW0104DN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0104",desired_dsect) > 0)) then do
    void_rc = queue_QW0104_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0104:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0104_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0104:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET IDENTIFIER          x:" hex_QW0104DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET NAME - ACTIVE LOG O x:" hex_QW0104DN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0105 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0105:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0105,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0105 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0105 ,
    =00001 QW0105DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0105OB +2 , /* X - PAGESET OBID (PSID)            00002 */
    =00005 QW0105DN +8 , /* C - DATA BASE NAME                 00004 */
    =00013 QW0105TN +8 , /* C - TABLE SPACE NAME               0000C */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0105DB = c2x(QW0105DB)
  hex_QW0105OB = c2x(QW0105OB)
  hex_QW0105DN = c2x(QW0105DN)
  hex_QW0105TN = c2x(QW0105TN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0105",desired_dsect) > 0)) then do
    void_rc = queue_QW0105_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0105:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0105_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0105:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0105DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID (PSID)          x:" hex_QW0105OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA BASE NAME               x:" hex_QW0105DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLE SPACE NAME             x:" hex_QW0105TN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP1 length is 0018C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP1:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP1,396)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP1 Length: 396"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP1 ,
    =00001 QWP1SMRC +2 , /* H - BIT MAP OF CONSOLE ROUTING COD 00000 */
    =00003 QWP1TRSZ +2 , /* H - SIZE OF RESIDENT TRACE TABLE,  00002 */
    =00005 RSVD0001 +2 , /* C - RESERVED                       00004 */
    =00007 QWP1TLSZ +2 , /* H - SIZE OF LOCAL TRACE TABLES, AS 00006 */
    =00009 QWP1LOGL +4 , /* F - CHECKPOINT FREQUENCY           00008 */
    =00013 QWP1IDB +2 , /* H - MAXIMUM NUMBER OF BATCH BACKGRO 0000C */
    =00015 QWP1IDF +2 , /* H - MAXIMUM NUMBER OF BATCH FOREGRO 0000E */
    =00017 QWP1CT +2 , /* H - MAXIMUM NUMBER OF CONCURRENT ALL 00010 */
    =00019 QWP1RMT +2 , /* H - MAXIMUM NUMBER OF ACTIVE REMOTE 00012 */
    =00021 QWP1LVL +2 , /* H - (S)                             00014 */
    =00023 QWP1DTIM +2 , /* H - TIME BETWEEN RESETTING OF DATA 00016 */
    =00025 QWP1DB1M +4 , /* F - AMOUNT OF SPACE RESERVED FOR M 00018 */
    =00029 QWP1CRIT +4 , /* F - AMOUNT OF SPACE RESERVED FOR C 0001C */
    =00033 QWP1SOS +4 , /* F - AMOUNT OF SPACE ABOVE MVS AND   00020 */
    =00037 QWP1STIM +2 , /* H - TIME INTERVAL BETWEEN STATISTI 00024 */
    =00039 QWP1DBPR +1 , /* C - DATABASE PROTOCOL FOR 3-PART N 00026 */
    =00040 QWP1FLAG +1 , /* X - (S)                            00027 */
  ,     /* QWP1DONT EQU x'00000080' (S)                              */
  ,     /* QWP1PROL EQU x'00000020' INDICATES WHETHER TO ROLL UP QUE */
  ,     /* QWP1VVCI EQU x'00000008' Use VSAM Var. CI for DB2-managed */
  ,     /* QWP1MESZ EQU x'00000004' Enable sliding 2ndy qtys for DB2 */
  ,     /* QWP1SM89 EQU x'00000002' Detailed measured usage pricing  */
  ,     /* QWP1OLAC EQU x'00000001' OTC license terms accepted for t */
    =00041 QWP1TRST +4 , /* X - START GLOBAL TRACE CLASSES     00028 */
    =00045 QWP1SMFS +4 , /* X - SMF STATISTICS START CLASSES   0002C */
    =00049 QWP1SMFA +4 , /* X - SMF ACCOUNTING START CLASSES   00030 */
    =00053 QWP1AUDT +4 , /* X - AUDIT TRACING START CLASSES    00034 */
    =00057 QWP1RLFA +8 , /* C - %U RESOURCE LIMIT SPECIFICATIO 00038 */
    =00065 QWP1RLFT +2 , /* C - RESOURCE LIMIT SPECIFICATION T 00040 */
    =00067 RSVD0002 +1 , /* C - UNUSED                         00042 */
    =00068 QWP1RLFR +1 , /* X - RLFERR FLAG BYTE               00043 */
  ,     /* QWP1RLF EQU x'00000080' IF 1 INDICATE AUTO START RLF      */
  ,     /* QWP1RLFF EQU x'00000040' IF 1 INDICATE NOLIMIT            */
  ,     /* QWP1RLFU EQU x'00000020' IF 1 INDICATE NORUN              */
    =00069 QWP1RLFN +4 , /* X - SPECIFIES THE LIMIT IN SUs     00044 */
    =00073 QWP1MON +4 , /* X - MONITOR TRACING START CLASSES   00048 */
    =00077 QWP1MONS +4 , /* F - MONITOR BUFFER SIZE            0004C */
    =00081 QWP1FREQ +2 , /* H - NUMBER OF CHECKPOINTS          00050 */
    =00083 QWP1TMR +2 , /* H - MINUTES TO PSEUDOCLOSE          00052 */
    =00085 QWP1FLG2 +1 , /* X - FLAG BYTE                      00054 */
  ,     /* QWP1XRDI EQU x'00000020' Randomize XML doc IDs            */
    =00086 RSVD0003 +1 , /* C - UNUSED                         00055 */
    =00087 QWP1DFRQ +2 , /* H - CKPTS BETWEEN LEVEL ID UPDATES 00056 */
    =00089 QWP1SPPN +8 , /* C - Do not reuse                   00058 */
    =00097 QWP1SPAB +2 , /* H - ALLOWABLE ABENDS FOR A STORED  00060 */
    =00099 QWP1SPTO +2 , /* H - STORED PROCEDURE TIMEOUT VALUE 00062 */
    =00101 QWP1LVLC +8 , /* C - (S)                            00064 */
    =00109 QWP1SCER +1 , /* C - EXTENDED SECURITY              0006C */
    =00110 QWP1URCK +1 , /* X - UR CHECKPOINT THRESHOLD        0006D */
    =00111 QWP1FLBZ +1 , /* X - MAX DSN1DBM1 STORAGE FOR FAST  0006E */
    =00112 QWP1TBPL +4 , /* C - DEFAULT 4-KB BUFFER POOL FOR U 0006F */
    =00116 RSVD0004 +4 , /* C - DO NOT REUSE                   00073 */
    =00120 RSVD0005 +18 , /* C - DO NOT REUSE                  00077 */
    =00138 QWP1LMBO +4 , /* C - LIMIT RESTART BACKOUT (NO,YES, 00089 */
    =00142 QWP1BDUR +1 , /* X - RESTART BACKOUT LIMIT (0-255)  0008D */
    =00143 QWP1EXBR +2 , /* H - MAX EXTRA DRDA QUERY BLOCKS FO 0008E */
    =00145 QWP1EXBS +2 , /* H - MAX EXTRA DRDA QUERY BLOCKS FO 00090 */
    =00147 RSVD0006 +1 , /* C - UNUSED                         00092 */
    =00148 QWP1SYFL +1 , /* X - SYNCVAL flags                  00093 */
  ,     /* QWP1SYNO EQU x'00000080' If 1, then SYNCVAL=NO specified  */
    =00149 QWP1SYNV +4 , /* F - SYNCVAL specification in minut 00094 */
    =00153 QWP1LWCK +4 , /* F - UR LOG RECORD WRITTEN THRESHOL 00098 */
    =00157 QWP1LVA +4 , /* F - KILOBYTES FOR LOB VALUES - PER  0009C */
    =00161 QWP1LVS +4 , /* F - MEGABYTES FOR LOB VALUES - PER  000A0 */
    =00165 QWP1CDB +4 , /* F - MAX NUMBER CONNECTED REMOTE THR 000A4 */
    =00169 QWP1TSQT +4 , /* F - DEFAULT SPACE (KB) FOR TABLE S 000A8 */
    =00173 QWP1IXQT +4 , /* F - DEFAULT SPACE (KB) FOR INDEX S 000AC */
    =00177 QWP1RLFA_Off +2 , /* H - Offset from QWP1 to        000B0 */
    =00179 QWP1ACCU +2 , /* H - Rollup accting for DDF/RRSAF   000B2 */
    =00181 QWP1ACID +2 , /* H - Rollup accting aggregation fie 000B4 */
    =00183 RSVD0007 +2 , /* C - UNUSED                         000B6 */
    =00185 QWP1XVA +4 , /* F - KILOBYTES FOR XML VALUES - PER  000B8 */
    =00189 QWP1XVS +4 , /* F - MEGABYTES FOR XML VALUES - PER  000BC */
    =00193 RSVD0008 +52 , /* C - UNUSED                        000C0 */
    =00245 QWP1MOFR +4 , /* F - MAX OPEN DATASETS FOR LOB FILE 000F4 */
    =00249 QWP1IXPL +6 , /* C - DEFAULT BUFFER POOL FOR USER I 000F8 */
    =00255 QWP1TP8 +5 , /* C - Default 8KB buffer pool implici 000FE */
    =00260 QWP1TP16 +6 , /* C - Default 16KB buffer pool for i 00103 */
    =00266 QWP1TP32 +6 , /* C - Default 32KB buffer pool for i 00109 */
    =00272 QWP1IDBP +1 , /* X -                                0010F */
  ,     /* QWP1DIDS EQU x'00000020' -Def DS when creating implicit T */
  ,     /* QWP1CITS EQU x'00000010' -Use data compression for implic */
    =00273 QWP1WLME +32 , /* C - DEFAULT WLM ENVIRONMENT       00110 */
    =00305 QWP1TPLB +6 , /* C - Default buffer pool for implic 00130 */
    =00311 QWP1TPXM +6 , /* C - Default buffer pool for implic 00136 */
    =00317 RSVD0009 +4 , /* C - Not available                  0013C */
    =00321 RSVD0010 +26 , /* C - Unused                        00140 */
    =00347 RSVD0011 +34 , /* C - Not available                 0015A */
    =00381 QWP1ZPNM +8 , /* C - Active subsystem parameter mod 0017C */
    =00389 RSVD0012 +8 , /* C - UNUSED                         00184 */
,/* =00397 QWP1END +0 ,    C - END OF SYSTEM INITIALIZATION PA 0018C */
    =00001 QWP1RLFA_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP1RLFA_Var +0 ,    C - %U RESOURCE LIMIT SPECIFIC 00002 */
  ,     /* QWP1LV3 EQU x'00000063' (S)                               */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QWP1SMRC = c2x(QWP1SMRC)
  hex_QWP1TRSZ = c2x(QWP1TRSZ)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWP1TLSZ = c2x(QWP1TLSZ)
  hex_QWP1LOGL = c2x(QWP1LOGL)
  hex_QWP1IDB = c2x(QWP1IDB)
  hex_QWP1IDF = c2x(QWP1IDF)
  hex_QWP1CT = c2x(QWP1CT)
  hex_QWP1RMT = c2x(QWP1RMT)
  hex_QWP1LVL = c2x(QWP1LVL)
  hex_QWP1DTIM = c2x(QWP1DTIM)
  hex_QWP1DB1M = c2x(QWP1DB1M)
  hex_QWP1CRIT = c2x(QWP1CRIT)
  hex_QWP1SOS = c2x(QWP1SOS)
  hex_QWP1STIM = c2x(QWP1STIM)
  hex_QWP1DBPR = c2x(QWP1DBPR)
  hex_QWP1FLAG = c2x(QWP1FLAG)
  hex_QWP1TRST = c2x(QWP1TRST)
  hex_QWP1SMFS = c2x(QWP1SMFS)
  hex_QWP1SMFA = c2x(QWP1SMFA)
  hex_QWP1AUDT = c2x(QWP1AUDT)
  hex_QWP1RLFA = c2x(QWP1RLFA)
  hex_QWP1RLFT = c2x(QWP1RLFT)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QWP1RLFR = c2x(QWP1RLFR)
  hex_QWP1RLFN = c2x(QWP1RLFN)
  hex_QWP1MON = c2x(QWP1MON)
  hex_QWP1MONS = c2x(QWP1MONS)
  hex_QWP1FREQ = c2x(QWP1FREQ)
  hex_QWP1TMR = c2x(QWP1TMR)
  hex_QWP1FLG2 = c2x(QWP1FLG2)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QWP1DFRQ = c2x(QWP1DFRQ)
  hex_QWP1SPPN = c2x(QWP1SPPN)
  hex_QWP1SPAB = c2x(QWP1SPAB)
  hex_QWP1SPTO = c2x(QWP1SPTO)
  hex_QWP1LVLC = c2x(QWP1LVLC)
  hex_QWP1SCER = c2x(QWP1SCER)
  hex_QWP1URCK = c2x(QWP1URCK)
  hex_QWP1FLBZ = c2x(QWP1FLBZ)
  hex_QWP1TBPL = c2x(QWP1TBPL)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QWP1LMBO = c2x(QWP1LMBO)
  hex_QWP1BDUR = c2x(QWP1BDUR)
  hex_QWP1EXBR = c2x(QWP1EXBR)
  hex_QWP1EXBS = c2x(QWP1EXBS)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QWP1SYFL = c2x(QWP1SYFL)
  hex_QWP1SYNV = c2x(QWP1SYNV)
  hex_QWP1LWCK = c2x(QWP1LWCK)
  hex_QWP1LVA = c2x(QWP1LVA)
  hex_QWP1LVS = c2x(QWP1LVS)
  hex_QWP1CDB = c2x(QWP1CDB)
  hex_QWP1TSQT = c2x(QWP1TSQT)
  hex_QWP1IXQT = c2x(QWP1IXQT)
  hex_QWP1RLFA_Off = c2x(QWP1RLFA_Off)
  hex_QWP1ACCU = c2x(QWP1ACCU)
  hex_QWP1ACID = c2x(QWP1ACID)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_QWP1XVA = c2x(QWP1XVA)
  hex_QWP1XVS = c2x(QWP1XVS)
  hex_RSVD0008 = c2x(RSVD0008)
  hex_QWP1MOFR = c2x(QWP1MOFR)
  hex_QWP1IXPL = c2x(QWP1IXPL)
  hex_QWP1TP8 = c2x(QWP1TP8)
  hex_QWP1TP16 = c2x(QWP1TP16)
  hex_QWP1TP32 = c2x(QWP1TP32)
  hex_QWP1IDBP = c2x(QWP1IDBP)
  hex_QWP1WLME = c2x(QWP1WLME)
  hex_QWP1TPLB = c2x(QWP1TPLB)
  hex_QWP1TPXM = c2x(QWP1TPXM)
  hex_RSVD0009 = c2x(RSVD0009)
  hex_RSVD0010 = c2x(RSVD0010)
  hex_RSVD0011 = c2x(RSVD0011)
  hex_QWP1ZPNM = c2x(QWP1ZPNM)
  hex_RSVD0012 = c2x(RSVD0012)
  hex_QWP1RLFA_Len = c2x(QWP1RLFA_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP1",desired_dsect) > 0)) then do
    void_rc = queue_QWP1_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP1:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP1_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP1:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BIT MAP OF CONSOLE ROUTING C x:" hex_QWP1SMRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SIZE OF RESIDENT TRACE TABLE x:" hex_QWP1TRSZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SIZE OF LOCAL TRACE TABLES,  x:" hex_QWP1TLSZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CHECKPOINT FREQUENCY         x:" hex_QWP1LOGL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF BATCH BACK x:" hex_QWP1IDB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF BATCH FORE x:" hex_QWP1IDF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF CONCURRENT x:" hex_QWP1CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF ACTIVE REM x:" hex_QWP1RMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP1LVL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME BETWEEN RESETTING OF DA x:" hex_QWP1DTIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF SPACE RESERVED FOR x:" hex_QWP1DB1M
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF SPACE RESERVED FOR x:" hex_QWP1CRIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF SPACE ABOVE MVS AN x:" hex_QWP1SOS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME INTERVAL BETWEEN STATIS x:" hex_QWP1STIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE PROTOCOL FOR 3-PART x:" hex_QWP1DBPR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP1FLAG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      START GLOBAL TRACE CLASSES   x:" hex_QWP1TRST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SMF STATISTICS START CLASSES x:" hex_QWP1SMFS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SMF ACCOUNTING START CLASSES x:" hex_QWP1SMFA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUDIT TRACING START CLASSES  x:" hex_QWP1AUDT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U RESOURCE LIMIT SPECIFICAT x:" hex_QWP1RLFA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESOURCE LIMIT SPECIFICATION x:" hex_QWP1RLFT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RLFERR FLAG BYTE             x:" hex_QWP1RLFR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SPECIFIES THE LIMIT IN SUs   x:" hex_QWP1RLFN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MONITOR TRACING START CLASSE x:" hex_QWP1MON
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MONITOR BUFFER SIZE          x:" hex_QWP1MONS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CHECKPOINTS        x:" hex_QWP1FREQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MINUTES TO PSEUDOCLOSE       x:" hex_QWP1TMR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BYTE                    x:" hex_QWP1FLG2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CKPTS BETWEEN LEVEL ID UPDAT x:" hex_QWP1DFRQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Do not reuse                 x:" hex_QWP1SPPN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ALLOWABLE ABENDS FOR A STORE x:" hex_QWP1SPAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORED PROCEDURE TIMEOUT VAL x:" hex_QWP1SPTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP1LVLC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXTENDED SECURITY            x:" hex_QWP1SCER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UR CHECKPOINT THRESHOLD      x:" hex_QWP1URCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX DSN1DBM1 STORAGE FOR FAS x:" hex_QWP1FLBZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT 4-KB BUFFER POOL FOR x:" hex_QWP1TBPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DO NOT REUSE                 x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DO NOT REUSE                 x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LIMIT RESTART BACKOUT (NO,YE x:" hex_QWP1LMBO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESTART BACKOUT LIMIT (0-255 x:" hex_QWP1BDUR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX EXTRA DRDA QUERY BLOCKS  x:" hex_QWP1EXBR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX EXTRA DRDA QUERY BLOCKS  x:" hex_QWP1EXBS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SYNCVAL flags                x:" hex_QWP1SYFL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SYNCVAL specification in min x:" hex_QWP1SYNV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UR LOG RECORD WRITTEN THRESH x:" hex_QWP1LWCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KILOBYTES FOR LOB VALUES - P x:" hex_QWP1LVA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEGABYTES FOR LOB VALUES - P x:" hex_QWP1LVS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX NUMBER CONNECTED REMOTE  x:" hex_QWP1CDB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT SPACE (KB) FOR TABLE x:" hex_QWP1TSQT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT SPACE (KB) FOR INDEX x:" hex_QWP1IXQT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP1 to          x:" hex_QWP1RLFA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Rollup accting for DDF/RRSAF x:" hex_QWP1ACCU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Rollup accting aggregation f x:" hex_QWP1ACID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KILOBYTES FOR XML VALUES - P x:" hex_QWP1XVA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEGABYTES FOR XML VALUES - P x:" hex_QWP1XVS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0008
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX OPEN DATASETS FOR LOB FI x:" hex_QWP1MOFR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT BUFFER POOL FOR USER x:" hex_QWP1IXPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Default 8KB buffer pool impl x:" hex_QWP1TP8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Default 16KB buffer pool for x:" hex_QWP1TP16
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Default 32KB buffer pool for x:" hex_QWP1TP32
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP1IDBP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT WLM ENVIRONMENT      x:" hex_QWP1WLME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Default buffer pool for impl x:" hex_QWP1TPLB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Default buffer pool for impl x:" hex_QWP1TPXM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0009
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unused                       x:" hex_RSVD0010
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0011
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Active subsystem parameter m x:" hex_QWP1ZPNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0012
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP1RLFA_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP2 length is 00100
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP2:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP2,256)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP2 Length: 256"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP2 ,
    =00001 QWP2ID +2 , /* C - CONTROL BLCK HEX ID (009F)       00000 */
    =00003 QWP2LL +2 , /* H - (S)                              00002 */
    =00005 QWP2EID +4 , /* C - CONTROL BLOCK EBCDIC ID LOGP    00004 */
,/* =00009 QWP2DI +0 ,    C - LOG DIRECTORY ENTRY              00008 */
    =00009 RSVD0001 +2 , /* C - NOT USED                       00008 */
    =00011 QWP2OPT1 +1 , /* X - INITIALIZATION OPTIONS         0000A */
  ,     /* QWP2DUAL EQU x'00000080' DUAL ACTIVE LOG (ON = DUAL)      */
  ,     /* QWP2OFFL EQU x'00000040' OFFLOAD OPTION (ON = YES)        */
  ,     /* QWP2DBSD EQU x'00000020' DUAL BSDS MODE (ON = DUAL)       */
    =00012 QWP2OPT2 +1 , /* X - ARCHIVE OPTIONS                0000B */
  ,     /* QWP2ADL EQU x'00000080' DUAL ARCHIVE (ON = YES)           */
  ,     /* QWP2ARC2 EQU x'00000040' Read COPY2 archives first        */
    =00013 RSVD0002 +4 , /* C - RESERVED                       0000C */
    =00017 QWP2OBPS +4 , /* F - OUTPUT BUFFER POOL SIZE - 370  00010 */
    =00021 RSVD0003 +4 , /* C - UNUSED                         00014 */
    =00025 QWP2ARCL +4 , /* F - MAX ARCHV ENTRIES IN BSDS      00018 */
    =00029 QWP2MRTU +2 , /* H - MAX ARCHIVE READ TAPE UNITS    0001C */
    =00031 QWP2WRTH +2 , /* H - (S)                            0001E */
    =00033 QWP2LVL +8 , /* C - (S)                             00020 */
    =00041 QWP2DMIN +2 , /* H - DE-ALLOC TIME MINUTES          00028 */
    =00043 QWP2DSEC +2 , /* H - DE-ALLOC TIME SECONDS          0002A */
    =00045 RSVD0004 +212 , /* C - UNUSED                       0002C */
,/* =00257 QWP2END +0 ,    C - END OF QWP2                     00100 */
  ,     /* QWP2IDC EQU x'0000009F' (S)                               */
  ,     /* QWP2EIDC EQU x'D3D6C7D7' EBCDIC ID OF LOGP                */
    .           /* End of DSECT */
  /* next byte at 257 */
  hex_QWP2ID = c2x(QWP2ID)
  hex_QWP2LL = c2x(QWP2LL)
  hex_QWP2EID = c2x(QWP2EID)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWP2OPT1 = c2x(QWP2OPT1)
  hex_QWP2OPT2 = c2x(QWP2OPT2)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QWP2OBPS = c2x(QWP2OBPS)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QWP2ARCL = c2x(QWP2ARCL)
  hex_QWP2MRTU = c2x(QWP2MRTU)
  hex_QWP2WRTH = c2x(QWP2WRTH)
  hex_QWP2LVL = c2x(QWP2LVL)
  hex_QWP2DMIN = c2x(QWP2DMIN)
  hex_QWP2DSEC = c2x(QWP2DSEC)
  hex_RSVD0004 = c2x(RSVD0004)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP2",desired_dsect) > 0)) then do
    void_rc = queue_QWP2_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP2:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP2_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP2:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLCK HEX ID (009F)   x:" hex_QWP2ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP2LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EBCDIC ID LOGP x:" hex_QWP2EID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INITIALIZATION OPTIONS       x:" hex_QWP2OPT1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ARCHIVE OPTIONS              x:" hex_QWP2OPT2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OUTPUT BUFFER POOL SIZE - 37 x:" hex_QWP2OBPS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX ARCHV ENTRIES IN BSDS    x:" hex_QWP2ARCL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX ARCHIVE READ TAPE UNITS  x:" hex_QWP2MRTU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP2WRTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP2LVL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DE-ALLOC TIME MINUTES        x:" hex_QWP2DMIN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DE-ALLOC TIME SECONDS        x:" hex_QWP2DSEC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0004
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP3 length is 00133
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP3:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP3,307)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP3 Length: 307"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP3 ,
    =00001 QWP3ID +2 , /* C - CONTROL BLCK HEX ID (005D)       00000 */
    =00003 QWP3LL +2 , /* H - (S)                              00002 */
    =00005 QWP3EID +4 , /* C - EBCDIC CONTROL BLOCK ID ARVP    00004 */
    =00009 QWP3BKSZ +4 , /* F - ARCHIVE DATASET BLOCKSIZE      00008 */
    =00013 QWP3RISP +4 , /* F - PRIMARY SPACE ALLOCATION       0000C */
    =00017 QWP3SECS +4 , /* F - SECONDARY SPACE ALLOCATION     00010 */
    =00021 QWP3ULN1 +1 , /* X - LENGTH OF QWP3UNT1 ENTRY       00014 */
    =00022 QWP3UNT1 +8 , /* C - TYPE OF DEVICE TO ALLOCATE - C 00015 */
,/* =00030 QWP3REF1 +0 ,    C - COPY 1 DATASET NAME PREFIX     0001D */
    =00030 QWP3RE1L +1 , /* X - LENGTH OF NAME CHAR STRING     0001D */
    =00031 QWP3RE1N +35 , /* C - DS NAME PREFIX CHAR STRING    0001E */
,/* =00066 QWP3REF2 +0 ,    C - COPY 2 DATASET NAME PREFIX     00041 */
    =00066 QWP3RE2L +1 , /* X - LENGTH OF NAME CHAR STRING     00041 */
    =00067 QWP3RE2N +35 , /* C - DS NAME PREFIX CHAR STRING    00042 */
    =00102 QWP3FLG1 +1 , /* X - FLAG BYTE                      00065 */
  ,     /* QWP3CTLG EQU x'00000080' CATALOG FLAG BIT                 */
  ,     /* QWP3CYL EQU x'00000040' SPACE ALLOCATION BY CYLINDERS     */
  ,     /* QWP3TRCK EQU x'00000020' SPACE ALLOCATION BY TRACKS       */
  ,     /* QWP3RTCT EQU x'00000010' RACF PROTECTION                  */
  ,     /* QWP3WTOR EQU x'00000008' WTOR BEFORE ARCHIVE MOUNTS       */
  ,     /* QWP3COMP EQU x'00000004' FORCE DATA COMPACTION            */
  ,     /* QWP3DTIM EQU x'00000002' TIMESTAMP ARCHIVE LOG DATA SETS  */
  ,     /* QWP3DTFM EQU x'00000001' EXTENDED DATESTAMP INDICATOR     */
    =00103 QWP3ULN2 +1 , /* X - LENGTH OF QWP3UNT2 ENTRY       00066 */
    =00104 QWP3UNT2 +8 , /* C - TYPE OF DEVICE TO ALLOCATE - C 00067 */
    =00112 QWP3FLG2 +1 , /* X - FLAG BYTE                      0006F */
  ,     /* QWP3SVOL EQU x'00000080' SINGLE VOLUME DASD ARCHIVES      */
    =00113 RSVD0001 +2 , /* C - FILLER                         00070 */
    =00115 QWP3RETN +2 , /* H - ARCHIVE RETENTION PERIOD       00072 */
    =00117 QWP3LVL +8 , /* C - (S)                             00074 */
    =00125 QWP3MSL1 +1 , /* X - LENGTH OF MSVGP 1 NAME         0007C */
    =00126 QWP3MSV1 +8 , /* C - MSS VOLUME GROUP 1 NAME        0007D */
    =00134 QWP3MSL2 +1 , /* X - LENGTH OF MSVGP 2 NAME         00085 */
    =00135 QWP3MSV2 +8 , /* C - MSS VOLUME GROUP 2 NAME        00086 */
    =00143 QWP3MQP +2 , /* H - MAXIMUM QUIESCE PERIOD          0008E */
    =00145 QWP3WLST +138 , /* C - (S)                          00090 */
    =00283 RSVD0002 +25 , /* C - UNUSED                        0011A */
,/* =00308 QWP3END +0 ,    C - END OF QWP3                     00133 */
  ,     /* QWP3IDC EQU x'0000005D' (S)                               */
  ,     /* QWP3EIDC EQU x'C1D9E5D7' EBCDIC ID OF ARVP                */
    .           /* End of DSECT */
  /* next byte at 308 */
  hex_QWP3ID = c2x(QWP3ID)
  hex_QWP3LL = c2x(QWP3LL)
  hex_QWP3EID = c2x(QWP3EID)
  hex_QWP3BKSZ = c2x(QWP3BKSZ)
  hex_QWP3RISP = c2x(QWP3RISP)
  hex_QWP3SECS = c2x(QWP3SECS)
  hex_QWP3ULN1 = c2x(QWP3ULN1)
  hex_QWP3UNT1 = c2x(QWP3UNT1)
  hex_QWP3RE1L = c2x(QWP3RE1L)
  hex_QWP3RE1N = c2x(QWP3RE1N)
  hex_QWP3RE2L = c2x(QWP3RE2L)
  hex_QWP3RE2N = c2x(QWP3RE2N)
  hex_QWP3FLG1 = c2x(QWP3FLG1)
  hex_QWP3ULN2 = c2x(QWP3ULN2)
  hex_QWP3UNT2 = c2x(QWP3UNT2)
  hex_QWP3FLG2 = c2x(QWP3FLG2)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWP3RETN = c2x(QWP3RETN)
  hex_QWP3LVL = c2x(QWP3LVL)
  hex_QWP3MSL1 = c2x(QWP3MSL1)
  hex_QWP3MSV1 = c2x(QWP3MSV1)
  hex_QWP3MSL2 = c2x(QWP3MSL2)
  hex_QWP3MSV2 = c2x(QWP3MSV2)
  hex_QWP3MQP = c2x(QWP3MQP)
  hex_QWP3WLST = c2x(QWP3WLST)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP3",desired_dsect) > 0)) then do
    void_rc = queue_QWP3_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP3:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP3_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP3:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLCK HEX ID (005D)   x:" hex_QWP3ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP3LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EBCDIC CONTROL BLOCK ID ARVP x:" hex_QWP3EID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ARCHIVE DATASET BLOCKSIZE    x:" hex_QWP3BKSZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRIMARY SPACE ALLOCATION     x:" hex_QWP3RISP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECONDARY SPACE ALLOCATION   x:" hex_QWP3SECS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF QWP3UNT1 ENTRY     x:" hex_QWP3ULN1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF DEVICE TO ALLOCATE - x:" hex_QWP3UNT1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NAME CHAR STRING   x:" hex_QWP3RE1L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DS NAME PREFIX CHAR STRING   x:" hex_QWP3RE1N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NAME CHAR STRING   x:" hex_QWP3RE2L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DS NAME PREFIX CHAR STRING   x:" hex_QWP3RE2N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BYTE                    x:" hex_QWP3FLG1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF QWP3UNT2 ENTRY     x:" hex_QWP3ULN2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF DEVICE TO ALLOCATE - x:" hex_QWP3UNT2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BYTE                    x:" hex_QWP3FLG2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FILLER                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ARCHIVE RETENTION PERIOD     x:" hex_QWP3RETN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP3LVL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF MSVGP 1 NAME       x:" hex_QWP3MSL1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MSS VOLUME GROUP 1 NAME      x:" hex_QWP3MSV1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF MSVGP 2 NAME       x:" hex_QWP3MSL2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MSS VOLUME GROUP 2 NAME      x:" hex_QWP3MSV2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM QUIESCE PERIOD       x:" hex_QWP3MQP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP3WLST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP4 length is 00360
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP4:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP4,864)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP4 Length: 864"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP4 ,
    =00001 QWP4ID +2 , /* H - (S)                              00000 */
    =00003 QWP4LEN +2 , /* H - (S)                             00002 */
    =00005 QWP4EYE +4 , /* C - EYECATCHER VALUE OF  SPRM       00004 */
    =00009 QWP4LVL +8 , /* C - (S)                             00008 */
    =00017 QWP4MMRB +2 , /* H - (S)                            00010 */
    =00019 QWP4WREN +2 , /* H - (S)                            00012 */
    =00021 QWP4BPOF +4 , /* F - RESERVED                       00014 */
    =00025 QWP4MVS +3 , /* C - CHARACTER STRING FOR MVS/XA OR  00018 */
    =00028 QWP4CNTL +2 , /* B - (S)                            0001B */
  ,     /* QWP4DSNR EQU x'00008000' (S)                              */
  ,     /* QWP4DSNS EQU x'00004000' (S)                              */
  ,     /* QWP4ARIR EQU x'00002000' (S)                              */
  ,     /* QWP4ARIS EQU x'00001000' (S)                              */
  ,     /* QWP4QSQR EQU x'00000800' (S)                              */
  ,     /* QWP4QSQS EQU x'00000400' (S)                              */
  ,     /* QWP4SQLR EQU x'00000200' (S)                              */
  ,     /* QWP4SQLS EQU x'00000100' (S)                              */
  ,     /* QWP4OTHR EQU x'00000080' (S)                              */
  ,     /* QWP4OTHS EQU x'00000040' (S)                              */
    =00030 QWP4IDCK +1 , /* X - (S)                            0001D */
  ,     /* QWP4BMCK EQU x'00000080' (S)                              */
  ,     /* QWP4WIOL EQU x'00000040' (S)                              */
  ,     /* QWP4LRNG EQU x'00000020' (S)                              */
  ,     /* QWP4SLDB EQU x'00000010' (S)                              */
  ,     /* QWP4BYCK EQU x'00000008' (S)                              */
  ,     /* QWP4SLIX EQU x'00000004' (S)                              */
  ,     /* QWP4NAPF EQU x'00000002' (S)                              */
    =00031 QWP4MISC +1 , /* X -                                0001E */
  ,     /* QWP4CTUP EQU x'00000080' (S)                              */
  ,     /* QWP4DIV3 EQU x'00000040' (S)                              */
  ,     /* QWP4EXPL EQU x'00000020' (S)                              */
  ,     /* QWP4NHJM EQU x'00000010' (S)                              */
  ,     /* QWP4CDC EQU x'00000008' YES = ENABLE CHANGE DATA CAPTURE  */
  ,     /* QWP4ENF EQU x'00000004' YES = ENFORCE DPROP               */
  ,     /* QWP4IOP EQU x'00000002' YES = ACTIVATE I/O SCHEDULING FEA */
  ,     /* QWP4STOO EQU x'00000001' (S)                              */
    =00032 QWP4MISZ +1 , /* X -                                0001F */
  ,     /* QWP4ABX EQU x'00000080' ALLOW/DISALLOW EXPLAIN DURING AUT */
  ,     /* QWP4HOP EQU x'00000040' PKG/RUNNER AUTH TO HOP SITE FROM  */
  ,     /* QWP4FFB EQU x'00000020' (S) YES = FILTER FACTOR REFINEMEN */
  ,     /* QWP4SCAC EQU x'00000010' ON = USE SEQUENTIAL MODE TO READ */
  ,     /* QWP4GOP EQU x'00000008' (S) PHYSICAL/LOGICAL PARTITION OF */
  ,     /* QWP4RRU EQU x'00000004' U LOCK FOR REPEATABLE READ OR REA */
  ,     /* QWP4FSTP EQU x'00000002' (S)                              */
  ,     /* QWP4MRU EQU x'00000001' (S)                               */
    =00033 QWP4AUTH +1 , /* C - THIS PARAMETER INDICATES THE D 00020 */
    =00034 QWP4SADM +8 , /* C - %U INSTALLATION SYSTEM ADMINIS 00021 */
    =00042 QWP4MIS2 +1 , /* X -                                00029 */
  ,     /* QWP4DSST EQU x'00000080' GENERATE DESCRIBE SQLDA FOR STAT */
  ,     /* QWP4PST EQU x'00000040' USE SEQUENTIAL PRESTAGE FOR UTILI */
  ,     /* QWP4UDEG EQU x'00000020' (S)                              */
  ,     /* QWP4CDYN EQU x'00000010' CACHE DYNAMIC SQL STATEMENTS     */
  ,     /* QWP4MXVL EQU x'00000004' (S)                              */
  ,     /* QWP4NOIN EQU x'00000002' (S)                              */
  ,     /* QWP4VCFK EQU x'00000001' ENABLE VARCHAR DATA RETRIEVAL FR */
    =00043 QWP4MIS3 +1 , /* X -                                0002A */
  ,     /* QWP4EVUN EQU x'00000080' EVALUATION OF UNCOMMITTED DATA O */
  ,     /* QWP4MSTG EQU x'00000040' YES = MANAGE STORAGE TO MINIMIZE */
  ,     /* QWP4NLG EQU x'00000010' (S)                               */
  ,     /* QWP4TRSU EQU x'00000004' (S)                              */
  ,     /* QWP4TRSS EQU x'00000002' (S)                              */
    =00044 QWP4MIS4 +1 , /* X -                                0002B */
  ,     /* QWP4OPSE EQU x'00000080' (S)                              */
  ,     /* QWP4DSCM EQU x'00000004' YES = Do not set SQLWARN1, 4, an */
  ,     /* QWP4SKUI EQU x'00000001' YES = Skip uncommitted inserts   */
    =00045 QWP4EDPL +4 , /* F - THIS PARAMETER WILL CONTAIN TH 0002C */
    =00049 QWP4VCOF +4 , /* F - (S)                            00030 */
    =00053 QWP4DBOF +4 , /* F - (S)                            00034 */
    =00057 QWP4DFID +8 , /* C - %U SYSTEM DEFAULT USER ID.     00038 */
    =00065 QWP4IPRC +8 , /* C - THIS PARAMETER WILL CONTAIN TH 00040 */
    =00073 QWP4ISID +4 , /* C - THIS PARAMETER WILL CONTAIN TH 00048 */
    =00077 QWP4TOUT +4 , /* F - THIS PARAMETER WILL CONTAIN TH 0004C */
    =00081 QWP4ISWT +4 , /* F - THIS PARAMETER CONTAINS THE TO 00050 */
    =00085 QWP4ISWI +4 , /* F - THIS PARAMETER CONTAINS THE TI 00054 */
    =00089 QWP4IAU +1 , /* X -                                 00058 */
  ,     /* QWP4IAUT EQU x'00000080' YES = AUTOMATICALLY START IRLM   */
    =00090 QWP4DBC +1 , /* X -                                 00059 */
  ,     /* QWP4DBCK EQU x'00000080' YES = ENABLE DB CHECKING         */
    =00091 QWP4SWFN +2 , /* H - (S)                            0005A */
    =00093 QWP4SPOL +4 , /* F - SORT POOL SIZE                 0005C */
    =00097 QWP4SMXN +4 , /* F - (S)                            00060 */
    =00101 QWP4BMC1 +2 , /* H - (S)                            00064 */
    =00103 QWP4BMC2 +2 , /* H - (S)                            00066 */
    =00105 QWP4SWT1 +2 , /* H - (S)                            00068 */
    =00107 QWP4SWT2 +2 , /* H - (S)                            0006A */
    =00109 QWP4DWF1 +2 , /* H - (S)                            0006C */
    =00111 RSVD0001 +2 , /* H - Not available                  0006E */
    =00113 QWP4DWU1 +2 , /* H - (S)                            00070 */
    =00115 QWP4DWU2 +2 , /* H - (S)                            00072 */
    =00117 QWP4VDWT +2 , /* H - (S)                            00074 */
    =00119 QWP4STHT +1 , /* C - Statistics history default     00076 */
    =00120 QWP4STRL +1 , /* C - Statistics rollup default      00077 */
    =00121 QWP4KDSA +4 , /* F - (S)                            00078 */
    =00125 QWP4KDSB +4 , /* F - (S)                            0007C */
    =00129 QWP4RDEU +2 , /* H - (S)                            00080 */
    =00131 QWP4LRUT +2 , /* H - (S)                            00082 */
    =00133 QWP4PF32 +2 , /* H - (S)                            00084 */
    =00135 QWP4PFT1 +2 , /* H - (S)                            00086 */
    =00137 QWP4PFT2 +2 , /* H - (S)                            00088 */
    =00139 QWP4BBTR +2 , /* H - (S)                            0008A */
    =00141 RSVD0002 +2 , /* C - RESERVED                       0008C */
    =00143 QWP4PSID +4 , /* X - (S)                            0008E */
    =00147 QWP4DSPM +2 , /* H - (S)                            00092 */
    =00149 QWP4LKTS +4 , /* F - MAX PAGE LOCKS PER TABLESPACE  00094 */
    =00153 QWP4LKUS +4 , /* F - MAX PAGE LOCKS PER APPLICATION 00098 */
    =00157 QWP4ADM2 +8 , /* C - %U SYSTEM ADMIN ID2            0009C */
    =00165 QWP4OPR1 +8 , /* C - %U MVS OPERATOR ID             000A4 */
    =00173 QWP4OPR2 +8 , /* C - %U MVS OPERATOR ID2            000AC */
    =00181 QWP4CHKL +2 , /* H - (S)                            000B4 */
    =00183 QWP4PDQ +2 , /* H - (S)                             000B6 */
    =00185 QWP4PCBS +2 , /* H - (S)                            000B8 */
    =00187 RSVD0003 +2 , /* H - Not available                  000BA */
    =00189 RSVD0004 +2 , /* H - Not available                  000BC */
    =00191 QWP4NCPU +1 , /* X - SIMULATED NUMBER OF CPUs       000BE */
    =00192 QWP4HRC +1 , /* X -                                 000BF */
  ,     /* QWP4HRCL EQU x'00000080' (S)                              */
    =00193 QWP4PCWH +2 , /* H - (S)                            000C0 */
    =00195 QWP4PCRB +2 , /* H - (S)                            000C2 */
    =00197 QWP4MXRB +2 , /* H - (S)                            000C4 */
    =00199 QWP4HRCD +2 , /* H - (S)                            000C6 */
    =00201 QWP4RCST +2 , /* H - (S)                            000C8 */
    =00203 QWP4TRWT +2 , /* H - (S)                            000CA */
    =00205 QWP4WPFQ +2 , /* H - (S)                            000CC */
    =00207 QWP4WPFS +2 , /* H - (S)                            000CE */
    =00209 QWP4SQTM +2 , /* H - (S)                            000D0 */
    =00211 QWP4SQTD +2 , /* H - (S)                            000D2 */
    =00213 QWP4VDTM +2 , /* H - (S)                            000D4 */
    =00215 RSVD0005 +2 , /* H - Not available                  000D6 */
    =00217 QWP4MPFQ +2 , /* H - (S)                            000D8 */
    =00219 QWP4SWFU +2 , /* H - (S)                            000DA */
    =00221 QWP4TISP +4 , /* F - (S)                            000DC */
    =00225 QWP4DRBS +4 , /* F - (S)                            000E0 */
    =00229 QWP4RMIN +4 , /* F - (S)                            000E4 */
    =00233 QWP4RMAX +4 , /* F - MAXIMUM NUMBER OF RID BLOCKS   000E8 */
    =00237 QWP4RNLP +2 , /* H - (S)                            000EC */
    =00239 QWP4AUCA +2 , /* H - AUTHORIZATION CACHE SIZE       000EE */
    =00241 QWP4INTV +2 , /* H - (S)                            000F0 */
    =00243 QWP4QCTM +2 , /* H - (S)                            000F2 */
    =00245 QWP4TDDN +2 , /* H - VALUE FOR TRIGGER DRAIN        000F4 */
    =00247 QWP4MDDN +2 , /* H - MAX # OF DDS WITH HOLD         000F6 */
    =00249 QWP4TXS +4 , /* F - (S)                             000F8 */
    =00253 QWP4SRBT +4 , /* F - (S)                            000FC */
    =00257 QWP4AND +4 , /* F - (S)                             00100 */
    =00261 QWP4OR +4 , /* F - (S)                              00104 */
    =00265 QWP4CPUM +4 , /* F - CPU FOR EXPLAIN STATEMENTS     00108 */
    =00269 QWP4FDP +2 , /* H - NUMBER FIELD PROCS FOR DESCRB T 0010C */
    =00271 QWP4KNFC +2 , /* H - MAXIMUM #  NOT FOUND  HASH REC 0010E */
    =00273 QWP4UTO +2 , /* H - UTILITY TIMEOUT FACTOR          00110 */
    =00275 QWP4EST +2 , /* H - MAXIMUM EXTEND SERVICE TASKS    00112 */
    =00277 QWP4CUT +2 , /* H - (S)                             00114 */
    =00279 QWP4SPC +2 , /* H - (S)                             00116 */
    =00281 QWP4SPS +2 , /* H - (S)                             00118 */
    =00283 QWP4AST +2 , /* H - (S)                             0011A */
    =00285 QWP4WBMP +2 , /* H - IMS/BMP TIMEOUT FACTOR         0011C */
    =00287 QWP4WDLI +2 , /* H - IMS/DLI TIMEOUT FACTOR         0011E */
    =00289 QWP4XCTH +4 , /* F - (S)                            00120 */
    =00293 QWP4BNVA +8 , /* C - BIND NEW PACKAGE               00124 */
    =00301 QWP4SCTM +4 , /* F - (S)                            0012C */
    =00305 QWP4MDEG +4 , /* F - UPPER LIMIT ON THE DEGREE OF P 00130 */
    =00309 QWP4PAC +4 , /* F - PACKAGE AUTHORIZATION CACHE     00134 */
    =00313 QWP4UBS +2 , /* G - (S)                             00138 */
    =00315 QWP4AURT +2 , /* G - (S)                            0013A */
    =00317 QWP4REGF +1 , /* X - DDL REGISTRATION FACILITY FLAG 0013C */
  ,     /* QWP4REGI EQU x'00000080' YES = DDL REG INSTALLED          */
  ,     /* QWP4REGD EQU x'00000040' YES = DEDICATED APPLS            */
  ,     /* QWP4REGQ EQU x'00000020' YES = FULL QUALIFIER USED        */
  ,     /* QWP4REGU EQU x'00000018' 00=REJCT, 1X=ACCEPT, X1=APPL     */
    =00318 QWP4REGC +8 , /* C - %U DDL REG TABLE OWNER         0013D */
    =00326 QWP4REGA +17 , /* C - %U DDL REG ART NAME           00145 */
    =00343 QWP4REGO +17 , /* C - %U DDL REG ORT NAME           00156 */
    =00360 QWP4SIT +1 , /* X - SITE TYPE FLAG                  00167 */
  ,     /* QWP4MSTY EQU x'00000080' YES = LOCALSITE                  */
  ,     /* QWP4TRKR EQU x'00000040' YES = TRACKER SITE               */
  ,     /* QWP4XLUD EQU x'00000020' YES = USE X LOCK ON SEARCHED UPD */
  ,     /* QWP4EBF EQU x'00000010' YES = ALWAYS USE EDM BEST FIT ALG */
  ,     /* QWP4URNM EQU x'00000008' (S)                              */
  ,     /* QWP4SAE EQU x'00000001' YES = SUPPRESS LOGREC SOFT ERROR  */
    =00361 QWP4REGN +8 , /* C - DDL REG DATABASE NAME          00168 */
    =00369 QWP4KSIZ +4 , /* F - CONTROL PACKAGE HASH TABLE5    00170 */
    =00373 RSVD0006 +4 , /* F - Reserved                       00174 */
    =00377 QWP4ABN +1 , /* C - ENABLE/DISABLE AUTOBIND         00178 */
    =00378 QWP4DXTP +1 , /* X - (S)                            00179 */
    =00379 QWP4RMTI +2 , /* H - (S)                            0017A */
    =00381 QWP4ZTN +2 , /* H - PROJECT Z INSERTION THRESHOLD   0017C */
    =00383 QWP4ZUT +2 , /* H - (S)                             0017E */
    =00385 QWP4MDE +4 , /* F - MAX ZIVLEMPEL DICTIONARY ENTRIE 00180 */
    =00389 QWP4ESC +1 , /* C - DDL REG ESCAPE CHARACTER        00184 */
    =00390 QWP4CDEG +3 , /* C - DEFAULT CURRENT DEGREE SPECIAL 00185 */
    =00393 QWP4CDE1 +1 , /* C - RESERVED FOR QWP4CDEG EXPANSIO 00188 */
    =00394 QWP4PKYU +1 , /* C - ALLOW UPDATE OF PARTITIONING K 00189 */
    =00395 QWP4FLMT +1 , /* X - (S)                            0018A */
    =00396 QWP4FLBS +1 , /* X - (S)                            0018B */
    =00397 QWP4ULBZ +4 , /* F - (S)                            0018C */
    =00401 QWP4ULFR +4 , /* F - (S)                            00190 */
    =00405 QWP4RHTI +2 , /* H - (S)                            00194 */
    =00407 QWP4UMD +2 , /* G - (S)                             00196 */
    =00409 QWP4MXKD +4 , /* F - MAXIMUM KEPT DYNAMIC STATEMENT 00198 */
    =00413 QWP4SREC +2 , /* X - (S)                            0019C */
    =00415 QWP4LTDM +1 , /* X - (S)                            0019E */
    =00416 QWP4MS4A +1 , /* X -                                0019F */
  ,     /* QWP4PROF EQU x'00000020' (s)                              */
  ,     /* QWP4XLUS EQU x'00000010' 1=USE SCOPED X LOCK ON SEARCHED  */
  ,     /* QWP4CDIO EQU x'00000008' (s)                              */
  ,     /* QWP4UNM7 EQU x'00000004' (s)                              */
  ,     /* QWP4PVKP EQU x'00000002' 1=Tell CICS/RRSAF to disallow th */
  ,     /* QWP4SJMK EQU x'00000001' (s)                              */
    =00417 QWP4ACAN +2 , /* G - (S)                            001A0 */
    =00419 QWP4MS4B +1 , /* X - PK14923                        001A2 */
  ,     /* QWP4RRBA EQU x'00000040' (s)                              */
  ,     /* QWP4HKEEPD EQU x'00000004' YES=KEEPDICTIONARY in BRF->RRF */
  ,     /* QWP4NLGF EQU x'00000002' (s)                              */
  ,     /* QWP4PPRU EQU x'00000001' (s)                              */
    =00420 QWP4DSFL +1 , /* C - (S)                            001A3 */
  ,     /* QWP4HAVL EQU x'00000080' (S)                              */
  ,     /* QWP4TRCK EQU x'00000040' (S)                              */
  ,     /* QWP4CRVW EQU x'00000020' YES=DBA can create views/aliases */
  ,     /* QWP4FTST EQU x'00000010' (S)                              */
  ,     /* QWP4HINT EQU x'00000008' YES=optimization hints allowed   */
  ,     /* QWP4OJEH EQU x'00000004' YES=outer join performance enhan */
  ,     /* QWP4CONT EQU x'00000002' YES=contract CT long storage poo */
  ,     /* QWP4OPTC EQU x'00000001' (S)                              */
    =00421 QWP4COC1 +2 , /* H - (S)                            001A4 */
    =00423 QWP4COC2 +2 , /* H - (S)                            001A6 */
    =00425 QWP4WAIT +2 , /* H - RETAINED LOCK TIMEOUT MULTIPLI 001A8 */
    =00427 QWP4CTHR +2 , /* H - (S)                            001AA */
    =00429 QWP4RAC +4 , /* F - ROUTINE AUTHORIZATION CACHE SIZ 001AC */
    =00433 QWP4STHR +4 , /* F - (S)                            001B0 */
    =00437 RSVD0007 +4 , /* C - Reserved - Do not use          001B4 */
    =00441 QWP4DSMX +4 , /* F - MAXIMUM NUMBER OF DATASETS     001B8 */
    =00445 QWP4LEM +2 , /* H - MAXIMUM NUMBER OF LE TOKENS     001BC */
    =00447 QWP4OZTP +1 , /* C - Online ZParm type              001BE */
    =00448 QWP4MS4C +1 , /* X -                                001BF */
  ,     /* QWP4IXOPREF EQU x'00000080' (s)                           */
  ,     /* QWP4TCNE EQU x'00000040' (s)                              */
  ,     /* QWP4IOWT EQU x'00000020' 1=Enable Optimizer I/O weighting */
  ,     /* QWP4JBPR EQU x'00000010' (s)                              */
  ,     /* QWP4PJSJ EQU x'00000004' (s)                              */
  ,     /* QWP4CS01 EQU x'00000002' 1=Enable compression of SPT01    */
  ,     /* QWP4OFNR EQU x'00000001' (s)                              */
    =00449 QWP4PLIM +4 , /* F - (S)                            001C0 */
    =00453 QWP4MDSC +2 , /* H - MINIMUM SCALE FOR DECIMAL DIVI 001C4 */
    =00455 QWP4MXTB +2 , /* H - (S)                            001C6 */
    =00457 QWP4MXCE +4 , /* F - (S)                            001C8 */
    =00461 QWP4NPAG +4 , /* F - NPAGES threshold for optimizer 001CC */
    =00465 QWP4SJRT +2 , /* H - Star join ratio                001D0 */
    =00467 QWP4DCFS +8 , /* C - SMS DataClass - File(data) Tab 001D2 */
    =00475 QWP4DCIX +8 , /* C - SMS DataClass - Index Tablespa 001DA */
    =00483 QWP4DDLTO +2 , /* H - SQL data definition time out  001E2 */
    =00485 QWP4OZUS +8 , /* C - %U Online ZParm userid monitor 001E4 */
    =00493 QWP4OZCI +12 , /* C - Online ZParm corrid monitor   001EC */
    =00505 QWP4OZTM +8 , /* C - Online ZParm time changed      001F8 */
    =00513 RSVD0008 +4 , /* C - Reserved - Do not use          00200 */
    =00517 QWP4INTE +2 , /* H - RTS Statistics timer interval  00204 */
    =00519 QWP4SJTB +2 , /* H - Star join threshold (#tbls / q 00206 */
    =00521 QWP4TJTH +2 , /* C - Do not reuse                   00208 */
    =00523 RSVD0009 +2 , /* C - Do not reuse                   0020A */
    =00525 QWP4INLP +4 , /* F - (S)                            0020C */
    =00529 QWP4FLKT +4 , /* F - (S)                            00210 */
    =00533 QWP4RSMX +2 , /* H - (S)                            00214 */
    =00535 RSVD0010 +6 , /* C - Do not reuse                   00216 */
    =00541 QWP4PAEF +2 , /* H - Parallism efficiency factor    0021C */
    =00543 RSVD0011 +8 , /* C - RESERVED                       0021E */
    =00551 QWP4SADM_Off +2 , /* H - Offset from QWP4 to        00226 */
    =00553 QWP4DFID_Off +2 , /* H - Offset from QWP4 to        00228 */
    =00555 QWP4ADM2_Off +2 , /* H - Offset from QWP4 to        0022A */
    =00557 QWP4OPR1_Off +2 , /* H - Offset from QWP4 to        0022C */
    =00559 QWP4OPR2_Off +2 , /* H - Offset from QWP4 to        0022E */
    =00561 QWP4REGC_Off +2 , /* H - Offset from QWP4 to        00230 */
    =00563 QWP4REGA_Off +2 , /* H - Offset from QWP4 to        00232 */
    =00565 QWP4REGO_Off +2 , /* H - Offset from QWP4 to        00234 */
    =00567 QWP4OZUS_Off +2 , /* H - Offset from QWP4 to        00236 */
    =00569 QWP4EDBC +4 , /* F - EDM pool DBD cache size        00238 */
    =00573 QWP4ESTC +4 , /* F - EDM pool statement cache size  0023C */
    =00577 QWP4MQTH +2 , /* H - (S)                            00240 */
    =00579 QWP4RFSH +11 , /* C - Refresh age                   00242 */
    =00590 RSVD0012 +1 , /* C - Reserved for extension         0024D */
    =00591 QWP4MNTY +2 , /* C - Maintained table type, a bitma 0024E */
    =00593 QWP4MXOS +2 , /* H - (S)                            00250 */
    =00595 QWP4MXOC +2 , /* H - (S)                            00252 */
    =00597 RSVD0013 +2 , /* C - Do not reuse                   00254 */
    =00599 QWP4ACRT +2 , /* H - (S)                            00256 */
    =00601 QWP4LRTH +2 , /* H - Uncomitd read warning threshol 00258 */
    =00603 QWP4TTRS +2 , /* H - (s)                            0025A */
    =00605 QWP4VDTY +8 , /* C - Device type for temporary data 0025C */
    =00613 QWP4SCLC +2 , /* H - (s)                            00264 */
    =00615 QWP4MIS5 +1 , /* X -                                00266 */
  ,     /* QWP4PDIX EQU x'00000080' Pad indexes by default           */
  ,     /* QWP4SMGE EQU x'00000040' (s)                              */
  ,     /* QWP4RRF EQU x'00000020' YES=Enable reordered row format ( */
  ,     /* QWP4RRFD EQU x'00000008' Utils RESTORE SYSTEM/RECOVER fro */
  ,     /* QWP4OXQB EQU x'00000004' (s)                              */
  ,     /* QWP4RPTC EQU x'00000002' (s)                              */
  ,     /* QWP4COMC EQU x'00000001' Use Common Criteria for all tabl */
    =00616 QWP4MIS6 +1 , /* X -                                00267 */
  ,     /* QWP4DINB EQU x'00000080' (s)                              */
  ,     /* QWP4SLBU EQU x'00000040' Utils system level backups as re */
  ,     /* QWP4IXIO EQU x'00000020' (s)                              */
  ,     /* QWP4STCL EQU x'00000008' RUNSTATS uses enhanced clusterin */
  ,     /* QWP4MUDI EQU x'00000004' (s)                              */
    =00617 QWP4MXNC +4 , /* F - Max cursors open per thread    00268 */
    =00621 QWP4MXSP +4 , /* F - Max active stored procs per th 0026C */
    =00625 QWP4SELD +4 , /* C - (s)                            00270 */
    =00629 QWP4APS +8 , /* C - (s)                             00274 */
    =00637 QWP4FRLC +2 , /* H - Free local cached statements   0027C */
    =00639 QWP4PMGT +1 , /* C - REBIND PLAN_MGMT default       0027E */
    =00640 QWP4SRTN +1 , /* X - SORTNUM ELIMINATION            0027F */
  ,     /* QWP4SRAL EQU x'00000080' YES=SORTNUM ELIMINATION ON       */
  ,     /* QWP4IGSN EQU x'00000040' YES=IGNORE SORTNUM SPECIFICATION */
  ,     /* QWP4DB2SRT EQU x'00000020' YES=ENABLE USE OF DB2 SORT     */
    =00641 QWP4CHEC +8 , /* C - UTIL_TEMP_STORCLAS             00280 */
    =00649 QWP4NUPT +2 , /* H - Number of utility parts        00288 */
    =00651 QWP4METR +1 , /* C - z/OS metrics configuration     0028A */
  ,     /* QWP4METE EQU x'00000080' Provide z/OS metrics             */
    =00652 QWP4ACCS +1 , /* C - ACCEL START PARAMETER          0028B */
    =00653 QWP4MS4D +1 , /* X -                                0028C */
  ,     /* QWP4RIFS EQU x'00000080' YES=REORG treats PCTFREE=FREEPAG */
  ,     /* QWP4OHJC EQU x'00000040' YES=Enable improved cost model f */
  ,     /* QWP4OOPF EQU x'00000020' YES=Enable optimizer index costi */
  ,     /* QWP4JBPL EQU x'00000010' (s)                              */
  ,     /* QWP4BXQT EQU x'00000002' (s)                              */
  ,     /* QWP4WFDBSEP EQU x'00000001' YES=Unconditionally direct DG */
    =00654 QWP4MS4E +1 , /* X -                                0028D */
  ,     /* QWP4SIDX EQU x'00000080' (s)                              */
  ,     /* QWP4XTJP EQU x'00000040' 1=XMLTABLE Join predicate PushDo */
  ,     /* QWP4ACCL EQU x'00000020' Accelerator level: 0=V1, 1=V2    */
  ,     /* QWP4CFRP EQU x'00000010' FASTREPLICATION type for CHECK u */
  ,     /* QWP4IPTC EQU x'00000008' 1=INLIST predicate transitive cl */
  ,     /* QWP4XPKE EQU x'00000004' IX_TB_PART_CONV_EXCLUDE          */
  ,     /* QWP4SQMX EQU x'00000002' SUBQ_MIDX: 0=DISABLE, 1=ENABLE   */
    =00655 QWP4FCPPRC +1 , /* C - FLASHCOPY_PPRC:              0028E */
    =00656 RSVD0014 +1 , /* C - Not available                  0028F */
    =00657 RSVD0015 +1 , /* C - Not available                  00290 */
    =00658 RSVD0016 +1 , /* C - Not available                  00291 */
    =00659 QWP4CQAC +2 , /* X - CURRENT QUERY ACCELERATOR reg  00292 */
    =00661 RSVD0017 +8 , /* C - UNUSED                         00294 */
    =00669 RSVD0018 +4 , /* C - Not available                  0029C */
    =00673 RSVD0019 +1 , /* C - UNUSED                         002A0 */
    =00674 RSVD0020 +1 , /* C - Not available                  002A1 */
    =00675 QWP4RPSN +1 , /* C - REORG_PART_SORT_NPSI option    002A2 */
    =00676 QWP4RLPR +1 , /* C - REORG_LIST_PROCESSING option   002A3 */
    =00677 QWP4WFAL +4 , /* F - Max temp storage per agent in  002A4 */
    =00681 QWP4ADMT +8 , /* C - Admin Scheduler JCL proc name  002A8 */
    =00689 QWP4EXQRY +4 , /* F - (s)                           002B0 */
    =00693 RSVD0021 +4 , /* C - Not available                  002B4 */
    =00697 QWP4QACO +4 , /* X - QUERY_ACCEL_OPTIONS            002B8 */
  ,     /* QWP4QA99 EQU x'80000000' (s)                              */
  ,     /* QWP4QA98 EQU x'40000000' (s)                              */
  ,     /* QWP4QAEBCM EQU x'00000001' Offload EBCDIC mixed/graphic e */
  ,     /* QWP4QANONE EQU x'00000000' Offload only standard queries  */
    =00701 RSVD0022 +11 , /* C - UNUSED                        002BC */
    =00712 QWP4RSLV +1 , /* C - Y=DRDA Alias resolution (SPRMR 002C7 */
    =00713 QWP4RSDC +8 , /* C - Utils RESTORE SYSTEM dump clas 002C8 */
    =00721 QWP4RSMT +2 , /* H - Utils RESTORE SYSTEM max tape  002D0 */
    =00723 QWP4MXDC +2 , /* H - Max virtual memory alloc for d 002D2 */
    =00725 QWP4SKLC +4 , /* F - EDM skeleton pool size         002D4 */
    =00729 QWP4ABVC +4 , /* F - (s)                            002D8 */
    =00733 QWP4MXAB +2 , /* H - Max concurrent package operati 002DC */
    =00735 RSVD0023 +4 , /* C - Not available                  002DE */
    =00739 QWP4MS4F +1 , /* X -                                002E2 */
  ,     /* QWP4DEIPC EQU x'00000080' (s)                             */
  ,     /* QWP4RACD EQU x'00000040' RESTRICT_ALT_COL_FOR_DCC         */
  ,     /* QWP4DK1629 EQU x'00000010' (s)                            */
  ,     /* QWP4K0001 EQU x'00000008' (s)                             */
    =00740 RSVD0024 +57 , /* C - UNUSED                        002E3 */
    =00797 QWP4IAST +2 , /* H - (s)                            0031C */
    =00799 RSVD0025 +58 , /* C - UNUSED                        0031E */
    =00857 QWP4DATE +8 , /* C - (S)                            00358 */
,/* =00865 QWP4END +0 ,    C - END OF THE SPRM BLOCK           00360 */
    =00001 QWP4SADM_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4SADM_Var +0 ,    C - %U INSTALLATION SYSTEM ADM 00002 */
    =00001 QWP4DFID_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4DFID_Var +0 ,    C - %U SYSTEM DEFAULT USER ID  00002 */
    =00001 QWP4ADM2_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4ADM2_Var +0 ,    C - %U SYSTEM ADMIN ID2        00002 */
    =00001 QWP4OPR1_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4OPR1_Var +0 ,    C - %U MVS OPERATOR ID         00002 */
    =00001 QWP4OPR2_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4OPR2_Var +0 ,    C - %U MVS OPERATOR ID2        00002 */
    =00001 QWP4REGC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4REGC_Var +0 ,    C - %U DDL REG TABLE OWNER     00002 */
    =00001 QWP4REGS_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4REGA_Var +0 ,    C - %U DDL REG ART NAME        00002 */
    =00001 QWP4REGO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4REGO_Var +0 ,    C - %U DDL REG ORT NAME        00002 */
    =00001 QWP4OZUS_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QWP4OZUS_Var +0 ,    C - %U Online ZParm userid mon 00002 */
  ,     /* QWP4M370 EQU x'00F3F7F0'                                  */
  ,     /* QWP4MXA EQU x'00E7C140'                                   */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QWP4ID = c2x(QWP4ID)
  hex_QWP4LEN = c2x(QWP4LEN)
  hex_QWP4EYE = c2x(QWP4EYE)
  hex_QWP4LVL = c2x(QWP4LVL)
  hex_QWP4MMRB = c2x(QWP4MMRB)
  hex_QWP4WREN = c2x(QWP4WREN)
  hex_QWP4BPOF = c2x(QWP4BPOF)
  hex_QWP4MVS = c2x(QWP4MVS)
  hex_QWP4CNTL = c2x(QWP4CNTL)
  hex_QWP4IDCK = c2x(QWP4IDCK)
  hex_QWP4MISC = c2x(QWP4MISC)
  hex_QWP4MISZ = c2x(QWP4MISZ)
  hex_QWP4AUTH = c2x(QWP4AUTH)
  hex_QWP4SADM = c2x(QWP4SADM)
  hex_QWP4MIS2 = c2x(QWP4MIS2)
  hex_QWP4MIS3 = c2x(QWP4MIS3)
  hex_QWP4MIS4 = c2x(QWP4MIS4)
  hex_QWP4EDPL = c2x(QWP4EDPL)
  hex_QWP4VCOF = c2x(QWP4VCOF)
  hex_QWP4DBOF = c2x(QWP4DBOF)
  hex_QWP4DFID = c2x(QWP4DFID)
  hex_QWP4IPRC = c2x(QWP4IPRC)
  hex_QWP4ISID = c2x(QWP4ISID)
  hex_QWP4TOUT = c2x(QWP4TOUT)
  hex_QWP4ISWT = c2x(QWP4ISWT)
  hex_QWP4ISWI = c2x(QWP4ISWI)
  hex_QWP4IAU = c2x(QWP4IAU)
  hex_QWP4DBC = c2x(QWP4DBC)
  hex_QWP4SWFN = c2x(QWP4SWFN)
  hex_QWP4SPOL = c2x(QWP4SPOL)
  hex_QWP4SMXN = c2x(QWP4SMXN)
  hex_QWP4BMC1 = c2x(QWP4BMC1)
  hex_QWP4BMC2 = c2x(QWP4BMC2)
  hex_QWP4SWT1 = c2x(QWP4SWT1)
  hex_QWP4SWT2 = c2x(QWP4SWT2)
  hex_QWP4DWF1 = c2x(QWP4DWF1)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWP4DWU1 = c2x(QWP4DWU1)
  hex_QWP4DWU2 = c2x(QWP4DWU2)
  hex_QWP4VDWT = c2x(QWP4VDWT)
  hex_QWP4STHT = c2x(QWP4STHT)
  hex_QWP4STRL = c2x(QWP4STRL)
  hex_QWP4KDSA = c2x(QWP4KDSA)
  hex_QWP4KDSB = c2x(QWP4KDSB)
  hex_QWP4RDEU = c2x(QWP4RDEU)
  hex_QWP4LRUT = c2x(QWP4LRUT)
  hex_QWP4PF32 = c2x(QWP4PF32)
  hex_QWP4PFT1 = c2x(QWP4PFT1)
  hex_QWP4PFT2 = c2x(QWP4PFT2)
  hex_QWP4BBTR = c2x(QWP4BBTR)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QWP4PSID = c2x(QWP4PSID)
  hex_QWP4DSPM = c2x(QWP4DSPM)
  hex_QWP4LKTS = c2x(QWP4LKTS)
  hex_QWP4LKUS = c2x(QWP4LKUS)
  hex_QWP4ADM2 = c2x(QWP4ADM2)
  hex_QWP4OPR1 = c2x(QWP4OPR1)
  hex_QWP4OPR2 = c2x(QWP4OPR2)
  hex_QWP4CHKL = c2x(QWP4CHKL)
  hex_QWP4PDQ = c2x(QWP4PDQ)
  hex_QWP4PCBS = c2x(QWP4PCBS)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QWP4NCPU = c2x(QWP4NCPU)
  hex_QWP4HRC = c2x(QWP4HRC)
  hex_QWP4PCWH = c2x(QWP4PCWH)
  hex_QWP4PCRB = c2x(QWP4PCRB)
  hex_QWP4MXRB = c2x(QWP4MXRB)
  hex_QWP4HRCD = c2x(QWP4HRCD)
  hex_QWP4RCST = c2x(QWP4RCST)
  hex_QWP4TRWT = c2x(QWP4TRWT)
  hex_QWP4WPFQ = c2x(QWP4WPFQ)
  hex_QWP4WPFS = c2x(QWP4WPFS)
  hex_QWP4SQTM = c2x(QWP4SQTM)
  hex_QWP4SQTD = c2x(QWP4SQTD)
  hex_QWP4VDTM = c2x(QWP4VDTM)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QWP4MPFQ = c2x(QWP4MPFQ)
  hex_QWP4SWFU = c2x(QWP4SWFU)
  hex_QWP4TISP = c2x(QWP4TISP)
  hex_QWP4DRBS = c2x(QWP4DRBS)
  hex_QWP4RMIN = c2x(QWP4RMIN)
  hex_QWP4RMAX = c2x(QWP4RMAX)
  hex_QWP4RNLP = c2x(QWP4RNLP)
  hex_QWP4AUCA = c2x(QWP4AUCA)
  hex_QWP4INTV = c2x(QWP4INTV)
  hex_QWP4QCTM = c2x(QWP4QCTM)
  hex_QWP4TDDN = c2x(QWP4TDDN)
  hex_QWP4MDDN = c2x(QWP4MDDN)
  hex_QWP4TXS = c2x(QWP4TXS)
  hex_QWP4SRBT = c2x(QWP4SRBT)
  hex_QWP4AND = c2x(QWP4AND)
  hex_QWP4OR = c2x(QWP4OR)
  hex_QWP4CPUM = c2x(QWP4CPUM)
  hex_QWP4FDP = c2x(QWP4FDP)
  hex_QWP4KNFC = c2x(QWP4KNFC)
  hex_QWP4UTO = c2x(QWP4UTO)
  hex_QWP4EST = c2x(QWP4EST)
  hex_QWP4CUT = c2x(QWP4CUT)
  hex_QWP4SPC = c2x(QWP4SPC)
  hex_QWP4SPS = c2x(QWP4SPS)
  hex_QWP4AST = c2x(QWP4AST)
  hex_QWP4WBMP = c2x(QWP4WBMP)
  hex_QWP4WDLI = c2x(QWP4WDLI)
  hex_QWP4XCTH = c2x(QWP4XCTH)
  hex_QWP4BNVA = c2x(QWP4BNVA)
  hex_QWP4SCTM = c2x(QWP4SCTM)
  hex_QWP4MDEG = c2x(QWP4MDEG)
  hex_QWP4PAC = c2x(QWP4PAC)
  hex_QWP4UBS = c2x(QWP4UBS)
  hex_QWP4AURT = c2x(QWP4AURT)
  hex_QWP4REGF = c2x(QWP4REGF)
  hex_QWP4REGC = c2x(QWP4REGC)
  hex_QWP4REGA = c2x(QWP4REGA)
  hex_QWP4REGO = c2x(QWP4REGO)
  hex_QWP4SIT = c2x(QWP4SIT)
  hex_QWP4REGN = c2x(QWP4REGN)
  hex_QWP4KSIZ = c2x(QWP4KSIZ)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QWP4ABN = c2x(QWP4ABN)
  hex_QWP4DXTP = c2x(QWP4DXTP)
  hex_QWP4RMTI = c2x(QWP4RMTI)
  hex_QWP4ZTN = c2x(QWP4ZTN)
  hex_QWP4ZUT = c2x(QWP4ZUT)
  hex_QWP4MDE = c2x(QWP4MDE)
  hex_QWP4ESC = c2x(QWP4ESC)
  hex_QWP4CDEG = c2x(QWP4CDEG)
  hex_QWP4CDE1 = c2x(QWP4CDE1)
  hex_QWP4PKYU = c2x(QWP4PKYU)
  hex_QWP4FLMT = c2x(QWP4FLMT)
  hex_QWP4FLBS = c2x(QWP4FLBS)
  hex_QWP4ULBZ = c2x(QWP4ULBZ)
  hex_QWP4ULFR = c2x(QWP4ULFR)
  hex_QWP4RHTI = c2x(QWP4RHTI)
  hex_QWP4UMD = c2x(QWP4UMD)
  hex_QWP4MXKD = c2x(QWP4MXKD)
  hex_QWP4SREC = c2x(QWP4SREC)
  hex_QWP4LTDM = c2x(QWP4LTDM)
  hex_QWP4MS4A = c2x(QWP4MS4A)
  hex_QWP4ACAN = c2x(QWP4ACAN)
  hex_QWP4MS4B = c2x(QWP4MS4B)
  hex_QWP4DSFL = c2x(QWP4DSFL)
  hex_QWP4COC1 = c2x(QWP4COC1)
  hex_QWP4COC2 = c2x(QWP4COC2)
  hex_QWP4WAIT = c2x(QWP4WAIT)
  hex_QWP4CTHR = c2x(QWP4CTHR)
  hex_QWP4RAC = c2x(QWP4RAC)
  hex_QWP4STHR = c2x(QWP4STHR)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_QWP4DSMX = c2x(QWP4DSMX)
  hex_QWP4LEM = c2x(QWP4LEM)
  hex_QWP4OZTP = c2x(QWP4OZTP)
  hex_QWP4MS4C = c2x(QWP4MS4C)
  hex_QWP4PLIM = c2x(QWP4PLIM)
  hex_QWP4MDSC = c2x(QWP4MDSC)
  hex_QWP4MXTB = c2x(QWP4MXTB)
  hex_QWP4MXCE = c2x(QWP4MXCE)
  hex_QWP4NPAG = c2x(QWP4NPAG)
  hex_QWP4SJRT = c2x(QWP4SJRT)
  hex_QWP4DCFS = c2x(QWP4DCFS)
  hex_QWP4DCIX = c2x(QWP4DCIX)
  hex_QWP4DDLTO = c2x(QWP4DDLTO)
  hex_QWP4OZUS = c2x(QWP4OZUS)
  hex_QWP4OZCI = c2x(QWP4OZCI)
  hex_QWP4OZTM = c2x(QWP4OZTM)
  hex_RSVD0008 = c2x(RSVD0008)
  hex_QWP4INTE = c2x(QWP4INTE)
  hex_QWP4SJTB = c2x(QWP4SJTB)
  hex_QWP4TJTH = c2x(QWP4TJTH)
  hex_RSVD0009 = c2x(RSVD0009)
  hex_QWP4INLP = c2x(QWP4INLP)
  hex_QWP4FLKT = c2x(QWP4FLKT)
  hex_QWP4RSMX = c2x(QWP4RSMX)
  hex_RSVD0010 = c2x(RSVD0010)
  hex_QWP4PAEF = c2x(QWP4PAEF)
  hex_RSVD0011 = c2x(RSVD0011)
  hex_QWP4SADM_Off = c2x(QWP4SADM_Off)
  hex_QWP4DFID_Off = c2x(QWP4DFID_Off)
  hex_QWP4ADM2_Off = c2x(QWP4ADM2_Off)
  hex_QWP4OPR1_Off = c2x(QWP4OPR1_Off)
  hex_QWP4OPR2_Off = c2x(QWP4OPR2_Off)
  hex_QWP4REGC_Off = c2x(QWP4REGC_Off)
  hex_QWP4REGA_Off = c2x(QWP4REGA_Off)
  hex_QWP4REGO_Off = c2x(QWP4REGO_Off)
  hex_QWP4OZUS_Off = c2x(QWP4OZUS_Off)
  hex_QWP4EDBC = c2x(QWP4EDBC)
  hex_QWP4ESTC = c2x(QWP4ESTC)
  hex_QWP4MQTH = c2x(QWP4MQTH)
  hex_QWP4RFSH = c2x(QWP4RFSH)
  hex_RSVD0012 = c2x(RSVD0012)
  hex_QWP4MNTY = c2x(QWP4MNTY)
  hex_QWP4MXOS = c2x(QWP4MXOS)
  hex_QWP4MXOC = c2x(QWP4MXOC)
  hex_RSVD0013 = c2x(RSVD0013)
  hex_QWP4ACRT = c2x(QWP4ACRT)
  hex_QWP4LRTH = c2x(QWP4LRTH)
  hex_QWP4TTRS = c2x(QWP4TTRS)
  hex_QWP4VDTY = c2x(QWP4VDTY)
  hex_QWP4SCLC = c2x(QWP4SCLC)
  hex_QWP4MIS5 = c2x(QWP4MIS5)
  hex_QWP4MIS6 = c2x(QWP4MIS6)
  hex_QWP4MXNC = c2x(QWP4MXNC)
  hex_QWP4MXSP = c2x(QWP4MXSP)
  hex_QWP4SELD = c2x(QWP4SELD)
  hex_QWP4APS = c2x(QWP4APS)
  hex_QWP4FRLC = c2x(QWP4FRLC)
  hex_QWP4PMGT = c2x(QWP4PMGT)
  hex_QWP4SRTN = c2x(QWP4SRTN)
  hex_QWP4CHEC = c2x(QWP4CHEC)
  hex_QWP4NUPT = c2x(QWP4NUPT)
  hex_QWP4METR = c2x(QWP4METR)
  hex_QWP4ACCS = c2x(QWP4ACCS)
  hex_QWP4MS4D = c2x(QWP4MS4D)
  hex_QWP4MS4E = c2x(QWP4MS4E)
  hex_QWP4FCPPRC = c2x(QWP4FCPPRC)
  hex_RSVD0014 = c2x(RSVD0014)
  hex_RSVD0015 = c2x(RSVD0015)
  hex_RSVD0016 = c2x(RSVD0016)
  hex_QWP4CQAC = c2x(QWP4CQAC)
  hex_RSVD0017 = c2x(RSVD0017)
  hex_RSVD0018 = c2x(RSVD0018)
  hex_RSVD0019 = c2x(RSVD0019)
  hex_RSVD0020 = c2x(RSVD0020)
  hex_QWP4RPSN = c2x(QWP4RPSN)
  hex_QWP4RLPR = c2x(QWP4RLPR)
  hex_QWP4WFAL = c2x(QWP4WFAL)
  hex_QWP4ADMT = c2x(QWP4ADMT)
  hex_QWP4EXQRY = c2x(QWP4EXQRY)
  hex_RSVD0021 = c2x(RSVD0021)
  hex_QWP4QACO = c2x(QWP4QACO)
  hex_RSVD0022 = c2x(RSVD0022)
  hex_QWP4RSLV = c2x(QWP4RSLV)
  hex_QWP4RSDC = c2x(QWP4RSDC)
  hex_QWP4RSMT = c2x(QWP4RSMT)
  hex_QWP4MXDC = c2x(QWP4MXDC)
  hex_QWP4SKLC = c2x(QWP4SKLC)
  hex_QWP4ABVC = c2x(QWP4ABVC)
  hex_QWP4MXAB = c2x(QWP4MXAB)
  hex_RSVD0023 = c2x(RSVD0023)
  hex_QWP4MS4F = c2x(QWP4MS4F)
  hex_RSVD0024 = c2x(RSVD0024)
  hex_QWP4IAST = c2x(QWP4IAST)
  hex_RSVD0025 = c2x(RSVD0025)
  hex_QWP4DATE = c2x(QWP4DATE)
  hex_QWP4SADM_Len = c2x(QWP4SADM_Len)
  hex_QWP4DFID_Len = c2x(QWP4DFID_Len)
  hex_QWP4ADM2_Len = c2x(QWP4ADM2_Len)
  hex_QWP4OPR1_Len = c2x(QWP4OPR1_Len)
  hex_QWP4OPR2_Len = c2x(QWP4OPR2_Len)
  hex_QWP4REGC_Len = c2x(QWP4REGC_Len)
  hex_QWP4REGS_Len = c2x(QWP4REGS_Len)
  hex_QWP4REGO_Len = c2x(QWP4REGO_Len)
  hex_QWP4OZUS_Len = c2x(QWP4OZUS_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP4",desired_dsect) > 0)) then do
    void_rc = queue_QWP4_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP4:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP4_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP4:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4LEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EYECATCHER VALUE OF  SPRM    x:" hex_QWP4EYE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4LVL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MMRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4WREN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QWP4BPOF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CHARACTER STRING FOR MVS/XA  x:" hex_QWP4MVS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4CNTL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4IDCK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MISC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MISZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER INDICATES THE x:" hex_QWP4AUTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U INSTALLATION SYSTEM ADMIN x:" hex_QWP4SADM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MIS2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MIS3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MIS4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER WILL CONTAIN  x:" hex_QWP4EDPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4VCOF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DBOF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SYSTEM DEFAULT USER ID.   x:" hex_QWP4DFID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER WILL CONTAIN  x:" hex_QWP4IPRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER WILL CONTAIN  x:" hex_QWP4ISID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER WILL CONTAIN  x:" hex_QWP4TOUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER CONTAINS THE  x:" hex_QWP4ISWT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER CONTAINS THE  x:" hex_QWP4ISWI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4IAU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4DBC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SWFN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORT POOL SIZE               x:" hex_QWP4SPOL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SMXN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4BMC1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4BMC2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SWT1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SWT2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DWF1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DWU1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DWU2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4VDWT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statistics history default   x:" hex_QWP4STHT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statistics rollup default    x:" hex_QWP4STRL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4KDSA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4KDSB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RDEU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4LRUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PF32
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PFT1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PFT2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4BBTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PSID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DSPM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX PAGE LOCKS PER TABLESPAC x:" hex_QWP4LKTS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX PAGE LOCKS PER APPLICATI x:" hex_QWP4LKUS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SYSTEM ADMIN ID2          x:" hex_QWP4ADM2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U MVS OPERATOR ID           x:" hex_QWP4OPR1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U MVS OPERATOR ID2          x:" hex_QWP4OPR2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4CHKL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PDQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PCBS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SIMULATED NUMBER OF CPUs     x:" hex_QWP4NCPU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4HRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PCWH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PCRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MXRB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4HRCD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RCST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4TRWT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4WPFQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4WPFS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SQTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SQTD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4VDTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MPFQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SWFU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4TISP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DRBS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RMIN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF RID BLOCKS x:" hex_QWP4RMAX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RNLP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTHORIZATION CACHE SIZE     x:" hex_QWP4AUCA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4INTV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4QCTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VALUE FOR TRIGGER DRAIN      x:" hex_QWP4TDDN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX # OF DDS WITH HOLD       x:" hex_QWP4MDDN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4TXS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SRBT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4AND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU FOR EXPLAIN STATEMENTS   x:" hex_QWP4CPUM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER FIELD PROCS FOR DESCR x:" hex_QWP4FDP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM #  NOT FOUND  HASH R x:" hex_QWP4KNFC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTILITY TIMEOUT FACTOR       x:" hex_QWP4UTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM EXTEND SERVICE TASKS x:" hex_QWP4EST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4CUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SPC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SPS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4AST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMS/BMP TIMEOUT FACTOR       x:" hex_QWP4WBMP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMS/DLI TIMEOUT FACTOR       x:" hex_QWP4WDLI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4XCTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BIND NEW PACKAGE             x:" hex_QWP4BNVA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SCTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UPPER LIMIT ON THE DEGREE OF x:" hex_QWP4MDEG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PACKAGE AUTHORIZATION CACHE  x:" hex_QWP4PAC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4UBS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4AURT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDL REGISTRATION FACILITY FL x:" hex_QWP4REGF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U DDL REG TABLE OWNER       x:" hex_QWP4REGC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U DDL REG ART NAME          x:" hex_QWP4REGA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U DDL REG ORT NAME          x:" hex_QWP4REGO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SITE TYPE FLAG               x:" hex_QWP4SIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDL REG DATABASE NAME        x:" hex_QWP4REGN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL PACKAGE HASH TABLE5  x:" hex_QWP4KSIZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENABLE/DISABLE AUTOBIND      x:" hex_QWP4ABN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DXTP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RMTI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROJECT Z INSERTION THRESHOL x:" hex_QWP4ZTN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4ZUT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX ZIVLEMPEL DICTIONARY ENT x:" hex_QWP4MDE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDL REG ESCAPE CHARACTER     x:" hex_QWP4ESC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT CURRENT DEGREE SPECI x:" hex_QWP4CDEG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FOR QWP4CDEG EXPANS x:" hex_QWP4CDE1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ALLOW UPDATE OF PARTITIONING x:" hex_QWP4PKYU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4FLMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4FLBS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4ULBZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4ULFR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RHTI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4UMD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM KEPT DYNAMIC STATEME x:" hex_QWP4MXKD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4SREC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4LTDM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MS4A
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4ACAN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PK14923                      x:" hex_QWP4MS4B
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DSFL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4COC1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4COC2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETAINED LOCK TIMEOUT MULTIP x:" hex_QWP4WAIT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4CTHR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROUTINE AUTHORIZATION CACHE  x:" hex_QWP4RAC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4STHR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved - Do not use        x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF DATASETS   x:" hex_QWP4DSMX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM NUMBER OF LE TOKENS  x:" hex_QWP4LEM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Online ZParm type            x:" hex_QWP4OZTP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MS4C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4PLIM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MINIMUM SCALE FOR DECIMAL DI x:" hex_QWP4MDSC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MXTB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MXCE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NPAGES threshold for optimiz x:" hex_QWP4NPAG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Star join ratio              x:" hex_QWP4SJRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SMS DataClass - File(data) T x:" hex_QWP4DCFS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SMS DataClass - Index Tables x:" hex_QWP4DCIX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL data definition time out x:" hex_QWP4DDLTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Online ZParm userid monit x:" hex_QWP4OZUS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Online ZParm corrid monitor  x:" hex_QWP4OZCI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Online ZParm time changed    x:" hex_QWP4OZTM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved - Do not use        x:" hex_RSVD0008
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RTS Statistics timer interva x:" hex_QWP4INTE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Star join threshold (#tbls / x:" hex_QWP4SJTB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Do not reuse                 x:" hex_QWP4TJTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Do not reuse                 x:" hex_RSVD0009
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4INLP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4FLKT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4RSMX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Do not reuse                 x:" hex_RSVD0010
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Parallism efficiency factor  x:" hex_QWP4PAEF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0011
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4SADM_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4DFID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4ADM2_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4OPR1_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4OPR2_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4REGC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4REGA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4REGO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QWP4 to          x:" hex_QWP4OZUS_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EDM pool DBD cache size      x:" hex_QWP4EDBC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EDM pool statement cache siz x:" hex_QWP4ESTC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MQTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Refresh age                  x:" hex_QWP4RFSH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved for extension       x:" hex_RSVD0012
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maintained table type, a bit x:" hex_QWP4MNTY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MXOS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4MXOC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Do not reuse                 x:" hex_RSVD0013
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4ACRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Uncomitd read warning thresh x:" hex_QWP4LRTH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4TTRS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Device type for temporary da x:" hex_QWP4VDTY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4SCLC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MIS5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MIS6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max cursors open per thread  x:" hex_QWP4MXNC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max active stored procs per  x:" hex_QWP4MXSP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4SELD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4APS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Free local cached statements x:" hex_QWP4FRLC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REBIND PLAN_MGMT default     x:" hex_QWP4PMGT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SORTNUM ELIMINATION          x:" hex_QWP4SRTN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTIL_TEMP_STORCLAS           x:" hex_QWP4CHEC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of utility parts      x:" hex_QWP4NUPT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      z/OS metrics configuration   x:" hex_QWP4METR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCEL START PARAMETER        x:" hex_QWP4ACCS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MS4D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MS4E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLASHCOPY_PPRC:              x:" hex_QWP4FCPPRC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0014
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0015
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0016
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT QUERY ACCELERATOR re x:" hex_QWP4CQAC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0017
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0018
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0019
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0020
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REORG_PART_SORT_NPSI option  x:" hex_QWP4RPSN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REORG_LIST_PROCESSING option x:" hex_QWP4RLPR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max temp storage per agent i x:" hex_QWP4WFAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Admin Scheduler JCL proc nam x:" hex_QWP4ADMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4EXQRY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0021
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY_ACCEL_OPTIONS          x:" hex_QWP4QACO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0022
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Y=DRDA Alias resolution (SPR x:" hex_QWP4RSLV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Utils RESTORE SYSTEM dump cl x:" hex_QWP4RSDC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Utils RESTORE SYSTEM max tap x:" hex_QWP4RSMT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max virtual memory alloc for x:" hex_QWP4MXDC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EDM skeleton pool size       x:" hex_QWP4SKLC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4ABVC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Max concurrent package opera x:" hex_QWP4MXAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not available                x:" hex_RSVD0023
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP4MS4F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0024
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (s)                          x:" hex_QWP4IAST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0025
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWP4DATE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4SADM_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4DFID_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4ADM2_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4OPR1_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4OPR2_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4REGC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4REGS_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4REGO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QWP4OZUS_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP5 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP5:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP5,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP5 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP5 ,
    =00001 QWP5FLG +1 , /* X - Process flags                   00000 */
  ,     /* QWP5PCY EQU x'00000080' 1=PC yes specified                */
    =00002 RSVD0001 +3 , /* X - Reserved                       00001 */
    =00005 QWP5DLOK +2 , /* H - Wait time for local deadlock   00004 */
    =00007 QWP5DCYC +2 , /* H - # of local cycles/global cycle 00006 */
    =00009 QWP5TVAL +4 , /* F - Timeout interval               00008 */
    =00013 QWP5MCSA +4 , /* F - IRLM maximum CSA usage allowed 0000C */
    =00017 QWP5HASH +4 , /* F - MVS lock table hash entries    00010 */
    =00021 QWP5PHSH +4 , /* F - Pending # Hash entries         00014 */
    =00025 QWP5RLE +4 , /* F - MVS lock table list entries     00018 */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QWP5FLG = c2x(QWP5FLG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWP5DLOK = c2x(QWP5DLOK)
  hex_QWP5DCYC = c2x(QWP5DCYC)
  hex_QWP5TVAL = c2x(QWP5TVAL)
  hex_QWP5MCSA = c2x(QWP5MCSA)
  hex_QWP5HASH = c2x(QWP5HASH)
  hex_QWP5PHSH = c2x(QWP5PHSH)
  hex_QWP5RLE = c2x(QWP5RLE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP5",desired_dsect) > 0)) then do
    void_rc = queue_QWP5_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP5:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP5_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP5:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Process flags                x:" hex_QWP5FLG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Wait time for local deadlock x:" hex_QWP5DLOK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of local cycles/global cyc x:" hex_QWP5DCYC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timeout interval             x:" hex_QWP5TVAL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IRLM maximum CSA usage allow x:" hex_QWP5MCSA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS lock table hash entries  x:" hex_QWP5HASH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pending # Hash entries       x:" hex_QWP5PHSH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS lock table list entries  x:" hex_QWP5RLE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP6 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP6:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP6,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP6 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP6 ,
,/* =00001 QWP6VCAT +0 ,    C -                                00000 */
    =00001 QWP6CATN +8 , /* C - CATALOG NAME                   00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QWP6CATN = c2x(QWP6CATN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP6",desired_dsect) > 0)) then do
    void_rc = queue_QWP6_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP6:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP6_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP6:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CATALOG NAME                 x:" hex_QWP6CATN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP7 length is 00001
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP7:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP7,1)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP7 Length: 1"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP7 ,
    =00001 QWP7STR +1 , /* X -                                 00000 */
  ,     /* QWP7STRT EQU x'00000080' YES = ALL DB2 DATA BASES SHOULD  */
  ,     /* QWP7REST EQU x'00000040' YES = THE SPECIFIED DATABASES AN */
    .           /* End of DSECT */
  /* next byte at 2 */
  hex_QWP7STR = c2x(QWP7STR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP7",desired_dsect) > 0)) then do
    void_rc = queue_QWP7_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP7:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP7_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP7:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QWP7STR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP8 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP8:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP8,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP8 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP8 ,
    =00001 QWP8DBNM +8 , /* C - THIS PARAMETER WILL CONTAIN AN 00000 */
    =00009 QWP8SPNM +8 , /* C - THIS PARAMETER WILL CONTAIN AN 00008 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QWP8DBNM = c2x(QWP8DBNM)
  hex_QWP8SPNM = c2x(QWP8SPNM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP8",desired_dsect) > 0)) then do
    void_rc = queue_QWP8_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP8:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP8_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP8:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER WILL CONTAIN  x:" hex_QWP8DBNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER WILL CONTAIN  x:" hex_QWP8SPNM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWP9 length is 00058
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWP9:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWP9,88)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWP9 Length: 88"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWP9 ,
    =00001 QWP9CID +2 , /* H - CONTROL BLOCK HEX ID (0016)     00000 */
    =00003 QWP9LL +2 , /* H - CONTROL BLOCK LENGTH             00002 */
    =00005 QWP9EID +4 , /* C - EBCDIC CONTROL BLOCK ID=FAC     00004 */
    =00009 QWP9NM +2 , /* H - NUMBER OF FACILITY ENTRIES       00008 */
    =00011 QWP9TTO +2 , /* H - IDLE THREAD TIMEOUT INTERVAL    0000A */
,/* =00013 QWP9ENT +0 ,    C - FACILITY ENTRY - MAX 10         0000C */
    =00013 QWP9NAME +8 , /* C - FACILITY NAME                  0000C */
    =00021 QWP9STRT +1 , /* C - FACILITY START PARAMETER       00014 */
    =00022 QWP9RLER +1 , /* X - RLF ERROR PARAMTER             00015 */
  ,     /* QWP9RLFL EQU x'00000080' IF 1, INDICATE NOLIMIT           */
  ,     /* QWP9RLFR EQU x'00000040' IF 1, INDICATE NORUN             */
    =00023 QWP9RYC +2 , /* H - MINUTES BETWEEN RESYNC PERIODS  00016 */
    =00025 QWP9RLFN +4 , /* F - SPECIFIES THE LIMIT IN SUs     00018 */
    =00029 QWP9CMST +8 , /* C - DDF THREAD STATUS              0001C */
    =00037 QWP9MISC +1 , /* X - MISCELLANEOUS PARAMETERS       00024 */
  ,     /* QWP9TCPA EQU x'00000080' YES=ALREADY VERIFIED CONNECTIONS */
  ,     /* QWP9SINTD EQU x'00000040' YES=Sql INTerrupt Disabled      */
  ,     /* QWP9PRSTD EQU x'00000020' YES=Progressive Streaming Defau */
  ,     /* QWP9PRVP EQU x'00000010' YES=Private protocol No(pp disab */
  ,     /* QWP9PRVPA EQU x'00000008' YES=Private protocol Auth       */
    =00038 RSVD0001 +3 , /* C - RESERVED                       00025 */
    =00041 QWP9MAX1 +4 , /* F - MAXIMUM TYPE 1 INACTIVE THREAD 00028 */
    =00045 QWP9TCKA +2 , /* H - TCP/IP KEEPALIVE OVERRIDE      0002C */
    =00047 QWP9INAC +2 , /* H - POOL THREAD TIMEOUT VALUE      0002E */
    =00049 RSVD0002 +40 , /* C - RESERVED                      00030 */
,/* =00089 QWP9END +0 ,    C - END OF QWP9                     00058 */
  ,     /* QWP9XID EQU x'00000016' (S)                               */
  ,     /* QWP9EBID EQU x'C6C1C340' EBCDIC ID OF FAC                 */
    .           /* End of DSECT */
  /* next byte at 89 */
  hex_QWP9CID = c2x(QWP9CID)
  hex_QWP9LL = c2x(QWP9LL)
  hex_QWP9EID = c2x(QWP9EID)
  hex_QWP9NM = c2x(QWP9NM)
  hex_QWP9TTO = c2x(QWP9TTO)
  hex_QWP9NAME = c2x(QWP9NAME)
  hex_QWP9STRT = c2x(QWP9STRT)
  hex_QWP9RLER = c2x(QWP9RLER)
  hex_QWP9RYC = c2x(QWP9RYC)
  hex_QWP9RLFN = c2x(QWP9RLFN)
  hex_QWP9CMST = c2x(QWP9CMST)
  hex_QWP9MISC = c2x(QWP9MISC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWP9MAX1 = c2x(QWP9MAX1)
  hex_QWP9TCKA = c2x(QWP9TCKA)
  hex_QWP9INAC = c2x(QWP9INAC)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWP9",desired_dsect) > 0)) then do
    void_rc = queue_QWP9_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWP9:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWP9_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWP9:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK HEX ID (0016)  x:" hex_QWP9CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QWP9LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EBCDIC CONTROL BLOCK ID=FAC  x:" hex_QWP9EID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF FACILITY ENTRIES   x:" hex_QWP9NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IDLE THREAD TIMEOUT INTERVAL x:" hex_QWP9TTO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FACILITY NAME                x:" hex_QWP9NAME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FACILITY START PARAMETER     x:" hex_QWP9STRT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RLF ERROR PARAMTER           x:" hex_QWP9RLER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MINUTES BETWEEN RESYNC PERIO x:" hex_QWP9RYC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SPECIFIES THE LIMIT IN SUs   x:" hex_QWP9RLFN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDF THREAD STATUS            x:" hex_QWP9CMST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MISCELLANEOUS PARAMETERS     x:" hex_QWP9MISC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM TYPE 1 INACTIVE THRE x:" hex_QWP9MAX1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TCP/IP KEEPALIVE OVERRIDE    x:" hex_QWP9TCKA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POOL THREAD TIMEOUT VALUE    x:" hex_QWP9INAC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWPA length is 00100
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWPA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWPA,256)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWPA Length: 256"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWPA ,
    =00001 QWPAID +2 , /* H - CONTROL BLOCK HEX ID (213E)      00000 */
    =00003 QWPALL +2 , /* H - CONTROL BLOCK LENGTH             00002 */
    =00005 QWPAEID +4 , /* C - CONTROL BLOCK EBCDIC ID GRP     00004 */
    =00009 QWPALVL +8 , /* C - LEVEL CHECK FOR PARAMETERS      00008 */
    =00017 QWPAGRPN +8 , /* C - GROUP NAME                     00010 */
    =00025 QWPAMBRN +8 , /* C - MEMBER NAME                    00018 */
    =00033 QWPAIOPT +1 , /* X - INITIALIZATION OPTIONS         00020 */
  ,     /* QWPADSHR EQU x'00000080' IF 1 INDICATES DATA SHARING = YE */
    =00034 QWPACOOR +1 , /* C - THIS PARAMETER INDICATES WHETH 00021 */
    =00035 QWPAASST +1 , /* C - THIS PARAMETER INDICATES WHETH 00022 */
    =00036 QWPAIMMW +1 , /* C - IMMEDWRITE override flag       00023 */
  ,     /* QWPAIMWY EQU x'00000000' IMMEDWRITE(YES) for all plans/pk */
  ,     /* QWPAIMWN EQU x'000000D5' IMMEDWRITE(NO) for all plans/pkg */
    =00037 QWPAMAXM +4 , /* F - MAX NUMBER OF MEMBERS = (SET T 00024 */
    =00041 QWPASUCV +4 , /* F - THIS FIELD DOES NOT MAP TO AN  00028 */
    =00045 QWPARAND +1 , /* C - RANDOM GROUP ATTACH flag       0002C */
    =00046 RSVD0001 +211 , /* C - UNUSED                       0002D */
,/* =00257 QWPAEND +0 ,    C - END OF QWPA                     00100 */
  ,     /* QWPAIDC EQU x'0000213E' (S)                               */
  ,     /* QWPAEIDC EQU x'C7D9D740' EBCDIC ID OF GRP                 */
    .           /* End of DSECT */
  /* next byte at 257 */
  hex_QWPAID = c2x(QWPAID)
  hex_QWPALL = c2x(QWPALL)
  hex_QWPAEID = c2x(QWPAEID)
  hex_QWPALVL = c2x(QWPALVL)
  hex_QWPAGRPN = c2x(QWPAGRPN)
  hex_QWPAMBRN = c2x(QWPAMBRN)
  hex_QWPAIOPT = c2x(QWPAIOPT)
  hex_QWPACOOR = c2x(QWPACOOR)
  hex_QWPAASST = c2x(QWPAASST)
  hex_QWPAIMMW = c2x(QWPAIMMW)
  hex_QWPAMAXM = c2x(QWPAMAXM)
  hex_QWPASUCV = c2x(QWPASUCV)
  hex_QWPARAND = c2x(QWPARAND)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWPA",desired_dsect) > 0)) then do
    void_rc = queue_QWPA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWPA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWPA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWPA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK HEX ID (213E)  x:" hex_QWPAID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QWPALL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EBCDIC ID GRP  x:" hex_QWPAEID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LEVEL CHECK FOR PARAMETERS   x:" hex_QWPALVL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GROUP NAME                   x:" hex_QWPAGRPN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEMBER NAME                  x:" hex_QWPAMBRN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INITIALIZATION OPTIONS       x:" hex_QWPAIOPT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER INDICATES WHE x:" hex_QWPACOOR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS PARAMETER INDICATES WHE x:" hex_QWPAASST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMMEDWRITE override flag     x:" hex_QWPAIMMW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAX NUMBER OF MEMBERS = (SET x:" hex_QWPAMAXM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THIS FIELD DOES NOT MAP TO A x:" hex_QWPASUCV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RANDOM GROUP ATTACH flag     x:" hex_QWPARAND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QWPB length is 00104
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QWPB:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QWPB,260)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QWPB Length: 260"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QWPB ,
    =00001 QWPBID +2 , /* H - CONTROL BLOCK HEX ID (20C0)      00000 */
    =00003 QWPBLEN +2 , /* H - CONTROL BLOCK LENGTH            00002 */
    =00005 QWPBEYE +4 , /* C - CONTROL BLOCK EYECATCHER (DECP) 00004 */
    =00009 QWPBREL +4 , /* C - VERSION, RELEASE, MOD LEVEL     00008 */
    =00013 RSVD0001 +4 , /* C - RESERVED                       0000C */
    =00017 QWPBLVL +8 , /* C - (S)                             00010 */
    =00025 QWPBDE +1 , /* X - PERIOD/COMMA DEFAULT             00018 */
  ,     /* QWPBDEC EQU x'00000080' 0 = PERIOD, 1 = COMMA             */
    =00026 QWPBGRA +1 , /* X - YES/NO MIXED GRAPHIC DEFAULT    00019 */
  ,     /* QWPBGRAF EQU x'00000080' 0 = NO, 1 = YES                  */
    =00027 QWPBCHAR +8 , /* C - CHARSET DEFAULT                0001A */
    =00035 QWPBDL +1 , /* X - DELIMITER DEFAULT                00022 */
  ,     /* QWPBDEL EQU x'00000080' DELIMITER DEFAULT APOST = 0, QUOT */
  ,     /* QWPBDFT EQU x'00000040' DELIMITER DEFAULT DEFAULT = 0     */
    =00036 QWPBSDL +1 , /* X - SQL DELIMITER DEFAULT           00023 */
  ,     /* QWPBSDEL EQU x'00000080' SQL DELIMITER DEFAULT APOST = 0  */
  ,     /* QWPBSDFT EQU x'00000040' SQL DELIMITER DEFAULT DEFAULT =  */
    =00037 QWPBSSID +4 , /* C - SUBSYSTEM DEFAULT              00024 */
    =00041 QWPBLANG +8 , /* C - LANGUAGE DEFAULT               00028 */
    =00049 QWPBRIB +4 , /* A - POINTER TO RELEASE INFO BLOCK   00030 */
    =00053 QWPBDATE +5 , /* C - DATE FORMAT (ISO,JIS,EUR,LOCAL 00034 */
    =00058 QWPBDLEN +1 , /* X - LOCAL (ONLY) DATE LENGTH DEFAU 00039 */
    =00059 QWPBTIME +5 , /* C - TIME FORMAT (ISO,JIS,EUR.LOCAL 0003A */
    =00064 QWPBTLEN +1 , /* X - LOCAL (ONLY) TIME LENGTH DEFAU 0003F */
    =00065 QWPBAR +1 , /* X - DECIMAL ARITHMETIC DEFAULT       00040 */
  ,     /* QWPB15S0 EQU x'00000000' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S1 EQU x'00000008' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S2 EQU x'00000010' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S3 EQU x'00000018' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S4 EQU x'00000020' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S5 EQU x'00000028' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S6 EQU x'00000030' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S7 EQU x'00000038' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S8 EQU x'00000040' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPB15S9 EQU x'00000048' SETTING FOR DFLT D15, MIN DIV SC */
  ,     /* QWPBARTH EQU x'00000080' DECIMAL 15 = 0, DECIMAL 31 = 1   */
  ,     /* QWPB31S1 EQU x'00000088' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S2 EQU x'00000090' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S3 EQU x'00000098' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S4 EQU x'000000A0' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S5 EQU x'000000A8' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S6 EQU x'000000B0' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S7 EQU x'000000B8' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S8 EQU x'000000C0' SETTING FOR DFLT D31, MIN DIV SC */
  ,     /* QWPB31S9 EQU x'000000C8' SETTING FOR DFLT D31, MIN DIV SC */
    =00066 QWPBDRUL +1 , /* X - YES/NO  USE DECP FOR DYNAMICRU 00041 */
  ,     /* QWPBDRLS EQU x'00000080' 0 = NO, 1 = YES                  */
    =00067 QWPBSID +2 , /* R - SBCS CCSID                      00042 */
    =00069 QWPBMID +2 , /* R - MBCS CCSID                      00044 */
    =00071 QWPBGID +2 , /* R - GBCS CCSID                      00046 */
    =00073 QWPBSQL +1 , /* X - LEVEL OF SQL LANGUAGE SUPPORT   00048 */
    =00074 QWPBDSD +1 , /* X - DISTRIBUTED SQL STRING DELIMITE 00049 */
  ,     /* QWPBDSSD EQU x'00000080' APOST = 0, QUOTE = 1             */
    =00075 QWPBASID +2 , /* R - ASCII SBCS CCSID               0004A */
    =00077 QWPBAMID +2 , /* R - ASCII MBCS CCSID               0004C */
    =00079 QWPBAGID +2 , /* R - ASCII GBCS CCSID               0004E */
    =00081 QWPBENS +1 , /* X - DEFAULT ENCODING SCHEME         00050 */
  ,     /* QWPBENSC EQU x'000000C0' EBCDIC = 00, ASCII = 01, UNICODE */
    =00082 RSVD0002 +1 , /* X - DO NOT REUSE                   00051 */
    =00083 QWPBLCTP +50 , /* C - DEFAULT LOCALE LC_CTYPE       00052 */
    =00133 QWPBUSID +2 , /* R - UNICODE SBCS CCSID             00084 */
    =00135 QWPBUMID +2 , /* R - UNICODE MBCS CCSID             00086 */
    =00137 QWPBUGID +2 , /* R - UNICODE GBCS CCSID             00088 */
    =00139 QWPBAPSC +7 , /* C - APPLICATION ENCODING SCHEME    0008A */
    =00146 QWPBNUFN +1 , /* R - NEW FUNCTION MODE INDICATOR BY 00091 */
  ,     /* QWPBNEWF EQU x'00000080' NEW FUNCTION MODE INDICATOR, 0=N */
    =00147 QWPBPADN +1 , /* X - YES/NO  PAD NULL-TERMINATED ST 00092 */
  ,     /* QWPBPAD EQU x'00000080' 1 = NO, 0 = YES                   */
    =00148 QWPBDB2S +1 , /* C - DB2-supplied DECP indicator    00093 */
    =00149 QWPBDDRM +1 , /* R - Default DECFLOAT rounding mode 00094 */
  ,     /* QWPBRC EQU x'00000080' - ROUND_CEILING                LI6 */
  ,     /* QWPBRD EQU x'00000040' - ROUND_DOWN                   LI6 */
  ,     /* QWPBRF EQU x'00000020' - ROUND_FLOOR                  LI6 */
  ,     /* QWPBRHD EQU x'00000010' - ROUND_HALF_DOWN              LI */
  ,     /* QWPBRHE EQU x'00000008' - ROUND_HALF_EVEN              LI */
  ,     /* QWPBRHU EQU x'00000004' - ROUND_HALF_UP                LI */
  ,     /* QWPBRU EQU x'00000002' - ROUND_UP                     LI6 */
    =00150 QWPBLNM +54 , /* C - FULLY QUALIFIED DECP DATASET N 00095 */
    =00204 QWPBRESV +57 , /* C - RESERVED                      000CB */
,/* =00261 QWPBEND +0 ,    C - END OF QWPB                     00104 */
  ,     /* QWPBIDC EQU x'000020C0' (S)                               */
  ,     /* QWPBEIDC EQU x'C4C5C3D7' EBCDIC ID OF DECP                */
    .           /* End of DSECT */
  /* next byte at 261 */
  hex_QWPBID = c2x(QWPBID)
  hex_QWPBLEN = c2x(QWPBLEN)
  hex_QWPBEYE = c2x(QWPBEYE)
  hex_QWPBREL = c2x(QWPBREL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QWPBLVL = c2x(QWPBLVL)
  hex_QWPBDE = c2x(QWPBDE)
  hex_QWPBGRA = c2x(QWPBGRA)
  hex_QWPBCHAR = c2x(QWPBCHAR)
  hex_QWPBDL = c2x(QWPBDL)
  hex_QWPBSDL = c2x(QWPBSDL)
  hex_QWPBSSID = c2x(QWPBSSID)
  hex_QWPBLANG = c2x(QWPBLANG)
  hex_QWPBRIB = c2x(QWPBRIB)
  hex_QWPBDATE = c2x(QWPBDATE)
  hex_QWPBDLEN = c2x(QWPBDLEN)
  hex_QWPBTIME = c2x(QWPBTIME)
  hex_QWPBTLEN = c2x(QWPBTLEN)
  hex_QWPBAR = c2x(QWPBAR)
  hex_QWPBDRUL = c2x(QWPBDRUL)
  hex_QWPBSID = c2x(QWPBSID)
  hex_QWPBMID = c2x(QWPBMID)
  hex_QWPBGID = c2x(QWPBGID)
  hex_QWPBSQL = c2x(QWPBSQL)
  hex_QWPBDSD = c2x(QWPBDSD)
  hex_QWPBASID = c2x(QWPBASID)
  hex_QWPBAMID = c2x(QWPBAMID)
  hex_QWPBAGID = c2x(QWPBAGID)
  hex_QWPBENS = c2x(QWPBENS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QWPBLCTP = c2x(QWPBLCTP)
  hex_QWPBUSID = c2x(QWPBUSID)
  hex_QWPBUMID = c2x(QWPBUMID)
  hex_QWPBUGID = c2x(QWPBUGID)
  hex_QWPBAPSC = c2x(QWPBAPSC)
  hex_QWPBNUFN = c2x(QWPBNUFN)
  hex_QWPBPADN = c2x(QWPBPADN)
  hex_QWPBDB2S = c2x(QWPBDB2S)
  hex_QWPBDDRM = c2x(QWPBDDRM)
  hex_QWPBLNM = c2x(QWPBLNM)
  hex_QWPBRESV = c2x(QWPBRESV)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QWPB",desired_dsect) > 0)) then do
    void_rc = queue_QWPB_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QWPB:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QWPB_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QWPB:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK HEX ID (20C0)  x:" hex_QWPBID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK LENGTH         x:" hex_QWPBLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTROL BLOCK EYECATCHER (DE x:" hex_QWPBEYE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION, RELEASE, MOD LEVEL  x:" hex_QWPBREL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QWPBLVL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PERIOD/COMMA DEFAULT         x:" hex_QWPBDE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      YES/NO MIXED GRAPHIC DEFAULT x:" hex_QWPBGRA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CHARSET DEFAULT              x:" hex_QWPBCHAR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DELIMITER DEFAULT            x:" hex_QWPBDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL DELIMITER DEFAULT        x:" hex_QWPBSDL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUBSYSTEM DEFAULT            x:" hex_QWPBSSID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LANGUAGE DEFAULT             x:" hex_QWPBLANG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POINTER TO RELEASE INFO BLOC x:" hex_QWPBRIB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATE FORMAT (ISO,JIS,EUR,LOC x:" hex_QWPBDATE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCAL (ONLY) DATE LENGTH DEF x:" hex_QWPBDLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME FORMAT (ISO,JIS,EUR.LOC x:" hex_QWPBTIME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCAL (ONLY) TIME LENGTH DEF x:" hex_QWPBTLEN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DECIMAL ARITHMETIC DEFAULT   x:" hex_QWPBAR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      YES/NO  USE DECP FOR DYNAMIC x:" hex_QWPBDRUL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SBCS CCSID                   x:" hex_QWPBSID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MBCS CCSID                   x:" hex_QWPBMID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GBCS CCSID                   x:" hex_QWPBGID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LEVEL OF SQL LANGUAGE SUPPOR x:" hex_QWPBSQL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DISTRIBUTED SQL STRING DELIM x:" hex_QWPBDSD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASCII SBCS CCSID             x:" hex_QWPBASID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASCII MBCS CCSID             x:" hex_QWPBAMID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASCII GBCS CCSID             x:" hex_QWPBAGID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT ENCODING SCHEME      x:" hex_QWPBENS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DO NOT REUSE                 x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFAULT LOCALE LC_CTYPE      x:" hex_QWPBLCTP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNICODE SBCS CCSID           x:" hex_QWPBUSID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNICODE MBCS CCSID           x:" hex_QWPBUMID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNICODE GBCS CCSID           x:" hex_QWPBUGID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      APPLICATION ENCODING SCHEME  x:" hex_QWPBAPSC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW FUNCTION MODE INDICATOR  x:" hex_QWPBNUFN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      YES/NO  PAD NULL-TERMINATED  x:" hex_QWPBPADN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2-supplied DECP indicator  x:" hex_QWPBDB2S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Default DECFLOAT rounding mo x:" hex_QWPBDDRM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FULLY QUALIFIED DECP DATASET x:" hex_QWPBLNM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QWPBRESV
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0107 length is 00016
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0107:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0107,22)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0107 Length: 22"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0107 ,
    =00001 QW0107T +1 , /* C - TYPE OF REQUEST                 00000 */
  ,     /* QW0107TO EQU x'000000D6' OPEN                             */
  ,     /* QW0107TC EQU x'000000C3' CLOSE                            */
    =00002 RSVD0001 +1 , /* X - RESERVED                       00001 */
    =00003 QW0107DB +2 , /* X - DATABASE ID (DBID)             00002 */
    =00005 QW0107OB +2 , /* X - PAGESET OBID                   00004 */
    =00007 QW0107DN +8 , /* C - DATA BASE NAME                 00006 */
    =00015 QW0107TN +8 , /* C - TABLE SPACE NAME               0000E */
    .           /* End of DSECT */
  /* next byte at 23 */
  hex_QW0107T = c2x(QW0107T)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0107DB = c2x(QW0107DB)
  hex_QW0107OB = c2x(QW0107OB)
  hex_QW0107DN = c2x(QW0107DN)
  hex_QW0107TN = c2x(QW0107TN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0107",desired_dsect) > 0)) then do
    void_rc = queue_QW0107_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0107:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0107_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0107:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF REQUEST              x:" hex_QW0107T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0107DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0107OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA BASE NAME               x:" hex_QW0107DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLE SPACE NAME             x:" hex_QW0107TN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0108 length is 000D0
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0108:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0108,208)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0108 Length: 208"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0108 ,
    =00001 QW0108PN +8 , /* C - IF QW0108TY = PLAN, THIS CONTA 00000 */
    =00009 QW0108I +2 , /* C - ISOLATION LEVEL                 00008 */
  ,     /* QW0108IR EQU x'0000D9D9' REPEATABLE READ                  */
  ,     /* QW0108IT EQU x'0000D9E2' READ STABILITY                   */
  ,     /* QW0108IC EQU x'0000C3E2' CURSOR STABILITY                 */
  ,     /* QW0108IU EQU x'0000E4D9' UNCOMMITED READ                  */
  ,     /* QW0108IN EQU x'0000C4C6' IF QW0108TY = PACKAGE, USE THE   */
    =00011 QW0108T +1 , /* C - TYPE                            0000A */
  ,     /* QW0108TA EQU x'000000C1' AUTOMATIC BIND                   */
  ,     /* QW0108TB EQU x'000000C2' BIND                             */
  ,     /* QW0108TR EQU x'000000D9' REBIND                           */
    =00012 QW0108A +1 , /* C - ACTION- ONLY VALID FOR BIND     0000B */
  ,     /* QW0108AA EQU x'000000C1' ADD- BIND ADD                    */
  ,     /* QW0108AR EQU x'000000D9' REPLACE - BIND REPLACE           */
    =00013 QW0108V +1 , /* C - VALIDATE AT                     0000C */
  ,     /* QW0108VR EQU x'000000D9' RUN                              */
  ,     /* QW0108VB EQU x'000000C2' BIND                             */
    =00014 QW0108Q +1 , /* C - AQUIRE LOCKS AT                 0000D */
  ,     /* QW0108QA EQU x'000000C1' ALLOCATION                       */
  ,     /* QW0108QU EQU x'00000000' FIRST USE                        */
    =00015 QW0108R +1 , /* C - RELEASE LOCKS AT                0000E */
  ,     /* QW0108RC EQU x'000000C3' COMMIT                           */
  ,     /* QW0108RD EQU x'000000C4' DEALLOCATION                     */
  ,     /* QW0108RN EQU x'000000C6' IF QW0108TY = PACKAGE, USE THE   */
  ,     /* QW0108RI EQU x'000000C9' INHERIT FROM PLAN AT RUN TIME    */
    =00016 QW0108E +1 , /* C - SQLERROR - ONLY VALID FOR BIND  0000F */
  ,     /* QW0108EC EQU x'000000C3' CONTINUE                         */
  ,     /* QW0108EN EQU x'000000D5' NOPACKAGE                        */
    =00017 QW0108F +1 , /* C - CURRENTDATA                     00010 */
  ,     /* QW0108FC EQU x'000000C3' YES                              */
  ,     /* QW0108FB EQU x'000000C2' NO                               */
  ,     /* QW0108FA EQU x'000000C1' ALL - ONLY VALID FOR PACKAGES    */
    =00018 QW0108S +1 , /* C - Y IF REBIND PLAN(*) - N OTHERWI 00011 */
  ,     /* QW0108YE EQU x'00000000' YES                              */
  ,     /* QW0108NO EQU x'000000D5' NO                               */
    =00019 QW0108X +1 , /* X - EXPLAIN FLAGS                   00012 */
  ,     /* QW0108XX EQU x'00000080' EXPLAIN WAS SPECIFIED            */
    =00020 QW0108PR +1 , /* C - DATABASE PROTOCOL FOR 3 PART N 00013 */
  ,     /* QW0108PD EQU x'000000C4' D   = DBPROTOCOL(DRDA)           */
  ,     /* QW0108PP EQU x'000000D7' P   = DBPROTOCOL(PRIVATE)        */
    =00021 QW0108OW +8 , /* C - %U SPECIFIED OWNER OF PLAN OR  00014 */
    =00029 QW0108TY +8 , /* C - TYPE OF OBJECT BOUND OR REBOUN 0001C */
    =00037 QW0108QL +8 , /* C - %U QUALIFIER FOR UNQUALIFED OB 00024 */
    =00045 QW0108CA +2 , /* H - AUTHORIZATION CACHESIZE        0002C */
,/* =00047 QW0108PK +0 ,    C - PACKAGE NAME (ZERO IF QW0108TY 0002E */
    =00047 QW0108NL +16 , /* C - %U LOCATION OF PACKAGE        0002E */
    =00063 QW0108NC +18 , /* C - %U COLLECTION-ID OF PACKAGE   0003E */
    =00081 QW0108NI +18 , /* C - %U PACKAGE-ID                 00050 */
    =00099 QW0108NT +8 , /* C - CONSISTENCY TOKEN OF PACKAGE   00062 */
,/* =00107 QW0108VI +0 ,    C - VERSION ID                     0006A */
    =00107 QW0108VL +2 , /* H - VERSION LENGTH                 0006A */
    =00109 QW0108VN +64 , /* C - VERSION NAME                  0006C */
    =00173 RSVD0001 +2 , /* X - AVAILABLE                      000AC */
    =00175 QW0108PL +2 , /* H - DEGREE BIND OPTION.  THIS FIEL 000AE */
  ,     /* QW0108DA EQU x'0000FFFF' DEGREE BIND OPTION OF DEGREE(ANY */
  ,     /* QW0108D1 EQU x'00000001' DEGREE BIND OPTION OF DEGREE(1)  */
    =00177 QW0108SR +1 , /* C - SQLRULES OPTION.  THE VALUE IS 000B0 */
  ,     /* QW0108SD EQU x'000000C4' DB2                              */
  ,     /* QW0108SS EQU x'00000000' STANDARD                         */
    =00178 QW0108DC +1 , /* C - DISCONNECT OPTION.  THE VALUE  000B1 */
  ,     /* QW0108DE EQU x'000000C5' EXPLICIT                         */
  ,     /* QW0108DU EQU x'000000C1' AUTOMATIC                        */
  ,     /* QW0108DN EQU x'000000C3' CONDITIONAL                      */
    =00179 QW0108DY +1 , /* C - Use DYNAMICRULES for dynamic S 000B2 */
  ,     /* QW0108DB EQU x'000000C2' BIND                             */
  ,     /* QW0108DR EQU x'000000D9' RUN                              */
  ,     /* QW0108DF EQU x'000000C4' DEFINEBIND - valid only for pack */
  ,     /* QW0108DG EQU x'000000C5' DEFINERUN  - valid only for pack */
  ,     /* QW0108DH EQU x'000000C8' INVOKEBIND - valid only for pack */
  ,     /* QW0108DI EQU x'000000C9' INVOKERUN  - valid only for pack */
  ,     /* QW0108DD EQU x'00000040' not specified - valid only for p */
    =00180 QW0108DP +1 , /* C - DEFER or NODEFER (PREPARE) of  000B3 */
    =00181 QW0108RO +2 , /* X - REOPT SQL STATEMENTS AT RUNTIM 000B4 */
  ,     /* QW0108R0 EQU x'00000000' NOREOPTIMIZATION                 */
  ,     /* QW0108R1 EQU x'00000001' REOPT(VARS)                      */
    =00183 QW0108KD +1 , /* C - KEEP DYNAMIC STATEMENTS PAST C 000B6 */
    =00184 QW0108OH +8 , /* C - %U OPTHINT( HINT-ID ) DEFAULT  000B7 */
    =00192 QW0108IW +1 , /* C - IMMEDIATE WRITE OF UPDATED GBP 000BF */
  ,     /* QW0108I1 EQU x'000000F1' PH1 = IMMEDWRITE(PH1)            */
    =00193 RSVD0002 +1 , /* C - AVAILABLE                      000C0 */
    =00194 QW0108SC +1 , /* C - SCHEME OF ENCODING CCSID       000C1 */
  ,     /* QW0108SA EQU x'000000C1' ASCII - ENCODING CCSID IS ASCII  */
  ,     /* QW0108SE EQU x'000000C5' EBCDIC - ENCODING CCSID IS EBCDI */
  ,     /* QW0108SU EQU x'00000000' UNICODE - ENCODING CCSID IS UNIC */
    =00195 QW0108CC +2 , /* X - ENCODING CCSID VALUE           000C2 */
    =00197 QW0108OW_Off +2 , /* H - Offset from QW0108 to      000C4 */
    =00199 QW0108QL_Off +2 , /* H - Offset from QW0108 to      000C6 */
    =00201 QW0108NL_Off +2 , /* H - Offset from QW0108 to      000C8 */
    =00203 QW0108NC_Off +2 , /* H - Offset from QW0108 to      000CA */
    =00205 QW0108NI_Off +2 , /* H - Offset from QW0108 to      000CC */
    =00207 QW0108OH_Off +2 , /* H - Offset from QW0108 to      000CE */
    =00001 QW0108OW_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0108OW_Var +0 ,    C - %U SPECIFIED OWNER OF PLAN 00002 */
    =00001 QW0108QL_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0108QL_Var +0 ,    C - %U QUALIFIER FOR UNQUALIFE 00002 */
    =00001 QW0108NL_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0108NL_Var +0 ,    C - %U LOCATION OF PACKAGE     00002 */
    =00001 QW0108NC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0108NC_Var +0 ,    C - %U COLLECTION-ID OF PACKAG 00002 */
    =00001 QW0108NI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0108NI_Var +0 ,    C - %U PACKAGE-ID              00002 */
    =00001 QW0108OH_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0108OH_Var +0 ,    C - %U OPTHINT( HINT-ID ) DEFA 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0108PN = c2x(QW0108PN)
  hex_QW0108I = c2x(QW0108I)
  hex_QW0108T = c2x(QW0108T)
  hex_QW0108A = c2x(QW0108A)
  hex_QW0108V = c2x(QW0108V)
  hex_QW0108Q = c2x(QW0108Q)
  hex_QW0108R = c2x(QW0108R)
  hex_QW0108E = c2x(QW0108E)
  hex_QW0108F = c2x(QW0108F)
  hex_QW0108S = c2x(QW0108S)
  hex_QW0108X = c2x(QW0108X)
  hex_QW0108PR = c2x(QW0108PR)
  hex_QW0108OW = c2x(QW0108OW)
  hex_QW0108TY = c2x(QW0108TY)
  hex_QW0108QL = c2x(QW0108QL)
  hex_QW0108CA = c2x(QW0108CA)
  hex_QW0108NL = c2x(QW0108NL)
  hex_QW0108NC = c2x(QW0108NC)
  hex_QW0108NI = c2x(QW0108NI)
  hex_QW0108NT = c2x(QW0108NT)
  hex_QW0108VL = c2x(QW0108VL)
  hex_QW0108VN = c2x(QW0108VN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0108PL = c2x(QW0108PL)
  hex_QW0108SR = c2x(QW0108SR)
  hex_QW0108DC = c2x(QW0108DC)
  hex_QW0108DY = c2x(QW0108DY)
  hex_QW0108DP = c2x(QW0108DP)
  hex_QW0108RO = c2x(QW0108RO)
  hex_QW0108KD = c2x(QW0108KD)
  hex_QW0108OH = c2x(QW0108OH)
  hex_QW0108IW = c2x(QW0108IW)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0108SC = c2x(QW0108SC)
  hex_QW0108CC = c2x(QW0108CC)
  hex_QW0108OW_Off = c2x(QW0108OW_Off)
  hex_QW0108QL_Off = c2x(QW0108QL_Off)
  hex_QW0108NL_Off = c2x(QW0108NL_Off)
  hex_QW0108NC_Off = c2x(QW0108NC_Off)
  hex_QW0108NI_Off = c2x(QW0108NI_Off)
  hex_QW0108OH_Off = c2x(QW0108OH_Off)
  hex_QW0108OW_Len = c2x(QW0108OW_Len)
  hex_QW0108QL_Len = c2x(QW0108QL_Len)
  hex_QW0108NL_Len = c2x(QW0108NL_Len)
  hex_QW0108NC_Len = c2x(QW0108NC_Len)
  hex_QW0108NI_Len = c2x(QW0108NI_Len)
  hex_QW0108OH_Len = c2x(QW0108OH_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0108",desired_dsect) > 0)) then do
    void_rc = queue_QW0108_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0108:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0108_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0108:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF QW0108TY = PLAN, THIS CON x:" hex_QW0108PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ISOLATION LEVEL              x:" hex_QW0108I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE                         x:" hex_QW0108T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACTION- ONLY VALID FOR BIND  x:" hex_QW0108A
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VALIDATE AT                  x:" hex_QW0108V
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AQUIRE LOCKS AT              x:" hex_QW0108Q
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RELEASE LOCKS AT             x:" hex_QW0108R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLERROR - ONLY VALID FOR BI x:" hex_QW0108E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENTDATA                  x:" hex_QW0108F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Y IF REBIND PLAN(*) - N OTHE x:" hex_QW0108S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EXPLAIN FLAGS                x:" hex_QW0108X
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE PROTOCOL FOR 3 PART x:" hex_QW0108PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SPECIFIED OWNER OF PLAN O x:" hex_QW0108OW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF OBJECT BOUND OR REBO x:" hex_QW0108TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U QUALIFIER FOR UNQUALIFED  x:" hex_QW0108QL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTHORIZATION CACHESIZE      x:" hex_QW0108CA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION OF PACKAGE       x:" hex_QW0108NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION-ID OF PACKAGE  x:" hex_QW0108NC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE-ID                x:" hex_QW0108NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN OF PACKAGE x:" hex_QW0108NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION LENGTH               x:" hex_QW0108VL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION NAME                 x:" hex_QW0108VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AVAILABLE                    x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEGREE BIND OPTION.  THIS FI x:" hex_QW0108PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLRULES OPTION.  THE VALUE  x:" hex_QW0108SR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DISCONNECT OPTION.  THE VALU x:" hex_QW0108DC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Use DYNAMICRULES for dynamic x:" hex_QW0108DY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFER or NODEFER (PREPARE) o x:" hex_QW0108DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPT SQL STATEMENTS AT RUNT x:" hex_QW0108RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEEP DYNAMIC STATEMENTS PAST x:" hex_QW0108KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U OPTHINT( HINT-ID ) DEFAUL x:" hex_QW0108OH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMMEDIATE WRITE OF UPDATED G x:" hex_QW0108IW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AVAILABLE                    x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SCHEME OF ENCODING CCSID     x:" hex_QW0108SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENCODING CCSID VALUE         x:" hex_QW0108CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0108 to        x:" hex_QW0108OW_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0108 to        x:" hex_QW0108QL_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0108 to        x:" hex_QW0108NL_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0108 to        x:" hex_QW0108NC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0108 to        x:" hex_QW0108NI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0108 to        x:" hex_QW0108OH_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0108OW_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0108QL_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0108NL_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0108NC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0108NI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0108OH_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0109 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0109:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0109,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0109 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0109 ,
    =00001 QW0109RC +4 , /* F - RETURN CODE                    00000 */
  ,     /* QW0109RS EQU x'00000000' GOOD RETURN CODE                 */
  ,     /* QW0109RW EQU x'00000004' WARNING RETURN CODE              */
  ,     /* QW0109RE EQU x'00000008' ERROR RETURN CODE                */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0109RC = c2x(QW0109RC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0109",desired_dsect) > 0)) then do
    void_rc = queue_QW0109_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0109:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0109_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0109:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE                  x:" hex_QW0109RC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0110 length is 00096
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0110:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0110,150)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0110 Length: 150"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0110 ,
    =00001 QW0110PN +8 , /* C - IF QW0110TY =  PLAN ,          00000 */
    =00009 QW0110S +1 , /* C -  Y  IF FREE PLAN(*) ENTERED.    00008 */
  ,     /* QW0110YE EQU x'00000000' YES                              */
  ,     /* QW0110NO EQU x'000000D5' NO                               */
    =00010 QW0110TY +8 , /* C -  TYPE OF OBJECT FREED          00009 */
,/* =00018 QW0110PK +0 ,    C - IF QW0110TY =  PACKAGE         00011 */
    =00018 QW0110PL +16 , /* C - %U LOCATION OF PACKAGE        00011 */
    =00034 QW0110PC +18 , /* C - %U COLLECTION ID              00021 */
    =00052 QW0110PI +18 , /* C - %U PACKAGE ID                 00033 */
    =00070 QW0110PT +8 , /* C - CONSISTENCY TOKEN              00045 */
,/* =00078 QW0110VI +0 ,    C - VERSION ID                     0004D */
    =00078 QW0110VL +2 , /* X - VERSION LENGTH                 0004D */
    =00080 QW0110VN +64 , /* C - VERSION NAME                  0004F */
    =00144 RSVD0001 +1 , /* C - Reserved                       0008F */
    =00145 QW0110PL_Off +2 , /* H - Offset from QW0110 to      00090 */
    =00147 QW0110PC_Off +2 , /* H - Offset from QW0110 to      00092 */
    =00149 QW0110PI_Off +2 , /* H - Offset from QW0110 to      00094 */
    =00001 QW0110PL_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0110PL_Var +0 ,    C - %U LOCATION OF PACKAGE     00002 */
    =00001 QW0110PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0110PC_Var +0 ,    C - %U COLLECTION ID           00002 */
    =00001 QW0110PI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0110PI_Var +0 ,    C - %U PACKAGE ID              00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0110PN = c2x(QW0110PN)
  hex_QW0110S = c2x(QW0110S)
  hex_QW0110TY = c2x(QW0110TY)
  hex_QW0110PL = c2x(QW0110PL)
  hex_QW0110PC = c2x(QW0110PC)
  hex_QW0110PI = c2x(QW0110PI)
  hex_QW0110PT = c2x(QW0110PT)
  hex_QW0110VL = c2x(QW0110VL)
  hex_QW0110VN = c2x(QW0110VN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0110PL_Off = c2x(QW0110PL_Off)
  hex_QW0110PC_Off = c2x(QW0110PC_Off)
  hex_QW0110PI_Off = c2x(QW0110PI_Off)
  hex_QW0110PL_Len = c2x(QW0110PL_Len)
  hex_QW0110PC_Len = c2x(QW0110PC_Len)
  hex_QW0110PI_Len = c2x(QW0110PI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0110",desired_dsect) > 0)) then do
    void_rc = queue_QW0110_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0110:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0110_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0110:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF QW0110TY =  PLAN ,        x:" hex_QW0110PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Y  IF FREE PLAN(*) ENTERED. x:" hex_QW0110S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       TYPE OF OBJECT FREED        x:" hex_QW0110TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION OF PACKAGE       x:" hex_QW0110PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID             x:" hex_QW0110PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0110PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN            x:" hex_QW0110PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION LENGTH               x:" hex_QW0110VL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION NAME                 x:" hex_QW0110VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0110 to        x:" hex_QW0110PL_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0110 to        x:" hex_QW0110PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0110 to        x:" hex_QW0110PI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0110PL_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0110PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0110PI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0111 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0111:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0111,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0111 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0111 ,
    =00001 QW0111RC +4 , /* F - RETURN CODE                    00000 */
  ,     /* QW0111RS EQU x'00000000' GOOD RETURN CODE                 */
  ,     /* QW0111RW EQU x'00000004' WARNING RETURN CODE              */
  ,     /* QW0111RE EQU x'00000008' ERROR RETURN CODE                */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0111RC = c2x(QW0111RC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0111",desired_dsect) > 0)) then do
    void_rc = queue_QW0111_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0111:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0111_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0111:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE                  x:" hex_QW0111RC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0112 length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0112:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0112,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0112 Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0112 ,
    =00001 QW0112PN +8 , /* C - PLAN NAME                      00000 */
    =00009 QW0112I +2 , /* C - ISOLATION LEVEL                 00008 */
  ,     /* QW0112IR EQU x'0000D9D9' REPEATABLE READ                  */
  ,     /* QW0112IT EQU x'0000D9E2' READ STABILITY                   */
  ,     /* QW0112IC EQU x'0000C3E2' CURSOR STABILITY                 */
  ,     /* QW0112IU EQU x'0000E4D9' UNCOMMITED READ                  */
    =00011 QW0112Q +1 , /* C - AQUIRE LOCKS AT                 0000A */
  ,     /* QW0112QA EQU x'000000C1' ALLOCATION                       */
  ,     /* QW0112QU EQU x'00000000' FIRST USE                        */
    =00012 QW0112R +1 , /* C - RELEASE LOCKS AT                0000B */
  ,     /* QW0112RC EQU x'000000C3' COMMIT                           */
  ,     /* QW0112RD EQU x'000000C4' DEALLOCATION                     */
    =00013 QW0112DY +1 , /* C - Use DYNAMICRULES for dynamic S 0000C */
  ,     /* QW0112DB EQU x'000000C2' BIND                             */
  ,     /* QW0112DR EQU x'000000D9' RUN                              */
    =00014 QW0112DP +1 , /* C - DEFER PREPARE of SQL with remo 0000D */
    =00015 QW0112RO +2 , /* X - REOPT SQL STATEMENTS AT RUNTIM 0000E */
    =00017 QW0112KD +1 , /* C - KEEP Dynamic statements past C 00010 */
    =00018 QW0112PR +1 , /* C - DATABASE PROTOCOL FOR 3 PART N 00011 */
  ,     /* QW0112D EQU x'000000C4' D    DRDA                         */
  ,     /* QW0112P EQU x'000000D7' P    PRIVATE                      */
    =00019 QW0112OH +8 , /* C - %U OPTHINT( HINT-ID ) DEFAULT  00012 */
    =00027 QW0112IW +1 , /* C - IMMEDIATE WRITE of updated GBP 0001A */
  ,     /* QW0112I1 EQU x'000000F1' PH1                              */
    =00028 QW0112SC +1 , /* C - SCHEME OF ENCODING CCSID       0001B */
  ,     /* QW0112SA EQU x'000000C1' ASCII - ENCODING CCSID IS ASCII  */
  ,     /* QW0112SE EQU x'000000C5' EBCDIC - ENCODING CCSID IS EBCDI */
  ,     /* QW0112SU EQU x'00000000' UNICODE - ENCODING CCSID IS UNIC */
    =00029 QW0112CC +2 , /* X - ENDCODING CCSID VALUE          0001C */
    =00031 QW0112OH_Off +2 , /* H - Offset from QW0112 to      0001E */
    =00001 QW0112OH_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0112OH_Var +0 ,    C - %U OPTHINT( HINT-ID ) DEFA 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0112PN = c2x(QW0112PN)
  hex_QW0112I = c2x(QW0112I)
  hex_QW0112Q = c2x(QW0112Q)
  hex_QW0112R = c2x(QW0112R)
  hex_QW0112DY = c2x(QW0112DY)
  hex_QW0112DP = c2x(QW0112DP)
  hex_QW0112RO = c2x(QW0112RO)
  hex_QW0112KD = c2x(QW0112KD)
  hex_QW0112PR = c2x(QW0112PR)
  hex_QW0112OH = c2x(QW0112OH)
  hex_QW0112IW = c2x(QW0112IW)
  hex_QW0112SC = c2x(QW0112SC)
  hex_QW0112CC = c2x(QW0112CC)
  hex_QW0112OH_Off = c2x(QW0112OH_Off)
  hex_QW0112OH_Len = c2x(QW0112OH_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0112",desired_dsect) > 0)) then do
    void_rc = queue_QW0112_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0112:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0112_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0112:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0112PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ISOLATION LEVEL              x:" hex_QW0112I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AQUIRE LOCKS AT              x:" hex_QW0112Q
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RELEASE LOCKS AT             x:" hex_QW0112R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Use DYNAMICRULES for dynamic x:" hex_QW0112DY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFER PREPARE of SQL with re x:" hex_QW0112DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPT SQL STATEMENTS AT RUNT x:" hex_QW0112RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEEP Dynamic statements past x:" hex_QW0112KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE PROTOCOL FOR 3 PART x:" hex_QW0112PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U OPTHINT( HINT-ID ) DEFAUL x:" hex_QW0112OH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMMEDIATE WRITE of updated G x:" hex_QW0112IW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SCHEME OF ENCODING CCSID     x:" hex_QW0112SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENDCODING CCSID VALUE        x:" hex_QW0112CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0112 to        x:" hex_QW0112OH_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0112OH_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0113 length is 00024
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0113:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0113,36)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0113 Length: 36"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0113 ,
    =00001 QW0113PN +8 , /* C - PLAN NAME                      00000 */
    =00009 QW0113I +2 , /* C - ISOLATION LEVEL                 00008 */
  ,     /* QW0113IR EQU x'0000D9D9' REPEATABLE READ                  */
  ,     /* QW0113IT EQU x'0000D9E2' READ STABILITY                   */
  ,     /* QW0113IC EQU x'0000C3E2' CURSOR STABILITY                 */
  ,     /* QW0113IU EQU x'0000E4D9' UNCOMMITED READ                  */
    =00011 QW0113Q +1 , /* C - AQUIRE LOCKS AT                 0000A */
  ,     /* QW0113QA EQU x'000000C1' ALLOCATION                       */
  ,     /* QW0113QU EQU x'00000000' FIRST USE                        */
    =00012 QW0113R +1 , /* C - RELEASE LOCKS AT                0000B */
  ,     /* QW0113RC EQU x'000000C3' COMMIT                           */
  ,     /* QW0113RD EQU x'000000C4' DEALLOCATION                     */
    =00013 QW0113DY +1 , /* C - Use DYNAMICRULES for dynamic S 0000C */
  ,     /* QW0113DB EQU x'000000C2' BIND                             */
  ,     /* QW0113DR EQU x'000000D9' RUN                              */
    =00014 QW0113DP +1 , /* C - DEFER PREPARE of SQL with remo 0000D */
    =00015 QW0113RO +2 , /* X - REOPT SQL STATEMENTS AT RUNTIM 0000E */
    =00017 QW0113KD +1 , /* C - KEEP Dynamic statements past C 00010 */
    =00018 QW0113PR +1 , /* C - DATABASE BASE PROTOCOL FOR 3 P 00011 */
  ,     /* QW0113D EQU x'000000C4' D    DRDA                         */
  ,     /* QW0113P EQU x'000000D7' P    PRIVATE                      */
    =00019 QW0113OH +8 , /* C - %U OPTHINT( HINT-ID ) DEFAULT  00012 */
    =00027 QW0113IW +1 , /* C - IMMEDIATE WRITE of updated GBP 0001A */
  ,     /* QW0113I1 EQU x'000000F1' PH1                              */
    =00028 RSVD0001 +4 , /* C - Reserved (padding)             0001B */
    =00032 QW0113SC +1 , /* C - SCHEME OF ENCODING CCSID       0001F */
  ,     /* QW0113SA EQU x'000000C1' ASCII - ENCODING CCSID IS ASCII  */
  ,     /* QW0113SE EQU x'000000C5' EBCDIC - ENCODING CCSID IS EBCDI */
  ,     /* QW0113SU EQU x'00000000' UNICODE - ENCODING CCSID IS UNIC */
    =00033 QW0113CC +2 , /* X - ENCODING CCSID VALUE           00020 */
    =00035 QW0113OH_Off +2 , /* H - Offset from QW0113 to      00022 */
    =00001 QW0113OH_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0113OH_Var +0 ,    C - %U OPTHINT( HINT-ID ) DEFA 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0113PN = c2x(QW0113PN)
  hex_QW0113I = c2x(QW0113I)
  hex_QW0113Q = c2x(QW0113Q)
  hex_QW0113R = c2x(QW0113R)
  hex_QW0113DY = c2x(QW0113DY)
  hex_QW0113DP = c2x(QW0113DP)
  hex_QW0113RO = c2x(QW0113RO)
  hex_QW0113KD = c2x(QW0113KD)
  hex_QW0113PR = c2x(QW0113PR)
  hex_QW0113OH = c2x(QW0113OH)
  hex_QW0113IW = c2x(QW0113IW)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0113SC = c2x(QW0113SC)
  hex_QW0113CC = c2x(QW0113CC)
  hex_QW0113OH_Off = c2x(QW0113OH_Off)
  hex_QW0113OH_Len = c2x(QW0113OH_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0113",desired_dsect) > 0)) then do
    void_rc = queue_QW0113_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0113:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0113_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0113:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0113PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ISOLATION LEVEL              x:" hex_QW0113I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AQUIRE LOCKS AT              x:" hex_QW0113Q
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RELEASE LOCKS AT             x:" hex_QW0113R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Use DYNAMICRULES for dynamic x:" hex_QW0113DY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFER PREPARE of SQL with re x:" hex_QW0113DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPT SQL STATEMENTS AT RUNT x:" hex_QW0113RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEEP Dynamic statements past x:" hex_QW0113KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE BASE PROTOCOL FOR 3 x:" hex_QW0113PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U OPTHINT( HINT-ID ) DEFAUL x:" hex_QW0113OH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMMEDIATE WRITE of updated G x:" hex_QW0113IW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved (padding)           x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SCHEME OF ENCODING CCSID     x:" hex_QW0113SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENCODING CCSID VALUE         x:" hex_QW0113CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0113 to        x:" hex_QW0113OH_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0113OH_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0114 length is 00012
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0114:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0114,18)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0114 Length: 18"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0114 ,
    =00001 QW0114DI +8 , /* C - DATA SET ID                    00000 */
    =00009 QW0114AC +4 , /* A - ACE TOKEN                      00008 */
,/* =00013 QW0114RB +0 ,    X - (S)                            0000C */
    =00013 QW0114HR +2 , /* X - (S)                            0000C */
    =00015 QW0114LR +4 , /* X - (S)                            0000E */
    .           /* End of DSECT */
  /* next byte at 19 */
  hex_QW0114DI = c2x(QW0114DI)
  hex_QW0114AC = c2x(QW0114AC)
  hex_QW0114HR = c2x(QW0114HR)
  hex_QW0114LR = c2x(QW0114LR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0114",desired_dsect) > 0)) then do
    void_rc = queue_QW0114_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0114:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0114_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0114:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET ID                  x:" hex_QW0114DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0114AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0114HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0114LR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0115 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0115:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0115,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0115 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0115 ,
    =00001 QW0115BR +4 , /* F - (S)                            00000 */
    =00005 QW0115BS +4 , /* F - (S)                            00004 */
    =00009 QW0115FR +4 , /* F - (S)                            00008 */
    =00013 QW0115RT +4 , /* F - RETURN CODE: 0 MEANS SUCCESSFU 0000C */
    =00017 QW0115AC +4 , /* A - ACE TOKEN                      00010 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0115BR = c2x(QW0115BR)
  hex_QW0115BS = c2x(QW0115BS)
  hex_QW0115FR = c2x(QW0115FR)
  hex_QW0115RT = c2x(QW0115RT)
  hex_QW0115AC = c2x(QW0115AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0115",desired_dsect) > 0)) then do
    void_rc = queue_QW0115_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0115:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0115_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0115:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0115BR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0115BS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0115FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE: 0 MEANS SUCCESS x:" hex_QW0115RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0115AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0116 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0116:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0116,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0116 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0116 ,
    =00001 QW0116FR +4 , /* F - (S)                            00000 */
    =00005 QW0116LR +4 , /* F - (S)                            00004 */
    =00009 QW0116BU +4 , /* A - (S)                            00008 */
    =00013 QW0116RT +4 , /* F - RETURN CODE:0 MEANS SUCCESSFUL 0000C */
    =00017 QW0116AC +4 , /* A - ACE TOKEN                      00010 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0116FR = c2x(QW0116FR)
  hex_QW0116LR = c2x(QW0116LR)
  hex_QW0116BU = c2x(QW0116BU)
  hex_QW0116RT = c2x(QW0116RT)
  hex_QW0116AC = c2x(QW0116AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0116",desired_dsect) > 0)) then do
    void_rc = queue_QW0116_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0116:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0116_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0116:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0116FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0116LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0116BU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE:0 MEANS SUCCESSF x:" hex_QW0116RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0116AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0117 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0117:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0117,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0117 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0117 ,
    =00001 QW0117RT +4 , /* C - REQUEST TYPE                   00000 */
  ,     /* QW0117RV EQU x'D9C1D9C3' READ ARCHIVE REQUEST             */
  ,     /* QW0117RS EQU x'E2C1D9C3' SCHEDULE ARCHIVE READ REQUEST    */
    =00005 QW0117BR +4 , /* F - (S)                            00004 */
    =00009 QW0117ER +4 , /* F - (S)                            00008 */
    =00013 QW0117RR +4 , /* F - (S)                            0000C */
    =00017 QW0117ST +4 , /* F - (S)                            00010 */
    =00021 QW0117SH +4 , /* F - (S)                            00014 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0117RT = c2x(QW0117RT)
  hex_QW0117BR = c2x(QW0117BR)
  hex_QW0117ER = c2x(QW0117ER)
  hex_QW0117RR = c2x(QW0117RR)
  hex_QW0117ST = c2x(QW0117ST)
  hex_QW0117SH = c2x(QW0117SH)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0117",desired_dsect) > 0)) then do
    void_rc = queue_QW0117_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0117:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0117_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0117:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUEST TYPE                 x:" hex_QW0117RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0117BR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0117ER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0117RR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0117ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0117SH
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0118 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0118:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0118,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0118 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0118 ,
    =00001 QW0118RT +4 , /* F - RETURN CODE                    00000 */
    =00005 QW0118RC +4 , /* F - (S)                            00004 */
    =00009 QW0118ST +4 , /* F - (S)                            00008 */
    =00013 QW0118SH +4 , /* F - (S)                            0000C */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0118RT = c2x(QW0118RT)
  hex_QW0118RC = c2x(QW0118RC)
  hex_QW0118ST = c2x(QW0118ST)
  hex_QW0118SH = c2x(QW0118SH)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0118",desired_dsect) > 0)) then do
    void_rc = queue_QW0118_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0118:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0118_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0118:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE                  x:" hex_QW0118RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0118RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0118ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0118SH
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0119 length is 00012
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0119:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0119,18)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0119 Length: 18"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0119 ,
    =00001 QW0119DI +8 , /* C - DATA SET ID                    00000 */
    =00009 QW0119AC +4 , /* A - ACE TOKEN                      00008 */
,/* =00013 QW0119RB +0 ,    X - (S)                            0000C */
    =00013 QW0119HR +2 , /* X - (S)                            0000C */
    =00015 QW0119LR +4 , /* X - (S)                            0000E */
    .           /* End of DSECT */
  /* next byte at 19 */
  hex_QW0119DI = c2x(QW0119DI)
  hex_QW0119AC = c2x(QW0119AC)
  hex_QW0119HR = c2x(QW0119HR)
  hex_QW0119LR = c2x(QW0119LR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0119",desired_dsect) > 0)) then do
    void_rc = queue_QW0119_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0119:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0119_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0119:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET ID                  x:" hex_QW0119DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0119AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0119HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0119LR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0120 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0120:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0120,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0120 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0120 ,
    =00001 QW0120RT +4 , /* F - RETURN CODE                    00000 */
    =00005 QW0120AC +4 , /* A - ACE TOKEN                      00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0120RT = c2x(QW0120RT)
  hex_QW0120AC = c2x(QW0120AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0120",desired_dsect) > 0)) then do
    void_rc = queue_QW0120_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0120:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0120_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0120:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE                  x:" hex_QW0120RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0120AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0121 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0121:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0121,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0121 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0121 ,
,/* =00001 QW0121FR +0 ,    C - (S) FRB                        00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0121",desired_dsect) > 0)) then do
    void_rc = queue_QW0121_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0121:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0121_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0121:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0122 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0122:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0122,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0122 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0122 ,
,/* =00001 QW0122FR +0 ,    C - (S) FRB                        00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0122",desired_dsect) > 0)) then do
    void_rc = queue_QW0122_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0122:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0122_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0122:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0123 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0123:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0123,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0123 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0123 ,
,/* =00001 RSVD0001 +0 ,    C - (S)                            00000 */
    =00001 QW0123LN +2 , /* H - LENGTH OF THE AREA             00000 */
    =00003 QW0123ID +2 , /* H - IFCID OF THE ORIGINAL ENTRY    00002 */
,/* =00005 QW0123FR +0 ,    C - (S)                            00004 */
,/* =00005 RSVD0002 +0 ,    C - (S)                            00004 */
,/* =00005 RSVD0003 +0 ,    C -                                00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0123LN = c2x(QW0123LN)
  dec_QW0123ID = c2d(QW0123ID)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0123",desired_dsect) > 0)) then do
    void_rc = queue_QW0123_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0123:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0123_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0123:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE AREA           x:" hex_QW0123LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IFCID OF THE ORIGINAL ENTRY   :" dec_QW0123ID
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0124 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0124:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0124,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0124 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0124 ,
    .           /* End of DSECT */
  /* next byte at 5 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0124",desired_dsect) > 0)) then do
    void_rc = queue_QW0124_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0124:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0124_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0124:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01242 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01242:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01242,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01242 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01242 ,
,/* =00001 QW01242T +0 ,    C - %U SQL TEXT                    00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01242",desired_dsect) > 0)) then do
    void_rc = queue_QW01242_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01242:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01242_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01242:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01243 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01243:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01243,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01243 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01243 ,
    =00001 QW01243G +1 , /* X - GEN FLAGS                      00000 */
  ,     /* QW0124GR EQU x'00000040' YES - HOLD READ LOCKS UNTIL      */
  ,     /* QW0124GB EQU x'00000004' YES IF INTERNAL (I.E. DYNAMIC)   */
    =00002 QW01243F +1 , /* X - STATIC BIND FLAGS              00001 */
  ,     /* QW0124FU EQU x'00000080' SET TO YES IF ACQUIRE(USE) WAS   */
  ,     /* QW0124FC EQU x'00000040' SET TO YES IF RELEASE(COMMIT)    */
    =00003 QW01243R +1 , /* X - INDICATOR FLAGS - RD           00002 */
  ,     /* QW0124RR EQU x'00000040' ISOLATION LEVEL = RR             */
  ,     /* QW0124RS EQU x'00000008' ISOLATION LEVEL = RS             */
  ,     /* QW0124CS EQU x'00000080' ISOLATION LEVEL = CS             */
  ,     /* QW0124UR EQU x'00000020' ISOLATION LEVEL = UR             */
  ,     /* QW0124RD EQU x'00000010' DYNAMIC SQL INDICATOR            */
  ,     /* QW0124XR EQU x'00000004' ISO LEVEL = RR X-LOCK            */
  ,     /* QW0124XS EQU x'00000002' ISO LEVEL = RS X-LOCK            */
    =00004 QW01243K +1 , /* X - RESERVED                       00003 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW01243G = c2x(QW01243G)
  hex_QW01243F = c2x(QW01243F)
  hex_QW01243R = c2x(QW01243R)
  hex_QW01243K = c2x(QW01243K)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01243",desired_dsect) > 0)) then do
    void_rc = queue_QW01243_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01243:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01243_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01243:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GEN FLAGS                    x:" hex_QW01243G
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATIC BIND FLAGS            x:" hex_QW01243F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INDICATOR FLAGS - RD         x:" hex_QW01243R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW01243K
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01244 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01244:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01244,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01244 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01244 ,
    =00001 QW01244E +8 , /* C - ! ELAPSED TIME                 00000 */
    =00009 QW01244C +8 , /* C - ! CPU time consumed by the SQL 00008 */
,/* =00017 QW01244P +0 ,    C - ! LAST PAGE ACCESSED           00010 */
    =00017 QW01244D +2 , /* X - ! DBID                         00010 */
    =00019 QW01244S +2 , /* X - ! PSID                         00012 */
    =00021 QW01244N +4 , /* X - ! PAGE NUMBER WITHIN PAGESET   00014 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW01244E = c2x(QW01244E)
  hex_QW01244C = c2x(QW01244C)
  hex_QW01244D = c2x(QW01244D)
  hex_QW01244S = c2x(QW01244S)
  hex_QW01244N = c2x(QW01244N)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01244",desired_dsect) > 0)) then do
    void_rc = queue_QW01244_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01244:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01244_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01244:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! ELAPSED TIME               x:" hex_QW01244E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! CPU time consumed by the S x:" hex_QW01244C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! DBID                       x:" hex_QW01244D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! PSID                       x:" hex_QW01244S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! PAGE NUMBER WITHIN PAGESET x:" hex_QW01244N
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01245 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01245:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01245,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01245 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01245 ,
    =00001 QW01245B +4 , /* F - ! BUFFER POOL ID               00000 */
    =00005 QW01245G +4 , /* F - ! GET PAGE REQUESTS            00004 */
    =00009 QW01245R +4 , /* F - ! SYNCHRONOUS READ I/O REQUEST 00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW01245B = c2x(QW01245B)
  hex_QW01245G = c2x(QW01245G)
  hex_QW01245R = c2x(QW01245R)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01245",desired_dsect) > 0)) then do
    void_rc = queue_QW01245_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01245:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01245_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01245:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! BUFFER POOL ID             x:" hex_QW01245B
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! GET PAGE REQUESTS          x:" hex_QW01245G
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ! SYNCHRONOUS READ I/O REQUE x:" hex_QW01245R
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01246 length is 000D4
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01246:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01246,212)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01246 Length: 212"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01246 ,
    =00001 QW01246Y +8 , /* C - CONNECTION TYPE                00000 */
    =00009 QW01246A +4 , /* F - ACE TOKEN REPORTED             00008 */
    =00013 QW01246Q +2 , /* H - APPLICATION REQUEST COUNT IS   0000C */
    =00015 QW01246S +2 , /* H - ASID OF AGENT                  0000E */
    =00017 QW01246I +1 , /* C - A = IN APPLICATION             00010 */
    =00018 QW01246L +1 , /* X - (S)                            00011 */
  ,     /* QW0124LD EQU x'00000080' 1=THREAD AT PLAN LEVEL.          */
  ,     /* QW0124LS EQU x'00000040' AGENT IS IN EOT TERMINATION.     */
  ,     /* QW0124LQ EQU x'00000020' 1=CREATE_THREAD IS QUEUED        */
  ,     /* QW0124LT EQU x'00000010' 1=TSO FOREGROUND.                */
  ,     /* QW0124LE EQU x'00000008' AGENT QUEUED FOR EOT TERM.       */
  ,     /* QW0124L5 EQU x'00000007' RESERVED                         */
    =00019 QW01246D +1 , /* X - AGENT STATUS FLAGS - V2R2      00012 */
  ,     /* QW0124D0 EQU x'000000FC' RESERVED                         */
  ,     /* QW0124DB EQU x'00000002' DATA BASE ACCESS AGENT.          */
  ,     /* QW0124DD EQU x'00000001' DISTRIBUTED ALLIED AGENT.        */
    =00020 QW01246E +1 , /* X - (S)                            00013 */
  ,     /* QW0124AC EQU x'00000080' 1=ACCELERATOR PROCESSING         */
    =00021 QW01246C +4 , /* F - ASCB TOKEN                     00014 */
    =00025 QW01246T +4 , /* F - TCB  TOKEN                     00018 */
,/* =00029 QW0124CP +0 ,    C - CURRENT PACKAGE NAME           0001C */
    =00029 QW0124LN +16 , /* C - %U LOCATION NAME              0001C */
,/* =00045 QW0124PK +0 ,    C - PACKAGE NAME                   0002C */
    =00045 QW0124CI +18 , /* C - %U COLLECTION NAME            0002C */
    =00063 QW0124PN +18 , /* C - %U PACKAGE ID                 0003E */
    =00081 QW0124CN +8 , /* C - CONSISTENCY TOKEN - 64 BIT     00050 */
,/* =00089 RSVD0001 +0 ,    F -                                00058 */
,/* =00089 QW0124LU +0 ,    C - LUWID                          00058 */
    =00089 QW0124NI +8 , /* C - NETWORK ID                     00058 */
    =00097 QW0124LM +8 , /* C - LUNAME                         00060 */
    =00105 QW0124UV +6 , /* X - UNIQUENESS VALUE               00068 */
    =00111 QW0124CC +2 , /* G - COMMIT COUNT                   0006E */
    =00113 QW0124SP +18 , /* C - %U If the agent is executing  00070 */
    =00131 QW0124AF +2 , /* C - nested activity flag           00082 */
    =00133 QW0124EI +16 , /* C - End users userid at the users 00084 */
    =00149 QW0124ET +32 , /* C - End users userid at the users 00094 */
    =00181 QW0124EW +18 , /* C - End users userid at the users 000B4 */
    =00199 QW0124LN_Off +2 , /* H - Offset from QW01246 to     000C6 */
    =00201 QW0124CI_Off +2 , /* H - Offset from QW01246 to     000C8 */
    =00203 QW0124PN_Off +2 , /* H - Offset from QW01246 to     000CA */
    =00205 QW0124SP_Off +2 , /* H - Offset from QW01246 to     000CC */
    =00207 QW0124EI_Off +2 , /* H - Offset from QW01246 to     000CE */
    =00209 QW0124ST +4 , /* X - Cached Dynamic SQL Identifier  000D0 */
,/* =00213 RSVD0002 +0 ,    C -                                000D4 */
    =00001 QW0124LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0124LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0124CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0124CI_Var +0 ,    C - %U COLLECTION NAME         00002 */
    =00001 QW0124PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0124PN_Var +0 ,    C - %U PACKAGE ID              00002 */
    =00001 QW0124SP_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0124SP_Var +0 ,    C - %U Routine Name            00002 */
    =00001 QW0124EI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0124EI_Var +0 ,    C - End users userid           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW01246Y = c2x(QW01246Y)
  hex_QW01246A = c2x(QW01246A)
  hex_QW01246Q = c2x(QW01246Q)
  hex_QW01246S = c2x(QW01246S)
  hex_QW01246I = c2x(QW01246I)
  hex_QW01246L = c2x(QW01246L)
  hex_QW01246D = c2x(QW01246D)
  hex_QW01246E = c2x(QW01246E)
  hex_QW01246C = c2x(QW01246C)
  hex_QW01246T = c2x(QW01246T)
  hex_QW0124LN = c2x(QW0124LN)
  hex_QW0124CI = c2x(QW0124CI)
  hex_QW0124PN = c2x(QW0124PN)
  hex_QW0124CN = c2x(QW0124CN)
  hex_QW0124NI = c2x(QW0124NI)
  hex_QW0124LM = c2x(QW0124LM)
  hex_QW0124UV = c2x(QW0124UV)
  hex_QW0124CC = c2x(QW0124CC)
  hex_QW0124SP = c2x(QW0124SP)
  hex_QW0124AF = c2x(QW0124AF)
  hex_QW0124EI = c2x(QW0124EI)
  hex_QW0124ET = c2x(QW0124ET)
  hex_QW0124EW = c2x(QW0124EW)
  hex_QW0124LN_Off = c2x(QW0124LN_Off)
  hex_QW0124CI_Off = c2x(QW0124CI_Off)
  hex_QW0124PN_Off = c2x(QW0124PN_Off)
  hex_QW0124SP_Off = c2x(QW0124SP_Off)
  hex_QW0124EI_Off = c2x(QW0124EI_Off)
  hex_QW0124ST = c2x(QW0124ST)
  hex_QW0124LN_Len = c2x(QW0124LN_Len)
  hex_QW0124CI_Len = c2x(QW0124CI_Len)
  hex_QW0124PN_Len = c2x(QW0124PN_Len)
  hex_QW0124SP_Len = c2x(QW0124SP_Len)
  hex_QW0124EI_Len = c2x(QW0124EI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01246",desired_dsect) > 0)) then do
    void_rc = queue_QW01246_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01246:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01246_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01246:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTION TYPE              x:" hex_QW01246Y
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN REPORTED           x:" hex_QW01246A
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      APPLICATION REQUEST COUNT IS x:" hex_QW01246Q
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASID OF AGENT                x:" hex_QW01246S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      A = IN APPLICATION           x:" hex_QW01246I
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW01246L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AGENT STATUS FLAGS - V2R2    x:" hex_QW01246D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW01246E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASCB TOKEN                   x:" hex_QW01246C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TCB  TOKEN                   x:" hex_QW01246T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0124LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION NAME           x:" hex_QW0124CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0124PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN - 64 BIT   x:" hex_QW0124CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NETWORK ID                   x:" hex_QW0124NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LUNAME                       x:" hex_QW0124LM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNIQUENESS VALUE             x:" hex_QW0124UV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COMMIT COUNT                 x:" hex_QW0124CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U If the agent is executing x:" hex_QW0124SP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      nested activity flag         x:" hex_QW0124AF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      End users userid at the user x:" hex_QW0124EI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      End users userid at the user x:" hex_QW0124ET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      End users userid at the user x:" hex_QW0124EW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01246 to       x:" hex_QW0124LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01246 to       x:" hex_QW0124CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01246 to       x:" hex_QW0124PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01246 to       x:" hex_QW0124SP_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01246 to       x:" hex_QW0124EI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Cached Dynamic SQL Identifie x:" hex_QW0124ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0124LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0124CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0124PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0124SP_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0124EI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01247 length is 0000A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01247:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01247,10)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01247 Length: 10"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01247 ,
    =00001 QW01247S +8 , /* C - %U CURRENT SQLID               00000 */
    =00009 QW01247S_Off +2 , /* H - Offset from QW01247 to     00008 */
,/* =00011 RSVD0001 +0 ,    C -                                0000A */
    =00001 QW01247S_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW01247S_Var +0 ,    C - %U Current SQLID           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW01247S = c2x(QW01247S)
  hex_QW01247S_Off = c2x(QW01247S_Off)
  hex_QW01247S_Len = c2x(QW01247S_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01247",desired_dsect) > 0)) then do
    void_rc = queue_QW01247_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01247:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01247_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01247:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURRENT SQLID             x:" hex_QW01247S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01247 to       x:" hex_QW01247S_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW01247S_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01248 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01248:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01248,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01248 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01248 ,
    =00001 QW01248LN +2 , /* H - The length of the attributes  00000 */
,/* =00003 QW01248TX +0 ,    C - %U attributes string          00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW01248LN = c2x(QW01248LN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01248",desired_dsect) > 0)) then do
    void_rc = queue_QW01248_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01248:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01248_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01248:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the attributes x:" hex_QW01248LN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0125 length is 00044
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0125:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0125,68)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0125 Length: 68"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0125 ,
    =00001 QW0125AT +1 , /* C -  Y  IF MULT INDEX ACCESS PATH  00000 */
    =00002 QW0125NS +1 , /* C -  S  IF MIAP NOT USED CUZ NO RI 00001 */
    =00003 QW0125MR +1 , /* C -  M  IF MIAP NOT USED CUZ # OF  00002 */
    =00004 RSVD0001 +1 , /* C - RESERVED (PADDING)             00003 */
    =00005 QW0125NR +4 , /* F - NUMBER OF RIDS IN FINAL LIST O 00004 */
    =00009 QW0125PC +18 , /* C - %U PACKAGE COLLECTION ID FOR  00008 */
    =00027 QW0125PL +8 , /* C - PLAN ID FOR THIS QUERY         0001A */
    =00035 QW0125PN +18 , /* C - %U PROGRAM NAME FOR THIS QUER 00022 */
    =00053 QW0125TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0125SN +4 , /* F - STATEMENT NUMBER FOR THIS QUER 0003C */
    =00065 QW0125PC_Off +2 , /* H - Offset from QW0125 to      00040 */
    =00067 QW0125PN_Off +2 , /* H - Offset from QW0125 to      00042 */
  ,
  ,/*00068 __no__name__ ORG - QW0125 - x'00000000'             00044 */
    =00001 QW0125DB +2 , /* H - DBID OF INDEX                  00000 */
    =00003 QW0125OB +2 , /* H - OBID OF INDEX                  00002 */
    =00005 QW0125RI +4 , /* F - NUMBER OF RIDS OBTAINED FROM I 00004 */
    =00009 QW0125TH +4 , /* F - THRESHOLD VALUE FOR THE INDEX  00008 */
    =00001 QW0125PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0125PC_Var +0 ,    C - %U PACKAGE COLLECTION ID F 00002 */
    =00001 QW0125PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0125PN_Var +0 ,    C - %U PROGRAM NAME FOR THIS Q 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0125AT = c2x(QW0125AT)
  hex_QW0125NS = c2x(QW0125NS)
  hex_QW0125MR = c2x(QW0125MR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0125NR = c2x(QW0125NR)
  hex_QW0125PC = c2x(QW0125PC)
  hex_QW0125PL = c2x(QW0125PL)
  hex_QW0125PN = c2x(QW0125PN)
  hex_QW0125TS = c2x(QW0125TS)
  hex_QW0125SN = c2x(QW0125SN)
  hex_QW0125PC_Off = c2x(QW0125PC_Off)
  hex_QW0125PN_Off = c2x(QW0125PN_Off)
  hex_QW0125DB = c2x(QW0125DB)
  hex_QW0125OB = c2x(QW0125OB)
  hex_QW0125RI = c2x(QW0125RI)
  hex_QW0125TH = c2x(QW0125TH)
  hex_QW0125PC_Len = c2x(QW0125PC_Len)
  hex_QW0125PN_Len = c2x(QW0125PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0125",desired_dsect) > 0)) then do
    void_rc = queue_QW0125_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0125:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0125_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0125:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Y  IF MULT INDEX ACCESS PAT x:" hex_QW0125AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       S  IF MIAP NOT USED CUZ NO  x:" hex_QW0125NS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       M  IF MIAP NOT USED CUZ # O x:" hex_QW0125MR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED (PADDING)           x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RIDS IN FINAL LIST x:" hex_QW0125NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID FOR x:" hex_QW0125PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN ID FOR THIS QUERY       x:" hex_QW0125PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME FOR THIS QUE x:" hex_QW0125PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0125TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER FOR THIS QU x:" hex_QW0125SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0125 to        x:" hex_QW0125PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0125 to        x:" hex_QW0125PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID OF INDEX                x:" hex_QW0125DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBID OF INDEX                x:" hex_QW0125OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RIDS OBTAINED FROM x:" hex_QW0125RI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THRESHOLD VALUE FOR THE INDE x:" hex_QW0125TH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0125PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0125PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0126 length is 01004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0126:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0126,4100)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0126 Length: 4100"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0126 ,
,/* =00001 RSVD0001 +0 ,    D - (S)                            00000 */
    =00001 QW0126DT +4075 , /* C - (S)                         00000 */
,/* =04076 QW0126CT +0 ,    C - (S)                            00FEB */
    =04076 QW0126NS +1 , /* X - (S)                            00FEB */
  ,     /* QW0126FF EQU x'000000FF' (S)                              */
    =04077 QW0126S1 +2 , /* H - (S)                            00FEC */
    =04079 QW0126S2 +2 , /* H - (S)                            00FEE */
    =04081 QW0126OF +2 , /* H - (S)                            00FF0 */
,/* =04083 QW0126RB +0 ,    X - (S)                            00FF2 */
    =04083 QW0126R1 +2 , /* H - (S)                            00FF2 */
    =04085 QW0126R2 +4 , /* F - (S)                            00FF4 */
    =04089 QW0126XX +1 , /* C - (S)                            00FF8 */
    =04090 QW0126TS +7 , /* C - (S)                            00FF9 */
    =04097 QW0126LN +4 , /* F - (S)                            01000 */
    .           /* End of DSECT */
  /* next byte at 4101 */
  hex_QW0126DT = c2x(QW0126DT)
  hex_QW0126NS = c2x(QW0126NS)
  hex_QW0126S1 = c2x(QW0126S1)
  hex_QW0126S2 = c2x(QW0126S2)
  hex_QW0126OF = c2x(QW0126OF)
  hex_QW0126R1 = c2x(QW0126R1)
  hex_QW0126R2 = c2x(QW0126R2)
  hex_QW0126XX = c2x(QW0126XX)
  hex_QW0126TS = c2x(QW0126TS)
  hex_QW0126LN = c2x(QW0126LN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0126",desired_dsect) > 0)) then do
    void_rc = queue_QW0126_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0126:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0126_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0126:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126NS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126S1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126S2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126OF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126R2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126XX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0126LN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0127 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0127:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0127,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0127 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0127 ,
    =00001 QW0127DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0127OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0127PN +3 , /* X - PAGE NUMBER TO READ/WRITE IF N 00004 */
    =00008 QW0127F +1 , /* C - FLAG FOR TYPE OF I/O            00007 */
  ,     /* QW0127FR EQU x'000000D9' READ I/O WAIT                    */
  ,     /* QW0127FW EQU x'00000000' WRITE I/O WAIT                   */
    =00009 QW0127BP +4 , /* F - BUFFER POOL INTERNAL ID (0-49  00008 */
    =00013 QW0127AC +4 , /* F - ACE TOKEN OF REQUESTOR         0000C */
    =00017 QW0127PG +4 , /* F - PAGE NUMBER TO READ/WRITE      00010 */
    =00021 QW0127FG +1 , /* C - FLAG FOR TYPE OF TABLE SPACE   00014 */
  ,     /* QW0127F1 EQU x'000000D5' Non large table space            */
  ,     /* QW0127F2 EQU x'000000D3' NON-EA 5-BYTE RID TABLE SPACE    */
  ,     /* QW0127F3 EQU x'00000000' EA-ENABLED 5-BYTE RID TABLE SPAC */
    =00022 RSVD0001 +3 , /* C - RESERVED                       00015 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0127DB = c2x(QW0127DB)
  hex_QW0127OB = c2x(QW0127OB)
  hex_QW0127PN = c2x(QW0127PN)
  hex_QW0127F = c2x(QW0127F)
  hex_QW0127BP = c2x(QW0127BP)
  hex_QW0127AC = c2x(QW0127AC)
  hex_QW0127PG = c2x(QW0127PG)
  hex_QW0127FG = c2x(QW0127FG)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0127",desired_dsect) > 0)) then do
    void_rc = queue_QW0127_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0127:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0127_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0127:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0127DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0127OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER TO READ/WRITE IF x:" hex_QW0127PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF I/O         x:" hex_QW0127F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0127BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF REQUESTOR       x:" hex_QW0127AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER TO READ/WRITE    x:" hex_QW0127PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF TABLE SPACE x:" hex_QW0127FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0128 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0128:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0128,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0128 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0128 ,
    =00001 QW0128DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0128OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0128PN +3 , /* X - PAGE NUMBER IF NOT LARGE TS    00004 */
    =00008 QW0128F +1 , /* C - FLAG FOR TYPE OF I/O            00007 */
  ,     /* QW0128FR EQU x'000000D9' READ I/O WAIT                    */
  ,     /* QW0128FW EQU x'00000000' WRITE I/O WAIT                   */
    =00009 QW0128AC +4 , /* F - ACE TOKEN OF ACTUAL REQUESTOR. 00008 */
    =00013 QW0128S +1 , /* C - STATUS FLAG                     0000C */
  ,     /* QW0128RN EQU x'000000D5' I/O REQUESTOR WAS NOT CANCELLED  */
  ,     /* QW0128RY EQU x'00000000' I/O REQUESTOR WAS CANCELLED      */
    =00014 RSVD0001 +2 , /* C - RESERVED                       0000D */
    =00016 QW0128FG +1 , /* C - TYPE OF TABLE SPACE            0000F */
  ,     /* QW0128F1 EQU x'000000D5' Non large table space            */
  ,     /* QW0128F2 EQU x'000000D3' NON-EA 5-BYTE RID TABLE SPACE    */
  ,     /* QW0128F3 EQU x'00000000' EA-ENABLED 5-BYTE RID TABLE SPAC */
    =00017 QW0128PG +4 , /* F - PAGE NUMBER                    00010 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0128DB = c2x(QW0128DB)
  hex_QW0128OB = c2x(QW0128OB)
  hex_QW0128PN = c2x(QW0128PN)
  hex_QW0128F = c2x(QW0128F)
  hex_QW0128AC = c2x(QW0128AC)
  hex_QW0128S = c2x(QW0128S)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0128FG = c2x(QW0128FG)
  hex_QW0128PG = c2x(QW0128PG)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0128",desired_dsect) > 0)) then do
    void_rc = queue_QW0128_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0128:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0128_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0128:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0128DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0128OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER IF NOT LARGE TS  x:" hex_QW0128PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF I/O         x:" hex_QW0128F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF ACTUAL REQUESTO x:" hex_QW0128AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATUS FLAG                  x:" hex_QW0128S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF TABLE SPACE          x:" hex_QW0128FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER                  x:" hex_QW0128PG
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0129 length is 01004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0129:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0129,4100)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0129 Length: 4100"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0129 ,
,/* =00001 RSVD0001 +0 ,    D - (S)                            00000 */
    =00001 QW0129DT +4075 , /* C - (S)                         00000 */
,/* =04076 QW0129CT +0 ,    C - (S)                            00FEB */
    =04076 QW0129NS +1 , /* X - (S)                            00FEB */
  ,     /* QW0129FF EQU x'000000FF' (S)                              */
    =04077 QW0129S1 +2 , /* H - (S)                            00FEC */
    =04079 QW0129S2 +2 , /* H - (S)                            00FEE */
    =04081 QW0129OF +2 , /* H - (S)                            00FF0 */
,/* =04083 QW0129RB +0 ,    X - (S)                            00FF2 */
    =04083 QW0129R1 +2 , /* H - (S)                            00FF2 */
    =04085 QW0129R2 +4 , /* F - (S)                            00FF4 */
,/* =04089 QW0129TO +0 ,    C - (S)                            00FF8 */
    =04089 QW0129XX +1 , /* C - (S)                            00FF8 */
    =04090 QW0129TS +7 , /* C - (S)                            00FF9 */
  ,
  ,/*04096 __no__name__ ORG - QW0129TO - x'00000FF8'           01000 */
,/* =04089 QW0129FX +0 ,    C - (S)                            00FF8 */
    =04089 QW0129TM +6 , /* C - (S)                            00FF8 */
    =04095 QW0129FL +2 , /* C - (S)                            00FFE */
    =04097 QW0129LN +4 , /* F - (S)                            01000 */
    .           /* End of DSECT */
  /* next byte at 4101 */
  hex_QW0129DT = c2x(QW0129DT)
  hex_QW0129NS = c2x(QW0129NS)
  hex_QW0129S1 = c2x(QW0129S1)
  hex_QW0129S2 = c2x(QW0129S2)
  hex_QW0129OF = c2x(QW0129OF)
  hex_QW0129R1 = c2x(QW0129R1)
  hex_QW0129R2 = c2x(QW0129R2)
  hex_QW0129XX = c2x(QW0129XX)
  hex_QW0129TS = c2x(QW0129TS)
  hex_QW0129TM = c2x(QW0129TM)
  hex_QW0129FL = c2x(QW0129FL)
  hex_QW0129LN = c2x(QW0129LN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0129",desired_dsect) > 0)) then do
    void_rc = queue_QW0129_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0129:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0129_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0129:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129NS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129S1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129S2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129OF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129R2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129XX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129TM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0129LN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0140 length is 000C6
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0140:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0140,198)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0140 Length: 198"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0140 ,
    =00001 QW0140PR +2 , /* H - PRIVILEGE BEING CHECKED        00000 */
  ,     /* QW0140DO EQU x'00000009' - DISPLAY PROFILE                */
  ,     /* QW0140SF EQU x'0000000A' - START PROFILE                  */
  ,     /* QW0140PF EQU x'0000000B' - STOP PROFILE                   */
  ,     /* QW0140SL EQU x'0000000C' - START RLIMIT                   */
  ,     /* QW0140PL EQU x'0000000D' - STOP RLIMIT                    */
  ,     /* QW0140DL EQU x'0000000E' - DISPLAY RLIMIT                 */
  ,     /* QW0140CA EQU x'0000000F' - CREATE ALIAS                   */
  ,     /* QW0140M1 EQU x'00000010' - MONITOR1                       */
  ,     /* QW0140M2 EQU x'00000011' - MONITOR2                       */
  ,     /* QW0140CU EQU x'00000013' - CHECK UTILITY                  */
  ,     /* QW0140DX EQU x'00000014' - DROP ALIAS                     */
  ,     /* QW0140DM EQU x'00000015' - DDF COMMAND - START, STOP, OR  */
  ,     /* QW0140S EQU x'00000032' - SELECT                          */
  ,     /* QW0140I EQU x'00000033' - INSERT                          */
  ,     /* QW0140D EQU x'00000034' - DELETE                          */
  ,     /* QW0140U EQU x'00000035' - UPDATE                          */
  ,     /* QW0140R EQU x'00000036' - REFERENCES                      */
  ,     /* QW0140TR EQU x'00000037' - TRIGGER                        */
  ,     /* QW0140CI EQU x'00000038' - CREATE INDEX                   */
  ,     /* QW0140DB EQU x'00000039' - DBADM                          */
  ,     /* QW0140TB EQU x'0000003A' - TERMINATE UTILITY ON DATABASE  */
  ,     /* QW0140A EQU x'0000003D' - ALTER                           */
  ,     /* QW0140DT EQU x'0000003E' - DISPLAY THREAD OR DISPLAY DB   */
  ,     /* QW0140EX EQU x'00000040' - EXECUTE                        */
  ,     /* QW0140B EQU x'00000041' - BIND, REBIND OR FREE            */
  ,     /* QW0140CD EQU x'00000042' - CREATEDBA                      */
  ,     /* QW0140CG EQU x'00000043' - CREATE STOGROUP                */
  ,     /* QW0140DC EQU x'00000044' - DBCTRL                         */
  ,     /* QW0140DA EQU x'00000045' - DBMAINT                        */
  ,     /* QW0140RI EQU x'00000048' - RECOVER INDOUBT                */
  ,     /* QW0140DR EQU x'00000049' - DROP                           */
  ,     /* QW0140C EQU x'0000004A' - COPY                            */
  ,     /* QW0140L EQU x'0000004B' - LOAD                            */
  ,     /* QW0140EQ EQU x'0000004C' - EXPLICIT QUALIFIER USE         */
  ,     /* QW0140RG EQU x'0000004D' - REORG                          */
  ,     /* QW0140RP EQU x'0000004E' - REPAIR                         */
  ,     /* QW0140SD EQU x'0000004F' - START DATABASE                 */
  ,     /* QW0140S2 EQU x'00000050' - START DB2, STOP DB2, START DB( */
  ,     /* QW0140RU EQU x'00000052' - RUNSTATS UTILITY               */
  ,     /* QW0140PD EQU x'00000053' - STOP DATABASE                  */
  ,     /* QW0140ST EQU x'00000054' - STOP OR START TRACE            */
  ,     /* QW0140SY EQU x'00000055' - SYSADM                         */
  ,     /* QW0140SO EQU x'00000056' - SYSOPR                         */
  ,     /* QW0140US EQU x'00000057' - USE                            */
  ,     /* QW0140BA EQU x'00000058' - BIND ADD                       */
  ,     /* QW0140RR EQU x'00000059' - RECOVER (UTILITY)              */
  ,     /* QW0140CC EQU x'0000005C' - CREATEDBC                      */
  ,     /* QW0140RB EQU x'0000005D' - RECOVER BSDS                   */
  ,     /* QW0140CT EQU x'0000005E' - CREATE TABLE                   */
  ,     /* QW0140CS EQU x'0000005F' - CREATE TABLESPACE              */
  ,     /* QW0140DU EQU x'00000060' - DISPLAY UTILITY                */
  ,     /* QW0140CO EQU x'00000061' - COMMENT ON                     */
  ,     /* QW0140LT EQU x'00000062' - LOCK TABLE                     */
  ,     /* QW0140DD EQU x'00000063' - DISPLAY DATABASE               */
  ,     /* QW0140CY EQU x'00000066' - CREATE SYNONYM                 */
  ,     /* QW0140AI EQU x'00000067' - ALTER INDEX                    */
  ,     /* QW0140DS EQU x'00000068' - DROP SYNONYM                   */
  ,     /* QW0140DI EQU x'00000069' - DROP INDEX                     */
  ,     /* QW0140SU EQU x'0000006B' - STOSPACE UTILITY               */
  ,     /* QW0140CV EQU x'0000006C' - CREATE VIEW                    */
  ,     /* QW0140TU EQU x'0000006D' - TERM UTILITY                   */
  ,     /* QW0140DP EQU x'00000070' - DISPLAY BUFFERPOOL             */
  ,     /* QW0140AB EQU x'00000071' - ALTER BUFFERPOOL               */
  ,     /* QW0140YC EQU x'00000000' - SYSCTRL                        */
  ,     /* QW0140CP EQU x'00000000' - COPY PACKAGE                   */
  ,     /* QW0140IN EQU x'00000000' - CREATE IN                      */
  ,     /* QW0140BN EQU x'00000000' - BINDAGENT                      */
  ,     /* QW0140AL EQU x'0000003C' - ALL ON PACKAGES                */
  ,     /* QW0140AR EQU x'00000000' - ARCHIVE                        */
  ,     /* QW0140AP EQU x'00000000' - ALLPKAUT                       */
  ,     /* QW0140SP EQU x'00000000' - SUBPKAUT                       */
  ,     /* QW0140DE EQU x'00000000' - DESCRIBE TABLE                 */
  ,     /* QW0140DG EQU x'000000EC' - DIAGNOSE UTILITY               */
  ,     /* QW0140MC EQU x'000000ED' - MERGECOPY UTILITY              */
  ,     /* QW0140MU EQU x'000000EE' - MODIFY UTILITY                 */
  ,     /* QW0140QU EQU x'000000EF' - QUIESCE UTILITY                */
  ,     /* QW0140RE EQU x'000000F0' - REPORT UTILITY                 */
  ,     /* QW0140RD EQU x'000000F1' - REPAIR DBD UTILITY             */
  ,     /* QW0140PA EQU x'000000F2' - PACKADM                        */
  ,     /* QW0140SH EQU x'000000F3' - SET ARCHIVE                    */
  ,     /* QW0140DH EQU x'000000F4' - DISPLAY ARCHIVE                */
  ,     /* QW0140TT EQU x'000000F8' - CREATE GLOBAL TEMPORARY TABLE  */
  ,     /* QW0140RT EQU x'000000FB' - RENAME TABLE                   */
  ,     /* QW0140A1 EQU x'000000FC' - ALTERIN                        */
  ,     /* QW0140C1 EQU x'00000105' - CREATEIN                       */
  ,     /* QW0140D1 EQU x'00000106' - DROPIN                         */
  ,     /* QW0140U1 EQU x'00000107' - USAGE                          */
  ,     /* QW0140S1 EQU x'00000109' - START                          */
  ,     /* QW0140S3 EQU x'0000010A' - STOP                           */
  ,     /* QW0140D2 EQU x'0000010B' - DISPLAY                        */
  ,     /* QW0140CX EQU x'00000112' - COMMENT ON INDEX               */
  ,     /* QW0140ML EQU x'00000118' - VALIDATE SECLABEL              */
  ,     /* QW0140MR EQU x'00000119' - MLS READWRITE                  */
  ,     /* QW0140DF EQU x'0000011A' - DEBUG SESSION                  */
  ,     /* QW0140RX EQU x'0000011B' - RENAME INDEX                   */
    =00003 QW0140OB +1 , /* C - OBJECT TYPE                    00002 */
  ,     /* QW0140BB EQU x'000000C2' = BUFFERPOOL                     */
  ,     /* QW0140BC EQU x'000000C3' = COLLECTION                     */
  ,     /* QW0140BD EQU x'000000C4' = DATABASE                       */
  ,     /* QW0140BE EQU x'000000C5' = DISTINCT TYPE                  */
  ,     /* QW0140BF EQU x'000000C6' = FUNCTION                       */
  ,     /* QW0140BJ EQU x'000000D1' = JAR                            */
  ,     /* QW0140BK EQU x'000000D2' = PACKAGE                        */
  ,     /* QW0140BL EQU x'000000D3' = ROLE                           */
  ,     /* QW0140BM EQU x'000000D4' = SCHEMA                         */
  ,     /* QW0140BR EQU x'000000D5' = TRUSTED CONTEXT                */
  ,     /* QW0140BO EQU x'000000D6' = PROCEDURE                      */
  ,     /* QW0140BP EQU x'000000D7' = APPLICATION PLAN               */
  ,     /* QW0140BQ EQU x'000000D8' = SEQUENCE                       */
  ,     /* QW0140BS EQU x'000000D9' = TABLESPACE                     */
  ,     /* QW0140BG EQU x'00000000' = STORAGE GROUP                  */
  ,     /* QW0140BT EQU x'00000000' = TABLE OR VIEW                  */
  ,     /* QW0140BU EQU x'00000000' = USER AUTH                      */
  ,     /* QW0140AC EQU x'000000C1' = ACEE                           */
  ,     /* QW0140RO EQU x'00000000' = ROW                            */
    =00004 QW0140SC +8 , /* C - %U SOURCE OBJECT OWNER:  Two c 00003 */
    =00012 QW0140SN +18 , /* C - %U SOURCE OBJECT NAME:  Two c 0000B */
    =00030 QW0140TC +8 , /* C - %U TARGET OBJECT OWNER:  Quali 0001D */
    =00038 QW0140TN +18 , /* C - %U TARGET OBJECT NAME:  Name  00025 */
    =00056 QW0140UR +8 , /* C - %U AUTH ID BEING CHECKED       00037 */
    =00064 QW0140AT +1 , /* C - AUTH ID TYPE                   0003F */
    =00065 QW0140RC +2 , /* H - RETURN CODE FROM ACCESS CONTRO 00040 */
    =00067 RSVD0001 +2 , /* C - RESERVED                       00042 */
    =00069 QW0140RS +4 , /* F - USER DEFINED REASON CODE FROM  00044 */
    =00073 QW0140HO +8 , /* X - HOST OPTIONS FOR SQL STATEMENT 00048 */
    =00081 QW0140SC_Off +2 , /* H - Offset from QW0140 to      00050 */
    =00083 QW0140SN_Off +2 , /* H - Offset from QW0140 to      00052 */
    =00085 QW0140TC_Off +2 , /* H - Offset from QW0140 to      00054 */
    =00087 QW0140TN_Off +2 , /* H - Offset from QW0140 to      00056 */
    =00089 QW0140UR_Off +2 , /* H - Offset from QW0140 to      00058 */
    =00091 RSVD0002 +7 , /* C - RESERVED                       0005A */
    =00098 QW0140ID +5 , /* C - RID of row being updtd/delted  00061 */
    =00103 QW0140RL +8 , /* C - Seclabel for/of MLS table row  00066 */
    =00111 QW0140UT +80 , /* C - ACEE UTOKEN IF AVAILABLE      0006E */
    =00191 RSVD0003 +2 , /* H - RESERVED                       000BE */
,/* =00193 QW0140TX +0 ,    C - SQL TEXT AND LENGTH            000C0 */
    =00193 QW0140LL +4 , /* F - LENGTH OF FAILING SQL STATEMEN 000C0 */
    =00197 QW0140LE +2 , /* H - LENGTH OF TRUNCATED SQL STATEM 000C4 */
,/* =00199 QW0140SQ +0 ,    C - %U FAILING SQL STATEMENT (IF A 000C6 */
    =00001 QW0140SC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0140SC_Var +0 ,    C - %U SOURCE OBJECT OWNER     00002 */
    =00001 QW0140SN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0140SN_Var +0 ,    C - %U SOURCE OBJECT NAME      00002 */
    =00001 QW0140TC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0140TC_Var +0 ,    C - %U TARGET OBJECT OWNER     00002 */
    =00001 QW0140TN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0140TN_Var +0 ,    C - %U TARGET OBJECT NAME      00002 */
    =00001 QW0140UR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0140UR_Var +0 ,    C - %U AUTH ID BEING CHECKED   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0140PR = c2x(QW0140PR)
  hex_QW0140OB = c2x(QW0140OB)
  hex_QW0140SC = c2x(QW0140SC)
  hex_QW0140SN = c2x(QW0140SN)
  hex_QW0140TC = c2x(QW0140TC)
  hex_QW0140TN = c2x(QW0140TN)
  hex_QW0140UR = c2x(QW0140UR)
  hex_QW0140AT = c2x(QW0140AT)
  hex_QW0140RC = c2x(QW0140RC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0140RS = c2x(QW0140RS)
  hex_QW0140HO = c2x(QW0140HO)
  hex_QW0140SC_Off = c2x(QW0140SC_Off)
  hex_QW0140SN_Off = c2x(QW0140SN_Off)
  hex_QW0140TC_Off = c2x(QW0140TC_Off)
  hex_QW0140TN_Off = c2x(QW0140TN_Off)
  hex_QW0140UR_Off = c2x(QW0140UR_Off)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0140ID = c2x(QW0140ID)
  hex_QW0140RL = c2x(QW0140RL)
  hex_QW0140UT = c2x(QW0140UT)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0140LL = c2x(QW0140LL)
  hex_QW0140LE = c2x(QW0140LE)
  hex_QW0140SC_Len = c2x(QW0140SC_Len)
  hex_QW0140SN_Len = c2x(QW0140SN_Len)
  hex_QW0140TC_Len = c2x(QW0140TC_Len)
  hex_QW0140TN_Len = c2x(QW0140TN_Len)
  hex_QW0140UR_Len = c2x(QW0140UR_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0140",desired_dsect) > 0)) then do
    void_rc = queue_QW0140_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0140:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0140_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0140:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRIVILEGE BEING CHECKED      x:" hex_QW0140PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBJECT TYPE                  x:" hex_QW0140OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SOURCE OBJECT OWNER:  Two x:" hex_QW0140SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SOURCE OBJECT NAME:  Two  x:" hex_QW0140SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TARGET OBJECT OWNER:  Qua x:" hex_QW0140TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TARGET OBJECT NAME:  Name x:" hex_QW0140TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U AUTH ID BEING CHECKED     x:" hex_QW0140UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTH ID TYPE                 x:" hex_QW0140AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE FROM ACCESS CONT x:" hex_QW0140RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      USER DEFINED REASON CODE FRO x:" hex_QW0140RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOST OPTIONS FOR SQL STATEME x:" hex_QW0140HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0140 to        x:" hex_QW0140SC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0140 to        x:" hex_QW0140SN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0140 to        x:" hex_QW0140TC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0140 to        x:" hex_QW0140TN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0140 to        x:" hex_QW0140UR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RID of row being updtd/delte x:" hex_QW0140ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Seclabel for/of MLS table ro x:" hex_QW0140RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACEE UTOKEN IF AVAILABLE     x:" hex_QW0140UT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF FAILING SQL STATEM x:" hex_QW0140LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF TRUNCATED SQL STAT x:" hex_QW0140LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0140SC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0140SN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0140TC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0140TN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0140UR_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0141 length is 00022
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0141:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0141,34)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0141 Length: 34"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0141 ,
    =00001 QW0141OR +8 , /* C - %U GRANTOR OR REVOKER -  BLANK 00000 */
    =00009 QW0141AC +1 , /* C - ACCESS TYPE ( G  OR  R )       00008 */
    =00010 QW0141OB +1 , /* C - OBJECT TYPE (DEFINED IN QW0140 00009 */
    =00011 QW0141OT +1 , /* C - AUTH ID TYPE                   0000A */
    =00012 RSVD0001 +1 , /* C - RESERVED                       0000B */
    =00013 QW0141CO +4 , /* F - SQL CODE                       0000C */
    =00017 QW0141RE +1 , /* C - REASON ACCESS GRANTED (ONLY FO 00010 */
  ,     /* QW0141RS EQU x'00000000' = SYSADM                         */
  ,     /* QW0141RL EQU x'000000D3' = SYSCTRL                        */
  ,     /* QW0141RO EQU x'000000D6' = SYSOPR                         */
  ,     /* QW0141RD EQU x'000000C4' = DBADM                          */
  ,     /* QW0141RC EQU x'000000C3' = DBCTRL                         */
  ,     /* QW0141RM EQU x'000000D4' = DBMAINT                        */
  ,     /* QW0141RP EQU x'000000D7' = PACKADM ON A SPECIFIC COLLECTI */
  ,     /* QW0141RA EQU x'000000C1' = PACKADM ON ALL COLLECTIONS     */
    =00018 QW0141HO +8 , /* X - HOST OPTIONS                   00011 */
    =00026 RSVD0002 +1 , /* C - Reserved                       00019 */
    =00027 QW0141OR_Off +2 , /* H - Offset from QW0141 to      0001A */
    =00029 QW0141LL +4 , /* F - LENGTH OF FAILING SQL STATEMEN 0001C */
    =00033 QW0141LE +2 , /* H - LENGTH OF TRUNCATED SQL STATEM 00020 */
,/* =00035 QW0141TX +0 ,    C - %U SQL TEXT AND LENGTH ONLY FI 00022 */
    =00001 QW0141OR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0141OR_Var +0 ,    C - %U GRANTOR OR REVOKER      00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0141OR = c2x(QW0141OR)
  hex_QW0141AC = c2x(QW0141AC)
  hex_QW0141OB = c2x(QW0141OB)
  hex_QW0141OT = c2x(QW0141OT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0141CO = c2x(QW0141CO)
  hex_QW0141RE = c2x(QW0141RE)
  hex_QW0141HO = c2x(QW0141HO)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0141OR_Off = c2x(QW0141OR_Off)
  hex_QW0141LL = c2x(QW0141LL)
  hex_QW0141LE = c2x(QW0141LE)
  hex_QW0141OR_Len = c2x(QW0141OR_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0141",desired_dsect) > 0)) then do
    void_rc = queue_QW0141_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0141:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0141_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0141:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U GRANTOR OR REVOKER -  BLA x:" hex_QW0141OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS TYPE ( G  OR  R )     x:" hex_QW0141AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBJECT TYPE (DEFINED IN QW01 x:" hex_QW0141OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTH ID TYPE                 x:" hex_QW0141OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL CODE                     x:" hex_QW0141CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON ACCESS GRANTED (ONLY  x:" hex_QW0141RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOST OPTIONS                 x:" hex_QW0141HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0141 to        x:" hex_QW0141OR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF FAILING SQL STATEM x:" hex_QW0141LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF TRUNCATED SQL STAT x:" hex_QW0141LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0141OR_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0142 length is 00046
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0142:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0142,70)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0142 Length: 70"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0142 ,
    =00001 QW0142DB +2 , /* H - DATABASE ID (DBID)             00000 */
    =00003 QW0142OB +2 , /* H - RECORD OBID                    00002 */
    =00005 QW0142OW +8 , /* C - %U TABLE OWNER, SAME AS QUALIF 00004 */
    =00013 QW0142CR +8 , /* C - %U TABLE CREATOR               0000C */
    =00021 QW0142AC +1 , /* C - STATEMENT TYPE (CREATE, DROP A 00014 */
    =00022 QW0142TN +18 , /* C - %U TABLE NAME                 00015 */
    =00040 QW0142HO +8 , /* X - HOST OPTIONS                   00027 */
    =00048 QW0142OR +1 , /* C - TABLE OWNER TYPE               0002F */
    =00049 QW0142OW_Off +2 , /* H - Offset from QW0142 to      00030 */
    =00051 QW0142CR_Off +2 , /* H - Offset from QW0142 to      00032 */
    =00053 QW0142TN_Off +2 , /* H - Offset from QW0142 to      00034 */
    =00055 QW0142SL +8 , /* C - %U SECLABEL USED WHEN DEFINED  00036 */
    =00063 QW0142ML +1 , /* C - MULTILEVEL SECURITY            0003E */
    =00064 RSVD0001 +1 , /* C - RESERVED                       0003F */
    =00065 QW0142LL +4 , /* F - LENGTH OF SQL STATEMENT + 4    00040 */
    =00069 QW0142LE +2 , /* H - LENGTH OF TRUNCATED SQL STATEM 00044 */
,/* =00071 QW0142TX +0 ,    C - %U SQL TEXT AND LENGTH ONLY FI 00046 */
    =00001 QW0142OW_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0142OW_Var +0 ,    C - %U TABLE OWNER, SAME AS QU 00002 */
    =00001 QW0142CR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0142CR_Var +0 ,    C - %U TABLE CREATOR           00002 */
    =00001 QW0142TN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0142TN_Var +0 ,    C - %U TABLE NAME              00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0142DB = c2x(QW0142DB)
  hex_QW0142OB = c2x(QW0142OB)
  hex_QW0142OW = c2x(QW0142OW)
  hex_QW0142CR = c2x(QW0142CR)
  hex_QW0142AC = c2x(QW0142AC)
  hex_QW0142TN = c2x(QW0142TN)
  hex_QW0142HO = c2x(QW0142HO)
  hex_QW0142OR = c2x(QW0142OR)
  hex_QW0142OW_Off = c2x(QW0142OW_Off)
  hex_QW0142CR_Off = c2x(QW0142CR_Off)
  hex_QW0142TN_Off = c2x(QW0142TN_Off)
  hex_QW0142SL = c2x(QW0142SL)
  hex_QW0142ML = c2x(QW0142ML)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0142LL = c2x(QW0142LL)
  hex_QW0142LE = c2x(QW0142LE)
  hex_QW0142OW_Len = c2x(QW0142OW_Len)
  hex_QW0142CR_Len = c2x(QW0142CR_Len)
  hex_QW0142TN_Len = c2x(QW0142TN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0142",desired_dsect) > 0)) then do
    void_rc = queue_QW0142_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0142:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0142_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0142:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0142DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0142OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE OWNER, SAME AS QUAL x:" hex_QW0142OW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE CREATOR             x:" hex_QW0142CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT TYPE (CREATE, DROP x:" hex_QW0142AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE NAME                x:" hex_QW0142TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOST OPTIONS                 x:" hex_QW0142HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLE OWNER TYPE             x:" hex_QW0142OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0142 to        x:" hex_QW0142OW_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0142 to        x:" hex_QW0142CR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0142 to        x:" hex_QW0142TN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SECLABEL USED WHEN DEFINE x:" hex_QW0142SL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MULTILEVEL SECURITY          x:" hex_QW0142ML
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF SQL STATEMENT + 4  x:" hex_QW0142LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF TRUNCATED SQL STAT x:" hex_QW0142LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0142OW_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0142CR_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0142TN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0143 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0143:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0143,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0143 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0143 ,
    =00001 QW0143DB +2 , /* H - DATABASE ID (DBID)             00000 */
    =00003 QW0143PS +2 , /* H - PAGESET OBID                   00002 */
    =00005 QW0143OB +2 , /* H - RECORD OBID                    00004 */
    =00007 QW0143UR +6 , /* X - UNIT OF RECOVERY ID (LOG RBA O 00006 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0143DB = c2x(QW0143DB)
  hex_QW0143PS = c2x(QW0143PS)
  hex_QW0143OB = c2x(QW0143OB)
  hex_QW0143UR = c2x(QW0143UR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0143",desired_dsect) > 0)) then do
    void_rc = queue_QW0143_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0143:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0143_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0143:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0143DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0143PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0143OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNIT OF RECOVERY ID (LOG RBA x:" hex_QW0143UR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0144 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0144:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0144,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0144 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0144 ,
    =00001 QW0144DB +2 , /* H - DATABASE ID (DBID)             00000 */
    =00003 QW0144PS +2 , /* H - PAGESET OBID                   00002 */
    =00005 QW0144OB +2 , /* H - RECORD OBID                    00004 */
    =00007 QW0144UR +6 , /* X - UNIT OF RECOVERY ID (LOG RBA O 00006 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0144DB = c2x(QW0144DB)
  hex_QW0144PS = c2x(QW0144PS)
  hex_QW0144OB = c2x(QW0144OB)
  hex_QW0144UR = c2x(QW0144UR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0144",desired_dsect) > 0)) then do
    void_rc = queue_QW0144_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0144:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0144_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0144:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0144DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0144PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD OBID                  x:" hex_QW0144OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNIT OF RECOVERY ID (LOG RBA x:" hex_QW0144UR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0145 length is 0005A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0145:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0145,90)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0145 Length: 90"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0145 ,
    =00001 QW0145LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0145PC +18 , /* C - %U PACKAGE COLLECTION ID      00010 */
    =00035 QW0145PN +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0145TS +8 , /* X - TIME STAMP                     00034 */
    =00061 QW0145OS +2 , /* H - Reserved                       0003C */
    =00063 QW0145ST +2 , /* H - SQL STATEMENT TYPE             0003E */
  ,     /* QW0145O EQU x'00000003' OPEN                              */
  ,     /* QW0145F EQU x'00000004' FETCH                             */
  ,     /* QW0145C EQU x'00000005' CLOSE                             */
  ,     /* QW0145PR EQU x'0000000E' PREPARE                          */
  ,     /* QW0145E EQU x'0000000F' EXECUTE                           */
  ,     /* QW0145EI EQU x'00000010' EXECUTE IMMEDIATE                */
  ,     /* QW0145D EQU x'00000011' DESCRIBE                          */
  ,     /* QW0145EX EQU x'00000012' EXPLAIN                          */
  ,     /* QW0145SQ EQU x'00000000' SELECT - QUERY                   */
  ,     /* QW0145I EQU x'00000000' INSERT                            */
  ,     /* QW0145DE EQU x'00000000' DELETE                           */
  ,     /* QW0145U EQU x'000000EA' UPDATE                            */
  ,     /* QW0145SS EQU x'000000EF' SELECT - BQUERY OR SUBSELECT     */
  ,     /* QW0145L EQU x'00000116' LOCK                              */
  ,     /* QW0145CV EQU x'00000134' CREATE VIEW                      */
    =00065 QW0145HO +8 , /* X - HOST OPTIONS                   00040 */
,/* =00073 QW0145SC +0 ,    X - Was RESERVED                   00048 */
    =00073 QW0145SN +4 , /* F - PRECOMPILE STATEMENT NUMBER    00048 */
    =00077 QW0145LN_Off +2 , /* H - Offset from QW0145 to      0004C */
    =00079 QW0145PC_Off +2 , /* H - Offset from QW0145 to      0004E */
    =00081 QW0145PN_Off +2 , /* H - Offset from QW0145 to      00050 */
    =00083 RSVD0001 +2 , /* H -                                00052 */
    =00085 QW0145LL +4 , /* F - LENGTH OF SQL STATEMENT + 4    00054 */
    =00089 QW0145LE +2 , /* H - LENGTH OF TRUNCATED SQL STATEM 00058 */
,/* =00091 QW0145TX +0 ,    C - %U SQL TEXT AND LENGTH ONLY FI 0005A */
  ,
  ,/*00090 __no__name__ ORG - QW0145 - x'00000000'             0005A */
,/* =00001 QW0145P +0 ,    X - AUDIT LOG TABLE INFORMATION     00000 */
    =00001 QW0145DB +2 , /* X - AUDIT LOG TABLE DATABASE ID (D 00000 */
    =00003 QW0145OB +2 , /* X - AUDIT LOG TABLE RECORD ID OBID 00002 */
  ,
  ,/*00004 __no__name__ ORG - QW0145 - x'00000000'             00004 */
,/* =00001 QW0145IL +0 ,    X -                                00000 */
    =00001 QW0145IS +1 , /* C - STATEMENT ISOLATION LEVEL      00000 */
    =00002 RSVD0002 +3 , /* C - RESERVED                       00001 */
    =00001 QW0145LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0145LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0145PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0145PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0145PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0145PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
  ,     /* QW0145RR EQU x'000000D9' RR ISOLATION LEVEL               */
  ,     /* QW0145RS EQU x'00000000' RS ISOLATION LEVEL               */
  ,     /* QW0145CS EQU x'00000000' CS ISOLATION LEVEL               */
  ,     /* QW0145UR EQU x'00000000' UR ISOLATION LEVEL               */
  ,     /* QW0145XR EQU x'00000000' RR ISO LEVEL X-LOCK              */
  ,     /* QW0145XS EQU x'000000D3' RS ISO LEVEL X-LOCK              */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0145LN = c2x(QW0145LN)
  hex_QW0145PC = c2x(QW0145PC)
  hex_QW0145PN = c2x(QW0145PN)
  hex_QW0145TS = c2x(QW0145TS)
  hex_QW0145OS = c2x(QW0145OS)
  hex_QW0145ST = c2x(QW0145ST)
  hex_QW0145HO = c2x(QW0145HO)
  hex_QW0145SN = c2x(QW0145SN)
  hex_QW0145LN_Off = c2x(QW0145LN_Off)
  hex_QW0145PC_Off = c2x(QW0145PC_Off)
  hex_QW0145PN_Off = c2x(QW0145PN_Off)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0145LL = c2x(QW0145LL)
  hex_QW0145LE = c2x(QW0145LE)
  hex_QW0145DB = c2x(QW0145DB)
  hex_QW0145OB = c2x(QW0145OB)
  hex_QW0145IS = c2x(QW0145IS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0145LN_Len = c2x(QW0145LN_Len)
  hex_QW0145PC_Len = c2x(QW0145PC_Len)
  hex_QW0145PN_Len = c2x(QW0145PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0145",desired_dsect) > 0)) then do
    void_rc = queue_QW0145_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0145:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0145_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0145:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0145LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0145PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0145PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME STAMP                   x:" hex_QW0145TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0145OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL STATEMENT TYPE           x:" hex_QW0145ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOST OPTIONS                 x:" hex_QW0145HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILE STATEMENT NUMBER  x:" hex_QW0145SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0145 to        x:" hex_QW0145LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0145 to        x:" hex_QW0145PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0145 to        x:" hex_QW0145PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF SQL STATEMENT + 4  x:" hex_QW0145LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF TRUNCATED SQL STAT x:" hex_QW0145LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUDIT LOG TABLE DATABASE ID  x:" hex_QW0145DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUDIT LOG TABLE RECORD ID OB x:" hex_QW0145OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT ISOLATION LEVEL    x:" hex_QW0145IS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0145LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0145PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0145PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0146 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0146:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0146,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0146 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0146 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0146",desired_dsect) > 0)) then do
    void_rc = queue_QW0146_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0146:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0146_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0146:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0147 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0147:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0147,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0147 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0147 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0147",desired_dsect) > 0)) then do
    void_rc = queue_QW0147_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0147:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0147_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0147:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0148 length is 001A6
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0148:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0148,422)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0148 Length: 422"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0148 ,
    =00001 QW0148TY +8 , /* C - CONNECTION TYPE                00000 */
    =00009 QW0148AC +4 , /* F - ACE TOKEN REPORTED             00008 */
    =00013 QW0148RQ +2 , /* H - APPLICATION REQUEST COUNT IS T 0000C */
    =00015 QW0148AS +2 , /* H - ASID OF AGENT                  0000E */
    =00017 QW0148AI +1 , /* C - A = IN APPLICATION             00010 */
    =00018 QW0148FL +1 , /* X - AGENT STATUS FLAGS             00011 */
  ,     /* QW0148CD EQU x'00000080' 1=THREAD AT PLAN LEVEL.          */
  ,     /* QW0148ES EQU x'00000040' AGENT IS DEFERRED TERMINATION    */
  ,     /* QW0148CQ EQU x'00000020' 1=CREATE_THREAD IS QUEUED        */
  ,     /* QW0148TS EQU x'00000010' 1=TSO FOREGROUND.                */
  ,     /* QW0148EQ EQU x'00000008' AGENT QUEUED FOR EOT TERM.       */
  ,     /* QW0148SN EQU x'00000004' AGENT IS RUNNING A STORED        */
  ,     /* QW0148SQ EQU x'00000002' AGENT IS QUEUED WAITING FOR A    */
  ,     /* QW0148CM EQU x'00000001' On = last act was commit         */
    =00019 QW0148F2 +1 , /* X - AGENT STATUS FLAGS             00012 */
  ,     /* QW0148D0 EQU x'000000FC' RESERVED                         */
  ,     /* QW0148DA EQU x'00000002' DATA BASE ACCESS AGENT.          */
  ,     /* QW0148DD EQU x'00000001' DISTRIBUTED ALLIED AGENT.        */
    =00020 QW0148F3 +1 , /* X - (S)                            00013 */
  ,     /* QW0148AP EQU x'00000080' 1=ACCELERATOR PROCESSING         */
    =00021 QW0148MA +4 , /* F - ASCB TOKEN                     00014 */
    =00025 QW0148MT +4 , /* F - TCB  TOKEN                     00018 */
,/* =00029 QW0148CP +0 ,    C - CURRENT PACKAGE NAME           0001C */
    =00029 QW0148LN +16 , /* C - %U LOCATION NAME              0001C */
,/* =00045 QW0148PK +0 ,    C - PACKAGE NAME                   0002C */
    =00045 QW0148CI +18 , /* C - %U COLLECTION NAME            0002C */
    =00063 QW0148PN +18 , /* C - %U PACKAGE ID                 0003E */
    =00081 QW0148CN +8 , /* C - CONSISTENCY TOKEN - 64 BIT     00050 */
,/* =00089 RSVD0001 +0 ,    F -                                00058 */
,/* =00089 QW0148LU +0 ,    C - LUWID                          00058 */
    =00089 QW0148NI +8 , /* C - NETWORK ID                     00058 */
    =00097 QW0148LM +8 , /* C - LUNAME                         00060 */
    =00105 QW0148UV +6 , /* X - UNIQUENESS VALUE               00068 */
    =00111 QW0148CC +2 , /* G - COMMIT COUNT                   0006E */
,/* =00113 QW0148W +0 ,    F -                                 00070 */
    =00113 QW0148AB +8 , /* X - SQL begin store clock time on  00070 */
    =00121 QW0148AE +8 , /* X - SQL end store clock time on th 00078 */
    =00129 QW0148UB +8 , /* X - SQL begin CPU time on the main 00080 */
    =00137 QW0148UE +8 , /* X - SQL end CPU time on the main   00088 */
    =00145 QW0148SB +8 , /* X - NO LONGER USED                 00090 */
    =00153 QW0148SE +8 , /* X - NO LONGER USED                 00098 */
    =00161 QW0148LB +8 , /* X - LOCK-I/O-LATCH BEGIN ELAPSED T 000A0 */
    =00169 QW0148LE +8 , /* X - LOCK-I/O-LATCH END   ELAPSED T 000A8 */
    =00177 QW0148IL +2 , /* H - LATEST IFCID PROCESSED         000B0 */
    =00179 QW0148IP +2 , /* H - PREVIOUS IFCID PROCESSED       000B2 */
,/* =00181 QW0148R +0 ,    C - LAST SAVE RESOURCE INFORMATION  000B4 */
,/* =00181 QW0148LH +0 ,    X - LOCK HASH  LH FROM IFC 44, 213 000B4 */
    =00181 QW0148DB +2 , /* X - DBID FOR I/O                   000B4 */
,/* =00183 QW0148OB +0 ,    X - OBID FOR I/O                   000B6 */
    =00183 RSVD0002 +1 , /* C - RESERVED FOR LATCH             000B6 */
    =00184 QW0148LC +1 , /* X - LATCH CLASS                    000B7 */
,/* =00185 QW0148LK +0 ,    C - LOCK NAME LK FROM IFC 44, 213  000B8 */
    =00185 QW0148LA +8 , /* X - LATCH TOKEN                    000B8 */
    =00193 RSVD0003 +24 , /* C - RESERVED                      000C0 */
    =00217 QW0148EO +8 , /* X - CPU TIME FROM DSN3EOT0         000D8 */
    =00225 QW0148LW +8 , /* X - CPU time at entry to the most  000E0 */
    =00233 QW0148EB +8 , /* X - WAIT FOR DB2 SERVICE TASK BEGI 000E8 */
    =00241 QW0148EE +8 , /* X - WAIT FOR DB2 SERVICE TASK END  000F0 */
    =00249 QW0148RB +8 , /* X - WAIT FOR ARCHIVE LOG MODE(QUIE 000F8 */
    =00257 QW0148RE +8 , /* X - WAIT FOR ARCHIVE LOG MODE(QUIE 00100 */
,/* =00265 QW0148W1 +0 ,    F -                                00108 */
    =00265 QW148IAB +8 , /* C - BEGIN ELAPSED TIME PROCESSING  00108 */
    =00273 QW148IAE +8 , /* C - END ELAPSED TIME PROCESSING AN 00110 */
    =00281 QW148IUB +8 , /* C - BEGIN CPU TIME PROCESSING AN   00118 */
    =00289 QW148IUE +8 , /* C - END CPU TIME PROCESSING AN     00120 */
,/* =00297 QW0148W2 +0 ,    F -                                00128 */
    =00297 QW148TTK +4 , /* F - THREAD TOKEN.  UNIQUELY IDENTI 00128 */
,/* =00301 QW0148W3 +0 ,    F -                                0012C */
,/* =00301 QW0148S +0 ,    C - STORED PROCEDURE                0012C */
    =00301 QW0148SP +18 , /* C - %U name of activity           0012C */
    =00319 QW148AFG +2 , /* C - Activity flag                  0013E */
,/* =00321 QW148W3 +0 ,    F -                                 00140 */
    =00321 QW148SCH +8 , /* C - %U Nested activity schema name 00140 */
    =00329 QW0148CLS2_BegNTela +8 , /* C - Beginning store clo 00148 */
    =00337 QW0148CLS2_BegNTcp +8 , /* C - Beginning CPU time f 00150 */
    =00345 QW148ATC +8 , /* C - Beginning CPU time for the cur 00158 */
    =00353 QW148AOD +8 , /* C - Beginning store clock for the  00160 */
    =00361 QW148ETK +8 , /* C - Enclave token - 64 BIT unsigne 00168 */
    =00369 QW148ALV +4 , /* F - Activity nesting level: 0-16   00170 */
    =00373 QW0148LN_Off +2 , /* H - Offset from QW0148 to      00174 */
    =00375 QW0148CI_Off +2 , /* H - Offset from QW0148 to      00176 */
    =00377 QW0148PN_Off +2 , /* H - Offset from QW0148 to      00178 */
    =00379 QW0148SP_Off +2 , /* H - Offset from QW0148 to      0017A */
    =00381 QW148SCH_Off +2 , /* H - Offset from QW0148 to      0017C */
  ,     /* QW0148_SE EQU x'0000017E'                                 */
    =00383 QW0148CLS1_BegNNse +8 , /* C - Beginning CPU IBM sp 0017E */
    =00391 QW0148CLS2_BegNNse +8 , /* C - Beginning CPU IBM sp 00186 */
    =00399 QW0148CLS1_BegNTse +8 , /* C - Beginning CPU IBM sp 0018E */
    =00407 QW0148CLS2_BegNTse +8 , /* C - Beginning CPU IBM sp 00196 */
    =00415 QW0148Wait_se +8 , /* C - CPU time consumed on an I 0019E */
,/* =00423 RSVD0004 +0 ,    C -                                001A6 */
    =00001 QW0148LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0148LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0148CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0148CI_Var +0 ,    C - %U COLLECTION NAME         00002 */
    =00001 QW0148PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0148PN_Var +0 ,    C - %U PACKAGE ID              00002 */
    =00001 QW0148SP_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0148SP_Var +0 ,    C - %U name of activity        00002 */
    =00001 QW148SCH_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW148SCH_Var +0 ,    C - %U Nested activity schema  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0148TY = c2x(QW0148TY)
  hex_QW0148AC = c2x(QW0148AC)
  hex_QW0148RQ = c2x(QW0148RQ)
  hex_QW0148AS = c2x(QW0148AS)
  hex_QW0148AI = c2x(QW0148AI)
  hex_QW0148FL = c2x(QW0148FL)
  hex_QW0148F2 = c2x(QW0148F2)
  hex_QW0148F3 = c2x(QW0148F3)
  hex_QW0148MA = c2x(QW0148MA)
  hex_QW0148MT = c2x(QW0148MT)
  hex_QW0148LN = c2x(QW0148LN)
  hex_QW0148CI = c2x(QW0148CI)
  hex_QW0148PN = c2x(QW0148PN)
  hex_QW0148CN = c2x(QW0148CN)
  hex_QW0148NI = c2x(QW0148NI)
  hex_QW0148LM = c2x(QW0148LM)
  hex_QW0148UV = c2x(QW0148UV)
  hex_QW0148CC = c2x(QW0148CC)
  hex_QW0148AB = c2x(QW0148AB)
  hex_QW0148AE = c2x(QW0148AE)
  hex_QW0148UB = c2x(QW0148UB)
  hex_QW0148UE = c2x(QW0148UE)
  hex_QW0148SB = c2x(QW0148SB)
  hex_QW0148SE = c2x(QW0148SE)
  hex_QW0148LB = c2x(QW0148LB)
  hex_QW0148LE = c2x(QW0148LE)
  dec_QW0148IL = c2d(QW0148IL)
  dec_QW0148IP = c2d(QW0148IP)
  hex_QW0148DB = c2x(QW0148DB)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0148LC = c2x(QW0148LC)
  hex_QW0148LA = c2x(QW0148LA)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0148EO = c2x(QW0148EO)
  hex_QW0148LW = c2x(QW0148LW)
  hex_QW0148EB = c2x(QW0148EB)
  hex_QW0148EE = c2x(QW0148EE)
  hex_QW0148RB = c2x(QW0148RB)
  hex_QW0148RE = c2x(QW0148RE)
  hex_QW148IAB = c2x(QW148IAB)
  hex_QW148IAE = c2x(QW148IAE)
  hex_QW148IUB = c2x(QW148IUB)
  hex_QW148IUE = c2x(QW148IUE)
  hex_QW148TTK = c2x(QW148TTK)
  hex_QW0148SP = c2x(QW0148SP)
  hex_QW148AFG = c2x(QW148AFG)
  hex_QW148SCH = c2x(QW148SCH)
  hex_QW0148CLS2_BegNTela = c2x(QW0148CLS2_BegNTela)
  hex_QW0148CLS2_BegNTcp = c2x(QW0148CLS2_BegNTcp)
  hex_QW148ATC = c2x(QW148ATC)
  hex_QW148AOD = c2x(QW148AOD)
  hex_QW148ETK = c2x(QW148ETK)
  hex_QW148ALV = c2x(QW148ALV)
  hex_QW0148LN_Off = c2x(QW0148LN_Off)
  hex_QW0148CI_Off = c2x(QW0148CI_Off)
  hex_QW0148PN_Off = c2x(QW0148PN_Off)
  hex_QW0148SP_Off = c2x(QW0148SP_Off)
  hex_QW148SCH_Off = c2x(QW148SCH_Off)
  hex_QW0148CLS1_BegNNse = c2x(QW0148CLS1_BegNNse)
  hex_QW0148CLS2_BegNNse = c2x(QW0148CLS2_BegNNse)
  hex_QW0148CLS1_BegNTse = c2x(QW0148CLS1_BegNTse)
  hex_QW0148CLS2_BegNTse = c2x(QW0148CLS2_BegNTse)
  hex_QW0148Wait_se = c2x(QW0148Wait_se)
  hex_QW0148LN_Len = c2x(QW0148LN_Len)
  hex_QW0148CI_Len = c2x(QW0148CI_Len)
  hex_QW0148PN_Len = c2x(QW0148PN_Len)
  hex_QW0148SP_Len = c2x(QW0148SP_Len)
  hex_QW148SCH_Len = c2x(QW148SCH_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0148",desired_dsect) > 0)) then do
    void_rc = queue_QW0148_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0148:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0148_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0148:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTION TYPE              x:" hex_QW0148TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN REPORTED           x:" hex_QW0148AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      APPLICATION REQUEST COUNT IS x:" hex_QW0148RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASID OF AGENT                x:" hex_QW0148AS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      A = IN APPLICATION           x:" hex_QW0148AI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AGENT STATUS FLAGS           x:" hex_QW0148FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AGENT STATUS FLAGS           x:" hex_QW0148F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0148F3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASCB TOKEN                   x:" hex_QW0148MA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TCB  TOKEN                   x:" hex_QW0148MT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0148LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION NAME           x:" hex_QW0148CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0148PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN - 64 BIT   x:" hex_QW0148CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NETWORK ID                   x:" hex_QW0148NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LUNAME                       x:" hex_QW0148LM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNIQUENESS VALUE             x:" hex_QW0148UV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COMMIT COUNT                 x:" hex_QW0148CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL begin store clock time o x:" hex_QW0148AB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL end store clock time on  x:" hex_QW0148AE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL begin CPU time on the ma x:" hex_QW0148UB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL end CPU time on the main x:" hex_QW0148UE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NO LONGER USED               x:" hex_QW0148SB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NO LONGER USED               x:" hex_QW0148SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK-I/O-LATCH BEGIN ELAPSED x:" hex_QW0148LB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK-I/O-LATCH END   ELAPSED x:" hex_QW0148LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LATEST IFCID PROCESSED        :" dec_QW0148IL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PREVIOUS IFCID PROCESSED      :" dec_QW0148IP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID FOR I/O                 x:" hex_QW0148DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FOR LATCH           x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LATCH CLASS                  x:" hex_QW0148LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LATCH TOKEN                  x:" hex_QW0148LA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU TIME FROM DSN3EOT0       x:" hex_QW0148EO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU time at entry to the mos x:" hex_QW0148LW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAIT FOR DB2 SERVICE TASK BE x:" hex_QW0148EB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAIT FOR DB2 SERVICE TASK EN x:" hex_QW0148EE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAIT FOR ARCHIVE LOG MODE(QU x:" hex_QW0148RB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAIT FOR ARCHIVE LOG MODE(QU x:" hex_QW0148RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BEGIN ELAPSED TIME PROCESSIN x:" hex_QW148IAB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END ELAPSED TIME PROCESSING  x:" hex_QW148IAE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BEGIN CPU TIME PROCESSING AN x:" hex_QW148IUB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END CPU TIME PROCESSING AN   x:" hex_QW148IUE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THREAD TOKEN.  UNIQUELY IDEN x:" hex_QW148TTK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U name of activity          x:" hex_QW0148SP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Activity flag                x:" hex_QW148AFG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Nested activity schema na x:" hex_QW148SCH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning store clock for th x:" hex_QW0148CLS2_BegNTela
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU time for the m x:" hex_QW0148CLS2_BegNTcp
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU time for the c x:" hex_QW148ATC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning store clock for th x:" hex_QW148AOD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Enclave token - 64 BIT unsig x:" hex_QW148ETK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Activity nesting level: 0-16 x:" hex_QW148ALV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0148 to        x:" hex_QW0148LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0148 to        x:" hex_QW0148CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0148 to        x:" hex_QW0148PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0148 to        x:" hex_QW0148SP_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0148 to        x:" hex_QW148SCH_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU IBM specialty  x:" hex_QW0148CLS1_BegNNse
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU IBM specialty  x:" hex_QW0148CLS2_BegNNse
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU IBM specialty  x:" hex_QW0148CLS1_BegNTse
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Beginning CPU IBM specialty  x:" hex_QW0148CLS2_BegNTse
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CPU time consumed on an IBM  x:" hex_QW0148Wait_se
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0148LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0148CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0148PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0148SP_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW148SCH_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01488 length is 0002E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01488:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01488,46)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01488 Length: 46"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01488 ,
    =00001 QW01488L +16 , /* C - %U LOCATION NAME OF THE  REMO 00000 */
    =00017 QW01488C +4 , /* X - VTAM APPC CONVERSATION ID      00010 */
    =00021 QW01488S +8 , /* C - Connection ID.                 00014 */
    =00029 QW01488A +1 , /* X - CONVERSATION ACTIVE FLAG       0001C */
  ,     /* QW0148AT EQU x'000000FF' CONTROL OF THE COVERSATION IS IN */
  ,     /* QW0148SU EQU x'0000000F' THE AGENT IS SUSPENDED IN DB2    */
  ,     /* QW0148IN EQU x'00000000' NONE OF THE ABOVE                */
    =00030 RSVD0001 +3 , /* C - RESERVED                       0001D */
    =00033 QW01488U +2 , /* X - CONVERSATION STATUS INDICATOR  00020 */
  ,     /* QW014800 EQU x'00000000' VERY BEGINNING OF ALLOCATE STATE */
  ,     /* QW014801 EQU x'00000001' IN CONVERSATION ALLOCATION,      */
  ,     /* QW014802 EQU x'00000002' IN CONVERSATION ALLOCATION,      */
  ,     /* QW014803 EQU x'00000003' IN CONVERSATION ALLOCATION       */
  ,     /* QW014804 EQU x'00000004' IN CONVERSATION ALLOCATION       */
  ,     /* QW014810 EQU x'00000010' SEND STATE                       */
  ,     /* QW014811 EQU x'00000011' SEND STATE                       */
  ,     /* QW014812 EQU x'00000012' SEND STATE                       */
  ,     /* QW014813 EQU x'00000013' SEND STATE                       */
  ,     /* QW014814 EQU x'00000014' SEND STATE                       */
  ,     /* QW014815 EQU x'00000015' SEND STATE                       */
  ,     /* QW014816 EQU x'00000016' SEND STATE                       */
  ,     /* QW014817 EQU x'00000017' SEND STATE                       */
  ,     /* QW014818 EQU x'00000018' SEND STATE                       */
  ,     /* QW014820 EQU x'00000020' RECEIVE STATE                    */
  ,     /* QW014821 EQU x'00000021' RECEIVE STATE                    */
  ,     /* QW014822 EQU x'00000022' RECEIVE STATE                    */
  ,     /* QW014823 EQU x'00000023' RECEIVE STATE                    */
  ,     /* QW014824 EQU x'00000024' RECEIVE STATE                    */
  ,     /* QW014825 EQU x'00000025' RECEIVE STATE                    */
  ,     /* QW014826 EQU x'00000026' RECEIVE STATE                    */
  ,     /* QW014830 EQU x'00000030' IN CONVERSATION DEALLOCATION     */
  ,     /* QW014831 EQU x'00000031' IN CONVERSATION DEALLOCATION     */
  ,     /* QW014832 EQU x'00000032' IN CONVERSATION DEALLOCATION     */
    =00035 QW0148CT +1 , /* C - CONVERSATION TYPE INDICATOR    00022 */
  ,     /* QW0148IA EQU x'00000000' INACTIVE CONVERSATION            */
  ,     /* QW0148DU EQU x'00000001' CONVERSATION TYPE IS SYSTEM DIRE */
  ,     /* QW0148RU EQU x'00000002' CONVERSATION TYPE IS APPLICATION */
  ,     /* QW0148DP EQU x'00000003' CONVERSATION TYPE IS SYSTEM DIRE */
  ,     /* QW0148RP EQU x'00000004' CONVERSATION TYPE IS APPLICATION */
    =00036 QW01488N +1 , /* C - Type of network connection use 00023 */
    =00037 QW01488T +8 , /* C - TIMESTAMP (STCK VALUE) OF THE  00024 */
    =00045 QW01488L_Off +2 , /* H - Offset from QW01488 to     0002C */
,/* =00047 RSVD0002 +0 ,    C -                                0002E */
    =00001 QW01488L_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW01488L_Var +0 ,    C - %U LOCATION NAME OF THE  R 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW01488L = c2x(QW01488L)
  hex_QW01488C = c2x(QW01488C)
  hex_QW01488S = c2x(QW01488S)
  hex_QW01488A = c2x(QW01488A)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW01488U = c2x(QW01488U)
  hex_QW0148CT = c2x(QW0148CT)
  hex_QW01488N = c2x(QW01488N)
  hex_QW01488T = c2x(QW01488T)
  hex_QW01488L_Off = c2x(QW01488L_Off)
  hex_QW01488L_Len = c2x(QW01488L_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01488",desired_dsect) > 0)) then do
    void_rc = queue_QW01488_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01488:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01488_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01488:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME OF THE  REM x:" hex_QW01488L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VTAM APPC CONVERSATION ID    x:" hex_QW01488C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Connection ID.               x:" hex_QW01488S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATION ACTIVE FLAG     x:" hex_QW01488A
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATION STATUS INDICATO x:" hex_QW01488U
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATION TYPE INDICATOR  x:" hex_QW0148CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of network connection u x:" hex_QW01488N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP (STCK VALUE) OF TH x:" hex_QW01488T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01488 to       x:" hex_QW01488L_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW01488L_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01489 length is 0004E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01489:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01489,78)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01489 Length: 78"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01489 ,
    =00001 QW01489L +16 , /* C - %U LOCATION NAME OF THE  REMO 00000 */
    =00017 QW0148MS +4 , /* F - NUMBER OF MESSAGES SENT TO THE 00010 */
    =00021 QW0148MR +4 , /* F - NUMBER OF MESSAGES RECEIVED FR 00014 */
    =00025 QW0148EL +8 , /* X - ACCUMULATED ELAPSED TIME SPENT 00018 */
    =00033 QW0148ER +8 , /* X - ACCUMULATED ELAPSED DATA BASE  00020 */
    =00041 QW0148CR +8 , /* X - ACCUMULATED DATA BASE ACCESS A 00028 */
    =00049 QW0148PR +8 , /* C - THE PRDID OF THE REMOTE LOCATI 00030 */
    =00057 QW0148BT +4 , /* F - NUMBER OF BLOCKS TRANSMITTED U 00038 */
    =00061 QW0148BR +4 , /* F - NUMBER OF BLOCKS RECEIVED USIN 0003C */
    =00065 QW0148BO +4 , /* F - NUMBER OF ROWS IN THE MESSAGE  00040 */
    =00069 QW0148YS +4 , /* F - NUMBER OF BYTES OF DATA SENT T 00044 */
    =00073 QW0148YR +4 , /* F - NUMBER OF BYTES OF DATA RECEIV 00048 */
    =00077 QW01489L_Off +2 , /* H - Offset from QW01489 to     0004C */
,/* =00079 RSVD0001 +0 ,    C -                                0004E */
    =00001 QW01489L_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW01489L_Var +0 ,    C - %U LOCATION NAME OF THE  R 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW01489L = c2x(QW01489L)
  hex_QW0148MS = c2x(QW0148MS)
  hex_QW0148MR = c2x(QW0148MR)
  hex_QW0148EL = c2x(QW0148EL)
  hex_QW0148ER = c2x(QW0148ER)
  hex_QW0148CR = c2x(QW0148CR)
  hex_QW0148PR = c2x(QW0148PR)
  hex_QW0148BT = c2x(QW0148BT)
  hex_QW0148BR = c2x(QW0148BR)
  hex_QW0148BO = c2x(QW0148BO)
  hex_QW0148YS = c2x(QW0148YS)
  hex_QW0148YR = c2x(QW0148YR)
  hex_QW01489L_Off = c2x(QW01489L_Off)
  hex_QW01489L_Len = c2x(QW01489L_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01489",desired_dsect) > 0)) then do
    void_rc = queue_QW01489_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01489:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01489_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01489:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME OF THE  REM x:" hex_QW01489L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MESSAGES SENT TO T x:" hex_QW0148MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF MESSAGES RECEIVED  x:" hex_QW0148MR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ELAPSED TIME SPE x:" hex_QW0148EL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED ELAPSED DATA BAS x:" hex_QW0148ER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCUMULATED DATA BASE ACCESS x:" hex_QW0148CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE PRDID OF THE REMOTE LOCA x:" hex_QW0148PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BLOCKS TRANSMITTED x:" hex_QW0148BT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BLOCKS RECEIVED US x:" hex_QW0148BR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ROWS IN THE MESSAG x:" hex_QW0148BO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BYTES OF DATA SENT x:" hex_QW0148YS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF BYTES OF DATA RECE x:" hex_QW0148YR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW01489 to       x:" hex_QW01489L_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW01489L_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0149 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0149:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0149,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0149 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0149 ,
    .           /* End of DSECT */
  /* next byte at 3 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0149",desired_dsect) > 0)) then do
    void_rc = queue_QW0149_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0149:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0149_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0149:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01502 length is 0002C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01502:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01502,44)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01502 Length: 44"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01502 ,
    =00001 QW0150FL +1 , /* X - FLAG BYTE                      00000 */
  ,     /* QW0150G1 EQU x'00000080' RESOURCE IS GLOBAL               */
    =00002 RSVD0001 +1 , /* X - RESERVED                       00001 */
    =00003 RSVD0002 +2 , /* X - RESERVED                       00002 */
    =00005 QW0150LH +4 , /* X - HASH TOKEN                     00004 */
,/* =00009 QW0150LK +0 ,    C - DB2 LOCK NAME                  00008 */
    =00009 QW0150KL +1 , /* G - ()LENGTH OF THE LOCK NAME      00008 */
    =00010 RSVD0003 +2 , /* C - ()RESERVED                     00009 */
    =00012 QW0150KT +1 , /* X - ()FLAGS FOR THE LOCKED RESOURC 0000B */
  ,     /* QW0150L0 EQU x'00000000' DATA PAGE LOCKING                */
  ,     /* QW0150L1 EQU x'00000001' DATA BASE LOCKING                */
  ,     /* QW0150L2 EQU x'00000002' PAGESET LOCKING                  */
  ,     /* QW0150L3 EQU x'00000003' PARTITIONED TABLESPACE LOCKING   */
  ,     /* QW0150L4 EQU x'00000004' SKELETON CURSOR TABLE LOCKING    */
  ,     /* QW0150L5 EQU x'00000005' INDEX PAGE LOCKING               */
  ,     /* QW0150L6 EQU x'00000006' PARTITION LOCKING                */
  ,     /* QW0150L7 EQU x'00000007' PAGESET OR DATA SET OPEN LOCK    */
  ,     /* QW0150L8 EQU x'00000008' (S)                              */
  ,     /* QW0150L9 EQU x'00000009' (S)                              */
  ,     /* QW0150LA EQU x'0000000A' START/STOP LOCK ON DBA TABLE     */
  ,     /* QW0150LB EQU x'0000000B' (S)                              */
  ,     /* QW0150LC EQU x'0000000C' (S)                              */
  ,     /* QW0150LD EQU x'0000000D' SYSLGRNG RECORDING LOCK          */
  ,     /* QW0150LE EQU x'0000000E' UTILITY SERIALIZATION LOCK       */
  ,     /* QW0150LF EQU x'0000000F' MASS DELETE LOCK                 */
  ,     /* QW0150LG EQU x'00000010' TABLE LOCKING                    */
  ,     /* QW0150LI EQU x'00000011' HASH ANCHOR LOCK                 */
  ,     /* QW0150LJ EQU x'00000012' SKELETON PACKAGE TABLE LOCK      */
  ,     /* QW0150LL EQU x'00000013' COLLECTION LOCK                  */
  ,     /* QW0150LN EQU x'00000014' CS-READ DRAIN LOCK               */
  ,     /* QW0150LW EQU x'00000015' RR-READ DRAIN LOCK               */
  ,     /* QW0150LQ EQU x'00000016' WRITE DRAIN LOCK                 */
  ,     /* QW0150LM EQU x'00000017' AUTOBIND/REMOTE BIND LOCK        */
  ,     /* QW0150MR EQU x'00000018' ROW LOCK                         */
  ,     /* QW0150MI EQU x'00000019' INDEX END-OF-FILE LOCK           */
  ,     /* QW0150LR EQU x'0000001A' ALTER BUFFERPOOL LOCK            */
  ,     /* QW0150LS EQU x'0000001B' GROUP BUFFERPOOL START/STOP      */
  ,     /* QW0150LT EQU x'0000001C' INDEX MANAGER TREE P-LOCK        */
  ,     /* QW0150LU EQU x'0000001D' PAGESET/PARTITION P-LOCK         */
  ,     /* QW0150LV EQU x'0000001E' PAGE P-LOCK                      */
  ,     /* QW0150LX EQU x'0000001F' DDF CDB P-lock                   */
  ,     /* QW0150LY EQU x'00000020' Group Buffer Pool level          */
  ,     /* QW0150LZ EQU x'00000021' Pageset or partition level       */
  ,     /* QW0150M0 EQU x'00000022' RLF P-lock                       */
  ,     /* QW0150M1 EQU x'00000023' DBD P-lock                       */
  ,     /* QW0150M2 EQU x'00000024' CATMAINT convert directory lock  */
  ,     /* QW0150M3 EQU x'00000025' CATMAINT convert catalog lock    */
  ,     /* QW0150M4 EQU x'00000026' CATMAINT migration lock          */
  ,     /* QW0150M5 EQU x'00000027' DB exception LPL/GRECP lock      */
  ,     /* QW0150M6 EQU x'00000028' Utility UID lock                 */
  ,     /* QW0150M7 EQU x'00000029' Utility exclusive execution lock */
  ,     /* QW0150M8 EQU x'0000002A' SCA access for restart/redo info */
  ,     /* QW0150M9 EQU x'0000002B' Group database exception update  */
  ,     /* QW0150MA EQU x'0000002C' REPAIR DBD TEST/DIAGNOSE         */
  ,     /* QW0150MB EQU x'0000002D' Database command serialization   */
  ,     /* QW0150MX EQU x'0000002F' (S)                              */
  ,     /* QW0150ML EQU x'00000030' LOB lock                         */
  ,     /* QW0150MM EQU x'00000032' LPL recovery lock                */
  ,     /* QW0150MN EQU x'00000033' hdr page hash bucket lock        */
  ,     /* QW0150MC EQU x'00000035' XML lock                         */
  ,     /* QW0150DL EQU x'00000039' DBD Load lock                    */
  ,     /* QW015000 EQU x'000000FF' (S)                              */
,/* =00013 QW0150RN +0 ,    C - LOCKED RESOURCE NAME           0000C */
    =00013 QW0150KD +2 , /* C - () DATABASE ID  *SEE 5. BELOW  0000C */
,/* =00015 QW0150KB +0 ,    C - () TABLE RECORD OBID *SEE 5. B 0000E */
    =00015 QW0150KP +2 , /* C - () PAGESET OBID OR TABLE RECOR 0000E */
,/* =00017 QW0150KR +0 ,    C - ID OF SMALL RESOURCE           00010 */
    =00017 QW0150K1 +3 , /* C - 1. For pageset or data base lo 00010 */
    =00020 QW0150K2 +1 , /* X - QW0150K1 and  QW0150K2 are zer 00013 */
    =00021 RSVD0004 +1 , /* X - 2. FOR PARTITION LOCKS, QW0150 00014 */
  ,
  ,/*00021 __no__name__ ORG - QW0150KR - x'00000010'           00015 */
,/* =00017 QW0150KY +0 ,    C - ID of small resource when QW01 00010 */
    =00017 QW0150K4 +4 , /* C - page number (within large tabl 00010 */
    =00021 QW0150K5 +1 , /* X - record id within page          00014 */
  ,
  ,/*00021 __no__name__ ORG - QW0150KR - x'00000010'           00015 */
,/* =00017 QW0150KZ +0 ,    C - ID of sm res when QW0150KT= 33 00010 */
    =00017 QW0150K8 +2 , /* X - partition number               00010 */
    =00019 QW0150K9 +1 , /* X - hash bucket number             00012 */
    =00020 RSVD0005 +1 , /* X - unused - 0                     00013 */
  ,
  ,/*00020 __no__name__ ORG - QW0150KR - x'00000010'           00014 */
    =00017 QW0150KC +9 , /* C - * ID of resource for XML locks 00010 */
    =00026 RSVD0006 +1 , /* C - * unused to match the format   00019 */
  ,
  ,/*00026 __no__name__ ORG - QW0150KR - x'00000010'           0001A */
,/* =00017 QW0150KX +0 ,    C - * ID of resource for LOB locks 00010 */
    =00017 QW0150K6 +17 , /* C - * Row ID                      00010 */
    =00034 QW0150K7 +2 , /* C - * Version number               00021 */
    =00036 RSVD0007 +5 , /* C - * REST OF SPACE FOR 28 BYTE RE 00023 */
    =00041 RSVD0008 +4 , /* X - RESERVED                       00028 */
,/* =00045 RSVD0009 +0 ,    F -                                0002C */
  ,
  ,/*00044 __no__name__ ORG - QW0150RN - x'0000000C' * Lock na 0002C */
,/* =00013 QW0150PL +0 ,    C - * Locked P-lock resource name. 0000C */
,/* =00013 QW0150P8 +0 ,    C -                                0000C */
    =00013 QW0150P1 +1 , /* X -                                0000C */
    =00014 RSVD0010 +1 , /* C - *  Hex zeros                   0000D */
    =00015 QW0150P2 +2 , /* C -                                0000E */
    =00017 QW0150P3 +2 , /* C -                                00010 */
    =00019 QW0150P4 +2 , /* X -                                00012 */
    =00021 QW0150P5 +3 , /* C -                                00014 */
    =00024 RSVD0011 +17 , /* C - *  Hex zeros                  00017 */
  ,
  ,/*00040 __no__name__ ORG - QW0150RN - x'0000000C' * Lock na 00028 */
,/* =00013 QW0150A +0 ,    C - * Locked resource name          0000C */
    =00013 QW0150A0 +1 , /* X - * Data Manager RMID            0000C */
    =00014 QW0150A1 +5 , /* C - * Constant  GDBET              0000D */
    =00019 QW0150A6 +2 , /* X - * Database exception hash clas 00012 */
    =00021 RSVD0012 +20 , /* C - * Hex zeros                   00014 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW0150FL = c2x(QW0150FL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0150LH = c2x(QW0150LH)
  hex_QW0150KL = c2x(QW0150KL)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0150KT = c2x(QW0150KT)
  hex_QW0150KD = c2x(QW0150KD)
  hex_QW0150KP = c2x(QW0150KP)
  hex_QW0150K1 = c2x(QW0150K1)
  hex_QW0150K2 = c2x(QW0150K2)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0150K4 = c2x(QW0150K4)
  hex_QW0150K5 = c2x(QW0150K5)
  hex_QW0150K8 = c2x(QW0150K8)
  hex_QW0150K9 = c2x(QW0150K9)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0150KC = c2x(QW0150KC)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0150K6 = c2x(QW0150K6)
  hex_QW0150K7 = c2x(QW0150K7)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_RSVD0008 = c2x(RSVD0008)
  hex_QW0150P1 = c2x(QW0150P1)
  hex_RSVD0010 = c2x(RSVD0010)
  hex_QW0150P2 = c2x(QW0150P2)
  hex_QW0150P3 = c2x(QW0150P3)
  hex_QW0150P4 = c2x(QW0150P4)
  hex_QW0150P5 = c2x(QW0150P5)
  hex_RSVD0011 = c2x(RSVD0011)
  hex_QW0150A0 = c2x(QW0150A0)
  hex_QW0150A1 = c2x(QW0150A1)
  hex_QW0150A6 = c2x(QW0150A6)
  hex_RSVD0012 = c2x(RSVD0012)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01502",desired_dsect) > 0)) then do
    void_rc = queue_QW01502_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01502:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01502_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01502:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BYTE                    x:" hex_QW0150FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HASH TOKEN                   x:" hex_QW0150LH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()LENGTH OF THE LOCK NAME    x:" hex_QW0150KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()RESERVED                   x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()FLAGS FOR THE LOCKED RESOU x:" hex_QW0150KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID  *SEE 5. BELO x:" hex_QW0150KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID OR TABLE REC x:" hex_QW0150KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      1. For pageset or data base  x:" hex_QW0150K1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QW0150K1 and  QW0150K2 are z x:" hex_QW0150K2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      2. FOR PARTITION LOCKS, QW01 x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      page number (within large ta x:" hex_QW0150K4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      record id within page        x:" hex_QW0150K5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      partition number             x:" hex_QW0150K8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      hash bucket number           x:" hex_QW0150K9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      unused - 0                   x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * ID of resource for XML loc x:" hex_QW0150KC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * unused to match the format x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Row ID                     x:" hex_QW0150K6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Version number             x:" hex_QW0150K7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * REST OF SPACE FOR 28 BYTE  x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0008
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0150P1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  Hex zeros                 x:" hex_RSVD0010
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0150P2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0150P3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0150P4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0150P5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      *  Hex zeros                 x:" hex_RSVD0011
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Data Manager RMID          x:" hex_QW0150A0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Constant  GDBET            x:" hex_QW0150A1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Database exception hash cl x:" hex_QW0150A6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Hex zeros                  x:" hex_RSVD0012
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01503 length is 00030
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01503:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01503,48)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01503 Length: 48"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01503 ,
    =00001 QW0150R3 +4 , /* X - LOCK REQUEST TOKEN             00000 */
,/* =00005 QW0150U3 +0 ,    X - (S)                            00004 */
    =00005 QW0150RW +4 , /* X - (S)                            00004 */
    =00009 QW0150A3 +4 , /* X - ACE TOKEN                      00008 */
    =00013 QW0150SC +16 , /* H - (S)                           0000C */
    =00029 QW0150UC +4 , /* X - (S)                            0001C */
    =00033 QW0150D3 +1 , /* X - LOCK DURATION                  00020 */
    =00034 QW0150TL +1 , /* X - FLAGS                          00021 */
  ,     /* QW01503S EQU x'00000020' LOCK IS SUSPENDED                */
  ,     /* QW01503R EQU x'00000010' LOCK IS RETAINED                 */
  ,     /* QW01503H EQU x'00000008' LOCK IS HELD                     */
  ,     /* QW01503P EQU x'00000004' LOCK IS P-LOCK                   */
    =00035 QW0150ST +1 , /* X - LOCK STATE                     00022 */
    =00036 QW01503F +1 , /* X - FUNCTION (SEE MAPPINGS BELOW)  00023 */
    =00037 RSVD0001 +2 , /* X - RESERVED                       00024 */
    =00039 QW0150FB +1 , /* X - REASON FOR REQUEST SUSPENSION  00026 */
  ,     /* QW0150F1 EQU x'00000080' MAIN-LATCH CONTENTION            */
  ,     /* QW0150F2 EQU x'00000040' IRLM QUEUED REQUEST              */
  ,     /* QW0150F3 EQU x'00000020' LOCAL RESOURCE CONTENTION        */
  ,     /* QW0150F4 EQU x'00000010' INCOMPATIBLE RETAINED LOCK       */
  ,     /* QW0150F5 EQU x'00000008' INTER-SYSTEM COMMUNICATION REQ.  */
  ,     /* QW0150F6 EQU x'00000004' GLOBAL RESOURCE CONTENTION       */
  ,     /* QW0150F7 EQU x'00000002' NOTIFY MESSAGE SENT              */
  ,     /* QW0150F8 EQU x'00000001' FALSE RESOURCE CONTENTION INDICA */
    =00040 RSVD0002 +1 , /* X - RESERVED                       00027 */
    =00041 QW0150N3 +8 , /* X - SUBSYSTEM NAME                 00028 */
,/* =00049 RSVD0003 +0 ,    F - END                            00030 */
    .           /* End of DSECT */
  /* next byte at 49 */
  hex_QW0150R3 = c2x(QW0150R3)
  hex_QW0150RW = c2x(QW0150RW)
  hex_QW0150A3 = c2x(QW0150A3)
  hex_QW0150SC = c2x(QW0150SC)
  hex_QW0150UC = c2x(QW0150UC)
  hex_QW0150D3 = c2x(QW0150D3)
  hex_QW0150TL = c2x(QW0150TL)
  hex_QW0150ST = c2x(QW0150ST)
  hex_QW01503F = c2x(QW01503F)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0150FB = c2x(QW0150FB)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0150N3 = c2x(QW0150N3)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01503",desired_dsect) > 0)) then do
    void_rc = queue_QW01503_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01503:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01503_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01503:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK REQUEST TOKEN           x:" hex_QW0150R3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0150RW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN                    x:" hex_QW0150A3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0150SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0150UC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK DURATION                x:" hex_QW0150D3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0150TL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK STATE                   x:" hex_QW0150ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNCTION (SEE MAPPINGS BELOW x:" hex_QW01503F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR REQUEST SUSPENSIO x:" hex_QW0150FB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUBSYSTEM NAME               x:" hex_QW0150N3
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01504 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01504:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01504,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01504 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01504 ,
    =00001 QW0150T4 +4 , /* X - LOCK REQUEST TOKEN             00000 */
    =00005 RSVD0001 +2 , /* X - RESERVED                       00004 */
    =00007 RSVD0002 +1 , /* X - RESERVED                       00006 */
    =00008 QW0150R4 +1 , /* X - RETAINED STATE                 00007 */
    =00009 QW0150N4 +8 , /* X - SUBSYSTEM NAME                 00008 */
,/* =00017 RSVD0003 +0 ,    F - END                            00010 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0150T4 = c2x(QW0150T4)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0150R4 = c2x(QW0150R4)
  hex_QW0150N4 = c2x(QW0150N4)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01504",desired_dsect) > 0)) then do
    void_rc = queue_QW01504_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01504:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01504_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01504:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK REQUEST TOKEN           x:" hex_QW0150T4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETAINED STATE               x:" hex_QW0150R4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUBSYSTEM NAME               x:" hex_QW0150N4
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01505 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01505:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01505,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01505 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01505 ,
    =00001 QW01505F +1 , /* X - GLOBAL INTEREST FLAGS          00000 */
  ,     /* QW01505P EQU x'00000080' A PLOCK IS HELD                  */
    =00002 RSVD0001 +1 , /* X - RESERVED                       00001 */
    =00003 QW01505R +1 , /* X - RESULTANT REQUESTED STATE      00002 */
    =00004 QW01505H +1 , /* X - RESULTANT HELD STATE           00003 */
    =00005 QW01505S +8 , /* X - SUBSYSTEM NAME                 00004 */
,/* =00013 RSVD0002 +0 ,    F - END                            0000C */
  ,     /* QW0150LO EQU x'00000002' LOCK FUNCTION                    */
  ,     /* QW0150UN EQU x'00000003' UNLOCK FUNCTION                  */
  ,     /* QW0150CH EQU x'00000004' CHANGE FUNCTION                  */
  ,     /* QW0150US EQU x'00000001' UNPROTECTED SHARE                */
  ,     /* QW0150IS EQU x'00000002' INTENTION SHARE                  */
  ,     /* QW0150IX EQU x'00000003' INTENTION EXCLUSIVE              */
  ,     /* QW0150SH EQU x'00000004' SHARE                            */
  ,     /* QW0150UP EQU x'00000005' UPDATE                           */
  ,     /* QW0150SX EQU x'00000006' SHARE AND INTENTION EXCLUSIVE    */
  ,     /* QW0150NU EQU x'00000007' NON-SHARED UPDATE                */
  ,     /* QW0150X EQU x'00000008' EXCLUSIVE                         */
  ,     /* QW0150SP EQU x'00000009' INTENTION SHARE, LOWER LEVEL     */
  ,     /* QW0150XP EQU x'0000000A' INTENTION EXCLUSIVE, LOWER LEVEL */
  ,     /* QW0150SI EQU x'0000000B' SHARED AND INTENTION EXCLUSIVE,  */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW01505F = c2x(QW01505F)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW01505R = c2x(QW01505R)
  hex_QW01505H = c2x(QW01505H)
  hex_QW01505S = c2x(QW01505S)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01505",desired_dsect) > 0)) then do
    void_rc = queue_QW01505_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01505:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01505_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01505:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GLOBAL INTEREST FLAGS        x:" hex_QW01505F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESULTANT REQUESTED STATE    x:" hex_QW01505R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESULTANT HELD STATE         x:" hex_QW01505H
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SUBSYSTEM NAME               x:" hex_QW01505S
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0151 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0151:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0151,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0151 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0151 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0151",desired_dsect) > 0)) then do
    void_rc = queue_QW0151_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0151:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0151_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0151:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0152 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0152:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0152,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0152 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0152 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0152",desired_dsect) > 0)) then do
    void_rc = queue_QW0152_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0152:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0152_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0152:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0153 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0153:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0153,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0153 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0153 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0153",desired_dsect) > 0)) then do
    void_rc = queue_QW0153_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0153:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0153_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0153:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0154 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0154:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0154,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0154 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0154 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0154",desired_dsect) > 0)) then do
    void_rc = queue_QW0154_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0154:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0154_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0154:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0155 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0155:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0155,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0155 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0155 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0155",desired_dsect) > 0)) then do
    void_rc = queue_QW0155_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0155:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0155_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0155:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0156 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0156:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0156,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0156 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0156 ,
,/* =00001 RSVD0001 +0 ,    C -                                00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0156",desired_dsect) > 0)) then do
    void_rc = queue_QW0156_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0156:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0156_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0156:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0157 length is 00024
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0157:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0157,36)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0157 Length: 36"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0157 ,
    =00001 QW0157E +1 , /* C - TYPE OF EVENT - I OR R          00000 */
  ,     /* QW0157EI EQU x'000000C9' DRDS INVOCATION FROM RDS         */
  ,     /* QW0157ER EQU x'000000D9' DRDS RETURN TO RDS               */
    =00002 QW0157O +1 , /* X - READ OR WRITE REQUEST BIT FLAGS 00001 */
  ,     /* QW0157OR EQU x'00000080' READ REQUEST                     */
  ,     /* QW0157OW EQU x'00000000' WRITE REQUEST                    */
    =00003 RSVD0001 +2 , /* C - RESERVED                       00002 */
    =00005 QW0157CT +2 , /* H - CALL TYPE, E.G. AUXCALL OR OPE 00004 */
    =00007 QW0157SN +2 , /* H - SECTION NUMBER IN PLAN - TYPE  00006 */
    =00009 QW0157PN +8 , /* C - %U NAME OF PROGRAM - TYPE I    00008 */
    =00017 QW0157LN +16 , /* C - %U RESPONDING LOCATION NAME - 00010 */
    =00033 QW0157PN_Off +2 , /* H - Offset from QW0157 to      00020 */
    =00035 QW0157LN_Off +2 , /* H - Offset from QW0157 to      00022 */
,/* =00037 QW0157EN +0 ,    C - END OF THE RECORD              00024 */
    =00001 QW0157PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0157PN_Var +0 ,    C - %U NAME OF PROGRAM - TYPE  00002 */
    =00001 QW0157LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0157LN_Var +0 ,    C - %U RESPONDING LOCATION NAM 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0157E = c2x(QW0157E)
  hex_QW0157O = c2x(QW0157O)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0157CT = c2x(QW0157CT)
  hex_QW0157SN = c2x(QW0157SN)
  hex_QW0157PN = c2x(QW0157PN)
  hex_QW0157LN = c2x(QW0157LN)
  hex_QW0157PN_Off = c2x(QW0157PN_Off)
  hex_QW0157LN_Off = c2x(QW0157LN_Off)
  hex_QW0157PN_Len = c2x(QW0157PN_Len)
  hex_QW0157LN_Len = c2x(QW0157LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0157",desired_dsect) > 0)) then do
    void_rc = queue_QW0157_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0157:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0157_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0157:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - I OR R       x:" hex_QW0157E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      READ OR WRITE REQUEST BIT FL x:" hex_QW0157O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALL TYPE, E.G. AUXCALL OR O x:" hex_QW0157CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECTION NUMBER IN PLAN - TYP x:" hex_QW0157SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U NAME OF PROGRAM - TYPE I  x:" hex_QW0157PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U RESPONDING LOCATION NAME  x:" hex_QW0157LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0157 to        x:" hex_QW0157PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0157 to        x:" hex_QW0157LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0157PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0157LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0158 length is 00012
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0158:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0158,18)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0158 Length: 18"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0158 ,
    =00001 QW0158E +1 , /* C - TYPE OF EVENT - I OR R          00000 */
  ,     /* QW0158EI EQU x'000000C9' DRDS INVOCATION FROM CONVERSATIO */
  ,     /* QW0158ER EQU x'000000D9' DRDS RETURN TO CONVERSATION MANA */
    =00002 RSVD0001 +3 , /* C - RESERVED                       00001 */
    =00005 QW0158CT +2 , /* H - CALL TYPE, E.G. AUXCALL OR OPE 00004 */
    =00007 QW0158SN +2 , /* H - SECTION NUMBER IN PLAN - TYPE  00006 */
    =00009 QW0158PN +8 , /* C - %U NAME OF PROGRAM - TYPE I    00008 */
    =00017 QW0158PN_Off +2 , /* H - Offset from QW0158 to      00010 */
,/* =00019 QW0158EN +0 ,    C - END OF THE RECORD              00012 */
    =00001 QW0158PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0158PN_Var +0 ,    C - %U NAME OF PROGRAM - TYPE  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0158E = c2x(QW0158E)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0158CT = c2x(QW0158CT)
  hex_QW0158SN = c2x(QW0158SN)
  hex_QW0158PN = c2x(QW0158PN)
  hex_QW0158PN_Off = c2x(QW0158PN_Off)
  hex_QW0158PN_Len = c2x(QW0158PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0158",desired_dsect) > 0)) then do
    void_rc = queue_QW0158_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0158:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0158_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0158:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - I OR R       x:" hex_QW0158E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CALL TYPE, E.G. AUXCALL OR O x:" hex_QW0158CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECTION NUMBER IN PLAN - TYP x:" hex_QW0158SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U NAME OF PROGRAM - TYPE I  x:" hex_QW0158PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0158 to        x:" hex_QW0158PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0158PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0159 length is 0001E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0159:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0159,30)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0159 Length: 30"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0159 ,
    =00001 QW0159E +1 , /* C - TYPE OF EVENT - C OR W          00000 */
  ,     /* QW0159EC EQU x'000000C3' CREATE A CONVERSATION            */
  ,     /* QW0159EW EQU x'00000000' WAIT FOR A RESPONSE              */
    =00002 RSVD0001 +1 , /* C - RESERVED                       00001 */
    =00003 QW0159LN +16 , /* C - %U RESPONDING LOCATION NAME - 00002 */
    =00019 RSVD0002 +2 , /* C - RESERVED                       00012 */
    =00021 QW0159CI +4 , /* X - CONVERSATION ID - TYPE C,W     00014 */
    =00025 QW015915 +4 , /* F - GPR15 RETURNED FROM CONVERSATI 00018 */
    =00029 QW0159LN_Off +2 , /* H - Offset from QW0159 to      0001C */
,/* =00031 QW0159EN +0 ,    C - END OF THE RECORD              0001E */
    =00001 QW0159LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0159LN_Var +0 ,    C - %U RESPONDING LOCATION NAM 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0159E = c2x(QW0159E)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0159LN = c2x(QW0159LN)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0159CI = c2x(QW0159CI)
  hex_QW015915 = c2x(QW015915)
  hex_QW0159LN_Off = c2x(QW0159LN_Off)
  hex_QW0159LN_Len = c2x(QW0159LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0159",desired_dsect) > 0)) then do
    void_rc = queue_QW0159_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0159:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0159_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0159:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - C OR W       x:" hex_QW0159E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U RESPONDING LOCATION NAME  x:" hex_QW0159LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATION ID - TYPE C,W   x:" hex_QW0159CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GPR15 RETURNED FROM CONVERSA x:" hex_QW015915
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0159 to        x:" hex_QW0159LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0159LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0160 length is 00080
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0160:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0160,128)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0160 Length: 128"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0160 ,
    =00001 QW0160E +1 , /* C - TYPE OF EVENT - A,D,E,R,S OR W  00000 */
  ,     /* QW0160EA EQU x'000000C1' ALLOCATE CONVERSATION            */
  ,     /* QW0160ED EQU x'000000C4' DEALLOCATE CONVERSATION          */
  ,     /* QW0160EE EQU x'000000C5' RESET CONVERSATION               */
  ,     /* QW0160ER EQU x'000000D9' RECEIVE RESPONSE MESSAGE         */
  ,     /* QW0160ES EQU x'00000000' SEND REQUEST MESSAGE             */
  ,     /* QW0160EW EQU x'00000000' WAIT FOR RESPONSE MESSAGE        */
    =00002 QW0160ID +1 , /* C - (S)                            00001 */
    =00003 QW0160T +1 , /* X - MESSAGE TYPE - TYPES S,R        00002 */
  ,     /* QW0160TR EQU x'00000080' REQUEST MESSAGE TYPE             */
  ,     /* QW0160TB EQU x'00000040' (S)                              */
  ,     /* QW0160TD EQU x'00000020' (S)                              */
  ,     /* QW0160TI EQU x'00000010' IDENTIFY MESSAGE TYPE            */
    =00004 QW0160R +1 , /* X - MESSAGE RESPONSE - TYPES S,R    00003 */
  ,     /* QW0160RD EQU x'00000080' DATA MESSAGE RESPONSE            */
  ,     /* QW0160RC EQU x'00000040' CONFIRMATION MESSAGE RESPONSE    */
  ,     /* QW0160RN EQU x'00000020' NO MESSAGE RESPONSE              */
    =00005 QW0160CI +4 , /* X - (S)                            00004 */
    =00009 QW0160VI +4 , /* X - (S)                            00008 */
    =00013 QW0160SI +8 , /* X - (S)                            0000C */
    =00021 QW0160LM +8 , /* C - (S)                            00014 */
    =00029 RSVD0001 +4 , /* X - RESERVED                       0001C */
    =00033 RSVD0002 +8 , /* C - RESERVED                       00020 */
    =00041 QW0160ML +4 , /* X - MESSAGE LENGTH - TYPES E,R,S   00028 */
    =00045 RSVD0003 +8 , /* C - RESERVED                       0002C */
    =00053 QW0160MC +2 , /* X - MESSAGE CLASS - TYPES E,R,S,W  00034 */
  ,     /* QW0160M1 EQU x'00000001' DB2-ONLY DISTRIBUTED UNIT OF WOR */
  ,     /* QW0160M2 EQU x'00000002' DB2-ONLY DISTRIBUTED UNIT OF WOR */
  ,     /* QW0160M3 EQU x'00000003' DB2-ONLY DISTRIBUTED UNIT OF WOR */
  ,     /* QW0160M4 EQU x'00000004' REMOTE UNIT OF WORK              */
    =00055 QW0160MN +2 , /* X - MESSAGE NUMBER - TYPES E,R,S,W 00036 */
    =00057 RSVD0004 +8 , /* C - RESERVED                       00038 */
    =00065 QW0160MS +8 , /* X - TIME STAMP AT START OF VTAM RE 00040 */
    =00073 QW0160VT +8 , /* D - (S)                            00048 */
    =00081 QW0160DA +8 , /* D - (S)                            00050 */
    =00089 RSVD0005 +40 , /* C - RESERVED                      00058 */
,/* =00129 QW0160TM +0 ,    C - RESERVED                       00080 */
    .           /* End of DSECT */
  /* next byte at 129 */
  hex_QW0160E = c2x(QW0160E)
  hex_QW0160ID = c2x(QW0160ID)
  hex_QW0160T = c2x(QW0160T)
  hex_QW0160R = c2x(QW0160R)
  hex_QW0160CI = c2x(QW0160CI)
  hex_QW0160VI = c2x(QW0160VI)
  hex_QW0160SI = c2x(QW0160SI)
  hex_QW0160LM = c2x(QW0160LM)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0160ML = c2x(QW0160ML)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0160MC = c2x(QW0160MC)
  hex_QW0160MN = c2x(QW0160MN)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0160MS = c2x(QW0160MS)
  hex_QW0160VT = c2x(QW0160VT)
  hex_QW0160DA = c2x(QW0160DA)
  hex_RSVD0005 = c2x(RSVD0005)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0160",desired_dsect) > 0)) then do
    void_rc = queue_QW0160_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0160:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0160_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0160:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - A,D,E,R,S OR x:" hex_QW0160E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE TYPE - TYPES S,R     x:" hex_QW0160T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE RESPONSE - TYPES S,R x:" hex_QW0160R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160VI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160SI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160LM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE LENGTH - TYPES E,R,S x:" hex_QW0160ML
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE CLASS - TYPES E,R,S, x:" hex_QW0160MC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE NUMBER - TYPES E,R,S x:" hex_QW0160MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME STAMP AT START OF VTAM  x:" hex_QW0160MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160VT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0160DA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0005
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0161 length is 00080
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0161:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0161,128)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0161 Length: 128"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0161 ,
    =00001 QW0161E +1 , /* C - TYPE OF EVENT - R, OR S         00000 */
  ,     /* QW0161ER EQU x'000000D9' RECEIVE REQUEST MESSAGE          */
  ,     /* QW0161ES EQU x'00000000' SEND RESPONSE MESSAGE            */
    =00002 QW0161ID +1 , /* C - (S)                            00001 */
    =00003 QW0161T +1 , /* X - MESSAGE TYPE - TYPES R,S        00002 */
  ,     /* QW0161TR EQU x'00000080' REQUEST MESSAGE TYPE             */
  ,     /* QW0161TB EQU x'00000040' (S)                              */
  ,     /* QW0161TD EQU x'00000020' (S)                              */
    =00004 QW0161R +1 , /* X - MESSAGE RESPONSE - TYPES S,R    00003 */
  ,     /* QW0161RD EQU x'00000080' DATA MESSAGE RESPONSE            */
  ,     /* QW0161RC EQU x'00000040' CONFIRMATION MESSAGE RESPONSE    */
  ,     /* QW0161RN EQU x'00000020' NO MESSAGE RESPONSE              */
    =00005 QW0161CI +4 , /* X - (S)                            00004 */
    =00009 QW0161VI +4 , /* X - (S)                            00008 */
    =00013 QW0161SI +8 , /* X - (S)                            0000C */
    =00021 QW0161LM +8 , /* C - (S)                            00014 */
    =00029 RSVD0001 +4 , /* X - RESERVED                       0001C */
    =00033 RSVD0002 +8 , /* C - RESERVED                       00020 */
    =00041 QW0161ML +4 , /* X - MESSAGE LENGTH - TYPES R,S     00028 */
    =00045 RSVD0003 +8 , /* C - RESERVED                       0002C */
    =00053 QW0161MC +2 , /* X - MESSAGE CLASS - TYPES R,S      00034 */
    =00055 QW0161MN +2 , /* X - MESSAGE NUMBER - TYPES R,S     00036 */
    =00057 RSVD0004 +8 , /* C - RESERVED                       00038 */
    =00065 QW0161MS +8 , /* X - MESSAGE TIME STAMP - TYPES R,S 00040 */
    =00073 QW0161VT +8 , /* D - (S)                            00048 */
    =00081 QW0161DA +8 , /* D - (S)                            00050 */
    =00089 RSVD0005 +40 , /* C - RESERVED                      00058 */
,/* =00129 QW0161TM +0 ,    C - TRACE USER MESSAGE - TYPES R,S 00080 */
    .           /* End of DSECT */
  /* next byte at 129 */
  hex_QW0161E = c2x(QW0161E)
  hex_QW0161ID = c2x(QW0161ID)
  hex_QW0161T = c2x(QW0161T)
  hex_QW0161R = c2x(QW0161R)
  hex_QW0161CI = c2x(QW0161CI)
  hex_QW0161VI = c2x(QW0161VI)
  hex_QW0161SI = c2x(QW0161SI)
  hex_QW0161LM = c2x(QW0161LM)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0161ML = c2x(QW0161ML)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0161MC = c2x(QW0161MC)
  hex_QW0161MN = c2x(QW0161MN)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0161MS = c2x(QW0161MS)
  hex_QW0161VT = c2x(QW0161VT)
  hex_QW0161DA = c2x(QW0161DA)
  hex_RSVD0005 = c2x(RSVD0005)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0161",desired_dsect) > 0)) then do
    void_rc = queue_QW0161_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0161:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0161_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0161:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - R, OR S      x:" hex_QW0161E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE TYPE - TYPES R,S     x:" hex_QW0161T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE RESPONSE - TYPES S,R x:" hex_QW0161R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161VI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161SI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161LM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE LENGTH - TYPES R,S   x:" hex_QW0161ML
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE CLASS - TYPES R,S    x:" hex_QW0161MC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE NUMBER - TYPES R,S   x:" hex_QW0161MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE TIME STAMP - TYPES R x:" hex_QW0161MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161VT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0161DA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0005
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0162 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0162:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0162,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0162 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0162 ,
    =00001 QW0162E +1 , /* C - TYPE OF EVENT - M,C,A,OR D      00000 */
  ,     /* QW0162EM EQU x'000000D4' MIGRATE TRANSACTION              */
  ,     /* QW0162EC EQU x'000000C3' A COMMIT REQUEST HAS BEEN SENT T */
  ,     /* QW0162EA EQU x'000000C1' A BACKOUT REQUEST HAS BEEN SENT  */
  ,     /* QW0162ED EQU x'000000C4' DEALLOCATION INITITIATED         */
  ,     /* QW0162ER EQU x'000000D9' A READ RESPONSE HAS BEEN RECEIVE */
  ,     /* QW0162EY EQU x'00000000' A REQUEST COMMIT RESPONSE HAS BE */
  ,     /* QW0162EB EQU x'000000C2' A BACKOUT RESPONSE HAS BEEN RECE */
  ,     /* QW0162EP EQU x'000000D7' A PREPARE REQUEST HAS BEEN SENT  */
    =00002 QW0162LN +16 , /* C - %U LOCATION NAME              00001 */
    =00018 QW0162LT +1 , /* C - LOCATION TYPE -                00011 */
  ,     /* QW0162LR EQU x'000000D9' READ LOCATION                    */
  ,     /* QW0162LU EQU x'00000000' UPDATE LOCATION                  */
  ,     /* QW0162LQ EQU x'0000006F' UNKNOWN TYPE (APPLICATION DIRECT */
    =00019 QW0162LN_Off +2 , /* H - Offset from QW0162 to      00012 */
,/* =00021 QW0162EN +0 ,    C - END OF THE RECORD              00014 */
    =00001 QW0162LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0162LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0162E = c2x(QW0162E)
  hex_QW0162LN = c2x(QW0162LN)
  hex_QW0162LT = c2x(QW0162LT)
  hex_QW0162LN_Off = c2x(QW0162LN_Off)
  hex_QW0162LN_Len = c2x(QW0162LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0162",desired_dsect) > 0)) then do
    void_rc = queue_QW0162_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0162:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0162_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0162:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - M,C,A,OR D   x:" hex_QW0162E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0162LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCATION TYPE -              x:" hex_QW0162LT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0162 to        x:" hex_QW0162LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0162LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0163 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0163:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0163,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0163 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0163 ,
    =00001 RSVD0001 +3 , /* X - RESERVED                       00000 */
    =00004 QW0163E +1 , /* C - TYPE OF EVENT - SEE BELOW.      00003 */
  ,     /* QW0163EM EQU x'000000D4' A DATABASE ACCESS THREAD IS CREA */
  ,     /* QW0163E_N EQU x'000000D5' A DATABASE ACCESS THREAD IS CRE */
  ,     /* QW0163EC EQU x'000000C3' A COMMIT REQUEST HAS BEEN RECEIV */
  ,     /* QW0163EA EQU x'000000C1' A BACKOUT REQUEST HAS BEEN RECEI */
  ,     /* QW0163EU EQU x'00000000' NEW USER BROADCAST RECEIVED      */
  ,     /* QW0163EQ EQU x'000000D8' DBAT CREATION QUEUED             */
  ,     /* QW0163ED EQU x'000000C4' DEALLOCATION INITIATED           */
  ,     /* QW0163ER EQU x'000000D9' A READ-ONLY RESPONSE HAS BEEN SE */
  ,     /* QW0163EY EQU x'00000000' A REQUEST COMMIT RESPONSE HAS BE */
  ,     /* QW0163EB EQU x'000000C2' A BACKOUT RESPONSE HAS BEEN SENT */
  ,     /* QW0163EP EQU x'000000D7' A PREPARE REQUEST HAS BEEN RECEI */
  ,     /* QW0163EL EQU x'000000D3' A LAST AGENT REQUEST HAS BEEN RE */
,/* =00005 QW0163EN +0 ,    C - END OF THE RECORD              00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0163E = c2x(QW0163E)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0163",desired_dsect) > 0)) then do
    void_rc = queue_QW0163_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0163:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0163_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0163:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - SEE BELOW.   x:" hex_QW0163E
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0164 length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0164:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0164,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0164 Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0164 ,
    =00001 QW0164E +1 , /* C - (S)                             00000 */
  ,     /* QW0164EA EQU x'000000C1' (S)                              */
  ,     /* QW0164ET EQU x'00000000' (S)                              */
  ,     /* QW0164ER EQU x'000000D9' (S)                              */
    =00002 QW0164S +1 , /* C - (S)                             00001 */
  ,     /* QW0164SC EQU x'000000C3' (S)                              */
  ,     /* QW0164SL EQU x'000000D3' (S)                              */
  ,     /* QW0164SF EQU x'000000C6' (S)                              */
  ,     /* QW0164SH EQU x'000000C8' (S)                              */
  ,     /* QW0164SQ EQU x'000000D8' (S)                              */
  ,     /* QW0164SA EQU x'000000C1' (S)                              */
    =00003 QW0164LU +8 , /* C - (S)                            00002 */
    =00011 QW0164MO +8 , /* C - (S)                            0000A */
    =00019 QW0164CL +2 , /* H - (S)                            00012 */
    =00021 QW0164CI +4 , /* C - (S)                            00014 */
    =00025 QW0164SI +8 , /* C - (S)                            00018 */
,/* =00033 QW0164EN +0 ,    C - END OF THE RECORD              00020 */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QW0164E = c2x(QW0164E)
  hex_QW0164S = c2x(QW0164S)
  hex_QW0164LU = c2x(QW0164LU)
  hex_QW0164MO = c2x(QW0164MO)
  hex_QW0164CL = c2x(QW0164CL)
  hex_QW0164CI = c2x(QW0164CI)
  hex_QW0164SI = c2x(QW0164SI)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0164",desired_dsect) > 0)) then do
    void_rc = queue_QW0164_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0164:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0164_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0164:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164S
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0164SI
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0165 length is 00032
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0165:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0165,50)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0165 Length: 50"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0165 ,
,/* =00001 QW0165M +0 ,    C - (S) (T)                         00000 */
    =00001 QW0165MN +8 , /* C - (S) (T)                        00000 */
    =00009 QW0165MC +8 , /* C - (S) (T)                        00008 */
    =00017 QW0165MQ +8 , /* C - (S) (T)                        00010 */
    =00025 QW0165RC +1 , /* X - (S)                            00018 */
    =00026 QW0165FO +1 , /* X - (S)                            00019 */
    =00027 QW0165RP +2 , /* H - (S)                            0001A */
    =00029 QW0165RS +2 , /* H - (S)                            0001C */
    =00031 QW0165CI +4 , /* X - (S) (CONVID)                   0001E */
    =00035 QW0165IPV6 +16 , /* X - (T) IPv6 IP ADDRESS (INTERN 00022 */
,/* =00051 QW0165EN +0 ,    C - END OF THE RECORD              00032 */
    .           /* End of DSECT */
  /* next byte at 51 */
  hex_QW0165MN = c2x(QW0165MN)
  hex_QW0165MC = c2x(QW0165MC)
  hex_QW0165MQ = c2x(QW0165MQ)
  hex_QW0165RC = c2x(QW0165RC)
  hex_QW0165FO = c2x(QW0165FO)
  hex_QW0165RP = c2x(QW0165RP)
  hex_QW0165RS = c2x(QW0165RS)
  hex_QW0165CI = c2x(QW0165CI)
  hex_QW0165IPV6 = c2x(QW0165IPV6)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0165",desired_dsect) > 0)) then do
    void_rc = queue_QW0165_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0165:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0165_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0165:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) (T)                      x:" hex_QW0165MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) (T)                      x:" hex_QW0165MC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) (T)                      x:" hex_QW0165MQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0165RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0165FO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0165RP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0165RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) (CONVID)                 x:" hex_QW0165CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) IPv6 IP ADDRESS (INTERNA x:" hex_QW0165IPV6
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0166 length is 00019
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0166:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0166,25)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0166 Length: 25"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0166 ,
    =00001 QW0166GD +2 , /* X - (S)                            00000 */
    =00003 QW0166LU +8 , /* C - (S)                            00002 */
    =00011 QW0166MO +8 , /* C - (S)                            0000A */
    =00019 QW0166CI +4 , /* X - (S)                            00012 */
    =00023 QW0166SI +2 , /* H - (S)                            00016 */
    =00025 QW0166B +1 , /* X - (S)                             00018 */
  ,     /* QW0166BS EQU x'00000080' (S)                              */
  ,     /* QW0166BR EQU x'00000040' (S)                              */
,/* =00026 QW0166EN +0 ,    C - END OF THE RECORD              00019 */
    .           /* End of DSECT */
  /* next byte at 26 */
  hex_QW0166GD = c2x(QW0166GD)
  hex_QW0166LU = c2x(QW0166LU)
  hex_QW0166MO = c2x(QW0166MO)
  hex_QW0166CI = c2x(QW0166CI)
  hex_QW0166SI = c2x(QW0166SI)
  hex_QW0166B = c2x(QW0166B)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0166",desired_dsect) > 0)) then do
    void_rc = queue_QW0166_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0166:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0166_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0166:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0166GD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0166LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0166MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0166CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0166SI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0166B
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0167 length is 0001A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0167:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0167,26)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0167 Length: 26"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0167 ,
    =00001 QW0167CI +4 , /* X - CONVERSATION ID                00000 */
    =00005 QW0167LU +8 , /* C - LU NAME                        00004 */
    =00013 QW0167MO +8 , /* C - MODE NAME                      0000C */
    =00021 QW0167CA +2 , /* H - CONVERSATIONS ALLOCATED        00014 */
    =00023 QW0167CQ +2 , /* H - CONVERSATIONS QUEUED           00016 */
    =00025 QW0167CL +2 , /* H - CONVERSATION LIMIT             00018 */
,/* =00027 QW0167EN +0 ,    C - END OF THE RECORD              0001A */
    .           /* End of DSECT */
  /* next byte at 27 */
  hex_QW0167CI = c2x(QW0167CI)
  hex_QW0167LU = c2x(QW0167LU)
  hex_QW0167MO = c2x(QW0167MO)
  hex_QW0167CA = c2x(QW0167CA)
  hex_QW0167CQ = c2x(QW0167CQ)
  hex_QW0167CL = c2x(QW0167CL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0167",desired_dsect) > 0)) then do
    void_rc = queue_QW0167_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0167:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0167_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0167:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATION ID              x:" hex_QW0167CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LU NAME                      x:" hex_QW0167LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MODE NAME                    x:" hex_QW0167MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATIONS ALLOCATED      x:" hex_QW0167CA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATIONS QUEUED         x:" hex_QW0167CQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONVERSATION LIMIT           x:" hex_QW0167CL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0168 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0168:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0168,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0168 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0168 ,
    =00001 QW0168LL +4 , /* X -                                00000 */
,/* =00005 QW0168ST +0 ,    C -                                00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0168LL = c2x(QW0168LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0168",desired_dsect) > 0)) then do
    void_rc = queue_QW0168_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0168:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0168_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0168:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0168LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0169 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0169:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0169,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0169 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0169 ,
    =00001 QW0169LO +16 , /* C - %U If QW0169ID= A or D or S t 00000 */
    =00017 QW0169TY +1 , /* C - TRANSLATION TYPE (I=INBOUND O= 00010 */
    =00018 QW0169ID +1 , /* C - IDENTIFIER TYPE (A=AUTHID      00011 */
    =00019 RSVD0001 +2 , /* C - RESERVED                       00012 */
    =00021 QW0169LU +8 , /* C - RESPONDING LINKNAME            00014 */
    =00029 QW0169AU +8 , /* C - %U If QW0169ID=A, then it cont 0001C */
    =00037 QW0169NE +8 , /* C - %U If QW0169ID=A then contains 00024 */
    =00045 QW0169LO_Off +2 , /* H - If QW0169LO truncated then 0002C */
    =00047 QW0169AU_Off +2 , /* H - If QW0169ID=A and QW0169AU 0002E */
    =00049 QW0169NE_Off +2 , /* H - If QW0169ID=A and QW0169NE 00030 */
    =00051 QW0169AL_Off +2 , /* H - If QW0169ID=D then         00032 */
,/* =00053 QW0169EN +0 ,    C - END OF THE RECORD              00034 */
    =00001 QW0169LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0169LO_Var +0 ,    C - %U If QW0169ID=A or D or S 00002 */
    =00001 QW0169AU_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0169AU_Var +0 ,    C - %U If QW0169ID=A then      00002 */
    =00001 QW0169NE_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0169NE_Var +0 ,    C - %U If QW0169ID=A then      00002 */
    =00001 QW0169AL_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0169AL_Var +0 ,    C - %U If QW0169ID=D then DATA 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0169LO = c2x(QW0169LO)
  hex_QW0169TY = c2x(QW0169TY)
  hex_QW0169ID = c2x(QW0169ID)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0169LU = c2x(QW0169LU)
  hex_QW0169AU = c2x(QW0169AU)
  hex_QW0169NE = c2x(QW0169NE)
  hex_QW0169LO_Off = c2x(QW0169LO_Off)
  hex_QW0169AU_Off = c2x(QW0169AU_Off)
  hex_QW0169NE_Off = c2x(QW0169NE_Off)
  hex_QW0169AL_Off = c2x(QW0169AL_Off)
  hex_QW0169LO_Len = c2x(QW0169LO_Len)
  hex_QW0169AU_Len = c2x(QW0169AU_Len)
  hex_QW0169NE_Len = c2x(QW0169NE_Len)
  hex_QW0169AL_Len = c2x(QW0169AL_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0169",desired_dsect) > 0)) then do
    void_rc = queue_QW0169_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0169:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0169_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0169:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U If QW0169ID= A or D or S  x:" hex_QW0169LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TRANSLATION TYPE (I=INBOUND  x:" hex_QW0169TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IDENTIFIER TYPE (A=AUTHID    x:" hex_QW0169ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESPONDING LINKNAME          x:" hex_QW0169LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U If QW0169ID=A, then it co x:" hex_QW0169AU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U If QW0169ID=A then contai x:" hex_QW0169NE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If QW0169LO truncated then   x:" hex_QW0169LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If QW0169ID=A and QW0169AU t x:" hex_QW0169AU_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If QW0169ID=A and QW0169NE t x:" hex_QW0169NE_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If QW0169ID=D then           x:" hex_QW0169AL_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0169LO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0169AU_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0169NE_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0169AL_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0170 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0170:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0170,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0170 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0170 ,
    =00001 QW0170AC +4 , /* F - ACE TOKEN OF THE CALLER        00000 */
    =00005 RSVD0001 +2 , /* X - RESERVED                       00004 */
    =00007 QW0170ID +1 , /* X - (S)                            00006 */
    =00008 QW0170FC +1 , /* X - (S)                            00007 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0170AC = c2x(QW0170AC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0170ID = c2x(QW0170ID)
  hex_QW0170FC = c2x(QW0170FC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0170",desired_dsect) > 0)) then do
    void_rc = queue_QW0170_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0170:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0170_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0170:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF THE CALLER      x:" hex_QW0170AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0170ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0170FC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0171 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0171:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0171,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0171 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0171 ,
    =00001 QW0171R0 +4 , /* F - (S)                            00000 */
    =00005 QW0171R1 +4 , /* F - (S)                            00004 */
    =00009 QW0171RF +4 , /* F - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0171R0 = c2x(QW0171R0)
  hex_QW0171R1 = c2x(QW0171R1)
  hex_QW0171RF = c2x(QW0171RF)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0171",desired_dsect) > 0)) then do
    void_rc = queue_QW0171_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0171:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0171_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0171:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0171R0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0171R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0171RF
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0172HE length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0172HE:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0172HE,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0172HE Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0172HE ,
,/* =00001 RSVD0001 +0 ,    F - INSURE BOUNDARY                00000 */
    =00001 QW0172IT +4 , /* G - DEADLOCK INTERVAL COUNTER      00000 */
    =00005 QW0172NR +4 , /* G - NUMBER OF RESOURCES INVOLVED I 00004 */
    =00009 QW0172TD +8 , /* C - TIME (STCK) DEADLOCK WAS DETEC 00008 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0172IT = c2x(QW0172IT)
  hex_QW0172NR = c2x(QW0172NR)
  hex_QW0172TD = c2x(QW0172TD)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0172HE",desired_dsect) > 0)) then do
    void_rc = queue_QW0172HE_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0172HE:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0172HE_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0172HE:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEADLOCK INTERVAL COUNTER    x:" hex_QW0172IT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF RESOURCES INVOLVED x:" hex_QW0172NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIME (STCK) DEADLOCK WAS DET x:" hex_QW0172TD
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0172 length is 001F0
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0172:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0172,496)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0172 Length: 496"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0172 ,
,/* =00001 RSVD0001 +0 ,    F - INSURE BOUNDARY                00000 */
    =00001 QW0172RH +4 , /* X - RESOURCE NAME HASH VALUE       00000 */
,/* =00005 QW0172RN +0 ,    C - RESOURCE NAME COMPOSED OF:     00004 */
    =00005 QW0172RL +1 , /* G - ()LENGTH OF THE LOCK NAME      00004 */
    =00006 RSVD0002 +2 , /* C - ()RESERVED                     00005 */
    =00008 QW0172FR +1 , /* X - ()FLAGS FOR THE LOCKED RESOURC 00007 */
  ,     /* QW0172R0 EQU x'00000000' DATA PAGE LOCKING                */
  ,     /* QW0172R1 EQU x'00000001' DATA BASE LOCKING                */
  ,     /* QW0172R2 EQU x'00000002' PAGESET LOCKING                  */
  ,     /* QW0172R3 EQU x'00000003' PARTITIONED TABLESPACE LOCKING   */
  ,     /* QW0172R4 EQU x'00000004' SKELETON CURSOR TABLE LOCKING    */
  ,     /* QW0172R5 EQU x'00000005' INDEX PAGE LOCKING               */
  ,     /* QW0172R6 EQU x'00000006' PARTITION LOCKING                */
  ,     /* QW0172R7 EQU x'00000007' PAGESET OR DATA SET OPEN LOCK    */
  ,     /* QW0172R8 EQU x'00000008' (S)                              */
  ,     /* QW0172R9 EQU x'00000009' (S)                              */
  ,     /* QW0172RA EQU x'0000000A' START/STOP LOCK ON DBA TABLE     */
  ,     /* QW0172RB EQU x'0000000B' (S)                              */
  ,     /* QW0172RC EQU x'0000000C' (S)                              */
  ,     /* QW0172RD EQU x'0000000D' SYSLGRNG RECORDING LOCK          */
  ,     /* QW0172RE EQU x'0000000E' UTILITY SERIALIZATION LOCK       */
  ,     /* QW0172RF EQU x'0000000F' MASS DELETE LOCK                 */
  ,     /* QW0172RG EQU x'00000010' TABLE LOCKING                    */
  ,     /* QW0172RI EQU x'00000011' HASH ANCHOR LOCK                 */
  ,     /* QW0172RJ EQU x'00000012' SKELETON PACKAGE TABLE LOCK      */
  ,     /* QW0172RK EQU x'00000013' COLLECTION LOCK                  */
  ,     /* QW0172RO EQU x'00000014' CS-READ DRAIN LOCK               */
  ,     /* QW0172RW EQU x'00000015' RR-READ DRAIN LOCK               */
  ,     /* QW0172RQ EQU x'00000016' WRITE DRAIN LOCK                 */
  ,     /* QW0172RM EQU x'00000017' AUTOBIND/REMOTE BIND LOCK        */
  ,     /* QW0172RR EQU x'0000001A' ALTER BUFFERPOOL LOCK            */
  ,     /* QW0172RT EQU x'0000001B' GROUP BUFFERPOOL START/STOP LOCK */
  ,     /* QW0172MR EQU x'00000018' ROW LOCK                         */
  ,     /* QW0172MI EQU x'00000019' INDEX END-OF-FILE LOCK           */
  ,     /* QW0172M2 EQU x'00000024' CATMAINT convert directory lock  */
  ,     /* QW0172M3 EQU x'00000025' CATMAINT convert catalog lock    */
  ,     /* QW0172M4 EQU x'00000026' CATMAINT migration lock          */
  ,     /* QW0172M5 EQU x'00000027' DB exception LPL/GRECP lock      */
  ,     /* QW0172M6 EQU x'00000028' Utility UID lock                 */
  ,     /* QW0172M7 EQU x'00000029' Utility exclusive execution lock */
  ,     /* QW0172M8 EQU x'0000002A' SCA access for restart/redo info */
  ,     /* QW0172M9 EQU x'0000002B' Group database exception update  */
  ,     /* QW0172MC EQU x'0000002C' REPAIR DBD TEST/DIAGNOSE         */
  ,     /* QW0172MB EQU x'0000002D' Database command serialization   */
  ,     /* QW0172MX EQU x'0000002F' (S)                              */
  ,     /* QW0172MO EQU x'00000030' LOB lock                         */
  ,     /* QW0172MM EQU x'00000032' LPL recovery lock                */
  ,     /* QW0172MN EQU x'00000033' hdr page hash bucket lock        */
  ,     /* QW0172MD EQU x'00000035' XML lock                         */
  ,     /* QW0172DL EQU x'00000039' DBD Load lock                    */
  ,     /* QW0172FS EQU x'000000FF' (S)                              */
,/* =00009 QW0172PN +0 ,    C - LOCKED RESOURCE NAME           00008 */
    =00009 QW0172KD +2 , /* C - () DATABASE ID  *SEE 5. BELOW  00008 */
,/* =00011 QW0172KB +0 ,    C - () TABLE RECORD OBID *SEE 5. B 0000A */
    =00011 QW0172KP +2 , /* C - () PAGESET OBID OR TABLE RECOR 0000A */
,/* =00013 QW0172KR +0 ,    C - ID OF SMALL RESOURCE WHEN QW01 0000C */
    =00013 QW0172K1 +3 , /* C - 1. For pageset or data base lo 0000C */
    =00016 QW0172K2 +1 , /* X - QW0172K1 and QW0172K2 are zero 0000F */
    =00017 RSVD0003 +1 , /* X - 2. FOR PARTITION LOCKS, QW0172 00010 */
  ,
  ,/*00017 __no__name__ ORG - QW0172KR - x'0000000C'           00011 */
,/* =00013 QW0172KY +0 ,    C - ID of small resource when QW01 0000C */
    =00013 QW0172K4 +4 , /* C - page number (within large tabl 0000C */
    =00017 QW0172K5 +1 , /* X - record id within page          00010 */
  ,
  ,/*00017 __no__name__ ORG - QW0172KR - x'0000000C'           00011 */
,/* =00013 QW0172KZ +0 ,    C - ID of sm res when QW0172KT= 33 0000C */
    =00013 QW0172K8 +2 , /* X - partition number               0000C */
    =00015 QW0172K9 +1 , /* X - hash bucket number             0000E */
    =00016 RSVD0004 +1 , /* X - unused - 0                     0000F */
  ,
  ,/*00016 __no__name__ ORG - QW0172KR - x'0000000C'           00010 */
    =00013 QW0172KC +9 , /* C - ID of resource for XML locks   0000C */
    =00022 RSVD0005 +1 , /* C - unused to match the format     00015 */
  ,
  ,/*00022 __no__name__ ORG - QW0172KR - x'0000000C'           00016 */
,/* =00013 QW0172KX +0 ,    C - ID of resource for LOB locks   0000C */
    =00013 QW0172K6 +17 , /* C - Row ID                        0000C */
    =00030 QW0172K7 +2 , /* C - Version number                 0001D */
    =00032 RSVD0006 +5 , /* C - REST OF SPACE FOR 28 BYTE RESO 0001F */
    =00037 QW0172HP +8 , /* C - Blockers PLAN NAME             00024 */
    =00045 QW0172HR +12 , /* C - Blockers CORRELATION ID       0002C */
    =00057 QW0172HN +8 , /* C - Blockers CONNECTION ID         00038 */
,/* =00065 QW0172HH +0 ,    C - Blockers LUW ID & token        00040 */
    =00065 QW0172HL +24 , /* C - Blocker LUWID                 00040 */
    =00089 QW0172HT +4 , /* F - Blocker thread token           00058 */
    =00093 RSVD0007 +2 , /* C - RESERVED part of QW0172HH that 0005C */
    =00095 RSVD0008 +2 , /* C - RESERVED                       0005E */
    =00097 QW0172HO +8 , /* C - Blockers OWNING WORK UNIT      00060 */
    =00105 QW0172HI +8 , /* C - Blockers DB2 MEMBER NAME       00068 */
    =00113 QW0172HS +1 , /* X - Blockers STATE                 00070 */
  ,     /* QW017200 EQU x'00000000'                                  */
  ,     /* QW017201 EQU x'00000001' UNPROTECTED SHARE                */
  ,     /* QW017202 EQU x'00000002' INTENTED    SHARE                */
  ,     /* QW017203 EQU x'00000003' INTENTED EXCLUSIVE               */
  ,     /* QW017204 EQU x'00000004' SHARED                           */
  ,     /* QW017205 EQU x'00000005' UPDATE                           */
  ,     /* QW017206 EQU x'00000006' SHARED INTENT EXCLUSIVE          */
  ,     /* QW017207 EQU x'00000007' NON-SHARED UPDATE                */
  ,     /* QW017208 EQU x'00000008' EXCLUSIVE                        */
    =00114 QW0172HD +1 , /* X - Blockers DURATION              00071 */
  ,     /* QW017220 EQU x'00000020' MANUAL                           */
  ,     /* QW017221 EQU x'00000021' MANUAL+1                         */
  ,     /* QW017240 EQU x'00000040' COMMIT                           */
  ,     /* QW017241 EQU x'00000041' COMMIT+1                         */
  ,     /* QW017260 EQU x'00000060' ALLOCATION                       */
  ,     /* QW017280 EQU x'00000080' PLAN                             */
  ,     /* QW017281 EQU x'00000081' UTIL                             */
  ,     /* QW0172FF EQU x'000000FF' DURATION TO FREE ALL LOCKS       */
    =00115 QW0172HF +1 , /* X - (S)                            00072 */
  ,     /* QW0172H2 EQU x'00000020' on = blocker is waiting for the  */
  ,     /* QW0172H3 EQU x'00000010' (S)                              */
  ,     /* QW0172H4 EQU x'00000008' (S)                              */
  ,     /* QW0172H5 EQU x'00000004' (S)                              */
  ,     /* QW0172H6 EQU x'00000002' (S)                              */
    =00116 RSVD0009 +1 , /* C - RESERVED                       00073 */
    =00117 QW0172WP +8 , /* C - WAITERS  PLAN NAME             00074 */
    =00125 QW0172WR +12 , /* C - WAITERS  CORRELATION ID       0007C */
    =00137 QW0172WN +8 , /* C - WAITERS  CONNECTION ID         00088 */
,/* =00145 QW0172WX +0 ,    C - WAITERS  LUW ID & token        00090 */
    =00145 QW0172WL +24 , /* C - WAITERS  LUWID                00090 */
    =00169 QW0172WT +4 , /* F - WAITERS  THREAD TOKEN          000A8 */
    =00173 RSVD0010 +2 , /* C - RESERVED part of QW0172WX that 000AC */
    =00175 RSVD0011 +2 , /* C - RESERVED                       000AE */
    =00177 QW0172WW +8 , /* C - WAITERS  REQUESTING WORK UNIT  000B0 */
    =00185 QW0172WO +8 , /* C - WAITERS  OWNING WORK UNIT      000B8 */
    =00193 QW0172WF +1 , /* C - WAITERS  REQUESTED FUNCTION    000C0 */
  ,     /* QW0172LO EQU x'00000002' LOCK FUNCTION                    */
  ,     /* QW0172UN EQU x'00000003' UNLOCK FUNCTION                  */
  ,     /* QW0172CH EQU x'00000004' CHANGE FUNCTION                  */
    =00194 QW0172WS +1 , /* X - WAITERS  REQUESTED STATE       000C1 */
  ,     /* QW0172W1 EQU x'00000001' RESERVED                         */
  ,     /* QW0172W2 EQU x'00000002' INTENTED    SHARE                */
  ,     /* QW0172W3 EQU x'00000003' INTENTED EXCLUSIVE               */
  ,     /* QW0172W4 EQU x'00000004' SHARED                           */
  ,     /* QW0172W5 EQU x'00000005' UPDATE                           */
  ,     /* QW0172W6 EQU x'00000006' SHARED INTENT EXCLUSIVE          */
  ,     /* QW0172W7 EQU x'00000007' NON-SHARED UPDATE                */
  ,     /* QW0172W8 EQU x'00000008' EXCLUSIVE                        */
    =00195 QW0172WD +1 , /* X - WAITERS  REQUESTED DURATION    000C2 */
  ,     /* QW0172MA EQU x'00000020' MANUAL                           */
  ,     /* QW0172M1 EQU x'00000021' MANUAL+1                         */
  ,     /* QW0172CO EQU x'00000040' COMMIT                           */
  ,     /* QW0172C1 EQU x'00000041' COMMIT+1                         */
  ,     /* QW0172AL EQU x'00000060' ALLOCATION                       */
  ,     /* QW0172PL EQU x'00000080' PLAN                             */
  ,     /* QW0172UT EQU x'00000081' UTIL                             */
  ,     /* QW0172DU EQU x'000000FF' DURATION TO FREE ALL LOCKS       */
    =00196 QW0172WG +1 , /* X - (S)                            000C3 */
  ,     /* QW0172CU EQU x'00000080' (S)                              */
  ,     /* QW0172AR EQU x'00000040' (S)                              */
  ,     /* QW0172NU EQU x'00000020' (S)                              */
  ,     /* QW0172CR EQU x'00000010' (S)                              */
  ,     /* QW0172PR EQU x'00000008' (S)                              */
  ,     /* QW0172RS EQU x'00000004' (S)                              */
  ,     /* QW0172ML EQU x'00000002' (S)                              */
  ,     /* QW0172FO EQU x'00000001' (S)                              */
    =00197 QW0172WA +1 , /* X - WAITERS  DB2 ASSIGNED WORTH VA 000C4 */
    =00198 RSVD0012 +3 , /* C - RESERVED                       000C5 */
    =00201 QW0172WI +8 , /* C - WAITERS  DB2 MEMBER NAME       000C8 */
    =00209 QW0172HB +8 , /* C - %U Holders authorization ID.   000D0 */
    =00217 QW0172HC +16 , /* C - Holders end user userid.      000D8 */
    =00233 QW0172HJ +32 , /* C - Holders transaction name.     000E8 */
    =00265 QW0172HK +18 , /* C - Holders workstation name.     00108 */
    =00283 QW0172H9 +4 , /* X - Holders cached statement ID, o 0011A */
,/* =00287 QW0172HQ +0 ,    C - Holders package/DBRM name      0011E */
    =00287 QW0172Q1 +8 , /* C - %U Program name                0011E */
    =00295 QW0172Q2 +18 , /* C - %U Package collection ID      00126 */
    =00313 QW0172Q3 +16 , /* C - %U Location name              00138 */
    =00329 QW0172Q4 +8 , /* C - Consistency token - 64 bit     00148 */
    =00337 RSVD0013 +16 , /* C - More holder information.      00150 */
    =00353 QW0172WB +8 , /* C - %U Waiters authorization ID.   00160 */
    =00361 QW0172WC +16 , /* C - Waiters end user userid.      00168 */
    =00377 QW0172WJ +32 , /* C - Waiters transaction name.     00178 */
    =00409 QW0172WK +18 , /* C - Waiters workstation name.     00198 */
    =00427 QW0172W9 +4 , /* X - Waiters cached statement ID, o 001AA */
,/* =00431 QW0172WQ +0 ,    C - Waiters package/DBRM name      001AE */
    =00431 QW0172Q5 +8 , /* C - %U Program name                001AE */
    =00439 QW0172Q6 +18 , /* C - %U Package collection ID      001B6 */
    =00457 QW0172Q7 +16 , /* C - %U Location name              001C8 */
    =00473 QW0172Q8 +8 , /* C - Consistency token - 64 bit     001D8 */
    =00481 RSVD0014 +16 , /* C - More waiter information.      001E0 */
  ,
  ,/*00496 __no__name__ ORG - QW0172PN - x'00000008' * Lock na 001F0 */
,/* =00009 QW0172A +0 ,    C - * Locked resource name          00008 */
    =00009 QW0172A0 +1 , /* X - * Data Manager RMID            00008 */
    =00010 QW0172A1 +5 , /* C - * Constant  GDBET              00009 */
    =00015 QW0172A6 +2 , /* X - * Database exception hash clas 0000E */
    =00017 RSVD0015 +20 , /* C - * Hex zeros                   00010 */
    .           /* End of DSECT */
  /* next byte at 37 */
  hex_QW0172RH = c2x(QW0172RH)
  hex_QW0172RL = c2x(QW0172RL)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0172FR = c2x(QW0172FR)
  hex_QW0172KD = c2x(QW0172KD)
  hex_QW0172KP = c2x(QW0172KP)
  hex_QW0172K1 = c2x(QW0172K1)
  hex_QW0172K2 = c2x(QW0172K2)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0172K4 = c2x(QW0172K4)
  hex_QW0172K5 = c2x(QW0172K5)
  hex_QW0172K8 = c2x(QW0172K8)
  hex_QW0172K9 = c2x(QW0172K9)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0172KC = c2x(QW0172KC)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0172K6 = c2x(QW0172K6)
  hex_QW0172K7 = c2x(QW0172K7)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0172HP = c2x(QW0172HP)
  hex_QW0172HR = c2x(QW0172HR)
  hex_QW0172HN = c2x(QW0172HN)
  hex_QW0172HL = c2x(QW0172HL)
  hex_QW0172HT = c2x(QW0172HT)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_RSVD0008 = c2x(RSVD0008)
  hex_QW0172HO = c2x(QW0172HO)
  hex_QW0172HI = c2x(QW0172HI)
  hex_QW0172HS = c2x(QW0172HS)
  hex_QW0172HD = c2x(QW0172HD)
  hex_QW0172HF = c2x(QW0172HF)
  hex_RSVD0009 = c2x(RSVD0009)
  hex_QW0172WP = c2x(QW0172WP)
  hex_QW0172WR = c2x(QW0172WR)
  hex_QW0172WN = c2x(QW0172WN)
  hex_QW0172WL = c2x(QW0172WL)
  hex_QW0172WT = c2x(QW0172WT)
  hex_RSVD0010 = c2x(RSVD0010)
  hex_RSVD0011 = c2x(RSVD0011)
  hex_QW0172WW = c2x(QW0172WW)
  hex_QW0172WO = c2x(QW0172WO)
  hex_QW0172WF = c2x(QW0172WF)
  hex_QW0172WS = c2x(QW0172WS)
  hex_QW0172WD = c2x(QW0172WD)
  hex_QW0172WG = c2x(QW0172WG)
  hex_QW0172WA = c2x(QW0172WA)
  hex_RSVD0012 = c2x(RSVD0012)
  hex_QW0172WI = c2x(QW0172WI)
  hex_QW0172HB = c2x(QW0172HB)
  hex_QW0172HC = c2x(QW0172HC)
  hex_QW0172HJ = c2x(QW0172HJ)
  hex_QW0172HK = c2x(QW0172HK)
  hex_QW0172H9 = c2x(QW0172H9)
  hex_QW0172Q1 = c2x(QW0172Q1)
  hex_QW0172Q2 = c2x(QW0172Q2)
  hex_QW0172Q3 = c2x(QW0172Q3)
  hex_QW0172Q4 = c2x(QW0172Q4)
  hex_RSVD0013 = c2x(RSVD0013)
  hex_QW0172WB = c2x(QW0172WB)
  hex_QW0172WC = c2x(QW0172WC)
  hex_QW0172WJ = c2x(QW0172WJ)
  hex_QW0172WK = c2x(QW0172WK)
  hex_QW0172W9 = c2x(QW0172W9)
  hex_QW0172Q5 = c2x(QW0172Q5)
  hex_QW0172Q6 = c2x(QW0172Q6)
  hex_QW0172Q7 = c2x(QW0172Q7)
  hex_QW0172Q8 = c2x(QW0172Q8)
  hex_RSVD0014 = c2x(RSVD0014)
  hex_QW0172A0 = c2x(QW0172A0)
  hex_QW0172A1 = c2x(QW0172A1)
  hex_QW0172A6 = c2x(QW0172A6)
  hex_RSVD0015 = c2x(RSVD0015)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0172",desired_dsect) > 0)) then do
    void_rc = queue_QW0172_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0172:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0172_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0172:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESOURCE NAME HASH VALUE     x:" hex_QW0172RH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()LENGTH OF THE LOCK NAME    x:" hex_QW0172RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()RESERVED                   x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()FLAGS FOR THE LOCKED RESOU x:" hex_QW0172FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID  *SEE 5. BELO x:" hex_QW0172KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID OR TABLE REC x:" hex_QW0172KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      1. For pageset or data base  x:" hex_QW0172K1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QW0172K1 and QW0172K2 are ze x:" hex_QW0172K2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      2. FOR PARTITION LOCKS, QW01 x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      page number (within large ta x:" hex_QW0172K4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      record id within page        x:" hex_QW0172K5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      partition number             x:" hex_QW0172K8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      hash bucket number           x:" hex_QW0172K9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      unused - 0                   x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ID of resource for XML locks x:" hex_QW0172KC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      unused to match the format   x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Row ID                       x:" hex_QW0172K6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Version number               x:" hex_QW0172K7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REST OF SPACE FOR 28 BYTE RE x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers PLAN NAME           x:" hex_QW0172HP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers CORRELATION ID      x:" hex_QW0172HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers CONNECTION ID       x:" hex_QW0172HN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blocker LUWID                x:" hex_QW0172HL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blocker thread token         x:" hex_QW0172HT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED part of QW0172HH th x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0008
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers OWNING WORK UNIT    x:" hex_QW0172HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers DB2 MEMBER NAME     x:" hex_QW0172HI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers STATE               x:" hex_QW0172HS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Blockers DURATION            x:" hex_QW0172HD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0172HF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0009
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  PLAN NAME           x:" hex_QW0172WP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  CORRELATION ID      x:" hex_QW0172WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  CONNECTION ID       x:" hex_QW0172WN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  LUWID               x:" hex_QW0172WL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  THREAD TOKEN        x:" hex_QW0172WT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED part of QW0172WX th x:" hex_RSVD0010
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0011
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  REQUESTING WORK UNI x:" hex_QW0172WW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  OWNING WORK UNIT    x:" hex_QW0172WO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  REQUESTED FUNCTION  x:" hex_QW0172WF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  REQUESTED STATE     x:" hex_QW0172WS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  REQUESTED DURATION  x:" hex_QW0172WD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0172WG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  DB2 ASSIGNED WORTH  x:" hex_QW0172WA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0012
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WAITERS  DB2 MEMBER NAME     x:" hex_QW0172WI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Holders authorization ID. x:" hex_QW0172HB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders end user userid.     x:" hex_QW0172HC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders transaction name.    x:" hex_QW0172HJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders workstation name.    x:" hex_QW0172HK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders cached statement ID, x:" hex_QW0172H9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0172Q1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection ID     x:" hex_QW0172Q2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name             x:" hex_QW0172Q3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Consistency token - 64 bit   x:" hex_QW0172Q4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      More holder information.     x:" hex_RSVD0013
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Waiters authorization ID. x:" hex_QW0172WB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Waiters end user userid.     x:" hex_QW0172WC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Waiters transaction name.    x:" hex_QW0172WJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Waiters workstation name.    x:" hex_QW0172WK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Waiters cached statement ID, x:" hex_QW0172W9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0172Q5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection ID     x:" hex_QW0172Q6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name             x:" hex_QW0172Q7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Consistency token - 64 bit   x:" hex_QW0172Q8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      More waiter information.     x:" hex_RSVD0014
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Data Manager RMID          x:" hex_QW0172A0
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Constant  GDBET            x:" hex_QW0172A1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Database exception hash cl x:" hex_QW0172A6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      * Hex zeros                  x:" hex_RSVD0015
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0173 length is 000D8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0173:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0173,216)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0173 Length: 216"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0173 ,
    =00001 QW0173ID +8 , /* C - %U AUTH ID                     00000 */
    =00009 QW0173PC +18 , /* C - %U PACKAGE COLLECTION ID      00008 */
    =00027 QW0173PK +8 , /* C - %U PACKAGE  NAME               0001A */
    =00035 QW0173PL +8 , /* C - PLAN    NAME                   00022 */
    =00043 QW0173CN +18 , /* C - %U CURSOR NAME if it exists   0002A */
    =00061 QW0173UT +4 , /* F - (S) Time used so far           0003C */
    =00065 QW0173AT +4 , /* F - (S) User ASUTIME               00040 */
    =00069 QW0173SN +2 , /* H - SECTION NUMBER                 00044 */
    =00071 RSVD0001 +2 , /* C - Reserved                       00046 */
    =00073 QW0173ST +4 , /* F - STATEMENT NUMBER               00048 */
    =00077 QW0173CS +4 , /* X - cached statement ID, or zero   0004C */
    =00081 QW0173DI +128 , /* C - (S) RLF Diagnostic informati 00050 */
    =00209 QW0173ID_Off +2 , /* H - Offset from QW0173 to      000D0 */
    =00211 QW0173PC_Off +2 , /* H - Offset from QW0173 to      000D2 */
    =00213 QW0173PK_Off +2 , /* H - Offset from QW0173 to      000D4 */
    =00215 QW0173CN_Off +2 , /* H - Offset from QW0173 to      000D6 */
    =00001 QW0173ID_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0173ID_Var +0 ,    C - %U AUTH ID                 00002 */
    =00001 QW0173PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0173PC_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    =00001 QW0173PK_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0173PK_Var +0 ,    C - %U PACKAGE NAME            00002 */
    =00001 QW0173CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0173CN_Var +0 ,    C - %U CURSOR NAME if it exist 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0173ID = c2x(QW0173ID)
  hex_QW0173PC = c2x(QW0173PC)
  hex_QW0173PK = c2x(QW0173PK)
  hex_QW0173PL = c2x(QW0173PL)
  hex_QW0173CN = c2x(QW0173CN)
  hex_QW0173UT = c2x(QW0173UT)
  hex_QW0173AT = c2x(QW0173AT)
  hex_QW0173SN = c2x(QW0173SN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0173ST = c2x(QW0173ST)
  hex_QW0173CS = c2x(QW0173CS)
  hex_QW0173DI = c2x(QW0173DI)
  hex_QW0173ID_Off = c2x(QW0173ID_Off)
  hex_QW0173PC_Off = c2x(QW0173PC_Off)
  hex_QW0173PK_Off = c2x(QW0173PK_Off)
  hex_QW0173CN_Off = c2x(QW0173CN_Off)
  hex_QW0173ID_Len = c2x(QW0173ID_Len)
  hex_QW0173PC_Len = c2x(QW0173PC_Len)
  hex_QW0173PK_Len = c2x(QW0173PK_Len)
  hex_QW0173CN_Len = c2x(QW0173CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0173",desired_dsect) > 0)) then do
    void_rc = queue_QW0173_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0173:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0173_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0173:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U AUTH ID                   x:" hex_QW0173ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID     x:" hex_QW0173PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE  NAME             x:" hex_QW0173PK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN    NAME                 x:" hex_QW0173PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME if it exists  x:" hex_QW0173CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Time used so far         x:" hex_QW0173UT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) User ASUTIME             x:" hex_QW0173AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECTION NUMBER               x:" hex_QW0173SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0173ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      cached statement ID, or zero x:" hex_QW0173CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) RLF Diagnostic informati x:" hex_QW0173DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0173 to        x:" hex_QW0173ID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0173 to        x:" hex_QW0173PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0173 to        x:" hex_QW0173PK_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0173 to        x:" hex_QW0173CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0173ID_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0173PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0173PK_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0173CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0174 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0174:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0174,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0174 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0174 ,
    =00001 QW0174AC +4 , /* F - ADDRESS OF ACE                 00000 */
    =00005 QW0174EB +4 , /* F - (S)                            00004 */
    =00009 QW0174UR +4 , /* F - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0174AC = c2x(QW0174AC)
  hex_QW0174EB = c2x(QW0174EB)
  hex_QW0174UR = c2x(QW0174UR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0174",desired_dsect) > 0)) then do
    void_rc = queue_QW0174_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0174:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0174_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0174:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF ACE               x:" hex_QW0174AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0174EB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0174UR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0175 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0175:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0175,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0175 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0175 ,
    =00001 QW0175AC +4 , /* F - ADDRESS OF ACE                 00000 */
    =00005 QW0175EB +4 , /* F - (S)                            00004 */
    =00009 QW0175UR +4 , /* F - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0175AC = c2x(QW0175AC)
  hex_QW0175EB = c2x(QW0175EB)
  hex_QW0175UR = c2x(QW0175UR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0175",desired_dsect) > 0)) then do
    void_rc = queue_QW0175_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0175:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0175_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0175:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF ACE               x:" hex_QW0175AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0175EB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0175UR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0177 length is 000A4
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0177:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0177,164)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0177 Length: 164"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0177 ,
,/* =00001 QW0177PK +0 ,    C - PACKAGE NAME                   00000 */
    =00001 QW0177LO +16 , /* C - %U LOCATION NAME OF PACKAGE ( 00000 */
    =00017 QW0177CO +18 , /* C - %U COLLECTION ID              00010 */
    =00035 QW0177PI +18 , /* C - %U PACKAGE ID                 00022 */
    =00053 QW0177CT +8 , /* C - CONSISTENCY TOKEN              00034 */
,/* =00061 QW0177VR +0 ,    C - PACKAGE VERSION                0003C */
    =00061 QW0177VL +2 , /* H - LENGTH OF PACKAGE VERSION      0003C */
    =00063 QW0177VN +64 , /* C - VERSION NAME                  0003E */
    =00127 QW0177PL +8 , /* C - PLAN NAME UNDER WHICH PACKAGE  0007E */
    =00135 QW0177IS +1 , /* C - ISOLATION LEVEL OF THE PACKAGE 00086 */
    =00136 QW0177AQ +1 , /* C - ACQUIRE LEVEL OF OF THE PACKAG 00087 */
    =00137 QW0177RL +1 , /* C - RELEASE LEVEL OF THE PACKAGE   00088 */
    =00138 QW0177DY +1 , /* C - DYNAMICRULES VALUE FOR DYNAMIC 00089 */
    =00139 QW0177DP +1 , /* C - DEFER PREPARE OF REMOTE SQL ST 0008A */
    =00140 QW0177RO +2 , /* X - REOPTIMIZE SQL STATEMENTS AT R 0008B */
    =00142 QW0177KD +1 , /* C - KEEP DYNAMIC STATEMENTS ACROSS 0008D */
    =00143 QW0177PR +1 , /* C - DBPROTOCOL                     0008E */
    =00144 QW0177OH +8 , /* C - %U OPTHINT VALUE               0008F */
    =00152 QW0177IW +1 , /* C - IMMEDIATE WRITE OF UPDATED GBP 00097 */
    =00153 QW0177CC +2 , /* X - ENCODING CCSID VALUE           00098 */
    =00155 QW0177SC +1 , /* C - SCHEME OF ENCODING CCSID       0009A */
    =00156 RSVD0001 +1 , /* C - Reserved                       0009B */
    =00157 QW0177LO_Off +2 , /* H - Offset from QW0177 to      0009C */
    =00159 QW0177CO_Off +2 , /* H - Offset from QW0177 to      0009E */
    =00161 QW0177PI_Off +2 , /* H - Offset from QW0177 to      000A0 */
    =00163 QW0177OH_Off +2 , /* H - Offset from QW0177 to      000A2 */
    =00001 QW0177LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0177LO_Var +0 ,    C - %U LOCATION NAME OF PACKAG 00002 */
    =00001 QW0177CO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0177CO_Var +0 ,    C - %U COLLECTION ID           00002 */
    =00001 QW0177PI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0177PI_Var +0 ,    C - %U PACKAGE ID              00002 */
    =00001 QW0177OH_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0177OH_Var +0 ,    C - %U OPTHINT VALUE           00002 */
  ,     /* QW0177RR EQU x'000000D9' REPEATABLE READ                  */
  ,     /* QW0177RS EQU x'00000000' READ STABILITY                   */
  ,     /* QW0177CS EQU x'00000000' CURSOR STABILITY                 */
  ,     /* QW0177UR EQU x'00000000' UNCOMMITED READ                  */
  ,     /* QW0177US EQU x'00000000' ACQUIRE AT USE                   */
  ,     /* QW0177AL EQU x'000000C1' ACQUIRE AT ALLOCATION            */
  ,     /* QW0177DA EQU x'000000C4' RELEASE AT DEALLOCATION          */
  ,     /* QW0177CM EQU x'000000C3' RELEASE AT COMMIT                */
  ,     /* QW0177DB EQU x'000000C2' USE BIND-TIME RULES FOR DYNAMIC  */
  ,     /* QW0177DR EQU x'000000D9' USE RUN-TIME RULES FOR DYNAMIC S */
  ,     /* QW0177DD EQU x'000000C4' USE DEFINEBIND RULES FOR DYNAMIC */
  ,     /* QW0177DE EQU x'000000C5' USE DEFINERUN  RULES FOR DYNAMIC */
  ,     /* QW0177DH EQU x'000000C8' USE INVOKEBIND RULES FOR DYNAMIC */
  ,     /* QW0177DI EQU x'000000C9' USE INVOKERUN  RULES FOR DYNAMIC */
  ,     /* QW0177PD EQU x'000000C4' DRDA - CONVERT 3-PART NAME TO DR */
  ,     /* QW0177PP EQU x'000000D7' PRIVATE - 3-PART NAMES USE PRIVA */
  ,     /* QW0177I1 EQU x'000000F1' IMMEDWRITE PHASE 1               */
  ,     /* QW0177YE EQU x'00000000' DEFER PREPARE OF SQL WITH REMOTE */
  ,     /* QW0177NO EQU x'000000D5' DO NOT DEFER PREPARE OF SQL, OR  */
  ,     /* QW0177R0 EQU x'00000000' NOREOPTIMIZATION                 */
  ,     /* QW0177R1 EQU x'00000001' REOPTIMIZE SQL STATEMENTS AT RUN */
  ,     /* QW0177SA EQU x'000000C1' ASCII - ENCODING CCSID IS ASCII  */
  ,     /* QW0177SE EQU x'000000C5' EBCDIC - ENCODING CCSID IS EBCDI */
  ,     /* QW0177SU EQU x'00000000' UNICODE - ENCODING CCSID IS UNIC */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0177LO = c2x(QW0177LO)
  hex_QW0177CO = c2x(QW0177CO)
  hex_QW0177PI = c2x(QW0177PI)
  hex_QW0177CT = c2x(QW0177CT)
  hex_QW0177VL = c2x(QW0177VL)
  hex_QW0177VN = c2x(QW0177VN)
  hex_QW0177PL = c2x(QW0177PL)
  hex_QW0177IS = c2x(QW0177IS)
  hex_QW0177AQ = c2x(QW0177AQ)
  hex_QW0177RL = c2x(QW0177RL)
  hex_QW0177DY = c2x(QW0177DY)
  hex_QW0177DP = c2x(QW0177DP)
  hex_QW0177RO = c2x(QW0177RO)
  hex_QW0177KD = c2x(QW0177KD)
  hex_QW0177PR = c2x(QW0177PR)
  hex_QW0177OH = c2x(QW0177OH)
  hex_QW0177IW = c2x(QW0177IW)
  hex_QW0177CC = c2x(QW0177CC)
  hex_QW0177SC = c2x(QW0177SC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0177LO_Off = c2x(QW0177LO_Off)
  hex_QW0177CO_Off = c2x(QW0177CO_Off)
  hex_QW0177PI_Off = c2x(QW0177PI_Off)
  hex_QW0177OH_Off = c2x(QW0177OH_Off)
  hex_QW0177LO_Len = c2x(QW0177LO_Len)
  hex_QW0177CO_Len = c2x(QW0177CO_Len)
  hex_QW0177PI_Len = c2x(QW0177PI_Len)
  hex_QW0177OH_Len = c2x(QW0177OH_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0177",desired_dsect) > 0)) then do
    void_rc = queue_QW0177_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0177:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0177_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0177:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME OF PACKAGE  x:" hex_QW0177LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID             x:" hex_QW0177CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE ID                x:" hex_QW0177PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN            x:" hex_QW0177CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF PACKAGE VERSION    x:" hex_QW0177VL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION NAME                 x:" hex_QW0177VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME UNDER WHICH PACKAG x:" hex_QW0177PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ISOLATION LEVEL OF THE PACKA x:" hex_QW0177IS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACQUIRE LEVEL OF OF THE PACK x:" hex_QW0177AQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RELEASE LEVEL OF THE PACKAGE x:" hex_QW0177RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DYNAMICRULES VALUE FOR DYNAM x:" hex_QW0177DY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFER PREPARE OF REMOTE SQL  x:" hex_QW0177DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REOPTIMIZE SQL STATEMENTS AT x:" hex_QW0177RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      KEEP DYNAMIC STATEMENTS ACRO x:" hex_QW0177KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBPROTOCOL                   x:" hex_QW0177PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U OPTHINT VALUE             x:" hex_QW0177OH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IMMEDIATE WRITE OF UPDATED G x:" hex_QW0177IW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENCODING CCSID VALUE         x:" hex_QW0177CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SCHEME OF ENCODING CCSID     x:" hex_QW0177SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0177 to        x:" hex_QW0177LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0177 to        x:" hex_QW0177CO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0177 to        x:" hex_QW0177PI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0177 to        x:" hex_QW0177OH_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0177LO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0177CO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0177PI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0177OH_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0178 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0178:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0178,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0178 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0178 ,
    =00001 QW0178FD +4 , /* C - (S)                            00000 */
  ,     /* QW0178F1 EQU x'C9D5C9E3' (S)                              */
  ,     /* QW0178F2 EQU x'E6D9C9E3' (S)                              */
  ,     /* QW0178F3 EQU x'E3C5D9D4' (S)                              */
    =00005 QW0178FB +4 , /* F - (S)                            00004 */
    =00009 QW0178LB +4 , /* F - (S)                            00008 */
    =00013 QW0178LC +4 , /* F - (S)                            0000C */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0178FD = c2x(QW0178FD)
  hex_QW0178FB = c2x(QW0178FB)
  hex_QW0178LB = c2x(QW0178LB)
  hex_QW0178LC = c2x(QW0178LC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0178",desired_dsect) > 0)) then do
    void_rc = queue_QW0178_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0178:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0178_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0178:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0178FD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0178FB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0178LB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0178LC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0180 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0180:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0180,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0180 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0180 ,
,/* =00001 QW0180HD +0 ,    F - HEADER - ALL TYPES             00000 */
    =00001 QW0180E +1 , /* C - TYPE OF EVENT - A, R, S, or F   00000 */
  ,     /* QW0180ER EQU x'000000D9' RECEIVED A DISTRIBUTED DATA MESS */
  ,     /* QW0180ES EQU x'00000000' SENT A DISTRIBUTED DATA MESSAGE  */
  ,     /* QW0180EF EQU x'000000C6' RECEIVED AN FMH-5 ON AN INCOMING */
  ,     /* QW0180EA EQU x'000000C1' SENT AN FMH-5 TO ALLOCATE A CONV */
    =00002 QW0180F +1 , /* X - FLAGS                           00001 */
  ,     /* QW0180NP EQU x'000000C0' NETWORK PROTOCOL.                */
,/* =00003 QW0180CV +0 ,    C - CONVERSATION INFORMATION       00002 */
    =00003 QW0180VI +4 , /* X - (S) CONVERSATION ID            00002 */
    =00007 QW0180IP +16 , /* X - (T) IF QWHSRN>=91, IP ADDRESS 00006 */
  ,
  ,/*00022 __no__name__ ORG - QW0180IP - x'00000006'           00016 */
    =00007 QW0180SI +8 , /* X - (S) SESSION ID                 00006 */
    =00015 QW0180LM +8 , /* C - (S) MODE NAME                  0000E */
    =00023 QW0180PT +4 , /* X - (T) IF QWHSRN >= 91, PORTS     00016 */
  ,
  ,/*00026 __no__name__ ORG - QW0180PT - x'00000016'           0001A */
    =00023 QW0180LP +2 , /* X - (T) LOCAL PORT                 00016 */
    =00025 QW0180PP +2 , /* X - (T) PARTNER PORT               00018 */
    =00027 QW0180DL +2 , /* H - SIZE OF QW0180DS VARIABLE LENG 0001A */
,/* =00029 QW0180DS +0 ,    C - VARIABLE LENGTH MESSAGE OR FMH 0001C */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0180E = c2x(QW0180E)
  hex_QW0180F = c2x(QW0180F)
  hex_QW0180VI = c2x(QW0180VI)
  hex_QW0180IP = c2x(QW0180IP)
  hex_QW0180SI = c2x(QW0180SI)
  hex_QW0180LM = c2x(QW0180LM)
  hex_QW0180PT = c2x(QW0180PT)
  hex_QW0180LP = c2x(QW0180LP)
  hex_QW0180PP = c2x(QW0180PP)
  hex_QW0180DL = c2x(QW0180DL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0180",desired_dsect) > 0)) then do
    void_rc = queue_QW0180_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0180:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0180_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0180:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - A, R, S, or  x:" hex_QW0180E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0180F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) CONVERSATION ID          x:" hex_QW0180VI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) IF QWHSRN>=91, IP ADDRES x:" hex_QW0180IP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) SESSION ID               x:" hex_QW0180SI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) MODE NAME                x:" hex_QW0180LM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) IF QWHSRN >= 91, PORTS   x:" hex_QW0180PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) LOCAL PORT               x:" hex_QW0180LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) PARTNER PORT             x:" hex_QW0180PP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SIZE OF QW0180DS VARIABLE LE x:" hex_QW0180DL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0181 length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0181:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0181,14)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0181 Length: 14"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0181 ,
,/* =00001 QW0181HD +0 ,    H - (S)                            00000 */
    =00001 QW0181E +1 , /* C - (S)                             00000 */
  ,     /* QW0181ER EQU x'000000D9' (S)                              */
  ,     /* QW0181ES EQU x'00000000' (S)                              */
  ,     /* QW0181EH EQU x'000000C8' (S)                              */
    =00002 RSVD0001 +1 , /* X - RESERVED                       00001 */
,/* =00003 QW0181OD +0 ,    C - (S)                            00002 */
    =00003 QW0181T +2 , /* X - (S)                             00002 */
  ,     /* QW0181TQ EQU x'00000001' (S)                              */
  ,     /* QW0181TP EQU x'00000002' (S)                              */
  ,     /* QW0181TO EQU x'00000003' (S)                              */
    =00005 QW0181RC +2 , /* X - (S)                            00004 */
    =00007 RSVD0002 +4 , /* X - (S)                            00006 */
,/* =00011 QW0181OB +0 ,    X - (S)                            0000A */
    =00011 QW0181OL +2 , /* X - (S)                            0000A */
    =00013 QW0181CP +2 , /* X - (S)                            0000C */
,/* =00015 QW0181DT +0 ,    C - (S)                            0000E */
    .           /* End of DSECT */
  /* next byte at 15 */
  hex_QW0181E = c2x(QW0181E)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0181T = c2x(QW0181T)
  hex_QW0181RC = c2x(QW0181RC)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0181OL = c2x(QW0181OL)
  hex_QW0181CP = c2x(QW0181CP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0181",desired_dsect) > 0)) then do
    void_rc = queue_QW0181_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0181:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0181_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0181:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0181E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0181T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0181RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0181OL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0181CP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0182 length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0182:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0182,14)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0182 Length: 14"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0182 ,
,/* =00001 QW0182HD +0 ,    H - (S)                            00000 */
    =00001 QW0182E +1 , /* C - (S)                             00000 */
  ,     /* QW0182ER EQU x'000000D9' (S)                              */
  ,     /* QW0182ES EQU x'00000000' (S)                              */
  ,     /* QW0182EH EQU x'000000C8' (S)                              */
    =00002 RSVD0001 +1 , /* X - RESERVED                       00001 */
,/* =00003 QW0182OD +0 ,    C - (S)                            00002 */
    =00003 QW0182T +2 , /* X - (S)                             00002 */
  ,     /* QW0182TQ EQU x'00000001' (S)                              */
  ,     /* QW0182TP EQU x'00000002' (S)                              */
  ,     /* QW0182TO EQU x'00000003' (S)                              */
    =00005 QW0182RC +2 , /* X - (S)                            00004 */
    =00007 RSVD0002 +4 , /* X - RESERVED                       00006 */
,/* =00011 QW0182OB +0 ,    X - (S)                            0000A */
    =00011 QW0182OL +2 , /* X - (S)                            0000A */
    =00013 QW0182CP +2 , /* X - (S)                            0000C */
,/* =00015 QW0182DT +0 ,    C - (S)                            0000E */
    .           /* End of DSECT */
  /* next byte at 15 */
  hex_QW0182E = c2x(QW0182E)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0182T = c2x(QW0182T)
  hex_QW0182RC = c2x(QW0182RC)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0182OL = c2x(QW0182OL)
  hex_QW0182CP = c2x(QW0182CP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0182",desired_dsect) > 0)) then do
    void_rc = queue_QW0182_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0182:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0182_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0182:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0182E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0182T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0182RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0182OL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0182CP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0183 length is 00042
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0183:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0183,66)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0183 Length: 66"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0183 ,
    =00001 QW0183E +1 , /* C - TYPE OF EVENT - I,R  MASKS ARE  00000 */
  ,     /* QW0183EI EQU x'000000C9' INVOCATION FROM RDS/SCC          */
  ,     /* QW0183ER EQU x'000000D9' RETURN TO RDS/SCC                */
    =00002 RSVD0001 +1 , /* C - RESERVED                       00001 */
    =00003 QW0183FN +2 , /* H - FUNCTION TYPE - TYPE I         00002 */
  ,     /* QW0183RB EQU x'0000000A' REBIND                           */
  ,     /* QW0183FR EQU x'00000014' FREE                             */
  ,     /* QW0183BB EQU x'0000001E' BEGIN BIND                       */
  ,     /* QW0183BS EQU x'00000028' BIND STMT                        */
  ,     /* QW0183EB EQU x'00000032' END BIND                         */
  ,     /* QW0183SS EQU x'0000003C' SQL STMT                         */
  ,     /* QW0183CE EQU x'00000046' CONNECT EXTRACT                  */
  ,     /* QW0183CR EQU x'00000050' CONNECT RESET                    */
  ,     /* QW0183R2 EQU x'00000055' CONNECT RESET TYPE 2             */
  ,     /* QW0183CB EQU x'0000005A' CONNECT RESET FOR BIND           */
  ,     /* QW0183EC EQU x'00000064' EXPLICIT CONNECT                 */
  ,     /* QW0183BC EQU x'0000006E' BIND CONNECT                     */
  ,     /* QW0183CT EQU x'00000078' CONNECT TYPE 2                   */
  ,     /* QW0183SC EQU x'00000082' SET CONNECTION                   */
  ,     /* QW0183RL EQU x'0000008C' RELEASE LOCATION                 */
  ,     /* QW0183RE EQU x'00000096' RELEASE CURRENT                  */
  ,     /* QW0183RA EQU x'000000A0' RELEASE ALL                      */
  ,     /* QW0183RS EQU x'000000AA' RELEASE ALL SQL                  */
  ,     /* QW0183RP EQU x'000000B4' RELEASE ALL PRIVATE              */
    =00005 QW0183LN +16 , /* C - %U AS LOCATION NAME           00004 */
    =00021 QW0183CO +18 , /* C - %U COLLECTION NAME            00014 */
    =00039 RSVD0002 +2 , /* C - RESERVED                       00026 */
    =00041 QW0183PN +8 , /* C - %U PROGRAM NAME                00028 */
    =00049 QW0183ST +2 , /* H - SQL STATEMENT TYPE             00030 */
  ,     /* QW0183SP EQU x'0000030E' CALL                             */
    =00051 QW0183OS +2 , /* H - Reserved                       00032 */
    =00053 QW0183RC +4 , /* F - RETURN CODE                    00034 */
    =00057 QW0183SN +4 , /* F - SQL STATEMENT NUMBER           00038 */
    =00061 QW0183LN_Off +2 , /* H - Offset from QW0183 to      0003C */
    =00063 QW0183CO_Off +2 , /* H - Offset from QW0183 to      0003E */
    =00065 QW0183PN_Off +2 , /* H - Offset from QW0183 to      00040 */
,/* =00067 QW0183EN +0 ,    C - END OF RECORD                  00042 */
    =00001 QW0183LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0183LN_Var +0 ,    C - %U AS LOCATION NAME        00002 */
    =00001 QW0183CO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0183CO_Var +0 ,    C - %U COLLECTION NAME         00002 */
    =00001 QW0183PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0183PN_Var +0 ,    C - %U PROGRAM NAME            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0183E = c2x(QW0183E)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0183FN = c2x(QW0183FN)
  hex_QW0183LN = c2x(QW0183LN)
  hex_QW0183CO = c2x(QW0183CO)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0183PN = c2x(QW0183PN)
  hex_QW0183ST = c2x(QW0183ST)
  hex_QW0183OS = c2x(QW0183OS)
  hex_QW0183RC = c2x(QW0183RC)
  hex_QW0183SN = c2x(QW0183SN)
  hex_QW0183LN_Off = c2x(QW0183LN_Off)
  hex_QW0183CO_Off = c2x(QW0183CO_Off)
  hex_QW0183PN_Off = c2x(QW0183PN_Off)
  hex_QW0183LN_Len = c2x(QW0183LN_Len)
  hex_QW0183CO_Len = c2x(QW0183CO_Len)
  hex_QW0183PN_Len = c2x(QW0183PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0183",desired_dsect) > 0)) then do
    void_rc = queue_QW0183_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0183:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0183_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0183:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - I,R  MASKS A x:" hex_QW0183E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNCTION TYPE - TYPE I       x:" hex_QW0183FN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U AS LOCATION NAME          x:" hex_QW0183LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION NAME           x:" hex_QW0183CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0183PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL STATEMENT TYPE           x:" hex_QW0183ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0183OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE                  x:" hex_QW0183RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL STATEMENT NUMBER         x:" hex_QW0183SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0183 to        x:" hex_QW0183LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0183 to        x:" hex_QW0183CO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0183 to        x:" hex_QW0183PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0183LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0183CO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0183PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0184 length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0184:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0184,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0184 Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0184 ,
,/* =00001 QW0184HD +0 ,    F - HEADER - ALL TYPES             00000 */
    =00001 QW0184E +1 , /* C - TYPE OF EVENT - R or S or C     00000 */
  ,     /* QW0184ER EQU x'000000D9' RECEIVED A DISTRIBUTED DATA MESS */
  ,     /* QW0184ES EQU x'00000000' SENT A DISTRIBUTED DATA MESSAGE  */
  ,     /* QW0184EC EQU x'000000C3' DISTRIBUTED DATA MESSAGE CONTINU */
    =00002 QW0184F +1 , /* X - FLAGS                           00001 */
  ,     /* QW0184NP EQU x'000000C0' NETWORK PROTOCOL                 */
,/* =00003 QW0184CV +0 ,    C - (S)                            00002 */
    =00003 QW0184SD +4 , /* X - TCP/IP SOCKET DESCRIPTOR       00002 */
    =00007 QW0184IP +16 , /* X - (T) IF QWHSRN>=91, IP ADDRESS 00006 */
  ,
  ,/*00022 __no__name__ ORG - QW0184IP - x'00000006'           00016 */
    =00007 QW0184SI +8 , /* X - (T) IF QWHSRN<91, 32 BIT IPv4  00006 */
    =00015 RSVD0001 +8 , /* C - RESERVED                       0000E */
    =00023 QW0184PT +4 , /* X - (T) IF QWHSRN>=91, PORTS(INTER 00016 */
  ,
  ,/*00026 __no__name__ ORG - QW0184PT - x'00000016'           0001A */
    =00023 QW0184LP +2 , /* X - (T) LOCAL PORT                 00016 */
    =00025 QW0184PP +2 , /* X - (T) PARTNER PORT               00018 */
    =00027 QW0184DL +2 , /* H - SIZE OF QW0184DS VARIABLE LENG 0001A */
,/* =00029 QW0184DS +0 ,    C - VARIABLE LENGTH MESSAGE        0001C */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0184E = c2x(QW0184E)
  hex_QW0184F = c2x(QW0184F)
  hex_QW0184SD = c2x(QW0184SD)
  hex_QW0184IP = c2x(QW0184IP)
  hex_QW0184SI = c2x(QW0184SI)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0184PT = c2x(QW0184PT)
  hex_QW0184LP = c2x(QW0184LP)
  hex_QW0184PP = c2x(QW0184PP)
  hex_QW0184DL = c2x(QW0184DL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0184",desired_dsect) > 0)) then do
    void_rc = queue_QW0184_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0184:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0184_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0184:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF EVENT - R or S or C  x:" hex_QW0184E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0184F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TCP/IP SOCKET DESCRIPTOR     x:" hex_QW0184SD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) IF QWHSRN>=91, IP ADDRES x:" hex_QW0184IP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) IF QWHSRN<91, 32 BIT IPv x:" hex_QW0184SI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) IF QWHSRN>=91, PORTS(INT x:" hex_QW0184PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) LOCAL PORT               x:" hex_QW0184LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (T) PARTNER PORT             x:" hex_QW0184PP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SIZE OF QW0184DS VARIABLE LE x:" hex_QW0184DL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0185 length is 00092
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0185:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0185,146)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0185 Length: 146"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0185 ,
    =00001 QW0185LN +4 , /* F - LENGTH OF TOTAL DATA CAPTURE D 00000 */
    =00005 QW0185TP +1 , /* C - TYPE: S = DATA CAPTURE TABLE   00004 */
  ,     /* QW0185DS EQU x'00000000' DATA CAPTURE TABLE DESCRIPTION   */
  ,     /* QW0185DO EQU x'000000C4' DATA CAPTURE DATA ROW            */
    =00006 RSVD0001 +3 , /* C - RESERVED                       00005 */
    =00009 QW0185RC +4 , /* C - REASON CODE DESCRIBING ERROR   00008 */
,/* =00013 QW0185QT +0 ,    C - QUALIFIED TABLE NAME           0000C */
    =00013 QW0185CR +8 , /* C - %U CREATOR OF TABLE (AUTH ID)  0000C */
    =00021 QW0185TB +18 , /* C - %U TABLE NAME                 00014 */
    =00039 QW0185TS +10 , /* C - TIMESTAMP (INTERNAL FORMAT) O 00026 */
    =00049 QW0185TL +10 , /* C - TIMESTAMP (INTERNAL FORMAT) O 00030 */
    =00059 QW0185UR +8 , /* C - RBA OF THE FIRST LOG RECORD FO 0003A */
    =00067 QW0185LR +8 , /* C - RBA OF LOG RECORD FROM WHICH T 00042 */
    =00075 QW0185PC +2 , /* C - OPERATION CODE.                0004A */
  ,     /* QW0185IN EQU x'0000C9D5' INSERT                           */
  ,     /* QW0185UB EQU x'0000E4C2' UPDATE BEFORE IMAGE              */
  ,     /* QW0185UA EQU x'0000E4C1' UPDATE AFTER IMAGE               */
  ,     /* QW0185DE EQU x'0000C4C5' DELETE                           */
    =00077 QW0185RI +2 , /* C - OPERATION CODE QUALIFIER.      0004C */
  ,     /* QW0185RE EQU x'0000D9C9' OPERATION IS THE RESULT OF A     */
    =00079 QW0185TR +2 , /* C - OPERATION CODE QUALIFIER.      0004E */
  ,     /* QW0185TE EQU x'0000E3D9' OPERATION IS THE RESULT OF A     */
    =00081 QW0185CR_Off +2 , /* H - Offset from QW0185 to      00050 */
    =00083 QW0185TB_Off +2 , /* H - Offset from QW0185 to      00052 */
  ,     /* QW0185HL EQU x'00000054' TOTAL LENGTH OF HEADER PORTION   */
,/* =00085 QW0185DA +0 ,    C - BEGIN OF DATA PORTION          00054 */
  ,
  ,/*00084 __no__name__ ORG - QW0185DA - x'00000054'           00054 */
,/* =00085 QW0185DD +0 ,    C - BEGINNING OF DATA DESCRIPTION  00054 */
    =00085 QW0185ID +8 , /* C - EYE CATCHER =  CDCDD           00054 */
    =00093 QW0185BC +4 , /* F - LENGTH OF THE QW0185DD SECTION 0005C */
    =00097 QW0185NO +2 , /* H - TOTAL NUMBER OF OCCURRENCES OF 00060 */
    =00099 QW0185LD +2 , /* H - NUMBER OF COLUMNS DESCRIBED BY 00062 */
,/* =00101 QW0185VR +0 ,    C - DESCRIBES A COLUMN IN A        00064 */
    =00101 QW0185ST +2 , /* H - TELLS THE DATA TYPE OF THE     00064 */
    =00103 QW0185LE +2 , /* H - DEFINES THE EXTERNAL LENGTH OF 00066 */
    =00105 QW0185SD +4 , /* F - CONTAINS THE CCSID (CODED CHAR 00068 */
    =00109 QW0185SI +4 , /* F - OFFSET OF THIS COLUMN INTO THE 0006C */
,/* =00113 QW0185SN +0 ,    C - LENGTH OF NAME AND NAME OF THE 00070 */
    =00113 QW0185NL +2 , /* H - LENGTH OF COLUMN NAME          00070 */
    =00115 QW0185CN +30 , /* C - %U NAME OF COLUMN             00072 */
    =00145 QW0185CN_Off +2 , /* H - Offset from QW0185 to      00090 */
  ,
  ,/*00146 __no__name__ ORG - QW0185DA - x'00000054'           00092 */
,/* =00085 QW0185DR +0 ,    C - DATA ROW OR ERROR MESSAGE      00054 */
    =00001 QW0185CR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0185CR_Var +0 ,    C - %U CREATOR OF TABLE (AUTH  00002 */
    =00001 QW0185TB_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0185TB_Var +0 ,    C - %U TABLE NAME              00002 */
    =00001 QW0185CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0185CN_Var +0 ,    C - %U NAME OF COLUMN          00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0185LN = c2x(QW0185LN)
  hex_QW0185TP = c2x(QW0185TP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0185RC = c2x(QW0185RC)
  hex_QW0185CR = c2x(QW0185CR)
  hex_QW0185TB = c2x(QW0185TB)
  hex_QW0185TS = c2x(QW0185TS)
  hex_QW0185TL = c2x(QW0185TL)
  hex_QW0185UR = c2x(QW0185UR)
  hex_QW0185LR = c2x(QW0185LR)
  hex_QW0185PC = c2x(QW0185PC)
  hex_QW0185RI = c2x(QW0185RI)
  hex_QW0185TR = c2x(QW0185TR)
  hex_QW0185CR_Off = c2x(QW0185CR_Off)
  hex_QW0185TB_Off = c2x(QW0185TB_Off)
  hex_QW0185ID = c2x(QW0185ID)
  hex_QW0185BC = c2x(QW0185BC)
  hex_QW0185NO = c2x(QW0185NO)
  hex_QW0185LD = c2x(QW0185LD)
  hex_QW0185ST = c2x(QW0185ST)
  hex_QW0185LE = c2x(QW0185LE)
  hex_QW0185SD = c2x(QW0185SD)
  hex_QW0185SI = c2x(QW0185SI)
  hex_QW0185NL = c2x(QW0185NL)
  hex_QW0185CN = c2x(QW0185CN)
  hex_QW0185CN_Off = c2x(QW0185CN_Off)
  hex_QW0185CR_Len = c2x(QW0185CR_Len)
  hex_QW0185TB_Len = c2x(QW0185TB_Len)
  hex_QW0185CN_Len = c2x(QW0185CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0185",desired_dsect) > 0)) then do
    void_rc = queue_QW0185_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0185:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0185_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0185:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF TOTAL DATA CAPTURE x:" hex_QW0185LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE: S = DATA CAPTURE TABLE x:" hex_QW0185TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON CODE DESCRIBING ERROR x:" hex_QW0185RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CREATOR OF TABLE (AUTH ID x:" hex_QW0185CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TABLE NAME                x:" hex_QW0185TB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP (INTERNAL FORMAT)  x:" hex_QW0185TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP (INTERNAL FORMAT)  x:" hex_QW0185TL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RBA OF THE FIRST LOG RECORD  x:" hex_QW0185UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RBA OF LOG RECORD FROM WHICH x:" hex_QW0185LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATION CODE.              x:" hex_QW0185PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATION CODE QUALIFIER.    x:" hex_QW0185RI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATION CODE QUALIFIER.    x:" hex_QW0185TR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0185 to        x:" hex_QW0185CR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0185 to        x:" hex_QW0185TB_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EYE CATCHER =  CDCDD         x:" hex_QW0185ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE QW0185DD SECTI x:" hex_QW0185BC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF OCCURRENCES  x:" hex_QW0185NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF COLUMNS DESCRIBED  x:" hex_QW0185LD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TELLS THE DATA TYPE OF THE   x:" hex_QW0185ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEFINES THE EXTERNAL LENGTH  x:" hex_QW0185LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTAINS THE CCSID (CODED CH x:" hex_QW0185SD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET OF THIS COLUMN INTO T x:" hex_QW0185SI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF COLUMN NAME        x:" hex_QW0185NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U NAME OF COLUMN            x:" hex_QW0185CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0185 to        x:" hex_QW0185CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0185CR_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0185TB_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0185CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0186 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0186:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0186,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0186 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0186 ,
    =00001 QW0186SC +2 , /* H - (S)                            00000 */
    =00003 QW0186TS +2 , /* H - (S)                            00002 */
    =00005 QW0186RS +2 , /* H - (S)                            00004 */
    =00007 QW0186LN +2 , /* H - (S)                            00006 */
,/* =00009 QW0186MP +0 ,    C - (S)                            00008 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0186SC = c2x(QW0186SC)
  hex_QW0186TS = c2x(QW0186TS)
  hex_QW0186RS = c2x(QW0186RS)
  hex_QW0186LN = c2x(QW0186LN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0186",desired_dsect) > 0)) then do
    void_rc = queue_QW0186_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0186:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0186_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0186:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0186SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0186TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0186RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0186LN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0187 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0187:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0187,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0187 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0187 ,
,/* =00001 QW0187ND +0 ,    C - NO DATA NEEDED FOR IFCID 187   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0187",desired_dsect) > 0)) then do
    void_rc = queue_QW0187_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0187:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0187_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0187:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0188 length is 00054
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0188:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0188,84)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0188 Length: 84"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0188 ,
    =00001 QW0188TP +1 , /* C - TYPE OF REQUEST FROM WQALCDCD: 00000 */
  ,     /* QW0188TY EQU x'00000000' Y = ALWAYS RETURN THE DATA       */
  ,     /* QW0188TN EQU x'000000D5' N = NEVER RETURN THE DATA        */
  ,     /* QW0188TA EQU x'000000C1' A = AUTOMATIC - RETURN THE DATA  */
    =00002 QW0188PL +1 , /* C - PART OF LOG READ ON LOG READ T 00001 */
  ,     /* QW0188PA EQU x'000000C1' A = ACTIVE LOG                   */
  ,     /* QW0188PB EQU x'000000C2' B = LOG BUFFERS                  */
  ,     /* QW0188PR EQU x'000000D9' R = ARCHIVE LOG                  */
    =00003 QW0188FL +1 , /* C - READS 185 REQUEST FLAGS        00002 */
  ,     /* QW0188RF EQU x'00000080' (S)                              */
  ,     /* QW0188RM EQU x'00000040' THIS RECORD WAS WRITTEN FOR A    */
    =00004 RSVD0001 +1 , /* C - RESERVED                       00003 */
    =00005 QW0188BT +8 , /* C - DATA CAPTURE DESCRIBE          00004 */
    =00013 QW0188MB +4 , /* F - NUMBER OF DATA CAPTURE DESCRIB 0000C */
    =00017 QW0188BR +8 , /* C - BEGIN REQUESTED RANGE RBA      00010 */
    =00025 QW0188ER +8 , /* C - END REQUESTED RANGE RBA        00018 */
    =00033 QW0188LT +8 , /* C - ELAPSED TIME SPENT EXTRACTING  00020 */
    =00041 QW0188LL +8 , /* C - LONGEST LOG READ ELAPSED TIME  00028 */
    =00049 QW0188LC +4 , /* F - NUMBER OF LOG RECORDS THAT WER 00030 */
    =00053 QW0188RR +4 , /* F - TOTAL NUMBER OF LOG RECORDS    00034 */
    =00057 QW0188RD +4 , /* F - TOTAL NUMBER OF LOG RECORDS    00038 */
    =00061 QW0188LR +4 , /* C - NUMBER OF LOG READS PERFORMED  0003C */
    =00065 QW0188DR +4 , /* C - NUMBER OF DATA ROWS RETURNED.  00040 */
    =00069 QW0188DD +4 , /* F - NUMBER OF DATA CAPTURE         00044 */
    =00073 QW0188TB +4 , /* F - NUMBER OF DATA CAPTURE TABLES  00048 */
    =00077 QW0188RT +4 , /* F - (S)                            0004C */
    =00081 QW0188RS +4 , /* F - (S)                            00050 */
,/* =00085 RSVD0002 +0 ,    C -                                00054 */
    .           /* End of DSECT */
  /* next byte at 85 */
  hex_QW0188TP = c2x(QW0188TP)
  hex_QW0188PL = c2x(QW0188PL)
  hex_QW0188FL = c2x(QW0188FL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0188BT = c2x(QW0188BT)
  hex_QW0188MB = c2x(QW0188MB)
  hex_QW0188BR = c2x(QW0188BR)
  hex_QW0188ER = c2x(QW0188ER)
  hex_QW0188LT = c2x(QW0188LT)
  hex_QW0188LL = c2x(QW0188LL)
  hex_QW0188LC = c2x(QW0188LC)
  hex_QW0188RR = c2x(QW0188RR)
  hex_QW0188RD = c2x(QW0188RD)
  hex_QW0188LR = c2x(QW0188LR)
  hex_QW0188DR = c2x(QW0188DR)
  hex_QW0188DD = c2x(QW0188DD)
  hex_QW0188TB = c2x(QW0188TB)
  hex_QW0188RT = c2x(QW0188RT)
  hex_QW0188RS = c2x(QW0188RS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0188",desired_dsect) > 0)) then do
    void_rc = queue_QW0188_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0188:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0188_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0188:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF REQUEST FROM WQALCDC x:" hex_QW0188TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PART OF LOG READ ON LOG READ x:" hex_QW0188PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      READS 185 REQUEST FLAGS      x:" hex_QW0188FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA CAPTURE DESCRIBE        x:" hex_QW0188BT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE DESCR x:" hex_QW0188MB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BEGIN REQUESTED RANGE RBA    x:" hex_QW0188BR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END REQUESTED RANGE RBA      x:" hex_QW0188ER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ELAPSED TIME SPENT EXTRACTIN x:" hex_QW0188LT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LONGEST LOG READ ELAPSED TIM x:" hex_QW0188LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOG RECORDS THAT W x:" hex_QW0188LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF LOG RECORDS  x:" hex_QW0188RR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF LOG RECORDS  x:" hex_QW0188RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOG READS PERFORME x:" hex_QW0188LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA ROWS RETURNED x:" hex_QW0188DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE       x:" hex_QW0188DD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATA CAPTURE TABLE x:" hex_QW0188TB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0188RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0188RS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0190 length is 00012
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0190:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0190,18)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0190 Length: 18"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0190 ,
    =00001 QW0190TY +2 , /* C - (S)                            00000 */
    =00003 QW0190IP +1 , /* C - (S)                            00002 */
    =00004 QW0190CS +1 , /* C - (S)                            00003 */
    =00005 QW0190RT +4 , /* F - (S)                            00004 */
    =00009 QW0190#R +4 , /* F - (S)                            00008 */
    =00013 QW0190MB +1 , /* C - (S)                            0000C */
    =00014 QW0190JB +1 , /* C - (S)                            0000D */
    =00015 RSVD0001 +2 , /* C - (S)                            0000E */
    =00017 QW0190LL +2 , /* X - (S)                            00010 */
,/* =00019 QW0190LR +0 ,    C - (S)                            00012 */
  ,     /* QW0190TF EQU x'0000E3C6' (S)                              */
  ,     /* QW0190SS EQU x'0000E2E2' (S)                              */
  ,     /* QW0190MR EQU x'0000D4D9' (S)                              */
  ,     /* QW0190SR EQU x'0000E2D9' (S)                              */
  ,     /* QW0190MS EQU x'0000D4E2' (S)                              */
  ,     /* QW0190MM EQU x'0000D4E3' (S)                              */
  ,     /* QW0190IS EQU x'0000C9E2' (S)                              */
  ,     /* QW0190IM EQU x'0000C9E3' (S)                              */
  ,     /* QW0190C EQU x'000000C3' (S)                               */
  ,     /* QW0190R EQU x'000000D9' (S)                               */
  ,     /* QW0190T EQU x'00000000' (S)                               */
    .           /* End of DSECT */
  /* next byte at 19 */
  hex_QW0190TY = c2x(QW0190TY)
  hex_QW0190IP = c2x(QW0190IP)
  hex_QW0190CS = c2x(QW0190CS)
  hex_QW0190RT = c2x(QW0190RT)
  hex_QW0190#R = c2x(QW0190#R)
  hex_QW0190MB = c2x(QW0190MB)
  hex_QW0190JB = c2x(QW0190JB)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0190LL = c2x(QW0190LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0190",desired_dsect) > 0)) then do
    void_rc = queue_QW0190_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0190:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0190_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0190:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190IP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190#R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190MB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190JB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0190LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0191 length is 0007A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0191:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0191,122)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0191 Length: 122"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0191 ,
    =00001 QW0191LL +2 , /* H - TRACE BLOCK LENGTH             00000 */
,/* =00003 QW0191HD +0 ,    H - HEADER                         00002 */
    =00003 QW0191HE +8 , /* C - Eye Catcher  DRDA0191          00002 */
    =00011 QW0191LN +18 , /* C - %U Remote Location Name       0000A */
    =00029 QW0191VS +2 , /* C - Version Number for all Section 0001C */
    =00031 QW0191NO +2 , /* H - This 0191 record is n of       0001E */
    =00033 QW0191TO +2 , /* H - total number of 0191 records   00020 */
    =00035 QW0191FO +4 , /* X - Offset relative to QW0191HD    00022 */
    =00039 QW0191FL +4 , /* X - FAILURE OBJECT LENGTH          00026 */
,/* =00043 QW0191ID +0 ,    H - Identifier                     0002A */
    =00043 QW0191RS +4 , /* X - Reason code                    0002A */
    =00047 QW0191MN +8 , /* C - Module Name                    0002E */
    =00055 QW0191MI +2 , /* H - Source ID in Module            00036 */
    =00057 QW0191TK +12 , /* C - Unique Error Token            00038 */
    =00069 QW0191C1 +2 , /* C - DDM command code point         00044 */
    =00071 QW0191PA +2 , /* C - DB2 Parse State (P1, P2)       00046 */
    =00073 RSVD0001 +2 , /* C - Reserved                       00048 */
    =00075 QW0191RN +4 , /* X - Number of RMs received         0004A */
    =00079 QW0191ON +4 , /* X - Number of OBJDSSs received     0004E */
    =00083 QW0191DN +4 , /* X - Total Number of DSSs           00052 */
,/* =00087 QW0191ER +0 ,    C - Type of Error                  00056 */
    =00087 QW0191ET +1 , /* C - 0 : SQLSTATE in SQLCA gener-   00056 */
,/* =00088 QW0191SS +0 ,    C - SQLSTATE returned              00057 */
    =00088 QW0191C2 +2 , /* C - Reply Message Code Point       00057 */
    =00090 RSVD0002 +5 , /* C - Reserved                       00059 */
    =00095 QW0191TN +2 , /* H - Dimension of QW0191PT          0005E */
,/* =00097 QW0191PT +0 ,    C - Top Level Parse Trace          00060 */
    =00097 QW0191ST +1 , /* X - LZRPA/LZSPA State              00060 */
    =00098 QW0191EV +1 , /* X - LZRPA/LZSPA Event              00061 */
    =00099 RSVD0003 +8 , /* C - Padding                        00062 */
    =00107 RSVD0004 +14 , /* C - reserved                      0006A */
    =00121 QW0191LN_Off +2 , /* H - Offset from QW0191 to      00078 */
,/* =00123 QW0191DT +0 ,    C - Next section begins here       0007A */
    =00001 QW0191LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0191LN_Var +0 ,    C - %U Remote Location Name    00002 */
  ,     /* QW0191P1 EQU x'0000D7F1' AR Parse                         */
  ,     /* QW0191P2 EQU x'0000D7F2' AS Parse                         */
  ,     /* QW0191HC EQU x'0000C8C3' HOP AS Parse                     */
  ,     /* QW0191HP EQU x'0000C8D7' HOP AR Parse                     */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0191LL = c2x(QW0191LL)
  hex_QW0191HE = c2x(QW0191HE)
  hex_QW0191LN = c2x(QW0191LN)
  hex_QW0191VS = c2x(QW0191VS)
  hex_QW0191NO = c2x(QW0191NO)
  hex_QW0191TO = c2x(QW0191TO)
  hex_QW0191FO = c2x(QW0191FO)
  hex_QW0191FL = c2x(QW0191FL)
  hex_QW0191RS = c2x(QW0191RS)
  hex_QW0191MN = c2x(QW0191MN)
  hex_QW0191MI = c2x(QW0191MI)
  hex_QW0191TK = c2x(QW0191TK)
  hex_QW0191C1 = c2x(QW0191C1)
  hex_QW0191PA = c2x(QW0191PA)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0191RN = c2x(QW0191RN)
  hex_QW0191ON = c2x(QW0191ON)
  hex_QW0191DN = c2x(QW0191DN)
  hex_QW0191ET = c2x(QW0191ET)
  hex_QW0191C2 = c2x(QW0191C2)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0191TN = c2x(QW0191TN)
  hex_QW0191ST = c2x(QW0191ST)
  hex_QW0191EV = c2x(QW0191EV)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0191LN_Off = c2x(QW0191LN_Off)
  hex_QW0191LN_Len = c2x(QW0191LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0191",desired_dsect) > 0)) then do
    void_rc = queue_QW0191_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0191:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0191_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0191:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TRACE BLOCK LENGTH           x:" hex_QW0191LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDA0191        x:" hex_QW0191HE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Remote Location Name      x:" hex_QW0191LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Version Number for all Secti x:" hex_QW0191VS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      This 0191 record is n of     x:" hex_QW0191NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      total number of 0191 records x:" hex_QW0191TO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset relative to QW0191HD  x:" hex_QW0191FO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FAILURE OBJECT LENGTH        x:" hex_QW0191FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason code                  x:" hex_QW0191RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Module Name                  x:" hex_QW0191MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Source ID in Module          x:" hex_QW0191MI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unique Error Token           x:" hex_QW0191TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM command code point       x:" hex_QW0191C1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 Parse State (P1, P2)     x:" hex_QW0191PA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of RMs received       x:" hex_QW0191RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of OBJDSSs received   x:" hex_QW0191ON
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total Number of DSSs         x:" hex_QW0191DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      0 : SQLSTATE in SQLCA gener- x:" hex_QW0191ET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reply Message Code Point     x:" hex_QW0191C2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Dimension of QW0191PT        x:" hex_QW0191TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LZRPA/LZSPA State            x:" hex_QW0191ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LZRPA/LZSPA Event            x:" hex_QW0191EV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Padding                      x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      reserved                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0191 to        x:" hex_QW0191LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0191LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0191CR length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0191CR:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0191CR,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0191CR Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0191CR ,
    =00001 QW0191RE +8 , /* C - Eye Catcher  DRDACMND  or      00000 */
    =00009 QW0191PS +8 , /* C -  DRDASUCC  if parse successful 00008 */
    =00017 QW0191C3 +2 , /* C - Code Point                     00010 */
    =00019 QW0191NM +2 , /* H - Relative Number of DSS Carrier 00012 */
    =00021 QW0191OF +4 , /* F - Offset to start of RPY/RQS/OBJ 00014 */
    =00025 QW0191D1 +4 , /* F - Offset relative to QW0191HD    00018 */
    =00029 QW0191D2 +4 , /* F - Offset relative to QW0191HD    0001C */
    =00033 QW0191D3 +4 , /* F - Offset relative to QW0191HD    00020 */
    =00037 QW0191D4 +4 , /* F - Offset relative to QW0191HD    00024 */
    =00041 RSVD0001 +12 , /* C - reserved                      00028 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0191RE = c2x(QW0191RE)
  hex_QW0191PS = c2x(QW0191PS)
  hex_QW0191C3 = c2x(QW0191C3)
  hex_QW0191NM = c2x(QW0191NM)
  hex_QW0191OF = c2x(QW0191OF)
  hex_QW0191D1 = c2x(QW0191D1)
  hex_QW0191D2 = c2x(QW0191D2)
  hex_QW0191D3 = c2x(QW0191D3)
  hex_QW0191D4 = c2x(QW0191D4)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0191CR",desired_dsect) > 0)) then do
    void_rc = queue_QW0191CR_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0191CR:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0191CR_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0191CR:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDACMND  or    x:" hex_QW0191RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       DRDASUCC  if parse successf x:" hex_QW0191PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Code Point                   x:" hex_QW0191C3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Relative Number of DSS Carri x:" hex_QW0191NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset to start of RPY/RQS/O x:" hex_QW0191OF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset relative to QW0191HD  x:" hex_QW0191D1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset relative to QW0191HD  x:" hex_QW0191D2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset relative to QW0191HD  x:" hex_QW0191D3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset relative to QW0191HD  x:" hex_QW0191D4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      reserved                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0191FD length is 00026
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0191FD:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0191FD,38)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0191FD Length: 38"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0191FD ,
    =00001 QW0191FE +8 , /* C - Eye Catcher  DRDALATE          00000 */
    =00009 QW0191LD +4 , /* F - Number of Late Environmental D 00008 */
    =00013 QW0191GN +4 , /* F - Number of SQLDTAGRP triplets   0000C */
    =00017 QW0191L1 +1 , /* X - SQLDTAGRP LID extracted        00010 */
    =00018 QW0191L2 +1 , /* X - SQLCADTA  LID extracted        00011 */
    =00019 QW0191L3 +1 , /* X - SQLDTA    LID extracted        00012 */
    =00020 QW0191L4 +1 , /* X - SQLDTARD  LID extracted        00013 */
    =00021 QW0191GO +2 , /* X - FD:OCA geometry status         00014 */
    =00023 RSVD0001 +16 , /* C - reserved                      00016 */
  ,     /* QW0191F0 EQU x'00008000' SQLDTAGRP is ok                  */
  ,     /* QW0191F1 EQU x'00004000' SQLCADTA  is ok                  */
  ,     /* QW0191F2 EQU x'00002000' SQLDTA    is ok                  */
  ,     /* QW0191F3 EQU x'00001000' SQLDTARD  is ok                  */
  ,     /* QW0191F4 EQU x'00000080' FDOCA GEOMETRY is ok             */
    .           /* End of DSECT */
  /* next byte at 39 */
  hex_QW0191FE = c2x(QW0191FE)
  hex_QW0191LD = c2x(QW0191LD)
  hex_QW0191GN = c2x(QW0191GN)
  hex_QW0191L1 = c2x(QW0191L1)
  hex_QW0191L2 = c2x(QW0191L2)
  hex_QW0191L3 = c2x(QW0191L3)
  hex_QW0191L4 = c2x(QW0191L4)
  hex_QW0191GO = c2x(QW0191GO)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0191FD",desired_dsect) > 0)) then do
    void_rc = queue_QW0191FD_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0191FD:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0191FD_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0191FD:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDALATE        x:" hex_QW0191FE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of Late Environmental x:" hex_QW0191LD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of SQLDTAGRP triplets x:" hex_QW0191GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLDTAGRP LID extracted      x:" hex_QW0191L1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLCADTA  LID extracted      x:" hex_QW0191L2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLDTA    LID extracted      x:" hex_QW0191L3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLDTARD  LID extracted      x:" hex_QW0191L4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FD:OCA geometry status       x:" hex_QW0191GO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      reserved                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0191RT length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0191RT:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0191RT,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0191RT Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0191RT ,
    =00001 QW0191E1 +8 , /* C - Eye Catcher  DRDARDTA          00000 */
,/* =00009 QW0191R1 +0 ,    C - RDTA structure starts here     00008 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0191E1 = c2x(QW0191E1)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0191RT",desired_dsect) > 0)) then do
    void_rc = queue_QW0191RT_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0191RT:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0191RT_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0191RT:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDARDTA        x:" hex_QW0191E1
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0191LT length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0191LT:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0191LT,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0191LT Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0191LT ,
    =00001 QW0191E2 +8 , /* C - Eye Catcher  DRDALIDL          00000 */
,/* =00009 QW0191LS +0 ,    C - FD_LIDLST structure starts her 00008 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0191E2 = c2x(QW0191E2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0191LT",desired_dsect) > 0)) then do
    void_rc = queue_QW0191LT_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0191LT:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0191LT_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0191LT:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDALIDL        x:" hex_QW0191E2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0191EA length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0191EA:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0191EA,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0191EA Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0191EA ,
    =00001 QW0191Z3 +8 , /* C - Eye Catcher  DRDAZEDA          00000 */
,/* =00009 QW0191ZS +0 ,    C - ZEDA structure starts here     00008 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0191Z3 = c2x(QW0191Z3)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0191EA",desired_dsect) > 0)) then do
    void_rc = queue_QW0191EA_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0191EA:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0191EA_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0191EA:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDAZEDA        x:" hex_QW0191Z3
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW01916B length is 0000E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW01916B:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW01916B,14)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW01916B Length: 14"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW01916B ,
    =00001 QW0191E3 +8 , /* C - Eye Catcher  DRDARQS   or      00000 */
,/* =00009 QW0191L6 +0 ,    C - 6 byte DB2 internal DSS header 00008 */
    =00009 QW01916L +4 , /* F - 4 byte length                  00008 */
    =00013 QW01916T +2 , /* C - 2 byte type                    0000C */
    .           /* End of DSECT */
  /* next byte at 15 */
  hex_QW0191E3 = c2x(QW0191E3)
  hex_QW01916L = c2x(QW01916L)
  hex_QW01916T = c2x(QW01916T)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW01916B",desired_dsect) > 0)) then do
    void_rc = queue_QW01916B_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW01916B:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW01916B_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW01916B:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDARQS   or    x:" hex_QW0191E3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      4 byte length                x:" hex_QW01916L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      2 byte type                  x:" hex_QW01916T
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0192 length is 00140
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0192:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0192,320)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0192 Length: 320"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0192 ,
,/* =00001 QW0192HD +0 ,    F - HEADER INFORMATION             00000 */
    =00001 QW0192EC +8 , /* C - EYE CATCHER =  DRDA0192        00000 */
    =00009 QW0192LN +18 , /* C - %U REMOTE LOCATION NAME       00008 */
    =00027 QW0192VN +2 , /* H - VERSION NUMBER FOR 0192 REC S  0001A */
    =00029 QW0192CS +8 , /* C - CSECT THAT DETECTED THE ERROR  0001C */
    =00037 QW0192ER +4 , /* F - DDM ERROR TYPE RETURNED --     00024 */
    =00041 QW0192SV +4 , /* F - DDM SEVERITY CODE RETURNED     00028 */
    =00045 QW0192CD +4 , /* F - DDM ERROR CODE RETURNED --     0002C */
    =00049 QW0192CO +4 , /* F - OFFSET INTO THE DATASTREAM OF  00030 */
,/* =00053 QW0192CH +0 ,    C - CURRENT DDM LEVEL 6A HEADER    00034 */
    =00053 QW0192CL +2 , /* H - GDS LENGTH FIELD               00034 */
    =00055 QW0192CI +1 , /* X - DDM CONSTANT ( D0 X)           00036 */
    =00056 QW0192CF +1 , /* X - DDM FLAG BYTE                  00037 */
    =00057 QW0192CC +2 , /* H - DDM REQUEST CORRELATOR         00038 */
    =00059 QW0192DT +250 , /* C - FIRST 250 BYTES OF DATA      0003A */
    =00309 QW0192PO +4 , /* F - OFFSET INTO THE DATASTREAM OF  00134 */
,/* =00313 QW0192PH +0 ,    X - PREVIOUS DDM LEVEL 6A HEADER   00138 */
    =00313 QW0192PL +2 , /* H - GDS LENGTH FIELD               00138 */
    =00315 QW0192PI +1 , /* X - DDM CONSTANT ( D0 X)           0013A */
    =00316 QW0192PF +1 , /* X - DDM FLAG BYTE                  0013B */
    =00317 QW0192PC +2 , /* H - DDM REQUEST CORRELATOR         0013C */
    =00319 QW0192LN_Off +2 , /* H - Offset from QW0192 to      0013E */
    =00001 QW0192LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0192LN_Var +0 ,    C - %U Remote Location Name    00002 */
  ,     /* QW0192EP EQU x'00001245' DDM PROTOCOL ERROR RETURNED      */
  ,     /* QW0192ES EQU x'0000124C' DDM SYNTAX ERROR RETURNED        */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0192EC = c2x(QW0192EC)
  hex_QW0192LN = c2x(QW0192LN)
  hex_QW0192VN = c2x(QW0192VN)
  hex_QW0192CS = c2x(QW0192CS)
  hex_QW0192ER = c2x(QW0192ER)
  hex_QW0192SV = c2x(QW0192SV)
  hex_QW0192CD = c2x(QW0192CD)
  hex_QW0192CO = c2x(QW0192CO)
  hex_QW0192CL = c2x(QW0192CL)
  hex_QW0192CI = c2x(QW0192CI)
  hex_QW0192CF = c2x(QW0192CF)
  hex_QW0192CC = c2x(QW0192CC)
  hex_QW0192DT = c2x(QW0192DT)
  hex_QW0192PO = c2x(QW0192PO)
  hex_QW0192PL = c2x(QW0192PL)
  hex_QW0192PI = c2x(QW0192PI)
  hex_QW0192PF = c2x(QW0192PF)
  hex_QW0192PC = c2x(QW0192PC)
  hex_QW0192LN_Off = c2x(QW0192LN_Off)
  hex_QW0192LN_Len = c2x(QW0192LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0192",desired_dsect) > 0)) then do
    void_rc = queue_QW0192_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0192:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0192_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0192:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EYE CATCHER =  DRDA0192      x:" hex_QW0192EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U REMOTE LOCATION NAME      x:" hex_QW0192LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION NUMBER FOR 0192 REC  x:" hex_QW0192VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CSECT THAT DETECTED THE ERRO x:" hex_QW0192CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM ERROR TYPE RETURNED --   x:" hex_QW0192ER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM SEVERITY CODE RETURNED   x:" hex_QW0192SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM ERROR CODE RETURNED --   x:" hex_QW0192CD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET INTO THE DATASTREAM O x:" hex_QW0192CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GDS LENGTH FIELD             x:" hex_QW0192CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM CONSTANT ( D0 X)         x:" hex_QW0192CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM FLAG BYTE                x:" hex_QW0192CF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM REQUEST CORRELATOR       x:" hex_QW0192CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST 250 BYTES OF DATA      x:" hex_QW0192DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET INTO THE DATASTREAM O x:" hex_QW0192PO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GDS LENGTH FIELD             x:" hex_QW0192PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM CONSTANT ( D0 X)         x:" hex_QW0192PI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM FLAG BYTE                x:" hex_QW0192PF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DDM REQUEST CORRELATOR       x:" hex_QW0192PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0192 to        x:" hex_QW0192LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0192LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0193 length is 0002C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0193:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0193,44)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0193 Length: 44"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0193 ,
,/* =00001 QW0193HD +0 ,    F - HEADER                         00000 */
    =00001 QW0193EC +8 , /* C - EYE-CATCHER =  DRDA0193        00000 */
    =00009 QW0193LN +18 , /* C - %U REMOTE LOCATION NAME       00008 */
    =00027 QW0193VS +2 , /* H - QW0193 VERSION                 0001A */
    =00029 QW0193CS +8 , /* C - CSECT THAT DETECTED THE ERROR  0001C */
    =00037 QW0193SC +4 , /* F - SQLCODE                        00024 */
    =00041 QW0193CO +1 , /* C - COMMAND SENT                   00028 */
    =00042 QW0193UW +1 , /* C - UNIT OF WORK DISPOSITION       00029 */
    =00043 QW0193LN_Off +2 , /* H - Offset from QW0193 to      0002A */
    =00001 QW0193LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0193LN_Var +0 ,    C - %U Remote Location Name    00002 */
  ,     /* QW0193CM EQU x'000000C3' COMMIT COMMAND SENT              */
  ,     /* QW0193RB EQU x'000000D9' ROLLBACK COMMAND SENT            */
  ,     /* QW0193UC EQU x'000000C3' AS REPORTS UOW COMMITTED         */
  ,     /* QW0193UR EQU x'000000D9' AS REPORTS UOW ROLLED BACK       */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0193EC = c2x(QW0193EC)
  hex_QW0193LN = c2x(QW0193LN)
  hex_QW0193VS = c2x(QW0193VS)
  hex_QW0193CS = c2x(QW0193CS)
  hex_QW0193SC = c2x(QW0193SC)
  hex_QW0193CO = c2x(QW0193CO)
  hex_QW0193UW = c2x(QW0193UW)
  hex_QW0193LN_Off = c2x(QW0193LN_Off)
  hex_QW0193LN_Len = c2x(QW0193LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0193",desired_dsect) > 0)) then do
    void_rc = queue_QW0193_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0193:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0193_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0193:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EYE-CATCHER =  DRDA0193      x:" hex_QW0193EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U REMOTE LOCATION NAME      x:" hex_QW0193LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QW0193 VERSION               x:" hex_QW0193VS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CSECT THAT DETECTED THE ERRO x:" hex_QW0193CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLCODE                      x:" hex_QW0193SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COMMAND SENT                 x:" hex_QW0193CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNIT OF WORK DISPOSITION     x:" hex_QW0193UW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0193 to        x:" hex_QW0193LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0193LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0194 length is 0002E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0194:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0194,46)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0194 Length: 46"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0194 ,
,/* =00001 QW0194HD +0 ,    F - HEADER                         00000 */
    =00001 QW0194EC +8 , /* C - EYE CATCHER =  DRDA0194        00000 */
    =00009 QW0194LN +18 , /* C - %U REMOTE LOCATION NAME       00008 */
    =00027 QW0194VN +2 , /* H - VERSION NUMBER FOR 0192 REC S  0001A */
    =00029 QW0194CS +8 , /* C - CSECT THAT DETECTED THE ERROR  0001C */
    =00037 QW0194SN +4 , /* X - SNA SENSE CODE DESCRIBING THE  00024 */
    =00041 RSVD0001 +2 , /* X - RESERVED                       00028 */
    =00043 QW0194LN_Off +2 , /* H - Offset from QW0194 to      0002A */
    =00045 QW0194DL +2 , /* H - TRACE LENGTH FOR V TYPE FIELD  0002C */
,/* =00047 QW0194DS +0 ,    C - VARIABLE LENGTH FMH-5 DATA     0002E */
    =00001 QW0194LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0194LN_Var +0 ,    C - %U Remote Location Name    00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0194EC = c2x(QW0194EC)
  hex_QW0194LN = c2x(QW0194LN)
  hex_QW0194VN = c2x(QW0194VN)
  hex_QW0194CS = c2x(QW0194CS)
  hex_QW0194SN = c2x(QW0194SN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0194LN_Off = c2x(QW0194LN_Off)
  hex_QW0194DL = c2x(QW0194DL)
  hex_QW0194LN_Len = c2x(QW0194LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0194",desired_dsect) > 0)) then do
    void_rc = queue_QW0194_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0194:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0194_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0194:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EYE CATCHER =  DRDA0194      x:" hex_QW0194EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U REMOTE LOCATION NAME      x:" hex_QW0194LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION NUMBER FOR 0192 REC  x:" hex_QW0194VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CSECT THAT DETECTED THE ERRO x:" hex_QW0194CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SNA SENSE CODE DESCRIBING TH x:" hex_QW0194SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0194 to        x:" hex_QW0194LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TRACE LENGTH FOR V TYPE FIEL x:" hex_QW0194DL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0194LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0195 length is 0003E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0195:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0195,62)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0195 Length: 62"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0195 ,
,/* =00001 QW0195HD +0 ,    F - HEADER                         00000 */
    =00001 QW0195EC +8 , /* C - EYE CATCHER  DRDA0195          00000 */
    =00009 QW0195LN +18 , /* C - %U REMOTE LOCATION NAME       00008 */
    =00027 QW0195VI +2 , /* H - VERSION OF QW0195 RECORD       0001A */
,/* =00029 QW0195ID +0 ,    H - IDENTIFIER                     0001C */
    =00029 QW0195MN +8 , /* C - MODULE NAME                    0001C */
    =00037 QW0195UI +2 , /* H - SOURCE ID IN MODULE            00024 */
    =00039 RSVD0001 +2 , /* C - RESERVED                       00026 */
    =00041 QW0195FD +8 , /* C - FIELD IN ERROR                 00028 */
    =00049 QW0195NO +4 , /* F - COLUMN NUMBER FOR FIELD IN ERR 00030 */
    =00053 QW0195SE +4 , /* F - CONTENTS IN EXISTING SQLDA FIE 00034 */
    =00057 QW0195SN +4 , /* F - CONTENTS IN NEW SQLDA FIELD    00038 */
    =00061 QW0195LN_Off +2 , /* H - Offset from QW0195 to      0003C */
    =00001 QW0195LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0195LN_Var +0 ,    C - %U Remote Location Name    00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0195EC = c2x(QW0195EC)
  hex_QW0195LN = c2x(QW0195LN)
  hex_QW0195VI = c2x(QW0195VI)
  hex_QW0195MN = c2x(QW0195MN)
  hex_QW0195UI = c2x(QW0195UI)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0195FD = c2x(QW0195FD)
  hex_QW0195NO = c2x(QW0195NO)
  hex_QW0195SE = c2x(QW0195SE)
  hex_QW0195SN = c2x(QW0195SN)
  hex_QW0195LN_Off = c2x(QW0195LN_Off)
  hex_QW0195LN_Len = c2x(QW0195LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0195",desired_dsect) > 0)) then do
    void_rc = queue_QW0195_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0195:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0195_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0195:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EYE CATCHER  DRDA0195        x:" hex_QW0195EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U REMOTE LOCATION NAME      x:" hex_QW0195LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION OF QW0195 RECORD     x:" hex_QW0195VI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MODULE NAME                  x:" hex_QW0195MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SOURCE ID IN MODULE          x:" hex_QW0195UI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIELD IN ERROR               x:" hex_QW0195FD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COLUMN NUMBER FOR FIELD IN E x:" hex_QW0195NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTENTS IN EXISTING SQLDA F x:" hex_QW0195SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONTENTS IN NEW SQLDA FIELD  x:" hex_QW0195SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0195 to        x:" hex_QW0195LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0195LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0196HE length is 00040
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0196HE:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0196HE,64)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0196HE Length: 64"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0196HE ,
,/* =00001 RSVD0001 +0 ,    F - INSURE BOUNDARY                00000 */
    =00001 QW0196NU +4 , /* G - NUMBER OF LOCK HOLDERS IN THIS 00000 */
    =00005 QW0196RH +4 , /* X - LOCK NAME HASH VALUE           00004 */
,/* =00009 QW0196RN +0 ,    C - DB2 LOCK NAME COMPOSED OF:     00008 */
    =00009 QW0196RL +1 , /* G - ()LENGTH OF THE LOCK NAME      00008 */
    =00010 RSVD0002 +2 , /* C - ()RESERVED                     00009 */
    =00012 QW0196FR +1 , /* X - ()FLAGS FOR THE LOCKED RESOURC 0000B */
,/* =00013 QW0196PN +0 ,    C - LOCKED RESOURCE NAME           0000C */
    =00013 QW0196KD +2 , /* C - () DATABASE ID                 0000C */
    =00015 QW0196KP +2 , /* C - () PAGESET OBID OR TABLE RECOR 0000E */
,/* =00017 QW0196KR +0 ,    C - ID OF SMALL RESOURCE WHEN QW01 00010 */
    =00017 QW0196K1 +3 , /* C - 1. For pageset or data base lo 00010 */
    =00020 QW0196K2 +1 , /* X - QW0196K1 and QW0196K2 are zero 00013 */
    =00021 RSVD0003 +1 , /* X - 2. For partition locks, QW0196 00014 */
  ,
  ,/*00021 __no__name__ ORG - QW0196KR - x'00000010'           00015 */
,/* =00017 QW0196KY +0 ,    C - ID of small resource when QW01 00010 */
    =00017 QW0196K4 +4 , /* C - page number  (within large tab 00010 */
    =00021 QW0196K5 +1 , /* X - record id within page          00014 */
  ,
  ,/*00021 __no__name__ ORG - QW0196KR - x'00000010'           00015 */
    =00017 QW0196KC +9 , /* C - ID of resource for XML locks   00010 */
    =00026 RSVD0004 +1 , /* C - unused to match the format     00019 */
  ,
  ,/*00026 __no__name__ ORG - QW0196KR - x'00000010'           0001A */
,/* =00017 QW0196KX +0 ,    C - ID of resource for LOB locks   00010 */
    =00017 QW0196K6 +17 , /* C - Row ID                        00010 */
    =00034 QW0196K7 +2 , /* C - Version number                 00021 */
    =00036 RSVD0005 +5 , /* C - REST OF SPACE FOR 28 BYTE RESO 00023 */
  ,     /* QW0196MC EQU x'00000035' XML lock                         */
    =00041 QW0196WU +1 , /* X - REQUESTED FUNCTION             00028 */
    =00042 QW0196WS +1 , /* X - REQUESTED LOCK STATE           00029 */
    =00043 QW0196WD +1 , /* X - REQUESTED DURATION             0002A */
    =00044 QW0196WF +1 , /* X - REQUESTED LOCK FLAG            0002B */
  ,     /* QW0196CU EQU x'00000080' ON = CONDITIONAL                 */
    =00045 QW0196WO +8 , /* C - REQUESTING OWNING WORK UNIT    0002C */
    =00053 QW0196TI +4 , /* F - TIMEOUT INTERVAL (ZPARM VALUE) 00034 */
    =00057 QW0196TC +2 , /* H - TIMEOUT COUNTER FOR THIS THREA 00038 */
    =00059 RSVD0006 +2 , /* X - RESERVED                       0003A */
    =00061 QW0196W9 +4 , /* X - Waiters cached statement ID, o 0003C */
    .           /* End of DSECT */
  /* next byte at 65 */
  hex_QW0196NU = c2x(QW0196NU)
  hex_QW0196RH = c2x(QW0196RH)
  hex_QW0196RL = c2x(QW0196RL)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0196FR = c2x(QW0196FR)
  hex_QW0196KD = c2x(QW0196KD)
  hex_QW0196KP = c2x(QW0196KP)
  hex_QW0196K1 = c2x(QW0196K1)
  hex_QW0196K2 = c2x(QW0196K2)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0196K4 = c2x(QW0196K4)
  hex_QW0196K5 = c2x(QW0196K5)
  hex_QW0196KC = c2x(QW0196KC)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0196K6 = c2x(QW0196K6)
  hex_QW0196K7 = c2x(QW0196K7)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0196WU = c2x(QW0196WU)
  hex_QW0196WS = c2x(QW0196WS)
  hex_QW0196WD = c2x(QW0196WD)
  hex_QW0196WF = c2x(QW0196WF)
  hex_QW0196WO = c2x(QW0196WO)
  hex_QW0196TI = c2x(QW0196TI)
  hex_QW0196TC = c2x(QW0196TC)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0196W9 = c2x(QW0196W9)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0196HE",desired_dsect) > 0)) then do
    void_rc = queue_QW0196HE_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0196HE:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0196HE_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0196HE:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOCK HOLDERS IN TH x:" hex_QW0196NU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK NAME HASH VALUE         x:" hex_QW0196RH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()LENGTH OF THE LOCK NAME    x:" hex_QW0196RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()RESERVED                   x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()FLAGS FOR THE LOCKED RESOU x:" hex_QW0196FR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID               x:" hex_QW0196KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID OR TABLE REC x:" hex_QW0196KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      1. For pageset or data base  x:" hex_QW0196K1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QW0196K1 and QW0196K2 are ze x:" hex_QW0196K2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      2. For partition locks, QW01 x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      page number  (within large t x:" hex_QW0196K4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      record id within page        x:" hex_QW0196K5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ID of resource for XML locks x:" hex_QW0196KC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      unused to match the format   x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Row ID                       x:" hex_QW0196K6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Version number               x:" hex_QW0196K7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REST OF SPACE FOR 28 BYTE RE x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTED FUNCTION           x:" hex_QW0196WU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTED LOCK STATE         x:" hex_QW0196WS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTED DURATION           x:" hex_QW0196WD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTED LOCK FLAG          x:" hex_QW0196WF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTING OWNING WORK UNIT  x:" hex_QW0196WO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMEOUT INTERVAL (ZPARM VALU x:" hex_QW0196TI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMEOUT COUNTER FOR THIS THR x:" hex_QW0196TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Waiters cached statement ID, x:" hex_QW0196W9
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0196 length is 000BE
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0196:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0196,190)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0196 Length: 190"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0196 ,
,/* =00001 RSVD0001 +0 ,    F - INSURE BOUNDARY                00000 */
    =00001 QW0196HW +1 , /* C -  H  TO SIGNIFY LOCK HOLDER OR  00000 */
  ,     /* QW0196H EQU x'000000C8' HOLDER                            */
  ,     /* QW0196W EQU x'00000000' WAITER                            */
  ,     /* QW0196R EQU x'000000D9' RETAINED LOCK                     */
    =00002 RSVD0002 +3 , /* X - RESERVED                       00001 */
    =00005 QW0196HP +8 , /* C - PLAN NAME                      00004 */
    =00013 QW0196HR +12 , /* C - CORRELATION ID                0000C */
    =00025 QW0196HN +8 , /* C - CONNECTION ID                  00018 */
,/* =00033 QW0196HH +0 ,    C - LUWID AND TOKEN ( *  IF LOCK H 00020 */
    =00033 QW0196HL +24 , /* C - LUWID                         00020 */
    =00057 QW0196HT +4 , /* F - Thread token                   00038 */
    =00061 RSVD0003 +2 , /* X - RESERVED part of QW0196HH that 0003C */
    =00063 RSVD0004 +2 , /* X - RESERVED                       0003E */
    =00065 QW0196HO +8 , /* C - OWNING WORK UNIT               00040 */
    =00073 QW0196HI +8 , /* C - DB2 Member name                00048 */
    =00081 QW0196HS +1 , /* X - LOCK STATE                     00050 */
    =00082 QW0196HD +1 , /* X - LOCK DURATION                  00051 */
    =00083 QW0196HF +1 , /* X - LOCK FLAG (S)                  00052 */
  ,     /* QW0196H1 EQU x'00000080' Lock type - 1=RS, 0=CBS (mainly  */
  ,     /* QW0196H2 EQU x'00000040' 1=Private lock (IMS)             */
  ,     /* QW0196H3 EQU x'00000020' 1=Modify lock                    */
  ,     /* QW0196H4 EQU x'00000010' 1=Plock                          */
    =00084 QW0196HA +1 , /* X - (S)                            00053 */
    =00085 QW0196HB +8 , /* C - %U Holders authorization ID.   00054 */
    =00093 QW0196HC +16 , /* C - Holders end user userid.      0005C */
    =00109 QW0196HJ +32 , /* C - Holders transaction name.     0006C */
    =00141 QW0196HK +18 , /* C - Holders workstation name.     0008C */
    =00159 QW0196H9 +4 , /* X - Holders cached statement ID, o 0009E */
    =00163 RSVD0005 +28 , /* C - More holder information.      000A2 */
,/* =00191 QW0196EN +0 ,    C - END OF QW196 MAPPING           000BE */
    .           /* End of DSECT */
  /* next byte at 191 */
  hex_QW0196HW = c2x(QW0196HW)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0196HP = c2x(QW0196HP)
  hex_QW0196HR = c2x(QW0196HR)
  hex_QW0196HN = c2x(QW0196HN)
  hex_QW0196HL = c2x(QW0196HL)
  hex_QW0196HT = c2x(QW0196HT)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0196HO = c2x(QW0196HO)
  hex_QW0196HI = c2x(QW0196HI)
  hex_QW0196HS = c2x(QW0196HS)
  hex_QW0196HD = c2x(QW0196HD)
  hex_QW0196HF = c2x(QW0196HF)
  hex_QW0196HA = c2x(QW0196HA)
  hex_QW0196HB = c2x(QW0196HB)
  hex_QW0196HC = c2x(QW0196HC)
  hex_QW0196HJ = c2x(QW0196HJ)
  hex_QW0196HK = c2x(QW0196HK)
  hex_QW0196H9 = c2x(QW0196H9)
  hex_RSVD0005 = c2x(RSVD0005)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0196",desired_dsect) > 0)) then do
    void_rc = queue_QW0196_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0196:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0196_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0196:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       H  TO SIGNIFY LOCK HOLDER O x:" hex_QW0196HW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0196HP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CORRELATION ID               x:" hex_QW0196HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTION ID                x:" hex_QW0196HN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LUWID                        x:" hex_QW0196HL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Thread token                 x:" hex_QW0196HT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED part of QW0196HH th x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OWNING WORK UNIT             x:" hex_QW0196HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 Member name              x:" hex_QW0196HI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK STATE                   x:" hex_QW0196HS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK DURATION                x:" hex_QW0196HD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK FLAG (S)                x:" hex_QW0196HF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0196HA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Holders authorization ID. x:" hex_QW0196HB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders end user userid.     x:" hex_QW0196HC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders transaction name.    x:" hex_QW0196HJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders workstation name.    x:" hex_QW0196HK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Holders cached statement ID, x:" hex_QW0196H9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      More holder information.     x:" hex_RSVD0005
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0197 length is 0000A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0197:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0197,10)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0197 Length: 10"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0197 ,
,/* =00001 QW0197ID +0 ,    C - MESSAGE ID                     00000 */
    =00001 QW0197DS +3 , /* C - STRING  DSN                    00000 */
    =00004 QW0197NR +4 , /* C - MESSAGE NUMBER                 00003 */
    =00008 QW0197AC +1 , /* C - MESSAGE ACTION CODE            00007 */
    =00009 QW0197AL +1 , /* C - LONG MESSAGE ACTION CODE       00008 */
    =00010 QW0197BK +1 , /* C - BLANK CHARACTER                00009 */
,/* =00011 QW0197TX +0 ,    C - VARIABLE LENGTH MESSAGE TEXT   0000A */
    .           /* End of DSECT */
  /* next byte at 11 */
  hex_QW0197DS = c2x(QW0197DS)
  hex_QW0197NR = c2x(QW0197NR)
  hex_QW0197AC = c2x(QW0197AC)
  hex_QW0197AL = c2x(QW0197AL)
  hex_QW0197BK = c2x(QW0197BK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0197",desired_dsect) > 0)) then do
    void_rc = queue_QW0197_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0197:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0197_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0197:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STRING  DSN                  x:" hex_QW0197DS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE NUMBER               x:" hex_QW0197NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE ACTION CODE          x:" hex_QW0197AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LONG MESSAGE ACTION CODE     x:" hex_QW0197AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BLANK CHARACTER              x:" hex_QW0197BK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0198 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0198:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0198,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0198 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0198 ,
    =00001 QW0198DB +2 , /* H - DATABASE ID                    00000 */
    =00003 QW0198OB +2 , /* H - PAGESET OBID                   00002 */
    =00005 QW0198BP +1 , /* X - BUFFERPOOL ID                  00004 */
    =00006 QW0198FC +1 , /* C - FUNCTION CODE                  00005 */
  ,     /* QW0198GP EQU x'000000C7' GET PAGE REQUEST                 */
  ,     /* QW0198SW EQU x'00000000' SET WRITE INTENT REQUEST         */
  ,     /* QW0198RP EQU x'000000D9' RELEASE PAGE REQUEST             */
    =00007 QW0198PS +1 , /* C - PAGE STATUS IN BUFFER POOL     00006 */
  ,     /* QW0198H EQU x'000000C8' PAGE HIT IN VIRTUAL BUFFERPOOL    */
  ,     /* QW0198M EQU x'000000D4' PAGE MISSED IN VIRTUAL BUFFERPOOL */
  ,     /* QW0198N EQU x'000000D5' NOREAD REQUEST                    */
    =00008 QW0198AT +1 , /* C - ACCESS TYPE - QW1098AT IS      00007 */
  ,     /* QW0198SQ EQU x'00000000' SEQUENTIAL ACCESS   (GET PAGE)   */
  ,     /* QW0198RN EQU x'000000D9' RANDOM ACCESS       (GET PAGE)   */
  ,     /* QW0198RL EQU x'000000D3' RIDLIST ACCESS      (GET PAGE)   */
  ,     /* QW0198SR EQU x'000000D5' STANDARD REQUEST    (RELEASE PAG */
  ,     /* QW0198DR EQU x'000000C4' DESTRUCTIVE REQUEST (RELEASE PAG */
  ,     /* QW0198MR EQU x'000000D4' MRU SCHEME APPLIED  (RELEASE PAG */
    =00009 QW0198PN +4 , /* F - PAGE NUMBER                    00008 */
    =00013 QW0198AC +4 , /* A - ACE ADDRESS                    0000C */
    =00017 QW0198PR +1 , /* C - Page refresh status.           00010 */
  ,     /* QW0198RH EQU x'000000C8' Not valid after DB2 Version 7    */
  ,     /* QW0198RG EQU x'000000C7' Page retrieved from Group buffer */
  ,     /* QW0198RD EQU x'000000C4' Page retrieved from DASD         */
    =00018 RSVD0001 +3 , /* X - Reserved                       00011 */
    =00021 QW0198PT +4 , /* F - Partition number or 0 if non-  00014 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0198DB = c2x(QW0198DB)
  hex_QW0198OB = c2x(QW0198OB)
  hex_QW0198BP = c2x(QW0198BP)
  hex_QW0198FC = c2x(QW0198FC)
  hex_QW0198PS = c2x(QW0198PS)
  hex_QW0198AT = c2x(QW0198AT)
  hex_QW0198PN = c2x(QW0198PN)
  hex_QW0198AC = c2x(QW0198AC)
  hex_QW0198PR = c2x(QW0198PR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0198PT = c2x(QW0198PT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0198",desired_dsect) > 0)) then do
    void_rc = queue_QW0198_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0198:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0198_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0198:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID                  x:" hex_QW0198DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0198OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFERPOOL ID                x:" hex_QW0198BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNCTION CODE                x:" hex_QW0198FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE STATUS IN BUFFER POOL   x:" hex_QW0198PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACCESS TYPE - QW1098AT IS    x:" hex_QW0198AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER                  x:" hex_QW0198PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE ADDRESS                  x:" hex_QW0198AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Page refresh status.         x:" hex_QW0198PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partition number or 0 if non x:" hex_QW0198PT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0199HE length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0199HE:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0199HE,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0199HE Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0199HE ,
,/* =00001 RSVD0001 +0 ,    F - INSURE BOUNDARY                00000 */
    =00001 QW0199TS +8 , /* C - STORE CLOCK VALUE AT THE END O 00000 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0199TS = c2x(QW0199TS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0199HE",desired_dsect) > 0)) then do
    void_rc = queue_QW0199HE_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0199HE:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0199HE_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0199HE:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK VALUE AT THE END x:" hex_QW0199TS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0199 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0199:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0199,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0199 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0199 ,
,/* =00001 RSVD0001 +0 ,    F - INSURE BOUNDARY                00000 */
    =00001 QW0199DB +2 , /* H - DATABASE ID                    00000 */
    =00003 QW0199OB +2 , /* H - PAGESET  ID                    00002 */
    =00005 QW0199DN +2 , /* H - PIECE/PART NUMBER              00004 */
    =00007 QW0199BP +1 , /* X - BUFFER POOL ID                 00006 */
    =00008 QW0199DS +1 , /* X - FLAGS                          00007 */
  ,     /* QW0199GD EQU x'00000080' 1=GBP-DEPENDENT                  */
  ,     /* QW0199ID EQU x'00000040' 1=INDEX                          */
  ,     /* QW0199LS EQU x'00000020' 1=ANOTHER IFCID 199 RECORD FOLLO */
  ,     /* QW0199SD EQU x'00000010' 1=SHADOW COPY                    */
    =00009 QW0199SV +4 , /* F - AVERAGE I/O DELAY (IN MILLISEC 00008 */
    =00013 QW0199SX +4 , /* F - MAXIMUM I/O DELAY (IN MILLISEC 0000C */
    =00017 QW0199SP +4 , /* F - TOTAL I/O PAGES                00010 */
    =00021 QW0199AD +4 , /* F - AVERAGE I/O DELAY (IN MILLISEC 00014 */
    =00025 QW0199AX +4 , /* F - MAXIMUM I/O DELAY (IN MILLISEC 00018 */
    =00029 QW0199AP +4 , /* F - TOTAL I/O PAGES                0001C */
    =00033 QW0199AC +4 , /* F - TOTAL I/O COUNT                00020 */
    =00037 QW0199VP +4 , /* F - CURRENT PAGE COUNT - VIRTUAL P 00024 */
    =00041 QW0199VD +4 , /* F - CURRENT CHANGED PAGE COUNT - V 00028 */
    =00045 RSVD0002 +4 , /* F - RESERVED                       0002C */
    =00049 QW0199GP +4 , /* F - CURRENT NUMBER OF GET PAGES    00030 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0199DB = c2x(QW0199DB)
  hex_QW0199OB = c2x(QW0199OB)
  hex_QW0199DN = c2x(QW0199DN)
  hex_QW0199BP = c2x(QW0199BP)
  hex_QW0199DS = c2x(QW0199DS)
  hex_QW0199SV = c2x(QW0199SV)
  hex_QW0199SX = c2x(QW0199SX)
  hex_QW0199SP = c2x(QW0199SP)
  hex_QW0199AD = c2x(QW0199AD)
  hex_QW0199AX = c2x(QW0199AX)
  hex_QW0199AP = c2x(QW0199AP)
  hex_QW0199AC = c2x(QW0199AC)
  hex_QW0199VP = c2x(QW0199VP)
  hex_QW0199VD = c2x(QW0199VD)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0199GP = c2x(QW0199GP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0199",desired_dsect) > 0)) then do
    void_rc = queue_QW0199_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0199:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0199_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0199:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID                  x:" hex_QW0199DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET  ID                  x:" hex_QW0199OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PIECE/PART NUMBER            x:" hex_QW0199DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL ID               x:" hex_QW0199BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0199DS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AVERAGE I/O DELAY (IN MILLIS x:" hex_QW0199SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM I/O DELAY (IN MILLIS x:" hex_QW0199SX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL I/O PAGES              x:" hex_QW0199SP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AVERAGE I/O DELAY (IN MILLIS x:" hex_QW0199AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXIMUM I/O DELAY (IN MILLIS x:" hex_QW0199AX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL I/O PAGES              x:" hex_QW0199AP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL I/O COUNT              x:" hex_QW0199AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT PAGE COUNT - VIRTUAL x:" hex_QW0199VP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT CHANGED PAGE COUNT - x:" hex_QW0199VD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT NUMBER OF GET PAGES  x:" hex_QW0199GP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0200 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0200:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0200,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0200 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0200 ,
,/* =00001 QW0200ND +0 ,    C - NO DATA NEEDED FOR IFCID 200   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0200",desired_dsect) > 0)) then do
    void_rc = queue_QW0200_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0200:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0200_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0200:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0201 length is 00038
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0201:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0201,56)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0201 Length: 56"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0201 ,
    =00001 QW0201BP +2 , /* H - BUFFERPOOL INTERNAL ID (0-49,  00000 */
    =00003 QW0201CD +1 , /* C - COMMAND CODE (V or A)          00002 */
  ,     /* QW0201AV EQU x'00000000' ALTER BUFFERPOOL command         */
  ,     /* QW0201AA EQU x'000000C1' Buffer pool altered via AUTOSIZE */
    =00004 RSVD0001 +1 , /* X - RESERVED                       00003 */
    =00005 QW0201RT +4 , /* F - RETURN CODE ( = 0, SUCCESSFUL) 00004 */
    =00009 QW0201RE +4 , /* F - REASON CODE                    00008 */
    =00013 RSVD0002 +4 , /* X - RESERVED                       0000C */
    =00017 QW0201OP +4 , /* F - VIRTUAL POOL SIZE              00010 */
    =00021 RSVD0003 +4 , /* F - RESERVED                       00014 */
    =00025 QW0201OT +1 , /* X - VIRTUAL POOL SEQ THRESHOLD (0- 00018 */
    =00026 QW0201OZ +1 , /* C - AUTOSIZE attribute (Y or N)    00019 */
    =00027 QW0201OD +1 , /* X - VIRTUAL POOL DWT THRESHOLD (0- 0001A */
    =00028 QW0201OV +1 , /* X - VIRTUAL POOL VDWT THRESHOLD (0 0001B */
    =00029 QW0201OF +1 , /* C - PGFIX attribute (Y or N)       0001C */
  ,     /* QW0201Y EQU x'00000000' = Y, Long-term Page fix method is */
  ,     /* QW0201N EQU x'000000D5' = N, Long-term Page fix method is */
    =00030 QW0201OQ +1 , /* X - VPOOL PARALLEL SEQ THRESHOLD ( 0001D */
    =00031 QW0201OX +1 , /* X - VIRTUAL POOL ASSISTING PARALLE 0001E */
    =00032 RSVD0004 +1 , /* C - RESERVED                       0001F */
    =00033 QW0201OJ +2 , /* H - VDWQT threshold, in number of  00020 */
    =00035 QW0201OK +1 , /* C - PGSTEAL attribute (L or F)     00022 */
  ,     /* QW0201L EQU x'000000D3' = L, Page stealing method is to b */
  ,     /* QW0201F EQU x'000000C6' = F, Page stealing method is to b */
    =00036 RSVD0005 +1 , /* X - Reserved                       00023 */
    =00037 QW0201NP +4 , /* F - VIRTUAL POOL SIZE              00024 */
    =00041 RSVD0006 +4 , /* F - RESERVED                       00028 */
    =00045 QW0201NT +1 , /* X - VIRTUAL POOL SEQ THRESHOLD (0- 0002C */
    =00046 QW0201NZ +1 , /* C - AUTOSIZE attribute (Y or N)    0002D */
    =00047 QW0201ND +1 , /* X - VIRTUAL POOL DWT THRESHOLD (0- 0002E */
    =00048 QW0201NV +1 , /* X - VIRTUAL POOL VDWT THRESHOLD (0 0002F */
    =00049 QW0201NF +1 , /* C - PGFIX attribute (Y or N)       00030 */
    =00050 QW0201NQ +1 , /* X - VIRTUAL POOL PARALLEL SEQUENTI 00031 */
    =00051 QW0201NX +1 , /* X - VIRTUAL POOL ASSISTING PARALLE 00032 */
    =00052 RSVD0007 +1 , /* C - RESERVED                       00033 */
    =00053 QW0201NJ +2 , /* H - VDWQT threshold, in number of  00034 */
    =00055 QW0201NK +1 , /* C - PGSTEAL attribute (L or F)     00036 */
    =00056 RSVD0008 +1 , /* X - Reserved                       00037 */
    .           /* End of DSECT */
  /* next byte at 57 */
  hex_QW0201BP = c2x(QW0201BP)
  hex_QW0201CD = c2x(QW0201CD)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0201RT = c2x(QW0201RT)
  hex_QW0201RE = c2x(QW0201RE)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0201OP = c2x(QW0201OP)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0201OT = c2x(QW0201OT)
  hex_QW0201OZ = c2x(QW0201OZ)
  hex_QW0201OD = c2x(QW0201OD)
  hex_QW0201OV = c2x(QW0201OV)
  hex_QW0201OF = c2x(QW0201OF)
  hex_QW0201OQ = c2x(QW0201OQ)
  hex_QW0201OX = c2x(QW0201OX)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0201OJ = c2x(QW0201OJ)
  hex_QW0201OK = c2x(QW0201OK)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0201NP = c2x(QW0201NP)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0201NT = c2x(QW0201NT)
  hex_QW0201NZ = c2x(QW0201NZ)
  hex_QW0201ND = c2x(QW0201ND)
  hex_QW0201NV = c2x(QW0201NV)
  hex_QW0201NF = c2x(QW0201NF)
  hex_QW0201NQ = c2x(QW0201NQ)
  hex_QW0201NX = c2x(QW0201NX)
  hex_RSVD0007 = c2x(RSVD0007)
  hex_QW0201NJ = c2x(QW0201NJ)
  hex_QW0201NK = c2x(QW0201NK)
  hex_RSVD0008 = c2x(RSVD0008)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0201",desired_dsect) > 0)) then do
    void_rc = queue_QW0201_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0201:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0201_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0201:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFERPOOL INTERNAL ID (0-49 x:" hex_QW0201BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COMMAND CODE (V or A)        x:" hex_QW0201CD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE ( = 0, SUCCESSFU x:" hex_QW0201RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON CODE                  x:" hex_QW0201RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL SIZE            x:" hex_QW0201OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL SEQ THRESHOLD ( x:" hex_QW0201OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTOSIZE attribute (Y or N)  x:" hex_QW0201OZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL DWT THRESHOLD ( x:" hex_QW0201OD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL VDWT THRESHOLD  x:" hex_QW0201OV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PGFIX attribute (Y or N)     x:" hex_QW0201OF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VPOOL PARALLEL SEQ THRESHOLD x:" hex_QW0201OQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL ASSISTING PARAL x:" hex_QW0201OX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VDWQT threshold, in number o x:" hex_QW0201OJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PGSTEAL attribute (L or F)   x:" hex_QW0201OK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL SIZE            x:" hex_QW0201NP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL SEQ THRESHOLD ( x:" hex_QW0201NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AUTOSIZE attribute (Y or N)  x:" hex_QW0201NZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL DWT THRESHOLD ( x:" hex_QW0201ND
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL VDWT THRESHOLD  x:" hex_QW0201NV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PGFIX attribute (Y or N)     x:" hex_QW0201NF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL PARALLEL SEQUEN x:" hex_QW0201NQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VIRTUAL POOL ASSISTING PARAL x:" hex_QW0201NX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0007
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VDWQT threshold, in number o x:" hex_QW0201NJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PGSTEAL attribute (L or F)   x:" hex_QW0201NK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0008
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0203 length is 0004A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0203:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0203,74)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0203 Length: 74"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0203 ,
,/* =00001 QW0203FL +0 ,    C - Fixed length portion  of the t 00000 */
    =00001 QW0203LR +1 , /* C - Source of the decision -- L or 00000 */
  ,     /* QW0203SL EQU x'000000D3' Decision was local, via RECOVER  */
  ,     /* QW0203SR EQU x'000000D9' Decision was remote, via SNA Com */
    =00002 QW0203CA +1 , /* C - Decision reported -- C or A    00001 */
  ,     /* QW0203AC EQU x'000000C3' A COMMIT action was reported.    */
  ,     /* QW0203AA EQU x'000000C1' An ABORT action was reported.    */
    =00003 QW0203LO +16 , /* C - %U For remote decisions, the  00002 */
,/* =00019 QW0203LW +0 ,    C - The LUWID subfields for the Un 00012 */
    =00019 QW0203NT +8 , /* C - The NETID portion of the LUWID 00012 */
    =00027 QW0203LU +8 , /* C - The LUNAME portion of the LUWI 0001A */
    =00035 QW0203IN +6 , /* X - The instance number portion of 00022 */
    =00041 QW0203CM +2 , /* X - The commit count portion of th 00028 */
    =00043 QW0203UR +6 , /* X - The Recovery Log RBA (URID) fo 0002A */
    =00049 QW0203CO +16 , /* C - %U LOCATION or <LUNAME> of th 00030 */
    =00065 QW0203LO_Off +2 , /* H - Offset from QW0203 to      00040 */
    =00067 QW0203CO_Off +2 , /* H - Offset from QW0203 to      00042 */
    =00069 QW0203PA_Num +2 , /* H - Number of participant LOCA 00044 */
    =00071 QW0203PA_Off +2 , /* H - Offset from QW0203 to      00046 */
    =00073 QW0203LN +2 , /* X - The length of the string in QW 00048 */
,/* =00075 QW0203PA +0 ,    C - %U LOCATION names of the parti 0004A */
    =00001 QW0203LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0203LO_Var +0 ,    C - %U LOCATION of site that s 00002 */
    =00001 QW0203CO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0203CO_Var +0 ,    C - %U LOCATION of the coordin 00002 */
    =00001 QW0203PA_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0203PA_Var +0 ,    C - %U LOCATION of a participa 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0203LR = c2x(QW0203LR)
  hex_QW0203CA = c2x(QW0203CA)
  hex_QW0203LO = c2x(QW0203LO)
  hex_QW0203NT = c2x(QW0203NT)
  hex_QW0203LU = c2x(QW0203LU)
  hex_QW0203IN = c2x(QW0203IN)
  hex_QW0203CM = c2x(QW0203CM)
  hex_QW0203UR = c2x(QW0203UR)
  hex_QW0203CO = c2x(QW0203CO)
  hex_QW0203LO_Off = c2x(QW0203LO_Off)
  hex_QW0203CO_Off = c2x(QW0203CO_Off)
  hex_QW0203PA_Num = c2x(QW0203PA_Num)
  hex_QW0203PA_Off = c2x(QW0203PA_Off)
  hex_QW0203LN = c2x(QW0203LN)
  hex_QW0203LO_Len = c2x(QW0203LO_Len)
  hex_QW0203CO_Len = c2x(QW0203CO_Len)
  hex_QW0203PA_Len = c2x(QW0203PA_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0203",desired_dsect) > 0)) then do
    void_rc = queue_QW0203_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0203:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0203_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0203:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Source of the decision -- L  x:" hex_QW0203LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Decision reported -- C or A  x:" hex_QW0203CA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U For remote decisions, the x:" hex_QW0203LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0203NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0203LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0203IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0203CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0203UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0203CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0203 to        x:" hex_QW0203LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0203 to        x:" hex_QW0203CO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of participant LOCATI x:" hex_QW0203PA_Num
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0203 to        x:" hex_QW0203PA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the string in  x:" hex_QW0203LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0203LO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0203CO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0203PA_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0204 length is 000BE
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0204:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0204,190)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0204 Length: 190"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0204 ,
    =00001 QW0204LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
    =00017 QW0204OL +2 , /* X - Length of partner s old recove 00010 */
    =00019 QW0204OR +64 , /* X - Partner s old recovery log na 00012 */
    =00083 QW0204NL +2 , /* X - Length of partner s new recove 00052 */
    =00085 QW0204NR +64 , /* X - Partner s new recovery log na 00054 */
    =00149 QW0204TL +2 , /* X - The length of QW0204TH, which  00094 */
    =00151 RSVD0001 +2 , /* C - Reserved                       00096 */
,/* =00153 QW0204TH +0 ,    C - Information for the affected t 00098 */
    =00153 QW0204NT +8 , /* C - The NETID portion of the LUWID 00098 */
    =00161 QW0204LU +8 , /* C - The LUNAME portion of the LUWI 000A0 */
    =00169 QW0204IN +6 , /* X - The instance number portion of 000A8 */
    =00175 QW0204CM +2 , /* X - The commit count portion of th 000AE */
    =00177 QW0204TK +4 , /* X - The local TOKEN representing t 000B0 */
    =00181 QW0204UR +6 , /* X - The Recovery Log RBA (URID) fo 000B4 */
    =00187 QW0204RL +1 , /* C - The role of DB2 in the LUW --  000BA */
  ,     /* QW0204RC EQU x'000000C3' DB2 is the coordinator of this L */
  ,     /* QW0204RP EQU x'000000D7' DB2 is a participant in this LUW */
    =00188 QW0204TS +1 , /* C - The status of the local DB2 th 000BB */
  ,     /* QW0204TC EQU x'000000C3' Local status of unit of work is  */
  ,     /* QW0204TA EQU x'000000C1' Local status of unit of work is  */
  ,     /* QW0204TI EQU x'000000C9' Local status of unit of work is  */
    =00189 QW0204LO_Off +2 , /* H - Offset from QW0204 to      000BC */
    =00001 QW0204LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0204LO_Var +0 ,    C - %U LOCATION that COLD star 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0204LO = c2x(QW0204LO)
  hex_QW0204OL = c2x(QW0204OL)
  hex_QW0204OR = c2x(QW0204OR)
  hex_QW0204NL = c2x(QW0204NL)
  hex_QW0204NR = c2x(QW0204NR)
  hex_QW0204TL = c2x(QW0204TL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0204NT = c2x(QW0204NT)
  hex_QW0204LU = c2x(QW0204LU)
  hex_QW0204IN = c2x(QW0204IN)
  hex_QW0204CM = c2x(QW0204CM)
  hex_QW0204TK = c2x(QW0204TK)
  hex_QW0204UR = c2x(QW0204UR)
  hex_QW0204RL = c2x(QW0204RL)
  hex_QW0204TS = c2x(QW0204TS)
  hex_QW0204LO_Off = c2x(QW0204LO_Off)
  hex_QW0204LO_Len = c2x(QW0204LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0204",desired_dsect) > 0)) then do
    void_rc = queue_QW0204_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0204:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0204_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0204:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0204LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of partner s old reco x:" hex_QW0204OL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partner s old recovery log n x:" hex_QW0204OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of partner s new reco x:" hex_QW0204NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partner s new recovery log n x:" hex_QW0204NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of QW0204TH, whic x:" hex_QW0204TL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0204NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0204LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0204IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0204CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The local TOKEN representing x:" hex_QW0204TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0204UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The role of DB2 in the LUW - x:" hex_QW0204RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The status of the local DB2  x:" hex_QW0204TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0204 to        x:" hex_QW0204LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0204LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0205 length is 00122
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0205:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0205,290)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0205 Length: 290"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0205 ,
    =00001 QW0205LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
    =00017 QW0205OL +2 , /* X - Length of our recovery log nam 00010 */
    =00019 QW0205OR +64 , /* X - Our recovery log name.        00012 */
    =00083 QW0205NL +2 , /* X - Length of our recovery log nam 00052 */
    =00085 QW0205NR +64 , /* X - Our recovery log name as reme 00054 */
    =00149 QW0205WL +2 , /* X - Length of partner s recovery l 00094 */
    =00151 QW0205WR +64 , /* X - Partner s warm start recovery 00096 */
    =00215 QW0205PL +2 , /* X - Length of partner s previous r 000D6 */
    =00217 QW0205PR +64 , /* X - Partner s previous recovery l 000D8 */
    =00281 QW0205DP +2 , /* C - Protocol used previously as re 00118 */
    =00283 QW0205PP +2 , /* C - Protocol used previously as re 0011A */
  ,     /* QW0205PA EQU x'0000D7C1' Presumed Abort Protocol.         */
  ,     /* QW0205PN EQU x'0000D7D5' Presumed Nothing Protocol.       */
    =00285 QW0205DF +1 , /* C - How PS header byte two was use 0011C */
    =00286 QW0205PF +1 , /* C - How PS header byte two was use 0011D */
  ,     /* QW0205FL EQU x'000000C6' PS header byte two used as flag  */
  ,     /* QW0205NF EQU x'000000D5' PS header byte two not used as f */
    =00287 QW0205DC +1 , /* C - Whether the luname of the conv 0011E */
    =00288 QW0205PC +1 , /* C - Whether the luname of the conv 0011F */
  ,     /* QW0205EX EQU x'000000C5' Luname was exchanged in the prot */
  ,     /* QW0205NE EQU x'000000D5' Luname was not exchanged in the  */
    =00289 QW0205LO_Off +2 , /* H - Offset from QW0205 to      00120 */
    =00001 QW0205LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0205LO_Var +0 ,    C - %U LOCATION that WARM star 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0205LO = c2x(QW0205LO)
  hex_QW0205OL = c2x(QW0205OL)
  hex_QW0205OR = c2x(QW0205OR)
  hex_QW0205NL = c2x(QW0205NL)
  hex_QW0205NR = c2x(QW0205NR)
  hex_QW0205WL = c2x(QW0205WL)
  hex_QW0205WR = c2x(QW0205WR)
  hex_QW0205PL = c2x(QW0205PL)
  hex_QW0205PR = c2x(QW0205PR)
  hex_QW0205DP = c2x(QW0205DP)
  hex_QW0205PP = c2x(QW0205PP)
  hex_QW0205DF = c2x(QW0205DF)
  hex_QW0205PF = c2x(QW0205PF)
  hex_QW0205DC = c2x(QW0205DC)
  hex_QW0205PC = c2x(QW0205PC)
  hex_QW0205LO_Off = c2x(QW0205LO_Off)
  hex_QW0205LO_Len = c2x(QW0205LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0205",desired_dsect) > 0)) then do
    void_rc = queue_QW0205_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0205:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0205_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0205:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0205LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of our recovery log n x:" hex_QW0205OL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Our recovery log name.       x:" hex_QW0205OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of our recovery log n x:" hex_QW0205NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Our recovery log name as rem x:" hex_QW0205NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of partner s recovery x:" hex_QW0205WL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partner s warm start recover x:" hex_QW0205WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of partner s previous x:" hex_QW0205PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partner s previous recovery  x:" hex_QW0205PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Protocol used previously as  x:" hex_QW0205DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Protocol used previously as  x:" hex_QW0205PP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      How PS header byte two was u x:" hex_QW0205DF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      How PS header byte two was u x:" hex_QW0205PF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Whether the luname of the co x:" hex_QW0205DC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Whether the luname of the co x:" hex_QW0205PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0205 to        x:" hex_QW0205LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0205LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0206 length is 00328
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0206:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0206,808)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0206 Length: 808"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0206 ,
    =00001 QW0206LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
,/* =00017 QW0206TH +0 ,    C - Information associated with th 00010 */
    =00017 QW0206DI +12 , /* C - (S)                           00010 */
    =00029 QW0206NT +8 , /* C - The NETID portion of the LUWID 0001C */
    =00037 QW0206LU +8 , /* C - The LUNAME portion of the LUWI 00024 */
    =00045 QW0206IN +6 , /* X - The instance number portion of 0002C */
    =00051 QW0206CM +2 , /* X - The commit count portion of th 00032 */
    =00053 QW0206TK +4 , /* X - The local TOKEN representing t 00034 */
    =00057 QW0206UR +6 , /* X - The Recovery Log RBA (URID) fo 00038 */
    =00063 QW0206RL +1 , /* C - The role of DB2 in the LUW --  0003E */
  ,     /* QW0206RC EQU x'000000C3' DB2 is the coordinator of this L */
  ,     /* QW0206RP EQU x'000000D7' DB2 is a participant in this LUW */
    =00064 QW0206DT +1 , /* C - Which site detected the error  0003F */
  ,     /* QW0206DL EQU x'000000D3' The local site detected the erro */
  ,     /* QW0206DR EQU x'000000D9' The remote site detected the err */
,/* =00065 QW0206DC +0 ,    C - The Data Communications inform 00040 */
    =00065 QW0206FL +1 , /* X - Flags                          00040 */
  ,     /* QW0206SR EQU x'00000080' Last network operation was SEND  */
    =00066 QW0206PV +1 , /* X - (S)                            00041 */
    =00067 QW0206LS +2 , /* X - The length of the last message 00042 */
    =00069 QW0206MS +256 , /* C - The last message sent by thi 00044 */
    =00325 QW0206LR +2 , /* X - The length of the last message 00144 */
    =00327 QW0206MR +256 , /* C - The last message received by 00146 */
    =00583 QW0206VR +112 , /* C - The VTAM RPL associated with 00246 */
    =00695 QW0206VX +112 , /* C - The VTAM RPL Extension (ISTR 002B6 */
    =00807 QW0206LO_Off +2 , /* H - Offset from QW0206 to      00326 */
    =00001 QW0206LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0206LO_Var +0 ,    C - %U LOCATION with protocol  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0206LO = c2x(QW0206LO)
  hex_QW0206DI = c2x(QW0206DI)
  hex_QW0206NT = c2x(QW0206NT)
  hex_QW0206LU = c2x(QW0206LU)
  hex_QW0206IN = c2x(QW0206IN)
  hex_QW0206CM = c2x(QW0206CM)
  hex_QW0206TK = c2x(QW0206TK)
  hex_QW0206UR = c2x(QW0206UR)
  hex_QW0206RL = c2x(QW0206RL)
  hex_QW0206DT = c2x(QW0206DT)
  hex_QW0206FL = c2x(QW0206FL)
  hex_QW0206PV = c2x(QW0206PV)
  hex_QW0206LS = c2x(QW0206LS)
  hex_QW0206MS = c2x(QW0206MS)
  hex_QW0206LR = c2x(QW0206LR)
  hex_QW0206MR = c2x(QW0206MR)
  hex_QW0206VR = c2x(QW0206VR)
  hex_QW0206VX = c2x(QW0206VX)
  hex_QW0206LO_Off = c2x(QW0206LO_Off)
  hex_QW0206LO_Len = c2x(QW0206LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0206",desired_dsect) > 0)) then do
    void_rc = queue_QW0206_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0206:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0206_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0206:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0206LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0206DI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0206NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0206LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0206IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0206CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The local TOKEN representing x:" hex_QW0206TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0206UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The role of DB2 in the LUW - x:" hex_QW0206RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Which site detected the erro x:" hex_QW0206DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags                        x:" hex_QW0206FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0206PV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the last messa x:" hex_QW0206LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The last message sent by thi x:" hex_QW0206MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the last messa x:" hex_QW0206LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The last message received by x:" hex_QW0206MR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The VTAM RPL associated with x:" hex_QW0206VR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The VTAM RPL Extension (ISTR x:" hex_QW0206VX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0206 to        x:" hex_QW0206LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0206LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0207 length is 000F2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0207:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0207,242)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0207 Length: 242"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0207 ,
    =00001 QW0207HN +16 , /* C - %U Name (LOCATION or <LUNAME> 00000 */
    =00017 QW0207TN +16 , /* C - %U LOCATION name of this site 00010 */
    =00033 QW0207UN +16 , /* C - %U Name (LOCATION or <LUNAME> 00020 */
    =00049 QW0207CO +8 , /* C - For allied threads:            00030 */
,/* =00057 QW0207LW +0 ,    C - The LUWID subfields for the Un 00038 */
    =00057 QW0207NT +8 , /* C - The NETID portion of the LUWID 00038 */
    =00065 QW0207LU +8 , /* C - The LUNAME portion of the LUWI 00040 */
    =00073 QW0207IN +6 , /* X - The instance number portion of 00048 */
    =00079 QW0207CM +2 , /* X - The commit count portion of th 0004E */
    =00081 QW0207TK +4 , /* X - The local TOKEN associated wit 00050 */
    =00085 QW0207UI +6 , /* X - The Recovery Log RBA (URID) fo 00054 */
    =00091 QW0207RL +1 , /* C - The role of this site in the L 0005A */
  ,     /* QW0207RC EQU x'000000C3' This site is the coordinator of  */
  ,     /* QW0207RP EQU x'000000D7' This site is a participant in th */
  ,     /* QW0207RB EQU x'000000C2' This site is both a coordinator  */
    =00092 QW0207HA +1 , /* C - Heuristic damage site s action 0005B */
    =00093 QW0207TA +1 , /* C - This site s action -- C or A   0005C */
    =00094 QW0207UA +1 , /* C - Upstream site s action -- C, A 0005D */
  ,     /* QW0207AC EQU x'000000C3' Action -- COMMIT                 */
  ,     /* QW0207AA EQU x'000000C1' Action -- ABORT                  */
  ,     /* QW0207AU EQU x'00000000' Action -- Unknown                */
  ,     /* QW0207AN EQU x'00000040' No upstream site exists          */
    =00095 QW0207HL +2 , /* X - Length of the recovery log nam 0005E */
    =00097 QW0207HR +64 , /* X - Recovery log name (1-64 bytes 00060 */
    =00161 QW0207TL +2 , /* X - Length of the recovery log nam 000A0 */
    =00163 QW0207TR +8 , /* X - Recovery log name (1-8 bytes)  000A2 */
    =00171 QW0207UL +2 , /* X - Length of the recovery log nam 000AA */
    =00173 QW0207UR +64 , /* X - Recovery log name (1-64 bytes 000AC */
    =00237 QW0207HN_Off +2 , /* H - Offset from QW0207 to      000EC */
    =00239 QW0207TN_Off +2 , /* H - Offset from QW0207 to      000EE */
    =00241 QW0207UN_Off +2 , /* H - Offset from QW0207 to      000F0 */
    =00001 QW0207HN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0207HN_Var +0 ,    C - %U LOCATION of heuristic d 00002 */
    =00001 QW0207TN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0207TN_Var +0 ,    C - %U LOCATION name of this s 00002 */
    =00001 QW0207UN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0207UN_Var +0 ,    C - %U LOCATION of coordinator 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0207HN = c2x(QW0207HN)
  hex_QW0207TN = c2x(QW0207TN)
  hex_QW0207UN = c2x(QW0207UN)
  hex_QW0207CO = c2x(QW0207CO)
  hex_QW0207NT = c2x(QW0207NT)
  hex_QW0207LU = c2x(QW0207LU)
  hex_QW0207IN = c2x(QW0207IN)
  hex_QW0207CM = c2x(QW0207CM)
  hex_QW0207TK = c2x(QW0207TK)
  hex_QW0207UI = c2x(QW0207UI)
  hex_QW0207RL = c2x(QW0207RL)
  hex_QW0207HA = c2x(QW0207HA)
  hex_QW0207TA = c2x(QW0207TA)
  hex_QW0207UA = c2x(QW0207UA)
  hex_QW0207HL = c2x(QW0207HL)
  hex_QW0207HR = c2x(QW0207HR)
  hex_QW0207TL = c2x(QW0207TL)
  hex_QW0207TR = c2x(QW0207TR)
  hex_QW0207UL = c2x(QW0207UL)
  hex_QW0207UR = c2x(QW0207UR)
  hex_QW0207HN_Off = c2x(QW0207HN_Off)
  hex_QW0207TN_Off = c2x(QW0207TN_Off)
  hex_QW0207UN_Off = c2x(QW0207UN_Off)
  hex_QW0207HN_Len = c2x(QW0207HN_Len)
  hex_QW0207TN_Len = c2x(QW0207TN_Len)
  hex_QW0207UN_Len = c2x(QW0207UN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0207",desired_dsect) > 0)) then do
    void_rc = queue_QW0207_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0207:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0207_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0207:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Name (LOCATION or <LUNAME x:" hex_QW0207HN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION name of this sit x:" hex_QW0207TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Name (LOCATION or <LUNAME x:" hex_QW0207UN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      For allied threads:          x:" hex_QW0207CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0207NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0207LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0207IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0207CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The local TOKEN associated w x:" hex_QW0207TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0207UI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The role of this site in the x:" hex_QW0207RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Heuristic damage site s acti x:" hex_QW0207HA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      This site s action -- C or A x:" hex_QW0207TA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Upstream site s action -- C, x:" hex_QW0207UA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the recovery log n x:" hex_QW0207HL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Recovery log name (1-64 byte x:" hex_QW0207HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the recovery log n x:" hex_QW0207TL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Recovery log name (1-8 bytes x:" hex_QW0207TR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the recovery log n x:" hex_QW0207UL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Recovery log name (1-64 byte x:" hex_QW0207UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0207 to        x:" hex_QW0207HN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0207 to        x:" hex_QW0207TN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0207 to        x:" hex_QW0207UN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0207HN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0207TN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0207UN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0208 length is 0031E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0208:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0208,798)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0208 Length: 798"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0208 ,
    =00001 QW0208LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
,/* =00017 QW0208TH +0 ,    C - INFORMATION ASSOCIATED WITH TH 00010 */
    =00017 QW0208NT +8 , /* C - The NETID portion of the LUWID 00010 */
    =00025 QW0208LU +8 , /* C - The LUNAME portion of the LUWI 00018 */
    =00033 QW0208IN +6 , /* X - The instance number portion of 00020 */
    =00039 QW0208CM +2 , /* X - The commit count portion of th 00026 */
    =00041 QW0208TK +4 , /* X - The local TOKEN representing t 00028 */
    =00045 QW0208UR +6 , /* X - The Recovery Log RBA (URID) fo 0002C */
    =00051 QW0208RL +1 , /* C - The role of DB2 in the LUW --  00032 */
  ,     /* QW0208RC EQU x'000000C3' DB2 is the coordinator of this L */
  ,     /* QW0208RP EQU x'000000D7' DB2 is a participant in this LUW */
    =00052 QW0208DT +1 , /* C - Which site detected the error  00033 */
  ,     /* QW0208DL EQU x'000000D3' The local site detected the erro */
  ,     /* QW0208DR EQU x'000000D9' The remote site detected the err */
    =00053 QW0208TS +1 , /* C - The status of the local DB2 th 00034 */
  ,     /* QW0208TC EQU x'000000C3' Local status of unit of work is  */
  ,     /* QW0208TA EQU x'000000C1' Local status of unit of work is  */
  ,     /* QW0208TI EQU x'000000C9' Local status of unit of work is  */
    =00054 QW0208PS +1 , /* C - The assumed status of the remo 00035 */
  ,     /* QW0208PC EQU x'000000C3' Remote agent probably COMMITTED  */
  ,     /* QW0208PA EQU x'000000C1' Remote agent probably ABORTED    */
  ,     /* QW0208PI EQU x'000000C9' Remote agent is probably INDOUBT */
,/* =00055 QW0208DC +0 ,    C - The Data Communications inform 00036 */
    =00055 QW0208FL +1 , /* X - Flags                          00036 */
  ,     /* QW0208SR EQU x'00000080' Last network operation was SEND  */
    =00056 QW0208PV +1 , /* X - (S)                            00037 */
    =00057 QW0208LS +2 , /* X - The length of the last message 00038 */
    =00059 QW0208MS +256 , /* C - The last message sent by thi 0003A */
    =00315 QW0208LR +2 , /* X - The length of the last message 0013A */
    =00317 QW0208MR +256 , /* C - The last message received by 0013C */
    =00573 QW0208VR +112 , /* C - The VTAM RPL associated with 0023C */
    =00685 QW0208VX +112 , /* C - The VTAM RPL Extension (ISTR 002AC */
    =00797 QW0208LO_Off +2 , /* H - Offset from QW0208 to      0031C */
    =00001 QW0208LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0208LO_Var +0 ,    C - %U LOCATION with protocol  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0208LO = c2x(QW0208LO)
  hex_QW0208NT = c2x(QW0208NT)
  hex_QW0208LU = c2x(QW0208LU)
  hex_QW0208IN = c2x(QW0208IN)
  hex_QW0208CM = c2x(QW0208CM)
  hex_QW0208TK = c2x(QW0208TK)
  hex_QW0208UR = c2x(QW0208UR)
  hex_QW0208RL = c2x(QW0208RL)
  hex_QW0208DT = c2x(QW0208DT)
  hex_QW0208TS = c2x(QW0208TS)
  hex_QW0208PS = c2x(QW0208PS)
  hex_QW0208FL = c2x(QW0208FL)
  hex_QW0208PV = c2x(QW0208PV)
  hex_QW0208LS = c2x(QW0208LS)
  hex_QW0208MS = c2x(QW0208MS)
  hex_QW0208LR = c2x(QW0208LR)
  hex_QW0208MR = c2x(QW0208MR)
  hex_QW0208VR = c2x(QW0208VR)
  hex_QW0208VX = c2x(QW0208VX)
  hex_QW0208LO_Off = c2x(QW0208LO_Off)
  hex_QW0208LO_Len = c2x(QW0208LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0208",desired_dsect) > 0)) then do
    void_rc = queue_QW0208_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0208:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0208_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0208:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0208LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0208NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0208LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0208IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0208CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The local TOKEN representing x:" hex_QW0208TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0208UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The role of DB2 in the LUW - x:" hex_QW0208RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Which site detected the erro x:" hex_QW0208DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The status of the local DB2  x:" hex_QW0208TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The assumed status of the re x:" hex_QW0208PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags                        x:" hex_QW0208FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0208PV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the last messa x:" hex_QW0208LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The last message sent by thi x:" hex_QW0208MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the last messa x:" hex_QW0208LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The last message received by x:" hex_QW0208MR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The VTAM RPL associated with x:" hex_QW0208VR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The VTAM RPL Extension (ISTR x:" hex_QW0208VX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0208 to        x:" hex_QW0208LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0208LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0209 length is 00036
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0209:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0209,54)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0209 Length: 54"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0209 ,
    =00001 QW0209LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
,/* =00017 QW0209TH +0 ,    C - Information associated with th 00010 */
    =00017 QW0209NT +8 , /* C - The NETID portion of the LUWID 00010 */
    =00025 QW0209LU +8 , /* C - The LUNAME portion of the LUWI 00018 */
    =00033 QW0209IN +6 , /* X - The instance number portion of 00020 */
    =00039 QW0209CM +2 , /* X - The commit count portion of th 00026 */
    =00041 QW0209TK +4 , /* X - The local TOKEN representing t 00028 */
    =00045 QW0209UR +6 , /* X - The Recovery Log RBA (URID) fo 0002C */
    =00051 QW0209RL +1 , /* C - The role of DB2 in the LUW --  00032 */
  ,     /* QW0209RC EQU x'000000C3' DB2 is the coordinator of this L */
  ,     /* QW0209RP EQU x'000000D7' DB2 is a participant in this LUW */
    =00052 QW0209TS +1 , /* C - The status of the local DB2 th 00033 */
  ,     /* QW0209TC EQU x'000000C3' Local status of unit of work is  */
  ,     /* QW0209TA EQU x'000000C1' Local status of unit of work is  */
  ,     /* QW0209TI EQU x'000000C9' Local status of unit of work is  */
    =00053 QW0209LO_Off +2 , /* H - Offset from QW0209 to      00034 */
    =00001 QW0209LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0209LO_Var +0 ,    C - %U LOCATION with communica 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0209LO = c2x(QW0209LO)
  hex_QW0209NT = c2x(QW0209NT)
  hex_QW0209LU = c2x(QW0209LU)
  hex_QW0209IN = c2x(QW0209IN)
  hex_QW0209CM = c2x(QW0209CM)
  hex_QW0209TK = c2x(QW0209TK)
  hex_QW0209UR = c2x(QW0209UR)
  hex_QW0209RL = c2x(QW0209RL)
  hex_QW0209TS = c2x(QW0209TS)
  hex_QW0209LO_Off = c2x(QW0209LO_Off)
  hex_QW0209LO_Len = c2x(QW0209LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0209",desired_dsect) > 0)) then do
    void_rc = queue_QW0209_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0209:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0209_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0209:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0209LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0209NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0209LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0209IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0209CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The local TOKEN representing x:" hex_QW0209TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0209UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The role of DB2 in the LUW - x:" hex_QW0209RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The status of the local DB2  x:" hex_QW0209TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0209 to        x:" hex_QW0209LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0209LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0210 length is 00096
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0210:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0210,150)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0210 Length: 150"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0210 ,
    =00001 QW0210LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
    =00017 QW0210WL +2 , /* X - Length of partner s recovery l 00010 */
    =00019 QW0210WR +64 , /* X - Partner s warm start recovery 00012 */
    =00083 QW0210PL +2 , /* X - Length of partner s previous r 00052 */
    =00085 QW0210PR +64 , /* X - Partner s previous recovery l 00054 */
    =00149 QW0210LO_Off +2 , /* H - Offset from QW0210 to      00094 */
    =00001 QW0210LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0210LO_Var +0 ,    C - %U LOCATION that WARM star 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0210LO = c2x(QW0210LO)
  hex_QW0210WL = c2x(QW0210WL)
  hex_QW0210WR = c2x(QW0210WR)
  hex_QW0210PL = c2x(QW0210PL)
  hex_QW0210PR = c2x(QW0210PR)
  hex_QW0210LO_Off = c2x(QW0210LO_Off)
  hex_QW0210LO_Len = c2x(QW0210LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0210",desired_dsect) > 0)) then do
    void_rc = queue_QW0210_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0210:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0210_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0210:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0210LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of partner s recovery x:" hex_QW0210WL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partner s warm start recover x:" hex_QW0210WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of partner s previous x:" hex_QW0210PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partner s previous recovery  x:" hex_QW0210PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0210 to        x:" hex_QW0210LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0210LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0211 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0211:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0211,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0211 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0211 ,
,/* =00001 QW0211RN +0 ,    C - CLAIM RESOURCE NAME            00000 */
    =00001 QW0211DB +2 , /* X - () DATABASE ID                 00000 */
    =00003 QW0211PS +2 , /* X - () PAGESET OBID                00002 */
    =00005 QW0211PT +2 , /* X - () PARTITION NUMBER OF THE     00004 */
    =00007 QW0211RQ +1 , /* C - CLAIM REQUEST                  00006 */
  ,     /* QW0211A EQU x'000000C1' ACQUIRE CLAIM                     */
  ,     /* QW0211C EQU x'000000C3' CHANGE CLAIM DURATION             */
  ,     /* QW0211R EQU x'000000D9' RELEASE CLAIM                     */
    =00008 QW0211CC +1 , /* C - CLAIM CLASS                    00007 */
  ,     /* QW0211CS EQU x'000000C3' CURSOR STABILITY READ            */
  ,     /* QW0211RR EQU x'000000D9' REPEATABLE READ                  */
  ,     /* QW0211WR EQU x'00000000' WRITE                            */
    =00009 QW0211DU +1 , /* C - CLAIM DURATION                 00008 */
  ,     /* QW0211CM EQU x'000000C3' COMMIT DURATION                  */
  ,     /* QW0211HD EQU x'000000C8' HELD ACROSS COMMIT               */
  ,     /* QW0211AL EQU x'000000C1' ALLOCATION DURATION              */
  ,     /* QW0211RL EQU x'00000040' WHEN CLAIM IS RELEASED           */
    =00010 QW0211RC +1 , /* X - RESULT OF CLAIM REQUEST        00009 */
  ,     /* QW0211R0 EQU x'00000000' SUCCESSFUL                       */
  ,     /* QW0211R4 EQU x'00000004' LOGICAL CLAIM NEEDED             */
  ,     /* QW0211R8 EQU x'00000008' UNSUCCESSFUL                     */
    =00011 RSVD0001 +2 , /* C - RESERVED FOR FULL WORD BOUNDAR 0000A */
    =00013 QW0211RS +4 , /* F - REASON FOR UNSUCCESSFUL CLAIM  0000C */
  ,     /* QW0211RO EQU x'00C90080' RESOURCE IS STARTED FOR RO ACCES */
  ,     /* QW0211SP EQU x'00C90081' RESOURCE IS STOPPED              */
  ,     /* QW0211RU EQU x'00C90082' RESOURCE IS USED BY UTILITY      */
  ,     /* QW0211UR EQU x'00C90083' RESOURCE IS USED BY UTILITY      */
  ,     /* QW0211UT EQU x'00C90086' RESOURCE IS STARTED FOR UT ACCES */
  ,     /* QW0211DK EQU x'00C90088' DEADLOCK                         */
  ,     /* QW0211TO EQU x'00C9008E' TIME-OUT                         */
  ,     /* QW0211OT EQU x'00C90092' IRLM OUT-OF-STORAGE              */
  ,     /* QW0211ER EQU x'00C90093' IRLM ERROR                       */
  ,     /* QW0211IM EQU x'00C90097' RESOURCE HAS IMAGE COPY PENDING  */
  ,     /* QW0211RP EQU x'00C900A0' RESOURCE HAS RECOVERY PENDING    */
  ,     /* QW0211CP EQU x'00C900A3' RESOURCE HAS CHECK PENDING       */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0211DB = c2x(QW0211DB)
  hex_QW0211PS = c2x(QW0211PS)
  hex_QW0211PT = c2x(QW0211PT)
  hex_QW0211RQ = c2x(QW0211RQ)
  hex_QW0211CC = c2x(QW0211CC)
  hex_QW0211DU = c2x(QW0211DU)
  hex_QW0211RC = c2x(QW0211RC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0211RS = c2x(QW0211RS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0211",desired_dsect) > 0)) then do
    void_rc = queue_QW0211_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0211:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0211_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0211:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID               x:" hex_QW0211DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID              x:" hex_QW0211PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PARTITION NUMBER OF THE   x:" hex_QW0211PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLAIM REQUEST                x:" hex_QW0211RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLAIM CLASS                  x:" hex_QW0211CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLAIM DURATION               x:" hex_QW0211DU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESULT OF CLAIM REQUEST      x:" hex_QW0211RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FOR FULL WORD BOUND x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR UNSUCCESSFUL CLAI x:" hex_QW0211RS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0212 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0212:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0212,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0212 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0212 ,
,/* =00001 QW0212RN +0 ,    C - DRAIN RESOURCE NAME            00000 */
    =00001 QW0212DB +2 , /* X - () DATABASE ID                 00000 */
    =00003 QW0212PS +2 , /* X - () PAGESET OBID                00002 */
    =00005 QW0212PT +2 , /* X - () PARTITION NUMBER OF THE     00004 */
    =00007 QW0212RQ +1 , /* C - DRAIN REQUEST                  00006 */
  ,     /* QW0212D EQU x'000000C4' DRAIN                             */
  ,     /* QW0212R EQU x'000000D9' RELEASE DRAIN                     */
  ,     /* QW0212W EQU x'00000000' WAIT FOR CLAIMERS, ONLY           */
    =00008 QW0212CC +1 , /* C - CLAIM CLASS TO BE DRAINED      00007 */
  ,     /* QW0212CS EQU x'000000C3' CURSOR STABILITY READ            */
  ,     /* QW0212RR EQU x'000000D9' REPEATABLE READ                  */
  ,     /* QW0212WR EQU x'00000000' WRITE                            */
    =00009 QW0212MO +1 , /* C - MODE OF DRAIN LOCK REQUESTED   00008 */
  ,     /* QW0212MI EQU x'000000C9' INTENT EXECLUSIVE LOCK           */
  ,     /* QW0212MX EQU x'00000000' EXECLUSIVE LOCK                  */
  ,     /* QW0212MR EQU x'00000040' WHEN DRAIN IS RELEASED OR        */
    =00010 QW0212RC +1 , /* X - RESULT OF DRAIN REQUEST        00009 */
  ,     /* QW0212R0 EQU x'00000000' SUCCESSFUL                       */
  ,     /* QW0212R8 EQU x'00000008' UNSUCCESSFUL                     */
    =00011 RSVD0001 +2 , /* C - RESERVED FOR FULL WORD BOUNDAR 0000A */
    =00013 QW0212RS +4 , /* F - REASON FOR UNSUCCESSFUL DRAIN  0000C */
  ,     /* QW0212RO EQU x'00C200EA' TIME-OUT WAITING FOR CLAIM COUNT */
  ,     /* QW0212DK EQU x'00C90088' DEADLOCK                         */
  ,     /* QW0212TO EQU x'00C9008E' TIME-OUT                         */
  ,     /* QW0212OT EQU x'00C90092' IRLM OUT-OF-STORAGE              */
  ,     /* QW0212ER EQU x'00C90093' IRLM ERROR                       */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0212DB = c2x(QW0212DB)
  hex_QW0212PS = c2x(QW0212PS)
  hex_QW0212PT = c2x(QW0212PT)
  hex_QW0212RQ = c2x(QW0212RQ)
  hex_QW0212CC = c2x(QW0212CC)
  hex_QW0212MO = c2x(QW0212MO)
  hex_QW0212RC = c2x(QW0212RC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0212RS = c2x(QW0212RS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0212",desired_dsect) > 0)) then do
    void_rc = queue_QW0212_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0212:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0212_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0212:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID               x:" hex_QW0212DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID              x:" hex_QW0212PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PARTITION NUMBER OF THE   x:" hex_QW0212PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DRAIN REQUEST                x:" hex_QW0212RQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLAIM CLASS TO BE DRAINED    x:" hex_QW0212CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MODE OF DRAIN LOCK REQUESTED x:" hex_QW0212MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESULT OF DRAIN REQUEST      x:" hex_QW0212RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FOR FULL WORD BOUND x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR UNSUCCESSFUL DRAI x:" hex_QW0212RS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0213 length is 0002A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0213:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0213,42)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0213 Length: 42"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0213 ,
    =00001 QW0213LH +4 , /* X - LOCKED RESOURCE NAME HASH VALU 00000 */
,/* =00005 QW0213LK +0 ,    C - DB2 LOCK NAME COMPOSED OF:     00004 */
    =00005 QW0213KL +1 , /* G - ()LENGTH OF THE LOCK NAME      00004 */
    =00006 QW0213KQ +2 , /* C - ()LOCK QUALIFIER               00005 */
    =00008 QW0213KT +1 , /* X - ()LOCKED RESOURCE TYPE         00007 */
  ,     /* QW0213CS EQU x'00000014' CURSOR STABILITY DRAIN           */
  ,     /* QW0213RR EQU x'00000015' REPEATABLE READ DRAIN            */
  ,     /* QW0213WR EQU x'00000016' WRITE DRAIN                      */
,/* =00009 QW0213RN +0 ,    C - LOCKED RESOURCE NAME           00008 */
    =00009 QW0213DB +2 , /* X - () DATABASE ID                 00008 */
    =00011 QW0213PS +2 , /* X - () PAGESET OBID                0000A */
    =00013 QW0213PT +4 , /* X - () PARTITION NUMBER OF THE     0000C */
    =00017 RSVD0001 +20 , /* C - REST OF 28 BYTE RESOURCE NAME 00010 */
    =00037 QW0213FC +1 , /* X - IRLM FUNCTION CODE             00024 */
  ,     /* QW0213LO EQU x'00000002' LOCK FUNCTION                    */
  ,     /* QW0213UN EQU x'00000003' UNLOCK FUNCTION                  */
  ,     /* QW0213CH EQU x'00000004' CHANGE FUNCTION                  */
    =00038 QW0213ST +1 , /* X - LOCK STATE                     00025 */
  ,     /* QW0213S0 EQU x'00000000' (S)                              */
  ,     /* QW0213S1 EQU x'00000001' RESERVED                         */
  ,     /* QW0213S2 EQU x'00000002' INTENDED SHARE                   */
  ,     /* QW0213S3 EQU x'00000003' INTENDED EXCLUSIVE               */
  ,     /* QW0213S4 EQU x'00000004' SHARED                           */
  ,     /* QW0213S5 EQU x'00000005' UPDATE                           */
  ,     /* QW0213S6 EQU x'00000006' SHARED INTENT EXCLUSIVE          */
  ,     /* QW0213S7 EQU x'00000007' RESERVED                         */
  ,     /* QW0213S8 EQU x'00000008' EXCLUSIVE                        */
    =00039 QW0213DR +1 , /* X - LOCK DURATION                  00026 */
  ,     /* QW021320 EQU x'00000020' MANUAL                           */
  ,     /* QW021321 EQU x'00000021' MANUAL+1                         */
  ,     /* QW021340 EQU x'00000040' COMMIT                           */
  ,     /* QW021341 EQU x'00000041' COMMIT+1                         */
  ,     /* QW021360 EQU x'00000060' ALLOCATION                       */
  ,     /* QW021380 EQU x'00000080' PLAN                             */
  ,     /* QW0213FF EQU x'000000FF' DURATION TO FREE ALL LOCKS       */
    =00040 QW0213FL +1 , /* X - (S)                            00027 */
  ,     /* QW0213CD EQU x'00000080' (S)                              */
  ,     /* QW0213AQ EQU x'00000040' (S)                              */
  ,     /* QW0213US EQU x'00000020' (S)                              */
  ,     /* QW0213SY EQU x'00000010' (S)                              */
    =00041 QW0213WS +2 , /* C - REASON FOR THE SUSPEND         00028 */
  ,     /* QW0213W1 EQU x'0000D3C3' IRLM LATCH CONTENTION            */
  ,     /* QW0213W2 EQU x'0000D3D9' LOCAL RESOURCE CONTENTION        */
  ,     /* QW0213W3 EQU x'0000C7D9' (S)                              */
  ,     /* QW0213W4 EQU x'0000C9E2' Inter-system communication requi */
    .           /* End of DSECT */
  /* next byte at 43 */
  hex_QW0213LH = c2x(QW0213LH)
  hex_QW0213KL = c2x(QW0213KL)
  hex_QW0213KQ = c2x(QW0213KQ)
  hex_QW0213KT = c2x(QW0213KT)
  hex_QW0213DB = c2x(QW0213DB)
  hex_QW0213PS = c2x(QW0213PS)
  hex_QW0213PT = c2x(QW0213PT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0213FC = c2x(QW0213FC)
  hex_QW0213ST = c2x(QW0213ST)
  hex_QW0213DR = c2x(QW0213DR)
  hex_QW0213FL = c2x(QW0213FL)
  hex_QW0213WS = c2x(QW0213WS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0213",desired_dsect) > 0)) then do
    void_rc = queue_QW0213_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0213:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0213_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0213:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCKED RESOURCE NAME HASH VA x:" hex_QW0213LH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()LENGTH OF THE LOCK NAME    x:" hex_QW0213KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()LOCK QUALIFIER             x:" hex_QW0213KQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ()LOCKED RESOURCE TYPE       x:" hex_QW0213KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID               x:" hex_QW0213DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID              x:" hex_QW0213PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PARTITION NUMBER OF THE   x:" hex_QW0213PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REST OF 28 BYTE RESOURCE NAM x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IRLM FUNCTION CODE           x:" hex_QW0213FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK STATE                   x:" hex_QW0213ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCK DURATION                x:" hex_QW0213DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0213FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR THE SUSPEND       x:" hex_QW0213WS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0214 length is 00003
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0214:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0214,3)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0214 Length: 3"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0214 ,
    =00001 QW0214R +1 , /* C - REASON FOR RESUME               00000 */
  ,     /* QW0214D EQU x'000000C4' D = DEADLOCK                      */
  ,     /* QW0214N EQU x'000000D5' N = NORMAL RESUME                 */
  ,     /* QW0214T EQU x'00000000' T = TIMEOUT                       */
    =00002 QW0214SR +1 , /* X - Reason for the suspend - this  00001 */
  ,     /* QW0214W1 EQU x'00000080' IRLM latch contention            */
  ,     /* QW0214W2 EQU x'00000040' IRLM queued request              */
  ,     /* QW0214W3 EQU x'00000020' Local resource contention        */
  ,     /* QW0214W4 EQU x'00000010' (S)                              */
  ,     /* QW0214W5 EQU x'00000008' Intersystem communication requir */
  ,     /* QW0214W6 EQU x'00000004' (S)                              */
  ,     /* QW0214W7 EQU x'00000002' Inter-system message sending     */
  ,     /* QW0214W8 EQU x'00000001' (S)                              */
    =00003 QW0214XR +1 , /* X - Flags to determine the extent  00002 */
  ,     /* QW0214X1 EQU x'00000080' (S)                              */
  ,     /* QW0214X2 EQU x'00000040' (S)                              */
  ,     /* QW0214X3 EQU x'00000020' ON = MVS XES resource contention */
  ,     /* QW0214X4 EQU x'00000010' ON = IRLM global resource conten */
  ,     /* QW0214X5 EQU x'00000008' (S)                              */
  ,     /* QW0214X6 EQU x'00000004' (S)                              */
  ,     /* QW0214X7 EQU x'00000002' (S)                              */
  ,     /* QW0214X8 EQU x'00000001' (S)                              */
    .           /* End of DSECT */
  /* next byte at 4 */
  hex_QW0214R = c2x(QW0214R)
  hex_QW0214SR = c2x(QW0214SR)
  hex_QW0214XR = c2x(QW0214XR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0214",desired_dsect) > 0)) then do
    void_rc = queue_QW0214_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0214:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0214_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0214:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR RESUME            x:" hex_QW0214R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason for the suspend - thi x:" hex_QW0214SR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags to determine the exten x:" hex_QW0214XR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0215 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0215:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0215,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0215 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0215 ,
,/* =00001 QW0215RN +0 ,    C - DRAIN RESOURCE NAME            00000 */
    =00001 QW0215DB +2 , /* X - () DATABASE ID                 00000 */
    =00003 QW0215PS +2 , /* X - () PAGESET OBID                00002 */
    =00005 QW0215PT +2 , /* X - () PARTITION NUMBER OF THE     00004 */
    =00007 QW0215CC +1 , /* C - CLAIM CLASS TO BE DRAINED      00006 */
  ,     /* QW0215CS EQU x'000000C3' CURSOR STABILITY READ            */
  ,     /* QW0215RR EQU x'000000D9' REPEATABLE READ                  */
  ,     /* QW0215WR EQU x'00000000' WRITE                            */
    =00008 RSVD0001 +1 , /* C - RESERVED FOR FULL WORD BOUNDAR 00007 */
    =00009 QW0215CT +16 , /* X - NUMBER OF CLAIMS PENDING FOR  00008 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0215DB = c2x(QW0215DB)
  hex_QW0215PS = c2x(QW0215PS)
  hex_QW0215PT = c2x(QW0215PT)
  hex_QW0215CC = c2x(QW0215CC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0215CT = c2x(QW0215CT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0215",desired_dsect) > 0)) then do
    void_rc = queue_QW0215_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0215:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0215_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0215:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID               x:" hex_QW0215DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID              x:" hex_QW0215PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PARTITION NUMBER OF THE   x:" hex_QW0215PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLAIM CLASS TO BE DRAINED    x:" hex_QW0215CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FOR FULL WORD BOUND x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CLAIMS PENDING FOR x:" hex_QW0215CT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0216 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0216:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0216,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0216 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0216 ,
,/* =00001 QW0216RN +0 ,    C - DRAIN RESOURCE NAME            00000 */
    =00001 QW0216DB +2 , /* X - () DATABASE ID                 00000 */
    =00003 QW0216PS +2 , /* X - () PAGESET OBID                00002 */
    =00005 QW0216PT +2 , /* X - () PARTITION NUMBER OF THE     00004 */
    =00007 QW0216CC +1 , /* C - CLAIM CLASS TO BE DRAINED      00006 */
  ,     /* QW0216CS EQU x'000000C3' CURSOR STABILITY READ            */
  ,     /* QW0216RR EQU x'000000D9' REPEATABLE READ                  */
  ,     /* QW0216WR EQU x'00000000' WRITE                            */
    =00008 QW0216R +1 , /* C - REASON FOR RESUME               00007 */
  ,     /* QW0216TO EQU x'00000000' TIME-OUT                         */
  ,     /* QW0216OK EQU x'000000D5' NORMAL RESUME                    */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0216DB = c2x(QW0216DB)
  hex_QW0216PS = c2x(QW0216PS)
  hex_QW0216PT = c2x(QW0216PT)
  hex_QW0216CC = c2x(QW0216CC)
  hex_QW0216R = c2x(QW0216R)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0216",desired_dsect) > 0)) then do
    void_rc = queue_QW0216_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0216:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0216_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0216:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () DATABASE ID               x:" hex_QW0216DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PAGESET OBID              x:" hex_QW0216PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      () PARTITION NUMBER OF THE   x:" hex_QW0216PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLAIM CLASS TO BE DRAINED    x:" hex_QW0216CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON FOR RESUME            x:" hex_QW0216R
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0217HE length is 00048
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0217HE:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0217HE,72)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0217HE Length: 72"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0217HE ,
    =00001 QW0217AV +4 , /* F - AMOUNT OF AVAIL STORAGE        00000 */
    =00005 QW0217MV +4 , /* F - AMOUNT OF STORAGE FOR MVS USAG 00004 */
    =00009 QW0217CR +4 , /* F - STG RESRVED ONLY FOR MUST COMP 00008 */
    =00013 QW0217SO +4 , /* F - STORAGE CUSHION WARNING TO CON 0000C */
    =00017 QW0217AL +4 , /* F - TOTAL GETMAINED STACK STORAGE  00010 */
    =00021 QW0217GM +4 , /* F - TOTAL GETMAINED STORAGE BELOW  00014 */
    =00025 QW0217GA +8 , /* D - TOTAL GETMAINED STORAGE ABOVE  00018 */
    =00033 QW0217LO +4 , /* F - MVS 24 BIT LOW PRIVATE         00020 */
    =00037 QW0217HI +4 , /* F - MVS 24 BIT HIGH PRIVATE        00024 */
    =00041 QW0217EL +4 , /* F - MVS 31 BIT EXTENDED LOW PRIVAT 00028 */
    =00045 QW0217EH +4 , /* F - MVS 31 BIT EXTENDED HIGH PRIVA 0002C */
    =00049 QW0217RG +4 , /* F - MVS EXTENDED REGION SIZE (MAX) 00030 */
    =00053 QW0217EC +4 , /* F - MVS EXTENDED CSA SIZE          00034 */
    =00057 QW0217HF +1 , /* X - FLAG BITS IN THE HEADER        00038 */
  ,     /* QW021764 EQU x'00000080' THE ABOVE THE BAR DATA IS        */
    =00058 RSVD0001 +7 , /* C - Boundary holder                00039 */
    =00065 QW0217SG +8 , /* D - TOTAL VIRTUAL SHARED ALLOCATED 00040 */
,/* =00073 QW02170N +0 ,    C - END OF QW0217HE MAPPING        00048 */
    .           /* End of DSECT */
  /* next byte at 73 */
  hex_QW0217AV = c2x(QW0217AV)
  hex_QW0217MV = c2x(QW0217MV)
  hex_QW0217CR = c2x(QW0217CR)
  hex_QW0217SO = c2x(QW0217SO)
  hex_QW0217AL = c2x(QW0217AL)
  hex_QW0217GM = c2x(QW0217GM)
  hex_QW0217GA = c2x(QW0217GA)
  hex_QW0217LO = c2x(QW0217LO)
  hex_QW0217HI = c2x(QW0217HI)
  hex_QW0217EL = c2x(QW0217EL)
  hex_QW0217EH = c2x(QW0217EH)
  hex_QW0217RG = c2x(QW0217RG)
  hex_QW0217EC = c2x(QW0217EC)
  hex_QW0217HF = c2x(QW0217HF)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0217SG = c2x(QW0217SG)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0217HE",desired_dsect) > 0)) then do
    void_rc = queue_QW0217HE_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0217HE:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0217HE_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0217HE:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF AVAIL STORAGE      x:" hex_QW0217AV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF STORAGE FOR MVS US x:" hex_QW0217MV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STG RESRVED ONLY FOR MUST CO x:" hex_QW0217CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORAGE CUSHION WARNING TO C x:" hex_QW0217SO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED STACK STORAG x:" hex_QW0217AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED STORAGE BELO x:" hex_QW0217GM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED STORAGE ABOV x:" hex_QW0217GA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 24 BIT LOW PRIVATE       x:" hex_QW0217LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 24 BIT HIGH PRIVATE      x:" hex_QW0217HI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 31 BIT EXTENDED LOW PRIV x:" hex_QW0217EL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 31 BIT EXTENDED HIGH PRI x:" hex_QW0217EH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS EXTENDED REGION SIZE (MA x:" hex_QW0217RG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS EXTENDED CSA SIZE        x:" hex_QW0217EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BITS IN THE HEADER      x:" hex_QW0217HF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Boundary holder              x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL VIRTUAL SHARED ALLOCAT x:" hex_QW0217SG
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02172 length is 0002C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02172:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02172,44)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02172 Length: 44"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02172 ,
    =00001 QW0217PH +4 , /* F - (S)                            00000 */
    =00005 QW0217ST +4 , /* F - TOTAL STORAGE IN THE POOL      00004 */
    =00009 QW0217CL +1 , /* X - STORAGE CLASS                  00008 */
    =00010 QW0217BP +1 , /* X - MVS SUBPOOL                    00009 */
    =00011 QW0217FL +1 , /* X - FLAGS                          0000A */
  ,     /* QW0217FX EQU x'00000080' 1=FIXED-STORAGE POOL             */
  ,     /* QW0217VR EQU x'00000040' 1=VARIABLE-STORAGE POOL          */
  ,     /* QW0217LS EQU x'00000020' 1=MORE QW02172 DATA WILL FOLLOW  */
    =00012 RSVD0001 +1 , /* X - Not used                       0000B */
    =00013 QW0217DE +24 , /* C - STORAGE POOL DESCRIPTION      0000C */
    =00037 RSVD0002 +8 , /* C - Reserved                       00024 */
,/* =00045 QW02172N +0 ,    C - END OF QW02172 MAPPING         0002C */
    .           /* End of DSECT */
  /* next byte at 45 */
  hex_QW0217PH = c2x(QW0217PH)
  hex_QW0217ST = c2x(QW0217ST)
  hex_QW0217CL = c2x(QW0217CL)
  hex_QW0217BP = c2x(QW0217BP)
  hex_QW0217FL = c2x(QW0217FL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0217DE = c2x(QW0217DE)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02172",desired_dsect) > 0)) then do
    void_rc = queue_QW02172_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02172:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02172_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02172:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0217PH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STORAGE IN THE POOL    x:" hex_QW0217ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORAGE CLASS                x:" hex_QW0217CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS SUBPOOL                  x:" hex_QW0217BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0217FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORAGE POOL DESCRIPTION     x:" hex_QW0217DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02173 length is 00098
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02173:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02173,152)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02173 Length: 152"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02173 ,
    =00001 QW02173H +4 , /* F - (S)                            00000 */
    =00005 QW02173T +4 , /* F - TOTAL STORAGE IN THE POOL      00004 */
    =00009 QW02173L +1 , /* X - STORAGE CLASS                  00008 */
    =00010 QW02173P +1 , /* X - MVS SUBPOOL                    00009 */
    =00011 QW02173F +1 , /* X - FLAGS                          0000A */
  ,     /* QW02173X EQU x'00000080' 1=FIXED-STORAGE POOL             */
  ,     /* QW02173R EQU x'00000040' 1=VARIABLE-STORAGE POOL          */
  ,     /* QW02173S EQU x'00000020' 1=MORE QW02173 DATA WILL FOLLOW  */
  ,     /* QW02173A EQU x'00000010' 1=THIS IS A PARENT TASK FOR PARA */
  ,     /* QW02173I EQU x'00000008' 1=THIS IS A CHILD TASK FOR PARAL */
    =00012 RSVD0001 +1 , /* X - Not used                       0000B */
    =00013 QW02173C +4 , /* F - (S)                            0000C */
    =00017 RSVD0002 +8 , /* C - Reserved                       00010 */
    =00025 QW0217QR +12 , /* C - CORRELATION ID                00018 */
    =00037 QW0217QN +8 , /* C - CONNECTION NAME                00024 */
    =00045 QW0217QP +8 , /* C - PLAN NAME                      0002C */
    =00053 QW0217QD +16 , /* C - THE END USER S USERID AT THE  00034 */
    =00069 QW0217QX +32 , /* C - THE END USER S TRANSACTION NA 00044 */
    =00101 QW0217QW +18 , /* C - THE END USER S WORKSTATION NA 00064 */
    =00119 RSVD0003 +2 , /* X - Not used                       00076 */
    =00121 RSVD0004 +4 , /* C - Reserved                       00078 */
    =00125 RSVD0005 +2 , /* H - Reserved                       0007C */
    =00127 RSVD0006 +2 , /* H - Reserved                       0007E */
    =00129 QW0217QA +24 , /* C - %U Authorization ID           00080 */
,/* =00153 QW02173N +0 ,    C - END OF QW02173 MAPPING         00098 */
    .           /* End of DSECT */
  /* next byte at 153 */
  hex_QW02173H = c2x(QW02173H)
  hex_QW02173T = c2x(QW02173T)
  hex_QW02173L = c2x(QW02173L)
  hex_QW02173P = c2x(QW02173P)
  hex_QW02173F = c2x(QW02173F)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW02173C = c2x(QW02173C)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0217QR = c2x(QW0217QR)
  hex_QW0217QN = c2x(QW0217QN)
  hex_QW0217QP = c2x(QW0217QP)
  hex_QW0217QD = c2x(QW0217QD)
  hex_QW0217QX = c2x(QW0217QX)
  hex_QW0217QW = c2x(QW0217QW)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_RSVD0006 = c2x(RSVD0006)
  hex_QW0217QA = c2x(QW0217QA)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02173",desired_dsect) > 0)) then do
    void_rc = queue_QW02173_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02173:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02173_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02173:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW02173H
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STORAGE IN THE POOL    x:" hex_QW02173T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORAGE CLASS                x:" hex_QW02173L
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS SUBPOOL                  x:" hex_QW02173P
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW02173F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW02173C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CORRELATION ID               x:" hex_QW0217QR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTION NAME              x:" hex_QW0217QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0217QP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE END USER S USERID AT THE x:" hex_QW0217QD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE END USER S TRANSACTION N x:" hex_QW0217QX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE END USER S WORKSTATION N x:" hex_QW0217QW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0006
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Authorization ID          x:" hex_QW0217QA
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02174 length is 00028
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02174:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02174,40)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02174 Length: 40"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02174 ,
    =00001 QW02174D +4 , /* F - TOTAL DICTIONARY STORAGE       00000 */
    =00005 QW02174T +4 , /* F - TOTAL STORAGE IN THE AGENT LOC 00004 */
    =00009 QW02174A +4 , /* F - NUMBER OF ACTIVE ALLIED THREAD 00008 */
    =00013 QW02174C +4 , /* F - NUMBER OF CASTOUT ENGINES      0000C */
    =00017 QW02174E +4 , /* F - NUMBER OF P-LOCK/NOTIFY EXIT E 00010 */
    =00021 QW02174F +4 , /* F - NUMBER OF PREFETCH ENGINES     00014 */
    =00025 QW02174G +4 , /* F - NUMBER OF GBP WRITE ENGINES    00018 */
    =00029 QW02174W +4 , /* F - NUMBER OF DEFERRED WRITE ENGIN 0001C */
    =00033 RSVD0001 +8 , /* C - Reserved                       00020 */
,/* =00041 QW02174N +0 ,    C - END OF QW02174 MAPPING         00028 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW02174D = c2x(QW02174D)
  hex_QW02174T = c2x(QW02174T)
  hex_QW02174A = c2x(QW02174A)
  hex_QW02174C = c2x(QW02174C)
  hex_QW02174E = c2x(QW02174E)
  hex_QW02174F = c2x(QW02174F)
  hex_QW02174G = c2x(QW02174G)
  hex_QW02174W = c2x(QW02174W)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02174",desired_dsect) > 0)) then do
    void_rc = queue_QW02174_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02174:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02174_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02174:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL DICTIONARY STORAGE     x:" hex_QW02174D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STORAGE IN THE AGENT L x:" hex_QW02174T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ACTIVE ALLIED THRE x:" hex_QW02174A
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CASTOUT ENGINES    x:" hex_QW02174C
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF P-LOCK/NOTIFY EXIT x:" hex_QW02174E
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF PREFETCH ENGINES   x:" hex_QW02174F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF GBP WRITE ENGINES  x:" hex_QW02174G
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DEFERRED WRITE ENG x:" hex_QW02174W
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0218 length is 00009
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0218:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0218,9)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0218 Length: 9"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0218 ,
    =00001 QW0218CT +1 , /* C - Was there a successful lock av 00000 */
  ,     /* QW0218CY EQU x'00000000' Yes, there was a successful      */
  ,     /* QW0218CN EQU x'000000D5' No, there wasn t a successful    */
    =00002 RSVD0001 +1 , /* C - Reserved.                      00001 */
    =00003 QW0218N +2 , /* H - Number of table space subrecord 00002 */
,/* =00005 QW0218P +0 ,    C - Table space subrecord           00004 */
    =00005 QW0218PD +2 , /* C - Data base ID                   00004 */
    =00007 QW0218PP +2 , /* C - Table space ID (page set ID)   00006 */
    =00009 QW0218PC +1 , /* C - Was there a successful lock av 00008 */
    .           /* End of DSECT */
  /* next byte at 10 */
  hex_QW0218CT = c2x(QW0218CT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0218N = c2x(QW0218N)
  hex_QW0218PD = c2x(QW0218PD)
  hex_QW0218PP = c2x(QW0218PP)
  hex_QW0218PC = c2x(QW0218PC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0218",desired_dsect) > 0)) then do
    void_rc = queue_QW0218_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0218:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0218_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0218:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Was there a successful lock  x:" hex_QW0218CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved.                    x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of table space subrec x:" hex_QW0218N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Data base ID                 x:" hex_QW0218PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Table space ID (page set ID) x:" hex_QW0218PP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Was there a successful lock  x:" hex_QW0218PC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0219 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0219:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0219,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0219 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0219 ,
    =00001 QW0219LN +18 , /* C - LIST NAME                     00000 */
    =00019 QW0219LT +1 , /* C - LIST TYPE: T | I | M           00012 */
  ,     /* QW0219T EQU x'00000000' TABLE SPACE LIST                  */
  ,     /* QW0219I EQU x'000000C9' INDEX SPACE LIST                  */
  ,     /* QW0219M EQU x'000000D4' MIXED LIST                        */
    =00020 RSVD0001 +1 , /* C - RESERVED                       00013 */
    =00021 QW0219LS +4 , /* F - LIST SIZE                      00014 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0219LN = c2x(QW0219LN)
  hex_QW0219LT = c2x(QW0219LT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0219LS = c2x(QW0219LS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0219",desired_dsect) > 0)) then do
    void_rc = queue_QW0219_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0219:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0219_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0219:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LIST NAME                    x:" hex_QW0219LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LIST TYPE: T | I | M         x:" hex_QW0219LT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LIST SIZE                    x:" hex_QW0219LS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0220 length is 0005B
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0220:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0220,91)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0220 Length: 91"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0220 ,
    =00001 QW0220DD +8 , /* C - DD NAME PADDED W/BLANKS        00000 */
    =00009 QW0220DN +44 , /* C - DATA SET NAME PADDED W/BLANKS 00008 */
    =00053 QW0220TN +8 , /* C - TEMPLATE NAME IF TEMPLATE USED 00034 */
    =00061 QW0220RD +4 , /* F - NUMBER OF READS                0003C */
    =00065 QW0220WR +4 , /* F - NUMBER OF WRITES               00040 */
    =00069 QW0220CH +4 , /* F - NUMBER OF CHECKS               00044 */
    =00073 QW0220EV +4 , /* F - NUMBER OF EOVs                 00048 */
    =00077 QW0220WT +4 , /* F - I/O WAIT TIME IN MILISECONDS   0004C */
    =00081 QW0220OT +10 , /* C - OPEN TIME STAMP               00050 */
    =00091 QW0220DT +1 , /* C - DEVICE TYPE: D | T             0005A */
  ,     /* QW0220D EQU x'000000C4' DEVICE TYPE DISK                  */
  ,     /* QW0220T EQU x'00000000' DEVICE TYPE TAPE                  */
    .           /* End of DSECT */
  /* next byte at 92 */
  hex_QW0220DD = c2x(QW0220DD)
  hex_QW0220DN = c2x(QW0220DN)
  hex_QW0220TN = c2x(QW0220TN)
  hex_QW0220RD = c2x(QW0220RD)
  hex_QW0220WR = c2x(QW0220WR)
  hex_QW0220CH = c2x(QW0220CH)
  hex_QW0220EV = c2x(QW0220EV)
  hex_QW0220WT = c2x(QW0220WT)
  hex_QW0220OT = c2x(QW0220OT)
  hex_QW0220DT = c2x(QW0220DT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0220",desired_dsect) > 0)) then do
    void_rc = queue_QW0220_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0220:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0220_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0220:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DD NAME PADDED W/BLANKS      x:" hex_QW0220DD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET NAME PADDED W/BLANK x:" hex_QW0220DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TEMPLATE NAME IF TEMPLATE US x:" hex_QW0220TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF READS              x:" hex_QW0220RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF WRITES             x:" hex_QW0220WR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CHECKS             x:" hex_QW0220CH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF EOVs               x:" hex_QW0220EV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      I/O WAIT TIME IN MILISECONDS x:" hex_QW0220WT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPEN TIME STAMP              x:" hex_QW0220OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEVICE TYPE: D | T           x:" hex_QW0220DT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0221 length is 0005E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0221:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0221,94)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0221 Length: 94"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0221 ,
    =00001 QW0221LN +16 , /* C - %U Location name (RDB name)   00000 */
    =00017 QW0221PC +18 , /* C - %U Package collection id      00010 */
    =00035 QW0221PN +18 , /* C - %U Program name               00022 */
    =00053 QW0221TS +8 , /* C - Time-stamp                     00034 */
    =00061 QW0221SN +4 , /* F - Statement number...Same as     0003C */
    =00065 QW0221QN +2 , /* H - Query block number...Same as   00040 */
    =00067 QW0221GN +2 , /* H - Parallel group number          00042 */
    =00069 QW0221PD +2 , /* H - Planned (bind time) degree     00044 */
    =00071 QW0221RD +2 , /* H - Planned (run time) degree of   00046 */
    =00073 QW0221AD +2 , /* H - Actual (run time) degree of    00048 */
    =00075 QW0221NR +2 , /* H - Number of QW0221 records that  0004A */
    =00077 QW0221TR +2 , /* H - Number of this QW0221 record i 0004C */
    =00079 QW0221RN +1 , /* C - Reason for deriving the planne 0004E */
  ,     /* QW0221C0 EQU x'000000F0' Normal condition                 */
  ,     /* QW0221C1 EQU x'000000F1' Host variable partitioning       */
  ,     /* QW0221C2 EQU x'000000F2' No ESA sort support              */
  ,     /* QW0221C3 EQU x'000000F3' Cursor may be used in UPDATE/    */
  ,     /* QW0221C4 EQU x'000000F4' Empty parallel group             */
  ,     /* QW0221C5 EQU x'000000F5' MVS/ESA Enclave Services are not */
  ,     /* QW0221C6 EQU x'000000F6' (S) SPRMMDEG value was applied   */
    =00080 QW0221MO +1 , /* C - Resource exploitation          0004F */
  ,     /* QW0221CI EQU x'000000C9' I/O Bandwidth exploitation       */
  ,     /* QW0221CC EQU x'000000C3' CPU exploitation                 */
  ,     /* QW0221CX EQU x'00000000' Multi-CEC exploitation           */
    =00081 QW0221XC +4 , /* X - Number of members that query   00050 */
    =00085 QW0221N +2 , /* H - Number of repeating data sectio 00054 */
    =00087 QW0221TP +1 , /* C - Type of the repeating sections 00056 */
  ,     /* QW0221$D EQU x'000000C4' QW0221D data sections contained  */
  ,     /* QW0221$C EQU x'000000C3' QW0221C data sections contained  */
  ,     /* QW0221$E EQU x'000000C5' QW0221CD data sections contained */
    =00088 QW0221ZZ +1 , /* C - Type of partition for Lo/Hi pa 00057 */
  ,     /* QW0221ZL EQU x'000000D3' Logical - Lo/Hi pages            */
  ,     /* QW0221ZP EQU x'000000D7' Physical - Lo/Hi pages           */
  ,     /* QW0221ZN EQU x'00000000' Not Applicable - Lo/Hi pages     */
    =00089 QW0221LN_Off +2 , /* H - Offset from QW0221 to      00058 */
    =00091 QW0221PC_Off +2 , /* H - Offset from QW0221 to      0005A */
    =00093 QW0221PN_Off +2 , /* H - Offset from QW0221 to      0005C */
    =00001 QW0221LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0221LN_Var +0 ,    C - %U Location name (RDB name 00002 */
    =00001 QW0221PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0221PC_Var +0 ,    C - %U Package collection id   00002 */
    =00001 QW0221PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0221PN_Var +0 ,    C - %U Program name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0221LN = c2x(QW0221LN)
  hex_QW0221PC = c2x(QW0221PC)
  hex_QW0221PN = c2x(QW0221PN)
  hex_QW0221TS = c2x(QW0221TS)
  hex_QW0221SN = c2x(QW0221SN)
  hex_QW0221QN = c2x(QW0221QN)
  hex_QW0221GN = c2x(QW0221GN)
  hex_QW0221PD = c2x(QW0221PD)
  hex_QW0221RD = c2x(QW0221RD)
  hex_QW0221AD = c2x(QW0221AD)
  hex_QW0221NR = c2x(QW0221NR)
  hex_QW0221TR = c2x(QW0221TR)
  hex_QW0221RN = c2x(QW0221RN)
  hex_QW0221MO = c2x(QW0221MO)
  hex_QW0221XC = c2x(QW0221XC)
  hex_QW0221N = c2x(QW0221N)
  hex_QW0221TP = c2x(QW0221TP)
  hex_QW0221ZZ = c2x(QW0221ZZ)
  hex_QW0221LN_Off = c2x(QW0221LN_Off)
  hex_QW0221PC_Off = c2x(QW0221PC_Off)
  hex_QW0221PN_Off = c2x(QW0221PN_Off)
  hex_QW0221LN_Len = c2x(QW0221LN_Len)
  hex_QW0221PC_Len = c2x(QW0221PC_Len)
  hex_QW0221PN_Len = c2x(QW0221PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0221",desired_dsect) > 0)) then do
    void_rc = queue_QW0221_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0221:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0221_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0221:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name (RDB name)  x:" hex_QW0221LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection id     x:" hex_QW0221PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0221PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time-stamp                   x:" hex_QW0221TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement number...Same as   x:" hex_QW0221SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query block number...Same as x:" hex_QW0221QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Parallel group number        x:" hex_QW0221GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Planned (bind time) degree   x:" hex_QW0221PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Planned (run time) degree of x:" hex_QW0221RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual (run time) degree of  x:" hex_QW0221AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of QW0221 records tha x:" hex_QW0221NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of this QW0221 record x:" hex_QW0221TR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason for deriving the plan x:" hex_QW0221RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Resource exploitation        x:" hex_QW0221MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of members that query x:" hex_QW0221XC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of repeating data sec x:" hex_QW0221N
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of the repeating sectio x:" hex_QW0221TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of partition for Lo/Hi  x:" hex_QW0221ZZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0221 to        x:" hex_QW0221LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0221 to        x:" hex_QW0221PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0221 to        x:" hex_QW0221PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0221LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0221PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0221PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0221D length is 001E9
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0221D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0221D,489)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0221D Length: 489"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0221D ,
    =00001 QW0221PL +4 , /* X - Low bound of the page range    00000 */
    =00005 QW0221PH +4 , /* X - High bound of the page range   00004 */
    =00009 QW0221AN +1 , /* C - Status of this partition range 00008 */
  ,     /* QW0221D0 EQU x'000000F0' Normal condition                 */
  ,     /* QW0221D1 EQU x'000000F1' Empty partition range            */
    =00010 QW0221KL +240 , /* X - First 240 bytes of the low b 00009 */
    =00250 QW0221KH +240 , /* X - First 240 bytes of the high  000F9 */
    .           /* End of DSECT */
  /* next byte at 490 */
  hex_QW0221PL = c2x(QW0221PL)
  hex_QW0221PH = c2x(QW0221PH)
  hex_QW0221AN = c2x(QW0221AN)
  hex_QW0221KL = c2x(QW0221KL)
  hex_QW0221KH = c2x(QW0221KH)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0221D",desired_dsect) > 0)) then do
    void_rc = queue_QW0221D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0221D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0221D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0221D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Low bound of the page range  x:" hex_QW0221PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High bound of the page range x:" hex_QW0221PH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Status of this partition ran x:" hex_QW0221AN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      First 240 bytes of the low b x:" hex_QW0221KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      First 240 bytes of the high  x:" hex_QW0221KH
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0221C length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0221C:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0221C,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0221C Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0221C ,
    =00001 QW0221CL +2 , /* H - Total length of all QW0221CW   00000 */
    =00003 QW0221R1 +2 , /* H - Reserved                       00002 */
,/* =00005 QW0221CW +0 ,    C - Individual bpool constrained e 00004 */
    =00005 QW0221DB +2 , /* X - DBID (0 => Work file DBID)     00004 */
    =00007 QW0221PS +2 , /* X - PSID (0 => Work file PSID)     00006 */
    =00009 QW0221TY +1 , /* C - Type of pageset                00008 */
  ,     /* QW0221TB EQU x'00000000' Table space                      */
  ,     /* QW0221IN EQU x'000000C9' Index                            */
  ,     /* QW0221WF EQU x'00000000' Work file                        */
    =00010 QW0221BP +1 , /* X - Buffer pool id                 00009 */
    =00011 QW0221DN +2 , /* X - Number of QW0221CD sections th 0000A */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0221CL = c2x(QW0221CL)
  hex_QW0221R1 = c2x(QW0221R1)
  hex_QW0221DB = c2x(QW0221DB)
  hex_QW0221PS = c2x(QW0221PS)
  hex_QW0221TY = c2x(QW0221TY)
  hex_QW0221BP = c2x(QW0221BP)
  hex_QW0221DN = c2x(QW0221DN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0221C",desired_dsect) > 0)) then do
    void_rc = queue_QW0221C_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0221C:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0221C_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0221C:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total length of all QW0221CW x:" hex_QW0221CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0221R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID (0 => Work file DBID)   x:" hex_QW0221DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PSID (0 => Work file PSID)   x:" hex_QW0221PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of pageset              x:" hex_QW0221TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Buffer pool id               x:" hex_QW0221BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of QW0221CD sections  x:" hex_QW0221DN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0221CD length is 0000D
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0221CD:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0221CD,13)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0221CD Length: 13"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0221CD ,
    =00001 QW0221DL +2 , /* H - Total length of all QW0221CZ   00000 */
    =00003 QW0221R2 +2 , /* H - Reserved                       00002 */
,/* =00005 QW0221CZ +0 ,    C - Individual constrained DB2 ent 00004 */
    =00005 QW0221MN +8 , /* C - DB2 member name                00004 */
    =00013 QW0221CS +1 , /* C - Constrained                    0000C */
  ,     /* QW0221CY EQU x'00000000' This buffer pool on this DB2 is  */
  ,     /* QW0221CN EQU x'000000D5' This buffer pool on this DB2 is  */
    .           /* End of DSECT */
  /* next byte at 14 */
  hex_QW0221DL = c2x(QW0221DL)
  hex_QW0221R2 = c2x(QW0221R2)
  hex_QW0221MN = c2x(QW0221MN)
  hex_QW0221CS = c2x(QW0221CS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0221CD",desired_dsect) > 0)) then do
    void_rc = queue_QW0221CD_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0221CD:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0221CD_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0221CD:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total length of all QW0221CZ x:" hex_QW0221DL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0221R2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 member name              x:" hex_QW0221MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Constrained                  x:" hex_QW0221CS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0222 length is 0006E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0222:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0222,110)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0222 Length: 110"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0222 ,
    =00001 QW0222LN +16 , /* C - %U Location name (RDB name)   00000 */
    =00017 QW0222PC +18 , /* C - %U Package collection id      00010 */
    =00035 QW0222PN +18 , /* C - %U Program name               00022 */
    =00053 QW0222TS +8 , /* C - Time-stamp (consistency token) 00034 */
    =00061 QW0222SN +4 , /* F - Statement number... Same as    0003C */
    =00065 QW0222PR +4 , /* F - (S)                            00040 */
    =00069 QW0222QN +2 , /* H - Query block number             00044 */
    =00071 QW0222GN +2 , /* H - Parallel group number          00046 */
    =00073 QW0222PS +10 , /* C - Time of pipe creation         00048 */
    =00083 QW0222PE +10 , /* C - Time of pipe termination      00052 */
    =00093 QW0222OD +2 , /* H - (S)                            0005C */
    =00095 QW0222CS +2 , /* H - (S)                            0005E */
    =00097 QW0222FM +2 , /* H - (S)                            00060 */
  ,     /* QW02220 EQU x'00000000' (S)                               */
  ,     /* QW02221 EQU x'00000001' (S)                               */
  ,     /* QW02222 EQU x'00000002' (S)                               */
  ,     /* QW02223 EQU x'00000003' (S)                               */
  ,     /* QW02224 EQU x'00000004' (S)                               */
  ,     /* QW02225 EQU x'00000005' (S)                               */
    =00099 QW0222RN +2 , /* H - Number of QW0222SP entries in  00062 */
    =00101 QW0222NR +2 , /* H - Number of QW0222SP records     00064 */
    =00103 QW0222TR +2 , /* H - Number of the QW0222 record in 00066 */
    =00105 QW0222LN_Off +2 , /* H - Offset from QW0222 to      00068 */
    =00107 QW0222PC_Off +2 , /* H - Offset from QW0222 to      0006A */
    =00109 QW0222PN_Off +2 , /* H - Offset from QW0222 to      0006C */
    =00001 QW0222LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0222LN_Var +0 ,    C - %U Location name (RDB name 00002 */
    =00001 QW0222PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0222PC_Var +0 ,    C - %U Package collection id   00002 */
    =00001 QW0222PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0222PN_Var +0 ,    C - %U Program name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0222LN = c2x(QW0222LN)
  hex_QW0222PC = c2x(QW0222PC)
  hex_QW0222PN = c2x(QW0222PN)
  hex_QW0222TS = c2x(QW0222TS)
  hex_QW0222SN = c2x(QW0222SN)
  hex_QW0222PR = c2x(QW0222PR)
  hex_QW0222QN = c2x(QW0222QN)
  hex_QW0222GN = c2x(QW0222GN)
  hex_QW0222PS = c2x(QW0222PS)
  hex_QW0222PE = c2x(QW0222PE)
  hex_QW0222OD = c2x(QW0222OD)
  hex_QW0222CS = c2x(QW0222CS)
  hex_QW0222FM = c2x(QW0222FM)
  hex_QW0222RN = c2x(QW0222RN)
  hex_QW0222NR = c2x(QW0222NR)
  hex_QW0222TR = c2x(QW0222TR)
  hex_QW0222LN_Off = c2x(QW0222LN_Off)
  hex_QW0222PC_Off = c2x(QW0222PC_Off)
  hex_QW0222PN_Off = c2x(QW0222PN_Off)
  hex_QW0222LN_Len = c2x(QW0222LN_Len)
  hex_QW0222PC_Len = c2x(QW0222PC_Len)
  hex_QW0222PN_Len = c2x(QW0222PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0222",desired_dsect) > 0)) then do
    void_rc = queue_QW0222_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0222:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0222_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0222:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name (RDB name)  x:" hex_QW0222LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection id     x:" hex_QW0222PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0222PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time-stamp (consistency toke x:" hex_QW0222TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement number... Same as  x:" hex_QW0222SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query block number           x:" hex_QW0222QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Parallel group number        x:" hex_QW0222GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of pipe creation        x:" hex_QW0222PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of pipe termination     x:" hex_QW0222PE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222OD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222FM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of QW0222SP entries i x:" hex_QW0222RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of QW0222SP records   x:" hex_QW0222NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of the QW0222 record  x:" hex_QW0222TR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0222 to        x:" hex_QW0222LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0222 to        x:" hex_QW0222PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0222 to        x:" hex_QW0222PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0222LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0222PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0222PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0222N length is 00030
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0222N:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0222N,48)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0222N Length: 48"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0222N ,
    =00001 QW0222NM +2 , /* C - Total length of all QW0222SP   00000 */
    =00003 QW0222RE +2 , /* C - Reserved.                      00002 */
,/* =00005 QW0222SP +0 ,    C - Individual subpipe entry       00004 */
    =00005 QW0222SS +10 , /* C - Time of sub pipe creation     00004 */
    =00015 QW0222SE +10 , /* C - Time of sub pipe termination  0000E */
    =00025 QW0222SR +4 , /* F - (S)                            00018 */
    =00029 QW0222OR +4 , /* F - (S)                            0001C */
    =00033 QW0222CT +4 , /* F - (S)                            00020 */
    =00037 QW0222TK +4 , /* F - Task token associated with thi 00024 */
    =00041 QW0222SM +8 , /* C - DB2 member name supplying the  00028 */
    .           /* End of DSECT */
  /* next byte at 49 */
  hex_QW0222NM = c2x(QW0222NM)
  hex_QW0222RE = c2x(QW0222RE)
  hex_QW0222SS = c2x(QW0222SS)
  hex_QW0222SE = c2x(QW0222SE)
  hex_QW0222SR = c2x(QW0222SR)
  hex_QW0222OR = c2x(QW0222OR)
  hex_QW0222CT = c2x(QW0222CT)
  hex_QW0222TK = c2x(QW0222TK)
  hex_QW0222SM = c2x(QW0222SM)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0222N",desired_dsect) > 0)) then do
    void_rc = queue_QW0222N_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0222N:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0222N_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0222N:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total length of all QW0222SP x:" hex_QW0222NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved.                    x:" hex_QW0222RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of sub pipe creation    x:" hex_QW0222SS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of sub pipe termination x:" hex_QW0222SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222SR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0222CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task token associated with t x:" hex_QW0222TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 member name supplying th x:" hex_QW0222SM
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0223 length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0223:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0223,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0223 Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0223 ,
,/* =00001 QW0223U +0 ,    C - (S) Requesting work unit ID     00000 */
    =00001 QW0223UA +2 , /* H - (S)                            00000 */
    =00003 QW0223UW +2 , /* H - (S)                            00002 */
    =00005 QW0223UE +4 , /* F - (S)                            00004 */
,/* =00009 QW0223O +0 ,    C - (S) Owning work unit ID         00008 */
    =00009 QW0223OA +2 , /* H - (S)                            00008 */
    =00011 QW0223OW +2 , /* H - (S)                            0000A */
    =00013 QW0223OC +4 , /* F - (S)                            0000C */
    =00017 QW0223CL +1 , /* X - (S) The successful lock avoida 00010 */
  ,     /* QW0223C0 EQU x'00000000' (S) A type of lock avoidance tec */
  ,     /* QW0223C1 EQU x'00000001' (S) A type of lock avoidance tec */
    =00018 QW0223KT +1 , /* X - Flags for the resource type    00011 */
  ,     /* QW0223L0 EQU x'00000000' X 00  = data page                */
  ,     /* QW0223L1 EQU x'00000018' X 18  = ROW LOCK                 */
  ,     /* QW0223MI EQU x'00000019' X 19  = INDEX END-OF-FILE LOCK   */
    =00019 RSVD0001 +2 , /* X - Reserved.                      00012 */
,/* =00021 QW0223RN +0 ,    C - Resource name                  00014 */
    =00021 QW0223KD +2 , /* C - - data base ID                 00014 */
    =00023 QW0223KP +2 , /* C - - page set OBID or table recor 00016 */
,/* =00025 QW0223KR +0 ,    C - - ID of small resource         00018 */
    =00025 QW0223K1 +3 , /* C - - page number if not large TS  00018 */
    =00028 QW0223K2 +1 , /* X - - Row ID (RID) if not large TS 0001B */
    =00029 RSVD0002 +1 , /* X -                                0001C */
  ,
  ,/*00029 __no__name__ ORG - QW0223KR - x'00000018'           0001D */
,/* =00025 QW0223KY +0 ,    C - ID of small resource when QW02 00018 */
    =00025 QW0223K4 +4 , /* C - page number                    00018 */
    =00029 QW0223K5 +1 , /* X - record id within page          0001C */
    =00030 QW0223TY +1 , /* C - Type of table space            0001D */
  ,     /* QW0223TN EQU x'000000D5' Non large table space            */
  ,     /* QW0223TL EQU x'000000D3' NON-EA 5-BYTE RID TABLE SPACE    */
  ,     /* QW0223TV EQU x'00000000' EA-ENABLED 5-BYTE RID TABLE SPAC */
    =00031 RSVD0003 +2 , /* X -                                0001E */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QW0223UA = c2x(QW0223UA)
  hex_QW0223UW = c2x(QW0223UW)
  hex_QW0223UE = c2x(QW0223UE)
  hex_QW0223OA = c2x(QW0223OA)
  hex_QW0223OW = c2x(QW0223OW)
  hex_QW0223OC = c2x(QW0223OC)
  hex_QW0223CL = c2x(QW0223CL)
  hex_QW0223KT = c2x(QW0223KT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0223KD = c2x(QW0223KD)
  hex_QW0223KP = c2x(QW0223KP)
  hex_QW0223K1 = c2x(QW0223K1)
  hex_QW0223K2 = c2x(QW0223K2)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0223K4 = c2x(QW0223K4)
  hex_QW0223K5 = c2x(QW0223K5)
  hex_QW0223TY = c2x(QW0223TY)
  hex_RSVD0003 = c2x(RSVD0003)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0223",desired_dsect) > 0)) then do
    void_rc = queue_QW0223_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0223:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0223_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0223:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0223UA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0223UW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0223UE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0223OA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0223OW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0223OC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) The successful lock avoi x:" hex_QW0223CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags for the resource type  x:" hex_QW0223KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved.                    x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      - data base ID               x:" hex_QW0223KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      - page set OBID or table rec x:" hex_QW0223KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      - page number if not large T x:" hex_QW0223K1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      - Row ID (RID) if not large  x:" hex_QW0223K2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      page number                  x:" hex_QW0223K4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      record id within page        x:" hex_QW0223K5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of table space          x:" hex_QW0223TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0003
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0224 length is 00022
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0224:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0224,34)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0224 Length: 34"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0224 ,
    =00001 QW0224CL +4 , /* F - TOTAL NUMBER OF COLUMNS (ROWS  00000 */
    =00005 QW0224PN +8 , /* C - %U PLAN OR PACKAGE NAME        00004 */
    =00013 QW0224CI +18 , /* C - %U PACKAGE COLLECTION ID IF Q 0000C */
    =00031 QW0224PN_Off +2 , /* H - Offset from QW0224 to      0001E */
    =00033 QW0224CI_Off +2 , /* H - Offset from QW0224 to      00020 */
    =00001 QW0224PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0224PN_Var +0 ,    C - %U PLAN OR PACKAGE NAME    00002 */
    =00001 QW0224CI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0224CI_Var +0 ,    C - %U PACKAGE COLLECTION ID   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0224CL = c2x(QW0224CL)
  hex_QW0224PN = c2x(QW0224PN)
  hex_QW0224CI = c2x(QW0224CI)
  hex_QW0224PN_Off = c2x(QW0224PN_Off)
  hex_QW0224CI_Off = c2x(QW0224CI_Off)
  hex_QW0224PN_Len = c2x(QW0224PN_Len)
  hex_QW0224CI_Len = c2x(QW0224CI_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0224",desired_dsect) > 0)) then do
    void_rc = queue_QW0224_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0224:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0224_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0224:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL NUMBER OF COLUMNS (ROW x:" hex_QW0224CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PLAN OR PACKAGE NAME      x:" hex_QW0224PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PACKAGE COLLECTION ID IF  x:" hex_QW0224CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0224 to        x:" hex_QW0224PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0224 to        x:" hex_QW0224CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0224PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0224CI_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0225 length is 000FA
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0225:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0225,250)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0225 Length: 250"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0225 ,
    =00001 QW0225AL +4 , /* F - TOTAL AGENT LOCAL POOL STORAGE 00000 */
    =00005 QW0225AS +4 , /* F - TOTAL AGENT SYSTEM STORAGE     00004 */
    =00009 QW0225AV +4 , /* F - AMOUNT OF AVAIL STORAGE        00008 */
    =00013 QW0225CD +4 , /* F - TOTAL COMPRESS DICTIONARY STOR 0000C */
    =00017 QW0225CR +4 , /* F - STG RSRVD ONLY FOR MUST COMPLE 00010 */
    =00021 QW0225FX +4 , /* F - TOTAL FIXED STORAGE BELOW THE  00014 */
    =00025 QW0225GM +4 , /* F - TOTAL GETMAINED STORAGE BELOW  00018 */
    =00029 QW0225GS +4 , /* F - TOTAL GETMAINED STACK STORAGE  0001C */
    =00033 QW0225MV +4 , /* F - AMOUNT OF STORAGE FOR MVS USAG 00020 */
    =00037 QW0225PM +4 , /* F - TOTAL PIPE MANAGER SUBPOOL STO 00024 */
    =00041 QW0225RO +4 , /* F - TOTAL RDS OP POOL STORAGE      00028 */
    =00045 QW0225RP +4 , /* F - TOTAL RID POOL STORAGE         0002C */
    =00049 QW0225SB +4 , /* F - TOTAL STATEMENT CACHE BLOCK ST 00030 */
    =00053 QW0225SC +4 , /* F - TOTAL STORAGE FOR THREAD COPIE 00034 */
    =00057 QW0225SO +4 , /* F - STG CUSHION WARNING TO CONTRAC 00038 */
    =00061 QW0225TT +4 , /* F - TOTAL BM/DM INTERNAL TRACE     0003C */
    =00065 QW0225VR +4 , /* F - TOTAL VARIABLE STORAGE BELOW T 00040 */
    =00069 QW0225AT +4 , /* F - # OF ACTIVE ALLIED THREADS     00044 */
    =00073 QW0225CE +4 , /* F - # OF CASTOUT ENGINES           00048 */
    =00077 QW0225DW +4 , /* F - # OF DEFERRED WRITE ENGINES    0004C */
    =00081 QW0225GW +4 , /* F - # OF GBP WRITE ENGINES         00050 */
    =00085 QW0225PF +4 , /* F - # OF PREFETCH ENGINES          00054 */
    =00089 QW0225PL +4 , /* F - # OF P-LOCK/NOTIFY EXIT ENGINE 00058 */
    =00093 QW0225LO +4 , /* F - MVS 24 BIT LOW PRIVATE         0005C */
    =00097 QW0225HI +4 , /* F - MVS 24 BIT HIGH PRIVATE        00060 */
    =00101 QW0225EL +4 , /* F - MVS 31 BIT EXTENDED LOW PRIVAT 00064 */
    =00105 QW0225EH +4 , /* F - MVS 31 BIT EXTENDED HIGH PRIVA 00068 */
    =00109 QW0225RG +4 , /* F - MVS EXTENDED REGION SIZE (MAX) 0006C */
    =00113 QW0225EC +4 , /* F - MVS EXTENDED CSA SIZE          00070 */
    =00117 QW0225BB +4 , /* F - TOTAL BUFFER MANAGER STORAGE B 00074 */
    =00121 QW0225FA +8 , /* D - TOTAL FIXED STORAGE ABOVE THE  00078 */
    =00129 QW0225GA +8 , /* D - TOTAL GETMAINED STORAGE ABOVE  00080 */
    =00137 QW0225VA +8 , /* D - TOTAL VARIABLE STORAGE ABOVE T 00088 */
    =00145 QW0225SJ +8 , /* D - (S)                            00090 */
    =00153 QW0225RL +4 , /* F - Number of real frames (4K) in  00098 */
    =00157 QW0225AX +4 , /* F - Number of auxiliary slots (4k) 0009C */
    =00161 QW0225LC +4 , /* F - # OF statements in CACHED SQL  000A0 */
    =00165 QW0225LS +4 , /* F - Allocated storage for thread c 000A4 */
    =00169 QW0225HS +4 , /* F - High water mark allocated stor 000A8 */
    =00173 QW0225HC +4 , /* F - High water mark # of statement 000AC */
    =00177 QW0225HT +8 , /* C - Timestamp at high water        000B0 */
    =00185 QW0225SF +8 , /* D - TOTAL FIXED VIRTUAL 64BIT SHAR 000B8 */
    =00193 QW0225SG +8 , /* D - TOTAL GETMAINED VIRTUAL 64BIT  000C0 */
    =00201 QW0225SV +8 , /* D - TOTAL VARIABLE VIRTUAL 64BIT S 000C8 */
    =00209 QW0225SU +4 , /* F - TOTAL STACK STORAGE IN USE     000D0 */
    =00213 QW0225L2 +4 , /* F - Allocated storage for thread c 000D4 */
    =00217 QW0225H2 +4 , /* F - High water mark allocated stor 000D8 */
    =00221 QW0225F1 +4 , /* F -                                000DC */
    =00225 QW0225F2 +4 , /* F -                                000E0 */
    =00229 QW0225S2 +4 , /* F - TOTAL STATEMENT CACHE BLOCK ST 000E4 */
    =00233 RSVD0001 +18 , /* C - Available                     000E8 */
,/* =00251 QW02250N +0 ,    C - END OF QW0225 MAPPING          000FA */
    .           /* End of DSECT */
  /* next byte at 251 */
  hex_QW0225AL = c2x(QW0225AL)
  hex_QW0225AS = c2x(QW0225AS)
  hex_QW0225AV = c2x(QW0225AV)
  hex_QW0225CD = c2x(QW0225CD)
  hex_QW0225CR = c2x(QW0225CR)
  hex_QW0225FX = c2x(QW0225FX)
  hex_QW0225GM = c2x(QW0225GM)
  hex_QW0225GS = c2x(QW0225GS)
  hex_QW0225MV = c2x(QW0225MV)
  hex_QW0225PM = c2x(QW0225PM)
  hex_QW0225RO = c2x(QW0225RO)
  hex_QW0225RP = c2x(QW0225RP)
  hex_QW0225SB = c2x(QW0225SB)
  hex_QW0225SC = c2x(QW0225SC)
  hex_QW0225SO = c2x(QW0225SO)
  hex_QW0225TT = c2x(QW0225TT)
  hex_QW0225VR = c2x(QW0225VR)
  hex_QW0225AT = c2x(QW0225AT)
  hex_QW0225CE = c2x(QW0225CE)
  hex_QW0225DW = c2x(QW0225DW)
  hex_QW0225GW = c2x(QW0225GW)
  hex_QW0225PF = c2x(QW0225PF)
  hex_QW0225PL = c2x(QW0225PL)
  hex_QW0225LO = c2x(QW0225LO)
  hex_QW0225HI = c2x(QW0225HI)
  hex_QW0225EL = c2x(QW0225EL)
  hex_QW0225EH = c2x(QW0225EH)
  hex_QW0225RG = c2x(QW0225RG)
  hex_QW0225EC = c2x(QW0225EC)
  hex_QW0225BB = c2x(QW0225BB)
  hex_QW0225FA = c2x(QW0225FA)
  hex_QW0225GA = c2x(QW0225GA)
  hex_QW0225VA = c2x(QW0225VA)
  hex_QW0225SJ = c2x(QW0225SJ)
  hex_QW0225RL = c2x(QW0225RL)
  hex_QW0225AX = c2x(QW0225AX)
  hex_QW0225LC = c2x(QW0225LC)
  hex_QW0225LS = c2x(QW0225LS)
  hex_QW0225HS = c2x(QW0225HS)
  hex_QW0225HC = c2x(QW0225HC)
  hex_QW0225HT = c2x(QW0225HT)
  hex_QW0225SF = c2x(QW0225SF)
  hex_QW0225SG = c2x(QW0225SG)
  hex_QW0225SV = c2x(QW0225SV)
  hex_QW0225SU = c2x(QW0225SU)
  hex_QW0225L2 = c2x(QW0225L2)
  hex_QW0225H2 = c2x(QW0225H2)
  hex_QW0225F1 = c2x(QW0225F1)
  hex_QW0225F2 = c2x(QW0225F2)
  hex_QW0225S2 = c2x(QW0225S2)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0225",desired_dsect) > 0)) then do
    void_rc = queue_QW0225_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0225:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0225_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0225:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL AGENT LOCAL POOL STORA x:" hex_QW0225AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL AGENT SYSTEM STORAGE   x:" hex_QW0225AS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF AVAIL STORAGE      x:" hex_QW0225AV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL COMPRESS DICTIONARY ST x:" hex_QW0225CD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STG RSRVD ONLY FOR MUST COMP x:" hex_QW0225CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL FIXED STORAGE BELOW TH x:" hex_QW0225FX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED STORAGE BELO x:" hex_QW0225GM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED STACK STORAG x:" hex_QW0225GS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF STORAGE FOR MVS US x:" hex_QW0225MV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL PIPE MANAGER SUBPOOL S x:" hex_QW0225PM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL RDS OP POOL STORAGE    x:" hex_QW0225RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL RID POOL STORAGE       x:" hex_QW0225RP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STATEMENT CACHE BLOCK  x:" hex_QW0225SB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STORAGE FOR THREAD COP x:" hex_QW0225SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STG CUSHION WARNING TO CONTR x:" hex_QW0225SO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL BM/DM INTERNAL TRACE   x:" hex_QW0225TT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL VARIABLE STORAGE BELOW x:" hex_QW0225VR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF ACTIVE ALLIED THREADS   x:" hex_QW0225AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF CASTOUT ENGINES         x:" hex_QW0225CE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF DEFERRED WRITE ENGINES  x:" hex_QW0225DW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF GBP WRITE ENGINES       x:" hex_QW0225GW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF PREFETCH ENGINES        x:" hex_QW0225PF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF P-LOCK/NOTIFY EXIT ENGI x:" hex_QW0225PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 24 BIT LOW PRIVATE       x:" hex_QW0225LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 24 BIT HIGH PRIVATE      x:" hex_QW0225HI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 31 BIT EXTENDED LOW PRIV x:" hex_QW0225EL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS 31 BIT EXTENDED HIGH PRI x:" hex_QW0225EH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS EXTENDED REGION SIZE (MA x:" hex_QW0225RG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS EXTENDED CSA SIZE        x:" hex_QW0225EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL BUFFER MANAGER STORAGE x:" hex_QW0225BB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL FIXED STORAGE ABOVE TH x:" hex_QW0225FA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED STORAGE ABOV x:" hex_QW0225GA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL VARIABLE STORAGE ABOVE x:" hex_QW0225VA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0225SJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of real frames (4K) i x:" hex_QW0225RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of auxiliary slots (4 x:" hex_QW0225AX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # OF statements in CACHED SQ x:" hex_QW0225LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allocated storage for thread x:" hex_QW0225LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High water mark allocated st x:" hex_QW0225HS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High water mark # of stateme x:" hex_QW0225HC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timestamp at high water      x:" hex_QW0225HT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL FIXED VIRTUAL 64BIT SH x:" hex_QW0225SF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL GETMAINED VIRTUAL 64BI x:" hex_QW0225SG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL VARIABLE VIRTUAL 64BIT x:" hex_QW0225SV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STACK STORAGE IN USE   x:" hex_QW0225SU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allocated storage for thread x:" hex_QW0225L2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High water mark allocated st x:" hex_QW0225H2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0225F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_QW0225F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL STATEMENT CACHE BLOCK  x:" hex_QW0225S2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Available                    x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0226 length is 00015
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0226:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0226,21)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0226 Length: 21"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0226 ,
    =00001 QW0226DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0226OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0226PN +3 , /* X - PAGE NUMBER TO READ/WRITE      00004 */
    =00008 QW0226F +1 , /* C - FLAG FOR TYPE OF LATCH          00007 */
  ,     /* QW0226SL EQU x'00000000' S LATCH                          */
  ,     /* QW0226XL EQU x'00000000' X LATCH                          */
    =00009 QW0226BP +4 , /* F - BUFFER POOL INTERNAL ID (0-49, 00008 */
    =00013 QW0226AC +4 , /* F - ACE TOKEN OF REQUESTOR         0000C */
    =00017 QW0226PG +4 , /* F - PAGE NUMBER TO READ/WRITE      00010 */
    =00021 QW0226FG +1 , /* C - Table space type               00014 */
  ,     /* QW0226F1 EQU x'000000D5' Non large table space            */
  ,     /* QW0226F2 EQU x'000000D3' NON-EA 5-BYTE RID TABLE SPACE    */
  ,     /* QW0226F3 EQU x'00000000' EA-ENABLED 5-BYTE RID TABLE SPAC */
    .           /* End of DSECT */
  /* next byte at 22 */
  hex_QW0226DB = c2x(QW0226DB)
  hex_QW0226OB = c2x(QW0226OB)
  hex_QW0226PN = c2x(QW0226PN)
  hex_QW0226F = c2x(QW0226F)
  hex_QW0226BP = c2x(QW0226BP)
  hex_QW0226AC = c2x(QW0226AC)
  hex_QW0226PG = c2x(QW0226PG)
  hex_QW0226FG = c2x(QW0226FG)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0226",desired_dsect) > 0)) then do
    void_rc = queue_QW0226_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0226:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0226_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0226:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0226DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0226OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER TO READ/WRITE    x:" hex_QW0226PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG FOR TYPE OF LATCH       x:" hex_QW0226F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0226BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF REQUESTOR       x:" hex_QW0226AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER TO READ/WRITE    x:" hex_QW0226PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Table space type             x:" hex_QW0226FG
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0227 length is 00011
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0227:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0227,17)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0227 Length: 17"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0227 ,
    =00001 QW0227DB +2 , /* X - DATABASE ID (DBID)             00000 */
    =00003 QW0227OB +2 , /* X - PAGESET OBID                   00002 */
    =00005 QW0227PN +3 , /* X - PAGE NUMBER TO READ/WRITE      00004 */
    =00008 QW0227F +1 , /* C - STATUS FLAG                     00007 */
  ,     /* QW0227RN EQU x'000000D5' LATCH REQUESTOR WAS NOT CANCELLE */
  ,     /* QW0227RY EQU x'00000000' LATCH REQUESTOR WAS CANCELLED    */
    =00009 QW0227AC +4 , /* F - ACE TOKEN OF REQUESTOR         00008 */
    =00013 QW0227PG +4 , /* F - PAGE NUMBER TO READ/WRITE      0000C */
    =00017 QW0227FG +1 , /* C - Table space type               00010 */
  ,     /* QW0227F1 EQU x'000000D5' Non large table space            */
  ,     /* QW0227F2 EQU x'000000D3' NON-EA 5-BYTE RID TABLE SPACE    */
  ,     /* QW0227F3 EQU x'00000000' EA-ENABLED 5-BYTE RID TABLE SPAC */
    .           /* End of DSECT */
  /* next byte at 18 */
  hex_QW0227DB = c2x(QW0227DB)
  hex_QW0227OB = c2x(QW0227OB)
  hex_QW0227PN = c2x(QW0227PN)
  hex_QW0227F = c2x(QW0227F)
  hex_QW0227AC = c2x(QW0227AC)
  hex_QW0227PG = c2x(QW0227PG)
  hex_QW0227FG = c2x(QW0227FG)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0227",desired_dsect) > 0)) then do
    void_rc = queue_QW0227_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0227:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0227_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0227:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0227DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0227OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER TO READ/WRITE    x:" hex_QW0227PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATUS FLAG                  x:" hex_QW0227F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE TOKEN OF REQUESTOR       x:" hex_QW0227AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGE NUMBER TO READ/WRITE    x:" hex_QW0227PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Table space type             x:" hex_QW0227FG
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0228 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0228:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0228,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0228 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0228 ,
    =00001 QW0228DV +4 , /* F - (S)                            00000 */
    =00005 QW0228DI +8 , /* C - (S)                            00004 */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0228DV = c2x(QW0228DV)
  hex_QW0228DI = c2x(QW0228DI)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0228",desired_dsect) > 0)) then do
    void_rc = queue_QW0228_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0228:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0228_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0228:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0228DV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0228DI
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0229 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0229:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0229,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0229 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0229 ,
    =00001 QW0229DV +4 , /* F - (S)                            00000 */
    =00005 QW0229CC +4 , /* C - (S)                            00004 */
  ,     /* QW0229DE EQU x'C4C5C1D3' (S)                              */
  ,     /* QW0229RE EQU x'D9C5E4E2' (S)                              */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0229DV = c2x(QW0229DV)
  hex_QW0229CC = c2x(QW0229CC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0229",desired_dsect) > 0)) then do
    void_rc = queue_QW0229_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0229:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0229_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0229:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0229DV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0229CC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0231 length is 0002C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0231:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0231,44)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0231 Length: 44"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0231 ,
    =00001 QW0231SN +4 , /* F - Statement number...Same as QUE 00000 */
    =00005 QW0231QN +2 , /* H - Query block number...Same as Q 00004 */
    =00007 QW0231GN +2 , /* H - Parallel group number...Same a 00006 */
    =00009 QW0231CT +10 , /* C - Time of group creation (DB2 t 00008 */
    =00019 QW0231ET +10 , /* C - Time of group termination (DB 00012 */
    =00029 QW0231RN +2 , /* H - Number of QW0231TA repetitions 0001C */
    =00031 QW0231R1 +2 , /* H - Reserved for future use        0001E */
    =00033 QW0231NG +4 , /* F - (S)                            00020 */
    =00037 QW0231NT +4 , /* F - (S)                            00024 */
    =00041 QW0231NR +2 , /* H - Number of QW0231 records that  00028 */
    =00043 QW0231TR +2 , /* H - Number of this QW0231 record i 0002A */
    .           /* End of DSECT */
  /* next byte at 45 */
  hex_QW0231SN = c2x(QW0231SN)
  hex_QW0231QN = c2x(QW0231QN)
  hex_QW0231GN = c2x(QW0231GN)
  hex_QW0231CT = c2x(QW0231CT)
  hex_QW0231ET = c2x(QW0231ET)
  hex_QW0231RN = c2x(QW0231RN)
  hex_QW0231R1 = c2x(QW0231R1)
  hex_QW0231NG = c2x(QW0231NG)
  hex_QW0231NT = c2x(QW0231NT)
  hex_QW0231NR = c2x(QW0231NR)
  hex_QW0231TR = c2x(QW0231TR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0231",desired_dsect) > 0)) then do
    void_rc = queue_QW0231_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0231:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0231_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0231:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement number...Same as Q x:" hex_QW0231SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Query block number...Same as x:" hex_QW0231QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Parallel group number...Same x:" hex_QW0231GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of group creation (DB2  x:" hex_QW0231CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of group termination (D x:" hex_QW0231ET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of QW0231TA repetitio x:" hex_QW0231RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved for future use      x:" hex_QW0231R1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0231NG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0231NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of QW0231 records tha x:" hex_QW0231NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of this QW0231 record x:" hex_QW0231TR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0231N length is 00048
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0231N:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0231N,72)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0231N Length: 72"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0231N ,
    =00001 QW0231NM +2 , /* C - Total length of all QW0231TA e 00000 */
    =00003 QW0231R3 +2 , /* C - Reserved                       00002 */
,/* =00005 QW0231TA +0 ,    C - Individual task entry          00004 */
    =00005 QW0231TQ +4 , /* F - Task sequence number           00004 */
    =00009 QW0231TK +4 , /* F - Task token                     00008 */
    =00013 QW0231TC +10 , /* C - Time of task creation (DB2 ti 0000C */
    =00023 QW0231TT +10 , /* C - Time of task termination (DB2 00016 */
    =00033 QW0231TX +8 , /* D - Task CPU execution time        00020 */
    =00041 QW0231AC +4 , /* F - (S) Address of ACE             00028 */
    =00045 QW0231TM +8 , /* C - DB2 member name that task was  0002C */
    =00053 QW0231SU +4 , /* F - Task CPU service units consume 00034 */
    =00057 QW0231_ZIIP +8 , /* X - Task CPU time on zIIP       00038 */
    =00065 QW0231ZIIP_ONCP +8 , /* X - Task CPU time on standa 00040 */
    .           /* End of DSECT */
  /* next byte at 73 */
  hex_QW0231NM = c2x(QW0231NM)
  hex_QW0231R3 = c2x(QW0231R3)
  hex_QW0231TQ = c2x(QW0231TQ)
  hex_QW0231TK = c2x(QW0231TK)
  hex_QW0231TC = c2x(QW0231TC)
  hex_QW0231TT = c2x(QW0231TT)
  hex_QW0231TX = c2x(QW0231TX)
  hex_QW0231AC = c2x(QW0231AC)
  hex_QW0231TM = c2x(QW0231TM)
  hex_QW0231SU = c2x(QW0231SU)
  hex_QW0231_ZIIP = c2x(QW0231_ZIIP)
  hex_QW0231ZIIP_ONCP = c2x(QW0231ZIIP_ONCP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0231N",desired_dsect) > 0)) then do
    void_rc = queue_QW0231N_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0231N:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0231N_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0231N:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total length of all QW0231TA x:" hex_QW0231NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0231R3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task sequence number         x:" hex_QW0231TQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task token                   x:" hex_QW0231TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of task creation (DB2 t x:" hex_QW0231TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time of task termination (DB x:" hex_QW0231TT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task CPU execution time      x:" hex_QW0231TX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Address of ACE           x:" hex_QW0231AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DB2 member name that task wa x:" hex_QW0231TM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task CPU service units consu x:" hex_QW0231SU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task CPU time on zIIP        x:" hex_QW0231_ZIIP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Task CPU time on standard CP x:" hex_QW0231ZIIP_ONCP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0232 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0232:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0232,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0232 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0232 ,
,/* =00001 QW0232ND +0 ,    C - NO DATA NEEDED FOR IFCID 232   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0232",desired_dsect) > 0)) then do
    void_rc = queue_QW0232_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0232:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0232_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0232:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0233 length is 000F8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0233:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0233,248)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0233 Length: 248"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0233 ,
    =00001 QW0233LN +18 , /* C - %U Location name (RDB name)   00000 */
    =00019 QW0233PC +18 , /* C - %U Package collection id      00012 */
    =00037 QW0233PN +18 , /* C - %U Program name               00024 */
    =00055 QW0233TS +8 , /* C - PRECOMPILER TIME STAMP         00036 */
    =00063 QW0233SN +2 , /* C - RESERVED - DO NOT USE IN V9.   0003E */
    =00065 QW0233EX +1 , /* C - ENTRY/EXIT EVENT TYPE          00040 */
  ,     /* QW0233E EQU x'00000000' THE AGENT IS ENTERING A ROUTINE   */
  ,     /* QW0233X EQU x'00000001' THE AGENT HAS RETURNED FROM A ROU */
    =00066 QW0233TY +1 , /* C - ROUTINE TYPE                   00041 */
  ,     /* QW0233P EQU x'000000D7' THE ROUTINE IS A PROCEDURE        */
  ,     /* QW0233F EQU x'000000C6' THE ROUTINE IS A FUNCTION         */
  ,     /* QW0233A EQU x'000000C1' THE ROUTINE IS an AuthLE Routine  */
    =00067 QW0233NL +2 , /* C - NESTING LEVEL                  00042 */
    =00069 QW0233PR +18 , /* C - %U ROUTINE SPECIFIC NAME      00044 */
    =00087 RSVD0001 +2 , /* X - RESERVED                       00056 */
    =00089 QW0233SQ +136 , /* C - THE SQLCA RETURNED TO THE PR 00058 */
    =00225 QW0233SC +8 , /* C - %U SCHEMA NAME                 000E0 */
    =00233 QW0233LN_Off +2 , /* H - Offset from QW0233 to      000E8 */
    =00235 QW0233PC_Off +2 , /* H - Offset from QW0233 to      000EA */
    =00237 QW0233PN_Off +2 , /* H - Offset from QW0233 to      000EC */
    =00239 QW0233PR_Off +2 , /* H - Offset from QW0233 to      000EE */
    =00241 QW0233SC_Off +2 , /* H - Offset from QW0233 to      000F0 */
    =00243 RSVD0002 +2 , /* X - RESERVED                       000F2 */
    =00245 QW0233SN_long +4 , /* C - STATEMENT NUMBER          000F4 */
    =00001 QW0233LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0233LN_Var +0 ,    C - %U Location name (RDB name 00002 */
    =00001 QW0233PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0233PC_Var +0 ,    C - %U Package collection id   00002 */
    =00001 QW0233PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0233PN_Var +0 ,    C - %U Program name            00002 */
    =00001 QW0233PR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0233PR_Var +0 ,    C - %U ROUTINE SPECIFIC NAME   00002 */
    =00001 QW0233SC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0233SC_Var +0 ,    C - %U SCHEMA NAME             00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0233LN = c2x(QW0233LN)
  hex_QW0233PC = c2x(QW0233PC)
  hex_QW0233PN = c2x(QW0233PN)
  hex_QW0233TS = c2x(QW0233TS)
  hex_QW0233SN = c2x(QW0233SN)
  hex_QW0233EX = c2x(QW0233EX)
  hex_QW0233TY = c2x(QW0233TY)
  hex_QW0233NL = c2x(QW0233NL)
  hex_QW0233PR = c2x(QW0233PR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0233SQ = c2x(QW0233SQ)
  hex_QW0233SC = c2x(QW0233SC)
  hex_QW0233LN_Off = c2x(QW0233LN_Off)
  hex_QW0233PC_Off = c2x(QW0233PC_Off)
  hex_QW0233PN_Off = c2x(QW0233PN_Off)
  hex_QW0233PR_Off = c2x(QW0233PR_Off)
  hex_QW0233SC_Off = c2x(QW0233SC_Off)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0233SN_long = c2x(QW0233SN_long)
  hex_QW0233LN_Len = c2x(QW0233LN_Len)
  hex_QW0233PC_Len = c2x(QW0233PC_Len)
  hex_QW0233PN_Len = c2x(QW0233PN_Len)
  hex_QW0233PR_Len = c2x(QW0233PR_Len)
  hex_QW0233SC_Len = c2x(QW0233SC_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0233",desired_dsect) > 0)) then do
    void_rc = queue_QW0233_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0233:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0233_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0233:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name (RDB name)  x:" hex_QW0233LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection id     x:" hex_QW0233PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0233PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0233TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED - DO NOT USE IN V9. x:" hex_QW0233SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ENTRY/EXIT EVENT TYPE        x:" hex_QW0233EX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ROUTINE TYPE                 x:" hex_QW0233TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NESTING LEVEL                x:" hex_QW0233NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U ROUTINE SPECIFIC NAME     x:" hex_QW0233PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE SQLCA RETURNED TO THE PR x:" hex_QW0233SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SCHEMA NAME               x:" hex_QW0233SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0233 to        x:" hex_QW0233LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0233 to        x:" hex_QW0233PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0233 to        x:" hex_QW0233PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0233 to        x:" hex_QW0233PR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0233 to        x:" hex_QW0233SC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0233SN_long
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0233LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0233PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0233PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0233PR_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0233SC_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0234 length is 00108
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0234:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0234,264)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0234 Length: 264"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0234 ,
    =00001 QW0234PL +2 , /* H - Primary AUTHID length          00000 */
    =00003 QW0234PN +130 , /* C - Primary AUTHID               00002 */
    =00133 QW0234AL +2 , /* H - SQL AUTHID length              00084 */
    =00135 QW0234AN +130 , /* C - SQL AUTHID                   00086 */
    .           /* End of DSECT */
  /* next byte at 265 */
  hex_QW0234PL = c2x(QW0234PL)
  hex_QW0234PN = c2x(QW0234PN)
  hex_QW0234AL = c2x(QW0234AL)
  hex_QW0234AN = c2x(QW0234AN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0234",desired_dsect) > 0)) then do
    void_rc = queue_QW0234_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0234:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0234_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0234:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Primary AUTHID length        x:" hex_QW0234PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Primary AUTHID               x:" hex_QW0234PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL AUTHID length            x:" hex_QW0234AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL AUTHID                   x:" hex_QW0234AN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02342 length is 00084
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02342:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02342,132)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02342 Length: 132"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02342 ,
    =00001 QW0234SL +2 , /* H - Secondary AUTHID length        00000 */
    =00003 QW0234SN +130 , /* C - Secondary AUTHID             00002 */
    .           /* End of DSECT */
  /* next byte at 133 */
  hex_QW0234SL = c2x(QW0234SL)
  hex_QW0234SN = c2x(QW0234SN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02342",desired_dsect) > 0)) then do
    void_rc = queue_QW02342_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02342:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02342_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02342:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Secondary AUTHID length      x:" hex_QW0234SL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Secondary AUTHID             x:" hex_QW0234SN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0235 length is 00038
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0235:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0235,56)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0235 Length: 56"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0235 ,
    =00001 QW0235LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
,/* =00017 QW0235TH +0 ,    C - Information used to identify t 00010 */
    =00017 QW0235NT +8 , /* C - The NETID portion of the LUWID 00010 */
    =00025 QW0235LU +8 , /* C - The LUNAME portion of the LUWI 00018 */
    =00033 QW0235IN +6 , /* X - The instance number portion of 00020 */
    =00039 QW0235CM +2 , /* X - The commit count portion of th 00026 */
    =00041 QW0235TK +4 , /* X - The local TOKEN representing t 00028 */
    =00045 QW0235UR +6 , /* X - The Recovery Log RBA (URID) fo 0002C */
    =00051 QW0235RL +1 , /* C - The role of DB2 in the LUW --  00032 */
  ,     /* QW0235RC EQU x'000000C3' DB2 is the coordinator of this L */
  ,     /* QW0235RP EQU x'000000D7' DB2 is a participant in this LUW */
    =00052 QW0235TS +1 , /* C - The status of the DB2 thread w 00033 */
  ,     /* QW0235TC EQU x'000000C3' Local status of unit of work is  */
  ,     /* QW0235TA EQU x'000000C1' Local status of unit of work is  */
  ,     /* QW0235TD EQU x'000000C4' Local status of unit of work is  */
  ,     /* QW0235TF EQU x'000000C6' Local status of unit of work is  */
  ,     /* QW0235TU EQU x'00000000' Local status of unit of work is  */
    =00053 QW0235TI +1 , /* C - Disposition of the resync info 00034 */
  ,     /* QW0235TP EQU x'000000D7' The resync status information wa */
  ,     /* QW0235TR EQU x'000000D9' The resync status information wa */
    =00054 RSVD0001 +1 , /* C - reserved                       00035 */
    =00055 QW0235LO_Off +2 , /* H - Offset from QW0235 to      00036 */
    =00001 QW0235LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0235LO_Var +0 ,    C - %U LOCATION involved in th 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0235LO = c2x(QW0235LO)
  hex_QW0235NT = c2x(QW0235NT)
  hex_QW0235LU = c2x(QW0235LU)
  hex_QW0235IN = c2x(QW0235IN)
  hex_QW0235CM = c2x(QW0235CM)
  hex_QW0235TK = c2x(QW0235TK)
  hex_QW0235UR = c2x(QW0235UR)
  hex_QW0235RL = c2x(QW0235RL)
  hex_QW0235TS = c2x(QW0235TS)
  hex_QW0235TI = c2x(QW0235TI)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0235LO_Off = c2x(QW0235LO_Off)
  hex_QW0235LO_Len = c2x(QW0235LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0235",desired_dsect) > 0)) then do
    void_rc = queue_QW0235_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0235:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0235_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0235:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0235LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The NETID portion of the LUW x:" hex_QW0235NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The LUNAME portion of the LU x:" hex_QW0235LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The instance number portion  x:" hex_QW0235IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The commit count portion of  x:" hex_QW0235CM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The local TOKEN representing x:" hex_QW0235TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The Recovery Log RBA (URID)  x:" hex_QW0235UR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The role of DB2 in the LUW - x:" hex_QW0235RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The status of the DB2 thread x:" hex_QW0235TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Disposition of the resync in x:" hex_QW0235TI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0235 to        x:" hex_QW0235LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0235LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0236 length is 002F8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0236:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0236,760)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0236 Length: 760"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0236 ,
    =00001 QW0236LO +16 , /* C - %U LOCATION or <LUNAME> of th 00000 */
,/* =00017 QW0236DC +0 ,    C - The Data Communications inform 00010 */
,/* =00017 QW0236FL +0 ,    X - Flags                          00010 */
,/* =00017 QW0236SR +0 ,    X - Last network operation was SEN 00010 */
  ,     /* QW0236S EQU x'00000080' Last operation was SEND           */
  ,     /* QW0236R EQU x'00000000' Last operation was RECV           */
    =00017 RSVD0001 +1 , /* X - 1st byte of Flags              00010 */
    =00018 RSVD0002 +1 , /* X - 2nd byte of Flags              00011 */
    =00019 QW0236LS +2 , /* X - The length of the last message 00012 */
    =00021 QW0236MS +256 , /* C - The last message sent by thi 00014 */
    =00277 QW0236LR +2 , /* X - The length of the last message 00114 */
    =00279 QW0236MR +256 , /* C - The last message received by 00116 */
    =00535 QW0236VR +112 , /* C - The VTAM RPL associated with 00216 */
    =00647 QW0236VX +112 , /* C - The VTAM RPL Extension (ISTR 00286 */
    =00759 QW0236LO_Off +2 , /* H - Offset from QW0236 to      002F6 */
    =00001 QW0236LO_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0236LO_Var +0 ,    C - %U LOCATION involved in th 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0236LO = c2x(QW0236LO)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0236LS = c2x(QW0236LS)
  hex_QW0236MS = c2x(QW0236MS)
  hex_QW0236LR = c2x(QW0236LR)
  hex_QW0236MR = c2x(QW0236MR)
  hex_QW0236VR = c2x(QW0236VR)
  hex_QW0236VX = c2x(QW0236VX)
  hex_QW0236LO_Off = c2x(QW0236LO_Off)
  hex_QW0236LO_Len = c2x(QW0236LO_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0236",desired_dsect) > 0)) then do
    void_rc = queue_QW0236_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0236:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0236_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0236:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION or <LUNAME> of t x:" hex_QW0236LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      1st byte of Flags            x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      2nd byte of Flags            x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the last messa x:" hex_QW0236LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The last message sent by thi x:" hex_QW0236MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The length of the last messa x:" hex_QW0236LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The last message received by x:" hex_QW0236MR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The VTAM RPL associated with x:" hex_QW0236VR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The VTAM RPL Extension (ISTR x:" hex_QW0236VX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0236 to        x:" hex_QW0236LO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0236LO_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0237 length is 00007
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0237:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0237,7)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0237 Length: 7"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0237 ,
    =00001 QW0237OI +3 , /* C - Previous (current) degree      00000 */
    =00004 QW0237NI +3 , /* C - New (attepmted) degree         00003 */
    =00007 QW0237ST +1 , /* C - Status of statement (sucess or 00006 */
  ,     /* QW0237CS EQU x'00000000' SUCCESSFUL STMT - Constant for Q */
  ,     /* QW0237CF EQU x'000000C6' FAILED STMT - Constant for QW023 */
    .           /* End of DSECT */
  /* next byte at 8 */
  hex_QW0237OI = c2x(QW0237OI)
  hex_QW0237NI = c2x(QW0237NI)
  hex_QW0237ST = c2x(QW0237ST)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0237",desired_dsect) > 0)) then do
    void_rc = queue_QW0237_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0237:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0237_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0237:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Previous (current) degree    x:" hex_QW0237OI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      New (attepmted) degree       x:" hex_QW0237NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Status of statement (sucess  x:" hex_QW0237ST
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0238 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0238:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0238,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0238 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0238 ,
    .           /* End of DSECT */
  /* next byte at 8 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0238",desired_dsect) > 0)) then do
    void_rc = queue_QW0238_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0238:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0238_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0238:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02381 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02381:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02381,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02381 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02381 ,
,/* =00001 QW02381F +0 ,    F - (S)                            00000 */
    =00001 QW02381M +4 , /* C - (S)                            00000 */
    =00005 QW02381R +4 , /* F - (S)                            00004 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW02381M = c2x(QW02381M)
  hex_QW02381R = c2x(QW02381R)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02381",desired_dsect) > 0)) then do
    void_rc = queue_QW02381_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02381:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02381_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02381:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW02381M
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW02381R
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02382 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02382:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02382,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02382 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02382 ,
,/* =00001 QW02382L +0 ,    C - (S)                            00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02382",desired_dsect) > 0)) then do
    void_rc = queue_QW02382_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02382:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02382_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02382:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW02383 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW02383:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW02383,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW02383 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW02383 ,
,/* =00001 QW02383R +0 ,    C - (S)                            00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW02383",desired_dsect) > 0)) then do
    void_rc = queue_QW02383_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW02383:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW02383_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW02383:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0240 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0240:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0240,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0240 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0240 ,
,/* =00001 QW0240ND +0 ,    C - NO DATA NEEDED FOR IFCID 240   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0240",desired_dsect) > 0)) then do
    void_rc = queue_QW0240_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0240:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0240_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0240:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0241 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0241:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0241,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0241 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0241 ,
,/* =00001 QW0241ND +0 ,    C - NO DATA NEEDED FOR IFCID 241   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0241",desired_dsect) > 0)) then do
    void_rc = queue_QW0241_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0241:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0241_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0241:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0242 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0242:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0242,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0242 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0242 ,
,/* =00001 QW0242ND +0 ,    C - NO DATA NEEDED FOR IFCID 242   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0242",desired_dsect) > 0)) then do
    void_rc = queue_QW0242_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0242:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0242_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0242:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0243 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0243:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0243,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0243 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0243 ,
,/* =00001 QW0243ND +0 ,    C - NO DATA NEEDED FOR IFCID 243   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0243",desired_dsect) > 0)) then do
    void_rc = queue_QW0243_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0243:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0243_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0243:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0247 length is 0004E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0247:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0247,78)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0247 Length: 78"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0247 ,
,/* =00001 QW0247S1 +0 ,    F - SELF DEFINING SECT.1-QWT02R10  00000 */
    =00001 QW0247LN +16 , /* C - %U Location name              00000 */
    =00017 QW0247PC +18 , /* C - %U Package collection id      00010 */
    =00035 QW0247PN +18 , /* C - %U Program name               00022 */
    =00053 QW0247TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0247OS +2 , /* C - Reserved                       0003C */
    =00063 QW0247NE +2 , /* C - NUMBER OF ENTRIES IN THE SQLDA 0003E */
    =00065 QW0247LE +2 , /* C - LENGTH OF EACH SQLDA ENTRY     00040 */
,/* =00067 QW0247FE +0 ,    X - FORMAT OF SQLDA (1st 4 bits)   00042 */
    =00067 QW0247FG +1 , /* X - Flag byte                      00042 */
    =00068 RSVD0001 +1 , /* C - UNUSED                         00043 */
    =00069 QW0247SN +4 , /* F - STATEMENT NUMBER               00044 */
    =00073 QW0247LN_Off +2 , /* H - Offset from QW0247 to      00048 */
    =00075 QW0247PC_Off +2 , /* H - Offset from QW0247 to      0004A */
    =00077 QW0247PN_Off +2 , /* H - Offset from QW0247 to      0004C */
    =00001 QW0247LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0247LN_Var +0 ,    C - %U Location name           00002 */
    =00001 QW0247PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0247PC_Var +0 ,    C - %U Package collection id   00002 */
    =00001 QW0247PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0247PN_Var +0 ,    C - %U Program name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0247LN = c2x(QW0247LN)
  hex_QW0247PC = c2x(QW0247PC)
  hex_QW0247PN = c2x(QW0247PN)
  hex_QW0247TS = c2x(QW0247TS)
  hex_QW0247OS = c2x(QW0247OS)
  hex_QW0247NE = c2x(QW0247NE)
  hex_QW0247LE = c2x(QW0247LE)
  hex_QW0247FG = c2x(QW0247FG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0247SN = c2x(QW0247SN)
  hex_QW0247LN_Off = c2x(QW0247LN_Off)
  hex_QW0247PC_Off = c2x(QW0247PC_Off)
  hex_QW0247PN_Off = c2x(QW0247PN_Off)
  hex_QW0247LN_Len = c2x(QW0247LN_Len)
  hex_QW0247PC_Len = c2x(QW0247PC_Len)
  hex_QW0247PN_Len = c2x(QW0247PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0247",desired_dsect) > 0)) then do
    void_rc = queue_QW0247_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0247:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0247_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0247:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name             x:" hex_QW0247LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection id     x:" hex_QW0247PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0247PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0247TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0247OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ENTRIES IN THE SQL x:" hex_QW0247NE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF EACH SQLDA ENTRY   x:" hex_QW0247LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flag byte                    x:" hex_QW0247FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0247SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0247 to        x:" hex_QW0247LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0247 to        x:" hex_QW0247PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0247 to        x:" hex_QW0247PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0247LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0247PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0247PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0247A length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0247A:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0247A,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0247A Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0247A ,
,/* =00001 QW0247S2 +0 ,    F - SELF DEFINING SECT.2-QWT0R10   00000 */
    =00001 QW0247TY +2 , /* C - DATA TYPE OF THIS ENTRY        00000 */
,/* =00003 QW0247LD +0 ,    H - DATA LENGTH OF THIS ENTRY      00002 */
    =00003 QW0247LP +1 , /* C - IF DECIMAL DATA THEN PRECISION 00002 */
    =00004 QW0247LS +1 , /* C - IF DECIMAL DATA THEN SCALE     00003 */
    =00005 QW0247PT +4 , /* F - POINTER TO THE DATA            00004 */
    =00009 QW0247IN +4 , /* F - NEGATIVE INDICATOR VARIABLE    00008 */
    =00013 QW0247NO +4 , /* F - SQLDA ENTRY NUMBER             0000C */
    =00017 QW0247NL +1 , /* C - NULL INDICATOR                 00010 */
    =00018 RSVD0001 +3 , /* C - UNUSED                         00011 */
    =00021 QW0247NA +32 , /* C - NAME (IF FORMAT 1 SQLDA)      00014 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0247TY = c2x(QW0247TY)
  hex_QW0247LP = c2x(QW0247LP)
  hex_QW0247LS = c2x(QW0247LS)
  hex_QW0247PT = c2x(QW0247PT)
  hex_QW0247IN = c2x(QW0247IN)
  hex_QW0247NO = c2x(QW0247NO)
  hex_QW0247NL = c2x(QW0247NL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0247NA = c2x(QW0247NA)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0247A",desired_dsect) > 0)) then do
    void_rc = queue_QW0247A_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0247A:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0247A_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0247A:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA TYPE OF THIS ENTRY      x:" hex_QW0247TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF DECIMAL DATA THEN PRECISI x:" hex_QW0247LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF DECIMAL DATA THEN SCALE   x:" hex_QW0247LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POINTER TO THE DATA          x:" hex_QW0247PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEGATIVE INDICATOR VARIABLE  x:" hex_QW0247IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLDA ENTRY NUMBER           x:" hex_QW0247NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NULL INDICATOR               x:" hex_QW0247NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NAME (IF FORMAT 1 SQLDA)     x:" hex_QW0247NA
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0247B length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0247B:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0247B,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0247B Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0247B ,
,/* =00001 QW0247S3 +0 ,    F - SELF DEFINING SECT.3 - QWT02R1 00000 */
    =00001 QW0247LL +2 , /* X - LENGTH OF ALL DATA AREA + 2    00000 */
,/* =00003 QW0247DA +0 ,    C - DATA                           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0247LL = c2x(QW0247LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0247B",desired_dsect) > 0)) then do
    void_rc = queue_QW0247B_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0247B:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0247B_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0247B:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF ALL DATA AREA + 2  x:" hex_QW0247LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0248 length is 0004E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0248:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0248,78)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0248 Length: 78"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0248 ,
,/* =00001 QW0248S1 +0 ,    F - SELF DEFINING SECT.1-QWT02R10  00000 */
    =00001 QW0248LN +16 , /* C - %U Location name              00000 */
    =00017 QW0248PC +18 , /* C - %U Package collection id      00010 */
    =00035 QW0248PN +18 , /* C - %U Program name               00022 */
    =00053 QW0248TS +8 , /* C - PRECOMPILER TIME STAMP         00034 */
    =00061 QW0248OS +2 , /* C - Reserved                       0003C */
    =00063 QW0248NE +2 , /* C - NUMBER OF ENTRIES IN THE SQLDA 0003E */
    =00065 QW0248LE +2 , /* C - LENGTH OF EACH SQLDA ENTRY     00040 */
,/* =00067 QW0248FE +0 ,    X - FORMAT OF SQLDA (1st 4 bits)   00042 */
    =00067 QW0248FG +1 , /* X - Flag byte                      00042 */
    =00068 RSVD0001 +1 , /* C - UNUSED                         00043 */
    =00069 QW0248SN +4 , /* F - STATEMENT NUMBER               00044 */
    =00073 QW0248LN_Off +2 , /* H - Offset from QW0248 to      00048 */
    =00075 QW0248PC_Off +2 , /* H - Offset from QW0248 to      0004A */
    =00077 QW0248PN_Off +2 , /* H - Offset from QW0248 to      0004C */
    =00001 QW0248LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0248LN_Var +0 ,    C - %U Location name           00002 */
    =00001 QW0248PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0248PC_Var +0 ,    C - %U Package collection id   00002 */
    =00001 QW0248PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0248PN_Var +0 ,    C - %U Program name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0248LN = c2x(QW0248LN)
  hex_QW0248PC = c2x(QW0248PC)
  hex_QW0248PN = c2x(QW0248PN)
  hex_QW0248TS = c2x(QW0248TS)
  hex_QW0248OS = c2x(QW0248OS)
  hex_QW0248NE = c2x(QW0248NE)
  hex_QW0248LE = c2x(QW0248LE)
  hex_QW0248FG = c2x(QW0248FG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0248SN = c2x(QW0248SN)
  hex_QW0248LN_Off = c2x(QW0248LN_Off)
  hex_QW0248PC_Off = c2x(QW0248PC_Off)
  hex_QW0248PN_Off = c2x(QW0248PN_Off)
  hex_QW0248LN_Len = c2x(QW0248LN_Len)
  hex_QW0248PC_Len = c2x(QW0248PC_Len)
  hex_QW0248PN_Len = c2x(QW0248PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0248",desired_dsect) > 0)) then do
    void_rc = queue_QW0248_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0248:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0248_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0248:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name             x:" hex_QW0248LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection id     x:" hex_QW0248PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0248PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PRECOMPILER TIME STAMP       x:" hex_QW0248TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0248OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF ENTRIES IN THE SQL x:" hex_QW0248NE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF EACH SQLDA ENTRY   x:" hex_QW0248LE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flag byte                    x:" hex_QW0248FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0248SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0248 to        x:" hex_QW0248LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0248 to        x:" hex_QW0248PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0248 to        x:" hex_QW0248PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0248LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0248PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0248PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0248A length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0248A:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0248A,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0248A Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0248A ,
,/* =00001 QW0248S2 +0 ,    F - SELF DEFINING SECT.2-QWT02R20  00000 */
    =00001 QW0248TY +2 , /* C - DATA TYPE OF THIS ENTRY        00000 */
,/* =00003 QW0248LD +0 ,    H - DATA LENGTH OF THIS ENTRY      00002 */
    =00003 QW0248LP +1 , /* C - IF DECIMAL DATA THEN PRECISION 00002 */
    =00004 QW0248LS +1 , /* C - IF DECIMAL DATA THEN SCALE     00003 */
    =00005 QW0248PT +4 , /* F - POINTER TO THE DATA            00004 */
    =00009 QW0248IN +4 , /* F - NEGATIVE INDICATOR VARIABLE    00008 */
    =00013 QW0248NO +4 , /* F - SQLDA ENTRY NUMBER             0000C */
    =00017 QW0248NL +1 , /* C - NULL INDICATOR                 00010 */
    =00018 RSVD0001 +3 , /* C - UNUSED                         00011 */
    =00021 QW0248NA +32 , /* C - NAME (IF FORMAT 1 SQLDA)      00014 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0248TY = c2x(QW0248TY)
  hex_QW0248LP = c2x(QW0248LP)
  hex_QW0248LS = c2x(QW0248LS)
  hex_QW0248PT = c2x(QW0248PT)
  hex_QW0248IN = c2x(QW0248IN)
  hex_QW0248NO = c2x(QW0248NO)
  hex_QW0248NL = c2x(QW0248NL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0248NA = c2x(QW0248NA)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0248A",desired_dsect) > 0)) then do
    void_rc = queue_QW0248A_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0248A:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0248A_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0248A:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA TYPE OF THIS ENTRY      x:" hex_QW0248TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF DECIMAL DATA THEN PRECISI x:" hex_QW0248LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF DECIMAL DATA THEN SCALE   x:" hex_QW0248LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POINTER TO THE DATA          x:" hex_QW0248PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEGATIVE INDICATOR VARIABLE  x:" hex_QW0248IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLDA ENTRY NUMBER           x:" hex_QW0248NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NULL INDICATOR               x:" hex_QW0248NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NAME (IF FORMAT 1 SQLDA)     x:" hex_QW0248NA
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0248B length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0248B:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0248B,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0248B Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0248B ,
,/* =00001 QW0248S3 +0 ,    F - SELF DEFINING SECT.3 - QWT02R3 00000 */
    =00001 QW0248LL +2 , /* X - LENGTH OF ALL DATA AREA + 2    00000 */
,/* =00003 QW0248DA +0 ,    C - DATA                           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0248LL = c2x(QW0248LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0248B",desired_dsect) > 0)) then do
    void_rc = queue_QW0248B_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0248B:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0248B_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0248B:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF ALL DATA AREA + 2  x:" hex_QW0248LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0249 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0249:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0249,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0249 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0249 ,
    =00001 QW0249ID +2 , /* X - DBID                           00000 */
    =00003 QW0249SN +2 , /* X - RESERVED                       00002 */
    =00005 QW0249NM +8 , /* C - DATABASE NAME                  00004 */
    =00013 QW0249MC +8 , /* C - MEMBER NAME OF MEMBER CAUSING  0000C */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0249ID = c2x(QW0249ID)
  hex_QW0249SN = c2x(QW0249SN)
  hex_QW0249NM = c2x(QW0249NM)
  hex_QW0249MC = c2x(QW0249MC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0249",desired_dsect) > 0)) then do
    void_rc = queue_QW0249_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0249:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0249_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0249:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID                         x:" hex_QW0249ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0249SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE NAME                x:" hex_QW0249NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEMBER NAME OF MEMBER CAUSIN x:" hex_QW0249MC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0250HE length is 00024
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0250HE:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0250HE,36)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0250HE Length: 36"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0250HE ,
    =00001 QW0250TY +1 , /* C - Type of request (C or D)       00000 */
  ,     /* QW0250TC EQU x'000000C3' Connect                          */
  ,     /* QW0250TD EQU x'000000C4' Disconnect                       */
  ,     /* QW0250TR EQU x'000000D9' Rebuild                          */
  ,     /* QW0250TS EQU x'00000000' Connect to secondary for duplexi */
    =00002 RSVD0001 +3 , /* X - RESERVED                       00001 */
    =00005 QW0250SN +16 , /* C - Coupling facility structure n 00004 */
    =00021 QW0250GN +8 , /* C - Group Buffer Pool name         00014 */
    =00029 QW0250RC +4 , /* F - MVS XES return code            0001C */
,/* =00033 QW0250RS +0 ,    X - MVS XES reason code            00020 */
    =00033 RSVD0002 +2 , /* X - (S)High order 2 bytes of MVS X 00020 */
    =00035 QW0250R2 +2 , /* X - Low order 2 bytes of MVS XES r 00022 */
,/* =00037 QW0250EN +0 ,    C - End of QW0250 header section   00024 */
    .           /* End of DSECT */
  /* next byte at 37 */
  hex_QW0250TY = c2x(QW0250TY)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0250SN = c2x(QW0250SN)
  hex_QW0250GN = c2x(QW0250GN)
  hex_QW0250RC = c2x(QW0250RC)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0250R2 = c2x(QW0250R2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0250HE",desired_dsect) > 0)) then do
    void_rc = queue_QW0250HE_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0250HE:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0250HE_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0250HE:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of request (C or D)     x:" hex_QW0250TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Coupling facility structure  x:" hex_QW0250SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group Buffer Pool name       x:" hex_QW0250GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MVS XES return code          x:" hex_QW0250RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)High order 2 bytes of MVS x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Low order 2 bytes of MVS XES x:" hex_QW0250R2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0250CN length is 0001C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0250CN:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0250CN,28)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0250CN Length: 28"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0250CN ,
    =00001 QW0250SZ +4 , /* X - Structure size - number of 4K  00000 */
    =00005 QW0250SM +4 , /* X - Maximum structure size saved a 00004 */
    =00009 QW0250DR +4 , /* X - Allocated directory entry coun 00008 */
    =00013 QW0250DT +4 , /* X - Allocated data element count ( 0000C */
    =00017 QW0250F1 +4 , /* X - (S)Flags                       00010 */
    =00021 QW0250F2 +4 , /* X - Flags                          00014 */
  ,     /* QW0250J4 EQU x'00000010' This flag is only valid if       */
    =00025 QW0250CD +1 , /* C - Type of Connect                00018 */
  ,     /* QW0250NC EQU x'000000D5' New Connection                   */
  ,     /* QW0250RE EQU x'000000D9' Re-connect of Failed-Persistent  */
    =00026 QW0250CA +1 , /* C - Allocation indicator           00019 */
  ,     /* QW0250NA EQU x'000000D5' This Connect did NOT cause struc */
  ,     /* QW0250SA EQU x'000000C1' This Connect DID cause structure */
    =00027 QW0250CO +2 , /* X - Maximum number of castout clas 0001A */
,/* =00029 QW0250CE +0 ,    C - End of QW0250CN data section   0001C */
    .           /* End of DSECT */
  /* next byte at 29 */
  hex_QW0250SZ = c2x(QW0250SZ)
  hex_QW0250SM = c2x(QW0250SM)
  hex_QW0250DR = c2x(QW0250DR)
  hex_QW0250DT = c2x(QW0250DT)
  hex_QW0250F1 = c2x(QW0250F1)
  hex_QW0250F2 = c2x(QW0250F2)
  hex_QW0250CD = c2x(QW0250CD)
  hex_QW0250CA = c2x(QW0250CA)
  hex_QW0250CO = c2x(QW0250CO)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0250CN",desired_dsect) > 0)) then do
    void_rc = queue_QW0250CN_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0250CN:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0250CN_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0250CN:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Structure size - number of 4 x:" hex_QW0250SZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum structure size saved x:" hex_QW0250SM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allocated directory entry co x:" hex_QW0250DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allocated data element count x:" hex_QW0250DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Flags                     x:" hex_QW0250F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags                        x:" hex_QW0250F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of Connect              x:" hex_QW0250CD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Allocation indicator         x:" hex_QW0250CA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum number of castout cl x:" hex_QW0250CO
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0250DS length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0250DS:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0250DS,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0250DS Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0250DS ,
    =00001 QW0250DD +1 , /* C - Type of Disconnect             00000 */
  ,     /* QW0250DN EQU x'000000D5' Normal Disconnect                */
  ,     /* QW0250DF EQU x'000000C6' Disconnect to Failed-Persistent  */
    =00002 RSVD0001 +3 , /* X - RESERVED                       00001 */
,/* =00005 QW0250DE +0 ,    C - End of QW0250DS data section   00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0250DD = c2x(QW0250DD)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0250DS",desired_dsect) > 0)) then do
    void_rc = queue_QW0250DS_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0250DS:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0250DS_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0250DS:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of Disconnect           x:" hex_QW0250DD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0250X length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0250X:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0250X,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0250X Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0250X ,
    =00001 QW0250X1 +4 , /* X - System Authorization Facility  00000 */
    =00005 QW0250X2 +4 , /* X - SAF reason code                00004 */
,/* =00009 QW0250XE +0 ,    C - End of QW0250X  data section   00008 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0250X1 = c2x(QW0250X1)
  hex_QW0250X2 = c2x(QW0250X2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0250X",desired_dsect) > 0)) then do
    void_rc = queue_QW0250X_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0250X:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0250X_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0250X:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      System Authorization Facilit x:" hex_QW0250X1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SAF reason code              x:" hex_QW0250X2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0250Z length is 00028
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0250Z:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0250Z,40)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0250Z Length: 40"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0250Z ,
    =00001 QW0250ZN +8 , /* C - CF name                        00000 */
    =00009 QW0250ZR +4 , /* F - Reason code why the CF was not 00008 */
  ,     /* QW0250Z1 EQU x'00000001' REASON:  The active policy indic */
  ,     /* QW0250Z2 EQU x'00000002' REASON:  The CF is not defined i */
  ,     /* QW0250Z3 EQU x'00000003' REASON:  Connectivity to the CF  */
  ,     /* QW0250Z4 EQU x'00000004' REASON:  The CF has failed.      */
  ,     /* QW0250Z5 EQU x'00000005' REASON:  The structure failed du */
  ,     /* QW0250Z6 EQU x'00000006' REASON:  The structure attribute */
  ,     /* QW0250Z7 EQU x'00000007' REASON:  The structure size spec */
  ,     /* QW0250Z8 EQU x'00000008' REASON:  New structures cannot b */
  ,     /* QW0250Z9 EQU x'00000009' REASON:  MVS XES component error */
  ,     /* QW0250Y1 EQU x'0000000A' REASON:  Unknown.                */
    =00013 QW0250ZM +4 , /* X - This field is only valid when  0000C */
    =00017 QW0250ZG +4 , /* X - Total space in the CF in 4K bl 00010 */
    =00021 QW0250ZH +4 , /* X - Total control space in the CF  00014 */
    =00025 QW0250ZI +4 , /* X - Total free space in 4K blocks  00018 */
    =00029 QW0250ZJ +4 , /* X - Free control space in 4K block 0001C */
    =00033 QW0250ZK +2 , /* X - Storage increment size in 4K b 00020 */
    =00035 QW0250ZL +1 , /* X - Maximum element characteristic 00022 */
    =00036 RSVD0001 +1 , /* C - Reserved                       00023 */
    =00037 QW0250ZO +2 , /* X - Maximum number of castout clas 00024 */
    =00039 RSVD0002 +2 , /* C - Reserved                       00026 */
,/* =00041 QW0250ZE +0 ,    C - End of QW0250Z  data section   00028 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW0250ZN = c2x(QW0250ZN)
  hex_QW0250ZR = c2x(QW0250ZR)
  hex_QW0250ZM = c2x(QW0250ZM)
  hex_QW0250ZG = c2x(QW0250ZG)
  hex_QW0250ZH = c2x(QW0250ZH)
  hex_QW0250ZI = c2x(QW0250ZI)
  hex_QW0250ZJ = c2x(QW0250ZJ)
  hex_QW0250ZK = c2x(QW0250ZK)
  hex_QW0250ZL = c2x(QW0250ZL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0250ZO = c2x(QW0250ZO)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0250Z",desired_dsect) > 0)) then do
    void_rc = queue_QW0250Z_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0250Z:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0250Z_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0250Z:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CF name                      x:" hex_QW0250ZN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason code why the CF was n x:" hex_QW0250ZR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      This field is only valid whe x:" hex_QW0250ZM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total space in the CF in 4K  x:" hex_QW0250ZG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total control space in the C x:" hex_QW0250ZH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Total free space in 4K block x:" hex_QW0250ZI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Free control space in 4K blo x:" hex_QW0250ZJ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Storage increment size in 4K x:" hex_QW0250ZK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum element characterist x:" hex_QW0250ZL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum number of castout cl x:" hex_QW0250ZO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0251 length is 00050
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0251:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0251,80)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0251 Length: 80"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0251 ,
    =00001 RSVD0001 +1 , /* C - RESERVED                       00000 */
    =00002 QW0251IF +1 , /* X - IRLM FUNCTION CODE             00001 */
  ,     /* QW0251IL EQU x'00000002' LOCK                             */
  ,     /* QW0251IU EQU x'00000003' UNLOCK                           */
  ,     /* QW0251IC EQU x'00000004' CHANGE                           */
  ,     /* QW0251IP EQU x'000000FF' CHANGE FROM P-LOCK EXIT          */
    =00003 QW0251OB +1 , /* C - OBJECT TYPE                    00002 */
  ,     /* QW0251OT EQU x'00000000' TABLESPACE                       */
  ,     /* QW0251OI EQU x'000000C9' INDEX (INDEXSPACE)               */
    =00004 QW0251ST +1 , /* C - Requested lock state for Lock  00003 */
,/* =00005 QW0251LK +0 ,    C - P-LOCK LOCK RESOURCE NAME      00004 */
    =00005 QW0251KL +1 , /* G - LENGTH OF P-LOCK NAME          00004 */
    =00006 RSVD0002 +2 , /* C - RESERVED                       00005 */
    =00008 QW0251KT +1 , /* X - P-LOCK TYPE                    00007 */
  ,     /* QW0251TT EQU x'0000001D' PAGESET/PARTITION                */
    =00009 QW0251KU +1 , /* X - BUFFER POOL INTERNAL ID (0-49  00008 */
    =00010 RSVD0003 +1 , /* C - RESERVED                       00009 */
    =00011 QW0251KD +2 , /* C - DATABASE ID                    0000A */
    =00013 QW0251KP +2 , /* C - PAGESET OBID                   0000C */
    =00015 QW0251KR +2 , /* C - PARTITION NUMBER (ZERO IF THIS 0000E */
    =00017 QW0251PA +3 , /* C - (S)PAGESET ATTRIBUTES          00010 */
    =00020 RSVD0004 +17 , /* C - RESERVED                      00013 */
    =00037 QW0251TK +4 , /* C - (S)LOCK TOKEN - Zero if QW0251 00024 */
    =00041 QW0251DN +8 , /* C - DATABASE NAME                  00028 */
    =00049 QW0251PN +8 , /* C - PAGESET NAME                   00030 */
    =00057 QW0251OS +1 , /* X - PREVIOUSLY HELD P-LOCK STATE ( 00038 */
    =00058 QW0251OC +1 , /* X - PREVIOUS P-LOCK CACHED STATE ( 00039 */
    =00059 QW0251NS +1 , /* X - NEWLY HELD P-LOCK STATE (SEE P 0003A */
    =00060 QW0251NC +1 , /* X - NEW P-LOCK CACHED STATE (SEE P 0003B */
    =00061 QW0251RC +4 , /* F - (S)IRLM RETURN CODE            0003C */
    =00065 QW0251RS +4 , /* X - (S)IRLM RETURN SUBCODES        00040 */
    =00069 QW0251PC +2 , /* H - (S)P-LOCK EXIT REASON CODE     00044 */
    =00071 QW0251F1 +1 , /* X - REQUEST FLAGS                  00046 */
  ,     /* QW0251C1 EQU x'00000080' 1 = CONDITIONAL REQUEST          */
  ,     /* QW0251C6 EQU x'00000004' 1 = RESTART LOCK REQUEST         */
  ,     /* QW0251C7 EQU x'00000002' 1 = MODIFY LOCK                  */
    =00072 QW0251F2 +1 , /* X - (S)PAGESET FLAGS               00047 */
  ,     /* QW0251H7 EQU x'00000002' (S)                              */
    =00073 QW0251DB +8 , /* C - If QW0251IF ¬= X FF  then this 00048 */
,/* =00081 QW0251EN +0 ,    C - END OF QW0251                  00050 */
  ,     /* QW0251S0 EQU x'00000000' NOT HELD                         */
  ,     /* QW0251S2 EQU x'00000002' INTENT SHARE (IS)                */
  ,     /* QW0251S3 EQU x'00000003' INTENT EXCLUSIVE (IX)            */
  ,     /* QW0251S4 EQU x'00000004' SHARE (S)                        */
  ,     /* QW0251S6 EQU x'00000006' SHARE INTENT EXCLUSIVE (SIX)     */
  ,     /* QW0251S7 EQU x'00000007' NON SHARED UPDATE (NSU)          */
  ,     /* QW0251S8 EQU x'00000008' EXCLUSIVE (X)                    */
  ,     /* QW0251FF EQU x'000000FF' REQUEST WAS DENIED               */
    .           /* End of DSECT */
  /* next byte at 81 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0251IF = c2x(QW0251IF)
  hex_QW0251OB = c2x(QW0251OB)
  hex_QW0251ST = c2x(QW0251ST)
  hex_QW0251KL = c2x(QW0251KL)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0251KT = c2x(QW0251KT)
  hex_QW0251KU = c2x(QW0251KU)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0251KD = c2x(QW0251KD)
  hex_QW0251KP = c2x(QW0251KP)
  hex_QW0251KR = c2x(QW0251KR)
  hex_QW0251PA = c2x(QW0251PA)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0251TK = c2x(QW0251TK)
  hex_QW0251DN = c2x(QW0251DN)
  hex_QW0251PN = c2x(QW0251PN)
  hex_QW0251OS = c2x(QW0251OS)
  hex_QW0251OC = c2x(QW0251OC)
  hex_QW0251NS = c2x(QW0251NS)
  hex_QW0251NC = c2x(QW0251NC)
  hex_QW0251RC = c2x(QW0251RC)
  hex_QW0251RS = c2x(QW0251RS)
  hex_QW0251PC = c2x(QW0251PC)
  hex_QW0251F1 = c2x(QW0251F1)
  hex_QW0251F2 = c2x(QW0251F2)
  hex_QW0251DB = c2x(QW0251DB)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0251",desired_dsect) > 0)) then do
    void_rc = queue_QW0251_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0251:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0251_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0251:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IRLM FUNCTION CODE           x:" hex_QW0251IF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBJECT TYPE                  x:" hex_QW0251OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Requested lock state for Loc x:" hex_QW0251ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF P-LOCK NAME        x:" hex_QW0251KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      P-LOCK TYPE                  x:" hex_QW0251KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0251KU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID                  x:" hex_QW0251KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0251KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARTITION NUMBER (ZERO IF TH x:" hex_QW0251KR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)PAGESET ATTRIBUTES        x:" hex_QW0251PA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)LOCK TOKEN - Zero if QW02 x:" hex_QW0251TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE NAME                x:" hex_QW0251DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET NAME                 x:" hex_QW0251PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PREVIOUSLY HELD P-LOCK STATE x:" hex_QW0251OS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PREVIOUS P-LOCK CACHED STATE x:" hex_QW0251OC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEWLY HELD P-LOCK STATE (SEE x:" hex_QW0251NS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW P-LOCK CACHED STATE (SEE x:" hex_QW0251NC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)IRLM RETURN CODE          x:" hex_QW0251RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)IRLM RETURN SUBCODES      x:" hex_QW0251RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)P-LOCK EXIT REASON CODE   x:" hex_QW0251PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUEST FLAGS                x:" hex_QW0251F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)PAGESET FLAGS             x:" hex_QW0251F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If QW0251IF ¬= X FF  then th x:" hex_QW0251DB
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0252 length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0252:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0252,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0252 Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0252 ,
,/* =00001 QW0252P1 +0 ,    C -                                00000 */
    =00001 QW0252ID +1 , /* C - (S)FUNCTION ID                 00000 */
  ,     /* QW0252FA EQU x'000000C1' (S)READ-DIRINFO (IXLCACHE)       */
  ,     /* QW0252FB EQU x'000000C2' (S)READ-COCLASS (IXLCACHE)       */
  ,     /* QW0252FC EQU x'000000C3' (S)CASTOUT-DATA (IXLCACHE)       */
  ,     /* QW0252FD EQU x'000000C4' (S)DELETE-NAME (IXLCACHE)        */
  ,     /* QW0252FE EQU x'000000C5' (S)RESET-REFBIT (IXLCACHE)       */
  ,     /* QW0252FF EQU x'000000C6' (S)FORCE (IXLFORCE)              */
  ,     /* QW0252FI EQU x'000000C9' (S)CONNECT (IXLCONN)             */
  ,     /* QW0252FJ EQU x'000000D1' (S)DISCONNECT (IXLDISC)          */
  ,     /* QW0252FP EQU x'000000D7' (S)PROCESS-REFLIST (IXLCACHE)    */
  ,     /* QW0252FR EQU x'000000D9' (S)READ-DATA (IXLCACHE)          */
  ,     /* QW0252FS EQU x'00000000' (S)READ-STGSTATS (IXLCACHE)      */
  ,     /* QW0252FT EQU x'00000000' (S)READ-COSTATS (IXLCACHE)       */
  ,     /* QW0252FU EQU x'00000000' (S)UNLOCK-CASTOUT (IXLCACHE)     */
  ,     /* QW0252FV EQU x'00000000' (S)SET-RECLVCTR (IXLCACHE)       */
  ,     /* QW0252FW EQU x'00000000' (S)WRITE-DATA (IXLCACHE)         */
  ,     /* QW0252FX EQU x'00000000' (S)X-INVALIDATE (IXLCACHE)       */
  ,     /* QW0252FY EQU x'00000000' (S)REGISTER-PAGE-LIST (IXLCACHE) */
  ,     /* QW0252F1 EQU x'000000F1' (S)WRITE-DATA TO SECONDARY (IXLC */
  ,     /* QW0252F2 EQU x'000000F2' (S)DELETE-NAME-LIST TO SECONDARY */
  ,     /* QW0252F3 EQU x'000000F3' (S)DELETE-NAME TO SECONDARY (IXL */
  ,     /* QW0252F4 EQU x'000000F4' (S)READ-STGSTATS TO SECONDARY (I */
  ,     /* QW0252F5 EQU x'000000F5' (S)IXLFCOMP for WRITE_DATA to se */
  ,     /* QW0252F6 EQU x'000000F6' (S)IXLFCOMP for DELETE_NAMELIST  */
  ,     /* QW0252F7 EQU x'000000F7' (S)READ-COSTATS to secondary (IX */
    =00002 QW0252BP +1 , /* C - (S)INTERNAL BUFFER POOL NUMBER 00001 */
    =00003 QW0252XF +1 , /* C - (S)FLAG BYTE                   00002 */
  ,     /* QW0252X1 EQU x'00000080' (S)- DISCONNECT: ON=REASON(FAILU */
    =00004 RSVD0001 +1 , /* C - NOT USED                       00003 */
,/* =00005 QW0252N1 +0 ,    C - (S)- NAME FOR READ, WRITE,CAST 00004 */
,/* =00005 QW0252P2 +0 ,    C - (S)DBID.PSID PART OF NAME      00004 */
    =00005 QW0252UF +1 , /* C - (S)-  FIRST NAME  FOR UNLOCK-C 00004 */
    =00006 QW0252DE +1 , /* C - (S)- PARM FOR  DATASIZE  ON CO 00005 */
    =00007 QW0252DR +2 , /* H - (S)- Directory part of ratio f 00006 */
    =00009 QW0252P3 +4 , /* C - (S)- PIECE#.PAGE# PART OF NAME 00008 */
,/* =00013 QW0252N2 +0 ,    C - (S)-  REPLNAME  FOR READ       0000C */
,/* =00013 QW0252P4 +0 ,    C - (S)- DBID.PSID PART OF NAME    0000C */
    =00013 QW0252NN +2 , /* H - (S) NUMNAMES  PARM FOR PROCESS 0000C */
    =00015 RSVD0002 +2 , /* C - NOT USED FOR PROCESS-REFLIST   0000E */
,/* =00017 QW0252P5 +0 ,    C - (S)- PIECE#.PAGE# PART OF NAME 00010 */
    =00017 QW0252DT +2 , /* H - (S)- Data part of ratio for Co 00010 */
    =00019 RSVD0003 +2 , /* C - Not used for Connect           00012 */
    =00021 QW0252P6 +4 , /* A - (S)- ADDR OF  DATAREAV  PARM F 00014 */
,/* =00025 QW0252P7 +0 ,    C - (S)- LVBA INDEX FOR READ, WRIT 00018 */
    =00025 QW0252NM +2 , /* C - (S)- NAMEMASK FOR READ-DIRINFO 00018 */
    =00027 RSVD0004 +2 , /* C - NOT USED FOR READ-DIRINFO, RES 0001A */
,/* =00029 QW0252P8 +0 ,    C -                                0001C */
    =00029 QW0252CC +2 , /* H - (S)CASTOUT CLASS FOR WRITE, OR 0001C */
    =00031 RSVD0005 +2 , /* C - NOT USED                       0001E */
,/* =00033 QW0252EN +0 ,    C - END OF QW0252                  00020 */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QW0252ID = c2x(QW0252ID)
  hex_QW0252BP = c2x(QW0252BP)
  hex_QW0252XF = c2x(QW0252XF)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0252UF = c2x(QW0252UF)
  hex_QW0252DE = c2x(QW0252DE)
  hex_QW0252DR = c2x(QW0252DR)
  hex_QW0252P3 = c2x(QW0252P3)
  hex_QW0252NN = c2x(QW0252NN)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0252DT = c2x(QW0252DT)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0252P6 = c2x(QW0252P6)
  hex_QW0252NM = c2x(QW0252NM)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0252CC = c2x(QW0252CC)
  hex_RSVD0005 = c2x(RSVD0005)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0252",desired_dsect) > 0)) then do
    void_rc = queue_QW0252_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0252:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0252_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0252:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)FUNCTION ID               x:" hex_QW0252ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)INTERNAL BUFFER POOL NUMB x:" hex_QW0252BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)FLAG BYTE                 x:" hex_QW0252XF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)-  FIRST NAME  FOR UNLOCK x:" hex_QW0252UF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- PARM FOR  DATASIZE  ON  x:" hex_QW0252DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- Directory part of ratio x:" hex_QW0252DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- PIECE#.PAGE# PART OF NA x:" hex_QW0252P3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) NUMNAMES  PARM FOR PROCE x:" hex_QW0252NN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED FOR PROCESS-REFLIST x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- Data part of ratio for  x:" hex_QW0252DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used for Connect         x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- ADDR OF  DATAREAV  PARM x:" hex_QW0252P6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- NAMEMASK FOR READ-DIRIN x:" hex_QW0252NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED FOR READ-DIRINFO, R x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)CASTOUT CLASS FOR WRITE,  x:" hex_QW0252CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0005
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0254 length is 00058
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0254:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0254,88)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0254 Length: 88"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0254 ,
    =00001 QW0254GN +4 , /* F - Group buffer pool id           00000 */
    =00005 QW0254CI +4 , /* F -  Explicit XI counter .         00004 */
    =00009 QW0254RH +4 , /* F -  Read-Hit Counter .            00008 */
    =00013 QW0254RD +4 , /* F -  Read-Miss-Directory-Hit Count 0000C */
    =00017 QW0254RS +4 , /* F -  Read-Miss-Assignment-Suppress 00010 */
    =00021 QW0254RN +4 , /* F -  Read-Miss-Name-Assigned Count 00014 */
    =00025 QW0254RF +4 , /* F -  Read-Miss-Cache-Full Counter  00018 */
    =00029 QW0254WH +4 , /* F -  Changed Page Write-Hit Counte 0001C */
    =00033 QW0254WC +4 , /* F -  Clean Page Write-Hit Counter  00020 */
    =00037 QW0254WF +4 , /* F -  Write-Miss-Cache-Full Counter 00024 */
    =00041 QW0254DR +4 , /* F -  Directory-Entry-Reclaim Count 00028 */
    =00045 QW0254TR +4 , /* F -  Data-Entry-Reclaim Counter .  0002C */
    =00049 QW0254XR +4 , /* F -  XI-Directory-Entry-Reclaim Co 00030 */
    =00053 QW0254CC +4 , /* F -  Castout Counter .             00034 */
    =00057 QW0254DE +4 , /* F -  Directory-Entry Counter .     00038 */
    =00061 QW0254TE +4 , /* F -  Data-Entry Counter .          0003C */
    =00065 QW0254TC +4 , /* F -  Total-Changed Counter .       00040 */
    =00069 QW02542W +4 , /* F -  Changed Page Write-Hit Counte 00044 */
    =00073 QW02542F +4 , /* F -  Write-Miss-Cache-Full Counter 00048 */
    =00077 QW02542D +4 , /* F -  Directory-Entry Counter       0004C */
    =00081 QW02542T +4 , /* F -  Data-Entry Counter            00050 */
    =00085 QW02542C +4 , /* F -  Total-Changed Counter         00054 */
,/* =00089 QW0254EN +0 ,    C - END OF QW0254                  00058 */
    .           /* End of DSECT */
  /* next byte at 89 */
  hex_QW0254GN = c2x(QW0254GN)
  hex_QW0254CI = c2x(QW0254CI)
  hex_QW0254RH = c2x(QW0254RH)
  hex_QW0254RD = c2x(QW0254RD)
  hex_QW0254RS = c2x(QW0254RS)
  hex_QW0254RN = c2x(QW0254RN)
  hex_QW0254RF = c2x(QW0254RF)
  hex_QW0254WH = c2x(QW0254WH)
  hex_QW0254WC = c2x(QW0254WC)
  hex_QW0254WF = c2x(QW0254WF)
  hex_QW0254DR = c2x(QW0254DR)
  hex_QW0254TR = c2x(QW0254TR)
  hex_QW0254XR = c2x(QW0254XR)
  hex_QW0254CC = c2x(QW0254CC)
  hex_QW0254DE = c2x(QW0254DE)
  hex_QW0254TE = c2x(QW0254TE)
  hex_QW0254TC = c2x(QW0254TC)
  hex_QW02542W = c2x(QW02542W)
  hex_QW02542F = c2x(QW02542F)
  hex_QW02542D = c2x(QW02542D)
  hex_QW02542T = c2x(QW02542T)
  hex_QW02542C = c2x(QW02542C)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0254",desired_dsect) > 0)) then do
    void_rc = queue_QW0254_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0254:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0254_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0254:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Group buffer pool id         x:" hex_QW0254GN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Explicit XI counter .       x:" hex_QW0254CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Read-Hit Counter .          x:" hex_QW0254RH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Read-Miss-Directory-Hit Cou x:" hex_QW0254RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Read-Miss-Assignment-Suppre x:" hex_QW0254RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Read-Miss-Name-Assigned Cou x:" hex_QW0254RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Read-Miss-Cache-Full Counte x:" hex_QW0254RF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Changed Page Write-Hit Coun x:" hex_QW0254WH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Clean Page Write-Hit Counte x:" hex_QW0254WC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Write-Miss-Cache-Full Count x:" hex_QW0254WF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Directory-Entry-Reclaim Cou x:" hex_QW0254DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Data-Entry-Reclaim Counter  x:" hex_QW0254TR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       XI-Directory-Entry-Reclaim  x:" hex_QW0254XR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Castout Counter .           x:" hex_QW0254CC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Directory-Entry Counter .   x:" hex_QW0254DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Data-Entry Counter .        x:" hex_QW0254TE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Total-Changed Counter .     x:" hex_QW0254TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Changed Page Write-Hit Coun x:" hex_QW02542W
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Write-Miss-Cache-Full Count x:" hex_QW02542F
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Directory-Entry Counter     x:" hex_QW02542D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Data-Entry Counter          x:" hex_QW02542T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "       Total-Changed Counter       x:" hex_QW02542C
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0255 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0255:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0255,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0255 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0255 ,
,/* =00001 QW0255NM +0 ,    C - Name of the page whose buffer  00000 */
    =00001 QW0255DB +2 , /* C - Data base ID (DBID)            00000 */
    =00003 QW0255OB +2 , /* C - Pageset object ID (OBID)       00002 */
    =00005 QW0255PN +1 , /* C - Pageset piece number           00004 */
    =00006 QW0255PG +3 , /* C - Relative page number (within t 00005 */
    =00009 RSVD0001 +8 , /* C - RESERVED                       00008 */
    =00017 QW0255BP +1 , /* C - Internal buffer pool ID        00010 */
    =00018 QW0255AS +1 , /* C - Synchronous or asynchronous    00011 */
  ,     /* QW0255SS EQU x'00000000' Synchronous (under the applicati */
  ,     /* QW0255AA EQU x'000000C1' Asynchronous (under a DB2 system */
    =00019 QW0255DR +1 , /* C - Data returned or not           00012 */
  ,     /* QW0255DD EQU x'000000C4' Data was returned from the Group */
  ,     /* QW0255NN EQU x'000000D5' Data was not returned from the G */
    =00020 RSVD0002 +1 , /* C - RESERVED                       00013 */
    =00021 QW0255AC +4 , /* F - ACE token of requestor         00014 */
,/* =00025 QW0255EN +0 ,    C - END OF QW0255                  00018 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0255DB = c2x(QW0255DB)
  hex_QW0255OB = c2x(QW0255OB)
  hex_QW0255PN = c2x(QW0255PN)
  hex_QW0255PG = c2x(QW0255PG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0255BP = c2x(QW0255BP)
  hex_QW0255AS = c2x(QW0255AS)
  hex_QW0255DR = c2x(QW0255DR)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0255AC = c2x(QW0255AC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0255",desired_dsect) > 0)) then do
    void_rc = queue_QW0255_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0255:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0255_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0255:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Data base ID (DBID)          x:" hex_QW0255DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pageset object ID (OBID)     x:" hex_QW0255OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pageset piece number         x:" hex_QW0255PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Relative page number (within x:" hex_QW0255PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Internal buffer pool ID      x:" hex_QW0255BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Synchronous or asynchronous  x:" hex_QW0255AS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Data returned or not         x:" hex_QW0255DR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE token of requestor       x:" hex_QW0255AC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0256 length is 00024
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0256:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0256,36)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0256 Length: 36"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0256 ,
    =00001 QW0256GB +8 , /* C - GROUP BUFFER POOL NAME         00000 */
    =00009 QW0256OR +6 , /* C - OLD DIRECTORY TO DATA RATIO VA 00008 */
    =00015 QW0256OC +1 , /* X - OLD CLASST VALUE               0000E */
    =00016 QW0256OG +1 , /* X - OLD GBPOOLT VALUE              0000F */
    =00017 QW0256OK +4 , /* X - OLD GBPCHKPT VALUE             00010 */
    =00021 QW0256NR +6 , /* C - NEW DIRECTORY TO DATA RATIO VA 00014 */
    =00027 QW0256NC +1 , /* X - NEW CLASST VALUE               0001A */
    =00028 QW0256NG +1 , /* X - NEW GBPOOLT VALUE              0001B */
    =00029 QW0256NK +4 , /* X - NEW GBPCHKPT VALUE             0001C */
    =00033 QW0256OA +1 , /* C - OLD AUTOREC SETTING rev code a 00020 */
    =00034 QW0256NA +1 , /* C - NEW AUTOREC Setting rev code a 00021 */
    =00035 QW0256OB +1 , /* C - Old GBPCACHE setting           00022 */
    =00036 QW0256NB +1 , /* C - New GBPCACHE setting           00023 */
  ,     /* QW0256AY EQU x'00000000' AUTOREC or GBPCACHE (YES)        */
  ,     /* QW0256AN EQU x'000000D5' AUTOREC or GBPCACHE (NO)         */
,/* =00037 QW0256EN +0 ,    C - END OF QW0256                  00024 */
    .           /* End of DSECT */
  /* next byte at 37 */
  hex_QW0256GB = c2x(QW0256GB)
  hex_QW0256OR = c2x(QW0256OR)
  hex_QW0256OC = c2x(QW0256OC)
  hex_QW0256OG = c2x(QW0256OG)
  hex_QW0256OK = c2x(QW0256OK)
  hex_QW0256NR = c2x(QW0256NR)
  hex_QW0256NC = c2x(QW0256NC)
  hex_QW0256NG = c2x(QW0256NG)
  hex_QW0256NK = c2x(QW0256NK)
  hex_QW0256OA = c2x(QW0256OA)
  hex_QW0256NA = c2x(QW0256NA)
  hex_QW0256OB = c2x(QW0256OB)
  hex_QW0256NB = c2x(QW0256NB)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0256",desired_dsect) > 0)) then do
    void_rc = queue_QW0256_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0256:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0256_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0256:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GROUP BUFFER POOL NAME       x:" hex_QW0256GB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OLD DIRECTORY TO DATA RATIO  x:" hex_QW0256OR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OLD CLASST VALUE             x:" hex_QW0256OC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OLD GBPOOLT VALUE            x:" hex_QW0256OG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OLD GBPCHKPT VALUE           x:" hex_QW0256OK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW DIRECTORY TO DATA RATIO  x:" hex_QW0256NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW CLASST VALUE             x:" hex_QW0256NC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW GBPOOLT VALUE            x:" hex_QW0256NG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW GBPCHKPT VALUE           x:" hex_QW0256NK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OLD AUTOREC SETTING rev code x:" hex_QW0256OA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NEW AUTOREC Setting rev code x:" hex_QW0256NA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Old GBPCACHE setting         x:" hex_QW0256OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      New GBPCACHE setting         x:" hex_QW0256NB
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0257D1 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0257D1:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0257D1,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0257D1 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0257D1 ,
    =00001 QW0257LK +32 , /* C - Lock resource name against wh 00000 */
    =00033 QW0257TK +4 , /* C - (S)Lock token                  00020 */
    =00037 QW0257ST +1 , /* X - Lock state.  If non-zero, then 00024 */
    =00038 QW0257RM +1 , /* X - (S)RMID                        00025 */
    =00039 QW0257FC +1 , /* X - (S)FCODE                       00026 */
    =00040 QW0257FL +1 , /* X - Flags (applicable only for Sen 00027 */
  ,     /* QW0257F1 EQU x'00000040' ON = Asynchronous request - do n */
    =00041 QW0257NU +2 , /* H - Number of lock holders notifie 00028 */
    =00043 QW0257OP +1 , /* C - Notify operation               0002A */
  ,     /* QW0257SN EQU x'00000000' Send                             */
  ,     /* QW0257RV EQU x'000000D9' Receive                          */
    =00044 RSVD0001 +1 , /* C - RESERVED                       0002B */
    =00045 QW0257RC +4 , /* X - (S)Return code                 0002C */
,/* =00049 QW0257RS +0 ,    X - (S)Reason code                 00030 */
    =00049 QW0257B1 +1 , /* X - (S)Byte 1                      00030 */
    =00050 QW0257B2 +1 , /* X - (S)Byte 2                      00031 */
    =00051 RSVD0002 +2 , /* C - RESERVED                       00032 */
,/* =00053 QW0257EN +0 ,    C - END OF QW0257                  00034 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0257LK = c2x(QW0257LK)
  hex_QW0257TK = c2x(QW0257TK)
  hex_QW0257ST = c2x(QW0257ST)
  hex_QW0257RM = c2x(QW0257RM)
  hex_QW0257FC = c2x(QW0257FC)
  hex_QW0257FL = c2x(QW0257FL)
  hex_QW0257NU = c2x(QW0257NU)
  hex_QW0257OP = c2x(QW0257OP)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0257RC = c2x(QW0257RC)
  hex_QW0257B1 = c2x(QW0257B1)
  hex_QW0257B2 = c2x(QW0257B2)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0257D1",desired_dsect) > 0)) then do
    void_rc = queue_QW0257D1_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0257D1:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0257D1_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0257D1:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Lock resource name against w x:" hex_QW0257LK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Lock token                x:" hex_QW0257TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Lock state.  If non-zero, th x:" hex_QW0257ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)RMID                      x:" hex_QW0257RM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)FCODE                     x:" hex_QW0257FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Flags (applicable only for S x:" hex_QW0257FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of lock holders notif x:" hex_QW0257NU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Notify operation             x:" hex_QW0257OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Return code               x:" hex_QW0257RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Byte 1                    x:" hex_QW0257B1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Byte 2                    x:" hex_QW0257B2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0257D2 length is 000FE
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0257D2:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0257D2,254)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0257D2 Length: 254"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0257D2 ,
    =00001 QW0257LL +4 , /* X - (S)Message length              00000 */
    =00005 QW0257MS +250 , /* C - (S)First 250 bytes of messag 00004 */
    .           /* End of DSECT */
  /* next byte at 255 */
  hex_QW0257LL = c2x(QW0257LL)
  hex_QW0257MS = c2x(QW0257MS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0257D2",desired_dsect) > 0)) then do
    void_rc = queue_QW0257D2_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0257D2:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0257D2_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0257D2:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Message length            x:" hex_QW0257LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)First 250 bytes of messag x:" hex_QW0257MS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0258 length is 00090
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0258:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0258,144)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0258 Length: 144"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0258 ,
    =00001 QW0258DS +44 , /* C - DataSet name                  00000 */
    =00045 QW0258TS +8 , /* C - Timestamp after extend complet 0002C */
    =00053 QW0258DB +2 , /* H - DataBase ID (DBID)             00034 */
    =00055 QW0258PS +2 , /* H - PageSet ID (OBID)              00036 */
    =00057 QW0258DN +8 , /* C - DataBase name                  00038 */
    =00065 QW0258TN +8 , /* C - Table/Index space name         00040 */
    =00073 QW0258PQ +4 , /* F - Primary quantity, 4KB          00048 */
    =00077 QW0258SQ +4 , /* F - Current secondary quantity, 4K 0004C */
    =00081 QW0258MS +4 , /* F - Maximum data set size, 4KB     00050 */
    =00085 QW0258HB +4 , /* F - High allocated before extend,  00054 */
    =00089 QW0258HA +4 , /* F - High allocated after extend, 4 00058 */
    =00093 QW0258XM +2 , /* H - Maximum extents                0005C */
    =00095 QW0258XB +2 , /* H - Number of extents(before)      0005E */
    =00097 QW0258XA +2 , /* H - Number of extents(after)       00060 */
    =00099 QW0258VM +2 , /* H - Maximum volumes                00062 */
    =00101 QW0258VB +2 , /* H - Number of volumes(before)      00064 */
    =00103 QW0258VA +2 , /* H - Number of volumes(after)       00066 */
    =00105 RSVD0001 +40 , /* C - Reserved                      00068 */
,/* =00145 QW0258EN +0 ,    C - End of QW0258                  00090 */
    .           /* End of DSECT */
  /* next byte at 145 */
  hex_QW0258DS = c2x(QW0258DS)
  hex_QW0258TS = c2x(QW0258TS)
  hex_QW0258DB = c2x(QW0258DB)
  hex_QW0258PS = c2x(QW0258PS)
  hex_QW0258DN = c2x(QW0258DN)
  hex_QW0258TN = c2x(QW0258TN)
  hex_QW0258PQ = c2x(QW0258PQ)
  hex_QW0258SQ = c2x(QW0258SQ)
  hex_QW0258MS = c2x(QW0258MS)
  hex_QW0258HB = c2x(QW0258HB)
  hex_QW0258HA = c2x(QW0258HA)
  hex_QW0258XM = c2x(QW0258XM)
  hex_QW0258XB = c2x(QW0258XB)
  hex_QW0258XA = c2x(QW0258XA)
  hex_QW0258VM = c2x(QW0258VM)
  hex_QW0258VB = c2x(QW0258VB)
  hex_QW0258VA = c2x(QW0258VA)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0258",desired_dsect) > 0)) then do
    void_rc = queue_QW0258_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0258:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0258_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0258:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DataSet name                 x:" hex_QW0258DS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timestamp after extend compl x:" hex_QW0258TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DataBase ID (DBID)           x:" hex_QW0258DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PageSet ID (OBID)            x:" hex_QW0258PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DataBase name                x:" hex_QW0258DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Table/Index space name       x:" hex_QW0258TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Primary quantity, 4KB        x:" hex_QW0258PQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current secondary quantity,  x:" hex_QW0258SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum data set size, 4KB   x:" hex_QW0258MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High allocated before extend x:" hex_QW0258HB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      High allocated after extend, x:" hex_QW0258HA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum extents              x:" hex_QW0258XM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of extents(before)    x:" hex_QW0258XB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of extents(after)     x:" hex_QW0258XA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum volumes              x:" hex_QW0258VM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of volumes(before)    x:" hex_QW0258VB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of volumes(after)     x:" hex_QW0258VA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0259 length is 00040
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0259:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0259,64)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0259 Length: 64"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0259 ,
    =00001 QW0259EV +1 , /* C - (S)Event causing the P-lock op 00000 */
  ,     /* QW0259EC EQU x'000000C3' (S)Change page latch             */
  ,     /* QW0259EG EQU x'000000C7' (S)Getpage                       */
  ,     /* QW0259EL EQU x'000000D3' (S)Page latch                    */
  ,     /* QW0259EP EQU x'000000D7' (S)P-lock exit                   */
  ,     /* QW0259ES EQU x'00000000' (S)Setwrite intent               */
  ,     /* QW0259ET EQU x'00000000' (S)Page steal                    */
  ,     /* QW0259EW EQU x'00000000' (S)Page write                    */
    =00002 QW0259IF +1 , /* X - IRLM function code             00001 */
  ,     /* QW0259IL EQU x'00000002' Lock                             */
  ,     /* QW0259IU EQU x'00000003' Unlock                           */
  ,     /* QW0259IC EQU x'00000004' Change                           */
  ,     /* QW0259IP EQU x'000000FF' Change from P-lock Exit          */
    =00003 QW0259OB +1 , /* C - Object type                    00002 */
  ,     /* QW0259OD EQU x'000000C4' Data page                        */
  ,     /* QW0259OH EQU x'000000C8' Header page                      */
  ,     /* QW0259OI EQU x'000000C9' Index page                       */
  ,     /* QW0259OS EQU x'00000000' Space map page                   */
    =00004 QW0259ST +1 , /* C - Requested lock state for Lock  00003 */
,/* =00005 QW0259LK +0 ,    C - P-lock resource name           00004 */
    =00005 QW0259KL +1 , /* G - LENGTH OF P-LOCK NAME          00004 */
    =00006 RSVD0001 +2 , /* C - RESERVED                       00005 */
    =00008 QW0259KT +1 , /* X - P-LOCK TYPE                    00007 */
  ,     /* QW0259TT EQU x'0000001E' Page P-lock type                 */
    =00009 QW0259KU +1 , /* X - BUFFER POOL INTERNAL ID (0-49  00008 */
    =00010 RSVD0002 +1 , /* C - RESERVED                       00009 */
    =00011 QW0259KD +2 , /* C - DATABASE ID                    0000A */
    =00013 QW0259KP +2 , /* C - PAGESET OBID                   0000C */
    =00015 QW0259KR +2 , /* C - PARTITION NUMBER (ZERO IF THIS 0000E */
    =00017 QW0259KQ +3 , /* C - Relative page number           00010 */
    =00020 RSVD0003 +17 , /* C - 17 BYTES OF ZEROS             00013 */
    =00037 QW0259TK +4 , /* C - (S)Lock token                  00024 */
    =00041 QW0259PS +1 , /* X - Previously held P-lock state ( 00028 */
    =00042 QW0259NS +1 , /* X - Newly held P-lock state (see P 00029 */
    =00043 RSVD0004 +2 , /* C - Reserved                       0002A */
    =00045 QW0259RC +4 , /* F - (S)IRLM RETURN CODE            0002C */
    =00049 QW0259RS +4 , /* X - (S)IRLM RETURN SUBCODES        00030 */
    =00053 QW0259PC +2 , /* H - (S)P-LOCK EXIT REASON CODE     00034 */
    =00055 QW0259F1 +1 , /* X - REQUEST FLAGS                  00036 */
  ,     /* QW0259C1 EQU x'00000080' 1 = CONDITIONAL REQUEST          */
  ,     /* QW0259C6 EQU x'00000004' 1 = RESTART LOCK REQUEST         */
  ,     /* QW0259C7 EQU x'00000002' 1 = MODIFY LOCK                  */
    =00056 RSVD0005 +1 , /* C - Reserved                       00037 */
    =00057 QW0259DB +8 , /* C - If QW0259IF ¬= X FF  then this 00038 */
,/* =00065 QW0259EN +0 ,    C - END OF QW0251                  00040 */
  ,     /* QW0259S0 EQU x'00000000' NOT HELD                         */
  ,     /* QW0259S4 EQU x'00000004' SHARE (S)                        */
  ,     /* QW0259S8 EQU x'00000008' EXCLUSIVE (X)                    */
  ,     /* QW0259FF EQU x'000000FF' REQUEST WAS DENIED               */
    .           /* End of DSECT */
  /* next byte at 65 */
  hex_QW0259EV = c2x(QW0259EV)
  hex_QW0259IF = c2x(QW0259IF)
  hex_QW0259OB = c2x(QW0259OB)
  hex_QW0259ST = c2x(QW0259ST)
  hex_QW0259KL = c2x(QW0259KL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0259KT = c2x(QW0259KT)
  hex_QW0259KU = c2x(QW0259KU)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0259KD = c2x(QW0259KD)
  hex_QW0259KP = c2x(QW0259KP)
  hex_QW0259KR = c2x(QW0259KR)
  hex_QW0259KQ = c2x(QW0259KQ)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0259TK = c2x(QW0259TK)
  hex_QW0259PS = c2x(QW0259PS)
  hex_QW0259NS = c2x(QW0259NS)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0259RC = c2x(QW0259RC)
  hex_QW0259RS = c2x(QW0259RS)
  hex_QW0259PC = c2x(QW0259PC)
  hex_QW0259F1 = c2x(QW0259F1)
  hex_RSVD0005 = c2x(RSVD0005)
  hex_QW0259DB = c2x(QW0259DB)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0259",desired_dsect) > 0)) then do
    void_rc = queue_QW0259_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0259:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0259_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0259:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Event causing the P-lock  x:" hex_QW0259EV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IRLM function code           x:" hex_QW0259IF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Object type                  x:" hex_QW0259OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Requested lock state for Loc x:" hex_QW0259ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF P-LOCK NAME        x:" hex_QW0259KL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      P-LOCK TYPE                  x:" hex_QW0259KT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      BUFFER POOL INTERNAL ID (0-4 x:" hex_QW0259KU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID                  x:" hex_QW0259KD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0259KP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARTITION NUMBER (ZERO IF TH x:" hex_QW0259KR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Relative page number         x:" hex_QW0259KQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      17 BYTES OF ZEROS            x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Lock token                x:" hex_QW0259TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Previously held P-lock state x:" hex_QW0259PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Newly held P-lock state (see x:" hex_QW0259NS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)IRLM RETURN CODE          x:" hex_QW0259RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)IRLM RETURN SUBCODES      x:" hex_QW0259RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)P-LOCK EXIT REASON CODE   x:" hex_QW0259PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUEST FLAGS                x:" hex_QW0259F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0005
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      If QW0259IF ¬= X FF  then th x:" hex_QW0259DB
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0260 length is 00014
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0260:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0260,20)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0260 Length: 20"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0260 ,
    =00001 QW0260P1 +4 , /* F - (S)XES RETURN CODE             00000 */
    =00005 QW0260P2 +4 , /* F - (S)XES REASON CODE             00004 */
,/* =00009 QW0260N1 +0 ,    C - (S)-  RESTOKEN  FOR CROSS-INVA 00008 */
,/* =00009 QW0260Q3 +0 ,    F - (S)- Castout class feedback fo 00008 */
    =00009 QW0260P3 +4 , /* C - (S)- FIRST 4 BYTES OF  RESTOKE 00008 */
    =00013 QW0260P4 +4 , /* C - (S)- LAST 4 BYTES OF  RESTOKEN 0000C */
,/* =00017 QW0260P5 +0 ,    C - (S)- CCIH CONTENTS FOR READ-ST 00010 */
,/* =00017 QW0260RN +0 ,    C - (S)- # RELIABLE DIRLIST ELEMEN 00010 */
    =00017 QW0260UN +1 , /* C - (S)- INDEX OF FIRST UNPROCESSE 00010 */
    =00018 RSVD0001 +1 , /* C - NOT USED FOR UNLOCK-CASTOUT    00011 */
    =00019 RSVD0002 +2 , /* C - NOT USED FOR UNLOCK-CASTOUT, R 00012 */
,/* =00021 QW0260EN +0 ,    C - END OF QW0260                  00014 */
    .           /* End of DSECT */
  /* next byte at 21 */
  hex_QW0260P1 = c2x(QW0260P1)
  hex_QW0260P2 = c2x(QW0260P2)
  hex_QW0260P3 = c2x(QW0260P3)
  hex_QW0260P4 = c2x(QW0260P4)
  hex_QW0260UN = c2x(QW0260UN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_RSVD0002 = c2x(RSVD0002)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0260",desired_dsect) > 0)) then do
    void_rc = queue_QW0260_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0260:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0260_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0260:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)XES RETURN CODE           x:" hex_QW0260P1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)XES REASON CODE           x:" hex_QW0260P2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- FIRST 4 BYTES OF  RESTO x:" hex_QW0260P3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- LAST 4 BYTES OF  RESTOK x:" hex_QW0260P4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)- INDEX OF FIRST UNPROCES x:" hex_QW0260UN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED FOR UNLOCK-CASTOUT  x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED FOR UNLOCK-CASTOUT, x:" hex_RSVD0002
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0261 length is 0003C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0261:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0261,60)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0261 Length: 60"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0261 ,
    =00001 QW0261BP +4 , /* F - Buffer pool internal ID (0-49  00000 */
    =00005 QW0261RD +4 , /* F - # IXLCACHE read_dirinfo reques 00004 */
    =00009 QW0261DP +4 , /* F - # directory entries for change 00008 */
    =00013 QW0261PL +4 , /* F - # pagesets and partitions for  0000C */
    =00017 QW0261PN +4 , /* F - # pagesets and partitions for  00010 */
    =00021 QW0261PD +4 , /* F - # pageset or partition castout 00014 */
    =00025 QW0261PS +4 , /* F - # pagesets and partitions for  00018 */
    =00029 QW0261OL +6 , /* C - Old global clean-to-dirty LRSN 0001C */
    =00035 QW0261NL +6 , /* C - New global clean-to-dirty LRSN 00022 */
    =00041 QW0261OM +6 , /* C - Old Min(member RSTP) value     00028 */
    =00047 QW0261NM +6 , /* C - New Min(member RSTP) value     0002E */
    =00053 QW0261TS +8 , /* C - Timestamp that GBP checkpoint  00034 */
,/* =00061 QW0261EN +0 ,    C - END OF QW0261                  0003C */
    .           /* End of DSECT */
  /* next byte at 61 */
  hex_QW0261BP = c2x(QW0261BP)
  hex_QW0261RD = c2x(QW0261RD)
  hex_QW0261DP = c2x(QW0261DP)
  hex_QW0261PL = c2x(QW0261PL)
  hex_QW0261PN = c2x(QW0261PN)
  hex_QW0261PD = c2x(QW0261PD)
  hex_QW0261PS = c2x(QW0261PS)
  hex_QW0261OL = c2x(QW0261OL)
  hex_QW0261NL = c2x(QW0261NL)
  hex_QW0261OM = c2x(QW0261OM)
  hex_QW0261NM = c2x(QW0261NM)
  hex_QW0261TS = c2x(QW0261TS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0261",desired_dsect) > 0)) then do
    void_rc = queue_QW0261_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0261:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0261_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0261:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Buffer pool internal ID (0-4 x:" hex_QW0261BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE read_dirinfo requ x:" hex_QW0261RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # directory entries for chan x:" hex_QW0261DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pagesets and partitions fo x:" hex_QW0261PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pagesets and partitions fo x:" hex_QW0261PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pageset or partition casto x:" hex_QW0261PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pagesets and partitions fo x:" hex_QW0261PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Old global clean-to-dirty LR x:" hex_QW0261OL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      New global clean-to-dirty LR x:" hex_QW0261NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Old Min(member RSTP) value   x:" hex_QW0261OM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      New Min(member RSTP) value   x:" hex_QW0261NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timestamp that GBP checkpoin x:" hex_QW0261TS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0262 length is 00030
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0262:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0262,48)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0262 Length: 48"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0262 ,
    =00001 QW0262BP +4 , /* F - Buffer pool internal ID (0-49  00000 */
    =00005 QW0262DP +4 , /* F - # of changed pages in the GBP  00004 */
    =00009 QW0262GT +4 , /* F - # of changed pages required to 00008 */
    =00013 QW0262FC +2 , /* H - First castout class processed  0000C */
    =00015 QW0262LC +2 , /* H - Last castout class processed.  0000E */
    =00017 QW0262RS +4 , /* F - # IXLCACHE read_costats reques 00010 */
    =00021 QW0262RC +4 , /* F - # IXLCACHE read_coclass reques 00014 */
    =00025 QW0262CP +4 , /* F - # of changed page names that w 00018 */
    =00029 QW0262PL +4 , /* F - # pagesets and partitions for  0001C */
    =00033 QW0262PN +4 , /* F - # pagesets and partitions for  00020 */
    =00037 QW0262PD +4 , /* F - # pageset or partition castout 00024 */
    =00041 QW0262TS +8 , /* C - Timestamp that GBPOOLT process 00028 */
,/* =00049 QW0262EN +0 ,    C - END OF QW0262                  00030 */
    .           /* End of DSECT */
  /* next byte at 49 */
  hex_QW0262BP = c2x(QW0262BP)
  hex_QW0262DP = c2x(QW0262DP)
  hex_QW0262GT = c2x(QW0262GT)
  hex_QW0262FC = c2x(QW0262FC)
  hex_QW0262LC = c2x(QW0262LC)
  hex_QW0262RS = c2x(QW0262RS)
  hex_QW0262RC = c2x(QW0262RC)
  hex_QW0262CP = c2x(QW0262CP)
  hex_QW0262PL = c2x(QW0262PL)
  hex_QW0262PN = c2x(QW0262PN)
  hex_QW0262PD = c2x(QW0262PD)
  hex_QW0262TS = c2x(QW0262TS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0262",desired_dsect) > 0)) then do
    void_rc = queue_QW0262_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0262:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0262_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0262:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Buffer pool internal ID (0-4 x:" hex_QW0262BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed pages in the GB x:" hex_QW0262DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed pages required  x:" hex_QW0262GT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      First castout class processe x:" hex_QW0262FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Last castout class processed x:" hex_QW0262LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE read_costats requ x:" hex_QW0262RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE read_coclass requ x:" hex_QW0262RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of changed page names that x:" hex_QW0262CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pagesets and partitions fo x:" hex_QW0262PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pagesets and partitions fo x:" hex_QW0262PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # pageset or partition casto x:" hex_QW0262PD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timestamp that GBPOOLT proce x:" hex_QW0262TS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0263 length is 00040
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0263:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0263,64)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0263 Length: 64"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0263 ,
    =00001 QW0263BP +4 , /* F - Buffer pool internal ID (0-49  00000 */
    =00005 QW0263RS +1 , /* C - Reason castout invoked.  There 00004 */
  ,     /* QW0263R1 EQU x'00000080' CLASST threshold                 */
  ,     /* QW0263R2 EQU x'00000040' GBPOOLT threshold                */
  ,     /* QW0263R3 EQU x'00000020' GBP checkpoint                   */
  ,     /* QW0263R4 EQU x'00000010' Rebuild                          */
  ,     /* QW0263R5 EQU x'00000008' Conversion to non GBP-dependent  */
  ,     /* QW0263R6 EQU x'0000F0F4' Synchronous castout              */
    =00006 QW0263FL +1 , /* X - (S)                            00005 */
  ,     /* QW0263SC EQU x'00000080'                                  */
    =00007 QW0263DB +2 , /* C - Database ID                    00006 */
    =00009 QW0263PS +2 , /* C - Pageset OBID                   00008 */
    =00011 QW0263PT +2 , /* C - Partition number (zero if this 0000A */
    =00013 QW0263PB +4 , /* F - Number of private buffers allo 0000C */
    =00017 QW0263CD +4 , /* F - # IXLCACHE castout_data reques 00010 */
    =00021 QW0263UN +4 , /* F - # IXLCACHE unlock_castout requ 00014 */
    =00025 QW0263RC +4 , /* F - # IXLCACHE read_coclass reques 00018 */
    =00029 QW0263DN +4 , /* F - # IXLCACHE delete_name request 0001C */
    =00033 QW0263IO +4 , /* F - # of write I/O requests        00020 */
    =00037 QW0263TS +8 , /* C - Timestamp that castout process 00024 */
    =00045 QW02632D +4 , /* F - # IXLCACHE delete_name_list re 0002C */
    =00049 QW0263RD +2 , /* H - # Redrives for DELETE_NAME to  00030 */
    =00051 QW02632R +2 , /* H - # Redrives for DELETE_NAME to  00032 */
    =00053 QW0263TD +4 , /* F - Time in microseconds spent doi 00034 */
    =00057 QW02632T +4 , /* F - Time in microseconds spent doi 00038 */
    =00061 QW0263S1 +2 , /* C - (S)                            0003C */
    =00063 QW0263S2 +2 , /* C - (S)                            0003E */
,/* =00065 QW0263EN +0 ,    C - END OF QW0263                  00040 */
    .           /* End of DSECT */
  /* next byte at 65 */
  hex_QW0263BP = c2x(QW0263BP)
  hex_QW0263RS = c2x(QW0263RS)
  hex_QW0263FL = c2x(QW0263FL)
  hex_QW0263DB = c2x(QW0263DB)
  hex_QW0263PS = c2x(QW0263PS)
  hex_QW0263PT = c2x(QW0263PT)
  hex_QW0263PB = c2x(QW0263PB)
  hex_QW0263CD = c2x(QW0263CD)
  hex_QW0263UN = c2x(QW0263UN)
  hex_QW0263RC = c2x(QW0263RC)
  hex_QW0263DN = c2x(QW0263DN)
  hex_QW0263IO = c2x(QW0263IO)
  hex_QW0263TS = c2x(QW0263TS)
  hex_QW02632D = c2x(QW02632D)
  hex_QW0263RD = c2x(QW0263RD)
  hex_QW02632R = c2x(QW02632R)
  hex_QW0263TD = c2x(QW0263TD)
  hex_QW02632T = c2x(QW02632T)
  hex_QW0263S1 = c2x(QW0263S1)
  hex_QW0263S2 = c2x(QW0263S2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0263",desired_dsect) > 0)) then do
    void_rc = queue_QW0263_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0263:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0263_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0263:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Buffer pool internal ID (0-4 x:" hex_QW0263BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason castout invoked.  The x:" hex_QW0263RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0263FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Database ID                  x:" hex_QW0263DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Pageset OBID                 x:" hex_QW0263PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Partition number (zero if th x:" hex_QW0263PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of private buffers al x:" hex_QW0263PB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE castout_data requ x:" hex_QW0263CD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE unlock_castout re x:" hex_QW0263UN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE read_coclass requ x:" hex_QW0263RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE delete_name reque x:" hex_QW0263DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # of write I/O requests      x:" hex_QW0263IO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timestamp that castout proce x:" hex_QW0263TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # IXLCACHE delete_name_list  x:" hex_QW02632D
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Redrives for DELETE_NAME t x:" hex_QW0263RD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      # Redrives for DELETE_NAME t x:" hex_QW02632R
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time in microseconds spent d x:" hex_QW0263TD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time in microseconds spent d x:" hex_QW02632T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0263S1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0263S2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0264 length is 00024
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0264:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0264,36)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0264 Length: 36"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0264 ,
    =00001 QW0264DP +8 , /* D - (S) Dictionary address         00000 */
    =00009 QW0264DV +8 , /* C - (S) Dictionary version         00008 */
    =00017 QW0264PL +8 , /* C - (S) Plan name                  00010 */
    =00025 QW0264OI +4 , /* C - (S) Dbid/Obid                  00018 */
    =00029 QW0264PN +2 , /* H - (S) Part number                0001C */
    =00031 QW0264FN +1 , /* C - (S) Function code              0001E */
    =00032 QW0264FL +1 , /* X - (S) Flags                      0001F */
  ,     /* QW0264B1 EQU x'00000080' (S)                              */
  ,     /* QW0264B2 EQU x'00000040' (S)                              */
  ,     /* QW0264B3 EQU x'00000020' (S)                              */
  ,     /* QW0264B4 EQU x'00000010' (S)                              */
  ,     /* QW0264B5 EQU x'00000080' (S)                              */
  ,     /* QW0264B6 EQU x'00000040' (S)                              */
  ,     /* QW0264B7 EQU x'00000020' (S)                              */
  ,     /* QW0264B8 EQU x'00000010' (S)                              */
    =00033 QW0264UT +4 , /* C - (S) Utility flags              00020 */
    .           /* End of DSECT */
  /* next byte at 37 */
  hex_QW0264DP = c2x(QW0264DP)
  hex_QW0264DV = c2x(QW0264DV)
  hex_QW0264PL = c2x(QW0264PL)
  hex_QW0264OI = c2x(QW0264OI)
  hex_QW0264PN = c2x(QW0264PN)
  hex_QW0264FN = c2x(QW0264FN)
  hex_QW0264FL = c2x(QW0264FL)
  hex_QW0264UT = c2x(QW0264UT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0264",desired_dsect) > 0)) then do
    void_rc = queue_QW0264_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0264:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0264_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0264:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Dictionary address       x:" hex_QW0264DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Dictionary version       x:" hex_QW0264DV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Plan name                x:" hex_QW0264PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Dbid/Obid                x:" hex_QW0264OI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Part number              x:" hex_QW0264PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Function code            x:" hex_QW0264FN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Flags                    x:" hex_QW0264FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) Utility flags            x:" hex_QW0264UT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0265 length is 00028
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0265:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0265,40)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0265 Length: 40"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0265 ,
    =00001 QW0265ID +1 , /* C - (S) FUNCTION CODE              00000 */
  ,     /* QW0265FA EQU x'000000C1' (S) READ OBJECT                  */
  ,     /* QW0265FB EQU x'000000C2' (S) READ ENTRY                   */
  ,     /* QW0265FC EQU x'000000C3' (S) WRITE ENTRY                  */
  ,     /* QW0265FD EQU x'000000C4' (S) DELETE ENTRY                 */
  ,     /* QW0265FE EQU x'000000C5' (S) CONNECT                      */
  ,     /* QW0265FF EQU x'000000C6' (S) DISCONNECT                   */
  ,     /* QW0265FG EQU x'000000C7' (S) RESPONSE                     */
  ,     /* QW0265FH EQU x'000000C8' (S) REBUILD START                */
  ,     /* QW0265FK EQU x'000000D2' (S) REBUILD CONNECT              */
  ,     /* QW0265FL EQU x'000000D3' (S) FORCE                        */
  ,     /* QW0265FM EQU x'000000D4' (S) REBUILD STOP                 */
    =00002 QW0265OB +8 , /* C - (S) OBJECT NAME                00001 */
    =00010 RSVD0001 +1 , /* C - (S) RESERVED                   00009 */
,/* =00011 QW0265NM +0 ,    C - (S) ENTRY NAME                 0000A */
    =00011 QW0265HR +2 , /* H - (S) LIST HEADER NUMBER         0000A */
    =00013 QW0265N1 +14 , /* C - (S) ENTRY NAME SUPPLIED BY US 0000C */
    =00027 RSVD0002 +2 , /* C - (S) RESERVED                   0001A */
    =00029 QW0265BF +4 , /* A - (S) BUFFER ADDRESS             0001C */
    =00033 QW0265TK +8 , /* C - (S) CONTINUE TOKEN FOR READ OB 00020 */
,/* =00041 QW0265EN +0 ,    C - (S) END OF QW0265              00028 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW0265ID = c2x(QW0265ID)
  hex_QW0265OB = c2x(QW0265OB)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0265HR = c2x(QW0265HR)
  hex_QW0265N1 = c2x(QW0265N1)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0265BF = c2x(QW0265BF)
  hex_QW0265TK = c2x(QW0265TK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0265",desired_dsect) > 0)) then do
    void_rc = queue_QW0265_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0265:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0265_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0265:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) FUNCTION CODE            x:" hex_QW0265ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) OBJECT NAME              x:" hex_QW0265OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) RESERVED                 x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) LIST HEADER NUMBER       x:" hex_QW0265HR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) ENTRY NAME SUPPLIED BY U x:" hex_QW0265N1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) RESERVED                 x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) BUFFER ADDRESS           x:" hex_QW0265BF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) CONTINUE TOKEN FOR READ  x:" hex_QW0265TK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0266 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0266:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0266,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0266 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0266 ,
    =00001 QW0266RC +4 , /* F - (S) RETURN CODE                00000 */
    =00005 QW0266RS +4 , /* F - (S) REASON CODE                00004 */
    =00009 QW0266TK +8 , /* C - (S) CONTINUE TOKEN FOR READ OB 00008 */
,/* =00017 QW0266EN +0 ,    C - (S) END OF QW0266              00010 */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0266RC = c2x(QW0266RC)
  hex_QW0266RS = c2x(QW0266RS)
  hex_QW0266TK = c2x(QW0266TK)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0266",desired_dsect) > 0)) then do
    void_rc = queue_QW0266_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0266:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0266_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0266:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) RETURN CODE              x:" hex_QW0266RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) REASON CODE              x:" hex_QW0266RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S) CONTINUE TOKEN FOR READ  x:" hex_QW0266TK
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0267 length is 00024
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0267:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0267,36)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0267 Length: 36"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0267 ,
    =00001 QW0267RS +1 , /* C - Function code                  00000 */
  ,     /* QW0267FL EQU x'000000C6' Rebuild due to CF structure fail */
  ,     /* QW0267OP EQU x'000000D6' Rebuild initiated by MVS         */
  ,     /* QW0267MU EQU x'000000D4' Rebuild due to Lock structure ma */
  ,     /* QW0267AL EQU x'000000C1' Dynamic expand/contract initiate */
  ,     /* QW0267DP EQU x'000000C4' Rebuild started to establish dup */
  ,     /* QW0267FB EQU x'000000D7' Duplexing being stopped, falling */
  ,     /* QW0267SW EQU x'00000000' Duplexing being stopped, switchi */
  ,     /* QW0267AS EQU x'00000000' Dynamic expand/contract initiate */
    =00002 RSVD0001 +3 , /* C - Reserved                       00001 */
    =00005 QW0267NM +16 , /* C - CF structure name             00004 */
    =00021 QW0267F1 +1 , /* C - (S)Flags                       00014 */
    =00022 RSVD0002 +3 , /* C - Reserved                       00015 */
    =00025 QW0267SZ +4 , /* F - Requested size (in 4K incremen 00018 */
    =00029 QW0267ER +2 , /* H - (S)                            0001C */
    =00031 QW0267LR +2 , /* H - (S)                            0001E */
    =00033 QW0267F2 +2 , /* C - (S)Flags                       00020 */
    =00035 QW0267ME +1 , /* X - (S)% available entries         00022 */
    =00036 QW0267ML +1 , /* X - (S)% available elements        00023 */
,/* =00037 QW0267EN +0 ,    C - END OF QW0267                  00024 */
    .           /* End of DSECT */
  /* next byte at 37 */
  hex_QW0267RS = c2x(QW0267RS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0267NM = c2x(QW0267NM)
  hex_QW0267F1 = c2x(QW0267F1)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0267SZ = c2x(QW0267SZ)
  hex_QW0267ER = c2x(QW0267ER)
  hex_QW0267LR = c2x(QW0267LR)
  hex_QW0267F2 = c2x(QW0267F2)
  hex_QW0267ME = c2x(QW0267ME)
  hex_QW0267ML = c2x(QW0267ML)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0267",desired_dsect) > 0)) then do
    void_rc = queue_QW0267_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0267:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0267_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0267:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Function code                x:" hex_QW0267RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CF structure name            x:" hex_QW0267NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Flags                     x:" hex_QW0267F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Requested size (in 4K increm x:" hex_QW0267SZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0267ER
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0267LR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)Flags                     x:" hex_QW0267F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)% available entries       x:" hex_QW0267ME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)% available elements      x:" hex_QW0267ML
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0268 length is 0004C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0268:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0268,76)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0268 Length: 76"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0268 ,
    =00001 QW0268FC +1 , /* C - Function code                  00000 */
  ,     /* QW0268FR EQU x'000000C6' Rebuild due to CF structure fail */
  ,     /* QW0268OR EQU x'000000D6' Rebuild initiated by MVS         */
  ,     /* QW0268CR EQU x'000000C3' Rebuild to facilitate a group fu */
  ,     /* QW0268MU EQU x'000000D4' Rebuild due to Lock structure ma */
  ,     /* QW0268AL EQU x'000000C1' Dynamic expand/contract initiate */
  ,     /* QW0268DP EQU x'000000C4' Rebuild started to establish dup */
  ,     /* QW0268FB EQU x'000000D7' Duplexing stopped, fallback to   */
  ,     /* QW0268SW EQU x'00000000' Duplexing stopped, switch to     */
  ,     /* QW0268AS EQU x'00000000' Dynamic expand/contract initiate */
  ,     /* QW0268SC EQU x'000000C2' Structure state change for duple */
    =00002 QW0268RC +1 , /* C - Result code                    00001 */
  ,     /* QW0268OK EQU x'000000F0' Successful completion            */
  ,     /* QW0268NS EQU x'000000D5' Structure alter completed, but   */
  ,     /* QW0268ST EQU x'00000000' Rebuild, structure alter or dupl */
    =00003 QW0268RS +1 , /* C - Stop reason code when QW0268RC 00002 */
  ,     /* QW0268RM EQU x'000000D9' Resource manager requested to st */
  ,     /* QW0268FL EQU x'000000C6' Structure failed before the oper */
  ,     /* QW0268OP EQU x'000000D6' Operator requested to stop       */
  ,     /* QW0268LS EQU x'000000D3' Lost connectivity to the structu */
  ,     /* QW0268RG EQU x'000000D2' Rebuild process was stopped beca */
  ,     /* QW0268RT EQU x'00000000' Rebuild process was stopped beca */
  ,     /* QW0268RU EQU x'00000000' Rebuild process was stopped beca */
  ,     /* QW0268RW EQU x'00000000' Rebuild stopped due to successfu */
  ,     /* QW0268RX EQU x'00000000' Rebuild stopped due to unsuccess */
  ,     /* QW0268PL EQU x'000000D7' Duplexing was stopped by new CFR */
  ,     /* QW0268GL EQU x'000000C7' An MVS service failed before the */
  ,     /* QW0268RB EQU x'000000D1' The structure alter request coul */
  ,     /* QW0268IC EQU x'000000C9' New structure does not provide   */
  ,     /* QW0268NB EQU x'000000D5' New structure does not provide b */
  ,     /* QW0268CC EQU x'000000C3' Duplexing rebuild stopped becaus */
  ,     /* QW0268SI EQU x'00000000' (S)Invalid ratio specified       */
    =00004 RSVD0001 +1 , /* C - Reserved                       00003 */
    =00005 QW0268BT +8 , /* C - Begin-timestamp of the operati 00004 */
    =00013 QW0268NM +16 , /* C - CF structure name             0000C */
    =00029 QW0268MS +4 , /* F - Current minimum structure size 0001C */
    =00033 QW0268CS +4 , /* F - Current structure size (in 4K  00020 */
    =00037 QW0268DN +4 , /* F - Current directory entry count  00024 */
    =00041 QW0268TN +4 , /* F - Current element count.  For GB 00028 */
    =00045 QW0268OV +16 , /* C - Old primary,secondary structu 0002C */
    =00061 QW0268NV +16 , /* C - New PRIMARY,secondary structu 0003C */
,/* =00077 QW0268EN +0 ,    C - END OF QW0268                  0004C */
    .           /* End of DSECT */
  /* next byte at 77 */
  hex_QW0268FC = c2x(QW0268FC)
  hex_QW0268RC = c2x(QW0268RC)
  hex_QW0268RS = c2x(QW0268RS)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0268BT = c2x(QW0268BT)
  hex_QW0268NM = c2x(QW0268NM)
  hex_QW0268MS = c2x(QW0268MS)
  hex_QW0268CS = c2x(QW0268CS)
  hex_QW0268DN = c2x(QW0268DN)
  hex_QW0268TN = c2x(QW0268TN)
  hex_QW0268OV = c2x(QW0268OV)
  hex_QW0268NV = c2x(QW0268NV)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0268",desired_dsect) > 0)) then do
    void_rc = queue_QW0268_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0268:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0268_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0268:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Function code                x:" hex_QW0268FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Result code                  x:" hex_QW0268RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Stop reason code when QW0268 x:" hex_QW0268RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Begin-timestamp of the opera x:" hex_QW0268BT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CF structure name            x:" hex_QW0268NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current minimum structure si x:" hex_QW0268MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current structure size (in 4 x:" hex_QW0268CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current directory entry coun x:" hex_QW0268DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current element count.  For  x:" hex_QW0268TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Old primary,secondary struct x:" hex_QW0268OV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      New PRIMARY,secondary struct x:" hex_QW0268NV
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0269 length is 00026
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0269:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0269,38)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0269 Length: 38"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0269 ,
    =00001 QW0269TY +1 , /* C - TYPE of trusted connection.    00000 */
  ,     /* QW0269CN EQU x'000000C5' Establish trusted connection     */
  ,     /* QW0269RE EQU x'000000D9' Reuse trusted connection         */
    =00002 QW0269ST +1 , /* C - STATUS                         00001 */
  ,     /* QW0269SC EQU x'00000000' Success                          */
  ,     /* QW0269FL EQU x'000000C6' Failed                           */
    =00003 RSVD0001 +2 , /* C - RESERVED                       00002 */
    =00005 QW0269SQ +4 , /* F - SQLCODE                        00004 */
    =00009 QW0269TC_Off +2 , /* H - Offset from QW0269 to Trus 00008 */
    =00011 QW0269SA_Off +2 , /* H - Offset from QW0269 to SYST 0000A */
    =00013 QW0269RC_Off +2 , /* H - Offset from QW0269 to ROLE 0000C */
    =00015 QW0269OT +1 , /* C - Owner of objects created in a  0000E */
  ,     /* QW0269RL EQU x'000000D9' Role                             */
  ,     /* QW0269AU EQU x'000000C1' Authid                           */
    =00016 QW0269SL +8 , /* C - SECURITY LABEL                 0000F */
    =00024 RSVD0002 +1 , /* C - RESERVED                       00017 */
    =00025 QW0269AD_Off +2 , /* H - Offset from QW0269 to TCP/ 00018 */
    =00027 QW0269SR_Off +2 , /* H - Offset from QW0269 to SERV 0001A */
    =00029 QW0269EC_Off +2 , /* H - Offset from QW0269 to ENCR 0001C */
    =00031 QW0269JN_Off +2 , /* H - Offset from QW0269 to JOBN 0001E */
    =00033 QW0269RA_Off +2 , /* H - Offset from QW0269 to reus 00020 */
    =00035 QW0269RU_Off +2 , /* H - Offset from QW0269 to user 00022 */
    =00037 QW0269PR_Off +2 , /* H - Offset from QW0269 to prof 00024 */
,/* =00039 QW0269EN +0 ,    C - End of the record              00026 */
    =00001 QW0269TC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269TC_Var +0 ,    C - %U Trusted context name    00002 */
    =00001 QW0269SA_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269SA_Var +0 ,    C - %U SYSTEM AUTHID used to e 00002 */
    =00001 QW0269RC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269RC_Var +0 ,    C - %U Default context role    00002 */
    =00001 QW0269AD_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269AD_Var +0 ,    C - %U Actual TCP/IP address u 00002 */
    =00001 QW0269SR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269SR_Var +0 ,    C - %U SERVAUTH TCP/IP securit 00002 */
    =00001 QW0269EC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269EC_Var +0 ,    C - %U ENCRYPTION value        00002 */
    =00001 QW0269JN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269JN_Var +0 ,    C - %U Jobname for local appli 00002 */
    =00001 QW0269RA_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269RA_Var +0 ,    C - %U AUTHID under which a tr 00002 */
    =00001 QW0269RU_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269RU_Var +0 ,    C - %U User Role               00002 */
    =00001 QW0269PR_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0269PR_Var +0 ,    C - %U Profile name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0269TY = c2x(QW0269TY)
  hex_QW0269ST = c2x(QW0269ST)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0269SQ = c2x(QW0269SQ)
  hex_QW0269TC_Off = c2x(QW0269TC_Off)
  hex_QW0269SA_Off = c2x(QW0269SA_Off)
  hex_QW0269RC_Off = c2x(QW0269RC_Off)
  hex_QW0269OT = c2x(QW0269OT)
  hex_QW0269SL = c2x(QW0269SL)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0269AD_Off = c2x(QW0269AD_Off)
  hex_QW0269SR_Off = c2x(QW0269SR_Off)
  hex_QW0269EC_Off = c2x(QW0269EC_Off)
  hex_QW0269JN_Off = c2x(QW0269JN_Off)
  hex_QW0269RA_Off = c2x(QW0269RA_Off)
  hex_QW0269RU_Off = c2x(QW0269RU_Off)
  hex_QW0269PR_Off = c2x(QW0269PR_Off)
  hex_QW0269TC_Len = c2x(QW0269TC_Len)
  hex_QW0269SA_Len = c2x(QW0269SA_Len)
  hex_QW0269RC_Len = c2x(QW0269RC_Len)
  hex_QW0269AD_Len = c2x(QW0269AD_Len)
  hex_QW0269SR_Len = c2x(QW0269SR_Len)
  hex_QW0269EC_Len = c2x(QW0269EC_Len)
  hex_QW0269JN_Len = c2x(QW0269JN_Len)
  hex_QW0269RA_Len = c2x(QW0269RA_Len)
  hex_QW0269RU_Len = c2x(QW0269RU_Len)
  hex_QW0269PR_Len = c2x(QW0269PR_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0269",desired_dsect) > 0)) then do
    void_rc = queue_QW0269_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0269:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0269_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0269:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE of trusted connection.  x:" hex_QW0269TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATUS                       x:" hex_QW0269ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLCODE                      x:" hex_QW0269SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to Truste x:" hex_QW0269TC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to SYSTEM x:" hex_QW0269SA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to ROLE a x:" hex_QW0269RC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Owner of objects created in  x:" hex_QW0269OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECURITY LABEL               x:" hex_QW0269SL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to TCP/IP x:" hex_QW0269AD_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to SERVAU x:" hex_QW0269SR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to ENCRYP x:" hex_QW0269EC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to JOBNAM x:" hex_QW0269JN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to reuse  x:" hex_QW0269RA_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to user R x:" hex_QW0269RU_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0269 to profil x:" hex_QW0269PR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269TC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269SA_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269RC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269AD_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269SR_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269EC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269JN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269RA_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269RU_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0269PR_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0270 length is 0000C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0270:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0270,12)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0270 Length: 12"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0270 ,
    =00001 QW0270TY +1 , /* C - Statement type                 00000 */
  ,     /* QW0270CR EQU x'000000C3' CREATE Trusted Context           */
  ,     /* QW0270AL EQU x'000000C1' ALTER Trusted Context            */
    =00002 RSVD0001 +3 , /* C - RESERVED                       00001 */
    =00005 QW0270SQ +4 , /* F - SQLCODE                        00004 */
    =00009 QW0270SL +4 , /* F - SQL statement length           00008 */
,/* =00013 QW0270SS +0 ,    C - Variable length SQL statement  0000C */
    .           /* End of DSECT */
  /* next byte at 13 */
  hex_QW0270TY = c2x(QW0270TY)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0270SQ = c2x(QW0270SQ)
  hex_QW0270SL = c2x(QW0270SL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0270",desired_dsect) > 0)) then do
    void_rc = queue_QW0270_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0270:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0270_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0270:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement type               x:" hex_QW0270TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLCODE                      x:" hex_QW0270SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL statement length         x:" hex_QW0270SL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0272 length is 0008A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0272:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0272,138)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0272 Length: 138"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0272 ,
    =00001 QW0272LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0272PC +18 , /* C - %U PKG COLLECTION ID          00010 */
    =00035 QW0272PG +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0272TS +8 , /* C - PROGRAM PRECOMPILE TIMESTAMP   00034 */
    =00061 QW0272SN +4 , /* F - STATEMENT NUMBER               0003C */
    =00065 QW0272LL +2 , /* X - PROC LOCATION LEN (0-18)       00040 */
    =00067 QW0272LP +18 , /* C - %U LOCATION OF STORED PROCEDU 00042 */
    =00085 QW0272QL +2 , /* X - PROC QUALIFIER LEN (0-18)      00054 */
    =00087 QW0272QN +18 , /* C - %U QUALIFIER OF STORED PROCED 00056 */
    =00105 QW0272PL +2 , /* X - PROCEDURE NAME LEN (0-18)      00068 */
    =00107 QW0272PN +18 , /* C - %U STORED PROCEDURE NAME      0006A */
    =00125 QW0272NL +2 , /* X - NUMBER OF LOCATORS             0007C */
    =00127 QW0272LN_Off +2 , /* H - Offset from QW0272 to      0007E */
    =00129 QW0272PC_Off +2 , /* H - Offset from QW0272 to      00080 */
    =00131 QW0272PG_Off +2 , /* H - Offset from QW0272 to      00082 */
    =00133 QW0272LP_Off +2 , /* H - Offset from QW0272 to      00084 */
    =00135 QW0272QN_Off +2 , /* H - Offset from QW0272 to      00086 */
    =00137 QW0272PN_Off +2 , /* H - Offset from QW0272 to      00088 */
    =00001 QW0272LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0272LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0272PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0272PC_Var +0 ,    C - %U PKG COLLECTION ID       00002 */
    =00001 QW0272PG_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0272PG_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0272LP_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0272LP_Var +0 ,    C - %U LOCATION OF STORED PROC 00002 */
    =00001 QW0272QN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0272QN_Var +0 ,    C - %U QUALIFIER OF STORED PRO 00002 */
    =00001 QW0272PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0272PN_Var +0 ,    C - %U STORED PROCEDURE NAME   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0272LN = c2x(QW0272LN)
  hex_QW0272PC = c2x(QW0272PC)
  hex_QW0272PG = c2x(QW0272PG)
  hex_QW0272TS = c2x(QW0272TS)
  hex_QW0272SN = c2x(QW0272SN)
  hex_QW0272LL = c2x(QW0272LL)
  hex_QW0272LP = c2x(QW0272LP)
  hex_QW0272QL = c2x(QW0272QL)
  hex_QW0272QN = c2x(QW0272QN)
  hex_QW0272PL = c2x(QW0272PL)
  hex_QW0272PN = c2x(QW0272PN)
  hex_QW0272NL = c2x(QW0272NL)
  hex_QW0272LN_Off = c2x(QW0272LN_Off)
  hex_QW0272PC_Off = c2x(QW0272PC_Off)
  hex_QW0272PG_Off = c2x(QW0272PG_Off)
  hex_QW0272LP_Off = c2x(QW0272LP_Off)
  hex_QW0272QN_Off = c2x(QW0272QN_Off)
  hex_QW0272PN_Off = c2x(QW0272PN_Off)
  hex_QW0272LN_Len = c2x(QW0272LN_Len)
  hex_QW0272PC_Len = c2x(QW0272PC_Len)
  hex_QW0272PG_Len = c2x(QW0272PG_Len)
  hex_QW0272LP_Len = c2x(QW0272LP_Len)
  hex_QW0272QN_Len = c2x(QW0272QN_Len)
  hex_QW0272PN_Len = c2x(QW0272PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0272",desired_dsect) > 0)) then do
    void_rc = queue_QW0272_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0272:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0272_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0272:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0272LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PKG COLLECTION ID         x:" hex_QW0272PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0272PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROGRAM PRECOMPILE TIMESTAMP x:" hex_QW0272TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0272SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROC LOCATION LEN (0-18)     x:" hex_QW0272LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION OF STORED PROCED x:" hex_QW0272LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROC QUALIFIER LEN (0-18)    x:" hex_QW0272QL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U QUALIFIER OF STORED PROCE x:" hex_QW0272QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROCEDURE NAME LEN (0-18)    x:" hex_QW0272PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U STORED PROCEDURE NAME     x:" hex_QW0272PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOCATORS           x:" hex_QW0272NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0272 to        x:" hex_QW0272LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0272 to        x:" hex_QW0272PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0272 to        x:" hex_QW0272PG_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0272 to        x:" hex_QW0272LP_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0272 to        x:" hex_QW0272QN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0272 to        x:" hex_QW0272PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0272LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0272PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0272PG_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0272LP_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0272QN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0272PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0273 length is 000C8
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0273:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0273,200)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0273 Length: 200"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0273 ,
    =00001 QW0273LN +16 , /* C - %U LOCATION NAME              00000 */
    =00017 QW0273PC +18 , /* C - %U PKG COLLECTION ID          00010 */
    =00035 QW0273PG +18 , /* C - %U PROGRAM NAME               00022 */
    =00053 QW0273TS +8 , /* C - PROGRAM PRECOMPILE TIMESTAMP   00034 */
    =00061 QW0273SN +4 , /* F - STATEMENT NUMBER               0003C */
    =00065 QW0273CL +2 , /* X - CURSOR NAME LENGTH (0-18)      00040 */
    =00067 QW0273CN +18 , /* C - %U ALLOCATE CURSOR NAME       00042 */
    =00085 QW0273RL +2 , /* X - REAL CURS NAME LEN (0-18)      00054 */
    =00087 QW0273RN +18 , /* C - %U REAL CURSOR NAME IN ST. PR 00056 */
    =00105 QW0273LL +2 , /* X - PROC LOCATION LEN (0-18)       00068 */
    =00107 QW0273LP +18 , /* C - %U LOCATION OF STORED PROCEDU 0006A */
    =00125 QW0273QL +2 , /* X - PROC QUALIFIER LEN (0-18)      0007C */
    =00127 QW0273QN +18 , /* C - %U QUALIFIER OF STORED PROCED 0007E */
    =00145 QW0273PL +2 , /* X - PROCEDURE NAME LEN (0-18)      00090 */
    =00147 QW0273PN +18 , /* C - %U STORED PROCEDURE NAME      00092 */
    =00165 QW0273LV +4 , /* F - LOCATOR VALUE                  000A4 */
    =00169 QW0273LN_Off +2 , /* H - Offset from QW0273 to      000A8 */
    =00171 QW0273PC_Off +2 , /* H - Offset from QW0273 to      000AA */
    =00173 QW0273PG_Off +2 , /* H - Offset from QW0273 to      000AC */
    =00175 QW0273CN_Off +2 , /* H - Offset from QW0273 to      000AE */
    =00177 QW0273RN_Off +2 , /* H - Offset from QW0273 to      000B0 */
    =00179 QW0273LP_Off +2 , /* H - Offset from QW0273 to      000B2 */
    =00181 QW0273QN_Off +2 , /* H - Offset from QW0273 to      000B4 */
    =00183 QW0273PN_Off +2 , /* H - Offset from QW0273 to      000B6 */
    =00185 QW0273CID +8 , /* X - QUERY COMMAND ID              000B8 */
    =00193 QW0273QID +8 , /* X - QUERY INSTANCE ID             000C0 */
    =00001 QW0273LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273LN_Var +0 ,    C - %U LOCATION NAME           00002 */
    =00001 QW0273PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273PC_Var +0 ,    C - %U PKG COLLECTION ID       00002 */
    =00001 QW0273PG_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273PG_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0273CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273CN_Var +0 ,    C - %U ALLOCATE CURSOR NAME    00002 */
    =00001 QW0273RN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273RN_Var +0 ,    C - %U REAL CURSOR NAME IN ST. 00002 */
    =00001 QW0273LP_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273LP_Var +0 ,    C - %U LOCATION OF STORED PROC 00002 */
    =00001 QW0273QN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273QN_Var +0 ,    C - %U QUALIFIER OF STORED PRO 00002 */
    =00001 QW0273PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0273PN_Var +0 ,    C - %U STORED PROCEDURE NAME   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0273LN = c2x(QW0273LN)
  hex_QW0273PC = c2x(QW0273PC)
  hex_QW0273PG = c2x(QW0273PG)
  hex_QW0273TS = c2x(QW0273TS)
  hex_QW0273SN = c2x(QW0273SN)
  hex_QW0273CL = c2x(QW0273CL)
  hex_QW0273CN = c2x(QW0273CN)
  hex_QW0273RL = c2x(QW0273RL)
  hex_QW0273RN = c2x(QW0273RN)
  hex_QW0273LL = c2x(QW0273LL)
  hex_QW0273LP = c2x(QW0273LP)
  hex_QW0273QL = c2x(QW0273QL)
  hex_QW0273QN = c2x(QW0273QN)
  hex_QW0273PL = c2x(QW0273PL)
  hex_QW0273PN = c2x(QW0273PN)
  hex_QW0273LV = c2x(QW0273LV)
  hex_QW0273LN_Off = c2x(QW0273LN_Off)
  hex_QW0273PC_Off = c2x(QW0273PC_Off)
  hex_QW0273PG_Off = c2x(QW0273PG_Off)
  hex_QW0273CN_Off = c2x(QW0273CN_Off)
  hex_QW0273RN_Off = c2x(QW0273RN_Off)
  hex_QW0273LP_Off = c2x(QW0273LP_Off)
  hex_QW0273QN_Off = c2x(QW0273QN_Off)
  hex_QW0273PN_Off = c2x(QW0273PN_Off)
  hex_QW0273CID = c2x(QW0273CID)
  hex_QW0273QID = c2x(QW0273QID)
  hex_QW0273LN_Len = c2x(QW0273LN_Len)
  hex_QW0273PC_Len = c2x(QW0273PC_Len)
  hex_QW0273PG_Len = c2x(QW0273PG_Len)
  hex_QW0273CN_Len = c2x(QW0273CN_Len)
  hex_QW0273RN_Len = c2x(QW0273RN_Len)
  hex_QW0273LP_Len = c2x(QW0273LP_Len)
  hex_QW0273QN_Len = c2x(QW0273QN_Len)
  hex_QW0273PN_Len = c2x(QW0273PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0273",desired_dsect) > 0)) then do
    void_rc = queue_QW0273_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0273:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0273_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0273:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION NAME             x:" hex_QW0273LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PKG COLLECTION ID         x:" hex_QW0273PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0273PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROGRAM PRECOMPILE TIMESTAMP x:" hex_QW0273TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STATEMENT NUMBER             x:" hex_QW0273SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR NAME LENGTH (0-18)    x:" hex_QW0273CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U ALLOCATE CURSOR NAME      x:" hex_QW0273CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REAL CURS NAME LEN (0-18)    x:" hex_QW0273RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U REAL CURSOR NAME IN ST. P x:" hex_QW0273RN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROC LOCATION LEN (0-18)     x:" hex_QW0273LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U LOCATION OF STORED PROCED x:" hex_QW0273LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROC QUALIFIER LEN (0-18)    x:" hex_QW0273QL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U QUALIFIER OF STORED PROCE x:" hex_QW0273QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PROCEDURE NAME LEN (0-18)    x:" hex_QW0273PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U STORED PROCEDURE NAME     x:" hex_QW0273PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOCATOR VALUE                x:" hex_QW0273LV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273PG_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273RN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273LP_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273QN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0273 to        x:" hex_QW0273PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY COMMAND ID             x:" hex_QW0273CID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY INSTANCE ID            x:" hex_QW0273QID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273PG_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273CN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273RN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273LP_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273QN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0273PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0274 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0274:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0274,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0274 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0274 ,
,/* =00001 QW0274SQ +0 ,    C - NO DATA NEEDED FOR IFCID 274   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0274",desired_dsect) > 0)) then do
    void_rc = queue_QW0274_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0274:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0274_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0274:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0275 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0275:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0275,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0275 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0275 ,
,/* =00001 QW0275ND +0 ,    C - NO DATA NEEDED FOR IFCID 275   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0275",desired_dsect) > 0)) then do
    void_rc = queue_QW0275_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0275:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0275_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0275:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0276 length is 00000
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0276:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0276,0)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0276 Length: 0"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0276 ,
,/* =00001 QW0276ND +0 ,    C - NO DATA NEEDED FOR IFCID 276   00000 */
    .           /* End of DSECT */
  /* next byte at 1 */
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0276",desired_dsect) > 0)) then do
    void_rc = queue_QW0276_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0276:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0276_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0276:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0277 length is 0001D
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0277:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0277,29)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0277 Length: 29"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0277 ,
    =00001 QW0277MN +4 , /* C - MODULE NAME                    00000 */
    =00005 QW0277HD +4 , /* C - RP OPCODE AND EYEC             00004 */
    =00009 QW0277RT +4 , /* F - ADDRESS OF RT                  00008 */
    =00013 QW0277SA +4 , /* F - ADDRESS OF STORAGE             0000C */
    =00017 QW0277SS +4 , /* F - AMOUNT OF STORAGE SIZE ACQUIRE 00010 */
    =00021 QW0277TC +4 , /* F - TCB OF STORAGE                 00014 */
    =00025 QW0277RC +4 , /* F - RC FROM STORAGE OBTAIN CALL    00018 */
    =00029 QW0277ST +1 , /* C - STORAGE ACQUIRED FOR LOB/NONLO 0001C */
    .           /* End of DSECT */
  /* next byte at 30 */
  hex_QW0277MN = c2x(QW0277MN)
  hex_QW0277HD = c2x(QW0277HD)
  hex_QW0277RT = c2x(QW0277RT)
  hex_QW0277SA = c2x(QW0277SA)
  hex_QW0277SS = c2x(QW0277SS)
  hex_QW0277TC = c2x(QW0277TC)
  hex_QW0277RC = c2x(QW0277RC)
  hex_QW0277ST = c2x(QW0277ST)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0277",desired_dsect) > 0)) then do
    void_rc = queue_QW0277_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0277:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0277_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0277:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MODULE NAME                  x:" hex_QW0277MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RP OPCODE AND EYEC           x:" hex_QW0277HD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF RT                x:" hex_QW0277RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF STORAGE           x:" hex_QW0277SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF STORAGE SIZE ACQUI x:" hex_QW0277SS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TCB OF STORAGE               x:" hex_QW0277TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RC FROM STORAGE OBTAIN CALL  x:" hex_QW0277RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORAGE ACQUIRED FOR LOB/NON x:" hex_QW0277ST
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0278 length is 0001D
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0278:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0278,29)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0278 Length: 29"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0278 ,
    =00001 QW0278MN +4 , /* C - MODULE NAME                    00000 */
    =00005 QW0278HD +4 , /* C - RP OPCODE AND EYEC             00004 */
    =00009 QW0278RT +4 , /* F - ADDRESS OF RT                  00008 */
    =00013 QW0278SA +4 , /* F - ADDRESS OF STORAGE             0000C */
    =00017 QW0278SS +4 , /* F - AMOUNT OF STORAGE SIZE FREED   00010 */
    =00021 QW0278TC +4 , /* F - TCB OF STORAGE                 00014 */
    =00025 QW0278RC +4 , /* F - RC FROM STORAGE RELEASE CALL   00018 */
    =00029 QW0278ST +1 , /* C - STORAGE FREED FOR LOB/NONLOB   0001C */
    .           /* End of DSECT */
  /* next byte at 30 */
  hex_QW0278MN = c2x(QW0278MN)
  hex_QW0278HD = c2x(QW0278HD)
  hex_QW0278RT = c2x(QW0278RT)
  hex_QW0278SA = c2x(QW0278SA)
  hex_QW0278SS = c2x(QW0278SS)
  hex_QW0278TC = c2x(QW0278TC)
  hex_QW0278RC = c2x(QW0278RC)
  hex_QW0278ST = c2x(QW0278ST)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0278",desired_dsect) > 0)) then do
    void_rc = queue_QW0278_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0278:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0278_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0278:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MODULE NAME                  x:" hex_QW0278MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RP OPCODE AND EYEC           x:" hex_QW0278HD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF RT                x:" hex_QW0278RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF STORAGE           x:" hex_QW0278SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      AMOUNT OF STORAGE SIZE FREED x:" hex_QW0278SS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TCB OF STORAGE               x:" hex_QW0278TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RC FROM STORAGE RELEASE CALL x:" hex_QW0278RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORAGE FREED FOR LOB/NONLOB x:" hex_QW0278ST
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0305 length is 0007A
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0305:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0305,122)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0305 Length: 122"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0305 ,
    =00001 QW0305CN +18 , /* C - %U CHECK CONSTRAINT NAME      00000 */
    =00019 RSVD0001 +2 , /* C - RESERVED                       00012 */
    =00021 QW0305CT +30 , /* C - %U CHECK CONSTRAINT TEXT (UP  00014 */
    =00051 RSVD0002 +2 , /* C - RESERVED                       00032 */
    =00053 QW0305LN +4 , /* F - LENGTH OF THE CHECK CONSTRAINT 00034 */
    =00057 QW0305OB +2 , /* H - OBID OF THE TABLE ON WHICH THE 00038 */
    =00059 QW0305DB +2 , /* H - DBID OF THE DATABASE FOR THE T 0003A */
    =00061 QW0305OP +20 , /* C - OPERATION THAT IS UTILIZING T 0003C */
    =00081 QW0305RS +3 , /* C - RESULT OF ENFORCING THE CHECK  00050 */
    =00084 QW0305X +1 , /* C - RESERVED FOR QW0305IL           00053 */
    =00085 QW0305ID +4 , /* C - RECORD IDENTIFIER (RID) FOR TH 00054 */
  ,
  ,/*00088 __no__name__ ORG - QW0305X - x'00000053'            00058 */
    =00084 QW0305IL +5 , /* C - RECORD IDENTIFIER (RID) FOR TH 00053 */
    =00089 QW0305RR +30 , /* C - FIRST 30 CHARACTERS OF THE RE 00058 */
    =00119 QW0305TY +1 , /* C - TABLE SPACE TYPE               00076 */
    =00120 RSVD0003 +1 , /* C - RESERVED                       00077 */
  ,     /* QW0305RE EQU x'00D9C5D1' CHECK CONSTRAINT WAS REJECTED DU */
  ,     /* QW0305OK EQU x'00D6D240' CHECK CONSTRAINT WAS OK AND DID  */
  ,     /* QW0305TN EQU x'000000D5' NON LARGE TABLE SPACE            */
  ,     /* QW0305TL EQU x'000000D3' NON-EA 5-BYTE RID TABLE SPACE    */
  ,     /* QW0305TV EQU x'00000000' EA-ENABLED 5-BYTE RID TABLE SPAC */
    =00121 QW0305CN_Off +2 , /* H - Offset from QW0305 to      00078 */
,/* =00123 QW0305EN +0 ,    C - END OF QW0305                  0007A */
    =00001 QW0305CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0305CN_Var +0 ,    C - %U CHECK CONSTRAINT NAME   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0305CN = c2x(QW0305CN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0305CT = c2x(QW0305CT)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0305LN = c2x(QW0305LN)
  hex_QW0305OB = c2x(QW0305OB)
  hex_QW0305DB = c2x(QW0305DB)
  hex_QW0305OP = c2x(QW0305OP)
  hex_QW0305RS = c2x(QW0305RS)
  hex_QW0305X = c2x(QW0305X)
  hex_QW0305ID = c2x(QW0305ID)
  hex_QW0305IL = c2x(QW0305IL)
  hex_QW0305RR = c2x(QW0305RR)
  hex_QW0305TY = c2x(QW0305TY)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0305CN_Off = c2x(QW0305CN_Off)
  hex_QW0305CN_Len = c2x(QW0305CN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0305",desired_dsect) > 0)) then do
    void_rc = queue_QW0305_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0305:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0305_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0305:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CHECK CONSTRAINT NAME     x:" hex_QW0305CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CHECK CONSTRAINT TEXT (UP x:" hex_QW0305CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF THE CHECK CONSTRAI x:" hex_QW0305LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OBID OF THE TABLE ON WHICH T x:" hex_QW0305OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID OF THE DATABASE FOR THE x:" hex_QW0305DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATION THAT IS UTILIZING  x:" hex_QW0305OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESULT OF ENFORCING THE CHEC x:" hex_QW0305RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED FOR QW0305IL        x:" hex_QW0305X
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD IDENTIFIER (RID) FOR  x:" hex_QW0305ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RECORD IDENTIFIER (RID) FOR  x:" hex_QW0305IL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FIRST 30 CHARACTERS OF THE R x:" hex_QW0305RR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TABLE SPACE TYPE             x:" hex_QW0305TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0305 to        x:" hex_QW0305CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0305CN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0306OF length is 00044
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0306OF:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0306OF,68)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0306OF Length: 68"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0306OF ,
    =00001 QW0306CS +4 , /* C - CONSTANT I306                  00000 */
    =00005 QW0306AD +60 , /* C - RESERVED                      00004 */
    =00065 QW0306LD +4 , /* F - LENGTH OF RETURNED DATA AND ST 00040 */
    .           /* End of DSECT */
  /* next byte at 69 */
  hex_QW0306CS = c2x(QW0306CS)
  hex_QW0306AD = c2x(QW0306AD)
  hex_QW0306LD = c2x(QW0306LD)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0306OF",desired_dsect) > 0)) then do
    void_rc = queue_QW0306OF_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0306OF:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0306OF_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0306OF:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSTANT I306                x:" hex_QW0306CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_QW0306AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF RETURNED DATA AND  x:" hex_QW0306LD
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0306 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0306:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0306,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0306 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0306 ,
,/* =00001 QW0306FB +0 ,    C - LOG FEEDBACK AREA              00000 */
    =00001 QW0306ES +6 , /* C - END-OF-SCOPE LOG POINT         00000 */
    =00007 QW0306CT +2 , /* H - COUNT OF LOG RECORDS IN RETURN 00006 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0306ES = c2x(QW0306ES)
  hex_QW0306CT = c2x(QW0306CT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0306",desired_dsect) > 0)) then do
    void_rc = queue_QW0306_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0306:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0306_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0306:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END-OF-SCOPE LOG POINT       x:" hex_QW0306ES
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      COUNT OF LOG RECORDS IN RETU x:" hex_QW0306CT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0306L length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0306L:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0306L,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0306L Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0306L ,
,/* =00001 QW0306LH +0 ,    C - READ LOG HEADER COMMUNICATION  00000 */
    =00001 QW0306RC +4 , /* F - RETURN CODE FROM LOG READ FOR  00000 */
    =00005 QW0306RS +4 , /* C - REASON CODE FROM LOG READ FOR  00004 */
    =00009 QW0306DG +4 , /* C - DIAGNOSTIC INFORMATION         00008 */
,/* =00013 QW0306RM +0 ,    C - RBA/LRSN WITH MEMBER ID        0000C */
    =00013 QW0306RL +6 , /* C - RBA/LRSN                       0000C */
    =00019 QW0306MD +2 , /* C - MEMBER ID                      00012 */
    =00021 RSVD0001 +4 , /* C - RESERVED                       00014 */
,/* =00025 QW0306LR +0 ,    C - LOG RECORD DATA                00018 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0306RC = c2x(QW0306RC)
  hex_QW0306RS = c2x(QW0306RS)
  hex_QW0306DG = c2x(QW0306DG)
  hex_QW0306RL = c2x(QW0306RL)
  hex_QW0306MD = c2x(QW0306MD)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0306L",desired_dsect) > 0)) then do
    void_rc = queue_QW0306L_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0306L:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0306L_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0306L:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE FROM LOG READ FO x:" hex_QW0306RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON CODE FROM LOG READ FO x:" hex_QW0306RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DIAGNOSTIC INFORMATION       x:" hex_QW0306DG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RBA/LRSN                     x:" hex_QW0306RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MEMBER ID                    x:" hex_QW0306MD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0311 length is 000BC
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0311:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0311,188)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0311 Length: 188"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0311 ,
    =00001 QW0311QN +8 , /* C - %U CREATOR OF THE TEMPORARY TA 00000 */
    =00009 QW0311TN +18 , /* C - %U TEMPORARY TABLE NAME       00008 */
    =00027 RSVD0001 +2 , /* C - RESERVED                       0001A */
    =00029 QW0311HO +2 , /* C - CURSOR HOLD STATUS             0001C */
    =00031 QW0311TY +2 , /* C - WORKFILE TYPE                  0001E */
    =00033 QW0311OP +2 , /* C - OPERATION THAT IS UTILIZING TH 00020 */
    =00035 RSVD0002 +2 , /* C - RESERVED                       00022 */
    =00037 QW0311CN +18 , /* C - %U CURSOR NAME FOR FETCHES -  00024 */
    =00055 RSVD0003 +2 , /* C - RESERVED                       00036 */
    =00057 QW0311CA +4 , /* F - SERVICEABILITY                 00038 */
    =00061 QW0311TA +4 , /* F - SERVICEABILITY                 0003C */
    =00065 QW0311CL +4 , /* C - SERVICEABILITY                 00040 */
    =00069 QW0311LN +16 , /* C - %U THE PACKAGE LOCATION NAME  00044 */
    =00085 QW0311PC +18 , /* C - %U THE PACKAGE COLLECTION ID  00054 */
    =00103 RSVD0004 +2 , /* C - RESERVED                       00066 */
    =00105 QW0311PN +8 , /* C - %U THE PROGRAM NAME FOR THE QU 00068 */
    =00113 QW0311VN +64 , /* C - THE PACKAGE VERSION FOR THE Q 00070 */
    =00177 QW0311QN_Off +2 , /* H - Offset from QW0311 to      000B0 */
    =00179 QW0311TN_Off +2 , /* H - Offset from QW0311 to      000B2 */
    =00181 QW0311CN_Off +2 , /* H - Offset from QW0311 to      000B4 */
    =00183 QW0311LN_Off +2 , /* H - Offset from QW0311 to      000B6 */
    =00185 QW0311PC_Off +2 , /* H - Offset from QW0311 to      000B8 */
    =00187 QW0311PN_Off +2 , /* H - Offset from QW0311 to      000BA */
  ,     /* QW0311TT EQU x'0000E3E3' TT - TEMPORARY TABLE WORKFILE    */
  ,     /* QW0311TR EQU x'0000E3D9' TR - TRANSITION TABLE WORKFILE   */
  ,     /* QW0311C EQU x'0000C340' C  - CURSOR ON TEMP TABLE         */
  ,     /* QW0311CT EQU x'0000C3E3' CT - CURSOR ON TRANSITION TABLE  */
  ,     /* QW0311HY EQU x'0000C8D6' HO - CURSOR IS HELD              */
  ,     /* QW0311HN EQU x'00004040' BLANK - CURSOR IS NOT HELD       */
  ,     /* QW0311AT EQU x'0000C1E3' AT - ALTER TEMP TABLE            */
  ,     /* QW0311CI EQU x'0000C3C9' CI - CREATE TEMP TABLE INSTANTIA */
  ,     /* QW0311OC EQU x'0000D6C3' OC - OPEN CURSOR ON TEMP TABLE   */
  ,     /* QW0311D EQU x'0000C440' D - DELETE WORKFILES FOR TEMP TAB */
  ,     /* QW0311DA EQU x'0000C4C1' DA - DELETE ALL ROWS FROM TEMP T */
  ,     /* QW0311CC EQU x'0000C3C3' CC - CLOSE CURSOR ON TEMP TABLE  */
,/* =00189 QW0311EN +0 ,    C - END OF QW0311                  000BC */
    =00001 QW0311QN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0311QN_Var +0 ,    C - %U CREATOR OF THE TEMPORAR 00002 */
    =00001 QW0311TN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0311TN_Var +0 ,    C - %U TEMPORARY TABLE NAME    00002 */
    =00001 QW0311CN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0311CN_Var +0 ,    C - %U CURSOR NAME FOR FETCHES 00002 */
    =00001 QW0311LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0311LN_Var +0 ,    C - %U THE PACKAGE LOCATION NA 00002 */
    =00001 QW0311PC_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0311PC_Var +0 ,    C - %U THE PACKAGE COLLECTION  00002 */
    =00001 QW0311PN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0311PN_Var +0 ,    C - %U THE PROGRAM NAME        00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0311QN = c2x(QW0311QN)
  hex_QW0311TN = c2x(QW0311TN)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0311HO = c2x(QW0311HO)
  hex_QW0311TY = c2x(QW0311TY)
  hex_QW0311OP = c2x(QW0311OP)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0311CN = c2x(QW0311CN)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0311CA = c2x(QW0311CA)
  hex_QW0311TA = c2x(QW0311TA)
  hex_QW0311CL = c2x(QW0311CL)
  hex_QW0311LN = c2x(QW0311LN)
  hex_QW0311PC = c2x(QW0311PC)
  hex_RSVD0004 = c2x(RSVD0004)
  hex_QW0311PN = c2x(QW0311PN)
  hex_QW0311VN = c2x(QW0311VN)
  hex_QW0311QN_Off = c2x(QW0311QN_Off)
  hex_QW0311TN_Off = c2x(QW0311TN_Off)
  hex_QW0311CN_Off = c2x(QW0311CN_Off)
  hex_QW0311LN_Off = c2x(QW0311LN_Off)
  hex_QW0311PC_Off = c2x(QW0311PC_Off)
  hex_QW0311PN_Off = c2x(QW0311PN_Off)
  hex_QW0311QN_Len = c2x(QW0311QN_Len)
  hex_QW0311TN_Len = c2x(QW0311TN_Len)
  hex_QW0311CN_Len = c2x(QW0311CN_Len)
  hex_QW0311LN_Len = c2x(QW0311LN_Len)
  hex_QW0311PC_Len = c2x(QW0311PC_Len)
  hex_QW0311PN_Len = c2x(QW0311PN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0311",desired_dsect) > 0)) then do
    void_rc = queue_QW0311_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0311:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0311_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0311:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CREATOR OF THE TEMPORARY  x:" hex_QW0311QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U TEMPORARY TABLE NAME      x:" hex_QW0311TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR HOLD STATUS           x:" hex_QW0311HO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WORKFILE TYPE                x:" hex_QW0311TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPERATION THAT IS UTILIZING  x:" hex_QW0311OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURSOR NAME FOR FETCHES - x:" hex_QW0311CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SERVICEABILITY               x:" hex_QW0311CA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SERVICEABILITY               x:" hex_QW0311TA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SERVICEABILITY               x:" hex_QW0311CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U THE PACKAGE LOCATION NAME x:" hex_QW0311LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U THE PACKAGE COLLECTION ID x:" hex_QW0311PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0004
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U THE PROGRAM NAME FOR THE  x:" hex_QW0311PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE PACKAGE VERSION FOR THE  x:" hex_QW0311VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0311 to        x:" hex_QW0311QN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0311 to        x:" hex_QW0311TN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0311 to        x:" hex_QW0311CN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0311 to        x:" hex_QW0311LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0311 to        x:" hex_QW0311PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0311 to        x:" hex_QW0311PN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0311QN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0311TN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0311CN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0311LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0311PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0311PN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0313 length is 00098
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0313:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0313,152)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0313 Length: 152"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0313 ,
    =00001 QW0313MG +8 , /* C - MESSAGE NUMBER OF DB2 MESSAGE  00000 */
    =00009 QW0313CK +2 , /* H - NUMBER OF CHECKPOINTS TAKEN -  00008 */
    =00011 QW0313CN +8 , /* C - CONNECTION ID                  0000A */
    =00019 QW0313CR +12 , /* C - CORRELATION ID                00012 */
    =00031 QW0313LU +24 , /* C - LUWID                         0001E */
    =00055 QW0313ID +6 , /* C - URID (BLANK FOR READER - TYPE  00036 */
    =00061 QW0313TY +1 , /* X - TYPE OF UR/UW                  0003C */
  ,     /* QW0313FL EQU x'00000001' INFLIGHT                         */
  ,     /* QW0313DU EQU x'00000002' INDOUBT                          */
  ,     /* QW0313RR EQU x'00000003' READER                           */
    =00062 QW0313PN +8 , /* C - PLAN NAME                      0003D */
    =00070 QW0313AI +8 , /* C - %U AUTHORIZATION ID            00045 */
    =00078 QW0313EU +16 , /* C - END USERS USERID              0004D */
    =00094 QW0313ET +32 , /* C - END USERS TRANSACTION NAME    0005D */
    =00126 QW0313EW +18 , /* C - END USERS WORKSTATION NAME    0007D */
    =00144 QW0313TH +1 , /* C - TYPE OF THRESHOLD REACHED      0008F */
  ,     /* QW0313CH EQU x'000000C3' CHECKPOINTS                      */
  ,     /* QW0313LR EQU x'000000D3' LOG RECORDS                      */
    =00145 QW0313LW +4 , /* F - NUMBER OF LOG RECORDS WRITTEN  00090 */
    =00149 QW0313AI_Off +2 , /* H - Offset from QW0313 to      00094 */
    =00151 QW0313EU_Off +2 , /* H - Offset from QW0313 to      00096 */
,/* =00153 QW0313ED +0 ,    C - END OF IFCID(QWHS0313)         00098 */
    =00001 QW0313AI_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0313AI_Var +0 ,    C - %U AUTHORIZATION ID        00002 */
    =00001 QW0313EU_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0313EU_Var +0 ,    C - END USERS USERID           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0313MG = c2x(QW0313MG)
  hex_QW0313CK = c2x(QW0313CK)
  hex_QW0313CN = c2x(QW0313CN)
  hex_QW0313CR = c2x(QW0313CR)
  hex_QW0313LU = c2x(QW0313LU)
  hex_QW0313ID = c2x(QW0313ID)
  hex_QW0313TY = c2x(QW0313TY)
  hex_QW0313PN = c2x(QW0313PN)
  hex_QW0313AI = c2x(QW0313AI)
  hex_QW0313EU = c2x(QW0313EU)
  hex_QW0313ET = c2x(QW0313ET)
  hex_QW0313EW = c2x(QW0313EW)
  hex_QW0313TH = c2x(QW0313TH)
  hex_QW0313LW = c2x(QW0313LW)
  hex_QW0313AI_Off = c2x(QW0313AI_Off)
  hex_QW0313EU_Off = c2x(QW0313EU_Off)
  hex_QW0313AI_Len = c2x(QW0313AI_Len)
  hex_QW0313EU_Len = c2x(QW0313EU_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0313",desired_dsect) > 0)) then do
    void_rc = queue_QW0313_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0313:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0313_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0313:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MESSAGE NUMBER OF DB2 MESSAG x:" hex_QW0313MG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF CHECKPOINTS TAKEN  x:" hex_QW0313CK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONNECTION ID                x:" hex_QW0313CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CORRELATION ID               x:" hex_QW0313CR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LUWID                        x:" hex_QW0313LU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      URID (BLANK FOR READER - TYP x:" hex_QW0313ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF UR/UW                x:" hex_QW0313TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0313PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U AUTHORIZATION ID          x:" hex_QW0313AI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END USERS USERID             x:" hex_QW0313EU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END USERS TRANSACTION NAME   x:" hex_QW0313ET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      END USERS WORKSTATION NAME   x:" hex_QW0313EW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF THRESHOLD REACHED    x:" hex_QW0313TH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF LOG RECORDS WRITTE x:" hex_QW0313LW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0313 to        x:" hex_QW0313AI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0313 to        x:" hex_QW0313EU_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0313AI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0313EU_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314 length is 00198
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314,408)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314 Length: 408"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314 ,
    =00001 QW0314EL +4 , /* F - ADDRESS OF EXPL                00000 */
    =00005 QW0314WA +4 , /* F - ADDRESS OF WORK AREA           00004 */
    =00009 QW0314WL +4 , /* F - LENGTH OF WORK AREA            00008 */
    =00013 QW0314RC +2 , /* H - RETURN CODE FROM EXIT          0000C */
  ,     /* QW0314C0 EQU x'00000000' - ACCESS ALLOWED                 */
  ,     /* QW0314C4 EQU x'00000004' - PERFORM DB2 AUTHORIZATION CHEC */
  ,     /* QW0314C8 EQU x'00000008' - ACCESS DENIED                  */
  ,     /* QW0314CC EQU x'0000000C' - UNABLE TO DETERMINE AUTHORIZAT */
    =00015 RSVD0001 +2 , /* C - RESERVED                       0000E */
    =00017 QW0314RS +4 , /* F - REASON CODE FROM EXIT          00010 */
    =00021 QW0314BC +8 , /* C - STORE CLOCK BEFORE EXIT CALL   00014 */
    =00029 QW0314AC +8 , /* C - STORE CLOCK AFTER EXIT CALL    0001C */
    =00037 QW0314PL +256 , /* C - THE PARAMETER LIST (DSNDXAPL 00024 */
    =00293 QW0314DO +2 , /* H - OFFSET FROM QW0314 TO DATABASE 00124 */
    =00295 QW0314UO +2 , /* H - OFFSET FROM QW0314 TO AUTH ID  00126 */
    =00297 QW0314BO +2 , /* H - OFFSET FROM QW0314 TO UNQUALIF 00128 */
    =00299 QW0314OO +2 , /* H - OFFSET FROM QW0314 TO OBJECT O 0012A */
    =00301 QW03141O +2 , /* H - OFFSET FROM QW0314 TO OTHER RE 0012C */
    =00303 QW03142O +2 , /* H - OFFSET FROM QW0314 TO OTHER RE 0012E */
    =00305 QW0314NO +2 , /* H - OFFSET FROM QW0314 TO OBJECT O 00130 */
    =00307 QW0314LO +2 , /* H - OFFSET FROM QW0314 TO ROLE     00132 */
    =00309 QW0314MO +2 , /* H - OFFSET FROM QW0314 TO OTHER OB 00134 */
    =00311 QW0314RO +2 , /* H - OFFSET FROM QW0314 TO OTHER OB 00136 */
    =00313 QW0314SO +2 , /* H - OFFSET FROM QW0314 TO VIEWS BA 00138 */
    =00315 QW0314AO +2 , /* H - OFFSET FROM QW0314 TO VIEWS BA 0013A */
    =00317 QW0314CO +2 , /* H - OFFSET FROM QW0314 TO VIEWS BA 0013C */
    =00319 RSVD0002 +6 , /* C - RESERVED                       0013E */
    =00325 QW0314UT +80 , /* C - UTOKEN IF IT IS ACCESSIBLE    00144 */
    =00405 QW0314DS +4 , /* F - NUMBER OF DATABASES FOR WHICH  00194 */
,/* =00409 QW0314EN +0 ,    C - END OF IFCID(QWHS0314)         00198 */
    .           /* End of DSECT */
  /* next byte at 409 */
  hex_QW0314EL = c2x(QW0314EL)
  hex_QW0314WA = c2x(QW0314WA)
  hex_QW0314WL = c2x(QW0314WL)
  hex_QW0314RC = c2x(QW0314RC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0314RS = c2x(QW0314RS)
  hex_QW0314BC = c2x(QW0314BC)
  hex_QW0314AC = c2x(QW0314AC)
  hex_QW0314PL = c2x(QW0314PL)
  hex_QW0314DO = c2x(QW0314DO)
  hex_QW0314UO = c2x(QW0314UO)
  hex_QW0314BO = c2x(QW0314BO)
  hex_QW0314OO = c2x(QW0314OO)
  hex_QW03141O = c2x(QW03141O)
  hex_QW03142O = c2x(QW03142O)
  hex_QW0314NO = c2x(QW0314NO)
  hex_QW0314LO = c2x(QW0314LO)
  hex_QW0314MO = c2x(QW0314MO)
  hex_QW0314RO = c2x(QW0314RO)
  hex_QW0314SO = c2x(QW0314SO)
  hex_QW0314AO = c2x(QW0314AO)
  hex_QW0314CO = c2x(QW0314CO)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0314UT = c2x(QW0314UT)
  hex_QW0314DS = c2x(QW0314DS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314",desired_dsect) > 0)) then do
    void_rc = queue_QW0314_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF EXPL              x:" hex_QW0314EL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF WORK AREA         x:" hex_QW0314WA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF WORK AREA          x:" hex_QW0314WL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RETURN CODE FROM EXIT        x:" hex_QW0314RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REASON CODE FROM EXIT        x:" hex_QW0314RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK BEFORE EXIT CALL x:" hex_QW0314BC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STORE CLOCK AFTER EXIT CALL  x:" hex_QW0314AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE PARAMETER LIST (DSNDXAPL x:" hex_QW0314PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO DATABA x:" hex_QW0314DO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO AUTH I x:" hex_QW0314UO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO UNQUAL x:" hex_QW0314BO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO OBJECT x:" hex_QW0314OO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO OTHER  x:" hex_QW03141O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO OTHER  x:" hex_QW03142O
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO OBJECT x:" hex_QW0314NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO ROLE   x:" hex_QW0314LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO OTHER  x:" hex_QW0314MO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO OTHER  x:" hex_QW0314RO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO VIEWS  x:" hex_QW0314SO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO VIEWS  x:" hex_QW0314AO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OFFSET FROM QW0314 TO VIEWS  x:" hex_QW0314CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UTOKEN IF IT IS ACCESSIBLE   x:" hex_QW0314UT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF DATABASES FOR WHIC x:" hex_QW0314DS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314U length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314U:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314U,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314U Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314U ,
    =00001 QW0314UL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314UN +0 ,    C - %U AUTH ID DB2 PERFORMS CHECK  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314UL = c2x(QW0314UL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314U",desired_dsect) > 0)) then do
    void_rc = queue_QW0314U_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314U:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314U_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314U:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314UL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314B length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314B:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314B,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314B Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314B ,
    =00001 QW0314BL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314BN +0 ,    C - %U UNQUALIFIED OBJECT NAME     00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314BL = c2x(QW0314BL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314B",desired_dsect) > 0)) then do
    void_rc = queue_QW0314B_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314B:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314B_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314B:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314BL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314O length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314O:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314O,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314O Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314O ,
    =00001 QW0314OL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314ON +0 ,    C - %U OBJECT OWNER OR OBJECT QUAL 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314OL = c2x(QW0314OL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314O",desired_dsect) > 0)) then do
    void_rc = queue_QW0314O_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314O:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314O_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314O:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314OL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314R1 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314R1:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314R1,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314R1 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314R1 ,
    =00001 QW03141L +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW03141N +0 ,    C - %U OTHER RELATED INFORMATION - 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW03141L = c2x(QW03141L)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314R1",desired_dsect) > 0)) then do
    void_rc = queue_QW0314R1_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314R1:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314R1_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314R1:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW03141L
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314R2 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314R2:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314R2,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314R2 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314R2 ,
    =00001 QW03142L +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW03142N +0 ,    C - %U OTHER RELATED INFORMATION - 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW03142L = c2x(QW03142L)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314R2",desired_dsect) > 0)) then do
    void_rc = queue_QW0314R2_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314R2:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314R2_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314R2:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW03142L
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314N length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314N:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314N,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314N Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314N ,
    =00001 QW0314NL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314NN +0 ,    C - %U OBJECT OWNER                00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314NL = c2x(QW0314NL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314N",desired_dsect) > 0)) then do
    void_rc = queue_QW0314N_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314N:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314N_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314N:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314NL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314L length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314L:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314L,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314L Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314L ,
    =00001 QW0314LL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314LN +0 ,    C - %U ROLE                        00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314LL = c2x(QW0314LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314L",desired_dsect) > 0)) then do
    void_rc = queue_QW0314L_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314L:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314L_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314L:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314M length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314M:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314M,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314M Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314M ,
    =00001 QW0314ML +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314MN +0 ,    C - %U OTHER OBJECT NAME           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314ML = c2x(QW0314ML)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314M",desired_dsect) > 0)) then do
    void_rc = queue_QW0314M_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314M:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314M_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314M:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314ML
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314R length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314R:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314R,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314R Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314R ,
    =00001 QW0314RL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314RN +0 ,    C - %U OTHER OBJECT OWNER          00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314RL = c2x(QW0314RL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314R",desired_dsect) > 0)) then do
    void_rc = queue_QW0314R_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314R:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314R_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314R:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314RL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314S length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314S:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314S,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314S Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314S ,
    =00001 QW0314SL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314SN +0 ,    C - %U VIEWS BASE TABLE SCHEMA     00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314SL = c2x(QW0314SL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314S",desired_dsect) > 0)) then do
    void_rc = queue_QW0314S_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314S:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314S_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314S:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314SL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314A length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314A:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314A,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314A Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314A ,
    =00001 QW0314AL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314AN +0 ,    C - %U VIEWS BASE TABLE NAME       00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314AL = c2x(QW0314AL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314A",desired_dsect) > 0)) then do
    void_rc = queue_QW0314A_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314A:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314A_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314A:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314AL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314C length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314C:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314C,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314C Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314C ,
    =00001 QW0314CL +2 , /* H - LENGTH OF NEXT FIELD           00000 */
,/* =00003 QW0314CN +0 ,    C - %U VIEWS BASE TABLE COLUMN NAM 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0314CL = c2x(QW0314CL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314C",desired_dsect) > 0)) then do
    void_rc = queue_QW0314C_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314C:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314C_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314C:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF NEXT FIELD         x:" hex_QW0314CL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0314DX length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0314DX:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0314DX,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0314DX Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0314DX ,
    =00001 QW0314DP +4 , /* F - ADDRESS TO INFORMATION OF NEXT 00000 */
    =00005 QW0314DN +8 , /* C - DATABASE NAME                  00004 */
    =00013 QW0314DA +1 , /* C - RESULTS OF DBADM CHECK         0000C */
    =00014 QW0314IM +1 , /* C - WHETHER DATABASE IS IMPLICIT   0000D */
    =00015 RSVD0001 +2 , /* C - RESERVED                       0000E */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0314DP = c2x(QW0314DP)
  hex_QW0314DN = c2x(QW0314DN)
  hex_QW0314DA = c2x(QW0314DA)
  hex_QW0314IM = c2x(QW0314IM)
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0314DX",desired_dsect) > 0)) then do
    void_rc = queue_QW0314DX_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0314DX:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0314DX_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0314DX:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    ---------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS TO INFORMATION OF NE x:" hex_QW0314DP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE NAME                x:" hex_QW0314DN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESULTS OF DBADM CHECK       x:" hex_QW0314DA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      WHETHER DATABASE IS IMPLICIT x:" hex_QW0314IM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0316 length is 0022E
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0316:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0316,558)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0316 Length: 558"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0316 ,
,/* =00001 QW0316ID +0 ,    C - Statement Identifier           00000 */
    =00001 QW0316NM +16 , /* C - Statement Name generated by D 00000 */
    =00017 QW0316TK +4 , /* X - Unique Statement Identifier    00010 */
    =00021 QW0316US +4 , /* F - Number of current users of stm 00014 */
    =00025 QW0316CP +4 , /* F - Number of copies of the stmt   00018 */
    =00029 QW0316FL +1 , /* X - Status of the statement        0001C */
  ,     /* QW0316FD EQU x'00000080' Invalidated by DROP or ALTER     */
  ,     /* QW0316FR EQU x'00000040' Invalidated by REVOKE            */
  ,     /* QW0316FE EQU x'00000020' Removed from cache by LRU        */
  ,     /* QW0316FS EQU x'00000010' Invalidated by RUNSTATS          */
    =00030 RSVD0001 +1 , /* C - Not used                       0001D */
    =00031 QW0316TM +10 , /* C - Date/Time when statement was  0001E */
,/* =00041 QW0316SS +0 ,    F - Statement statistics           00028 */
    =00041 QW0316NE +4 , /* F - Number of executions of stmt   00028 */
    =00045 QW0316NB +4 , /* F - Number of synchronous buffer   0002C */
    =00049 QW0316NG +4 , /* F - Number of getpage operations   00030 */
    =00053 QW0316NR +4 , /* F - Number of rows examined        00034 */
    =00057 QW0316NP +4 , /* F - Number of rows processed for   00038 */
    =00061 QW0316NS +4 , /* F - Number of sorts performed for  0003C */
    =00065 QW0316NI +4 , /* F - Number of index scans performe 00040 */
    =00069 QW0316NT +4 , /* F - Number of tablespace scans     00044 */
    =00073 QW0316NL +4 , /* F - Number of parallel groups crea 00048 */
    =00077 QW0316NW +4 , /* F - Number of synchronous buffer   0004C */
    =00081 QW0316AE +8 , /* C - Accumulated elapsed time used  00050 */
    =00089 RSVD0002 +62 , /* C - Reserved                      00058 */
,/* =00151 QW0316X1 +0 ,    C - Program name - Name of package 00096 */
    =00151 QW0316L1 +2 , /* H - Length of program name         00096 */
    =00153 QW0316T1 +40 , /* C - %U Program name text          00098 */
    =00193 QW0316LX +4 , /* F - Statement line number - Precom 000C0 */
,/* =00197 QW0316X2 +0 ,    C - Transaction Name - Value provi 000C4 */
    =00197 QW0316L2 +2 , /* H - Length of transaction name     000C4 */
    =00199 QW0316T2 +32 , /* C - Transaction name text         000C6 */
,/* =00231 QW0316X3 +0 ,    C - User ID - Primary authorizatio 000E6 */
    =00231 QW0316L3 +2 , /* H - Length of User ID              000E6 */
    =00233 QW0316T3 +16 , /* C - %U User ID text               000E8 */
    =00249 QW0316X4 +8 , /* C - %U User Group - CURRENT SQLID  000F8 */
    =00257 QW0316X5 +8 , /* C - %U Object qualifier for unqual 00100 */
    =00265 QW0316X6 +2 , /* C - ISOLATION BIND option in effec 00108 */
  ,     /* QW03166U EQU x'0000E4D9' ISOLATION(UR) - Uncommitted Read */
  ,     /* QW03166C EQU x'0000C3E2' ISOLATION(CS) - Cursor Stability */
  ,     /* QW03166S EQU x'0000D9E2' ISOLATION(RS) - Read Stability   */
  ,     /* QW03166R EQU x'0000D9D9' ISOLATION(RR) - Repeatable Read  */
    =00267 QW0316X7 +1 , /* C - CURRENTDATA BIND option        0010A */
  ,     /* QW03167Y EQU x'00000000' CURRENTDATA(YES)                 */
  ,     /* QW03167N EQU x'000000D5' CURRENTDATA(NO)                  */
    =00268 QW0316X8 +1 , /* C - DYNAMICRULES BIND option       0010B */
  ,     /* QW03168B EQU x'000000C2' DYNAMICRULES(BIND)               */
  ,     /* QW03168R EQU x'000000D9' DYNAMICRULES(RUN)                */
    =00269 QW0316X9 +1 , /* C - CURRENT DEGREE special registe 0010C */
  ,     /* QW03169A EQU x'000000C1' CURRENT DEGREE =  ANY            */
  ,     /* QW031691 EQU x'000000F1' CURRENT DEGREE =  1              */
    =00270 QW0316XA +1 , /* C - CURRENT RULES special register 0010D */
  ,     /* QW0316AD EQU x'000000C4' CURRENT RULES =  DB2             */
  ,     /* QW0316AS EQU x'00000000' CURRENT RULES =  SQL             */
    =00271 QW0316XB +1 , /* C - CURRENT PRECISION special regi 0010E */
  ,     /* QW0316BY EQU x'00000000' CURRENT PRECISION =  DEC31       */
  ,     /* QW0316BN EQU x'000000D5' CURRENT PRECISION =  DEC15       */
    =00272 QW0316XC +1 , /* C - CURSOR HOLD                    0010F */
  ,     /* QW0316CY EQU x'00000000' Statement was prepared for a hel */
  ,     /* QW0316CN EQU x'000000D5' Statement was not prepared for h */
    =00273 QW0316TS +8 , /* C - Timestamp when statistics coll 00110 */
,/* =00281 QW0316XD +0 ,    C - Referenced Table Name - Only o 00118 */
    =00281 QW0316QD +8 , /* C - %U Table qualifier             00118 */
    =00289 QW0316LD +2 , /* H - Length of table name           00120 */
    =00291 QW0316TD +18 , /* C - %U Table name text            00122 */
,/* =00309 QW0316S2 +0 ,    C - More Statement statistics      00134 */
    =00309 QW0316CT +8 , /* C - Accumulated CPU time. This tim 00134 */
    =00317 QW0316W1 +8 , /* C - Accumulated wait time for sync 0013C */
    =00325 QW0316W2 +8 , /* C - Accumulated wait time for lock 00144 */
    =00333 QW0316W3 +8 , /* C - Accumulated wait time for sync 0014C */
    =00341 QW0316W4 +8 , /* C - Accumulated wait time for glob 00154 */
    =00349 QW0316W5 +8 , /* C - Accumulated wait time for read 0015C */
    =00357 QW0316W6 +8 , /* C - Accumulated wait time for writ 00164 */
    =00365 QW0316RT +4 , /* F - Number of times a RID list was 0016C */
    =00369 QW0316RS +4 , /* F - Number of times a RID list was 00170 */
    =00373 QW0316UI +80 , /* C - %U User-provided identificati 00174 */
,/* =00453 QW0316ST +0 ,    C - SQL Statement                  001C4 */
    =00453 QW0316LN +4 , /* F - Length of entire statement     001C4 */
    =00457 QW0316TX +60 , /* C - %U First 60 bytes of stmt tex 001C8 */
    =00517 QW0316T1_Off +2 , /* H - Offset from QW0316 to      00204 */
    =00519 QW0316T3_Off +2 , /* H - Offset from QW0316 to      00206 */
    =00521 QW0316X4_Off +2 , /* H - Offset from QW0316 to      00208 */
    =00523 QW0316X5_Off +2 , /* H - Offset from QW0316 to      0020A */
    =00525 QW0316QD_Off +2 , /* H - Offset from QW0316 to      0020C */
    =00527 QW0316TD_Off +2 , /* H - Offset from QW0316 to      0020E */
    =00529 QW0316UI_Off +2 , /* H - Offset from QW0316 to      00210 */
    =00531 QW0316SC_Off +2 , /* H - Offset from QW0316 to      00212 */
    =00533 QW0316TM2 +8 , /* C - Date/Time when statement was  00214 */
    =00541 QW0316UT1 +8 , /* C - Date/Time when the stmt stat  0021C */
    =00549 QW0316UT2 +10 , /* C - Date/Time when the stmt stat 00224 */
,/* =00559 QW0316EN +0 ,    C - END OF IFCID(QWHS0316)         0022E */
    =00001 QW0316T1_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316T1_Var +0 ,    C - %U Program name text       00002 */
    =00001 QW0316T3_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316T3_Var +0 ,    C - %U User ID text            00002 */
    =00001 QW0316X4_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316X4_Var +0 ,    C - %U User Group - CURRENT SQ 00002 */
    =00001 QW0316X5_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316X5_Var +0 ,    C - %U Object qualifier for un 00002 */
    =00001 QW0316QD_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316QD_Var +0 ,    C - %U Table qualifier         00002 */
    =00001 QW0316TD_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316TD_Var +0 ,    C - %U Table name text         00002 */
    =00001 QW0316UI_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316UI_Var +0 ,    C - %U User-provided identific 00002 */
    =00001 QW0316SC_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0316SC_Var +0 ,    C - %U CURRENT SCHEMA text     00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0316NM = c2x(QW0316NM)
  hex_QW0316TK = c2x(QW0316TK)
  hex_QW0316US = c2x(QW0316US)
  hex_QW0316CP = c2x(QW0316CP)
  hex_QW0316FL = c2x(QW0316FL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0316TM = c2x(QW0316TM)
  hex_QW0316NE = c2x(QW0316NE)
  hex_QW0316NB = c2x(QW0316NB)
  hex_QW0316NG = c2x(QW0316NG)
  hex_QW0316NR = c2x(QW0316NR)
  hex_QW0316NP = c2x(QW0316NP)
  hex_QW0316NS = c2x(QW0316NS)
  hex_QW0316NI = c2x(QW0316NI)
  hex_QW0316NT = c2x(QW0316NT)
  hex_QW0316NL = c2x(QW0316NL)
  hex_QW0316NW = c2x(QW0316NW)
  hex_QW0316AE = c2x(QW0316AE)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0316L1 = c2x(QW0316L1)
  hex_QW0316T1 = c2x(QW0316T1)
  hex_QW0316LX = c2x(QW0316LX)
  hex_QW0316L2 = c2x(QW0316L2)
  hex_QW0316T2 = c2x(QW0316T2)
  hex_QW0316L3 = c2x(QW0316L3)
  hex_QW0316T3 = c2x(QW0316T3)
  hex_QW0316X4 = c2x(QW0316X4)
  hex_QW0316X5 = c2x(QW0316X5)
  hex_QW0316X6 = c2x(QW0316X6)
  hex_QW0316X7 = c2x(QW0316X7)
  hex_QW0316X8 = c2x(QW0316X8)
  hex_QW0316X9 = c2x(QW0316X9)
  hex_QW0316XA = c2x(QW0316XA)
  hex_QW0316XB = c2x(QW0316XB)
  hex_QW0316XC = c2x(QW0316XC)
  hex_QW0316TS = c2x(QW0316TS)
  hex_QW0316QD = c2x(QW0316QD)
  hex_QW0316LD = c2x(QW0316LD)
  hex_QW0316TD = c2x(QW0316TD)
  hex_QW0316CT = c2x(QW0316CT)
  hex_QW0316W1 = c2x(QW0316W1)
  hex_QW0316W2 = c2x(QW0316W2)
  hex_QW0316W3 = c2x(QW0316W3)
  hex_QW0316W4 = c2x(QW0316W4)
  hex_QW0316W5 = c2x(QW0316W5)
  hex_QW0316W6 = c2x(QW0316W6)
  hex_QW0316RT = c2x(QW0316RT)
  hex_QW0316RS = c2x(QW0316RS)
  hex_QW0316UI = c2x(QW0316UI)
  hex_QW0316LN = c2x(QW0316LN)
  hex_QW0316TX = c2x(QW0316TX)
  hex_QW0316T1_Off = c2x(QW0316T1_Off)
  hex_QW0316T3_Off = c2x(QW0316T3_Off)
  hex_QW0316X4_Off = c2x(QW0316X4_Off)
  hex_QW0316X5_Off = c2x(QW0316X5_Off)
  hex_QW0316QD_Off = c2x(QW0316QD_Off)
  hex_QW0316TD_Off = c2x(QW0316TD_Off)
  hex_QW0316UI_Off = c2x(QW0316UI_Off)
  hex_QW0316SC_Off = c2x(QW0316SC_Off)
  hex_QW0316TM2 = c2x(QW0316TM2)
  hex_QW0316UT1 = c2x(QW0316UT1)
  hex_QW0316UT2 = c2x(QW0316UT2)
  hex_QW0316T1_Len = c2x(QW0316T1_Len)
  hex_QW0316T3_Len = c2x(QW0316T3_Len)
  hex_QW0316X4_Len = c2x(QW0316X4_Len)
  hex_QW0316X5_Len = c2x(QW0316X5_Len)
  hex_QW0316QD_Len = c2x(QW0316QD_Len)
  hex_QW0316TD_Len = c2x(QW0316TD_Len)
  hex_QW0316UI_Len = c2x(QW0316UI_Len)
  hex_QW0316SC_Len = c2x(QW0316SC_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0316",desired_dsect) > 0)) then do
    void_rc = queue_QW0316_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0316:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0316_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0316:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement Name generated by  x:" hex_QW0316NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unique Statement Identifier  x:" hex_QW0316TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of current users of s x:" hex_QW0316US
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of copies of the stmt x:" hex_QW0316CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Status of the statement      x:" hex_QW0316FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Date/Time when statement was x:" hex_QW0316TM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of executions of stmt x:" hex_QW0316NE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of synchronous buffer x:" hex_QW0316NB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of getpage operations x:" hex_QW0316NG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of rows examined      x:" hex_QW0316NR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of rows processed for x:" hex_QW0316NP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of sorts performed fo x:" hex_QW0316NS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of index scans perfor x:" hex_QW0316NI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of tablespace scans   x:" hex_QW0316NT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of parallel groups cr x:" hex_QW0316NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of synchronous buffer x:" hex_QW0316NW
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated elapsed time use x:" hex_QW0316AE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of program name       x:" hex_QW0316L1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name text         x:" hex_QW0316T1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement line number - Prec x:" hex_QW0316LX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of transaction name   x:" hex_QW0316L2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Transaction name text        x:" hex_QW0316T2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of User ID            x:" hex_QW0316L3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U User ID text              x:" hex_QW0316T3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U User Group - CURRENT SQLI x:" hex_QW0316X4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Object qualifier for unqu x:" hex_QW0316X5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ISOLATION BIND option in eff x:" hex_QW0316X6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENTDATA BIND option      x:" hex_QW0316X7
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DYNAMICRULES BIND option     x:" hex_QW0316X8
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT DEGREE special regis x:" hex_QW0316X9
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT RULES special regist x:" hex_QW0316XA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT PRECISION special re x:" hex_QW0316XB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURSOR HOLD                  x:" hex_QW0316XC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Timestamp when statistics co x:" hex_QW0316TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Table qualifier           x:" hex_QW0316QD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of table name         x:" hex_QW0316LD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Table name text           x:" hex_QW0316TD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated CPU time. This t x:" hex_QW0316CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for sy x:" hex_QW0316W1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for lo x:" hex_QW0316W2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for sy x:" hex_QW0316W3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for gl x:" hex_QW0316W4
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for re x:" hex_QW0316W5
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Accumulated wait time for wr x:" hex_QW0316W6
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of times a RID list w x:" hex_QW0316RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of times a RID list w x:" hex_QW0316RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U User-provided identificat x:" hex_QW0316UI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of entire statement   x:" hex_QW0316LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U First 60 bytes of stmt te x:" hex_QW0316TX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316T1_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316T3_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316X4_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316X5_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316QD_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316TD_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316UI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0316 to        x:" hex_QW0316SC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Date/Time when statement was x:" hex_QW0316TM2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Date/Time when the stmt stat x:" hex_QW0316UT1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Date/Time when the stmt stat x:" hex_QW0316UT2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316T1_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316T3_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316X4_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316X5_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316QD_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316TD_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316UI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0316SC_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0317 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0317:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0317,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0317 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0317 ,
,/* =00001 QW0317ST +0 ,    C - SQL STATEMENT HANDLE           00000 */
    =00001 QW0317NM +16 , /* C - SQL STATEMENT NAME            00000 */
    =00017 QW0317ID +4 , /* X - SQL STATEMENT IDENTIFIER       00010 */
    =00021 QW0317LN +4 , /* F - THE LENGTH OF THE SQL TEXT     00014 */
,/* =00025 QW0317TX +0 ,    C - %U TEXT OF THE SQL STATEMENT   00018 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0317NM = c2x(QW0317NM)
  hex_QW0317ID = c2x(QW0317ID)
  hex_QW0317LN = c2x(QW0317LN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0317",desired_dsect) > 0)) then do
    void_rc = queue_QW0317_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0317:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0317_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0317:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL STATEMENT NAME           x:" hex_QW0317NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQL STATEMENT IDENTIFIER     x:" hex_QW0317ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      THE LENGTH OF THE SQL TEXT   x:" hex_QW0317LN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW03172 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW03172:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW03172,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW03172 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW03172 ,
    =00001 QW03172LN +2 , /* H - LENGTH OF ATTRIBUTES STRING   00000 */
,/* =00003 QW03172TX +0 ,    C - %U TEXT OF THE ATTRIBUTES STR 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW03172LN = c2x(QW03172LN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW03172",desired_dsect) > 0)) then do
    void_rc = queue_QW03172_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW03172:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW03172_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW03172:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF ATTRIBUTES STRING  x:" hex_QW03172LN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0319 length is 00138
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0319:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0319,312)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0319 Length: 312"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0319 ,
    =00001 QW0319CT +1 , /* C - TYPE OF COMMUNICATION ADDRESS  00000 */
    =00002 QW0319AD +15 , /* C - REQUESTING COMMUNICATION ADDR 00001 */
    =00017 QW0319TY +1 , /* C - TYPE OF SECURITY IDENTITY      00010 */
    =00018 QW0319SM +1 , /* C - SECURITY MECHANISM             00011 */
    =00019 QW0319FL +1 , /* X - Miscellaneous flags.           00012 */
  ,     /* QW0319UR EQU x'00000080' Caller passed the User Registry  */
  ,     /* QW0319AE EQU x'00000040' AES is used.                     */
    =00020 RSVD0001 +1 , /* X - UNUSED                         00013 */
    =00021 QW0319L1 +2 , /* H - LENGTH OF QW0319D1.            00014 */
    =00023 QW0319D1 +256 , /* C - DATA FIELD 1 OF TYPE         00016 */
    =00279 QW0319US +8 , /* C - DERIVED USERID                 00116 */
    =00287 QW0319RI +18 , /* C - REQUESTING INSTANCE OF TYPE   0011E */
    =00305 QW0319CP +8 , /* C - CLIENT PRODUCT ID              00130 */
,/* =00313 QW0319EN +0 ,    C - END OF RECORD.                 00138 */
  ,     /* QW0319SN EQU x'00000000' S = SNA                          */
  ,     /* QW0319TC EQU x'00000000' T = TCP/IP                       */
  ,     /* QW0319KE EQU x'000000D2' K = KERBEROS                     */
  ,     /* QW0319EC EQU x'000000C5' E = ENCRYPTED                    */
  ,     /* QW0319E1 EQU x'00000000' UID Encrypt PW.                  */
  ,     /* QW0319E2 EQU x'00000000' Encrypt UID PW.                  */
  ,     /* QW0319E3 EQU x'00000000' Encrypt UID PW NewPW.            */
  ,     /* QW0319E4 EQU x'00000000' Encrypt UID Data.                */
  ,     /* QW0319E5 EQU x'00000000' Encrypt UID PW Data.             */
  ,     /* QW0319E6 EQU x'00000000' Encrypt UID PW NewPW Data.       */
  ,     /* QW0319E7 EQU x'00000000' Encrypt UID only.                */
    .           /* End of DSECT */
  /* next byte at 313 */
  hex_QW0319CT = c2x(QW0319CT)
  hex_QW0319AD = c2x(QW0319AD)
  hex_QW0319TY = c2x(QW0319TY)
  hex_QW0319SM = c2x(QW0319SM)
  hex_QW0319FL = c2x(QW0319FL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0319L1 = c2x(QW0319L1)
  hex_QW0319D1 = c2x(QW0319D1)
  hex_QW0319US = c2x(QW0319US)
  hex_QW0319RI = c2x(QW0319RI)
  hex_QW0319CP = c2x(QW0319CP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0319",desired_dsect) > 0)) then do
    void_rc = queue_QW0319_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0319:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0319_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0319:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF COMMUNICATION ADDRES x:" hex_QW0319CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTING COMMUNICATION ADD x:" hex_QW0319AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TYPE OF SECURITY IDENTITY    x:" hex_QW0319TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SECURITY MECHANISM           x:" hex_QW0319SM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Miscellaneous flags.         x:" hex_QW0319FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF QW0319D1.          x:" hex_QW0319L1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA FIELD 1 OF TYPE         x:" hex_QW0319D1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DERIVED USERID               x:" hex_QW0319US
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUESTING INSTANCE OF TYPE  x:" hex_QW0319RI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLIENT PRODUCT ID            x:" hex_QW0319CP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0321 length is 00001
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0321:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0321,1)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0321 Length: 1"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0321 ,
    =00001 QW0321LO +1 , /* C - Target location for write      00000 */
  ,     /* QW0321DD EQU x'000000C4' D - DASD                         */
  ,     /* QW0321GP EQU x'000000C7' G - Group buffer pool (Coupling  */
    .           /* End of DSECT */
  /* next byte at 2 */
  hex_QW0321LO = c2x(QW0321LO)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0321",desired_dsect) > 0)) then do
    void_rc = queue_QW0321_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0321:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0321_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0321:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Target location for write    x:" hex_QW0321LO
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0322 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0322:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0322,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0322 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0322 ,
    =00001 QW0322NP +4 , /* X - Number of pages written        00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0322NP = c2x(QW0322NP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0322",desired_dsect) > 0)) then do
    void_rc = queue_QW0322_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0322:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0322_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0322:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of pages written      x:" hex_QW0322NP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0324 length is 00190
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0324:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0324,400)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0324 Length: 400"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0324 ,
    =00001 QW0324QN +4 , /* F - QUERY NUMBER.                  00000 */
    =00005 QW0324GM +8 , /* C - GROUP MEMBER.                  00004 */
    =00013 QW0324AL +8 , /* C - APPLICATION NAME               0000C */
    =00021 QW0324PN +8 , /* C - PLAN NAME                      00014 */
    =00029 QW0324CI +18 , /* C - %U COLLECTION ID.             0001C */
    =00047 QW0324PG +8 , /* C - %U PROGRAM NAME                0002E */
    =00055 QW0324CT +8 , /* C - CONSISTENCY TOKEN              00036 */
    =00063 QW0324VL +2 , /* H - VERSION LEN                    0003E */
    =00065 QW0324VN +64 , /* C - VERSION                       00040 */
    =00129 QW0324TS +10 , /* C - TIMESTAMP.                    00080 */
    =00139 QW0324CL +2 , /* H - CURRENT PATH LENGTH            0008A */
    =00141 QW0324CP +254 , /* C - %U CURRENT PATH              0008C */
    =00395 QW0324CI_Off +2 , /* H - Offset from QW0324 to      0018A */
    =00397 QW0324PG_Off +2 , /* H - Offset from QW0324 to      0018C */
    =00399 QW0324CP_Off +2 , /* H - Offset from QW0324 to      0018E */
    =00001 QW0324CI_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324CI_Var +0 ,    C - %U COLLECTION ID.          00002 */
    =00001 QW0324PG_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324PG_Var +0 ,    C - %U PROGRAM NAME            00002 */
    =00001 QW0324CP_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324CP_Var +0 ,    C - %U CURRENT PATH            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0324QN = c2x(QW0324QN)
  hex_QW0324GM = c2x(QW0324GM)
  hex_QW0324AL = c2x(QW0324AL)
  hex_QW0324PN = c2x(QW0324PN)
  hex_QW0324CI = c2x(QW0324CI)
  hex_QW0324PG = c2x(QW0324PG)
  hex_QW0324CT = c2x(QW0324CT)
  hex_QW0324VL = c2x(QW0324VL)
  hex_QW0324VN = c2x(QW0324VN)
  hex_QW0324TS = c2x(QW0324TS)
  hex_QW0324CL = c2x(QW0324CL)
  hex_QW0324CP = c2x(QW0324CP)
  hex_QW0324CI_Off = c2x(QW0324CI_Off)
  hex_QW0324PG_Off = c2x(QW0324PG_Off)
  hex_QW0324CP_Off = c2x(QW0324CP_Off)
  hex_QW0324CI_Len = c2x(QW0324CI_Len)
  hex_QW0324PG_Len = c2x(QW0324PG_Len)
  hex_QW0324CP_Len = c2x(QW0324CP_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0324",desired_dsect) > 0)) then do
    void_rc = queue_QW0324_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0324:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0324_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0324:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY NUMBER.                x:" hex_QW0324QN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GROUP MEMBER.                x:" hex_QW0324GM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      APPLICATION NAME             x:" hex_QW0324AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PLAN NAME                    x:" hex_QW0324PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U COLLECTION ID.            x:" hex_QW0324CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U PROGRAM NAME              x:" hex_QW0324PG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CONSISTENCY TOKEN            x:" hex_QW0324CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION LEN                  x:" hex_QW0324VL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      VERSION                      x:" hex_QW0324VN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP.                   x:" hex_QW0324TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT PATH LENGTH          x:" hex_QW0324CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U CURRENT PATH              x:" hex_QW0324CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324 to        x:" hex_QW0324CI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324 to        x:" hex_QW0324PG_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324 to        x:" hex_QW0324CP_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324CI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324PG_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324CP_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0324F length is 00156
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0324F:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0324F,342)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0324F Length: 342"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0324F ,
    =00001 QW0324QB +2 , /* H - QUERY BLOCK NUMBER.            00000 */
    =00003 RSVD0001 +2 , /* C - UNUSED                         00002 */
    =00005 QW0324FS +8 , /* C - %U FUNCTION SCHEMA             00004 */
    =00013 QW0324FN +18 , /* C - %U FUNCTION NAME              0000C */
    =00031 QW0324FI +18 , /* C - %U SPECIFIC FUNCTION NAME     0001E */
    =00049 QW0324FY +2 , /* C - FUNCTION TYPE                  00030 */
  ,     /* QW0324SF EQU x'0000E2E4' SCALAR UDF                       */
  ,     /* QW0324TF EQU x'0000E3E4' TABLE UDF                        */
    =00051 QW0324CV +8 , /* C - %U VIEW CREATOR                00032 */
    =00059 QW0324NV +18 , /* C - %U VIEW NAME                  0003A */
    =00077 QW0324FL +2 , /* H - FUNCTION TEXT LENGTH           0004C */
    =00079 QW0324FT +254 , /* C - %U FUNCTION TEXT             0004E */
    =00333 QW0324FS_Off +2 , /* H - Offset from QW0324F to     0014C */
    =00335 QW0324FN_Off +2 , /* H - Offset from QW0324F to     0014E */
    =00337 QW0324FI_Off +2 , /* H - Offset from QW0324F to     00150 */
    =00339 QW0324CV_Off +2 , /* H - Offset from QW0324F to     00152 */
    =00341 QW0324NV_Off +2 , /* H - Offset from QW0324F to     00154 */
    =00001 QW0324FS_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324FS_Var +0 ,    C - %U FUNCTION SCHEMA         00002 */
    =00001 QW0324FN_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324FN_Var +0 ,    C - %U FUNCTION NAME           00002 */
    =00001 QW0324FI_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324FI_Var +0 ,    C - %U SPECIFIC FUNCTION NAME  00002 */
    =00001 QW0324CV_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324CV_Var +0 ,    C - %U VIEW CREATOR            00002 */
    =00001 QW0324NV_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0324NV_Var +0 ,    C - %U VIEW NAME               00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0324QB = c2x(QW0324QB)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0324FS = c2x(QW0324FS)
  hex_QW0324FN = c2x(QW0324FN)
  hex_QW0324FI = c2x(QW0324FI)
  hex_QW0324FY = c2x(QW0324FY)
  hex_QW0324CV = c2x(QW0324CV)
  hex_QW0324NV = c2x(QW0324NV)
  hex_QW0324FL = c2x(QW0324FL)
  hex_QW0324FT = c2x(QW0324FT)
  hex_QW0324FS_Off = c2x(QW0324FS_Off)
  hex_QW0324FN_Off = c2x(QW0324FN_Off)
  hex_QW0324FI_Off = c2x(QW0324FI_Off)
  hex_QW0324CV_Off = c2x(QW0324CV_Off)
  hex_QW0324NV_Off = c2x(QW0324NV_Off)
  hex_QW0324FS_Len = c2x(QW0324FS_Len)
  hex_QW0324FN_Len = c2x(QW0324FN_Len)
  hex_QW0324FI_Len = c2x(QW0324FI_Len)
  hex_QW0324CV_Len = c2x(QW0324CV_Len)
  hex_QW0324NV_Len = c2x(QW0324NV_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0324F",desired_dsect) > 0)) then do
    void_rc = queue_QW0324F_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0324F:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0324F_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0324F:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      QUERY BLOCK NUMBER.          x:" hex_QW0324QB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      UNUSED                       x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U FUNCTION SCHEMA           x:" hex_QW0324FS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U FUNCTION NAME             x:" hex_QW0324FN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U SPECIFIC FUNCTION NAME    x:" hex_QW0324FI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNCTION TYPE                x:" hex_QW0324FY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U VIEW CREATOR              x:" hex_QW0324CV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U VIEW NAME                 x:" hex_QW0324NV
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FUNCTION TEXT LENGTH         x:" hex_QW0324FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U FUNCTION TEXT             x:" hex_QW0324FT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324F to       x:" hex_QW0324FS_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324F to       x:" hex_QW0324FN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324F to       x:" hex_QW0324FI_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324F to       x:" hex_QW0324CV_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0324F to       x:" hex_QW0324NV_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324FS_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324FN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324FI_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324CV_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0324NV_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0325 length is 000F2
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0325:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0325,242)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0325 Length: 242"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0325 ,
    =00001 QW0325CO +18 , /* C - %U Collection ID of the packa 00000 */
    =00019 QW0325PR +8 , /* C - %U Name of the program or pack 00012 */
    =00027 RSVD0001 +2 , /* C - Unused, for alignment          0001A */
    =00029 QW0325SN +4 , /* F - Statement number of SQL statem 0001C */
    =00033 QW0325SC +8 , /* C - %U Schema name of the trigger  00020 */
,/* =00041 QW0325EX +0 ,    C - External trigger name          00028 */
    =00041 QW0325LX +2 , /* H - Length of external trigger nam 00028 */
    =00043 QW0325TX +30 , /* C - %U External trigger name text 0002A */
    =00073 QW0325NM +8 , /* C - %U Trigger name                00048 */
    =00081 QW0325TS +8 , /* C - Trigger Timestamp              00050 */
    =00089 QW0325AC +1 , /* C - Trigger activation time        00058 */
  ,     /* QW0325B EQU x'000000C2' Trigger activation time is BEFORE */
  ,     /* QW0325A EQU x'000000C1' Trigger activation time is AFTER. */
    =00090 QW0325GR +1 , /* C - Trigger granularity            00059 */
  ,     /* QW0325R EQU x'000000D9' Trigger granularity is FOR EACH R */
  ,     /* QW0325S EQU x'00000000' Trigger granularity is FOR EACH S */
    =00091 QW0325SS +1 , /* C - Triggering SQL statement:      0005A */
  ,     /* QW0325U EQU x'00000000' Triggering SQL statement is UPDAT */
  ,     /* QW0325I EQU x'000000C9' Triggering SQL statement is INSER */
  ,     /* QW0325D EQU x'000000C4' Triggering SQL statement is DELET */
    =00092 QW0325ET +1 , /* C - Entry/exit event type:         0005B */
  ,     /* QW0325E EQU x'000000C5' The agent is entering trigger act */
  ,     /* QW0325X EQU x'00000000' The agent is exiting trigger acti */
    =00093 QW0325CN +1 , /* C - Triggered action condition eva 0005C */
  ,     /* QW0325T EQU x'00000000' Triggered action condition tested */
  ,     /* QW0325F EQU x'000000C6' Triggered action condition tested */
  ,     /* QW0325N EQU x'000000D5' There was no triggered action con */
    =00094 RSVD0002 +1 , /* C - Unused, for alignment          0005D */
    =00095 QW0325NL +2 , /* R - Nesting level of the trigger   0005E */
    =00097 QW0325SQ +136 , /* C - The SQLCA returned from the  00060 */
    =00233 QW0325CO_Off +2 , /* H - Offset from QW0325 to      000E8 */
    =00235 QW0325PR_Off +2 , /* H - Offset from QW0325 to      000EA */
    =00237 QW0325SC_Off +2 , /* H - Offset from QW0325 to      000EC */
    =00239 QW0325TX_Off +2 , /* H - Offset from QW0325 to      000EE */
    =00241 QW0325NM_Off +2 , /* H - Offset from QW0325 to      000F0 */
,/* =00243 QW0325EN +0 ,    C - End of record                  000F2 */
    =00001 QW0325CO_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0325CO_Var +0 ,    C - %U Collection ID of stmt p 00002 */
    =00001 QW0325PR_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0325PR_Var +0 ,    C - %U Name of stmt program or 00002 */
    =00001 QW0325SC_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0325SC_Var +0 ,    C - %U Schema name of the trig 00002 */
    =00001 QW0325TX_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0325TX_Var +0 ,    C - %U External trigger name t 00002 */
    =00001 QW0325NM_Len +2 , /* H - Length of the next field   00000 */
,/* =00003 QW0325NM_Var +0 ,    C - %U Trigger name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0325CO = c2x(QW0325CO)
  hex_QW0325PR = c2x(QW0325PR)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0325SN = c2x(QW0325SN)
  hex_QW0325SC = c2x(QW0325SC)
  hex_QW0325LX = c2x(QW0325LX)
  hex_QW0325TX = c2x(QW0325TX)
  hex_QW0325NM = c2x(QW0325NM)
  hex_QW0325TS = c2x(QW0325TS)
  hex_QW0325AC = c2x(QW0325AC)
  hex_QW0325GR = c2x(QW0325GR)
  hex_QW0325SS = c2x(QW0325SS)
  hex_QW0325ET = c2x(QW0325ET)
  hex_QW0325CN = c2x(QW0325CN)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0325NL = c2x(QW0325NL)
  hex_QW0325SQ = c2x(QW0325SQ)
  hex_QW0325CO_Off = c2x(QW0325CO_Off)
  hex_QW0325PR_Off = c2x(QW0325PR_Off)
  hex_QW0325SC_Off = c2x(QW0325SC_Off)
  hex_QW0325TX_Off = c2x(QW0325TX_Off)
  hex_QW0325NM_Off = c2x(QW0325NM_Off)
  hex_QW0325CO_Len = c2x(QW0325CO_Len)
  hex_QW0325PR_Len = c2x(QW0325PR_Len)
  hex_QW0325SC_Len = c2x(QW0325SC_Len)
  hex_QW0325TX_Len = c2x(QW0325TX_Len)
  hex_QW0325NM_Len = c2x(QW0325NM_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0325",desired_dsect) > 0)) then do
    void_rc = queue_QW0325_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0325:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0325_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0325:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Collection ID of the pack x:" hex_QW0325CO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Name of the program or pa x:" hex_QW0325PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unused, for alignment        x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement number of SQL stat x:" hex_QW0325SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Schema name of the trigge x:" hex_QW0325SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of external trigger n x:" hex_QW0325LX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U External trigger name tex x:" hex_QW0325TX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Trigger name              x:" hex_QW0325NM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Trigger Timestamp            x:" hex_QW0325TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Trigger activation time      x:" hex_QW0325AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Trigger granularity          x:" hex_QW0325GR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Triggering SQL statement:    x:" hex_QW0325SS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Entry/exit event type:       x:" hex_QW0325ET
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Triggered action condition e x:" hex_QW0325CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unused, for alignment        x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Nesting level of the trigger x:" hex_QW0325NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      The SQLCA returned from the  x:" hex_QW0325SQ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0325 to        x:" hex_QW0325CO_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0325 to        x:" hex_QW0325PR_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0325 to        x:" hex_QW0325SC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0325 to        x:" hex_QW0325TX_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0325 to        x:" hex_QW0325NM_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0325CO_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0325PR_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0325SC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0325TX_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the next field     x:" hex_QW0325NM_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0326 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0326:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0326,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0326 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0326 ,
    =00001 RSVD0001 +4 , /* F - Reserved                       00000 */
,/* =00005 QW0326EN +0 ,    C - End of record                  00004 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_RSVD0001 = c2x(RSVD0001)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0326",desired_dsect) > 0)) then do
    void_rc = queue_QW0326_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0326:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0326_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0326:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_RSVD0001
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0327 length is 0010C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0327:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0327,268)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0327 Length: 268"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0327 ,
    =00001 QW0327TS +8 , /* C - TIMESTAMP FOR THIS USE OF TOKE 00000 */
    =00009 QW0327TK +4 , /* C - LE ENVIRONMENT TOKEN           00008 */
    =00013 QW0327MS +256 , /* C - @MSGRTN TEXT                 0000C */
    .           /* End of DSECT */
  /* next byte at 269 */
  hex_QW0327TS = c2x(QW0327TS)
  hex_QW0327TK = c2x(QW0327TK)
  hex_QW0327MS = c2x(QW0327MS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0327",desired_dsect) > 0)) then do
    void_rc = queue_QW0327_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0327:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0327_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0327:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP FOR THIS USE OF TO x:" hex_QW0327TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LE ENVIRONMENT TOKEN         x:" hex_QW0327TK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      @MSGRTN TEXT                 x:" hex_QW0327MS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0329 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0329:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0329,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0329 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0329 ,
    =00001 QW0329RT +1 , /* C - REQUEST TYPE (SEE QW0252 FOR V 00000 */
    =00002 QW0329GB +11 , /* C - GBP NAME                      00001 */
    =00013 QW0329ST +4 , /* F - ASYNCH WAIT TIME (MICROSECONDS 0000C */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0329RT = c2x(QW0329RT)
  hex_QW0329GB = c2x(QW0329GB)
  hex_QW0329ST = c2x(QW0329ST)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0329",desired_dsect) > 0)) then do
    void_rc = queue_QW0329_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0329:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0329_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0329:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      REQUEST TYPE (SEE QW0252 FOR x:" hex_QW0329RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      GBP NAME                     x:" hex_QW0329GB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ASYNCH WAIT TIME (MICROSECON x:" hex_QW0329ST
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0330 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0330:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0330,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0330 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0330 ,
    =00001 QW0330CP +4 , /* F - ACTIVE LOG COPY NUMBER (1 OR 2 00000 */
    =00005 QW0330PC +4 , /* F - PERCENTAGE FILLED OF LAST AVAI 00004 */
,/* =00009 QW0330EN +0 ,    C - END OF IFCID(QWHS0330)         00008 */
    .           /* End of DSECT */
  /* next byte at 9 */
  hex_QW0330CP = c2x(QW0330CP)
  hex_QW0330PC = c2x(QW0330PC)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0330",desired_dsect) > 0)) then do
    void_rc = queue_QW0330_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0330:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0330_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0330:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACTIVE LOG COPY NUMBER (1 OR x:" hex_QW0330CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PERCENTAGE FILLED OF LAST AV x:" hex_QW0330PC
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0331 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0331:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0331,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0331 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0331 ,
    =00001 QW0331FN +4 , /* C - (S)                            00000 */
    =00005 QW0331FC +2 , /* X - (S)                            00004 */
    =00007 QW0331F1 +2 , /* X - (S)                            00006 */
    =00009 QW0331F2 +2 , /* X - (S)                            00008 */
    =00011 QW0331CS +2 , /* X - (S)                            0000A */
    =00013 QW0331RC +4 , /* F - (S)                            0000C */
    =00017 QW0331RS +4 , /* F - (S)                            00010 */
    =00021 QW0331BP +4 , /* F - (S)                            00014 */
    =00025 QW0331LO +4 , /* F - (S)                            00018 */
    =00029 QW0331RT +4 , /* F - (S)                            0001C */
    =00033 QW0331ST +2 , /* H - (S)                            00020 */
    =00035 QW0331AT +2 , /* X - (S)                            00022 */
    =00037 QW0331TC +4 , /* F - (S)                            00024 */
    =00041 QW0331NC +4 , /* F - (S)                            00028 */
    =00045 QW0331HC +4 , /* F - (S)                            0002C */
    =00049 QW0331SP +4 , /* F - (S)                            00030 */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0331FN = c2x(QW0331FN)
  hex_QW0331FC = c2x(QW0331FC)
  hex_QW0331F1 = c2x(QW0331F1)
  hex_QW0331F2 = c2x(QW0331F2)
  hex_QW0331CS = c2x(QW0331CS)
  hex_QW0331RC = c2x(QW0331RC)
  hex_QW0331RS = c2x(QW0331RS)
  hex_QW0331BP = c2x(QW0331BP)
  hex_QW0331LO = c2x(QW0331LO)
  hex_QW0331RT = c2x(QW0331RT)
  hex_QW0331ST = c2x(QW0331ST)
  hex_QW0331AT = c2x(QW0331AT)
  hex_QW0331TC = c2x(QW0331TC)
  hex_QW0331NC = c2x(QW0331NC)
  hex_QW0331HC = c2x(QW0331HC)
  hex_QW0331SP = c2x(QW0331SP)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0331",desired_dsect) > 0)) then do
    void_rc = queue_QW0331_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0331:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0331_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0331:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331FN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331FC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331F2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331BP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331TC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331NC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331HC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0331SP
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0332 length is 00038
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0332:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0332,56)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0332 Length: 56"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0332 ,
,/* =00001 QW0332H +0 ,    C - (S)                             00000 */
    =00001 QW0332FN +4 , /* C - (S)                            00000 */
    =00005 QW0332AD +4 , /* F - (S)                            00004 */
    =00009 QW0332RC +4 , /* F - (S)                            00008 */
    =00013 QW0332RT +4 , /* F - (S)                            0000C */
    =00017 QW0332ST +2 , /* H - (S)                            00010 */
    =00019 QW0332NU +2 , /* H - (S)                            00012 */
    =00021 QW0332TP +8 , /* C - (S)                            00014 */
    =00029 QW0332PR +4 , /* F - (S)                            0001C */
    =00033 QW0332NX +4 , /* F - (S)                            00020 */
    =00037 QW0332LO +4 , /* F - (S)                            00024 */
    =00041 QW0332FL +2 , /* X - (S)                            00028 */
    =00043 QW0332CS +2 , /* X - (S)                            0002A */
,/* =00045 QW0332EN +0 ,    C - (S)                            0002C */
    =00045 QW0332TY +2 , /* X - (S)                            0002C */
    =00047 QW0332FS +2 , /* X - (S)                            0002E */
    =00049 QW0332LN +4 , /* F - (S)                            00030 */
,/* =00053 QW0332DA +0 ,    C - (S)                            00034 */
    =00053 QW0332PC +2 , /* C - (S)                            00034 */
    =00055 RSVD0001 +1 , /* X - (S)                            00036 */
    =00056 QW0332PL +1 , /* X - (S)                            00037 */
    .           /* End of DSECT */
  /* next byte at 57 */
  hex_QW0332FN = c2x(QW0332FN)
  hex_QW0332AD = c2x(QW0332AD)
  hex_QW0332RC = c2x(QW0332RC)
  hex_QW0332RT = c2x(QW0332RT)
  hex_QW0332ST = c2x(QW0332ST)
  hex_QW0332NU = c2x(QW0332NU)
  hex_QW0332TP = c2x(QW0332TP)
  hex_QW0332PR = c2x(QW0332PR)
  hex_QW0332NX = c2x(QW0332NX)
  hex_QW0332LO = c2x(QW0332LO)
  hex_QW0332FL = c2x(QW0332FL)
  hex_QW0332CS = c2x(QW0332CS)
  hex_QW0332TY = c2x(QW0332TY)
  hex_QW0332FS = c2x(QW0332FS)
  hex_QW0332LN = c2x(QW0332LN)
  hex_QW0332PC = c2x(QW0332PC)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0332PL = c2x(QW0332PL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0332",desired_dsect) > 0)) then do
    void_rc = queue_QW0332_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0332:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0332_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0332:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332FN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332RT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332NU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332NX
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332LO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332FS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0332PL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0333 length is 00040
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0333:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0333,64)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0333 Length: 64"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0333 ,
    =00001 QW0333FN +4 , /* C - (S)                            00000 */
    =00005 QW0333AD +8 , /* C - (S)                            00004 */
    =00013 QW0333RC +4 , /* F - (S)                            0000C */
    =00017 QW0333CT +4 , /* F - (S)                            00010 */
    =00021 QW0333ST +2 , /* H - (S)                            00014 */
    =00023 QW0333NL +1 , /* X - (S)                            00016 */
    =00024 QW0333PL +1 , /* X - (S)                            00017 */
    =00025 QW0333PC +2 , /* C - (S)                            00018 */
    =00027 QW0333TY +2 , /* X - (S)                            0001A */
    =00029 QW0333FL +2 , /* X - (S)                            0001C */
    =00031 QW0333CS +2 , /* X - (S)                            0001E */
    =00033 QW0333DT +2 , /* X - (S)                            00020 */
    =00035 RSVD0001 +2 , /* X - (S)                            00022 */
    =00037 QW0333LN +4 , /* F - (S)                            00024 */
    =00041 QW0333EN +24 , /* C - (S)                           00028 */
    .           /* End of DSECT */
  /* next byte at 65 */
  hex_QW0333FN = c2x(QW0333FN)
  hex_QW0333AD = c2x(QW0333AD)
  hex_QW0333RC = c2x(QW0333RC)
  hex_QW0333CT = c2x(QW0333CT)
  hex_QW0333ST = c2x(QW0333ST)
  hex_QW0333NL = c2x(QW0333NL)
  hex_QW0333PL = c2x(QW0333PL)
  hex_QW0333PC = c2x(QW0333PC)
  hex_QW0333TY = c2x(QW0333TY)
  hex_QW0333FL = c2x(QW0333FL)
  hex_QW0333CS = c2x(QW0333CS)
  hex_QW0333DT = c2x(QW0333DT)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0333LN = c2x(QW0333LN)
  hex_QW0333EN = c2x(QW0333EN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0333",desired_dsect) > 0)) then do
    void_rc = queue_QW0333_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0333:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0333_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0333:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333FN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333AD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333CS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0333EN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0334 length is 0003C
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0334:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0334,60)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0334 Length: 60"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0334 ,
,/* =00001 QW0334HD +0 ,    C - Header                         00000 */
    =00001 QW0334EC +8 , /* C - Eye Catcher  DRDA0334          00000 */
    =00009 QW0334LN +18 , /* C - %U Remote Location Name       00008 */
    =00027 QW0334VI +2 , /* H - Version of QW0334 record       0001A */
,/* =00029 QW0334ID +0 ,    C - Identifier                     0001C */
    =00029 QW0334MN +8 , /* C - Module Name                    0001C */
    =00037 QW0334UI +2 , /* H - Identifier within module       00024 */
    =00039 QW0334CP +2 , /* H - Codepoint                      00026 */
    =00041 QW0334RA +4 , /* F - Actual/default rowset value in 00028 */
    =00045 QW0334RE +4 , /* F - Expected rowset value in the C 0002C */
    =00049 QW0334EA +1 , /* X - Actual/default RTNEXTDTA value 00030 */
    =00050 QW0334OA +1 , /* X - Actual/default QRYSCRORN value 00031 */
    =00051 QW0334NA +8 , /* C - Actual/default QRYROWNBR value 00032 */
    =00059 QW0334LN_Off +2 , /* H - Offset from QW0334 to      0003A */
    =00001 QW0334LN_Len +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0334LN_Var +0 ,    C - %U Remote Location Name    00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0334EC = c2x(QW0334EC)
  hex_QW0334LN = c2x(QW0334LN)
  hex_QW0334VI = c2x(QW0334VI)
  hex_QW0334MN = c2x(QW0334MN)
  hex_QW0334UI = c2x(QW0334UI)
  hex_QW0334CP = c2x(QW0334CP)
  hex_QW0334RA = c2x(QW0334RA)
  hex_QW0334RE = c2x(QW0334RE)
  hex_QW0334EA = c2x(QW0334EA)
  hex_QW0334OA = c2x(QW0334OA)
  hex_QW0334NA = c2x(QW0334NA)
  hex_QW0334LN_Off = c2x(QW0334LN_Off)
  hex_QW0334LN_Len = c2x(QW0334LN_Len)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0334",desired_dsect) > 0)) then do
    void_rc = queue_QW0334_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0334:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0334_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0334:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye Catcher  DRDA0334        x:" hex_QW0334EC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Remote Location Name      x:" hex_QW0334LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Version of QW0334 record     x:" hex_QW0334VI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Module Name                  x:" hex_QW0334MN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Identifier within module     x:" hex_QW0334UI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Codepoint                    x:" hex_QW0334CP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual/default rowset value  x:" hex_QW0334RA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Expected rowset value in the x:" hex_QW0334RE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual/default RTNEXTDTA val x:" hex_QW0334EA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual/default QRYSCRORN val x:" hex_QW0334OA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Actual/default QRYROWNBR val x:" hex_QW0334NA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0334 to        x:" hex_QW0334LN_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0334LN_Len
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0335 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0335:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0335,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0335 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0335 ,
    =00001 QW0335SE +4 , /* C - STALLED SYSTEM EVENT           00000 */
  ,     /* QW0335CK EQU x'C3D2D7E3' SYSTEM CHECKPOINT PROCESSOR      */
  ,     /* QW0335OF EQU x'D6C6D3C4' LOG OFFLOAD TASK                 */
    =00005 QW0335TS +8 , /* C - TIMESTAMP OF PRIOR EVENT       00004 */
    =00013 QW0335PR +6 , /* C - LOG RBA OF PRIOR EVENT         0000C */
    =00019 QW0335CR +6 , /* C - CURRENT HIGH WRITTEN LOG RBA   00012 */
,/* =00025 QW0335EN +0 ,    C - END OF IFCID(QWHS0335)         00018 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0335SE = c2x(QW0335SE)
  hex_QW0335TS = c2x(QW0335TS)
  hex_QW0335PR = c2x(QW0335PR)
  hex_QW0335CR = c2x(QW0335CR)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0335",desired_dsect) > 0)) then do
    void_rc = queue_QW0335_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0335:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0335_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0335:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STALLED SYSTEM EVENT         x:" hex_QW0335SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TIMESTAMP OF PRIOR EVENT     x:" hex_QW0335TS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOG RBA OF PRIOR EVENT       x:" hex_QW0335PR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CURRENT HIGH WRITTEN LOG RBA x:" hex_QW0335CR
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0336 length is 00058
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0336:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0336,88)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0336 Length: 88"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0336 ,
    =00001 RSVD0001 +2 , /* C - (S)                            00000 */
    =00003 QW0336XS +2 , /* C - (S)                            00002 */
    =00005 QW0336MD +8 , /* C - (S)                            00004 */
    =00013 QW0336SC +4 , /* C - (S)                            0000C */
,/* =00017 QW0336RX +0 ,    C - (S)                            00010 */
,/* =00017 QW0336DB +0 ,    C - (S)                            00010 */
    =00017 QW0336DE +2 , /* C - (S)                            00010 */
    =00019 QW0336DT +6 , /* C - (S)                            00012 */
,/* =00025 QW0336SB +0 ,    C - (S)                            00018 */
    =00025 QW0336SE +2 , /* C - (S)                            00018 */
    =00027 QW0336ST +6 , /* C - (S)                            0001A */
,/* =00033 QW0336PB +0 ,    C - (S)                            00020 */
    =00033 QW0336PE +2 , /* C - (S)                            00020 */
    =00035 QW0336PT +6 , /* C - (S)                            00022 */
,/* =00041 QW0336DP +0 ,    C - (S)                            00028 */
,/* =00041 QW0336EB +0 ,    C - (S)                            00028 */
    =00041 QW0336EE +2 , /* C - (S)                            00028 */
    =00043 QW0336E1 +2 , /* C - (S)                            0002A */
    =00045 QW0336E2 +2 , /* C - (S)                            0002C */
    =00047 QW0336E3 +2 , /* C - (S)                            0002E */
,/* =00049 QW0336AB +0 ,    C - (S)                            00030 */
    =00049 QW0336AE +2 , /* C - (S)                            00030 */
    =00051 QW0336A1 +2 , /* C - (S)                            00032 */
    =00053 QW0336A2 +2 , /* C - (S)                            00034 */
    =00055 QW0336A3 +2 , /* C - (S)                            00036 */
,/* =00057 QW0336UB +0 ,    C - (S)                            00038 */
    =00057 QW0336UE +2 , /* C - (S)                            00038 */
    =00059 QW0336U1 +2 , /* C - (S)                            0003A */
    =00061 QW0336U2 +2 , /* C - (S)                            0003C */
    =00063 QW0336U3 +2 , /* C - (S)                            0003E */
    =00065 QW0336PS +7 , /* C - (S)                            00040 */
    =00072 RSVD0002 +1 , /* C - (S)                            00047 */
,/* =00073 QW0336QB +0 ,    C - (S)                            00048 */
    =00073 QW0336QP +8 , /* C - (S)                            00048 */
    =00081 QW0336QD +2 , /* C - (S)                            00050 */
    =00083 QW0336Q1 +2 , /* C - (S)                            00052 */
    =00085 QW0336Q2 +2 , /* C - (S)                            00054 */
    =00087 QW0336Q3 +2 , /* C - (S)                            00056 */
  ,     /* QW0336CD EQU x'0000C4E3' (S)                              */
  ,     /* QW0336CS EQU x'0000E2E3' (S)                              */
  ,     /* QW0336CP EQU x'0000D7E3' (S)                              */
  ,     /* QW0336CE EQU x'0000C5E3' (S)                              */
  ,     /* QW0336CA EQU x'0000C1E3' (S)                              */
  ,     /* QW0336CU EQU x'0000E4E3' (S)                              */
    .           /* End of DSECT */
  /* next byte at 89 */
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0336XS = c2x(QW0336XS)
  hex_QW0336MD = c2x(QW0336MD)
  hex_QW0336SC = c2x(QW0336SC)
  hex_QW0336DE = c2x(QW0336DE)
  hex_QW0336DT = c2x(QW0336DT)
  hex_QW0336SE = c2x(QW0336SE)
  hex_QW0336ST = c2x(QW0336ST)
  hex_QW0336PE = c2x(QW0336PE)
  hex_QW0336PT = c2x(QW0336PT)
  hex_QW0336EE = c2x(QW0336EE)
  hex_QW0336E1 = c2x(QW0336E1)
  hex_QW0336E2 = c2x(QW0336E2)
  hex_QW0336E3 = c2x(QW0336E3)
  hex_QW0336AE = c2x(QW0336AE)
  hex_QW0336A1 = c2x(QW0336A1)
  hex_QW0336A2 = c2x(QW0336A2)
  hex_QW0336A3 = c2x(QW0336A3)
  hex_QW0336UE = c2x(QW0336UE)
  hex_QW0336U1 = c2x(QW0336U1)
  hex_QW0336U2 = c2x(QW0336U2)
  hex_QW0336U3 = c2x(QW0336U3)
  hex_QW0336PS = c2x(QW0336PS)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0336QP = c2x(QW0336QP)
  hex_QW0336QD = c2x(QW0336QD)
  hex_QW0336Q1 = c2x(QW0336Q1)
  hex_QW0336Q2 = c2x(QW0336Q2)
  hex_QW0336Q3 = c2x(QW0336Q3)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0336",desired_dsect) > 0)) then do
    void_rc = queue_QW0336_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0336:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0336_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0336:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336XS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336MD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336SC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336DE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336DT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336PE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336EE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336E1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336E2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336E3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336AE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336A1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336A2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336A3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336UE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336U1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336U2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336U3
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336QP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336QD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336Q1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336Q2
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0336Q3
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0337 length is 00118
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0337:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0337,280)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0337 Length: 280"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0337 ,
    =00001 QW0337DB +2 , /* C - DATA BASE ID                   00000 */
    =00003 QW0337OB +2 , /* C - PAGESET ID or Table OBID       00002 */
    =00005 QW0337LS +1 , /* X - Lock state that was escalated  00004 */
    =00006 QW0337LL +1 , /* X - Type of lower level lock used  00005 */
  ,     /* QW0337L1 EQU x'00000001' * PAGE LOCK                      */
  ,     /* QW0337L2 EQU x'00000002' * ROW LOCK                       */
  ,     /* QW0337L3 EQU x'00000003' * LOB lock                       */
  ,     /* QW0337L4 EQU x'00000004' * XML lock                       */
    =00007 RSVD0001 +2 , /* X - Not used                       00006 */
    =00009 QW0337LH +4 , /* X - Number of lower level locks th 00008 */
    =00013 QW0337SN +4 , /* X - Statement number               0000C */
    =00017 QW0337ST +4 , /* X - Waiters cached statement ID, o 00010 */
,/* =00021 QW0337CI +0 ,    C - Collection ID field            00014 */
    =00021 QW0337CL +2 , /* X - Length of the Collection ID    00014 */
    =00023 QW0337CN +128 , /* C - Collection ID (%U)           00016 */
,/* =00151 QW0337PK +0 ,    C - Package name field             00096 */
    =00151 QW0337PL +2 , /* X - Length of the Package name     00096 */
    =00153 QW0337PN +128 , /* C - Package name (%U)            00098 */
  ,     /* QW0337S2 EQU x'00000002' *  INTENTED    SHARE             */
  ,     /* QW0337S3 EQU x'00000003' *  INTENTED EXCLUSIVE            */
  ,     /* QW0337S4 EQU x'00000004' *  SHARED                        */
  ,     /* QW0337S5 EQU x'00000005' *  UPDATE                        */
  ,     /* QW0337S6 EQU x'00000006' *  SHARED INTENT EXCLUSIVE       */
  ,     /* QW0337S8 EQU x'00000008' *  EXCLUSIVE                     */
    =00001 QW0340_EYEC +4 , /* C - (S)                         00000 */
    =00005 QW0340_MODNAME +12 , /* C - (S)                     00004 */
    =00017 QW0340_SQLCODE +4 , /* F - (S)                      00010 */
    =00021 QW0340_SQLERRD +28 , /* C - (S)                     00014 */
    =00049 QW0340_SQLWARN +16 , /* C - (S)                     00030 */
    =00065 QW0340_CAPTR +8 , /* C - (S)                        00040 */
    =00073 QW0340_NOPARMS +2 , /* H - (S)                      00048 */
    =00075 QW0340_FLAGS +1 , /* C - (S)                        0004A */
    =00076 QW0340_MSGID +10 , /* C - (S)                       0004B */
    =00086 QW0340_SQLSTAT +5 , /* C - (S)                      00055 */
    =00091 QW0340_AVAIL +14 , /* C - (S)                       0005A */
    =00001 QW0341LN_Len +2 , /* H - Length of the following fi 00000 */
    =00003 QW0341LN_Var +128 , /* C - %U Location name (RDB na 00002 */
    =00131 QW0341PC_Len +2 , /* H - Length of the following fi 00082 */
    =00133 QW0341PC_Var +128 , /* C - %U Package collection id 00084 */
    =00261 QW0341PN_Len +2 , /* H - Length of the following fi 00104 */
    =00263 QW0341PN_Var +128 , /* C - %U Program name          00106 */
    =00391 QW0341TS +8 , /* C - Time-stamp                     00186 */
    .           /* End of DSECT */
  /* next byte at 399 */
  hex_QW0337DB = c2x(QW0337DB)
  hex_QW0337OB = c2x(QW0337OB)
  hex_QW0337LS = c2x(QW0337LS)
  hex_QW0337LL = c2x(QW0337LL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0337LH = c2x(QW0337LH)
  hex_QW0337SN = c2x(QW0337SN)
  hex_QW0337ST = c2x(QW0337ST)
  hex_QW0337CL = c2x(QW0337CL)
  hex_QW0337CN = c2x(QW0337CN)
  hex_QW0337PL = c2x(QW0337PL)
  hex_QW0337PN = c2x(QW0337PN)
  hex_QW0340_EYEC = c2x(QW0340_EYEC)
  hex_QW0340_MODNAME = c2x(QW0340_MODNAME)
  hex_QW0340_SQLCODE = c2x(QW0340_SQLCODE)
  hex_QW0340_SQLERRD = c2x(QW0340_SQLERRD)
  hex_QW0340_SQLWARN = c2x(QW0340_SQLWARN)
  hex_QW0340_CAPTR = c2x(QW0340_CAPTR)
  hex_QW0340_NOPARMS = c2x(QW0340_NOPARMS)
  hex_QW0340_FLAGS = c2x(QW0340_FLAGS)
  hex_QW0340_MSGID = c2x(QW0340_MSGID)
  hex_QW0340_SQLSTAT = c2x(QW0340_SQLSTAT)
  hex_QW0340_AVAIL = c2x(QW0340_AVAIL)
  hex_QW0341LN_Len = c2x(QW0341LN_Len)
  hex_QW0341LN_Var = c2x(QW0341LN_Var)
  hex_QW0341PC_Len = c2x(QW0341PC_Len)
  hex_QW0341PC_Var = c2x(QW0341PC_Var)
  hex_QW0341PN_Len = c2x(QW0341PN_Len)
  hex_QW0341PN_Var = c2x(QW0341PN_Var)
  hex_QW0341TS = c2x(QW0341TS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0337",desired_dsect) > 0)) then do
    void_rc = queue_QW0337_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0337:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0337_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0337:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA BASE ID                 x:" hex_QW0337DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET ID or Table OBID     x:" hex_QW0337OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Lock state that was escalate x:" hex_QW0337LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Type of lower level lock use x:" hex_QW0337LL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Not used                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Number of lower level locks  x:" hex_QW0337LH
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Statement number             x:" hex_QW0337SN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Waiters cached statement ID, x:" hex_QW0337ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the Collection ID  x:" hex_QW0337CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Collection ID (%U)           x:" hex_QW0337CN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the Package name   x:" hex_QW0337PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Package name (%U)            x:" hex_QW0337PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_EYEC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_MODNAME
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_SQLCODE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_SQLERRD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_SQLWARN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_CAPTR
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_NOPARMS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_FLAGS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_MSGID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_SQLSTAT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0340_AVAIL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0341LN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Location name (RDB name)  x:" hex_QW0341LN_Var
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0341PC_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection id     x:" hex_QW0341PC_Var
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0341PN_Len
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Program name              x:" hex_QW0341PN_Var
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Time-stamp                   x:" hex_QW0341TS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0342 length is 00028
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0342:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0342,40)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0342 Length: 40"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0342 ,
    =00001 QW0342TY +4 , /* C - Database Type                  00000 */
    =00005 QW0342DB +2 , /* X - DBID of the Database           00004 */
    =00007 QW0342PS +2 , /* X - PSID of the Table/Index Space  00006 */
    =00009 QW0342CT +4 , /* F - Current space usage for tables 00008 */
    =00013 QW0342MT +4 , /* F - Maximum space usage for tables 0000C */
    =00017 QW0342CI +4 , /* F - Current space usage for Indexe 00010 */
    =00021 QW0342MI +4 , /* F - Maximum space usage for Indexe 00014 */
    =00025 QW0342AT +4 , /* F - Agent Token                    00018 */
    =00029 QW0342PT +4 , /* F - Parent Token                   0001C */
    =00033 QW0342F1 +4 , /* F - Serviceability                 00020 */
    =00037 QW0342F2 +4 , /* F - Serviceability                 00024 */
  ,     /* QW0342WF EQU x'E6C6C4C2' WFDB - Work File Database        */
  ,     /* QW0342TD EQU x'E3D7C4C2' TPDB - Temp Database             */
,/* =00041 QW0342EN +0 ,    C - END OF QW0342                  00028 */
    .           /* End of DSECT */
  /* next byte at 41 */
  hex_QW0342TY = c2x(QW0342TY)
  hex_QW0342DB = c2x(QW0342DB)
  hex_QW0342PS = c2x(QW0342PS)
  hex_QW0342CT = c2x(QW0342CT)
  hex_QW0342MT = c2x(QW0342MT)
  hex_QW0342CI = c2x(QW0342CI)
  hex_QW0342MI = c2x(QW0342MI)
  hex_QW0342AT = c2x(QW0342AT)
  hex_QW0342PT = c2x(QW0342PT)
  hex_QW0342F1 = c2x(QW0342F1)
  hex_QW0342F2 = c2x(QW0342F2)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0342",desired_dsect) > 0)) then do
    void_rc = queue_QW0342_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0342:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0342_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0342:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Database Type                x:" hex_QW0342TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DBID of the Database         x:" hex_QW0342DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PSID of the Table/Index Spac x:" hex_QW0342PS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current space usage for tabl x:" hex_QW0342CT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum space usage for tabl x:" hex_QW0342MT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current space usage for Inde x:" hex_QW0342CI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum space usage for Inde x:" hex_QW0342MI
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Agent Token                  x:" hex_QW0342AT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Parent Token                 x:" hex_QW0342PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Serviceability               x:" hex_QW0342F1
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Serviceability               x:" hex_QW0342F2
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0343 length is 00050
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0343:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0343,80)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0343 Length: 80"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0343 ,
    =00001 QW0343ID +8 , /* C - %U Authid                      00000 */
    =00009 QW0343PC +18 , /* C - %U Package collection ID      00008 */
    =00027 QW0343PK +8 , /* C - %U Package name                0001A */
    =00035 QW0343PL +8 , /* C - %U Plan name                   00022 */
    =00043 RSVD0001 +2 , /* C -                                0002A */
    =00045 QW0343MS +4 , /* F - MAXTEMPS zparm value for agent 0002C */
    =00049 QW0343CU +4 , /* F - Current total system wide usag 00030 */
    =00053 QW0343MU +4 , /* F - Maximum total system wide usag 00034 */
    =00057 QW0343RS +16 , /* C - Reserved                      00038 */
    =00073 QW0343ID_Off +2 , /* H - Offset from QW0343 to auth 00048 */
    =00075 QW0343PC_Off +2 , /* H - Offset from QW0343 to pack 0004A */
    =00077 QW0343PK_Off +2 , /* H - Offset from QW0343 to pack 0004C */
    =00079 QW0343PL_Off +2 , /* H - Offset from QW0343 to plan 0004E */
    .           /* End of DSECT */
  /* next byte at 81 */
  hex_QW0343ID = c2x(QW0343ID)
  hex_QW0343PC = c2x(QW0343PC)
  hex_QW0343PK = c2x(QW0343PK)
  hex_QW0343PL = c2x(QW0343PL)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0343MS = c2x(QW0343MS)
  hex_QW0343CU = c2x(QW0343CU)
  hex_QW0343MU = c2x(QW0343MU)
  hex_QW0343RS = c2x(QW0343RS)
  hex_QW0343ID_Off = c2x(QW0343ID_Off)
  hex_QW0343PC_Off = c2x(QW0343PC_Off)
  hex_QW0343PK_Off = c2x(QW0343PK_Off)
  hex_QW0343PL_Off = c2x(QW0343PL_Off)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0343",desired_dsect) > 0)) then do
    void_rc = queue_QW0343_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0343:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0343_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0343:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Authid                    x:" hex_QW0343ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package collection ID     x:" hex_QW0343PC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Package name              x:" hex_QW0343PK
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      %U Plan name                 x:" hex_QW0343PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "                                   x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      MAXTEMPS zparm value for age x:" hex_QW0343MS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Current total system wide us x:" hex_QW0343CU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Maximum total system wide us x:" hex_QW0343MU
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reserved                     x:" hex_QW0343RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0343 to authid x:" hex_QW0343ID_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0343 to packag x:" hex_QW0343PC_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0343 to packag x:" hex_QW0343PK_Off
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Offset from QW0343 to plan n x:" hex_QW0343PL_Off
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0343ID_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0343ID_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0343ID_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0343ID_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0343ID_D ,
    =00001 QW0343ID_LEN +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0343ID_Var +0 ,    C - %U Authid                  00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0343ID_LEN = c2x(QW0343ID_LEN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0343ID_D",desired_dsect) > 0)) then do
    void_rc = queue_QW0343ID_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0343ID_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0343ID_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0343ID_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0343ID_LEN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0343PC_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0343PC_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0343PC_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0343PC_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0343PC_D ,
    =00001 QW0343PC_LEN +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0343PC_Var +0 ,    C - %U Package collection ID   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0343PC_LEN = c2x(QW0343PC_LEN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0343PC_D",desired_dsect) > 0)) then do
    void_rc = queue_QW0343PC_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0343PC_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0343PC_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0343PC_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0343PC_LEN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0343PK_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0343PK_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0343PK_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0343PK_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0343PK_D ,
    =00001 QW0343PK_LEN +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0343PK_Var +0 ,    C - %U Package name            00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0343PK_LEN = c2x(QW0343PK_LEN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0343PK_D",desired_dsect) > 0)) then do
    void_rc = queue_QW0343PK_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0343PK_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0343PK_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0343PK_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0343PK_LEN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0343PL_D length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0343PL_D:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0343PL_D,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0343PL_D Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0343PL_D ,
    =00001 QW0343PL_LEN +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0343PL_Var +0 ,    C - %U Plan name               00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0343PL_LEN = c2x(QW0343PL_LEN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0343PL_D",desired_dsect) > 0)) then do
    void_rc = queue_QW0343PL_D_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0343PL_D:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0343PL_D_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0343PL_D:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -----------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0343PL_LEN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0344 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0344:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0344,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0344 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0344 ,
    =00001 QW0344TR_LEN +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0344TR +0 ,    C - Trace Buffer                   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0344TR_LEN = c2x(QW0344TR_LEN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0344",desired_dsect) > 0)) then do
    void_rc = queue_QW0344_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0344:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0344_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0344:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0344TR_LEN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0345 length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0345:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0345,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0345 Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0345 ,
    =00001 QW0345TR_LEN +2 , /* H - Length of the following fi 00000 */
,/* =00003 QW0345TR +0 ,    C - Trace Buffer                   00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0345TR_LEN = c2x(QW0345TR_LEN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0345",desired_dsect) > 0)) then do
    void_rc = queue_QW0345_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0345:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0345_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0345:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0345TR_LEN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0346 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0346:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0346,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0346 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0346 ,
    =00001 QW0346_ACE +4 , /* F - ACE token. This can be used  00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0346_ACE = c2x(QW0346_ACE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0346",desired_dsect) > 0)) then do
    void_rc = queue_QW0346_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0346:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0346_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0346:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ACE token. This can be used  x:" hex_QW0346_ACE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0350 length is 00008
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0350:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0350,8)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0350 Length: 8"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0350 ,
    =00001 QW0350OT +1 , /* X - PARSER OPTIONS AND HOST LANGUA 00000 */
  ,     /* QW0350OQ EQU x'00000080' OPTION - APOST(0) OR QUOTE(1)    */
  ,     /* QW0350OD EQU x'00000040' OPTION - PERIOD(0) OR COMMA(1)   */
  ,     /* QW0350OR EQU x'00000020' OPTION - APOSTSQL(0) OR QUOTESQL */
  ,     /* QW0350OM EQU x'00000010' OPTION - MIXED=NO (0) OR MIXED=Y */
  ,     /* QW0350OH EQU x'00000007' OPTION - HOST LANGUAGE BIT MASK  */
  ,     /* QW0350OA EQU x'00000001' OPTION - HOST ASSEMBLER LANGUAGE */
  ,     /* QW0350OC EQU x'00000002' OPTION - HOST COBOL              */
  ,     /* QW0350OP EQU x'00000003' OPTION - HOST PL/I               */
  ,     /* QW0350OS EQU x'00000004' OPTION - DYNAMIC SQL             */
  ,     /* QW0350OF EQU x'00000005' OPTION - HOST FORTRAN            */
  ,     /* QW0350O2 EQU x'00000006' OPTION - HOST COB2               */
  ,     /* QW035007 EQU x'00000007' LOOK AT FIELD QW0350HL TO DETERM */
    =00002 QW0350HL +1 , /* X - HOST LANGUAGE SECOND FIELD     00001 */
  ,     /* QW0350HB EQU x'000000C2' OPTION - HOST ASSEMBLER          */
  ,     /* QW0350HC EQU x'000000C3' OPTION - HOST COBOL              */
  ,     /* QW0350HD EQU x'000000C4' OPTION - HOST C                  */
  ,     /* QW0350HF EQU x'000000C6' OPTION - HOST FORTRAN            */
  ,     /* QW0350HP EQU x'000000D7' OPTION - HOST PL/I               */
  ,     /* QW0350H2 EQU x'000000F2' OPTION - HOST COBOL II           */
  ,     /* QW0350H3 EQU x'000000F3' OPTION - HOST IBM COBOL          */
  ,     /* QW0350H4 EQU x'000000F4' OPTION - HOST C++                */
    =00003 QW0350FG +1 , /* X - FLAG BYTE                      00002 */
  ,     /* QW0350FF EQU x'00000080' FIRST SQL STATEMENT SEGMENT      */
  ,     /* QW0350FL EQU x'00000040' LAST SQL STATEMENT SEGMENT       */
    =00004 RSVD0001 +1 , /* X - RESERVED                       00003 */
    =00005 QW0350TL +4 , /* F - TOTAL LENGTH OF THE SQL STATEM 00004 */
  ,
  ,/*00008 __no__name__ ORG - QW0350 - x'00000000'             00008 */
    =00001 QW0350SPL +2 , /* H - Length of the following field 00000 */
,/* =00003 QW0350SP +0 ,    C - %U (PART OF) SQL STATEMENT BEI 00002 */
  ,
  ,/*00002 __no__name__ ORG - QW0350 - x'00000000'             00002 */
    =00001 QW0350SEL +2 , /* H - Length of the following field 00000 */
,/* =00003 QW0350SE +0 ,    C - %U (END OF) SQL STATEMENT BEIN 00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0350OT = c2x(QW0350OT)
  hex_QW0350HL = c2x(QW0350HL)
  hex_QW0350FG = c2x(QW0350FG)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0350TL = c2x(QW0350TL)
  hex_QW0350SPL = c2x(QW0350SPL)
  hex_QW0350SEL = c2x(QW0350SEL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0350",desired_dsect) > 0)) then do
    void_rc = queue_QW0350_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0350:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0350_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0350:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PARSER OPTIONS AND HOST LANG x:" hex_QW0350OT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      HOST LANGUAGE SECOND FIELD   x:" hex_QW0350HL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAG BYTE                    x:" hex_QW0350FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RESERVED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      TOTAL LENGTH OF THE SQL STAT x:" hex_QW0350TL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0350SPL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Length of the following fiel x:" hex_QW0350SEL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0351 length is 00001
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0351:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0351,1)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0351 Length: 1"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0351 ,
    =00001 QW0351RT +1 , /* X - Request type - GET, CLOSE, CLO 00000 */
  ,     /* QW0351G EQU x'00000001' Materialize a LOB/XML value into  */
  ,     /* QW0351C EQU x'0000000C' Receive & discard a LOB/XML value */
  ,     /* QW0351CA EQU x'0000000D' Receive & discard all the LOB/XM */
    .           /* End of DSECT */
  /* next byte at 2 */
  hex_QW0351RT = c2x(QW0351RT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0351",desired_dsect) > 0)) then do
    void_rc = queue_QW0351_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0351:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0351_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0351:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Request type - GET, CLOSE, C x:" hex_QW0351RT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0352 length is 00010
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0352:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0352,16)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0352 Length: 16"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0352 ,
    =00001 QW0352ID +4 , /* F - Unique ID (LOB number for this 00000 */
    =00005 QW0352RL +4 , /* F - LOB length returned for this L 00004 */
    =00009 QW0352RC +4 , /* F - Return code for this LOB mater 00008 */
    =00013 QW0352RS +4 , /* F - Reason code for this LOB mater 0000C */
    .           /* End of DSECT */
  /* next byte at 17 */
  hex_QW0352ID = c2x(QW0352ID)
  hex_QW0352RL = c2x(QW0352RL)
  hex_QW0352RC = c2x(QW0352RC)
  hex_QW0352RS = c2x(QW0352RS)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0352",desired_dsect) > 0)) then do
    void_rc = queue_QW0352_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0352:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0352_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0352:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Unique ID (LOB number for th x:" hex_QW0352ID
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LOB length returned for this x:" hex_QW0352RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Return code for this LOB mat x:" hex_QW0352RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Reason code for this LOB mat x:" hex_QW0352RS
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0353 length is 000DA
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0353:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0353,218)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0353 Length: 218"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0353 ,
    =00001 QW0353SE +1 , /* C - marks START or END             00000 */
    =00002 QW0353IT +1 , /* C - invocation type                00001 */
    =00003 QW0353FL +1 , /* C - flags                          00002 */
    =00004 QW0353FT +1 , /* C - function type                  00003 */
    =00005 QW0353RC +4 , /* F - routine ret code               00004 */
    =00009 QW0353LN +8 , /* C - library name %E                00008 */
    =00017 QW0353FB +16 , /* C - feedaback code                00010 */
    =00033 QW0353SA +8 , /* C - DA                             00020 */
    =00041 QW0353EB +8 , /* C - EB                             00028 */
    =00049 QW0353PL +8 , /* C - parm list                      00030 */
    =00057 QW0353RS +4 , /* F - routine reason cd              00038 */
    =00061 QW0353LC +4 , /* F - LE return code                 0003C */
    =00065 QW0353LS +4 , /* F - LE reason code                 00040 */
    =00069 QW0353TN +2 , /* H - token number                   00044 */
    =00071 QW0353TFL +2 , /* C - token flags                   00046 */
    =00073 QW0353UM +16 , /* C - user mngd part                00048 */
,/* =00089 QW0353RN +0 ,    C - routine name                   00058 */
    =00089 QW0353RL +2 , /* C - routine name length            00058 */
    =00091 QW0353RD +128 , /* C - routine name data %E         0005A */
  ,     /* QW0353S EQU x'00000000' start of AuhtLE call              */
  ,     /* QW0353E EQU x'000000C5' end   of AuthLE call              */
  ,     /* QW0353UI EQU x'00000001' USERINIT                         */
  ,     /* QW0353UC EQU x'00000002' USERCALL                         */
  ,     /* QW0353UT EQU x'00000003' USERTERM                         */
  ,     /* QW0353MI EQU x'00000004' MNGDINIT                         */
  ,     /* QW0353MC EQU x'00000005' MNGDCALL                         */
  ,     /* QW0353MT EQU x'00000006' MNGDTERM                         */
    .           /* End of DSECT */
  /* next byte at 219 */
  hex_QW0353SE = c2x(QW0353SE)
  hex_QW0353IT = c2x(QW0353IT)
  hex_QW0353FL = c2x(QW0353FL)
  hex_QW0353FT = c2x(QW0353FT)
  hex_QW0353RC = c2x(QW0353RC)
  hex_QW0353LN = c2x(QW0353LN)
  hex_QW0353FB = c2x(QW0353FB)
  hex_QW0353SA = c2x(QW0353SA)
  hex_QW0353EB = c2x(QW0353EB)
  hex_QW0353PL = c2x(QW0353PL)
  hex_QW0353RS = c2x(QW0353RS)
  hex_QW0353LC = c2x(QW0353LC)
  hex_QW0353LS = c2x(QW0353LS)
  hex_QW0353TN = c2x(QW0353TN)
  hex_QW0353TFL = c2x(QW0353TFL)
  hex_QW0353UM = c2x(QW0353UM)
  hex_QW0353RL = c2x(QW0353RL)
  hex_QW0353RD = c2x(QW0353RD)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0353",desired_dsect) > 0)) then do
    void_rc = queue_QW0353_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0353:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0353_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0353:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      marks START or END           x:" hex_QW0353SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      invocation type              x:" hex_QW0353IT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      flags                        x:" hex_QW0353FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      function type                x:" hex_QW0353FT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      routine ret code             x:" hex_QW0353RC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      library name %E              x:" hex_QW0353LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      feedaback code               x:" hex_QW0353FB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DA                           x:" hex_QW0353SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EB                           x:" hex_QW0353EB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      parm list                    x:" hex_QW0353PL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      routine reason cd            x:" hex_QW0353RS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LE return code               x:" hex_QW0353LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LE reason code               x:" hex_QW0353LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      token number                 x:" hex_QW0353TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      token flags                  x:" hex_QW0353TFL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      user mngd part               x:" hex_QW0353UM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      routine name length          x:" hex_QW0353RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      routine name data %E         x:" hex_QW0353RD
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0354 length is 000BA
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0354:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0354,186)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0354 Length: 186"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0354 ,
    =00001 QW0354SE +1 , /* C - marks START or END             00000 */
    =00002 QW0354GF +1 , /* C - marks GET or FREE              00001 */
    =00003 QW0354IT +1 , /* C - invocation type                00002 */
    =00004 QW0354FL +1 , /* C - flags                          00003 */
    =00005 QW0354TN +2 , /* H - token number                   00004 */
    =00007 QW0354TF +2 , /* C - token flags                    00006 */
    =00009 QW0354LN +8 , /* C - library name %E                00008 */
    =00017 QW0354LC +4 , /* F - LE return code                 00010 */
    =00021 QW0354LS +4 , /* F - LE reason code                 00014 */
    =00025 QW0354SA +8 , /* C - DA                             00018 */
    =00033 QW0354EB +8 , /* C - EB                             00020 */
    =00041 QW0354UM +16 , /* C - user mngd part                00028 */
,/* =00057 QW0354RN +0 ,    C - routine name                   00038 */
    =00057 QW0354RL +2 , /* C - routune name length            00038 */
    =00059 QW0354RD +128 , /* C - routine name data %E         0003A */
  ,     /* QW0354G EQU x'000000C7' get  token                        */
  ,     /* QW0354F EQU x'000000C6' free token                        */
    .           /* End of DSECT */
  /* next byte at 187 */
  hex_QW0354SE = c2x(QW0354SE)
  hex_QW0354GF = c2x(QW0354GF)
  hex_QW0354IT = c2x(QW0354IT)
  hex_QW0354FL = c2x(QW0354FL)
  hex_QW0354TN = c2x(QW0354TN)
  hex_QW0354TF = c2x(QW0354TF)
  hex_QW0354LN = c2x(QW0354LN)
  hex_QW0354LC = c2x(QW0354LC)
  hex_QW0354LS = c2x(QW0354LS)
  hex_QW0354SA = c2x(QW0354SA)
  hex_QW0354EB = c2x(QW0354EB)
  hex_QW0354UM = c2x(QW0354UM)
  hex_QW0354RL = c2x(QW0354RL)
  hex_QW0354RD = c2x(QW0354RD)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0354",desired_dsect) > 0)) then do
    void_rc = queue_QW0354_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0354:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0354_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0354:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      marks START or END           x:" hex_QW0354SE
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      marks GET or FREE            x:" hex_QW0354GF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      invocation type              x:" hex_QW0354IT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      flags                        x:" hex_QW0354FL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      token number                 x:" hex_QW0354TN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      token flags                  x:" hex_QW0354TF
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      library name %E              x:" hex_QW0354LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LE return code               x:" hex_QW0354LC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LE reason code               x:" hex_QW0354LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DA                           x:" hex_QW0354SA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      EB                           x:" hex_QW0354EB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      user mngd part               x:" hex_QW0354UM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      routune name length          x:" hex_QW0354RL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      routine name data %E         x:" hex_QW0354RD
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0355 length is 00018
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0355:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0355,24)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0355 Length: 24"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0355 ,
    =00001 QW0355OP +2 , /* H - RT OPCODE                      00000 */
    =00003 QW0355EY +2 , /* C - RT EYEC                        00002 */
    =00005 QW0355ST +2 , /* H - STMT TYPE                      00004 */
    =00007 RSVD0001 +2 , /* C - NOT USED                       00006 */
    =00009 QW0355LN +4 , /* F - LINE NUMBER                    00008 */
    =00013 RSVD0002 +4 , /* C - NOT USED                       0000C */
    =00017 QW0355RT +8 , /* C - RT ADDRESS                     00010 */
    .           /* End of DSECT */
  /* next byte at 25 */
  hex_QW0355OP = c2x(QW0355OP)
  hex_QW0355EY = c2x(QW0355EY)
  hex_QW0355ST = c2x(QW0355ST)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0355LN = c2x(QW0355LN)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0355RT = c2x(QW0355RT)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0355",desired_dsect) > 0)) then do
    void_rc = queue_QW0355_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0355:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0355_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0355:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RT OPCODE                    x:" hex_QW0355OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RT EYEC                      x:" hex_QW0355EY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      STMT TYPE                    x:" hex_QW0355ST
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LINE NUMBER                  x:" hex_QW0355LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      RT ADDRESS                   x:" hex_QW0355RT
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0356 length is 00004
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0356:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0356,4)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0356 Length: 4"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0356 ,
,/* =00001 QW0356S1 +0 ,    F - SELF DEFINING Section 1        00000 */
    =00001 QW0356NE +4 , /* F - NUMBER of Entries              00000 */
    .           /* End of DSECT */
  /* next byte at 5 */
  hex_QW0356NE = c2x(QW0356NE)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0356",desired_dsect) > 0)) then do
    void_rc = queue_QW0356_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0356:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0356_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0356:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER of Entries            x:" hex_QW0356NE
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0356A length is 00020
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0356A:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0356A,32)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0356A Length: 32"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0356A ,
,/* =00001 QW0356S2 +0 ,    F - SELF DEFINING Section 2        00000 */
    =00001 QW0356EY +3 , /* C - Eye-Catcher                    00000 */
    =00004 RSVD0001 +1 , /* C - NOT USED                       00003 */
    =00005 QW0356TY +2 , /* C - DATA TYPE OF THIS ENTRY        00004 */
    =00007 QW0356GT +2 , /* C - Generic DATA TYPE of this Entr 00006 */
    =00009 QW0356LD +8 , /* C - DATA LENGTH OF THIS ENTRY      00008 */
  ,
  ,/*00016 __no__name__ ORG - QW0356LD - x'00000008'           00010 */
    =00009 RSVD0002 +4 , /* C - Placeholder                    00008 */
    =00013 QW0356LN +4 , /* C - 31 BIT length                  0000C */
  ,
  ,/*00016 __no__name__ ORG - QW0356LN - x'0000000C'           00010 */
    =00013 RSVD0003 +2 , /* C - Placeholder                    0000C */
    =00015 QW0356LT +2 , /* C - 15 BIT length                  0000E */
  ,
  ,/*00016 __no__name__ ORG - QW0356LT - x'0000000E'           00010 */
    =00015 QW0356LP +1 , /* C - IF DECIMAL DATA THEN PRECISION 0000E */
    =00016 QW0356LS +1 , /* C - IF DECIMAL DATA THEN SCALE     0000F */
    =00017 QW0356PT +8 , /* C - POINTER TO THE DATA BUFFER     00010 */
    =00025 QW0356NO +4 , /* F - SQLVAR ENTRY NUMBER            00018 */
    =00029 QW0356NL +1 , /* C - NULL BYTE                      0001C */
    =00030 RSVD0004 +3 , /* C - NOT USED                       0001D */
    .           /* End of DSECT */
  /* next byte at 33 */
  hex_QW0356EY = c2x(QW0356EY)
  hex_RSVD0001 = c2x(RSVD0001)
  hex_QW0356TY = c2x(QW0356TY)
  hex_QW0356GT = c2x(QW0356GT)
  hex_QW0356LD = c2x(QW0356LD)
  hex_RSVD0002 = c2x(RSVD0002)
  hex_QW0356LN = c2x(QW0356LN)
  hex_RSVD0003 = c2x(RSVD0003)
  hex_QW0356LT = c2x(QW0356LT)
  hex_QW0356LP = c2x(QW0356LP)
  hex_QW0356LS = c2x(QW0356LS)
  hex_QW0356PT = c2x(QW0356PT)
  hex_QW0356NO = c2x(QW0356NO)
  hex_QW0356NL = c2x(QW0356NL)
  hex_RSVD0004 = c2x(RSVD0004)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0356A",desired_dsect) > 0)) then do
    void_rc = queue_QW0356A_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0356A:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0356A_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0356A:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Eye-Catcher                  x:" hex_QW0356EY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0001
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA TYPE OF THIS ENTRY      x:" hex_QW0356TY
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Generic DATA TYPE of this En x:" hex_QW0356GT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA LENGTH OF THIS ENTRY    x:" hex_QW0356LD
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Placeholder                  x:" hex_RSVD0002
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      31 BIT length                x:" hex_QW0356LN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      Placeholder                  x:" hex_RSVD0003
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      15 BIT length                x:" hex_QW0356LT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF DECIMAL DATA THEN PRECISI x:" hex_QW0356LP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      IF DECIMAL DATA THEN SCALE   x:" hex_QW0356LS
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      POINTER TO THE DATA BUFFER   x:" hex_QW0356PT
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      SQLVAR ENTRY NUMBER          x:" hex_QW0356NO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NULL BYTE                    x:" hex_QW0356NL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NOT USED                     x:" hex_RSVD0004
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0356B length is 00002
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0356B:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0356B,2)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0356B Length: 2"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0356B ,
,/* =00001 QW0356S3 +0 ,    F - SELF DEFINING Section 3        00000 */
    =00001 QW0356LL +2 , /* X - LENGTH OF ALL DATA AREA + 2    00000 */
,/* =00003 QW0356DA +0 ,    C - DATA                           00002 */
    .           /* End of DSECT */
  /* next byte at 3 */
  hex_QW0356LL = c2x(QW0356LL)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0356B",desired_dsect) > 0)) then do
    void_rc = queue_QW0356B_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0356B:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0356B_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0356B:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    --------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      LENGTH OF ALL DATA AREA + 2  x:" hex_QW0356LL
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0367 length is 00034
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0367:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0367,52)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0367 Length: 52"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0367 ,
    =00001 QW0367OP +4 , /* C - (S)                            00000 */
    =00005 QW0367SZ +4 , /* F - (S)                            00004 */
    =00009 QW0367T +4 , /* F - (S)                             00008 */
    =00013 QW0367TP +8 , /* C - (S)                            0000C */
    =00021 QW0367SP +8 , /* C - (S)                            00014 */
    =00029 QW0367CA +8 , /* C - (S)                            0001C */
    =00037 QW0367UN +16 , /* C - (S)                           00024 */
  ,     /* QW0367GF EQU x'C7C5E3C6'                                  */
  ,     /* QW0367GN EQU x'C7C5E3D5'                                  */
  ,     /* QW0367F EQU x'C6D9C5C5'                                   */
  ,     /* QW0367CL EQU x'C3D3D6E2'                                  */
  ,     /* QW0367FS EQU x'C6E2D7C1'                                  */
  ,     /* QW0367RS EQU x'D9C5E2E3'                                  */
  ,     /* QW0367NR EQU x'C7D5D9E3'                                  */
  ,     /* QW0367LM EQU x'D3C9D4E3'                                  */
    .           /* End of DSECT */
  /* next byte at 53 */
  hex_QW0367OP = c2x(QW0367OP)
  hex_QW0367SZ = c2x(QW0367SZ)
  hex_QW0367T = c2x(QW0367T)
  hex_QW0367TP = c2x(QW0367TP)
  hex_QW0367SP = c2x(QW0367SP)
  hex_QW0367CA = c2x(QW0367CA)
  hex_QW0367UN = c2x(QW0367UN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0367",desired_dsect) > 0)) then do
    void_rc = queue_QW0367_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0367:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0367_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0367:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367SZ
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367T
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367TP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367SP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367CA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      (S)                          x:" hex_QW0367UN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0370 length is 00055
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0370:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0370,85)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0370 Length: 85"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0370 ,
    =00001 QW0370AC +4 , /* A - ADDRESS OF ACE                 00000 */
    =00005 QW0370DB +2 , /* X - DATABASE ID (DBID)             00004 */
    =00007 QW0370OB +2 , /* X - PAGESET OBID                   00006 */
    =00009 QW0370PN +4 , /* X - PART NUMBER                    00008 */
    =00013 QW0370IN +4 , /* X - INSTANCE NUMBER                0000C */
    =00017 QW0370AL +8 , /* X - ALLOCATION TIME                00010 */
    =00025 QW0370OP +8 , /* X - OPEN TIME                      00018 */
    =00033 QW0370DM +4 , /* X - DSMAX                          00020 */
    =00037 QW0370DO +4 , /* X - NUMBER OF OPENED DATA SETS     00024 */
    =00041 QW0370FG +1 , /* X - FLAGS                          00028 */
  ,     /* QW0370SD EQU x'00000001' SHADOW INDICATION                */
  ,     /* QW0370RA EQU x'00000002' REALLOCATION                     */
    =00042 QW0370DN +44 , /* C - DATA SET NAME                 00029 */
    .           /* End of DSECT */
  /* next byte at 86 */
  hex_QW0370AC = c2x(QW0370AC)
  hex_QW0370DB = c2x(QW0370DB)
  hex_QW0370OB = c2x(QW0370OB)
  hex_QW0370PN = c2x(QW0370PN)
  hex_QW0370IN = c2x(QW0370IN)
  hex_QW0370AL = c2x(QW0370AL)
  hex_QW0370OP = c2x(QW0370OP)
  hex_QW0370DM = c2x(QW0370DM)
  hex_QW0370DO = c2x(QW0370DO)
  hex_QW0370FG = c2x(QW0370FG)
  hex_QW0370DN = c2x(QW0370DN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0370",desired_dsect) > 0)) then do
    void_rc = queue_QW0370_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0370:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0370_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0370:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF ACE               x:" hex_QW0370AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0370DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0370OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PART NUMBER                  x:" hex_QW0370PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INSTANCE NUMBER              x:" hex_QW0370IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ALLOCATION TIME              x:" hex_QW0370AL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      OPEN TIME                    x:" hex_QW0370OP
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DSMAX                        x:" hex_QW0370DM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF OPENED DATA SETS   x:" hex_QW0370DO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0370FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET NAME                x:" hex_QW0370DN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
DSECT: QW0371 length is 00055
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_QW0371:
  if (desired_chunk = "Y") then do
    desired_block = left(data_block_of_QW0371,85)
    debug_ctr = debug_ctr + 1
    debug_record.debug_ctr = " DSECT: QW0371 Length: 85"
    void_rc = hurl_chunks()
  end
  parse var data_block_of_QW0371 ,
    =00001 QW0371AC +4 , /* A - ADDRESS OF ACE                 00000 */
    =00005 QW0371DB +2 , /* X - DATABASE ID (DBID)             00004 */
    =00007 QW0371OB +2 , /* X - PAGESET OBID                   00006 */
    =00009 QW0371PN +4 , /* X - PART NUMBER                    00008 */
    =00013 QW0371IN +4 , /* X - INSTANCE NUMBER                0000C */
    =00017 QW0371DA +8 , /* X - DEALLOCATION TIME              00010 */
    =00025 QW0371CL +8 , /* X - CLOSE TIME                     00018 */
    =00033 QW0371DM +4 , /* X - DSMAX                          00020 */
    =00037 QW0371DO +4 , /* X - NUMBER OF OPENED DATA SETS     00024 */
    =00041 QW0371FG +1 , /* X - FLAGS                          00028 */
    =00042 QW0371DN +44 , /* C - DATA SET NAME                 00029 */
    .           /* End of DSECT */
  /* next byte at 86 */
  hex_QW0371AC = c2x(QW0371AC)
  hex_QW0371DB = c2x(QW0371DB)
  hex_QW0371OB = c2x(QW0371OB)
  hex_QW0371PN = c2x(QW0371PN)
  hex_QW0371IN = c2x(QW0371IN)
  hex_QW0371DA = c2x(QW0371DA)
  hex_QW0371CL = c2x(QW0371CL)
  hex_QW0371DM = c2x(QW0371DM)
  hex_QW0371DO = c2x(QW0371DO)
  hex_QW0371FG = c2x(QW0371FG)
  hex_QW0371DN = c2x(QW0371DN)
  if ((pos(display_rty,desired_debug) > 0) | ,
     (wordpos("QW0371",desired_dsect) > 0)) then do
    void_rc = queue_QW0371_data_out()
  end
  if (desired_print = "Y") then do
    print_ctr = print_ctr + 1
    print_record.print_ctr = " QW0371:"
    void_rc = write_print_data_out()
  end
  return 0

queue_QW0371_data_out:
  debug_ctr = debug_ctr + 1 ;   debug_record.debug_ctr = "    QW0371:" ,
    "#" qws_loop
  debug_ctr = debug_ctr + 1
  debug_record.debug_ctr = "    -------"
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      ADDRESS OF ACE               x:" hex_QW0371AC
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATABASE ID (DBID)           x:" hex_QW0371DB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PAGESET OBID                 x:" hex_QW0371OB
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      PART NUMBER                  x:" hex_QW0371PN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      INSTANCE NUMBER              x:" hex_QW0371IN
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DEALLOCATION TIME            x:" hex_QW0371DA
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      CLOSE TIME                   x:" hex_QW0371CL
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DSMAX                        x:" hex_QW0371DM
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      NUMBER OF OPENED DATA SETS   x:" hex_QW0371DO
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      FLAGS                        x:" hex_QW0371FG
  debug_ctr = debug_ctr + 1 ; debug_record.debug_ctr = ,
    "      DATA SET NAME                x:" hex_QW0371DN
  void_rc = write_debug_data_out()
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Function to turn a character string into binary bits.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
C2B: PROCEDURE EXPOSE bits
  data = ARG(1)
  IF (bits.F <> "1111") THEN DO
    bits.0="0000"; bits.1="0001"; bits.2="0010"; bits.3="0011"
    bits.4="0100"; bits.5="0101"; bits.6="0110"; bits.7="0111"
    bits.8="1000"; bits.9="1001"; bits.A="1010"; bits.B="1011"
    bits.C="1100"; bits.D="1101"; bits.E="1110"; bits.F="1111"
  END
  c2x_data = C2X(data)
  bs = ""
  DO ix = 1 TO LENGTH(c2x_data)
    bx = SUBSTR(c2x_data,ix,1)
    bs =bs||bits.bx
  END
  RETURN bs

/* <<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
