/* rexx */
Rexx_CASEIT:
  rexxpgm_version = "01.01"           /* ver lev */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(CASEIT)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   %CASEIT
 Purpose:  Demonstrate how to translate between cases.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180426 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using template $putktm:
      20180407    Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20180407 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  mymy = "MYmy"
  SAY mymy
  SAY To_Uppercase(mymy)
  mymy = "MYmy"
  SAY To_Lowercase(mymy)
  mymy = "MYmy"
  SAY TRANSLATE(mymy)
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase:
  PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase:
  PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
