rexx_OBJ2REXX: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "02.02"
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Dataset:  TSO.REXX(OBJ2REXX)
  Author:   "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Reads any 80 byte record and wraps it in rexx code to
            reconstruct it back later.
  Usage:    See CBT.CNTL(OBJ2REXJ)

=======================================================================

 History of Modifications
 ------------------------
 vv.mm When     Who / What you did
 ----- -------- -------------------------------------------------------
 02.02 20180115 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Changed email address.
 ----- -------- -------------------------------------------------------
 02.01 20170501 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Changed 'Syntax:' to 'Usage:".
                2) Revamped the 'History of Modifications' block.
 ----- -------- -------------------------------------------------------
 02.00 20170430 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Reformat and stylize using the 'Programming Using
                   The Kenneth Tomiak Method (PUTKTM)'.
 ----- -------- -------------------------------------------------------
 01.01 20070729 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Standardizing Rexx_Initialize routine.
 ----- -------- -------------------------------------------------------
 01.00 20070528 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Origination of code.
 ----- -------- -------------------------------------------------------

=======================================================================

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

  Parse ARG all_my_arguments
  Numeric Digits 12

rexx_Main_OBJ2REXX:
  return_code = rexx_Initialize()
  If (return_code = 0) Then Do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  Return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Initialize:
  Parse VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  Parse SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  Say ""
  Say source_uc_exec_name "Begin:"
  Say "(C) 2018 KTOMIAK.BIZ"
  Say "ALL RIGHTS RESERVED."
  Say 'Author: "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>'
  Say ""
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  Say ""
  Say Copies("=",55)
  Say Left("=" source_uc_exec_name rexxpgm_version,53) "="
  Say Left("=" "executing under" source_host_env,53) "="
  Say Left("=" "as a" source_call_type,53) "="
  Say Left("= on" date() "at" time()".",53) "="
  Say Copies("=",55)
  Say ""
  return_code = 0

  If (source_host_env >< "TSO") Then Do
    Say "Wrong host environment" source_host_env
    return_code = 16
  End

  Parse Var all_my_arguments dd_in dd_ot object_name .
  If (DataType(dd_in) = "NUM") Then Do
    Say "Setting default input and output DDnames."
    dd_in = "OBJIN"
    dd_ot = "REXXOUT"
  End
  If (DataType(dd_ot) = "NUM") Then Do
    Say "Setting default output DDname."
    dd_ot = "REXXOUT"
  End
  If (dd_in = "") Then Do
    Say "Setting default input and output DDnames."
    dd_in = "OBJIN"
    dd_ot = "REXXOUT"
  End
  If (dd_ot = "") Then Do
    Say "Setting default output DDname."
    dd_ot = "REXXOUT"
  End
  If (object_name = "") Then Do
    object_name = "UNKNOWN"
  End

  Say "//DDIN:"dd_in"."
  Say "//DDOT:"dd_ot"."
  Say "  Name:"object_name"."

  text_in.0 = 0
  text_out.0 = 0
  function_rc = add_rexx_code()
  "EXECIO * DISKR" dd_in "(FINIS STEM TEXT_IN.)"
  read_rc = RC
  If (read_rc >< 0) Then Do
    Say "Encountered problems reading //DD:"dd_in"."
    Say "RC("read_rc") >< 0"
    return_code = read_rc
  End
  Say "Read" text_in.0 "record(s)."

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  If (text_in.0 = 0) Then Do
    Say "//DD:"dd_in "appears to be a null file."
    return_code = 4
    Return 4
  End
  hex_text = 0
  Do text_ix = 1 to text_in.0
    line_1 = ""
    line_2 = ""
    text_hex = c2x(text_in.text_ix)
    Do While (text_hex >< "")
      Parse Var text_hex hex_odd +1 hex_even +1 text_hex
      line_1 = line_1""hex_odd
      line_2 = line_2""hex_even
    End
    text_out.0 = out_text(line_1)
    text_out.0 = out_text(line_2)
    hex_text = hex_text + 2
  End
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  text_out.0 = out_text("ENDDATA*/")
  text_out.0 = out_text("  ")
  "EXECIO * DISKW" dd_ot "(FINIS STEM TEXT_OUT.)"
  write_rc = RC
  If (write_rc >< 0) Then Do
    Say "Encountered problems writing //DD:"dd_ot"."
    Say "RC("write_rc") >< 0"
    return_code = write_rc
  End
  Say "Wrote" hex_text   "records."
  Say "Wrote" text_out.0 "records, including REXX2OBJ extractor."
  Say "E-O-R"
  Say ""
  Say source_uc_exec_name "Finish:"
  Say ""
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Follow control blocks to get job specifications.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds text to a stem variable
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
out_text:
  Parse ARG text_line
  text_next = text_out.0 + 1
  text_out.text_next = text_line
  Return text_next

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds the rexx code to convert the member back.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
add_rexx_code:
  sigl_record = data_begins_below() + 27
  my_data = "rexx_"object_name":" ,
    "  /* Still need rexx in comment if read from SYSPROC. */"
  text_out.0 = out_text(my_data)
  my_data = Left("/* Built:" date("S") Time(),68) "*/"
  text_out.0 = out_text(my_data)
  sigl_record = sigl + 25
  rexx_code = "YES"
  process_data = "NO"
  Do While (rexx_code = "YES")
    SIGL_RECORD = SIGL_RECORD + 1
    MY_DATA = SOURCELINE(SIGL_RECORD)
    If (MY_DATA = "ENDREXX*/") Then Do
      rexx_code = "NO"
      Leave
    End
    If (MY_DATA = "/*BEGINREXX") Then Do
      SIGL_RECORD = SIGL_RECORD + 1
      PROCESS_DATA = "YES"
      Iterate
    End
    If (PROCESS_DATA = "YES") Then Do
      text_out.0 = out_text(my_data)
    End
  End
  Return sigl_record

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
data_begins_below:
  Return sigl

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/*BEGINREXX
*/
  REXX2OBJ_version = "02.01"
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Dataset:  TSO.REXX(REXX2OBJ)
  Author:   "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Reconstructs a member that was saved in hexadecimal
            format.
  Usage:    See CBT.CNTL(object_name)

=======================================================================

 History of Modifications
 ------------------------
 vv.mm When     Who / What you did
 ----- -------- -------------------------------------------------------
 02.01 20170501 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Changed 'Syntax:' to 'Usage:".
                2) Revamped the 'History of Modifications' block.
 ----- -------- -------------------------------------------------------
 02.00 20170430 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Reformat and stylize using the 'Programming Using
                   The Kenneth Tomiak Method (PUTKTM)'.
 ----- -------- -------------------------------------------------------
 01.00 20070528 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Origination of code.
 ----- -------- -------------------------------------------------------

=======================================================================

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

  Parse ARG all_my_arguments
  Numeric Digits 12

rexx_Main_REXX2OBJ:
  return_code = rexx_Initialize()
  If (return_code = 0) Then Do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  Return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Initialize:
  Parse VERSION,
    rexx_version,
    rexx_level,
    rexx_date
  Parse SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  Say ""
  Say source_uc_exec_name "Begin:"
  Say "(C) 2018 KTOMIAK.BIZ ALL RIGHTS RESERVED."
  Say 'Author: "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>'
  Say ""
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  Say ""
  Say Copies("=",55)
  Say Left("=" job_specs,53) "="
  Say Left("=" source_uc_exec_name REXX2OBJ_VERSION,53) "="
  Say Left("=",
    "as a" source_call_type,53) "="
  Say Left("=  on" date() "at" time()".",53) "="
  Say Copies("=",55)
  Say ""
  return_code = 0

  If (source_host_env >< "TSO") Then Do
    Say "Wrong host environment" source_host_env
    return_code = 16
  End

  Parse Var all_my_arguments dd_ot .
  If (DataType(dd_ot) = "NUM") Then Do
    Say "Setting default output DDname."
    dd_ot = "OBJOT"
  End
  If (dd_ot = "") Then Do
    Say "Setting default output DDname."
    dd_ot = "OBJOT"
  End

  text_out.0 = 0
  text_in.0 = 0
  function_rc = add_rexx_code()
  Say "Read" text_in.0 "records."

  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 In this routine we do our processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Process:
  If (text_in.0 = 0) Then Do
    Say source_uc_exec_name "is missing the data."
    return_code = 4
    Return 4
  End
  Do text_ix = 1 to text_in.0 by 2
    line_1 = ""
    text_1 = text_in.text_ix
    next_ix = text_ix + 1
    text_2 = text_in.next_ix
    Do char_ix = 1 to length(text_1)
      char_1 = substr(text_1,char_ix,1)
      char_2 = substr(text_2,char_ix,1)
      line_1 = line_1""char_1""char_2
    End
    text_out.0 = out_text(x2c(line_1))
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 In this routine we close files and finish up.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Termination:
  "EXECIO * DISKW" dd_ot "(FINIS STEM TEXT_OUT.)"
  write_rc = RC
  If (write_rc >< 0) Then Do
    Say "Encountered problems writing //DD:"dd_ot"."
    Say "RC("write_rc") >< 0"
    return_code = write_rc
  End
  Say "Wrote" text_out.0 "records."
  Say ""
  Say source_uc_exec_name "Finish:"
  Say ""
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Follow control blocks to get job specifications.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds text to a stem variable
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
in_text:
  Parse ARG text_line
  text_next = text_in.0 + 1
  text_in.text_next = text_line
  Return text_next

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds text to a stem variable
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
out_text:
  Parse ARG text_line
  text_next = text_out.0 + 1
  text_out.text_next = text_line
  Return text_next

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds the rexx code to convert the member back.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
add_rexx_code:
  sigl_record = data_begins_below() + 27
  rexx_code = "YES"
  process_data = "NO"
  Do While (rexx_code = "YES")
    SIGL_RECORD = SIGL_RECORD + 1
    MY_DATA = SOURCELINE(SIGL_RECORD)
    If (MY_DATA="ENDDATA*/") Then Do
      rexx_code="NO"
      Leave
    End
    If (MY_DATA="/*BEGINDATA") Then Do
      PROCESS_DATA="YES"
      Iterate
    End
    If (PROCESS_DATA="YES") Then Do
      text_in.0 = in_text(my_data)
    End
  End
  Return sigl_record

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
data_begins_below:
  Return sigl

/*BEGINDATA
ENDREXX*/

