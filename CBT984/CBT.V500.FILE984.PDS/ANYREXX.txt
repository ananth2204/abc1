/* rexx */
Rexx_ANYREXX:
  rexxpgm_version = "01.01"           /* ver lev */

/*%COPYRIGHT This is an example of a copyright notice. */
/*%INCLUDE ANYREXXI */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(ANYREXX)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Determine the operating system so that the programmer can
           use platform-specific instructions. For example:
           z/OS and z/VM use EXECIO instead of CHARIN/LINE on the PC.
 Syntax:   %ANYREXX |arguments|

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180615 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added REXX Compiler 'Control Directives' for
                  IEXEC testing.
----- -------- --------------------------------------------------------
01.00 20180516 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code in PUTKTM style.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name ,
    version_rexx_version ,
    version_rexx_date
  PARSE SOURCE ,
    source_host_env ,
    source_call_type ,
    source_uc_exec_name ,
    source_hostdd ,
    source_hostdsn ,
    source_nf_exec_name ,
    source_initial_cmd_env ,
    source_asid_name ,
    source_char8_user_token ,
    source_hostother
/*

Rexx-interpreted:
---------------------------------------------------
Version:
Name:REXX370 Version:3.48 Date:01 May 1992

Source:
Host env:TSO CALL type:COMMAND EXEC Name:ANYREXX
Hostdd:SYSEXEC HostDSN:? nf Name:?
Cmd env:TSO ASID:ISPF User token:? Other:

Rexx-compiled:
---------------------------------------------------
Name:REXXC370 Version:3.48 Date:23 Dec 1999

Source:
Host env:TSO CALL type:COMMAND EXEC Name:ANYREXX
Hostdd:SYS00206 HostDSN:KTOMIAK.CBT.CEXEC nf Name:?
Cmd env:TSO ASID:ISPF User token:? Other:

*/
  address_environment = ADDRESS()
  return_code = 0
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  SAY "Version:"
  SAY ,
    "Name:"version_rexx_name,
    "Version:"version_rexx_version,
    "Date:"version_rexx_date

  SAY ""
  SAY "Source:"
  SAY ,
    "Host env:"source_host_env,
    "Call type:"source_call_type,
    "EXEC Name:"source_uc_exec_name
  SAY ,
    "Hostdd:"source_hostdd,
    "HostDSN:"source_hostdsn,
    "nf Name:"source_nf_exec_name
  SAY ,
    "Cmd env:"source_initial_cmd_env,
    "ASID:"source_asid_name,
    "User token:"source_char8_user_token,
    "Other:"source_hostother

  SAY ""
  SAY "Environment:"
  SAY address_environment

  op_sys = Determine_Op_Sys()
  SAY ""
  SAY "Operating System:"op_sys

  SAY ""
  SAY "Program Name:" source_pgm_name

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  lastline = SOURCELINE()
  SAY "This code has:" lastline "line(s)."
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("= RC=" return_code,77) "="
  SAY COPIES("=",79)
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Use VERSION and SOURCE to determine the operating system.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Determine_Op_Sys:
  SELECT
    WHEN (LEFT(version_rexx_name,11) = "REXX-ooRexx") THEN DO
      PARSE VAR version_rexx_name ,
        . "_" ,
        Version_rexx_v "." ,
        Version_rexx_r "." ,
        Version_rexx_m "(" ,
        =1 . "_" Version_rexx_vrm "(" .
      rexx_envir = "PC/ooREXX"
    END
    WHEN ((version_rexx_name = "REXXSAA") & ,
          (source_initial_cmd_env = "DOS")) Then Do
      rexx_envir = "PC/IBM_PC_DOS"
    END
    WHEN ((version_rexx_name = "REXXSAA") & ,
          (source_initial_cmd_env = "OS2")) Then Do
      rexx_envir = "PC/IBM_OS/2"
    END
    WHEN ((version_rexx_name = "REXX370") & ,
          (source_initial_cmd_env = "CMS")) Then Do
      rexx_envir = "VM/CMS"
    END
    WHEN ((source_asid_name = "MVS") & ,
          (source_initial_cmd_env = "MVS")) Then Do
      rexx_envir = "MVS/Batch"
    END
    WHEN ((version_rexx_name = "REXX370") & ,
          (source_initial_cmd_env = "TSO")) Then Do
      rexx_envir = "MVS/TSO"
    END
    WHEN ((version_rexx_name = "REXX370") & ,
          (source_initial_cmd_env = "ISPF")) Then Do
      rexx_envir = "MVS/TSO/ISPF"
    END
    WHEN ((version_rexx_name = "REXXC370") & ,
          (source_initial_cmd_env = "TSO")) Then Do
      rexx_envir = "MVS/TSO"
    END
    WHEN ((version_rexx_name = "REXXC370") & ,
          (source_initial_cmd_env = "ISPF")) Then Do
      rexx_envir = "MVS/TSO/ISPF"
    END
    WHEN ((version_rexx_name = "REXX/2") & ,
          (To_Uppercase(LEFT(source_host_env,7)) = "WINDOWS")) Then Do
      rexx_envir = "PC/SPF-PC"
    END
    WHEN (address_environment = "COMMAND") THEN DO
      rexx_envir = "PC/DOS7.0"
    END
    WHEN (address_environment = "SYSTEM") THEN DO
      rexx_envir = "PC/REGINA"
    END
    OTHERWISE DO
      rexx_envir = "UNKNOWN"
    END
  END
  SELECT
    WHEN (LEFT(rexx_envir,3) = "MVS") THEN DO
      source_pgm_name = source_uc_exec_name
    END
    WHEN (LEFT(rexx_envir,2) = "VM") THEN DO
      source_pgm_name = source_uc_exec_name
    END
    WHEN (To_Uppercase(LEFT(source_host_env,7)) = "WINDOWS") THEN DO
      last_slash = LASTPOS("\",source_uc_exec_name)
      IF (last_slash > 0) THEN DO
        fileName_ext = SUBSTR(source_uc_exec_name,(last_slash + 1))
      END
      ELSE DO
        fileName_ext = source_uc_exec_name
      END
      PARSE VAR fileName_ext source_pgm_name "." Source_pgm_ext
    END
    OTHERWISE DO
      SAY "Otherwise:" rexx_envir To_Uppercase(LEFT(source_host_env,7))
    END
  END
  RETURN rexx_envir

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase:
  PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase:
  PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
