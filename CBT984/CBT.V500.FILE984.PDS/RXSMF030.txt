/* rexx */

    parse upper arg no_parms
    numeric digits 20
/*  say "time checking"
    say "  0-100 hundreths of seconds"
    say "  0-60  seconds"
    say "  0-60  minutes"
    say "  0-24  hours"
    blx = 1 * 100 ; say "  hh="blx
    blx = blx * 60 ; say "  sc="blx
    blx = blx * 60 ; say "  mn="blx
    blx = blx * 24 ; say "  hr="blx         */
    print_debug = Pos("DEBUG",no_parms)
    print_dump = Pos("DUMP",no_parms)
    print_chunk = Pos("CHUNK",no_parms)
    print_hex = Pos("HEX",no_parms)
    print_rpt = Pos("RPT",no_parms)
    say ""
    say sysvar(sysicmd) "                " date() "=" time()
    say ""
    CVTPTR   = STORAGE(d2x(16),4)
    CVTPRODI = STORAGE(D2X(C2D(CVTPTR)+X2D(0E0)-256),8)

    count = 0
    smftype30 = 0
    unk=1
    hdr = copies('-',132)
    i = 1
    datarec = "JOBNAME  JOB##### RDRDATE    RDRTIME    ",
              "S STEPNAME PROCNAME PGMNAME ",
              "SMFDATE    SMFTIME     INITDATE   INITTIME   ",
              "ENDDATE    ENDTIME     INITWAIT   ",
              "ALLOCSTART  PGMSTART   ",
              "COND"
    push datarec
    "execio 1 diskw smf30"
    datarec = "-------- -------- ---------- -----------",
              "- -------- -------- --------",
              "---------- ----------- ---------- -----------",
              "---------- ----------- -----------",
              "----------- ----------- -----"
    push datarec
    "execio 1 diskw smf30"

more_records:
    "EXECIO 1 DISKR SMFIN (STEM smf."
    read_rc = rc
    if rc >< 0 then,
      do
        signal end_rtn
      end
    count = count + 1
    smftype = c2d(substr(smf.i,2,1))
    select
      when smftype = 30 then,
        do
          call smf30
          if (print_rpt > 0) then,
            do
              call print_report
            end
        end
      otherwise,
        do
          NOP
        end
    end
    if (print_dump > 0) then,
      do
        reloff = 1
        intorec = 0
        reclen = length(smf.i)
        do intorec = 1 to reclen by 80
          char80 = substr(smf.i,intorec,80)
          say char80
        end
        say copies("-",80)
      end
signal more_records

end_rtn:
    "EXECIO 0 DISKR SMFIN (FINIS"
    "execio 0 diskw smf30 (FINIS"

    say "  "
    Say smftype30 "Type 30 Records have been read from",
      count "SMF records."
    say "  "

    exit

error:
    say "Error routine in control"
    say "Error at line" sigl
    say "Current record count processed is" count
    exit 12

format_time:
    DisplayTIME = ""
    if temptime > 8640000 then,
      do
        timeDY   = temptime / 8640000
        DisplayDY = TRUNC(timeDY,0)
        temptime = temptime - (DisplayDY * 8640000)
        DisplayTIME = DisplayDY"-"
      end
    timeHR   = temptime / 360000
    DisplayHR = TRUNC(timeHR,0)
    temptime = temptime - (DisplayHR * 360000)
    IF (DisplayHR < 10) THEN DisplayHR = "0"DisplayHR
    timeMN   = temptime / 6000
    DisplayMN = TRUNC(timeMN,0)
    temptime = temptime - (DisplayMN * 6000)
    IF (DisplayMN < 10) THEN DisplayMN = "0"DisplayMN
    timeSC   = temptime / 100
    DisplaySC = TRUNC(timeSC,0)
    temptime = temptime - (DisplaySC * 100)
    displayhs = Right("00"temptime,2)
    IF (DisplaySC < 10) THEN DisplaySC = "0"DisplaySC
    DisplayTIME = DisplayTime||,
      DisplayHR":"DisplayMN":"DisplaySC"."displayhs
    Return

format_micro:
    temptime = (temptime * 1024)
    tl = length(temptime)
    if tl < 5 then temptime = 0
    else temptime = left(temptime,tl-4)
    call format_time
    Return

format_date:
    temp_date = c2x(tempdate)
    temp_c = substr(temp_date,2,1)
    temp_y = substr(temp_date,3,2)
    temp_d = substr(temp_date,5,3)
    DisplayDate = (1900+(temp_c*100)+temp_y)"."temp_d
    if temp_d >< 0 then,
      do
        tempdate = date("S",temp_y||temp_d,"J")
        gregdate = substr(tempdate,5,2)"/"||,
                  substr(tempdate,7,2)"/"||,
                  substr(tempdate,1,4)
       end
    else gregdate ="00/00/0000"
    Return

format_number:
    reverse_number = Reverse(tempnumber)
    reverse_len = length(reverse_number)
    reverse_display = ""
    do onyx = 1 to reverse_len
      if ((onyx-1) // 3) = 0 then,
        reverse_display = reverse_display","
      next_number = substr(reverse_number,onyx,3)
      reverse_display = reverse_display||next_number
      onyx = onyx + 2
    end
    DisplayNumber = Strip(Reverse(reverse_display),"B"," ")
    DisplayNumber = Strip(displaynumber,"B",",")
    DisplayNumber = Strip(displaynumber,"B"," ")
    Return

datetime_difference:
    if dateend >< datestart then,
      do
        datedif = dateend - datestart
        say datedif
        parse var datedif datedify '.' datedifd
        timeend = timeend + (datedif * 8640000)
        say "adding a day, 8640000"
      end
    if timestart > timeend then,
      do
        displaytime = "# ERROR #",
                    timeend "-" timestart "-" timedif
        return
      end
    timedif = timeend - timestart
    temptime = timedif
    call format_time
    Return

show_chunk:
    if (print_chunk = 0) then return
    hex_chunk = c2x(chunk)
    say "hex" chunk "hex"
    chunk_len = length(chunk) - 1
    ln = ""
    do ilx = 0 to chunk_len
      one_byte = substr(hex_chunk,ilx*2+1,1)
      ln = ln||one_byte
    end
    if (print_hex > 0) then,
    say "hex" ln "hex"
    ln = ""
    do ilx = 1 to chunk_len
      one_byte = substr(hex_chunk,ilx*2,1)
      ln = ln||one_byte
    end
    if (print_hex > 0) then,
    say "hex" ln "hex"
    Return

smf30:
    /*     smf record header segment                            */
    smftype30 = smftype30 + 1
    SMF30FLG = SubStr(smf.i,1,1)         /* 000004 */
        smf30flgh = c2x(smf30flg)
        smf30flgb = c2b(smf30flg)
    SMF30RTY = SubStr(smf.i,2,1)         /* 000005 */
        smf30rtyd = c2d(smf30rty)
    SMF30TME = SubStr(smf.i,3,4)         /* 000006 */
        smf30tmed = c2d(smf30tme)
        temptime = smf30tmed
        call format_time
        tmetime = displaytime
    SMF30DTE = SubStr(smf.i,7,4)         /* 00000A */
        date = c2x(smf30dte)
        datec = substr(date,1,2)
        datey = substr(date,3,2)
        dated = substr(date,5,3)
        tempdate = smf30dte
        call format_date
        dtedate = displaydate
        dtegreg = gregdate
    SMF30SID = SubStr(smf.i,11,4)         /* 00000E */
    SMF30WID = SubStr(smf.i,15,4)         /* 000012 */
    SMF30STP = SubStr(smf.i,19,2)         /* 000016 */
        smf30stph = c2x(smf30stp)
    if (print_debug > 0) then,
    say hdr
    if (print_debug > 0) then,
    say count "= flg="smf30flgh "("smf30flgb")",
      "on" datec"."datey"."dated "at" ipltime,
      'subtype='smf30stph
/*------------------------------------------------------------------*/
    /*     self defining section                                */
    fromwhere= 21
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
        say "self defining section offset="fromwhere
        chunk = substr(smf.i,fromwhere+1,140)
        call show_chunk
      end

    /*     subsystem section                                    */
    SMF30SOF = SubStr(smf.i,21,4)         /* 000018 */
        smf30sofd = c2d(smf30sof)
    SMF30SLN = SubStr(smf.i,25,2)         /* 00001C */
        smf30slnd = c2d(smf30sln)
    SMF30SON = SubStr(smf.i,27,2)         /* 00001E */
        smf30sond = c2d(smf30son)
    /*     identification section                               */
    SMF30IOF = SubStr(smf.i,29,4)         /* 000020 */
        smf30iofd = c2d(smf30iof)
    SMF30ILN = SubStr(smf.i,33,2)         /* 000024 */
        smf30ilnd = c2d(smf30iln)
    SMF30ION = SubStr(smf.i,35,2)         /* 000026 */
        smf30iond = c2d(smf30ion)
    /*     i/o activity section                                 */
    SMF30UOF = SubStr(smf.i,37,4)         /* 000028 */
        smf30uofd = c2d(smf30uof)
    SMF30ULN = SubStr(smf.i,41,2)         /* 00002C */
        smf30ulnd = c2d(smf30uln)
    SMF30UON = SubStr(smf.i,43,2)         /* 00002E */
        smf30uond = c2d(smf30uon)
    /*     completion section                                   */
    SMF30TOF = SubStr(smf.i,45,4)         /* 000030 */
        smf30tofd = c2d(smf30tof)
    SMF30TLN = SubStr(smf.i,49,2)         /* 000034 */
        smf30tlnd = c2d(smf30tln)
    SMF30TON = SubStr(smf.i,51,2)         /* 000036 */
        smf30tond = c2d(smf30ton)
    /*     processor section                                    */
    SMF30COF = SubStr(smf.i,53,4)         /* 000038 */
        smf30cofd = c2d(smf30cof)
    SMF30CLN = SubStr(smf.i,57,2)         /* 00003C */
        smf30clnd = c2d(smf30cln)
    SMF30CON = SubStr(smf.i,59,2)         /* 00003E */
        smf30cond = c2d(smf30con)
    /*     accounting section                                   */
    SMF30AOF = SubStr(smf.i,61,4)         /* 000040 */
        smf30aofd = c2d(smf30aof)
    SMF30ALN = SubStr(smf.i,65,2)         /* 000044 */
        smf30alnd = c2d(smf30aln)
    SMF30AON = SubStr(smf.i,67,2)         /* 000046 */
        smf30aond = c2d(smf30aon)
    /*     storage section                                      */
    SMF30ROF = SubStr(smf.i,69,4)         /* 000048 */
        smf30rofd = c2d(smf30rof)
    SMF30RLN = SubStr(smf.i,73,2)         /* 00004C */
        smf30rlnd = c2d(smf30rln)
    SMF30RON = SubStr(smf.i,75,2)         /* 00004E */
        smf30rond = c2d(smf30ron)
    /*     performance section                                  */
    SMF30POF = SubStr(smf.i,77,4)         /* 000050 */
        smf30pofd = c2d(smf30pof)
    SMF30PLN = SubStr(smf.i,81,2)         /* 000054 */
        smf30plnd = c2d(smf30pln)
    SMF30PON = SubStr(smf.i,83,2)         /* 000056 */
        smf30pond = c2d(smf30pon)
    /*     operator section                                     */
    SMF30OOF = SubStr(smf.i,85,4)         /* 000058 */
        smf30oofd = c2d(smf30oof)
    SMF30OLN = SubStr(smf.i,89,2)         /* 00005C */
        smf30olnd = c2d(smf30oln)
    SMF30OON = SubStr(smf.i,91,2)         /* 00005E */
        smf30oond = c2d(smf30oon)
    /*     excp section                                         */
    SMF30EOF = SubStr(smf.i,93,4)         /* 000060 */
        smf30eofd = c2d(smf30eof)
    SMF30ELN = SubStr(smf.i,97,2)         /* 000064 */
        smf30elnd = c2d(smf30eln)
    SMF30EON = SubStr(smf.i,99,2)         /* 000066 */
        smf30eond = c2d(smf30eon)
    SMF30EOR = SubStr(smf.i,101,2)         /* 000068 */
        smf30eord = c2d(smf30eor)
    SMF30RVD = SubStr(smf.i,103,2)         /* 00006A */
    SMF30EOS = SubStr(smf.i,105,4)         /* 00006C */
        smf30eosd = c2d(smf30eos)
    /*     appc/mvs resource section                            */
    SMF30DRO = SubStr(smf.i,109,4)         /* 000070 */
        smf30drod = c2d(smf30dro)
    SMF30DRL = SubStr(smf.i,113,2)         /* 000074 */
        smf30drld = c2d(smf30drl)
    SMF30DRN = SubStr(smf.i,115,2)         /* 000076 */
        smf30drnd = c2d(smf30drn)
    /*     appc/mvs cumulative section                          */
    SMF30ARO = SubStr(smf.i,117,4)         /* 000078 */
        smf30arod = c2d(smf30aro)
    SMF30ARL = SubStr(smf.i,121,2)         /* 00007C */
        smf30arld = c2d(smf30arl)
    SMF30ARN = SubStr(smf.i,123,2)         /* 00007E */
        smf30arnd = c2d(smf30arn)
    /*     omvs section                                         */
    SMF30OPO = SubStr(smf.i,125,4)         /* 000080 */
        smf30opod = c2d(smf30opo)
    SMF30OPL = SubStr(smf.i,129,2)         /* 000084 */
        smf30opld = c2d(smf30opl)
    SMF30OPN = SubStr(smf.i,131,2)         /* 000086 */
        smf30opnd = c2d(smf30opn)
    SMF30OPM = SubStr(smf.i,133,4)         /* 000088 */
        smf30opmd = c2d(smf30opm)
    /*     usage section                                        */
    SMF30UDO = SubStr(smf.i,137,4)         /* 00008C */
        smf30udod = c2d(smf30udo)
    SMF30UDL = SubStr(smf.i,141,2)         /* 000090 */
        smf30udld = c2d(smf30udl)
    SMF30UDN = SubStr(smf.i,143,2)         /* 000092 */
        smf30udnd = c2d(smf30udn)
    SMF30UDS = SubStr(smf.i,145,4)         /* 000094 */
        smf30udsd = c2d(smf30uds)
    /*     arm section                                          */
    SMF30RMO = SubStr(smf.i,149,4)         /* 000098 */
        smf30rmod = c2d(smf30rmo)
    SMF30RML = SubStr(smf.i,153,2)         /* 00009C */
        smf30rmld = c2d(smf30rml)
    SMF30RMN = SubStr(smf.i,155,2)         /* 00009E */
        smf30rmnd = c2d(smf30rmn)
    SMF30RMS = SubStr(smf.i,157,4)           /* 0000A0 */
        smf30rmsd = c2d(smf30rms)
/*------------------------------------------------------------------*/
    /*     subsystem section                                    */
    fromwhere= c2d(smf30sof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "subsystem section smf30sof="fromwhere "hex"c2x(smf30sof)
    chunk = substr(smf.i,fromwhere+1,smf30slnd)
    call show_chunk
    SMF30TYP = SubStr(smf.i,fromwhere+1,2)         /* 000000 */
        smf30typh = c2x(smf30typ)
        select
          when smf30typh = "0001" then smf30typ_text = "Job Start"
          when smf30typh = "0002" then smf30typ_text = "interval"
          when smf30typh = "0003" then smf30typ_text = "step delta"
          when smf30typh = "0004" then smf30typ_text = "step total"
          when smf30typh = "0005" then smf30typ_text = "Job termination"
         when smf30typh = "0005" then smf30typ_text = "system add. spc."
          Otherwise,
            do
              smf30typ_text = "New subtype"
            end
        end
    SMF30RS1 = SubStr(smf.i,fromwhere+3,2)         /* 000002 */
    SMF30RVN = SubStr(smf.i,fromwhere+5,2)         /* 000004 */
    SMF30PNM = SubStr(smf.i,fromwhere+7,8)         /* 000006 */
    SMF30OSL = SubStr(smf.i,fromwhere+15,8)         /* 00000E */
    SMF30SYN = SubStr(smf.i,fromwhere+23,8)         /* 000016 */
    SMF30SYP = SubStr(smf.i,fromwhere+31,8)           /* 00001E */
    if (print_debug > 0) then,
    say "      =" smf30typ_text "-" smf30OSL "sysname="smf30syn,
      "sysplex="smf30syp
    end
/*------------------------------------------------------------------*/
    /*     identification section                               */
    fromwhere= c2d(smf30iof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "identification section smf30iof="fromwhere "hex"c2x(smf30iof)
    chunk = substr(smf.i,fromwhere+1,smf30ilnd)
    call show_chunk
    SMF30JBN = SubStr(smf.i,fromwhere+1,8)         /* 000000 */
    SMF30PGM = SubStr(smf.i,fromwhere+9,8)         /* 000008 */
    SMF30STM = SubStr(smf.i,fromwhere+17,8)         /* 000010 */
    SMF30UIF = SubStr(smf.i,fromwhere+25,8)         /* 000018 */
    SMF30JNM = SubStr(smf.i,fromwhere+33,8)         /* 000020 */
        typejob = left(smf30jnm,3)
    SMF30STN = SubStr(smf.i,fromwhere+41,2)         /* 000028 */
        smf30stnd = c2d(smf30stn)
    SMF30CLS = SubStr(smf.i,fromwhere+43,1)         /* 00002A */
    SMF30PGN = SubStr(smf.i,fromwhere+45,2)         /* 00002C */
        smf30pgnh = c2x(smf30pgn)
        smf30pgnd = Right("000"c2d(smf30pgn),3)
    SMF30JPT = SubStr(smf.i,fromwhere+47,2)         /* 00002E */
    SMF30AST = SubStr(smf.i,fromwhere+49,4)         /* 000030 */
        smf30astd = c2d(smf30ast)
        temptime = c2d(smf30ast)
        call format_time
        asttime = displaytime
    SMF30PPS = SubStr(smf.i,fromwhere+53,4)         /* 000034 */
        smf30ppsd = c2d(smf30pps)
        temptime = c2d(smf30pps)
        call format_time
        ppstime = displaytime
    SMF30SIT = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
        smf30sitd = c2d(smf30sit)
        temptime = c2d(smf30sit)
        call format_time
        sittime = displaytime
    SMF30STD = SubStr(smf.i,fromwhere+61,4)         /* 00003C */
        tempdate = smf30std
        call format_date
        stddate = displaydate
        stdgreg = gregdate
    SMF30RST = SubStr(smf.i,fromwhere+65,4)         /* 000040 */
        smf30rstd = c2d(smf30rst)
        temptime = c2d(smf30rst)
        call format_time
        rsttime = displaytime
    SMF30RSD = SubStr(smf.i,fromwhere+69,4)         /* 000044 */
        tempdate = smf30rsd
        call format_date
        rsddate = displaydate
        rsdgreg = gregdate
    SMF30RDE = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
    SMF30RET = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
        smf30retd = c2d(smf30ret)
        temptime = c2d(smf30ret)
        call format_time
        rettime = displaytime
    SMF30RED = SubStr(smf.i,fromwhere+77,4)         /* 00004C */
        tempdate = smf30red
        call format_date
        reddate = displaydate
        redgreg = gregdate
    SMF30USR = SubStr(smf.i,fromwhere+81,20)         /* 000050 */
    SMF30GRP = SubStr(smf.i,fromwhere+101,8)         /* 000064 */
    SMF30RUD = SubStr(smf.i,fromwhere+109,8)         /* 00006C */
    SMF30TID = SubStr(smf.i,fromwhere+117,8)         /* 000074 */
    SMF30TSN = SubStr(smf.i,fromwhere+125,8)         /* 00007C */
    SMF30PSN = SubStr(smf.i,fromwhere+133,8)         /* 000084 */
    SMF30CL8 = SubStr(smf.i,fromwhere+141,8)         /* 00008C */
    SMF30ISS = SubStr(smf.i,fromwhere+149,8)         /* 000094 */
    SMF30IET = SubStr(smf.i,fromwhere+157,8)         /* 00009C */
    SMF30SSN = SubStr(smf.i,fromwhere+165,4)         /* 0000A4 */
    SMF30EXN = SubStr(smf.i,fromwhere+169,16)          /* 0000A8 */
    if (print_debug > 0) then,
    say "     " smf30jbn "-" smf30stm "-" smf30pgm "-" SMF30USR
    if (print_debug > 0) then,
    say "     "smf30jnm "step="smf30stnd
    end
/*------------------------------------------------------------------*/
    /*     i/o activity section                                 */
    fromwhere= c2d(smf30uof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "i/o activity section smf30uof="fromwhere "hex"c2x(smf30uof)
    chunk = substr(smf.i,fromwhere+1,smf30ulnd)
    call show_chunk
    if smf30uond = 1 then,
      do
    SMF30INP = SubStr(smf.i,fromwhere+1,4)         /* 000000 */
        smf30inpd = c2d(smf30inp)
    SMF30TEP = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
        smf30tepd = c2d(smf30tep)
    SMF30TPT = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
    SMF30TGT = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
    SMF30RDR = SubStr(smf.i,fromwhere+17,1)         /* 000010 */
    SMF30RDT = SubStr(smf.i,fromwhere+18,1)         /* 000011 */
    SMF30TCN = SubStr(smf.i,fromwhere+19,4)         /* 000012 */
    SMF30DCF = SubStr(smf.i,fromwhere+23,1)         /* 000016 */
    SMF30RS2 = SubStr(smf.i,fromwhere+24,3)         /* 000017 */
    SMF30RSB = SubStr(smf.i,fromwhere+27,2)         /* 00001A */
    SMF30TRR = SubStr(smf.i,fromwhere+29,4)         /* 00001C */
    SMF30AIC = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
    SMF30AID = SubStr(smf.i,fromwhere+37,4)         /* 000024 */
    SMF30AIW = SubStr(smf.i,fromwhere+41,4)         /* 000028 */
    SMF30AIS = SubStr(smf.i,fromwhere+45,4)         /* 00002C */
    SMF30EIC = SubStr(smf.i,fromwhere+49,4)         /* 000030 */
    SMF30EID = SubStr(smf.i,fromwhere+53,4)         /* 000034 */
    SMF30EIW = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
    SMF30EIS = SubStr(smf.i,fromwhere+61,4)           /* 00003C */
    if (print_debug > 0) then,
    say "   total excps="smf30tepd "from" smf30inpd "cards"
    end
    end
/*------------------------------------------------------------------*/
    /*     completion section                                   */
    fromwhere= c2d(smf30tof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "completion section smf30tof="fromwhere "hex"c2x(smf30tof)
    chunk = substr(smf.i,fromwhere+1,smf30tlnd)
    call show_chunk
    if smf30tond = 1 then,
      do
    SMF30SCC = SubStr(smf.i,fromwhere+1,2)         /* 000000 */
        smf30scch = c2x(smf30scc)
    SMF30STI = SubStr(smf.i,fromwhere+3,2)         /* 000002 */
        smf30stib1 = c2b(Left(smf30sti,1))
        smf30stib2 = c2b(right(smf30sti,1))
        smf30stib  = smf30stib1||smf30stib2
    SMF30ARC = SubStr(smf.i,fromwhere+5,4)           /* 000004 */
        smf30arch = c2x(smf30arc)
    cond_code = "     "
    if substr(smf30stib,2,1) = "1" then cond_code = "C-UJV"
    else,
    if substr(smf30stib,3,1) = "1" then cond_code = "C-UJI"
    else,
    if substr(smf30stib,4,1) = "1" then cond_code = "C-USI"
    else,
    if substr(smf30stib,5,1) = "1" then cond_code = "C-TRT"
    else,
    if substr(smf30stib,7,1) = "1" then cond_code = "S"||,
      right(smf30scch,3)" "
    else,
    if substr(smf30stib,8,1) = "1" then cond_code = "Flush"
    else,
      do
        smf30sccd = c2d(smf30scc)
        cond_code = right("0000"smf30sccd,4)" "
      end
    if substr(smf30scch,1,1) = "8" then,
      do
        smf30sccd = x2d(right(smf30scch,3))
        cond_code = "U"right("0000"smf30sccd,4)
      end
    if (print_debug > 0) then,
    say "   step completed as" smf30scch "bits="smf30stib,
      "reason code="smf30arch
    end
    end
/*------------------------------------------------------------------*/
    /*     processor section                                    */
    fromwhere= c2d(smf30cof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "processor section smf30cof="fromwhere "hex"c2x(smf30cof)
    chunk = substr(smf.i,fromwhere+1,smf30clnd)
    call show_chunk
    if smf30cond = 1 then,
      do
    SMF30PTY = SubStr(smf.i,fromwhere+1,2)         /* 000000 */
        smf30ptyd = c2d(smf30pty)
        smf30ptyh = right("00"d2x(smf30ptyd),2)
    SMF30RV3 = SubStr(smf.i,fromwhere+3,2)         /* 000002 */
    SMF30TFL = SubStr(smf.i,fromwhere+3,2)         /* 000002 */
    SMF30CPT = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
        temptime = c2d(smf30cpt)
        call format_time
        cpttime = displaytime
    SMF30CPS = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
        temptime = c2d(smf30cps)
        call format_time
        cpstime = displaytime
    SMF30ICU = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
        temptime = c2d(smf30icu)
        call format_time
        icutime = displaytime
    SMF30ISB = SubStr(smf.i,fromwhere+17,4)         /* 000010 */
        temptime = c2d(smf30isb)
        call format_time
        isbtime = displaytime
    SMF30JVU = SubStr(smf.i,fromwhere+21,4)         /* 000014 */
    SMF30IVU = SubStr(smf.i,fromwhere+25,4)         /* 000018 */
    SMF30JVA = SubStr(smf.i,fromwhere+29,4)         /* 00001C */
    SMF30IVA = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
    SMF30IST = SubStr(smf.i,fromwhere+37,4)         /* 000024 */
    SMF30IDT = SubStr(smf.i,fromwhere+41,4)         /* 000028 */
    SMF30IIP = SubStr(smf.i,fromwhere+45,4)         /* 00002C */
    SMF30RCT = SubStr(smf.i,fromwhere+49,4)         /* 000030 */
    SMF30HPT = SubStr(smf.i,fromwhere+53,4)         /* 000034 */
    SMF30CSC = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
    SMF30DMI = SubStr(smf.i,fromwhere+61,4)         /* 00003C */
    SMF30DMO = SubStr(smf.i,fromwhere+65,4)         /* 000040 */
    SMF30ASR = SubStr(smf.i,fromwhere+69,4)         /* 000044 */
    SMF30ENC = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
    SMF30DET = SubStr(smf.i,fromwhere+77,4)           /* 00004C */
    if (print_debug > 0) then,
    say "    used" cpttime "cpu temptime under task tcb"
    if (print_debug > 0) then,
    say "    used" cpstime "cpu temptime under task srb"
    if (print_debug > 0) then,
    say "    used" icutime "cpu temptime under init tcb"
    if (print_debug > 0) then,
    say "    used" isbtime "cpu temptime under init srb"
    end
    end
/*------------------------------------------------------------------*/
    /*     excp section                                         */
    fromwhere= c2d(smf30eof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    smf30eond = c2d(smf30eon)
    if (print_debug > 0) then,
    say "excp section smf30eof="fromwhere "hex"c2x(smf30eof),
    "has" smf30eond "subsections"
    if (print_debug > 0) then,
    say "    smf30eor="smf30eord " smf30eos="smf30eosd
    chunk = substr(smf.i,fromwhere+1,smf30elnd)
    call show_chunk
    showdd = "     "
    do excp = 1 to smf30eond
    SMF30DEV = SubStr(smf.i,fromwhere+1,1)         /* 000000 */
    SMF30UTP = SubStr(smf.i,fromwhere+2,1)         /* 000001 */
    SMF30CUA = SubStr(smf.i,fromwhere+3,2)         /* 000002 */
    SMF30DDN = SubStr(smf.i,fromwhere+5,8)         /* 000004 */
    SMF30BLK = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
        smf30blkd = c2d(smf30blk)
    SMF30BSZ = SubStr(smf.i,fromwhere+17,2)         /* 000010 */
    SMF30DCT = SubStr(smf.i,fromwhere+19,4)           /* 000012 */
    showdd = showdd smf30ddn "=" left(smf30blkd,12)
    if (excp//5) = 0 then,
      do
    if (print_debug > 0) then,
        say "     " showdd
        showdd = "     "
      end
    fromwhere= fromwhere + 22
    end
    if (print_debug > 0) then,
      if showdd >< "" then,
        say "     " showdd
    end
/*------------------------------------------------------------------*/
    /*     accounting fields section                            */
    fromwhere= c2d(smf30aof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
      smf30actall = ""
    if (print_debug > 0) then,
    say "accounting fields section ?? smf30aof="fromwhere,
       "hex"c2x(smf30aof),
      "has" smf30aond "accounting data sections"
    chunk = substr(smf.i,fromwhere+1,smf30alnd)
    call show_chunk
    do acct = 1 to smf30aond
    SMF30ACL = SubStr(smf.i,fromwhere+1,1)         /* 000000 */
        smf30acld = c2d(smf30acl)
    SMF30ACT = SubStr(smf.i,fromwhere+2,smf30acld) /* 000000 */
    fromwhere= fromwhere + 1 + smf30acld
    if (print_debug > 0) then,
    say "Accounting data="smf30act
    if smf30actall >< "" then,
      smf30actall = smf30actall","smf30act
    else,
      smf30actall = smf30act
    end
    end
/*------------------------------------------------------------------*/
    /*     storage section                                      */
    fromwhere= c2d(smf30rof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "storage section smf30rof="fromwhere "hex"c2x(smf30rof)
    chunk = substr(smf.i,fromwhere+1,smf30rlnd)
    call show_chunk
    if smf30rond = 1 then,
      do
    SMF30RSV = SubStr(smf.i,fromwhere+1,2)         /* 000000 */
    SMF30SFL = SubStr(smf.i,fromwhere+3,1)         /* 000002 */
    SMF30SPK = SubStr(smf.i,fromwhere+4,1)         /* 000003 */
    SMF30PRV = SubStr(smf.i,fromwhere+5,2)         /* 000004 */
        smf30prvd = c2d(smf30prv)
    SMF30SYS = SubStr(smf.i,fromwhere+7,2)         /* 000006 */
        smf30sysd = c2d(smf30sys)
    SMF30PGI = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
        smf30pgid = c2d(smf30pgi)
    SMF30PIA = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
    SMF30PGO = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
        smf30pgod = c2d(smf30pgo)
    SMF30POA = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
    SMF30CPM = SubStr(smf.i,fromwhere+17,4)         /* 000010 */
    SMF30NSW = SubStr(smf.i,fromwhere+21,4)         /* 000014 */
        smf30nswd = c2d(smf30nsw)
    SMF30PSI = SubStr(smf.i,fromwhere+25,4)         /* 000018 */
    SMF30PSO = SubStr(smf.i,fromwhere+29,4)         /* 00001C */
    SMF30VPI = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
        smf30vpid = c2d(smf30vpi)
    SMF30VPO = SubStr(smf.i,fromwhere+37,4)         /* 000024 */
        smf30vpod = c2d(smf30vpo)
    SMF30VPR = SubStr(smf.i,fromwhere+41,4)         /* 000028 */
    SMF30CPI = SubStr(smf.i,fromwhere+45,4)         /* 00002C */
    SMF30HPI = SubStr(smf.i,fromwhere+49,4)         /* 000030 */
    SMF30LPI = SubStr(smf.i,fromwhere+53,4)         /* 000034 */
    SMF30HPO = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
    SMF30PST = SubStr(smf.i,fromwhere+61,4)         /* 00003C */
    SMF30PSC = SubStr(smf.i,fromwhere+65,8)         /* 000040 */
    SMF30RGB = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
    SMF30ERG = SubStr(smf.i,fromwhere+77,4)         /* 00004C */
    SMF30ARB = SubStr(smf.i,fromwhere+81,4)         /* 000050 */
    SMF30EAR = SubStr(smf.i,fromwhere+85,4)         /* 000054 */
        smf30eard = c2d(smf30ear)
    SMF30URB = SubStr(smf.i,fromwhere+89,4)         /* 000058 */
    SMF30EUR = SubStr(smf.i,fromwhere+93,4)         /* 00005C */
        smf30eurd = c2d(smf30eur)
    SMF30RGN = SubStr(smf.i,fromwhere+97,4)         /* 000060 */
        smf30rgnd = c2d(smf30rgn)
    SMF30DSV = SubStr(smf.i,fromwhere+101,4)         /* 000064 */
    SMF30PIE = SubStr(smf.i,fromwhere+105,4)         /* 000068 */
    SMF30POE = SubStr(smf.i,fromwhere+109,4)         /* 00006C */
    SMF30BIA = SubStr(smf.i,fromwhere+113,4)         /* 000070 */
    SMF30BOA = SubStr(smf.i,fromwhere+117,4)         /* 000074 */
    SMF30BIE = SubStr(smf.i,fromwhere+121,4)         /* 000078 */
    SMF30BOE = SubStr(smf.i,fromwhere+125,4)         /* 00007C */
    SMF30KIA = SubStr(smf.i,fromwhere+129,4)         /* 000080 */
    SMF30KOA = SubStr(smf.i,fromwhere+133,4)         /* 000084 */
    SMF30KIE = SubStr(smf.i,fromwhere+137,4)         /* 000088 */
    SMF30KOE = SubStr(smf.i,fromwhere+141,4)         /* 00008C */
    SMF30PSF = SubStr(smf.i,fromwhere+145,8)         /* 000090 */
    SMF30PAI = SubStr(smf.i,fromwhere+153,4)         /* 000098 */
    SMF30PEI = SubStr(smf.i,fromwhere+157,4)         /* 00009C */
    SMF30ERS = SubStr(smf.i,fromwhere+161,8)           /* 0000A0 */
    if (print_debug > 0) then,
    say "     private="smf30prvd"K      Region="smf30rgnd"K"
    end
    end
/*------------------------------------------------------------------*/
    /*     performance section                                  */
    fromwhere= c2d(smf30pof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "performance section smf30pof="fromwhere "hex"c2x(smf30pof)
    chunk = substr(smf.i,fromwhere+1,smf30plnd)
    call show_chunk
    if smf30pond = 1 then,
      do
    SMF30SRV = SubStr(smf.i,fromwhere+1,4)         /* 000000 */
        smf30srvd = c2d(smf30srv)
    SMF30CSU = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
        smf30csud = c2d(smf30csu)
    SMF30SRB = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
        smf30srbd = c2d(smf30srb)
    SMF30IO = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
        smf30iod  = c2d(smf30io)
    SMF30MSO = SubStr(smf.i,fromwhere+17,4)         /* 000010 */
        smf30msod = c2d(smf30mso)
    SMF30TAT = SubStr(smf.i,fromwhere+21,4)         /* 000014 */
        temptime = c2d(smf30tat)
        smf30tatd= c2d(smf30tat)
        smf30tath= c2x(smf30tat)
        call format_micro
        tattime = displaytime
    SMF30SUS = SubStr(smf.i,fromwhere+25,4)         /* 000018 */
    SMF30RES = SubStr(smf.i,fromwhere+29,4)         /* 00001C */
    SMF30TRS = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
    SMF30WLM = SubStr(smf.i,fromwhere+37,8)         /* 000024 */
    SMF30SCN = SubStr(smf.i,fromwhere+45,8)         /* 00002C */
    SMF30GRN = SubStr(smf.i,fromwhere+53,8)         /* 000034 */
    SMF30RCN = SubStr(smf.i,fromwhere+61,8)         /* 00003C */
    SMF30ETA = SubStr(smf.i,fromwhere+69,4)         /* 000044 */
    SMF30ESU = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
    SMF30ETC = SubStr(smf.i,fromwhere+77,4)         /* 00004C */
    SMF30PFL = SubStr(smf.i,fromwhere+81,16)         /* 000050 */
    SMF30JQT = SubStr(smf.i,fromwhere+97,4)         /* 000060 */
    SMF30RQT = SubStr(smf.i,fromwhere+101,4)         /* 000064 */
    SMF30HQT = SubStr(smf.i,fromwhere+105,4)         /* 000068 */
    SMF30SQT = SubStr(smf.i,fromwhere+109,4)         /* 00006C */
        smf30sqtd = c2d(smf30sqt)
        temptime = c2d(smf30sqt)
        call format_time
        sqttime = displaytime
    SMF30PF1 = SubStr(smf.i,fromwhere+113,1)         /* 000070 */
    SMF30RS4 = SubStr(smf.i,fromwhere+114,3)           /* 000071 */
    if (print_debug > 0) then,
    do
    say "     WLM="smf30wlm smf30scn smf30grn smf30rcn
    say "     service units"
    say "         cpu="smf30csud
    say "         srb="smf30srbd
    say "         io ="smf30iod
    say "         mso="smf30msod
    say "       total="smf30srvd
    end
    end
    end
/*------------------------------------------------------------------*/
    /*     operator section                                     */
    fromwhere= c2d(smf30oof) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "operator section smf30oof="fromwhere "hex"c2x(smf30oof)
    chunk = substr(smf.i,fromwhere+1,smf30olnd)
    call show_chunk
    if smf30oond = 1 then,
      do
    SMF30PDM = SubStr(smf.i,fromwhere+1,4)         /* 000000 */
        smf30pdmd = c2d(smf30pdm)
    SMF30PRD = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
        smf30prdd = c2d(smf30prd)
    SMF30PTM = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
        smf30ptmd = c2d(smf30ptm)
    SMF30TPR = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
        smf30tprd = c2d(smf30tpr)
    SMF30MTM = SubStr(smf.i,fromwhere+17,4)         /* 000010 */
        smf30mtmd = c2d(smf30mtm)
    SMF30MSR = SubStr(smf.i,fromwhere+21,4)           /* 000014 */
        smf30msrd = c2d(smf30msr)
    if (print_debug > 0) then,
    do
    say "    mounts"
    say "        non-specific dasd="smf30pdmd
    say "            specific dasd="smf30prdd
    say "        non-specific tape="smf30ptmd
    say "            specific tape="smf30tprd
    say "        non-specific mss ="smf30mtmd
    say "            specific mss ="smf30msrd
    end
    end
    end
/*------------------------------------------------------------------*/
    /*     appc/mvs cumulative section                          */
    fromwhere= c2d(smf30aro) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "appc/mvs cumulative section smf30aro="fromwhere,
       "hex"c2x(smf30aro)
    chunk = substr(smf.i,fromwhere+1,smf30arld)
    call show_chunk
    if smf30arnd = 1 then,
    do
    SMF30CN = SubStr(smf.i,fromwhere+1,4)         /* 000000 */
        smf30cnh = c2x(smf30cn)
        smf30cnd = c2d(smf30cn)
    SMF30CNA = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
    SMF30SEN = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
    SMF30DAT = SubStr(smf.i,fromwhere+13,8)         /* 00000C */
    SMF30REC = SubStr(smf.i,fromwhere+21,4)         /* 000014 */
    SMF30DAR = SubStr(smf.i,fromwhere+25,8)         /* 000018 */
    SMF30TAC = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
    SMF30ATR = SubStr(smf.i,fromwhere+37,4)           /* 000024 */
    if (print_debug > 0) then,
    say "      Appc conversations="smf30cnd
    end
    end
/*------------------------------------------------------------------*/
    /*     appc/mvs resource section                            */
    fromwhere= c2d(smf30dro) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "appc/mvs resource section smf30dro="fromwhere,
       "hex"c2x(smf30dro)
    chunk = substr(smf.i,fromwhere+1,smf30drld)
    call show_chunk
    if smf30drnd = 1 then,
      do
    SMF30DC = SubStr(smf.i,fromwhere+1,4)         /* 000000 */
        smf30dch = c2x(smf30dc)
        smf30dcd = c2d(smf30dc)
    SMF30DCA = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
    SMF30DSC = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
    SMF30DDS = SubStr(smf.i,fromwhere+13,8)         /* 00000C */
    SMF30DRC = SubStr(smf.i,fromwhere+21,4)         /* 000014 */
    SMF30DDR = SubStr(smf.i,fromwhere+25,8)         /* 000018 */
    SMF30DAC = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
    SMF30DTR = SubStr(smf.i,fromwhere+37,4)           /* 000024 */
    if (print_debug > 0) then,
    say "      Appc conversations="smf30dcd
    end
    end
/*------------------------------------------------------------------*/
    /*     open/mvs process section                             */
    fromwhere= c2d(smf30opo) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "open/mvs process sectionsmf30opo="fromwhere,
       "hex"c2x(smf30opo)
    chunk = substr(smf.i,fromwhere+1,smf30opld)
    call show_chunk
    SMF30OPI = SubStr(smf.i,fromwhere+1,4)         /* 000000 */
        smf30opid = c2d(smf30opi)
    SMF30OPG = SubStr(smf.i,fromwhere+5,4)         /* 000004 */
    SMF30OUI = SubStr(smf.i,fromwhere+9,4)         /* 000008 */
    SMF30OUG = SubStr(smf.i,fromwhere+13,4)         /* 00000C */
    SMF30OSI = SubStr(smf.i,fromwhere+17,4)         /* 000010 */
    SMF30OSC = SubStr(smf.i,fromwhere+21,4)         /* 000014 */
    SMF30OST = SubStr(smf.i,fromwhere+25,4)         /* 000018 */
    SMF30ODR = SubStr(smf.i,fromwhere+29,4)         /* 00001C */
    SMF30OFR = SubStr(smf.i,fromwhere+33,4)         /* 000020 */
    SMF30OFW = SubStr(smf.i,fromwhere+37,4)         /* 000024 */
    SMF30OPR = SubStr(smf.i,fromwhere+41,4)         /* 000028 */
    SMF30OPW = SubStr(smf.i,fromwhere+45,4)         /* 00002C */
    SMF30OSR = SubStr(smf.i,fromwhere+49,4)         /* 000030 */
    SMF30OSW = SubStr(smf.i,fromwhere+53,4)         /* 000034 */
    SMF30OLL = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
    SMF30OLP = SubStr(smf.i,fromwhere+61,4)         /* 00003C */
    SMF30OGL = SubStr(smf.i,fromwhere+65,4)         /* 000040 */
    SMF30OGP = SubStr(smf.i,fromwhere+69,4)         /* 000044 */
    SMF30OPP = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
    SMF30OKR = SubStr(smf.i,fromwhere+77,4)         /* 00004C */
    SMF30OKW = SubStr(smf.i,fromwhere+81,4)         /* 000050 */
    SMF30OMS = SubStr(smf.i,fromwhere+85,4)         /* 000054 */
    SMF30OMR = SubStr(smf.i,fromwhere+89,4)         /* 000058 */
    SMF30OSY = SubStr(smf.i,fromwhere+93,4)           /* 00005C */
    if (print_debug > 0) then,
    say "    process id="smf30opid
    end
/*------------------------------------------------------------------*/
    /*     usage data section                                   */
    fromwhere= c2d(smf30udo) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "usage data section smf30udo="fromwhere,
       "hex"c2x(smf30udo)
    chunk = substr(smf.i,fromwhere+1,smf30udld)
    call show_chunk
    SMF30UPO = SubStr(smf.i,fromwhere+1,16)         /* 000000 */
    SMF30UPN = SubStr(smf.i,fromwhere+17,16)         /* 000010 */
    SMF30UPV = SubStr(smf.i,fromwhere+33,8)         /* 000020 */
    SMF30UPQ = SubStr(smf.i,fromwhere+41,8)         /* 000028 */
    SMF30UPI = SubStr(smf.i,fromwhere+49,8)         /* 000030 */
    SMF30UCT = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
    SMF30UCS = SubStr(smf.i,fromwhere+61,4)         /* 00003C */
    SMF30URD = SubStr(smf.i,fromwhere+65,8)         /* 000040 */
    SMF30UDF = SubStr(smf.i,fromwhere+73,1)         /* 000048 */
    SMF30UFG = SubStr(smf.i,fromwhere+74,1)         /* 000049 */
    end
/*------------------------------------------------------------------*/
    /*     arm section                                          */
    fromwhere= c2d(smf30rmo) - 4
/*------------------------------------------------------------------*/
    if fromwhere > 0 then,
      do
    if (print_debug > 0) then,
    say "arm section smf30rmo="fromwhere "hex"c2x(smf30rmo)
    chunk = substr(smf.i,fromwhere+1,smf30rmld)
    call show_chunk
    SMF30RNM = SubStr(smf.i,fromwhere+1,16)         /* 000000 */
    SMF30RTP = SubStr(smf.i,fromwhere+17,8)         /* 000010 */
    SMF30RRG = SubStr(smf.i,fromwhere+25,16)         /* 000018 */
    SMF30RSN = SubStr(smf.i,fromwhere+41,8)         /* 000028 */
    SMF30RGT = SubStr(smf.i,fromwhere+49,4)         /* 000030 */
    SMF30RGD = SubStr(smf.i,fromwhere+53,4)         /* 000034 */
    SMF30RWT = SubStr(smf.i,fromwhere+57,4)         /* 000038 */
    SMF30RWD = SubStr(smf.i,fromwhere+61,4)         /* 00003C */
    SMF30RYT = SubStr(smf.i,fromwhere+65,4)         /* 000040 */
    SMF30RYD = SubStr(smf.i,fromwhere+69,4)         /* 000044 */
    SMF30RTT = SubStr(smf.i,fromwhere+73,4)         /* 000048 */
    SMF30RTD = SubStr(smf.i,fromwhere+77,4)         /* 00004C */
    end
    return

print_report:
    /*     check if step or job termination else return         */
    if smf30rtyd >< 30 then return
    if smf30stph = "0004" then call step_term
    return

step_term:
    /*     check if first                                       */
    if smf30pond > 0 then,
      do
        datarec = smf30jbn smf30jnm rsdgreg rsttime,
                  smf30stnd smf30stm smf30psn smf30pgm,
                  dtegreg  tmetime  stdgreg  sittime,
                  redgreg rettime sqttime asttime ppstime,
                  cond_code
        push datarec
        "execio 1 diskw smf30"
      end
    return
