/* We first need rexx in comment if compiled or read from SYSPROC. */
pgm_REXR0472:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 2'. */

  SAY ""
  SAY "REXR0472: LISTDSI"
  SAY "================="

  dsi_name = "'VENDOR.GENIE.WISHLIST'"
  dsi_loc = ""                            /* Default, Catalog search */
  dsi_options = "NODIRECTORY"                             /* Default */
  Call check_listdsi_rc

  dsi_options = "DIRECTORY"
  Call check_listdsi_rc

  dsi_options = "DIRECTORY NORECALL"
  Call check_listdsi_rc

  dsi_options = "DIRECTORY RECALL"      /* Default is from DASD-Only */
  Call check_listdsi_rc

  dsi_options = "DIRECTORY SMSINFO"
  Call check_listdsi_rc

  dsi_loc = "Volume("sysvolume")"                 /* Specific VOLSER */
  dsi_options = "DIRECTORY"
  Call check_listdsi_rc

  Address TSO "Allocate File(LISTDSI) SHR REUSE",
    "Dataset("dsi_name")"
  dsi_loc = "PreAlloc"                             /* Catalog search */
  Call check_listdsi_rc

  dsi_loc = "FILE"                                  /* DDNAME search */
  dsi_name = "LISTDSI"
  Call check_listdsi_rc
  Address TSO "Free File(LISTDSI)"

  Say "Wrong volume:"
  dsi_loc = "Volume(CSI002)"                      /* Specific VOLSER */
  dsi_options = "DIRECTORY"
  Call check_listdsi_rc

  Say "Wrong dsname:"
  dsi_name = "'VENDOR.GENIE.SAMPLES'"
  dsi_loc = ""
  dsi_options = "DIRECTORY"
  Call check_listdsi_rc

  Return 0

check_listdsi_rc:
  Say "ListDSI("dsi_name dsi_loc dsi_options") testing results:"
  your_msg = Msg("OFF")          /* hide TSO/E messages from LISTDSI */
  listdsi_rc = ListDSI(dsi_name dsi_loc dsi_options)
  my_msg = Msg(your_msg)
  Select
    When (listdsi_rc = 0) Then DO                /* Complete success */
      Call show_listdsi
    End
    When (listdsi_rc = 4) Then DO                 /* Partial success */
      Call show_partial_listdsi
    End
    When (listdsi_rc = 16) Then DO                     /* No success */
      Say "ListDSI failed, RC("listdsi_rc")"
      Say "  SYSREASON ("sysreason")"
      Call show_sysreason
      Say "  SYSMSGLVL1("sysmsglvl1")"
      Say "  SYSMSGLVL2("sysmsglvl2")"
    End
    Otherwise DO
      Say "Unexpected RC("listdsi_rc")"
    END
  End
  Return 0

show_listdsi:
  Say dsi_name "listed okay."
  Say "  SYSDSNAME    ("sysdsname")"
  Say "  SYSVOLUME    ("sysvolume")"
  Say "  SYSUNIT      ("sysunit")"
  Say "  SYSDSORG     ("sysdsorg")"
  Select
    When (sysdsorg = "PS")  Then Say "    Physical Sequential"
    When (sysdsorg = "PSU") Then Say "    Physical Sequential unmovable "
    When (sysdsorg = "DA")  Then Say "    Direct organization"
    When (sysdsorg = "DAU") Then Say "    Direct organization unmovable "
    When (sysdsorg = "IS")  Then Say "    Indexed Sequential"
    When (sysdsorg = "ISU") Then Say "    Indexed Sequential unmovable"
    When (sysdsorg = "PO")  Then Say "    Partitioned organization"
    When (sysdsorg = "POU") Then,
      Say "    Partitioned organization unmovable"
    When (sysdsorg = "VS")  Then Say "    VSAM"
    When (sysdsorg = "???") Then Say "    Unknown"
    Otherwise,
      Say "    Unexpected DSORG("sysdsorg")"
  End
  Say "  SYSRECFM     ("sysrecfm")"
  Select
    When (Pos("U",sysrecfm) > 0)  Then,
      Say "    Undefined record length"
    When (Pos("F",sysrecfm) > 0)  Then,
      Say "    Fixed record length"
    When (Pos("V",sysrecfm) > 0)  Then,
      Say "    Variable record length"
    When (Pos("T",sysrecfm) > 0)  Then,
      Say "    Track overflow feature"
    When (Pos("B",sysrecfm) > 0)  Then,
      Say "    Blocked"
    When (Pos("S",sysrecfm) > 0)  Then,
      Say "    Standard or spanned records"
    When (Pos("A",sysrecfm) > 0)  Then,
      Say "    ASCII control characters"
    When (Pos("M",sysrecfm) > 0)  Then,
      Say "    Machine code control characters"
    When (Pos("??????",sysrecfm) > 0)  Then,
      Say "    Unknown"
    Otherwise,
      Say "    Unexpected RECFM("sysrecfm")"
  End
  Say "  SYSLRECL     ("syslrecl")"
  Say "  SYSBLKSIZE   ("sysblksize")"
  Say "  SYSKEYLEN    ("syskeylen")"
  Say "  SYSALLOC     ("sysalloc")"
  Say "  SYSUSED      ("sysused")"
  Say "  SYSUSEDPAGES ("sysusedpages")"
  Say "  SYSPRIMARY   ("sysprimary")"
  Say "  SYSSECONDS   ("sysseconds")"
  Say "  SYSUNITS     ("sysunits")"
  Select
    When (sysunits = "CYLINDER") Then,
      Say "    CYL"
    When (sysunits = "TRACK") Then,
      Say "    TRK"
    When (sysunits = "BLOCK") Then,
      Say "    BLK"
    When (sysunits = "??????") Then,
      Say "    UNK"
    Otherwise,
      Say "    Unexpected UNITS("sysunits")"
  End
  Say "  SYSEXTENTS   ("sysextents")"
  Say "  SYSCREATE    ("syscreate")"
  Say "  SYSREFDATE   ("sysrefdate")"
  Say "  SYSEXDATE    ("sysexdate")"
  Say "  SYSPASSWORD  ("syspassword")"
  Select
    When (syspassword = "NONE") Then,
      Say "    No password protection, and that is a good thing."
    When (syspassword = "READ") Then,
      Say "    A password is reguired to read the dataset, bad."
    When (syspassword = "WRITE") Then,
      Say "    A password is reguired to write the dataset, worse."
    Otherwise,
      Say "    Unexpected PASSWORD("syspassword")"
  End
  Say "  SYSRACFA     ("sysracfa")"
  Select
    When (sysracfa = "NONE") Then,
      Say "    No RACF protection, and that is a bad thing."
    When (sysracfa = "GENERIC") Then,
      Say "    A generic profile covers this dataset, good."
    When (sysracfa = "DISCRETE") Then,
      Say "    A discrete profile covers this dataset, try generics."
    Otherwise,
      Say "    Unexpected RACF("sysracfa")"
  End
  Say "  SYSUPDATED   ("sysupdated")"
  Select
    When (sysupdated = "YES") Then,
      Say "    Dataset has been updated since the last backup."
    When (sysupdated = "NO") Then,
      Say "    Dataset is still the same since the last backup."
    Otherwise,
      Say "    Unexpected UPDATE("sysupdated")"
  End
  Say "  SYSTRKSCYL   ("systrkscyl")"
  Say "  SYSBLKSTRK   ("sysblkstrk")"
  If (Pos("PO",sysdsorg) > 0) Then,
    Do
      Say " SYSADIRBLK   ("sysadirblk")"
      Say " SYSUDIRBLK   ("sysudirblk")"
      Say " SYSMEMBERS   ("sysmembers")"
    End
  Say "  SYSREASON    ("sysreason")"
  Call show_sysreason
  Say "  SYSMSGLVL1   ("sysmsglvl1")"
  Say "  SYSMSGLVL2   ("sysmsglvl2")"
  Say "  SYSDSSMS     ("sysdssms")"
  Select
    When (sysdssms = "SEQ") Then,
      Say "    DSNTYPE not retrieved, Sequential dataset."
    When (sysdssms = "PDS") Then,
      Say "    DSNTYPE not retrieved, Partitioned dataset."
    When (sysdssms = "PDSE") Then,
      Say "    DSNTYPE not retrieved, Partitioned dataset extended."
    When (sysdssms = "LIBRARY") Then,
      Say "    Empty PDSE."
    When (sysdssms = "PROGRAM_LIBRARY") Then,
      Say "    Program PDSE."
    When (sysdssms = "DATA_LIBRARY") Then,
      Say "    Data PDSE."
    Otherwise,
      Say "    Unexpected DSSMS("sysdssms")"
  End
  If (Pos("SMSINFO",dsi_options) > 0) Then,
    Do
      Say "  SYSDATACLASS ("sysdataclass")"
      Say "  SYSSTORCLASS ("sysstorclass")"
      Say "  SYSMGMTCLASS ("sysmgmtclass")"
    End
  If (Pos("S",sysdsorg) > 0)  Then,
    Do
      Say "  SYSSEQDSNTYPE("sysseqdsntype")"
      Select
        When (sysseqdsntype = "BASIC") Then,
          Say "    Regular Sequential dataset."
        When (sysseqdsntype = "LARGE") Then,
          Say "    Large Sequential dataset."
        When (sysseqdsntype = "EXTENDED") Then,
          Say "    Extended Sequential dataset."
        Otherwise,
          Say "    Unexpected SEQDSNTYPE("sysseqdsntype")"
      End
    End
  Return 0

show_partial_listdsi:
  Say dsi_name "partially listed."
  SYSDATACLASS = "NON-SMS"
  SYSSTORCLASS = "NON-SMS"
  SYSMGMTCLASS = "NON-SMS"
  Call show_listdsi
  Return 0

show_sysreason:
  my_sysreason = Right(sysreason,2)
  If (listdsi_rc = 4) Then my_sysreason = 30
  Say "SYSMSGLVL2 = IKJ584"my_sysreason"I:"
  Select
    When (sysreason = 00) Then,
      Say "    Normal completion"
    When (sysreason = 01) Then,
      Say "    Error parsing the function."
    When (sysreason = 02) Then,
      Say "    Dynamic allocation processing error."
    When (sysreason = 03) Then,
      Say "    The data set is a type that can not be processed."
    When (sysreason = 04) Then,
      Say "    Error determining UNIT name."
    When (sysreason = 05) Then,
      Say "    Data set is not catalogued."
    When (sysreason = 06) Then,
      Say "    Error obtaining the dataset name."
    When (sysreason = 07) Then,
      Say "    Error finding the device type."
    When (sysreason = 08) Then,
      Say "    The dataset is not on a DASD volume."
    When (sysreason = 09) Then,
      Say "    NORECALL prevented retrieval of information."
    When (sysreason = 11) Then,
      Say "    DIRECTORY specified, but you lack read access."
    When (sysreason = 12) Then,
      Say "    VSAM datasets not supported."
    When (sysreason = 13) Then,
      Say "    The dataset could not be opened."
    When (sysreason = 14) Then,
      Say "    Device type not found in UCB tables."
    When (sysreason = 17) Then,
      Say "    System or User abend occurred."
    When (sysreason = 18) Then,
      Say "    Partial dataset information returned."
    When (sysreason = 19) Then,
      Say "    Multi-volume dataset."
    When (sysreason = 20) Then,
      Say "    Device type not found in EDT table."
    When (sysreason = 21) Then,
      Say "    Catalog locate error."
    When (sysreason = 22) Then,
      Say "    Volume not mounted."
    When (sysreason = 23) Then,
      Say "    Permanent I/O error on volume."
    When (sysreason = 24) Then,
      Say "    Data set not found."
    When (sysreason = 25) Then,
      Say "    Migrated to non-DASD volume."
    When (sysreason = 26) Then,
      Say "    MSS device."
    When (sysreason = 27) Then,
      Say "    No VOLSER assigned."
    When (sysreason = 28) Then,
      Say "    DDname not one to eight valid characters."
    When (sysreason = 29) Then,
      Say "    You need to sepcify either a dataset name or ddname."
    When (sysreason = 30) Then,
      Say "    Not SMS managed."
    When (sysreason = 31) Then,
      Say "    ISITMGD macro had a problem, see sysmsglvl2."
    When (sysreason = 32) Then,
      Say "    DFSMS/MVS level incompatability."
    When (sysreason = 33) Then,
      Say "    DFSMS/MVS is not active."
    When (sysreason = 34) Then,
      Say "    OPEN error."
    When (sysreason = 35) Then,
      Say "    Unexpected error from DFSMS/MVS IGWFAMS routine."
    When (sysreason = 36) Then,
      Say "    Unexpected error from SMS service module."
    When (sysreason = 37) Then,
      Say "    Unexpected error from DFSMS service IGGCSI00."
    Otherwise,
      Say "    Unexpected sysreason("sysreason")"
  End
  Return 0

  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  REXX(REXR0472)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Manual:   ikj4a3a0.pdf
           SA22-7790-10 z/OS TSO/E REXX Reference
           Version 1 Release 13
           Chapter 4. Functions
           Built-in functions
           LISTDSI
 Overview: returns one of the following function codes that replace the
           function call, and retrieves information about a data set's
           allocation, protection, and directory and stores it in
           specific variables.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.00 20171223 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original base code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DdSCLAdMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. d have tried to make it work right,
and d am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

