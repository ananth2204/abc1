/* rexx */
Rexx_KTPMINVK:
  rexxpgm_version = "01.02"           /* ver lev */

  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

  pds_sysexec = "'!HLQ!.KTPM.REXX'"
  pds_ispllib = "'!HLQ!.KTPM.LOADLIB'"
  pds_ispmlib = "'!HLQ!.KTPM.MSGS'"
  pds_ispplib = "'!HLQ!.KTPM.PANELS'"
  pds_ispslib = "'!HLQ!.KTPM.SKELS'"
  tso_command = "%KTPM"

  sysvar_sysispf = SYSVAR("SYSISPF")
  IF (sysvar_sysispf <> "ACTIVE") THEN DO
    SAY "You first need to start ISPF and then you can execute" ,
      "this KTPM tool."
    RETURN 16
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Dataset:  KTPM.REXX(KTPMINVK)
  Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Kenneth Tomiak Programming Method (KTPM) collection.
            This is a REXX invocation program. It will dynamically
            ALTLIB your REXX pds and LIBDEF your ISPF data sets.
  Syntax:   %ktpminvk

=======================================================================

  History of Modifications
  ------------------------
vv.mm When     Who  /  What you did
----- -------- --------------------------------------------------------
01.02 20180630 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Kenneth Tomiak Programming Method (KTPM) collection.
----- -------- --------------------------------------------------------
01.01 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180423    Programming Using The Kenneth Tomiak Method.
               2) Stylize using:
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               5) Added MSGS and SKELS to LIBDEF processing.
               6) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20170808 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0

  ZERRALRM = "Yes"
  ZERRHM = ""
  ZERRSM = "Press HELP"
  ZERRLM = ""

  altlib_exec = 0
  ispllib_libdef = 0
  ispmlib_libdef = 0
  ispplib_libdef = 0
  ispslib_libdef = 0
  good_to_go = 1

  IF (POS("!HLQ!", ,
    pds_sysexec ,
    pds_ispllib ,
    pds_ispmlib ,
    pds_ispplib ,
    pds_ispslib) > 0) THEN DO
    sysvar_sysuid = SYSVAR("SYSUID")
    IF (sysvar_sysuid = "KTOMIAK") THEN DO
      pds_sysexec = "KTPM.REXX"
      pds_ispllib = "KTPM.LOADLIB"
      pds_ispmlib = "KTPM.MSGS"
      pds_ispplib = "KTPM.PANELS"
      pds_ispslib = "KTPM.SKELS"
    END
    ELSE DO
      good_to_go = 0
      ZERRLM = "You failed to customize KTPM.REXX(KTPMINVK)" ,
        "to use your data set names."
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      return_code = 4
      RETURN return_code
    END
  END

  sysdsn_altlib = SYSDSN(pds_sysexec)
  IF (sysdsn_altlib <> "OK") THEN DO
    good_to_go = 0
    ZERRLM = ZERRLM|| ,
      LEFT("Error:" pds_sysexec "("sysdsn_altlib")",79)
  END

  sysdsn_load = SYSDSN(pds_ispllib)
  IF (sysdsn_load <> "OK") THEN DO
    good_to_go = 0
    ZERRLM = ZERRLM|| ,
      LEFT("Error:" pds_ispllib "("sysdsn_load")",79)
  END

  sysdsn_msgs = SYSDSN(pds_ispmlib)
  IF (sysdsn_msgs <> "OK") THEN DO
    good_to_go = 0
    ZERRLM = ZERRLM|| ,
      LEFT("Error:" pds_ispmlib "("sysdsn_msgs")",79)
  END

  sysdsn_panels = SYSDSN(pds_ispplib)
  IF (sysdsn_panels <> "OK") THEN DO
    good_to_go = 0
    ZERRLM = ZERRLM|| ,
      LEFT("Error:" pds_ispplib "("sysdsn_panels")",79)
  END

  sysdsn_skels = SYSDSN(pds_ispslib)
  IF (sysdsn_skels <> "OK") THEN DO
    good_to_go = 0
    ZERRLM = ZERRLM|| ,
      LEFT("Error:" pds_ispslib "("sysdsn_skels")",79)
  END

  IF (good_to_go = 0) THEN DO
    ZERRLM = ZERRLM|| ,
      LEFT("Fix the above errors and try again.",79)
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = 4
    RETURN return_code
  END

  "ALTLIB ACTIVATE APPLICATION(EXEC)" ,
    "DATASET("pds_sysexec") UNCOND"
  altlib_rc = RC
  IF (altlib_rc <> 0) THEN DO
    ZERRSM = "Severe error!"
    ZERRLM = "ALTLIB of" pds_sysexec "failed, rc("altlib_rc")."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = altlib_rc
    RETURN return_code
  END
  altlib_exec = 1

  ADDRESS ISPEXEC "LIBDEF ISPLLIB DATASET" ,
    "ID("pds_ispllib") STACK"
  libdef_rc = RC
  IF (libdef_rc <> 0) THEN DO
    ZERRSM = "Severe error!"
    ZERRLM = "LIBDEF of" pds_ispllib "failed, rc("libdef_rc")."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = libdef_rc
    RETURN return_code
  END
  ispllib_libdef = 1

  ADDRESS ISPEXEC "LIBDEF ISPMLIB DATASET" ,
    "ID("pds_ispmlib") STACK"
  libdef_rc = RC
  IF (libdef_rc <> 0) THEN DO
    ZERRSM = "Severe error!"
    ZERRLM = "LIBDEF of" pds_ispmlib "failed, rc("libdef_rc")."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = libdef_rc
    RETURN return_code
  END
  ispmlib_libdef = 1

  ADDRESS ISPEXEC "LIBDEF ISPPLIB DATASET" ,
    "ID("pds_ispplib") STACK"
  libdef_rc = RC
  IF (libdef_rc <> 0) THEN DO
    ZERRSM = "Severe error!"
    ZERRLM = "LIBDEF of" pds_ispplib "failed, rc("libdef_rc")."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = libdef_rc
    RETURN return_code
  END
  ispplib_libdef = 1

  ADDRESS ISPEXEC "LIBDEF ISPSLIB DATASET" ,
    "ID("pds_ispslib") STACK"
  libdef_rc = RC
  IF (libdef_rc <> 0) THEN DO
    ZERRSM = "Severe error!"
    ZERRLM = "LIBDEF of" pds_ispslib "failed, rc("libdef_rc")."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = libdef_rc
    RETURN return_code
  END
  ispslib_libdef = 1
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  ADDRESS ISPEXEC "SELECT" ,
    "CMD("tso_command")"
  select_rc = RC
  IF (select_rc <> 0) THEN DO
    ZERRSM = "Trouble?"
    ZERRLM = "Select CMD("tso_command") yielded rc("select_rc")."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = select_rc
    RETURN return_code
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  IF (altlib_exec = 1) THEN DO
    "ALTLIB DEACTIVATE APPLICATION(EXEC)"
    altlib_rc = RC
    IF (altlib_rc = 0) THEN DO
      altlib_exec = 0
    END
  END
  IF (ispllib_libdef = 1) THEN DO
    ADDRESS ISPEXEC "LIBDEF ISPLLIB"
    libdef_rc = RC
    IF (libdef_rc = 0) THEN DO
      ispllib_libdef = 0
    END
  END
  IF (ispmlib_libdef = 1) THEN DO
    ADDRESS ISPEXEC "LIBDEF ISPMLIB"
    libdef_rc = RC
    IF (libdef_rc = 0) THEN DO
      ispmlib_libdef = 0
    END
  END
  IF (ispplib_libdef = 1) THEN DO
    ADDRESS ISPEXEC "LIBDEF ISPPLIB"
    libdef_rc = RC
    IF (libdef_rc = 0) THEN DO
      ispplib_libdef = 0
    END
  END
  IF (ispslib_libdef = 1) THEN DO
    ADDRESS ISPEXEC "LIBDEF ISPSLIB"
    libdef_rc = RC
    IF (libdef_rc = 0) THEN DO
      ispslib_libdef = 0
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
