rexx_NAPTIME:  /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = '01.01'
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(NAPTIME)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   NAPTIME {seconds_to_sleep}
 Overview: This sample shows two ways to sleep, kill time without
           burning precious CPU cycles.

=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who     What you did
----- -------- -------- -----------------------------------------------
01.01 20110411 KET2812
                        1) Add the second way, call ZWAITTIM.
----- -------- -------- -----------------------------------------------
01.00 20080313 KET2812  Original code.
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_NAPTIME:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
    End
  return_code = rexx_Termination()
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name rexxpgm_version,53) "="
  say left("= executing under" source_host_env,53) "="
  say left("= as a" source_call_type,53) "="
  say left("= on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  return_code = 0

  If (source_host_env >< "TSO") Then,
    Do
      Say "Wrong host environment" source_host_env
      return_code = 16
    End

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  call format_time
  say "HH("wait_hour")" "MM("wait_minute")" "SS("wait_second")"
  say "or ("display_wait")"
  say ""
  say "Use z/OS Unix Services to sleep:"
  say "--------------------------------"
  say "About to sleep for" length_of_wait "second(s)."
  call syscalls "ON"
  say "Begin timer:" Time("R")
  address syscall "sleep" length_of_wait
  say "End timer  :" Time("E")
  call syscalls "OFF"
  say ""
  say "Note: you should always sleep a minimum of the seconds"
  say "you asked for. You will awaken a little bit groggy, so"
  say "a few more microseconds may elapse before you are fully"
  say "awake."
  say ""
  say "Call a user-custom assembler program:"
  say "----------------------------------"
  say "About to sleep for" length_of_wait"00"
  say "Begin timer:" Time("R")
  Address TSO "CALL *(ZWAITTIM)      '"length_of_wait"00'"
  say "End timer  :" Time("E")
  say ""
  say "Use a Language Environment program:"
  say "-----------------------------------"
  say "About to sleep for" length_of_wait"00"
  /* Trying
  http://www.mainframesupport.dk/tips/tip0942.html
  */
  hex_length_of_wait = D2C(length_of_wait,4)
  say "Begin timer:" Time("R")
  ADDRESS LINKPGM "ILBOWAT0 hex_length_of_wait"
  wait_rc = RC
  msg_status = MSG("ON")
  say "End timer  :" Time("E") "RC("wait_rc")"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
format_time:
  Parse Var all_my_arguments length_of_nap .
  If (Datatype(length_of_nap) = "NUM") Then,
    Do
      length_of_wait = seconds_to_time(length_of_nap)
    End
  Else
    Do
      say length_of_nap "is an invalid number of seconds."
      say "Defaulting to 10 seconds."
      length_of_nap = 10
      length_of_wait = "000010"
    End
  return 0

seconds_to_time:
  seconds_to_wait = Arg(1)
  wait_day = 0
  wait_hour = 0
  wait_minute = 0
  If (seconds_to_wait < 60) then,
    Do
      wait_second = Right("00"seconds_to_wait,2)
      length_of_wait = "000000"wait_second
      wait_day = Right("00"wait_day,2)
      wait_hour = Right("00"wait_hour,2)
      wait_minute = Right("00"wait_minute,2)
      display_wait = wait_day":"wait_hour":"wait_minute":"wait_second
    End
  Else,
    Do
      Say "Converting" seconds_to_wait "to dd:hh:mm:ss format."
      wait_minute = seconds_to_wait % 60
      wait_second = seconds_to_wait // 60
      If (wait_minute > 59) then,
        Do
          wait_hour    = wait_minute % 60
          wait_minute = wait_minute // 60
        End
      If (wait_hour > 24) then,
        Do
          say "Submit your job tomorrow, I refuse to sleep that long!"
          wait_day    = 0
          wait_hour    = 0
          wait_minute = 0
          wait_second = 0
        End
      wait_hour = Right("00"wait_hour,2)
      wait_minute = Right("00"wait_minute,2)
      wait_second = Right("00"wait_second,2)
      length_of_wait = wait_hour""wait_minute""wait_second
      display_wait = wait_hour":"wait_minute":"wait_second
    End
  return length_of_wait

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
other_ways:
  parse arg length_of_wait
  length_of_wait = "000002"
  length_of_wait = right(length_of_wait,6,0)
  length_of_wait_zero = right(length_of_wait,6,0)"00"
  hex_length_of_wait = D2C(length_of_wait,4)
  say ""
  say "Use IPC load module to wait on a timed ECB wait:"
  say "------------------------------------------------"
  say "About to wait for" length_of_wait "length of time."
  msg_status = MSG("OFF")
  parma = right(length_of_wait,6,0)"00"
  say "Begin timer:" Time("R")
  Address LINKMVS  "ZWAITTIM PARMA"
  say "End timer  :" Time("E")
  return 0

  /* Good
     ------------------------------------------------------------------

  Address TSO "CALL *(ZWAITTIM) '"length_of_wait"00'"

  parma = right(length_of_wait,8,0)"00"
  Address ATTCHMVS "ZWAITTIM PARMA"
  Address ATTCHPGM "ZWAITTIM PARMA"
  parma = right(length_of_wait,6,0)"00"
  Address LINKMVS  "ZWAITTIM PARMA"
  parma = right(length_of_wait,8,0)"00"
  Address LINKPGM  "ZWAITTIM PARMA"
  */

  /* Bad
     ------------------------------------------------------------------

  parma = right(length_of_wait,8,0)"00"
  Address ATTACH   "ZWAITTIM PARMA"
    RC(S0C7)
  Address LINK     "ZWAITTIM PARMA"
    RC(S0C7)


    RC(-3) could not find the program
    RC(-2) problem with the variables
    RC(-199)
  Address ATTACH   "ZWAITTIM length_of_wait_zero"
  Address ATTACH   "'KET2812.MIS.STEPLIB(SYSSLEEP)'" length_of_wait
  Address ATTCHPGM "'KET2812.MIS.STEPLIB(SYSSLEEP)'" length_of_wait
  Address LINK    "*(ZWAITTIM) '"length_of_wait"00'"
  Address LINKMVS "*(ZWAITTIM) '"length_of_wait"00'"
  Address LINKPGM "*(ZWAITTIM) '"length_of_wait"00'"
  Address LINK    "ZWAITTIM"     length_of_wait
  Address LINKMVS "ZWAITTIM     '00001500'"
  Address LINKPGM "ZWAITTIM    '"length_of_wait"00'"
  Address LINKMVS "'KET2812.MIS.STEPLIB(SYSSLEEP)' length_of_wait"
  Address LINKMVS "'KET2812.MIS.STEPLIB(SYSSLEEP)'" ,
    hex_length_of_wait

  */
