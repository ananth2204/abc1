/* rexx */
Rexx_DATECNV:
  rexxpgm_version = "01.01"           /* ver lev */

  ARG olddate

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(DATECNV)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   %datecnv
 Overview: Shows how to use the DATE built-in function to do
           conversions on the today's date VALUE and on your custom
           defined value.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180426 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using template $putktm:
      20180423    Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20180116 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original base code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  jdate = "17032"
  bdate = DATE("B",jdate,"J")
  SAY jdate "becomes" bdate
  sdate = DATE("S",bdate,"B")
  SAY bdate "becomes" sdate

  drc = 0
  IF (olddate = "") THEN DO
    olddate = DATE("S")
    SAY "Today is:"
    SAY "DATE()   " DATE()
    SAY "DATE('B')" DATE("B")
    SAY "DATE('C')" DATE("C")
    SAY "DATE('D')" DATE("D")
    SAY "DATE('E')" DATE("E")
    SAY "DATE('J')" DATE("J")
    SAY "DATE('M')" DATE("M")
    SAY "DATE('N')" DATE("N")
    SAY "DATE('O')" DATE("O")
    SAY "DATE('S')" DATE("S")
    SAY "DATE('U')" DATE("U")
    SAY "DATE('W')" DATE("W")
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  DO WHILE (drc = 0)
    SIGNAL ON ERROR
    SIGNAL ON FAILURE
    SIGNAL ON SYNTAX
    bdate = DATE('B', olddate, 'S')
    odate = DATE('O', olddate, 'S')
    ddate = DATE('D', olddate, 'S')
    edate = DATE('E', olddate, 'S')
    mdate = DATE('M', olddate, 'S')
    ndate = DATE('N', olddate, 'S')
    sdate = DATE('S', olddate, 'S')
    udate = DATE('U', olddate, 'S')
    wdate = DATE('W', olddate, 'S')
  /* Following dates would be for today if I used the DATE() function */
    jdate = LEFT(odate,2)RIGHT("000"ddate,3)
    PARSE VAR sdate 1 century +2,
                    1 year +4,
                    .
    century = century"00"
    cdate = DATE('B', olddate, 'S') - DATE('B', century||"0101", 'S')
    SIGNAL OFF SYNTAX
    SIGNAL OFF FAILURE
    SIGNAL OFF ERROR
    drc = RC
  END

  SAY COPIES("+",79)
  CALL Show_Date " "
  CALL Show_Date ""
  CALL Show_Date "B"
  CALL Show_Date "C"
  CALL Show_Date "D"
  CALL Show_Date "E"
  CALL Show_Date "J"
  CALL Show_Date "m"
  CALL Show_Date "n"
  CALL Show_Date "o"
  CALL Show_Date "S"
  CALL Show_Date "u"
  CALL Show_Date "w"
  SAY COPIES("+",79)
/*                                                           */
  CALL Show_Date '' , '19960527'   , 'S'
  CALL Show_Date 'B', '19960527'   , 'S'
  CALL Show_Date 'B', DATE("S")    , 'S'
  CALL Show_Date 'B', '27 May 1996', ''
  CALL Show_Date 'N', '35488'      , 'C'
  CALL Show_Date 'U', '96/05/27'   , 'O'
  CALL Show_Date 'U', '97059'      , 'J'
  SAY COPIES("+",79)
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This routine shows various formats the DATE() function supports.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Show_Date: PROCEDURE
  a1 = TRANSLATE(ARG(1))
  a2 = ARG(2)
  a3 = TRANSLATE(ARG(3))
  timestamp = ""
  fmt = "Show_Date failed"
  SIGNAL ON ERROR
  SIGNAL ON FAILURE
  SIGNAL ON SYNTAX
  SELECT
    WHEN (a1 = "B") THEN DO
      fmt = "Base -     days since 1 Jan 0001"
    END
    WHEN (a1 = "C") THEN DO
      fmt = "Century -  days since 1 Jan" LEFT(DATE("S"),2)"00"
    END
    WHEN (a1 = "D") THEN DO
      fmt = "Days -     days since 1 Jan" LEFT(DATE("S"),4)
    END
    WHEN (a1 = "E") THEN DO
      fmt = "European - dd/mm/yy"
    END
    WHEN (a1 = "J") THEN DO
      fmt = "Julian -   yyddd (really yr||daysinyear)"
    END
    WHEN (a1 = "M") THEN DO
      fmt = "Month -    name"
    END
    WHEN (a1 = "N") THEN DO
      fmt = "Normal -   dd mon yyy (the default)"
    END
    WHEN (a1 = " ") THEN DO
      a1 = "N"
      fmt = "Normal -   dd mon yyy (the default)"
    END
    WHEN (a1 = "O") THEN DO
      fmt = "Ordered -  yy/mm/dd"
    END
    WHEN (a1 = "S") THEN DO
      fmt = "Standard - yyyymmdd"
    END
    WHEN (a1 = "U") THEN DO
      fmt = "USA -      mm/dd/yy"
    END
    WHEN (a1 = "W") THEN DO
      fmt = "Weekday -  name"
    END
    OTHERWISE DO
      SAY "Please update" uc_exec_name "to handle" a1"."
      RETURN
    END
  END
  SELECT
    WHEN (a3 <> "") THEN DO
      timestamp = DATE(a1,a2,a3)
    END
    WHEN (a2 <> "") THEN DO
      timestamp = DATE(a1,a2)
    END
    OTHERWISE DO
      timestamp = DATE(a1)
    END
  END
  SAY LEFT("DATE("a1","a2","a3") =",23) LEFT(timestamp,11) LEFT(fmt,43)
  SIGNAL No_Error

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This routine is invoked if an error occurred.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Error:
  SIGNAL OFF ERROR
  SAY "An ERROR occurred at" SIGL
  SIGNAL No_Error

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This routine is invoked if an failure condition occurred.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Failure:
  SIGNAL OFF FAILURE
  SAY "An FAILURE occurred at" SIGL
  SIGNAL No_Error

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This routine is invoked if a SYNTAX problem occurred.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Syntax:
  SIGNAL OFF SYNTAX
  SAY "An SYNTAX occurred at" SIGL
  SIGNAL No_Error
  No_Error:
  SIGNAL OFF SYNTAX
  SIGNAL OFF FAILURE
  SIGNAL OFF ERROR
  RETURN

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
