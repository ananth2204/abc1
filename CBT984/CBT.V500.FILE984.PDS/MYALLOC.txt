/* We first need rexx in comment if compiled or read from SYSPROC. */
pgm_MYALLOC:
  rexxpgm_version = "01.01"          /* Set with 'ver 1' and 'lev 2'. */

addon:
  NUMERIC DIGITS 12
  "Profile prompt"
  max_rc = 0
  CALL Init_Routine
  IF (max_rc = 0) THEN DO
    CALL Main_Routine
  END
  CALL Exit_Routine
  EXIT max_rc

/*BEGINDATA

*
* COLUMN DESCRIPTIONS
*
*
* FIELD1=PRODUCT DESCRIPTOR - FOR REFERENCE ONLY
* FIELD2=SITE - NOT USED, MAY BE SYSPLEX NAME IN THE FUTURE
* FIELD3=LPAR - SAME AS SYSTEM ID FROM SMF
* FIELD4=LOGON PROCEDURE
* FIELD5=GROUP - ANY RACF GROUP OR ACF2 STRING
* FIELD6=USER - UNIQUE ID
* FIELD7=DDNAME
* FIELD8=DD SEQUENCE - N,R,F,B,-,A,L,O,S,D,X
*          N = NEW
*          R = (REPLACE?)
*          F = FIRST
*          B =
*          - = ANYWHERE
*          A = AFTER
*          L = LAST
*          O = ONLY
*          S = SYSOUT
*          D = DUMMY
*          X = EXCLUDE (OR FREE)
*          E = EXCept this data set
* FIELD9=DSNAME
* FIELD10=OPTIONAL COMMENT OR ALLOCATION PARAMETERS
*
*--------------------------------------------------------------------
* INSTALLATION SPECIFIC
*--------------------------------------------------------------------
*
*--------------------------------------------------------------------
* OPTIONAL USER
*--------------------------------------------------------------------
USER,*,*,*,*,*,SYSPROC,F,TSO.CLIST
USER,*,*,*,*,*,SYSEXEC,F,TSO.REXX
USER,*,*,*,*,*,ISPLLIB,F,LOADLIB
USER,*,*,*,*,*,TSOLIB,F,LOADLIB
USER,*,*,*,*,*,ISPMLIB,F,MSGS
USER,*,*,*,*,*,ISPPLIB,F,PANELS
USER,*,*,*,*,*,ISPSLIB,F,SKELS
USER,*,*,*,*,*,ISPTLIB,F,TABLES
*
*--------------------------------------------------------------------
* Kenneth Tomiak Demonstration Samples and Examples.
*--------------------------------------------------------------------
DEMO,*,*,*,*,*,SYSPROC,F,DEMO.CLIST
DEMO,*,*,*,*,*,SYSEXEC,F,DEMO.REXX
DEMO,*,*,*,*,*,ISPMLIB,F,DEMO.MSGS
DEMO,*,*,*,*,*,ISPPLIB,F,DEMO.PANELS
DEMO,*,*,*,*,*,ISPSLIB,F,DEMO.SKELS
*
*--------------------------------------------------------------------
* Unix System Services/Open Edition/OMVS/ISHELL
*--------------------------------------------------------------------
OMVS,*,*,*,*,*,SYSEXEC,-,'SYS1.SBPXEXEC'
OMVS,*,*,*,*,*,ISPMLIB,-,'SYS1.SBPXMENU'
OMVS,*,*,*,*,*,ISPPLIB,-,'SYS1.SBPXPENU'
OMVS,*,*,*,*,*,ISPTLIB,-,'SYS1.SBPXTENU'
*
*--------------------------------------------------------------------
* ISMF
*--------------------------------------------------------------------
ISMF,*,*,*,*,*,SYSEXEC,-,'SYS1.DGTCLIB'
ISMF,*,*,*,*,*,ISPLLIB,-,'SYS1.DGTLLIB'
ISMF,*,*,*,*,*,ISPMLIB,-,'SYS1.DGTMLIB'
ISMF,*,*,*,*,*,ISPPLIB,-,'SYS1.DGTPLIB'
ISMF,*,*,*,*,*,ISPSLIB,-,'SYS1.DGTSLIB'
ISMF,*,*,*,*,*,ISPTLIB,-,'SYS1.DGTTLIB'
*

ENDDATA*/

Init_Routine:
  CALL Where_Am_I_Stored
  CALL Who_Am_I
  CALL Set_Local_Vars
  CALL Get_Host_Data
  CALL Get_User_Data
  CALL Get_Current_Allocations
  CALL Get_Addon_DDs
  RETURN

Where_Am_I_Stored:
  PARSE VERSION rexx_version rexx_date
  PARSE SOURCE host_env call_type uc_exec_name,
    HOSTDD HOSTDSN,
    nf_exec_name initial_cmd_env asid_name,
    char8_user_token HOSTOTHER
  SAY ""
  SAY Copies("=",55)
  SAY left("=" uc_exec_name "executing under" host_env,
           "as a" call_type,53) "="
  SAY left("=  on" date() "at" time()".",53) "="
  SAY Copies("=",55)
  RETURN

WHO_AM_I:
  SYSUID = SYSVAR("SYSUID")
  RETURN

Set_Local_Vars:
/*--------------------------------------------------------------*/
/* VARIABLES USED BY PROGRAM                                    */
/*--------------------------------------------------------------*/
  LAST_DDNAME = ""
  DDS_TO_DO=""
  ADD_ENTRY=0
  SHOW_DATA="YES"
  PROCESS_DATA="NO"
  SIGL_RECORD=0
/*--------------------------------------------------------------*/
/* BUILD TABLE OF DESCRIPTIVE DAY                               */
/*--------------------------------------------------------------*/
  DAY.1 = "MONDAY"
  DAY.2 = "TUESDAY"
  DAY.3 = "WEDNESDAY"
  DAY.4 = "THURSDAY"
  DAY.5 = "FRIDAY"
  DAY.6 = "SATURDAY"
  DAY.7 = "SUNDAY"
/*--------------------------------------------------------------*/
/* CALCULATE GREGORIAN DAY OF WEEK                              */
/*--------------------------------------------------------------*/
  DY.1 = 0
  DY.2 = 31
  DY.3 = 28
  DY.4 = 31
  DY.5 = 30
  DY.6 = 31
  DY.7 = 30
  DY.8 = 31
  DY.9 = 31
  DY.10 = 30
  DY.11 = 31
  DY.12 = 30
  DY.13 = 31

  log = 0
  can = 0
  acc = 0
  prv = 0
  pwd = 0
  tso = 0
  sta = 0
  kix = 0
  res = 0
  RETURN

Get_Host_Data:
/*--------------------------------------------------------------*/
/* ADDRESSABILITY TO CVT FROM PSA                               */
/*--------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
/*--------------------------------------------------------------*/
/* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID               */
/*--------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  SAY ""
  SAY "YOU ARE LOGGED ON TO SYSTEM" SMFID'.'
  SAY ""
/*--------------------------------------------------------------*/
/* GET SYSPLEX NAME                                             */
/*--------------------------------------------------------------*/
  ECVTPTR  = STORAGE(D2X(C2D(CVTPTR)+140),4)
  ECVTSPLX = STORAGE(D2X(C2D(ECVTPTR)+8),8)
/*--------------------------------------------------------------*/
/* GET JOBNAME, STEP, AND PROCEDURE                             */
/*--------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                      /* POINTER TO TCB */
  PTRjscb  = STORAGE(D2X(C2D(PSATOLD)+180),4)   /* POINTER TO jscb */
  PTRssib  = STORAGE(D2X(C2D(Ptrjscb)+316),4)   /* POINTER TO ssib */
  jobtype  = STORAGE(D2X(C2D(Ptrssib)+12),3)    /* POINTER TO jt   */
  tasknum  = STORAGE(D2X(C2D(Ptrssib)+15),5)    /* POINTER TO jn   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)    /* POINTER TO TIOT */
  JOBNAME  = STRIP(STORAGE(D2X(C2D(PTRTIOT)),8),"B"," ")
  STEPNAME = STRIP(STORAGE(D2X(C2D(PTRTIOT)+8),8),"B"," ")
  PROCNAME = STRIP(STORAGE(D2X(C2D(PTRTIOT)+16),8),"B"," ")
  SAY left("=" jobtype||tasknum,53) "="
  RETURN

/*                                                              */
/* CHECK SECURITY PROGRAM                                       */
Get_User_Data:
  CVT   = c2d(Storage(10,4))               /* point to cvt         */
  CVTRAC = C2d(Storage(D2x(CVT + 992),4))  /* point to RACF CVT    */
  RCVTID = Storage(D2x(CVTRAC),4)          /* point to RCVTID      */
                                           /* RCVT, ACF2, or RTSS */
  IF (RCVTID = 'RCVT') THEN RCVTID = 'RACF'  /* RCVT is RACF */
  IF (RCVTID = 'RTSS') THEN RCVTID = 'Top Secret' /* Top Secret */
  select
    when (rcvtid = "RACF") THEN DO
      CALL CHECK_RACF
    END
    when (rcvtid = "ACF2") THEN DO
      CALL CHECK_ACF2
    END
    when (rcvtid = "RTSS") THEN DO
      CALL CHECK_TOP_SECRET
    END
    OTHERWISE DO
      SAY "Running without a security package?" rcvtid
    END
  END
  RETURN

/* hereken                                                      */
/* FIND OUT WHAT IS ALREADY ALLOCATED using LISTALC STATUS      */
Get_Current_Allocations:
  rc = Outtrap("ln.")                 /* open trap                  */
  "LISTALC STATUS"
  rc = Outtrap("OFF")                 /* close trap                 */
  dd_names = 0
  max_entry = 0
  do trapx = 2 to ln.0                  /* skip heading         */
    ln.trapx = space(ln.trapx)
    parse var ln.trapx tempname tempddnm
    select
      When (tempddnm <> " ") THEN DO
        parse var ln.trapx fullname tiotddnm
        dd_names = dd_names + 1       /* DDName index         */
        dd_name.dd_names = tiotddnm
        dd_nnbr.tiotddnm = dd_names
        dsname.dd_names.0 = 0
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
        max_entry = max_entry + 1
        dd_dsn.max_entry = "ALLOCATED,"tiotddnm",'"fullname"',-"
      END
      When ((left(ln.trapx,3) <> " ") &,
            (Words(ln.trapx) = 1)) THEN DO
        parse var ln.trapx fullname .
        trapx = trapx + 1
        ln.trapx = space(ln.trapx)
        parse var ln.trapx tempddnm " " final_disp " " .
        IF ((tempddnm <> " ") &,
            (final_disp <> " ")) THEN DO
          tiotddnm = tempddnm
          dd_names = dd_names + 1   /* DDName index         */
          dd_name.dd_names = tiotddnm
          dd_nnbr.tiotddnm = dd_names
          dsname.dd_names.0 = 0
        END
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
        max_entry = max_entry + 1
        dd_dsn.max_entry = "ALLOCATED,"tiotddnm",'"fullname"',-"
      END
      OTHERWISE Do
        SAY "*ERR*" ln.trapx
      END
    END
  END                                 /* trapx                      */
  RETURN

/* process list of ddnames between begindata and enddata.      */
Get_Addon_DDs:
  DO WHILE SHOW_DATA = "YES"
    SIGL_RECORD=SIGL_RECORD+1
    MY_DATA=SOURCELINE(SIGL_RECORD)
    IF MY_DATA="ENDDATA*/" THEN DO
      SHOW_DATA="NO"
      LEAVE
    END
    IF MY_DATA="/*BEGINDATA" THEN DO
      PROCESS_DATA="YES"
      ITERATE
    END
    IF PROCESS_DATA="YES" THEN DO
      CALL STORE_IN_ARRAY
    END
  END
  ALCARY.0=ADD_ENTRY

  DO I = 1 TO ALCARY.0
    FULL_TEXT = ALCARY.I
    PARSE UPPER VAR FULL_TEXT TEXT_PROD ',' TEXT_SITE ',',
      TEXT_LPAR ',' TEXT_proc ',' TEXT_GRP ',' TEXT_USR ',',
      TEXT_DDN ',' TEXT_SEQ ',' TEXT_DSN ',' O_FLDS
    TEXT_DSN = STRIP(TEXT_DSN,"B"," ")
    CALL CHECK_PRIVILEGES
  END
  RETURN

STORE_IN_ARRAY:
  IF LEFT(MY_DATA,1) = "" THEN RETURN
  IF LEFT(MY_DATA,1) = "*" THEN RETURN
  ADD_ENTRY = ADD_ENTRY + 1
  ALCARY.ADD_ENTRY = MY_DATA
  RETURN

CHECK_PRIVILEGES:
  ALLOWABLE = "YES"
  FAILED_BY="NO-ONE"
  IF ALLOWABLE = "YES" THEN DO
    CALL CHECK_SITE
  END
  IF ALLOWABLE = "YES" THEN DO
    CALL CHECK_LPAR
  END
  IF ALLOWABLE = "YES" THEN DO
    CALL CHECK_proc
  END
  IF ALLOWABLE = "YES" THEN DO
    CALL CHECK_GRP
  END
  IF ALLOWABLE = "YES" THEN DO
    CALL CHECK_USR
  END
  IF ALLOWABLE = "NO" THEN DO
    RETURN
    SAY TEXT_DDN"="TEXT_DSN "WAS FAILED BY" FAILED_BY"."
  END
  IF text_seq = "E" THEN DO
    call remove_entry
    RETURN
  END
  SEQUENCE_SET= "R" "F" "B" "-" "A" "L" "O"
  QUEST=POS(TEXT_SEQ,SEQUENCE_SET)
  IF QUEST > 0 THEN DO
    DSN_OK = SYSDSN(TEXT_DSN)
    IF DSN_OK <> "OK" THEN DO
      ALLOWABLE = "NO"
      FAILED_BY="NODSN"
      RETURN
    END
  END
  MAX_ENTRY=MAX_ENTRY+1
  DD_DSN.MAX_ENTRY = "ADDON,"TEXT_DDN","TEXT_DSN","TEXT_SEQ","O_FLDS
  DD_DSN.0=MAX_ENTRY
  INTERPRET "DD_CHG."TEXT_DDN '= "NEW"'
  IN_LIST=0
  DO QUIK = 1 TO WORDS(DDS_TO_DO)
    IF TEXT_DDN = WORD(DDS_TO_DO,QUIK) THEN IN_LIST=QUIK
  END
  IF IN_LIST > 0 THEN RETURN
  DDS_TO_DO = DDS_TO_DO TEXT_DDN
  RETURN

CHECK_RACF:
  MYRC = OUTTRAP("userid_info.")
  "LISTUSER"
  MYRC=OUTTRAP("OFF")
  IF userid_info.0 < 2 THEN RETURN
  SECURITY_NAME = ""
  SECURITY_GRP  = ""
  RGROUP = ""
  OWNR = ""
  PGMR = ""
  expdat = ""

/*----------------------------------------------------------------*/
/* LOOP THROUGH TRAPPED OUTPUT AND FIND THE GROUP= LINES.         */
/* DISPLAY EACH GROUP.                                            */
/*----------------------------------------------------------------*/
  DO I = 1 TO userid_info.0 BY 1
    LOC = INDEX(userid_info.I,'GROUP=')
    IF LOC > 0 THEN DO
      THISGRP = SUBSTR(userid_info.I,LOC+6,8)
      THERE = FIND(RGROUP,THISGRP)
      IF THERE = 0 THEN RGROUP = RGROUP THISGRP
    END
    LOC = INDEX(userid_info.I,' OWNER=')
    IF LOC > 0 THEN DO
      THISGRP = SUBSTR(userid_info.I,LOC+7,8)
      OWNR = THISGRP
      LOC = INDEX(userid_info.I,'NAME=')
      PGMR = SUBSTR(userid_info.I,LOC+5,20)
    END
    LOC = left(userid_info.I,13)
    IF (loc = ' REVOKE DATE=') THEN DO
      PARSE var userid_info.I text "=" expdat "RESUME DATE=" junk
    END
  END
  security_name = pgmr
  rgroup = strip(rgroup,"B"," ")
  RETURN

CHECK_ACF2:
  MYRC=OUTTRAP("userid_info.")
  QUEUE "L" SYSUID
  QUEUE "END"
  "ACF"
  MYRC=OUTTRAP("OFF")
  IF USERID_INF0.0 = 0 THEN RETURN
  SECURITY_ID=SUBSTR(userid_info.1,2,8)
  SECURITY_STRING=SUBSTR(userid_info.1,33,12)
  END_TEXT=LENGTH(userid_info.1)
  IF END_TEXT < 49 THEN DO
    SAY "TROUBLE USING ACF2 IN BATCH?"
    DO I = 1 TO userid_info.0
      SAY userid_info.I
    END
  END
  ELSE DO
    CALL PARSE_ACF2
  END
  RETURN

CHECK_top_secret:
  RETURN

CHECK_SITE:
  IF TEXT_SITE = "*" THEN RETURN
  IF TEXT_SITE = ECVTSPLX THEN RETURN
  ALLOWABLE = "NO"
  FAILED_BY="SITE"
  RETURN

CHECK_LPAR:
  IF TEXT_LPAR = "*" THEN RETURN
  IF TEXT_LPAR = SMFID THEN RETURN
  ALLOWABLE = "NO"
  FAILED_BY="LPAR"
  RETURN

CHECK_proc:
  IF TEXT_proc = "*" THEN RETURN
  IF TEXT_proc = STEPNAME THEN RETURN
  ALLOWABLE = "NO"
  FAILED_BY="PROC"
  RETURN

CHECK_GRP:
  IF TEXT_GRP = "*" THEN RETURN
  SELECT
    WHEN RCVTID = "ACF2" THEN CALL CHECK_GRP_ACF2
    WHEN RCVTID = "RACF" THEN CALL CHECK_GRP_RACF
    OTHERWISE NOP
  END
  RETURN

CHECK_GRP_ACF2:
  MAX_CHARS=LENGTH(TEXT_GRP)
  DO L = 1 TO MAX_CHARS
    TEXT_CHAR = SUBSTR(TEXT_GRP,L,1)
    IF TEXT_CHAR ="*" THEN ITERATE
    SECURITY_CHAR = SUBSTR(SECURITY_GRP,L,1)
    IF TEXT_CHAR <> SECURITY_CHAR THEN DO
      ALLOWABLE = "NO"
      FAILED_BY="GROUP"
      RETURN
    END
  END
  RETURN

CHECK_GRP_RACF:
  MAX_GRPS=WORDS(SECURITY_GRP)
  DO L = 1 TO MAX_GRPS
    SECURITY_WORD = WORD(SECURITY_GRP,L)
    IF TEXT_GRP = SECURITY_CHAR THEN RETURN
  END
  ALLOWABLE = "NO"
  FAILED_BY="GROUP"
  RETURN

CHECK_USR:
  IF TEXT_USR = "*" THEN RETURN
  MAX_USER=LENGTH(TEXT_USR)
  MAX_SAME=LEFT(SYSUID,MAX_USER)
  IF TEXT_USR = MAX_SAME THEN RETURN
  ALLOWABLE = "NO"
  FAILED_BY="USER"
  RETURN

remove_entry:
  do tryit = 1 to max_entry
    dd_dsn_entry = dd_dsn.tryit
    PARSE VAR DD_DSN_ENTRY STATE ',' DD ',',
      DSN ',' REL_OFFSET ',' O_FLDS
    DD=STRIP(DD,"B"," ")
    DSN=STRIP(DSN,"B"," ")
    IF dd = text_ddn THEN DO
      IF dsn = text_dsn THEN DO
        SAY "Exclusive removing" dsn
        dd_dsn.tryit = "*"
        leave
      END
    END
  END
  RETURN

Main_Routine:
  NUMBER_OF_DDS = WORDS(DDS_TO_DO)
  SEQUENCE_SET= "N" "S" "D"
  DO N = 1 TO NUMBER_OF_DDS
    THIS_DD = WORD(DDS_TO_DO,N)
    THIS_DSN = ""
    DO Q = 1 TO 3
      SQQ = WORD(SEQUENCE_SET,Q)
      ENTRIES_TO_DO = DD_DSN.0
      DO K = 1 TO ENTRIES_TO_DO
        DD_DSN_ENTRY = DD_DSN.K
        PARSE VAR DD_DSN_ENTRY STATE ',' DD ',',
          DSN ',' REL_OFFSET ',' O_FLDS
        DD=STRIP(DD,"B"," ")
        REL_OFFSET = STRIP(REL_OFFSET,"B"," ")
        IF DD = THIS_DD THEN DO
          IF REL_OFFSET = SQQ THEN DO
            DSN=STRIP(DSN,"B"," ")
            CALL DD_ALLOC
          END
        END
      END
    END
  END
  SEQUENCE_SET= "R" "F" "B" "-" "A" "L" "O"
  DO N = 1 TO NUMBER_OF_DDS
    THIS_DD = WORD(DDS_TO_DO,N)
    THIS_DSN = ""
    NEED_TO_REALLOC = "NO"
    DO Q = 1 TO 7
      SQQ = WORD(SEQUENCE_SET,Q)
      ENTRIES_TO_DO = DD_DSN.0
      DO K = 1 TO ENTRIES_TO_DO
        DD_DSN_ENTRY = DD_DSN.K
        PARSE VAR DD_DSN_ENTRY STATE ',' DD ',',
          DSN ',' REL_OFFSET ',' JUNK
        REL_OFFSET=STRIP(REL_OFFSET,"B"," ")
        IF DD = THIS_DD THEN DO
          IF REL_OFFSET = SQQ THEN DO
            DSN=STRIP(DSN,"B"," ")
            CALL DD_GROWTH
          END
        END
      END
      DO K = 1 TO ENTRIES_TO_DO
        DD_DSN_ENTRY = DD_DSN.K
        PARSE VAR DD_DSN_ENTRY STATE ',' DD ',',
          DSN ',' REL_OFFSET ',' JUNK
        REL_OFFSET = STRIP(REL_OFFSET,"B"," ")
        IF DD = THIS_DD THEN DO
           IF REL_OFFSET = "R" THEN DO
             DSN = STRIP(DSN,"B"," ")
             delpos = pos(dsn,this_dsn)
             dellen = length(dsn)
             IF delpos > 0 THEN DO
               SAY 'Removing' dsn
               this_dsn = delstr(this_dsn,delpos,dellen)
               NEED_TO_REALLOC = "YES"
             END
           END
        END
      END
    END
    IF NEED_TO_REALLOC = "YES" THEN DO
      IF THIS_DSN <> "" THEN DO
        CALL REALLOC_DD
      END
    END
  END
  SEQUENCE_SET= "X"
  DO N = 1 TO NUMBER_OF_DDS
    THIS_DD = WORD(DDS_TO_DO,N)
    THIS_DSN = ""
    SQQ = "X"
    ENTRIES_TO_DO=DD_DSN.0
    DO K = 1 TO ENTRIES_TO_DO
      DD_DSN_ENTRY = DD_DSN.K
      PARSE VAR DD_DSN_ENTRY STATE ',' DD ',',
        DSN ',' REL_OFFSET ',' O_FLDS
      REL_OFFSET = STRIP(REL_OFFSET,"B"," ")
      IF DD = THIS_DD THEN DO
        IF REL_OFFSET = SQQ THEN DO
          CALL EXCLUDE_DD
        END
      END
    END
  END
  RETURN

REALLOC_DD:
  QUEST=POS("?",THIS_DSN)
  IF QUEST > 0 THEN DO
    SAY "REALLOC_DD ERROR" THIS_DD THIS_DSN
    RETURN
  END
  MYRC=OUTTRAP("NO_INFO.")
  "FREE FILE("THIS_DD")"
  MYRC=OUTTRAP("OFF")
  "ALLOC FILE("THIS_DD") DA("THIS_DSN") SHR REUSE"
  SAY ""
  SAY THIS_DD":" THIS_DSN
  RETURN

EXCLUDE_DD:
  QUEST=POS("?",THIS_DSN)
  IF QUEST > 0 THEN DO
    SAY "REALLOC_DD ERROR" THIS_DD THIS_DSN
    RETURN
  END
  MYRC=OUTTRAP("NO_INFO.")
  "FREE FILE("THIS_DD")"
  MYRC=OUTTRAP("OFF")
  SAY ""
  SAY THIS_DD":" THIS_DSN
  RETURN

DD_ALLOC:
  QUEST=POS("?",DSN)
  IF QUEST > 0 THEN DO
    SAY "DD_ALLOC ERROR" THIS_DD DSN
    RETURN
  END
  SELECT
    WHEN REL_OFFSET = "S" THEN DO
      PARSE VAR O_FLDS S_CLASS "," S_RECFM ",",
        S_BLKSIZE "," S_LRECL "," S_JUNK
      IF S_CLASS = "" THEN S_CLASS = "T"
      IF S_RECFM = "" THEN S_RECFM = "VB"
      STRETCH_RECFM = LENGTH(S_RECFM)
      IF STRETCH_RECFM > 1  THEN DO
        TEMP_RECFM=""
        DO XY = 1 TO STRETCH_RECFM
          NXT_RECFM=SUBSTR(S_RECFM,XY,1)
          TEMP_RECFM=TEMP_RECFM NXT_RECFM
        END
        S_RECFM=STRIP(TEMP_RECFM,"B"," ")
      END
      IF S_BLKSIZE = ""  THEN S_BLKSIZE = 4096
      IF S_LRECL = ""  THEN S_LRECL = 137
      MYRC=OUTTRAP("NO_INFO.")
      "FREE FILE("THIS_DD")"
      MYRC=OUTTRAP("OFF")
      "ALLOC FILE("THIS_DD") SYSOUT("S_CLASS") REUSE",
        "RECFM("S_RECFM") BLKSIZE("S_BLKSIZE") LRECL("S_LRECL")"
      SAY THIS_DD": SYSOUT"
    END
    WHEN REL_OFFSET = "O" THEN DO
      MYRC=OUTTRAP("NO_INFO.")
      "FREE FILE("THIS_DD")"
      MYRC=OUTTRAP("OFF")
      "ALLOC FILE("THIS_DD") DA("DSN") SHR REUSE"
      SAY THIS_DD": ONLY" DSN
    END
    WHEN REL_OFFSET = "D" THEN DO
      MYRC=OUTTRAP("NO_INFO.")
      "FREE FILE("THIS_DD")"
      MYRC=OUTTRAP("OFF")
      "ALLOC FILE("THIS_DD") DUMMY"
      SAY THIS_DD": DUMMY"
    END
    WHEN REL_OFFSET = "N" THEN DO
      DSN_OK = SYSDSN(DSN)
      IF DSN_OK <> "OK" THEN DO
        PARSE VAR O_FLDS N_ORG "," N_TYPE "," N_PRI "," N_SEC ",",
          N_DIR "," N_RECFM ",",
          N_BLKSIZE "," N_LRECL "," N_UNIT "," N_DISP "," N_JUNK
        IF N_ORG = "" THEN DO
          N_ORG = "PS"
          IF N_DIR <> "" THEN N_ORD = "PO"
        END
        IF N_RECFM = "" THEN N_RECFM = "VB"
        IF N_DISP = 'CATLG' THEN N_DISP = "CATALOG"
        IF N_DISP = 'DEL' THEN N_DISP = "DELETE"
        ALC_FIELDS = "TRACKS"
        IF N_TYPE = "C" THEN ALC_FIELDS = "CYLINDERS"
        ALC_FIELDS = ALC_FIELDS "SPACE("N_PRI N_SEC")"
        IF N_DIR <> "" THEN DO
          ALC_FIELDS = ALC_FIELDS "DIR("N_DIR")"
        END
        STRETCH_RECFM = LENGTH(N_RECFM)
        IF STRETCH_RECFM > 1  THEN DO
          TEMP_RECFM=""
          DO XY = 1 TO STRETCH_RECFM
            NXT_RECFM=SUBSTR(N_RECFM,XY,1)
            TEMP_RECFM=TEMP_RECFM NXT_RECFM
          END
          N_RECFM=STRIP(TEMP_RECFM,"B"," ")
        END
        ALC_FIELDS = ALC_FIELDS "RECFM("N_RECFM")"
        IF N_UNIT <> "" THEN DO
          ALC_FIELDS = ALC_FIELDS "UNIT("N_UNIT")"
        END
        IF N_BLKSIZE <> "" THEN DO
          ALC_FIELDS = ALC_FIELDS "BLKSIZE("N_BLKSIZE")"
        END
        IF N_LRECL <> "" THEN DO
          ALC_FIELDS = ALC_FIELDS "LRECL("N_LRECL")"
        END
        ALC_FIELDS = ALC_FIELDS "NEW" N_DISP
        ALC_FIELDS = ALC_FIELDS "DSORG("N_ORG")"
        MYRC=OUTTRAP("NO_INFO.")
        "FREE FILE("THIS_DD")"
        MYRC=OUTTRAP("OFF")
        "ALLOC FILE("THIS_DD") DA("DSN")",
          ALC_FIELDS
        SAY THIS_DD": NEW" DSN
      END
      ELSE DO
        MYRC=OUTTRAP("NO_INFO.")
        "FREE FILE("THIS_DD")"
        MYRC=OUTTRAP("OFF")
        "ALLOC FILE("THIS_DD") DA("DSN") SHR REUSE"
        SAY THIS_DD": (NEW BUT IT EXISTS SO SHR)" DSN
      END
    END
    OTHERWISE DO
      NOP
    END
  END
  RETURN

REBUNDLE_ARRAY:
  DO I = 2 TO ALLOC_INFO.0
    ALLOC_TEXT = ALLOC_INFO.I
    PARSE VAR ALLOC_TEXT CURRENT_DSNAME ' ' CURRENT_DDNAME
     IF CURRENT_DDNAME = "" THEN DO
       CURRENT_DDNAME = LAST_DDNAME
       J=I+1
       NEXT_DDNAME = STRIP(SUBSTR(ALLOC_INFO.J,3,8),"B"," ")
       IF NEXT_DDNAME <> "" THEN DO
         CURRENT_DDNAME = NEXT_DDNAME
         INTERPRET "DD_CHG."CURRENT_DDNAME '= "ORIGINAL"'
         INTERPRET "IF_CHG = DD_CHG."CURRENT_DDNAME
       END
      I=J
    END
    MAX_ENTRY=MAX_ENTRY+1
    CURRENT_DSNAME=STRIP(CURRENT_DSNAME,"B"," ")
    DD_DSN.MAX_ENTRY = "ALLOCATED,"CURRENT_DDNAME",'"||,
      CURRENT_DSNAME"',-"
    LAST_DDNAME = CURRENT_DDNAME
  END
  DD_DSN.0=MAX_ENTRY
  RETURN

DD_GROWTH:
  HOW_MANY = WORDS(THIS_DSN)
  LEFT_DSN=LEFT(DSN,1)
  IF (LEFT_DSN <> "'") THEN DO
    DSN="'"SYSUID"."DSN"'"
  END
  IF (HOW_MANY > 0) THEN DO
    DO O = 1 TO HOW_MANY
      NEXT_WORD=STRIP(WORD(THIS_DSN,O),"B"," ")
      IF (DSN = NEXT_WORD) THEN RETURN
    END
  END
  QUEST=POS("?",DSN)
  IF QUEST > 0 THEN DO
    RETURN
  END
  INTERPRET "IF_CHG = DD_CHG."DD
  IF (IF_CHG = "NEW") THEN DO
    NEED_TO_REALLOC = "YES"
  END
  SELECT
    WHEN REL_OFFSET = "O" THEN THIS_DSN = DSN
    WHEN REL_OFFSET = "R" THEN THIS_DSN = DSN
    WHEN REL_OFFSET = "F" THEN THIS_DSN = DSN THIS_DSN
    OTHERWISE THIS_DSN = THIS_DSN DSN
  END
  RETURN

PARSE_ACF2:
  expdat = ""
  ACF2_TYPE = "LISTUSER"
  ACF2_SUBTYPE = "LOGONID"
  IF debug = "Yes" THEN DO
    TABLINES = COPIES('....+',14)
    SAY "  " TABLINES
  END
  DO I = 1 TO userid_info.0
    IF debug = "Yes" THE DO
      SAY right("00"i,2) userid_info.I
    END
    END_data=LENGTH(userid_info.i)
    END_TEXT = END_data - 22
    user_info = right(userid_info.i,end_text)
    left20 = Strip(left(userid_info.i,20),"B"," ")
    Select
      when left20 = sysuid THEN call acf2_logonid
      when left20 = "CANCEL/SUSPEND" THEN call acf2_cancel
      when left20 = "PRIVILEGES"     THEN call acf2_priv
      when left20 = "ACCESS"         THEN call acf2_access
      when left20 = "PASSWORD"       THEN call acf2_pswd
      when left20 = "TSO"            THEN call acf2_tso
      when left20 = "STATISTICS"     THEN call acf2_stats
      when left20 = "CICS"           THEN call acf2_cics
      when left20 = "RESTRICTIONS"   THEN call acf2_restrict
      when left20 <> "" THEN DO
        SAY "Help me here-"
        SAY right("00"i,2) userid_info.I
      END
      when acf2_subtype = "LOGONID" THEN call acf2_logonid
      when acf2_subtype = "CANCEL" THEN call acf2_cancel
      when acf2_subtype = "PRIVILEGES" THEN call acf2_priv
      when acf2_subtype = "ACCESS"   THEN call acf2_access
      when acf2_subtype = "PASSWORD" THEN call acf2_pswd
      when acf2_subtype = "TSO"      THEN call acf2_tso
      when acf2_subtype = "STATISTICS" THEN call acf2_stats
      when acf2_subtype = "CICS"     THEN call acf2_cics
      when acf2_subtype = "RESTRICTIONS" THEN call acf2_restrict
      OTHERWISE,
        Do
          SAY "I'm lost with this-"
          SAY right("00"i,2) userid_info.I
        END
    END
  END
  RETURN

acf2_logonid:
  ACF2_SUBTYPE = "LOGONID"
  parse var user_info a_lid " " a_namestring
  security_name = a_namestring
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    log = log + 1
    a_log.log = one_opt
    a_log.0 = log
    IF debug = "Yes" THEN DO
     SAY log '-' one_opt
    END
  END
  RETURN

acf2_cancel:
  ACF2_SUBTYPE = "CANCEL"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    can = can + 1
    a_can.can = one_opt
    a_can.0 = can
    IF debug = "Yes" THEN DO
     SAY can '-' one_opt
   END
  END
  RETURN

acf2_priv:
  ACF2_SUBTYPE = "PRIVILEGES"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    prv = prv + 1
    a_prv.prv = one_opt
    a_prv.0 = prv
    IF debug = "Yes" THEN DO
      SAY prv '-' one_opt
    END
    IF left(one_opt,6) = "EXPIRE" THEN DO
      EXPDAT = SUBSTR(one_opt,8,8)
    END
  END
  RETURN

acf2_access:
  ACF2_SUBTYPE = "ACCESS"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    acc = acc + 1
    a_acc.acc = one_opt
    a_acc.0 = acc
    IF debug = "Yes" THEN DO
      SAY acc '-' one_opt
    END
  END
  RETURN

acf2_pswd:
  ACF2_SUBTYPE = "PASSWORD"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    pwd = pwd + 1
    a_pwd.pwd = one_opt
    a_pwd.0 = pwd
    IF debug = "Yes" THEN DO
      SAY pwd '-' one_opt
    END
  END
  RETURN

acf2_tso:
  ACF2_SUBTYPE = "TSO"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    tso = tso + 1
    a_tso.tso = one_opt
    a_tso.0 = tso
    IF debug = "Yes" THEN DO
      SAY tso '-' one_opt
    END
  END
  RETURN

acf2_stats:
  ACF2_SUBTYPE = "STATISTICS"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    sta = sta + 1
    a_sta.sta = one_opt
    a_sta.0 = sta
    IF debug = "Yes" THEN DO
      SAY sta '-' one_opt
    END
  END
  RETURN

acf2_cics:
  ACF2_SUBTYPE = "CICS"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    kix = kix + 1
    a_kix.kix = one_opt
    a_kix.0 = kix
    IF debug = "Yes" THEN DO
      SAY kix '-' one_opt
    END
  END
  RETURN

acf2_restrict:
  ACF2_SUBTYPE = "RESTRICTIONS"
  Do while user_info <> ""
    parse var user_info one_opt " " user_info
    IF one_opt = " " THEN iterate
    res = res + 1
    a_res.res = one_opt
    a_res.0 = res
    IF debug = "Yes" THEN DO
      SAY res '-' one_opt
    END
  END
  RETURN

Exit_Routine:
  SAY SECURITY_NAME 'may expire after date:' EXPDAT'.'
  RETURN

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  REXX(MYALLOC)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: THIS REXX PROGRAM DETERMINES WHAT DATA SETS WERE ALREADY
           ALLOCATED USING LISTALC STATUS and THEN merges in the data
           sets named in begindata.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180111 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Replaced SWAREQ routine to find allocated data set
                  names with parsing of LISTALC STATUS output.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so IF you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

