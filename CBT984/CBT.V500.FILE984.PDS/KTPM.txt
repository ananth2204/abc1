/* rexx */
Rexx_KTPM:
  rexxpgm_version = "01.10"           /* ver lev */

  PARSE ARG all_my_arguments
  NUMERIC DIGITS 12

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

  Dataset:  KTPM.REXX(KTPM)
  Contact: "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Kenneth Tomiak Programming Method (KTPM) collection.
            This is an ISPF dialog driver program. It will display a
            panel and process requests until the user exits.

            A ktpmnstration sample of using PDC and PNT in a panel.
            This REXX program supports displaying a primary panel and
            handling the various ways a user can choose a feature to
            be used.
  Syntax:   %ktpm

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.10 20180630 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Kenneth Tomiak Programming Method (KTPM) collection.
----- -------- --------------------------------------------------------
01.09 20180623 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Removed SAY from option CF.
----- -------- --------------------------------------------------------
01.08 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180425    Programming Using The Kenneth Tomiak Method.
               2) Updated Ctlblk_Jobspecs.
               3) Added/converted Setmsg_Global_Disclaimer
                  to SETMSG.
               4) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               5) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.07 20180417 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Removed unnecessary VPUT of ZERR variables.
----- -------- --------------------------------------------------------
01.06 20180412 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added panel option KT for the GENIE sub-panel.
----- -------- --------------------------------------------------------
01.05 20170808 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Applied my new normal first comment that states why
                  it even exists. TSO/E does not need REXX on the first
                  record when found under the //SYSEXEC or ALTLIB EXEC
                  methods.
               2) Removed LIBDEF ISPPLIB.
----- -------- --------------------------------------------------------
01.04 20170807 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Shifted the logic to ensure ISPF is active as the
                  first check.
               2) Removed makebuf/dropbuf.
               3) Moved *_letters to routines.
               4) Modified ZERRLM for as yet unsupported menu options.
----- -------- --------------------------------------------------------
01.03 20170806 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) 15 will run %ktpmdeep.
----- -------- --------------------------------------------------------
01.02 20170323 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added handling a few more choices.
                 a) ZORK is an 'Easter egg'.
                 b) 10 will run the BIORYTHM code.
               2) KTPMVER and KTPMAUTH set for the Menu bar Help About
                  panel.
----- -------- --------------------------------------------------------
01.01 20170320 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Changed panel name.
               2) Moved code to handle the outcome of displaying the
                  panel to the Process_Routine routine.
----- -------- --------------------------------------------------------
01.00 20170315 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Put the onus on the user if anything should go wrong.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Setmsg_Global_Disclaimer:
  ZERRHM = "KTPMTUTR"
  ZERRALRM = "Yes"
  ZERRSM = ""
  ZERRLM = ZERRLM ,
    LEFT("STANDARD GLOBAL DISCLAIMER",76)
  ZERRLM = ZERRLM ,
    LEFT("==========================",76)
  ZERRLM = ZERRLM ,
    "The author explicitly disavows any claim whatsoever about"
  ZERRLM = ZERRLM ,
    "the correctness or functionality of this program, and"
  ZERRLM = ZERRLM ,
    "disclaims liability for anything and everything bad that"
  ZERRLM = ZERRLM ,
    "might happen in connection with, before, during, or after"
  ZERRLM = ZERRLM ,
    "using it. I have tried to make it work right, and I am"
  ZERRLM = ZERRLM ,
    "personally pretty confident that it does, but everybody"
  ZERRLM = ZERRLM ,
    "makes mistakes, so if you use it, you do so at your own"
  ZERRLM = ZERRLM ,
    "risk."
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  sysvar_sysispf = SYSVAR("SYSISPF")
  IF (sysvar_sysispf <> "ACTIVE") THEN DO
    SAY "You first need to start ISPF and then you can execute" ,
      "this KTPM tool."
    RETURN 16
  END
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_syspref = SYSVAR("SYSPREF")
  function_rc = Ctlblk_Jobspecs()
  function_rc = Rexx_Saf()
  function_rc = Rexx_Hardware()
  function_rc = Rexx_Server_Info()
  function_rc = Rexx_Termid()

  ZERRHM = "KTPMTUTR"
  ZERRALRM = "Yes"
  ZERRSM = ""
  ZERRLM = ""

  function_rc = Setmsg_Global_Disclaimer()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
 Display a PANEL and act upon the user's choices.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  KTPMVER = rexxpgm_version
  KTPMAUTH = "Kenneth E. Tomiak"
  display_rc = 0
  DO WHILE (display_rc = 0)
    msg_rc = 0
    ADDRESS ISPEXEC "DISPLAY PANEL(KTPMPRIM)"
    display_rc = RC
    IF (display_rc = 8) THEN DO
      ZERRSM = "Okay."
      ZERRLM = "You pressed END (PF3) to leave."
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      LEAVE
    END
    PARSE VAR ZCMD my_zcmd "." ZTRAIL
    ADDRESS ISPEXEC "VPUT (ZTRAIL)"
    SELECT
      WHEN (display_rc = 4) THEN DO
        SAY "return_code = 4"
        ZERRSM = "RC=4"
        ZERRLM = "A minor issue displaying KTPMPRIM."
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      WHEN (display_rc > 0) THEN DO
        SAY "return_code > 0"
        SAY "DEBUGGING NEEDED ON KTPMPRIM"
        return_code = 32
      END
      WHEN (my_ZCMD = 0) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISPISM) SCRNAME(SETTINGS)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISPISM) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 1) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISRBRO) PARM(ISRBRO01) SCRNAME(VIEW)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISPISM) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 2) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISREDIT) PARM(P,ISREDM01) SCRNAME(EDIT)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISREDIT) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 3) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PANEL(ISRUTIL) SCRNAME(UTIL) OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PANEL(ISRUTIL) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 4) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PANEL(ISRFPA) SCRNAME(FOREGRND) OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PANEL(ISRFPA) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 5) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISRJB1) PARM(ISRJPA) SCRNAME(BATCH) NOCHECK" ,
          "OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISRJB1) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 6) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISRPTC) SCRNAME(CMD)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISRPTC) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 7) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISPYXDR) PARM(&ZTAPPLID) SCRNAME(DTEST) NOCHECK" ,
          "OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISPYXDR) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 8) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PANEL(ISRLPRIM) SCRNAME(LMF)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PANEL(ISRLPRIM) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 9) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PANEL(ISRDIIS) ADDPOP OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PANEL(ISRDIIS) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 10) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISRSCLM) SCRNAME(SCLM) NOCHECK OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISRSCLM) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = 11) THEN DO
        ADDRESS ISPEXEC ,
          "SELECT PGM(ISRUDA) PARM(ISRWORK) SCRNAME(WORK)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISRUDA) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (TRANSLATE(my_ZCMD) = "BI") THEN DO
        function_rc = BIORYTHM()  /* An external REXX routine */
      END
      WHEN (TRANSLATE(my_ZCMD) = "CF") THEN DO
        ADDRESS TSO "ISPCCONF"
      END
      WHEN (TRANSLATE(my_ZCMD) = "DC") THEN DO
        function_rc = KTPMCNSL()  /* An external REXX routine */
      END
      WHEN (TRANSLATE(WORD(my_ZCMD,1)) = "KTPMPDCR") THEN DO
        choice = WORD(my_ZCMD,2)
        function_rc = Ktpmpdcr_Choice_Selector()
      END
      WHEN (TRANSLATE(my_ZCMD) = "DD") THEN DO
        function_rc = KTPMDEEP()  /* An external REXX routine */
      END
      WHEN (TRANSLATE(my_ZCMD) = "DT") THEN DO
        function_rc = KTPMTBL1()  /* An external REXX routine */
      END
      WHEN (TRANSLATE(my_ZCMD) = "KT") THEN DO
        ADDRESS ISPEXEC "SELECT PANEL(KTGENIE)"
      END
      WHEN (TRANSLATE(my_ZCMD) = "R") THEN DO
        ADDRESS ISPEXEC
          "SELECT PANEL(ICHP00) OPT("ZTRAIL")"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PANEL(ICHP00) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (TRANSLATE(my_ZCMD) = "SD") THEN DO
        ADDRESS ISPEXEC
          "SELECT PGM(ISFISP) NOCHECK NEWAPPL(ISF) SCRNAME(SDSF)"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          ZERRSM = "ISPEXEC FAILURE"
          ZERRLM = "Invoking PGM(ISFISP) failed, RC("function_rc")"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
      END
      WHEN (my_ZCMD = "") THEN DO
        ZERRSM = "Huh?"
        ZERRLM = "You pressed enter without selecting an option."
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      WHEN (To_Uppercase(my_ZCMD) = "X") THEN DO
        ZERRSM = "Okay"
        ZERRLM = "You used X to leave."
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        return_code = -1
      END
      WHEN (To_Uppercase(my_ZCMD) = "ZORK") THEN DO
        SAY "zcmd=ZORK"
        function_rc = Zork_Easter_Egg()
      END
      OTHERWISE DO
        ZERRSM = "Try again"
        ZERRLM = my_zcmd ,
          "is not yet something KTPM handles at this time."
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END  /* END of OTHERWISE */
    END  /* END of SELECT  */
    ZCMD = ""
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  IF (return_code > 0) THEN DO
    IF (msg_rc = 1) THEN DO
      IF (ZERRSM = "") THEN DO
        ZERRSM = "An unhappy ending"
        ZERRLM = "Some unhappy turn of events is sending back",
          "a RETURN code higher than 0 with no message."
      END
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what RACF groups they are in.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Saf:
  psaold   = STORAGE(D2X(548),4)             /* Pointer to curr ASCB */
  ascbasxb = STORAGE(D2X(C2D(psaold)+108),4)     /* Get ASXB ADDRESS */
  asxbsenv = STORAGE(D2X(C2D(ascbasxb)+200),4)   /* Get ACEE ADDRESS */
  aceefcgp = STORAGE(D2X(C2D(asxbsenv)+116),4)     /* get group list */
  cgrplen  = C2D(STORAGE(D2X(C2D(aceefcgp)+5),3))     /* list length */
  cgrp     = STORAGE(D2X(C2D(aceefcgp)+32),(cgrplen-32))   /* groups */
  saf_groups   = ""
  DO loop = 1 TO cgrplen BY 24                   /* loop thru groups */
    saf_groups = saf_groups";"STRIP(SUBSTR(cgrp,loop,8))   /* append */
  END                                        /* END loop thru groups */
  RETURN 0
  SAY "List-of-Groups="saf_groups

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what machine they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Hardware:
  ptr2psa  = 0                                     /* Pointer to PSA */
  cvtptr   = STORAGE(D2X(ptr2psa + 16),4)          /* Pointer to cvt */
  cvt      = BITAND(cvtptr,"7FFFFFFF"X)       /* Flip high order bit */
  csdptr   = STORAGE(D2X(C2D(cvt)+X2D("294")),4)   /* Pointer to CSD */
  CSD      = BITAND(csdptr,"7FFFFFFF"X)       /* Flip high order bit */
  hardware_CPUENG = C2D(STORAGE(D2X(C2D(CSD)+10),2))
  pccaavt  = STORAGE(D2X(C2D(cvt)+X2D("2FC")),4)
  pccaavt  = BITAND(pccaavt,"7FFFFFFF"X)
  DO I = 0 TO 60 BY 4
    pcca = STORAGE(D2X(C2D(pccaavt)+I),4)
    pcca = BITAND(pcca,"7FFFFFFF"X)
    IF (pcca == "00000000"X) THEN DO
      ITERATE I
    END
    INFO = STORAGE(C2X(pcca),32)
    hardware_CPUID   = SUBSTR(INFO,7,1)
    hardware_CPUSN   = SUBSTR(INFO,8,5)
    hardware_CPUTYPE = SUBSTR(INFO,13,4)
  END
  RETURN 0
  SAY "Hardware="hardware_CPUENG
  SAY "        ="hardware_CPUID
  SAY "        ="hardware_CPUSN
  SAY "        ="hardware_CPUTYPE

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what server (host) they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Server_Info:
  ptr2psa  = 0                                     /* Pointer to PSA */
  cvtptr   = STORAGE(D2X(ptr2psa + 16),4)          /* Pointer to cvt */
  ecvtptr  = STORAGE(D2X(C2D(cvtptr)+140),4)      /* Pointer to ecvt */
  server_ecvtsplx = STORAGE(D2X(C2D(ecvtptr)+8),8)    /* SYSPLEXNAME */
  cvtsmca  = STORAGE(D2X(C2D(cvtptr)+197),3)      /* Pointer to SMCA */
  server_smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)   /* SMF Identifier */
  mvsvar_sysname = MVSVAR("SYSNAME")
  IF (server_smfid <> mvsvar_sysname) THEN DO
    SAY "Tricky Having Your System Name Different Than The SMF ID."
  END
  RETURN 0
  SAY "Server="server_ecvtsplx
  SAY "      ="server_smfid
  SAY "      ="mvsvar_sysname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what terminal they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Termid:
  ascbptr  = STORAGE(224,4)
  asxbptr  = STORAGE(D2X(C2D(ascbptr)+X2D('6c')),4)
  termptr  = STORAGE(D2X(C2D(asxbptr)+X2D('c8')),4)
  asxb_termid = STORAGE(D2X(C2D(termptr)+40),8)
  the_termid = C2X(asxb_termid)
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 KTPMPDCR is used to handle the PDC menu bar choices by parm.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ktpmpdcr_Choice_Selector:
  SELECT
    WHEN (choice = "OPEN") THEN DO
      ktpmpdcr_rc = Ktpmpdc1_Choice_Processor()
    END
    WHEN (choice = "PRINT") THEN DO
      ktpmpdcr_rc = Ktpmpdc2_Choice_Processor()
    END
    WHEN (choice = "OPTIONS") THEN DO
      ktpmpdcr_rc = Ktpmpdc3_Choice_Processor()
    END
    WHEN (choice = "SUPPORT") THEN DO
      ktpmpdcr_rc = Ktpmpdc4_Choice_Processor()
    END
    OTHERWISE DO
      ZERRSM = "HOW?"
      ZERRLM = "Did you reach here?"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 KTPMPDC1 is used to handle the PDC menu bar choice: File-Open.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ktpmpdc1_Choice_Processor:
  ADDRESS ISPEXEC "DISPLAY PANEL(KTPMPDC1)"
  popup_rc = RC
  IF (ABBREV("CANCEL",ZCMD,1) = 1) THEN DO
    RETURN 0
  END
  IF (LEFT(PDC1NAME,1) <> "'") THEN DO
    IF (sysvar_syspref <> "") THEN DO
      viewname = "'"sysvar_syspref"."PDC1NAME"'"
    END
    ELSE DO
      viewname = "'"PDC1NAME"'"
    END
  END
  sysdsn_rc = SYSDSN(viewname)
  IF (sysdsn_rc = "OK") THEN DO
    ADDRESS ISPEXEC "View DATASET("viewname")"
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 KTPMPDC2 is used to handle the PDC menu bar choice: File-Print.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ktpmpdc2_Choice_Processor:
  ADDRESS ISPEXEC "DISPLAY PANEL(KTPMPDC2)"
  popup_rc = RC
  IF (ABBREV("CANCEL",ZCMD,1) = 1) THEN DO
    RETURN 0
  END
  ZERRSM = "Sorry."
  ZERRLM = LEFT("There is no print support at this time.",79)
  ZERRLM = ZERRLM || LEFT("You will have to find another" ,
    "way to print:",79)
  ZERRLM = ZERRLM || LEFT(PDC2NAME,79)
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 KTPMPDC3 is used to handle the PDC menu bar choice: Tools-Options.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ktpmpdc3_Choice_Processor:
  v1 = sysvar_syspref
  v2 = "Purple"
  v3 = "FORD"
  v4 = 4
  v5 = 1
  v6 = 0
  v7 = "09:00-17:00"
  v8 = "Lumber"
  v9 = "midway"
  v10 = "$275"
  v11 = " 11 "
  v12 = "No"
  v13 = "On"
  v14 = "?"
  v15 = "Some"
  v16 = "Never"
  v17 = "Nope"
  V18 = "This could never fit on a simple 80 column wide terminal" ,
    "display since a single attribute byte reduces it to 79 characters"
  V19 = "This could never fit on a simple 80 column wide terminal" ,
    "display since a single attribute byte reduces it to 79 characters"
  DO vx = 1 TO 19
    INTERPRET "ov"vx "= v"vx
  END
  ADDRESS ISPEXEC "DISPLAY PANEL(KTPMINPT)"
  DO vx = 1 TO 19
    if_1 = "If (ov"vx "<> v"vx") Then SAY 'Changed v'"vx ,
      "'from' ov"vx "'to' v"vx"'.'"
    INTERPRET if_1
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 KTPMPDC4 is used to handle the PDC menu bar choice: Help-Support.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ktpmpdc4_Choice_Processor:
  ADDRESS ISPEXEC "DISPLAY PANEL(KTPMWEBV)"
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This is an 'Easter Egg', something not shown so it is a HIDDEN choice.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Zork_Easter_Egg:
  SAY ""
  SAY "Clear your screen and press ENTER for an important message."
  SAY ""
  PULL nothing_wanted
  SAY ""
  SAY "Zork is set in 'the ruins of an ancient empire lying far"
  SAY "underground'. The player is a nameless adventurer 'who is"
  SAY "venturing into this dangerous land in search of wealth"
  SAY "and adventure'. The goal is to return from exploring the"
  SAY "'Great Underground Empire' (GUE, for short) alive and with"
  SAY "all treasures needed to complete each adventure,"
  SAY "ultimately inheriting the title of Dungeon Master. The"
  SAY "dungeons are stocked with many novel creatures, objects,"
  SAY "and locations, among them the ferocious but light-fearing"
  SAY "grues, zorkmids (the GUE's currency), and Flood Control"
  SAY "Dam #3."
  SAY ""
  SAY ""
  SAY "This Easter Egg was brought to you by Kenneth Tomiak."
  SAY "To learn more about the ZORK games visit:"
  SAY "  https://en.wikipedia.org/wiki/Zork"
  SAY ""
  SAY ""
  SAY "An Easter egg is an intentional inside joke, a hidden"
  SAY "message, or a secret feature of an interactive work"
  SAY "(often, a computer program, video game or other work)."
  SAY ""
  SAY ""
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
