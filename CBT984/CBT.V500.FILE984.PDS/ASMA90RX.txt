/* rexx */
Rexx_ASMA90RX:
  rexxpgm_version = "01.01"           /* ver lev */

  PARSE ARG tsoprmvl
  NUMERIC DIGITS 16 /* Handles Petabyte for following control blocks */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset: KTPM.REXX(ASMA90RX)
 Contact: KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
 Purpose: ...
 Syntax:  %ASMA90RX |output_dd_name|
          output_dd_name: where to write the generated REXX code.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest date at the top.)
----- -------- --------------------------------------------------------
01.01 20180709 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
               1) Ignore EQU if it references '*'.
               2) Deleted the inclusion os starter SMF rcoord
                  processing code.
----- -------- --------------------------------------------------------
01.00 20180708 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
         -     1) Original base code from a concept previously
      20180706    created and not found in my archive.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

Use at your own risk
--------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but mistakes
happen.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0

  job_specs = Retrieve_Job_Step_Info()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)

  PARSE UPPER VAR tsoprmvl output_dd_name .

  rexxcode. = ""
  rexxcode.0 = 0

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  ADDRESS MVS "EXECIO * DISKR ASMA90 (STEM asma90. FINIS)"
  SAY ""
  SAY asma90.0 "record(s)."

  dsect_on = 0
  offset_prior = ""
  dsect_prior = ""
  DO a_x = 1 TO asma90.0
    PARSE VAR asma90.a_x ,
       =2 symbol_offset +6 ,
       =9 symbol_value ,
      =42 symbol_current " " .
    IF (LEFT(symbol_current,1) = "*") THEN DO
      ITERATE
    END
    IF (LEFT(symbol_current,1) = " ") THEN DO
      PARSE VAR asma90.a_x ,
        =43 symbol_instr ,
            symbol_operands ,
            symbol_comment ,
        =112 .
    END
    ELSE DO
      PARSE VAR asma90.a_x ,
        =42 . symbol_instr ,
            symbol_operands ,
            symbol_comment ,
        =112 .
    END
    symbol_current = STRIP(symbol_current,"B"," ")
    symbol_instr = STRIP(symbol_instr,"B"," ")
    PARSE VAR symbol_operands symbol_operands "'" .
    symbol_operands = STRIP(symbol_operands,"B"," ")
    symbol_comment = STRIP(symbol_comment,"B","'")
    symbol_comment = SPACE(symbol_comment,1)
    symbol_comment = STRIP(symbol_comment,"B"," ")
    SELECT
      WHEN (POS("Page",asma90.a_x) = 113) THEN DO
        a_x = a_x + 2
        ITERATE
      END
      WHEN (symbol_instr == "CSECT") THEN DO
        dsect_on = 0
        offset_prior = ""
        ITERATE
      END
      WHEN (symbol_offset == "000000") & ,
           (symbol_instr == "DSECT") THEN DO
        IF (dsect_prior <> "") THEN DO
          function_rc = ,
            Add_To_Rexxcode(" ")
          function_rc = ,
            Add_To_Rexxcode("  RETURN return_code")
        END
        dsect_on = 1
        unnamed_ctr = 0
        dsect_current = STRIP(symbol_current,"T"," ")
        dsect_prior = dsect_current
        function_rc = ,
          Add_To_Rexxcode(" ")
        function_rc = ,
          Add_To_Rexxcode("/*" COPIES("<",68))
        function_rc = ,
          Add_To_Rexxcode(" Parse the DSECT named:" dsect_current".")
        function_rc = ,
          Add_To_Rexxcode(COPIES(">",68) "*/")
        function_rc = ,
          Add_To_Rexxcode(dsect_current || "_Parse_Routine:")
        offset_prior = ""
      END
      WHEN (dsect_on = 0) THEN DO
        ITERATE
      END
      OTHERWISE DO
        IF (symbol_current = "") THEN DO
          unnamed_ctr = unnamed_ctr + 1
          symbol_current = dsect_current || "_unnamed_" || unnamed_ctr
        END
        SELECT
          WHEN (symbol_instr = "DC") | ,
               (symbol_instr = "DS") THEN DO
            uo_rc = Unravel_Operands()
            IF (op_len = 0) THEN DO
              function_rc = ,
                Add_To_Rexxcode(" ")
              function_rc = ,
                Add_To_Rexxcode("  /*" symbol_current "length=0 */")
            END
            ELSE DO
              function_rc = ,
                Add_To_Rexxcode(" ")
              IF (symbol_comment <> "") THEN DO
                right_align = 40 - LENGTH(symbol_comment)
                IF (right_align > 0) THEN DO
                  display_comment = COPIES(" ",right_align) || ,
                      "/*" symbol_comment "*/"
                END
                ELSE DO
                  display_comment = "/*" ,
                    LEFT(symbol_comment,40) "*/"
                END
              END
              ELSE DO
                display_comment = ""
              END
              parse_offset = X2D(symbol_offset) + 1
              function_rc = ,
                Add_To_Rexxcode("  var_offset = section_offset" ,
                  "+" parse_offset "      /*" symbol_offset "*/")
              function_rc = ,
                Add_To_Rexxcode("  PARSE VAR smf_record ," ,
                  display_comment)
              function_rc = ,
                Add_To_Rexxcode("    =(var_offset)" ,
                  symbol_current "+"op_len ".")
            END
            symbol_prior = symbol_current
          END
          WHEN (symbol_instr = "EQU") THEN DO
            PARSE VAR asma90.a_x ,
              =42 . "EQU" symbol_initial .
            IF (POS("*",symbol_initial) > 0) THEN DO
              ITERATE
            END
            IF (symbol_comment <> "") THEN DO
              right_align = 65 - LENGTH(symbol_comment)
              display_comment = COPIES(" ",right_align) || ,
                  "/*" symbol_comment "*/"
              function_rc = ,
                Add_To_Rexxcode(display_comment)
            END
            function_rc = ,
              Add_To_Rexxcode(" " symbol_current "=" ,
                "BITAND("symbol_prior","symbol_initial")")
          END
          WHEN (symbol_instr = "ORG") THEN DO
            NOP
          END
          OTHERWISE DO
            NOP
          END
        END
      END
    END
  END
  function_rc = ,
    Add_To_Rexxcode(" ")
  function_rc = ,
    Add_To_Rexxcode("  RETURN return_code")

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  IF (rexxcode.0 = 0) THEN DO
    SAY "Something went horribly wrong."
  END
  ELSE DO
    ADDRESS MVS "EXECIO" rexxcode.0 "DISKW" ,
      output_dd_name "(STEM rexxcode. FINIS)"
    diskw_rc = RC
  END
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("= RC=" return_code,77) "="
  SAY COPIES("=",79)
  SAY ""

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Retrieve_Job_Step_Info:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Add to the rexxcode stem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Add_To_Rexxcode:
  tmp = rexxcode.0 + 1
  rexxcode.tmp = ARG(1)
  rexxcode.0 = tmp
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Decipher the DS operand to extrapolate the length of the field.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Unravel_Operands:
  PARSE VAR symbol_operands symbol_operands "'" .
  SELECT
    WHEN (POS("BL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "BL" op_len " " .
      IF (op_len = "") THEN op_len = 1
      op_len = op_len * 1
    END
    WHEN (POS("B",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "B" op_err
      op_len = 1
    END
    WHEN (POS("CL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "CL" op_len " " .
      IF (op_len = "") THEN op_len = 1
      op_len = op_len * 1
    END
    WHEN (POS("C",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "C" op_err
      op_len = 1
    END
    WHEN (POS("DL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "DL" op_len " " .
      IF (op_len = "") THEN op_len = 1
      op_len = op_len * 1
    END
    WHEN (POS("D",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "D" op_err
      op_len = 8
    END
    WHEN (POS("FL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "FL" op_len " " .
      IF (op_len = "") THEN op_len = 1
      op_len = op_len * 4
    END
    WHEN (POS("F",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "F" op_err
      op_len = 4
    END
    WHEN (POS("HL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "HL" op_len  " " .
      IF (op_len = "") THEN op_len = 1
      op_len = op_len * 2
    END
    WHEN (POS("H",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "H" op_err
      op_len = 2
    END
    WHEN (POS("PL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "PL" op_len " " .
      IF (op_len = "") THEN op_len = 1
    END
    WHEN (POS("P",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "P" op_err
      op_len = 4
    END
    WHEN (POS("XL",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "XL" op_len " " .
      IF (op_len = "") THEN op_len = 1
      op_len = op_len * 1
    END
    WHEN (POS("X",symbol_operands) > 0) THEN DO
      PARSE VAR symbol_operands op_dupl "X" op_err
      op_len = 1
    END
    OTHERWISE DO
      op_dupl = 0
      op_len = 0
      op_err = 0
    END
  END
  RETURN tmp_len
  say "nm:"symbol_current "in:"symbol_instr ,
    "op:"symbol_operands "ln:"op_len

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
