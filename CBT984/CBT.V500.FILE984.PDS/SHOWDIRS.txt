/* rexx */
Rexx_SHOWDIRS:
  rexxpgm_version = "01.05"           /* ver lev */

  NUMERIC DIGITS 10   /* Handles Gigabyte */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset: DEMO.REXX(SHOWDIRS)
 Contact: "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Purpose: Read the PDS directory blocks and show each one.
 Book:    dgt3d410.pdf: SC23-6855-00
          z/OS DFSMS Using Data Sets
 Book:    iea3b210.pdf: SA23-1392-00
          z/OS MVS Program Management: Advanced Facilities
 Macro:   SYS1.MODGEN(IHAPDS)

 Syntax:  %SHOWDIRS

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.05 20180602 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Fixed Over_Under().
----- -------- --------------------------------------------------------
01.04 20180601 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Swapped Over_Under for Char_To_Char.
               2) Tweaked ISPF extended statistics, added flag x'20'.
                  Merged Decode_Ispf_Ext_Stats into Decode_Ispf_Stats.
               3) Streamlined rpt. logic.
               4) Working on loadlib stats rpt. format.
----- -------- --------------------------------------------------------
01.03 20180531 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Add code to handle userdata length = 62 Alchemist.
                  Decode_Alchemist_Stats()
               2) Add code to handle userdata length = 40 ISPF Ext.
                  Decode_Ispf_Ext_Stats()
               3) Mention Endevor and PDSMAN also extend the userdata.
               4) Add Convert_Yyddd_To_Yyyymmdd
----- -------- --------------------------------------------------------
01.02 20180528 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Hopefully finished the documented loadlib info.
----- -------- --------------------------------------------------------
01.01 20180527 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using Edit Macro @KTPM:
                  Kenneth Tomiak Programming Method (KTPM).
----- -------- --------------------------------------------------------
01.00 20180527 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Put the onus on the user if anything should go wrong.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Say_Global_Disclaimer:
  SAY ""
  SAY "STANDARD GLOBAL DISCLAIMER"
  SAY "=========================="
  SAY "The author explicitly disavows any claim whatsoever about"
  SAY "the correctness or functionality of this program, and"
  SAY "disclaims liability for anything and everything bad that"
  SAY "might happen in connection with, before, during, or after"
  SAY "using it. I have tried to make it work right, and I am"
  SAY "personally pretty confident that it does, but everybody"
  SAY "makes mistakes, so if you use it, you do so at your own"
  SAY "risk."
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE SOURCE ,
    source_host_env ,
    source_call_type ,
    source_uc_exec_name ,
    source_hostdd ,
    source_hostdsn ,
    source_nf_exec_name ,
    source_initial_cmd_env ,
    source_asid_name ,
    source_char8_user_token ,
    source_hostother

  job_specs = Ctlblk_Jobspecs()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  function_rc = Say_Global_Disclaimer()
  SAY ""

  allcblk = Retrieve_Allocations()
  function_rc = Parse_Allcblk()

  my_ddname = "SHOWDIRS"
  found_dd = tiotddnm.my_ddname
  IF (found_dd = "") THEN DO
    SAY "//SHOWDIRS is not included in the STEP's JCL."
    return_code = 16
    RETURN return_code
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  found_dsns = dd_dsname.my_ddname.0
  DO ds_x = 1 TO found_dsns
    PARSE VAR dd_dsname.my_ddname.ds_x just_dsn "(" just_mbr ")"
    aposted_dsn = "'"just_dsn"'"
    listdsi_rc = LISTDSI(aposted_dsn)
    IF (listdsi_rc <> 0) THEN DO
      SAY "LISTDSI() failed, RC("listdsi_rc")."
      return_code = 64
      RETURN return_code
    END
    SAY RIGHT(ds_x,4,"0") "DSN="aposted_dsn
    "EXECIO * DISKR SHOWDIRS (STEM dir_record. FINIS)"
    diskr_rc = RC
    IF (diskr_rc = 0) THEN DO
      SAY dir_record.0 "directory blocks allocated."
      DO dir_x = 1 TO dir_record.0
        tmp_dir = dir_record.dir_x
        SAY ""
        SAY "Directory block #:" dir_x
        SAY "===================" || COPIES("=",LENGTH(dir_record.0))
        IF (SYSRECFM = "U") THEN DO
          SAY "MEMBER   Type    TTR    TTRT   00 TTRN  " ,
            "NL ATR  V-Stor FTBL  EPA    FTB0 F3"
          SAY "-------- ------- ------ ------ -- ------" ,
            "-- ---- ------ ----- ------ ---- --"
        END
        ELSE DO
          SAY "MEMBER   Type    TTR    VV.MM CRDATE   MODDATE  MODTIME " ,
            " Init   Chg   Mod Userid   SCLM  " ,
            "  Ext-init    Ext-chg    Ext-mod"
          SAY "-------- ------- ------ ----- -------- -------- --------" ,
            "----- ----- ----- -------- ------" ,
            "---------- ---------- ----------"
        END
        PARSE VAR tmp_dir blk_length 3 tmp_dir
        tmp_dir = SUBSTR(tmp_dir,1,(C2D(blk_length) - 2))
        DO WHILE (tmp_dir <> "")
          PARSE VAR tmp_dir ,
            mbr_name ,
            =9 ttr ,
            =12 userdata_content ,
            =13 tmp_dir
          IF (mbr_name = 'FFFFFFFFFFFFFFFF'x) THEN DO
            SAY ""
            space_left = 254 - C2D(blk_length)
            SAY "Space left in directory:" space_left
            blocks_left = dir_record.0 - dir_x
            SAY "Unused directory blocks:" blocks_left
            LEAVE dir_x
          END
          hex_ttr = C2X(ttr)
          userdata_length = C2D(BITAND(userdata_content,'1F'x)) * 2
          IF (BITAND(userdata_content,'80'x) = '80'x) THEN DO
            mbr_type = "Alias :"
          END
          ELSE DO
            mbr_type = "Member:"
          END
          rpt. = ""
          rpt.0 = 1
          tmp = 1
          rpt.tmp = mbr_name mbr_type hex_ttr
          SELECT
            WHEN (SYSRECFM = "U") THEN DO
              function_rc = ,
                Decode_Loadlib_Stats(SUBSTR(tmp_dir,1,userdata_length))
            END
            WHEN (userdata_length = 0) THEN DO
              rpt.tmp = rpt.tmp "(no userdata)"
            END
            WHEN ((userdata_length = 30) | ,
                  (userdata_length = 40)) THEN DO
              function_rc = ,
                Decode_Ispf_Stats(SUBSTR(tmp_dir,1,userdata_length))
            END
            WHEN (userdata_length = 62) THEN DO
              function_rc = ,
                Decode_Alchemist_Stats(SUBSTR(tmp_dir,1,userdata_length))
            END
            OTHERWISE DO
              rpt.tmp = rpt.tmp ,
                "Unexpected userdata LENGTH("userdata_length")."
              cdwidth = userdata_length
              ouwidth = userdata_length
              copy_count = TRUNC(userdata_length / 10) + 1
              col_title = "Offset :" ,
                LEFT(COPIES("----+----|",copy_count),userdata_length)
              tmp_offset = 1
              function_rc = ,
                Over_Under(SUBSTR(tmp_dir,1,userdata_length))
            END
          END
          DO rpt_x = 1 TO rpt.0
            SAY rpt.rpt_x
          END
          tmp_dir = DELSTR(tmp_dir,1,userdata_length)
        END
        SAY ""
        space_left = 254 - C2D(blk_length)
        SAY "Space left in directory:" space_left
      END
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("= RC=" return_code,77) "="
  SAY COPIES("=",79)
  SAY ""
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control tmp_dirs to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Chase control tmp_dirs and build a STEM of DDnames and DSnames.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Retrieve_Allocations:
  psatold = STORAGE(21C,4)                       /* POINTER TO TCB  */
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)     /* POINTER TO TIOT */
  tiotptr = D2C(C2D(ptr2tiot)+24)                /* TIOT pointer    */
  tiotelen = C2D(STORAGE(D2X(C2D(tiotptr)+0),1))
  dd_names = 0
  DO WHILE (tiotelen > 0)
    tiotflag = C2D(STORAGE(D2X(C2D(tiotptr)+1),1))
    tiotddnm = SPACE(STORAGE(D2X(C2D(tiotptr)+4),8))
    IF (BITAND(tiotflag,'80'X) = '80'X) THEN DO /* active ddname    */
      IF (tiotddnm = COPIES("00"x,8)) THEN DO
        LEAVE
      END
      IF (tiotddnm <> "      ") THEN DO
        dd_name = STRIP(tiotddnm,"B"," ")
        dd_names = dd_names + 1
        dd_name.dd_names = dd_name
        dd_nnbr.tiotddnm = dd_names
        dsname.dd_names.0 = 0
      END
      tioejfcb = STORAGE(D2X(C2D(tiotptr)+12),3)
      jfcb = Swareq22(tioejfcb)
      IF (jfcb > 0) THEN DO
        jfcbdsn = STRIP(STORAGE(D2X(jfcb+000),44),"B"," ")
        jfcbelnm = STRIP(STORAGE(D2X(jfcb+044),8),"B"," ")
        IF (jfcbelnm <> "") THEN DO
          fullname = jfcbdsn"("jfcbelnm")"
        END
        ELSE DO
          fullname = jfcbdsn
        END
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
      END
      ELSE DO
        SAY "Oh my gosh, SWAREQ and BATCH do not mix."
        LEAVE
      END
    END
    tiotptr = D2C(C2D(tiotptr)+tiotelen)
    tiotelen = C2D(STORAGE(D2X(C2D(tiotptr)+0),1))
  END
  RETURN dd_names

/* --------------------------------------------------------------------
   Handle SWA above or below the bar.
   Fix from Don Poitras to adjust to z/OS 2.2 putting
   a control tmp_dir above the 64-bit bar.

     https://groups.google.com/forum/#!
     msg/bit.listserv.ibm-main/E-fMschhS2M/Na4x_Vc9BgAJ

     Comes out of
     http://www.cbttape.org/ftp/cbt/CBT183.zip

-------------------------------------------------------------------- */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert an ADDRESS in SWA format to usable location
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Swareq22: PROCEDURE
  NUMERIC DIGITS 16                   /* Handles Petabyte addressing */
  sva = C2D(ARG(1))                         /* convert to decimal   */
  tcb = C2D(STORAGE(21C,4))                 /* TCB         psatold  */
  jscb = C2D(STORAGE(D2X(tcb+180),4))       /* JSCB        TCBJSCB  */
  qmpl = C2D(STORAGE(D2X(jscb+244),4))      /* QMPL        JSCBQMPI */
  /* See if qmat can be above the bar */
  qmsta = C2X(STORAGE(D2X(qmpl+16),1))     /* JOB STATUS BYTE      */
  IF (SUBSTR(Hex_To_Bit(qmsta),6,1)) THEN DO /* QMQMAT64 bit on    */
    IF (RIGHT(Hex_To_Bit(C2X(ARG(1))),1) <> "1") THEN DO /* BELOW   */
      RETURN C2D(ARG(1)) + 16             /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+10),2))*(2**48) +, /* QMAT+0 QMADD01 */
         C2D(STORAGE(D2X(qmpl+18),2))*(2**32) + ,  /* QMAT+2 QMADD23 */
         C2D(STORAGE(D2X(qmpl+24),4))              /* QMAT+4 QMADD */
    RETURN C2D(STORAGE(D2X(qmat+(sva*12)+64),4))+16
  END
  ELSE DO /* NO, QMAT IS BTB      */
    IF (RIGHT(C2X(ARG(1)),1) <> "F") THEN DO /* SWA=BELOW ?           */
      RETURN C2D(ARG(1))+16                 /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+24),4))     /* QMAT        QMADD    */
    DO WHILE (sva > 65536)
      qmat = C2D(STORAGE(D2X(qmat+12),4))   /* next QMAT   QMAT+12  */
      sva = sva - 65536                     /* 010006F -> 000006F   */
    END
    RETURN C2D(STORAGE(D2X(qmat+sva+1),4))+16
  END
  RETURN "ERROR, SHOULD NOT REACH HERE!"

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert a hexadecimal VALUE to its bitstring value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Hex_To_Bit:
  IF (bits.F <> "1111") THEN DO
    bits.0="0000"; bits.1="0001"; bits.2="0010"; bits.3="0011"
    bits.4="0100"; bits.5="0101"; bits.6="0110"; bits.7="0111"
    bits.8="1000"; bits.9="1001"; bits.A="1010"; bits.B="1011"
    bits.C="1100"; bits.D="1101"; bits.E="1110"; bits.F="1111"
  END
  hexchr = ARG(1)
  bit_str = ''
  DO ix = 1 TO LENGTH(hexchr)
    str = SUBSTR(hexchr,ix,1)
    bit_str = bit_str||bits.str
  END
  RETURN bit_str

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Parse the stream of ddname information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/* #dds;dd#;ddname;#dsn;dsn#;dsname;...                              */
Parse_Allcblk:
  allofit = allcblk
  tiotddnm. = ""
  tiotddnm.0 = DD#
  erc = dd_names
  DO dd# = 1 TO dd_names
    dn = dd_name.dd#
    tiotddnm.dn = dd#
    nd = dsname.dd#.0
    erc = erc";"dd#";"dn";"nd
    dd_dsname.dn.0 = nd
    DO ds# = 1 TO nd
      dd_dsname.dn.ds# = dsname.dd#.ds#
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Decode the loadlib statistics.
 Book:    iea3b210.pdf: SA23-1392-00
          z/OS MVS Program Management: Advanced Facilities
 Macro:   SYS1.MODGEN(IHAPDS)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Decode_Loadlib_Stats:
  direntry = ARG(1)
  tmp = rpt.0

/* START-OF-BASIC-SECTION */
  pds2ttrt = C2X(SUBSTR(direntry,1,3))
  pds2zero = C2X(SUBSTR(direntry,4,1))
  pds2ttrn = C2X(SUBSTR(direntry,5,3))
  pds2nl = C2D(SUBSTR(direntry,8,1))
  pds2atr = C2X(SUBSTR(direntry,9,2))
  pds2atr1 = SUBSTR(direntry,9,1)
  pds2rent = BITAND(pds2atr1,'80'x)
  pds2reus = BITAND(pds2atr1,'40'x)
  pds2ovly = BITAND(pds2atr1,'20'x)
  pds2test = BITAND(pds2atr1,'10'x)
  pds2load = BITAND(pds2atr1,'08'x)
  pds2sctr = BITAND(pds2atr1,'04'x)
  pds2exec = BITAND(pds2atr1,'02'x)
  pds21blk = BITAND(pds2atr1,'01'x)
  pds2atr2 = SUBSTR(direntry,10,1)
  pds2flvl = BITAND(pds2atr2,'80'x)
  pds2org0 = BITAND(pds2atr2,'40'x)
  pds2ep0 = BITAND(pds2atr2,'20'x)
  pds2nrld = BITAND(pds2atr2,'10'x)
  pds2nrep = BITAND(pds2atr2,'08'x)
  pds2tstn = BITAND(pds2atr2,'04'x)
  pds2lef = BITAND(pds2atr2,'02'x)
  pds2refr = BITAND(pds2atr2,'01'x)
  pds2stor = C2X(SUBSTR(direntry,11,3))
  pds2ftbl = C2D(C2X(SUBSTR(direntry,14,2)))
  pds2epa = C2X(SUBSTR(direntry,16,3))
  pds2ftb0 = C2X(SUBSTR(direntry,19,2))
  pds2ftb1 = SUBSTR(direntry,19,1)
  pdsaosle = BITAND(pds2ftb1,'80'x)
  pds2big = BITAND(pds2ftb1,'40'x)
  pds2paga = BITAND(pds2ftb1,'20'x)
  pds2ssi = BITAND(pds2ftb1,'10'x)
  pdsapflg = BITAND(pds2ftb1,'08'x)
  pds2lfmt = BITAND(pds2ftb1,'04'x)
  pds2sign = BITAND(pds2ftb1,'02'x)
  pds2xatr = BITAND(pds2ftb1,'01'x)
  pds2ftb2 = SUBSTR(direntry,20,1)
  pds2altp = BITAND(pds2ftb2,'80'x)
  pdslrmod = BITAND(pds2ftb2,'10'x)
  pdsaamod = BITAND(pds2ftb2,'0C'x)
  pdsmamod = BITAND(pds2ftb2,'03'x)
  /* The next two fields use the same offset. */
  pds2rlds = C2D(SUBSTR(direntry,21,1))
  pds2ftb3 = SUBSTR(direntry,21,1)
  pds2nmig = BITAND(pds2ftb3,'80'x)
  pds2prim = BITAND(pds2ftb3,'40'x)
  pds2pack = BITAND(pds2ftb3,'20'x)

  rpt.tmp = rpt.tmp pds2ttrt
  rpt.tmp = rpt.tmp pds2zero
  rpt.tmp = rpt.tmp pds2ttrn
  rpt.tmp = rpt.tmp RIGHT(pds2nl,2,"0")
  rpt.tmp = rpt.tmp pds2atr
  rpt.tmp = rpt.tmp pds2stor
  rpt.tmp = rpt.tmp RIGHT(pds2ftbl,5,"0")
  rpt.tmp = rpt.tmp pds2epa
  rpt.tmp = rpt.tmp pds2ftb0
  rpt.tmp = rpt.tmp LEFT(C2X(pds2ftb3),4)

  tmp = rpt.0 + 1
  rpt.0 = tmp
  rpt.tmp = rpt.tmp COPIES(" ",15) "BASIC: PDS2ATR1:"
  IF (pds2rent = '80'x) THEN DO
    rpt.tmp = rpt.tmp "0=RENT"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "0=NOT-RENT"
  END
  IF (pds2reus = '40'x) THEN DO
    rpt.tmp = rpt.tmp "1=REUS"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "1=NOT-REUS"
  END
  IF (pds2ovly = '20'x) THEN DO
    rpt.tmp = rpt.tmp "2=OVLY"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "2=NOT-OVLY"
  END
  IF (pds2test = '10'x) THEN DO
    rpt.tmp = rpt.tmp "3=TEST"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "3=NOT-TEST"
  END
  IF (pds2load = '08'x) THEN DO
    rpt.tmp = rpt.tmp "4=ONLY LOAD"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "4=NOT-OL"
  END
  IF (pds2sctr = '04'x) THEN DO
    rpt.tmp = rpt.tmp "5=SCATTER"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "5=BLOCK"
  END
  IF (pds2exec = '02'x) THEN DO
    rpt.tmp = rpt.tmp "6=EXEC"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "6=NOT-EXEC"
  END
  IF (pds21blk = '01'x) THEN DO
    rpt.tmp = rpt.tmp "7=1-TXT"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "7=MULTI-RCD"
  END

  tmp = rpt.0 + 1
  rpt.0 = tmp
  rpt.tmp = rpt.tmp COPIES(" ",22) "PDS2ATR2:" C2X(pds2atr2)
  IF (pds2flvl = '80'x) THEN DO
    rpt.tmp = rpt.tmp "8=NOT-DC"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "8=DC?"
  END
  IF (pds2org0 = '40'x) THEN DO
    rpt.tmp = rpt.tmp "9=ZERO-ORG"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "9=ORG>ZERO"
  END
  IF (pds2ep0 = '20'x) THEN DO
    rpt.tmp = rpt.tmp "10=EP-ZERO"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "10=EP?ZERO"
  END
  IF (pds2nrld = '10'x) THEN DO
    rpt.tmp = rpt.tmp "11=NO RLD"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "11=RLD"
  END
  IF (pds2nrep = '08'x) THEN DO
    rpt.tmp = rpt.tmp "12=NOT-EDIT"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "12=EDIT"
  END
  IF (pds2tstn = '04'x) THEN DO
    rpt.tmp = rpt.tmp "13=SYMBOL"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "13=NO-SYMS"
  END
  IF (pds2lef = '02'x) THEN DO
    rpt.tmp = rpt.tmp "14=F-LEVEL"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "14=Not-F"
  END
  IF (pds2refr = '01'x) THEN DO
    rpt.tmp = rpt.tmp "15=REFR"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "15=NOT-REFR"
  END
  tmp = rpt.0 + 1
  rpt.0 = tmp
  rpt.tmp = rpt.tmp COPIES(" ",22) "PDS2FTB1:" C2X(pds2ftb1)
  IF (pdsaosle = '80'x) THEN DO
    rpt.tmp = rpt.tmp "16=AOS Linkage"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "16=Not AOS"
  END
  IF (pds2big = '40'x) THEN DO
    rpt.tmp = rpt.tmp "17=LPO"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "17=<16M"
  END
  IF (pds2paga = '20'x) THEN DO
    rpt.tmp = rpt.tmp "18=PAGE Aligned"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "18=NOT-PL"
  END
  IF (pds2ssi = '10'x) THEN DO
    rpt.tmp = rpt.tmp "19=SSI"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "19=NO-SSI"
  END
  IF (pdsapflg = '08'x) THEN DO
    rpt.tmp = rpt.tmp "20=APF"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "20=NO-APF"
  END
  IF (pds2lfmt = '04'x) THEN DO
    rpt.tmp = rpt.tmp "21=PGM OBJ"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "21=NOT-PO"
  END
  IF (pds2sign = '02'x) THEN DO
    rpt.tmp = rpt.tmp "22=SIGNED"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "2=NOT-SIGN"
  END
  IF (pds2xatr = '01'x) THEN DO
    rpt.tmp = rpt.tmp "23=XATR Exists"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "23=No XATR"
  END
  tmp = rpt.0 + 1
  rpt.0 = tmp
  rpt.tmp = rpt.tmp COPIES(" ",22) "PDS2FTB2:" C2X(pds2ftb2)
  IF (pds2altp = '80'x) THEN DO
    rpt.tmp = rpt.tmp "24=ALTP"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "24=NOT-ALTP"
  END
  IF (pdslrmod = '10'x) THEN DO
    rpt.tmp = rpt.tmp "26=NORMODE64"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "26=rmode=24"
  END
  IF (pdsaamod = '00'x) THEN DO
    rpt.tmp = rpt.tmp "ENTPT AMODE(24)"
  END
  IF (pdsaamod = '01'x) THEN DO
    rpt.tmp = rpt.tmp "ENTPT AMODE(64)"
  END
  IF (pdsaamod = '08'x) THEN DO
    rpt.tmp = rpt.tmp "ENTPT AMODE(31)"
  END
  IF (pdsaamod = '0C'x) THEN DO
    rpt.tmp = rpt.tmp "ENTPT AMODE(ANY)"
  END
  IF (pdsmamod = '00'x) THEN DO
    rpt.tmp = rpt.tmp "MAIN AMODE(24)"
  END
  IF (pdsmamod = '01'x) THEN DO
    rpt.tmp2 = rpt.tmp2 "MAIN AMODE(64)"
  END
  IF (pdsmamod = '02'x) THEN DO
    rpt.tmp = rpt.tmp "MAIN AMODE(31)"
  END
  IF (pdsmamod = '03'x) THEN DO
    rpt.tmp = rpt.tmp "MAIN AMODE(ANY)"
  END

  tmp = rpt.0 + 1
  rpt.0 = tmp
  rpt.tmp = rpt.tmp COPIES(" ",22) "PDS2FTB3:" ,
    C2X(pds2ftb3) "RLDS:" pds2rlds
  rpt.tmp = rpt.tmp "PGO flag #3"
  IF (pds2nmig = '80'x) THEN DO
    rpt.tmp = rpt.tmp "32=NON-MIGR"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "32=MIGR"
  END
  IF (pds2prim = '40'x) THEN DO
    rpt.tmp = rpt.tmp "33=PRIME"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "33=NO-PRIME"
  END
  IF (pds2pack = '20'x) THEN DO
    rpt.tmp = rpt.tmp "34=PACK"
  END
  ELSE DO
    rpt.tmp = rpt.tmp "34=NO-PACK"
  END
  /* END-OF-BASIC-SECTION                                            */

  user_opt_loc = 22

  /* START-OF-SCATTER-LOAD-SECTION OPTIONAL                          */
  IF (pds2sctr = '01'x) THEN DO
    pds2slsz = C2D(SUBSTR(direntry,user_opt_loc,2))
    user_opt_loc = user_opl_loc + 2
    pds2ttsz = C2D(SUBSTR(direntry,user_opt_loc,2))
    user_opt_loc = user_opl_loc + 2
    pds2esdt = SUBSTR(direntry,user_opt_loc,2)
    user_opt_loc = user_opl_loc + 2
    pds2esdc = SUBSTR(direntry,user_opt_loc,2)
    user_opt_loc = user_opl_loc + 2

    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp COPIES(" ",15) "SCTTR:"
    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp COPIES(" ",22)
    rpt.tmp = rpt.tmp "List size("pds2slsz")"
    rpt.tmp = rpt.tmp "XLAT size("pds2ttsz")"
    rpt.tmp = rpt.tmp "1st Block ESDID("pds2esdt")"
    rpt.tmp = rpt.tmp "ENTPT Scatter ESDID("pds2esdt")"
  END
  /* END-OF-SCATTER-LOAD-SECTION                                     */

  /* START-OF-ALIAS-SECTION                                          */
  IF (mbr_type = "Alias :") THEN DO
    pds2epm = C2X(SUBSTR(direntry,user_opt_loc,3))
    user_opt_loc = user_opt_loc + 3
    pds2mnm = SUBSTR(direntry,user_opt_loc,8)
    user_opt_loc = user_opt_loc + 8

    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp COPIES(" ",15) "ALIAS:"
    rpt.tmp = rpt.tmp "Member ENTPT("pds2epm")"
    rpt.tmp = rpt.tmp "of" pds2mnm
  END
  /* END-OF-ALIAS-SECTION                                            */

  /* START-OF-SSI-SECTION                                            */
  IF (pds2ssi = '10'x) THEN DO
    user_opt = user_opt_loc // 2
    IF (user_opt = 0) THEN DO
      user_opt_loc = user_opt_loc + 1
    END
  /* The next two fields use the same offset. */
    pdsssiwd = C2X(SUBSTR(direntry,user_opt_loc,4))
    pdschlvl = C2X(SUBSTR(direntry,user_opt_loc,1))
    user_opt_loc = user_opt_loc + 1
    pdsssifb = SUBSTR(direntry,user_opt_loc,1)
    user_opt_loc = user_opt_loc + 1
    pdsmbrsn = C2X(SUBSTR(direntry,user_opt_loc,2))
    user_opt_loc = user_opt_loc + 2

    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp COPIES(" ",15) "SSI  :"
    rpt.tmp = rpt.tmp "SSI:" pdsssiwd
    rpt.tmp = rpt.tmp "Level("pdschlvl")"
    rpt.tmp = rpt.tmp "FLAG("C2X(pdsssifb)")="
    pdsforce = BITAND(pdsssifb,'40'x)
    IF (pdsforce = '40'x) THEN DO
      rpt.tmp = rpt.tmp "FORCE"
    END
    pdsusrch = BITAND(pdsssifb,'20'x)
    IF (pdsusrch = '20'x) THEN DO
      rpt.tmp = rpt.tmp "USER CHANGE"
    END
    pdsemfix = BITAND(pdsssifb,'10'x)
    IF (pdsemfix = '10'x) THEN DO
      rpt.tmp = rpt.tmp "IBM Emergency"
    END
    pdsdepch = BITAND(pdsssifb,'08'x)
    IF (pdsdepch = '08'x) THEN DO
      rpt.tmp = rpt.tmp "DEPENDENCY"
    END
    pdssysgn = BITAND(pdsssifb,'06'x)
    IF (pdssysgn = '06'x) THEN DO
      rpt.tmp = rpt.tmp "SYSGEN"
    END
    pdscmsgn = BITAND(pdsssifb,'02'x)
    IF (pdscmsgn = '02'x) THEN DO
      rpt.tmp = rpt.tmp "COMPLETE SYSGEN"
    END
    pdsibmmb = BITAND(pdsssifb,'01'x)
    IF (pdsibmmb = '01'x) THEN DO
      rpt.tmp = rpt.tmp "IBM SUPPLIED MEMBER"
    END
    pdsnosgn = BITAND(pdsssifb,'00'x)
    IF (pdsnosgn = '00'0) THEN DO
      rpt.tmp = rpt.tmp "NOT CRITICAL"
    END
    pdsptsgn = BITAND(pdsssifb,'04'x)
    IF (pdsptsgn = '04'x) THEN DO
      rpt.tmp = rpt.tmp "PARTIAL SYSGEN"
    END
  END
  ELSE DO
    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp COPIES(" ",15) "SSI  :"
    rpt.tmp = rpt.tmp "NONE"
  END
  /* END-OF-SSI-SECTION                                              */

  /* START-OF-APF-SECTION                                            */
  IF (pdsapflg = '08'x) THEN DO
    pdsapfc  = C2X(SUBSTR(direntry,user_opt_loc,2))
    pdsapfct = C2X(SUBSTR(direntry,user_opt_loc,1))
    user_opt_loc = user_opt_loc + 1
    pdsapfac = C2X(SUBSTR(direntry,user_opt_loc,1))
    user_opt_loc = user_opt_loc + 1

    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp COPIES(" ",15) "APF  :"
    rpt.tmp = rpt.tmp "Len("pdsapfct")"
    rpt.tmp = rpt.tmp "AC("pdsapfac")"
  END
  /* END-OF-APF-SECTION                                              */

  /* START-OF-LARGE-PROGRAM-OBJECTS-(LPO)-SECTION                    */
  IF (pds2big = '40'x) THEN DO
    pds2lpol = C2D(SUBSTR(direntry,user_opt_loc,1))
    user_opt_loc = user_opt_loc + 1
    pds2vstr = C2X(SUBSTR(direntry,user_opt_loc,4))
    user_opt_loc = user_opt_loc + 4
    pds2mepa = C2X(SUBSTR(direntry,user_opt_loc,4))
    user_opt_loc = user_opt_loc + 4
    pds2aepa = C2X(SUBSTR(direntry,user_opt_loc,4))
    user_opt_loc = user_opt_loc + 4

    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp ,
      COPIES(" ",15) "LPO  :"
    rpt.tmp = rpt.tmp "Len("pds2lpol")"
    rpt.tmp = rpt.tmp "Virtual STORAGE("pds2vstr")"
    rpt.tmp = rpt.tmp "Main EPA offset("pds2mepa")"
    rpt.tmp = rpt.tmp "Alias EPA offset("pds2aepa")"
  END
  /* END-OF-LARGE-PROGRAM-OBJECTS-(LPO)-SECTION                      */

  /* START-OF-EXTENDED-ATTRIBUTE-SECTION                             */
  IF (pds2xatr = '01'x) THEN DO
    pds2xattrbyte0 = SUBSTR(direntry,user_opt_loc,1)
    user_opt_loc = user_opt_loc + 1
    pds2xattr_optn_mask = C2D(BITAND(pds2xattrbyte0,'0F'x))
    pds2xattrbyte1 = C2X(SUBSTR(direntry,user_opt_loc,1))
    user_opt_loc = user_opt_loc + 1
    pds2xattr_opt = ,
      C2X(SUBSTR(direntry,user_opt_loc,pds2xattr_optn_mask))
    user_opt_loc = user_opt_loc + pds2xattr_optn_mask

    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp ,
      COPIES(" ",15) "EXTND:"
    rpt.tmp = rpt.tmp "XATTRBYTE0("pds2xattr_optn_mask")"
    IF (pds2xattr_optn_mask > 0) THEN DO
      rpt.tmp = rpt.tmp "OPT("pds2xattr_opt")"
    END
    rpt.tmp = rpt.tmp "XATTRBYTE1("pds2xattrbyte1")"
    IF (pds2xattrbyte1 = 'F0'x) THEN DO
      rpt.tmp = rpt.tmp "F0=More than 100 characters allowed"
    END
    ELSE DO
      rpt.tmp = rpt.tmp "F0=Less than 101 characters allowed"
    END
  END
  ELSE DO
    tmp = rpt.0 + 1
    rpt.0 = tmp
    rpt.tmp = rpt.tmp ,
      COPIES(" ",15) "EXTND:"
    rpt.tmp = rpt.tmp "LONGPARM: NO"
  END
  /* END-OF-EXTENDED-ATTRIBUTE-SECTION                               */

  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Decode the ISPF statistics.
 Book:    dgt3d410.pdf: SC23-6855-00
          z/OS DFSMS Using Data Sets
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Decode_Ispf_Stats:
  direntry = ARG(1)
  tmp = rpt.0
  PARSE VAR direntry ,
     =1 vv ,
     =2 mm ,
     =3 flags ,
     =4 mod_sec ,
     =5 crecc ,
     =6 crdate ,
     =9 modcc ,
    =10 moddate ,
    =13 mod_hour ,
    =14 mod_min ,
    =15 curln ,
    =17 iniln ,
    =19 modln ,
    =21 userid ,
    =29 more_userdata
  PARSE VALUE C2X(crdate) WITH cyy 3 cjjj 6 .
  PARSE VALUE C2X(moddate) WITH myy 3 mjjj 6 .
  rpt.tmp = rpt.tmp RIGHT(C2D(vv),2,"0") || "." || ,
    RIGHT(C2D(mm),2,"0")                                /* Vv.Mm     */
  rpt.tmp = rpt.tmp (C2X(crecc) + 19) || cyy || ,
    "." || cjjj                                       /* Create date */
  rpt.tmp = rpt.tmp (C2X(modcc) + 19) || ,
    myy || "." || mjjj /* Mod date */
  rpt.tmp = rpt.tmp RIGHT(C2X(mod_hour),2,"0") || ,
    ":" || RIGHT(C2X(mod_min),2,"0") || ,
    ":" || RIGHT(C2X(mod_sec),2,"0")               /* modified time  */
  rpt.tmp = rpt.tmp RIGHT(C2D(curln),5)            /* Current lines  */
  rpt.tmp = rpt.tmp RIGHT(C2D(iniln),5)            /* Initial lines  */
  rpt.tmp = rpt.tmp RIGHT(C2D(modln),5)            /* Modified lines */
  rpt.tmp = rpt.tmp userid                         /* User id        */
  IF (BITAND(flags,'80'x) = '80'x) THEN DO
    rpt.tmp = rpt.tmp "(SCLM)"                     /* Saved by SCLM  */
  END
  ELSE DO
    rpt.tmp = rpt.tmp "(-not)"                     /* Saved by SCLM  */
  END
  IF (BITAND(flags,'20'x) = '20'x) THEN DO         /* curln > 65535  */
    PARSE VAR more_userdata ,
      =1 ext_curln ,
      =5 ext_iniln ,
      =9 ext_modln ,
      more_userdata
    rpt.tmp = rpt.tmp RIGHT(C2D(ext_curln),10)     /* Current lines  */
    rpt.tmp = rpt.tmp RIGHT(C2D(ext_iniln),10)     /* Initial lines  */
    rpt.tmp = rpt.tmp RIGHT(C2D(ext_modln),10)     /* Modified lines */
  END
  IF (more_userdata <> "") THEN DO
    cdwidth = userdata_length
    ouwidth = userdata_length
    copy_count = TRUNC(userdata_length / 10) + 1
    col_title = "Offset :" ,
      LEFT(COPIES("----+----|",copy_count),userdata_length)
    tmp_offset = 1
    function_rc = Over_Under(more_userdata)
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert day-of-year to Gregorian standard date.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Convert_Yyddd_To_Yyyymmdd: PROCEDURE
  say "yyddd_to_ yyymmdd arg1("arg1")"
  yy = SUBSTR(ARG(1),3,2)
  ddd = RIGHT(ARG(1),3)
  base_date = DATE("B",yy || ddd,"J")
  standard_date = DATE("S",base_date,"B")
  say "    base:" base_date ,
    "standard:" standard_date
  RETURN standard_date

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Decode the Alchemist extended statistics.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Decode_Alchemist_Stats:
  direntry = ARG(1)
  tmp = rpt.0
  rpt.tmp = rpt.tmp "Alchemist:"
  PARSE VAR direntry ,
     =1 alchemist_origname ,
     =9 alchemist_rsvd ,
    =13 alchemist_highvalue ,
    =14 alchemist_thisname ,
    =22 alchemist_env ,
    =30 alchemist_type ,
    =60 alchemist_num ,
    =62 alchemist_x00 ,
    =63 more_userdata
  alchemist_highvalue = C2X(alchemist_highvalue)
  alchemist_x00 = C2X(alchemist_x00)

  rpt.tmp = rpt.tmp "Orig:" alchemist_origname
  IF (alchemist_rsv1 <> " ") THEN DO
    rpt.tmp = rpt.tmp "RSVD:" alchemist_rsvd
  END
  IF (alchemist_highvalue <> "FF") THEN DO
    rpt.tmp = rpt.tmp "FF:" alchemist_highvalue
  END
  rpt.tmp = rpt.tmp "This:" alchemist_thisname
  rpt.tmp = rpt.tmp "Env:" alchemist_env
  alchemist_type = STRIP(alchemist_type,"T"," ")
  rpt.tmp = rpt.tmp "Type:" alchemist_type
  rpt.tmp = rpt.tmp "Num:" alchemist_num
  rpt.tmp = rpt.tmp "x'00':" alchemist_x00
  IF (more_userdata <> "") THEN DO
    cdwidth = userdata_length
    ouwidth = userdata_length
    copy_count = TRUNC(userdata_length / 10) + 1
    col_title = "Offset :" ,
      LEFT(COPIES("----+----|",copy_count),userdata_length)
    tmp_offset = 1
    function_rc = Over_Under(more_userdata)
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  Convert string to x blocks of 4 characters and the hexadecimal view.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Over_Under:
  PARSE ARG tmp_c2
  tmp = rpt.0 + 1 ; rpt.0 = tmp
  rpt.tmp = col_title
  DO WHILE (tmp_c2 <> "")
    PARSE VAR tmp_c2 one_c2 +(ouwidth) tmp_c2
    tmp_char = ""
    tmp_over = ""
    tmp_under = ""
    DO c2_x = 1 TO LENGTH(one_c2)
      IF (SUBSTR(one_c2,c2_x,1) > '32'x) THEN DO
        tmp_char = tmp_char || SUBSTR(one_c2,c2_x,1)
      END
      ELSE DO
        tmp_char = tmp_char || "?"
      END
      one_becomes_two = C2X(SUBSTR(one_c2,c2_x,1))
      tmp_over = tmp_over || LEFT(one_becomes_two,1)
      tmp_under = tmp_under || RIGHT(one_becomes_two,1)
      IF ((c2_x // 4) = 0) THEN DO
        tmp_char = tmp_char || " "
        tmp_over = tmp_over || " "
        tmp_under = tmp_under || " "
      END
    END
    tmp_char = STRIP(tmp_char,"T"," ")
    tmp_over = STRIP(tmp_over,"T"," ")
    tmp_under = STRIP(tmp_under,"T"," ")
    tmp = rpt.0 + 1 ; rpt.0 = tmp
    rpt.tmp = RIGHT(tmp_offset,6,"0") ":" tmp_char
    tmp = rpt.0 + 1 ; rpt.0 = tmp
    rpt.tmp = "       :" COPIES("-",LENGTH(tmp_over))
    tmp = rpt.0 + 1 ; rpt.0 = tmp
    rpt.tmp = "  HEX  :" tmp_over
    tmp = rpt.0 + 1 ; rpt.0 = tmp
    rpt.tmp = "       :" tmp_under
    tmp_offset = tmp_offset + LENGTH(one_c2)
    tmp = rpt.0 + 1 ; rpt.0 = tmp
    rpt.tmp = " "
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  Dump storage in chunks as specified in cdwidth.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Character_Dump:
  PARSE ARG tmp_c2
  tmp = rpt.0 + 1 ; rpt.0 = tmp
  rpt.tmp = col_title
  DO WHILE (tmp_c2 <> "")
    PARSE VAR tmp_c2 one_c2 +(cdwidth) tmp_c2
    tmp = rpt.0 + 1 ; rpt.0 = tmp
    rpt.tmp = RIGHT(tmp_offset,6,"0") ":" one_c2
    tmp_offset = tmp_offset + LENGTH(one_c2)
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
