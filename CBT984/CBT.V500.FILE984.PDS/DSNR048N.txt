/* rexx */
Rexx_DSNR048N:
  rexxpgm_version = "01.03"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(DSNR048N)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   DSNR048I |ssid num_by_two|
 Overview: Process DSNR048I messages to estimate how long until
           recovery will complete. To do so, you need at least two
           occurrences of a DSNR048I message. You can then calculate
           the rba distance processed and the elapsed wall clock time.
           That helps calculate the speed DB2 is 'averaging'. Keep in
           mind, migrated logs need to be recalled as DB2 reads the
           logs backwards to undo all of the updates. That causes
           more logging to occur, and more archive logs. That fills up
           the SMS storage group.

           ssid = DB2 Subsystem
           num_by_two = how many of the every 2 minutes                 .
                        messages to show

Some messages lines are too wide to fit in 72 columns so I split them.
The plus sign (+) is used to show where the split took place.

06.13.48 STC07802  DSNR048I  -DB2P DSNRBMON UR BACKOUT PROCESSING +
+LOG  258
   258             RECORD
   258                       AT RBA 0B0DB3BF10EA TO RBA 0B02521F4863 FOR
   258                       CORRELATION NAME = FCSP145Y
   258                       CONNECTION ID  = BATCH
   258                       LUWID = IDPONET1.DB2PDDF.C490B07348CC +
+= 113599
   258                       PLAN NAME = PDBIP60
   258                       AUTHID = JSCHPAS
   258                       END USER ID = *
   258                       TRANSACTION NAME = *
   258                       WORKSTATION NAME = *

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.03 20180429 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
               3) Removed unused Ctlblk_Jobspecs.
----- -------- --------------------------------------------------------
01.02 20090812 KTOMIAK  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added support for using SDSF Rexx API
                  to access the joblog directly.
----- -------- --------------------------------------------------------
01.01 20090731 KTOMIAK  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Changed how multiple entries are processed.
----- -------- --------------------------------------------------------
01.00 20080130 KTOMIAK  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code for DB2.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")

  PARSE UPPER VAR all_my_arguments ssid num_by_two .
  IF (ssid = "") THEN DO
    SAY "Try telling me which DB2 subsystem to check."
    return_code = 24
    RETURN return_code
  END
  isfprefix = ssid"MSTR"
  IF (DATATYPE(num_by_two) <> "NUM") THEN DO
    num_by_two = 30
  END
  num_by_two = num_by_two + 1

  _my_ctr = 0
  bump_seconds = 0

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  current_digits = Digits()
  IF (current_digits < 19) THEN DO
    NUMERIC DIGITS 19   /* Handles Exabyte */
  END
  null_rc = Read_Joblog()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we read the joblog for the requested db2 subsystem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Read_Joblog:
  isfcalls_rc = ISFCALLS("ON")
  IF (isfcalls_rc <> 0) THEN DO
    SAY "ISFCALLS ON failed, RC("isfcalls_rc")."
    return_code = 16
    RETURN return_code
  END
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
00 Function completed successfully
01 Host command environment query failed, environment not added
02 Host command environment add failed
03 Host command environment delete failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

  isfapi_cmd = "DA"
  isfapi_options = "(ALTERNATE DELAYED VERBOSE)"
  ADDRESS SDSF "ISFEXEC" isfapi_cmd isfapi_options

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00 The request completed successfully.
08 An incorrect or invalid parameter was specified for an
   option or command.
12 A SYNTAX ERROR occurred parsing a host environment command.
16 The user is not authorized to invoke SDSF.
20 A request failed due to an environmental error.
24 Insufficient storage was available to complete a request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  isfapi_rc = RC
  IF (isfapi_rc > 8) THEN DO
    SAY "sdsf RC("isfapi_rc")"
    show_rc = Show_Isfapi_Message()
    return_code = isfapi_rc
    RETURN return_code
  END

  IF (isfrows = 0) THEN DO
    SAY ""
    SAY "No rows returned, sorry. Play again?"
    SAY "Is" ssid "even running?"
    SAY ""
    return_code = 14
  END
  ELSE DO
    this_job_name = WORD(isfcols,1)
    this_job_nbr  = WORD(isfcols,4)

    DO job_ctr = 1 TO JNAME.0
      get_rc = Get_All_Output()
    END
  END
  RC = ISFCALLS("OFF")
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Loop through each job and get the output.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Get_All_Output:
  isfact_options = ""
  get_rc = 0

  nbr_ddnames = Get_Real_Ddname()
  isfact_options = "TOKEN('"TOKEN.job_ctr"') PARM(NP SA)" ,
    "( prefix JDS_"
  ADDRESS SDSF "ISFACT" isfapi_cmd isfact_options
  isfact_rc = RC
  IF (LEFT(isfmsg2.2,7) = "ISF747E") THEN DO
    SAY "It is not nice to purge output while I am running."
    SAY "This is your only warning you do not play nice with others."
    RETURN 0
  END
  IF (isfact_rc <> 0) THEN DO
    show_rc = Show_Isfact_Message()
    return_code = isfact_rc
    RETURN return_code
  END

  DO _isf_dd_ctr = 1 TO isfddname.0
    /*
    SAY "    " ,
      "//"LEFT(JCL_DDNAME._isf_dd_ctr,8) "DD ",
      "DSN="isfdsname._isf_dd_ctr
    */
 /* ????????.ERASCA00.JOB00824.D0000002.JESMSGLG */
 /* ownerid  jobname  jobnbr   ddnbr    ddname   */
    PARSE VAR isfdsname._isf_dd_ctr,
      job_ownerid "." ,
      job_jobname ".",
      job_jobnbr "." ,
      job_ddnbr  "." ,
      job_ddname "."      .
    SELECT
      WHEN (JCL_DDNAME._isf_dd_ctr = "RSLOCAL") THEN DO
        null_rc = Process_Jesmsglg()
      END
      WHEN (JCL_DDNAME._isf_dd_ctr = "JESMSGLG") THEN DO
        null_rc = Process_Jesmsglg()
      END
      OTHERWISE DO
        "FREE FILE("isfddname._isf_dd_ctr")"
      END
    END
  END
  RETURN get_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Loop through each job and get the real ddnames.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Get_Real_Ddname:
  isfact_options = "TOKEN('"TOKEN.job_ctr"') PARM(NP ?)" ,
    "( prefix JCL_"
  ADDRESS SDSF "ISFACT" isfapi_cmd isfact_options
  isfact_rc = RC
  IF (isfact_rc <> 0) THEN DO
    SAY "Error in" isfact_options", ("isfact_rc")."
    show_rc = Show_Isfact_Message()
    return_code = isfact_rc
    RETURN return_code
  END
  RETURN jcl_DDNAME.0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Look for DSNR048I messages. Currently just returning
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Process_Jesmsglg:
  SAY "jesmsglg"
  "EXECIO * DISKR" isfddname._isf_dd_ctr "(STEM line. FINIS"
  DO _line_ctr = 1 TO line.0
    PARSE VAR line._line_ctr ,
      =2 msg_time stc_number msg_id msg_text
/*
    IF ((_line_ctr > 3519) & (_line_ctr < 3541)) THEN DO
      SAY _line_ctr LEFT(line._line_ctr,60)
    END
*/
    SELECT
      WHEN (msg_id = "DSNR048I") THEN DO
        PARSE VAR msg_text ,
          ssid_src csect_name msg_ur_text
        msg_ml_id = WORD(msg_ur_text,WORDS(msg_ur_text))
        null_rc = Process_Ml_MSG(10)
        IF (_my_ctr = 1) THEN DO
          SAY msg_time COPIES("=",45)
          SAY "Backout beginning for:" correlation_name connection_id ,
            thread_number authid
          SAY "                     :" luwid
          SAY "Begin   " rba_now
          SAY "Back to " rba_begin
          rba_first = rba_now
          time_first = msg_time
          dist_left = RIGHT(D2X( X2D(rba_now) - X2D(rba_begin) ),12,0)
          SAY "HH.MM.SS At RBA now   Still to go  Days/time left"
          SAY "-------- ------------ ------------ --------------"
          SAY msg_date
          SAY msg_time rba_now dist_left
          sec_first = Time_To_Seconds(msg_time)
        END
        ELSE DO
          IF ((_my_ctr // num_by_two) = 0) THEN DO
            time_left = Time_To_Go()
            SAY msg_time rba_now dist_left time_left
          END
          time_last = msg_time
          rba_last = rba_now
          bump_last = bump_seconds
        END
      END
      WHEN (msg_id = "----") THEN DO
        msg_date = "----" msg_text
        bump_seconds = bump_seconds + 3600
        IF (_my_ctr > 0) THEN DO
          SAY msg_date
        END
      END
      OTHERWISE DO
        NOP
      END
    END
  END
  SAY "-------- ------------ ------------ --------------"
  SAY ""
  SAY "Last message:"
  rba_now = rba_last
  msg_time = time_last
  bump_seconds = bump_last
  time_left = Time_To_Go()
  SAY msg_time rba_now dist_left time_left
  SAY ""
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we process however many lines were requested.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Process_Ml_Msg:
  PARSE ARG _show_ctr .
  DO _sl = 1 TO _show_ctr
    _line_ctr = _line_ctr + 1
    SELECT
      WHEN (_sl = 1) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont constant.1
      END
      WHEN (_sl = 2) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . rba_now . . rba_begin .
      END
      WHEN (_sl = 3) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . . correlation_name .
      END
      WHEN (_sl = 4) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . . connection_id .
      END
      WHEN (_sl = 5) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . luwid . thread_number .
      END
      WHEN (_sl = 6) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . plan_name .
      END
      WHEN (_sl = 7) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . authid .
      END
      WHEN (_sl = 8) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . . . end_user_id x'00' .
      END
      WHEN (_sl = 9) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . . transaction_name x'00' .
      END
      WHEN (_sl = 10) THEN DO
        PARSE VAR line._line_ctr ,
          =2 msg_cont . . . workstation_name x'00' .
      END
      OTHERWISE DO
        NOP
      END
    END
  END
  _my_ctr = _my_ctr + 1
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we calculate distance, duration, and speed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Time_To_Go:
  sec_now = Time_To_Seconds(msg_time)
  sec_duration =  sec_now - sec_first
  /*
  UR Backout distance traveled
  */
  dist_gone = D2X( X2D(rba_first) - X2D(rba_now) )
  /*
  Distance left to travel
  */
  dist_left = RIGHT(D2X( X2D(rba_now) - X2D(rba_begin) ),12,0)
  /*
  Wild stab at how long that will take based on overall duration
  */
  rba_speed    = X2D(dist_gone) / sec_duration
  time_rem     = X2D(dist_left) / rba_speed
  time_left    = S2t( time_rem )
  RETURN time_left

  SAY "N("sec_now")-F("sec_first")=D("sec_duration")"
  SAY "G("dist_gone") S("rba_speed") R("time_rem")"

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we convert hh:mm:ss to pure seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Time_To_Seconds: PROCEDURE Expose,
    bump_seconds
  time_arg = ARG(1)
  PARSE VAR time_arg hh "." mm "." ss .
  total_seconds = (hh * 3600) + (mm * 60) + ss + bump_seconds
  RETURN total_seconds

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert seconds back Into days time format.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
S2t: PROCEDURE
  arg_1 = ARG(1)
  t_s = RIGHT(arg_1 // 60,2,0)
  t_m = arg_1 %  60
  t_h = RIGHT(t_m   %  60,2,0)
  t_m = RIGHT(t_m  //  60,2,0)
  t_d = t_h   %  24
  val = RIGHT(t_d,4,0)"-"t_h":"t_m":"t_s
  RETURN val

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 My old flunky way to get an Integer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Int: PROCEDURE
  arg_1 = ARG(1)
  PARSE VAR arg_1 val "." .
  RETURN val

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Show extended ERROR help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Show_Isfapi_Message:
  SAY ""
  SAY ""
  SAY "Error in ISFAPI command, ("isfapi_rc")."
  SAY "near line:" SIGL
  SAY "isfmsg is:" isfmsg
  IF (isfmsg2.0 > 0) THEN DO
    DO isfmsg_ctr = 1 TO isfmsg2.0
      SAY "isfmsg2."isfmsg_ctr "is:" isfmsg2.isfmsg_ctr
    END
  END
  SAY "DIAG("isfdiag")"
  SAY COPIES("1234567890",7)
  SAY COPIES("....+....|",7)
  SAY isfapi_cmd isfapi_options
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Show extended ERROR help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Show_Isfact_Message:
  SAY ""
  SAY ""
  SAY "Error in ISFACT command, ("isfapi_rc")."
  SAY "near line:" SIGL
  SAY "isfmsg is:" isfmsg
  IF (isfmsg2.0 > 0) THEN DO
    DO isfmsg_ctr = 1 TO isfmsg2.0
      SAY "isfmsg2."isfmsg_ctr "is:" isfmsg2.isfmsg_ctr
    END
  END
  SAY "DIAG("isfdiag")"
  SAY COPIES("1234567890",7)
  SAY COPIES("....+....|",7)
  SAY isfapi_cmd isfact_options
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
