rexx_IWMQVS:   /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(IWMQVS)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   IWMQVS {arguments ...}
 Overview: (tell us about the code)


=======================================================================

 History of Modifications
 ------------------------
vv.ll When     Who / What you did
----- -------- --------------------------------------------------------
01.01 2013???? "your name"<your-email-address@postoffice.tld>
               1) Future change.
----- -------- --------------------------------------------------------
01.00 20130702 "your name"<your-email-address@postoffice.tld>
               1) Original code.
----- -------- --------------------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12
  trace OFF

rexx_Main_IWMQVS:
  MAKEBUF
  return_code = rexx_Initialize()
  If (return_code = 0) then do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  DROPBUF
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name rexxpgm_version,53) "="
  say left("= executing under" source_host_env,53) "="
  say left("= as a" source_call_type,53) "="
  say left("= on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""

  If (source_host_env <> "TSO") Then do
    Say "Wrong host environment" source_host_env
    return_code = 16
    Return return_code
  End

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
/* ------------------------------------------------------------------ */
/*                                                                    */
/*  Call IWMQVS to get MSU, LPAR and z/VM Info                        */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* --- Setup parameters and output area ----------------------------- */
QVS_Outlen = 500                       /* Output area length          */
QVS_Outlenx = Right(x2c(d2x(QVS_Outlen)),4,d2c(0))
                                       /* Get length as fullword      */
QVS_Out = QVS_Outlenx || Copies('00'X,QVS_Outlen-4)
/* --- Call IWMQVS  ------------------------------------------------- */
Address Linkpgm 'IWMQVS QVS_Out'
If rc > 0 Then Say "Error from IWMQVS, rc = " || rc
/* --- Process capacity flags \-------------------------------------- */
qvs_flag = C2x(substr(QVS_Out,6,1))
cec_cap_valid = Substr(X2b(qvs_flag),1,1) /* CEC capacity valid?      */
lpar_cap_valid = Substr(X2b(qvs_flag),2,1)/* LPAR capacity valid?     */
vm_cap_valid = Substr(X2b(qvs_flag),3,1)  /* VM capacity valid?       */
/* --- Output Processor model and type ------------------------------ */
cec_type = Substr(QVS_Out,9,4)
cec_model = Substr(QVS_Out,13,12)
Select
  When cec_type = '2064' Then cec_desc = '(z Series 900)'
  When cec_type = '2066' Then cec_desc = '(z Series 800)'
  When cec_type = '2084' Then cec_desc = '(z Series 990)'
  When cec_type = '2086' Then cec_desc = '(z Series 890)'
  When cec_type = '2094' Then cec_desc = '(System z9 EC)'
  When cec_type = '2096' Then cec_desc = '(System z9 BC)'
  When cec_type = '2097' Then cec_desc = '(System z10 EC)'
  When cec_type = '2098' Then cec_desc = '(System z10 BC)'
  When cec_type = '2817' Then cec_desc = '(zEnterprise 196)'
  When cec_type = '2818' Then cec_desc = '(zEnterprise 114)'

  Otherwise cec_desc = ''
End                                    /* select                      */
Say 'CEC: ' || cec_type || '-' || Strip(cec_model) cec_desc
/* --- Output CEC capacity ------------------------------------------ */
If cec_cap_valid = 1 Then Do
   proc_cap = C2d(Substr(QVS_out,65,4))
   Say 'CEC Capacity' proc_cap 'MSU'
End                                    /* if cec capacity valid       */
/* --- Output LPAR name and capacity -------------------------------- */
lparname = Strip(Substr(QVS_out,69,8))
If lparname = '' Then Say 'Not running under an LPAR'
Else Say 'LPAR name:' lparname
If lpar_cap_valid = 1 Then Do
   lpar_cap = C2d(Substr(QVS_out,81,4))

   Say 'LPAR Capacity' lpar_cap 'MSU'
End                                    /* if lpar capacity valid      */
/* --- Output z/VM image name and capacity -------------------------- */
vmname = Strip(Substr(QVS_out,85,8))
If vmname = '' Then Say 'Not running under a z/VM image'
Else Say 'z/VM image name:' c2x(vmname)"."
If vm_cap_valid = 1 Then Do
   vm_cap = C2d(Substr(QVS_out,93,4))
   Say 'z/VM Image Capacity' lpar_cap 'MSU'
End                                    /* if vm capacity valid        */

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  Say Copies("*",55)
  Say left("*" source_uc_exec_name "RC=" return_code,53) "*"
  Say Copies("*",55)
  If (Sysvar(SYSISPF)="ACTIVE") Then do
    ZISPFRC = return_code
    Address ISPEXEC "VPUT (ZISPFRC) SHARED"
  End
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Follow control blocks and get information about the current task.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
