rexx_HLQLVL:   /* We still need rexx in comment if read from SYSPROC */
  arg hlq .
  call who_am_i
  if (hlq = "") then
    do
      hlq = space(sysvar("SYSUID"))
      if (hlq >< "") then,
        do
          hlqverb = "LEVEL("hlq")"
        end
      else,
        do
          rpt.0 = add_rpt(,
              "Can not run without a level")
          exit 16
        end
    end
  else,
    do
      hlqverb = "LEVEL("hlq")"
    end

  rpt.0 = add_rpt(,
      "Unique volumes for:" hlq)

  max_vol = 0
  max_ent = 0
  used_vol. = ""
  vol_ser. = ""
  vol_ser.0 = 0

  Address ISPEXEC "CONTROL ERRORS RETURN"
  Address ISPEXEC,
    "LMDINIT LISTID(DSNLIST)" hlqverb
                              /* Return codes                     */
                              /*  8 - Listid not created          */
                              /* 12 - Invalid parameter value     */
                              /* 16 - Truncation or translation   */
                              /*      error in accessing dialog   */
                              /*      variables                   */
                              /* 20 - Severe error                */
  RCSAVE = RC
  IF (RCSAVE >< 0) THEN,
    do
      rpt.0 = add_rpt(,
         "Does" hlq "exist?")
      exit 4
    end
  DSNVAR = ''
  rclist = 0
  DO while rclist = 0
    Address ISPEXEC,
      "LMDLIST LISTID("DSNLIST")",
                    "OPTION(LIST)",
                    "DATASET(DSNVAR)",
                    "STATS(YES)"
    RCLIST = RC
                 /* Return codes                           */
                 /*  4 - No data sets matched specified    */
                 /*      search criteria (the values for   */
                 /*      keywords LEVEL and VOLUME on the  */
                 /*      LMDINIT service).                 */
                 /*  8 - No more data sets names in list   */
                 /*      (option LIST)                     */
                 /*    - No data set list exists for this  */
                 /*      dslist-id (option FREE)           */
                 /*    - Data set lists already exists and */
                 /*      must be freed before using SAVE   */
                 /*      option (option SAVE)              */
                 /* 10 - Data set listid not created by    */
                 /*      lmdinit                           */
                 /* 12 - Invalid parameter value           */
                 /* 16 - Truncation or translation error   */
                 /*      in accessing dialog variables     */
                 /* 20 - Severe error                      */
    if (RCLIST > 0) then leave
    max_ent = max_ent + 1
    if (zdlvol = "MIGRAT") then
      do
        zdldev = "offDISK"
      end
    if (zdlvol = "??????") then
      do
        zdldev = "notREAL"
      end
    if (zdldev = x2c("FF40404040404040")) then
      do
        zdldev = ">DISK<"
        zdlvol = "_DISK_"
      end
    if (zdldev = x2c("4040404040404040")) then
      do
        zdldev = ">DISK<"
        zdlvol = "?TAPE?"
      end
    if (used_vol.ZDLVOL = "") then,
      call new_vol
    u_z = dsns.ZDLVOL + 1
    dsns.ZDLVOL = u_z
  end
  Address ISPEXEC,
     "LMDLIST LISTID("DSNLIST") OPTION(FREE)"
  Address ISPEXEC,
    "LMDFREE DATAID("DSNLIST")"
  select
    when (RCLIST = 4) then,
      do
        rpt.0 = add_rpt(,
            "Problem listing the HLQ("hlq")")
      end
    when (RCLIST = 8) then,
      do
        nop
      end
    otherwise
      nop
  end
  if (max_vol > 0) then,
    do
      stem.0 = max_vol
      do m_x = 1 to max_vol
        parse var vol_ser.m_x vl vd vm
        ds = dsns.vl
        stem.m_x = left(vl,6) left(vd,10) ds
      end

      call stem_sort_asc

      rpt.0 = add_rpt(" ")
      rpt.0 = add_rpt("VOLSER DEVTYPE   NBR_OF_DATASETS")
      do m_x = 1 to max_vol
        rpt.0 = add_rpt(stem.m_x)
      end
    end
  rpt.0 = add_rpt(" ")
  "EXECIO" rpt.0 "DISKW HLQVOLS (FINIS STEM RPT.)"
  return
    if (zdlvol >< "MIGRAT") then
      do
        say "DSNVAR C(44) Val("DSNVAR")"
        say "  ZDLCDATE C(10) Val("ZDLCDATE")"
        say "  ZDLDEV C(8) Val("ZDLDEV") c2x("c2x(zdldev)")"
        say "  ZDLEXT C(3) Val("ZDLEXT")"
        say "  ZDLLRECL C(5) Val("ZDLLRECL")"
        say "  ZDLMIGR C(3) Val("ZDLMIGR")"
        say "  ZDLRDATE C(10) Val("ZDLRDATE")"
        say "  ZDLVOL C(6) Val("ZDLVOL")"
      end

new_vol:
  max_vol = max_vol + 1
  used_vol.ZDLVOL = max_vol
  dsns.ZDLVOL = 0
  v_s = vol_ser.0 + 1
  vol_ser.0 = v_s
  vol_ser.v_s = zdlvol zdldev
  return

who_am_i:
  rpt.0 = 0
  PARSE SOURCE host_env call_type uc_exec_name,
    HOSTDD HOSTDSN,
    nf_exec_name initial_cmd_env asid_name,
    char8_user_token HOSTOTHER
  rpt.0 = add_rpt(" ")
  rpt.0 = add_rpt(,
      Left(uc_exec_name,
    right(copies(" ",60)Date() Date("W") TIME(),60),68))
  mvs_sysname = MVSVAR("SYSNAME")
  mvs_opsys = MVSVAR("SYSOPSYS")
  sys_sysnode = SYSVAR("SYSNODE")
  sys_sysenv= SYSVAR("SYSENV")
  sys_sysispf = SYSVAR("SYSISPF")
  sys_sysuid = SYSVAR("SYSUID")
  sys_syspref = SYSVAR("SYSPREF")
  sys_systermid = SYSVAR("SYSTERMID")
  old_trap = OutTrap("RACF.")
  "listuser" sys_sysuid
  new_trap = OutTrap("OFF")
  sys_username = sys_sysuid"@"mvs_sysname
  if (racf.0 > 0) then,
    do ix = 4 to racf.0
      if (pos("INSTALLATION-DATA",racf.ix) > 0) then,
        do
          parse var racf.ix . "=" sys_username
          sys_username = strip(sys_username)
          leave
        end
    end
  rpt.0 = add_rpt(,
    "Executed on",
    mvs_sysname "running",
    mvs_opsys "on JES2 node",
    sys_sysnode)
  rpt.0 = add_rpt(,
    "Run by",
    sys_sysuid,
    sys_username)
  rpt.0 = add_rpt(,
    "in the",
    sys_sysenv"ground and ISPF is",
    sys_sysispf)
  return

add_rpt:
  parse arg rptargs
  rpt_ix = rpt.0 + 1
  rpt.rpt_ix = rptargs
  return rpt_ix

stem_sort_asc: Procedure Expose stem.
  count_of_elements = stem.0
  /* loop through the array (count_of_elements - 1) ** 2 times */
  do i = 1 to  (count_of_elements - 1)
    do j = 1 to (count_of_elements - 1)
      j_plus1 = j + 1
  /* if an element is greater than the next one higher then swap them */
      if stem.j > stem.j_plus1 then call swap_pair
    end j
  end i
  return

  /* reverse the order of the two elements */
swap_pair:
  temp = stem.j
  stem.j = stem.j_plus1
  stem.j_plus1 = temp
  return

