/* rexx */
Rexx_ADATA2RX:
  rexxpgm_version = "01.00"           /* ver lev */

  PARSE ARG tsoprmvl

  NUMERIC DIGITS 16 /* Handles Petabyte for following control blocks */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()

  RETURN return_code


/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset: KTPM.REXX(ADATA2RX)
 Contact: KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
 Purpose: Process ADATA records and generate REXX code.
 Syntax:  %ADATA2RX |parameter|
          parameter: Specify the valid parameters and what they do...

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest date at the top.)
----- -------- --------------------------------------------------------
01.00 20180704 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
               1) ...itemize what and why you made changes...
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

Use at your own risk
--------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but mistakes
happen.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Put the onus on the user if anything should go wrong.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Say_Global_Disclaimer:
  SAY ""
  SAY "Use at your own risk"
  SAY "--------------------"
  SAY "The author explicitly disavows any claim whatsoever about"
  SAY "the correctness or functionality of this program, and"
  SAY "disclaims liability for anything and everything bad that"
  SAY "might happen in connection with, before, during, or after"
  SAY "using it. I have tried to make it work right, and I am"
  SAY "personally pretty confident that it does, but mistakes"
  SAY "happen."

  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION ,
    version_rexx_name ,
    version_rexx_level ,
    version_rexx_date

  PARSE SOURCE ,
    source_host_env ,
    source_call_type ,
    source_uc_exec_name ,
    source_hostdd ,
    source_hostdsn ,
    source_nf_exec_name ,
    source_initial_cmd_env ,
    source_asid_name ,
    source_char8_user_token ,
    source_hostother

  job_specs = Retrieve_Job_Step_Info()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  function_rc = Say_Global_Disclaimer()

  ctr_common_record_type. = 0
  idx_common_record_type = ""
  txt_common_record_type.   = "New to me"
  txt_common_record_type.0  = ,
    "Job Identification Record '0000'                      "
  txt_common_record_type.1  = ,
    "ADATA Identification Record '0001'                    "
  txt_common_record_type.2  = ,
    "ADATA Compilation Unit Start/End Record '0002'        "
  txt_common_record_type.10 = ,
    "Output File Information Record '000A'                 "
  txt_common_record_type.11 = ,
    "Options File Information '000B'                       "
  txt_common_record_type.16 = ,
    "Options record '0010'                                 "
  txt_common_record_type.32 = ,
    "External Symbol Dictionary Record '0020'              "
  txt_common_record_type.48 = ,
    "Source Analysis Record '0030'                         "
  txt_common_record_type.50 = ,
    "Source Error Record '0032'                            "
  txt_common_record_type.52 = ,
    "DC/DS record '0034'                                   "
  txt_common_record_type.53 = ,
    "DC Extension Record '0035'                            "
  txt_common_record_type.54 = ,
    "Machine Instruction Record '0036'                     "
  txt_common_record_type.64 = ,
    "Relocation Dictionary Record '0040'                   "
  txt_common_record_type.66 = ,
    "Symbol Record '0042'                                  "
  txt_common_record_type.68 = ,
    "Symbol and Literal Cross Reference Record '0044'      "
  txt_common_record_type.69 = ,
    "Register Cross Reference Record '0045'                "
  txt_common_record_type.96 = ,
    "Library Record '0060'                                 "
  txt_common_record_type.98 = ,
    "Library Member and Macro Cross Reference Record '0062'"
  txt_common_record_type.112 = ,
    "User-supplied Information Record '0070'               "
  txt_common_record_type.128 = ,
    "USING Map Record '0080'                               "
  txt_common_record_type.144 = ,
    "Statistics record '0090'                              "

  BITS.0="0000"; BITS.1="0001"; BITS.2="0010"; BITS.3="0011"
  BITS.4="0100"; BITS.5="0101"; BITS.6="0110"; BITS.7="0111"
  BITS.8="1000"; BITS.9="1001"; BITS.A="1010"; BITS.B="1011"
  BITS.C="1100"; BITS.D="1101"; BITS.E="1110"; BITS.F="1111"

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  sysadata. = ""
  sysadata.0 = 0
  ADDRESS MVS "EXECIO * DISKR SYSADATA (STEM sysadata. FINIS"
  ctr_len = LENGTH(sysadata.0)

  SAY ""
  SAY sysadata.0 "record(s) to process."
  DO s_x = 1 TO sysadata.0
    function_rc = Determine_Adata_Type()
  END

  DO w_x = 1 TO WORDS(idx_common_record_type)
   onerecty = WORD(idx_common_record_type,w_x)
   SAY RIGHT(onerecty,4,"0") ":" ,
     RIGHT(ctr_common_record_type.onerecty,ctr_len,"0") ,
     txt_common_record_type.onerecty
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("= RC=" return_code,77) "="
  SAY COPIES("=",79)
  SAY ""

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Retrieve_Job_Step_Info:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Determine the ADATA record type.
 Using asmp1022.pdf SC26-4941-07
 HLASM for z/OS & z/VM & z/VSE V2R2 Programmer's Guide
 Appendix C. Associated data file output
 Record types
 ADATA record layouts
 Common header section
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Determine_Adata_Type:
  PARSE VAR sysadata.s_x ,
    =1 adata_common_language_type +1 ,
    =2 adata_common_record_type   +2 ,
    =4 adata_common_dal           +1 ,
    =5 adata_common_flag1         +1 ,
    =6 adata_common_edition       +1 ,
    =7 adata_common_reserved1     +4 ,
   =11 adata_common_adflen        +2 ,
   =13 adata_record_data

  hexreclt = C2X(adata_common_language_type)
  hexrecty = C2X(adata_common_record_type)
  decrecty = C2D(adata_common_record_type)
  hexrecal = C2X(adata_common_record_dal)
  usrreccn = BITAND(adata_common_flag1,'01'x)
  usrrecbe = BITAND(adata_common_flag1,'02'x)
  decrecen = C2D(adata_common_edition)
  decrecfl = C2D(adata_common_adflen)
  decrecdl = LENGTH(adata_record_data)

  IF (POS(decrecty,idx_common_record_type) = 0) THEN DO
    idx_common_record_type = idx_common_record_type || decrecty || " "
  END
  tmp = ctr_common_record_type.decrecty + 1
  ctr_common_record_type.decrecty = tmp

  SELECT
    WHEN (hexrecty = "0000") THEN function_rc = Adata_0000_Type()
    WHEN (hexrecty = "0001") THEN function_rc = Adata_0001_Type()
    WHEN (hexrecty = "0002") THEN function_rc = Adata_0002_Type()
    WHEN (hexrecty = "000A") THEN function_rc = Adata_000A_Type()
    WHEN (hexrecty = "000B") THEN function_rc = Adata_000B_Type()
    WHEN (hexrecty = "0010") THEN function_rc = Adata_0010_Type()
    WHEN (hexrecty = "0020") THEN function_rc = Adata_0020_Type()
    WHEN (hexrecty = "0030") THEN function_rc = Adata_0030_Type()
    WHEN (hexrecty = "0032") THEN function_rc = Adata_0032_Type()
    WHEN (hexrecty = "0034") THEN function_rc = Adata_0034_Type()
    WHEN (hexrecty = "0035") THEN function_rc = Adata_0035_Type()
    WHEN (hexrecty = "0036") THEN function_rc = Adata_0036_Type()
    WHEN (hexrecty = "0040") THEN function_rc = Adata_0040_Type()
    WHEN (hexrecty = "0042") THEN function_rc = Adata_0042_Type()
    WHEN (hexrecty = "0044") THEN function_rc = Adata_0044_Type()
    WHEN (hexrecty = "0046") THEN function_rc = Adata_0046_Type()
    WHEN (hexrecty = "0060") THEN function_rc = Adata_0060_Type()
    WHEN (hexrecty = "0062") THEN function_rc = Adata_0062_Type()
    WHEN (hexrecty = "0070") THEN function_rc = Adata_0070_Type()
    WHEN (hexrecty = "0080") THEN function_rc = Adata_0080_Type()
    WHEN (hexrecty = "0090") THEN function_rc = Adata_0090_Type()
    OTHERWISE DO
      NOP
    END
  END

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Job Identification Record '0000'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0000_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0000_date            +8 ,
    =9 adata_0000_time            +4 ,
   =13 adata_0000_product_nbr     +8 ,
   =21 adata_0000_product_ver     +8 ,
   =29 adata_0000_product_lev     +2 ,
   =31 adata_0000_ptf             +8 ,
   =39 adata_0000_sysid           +24 ,
   =63 adata_0000_jobname         +8 ,
   =71 adata_0000_stepname        +8 ,
   =79 adata_0000_procstep        +8 ,
   =87 adata_0000_input_qty       +4 ,
   =91 adata_0000_input_offset    +4 ,
   =95 adata_record_data_inputs

  decprdlv = C2D(adata_0000_product_lev)
  decinpqt = C2D(adata_0000_input_qty)

  SAY "JOB:" adata_0000_jobname "from:" ,
    adata_0000_date adata_0000_time "with:" decinpqt "input(s)."

  DO inp_x = 1 TO decinpqt
    PARSE VAR adata_record_data_inputs ,
      =1 adata_0000_next_offset   +4 ,
      =5 adata_0000_file_nbr      +4 ,
      =9 adata_0000_name_offset   +4 ,
     =13 adata_0000_name_length   +4 ,
     =17 adata_0000_volser_offset +4 ,
     =21 adata_0000_volser_length +4 ,
     =25 adata_0000_member_offset +4 ,
     =29 adata_0000_member_length +4 ,
         adata_record_data_inputs
    decfilnb = C2D(adata_0000_file_nbr)
    decfilln = C2D(adata_0000_name_length)
    IF (decfilln > 0) THEN DO
      PARSE VAR adata_record_data_inputs ,
        =1 adata_filename.decfilnb +(decfilln) ,
        adata_record_data_inputs
    END
    decvolln = C2D(adata_0000_volser_length)
    IF (decvolln > 0) THEN DO
      PARSE VAR adata_record_data_inputs ,
        =1 adata_volser.decfilnb +(decvolln) ,
        adata_record_data_inputs
    END
    ELSE DO
      adata_volser.decfilnb = ""
    END
    decmbrln = C2D(adata_0000_member_length)
    IF (decmbrln > 0) THEN DO
      PARSE VAR adata_record_data_inputs ,
        =1 adata_member.decfilnb +(decmbrln) ,
        adata_record_data_inputs
    END
    ELSE DO
      adata_member.decfilnb = ""
    END
    adata_filename.0 = decfilnb
  END

  SAY adata_filename.0 "file(s) for input."
  DO f_x = 1 TO adata_filename.0
    SAY "//SYSIN     DD DISP=SHR,DSN=" || ,
      adata_filename.f_x"("adata_member.f_x")" ,
      "VOL=SER="adata_volser.f_x
  END

  IF (adata_record_data_inputs <> "") THEN DO
    SAY "Leftovers on 0000:"
    SAY " " C2X(adata_record_data_inputs)
  END

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ADATA Identification Record '0001'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0001_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0001_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ADATA Compilation Unit Start/End Record '0002'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0002_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0002_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Output File Information Record '000A'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_000A_Type:
  PARSE VAR adata_record_data ,
    =1 adata_000A_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Options File Information '000B'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_000B_Type:
  PARSE VAR adata_record_data ,
    =1 adata_000B_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Options record '0010'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0010_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0010_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 External Symbol Dictionary Record '0020'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0020_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0020_type            +1 ,
    =2 adata_0020_flags1          +1 ,
    =3 adata_0020_reserved1       +1 ,
    =5 adata_0020_esdid           +4 ,
    =9 adata_0020_reserved2       +4 ,
   =13 adata_0020_address         +4 ,
   =17 adata_0020_reserved3       +4 ,
   =21 adata_0020_section_length  +4 ,
   =25 adata_0020_ownerid         +4 ,
   =29 adata_0020_reserved4       +8 ,
   =37 adata_0020_extname_offset  +4 ,
   =41 adata_0020_extname_length  +4 ,
   =45 adata_0020_alias_offset    +4 ,
   =49 adata_0020_alias_length    +4 ,
       adata_record_data_leftovers

  decextln = C2D(adata_0020_extname_length)
  IF (decextln > 0) THEN DO
    PARSE VAR adata_record_data_leftovers ,
      =1 adata_0020_extname +(decextln) ,
         adata_record_data_leftovers
    esdid.adata_0020_esdid = adata_0020_extname
  END
  ELSE DO
    esdid.adata_0020_esdid = "NO NAME"
  END
  decaliln = C2D(adata_0020_alias_length)
  IF (decaliln > 0) THEN DO
    PARSE VAR adata_record_data_leftovers ,
      =1 adata_0020_alias   +(decextln) ,
         adata_record_data_leftovers
  END

  IF (adata_record_data_inputs <> "") THEN DO
    SAY "Leftovers on 0000:"
    SAY " " C2X(adata_record_data_inputs)
  END

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Source Analysis Record '0030'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0030_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0030_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Source Error Record '0032'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0032_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0032_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 DC/DS record '0034'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0034_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0034_esdid           +4 ,
    =5 adata_0034_type_flag       +1 ,
    =6 adata_0034_reserved1       +5 ,
   =11 adata_0034_stmt_nbr        +4 ,
   =15 adata_0034_operands_qty    +4 ,
   =19 adata_0034_operands_offset +4 ,
       adata_record_data_leftovers

  bittypfl = Char_To_Bits(adata_0034_type_flag)
  fldtypcs = "DS"
  IF (SUBSTR(bittypfl,1,1) = 1) THEN DO
    fldtypcs = "DC"
  END

  decopsqt = C2D(adata_0034_operands_qty)
  DO inp_x = 1 TO decinpqt
    PARSE VAR adata_record_data_inputs ,
      =1 adata_0034_operand_next    +4 ,
      =5 adata_0034_operand_loc     +4 ,
      =9 adata_0034_operand_dupl    +4 ,
     =13 adata_0034_operand_bitoff  +1 ,
     =14 adata_0034_operand_type_a  +1 ,
     =15 adata_0034_operand_type_e  +1 ,
     =16 adata_0034_operand_type_p  +1 ,
     =17 adata_0034_reserved2       +4 ,
     =21 adata_0034_operand_val_qty +4 ,
     =25 adata_0034_operand_val_off +4 ,
         adata_record_data_inputs

    decopslc = C2D(adata_0034_operand_loc)
  END

  IF (adata_record_data_inputs <> "") THEN DO
    SAY "Leftovers on 0034:"
    SAY " " C2X(adata_record_data_inputs)
  END

  RETURN return_code
    SAY C2X(adata_0034_esdid) "+"decopslc fldtypcs

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 DC Extension Record '0035'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0035_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0035_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Machine Instruction Record '0036'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0036_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0036_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Relocation Dictionary Record '0040'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0040_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0040_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Symbol Record '0042'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0042_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0042_esdid           +4 ,
    =5 adata_0042_stmt_nbr        +4 ,
    =9 adata_0042_loc_ctr         +4 ,
   =13 adata_0042_symbol_type     +1 ,
   =14 adata_0042_duplication     +4 ,
   =17 adata_0042_type_attrib     +1 ,
   =18 adata_0042_type_assembler  +4 ,
   =22 adata_0042_type_program    +4 ,
   =26 adata_0042_attrib_length   +4 ,
   =30 adata_0042_attrib_int      +4 ,
   =32 adata_0042_attrib_scale    +4 ,
   =33 adata_0042_symbol_flag1    +1 ,
   =34 adata_0042_reserved1       +7 ,
   =41 adata_0042_symbol_offset   +4 ,
   =45 adata_0042_symbol_length   +4 ,
       adata_record_data_leftovers

  SELECT
    WHEN (adata_0042_symbol_type = '00'x) THEN DO
      adata_0042_symbol_name = ,
        "X'00' Undefined name"
      symopsnm = "*UND"
    END
    WHEN (adata_0042_symbol_type = '01'x) THEN DO
      adata_0042_symbol_name = ,
        "X'01' CSECT / RSECT name"
      symopsnm = "CSECT"
    END
    WHEN (adata_0042_symbol_type = '02'x) THEN DO
      adata_0042_symbol_name = ,
        "X'02' DSECT name"
      symopsnm = "DSECT"
    END
    WHEN (adata_0042_symbol_type = '03'x) THEN DO
      adata_0042_symbol_name = ,
        "X'03' Common section name"
      symopsnm = "CSN"
    END
    WHEN (adata_0042_symbol_type = '04'x) THEN DO
      adata_0042_symbol_name = ,
        "X'04' Dummy External DSECT name (DXD)"
      symopsnm = "DXD"
    END
    WHEN (adata_0042_symbol_type = '05'x) THEN DO
      adata_0042_symbol_name = ,
        "X'05' V-type constant name"
      symopsnm = "Vcn"
    END
    WHEN (adata_0042_symbol_type = '06'x) THEN DO
      adata_0042_symbol_name = ,
        "X'06' Qualifier"
      symopsnm = "Q"
    END
    WHEN (adata_0042_symbol_type = '07'x) THEN DO
      adata_0042_symbol_name = ,
        "X'07' EXTRN/WXTRN name"
      symopsnm = "EXTRN"
    END
    WHEN (adata_0042_symbol_type = '08'x) THEN DO
      adata_0042_symbol_name = ,
        "X'08' LOCTR name"
      symopsnm = "LOCTR"
    END
    WHEN (adata_0042_symbol_type = '09'x) THEN DO
      adata_0042_symbol_name = ,
        "X'09' Duplicate name"
      symopsnm = "dupe"
    END
    WHEN (adata_0042_symbol_type = '0A'x) THEN DO
      adata_0042_symbol_name = ,
        "X'0A' Literal name"
      symopsnm = "LIT"
    END
    WHEN (adata_0042_symbol_type = '0B'x) THEN DO
      adata_0042_symbol_name = ,
        "X'0B' *-in-literal name"
      symopsnm = "L*T"
    END
    WHEN (adata_0042_symbol_type = '0C'x) THEN DO
      adata_0042_symbol_name = ,
        "X'0C' EQU name"
      symopsnm = "EQU"
    END
    WHEN (adata_0042_symbol_type = '0D'x) THEN DO
      adata_0042_symbol_name = ,
        "X'0D' Ordinary label"
      symopsnm = "ORD"
    END
    WHEN (adata_0042_symbol_type = '0E'x) THEN DO
      adata_0042_symbol_name = ,
        "X'0E' Unresolvable EQU, DC, or DS symbol"
      symopsnm = "???"
    END
    OTHERWISE DO
      adata_0042_symbol_name = ,
        C2X(adata_0042_symbol_type) "Unsupported value"
      symopsnm = "err"
    END
  END

  usresdid = esdid.adata_0042_esdid
  usrsymln = C2D(adata_0042_symbol_length)
  IF (usrsymln > 0) THEN DO
    PARSE VAR adata_record_data_leftovers ,
      =1 adata_0042_symbol +(usrsymln) ,
         adata_record_data_leftovers
  END
  ELSE DO
    adata_0042_symbol = "unnamed"
  END

  SAY adata_0042_symbol,
    symopsnm ,
    C2D(adata_0042_duplication) adata_0042_type_assembler ,
    adata_0042_attrib_length "        /*" ,
    usresdid "+" C2D(adata_0042_loc_ctr)

  IF (adata_record_data_inputs <> "") THEN DO
    SAY "Leftovers on 0042:"
    SAY " " C2X(adata_record_data_inputs)
  END

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Symbol and Literal Cross Reference Record '0044'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0044_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0044_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Register Cross Reference Record '0045'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0045_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0045_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Library Record '0060'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0060_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0060_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Library Member and Macro Cross Reference Record '0062'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0062_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0062_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 User-supplied Information Record '0070'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0070_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0070_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 USING Map Record '0080'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0080_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0080_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Statistics record '0090'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Adata_0090_Type:
  PARSE VAR adata_record_data ,
    =1 adata_0090_field1          +1 ,
       adata_record_data_leftovers


  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert a character value to its bitstring value.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Char_To_Bits: Procedure Expose BITS
  hex_data = C2X(ARG(1))
  bit_string = ""
  Do d_x = 1 TO LENGTH(hex_data)
    half_byte = SUBSTR(hex_data,d_x,1)
    bit_string = bit_string || BITS.half_byte
  End
  bit_string = STRIP(bit_string,"B"," ")
  Return bit_string

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

