/*----------------------------- REXX -------------------------------*/
/*                                                                  */
/* LIB: CLIST(IDIEXITN)                                             */
/* GDE: IDIUGB00.BOO Fault Analyzer User's Guide and Reference      */
/*      KENNETH E. TOMIAK                                           */
/* DOC: THIS REXX EXIT provides fault analyzer with any             */
/*      notify changes.                                             */
/*                                                                  */
/* Input: ENV. and NFY.                                             */
/*                                                                  */
/*                                                                  */
/*------------------------------------------------------------------*/

THE_BEGINNING:
    "IDIWTO notify exit invoked."
    exit 0

    Call Initialization_Routines
    Call Main_Logic
    Call Wrapup_Routines
    exit exit_rc

Initialization_Routines:
    exit_rc = 0
    Return

Main_Logic:
    call xmit_hist
    Return

Wrapup_Routines:
    Return

xmit_hist:
/* REXX */
/*********************************************************************/
/*                                                                   */
/*   This exit can optionally be used with IBM Fault Analyzer for    */
/*   OS/390 to provide automatic transmit of fault entries created   */
/*   on one system to another where these can be received and        */
/*   imported into a local history file.                             */
/*                                                                   */
/*   On entry, two stems are provided:                               */
/*   - ENV                                                           */
/*   - NFY                                                           */
/*   Both of these data areas are described in the User's Guide and  */
/*   Reference.                                                      */
/*                                                                   */
/*   To use the exit, the name of the EXEC (in this example,         */
/*   IDISREP is used, but this can be any name) must be specified    */
/*   in an EXITS option as follows:                                  */
/*                                                                   */
/*     EXITS(NOTIFY(REXX((IDISXNFY)))                                */
/*                                                                   */
/*   For the exit to be invoked by Fault Analyzer, it must be made   */
/*   available via the IDIEXEC DDname.                               */
/*                                                                   */
/*********************************************************************/
nodeid   = 'MSHTECH'                     /* <--- verify/change */
userid   = 'IDIROBOT'                    /* <--- verify/change */
jobname = strip(env.job_name)
queue "//"jobname" JOB (0547,0000),'TECHSRV - KTOMIAK',             "
queue "//             CLASS=S,MSGCLASS=W,NOTIFY=&SYSUID             "
queue "//*                                                          "
queue "//* LIB: DSN=C547KTO.MSH.CLIST(IDIEXITR)                     "
queue "//* GDE:                                                     "
queue "//*      KENNETH E. TOMIAK                                   "
queue "//*      SCHUNK AND ASSOCIATES, INC.                         "
queue "//*      P.O. BOX 474                                        "
queue "//*      NEW PALTZ, NY 12561-0474                            "
queue "//*      U.S.A.                                              "
queue "//*      PHONE (845) 256-1010                                "
queue "//*      FAX   (845) 256-1011                                "
queue "//*      WEB: WWW.SCHUNK-ASSOCIATES.COM                      "
queue "//* DOC: THIS JOB                                            "
queue "//*                                                          "
queue "//STEP001 EXEC PGM=IKJEFT01"
queue "//SYSTSPRT DD  SYSOUT=*"
queue "//SYSPRINT DD  SYSOUT=*"
queue "//SYSTSIN  DD  *"
/* Split TSO XMIT command over two data records that must be
   padded with blanks to 80 bytes */
rec = "XMIT" nodeid||"."||userid "DA('"||strip(nfy.IDIHIST)||"') -"
if (length(rec) < 80) then rec = rec||copies(' ',80-length(rec))
queue rec
rec = "MEMBER("||strip(ENV.FAULT_ID)||") NONOTIFY"
if (length(rec) < 80) then rec = rec||copies(' ',80-length(rec))
queue rec
queue '/*'
/* 'Submit' the stacked TSO batch job */
n = queued()
"IDIALLOC DD(DD1) SYSOUT PGM(INTRDR)"
address mvs "EXECIO" n "DISKW DD1 (FINIS"
"IDIFREE DD(DD1)"
say 'Fault entry' strip(ENV.FAULT_ID) 'sent to' nodeid||'.'||userid
return
