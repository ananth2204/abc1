/* rexx */
Rexx_BENCHMRK:
  ssrv = SYSVAR("SYSSRV")
  rexxpgm_version = "01.01"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(BENCHMRK)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Purpose:  Determine how many service units it takes to execute
           how an instruction is coded. This would let you choose
           the more efficient coding technique when performance
           is important to you.
 Abstract: First we loop x times to get a feel for how long the
           loop logic takes, then time an instruction coded using
           different coding styles. We then divide the used number
           of service units by how many times we looped to
           determine a per instruction cost.
 Syntax:   %benchmrk |#|
           # = how many time you want to loop.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180407    Programming Using The Kenneth Tomiak Method.
               2) Stylize using:
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               5) Updated Ctlblk_Jobspecs.
----- -------- --------------------------------------------------------
01.00 20030326 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE UPPER VAR all_my_arguments upper_arguments
  IF (POS(upper_arguments,"DEBUG(") > 0) THEN DO
    PARSE VAR upper_arguments . "DEBUG(" debug_level ")" .
    IF (debug_level = "") THEN DO
      debug_level = 1
    END
    SAY "Debug level:" debug_level
  END
  ELSE DO
    debug_level = 0
  END

  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  PARSE VAR all_my_arguments x_times other_parameters_are_not_used
  IF (debug_level >= 1) THEN DO
    SAY LEFT("= PARM:" x_times,77) "="
    SAY COPIES("=",79)
  END
  IF (debug_level >= 1) THEN DO
    job_specs = Ctlblk_Jobspecs()
    SAY ""
    SAY COPIES("=",79)
    SAY LEFT("=" jobspecs_jobname ,
      jobspecs_ssibjbid jobspecs_stepname ,
      jobspecs_procname,77) "="
    SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
    SAY LEFT("= executing under" source_host_env,77) "="
    SAY LEFT("= as a" source_call_type,77) "="
    SAY LEFT("= on" DATE() "at" TIME()".",77) "="
    SAY COPIES("=",79)
    SAY ""
  END

  IF (x_times = "") THEN DO
    x_times = 5000
  END
  IF (DATATYPE(x_times) <> "NUM") THEN DO
    SAY COPIES("*",79)
    SAY LEFT("* ERROR:" x_times "is not numeric.",77) "*"
    SAY COPIES("*",79)
    return_code = 16
  END

  SAY ""
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  SAY "Just getting started used" tsrv "service units."
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  SAY ""
  SAY "Looping" x_times "TIME(s)."

  SAY ""
  SAY "Timed loop #1 DO..END"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #1 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #2 a=b"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
    a=b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #2 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #3 a = b"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
    a = b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #3 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #4 a = , comment and b on next line"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
    a = , /* a continued statement */
      b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #4 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #5 a = , comment continued on the next line," ,
    "and b on the third line"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
    a = /* a comment continued   ,
           to this line */,
      b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #5 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #6 is a comment inside the DO loop"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
  /* copy the contents of variable b into variable a. */
    a = b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #6 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #7 is a comment flower box inside the DO loop"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
  /****************************************************
   * copy the contents of variable b into variable a. *
   ****************************************************/
    a = b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #7 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  SAY ""
  SAY "Timed loop #9 is a comment block inside the DO loop"
  ssrv = SYSVAR("SYSSRV")
  DO x_times
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This comment uses the Programming Using The Kenneth Tomiak Method.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
    a = b
  END
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  isrv = tsrv / x_times
  SAY "Loop #9 used" tsrv "service units at a per instruction" ,
    "cost of" isrv"."

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  IF (debug_level >= 1) THEN DO
    SAY COPIES("=",79)
    SAY LEFT("= End of execution at:" DATE() TIME(),77) "="
    SAY COPIES("=",79)
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
