/* rexx */
/* We first need rexx in comment if compiled or read from SYSPROC. */
Rexx_DB2REXX:
  rexxpgm_version = "01.01"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(DB2REXX)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Connect to a DB2 subsystem and use a cursor to fetch
           rows. In this example:
           SELECT * FROM SYSIBM.SYSUSERAUTH

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180426 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using template $putktm:
      20180423    Programming Using The Kenneth Tomiak Method.
               2) Converted CALL to function_rc = ().
               3) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20000124 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original base code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE ARG subsystem nothing_more
  SAY "Attempt to connect to subsystem("subsystem")"
  rows_to_fetch = 99
  IF (SYSVAR("SYSISPF") = "ACTIVE") THEN DO
    SAY "ISPF is active"
    ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
    "clear"
  END
  function_rc = Init_Types()
  ADDRESS TSO "SUBCOM DSNREXX"
  db2rc = RC
  SAY "SUBCOM dsnrexx, rc="db2rc
  IF (db2rc <> 0) THEN DO
    SAY "Creating new DB2 environment"
    S_RC = RXSUBCOM("ADD","DSNREXX","DSNREXX")
    IF (S_RC <> 0) THEN DO
      SAY 'rxSUBCOM failed, rc='s_rc
      EXIT 16
    END
  END
  ELSE DO
    SAY "should not happen IF (all is well."
  END
  ADDRESS DSNREXX "CONNECT" subsystem
  IF (sqlcode <> 0) THEN DO
    SAY "Could not connect to" subsystem
    function_rc = Show_Sqlca()
    SIGNAL Abort_Run
  END
  sqlstmt = "SELECT * FROM SYSIBM.SYSUSERAUTH"
  ADDRESS DSNREXX "EXECSQL DECLARE C1 CURSOR FOR S1"
  IF (sqlcode <> 0) THEN DO
    function_rc = Show_Sqlca()
    SIGNAL Disconnect_Subsystem
  END
  ADDRESS DSNREXX "EXECSQL PREPARE S1 INTO:SQLDA FROM :SQLSTMT"
  IF (sqlcode <> 0) THEN DO
    SAY "Prepare failed"
    function_rc = Show_Sqlca()
    SIGNAL Disconnect_Subsystem
  END
  ADDRESS DSNREXX "EXECSQL OPEN C1"
  IF (sqlcode <> 0) THEN DO
    SAY "Open failed"
    function_rc = Show_Sqlca()
    SIGNAL Disconnect_Subsystem
  END
  max_fetch = 0
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
Fetch_It:
  ADDRESS DSNREXX "EXECSQL FETCH C1 USING DESCRIPTOR :SQLDA"
  IF (sqlcode = 100) THEN DO
    SAY "100 already"
    SIGNAL Close_It
  END
  IF (sqlcode <> 0) THEN DO
    function_rc = Show_Sqlca()
    SIGNAL Disconnect_Subsystem
  END
  max_fetch = max_fetch + 1
  Sqln = SQLDA.SQLD
  IF (max_fetch = 1) THEN DO
    cols = ''
    DO ix = 1 TO sqln
      function_rrc =  Look_At_Types()
      cols = cols SQLDA.ix.sqlname"{"sql_type"}"
    END
    SAY cols
  END
  SAY "/*                     " max_fetch "                  */"
  IF (sqln > 1) THEN DO
    cols = ""
    DO yx = 1 TO sqln
      cols = cols SQLDA.yx.sqldata
    END
    SAY cols
  END
  /* */
  IF (max_fetch < rows_to_fetch) THEN DO  /* set max here */
    SIGNAL Fetch_It
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
Close_It:
  ADDRESS DSNREXX "EXECSQL CLOSE C1"
  IF (sqlcode <> 0) THEN DO
    function_rc = Show_Sqlca()
    SIGNAL Disconnect_Subsystem
  END
  SIGNAL Disconnect_Subsystem

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Commit tells DB2 we are ending normally.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Commitit:
  ADDRESS DSNREXX "EXECSQL COMMIT"
  IF (sqlcode <> 0) THEN DO
    SAY "commit"
    function_rc = Show_Sqlca()
    SIGNAL Disconnect_Subsystem
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Free the connection to DB2.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Disconnect_Subsystem:
  ADDRESS DSNREXX "DISCONNECT"
  IF (sqlcode <> 0) THEN DO
    SAY "Disconnect failed"
    function_rc = Show_Sqlca()
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Remove the DSNREXX support.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Abort_Run:
  S_RC = RXSUBCOM("DELETE","DSNREXX","DSNREXX")
  SAY "rxSUBCOM="s_rc
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Show what the SQL Communication Area returned.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Show_Sqlca:
  SAY "sqlcode="sqlcode,
      "sqlerrmc="sqlerrmc,
      "sqlerrp="sqlerrp
  SAY "sqlerrd.1="sqlerrd.1,
      "  .2="sqlerrd.2,
      "  .3="sqlerrd.3,
      "  .4="sqlerrd.4,
      "  .5="sqlerrd.5,
      "  .6="sqlerrd.6
  SAY "sqlwarn.0="sqlwarn.0,
      "  .1="sqlwarn.1,
      "  .2="sqlwarn.2,
      "  .3="sqlwarn.3,
      "  .4="sqlwarn.4,
      "  .5="sqlwarn.5,
      "  .6="sqlwarn.6,
      "  .7="sqlwarn.7,
      "  .8="sqlwarn.8,
      "  .9="sqlwarn.9,
      "  .10="sqlwarn.10
  SAY "sqlstate="sqlstate
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Look at the type to know what kind of column it is.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Look_At_Types:
  SQL_Type = SQLDA.ix.SQLTYPE
  null = SQL_Type//2
  IF (null) Then SQL_Type = SQL_Type - 1
  len = SQLDA.ix.SQLLEN
  prcsn = SQLDA.ix.SQLLEN.SQLPRECISION
  scale = SQLDA.ix.SQLLEN.SQLSCALE
  SELECT
    WHEN (SQL_Type = CHTYPE | ,
      SQL_Type = VCHTYPE | ,
      SQL_Type = LVCHTYPE | ,
      SQL_Type = GRTYP | ,
      SQL_Type = VGRTYP | ,
      SQL_Type = LVGRTYP) THEN DO
        SQL_Type = SQLTYPES.SQL_Type"("STRIP(len)")"
    END
    WHEN (SQL_Type = FLOTYPE) THEN DO
      SQL_Type = SQLTYPES.SQL_Type"("STRIP((len*4)-11) ")"
    END
    WHEN (SQL_Type = DCTYPE) THEN DO
      SQL_Type = SQLTYPES.SQL_Type"("STRIP(prcsn)","STRIP(scale)")"
    END
    OTHERWISE DO
      SQL_Type = SQLTYPES.sql_Type
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Define the types this code knows about.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Init_Types:
                  SQLTYPE.          = "UNKNOWN TYPE"
  DATYPE   = 384; SQLTYPES.DATYPE   = 'DATE'
  TITYPE   = 388; SQLTYPES.TITYPE   = 'TIME'
  TSTYPE   = 392; SQLTYPES.TSTYPE   = 'TIMESTAMP'
  VCHTYPE  = 448; SQLTYPES.VCHTYPE  = 'VARCHAR'
  CHTYPE   = 452; SQLTYPES.CHTYPE   = 'CHAR'
  LVCHTYPE = 456; SQLTYPES.LVCHTYPE = 'VARCHAR'
  VGRTYP   = 464; SQLTYPES.VGRTYP   = 'VARGRAPHIC'
  GRTYP    = 468; SQLTYPES.GRTYP    = 'GRAPHIC'
  LVGRTYP  = 472; SQLTYPES.LVGRTYP  = 'VARGRAPHIC'
  FLOTYPE  = 480; SQLTYPES.FLOTYPE  = 'FLOAT'
  DCTYPE   = 484; SQLTYPES.DCTYPE   = 'DECIMAL'
  INTYPE   = 496; SQLTYPES.INTYPE   = 'INTEGER'
  SMTYPE   = 500; SQLTYPES.SMTYPE   = 'SMALLINT'
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
