rexx_INVKDB2C: /* We still need rexx in comment if read from SYSPROC */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(INVKDB2C)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   INVKDB2C {SSID=db2_ssid}
 Overview: Allocate the subsystem specific datasets and
           launch the DSNTINST clist to configure a subsystem.

=======================================================================

 History of Modifications
 ------------------------
  When     Who      What you did
  -------- -------- ---------------------------------------------------
  20070727 KTomiak  Bail out if LIBDEFs are failing.
  20070601 KTomiak  Original code.

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Arg all_my_arguments
  Numeric Digits 12

rexx_Main_INVKDB2C:
  return_code = rexx_Initialize()
  If ((db2_debug_option = "ON") &,
      (sysvar_sysenv = "FORE")) then,
    trace ?ilrs
  else,
  If (db2_debug_option = "ON") then,
    trace ilrs
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
      return_code = rexx_Termination()
    End
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    rexx_version,
    rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  return_code = 0
  Parse var all_my_arguments,
    . "SSID=" db2_ssid " ",
    =1 . "ENV=" db2_environment " ",
    =1 . "DEBUG=" db2_debug_option " " .

  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysuid = SYSVAR("SYSUID")
  mvsvar_sysname = MVSVAR("SYSNAME")
  ssid_on_sysname. = ""
  ssid_on_sysname.DB2P = "IPCO"
  ssid_on_sysname.DB2C = "IPCO"
  ssid_on_sysname.DB2W = "IPCO"
  ssid_on_sysname.DB2M = "IDAT"
  ssid_on_sysname.DB2D = "IDAT"
  ssid_on_sysname.DB2T = "IDAT"
  db2_mlq. = ""
  Select
    When (db2_environment = "LIVE") then,
      Do
        db2_mlq.DB2M = "MAINT"
        db2_mlq.DB2D = "DEV"
        db2_mlq.DB2T = "TEST"
        db2_mlq.DB2P = "PROD"
        db2_mlq.DB2C = "CISP"
        db2_mlq.DB2W = "DW"
        if (mvsvar_sysname = "ISYS") then,
          do
            ssid_on_sysname.DB2M = "ISYS"
            db2_mlq.DB2M = "SANDBOX"
          end
      End
    Otherwise,
      db2_mlq.DB2M = "MAINTNW"
      db2_mlq.DB2D = "DEVNW"
      db2_mlq.DB2T = "TESTNW"
      db2_mlq.DB2P = "PRODNW"
      db2_mlq.DB2C = "CISPNW"
      db2_mlq.DB2W = "DWNW"
      if (mvsvar_sysname = "ISYS") then,
        do
          ssid_on_sysname.DB2M = "ISYS"
          db2_mlq.DB2M = "SBOXNW"
        end
  End
  ADDRESS ISPEXEC,
    "CONTROL ERRORS RETURN"
  msg_line.  = ""
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  if (ssid_on_sysname.db2_ssid = "") then,
    do
      ZEDSMSG = "Wrong selection!"
      msg_line.1 = "DB2 subsystem" db2_ssid","
      msg_line.3 = "is not defined to" source_uc_exec_name"."
      HX00 = '00'X
      ZEDLMSG = CENTER(msg_line.1,76,HX00),
                CENTER(msg_line.2,76,HX00),
                CENTER(msg_line.3,76,HX00),
                CENTER(msg_line.4,76,HX00),
                CENTER(msg_line.5,76,HX00)
      ADDRESS ISPEXEC,
        'SETMSG MSG(ISRZ001)'      /* SET MESSAGE WITH ALARM       */
      return 12
    end
  ADDRESS ISPEXEC,
    "LIBDEF ISPLLIB DATASET",
      "ID('DB2."db2_mlq.db2_ssid".SDSNEXIT'",
         "'DB2."db2_mlq.db2_ssid".SDSNLOAD')"
  call check_rc(RC)
  If (my_rc >< 0) Then,
    Do
      Say "Check which ENV you should be using."
      Return 12
    End
  ADDRESS ISPEXEC,
    "LIBDEF ISPMLIB DATASET",
      "ID('DB2."db2_mlq.db2_ssid".SDSNSPFM')"
  call check_rc(RC)
  If (my_rc >< 0) Then,
    Do
      Say "Check which ENV you should be using."
      Return 12
    End
  ADDRESS ISPEXEC,
    "LIBDEF ISPPLIB DATASET",
      "ID('DB2."db2_mlq.db2_ssid".SDSNSPFP')"
  call check_rc(RC)
  If (my_rc >< 0) Then,
    Do
      Say "Check which ENV you should be using."
      Return 12
    End
  ADDRESS ISPEXEC,
    "LIBDEF ISPSLIB DATASET",
      "ID('DB2."db2_mlq.db2_ssid".SDSNSPFS')"
  call check_rc(RC)
  If (my_rc >< 0) Then,
    Do
      Say "Check which ENV you should be using."
      Return 12
    End
  ADDRESS ISPEXEC,
    "LIBDEF ISPTLIB DATASET",
      "ID('DB2."db2_mlq.db2_ssid".SDSNSPFT')"
  call check_rc(RC)
  If (my_rc >< 0) Then,
    Do
      Say "Check which ENV you should be using."
      Return 12
    End
  ADDRESS TSO,
    "ALTLIB ACTIVATE APPLICATION(CLIST)",
      "DATASET('DB2."db2_mlq.db2_ssid".SDSNCLST')"
  call check_rc(RC)
  If (my_rc >< 0) Then,
    Do
      Say "Check which ENV you should be using."
      Return 12
    End
  ADDRESS ISPEXEC,
    "SELECT CMD(%DB2LIBP DB2."db2_mlq.db2_ssid")",
    "NEWAPPL("db2_ssid") PASSLIB"
  ADDRESS ISPEXEC,
    "SELECT CMD(%DSNTINST)",
    "NEWAPPL("db2_ssid") PASSLIB"
  if (rc > 8) then,
    call check_rc(RC)
  ADDRESS TSO,
    "ALTLIB DEACTIVATE APPLICATION(CLIST)"
  ADDRESS ISPEXEC,
    "LIBDEF  ISPTLIB"
  ADDRESS ISPEXEC,
    "LIBDEF  ISPSLIB"
  ADDRESS ISPEXEC,
    "LIBDEF  ISPPLIB"
  ADDRESS ISPEXEC,
    "LIBDEF  ISPMLIB"
  ADDRESS ISPEXEC,
    "LIBDEF  ISPLLIB"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
check_rc:
  parse arg my_rc
  if (my_rc = 0) then return 0
  failed_line = sigl - 4
  do ix = failed_line to sigl
    say sourceline(ix)
  end
  say "Line" sigl "=" my_rc
  Return my_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

