  DATA COPYRECS;
   RPTNODE = SYMGET('SYSPARM');                       /* UserMod */
    TITLE;
    INFILE NDMX0001 RECFM=VB;                         /* 1363862 */
    INPUT RECTYPE $ 3-4 @;
* ********************************************************************
* Licensed Materials - Property of IBM
*
* 5655-X01 IBM(R) Sterling Connect:Direct(R) for z/OS(R)
*
* (C) Copyright IBM Corp. 1982, 2011 All Rights Reserved
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
* ********************************************************************
* ONLY WANT COPY TERMINATION RECORDS;
      IF RECTYPE = 'CT' THEN DO;
         INPUT  @5 ENDHH PK1.     /* CTTIME BROKEN TO 4 PACKED LEN 1 */
                @6 ENDMM PK1.
                @7 ENDSS PK1.
                @8 ENDTT PK1.
                @9 ENDDTE PD4.   /* CTDATE */
                @13 STRTHH PK1.  /* CTSTIME BROKEN TO 4 PACKED LEN 1 */
                @14 STRTMM PK1.
                @15 STRTSS PK1.
                @16 STRTTT PK1.
                @17 STRTDTE PD4.       /* CTSDATE   */
                @21 CC $4.             /* CTSCC     */
                @25 MSGID $8.          /* CTMSGID   */
                @33 PROCNAME $8.       /* CTPROCNM       1363862*/
                @41 PROCNUM IB4.       /* CTPROCNO  */
                @45 STEPNAME $8.       /* CTSTEP    */
                @69 UID $8.            /* CTUID          1363862 */
                @77 MYNODE $16.        /* CTPNODE   */
                @93 OTHRNODE $16.      /* CTSNODE   */
                @109 THISNODE $1.      /* CTNODE    */
                @110 SENDIND $1.       /* CTFROM    */
                @112 COPYTYPE $CHAR1.@; /* CTTRANS2--CTPDSCPY */
*        ONLY WANT RECORDS FOR A SPECIFIC NODE NAME;  /* UserMod */
      IF (OTHRNODE ¬= RPTNODE) THEN DELETE;           /* UserMod */
*        ONLY WANT PDS COPIES;
         IF COPYTYPE = '1.......'B THEN DO; /* PDS COPY */
           IF THISNODE = 'P' THEN DO;
              PNODE = MYNODE;
              SNODE = OTHRNODE;
              END;
           ELSE DO;
              PNODE = OTHRNODE;
              SNODE = MYNODE;
              END;
           IF SENDIND = 'P' THEN DO;
              SENDNODE = PNODE;
              RCVNODE = SNODE;
              END;
           ELSE DO;
              SENDNODE = SNODE;
              RCVNODE = PNODE;
              END;
           ENDDTE = DATEJUL(ENDDTE);
           DATE = DATEJUL(STRTDTE);
           INPUT @129 INBYTES IB8.      /* CTINBYTE  */
                 @137 INRECS IB4.       /* CTINRECN  */
                 @141 INBLKS IB4.       /* CTINBLK   */
                 @145 SNDBYTS IB8.      /* CTSBYTES  */
                 @153 OUTBYTES IB8.     /* CTOTBYTE  */
                 @161 OUTRECS IB4.      /* CTOTRECN  */
                 @165 OUTBLKS IB4.      /* CTOTBLK   */
                 @169 RCVBYTS IB8.      /* CTRBYTES  */
                 @221 SDSNLEN IB2.
                 SDSNAME $VARYING64.SDSNLEN
                 @295 DDSNLEN IB2.
                 DDSNAME $VARYING64.DDSNLEN
                 @389 DSP2VSR IB2.
                 @391 DSP2VSS IB2. @;
                 IF DSP2VSR ¬= 0 THEN DO;
                   DSP2VSR + 1;             /* REL TO 0 */
                   INPUT @DSP2VSR NUMVSRS IB2. @;/*NUMBER OF VOLSERS */
                         VSRRBYTS = NUMVSRS * 6;/* 6 BYTES PER VOLSER*/
                         INPUT VOLSERR $VARYING200.VSRRBYTS @;
                 END;
                 IF DSP2VSS ¬= 0 THEN DO;
                   DSP2VSS + 1 ;
                   INPUT @DSP2VSS NUMVSSS IB2. @;
                         VSRSBYTS = NUMVSSS * 6;/* 6 BYTES PER VOLSER*/
                         INPUT VOLSERS $VARYING200.VSRSBYTS @;
                 END;
           IF INBYTES >= SNDBYTS THEN DO;
              IF INBYTES = SNDBYTS THEN
                COMFCTRR = 0;
              ELSE DO;
                TEMP1 = SNDBYTS/INBYTES;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRR = 100 * TEMP2;
              END;
           END;
           ELSE DO;
              IF INBYTES = SNDBYTS THEN
                COMFCTRR = 0;
              ELSE DO;
                TEMP1 = INBYTES/SNDBYTS;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRR = -100 * TEMP2;
              END;
           END;
           IF OUTBYTES >= RCVBYTS THEN DO;
              IF OUTBYTES = RCVBYTS THEN
                COMFCTRW = 0;
              ELSE DO;
                TEMP1 = RCVBYTS/OUTBYTES;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRW = 100 * TEMP2;
              END;
           END;
           ELSE DO;
              IF OUTBYTES = RCVBYTS THEN
                COMFCTRW = 0;
              ELSE DO;
                TEMP1 = OUTBYTES/RCVBYTS;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRW = -100 * TEMP2;
              END;
           END;
           STARTIME = HMS(STRTHH,STRTMM,STRTSS)+STRTTT/100;
           ENDTIME = HMS(ENDHH,ENDMM,ENDSS)+ENDTT/100;
           TRANTIME = 86400 * (ENDDTE - DATE) + ENDTIME - STARTIME;
           DROP ENDHH ENDMM ENDSS ENDTT ENDDTE STRTHH STRTTT STRTDTE
                OTHRNODE THISNODE SENDIND COPYTYPE
                SDSNLEN DDSNLEN DSP2VSR DSP2VSS;
           FORMAT DATE MMDDYY10.;
           FORMAT TRANTIME TIME10.2;
           FORMAT CC $HEX8.;
           OUTPUT;
          END;
      END;
  DATA MEMRECS;
    INFILE NDMX0001;
    INPUT RECTYPE $ 3-4 @;
      IF RECTYPE = 'MC' THEN DO;
         INPUT @41 PROCNUM IB4.
               @45 STEPNAME $8.
               @167 DMEMB $8.
               @175 SMEMB $8.;
         OUTPUT;
      END;
  DATA PDSRECS;
    SET COPYRECS MEMRECS;
  PROC SORT DATA=PDSRECS;
    BY PROCNUM STEPNAME;
  DATA PDSCOPY;
    SET PDSRECS;
    FILE FT20F001 N=PS LINE=CURLINE LINESLEFT=L;
      IF RECTYPE = 'CT' THEN DO;
         COPYCNT + 1;
         IF COPYCNT ¬= 1 THEN;
             PUT _PAGE_;
         PUT @45 'IBM Sterling Connect:Direct for z/OS PDS Copy Report';
         PUT @50 'NODE = ' MYNODE;
         PUT /;
         PUT @3
         'USERID      PROC #   PROC NAME    STEP NAME    TRANSMISSION IN
FORMATION';
         PUT @3
         '******      ******   *********    *********    ***************
****************************************************************';
         PUT /;
           PUT @3 UID @15 PROCNUM @24 PROCNAME @37 STEPNAME
               @50 DATE @61 'PNODE = ' PNODE @87 'SNODE = ' SNODE;
           PUT @50 'TRANSMISSION TIME = ' TRANTIME
               @87 'COMPLETION CODE = ' CC
               @114 'MSGID= ' MSGID;
           INFILE DMMSGFIL VSAM KEY=MSGID;
           INPUT @23 SHTXTLEN IB2. @;
           SHTXTLEN = SHTXTLEN - 2;
           INPUT SHTEXT $VARYING200.SHTXTLEN;
           UPSHTEXT = UPCASE(SHTEXT);
           PUT @50 UPSHTEXT;
           PUT @50 '====================================================
===========================';
           PUT @50 'SRC DSNAME IS ' SDSNAME;
           PUT @50 'DEST DSNAME IS ' DDSNAME;
* IF BYTES WERE TRANSFERRED (EVEN FOR A FAILED COPY) THEN DISPLAY THEM;
           IF CC < '00000008'X OR INBYTES ¬= 0 OR OUTBYTES ¬= 0 THEN DO;
             PUT @55 'SENDING NODE ==> ' SENDNODE
                 @89 'RECEIVING NODE ==> ' RCVNODE;
             PUT @55 'BYTES READ   ==> ' INBYTES
                 @89 'BYTES WRITTEN  ==> ' OUTBYTES;
             PUT @55 'BLOCKS READ  ==> ' INBLKS
                 @89 'BLOCKS WRITTEN ==> ' OUTBLKS;
             PUT @55 'RECS READ    ==> ' INRECS
                 @89 'RECS WRITTEN   ==> ' OUTRECS;
             PUT @55 'BYTES SENT   ==> ' SNDBYTS
                 @89 'BYTES RECEIVED ==> ' RCVBYTS;
             PUT @55 'COMPRESSION% ==> ' COMFCTRR
                 @89 'COMPRESSION%   ==> ' COMFCTRW;
             IF NUMVSSS > 1 THEN DO;
               VLSRLINE = CURLINE;
               POS = 1;
               DO WHILE (POS < VSRSBYTS);
                  VOL=SUBSTR(VOLSERS,POS,6);
                  IF POS = 1 THEN
                    PUT @55 'VOLSER       ==> ' VOL;
                  ELSE
                    PUT @72 VOL;
                  POS = POS + 6;
               END;
             END;
             ELSE
               PUT @55 'VOLSER       ==> ' VOLSERS @;
             IF NUMVSRS > 1 THEN DO;
               POS = 1;
               DO WHILE (POS < VSRRBYTS);
                  VOL=SUBSTR(VOLSERR,POS,6);
                  IF POS = 1 THEN
                    IF NUMVSSS > 1 THEN
                      PUT #VLSRLINE @89 'VOLSER         ==> ' VOL;
                    ELSE
                      PUT  @89 'VOLSER         ==> ' VOL;
                  ELSE
                    PUT @108 VOL;
                  POS = POS + 6;
               END;
             END;
             ELSE
               IF NUMVSSS > 1 THEN DO;
                 PUT #VLSRLINE @89 'VOLSER         ==> ' VOLSERR;
                 LOOPCTR = NUMVSSS - 2;
                 DO WHILE (LOOPCTR > 0);
                   PUT /;
                   LOOPCTR = LOOPCTR - 1;
                 END;
               END;
               ELSE
                 PUT @89 'VOLSER         ==> ' VOLSERR;
* ONLY WANT TO DISPLAY A MEMBER LIST IF THE COPY WORKED;
             IF CC < '00000008'X THEN DO;
               PUT  /;
               PUT @50 '============================'
                 / @50 'MEMBER LIST'
                 / @50 '============================';
             END;
           END;
           SAVEPNUM = PROCNUM;
           SAVECC = CC;
           SAVESRC = SDSNAME;
           SAVEDEST = DDSNAME;
           SAVESTEP = STEPNAME;
           RETAIN SAVEPNUM;
           RETAIN SAVECC;
           RETAIN SAVESRC;
           RETAIN SAVEDEST;
           RETAIN SAVESTEP;
      END;
* ASSIGN MEMBERS TO APPROPRIATE COPY STEPS;
* BASED ON THE PROCESS NUMBER AND STEP NAME;
      IF RECTYPE = 'MC' AND SAVECC < '00000008'X THEN DO;
        IF (PROCNUM = SAVEPNUM) AND (STEPNAME = SAVESTEP) THEN DO;
           IF SMEMB = '        ' THEN
             SMEMB = DMEMB;
           IF L = 59 THEN DO;
             PUT @45 'Connect:Direct PDS COPY REPORT (ARS00006)';
             PUT @45 'IBM Sterling Connect:Direct for z/OS PDS Copy Repo
rt';
             PUT @3 'SRC DSNAME IS ' SAVESRC;
             PUT @3 'DEST DSNAME IS ' SAVEDEST;
             PUT @50 'MEMBER LIST (CONT)';
             PUT @50 '******************';
           END;
           PUT @50 SMEMB @62 'TO    ' DMEMB;
        END;
      END;
