  DATA EXCEPT;
   RPTNODE = SYMGET('SYSPARM');                       /* UserMod */
    TITLE;
    INFILE NDMX0001 END=FINAL RECFM=VB;               /* 1363862 */
    FILE FT20F001;
    INPUT RECTYPE $ 3-4 @;
* ********************************************************************
* Licensed Materials - Property of IBM
*
* 5655-X01 IBM(R) Sterling Connect:Direct(R) for z/OS(R)
*
* (C) Copyright IBM Corp. 1982, 2011 All Rights Reserved
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
* ********************************************************************
*     ONLY WANT "FUNCTION TERMINATION" STATISTICS RECORDS;
      IF RECTYPE = 'CT' OR RECTYPE = 'RT' OR
         RECTYPE = 'RJ' OR RECTYPE = 'SW' THEN DO;
         TOTRECS + 1;                 /* COUNT NUM OF FUNCTIONS */
         IF RECTYPE = 'CT' THEN
            TOTCOPS + 1;              /* COUNT NUM OF COPIES    */
         IF RECTYPE = 'RT' THEN
            TOTRTS + 1;               /* COUNT NUM OF RUNTASKS  */
         IF RECTYPE = 'RJ' THEN
            TOTRJS + 1;               /* COUNT NUM OF SUBMITS   */
         IF RECTYPE = 'SW' THEN
            TOTSUBS + 1;
      IF RECTYPE = 'CT' THEN
         INPUT @17 STRDTE PD4.        /* XXSDATE   */
               @21 CC $4.             /* XXSCC     */
               @25 MSGID $8.          /* XXMSGID   */
               @33 PROCNAME $8.       /* XXPROCNM        1363862*/
               @41 PROCNUM IB4.       /* XXPROCNO  */
               @45 STEPNAME $8.       /* XXSTEP    */
               @69 UID $8.            /* XXUID     */
               @77 MYNODE $16.        /* XXPNODE   */
               @93 OTHRNODE $16.      /* XXSNODE   */
               @109 THISNODE $1.      /* XXNODE    */
               @110 SENDIND $1. @;    /* XXFROM    */
      IF RECTYPE = 'RT' OR RECTYPE = 'RJ' OR RECTYPE = 'SW' THEN
         INPUT @17 STRDTE PD4.        /* XXSDATE   */
               @21 CC $4.             /* XXSCC     */
               @25 MSGID $8.          /* XXMSGID   */
               @33 PROCNAME $8.       /* XXPROCNM        1363862*/
               @41 PROCNUM IB4.       /* XXPROCNO  */
               @45 STEPNAME $8.       /* XXSTEP    */
               @69 UID $8.            /* XXUID     */
               @77 UID56 $56.         /* XXUID     */
               @133 MYNODE $16.       /* XXPNODE   */
               @149 OTHRNODE $16.     /* XXSNODE   */
               @165 THISNODE $1. @;   /* XXNODE    */
*        ONLY WANT RECORDS FOR A SPECIFIC NODE NAME;  /* UserMod */
      IF (OTHRNODE ¬= RPTNODE) THEN DELETE;           /* UserMod */
*        ONLY WANT FAILED FUNCTION TERMINATION RECORDS;
         IF CC ¬= '00000000'X THEN DO;
            NZRECS + 1;               /* COUNT FAILED FUNCTIONS */
*           ASSIGN PNODE AND SNODE;
            IF THISNODE = 'P' THEN DO;
               PNODE = MYNODE;
               SNODE = OTHRNODE;
               END;
            ELSE DO;
               PNODE = OTHRNODE;
               SNODE = MYNODE;
               END;
            DATE = DATEJUL(STRDTE);  /* CONVERT DATE TO SAS VALUE */
            FORMAT DATE MMDDYY10.;   /* FORMAT DATE FOR OUTPUT    */
            IF RECTYPE = 'CT' THEN DO;
               NZCOPS + 1;           /* COUNT FAILED COPIES       */
*              ASSIGN SENDING AND RECEIVING NODES;
               IF SENDIND = 'P' THEN DO;
                  SENDNODE = PNODE;
                  RCVNODE = SNODE;
                  END;
               ELSE DO;
                  SENDNODE = SNODE;
                  RCVNODE = PNODE;
                  END;
*              DETERMINE WHICH TYPE OF COPY FAILED;
               INPUT @112 COPYTYPE $CHAR1. @;
               IF COPYTYPE = '1.......'B THEN
                 FUNCTION = 'PDS COPY    ';
               ELSE
                 FUNCTION = 'NON-PDS COPY';
*              GO AFTER SRC AND DEST DATASET NAMES;
               INPUT @221 SDSNLEN IB2.
                     SDSNAME $VARYING64.SDSNLEN
                     @295 DDSNLEN IB2.
                     DDSNAME $VARYING64.DDSNLEN @;
            END;
            IF RECTYPE = 'RT' THEN DO;
               NZRTS + 1;            /* COUNT FAILED RUNTASKS    */
*              ASSIGN NODE UPON WHICH TASK IS ATTACHED;
               IF SENDIND = 'P' THEN
                  SUBNODE = PNODE;
               ELSE
                  SUBNODE = SNODE;
               FUNCTION = 'RUNTASK';
               INPUT @167 PGMNAME $8. @;    /* RTMODNM   1363862*/
            END;
            IF RECTYPE = 'RJ' THEN DO;
               NZRJS + 1;             /* COUNT FAILED RUNJOBS     */
*              ASSIGN NODE WHERE JOB WILL RUN;
               IF SENDIND = 'P' THEN
                  SUBNODE = PNODE;
               ELSE
                  SUBNODE = SNODE;
               FUNCTION = 'RUNJOB';
               INPUT @189 DSP2DSN IB2.@;   /* RJDDSN    */
*              GO AFTER DATASET NAME CONTAINING JOB;
               IF DSP2DSN ¬= 0 THEN DO;
                 DSP2DSN + 1;               /* FOR BYTE REL TO 1 */
                 INPUT @DSP2DSN DSNLEN IB2.
                       DSNAME $VARYING200.DSNLEN @;   /* 1363862 */
               END;
            END;
            IF RECTYPE = 'SW' THEN DO;
               NZSUBS + 1                  /* COUNT FAILED SUBMITS */;
*              ASSIGN NODE UPON WHICH PROCESS IS SUBMITTED;
               IF SENDIND = 'P' THEN
                  SUBNODE = PNODE;
               ELSE
                  SUBNODE = SNODE;
               FUNCTION = 'SUBMIT';
*              GO AFTER DATASET NAME CONTAINING PROCESS;
               INPUT @323 DSP2DSN IB2.@;      /* PSSDSN# */
               IF DSP2DSN ¬= 0 THEN DO;
                 DSP2DSN + 1                /* FOR BYTE REL TO 1 */;
                 INPUT @DSP2DSN DSNLEN IB2.
                       DSNAME $VARYING200.DSNLEN @;   /* 1363862 */
               END;
            END;
         END;
         OUTPUT;
      END;
* MAKE COPY OF LAST RECORD WITH TRUE TOTALS SO THAT THEY DONT GET;
* LOST IN THE SORT;
 DATA LASTREC;
   SET EXCEPT END=FINAL;
   IF FINAL THEN DO;
     OUTPUT;
   END;
* ORDER RECS BY SNODE FOR OUTPUT;
 PROC SORT DATA=EXCEPT;
   BY SNODE UID PROCNUM;
* STICK LAST RECORD WITH TRUE TOTALS ONTO END OF SAS DATASET;
* THIS MEANS THAT THIS RECORD EXISTS SOMEWHERE IN THE SAS DATASET;
* AS WELL AS BEING THE LAST RECORD IN THE SAS DATASET;
 DATA FINALEX;
   SET EXCEPT LASTREC END=FINAL;
   FORMAT CC $HEX8.;
   FILE FT20F001 LINESLEFT=L;
*     FIRST TIME THRU OR NEW PAGE?;
      IF CC ¬= '00000000'X THEN;
        NZCOUNT + 1;
      IF NZCOUNT =1 THEN DO;
        PUT @45 'IBM Sterling Connect:Direct for z/OS Exception Report';
        PUT @50 'NODE = ' MYNODE;
        PUT /;
        PUT @3 'USERID      PROC #   PROC NAME   STEP NAME     EXCEPTION
 INFORMATION';
        PUT @3 '******      ******   *********   *********     *********
************************************************************************
**';
        PUT /;
      END;
      IF (L < 10 AND ¬FINAL AND NZCOUNT ¬= 1) THEN DO;
        PUT _PAGE_;
        PUT @45 'IBM Sterling Connect:Direct for z/OS Exception Report';
        PUT @50 'NODE = ' MYNODE;
        PUT /;
        PUT @3 'USERID      PROC #   PROC NAME   STEP NAME     EXCEPTION
 INFORMATION';
        PUT @3 '******      ******   *********   *********     *********
************************************************************************
**';
        PUT /;
      END;
*     SPECIAL OUTPUT FOR A FAILED COPY;
* DO NOT PROCESS LAST REC IN FILE--IT WILL HAVE ALREADY BEEN PROCESSED;
      IF CC ¬= '00000000'X AND ¬FINAL THEN DO;
        IF RECTYPE = 'CT' THEN DO;
            PUT @3 UID @15 PROCNUM @24 PROCNAME @36 STEPNAME
                @50 '** ' FUNCTION '**';
            PUT @50 DATE @61 'PNODE = ' PNODE @87 'SNODE = ' SNODE;
            PUT @50 'COMPLETION CODE = ' CC @87 'MSG ID = ' MSGID;
            PUT @50 'SENDING NODE ==> ' SENDNODE;
            PUT @50 'SRC DSNAME   ==> ' SDSNAME;
            PUT @50 'RECEIVING NODE ==> ' RCVNODE;
            PUT @50 'DEST DSNAME    ==> ' DDSNAME;
  *         GET SHORT MESSAGE TEXT;
            INFILE DMMSGFIL VSAM KEY=MSGID;
            INPUT @23 SHTXTLEN IB2. @;
            SHTXTLEN = SHTXTLEN - 2;
            INPUT SHTEXT $VARYING200.SHTXTLEN;
            UPSHTEXT = UPCASE(SHTEXT);
            PUT @50 UPSHTEXT;
           PUT '--------------------------------------------------------
------------------------------------------------------------------------
---';
         END;
         IF RECTYPE = 'RT' THEN DO;
  *         INCLUDE THIS OBSERVATION IN SAS DATASET BEING CREATED;
  *         SPECIAL OUTPUT FOR A FAILED RUNTASK;
            PUT @3 UID @15 PROCNUM @24 PROCNAME @36 STEPNAME
                @50 '** ' FUNCTION '**';
            PUT @50 DATE @61 'PNODE = ' PNODE @85 'SNODE = ' SNODE;
            PUT @50 'COMPLETION CODE = ' CC @85 'MSG ID = ' MSGID;
            PUT @50 'PROGRAM NAME = ' PGMNAME;
            PUT @50 'INTENDED NODE FOR PROGRAM EXECUTION = ' SUBNODE;
  *         GET SHORT MESSAGE TEXT;
            INFILE DMMSGFIL VSAM KEY=MSGID;
            INPUT @23 SHTXTLEN IB2. @;
            SHTXTLEN = SHTXTLEN - 2;
            INPUT SHTEXT $VARYING200.SHTXTLEN;
            UPSHTEXT = UPCASE(SHTEXT);
            PUT @50 UPSHTEXT;
               PUT '----------------------------------------------------
------------------------------------------------------------------------
---';
         END;
         IF RECTYPE = 'RJ' THEN DO;
  *         INCLUDE THIS OBSERVATION IN SAS DATASET BEING CREATED;
  *         SPECIAL OUTPUT FOR FAILED RUNJOBS;
            PUT @3 UID @15 PROCNUM @24 PROCNAME @36 STEPNAME
                @50 '** ' FUNCTION '**';
            PUT @50 DATE @61 'PNODE = ' PNODE @85 'SNODE = ' SNODE;
            PUT @50 'COMPLETION CODE = ' CC @85 'MSG ID = ' MSGID;
            PUT @50 'DATASET CONTAINING JOB = ' DSNAME;
            PUT @50 'INTENDED NODE FOR JOB SUBMISSION = ' SUBNODE;
  *         GET SHORT MESSAGE TEXT;
            INFILE DMMSGFIL VSAM KEY=MSGID;
            INPUT @23 SHTXTLEN IB2. @;
            SHTXTLEN = SHTXTLEN - 2;
            INPUT SHTEXT $VARYING200.SHTXTLEN;
            UPSHTEXT = UPCASE(SHTEXT);
            PUT @50 UPSHTEXT;
               PUT '----------------------------------------------------
------------------------------------------------------------------------
---';
         END;
  *         INCLUDE THIS OBSERVATION IN SAS DATASET BEING CREATED;
         IF RECTYPE = 'SW' THEN DO;
  *         SPECIAL OUTPUT FOR FAILED SUBMITS;
            PUT @3 UID @15 PROCNUM @24 PROCNAME @36 STEPNAME
                @50 '** ' FUNCTION '**';
            PUT @50 DATE @61 'PNODE = ' PNODE @85 'SNODE = ' SNODE;
            PUT @50 'COMPLETION CODE = ' CC @85 'MSG ID = ' MSGID;
            PUT @50 'DATASET CONTAINING PROCESS = ' DSNAME;
            PUT @50 'INTENDED NODE FOR PROCESS SUBMISSION = ' SUBNODE;
            INFILE DMMSGFIL VSAM KEY=MSGID;
            INPUT @23 SHTXTLEN IB2. @;
            SHTXTLEN = SHTXTLEN - 2;
            INPUT SHTEXT $VARYING200.SHTXTLEN;
            UPSHTEXT = UPCASE(SHTEXT);
            PUT @50 UPSHTEXT;
            PUT '-------------------------------------------------------
------------------------------------------------------------------------
---';
         END;
      END;
      IF FINAL THEN DO;
*       FIGURE OUT PERCENTAGES;
        IF TOTRECS = 0 THEN
          PERFPRCS = 0;
        ELSE
          PERFPRCS = (NZRECS / TOTRECS) * 100;
        PERFPRCS = ROUND(PERFPRCS,.1);
        IF TOTCOPS = 0 THEN
          PERFCOPS = 0;
        ELSE
          PERFCOPS = (NZCOPS / TOTCOPS) * 100;
        PERFCOPS = ROUND(PERFCOPS,.1);
        IF TOTRJS = 0 THEN
          PERFRJS = 0;
        ELSE
          PERFRJS = (NZRJS / TOTRJS) * 100;
        PERFRJS = ROUND(PERFRJS,.1);
        IF TOTRTS = 0 THEN
          PERFRTS = 0;
        ELSE
          PERFRTS = (NZRTS / TOTRTS) * 100;
        PERFRTS = ROUND(PERFRTS,.1);
        IF TOTSUBS = 0 THEN
          PERFSBS = 0;
        ELSE
          PERFSBS = (NZSUBS / TOTSUBS) * 100;
        PERFSBS = ROUND(PERFSBS,.1);
*       GO TO A NEW PAGE;
        PUT _PAGE_;
*       WRITE SUMMARY INFORMATION TO OUTPUT;
        PUT @45 'IBM Sterling Connect:Direct for z/OS Exception Report';
        PUT @50 'NODE = ' MYNODE;
        PUT 'SUMMARY INFORMATION';
        PUT '*******************';
        PUT /// NZRECS @8 'NON-SUCCESSFUL STEPS IN ' @35 TOTRECS @42 'PR
OCESS STEPS RUN OR';
        PUT   / '--> ' PERFPRCS @14 '% OF TOTAL PROCESS STEPS RUN COMPLE
TED WITH A NON-ZERO RETURN CODE';
       PUT //// NZCOPS @8 'NON-SUCCESSFUL COPIES IN ' @35 TOTCOPS @42 'C
OPY STEPS RUN OR';
        PUT   / '--> ' PERFCOPS @14 '% OF TOTAL COPY STEPS RUN COMPLETED
 WITH A NON-ZERO RETURN CODE';
       PUT //// NZRJS @8 'NON-SUCCESSFUL RUNJOBS IN ' @35 TOTRJS @42 'RU
NJOB STEPS RUN OR';
        PUT   / '--> ' PERFRJS @14 '% OF TOTAL RUNJOB STEPS RUN COMPLETE
D WITH A NON-ZERO RETURN CODE';
       PUT //// NZRTS @8 'NON-SUCCESSFUL RUNTASKS IN ' @35 TOTRTS @42 'R
UNTASK STEPS RUN OR';
        PUT   / '--> ' PERFRTS @14 '% OF TOTAL RUNTASK STEPS RUN COMPLET
ED WITH A NON-ZERO RETURN CODE';
       PUT //// NZSUBS @8 'NON-SUCCESSFUL SUBMITS IN ' @35 TOTSUBS @42'S
UBMIT STEPS RUN OR';
        PUT   / '--> ' PERFSBS @14 '% OF TOTAL SUBMIT STEPS RUN COMPLETE
D WITH A NON-ZERO RETURN CODE';
      END;
