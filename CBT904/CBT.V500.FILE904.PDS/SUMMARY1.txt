  DATA SUMMARY;
   RPTNODE = SYMGET('SYSPARM');                       /* UserMod */
    CALL SYMPUT('TOT',"0");                           /* 1363862 */
    INFILE NDMX0001 END=FINAL RECFM=VB;               /* 1363862 */
    INPUT RECTYPE $ 3-4 @;
* ********************************************************************
* Licensed Materials - Property of IBM
*
* 5655-X01 IBM(R) Sterling Connect:Direct(R) for z/OS(R)
*
* (C) Copyright IBM Corp. 1982, 2011 All Rights Reserved
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
* ********************************************************************
*     ONLY WANT FUNCTION TERMINATION RECORDS;
      IF RECTYPE = 'CT' OR RECTYPE = 'RT' OR
         RECTYPE = 'RJ' OR RECTYPE = 'SW' THEN DO;
      IF RECTYPE = 'RJ' OR RECTYPE = 'RT' OR RECTYPE = 'SW' THEN
         INPUT  @5 ENDHH PK1.    /* XXTIME BROKEN TO 4 PKEDLEN 1 */
                @6 ENDMM PK1.
                @7 ENDSS PK1.
                @8 ENDTT PK1.
                @9 ENDDTE PD4.       /* XXDATE    */
                @13 STRTHH PK1.  /* XXSTIME BROKEN TO 4 PKEDLEN 1 */
                @14 STRTMM PK1.
                @15 STRTSS PK1.
                @16 STRTTT PK1.
                @17 STRDTE PD4.      /* XXSDATE   */
                @21 CC IB4.          /* XXSCC     */
                @133 MYNODE $16.     /* XXXPNODE  */
                @149 OTHRNODE $16.   /* XXXSNODE  */
                @165 THISNODE $1.    /* XXXNODE   */
                @166 SUBIND $1. @;   /* XXXFROM   */
         IF RECTYPE = 'CT' THEN
         INPUT  @5 ENDHH PK1.    /* XXTIME BROKEN TO 4 PKEDLEN 1 */
                @6 ENDMM PK1.
                @7 ENDSS PK1.
                @8 ENDTT PK1.
                @9 ENDDTE PD4.       /* XXDATE    */
                @13 STRTHH PK1.  /* XXSTIME BROKEN TO 4 PKEDLEN 1 */
                @14 STRTMM PK1.
                @15 STRTSS PK1.
                @16 STRTTT PK1.
                @17 STRDTE PD4.      /* XXSDATE   */
                @21 CC IB4.          /* XXSCC     */
                @77 MYNODE $16.      /* XXXPNODE  */
                @93 OTHRNODE $16.    /* XXXSNODE  */
                @109 THISNODE $1.    /* XXXNODE   */
                @110 SUBIND $1.      /* XXXFROM   */
                @129 INBYTES IB8.    /* CTINBYTE   */
                @145 SNDBYTS IB8.    /* CTSBYTES   */
                @153 OUTBYTES IB8.   /* CTOTBYTE   */
                @169 RCVBYTS IB8.@;  /* CTRBYTES   */
*        ONLY WANT RECORDS FOR A SPECIFIC NODE NAME;  /* UserMod */
      IF (OTHRNODE ¬= RPTNODE) THEN DELETE;           /* UserMod */
* ASSIGN PNODE AND SNODE;
         IF THISNODE = 'P' THEN DO;
            PNODE = MYNODE;
            SNODE = OTHRNODE;
            END;
         ELSE DO;
            PNODE = OTHRNODE;
            SNODE = MYNODE;
            END;
         DATE = DATEJUL(STRDTE);       /* CONVERT JUL->SAS FOR MATH */
         STARTIME = HMS(STRTHH,STRTMM,STRTSS)+STRTTT/100;
         OUTPUT;
     END;
* SORT THE DATASET BY SNODE AND CHRONOLOGICALLY WITHIN SNODE;
  PROC SORT;
    BY SNODE DATE STARTIME;
* SET UP MACRO NAMES FOR "SUB SAS FILES" TO BE CREATED;
  DATA PARTFILE;
    SET SUMMARY END=EOF;
      BY SNODE;
      IF FIRST.SNODE THEN DO;
        COUNT + 1;
        CALL SYMPUT('DEPT'||LEFT(COUNT),COUNT);
      END;
      IF EOF THEN DO;
        COUNT + 1;
        CALL SYMPUT('TOT',COUNT);
        CALL SYMPUT('DEPT'||LEFT(COUNT),'LAST');      /* 1363862 */
      END;
     RUN;
* THIS MACRO BREAKS UP THE ORIGINAL SAS DATASET INTO "N" SUB FILES;
* WHERE "N" IS THE NUMBER OF UNIQUE SNODES IN THE DATASET;
* THIS RESULTS IN "N" SAS FILES, EACH FILE IN TIME SEQUENCE ORDER AND;
* SHARING A COMMON SNODE;
    %MACRO SUBSETS;
    DATA
    %DO NUM=1 %TO &TOT;
      DEPT&NUM
    %END;;
    SET SUMMARY;
      BY SNODE;
       IF FIRST.SNODE THEN
        COUNT + 1;
       %DO X=1 %TO &TOT;
         IF COUNT = &X THEN
          OUTPUT DEPT&X;
       %END;
    %MEND SUBSETS;
* THIS MACRO PROCESSES EACH SAS DATASET BROKEN BY SNODE ONE AT A TIME;
    %MACRO SUMIT;
      %DO X=1 %TO &TOT;
        DATA SUMIT;
          SET DEPT&X END=FINAL;
          TOTRECS + 1;
          ENDDTE = DATEJUL(ENDDTE);
*         HMS RETURNS SAS TIME VALUES FROM HHMMSS;
          ENDTIME = HMS(ENDHH,ENDMM,ENDSS)+ENDTT/100;
          TRANTIME = 86400 * (ENDDTE - DATE) + ENDTIME - STARTIME;
*                   {TRAN DAYS IN SECONDS}  + {TRAN TIMES IN SECONDS};
*         RETAIN TRANSITION TIME W/EACH OBSERVATION FOR TOTAL TRANTIM;
          TOTRANTM + TRANTIME;
          IF RECTYPE = 'CT' THEN DO;
*            RETAIN TRANTIME W/EACH COPY FOR TOTAL COPY TIME;
             COPYTIME + TRANTIME;
             TOTCOPS + 1;               /* COUNT COPIES */
             IF CC ¬= 0 THEN DO;
               NZCOPS + 1;              /* COUNT FAILED COPIES */
               NZRECS + 1;              /* COUNT FAILED FUNCTIONS */
             END;
*            RETAIN BYTES RECORDS AND BLOCKS READ AND WRITTEN WITH EACH;
*            COPY FOR TOTALS;
*            SUBIND = 'P' IMPLIES PNODE IS SENDING;
*            SUBIND = 'S' IMPLIES SNODE IS SENDING;
             IF SUBIND = 'P' THEN
               IF MYNODE = PNODE THEN DO;
                 TINBYTES + INBYTES;
                 TSNDBYTS + SNDBYTS;
                 END;
               ELSE DO;
                 TOUTBYTS + OUTBYTES;
                 TRCVBYTS + RCVBYTS;
               END;
             ELSE IF SUBIND = 'S' THEN
               IF MYNODE = SNODE THEN DO;
                 TINBYTES + INBYTES;
                 TSNDBYTS + SNDBYTS;
                 END;
               ELSE DO;
                 TOUTBYTS + OUTBYTES;
                 TRCVBYTS + RCVBYTS;
                 END;
          END;
          IF RECTYPE = 'RT' THEN DO;
             TOTRTS + 1;
             IF CC ¬= 0 THEN DO;
               NZRTS + 1;              /* COUNT FAILED RUNTASKS */
               NZRECS + 1;             /* COUNT FAILED FUNCTIONS*/
               END;
             ELSE DO;                  /* IF RUNTASK DIDN'T FAIL */
*              COUNT AND RETAIN RUNTASKS ATTACHED ON THIS NODE;
               IF (SUBIND = 'P' AND PNODE = MYNODE) OR
                  (SUBIND = 'S' AND SNODE=MYNODE) THEN
                   RTSONMY + 1;
               END;
          END;
          IF RECTYPE = 'RJ' THEN DO;
             TOTRJS + 1;               /* COUNT RUNJOBS         */
             IF CC ¬= 0 THEN DO;
               NZRJS + 1;              /* COUNT FAILED RUNJOBS  */
               NZRECS + 1;             /* COUNT FAILED FUNCTIONS*/
               END;
             ELSE DO;                  /* IF RUNJOB DIDN'T FAIL */
*              COUNT AND RETAIN RUNJOBS SUBMITTED ON THIS NODE;
               IF (SUBIND = 'P' AND PNODE = MYNODE) OR
                  (SUBIND = 'S' AND SNODE=MYNODE) THEN
                   RJSONMY + 1;
             END;
          END;
          IF RECTYPE = 'SW' THEN DO;
             TOTSUBS + 1;              /* COUNT SUBMITS         */
             IF CC ¬= 0 THEN DO;
               NZSUBS + 1;             /* COUNT FAILED SUBMITS  */
               NZRECS + 1;             /* COUNT FAILED FUNCTIONS*/
               END;
             ELSE DO;                  /* IF SUBMIT DIDN'T FAIL */
*              COUNT AND RETAIN SUBMITS ON THIS NODE;
               IF (SUBIND = 'P' AND PNODE = MYNODE) OR
                  (SUBIND = 'S' AND SNODE=MYNODE) THEN
                  SBSONMY + 1;
               END;
          END;
*        INCLUDE THESE OBSERVATIONS IN THE SAS DATASET BEING CREATED;
          OUTPUT;
* DETERMINE WHEN THE FIRST FUNCTION AND LAST FUNCTION HAPPENED;
* TO PRINT IN THE SUMMARY REPORT;
        DATA FUNCSS;
          SET SUMIT END=FINAL;
          IF _N_ = 1 THEN DO;
            FUNBEGT = STARTIME;
            FUNBEGD = DATE;
            RETAIN FUNBEGT FUNBEGD;
            FORMAT FUNBEGT TIME13.2;
            FORMAT FUNBEGD MMDDYY10.;
          END;
          IF FINAL THEN DO;
             FUNCFINT = ENDTIME;
             FUNCFIND = ENDDTE;
             FORMAT FUNCFINT TIME13.2;
             FORMAT FUNCFIND MMDDYY10.;
             OUTPUT;
          END;
*      DETERMINE WHEN THE FIRST AND LAST COPY HAPPENED FOR THRUPUT CALC;
        DATA COPYRECS;
          SET SUMIT;
            IF RECTYPE = 'CT' THEN
              OUTPUT;
        DATA STRTSTOP;
          SET COPYRECS END=FINAL;
          IF _N_ = 1 THEN DO;
             BEGINT = STARTIME;
             BEGIND = DATE;
             RETAIN BEGINT BEGIND;
             FORMAT BEGINT TIME13.2;
             FORMAT BEGIND MMDDYY10.;
           END;
           IF FINAL THEN DO;
             FINISHT = ENDTIME;
             FINISHD = ENDDTE;
*    DURATION IS BASED OFF OF TIME FROM BEGINNING OF FIRST COPY IN FILE;
*       AND THE END OF THE LAST COPY IN THE FILE;
             DURATION = 86400 * (FINISHD - BEGIND) + FINISHT - BEGINT;
             FORMAT FINISHT TIME13.2;
             FORMAT FINISHD MMDDYY10.;
             OUTPUT;
           END;
*  THIS MERGE STATEMENT WILL MERGE TWO SAS DATASET WITH ONE OBSERVATION;
* EACH. FUNCSS CONTAINS ALL THE CUMULATIVE TOTALS FROM THE SUMMARY DATA;
*      STEP AS WELL AS TIMES WHEN THE FIRST AND LAST FUNCTIONS OCCURRED;
*  BY PLACING FUNCSS ON THE RIGHT, WE WONT LOSE THE CORRECT CUMULATIVE;
*       TOTALS IN THE MERGE;
        DATA DTETIMES;
           MERGE STRTSTOP FUNCSS;
        DATA TOTALS;
          TITLE;
          FILE FT20F001;
          SET DTETIMES END=FINAL;
*         ANY MORE OBSERVATIONS?;
          IF FINAL THEN DO;
*           FIGURE PERCENTAGES;
            IF TOTRECS = 0 THEN DO;
              PERCCOP = 0;
              PERCRJS = 0;
              PERCRTS = 0;
              PERCSBS = 0;
              AVGFUNTM = 0;
              END;
            ELSE DO;
              PERCCOP = (TOTCOPS / TOTRECS) * 100;
              PERCCOP = ROUND(PERCCOP,.1);
              PERCRJS = (TOTRJS / TOTRECS) * 100;
              PERCRJS = ROUND(PERCRJS,.1);
              PERCRTS = (TOTRTS / TOTRECS) * 100;
              PERCRTS = ROUND(PERCRTS,.1);
              PERCSBS = (TOTSUBS / TOTRECS) * 100;
              PERCSBS = ROUND(PERCSBS,.1);
              AVGFUNTM = (TOTRANTM / TOTRECS);
            END;
            IF TOTCOPS = 0 THEN
              AVGCOPTM = 0;
            ELSE
              AVGCOPTM = (COPYTIME / TOTCOPS);
            IF DURATION = 0 THEN DO;
              THRUPUTS = 0;
              THRUPUTR = 0;
              END;
            ELSE DO;
              THRUPUTS = (TSNDBYTS / DURATION);
              THRUPUTS = ROUND(THRUPUTS,.001);
              THRUPUTR = (TRCVBYTS / DURATION);
              THRUPUTR = ROUND(THRUPUTR,.001);
            END;
*           WRITE TO OUTPUT;
            FORMAT DURATION TIME13.2;
            PUT @45 ' IBM Sterling Connect:Direct for z/OS  Summary Repo
rt';
            PUT @62 'NODE =  ' MYNODE;
            PUT / @3 'SNODE = ' SNODE;
            PUT // @3 'FIRST FUNCTION BEGAN EXECUTING ON ' @40 FUNBEGD '
AT ' FUNBEGT;
            PUT @3 'LAST FUNCTION FINISHED EXECUTING ON '  @40 FUNCFIND
'AT ' FUNCFINT;
            PUT ///;
      PUT @3 TOTRECS ' PROCESS STEPS WERE COMPLETED FOR THIS TIME PERIOD
.';
      PUT /// @6 TOTCOPS @12 'TOTAL COPY STEPS OR ' PERCCOP @41 '% OF TO
TAL STEPS RUN WERE COPIES';
      PUT /// @6 TOTRJS @12 'TOTAL RUNJOB STEPS OR ' PERCRJS @41 '% OF T
OTAL STEPS RUN WERE RUNJOBS';
            PUT / @12 RJSONMY @18 'RUNJOBS WERE SUBMITTED ON ' MYNODE;
       PUT /// @6 TOTRTS @12 'TOTAL RUNTASK STEPS OR ' PERCRTS @41 '% OF
 TOTAL STEPS RUN WERE RUNTASKS';
            PUT / @12 RTSONMY @18 'RUNTASKS WERE ATTACHED ON ' MYNODE;
       PUT /// @6 TOTSUBS @12 'TOTAL SUBMIT STEPS OR ' PERCSBS @41 '% OF
 TOTAL STEPS RUN WERE SUBMITS';
        PUT / @12 SBSONMY @18 'SUBMITS (WITHIN A PROCESS) ON ' MYNODE;
            SUCRECS = TOTRECS - NZRECS;
            PERCNZS = (NZRECS / TOTRECS) * 100;
            PERCNZS = ROUND(PERCNZS,.1);
            PERSUCS = 100 - PERCNZS;
     PUT //// @6 SUCRECS @12 'SUCCESSFUL STEPS OR ' PERSUCS @41 '% OF TO
TAL STEPS RUN COMPLETED WITH A ZERO RETURN CODE';
      PUT / @6 NZRECS @12 'UNSUCCESSFUL STEPS OR ' PERCNZS @41 '% OF TOT
AL STEPS RUN COMPLETED WITH A NON-ZERO RETURN CODE';
            PUT _PAGE_;
            PUT @45 ' IBM Sterling Connect:Direct for z/OS  Summary Repo
rt';
            PUT @62 'NODE = ' MYNODE;
            PUT / @3 'SNODE = ' SNODE;
            PUT ///;
            FORMAT TINBYTES COMMA32.;
            FORMAT TSNDBYTS COMMA32.;
            FORMAT TOUTBYTS COMMA32.;
            FORMAT TRCVBYTS COMMA32.;
            PUT @3 TINBYTES @45 'TOTAL BYTES WERE READ ';
            PUT / @3 TSNDBYTS @45 'TOTAL BYTES WERE SENT';
            PUT / @3 TOUTBYTS @45 'TOTAL BYTES WERE WRITTEN';
            PUT / @3 TRCVBYTS @45 'TOTAL BYTES WERE RECEIVED';
     PUT //// @3 TOTRANTM @15 'WAS THE TOTAL "FUNCTION" TIME (SPENT PERF
ORMING FUNCTIONS)';
       PUT // @3 AVGFUNTM @15 'WAS THE AVERAGE TIME TO COMPLETE A FUNCTI
ON';
       PUT // @3 COPYTIME @15 'WAS THE TOTAL "COPY" TIME (SPENT TRANSFER
RING DATA)';
       PUT // @3 AVGCOPTM @15 'WAS THE AVERAGE TIME TO COMPLETE A COPY';
           PUT /// @3 THRUPUTS @15 'BYTES/SECOND = EFFECTIVE SEND RATE';
          PUT / @3 THRUPUTR @15 'BYTES/SECOND = EFFECTIVE RECEIVE RATE';
            FORMAT TOTRANTM TIME10.2;
            FORMAT COPYTIME TIME10.2;
            FORMAT AVGFUNTM TIME10.2;
            FORMAT AVGCOPTM TIME10.2;
          END;
      %END;
    %MEND SUMIT;
  %SUBSETS;
  RUN;
  %SUMIT;
* RE-SORT THE DATASET BACK TO ITS ORIGINAL TIME ORDERED SEQUENCE;
* BEFORE PROCESSING THE DATASET AS A WHOLE;
  PROC SORT DATA=SUMMARY;
    BY DATE STARTIME;
  DATA ALLNODES;
    SET SUMMARY END=FINAL;
          TOTRECS + 1;
          DATE = DATEJUL(STRDTE);       /* CONVERT JUL->SAS FOR MATH */
          ENDDTE = DATEJUL(ENDDTE);
*         HMS RETURNS SAS TIME VALUES FROM HHMMSS;
          STARTIME = HMS(STRTHH,STRTMM,STRTSS)+STRTTT/100;
          ENDTIME = HMS(ENDHH,ENDMM,ENDSS)+ENDTT/100;
          TRANTIME = 86400 * (ENDDTE - DATE) + ENDTIME - STARTIME;
*                   {TRAN DAYS IN SECONDS}  + {TRAN TIMES IN SECONDS};
*         RETAIN TRANSITION TIME W/EACH OBSERVATION FOR TOTAL TRANTIM;
          TOTRANTM + TRANTIME;
          IF RECTYPE = 'CT' THEN DO;
*            RETAIN TRANTIME W/EACH COPY FOR TOTAL COPY TIME;
             COPYTIME + TRANTIME;
             TOTCOPS + 1;               /* COUNT COPIES */
             IF CC ¬= 0 THEN DO;
               NZCOPS + 1;              /* COUNT FAILED COPIES */
               NZRECS + 1;              /* COUNT FAILED FUNCTIONS */
             END;
*            RETAIN BYTES RECORDS AND BLOCKS READ AND WRITTEN WITH EACH;
*            COPY FOR TOTALS;
*            SUBIND = 'P' IMPLIES PNODE IS SENDING;
*            SUBIND = 'S' IMPLIES SNODE IS SENDING;
             IF SUBIND = 'P' THEN
               IF MYNODE = PNODE THEN DO;
                 TINBYTES + INBYTES;
                 TSNDBYTS + SNDBYTS;
                 END;
               ELSE DO;
                 TOUTBYTS + OUTBYTES;
                 TRCVBYTS + RCVBYTS;
               END;
             ELSE IF SUBIND = 'S' THEN
               IF MYNODE = SNODE THEN DO;
                 TINBYTES + INBYTES;
                 TSNDBYTS + SNDBYTS;
                 END;
               ELSE DO;
                 TOUTBYTS + OUTBYTES;
                 TRCVBYTS + RCVBYTS;
                 END;
          END;
          IF RECTYPE = 'RT' THEN DO;
             TOTRTS + 1;
             IF CC ¬= 0 THEN DO;
               NZRTS + 1;              /* COUNT FAILED RUNTASKS */
               NZRECS + 1;             /* COUNT FAILED FUNCTIONS*/
               END;
             ELSE DO;                  /* IF RUNTASK DIDN'T FAIL */
*              COUNT AND RETAIN RUNTASKS ATTACHED ON THIS NODE;
               IF (SUBIND = 'P' AND PNODE = MYNODE) OR
                  (SUBIND = 'S' AND SNODE=MYNODE) THEN
                  RTSONMY + 1;
               END;
          END;
          IF RECTYPE = 'RJ' THEN DO;
             TOTRJS + 1;               /* COUNT RUNJOBS         */
             IF CC ¬= 0 THEN DO;
               NZRJS + 1;              /* COUNT FAILED RUNJOBS  */
               NZRECS + 1;             /* COUNT FAILED FUNCTIONS*/
               END;
             ELSE DO;                  /* IF RUNJOB DIDN'T FAIL */
*              COUNT AND RETAIN RUNJOBS SUBMITTED ON THIS NODE;
               IF (SUBIND = 'P' AND PNODE = MYNODE) OR
                  (SUBIND = 'S' AND SNODE=MYNODE) THEN
                  RJSONMY + 1;
               END;
          END;
          IF RECTYPE = 'SW' THEN DO;
             TOTSUBS + 1;              /* COUNT SUBMITS         */
             IF CC ¬= 0 THEN DO;
               NZSUBS + 1;             /* COUNT FAILED SUBMITS  */
               NZRECS + 1;             /* COUNT FAILED FUNCTIONS*/
               END;
             ELSE DO;                  /* IF SUBMIT DIDN'T FAIL */
*              COUNT AND RETAIN SUBMITS ON THIS NODE;
               IF (SUBIND = 'P' AND PNODE = MYNODE) OR
                  (SUBIND = 'S' AND SNODE=MYNODE) THEN
                  SBSONMY + 1;
               END;
          END;
*        INCLUDE THESE OBSERVATIONS IN THE SAS DATASET BEING CREATED;
          OUTPUT;
* DETERMINE WHEN THE FIRST FUNCTION AND LAST FUNCTION HAPPENED;
* TO PRINT IN THE SUMMARY REPORT;
        DATA FUNCSS;
          SET ALLNODES END=FINAL;
          IF _N_ = 1 THEN DO;
            FUNBEGT = STARTIME;
            FUNBEGD = DATE;
            RETAIN FUNBEGT FUNBEGD;
            FORMAT FUNBEGT TIME13.2;
            FORMAT FUNBEGD MMDDYY10.;
          END;
          IF FINAL THEN DO;
             FUNCFINT = ENDTIME;
             FUNCFIND = ENDDTE;
             FORMAT FUNCFINT TIME13.2;
             FORMAT FUNCFIND MMDDYY10.;
             OUTPUT;
          END;
*      DETERMINE WHEN THE FIRST AND LAST COPY HAPPENED FOR THRUPUT CALC;
        DATA COPYRECS;
          SET ALLNODES;
            IF RECTYPE = 'CT' THEN
              OUTPUT;
        DATA STRTSTOP;
          SET COPYRECS END=FINAL;
          IF _N_ = 1 THEN DO;
             BEGINT = STARTIME;
             BEGIND = DATE;
             RETAIN BEGINT BEGIND;
             FORMAT BEGINT TIME13.2;
             FORMAT BEGIND MMDDYY10.;
           END;
           IF FINAL THEN DO;
             FINISHT = ENDTIME;
             FINISHD = ENDDTE;
*    DURATION IS BASED OFF OF TIME FROM BEGINNING OF FIRST COPY IN FILE;
*       AND THE END OF THE LAST COPY IN THE FILE;
             DURATION = 86400 * (FINISHD - BEGIND) + FINISHT - BEGINT;
             FORMAT FINISHT TIME13.2;
             FORMAT FINISHD MMDDYY10.;
             OUTPUT;
           END;
*  THIS MERGE STATEMENT WILL MERGE TWO SAS DATASET WITH ONE OBSERVATION;
* EACH. FUNCSS CONTAINS ALL THE CUMULATIVE TOTALS FROM THE SUMMARY DATA;
*      STEP AS WELL AS TIMES WHEN THE FIRST AND LAST FUNCTIONS OCCURRED;
*  BY PLACING FUNCSS ON THE RIGHT, WE WONT LOSE THE CORRECT CUMULATIVE;
*       TOTALS IN THE MERGE;
        DATA DTETIMES;
           MERGE STRTSTOP FUNCSS;
        DATA TOTALS;
          TITLE;
          FILE FT20F001;
          SET DTETIMES END=FINAL;
*         ANY MORE OBSERVATIONS?;
          IF FINAL THEN DO;
*           FIGURE PERCENTAGES;
            IF TOTRECS = 0 THEN DO;
              PERCCOP = 0;
              PERCRJS = 0;
              PERCRTS = 0;
              PERCSBS = 0;
              AVGFUNTM = 0;
              END;
            ELSE DO;
              PERCCOP = (TOTCOPS / TOTRECS) * 100;
              PERCCOP = ROUND(PERCCOP,.1);
              PERCRJS = (TOTRJS / TOTRECS) * 100;
              PERCRJS = ROUND(PERCRJS,.1);
              PERCRTS = (TOTRTS / TOTRECS) * 100;
              PERCRTS = ROUND(PERCRTS,.1);
              PERCSBS = (TOTSUBS / TOTRECS) * 100;
              PERCSBS = ROUND(PERCSBS,.1);
              AVGFUNTM = (TOTRANTM / TOTRECS);
            END;
            IF TOTCOPS = 0 THEN
              AVGCOPTM = 0;
            ELSE
              AVGCOPTM = (COPYTIME / TOTCOPS);
            IF DURATION = 0 THEN DO;
              THRUPUTS = 0;
              THRUPUTR = 0;
              END;
            ELSE DO;
              THRUPUTS = (TSNDBYTS / DURATION);
              THRUPUTS = ROUND(THRUPUTS,.001);
              THRUPUTR = (TRCVBYTS / DURATION);
              THRUPUTR = ROUND(THRUPUTR,.001);
            END;
*           WRITE TO OUTPUT;
            FORMAT DURATION TIME13.2;
            PUT @45 ' IBM Sterling Connect:Direct for z/OS  Summary Repo
rt';
            PUT @62 'NODE = ' MYNODE;
            PUT / @3 'SNODE = ALL SNODES';
            PUT // @3 'FIRST FUNCTION BEGAN EXECUTING ON ' @40 FUNBEGD '
AT ' FUNBEGT;
            PUT @3 'LAST FUNCTION FINISHED EXECUTING ON '  @40 FUNCFIND
'AT ' FUNCFINT;
            PUT ///;
      PUT @3 TOTRECS ' PROCESS STEPS WERE COMPLETED FOR THIS TIME PERIOD
.';
      PUT /// @6 TOTCOPS @12 'TOTAL COPY STEPS OR ' PERCCOP @41 '% OF TO
TAL STEPS RUN WERE COPIES';
      PUT /// @6 TOTRJS @12 'TOTAL RUNJOB STEPS OR ' PERCRJS @41 '% OF T
OTAL STEPS RUN WERE RUNJOBS';
            PUT / @12 RJSONMY @18 'RUNJOBS WERE SUBMITTED ON ' MYNODE;
       PUT /// @6 TOTRTS @12 'TOTAL RUNTASK STEPS OR ' PERCRTS @41 '% OF
 TOTAL STEPS RUN WERE RUNTASKS';
            PUT / @12 RTSONMY @18 'RUNTASKS WERE ATTACHED ON ' MYNODE;
       PUT /// @6 TOTSUBS @12 'TOTAL SUBMIT STEPS OR ' PERCSBS @41 '% OF
 TOTAL STEPS RUN WERE SUBMITS';
        PUT / @12 SBSONMY @18 'SUBMITS (WITHIN A PROCESS) ON ' MYNODE;
            SUCRECS = TOTRECS - NZRECS;
            PERCNZS = (NZRECS / TOTRECS) * 100;
            PERCNZS = ROUND(PERCNZS,.1);
            PERSUCS = 100 - PERCNZS;
     PUT //// @6 SUCRECS @12 'SUCCESSFUL STEPS OR ' PERSUCS @41 '% OF TO
TAL STEPS RUN COMPLETED WITH A ZERO RETURN CODE';
      PUT / @6 NZRECS @12 'UNSUCCESSFUL STEPS OR ' PERCNZS @41 '% OF TOT
AL STEPS RUN COMPLETED WITH A NON-ZERO RETURN CODE';
            PUT _PAGE_;
            PUT @45 ' IBM Sterling Connect:Direct for z/OS  Summary Repo
rt';
            PUT @62 'NODE = ' MYNODE;
            PUT / @3 'SNODE = ALL SNODES';
            PUT ///;
            FORMAT TINBYTES COMMA32.;
            FORMAT TSNDBYTS COMMA32.;
            FORMAT TOUTBYTS COMMA32.;
            FORMAT TRCVBYTS COMMA32.;
            PUT @3 TINBYTES @45 'TOTAL BYTES WERE READ ';
            PUT / @3 TSNDBYTS @45 'TOTAL BYTES WERE SENT';
            PUT / @3 TOUTBYTS @45 'TOTAL BYTES WERE WRITTEN';
            PUT / @3 TRCVBYTS @45 'TOTAL BYTES WERE RECEIVED';
     PUT //// @3 TOTRANTM @15 'WAS THE TOTAL "FUNCTION" TIME (SPENT PERF
ORMING FUNCTIONS)';
       PUT // @3 AVGFUNTM @15 'WAS THE AVERAGE TIME TO COMPLETE A FUNCTI
ON';
       PUT // @3 COPYTIME @15 'WAS THE TOTAL "COPY" TIME (SPENT TRANSFER
RING DATA)';
       PUT // @3 AVGCOPTM @15 'WAS THE AVERAGE TIME TO COMPLETE A COPY';
           PUT /// @3 THRUPUTS @15 'BYTES/SECOND = EFFECTIVE SEND RATE';
          PUT / @3 THRUPUTR @15 'BYTES/SECOND = EFFECTIVE RECEIVE RATE';
            FORMAT TOTRANTM TIME10.2;
            FORMAT COPYTIME TIME10.2;
            FORMAT AVGFUNTM TIME10.2;
            FORMAT AVGCOPTM TIME10.2;
          END;
