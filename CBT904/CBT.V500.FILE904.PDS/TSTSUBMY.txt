* ********************************************************************
* Licensed Materials - Property of IBM
*
* 5655-X01 Copyright IBM Corp. 2011
*
* All Rights Reserved
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
* ********************************************************************
TSTSUBMY TITLE '- SAMPLE STAGE 1-2 SUBMIT EXIT - 1.0.0'         46497
TSTSUBMY START ,                                                46497
         DGA$SAMP ,                                            DGA_STD
         COPY  DMGBLS
         DMOS                                                   46497
         LCLC  &LASTPTF,&UID
&LASTPTF SETC  'R000000'
&UID     SETC  ''       USE UP TO 8 CHARACTERS FOR LOCAL MOD
**********************************************************************
*                                                                    *
*                            CONNECT:Direct PROLOG                   *
*                                                                    *
* FUNCTION:       CONNECT:Direct STAGE 1-2 SUBMIT EXIT INTERFACE     *
*                                                                    *
* MODULE NAME:    TSTSUBMY (Connect:Direct SUBMIT exit)              *
*                                                                    *
* DATE WRITTEN:   April 2001                                         *
*                                                                    *
* ATTRIBUTES:     RENT,REUS (STAGE 2)                                *
*                 NORENT,NOREUS (STAGE 1)                            *
*                                                                    *
* INPUT:          R1->TCQE: THE CONNECT:Direct PROCESS CONTROL BLOCK *
*                                                                    *
* DESCRIPTION:   This assembler program executes as a Connect:Direct *
*                exit routine. It is intended to execute as a stage  *
*                (2) SUBMIT exit. It is designed to check the SNODE, *
*                AND iff the SNODE is coded in the table at the end  *
*                of this program, then it will check to see if the   *
*                process has requested EXTended COMPression. If so,  *
*                the process is changed dynamically to use standard  *
*                compression.                                   Tony *
*                                                                    *
*                 TO VIEW OUTPUT FROM DISPLAY, ALLOCATE DDNAME       *
*                 "SUBDSN" IN THE ADDRESS SPACE WHERE THIS PROGRAM   *
*                 WILL EXECUTE.                                      *
*                                                                    *
* Changes 2001-119 Comment out all of the DISPLAY macros. Sterling   *
*                 has an intermittent problem where the DISPLAY can  *
*                 cause an ABENDS0C6 at process submit time.    Tony *
*                                                                    *
* Changes 2002-171 Change exit to completely disable extended        *
*                 compression (I.E. COMPRESS=NO).               Tony *
*                                                                    *
* Changes 2006-027 Change exit to check for standard compression     *
*                 request, then disable it.                     Tony *
*                                                                    *
* Changes 2007-345 Changes with C:D z/OS v4.6. Use new DD of USRINFO *
*                 for DISPLAY requests instead of SUBDSN.       Tony *
*         2007-345 aded code to accomodate for larger format process *
*                 > 64K. Search on TCQTCX (4) occurrances.      Tony *
*                                                                    *
* Changes 2013-045 Add new special prefix (CD.SEI) for extended      *
*                 compression checking.    AJC13045             Tony *
**********************************************************************
         EJECT
         DMTCQE DSECT=YES
         EJECT
         DMTCQSH DSECT=YES
         EJECT
         DMSDESCR DSECT=YES
         EJECT
         DMDDESCR DSECT=YES
         EJECT
*---------------------------------------------------------------------*
*        LOCAL VARIABLE SECTION                                       *
*---------------------------------------------------------------------*
DSECT    DSECT
         DS   18F                     OS SAVE AREA
         DMWKAREA
 DEBUG LINKAGE=(R10,DEBUG1,DEBUG2)
DEBUG1   DS     D
DEBUG2   DS     D
TMPCNT   DS     H
DSECT#   EQU  *-DSECT                 LENGTH OF DSECT
*-------------------------------------------------------------------*
*     MAINLINE                                                      *
*-------------------------------------------------------------------*
*-------------------------------------------------------------------*
&DMCSECT SCENTER BASE=(R12),GETMAIN=DSECT#,                     1348110X
               AMODE=31,RMODE=24,LASTPTF=&LASTPTF,UID=&UID      1348110
&DMCSECT SCSTART WKAREA=WKAREA,WKAREA2=WKAREA2                  1348110
         USEBASE DSECT,R13           ADDRESSABILITY             1348110
*-------------------------------------------------------------------*
         L     R3,0(,R1)             LOAD TCQE ADDR
         USEBASE TCQE,R3
         LA    R2,0                  SET GOOD RC
         ST    R2,TQRTNCD            STORE RC
         LH    R11,TQSTMTN          @GET NUMBER OF STATEMENTS IN PROC
         EJECT
*-------------------------------------------------------------------*
*     DISPLAY some pertinent process information from the TCQE      *
*-------------------------------------------------------------------*
         SR      R9,R9               Zero register
         STH     R9,TMPCNT           Store temporary step count
         DISPLAY (C'&DMCSECT: Proc name   = ',TQPROCNM),(C,C),USRINFO
         DISPLAY (C'&DMCSECT: Proc #      = ',TQPROCNO),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: Unq  #      = ',TQUNPRNO),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: Ret= #      = ',TQRPRCNO),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: Step name   = ',TQCSTEP),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: # statements= ',TQSTMTN),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: Priority    = ',TQPRTY),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: Psess cls BY= ',TQPRSBYT),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: Psess cls BI= ',TQPRSBIT),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: P    Node   = ',TQPNODE),(C,C),USRINFO
         DISPLAY (C'&DMCSECT: S    Node   = ',TQSNODE),(C,C),USRINFO
*-------------------------------------------------------------------*
*     Move onto the TCQSH Control Block                             *
*-------------------------------------------------------------------*
         XR    R7,R7                 CLEAR R7
         ICM   R7,B'0011',TQCSPRD    GET OFFSET TO FIRST STATEMENT
         TM    TQFLAGA,TQGT64K       IS NEW FORMAT               TCQTCX
         BNO   OLDFMT                BRANCH IF NOT               TCQTCX
         SLL   R7,4                  X 16                        TCQTCX
OLDFMT   DS    0H                                                TCQTCX
         LR    R4,R3                 (TCQE)
         AR    R4,R7                 ADD TO TCQE ADDRESS
PROCLOOP EQU     *
         USEBASE TCQSH,R4            POINT TO STEP HEADER
         CLC     TSHFUNCD,=X'0050'   IS THIS A COPY?
         BNE     NEXTSTEP           $NO, SCRAM
*-------------------------------------------------------------------*
*     Check to see if the Node is permitted to use compress ext.    *
*-------------------------------------------------------------------*
         LA      R5,PREFIX1          Load address of prefix
         CLC     0(L'PREFIX1,R5),TQSNODE  Is this a speical prefix?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,PREFIX2          Load address of prefix
         CLC     0(L'PREFIX2,R5),TQSNODE  Is this a speical prefix?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,PREFIX3          Load address of prefix
         CLC     0(L'PREFIX3,R5),TQSNODE  Is this a speical prefix?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,PREFIX4          Load address of prefix
         CLC     0(L'PREFIX4,R5),TQSNODE  Is this a speical prefix?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,PREFIX5          Load address of prefix
         CLC     0(L'PREFIX5,R5),TQSNODE  Is this a speical prefix?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,PREFIX6          Load address of prefix  AJC13045
         CLC     0(L'PREFIX6,R5),TQSNODE  Is this a speical prefix?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,NODETAB          Load address of Node table
NODELOOP EQU     *
         CLC     0(4,R5),=F'0'       End of Table?
         BE      EXIT                Not found, then exit
         CLC     0(NODELEN,R5),TQSNODE   IS this node in the table?
         BE      NEXTCHCK            Yes, proceed to the next check
         LA      R5,NODELEN(,R5)     Bump to the next entry
         B       NODELOOP            Loop
*-------------------------------------------------------------------*
*     Check to see if the Process is using a special Class          *
*-------------------------------------------------------------------*
NEXTCHCK EQU     *
         DISPLAY (C'&DMCSECT: Snode Found in Table'),(C),USRINFO
         CLI     TQPRSBYT,X'00'      Special CLass?
         BNE     DISACOMP            No, Disable EXT COMP
         CLI     TQPRSBIT,X'80'      Special CLass?
         BNE     DISACOMP            No, Disable EXT COMP
         DISPLAY (C'&DMCSECT: Special Class '),(C),USRINFO
         B       EXIT                Yes, just exit
*
* IF THIS IS A MULTI-STEP PROCESS, AND YOU WANT TO GO TO THE
* NEXT STATEMENT IN THE PROCESS, ADD TSHRECLN TO R4. YOU WILL
* THEN BE POINTING AT THE NEXT TCQSH (STEP HEADER)
*
DISACOMP EQU     *
         DISPLAY (C'&DMCSECT: Disable ExtCmp'),(C),USRINFO
         LR      R7,R4               OFFSET IS FROM START OF TCQSH
         AH      R7,TSHCBHLN         POINT TO SRC DATASET DESCRIPTOR
         USEBASE SDESCR,R7           ADDRESSABILITY
         LR      R8,R7               POINT TO DEST DATASET DESCRIPTOR
         AH      R8,S1SVSLNG         IMMEDIATELY FOLLOWING SDESCR
         USEBASE DDESCR,R8           ADDRESSABILITY
         TM      D1FLAG1,D1DSN       IS DSN SPECIFIED?
         BNO     NEXTSTEP           $NO, FORGET IT.
         LR      R2,R4               BASE OF TCQSH
         AH      R2,D1DDSN           GET DISPLACEMENT TO DEST DSNAME
         XR      R9,R9               CLEAR R9
         ICM     R9,B'0011',0(R2)    SET LENGTH OF DSNAME
         AH      R9,=H'2'            ADD 2 FOR INCLUSIVE LEN
         DISPLAY (C'&DMCSECT: DEST DSNAME = ',2(R2)),(C,C),USRINFO,    *
               LEN=(,(R9))
         DISPLAY (C'&DMCSECT: B4-D1FLAG11 = ',D1FLAG11),(C,X),USRINFO
         SLR     R5,R5               Clear R5
         AH      R5,=H'2'            Set length to 2
         DISPLAY (C'&DMCSECT:    D1FLAG12 = ',D1FLAG12),(C,X),USRINFO, *
               LEN=(,(R5))
         DISPLAY (C'&DMCSECT:    D1FLAG13 = ',D1FLAG13),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1FLAG14 = ',D1FLAG14),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1razlvl = ',D1RAZLVL),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1razwin = ',D1RAZWIN),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1rLzmem = ',D1RAZMEM),(C,X),USRINFO
*
* R2 NOW POINTS TO THE DESTINATION DATASET NAME FOR THE FIRST COPY
* STEP IN THE PROCESS. THE DATASET NAME IS A HALFWORD LEN FIELD
* IMMEDIATELY FOLLOWED BY THE DATASET NAME ITSELF.
*
         TM      S1FLAG1,S1DSN       IS DSN SPECIFIED?
         BNO     NEXTSTEP           $NO, FORGET IT.
         LR      R6,R4               BASE OF TCQSH
         AH      R6,S1DDSN           GET DISPLACEMENT TO SRC DSNAME
         XR      R9,R9               CLEAR R9
         ICM     R9,B'0011',0(R6)    SET LENGTH OF DSNAME
         AH      R9,=H'2'            ADD 2 FOR INCLUSIVE LEN
         DISPLAY (C'&DMCSECT: SRCE DSNAME = ',2(R6)),(C,C),USRINFO,    *
               LEN=(,(R9))
         DISPLAY (C'&DMCSECT: B4-S1FLAG11 = ',S1FLAG11),(C,X),USRINFO
         SLR     R5,R5               Clear R5
         AH      R5,=H'2'            Set length to 2
         DISPLAY (C'&DMCSECT: S1FLAG12 = ',S1FLAG12),(C,X),USRINFO,    *
               LEN=(,(R5))
         DISPLAY (C'&DMCSECT: S1FLAG13 = ',S1FLAG13),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: S1FLAG14 = ',S1FLAG14),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: S1razlvl = ',S1RAZLVL),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: S1razwin = ',S1RAZWIN),(C,X),USRINFO
         DISPLAY (C'&DMCSECT: S1rLzmem = ',S1RAZMEM),(C,X),USRINFO
*
* R6 NOW POINTS TO THE SOURCE DATASET NAME FOR THE FIRST COPY
* STEP IN THE PROCESS. THE DATASET NAME IS A HALFWORD LEN FIELD
* IMMEDIATELY FOLLOWED BY THE DATASET NAME ITSELF.
*
         TM    S1FLAG13,S1CMPEXT    HAS USER SPEC. EXTENDED COMPRESSION
         BNZ   DISACMP2            $YES,THEN DISBALE
         TM    S1FLAG11,S1COMP      HAS USER SPEC. STANDARD COMPRESSION
         BZ    NEXTSTEP            $NO, THEN NEXTSTEP
DISACMP2 EQU     *
         NI    D1FLAG13,X'7F'       YES, THEN RESET D1CMPEXT FLAG
         NI    S1FLAG13,X'7F'       YES, THEN RESET S1CMPEXT FLAG
         NI    D1FLAG11,X'7F'       YES, THEN RESET D1COMP   FLAG
         NI    S1FLAG11,X'7F'       YES, THEN RESET S1COMP   FLAG
         SLR     R5,R5               Clear R5
         AH      R5,=H'2'            Set length to 2
         DISPLAY (C'&DMCSECT: AF-D1FLAG11 = ',D1FLAG11),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1FLAG12 = ',D1FLAG12),(C,X),USRINFO, *
               LEN=(,(R5))
         DISPLAY (C'&DMCSECT:    D1FLAG13 = ',D1FLAG13),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1FLAG14 = ',D1FLAG14),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1razlvl = ',D1RAZLVL),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1razwin = ',D1RAZWIN),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    D1rLzmem = ',D1RAZMEM),(C,X),USRINFO
*
         DISPLAY (C'&DMCSECT: AF-S1FLAG11 = ',S1FLAG11),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    S1FLAG12 = ',S1FLAG12),(C,X),USRINFO, *
               LEN=(,(R5))
         DISPLAY (C'&DMCSECT:    S1FLAG13 = ',S1FLAG13),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    S1FLAG14 = ',S1FLAG14),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    S1razlvl = ',S1RAZLVL),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    S1razwin = ',S1RAZWIN),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:    S1rLzmem = ',S1RAZMEM),(C,X),USRINFO
*
***********************************************************************
*                            NOTE                                     *
***********************************************************************
*   IF MODIFICATIONS ARE MADE TO EITHER THE SRC OR THE DESTINATION    *
*        DATASET NAMES, THEIR CORRESPONDING LENGTH FIELDS MUST BE     *
*          MODIFIED AS WELL TO REFLECT THE CHANGES.                   *
***********************************************************************
NEXTSTEP DS      0H
         CLC     TQSTMTN,=H'1'      @More than One step?
         BNP     EXIT               @NO, Then we are done.
*        STH     R11,TMPCNT          STORE STEP COUNT
         LH      R9,TMPCNT           Load temporary step coutn
         LA      R9,1(R9)            Increment step counter
         STH     R9,TMPCNT           STORE STEP COUNT
         DISPLAY (C'&DMCSECT: Rel Step ',TMPCNT),(C,X),USRINFO
         DISPLAY (C'&DMCSECT:     Type ',TSHFUNCD),(C,X),USRINFO
         AH      R4,TSHRECLN        @Yes, point to next TCQSH
         BCT     R11,PROCLOOP       @Yes, then check next step
         DISPLAY (C'&DMCSECT: End of Proc '),(C),USRINFO
EXIT     DS      0H
         L       R15,TQRTNCD         LOAD RC
*     SCRETURN WILL FREE SCENTER STORAGE AND RETURN TO CALLER
         SCRETURN RC=(R15)
*****************************************
*          Node table                   *
*****************************************
PREFIX1  DC    C'ODR.CTC'             odr css nodes           AJC09237
PREFIX2  DC    C'ODR.TST'             odr css nodes           AJC05223
PREFIX3  DC    C'SEI.TEST'            BIS Nodes               AJC11305
PREFIX4  DC    C'SEITEST'             ODR Test nodes          AJC05223
PREFIX5  DC    C'SEIPS'               Performance station     AJC05223
PREFIX6  DC    C'CD.SEIT'             BIS NODES               AJC13045
NODETAB  EQU   *
         DC    CL16'BIS.CTCBISPLP01 ' 10.52.50.6
NODELEN  EQU   *-NODETAB              Length of one entry
         DC    CL16'BIS.SEITESTNODE1' 172.16.115.27'
         DC    CL16'CD.NODENAME1    ' 10.5.40.51
         DC    CL16'CD.TESTNODE1    ' 10.5.40.84
         DC    CL16'CD.DEV1         ' 10.72.10.241            AJC05160
         DC    CL16'CD.TRUSTME2     ' 10.5.70.85              AJC06024
         DC    CL16'CD.TRUSTME3     ' 10.5.40.60              AJC06024
         DC    CL16'CSSZONEVM01     ' 10.52.32.122            AJC10257
         DC    CL16'CSVIAG          ' 172.16.105.42
         DC    CL16'CTCBISAPP05     ' 10.52.50.80             AJC08004
         DC    CL16'CTSQA1          ' 10.52.10.143            AJC06024
         DC    CL16'CTSQA2          ' 10.52.10.133            AJC06024
         DC    CL16'CUSTODY01       ' 10.5.40.106
         DC    CL16'FLYERSODR       ' 10.9.30.2               AJC05160
         DC    CL16'FRSEINT2        ' 10.91.40.47
         DC    CL16'JOSHUA01        ' 10.4.40.31
         DC    CL16'OPSCD2A         ' 10.65.100.1
         DC    CL16'SEIMAP01        ' 172.16.105.133
         DC    CL16'SEINDM02        ' NDM Node name
         DC    CL16'SEINDM03        ' NDM Node name
         DC    CL16'SEINDM04        ' NDM Node name
         DC    CL16'SEINDM05        ' NDM Node name
         DC    CL16'SEIRTWDB01      ' 10.65.40.44
         DC    CL16'T3KENG          ' 10.1.40.146             AJC06024
         DC    F'0'                   End of the Table
TABLEND  EQU   *                      END OF Node name table
TABLLEN  DC    A(TABLEND-NODETAB)     Length of table
         END
