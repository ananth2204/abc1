  DATA ACTIVITY;
    TITLE;
    INFILE NDMX0001 RECFM=VB;                         /* 1363862 */
    INPUT RECTYPE $ 3-4 @;
* ********************************************************************
* Licensed Materials - Property of IBM
*
* 5655-X01 IBM(R) Sterling Connect:Direct(R) for z/OS(R)
*
* (C) Copyright IBM Corp. 1982, 2011 All Rights Reserved
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
* ********************************************************************
*   ONLY WANT 'Copy TERMINATION' STATISTICS RECORDS;
**    IF RECTYPE = 'CT' OR RECTYPE = 'RT' OR
**       RECTYPE = 'RJ' OR RECTYPE = 'SW' THEN DO;
      IF RECTYPE = 'CT' THEN DO;
         INPUT  @5 ENDHH PK1.        /* XXTIME BROKEN TO 4 PKDLEN 1*/
                @6 ENDMM PK1.
                @7 ENDSS PK1.
                @8 ENDTT PK1.
                @9 ENDDTE PD4.            /* XXDATE    */
                @13 STRTHH PK1.      /* XXSTIME BROKEN TO 4 PKDLEN 1 */
                @14 STRTMM PK1.
                @15 STRTSS PK1.
                @16 STRTTT PK1.
                @17 STRDTE PD4.
                @21 CC $4.                /* XXSCC     */
                @25 MSGID $8.             /* XXMSGID   */
                @33 PROCNAME $8.          /* XXPROCNM    1363862*/
                @41 PROCNUM IB4.          /* XXPROCNO  */
                @45 STEPNAME $8.          /* XXSTEP    */
                @69 UID $8.               /* XXUID       1363862 */
                @77 MYNODE $16.           /* XXPNODE   */
                @93 OTHRNODE $16.         /* XXSNODE   */
                @109 THISNODE $1.         /* XXNODE  @ */
                @110 SENDIND $1.
                @111 CTRANS IB1.
                @112 COPYTYPE $CHAR1.
                @113 RUSZ   IB4.
                @129 INBYTES IB8.
                @137 INRECS IB4.
                @141 INBLKS IB4.
                @145 SNDBYTS IB8.
                @153 OUTBYTES IB8.
                @161 OUTRECS IB4.
                @165 OUTBLKS IB4.
                @169 RCVBYTS IB8.
                @497 SECP1    $1.         /* SECURE+ CT FLAG1 */
                @498 SECP2    $1.         /* SECURE+ CT FLAG2 */
                @499 CIPHER   $1. @;      /* CIPHER SUITE #   */
         IF SECP1 = '00'X AND SECP2 = '00'X THEN
            DELETE;
**    IF RECTYPE = 'RT' OR RECTYPE = 'RJ' OR RECTYPE = 'SW' THEN
*        INPUT  @5 ENDHH PK1.        /* XXTIME BROKEN TO 4 PKDLEN 1*/
*               @6 ENDMM PK1.
*               @7 ENDSS PK1.
*               @8 ENDTT PK1.
*               @9 ENDDTE PD4.            /* XXDATE    */
*               @13 STRTHH PK1.      /* XXSTIME BROKEN TO 4 PKDLEN 1 */
*               @14 STRTMM PK1.
*               @15 STRTSS PK1.
*               @16 STRTTT PK1.
*               @17 STRDTE PD4.
*               @21 CC $4.                /* XXSCC     */
*               @25 MSGID $8.             /* XXMSGID   */
*               @33 PROCNAME $8.          /* XXPROCNM    1363862*/
*               @41 PROCNUM IB4.          /* XXPROCNO  */
*               @45 STEPNAME $8.          /* XXSTEP    */
*               @69 UID $8.               /* XXUID     */
*               @77 UID56 $56             /* XXUID     */
*               @133 MYNODE $16.          /* XXPNODE   */
*               @149 OTHRNODE $16.        /* XXSNODE   */
**              @165 THISNODE $1. @;      /* XXNODE    */
*        ASSIGN PNODE AND SNODE;
         IF THISNODE = 'P' THEN DO;
            PNODE = MYNODE;
            SNODE = OTHRNODE;
            END;
         ELSE DO;
            PNODE = OTHRNODE;
            SNODE = MYNODE;
            END;
*        ASSIGN FUNCTION TYPE FOR OUTPUT;
         IF RECTYPE = 'RT' THEN
            FUNC = 'RUNT';
         IF RECTYPE = 'CT' THEN
            FUNC = 'COPY';
         IF RECTYPE = 'RJ' THEN
            FUNC = 'RUNJ';
         IF RECTYPE = 'SW' THEN
            FUNC = 'SUBM';
         IF CC = '00000000'X THEN
            FLAG = '     ';
         ELSE
            FLAG = MSGID;
*           FLAG = '***';
         CD = SUBSTR(CC,2,3);
         IF CIPHER = '0A'X THEN
            SECP = '3DES';
         IF CIPHER = '2F'X THEN
            SECP = 'AES1';
         IF CIPHER = '35'X THEN
            SECP = 'AES2';
         IF FUNC = 'COPY' THEN CP = 'NO ';
         IF CTRANS = '20' THEN CP = 'EXT';
         IF CTRANS = '16' THEN CP = 'CMP';
         IF CTRANS = '4' THEN CP = 'EXT';
         IF CTRANS = '0' THEN CP = 'NO ';
         DATE = DATEJUL(STRDTE);   /* CONVERT JULDTES->SAS FOR MATH*/
         ENDDTE = DATEJUL(ENDDTE);
      IF RECTYPE = 'CT' THEN DO;
           IF INBYTES >= SNDBYTS THEN DO;
              IF INBYTES = SNDBYTS THEN
                COMFCTRR = 0;
              ELSE DO;
                TEMP1 = SNDBYTS/INBYTES;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRR = 100 * TEMP2;
              END;
           END;
           ELSE DO;
              IF INBYTES = SNDBYTS THEN
                COMFCTRR = 0;
              ELSE DO;
                TEMP1 = INBYTES/SNDBYTS;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRR = -100 * TEMP2;
              END;
           END;
           IF OUTBYTES >= RCVBYTS THEN DO;
              IF OUTBYTES = RCVBYTS THEN
                COMFCTRW = 0;
              ELSE DO;
                TEMP1 = RCVBYTS/OUTBYTES;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRW = 100 * TEMP2;
              END;
           END;
           ELSE DO;
              IF OUTBYTES = RCVBYTS THEN
                COMFCTRW = 0;
              ELSE DO;
                TEMP1 = OUTBYTES/RCVBYTS;
                TEMP2 = 1 - TEMP1;
                TEMP2 = ROUND(TEMP2,.001);
                COMFCTRW = -100 * TEMP2;
              END;
           END;
      END;
*        'HMS' RETURNS SAS TIME VALUE FOR MATH;
         STARTIME = HMS(STRTHH,STRTMM,STRTSS)+STRTTT/100;
         ENDTIME = HMS(ENDHH,ENDMM,ENDSS)+ENDTT/100;
         TRANTIME = 86400 * (ENDDTE - DATE) + ENDTIME - STARTIME;
*                  {TRANS DAYS IN SECONDS  + TIME ENDED} - TIME STARTED;
*        GET RID OF UNNECESSERY VARIABLES;
         DROP ENDHH ENDMM ENDSS ENDTT ENDDTE STRTHH STRTMM STRTSS STRTTT
              STRDTE OTHRNODE THISNODE RECTYPE;
*             STARTIME ENDTIME
*        ADD OBSERVATION TO SAS DATA SET BEING CREATED;
         OUTPUT;
      END;
*     FORMAT DATE AND TIME FOR OUTPUT;
      FORMAT UID $CHAR8.;                    /* 1371027 */
      FORMAT PROCNUM BEST5.;                 /* 1371027 */
      FORMAT PROCNAME $CHAR8.;               /* 1371027 */
      FORMAT STEPNAME $CHAR8.;               /* 1371027 */
      FORMAT FUNCTION $CHAR8.;               /* 1371027 */
      FORMAT PNODE $CHAR16.;                 /* 1371027 */
      FORMAT MSGID $CHAR8.;                  /* 1371027 */
      FORMAT DATE MMDDYY10.;
      FORMAT STARTIME TIME9.0;
      FORMAT ENDTIME TIME9.0;
      FORMAT TRANTIME TIME11.2;
*     FORMAT CC $HEX8.;
      FORMAT CC $HEX6.;
      FORMAT SNDBYTS COMMA11.;
* THIS DATA STEP SETS UP TO PUT NODENAME IN TITLE;
  DATA _NULL_;
    SET ACTIVITY;
    CALL SYMPUT('NODE',MYNODE);
    RUN;
* PRINTS TITLES;
  DATA _NULL_;
    TITLE 'IBM Sterling Connect:Direct Secure+ Activity Report';
    TITLE2 "NODE = &NODE";
* SORT DATASET FOR PRINT;
  PROC SORT;
    BY SNODE UID PROCNUM;
* ROUTE OUTPUT TO FT20F001 DD;
  PROC PRINTTO NEW UNIT=20;
* PRINT DATASET BY SNODE AND FOLLOWING ORDER ACROSS PAGE;
  PROC PRINT LABEL NOOBS SPLIT='*' WIDTH=MINIMUM;
    BY SNODE;
    VAR UID PROCNUM PROCNAME STEPNAME FUNC STARTIME ENDTIME TRANTIME
        PNODE COMFCTRR CP RUSZ SNDBYTS SECP CD FLAG DATE;
    LABEL FLAG='MSG' PROCNUM='PROC #' PROCNAME='PROC NAME'
          STEPNAME='STEP NAME' UID='USERID' CD='COND*CODE'
          STARTIME=' START *HH:MM:SS' ENDTIME='END TIME*HH:MM:SS'
       FUNC='STEP*TYPE' COMFCTRR='COMP* % ' CP='CMP*TYP' RUSZ='RU SIZE'
       SNDBYTS='BYTES*SENT' SECP='SEC+' TRANTIME='XMT TIME*H:MM:SS.TT';
/*  1  */
PROC SUMMARY   DATA = ACTIVITY MISSING  NWAY;
     CLASS SNODE;
     VAR   SNDBYTS;
     OUTPUT OUT=BYTSUM SUM=TOTBYT MEAN = AVGBYT;
PROC PRINT DATA = BYTSUM SPLIT = '*';
     TITLE1 'NDM NODE SUMMARY REPORT ';
     ID  SNODE;
     SUM TOTBYT;
LABEL _FREQ_  = 'NUMB. OF*PROC STEPS'
      AVGBYT  = 'AVERAGE*BYTES '
      TOTBYT  = 'TOTAL*BYTES';
FORMAT AVGBYT COMMA16.2
       TOTBYT COMMA16.0;
  PROC PRINTTO;
