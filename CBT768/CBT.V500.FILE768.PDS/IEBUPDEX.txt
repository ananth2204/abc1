/*-----------------------------------------------------------*/
/* Extract logical files from a single input (transfer) file */
/* which has a "./ ADD NAME=filename filetype" in front of   */
/* each file in an append file created by the IEBUPDAP exec. */
/*                                                           */
/* Information folowing the filetype in the ./ ADD card      */
/* includes the original RECFM, LRECL and the date and time  */
/* the original file was last updated.                       */
/*                                                           */
/* When the file is created on the target CMS mdisk it is    */
/* created with the original RECFM, LRECL, date and time.    */
/*                                                           */
/* The files in the append file can also be loaded to a z/OS */
/* PDS using IEBUPDTE.                                       */
/*                                                           */
/* Be careful, because this exec will replace (erase) files  */
/* with the output filename and filetype on the target disk. */
/*                                                           */
/* If yoy have any problems with this exec contact;          */
/* Rick Bourgeois at rick@vsoftsys.com                       */
/*                                                           */
/* Syntax: input_fname input_ftype input_fmode output_fmode  */
/*-----------------------------------------------------------*/

address command
signal on novalue
signal on syntax

arg infn inft infm outfm . '(' opts /* Get the arguments.    */

if infm = '' then signal missing  /* Make sure all are given.*/

if outfm = '' then outfm = infm   /* If no output filemode   */

/* Find the first separator line in the input file.          */
'EXECIO * DISKR' infn inft infm,
   '1 (FINIS STEM INFILE. FIND \./ \'
if rc \= 0 then signal read_error
firstrec = word(infile.2,1)       /* First sep line.         */

/* Position the file.                                        */
'EXECIO' firstrec-1 'DISKR' infn inft infm '1 (SKIP'
if rc \= 0 then signal read_error

sepline = ''                      /* Separator line with '\'.*/
pack = 'N'                        /* Default not to pack.    */

do forever                        /* Process each line...    */
   'EXECIO 1 DISKR' infn inft infm '(VAR INFILE'
   if rc \= 0 then leave
   if left(infile,3) = './ ' then do /* For a separator,     */
      call close                   /* close previous file    */
      filerecs = 0
      sepline = infile
      parse var infile . add nkw '=' outfn outft rf lr fdate ftime . ';'
      if outfn = '.' then iterate        /* For ;E lines.    */
      if outft = 'EXEC' then rfm = 'V'   /* EXECs = recfm V  */
         else rfm = 'F'                  /* by default.      */
      if rf \= '' then rfm = left(rf,1)  /* Was recfm given? */
      if lr = '' then lr = 80     /* Default to lrecl 80*/

      'STATE' outfn outft outfm   /* File exist already?     */
      staterc = rc
      if staterc = 0 then ,
         'ERASE' outfn outft outfm   /* Erase it.            */

      if ftime \= '' then do
        if staterc \= 0             /* Give correct message. */
           then say 'Creating' outfn outft outfm 'with date' ,
              fdate ftime
           else say 'Replacing' outfn outft outfm 'with date',
              fdate ftime
        end /* sep line */
      else do
        if staterc \= 0             /* Give correct message. */
           then say 'Creating' outfn outft outfm
           else say 'Replacing' outfn outft outfm
        end /* sep line */
      end

   else do
      /* Write line; lrecl ignored for recfm = V.            */
      'EXECIO 1 DISKW' outfn outft outfm,
         '0' rfm lr '(STRING' strip(infile,'T')

      if rc \= 0 then signal write_error  /* Write error?    */
      filerecs = 1
      end

   end /* do forever */

call close                        /* Close last output file. */

exit

close:
if sepline = '' then return       /* Nothing the first time. */

if filerecs = 0 then do
   say outfn outft outfm 'is a null file, contact VSSI'
   return
   end /* filerecs */

if outfn \= '.' then do
   'FINIS' outfn outft outfm      /* Close the file.         */
   if rc \= 0 then signal close_err
   end

if ftime \= '' then do
    'DMSPLU' outfn outft outfm right(fdate,8,0) ,
       right(ftime,8,0)
    if rc \= 0 then
    say outfn outft outfn 'date set with DMSPLU failed RC' rc
    end

if right(rf,1) = 'P' then do      /* Pack file if required.  */
   'COPYFILE' outfn outft outfm '= = = (PACK OLDDATE'
   if rc \= 0 then call pack_err
   end

return

read_error:                       /* Error reading file.     */
saverc = rc
'STATE' infn inft infm            /* Is file there?          */
if rc \= 0
 then say 'Input file' infn inft infm 'does not exist.'
 else say 'Return code' saverc 'reading file.'
exit saverc

write_error:                      /* Error writing file.     */
say 'Return code' rc 'from EXECIO 1 DISKW' outfn outft outfm
exit rc
pack_err:                         /* Error repacking file.   */
say 'Return code' rc 'packing file' outfn outft outfm
exit rc

close_err:                        /* Error Closing file.     */
say 'Finis return code' rc 'closing file' outfn outft outfm
exit rc

dropbuf:
saverc = rc
'DROPBUF'
exit saverc

novalue:
say 'NOVALUE error on line' ,
 sigl 'of IEBUPDEX EXEC'
exit 50

syntax:
say 'SYNTAX error on line' ,
 sigl 'of IEBUPDEV EXEC'
exit 60
