./ ADD NAME=$$$#DATE DOC F 80 9/21/07 13:45:00
REGULAR CBT TAPE - VERSION 470    FILE:  533

    ORIGINAL DSNAME:  SBGOLOB.CBT470.FILE533
    ---------------
                    --RECFM-LRECL-BLKSIZE-DSORG
                      FB    80    5600    PO

   PDS117I 37 MEMBERS COUNTED; CUMULATIVE SIZE IS 14,481 RECORDS


TIME THIS PDS WAS SHIPPED:   09/23/05    10:10:53    GMT-4:00

./ ADD NAME=$$$COSBG DOC F 80 9/21/07 13:45:00
Virtual Tape Transportation System (VTTS)

Copyright (c) 2001 - 2005 by Sam Golob

All rights reserved, except where specific permission
is given by the copyright holder.

Permission is granted to assemble and run the subset of
these materials from the Virtual Tape Transportation
System which are present on the CBT Tape collection,
but all rights remain with the copyright holder.

./ ADD NAME=$$CHANGE DOC F 80 9/21/07 13:45:00
        VTT2 Package Revision History - after the initial release

  Copyright (c) 2001-2005 by Sam Golob.

  Any commercially sold or restricted components of this system
    will not be available or distributed with the CBT Tape
    software collection.  Presence of a component on the CBT
    Tape collection indicates that the copyright holder allows
    use by the public, of that component.

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Revision  01/02/05

  VTT2T2FK  -  This is a new program which creates a FAKETAPE (TM)
   1.12        image disk file from any tape input.  Similar in
               function to VTT2DISK, except that the output disk
               file is in FAKETAPE format instead of AWS format.

Revision  12/30/04

  VTT2DISK  -  Fixed the program logic to be able to create an AWS
   1.12        tape file with any size chunks, up to 65535 bytes
               (which is the default).  The chunk size can be changed
               either at assembly time by changing a global variable,
               or in SYSIN by using the CHUNKSIZE=nnnnn keyword,
               starting in column 1.  All data folding is now done
               by a sub-program called FOLDEM, which is driven by a
               control block called FLDAREA.  See the code for
               details.

Revision  07/28/05

  VTT2TAPE  -  Put in ASG enhancement to allow a volser change
   1.13        through a PARM='TVOL=nwvser', or
               PARM='TVOL(nwvser)'.  When entering the new volser
               this way, I put in a check for short volsers (less
               than 6 characters) and ran the volser from the PARM
               through a translate table first, to uppercase it
               and clean it up somewhat.  The volser that is coded
               in the SYSIN DD card can completely override this,
               so you still have the freedom to create bizarre
               volsers if you really want to.  BTW, you do not
               need to code the new volser in the JCL.  This
               program does not do a RDJFCB to find out what is in
               the JCL.

Revision  12/12/04

  VTT2TAPE  -  Fixed the program logic to be able to read an AWS
   1.12        tape file with "short chunks".  Included the UNFOLDEM
               program to do all data moves from the folded FB-80
               AWS-format file, to the data buffer.  So this logic
               has been completely removed from the VTT2TAPE main
               program.  The UNFOLDEM program is driven by the
               contents of a control block called UNFAREA.  See the
               program code itself for further explanation.

  VTT2FK2T  -  This is a new program, modeled after the current
   1.12        version of VTT2TAPE, which reads a FLEX-ES FAKETAPE
               file, folded into FB-80 format on any MVS system,
               and writes a real tape on a real (or virtual) tape
               drive, from the FAKETAPE file data.

Revision  07/22/03

  VTT2TAPE  -  Added optional SYSIN ddname to be able to change
   1.10        the volser of the output tape.  Code as follows:

               //SYSIN DD *
               NEWVOL=volser     (has to start in column 1)
               /*

  VTT2DISK  -  Added parameter IDRCOFF.  If this is coded, then
   1.10        VTT2DISK turns off the IDRC indicators in the output
               AWS tape file.  These are in the VOL1 label, and the
               HDR2, EOF2, EOV2 labels.

Revision  12/11/02

  VTT2CNVU  -  Changed trailer characters to fill out the FB-80
   1.1         fixed records, from x'20' to x'00' as per request
               from Reed Petty, and the discussion of the Hercules
               forum.

Revision  12/10/02

  VTT2DISK  -  Changed trailer characters to fill out the FB-80
   1.11        fixed records, from x'20' to x'00' as per request
               from Reed Petty, and the discussion of the Hercules
               forum.

./ ADD NAME=$VTT2DOC DOC F 80 9/21/07 13:45:00
         Documentation for the VTT2TAPE and VTT2DISK Programs

        (A part of VTTS - "Virtual Tape Transportation System")

Sam Golob - copyright (c) 2001-2005 by Sam Golob

    The VTTS (Virtual Tape Transportation System) is copyrighted
    and owned by Sam Golob.  But modules VTT2TAPE and VTT2DISK in
    their "free versions" will be freely usable without charge,
    even though these programs are the property of Sam Golob,
    either in source code, object deck, or load module form, or
    in any format or encoded in any way.

    What are the "free versions"?  These are the versions of VTT2TAPE
    and VTT2DISK that are distributed with the CBT Tape collection.

    The VTT2DISK and VTT2TAPE programs allow an MVS system to move
    entire tapes to disk, and create tapes from these disk files again.

    The VTT2CNVU program is an MVS program to convert RECFM=VB AWS
    files into FB-80 format, so they can be read by VTT2TAPE to cut
    a real tape.

    The VTT2FK2T program is like VTT2TAPE, but it takes a FAKETAPE
    virtual tape file (from FLEX-ES), which had been folded into FB-80
    format on any MVS system, and writes a real tape from that data.
    FTP will fold an external file of this type, like a FAKETAPE file,
    into an FB-80 format MVS file, if you tell it to, or if you
    pre-allocate the target file as FB-80 on the MVS system.

Some of the need for the programs:

            AWS Tape format is produced by P/390 and Hercules systems
            to create disk files, which an MVS system reads and writes,
            as if they were actual tapes.   Therefore, an MVS system
            without a tape drive, if it is so equipped to produce
            "virtual tapes" in AWS Tape format, can write to tapes, and
            read from tapes.  These tapes are really disk files.
            Another name for these disk files is "virtual tapes",
            because the MVS system looking at these files "thinks"
            that they really are tapes.

            There have existed programs which can read REAL tapes and
            create virtual tapes from them.  One example is Brandon
            Hill's AWSUTIL program.  These virtual tapes can be loaded
            on a Hercules system somewhere and be read as a tape.

            Our program VTT2DISK performs this function also, by
            reading a REAL tape and producing an FB-80 "folded
            AWS-format tape" as an MVS disk file.  In doing the reading,
            the VTT2DISK program produces a lot of stats about the tape.
            The advantage of the VTT2DISK program is that it can be run
            on a "big iron" mainframe-based MVS system that cannot
            normally produce AWS-format virtual tapes.  VTT2DISK
            will produce AWS-format "tape" disk files on "real MVS".

            The main problem is, to also go the other way.

            Suppose you have an MVS system that can't read a tape in
            AWS format.  Most large MVS systems which are not P/390 or
            Hercules machines, but they are real MVS machines--big
            iron--are in this position.  So for them, how do you
            convert an AWS "virtual tape" disk file to some format
            that the MVS system can convert into a REAL tape?  That
            is the purpose of the VTT2TAPE program.

            As easy as the concept seems:  Take an AWS format tape, and
            make it readable to MVS--in practice, there is a large
            complication, which I hope to explain.

            A large part of describing this problem is the understanding
            of the rather simple AWS tape format.  Once you understand
            AWS tape format (as it exists on an OS/2 system or a PC),
            the difficulty of reading this file on a "pure MVS system"
            will become clear.  I hope that the rest of my explanation
            will serve to clear up the difficulty.

AWS Tape File on OS/2 or a PC is a Continuous stream of data:

            The essence of the AWS tape format is that on a PC, or on
            an OS/2 system, the "tape file" appears logically, as one
            continuous stream of data.  For example, a CBT Master Tape,
            (the SL version that I use), at the time of this writing,
            is about 331 million bytes long.  On OS/2 or on the PC, this
            looks like one continuous stream of data that is 331 million
            bytes long.  For all practical purposes there is no blocking
            of the data at all.

            That presents a problem on MVS, where just about all data
            has to be blocked.   On MVS, you must "fold the data over"
            into blocks and records.  For my convenience, I have
            chosen to fold the AWS tape data as Fixed Blocked LRECL=80
            card image files.  Such files are conveniently handled on
            MVS systems and in transmission processes, and you can
            browse (and even edit) all of the "tape data" on TSO.
            (You can even read the FB-80 "tape data" into an internal
            reader.)

            Then you must un-fold the data, logically.

            My MVS program VTT2TAPE reads in the AWS tape data that was
            uploaded to MVS from a PC or OS/2 system, and folded into
            FB-80 card images, and it writes out an actual tape, using
            EXCP to write the blocks.

            As with the VTT2DISK program, the VTT2TAPE program produces
            many stats, as it writes the new tape from the disk version
            of the "tape" in FB-80 AWS format.

AWS Tape Format:

            Although a "tape" in the AWS Tape format appears
            continuous, tape files are delimited by means of 6-byte
            headers.  Each tape block is preceded by a header, and
            followed by a header.  Also, end-of-file is indicated by
            a different header.  The end-of-file header roughly
            corresponds to a tape mark, preceded by the "write out"
            of the last data block.  Every AWS tape file starts out
            with a header.

            Three two-byte segments comprise the header.

            The first two-byte segment contains the number of bytes in
            the block to follow (but this is in "PC format" with the
            two bytes reversed).

            This value will be zero for the header that comes after
            the last block of a file.

            The second two-byte segment contains the number of bytes in
            the block of data which immediately preceded this header.
            That value may be zero, and is zero if the header is the
            first header for a file.  Again, the two-byte value cannot
            be read as a halfword quantity, unless the bytes are
            reversed.  This is the backwards PC Intel format for
            halfwords (which I term BIF, or Backwards Intel Format).

            The third two-byte piece of the header might be more
            complicated in the future, but right now it is very
            simple:   X'A000' denotes a block in the beginning or
            in the middle of a file.  X'4000' denotes an end-of-file.

            A block of data might be broken up into CHUNKS.  Each
            chunk lies between two headers.  The flag byte in the
            header preceding the beginning chunk of a block is
            X'80'.  The flag byte for the middle chunk of a block is
            X'00'.  The flag byte for the end chunk of a block is
            X'20'.  If a chunk is an entire block, then its flag
            byte of the header preceding it, is X'A0' (combined
            X'80' and X'20') as we have stated before.

            A final tapemark for a tape, therefore, is:
                 X'000000004000'

            That's all folks.  It's all very simple.  You just have
            to think about it.

Backwards Intel Halfword Format:

            Halfwords in the AWS headers are in "Backwards Intel
            Format" or "PC Format".  For example, the quantity
            32720, which is a normal block size for Fixed 80-byte
            LRECL files, is usually represented in a halfword as
            X'7FD0'.  But in Backwards Intel Format, this is
            represented as X'D07F'.  (Got it?)

The Hard Part:

            The hard part of writing VTT2TAPE was:

            1 - Tracking through the 80-byte records and finding
                all the headers.

            2 - Correctly moving the right number of data bytes,
                and the right data blocks that are in between the
                headers, to the correct place in the output buffer
                that is in the program.

            3 - Once each data block is moved entirely, and
                correctly, into the output buffer (in the program),
                putting them out to tape with EXCP is a snap.
                The number of bytes to move is taken from the
                "next byte count" field in the header that
                precedes the current block.  This value is checked
                against the accumulated total of data bytes moved.

            4 - The X'4000'-third-byte headers cause the write of a
                tape mark.

   The data unfolding from FB-80 file to tape buffer is now done by
   a completely separate sub-program called UNFOLDEM.  The data
   folding from tape buffer to FB-80 file is now done by a completely
   separate sub-program called FOLDEM.  Each of these sub-programs
   communicates with its caller by means of a control block.  The
   UNFOLDEM program uses the UNFAREA control block, and the FOLDEM
   program uses the FLDAREA control block.  The formats of these
   are included here, as appropriately named members of this pds.

Well folks, that's how it works:

       Sam Golob        email:  sbgolob@attglobal.net
                                sbgolob@aol.com


./ ADD NAME=@FILE533 DOC F 80 9/21/07 13:45:01
//***FILE 533 is from Sam Golob, and contains the VTT2TAPE and      *   FILE 533
//*           VTT2DISK programs, in their "free versions".          *   FILE 533
//*                                                                 *   FILE 533
//*           The programs in this package are part of the          *   FILE 533
//*           Virtual Tape Transportation System (VTTS), which      *   FILE 533
//*           is copyrighted (c) 2001 - 2005 by Sam Golob.          *   FILE 533
//*                                                                 *   FILE 533
//*           Copyright notices are present in the source and       *   FILE 533
//*           load modules, but the versions of these programs      *   FILE 533
//*           that are on the CBT Tape, ARE ALLOWED TO BE RUN       *   FILE 533
//*           BY ANYONE, because the copyright holder has given     *   FILE 533
//*           full permission.  The copyright holder retains all    *   FILE 533
//*           ownership rights to the software.                     *   FILE 533
//*                                                                 *   FILE 533
//*           Unless otherwise mentioned, AWS-format "virtual tape" *   FILE 533
//*           files on an MVS system, have been folded over into    *   FILE 533
//*           Fixed Blocked 80-byte record format.  AWS-format      *   FILE 533
//*           files on other systems are just long strings of data. *   FILE 533
//*           This can't happen on MVS--all data has to be blocked  *   FILE 533
//*           on MVS.  So I chose FB-80 blocking for the AWS-format *   FILE 533
//*           and FAKETAPE (TM) format "virtual tape" files on MVS. *   FILE 533
//*                                                                 *   FILE 533
//*           The FAKETAPE file format is a published interface     *   FILE 533
//*           of Fundamental Software Inc. and they say in their    *   FILE 533
//*           documentation that anyone has permission to use the   *   FILE 533
//*           format, although Fundamental Software reserves the    *   FILE 533
//*           right to change the format at any time.               *   FILE 533
//*                                                                 *   FILE 533
//*           FAKETAPE (TM) and FLEX-ES (TM) are registered         *   FILE 533
//*           trademarks of Fundamental Software Inc.               *   FILE 533
//*                                                                 *   FILE 533
//*       Program Names:                                            *   FILE 533
//*                                                                 *   FILE 533
//*           VTT2TAPE - Program to convert AWS-format tape files   *   FILE 533
//*                      to real tapes.  Any CHUNKSIZE is           *   FILE 533
//*                      supported, up to the 65535-byte limit.     *   FILE 533
//*           VTT2DISK - Program to create an AWS-format virtual    *   FILE 533
//*                      tape file from a real tape.  Any           *   FILE 533
//*                      CHUNKSIZE tape can be created.  Default    *   FILE 533
//*                      chunksize is 65535 but that can be either  *   FILE 533
//*                      changed at assembly time, or with a SYSIN  *   FILE 533
//*                      CHUNKSIZE=nnnnn parameter.                 *   FILE 533
//*           VTT2CNVU - Program to convert a VB-format AWS-format  *   FILE 533
//*                      tape (such as the one produced by Brandon  *   FILE 533
//*                      Hill's AWSUTIL program on CBT File 467)    *   FILE 533
//*                      to FB-80 format on MVS, so that VTT2TAPE   *   FILE 533
//*                      can be used subsequently to convert the    *   FILE 533
//*                      data to a real tape.                       *   FILE 533
//*           VTT2T2FK - Like VTT2DISK, except a real tape is       *   FILE 533
//*                      converted to a FAKETAPE (TM) format tape.  *   FILE 533
//*           VTT2FK2T - Like VTT2TAPE, except a FAKETAPE (TM)      *   FILE 533
//*                      tape image, folded over on MVS into FB-80  *   FILE 533
//*                      format, is converted into a real tape.     *   FILE 533
//*                                                                 *   FILE 533
//*           These programs run on an MVS system, and allow        *   FILE 533
//*           real tapes to be converted to disk files, and         *   FILE 533
//*           these disk files, back to real tapes.  These          *   FILE 533
//*           programs do not require a P/390 or a FLEX-ES (TM)     *   FILE 533
//*           system.  ANY MVS system will run these programs!      *   FILE 533
//*                                                                 *   FILE 533
//*           The VTT2DISK program reads a real tape, and           *   FILE 533
//*           converts it to an AWS-format "virtual tape" file      *   FILE 533
//*           on an MVS system, folded over into FB-80 format.      *   FILE 533
//*           VTT2DISK now takes SYSIN input in column 1.           *   FILE 533
//*           Allowed keywords are:                                 *   FILE 533
//*                                                                 *   FILE 533
//*           CHUNKSIZE=nnnn     Default is 65535 if not coded.     *   FILE 533
//*                              This can be changed with an        *   FILE 533
//*                              assembler global variable.         *   FILE 533
//*           NEWVOL=volser   -  Changes the VOLSER on VOL1 label   *   FILE 533
//*           READ            -  Produces READ only run, no AWSOUT  *   FILE 533
//*           IDRCOFF         -  Turns off "data is compressed"     *   FILE 533
//*                              "P" indicators in the tape labels  *   FILE 533
//*                                                                 *   FILE 533
//*           The VTT2TAPE program takes this "folded over" FB-80   *   FILE 533
//*           AWS-format file on an MVS system, and cuts a real     *   FILE 533
//*           tape from it, on a real tape drive.                   *   FILE 533
//*                                                                 *   FILE 533
//*           The VTT2FK2T program does a job similar to the        *   FILE 533
//*           VTT2TAPE program, except that it takes an FB-80       *   FILE 533
//*           folded image of a FLEX-ES FAKETAPE, and cuts a        *   FILE 533
//*           real tape from it, on a real tape drive.  Therefore   *   FILE 533
//*           a FAKETAPE image produced on a FLEX-ES system can     *   FILE 533
//*           be uploaded in BINARY to an FB-80 format disk file    *   FILE 533
//*           ON ANY MVS SYSTEM, and a real tape can be cut from    *   FILE 533
//*           it.                                                   *   FILE 533
//*                                                                 *   FILE 533
//*           And VTT2T2FK creates a FAKETAPE file (folded into     *   FILE 533
//*           FB-80 format) from a real tape.  If this file is      *   FILE 533
//*           downloaded to the server machine on which FLEX-ES     *   FILE 533
//*           is running, FLEX-ES can read this image as though     *   FILE 533
//*           it were a tape.                                       *   FILE 533
//*                                                                 *   FILE 533
//*           The disk files which are in FB-80 folded AWS or       *   FILE 533
//*           FAKETAPE format, can be FTP'ed back to the PC, OS/2   *   FILE 533
//*           or LINUX server, and read by a P/390 or FLEX-ES or    *   FILE 533
//*           HERCULES system as a tape.                            *   FILE 533
//*                                                                 *   FILE 533
//*           See member $VTT2DOC for details.                      *   FILE 533
//*                                                                 *   FILE 533
//*           VTT2TAPE has now been updated to be able to read      *   FILE 533
//*           a folded AWS tape file that has its chunk size        *   FILE 533
//*           smaller than the block size, and to produce a         *   FILE 533
//*           real output tape from it.  Such AWS-format tapes      *   FILE 533
//*           are created by FLEX-ES systems and the old (very      *   FILE 533
//*           very very old) P/390 systems.                         *   FILE 533
//*                                                                 *   FILE 533
//*           And VTT2DISK can now produced a "chunked" AWS tape    *   FILE 533
//*           file from a real tape.  FAKETAPE (TM) architecture    *   FILE 533
//*           does not have provision to produced chunked output    *   FILE 533
//*           (i.e. the tape blocks being divided into smaller      *   FILE 533
//*           pieces, and the blocks being pieced together later).  *   FILE 533
//*                                                                 *   FILE 533
//*           These programs can now be run with PARM=READ in       *   FILE 533
//*           the EXEC card, which is a "READ ONLY" execution       *   FILE 533
//*           that produces reports about the input tape, or        *   FILE 533
//*           disk file.                                            *   FILE 533
//*                                                                 *   FILE 533
//*           PARM=READ will read the AWS or tape inputs, and       *   FILE 533
//*           produce these programs' abundant stats.  If you       *   FILE 533
//*           want to "measure a tape" or an AWS-format tape file   *   FILE 533
//*           on disk, you can use the PARM=READ facility, which    *   FILE 533
//*           doesn't open the output file.  VTT2CNVU does not      *   FILE 533
//*           (yet) support PARM=READ.                              *   FILE 533
//*                                                                 *   FILE 533
//*           PARM=IDRCOFF in VTT2DISK, will turn off the IDRC      *   FILE 533
//*           indicators in VOL1, HDR2, EOF2, and EOV2 labels.      *   FILE 533
//*                                                                 *   FILE 533
//*           The contents of this file, are part of VTTS           *   FILE 533
//*           (Virtual Tape Transportation System), which           *   FILE 533
//*           is copyrighted by Sam Golob, but the versions         *   FILE 533
//*           of the VTTS programs which are in the CBT Tape        *   FILE 533
//*           collection, may be used without charge by anyone,     *   FILE 533
//*           and the copyright owner grants permission.  Same      *   FILE 533
//*           for the VTT2FK2T and VTT2T2FK programs.               *   FILE 533
//*                                                                 *   FILE 533
//*              Sam Golob  -  email:   sbgolob@attglobal.net       *   FILE 533
//*                                     sbgolob@cbttape.org         *   FILE 533
//*                                     sbgolob@aol.com             *   FILE 533
//*                                                                 *   FILE 533
//*           I've included a free C program from Leland Lucius,    *   FILE 533
//*           called strippad.c (member STRIPPAD), which strips     *   FILE 533
//*           off the padding bytes that VTT2DISK adds to the       *   FILE 533
//*           last FB-80 record on MVS, if it is short.  It seems   *   FILE 533
//*           that when you copy the FB-80 AWS-format disk file     *   FILE 533
//*           back to the PC, Hercules has some problems handling   *   FILE 533
//*           the padding bytes.  The P/390 doesn't.                *   FILE 533
//*                                                                 *   FILE 533
//*              Leland Lucius     email:  llucius@moneygram.com    *   FILE 533
//*                                        llucius@homerow.net      *   FILE 533
//*                                        hackules@digicron.com    *   FILE 533
//*                                                                 *   FILE 533
