  /*--  Rexx  ---------------------------------------------------*/
  /*                                                             */
  /* The following is the REXX exec that appears in the          */
  /* SHARE 78 session:                                           */
  /*                                                             */
  /*     MVSE:  IPCS/REXX Support                                */
  /*     Session O387                                            */
  /*                                                             */
  /*     Jim Campbell                                            */
  /*     IBM                                                     */
  /*     Enterprise Systems                                      */
  /*     Poughkeepsie, New York                                  */
  /*                                                             */
  /* (C) Copyright IBM Corporation 1992                          */
  /*                                                             */
  /* The following terms, used in the referenced presentation,   */
  /* are trademarks of the IBM Corporation:                      */
  /*                                                             */
  /* 1.  MVS/ESA                                                 */
  /* 2.  Enterprise Systems Architecture/390                     */
  /* 3.  MVS/SP                                                  */
  /*                                                             */
  /* Note that this sample source is provided for tutorial       */
  /* purposes only.  A complete handling of error conditions has */
  /* not been shown or attempted, and this source has not been   */
  /* submitted to formal IBM testing. This source is distributed */
  /* on an 'as is' basis without any warranties either expressed */
  /* or implied.                                                 */
  /*                                                             */
  /*-------------------------------------------------------------*/
  address IPCS               /* Set IPCS as the permanent host
                                command environment.             */
  storage. = ''              /* Clear the stem variable at the
                                beginning of the exec.           */
  /*-------------------------------------------------------------*/
  /*  Determine the address of the CVT                           */
  /*-------------------------------------------------------------*/
  cvtaddr  = obtain_data(    /* Invoke Obtain_Data, passing:     */ ,
                 0,          /*   Address of the data in dump    */ ,
                 x2d('10'),  /*   Offset to desired field        */ ,
                 4)          /*   Amount of storage to retrieve  */
  /*-------------------------------------------------------------*/
  /*  Determine the address of ATAB in the CVTUSER field.        */
  /*-------------------------------------------------------------*/
  cvtuser  = obtain_data(    /* Invoke Obtain_Data, passing:     */ ,
                 cvtaddr,    /*   Address of the data in dump    */ ,
                 x2d('CC'),  /*   Offset to desired field        */ ,
                 4)          /*   Amount of storage to retrieve  */
  /*-------------------------------------------------------------*/
  /*  Verify the ATAB identifier is as expected.                 */
  /*-------------------------------------------------------------*/
  ATAB_id  = x2c(            /* Convert Obtained data to char    */ ,
               obtain_data(  /*   Data to obtain follows         */ ,
                 cvtuser,    /*     Address of the dump data     */ ,
                 0,          /*     Starting at offset zero      */ ,
                 4))         /*     For four bytes               */
  if ATAB_id /= 'ATAB' Then signal ATAB_Access_Error

  /*-------------------------------------------------------------*/
  /*  Determine the number of application elements.              */
  /*  Ensure there is at least one.                              */
  /*-------------------------------------------------------------*/
  ATAB_cnt = x2d(            /* Convert to Decimal for arithmetic*/ ,
               obtain_data(  /*   Data to retrieve from dump:    */ ,
                 cvtuser,    /*      Cvtuser address the block   */ ,
                 4,          /*      Offset four is count field  */ ,
                 4))         /*      Obtain four bytes           */
  if ATAB_cnt < 1 Then signal ATAB_Error
  /*-------------------------------------------------------------*/
  /*  Access and format elements in the table.                   */
  /*-------------------------------------------------------------*/
  Oline = 'Application table data entries:'
  Call Put                   /* Display Output line              */

  do i = 1 to ATAB_cnt       /*>For each application element     */
    /*-----------------------------------------------------------*/
    /*  Calculate offset into application table.                 */
    /*-----------------------------------------------------------*/
    this_offset = 8 +        /* 8 bytes past the header    plus  */ ,
                  1 +        /* 1 byte  past the 1st len   plus  */ ,
                 (16*        /* 16 bytes for each entry    times */ ,
                   (i-1))    /* the current entry in the table   */
    /*-----------------------------------------------------------*/
    /*  Access and format element from the table.                */
    /*-----------------------------------------------------------*/
    ATAB_dat = x2c(          /* Convert Obtained data to char    */ ,
               obtain_data(  /*   Data to obtain follows         */ ,
                cvtuser,     /*     Starting address in dump     */ ,
                this_offset, /*     Starting at offset zero      */ ,
                15))         /*     For FIFTEEN bytes            */
    Oline = ' ' || ATAB_dat  /* Data to display                  */
    Call  Put                /* Display output line              */
  end                        /*<For each application element     */

  /*-------------------------------------------------------------*/
  /*  Normal end of the exec...                                  */
  /*-------------------------------------------------------------*/
  EPILOG:  nop
    retc = 0                 /* Set return code of zero          */
    signal exit              /* Leave the exec                   */

  /*-------------------------------------------------------------*/
  /*  Abnormal end of the exec...                                */
  /*-------------------------------------------------------------*/
  ATAB_Access_Error:  nop
    Oline = 'Error accessing the ATAB data.'
    Call Put                 /* Display Output line              */
    retc = 16                /* Set return code showing error    */
    signal exit              /* Leave the exec                   */
  ATAB_Error:  nop
    Oline = 'No elements in the application table.'
    Call Put                 /* Display Output line              */
    retc = 16                /* Set return code showing error    */
    signal exit              /* Leave the exec                   */
  /*-------------------------------------------------------------*/
  /*  Label for Obtain_Data subroutine...                        */
  /*-------------------------------------------------------------*/
  Access_Error:  nop
    Oline = 'IPCS EVALUATE unable to access data.'
    Call Put                 /* Display Output line              */
    retc = 16                /* Set return code showing error    */
    signal exit              /* Leave the exec                   */
  /*-------------------------------------------------------------*/
  /*  Label for Put subroutine...                                */
  /*-------------------------------------------------------------*/
  Put_Error:  nop
    retc = 16                /* Set return code showing error    */
    signal exit              /* Leave the exec                   */
  /*-------------------------------------------------------------*/
  /*  Exit the exec now.                                         */
  /*-------------------------------------------------------------*/
  Exit: exit retc
  Put: procedure expose Oline
  /*-------------------------------------------------------------*/
  /* Function:  Put                                              */
  /*                                                             */
  /*            Invoke the IPCS NOTE subcommand to transmit      */
  /*            data to the terminal, IPCS print file or both,   */
  /*            depending on the IPCS message routing default.   */
  /*                                                             */
  /* Input:     Data to transmit.                                */
  /*                                                             */
  /* Output:    Data is transmitted.                             */
  /*-------------------------------------------------------------*/

  "NOTE '"Oline"' ASIS"
  if rc > 0 then Signal Put_Error
  return                     /* Return to caller from subrtn     */

    Obtain_Data: procedure expose storage.
    /*-----------------------------------------------------------*/
    /* Function:  Obtain_Data                                    */
    /*                                                           */
    /*            Retrieve data from the dump.  Invoke the IPCS  */
    /*            EVALUATE subcommand as necessary to access     */
    /*            512-byte blocks of data from the IPCS dump     */
    /*            source and store the data in variable          */
    /*            "storage."  Callers of Obtain_Data must        */
    /*            request storage from the same address space.   */
    /*                                                           */
    /* Input:     Description of data to access:                 */
    /*                                                           */
    /*            Hex address of data.                           */
    /*            Decimal position from the hex address of the   */
    /*             first byte to access.                         */
    /*            Decimal length of the data to access.          */
    /*                                                           */
    /* Output:    Requested data is returned.                    */
    /*-----------------------------------------------------------*/

    arg hex_address , dec_position , dec_length
    trace off        /* Suppress display of unsuccessful storage
                                 fetches once PF3 has been hit   */
    Numeric digits(10)
    ipcs_eval_limit = 512     /* The maximum number of bytes that
                                 the IPCS EVALUATE subcommand can
                                 access per invocation           */
    page_size = 4096          /* The size of a storage page      */
    first_index  = dec_position % ipcs_eval_limit /* Determine the
                                 first 512 byte increment        */
    last_index  = (dec_position+dec_length) % ipcs_eval_limit /*
                                 Determine the last 512 byte
                                 increment                       */
    buffer = ''
    do i= first_index to last_index /* For each 512 increment    */
     if storage.hex_address.i = '' then do

     /*----------------------------------------------------------*/
     /* If the data has not yet been accessed, access it.        */
     /*----------------------------------------------------------*/

          hex_address_dot = ,
            hex_address||.    /* Indicate for IPCS that it is an
                                 address                         */
         "EVALUATE"   hex_address_dot ,
                 "POSITION("i*ipcs_eval_limit")" ,
                 "LENGTH("ipcs_eval_limit")" ,
                 "REXX(STORAGE(X))" /* Access the data by invoking
                                 the IPCS EVALUATE subcommand    */
         if rc > 0 then do

         /*------------------------------------------------------*/
         /* If 512 bytes of data could not be accessed, determine*/
         /* if the data spans across a page.  If it does, attempt*/
         /* to access the data that resides in the first page.   */
         /*------------------------------------------------------*/

           address = x2d(hex_address)+i*ipcs_eval_limit
           new_length=page_size-(address//page_size)
           if new_length=0 | new_length >= ipcs_eval_limit then
             signal Access_Error
           "EVALUATE"   hex_address_dot ,
                   "POSITION("i*ipcs_eval_limit")" ,
                   "LENGTH("new_length")" ,
                   "REXX(STORAGE(X))" /* Access the data by invoking
                                 the IPCS EVALUATE subcommand    */
           if rc > 0 then signal Access_Error
         end
         storage.hex_address.i = x   /* Save the data in a
                                 variable so that it only needs to
                                 be accessed once                */
     end
     buffer = buffer||storage.hex_address.i /* Augment the buffer
                                 with the current data           */
    end                       /* For each 512 increment          */
    return_offset = (dec_position-first_index*ipcs_eval_limit)*2+1
    return_length = dec_length*2
    if return_offset-1 + return_length > length(buffer) then

    /*-----------------------------------------------------------*/
    /* Do not attempt to return more than what is in the buffer. */
    /*-----------------------------------------------------------*/

       signal Access_Error
    return  substr(buffer,return_offset,return_length) /* Return
                                 the appropriate data from the
                                 buffer                          */
