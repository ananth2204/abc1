./ ADD NAME=$README  0101-90213-90214-1550-00048-00046-00000-$A1238
This data set contains an set of ISPF Commands that allow the ISPF
user to view data sets and optionally data sets with a specified
member that are allocated to a specified DDname.

NOTE:  DDLIST is noted as being reentrant, but the RDJFCB must
       first be changed to a list form which I have not yet had
       time to do yet.

Some basics first:

This file is in IEBUPDTE format and contains the following members
after being processed by IEBUPDTE:

   $README  -  What you are reading now
   ASM      -  The Assembler source for the DDLIST program
               (I have unnumbered this to reduce the file size
                for data transfer)
   EXEC     -  The basic Rexx procedures used by the ISPF Commands
               and a few others for sample purposes
   MACROS   -  A few macros required to assemble DDLIST
   PANELS   -  The ISPF Panels used by the ISPF Commands

Each of these members, other than $README, must be edited by you to
change "+/" to "./" before processing them using IEBUPDTE into unique
data sets.

You must then use ISPF 3.9 to update your ISPCMDS ISPF Commands Table
to add the following:

     Verb      T  Action
                     Description
'''' DDALL     0  SELECT CMD(%DDLIST &ZPARM) NEWAPPL(ISR)
                     PROCESS DDNAME OR DDNAME(MBR) FROM ANYWHERE           (A)
'''' DDBR      0  SELECT CMD(%DDLIST &ZPARM BROWSE) NEWAPPL(ISR)
                     BROWSE DDNAME OR DDNAME(MBR) FROM ANYWHERE            (A)
'''' DDED      0  SELECT CMD(%DDLIST &ZPARM EDIT) NEWAPPL(ISR)
                     EDIT   DDNAME OR DDNAME(MBR) FROM ANYWHERE            (A)

If you have any questions, comments or improvements to offer contact
me at:

               Lionel Dyck
               Rockwell International
               M/C 110-SH28
               P.O. Box 2515
               Seal Beach Blvd.
               Seal Beach,  Ca 90740
               (213) 797-1125

               IBMLINK:   HONE81(ROK2027)
               SHARECON:  LDYCK
               VMSHARE:   $TS
./ ADD NAME=ASM      0100-90214-90214-1549-00536-00536-00000-$A1238
+/ ADD NAME=DDLIST   0104-90212-90213-0736-00535-00696-00243-$A1238
*---------------------------------------------------------------------*
*                                                                     *
* Name:        DDNQUERY                                               *
*                                                                     *
* Function:    Return to REXX variables all dsnames for a ddname and  *
*              if a member name is passed then only those dsnames.    *
*                                                                     *
* Syntax:      X=DDNQUERY(STEM,DDNAME)                                *
*              X=DDNQUERY(STEM,DDNAME,MEMBER)                         *
*                                                                     *
*              Where:                                                 *
*                                                                     *
*              STEM (with a period) into which the data set name      *
*              is to be placed.                                       *
*                                                                     *
*              STEM.0 will contain a count                            *
*                                                                     *
*              DDNAME is the ddname whose data sets are to be         *
*              placed into REXX variables.                            *
*                                                                     *
*              MEMBER is a specific member in a data set that must    *
*              exist for the data set to be eligible to be placed     *
*              into a variable.                                       *
*                                                                     *
*              Defaults:                                              *
*                                                                     *
*              STEM:     DDNQUERY.                                    *
*              DDNAME:   none                                         *
*              MEMBER:   none                                         *
*                        If blank then all data sets will be used     *
*                                                                     *
*---------------------------------------------------------------------*
* Link Edit information:     REENTRANT                                *
*---------------------------------------------------------------------*
* Return Codes:                                                       *
*                                                                     *
*         0    processing has completed successfully                  *
*         4    no data sets have the requested member                 *
*         8    invalid parm                                           *
*        12    DDNAME requested is not allocated                      *
*        16    ARL is invalid returned by RDJFCB                      *
*        20    no parm provided                                       *
*        24    IRXEXCOM bad return code                               *
*                                                                     *
*---------------------------------------------------------------------*
* Author:      Lionel Dyck                                            *
*              Rockwell International                                 *
*              Mail Code 110-SH28                                     *
*              P.O. Box 2515                                          *
*              2201 Seal Beach Blvd.                                  *
*              Seal Beach, California 90740                           *
*              (213) 797-1125                                         *
*---------------------------------------------------------------------*
* HISTORY:                                                            *
*                                                                     *
*        07/20/90  -  Creation                                        *
*                                                                     *
*---------------------------------------------------------------------*
DDLIST   AMODE 31
DDLIST   $PROLOG R12,LV=4000
         USING WORK,R13
         EJECT
*---------------------------------------------------------------------*
*        PROCESS THE INPUT PARAMETER LIST                             *
*---------------------------------------------------------------------*
         LR    R5,R0               -> ENVIRONMENT BLOCK
         ST    R5,ENVBADDR         Save Environment Block Address
         USING ENVBLOCK,R5
         L     R5,ENVBLOCK_IRXEXTE -> EXTERNAL VECTOR TABLE
         DROP  R5
         USING IRXEXTE,R5
         L     R5,IRXEXCOM         LOAD IRXEXCOM EPA
         ST    R5,EXCOM            SAVE IRXEXCOM EPA
         DROP  R5
         LR    R4,R1               -> EFPL
         USING EFPL,R4             ESTABLISH ADDRESSABILITY TO EFPL
         L     R5,EFPLEVAL         -> EVAL BLOCK ADDRESS POINTER
         L     R5,0(0,R5)          -> EVAL BLOCK
         ST    R5,EVALADDR         SAVE IT'S ADDRESS
         L     R4,EFPLARG          -> ARGUMENT LIST
         DROP  R4
*
         LTR   R4,R4               ANY ARGUMENT LIST ?
         BZ    EXIT20              YES
*
         MVC   STEM,BLANKS         INITIALIZE THE STEM VALUE
         MVC   DDNAME,BLANKS       INITIALIZE THE DDNAME VALUE
         MVC   MEMBER,BLANKS       INITIALIZE THE MEMBER VALUE
*
         USING ARGTABLE_ENTRY,R4   ESTABLISH ADDRESSABILITY TO ARG
         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY REAL ARGUMENTS
         BE    EXIT20              NO - SO EXIT
         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT
         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH
         BCTR  R3,R0               LESS 1 FOR MVC
         EX    R3,MOVESTEM         MOVE THE STEM
         LA    R1,STEM             -> Stem
         AR    R1,R3               Get Stem suffix offset
         LA    R1,1(R1)            Add back the 1 lost during mvc
         ST    R1,STEMSUFX         Now Save the Offset
         LA    R3,1(R3)            Add 1 to len            *LBD 07/90*
         ST    R3,STEMLEN          and save length         *LBD 07/90*
         LA    R4,ARGTABLE_NEXT
*
         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY DDNAME ?
         BE    EXIT8               NO - SO EXIT
         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT
         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH
         BCTR  R3,R0               LESS 1 FOR MVC
         LTR   R3,R3
         BM    EXIT8               NO DDNAME
         EX    R3,MOVEDDN          MOVE DDNAME
         LA    R4,ARGTABLE_NEXT
*
         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY MEMBER ?
         BE    START               NO - SO CONTINUE
         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT
         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH
         BCTR  R3,R0               LESS 1 FOR MVC
         LTR   R3,R3
         BM    START               MEMBER
         EX    R3,MOVEMEM          MOVE MEMBER
         ST    R3,MEMLNGTH         Save member length
         EJECT
*---------------------------------------------------------------------*
*        INITIALIZE ALL WORK AREAS FROM OUR CONSTANTS                 *
*---------------------------------------------------------------------*
START    DS    0H
         OC    DDNAME(8),BLANKS    INSURE UPPER CASE
         OC    MEMBER(8),BLANKS    INSURE UPPER CASE
         OC    STEM(80),BLANKS     INSURE UPPER CASE
*
         MVC   ARLSTRT(XRLL),MODLARL
         MVC   WORKDCB(MODLDCBL),MODLDCB
         MVC   WORKDDN(8),DDNAME   SET UP DDNAME
         SR    R8,R8               ZERO STEM COUNTER
         SPACE 2
*---------------------------------------------------------------------*
*        PROCESS THE JFCBS FOR THE SPECFIED DDNAME                    *
*---------------------------------------------------------------------*
* NOW READ THE JFCB FOR ALL DSNAMES
         LA    R4,ARLSTRT
         ST    R4,JFCBEXIT
         MVI   JFCBEXIT,X'93'
         LA    R4,JFCBEXIT
         ST    R4,WORKDCB+36
         LA    R2,WORKDCB
         RDJFCB ((R2))
         LTR   R15,R15             OK ?
         BNZ   EXIT12              NO - GET OUT OF HERE
*---------------------------------------------------------------------*
*        RDJFCB IS NOW COMPLETE - NOW PROCESS ALL JFCBS               *
*---------------------------------------------------------------------*
         ICM   R9,X'F',ARLAREA    GET AND TEST ADDR OF ARL
         BZ    EXIT16             NO ARL AVAILABLE
         CLI   ARLRCODE,0         TEST RDJFCB REASON CODE
         BNE   EXIT16             NOT AVAILABLE
         LH    R3,ARLRTRVD        # OF RETRIEVED DATA SETS
DSNLP    DS    0H
         LA    R10,4(R9)
         USING INFMJFCB,R10
         MVC   RDSN,BLANKS
         MVC   RDSN(44),JFCBDSNM   MOVE DSNAME
         DROP  R10
DOADD    DS    0H
         CLI   MEMBER,C' '         ANY MEMBER ?
         BE    DOADDIT             NO
         BAS   R10,DOBLDL
         LTR   R15,R15             MEMBER FOUND
         BNZ   BCT                 NO - SKIP ADD
DOADDIT  DS    0H
         BAS   R10,ADD
BCT      DS    0H
         LH    R5,0(R9)           LOAD DATA LENGTH
         AR    R9,R5              BUMP POINTER
         BCT   R3,DSNLP           CONTINUE
         SPACE 2
*---------------------------------------------------------------------*
*        ALL JFCBS PROCESSED - FREE ARL, SET STEM.0 AND EXIT          *
*---------------------------------------------------------------------*
         CVD   R8,DWK
         MVC   COUNT(4),=X'F0202021'
         ED    COUNT(4),DWK+6
         MVC   RDSN,BLANKS
         MVC   RDSN(3),COUNT+1
         L     R4,STEMSUFX
         MVC   0(3,R4),BLANKS
         MVI   0(R4),C'0'          Set stem.0
         OI    FLAG,X'10'          Set final flag
         L     R1,STEMLEN          Load stem. length       *LBD 07/90*
         LA    R1,1(R1)            Add 1                   *LBD 07/90*
         ST    R1,STEMLENV         Save for SHVBLOCK       *LBD 07/90*
         BAS   R10,SETVAR
         L     R6,ARLAREA         -> GETMAIN'D ARL AREA
         L     R7,ARLPOOL         LOAD POOL AND LEN
         FREEMAIN R,A=(6),LV=(7)
         B     EXIT0
         EJECT
*---------------------------------------------------------------------*
*        1.  DETERMINE IF A MEMBER NAME WAS SPECIFIED AND IF SO DO    *
*            A BLDL TO SEE IF THE DATA SET CONTAINS SAID MEMBER.      *
*        2.  IF NO MEMBER SPECIFIED OR THE MEMBER WAS FOUND BY BLDL   *
*            DO A STEM UPDATE                                         *
*        3.  RETURN FOR THE NEXT DSNAME                               *
*---------------------------------------------------------------------*
ADD      DS    0H
         CLI   MEMBER,C' '         ANY MEMBER ?
         BE    SETVAR              NO - SKIP MEMBER BUILD
         LA    R4,RDSN+45          -> END OF DSNAME
FEND     DS    0H
         CLI   0(R4),C' '          END OF DSNAME ?
         BNE   GEND                YES - GOT IT
         BCT   R4,FEND             NO - SEARCH FOR IT
GEND     DS    0H                  AT LAST REAL CHARACTER OF DSNAME
         LA    R4,1(R4)            -> FIRST BLANK
         MVI   0(R4),C'('          MOVE IN LEFT PAREN
         LA    R4,1(R4)            -> NEXT BLANK
         L     R1,MEMLNGTH         Load MVC Length of Member
         EX    R1,MVCMEM           And move it
         LA    R4,1(R4)            NEXT CHARACTER
         AR    R4,R1               Add MVC Length
         MVI   0(R4),C')'          FILL IN END PAREN
         LA    R4,1(R4)            Bump by 1
         LA    R1,RDSN             -> Start of DSN
         SR    R4,R1               Get DSN Length
         ST    R4,DSNLNGTH         Save Length
         EJECT
SETVAR   DS    0H
         MVC   EXCOM1,=CL8'IRXEXCOM'
         XC    EXCOM2,EXCOM2
         LA    R7,EXCOM4
         USING SHVBLOCK,R7
         TM    FLAG,X'10'          Final flag ?
         BO    SETFINAL            Yes
         AH    R8,=H'01'           ADD 1 TO COUNTER
         CVD   R8,DWK
         MVC   COUNT(4),=X'F0202021'
         ED    COUNT(4),DWK+6
*
         L     R4,STEMSUFX
         MVC   0(3,R4),BLANKS
         LA    R1,COUNT+1         -> blank fill character
         LA    R2,2               set loop counter
CNTLP    DS    0H
         CLI   0(R1),C'0'          is it higher than 0
         BH    CNTMVC              yes - now move it
         LA    R1,1(,R1)           no  - bump pointer
         BCT   R2,CNTLP
CNTMVC   DS    0H
         EX    R2,MOVECNT
         LA    R2,1(R2)            Bump count              *LBD 07/90*
         A     R2,STEMLEN          Add current Stem length *LBD 07/90*
         ST    R2,STEMLENV         And save it             *LBD 07/90*
*
SETFINAL DS    0H
         XC    SHVNEXT,SHVNEXT     ZERO CHAIN POINTER
         XC    SHVCODES,SHVCODES   ZERO CODES
         MVI   SHVCODE,C'S'        SET VARIABLE USING Direct method
         LA    R4,RDSN             ADDRESS OF STEM VALUE
         ST    R4,SHVVALA          SAVE ADDRESS OF STEM VALUE
         LA    R4,STEM             ADDRESS OF STEM NAME
         ST    R4,SHVNAMA          SAVE ADDRESS OF STEM NAME
         MVC   SHVNAML,STEMLENV    Set the stem.nnn length *LBD 07/90*
*
         CLI   MEMBER,C' '         Any Member ?
         BE    NOMEM               Yes - skip this section
         MVC   SHVVALL,DSNLNGTH    Set Length
         B     DOEXCOM
NOMEM    DS    0H
         LA    R4,RDSN+45          -> end of dsname
VALL     DS    0H
         CLI   0(R4),C' '          Last character ?
         BNE   SVALL               YES - SAVE LENGTH
         BCT   R4,VALL             INCREMENT
         B     VALL                AND KEEP LOOPING
SVALL    DS    0H
         LA    R4,1(R4)            Add 1 back
         LA    R5,RDSN             -> RDSN START
         SR    R4,R5               SUBTRACT FOR LENGTH
         ST    R4,SHVVALL          SAVE LENGTH
*
DOEXCOM  DS    0H
         OI    FLAG,X'01'          SET ADD FLAG
         LA    R1,EXCOM1
         ST    R1,EXADDR1
         LA    R1,EXCOM2
         ST    R1,EXADDR2
         ST    R1,EXADDR3
         LA    R1,EXCOM4
         ST    R1,EXADDR4
         OI    EXADDR4,X'80'       SET HIGH FLAG
         LA    R1,EXADDR1
         L     R15,EXCOM           -> IRXEXCOM MODULE
         L     R0,ENVBADDR         -> Environment Block
         BASR  R14,R15
         BR    R10                 RETURN TO CALLER
         DROP  R7
         EJECT
*---------------------------------------------------------------------*
*        PERFORM THE BLDL OPERATION ON THE SPECIFIC DATA SET NAME     *
*        TO DETERMINE IF THE REQUESTED MEMBER EXISTS.                 *
*                                                                     *
*        TO DO THIS:                                                  *
*              1.  DYNAMICALLY ALLOCATE THE DATA SET                  *
*              2.  OPEN THE DATA SET                                  *
*              3.  DO THE BLDL                                        *
*              4.  CLOSE AND FREE THE DATA SET                        *
*              5.  RETURN TO THE CALLER WITH RESULT CODE              *
*---------------------------------------------------------------------*
DOBLDL   DS    0H
         MVC   WORKDCB(MODLDCBL),MODLDCB
         MVC   BLDLIST,MODBLIST
         MVC   BLDLNAME,MEMBER     SET MEMBER FOR BLDL
         MVC   S99RBPTR(DYNLEN),PRIMS99R
         MVC   DYNDSN,RDSN         -> DSN
         LA    R4,DYNDSNAM
         ST    R4,TXTPTRS
         LA    R4,DYNDDNAM
         ST    R4,TXT2
         LA    R4,DYNSTAT
         ST    R4,TXT3
         OI    TXT3,X'80'          SET LAST PARM FLAG
         MVC   DSNLEN,=AL2(44)     SET ITS LENGTH
         LA    R4,S99RB
         ST    R4,S99RBPTR
         OI    S99RBPTR,X'80'
         LA    R4,TXTPTRS
         ST    R4,S99TXTPP
         LA    R1,S99RBPTR
         SVC   99                  ** DO THE DYNAMIC ALLOCATION
         MVC   WORKDDN,RETDDN      SETUP DDNAME INTO DCB
         LA    R2,WORKDCB          -> DCB FOR OPEN
         OPEN  ((R2))              DO THE OPEN
         BLDL  (R2),BLDLIST        DO THE BLDL
         LR    R7,R15              SAVE RC
         CLOSE ((R2),FREE)         CLOSE AND FREE IT
         LR    R15,R7              RESET RETURN CODE
         BR    R10                 RETURN TO CALLER
         EJECT
*---------------------------------------------------------------------*
*        ALL OF THE EXIT ROUTINES FOLLOW                              *
*---------------------------------------------------------------------*
SETRC    DS    0H
         L     R11,EVALADDR
         USING EVALBLOCK,R11
         MVC   EVALBLOCK_EVLEN(4),=A(2)
         MVC   EVALBLOCK_EVDATA(2),RC
         DROP  R11
         $EPILOG 0                 ALL OK
*---------------------------------------------------------------------*
EXIT0    DS    0H
         TM    FLAG,X'01'
         BZ    EXIT4               NO ROWS ADDED TO THE TABLE
         MVC   RC,=C'00'           SET RC TO ZERO
         B     SETRC
EXIT4    DS    0H
         MVC   RC,=C'04'           SET RC
         B     SETRC
EXIT8    DS    0H
         MVC   RC,=C'08'           SET RC
         B     SETRC
EXIT12   DS    0H
         MVC   RC,=C'12'           SET RC
         B     SETRC
EXIT16   DS    0H
         MVC   RC,=C'16'           SET RC
         B     SETRC
EXIT20   DS    0H
         MVC   RC,=C'20'           SET RC
         B     SETRC
EXIT24   DS    0H
         MVC   RC,=C'24'           SET RC
         B     SETRC
         EJECT
*---------------------------------------------------------------------*
*        EXECUTED INSTRUCTIONS                                        *
*---------------------------------------------------------------------*
MOVESTEM MVC   STEM(0),0(R2)       ** EXECUTED
MOVEDDN  MVC   DDNAME(0),0(R2)     ** EXECUTED
MOVEMEM  MVC   MEMBER(0),0(R2)     ** EXECUTED
MOVECNT  MVC   0(0,R4),0(R1)       ** Executed
MVCMEM   MVC   0(0,R4),MEMBER      ** Executed
         SPACE 2
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         LTORG
         EJECT
*---------------------------------------------------------------------*
*        CONSTANTS                                                    *
*---------------------------------------------------------------------*
BLANKS   DC    CL80' '
MODBLIST DS    0D                  BLDL MODEL LIST
         DC    255X'00'
         ORG   MODBLIST
         DC    AL2(01)
         DC    AL2(100)
         DC    CL8' '
         DC    XL3'0'
         DC    X'0'
         DC    X'0'
         DC    X'0'
         DC    XL62'0'
         ORG   ,
         EJECT
DALDSNAM EQU   X'0002'
DALSTATS EQU   X'0004'
DALRTDDN EQU   X'0055'
*
PRIMS99R DS    0F
         DC    X'80',AL3(0)        AL3(S99RB)
*
         DC    AL1(20),X'01',XL2'E000'   S99RB
         DC    XL2'00'
         DC    XL2'00'
         DC    A(0)                A(TXTPTRS)
         DC    F'0'
         DC    XL4'00'
*
         DC    A(0)                TXTPTRS A(DYNDSNAM)
         DC    A(0)                A(DYNDDNAM)
         DC    X'80',AL3(0)        AL3(DYNSTAT)
*
         DC    AL2(DALDSNAM),AL2(1)  DYNDSNAM
         DC    AL2(0)
         DC    CL44' '
         DC    AL2(DALRTDDN),AL2(1,8)  DYNDDNAM
         DC    CL8' '
         DC    AL2(DALSTATS),AL2(1,1)   DYNSTAT
         DC    X'08'               SHR STATUS
         EJECT
MODLDCB  DCB   DSORG=PO,DDNAME=WORKDDN,MACRF=R,                        X
               EXLST=0
MODLDCBL EQU   *-MODLDCB
         EJECT
SMDLDCB  DCB   DSORG=PS,DDNAME=NISPFDD,MACRF=PM,RECFM=VB,LRECL=255,    X
               BLKSIZE=6233
SMDLDCBL EQU   *-SMDLDCB
         EJECT
MODLARL  IHAARL DSECT=NO,PREFIX=XRL
XRLL     EQU   *-MODLARL
         EJECT
*---------------------------------------------------------------------*
*        WORK AREA DSECTS                                             *
*---------------------------------------------------------------------*
WORK     DSECT
SAVE     DS    18F
DWK      DS    D
EVALADDR DS    F
EXCOM    DS    A                   ADDRESS OF IRXEXCOM LOAD MODULE
ENVBADDR DS    A                   Environment Block Address
DDNAME   DS    CL8                 PASSED DDNAME
RDSN     DS    CL56                room for dsn(member)
MEMBER   DS    CL8                 PASSED MEMBER NAME
MEMLNGTH DS    F
DSNLNGTH DS    F
LEN      DS    H                   LENGTH OF DSN WITH OR W/O MEMBER
STEM     DS    CL80
STEMSUFX DS    F                   -> STEM SUFFIX LOCATION
STEMLEN  DS    F                   Length of stem.
STEMLENV DS    F                   Length of stem. plus suffix
COUNT    DS    CL4                 COUNTER
RC       DS    XL2                 RETURN CODE
FLAG     DS    X                   STATUS FLAG
*                                  00 IS NULL
*                                  01 AT LEAST 1 ADD PERFORMED
*                                  10 final flag
         SPACE
S99RBPTR DS    F
*
S99RB    DS    AL1(20),X'01',XL2'E000'
S99ERROR DS    XL2'00'
S99INFO  DS    XL2'00'
S99TXTPP DS    A(0)                A(TXTPTRS)
         DS    F'0'
S99FLAG2 DS    XL4'00'
*
TXTPTRS  DS    A(0)                A(DYNDSNAM)
TXT2     DS    A(0)                A(DYNDDNAM)
TXT3     DS    X'80',AL3(0)        AL3(DYNSTAT)
*
DYNDSNAM DS    AL2(DALDSNAM),AL2(1)
DSNLEN   DS    AL2(0)
DYNDSN   DS    CL44' '
DYNDDNAM DS    AL2(DALRTDDN),AL2(1,8)
RETDDN   DS    CL8' '
DYNSTAT  DS    AL2(DALSTATS),AL2(1,1)
         DS    X'08'               SHR STATUS
DYNLEN   EQU   *-S99RBPTR
*
         SPACE 1
EXADDRS  DS    0D
EXADDR1  DS    A(EXCOM1)
EXADDR2  DS    A(EXCOM2)
EXADDR3  DS    A(EXCOM2)
EXADDR4  DS    A(EXCOM4)
EXCOM1   DS    CL8                 CL8'IREXCOM'
EXCOM2   DS    A                   0 (used for exaddr2/3)
EXCOM4   DS    XL32                SHVBLOCK DATA (USING SHVBLOCK)
         SPACE 1
BLDLIST  DS    0D
         DS    CL255
         ORG   BLDLIST
         DS    AL4
BLDLNAME DS    CL8
TTR      DS    XL3
K        DS    X
Z        DS    X
C        DS    X
USERDATA DS    XL62
         ORG   ,
         EJECT
WORKDCB  DCB   DSORG=PO,DDNAME=WORKDDN,MACRF=R,                        X
               EXLST=0
WORKDDN  EQU   WORKDCB+40,8
         SPACE 2
JFCBEXIT DS    0H
         DS    F
         EJECT
ARLSTRT  IHAARL DSECT=NO
         EJECT
         IEFJFCBN LIST=YES
         EJECT
         IRXEFPL DSECT=YES
         EJECT
         IRXARGTB
         EJECT
         IRXSHVB
         EJECT
         IRXEVALB
         EJECT
         IRXEXTE
         EJECT
         IRXENVB
         END   ,
./ ADD NAME=EXEC                                   02AUG90 15.53.14
+/ ADD NAME=DDINFO   0102-90176-90195-1534-00106-00109-00000-$A1238
/* rexx */

/* ***************************************************************
    This Rexx procedure will use the LISTDSI function of REXX to
    display information about a data set.

    This is an ISPF Command and the syntax is:

    LISTDSI
    or
    LISTDSI  data.set.name

    Additional options are NODIR
                           VOLUME(volser)

    This was originally written by Mike Theys using TSO/E R3 Clist
    and has been converted to Rexx by Lionel Dyck.

    Panels used are:  DDINFO or DDINFO2
*************************************************************** */

arg dsn opt

if wordpos("NODIR",opt) > 0 then nodir = "NODIR"
                            else nodir = ""

if wordpos("DEBUG",opt) > 0 then trace i
                            else trace off

if pos("VOLUME(",opt) > 0 then do
   parse var opt with "VOLUME(" volume ")"
   end

panel = "DDINFO"

Address ISPEXEC

"VGET (VLDSISVN) PROFILE"

ldv = vldsisvn
if ldv = "yes" then panel = "DDINFO2"

ldsidsn = " "

if dsn = "!" then dsn = ""
else do
  l = length(dsn)
  if l > 2 then
    if substr(dsn,1,1) = "!" then ldsidsn = substr(dsn,2,l-1)
                             else ldsidsn = dsn
     end

do forever
if nodir = "NODIR" then do
  parse value "" with ldsivdir ldsiadir ldsiudir ldsimems
end
else ldsivdir = "DIRECTORY"


if length(volume) > 0 then ldsivvol = volume
                       else ldsivvol = ""

ldsilock = "LOCK"

if length(ldsidsn) > 0 then do
  x = listdsi(ldsidsn ldsivdir)
   ldsirc   =  rc
   ldsifdsn = sysdsname
   ldsivol  = sysvolume
   ldsiunit = sysunit
   ldsidorg = sysdsorg
   ldsircfm = sysrecfm
   ldsilrcl = syslrecl
   ldsibsiz = sysblksize
   ldsikeyl = syskeylen
   ldsistyp = sysunits
   ldsialoc = sysalloc
   ldsiused = sysused
   ldsiprim = sysprimary
   ldsisdry = sysseconds
   ldsiexts = sysextents
   ldsicdte = syscreate
   ldsildte = sysrefdate
   ldsixdte = sysexdate
   ldsipswd = syspassword
   ldsiracf = sysracfa
   ldsichng = sysupdated
   ldsitpcv = systrkscyl
   ldsibptv = sysblkstrk
   ldsiadir = sysadirblk
   ldsiudir = sysudirblk
   ldsimems = sysmembers
   ldsireas = sysreason
   ldsiem1  = sysmsglvl1
   ldsiem2  = sysmsglvl2
  if ldsirc = 0 & ldsireas = 0 then do
    ldsiem1  =  ""
    ldsiem2  = ""
  end
  if length(volume) = 0
    then ldsistat = sysdsn(ldsidsn))
    else ldsistat = ""
end
"DISPLAY PANEL("panel")"
 if rc > 0 then exit
end
+/ ADD NAME=DDLIST   0102-90213-90214-1508-00324-00291-00000-$A1238
/* ---------------------  rexx procedure  ---------------------- */
/* Name:     DDLIST                                              */
/*                                                               */
/* Function: To provide to the TSO ISPF User the ability from    */
/*           an ISPF Command to display a selection menu of all  */
/*           data sets for a specified ddname, and optionally    */
/*           to only display those data sets with a specified    */
/*           member name.                                        */
/*                                                               */
/* Syntax:   %DDLIST ddname(member) option                       */
/*                                                               */
/*           Where:                                              */
/*                                                               */
/*           ddname    is the ddname from which the data sets    */
/*                     will be selected.                         */
/*                                                               */
/*                     Special DDNAME values of LINKLIST or      */
/*                     LPALIST will process the data sets        */
/*                     allocated to the current active           */
/*                     LINK list or LPA list.                    */
/*                                                               */
/*           member    is optional and will restrict the display */
/*                     to just those data sets with that member  */
/*                                                               */
/*           option:   BROWSE - use DDNBR table display panel    */
/*                              and "S" = Browse                 */
/*                     EDIT   - use DDNED table display panel    */
/*                              and "S" = Edit                   */
/*                     default is to use the DDNALL table panel  */
/*                                                               */
/*           Required:  ddname                                   */
/*                                                               */
/* Author:    Lionel B. Dyck                                     */
/*            Rockwell International                             */
/*            P.O. Box 2515                                      */
/*            Seal Beach, California 90740                       */
/*            (213) 797-1125                                     */
/*            IBMLINK:  ROK2027                                  */
/*                                                               */
/* History:                                                      */
/*                                                               */
/*            07/31/90 - Lionel Dyck                             */
/*            If option Browse or Edit specified and only 1      */
/*            data set matches display criteria then enter       */
/*            Browse or Edit directly.                           */
/*                                                               */
/*            07/03/90 - Lionel Dyck                             */
/*            Remove option X and add P option to invoke the     */
/*            PDS Dialog via the PDS TSO Command.                */
/*                                                               */
/*            06/26/90 - Lionel Dyck                             */
/*            Updated to support special ddnames of              */
/*            LINKLIST and LPALIST.  Subroutine to               */
/*            identify these data sets copied from               */
/*            Dave ALcock of Rockwell International              */
/*                                                               */
/*            06/22/90 - Lionel Dyck                             */
/*            Updated to support ? for tutorial panels           */
/*                                                               */
/*            06/21/90 - Lionel Dyck                             */
/*            creation of this Rexx procedure.                   */
/*                                                               */
/* ------------------------------------------------------------- */

arg opt

Address ISPEXEC

if length(opt) = 0 then do
   zedsmsg = ""
   xx = sysvar(sysicmd)
   zedlmsg = "A DDNAME must be specified when executing the" xx "dialog"
   "SETMSG MSG(ISRZ000)"
   exit
   end


panel   = "DDALL"
defcmd  = "BROWSE"
defcmdd = "Browse"

w1 = word(opt,1)
if words(opt) > 1 then do
                        w2 = word(opt,2)
                        select
                              when w2      = "BROWSE" then do
                                   panel   = "DDBR"
                                   defcmd  = "BROWSE"
                                   defcmdd = "Browse"
                                   end
                              when w2      = "EDIT" then do
                                   panel   = "DDED"
                                   defcmd  = "EDIT"
                                   defcmdd = "Edit"
                                   end
                              otherwise nop;
                        end
end

if w1 = "?" then do
                 select
                 when panel = "DDALL" then panel = "$DDALL"
                 when panel = "DDBR"  then panel = "$DDBR"
                 when panel = "DDED"  then panel = "$DDED"
                 end
                 do until rc > 0
                     "DISPLAY PANEL("panel")"
                     end
                 exit
                 end

parse var w1 ddname "(" member ")"

if ddname = "LINKLIST" | ddname = "LPALIST" then call special

"VGET (ZSCREEN)"

table = "DT"zscreen||random()

"CONTROL ERRORS RETURN"

"TBCREATE" table "NAMES(WDSN ACT) NOWRITE REPLACE"

dsn.0 = 0

x=ddlist("dsn.",ddname,member)

return_code = x

do i = 1 to dsn.0
   wdsn = dsn.i
   ISPEXEC "TBADD" table
   end

if ddname = "LINKLIST" | ddname = "LPALIST" then
      Address TSO "FREE F("ddname")"

zedsmsg = ""
zedlmsg = ""

select
  when return_code = 0 then call doit
  when return_code = 4 then do
       "TBEND" table
       zedlmsg = "No data sets matched the selection criteria"
       "SETMSG MSG(ISRZ000)"
       end
  when return_code = 8 then do
       "TBEND" table
       zedlmsg = "Invalid parm passed to the DDLIST program"
       "SETMSG MSG(ISRZ000)"
       end
  when return_code = 12 then do
       "TBEND" table
       if ddname = "EDIT" then do
          zedlmsg = "DDED Requires that a DDNAME be specified"
          end
       if ddname = "BROWSE" then do
          zedlmsg = "DDBR Requires that a DDNAME be specified"
          end
       if zedlmsg = "" then
          zedlmsg = "The requested DDNAME:" ddname "is not currently allocated"
       "SETMSG MSG(ISRZ000)"
       end
  when return_code = 16 then do
       "TBEND" table
       zedlmsg = "The ARL returned by the RDJFCB macro is invalid"
       "SETMSG MSG(ISRZ000)"
       end
  when return_code = 20 then do
       "TBEND" table
       zedlmsg = "No parm was passed to the DDLIST program"
       "SETMSG MSG(ISRZ000)"
       end
  when return_code = 24 then do
       "TBEND" table
       zedlmsg = "The requested ISPF Table" table "was not open"
       "SETMSG MSG(ISRZ000)"
       end
  otherwise
       say "Invalid return code from DDLIST of" return_code
end
exit return_code

doit:
parse value "0 0" with lc crp

if w2 = "EDIT" | w2 = "BROWSE" then do
   "TBQUERY" table "ROWNUM("rownum")"
     if rownum = 1 then do
                      "TBTOP" table
                      "TBSKIP" table "NUMBER(1)"
                      lc = 2
                      sel = "S"
                      end
end

Do until lc > 4
   if lc = 0 then do
                   sel = ""
                   "TBTOP" table
                   "TBSKIP" table "NUMBER("crp")"
                   "TBDISPL" table "PANEL("panel")"
                   end
             else if lc = 4 then do
                   sel = ""
                   "TBDISPL" table
                   end
   lc = rc
   crp = ztdtop
   select
        when sel = "B" then do
                       "BROWSE DATASET('"wdsn"')"
                       src = rc
                       call bract
                       call tbput
                       end
        when sel = "S" then do
                       defcmd "DATASET('"wdsn"')"
                       src = rc
                       call sact
                       call tbput
                       end
        when sel = "E" then do
                       "EDIT DATASET('"wdsn"')"
                       src = rc
                       call edact
                       call tbput
                       end
        when sel = "P" then do
                       parse value wdsn with xdsn "(" mem ")"
                       if length(mem) > 0 then
                          Address TSO "PDSE '"xdsn"' ML" mem
                       else
                          Address TSO "PDSE '"xdsn"'"
                       act = "PDS Command"
                       call tbput
                       end
        when sel = "I" then do
                       Address TSO "%DDNINFO '"wdsn"'"
                       act = "Info"
                       call tbput
                       end
        when length(sel) = 0 then nop
        otherwise           x = prompt("on")
                            Address TSO sel "'"wdsn"'"
                            x = prompt("off")
                            act = sel
                            call tbput
        end
end
"TBEND" table
return

tbput:
   "TBPUT" table
   act = ""
   return

special:

ddn = ""

if ddname = "LPALIST" then do
/* REXX - List the current LPALST */
@CVT    = STORAGE(10,4)                      /* L R1,CVTPTR             */
@SMEXT  = STORAGE(D2X(C2D(@CVT)+1196),4)     /* L R1,CVTSMEXT-CVTMAP(R1 */
@EPLPS  = STORAGE(D2X(C2D(@SMEXT)+56),4)     /* L R1,CVTEPLPS-CVTVSTGX( */
LPAC    = C2D(STORAGE(D2X(C2D(@EPLPS)+4),4)) /* L R1,LPATCNT(R1)     */
@EPLPS  = D2X(C2D(@EPLPS)+8)                 /* LA R1,LPATNTRY(R1)      */
do i = 1 TO LPAC
   ddw = STORAGE(D2X(X2D(@EPLPS)+1),44)
   ddn = ddn "'"strip(ddw)"'"
   @EPLPS = D2X(X2D(@EPLPS)+45)              /* Bump to next 45 byte ent*/
   end
   call doalloc
   return
end


if ddname = "LINKLIST" then do
/* REXX - List the current LNKLST */
@CVT    = STORAGE(10,4)                     /* L R1,CVTPTR             */
@LLTA   = STORAGE(D2X(C2D(@CVT)+1244),4)    /* L R1,CVTLLTA-CVTMAP(R1) */
LNKC    = C2D(STORAGE(D2X(C2D(@LLTA)+4),4)) /* L R1,LLTCOUNT(R1)     */
@LLTA   = D2X(C2D(@LLTA)+8)                 /* LA R1,LLTENTRY(R1)      */
do i = 1 TO LNKC
   ddw = storage(d2x(x2d(@llta)+1),44)
   ddn = ddn "'"strip(ddw)"'"
   @LLTA = D2X(X2D(@LLTA)+45)               /* Bump to next 45 byte ent*/
   end
   call doalloc
   return
end

sact:
     if defcmd = "BROWSE" then call bract
                          else call edact
     return

bract:
  select
     when src = 12 then act = "0 length data"
     when src = 14 then act = "Member not found"
     when src = 16 then act = "No members"
     when src = 20 then act = "Severe error"
     otherwise act = "Browse"
     end
  return

edact:
  select
     when src = 4  then act = "Data not saved"
     when src = 14 then act = "Member in use"
     when src = 16 then act = "No members "
     when src = 20 then act = "Severe error"
     otherwise act = "Edit"
     end
  return

doalloc:
  x = msg("off")
  Address TSO "ALLOC FILE("ddname") DS("ddn") SHR"
  return
+/ ADD NAME=FREEALL  0102-90183-90183-0829-00045-00045-00000-$A1238
/*  rexx  */

x = outtrap("la.","*")

"LISTALC STATUS SYSNAMES"

x = outtrap("off")

do i = 1 to la.0
   if substr(la.i,1,1) = "*" then do
             dsname = strip(substr(la.i,2,44))
             i = i + 1
             call freeit
             iterate
             end
   if substr(la.i,1,1) ¬= " " then do
             dsname = strip(substr(la.i,1,44))
             i = i + 1
             call freeit
             end
   end


exit

freeit:
   ddname = Strip(substr(la.i,3,8))
   if length(ddname) = 0 then return
      select
        when ddname = "SYSPROC"  then return
        when ddname = "SYSEXEC"  then return
        when ddname = "SYSHELP"  then return
        when ddname = "TASKLIB$" then return
        when ddname = "TASKLIB@" then return
        when ddname = "SMPTLIB"  then return
        when ddname = "SMPTABL"  then return
        when ddname = "SUBCHKDD" then return
        when ddname = "EDCHKDD"  then return
        when ddname = "IPCMLIB"  then return
        when ddname = "IPCPLIB"  then return
        when ddname = "IPCTLIB"  then return
        when ddname = "ISRCFIL"  then return
        otherwise "FREE FILE("ddname")"
        end
   return
+/ ADD NAME=KDDN     0109-90176-90206-1335-00067-00069-00000-$A1238
/*  rexx  */

arg opts

signal on error

da. = ""
dd. = ""
da.0 = 0

if pos(")",opts) > 0 then do
   parse var opts "(" words ")" option
   end
   else do
        words  = word(opts,1)
        option = word(opts,2)
        end

c = words(words)
do i = 1 to c
   dsn = strip(word(words,i))
   if substr(dsn,1,1) = "'" then da.i = dsn
      else da.i = sysvar(syspref)"."dsn
   da.0 = da.0 + 1
   end

x = outtrap("la.","*")

"LISTALC STATUS SYSNAMES"

x = outtrap("off")

sortdd = " "
cnt    = 0
j = 1

do i = 1 to la.0
   if substr(la.i,1,3) = "--D" then iterate i
   if word(la.i,1)     = "TERMFILE" then iterate
   if substr(la.i,1,5) ¬= "     " then do
      dsname = word(la.i,1)
      i = i + 1
      if substr(la.i,3,1) ¬= " " then do
                ddname = word(la.i,1)
                cnt = 1
                end
                else cnt = cnt + 1
      dd.j = dsname cnt ddname
      j = j + 1
      end
end

do i = 1 to j-1
   do k = 1 to da.0
      if word(dd.i,1) = da.k then do
         parse value dd.i with w1 w2 w3
         say w1 "Allocated to:"
         if w2 = 1 then say w3
                   else say w3  w2 "in Concatentation"
         end
   end
end
exit

error:   say sourceline(sigl)
         trace "?Results"
         nop
+/ ADD NAME=KDSN     0113-90173-90214-1212-00089-00037-00000-$A1238
/*  Rexx Procedure to replace the KDSN TSO Command */

arg w1 option

parse upper var w1 ddname "(" member ")"

if length(member) > 0 then do
   say "Member name is not allowed for the KDSN command"
   exit
   end

if wordpos("DEBUG",option)   > 0 then trace ?a
if wordpos("SAVE",option)    > 0 then save = "yes"
if wordpos("REPLACE",option) > 0 then replace = "yes"

if save = "yes" then do
   if replace  = "yes" then do
      say "Error in KDSN options, both REPLACE and SAVE specified"
      exit
      end
   do cnt = 1 to 999 by 1
     table = "KDSN"cnt
     x = listdsi(table "FILE")
     if (sysreason = 0) | (sysreason = 27) then iterate
        else leave
     end
    "ALLOC F("table") UNIT(SYSVIO) SPACE(10,10) TRACKS",
           "RECFM(V B) LRECL(60) BLKSIZE(0)"

    x = ddlist("kd.",ddname)

    return_code = x

    if return_code > 0 then do
       "free f("table")"
       signal exit
       end
    else do
         t.0 = 1
         t.1 = substr(ddname,1,8)
         do i = 1 to kd.0
         j = t.0 + 1
         t.0 = j
         t.j = kd.i
         end
         "execio * diskw" table "(finis stem t."
         end
    exit
end
if replace = "yes" then do
  if save = "yes" then do
     say "Error in KDSN options, both REPLACE and SAVE specified"
     exit
  end
   do cnt = 1 to 999 by 1
     table = "KDSN"cnt
     x = listdsi(table "FILE")
     if (sysreason = 0) | (sysreason = 27) then
        "EXECIO * DISKR" table "(FINIS STEM tk."
     if tk.1 = ddname then leave
   end
   dsname = ""
   do i = 2 to tk.0
       dsname = dsname" '"tk.i"' "
   end
   "ALLOC F("ddname") SHR REU DS("dsname")"
   "FREE  F("table")"
   if rc <> "0" then signal exit
   exit
end
else do

    x = ddlist("tk.",ddname)

    return_code = rc
    if return_code = 4 then say substr(ddname,1,8) "NOT ALLOCATED"
    if return_code > 4
              then say substr(ddname,1,8) "NOT ALLOCATED"
    if return_code > 0 then signal exit

    say substr(ddname,1,8) "ALLOCATED TO:"

    do i = 1 to tk.0
       say tk.i
       end

end
exit:
 exit 0
+/ ADD NAME=KDSNA    0110-90173-90214-0933-00089-00037-00000-$A1238
/*  Rexx Procedure to replace the KDSN TSO Command */

parse arg w1 option

parse upper var w1 ddname "(" member ")"

do while option <> ""
   parse upper value option with curopt option

   select
      when abbrev(curopt,deb) then trace ?a
      when abbrev(curopt,sav) then save  = "yes"
      when abbrev(curopt,rep) then replace = "yes"
   end
end

if save = "yes" then do
   if replace  = "yes" then do
      say "error in options, both replace and save specified"
      exit
   end do
   do cnt = 1 to 999 by 1
     table = "kdsn"cnt
     "whatif "table" allocated"
     wf_rc = rc
     if wf_rc <> 0 then leave
   end
    "ALLOC F("table") UNIT(SYSVIO) SPACE(10,10) TRACKS",
           "RECFM(V B) LRECL(60) BLKSIZE(0)"

    if length(member) = 0 then
       x = ddnlist("kd.","ddname")
       else
       x = ddnlist("kd.",ddname,member)

    return_code = x

    if return_code > 0 then do
     "free f("table")"
     signal exit
    end
    else do i = 1 to kd.0
         if i = 1 then Queue substr(ddname,1,8)substr(member,1,8)
                  else Queue   kd.i
         if kd.0 < i then
            "execio 1 diskw" table
            else
            "execio 1 diskw" table "(finis"
         end
    exit
end
if replace = "yes" then do
  if save = "yes" then do
     say "error in options, both replace and save specified"
     exit
  end
   do cnt = 1 to 999 by 1
     table = "kdsn"cnt
     "whatif "table" allocated"
     wf_rc = rc
     if wf_rc = 0 then "EXECIO * DISKR" table "(FINIS STEM tk."
     if tk.1 = ddname then leave
   end
   do i = 2 to tk.0
       dsname = dk.i" "
   end
   "ALLOC F("DDNAME") SHR REU DS("DSNAME")"
   if rc <> "0" then signal exit
   exit
end
else do

    x = ddlist("tk.",ddname,member)

    return_code = rc
    if return_code = 4 then say substr(ddname,1,8) "NOT ALLOCATED"
    if return_code > 4
              then say substr(ddname,1,8) "NOT ALLOCATED"
    if return_code > 0 then signal exit

    say substr(ddname,1,8) "ALLOCATED TO:"

    do i = 1 to tk.0
       say tk.i
       end

end
exit:
 nop
+/ ADD NAME=KLIB     0105-90174-90213-1214-00029-00024-00000-$A1238
/*  Rexx Procedure to replace the KLIB TSO Command */

arg w1 option

parse var w1 ddname "(" member ")"

if length(member) > 0 then
   x=ddlist("tk.",ddname,member)
   else
   x=ddlist("tk.",ddname)

return_code = x

select
  when return_code = 0 then signal doit
  when return_code = 4 then
         say ddname " DATASETS SEARCHED -  " member "NOT FOUND"
  when return_code > 4 then
       say substr(ddname,1,8)  "NOT ALLOCATED"
  otherwise exit
end
exit

doit:
say "FOUND IN:"

do i = 1 to tk.0
   say tk.i
   end
+/ ADD NAME=LA       0111-90169-90214-0705-00099-00060-00000-$A1238
/*  rexx  */

x = outtrap("la.","*")

"LISTALC STATUS SYSNAMES"

x = outtrap("off")

Address ISPEXEC

"VGET ZSCREEN"
table = "LA"zscreen||random()

"TBCREATE " table ,
        "NAMES(DDNAME DSNAME VOLUME SORTDD) NOWRITE REPLACE"

sortdd = " "
cnt    = 0
j = 1

do i = 1 to la.0
   if substr(la.i,1,3) = "--D" then iterate i
   if word(la.i,1)     = "TERMFILE" then iterate
   if substr(la.i,1,5) ¬= "     " then do
      dsname = word(la.i,1)
      if left(dsname,1) = "*" then dsname = substr(dsname,2,length(dsname)-1)
      i = i + 1
      if substr(la.i,3,1) ¬= " " then do
                ddname = word(la.i,1)
                cnt = 1
                end
                else cnt = cnt + 1
      dd.j = dsname cnt ddname
      j = j + 1
      end
end

do i = 1 to j-1
   parse value dd.i with dsname cnt ddname
   sortdd = ddname||cnt
   if cnt > 1 then
              ddname = ""
   x = listdsi("'"dsname"'")
   volume = sysvolume
   "TBADD " table
   end

lc = 0
crp = 0

"TBSORT" table "FIELDS(SORTDD C,A)"

Do until lc > 4
   sel = ""
   if lc = 0 then do
                   "TBTOP" table
                   "TBSKIP" table "NUMBER("crp")"
                   "TBDISPL" table "PANEL(LA)"
                   end
             else
             "TBDISPL" table
   lc = rc
   crp = ztdtop

   "CONTROL ERRORS RETURN"
   select
   when sel = "B" then "BROWSE DATASET('"dsname"')"
   when sel = "E" then "EDIT   DATASET('"dsname"')"
   when sel = "F" then do
                       if length(ddname) > 0 then do
                          x = msg("off")
                          Address TSO "FREE FILE("ddname")"
                          if rc = 0 then
                             "TBDELETE" table
                             else call domsg1
                          end
                          else call domsg2
                          x = msg("on")
                       end
   when sel = "P" then Address TSO "PDSE '"dsname"'"
   otherwise nop;
   end
end  /* end of the do until loop */

"TBEND" table
exit

Domsg1:
  zedsmsg = ""
  zedlmsg = "Unable to FREE requested file" ddname
  "SETMSG MSG(ISRZ000)"
  return

Domsg2:
  zedsmsg = ""
  zedlmsg = "You may not FREE a data set that",
            "is part of a concatenation" dsname
  "SETMSG MSG(ISRZ000)"
  return
+/ ADD NAME=TSOTRAP  0100-90209-90209-1447-00047-00047-00000-$A1238
/* ---------------------  rexx procedure  ---------------------- */
/* Name:      TSOTRAP                                            */
/*                                                               */
/* Function:  This Rexx procedure will accept any TSO command    */
/*            (including clists and other Rexx procedures)       */
/*            that output to the terminal and trap the output    */
/*            and then display the results using ISPF Browse.    */
/*                                                               */
/* Syntax:    %TSOTRAP tso-command options                       */
/*                                                               */
/* Author:    Lionel B. Dyck                                     */
/*            Rockwell International                             */
/*            P.O. Box 2515                                      */
/*            Seal Beach, California 90740                       */
/*            (213) 797-1125                                     */
/*            IBMLINK:  ROK2027                                  */
/*                                                               */
/* History:   07/23/90 - Rexx procedure created.                 */
/*                                                               */
/* ------------------------------------------------------------- */

arg command

if length(command) = 0 then do
   say "Error:  Use of TSOTRAP requires the specification of"
   say "        a TSO command whose results will be captured"
   say "        and displayed using ISPF Browse."
   say "        (e.g.  %TSOTRAP LISTC)"
   exit 12
   end

x = outtrap("trap.","*")

command

x= outtrap("off")

Address ISPEXEC "VGET (ZTEMPF)"

dd = "TP"random()

"ALLOC F("dd") DS('"ztempf"') SHR"

"EXECIO * DISKW" dd "(FINIS STEM trap."

Address ISPEXEC "BROWSE DATASET('"ztempf"')"
"FREE F("dd")"
./ ADD NAME=MACROS   0101-90213-90213-1226-00165-00165-00000-$A1238
+/   ADD NAME=$PROLOG
         MACRO
&LABEL   $PROLOG &LV=0,&GM=Y
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
         GBLC  &PROGM
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         AIF   ('&GM' EQ 'N').NOGM
&PROGM   SETC  'GETMAIN'
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
         AGO   .STORE
.NOGM    ANOP
         CNOP  0,4
         LA    R1,SAVE&SYSNDX
         B     *+76
SAVE&SYSNDX DC 18F'0'
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
+/   ADD NAME=$EPILOG
         MACRO
&LABEL   $EPILOG &RC
         GBLC  &PROGM
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         AIF   ('&PROGM' NE 'GETMAIN').NOFREE
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         AGO   .LM
.NOFREE  ANOP
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
.LM      ANOP
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
+/   ADD NAME=$REGS
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
 SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
./ ADD NAME=PANELS                                 02AUG90 15.53.14
+/ ADD NAME=$DDALL   0106-90173-90184-1448-00034-00029-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ¬ type(text) intens(high) caps(off) just(asis ) color(yellow)
   ! type(output) intens(low ) caps(off) just(asis ) color(white)
   | type(text  ) intens(high) color(white)
   ` type(text) intens(low ) caps(off) just(asis ) color(turq)
)Body
+-------------------------% Data Set List for DDNAME +--------------------------
%Command ===>_zcmd
%
`    The%DDALL`ISPF Dialog provides a selection list of all data sets
`    currently allocated to a requested DDNAME.  Optionally it will
`    display a selection list for just those data sets that contain a
`    specified member.
`
`    Note:  DDnames of LINKLIST and LPALIST are reserved and will be used
`           to display and or search the LINK or LPA list of data sets.
`
`    Valid selection options are:
`         %B`to Invoke ISPF Browse     (%S`is an alias for %B`)
`         %E`to Invoke ISPF Edit
`         %I`for Information on the data set
`         %P`to Invoke the PDS Dialog
`
`    Or any valid TSO command may be entered that accepts the data set name
`    as the first parameter.
`
`    Syntax:%DDALL¬ddname
`        or:%DDALL¬ddname(member)
)Init
)Proc
)End
+/ ADD NAME=$DDBR    0102-90173-90184-1448-00034-00031-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ¬ type(text) intens(high) caps(off) just(asis ) color(yellow)
   ! type(output) intens(low ) caps(off) just(asis ) color(white)
   | type(text  ) intens(high) color(white)
   ` type(text) intens(low ) caps(off) just(asis ) color(turq)
)Body
%Browse+------------------% Data Set List for DDNAME +--------------------------
%Command ===>_zcmd
%
`    The%DDBR`ISPF Dialog provides a selection list of all data sets
`    currently allocated to a requested DDNAME.  Optionally it will
`    display a selection list for just those data sets that contain a
`    specified member.
`
`    Note:  DDnames of LINKLIST and LPALIST are reserved and will be used
`           to display and or search the LINK or LPA list of data sets.
`
`    Valid selection options are:
`         %S`to Invoke ISPF Browse     (%B`is an alias for %S`)
`         %E`to Invoke ISPF Edit
`         %I`for Information on the data set
`         %P`to Invoke the PDS Dialog
`
`    Or any valid TSO command may be entered that accepts the data set name
`    as the first parameter.
`
`    Syntax:%DDBR¬ddname
`        or:%DDBR¬ddname(member)
)Init
)Proc
)End
+/ ADD NAME=$DDED    0103-90173-90184-1448-00034-00031-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ¬ type(text) intens(high) caps(off) just(asis ) color(yellow)
   ! type(output) intens(low ) caps(off) just(asis ) color(white)
   | type(text  ) intens(high) color(white)
   ` type(text) intens(low ) caps(off) just(asis ) color(turq)
)Body
%Edit+--------------------% Data Set List for DDNAME +--------------------------
%Command ===>_zcmd
%
`    The%DDED`ISPF Dialog provides a selection list of all data sets
`    currently allocated to a requested DDNAME.  Optionally it will
`    display a selection list for just those data sets that contain a
`    specified member.
`
`    Note:  DDnames of LINKLIST and LPALIST are reserved and will be used
`           to display and or search the LINK or LPA list of data sets.
`
`    Valid selection options are:
`         %S`to Invoke ISPF Edit       (%E`is an alias for %S`)
`         %B`to Invoke ISPF Browse
`         %I`for Information on the data set
`         %P`to Invoke the PDS Dialog
`
`    Or any valid TSO command may be entered that accepts the data set name
`    as the first parameter.
`
`    Syntax:%DDED¬ddname
`        or:%DDED¬ddname(member)
)Init
)Proc
)End
+/ ADD NAME=DDALL    0104-90172-90184-1447-00028-00027-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   @ type(output) intens(high) caps(on ) just(left )
   ¬ type(output) intens(low ) caps(off) just(asis )
)Body
+---------------------%Data Sets Concatenated to:@ddname  +---------------------
%Command ===>_zcmd                                            %Scroll ===>_amt +
%
+Valid Selections:%B+Browse %E+Edit %I+Info on Dataset %P+PDS %any TSO command+
+
%Cmd        Data Set Name                                     Status
+
)Model
!z        +¬z                                                ¬z
)Init
  .ZVARS = '(sel wdsn act)'
  .help  = $DDALL
  &amt = CSR
)Reinit
)Proc
                                  /* Process )BODY fields here      */
  If (&ztdsels ¬= 0000)           /* If user selected some rows ... */
                                  /* ... process )MODEL fields here */
  ver (&sel,nonblank)
)End
+/ ADD NAME=DDBR     0108-90172-90184-1447-00028-00026-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   @ type(output) intens(high) caps(on ) just(left )
   ¬ type(output) intens(low ) caps(off) just(asis )
)Body
%Browse+--------------%Data Sets Concatenated to:@ddname  +---------------------
%Command ===>_zcmd                                            %Scroll ===>_amt +
%
+Valid Selections:%S+Browse %E+Edit %I+Info on Dataset %P+PDS %any TSO command+
+
%Cmd        Data Set Name                                     Status
+
)Model
!z        +¬z                                                ¬z
)Init
  .ZVARS = '(sel wdsn act)'
  .help  = $DDBR
  &amt = CSR
)Reinit
)Proc
                                  /* Process )BODY fields here      */
  If (&ztdsels ¬= 0000)           /* If user selected some rows ... */
                                  /* ... process )MODEL fields here */
  ver (&sel,nonblank)
)End
+/ ADD NAME=DDED     0105-90172-90184-1447-00028-00027-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   @ type(output) intens(high) caps(on ) just(left )
   ¬ type(output) intens(low ) caps(off) just(asis )
)Body
%Edit+----------------%Data Sets Concatenated to:@ddname  +---------------------
%Command ===>_zcmd                                            %Scroll ===>_amt +
%
+Valid Selections:%S+Edit %B+Browse %I+Info on Dataset %P+PDS %any TSO command+
+
%Cmd        Data Set Name                                     Status
+
)Model
!z        +¬z                                                ¬z
)Init
  .ZVARS = '(sel wdsn act)'
  .help  = $DDED
  &amt = CSR
)Reinit
)Proc
                                  /* Process )BODY fields here      */
  If (&ztdsels ¬= 0000)           /* If user selected some rows ... */
                                  /* ... process )MODEL fields here */
  ver (&sel,nonblank)
)End
+/ ADD NAME=DDINFO   0125-88111-90181-1535-00099-00085-00000-$A1238
)ATTR
 @ TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
 | TYPE(OUTPUT) INTENS(HIGH) COLOR(PINK)   CAPS(OFF)
 ¬ TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)    CAPS(OFF)
 + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)
 ! TYPE(OUTPUT) INTENS(LOW)  COLOR(GREEN)  CAPS(OFF)
 % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)
 ~ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)
)BODY expand(¦¦) lmsg(ldsilmsg)
%-¦-¦- ~LISTDSI: List Dataset Information% -¦-¦-
%Command ===>_ZCMD                                          ~SYS variables?_LDV~
+                                                           ~DirectoryInfo?_DYN~
~DSNAME  ===>_LDSIDSN                                       ~
~VOLUME  ===>_VOLUME+
+Full dsname:@LDSIQDSN
+Volume Serial Id:      @ldsivol          +Creation Date:           @ldsicdte
+Unit Type of Volume:   @ldsiunit         +Last Referenced Date:    @ldsildte
+Data Set Orgination:   @ldsidorg         +Expiration Date:         @ldsixdte
+Record Format:         @ldsircfm         +OS Password Protection:  @ldsipswd
+Logical Record Length: @ldsilrcl         +RACF Indication:         @ldsiracf
+Block Size:            @ldsibsiz         +Change Status:           @ldsichng
+Key Length:            @ldsikeyl         +Trks/Cyl for volume:     @ldsitpcv
+Allocation space units:@ldsistyp         +Blks/Trk for volume:     @ldsibptv
+Allocated Space:       @ldsialoc         !LDSIVDI1                 @ldsiadir¬Z
+Allocation Used:       @ldsiused         !LDSIVDI2                 @ldsiudir¬Z
+Primary Allocation:    @ldsiprim         !LDSIVDI3                 @ldsimems¬Z
+Secondary Allocation:  @ldsisdry         +LISTDSI Return Code:     @ldsirc
+Allocated Extents:     @ldsiexts         +LISTDSI Reason Code:     @ldsireas
|ldsiem0                                          +¬LDSIXDER
¬ldsilmsg
@ldsiem1
@ldsiem2
                          +Press%END+to Exit LISTDSI+
)INIT
 .HELP = $LISTDSI
 &DYN = TRANS(&NODIR NODIR,NO ' ',YES *,NO)
 &LDV = TRANS(&LDV     YES,YES        *,NO)

 IF (&LDSILOCK  = LOCK)  .CURSOR = ZCMD  .ATTR(LDSIDSN) = 'TYPE(OUTPUT)'
 IF (&LDSILOCK ¬= LOCK)  .CURSOR = LDSIDSN

 IF (&LDSIVDIR = &Z)        &LDSIDIRZ = NOSHOW
 IF (&LDSIVDIR = DIRECTORY) &LDSIDIRZ =   SHOW
 IF (&LDSIDORG ¬= PO,POU)   &LDSIDIRZ = NOSHOW
 IF (&LDSIDORG = &Z)
   IF (&LDSIDSN = &Z)       &LDSIDIRZ = SHOW

 IF (&LDSIDIRZ = NOSHOW,&Z)
   &LDSIVDI1 = &Z
   &LDSIVDI2 = &Z
   &LDSIVDI3 = &Z

 IF (&LDSIDIRZ = SHOW)
   &LDSIVDI1 = 'Directory Blks Allocated:'
   &LDSIVDI2 = 'Directory Blks Used:'
   &LDSIVDI3 = 'Number of Members:'

 IF (&LDSIFDSN  = &Z)     &LDSIQDSN = &Z
 IF (&LDSIFDSN ¬= &Z)     &LDSIQDSN = &LDSIFDSN   /* '''&LDSIFDSN''' */
 IF (&LDSISTAT  = OK)     &LDSIEM0  = &Z
 IF (&LDSISTAT ¬= OK)     &LDSIEM0  = '&LDSISTAT'

 &SHORT = &Z   &LONG = &Z

 IF (&LDSIRC =  4)
   &LONG = 'Some dsn info is NOT avail. +
            LISTDSI info (other that directory info) is valid.'
   .MSG = SYS010

 IF (&LDSIRC = 16)
   &LONG = 'SEVERE Error occured. +
            NONE of displayed LISTDSI data can be considered valid.'
   .MSG = SYS010

 .ZVARS = '(LDSIXD1,LDSIXD2,LDSIXD3)'

 &LDSIXD1 = &Z   &LDSIXD2 = &Z  &LDSIXD3 = &Z  &LDSIXDER = &Z

 IF (&LDSIDORG = PO,POU)
   IF (&LDSIADIR = 0)
     &LDSIXD1 = '*'  &LDSIXD2 = '*'  &LDSIXD3 = '*'
     &LDSIXDER = '* Directory is unavailable.'

)PROC

 VER (&LDSIDSN,NB,DSNAME)

 &LDV = TRANS(TRUNC(&LDV,1) Y,YES N,NO *,*)
 VER (&LDV,LIST,YES,NO)
 IF (&LDV = YES)    &PANEL = DDINFO2
 IF (&LDV = NO,&Z)  &PANEL = DDINFO

 &DYN = TRANS(TRUNC(&DYN,1) Y,YES N,NO *,*)
 VER (&DYN,LIST,YES,NO)
 IF (&DYN = YES)    &NODIR = &Z
 IF (&DYN = NO,&Z)  &NODIR = 'NODIR'

 &VLDSISVN = &LDV      VPUT (VLDSISVN) PROFILE
)END
+/ ADD NAME=DDINFO2  0126-88111-90181-1535-00099-00085-00000-$A1238
)ATTR
 @ TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
 | TYPE(OUTPUT) INTENS(HIGH) COLOR(PINK)   CAPS(OFF)
 ¬ TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)    CAPS(OFF)
 + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)
 ! TYPE(OUTPUT) INTENS(LOW)  COLOR(GREEN)  CAPS(OFF)
 % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)
 ~ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)
)BODY expand(¦¦) lmsg(ldsilmsg)
%-¦-¦- ~LISTDSI: List Dataset Information% -¦-¦-
%Command ===>_ZCMD                                          ~SYS variables?_LDV~
+                                                           ~DirectoryInfo?_DYN~
~DSNAME  ===>_LDSIDSN                                       ~
~VOLUME  ===>_VOLUME+
+SYSDSNAME:@LDSIQDSN
+           SYSVOLUME:@ldsivol                         +SYSCREATE:@ldsicdte
+             SYSUNIT:@ldsiunit                       +SYSREFDATE:@ldsildte
+            SYSDSORG:@ldsidorg                        +SYSEXDATE:@ldsixdte
+            SYSRECFM:@ldsircfm                      +SYSPASSWORD:@ldsipswd
+            SYSLRECL:@ldsilrcl                         +SYSRACFA:@ldsiracf
+          SYSBLKSIZE:@ldsibsiz                       +SYSUPDATED:@ldsichng
+           SYSKEYLEN:@ldsikeyl                       +SYSTRKSCYL:@ldsitpcv
+            SYSUNITS:@ldsistyp                       +SYSBLKSTRK:@ldsibptv
+            SYSALLOC:@ldsialoc                       !LDSIVDI1   @ldsiadir¬Z
+             SYSUSED:@ldsiused                       !LDSIVDI2   @ldsiudir¬Z
+          SYSPRIMARY:@ldsiprim                       !LDSIVDI3   @ldsimems¬Z
+          SYSSECONDS:@ldsisdry                     +LASTCC or RC:@ldsirc
+          SYSEXTENTS:@ldsiexts                        +SYSREASON:@ldsireas
|ldsiem0                                          +¬LDSIXDER
¬ldsilmsg
@ldsiem1
@ldsiem2
                          +Press%END+to Exit LISTDSI+
)INIT
 .HELP = $LISTDSI
 &DYN = TRANS(&NODIR NODIR,NO ' ',YES *,NO)
 &LDV = TRANS(&LDV     YES,YES        *,NO)

 IF (&LDSILOCK  = LOCK)  .CURSOR = ZCMD  .ATTR(LDSIDSN) = 'TYPE(OUTPUT)'
 IF (&LDSILOCK ¬= LOCK)  .CURSOR = LDSIDSN

 IF (&LDSIVDIR = &Z)        &LDSIDIRZ = NOSHOW
 IF (&LDSIVDIR = DIRECTORY) &LDSIDIRZ =   SHOW
 IF (&LDSIDORG ¬= PO,POU)   &LDSIDIRZ = NOSHOW
 IF (&LDSIDORG = &Z)
   IF (&LDSIDSN = &Z)       &LDSIDIRZ = SHOW

 IF (&LDSIDIRZ = NOSHOW,&Z)
   &LDSIVDI1 = &Z
   &LDSIVDI2 = &Z
   &LDSIVDI3 = &Z

 IF (&LDSIDIRZ = SHOW)
   &LDSIVDI1 = 'SYSADIRBLK:              '
   &LDSIVDI2 = 'SYSUDIRBLK:         '
   &LDSIVDI3 = 'SYSMEMBERS:       '

 IF (&LDSIFDSN  = &Z)     &LDSIQDSN = &Z
 IF (&LDSIFDSN ¬= &Z)     &LDSIQDSN = &LDSIFDSN   /* '''&LDSIFDSN''' */
 IF (&LDSISTAT  = OK)     &LDSIEM0  = &Z
 IF (&LDSISTAT ¬= OK)     &LDSIEM0  = '&LDSISTAT'

 &SHORT = &Z   &LONG = &Z

 IF (&LDSIRC =  4)
   &LONG = 'Some dsn info is NOT avail. +
            LISTDSI info (other that directory info) is valid.'
   .MSG = SYS010

 IF (&LDSIRC = 16)
   &LONG = 'SEVERE Error occured. +
            NONE of displayed LISTDSI data can be considered valid.'
   .MSG = SYS010

 .ZVARS = '(LDSIXD1,LDSIXD2,LDSIXD3)'

 &LDSIXD1 = &Z   &LDSIXD2 = &Z  &LDSIXD3 = &Z  &LDSIXDER = &Z

 IF (&LDSIDORG = PO,POU)
   IF (&LDSIADIR = 0)
     &LDSIXD1 = '*'  &LDSIXD2 = '*'  &LDSIXD3 = '*'
     &LDSIXDER = '* Directory is unavailable.'

)PROC

 VER (&LDSIDSN,NB,DSNAME)

 &LDV = TRANS(TRUNC(&LDV,1) Y,YES N,NO *,*)
 VER (&LDV,LIST,YES,NO)
 IF (&LDV = YES)    &PANEL = DDINFO2
 IF (&LDV = NO,&Z)  &PANEL = DDINFO

 &DYN = TRANS(TRUNC(&DYN,1) Y,YES N,NO *,*)
 VER (&DYN,LIST,YES,NO)
 IF (&DYN = YES)    &NODIR = &Z
 IF (&DYN = NO,&Z)  &NODIR = 'NODIR'

 &VLDSISVN = &LDV      VPUT (VLDSISVN) PROFILE
)END
+/ ADD NAME=LA       0103-90176-90176-0642-00025-00026-00000-$A1238
)Attr Default(%+_)
/* % type(text  ) intens(high)              Defaults displayed for */
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   ¬ type(output) intens(low ) caps(off) just(left )
)Body
+-------------------% List of Currently Allocated Data Set +--------------------
%Command ===>_zcmd                                            %Scroll ===>_amt +
%
+Selection Options: %B+Browse %E+Edit %F+Free %P+PDS/E
+
%Sel      DDname    Volume    Dsname
+
)Model
!z+      ¬z        ¬z        ¬z
)Init
  .ZVARS = '(sel ddname volume dsname)'
  &amt = CSR
)Reinit
)Proc
                                  /* Process )BODY fields here      */
  If (&ztdsels ¬= 0000)           /* If user selected some rows ... */
                                  /* ... process )MODEL fields here */
)End
