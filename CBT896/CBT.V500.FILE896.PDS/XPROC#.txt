***********************************************************************
*                                                                     *
* Copyright (c) 1989, 1992 The Charles Stark Draper Laboratory, Inc.  *
*                                                                     *
*   This program is provided on an "as is" basis.  It may be freely   *
*   distributed as long as it is not offered for commercial sale,     *
*   and as long as this copyright notice is included.                 *
*                                                                     *
***********************************************************************
*
* XPROC 04/13/92 - SEB1525 - Version 2 - /quotable option added
*
)F FUNCTION -

 The XPROC command parses an argument string into positional and/or
 keyword parameters, similarly to the PROC statement of a CLIST.
 However, XPROC can be used inside a REXX exec to parse the argument
 to the exec, or inside a CLIST or REXX exec to process the value of
 a variable as if it were an argument string.

 The values of the parameters specified on the XPROC command cause the
 corresponding REXX or CLIST variables to be set, as they would in a
 CLIST PROC statement.

 The rules for entering parameters to be processed by the XPROC command
 are identical to those of the CLIST PROC statement - except that XPROC
 supports extensions to the CLIST PROC syntax by means of options
 preceded by the slash ("/") character.

 For more information on PROC syntax, consult a TSO/E CLIST manual.

 Notes: As for any TSO command, it is best to enclose the entire
       XPROC command in "double quotes" when using it from REXX.
       This includes the variable names.

       When XPROC is used, prompting is not available by default
       (unlike the PROC statement of a CLIST).  Therefore, it is
       advisable to precede the call to XPROC with a statement that
       activates prompting, e.g.

       CALL PROMPT "ON"  /* for REXX  */
       CONTROL PROMPT    /* for CLIST */

       Also, if there is an error in the XPROC command, or the parsing
       of the argument string fails, a REXX exec (or a CLIST with
       CONTROL NOFLUSH active) will NOT be flushed, but will continue
       to execute (with none of the parameters set).  Therefore, you
       should check the value of RC (for REXX) or &LASTCC (for CLIST)
       afterwards and EXIT if it is not zero.

)X SYNTAX -

 XPROC  {input-variable}
        positional-number
        {positional-parameter{/option...} ...}
        {keyword-parameter{/option...}{({default-value})}{/option...}}

        The number of positional-parameters must be equal to the
        value of positional-number (which must be a number).

 Required: positional-number

 Note that the syntax of XPROC is exactly identical to that of
 the PROC statement of CLIST language, except for the optional
 "input-variable" and the "/option" feature.

 Examples:

  The following examples assume a REXX environment:

  Example 1: Define one positional parameter (DATASET),
             no keyword parameters:

       "XPROC 1 DATASET"

  Example 2: Define no positional parameters, and one keyword
             parameter (TESTING) which has a null default value:

       "XPROC 0 TESTING"

  Example 3: Define a positional parameter (LIBRARY), one keyword
             parameter (TRACE) which has a null default value, and
             one (SYSOUT) which has the default value "A":

       "XPROC 1 LIBRARY TRACE SYSOUT(A)"

  Example 4: Define three positional parameters (LIBRARY, TYPE and
             MEMBER) and a keyword (OWNER) with a default value of
             the user's TSO prefix.  Note how we allow REXX to
             generate the desired default value so it appears in
             the XPROC command at execution time:

       "XPROC 3 LIBRARY TYPE MEMBER OWNER('"SYSVAR(SYSPREF)"')"

  Example 5: Define a positional parameter (NAME) and one keyword
             parameter (TITLE) which has a null default value, and
             one (SUBJECT) which has the default value "None".
             The values of all three parameters will be processed
             as is with respect to case.

       XPROC 1 NAME/ASIS TITLE/ASIS() SUBJECT(None)/ASIS

  The following examples work under REXX or CLIST (but be sure to
  enclose the command in "double quotes" under REXX):

  Example 6: Define a positional parameter (LIBRARY), one keyword
             parameter (TRACE) which has a null default value, and
             one (SYSOUT) which has the default value "A".  The
             argument string to be parsed will be taken from the
             value of the variable "SYSDVAL".

       XPROC SYSDVAL 1 LIBRARY TRACE SYSOUT(A)

  Example 7: Define three positional parameters (LIBRARY, TYPE and
             MEMBER), and a keyword (MARK) with a default value of
             the current time.  Note how we allow REXX to generate
             the desired default value so it appears in the XPROC
             command at execution time.  The argument string to be
             parsed will be taken from the value of the variable
             "STRING".

       "XPROC STRING 3 LIBRARY TYPE MEMBER MARK('"TIME()"')"

             Under CLIST, this could be coded as:

       XPROC STRING 3 LIBRARY TYPE MEMBER MARK('&SYSTIME')

             but note that &SYSTIME gets resolved BEFORE the XPROC
             command executes.  This is the only type of situation
             where an "&" is appropriate.

)O OPERANDS -

))input-variable

   the NAME of a variable from which the argument string to be parsed
   is to be extracted.  The name must conform to the rules for CLIST or
   REXX variable names.  The specified variable must be set to the
   argument string to be processed (no command name included) before
   XPROC is invoked.

   The input-variable name may be omitted in a REXX exec ONLY, in which
   case the arguments to the REXX exec are accessed.  This provides the
   same capability that the PROC statement of a CLIST would.

))positional-number

   a number (0 or greater) which specifies the number of positional
   parameters that follow.  This is required.  If there are no
   positional parameters, specify a 0.

))positional-parameter

   A variable name consisting of alphameric and national characters,
   of which the first cannot be numeric.  The length of this name must
   be between 1 and 252 for CLISTs, and between 1 and 250 for REXX.
   Underscores may be part of the name.

   Note: Unlike the CLIST PROC statement, XPROC does not accept
   ampersands in parameter names.  Ampersands in an XPROC command will
   cause normal symbolic substitution in CLISTS; they will cause errors
   under REXX.

))keyword-parameter

   A variable name consisting of alphameric and national characters,
   of which the first cannot be numeric.  The length of this name must
   be between 1 and 252 for CLISTs, and between 1 and 250 for REXX.
   A default value in parentheses may optionally follow the parameter;
   if there is no default value, the keyword takes on its own name as
   a value if given by the caller, and a null string otherwise.

   Note: Unlike the CLIST PROC statement, XPROC does not accept
   ampersands ("&") in parameter names.  Ampersands in an XPROC command
   will cause normal symbolic substitution in CLISTS; they will cause
   errors under REXX.

))default-value

   Any character string, including the null string.  If it is present,
   it must follow a valid keyword parameter and be enclosed in
   parentheses (the right parenthesis may be omitted if this is at the
   end of the command).  The value may be quoted (with single quotes,
   with two quotes representing one) or unquoted; however, if it
   contains any special characters (blanks, unbalanced parentheses,
   etc.), it must be quoted.

   If the caller provides an alternate value for the associated
   keyword, the keyword takes on the that value; otherwise it takes on
   the default value specified by XPROC.  Note that although () may be
   specified in XPROC for a null string, a caller must type ('') to get
   the same result.

))option

   Processing options may be associated with positional or keyword
   parameters by specifying their names following the parameter name
   delimited by a slash.  For example, assuming positional parameter
   name PP and keyword parameter name KP, and option name OP1 and OP2,
   the following are possible:

   PP/OP1
   KP/OP1
   KP/OP1(default)
   KP(default)/OP1
   PP/OP1/OP2
   KP/OP1(default)/OP2

   The supported options at this time are ASIS and QUOTABLE.

))ASIS

   If the ASIS option is associated with a positional or keyword
   parameter that takes a value, the value specified by the user
   for that parameter is processed in case-retention mode.  In
   other words, any lower-case characters present in the value
   are kept as is.  This overrides the default behavior, which
   converts all parameter values to uppercase (the only behavior
   available via the PROC statement of CLIST).

   The ASIS option is not valid for keyword parameters that do
   not take a value (i.e. evaluate to themselves or null).

   Note that default values in the XPROC prototype are always
   processed asis, regardless of the presence of this option.

   Examples: XPROC 1 NAME/ASIS
             XPROC 0 TITLE/ASIS(default)
             XPROC 0 TITLE(default)/ASIS

))QUOTABLE

   If the QUOTABLE option is associated with a positional parameter,
   the value specified by the user for that parameter may be entered
   as a quoted string.  In other words, embedded blanks or other
   special characters may be entered if the string is enclosed in
   single quotes by the user.  The quotes do not become part of the
   resulting value; to pass in quotes, the user must provide doubled
   quotes, similar to the way quotes are specified for keyword values.
   This overrides the default behavior, which takes a
   blank-or-comma-delimited string as the value of the positional
   parameter, without honoring quotes specially.

   Thus, you may define a CLIST or REXX exec that takes a syntax like:

     MYCLIST 'hi there' 'how are you'

   and have the strings entered as positional parameters.

   The QUOTABLE option is valid only for positional parameters,
   not keyword parameters.

   Examples: XPROC 1 NAME/QUOTABLE
             XPROC 3 NAME/ASIS/QUOTABLE ADDRESS/QUOTABLE CITY/ASIS
