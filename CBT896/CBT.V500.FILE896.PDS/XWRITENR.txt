         TITLE 'XWRITENR - REXX external function to simulate WRITENR'
XWRITENR CSECT
XWRITENR AMODE ANY
XWRITENR RMODE ANY
         SPACE
***********************************************************************
*
* Syntax:  call XWRITENR "anything at all"
*
***********************************************************************
*                                                                *
* Input:       (R1) = address of IRXEFPL parameter list:         *
*                                                                *
*              Offset:                                           *
*               00 = Reserved                                    *
*               04 = Reserved                                    *
*               08 = Reserved                                    *
*               0C = Reserved                                    *
*               10 = Address of the parsed argument list         *
*               14 = Address of the address of the EVALBLOCK     *
*                                                                *
******************************************************************
*                                                                *
* Output:      R15 = return code from PUTLINE                    *
*                                                                *
******************************************************************
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         SAVE  (14,12),,XWRITENR_&SYSDATE._&SYSTIME
         BALR  R12,0
         USING *,R12
         SPACE
         L     R2,16(,R1)          R2 = address of parsed argument list
         L     R6,20(,R1)          R6 = address of address of EVALBLOCK
         L     R6,0(,R6)           R6 = address of EVALBLOCK
         L     R4,4(,R2)           R4 = length of message
         L     R5,0(,R2)           R5 = address of text of message
         C     R5,=X'FFFFFFFF'     If number of arguments not 1
         BE    ERROR               then error
         L     R0,8(,R2)
         C     R0,=X'FFFFFFFF'     If number of arguments not 1
         BNE   ERROR               then error
         LTR   R15,R4              If message length is zero
         BZ    RETURN              then return code(zero)
         LA    R0,DYSIZE           Get size of dynamic area w/o message
         AR    R0,R4               Add length of message
         GETMAIN R,LV=(0)          Get dynamic storage area
         SPACE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DYNAM,R13
         SPACE
LENOK    DS    0H
         CH    R4,=H'256'          If message is 256 chars or less
         BH    MOVELONG            then...
         LR    R14,R4
         BCTR  R14,0                decrement length for move
         EX    R14,MOVEMSG          Move message to buffer
         B     MSGMOVED            else...
MOVELONG DS    0H
         LA    R0,PUTBUF+4         Address of message destination
         LR    R1,R4               Length of message destination
         LR    R14,R5              Address of message source
         LR    R15,R4              Length of message source
         MVCL  R0,R14              Move message to buffer
MSGMOVED DS    0H
         LA    R14,4(,R4)         Add length of header
         SLL   R14,16             Shift: 1st HWD = hdr, 2nd = no 2ndary
         ST    R14,PUTBUF         Put in first 2 halfwords in header
         SPACE
         LA    R1,IOPLSP           Set up IOPL
         USING IOPL,R1
         SPACE
         USING PSA,0
         L     R8,PSATOLD           GET TCB ADDRESS
         USING TCB,R8
         L     R8,TCBJSCB           GET JSCB ADDRESS
         USING IEZJSCB,R8
         L     R8,JSCBACT           GET ADDRESS OF ACTIVE JSCB
         L     R8,JSCBPSCB          GET ADDRESS OF PSCB
         USING PSCB,R8
         MVC   IOPLUPT,PSCBUPT      PUT UPT ADDRESS IN IOPL
         L     R8,PSCBRLGB          GET ADDR OF RELOGON BUFFER
         USING RLGB,R8
         MVC   IOPLECT,RLGBECT      PUT ADDRESS OF ECT IN IOPL
         SPACE
         SR    R0,R0
         ST    R0,ECB              Zero out ECB
         ST    R0,IOPLIOPB         Zero out IOPL parm block address
         LA    R0,ECB
         ST    R0,IOPLECB          Finish up IOPL
         MVC   PUTBLK(LPUTBLK),PUTMAST     Build PUTLINE MF=L
         DROP  R1
         EJECT
         PUTLINE PARM=PUTBLK,OUTPUT=(PUTBUF,TERM,SINGLE,DATA),         +
               TERMPUT=(ASIS),                                         +
               MF=(E,(1))
         EJECT
ENDIT    LR    R3,R15              Save return code
         LA    R0,2
         ST    R0,8(,R6)           Set EVLEN (in EVALBLOCK) to length
         CVD   R3,DOUBLE           Return code
         UNPK  16(2,R6),DOUBLE     Generate 2 digits
         OI    17(R6),X'F0'
         CLI   16(R6),C'0'         If first digit is 0
         BNE   NOTZ                then
         MVC   16(1,R6),17(R6)      make it a 1-digit number
         MVI   17(R6),C' '
         LA    R0,1                 set length to 1
         ST    R0,8(,R6)            set EVLEN (in EVALBLOCK) to length
NOTZ     DS    0H
         LA    R0,DYSIZE           Get length of storage w/o message
         AR    R0,R4               Add length of message
         LA    R1,DYNAM            Get address of storage
         L     R13,4(0,R13)
         FREEMAIN R,LV=(0),A=(1)
RETURN   DS    0H
         RETURN (14,12),T,RC=0
         SPACE 2
ERROR    DS    0H                  Here if wrong # of arguments
         LA    R0,2
         ST    R0,8(,R6)           Set EVLEN (in EVALBLOCK) to length
         MVC   16(2,R6),=C'-2'     Return value
         B     RETURN
         SPACE 2
MOVEMSG  MVC   PUTBUF+4(0),0(R5)
         EJECT
PUTMAST  PUTLINE MF=L
         EJECT
DYNAM    DSECT
         SPACE
SAVEAREA DS    9D
DOUBLE   DS    D          Work area for conversions
         SPACE
PUTBLK   PUTLINE MF=L
LPUTBLK  EQU   *-PUTBLK
         SPACE
IOPLSP   DS    4F        INPUT OUTPUT PARAMETER BLOCK
ECB      DS    F
         SPACE
PUTBUF   DS    F          MESSAGE HEADER
         SPACE
*                                  (Actual message buffer variable)
         SPACE
DYSIZE   EQU   *-DYNAM             Length of dynamic area w/o msg buf
         EJECT
*
*  STORAGE DEFINITIONS:
*
         SPACE
         IKJIOPL
         SPACE
         IKJCPPL
         SPACE
         IKJUPT
         SPACE
         IKJECT
         SPACE
         IKJPSCB
         EJECT ,
         IHAPSA
         EJECT ,
         IKJTCB
         EJECT ,
         IEZJSCB
         EJECT ,
         IKJRLGB
         EJECT
         SPACE 5
         END
