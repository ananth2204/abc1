/***************************** REXX ***********************************/
/*                                                                    */
/*    COMMAND NAME: SNIP <MOVE>                                       */
/*    WRITTEN BY:   JIM HAIRE                                         */
/*                                                                    */
/*    FORMAT:                                                         */
/*        THINK OF THIS COMMAND AS A SCISSORS.                        */
/*                                                                    */
/*        ENTER "SNIP" ON THE COMMAND LINE.                           */
/*        PLACE THE CURSOR AT THE TOP LEFTHAND CORNER OF THE AREA     */
/*        WHERE YOU WANT TO BEGIN CUTTING CODE.  PRESS <ENTER>.       */
/*                                                                    */
/*        ENTER "SNIP" ON THE COMMAND LINE AGAIN.                     */
/*        PLACE THE CURSOR AT THE BOTTOM RIGHTHAND CORNER OF THE      */
/*        AREA YOU WANT TO CUT.  PRESS <ENTER>.                       */
/*                                                                    */
/*        THE AREA THAT YOU HAVE INDICATED IS A SQUARE PIECE OF       */
/*        CODE WHICH WILL BE PLACED IN THE PROFILE AND CAN BE         */
/*        INSERTED SOMEWHERE USING THE "GLUE" COMMAND.                */
/*                                                                    */
/*                                                                    */
/*    ARGUMENT LIST:                                                  */
/*        <MOVE> - IF YOU TYPE "M" OR "MOVE" AFTER THE "SNIP"         */
/*                 COMMAND, THE AREA THAT YOU "SNIP" WILL BE          */
/*                 REMOVED FROM THE ARE YOU INDICATED.                */
/*                                                                    */
/*                                                                    */
/*    DESCRIPTION:                                                    */
/*       THIS EDIT MACRO WILL ALLOW YOU TO TAKE PORTIONS OF DIFFERENT */
/*       LINES IN A MEMBER BEING EDITED.  YOU WILL THEN BE ABLE TO    */
/*       ATTACH THOSE LINES TO ANY OTHER EDIT MEMBER.                 */
/*                                                                    */
/**********************************************************************/
/*--------------------------------------------------------------------*/
/*    THIS FIRST COMMAND DETERMINES WHETHER WE ARE DOING THE          */
/*    FIRST OR SECOND SNIP.  WE DETERMINE THIS BY SEEING IF WE HAVE   */
/*    A CURRENT VALUE FOR THE SNIP SWITCH.                            */
/*--------------------------------------------------------------------*/
ADDRESS ISPEXEC
"ISREDIT MACRO (MOVESW)"

"VGET (SNIPSW) PROFILE"
IF RC = 0 THEN
    SELECT
       WHEN SNIPSW = 'S' THEN CALL SNIP_END
       WHEN SNIPSW = 'E' THEN CALL SNIP_START
       OTHERWISE
           NOP
    END
ELSE
    DO
      SNIPSW = 'S'
      "VPUT (SNIPSW) PROFILE"
      CALL SNIP_START
    END

IF SNIPSW = 'E' THEN
    DO
      CALL LOAD_SNIP_LINES_TO_PROFILE
      CALL ERASE_SNIPPED_LINES
      CALL INITIALIZE_SNIP_POSITIONS
    END

"ISREDIT CURSOR = &SCOL &SROW"

EXIT
/**/
/**/
/**/
/**/
/**/
SNIP_START:
/*--------------------------------------------------------------------*/
/*    THIS PARAGRAPH DETERMINES THE BEGINNING COLUMN AND ROW WHERE    */
/*    THE SNIP WILL OCCUR.  IF BOTH THE COLUMN AND THE ROW ARE VALID, */
/*    THE SNIP SWITCH WILL BE SET TO 'S'.                             */
/*--------------------------------------------------------------------*/
ADDRESS ISPEXEC
    "ISREDIT (SCOL,SROW) = CURSOR"
    IF SCOL > 0 & SROW > 0 THEN
        DO
          SNIPSW = 'S'
          "VPUT (SNIPSW SCOL SROW) PROFILE"
        END
    ELSE
        DO
          ADDRESS ISPEXEC
          ZEDSMSG = 'PF1 FOR ERROR'
          ZEDLMSG = 'CURSOR MUST BE PLACED SOMEWHERE ON THE FILE'
          'SETMSG MSG(ISRZ001)'
          EXIT 12
        END

RETURN
/**/
/**/
/**/
/**/
/**/
SNIP_END:
/*--------------------------------------------------------------------*/
/*    THIS PARAGRAPH DETERMINES THE ENDING COLUMN AND ROW WHERE       */
/*    THE SNIP WILL OCCUR.  IF BOTH THE COLUMN AND THE ROW ARE VALID, */
/*    THE SNIP SWITCH WILL BE SET TO 'E'.                             */
/*--------------------------------------------------------------------*/
ADDRESS ISPEXEC
    "ISREDIT (ECOL,EROW) = CURSOR"
    IF ECOL > 0 & EROW > 0 THEN
        DO
          SNIPSW = 'E'
          "VPUT (SNIPSW ECOL EROW) PROFILE"
        END
    ELSE
        DO
          ADDRESS ISPEXEC
          ZEDSMSG = 'PF1 FOR ERROR'
          ZEDLMSG = 'CURSOR MUST BE PLACED SOMEWHERE ON THE FILE'
          'SETMSG MSG(ISRZ001)'
          EXIT 12
        END
    RETURN
/**/
/**/
/**/
/**/
/**/
LOAD_SNIP_LINES_TO_PROFILE:
/*------------------------------------------------------------------*/
/*    THE LINES THAT YOU HAVE CHOSEN TO SNIP ARE NOW STORED IN      */
/*    THE PROFILE ALONG WITH THE STARTING AND ENDING POSITIONS      */
/*    OF THE LINE.                                                  */
/*------------------------------------------------------------------*/
ADDRESS ISPEXEC

"VGET (SCOL SROW ECOL EROW) PROFILE"
CALL DETERMINE_SNIP_ORDER

"VGET (LINNBR) PROFILE"
IF RC = 0 THEN NOP
ELSE
    LINNBR = 0

I = 0
STARTCOL = SCOL
ENDCOL   = ECOL
DO I = STARTCOL TO ENDCOL
    CALL DETERMINE_STRING_AND_LENGTH
END

RETURN
/**/
/**/
/**/
/**/
/**/
DETERMINE_SNIP_ORDER:
/*------------------------------------------------------------------*/
/*    IT IS POSSIBLE THAT THE LATTER OF THE 2 SNIP COMMANDS COULD   */
/*    HAVE OCCURRED CLOSER TO THE TOP OF THE FILE.  IN ORDER TO     */
/*    MAKE THE PROGRAMMING THE SAME, WE WILL SWITCH THE VALUES OF   */
/*    THE CURSOR LOCATIONS SO THE LATTER SNIP WILL APPEAR AS IF IT  */
/*    WERE THE FIRST SNIP.                                          */
/*------------------------------------------------------------------*/
IF SCOL > ECOL THEN
    DO
      HOLDCOL = SCOL            /*  MOVE THE START COLUMN TO HOLD  */
      HOLDROW = SROW            /*  MOVE THE START ROW TO HOLD     */
      SCOL = ECOL               /*  OVERLAY START COLUMN WITH END  */
      SROW = EROW               /*  OVERLAY START ROW WITH END     */
      ECOL = HOLDCOL            /*  OVERLAY END COLUMN WITH HOLD   */
      EROW = HOLDROW            /*  OVERLAY END ROW WITH HOLD      */
    END

IF SROW > EROW THEN
    DO
      HOLDROW = SROW            /*  MOVE THE START ROW TO HOLD     */
      SROW = EROW               /*  OVERLAY START ROW WITH END     */
      EROW = HOLDROW            /*  OVERLAY END ROW WITH HOLD      */
    END

STRLGTH = (EROW - SROW) + 1

RETURN
/**/
/**/
/**/
/**/
/**/
DETERMINE_STRING_AND_LENGTH:
/*------------------------------------------------------------------*/
/*    THIS MODULE WILL REPOSITION THE CURSOR ON EACH LINE BEING     */
/*    SNIPPED AND WILL SNIP OUT THE SECTION OF CODE SELECTED BY     */
/*    THE USER AND PLACE IT ON THE PROFILE.                         */
/*------------------------------------------------------------------*/
"ISREDIT CURSOR = &SCOL"
"ISREDIT (LINEDATA) = LINE &I"

 LINNBR = LINNBR + 1
 SNIP = SUBSTR(LINEDATA,SROW,STRLGTH)
 INTERPRET "SNIP"LINNBR" = SNIP"

 "VPUT (SNIP"LINNBR") PROFILE"

RETURN
/**/
/**/
/**/
/**/
/**/
INITIALIZE_SNIP_POSITIONS:
/*------------------------------------------------------------------*/
/*    THIS MODULE WILL INITIALIZE VALUES THAT NEED TO BE RESET      */
/*    PRIOR TO THE NEXT SNIP.  IT WILL ALSO STORE THE LARGEST       */
/*    LINE NUMBER UP TO THIS POINT ON THE PROFILE.                  */
/*------------------------------------------------------------------*/
"VERASE (SCOL SROW ECOL EROW) PROFILE"
"VPUT (LINNBR) PROFILE"

RETURN
/**/
/**/
/**/
/**/
/**/
ERASE_SNIPPED_LINES:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL ERASE THE STRINGS THAT WE SNIPPED BEFORE  */
/*    LEAVING THE PROGRAM.                                          */
/*------------------------------------------------------------------*/
    UPPER MOVESW
    IF MOVESW = 'MOVE' | MOVESW = 'M' THEN
        DO P = SCOL TO ECOL
            CALL CHANGE_STRINGS_TO_SPACES
        END

RETURN
/**/
/**/
/**/
/**/
/**/
CHANGE_STRINGS_TO_SPACES:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH IS PERFORMED IF A "MOVE" IS REQUESTED.  IT     */
/*    WILL SPACE OUT THE AREA THAT HAS BEEN SNIPPED BEFORE BEING    */
/*    GLUED.                                                        */
/*------------------------------------------------------------------*/
"ISREDIT (OLDDATA) = LINE &P"
OLDSTRG = SUBSTR(OLDDATA,SROW,STRLGTH)
NEWSTRG = COPIES(' ',STRLGTH)
NEWSTRG = "'"NEWSTRG"'"
"ISREDIT CURSOR = &P &SROW"
"ISREDIT CHANGE '&OLDSTRG' &NEWSTRG"

RETURN
