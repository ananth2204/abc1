/************************** REXX   ************************************/
/*                                                                    */
/*   COMMAND NAME: @CONVERT                                           */
/*   WRITTEN BY:   JIM HAIRE                                          */
/*                                                                    */
/*    (C) COPYRIGHT JAMES HAIRE                                       */
/*        ALL RIGHTS RESERVED      1995                               */
/*                                                                    */
/*   FORMAT:                                                          */
/*       CALL @CONVERT <DATA> <FORMAT> <DECIMAL POSITIONS>            */
/*                                                                    */
/*   INPUT - <DATA> ACTUAL DATA OR A VARIABLE NAME CONTAINING THE     */
/*                  DATA.                                             */
/*                                                                    */
/*         <FORMAT> THE FORMAT THE DATA IS IN.                        */
/*                  CAN BE ONE OF THE FOLLOWING:                      */
/*                  1. N - A NUMBER FIELD IN DISPLAY FORMAT.          */
/*                                                                    */
/*                  2. B - BINARY, COMP-4, COMP.                      */
/*                                                                    */
/*                  3. P - COMP-3, PACKED-DECIMAL                     */
/*                                                                    */
/*                                                                    */
/*   DESCRIPTION:                                                     */
/*       THIS SUBROUTINE WILL CONVERT A VALUE TO ONE THAT CAN BE      */
/*       READ BY THE PROGRAM.                                         */
/*                                                                    */
/**********************************************************************/
PARSE ARG ALL_PARAMETERS
CALL 00000_SPLIT_PARAMETERS

IF DATA_DECIMAL_POS = '' THEN
    DATA_DECIMAL_POS = 0


DATA_LENGTH = LENGTH(DATA_VALUE)
DATA_FIRST_CHARACTER = SUBSTR(DATA_VALUE,1,1)

SELECT
  WHEN DATA_FORMAT = 'N' THEN NOP
  WHEN DATA_FORMAT = 'B' THEN CALL 10000_CONVERT_FROM_BINARY
  WHEN DATA_FORMAT = 'P' THEN CALL 20000_CONVERT_FROM_PACKED
  OTHERWISE
      ADDRESS ISPEXEC
      ZEDSMSG = 'PF1 FOR ERROR'
      ZEDLMSG = 'THE @CONVERT SUBROUTINE USED IN THIS PROGRAM MUST BE',
                'SUPPLIED WITH A DATA FORMAT OF ONE OF THE FOLLOWING:',
                '    (USE THE LETTER NEXT TO THE TYPE)     ',
                'N) A NUMBER FIELD IN DISPLAY FORMAT.               ',
                '                       ',
                'B) BINARY, COMP-4, COMP',
                '                                                  ',
                'P) PACKED, COMP-3.',
                '                                                  ',
                '                       ',
                'ALL OTHERS ARE INVALID'
      CONV_ERROR = 'Y'
      'SETMSG MSG(ISRZ001)'
      SIGNAL STOPIT
END

ADDRESS TSO
DATA_LAST_CHARACTER = SUBSTR(DATA_VALUE,DATA_LENGTH,1)
CALL 30000_CONVERT_NON_NUMERICS

IF DATA_DECIMAL_POS > 0 THEN
    CALL 40000_PLACE_DECIMAL_POINT


STOPIT:
  RETURN DATA_VALUE CONV_ERROR
  EXIT
/**/
/**/
/**/
/**/
00000_SPLIT_PARAMETERS:
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    THIS PARAGRAPH WILL SPLIT THE PARAMETERS BY DETERMINING WHERE   */
/*    THE FORMAT IS AND SPLITTING AT THAT POINT.  THIS IS NECESSARY   */
/*    BECAUSE IF THE AMOUNT BEING FED THROUGH IN PACKED FORMAT        */
/*    CONTAINS A "40" WITHIN THE NUMBER, IT GETS INTERPRETED AS A     */
/*    HEX "40" (SPACE) AND THE PROGRAM THINKS THERE ARE 4 PARAMETERS. */
/*                                                                    */
/*--------------------------------------------------------------------*/
FORMAT_POS = POS('N',ALL_PARAMETERS)
IF FORMAT_POS = 0 THEN
    FORMAT_POS = POS('B',ALL_PARAMETERS)
IF FORMAT_POS = 0 THEN
    FORMAT_POS = POS('P',ALL_PARAMETERS)

SELECT
  WHEN FORMAT_POS = 0 THEN
      DO
        ADDRESS ISPEXEC
        ZEDSMSG = 'PF1 FOR ERROR'
        ZEDLMSG = 'THE @CONVERT SUBROUTINE FAILED TO INTERPRET THE',
                  'PARAMETERS CORRECTLY.'
        CONV_ERROR = 'Y'
        'SETMSG MSG(ISRZ001)'
        SIGNAL STOPIT
      END
  OTHERWISE
      END_OF_DATA_POS = FORMAT_POS - 1
      START_OF_DECIMALS = FORMAT_POS + 1
      DATA_VALUE = SUBSTR(ALL_PARAMETERS,1,END_OF_DATA_POS)
      DATA_VALUE = STRIP(DATA_VALUE,'T')
      DATA_FORMAT = SUBSTR(ALL_PARAMETERS,FORMAT_POS,1)
      DATA_DECIMAL_POS = SUBSTR(ALL_PARAMETERS,START_OF_DECIMALS)
      DATA_DECIMAL_POS = STRIP(DATA_DECIMAL_POS,'L')
END

RETURN
/**/
/**/
/**/
/**/
/**/
/**/
10000_CONVERT_FROM_BINARY:
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    THIS PARAGRAPH WILL CONVERT THE NUMBER STORED AS BINARY INTO    */
/*    A NUMBER THAT CAN BE USED BY REXX.                              */
/*                                                                    */
/*--------------------------------------------------------------------*/
DATA_LENGTH = LENGTH(DATA_VALUE)
DATA_VALUE = C2D(DATA_VALUE,DATA_LENGTH)
DATA_LENGTH = LENGTH(DATA_VALUE)

RETURN
/**/
/**/
/**/
/**/
/**/
20000_CONVERT_FROM_PACKED:
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    THIS PARAGRAPH WILL CONVERT THE NUMBER STORED AS PACKED INTO    */
/*    A NUMBER THAT CAN BE USED BY REXX.                              */
/*                                                                    */
/*--------------------------------------------------------------------*/
DATA_VALUE = C2X(DATA_VALUE)
DATA_LENGTH = LENGTH(DATA_VALUE)
DATA_SIGN = SUBSTR(DATA_VALUE,DATA_LENGTH,1)

IF DATA_SIGN = 'C' THEN
    DATA_VALUE = OVERLAY('+',DATA_VALUE,DATA_LENGTH)

IF DATA_SIGN = 'F' THEN
    DATA_VALUE = OVERLAY('+',DATA_VALUE,DATA_LENGTH)

IF DATA_SIGN = 'D' THEN
    DATA_VALUE = OVERLAY('-',DATA_VALUE,DATA_LENGTH)

DATA_LENGTH = LENGTH(DATA_VALUE)

RETURN
/**/
/**/
/**/
/**/
/**/
30000_CONVERT_NON_NUMERICS:
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    THIS PARAGRAPH WILL CONVERT ANY VALUES THAT ARE NON-NUMERIC     */
/*    TO THEIR VALID NUMERIC VALUES.  THIS IS USUALLY DONE IF THE     */
/*    NUMBER HAS BEEN SIGN OVERPUNCHED OR SOME OTHER CONVERSION       */
/*    WHICH CAUSES THE SIGN TO BE HIDDEN IN THE NUMERIC VALUE.        */
/*                                                                    */
/*--------------------------------------------------------------------*/
IF DATA_FIRST_CHARACTER = '{' THEN
    DATA_VALUE = OVERLAY('+',DATA_VALUE,1)

IF DATA_FIRST_CHARACTER = '}' THEN
    DATA_VALUE = OVERLAY('-',DATA_VALUE,1)

SELECT
    WHEN DATA_LAST_CHARACTER = '{' THEN
        DATA_VALUE = OVERLAY('0',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'A' THEN
        DATA_VALUE = OVERLAY('1',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'B' THEN
        DATA_VALUE = OVERLAY('2',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'C' THEN
        DATA_VALUE = OVERLAY('3',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'D' THEN
        DATA_VALUE = OVERLAY('4',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'E' THEN
        DATA_VALUE = OVERLAY('5',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'F' THEN
        DATA_VALUE = OVERLAY('6',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'G' THEN
        DATA_VALUE = OVERLAY('7',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'H' THEN
        DATA_VALUE = OVERLAY('8',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = 'I' THEN
        DATA_VALUE = OVERLAY('9',DATA_VALUE,DATA_LENGTH)
    WHEN DATA_LAST_CHARACTER = '}' THEN
        DO
          DATA_VALUE = OVERLAY('0',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'J' THEN
        DO
          DATA_VALUE = OVERLAY('1',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'K' THEN
        DO
          DATA_VALUE = OVERLAY('2',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'L' THEN
        DO
          DATA_VALUE = OVERLAY('3',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'M' THEN
        DO
          DATA_VALUE = OVERLAY('4',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'N' THEN
        DO
          DATA_VALUE = OVERLAY('5',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'O' THEN
        DO
          DATA_VALUE = OVERLAY('6',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'P' THEN
        DO
          DATA_VALUE = OVERLAY('7',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'Q' THEN
        DO
          DATA_VALUE = OVERLAY('8',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    WHEN DATA_LAST_CHARACTER = 'R' THEN
        DO
          DATA_VALUE = OVERLAY('9',DATA_VALUE,DATA_LENGTH)
          DATA_VALUE = '-' || DATA_VALUE
        END
    OTHERWISE
        NOP
END

CALL 31000_CHECK_IF_NUMERIC

RETURN
/**/
/**/
/**/
/**/
/**/
31000_CHECK_IF_NUMERIC:
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    THIS PARAGRAPH WILL MAKE SURE THE NUMBER HAS EITHER NUMBERS     */
/*    OR PLUS OR MINUS SIGNS MAKING UP THE DATA_VALUE VALUE. IF THERE */
/*    IS A PLUS OR MINUS SIGN ON THE END OF THE AMOUNT, IT WILL BE    */
/*    MOVED TO THE FRONT.                                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
IF DATA_LAST_CHARACTER = '+' THEN
    DO
      DATA_VALUE = '+' || DATA_VALUE
      DATA_VALUE = STRIP(DATA_VALUE,'T','+')
    END

IF DATA_LAST_CHARACTER = '-' THEN
    DO
      DATA_VALUE = '-' || DATA_VALUE
      DATA_VALUE = STRIP(DATA_VALUE,'T','-')
    END

IS_FIELD_NUMERIC = DATATYPE(DATA_VALUE,'N')
IF IS_FIELD_NUMERIC = '1' THEN NOP
ELSE
    DO
      ADDRESS ISPEXEC
      ZEDSMSG = 'PF1 FOR ERROR'
      ZEDLMSG = 'THE @CONVERT SUBROUTINE COULD NOT CONVERT ONE OF YOUR',
                'NUMBERS CORRECTLY.  THIS COULD BE CAUSED BECAUSE YOU',
                'ARE CONVERTING A NON-NUMERIC VALUE OR IT COULD BE',
                'CAUSED BECAUSE THE DATA IS NOT IN THE FORMAT YOU',
               'SPECIFIED.  ENTER (N) NUMBER FIELDS IN DISPLAY FORMAT',
                '(B) FOR BINARY, COMP, OR COMP-4 DATA, OR (P)',
                'FOR PACKED-DECIMAL, COMP-3 DATA.'
      CONV_ERROR = 'Y'
      'SETMSG MSG(ISRZ001)'
      SIGNAL STOPIT
    END

RETURN
/**/
/**/
/**/
/**/
/**/
40000_PLACE_DECIMAL_POINT:
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    THIS PARAGRAPH WILL PLACE THE DECIMAL POINT IF THERE IS NOT     */
/*    ALREADY ONE EXISTING.                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
DECIMAL_POS = POS('.',DATA_VALUE)

IF DECIMAL_POS > 0 THEN NOP
ELSE
    DO
      DATA_LENGTH = LENGTH(DATA_VALUE)
      PLACE_DECIMAL_POINT_AFTER = DATA_LENGTH - DATA_DECIMAL_POS
      DATA_VALUE = INSERT('.',DATA_VALUE,PLACE_DECIMAL_POINT_AFTER)
    END

RETURN
/**/
/**/
/**/
/**/
/**/
