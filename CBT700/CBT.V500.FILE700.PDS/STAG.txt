/***************************** REXX ***********************************/
/*                                                                   */
/*    COMMAND NAME: STAG                                             */
/*    WRITTEN BY:   JIM HAIRE                                        */
/*                                                                   */
/*    FORMAT:                                                        */
/*        TYPE "STAG <KEEP>" ON COMMAND LINE                         */
/*                                                                   */
/*        THEN PLACE THE CURSOR SOMEWHERE WITHIN YOUR EDIT SESSION   */
/*        WHERE YOU WISH TO PUT THE CONTENTS OF THE PROFILE.  THE    */
/*        FIRST LINE WHICH WAS PLACED ON THE PROFILE USING THE       */
/*        "SNIP" COMMAND WILL BE GLUED TO THE SPOT MARKED BY THE     */
/*        CURSOR.  "BEFORE" AND "AFTER" LINE COMMANDS CAN BE USED    */
/*        TO INSERT THE "SNIPPED" LINES INTO THE PROPER POSITION.    */
/*        IF NO LINE COMMANDS ARE USED, THE COMMAND WILL             */
/*        OVERLAY THE AREA WITH THE DATA FROM THE PROFILE.           */
/*                                                                   */
/*                                                                   */
/*    ARGUMENT LIST:                                                 */
/*        <KEEP> - IF YOU TYPE "K" OR "KEEP" AFTER THE "STAG"        */
/*                 COMMAND, THE LINES THAT YOU GLUE WILL REMAIN      */
/*                 IN THE PROFILE.  OTHERWISE, THEY WILL BE ERASED   */
/*                 FROM THE PROFILE AFTER THEY HAVE BEEN "GLUED".    */
/*                                                                   */
/*                                                                   */
/*    DESCRIPTION:                                                   */
/*       THIS EDIT MACRO WILL ALLOW YOU TO TAKE THE PIECES OF CODE    */
/*       THAT HAVE BEEN CUT OUT WITH THE "SNIP" COMMAND AND WILL      */
/*       STAGGER EACH LINE TO THE POSITION INDICATED BY THE CURSOR.   */
/*                                                                    */
/*                                                                    */
/**********************************************************************/
/*--------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL CHECK THE SCREEN FOR LINE COMMANDS AND THE  */
/*    PROFILE FOR LINES TO BE GLUED.                                  */
/*--------------------------------------------------------------------*/
ADDRESS ISPEXEC
"ISREDIT MACRO NOPROCESS (KEEPSW)"

/*--------------------------------------------------------------------*/
/*    GET THE LINE NUMBER FROM THE PROFILE.  THIS WILL TELL YOU HOW   */
/*    MANY LINES WE ARE ATTEMPTING TO GLUE.                           */
/*--------------------------------------------------------------------*/
"VGET (LINNBR) PROFILE"
IF LINNBR <= 0 THEN
    DO
      "ISREDIT (GLUECOL,GLUEROW) = CURSOR"
      ADDRESS ISPEXEC
      ZEDSMSG = 'NO LINES IN PROFILE'
      ZEDLMSG = '"SNIP" COMMAND MUST CUT LINES TO PROFILE '
      ZEDLMSG = ZEDLMSG || 'BEFORE USING "STAGGER" COMMAND.'
      'SETMSG MSG(ISRZ001)'
      "ISREDIT CURSOR = &GLUECOL &GLUEROW"
      EXIT 12
    END

CALL DETERMINE_CURRENT_MEMBER

/*--------------------------------------------------------------------*/
/*    GET THE NUMBER OF SET POINTS THAT HAVE BEEN SET IN THE          */
/*    PROFILE.   SET POINTS ESTABLISH POSITIONS WITHIN YOUR EDIT      */
/*    MEMBER WHERE YOU WISH TO APPEND LINES.                          */
/*--------------------------------------------------------------------*/
"VGET (SETPOINT) PROFILE"
IF SETPOINT <= 0 THEN
    DO
      "ISREDIT PROCESS RANGE A B"
      "ISREDIT (CMDLINE) = LINENUM .ZLRANGE"
      "ISREDIT (LINECMD) = RANGE_CMD"
      CALL CHECK_CURSOR_POSITION
      CALL GLUE_A_LINE
      CALL ERASE_PROFILE
    END
ELSE
    DO
      "ISREDIT PROCESS RANGE A B"
      "ISREDIT (LINECMD) = RANGE_CMD"
      IF LINECMD = ' ' THEN
          DO
            /*------------------------------------------------------*/
            /*    GET THE CURSOR POSITION OF THE FIRST SETPOINT     */
            /*    FOR REPOSITIONING LATER.                          */
            /*------------------------------------------------------*/
            "VGET (SETL1 SETC1) PROFILE"
            ORIGCOL = SETL1
            ORIGROW = SETC1
            /*------------------------------------------------------*/
            /*    GLUE A LINE FOR EACH SETPOINT AND THEN ERASE      */
            /*    THAT LINE AND SETPOINT.                           */
            /*------------------------------------------------------*/
            DO GP = 1 TO SETPOINT
              "VGET (SETL"GP" SETC"GP") PROFILE"
              INTERPRET "GLUECOL = SETL"GP
              INTERPRET "GLUEROW = SETC"GP
              "ISREDIT (CMDLINE) = LINENUM .ZLRANGE"
              IF GLUECOL <= CMDLINE THEN CURSOR_PAST_EOF = 'N'
              "ISREDIT CURSOR = &GLUECOL &GLUEROW"
              CALL CHECK_FOR_TRUNCATION
              CALL GLUE_MULTIPLE_LINES
              CALL ERASE_PROFILE
              CALL ERASE_SETPOINT
            END
          END
      ELSE
          DO
            ADDRESS ISPEXEC
            ZEDSMSG = 'PF1 FOR ERROR'
            ZEDLMSG = 'LINE COMMANDS CANNOT BE USED WHEN USING SET '
            ZEDLMSG = ZEDLMSG || 'POINTS.  STRANGE RESULTS MAY OCCUR.'
            'SETMSG MSG(ISRZ001)'
            "ISREDIT CURSOR = .ZLRANGE"
            EXIT 12
          END
    END

CALL REPOSITION_CURSOR

SKIPIT:
EXIT
/**/
/**/
/**/
/**/
/**/
DETERMINE_CURRENT_MEMBER:
/*--------------------------------------------------------------------*/
/*    THIS PARAGRAPH DETERMINES THE NAME OF THE CURRENT FILE AND      */
/*    WILL RETRIEVE INFORMATION ABOUT THE LENGTH OF THE RECORDS ON    */
/*    THE FILE SO WE CAN TELL IF WE ARE TRUNCATING LINES OR NOT.      */
/*--------------------------------------------------------------------*/
ADDRESS ISPEXEC
"ISREDIT (DSNAME) = DATASET"
"ISREDIT (MEMNAME) = MEMBER"

IF MEMNAME = ' ' THEN
    DSET = DSNAME
ELSE
    DSET = DSNAME"("MEMNAME")"

X = LISTDSI("'"DSET"'")

RETURN
/**/
/**/
/**/
/**/
/**/
CHECK_CURSOR_POSITION:
/*--------------------------------------------------------------------*/
/*    THIS PARAGRAPH DETERMINES IF THE CURSOR IS IN A VALID POSITION  */
/*    TO INSERT RECORDS.                                              */
/*--------------------------------------------------------------------*/
ADDRESS ISPEXEC
    "ISREDIT (GLUECOL,GLUEROW) = CURSOR"
    IF GLUECOL > 0 & GLUEROW > 0 THEN
        DO
          ORIGCOL = GLUECOL
          ORIGROW = GLUEROW
        END
    ELSE
        DO
          ADDRESS ISPEXEC
          ZEDSMSG = 'PF1 FOR ERROR'
          ZEDLMSG = 'PLACE CURSOR SOMEWHERE WITHIN THE MEMBER YOU'
          ZEDLMSG = ZEDLMSG || ' ARE EDITING.'
          'SETMSG MSG(ISRZ001)'
          EXIT 12
        END

CALL CHECK_FOR_TRUNCATION

RETURN
/**/
/**/
/**/
/**/
/**/
CHECK_FOR_TRUNCATION:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL CHECK THAT NONE OF THE LINES WILL BE      */
/*    TRUNCATED IF PLACED ON THE FILE WHERE THE USER HAS PUT THE    */
/*    CURSOR.  SINCE THE LINES ARE GOING TO START FROM THE CURSOR   */
/*    POSITION IN ALL CASES, WE CAN DETERMINE TRUNCATION BY ADDING  */
/*    EACH LINE'S LENGTH TO THE CURSOR POSITION.                    */
/*    IF THIS CALCULATION IS GREATER THAN THE LOGICAL RECORD        */
/*    LENGTH, AN ERROR WINDOW WILL APPEAR.                          */
/*                                                                  */
/*    THE DATASET BEING EDITED IS ALSO CHECKED TO SEE IF IT IS      */
/*    IN NUMBER MODE, THAT IS, TO SEE IF THE LAST EIGHT CHARACTERS  */
/*    OF THE DATASET CONTAIN LINE NUMBERS.  IF THEY DO, THE         */
/*    LENGTH OF THE DATASET WILL BE INTERPRETED TO BE SHORTER BY    */
/*    EIGHT CHARACTERS.                                             */
/*------------------------------------------------------------------*/
/********************************************************************/
/*  MAKE THE SNIPPED VALUES AVAILABLE FOR THE REST OF THE PROGRAM.  */
/********************************************************************/
DROP T
DO T = 1 TO LINNBR
    "VGET (SNIP"T") PROFILE"
END


INTERPRET "PROFILE_STRING =  SNIP1"
STRLGTH = LENGTH(PROFILE_STRING)
ANYCHAR = COPIES('=',STRLGTH)

"ISREDIT (NUMMODE,NUMSTATS) = NUMBER"
IF NUMMODE = 'ON' THEN
    REAL_SYSLRECL = SYSLRECL - 8
ELSE
    REAL_SYSLRECL = SYSLRECL

LCHARPOS  = GLUEROW + STRLGTH - 1
IF LCHARPOS > REAL_SYSLRECL THEN
    DO
      ADDRESS ISPEXEC
      ZEDSMSG = 'PF1 FOR ERROR'
      ZEDLMSG = 'LINES EXTEND PAST END OF RECORD CAUSING TRUNCATION'
      'SETMSG MSG(ISRZ001)'
      "ISREDIT CURSOR = &GLUECOL &GLUEROW"
      EXIT 12
    END

RETURN
/**/
/**/
/**/
/**/
/**/
GLUE_A_LINE:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL ATTACH THE LINES TO EVERY POSITION YOU    */
/*    HAVE INDICATED YOU WANT THE SNIPPED LINES TO BE PLACED.       */
/*------------------------------------------------------------------*/
"ISREDIT (CURRLINE) = LINENUM .ZLRANGE"
NEWSTRG = SNIP1
CALL DETERMINE_QUOTE_TO_USE
SELECT
  WHEN LINECMD = 'A' THEN
      DO
        "ISREDIT LINE_AFTER &CURRLINE = <&GLUEROW,&QTE&NEWSTRG&QTE>"
        CALL PUT_BACK_AMPERSANDS
        CURRLINE = CURRLINE + 1
      END
  WHEN LINECMD = 'B' THEN
      DO
        "ISREDIT LINE_BEFORE &CURRLINE = <&GLUEROW,&QTE&NEWSTRG&QTE>"
        CALL PUT_BACK_AMPERSANDS
        CURRLINE = CURRLINE + 1
        END
  WHEN LINECMD = ' ' THEN
      IF CURSOR_PAST_EOF = 'Y' THEN
        DO
          "ISREDIT LINE_AFTER &CURRLINE = <&GLUEROW,&QTE&NEWSTRG&QTE>"
          CALL PUT_BACK_AMPERSANDS
          CURRLINE = CURRLINE + 1
        END
      ELSE
          CALL CHANGE_THE_FILE
OTHERWISE
    ADDRESS ISPEXEC
    ZEDSMSG = 'PF1 FOR ERROR'
    ZEDLMSG = 'ONLY USE (B) BEFORE AND (A) AFTER COMMANDS WHEN '
    ZEDLMSG = ZEDLMSG || 'USING "STAG" COMMAND.'
    'SETMSG MSG(ISRZ001)'
    "ISREDIT CURSOR = .ZLRANGE"
    EXIT 12
END

RETURN
/**/
/**/
/**/
/**/
/**/
GLUE_MULTIPLE_LINES:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL BE PERFORMED WHEN YOU USE THE SET         */
/*    POINTS FEATURE.  IT WILL PREVENT LINE COMMANDS FROM BEING     */
/*    USED.                                                         */
/*------------------------------------------------------------------*/
"ISREDIT (CURRLINE) = LINENUM &GLUECOL"

INTERPRET "NEWSTRG = SNIP1"
CALL DETERMINE_QUOTE_TO_USE
IF CURSOR_PAST_EOF = 'Y' THEN
    DO
      "ISREDIT LINE_AFTER &CURRLINE = <&GLUEROW,&QTE&NEWSTRG&QTE>"
      CALL PUT_BACK_AMPERSANDS
    END
ELSE
    CALL CHANGE_THE_FILE


RETURN
/**/
/**/
/**/
/**/
/**/
CHANGE_THE_FILE:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL DO A CHANGE AGAINST THE FILE SO THAT      */
/*    THE LINES THAT HAVE BEEN SNIPPED WILL NOW BECOME PART OF      */
/*    THE FILE YOU ARE EDITING.                                     */
/*------------------------------------------------------------------*/
 "ISREDIT (CURRDATA) = LINE &GLUECOL"
 OLDSTRG = SUBSTR(CURRDATA,GLUEROW,STRLGTH)

 CALL GET_RID_OF_AMPERSANDS
 CALL PUT_BACK_AMPERSANDS

 GLUECOL = GLUECOL + 1
 IF GLUECOL > CMDLINE THEN CURSOR_PAST_EOF = 'Y'
 ELSE
     DO
       CURSOR_PAST_EOF = 'N'
       "ISREDIT CURSOR = &GLUECOL &GLUEROW"
     END


RETURN
/**/
/**/
/**/
/**/
/**/
DETERMINE_QUOTE_TO_USE:
/*--------------------------------------------------------------------*/
/*-                                                                  -*/
/*-     BECAUSE THE STRING THAT WE ARE CHANGING HAS TO BE ENCLOSED   -*/
/*-     IN QUOTES IN THE CHANGE COMMAND, THE REXX LANGUAGE BECOMES   -*/
/*-     CONFUSED IF THERE ARE QUOTES IN THE STRING.  THIS PARAGRAPH  -*/
/*-     ATTEMPTS TO BUILD THE STRING IN THE CORRECT WAY.             -*/
/*-                                                                  -*/
/*--------------------------------------------------------------------*/
    QPOS = 0 | DQPOS = 0

    QPOS = POS("'",NEWSTRG)
    DQPOS = POS('"',NEWSTRG)

    IF QPOS = 0 & DQPOS = 0 THEN
        QTE = "'"
    ELSE
        IF QPOS > DQPOS THEN
            QTE = '"'
        ELSE
            QTE = "'"

    NEWSTRG = TRANSLATE(NEWSTRG,'`','&')

RETURN
/**/
/**/
/**/
/**/
/**/
GET_RID_OF_AMPERSANDS:
/*--------------------------------------------------------------------*/
/*-                                                                  -*/
/*-     THIS PARAGRAPH CHANGE THE AMPERSANDS IN THE STRING TO A      -*/
/*-     SELDOM USED CHARACTER SO THE STRING CAN BE CHANGED.  THIS    -*/
/*-     IS BECAUSE AMPERSANDS ARE INTERPRETED AS SUBSTITUTION        -*/
/*-     VARIABLES IN EDIT MACROS.                                    -*/
/*-                                                                  -*/
/*--------------------------------------------------------------------*/
    ADDRESS ISPEXEC
    "ISREDIT CURSOR = &GLUECOL &GLUEROW"
    "ISREDIT CHANGE '&' '`' ALL"
    "ISREDIT CURSOR = &GLUECOL &GLUEROW"
    "ISREDIT CHANGE P'&ANYCHAR' &QTE&NEWSTRG&QTE"
    "ISREDIT CHANGE '`' '&' ALL"

RETURN
/**/
/**/
/**/
/**/
/**/
PUT_BACK_AMPERSANDS:
/*--------------------------------------------------------------------*/
/*-                                                                  -*/
/*-     THIS PARAGRAPH WILL PUT BACK THE AMPERSANDS SO THE STRING    -*/
/*-     WILL APPEAR IN ITS ORIGINAL STATE.                           -*/
/*-                                                                  -*/
/*--------------------------------------------------------------------*/
    ADDRESS ISPEXEC
    "ISREDIT CURSOR = &GLUECOL &GLUEROW"
    "ISREDIT CHANGE '&' '&' ALL"

RETURN
/**/
/**/
/**/
/**/
/**/
ERASE_PROFILE:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL ERASE ONE LINE FROM THE PROFILE FOR       */
/*    EACH "STAGGER" COMMAND RUN AND WILL MOVE THE LINES UP         */
/*    WITHIN THE PROFILE.                                           */
/*------------------------------------------------------------------*/
    UPPER KEEPSW
    IF KEEPSW = 'KEEP' | KEEPSW = 'K' THEN NOP
    ELSE
        DO
          IF LINNBR = 1 THEN
             "VERASE (SNIP"J" LINNBR SNIPSW MOVESW) PROFILE"
          ELSE
              DO J = 1 TO LINNBR
                IF J = LINNBR THEN
                    DO
                      LINNBR = LINNBR - 1
                      "VPUT (LINNBR) PROFILE"
                      "VERASE (SNIP"J") PROFILE"
                    END
                ELSE
                    DO
                      K = J + 1
                      INTERPRET "SNIP"J" = SNIP"K
                      "VPUT (SNIP"J") PROFILE"
                    END
              END
        END

RETURN
/**/
/**/
/**/
/**/
/**/
ERASE_SETPOINT:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH WILL ERASE ONE SETPOINT FROM THE PROFILE       */
/*    FOR EACH LINE THAT WAS GLUED.  IT WILL MOVE UP SETPOINTS      */
/*    WITHIN THE PROFILE.                                           */
/*------------------------------------------------------------------*/
IF SETPOINT = 1 THEN
    "VERASE (SETL1 SETC1 SETPOINT) PROFILE"
ELSE
    DO J2 = 1 TO SETPOINT
      IF J2 = SETPOINT THEN
          DO
            SETPOINT = SETPOINT - 1
            "VPUT (SETPOINT) PROFILE"
            "VERASE (SETL"J2" SETC"J2") PROFILE"
          END
      ELSE
          DO
            K2 = J2 + 1
            INTERPRET "SETL"J2" = SETL"K2
            INTERPRET "SETC"J2" = SETC"K2
            "VPUT (SETL"J2" SETC"J2") PROFILE"
          END
    END

RETURN
/**/
/**/
/**/
/**/
/**/
REPOSITION_CURSOR:
/*------------------------------------------------------------------*/
/*    THIS PARAGRAPH REPOSITION THE CURSOR TO ITS ORIGINAL          */
/*    POSITION.                                                     */
/*------------------------------------------------------------------*/
"ISREDIT CURSOR = &ORIGCOL &ORIGROW"

RETURN
/**/
/**/
/**/
/**/
/**/
