{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012308000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2057510, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE536.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2057510, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2057510, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE536.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00!\\x05'", "DS1TRBAL": "b'\\x80\\x90'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xf8\\x00\\x07\\x03\\xfa\\x00\\n\\x00\"'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00(\\x01\\x19\\x02/\\x01\\x19\\x02/\\x02\\x03\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-22T00:00:00", "modifydate": "2019-01-22T02:03:28", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  536\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE536\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    6160    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 19,483 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/22/19    02:03:28    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x003\\x01\\x012O\\x01\\x012O\\tP\\x00\\x0e\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T09:50:33", "lines": 14, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "      Note concerning XDI Text Documentation\n\n\n  I have attempted to convert the Word 97 XDI documentation into\n  readable EBCDIC FB-80 format.  Microsoft Word 97 does not easily\n  lend itself to this, but the hope is, that the documentation will\n  be both readable and able to be followed.  I don't guarantee\n  accuracy of the JCL.  You will have to check that against the real\n  Word 97 doc.\n\n      Member:   $MANUAL\n\n                               S. Golob\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x02\\x01\\x13\\t\\x7f\\x01\\x13\\t\\x7f\\x12'\\x00\\x05\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-04-07T00:00:00", "modifydate": "2013-04-07T12:27:02", "lines": 5, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "\nNote:  Some of the member names in the MACLIB member were suffixed\n       by one or more x'00' characters.  These were all changed to\n       x'40' (blanks).   (S.Golob 04/2013)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$ANTIVIR": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00H\\x01\\x012O\\x01\\x012O\\tH\\x00\\x12\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T09:48:48", "lines": 18, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "      Anti-Virus Note concerning XDI Word97 Documentation\n\n      Member:   $XDIDOC\n\n  This documentation was checked for viruses using Norton Anti-Virus\n  definitions updated 11/14/01, which is the latest version, as of the\n  date that this member was written.\n\n  I have attempted to convert this documentation into readable EBCDIC\n  FB-80 format.  Microsoft Word 97 does not easily lend itself to this,\n  but the hope is, that the documentation will be both readable and\n  able to be followed.  I don't guarantee accuracy of the JCL.  You\n  will have to check that against the real Word 97 doc.\n\n      Member:   $MANUAL\n\n                               S. Golob\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$JCLNSMS": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x075\\x00\\x15\\x00\\x15\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T07:35:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "DERU-S"}, "text": "//RESTONON JOB   (),\n//         CLASS=A,\n//         MSGCLASS=X,\n//         MSGLEVEL=(1,1),\n//         NOTIFY=HERO,\n//         TIME=1440\n//STEP1    EXEC PGM=ADRDSSU\n//DASD     DD  UNIT=3390,VOL=SER=vvvvvv,DISP=SHR\n//TAPE     DD  DSN=BACKUP.XDI,DISP=(,KEEP),\n//             UNIT=3480,LABEL=(1,SL,EXPDT=98000),\n//             VOL=SER=CAIXDI\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  RESTORE DATASET(INCL(CAI.XDI*.**)) -\n       RENAME(CAI,newhlq) -\n       INDDNAME(TAPE) -\n       OUTDDNAME(DASD) -\n       SHR -\n       REPLACE\n//*\n//* NOTES  ; JCL ABOVE USED FOR RESTORE DATASETS TO 'NON SMS DASD'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$JCLSMS": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x075\\x00\\x11\\x00\\x11\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T07:35:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "DERU-S"}, "text": "//RESTOSMS JOB   (),\n//         CLASS=A,\n//         MSGCLASS=X,\n//         MSGLEVEL=(1,1),\n//         NOTIFY=HERO,\n//         TIME=1440\n//STEP1    EXEC PGM=ADRDSSU\n//TAPE     DD  DSN=BACKUP.XDI,DISP=(,KEEP),\n//             UNIT=3480,LABEL=(1,SL,EXPDT=98000),\n//             VOL=SER=CAIXDI\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  RESTORE DATASET(INCL(CAI.XDI*.**)) -\n       RENAMEU(CAI,newhlq) -\n       INDDNAME(TAPE) SHR\n//*\n//* NOTES : JCL ABOVE USED FOR RESTORE DATASETS TO 'SMS DASD'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$MANUAL": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x012O\\x01\\x012O\\tE\\tO\\tO\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T09:45:50", "lines": 2383, "newlines": 2383, "modlines": 0, "user": "SBGOLOB"}, "text": "XDI/MVS\n\nThe Supplement of CA-Xcom/MVS\n\n\nThe Solution of Combined Xcom-Dispatch Application for Report\nDistribution Management System\n\n\n\nSYSDOC and USER's GUIDE\n\n\n\n\n\nDeru Sudibyo\nTechnical Consultant\nOS/390 Solution\n\n\n\n\n\n\nChapter 1.  INTRODUCTION                          5\n\nChapter 2.  LOGIC DESIGN and ARCHITECTURE        17\n\nChapter 3.  PROGRAM DOCUMENTATION                28\n\nChapter 4.  INSTALLATION                         36\n\nChapter 5.  CUSTOMIZATION                        39\n\nChapter 6.  XDI PARAMETERS                       47\n\nChapter 7.  XDI COMMANDS                         49\n\nChapter 8.  XDI MESSAGES                         55\n\n\n\n\n\n\nTable of Contents\n\nCHAPTER 1:  INTRODUCTION                          5\n1.1.  THE STORY OF THE BORN OF XDI                5\n1.2.  XDI IS A SYSTEMS PROGRAMMING SOLUTION       6\n\nPART-I:  SYSTEM DOCUMENTATION                     8\n\nCHAPTER 2:  LOGIC DESIGN AND ARCHITECTURE         9\n2.1.  CONFIGURATION                              10\n2.2.  FUNCTIONS                                  12\n2.3.  OPERATION LOGIC                            13\n2.3.1.  Operating Environment                    13\n2.3.2.  Steps of Work                            13\n2.3.3.  Global Main Logic Flow                   16\n2.3.4.  I/O Preparation Logic Flow               17\n\nCHAPTER 3:  PROGRAM DOCUMENTATION                18\n\n3.1.  XDI PROGRAM MODULES                        18\nDERXDI - XDI MAIN MODULE                         18\nDERXDP - XDI PARAMETER INITIALIZER               18\nDERXIO - XDI I/O PREPARATION ROUTINE             18\nDERXDS - XDI SYSOUT REQUEUE DRIVER ROUTINE       19\nDERXSF - XDI SEND FILE (SF) COMMAND PROCESSOR    19\nDERWTR - XDI OUTPUT WRITER ROUTINE               19\nDERWTB - XDI OUTPUT WRITER ROUTINE               19\nDERWTG - XDI SYSOUT DESTROYER ROUTINE            19\nDERWSA - XDI WORKING STORAGE AREA                20\nDERWTX - XDI EXTENDED WORKING STORAGE AREA       20\nDERDCB - XDI SET OF DATA CONTROL BLOCKS          20\nDERMSG - XDI SET OF MESSAGES                     20\n\n3.2.  XDI MACROS                                                  21\n\n3.2.1.  XDI Outer Macros                                          21\n\n@AMODE MACRO - SWITCH ADDRESSING MODE                             21\n@DYNAMIC MACRO - DYNAMIC DATA ALLOCATION/DEALLOCATION             21\n@EDITDSN MACRO - EDIT DATASET NAME                                22\n@EDITHDR MACRO - EDIT DISPATCH/PC-FORMATTED REPORT PAGE HEADER    22\n@EDITTOD MACRO - OBTAIN AND EDIT TOD DATE AND TIME                23\n@EXIT MACRO - MODULE SECTION EXIT ROUTINE                         23\n@FLATDS MACRO - DEFINE FLAT DATASET FILE                          23\n@MESSAGE MACRO - ISSUE XDI VARIABLE MESSAGE                       23\n@PROLOG MACRO - MODULE ENTRY PROLOG                               24\n@SYSOUT MACRO - DEFINE SYSOUT FILE                                24\n@VDATA MACRO - BUILD GLOBALLY DECLARED DATA                       24\n@VGLOBAL MACRO - DECLARE GLOBAL VARIABLES                         25\n@WTO MACRO - ISSUE XDI FIXED MESSAGE                              25\n@XCOMJOB MACRO - BUILD OR UPDATE XJOB JOB                         25\n\n3.2.2.  XDI Inner Macros                                          26\n\n\nPART-II:  USER'S GUIDE                           28\n\nCHAPTER 4:  INSTALLATION                         29\n4.1.  XDI CATALOGED PROCEDURE                    30\n4.2.  XDI LIBRARIES                              31\n4.3.  JCLS FOR SYSGEN AND MAINTENANCE            31\n4.3.1.  ASSEMBLE Procedure                       31\n4.3.2.  JDIGEN Job                               32\n4.3.3.  JWTX Job                                 35\n\nCHAPTER 5:  CUSTOMIZATION                        36\n5.1. WTX PARAMETERS                              36\n5.1.1.  Type, AMODE and RMODE                    36\n5.1.2.  JES=Primary-JES-name                     37\n5.1.3.  Flat File (Transition File) Parameters   37\n5.1.4.  Xcom Job JCL Parameters                  37\n5.2.  APPLYING WTX CHANGES                       38\n\nCHAPTER 6:  XDI PARAMETERS                       39\n6.1.  XDISYSMM - XDI SYSTEM PARAMETER            39\n6.1.1. Syntax and Rules                          39\n6.1.2. CLASS=Class-list                          40\n6.1.3.  RQCLASS=Class                            40\n6.1.4.  PCFORM=[WINDOWS|DISPATCH|S/390]          40\n6.1.5.  TRACE=[ON|OFF]                           40\n6.1.6. DISP= and HOLD= are not Supported yet     40\n6.1.7.  XDISP=[KEEP|DELETE]                      41\n6.1.8.  LRECL=[NORMAL|ASIS]                      41\n6.1.9.  XPARM=Xcom-job-parameter                 41\n6.1.10.  TABLE=nn                                42\n6.1.11.  PCDRIVE=PC-drive-letter                 42\n6.1.12.  STEPLIB=Steplib-file and CAILIB=Cailib-file  42\n6.1.13.  PARMLIB=Parmlib-file                    42\n6.1.14.  RESTLIB=Restlib-file                    42\n6.1.15.  GLOBLIB=Globlib-file                    42\n6.1.16.  Example of XDISYS00                     43\n6.2.  XDITABNN - XDI DESTINATION TABLE           43\n6.2.1.  Syntax and Rules                         43\n6.2.2.  Example of XDITAB00                      44\n6.3.  XDI DESTINATION MEMBERS                    44\n6.3.1.  Syntax and Rules                         44\n6.3.2.  Passing MVS or JES Commands              44\n6.3.3.  Override XDISYS Parameters               45\n6.3.4.  Example of XDI Destination Member        45\n\nCHAPTER 7:  XDI COMMANDS                         46\n7.1.  LIST COMMAND                               46\n7.2.  FILE=MM COMMAND                            46\n7.3. XDISYS KEYWORD COMMANDS                     46\n7.4.  SF (SEND_FILE) COMMAND                     47\n\nCHAPTER 8:  XDI MESSAGES                         48\n8.1.  VARIABLE TEXT MESSAGES                     48\n8.2.  FIXED TEXT MESSAGES                        50\n\n\n\n\nChapter 1\nINTRODUCTION\n\n\nXDI born because of a special requirement came from one of CA\ncustomer, BII.  She wanted to establish Report Distribution\nManagement System (RDMS) using CA-Dispatch.   Distribution is\nperformed explicitly broadcast all reports from Data Center (MVS\nsystem) to all Branch Offices (PC/Windows).  By the time, because\nin SNA environment, LU type 2 is the only way Dispatch download\nreports to PC, she felt too slow.  Unfortunately, RTC (part of\nCA-Dispatch/PC) was also not very good tool.\n\n\n1.1.  The Story of the Born of XDI\n\nBII then asked for alternative solution, at least such utility to\nreplace CA-Dispatch download function.  CA account manager\noffered Xcom.  Based on functions and features described in Xcom\nbrochure, she then decided to use Xcom to replace CAICCI and RTC\nparts of Dispatch.  Unfortunately, CA-Xcom is not a part of\nDispatch.  Of course, Xcom faster because of LU type 6.2.  But it\nis not designed to support Dispatch.  Thus, no way to put Xcom in\nthe position of CCI and RTC which is operated by CA-Dispatch\nwithout human intervention. The crowded situation, by the time,\ncan be described as follow:\n\n? To void CCI and RTC, route Dispatch output to spool is the only\n  way.  Xcom then take them as input to be transferred to the right\n  recipient specified in its DESTination name.\n\n? Since reports will be kept as PC files by each Branch Office,\n  PC file name must represent report name.\n\n? Specify external writer name as report name to each Dispatch\n  output is the only way to pass report name to spool.\n\n? Since Xcom spool transfer function uses external writer name as\n  routing criterion, thus, external writer name must represent\n  destination.  And since each Branch Office designed as a single\n  recipient, external writer name must be unique for each Branch\n  Office.  Unfortunately, external writer name can not represent\n  recipient name and report name at the same time.\n\n? Since Xcom spool transfer assumed as spool to spool data\n  transfer, no such information represent the content of\n  transferred report carried over the network.  Hence, no way to\n  convert received report (in Branch Office) in to PC file with the\n  right file name.\n\n? Since Xcom doesn't support checkpoint recovery for spool\n  transfer, client become disappoints and complains us to provide\n  this feature.\n\nAll of the above reason forced us to do something in systems\nprogramming area instead of just playing around administrative\narea.  XDI is the result of this survives, and so far is the only\nacceptable solution for a while.\n\n\n1.2.  XDI is A Systems Programming Solution\n\nSystems programming solution is the highest and the most critical\nsolution ever made in the IT plant.  It must be the last\nalternative.  XDI is one of such seldom solution.  Unless it\ntaken by software industry, no body can guaranty its lifetime.\nTherefore, strongly recommended users to keep its source codes\nand documents in very safe place using very safe method.\n\nThe idea of XDI design came from the weakness point of Xcom.  In\nstandard application, Xcom provides 3 data transfer functions as\nshown in figure 1.  All three are separated path each other.\nFilesystem is the only target for dataset or file transfer\nfunction.  JES or other job-entry is the only target for job\ntransfer function.  Spool is the only target for report transfer\nfunction.\n\nFigure 1: Three data transfer functions provided by Xcom standard.\n\n\nThe needs, sometimes in fact, out of standard.  Like in BII, Xcom\nis needed to support Dispatch application, especially its speed\nand check point recovery feature.  Unfortunately, standard Xcom\ndoes not satisfied, since remote spool is the only target for\nreport transfer.  Client needs transferred reports from Dispatch\n(MVS) to be filed by each remote system (Windows NT) with\nrepresentative file name.\n\nTo satisfy the above needs, systems programming is the only\nsolution.  Modify Dispatch or Xcom is impossible.  Developing an\nindependent program like XDI is then the only chance to provide\nsolution.  Now XDI is ready and is being used by BII, even though\nit needs to be evaluated further.\n\nWith XDI, Xcom report transfer function becomes more flexible.\nNow report can be transferred in 2 ways, 'spool to spool' as a\nstandard Xcom way and 'spool to Filesystem' as an additional way.\nFigure 2 shows how XDI enhances Xcom.\n\n\nFigure 2:  With XDI, report can be transferred using dataset\ntransfer function.\n\n\nOf course, we don't want spend around 5 weeks to codes 14\nassembly modules and 33 macros only for one client.  That why XDI\nwas made as a parameterized program to void local dependency with\ncertain customer as much as possible.  It does not also dependent\nto Dispatch or any other program except Xcom.\n\n\n\n\nPart-I\n\nSYSTEM DOCUMENTATION\n\n\n\nChapter 2\nLOGIC DESIGN And ARCHITECTURE\n\n\nEven though XDI is stand for \"Xcom Dispatch Interface\", it is\nactually nothing to do with Dispatch.  XDI takes input (SYSOUT\ndatasets) from JES spool with certain criterion.  Sysout then\nconverted into flat dataset with 3 possible formats, original VBA\nor VBM format, Dispatch format or Windows format.  XDI then\ncreate Xcom-batch-job with LFILE (local file) parameter point to\nthat flat dataset, and submit it to Xcom server.   Regarding the\nabove mechanism, XDI is more as an Xcom Supplement instead of\nXcom Dispatch Interface.  Its main function is to support Xcom\ntransfer report using advantaged rule of which usually used for\nflat file.\n\nFigure 3:  XDI is an Xcom Supplement to Transfer Report using\nFlat File Rule.\n\n\nXDI is also parameterized program.  Sysout files selection\ncriterion, spool class for work, Xcom output format, Xcom job I/O\nconfiguration, recipient table and recipient to LU dictionary are\nspecified in XDI parameter library and can be modified any time\ninteractively.\n\n2.1.  Configuration\n\nAs mentioned in chapter 1, XDI was made as common as possible.\nTo void such local dependency with certain user, it was designed\nas a parameterized program like Xcom, Dispatch and so forth.  As\nan independent program, although it is an Xcom supplement,\ninstallation of XDI needs not any changes in Xcom site.\n\n\n\nFigure 4:  XDI is a parameterized independent program.\n\n\nCurrently, XDI supports Xcom for MVS only, which communicates\nwith Xcom in Windows, Windows NT or DOS.  It possible to be\ndeveloped to support Xcom for VM system.\n\n\nXDI Support in VM System\n\nTo make XDI run under VM system, main module DERXDI and\nsubroutine DERXDS and DERXIO must be redeveloped.  IEFSSREQ call\nmechanism must be changed to hypervisor call of diagnose code\nX'014'.  Since there is no JES in VM system, Xcom job submission\nwill no longer needed. It should be changed to subtask or thread\nto drive Xcom call mechanism.\n\nIf GCS is chosen as an O/S shell for XDI, all other modules no\nneed to be changed, since GCS is a set of MVS functions.\nIteration can still be driven by ECB mechanism.\n\nIf CMS is chosen as an O/S shell for XDI, SVC 99 (dynamic\nallocation) will no longer needed.  Iteration mechanism strongly\nrecommended using WAKEUP module instead of deal with FLIH.\nHence, DERXDI module can be written in Rexx language, which much\nsimpler.  All other XDI modules that call SVC 99 deal with QSAM\nmacros or INTRDR need to be modified.\n\n\n\n2.2.  Functions\n\nAs mentioned above, the main function of XDI is enhancing Xcom\napplication in MVS/ESA or OS/390 environment, especially for\nreport transfer function, as shown in Table 1.  Even, operator\ncan transfer dataset directly from MVS console using XDI command;\n\nF XDI,SF,recipid,name,dataset_name\n\n\nTable 1:  Main function of XDI enhances Xcom report/spool\ntransfer function\n\nXcom function\n\nWithout XDI                        With XDI\nFile transfer\nstandard                           standard\n\nReport/Spool transfer\nstandard                           enhanced\n\nJob transfer\nstandard                           standard\n\n\n\nTable 2:  Advantages of XDI for Xcom application\n\nReport/Spool Transfer Function\n\nWithout XDI                                  With XDI\n\nSpool-to-spool\nYes                                          Yes\n\nKeep report after print at remote spool\nYes                                          Yes\n\nKeep report as a file at remote system\nNeed PPS                                     Yes\n\nRouting tag support for Report distribution\nNo                                           Yes\n\nCheck point recovery support\nNo                                           Yes\n\nDirect printing at remote system\nYes                                          Yes\n\nI/O overhead in local system\nStandard                                     Yes\n\nPlug and play with CA-Dispatch(tm)\nNo                                           Yes\n\nPlug and play with Control-D(tm)\nNo                                           Yes\n\n\n\n\n\nBased on the above evaluation (see Table 2), advantage of XDI is\nnot only make Xcom report transfer function easier and keep\nconsistent to JES, Dispatch and any other MVS application\ncultures and conventions. It also enhance Xcom capabilities to\nsupport report distribution instead of just point-to-point report\ntransfer.\n\n\n\n2.3.  Operation Logic\n\nXDI is an external writer program with some special functions\n  added, i.e.:\n\n? Maintain set of Xcom SYSIN01 parameter-files in PDS called\n  parameter library.\n\n? Maintain JES destination table.\n\n? Maintain correlation each entry (destination name) of\n  destination table with parameter-files.\n\n? Generate Xcom-job and submit internally at the end of each\n  spool sysout process.\n\n\n2.3.1.  Operating Environment\n\nSince XDI uses subsystem request code of 01, logic flow is\nsynchronous with no lock held as a single task program.  XDI runs\nin supervisor state with key 0, and its address space must acts\nas primary, secondary and home space at the same time.  To fulfil\nall of the above requirements, XDI must be installed in APF\nlibrary with authorization code of 1.\n\nTo optimize its performance, XDI runs with addressing mode of\n31-bit.  But, some of 14 XDI modules stay below 16MB line due to\nDCB limitation.   Main entry linkage uses a standard linkage\nconvention.  But, again, to achieve better performance and easier\ncoding, linkage method between XDI main module and subroutine\nmodules, and inter subroutine modules use ESA linkage stacked\nstate features.  Therefore, XDI will only compatible to MVS/ESA\n(under S/390) or any OS/390.  To operate XDI in MVS/ESA under\nESA/370, strongly recommended to modify each @PROLOG in each\nmodule and re-sysgen them.\n\n\n\n2.3.2.  Steps of Work\n\nUpon start up, XDI contacts to JES to select certain sysout files\nafter initialization completed.  It then enters to wait state\nuntil a selected sysout file occurs or such MODIFY (or F) command\nreceived.  Sysout file selection performed based on spool class\nspecified in XDISYSnn parameter and list of DESTid specified in\nXDITABnn parameter.  Upon occurrence of selected sysout file, JES\nthen POST an ECB across XDI address space.  XDI wakes up and\nbegins to works with the following steps:\n\n1. Evaluate sysout dataset name, writer name, DESTid, logical\nrecord length (lrecl) and record format (recfm).  If it doesn't\nconfirmed with parameter, then purge it and back to wait state.\n\n2. Set writer name to \"NONAME\" if it doesn't exist.\n\n3. Allocate dynamically sysout dataset into given DD name as an\ninput file with locate transmittal mode.\n\n4. Allocate a new flat dataset into LCLDS01 DD name as an output\nfile with dataset name XDI.recipid.rptname.Dyyddd.Thhmmsst.Cnnnn\nwhere recipid is DESTid and rptname is writer name.\n\n5. Get a logical record from sysout file and put it into LCLDS01\n  file until EOF with the following rule;\n\n? If PCFORM=WINDOWS specified in XDISYSnn parameter, manipulates\n  all space controls as what printer does and change all channel\n  skip controls into ASCII page_break control character.\n\n? If PCFORM=DISPATCH specified in XDISYSnn parameter, manipulates\n  all space controls as what printer does and change all channel\n  skip controls with page header as what Dispatch/RTC does.\n\n? If PCFORM=S/390 specified in XDISYSnn parameter, no\n  manipulation perform.  Just copy sysout file into LCLDS01 file as\n  is.\n\n6. Close and deallocate sysout and LCLDS01 files upon EOF.\n   Sysout file then purged or LEAVEd depend on HOLD status of JES\n   OUTCLASS definition.\n\n7. Creates Xcom job with the following rule;\n\n? Job name is XCrecipid.\n\n? Job parameter is taken from XPARM=('Xcom job parameter')\n  specified in XDISYSnn parameter.\n\n? Xcom LCLDS01 DD card is built with disposition taken from\n  string specified on XDISP= keyword in XDISYSnn parameter and DSN\n  of CADS.XCOM.recipid.rptname.Dyyddd.Thhmmsst.Cnnn.\n\n? List of DD cards are taken from string specified on CAILIB=,\n  STEPLIB=, GLOBLIB=, RESTLIB= and PARMLIB= keywords in XDISYSnn\n  parameter.\n\n? Xcom SYSIN01 parameters cards are taken from the content of\n  parmlib member named as recipid (DESTid).\n\n? Insert FILE=d:\\DISPATCH\\recipid\\rptname.x card into Xcom\n  SYSIN01 parameters cards, where d taken from a letter specified\n  on PCDRIVE= keyword in XDISYSnn parameter, recipid is DESTid,\n  rptname is writer name and x is W, D or S depend on PCFORM=\n  specified in XDISYSnn parameter.\n\n8. Submit Xcom job to JES via INTRDR.\n\n9. Ask subsystem interface for next selected sysout file.  Go to\n   step 1 if sysout file found, or enter to wait state until a\n   selected sysout file occurs or such MODIFY (or F) command\n   received.\n\nWriter name can not be captured into SSOB/SSSO control block\nwhile DESTid is used with spool classes as sysout file selection\ncriterions.  In fact, XDI needs writer name to identify report\ncontained in sysout file.  Because of the above subsystem\ninterface request code 01 limitation, XDI uses at least 2 spool\nclasses, one as an input gate class and the other as work class.\n\nInput gate class specified on CLASS= (or CLASSES= for 2 to 8\nclasses) keyword in XDISYSnn parameter.  Work class which also\ncalled requeue class specified on RQCLASS= keyword in XDISYSnn\nparameter.  XDI waits for sysout files in gate classes.  Upon\noccurrence, keeps all SSOB/SSSO information, of course no writer\nname, then transfers sysout file into requeue class.  XDI then\nreexecutes subsystem interface request code 01 without DESTid to\ntakes writer name.  Spool sysout processing completed in the\nrequeue class.\n\n\n2.3.3.  Global Main Logic Flow\n\nComponent       :       XDI\nModule       :       DERXDI\n\n\n\n2.3.4.  I/O Preparation Logic Flow\n\nComponent       :       XIO\nModule       :       DERXIO\n\n\n\n\n\n\nChapter 3\nPROGRAM DOCUMENTATION\n\n\nXDI consist of 12 modules.   Some of them are procedure routines\nwhile some others are control blocks and data areas.  To simplify\ncoding, some certain logic flows were coded as assembly macros.\nXDI source codes are supported by 33 their own macros.\nCurrently, XDI status is version 1, release 0 and modification\nlevel 1.  This mean actually XDI is not released yet.\n\n\n3.1.  XDI Program Modules\n\nThe following list describes each XDI program module\ncomprehensively.\n\nDERXDI - XDI Main Module\n? Module name - DERXDI\n? Module type - procedure\n? Amode 31 and Rmode any\n? Attributes - Reentrant, reusable and authorization code 1\n? Linkage - Conventional\n? Function - Main logic - global iteration.\n\nDERXDP - XDI Parameter Initializer\n? Module name - DERXDP\n? Module type - procedure\n? Amode 31, Rmode any\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Initialize parameters.\n\nDERXIO - XDI I/O Preparation Routine\n? Module name - DERXIO\n? Module type - procedure\n? Amode 31, Rmode 24\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Prepares and performs dynamic\n  allocation/deallocation sysout and output files and open them,\n  and generate and submit Xcom job.\n\nDERXDS - XDI Sysout Requeue Driver Routine\n? Module name - DERXIO\n? Module type - procedure\n? Amode 31, Rmode any\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Transfer sysout file from gate class to requeue\n  class and reevaluates its writer name.\n\nDERXSF - XDI Send File (SF) Command Processor\n? Module name - DERXIO\n? Module type - procedure\n? Amode 31, Rmode any\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Transfer a cataloged dataset to remote system using\n  XDI destination parameters.\n\nDERWTR - XDI Output Writer Routine\n? Module name - DERWTR\n? Module type - procedure\n? Amode 31, Rmode 24\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Create output (LCLDS01) file from standard format\n  sysout.\n\nDERWTB - XDI Output Writer Routine\n? Module name - DERWTB\n? Module type - procedure\n? Amode 31, Rmode 24\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Create output (LCLDS01) file from nonstandard format\n  sysout.\n\nDERWTG - XDI Sysout Destroyer Routine\n? Module name - DERWTG\n? Module type - procedure\n? Amode 31, Rmode 24\n? Attributes - Reentrant, reusable, only loadable and\n  authorization code 0\n? Linkage - ESA stacked state\n? Function - Destroy unexpected sysout files.\n\nDERWSA - XDI Working Storage Area\n? Module name - DERWSA\n? Module type - data area\n? Amode 31, Rmode 24\n? Attributes - Nonexecutable, nonreentrant, reusable, only\n  loadable and authorization code 0\n? Linkage - ESA stacked state\n? Function - Pre formatted data area.\n\nDERWTX - XDI Extended Working Storage Area\n? Module name - DERWTX\n? Module type - data area\n? Amode 31, Rmode 24\n? Attributes - Nonexecutable, nonreentrant, reusable, only\n  loadable and authorization code 0\n? Linkage - ESA stacked state\n? Function - Pre formatted several parameters for SVC 99, system\n  services, I/O services and set of list form MVS macros.\n\nDERDCB - XDI Set of Data Control Blocks\n? Module name - DERDCB\n? Module type - data area\n? Amode 31, Rmode 24\n? Attributes - Nonexecutable, nonreentrant, reusable, only\n  loadable and authorization code 0\n? Linkage - ESA stacked state\n? Function - Set of pre formatted DCBs and DCBEs for all input,\n  output and reference files.\n\nDERMSG - XDI Set of Messages\n? Module name - DERMSG\n? Module type - data area\n? Amode 31, Rmode 24\n? Attributes - Nonexecutable, nonreentrant, reusable, only\n  loadable and authorization code 0\n? Linkage - ESA stacked state\n? Function - Set of pre formatted XDI messages.\n\n3.2.  XDI Macros\n\nXDI program is supported by several macros includes 36 its own\nmacros.   This subchapter describes 36 XDI macros\ncomprehensively.   XDI macros are divided in 2 categories, outer\nand inner macros.   All of them are not applicable for users,\nexcept macro DERWTX that is used for construct WTX configuration\nmodule.\n\n\n3.2.1.  XDI Outer Macros\n\nXDI outer macros always prefixed by an '@' sign.   These are\ncoded directly in XDI source program modules.  Their name\nnormally acronym represents their function.   XDI 1.0.1 source\ncodes package consists of 16 outer macros.\n\n@AMODE Macro - Switch Addressing Mode\n? Macro name - @AMODE\n? Macro type - routine\n? Registers used - R15\n? Function - Switch addressing mode.\n? Syntax -\n@AMODE [24|31]\n\n@DYNAMIC Macro - Dynamic Data Allocation/Deallocation\n? Macro name - @DYNAMIC\n? Macro type - Data definition and Routine\n? Registers used - R0, R1 and R15\n? Function - Builds SVC 99 parameters and executes it to perform\n  dynamic data allocation/deallocation.\n? Syntax -\n@DYNAMIC [ALLOC|DEALLOC|UPDATE|DATA],\nLOC=[*|base],\nDSN=Dataset-name,\nDD=DDname,\nGETDD=RX-type-address,\nCLASS=Sysout-spool-class,\nNOHOLD=[YES|NO],\nMEMBER=PDS-member-name,\nDISP=([OLD|NEW|MOD|SHR],[CATLG|UNCATLG|KEEP|DELETE]),\nCDISP=[CATLG|UNCATLG|KEEP|DELETE],\nSPACE=([CYL|TRK|blksz],(prim[,sec[,dir ]])[,RLSE]),\nVOLSER=Volume-serial-number,\nUNIT=Volume-unit-name,\nSYSOUT=[YES|NO],\nFREE=[YES|NO],\nCOPIES=Sysout-number-of-copies,\nLABEL=[NL|SL|NSL|SUL|BLP|LTM|AL|AUL],\nEXPDT=Expiry-date,\nRETPD=Retention-day,\nDUMMY=[YES|NO],\nBLKSIZE=DCB-block-size,\nFUNC=[I],\nFORM=Sysout-form-name,\nLRECL=DCB-logical-record-length,\nPREFIX=1-to-2-byte-unique-prefix,\nDCB=DCB-reference-DSN,\nRECFM=[A|M|S|F|FB|FBA|FBM|U|V|VB|VBA|VBM],\nDSORG=[DA|DAU|PO|POU|PS|PSU]\nSSREQ=[JES2|JES3|Susystem-name],\nDYNALLC=[YES|NO],\nEXTRB=[YES|NO],\nRECBUF=[YES|NO],\nTOLFAIL=Tolerable-error-code,\nERRMSG=[YES|NO|WTO],\nTYPE=[CSECT|DSECT|DATA|COM]\n\n@EDITDSN Macro - Edit Dataset Name\n? Macro name - @EDITDSN\n? Macro type - routine\n? Registers used - R0,R1 and R15\n? Function - Edit dataset name to represent recipient-ID, report\n  name, date, time and sequent number.\n? Syntax -\n@EDITDSN DSN=RX-type-address-of-result,\nRCPID=RX-type-address-of-8byte-recipient-id,\nRPTNAME=RX-type-address-of-8byte-report-name,\nDSHLQ=9byte-high-level-qualifier\n\n@EDITHDR Macro - Edit Dispatch/PC-formatted Report Page Header\n? Macro name - @EDITHDR\n? Macro type - routine\n? Registers used - R0,R1 and R15\n? Function - Edit page header for CA-Dispatch/PC-formatted\n  report-text file.\n? Syntax -\n@EDITHDR [EXEC|UPDATE],\nCODE=9byte-flag-code,\nRCPID=RX-type-address-of-8byte-recipient-id,\nRPTNAME=RX-type-address-of-8byte-report-name,\nPREFIX=2byte-label-prefix\n\n@EDITTOD Macro - Obtain and Edit TOD Date and Time\n? Macro name - @EDITTOD\n? Macro type - routine\n? Registers used - R0,R1 and R15\n? Function - Obtain calendar TOD date and time and edit them in\n  universal or Julian format or both.\n? Syntax -\n@EDITTOD FORMAT=[U|J|BOTH]\n\n@EXIT Macro - Module Section Exit Routine\n? Macro name - @EXIT\n? Macro type - routine\n? Registers used - All.\n? Function - Module section level exit routine.\n? Syntax -\n@EXIT KEEPRC\n\n@FLATDS Macro - Define Flat Dataset File\n? Macro name - @FLATDS\n? Macro type - Data definition.\n? Registers used - None.\n? Function - Build data definition consists of full set of SVC 99\n  parameters to allocate and deallocate flat dataset.\n? Syntax -\n@FLATDS BLKSIZE=[6233|Block-size],\nLRECL=[150|lrec-length],\nSPACE=([CYL|TRK|blk],(prim[,sec])[,RLSE]),\nVOLUNIT=Volume-unit-name,\nDDNAME=DD-name,\nABNDISP=[KEEP|DELETE]\n\n@MESSAGE Macro - Issue XDI Variable Message\n? Macro name - @MESSAGE\n? Macro type - Routine.\n? Registers used - R0, R1 and R15.\n? Function - Build dynamic XDI structured message text from\n  several variables and issue MVS WTO macro.\n? Syntax -\n@MESSAGE [INFO|WARNING|ERROR],\nOPER=[SVC99|SSREQ|IO|FIND|SHOW|LIST],\nTYPE=[Depend-on-OPER],\nOBJECT=[Depend-on-TYPE-of-OPER],\nOPCODE=[B|Any-assembly-branching-opcode],\nROUTCDE=[Valid-WTO-route-codes],\nTEXT=[Message-text],\nRC=[Register-contained-return-code],\nMF=[Valid-WTO-MF-operand],\nEXIT=[RX-type-address|(Register)]\n\n@PROLOG Macro - Module Entry Prolog\n? Macro name - @PROLOG\n? Macro type - Routine.\n? Registers used - All.\n? Function - Build program module entry prolog routine.\n? Syntax -\n@PROLOG ESA=[390|370|NO],\nAMODE=[24|31|ANY],\nRMODE=[24|ANY],\nRENT=[YES|NO],\nSVASIZE=Save-area-size,\nBREG=[R12|List-of-1-to-3-register]\n\n@SYSOUT Macro - Define Sysout File\n? Macro name - @SYSOUT\n? Macro type - Data definition.\n? Registers used - None.\n? Function - Build data definition consists of full set of SVC 99\n  parameters to allocate and deallocate sysout dataset.\n? Syntax -\n@SYSOUT JESNAME=JES-name,\nDDNAME=DD-name\n\n@VDATA Macro - Build Globally Declared Data\n? Macro name - @VDATA\n? Macro type - Data definition.\n? Registers used - None.\n? Function - Build globally declared data definition.\n? Syntax -\n@VDATA\n\n\n@VGLOBAL Macro - Declare Global Variables\n? Macro name - @VGLOBAL\n? Macro type - Data definition.\n? Registers used - None.\n? Function - Build globally declared variables data definition.\n? Syntax -\n@VGLOBAL\n\n@WTO Macro - Issue XDI Fixed Message\n? Macro name - @WTO\n? Macro type - Routine.\n? Registers used - R0, R1 and R15.\n? Function - Build static XDI structured message and issue it\n  using MVS WTO macro.\n? Syntax -\n@WTO CODE=3digit-message-code-with-sign,\nTFLAGS=RX-type-address-of-1byte-flags,\nTBIT=1byte-flags-expression,\nREG=[R2|Work-register],\nPREFIX=RX-type-address-of-6byte-msgcode-prefix,\nTRACE=[CHECK|ALWAYS]\n\n@XCOMJOB Macro - Build or Update Xcom Job\n? Macro name - @XCOMJOB\n? Macro type - Routine and data definition.\n? Registers used - R0, R1 and R15.\n? Function - Build or update internal Xcom job JCL.\n? Syntax -\nBuild data definition -\n@XCOMJOB [DSECT|CSECT|COM|DATA],\nDISP=([OLD|NEW|MOD|SHR],[CATLG,UNCATLG|KEEP|DELETE]),\nCLASS=Any-valid-job-class,\nMCLASS=Any-valid-sysout-class,\nMLEVEL=([0|1][,0|,1])\nPREFIX=[XC|2byte-label-prefix]\nPCDRIVE=1byte-PC-drive-letter,\nSTEPLIB=44byte-steplib-DSN,\nCAILIB=44byte-CA-loadlib-DSN,\nCNTLLIB=44byte-XCOMCNTL-DSN,\nGLOBLIB=44byte-XCOMGLOB-DSN,\nRESTLIB=44byte-XCOMREST-DSN\n\nUpdate data definition -\n@XCOMJOB [EXEC|UPDATE],\nBREG=Register,\nLOC=[*|any-label|(register)],\nRCPID=RX-type-address-of-Recipient-ID,\nRPTNAME=RX-type-address-of-report-name,\nJOBNUM=RX-type-address-of-job-number,\nPREFIX=[XC|2byte-label-prefix]\nPCDRIVE=RX-type-address-of-1byte-PC-drive-letter,\nSTEPLIB=RX-type-address-of-44byte-steplib-DSN,\nCAILIB=RX-type-address-of-44byte-CA-loadlib-DSN,\nCNTLLIB=RX-type-address-of-44byte-XCOMCNTL-DSN,\nGLOBLIB=RX-type-address-of-44byte-XCOMGLOB-DSN,\nRESTLIB=RX-type-address-of-44byte-XCOMREST-DSN,\nJOBPARM=RX-type-address-of-XPARM-value,\nDSN=RX-type-address-of-44byte-LFILE-DSN,\n\n\n\n3.2.2.  XDI Inner Macros\n\nXDI inner macros are indirect macros.  There are called from\nother XDI macros, normally XDI outer macros.  These are indicated\nby prefix 'DER' in front of their names.  XDI 1.0.1 source codes\npackage consists of 20 inner macros.  Below is a list of XDI\ninner macros and their function description.\n\n? DERCIB - Map of communication interface control block\n? DERDCB - Set of Data control block\n? DERDSPHD - Map of Dispatch page header\n? DEREDTMS - Map of XDI variable message\n? DEREDTRC - Editing routine for decimal RC\n? DERFFREC - Map of VB record of QSAM dataset\n? DERGBLVR - XDI GBLA, GBLB and GBLC source copy book.\n? DERMSG - Set of XDI static messages\n? DERS99AL - Map of SVC 99 parameters for allocation\n? DERS99CH - Final updating routine for SVC 99 parameters\n? DERS99DA - Map of SVC 99 parameters\n? DERS99FR - Map of SVC 99 parameters for deallocation\n? DERS99MD - Intermediate updating routine for SVC 99 parameters\n? DERTABCC - Table of printers CC equates\n? DERTODUF -  Final editing routine for universal TOD format\n? DERTODYF -  Final editing routine for Julian TOD format\n? DERWSA - Map of XDI main work area\n? DERWTX - Map of WTX configuration\n? DERXCJOB - Map of Xcom job JCL.\n\n\n\n\nPart-II\n\nUSER's GUIDE\n\n\n\n\n\nChapter 4\nINSTALLATION\n\n\n\nIn version 1.0.1 there is no such packaging method applied.  To\ninstall XDI, just copy XDI load library and register it as an APF\nlibrary.  Use normal DCB values of load module library to\nallocate XDI load library.  The following is a list of XDI 1.0.1\ninstallation procedure steps;\n\n1. Allocate a new XDI load library i.e.  XDI.LOADLIB\n\n2. Copy all XDI load modules into the new XDI load library.\n\n3. Register the XDI load library as an APF library and make it\n   effective.\n\n4. Copy XDI cataloged procedure into certain active procedure\n   library.\n\n5. Customize it as necessary.\n\n6. Allocate a XDI parameter library (of course PDS) i.e.\n   XDI.PARMLIB.\n\n7. Copy 3 samples XDI parameter library member, XDISYS00,\n   XDITAB00 and KCU043.\n\n8. Customize the above 3 samples as necessary.\n\nUpon completion of all above steps, XDI then ready to be started\nup.  Given name of XDI cataloged procedure is XDI.  To start XDI,\nuse START MVS console command as shown below:\n\nS XDI[,START=nn]\n\n? XDI is XDI cataloged procedure name.\n? START=nn is an optional operand where nn is any 2 digits suffix\n  to point to XDISYSnn member of XDI parameter library.\n\nUser can change XDI to any valid procedure name.\n\n\n4.1.  XDI Cataloged Procedure\n\nGiven XDI cataloged procedure is as shown below. Procedure name\nand step name can be any valid name.\n\n//XDI PROC START=00,VER=12\n//XDIEXEC EXEC PGM=DERXDI,REGION=5M,\n//    DYNAMNBR=99,TIME=1440,\n//    PARM='FILE=&START'\n//STEPLIB DD DISP=SHR,DSN=XDI&VER..LOADLIB\n//PARMLIB DD DISP=SHR,DSN=XDI.PARMLIB\n//INTRDR  DD SYSOUT=(A,INTRDR)\n\nBefore started up, user must ensure everything in the right\nplace.  There 4 point must be verified, job parameters, STEPLIB,\nPARMLIB and INTRDR files.\n\n\nJob Parameters\n\nImportant parameters for XDI are PARM, REGION and TIME.  The rest\nare optional.\n\n? PARM parameter must be specified as PARM='FILE=mm' or\n  PARM='FILE=&X'.  If PARM='FILE=nn' specified, XDISYSnn will be\n  selected statically.  If PARM='FILE=&X' specified, XDISYSmm will\n  be selected dynamically depend on value carried in variable &X.\n\n? Specify REGION=5M is recommended.  Do not specify REGION too\n  small or too high.\n\n? Specify TIME=1440 or TIME=NOLIMIT is mandatory to void abend\n  S522 caused by UJV parameter of SMF.\n\n? DYNAMNBR is optional.  Since dynamic allocation/deallocation\n  (SVC 99) intensively used in XDI, specify DYNAMNBR greater than\n  the default value will be better.\n\n\nSTEPLIB File\n\nIf XDI load library is concatenated in the LNKLST system\nparameter, STEPLIB file is then not necessarily to be specified.\nBut it will become mandatory if XDI load library is not\nconcatenated in LNKLST.  Since XDI is a single address space and\nall its load modules are reusable, specifies XDI in the LNKLST\nwould not improve system performance.   Does not matter how XDI\nload library is registered as linked library, it must be a valid\nAPF library.\n\n\nPARMLIB File\n\nPARMLIB file is mandatory.  It must point to PDS of which\ncontains XDISYSmm and XDITABnn members as well as all destination\nmembers.\n\n\nINTRDR File\n\nINTRDR is used to submit Xcom job.  Therefore, file INTRDR must\npoint to SYSOUT with writer name INTRDR.\n\n\n\n4.2.  XDI Libraries\n\nThe standard XDI 1.0.1 installation material package consists of\n6 libraries. All are PDS as shown bellow;\n\n1. XDI.PARMLIB contains samples of XDISYS00, XDITAB00 and member\n   related to XDITAB00.\n2. XDI.LOADLIB contains XDI load modules.\n3. XDI.SRCLIB contains customizable XDI source codes modules.\n4. XDI.JCLLIB contains JCL for maintenance and sysgen.\n5. XDI.V1R0M1.MACLIB contains 33 XDI 1.0.1 macros.\n6. XDI.V1R0M1.SRCLIB contains 12 XDI 1.0.1 source codes modules.\n\n\n4.3.  JCLs for Sysgen and Maintenance\n\nThe most important library regarding the title of this chapter is\nXDI.JCLLIB. It contains several important catalog procedures and\njobs JCL, i.e.;\n\n? ASSEMBLE - General assembling and link-editing procedure\n? JXDIGEN - XDI system generation (sysgen) job\n? JWTX - WTX assembling and link-editing job\n\n\n4.3.1.  ASSEMBLE Procedure\n\nASSEMBLE JCL is a general purpose assembling and link-editing\nprocedure.  It is actually applicable for any program\ndevelopment.   It must be installed (copied) in any valid\nprocedure library before used.  Update its as necessary to meet\nlocal environment.  The following JCL source code is hard copy of\nASSEMBLE cataloged procedure.\n\n//ASSEMBLE PROC MBR=,\n//          PROG=ASMA90,\n//          NAME=,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='REUS',\n//          SRCLIB='CAI.LCLMODS',\n//          LNKLIB='CAI.CAILIB',\n//          MACLIB='SYS1.MACLIB',\n//          SYSLIB='SYS1.MACLIB',\n//          MODGEN='SYS1.MODGEN',\n//          JESMAC='SYS1.HASPSRC',\n//          SOUTC=X\n//*\n//*   +------------+\n//*   \u00a6 ASSEMBLING \u00a6\n//*   +------------+\n//ASM      EXEC  PGM=&PROG,\n//            PARM=('&APARM')\n//SYSLIB   DD  DSN=&MACLIB,DISP=SHR,DCB=BLKSIZE=20000\n//         DD  DSN=&SYSLIB,DISP=SHR\n//         DD  DSN=&MODGEN,DISP=SHR\n//         DD  DSN=&JESMAC,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB(&MBR),DISP=SHR\n//SYSPRINT DD  SYSOUT=(&SOUTC,A&MBR)\n//SYSPUNCH DD  UNIT=SYSALLDA,DISP=(,PASS),\n//             SPACE=(6080,(50,20),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(1,1))\n//*\n//*   +--------------+\n//*   \u00a6 LINK-EDITING \u00a6\n//*   +--------------+\n//LKED     EXEC  PGM=HEWL,\n//             PARM=('XREF,LIST','&LPARM'),\n//             COND=((4,LT,ASM))\n//SYSLIB   DD  DSN=&LNKLIB,DISP=(SHR),\n//             DCB=BLKSIZE=20000\n//SYSLIN   DD  DSN=*.ASM.SYSPUNCH,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=&LNKLIB(&NAME),DISP=(SHR)\n//SYSPRINT DD  SYSOUT=(&SOUTC,L&NAME)\n//\n\n\n\n4.3.2.  JXDIGEN Job\n\nJXDIGEN JCL is an assembling and link-editing job to generate XDI\nsystem.  It uses ASSEMBLE procedure above in each step.  JXDIGEN\nconsists of 12 steps.  Each step responsible to generate one XDI\nmodule, which is independent each other.  Even though it is\nprovided in the installation package, JXDIGEN is not belongs to\nusers.  JXDIGEN job used by trained or authorized people only to\nregenerate all modules of XDI system if it is really needed.  The\nfollowing JCL source code is hard copy of JXDIGEN job.\n\n//JXDIGEN JOB (XDI00),\n//         'XDI SYSGEN     ',\n//         CLASS=A,\n//         MSGCLASS=X,\n//         NOTIFY=\n//*\n//XDI  EXEC ASSEMBLE,MBR=DERXDI,\n//          NAME=DERXDI,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='LIST,RENT,AC=1',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//XDP  EXEC ASSEMBLE,MBR=DERXDP,\n//          NAME=DERXDP,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//XDS  EXEC ASSEMBLE,MBR=DERXDS,\n//          NAME=DERXDS,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//XWR  EXEC ASSEMBLE,MBR=DERXWR,\n//          NAME=DERXWR,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//COM  EXEC ASSEMBLE,MBR=DERCOM,\n//          NAME=DERCOM,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//XIO  EXEC ASSEMBLE,MBR=DERXIO,\n//          NAME=DERXIO,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//WTR  EXEC ASSEMBLE,MBR=DERWTR,\n//          NAME=DERWTR,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//WTB  EXEC ASSEMBLE,MBR=DERWTB,\n//          NAME=DERWTB,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//WTG  EXEC ASSEMBLE,MBR=DERWTG,\n//          NAME=DERWTG,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//XSF  EXEC ASSEMBLE,MBR=DERXSF,\n//          NAME=DERXSF,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='RENT,OL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//WTX  EXEC ASSEMBLE,MBR=DERWTX,\n//          NAME=DERWTX,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',\n//          SRCLIB='XDI.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//DCB  EXEC ASSEMBLE,MBR=DERDCB,\n//          NAME=DERDCB,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//MSG  EXEC ASSEMBLE,MBR=DERMSG,\n//          NAME=DERMSG,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//*\n//WSA  EXEC ASSEMBLE,MBR=DERWSA,\n//          NAME=DERWSA,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',\n//          SRCLIB='XDI.V1R0M1.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//\n\n4.3.3.  JWTX Job\n\nJWTX JCL is an assembling and link-editing job to regenerate WTX\nmodule.  It is provided in installation package in case users\nneed to customize WTX.   Do not touch this job unless known by\nauthorized engineer.   Detail of JWTX job can be found in chapter\n3. The following JCL source code is hard copy of JWTX job.\n\n//JWTX EXEC ASSEMBLE,MBR=DERWTX,\n//          NAME=DERWTX,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',\n//          SRCLIB='XDI.SRCLIB',\n//          LNKLIB='XDI.LOADLIB',\n//          MACLIB='XDI.V1R0M1.MACLIB'\n//\n\n\n\nChapter 5\nCUSTOMIZATION\n\n\nThis chapter explains how to customize XDI program.  In\nXDI.SRCLIB there is a source module named DERWTX and called WTX.\nWTX consists of defaults and permanent static parameters values.\nGiven standard WTX shown as follow.\n\n        DERWTX TYPE=CSECT,                                            +\n              AMODE=31,RMODE=24,       Addressing & Residency modes   +\n              JES=JES2,                Job entry subsystem            +\n              BLKSIZE=6233,            Flat DS - block size           +\n              LRECL=150,                       - logical record length+\n              UNIT=3390,                       - eligible vol unit    +\n              SPACE=(CYL,(50,8),RLSE),         - space                +\n              ABNDISP=KEEP,                    - disp. if abend       +\n              XJCLASS=T,               XCOM Job - class               +\n              XMCLASS=T,                        - message class       +\n              XMLEVEL=(1,1),                    - message level       +\n              XDISP=(OLD,KEEP),                 - LFILE disposition   +\n              DSPCODE=YYEDSPC10,                - Dispatch flags code +\n              PCROOT=DISPATCH                   - PC root dir. name\n\nSince all variable parameters can be changed dynamically via\nXDISYS member or console command, customize WTX is not\nrecommended unless very critical.  Consult to authorized support\nengineer if necessary. Make sure backup has been properly done\nbefore make any changes.\n\n\n\n5.1. WTX Parameters\n\nThere are 12 WTX parameters that might be modified by users to\nmeet their system environment.  Since DERWTX is an assembly\nmacro, it must follow the rule of related Assembler.  Normally,\nkeyword started in column 16 and delimited by comma.\nContinuation must be in column 72.\n\n\n5.1.1.  TYPE, AMODE and RMODE\n\nDo not change TYPE=CSECT, AMODE=31 and RMODE=24 parameters\nwithout consulting them to the XDI author (Deru Sudibyo) or any\nother engineer who assigned by the author.\n\n\n5.1.2.  JES=Primary-JES-name\n\nJES=JES2 specifies that primary JES name is JES2.   Users may\nchange this parameter to their own primary-JES-name.\n\n\n5.1.3.  Flat File (Transition File) Parameters\n\nWTX consist of 5 flat file (transition file) parameters, i.e.;\n\n? BLKSIZE=6233,\n? LRECL=150,\n? UNIT=3390,\n? SPACE=(CYL,(50,8),RLSE),\n? ABNDISP=KEEP,\n\nThe first four are DCB parameters to construct transition flat\nfile.  Since these are DCB values, users must understand DCB very\nwell before modify them.  Do not forget to follow assembly macro\nrules.  Mistaken made on these values will result unpredictable\nerror during operation.\n\nThe last is conditional disposition will be used by system if XDI\nabend.\n\n\n5.1.4.  Xcom Job JCL Parameters\n\nWTX consist of 6 Xcom job parameters, i.e.;\n\n? XJCLASS=T,\n? XMCLASS=T,\n? XMLEVEL=(1,1),\n? XDISP=(OLD,KEEP),\n? DSPCODE=YYEDSPC10,\n? PCROOT=DISPATCH\n\nThe first three are job card parameters used by generated Xcom\njob.  XJCLASS is job CLASS, XMCLASS is MSGCLASS and XMLEVEL is\nMSGLEVEL.  Next is XDISP, disposition used in DD card of LCLDS01.\nUsers must familiar JCL very well before modify them. Do not\nforget to follow assembly macro rules.\n\nThe fifth is DSPCODE with default value YYEDSC10.  This parameter\napplicable only if PCFORM=DISPATCH is specified in XDISYSmm\nmember of XDI parameter library.    Specified DSPCODE value will\nbe written in header of each page of Dispatch formatted text.\nThe last is PCROOT with default value DISPATCH.  It will be used\nas targeted root folder name of remote DOS or Windows system.\nPCROOT value must be a valid 8 characters DOS or Windows folder\nname.\n\n\n\n5.2.  Applying WTX Changes\n\nTo apply the changes of WTX, users must follow the following steps.\n\n? Stop XDI\n? Backup all XDI libraries\n? Submit JWTX job (in XDI.JCLIB)\n? Make sure there is no error or warning message\n? Restore all XDI libraries if necessary\n? Redo the above steps if necessary\n? Restart XDI.\n\n\n\n\n\nChapter 6\nXDI PARAMETERS\n\n\nXDI is a parameterized program.  All parameters must be filed in\npartitioned dataset (PDS) called XDI parameter library and must\nbe allocated in XDI address space with DD name PARMLIB.  Standard\ninstallation material provides an XDI parameter library named\nXDI.PARMLIB.  All members in XDI.PARMLIB are samples.  These are\nnot applicable for users and must be customized to achieve user's\nneeds.   This chapter explains all parameters in detail.\n\n\n6.1.  XDISYSmm - XDI System Parameter\n\nXDISYSmm is placed as a member of XDI parameter library (PARMLIB\nPDS) with member name of XDISYSmm, where mm is any 2 characters\nor numbers.  It will be read first during XDI system\ninitialization.  An XDISYSmm is selected based on mm pointed by\nFILE= keyword of job parameter on exec card of XDI cataloged\nprocedure.\n\n\n6.1.1.  Syntax and Rules\n\nAll parameters are specified as values of their keywords.  Each\ncard of XDISYS valid only for a pair of keyword and its value,\nleft justified with no space, starting at column 1 and ended at\nleast with a blank.    Anything specified after blank will be\nassumed as remarks.   A card with blank or asterisk ('*') at\ncolumn 1 will be ignored.   Currently XDI 1.0.1 supports 16\nparameters;\n\n? CLASS=Class-list\n? RQCLASS=Class\n? PCFORM=[WINDOWS|DISPATCH|S/390]\n? TRACE=[ON|OFF]\n? DISP=[KEEP|DELETE]\n? XDISP=[KEEP|DELETE]\n? HOLD=[PROCESS|IGNORE]\n? LRECL=[NORMAL|ASIS]\n? XPARM=('ACBNAME=XCOM00,TYPE=EXECUTE')\n? TABLE=nn\n? PCDRIVE=PC-drive-letter\n? STEPLIB=DSN-of-step-library\n? CAILIB=DSN-of-CA-load-library\n? PARMLIB=DSN-of-Xcom-control-library\n? RESTLIB=DSN-of-Xcom-restart-library\n? GLOBLIB=DSN-of-Xcom-global-library\n\n\n\n6.1.2.  CLASS=Class-list\n\nClass-list is 1 to 8 alphanumeric characters represent JES output\nclasses.  XDI selects sysout files only for those classes.  If\nmore than one class specified, each class in the list must be\nunique.\n\n\n6.1.3.  RQCLASS=Class\n\nClass is a single alphanumeric character represents a JES output\nclass.  XDI uses this class to execute each selected file from\nthe above class-list.  It then called requeue-class and must not\nbe the same as one of the above class-list.\n\n\n6.1.4.  PCFORM=[WINDOWS|DISPATCH|S/390]\n\nPCFORM=WINDOWS specifies XDI to convert sysout files into Windows\n(or DOS) formatted text before transferred to Xcom.\nPCFORM=DISPATCH specifies XDI to convert sysout files into\nCA-Dispatch/PC formatted text before transferred to Xcom.  The\ndifference between the above 2 PCFORM is only in page break.  The\nWindows formatted text uses an X'0C' as page break control\ncharacter, while Dispatch/PC uses such header.  All ASA or\nmachine carriage control will be interpreted as what any\nmainframe printer does.\n\nPCFORM=S/390 specifies XDI need not any conversion.  Sysout files\nwill be transferred as their original mainframe format. This\nPCFORM useful for mainframe to mainframe via PC report\ntransmission.\n\n\n6.1.5.  TRACE=[ON|OFF]\n\nTRACE=ON specifies XDI to run in trace mode.  All steps of each\nprocess will be informed to users via console message.  To turn\nit off, change this parameter to TRACE=OFF.\n\n\n6.1.6.  DISP= and HOLD= are not Supported yet\n\n\n6.1.7.  XDISP=[KEEP|DELETE]\n\nXDISP=KEEP specifies XDI to generate Xcom job with LCLDS01 file\ndisposition DISP=(OLD,KEEP) to retain transition flat dataset\nafter transmission performed.   If TYPE=SCHEDULE is stated in\nXPARM parameter, then XDISP=KEEP is required since generated Xcom\njob will end before transmission performed.  The amount of\nretained files will increase all the time and need to be deleted\nto void such space saturation.  Users must take responsibility to\nmaintain all retained transition files.   Otherwise, large amount\nof DASD volumes will be consumed by this operation.\n\nXDISP=DELETE specifies XDI to generate Xcom job with LCLDS01 file\ndisposition DISP=(OLD,DELETE) to purge transition flat file after\ntransmission performed. If TYPE=SCHEDULE is stated in XPARM\nparameter, then XDISP=DELETE will cause transition flat dataset\nlost before transferred, since generated Xcom job will ended\nbefore transmission performed.\n\n\n6.1.8.  LRECL=[NORMAL|ASIS]\n\nLogical record length of sysout files normally about 133 to 180.\nUnfortunately, sometimes certain program such as CA-Dispatch or\nControl-D, produce sysout files with very long logical record\nlength.  LRECL=NORMAL specifies XDI to treat each captured sysout\nfile as a normal sysout.  The very long logical record length\nwill be treated as a block of some normal logical records.\nConversion will follow the rule specified in PCFORM parameter.\n\nLRECL=ASIS specifies XDI to treat each captured sysout file as\nits original form.  Normal sysout files will be converted follow\nPCFORM parameter.  Non-normal sysout files will not be converted,\nbut PCFORM=S/390 assumed.\n\n\n6.1.9.  XPARM=Xcom-job-parameter\n\nXcom-job-parameter is job parameter for generated Xcom job.\nNormally this parameter specifies the most required things, such\nas ACB name and type of job.   XDI will not check this values,\nexcept just substitutes the default internal value of\n('ACBNAME=XCOM00,TYPE=EXECUTE') with this one.\n\nNote, keep in mind, if TYPE=SCHEDULE is specified within the\nstring of XPARM value, XDISP=KEEP is then required.  Otherwise,\nlocal file (LCLDS01 or LFILE) will lost before transmission\nattempted.  XDI does not care to those both values.   Mistaken in\nthis case will no warning at al.\n\n\n6.1.10.  TABLE=nn\n\nValue of 2 characters nn will point to an XDI parameter library\nmember named XDITABnn.  TABLE=nn specifies XDI to load the JES\ndestination list contained in XDITABnn member and build\ndestination directory of which subsystem request iteration based\non. The nn might be 2 any combination of alphabetic and numeric\nwith any order.\n\n\n6.1.11.  PCDRIVE=PC-drive-letter\n\nPC-drive-letter is an alphabetic character used as an address of\nPC disk drive.  This value will be edited into the FILE=\nparameter in SYSIN01 file of generated Xcom job.  For example, if\nPCDRIVE=C, then XDI will edit FILE=C:\\Dispatch\\... in SYSIN01\nfile.\n\n\n6.1.12.  STEPLIB=Steplib-file and CAILIB=Cailib-file\n\nDatasets names specified in both parameters will be used by\ngenerated Xcom job as STEPLIB concatenation.  Steplib-file will\nbe used as STEPLIB base and Cailib-file will be concatenated to\nsteplib-file.  Therefore, Steplib-file must be the name of Xcom\nload library and Cailib-file must be the name of common CA load\nlibrary.\n\n\n6.1.13.  PARMLIB=Parmlib-file\n\nParmlib-file is the name of Xcom control library dataset and used\nby generated Xcom job as XCOMCNTL file.  Normally its name is\nCAI.XCOM.CIN30CTL.\n\n\n6.1.14.  RESTLIB=Restlib-file\n\nRestlib-file is the name of Xcom restart library dataset and used\nby generated Xcom job as XCOMREST file, normally,\nCAI.XCOM.NONQUEUE.RESTART.\n\n\n6.1.15.  GLOBLIB=Globlib-file\n\nGloblib-file is the name of Xcom global library dataset and used\nby generated Xcom job as XCOMGLOB file, normally,\nCAI.XCOM.NONQUEUE.GLOBAL.\n\n\n6.1.16.  Example of XDISYS00\n\nThe following is an example of XDISYS00 member given in the\ninstallation material package.\n\nCLASS=M                     Select class M\nRQCLASS=9                   Requeue to class 9 for execution\nPCFORM=WINDOWS              PC file created in Windows format\nTRACE=OFF                   Disable trace\nDISP=KEEP                   Keep sysout   (not supp. JES2 5.x)\nXDISP=DELETE                Keep flat dataset (in XCOM job)\nHOLD=PROCESS                HOLD sysout selected also (not supp J2 5)\nLRECL=NORMAL                Force to use normal lrecl for XCOM\nXPARM=('ACBNAME=XCOM00,TYPE=EXECUTE')\nTABLE=00                    Point to XDITAB00\nPCDRIVE=C                   PC HDD drive\nSTEPLIB=CAI.XCOM.CAILIB     XCOM Loadlib\nCAILIB=CAI.CAILIB           CA Common (CA90) Loadlib\nPARMLIB=CAI.XCOM.PARMLIB\nRESTLIB=CAI.XCOM.NONQUEUE.RESTART\nGLOBLIB=CAI.XCOM.NONQUEUE.GLOBAL\n\nThe above example may not applicable to certain users.  Users\nmust customize them to achieve their own environment.\n\n\n\n6.2.  XDITABnn - XDI Destination Table\n\nXDITABnn is a member of XDI parameter library. The suffix nn is\nin conjunction to the value of TABLE=nn specified in XDISYSmm\nmember.   It contains a list of several JES destination names.\n\n\n6.2.1.  Syntax and Rules\n\nEach destination name must be a valid JES destination name with 6\ncharacter long and specified in separated XDITABnn card, starting\nat column 1 and left justified.   Any other string at column 9 to\n80 will be ignored.  A card with blank or asterisk at column 1\nwill be ignored as well.  XDI does not check the validity of JES\ndestination name.  Therefore, strongly recommended using 6\nalphanumeric rule to play safe.\n\nBesides, each destination name must represent a name of XDI\nparameter library member called destination member.  Therefore,\ndo not use XDISYS or XDITAB as a destination name to void\nconfusion.\n\n\n6.2.2.  Example of XDITAB00\n\nThe following is an example of XDITAB00 member given in the\ninstallation material package.\n\nKCU043        KC Utama Bogor Sukasari\nKCP086        KC Pembantu Bogor Sartika\nKCP097        KC Pembantu Bogor Cibinong\nKCU044        KC Utama Bandung\n\nThe above example may not applicable to certain users.  Users\nmust customize them to achieve their own environment.\n\n\n\n6.3.  XDI Destination Members\n\nXDI destination members are several members of XDI parameter\nlibrary other than XDISYSmm and XDITABnn, in conjunction to\ndestination names registered in XDITABnn.   Their names must be\nfixed 6 characters of valid JES destination name.   Of course,\nthey also must follow PDS member name rules.\n\n\n6.3.1.  Syntax and Rules\n\nEach XDI destination member must represent complete of Xcom\nparameter set of one file transfer job.  Therefore, Xcom SYSIN01\nparameters syntax and rules applied here.   Some certain Xcom\nparameters such as TYPE=SEND, FILE= and LFILE= will be generated\ninternally by XDI.\n\n\n6.3.2.  Passing MVS or JES Commands\n\nUsers may schedule any MVS or JES commands via XDI destination\nmembers.  Each time the member is read in conjunction to the\ncaptured sysout file, the command would be executed using MGCRE\nSVC call.  Each command must be specified in separated card with\nthe following syntax.\n\n*/CMD <MVS or JES commands>\n\nString of */CMD in column 1 to 5 identifies that string specified\nin column 7 to 72 is a command text and need to be scheduled to\nMVS.  Column 6 must be a blank character.\n\n\n6.3.3.  Override XDISYS Parameters\n\nSome certain parameters in XDISYS member can be overridden for a\ncertain file transfer destination.  XDI parameter must be\nspecified in separated card with the following syntax.\n\n*/XDI <Parameter>\n\nString of */XDI in column 1 to 5 identifies that string specified\nin column 7 to 72 is an XDI parameter and need to be applied to\noverride existing XDISYS value.  Column 6 must be a blank\ncharacter.\n\n\n6.3.4.  Example of XDI Destination Member\n\nThe following is an example of XDI destination member given in\nthe installation material package.   It's named KCU043 and has\nbeen registered in XDITAB00.\n\nTYPE=SEND\nFILETYPE=FILE\nLU=LUB31201\nDROPSESS=NO\nRECSEP=YES\nCODE=EBCDIC\nTRUNCATE=NO\nCOMPRESS=YES\nCKPT=100\nRNOTIFY=LOG\nFILEOPT=REPLACE\nUSERID=XCOM\nPASSWORD=XCOM01\n*/CMD V NET,ID=LUB31201,E\n*/CMD SEND 'XFER TO KCU043 IN PROGRESS',USER=OPERMGR\n*/XDI TRACE=ON\n*/XDI PCFORM=DISPATCH\n\nCards 1 to 13 specify Xcom SYSIN01 parameters.  Card 14 and 15\ncontain MVS commands.  Each time sysout with destination of\nKCU043 processed, XDI then execute MGCRE SVC to issue V\nNET,ID=LUB31201,E and SEND 'XFER TO KCU043 IN\nPROGRESS',USER=OPERMGR commands internally.\n\nCard 16 and 17 XDI override parameters. Each time sysout with\ndestination of KCU043 processed, XDI then uses TRACE=ON and\nPCFORM=DISPATCH instead of one specified in XDISYS00.\n\n\nChapter 7\nXDI COMMANDS\n\n\nUsers or operators can pass XDI command via MVS MODIFY (or F)\ncommand.   The general rule of MODIFY command is\n\nF procname,command\n\nTo avoid confusion, strongly recommended to use XDI as XDI\nprocedure name.   XDI 1.0.1 supports very limited commands, i.e.;\n\n? LIST\n? FILE=mm\n? All XDISYS parameters\n? SF\n\n\n7.1.  LIST Command\n\nLIST command is used to display all current parameter values.\nThe syntax is\n\nF XDI,LIST\n\n\n\n7.2.  FILE=mm Command\n\nFILE command is used to replace all current parameter values with\nnew values from XDISYSmm pointer by operand FILE=mm.  The syntax\nis\n\nF XDI,FILE=mm\n\nXDI will load XDISYSmm and replace all existing parameters with\nrespective values specified in XDISYSmm, regardless the values\nare the same.\n\n\n7.3.  XDISYS Keyword Commands\n\nUsers also can change selected parameters instead of all.  To do\nthis, use one selected keyword as operand of F XDI command.  XDI\nthen check the specified value and replace the existing one if\nthe new one is valid.\n\nFor example, to change the value of PCDRIVE parameter to F, just\nissue the following command;\n\nF XDI,PCDRIVE=F\n\nTo change existing list of destination to new list contained in\nXDITAB01, just issue\n\nF XDI,TABLE=01\n\nNote that destination name can not be changed individually.\nUsers must prepare changes in the new XDITAB or update existing\nXDITAB member, then load it using the above command.\n\n\n7.4.  SF (Send_File) Command\n\nUsing Xcom, users or operators can send file to certain remote\nsystem in batch job or interactively via Xcom ISPF panel.  All\nthe above ways need such certain activities, i.e. logon TSO and\nget Xcom panel or prepare batch job and submit it.  There is no\nway to just issue simple command from console.\n\nWith XDI, users or operators need not any extra activities to\ntransfer dataset file to certain remote system as long as the\ndestination already in effective XDITAB and the remote system is\nPC or PC LAN running DOS or Windows.  The only activity needed is\njust issue;\n\nF XDI,SF,Destname,PCfilename,Datasetname\n\nDestname is a valid registered destination name in the current\nactive XDITAB.  PCfilename is any valid PC file name (with file\ntype if necessary).   Datasetname is the name of dataset to be\ntransferred.  Users or operators do not worry about XDISP effect.\nEven though XDISP=DELETE is in effect, XDI will override its to\nKEEP for this job.\n\n\n\n\n\n\nChapter 8\nXDI MESSAGES\n\n\nXDI provides several messages to help users or operators monitor\nand control it.  All XDI messages using the same format, follow\nVM message format which more systematic than MVS.  XDI message\nformat is\n\nCCCMMMnnnS Ttttttttt ttttttt tttttt tttttttttttt.\n\nWhere\n? CCC is component identifier (currently 'DER')\n? MMM is module identifier from which message issued\n? nnn is message code 001 to 999\n? S is message sign with 4 possible values are I = information,\n  W = warning, E = error or R = need reply\n? Tttttt is message text.\n\nSome of I messages will not appear unless TRACE=ON specified in\nXDISYS parameter.  This chapter explains all XDI messages\ncomprehensively.\n\n\n8.1.  Variable Text Messages\n\nMessages 001 to  061 are called variable text messages.  Their\ntext includes some variables which represent cases or problems\nfound at that time. All I messages are for trace purposes only,\nneed not any action.  Users need only concern to W and E\nmessages.\n\n001I [Command|Parameter] &OBJECT completed\nSystem:  Continue running.\nUser/Operator: None.\n\n002W [Command|Parameter] &OBJECT was not completed, RC=cccc\nSystem:  Continue running with improper operation.\nUser/Operator: Check &OBJECT and RC.  Reissue incomplete command\n   or complete the parameter.   Stop XDI if necessary and restart\n   again. If such message still occurs, call support engineer.\n\n003E [Command|Parameter] &OBJECT error, RC=cccc\nSystem:  Terminated.\nUser/Operator:  Check and analyze &OBJECT and RC.  Correct\n   parameter or call support engineer if necessary.\n011I SVC 99 [ALLOC|DEALLOC] of DSN completed\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n012W SVC 99 [ALLOC|DEALLOC] of DSN was not completed, EC=cc, IC=ii\nSystem:  Continue with improper operation.\nUser/Operator: Check the DSN and its relation with ALLOC or\n   DEALLOC and EC and IC.  Check also volume space configuration,\n   even SMS definition.\n\n013E SVC 99 [ALLOC|DEALLOC] of DSN error, EC=cccc, IC=iiii\nSystem:  Continue with error condition.\nUser/Operator: Stop XDI and check the DSN and its relation with\n   ALLOC or DEALLOC and EC and IC.  Check also volume space\n   configuration, even SMS definition.  Call support engineer if\n   necessary.\n\n021I &TYPE &OBJECT found\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n022W &TYPE &OBJECT can not be found\nSystem:  Continue with improper function.\nUser/Operator: Check &TYPE and &OBJECT and correct them.\n   Refresh XDI.\n\n023E &TYPE &OBJECT error, RC=cccc\nSystem: Terminated or may be continue with improper function.\nUser/Operator: Check &TYPE , &OBJECT and RC, and correct them.\n   Refresh XDI.  Call support engineer if necessary.\n\n031I &TYPE of file &OBJECT completed\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n032W Unable to &TYPE file &OBJECT, RC=cccc\nSystem:  Continue with improper function.\nUser/Operator: Check &TYPE , &OBJECT and RC, and correct them.\n   It might  be related to RACF or ACF2.  Check with security\n   administrator, then refresh XDI.  Call support engineer if\n   necessary.\n\n033E Error encountered during &TYPE file &OBJECT, RC=cccc\nSystem: Terminated or may be continue with 122R.\nUser/Operator: Check &TYPE , &OBJECT and RC, and correct them. If\n   message 122R attempted, reply 'RETRY'.  If message 122R still\n   attempted, reply 'QUIT' and call support engineer.\n\n\n041I &OBJECT found. &TYPE subsystem request completed\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n042W &OBJECT was not found. &TYPE subsystem returned RC=cccc\nSystem:  Continue with message 122R.\nUser/Operator: Check &TYPE , &OBJECT and RC, and correct them. If\n   message 122R attempted, reply 'RETRY'.  If message 122R still\n   attempted, reply 'QUIT' and call support engineer.\n\n043E Request rejected. &TYPE subsystem returned RC=cccc\nSystem:  Continue with message 122R.\nUser/Operator: Check &TYPE , &OBJECT and RC, and correct them.\n   Reply 'QUIT' to message 122R  and call support engineer.\n\n051I &TYPE is &OBJECT and is &TEXT\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n061I &TYPE &OBJECT &TEXT\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n\n\n8.2.  Fixed Text Messages\n\nMessages 100 to  188 are called fixed or static text messages.\nTheir text static represent predefined cases or problems. All I\nmessages are for trace purposes only, need not any action.  As\npreviously explained, users need only concern to W and E\nmessages.\n\n100I XDI initialization in progress.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n101I XDI extension module (WTX) invalid, XDI start up canceled.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n102I XDI start up parameter is being checked.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n\n103I XDI parameter is being checked.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n104I XDI console interface is being initialized.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n105I XDI initialization complete.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n106I XDI-to-JES2 handshaking is being connected.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n107I PARMLIB file is being read.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n108W Invalid XDI parameter ignored.\nSystem:  Continue running.\nUser/Operator: Check XDISYS parameter and correct them,\n   then refresh XDI.\n\n109I XDI parameter accepted and existing one will be overridden.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n110I CMD parameter accepted and has been scheduled.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n111I Attempt to call XIO routine ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n112I WTR processing complete ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n113I Attempt to wait for next sysout arrival.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n\n114E No job found.\nSystem:  Continue running.\nUser/Operator:  Check previous messages including related JES\n   messages.  If found that sysout file deleted before its\n   transferred to requeue class, thus it is operation mistake, then\n   correct the operation procedure.  Otherwise, call support\n   engineer.\n\n115E Invalid search arguments.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply 'QUIT' and call support engineer.\n\n116E Unpredictable error occurs.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply 'QUIT' and call support engineer.\n\n117E Duplicate job name.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply 'QUIT' and call support engineer.\n\n118E Invalid job name.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply 'QUIT' and call support engineer.\n\n119E Invalid destination name.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply 'QUIT' and call support engineer.\n\n120E Authorization failed.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply 'QUIT' and call support engineer.\n\n121E Token map failed.\nSystem:  Continue with message 122R.\nUsers/operators:  Reply \"QUIT\" and check JES and/or MVS\n   maintenance level.  Correct them and call support engineer if\n   necessary.\n\n122R Enter 'W' to WAIT, 'R' to RETRY, or anything else to EXIT.\nSystem:  Enter to wait state.\nUsers/operators:  Check previous messages, whether XDI or\n   MVS/JES, then issue necessary reply.\n\n123W Unknown interaction.\nSystem:  Continue or issue message 122R.\nUsers/operators:  Check command or reply previously issued and\n   reissue the correct one.\n\n\n124I XDI stopped by operator.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n125I Attempt to close all opened datasets.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n126I PARMLIB dataset closed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n127I INTRDR closed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n128I SSI handshaking to JES2 disconnected.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n129I XCOM-to-DISPATCH is being shut down.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n130W DCB inform that sysout format neither ASA nor MCC.\nSystem:  Continue running.\nUser/Operator: Check JES and/or MVS maintenance level.  Call XDI\n   support engineer and IBM engineers if necessary.\n\n131I DCB inform that sysout in ASA format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n132I DCB inform that sysout in MCC format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n133E Wrong format encountered.  Sysout is neither ASA nor MCC format.\nSystem:  Continue running.\nUser/Operator: Check JES and/or MVS maintenance level.  Correct\n   them and call XDI support engineer and IBM engineers if\n   necessary.\n\n134W Sysout then enforced to use S/390 standard format.\nSystem:  Continue running.\nUser/Operator:  Such case occurs depend on LRECL parameter value\n   specified in XDISYS.  To void it, specify LRECL=NORMAL.\n\n135I Parameter is being initialized from parmlib member.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n136I Now reviewing all parameters .....\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n137I Request has been sent to JES2 ....\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n138I JES2 SSI response is being evaluated ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n139W JES2 SSI response is negative, RC > 4 ...\nSystem:  Continue with message 122R.\nUser/Operator: Reply \"QUIT\" and check JES and/or MVS maintenance\n   level.  Correct them and call XDI support engineer as well as IBM\n   engineers if necessary.\n\n140W Unable to access JES2 SSI ECB due to SSREQ error ...\nSystem:  Continue with message 122R.\nUser/Operator: Reply \"QUIT\" and check JES and/or MVS maintenance\n   level.  Correct them and call XDI support engineer as well as IBM\n   engineers if necessary.\n\n141W Command incomplete, execution aborted.\nSystem:  Continue normal.\nUser/Operator:  Check issued command and reissue the correct or\n   complete one.\n\n142I Going to sleep ..., next command should passed via MODIFY.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n143I Intercepting IASXWR00 in progress ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n144E XDI failed, IASXWR00 was not intercepted.\nNo longer applicable.\n\n145E IASXWR00 successfully intercepted.\nNo longer applicable.\n\n146I Now is subsequent call, no reinitialization needed.\nNo longer applicable.\n\n147E Process terminated due to serious error .\nSystem:  Terminated.\nUser/Operator:  Check all previously related messages, whether\n   XDI or MVS or JES.  Determine problems and call support\n   engineer.\n\n148E SYNAD of JES2FILE encountered, I/O terminated before EOF.\nSystem:  Continue with incomplete result.\nUser/Operator:  Check all previously related messages, whether\n   XDI or MVS or JES.  Stop XDI, determine problems and call\n   support engineer.\n\n149W Bad sysout will be dumped out.\nSystem:  Purge sysout and continue normal.\nUser/Operator: No action needed.  It is procedure error.   Do not\n   let unexpected sysout generated in XDI spool classes.\n\n150W Bad sysout has been dumped out.\nSystem:  Purge sysout and continue normal.\nUser/Operator: No action needed.  It is procedure error.   Do not\n   let unexpected sysout generated in XDI spool classes.\n\n151W Bad sysout has been handled using JES2 PURGE command.\nSystem:  Purge sysout and continue normal.\nUser/Operator: No action needed.  It is procedure error.   Do not\n   let unexpected sysout generated in XDI spool classes.\n\n152I Dump process of bad sysout begin ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n153I Dump process of bad sysout finish ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n154I Bad sysout allocation done ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n155I Begin to transfer a block of bad sysout...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n\n156I First block of bad sysout transferred ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n157I Sysout processing begin ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n158I Sysout dataset has been allocated.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n159I Sysout dataset has been opened.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n160I Sysout is being processed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n161I Sysout processing is almost finish.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n162I Sysout dataset has been closed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n163I Sysout dataset has been deallocated.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n164I Sysout processing finish.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n165I Original SSOB captured.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n166I SSSO found contiguous below SSOB.\nNo longer applicable.\n\n167W Process routed to IEFSD087 due to SSOB error.\nNo longer applicable.\n\n168I IEFSSREQ returned RC=0, we can take over all IASXWR00 efforts.\nNo longer applicable.\n\n169I SSOB has been modified for next request..!\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n170I Input accepted, parameter has been updated.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n171I XDI parameter library has been refreshed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n172I Destination table is being refreshed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n173I Destination table has been successfully refreshed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n174I Contact to SSI is being retried.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n175I SSOB is being refreshed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n176W LRECL is more than 6233, process enforced to use standard\n   S/390 format.\nSystem:  Continue normal.\nUser/Operator: No action needed unless users want to force XDI\n   produce normal result.  To do so, update XDISYS parameter with\n   LRECL=NORMAL.\n\n177I I/O processing from sysout to flat dataset is in progress ...\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n178I I/O processing of ASA formatted sysout is using PC/Dispatch\n   format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n179I I/O processing of ASA formatted sysout is using PC/Windows\n   format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n180I I/O processing of MCC formatted sysout is using PC/Dispatch\n   format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n181I I/O processing of MCC formatted sysout is using PC/Windows\n   format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n182I I/O processing of sysout is using S/390 standard format.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n183I I/O processing from sysout to flat dataset is completed.\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n184W No OUTGRP provided, requeue canceled.\nSystem:  Continue with unpredictable result.\nUser/Operator: Stop XDI and check JES and/or MVS maintenance\n   level.  Call XDI support engineer and IBM engineers if\n   necessary.\n\n185W Writer name still not provided, use NONAME.'\nSystem:  Continue normal.\nUser/Operator: No action needed.\n\n186W Requeue does not work, sysout lost.\nSystem:  Continue normal.\nUser/Operator: No action needed.  Such case usually caused by\n   wrong operation procedure.  Correct the procedure if the case\n   does not expected.\n\n187E SSREQ rejected by SSI, sysout lost.\nSystem:  Continue normal.\nUser/Operator: No action needed.  Such case usually caused by\n   wrong operation procedure.  Correct the procedure if the case\n   does not expected.\n\n188E SSREQ rejected by JES, sysout lost.\nSystem:  Continue normal.\nUser/Operator: No action needed.  Such case usually caused by\n   wrong operation procedure.  Correct the procedure if the case\n   does not expected.\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$METRICS": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00(\\x01\\x012O\\x01\\x012O\\x08&\\x00\\x15\\x00\\x13\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T08:26:28", "lines": 21, "newlines": 19, "modlines": 0, "user": "DERU-S"}, "text": "\n  Original XDI packaging description .....\n\n  Member names are described in the IEBCOPY tape jobs:  member $XDIPRT\n\n\n                    XDI Packaged Material Description\n\nNote:  All DCB metrics are based on 3390 DASD architecture\n\n                     DATASET NAME      ORG TRKS REC LRECL BLK   TAPE\n                                                FMT       SIZE\n\nGEN JOB & PROC JCLS  CAI.XDI.JCLLIB    PO  15   FB  80    6160  TAPE 1\nXDI 1.1 LOADLIB      CAI.XDI.LOADLIB   PO  15   U         6144  TAPE 1\nCLIENT'S PARMLIB     CAI.XDI.PARMLIB   PO  15   FB  80    6160  TAPE 1\nXDI 1.2 LOADLIB      CAI.XDI12.LOADLIB PO  11   U         6144  TAPE 1\nXDI 1.2 MACLIB       CAI.XDI12.MACLIB  PO  30   FB  80    6160  TAPE 1\nXDI 1.2 Source lib   CAI.XDI12.SRCLIB  PO  45   FB  80    6160  Tape 2\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$XDIDOC": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x08C\\x0f\\xcd\\x0f\\xcd\\x00\\x00\\xe6\\xd6\\xd9\\xc4\\xf9\\xf7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T08:43:00", "lines": 4045, "newlines": 4045, "modlines": 0, "user": "WORD97"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "$XDIPRT": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x08\\x05\\x03\\xa0\\x03\\xa0\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T08:05:00", "lines": 928, "newlines": 928, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "@FILE536": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00 \\x01\\x19\\x02/\\x01\\x19\\x02/\\x02\\x03\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-22T00:00:00", "modifydate": "2019-01-22T02:03:20", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 536 is from Deru Sudibyo and contains XDI, which is a     *   FILE 536\n//*           combined CA-Xcom and CA-DIspatch solution for Report  *   FILE 536\n//*           Distribution Management.                              *   FILE 536\n//*                                                                 *   FILE 536\n//*           A complete user manual has been included in its       *   FILE 536\n//*           original Word 97 format (you download it to a PC      *   FILE 536\n//*           in BINARY and then you can read it with Word.)        *   FILE 536\n//*           This manual has been virus checked as of the date     *   FILE 536\n//*           of distribution, by the current Norton Anti-Virus     *   FILE 536\n//*           definitions.  See member $XDIDOC.  I have attempted   *   FILE 536\n//*           to convert this documentation to EBCDIC FB-80 text.   *   FILE 536\n//*           See member $MANUAL, for the result.    (S.Golob)      *   FILE 536\n//*                                                                 *   FILE 536\n//*           email:  \"Deru Sudibyo\" <deru.sudibyo@gmail.com>       *   FILE 536\n//*                                                                 *   FILE 536\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUSTOM": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x002\\x01\\x012O\\x01\\x19\\x02/\\x00\\x00\\x00:\\x00:\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2019-01-22T00:00:32", "lines": 58, "newlines": 58, "modlines": 0, "user": "DERU-S"}, "text": "./ ADD NAME=DERWTX   0100-01324-01324-1748-00057-00057-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERWTX   \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Provide skeleton of common module extension\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERWTX &TYPE=CSECT,&AMODE=31,&RMODE=ANY,&PRINT=NOGEN,         +\n               &JES=JES2,&BLKSIZE=6233,&LRECL=150,&UNIT=3390,          +\n               &SPACE=(CYL,(50,5),RLSE),&XJCLASS=T,&XMCLASS=T,         +\n               &XMLEVEL=(1,1),&XDISP=(OLD,KEEP),ABNDISP=KEEP,          +\n               &XDISP=(OLD,KEEP),&DSPCODE=YYEDSPC10,&PCROOT=DISPATCH\n         @XDIREF TYPE=&TYPE,AMODE=&AMODE,RMODE=&RMODE=ANY,PRINT=&PRINT\n         @SYSOUT JESNAME=&JES\n         @FLATDS BLKSIZE=&BLKSIZE,LRECL=&LRECL,SPACE=&SPACE,           +\n               VOLUNIT=&UNIT,ABNDISP=&ABNDISP\n         @XDIREF XJCLASS=&XJCLASS,XMCLASS=&XMCLASS,XMLEVEL=&XMLEVEL,   +\n               XDISP=&XDISP,DSPCODE=&DSPCODE,PCROOT=&PCROOT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACLIB": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00H\\x01\\x012O\\x01\\x13\\t\\x7f\\x12$\\x17\\x0f\\x17\\x0f\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2013-04-07T12:24:48", "lines": 5903, "newlines": 5903, "modlines": 0, "user": "DERU-S"}, "text": "./ ADD NAME=@AMODE   0100-01324-01324-1756-00057-00057-00000-DERU-S\n*\n*                     +--------+\n*     Macro Name   -  \u00a6 @AMODE \u00a6\n*                     +--------+\n*\n*     Function -\n*              Switch AMODE from 24 to 31 or elseways\n*\n*     Syntax -\n*              @AMODE {24/31}\n*\n*     Operation -\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This macro is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n*     +--------+------------+--------+---------------------------+\n*     \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     +--------+------------+--------+---------------------------+\n*\n         MACRO\n&LABEL   @AMODE &BIT\n         AIF   ('&BIT' EQ '31').AMODE31\n         AIF   ('&BIT' EQ '24').AMODE24\n         MNOTE 8,'DERAMD001E Invalid AMODE,.. Use 24 or 31'\n         MEXIT\n.AMODE24 ANOP\n&LABEL   LA    15,*+6              Turn AMODE to 24 bit ...\n         BSM   0,15                  due to GET macro restiction\n         MEXIT\n.AMODE31 ANOP\n&LABEL   LA    15,*+10             Trun AMODE back ...\n         O     15,=X'80000000'       to 31 bit ...\n         BSM   0,15                  to void inconsistency\n         MEND\n./ ADD NAME=@DYNAMIC 0100-01324-01324-1756-00187-00187-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @DYNAMIC \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*           Define data structure, map or memory content of SVC 99\n.*           parameters, or update the existing one.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/16\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*********************************************************************\n         MACRO\n&NAME    @DYNAMIC &OP,             OPERATION - MODIFY, ALLOC, FREE ETC +\n               &FUNCT=,            Function (ALLOC, DEALLOC ect)       +\n               &LOC=,              Memory location (using label)       +\n               &DSN=,              THE DATASET NAME                    +\n               &DD=,               DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &GETDD=,            DDNAME returned after dynalloc      +\n               &CLASS=,            (For sysout only)                   +\n               &NOHOLD=,           (For sysout only)                   +\n               &MEMBER=,           MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &DISP=,             DISP IF NORMAL EOJ, DISP=(OLD,KEEP) +\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         +\n               &SPACE=,            SPACE, I.E SPACE=(TRK,(2,1,80),RLSE)+\n               &VOLSER=,           VOLUME SERIAL #                     +\n               &UNIT=,             UNIT DESIGNATION                    +\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      +\n               &FREE=,             DEALLOCATE AT CLOSE                 +\n               &COPIES=,           COPIES OF YOUR SYSOUT               +\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             +\n               &EXPDT=,            EXPIDATION DATE                     +\n               &RETPD=,            RETENTION PERIOD                    +\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           +\n               &BLKSIZE=,          BLOCK SIZE                          +\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       +\n               &FORM=,             FORM NAME SPECIFICATION.            +\n               &LRECL=,            LOGICAL RECORD LENGTH               +\n               &PREFIX=,           UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   +\n               &RECFM=,            SPECIFY RECORD FORMAT               +\n               &DSORG=,            SPECIFY DATASET ORGANIZATION        +\n               &SSREQ=,            SPECIFY REQUEST TO NAMED SUBSYSTEM  +\n               &DYNALLC=,          SPECIFY REQUEST TO execute SVC 99   +\n               &EXTRB=,            SPECIFY REQUEST S99RBX              +\n               &RECBUF=,           SPECIFY Record buffer               +\n               &TOLFAIL=,          Specify tolairable error            +\n               &ERRMSG=,           Display error msg                   +\n               &TYPE=              SPECIFY TYPE OF MAP\n         COPY  DERGBLVR\n         LCLC  &S99\n&S99     SETC  'NO'\n         AIF   (T'&OP EQ 'O').UPDATE\n         AIF   ('&OP' EQ 'ALLOC').EXEC\n         AIF   ('&OP' EQ 'ALLOCATE').EXEC\n         AIF   ('&OP' EQ 'DEALLOC').EXEC\n         AIF   ('&OP' EQ 'DEALLOCATE').EXEC\n         AIF   ('&OP' EQ 'FREE').EXEC\n         AIF   ('&OP' EQ 'EXEC').EXEC\n         AIF   ('&OP' EQ 'UPDATE').UPDATE\n         AIF   ('&OP' EQ 'MODIFY').UPDATE\n         AIF   ('&OP' EQ 'PARM').PARM\n         AIF   ('&OP' EQ 'PARAMETER').PARM\n         MNOTE 12,'DER008E Unknown operand &OP.'\n         MEXIT\n.PARM    ANOP\n         AIF   (T'&FUNCT EQ 'O').ALLOC\n         AIF   ('&FUNCT' EQ 'ALLOC').ALLOC\n         AIF   ('&FUNCT' EQ 'ALLOCATE').ALLOC\n         AIF   ('&FUNCT' EQ 'FREE').DEALLOC\n         AIF   ('&FUNCT' EQ 'DEALLOC').DEALLOC\n         AIF   ('&FUNCT' EQ 'DEALLOCATE').DEALLOC\n         MNOTE 12,'DER008E Unknown operand FUNCTion=&FUNCT'\n         MEXIT\n.ALLOC   ANOP\n&NAME    DERS99AL DSN=&DSN,                                            +\n               DD=&DD,                                                 +\n               GETDD=&GETDD,                                           +\n               MEMBER=&MEMBER,                                         +\n               DISP=&DISP,                                             +\n               CDISP=&CDISP,                                           +\n               SPACE=&SPACE,                                           +\n               VOLSER=&VOLSER,                                         +\n               UNIT=&UNIT,                                             +\n               SYSOUT=&SYSOUT,                                         +\n               FREE=&FREE,                                             +\n               COPIES=&COPIES,                                         +\n               LABEL=&LABEL,                                           +\n               EXPDT=&EXPDT,                                           +\n               RETPD=&RETPD,                                           +\n               DUMMY=&DUMMY,                                           +\n               BLKSIZE=&BLKSIZE,                                       +\n               LRECL=&LRECL,                                           +\n               RECFM=&RECFM,                                           +\n               DSORG=&DSORG,                                           +\n               FUNC=&FUNC,                                             +\n               FORM=&FORM,                                             +\n               PREFIX=&PREFIX,                                         +\n               DCB=&DCB,                                               +\n               SSREQ=&SSREQ,                                           +\n               EXTRB=&EXTRB,                                           +\n               RECBUF=&RECBUF,                                         +\n               TYPE=&TYPE\n         MEXIT\n.DEALLOC ANOP\n&NAME    DERS99FR DSN=&DSN,                                            +\n               DD=&DD,                                                 +\n               NOHOLD=&NOHOLD,            (For sysout only)            +\n               CLASS=&CLASS,              (For sysout only)            +\n               MEMBER=&MEMBER,                                         +\n               DISP=&DISP,                                             +\n               EXTRB=&EXTRB,                                           +\n               PREFIX=&PREFIX,                                         +\n               TYPE=&TYPE\n         MEXIT\n.EXEC    ANOP\n&S99     SETC  'YES'\n         AGO   .CALLS99\n.UPDATE  AIF   (T'&DYNALLC EQ 'O').CALLS99\n&S99     SETC  '&DYNALLC'\n.CALLS99 ANOP\n&NAME    DERS99MD LOC=&LOC,                                            +\n               DSN=&DSN,                                               +\n               DD=&DD,                                                 +\n               GETDD=&GETDD,                                           +\n               CLASS=&CLASS,              (For sysout only)            +\n               MEMBER=&MEMBER,                                         +\n               DISP=&DISP,                                             +\n               CDISP=&CDISP,                                           +\n               SPACE=&SPACE,                                           +\n               VOLSER=&VOLSER,                                         +\n               UNIT=&UNIT,                                             +\n               SYSOUT=&SYSOUT,                                         +\n               FREE=&FREE,                                             +\n               COPIES=&COPIES,                                         +\n               LABEL=&LABEL,                                           +\n               EXPDT=&EXPDT,                                           +\n               RETPD=&RETPD,                                           +\n               DUMMY=&DUMMY,                                           +\n               BLKSIZE=&BLKSIZE,                                       +\n               LRECL=&LRECL,                                           +\n               RECFM=&RECFM,                                           +\n               DSORG=&DSORG,                                           +\n               FUNC=&FUNC,                                             +\n               FORM=&FORM,                                             +\n               PREFIX=&PREFIX,                                         +\n               DCB=&DCB,                                               +\n               SVC99=&S99,                                             +\n               TOLFAIL=&TOLFAIL,   Specify tolairable error            +\n               ERRMSG=&ERRMSG,                                         +\n               SSREQ=&SSREQ\n         MEND\n./ ADD NAME=@EDITDSN 0100-01324-01324-1756-00169-00169-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @EDITDSN \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @EDITDSN &DSN=,                                               +\n               &RCPID=,                                                +\n               &RPTNAME=,                                              +\n               &DSHLQ=CADS.XCOM,                                       +\n               &DATE=,                                                 +\n               &TIME=\n         COPY  DERGBLVR\n         LCLA  &LHQ,&LDATE,&LTIME\n         LCLC  &GR,&Q,&X\n&X       SETC  '&SYSNDX'\n&LHQ     SETA  K'&DSHLQ\n         AIF   (&LHQ LE 9).OKEY\n&LHQ     SETA  9\n.OKEY    ANOP\n&Q       SETC  ''''\n&LDATE   SETA  8\n&LTIME   SETA  8\n         STM   R0,R15,&DERSVGR\n         MVI   &DERDSN,C' '\n         MVC   &DERDSN+1(L'&DERDSN-1),&DERDSN\n         MVC   &DERDSN.(&LHQ),=C'&DSHLQ'\n         LA    R1,&DERDSN+&LHQ\n         MVI   0(R1),C'.'\n         LA    R1,1(,R1)\n.*\n.A       AIF   (T'&RCPID EQ 'O').ERRRCP\n         AIF   ('&RCPID'(1,1) NE '(').A1\n         MVC   0(8,R1),0&RCPID\n         AGO   .B\n.A1      AIF   ('&RCPID'(1,1) NE '&Q').A2\n         MVC   0(8,R1),=CL8&RCPID\n         AGO   .B\n.A2      ANOP\n         MVC   0(L'&RCPID,R1),&RCPID\n.B       LA    R2,8\nDER&X.A  LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BE    DER&X.B\n         BCT   R2,DER&X.A\nDER&X.B  MVI   0(R1),C'.'\n         LA    R1,1(,R1)\n.*\n.C       AIF   (T'&RPTNAME EQ 'O').ERRRPT\n         AIF   ('&RPTNAME'(1,1) NE '(').C1\n         MVC   0(8,R1),0&RPTNAME\n         AGO   .D\n.C1      AIF   ('&RPTNAME'(1,1) NE '&Q').C2\n         MVC   0(8,R1),=CL8&RPTNAME\n         AGO   .D\n.C2      ANOP\n         MVC   0(L'&RPTNAME,R1),&RPTNAME\n.D       LA    R2,8\nDER&X.C  LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BE    DER&X.D\n         BCT   R2,DER&X.C\nDER&X.D  MVI   0(R1),C'.'\n         LA    R1,1(,R1)\n         AIF   (T'&DATE NE 'O').D1\n&LDATE   SETA  6\n         MVC   0(&LDATE,R1),&DERYDAT+2\n         AGO   .E\n.D1      ANOP\n         AIF   ('&DATE'(1,1) NE '(').D2\n         MVC   0(&LDATE,R1),0&DATE\n         AGO   .E\n.D2      AIF   ('&DATE'(1,1) NE '&Q').D3\n         MVC   0(&LDATE,R1),=CL8&DATE\n         AGO   .E\n.D3      MVC   0(&LDATE,R1),&DATE\n.E       ANOP\n         MVI   0(R1),C'D'\n         LA    R1,&LDATE.(,R1)\n         MVI   0(R1),C'.'\n         LA    R1,1(,R1)\n.*\n         AIF   (T'&TIME NE 'O').E1\n         MVC   0(&LTIME,R1),&DERYTIM\n         AGO   .F\n.E1      AIF   ('&TIME'(1,1) NE '(').E2\n         MVC   0(&LTIME,R1),0&TIME\n         AGO   .F\n.E2      AIF   ('&TIME'(1,1) NE '&Q').E3\n         MVC   0(&LTIME,R1),=CL8&TIME\n         AGO   .F\n.E3      MVC   0(&LTIME,R1),&TIME\n.F       ANOP\n         MVI   0(R1),C'T'\n         LA    R1,&LTIME.(,R1)\n         AIF   (&LDATE NE 6).DSN\n         MVI   0(R1),C'.'\n         LA    R1,1(,R1)\n         MVI   0(R1),C'C'\n         LA    R1,1(,R1)\n         L     R2,&DERDSNC                Dataset counter\n         LA    R2,1(,R2)                  Incremented\n         CH    R2,=H'999'                 Is ctr > 999 ?\n         BNH   *+8                        No, skip resetting\n         LH    R2,=H'1'                   Reset to 1\n         ST    R2,&DERDSNC                Save again\n         CVD   R2,&DERDBWD                Convert to decimal\n         OI    &DERDBWD+7,X'0F'           Normalize sign\n         UNPK  0(3,R1),&DERDBWD           Unpack\n         LA    R1,3(,R1)\n.DSN     ANOP\n         AIF   (T'&DSN NE 'O').DS1\n         LA    R1,&DERDSN\n         L     R2,&DERSVGR+8\n         AGO   .FINAL\n.DS1     AIF   ('&DSN'(1,1) NE '(').DS2\n&GR      SETC  '&DSN(1)'\n         LM    R1,R2,&DERSVGR+4\n         LA    &GR,&DERDSN\n         AGO   .FINAL\n.DS2     MVI   &DSN,C' '\n         MVC   &DSN+1(43),&DSN\n         MVC   &DSN,&DERDSN\n.FINAL   ANOP\n         MEXIT\n.ERRRPT  MNOTE 8,'DER005E Required parameter RPTNAME is missing'\n         MEXIT\n.ERRRCP  MNOTE 8,'DER005E Required parameter RCPID is missing'\n         MEND\n./ ADD NAME=@EDITHDR 0100-01324-01324-1756-00196-00196-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  | @EDITHDR |\n.*                    +----------+\n.*\n.*    Function -\n.*        Build header of 1st and subsequent pages of Dispatch/PC\n.*        format reports.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    | Date   | Engineer   | V.R.L. | Description               |\n.*    +--------+------------+--------+---------------------------+\n.*    |98/02/20| Deru S.    | 1.0.0. | First development         |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @EDITHDR &OP,                                                 +\n               &LOC=*,                                                 +\n               &BREG=2,                                                +\n               &TYPE=,                                                 +\n               &CODE=,                                                 +\n               &DATE=,                                                 +\n               &TIME=,                                                 +\n               &RCPID=,                                                +\n               &RPTNAME=,                                              +\n               &PAGENUM=,                                              +\n               &PAGECNT=,                                              +\n               &LRECL=,                                                +\n               &PREFIX=PH\n         COPY  DERGBLVR\n         LCLB  &USING,&NOTYPE,&NOP\n         LCLC  &BASE,&PBASE,&P,&OPER,&Q,&NPG\n&P       SETC  '&PREFIX'\n&Q       SETC  ''''\n&PBASE   SETC  '&P.DR'\n&BASE    SETC  '&BREG'\n         AIF   (T'&OP NE 'O').A1\n&NOP     SETB  1\n.A1      AIF   (T'&TYPE NE 'O').A2\n&NOTYPE  SETB  1\n.A2      AIF   (&NOP AND &NOTYPE).EXEC\n         AIF   (&NOP).T001\n&OPER    SETC  '&OP'\n.T001    AIF   (&NOTYPE).T002\n&OPER    SETC  '&TYPE'\n.T002    AIF   ((NOT &NOP) AND                                         +\n               (('&OP' EQ 'EXEC') OR                                   +\n               ('&OP' EQ 'UPDATE') OR                                  +\n               ('&OP' EQ 'MODIFY'))).EXEC\n         AIF   (&NOP AND                                               +\n               (('&TYPE' EQ 'EXEC') OR                                 +\n               ('&TYPE' EQ 'UPDATE') OR                                +\n               ('&TYPE' EQ 'MODIFY'))).EXEC\n&NAME    DERDSPHD TYPE=&OPER,                                          +\n               CODE=&CODE,                                             +\n               PREFIX=&PREFIX,                                         +\n               LRECL=&LRECL\n         MEXIT\n.EXEC    ANOP\n&NAME    DS    0H\n         STM   R0,R3,&DERSVGR\n         AIF   ('&LOC' EQ '0').START\n         AIF   ('&LOC' EQ '*').START\n         AIF   ('&LOC'(1,1) EQ '(').LOCREG\n&PBASE   SETC  '&LOC'\n         AGO   .USING\n.LOCREG  ANOP\n&BASE    SETC  '&LOC'\n.USING   ANOP\n         LA    &BASE,&PBASE\n         USING &PBASE,&BASE\n&USING   SETB  1\n.START   ANOP\n.A       AIF   (T'&CODE EQ 'O').B\n         AIF   ('&CODE'(1,1) EQ '&Q').A01\n         MVC   &P.1CODE,=CL9'&CODE'\n         AGO   .B\n         MVC   &P.1CODE,=CL9&CODE\n.B       AIF   (T'&DATE EQ 'O').C\n         AIF   ('&DATE' NE 'INTERNAL').B00\n         MVC   &P.2DATE,&DERDATE\n         AGO   .C\n.B00     AIF   ('&DATE'(1,1) EQ '(').B01\n         AIF   ('&DATE'(1,1) EQ '&Q').B02\n         MVC   &P.2DATE,&DATE\n         AGO   .C\n.B01     MVC   &P.2DATE,0&DATE\n         AGO   .C\n.B02     MVC   &P.2DATE,=C&DATE\n.C       AIF   (T'&TIME EQ 'O').D\n         AIF   ('&TIME' NE 'INTERNAL').C00\n         MVC   &P.2TIME,&DERTIME\n         AGO   .D\n.C00     AIF   ('&TIME'(1,1) EQ '(').C01\n         AIF   ('&TIME'(1,1) EQ '&Q').C02\n         MVC   &P.2TIME,&TIME\n         AGO   .D\n.C01     MVC   &P.2TIME,0&TIME\n         AGO   .D\n.C02     MVC   &P.2TIME,=C&TIME\n.D       AIF   (T'&RCPID EQ 'O').E\n         AIF   ('&RCPID'(1,1) EQ '(').D01\n         AIF   ('&RCPID'(1,1) EQ '&Q').D02\n         MVC   &P.2RECP,&RCPID\n         AGO   .E\n.D01     MVC   &P.2RECP,0&RCPID\n         AGO   .E\n.D02     MVC   &P.2RECP,=C&RCPID\n.E       AIF   (T'&RPTNAME EQ 'O').F\n         AIF   ('&RPTNAME'(1,1) EQ '(').E01\n         AIF   ('&RPTNAME'(1,1) EQ '&Q').E02\n         MVC   &P.2RPTN,&RPTNAME\n         AGO   .F\n.E01     MVC   &P.2RPTN,0&RPTNAME\n         AGO   .F\n.E02     MVC   &P.2RPTN,=C&RPTNAME\n.F       AIF   (T'&PAGENUM EQ 'O').G\n         AIF   (N'&PAGENUM GE 2).F03\n         AIF   ('&PAGENUM'(1,1) EQ '(').F01\n         AIF   ('&PAGENUM'(1,1) EQ '&Q').F02\n         MVC   &P.3PGN,&PAGENUM\n         AGO   .G\n.F01     MVC   &P.3PGN,0&PAGENUM\n         AGO   .G\n.F02     MVC   &P.3PGN,=C&PAGENUM\n         AGO   .G\n.F03     ANOP\n&NPG     SETC  '&PAGENUM(2)'\n         AIF   ('&PAGENUM(1)' EQ 'DEC').F04\n         AIF   ('&PAGENUM(1)' EQ 'BIN').F05\n         MNOTE 8,'DER010E &PAGENUM(1) invalid format. Use DEC or BIN.'\n         AGO   .FINISH\n.F04     OI    &NPG+L'&NPG-1,X'0F'\n         UNPK  &P.3PGN,&NPG\n         AGO   .G\n.F05     L     R1,&NPG\n         CVD   R1,&DERDBWD\n         OI    &DERDBWD+7,X'0F'\n         UNPK  &P.3PGN,&DERDBW\n.G       AIF   (T'&PAGECNT EQ 'O').FINISH\n         AIF   (N'&PAGECNT GE 2).G03\n         AIF   ('&PAGECNT'(1,1) EQ '(').G01\n         AIF   ('&PAGECNT'(1,1) EQ '&Q').G02\n         MVC   &P.2PCNT,&PAGECNT\n         AGO   .FINISH\n.G01     MVC   &P.2PCNT,0&PAGECNT\n         AGO   .FINISH\n.G02     MVC   &P.2PCNT,=C&PAGECNT\n         AGO   .FINISH\n.G03     ANOP\n&NPG     SETC  '&PAGECNT(2)'\n         AIF   ('&PAGECNT(1)' EQ 'DEC').G04\n         AIF   ('&PAGECNT(1)' EQ 'BIN').G05\n         MNOTE 8,'DER010E &PAGECNT(1) invalid format. Use DEC or BIN.'\n         AGO   .FINISH\n.G04     OI    &NPG+L'&NPG-1,X'0F'\n         UNPK  &P.2PCNT,&NPG\n         AGO   .FINISH\n.G05     L     R1,&NPG\n         CVD   R1,&DERDBWD\n         OI    &DERDBWD+7,X'0F'\n         UNPK  &P.2PCNT,&DERDBW\n.FINISH  AIF   (NOT &USING).EXIT\n         DROP  &BASE\n.EXIT    LM    R0,R3,&DERSVGR\n         MEND\n./ ADD NAME=@EDITTOD 0100-01324-01324-1756-00070-00070-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @EDITTOD \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @EDITTOD &FORMAT=U\n         COPY  DERGBLVR\n         AIF   ('&FORMAT' EQ 'U').U\n         AIF   ('&FORMAT' EQ 'UNIVERSAL').U\n         AIF   ('&FORMAT' EQ 'J').J\n         AIF   ('&FORMAT' EQ 'JULIAN').J\n         AIF   ('&FORMAT' EQ 'B').B\n         AIF   ('&FORMAT' EQ 'BOTH').B\n         MNOTE 8,'DER001E &FORMAT invalid FORMAT parameter.'\n         MEXIT\n.U       ANOP\n&NAME    DERTODUF\n         LA    R1,&DERDATE\n         MEXIT\n.J       ANOP\n&NAME    DERTODYF\n         LA    R1,&DERYDAT\n         MEXIT\n.B       ANOP\n&NAME    DERTODUF\n         DERTODYF\n         LA    R0,&DERYDAT\n         LA    R1,&DERDATE\n         MEND\n./ ADD NAME=@EPILOG  0100-01324-01324-1756-00049-00049-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @EPILOG  \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @EPILOG &GLOBALV=YES,\n               &MACLIST=,\n               &COPLIST=\n         COPY  DERGBLVR\n./ ADD NAME=@EXIT    0100-01324-01324-1756-00088-00088-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @EXIT    \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @EXIT &KEEPRC=YES\n         COPY  DERGBLVR\n         LCLB  &KRC\n&NAME    DS    0H\n         AIF   ('&KEEPRC' NE 'YES').SKIP\n&KRC     SETB  1\n         ST    R15,&DERWORD        Save RC\n.SKIP    ANOP\n         AIF   (NOT &DER390).ESA\n         AIF   (NOT &DERSTOR).S390X\n         LR    R2,R13\n         STORAGE RELEASE,ADDR=(R2),LENGTH=&DERSVSZ\n.S390X   AIF   (&KRC).S390RC\n         LA    R15,0               Set RC=0\n         PR                        Unstack states and return to MVS\n         MEXIT\n.S390RC  L     R15,&DERWORD\n         PR                        Unstack states and return to MVS\n         MEXIT\n.ESA     AIF   (NOT &DERESA).S370\n         LR    R2,R13\n         L     R13,4(,R13)         OLD SA PTR\n         AIF   (NOT &DERSTOR).ESAX\n         STORAGE RELEASE,ADDR=(R2),LENGTH=&DERSVSZ\n.ESAX    AIF   (NOT &KRC).ESAZ\n         L     R15,&DERWORD\n.ESAZ    LM    R0,R12,20(R13)      Restore REGs\n         L     R14,12(,R13)\n         BSM   0,R14\n         MEXIT\n.S370    ANOP\n         LR    R2,R13\n         L     R13,4(,R13)         OLD SA PTR\n         AIF   (NOT &DERSTOR).S370X\n         FREEMAIN R,A=(R2),LV=&DERSVSZ\n.S370X   AIF   (&KRC).S370RC\n         RETURN (14,12),RC=0       BACK TO MVS\n         MEXIT\n.S370RC  ANOP\n         L     R15,&DERWORD\n         RETURN (14,12),RC=(15)   BACK TO MVS\n         MEND\n./ ADD NAME=@FLATDS  0100-01324-01324-1756-00069-00069-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @FLATDS  \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Flat dataset file definition\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   @FLATDS &BLKSIZE=6233,&LRECL=150,&SPACE=(CYL,(50,5),RLSE),    +\n               &VOLUNIT=3390,&DDNAME=LCLDS01,&ABNDISP=KEEP\n         COPY  DERGBLVR\nALFLATDS @S99PARM ALLOC,                  Define Flat file alloc parm  +\n               TYPE=DATA,                 Map type is memory data      +\n               PREFIX=F,                  Use prefix F --> FRBxxxx     +\n               EXTRB=YES,                 Request S99RBX               +\n               DD=&DDNAME,                DD name is LCLDS01           +\n               DSN='CADS.XCOM.SAMPLE.DATA',  Predefine DSN             +\n               DSORG=PS,RECFM=VB,            DCB:                      +\n               BLKSIZE=&BLKSIZE,LRECL=&LRECL,                          +\n               SPACE=&SPACE,                 Specify space for new     +\n               UNIT=&VOLUNIT,                 dataset in this unit of  +\n               DISP=(NEW,CATLG),          Use this disposition and     +\n               RECBUF=YES,                Generate record buffer       +\n               FREE=CLOSE,                Deallocate at close          +\n               CDISP=&ABNDISP             What to do if job abend\nUNFLATDS @S99PARM FREE,                   Define Flatfile dealloc parm +\n               TYPE=DATA,                 Map type is memory data      +\n               EXTRB=YES,                 Request S99RBX               +\n               PREFIX=U,                  Use prefix U --> URBxxxx     +\n               DD=&DDNAME                 DD name is LCLDS01\n         MEND\n./ ADD NAME=@MESSAGE 0100-01324-01324-1756-00160-00160-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  | @MESSAGE |\n.*                    +----------+\n.*\n.*    Function -\n.*           Routes any error, warning or informational messages\n.*           to operator consoles.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    | Date   | Engineer   | V.R.L. | Description               |\n.*    +--------+------------+--------+---------------------------+\n.*    |98/02/20| Deru S.    | 1.0.0. | First development         |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @MESSAGE &MSG,                                                +\n               &OPER=,                                                 +\n               &TYPE=,                                                 +\n               &OBJECT=,                                               +\n               &OPCODE=B,                                              +\n               &ROUTCDE=,                                              +\n               &TEXT=,                                                 +\n               &RC=,                                                   +\n               &MF=,                                                   +\n               &EXIT=\n         COPY  DERGBLVR\n         LCLC  &P,&PFX,&S,&X\n&P       SETC  '&DERMID'\n&X       SETC  'DER&SYSNDX'\n&S       SETC  'I'\n         AIF   (T'&MSG EQ 'O').OPER\n         AIF   ('&MSG' EQ 'INFO').OPER\n         AIF   ('&MSG' NE 'WARNING').MSG1\n&S       SETC  'W'\n         AGO   .OPER\n.MSG1    AIF   ('&MSG' NE 'ERROR').MSG2\n&S       SETC  'E'\n         AGO   .OPER\n.MSG2    MNOTE 4,'DER026W &MSG ignored for NOP operation.'\n         AGO   .EXIT\n.OPER    ANOP\n&NAME    &OPCODE &X.A\n         B     &X.Z\n&X.A     EQU   *\n         AIF   (T'&OPER EQ 'O').NOP\n         AIF   ('&OPER' EQ 'DYNALLOC').SVC99\n         AIF   ('&OPER' EQ 'SVC99').SVC99\n         AIF   ('&OPER' EQ 'FIND').FIND\n         AIF   ('&OPER' EQ 'IO').IO\n         AIF   ('&OPER' EQ 'SSREQ').SSREQ\n         AIF   ('&OPER' EQ 'SHOW').SHOW\n         AIF   ('&OPER' EQ 'LIST').LIST\n         MNOTE 8,'DER025E &OPER invalid parameter.'\n         AGO   .EXIT\n.NOP     ANOP\n.*\n.* DERWTR001I &OBJECT completed\n.* DERWTR002W &OBJECT was not completed, RC=cccc\n.* DERWTR003E &OBJECT error, RC=cccc\n.*\n&PFX     SETC   '&P.00'\n         DEREDTMS &PFX,&S,OBJECT=&OBJECT,RC=&RC,ROUTCDE=&ROUTCDE,      +\n               TYPE=&TYPE\n         AGO   .FINISH\n.SVC99   ANOP\n.*\n.* DERWTR011I SVC 99 &TYPE of &OBJECT completed\n.* DERWTR012W SVC 99 &TYPE of &OBJECT was not completed, EC=cc, IC=ii\n.* DERWTR013E SVC 99 &TYPE of &OBJECT error, RC=cccc, IC=iiii\n.*\n&PFX     SETC   '&P.01'\n         AGO    .EDIT\n.FIND    ANOP\n.*\n.* DERWTR021I &OBJECT found\n.* DERWTR022W &OBJECT can not be found, RC=cccc\n.* DERWTR023E &OBJECT error, RC=cccc\n.*\n&PFX     SETC   '&P.02'\n         AGO    .EDIT\n.IO      ANOP\n.*\n.* DERWTR031I &TYPE of file &OBJECT completed\n.* DERWTR032W Unable to &TYPE file &OBJECT, RC=cccc\n.* DERWTR033E Error encountered during &TYPE file &OBJECT, RC=cccc\n.*\n&PFX     SETC   '&P.03'\n         AGO    .EDIT\n.SSREQ   ANOP\n.*\n.* DERWTR041I &OBJECT found. &TYPE subsystem request completed\n.* DERWTR042W &OBJECT was not found. &TYPE subsystem returned RC=cccc\n.* DERWTR043E Request rejected. &TYPE subsystem returned RC=cccc\n.*\n&PFX     SETC   '&P.04'\n         AGO    .EDIT\n.SHOW    ANOP\n.*\n.* DERWTR051I &TYPE is &OBJECT and it is &TEXT\n.*\n&PFX     SETC   '&P.05'\n         AGO    .EDIT\n.LIST    ANOP\n.*\n.* DERWTR061I &TYPE &OBJECT &TEXT\n.*\n&PFX     SETC   '&P.06'\n         AGO    .EDIT\n.EDIT    ANOP\n&NAME    DEREDTMS &PFX,&S,                                             +\n               TYPE=&TYPE,                                             +\n               OBJECT=&OBJECT,                                         +\n               ROUTCDE=&ROUTCDE,                                       +\n               TEXT=&TEXT,                                             +\n               RC=&RC\n         AGO   .FINISH\n.FINISH  ANOP\n         AIF   (T'&EXIT EQ 'O').END\n         AIF   ('&EXIT' EQ '*').END\n         AIF   ('&EXIT'(1,1) EQ '(').ENDR\n         L     15,=A(&EXIT)\n         BR    15\n         AGO   .END\n.ENDR    BR    &EXIT(1)\n.END     ANOP\n         DS    0H\n&X.Z     EQU   *\n.EXIT    ANOP\n         MEND\n./ ADD NAME=@PROLOG  0100-01324-01324-1756-00172-00172-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @PROLOG  \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @PROLOG &ESA=390,         390, 370 or NO (means S/370)        ++\n               &AMODE=ANY,                                             ++\n               &RMODE=ANY,                                             ++\n               &RENT=YES,                                              ++\n               &EXECUTE=YES,                                           ++\n               &EP=,                                                   ++\n               &SVASIZE=90,                                            ++\n               &BREG=R12\n         COPY  DERGBLVR\n         LCLA  &NBR,&I\n         LCLC  &BR1,&BR2,&BR3,&ENTRY,&BRLINK,&IX\n&BRLINK  SETC  'BASR'\n&IX      SETC  '&SYSNDX'\n&DERSVSZ SETA  &SVASIZE\n&NBR     SETA  N'&BREG\n&BR1     SETC  '&BREG(1)'\n         AIF   (('&RENT' NE 'Y') AND ('&RENT' NE 'YES')).BEGIN\n&DERRENT SETB  1\n.BEGIN   AIF   (T'&NAME NE 'O').A\n         MNOTE 8,'DER041E Label missing. Unable to define module name.'\n         MEXIT\n.A       AIF   (K'&NAME LE 8).B\n         MNOTE 8,'DER042E Module name exceeded (max 8 bytes).'\n         MEXIT\n.B       AIF   (&NBR LE 3).C\n         MNOTE 8,'DER043E Number of base registers exceeded (max 3).'\n         MEXIT\n.C       AIF   (&DEREQU).D\n&I       SETA  0\n.LOOPEQU ANOP\nA&I      EQU   &I\nC&I      EQU   &I\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE 15).LOOPEQU\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n.D       AIF   (K'&NAME LT 6).D1\n&DERMID  SETC  '&NAME'(1,6)\n         AGO   .D2\n.D1      ANOP\n&DERMID  SETC  '&NAME'\n.D2      ANOP\n&ENTRY   SETC  '&NAME'\n&NAME    AMODE &AMODE\n&NAME    RMODE &RMODE\n&NAME    CSECT\n          AIF   ('&ESA' NE '390').ESA370\n&DER390   SETB  1\n&DERESA   SETB  1\n          BAKR  R14,0          Stack states\n.E        USING &NAME,R15\n          B     DER&SYSNDX\n          DC    C'(C)1998 Ir. DERU SUDIBYO -'\n          DC    C'&NAME &SYSDATE &SYSTIME'\nDER&IX    DS   0D\n          DROP  R15\n          AIF   (T'&EP EQ 'O').E1\n&ENTRY    SETC  '&EP'\n          &BRLINK &BR1,0\n&ENTRY    EQU   *\n          AGO   .E2\n.E1       LR    &BR1,R15       Copy base address\n.E2       AIF   (&NBR EQ 1).E4\n&BR2      SETC  '&BREG(2)'\n          AIF   (&NBR EQ 2).E3\n&BR3      SETC  '&BREG(3)'\n          USING &ENTRY,&BR1,&BR2,&BR3\n          LA    R15,4095\n          LA    &BR2,1(R15,&BR1)\n          LA    &BR3,1(R15,&BR2)\n          AGO   .F\n.E3       USING &ENTRY,&BR1,&BR2\n          LA    R15,4095\n          LA    &BR2,1(R15,&BR1)\n          AGO   .F\n.E4       USING &ENTRY,&BR1\n.F        AGO   .SVA\n.ESA370   AIF   ('&ESA' NE '370').NONESA\n&DERESA   SETB  1\n&BRLINK   SETC  'BASR'\n&BRLINKS  SETC  'BAS'\n          AGO   .SAVING\n.NONESA   ANOP\n&BRLINK   SETC  'BALR'\n&BRLINK   SETC  'BAL'\n.SAVING   STM   R14,R12,12(R13)\n          AGO   .E\n.SVA      AIF   (&DERRENT).STORAGE\n          AIF   (&DER390).FINAL\n          &BRLINKS R1,DER&IX.B\n          DS    0D\nDER&IX.A  DC    XL&DERSVSZ\nDER&IX.B  EQU   *\n          AGO   .HSKEEP\n.STORAGE  AIF   (&DERESA).ESA\n          GETMAIN R,LV=&DERSVSZ\n          AGO   .HSKEEP\n.ESA      STORAGE OBTAIN,COND=NO,LENGTH=&DERSVSZ\n.HSKEEP   ST    R13,4(,R1)          Old in new\n          L     R15,24(,R13)        Restore parmlist address\n          ST    R1,8(,R13)          New in old\n          LR    R13,R1              Chain\n          LR    R1,R15              Keep parmlist address in GR 1\n&DERSTOR  SETB  1\n.FINAL    ANOP\n&DERDSN   SETC  'DER&IX._DSN'\n&DERDSNC  SETC  'DER&IX._DSN_COUNTER'\n&DERDATE  SETC  'DER&IX._DATE'\n&DERTIME  SETC  'DER&IX._TIME'\n&DERYDAT  SETC  'DER&IX._YDATE'\n&DERYTIM  SETC  'DER&IX._YTIME'\n&DERSVGR  SETC  'DER&IX._SVGR'\n&DERSVAR  SETC  'DER&IX._SVAR'\n&DERWTOL  SETC  'DER&IX._WTO'\n&DEROPNL  SETC  'DER&IX._OPEN'\n&DERCLSL  SETC  'DER&IX._CLOSE'\n&DERMSGL  SETC  'DER&IX._MSG'\n&DERTMEL  SETC  'DER&IX._TIMEL'\n&DEREDTL  SETC  'DER&IX._EDIT'\n&DERWORD  SETC  'DER&IX._WORD'\n&DERDBWD  SETC  'DER&IX._DWORD'\n&DERWORK  SETC  'DER&IX._WORK'\n          MEND\n./ ADD NAME=@SYSOUT  0100-01324-01324-1756-00063-00063-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @SYSOUT  \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Sysout file definition\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   @SYSOUT &JESNAME=JES2,&DDNAME=JES2FILE\n         COPY  DERGBLVR\nALSYSOUT @S99PARM ALLOC,                  Define SYSOUT alloc parm     +\n               TYPE=DATA,                 Map type is memory data      +\n               SSREQ=&JESNAME,            Request JES2 dataset         +\n               EXTRB=YES,                 Request S99RBX               +\n               PREFIX=A,                  Use prefix A --> ARBxxxx     +\n               DISP=(OLD,DELETE),         Use disp. delete             +\n               DD=&DDNAME,                and DD name is JES2FILE      +\n               DSN='SYSOUT.DATA.SET'      DSN is just to init field\nUNSYSOUT @S99PARM DEALLOC,                Define SYSOUT dealloc parm   +\n               TYPE=DATA,                 Map type is memory data      +\n               PREFIX=D,                  Use prefix D --> DRBxxx      +\n               DISP=DELETE,               Override disposition DELETE  +\n               EXTRB=YES,                 Request S99RBX               +\n               DD=&DDNAME                 and DD name is JES2FILE\n         MEND\n./ ADD NAME=@VDATA   0100-01324-01324-1756-00057-00057-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 @VDATA \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @VDATA\n         COPY  DERGBLVR\n         LCLA  &I,&J\n&I       SETA  1\n&J       SETA  &DERCTR\n.LOOP    AIF   (&J EQ 0).EXIT\n&DERVLBL(&I) &DERVOPC(&I) &DERVDAT(&I)\n&I       SETA  &I+1\n&J       SETA  &J-1\n         AGO   .LOOP\n.EXIT    ANOP\n         MEND\n./ ADD NAME=@VGLOBAL 0100-01324-01324-1756-00068-00068-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 @VGLOBAL \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @VGLOBAL\n         COPY  DERGBLVR\n         DS    0D\n&DERSVGR DC    XL80'00'\n&DERSVAR DC    XL80'00'\n&DERDBWD DC    D'0'\n&DERWORD DC    F'0'\n&DERTMEL TIME  LINKAGE=SYSTEM,MF=L\n&DERWTOL WTO   TEXT=&DERWORK,MF=L\n&DEROPNL OPEN  (,),MF=L\n&DERCLSL CLOSE (,),MF=L\n         DS    0D\n&DERMSGL DC    XL160'00'\n&DEREDTL DC    XL80'00'\n*\n&DERDSN  DC    CL44' '\n&DERDSNC DC    F'0'\n&DERDATE DC    CL8'YY/MM/DD'\n&DERTIME DC    CL8'HH:MM:SS'\n&DERYDAT DC    CL8' YYYYDDD'\n&DERYTIM DC    CL8' HHMMSS'\n&DERWORK DC    CL80' '\n         MEND\n./ ADD NAME=@WTO     0100-01324-01324-1756-00068-00068-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @WTO     \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*               Issue WTO message\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/03/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    @WTO  &CODE=,&TFLAGS=WSOFLAGS,&TBIT=WSOFTRAC,&REG=R2,         +\n               &PREFIX=WSMSG,&TRACE=CHECK\n         COPY  DERGBLVR\n         LCLC  &LMSG,&LBL\n&LMSG    SETC  '&PREFIX&CODE'\n&LBL     SETC  'DER&SYSNDX'\n         AIF   (T'&CODE NE 'O').GO\n         MNOTE 12,'DER001E Parameter message code missing.'\n         MEXIT\n.GO      AIF   ('&TRACE' EQ 'ALWAYS').TRACE\n&NAME    TM    &TFLAGS,&TBIT\n         BZ    &LBL.X\n         ST    &REG,&DERSVGR\n         AGO   .NSI\n.TRACE   ANOP\n&NAME    ST    &REG,&DERSVGR\n.NSI     L     &REG,&LMSG\n         MVC   4(6,&REG),=CL6'&DERMID'\n         WTO   MF=(E,(&REG))\n         L     &REG,&DERSVGR\n&LBL.X   EQU   *\n         MEND\n./ ADD NAME=@XCOMJOB 0100-01324-01324-1756-00343-00343-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  | @XCOMJOB |\n.*                    +----------+\n.*\n.*    Function -\n.*            Define data structure, map or update an in-memory JCL\n.*            to execute XCOMJOB program.\n.*\n.*    Syntax -\n.*\n.*     EXEC:\n.*       Label @XCOMJOB EXEC,\n.*                     BREG={2/<Any GR 2-12>},\n.*                     LOC=<{XCJOB/<any label>/<(register)>},\n.*                     RCPID=<Recipient-ID in (GR), string or label>,\n.*                     RPTNAME=<Report-ID in (GR), string or label>,\n.*                     JOBNUM=<Jobnumber in (GR), string or label>,\n.*                     PREFIX={XC/<Any 1-2 alphameric>}\n.*\n.*     Map:\n.*       Label &XCOMJOB {DSECT/CSECT/COM/DATA},\n.*                     DISP=({OLD/SHR},{DELETE/KEEP}),\n.*                     CLASS=<Any valid job class>,\n.*                     MCLASS=<Any valid sysout class>,\n.*                     MLEVEL=<Any valid (1/0,1/0)>,\n.*                     PREFIX={XC/<Any 1-2 alphameric>}\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    | Date   | Engineer   | V.R.L. | Description               |\n.*    +--------+------------+--------+---------------------------+\n.*    |98/02/16| Deru S.    | 1.0.0. | First development         |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   @XCOMJOB &OP,&PREFIX=XC,&DISP=,&CLASS=A,                      +\n               &MCLASS=X,&MLEVEL=(0,0),&JOBNUM=,&DSN=,&RCPID=,         +\n               &LOC=*,&TIME=,&TYPE=,&SUBMIT=INTERNAL,&PCDRIVE='F',     +\n               &STEPLIB=,&CAILIB=,&GLOBLIB=,&RESTLIB=,&CNTLLIB=,       +\n               &RPTNAME=,&JOBPARM=,&BREG=2,&EXTTYPE=\n         COPY  DERGBLVR\n         LCLA  &L\n         LCLB  &USING,&DS,&NOP,&NOTYPE,&BLD,&RUN\n         LCLC  &RCP,&RPT,&P,&PBASE,&BASE,&Q,&OPER,mLBL,&PCDRV\n&P       SETC  '&PREFIX'\n&PBASE   SETC  '&P.JOB'\n&BASE    SETC  '&BREG'\n&Q       SETC  ''''\n&LBL     SETC  'DER&SYSNDX'\n&PCDRV   SETC  '&PCDRIVE'\n         AIF   ('&PCDRIVE'(1,1) NE '&Q').A0\n&PCDRV   SETC  '&PCDRIVE'(2,1)\n.A0      AIF   (T'&OP NE 'O').A1\n&NOP     SETB  1\n.A1      AIF   (T'&TYPE NE 'O').A2\n&NOTYPE  SETB  1\n.A2      AIF   (&NOP AND &NOTYPE).EXEC\n         AIF   (&NOP).T001\n&OPER    SETC  '&OP'\n.T001    AIF   (&NOTYPE).T002\n&OPER    SETC  '&TYPE'\n.T002    AIF   ((NOT &NOP) AND                                         +\n               (('&OP' EQ 'EXEC') OR                                   +\n               ('&OP' EQ 'BUILD') OR                                   +\n               ('&OP' EQ 'UPDATE') OR                                  +\n               ('&OP' EQ 'MODIFY'))).EXEC\n         AIF   ((&NOP) AND                                             +\n               (('&TYPE' EQ 'EXEC') OR                                 +\n               ('&TYPE' EQ 'BUILD') OR                                 +\n               ('&TYPE' EQ 'UPDATE') OR                                +\n               ('&TYPE' EQ 'MODIFY'))).EXEC\n&LABEL   DERXCJOB TYPE=&OPER,PREFIX=&PREFIX,DISP=&DISP,CLASS=&CLASS,   +\n               MCLASS=&MCLASS,MLEVEL=&MLEVEL,PCDRIVE=&PCDRV,           +\n               STEPLIB=&STEPLIB,CAILIB=&CAILIB,GLOBLIB=&GLOBLIB,       +\n               RESTLIB=&RESTLIB,CNTLLIB=&CNTLLIB\n         AGO   .FINISH\n.EXEC    AIF   ('&TYPE' NE 'BUILD').EXECGO\n&BLD     SETB  1\n.EXECGO  ANOP\n&RUN     SETB  1\n&LABEL   DS    0H\n         STM   R0,R15,&DERSVGR\n         AIF   ('&LOC' EQ '0').START\n         AIF   ('&LOC' EQ '*').START\n         AIF   ('&LOC'(1,1) EQ '(').LOCREG\n&PBASE   SETC  '&LOC'\n         AGO   .USING\n.LOCREG  ANOP\n&BASE    SETC  '&LOC'\n.USING   ANOP\n         LA    &BASE,&PBASE\n         USING &PBASE,&BASE\n&USING   SETB  1\n.START   AIF   (T'&DSN EQ 'O').START1\n&DS      SETB  1\n         MVI   &P.JDSN,C' '\n         MVC   &P.JDSN+1(L'&P.JDSN-1),&P.JDSN\n         AIF   ('&DSN'(1,1) NE '(').DS1\n         MVC   &P.JDSN(L'&P.JDSN),0&DSN\n         AGO   .START1\n.DS1     AIF   ('&DSN'(1,1) NE '&Q').DS2\n         MVC   &P.JDSN,=CL(L'&P.JDSN)&DSN\n         AGO   .START1\n.DS2     ANOP\n         MVC   &P.JDSN(L'&P.JDSN),&DSN\n.START1  AIF   (T'&RCPID NE 'O').CHK001\n         AIF   (NOT &BLD).CONT001\n.*       MNOTE 8,'DER005E Required parameter RCPID is missing'\n         AGO   .CONT001\n.CHK001  ANOP\n         CLC   =C'GROUP=',&P.GROUP\n         BNE   &LBL.A\n         AIF   ('&RCPID'(1,1) NE '(').CHK002\n         MVC   &P.JDEST,0&RCPID\n&LBL.A   MVC   &P.JNAME,0&RCPID\n         MVC   &P.JRECID,0&RCPID\n         AIF   (&DS).CONT001\n         MVC   &P.JDSQK,0&RCPID\n         AGO   .CONT001\n.CHK002  AIF   ('&RCPID'(1,1) NE '&Q').CHK003\n         MVC   &P.JDEST,=C&RCPID\n&LBL.A   MVC   &P.JNAME,=C&RCPID\n         MVC   &P.JRECID,=C&RCPID\n         AIF   (&DS).CONT001\n         MVC   &P.JDSQK,=C&RCPID\n         AGO   .CONT001\n.CHK003  ANOP\n         MVC   &P.JDEST,&RCPID\n&LBL.A   MVC   &P.JNAME,&RCPID\n         MVC   &P.JRECID,&RCPID\n         AIF   (&DS).CONT001\n         MVC   &P.JDSQK,&RCPID\n.CONT001 AIF   (T'&RPTNAME NE 'O').CHK011\n         AIF   (NOT &BLD).CONT002\n.*       MNOTE 8,'DER005E Required parameter RPTNAME is missing'\n         AGO   .CONT002\n.CHK011  ANOP\n         MVI   &P.JRNAME,C' '\n         MVC   &P.JRNAME+1(L'&P.JRNAME-1),&P.JRNAME\n         AIF   ('&RPTNAME'(1,1) NE '(').CHK012\n         MVC   &P.JRNAME(8),0&RPTNAME\n         MVC   &P.JPRGN,0&RPTNAME\n         AIF   (&DS).CONT002\n         MVC   &P.JDSQR,0&RPTNAME\n         AGO   .CONT002\n.CHK012  AIF   ('&RPTNAME'(1,1) NE '&Q').CHK013\n         MVC   &P.JRNAME(8),=C&RPTNAME\n         MVC   &P.JPRGN,=C&RPTNAME\n         AIF   (&DS).CONT002\n         MVC   &P.JDSQR,=C&RPTNAME\n         AGO   .CONT002\n.CHK013  ANOP\n         MVC   &P.JRNAME(L'&RPTNAME),&RPTNAME\n         MVC   &P.JPRGN,&RPTNAME\n         AIF   (&DS).CONT002\n         MVC   &P.JDSQR,&RPTNAME\n.CONT002 AIF   (T'&JOBNUM NE 'O').CHK021\n         AIF   (NOT &BLD).CONT003\n         MVC   &P.JNUM,=CL6'OMJOB'\n         AGO   .CONT003\n.CHK021  AIF   ('&JOBNUM'(1,1) NE '(').CHK022\n         MVC   &P.JNUM,0&JOBNUM\n         AGO   .CONT003\n.CHK022  AIF   ('&JOBNUM'(1,1) NE '&Q').CHK023\n         MVC   &P.JNUM,=C&JOBNUM\n         AGO   .CONT003\n.CHK023  ANOP\n         MVC   &P.JNUM,&JOBNUM\n.CONT003 AIF   (&DS).STEPLIB\n         AIF   (T'&TIME EQ 'O').GBLTIME\n         AIF   ('&TIME' EQ 'INSTANT').IMMED\n         AIF   ('&TIME' EQ 'IMMED').IMMED\n         AIF   ('&TIME' EQ 'NOW').IMMED\n.GBLTIME ANOP\n         AIF   (NOT &BLD).STEPLIB\n         MVC   &P.JDSQD,&DERYDAT\n         MVI   &P.JDSQD,C'D'\n         MVC   &P.JDSQT,&DERYDAT\n         MVI   &P.JDSQT,C'T'\n         AGO   .STEPLIB\n.IMMED   ANOP\n         XC    &P.TIME(16),&P.TIME\n         TIME  DEC,&P.TIME,LINKAGE=SYSTEM,                             +\n               DATETYPE=YYYYDDD,MF=(E,&DERTMEL)\n         ST    2,&P.ZERO\n         L     2,&P.TIME\n         SRL   2,4\n         ST    2,&P.TIME\n         L     2,&P.DATE\n         SLL   2,4\n         ST    2,&P.DATE\n         OI    &P.TIME+L'&P.TIME-1,X'0F'  Make sure sign is F\n         OI    &P.DATE+L'&P.DATE-1,X'0F'   and also here\n         UNPK  &P.JDSQT,&P.TIME           Unpack time and date\n         UNPK  &P.JDSQD,&P.DATE            into EBCDIC characters\n.STEPLIB AIF   (T'&STEPLIB EQ 'O').CAILIB\n         MVI   &P.JSLIB,C' '\n         MVC   &P.JSLIB+1(L'&P.JSLIB-1),&P.JSLIB\n         AIF   ('&STEPLIB'(1,1) EQ '&Q').ST01\n         AIF   ('&STEPLIB'(1,1) EQ '(').ST02\n         MVC   &P.JSLIB(L'&STEPLIB),&STEPLIB\n         AGO   .CAILIB\n.ST01    MVC   &P.JSLIB(K'&STEPLIB-2),=C&STEPLIB\n         AGO   .CAILIB\n.ST02    MVC   &P.JSLIB,0&STEPLIB\n.CAILIB  AIF   (T'&CAILIB EQ 'O').GLOBLIB\n         MVI   &P.JSLIB1,C' '\n         MVC   &P.JSLIB1+1(L'&P.JSLIB1-1),&P.JSLIB1\n         AIF   ('&CAILIB'(1,1) EQ '&Q').CA01\n         AIF   ('&CAILIB'(1,1) EQ '(').CA02\n         MVC   &P.JSLIB1(L'&CAILIB),&CAILIB\n         AGO   .GLOBLIB\n.CA01    MVC   &P.JSLIB1(K'&CAILIB-2),=C&CAILIB\n         AGO   .GLOBLIB\n.CA02    MVC   &P.JSLIB1,0&CAILIB\n.GLOBLIB AIF   (T'&GLOBLIB EQ 'O').CNTLLIB\n         MVI   &P.JXGLOB,C' '\n         MVC   &P.JXGLOB+1(L'&P.JXGLOB-1),&P.JXGLOB\n         AIF   ('&GLOBLIB'(1,1) EQ '&Q').GL01\n         AIF   ('&GLOBLIB'(1,1) EQ '(').GL02\n         MVC   &P.JXGLOB(L'&GLOBLIB),&GLOBLIB\n         AGO   .CNTLLIB\n.GL01    MVC   &P.JXGLOB(K'&GLOBLIB-2),=C&GLOBLIB\n         AGO   .CNTLLIB\n.GL02    MVC   &P.JXGLOB,0&GLOBLIB\n.CNTLLIB AIF   (T'&CNTLLIB EQ 'O').RESTLIB\n         MVI   &P.JXCNTL,C' '\n         MVC   &P.JXCNTL+1(L'&P.JXCNTL-1),&P.JXCNTL\n         AIF   ('&CNTLLIB'(1,1) EQ '&Q').CN01\n         AIF   ('&CNTLLIB'(1,1) EQ '(').CN02\n         MVC   &P.JXCNTL(L'&CNTLLIB),&CNTLLIB\n         AGO   .RESTLIB\n.CN01    MVC   &P.JXCNTL(K'&CNTLLIB-2),=C&CNTLLIB\n         AGO   .RESTLIB\n.CN02    MVC   &P.JXCNTL,0&CNTLLIB\n.RESTLIB AIF   (T'&RESTLIB EQ 'O').DISP\n         MVI   &P.JXREST,C' '\n         MVC   &P.JXREST+1(L'&P.JXREST-1),&P.JXREST\n         AIF   ('&RESTLIB'(1,1) EQ '&Q').RS01\n         AIF   ('&RESTLIB'(1,1) EQ '(').RS02\n         MVC   &P.JXREST(L'&RESTLIB),&RESTLIB\n         AGO   .DISP\n.RS01    MVC   &P.JXREST(K'&RESTLIB-2),=C&RESTLIB\n         AGO   .DISP\n.RS02    MVC   &P.JXREST,0&RESTLIB\n.DISP    AIF   (T'&DISP EQ 'O').SUBMIT\n&L       SETA  K'&DISP\n         MVI   &P.JDISP,C' '\n         MVC   &P.JDISP+1(L'&P.JDISP-1),&P.JDISP\n         AIF   ('&DISP'(1,1) EQ '&Q').DI01\n         MVC   &P.JDISP(L'&DISP),&DISP\n         MVI   &P.JDISP+L'&DISP,C','\n         AGO   .SUBMIT\n.DI01    MVC   &P.JDISP(&L-2),=C&DISP\n         MVI   &P.JDISP+&L-2,C','\n.SUBMIT  AIF   ('&SUBMIT' EQ 'INTERNAL').SUBI\n         AIF   ('&SUBMIT' EQ 'EXTERNAL').SUBX\n         AGO   .PARM\n.SUBI    MVC   &P.JLFILE,&P.JDSN\n         MVI   &P.J11,C'L'\n         LA    R1,&P.PARM\n         AGO   .PARM\n.SUBX    MVI   &P.J11,C'*'\n.PARM    AIF   (T'&JOBPARM EQ 'O').HDD\n         MVI   &P.JPARM,C' '\n         MVC   &P.JPARM+1(L'&P.JPARM-1),&P.JPARM\n         AIF   ('&JOBPARM'(1,1) EQ '&Q').PARMQ\n         AIF   ('&JOBPARM'(1,1) EQ '(').PARMR\n         MVC   &P.JPARM,&JOBPARM\n         AGO   .HDD\n.PARMR   MVC   &P.JPARM,0&JOBPARM\n         AGO   .HDD\n.PARMQ   MVC   &P.JPARM,=C'''&JOBPARM'''\n.HDD     AIF   ('&PCDRIVE'(1,1) EQ '&Q').HDDQ\n         AIF   ('&PCDRIVE'(1,1) EQ '(').HDDR\n         MVC   &P.JDRIVE,&PCDRIVE\n         AGO   .EXT\n.HDDQ    MVC   &P.JDRIVE,C&PCDRIVE\n         AGO   .EXT\n.HDDR    MVC   &P.JDRIVE,0&PCDRIVE\n.EXT     AIF   (T'&EXTTYPE EQ 'O').FINISH\n         LA    R2,&P.JRNAME\n         LA    R3,L'&P.JRNAME\n         LA    R4,9\n&LBL.B   CLI   0(R2),C' '\n         BE    &LBL.C\n         LA    R2,1(R2)\n         BCTR  R3,0\n         BCT   R4,&LBL.B\n&LBL.C   MVI   0(R2),C'.'\n         LA    R2,1(R2)\n         AIF   ('&EXTTYPE'(1,1) EQ '&Q').EXTQ\n         AIF   ('&EXTTYPE'(1,1) EQ '(').EXTR\n         LA    R4,&EXTTYPE\n         LA    R3,L'&EXTTYPE\n         AGO   .EXTGET\n.EXTQ    LA    R4,=C&EXTTYPE\n&L       SETA  K'&EXTTYPE-2\n         LA    R3,&L\n         AGO   .EXTGET\n.EXTR    LR    R4,&EXTTYPE(1)\n.EXTGET  ANOP\n&LBL.D   CLI   0(R4),C' '\n         BE    &LBL.E\n         MVC   0(1,R2),0(R4)\n         LA    R2,1(R2)\n         LA    R4,1(R4)\n         BCT   R3,&LBL.D\n&LBL.E   EQU   *\n.FINISH  AIF   (NOT &USING).RETURN\n         DROP  &BASE\n.RETURN  AIF   (NOT &RUN).EXIT\n         L     R0,&DERSVGR\n         LM    R2,R15,&DERSVGR+8\n.EXIT    ANOP\n         MEND\n./ ADD NAME=@XDIREF  0100-01324-01324-1756-00129-00129-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 @XDIREF  \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             XDI Storage Reference\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   @XDIREF &ENTRY,&TYPE=CSECT,&AMODE=31,&RMODE=ANY,&PRINT=NOGEN, +\n               &XJCLASS=T,&XMCLASS=T,&XMLEVEL=(1,1),&XDISP=(OLD,KEEP), +\n               &DSPCODE=YYEDSPC10,&PCROOT=DISPATCH\n         COPY  DERGBLVR\n         GBLB  &WTXTYPE,&WTXSTRT\n         AIF   (T'&ENTRY EQ 'O').NOENTRY\n         AIF   ('&ENTRY' EQ 'PROLOG').PROLOG\n         AIF   ('&ENTRY' EQ 'START').PROLOG\n         AIF   ('&ENTRY' EQ 'BEGIN').PROLOG\n         AIF   ('&ENTRY' EQ 'EPILOG').EPILOG\n         AIF   ('&ENTRY' EQ 'END').EPILOG\n         MNOTE 0,'DER901W &ENTRY is wrong ENTRY, NOENTRY is assumed.'\n.NOENTRY AIF   (&WTXSTRT).EPILOG\n.*\n.*   XDIREF PROLOG\n.*\n.PROLOG  ANOP\n&WTXSTRT SETB  1\nDERWTX   &TYPE\n         AIF   ('&TYPE' NE 'CSECT').BEGIN\n&WTXTYPE SETB  1\nDERWTX   AMODE &AMODE\nDERWTX   RMODE &RMODE\n.BEGIN   ANOP\n         DC    CL8'DERWTX'\n         @VGLOBAL\n         EJECT ,\n         MEXIT\n.*\n.*   XDIREF EPILOG\n.*\n.EPILOG  ANOP\nPHEADER  @EDITHDR DATA,                                                +\n               DSPCODE=&DSPCODE,                                       +\n               LRECL=128,                                              +\n               PREFIX=PH\n         SPACE ,\n         PRINT &PRINT\n         DC    8D'0'\nLMODESET MODESET MF=L\nLMODSUPV MODESET MODE=SUP,MF=L\nLMODSUPZ MODESET MODE=SUP,KEY=ZERO,MF=L\nLMODPROB MODESET MODE=PROB,MF=L\nLMODPRON MODESET MODE=PROB,KEY=NZERO,MF=L\nLMODZERO MODESET KEY=ZERO,MF=L\nLMODNZER MODESET KEY=NZERO,MF=L\nLEXTRACT EXTRACT WTXEND,MF=L\nLWTO     WTO   TEXT=,MF=L\nLWTOR    WTOR  TEXT=WTXEND,MF=L\n         DS    0D\nLOPEN_PARMLIB  OPEN  (,),MODE=31,MF=L\nLOPEN_INTRDR   OPEN  (,),MODE=31,MF=L\nLOPEN_JES2FILE OPEN  (,),MODE=31,MF=L TYPE=J\nLOPEN_LCLDS01  OPEN  (,),MODE=31,MF=L\nLOPEN          OPEN  (,),MODE=31,MF=L\nLCLOSE_JES2FILE CLOSE (,),MODE=31,MF=L\nLCLOSE_LCLDS01 CLOSE (,),MODE=31,MF=L\nLCLOSE         CLOSE (,),MODE=31,MF=L\nLREAD    READ  XDIDECB,SF,MF=L\nLBLDRCD  BUILDRCD ,,,,0,MF=L\nLMGCRE   MGCRE MF=L\n         DS    0D\nXCJCL    @XCOMJOB DATA,                                                +\n               CAILIB=CAI.CAILIB,                                      +\n               STEPLIB=CAI.XCOM.CAILIB,                                +\n               GLOBLIB=CAI.XCOM.NONQUEUE.GLOBAL,                       +\n               RESTLIB=CAI.XCOM.NONQUEUE.RESTART,                      +\n               CNTLLIB=CAI.XCOM.PARMLIB,                               +\n               ROOTDIR=&PCROOT,                                        +\n               DISP=&XDISP,                                            +\n               CLASS=&XJCLASS,                                         +\n               MCLASS=&XMCLASS,                                        +\n               MLEVEL=&XMLEVEL,                                        +\n               PREFIX=XC\n         PRINT &PRINT\n         @VDATA\nWTXEND   EQU   *\n         EJECT ,\n         IEFZB4D2\n         AIF   (NOT &WTXTYPE).EXIT\n         END   DERWTX\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERCIB   0100-01324-01324-1756-00084-00084-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERCIB   \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*            Command Information Control Block\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    DERCIB &TYPE=DSECT\n         COPY  DERGBLVR\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'COM').COM\n         AIF   ('&TYPE' EQ 'DATA').DATA\n         MNOTE 8,'DER001E invalid TYPE.  Use DSECT, CSECT, COM or DATA'\n         MEXIT\n.DSECT   ANOP\nCIB      DSECT\n         AGO   .BEGIN\n.CSECT   ANOP\nCIB      CSECT\n         AGO   .BEGIN\n.COM     ANOP\nCIB      COM\n         AGO   .BEGIN\n.DATA    ANOP\nCIB      DS    0D\n         AGO   .BEGIN\n.BEGIN   ANOP\n&NAME    DS    0D\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSTART EQU   X'04' -  COMMAND CODE FOR START\nCIBSTCOM EQU   X'08' -  COMMAND CODE FOR STC COMMUNICATION\nCIBMODFY EQU   X'44' -  COMMAND CODE FOR MODIFY\nCIBSTOP  EQU   X'40' -  COMMAND CODE FOR STOP\nCIBMOUNT EQU   X'0C' -  COMMAND CODE FOR MOUNT\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\n         MEND\n./ ADD NAME=DERDCB   0100-01324-01324-1756-00105-00105-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERDCB   \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Provide DCB skeleton of module extension\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERDCB &TYPE=CSECT,&AMODE=24,&RMODE=24,&PRINT=NOGEN\n         COPY  DERGBLVR\nDERDCB   &TYPE\n         AIF   ('&TYPE' NE 'CSECT').BEGIN\nDERDCB   AMODE &AMODE\nDERDCB   RMODE &RMODE\n.BEGIN   ANOP\n         DC    CL8'DERDCB'\nDCB_DIR  DS    0D\n         DC    A(PARMLIB) DCB address of PARMLIB\n         DC    A(JES2FILE) DCB address of JES2FILE\n         DC    A(LCLDS01) DCB address of LCLDS01\n         DC    A(LCLDS02) DCB address of LCLDS02\n         DC    A(INTRDR) DCB address of INTRDR\n         DC    A(SYSOUT) DCB address of INTRDR\nDCB_DIRL EQU  *-DCB_DIR\n         EJECT ,\n         DS    0D\nPARMLIB  DCB   DSORG=PO,MACRF=R,LRECL=80,                              +\n               DDNAME=PARMLIB,DCBE=PARMDCBE\n         DS    0D\nPARMDCBE DCBE  RMODE31=BUFF,GETSIZE=NO,                                +\n               EODAD=DCB_END\nPARMSIZE EQU   *-PARMLIB\n         DS    0D\nLCLDS01  DCB   DSORG=PS,MACRF=PM,BUFNO=1, OPTCD=JU,                    +\n               DDNAME=LCLDS01,DCBE=LCL1DCBE\n         DS    0D\nLCL1DCBE DCBE  RMODE31=BUFF,GETSIZE=NO\nLCL1SIZE EQU   *-LCLDS01\n         DS    0D\nLCLDS02  DCB   DSORG=PS,MACRF=PL,BUFNO=1, FTEK=A,                      +\n               DDNAME=LCLDS02,DCBE=LCL2DCBE\n         DS    0D\nLCL2DCBE DCBE  RMODE31=BUFF\nLCL2SIZE EQU   *-LCLDS02\n         DS    0D\nJES2FILE DCB   DSORG=PS,MACRF=GL,BUFNO=1,EROPT=ACC,                    +\n               DDNAME=JES2FILE,DCBE=JES2DCBE BFTEK=A,LRECL=16K\n         DS    0D\nJES2DCBE DCBE  RMODE31=BUFF,EODAD=DCB_END\nJES2SIZE EQU   *-JES2FILE\n         DS    0D\nINTRDR   DCB   DSORG=PS,MACRF=PM,LRECL=80,BLKSIZE=80,RECFM=F,          +\n               DDNAME=INTRDR,DCBE=INTRDCBE\n         DS    0D\nINTRDCBE DCBE  RMODE31=BUFF,GETSIZE=YES\nINTRSIZE EQU   *-INTRDR\n         DS    0D\nSYSOUT   DCB   DSORG=PS,MACRF=GL,BUFNO=1,EROPT=SKP,                    +\n               DDNAME=SYSOUTDS,DCBE=SYSODCBE\n         DS    0D\nSYSODCBE DCBE  RMODE31=BUFF,EODAD=DCB_END\nDCB_END  EQU   *\n         EJECT ,\n         AIF   ('&TYPE' NE 'CSECT').EXIT\n         END   DERDCB\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERDETRC 0100-01324-01324-1756-00073-00073-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  | DEREDTRC |\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    | Date   | Engineer   | V.R.L. | Description               |\n.*    +--------+------------+--------+---------------------------+\n.*    |98/02/20| Deru S.    | 1.0.0. | First development         |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    DEREDTRC &RC,&REG=15,&OUTREG=\n         COPY  DERGBLVR\n         LCLB  &OR\n         LCLC  &WKAREA,&GR\n&GR      SETC  '&REG'\n         AIF   (T'&OUTREG EQ 'O').GO\n&OR      SETB  1\n&GR      SETC  '&OUTREG'\n.GO      AIF   (T'&RC EQ 'O').NONE\n         AIF   ('&RC' EQ '*').NONE\n         AIF   ('&RC'(1,1) EQ '(').REG\n         L     &GR,&RC\n         CVD   &GR,&DERDBWD\n         AGO   .EDIT\n.REG     CVD   &RC(1),&DERDBWD\n.EDIT    OI    &DERDBWD+7,X'0F'\n         UNPK  &DERWORD,&DERDBWD\n         AIF   (NOT &OR).EXIT\n.EDITR   L     &OUTREG,&DERWORD\n         MEXIT\n.NONE    MVC   &DERWORD,=C'*N/A'\n         AIF   (T'&OUTREG NE 'O').EDITR\n         MEXIT\n.EXIT    ANOP\n         MEXIT\n.ERRC    MNOTE 8,'DER030E Return code parameter missing.'\n         MEND\n./ ADD NAME=DERDSPHD 0100-01324-01324-1756-00116-00116-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERDSPHD \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Create storage structure of Dispatch/PC page header.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/19\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    DERDSPHD &CODE=YYEDSPC10,                                     +\n               &PREFIX=PH,                                             +\n               &LRECL=132,                                             +\n               &TYPE=DATA\n         COPY  DERGBLVR\n         LCLC  &P,&CDE,&LRL\n         AIF   (T'&CODE NE 'O').A\n&CDE     SETC  'YYEDSPC10'\n         AGO   .B\n.A       ANOP\n&CDE     SETC  '&CODE'\n.B       ANOP\n         AIF   (T'&LRECL NE 'O').C\n&LRL     SETC  '133'\n         AGO   .D\n.C       ANOP\n&LRL     SETC  '&LRECL'\n.D       ANOP\n&P       SETC  '&PREFIX'\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DATA').DATA\n         AIF   ('&TYPE' EQ 'COM').COM\n         MNOTE 8,'DER001E invalid TYPE. Use DSECT, CSECT, COM or DATA.'\n         MEXIT\n*\n.DSECT   ANOP\n&P.DR    DSECT\n         AGO   .BEGIN\n.CSECT   ANOP\n&P.DR    CSECT\n         AGO   .BEGIN\n.COM     ANOP\n&P.DR    COM\n         AGO   .BEGIN\n.DATA    ANOP\n&P.DR    DS    0D\n.BEGIN   ANOP\n&NAME    DS    0D\n&P.1     DC    CL&LRL' '\n         ORG   &P.1\n         DC    CL58'REPORT   DATE     TIME  DESCRIPTION'\n         DC    CL53'PAGES RECIPIENT        JOB      JES #'\n&P.1CODE DC    CL9'&CDE'\n         ORG   ,\n&P.2     DC    CL&LRL' '\n         ORG   &P.2\n&P.2RPTN DC    CL8' '\n         DC    C' '\n&P.2DATE DC    C'YY/MM/DD'\n         DC    C' '\n&P.2TIME DC    C'HH:MM'\n         DC    CL32'ADS DIALOG REPORT WRITER'\n&P.2PCNT DC    CL7'0000004'\n         DC    C' '\n&P.2RECP DC    CL8' '\n         DC    CL9' '\n&P.2JOBN DC    CL8' '\n         DC    CL2' '\n&P.2JESN DC    CL4' '\n         ORG   &P.2+111\n&P.2CODE DC    CL9'&CDE'\n         ORG   ,\n&P.3     DC    CL&LRL' '\n         ORG   &P.3+32\n         DC    C'_________________________>> PAGE '\n&P.3PGN  DC    C'000001'\n         DC    C' <<_________________________'\n         ORG   ,\n         MEND\n./ ADD NAME=DEREDTMS 0100-01324-01324-1756-00301-00301-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  | DEREDTMS |\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    | Date   | Engineer   | V.R.L. | Description               |\n.*    +--------+------------+--------+---------------------------+\n.*    |98/02/23| Deru S.    | 1.0.0. | First development         |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    DEREDTMS &PREF,&SUFF,&OBJECT=,&TYPE=,&RC=,&ROUTCDE=,&TEXT=\n         COPY  DERGBLVR\n         LCLA  &LOBJ,&L1,&L2,&LTX\n         LCLB  &EC,&IC,&TXT\n         LCLC  &C,&S,&MCODE,&OBJ,&Q,&TX1,&TX2,&X,&WORD,&RTX\n         AIF   (T'&PREF EQ 'O').ERRPFX\n         AIF   (T'&SUFF EQ 'O').ERRSUF\n         AIF   (T'&OBJECT EQ 'O').ERROBJ\n&C       SETC  '&PREF'(7,2)\n&S       SETC  '&SUFF'\n&Q       SETC  ''''\n&X       SETC  'DER&SYSNDX'\n&NAME    STM   R0,R15,&DERSVGR\n         LA    R2,&DERMSGL+2\n         AIF   ('&OBJECT'(1,1) NE '&Q').B\n&LOBJ    SETA  K'&OBJECT-2\n         LA    R3,&LOBJ\n         LA    R1,=C&OBJECT\n         AGO   .CONT\n.B       AIF   ('&OBJECT'(1,1) NE '(').C\n         LR    R1,&OBJECT(1)\n         XR    R3,R3\n         ICM   R3,B'0011',0(R1)\n         LA    R1,2(,R1)\n         AGO   .CONT\n.C       LA    R1,&OBJECT\n         LA    R3,L'&OBJECT\n.CONT    AIF   ('&C' EQ '00').DER00\n         AIF   ('&C' EQ '01').DER01\n         AIF   ('&C' EQ '02').DER02\n         AIF   ('&C' EQ '03').DER03\n         AIF   ('&C' EQ '04').DER04\n         AIF   ('&C' EQ '05').DER05\n         AIF   ('&C' EQ '06').DER06\n.*-------------------------------------------------------------------\n.* DERWTR001I &OBJECT completed\n.* DERWTR002W &OBJECT was not completed, RC=cccc\n.* DERWTR003E &OBJECT error, RC=cccc\n.*\n.DER00   ANOP\n         AIF   (T'&TYPE NE 'O').D000A\n&TX1     SETC  ''\n         AGO   .D000\n.D000A   AIF   ('&TYPE' NE 'PARM').D000B\n&TX1     SETC  'Parameter '\n         AGO   .D000\n.D000B   AIF   ('&TYPE' NE 'COMMAND').D000\n&TX1     SETC  'Command '\n         AGO   .D000\n.D000    AIF   ('&S' NE 'I').D001\n&MCODE   SETC  '&PREF.1I'\n&TX2     SETC  ' was completed.'\n         AGO   .D00X\n.D001    AIF   ('&S' NE 'W').D002\n&MCODE   SETC  '&PREF.2W'\n&TX2     SETC  ' was not completed, RC='\n&EC      SETB  1\n         AGO   .D00X\n.D002    AIF   ('&S' NE 'E').D00X\n&MCODE   SETC  '&PREF.3E'\n&TX2     SETC  ' was error, RC='\n&EC      SETB  1\n.D00X    ANOP\n         AGO   .EDIT\n.*-------------------------------------------------------------------\n.* DERWTR011I SVC 99 &TYPE of &OBJECT completed\n.* DERWTR012W SVC 99 &TYPE of &OBJECT was not completed, EC=cc, IC=ii\n.* DERWTR013E SVC 99 &TYPE of &OBJECT error, EC=cccc, IC=iiii\n.*\n.DER01   ANOP\n&TX1     SETC  'SVC 99 '.'&TYPE'.' of '\n         AIF   ('&S' NE 'I').D011\n&MCODE   SETC  '&PREF.1I'\n&TX2     SETC  ' was completed.'\n         AGO   .D01X\n.D011    AIF   ('&S' NE 'W').D012\n&MCODE   SETC  '&PREF.2W'\n&TX2     SETC  ' was not completed, EC='\n&EC      SETB  1\n&IC      SETB  1\n         AGO   .D01X\n.D012    AIF   ('&S' NE 'E').D01X\n&MCODE   SETC  '&PREF.3E'\n&TX2     SETC  ' was error, EC='\n&EC      SETB  1\n&IC      SETB  1\n.D01X    ANOP\n         AGO   .EDIT\n.*-------------------------------------------------------------------\n.* DERWTR021I &TYPE &OBJECT found\n.* DERWTR022W &TYPE &OBJECT can not be found\n.* DERWTR023E &TYPE &OBJECT error, RC=cccc\n.*\n.DER02   ANOP\n&TX1     SETC  '&TYPE '\n         AIF   ('&S' NE 'I').D021\n&MCODE   SETC  '&PREF.1I'\n&TX2     SETC  ' was found.'\n         AGO   .D02X\n.D021    AIF   ('&S' NE 'W').D022\n&MCODE   SETC  '&PREF.2W'\n&TX2     SETC  ' was not found, RC='\n&EC      SETB  1\n         AGO   .D02X\n.D022    AIF   ('&S' NE 'E').D02X\n&MCODE   SETC  '&PREF.3E'\n&TX2     SETC  ' was error, RC='\n&EC      SETB  1\n.D02X    ANOP\n         AGO   .EDIT\n.*-------------------------------------------------------------------\n.* DERWTR031I &TYPE of file &OBJECT completed\n.* DERWTR032W Unable to &TYPE file &OBJECT, RC=cccc\n.* DERWTR033E Error encountered during &TYPE file &OBJECT, RC=cccc\n.*\n.DER03   ANOP\n         AIF   ('&S' NE 'I').D031\n&MCODE   SETC  '&PREF.1I'\n&TX1     SETC  '&TYPE'.' operation of file '\n&TX2     SETC  ' was completed.'\n         AGO   .D03X\n.D031    AIF   ('&S' NE 'W').D032\n&MCODE   SETC  '&PREF.2W'\n&TX1     SETC  'Unable to '.'&TYPE'.' file '\n&TX2     SETC  ', RC='\n&EC      SETB  1\n         AGO   .D03X\n.D032    AIF   ('&S' NE 'E').D03X\n&MCODE   SETC  '&PREF.3E'\n&TX1     SETC  'Error encountered during '.'&TYPE'.' file '\n&TX2     SETC  ', RC='\n&EC      SETB  1\n.D03X    ANOP\n         AGO   .EDIT\n.*-------------------------------------------------------------------\n.* DERWTR041I &OBJECT found. &TYPE subsystem request completed\n.* DERWTR042W &OBJECT was not found. &TYPE subsystem returned RC=cccc\n.* DERWTR043E Request rejected. &TYPE subsystem returned RC=cccc\n.*\n.*\n.DER04   ANOP\n         AIF   ('&S' NE 'I').D041\n&MCODE   SETC  '&PREF.1I'\n&TX1     SETC  ' '\n&TX2     SETC ' was found.  '.'&TYPE'.' subsystem rqst was completed.'\n         AGO   .D04X\n.D041    AIF   ('&S' NE 'W').D042\n&MCODE   SETC  '&PREF.2W'\n&TX1     SETC  ' '\n&TX2     SETC  ' was not found.  '.'&TYPE'.' subsystem returned RC='\n&EC      SETB  1\n         AGO   .D04X\n.D042    AIF   ('&S' NE 'E').D04X\n&MCODE   SETC  '&PREF.3E'\n&TX1     SETC  'Request '\n&TX2     SETC  ' rejected, '.'&TYPE'.' subsystem returned RC='\n&EC      SETB  1\n.D04X    ANOP\n         AGO   .EDIT\n.*-------------------------------------------------------------------\n.* DERWTR051I &TYPE is &OBJECT and is &TEXT\n.*\n.DER05   ANOP\n&MCODE   SETC  '&PREF.1I'\n&TX1     SETC  '&TYPE'.' is '\n         AIF   (T'&TEXT EQ 'O').D051\n&TXT     SETB  1\n&TX2     SETC  ' and is '\n         AGO   .D05X\n.D051    ANOP\n&TX2     SETC  ' '\n.D05X    ANOP\n         AGO   .EDIT\n.*-------------------------------------------------------------------\n.* DERWTR061I &TYPE &OBJECT &TEXT\n.*\n.DER06   ANOP\n&MCODE   SETC  '&PREF.1I'\n&TX1     SETC  '&TYPE '\n         AIF   (T'&TEXT EQ 'O').D061\n&TXT     SETB  1\n.D061    ANOP\n&TX2     SETC  ' '\n         AGO   .EDIT\n.*\n.EDIT    ANOP\n&TX1     SETC  '&MCODE &TX1'\n&L1      SETA  K'&TX1\n&L2      SETA  K'&TX2\n         MVC   0(&L1,R2),=C'&TX1'\n         BCTR  R3,0\n         EX    R3,&X.M\n         LA    R2,&L1+1(R3,R2)\n         MVC   0(&L2,R2),=C'&TX2'\n         LA    R2,&L2.(,R2)\n         AIF   (NOT &TXT).EC\n         AIF   ('&TEXT'(1,1) EQ '&Q').T01\n         AIF   ('&TEXT'(1,1) EQ '(').T02\n         MVC   0(L'&TEXT,R2),&TEXT\n         LA    R2,L'&TEXT.(,R2)\n         AGO   .EC\n.T01     ANOP\n&LTX     SETA  K'&TEXT-2\n         MVC   0(&LTX,R2),=CL&LTX&TEXT\n         LA    R2,&LTX.(,R2)\n         AGO   .EC\n.T02     ANOP\n&RTX     SETC  '&TEXT(1)'\n         XR    R1,R1\n         ICM   R1,B'0011',0(&RTX)\n         BCTR  R1,0\n         EX    R1,*+4\n         MVC   0(*-*,R2),2(&RTX)\n         LA    R2,1(R1,R2)\n.EC      AIF   (NOT &EC).FINISH\n         AIF   (&IC).IC\n         DEREDTRC &RC\n         MVC   0(4,R2),&DERWORD\n         MVI   4(R2),C'.'\n         LA    R2,4(,R2)\n         AGO   .FINISH\n.IC      AIF   (T'&RC EQ 'O').FINISH\n         AIF   ('&RC'(1,1) EQ '(').ICR\n         L     R3,&RC\n         AGO   .ICX\n.ICR     ANOP\n         LR    R3,&RC(1)\n.ICX     ANOP\n         LR    R0,R3\n         SRL   R0,16\n         SRL   R3,16\n         DEREDTRC (R0)\n         MVC   0(4,R2),&DERWORD\n         MVC   4(5,R2),=C', IC='\n         DEREDTRC (R3)\n         MVC   9(4,R2),&DERWORD\n         MVI   13(R2),C'.'\n         LA    R2,14(,R2)\n.FINISH  ANOP\n         LA    R3,&DERMSGL+2\n         SR    R2,R3\n         STH   R2,&DERMSGL\n         LA    R3,&DERMSGL\n         WTO   TEXT=(R3),ROUTCDE=&ROUTCDE,MF=(E,&DERWTOL)\n         B     &X.Z\n&X.M     MVC   &L1.(*-*,R2),0(R1)\n&X.Z     EQU   *\n         LM    R0,R15,&DERSVGR\n         MEXIT\n.ERRPFX  MNOTE 8.'DER017E Invalid prefix'\n         MEXIT\n.ERRSUF  MNOTE 8.'DER017E Invalid prefix'\n         MEXIT\n.ERROBJ  MNOTE 8.'DER018E Invalid object'\n         MEND\n./ ADD NAME=DERFFREC 0100-01324-01324-1756-00077-00077-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERFFREC \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Map Area of Report Specification Line\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERFFREC &TYPE=DSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DATA').DATA\n         AIF   ('&TYPE' EQ 'COM').COM\n         MNOTE 'DER001E Invalid TYPE. Use DSECT, CSECT, COM or DATA.'\n         MEXIT\n*\n* +--------------------------------------------------+\n* \u00a6 Sysout SVC 99 Allocation Request Parameter Block \u00a6\n* +--------------------------------------------------+\n*\n.DSECT   ANOP\n&LABEL   DSECT\n         AGO   .BEGIN\n.CSECT   ANOP\n&LABEL   CSECT\n         AGO   .BEGIN\n.COM     ANOP\n&LABEL   COM\n         AGO   .BEGIN\n.DATA    ANOP\n&LABEL   DS    0D\n.BEGIN   ANOP\nFFREC    DS    0D\nFFRRDW   DC    A(0)\nFFRDATA  DC    CL255' '\n         ORG   FFRRDW\nFFRECLEN DC    AL2(0)\n         ORG\n         MEND\n./ ADD NAME=DERGBLVR 0100-01324-01324-1756-00075-00075-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MODULE NAME  -  \u00a6 DERGBLVR \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*            SOURCE COPY MODULE CONTAIN LIST OF GLOBAL VARIABLES\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/20\u00a6 DERU S.    \u00a6 1.0.0. \u00a6 FIRST DEVELOPMENT         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         GBLA  &DERSVSZ    Size of savearea\n         GBLA  &DERCTR     Counter\n         GBLB  &DEREQU     EQUATES INDICATOR\n         GBLB  &DERESA     ESA INDICATOR\n         GBLB  &DERRENT    REENTRANT INDICATOR\n         GBLB  &DER390     S/390 INDICATOR\n         GBLB  &DERCCTB    CC table INDICATOR\n         GBLB  &DERSTOR    Storage indicator\n         GBLC  &DERCLSL    CLOSE LIST FORM\n         GBLC  &DERDATE\n         GBLC  &DERDBWD\n         GBLC  &DERDSN\n         GBLC  &DERDSNC\n         GBLC  &DEREDTL\n         GBLC  &DERMSGL\n         GBLC  &DERMID\n         GBLC  &DEROPNL\n         GBLC  &DERRDL\n         GBLC  &DERSVAR\n         GBLC  &DERSVGR\n         GBLC  &DERTIME\n         GBLC  &DERTMEL\n         GBLC  &DERWORD\n         GBLC  &DERWORK\n         GBLC  &DERWRL\n         GBLC  &DERWTOL\n         GBLC  &DERYDAT\n         GBLC  &DERYTIM\n         GBLC  &DERVLBL(100)               Label\n         GBLC  &DERVOPC(100)               OPcode\n         GBLC  &DERVDAT(100)               Data / Operands\n./ ADD NAME=DERMSG   0100-01324-01324-1756-00324-00324-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERMSG   \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Provide MSG skeleton of module extension\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERMSG &TYPE=CSECT,&AMODE=31,&RMODE=ANY,&PRINT=NOGEN\n         COPY  DERGBLVR\nDERMSG   &TYPE\n         AIF   ('&TYPE' NE 'CSECT').BEGIN\nDERMSG   AMODE &AMODE\nDERMSG   RMODE &RMODE\n.BEGIN   ANOP\n         DC    CL8'DERMSG'\n         SPACE ,\nMSGDIR   DS    0F\n         DC    A(XDI100)\n         DC    A(XDI101)\n         DC    A(XDI102)\n         DC    A(XDI103)\n         DC    A(XDI104)\n         DC    A(XDI105)\n         DC    A(XDI106)\n         DC    A(XDI107)\n         DC    A(XDI108)\n         DC    A(XDI109)\n         DC    A(XDI110)\n         DC    A(XDI111)\n         DC    A(XDI112)\n         DC    A(XDI113)\n         DC    A(XDI114)\n         DC    A(XDI115)\n         DC    A(XDI116)\n         DC    A(XDI117)\n         DC    A(XDI118)\n         DC    A(XDI119)\n         DC    A(XDI120)\n         DC    A(XDI121)\n         DC    A(XDI122)\n         DC    A(XDI123)\n         DC    A(XDI124)\n         DC    A(XDI125)\n         DC    A(XDI126)\n         DC    A(XDI127)\n         DC    A(XDI128)\n         DC    A(XDI129)\n         DC    A(WTR130)\n         DC    A(WTR131)\n         DC    A(WTR132)\n         DC    A(WTR133)\n         DC    A(WTR134)\n         DC    A(XDP135)\n         DC    A(XDP136)\n         DC    A(XDI137)\n         DC    A(XDI138)\n         DC    A(XDI139)\n         DC    A(XDI140)\n         DC    A(XDI141)\n         DC    A(XDI142)\n         DC    A(XDI143)\n         DC    A(XDI144)\n         DC    A(XDI145)\n         DC    A(XDI146)\n         DC    A(WTR147)\n         DC    A(WTR148)\n         DC    A(WTR149)\n         DC    A(WTR150)\n         DC    A(WTR151)\n         DC    A(WTR152)\n         DC    A(WTR153)\n         DC    A(WTR154)\n         DC    A(WTR155)\n         DC    A(WTR156)\n         DC    A(WTR157)\n         DC    A(WTR158)\n         DC    A(WTR159)\n         DC    A(WTR160)\n         DC    A(WTR161)\n         DC    A(WTR162)\n         DC    A(WTR163)\n         DC    A(WTR164)\n         DC    A(WTR165)\n         DC    A(WTR166)\n         DC    A(WTR167)\n         DC    A(XDS168)\n         DC    A(XDS169)\n         DC    A(XDI170)\n         DC    A(XDI171)\n         DC    A(XDI172)\n         DC    A(XDI173)\n         DC    A(XDI174)\n         DC    A(XDI175)\n         DC    A(XDI176)\n         DC    A(XDI177)\n         DC    A(XDI178)\n         DC    A(XDI179)\n         DC    A(XDI180)\n         DC    A(XDI181)\n         DC    A(XDI182)\n         DC    A(XDI183)\n         DC    A(XDI184)\n         DC    A(XDI185)\n         DC    A(XDI186)\n         DC    A(XDI187)\n         DC    A(XDI188)\nMSGDIRL  EQU   *-MSGDIR\n         DS    0D\nXDI100   WTO   'DERXDI100I XDI initialization in progress.',           +\n               MF=L\nXDI101   WTO   'DERXDI101I XDI extension module (WTX) invalid, XDI star+\n               t up canceled.',MF=L\nXDI102   WTO   'DERXDI102I XDI start up parameter is being checked.',  +\n               MF=L\nXDI103   WTO   'DERXDP103I XDI parameter is being checked.',           +\n               MF=L\nXDI104   WTO  'DERXDI104I XDI console interface is being initialized.',+\n               MF=L\nXDI105   WTO  'DERXDI105I XDI initialization complete.',               +\n               MF=L\nXDI106   WTO  'DERXDI106I XDI-to-JES2 handshaking is being connected.',+\n               MF=L\nXDI107   WTO   'DERXDI107I PARMLIB file is being read.',               +\n               MF=L\nXDI108   WTO   'DERXDI108W Invalid XDI parameter ignored',             +\n               MF=L\nXDI109   WTO   'DERXDI109I XDI parameter accepted and existing one will+\n                be overridden.',MF=L\nXDI110   WTO   'DERXDI110I CMD parameter accepted and has been schedule+\n               d.',MF=L\nXDI111   WTO   'DERXDI111I Attempt to call XIO routine ...',           +\n               MF=L\nXDI112   WTO   'DERXDI112I WTR processing complete ...',               +\n               MF=L\nXDI113   WTO   'DERXDI113I Attempt to wait for next sysout arrival',   +\n               MF=L\nXDI114   WTO   'DERXDI114E No job found.',                             +\n               MF=L\nXDI115   WTO   'DERXDI115E Invalid search arguments.',                 +\n               MF=L\nXDI116   WTO   'DERXDI116E Unpredictable error occurs.',               +\n               MF=L\nXDI117   WTO   'DERXDI117E Duplicate job name.',                       +\n               MF=L\nXDI118   WTO   'DERXDI118E Invalid job name.',                         +\n               MF=L\nXDI119   WTO   'DERXDI119E Invalid destination name.',                 +\n               MF=L\nXDI120   WTO   'DERXDI120E Authorization failed.',                     +\n               MF=L\nXDI121   WTO   'DERXDI121E Token map failed.',                         +\n               MF=L\nXDI122   WTOR  'DERXDI122R Enter ''W'' to WAIT, ''R'' to RETRY, or anyt+\n               hing else to EXIT',MF=L\nXDI123   WTO   'DERXDI123W Unknown interaction.',                      +\n               MF=L\nXDI124   WTO   'DERXDI124I XDI stopped by operator.',                  +\n               MF=L\nXDI125   WTO   'DERXDI125I Attempt to close all opened datasets.',     +\n               MF=L\nXDI126   WTO   'DERXDI126I PARMLIB dataset closed.',                   +\n               MF=L\nXDI127   WTO   'DERXDI127I INTRDR closed.',                            +\n               MF=L\nXDI128   WTO   'DERXDI128I SSI handshaking to JES2 disconnected.',     +\n               MF=L\nXDI129   WTO   'DERXDI129I XCOM-to-DISPATCH is being shutted down.',   +\n               MF=L\nWTR130   WTO   'DERWTR130W DCB inform that sysout format neither ASA no+\n               r MCC',MF=L\nWTR131   WTO   'DERWTR131I DCB inform that sysout in ASA format',      +\n               MF=L\nWTR132   WTO   'DERWTR132I DCB inform that sysout in MCC format',      +\n               MF=L\nWTR133   WTO   'DERWTR133E Wrong format encountered.  Sysout is neither+\n                ASA nor MCC format.',MF=L\nWTR134   WTO   'DERWTR134W Sysout then enforced to use S/390 standard f+\n               ormat.',MF=L\nXDP135   WTO   'DERXDP135I Parameter is being initialized from parmlib +\n               member.',MF=L\nXDP136   WTO   'DERXDP136I Now reviewing all parameters .....',        +\n               MF=L\nXDI137   WTO   'DERXDI137I Request has been sent to JES2 ....',        +\n               MF=L\nXDI138   WTO   'DERXDI138I JES2 SSI response is being evaluated ...',  +\n               MF=L\nXDI139   WTO   'DERXDI139W JES2 SSI response is negative, RC > 4 ...', +\n               MF=L\nXDI140   WTO   'DERXDI140W Unable to access JES2 SSI ECB due to SSREQ e+\n               rror ...',MF=L\nXDI141   WTO   'DERXDI141W Command incomplete, execution aborted',     +\n               MF=L\nXDI142   WTO   'DERXDI142I Going to sleep ..., next command should pass+\n               ed via MODIFY.',MF=L\nXDI143   WTO   'DERXDI143I Intercepting IASXWR00 in progress ...',MF=L\nXDI144   WTO   'DERXDI144E XDI failed, IASXWR00 was not intercepted',  +\n               MF=L\nXDI145   WTO   'DERXDI145E IASXWR00 successfully intercepted',         +\n               MF=L\nXDI146   WTO   'DERXDI146I Now is subsequent call, no reinitialization +\n               needed.',MF=L\nWTR147   WTO   'DERWTR147E Process terminated due to serious error .', +\n               MF=L\nWTR148   WTO   'DERWTR148E SYNAD of JES2FILE encountered, I/O terminate+\n               d before EOF.',MF=L\nWTR149   WTO   'DERWTR149W Bad sysout will be dumped out',MF=L\nWTR150   WTO   'DERWTR150W Bad sysout has been dumped out',MF=L\nWTR151   WTO   'DERWTR151W Bad sysout has been handled using JES2 PURGE+\n                command.',MF=L\nWTR152   WTO   'DERWTG152I Dump process of bad sysout begin ...',MF=L\nWTR153   WTO   'DERWTG153I Dump process of bad sysout finish ...',MF=L\nWTR154   WTO   'DERWTG154I Bad sysout allocation done ...',MF=L\nWTR155   WTO   'DERWTG155I Begin to transfer a block of bad sysout...',+\n               MF=L\nWTR156   WTO   'DERWTG156I First block of bad sysout transferred ...', +\n               MF=L\nWTR157   WTO   'DERWTG157I Sysout processing begin ...',               +\n               MF=L\nWTR158   WTO   'DERWTG158I Sysout dataset has been allocated.',        +\n               MF=L\nWTR159   WTO   'DERWTG159I Sysout dataset has been opened.',           +\n               MF=L\nWTR160   WTO   'DERWTG160I Sysout is bieng processed.',                +\n               MF=L\nWTR161   WTO   'DERWTG161I Sysout processing is almost finish.',       +\n               MF=L\nWTR162   WTO   'DERWTG162I Sysout dataset has been closed.',           +\n               MF=L\nWTR163   WTO   'DERWTG163I Sysout dataset has been deallocated.',      +\n               MF=L\nWTR164   WTO   'DERWTG164I Sysout processing finish.',                 +\n               MF=L\nWTR165   WTO   'DERXDS165I Original SSOB captured.',                   +\n               MF=L\nWTR166   WTO   'DERXDS166I SSSO found contigous below SSOB.',          +\n               MF=L\nWTR167   WTO   'DERXDS167W Process routed to IEFSD087 due to SSOB error+\n               .',MF=L\nXDS168   WTO   'DERXDS168I IEFSSREQ returned RC=0, we can take over all+\n               IASXWR00 efforts.',MF=L\nXDS169   WTO   'DERXDS169I SSOB has been modified for next request..!',+\n               MF=L\nXDI170   WTO   'DERXDS170I Input accepted, parameter has been updated',+\n               MF=L\nXDI171   WTO   'DERXDS171I XDI parameter library has been refreshed.', +\n               MF=L\nXDI172   WTO   'DERXDS172I Destination table is being refreshed.',     +\n               MF=L\nXDI173   WTO   'DERXDS173I Destination table has been successfully refr+\n               eshed.',MF=L\nXDI174   WTO   'DERXDS174I Contact to SSI is being retried',           +\n               MF=L\nXDI175   WTO   'DERXDS175I SSOB is being refreshed.',                  +\n               MF=L\nXDI176   WTO   'DERXDS176W LRECL is more than 6233, process enforced to+\n                use standard S/390 format.',MF=L\nXDI177   WTO   'DERXDS177I I/O processing from sysout to flat dataset i+\n               s in progress ...',MF=L\nXDI178   WTO   'DERXDS178I I/O processing of ASA formatted sysout is us+\n               ing PC/Dispatch format.',MF=L\nXDI179   WTO   'DERXDS179I I/O processing of ASA formatted sysout is us+\n               ing PC/Windows format.',MF=L\nXDI180   WTO   'DERXDS180I I/O processing of MCC formatted sysout is us+\n               ing PC/Dispatch format.',MF=L\nXDI181   WTO   'DERXDS181I I/O processing of MCC formatted sysout is us+\n               ing PC/Windows format.',MF=L\nXDI182   WTO   'DERXDS182I I/O processing of sysout is using S/390 stan+\n               dard format.',MF=L\nXDI183   WTO   'DERXDS183I I/O processing from sysout to flat dataset i+\n               s completed.',MF=L\nXDI184   WTO   'DERXDS184W No OUTGRP provided, requeue canceled.',     +\n               MF=L\nXDI185   WTO   'DERXDS185W Writer name still not privided, use NONAME',+\n               MF=L\nXDI186   WTO   'DERXDS186W Requeue does not work, sysout lost.',       +\n               MF=L\nXDI187   WTO   'DERXDS187E SSREQ rejected by SSI, sysout lost.',       +\n               MF=L\nXDI188   WTO   'DERXDS188E SSREQ rejected by JES, sysout lost.',       +\n               MF=L\n         EJECT ,\n         AIF   ('&TYPE' NE 'CSECT').EXIT\n         END   DERMSG\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERS99AL 0100-01324-01324-1756-00159-00159-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERS99AL \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*               Build an SVC 99 parameter list structure for\n.*               dataset allocation function.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*         USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE\n.*               PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'\n.*               PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST\n.*               CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.\n.*               EX. -  PARMLIB  DERS99AL DSN='SYS1.PARMLIB'\n.*                                    ... ANY OTHER CODE\n.*                                    LA  R1,PARMLIB\n.*                                    SVC 99\n.*                                    ... ANY OTHER CODE\n.*         DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY\n.*               PARMETERS THAT WILL BE GENERATED FOR DYNAMIC\n.*               ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.\n.*               THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO\n.*               ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE\n.*               PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF\n.*               ALLOCATING IT.\n.*\n.*         LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.\n.*               SOME OF THESE ARE :\n.*                       1. DAER    WHICH  POINTS TO THE ERROR CODE\n.*                                        FROM SVC 99\n.*                       2. DAIN    WHICH  POINTS TO THE INFORMATION\n.*                                        CODE FROM SVC 99\n.*               ALSO, EACH VALUE SUCH AS THE DSNAME TO ALLOCATE\n.*               HAS A LABEL ASSOCIATED WITH IT FOR EASY REFERENCE.\n.*\n.*\n.*\n.*    Authors -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/17\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First developmentn        \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*\n.*********************************************************************\n         MACRO\n&NAME    DERS99AL &DSN=,           THE DATASET NAME                    +\n               &DD=,               DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &GETDD=,            DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &MEMBER=,           MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &DISP=,             DISP IF NORMAL EOJ, DISP=(OLD,KEEP) +\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         +\n               &SPACE=,            SPACE, I.E SPACE=(TRK,(2,1,80),RLSE)+\n               &VOLSER=,           VOLUME SERIAL #                     +\n               &UNIT=,             UNIT DESIGNATION                    +\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      +\n               &FREE=,             DEALLOCATE AT CLOSE                 +\n               &COPIES=,           COPIES OF YOUR SYSOUT               +\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             +\n               &EXPDT=,            EXPIDATION DATE                     +\n               &RETPD=,            RETENTION PERIOD                    +\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           +\n               &BLKSIZE=,          BLOCK SIZE                          +\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       +\n               &FORM=,             FORM NAME SPECIFICATION.            +\n               &LRECL=,            LOGICAL RECORD LENGTH               +\n               &PREFIX=A,          UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   +\n               &SSREQ=,            SPECIFY REQUEST TO NAMED SUBSYSTEM  +\n               &DSORG=,            DATASET Organization                +\n               &RECFM=,            Record format                       +\n               &EXTRB=,            Reqst S99RBX                        +\n               &RECBUF=,           Reqst record buffer allocation      +\n               &TYPE=              Map definition type\n         COPY  DERGBLVR\n         LCLC  &STAT,&NDISP,&SPTYPE,&SPSIZE,&SPRLSE\n         AIF   (N'&DISP LT 2).NOSTAT\n&STAT    SETC  '&DISP(1)'\n&NDISP   SETC  '&DISP(2)'\n         AGO   .GO1\n.NOSTAT  ANOP\n&STAT    SETC  ''\n&NDISP   SETC  '&DISP'\n.GO1     AIF   (T'&SPACE EQ 'O').FINAL\n         AIF   (N'&SPACE EQ 1).SPC1\n         AIF   (N'&SPACE EQ 2).SPC2\n         AIF   (N'&SPACE GE 3).SPC3\n         AGO   .FINAL\n.SPC1    ANOP\n&SPTYPE  SETC  ''\n&SPSIZE  SETC  '&SPACE'\n&SPRLSE  SETC  ''\n         AGO   .FINAL\n.SPC2    ANOP\n&SPTYPE  SETC  '&SPACE(1)'\n&SPSIZE  SETC  '&SPACE(2)'\n&SPRLSE  SETC  ''\n         AGO   .FINAL\n.SPC3    ANOP\n&SPTYPE  SETC  '&SPACE(1)'\n&SPSIZE  SETC  '&SPACE(2)'\n&SPRLSE  SETC  'YES'\n.FINAL   ANOP\n&NAME    DERS99DA DSN=&DSN,                                            +\n               DD=&DD,                                                 +\n               GETDD=&GETDD,                                           +\n               MEMBER=&MEMBER,                                         +\n               DISP=&NDISP,                                            +\n               STATUS=&STAT,                                           +\n               CDISP=&CDISP,                                           +\n               TYPSP=&SPTYPE,                                          +\n               SPACE=&SPSIZE,                                          +\n               RLSE=&SPRLSE,                                           +\n               VOLSER=&VOLSER,                                         +\n               UNIT=&UNIT,                                             +\n               SYSOUT=&SYSOUT,                                         +\n               FREE=&FREE,                                             +\n               COPIES=&COPIES,                                         +\n               LABEL=&LABEL,                                           +\n               EXPDT=&EXPDT,                                           +\n               RETPD=&RETPD,                                           +\n               DUMMY=&DUMMY,                                           +\n               BLKSIZE=&BLKSIZE,                                       +\n               FUNC=&FUNC,                                             +\n               FORM=&FORM,                                             +\n               LRECL=&LRECL,                                           +\n               PREFIX=&PREFIX,                                         +\n               DCB=&DCB,                                               +\n               SSREQ=&SSREQ,                                           +\n               DSORG=&DSORG,                                           +\n               RECFM=&RECFM,                                           +\n               EXTRB=&EXTRB,                                           +\n               RECBUF=&RECBUF,                                         +\n               TYPE=&TYPE\n         MEND\n./ ADD NAME=DERS99CH 0100-01324-01324-1756-00564-00564-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERS99CH \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*               Build an SVC 99 parameter list structure for\n.*               dataset allocation function.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*         USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE\n.*               PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'\n.*               PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST\n.*               CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.\n.*               EX. -  PARMLIB  DERS99DA DSN='SYS1.PARMLIB'\n.*                                    ... ANY OTHER CODE\n.*                                    LA  R1,PARMLIB\n.*                                    SVC 99\n.*                                    ... ANY OTHER CODE\n.*         DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY\n.*               PARMETERS THAT WILL BE GENERATED FOR DYNAMIC\n.*               ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.\n.*               THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO\n.*               ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE\n.*               PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF\n.*               ALLOCATING IT.\n.*\n.*\n.*\n.*    Authors -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/17\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First developmentn        \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*\n.*********************************************************************\n         MACRO\n&NAME    DERS99CH &DSN=,           THE DATASET NAME                    +\n               &DD=,               DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &GETDD=,            DDNAME returned after dynalloc      +\n               &MEMBER=,           MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &CLASS=,            (For sysout only)                   +\n               &STATUS=,           DISP status                         +\n               &DISP=,             DISP IF NORMAL EOJ,                 +\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         +\n               &TYPSP=,            SPACE type blocked, TRK, or CYL     +\n               &SPACE=,            SPACE size =(prim,sec,dirblock)     +\n               &RLSE=,             SPACE RLSE to release unused space  +\n               &VOLSER=,           VOLUME SERIAL #                     +\n               &UNIT=,             UNIT DESIGNATION                    +\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      +\n               &FREE=,             DEALLOCATE AT CLOSE                 +\n               &COPIES=,           COPIES OF YOUR SYSOUT               +\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             +\n               &EXPDT=,            EXPIDATION DATE                     +\n               &RETPD=,            RETENTION PERIOD                    +\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           +\n               &BLKSIZE=,          BLOCK SIZE                          +\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       +\n               &FORM=,             FORM NAME SPECIFICATION.            +\n               &LRECL=,            LOGICAL RECORD LENGTH               +\n               &PREFIX=,           UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   +\n               &DSORG=,            SPECIFY DATASET ORGANIZATION        +\n               &RECFM=,            SPECIFY RECORD FORMAT               +\n               &SSREQ=,            SPECIFY REQUEST TO NAMED SUBSYSTEM  +\n               &BREG=2,            SPECIFY BASE REGISTER               +\n               &SVC99=,            SPECIFY EXECUTION OF SVC 99         +\n               &TOLFAIL=,          SPECIFY tolerable error             +\n               &ERRMSG=,           Display error msg                   +\n               &LOC=               LOCATION of PARM\n         COPY  DERGBLVR\n         LCLB  &USING,&GDD\n         LCLC  &SPRI,&SSEC,&DIR,\n         LCLC  &X,&XX,&Q,&BASE,&XBASE,&REG,&LBL\n&X       SETC  '&PREFIX.RB'\n&XX      SETC  '&PREFIX.XRB'\n&LBL     SETC  'DER&SYSNDX'\n&XBASE   SETC  '&X.P'\n&Q       SETC  ''''\n         AIF   (T'&LOC NE 'O').GO\n         MNOTE 8,'DER009E LOC must be specified to locate target area.'\n         AGO   .FINISH\n.GO      AIF   (T'&PREFIX NE 'O').CONT1\n         MNOTE 8,'DER010E PREFIX must be specified.'\n         AGO   .FINISH\n.CONT1   AIF   (T'&SPACE EQ 'O').NOSPACE\n         AIF   (N'&SPACE EQ 1).SPC1\n         AIF   (N'&SPACE EQ 2).SPC2\n         AIF   (N'&SPACE GE 3).SPC3\n         AGO   .NOSPACE\n.SPC1    ANOP\n&SPRI    SETC  '&SPACE'\n&SSEC    SETC  '0'\n&DIR     SETC  '0'\n         AGO   .BEGIN\n.SPC2    ANOP\n&SPRI    SETC  '&SPACE(1)'\n&SSEC    SETC  '&SPACE(2)'\n&DIR     SETC  '0'\n         AGO   .BEGIN\n.SPC3    ANOP\n&SPRI    SETC  '&SPACE(1)'\n&SSEC    SETC  '&SPACE(2)'\n&DIR     SETC  '&SPACE(3)'\n         AGO   .BEGIN\n.NOSPACE ANOP\n&SPRI    SETC  '0'\n&SSEC    SETC  '0'\n&DIR     SETC  '0'\n.BEGIN   AIF   ('&LOC' EQ '0').C001\n         AIF   ('&LOC' EQ '*').C001\n&USING   SETB  1\n&BASE    SETC  '&LOC'\n         AIF   ('&LOC'(1,1) EQ '(').C000\n&BASE    SETC  '&BREG'\n         L     &BASE,&LOC\n.C000    USING &XBASE,&BASE\n.C001    AIF   (T'&DSN EQ 'O').C002\n         MVI   &X.DSN,C' '\n         MVC   &X.DSN+1(L'&X.DSN-1),&X.DSN\n         AIF   ('&DSN'(1,1) EQ '(').C001R\n         AIF   ('&DSN'(1,1) EQ '&Q').C001Q\n         MVC   &X.DSN,&DSN\n         AGO   .C001X\n.C001R   MVC   &X.DSN,0&DSN\n         AGO   .C001X\n.C001Q   MVC   &X.DSN(K'&DSN-2),=C&DSN\n.C001X   ANOP\n         STM   R0,R2,&DERSVGR\n         LA    R1,&X.DSN\n         LR    R0,R1\n         LA    R2,44\n&LBL.A   CLI   0(R1),C' '\n         BE    &LBL.B\n         LA    R1,1(,R1)\n         BCT   R2,&LBL.A\n&LBL.B   SR    R1,R0\n         STH   R1,&X.DSN-2\n         LM    R0,R2,&DERSVGR\n.C002    AIF   (T'&DD EQ 'O').C003\n         AIF   (T'&GETDD EQ 'O').C002GO\n         MNOTE 8,'DER022E DD and GETDD are muttually exclusive.'\n         AGO   .C003\n.C002GO  MVI   &X.DDN-1,L'&X.DDN\n         MVC   &X.DDN+1(L'&X.DDN-1),&X.DDN\n         MVC   &X.DDN-6(2),=X'0001'          Specify DDname\n         AIF   ('&DD'(1,1) EQ '(').C002R\n         AIF   ('&DD'(1,1) EQ '&Q').C002Q\n         MVC   &X.DDN,&DD\n         AGO   .C002X\n.C002R   MVC   &X.DDN,0&DD\n         AGO   .C002X\n.C002Q   MVC   &X.DDN,=CL8&DD\n.C002X   ANOP\n         STM   R0,R2,&DERSVGR\n         LA    R1,&X.DDN\n         LR    R0,R1\n         LA    R2,8\n&LBL.C   CLI   0(R1),C' '\n         BE    &LBL.D\n         LA    R1,1(,R1)\n         BCT   R2,&LBL.C\n&LBL.D   SR    R1,R0\n         STH   R1,&X.DDN-2\n         LM    R0,R2,&DERSVGR\n.C003    AIF   (T'&MEMBER EQ 'O').C004\n         MVI   &X.MEM,C' '\n         MVC   &X.MEM+1(L'&X.MEM-1),&X.MEM\n         MVI   &X.MEM-1,L'&X.MEM\n         AIF   ('&MEMBER'(1,1) EQ '(').C003R\n         AIF   ('&MEMBER'(1,1) EQ '&Q').C003Q\n         MVC   &X.MEM,&MEMBER\n         AGO   .C003X\n.C003R   MVC   &X.MEM,0&MEMBER\n         AGO   .C003X\n.C003Q   MVC   &X.MEM(K'&MEMBER-2),=C&MEMBER\n.C003X   ANOP\n         STM   R0,R2,&DERSVGR\n         LA    R1,&X.MEM\n         LR    R0,R1\n         LA    R2,8\n&LBL.E   CLI   0(R1),C' '\n         BE    &LBL.F\n         LA    R1,1(,R1)\n         BCT   R2,&LBL.E\n&LBL.F   SR    R1,R0\n         STH   R1,&X.MEM-2\n         LM    R0,R2,&DERSVGR\n.C004    AIF   (T'&STATUS EQ 'O').C005\n         AIF   ('&STATUS' EQ 'OLD').C004B1 OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').C004B2 MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').C004B3 NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').C004B4 SHR = X'08'\n         MNOTE 8,'DER020E &STATUS INVALID FOR STATUS DISP PARAMETER'\n         AGO   .C005\n.C004B1  ANOP\n         MVI   &X.STS,X'01'\n         AGO   .C005\n.C004B2  ANOP\n         MVI   &X.STS,X'02'\n         AGO   .C005\n.C004B3  ANOP\n         MVI   &X.STS,X'04'\n         AGO   .C005\n.C004B4  ANOP\n         MVI   &X.STS,X'08'\n         AGO   .C005\n.C005    AIF   (T'&DISP EQ 'O').C006\n         AIF   ('&DISP' EQ 'UNCATLG').C005C1 UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C005C2   CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C005C3  DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C005C4    KEEP    = X'08'\n         MNOTE 8,'DER020E &DISP INVALID FOR DISP PARAMETER'\n         AGO   .C006\n.C005C1  ANOP\n         MVI   &X.DSP,X'01'         CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .C006\n.C005C2  ANOP\n         MVI   &X.DSP,X'02'         CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .C006\n.C005C3  ANOP\n         MVI   &X.DSP,X'04'         CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .C006\n.C005C4  ANOP\n         MVI   &X.DSP,X'08'         CONSTANT FOR KEEP   AT NORMAL EOJ\n.C006    AIF   (T'&CDISP EQ 'O').C007\n         AIF   ('&CDISP' EQ 'UNCATLG').C006D1 UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').C006D2   CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').C006D3  DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').C006D4    KEEP    = X'08'\n         MNOTE 8,'DER020E &DISP INVALID FOR DISP PARAMETER'\n         AGO   .C007\n.C006D1  ANOP\n         MVI   &X.CDS,X'01'         CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .C007\n.C006D2  ANOP\n         MVI   &X.CDS,X'02'         CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .C007\n.C006D3  ANOP\n         MVI   &X.CDS,X'04'         CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .C007\n.C006D4  ANOP\n         MVI   &X.CDS,X'08'         CONSTANT FOR KEEP   AT NORMAL EOJ\n.C007    AIF   (T'&SPACE EQ 'O').C008\n         AIF   (T'&TYPSP EQ 'O').C007B\n         AIF   ('&TYPSP' EQ 'TRK').C007A2\n         AIF   ('&TYPSP' EQ 'CYL').C007A3\n         AIF   ('&TYPSP'(1,1) EQ '(').C007A\n         MVC   &X.SPT,=AL3(&TYPSP)\n         AGO   .C007A1\n.C007A   STCM  &TYPSP,B'0111',&X.SPT\n.C007A1  MVC   &X.SPT-4(4),=XL4'00090103'   BLOCKS\n         AGO   .C007B\n.C007A2  MVC   &X.SPT-4(4),=XL4'00070000'   TRKS\n         AGO   .C007B\n.C007A3  MVC   &X.SPT-4(4),=XL4'00080000'   CYLS\n.C007B   AIF   ('&SPRI'(1,1) EQ '(').C007B1\n         MVC   &X.SPP,=AL3(&SPRI)\n         AGO   .C007C\n.C007B1  STCM  &SPRI,B'0111',&X.SPP\n.C007C   AIF   ('&SSEC'(1,1) EQ '(').C007C1\n         MVC   &X.SPS,=AL3(&SSEC)\n         AGO   .C007D\n.C007C1  STCM  &SSEC,B'0111',&X.SPS\n.C007D   AIF   ('&DIR'(1,1) EQ '(').C007D1\n         MVC   &X.SPD,=AL3(&DIR)\n         AGO   .C008\n.C007D1  STCM  &DIR,B'0111',&X.SPD\n.C008    AIF   (T'&VOLSER EQ 'O').C009\n         MVI   &X.VOL,C' '\n         MVC   &X.VOL+1(L'&X.VOL-1),&X.VOL\n         MVI   &X.VOL-1,L'&X.VOL\n         AIF   ('&VOLSER'(1,1) EQ '(').C008R\n         AIF   ('&VOLSER'(1,1) EQ '&Q').C008Q\n         MVC   &X.VOL,&VOLSER\n         AGO   .C009\n.C008R   MVC   &X.VOL,0&VOLSER\n         AGO   .C009\n.C008Q   MVC   &X.VOL(K'&VOLSER-2),=C&VOLSER\n.C009    AIF   (T'&UNIT EQ 'O').C010\n         MVI   &X.UNT,C' '\n         MVC   &X.UNT+1(L'&X.UNT-1),&X.UNT\n         MVI   &X.UNT-1,L'&X.UNT\n         AIF   ('&UNIT'(1,1) EQ '(').C009R\n         AIF   ('&UNIT'(1,1) EQ '&Q').C009Q\n         MVC   &X.UNT,&UNIT\n         AGO   .C010\n.C009R   MVC   &X.UNT,0&UNIT\n         AGO   .C010\n.C009Q   MVC   &X.UNT(K'&UNIT-2),=C&UNIT\n.C010    AIF   (T'&SYSOUT EQ 'O').C011\n         MVI   &X.SO,C' '\n         MVC   &X.SO+1(L'&X.SO-1),&X.SO\n         MVI   &X.SO-1,L'&X.SO\n         AIF   ('&SYSOUT'(1,1) EQ '(').C010R\n         AIF   ('&SYSOUT'(1,1) EQ '&Q').C010Q\n         MVC   &X.SO,&SYSOUT\n         AGO   .C011\n.C010R   MVC   &X.SO,0&SYSOUT\n         AGO   .C011\n.C010Q   MVC   &X.SO(K'&SYSOUT-2),=C&SYSOUT\n.C011    AIF   (T'&BLKSIZE EQ 'O').C012\n         AIF   ('&BLKSIZE'(1,1) EQ '(').C011A\n         MVC   &X.BSZ,=AL2(&BLKSIZE)\n         AGO   .C012\n.C011A   STH   &BLKSIZE,&X.BSZ\n.C012    AIF   (T'&LRECL EQ 'O').C013\n         AIF   ('&LRECL'(1,1) EQ '(').C012A\n         MVC   &X.LRL,=AL2(&LRECL)\n         AGO   .C013\n.C012A   STH   &LRECL,&X.LRL\n.C013    AIF   (T'&RECFM EQ 'O').C014\n         AIF   ('&RECFM' EQ 'M').C013A1\n         AIF   ('&RECFM' EQ 'A').C013A2\n         AIF   ('&RECFM' EQ 'S').C013A3\n         AIF   ('&RECFM' EQ 'B').C013A4\n         AIF   ('&RECFM' EQ 'D').C013A5\n         AIF   ('&RECFM' EQ 'V').C013A6\n         AIF   ('&RECFM' EQ 'F').C013A7\n         AIF   ('&RECFM' EQ 'U').C013A8\n         AIF   ('&RECFM' EQ 'FB').C013A9\n         AIF   ('&RECFM' EQ 'FBM').C013A10\n         AIF   ('&RECFM' EQ 'FBA').C013A11\n         AIF   ('&RECFM' EQ 'VB').C013A12\n         AIF   ('&RECFM' EQ 'VBM').C013A13\n         AIF   ('&RECFM' EQ 'VBA').C013A14\n         MNOTE 8,'DER020E &RECFM invalid for RECFM parameter.'\n         AGO   .C014\n.C013A1  ANOP\n         MVI   &X.RCF,X'02'      RECFM=M INDICATOR MACHINE CC\n         AGO   .C014\n.C013A2  ANOP\n         MVI   &X.RCF,X'04'      RECFM=A INDICATOR FOR ASA PRINTER\n         AGO   .C014\n.C013A3  ANOP\n         MVI   &X.RCF,X'08'      RECFM=S INDICATOR\n         AGO   .C014\n.C013A4  ANOP\n         MVI   &X.RCF,X'10'      RECFM=B INDICATOR\n         AGO   .C014\n.C013A5  ANOP\n         MVI   &X.RCF,X'20'      RECFM=D INDICATOR\n         AGO   .C014\n.C013A6  ANOP\n         MVI   &X.RCF,X'40'      RECFM=V INDICATOR\n         AGO   .C014\n.C013A7  ANOP\n         MVI   &X.RCF,X'80'      RECFM=F INDICATOR\n         AGO   .C014\n.C013A8  ANOP\n         MVI   &X.RCF,X'C0'      RECFM=U INDICATOR\n         AGO   .C014\n.C013A9  ANOP\n         MVI   &X.RCF,X'90'      RECFM=FB INDICATOR\n         AGO   .C014\n.C013A10 ANOP\n         MVI   &X.RCF,X'92'      RECFM=FBM INDICATOR\n         AGO   .C014\n.C013A11 ANOP\n         MVI   &X.RCF,X'94'      RECFM=FBA INDICATOR\n         AGO   .C014\n.C013A12 ANOP\n         MVI   &X.RCF,X'50'      RECFM=VB INDICATOR\n         AGO   .C014\n.C013A13 ANOP\n         MVI   &X.RCF,X'52'      RECFM=VBM INDICATOR\n         AGO   .C014\n.C013A14 ANOP\n         MVI   &X.RCF,X'54'      RECFM=VBA INDICATOR\n.C014    AIF   (T'&DSORG EQ 'O').C015\n         AIF   ('&DSORG' EQ 'DA').C014Y1\n         AIF   ('&DSORG' EQ 'DAU').C014Y2\n         AIF   ('&DSORG' EQ 'PS').C014Y3\n         AIF   ('&DSORG' EQ 'PSU').C014Y4\n         AIF   ('&DSORG' EQ 'PO').C014Y5\n         AIF   ('&DSORG' EQ 'POU').C014Y6\n         MNOTE 8,'DER020E &DSORG invalid for DSORD parameter'\n         AGO   .Z\n.C014Y1  ANOP\n         MVI   &X.ORG,X'20'      DSORG=DA INDICATOR\n         AGO   .C015\n.C014Y2  ANOP\n         MVI   &X.ORG,X'21'      DSORG=DAU INDICATOR\n         AGO   .C015\n.C014Y3  ANOP\n         MVI   &X.ORG,X'40'      DSORG=PS INDICATOR\n         AGO   .C015\n.C014Y4  ANOP\n         MVI   &X.ORG,X'41'      DSORG=PSU INDICATOR\n         AGO   .C015\n.C014Y5  ANOP\n         MVI   &X.ORG,X'02'      DSORG=PO INDICATOR\n         AGO   .C015\n.C014Y6  ANOP\n         MVI   &X.ORG,X'03'      DSORG=POU INDICATOR\n.C015    AIF   (T'&FORM EQ 'O').C016\n         MVI   &X.FRM,C' '\n         MVC   &X.FRM+1(L'&X.FRM-1),&X.FRM\n         MVI   &X.FRM-1,L'&X.FRM\n         AIF   ('&FORM'(1,1) EQ '(').C015R\n         AIF   ('&FORM'(1,1) EQ '&Q').C015Q\n         MVC   &X.FRM,&FORM\n         AGO   .C016\n.C015R   MVC   &X.FRM,0&FORM\n         AGO   .C016\n.C015Q   MVC   &X.FRM(K'&FORM-2),=C&FORM\n.C016    AIF   (T'&DCB EQ 'O').C017\n         MVI   &X.DCB,C' '\n         MVC   &X.DCB+1(L'&X.DCB-1),&X.DCB\n         MVI   &X.DCB-1,L'&X.DCB\n         AIF   ('&DCB'(1,1) EQ '(').C016R\n         AIF   ('&DCB'(1,1) EQ '&Q').C016Q\n         MVC   &X.DCB,&DCB\n         AGO   .C017\n.C016R   MVC   &X.DCB,0&DCB\n         AGO   .C017\n.C016Q   MVC   &X.DCB(K'&DCB-2),=C&DCB\n.C017    AIF   (T'&SSREQ EQ 'O').C018\n         MVI   &X.SSR,C' '\n         MVC   &X.SSR+1(L'&X.SSR-1),&X.SSR\n         MVI   &X.SSR-1,L'&X.SSR\n         AIF   ('&SSREQ'(1,1) EQ '(').C017R\n         AIF   ('&SSREQ'(1,1) EQ '&Q').C017Q\n         MVC   &X.SSR,&SSREQ\n         AGO   .C018\n.C017R   MVC   &X.SSR,0&SSREQ\n         AGO   .C018\n.C017Q   MVC   &X.SSR(K'&SSREQ-2),=C&SSREQ\n.C018    AIF   (T'&LABEL EQ 'O').C019\n         AIF   ('&LABEL' EQ 'NL').C018A1   NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').C018A2   SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').C018A3  NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').C018A4  SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').C018A5  BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').C018A6  LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').C018A7   AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').C018A8  AUL = X'48'\n         MNOTE 8,'DER020E &LABEL INVALID FOR LABEL PARAMETER.'\n         AGO   .C019\n.C018A1  ANOP\n         MVI   &X.LBL,X'01'        LABEL = NL\n         AGO   .C019\n.C018A2  ANOP\n         MVI   &X.LBL,X'02'        LABEL = SL\n         AGO   .C019\n.C018A3  ANOP\n         MVI   &X.LBL,X'04'        LABEL = NSL\n         AGO   .C019\n.C018A4  ANOP\n         MVI   &X.LBL,X'08'        LABEL = SUL\n         AGO   .C019\n.C018A5  ANOP\n         MVI   &X.LBL,X'10'        LABEL = BLP\n         AGO   .C019\n.C018A6  ANOP\n         MVI   &X.LBL,X'21'        LABEL = LTM\n         AGO   .C019\n.C018A7  ANOP\n         MVI   &X.LBL,X'40'        LABEL = AL\n         AGO   .C019\n.C018A8  ANOP\n         MVI   &X.LBL,X'48'        LABEL = AUL\n.C019    AIF   (T'&CLASS EQ 'O').C020\n         MVI   &X.CLS,C' '\n         MVC   &X.CLS+1(L'&X.CLS-1),&X.CLS\n         MVI   &X.CLS-1,L'&X.CLS\n         AIF   ('&CLASS'(1,1) EQ '(').C019R\n         AIF   ('&CLASS'(1,1) EQ '&Q').C019Q\n         MVC   &X.CLS,&CLASS\n         AGO   .C020\n.C019R   MVC   &X.CLS,0&CLASS\n         AGO   .C020\n.C019Q   MVI   &X.CLS(K'&CLASS-2),C&CLASS\n.C020    ANOP\n         AIF   (T'&GETDD EQ 'O').C022\n         AIF   (T'&DD EQ 'O').C020GO\n         MNOTE 8,'DER022E DD and GETDD are muttually exclusive.'\n         AGO   .C022\n.C020GO  AIF   ('&GETDD' EQ 'YES').C020Y\n         AIF   ('&GETDD' EQ 'Y').C020Y\n         AIF   ('&GETDD' EQ 'NO').C022\n         AIF   ('&GETDD' EQ 'N').C022\n         AIF   ('&GETDD'(1,1) EQ '&Q').C020ER\n         AGO   .C021\n.C020Y   MVC   &X.DDN-6(2),=X'0055'          Req to return DDname\n         MVC   &X.DDN-4(4),=X'00010008'      num & length of DDname\n         AGO   .C022\n.C020ER  MNOTE 8,'DER021E &GETDD invalid output address'\n         AGO   .C022\n.C021    ANOP\n         MVC   &X.DDN-6(2),=X'0055'          Req to return DDname\n         MVC   &X.DDN-4(4),=X'00010008'      num & length of DDname\n&GDD     SETB  1\n.C022    AIF   (T'&ERRMSG EQ 'O').C023\n         AIF   ('&ERRMSG' EQ 'NO').C023\n         L     R1,&XX.P               S99RBX address\n         USING S99RBX,R1\n         OI    S99EOPTS,S99EIMSG      Issue msg before return\n         AIF   ('&ERRMSG' EQ 'YES').C022X\n         AIF   ('&ERRMSG' NE 'WTO').C022X\n         OI    S99EOPTS,S99EWTP       Use WTO intead\n.C022X   ANOP\n         DROP  R1\n.C023    ANOP\n.FINISH  AIF   (NOT &USING).GETPLST\n         LA    1,&XBASE            Set GR 1 as parm pointer\n         DROP  &BASE\n         AGO   .CHKSVC\n.GETPLST ANOP\n         LA    1,&XBASE            Set GR 1 as parm pointer\n.CHKSVC  AIF   (T'&SVC99 EQ 'O').EXIT\n         AIF   ('&SVC99' EQ 'Y').SVC99\n         AIF   ('&SVC99' NE 'YES').EXIT\n.SVC99   SVC   99\n         AIF   (&GDD).COPYDD\n         AIF   (T'&TOLFAIL EQ 'O').EXIT\n.COPYDD  ANOP\n         LTR   R15,R15\n         BZ    &LBL.X\n         AIF   (T'&TOLFAIL EQ 'O').CONTCPY\n         XR    R1,R1\n         ICM   R1,B'0011',&X.ERR            Get error code\n         X     R1,=A(&TOLFAIL)\n         BNZ   &LBL.Z                       If not 0, skip\n         LR    R15,R1                       Set new RC\n.CONTCPY ANOP\n         B     &LBL.Z\n&LBL.X   EQU   *\n         AIF   (NOT &GDD).SVC99OK\n         AIF   ('&GETDD'(1,1) EQ '(').GDDR\n         MVC   &GETDD,&X.DDN\n         AGO   .SVC99OK\n.GDDR    ANOP\n&REG     SETC  '&GETDD(1)'\n         LA    &REG,&X.DDN\n.SVC99OK ANOP\n&LBL.Z   EQU   *\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERS99DA 0100-01324-01324-1756-00158-00158-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERS99DA \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*               Build an SVC 99 parameter list structure for\n.*               dataset allocation function.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*         USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE\n.*               PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'\n.*               PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST\n.*               CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.\n.*               EX. -  PARMLIB  DERS99DA DSN='SYS1.PARMLIB'\n.*                                    ... ANY OTHER CODE\n.*                                    LA  R1,PARMLIB\n.*                                    SVC 99\n.*                                    ... ANY OTHER CODE\n.*         DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY\n.*               PARMETERS THAT WILL BE GENERATED FOR DYNAMIC\n.*               ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.\n.*               THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO\n.*               ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE\n.*               PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF\n.*               ALLOCATING IT.\n.*\n.*\n.*\n.*    Authors -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/17\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First developmentn        \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*\n.*********************************************************************\n         MACRO\n&NAME    DERS99DA &DSN=,           THE DATASET NAME                    +\n               &DD=,               DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &GETDD=,            DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &MEMBER=,           MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &STATUS=,           DISP status                         +\n               &DISP=,             DISP IF NORMAL EOJ,                 +\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         +\n               &TYPSP=,            SPACE type blocked, TRK, or CYL     +\n               &SPACE=,            SPACE size =(prim,sec,dirblock)     +\n               &RLSE=,             SPACE RLSE to release unused space  +\n               &VOLSER=,           VOLUME SERIAL #                     +\n               &UNIT=,             UNIT DESIGNATION                    +\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      +\n               &FREE=,             DEALLOCATE AT CLOSE                 +\n               &COPIES=,           COPIES OF YOUR SYSOUT               +\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             +\n               &EXPDT=,            EXPIDATION DATE                     +\n               &RETPD=,            RETENTION PERIOD                    +\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           +\n               &BLKSIZE=,          BLOCK SIZE                          +\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       +\n               &FORM=,             FORM NAME SPECIFICATION.            +\n               &LRECL=,            LOGICAL RECORD LENGTH               +\n               &PREFIX=,           UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   +\n               &DSORG=,            SPECIFY DATASET ORGANIZATION        +\n               &RECFM=,            SPECIFY RECORD FORMAT               +\n               &SSREQ=,            SPECIFY REQUEST TO NAMED SUBSYSTEM  +\n               &TYPE=,             SPECIFY MAP TYPE                    +\n               &NOHOLD=,           (For sysout only)                   +\n               &CLASS=,            (For sysout only)                   +\n               &EXTRB=,            Req S99 RBX                         +\n               &RECBUF=,           Req record buffer                   +\n               &DEALLOC=           DEALLOCATION REQUEST\n         COPY  DERGBLVR\n         LCLC  &SPRI,&SSEC,&DIR,&DDVAR\n         AIF   (T'&DD EQ 'O').DD\n&DDVAR   SETC  '&DD'\n         AGO   .SPC\n         AIF   (T'&GETDD EQ 'O').SPC\n&DDVAR   SETC  '*'\n.SPC     AIF   (T'&SPACE EQ 'O').FINAL\n&SPRI    SETC  '0'\n&SSEC    SETC  '0'\n&DIR     SETC  '0'\n         AIF   (N'&SPACE EQ 1).SPC1\n         AIF   (N'&SPACE EQ 2).SPC2\n         AIF   (N'&SPACE GE 3).SPC3\n         AGO   .FINAL\n.SPC1    ANOP\n&SPRI    SETC  '&SPACE'\n         AGO   .FINAL\n.SPC2    ANOP\n&SPRI    SETC  '&SPACE(1)'\n&SSEC    SETC  '&SPACE(2)'\n         AGO   .FINAL\n.SPC3    ANOP\n&SPRI    SETC  '&SPACE(1)'\n&SSEC    SETC  '&SPACE(2)'\n&DIR     SETC  '&SPACE(3)'\n.FINAL   ANOP\n&NAME    DERS99PL DSN=&DSN,                                            +\n               DDN=&DDVAR,                                             +\n               MEM=&MEMBER,                                            +\n               STATUS=&STATUS,                                         +\n               DISP=&DISP,                                             +\n               CDISP=&CDISP,                                           +\n               TYPSP=&TYPSP,                                           +\n               SPACE=&SPRI,                                            +\n               SECSP=&SSEC,                                            +\n               DIRSP=&DIR,                                             +\n               RLSE=&RLSE,                                             +\n               VOLSER=&VOLSER,                                         +\n               UNIT=&UNIT,                                             +\n               SYSOUT=&SYSOUT,                                         +\n               FREE=&FREE,                                             +\n               COPIES=&COPIES,                                         +\n               LABEL=&LABEL,                                           +\n               EXPDT=&EXPDT,                                           +\n               RETPD=&RETPD,                                           +\n               DUMMY=&DUMMY,                                           +\n               BLKSIZE=&BLKSIZE,                                       +\n               FUNC=&FUNC,                                             +\n               FORM=&FORM,                                             +\n               LRECL=&LRECL,                                           +\n               PREFIX=&PREFIX,                                         +\n               DCB=&DCB,                                               +\n               RECFM=&RECFM,                                           +\n               DSORG=&DSORG,                                           +\n               SSREQ=&SSREQ,                                           +\n               DEALLOC=&DEALLOC,                                       +\n               NOHOLD=&NOHOLD,            (For sysout only)            +\n               CLASS=&CLASS,              (For sysout only)            +\n               EXTRB=&EXTRB,       Req S99 RBX                         +\n               RECBUF=&RECBUF,     Req record buffer                   +\n               TYPE=&TYPE\n         MEND\n./ ADD NAME=DERS99FR 0100-01324-01324-1756-00081-00081-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERS99FR \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*               Build an SVC 99 parameter list structure for\n.*               dataset deallocation function.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*         USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE\n.*               PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'\n.*               PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST\n.*               CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.\n.*               EX. -  PARMLIB  DERS99FR DD=LCLDS01\n.*                                    ... ANY OTHER CODE\n.*                                    LA  R1,PARMLIB\n.*                                    SVC 99\n.*                                    ... ANY OTHER CODE\n.*         DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY\n.*               PARMETERS THAT WILL BE GENERATED FOR DYNAMIC\n.*               ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.\n.*               THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO\n.*               ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE\n.*               PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF\n.*               ALLOCATING IT.\n.*\n.*\n.*    Authors -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/17\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First developmentn        \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*\n.*********************************************************************\n         MACRO\n&NAME    DERS99FR &DSN=,           THE DATASET NAME                    +\n               &DD=,               DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &NOHOLD=,           (For sysout only)                   +\n               &CLASS=,            (For sysout only)                   +\n               &MEMBER=,           MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &DISP=,             DISP IF NORMAL EOJ, DISP=(OLD,KEEP) +\n               &EXTRB=,            Reqst S99RBX                        +\n               &PREFIX=D,          UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &TYPE=              MAP definition type\n         COPY  DERGBLVR\n&NAME    DERS99DA DSN=&DSN,                                            +\n               DD=&DD,                                                 +\n               NOHOLD=&NOHOLD,            (For sysout only)            +\n               CLASS=&CLASS,              (For sysout only)            +\n               MEMBER=&MEMBER,                                         +\n               DISP=&DISP,                                             +\n               PREFIX=&PREFIX,                                         +\n               EXTRB=&EXTRB,                                           +\n               DEALLOC=YES,                                            +\n               TYPE=&TYPE\n         MEND\n./ ADD NAME=DERS99MD 0100-01324-01324-1756-00137-00137-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERS99MD \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*               Update an existing SVC 99 parameter list structure\n.*               for dataset allocation/deallocation function.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Authors -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/17\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First developmentn        \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*\n.*********************************************************************\n         MACRO\n&NAME    DERS99MD &LOC=,           PARM location (labelled location)   +\n               &DSN=,              THE DATASET NAME                    +\n               &DD=,               DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &GETDD=,            DDNAME returned after dynalloc      +\n               &CLASS=,                   (For sysout only)            +\n               &MEMBER=,           MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &DISP=,             DISP IF NORMAL EOJ, DISP=(OLD,KEEP) +\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         +\n               &SPACE=,            SPACE, I.E SPACE=(TRK,(2,1,80),RLSE)+\n               &VOLSER=,           VOLUME SERIAL #                     +\n               &UNIT=,             UNIT DESIGNATION                    +\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      +\n               &FREE=,             DEALLOCATE AT CLOSE                 +\n               &COPIES=,           COPIES OF YOUR SYSOUT               +\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             +\n               &EXPDT=,            EXPIDATION DATE                     +\n               &RETPD=,            RETENTION PERIOD                    +\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           +\n               &BLKSIZE=,          BLOCK SIZE                          +\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       +\n               &FORM=,             FORM NAME SPECIFICATION.            +\n               &LRECL=,            LOGICAL RECORD LENGTH               +\n               &PREFIX=A,          UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   +\n               &DSORG=,            DATASET Organization                +\n               &RECFM=,            Record format                       +\n               &SSREQ=,            SPECIFY REQUEST TO NAMED SUBSYSTEM  +\n               &SVC99=,            Specify wether SVC 99 executed here +\n               &TOLFAIL=,          Specify tolairable error            +\n               &ERRMSG=            Display error msg\n         COPY  DERGBLVR\n         LCLC  &STAT,&NDISP,&SPTYPE,&SPSIZE,&SPRLSE\n         AIF   (N'&DISP LT 2).NOSTAT\n&STAT    SETC  '&DISP(1)'\n&NDISP   SETC  '&DISP(2)'\n         AGO   .GO1\n.NOSTAT  ANOP\n&STAT    SETC  ''\n&NDISP   SETC  '&DISP'\n.GO1     AIF   (T'&SPACE EQ 'O').FINAL\n         AIF   (N'&SPACE EQ 1).SPC1\n         AIF   (N'&SPACE EQ 2).SPC2\n         AIF   (N'&SPACE GE 3).SPC3\n         AGO   .FINAL\n.SPC1    ANOP\n&SPTYPE  SETC  ''\n&SPSIZE  SETC  '&SPACE'\n&SPRLSE  SETC  ''\n         AGO   .FINAL\n.SPC2    ANOP\n&SPTYPE  SETC  '&SPACE(1)'\n&SPSIZE  SETC  '&SPACE(2)'\n&SPRLSE  SETC  ''\n         AGO   .FINAL\n.SPC3    ANOP\n&SPTYPE  SETC  '&SPACE(1)'\n&SPSIZE  SETC  '&SPACE(2)'\n&SPRLSE  SETC  'YES'\n.FINAL   ANOP\n&NAME    DERS99CH DSN=&DSN,                                            +\n               DD=&DD,                                                 +\n               GETDD=&GETDD,                                           +\n               CLASS=&CLASS,              (For sysout only)            +\n               MEMBER=&MEMBER,                                         +\n               DISP=&NDISP,                                            +\n               STATUS=&STAT,                                           +\n               CDISP=&CDISP,                                           +\n               TYPSP=&SPTYPE,                                          +\n               SPACE=&SPSIZE,                                          +\n               RLSE=&SPRLSE,                                           +\n               VOLSER=&VOLSER,                                         +\n               UNIT=&UNIT,                                             +\n               SYSOUT=&SYSOUT,                                         +\n               FREE=&FREE,                                             +\n               COPIES=&COPIES,                                         +\n               LABEL=&LABEL,                                           +\n               EXPDT=&EXPDT,                                           +\n               RETPD=&RETPD,                                           +\n               DUMMY=&DUMMY,                                           +\n               BLKSIZE=&BLKSIZE,                                       +\n               FUNC=&FUNC,                                             +\n               FORM=&FORM,                                             +\n               LRECL=&LRECL,                                           +\n               PREFIX=&PREFIX,                                         +\n               DCB=&DCB,                                               +\n               SSREQ=&SSREQ,                                           +\n               DSORG=&DSORG,                                           +\n               RECFM=&RECFM,                                           +\n               SVC99=&SVC99,                                           +\n               TOLFAIL=&TOLFAIL,                                       +\n               ERRMSG=&ERRMSG,                                         +\n               LOC=&LOC\n         MEND\n./ ADD NAME=DERS99PL 0100-01324-01324-1756-00664-00664-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERS99PL \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*               Build an SVC 99 parameter list structure for\n.*               dataset allocation function.\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*         USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE\n.*               PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'\n.*               PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST\n.*               CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.\n.*               EX. -  PARMLIB  DERS99PL DSN='SYS1.PARMLIB'\n.*                                    ... ANY OTHER CODE\n.*                                    LA  R1,PARMLIB\n.*                                    SVC 99\n.*                                    ... ANY OTHER CODE\n.*         DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY\n.*               PARMETERS THAT WILL BE GENERATED FOR DYNAMIC\n.*               ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.\n.*               THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO\n.*               ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE\n.*               PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF\n.*               ALLOCATING IT.\n.*\n.*\n.*\n.*    Authors -\n.*         Name (1) :  K. P. Lim\n.*                     Unknown MVS expert\n.*         Name (2) :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1987 K. P. Lim\n.*                     (C)1998 K. P. Lim & D. Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a678/05/17\u00a6 K. P. Lim  \u00a6 1.1.6  \u00a6 Last level of the original\u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 version declared          \u00a6\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 2.0.0. \u00a6 First modification from   \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 macro named DA;           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Add SSREQ TU option     \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Add DSORG TU option     \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Add RECFM TU option     \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Set BLKSIZE as default  \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6   blocked SPACE           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Put Mnote codes         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Make it as an inner of  \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6   @S99PARM                \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Change logic path for   \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6   DEALLOC option          \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Change unique label     \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6   suffix to prefix        \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Add map definition      \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6 - Make more flexible for  \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6   each entry typing       \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n.*\n.*********************************************************************\n         MACRO\n&NAME    DERS99PL &DSN=,           THE DATASET NAME                    +\n               &DDN=,              DDNAME TO ALLOCATE OR DEALLOCATE    +\n               &MEM=,              MEMBER NAME FOR PDS OR BIAS FOR GDG +\n               &NOHOLD=,           (For sysout only)                   +\n               &CLASS=,            (For sysout only)                   +\n               &STATUS=,           PRIMARY DISPOSITION                 +\n               &DISP=,             DISPOSITION IF NORMAL EOJ           +\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         +\n               &SPACE=,            PRIMARY SPACE REQUIREMENT           +\n               &TYPSP=,            TYPE OF SPACE TO ALLOCATE           +\n               &SECSP=,            SECONDARY SPACE REQUIREMENT         +\n               &VOLSER=,           VOLUME SERIAL #                     +\n               &UNIT=,             UNIT DESIGNATION                    +\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      +\n               &FREE=,             DEALLOCATE AT CLOSE                 +\n               &COPIES=,           COPIES OF YOUR SYSOUT               +\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             +\n               &EXPDT=,            EXPIDATION DATE                     +\n               &RETPD=,            RETENTION PERIOD                    +\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           +\n               &BLKSIZE=,          BLOCK SIZE                          +\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       +\n               &FORM=,             FORM NAME SPECIFICATION.            +\n               &LRECL=,            LOGICAL RECORD LENGTH               +\n               &DIRSP=,            # OF DIRECTORY BLOCKS OR INDEX SPACE+\n               &RLSE=,             TO REQUEST THE RELEASE OF UNUSED SP +\n               &PREFIX=A,          UNIQUE PREFIX FOR LABEL NAMES (1-2) +\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   +\n               &SSREQ=,            SPECIFY REQUEST TO NAMED SUBSYSTEM  +\n               &DSORG=,            SPECIFY dataset organization        +\n               &RECFM=,            SPECIFY record format               +\n               &DEALLOC=,          Set this RB for deallocation        +\n               &EXTRB=,            Request extension block             +\n               &RECBUF=,           Request record buffer               +\n               &TYPE=DATA          (DATA, DSECT, CSECT or COM)\n         COPY  DERGBLVR\n         LCLA  &A,&K,&I,&LDD\n         LCLB  &UNALLOC,&XRB,&RBUF\n         LCLC  &X,&DDCODE\n         AIF   (T'&LRECL EQ 'O').NORBUF\n         AIF   (T'&RECBUF EQ 'O').NORBUF\n         AIF   ('&RECBUF' NE 'YES').NORBUF\n&RBUF    SETB  1\n.NORBUF  ANOP\n&X       SETC  '&PREFIX'\n         AIF   ('&TYPE' EQ 'DATA').TDATA\n         AIF   ('&TYPE' EQ 'DSECT').TDSECT\n         AIF   ('&TYPE' EQ 'CSECT').TCSECT\n         AIF   ('&TYPE' EQ 'COM').TCOM\n         MNOTE 4,'DER022W TYPE=&TYPE invalid, TYPE=DATA assumed.'\n.TDATA   ANOP\n&NAME    DS    0D\n         AGO   .BEGIN\n.TDSECT  ANOP\n&NAME    DSECT\n         AGO   .BEGIN\n.TCSECT  ANOP\n&NAME    CSECT\n         AGO   .BEGIN\n.TCOM    ANOP\n&NAME    COM\n.BEGIN   ANOP\n&DDCODE  SETC  '0001'\n&LDD     SETA  K'&DDN\n         AIF   ('&DDN' NE '*').GOHEAD\n&DDCODE  SETC  '0055'\n&LDD     SETA  8\n.GOHEAD  ANOP\n&X.RBP   DS    0D\n         DC    X'80'\n         DC    AL3(&X.RB)\n&X.RB    DS    0F\n         DC    AL1(20)\n         AIF   (T'&DEALLOC EQ 'O').ALLOC\n         DC    AL1(02)             THIS CONTROL BLOCK IS FOR DEALLOCATE\n&UNALLOC SETB  1\n         AGO   .PAST\n.ALLOC   DC    AL1(01)             THIS CONTROL IS FOR ALLOCATION\n.PAST    ANOP\n&X.RBFL1 DC    X'00'             Flag 1 bit 0-7\n&X.RBFL1X DC    X'00'                   bit 8-9\n&X.RBERR DC    AL2(0)              ERROR CODE FROM DYNAMIC ALLOCATION\n&X.RBINF DC    AL2(0)              INFORMATION CODE FROM DYNALLOC\n         DC    A(&X.RBTU)          POINTER TO CALL LIST FOR SVC 99\n         AIF   (T'&EXTRB EQ 'O').CONT01\n         AIF   ('&EXTRB' NE 'YES').CONT01\n&X.XRBP  DC    A(&X.XRB)           S99RBX address\n&XRB     SETB  1\n         AGO   .CONT02\n.CONT01  DC    A(0)\n.CONT02  ANOP\n&X.RBFL2 DC   X'00'              Flag 2 bit 0-7\n&X.RBFL2X DC   X'00'                    bit 8-11\n         DC    AL2(0)\n&A       SETA  1\n         DS    0F                  FULLWORD ALIGNED\n&X.RBTU&A DC   X'&DDCODE'          KEY FOR DDNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(&LDD)           LENGTH OF DDNAME SPECIFIED\n&X.RBDDN DC    CL8'&DDN'             DDNAME PLUGGED IN HERE\n&A       SETA  &A+1\n.*<<\n         AIF   (T'&DSN EQ 'O').A\n         DS    0F\n&X.RBTU&A DC   X'0002'             KEY FOR DSNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(44)             LENGTH OF DSNAME MAX IS 44\n&K       SETA  K'&DSN\n         AIF   ('&DSN'(1,1) EQ '''').QDSN\n&X.RBDSN DC    CL44'&DSN'          DSNAME IS PLUGGED IN HERE\n         AGO   .OKDSN\n.QDSN    ANOP\n&X.RBDSN DC    CL44&DSN            DSNAME IS PLUGGED IN HERE\n.OKDSN   ANOP\n&A       SETA  &A+1\n.*<<\n.A       AIF   (T'&MEM EQ 'O').B\n         DS    0F\n&X.RBTU&A DC   X'0003'             KEY FOR MEMBER OR GDG SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&MEM\n         DC    XL2'&K'             LENGTH OF SPECFIED MEMBER NAME\n&X.RBMEM DC    CL8'&MEM'           THE MEMBER NAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.*<<\n.B       AIF   (&UNALLOC OR (T'&STATUS EQ 'O')).C\n         DS    0F\n&X.RBTU&A DC   X'0004'             KEY FOR PRIMARY DISPOSITION OF DDN\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE CODE\n&A       SETA  &A+1\n         AIF   ('&STATUS' EQ 'OLD').B1       OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').B2       MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').B3       NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').B4       SHR = X'08'\n         MNOTE 8,'DER020E &STATUS Invalid for STATUS DISP parameter'\n         AGO   .C\n.B1      ANOP\n&X.RBSTS DC    X'01'                CONSTANT FOR DISP=OLD\n         AGO   .C\n.B2      ANOP\n&X.RBSTS DC    X'02'                CONSTANT FOR DISP=MOD\n         AGO   .C\n.B3      ANOP\n&X.RBSTS DC    X'04'                CONSTANT FOR DISP=NEW\n         AGO   .C\n.B4      ANOP\n&X.RBSTS DC    X'08'                CONSTANT FOR DISP=SHR\n         AGO   .C\n.*<<\n.C       AIF   (T'&DISP EQ 'O').D\n         DS    0F\n&X.RBTU&A DC   X'0005'             KEY FOR NORMAL EOJ SPECIFICATION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS WILL ALWAYS BE A ONE BYTE KEY\n         AIF   ('&DISP' EQ 'UNCATLG').C1     UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C2       CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C3      DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C4        KEEP    = X'08'\n         MNOTE 8,'DER020E &DISP invalid for DISP parameter'\n         AGO   .D\n.C1      ANOP\n&X.RBDSP DC    X'01'                CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .D\n.C2      ANOP\n&X.RBDSP DC    X'02'                CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .D\n.C3      ANOP\n&X.RBDSP DC    X'04'                CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .D\n.C4      ANOP\n&X.RBDSP DC    X'08'                CONSTANT FOR KEEP   AT NORMAL EOJ\n         AGO   .D\n.*<<\n.D       AIF   (&UNALLOC OR (T'&CDISP EQ 'O')).E\n         DS    0F\n&X.RBTU&A DC   X'0006'             KEY FOR ABNORMAL EOJ DISPOSITION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE KEY\n         AIF   ('&CDISP' EQ 'UNCATLG').D1      UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').D2        CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').D3       DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').D4         KEEP    = X'08'\n         MNOTE 8,'DER020E &CDISP invalid for DISP parameter'\n         AGO   .E\n.D1      ANOP\n&X.RBCDS DC    X'01'               CONSTANT FOR UNCATLG IF ABEND\n         AGO   .E\n.D2      ANOP\n&X.RBCDS DC    X'02'               CONSTANT FOR CATLG  IF ABEND\n         AGO   .E\n.D3      ANOP\n&X.RBCDS DC    X'04'               CONSTANT FOR DELETE IF ABEND\n         AGO   .E\n.D4      ANOP\n&X.RBCDS DC    X'08'               CONSTANT FOR KEEP   IF ABEND\n         AGO   .E\n.*<<\n.E       AIF   (&UNALLOC).K\n         AIF   (T'&TYPSP NE 'O').E0\n         AIF   (T'&BLKSIZE EQ 'O').I\n&X.RBTU&A DC   X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n&X.RBSPT DC    AL3(&BLKSIZE)\n         AGO   .EE\n.E0      DS    0F\n         AIF   ('&TYPSP' EQ 'TRK').E1  IF TYPE OF SPACE SPECIFICATION\n         AIF   ('&TYPSP' EQ 'CYL').E2  IS NOT TRACKS OR CYLINDERS THEN\n&X.RBTU&A DC   X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n&X.RBSPT DC    AL3(&TYPSP)\n         AGO   .EE\n.E1      ANOP\n&X.RBTU&A DC   X'0007'             SPACE IS TO BE ALLOCATED IN TRKS\n         DC    XL5'0'\n         AGO   .EE\n.E2      ANOP\n&X.RBTU&A DC   X'0008'             SPACE IS TO BE ALLOCATED IN CYLS\n         DC    XL5'0'\n.EE      DC    XL1'0'\n&A       SETA  &A+1\n.*<<\n.F       AIF   (T'&SPACE EQ 'O').I\n         DS    0F\n&X.RBTU&A DC   X'000A'             KEY TO SPECIFY PRIMARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\n&X.RBSPP DC    AL3(&SPACE)\n&A       SETA  &A+1\n         AGO   .G\n.*<<\n.G       AIF   (T'&SECSP EQ 'O').H\n         DS    0F\n&X.RBTU&A DC   X'000B'             KEY TO SPECIFY SECONDARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\n&X.RBSPS DC    AL3(&SECSP)\n&A       SETA  &A+1\n.*<<\n.H       AIF   (T'&DIRSP EQ 'O').I\n         DS    0F\n&X.RBTU&A DC   X'000C'             KEY TO SPECIFY DIRECTORY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\n&X.RBSPD DC    AL3(&DIRSP)\n&A       SETA  &A+1\n.*<<\n.I       AIF   (T'&VOLSER EQ 'O').J\n         DS    0F\n&X.RBTU&A DC   X'0010'             KEY TO SPECIFY A PARTICULAR VOLSER\n         DC    XL2'1'\n&K       SETA  K'&VOLSER           PICK UP LENGTH OF NAME SPECIFIED\n         DC    XL2'&K'             AND USE THAT LENGTH\n&X.RBVOL DC    CL6'&VOLSER'          AND NAME\n&A       SETA  &A+1\n.*<<\n.J       AIF   (T'&UNIT EQ 'O').K\n         DS    0F\n&X.RBTU&A DC   X'0015'             KEY FOR UNIT SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&UNIT             PICK UP LENGTH OF UNIT NAME GIVEN\n         DC    AL2(&K)             THEN USE THAT LENGTH\n&X.RBUNT DC    CL8'&UNIT'            AND NAME\n&A       SETA  &A+1\n.*<<\n.K       AIF   (T'&SYSOUT EQ 'O').L\n         DS    0F\n&X.RBTU&A DC   X'0018'             KEY FOR SYSOUT CLASS SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&SYSOUT\n         DC    AL2(&K)\n&X.RBSO  DC    CL32'&SYSOUT'\n&A       SETA  &A+1\n.*<<\n.L       AIF   (T'&FORM EQ 'O').M\n         DS    0F\n&X.RBTU&A DC   X'001A'             KEY FOR FORMS ID SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&FORM             PICK UP LENGTH OF FORMS ID\n         DC    AL2(&K)             AND USE THAT LENGTH\n&X.RBFRM DC    CL8'&FORM'            AND THAT FORM NUMBER\n&A       SETA  &A+1\n.*<<\n.M       AIF   (T'&FREE EQ 'O').N\n         AIF   ('&FREE' NE 'CLOSE').M2\n         DS    0F\n&X.RBTU&A DC   X'001C'             KEY TO SPECIFY FREE=CLOSE\n&X.RBFRE DC    XL2'0'              MUST BE CODED FREE=CLOSE\n&A       SETA  &A+1                ALL ELSE WILL GENERATE MNOTE\n         AGO   .N\n.M2      MNOTE 8,'DER020E &FREE invalid for FREE parameter'\n.*<<\n.N       AIF   (T'&COPIES EQ 'O').O\n         DS    0F\n&X.RBTU&A DC   X'001D'             KEY TO SPECIFY MULTIPLE COPIES\n         DC    XL2'1'              OF OUTPUT.\n         DC    XL2'1'\n&X.RBCPY DC    AL1(&COPIES)        NUMBER OF COPIES REQUESTED\n&A       SETA  &A+1\n.*<<\n.O       AIF   (&UNALLOC OR (T'&LABEL EQ 'O')).P\n         DS    0F\n&X.RBTU&A DC   X'001E'             KEY TO SPECIFY TYPE LABEL\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF THIS FIELD IS ALWAYS ONE\n&A       SETA  &A+1\n         AIF   ('&LABEL' EQ 'NL').O1     NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').O2     SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').O3    NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').O4    SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').O5    BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').O6    LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').O7     AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').O8    AUL = X'48'\n         MNOTE 8,'DER020E &LABEL invalid for LABEL parameter'\n         AGO   .P\n.O1      ANOP\n&X.RBLBL DC    X'01'               LABEL = NL\n         AGO   .P\n.O2      ANOP\n&X.RBLBL DC    X'02'               LABEL = SL\n         AGO   .P\n.O3      ANOP\n&X.RBLBL DC    X'04'               LABEL = NSL\n         AGO   .P\n.O4      ANOP\n&X.RBLBL DC    X'08'               LABEL = SUL\n         AGO   .P\n.O5      ANOP\n&X.RBLBL DC    X'10'               LABEL = BLP\n         AGO   .P\n.O6      ANOP\n&X.RBLBL DC    X'21'               LABEL = LTM\n         AGO   .P\n.O7      ANOP\n&X.RBLBL DC    X'40'               LABEL = AL\n         AGO   .P\n.O8      ANOP\n&X.RBLBL DC    X'48'               LABEL = AUL\n         AGO   .P\n.*<<\n.P       AIF   (T'&EXPDT EQ 'O').Q\n         DS    0F\n&X.RBTU&A DC   X'0022'             KEY TO SPECIFY EXPIRATION DATE\n         DC    XL2'1'\n         DC    XL2'5'              FIELD IS FIVE NUMERICS\n&X.RBEXP DC    CL5'&EXPDT'         AND IS PUT IN HERE\n&A       SETA  &A+1\n.*<<\n.Q       AIF   (T'&RETPD EQ 'O').R\n         DS    0F\n&X.RBTU&A DC   X'0023'             KEY TO SPECIFY A RETENTION PERIOD\n         DC    XL2'1'\n         DC    XL2'2'              MAXIMUM LENGTH IS TWO\n&X.RBRET DC    AL2(&RETPD)         AND IS PLACED HERE.\n&A       SETA  &A+1\n.*<<\n.R       AIF   (T'&DUMMY EQ 'O').S\n         DS    0F\n&X.RBTU&A DC   X'0024'             KEY TO ALLOCATE A DUMMY DATA SET\n         DC    XL2'0'\n         DC    XL2'0'\n         DC    X'0'\n&A       SETA  &A+1\n.*<<\n.S       AIF   (&UNALLOC OR (T'&BLKSIZE EQ 'O')).T\n         DS    0F\n&X.RBTU&A DC   X'0030'             KEY TO SPECIFY THE BLOCKSIZE\n         DC    XL2'1'\n         DC    XL2'2'\n&X.RBBSZ DC    AL2(&BLKSIZE)\n&A       SETA  &A+1\n.*<<\n.T       AIF   (&UNALLOC OR (T'&FUNC EQ 'O')).U\n         DS    0F\n         AIF   ('&FUNC' EQ 'I').T2\n         MNOTE 8,'DER020E &FUNC invalid for FUNC parameter'\n         AGO   .U\n.T2      ANOP\n&X.RBTU&A DC   X'005A'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    X'80'\n&A       SETA  &A+1\n.*<<\n.U       AIF   (&UNALLOC OR (T'&LRECL EQ 'O')).V\n         DS    0F\n&X.RBTU&A DC   X'0042'             KEY TO SPECIFY THE LRECL\n         DC    XL2'1'\n         DC    XL2'2'\n&X.RBLRL DC    AL2(&LRECL)\n&A       SETA  &A+1\n.*<<\n.V       AIF   (T'&RLSE EQ 'O').W\n         DS    0F\n&X.RBTU&A DC   X'000D'             KEY  TO SPECIFY RELEASE SPACE\n         DC    XL2'0'\n&A       SETA  &A+1\n.*<<\n.W       AIF   (&UNALLOC OR (T'&DCB EQ 'O')).X\n         DS    0F\n&X.RBTU&A DC   X'002C' KEY TO SPECIFY DCB REFERENCE NAME\n         DC    XL2'1'\n&K       SETA  K'&DCB\n         DC    XL2'&K'             LENGTH OF DSN SPECIFIED\n&X.RBDCB DC    CL44'&DCB'             DSNAME TO COPY DCB FROM\n&A       SETA  &A+1\n.*<<\n.X       AIF   (T'&SSREQ EQ 'O').Y\n         DS    0F\n&X.RBTU&A DC   X'005C' KEY TO SPECIFY SUBSYSTEM REQUEST\n         DC    XL2'1'\n&K       SETA  K'&SSREQ\n         DC    XL2'&K'             LENGTH OF SUBSYSTEM NAME SPECIFIED\n&X.RBSSR DC    CL8'&SSREQ'           SUBSYSTEM NAME TARGETED\n&A       SETA  &A+1\n.*<<\n.Y       AIF   (&UNALLOC OR (T'&DSORG EQ 'O')).Z\n         DS    0F\n&X.RBTU&A DC   X'003C' KEY TO DATASET ORGANIZATION REQUEST\n         DC    XL2'1'\n         DC    XL2'2'              LENGTH OF ORG INDICATOR SPECIFIED\n         AIF   ('&DSORG' EQ 'DA').Y1\n         AIF   ('&DSORG' EQ 'DAU').Y2\n         AIF   ('&DSORG' EQ 'PS').Y3\n         AIF   ('&DSORG' EQ 'PSU').Y4\n         AIF   ('&DSORG' EQ 'PO').Y5\n         AIF   ('&DSORG' EQ 'POU').Y6\n         MNOTE 8,'DER020E &DSORG invalid for DSORD parameter'\n         AGO   .Z\n.Y1      ANOP\n&X.RBORG DC    X'20'             DSORG=DA INDICATOR\n         AGO   .YY\n.Y2      ANOP\n&X.RBORG DC    X'21'             DSORG=DAU INDICATOR\n         AGO   .YY\n.Y3      ANOP\n&X.RBORG DC    X'40'             DSORG=PS INDICATOR\n         AGO   .YY\n.Y4      ANOP\n&X.RBORG DC    X'41'             DSORG=PSU INDICATOR\n         AGO   .YY\n.Y5      ANOP\n&X.RBORG DC    X'02'             DSORG=PO INDICATOR\n         AGO   .YY\n.Y6      ANOP\n&X.RBORG DC    X'03'             DSORG=POU INDICATOR\n.YY      ANOP\n         DC    X'00'\n&A       SETA  &A+1\n.*<<\n.Z       AIF   (&UNALLOC OR (T'&RECFM EQ 'O')).XA\n         DS    0F\n&X.RBTU&A DC   X'0049' KEY TO RECORD FORMAT REQUEST\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF ORG INDICATOR SPECIFIED\n         AIF   ('&RECFM' EQ 'M').Z1\n         AIF   ('&RECFM' EQ 'A').Z2\n         AIF   ('&RECFM' EQ 'S').Z3\n         AIF   ('&RECFM' EQ 'B').Z4\n         AIF   ('&RECFM' EQ 'D').Z5\n         AIF   ('&RECFM' EQ 'V').Z6\n         AIF   ('&RECFM' EQ 'F').Z7\n         AIF   ('&RECFM' EQ 'U').Z8\n         AIF   ('&RECFM' EQ 'FB').Z9\n         AIF   ('&RECFM' EQ 'FBM').Z10\n         AIF   ('&RECFM' EQ 'FBA').Z11\n         AIF   ('&RECFM' EQ 'VB').Z12\n         AIF   ('&RECFM' EQ 'VBM').Z13\n         AIF   ('&RECFM' EQ 'VBA').Z14\n         MNOTE 8,'DER020E &RECFM invalid for RECFM parameter'\n         AGO   .FINAL\n.Z1      ANOP\n&X.RBRCF DC    X'02'             RECFM=M INDICATOR MACHINE CC\n         AGO   .ZZ\n.Z2      ANOP\n&X.RBRCF DC    X'04'             RECFM=A INDICATOR FOR ASA PRINTER\n         AGO   .ZZ\n.Z3      ANOP\n&X.RBRCF DC    X'08'             RECFM=S INDICATOR\n         AGO   .ZZ\n.Z4      ANOP\n&X.RBRCF DC    X'10'             RECFM=B INDICATOR\n         AGO   .ZZ\n.Z5      ANOP\n&X.RBRCF DC    X'20'             RECFM=D INDICATOR\n         AGO   .ZZ\n.Z6      ANOP\n&X.RBRCF DC    X'40'             RECFM=V INDICATOR\n         AGO   .ZZ\n.Z7      ANOP\n&X.RBRCF DC    X'80'             RECFM=F INDICATOR\n         AGO   .ZZ\n.Z8      ANOP\n&X.RBRCF DC    X'C0'             RECFM=U INDICATOR\n         AGO   .ZZ\n.Z9      ANOP\n&X.RBRCF DC    X'90'             RECFM=FB INDICATOR\n         AGO   .ZZ\n.Z10     ANOP\n&X.RBRCF DC    X'92'             RECFM=FBM INDICATOR\n         AGO   .ZZ\n.Z11     ANOP\n&X.RBRCF DC    X'94'             RECFM=FBA INDICATOR\n         AGO   .ZZ\n.Z12     ANOP\n&X.RBRCF DC    X'50'             RECFM=VB INDICATOR\n         AGO   .ZZ\n.Z13     ANOP\n&X.RBRCF DC    X'52'             RECFM=VBM INDICATOR\n         AGO   .ZZ\n.Z14     ANOP\n&X.RBRCF DC    X'54'             RECFM=VBA INDICATOR\n         AGO   .ZZ\n.*<<\n.ZZ      ANOP\n&A       SETA  &A+1\n.XA      AIF   (NOT &UNALLOC).FINAL\n         AIF   (T'&NOHOLD EQ 'O').XB\n         AIF   ('&NOHOLD' NE 'YES').XB\n         DS    0F\n&X.RBTU&A DC   X'000A' KEY TO RECORD NOHOLD spool\n         DC    XL2'0'\n&A       SETA  &A+1\n.XB      AIF   (T'&CLASS EQ 'O').FINAL\n         DS    0F\n&X.RBTU&A DC   X'0018' KEY TO RECORD alternate class\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF ORG INDICATOR SPECIFIED\n&X.RBCLS DC    CL1'0'\n&A       SETA  &A+1\n.FINAL   ANOP\n.*\n&I       SETA  1\n&A       SETA  &A-1\n         AIF   (&A LT 1).EXIT\n&X.RBTU  DS    0D\n.LOOP    AIF   (&I EQ &A).END\n         DC    A(&X.RBTU&I)\n&I       SETA  &I+1\n         AGO   .LOOP\n.END     DC    X'80'\n         DC    AL3(&X.RBTU&I)\n         AIF   (NOT &XRB).LEAVE\n&DERCTR  SETA  &DERCTR+1\n&I       SETA  &DERCTR\n&DERVLBL(&I)  SETC  ' '\n&DERVOPC(&I)  SETC  'DS'\n&DERVDAT(&I)  SETC  '0D'\n&I       SETA  &I+1\n&DERVLBL(&I)  SETC  '&X.XRB'\n&DERVOPC(&I)  SETC  'DC'\n&DERVDAT(&I)  SETC  'XL36''00'''\n&I       SETA  &I+1\n&DERVLBL(&I)  SETC  ' '\n&DERVOPC(&I)  SETC  'ORG'\n&DERVDAT(&I)  SETC  '&X.XRB'\n&I       SETA  &I+1\n&DERVLBL(&I)  SETC  ' '\n&DERVOPC(&I)  SETC  'DC'\n&DERVDAT(&I)  SETC  'CL6''S99RBX'',X''01'''\n&I       SETA  &I+1\n&DERVLBL(&I)  SETC  ' '\n&DERVOPC(&I)  SETC  'ORG'\n&DERVDAT(&I)  SETC  ','\n&DERCTR  SETA  &I\n.LEAVE   AIF   (NOT &RBUF).EXIT\n&DERCTR  SETA  &DERCTR+1\n&I       SETA  &DERCTR\n&DERVLBL(&I)  SETC  ' '\n&DERVOPC(&I)  SETC  'DS'\n&DERVDAT(&I)  SETC  '0F'\n&I       SETA  &I+1\n&DERVLBL(&I)  SETC  '&X.RDRBUF'\n&DERVOPC(&I)  SETC  'DC'\n&DERVDAT(&I)  SETC  'CL&LRECL'' '''\n&DERCTR  SETA  &I\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERTABCC 0100-01324-01324-1756-00110-00110-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERTABCC \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*           Build equates for printer control characters set\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/25\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERTABCC\n         COPY  DERGBLVR\n         AIF   (&DERCCTB).END\n.*\n.*  ASA Code CC\n.*  -----------\n$ASA_SP0 EQU  C'+'      Suppress space\n$ASA_SP1 EQU  C' '      Space 1 line\n$ASA_SP2 EQU  C'0'      Space 2 lines\n$ASA_SP3 EQU  C'-'      Space 3 lines\n$ASA_C01 EQU  C'1'      Skip to channel 1\n$ASA_C02 EQU  C'2'      Skip to channel 2\n$ASA_C03 EQU  C'3'      Skip to channel 3\n$ASA_C04 EQU  C'4'      Skip to channel 4\n$ASA_C05 EQU  C'5'      Skip to channel 5\n$ASA_C06 EQU  C'6'      Skip to channel 6\n$ASA_C07 EQU  C'7'      Skip to channel 7\n$ASA_C08 EQU  C'8'      Skip to channel 8\n$ASA_C09 EQU  C'9'      Skip to channel 9\n$ASA_C10 EQU  C'A'      Skip to channel 10\n$ASA_C11 EQU  C'B'      Skip to channel 11\n$ASA_C12 EQU  C'C'      Skip to channel 12\n.*\n.*  Machine Code CC - Print then act\n.*  ---------------\n$MCC_SP0 EQU  X'01'      Suppress space\n$MCC_SP1 EQU  X'09'      Space 1 line\n$MCC_SP2 EQU  X'11'      Space 2 lines\n$MCC_SP3 EQU  X'19'      Space 3 lines\n$MCC_CPM EQU  X'5A'      Change to page mode\n$MCC_C01 EQU  X'89'      Skip to channel 1\n$MCC_C02 EQU  X'91'      Skip to channel 2\n$MCC_C03 EQU  X'99'      Skip to channel 3\n$MCC_C04 EQU  X'A1'      Skip to channel 4\n$MCC_C05 EQU  X'A9'      Skip to channel 5\n$MCC_C06 EQU  X'B1'      Skip to channel 6\n$MCC_C07 EQU  X'B9'      Skip to channel 7\n$MCC_C08 EQU  X'C1'      Skip to channel 8\n$MCC_C09 EQU  X'C9'      Skip to channel 9\n$MCC_C10 EQU  X'D1'      Skip to channel 10\n$MCC_C11 EQU  X'D9'      Skip to channel 11\n$MCC_C12 EQU  X'E1'      Skip to channel 12\n.*\n.*  Machine Code CC - Act immediate w/o print\n.*  ---------------\n$MCC_SP1I EQU  X'0B'      Space 1 line\n$MCC_SP2I EQU  X'13'      Space 2 lines\n$MCC_SP3I EQU  X'1B'      Space 3 lines\n$MCC_C01I EQU  X'8B'      Skip to channel 1\n$MCC_C02I EQU  X'93'      Skip to channel 2\n$MCC_C03I EQU  X'9B'      Skip to channel 3\n$MCC_C04I EQU  X'A3'      Skip to channel 4\n$MCC_C05I EQU  X'AB'      Skip to channel 5\n$MCC_C06I EQU  X'B3'      Skip to channel 6\n$MCC_C07I EQU  X'BB'      Skip to channel 7\n$MCC_C08I EQU  X'C3'      Skip to channel 8\n$MCC_C09I EQU  X'CB'      Skip to channel 9\n$MCC_C10I EQU  X'D3'      Skip to channel 10\n$MCC_C11I EQU  X'DB'      Skip to channel 11\n$MCC_C12I EQU  X'E3'      Skip to channel 12\n.*\n&DERCCTB SETB  1\n.END     ANOP\n         MEND\n./ ADD NAME=DERTODUF 0100-01324-01324-1756-00074-00074-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERTODUF \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*          EDIT TOD DATE AND CLOCK IN UNIVERSAL FORMAT\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    DERTODUF\n         COPY  DERGBLVR\n&NAME    XC    &DERWORK.(16),&DERWORK\n         TIME  DEC,&DERWORK,LINKAGE=SYSTEM,                            +\n               DATETYPE=YYYYMMDD,MF=(E,&DERTMEL)\n         L     R1,&DERWORK\n         SRL   R1,4\n         ST    R1,&DERWORD\n         OI    &DERWORD+3,X'0F'\n         UNPK  &DERDBWD,&DERWORD\n         MVC   &DERTIME.(2),&DERDBWD+2\n         MVI   &DERTIME+2,C':'\n         MVC   &DERTIME+3(2),&DERDBWD+4\n         MVI   &DERTIME+5,C':'\n         MVC   &DERTIME+6(2),&DERDBWD+6\n         L     R1,&DERWORK+8\n         SLL   R1,8\n         SRL   R1,4\n         ST    R1,&DERWORD\n         OI    &DERWORD+3,X'0F'\n         UNPK  &DERDBWD,&DERWORD\n         MVC   &DERDATE.(2),&DERDBWD+2\n         MVI   &DERDATE+2,C'/'\n         MVC   &DERDATE+3(2),&DERDBWD+4\n         MVI   &DERDATE+5,C'/'\n         MVC   &DERDATE+6(2),&DERDBWD+6\n.*       LA    R1,&DERDATE\n         MEND\n./ ADD NAME=DERTODYF 0100-01324-01324-1756-00067-00067-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    MACRO NAME   -  \u00a6 DERTODYF \u00a6\n.*                    +----------+\n.*\n.*    Function -\n.*          Edit TOD date and clock in Julian format\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&NAME    DERTODYF\n         COPY  DERGBLVR\n         XC    &DERWORK.(16),&DERWORK\n         TIME  DEC,&DERWORK,LINKAGE=SYSTEM,                            +\n               DATETYPE=YYYYDDD,MF=(E,&DERTMEL)\n         L     R0,&DERWORK            hhmmsstt\n         ST    R0,&DERWORD\n         OI    &DERWORD+3,X'0F'\n         UNPK  &DERDBWD,&DERWORD\n         MVC   &DERYTIM,&DERDBWD\n         MVI   &DERYTIM,C'T'\n.*\n         L     R1,&DERWORK+8\n         SLL   R1,4\n         ST    R1,&DERWORD\n         OI    &DERWORD+3,X'0F'\n         UNPK  &DERDBWD,&DERWORD\n         MVC   &DERYDAT,&DERDBWD\n         MVI   &DERYDAT,C'D'\n.*\n.*       LA    R1,&DERYDAT\n         MEND\n./ ADD NAME=DERWSA   0100-01324-01324-1756-00441-00441-00000-DERU-S\n*\n*\n*                     +----------+\n*     Module Name  -  \u00a6 DERWSA   \u00a6\n*                     +----------+\n*\n*\n*     Function -\n*               Map of working storage area used by\n*               DERXWR and DERWTR modules\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n*     +--------+------------+--------+---------------------------+\n*     \u00a698/02/23\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     +--------+------------+--------+---------------------------+\n*\n         MACRO\n&LABEL   DERWSA &TYPE=DSECT,&AMODE=31,&RMODE=ANY,&PRINT=NOGEN\n         COPY  DERGBLVR\nDERWSA   &TYPE\n         AIF   ('&TYPE' NE 'CSECT').BEGIN\nDERWSA   AMODE &AMODE\nDERWSA   RMODE &RMODE\n.BEGIN   ANOP\nWSA      EQU   *\n         DC    CL8'DERWSA'\n*\n*\n*   +-------------------------------+\n*   \u00a6  Save Areas                   \u00a6\n*   +-------------------------------+\n*\nWSSAVEGR DC    9D'0'              Save area for GR 0-15\nWSPARMM  DC    D'0'               Parameter parmlib member name\nWSPARM   DC    A(*-*)             Pointer to XWTR parameter list\nWSPARMX  DC    A(*-*)             Pointer to XDP parameter list\nWSCOMPRM DC    A(WSCOMBUF)        Pointer to command parameter list\nWSALEN   DC    AL2(WSASIZE)       Length of this WSA\n         DC    XL2'00'            Reserved\nWSSVA    DC    A(*-*)             Pointer to XWTR savearea\nWSREG14  DC    A(*-*)             Pointer to return\n*\n*\n*   +------------------------------------------+\n*   \u00a6  Service Routine Modules Directory Table \u00a6\n*   +------------------------------------------+\n*\nWSMODXDP DC    A(*-*,*-*)         Pointer to DERXDP module\nWSMODXDS DC    A(*-*,*-*)         Pointer to DERXDS module\nWSMODCOM DC    A(*-*,*-*)         Pointer to DERCOM module\nWSMODXIO DC    A(*-*,*-*)         Pointer to DERXIO module\nWSMODXWR DC    A(*-*,*-*)         Pointer to DERXWR module\nWSMODWTR DC    A(*-*,*-*)         Pointer to DERWTR module\nWSMODWTB DC    A(*-*,*-*)         Pointer to DERWTB module\nWSMODWTX DC    A(*-*,*-*)         Pointer to DERWTX module\nWSMODDCB DC    A(*-*,*-*)         Pointer to DERDCB module\nWSMODXSF DC    A(*-*,*-*)         Pointer to DERXSF module\nWSMODWTG DC    A(*-*,*-*)         Pointer to DERWTG module\nWSMODIBM DC    A(*-*,*-*)         Pointer to IEFSD087 module\nWSIOBUF  DC    A(*-*,*-*)         Pointer to I/O buffer (and size)\nWSIOREC  DC    A(*-*,*-*)         Pointer to record address\nWSDESTP  DC    A(*-*,*-*)         Pointer and # of destination\nWSDESTP1 DC    A(*-*,*-*)         Hot Pointer and # of destination\nWSEOPARM DC    A(*-*)             Pointer to EOD Parmlib\n*\n*\n*   +-------------------------------+\n*   \u00a6  DCB Directory Table          \u00a6\n*   +-------------------------------+\n*\nWSDCBDIR DS    0F\nADDR_PARMLIB  DC A(*-*)       DCB address of PARMLIB\nADDR_JES2FILE DC A(*-*)       DCB address of JES2FILE\nADDR_LCLDS01  DC A(*-*)       DCB address of LCLDS01\nADDR_LCLDS02  DC A(*-*)       DCB address of LCLDS02\nADDR_INTRDR   DC A(*-*)       DCB address of INTRDR\nADDR_SYSOUT   DC A(*-*)       DCB address of SYSOUT\nWSDCBDSZ EQU  *-WSDCBDIR\nADDR_IEFRDER  DC A(*-*)       DCB address of IEFRDER\n*\n*   +-------------------------------+\n*   \u00a6 Buffer and Record Areas as    \u00a6\n*   \u00a6 Constructed by BUILDRCD       \u00a6\n*   +-------------------------------+\n*\nWSRCBUFA DC    A(*-*,*-*)\nWSRCAREA DC    A(*-*,*-*)\nWSBLKPTR DC    A(*-*)                 Block buffer pointer\nWSRECPTR DC    A(*-*)                 Record buffer pointer\n*\n*   +-------------------------------+\n*   \u00a6 SYNAD and EODAD Save Areas    \u00a6\n*   +-------------------------------+\n*\n         DC    X'00'\nWSISYNA  DC    AL3(*-*)\n         DC    X'00'\nWSIEODA  DC    AL3(*-*)\nWSISYNAX DC    A(*-*)\nWSIEODAX DC    A(*-*)\n         DC    X'00'\nWSOSYNA  DC    AL3(*-*)\n         DC    X'00'\nWSOEODA  DC    AL3(*-*)\nWSOSYNAX DC    A(*-*)\nWSOEODAX DC    A(*-*)\n*\n*\n*   +-------------------------------+\n*   \u00a6  ECB and ECB List             \u00a6\n*   +-------------------------------+\n*\nWSECB    DC    F'0'               ECB\nWSREPLY  DC    F'0'               Reply buffer\nWSCOMM   DC    F'0'               Command buffer address\nWSRCODE  DC    F'0'               RC save area\nWSECBLST DS    0F\nWSECBJES DC    A(*-*)             Address of JES ECB\nWSECBCOM DC    A(*-*)             Address of command ECB\n*\n*\n*   +-------------------------------+\n*   \u00a6  SSREQ Input Variables        \u00a6\n*   +-------------------------------+\n*\nWSSSOBP  DC    A(*-*)             Pointer to SSOB parameter list\nWSSSOB   DC    A(*-*,*-*)         Pointer to SSOB parameter area\nWSSSOB1  DC    A(*-*,*-*)         Copy pointer to SSOB parameter area\nWSSSSO   DC    A(*-*,*-*)         Copy pointer to SSSO\nWSSAVEQ  DC    F'0'\nWSCLASSL DC    CL8' '             Class list for sysout selection\nWSLCLASS DC    CL8' '             Class list for sysout selection\nWSFORM   DC    CL8' '             Form for xfer target file\nWSTABLE  DC    CL8' '             Form for xfer target file\n         ORG   WSLCLASS\nWSQCLASS DC    CL1'9'             Class list for sysout selection\n         ORG   ,\n*\n*   +-------------------------------+\n*   \u00a6  Parameter Indicator Flags    \u00a6\n*   +-------------------------------+\n*\nWSPFLAGS DC    X'00'              Parameter indicators\nWSPFCLAS EQU   X'80'               - CLASS indicated\nWSPFOVER EQU   X'40'               - Override default parm indicated\nWSPFFILE EQU   X'20'               - Parmlib member indicated\nWSPFOPEN EQU   X'10'               - Parmlib successfully opened\nWSPFCMND EQU   X'08'               - Parm entered from CMD indicated\nWSPFSSRQ EQU   X'04'               - Parm entered related to SSREQ\nWSPFTABL EQU   X'02'               - Parm table indicated\nWSPFFORC EQU   X'01'               - Parm force to normal form used\n*\n*\n*   +-------------------------------+\n*   \u00a6  PC File Form Indicator Flags \u00a6\n*   +-------------------------------+\n*\nWSFFLAGS DC    X'00'              FORM flag indicators\nWSFFDISP EQU   C'D'                - FORM = DISPATCH\nWSFFWIND EQU   C'W'                - FORM = WINDOWS\nWSFFS390 EQU   C'S'                - FORM = S/390\n*\n*\n*   +-------------------------------+\n*   \u00a6 Operation Indicator Flags     \u00a6\n*   +-------------------------------+\n*\nWSOFLAGS DC    X'00'              Operation indicators\nWSOFKEEP EQU   X'80'               - KEEP sysout at close\nWSOFTRAC EQU   X'40'               - TRACE XDI logic flow\nWSOFXCOM EQU   X'20'               - XCOM internal indicated\nWSOFFORC EQU   X'10'               - FORCE to use simple lrecl\nWSOFCOMM EQU   X'08'               - Command entered indicated\nWSOFXKEP EQU   X'04'               - Xcomjob KEEP indicated\nWSOFHOLD EQU   X'02'               - Process HELD sysout indicated\nWSOFSSRQ EQU   X'01'               - SSREQ has been processed\n*\n*\n*   +-------------------------------+\n*   \u00a6  Override Indicators Flags    \u00a6\n*   +-------------------------------+\n*\nWSOVFLGS DC    X'00'              Override indicators (use WSOFxxxx)\n*\nWSOVFORM DC    X'00'              Override form (use WSFFxxxx)\n*\n*\n*   +-------------------------------+\n*   \u00a6  Error Indicator Flags        \u00a6\n*   +-------------------------------+\n*\nWSEFLAGS DC    X'00'              Error indicator\nWSEFSSRQ EQU   X'80'                SSREQ error\nWSEFNODS EQU   X'40'                Dest error (unexpected DEST)\nWSEFPURG EQU   X'20'                Sysout purge error\nWSEFIOER EQU   X'04'                I/O error\nWSEFSSOB EQU   X'02'                SSOB error\nWSEFERRP EQU   X'01'                Error occured during main process\n*\n*\n*   +-------------------------------+\n*   \u00a6  Process Switch Flags         \u00a6\n*   +-------------------------------+\n*\nWSSFLAGS DC    X'00'              Switch indicator indicator\nWSSFSFIL EQU   X'80'                Send file >< spool\nWSSFWAIT EQU   X'40'                Wait ECB\nWSSFXIBM EQU   X'20'                IBM's external writer intercepted\nWSSFINIT EQU   X'10'                Initialization switch\nWSSFSSEC EQU   X'08'                Subsequent call\nWSSFAJES EQU   X'04'                JES2FILE allocated\nWSSFAFFL EQU   X'02'                LCLDS01 allocated\nWSSFSSOB EQU   X'01'                Original SSOB captured\nWSSFOJOB EQU   WSSFSSOB             Continue retrieve the same job\nWSSFRNEW EQU   WSSFXIBM             SSOB has been refreshed\n*\nWSHDRSIZ EQU   *-WSA\n*\n*\n*   +--------------------------------+\n*   \u00a6  System Command Parameter List \u00a6\n*   +--------------------------------+\n*\nWSCMDPRM DC    F'0'               REG 0 FOR SVC 34\n         DC    A(WSSVCCIB)        REG 1 FOR SVC 34\nWSSVCCIB DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nWSCMDBUF DC    CL120' '           COMMAND BUFFER\n*\n*\n*   +-------------------------------+\n*   \u00a6  Working Variables            \u00a6\n*   +-------------------------------+\n*\nWSLRECL  DC    H'0'               Lrecl\nWSBYTE   DC    X'00'              Byte for work\nWSJNUM   DC    CL6'000000'        Execution counter\nWSCOUNT  DC    PL6'0'             Execution counter in decimal packed\nWSPGNUM  DC    PL5'0'\nWSPGTOT  DC    PL7'0'\nWSFFDSN  DC    CL44' '            Flat file\nWSBUDSN  DC    CL44' '            Copy DSN\nWSSTPLIB DC    CL44'CAI.XCOM.CAILIB'\nWSCAILIB DC    CL44'CAI.XCOM.CAILIB'\nWSGLBLIB DC    CL44'CAI.XCOM.CAILIB'\nWSRSTLIB DC    CL44'CAI.XCOM.CAILIB'\nWSCTLLIB DC    CL44'CAI.XCOM.CAILIB'\nWSBUWRTR DC    CL8' '             Writer name copy\nWSCTIME  DC    CL16' '\nWSCDATE  DC    CL8' '\nWSTIME   DC    PL8'0'           TOD in dec format: HHMMSSthmiju0000\nWSDATE   DC    PL4'0'           Date in dec format: YYYYMMDD\n         DS    CL4\nWSXCJPRM DC    CL56'(''ACBNAME=XCOMAPPL,TYPE=SCHEDULE'')'\nWSPCDRV  DC    CL8'HDD of'\n         ORG   WSPCDRV+7\nWSPCHDD  DC    CL1'F'\n         ORG   ,\nWSOVHDD  DC    CL1'C'\nWSPCDRVE DC    CL1'F'\n*\n*   +-------------------------------+\n*   \u00a6  Copy of SSSO Informations    \u00a6\n*   +-------------------------------+\n*\nWSSOMLRL DC    H'0'\nWSSOJOBN DC    CL8' '\nWSSOJOBI DC    CL8' '\nWSSODSN  DC    CL44' '\nWSSOWRTR DC    CL8' '\nWSSODEST DC    CL8' '\nWSSOGRNM DC    CL26' '          Output group name\nWSSOFORM DC    CL4' '\nWSSOCLAS DC    C' '\n*\n*   +-------------------------------+\n*   \u00a6  Output CC Format Indicator   \u00a6\n*   +-------------------------------+\n*\nWSCC     DC    X'00'            Carriage Control indicator\nWSCC_MCC EQU   C'M'               - Machine CC\nWSCC_ASA EQU   C'A'               - ASA CC\nWSDWORD  DC    D'0'               DoubleWord for general purposes\nWSWORD   DC    F'0'               Word for general purposes\n*\n*\n*   +-------------------------------+\n*   \u00a6  Message Directory Table      \u00a6\n*   +-------------------------------+\n*\n         DS    0D\nWSCARD   DC    CL80' '\nWSMSGDIR DS    0F\nWSMSG100 DC    A(*-*)\nWSMSG101 DC    A(*-*)\nWSMSG102 DC    A(*-*)\nWSMSG103 DC    A(*-*)\nWSMSG104 DC    A(*-*)\nWSMSG105 DC    A(*-*)\nWSMSG106 DC    A(*-*)\nWSMSG107 DC    A(*-*)\nWSMSG108 DC    A(*-*)\nWSMSG109 DC    A(*-*)\nWSMSG110 DC    A(*-*)\nWSMSG111 DC    A(*-*)\nWSMSG112 DC    A(*-*)\nWSMSG113 DC    A(*-*)\nWSMSG114 DC    A(*-*)\nWSMSG115 DC    A(*-*)\nWSMSG116 DC    A(*-*)\nWSMSG117 DC    A(*-*)\nWSMSG118 DC    A(*-*)\nWSMSG119 DC    A(*-*)\nWSMSG120 DC    A(*-*)\nWSMSG121 DC    A(*-*)\nWSMSG122 DC    A(*-*)\nWSMSG123 DC    A(*-*)\nWSMSG124 DC    A(*-*)\nWSMSG125 DC    A(*-*)\nWSMSG126 DC    A(*-*)\nWSMSG127 DC    A(*-*)\nWSMSG128 DC    A(*-*)\nWSMSG129 DC    A(*-*)\nWSMSG130 DC    A(*-*)\nWSMSG131 DC    A(*-*)\nWSMSG132 DC    A(*-*)\nWSMSG133 DC    A(*-*)\nWSMSG134 DC    A(*-*)\nWSMSG135 DC    A(*-*)\nWSMSG136 DC    A(*-*)\nWSMSG137 DC    A(*-*)\nWSMSG138 DC    A(*-*)\nWSMSG139 DC    A(*-*)\nWSMSG140 DC    A(*-*)\nWSMSG141 DC    A(*-*)\nWSMSG142 DC    A(*-*)\nWSMSG143 DC    A(*-*)\nWSMSG144 DC    A(*-*)\nWSMSG145 DC    A(*-*)\nWSMSG146 DC    A(*-*)\nWSMSG147 DC    A(*-*)\nWSMSG148 DC    A(*-*)\nWSMSG149 DC    A(*-*)\nWSMSG150 DC    A(*-*)\nWSMSG151 DC    A(*-*)\nWSMSG152 DC    A(*-*)\nWSMSG153 DC    A(*-*)\nWSMSG154 DC    A(*-*)\nWSMSG155 DC    A(*-*)\nWSMSG156 DC    A(*-*)\nWSMSG157 DC    A(*-*)\nWSMSG158 DC    A(*-*)\nWSMSG159 DC    A(*-*)\nWSMSG160 DC    A(*-*)\nWSMSG161 DC    A(*-*)\nWSMSG162 DC    A(*-*)\nWSMSG163 DC    A(*-*)\nWSMSG164 DC    A(*-*)\nWSMSG165 DC    A(*-*)\nWSMSG166 DC    A(*-*)\nWSMSG167 DC    A(*-*)\nWSMSG168 DC    A(*-*)\nWSMSG169 DC    A(*-*)\nWSMSG170 DC    A(*-*)\nWSMSG171 DC    A(*-*)\nWSMSG172 DC    A(*-*)\nWSMSG173 DC    A(*-*)\nWSMSG174 DC    A(*-*)\nWSMSG175 DC    A(*-*)\nWSMSG176 DC    A(*-*)\nWSMSG177 DC    A(*-*)\nWSMSG178 DC    A(*-*)\nWSMSG179 DC    A(*-*)\nWSMSG180 DC    A(*-*)\nWSMSG181 DC    A(*-*)\nWSMSG182 DC    A(*-*)\nWSMSG183 DC    A(*-*)\nWSMSG184 DC    A(*-*)\nWSMSG185 DC    A(*-*)\nWSMSG186 DC    A(*-*)\nWSMSG187 DC    A(*-*)\nWSMSG188 DC    A(*-*)\nWSMSGDSZ EQU   *-WSMSGDIR\nWSWORK   DC    CL256' '\nWSCOMBUF DC    CL256' '\nWSASIZE  EQU   *-WSA\n         EJECT ,\n         AIF   ('&TYPE' NE 'CSECT').EXIT\n         END   DERWSA\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERWTX   0100-01324-01324-1756-00138-00138-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  \u00a6 DERWTX   \u00a6\n.*                    +----------+\n.*\n.*\n.*    Function -\n.*             Provide skeleton of common module extension\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*    \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERWTX &TYPE=CSECT,&AMODE=31,&RMODE=ANY,&PRINT=NOGEN\n         COPY  DERGBLVR\nDERWTX   &TYPE\n         AIF   ('&TYPE' NE 'CSECT').BEGIN\nDERWTX   AMODE &AMODE\nDERWTX   RMODE &RMODE\n.BEGIN   ANOP\n         DC    CL8'DERWTX'\n         @VGLOBAL\n         EJECT ,\nALSYSOUT @S99PARM ALLOC,                  Define SYSOUT alloc parm     +\n               TYPE=DATA,                 Map type is memory data      +\n               SSREQ=JES2,                Request JES2 dataset         +\n               EXTRB=YES,                 Request S99RBX               +\n               PREFIX=A,                  Use prefix A --> ARBxxxx     +\n               DISP=(OLD,DELETE),         Use disp. delete             +\n               DD=JES2FILE,               and DD name is JES2FILE      +\n               DSN='SYSOUT.DATA.SET'      DSN is just to init field\nUNSYSOUT @S99PARM DEALLOC,                Define SYSOUT dealloc parm   +\n               TYPE=DATA,                 Map type is memory data      +\n               PREFIX=D,                  Use prefix D --> DRBxxx      +\n               DISP=DELETE,               Override disposition DELETE  +\n               EXTRB=YES,                 Request S99RBX               +\n               DD=JES2FILE                and DD name is JES2FILE\nALFLATDS @S99PARM ALLOC,                  Define Flat file alloc parm  +\n               TYPE=DATA,                 Map type is memory data      +\n               PREFIX=F,                  Use prefix F --> FRBxxxx     +\n               EXTRB=YES,                 Request S99RBX               +\n               DD=LCLDS01,                DD name is LCLDS01           +\n               DSN='CADS.XCOM.SAMPLE.DATA',  Predefine DSN             +\n               DSORG=PS,RECFM=VB,            DCB:                      +\n               BLKSIZE=6233,LRECL=150,                                 +\n               SPACE=(CYL,(50,5),RLSE),      Specify space for new     +\n               UNIT=3390,                     dataset in this unit of  +\n               DISP=(NEW,CATLG),          Use this disposition and     +\n               RECBUF=YES,                Generate record buffer       +\n               FREE=CLOSE,                Deallocate at close          +\n               CDISP=KEEP                 delete dataset if job abend\nUNFLATDS @S99PARM FREE,                   Define Flatfile dealloc parm +\n               TYPE=DATA,                 Map type is memory data      +\n               EXTRB=YES,                 Request S99RBX               +\n               PREFIX=U,                  Use prefix U --> URBxxxx     +\n               DD=LCLDS01                 DD name is LCLDS01\nPHEADER  @EDITHDR DATA,                                                +\n               LRECL=128,                                              +\n               PREFIX=PH\n         SPACE ,\n         PRINT &PRINT\n         DC    8D'0'\nLMODESET MODESET MF=L\nLMODSUPV MODESET MODE=SUP,MF=L\nLMODSUPZ MODESET MODE=SUP,KEY=ZERO,MF=L\nLMODPROB MODESET MODE=PROB,MF=L\nLMODPRON MODESET MODE=PROB,KEY=NZERO,MF=L\nLMODZERO MODESET KEY=ZERO,MF=L\nLMODNZER MODESET KEY=NZERO,MF=L\nLEXTRACT EXTRACT WTXEND,MF=L\nLWTO     WTO   TEXT=,MF=L\nLWTOR    WTOR  TEXT=WTXEND,MF=L\n         DS    0D\nLOPEN_PARMLIB  OPEN  (,),MODE=31,MF=L\nLOPEN_INTRDR   OPEN  (,),MODE=31,MF=L\nLOPEN_JES2FILE OPEN  (,),MODE=31,MF=L TYPE=J\nLOPEN_LCLDS01  OPEN  (,),MODE=31,MF=L\nLOPEN          OPEN  (,),MODE=31,MF=L\nLCLOSE_JES2FILE CLOSE (,),MODE=31,MF=L\nLCLOSE_LCLDS01 CLOSE (,),MODE=31,MF=L\nLCLOSE         CLOSE (,),MODE=31,MF=L\nLREAD    READ  XDIDECB,SF,MF=L\nLBLDRCD  BUILDRCD ,,,,0,MF=L\nLMGCRE   MGCRE MF=L\n         DS    0D\nXCJCL    @XCOMJOB DATA,                                                +\n               CAILIB=CAI.CAILIB,                                      +\n               STEPLIB=CAI.XCOM.CAILIB,                                +\n               GLOBLIB=CAI.XCOM.NONQUEUE.GLOBAL,                       +\n               RESTLIB=CAI.XCOM.NONQUEUE.RESTART,                      +\n               CNTLLIB=CAI.XCOM.PARMLIB,                               +\n               DISP=(OLD,KEEP),                                        +\n               CLASS=T,                                                +\n               MCLASS=T,                                               +\n               MLEVEL=(1,1),                                           +\n               PREFIX=XC\n         PRINT &PRINT\n         @VDATA\nWTXEND   EQU   *\n         EJECT ,\n         IEFZB4D2\n         AIF   ('&TYPE' NE 'CSECT').EXIT\n         END   DERWTX\n.EXIT    ANOP\n         MEND\n./ ADD NAME=DERXCJOB 0100-01324-01324-1756-00174-00174-00000-DERU-S\n.*\n.*\n.*                    +----------+\n.*    Macro Name   -  | DERXCJOB |\n.*                    +----------+\n.*\n.*\n.*    Function - XCOM batch job\n.*\n.*\n.*    Syntax -\n.*\n.*\n.*    Operation -\n.*\n.*\n.*    Author -\n.*         Name     :  Deru Sudibyo\n.*                     Technical Consultant\n.*                     Computer Associates\n.*                     Indonesia Office\n.*                     Wisma BNI-46 34th floor, BNI-46 City\n.*                     Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n.*         Copyright:  (C)1998 Deru Sudibyo\n.*\n.*    Disclaimer -\n.*        This macro is developed as a personal support, and is\n.*        not a part of CA support matterials.  The purpose is as\n.*        a temporary solution or even just a sample.  Therefor,\n.*        further modifications and maintenance are client's\n.*        responsibilities.\n.*\n.*    Modification Log -\n.*    +--------+------------+--------+---------------------------+\n.*    | Date   | Engineer   | V.R.L. | Description               |\n.*    +--------+------------+--------+---------------------------+\n.*    |98/02/16| Deru S.    | 1.0.0. | First development         |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    |        |            |        |                           |\n.*    +--------+------------+--------+---------------------------+\n.*\n         MACRO\n&LABEL   DERXCJOB &TYPE=DSECT,&PREFIX=XC,&DISP=(OLD,DELETE),&CLASS=A,  +\n               &MCLASS=X,&MLEVEL=(0,0),                                +\n               &RCPID=,&RPTNAME=,&PCDRIVE=F,                           +\n               &STEPLIB=CAI.XCOM.R30.CAILIB,                           +\n               &CAILIB=CAI.CAILIB,                                     +\n               &CNTLLIB=CAI.XCOM.R30.DESTLIB,                          +\n               &GLOBLIB=CAI.XCOM.R30.NONQUEUE.GLOBAL,                  +\n               &RESTLIB=CAI.XCOM.R30.NONQUEUE.RESTART\n         COPY  DERGBLVR\n         LCLC  &C,&MC,&M1,&M2,&P,&Q\n&P       SETC  '&PREFIX'\n&Q       SETC  ''''\n&C       SETC  '&CLASS'\n&MC      SETC  '&MCLASS'\n&M1      SETC  '&MLEVEL(1)'\n&M2      SETC  '&MLEVEL(2)'\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'COM').COM\n         AIF   ('&TYPE' EQ 'DATA').DATA\n         MNOTE 8,'DER001E Invalid TYPE.  Use DSECT, CSECT, COM or DATA'\n         MEXIT\n.DSECT   ANOP\n&P.JOB   DSECT\n         AGO   .BEGIN\n.CSECT   ANOP\n&P.JOB   CSECT\n         AGO   .BEGIN\n.COM     ANOP\n&P.JOB   COM\n         AGO   .BEGIN\n.DATA    ANOP\n&P.JOB   DS    0D\n         AGO   .BEGIN\n.BEGIN   ANOP\n&LABEL   DS    0D\n&P.J1    DC    CL80'//XCKCxnnn JOB (XC9612),''TRANSFER xxxxxxxx   '','\n         DC    CL80'//    CLASS=&C,MSGCLASS=&MC,MSGLEVEL=(&M1,&M2)'\n&P.J2    DC    CL80'//XC123456 EXEC PGM=XCOMJOB,TIME=1440,'\n&P.J2A   DC    CL80'//    PARM='\n         DC    CL80'//STEPLIB  DD DISP=SHR,'\n&P.J3    DC    CL80'//         DSN=&STEPLIB'\n         DC    CL80'//         DD DISP=SHR,'\n&P.J4    DC    CL80'//         DSN=&CAILIB'\n&P.J5    DC    CL80'//LCLDS01  DD DISP=(OLD,DELETE),'\n&P.J6    DC    CL80'//    DSN=CADS.XCOM.KCxnnn.Dyyyyddd.Thhmmss.Rptid'\n*                   ----+----1----+----2----+----3----+----4----+----5-\n*              ---+----6----+----7-X--+----8\n         DC    CL80'//SYSPRINT DD SYSOUT=(&MC,XDI$JOB)'\n         DC    CL80'//SYSTERM  DD SYSOUT=*'\n         DC    CL80'//XCOMCNTL DD DISP=SHR,'\n&P.J7    DC    CL80'//         DSN=&CNTLLIB'\n         DC    CL80'//XCOMGLOB DD DISP=SHR,'\n&P.J8    DC    CL80'//         DSN=&GLOBLIB'\n         DC    CL80'//XCOMREST DD DISP=SHR,'\n&P.J9    DC    CL80'//         DSN=&RESTLIB'\n         DC    CL80'//SYSIN01  DD *'\n&P.PARM  DC    CL80'TYPE=SEND '\n         DC    CL80'FILETYPE=FILE '\n&P.J10   DC    CL80'GROUP=KCxnnn '\n&P.J11   DC    CL80'LFILE=CADS.XCOM.KCxnnn.Dyyyyddd.Thhmmss.Rptid'\n&P.J12   DC    CL80'FILE=C:\\Dispatch\\KCxnnn\\Rptid.VXC '\n&P.PARMV EQU   *\n         DC    CL80'DROPSESS=YES '\n         DC    CL80'CODE=ASCII '\n         DC    CL80'TRUNCATE=NO '\n         DC    CL80'COMPRESS=YES   '\n         DC    CL80'PACK=CRLF '\n         DC    CL80'CKPT=100 '\n         DC    CL80'RNOTIFY=LOG '\n         DC    CL80'FILEOPT=CREATE '\n         DC    70CL80'*'\n&P.PARML EQU   *-&P.PARM\n         DC    CL80'/*'\n         DC    CL80'/*EOF'\n&P.TIME  DC    D'0'                P'HHMMSSnn nnnn0000'\n&P.DATE  DC    F'0'                P'0yyyyddd'\n&P.ZERO  DC    F'0'\n&P.JEND  EQU   *\n&P.JSIZE EQU   *-&P.JOB\n&P.JCARDS EQU   &P.JSIZE/80          Number of cards\n         ORG   &P.J1+4\n&P.JNAME DC    CL6' '              Job name\n         ORG   &P.J1+34\n&P.JPRGN DC    CL8' '              Report name in programmer name\n         ORG   &P.J2+4\n&P.JNUM  DC    CL6' '              Jobid number\n         ORG   &P.J2A+11\n&P.JPARM DC    CL56'''ACBNAME=XCOMAPPL '' ' Job PARM\n         ORG   &P.J2A+20\n&P.JACB  DC    CL8'XCOMAPPL'             ACBname\n         ORG   &P.J3+15\n&P.JSLIB DC    CL44'&STEPLIB'     Steplib dataset name\n         ORG   &P.J4+15\n&P.JSLIB1 DC   CL44'&CAILIB'      Steplib concatenated 1 dataset name\n         ORG   &P.J5+19\n&P.JDISP DC   CL16'&DISP,'         Disposition\n         ORG   &P.J6+10\n&P.JDSN  DC    CL44' '\n         ORG   &P.J6+20\n&P.JDSQK DC    CL6' '\n         DC    C'.D'\n&P.JDSQD DC    CL7' '\n         DC    C'.T'\n&P.JDSQT DC    CL6' '\n         DC    C'.'\n&P.JDSQR DC    CL8' '\n         ORG   &P.J7+15\n&P.JXCNTL DC   CL44'&CNTLLIB'     XCOMCNTL dataset name\n         ORG   &P.J8+15\n&P.JXGLOB DC   CL44'&GLOBLIB'     XCOMGLOB dataset name\n         ORG   &P.J9+15\n&P.JXREST DC   CL44'&RESTLIB'     XCOMREST dataset name\n         ORG   &P.J10\n&P.GROUP DC    CL80'GROUP='\n         ORG   &P.J10+6\n&P.JDEST DC    CL6' '\n         ORG   &P.J11+6\n&P.JLFILE DC    CL44' '\n         ORG   &P.J12+5\n&P.JDRIVE DC    CL1'&PCDRIVE'\n         DC    C':\\Dispatch\\'\n&P.JRECID DC    C'KCxnnn'\n         DC    C'\\'\n&P.JRNAME DC    CL14' '\n         ORG   ,\n.*       ORG   &P.JEND\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARMLIB": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x13!\\x004\\x004\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T13:21:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "DERU-S"}, "text": "./ ADD NAME=KCP097   0100-01324-01324-0735-00014-00014-00000-DERU-S\nTYPE=SEND\nFILETYPE=FILE\nLU=LUB31201\nDROPSESS=NO\nRECSEP=YES\nCODE=EBCDIC\nTRUNCATE=NO\nCOMPRESS=YES\nCKPT=100\nRNOTIFY=LOG\nFILEOPT=CREATE\nUSERID=XCOM\nPASSWORD=XCOM01\n*/CMD F XCOM,ACTIVATE,LUB31201\n./ ADD NAME=KCU043   0100-01324-01324-0735-00014-00014-00000-DERU-S\nTYPE=SEND\nFILETYPE=FILE\nLU=LUB31201\nDROPSESS=NO\nRECSEP=YES\nCODE=EBCDIC\nTRUNCATE=NO\nCOMPRESS=YES\nCKPT=100\nRNOTIFY=LOG\nFILEOPT=REPLACE\nUSERID=XCOM\nPASSWORD=XCOM01\n*/CMD F XCOM,ACTIVATE,LUB31201\n./ ADD NAME=XDISYS00 0100-01324-01324-0735-00016-00016-00000-DERU-S\nCLASS=M                     Select class X\nRQCLASS=9                   Requeue to class 9 for execution\nPCFORM=WINDOWS              PC file created in DISPATCH form\nTRACE=ON                    Disable trace\nDISP=KEEP                   Keep sysout   (not supp. JES2 5.x)\nXDISP=DELETE                Keep flat dataset (in XCOM job)\nHOLD=PROCESS                HOLD sysout selected also (not supp J2 5)\nLRECL=NORMAL                Force to use normal lrecl for XCOM\nXPARM=('ACBNAME=XCOM00,TYPE=EXECUTE')\nTABLE=00                    Point to XDITAB00\nPCDRIVE=C                   PC HDD drive\nSTEPLIB=CAI.XCOM.CAILIB     XCOM Loadlib\nCAILIB=CAI.CAILIB           CA Common (CA90) Loadlib\nPARMLIB=CAI.XCOM.PARMLIB\nRESTLIB=CAI.XCOM.NONQUEUE.RESTART\nGLOBLIB=CAI.XCOM.NONQUEUE.GLOBAL\n./ ADD NAME=XDITAB00 0100-01324-01324-0735-00004-00004-00000-DERU-S\nKCU043        KC Utama Bogor Sukasari\nKCP086        KC Pembantu Bogor Sartika\nKCP097        KC Pembantu Bogor Cibinong\nLOCAL         KC Local\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PROCLIB": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x17A\\x00/\\x00/\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T17:41:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "DERU-S"}, "text": "./ ADD NAME=ASSEMBLE 0100-01324-01324-0735-00037-00037-00000-DERU-S\n//ASSEMBLE PROC MBR=,\n//          PROG=ASMA90,\n//          NAME=,\n//          APARM='NOOBJECT,DECK,ALIGN',\n//          LPARM='REUS',\n//          SRCLIB='CAI.LCLMODS',\n//          LNKLIB='CAI.CAILIB',\n//          MACLIB='SYS1.MACLIB',\n//          SOUTC=X\n//*\n//*   +------------+\n//*   \u00a6 ASSEMBLING \u00a6\n//*   +------------+\n//ASM      EXEC  PGM=&PROG,\n//            PARM=('&APARM')\n//SYSLIB   DD  DSN=&MACLIB,DISP=SHR,DCB=BLKSIZE=20000\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.HASPSRC,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB(&MBR),DISP=SHR\n//SYSPRINT DD  SYSOUT=(&SOUTC,A&MBR)\n//SYSPUNCH DD  UNIT=SYSALLDA,DISP=(,PASS),\n//             SPACE=(6080,(50,20),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(1,1))\n//*\n//*   +--------------+\n//*   \u00a6 LINK-EDITING \u00a6\n//*   +--------------+\n//LKED     EXEC  PGM=HEWL,\n//             PARM=('XREF,LIST','&LPARM'),\n//             COND=((4,LT,ASM))\n//SYSLIB   DD  DSN=&LNKLIB,DISP=(SHR),\n//             DCB=BLKSIZE=20000\n//SYSLIN   DD  DSN=*.ASM.SYSPUNCH,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=&LNKLIB(&NAME),DISP=(SHR)\n//SYSPRINT DD  SYSOUT=(&SOUTC,L&NAME)\n./ ADD NAME=XDI      0100-01324-01324-0735-00008-00008-00000-DERU-S\n//XDI PROC START=00\n//*DI PROC SPOOL=DX,FORM=DISPATCH\n//XDIEXEC EXEC PGM=DERXDI,REGION=5M,DYNAMNBR=99,TIME=1440,\n//  PARM='FILE=&START'\n//* PARM='CLASSES=&SPOOL,PCFORM=&FORM'\n//STEPLIB DD DISP=SHR,DSN=CAI.LINKLIB.LOCAL\n//PARMLIB DD DISP=SHR,DSN=CAI.XCOM.PARMLIB\n//INTRDR  DD SYSOUT=(A,INTRDR)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SOURCE": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x012O\\x01\\x012O\\x17F\\x178\\x178\\x00\\x00\\xc4\\xc5\\xd9\\xe4`\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-20T00:00:00", "modifydate": "2001-11-20T17:46:00", "lines": 5944, "newlines": 5944, "modlines": 0, "user": "DERU-S"}, "text": "./ ADD NAME=DERCOM   0100-01324-01324-1743-00726-00726-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERCOM  |\n*                     +---------+\n*                     CA-Dispatch -to- CA-XCOM Handshaking Interface\n*\n*     Function -\n*            Command processor\n*\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Problem state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*           Called by DERXDI via LOAD and BASR\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  DCB map (IHADCB) address\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  Main module base address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERCOM   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=ANY,                                              +\n               RENT=YES,                                               +\n               BREG=(R11,R12)\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Establish WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Establish WTX addressability\n         EJECT ,\n* ================================================================= *\n*                                                                   *\n*   Possible Commands (Entered via MODIFY)                          *\n*                                                                   *\n*      CLASS=cccccccc         1 to 8 spool classes                  *\n*      PCFORM=ffffffff        Form to used for PC                   *\n*      DISP=<KEEP\u00a6DELETE>     Disp. of spool after processed        *\n*      XDISP=<KEEP\u00a6DELETE>    Disp. of XCOM job's LCLDS01 file      *\n*      TRACE=<ON\u00a6OFF>         Trace message                         *\n*      TABLE=nn               Load table XDITABxx                   *\n*      XPARM=<XCOM job parameter>                                   *\n*                                                                   *\n* ================================================================= *\n         SPACE ,\n         @WTO  CODE=103\n         LA    R2,WSCOMBUF            Access 1st parameter address\n         CLC   =C'LIST ',2(R2)        Is it LIST request ?\n         BE    SHOWPARM               Yes, show parameter\n         CLC   =C'L ',2(R2)           Is it L request ?\n         BE    SHOWPARM               Yes, same effect - show parameter\n         NI    WSPFLAGS,X'FF'-WSPFFILE Turn indicator off\n         CLC   =C'TABLE=',2(R2)       Is TABLE=mm specified ?\n         BE    DESTTAB                No, skip NSI\n         CLC   =C'FILE=',2(R2)        Is FILE=mm specified ?\n         BNE   CHKPARM                No, skip NSI\nPARM_FILE EQU  *\n         MVC   WSPARMM(6),=CL6'XDISYS'      Set basic member name\n         MVC   WSPARMM+6(2),7(R2)        Put suffix\n         BAS   R14,OPEN_PARM          Yes, open parmlib\n         OI    WSPFLAGS,WSPFFILE      Turn indicator on\n         MVC   WSIOREC,WSIOBUF        Access 1st record of block\nPARM_REC EQU   *\n         L     R2,WSIOREC             Access a record of block\nPARM_REC_CHECK EQU *\n         C     R2,WSIOREC+4           Overlimit ?\n         BH    PARMNEXT               Go out if so\n         CLI   0(R2),C' '             Empty record ?\n         BE    PARM_REC_NEXT          Seek next record if so\n         CLI   0(R2),C'*'             Commented record ?\n         BNE   PARM_REC_CONT          Begin to check record if not\nPARM_REC_NEXT  EQU *\n         LA    R2,80(,R2)\n         B     PARM_REC_CHECK         Iterate\nPARM_REC_CONT  EQU *\n         LR    R3,R2                  Address of record\n         LA    R7,72                  Max parm length is 72\nPARM_REC_LOOP  EQU *\n         CLI   0(R3),C' '             End of parm ?\n         BE    PARM_REC_END           Yes, leave loop\n         LA    R3,1(,R3)              Seek next byte\n         BCT   R7,PARM_REC_LOOP       Iterate\nPARM_REC_END   EQU *\n         MVC   WSCARD+2(72),0(R2)       Bring parm record as well\n         LA    R2,80(,R2)             Next record address\n         ST    R2,WSIOREC             and save here\n         LA    R2,WSCARD              Address of card\n         LA    R3,72\n         STH   R3,WSCARD\n         LA    R2,WSCARD\n         WTO   TEXT=(R2),MF=(E,LWTO)\n         LA    R2,WSCARD+2            Address of parameter\n         B     CHKPARM1               Skip NSI\nDESTTAB  EQU   *\n         MVC   WSTABLE(6),=C'XDITAB'\n         MVC   WSTABLE+6(2),0(R2)\n         OI    WSPFLAGS,WSPFTABL      Indicate table will be renew\n         B     UPDATE_TABLE\nCHKPARM  EQU   *\n         LA    R2,WSCOMBUF            Access 1st parameter address\n         XR    R7,R7                  Clear R7\n         ICM   R7,B'0011',WSCOMBUF    Parameter length\n         LA    R2,2(,R2)              Straight to parm area\nCHKPARM1 EQU   *\n         LA    R3,PARMKEYS            Point to parm table\n         LA    R4,PARMKEYN            Number of entries\n         XR    R5,R5                  Zap GR 5\nPARMLOOP EQU   *\n         IC    R5,3(R3)               Get keyword string length\n         EX    R5,CHKKEYWD            Is it the right keyword ?\n         BE    PARMOKEY               Yes, handle it\n         LA    R3,PARMKEYW(R3)        Seek next entry\n         BCT   R4,PARMLOOP            and iterate\n         @MESSAGE ERROR,OPCODE=B,OBJECT=(R2),TYPE=PARM,                +\n               RC=*,EXIT=PARMNEXT\n         B     PARMNEXT               Get next parm\nPARMKEYS DS    0H\n   DC Y(CHKCLS-PARMKEYS),AL1(*-*,7,8,0),CL8'CLASSES='\n   DC Y(CHKCLS-PARMKEYS),AL1(*-*,5,6,0),CL8'CLASS=  '\n   DC Y(CHKRQC-PARMKEYS),AL1(*-*,7,8,0),CL8'RQCLASS='\n   DC Y(CHKFRM-PARMKEYS),AL1(*-*,6,7,0),CL8'PCFORM= '\n   DC Y(CHKTRC-PARMKEYS),AL1(*-*,5,6,0),CL8'TRACE=  '\n   DC Y(CHKDSP-PARMKEYS),AL1(*-*,4,5,0),CL8'DISP=   '\n   DC Y(CHKXDS-PARMKEYS),AL1(*-*,5,6,0),CL8'XDISP=  '\n   DC Y(CHKHLD-PARMKEYS),AL1(*-*,4,5,0),CL8'HOLD=   '\n   DC Y(CHKHDD-PARMKEYS),AL1(*-*,7,8,0),CL8'PCDRIVE='\n   DC Y(CHKTAB-PARMKEYS),AL1(*-*,7,8,0),CL8'DESTTAB='\n   DC Y(CHKTAB-PARMKEYS),AL1(*-*,5,6,0),CL8'TABLE=  '\n   DC Y(CHKXCP-PARMKEYS),AL1(*-*,5,6,0),CL8'XPARM=  '\nPARMKLEN EQU   *-PARMKEYS\nPARMKEYW EQU   14\nPARMKEYN EQU   PARMKLEN/PARMKEYW\n         SPACE ,\nCHKKEYWD CLC   6(*-*,R3),0(R2)             << Executed >>\nGETPARM  MVC   0(*-*,R6),0(R2)             << Executed >>\n         SPACE ,\nPARMOKEY EQU   *\n         LA    R2,1(R5,R2)            Jump over the keyword\n         LR    R4,R7                  Copy parm length\n         SR    R4,R5                  Reduced by kwd length\n         LR    R7,R4                  Copy to GR 7\n         BCTR  R4,0                   Reduced again by 1\n         IC    R5,4(R3)               Get parm string length\n         LH    R6,0(,R3)              Get relocation factor\n         B     PARMKEYS(R6)           Relocate and go\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check Harddisk PC Drive Letter                  \u00a6\n*   \u00a6                                                   \u00a6\n*   +---------------------------------------------------+\n*\nCHKHDD   EQU   *\n         MVC   WSPCHDD,0(R2)          Get HDD letter\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check XPARM Parameter                           \u00a6\n*   \u00a6     Get list of 1 to 38 byte job parameter in     \u00a6\n*   \u00a6     the form of:                                  \u00a6\n*   \u00a6                                                   \u00a6\n*   \u00a6     XPARM=('ACBNAME=aaaaaaaa,TYPE=tttttttt')      \u00a6\n*   \u00a6                                                   \u00a6\n*   +---------------------------------------------------+\n*\nCHKXCP   EQU   *\n         MVI   WSXCJPRM,C' '\n         MVC   WSXCJPRM+1(L'WSXCJPRM-1),WSXCJPRM\n         LA    R6,WSXCJPRM            Address of target\n         BAS   R14,COPYPARM           Perform copy parameter\n         B     PARMNEXT               Get next parm\n*\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check TABLE or DESTTAB Parameter                \u00a6\n*   \u00a6     Get 2 digit suffix of destination table       \u00a6\n*   \u00a6                                                   \u00a6\n*   +---------------------------------------------------+\n*\nCHKTAB   EQU   *\n         MVC   WSTABLE(6),=C'XDITAB'\n         MVC   WSTABLE+6(2),0(R2)\n         OI    WSPFLAGS,WSPFTABL      Indicate table will be renew\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check CLASS or CLASSES Parameter                \u00a6\n*   \u00a6     Get list of 1 to 8 sysout classes to be       \u00a6\n*   \u00a6     a selection criteria                          \u00a6\n*   \u00a6                                                   \u00a6\n*   +---------------------------------------------------+\n*\nCHKCLS   EQU   *\n         MVC   WSCLASSL,=8X'40'       Blank class list\n         LA    R6,WSCLASSL            Point to target\n         OI    WSPFLAGS,WSPFCLAS      Indicate that class parm done\n         OI    WSPFLAGS,WSPFSSRQ      Indicate need re-SSREQ\n         BAS   R14,COPYPARM           Perform copy parameter\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check RQCLASS Parameter                         \u00a6\n*   \u00a6                                                   \u00a6\n*   +---------------------------------------------------+\n*\nCHKRQC   EQU   *\n         MVC   WSQCLASS,0(R2)         Get requeue class\n         OI    WSQCLASS,C' '          Must uppercase\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check PCFORM Parameter                          \u00a6\n*   \u00a6     Get default PC FORM to be used to create      \u00a6\n*   \u00a6     flat dataset.   This parameter will be        \u00a6\n*   \u00a6     overriden by one specified in the XDI         \u00a6\n*   \u00a6     parmlib member.                               \u00a6\n*   +---------------------------------------------------+\n*\nCHKFRM   EQU   *\n         LA    R6,WSFORM              Point to target\n         MVC   WSFORM,=CL8' '\n         BAS   R14,COPYPARM           Copy the parm here\n         CLC   =C'DISPATCH',WSFORM    Is FORM = DISPATCH ?\n         BNE   WINDFRM                No, may be WINDOWS\n         MVI   WSFFLAGS,WSFFDISP      Indicate FORM is DISPATCH\n         B     OKEYFRM                Get next parm\nWINDFRM  CLC   =C'WINDOWS',WSFORM     Is FORM = WINDOWS ?\n         BNE   S390FRM                Get next parm\n         MVI   WSFFLAGS,WSFFWIND      Indicate FORM is WINDOWS\n         B     OKEYFRM                Get next parm\nS390FRM  MVI   WSFFLAGS,WSFFS390      Indicate FORM is S/390 standard\nOKEYFRM  EQU   *\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6  Dynamic Data Copier                              \u00a6\n*   \u00a6                                                   \u00a6\n*   +---------------------------------------------------+\n*\nCOPYPARM EQU   *\n         CLI   0(R2),C' '             End of parm ?\n         BE    COPYPEND               Yes, skip\n         MVC   0(1,R6),0(R2)          Take 1 byte parm\n         OI    0(R6),C' '             Make it uppercase\n         LA    R6,1(,R6)              Next byte of target\n         LA    R2,1(,R2)              Next byte of source\n         BCT   R7,COPYPARM            Iterate\n         BR    R14                    Return\nCOPYPEND EQU   *\n         LA    R2,1(,R2)              Next byte of source\n         BCTR  R7,0\n         BR    R14                    Return\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check DISP Parameter                            \u00a6\n*   \u00a6     Get default sysout override disposition.      \u00a6\n*   \u00a6     This parameter will be overriden by one       \u00a6\n*   \u00a6     specified in the XDI parmlib member.          \u00a6\n*   +---------------------------------------------------+\n*\nCHKDSP   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFKEEP Clear indicator\n         CLC   =C'KEEP',0(R2)         Is DISP=KEEP ?\n         BE    OKEYDSPK               Handle if so\n         CLC   =C'DELETE',0(R2)       Is DISP=DELETE ?\n         BE    OKEYDSP                Handle if so\n         B     PARM_ERROR             Otherwise, signal error msg\nOKEYDSPK EQU   *\n         OI    WSOFLAGS,WSOFKEEP      Indicate DISP=KEEP\nOKEYDSP  EQU   *\n         B     PARMNEXT               Get next parm\n         SPACE\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check DISP Parameter                            \u00a6\n*   \u00a6     Get default flat dataset disposition to be    \u00a6\n*   \u00a6     specified in file LCLDS01 of XCOMJOB.  This   \u00a6\n*   \u00a6     parameter will be overriden by one specified  \u00a6\n*   \u00a6     in the XDI parmlib member.                    \u00a6\n*   +---------------------------------------------------+\n*\nCHKXDS   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFXKEP Clear indicator\n         CLC   =C'KEEP',0(R2)         Is XDISP=KEEP ?\n         BE    OKEYXDSK               Handle if so\n         CLC   =C'DELETE',0(R2)       Is XDISP=DELETE ?\n         BE    OKEYXDS                Handle if so\n         B     PARM_ERROR             Otherwise, signal error msg\nOKEYXDSK EQU   *\n         OI    WSOFLAGS,WSOFXKEP      Indicate XDISP=KEEP\nOKEYXDS  EQU   *\n         B     PARMNEXT               Get next parm\n         SPACE ,\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check HOLD Parameter                            \u00a6\n*   \u00a6     Get default held sysout processing.  Specify  \u00a6\n*   \u00a6     HOLD=PROCESS indicate that held sysout file   \u00a6\n*   \u00a6     will be accecpted to XDI processing.  Other-  \u00a6\n*   \u00a6     wise, HOLD=IGNORE is assumed.                 \u00a6\n*   +---------------------------------------------------+\n*\nCHKHLD   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFHOLD Clear indicator\n         CLC   =C'PROCESS',0(R2)      Is HOLD=PROCESS ?\n         BE    OKEYHLDK               Handle if so\n         CLC   =C'IGNORE',0(R2)       Is HOLD=IGNORE ?\n         BE    OKEYHLD                Handle if so\n         B     PARM_ERROR\nOKEYHLDK EQU   *\n         OI    WSOFLAGS,WSOFHOLD      Indicate XDISP=KEEP\nOKEYHLD  EQU   *\n         OI    WSPFLAGS,WSPFSSRQ      Indicate need re-SSREQ\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Check TRACE Parameter                           \u00a6\n*   +---------------------------------------------------+\n*\nCHKTRC   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFTRAC Clear indicator\n         CLC   =C'OFF',0(R2)          Is TRACE=OFF ?\n         BE    OKEYTRC                Handle if so\n         CLC   =C'ON',0(R2)           Is TRACE=ON ?\n         BE    OKEYTRCY               Handle if so\n         CLC   =C'NO',0(R2)           Is TRACE=OFF ?\n         BE    OKEYTRC                Handle if so\n         CLC   =C'YES',0(R2)          Is TRACE=ON ?\n         BE    OKEYTRCY               Handle if so\n         CLC   =C'N',0(R2)            Is TRACE=OFF ?\n         BE    OKEYTRC                Handle if so\n         CLC   =C'Y',0(R2)            Is TRACE=ON ?\n         BNE   PARMNEXT               No, get next parm\nOKEYTRCY EQU   *\n         OI    WSOFLAGS,WSOFTRAC      Indicate trace is on\nOKEYTRC  EQU   *\n         B     PARMNEXT               Get next parm\nPARM_ERROR     EQU *\n         L     R2,0(,R1)              Restore parm\n         @MESSAGE ERROR,OPCODE=B,OBJECT=(R2),TYPE=PARM,                +\n               RC=*,EXIT=EXIT\nPARMNEXT EQU   *\n         TM    WSPFLAGS,WSPFFILE      Is it parmlib processing ?\n         BZ    PARMCONT\n         L     R2,WSIOREC             Access record\n         C     R2,WSIOREC+4           Is it overlimit ?\n         BNH   PARM_REC               No, continue next record\n         BAS   R14,GET_PARM           Yes, try another block\n         @WTO  CODE=171,TRACE=ALWAYS\n         B     RVEWPARM               Go here if no more block\nPARMCONT EQU   *\n         @WTO  CODE=170,TRACE=ALWAYS\n         B     RVEWPARM               Go to review parameters\n         EJECT\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Read Parameter Table (XDISYSnn)                 \u00a6\n*   \u00a6     - All parameter can be specified in this      \u00a6\n*   \u00a6       table                                       \u00a6\n*   \u00a6     - Inline parameter will override this table   \u00a6\n*   +---------------------------------------------------+\n*\nGET_PARM EQU *\n         STM   R0,R15,WSSAVEGR\n         B     READ_BLOCK\nOPEN_PARM      EQU *\n         STM   R0,R15,WSSAVEGR\n         @WTO  CODE=135,TRACE=ALWAYS\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   WSEOPARM,DCBEEODA         Save EODAD in WSA\n         MVC   DCBEEODA,=A(EOF_PARMLIB)  Set EOF exit routine address\n         TM    DCBOFLGS,DCBOFOPN         Is it opened ?\n         BO    READ_PARM                 Yes, read parmlib block\n         OPEN  ((R8),(INPUT)),MF=(E,LOPEN_PARMLIB),MODE=31 Open PARMLIB\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BO    OPEN_PARM_OKEY\n         @MESSAGE ERROR,OPCODE=BZ,RC=(R15),                            +\n               OPER=IO,TYPE=OPEN,OBJECT=DCBDDNAM,                      +\n               EXIT=*\n         @MESSAGE ERROR,OPCODE=BZ,OBJECT=(R2),TYPE=PARM,               +\n               RC=*,EXIT=EXIT\n         B     EXIT\nOPEN_PARM_OKEY EQU *\n         OI    WSPFLAGS,WSPFOPEN         Remember parmlib opened\n         L     R1,WSIOBUF                 and save in WSA\n         A     R1,WSIOBUF+4              Save buffer length\n         ST    R1,WSIOREC+4              Save address of end of buffer\nREAD_PARM      EQU *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         FIND  ((R8)),WSPARMM,D          Find the member\n         LTR   R15,R15                   Check RC\n         BZ    READ_BLOCK                Begin to read if RC = 0\n         @MESSAGE WARNING,OPCODE=BNZ,RC=(R15),                         +\n               OPER=IO,TYPE=FIND,OBJECT=WSPARMM,                       +\n               EXIT=*\n         @MESSAGE WARNING,OPER=FIND,RC=(R15),                          +\n               TYPE=PARM,OBJECT=WSPARMM,EXIT=EXIT\n         B     EXIT\nREAD_BLOCK     EQU *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R5,WSIOBUF         Address of I/O buffer\n         ST    R5,WSIOREC         Save 1st record address\n         READ  XDIDECB,SF,(R8),(R5),'S',MF=E\n         CHECK XDIDECB\n         LH    R6,DCBLRECL        Get LRECL\n         LH    R7,DCBBLKSI         and BLOCK SIZE\n         LA    R7,0(R7,R5)        End of full block\n         L     R1,XDIDECB+16      Address of IOB\n         LH    R1,14(R1)          Residual count for short block\n         SR    R7,R1              Adjust block length\n         SR    R7,R6              Backward to the start of last record\n         ST    R7,WSIOREC+4       Save address of last record\n         LM    R0,R15,WSSAVEGR    Restore GPRs\n         BR    R14                Return\nEOF_PARMLIB    EQU   *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   DCBEEODA,WSEOPARM         Restore EODAD from WSA\nRVEWPARM EQU   *\n         @WTO  CODE=136,TRACE=ALWAYS\nSHOWPARM EQU   *\n         LA    R5,M_ENTRY\n         TM    WSPFLAGS,WSPFFILE      Clear file indicator\n         BZ    SHOW_CLASS\n         LA    R5,M_FILE\n         @MESSAGE INFO,OPER=SHOW,TYPE=PARMFILE,                        +\n               OBJECT=WSPARMM\nSHOW_CLASS     EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=CLASS,                           +\n               OBJECT=WSCLASSL,TEXT=(R5)\n         CLI   WSFFLAGS,WSFFDISP      PC form = Dispatch ?\n         BE    SHOW_FORM\n         CLI   WSFFLAGS,WSFFWIND      PC form = Windows ?\n         BE    SHOW_FORM\n         MVI   WSFFLAGS,WSFFS390      Otherwise, must be S/390\n         MVC   WSFORM,=CL8'S/390'\nSHOW_FORM      EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=PCFORM,                          +\n               OBJECT=WSFORM,TEXT=(R5)\n         MVC   WSDWORD,=CL8'KEEP'\n         TM    WSOFLAGS,WSOFKEEP\n         BO    SHOW_DISP\n         MVC   WSDWORD,=CL8'DELETE'\nSHOW_DISP      EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=DISP,                            +\n               OBJECT=WSDWORD,TEXT=(R5)\n         MVC   WSDWORD,=CL8'KEEP'\n         TM    WSOFLAGS,WSOFXKEP\n         BO    SHOW_XDISP\n         MVC   WSDWORD,=CL8'DELETE'\nSHOW_XDISP     EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=XDISP,                           +\n               OBJECT=WSDWORD,TEXT=(R5)\n         MVC   WSDWORD,=CL8'PROCESS'\n         TM    WSOFLAGS,WSOFHOLD\n         BO    SHOW_HOLD\n         MVC   WSDWORD,=CL8'IGNORE'\nSHOW_HOLD      EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=HOLDFILE,                        +\n               OBJECT=WSDWORD,TEXT=(R5)\n         MVC   WSWORD,=CL4'ON'\n         TM    WSOFLAGS,WSOFTRAC\n         BO    SHOW_TRACE\n         MVC   WSWORD,=CL4'OFF'\nSHOW_TRACE     EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=TRACE,                           +\n               OBJECT=WSWORD,TEXT=(R5)\n         B     EXIT\nM_ENTRY  DC   AL2(L'MT_ENTRY)\nMT_ENTRY DC   C'from direct entry  '\nM_FILE   DC   AL2(L'MT_FILE)\nMT_FILE  DC   C'from parmlib member  '\n         EJECT\n         DS   0H\n         EJECT\n*\n*   +---------------------------------------------------+\n*   \u00a6                                                   \u00a6\n*   \u00a6   Read Destination Table (XDITABnn)               \u00a6\n*   \u00a6     - Set of destination of recipient can only    \u00a6\n*   \u00a6       specified via this table                    \u00a6\n*   \u00a6     - There is no default for destinataion        \u00a6\n*   +---------------------------------------------------+\n*\nUPDATE_TABLE  EQU *\n         @WTO  CODE=172,TRACE=ALWAYS\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   WSEOPARM,DCBEEODA         Save EODAD in WSA\n         MVC   DCBEEODA,=A(EOF_TABLE)    Set EOF exit routine address\n         TM    DCBOFLGS,DCBOFOPN         Is it opened ?\n         BO    OPEN_TABLE_OKEY           Yes, read table block\n         OPEN  ((R8),(INPUT)),MF=(E,LOPEN_PARMLIB),MODE=31 Open PARMLIB\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BO    OPEN_TABLE_OKEY\n         @MESSAGE ERROR,OPCODE=BZ,RC=(R15),                            +\n               OPER=IO,TYPE=OPEN,OBJECT=WSTABLE,                       +\n               EXIT=*\n         @MESSAGE ERROR,OPCODE=BZ,OBJECT=(R2),TYPE=TABLE,              +\n               RC=*,EXIT=EOF_TABLE\n         B     EOF_TABLE\nOPEN_TABLE_OKEY EQU *\n         L     R8,ADDR_PARMLIB       Capture Parmlib DCB map\n         FIND  ((R8)),WSTABLE,D      Check if TABLE name exist\n         ST    R15,WSRCODE             Save RC\n         LTR   R15,R15               Check RC\n         BZ    READ_TABLE            Go straight if RC =  0\n         @MESSAGE WARNING,OPCODE=BNZ,RC=(R15),                         +\n               OPER=IO,TYPE=FIND,OBJECT=WSTABLE,                       +\n               EXIT=*\n         L     R15,WSRCODE           Restore RC\n         @MESSAGE WARNING,OPER=FIND,RC=(R15),                          +\n               TYPE=TABLE,OBJECT=WSTABLE,EXIT=*\n         B     EOF_TABLE\nREAD_TABLE     EQU *\n         LM    R2,R3,WSDESTP      Pointer and number of dest\n         LTR   R2,R2              Has it initialized ?\n         BZ    GET_VS_TABLE\n         SLL   R3,3               Multiply to number of byte\n         STORAGE RELEASE,ADDR=(R2),LENGTH=(R3)\nGET_VS_TABLE   EQU *\n         L     R3,WSIOBUF+4\n         SLL   R3,1              At least 2 x I/O buffer\n         STORAGE OBTAIN,LENGTH=(R3)\n         ST    R1,WSDESTP         Save pointer\n         SRL   R0,3               Divided by 8\n         ST    R0,WSDESTP+4       and save it\n*>>      TM    WSOFLAGS,WSOFTRAC  Is trace enabled ?\n*>>      BZ    READ_BLOCK         Skip info msg if not\n         @WTO  CODE=107,TRACE=ALWAYS Get parmlist address\n         LM    R2,R3,WSDESTP      Top of table & # dest\nREAD_TABLE_BLOCK EQU *\n         L     R5,WSIOBUF         Address of I/O buffer\n         READ  XDIDECB,SF,(R8),(R5),'S',MF=E\n         CHECK XDIDECB\n         LH    R6,DCBLRECL        Get LRECL\n         LH    R7,DCBBLKSI         and BLOCK SIZE\n         LA    R7,0(R7,R5)        End of full block\n         L     R1,XDIDECB+16      Address of IOB\n         LH    R1,14(R1)          Residual count for short block\n         SR    R7,R1              Adjust block length\n         SR    R7,R6              Backward to the start of last record\nREAD_TABLE_RECORD EQU *\n         CLI   0(R5),C'*'         Is comment ?\n         BE    READ_TABLE_NEXT    Yes, skip this record\n         CLI   0(R5),C' '         Is blank ?\n         BE    READ_TABLE_NEXT    Yes, skip this record\n         CLI   0(R5),X'00'        Is null ?\n         BE    READ_TABLE_NEXT    Yes, skip this record\n         MVC   0(8,R2),0(R5)      Get in the destination name\n         LA    R2,8(,R2)          Next dest\n         BCT   R3,READ_TABLE_NEXT\n         L     R3,WSDESTP+4\n         SLL   R3,4\n         STORAGE OBTAIN,LENGTH=(R3)\n         ST    R1,WSDWORD\n         ST    R0,WSDWORD+4\n         LR    R2,R1              Address\n         LM    R0,R1,WSDESTP\n         SLL   R1,3\n         LR    R3,R1\nMVCL_LOOP EQU  *\n         MVCL  R2,R0\n         LTR   R1,R1\n         BC    1,MVCL_LOOP\n         ST    R2,WSWORD          Position of unfilled new buffer\n         LM    R2,R3,WSDESTP      Old table\n         SLL   R3,3               Zoom to # bytes\n         STORAGE RELEASE,ADDR=(R2),LENGTH=(R3)\n         LM    R2,R3,WSDWORD      New table\n         SRL   R3,3               # of dest\n         STM   R2,R3,WSDESTP      Save new table\n         L     R2,WSWORD          Resume position\n         LR    R15,R2\n         S     R15,WSDESTP        Offset\n         L     R3,WSDWORD+4       Length of table\n         SR    R3,R15             Length beyond last position\n         SRL   R3,3               Rest # dest\nREAD_TABLE_NEXT EQU *\n         BXLE  R5,R6,READ_TABLE_RECORD  Search next record in block\n         B     READ_TABLE_BLOCK         Iterate to read next block\nEOF_TABLE EQU  *\n         MVC   0(8,R2),=CL8'/*EOF '\n         NI    WSPFLAGS,X'FF'-WSPFTABL   Clear indicator\n         MVC   WSDESTP1(8),WSDESTP      Set hot position\n         MVC   DCBEEODA,WSEOPARM        Restore EODAD from WSA\n         @WTO  CODE=173,TRACE=ALWAYS\n*\n*  +--------------------------------------------------------------+\n*  |  Exit procedure                                              |\n*  |    (1)  Tell JES that interaction is finished.               |\n*  |    (2)  Free SSOB/SSSO storage area.                         |\n*  |    (3)  Restore system savearea address                      |\n*  |    (4)  Disconnect DERWTR and DERWTX                         |\n*  |    (5)  Free WSA                                             |\n*  |    (6)  Restore states                                       |\n*  |    (7)  Return to MVS                                        |\n*  |                                                              |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nEXIT     EQU   *\n         TM    WSPFLAGS,WSPFTABL      Is update table requested ?\n         BO    UPDATE_TABLE           Yes, handle it\nQUIT     EQU   *\n*        LM    R2,R3,WSIOBUF            I/O buffer address & size\n*        STORAGE RELEASE,ADDR=(R2),LENGTH=(R3)   Release the buffer\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n* +--------------------------------+\n* | Command interaction buffer     |\n* | used to interfacing operator   |\n* | console transaction            |\n* +--------------------------------+\n*\n         DERCIB TYPE=DSECT\n*        @EPILOG\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n         END   DERCOM\n./ ADD NAME=DERDCB   0100-01324-01324-1743-00067-00067-00000-DERU-S\n*\n*\n*                     +----------+\n*     Module Name  -  \u00a6 DERDCB   \u00a6\n*                     +----------+\n*\n*\n*     Function -\n*\n*\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n*     +--------+------------+--------+---------------------------+\n*     \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     +--------+------------+--------+---------------------------+\n*\n         DERDCB TYPE=CSECT,PRINT=GEN,RMODE=24,AMODE=31\n./ ADD NAME=DERMSG   0100-01324-01324-1743-00067-00067-00000-DERU-S\n*\n*\n*                     +----------+\n*     Module Name  -  \u00a6 DERMSG   \u00a6\n*                     +----------+\n*\n*\n*     Function -\n*\n*\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n*     +--------+------------+--------+---------------------------+\n*     \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     +--------+------------+--------+---------------------------+\n*\n         DERMSG TYPE=CSECT,PRINT=GEN\n./ ADD NAME=DERWSA   0100-01324-01324-1743-00067-00067-00000-DERU-S\n*\n*\n*                     +----------+\n*     Module Name  -  \u00a6 DERWSA   \u00a6\n*                     +----------+\n*\n*\n*     Function -\n*\n*\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n*     +--------+------------+--------+---------------------------+\n*     \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     +--------+------------+--------+---------------------------+\n*\n         DERWSA TYPE=CSECT,PRINT=GEN,AMODE=31,RMODE=24\n./ ADD NAME=DERWTB   0100-01324-01324-1743-00581-00581-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERWTB  |\n*                     +---------+\n*                     Local External Writer Component to Support\n*                     CA-Dispatch and CA-XCOM Handshaking\n*\n*     Function -\n*            Output writer routine to copy sysout into flat dataset\n*            files and submit XCOMJOB.\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          None\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R6   -->  Work registers\n*          R7      -->  DCB map (IHADCB) address of SYSOUT\n*          R8      -->  DCB map (IHADCB) address of LCLDS01\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  Flat File record map\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERWTB   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=24,                                               +\n               RENT=YES,                                               +\n               BREG=R12\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING FFRECMAP,R11       Establish Flat file record map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Enable WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Enable WTX addressability\n         LOAD  EP=DERDCB\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         L     R7,DCBDCBE\n         CLC   =C'DCBE',0(R7)\n         BE    INSTALL_EODA\n         WTO   'DER999999E DCBE Lost before I/O process begun...!!!'\n         LA    R15,12               Set RC = 12\n         B     EXIT\nINSTALL_EODA   EQU *\n         MVC   DCBEODA,=AL3(SPOOL_END)\n         MVC   DCBSYNA,=AL3(SPOOL_SYN)\n         MVC   DCBEEODA,=A(SPOOL_END)\n         MVC   DCBESYNA,=A(SPOOL_SYN)\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS01\n         L     R7,DCBDCBE\n         MVC   DCBSYNA,=AL3(SPOOL_SYN)\n         MVC   DCBESYNA,=A(SPOOL_SYN)\n         L     R11,WSIOBUF          Record buffer\n         XC    FFRRDW,FFRRDW\n         XC    WSBLKPTR,WSBLKPTR\n         XC    WSRECPTR,WSRECPTR\n         EJECT ,\n*\n*  +--------------------------------------------------------------+\n*  |  Process spoolfile (sysout) & flatfile (dataset)             |\n*  |  (1)  Initialize flat file w/ 3 records CADS-type header.    |\n*  |  (2)  Sysout is to be read into memory, record by record.    |\n*  |       Check CC in 1st byte of each record.                   |\n*  |  (3)  Write each spoolfile-record into flatfile record w/o   |\n*  |       CC with the following rule:                            |\n*  |         If CC = page-break then insert 3rd CADS-type header  |\n*  |         record into flatfile.                                |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nPROCESS_SPOOL  EQU *\n         @WTO  CODE=177\n         L     $SYSOUT,ADDR_JES2FILE Access DCB of JES2FILE\n         L     $FLATDS,ADDR_LCLDS01 Access DCB of LCLDS01\n         TM    WSPFLAGS,WSPFOVER    Is form overriden ?\n         BZ    PROCESS_STD          No, just take normal way\n         CLI   WSOVFORM,WSFFS390    Is it S/390 standard format ?\n         BE    PROCESS_S390         Yes, process it\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BNE   PROCESS_MCC          No, it should MCC format, handle it\n         CLI   WSOVFORM,WSFFDISP    Is it Dispatch format ?\n         BE    ASA_DISPATCH         Yes, process it\n         CLI   WSOVFORM,WSFFWIND    Is it Windows format ?\n         BE    ASA_WINDOWS          Yes, process it\n         B     PROCESS_S390         Otherwise, assume standard\nPROCESS_STD    EQU *\n         CLI   WSFFLAGS,WSFFS390    Is it S/390 format ?\n         BE    PROCESS_S390         Yes, process it\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BNE   PROCESS_MCC          No, it should MCC format, handle it\n         CLI   WSFFLAGS,WSFFDISP    Is it Dispatch format ?\n         BE    ASA_DISPATCH         Yes, process it\n         CLI   WSFFLAGS,WSFFWIND    Is it Windows format ?\n         BE    ASA_WINDOWS          Yes, process it\n         B     PROCESS_S390         Otherwise, assume standard\n*\nASA_DISPATCH   EQU *\n         @WTO  CODE=178\n         BAS   R6,DSP_HEADER       Build header\nASA_DSP_READ   EQU *\n         BAS   R14,GET_RECORD       Get a logical record\n         LA    R5,ASA_DSP_NEWPAGE   Return address if true\n         BAS   R6,ASA_TEST_CHANNEL\n         BAS   R6,ASA_TEST         Check all others\n         B     ASA_DSP_READ         Interate\nASA_DSP_NEWPAGE EQU *\n         BAS   R6,DSP_PAGE_HEADER Write page header\n         BAS   R6,ASA_SPACE1       Write 1st line record\n         B     ASA_DSP_READ         Interate\nASA_WINDOWS    EQU *\n         @WTO  CODE=179\nASA_WIN_READ   EQU *\n         BAS   R14,GET_RECORD JES2FILE Load sysout record\n         LA    R5,ASA_WIN_NEWPAGE\n         BAS   R6,ASA_TEST_CHANNEL\n         BAS   R6,ASA_TEST         Check all others\n         B     ASA_WIN_READ         Interate\nASA_WIN_NEWPAGE EQU *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         MVI   FFRDATA,X'0C'        Put page-break sign\n         EX    R2,ASA_WIN_REC1\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         B     ASA_WIN_READ         Interate\nASA_WIN_REC1   OC FFRDATA+1(*-*),0(R3) Move data from sysout buffer\nASA_TEST EQU   *\n         CLI   0(R1),$ASA_SP1       Is it space 1 line ?\n         BE    ASA_SPACE1           Yes, handle it\n         CLI   0(R1),$ASA_SP2       Is it space 2 line ?\n         BE    ASA_SPACE2           Yes, handle it\n         CLI   0(R1),$ASA_SP3       Is it space 3 line ?\n         BE    ASA_SPACE3           Yes, handle it\n*        CLI   0(R1),$ASA_SP0       Is it suppress line ?\n*        BER   R6                   Yes, ignore it\n         BR    R6                   Interate\nASA_SPACE1     EQU *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Interate\nMOVE_FFREC     OC FFRDATA(*-*),0(R3) Move data from sysout buffer\nASA_SPACE2     EQU *\n         LA    R4,1                 Do 1 x iteration\nASA_SPACE_LOOP EQU *\n         MVC   FFRECLEN,=H'5'       This line is 1 byte space\n         MVC   FFRDATA(8),=CL5' '\n         PUT   ($FLATDS),FFREC LCLDS01 Store it into output file\n         BCT   R4,ASA_SPACE_LOOP    Iterate\n         B     ASA_SPACE1           Attempt to store record\nASA_SPACE3     EQU *\n         LA    R4,2                 Do 2 x iteration\n         B     ASA_SPACE_LOOP       Iterate\n         SPACE ,\n*\nASA_TEST_CHANNEL EQU *\n         CLI   0(R1),$ASA_C01       Is it channel 1 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C02       Is it channel 2 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C03       Is it channel 3 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C04       Is it channel 4 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C05       Is it channel 5 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C06       Is it channel 6 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C07       Is it channel 7 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C08       Is it channel 8 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C09       Is it channel 9 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C10       Is it channel 10 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C11       Is it channel 11 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C12       Is it channel 12 skip ?\n         BER   R5                   Yes, return\n         BR    R6                   No, return to other gate\n*\nPROCESS_MCC    EQU *\n         L     $SYSOUT,ADDR_JES2FILE Access DCB of JES2FILE\n         L     $FLATDS,ADDR_LCLDS01 Access DCB of LCLDS01\n         L     R11,WSIOBUF          Record buffer\n         CLI   WSFFLAGS,WSFFDISP    Is it Dispatch format ?\n         BNE   MCC_WINDOWS          No, it should Windows format\n         @WTO  CODE=180\n         BAS   R6,DSP_HEADER       Build header\nMCC_DSP_EJECT  EQU *\n         BAS   R6,DSP_PAGE_HEADER\nMCC_DSP_READ   EQU *\n         BAS   R14,GET_RECORD JES2FILE Load sysout record\n         LA    R5,MCC_DSP_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_EJECT   Evaluate MCC\n         LA    R5,MCC_DSP_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_CHANNEL Address to handle channel skipping\n         BAS   R6,MCC_LINE         Handle other MCC\n         B     MCC_DSP_READ         Interate\nMCC_WINDOWS    EQU *\n         @WTO  CODE=181\nMCC_WIN_READ   EQU *\n         BAS   R14,GET_RECORD JES2FILE Load sysout record\n         LA    R5,MCC_WIN_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_EJECT   Evaluate MCC for EJECTion\n         LA    R5,MCC_WIN_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_CHANNEL Address to handle channel skipping\n         BAS   R6,MCC_LINE         Process other MCC\n         B     MCC_WIN_READ         Interate\nMCC_WIN_EJECT  EQU *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         BAS   R14,GET_RECORD JES2FILE Load sysout record\n         EX    R2,MCC_WIN_MVC\n         MVI   FFRDATA,X'0C'        Put page-break sign\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         B     MCC_WIN_READ         Interate\nMCC_WIN_MVC  OC FFRDATA+1(*-*),1(R1) Move data from sysout buffer\n*\nDSP_HEADER   EQU *\n         XC    FFRRDW,FFRRDW\n         MVC   FFRDATA(L'PH1),PH1\n         LA    R2,L'PH1             Length of header 1\n         STH   R2,FFRECLEN          Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         MVC   FFRDATA(L'PH2),PH2\n         LA    R2,L'PH2             Length of header 1\n         STH   R2,FFRECLEN          Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Return\nDSP_PAGE_HEADER EQU *\n         AP    WSPGNUM,=PL1'1'      Increment page number\n         @EDITHDR UPDATE,LOC=*,     Edit page number                   +\n               PAGENUM=(DEC,WSPGNUM),                                  +\n               PREFIX=PH\n         LA    R2,L'PH3             Length of header 3\n         STH   R2,FFRECLEN          Put it on DCB\n         MVC   FFRDATA(L'PH3),PH3   Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Return\n*  Notes:\n*   The following MCC will affect to take action\n*   after printing.\nMCC_LINE EQU   *\n         CLI   0(R1),$MCC_SP1       Is it space 1 line ?\n         BE    MCC_SPACE1           Yes, handle it\n         CLI   0(R1),$MCC_SP2       Is it space 2 line ?\n         BE    MCC_SPACE2           Yes, handle it\n         CLI   0(R1),$MCC_SP3       Is it space 3 line ?\n         BE    MCC_SPACE3           Yes, handle it\n         CLI   0(R1),$MCC_SP0       Is it print only line ?\n         BNER  R6                   No, ignore it, return\nMCC_SPACE0     EQU *\n         LA    R4,1                 Do not iterate\n         B     MCC_PRINT\nMCC_SPACE1     EQU *\n         LA    R4,1                 Do 1 x iteration\n         B     MCC_PRINT\nMCC_SPACE2     EQU *\n         LA    R4,2                 Do 2 x iteration\n         B     MCC_PRINT\nMCC_SPACE3     EQU *\n         LA    R4,3                 Do 3 x iteration\nMCC_PRINT EQU  *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store sysout record into flatds\nMCC_PRINT_SPACE EQU *\n         BCT   R4,MCC_SPACE_LOOP\n         BR    R6                   Interate\nMCC_SPACE_LOOP EQU *\n         MVC   FFRECLEN,=H'5'\n         MVC   FFRDATA(8),=CL5' '   This line is 1 byte space\n         PUT   ($FLATDS),FFREC LCLDS01 Store it into output file\n         B     MCC_PRINT_SPACE      Iterate\n         SPACE ,\n*\nMCC_TEST_CHANNEL EQU *\n         CLI   0(R1),$MCC_C01       Is it channel 1 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C02       Is it channel 2 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C03       Is it channel 3 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C04       Is it channel 4 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C05       Is it channel 5 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C06       Is it channel 6 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C07       Is it channel 7 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C08       Is it channel 8 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C09       Is it channel 9 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C10       Is it channel 10 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C11       Is it channel 11 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C12       Is it channel 12 skip ?\n         BE    MCC_PRINT_CHANNEL\n         BR    R6                   No, return to other gate\nMCC_PRINT_CHANNEL EQU *\n         LR    R6,R5                 Copy return address\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store sysout record into flatds\n         BR    R6                   Return\n*\nMCC_TEST_EJECT EQU *\n         CLI   0(R1),$MCC_C01I      Is it channel 1 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C02I      Is it channel 2 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C03I      Is it channel 3 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C04I      Is it channel 4 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C05I      Is it channel 5 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C06I      Is it channel 6 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C07I      Is it channel 7 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C08I      Is it channel 8 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C09I      Is it channel 9 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C10I      Is it channel 10 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C11I      Is it channel 11 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C12I      Is it channel 12 immediate skip ?\n         BER   R5                   Yes, return\n         BR    R6                   No, return to other gate\n*\n*  +----------------------------------------------+\n*  \u00a6  GET a Record from Block of Data             \u00a6\n*  \u00a6    - Just access last used record if any     \u00a6\n*  \u00a6    - Else, issue GET (locate mode) to        \u00a6\n*  \u00a6      obtain next block                       \u00a6\n*  +----------------------------------------------+\n*\nGET_RECORD     EQU *\n         L     R1,WSRECPTR          Get record address\n         LTR   R1,R1                Any record there\n         BNZ   GET_SV_RECORD\n         ST    R14,WSREG14\n         GET   ($SYSOUT)  JES2FILE  Load sysout record\n         L     R14,WSREG14\n         ST    R1,WSBLKPTR          Save block address\n         CLI   2(R1),X'00'\n         BNE   GET_NOTBLOK\n         LH    R2,0(R1)             Get block length\n         LA    R1,4(,R1)            Skip BDW\n         ST    R1,WSRECPTR          Save record address\nGET_SV_RECORD  EQU *\n         XR    R4,R4\n         ICM   R4,B'0011',0(R1)     Get record length\n         STH   R4,WSLRECL           Save it\n         XR    R0,R0\n         L     R15,WSBLKPTR         Block pointer\n         ICM   R0,B'0011',0(R15)    Get block length\n         SR    R0,R4                Reduced by lrecl\n         CH    R0,=H'4'             Is any record rest ?\n         BH    GET_OKEY             Okey if at least 5\n         XC    WSRECPTR,WSRECPTR    Otherwise, zap record pointer\n         B     GET_FINISH           Then, return\nGET_OKEY EQU   *\n         LA    R2,0(R4,R1)          Address of next record\n         ST    R2,WSRECPTR          Save here\nGET_FINISH     EQU *\n         LA    R1,4(R1)             Skip RDW\n         LA    R3,1(R1)             Skip CC\n         BR    R14                  Return\nGET_NOTBLOK    EQU *\n*        LH    R2,DCBLRECL\n*        LA    R2,4(R2)\n*        STH   R2,WSLRECL\n         LA    R3,1(R1)             Skip CC\n         BR    R14                  Return\nGET_ERROR EQU  *\n         WTO   'DER999999T Record not blocked ..... !!!!!!!'\n         LA    R15,16               Set RC = 16\n         B     EXIT\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Calculate LRECL of Input Dataset               \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nCALC_LRECL     EQU *\n         LH    R2,DCBLRECL\n         LA    R2,4(R2)             Add 5 for RDW + CC\n         CH    R2,WSLRECL\n         BNH   CALC_LRECL_GO\n         LH    R2,WSLRECL           Use max 249\n         CH    R2,=H'249'           Over long\n         BNH   CALC_LRECL_GO        No,\n         LH    R2,=H'249'           Use max 249\n         B     CALC_LRECL_END       Finish\nCALC_LRECL_GO  EQU *\n         CH    R2,=H'5'             Is it under limit ?\n         BNL   CALC_LRECL_OK        No, okey\n         LH    R2,=H'5'             Yes, make it at least 4\n         B     CALC_LRECL_END       Finish\nCALC_LRECL_OK  EQU *\n         LA    R2,1(R2)\nCALC_LRECL_END EQU *\n         STH   R2,FFRECLEN          Save Lrecl\n         SH    R2,=H'5'             Back to original value - 1\n         MVI   FFRDATA,C' '\n         MVC   FFRDATA+1(256),FFRDATA\n         BR    R14                  Return\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Process S/390 Standard Format Dataset          \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nPROCESS_S390   EQU *\n         @WTO  CODE=182\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         GET   (R8)    JES2FILE     Load sysout record\n         LR    R4,R1                Save record address\n         LH    R5,DCBLRECL\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS02\n         PUT   (R8)         LCLDS02  Store sysout record into flatfile\n         LR    R2,R1\n         LH    R3,DCBLRECL\nS390_LOOP EQU  *\n         SH    R3,=H'5'\n         CR    R3,R5\n         BNH   S390_INPUT_LO\n         LR    R3,R5\n         B     S390_CHECK_MIN\nS390_INPUT_LO  EQU *\n         LR    R5,R3\nS390_CHECK_MIN EQU *\n         XC    0(4,R2),0(R2)        Zap RDW\n         CH    R3,=H'5'             At least 5 byte, is it ?\n         BH    S390_IN_TO_OUT       Yes, gohead\n         LH    R3,=H'5'             No, make it 5\nS390_IN_TO_OUT EQU *\n         STH   R3,0(R2)             Set reclength\n         LA    R2,4(,R2)            Jump over RDW\nS390_MOVE_LOOP EQU *\n         MVCL  R2,R4                Move input buf to output buf\n         BC    1,S390_MOVE_LOOP     Loop if interrupted\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS01\n         PUT   (R8)         LCLDS02  Store sysout record into flatfile\n         LR    R2,R1\n         LH    R3,DCBLRECL\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         L     R7,DCBDCBE\n         CLC   =C'DCBE',0(R7)\n         BE    S390_GET_RECORD\n         WTO   'DER999999E DCBE lost on the way ..... !!!!!!!!!!!'\n         B     SPOOL_END\nS390_GET_RECORD EQU *\n         GET   (R8)    JES2FILE     Load sysout record\n         LR    R4,R1                Save record address\n         LH    R5,DCBLRECL\n         L     R7,DCBDCBE\n         B     S390_LOOP\n*\nSPOOL_SYN EQU *\n         @WTO  CODE=148\n         LA    R15,8                     Set RC = 8\n         B     EXIT\nSPOOL_END EQU *\n         @WTO  CODE=183\n         XR    R15,R15                   Set RC = 0\nEXIT     EQU   *\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n* +--------------------------------+\n* | Flat File Record Area Map      |\n* +--------------------------------+\n*\nFFRECMAP DERFFREC TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n$FLATDS  EQU   7\n$SYSOUT  EQU   8\n         END   DERWTB\n./ ADD NAME=DERWTG   0100-01324-01324-1743-00226-00226-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERWTG  |\n*                     +---------+\n*                     Local External Writer Component to Support\n*                     CA-Dispatch and CA-XCOM Handshaking\n*\n*     Function -\n*            Output writer to through out unneeded sysout\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          None\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  DCB map (IHADCB) address\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  SSSO block address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERWTG   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=ANY,                                              +\n               RENT=YES,                                               +\n               BREG=R12\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING SSOB,R11           Establish SSOB structure map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LR    R10,R1             Enable WSA addressability\n         LOAD  EP=DERWSA\n         LR    R10,R0             Enable WSA addressability\n         L     R11,WSSSOB         Enable WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Enable WTX addressability\n         LOAD  EP=DERDCB          Just to make sure DCB is floating\n         @WTO  CODE=152              Get parmlist address\n         @EDITTOD FORMAT=BOTH\n         XC    WSRCODE,WSRCODE    Clear RC\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Allocate JES2FILE                                       \u00a6\n*  \u00a6      o  Type sysout                                       \u00a6\n*  \u00a6      o  Input                                             \u00a6\n*  \u00a6      o  Mapped by ARB & ARBP block in WTX                 \u00a6\n*  \u00a6      o  DD name taken from DCB                            \u00a6\n*  \u00a6                                                           \u00a6\n*  +-----------------------------------------------------------+\n*\nALLOC    EQU *\n         L     R8,ADDR_SYSOUT         Access of sysout DCB\n         L     R7,DCBDCBE               and DCBE\n         MVC   DCBESYNA,=A(CLOSE)     Set SYNAD\n         MVC   DCBEEODA,=A(CLOSE)     Set EODAD\n         @DYNAMIC ALLOC,              Prepare sysout SVC 99 parm       +\n               DSN=WSSODSN,           Copy DSN from SSSODSN            +\n               PREFIX=A,              The prefix is A                  +\n               GETDD=DCBDDNAM,        Copy DDname into JES2FILE's DCB  +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               LOC=*                  Inline\n         LTR   R15,R15                Check RC\n         BZ    DEALLOC                Straight dealloc if RC = 0\n         TM    WSSFLAGS,WSSFAJES      Is it already allocated ?\n         BO    OPEN                   Yes, just reopen it\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         @MESSAGE ERROR,OPCODE=BNZ,OPER=DYNALLOC,TYPE=ALLOC,           +\n               OBJECT=WSSODSN,RC=ARBERR,EXIT=DEALLOC\nOPEN     EQU   *\n         TM    DCBOFLGS,DCBOFOPN         Is it already opened ?\n         BO    READ                      Yes, try to read a record ?\n         OPEN  ((R8),(INPUT)),MODE=31,   Open DCB of sysout            +\n               MF=(E,LOPEN)\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BO    READ                      Yes, try to read\n         A     R15,WSRCODE               Accumulate RC\n         ST    R15,WSRCODE\n         WTO   'DERWTG999E Open error for file JES2FILE'\n         B     DEALLOC                   Then dealloc it\nREAD     EQU   *\n         GET   (R8)                      Read a record\nCLOSE    EQU   *\n         CLOSE ((R8)),MODE=31,MF=(E,LCLOSE) Close sysout\n         LTR   R15,R15                   Is it closed ?\n         BZ    DEALLOC                   Yes, continue dealloc\n         A     R15,WSRCODE               No, accumulate RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Close error for file JES2FILE'\nDEALLOC  EQU   *\n         @DYNAMIC FREE,               Prepare sysout SVC 99 parm       +\n               PREFIX=D,              The prefix is D                  +\n               DD=DCBDDNAM,                                            +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               TOLFAIL=1080,          Tolerate 1080 error              +\n               LOC=*                  Inline\n         LTR   R15,R15                Check RC\n         BZ    DEALLOC_OKEY\n         TM    WSSFLAGS,WSSFAJES      Is it already allocated ?\n         BZ    EXIT                   No, just exit\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         OI    WSEFLAGS,WSEFERRP      Remember this error\n         @MESSAGE ERROR,OPCODE=B,OPER=DYNALLOC,TYPE=DEALLOC,           +\n               OBJECT=WSSODSN,RC=DRBERR,EXIT=EXIT\nDEALLOC_OKEY   EQU *\n         NI    WSSFLAGS,X'FF'-WSSFAJES Turn indicator off\n         B     EXIT                   Then skip NSI\n*\n* +--------------------------------+\n* | EXIT Procedure                 |\n* | Due to everything done, then   |\n* | return to DERXDI               |\n* +--------------------------------+\n*\nEXIT     EQU   *\n         L     R15,WSRCODE              Get RC\n         LTR   R15,R15                  Check\n         BZ    EXIT01                   if RC = 0, skip msg\n         @WTO  CODE=147\nEXIT01   EQU   *\n         @WTO  CODE=153              Get parmlist address\n         TM    WSEFLAGS,WSEFERRP        Any serious error ?\n         BZ    EXIT02                   No, just exit\n         LA    R15,8                    Make RC = 8\n         A     R15,WSRCODE              Accumulate RC\n         ST    R15,WSRCODE\nEXIT02   EQU   *\n         L     R15,WSRCODE              Get RC\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n         END   DERWTG\n./ ADD NAME=DERWTR   0100-01324-01324-1743-00528-00528-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERWTR  |\n*                     +---------+\n*                     Local External Writer Component to Support\n*                     CA-Dispatch and CA-XCOM Handshaking\n*\n*     Function -\n*            Output writer routine to copy sysout into flat dataset\n*            files and submit XCOMJOB.\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          None\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R6   -->  Work registers\n*          R7      -->  DCB map (IHADCB) address of SYSOUT\n*          R8      -->  DCB map (IHADCB) address of LCLDS01\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  Flat File record map\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERWTR   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=24,                                               +\n               RENT=YES,                                               +\n               BREG=R12\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING FFRECMAP,R11       Establish Flat file record map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Enable WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Enable WTX addressability\n         LOAD  EP=DERDCB\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         L     R7,DCBDCBE\n         CLC   =C'DCBE',0(R7)\n         BE    INSTALL_EODA\n         WTO   'DER999999E DCBE Lost before I/O process begun...!!!'\n         LA    R15,12                 Set RC = 12\n         B     EXIT\nINSTALL_EODA   EQU *\n         MVC   DCBEODA,=AL3(SPOOL_END)\n         MVC   DCBSYNA,=AL3(SPOOL_SYN)\n         MVC   DCBEEODA,=A(SPOOL_END)\n         MVC   DCBESYNA,=A(SPOOL_SYN)\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS01\n         L     R7,DCBDCBE\n         MVC   DCBSYNA,=AL3(SPOOL_SYN)\n         MVC   DCBESYNA,=A(SPOOL_SYN)\n         L     R11,WSIOBUF          Record buffer\n         XC    FFRRDW,FFRRDW\n         EJECT ,\n*\n*  +--------------------------------------------------------------+\n*  |  Process spoolfile (sysout) & flatfile (dataset)             |\n*  |  (1)  Initialize flat file w/ 3 records CADS-type header.    |\n*  |  (2)  Sysout is to be read into memory, record by record.    |\n*  |       Check CC in 1st byte of each record.                   |\n*  |  (3)  Write each spoolfile-record into flatfile record w/o   |\n*  |       CC with the following rule:                            |\n*  |         If CC = page-break then insert 3rd CADS-type header  |\n*  |         record into flatfile.                                |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nPROCESS_SPOOL  EQU *\n         @WTO  CODE=177\n         L     $SYSOUT,ADDR_JES2FILE Access DCB of JES2FILE\n         L     $FLATDS,ADDR_LCLDS01 Access DCB of LCLDS01\n         TM    WSPFLAGS,WSPFOVER    Is form overriden ?\n         BZ    PROCESS_STD          No, just take normal way\n         CLI   WSOVFORM,WSFFS390    Is it S/390 standard format ?\n         BE    PROCESS_S390         Yes, process it\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BNE   PROCESS_MCC          No, it should MCC format, handle it\n         CLI   WSOVFORM,WSFFDISP    Is it Dispatch format ?\n         BE    ASA_DISPATCH         Yes, process it\n         CLI   WSOVFORM,WSFFWIND    Is it Windows format ?\n         BE    ASA_WINDOWS          Yes, process it\n         B     PROCESS_S390         Otherwise, assume standard\nPROCESS_STD    EQU *\n         CLI   WSFFLAGS,WSFFS390    Is it S/390 format ?\n         BE    PROCESS_S390         Yes, process it\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BNE   PROCESS_MCC          No, it should MCC format, handle it\n         CLI   WSFFLAGS,WSFFDISP    Is it Dispatch format ?\n         BE    ASA_DISPATCH         Yes, process it\n         CLI   WSFFLAGS,WSFFWIND    Is it Windows format ?\n         BE    ASA_WINDOWS          Yes, process it\n         B     PROCESS_S390         Otherwise, assume standard\n*\nASA_DISPATCH   EQU *\n         @WTO  CODE=178\n         BAS   R6,DSP_HEADER       Build header\nASA_DSP_READ   EQU *\n         GET   ($SYSOUT)  JES2FILE  Load sysout record\n         LA    R3,1(,R1)            Save record address\n         LA    R5,ASA_DSP_NEWPAGE   Return address if true\n         BAS   R6,ASA_TEST_CHANNEL\n         BAS   R6,ASA_TEST         Check all others\n         B     ASA_DSP_READ         Interate\nASA_DSP_NEWPAGE EQU *\n         BAS   R6,DSP_PAGE_HEADER Write page header\n         BAS   R6,ASA_SPACE1       Write 1st line record\n         B     ASA_DSP_READ         Interate\nASA_WINDOWS    EQU *\n         @WTO  CODE=179\nASA_WIN_READ   EQU *\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         LA    R3,1(,R1)            Save record address\n         LA    R5,ASA_WIN_NEWPAGE\n         BAS   R6,ASA_TEST_CHANNEL\n         BAS   R6,ASA_TEST         Check all others\n         B     ASA_WIN_READ         Interate\nASA_WIN_NEWPAGE EQU *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         MVI   FFRDATA,X'0C'        Put page-break sign\n         EX    R2,ASA_WIN_REC1\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         B     ASA_WIN_READ         Interate\nASA_WIN_REC1  OC FFRDATA+1(*-*),0(R3) Move data from sysout buffer\nASA_TEST EQU   *\n         CLI   0(R1),$ASA_SP1       Is it space 1 line ?\n         BE    ASA_SPACE1           Yes, handle it\n         CLI   0(R1),$ASA_SP2       Is it space 2 line ?\n         BE    ASA_SPACE2           Yes, handle it\n         CLI   0(R1),$ASA_SP3       Is it space 3 line ?\n         BE    ASA_SPACE3           Yes, handle it\n*        CLI   0(R1),$ASA_SP0       Is it suppress line ?\n*        BER   R6                   Yes, ignore it\n         BR    R6                   Interate\nASA_SPACE1     EQU *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Interate\nMOVE_FFREC     OC  FFRDATA(*-*),0(R3) Move data from sysout buffer\nASA_SPACE2     EQU *\n         LA    R4,1                 Do 1 x iteration\nASA_SPACE_LOOP EQU *\n         MVC   FFRECLEN,=H'5'       This line is 1 byte space\n         MVC   FFRDATA(8),=CL5' '\n         PUT   ($FLATDS),FFREC LCLDS01 Store it into output file\n         BCT   R4,ASA_SPACE_LOOP    Iterate\n         B     ASA_SPACE1           Attempt to store record\nASA_SPACE3     EQU *\n         LA    R4,2                 Do 2 x iteration\n         B     ASA_SPACE_LOOP       Iterate\n         SPACE ,\n*\nASA_TEST_CHANNEL EQU *\n         CLI   0(R1),$ASA_C01       Is it channel 1 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C02       Is it channel 2 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C03       Is it channel 3 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C04       Is it channel 4 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C05       Is it channel 5 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C06       Is it channel 6 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C07       Is it channel 7 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C08       Is it channel 8 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C09       Is it channel 9 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C10       Is it channel 10 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C11       Is it channel 11 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C12       Is it channel 12 skip ?\n         BER   R5                   Yes, return\n         BR    R6                   No, return to other gate\n*\nPROCESS_MCC    EQU *\n         CLI   WSFFLAGS,WSFFDISP    Is it Dispatch format ?\n         BNE   MCC_WINDOWS          No, it should Windows format\n         @WTO  CODE=180\n         BAS   R6,DSP_HEADER       Build header\nMCC_DSP_EJECT  EQU *\n         BAS   R6,DSP_PAGE_HEADER\nMCC_DSP_READ   EQU *\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         LA    R3,1(,R1)            Save record address\n         LA    R5,MCC_DSP_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_EJECT   Evaluate MCC\n         LA    R5,MCC_DSP_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_CHANNEL Address to handle channel skipping\n         BAS   R6,MCC_LINE         Handle other MCC\n         B     MCC_DSP_READ         Interate\nMCC_WINDOWS    EQU *\n         @WTO  CODE=181\nMCC_WIN_READ   EQU *\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         LA    R3,1(,R1)            Save record address\n         LA    R5,MCC_WIN_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_EJECT   Evaluate MCC for EJECTion\n         LA    R5,MCC_WIN_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_CHANNEL Address to handle channel skipping\n         BAS   R6,MCC_LINE         Process other MCC\n         B     MCC_WIN_READ         Interate\nMCC_WIN_EJECT  EQU *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         EX    R2,MCC_WIN_MVC\n         MVI   FFRDATA,X'0C'        Put page-break sign\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         B     MCC_WIN_READ         Interate\nMCC_WIN_MVC    OC  FFRDATA+1(*-*),1(R1) Move data from sysout buffer\n*\nDSP_HEADER   EQU *\n         XC    FFRRDW,FFRRDW\n         L     $FLATDS,ADDR_LCLDS01   Access DCB of LCLDS01\n         MVC   FFRDATA(L'PH1),PH1\n         LA    R2,L'PH1             Length of header 1\n         STH   R2,FFRECLEN          Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         MVC   FFRDATA(L'PH2),PH2\n         LA    R2,L'PH2             Length of header 1\n         STH   R2,FFRECLEN          Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Return\nDSP_PAGE_HEADER EQU *\n         AP    WSPGNUM,=PL1'1'      Increment page number\n         @EDITHDR UPDATE,LOC=*,     Edit page number                   +\n               PAGENUM=(DEC,WSPGNUM),                                  +\n               PREFIX=PH\n         LA    R2,L'PH3             Length of header 3\n         STH   R2,FFRECLEN          Put it on DCB\n         MVC   FFRDATA(L'PH3),PH3   Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Return\n*  Notes:\n*   The following MCC will affect to take action\n*   after printing.\nMCC_LINE EQU   *\n         CLI   0(R1),$MCC_SP1       Is it space 1 line ?\n         BE    MCC_SPACE1           Yes, handle it\n         CLI   0(R1),$MCC_SP2       Is it space 2 line ?\n         BE    MCC_SPACE2           Yes, handle it\n         CLI   0(R1),$MCC_SP3       Is it space 3 line ?\n         BE    MCC_SPACE3           Yes, handle it\n         CLI   0(R1),$MCC_SP0       Is it print only line ?\n         BNER  R6                   No, ignore it, return\nMCC_SPACE0     EQU *\n         LA    R4,1                 Do not iterate\n         B     MCC_PRINT\nMCC_SPACE1     EQU *\n         LA    R4,1                 Do 1 x iteration\n         B     MCC_PRINT\nMCC_SPACE2     EQU *\n         LA    R4,2                 Do 2 x iteration\n         B     MCC_PRINT\nMCC_SPACE3     EQU *\n         LA    R4,3                 Do 3 x iteration\nMCC_PRINT EQU  *\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store sysout record into flatds\nMCC_PRINT_SPACE EQU *\n         BCT   R4,MCC_SPACE_LOOP\n         BR    R6                   Interate\nMCC_SPACE_LOOP EQU *\n         MVC   FFRECLEN,=H'5'\n         MVC   FFRDATA(8),=CL5' '   This line is 1 byte space\n         PUT   ($FLATDS),FFREC LCLDS01 Store it into output file\n         B     MCC_PRINT_SPACE      Iterate\n         SPACE ,\n*\nMCC_TEST_CHANNEL EQU *\n         CLI   0(R1),$MCC_C01       Is it channel 1 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C02       Is it channel 2 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C03       Is it channel 3 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C04       Is it channel 4 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C05       Is it channel 5 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C06       Is it channel 6 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C07       Is it channel 7 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C08       Is it channel 8 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C09       Is it channel 9 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C10       Is it channel 10 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C11       Is it channel 11 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C12       Is it channel 12 skip ?\n         BE    MCC_PRINT_CHANNEL\n         BR    R6                   No, return to other gate\nMCC_PRINT_CHANNEL EQU *\n         LR    R6,R5                 Copy return address\n         BAS   R14,CALC_LRECL       Calculate LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store sysout record into flatds\n         BR    R6                   Return\n*\nMCC_TEST_EJECT EQU *\n         CLI   0(R1),$MCC_C01I      Is it channel 1 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C02I      Is it channel 2 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C03I      Is it channel 3 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C04I      Is it channel 4 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C05I      Is it channel 5 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C06I      Is it channel 6 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C07I      Is it channel 7 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C08I      Is it channel 8 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C09I      Is it channel 9 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C10I      Is it channel 10 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C11I      Is it channel 11 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C12I      Is it channel 12 immediate skip ?\n         BER   R5                   Yes, return\n         BR    R6                   No, return to other gate\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Calculate LRECL of Input Dataset               \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nCALC_LRECL     EQU *\n         LH    R2,DCBLRECL          Set lrecl\n         LA    R2,4(R2)             skip RDW\n         CH    R2,WSLRECL           Overlength of MVC ?\n         BNH   LRECL_GO\n         LH    R2,WSLRECL           Use max 249\n         B     LRECL_OK\nLRECL_GO EQU   *\n         LA    R2,1(,R2)            Safeguard\nLRECL_OK EQU   *\n         STH   R2,FFRECLEN          Save Lrecl\n         SH    R2,=H'6'             Back to original value - 1\n         MVI   FFRDATA,C' '\n         MVC   FFRDATA+1(256),FFRDATA\n*        L     R7,DCBDCBE\n*        CLC   =C'DCBE',0(R7)\n*        BER   R14\n*        WTO   'DER999999E DCBE Lost during I/O process ...!!!'\n*        B     EXIT\n         BR    R14                  Return\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Process S/390 Standard Format Dataset          \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nPROCESS_S390   EQU *\n         @WTO  CODE=182\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         GET   (R8)    JES2FILE     Load sysout record\n         LR    R4,R1                Save record address\n         LH    R5,DCBLRECL\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS02\n         PUT   (R8)         LCLDS02  Store sysout record into flatfile\n         LR    R2,R1\n         LH    R3,DCBLRECL\nS390_LOOP EQU  *\n         SH    R3,=H'5'\n         CR    R3,R5\n         BNH   S390_INPUT_LO\n         LR    R3,R5\n         B     S390_CHECK_MIN\nS390_INPUT_LO  EQU *\n         LR    R5,R3\nS390_CHECK_MIN EQU *\n         XC    0(4,R2),0(R2)        Zap RDW\n         CH    R3,=H'5'             At least 5 byte, is it ?\n         BH    S390_IN_TO_OUT       Yes, gohead\n         LH    R3,=H'5'             No, make it 5\nS390_IN_TO_OUT EQU *\n         STH   R3,0(R2)             Set reclength\n         LA    R2,4(,R2)            Jump over RDW\nS390_MOVE_LOOP EQU *\n         MVCL  R2,R4                Move input buf to output buf\n         BC    1,S390_MOVE_LOOP     Loop if interrupted\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS01\n         PUT   (R8)         LCLDS02  Store sysout record into flatfile\n         LR    R2,R1\n         LH    R3,DCBLRECL\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         L     R7,DCBDCBE\n         CLC   =C'DCBE',0(R7)\n         BE    S390_GET_RECORD\n         WTO   'DER999999E DCBE lost on the way ..... !!!!!!!!!!!'\n         B     SPOOL_END\nS390_GET_RECORD EQU *\n         GET   (R8)    JES2FILE     Load sysout record\n         LR    R4,R1                Save record address\n         LH    R5,DCBLRECL\n         L     R7,DCBDCBE\n         B     S390_LOOP\n*\nSPOOL_SYN EQU *\n         @WTO  CODE=148\n         LA    R15,8               Set RC = 8\n         B     EXIT                Exit\nSPOOL_END EQU *\n         @WTO  CODE=183\n         XR    R15,R15             Set RC = 0\nEXIT     EQU   *\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n* +--------------------------------+\n* | Flat File Record Area Map      |\n* +--------------------------------+\n*\nFFRECMAP DERFFREC TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n$FLATDS  EQU   7\n$SYSOUT  EQU   8\n         END   DERWTR\n./ ADD NAME=DERWTX   0100-01324-01324-1743-00068-00068-00000-DERU-S\n*\n*\n*                     +----------+\n*     Module Name  -  \u00a6 DERWTX   \u00a6\n*                     +----------+\n*\n*\n*     Function -\n*\n*\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     \u00a6 Date   \u00a6 Engineer   \u00a6 V.R.L. \u00a6 Description               \u00a6\n*     +--------+------------+--------+---------------------------+\n*     \u00a698/02/12\u00a6 Deru S.    \u00a6 1.0.0. \u00a6 First development         \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     \u00a6        \u00a6            \u00a6        \u00a6                           \u00a6\n*     +--------+------------+--------+---------------------------+\n*\n         DERWTX TYPE=CSECT,PRINT=GEN,AMODE=31,RMODE=24\n*        DERWSA\n./ ADD NAME=DERXDI   0100-01324-01324-1743-01012-01012-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERXDI  |\n*                     +---------+\n*                     CA-Dispatch -to- CA-XCOM Handshaking Interface\n*\n*     Function -\n*            Activate local external writer and establish handshaking\n*            between CA-Dispatch and CA-Xcom\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          In Cataloged Procedure JCL\n*\n*  |           //stepname EXEC PGM=DERXDI,                           |\n*  |           //            PARM='CLASSES=cccccccc,FORM=ffffffff'   |\n*  |               cccccccc = List up to 8 classes to be captured    |\n*  |               ffffffff = Form of recipient, i.e. FORM=DISPATCH  |\n*  |                                                                 |\n*          Or From Console Interaction\n*  |                                                                 |\n*  |           F Procname,Classes={ccccc}                            |\n*\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  DCB map (IHADCB) address\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  SSSO block address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERXDI   @PROLOG ESA=370,                                              +\n               AMODE=31,                                               +\n               RMODE=ANY,                                              +\n               RENT=YES,                                               +\n               BREG=R12\n         SPLEVEL SET=5\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING SSOB,R11           Establish SSOB structure map\n*\n         LR    R3,R1              Keep XWTR parameter list\n         LOAD  EP=DERWSA\n         LR    R10,R0             Establish WSA mapping\n         ST    R3,WSPARM          Save XWTR parmlist in WSA\n         ST    R13,WSSVA          Save XWTR savearea in WSA\n         LA    R3,L'WSCMDBUF-2    Length of cmd buffer\n         STH   R3,WSSVCCIB        Save here for MGCRE\n         LA    R3,WSSVCCIB\n         ST    R3,WSCMDPRM+4\n         MVC   WSCOUNT,=PL6'0'    Initialize counter\n         WTO   'DERXDI100I XDI initialization in progress.'\n*              MF=(E,LWTO)\n         L     R2,=A(4*4096)\n         BAS   R11,MODVSTOR       Obtain storage\n         ST    R1,WSIOBUF          Save in WSA both address\n         ST    R0,WSIOBUF+4         and its length\n         LOAD  EP=DERXDP           Load XDP module\n         STM   R0,R1,WSMODXDP      Save its address and size\n         LOAD  EP=DERXDS           Load XDS module\n         STM   R0,R1,WSMODXDS      Save its address and size\n*        LOAD  EP=DERCOM           Load COM module\n*        STM   R0,R1,WSMODCOM      Save its address and size\n         LOAD  EP=DERXIO           Load XIO module\n         STM   R0,R1,WSMODXIO      Save its address and size\n         LOAD  EP=DERXWR           Load XWR module\n         STM   R0,R1,WSMODXWR      Save its address and size\n         LOAD  EP=DERWTR           Load WTR module\n         STM   R0,R1,WSMODWTR      Save its address and size\n         LOAD  EP=DERWTB           Load WTB module\n         STM   R0,R1,WSMODWTB      Save its address and size\n         LOAD  EP=DERWTG           Load WTG module\n         STM   R0,R1,WSMODWTG      Save its address and size\n         LOAD  EP=DERXSF           Load XSF module\n         STM   R0,R1,WSMODXSF      Save its address and size\n         LOAD  EP=DERDCB           Load DCB module\n         STM   R0,R1,WSMODDCB      Save its address and size\n         LR    R3,R0               Establish DCB map\n         USING DERDCB,R3            for addressability\n         CLC   =C'DERDCB ',0(R3)   Is it right ?\n         BE    CONT\n         WTO   'DERXDI101I XDI extension module DCB invalid, XDI start +\n               up canceled.' MF=(E,LWTO)\n         L     R15,=A(EXIT)\n         BR    R15\nCONT     EQU   *\n         MVC   WSDCBDIR(WSDCBDSZ),DCB_DIR Bring DCB dir into WSA\n         DROP  R3\n         LOAD  EP=DERWTX           Load WTX module\n         LR    R9,R0               Establish WTX map\n         STM   R0,R1,WSMODWTX      Save its address and size\n         CLC   =C'DERWTX ',0(R9)   Is it right ?\n         BE    CONT1\n         WTO   'DERXDI101I XDI extension module (WTX) invalid, XDI star+\n               t up canceled.' MF=(E,LWTO)\n         L     R15,=A(EXIT)\n         BR    R15\nCONT1    EQU   *\n         LOAD  EP=DERMSG           Load MSG module\n         LR    R3,R0               Establish DCB map\n         USING DERMSG,R3            for addressability\n         CLC   =C'DERMSG ',0(R3)   Is it right ?\n         BE    CONT2\n         WTO   'DERXDI101I XDI extension module MSG invalid, XDI start +\n               up canceled.' MF=(E,LWTO)\n         L     R15,=A(EXIT)\n         BR    R15\nCONT2    EQU   *\n         MVC   WSMSGDIR(256),MSGDIR     Bring WTO dir into WSA\n         MVC   WSMSGDIR+256(WSMSGDSZ-256),MSGDIR+256\n         DROP  R3\n         B     BEGIN\nMODVSTOR EQU   *\n         STORAGE OBTAIN,COND=NO,LENGTH=(R2),LOC=BELOW\n         BR    R11\nMODVSXDP DC    A(4096)\nMODVSWTR DC    A(4096)\nMODVSWTX DC    A(4*4096)\n         EJECT ,\n* ================================================================= *\n*  CHECK PARAMETERS                                                 *\n*                                                                   *\n*  Parameters for this interface program are                        *\n*     CLASSES=<1 to 8 sysout classes to be captured>                *\n*                                     Required, no default          *\n*     PCFORM={DISPATCH/WINDOWS}    Specify remote PC file form      *\n*                                     Default is DISPATCH           *\n*     DISP={DELETE/KEEP}           Specify weather flat file is     *\n*                                  deleted after transferred        *\n*                                     Default is DELETE             *\n*     TRACE={ON/OFF}               Specify weather trace active     *\n*                                     Default is OFF                *\n*                                                                   *\n* ================================================================= *\n         SPACE ,\nBEGIN    DS    0H\n         @WTO  CODE=102,TRACE=ALWAYS\n         MVC   WSCLASSL,=CL8' '       Make it blank\n         MVC   WSFORM,=CL8' '\n         MVC   WSPARMM,=CL8' '\n         MVC   WSEOPARM,=A(EOF_PARMLIB)\n         LR    R1,R10                 Load WSA as parameter\n         NI    WSPFLAGS,X'FF'-WSPFCMND    Clear command indicator\n         L     R15,WSMODXDP           Point to XDP address\n         BASR  R14,R15                Call XDP\nOPEN_FILES     EQU *\n         L     R8,ADDR_INTRDR            Capture INTRDR DCB map\n         OPEN  ((R8),(OUTPUT)),MODE=31,  Open PARMLIB and INTRDR       +\n               MF=(E,LOPEN_INTRDR)\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BZ    OPEN_ERROR\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   DCBEEODA,=A(EOF_PARMLIB)  Set EOF exit routine address\n         TM    DCBOFLGS,DCBOFOPN         Is it opened ?\n         BO    INITCOMM                  Yes, skip NSI\n         OPEN  ((R8),(INPUT)),MODE=31,   Open PARMLIB and INTRDR       +\n               MF=(E,LOPEN_PARMLIB)\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\nOPEN_ERROR     EQU *\n         @MESSAGE ERROR,OPCODE=BZ,RC=(R15),                            +\n               OPER=IO,TYPE=OPEN,OBJECT=DCBDDNAM,                      +\n               EXIT=EXIT\n         L     R8,ADDR_INTRDR            Capture IntRDR DCB map\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         @MESSAGE ERROR,OPCODE=BZ,RC=(R15),                            +\n               OPER=IO,TYPE=OPEN,OBJECT='internal reader',             +\n               EXIT=EXIT\n*\n* Initialize OPERATOR INTERFACE\n* -----------------------\nINITCOMM EQU   *\n         MODESET MF=(E,LMODZERO)        Set mode key 0\n         @WTO  CODE=104,TRACE=ALWAYS\n         EXTRACT WSCOMM,'S',            Extract communication area     +\n               FIELDS=(COMM),MF=(E,LEXTRACT)\n         L     R2,WSCOMM\n         L     R3,0(R2)                  Comm ECB address\n         ST    R3,WSECBCOM                  save it\n         OI    WSECBCOM,X'80'            Mark as the last ECB list\n         LA    R4,4(R2)                  Obtain origin for QEDIT\n         ST    R4,WSSAVEQ                    and keep it\n         ICM   R2,15,0(R4)               Is there start command ?\n         BZ    INIT_COMM_STACK           If not, stack commands\n         QEDIT ORIGIN=(R4),BLOCK=(R2)    Else, clear start command\nINIT_COMM_STACK EQU *\n         QEDIT ORIGIN=(R4),CIBCTR=255    Allow 255 command stacked\n         MODESET MF=(E,LMODNZER)         Set mode key not 0\nJUMPXWTR EQU   *\n         @WTO  CODE=105,TRACE=ALWAYS\n         L     R2,=A(32760)              Buffer size\n         SLL   R2,1                      Make it double\n         LA    R2,16(R2)                 Add 16\n         L     R3,=A(16*1024)            16K length of record\n         LA    R3,0(R3,R2)               Add 16K\n         STORAGE OBTAIN,LENGTH=(R3),COND=NO,LOC=BELOW\n         ST    R1,WSRCBUFA               Save it\n         ST    R0,WSRCBUFA+4\n         LA    R3,0(R2,R1)               Start of record area\n         SRL   R3,3                      Make it\n         SLL   R3,3                        doubleword boundary\n         ST    R3,WSRCAREA               Save it\n         ALR   R0,R1                     End of buffer\n         SLR   R0,R3                     Length of record\n         ST    R0,WSRCAREA+4             Save it\n         LM    R2,R5,WSRCBUFA            Get BUFa, BUFl, RECa & RECl\n         BUILDRCD (R2),2,(R3),(R4),(R5),MF=(E,LBLDRCD)\n         LA    R12,XWTR                  Mainline address\n         BR    R12                       Jump to the mainline\nCHKKEYWD CLC   6(*-*,R3),2(R2)             << Executed >>\nGETPARM  MVC   0(*-*,R6),0(R2)             << Executed >>\n         LTORG  ,\n         DROP   R12\n         EJECT\n*\n*  +--------------------------------------------------------------+\n*  |  Mainline External Processor                                 |\n*  |  (1)  Initialize Xwtr enviroment i.e. establish SSOB & SSSO. |\n*  |  (2)  Mainline loop to capture JES sysout occurance in its   |\n*  |       capturable output queue classes.                       |\n*  |  (3)  Prepare dynamic allocation/deallocation of sysout and  |\n*  |       flatfile datasets within each iteration.               |\n*  |  (4)  Prepare handler-routines to anticipate the result of   |\n*  |       subsystem request as well as operator intervention.    |\n*  +--------------------------------------------------------------+\n*\n         USING XWTR,R12             Mainline routine base register\n         DS    0D\nXWTR     EQU   *\n         LA    R2,SSOBLEN1             Length of SSOB/SSSO + safeguard\n         STORAGE OBTAIN,COND=NO,LENGTH=(R2)\n         ST    R1,WSSSOB1              Keep it in WSA\n         ST    R0,WSSSOB1+4            including its length\n         STORAGE OBTAIN,COND=NO,LENGTH=(R2)\n         ST    R1,WSSSOB               Keep it in WSA\n         ST    R0,WSSSOB+4              including its length\n         L     R1,WSSSOB               Address of SSOB pointer\n         ST    R1,WSSSOBP              Save pointer\n         OI    WSSSOBP,X'80'           Mark as the only ptr in the list\nINITSSOB EQU   *\n         L     R11,WSSSOB              Point to parmlist and\n         XC    SSOBEGIN(SSOBLEN1),SSOBEGIN   Clear SSOB & SSSO\n         MVC   SSOBID,=CL4'SSOB'       Put Block ID (eyecatcher)\n         MVC   SSOBLEN,=AL2(SSOBHSIZ)  Specify SSOB length\n         MVC   SSSOLEN,=AL2(SSSOSIZE)  Specify SSSO length\n         LA    R4,SSSOBGN              Point to extension address\n         ST    R4,SSOBINDV              and keep it in header\n         OI    SSSOVER,SSSOCVER        Set as current version number\n         MVC   SSOBFUNC,=AL2(SSOBSOUT) Select SSI SYSOUT function\n         OI    SSSOFLG2,SSSOPSEE       Process sysout extension\n         OI    SSSOFLG1,SSSOSCLS       CLASSes are selection criterion\n         MVC   SSSOCLSL,WSCLASSL       Set CLASS list for request\n         TM    WSOFLAGS,WSOFHOLD       Is held class included ?\n         BZ    MAINLOOP                No, skip NSI\n*>>      OI    SSSOFLG1,SSSOHLD       Yes, tell JES to select held file\nMAINLOOP EQU   *\n         NI    WSSFLAGS,X'FF'-WSSFOJOB Not continuation\n         L     R11,WSSSOB              Point to parmlist and\n         LM    R2,R3,WSDESTP1          Dest table\n         CLC   =C'/*EOF ',0(R2)        Is it the last ?\n         BE    TRY_NO_DEST\n         MVC   SSSODEST,0(R2)          Set destination\n         OI    SSSOFLG1,SSSODST        Tell SSI\n         LA    R2,8(,R2)               Pop up next dest\n         BCTR  R3,0\n         STM   R2,R3,WSDESTP1          New position\n         B     TRY_SSREQ\nTRY_NO_DEST    EQU *\n         XC    SSSODEST,SSSODEST       Clear dest\n         NI    SSSOFLG1,X'FF'-SSSODST    Tell SSI\n         MVC   WSDESTP1,WSDESTP\nTRY_SSREQ EQU  *\n         @WTO  CODE=106             Get parmlist address\nSEND_SSREQ     EQU *\n         MODESET MF=(E,LMODSUPZ)       Enter to SUPERVISOR mode key 0\n         LA    R1,WSSSOBP              Point to the SSOB parmlist\n         IEFSSREQ ,                    Send SUBSYSTEM REQUEST\n         LR    R5,R15                  Save RC\n         ST    R15,WSRCODE             Save RC\n         MODESET MF=(E,LMODPRON)       Back to PROBLEM mode\n         @WTO  CODE=137             Get parmlist address\n         LTR   R15,R5                  Check RC\n         BZ    CHECK_SSREQ             If RC = 0, continue check\n         TM    WSSFLAGS,WSSFRNEW       Has it been refresed ?\n         BZ    REFRESH_SSREQ           No, refresh first\n         L     R15,WSRCODE             Get RC back\n         @MESSAGE ERROR,OPCODE=B,RC=(R15),                             +\n               OPER=SSREQ,TYPE=JES2,OBJECT='SYSOUT',                   +\n               EXIT=ASK_OPER\nCHECK_SSREQ    EQU *\n         MVC   WSBUWRTR,SSSOPGMN       Backup writer name\n         NI    WSSFLAGS,X'FF'-WSSFRNEW Turn refresh indicator off\n         OI    WSOFLAGS,WSOFSSRQ        Indicate SSREQ done\n         TM    WSOFLAGS,WSOFTRAC       Is trace enabled ?\n         BZ    CHECK_SSREQ_RC          Keep silenc if not\n         @WTO  CODE=138              Get parmlist address\n*        @WTO  CODE=139              Get parmlist address\nCHECK_SSREQ_RC EQU *\n         L     R2,SSOBRETN            SSREQ output\n         B     *+4(R2)                Do the path selection\n         B     SYSOUT_FOUND           Sysout dataset found\n         B     WAIT_SYSOUT            No sysout found\n         B     NO_JOB_FOUND\n         B     INVALID_SEARCH_ARGUMENT\n         B     ERROR_VAL_16\n         B     DUPLICATE_JOBNAME\n         B     INVALID_JOBNAME\n         B     INVALID_SSSODEST\n         B     AUTHORIZATION_FAILED\n         B     TOKENMAP_FAILED\n         EJECT ,\n*\n*  +--------------------------------------------------+\n*  |                                                  |\n*  |  SYSOUT DETECTED                                 |\n*  |    - Check whether DEST used ?                   |\n*  |    - If NODEST, try to iterate all DEST          |\n*  |    - Then purge if no DEST matched               |\n*  |                                                  |\n*  +--------------------------------------------------+\n*\n         SPACE ,\nSYSOUT_FOUND DS 0H\n         L     R11,WSSSOB              Just safeguard\n         TM    WSOFLAGS,WSOFTRAC       Is trace enabled ?\n         BZ    COPY_SSSO               Keep silenc\n         @MESSAGE INFO,OPER=SHOW,TYPE=JOBNAME,                         +\n               OBJECT=SSSOJOBN,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=JOBID,                           +\n               OBJECT=SSSOJOBI,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=DEST,                            +\n               OBJECT=SSSODEST,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=WRTRNAME,                        +\n               OBJECT=SSSOPGMN,TEXT='captured ....'\nCOPY_SSSO      EQU *\n         MVC   WSSODSN,SSSODSN         Copy DSN\n         MVC   WSSOWRTR,SSSOPGMN       Copy writer name\n         MVC   WSSODEST,SSSODEST       Copy dest name\n         MVC   WSSOMLRL,SSSOMLRL       Copy max. lrecl\n         TM    SSSOFLG2,SSSODDST       Is extension info provided ?\n         BZ    CHECK_WRTRNAME          No, just copy SSSO info\n         CLC   =C'JESMSGLG',SSSODDND   Is it JES messages log ?\n         BE    PURGE_SYSOUT            Yes, purge it\n         CLC   =C'JESJCL',SSSODDND     Is it JES JCL list ?\n         BE    PURGE_SYSOUT            Yes, purge it\n         CLC   =C'JESYSMSG',SSSODDND   Is it JES system messages list ?\n         BE    PURGE_SYSOUT            Yes, purge it\n         CLC   WSSODEST,=CL8'LOCAL'  Is it LOCAL dest returned ?\n         BE    PURGE_SYSOUT          Yes, test it\nCHECK_WRTRNAME EQU *\n         L     R15,WSMODXDS            Address of XDS\n         LR    R1,R10                  Address of WSA\n         BASR  R14,R15                 Call XDS\n         LTR   R15,R15                 Check RC\n         BNZ   SEND_SSREQ              Resend SSREQ if RC not 0\n*\n         TM    SSSOFLG1,SSSODST        Do we wait NODEST ?\n         BNZ   SYSOUT_PROCESS          No, process\n         TM    WSEFLAGS,WSEFNODS       Is it unexpected DEST\n         BO    SYSOUT_CHECK            Yes, check it\nSYSOUT_BACKUP  EQU *\n         MVC   WSBUDSN,SSSODSN         Copy DSN\n         OI    WSEFLAGS,WSEFNODS       Indicator it may be unexpected\n         B     MAINLOOP                Then try again with DEST\nSYSOUT_CHECK   EQU *\n         CLC   WSBUDSN,SSSODSN         Is DSN the same ?\n         BNE   SYSOUT_BACKUP           No, backup the info\n         NI    WSEFLAGS,X'FF'-WSEFNODS Yes, clear indicator\n         B     PURGE_SYSOUT            Then purge sysout\nSYSOUT_PROCESS EQU *\n         LA    R15,100\n         CLI   WSSODEST,C' '         Is it no DEST returned ?\n         BE    BAD_SYSOUT            Yes, purge it\n         CLI   WSSODEST,X'00'        Is it no DEST returned ?\n         BE    BAD_SYSOUT            Yes, purge it\n         MVC   WSPCDRVE,WSPCHDD      Make sure use PC drive fr parm.\n         L     R8,ADDR_PARMLIB       Capture Parmlib DCB map\n         OC    WSSODEST,=CL8' '\n         XR    R15,R15\n         FIND  ((R8)),WSSODEST,D     Check if DESTid has been defined\n*        ST    R15,WSRCODE             Save RC\n         LTR   R15,R15               Check RC\n         BZ    READ_BLOCK            Go straight if RC =  0\n         @MESSAGE WARNING,OPCODE=BNZ,RC=(R15),                         +\n               OPER=IO,TYPE=FIND,OBJECT=WSSODEST,                      +\n               EXIT=*\n         L     R15,WSRCODE           Restore RC\nBAD_SYSOUT     EQU *\n         TM    WSOFLAGS,WSOFTRAC       Is trace enabled ?\n         BZ    PURGE_SYSOUT            Keep silenc\n         @MESSAGE WARNING,OPER=FIND,RC=(R15),                          +\n               TYPE=DEST,OBJECT=WSSODEST,EXIT=*\nPURGE_SYSOUT   EQU *\n         LA    R1,WSA                Locate WSA address\n         L     R15,WSMODWTG          Locate WTG address\n         BASR  R14,R15               Call WTG\n         LTR   R15,R15               Check RC\n         BZ    OKEY_RESULT           Go to normal path if RC = 0\n         TM    WSEFLAGS,WSEFPURG     Is it unexpected sysout ?\n         BO    PURGE_SYSOUT_CMD      Yes, use JES command to purge\n         OI    WSEFLAGS,WSEFPURG     Remember it is unexpected\n         B     MAINLOOP              Then, iterate again\n*        B     ASK_OPER              Wait for sysout if RC not 0\nPURGE_SYSOUT_CMD EQU *\n         MVI   SSSOFLG2,SSSOCTRL   Indicate FINAL CALL to JES2\n         MODESET MF=(E,LMODSUPV)   Enter to SUPERVISOR MODE\n         LA    R1,WSSSOBP          POINT TO SSOB POINTER\n         IEFSSREQ ,                Go to JES for give back\n         MODESET MF=(E,LMODPROB)   Back to PROBLEM MODE\n         MVI   WSCMDBUF,C' '\n         MVC   WSCMDBUF+1(L'WSCMDBUF-1),WSCMDBUF\n         MVC   WSCMDBUF+2(3),=CL3'$CJ'\n         MVC   WSCMDBUF+5(4),SSSOJOBI+4     jobid\n         MVC   WSCMDBUF+9(2),=C',P'\n         MODESET MF=(E,LMODZERO)\n         LM    R0,R1,WSCMDPRM           Get cmd parameter list\n         SVC   34                       Schedule command\n         MODESET MF=(E,LMODNZER)\n         NI    WSEFLAGS,X'FF'-WSEFPURG  Clear indicator\n         B     INITSSOB                 Then go to init SSOB\nREAD_BLOCK     EQU *\n         @WTO  CODE=107              Get parmlist address\n         L     R5,WSIOBUF         Address of I/O buffer\n         READ  XDIDECB,SF,(R8),(R5),'S',MF=E\n         CHECK XDIDECB\n         LH    R6,DCBLRECL        Get LRECL\n         LH    R7,DCBBLKSI         and BLOCK SIZE\n         LA    R7,0(R7,R5)        End of full block\n         L     R1,XDIDECB+16      Address of IOB\n         LH    R1,14(R1)          Residual count for short block\n         SR    R7,R1              Adjust block length\n         SR    R7,R6              Backward to the start of last record\n         LA    R2,XCPARMV         Address of variable parameters\nREAD_RECORD    EQU *\n         CLC   =C'*/XDI ',0(R5)   Is it DXI parameter ?\n         BE    CHECK_XDI          Yes, check it\n         CLC   =C'*/CMD ',0(R5)   Is it COMMAND parameter ?\n         BE    CHECK_CMD          Yes, check it\n         CLC   =C'TYPE=',0(R5)    Is it XCOM TYPE parameter ?\n         BE    READ_NEXT          Yes, ignore it\n         CLC   =C'FILETYPE=',0(R5) Is it XCOM FILETYPE parameter ?\n         BE    READ_NEXT          Yes, ignore it\n         CLC   =C'FILE=',0(R5)    Is it XCOM FILE parameter ?\n         BE    READ_NEXT          Yes, ignore it\n         CLC   =C'LFILE=',0(R5)   Is it XCOM LFILE parameter ?\n         BE    READ_NEXT          Yes, ignore it\n         CLC   =C'LU=',0(R5)      Is it XCOM LU parameter ?\n         BE    CHANGE_LU          Yes, process it\n         CLC   =C'LIST=',0(R5)    Is it XCOM LIST parameter ?\n         BE    CHANGE_LIST        Yes, process it\n         CLC   =C'/* ',0(R2)       Is no more space ?\n         BE    EOF_PARM           Yes, force EOF member\n         MVC   0(80,R2),0(R5)     Get in the parameter\n         LA    R2,80(,R2)         Next vcard\nREAD_NEXT      EQU *\n         BXLE  R5,R6,READ_RECORD  Search next record in block\n         B     READ_BLOCK         Iterate to read next block\nCHANGE_LU      EQU *\n*        MVI   XCGROUP,C' '       Put blank\n*        MVI   XCGROUP+1(79),XCGROUP and roll it to clear data\nCHANGE_LIST    EQU *\n         MVC   XCGROUP,0(R5)      Replace the parameter\n         B     READ_NEXT          Iterate\nCHECK_XDI EQU  *\n         CLC   =C'PCDRIVE=',6(R5)       Is \"*/XDI PCDRIVE=..\" appear ?\n         BE    OVER_PCDRIVE             Yes, handle it\n         CLC   =C'XDISP=KEEP',6(R5)     Is \"*/XDI XDISP=KE..\" appear ?\n         BE    OVER_XDISP_KEEP          Yes, handle it\n         CLC   =C'XDISP=DELETE',6(R5)   Is \"*/XDI XDISP=DE..\" appear ?\n         BE    OVER_XDISP_DELETE        Yes, handle it\n         CLC   =C'FORM=DISPATCH',6(R5)  Is \"*/XDI FORM=DIS..\" appear ?\n         BE    OVER_FORM_DSP            Yes, handle it\n         CLC   =C'FORM=WINDOWS ',6(R5)  Is \"*/XDI FORM=WIN..\" appear ?\n         BE    OVER_FORM_WIN            Yes, handle it\n         CLC   =C'FORM=S/390 ',6(R5)    Is \"*/XDI FORM=S/3..\" appear ?\n         BE    OVER_FORM_S390           Yes, handle it\n         CLC   =C'FORM=S390 ',6(R5)     Is \"*/XDI FORM=S39..\" appear ?\n         BE    OVER_FORM_S390           Yes, handle it\n         @WTO  CODE=108\n         B     READ_NEXT                Iterate\nOVER_PCDRIVE   EQU *\n         MVC   WSOVHDD,14(R5)\n         MVC   WSPCDRVE,WSOVHDD\n         B     OVERRIDE_OKEY\nOVER_XDISP_KEEP EQU *\n         OI    WSOVFLGS,WSOFXKEP      Indicate XDISP=KEEP\n         B     OVERRIDE_OKEY\nOVER_XDISP_DELETE EQU *\n         NI    WSOVFLGS,X'FF'-WSOFXKEP  Indicate XDISP=DELETE\n         B     OVERRIDE_OKEY\nOVER_FORM_DSP  EQU *\n         MVI   WSOVFORM,WSFFDISP      Indicate override form DISPATCH\n         B     OVERRIDE_OKEY\nOVER_FORM_WIN  EQU *\n         MVI   WSOVFORM,WSFFWIND      Indicate override form Windows\n         B     OVERRIDE_OKEY\nOVER_FORM_S390 EQU *\n         MVI   WSOVFORM,WSFFS390      Indicate override form S/390\nOVERRIDE_OKEY  EQU *\n         OI    WSPFLAGS,WSPFOVER      Indicate overridden status\n         @WTO  CODE=109              Get parmlist address\n         B     READ_NEXT              Iterate\nCHECK_CMD EQU  *\n         MVI   WSCMDBUF,C' '\n         MVC   WSCMDBUF+1(L'WSCMDBUF-1),WSCMDBUF\n         MVC   WSCMDBUF(65),6(R5)     Move command into buffer\n         MODESET MF=(E,LMODZERO)      Set auth key 0\n         LM    R0,R1,WSCMDPRM         Access command parmlist\n         SVC   34                     Schedule command\n         MODESET MF=(E,LMODNZER)      Release auth key 0\n         @WTO  CODE=110              Get parmlist address\n         B     READ_NEXT              Iterate\nEOF_PARMLIB    EQU *\n         CLC   =C'/*EOF ',0(R2)      Is no more space ?\n         BE    EOF_PARM              Yes, force EOF member\n         MVC   0(8,R2),=CL8'/*EOF'\nEOF_PARM       EQU *\n         @WTO  CODE=111              Get parmlist address\nCALL_XIO EQU   *\n         LA    R1,WSA                Locate WSA address\n         TM    WSSFLAGS,WSSFSFIL     Is it SF (send file) request ?\n         BO    CALL_XSF              Yes, handle it\n         L     R15,WSMODXIO          Locate WTR address\n         BASR  R14,R15               Call WTR\n         ST    R15,WSRCODE           Save RC\n         NI    WSPFLAGS,X'FF'-WSPFOVER Clear override flag\nCALL_DONE      EQU *\n         @WTO  CODE=112              Get parmlist address\n         L     R15,WSRCODE           Restore RC\n         LTR   R15,R15               Is it OK\n         BNZ   PURGE_SYSOUT          If not OK, purge sysout\nOKEY_RESULT    EQU *\n         OI    WSSFLAGS,WSSFOJOB     Indicate to continue this job\n         B     SEND_SSREQ            Iterate retrieve the same job\nCALL_XSF EQU   *\n         L     R15,WSMODXSF          EP address of DERWTR\n         BASR  R14,R15               Call WTR\n         NI    WSSFLAGS,X'FF'-WSSFSFIL  Clear flag bit\n         B     CALL_DONE\n         EJECT ,\n*\n*  +-----------------------------------------------------------+\n*  |                                                           |\n*  |    NO SYSOUT FOUND                                        |\n*  |        - Check whether NODEST                             |\n*  |        - If NODEST, then continue sleep                   |\n*  |        - Else, iterate all DESTs                          |\n*  |                                                           |\n*  +-----------------------------------------------------------+\n*\n         SPACE ,\nWAIT_SYSOUT    EQU *\n         TM    WSSFLAGS,WSSFOJOB       Is it continunation ?\n         BO    MAINLOOP                Yes, iterate\n         TM    SSSOFLG1,SSSODST        Do we wait any dest ?\n         BNZ   REFRESH_SSREQ           Yes, need to be refreshed\nWAIT     EQU   *\n         L     R11,WSSSOB              Just safeguard\n         TM    WSOFLAGS,WSOFSSRQ       Is SSREQ done ?\n         BZ    WAIT_ERROR\n         @WTO  CODE=113,TRACE=ALWAYS\n         MODESET MF=(E,LMODSUPZ)       Enter to SUPERVISOR mode\n         L     R2,SSSOWTRC             Point to JES/WTR comm. area\n         ST    R2,WSECBJES             Keep it in the list\n         WAIT  ECBLIST=WSECBLST,LONG=YES Wait for JES and Console\n         MODESET MF=(E,LMODPRON)       Enter to PROBLEM mode\n         L     R2,WSECBCOM             Access command ECB\n         CLI   0(R2),X'00'             Is CMD posted ?\n         BE    MAINLOOP                No, just skip\n         OI    WSOFLAGS,WSOFCOMM       Yes, remember it\n         B     OPER_COMMAND            and handle the command\nWAIT_ERROR     EQU *\n         @WTO  CODE=140,TRACE=ALWAYS\n         B     ASK_OPER\n         EJECT ,\n*\n*  +--------------------------------------------------+\n*  |                                                  |\n*  |  Other Unexpected Event                          |\n*  |    - Review the problem                          |\n*  |    - Send message and                            |\n*  |    - Issue WTOR to let operator decide           |\n*  |                                                  |\n*  +--------------------------------------------------+\n*\n         SPACE ,\n         SPACE ,\nNO_JOB_FOUND EQU *\n         @WTO  CODE=114,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\nINVALID_SEARCH_ARGUMENT EQU *\n         @WTO  CODE=115,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\nERROR_VAL_16 EQU *\n         @WTO  CODE=116,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\nDUPLICATE_JOBNAME EQU *\n         @WTO  CODE=117,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\nINVALID_JOBNAME EQU *\n         @WTO  CODE=118,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\nINVALID_SSSODEST EQU *\n         @WTO  CODE=119,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\n         B     BAD_SYSOUT\nAUTHORIZATION_FAILED EQU *\n         @WTO  CODE=120,TRACE=ALWAYS  Get parmlist address\n         B     ASK_FOR_NEXT_STEP\nTOKENMAP_FAILED EQU *\n         @WTO  CODE=121,TRACE=ALWAYS  Get parmlist address\nASK_FOR_NEXT_STEP EQU *\n         XC    WSECB,WSECB         Clear ECB\nASK_OPER EQU    *\n         TM    WSSFLAGS,WSSFWAIT   Must we wait ?\n         BO    WAIT_OPER           Yes, go wait\n         L     R3,WSMSG122              Get parmlist address\n         LA    R2,WSCOMBUF+2\n         MVC   WSCOMBUF(2),=AL2(64)\n         WTOR  'DERXDI122R Enter ''W'' to WAIT, ''R'' to RETRY or anyth+\n               ing else to EXIT',(R2),64,WSECB,MF=(E,(R3))\n         WAIT  ECB=WSECB           Wait for reply\n         XC    WSECB,WSECB         Clear ECB\n         MVC   WSREPLY,WSCOMBUF+2\n         OI    WSREPLY,C' '        Force REPLY to uppercase\n         CLI   WSREPLY,C'W'        Should we WAIT?\n         BE    ASK_WAIT            Yes, go wait\n         CLI   WSREPLY,C'R'        Should we RETRY?\n         BE    REFRESH_SSREQ       Yes, go retry\n         CLI   WSREPLY,C'S'        Is it command ?\n         BE    REPLY_COMM          Yes, handle it\n         L     R12,=A(EXIT)        Address of Exit procedure\n         BR    R12                 Go to exit\n*\nASK_WAIT EQU   *\n         @WTO  CODE=142,TRACE=ALWAYS\n         OI    WSSFLAGS,WSSFWAIT   Indicate we must wait\n         B     WAIT_SYSOUT         Go to wait\n*\n*   +--------------------------------------------+\n*   |   Refresh SSI Request                      |\n*   |    -  Disconnect SSI                       |\n*   |                                            |\n*   +--------------------------------------------+\n*\nREFRESH_SSREQ  EQU *\n         L     R11,WSSSOB          Just make sure SSOB established\n         MVI   SSSOFLG2,SSSOCTRL   Indicate FINAL CALL to JES2\n         MODESET MF=(E,LMODSUPV)   Enter to SUPERVISOR MODE\n         LA    R1,WSSSOBP          POINT TO SSOB POINTER\n         IEFSSREQ ,                Go to JES for give back\n         MODESET MF=(E,LMODPROB)   Back to PROBLEM MODE\n         OI    WSSFLAGS,WSSFRNEW   Indicate it has been refreshed\nREGRESS_DEST   EQU *\n         LM    R2,R3,WSDESTP1      DEST current stack pointer\n         LTR   R3,R3               Is it the last DEST entry ?\n         BZ    REWIND_DEST         Yes, rewind it\n         C     R2,WSDESTP          Is it the first DEST entry ?\n         BL    REWIND_DEST         No, rewind it\n         SLL   R3,3                Multiply 8\n         LA    R2,0(R3,R2)         Search last entry\n         XR    R3,R3               Set counter 0\n         B     INITSSOB            Than reinitialize SSOB\n*\nREWIND_DEST    EQU *\n         LA    R3,1(,R3)           Add 1 to counter\n         ST    R3,WSDESTP1+4       Save stack number\n         LA    R3,8                Length of stack entry\n         SLR   R2,R3               Rewind one entry\n         ST    R2,WSDESTP1         and update stack position\n         B     INITSSOB            Reinitialize SSOB\n*\nREPLY_COMM     EQU *\n         MVI   WSWORK,C' '\n         MVC   WSWORK+1(63),WSWORK\n         OC    WSCOMBUF+2(64),WSWORK\n         B     CMD_CHECK\n*\nWAIT_OPER      EQU *\n        WAIT   ECBLIST=WSECBCOM           Wait OPER command\n*\n*  +---------------------------------------------+\n*  |                                             |\n*  |  Console Communication Handler              |\n*  |                                             |\n*  |                                             |\n*  +---------------------------------------------+\n*\n*\nOPER_COMMAND   EQU *\n         USING CIB,R5                     Map of CIB\n         L     R4,WSSAVEQ                 Access QEDIT base\n         L     R5,0(R4)                   Seek CIB address\n         CLI   CIBVERB,CIBSTOP            Is it STOP command\n         BE    CMD_STOP                   Handle it if so\n         CLI   CIBVERB,CIBMODFY           Is it MODIFY command\n         BE    CMD_MODIFY                 Handle it if so\n         QEDIT ORIGIN=(R4),BLOCK=(R5)     Free CIB\n         @WTO  CODE=123                   Get parmlist address\n         B     MAINLOOP\nCMD_STOP EQU   *\n         @WTO  CODE=124,TRACE=ALWAYS      Get parmlist address\n         B     EXIT                       Exit\nCMD_MODIFY     EQU *\n         MVI   WSCOMBUF,C' '\n         MVC   WSCOMBUF+1(L'WSCOMBUF-1),WSCOMBUF\n         XR    R3,R3                      Clear GR 2\n         IC    R3,CIBDSIZE+1              Size of command text\n         STH   R3,WSCOMBUF                Store in our buffer\n         BCTR  R3,0                       Reduce 1 for EX\n         EX    R3,COPY_CMD\n         QEDIT ORIGIN=(R4),BLOCK=(R5)     Free CIB\nCMD_CHECK      EQU *\n         CLC   =C'SS,',WSCOMBUF+2         Is it SEND_SPOOL command ?\n         BE    SEND_SPOOL                 Yes, handle it\n         CLC   =C'SF,',WSCOMBUF+2         Is it SEND_FILE command ?\n         BE    SEND_FILE\n         CLC   =C'RETRY',WSCOMBUF+2       Is it RETRY command ?\n         BE    CMD_RETRY                  Yes, handle it\n         CLC   =C'REFRESH',WSCOMBUF+2     Is it RETRY command ?\n         BE    CMD_REFRESH                Yes, handle it\n         CLC   =C'SHUTDOWN',WSCOMBUF+2    Is it RETRY command ?\n         BE    CMD_STOP                   Yes, handle it\n         LA    R2,WSCOMBUF                Address of command buffer\n         ST    R2,WSCOMPRM                Put in plist style\n         OI    WSCOMPRM,X'80'             Mark as last parm address\n         OI    WSPFLAGS,WSPFCMND          Indicate command\n         LR    R1,R10                     Address of WSA\n         L     R15,WSMODXDP               Address of XDP module\n         BASR  R14,R15                    Call XDP\n         NI    WSPFLAGS,X'FF'-WSPFCMND    Clear command indicator\n         B     REFRESH_SSREQ              Then refresh SSREQ\nCMD_RETRY      EQU *\n         @WTO  CODE=174,TRACE=ALWAYS\n         NI    WSSFLAGS,X'FF'-WSSFWAIT    Remove wait bit\n         B     MAINLOOP\nCMD_REFRESH    EQU *\n         @WTO  CODE=175,TRACE=ALWAYS\n         B     REFRESH_SSREQ\nCOPY_CMD OC    WSCOMBUF+2(*-*),CIBDATA    << Executed >>\n         EJECT\n*\n*  +--------------------------------------------------------------+\n*  |  Interactive SEND SPOOL Command Handler                      |\n*  |    F XDI,SS,Destid,Rptname,Datasetname                       |\n*  |                                                              |\n*  |    (1)  Update DSN in ARB99 for JES sysout dynamic (SVC 99)  |\n*  |         allocation                                           |\n*  |    (2)  Update DSN in FRB99 for flat dataset allocation      |\n*  |    (3)  Call DERXSS                                          |\n*  |                                                              |\n*  +--------------------------------------------------------------+\n*\n         SPACE ,\nSEND_FILE      EQU *\n         OI    WSSFLAGS,WSSFSFIL     Remember to send file\nSEND_SPOOL     EQU *\n         MVC   WSSODEST,=CL8' '     Clear dest\n         LA    R2,WSCOMBUF+5\n         LA    R1,WSSODEST           Target\n         LA    R15,L'WSSODEST        Length of target\nSS_DEST  EQU   *\n         CLI   0(R2),C' '            Is it end of argument ?\n         BE    SS_ABORT              Yes, check report id\n         CLI   0(R2),C','            Is it argument delimiter ?\n         BE    SS_DEST_OK            Yes, check report id\n         MVC   0(1,R1),0(R2)         Copy 1 byte\n         LA    R2,1(,R2)             Search next byte source\n         LA    R1,1(,R1)             Search next byte target\n         BCT   R3,SS_DEST_BCT        Reduce total length\n         B     SS_ABORT              Abort because incomplete\nSS_DEST_BCT    EQU *\n         BCT   R15,SS_DEST           Iterate\n         B     SS_ABORT              Abort because incomplete\nSS_DEST_OK     EQU *\n         LA    R2,1(,R2)             Search next byte source\n         MVC   WSSOWRTR,=CL8' '     Clear WRTR\n         LA    R1,WSSOWRTR           It is a target\n         LA    R15,L'WSSOWRTR        Length of target\nSS_RPT   EQU *\n         CLI   0(R2),C' '            Is it end of argument ?\n         BE    SS_ABORT              Yes, check report id\n         CLI   0(R2),C','            Is it argument delimiter ?\n         BE    SS_RPT_OK             Yes, check report id\n         MVC   0(1,R1),0(R2)         Copy 1 byte\n         LA    R2,1(,R2)             Search next byte source\n         LA    R1,1(,R1)             Search next byte target\n         BCT   R3,SS_RPT_BCT         Reduce total length\n         B     SS_ABORT              Abort because incomplete\nSS_RPT_BCT     EQU *\n         BCT   R15,SS_RPT            Iterate\n         B     SS_ABORT              Abort because incomplete\nSS_RPT_OK      EQU *\n         LA    R2,1(,R2)             Search next byte source\n         BCT   R3,SS_DSN_CLR         Reduce total length\n         B     SS_ABORT              Abort because incomplete\nSS_DSN_CLR     EQU *\n         MVI   WSSODSN,C' '         Clear WRTR\n         MVC   WSSODSN+1(L'WSSODSN-1),WSSODSN\n         LA    R1,WSSODSN            It is a target\n         LA    R15,L'WSSODSN         Length of target\nSS_DSN   EQU *\n         CLI   0(R2),C' '            Is it end of argument ?\n         BE    SS_DSN_OK             Yes, check report id\n         CLI   0(R2),C','            Is it argument delimiter ?\n         BE    SS_DSN_OK             Yes, check report id\n         MVC   0(1,R1),0(R2)         Copy 1 byte\n         LA    R2,1(,R2)             Search next byte source\n         LA    R1,1(,R1)             Search next byte target\n         BCT   R3,SS_DSN_BCT         Reduce total length\n         B     SS_DSN_OK             Abort because incomplete\nSS_DSN_BCT     EQU *\n         BCT   R15,SS_DSN            Iterate\nSS_DSN_OK      EQU *\n         MVC   WSSOMLRL,=AL2(137)    Guess lrecl is 137\n         B     SYSOUT_PROCESS\nSS_ABORT EQU   *\n         @WTO  CODE=141\n         B     MAINLOOP              Global iteration\n         LTORG ,\n         DROP  R12\n         EJECT\n*\n*  +--------------------------------------------------------------+\n*  |  Exit procedure                                              |\n*  |    (1)  Tell JES that interaction is finished.               |\n*  |    (2)  Free SSOB/SSSO storage area.                         |\n*  |    (3)  Restore system savearea address                      |\n*  |    (4)  Disconnect DERWTR and DERWTX                         |\n*  |    (5)  Free WSA                                             |\n*  |    (6)  Restore states                                       |\n*  |    (7)  Return to MVS                                        |\n*  |                                                              |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nEXIT     EQU   *\n         BASR  R12,0\n         USING *,R12\n         @WTO  CODE=125,TRACE=ALWAYS\n         L     R8,ADDR_PARMLIB      Capture PARMLIB DCB\n         TM    DCBOFLGS,DCBOFOPN    Is it open ?\n         BZ    EXIT01               No, just leave it\n         CLOSE ((R8)),MODE=31,MF=(E,LCLOSE) Close PARMLIB\n         @WTO  CODE=126,TRACE=ALWAYS\nEXIT01   EQU   *\n         L     R8,ADDR_INTRDR       Map INTRDR DCB\n         TM    DCBOFLGS,DCBOFOPN    Is it open ?\n         BZ    EXIT02               No, just leave it\n         CLOSE ((R8)),MODE=31,MF=(E,LCLOSE)   Close INTRDR\n         @WTO  CODE=127,TRACE=ALWAYS\nEXIT02   EQU   *\n*>>      TM    WSOFLAGS,WSOFSSRQ   Has SSRQ processed ?\n*>>      BZ    EXIT03              No, just skip\n         MVI   SSSOFLG2,SSSOCTRL   Indicate FINAL CALL to JES2\n         MODESET MF=(E,LMODSUPV)   Enter to SUPERVISOR MODE\n         LA    R1,WSSSOBP          POINT TO SSOB POINTER\n         IEFSSREQ ,                Go to JES for give back\n         MODESET MF=(E,LMODPROB)   Back to PROBLEM MODE\nEXIT03   EQU   *\n         @WTO  CODE=128,TRACE=ALWAYS\n         LM    R2,R3,WSSSOB\n*        STORAGE RELEASE,COND=YES, Free SSOB/SSSO                      +\n               ADDR=(R2),LENGTH=(R3)    HERE'S WHERE IT LIVES\n         LM    R2,R3,WSIOBUF\n*        STORAGE RELEASE,COND=YES, Free I/O buffer                     +\n               ADDR=(R2),LENGTH=(R3)    HERE'S WHERE IT LIVES\n         @WTO  CODE=129,TRACE=ALWAYS\n         DELETE EP=DERCOM          Release DERCOM\n         DELETE EP=DERXIO          Release DERXIO\n         DELETE EP=DERWTR          Release DERWTR\n         DELETE EP=DERXSF          Release DERXSF\n         DELETE EP=DERXDP          Release DERXDP\n         DELETE EP=DERWTX          Release DERWTX\n*        DELETE EP=DERDCB          Release DERDCB\n         DELETE EP=DERMSG          Release DERMSG\n*        L     R13,WSSVA           Restore savearea\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | WTX Module Extension Area Map  |\n* | Used as a common non reentrant |\n* | part of this module            |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a DCB definitions set  |\n* | in nonreentrant part of module |\n* +--------------------------------+\n*\n         DERDCB TYPE=DSECT,RMODE=24,AMODE=31\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a MSG definitions set  |\n* | in nonreentrant part of module |\n* +--------------------------------+\n*\n         DERMSG TYPE=DSECT\n*\n* +--------------------------------+\n* | Command interaction buffer     |\n* | used to interfacing operator   |\n* | console transaction            |\n* +--------------------------------+\n*\n         DERCIB TYPE=DSECT\n*        @EPILOG\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         CVT   DSECT=YES\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFZB4D0\n         EJECT ,\n*\n*   +----------------------------------------+\n*   |  SSOB                                  |\n*   |      SSOB-header/                      |\n*   |                / SSSO                  |\n*   |                                        |\n*   +----------------------------------------+\n*\n         PRINT NOGEN\n         IEFSSOBH\n         ORG   ,\nSSOBGN   EQU   *\n         IEFSSSO SOEXT=YES\nSSSO_END EQU   *\n         IEFJSSIB\n*        IEFJSSOB SO,CONTIG=YES\n*        IEFJSSOB (SO,AG,AL),CONTIG=YES\n         END   DERXDI\n./ ADD NAME=DERXDP   0100-01324-01324-1743-00839-00839-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERXDP  |\n*                     +---------+\n*                     CA-Dispatch -to- CA-XCOM Handshaking Interface\n*\n*     Function -\n*            Evaluate parameter entered to XDI at the startup time\n*            or during operating time via MODIFY command.\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Problem state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*\n*\n*     Operation -\n*           Called by DERXDI via LOAD and BASR\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  DCB map (IHADCB) address\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  Main module base address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERXDP   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=ANY,                                              +\n               RENT=YES,                                               +\n               BREG=(R11,R12)\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Establish WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Establish WTX addressability\n         EJECT ,\n* ================================================================= *\n*  CHECK PARAMETERS                                                 *\n*                                                                   *\n*  Parameters for this interface program are                        *\n*     CLASSES=<1 to 8 sysout classes to be captured>                *\n*                                     Required, no default          *\n*     PCFORM={DISPATCH/WINDOWS}    Specify remote PC file form      *\n*                                     Default is DISPATCH           *\n*     DISP={DELETE/KEEP}           Specify weather flat file is     *\n*                                  deleted after transferred        *\n*                                     Default is DELETE             *\n*     TRACE={ON/OFF}               Specify weather trace active     *\n*                                     Default is OFF                *\n*                                                                   *\n* ================================================================= *\n         SPACE ,\n         @WTO  CODE=103,TRACE=ALWAYS\n         TM    WSPFLAGS,WSPFCMND      Is it called to process cmd ?\n         BO    CMD_PROCESS            Ya, take arguments\n         L     R1,WSPARM              Access parameter list address\n         L     R2,0(,R1)              Access 1st parameter address\n         B     BEGIN\nCMD_PROCESS    EQU *\n         LA    R2,WSCOMBUF            Command buffer\n         WTO   TEXT=(R2),MF=(E,LWTO)\n         LA    R1,WSCOMPRM            Address of parameter\nBEGIN    EQU   *\n         CLC   =C'LIST ',2(R2)        Is it LIST request ?\n         BE    SHOWPARM               Yes, show parameter\n         CLC   =C'L ',2(R2)           Is it L request ?\n         BE    SHOWPARM               Yes, same effect - show parameter\n         NI    WSPFLAGS,X'FF'-WSPFFILE Turn indicator off\n         CLC   =C'TABLE=',2(R2)       Is TABLE=mm specified ?\n         BE    DEST_TABLE             No, skip NSI\n         CLC   =C'FILE=',2(R2)        Is FILE=mm specified ?\n         BNE   CHKPARM                No, skip NSI\nPARM_FILE EQU  *\n         MVC   WSPARMM(6),=CL6'XDISYS'      Set basic member name\n         MVC   WSPARMM+6(2),7(R2)        Put suffix\n         BAS   R14,OPEN_PARM          Yes, open parmlib\n         OI    WSPFLAGS,WSPFFILE      Turn indicator on\n         MVC   WSIOREC,WSIOBUF        Access 1st record of block\nPARM_REC EQU   *\n         L     R2,WSIOREC             Access a record of block\nPARM_REC_CHECK EQU *\n         C     R2,WSIOREC+4           Overlimit ?\n         BH    PARMNEXT               Go out if so\n         CLI   0(R2),C' '             Empty record ?\n         BE    PARM_REC_NEXT          Seek next record if so\n         CLI   0(R2),C'*'             Commented record ?\n         BNE   PARM_REC_CONT          Begin to check record if not\nPARM_REC_NEXT  EQU *\n         LA    R2,80(,R2)\n         B     PARM_REC_CHECK         Iterate\nPARM_REC_CONT  EQU *\n         LR    R3,R2                  Address of record\n         LA    R7,72                  Max parm length is 72\nPARM_REC_LOOP  EQU *\n         CLI   0(R3),C' '             End of parm ?\n         BE    PARM_REC_END           Yes, leave loop\n         LA    R3,1(,R3)              Seek next byte\n         BCT   R7,PARM_REC_LOOP       Iterate\nPARM_REC_END   EQU *\n         MVC   WSCARD+2(72),0(R2)       Bring parm record as well\n         LA    R2,80(,R2)             Next record address\n         ST    R2,WSIOREC             and save here\n         LA    R2,WSCARD              Address of card\n         LA    R7,72\n         STH   R7,WSCARD\n         LA    R2,WSCARD\n         WTO   TEXT=(R2),MF=(E,LWTO)\n         LA    R2,WSCARD+2            Address of parameter\n         B     CHKPARM1               Skip NSI\nDESTTAB  EQU   *\n         MVC   WSTABLE(6),=C'XDITAB'\n         MVC   WSTABLE+6(2),0(R2)\n         OI    WSPFLAGS,WSPFTABL      Indicate table will be renew\n         B     UPDATE_TABLE\nCHKPARM  EQU   *\n         L     R2,0(,R1)              Access 1st parameter address\n         XR    R7,R7                  Clear R7\n         ICM   R7,B'0011',0(R2)       Parameter length\n         LA    R2,2(,R2)              Straight to parm area\nCHKPARM1 EQU   *\n         LA    R3,PARMKEYS            Point to parm table\n         LA    R4,PARMKEYN            Number of entries\n         XR    R5,R5                  Zap GR 5\nPARMLOOP EQU   *\n         IC    R5,3(R3)               Get keyword string length\n         EX    R5,CHKKEYWD            Is it the right keyword ?\n         BE    PARMOKEY               Yes, handle it\n         LA    R3,PARMKEYW(R3)        Seek next entry\n         BCT   R4,PARMLOOP            and iterate\n*        @MESSAGE ERROR,OPCODE=B,OBJECT=(R2),TYPE=PARM,                +\n               RC=*,EXIT=PARMNEXT\n         B     PARMNEXT               Get next parm\nPARMKEYS DS    0H\n   DC Y(CHKCLS-PARMKEYS),AL1(*-*,7,8,0),CL8'CLASSES='\n   DC Y(CHKCLS-PARMKEYS),AL1(*-*,5,6,0),CL8'CLASS=  '\n   DC Y(CHKRQC-PARMKEYS),AL1(*-*,7,8,0),CL8'RQCLASS='\n   DC Y(CHKFRM-PARMKEYS),AL1(*-*,6,7,0),CL8'PCFORM= '\n   DC Y(CHKTRC-PARMKEYS),AL1(*-*,5,6,0),CL8'TRACE=  '\n   DC Y(CHKDSP-PARMKEYS),AL1(*-*,4,5,0),CL8'DISP=   '\n   DC Y(CHKXDS-PARMKEYS),AL1(*-*,5,6,0),CL8'XDISP=  '\n   DC Y(CHKHLD-PARMKEYS),AL1(*-*,4,5,0),CL8'HOLD=   '\n   DC Y(CHKTAB-PARMKEYS),AL1(*-*,7,8,0),CL8'DESTTAB='\n   DC Y(CHKTAB-PARMKEYS),AL1(*-*,5,6,0),CL8'TABLE=  '\n   DC Y(CHKXCP-PARMKEYS),AL1(*-*,5,6,0),CL8'XPARM=  '\n   DC Y(CHKHDD-PARMKEYS),AL1(*-*,7,8,0),CL8'PCDRIVE='\n   DC Y(CHKSLB-PARMKEYS),AL1(*-*,7,8,0),CL8'STEPLIB='\n   DC Y(CHKCLB-PARMKEYS),AL1(*-*,6,7,0),CL8'CAILIB= '\n   DC Y(CHKGLB-PARMKEYS),AL1(*-*,7,8,0),CL8'GLOBLIB='\n   DC Y(CHKRLB-PARMKEYS),AL1(*-*,7,8,0),CL8'RESTLIB='\n   DC Y(CHKXLB-PARMKEYS),AL1(*-*,7,8,0),CL8'CNTLLIB='\n   DC Y(CHKXLB-PARMKEYS),AL1(*-*,7,8,0),CL8'PARMLIB='\n   DC Y(CHKLRL-PARMKEYS),AL1(*-*,5,6,0),CL8'LRECL=  '\nPARMKLEN EQU   *-PARMKEYS\nPARMKEYW EQU   14\nPARMKEYN EQU   PARMKLEN/PARMKEYW\n         SPACE ,\nCHKKEYWD CLC   6(*-*,R3),0(R2)             << Executed >>\nGETPARM  MVC   0(*-*,R6),0(R2)             << Executed >>\n         SPACE ,\nPARMOKEY EQU   *\n         LA    R2,1(R5,R2)            Jump over the keyword\n         LR    R4,R7                  Copy parm length\n         SR    R4,R5                  Reduced by kwd length\n         LR    R7,R4                  Copy to GR 7\n         BCTR  R4,0                   Reduced again by 1\n         IC    R5,4(R3)               Get parm string length\n         LH    R6,0(,R3)              Get relocation factor\n         B     PARMKEYS(R6)           Relocate and go\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check Library Parameter                         |\n*   |     Get list of 1 to 44 byte STEPLIB parameter    |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCHKSLB   EQU   *\n         LA    R15,WSSTPLIB\n         LA    R6,WSSTPLIB\n         B     CHKLIB\nCHKCLB   EQU   *\n         LA    R15,WSCAILIB\n         LA    R6,WSCAILIB\n         B     CHKLIB\nCHKGLB   EQU   *\n         LA    R15,WSGLBLIB\n         LA    R6,WSGLBLIB\n         B     CHKLIB\nCHKRLB   EQU   *\n         LA    R15,WSRSTLIB\n         LA    R6,WSRSTLIB\n         B     CHKLIB\nCHKXLB   EQU   *\n         LA    R15,WSCTLLIB\n         LA    R6,WSCTLLIB\n         B     CHKLIB\nCHKLIB   EQU   *\n         MVI   0(R15),C' '\n         MVC   1(43,R15),0(R15)\n         BAS   R14,COPYPARM           Perform copy parameter\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check XPARM Parameter                           |\n*   |     Get list of 1 to 38 byte job parameter in     |\n*   |     the form of:                                  |\n*   |                                                   |\n*   |     XPARM=('ACBNAME=aaaaaaaa,TYPE=tttttttt')      |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCHKXCP   EQU   *\n         MVI   WSXCJPRM,C' '\n         MVC   WSXCJPRM+1(L'WSXCJPRM-1),WSXCJPRM\n         LA    R6,WSXCJPRM\n         BAS   R14,COPYPARM           Perform copy parameter\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check TABLE or DESTTAB Parameter                |\n*   |     Get 2 digit suffix of destination table       |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCHKTAB   EQU   *\n         MVC   WSTABLE(6),=C'XDITAB'\n         MVC   WSTABLE+6(2),0(R2)\n         OI    WSPFLAGS,WSPFTABL      Indicate table will be renew\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check CLASS or CLASSES Parameter                |\n*   |     Get list of 1 to 8 sysout classes to be       |\n*   |     a selection criteria                          |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCHKCLS   EQU   *\n         MVC   WSCLASSL,=8X'40'       Blank class list\n         LA    R6,WSCLASSL            Point to target\n         OI    WSPFLAGS,WSPFCLAS      Indicate that class parm done\n         OI    WSPFLAGS,WSPFSSRQ      Indicate need re-SSREQ\n         BAS   R14,COPYPARM           Perform copy parameter\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check RQCLASS Parameter                         |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCHKRQC   EQU   *\n         MVC   WSQCLASS,0(R2)         Get requeue class\n         OI    WSQCLASS,C' '          Must uppercase\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check LRECL Parameter                           |\n*   |     Get default LRECL to be used to create        |\n*   |     flat dataset.   This parameter will be        |\n*   |     overriden by one specified in the XDI         |\n*   |     parmlib member.                               |\n*   +---------------------------------------------------+\n*\nCHKLRL   EQU   *\n         NI    WSPFLAGS,X'FF'-WSPFFORC 1stly ASIS\n         CLC   =C'NORMAL',0(R2)       Is LRECL force to NORMAL  ?\n         BNE   PARMNEXT               No, means ASIS\n         OI    WSPFLAGS,WSPFFORC      Yes, indicate this parm\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check PCFORM Parameter                          |\n*   |     Get default PC FORM to be used to create      |\n*   |     flat dataset.   This parameter will be        |\n*   |     overriden by one specified in the XDI         |\n*   |     parmlib member.                               |\n*   +---------------------------------------------------+\n*\nCHKFRM   EQU   *\n         LA    R6,WSFORM              Point to target\n         MVC   WSFORM,=CL8' '\n         BAS   R14,COPYPARM           Copy the parm here\n         CLC   =C'DISPATCH',WSFORM    Is FORM = DISPATCH ?\n         BNE   WINDFRM                No, may be WINDOWS\n         MVI   WSFFLAGS,WSFFDISP      Indicate FORM is DISPATCH\n         B     OKEYFRM                Get next parm\nWINDFRM  CLC   =C'WINDOWS',WSFORM     Is FORM = WINDOWS ?\n         BNE   S390FRM                Get next parm\n         MVI   WSFFLAGS,WSFFWIND      Indicate FORM is WINDOWS\n         B     OKEYFRM                Get next parm\nS390FRM  MVI   WSFFLAGS,WSFFS390      Indicate FORM is S/390 standard\nOKEYFRM  EQU   *\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Dynamic Parameter Copier (Variable Length)      |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCOPYPARM EQU   *\n         CLI   0(R2),C' '             End of parm ?\n         BE    COPYPEND               Yes, skip\n         OC    0(1,R6),0(R2)          Take 1 byte parm\n         LA    R6,1(,R6)              Next byte of target\n         LA    R2,1(,R2)              Next byte of source\n         BCT   R7,COPYPARM            Iterate\n         BR    R14                    Return\nCOPYPEND EQU   *\n         LA    R2,1(,R2)              Next byte of source\n         BCTR  R7,0\n         BR    R14                    Return\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check Harddisk PC Drive Letter                  |\n*   |                                                   |\n*   +---------------------------------------------------+\n*\nCHKHDD   EQU   *\n         MVC   WSPCHDD,0(R2)          Get HDD letter\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check DISP Parameter                            |\n*   |     Get default sysout override disposition.      |\n*   |     This parameter will be overriden by one       |\n*   |     specified in the XDI parmlib member.          |\n*   +---------------------------------------------------+\n*\nCHKDSP   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFKEEP   Firstly DISP=DELETE\n         CLC   =C'KEEP',0(R2)         Is DISP=KEEP ?\n         BE    OKEYDSPK               Handle if so\n         CLC   =C'DELETE',0(R2)       Is DISP=DELETE ?\n         BE    OKEYDSP                Handle if so\n         B     PARM_ERROR             Otherwise, signal error msg\nOKEYDSPK EQU   *\n         OI    WSOFLAGS,WSOFKEEP      Indicate DISP=KEEP\nOKEYDSP  EQU   *\n         B     PARMNEXT               Get next parm\n         SPACE\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check DISP Parameter                            |\n*   |     Get default flat dataset disposition to be    |\n*   |     specified in file LCLDS01 of XCOMJOB.  This   |\n*   |     parameter will be overriden by one specified  |\n*   |     in the XDI parmlib member.                    |\n*   +---------------------------------------------------+\n*\nCHKXDS   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFXKEP   Firstly XDISP=DELETE\n         CLC   =C'KEEP',0(R2)         Is XDISP=KEEP ?\n         BE    OKEYXDSK               Handle if so\n         CLC   =C'DELETE',0(R2)       Is XDISP=DELETE ?\n         BE    OKEYXDS                Handle if so\n         B     PARM_ERROR             Otherwise, signal error msg\nOKEYXDSK EQU   *\n         OI    WSOFLAGS,WSOFXKEP      Indicate XDISP=KEEP\nOKEYXDS  EQU   *\n         B     PARMNEXT               Get next parm\n         SPACE ,\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check HOLD Parameter                            |\n*   |     Get default held sysout processing.  Specify  |\n*   |     HOLD=PROCESS indicate that held sysout file   |\n*   |     will be accecpted to XDI processing.  Other-  |\n*   |     wise, HOLD=IGNORE is assumed.                 |\n*   +---------------------------------------------------+\n*\nCHKHLD   EQU   *\n         CLC   =C'PROCESS',0(R2)      Is HOLD=PROCESS ?\n         BE    OKEYHLDK               Handle if so\n         CLC   =C'IGNORE',0(R2)       Is HOLD=IGNORE ?\n         BE    OKEYHLD                Handle if so\n         B     PARM_ERROR\nOKEYHLDK EQU   *\n         OI    WSOFLAGS,WSOFHOLD      Indicate XDISP=KEEP\nOKEYHLD  EQU   *\n         OI    WSPFLAGS,WSPFSSRQ      Indicate need re-SSREQ\n         B     PARMNEXT               Get next parm\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Check TRACE Parameter                           |\n*   +---------------------------------------------------+\n*\nCHKTRC   EQU   *\n         NI    WSOFLAGS,X'FF'-WSOFTRAC Trace is off 1st\n         CLC   =C'OFF',0(R2)          Is TRACE=OFF ?\n         BE    OKEYTRC                Handle if so\n         CLC   =C'ON',0(R2)           Is TRACE=ON ?\n         BE    OKEYTRCY               Handle if so\n         CLC   =C'NO',0(R2)           Is TRACE=OFF ?\n         BE    OKEYTRC                Handle if so\n         CLC   =C'YES',0(R2)          Is TRACE=ON ?\n         BE    OKEYTRCY               Handle if so\n         CLC   =C'N',0(R2)            Is TRACE=OFF ?\n         BE    OKEYTRC                Handle if so\n         CLC   =C'Y',0(R2)            Is TRACE=ON ?\n         BNE   PARMNEXT               No, get next parm\nOKEYTRCY EQU   *\n         OI    WSOFLAGS,WSOFTRAC      Indicate trace is on\nOKEYTRC  EQU   *\n         B     PARMNEXT               Get next parm\nPARM_ERROR     EQU *\n         L     R2,0(,R1)              Restore parm\n         @MESSAGE ERROR,OPCODE=B,OBJECT=(R2),TYPE=PARM,                +\n               RC=*,EXIT=EXIT\nPARMNEXT EQU   *\n         TM    WSPFLAGS,WSPFFILE      Is it parmlib processing ?\n         BZ    PARMCONT\n         L     R2,WSIOREC             Access record\n         C     R2,WSIOREC+4           Is it overlimit ?\n         BNH   PARM_REC               No, continue next record\n         BAS   R14,GET_PARM           Yes, try another block\n         B     RVEWPARM               Go here if no more block\nPARMCONT EQU   *\n         TM    WSPFLAGS,WSPFCMND      Is it entered from command ?\n         BO    RVEWPARM               Yes, review parms\n         TM    0(R1),X'80'            Is it the last parm ?\n         BO    RVEWPARM               Yes, review parms\n         LA    R1,4(,R1)              Bump to next parm address\n         B     CHKPARM               Iterate\n         EJECT\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Read Parameter Table (XDISYSnn)                 |\n*   |     - All parameter can be specified in this      |\n*   |       table                                       |\n*   |     - Inline parameter will override this table   |\n*   +---------------------------------------------------+\n*\nGET_PARM EQU *\n         STM   R0,R15,WSSAVEGR\n         B     READ_BLOCK\nOPEN_PARM      EQU *\n         STM   R0,R15,WSSAVEGR\n         @WTO  CODE=135,TRACE=ALWAYS\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   WSEOPARM,DCBEEODA         Save EODAD in WSA\n         MVC   DCBEEODA,=A(EOF_PARMLIB)  Set EOF exit routine address\n*        MVC   DCBEODA,=AL3(EOF_PARMLIB) Set EOF exit routine address\n         TM    DCBOFLGS,DCBOFOPN         Is it opened ?\n         BO    READ_PARM                 Yes, read parmlib block\n         OPEN  ((R8),(INPUT)),MF=(E,LOPEN_PARMLIB),MODE=31 Open PARMLIB\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BO    OPEN_PARM_OKEY\n         @MESSAGE ERROR,OPCODE=BZ,RC=(R15),                            +\n               OPER=IO,TYPE=OPEN,OBJECT=DCBDDNAM,                      +\n               EXIT=*\n         @MESSAGE ERROR,OPCODE=BZ,OBJECT=(R2),TYPE=PARM,               +\n               RC=*,EXIT=EXIT\n         WTO   'DERXDP900E Trace: Unable to open parmlib '\n         B     EXIT\nOPEN_PARM_OKEY EQU *\n*        WTO   'DERXDP902I Trace: Parmlib successfully opened'\n         OI    WSPFLAGS,WSPFOPEN         Remember parmlib opened\n         L     R1,WSIOBUF                 and save in WSA\n         A     R1,WSIOBUF+4              Save buffer length\n         ST    R1,WSIOREC+4              Save address of end of buffer\nREAD_PARM      EQU *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         FIND  ((R8)),WSPARMM,D          Find the member\n         LTR   R15,R15                   Check RC\n         BZ    READ_BLOCK                Begin to read if RC = 0\n         @MESSAGE WARNING,OPCODE=BNZ,RC=(R15),                         +\n               OPER=IO,TYPE=FIND,OBJECT=WSPARMM,                       +\n               EXIT=*\n         @MESSAGE WARNING,OPER=FIND,RC=(R15),                          +\n               TYPE=PARM,OBJECT=WSPARMM,EXIT=EXIT\n         WTO   'DERXDP901E Trace: Unable to find parmlib member'\n         B     EXIT\nREAD_BLOCK     EQU *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R5,WSIOBUF         Address of I/O buffer\n         ST    R5,WSIOREC         Save 1st record address\n         READ  XDIDECB,SF,(R8),(R5),'S',MF=E\n         CHECK XDIDECB\n         WTO   'DERXDP903I Trace: Parmlib block is being transferred'\n         LH    R6,DCBLRECL        Get LRECL\n         LH    R7,DCBBLKSI         and BLOCK SIZE\n         LA    R7,0(R7,R5)        End of full block\n         L     R1,XDIDECB+16      Address of IOB\n         LH    R1,14(R1)          Residual count for short block\n         SR    R7,R1              Adjust block length\n         SR    R7,R6              Backward to the start of last record\n         ST    R7,WSIOREC+4       Save address of last record\n         WTO   'DERXDP904I Trace: Parmlib block transfer complete'\n         LM    R0,R15,WSSAVEGR    Restore GPRs\n         BR    R14                Return\nEOF_PARMLIB    EQU   *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   DCBEEODA,WSEOPARM         Restore EODAD from WSA\nRVEWPARM EQU   *\n         @WTO  CODE=136,TRACE=ALWAYS\n         TM    WSPFLAGS,WSPFCLAS      Have minimum parms done ?\n         BNZ   SHOWPARM               Yes, just exit\n         LA    R15,8                  Set RC = 8\n         TM    WSPFLAGS,WSPFCLAS      Has CLASS parms done ?\n         @MESSAGE ERROR,OPCODE=BZ,OBJECT='Initial parameter',          +\n               RC=(R15),EXIT=EXIT\nSHOWPARM EQU   *\n         LA    R5,M_ENTRY\n         TM    WSPFLAGS,WSPFFILE      Clear file indicator\n         BZ    SHOW_CLASS\n         LA    R5,M_FILE\n         @MESSAGE INFO,OPER=SHOW,TYPE=PARM_FILE,                       +\n               OBJECT=WSPARMM\nSHOW_CLASS     EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=CLASS,                           +\n               OBJECT=WSCLASSL,TEXT=(R5)\n         MVC   WSDWORD,=CL8'  (only)'\n         MVC   WSDWORD(1),WSQCLASS\n         @MESSAGE INFO,OPER=SHOW,TYPE=REQUEUE_CLASS,                   +\n               OBJECT=WSQCLASS,TEXT=(R5)\n         CLI   WSFFLAGS,WSFFDISP      PC form = Dispatch ?\n         BE    SHOW_FORM\n         CLI   WSFFLAGS,WSFFWIND      PC form = Windows ?\n         BE    SHOW_FORM\n         MVI   WSFFLAGS,WSFFS390      Otherwise, must be S/390\n         MVC   WSFORM,=CL8'S/390'\nSHOW_FORM      EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=PCFORM,                          +\n               OBJECT=WSFORM,TEXT=(R5)\n         MVC   WSDWORD,=CL8'KEEP'\n         TM    WSOFLAGS,WSOFKEEP\n         BO    SHOW_DISP\n         MVC   WSDWORD,=CL8'DELETE'\nSHOW_DISP      EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=DISP,                            +\n               OBJECT=WSDWORD,TEXT=(R5)\n         MVC   WSDWORD,=CL8'KEEP'\n         TM    WSOFLAGS,WSOFXKEP\n         BO    SHOW_XDISP\n         MVC   WSDWORD,=CL8'DELETE'\nSHOW_XDISP     EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=XDISP,                           +\n               OBJECT=WSDWORD,TEXT=(R5)\n         MVC   WSDWORD,=CL8'PROCESS'\n         TM    WSOFLAGS,WSOFHOLD\n         BO    SHOW_HOLD\n         MVC   WSDWORD,=CL8'IGNORE'\nSHOW_HOLD      EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=HOLDFILE,                        +\n               OBJECT=WSDWORD,TEXT=(R5)\n         MVC   WSWORD,=CL4'ON'\n         TM    WSOFLAGS,WSOFTRAC\n         BO    SHOW_TRACE\n         MVC   WSWORD,=CL4'OFF'\nSHOW_TRACE     EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=TRACE,                           +\n               OBJECT=WSWORD,TEXT=(R5)\n         MVC   WSPCDRV(7),=CL7'HDD of'\n         @MESSAGE INFO,OPER=SHOW,TYPE=PCDRIVE,                         +\n               OBJECT=WSPCHDD,TEXT=(R5)\n         MVC   WSDWORD,=CL8'ASIS'\n         TM    WSPFLAGS,WSPFFORC          Is it forced ?\n         BZ    SHOW_REC_HANDLING\n         MVC   WSDWORD,=CL8'FORCED'\nSHOW_REC_HANDLING EQU *\n         @MESSAGE INFO,OPER=SHOW,TYPE=REC_HANDLING,                    +\n               OBJECT=WSDWORD,TEXT=(R5)\n         @XCOMJOB EXEC,                                                +\n               PREFIX=XC,LOC=*,                                        +\n               JOBPARM=WSXCJPRM,                                       +\n               STEPLIB=WSSTPLIB,                                       +\n               CAILIB=WSCAILIB,                                        +\n               RESTLIB=WSRSTLIB,                                       +\n               GLOBLIB=WSGLBLIB,                                       +\n               CNTLLIB=WSCTLLIB,                                       +\n               PCDRIVE=WSPCHDD\n         B     EXIT\nM_ENTRY  DC   AL2(L'MT_ENTRY)\nMT_ENTRY DC   C'from direct entry  '\nM_FILE   DC   AL2(L'MT_FILE)\nMT_FILE  DC   C'from parmlib member  '\n         EJECT\n         DS   0H\n         EJECT\n*\n*   +---------------------------------------------------+\n*   |                                                   |\n*   |   Read Destination Table (XDITABnn)               |\n*   |     - Set of destination of recipient can only    |\n*   |       specified via this table                    |\n*   |     - There is no default for destinataion        |\n*   +---------------------------------------------------+\n*\nDEST_TABLE    EQU *\n         MVC   WSTABLE(6),=C'XDITAB'     Specify membername\n         MVC   WSTABLE+6(2),8(R2)        Take suffix\nUPDATE_TABLE  EQU *\n         L     R8,ADDR_PARMLIB           Capture Parmlib DCB map\n         L     R7,DCBDCBE                Establish PARMLIB DCBE map\n         MVC   WSEOPARM,DCBEEODA         Save EODAD in WSA\n         MVC   DCBEEODA,=A(EOF_TABLE)    Set EOF exit routine address\n         TM    DCBOFLGS,DCBOFOPN         Is it opened ?\n         BO    OPEN_TABLE_OKEY           Yes, read table block\n         OPEN  ((R8),(INPUT)),MF=(E,LOPEN_PARMLIB),MODE=31 Open PARMLIB\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BO    OPEN_TABLE_OKEY\n         @MESSAGE ERROR,OPCODE=BZ,RC=(R15),                            +\n               OPER=IO,TYPE=OPEN,OBJECT=WSTABLE,                       +\n               EXIT=*\n         @MESSAGE ERROR,OPCODE=BZ,OBJECT=(R2),TYPE=TABLE,              +\n               RC=*,EXIT=EOF_TABLE\n         B     EOF_TABLE\nOPEN_TABLE_OKEY EQU *\n         L     R8,ADDR_PARMLIB       Capture Parmlib DCB map\n         FIND  ((R8)),WSTABLE,D      Check if TABLE name exist\n         ST    R15,WSRCODE             Save RC\n         LTR   R15,R15               Check RC\n         BZ    READ_TABLE            Go straight if RC =  0\n         @MESSAGE WARNING,OPCODE=BNZ,RC=(R15),                         +\n               OPER=IO,TYPE=FIND,OBJECT=WSTABLE,                       +\n               EXIT=*\n         L     R15,WSRCODE           Restore RC\n         @MESSAGE WARNING,OPER=FIND,RC=(R15),                          +\n               TYPE=TABLE,OBJECT=WSTABLE,EXIT=*\n         B     EOF_TABLE\nREAD_TABLE     EQU *\n         LM    R2,R3,WSDESTP      Pointer and number of dest\n         LTR   R2,R2              Has it initialized ?\n         BZ    GET_VS_TABLE\n         SLL   R3,3               Multiply to number of byte\n         STORAGE RELEASE,ADDR=(R2),LENGTH=(R3)\nGET_VS_TABLE   EQU *\n         L     R3,WSIOBUF+4\n         SLL   R3,1              At least 2 x I/O buffer\n         STORAGE OBTAIN,LENGTH=(R3)\n         ST    R1,WSDESTP         Save pointer\n         SRL   R0,3               Divided by 8\n         ST    R0,WSDESTP+4       and save it\n         @WTO  CODE=107              Get parmlist address\n         LM    R2,R3,WSDESTP      Top of table & # dest\nREAD_TABLE_BLOCK EQU *\n         L     R5,WSIOBUF         Address of I/O buffer\n         READ  XDIDECB,SF,(R8),(R5),'S',MF=E\n         CHECK XDIDECB\n         LH    R6,DCBLRECL        Get LRECL\n         LH    R7,DCBBLKSI         and BLOCK SIZE\n         LA    R7,0(R7,R5)        End of full block\n         L     R1,XDIDECB+16      Address of IOB\n         LH    R1,14(R1)          Residual count for short block\n         SR    R7,R1              Adjust block length\n         SR    R7,R6              Backward to the start of last record\nREAD_TABLE_RECORD EQU *\n         CLI   0(R5),C'*'         Is comment ?\n         BE    READ_TABLE_NEXT    Yes, skip this record\n         CLI   0(R5),C' '         Is blank ?\n         BE    READ_TABLE_NEXT    Yes, skip this record\n         CLI   0(R5),X'00'        Is null ?\n         BE    READ_TABLE_NEXT    Yes, skip this record\n         MVC   0(8,R2),0(R5)      Get in the destination name\n         LA    R2,8(,R2)          Next dest\n         BCT   R3,READ_TABLE_NEXT\n         L     R3,WSDESTP+4\n         SLL   R3,4\n         STORAGE OBTAIN,LENGTH=(R3)\n         ST    R1,WSDWORD\n         ST    R0,WSDWORD+4\n         LR    R2,R1              Address\n         LM    R0,R1,WSDESTP\n         SLL   R1,3\n         LR    R3,R1\nMVCL_LOOP EQU  *\n         MVCL  R2,R0\n         LTR   R1,R1\n         BC    1,MVCL_LOOP\n         ST    R2,WSWORD          Position of unfilled new buffer\n         LM    R2,R3,WSDESTP      Old table\n         SLL   R3,3               Zoom to # bytes\n         STORAGE RELEASE,ADDR=(R2),LENGTH=(R3)\n         LM    R2,R3,WSDWORD      New table\n         SRL   R3,3               # of dest\n         STM   R2,R3,WSDESTP      Save new table\n         L     R2,WSWORD          Resume position\n         LR    R15,R2\n         S     R15,WSDESTP        Offset\n         L     R3,WSDWORD+4       Length of table\n         SR    R3,R15             Length beyond last position\n         SRL   R3,3               Rest # dest\nREAD_TABLE_NEXT EQU *\n         BXLE  R5,R6,READ_TABLE_RECORD  Search next record in block\n         B     READ_TABLE_BLOCK         Iterate to read next block\nEOF_TABLE EQU  *\n         MVC   0(8,R2),=CL8'/*EOF '\n         NI    WSPFLAGS,X'FF'-WSPFTABL   Clear indicator\n         MVC   WSDESTP1(8),WSDESTP      Set hot position\n         MVC   DCBEEODA,WSEOPARM        Restore EODAD from WSA\n         @MESSAGE INFO,OPER=SHOW,TYPE=DEST_TABLE,                      +\n               OBJECT=WSTABLE\n         LM    R2,R3,WSDESTP            Pointer and number of dest\nTABLE_SHOW_LOOP EQU *\n         CLC   =C'/*EOF ',0(R2)         End of table ?\n         BE    TABLE_SHOW_END           Yes, end loop\n         MVC   WSDWORD,0(R2)\n         @MESSAGE INFO,OPER=LIST,TYPE=DESTID,                          +\n               OBJECT=WSDWORD,TEXT='accepted and applied.'\n         LA    R2,8(R2)\n         BCT   R3,TABLE_SHOW_LOOP\nTABLE_SHOW_END EQU *\n*\n*  +--------------------------------------------------------------+\n*  |  Exit procedure                                              |\n*  |    (1)  Tell JES that interaction is finished.               |\n*  |    (2)  Free SSOB/SSSO storage area.                         |\n*  |    (3)  Restore system savearea address                      |\n*  |    (4)  Disconnect DERWTR and DERWTX                         |\n*  |    (5)  Free WSA                                             |\n*  |    (6)  Restore states                                       |\n*  |    (7)  Return to MVS                                        |\n*  |                                                              |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nEXIT     EQU   *\n         TM    WSPFLAGS,WSPFTABL      Is update table requested ?\n         BO    UPDATE_TABLE           Yes, handle it\nQUIT     EQU   *\n*        LM    R2,R3,WSIOBUF            I/O buffer address & size\n*        STORAGE RELEASE,ADDR=(R2),LENGTH=(R3)   Release the buffer\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n* +--------------------------------+\n* | Command interaction buffer     |\n* | used to interfacing operator   |\n* | console transaction            |\n* +--------------------------------+\n*\n         DERCIB TYPE=DSECT\n*        @EPILOG\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n         END   DERXDP\n./ ADD NAME=DERXDS   0100-01324-01324-1743-00340-00340-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERXDS  |\n*                     +---------+\n*                     CA-Dispatch -to- CA-XCOM Handshaking Interface\n*\n*     Function -\n*            Activate local external writer and establish handshaking\n*            between CA-Dispatch and CA-Xcom\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          In Cataloged Procedure JCL\n*\n*  |           //stepname EXEC PGM=DERXDS,                           |\n*  |           //            PARM='CLASSES=cccccccc,FORM=ffffffff'   |\n*  |               cccccccc = List up to 8 classes to be captured    |\n*  |               ffffffff = Form of recipient, i.e. FORM=DISPATCH  |\n*  |                                                                 |\n*          Or From Console Interaction\n*  |                                                                 |\n*  |           F Procname,Classes={ccccc}                            |\n*\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  Counter\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  SSSO block address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERXDS   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=ANY,                                              +\n               RENT=YES,                                               +\n               BREG=R12\n*\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING SSOB,R11           Establish SSOB structure map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Establish WSA mapping\n         LOAD  EP=DERWTX\n         LR    R9,R0              Establish WTX mapping\n         CLI   WSSOWRTR,C' '           Is writer name there ?\n         BE    NONAME                  No, proceed\n         CLI   WSSOWRTR,X'00'          Null ?\n         BNE   GOOD_EXIT               Otherwise, may fine sysout\nNONAME   EQU   *\n         L     R11,WSSSOB         Establish SSOB mapping\n         TM    SSSOFLG5,SSSOGNVA       Is outgroup name provided ?\n         BZ    NO_OUTGROUP             Give default name and exit\n         MVI   SSSOFLG2,SSSOCTRL   Indicate FINAL CALL to JES2\n         MODESET MF=(E,LMODSUPZ)   Enter to SUPERVISOR MODE\n         LA    R1,WSSSOBP          POINT TO SSOB POINTER\n         IEFSSREQ ,                Go to JES for give back\n         MODESET MF=(E,LMODPRON)   Back to PROBLEM MODE\n         BAS   R14,INIT_REQUEUE\n         MVC   0(1,R2),WSQCLASS         Complete cmd text with class\n         BAS   R14,INIT_SSOB\n         MVC   SSSOCLSL,WSCLASSL      Restore CLASS list\n         MVC   SSSODEST,WSSODEST      Restore DEST\n         OI    SSSOFLG1,SSSODST       and its request\n         MODESET MF=(E,LMODZERO)\n         LM    R0,R1,WSCMDPRM           Get cmd parameter list\n         SVC   34                       Schedule command\n         MODESET MF=(E,LMODNZER)\n         MVC   WSSOGRNM,SSSOOGNM       Save group name\n         L     R1,WSSSOB1              Address of SSOB pointer\n         ST    R1,WSSSOBP              Save pointer\n         OI    WSSSOBP,X'80'           Mark as the only ptr in the list\n         XR    R8,R8                   CLear counter\n         LA    R8,1(R8)                Increment counter\n         MVC   WSWORD,=A(WAIT_SYSOUT)\nLOOP_SSREQ     EQU *\n         L     R11,WSSSOB1             Point to parmlist and\n         BAS   R14,INIT_SSOB           Initialize SSOB\n         MVC   SSSOCLSL,WSLCLASS       Set CLASS list for request\n         @WTO  CODE=106             Get parmlist address\nSEND_SSREQ     EQU *\n         MODESET MF=(E,LMODSUPZ)       Enter to SUPERVISOR mode key 0\n         LA    R1,WSSSOBP              Point to the SSOB parmlist\n         IEFSSREQ ,                    Send SUBSYSTEM REQUEST\n         LR    R5,R15                  Save RC\n         MODESET MF=(E,LMODPRON)       Back to PROBLEM mode\n         LTR   R15,R5                  Check RC\n         BNZ   ERROR_SSI               Error if not 0\n         L     R14,WSWORD\n         L     R15,SSOBRETN            Check SSOB RC\n         LTR   R15,R15                 Is it 0\n         BZ    FOUND_SYSOUT            Ya, sysout found\n         CH    R15,=H'4'               Must we wait for ?\n         BER   R14                     Go to wait or exit\n*        BE    WAIT_SYSOUT             Yes if RC = 4\n         B     ERROR_SSOB              Otherwise must be serious error\nWAIT_SYSOUT    EQU *\n         MVC   WSWORD,=A(LOST_SYSOUT)\n         CH    R8,=H'2'                Check counter\n         BNL   LOST_SYSOUT             Assume lost if recycled\n         LA    R8,1(R8)                Increment counter\n         MODESET MF=(E,LMODSUPZ)       Enter to SUPERVISOR mode\n         L     R2,SSSOWTRC             Point to JES/WTR comm. area\n         WAIT  ECB=(R2)                Wait for JES\n         MODESET MF=(E,LMODPRON)       Enter to PROBLEM mode\n         B     SEND_SSREQ              Retry send SSREQ\nFOUND_SYSOUT   EQU *\n         MVC   WSWORD,=A(LOST_SYSOUT)\n         TM    WSOFLAGS,WSOFTRAC       Is trace enabled ?\n         BZ    CHECK_SYSOUT            Keep silenc\n         @MESSAGE INFO,OPER=SHOW,TYPE=JOBNAME,                         +\n               OBJECT=SSSOJOBN,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=JOBID,                           +\n               OBJECT=SSSOJOBI,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=DEST,                            +\n               OBJECT=SSSODEST,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=WRTRNAME,                        +\n               OBJECT=SSSOPGMN,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=OUTGRP,                          +\n               OBJECT=SSSOOGNM,TEXT='captured ....'\n         @MESSAGE INFO,OPER=SHOW,TYPE=DSN,                             +\n               OBJECT=SSSODSN,TEXT='captured ....'\nCHECK_SYSOUT   EQU *\n         CLC   WSSODSN,SSSODSN         Is it the same sysout ?\n*        BNE   REQUEUE_SYSOUT          No, requeue back to wait class\n*        TM    SSSOFLG5,SSSOGNVA       Is outgroup name provided ?\n*        BZ    REQUEUE_SYSOUT          No, requeue back to wait class\n*        CLC   WSSOGRNM,SSSOOGNM       Is it the same sysout ?\n         BE    SAME_SYSOUT             Yes, proceed\nREQUEUE_SYSOUT EQU *\n         MVI   SSSOFLG2,SSSOCTRL   Indicate FINAL CALL to JES2\n         MODESET MF=(E,LMODSUPZ)   Enter to SUPERVISOR MODE\n         LA    R1,WSSSOBP          POINT TO SSOB POINTER\n         IEFSSREQ ,                Go to JES for give back\n         MODESET MF=(E,LMODPRON)   Back to PROBLEM MODE\n         BAS   R14,INIT_REQUEUE\n         MVC   0(1,R2),WSCLASSL        Complete cmd text with class\n         MODESET MF=(E,LMODZERO)\n         LM    R0,R1,WSCMDPRM           Get cmd parameter list\n         SVC   34                       Schedule command\n         MODESET MF=(E,LMODNZER)\n         B     LOOP_SSREQ              Redo SSREQ\nSAME_SYSOUT    EQU *\n         CLI   SSSOPGMN,C' '           Is writer name there ?\n         BE    SYSOUT_NONAME           No, give the default name\n         CLI   SSSOPGMN,X'00'          Null ?\n         BE    SYSOUT_NONAME           Yes, give default name\n         MVC   WSSOWRTR,SSSOPGMN       Otherwise, take writer name\n         B     GOOD_EXIT               Exit\nSYSOUT_NONAME  EQU *\n         @WTO  CODE=185\n         MVC   WSSOWRTR,=CL8'NONAME'   Otherwise, take writer name\nGOOD_EXIT      EQU *\n         LA    R15,0                   Set RC = 0\n         B     EXIT                    Then, exit\n*\n*  +--------------------------------------+\n*  \u00a6                                      \u00a6\n*  \u00a6  Initialize SSOB                     \u00a6\n*  \u00a6                                      \u00a6\n*  +--------------------------------------+\n*\nINIT_SSOB      EQU *\n         XC    SSOBEGIN(SSOBLEN1),SSOBEGIN   Clear SSOB & SSSO\n         MVC   SSOBID,=CL4'SSOB'       Put Block ID (eyecatcher)\n         MVC   SSOBLEN,=AL2(SSOBHSIZ)  Specify SSOB length\n         MVC   SSSOLEN,=AL2(SSSOSIZE)  Specify SSSO length\n         LA    R4,SSSOBGN              Point to extension address\n         ST    R4,SSOBINDV              and keep it in header\n         OI    SSSOVER,SSSOCVER        Set as current version number\n         MVC   SSOBFUNC,=AL2(SSOBSOUT) Select SSI SYSOUT function\n         OI    SSSOFLG2,SSSOPSEE       Process sysout extension\n         OI    SSSOFLG1,SSSOSCLS       CLASSes are selection criterion\n         BR    R14\n*\n*  +--------------------------------------+\n*  \u00a6                                      \u00a6\n*  \u00a6  Initialize Requeue JES Command      \u00a6\n*  \u00a6                                      \u00a6\n*  +--------------------------------------+\n*\nINIT_REQUEUE   EQU *\n         MVI   WSCMDBUF,C' '\n         MVC   WSCMDBUF+1(L'WSCMDBUF-1),WSCMDBUF\n         MVC   WSCMDBUF+2(16),=CL16'$TOSjjjj,OUTGRP='\n         MVC   WSCMDBUF+5(1),SSSOJOBI       jobid 1st byte\n         MVC   WSCMDBUF+6(4),SSSOJOBI+4     jobid byte 5-8\n         LA    R2,WSCMDBUF+18           Target address\n         LA    R3,SSSOOGNM              Source address\n         LA    R4,L'SSSOOGNM            Length of source\nLOOP     EQU   *\n         CLI   0(R3),C' '               Is it blank ?\n         BE    SKIP                     Skip if so\n         CLI   0(R3),X'00'              Is it null ?\n         BE    SKIP                     Skip if so\n         CLI   0(R3),X'FF'              Is it FF ?\n         BE    SKIP                     Skip if so\n         MVC   0(1,R2),0(R3)            Copy character\n         LA    R2,1(R2)                 Next target\nSKIP     EQU   *\n         LA    R3,1(R3)                 Next source\n         BCT   R4,LOOP                  Iterate\n         MVC   0(3,R2),=C',Q='          Put next cmd text\n         LA    R2,3(R2)\n         BR    R14\n*\n*  +--------------------------------------+\n*  \u00a6                                      \u00a6\n*  \u00a6  Error and Normal Exit Routines      \u00a6\n*  \u00a6                                      \u00a6\n*  +--------------------------------------+\n*\nNO_OUTGROUP    EQU *\n         @WTO  CODE=184\n         LA    R15,4                Set RC = 4\n         B     SYSOUT_NONAME        Exit\nLOST_SYSOUT    EQU *\n         @WTO  CODE=186\n         LA    R15,8                Set RC = 8\n         B     EXIT                 Exit\nERROR_SSI      EQU *\n         @WTO  CODE=187\n         LA    R15,12               Set RC = 16\n         B     EXIT                 Exit\nERROR_SSOB     EQU *\n         @WTO  CODE=188\n         LA    R15,16               Set RC = 16\n         B     EXIT                 Exit\nEXIT     EQU   *\n         L     R1,WSSSOB               Address of SSOB pointer\n         ST    R1,WSSSOBP              Save pointer\n         OI    WSSSOBP,X'80'           Mark as the only ptr in the list\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         EJECT ,\n*\n*   +----------------------------------------+\n*   \u00a6  SSOB                                  \u00a6\n*   \u00a6      SSOB-header/                      \u00a6\n*   \u00a6                / SSSO                  \u00a6\n*   \u00a6                                        \u00a6\n*   +----------------------------------------+\n*\n         PRINT NOGEN\n         IEFSSOBH\n         ORG   ,\nSSOBGN   EQU   *\n         IEFSSSO SOEXT=YES\nSSSO_END EQU   *\n         IEFZB4D0\n*        IEFZB4D2\n         END   DERXDS\n./ ADD NAME=DERXIO   0100-01324-01324-1743-00670-00670-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERXIO  |\n*                     +---------+\n*                     Local External Writer Component to Support\n*                     CA-Dispatch and CA-XCOM Handshaking\n*\n*     Function -\n*            Output writer routine to copy sysout into flat dataset\n*            files and submit XCOMJOB.\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          None\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  DCB map (IHADCB) address\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  Main module base address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERXIO   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=ANY,                                              +\n               RENT=YES,                                               +\n               BREG=(R11,R12)\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Enable WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Enable WTX addressability\n         LOAD  EP=DERDCB\nBEGIN    EQU   *\n         XC    WSRCODE,WSRCODE    Clear RC\n         MVC   ADDR_IEFRDER,ADDR_LCLDS01  Backup LCLDS01 DCB pointer\n         EJECT ,\n*********************************************************************\n*\n*   ALLOCATE SYSOUT and FLATFILE Datasets\n*   -------------------------------------\n*\n*   (1)  Allocate sysout dataset as SYSOUT with DSN copied from\n*        SSOB and request is passed to subsystem named JES2.\n*\n*   (2)  Create XCOMJOB JCL which includes\n*          - Obtain system date and time\n*          - Construct flatfile DSN that describe Recipient-id\n*            (DESTid copied from SSOB), current system date and time,\n*            and Report-id (WTR-name from SSOB)\n*\n*   (3)  Allocate flatfile dataset as LCLDS01 with DSN copied\n*        from (2), Lrecl copied from SSOB, Blkzise 6233 and all\n*        other space parameters just estimated.\n*\n*   (4)  Check whether remote destination from is DISPATCH.  If so,\n*        prepare all DISPATCH page headers.\n*\n*   (5)  Return.\n*\n         DS    0H\nALLOC    EQU *\n         @EDITTOD FORMAT=BOTH\n         @WTO  CODE=157\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Allocate JES2FILE                                       \u00a6\n*  \u00a6      o  Type sysout                                       \u00a6\n*  \u00a6      o  Input                                             \u00a6\n*  \u00a6      o  Mapped by ARB & ARBP block in WTX                 \u00a6\n*  \u00a6      o  DD name taken from DCB                            \u00a6\n*  \u00a6                                                           \u00a6\n*  +-----------------------------------------------------------+\n*\n         L     R8,ADDR_JES2FILE       Access of sysout DCB\n         L     R7,DCBDCBE\n*        MVC   DCBLRECL,WSSOMLRL      Set max lrecl\n         MVC   DCBEEODA,=A(SPOOL_END) Prepare EOD exit routine\n         MVC   DCBESYNA,=A(SPOOL_SYN) Prepare SYN exit routine\n         @DYNAMIC ALLOCATE,           Prepare sysout SVC 99 parm       +\n               DSN=WSSODSN,           Copy DSN from SSSODSN            +\n               PREFIX=A,              The prefix is A                  +\n               GETDD=DCBDDNAM,        Copy DD into JES2FILE' DCB       +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               LOC=*                  Inline\n         LTR   R15,R15                Check RC\n         BZ    ALLOC_SO_OKEY\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         OI    WSEFLAGS,WSEFERRP      Remember this error\n         @MESSAGE ERROR,OPCODE=B,OPER=DYNALLOC,TYPE=ALLOC,             +\n               OBJECT=WSSODSN,RC=ARBERR,EXIT=ERROR_EXIT\nALLOC_SO_OKEY  EQU *\n         @DYNAMIC UPDATE,LOC=*,       Prepare sysout SVC 99 parm       +\n               PREFIX=D,              The prefix is D                  +\n               DD=DCBDDNAM,           Use DD name of JES2FILE          +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               DYNALLC=NO\n         @WTO  CODE=158\n         OI    WSSFLAGS,WSSFAJES      Remember JES2FILE allocated\n         CP    WSCOUNT,=P'999999'     Has maximum count reached ?\n         BL    ALLOC_GO               No, go ahead\n         ZAP   WSCOUNT,=PL1'0'        Yes, reset counter\nALLOC_GO EQU   *\n         OI    WSCOUNT+L'WSCOUNT-1,X'0F'\n         UNPK  WSJNUM,WSCOUNT         Mark jobname of XCnnnnnn\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Prepare Dataset Name for Output                         \u00a6\n*  \u00a6      o  Type flat file                                    \u00a6\n*  \u00a6      o  Name CADS.XDOM.Destid.Rptname.Date.Time           \u00a6\n*  \u00a6      o  Addressed by GPR 1                                \u00a6\n*  +-----------------------------------------------------------+\n*\n         @EDITDSN RPTNAME=WSSOWRTR,   From SSSOPGMN                    +\n               RCPID=WSSODEST,        From SSSODEST                    +\n               DSHLQ=CADS.XCOM,       Use this prefix                  +\n               DSN=WSFFDSN            And save here the result\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Prepare JCL for XCOM Job                                \u00a6\n*  \u00a6      o  Type batch job                                    \u00a6\n*  \u00a6      o  Name XCDestid                                     \u00a6\n*  \u00a6      o  Mapped by XCJOB in WTX                            \u00a6\n*  +-----------------------------------------------------------+\n*\n         TM    WSPFLAGS,WSPFOVER      Is form overriden ?\n         BZ    CHECK_XDISP\n         TM    WSOVFLGS,WSOFXKEP      DISP=KEEP requested ?\n         BO    XDISP_KEEP             Yes, make it work\n         B     XDISP_DELETE\nCHECK_XDISP    EQU *\n         TM    WSOFLAGS,WSOFXKEP      DISP=KEEP requested ?\n         BO    XDISP_KEEP             Yes, make it work\nXDISP_DELETE   EQU *\n         @XCOMJOB BUILD,                                               +\n               PREFIX=XC,                                              +\n               JOBPARM=WSXCJPRM,                                       +\n               LOC=*,DSN=WSFFDSN,                                      +\n               RPTNAME=WSSOWRTR,      From SSSOPGMN                    +\n               RCPID=WSSODEST,        From SSSODEST                    +\n               DISP='(OLD,DELETE)',                                    +\n               JOBNUM=WSJNUM\n         B     EDIT_HEADER\nXDISP_KEEP     EQU *\n         @XCOMJOB BUILD,                                               +\n               PREFIX=XC,                                              +\n               JOBPARM=WSXCJPRM,                                       +\n               LOC=*,DSN=WSFFDSN,                                      +\n               RPTNAME=WSSOWRTR,        From SSSOPGMN                  +\n               RCPID=WSSODEST,          From SSSODEST                  +\n               DISP='(OLD,KEEP)',                                      +\n               JOBNUM=WSJNUM\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Prepare Header for Dispatch Format Only                 \u00a6\n*  \u00a6      o  First page                                        \u00a6\n*  \u00a6          Header line 1 mapped by PH1 in WTX               \u00a6\n*  \u00a6          Header line 2 mapped by PH2 in WTX               \u00a6\n*  \u00a6          Header line 3 mapped by PH3 in WTX               \u00a6\n*  \u00a6      o  Subsequent Pages                                  \u00a6\n*  \u00a6          Header line 3 mapped by PH3 in WTX               \u00a6\n*  +-----------------------------------------------------------+\n*\nEDIT_HEADER    EQU *\n         @EDITHDR UPDATE,LOC=*,                                        +\n               RCPID=WSSODEST,          From SSSODEST                  +\n               RPTNAME=WSSOWRTR,        From SSSOPGMN                  +\n               DATE=INTERNAL,                                          +\n               TIME=INTERNAL,                                          +\n               PREFIX=PH\n         AP    WSCOUNT,=PL1'1'      Increment counter\n         ZAP   WSPGNUM,=PL1'0'      Initialize page number\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Open JES2FILE                                           \u00a6\n*  \u00a6      o  Type J                                            \u00a6\n*  \u00a6          Must in AMODE 34                                 \u00a6\n*  \u00a6      o  DCB pointed by ADD_JES2FILE                       \u00a6\n*  \u00a6          It prepared by caller                            \u00a6\n*  +-----------------------------------------------------------+\n*\n         L     R8,ADDR_JES2FILE       Establish DCB addressability\nOPEN_SO  EQU   *\n         OPEN  ((R8),(INPUT)),MODE=31,   Open DCB of sysout            +\n               MF=(E,LOPEN_JES2FILE)\n         TM    DCBOFLGS,DCBOFOPN         Is it work ?\n         BNZ   CHECK_MRECL               Yes, continue check max LRECL\n         A     R15,WSRCODE               Else, accumulate RC\n         ST    R15,WSRCODE\n         OI    WSEFLAGS,WSEFERRP         Remember this error\n         @MESSAGE ERROR,OPCODE=B,RC=(R15),                             +\n               OPER=IO,TYPE=OPEN,OBJECT=WSSODSN,                       +\n               EXIT=ERROR_EXIT\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Check JES2FILE Record Length and Format                 \u00a6\n*  \u00a6                                                           \u00a6\n*  \u00a6   Max LRECL                                               \u00a6\n*  \u00a6      o  If DCBLRECL > SSSOMLRL, use DCBLRECL              \u00a6\n*  \u00a6      o  If DCBLRECL < SSSOMLRL,                           \u00a6\n*  \u00a6           if not 0, use DCBLRECL                          \u00a6\n*  \u00a6           else, use SSSOMLRL                              \u00a6\n*  \u00a6                                                           \u00a6\n*  \u00a6   RECFM                                                   \u00a6\n*  \u00a6      o  Possibilities                                     \u00a6\n*  \u00a6          ASA - FBA, VBA                                   \u00a6\n*  \u00a6          MCC - FBM, VBM                                   \u00a6\n*  +-----------------------------------------------------------+\n*\nCHECK_MRECL    EQU *\n         LH    R2,DCBLRECL          Get lrecl\n         LTR   R2,R2                Is it 0 ?\n         BZ    CHECK_RECFM          Ignore if so\n         CH    R2,=H'6200'          More than 6200 ?\n         BNL   CHECK_RECFM          Ignore if so\n         MVC   WSSOMLRL,DCBLRECL    Take it if a good number\n         CH    R2,=H'121'           Less than 121  ?\n         BNL   CHECK_RECFM          Ignore if not\n         MVC   WSSOMLRL,=H'255'     Can not lower than 255 (safeguard)\nCHECK_RECFM    EQU *\n         @WTO  CODE=159\n         TM    DCBRECFM,DCBRECCA    Is it ASA type sysout ?\n         BO    ASA_FILE             Yes, handle it\n         TM    DCBRECFM,DCBRECCM    Is it MCC type sysout ?\n         BO    MCC_FILE             Yes, handle it\n         TM    WSOFLAGS,WSOFTRAC\n         BZ    WRONG_FORMAT\n         @WTO  CODE=130\n         B     WRONG_FORMAT\nASA_FILE EQU   *\n         TM    WSOFLAGS,WSOFTRAC\n         BZ    ASA_FILE1\n         @WTO  CODE=131\nASA_FILE1 EQU  *\n         MVI   WSCC,WSCC_ASA        Yes, set indicator\n         B     ALLOC_FF             Continue\nMCC_FILE EQU   *\n         TM    WSOFLAGS,WSOFTRAC\n         BZ    MCC_FILE1\n         @WTO  CODE=132\nMCC_FILE1 EQU  *\n         MVI   WSCC,WSCC_MCC        Yes, set indicator\n         B     ALLOC_FF             Continue\nWRONG_FORMAT   EQU *\n         @WTO  CODE=133\n         OI    WSPFLAGS,WSPFOVER      Assume form has been overriden\n         MVI   WSOVFORM,WSFFS390       using S/390 standard format ?\n         @WTO  CODE=134\nALLOC_FF EQU *\n         LH    R2,WSSOMLRL            Get LRECL from SSOB\n         CH    R2,=H'6200'\n         BH    ALLOC_FF_HI\n         CH    R2,=H'133'\n         BNL   ALLOC_FF_DO\nALLOC_FF_LO    EQU   *\n         MVC   WSSOMLRL,=H'133'       Set max lrel is 149\n         B     ALLOC_FF_DO\nALLOC_FF_HI    EQU   *\n         TM    WSPFLAGS,WSPFFORC      Is it forced to use simple lrl ?\n         BO    ALLOC_FF_FORCE         Yes, handle it\n         @WTO  CODE=176,TRACE=ALWAYS\n         OI    WSPFLAGS,WSPFOVER      Force override form\n         MVI   WSOVFORM,WSFFS390       to S/390 standard format\n         LH    R3,=H'32670'           Set max blksize (32670)\n         LH    R2,=H'32666'           Set max lrecl = blksize - 4\n         CH    R2,WSSOMLRL            Compare with its original\n         BH    ALLOC_FF_EXEC          Agree if larger\n         STH   R2,WSSOMLRL            Otherwise, force this value\n         B     ALLOC_FF_EXEC          Then, proceed\nALLOC_FF_FORCE EQU   *\n         OI    WSOFLAGS,WSOFFORC      Indicate it is in force mode\n         LH    R3,=H'13030'           Set max blksize (13030)\n         LH    R2,=H'250'             Set max lrecl = blksize - 4\n         CH    R2,WSSOMLRL            Compare with its original\n         BL    ALLOC_FF_EXEC          Agree if shorter\n         LH    R2,WSSOMLRL            Otherwise, use JES info MLRL\n         B     ALLOC_FF_EXEC          Then, proceed\n*\n*  +-----------------------------------------------------------+\n*  \u00a6   Allocate LCLDS01                                        \u00a6\n*  \u00a6      o  Type flat file                                    \u00a6\n*  \u00a6      o  Output                                            \u00a6\n*  \u00a6      o  Mapped by FRB & FRBP block in WTX                 \u00a6\n*  \u00a6      o  Possibilities                                     \u00a6\n*  \u00a6         -  Form Dispatch or Windows - VB                  \u00a6\n*  \u00a6         -  Form standard S/390 - VBA or VBM               \u00a6\n*  \u00a6      o  DDname 'LCLDS01'                                  \u00a6\n*  \u00a6                                                           \u00a6\n*  +-----------------------------------------------------------+\n*\nALLOC_FF_DO    EQU *\n         LH    R2,WSSOMLRL            Get modified LRECL from SSOB\n         LA    R2,16(,R2)             Increase for RDW\n         LH    R3,=H'6233'                Normal blocksize\nALLOC_FF_EXEC  EQU *\n         L     R8,ADDR_LCLDS01        Access DCB of LCLDS01\n         @DYNAMIC UPDATE,             Update flat file SVC 99 parm     +\n               DSN=WSFFDSN,           Use edited DSN                   +\n               DD='LCLDS01',          DD name is LCLDS01               +\n               PREFIX=F,              The prefix is F                  +\n               LRECL=(R2),            Set LRECL                        +\n               BLKSIZE=(R3),          Set BLKSIZE                      +\n               RECFM=VB,              Use VB format                    +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               LOC=*                  Inline\n         @MESSAGE INFO,OPCODE=B,OPER=SHOW,TYPE=SVC99DSN,               +\n               OBJECT=FRBDSN,TEXT='from internal edition'\n         MVC   WSBYTE,WSFFLAGS\n         TM    WSPFLAGS,WSPFOVER      Is form overriden ?\n         BZ    ALLOC_FF_STD           No, just take normal way\n         CLI   WSOVFORM,WSFFS390      Is it S/390 standard format ?\n         BE    ALLOC_FF_S390          Yes, process it\n         B     ALLOC_FF_GO            No, passthru\nALLOC_FF_STD EQU *\n         CLI   WSFFLAGS,WSFFS390      Is it S/390 standard format ?\n         BE    ALLOC_FF_S390          Yes, process it\nALLOC_FF_GO    EQU *\n         @DYNAMIC ALLOCATE,           Update flat file SVC 99 parm     +\n               PREFIX=F,              The prefix is F                  +\n               LOC=*                  Inline\nALLOC_RC EQU   *\n         LTR   R15,R15\n         BZ    OPEN_FF\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         OI    WSEFLAGS,WSEFERRP      Remember this error\n         @MESSAGE ERROR,OPCODE=B,OPER=DYNALLOC,TYPE=ALLOC,             +\n               OBJECT=WSFFDSN,RC=FRBERR,EXIT=ERROR_EXIT\n         B     ERROR_EXIT\nOPEN_FF  EQU   *\n         @WTO  CODE=160\n         OI    WSSFLAGS,WSSFAFFL      Remember LCLDS01 allocated\n         L     R7,DCBDCBE\n         MVC   DCBESYNA,=A(SPOOL_SYN) Prepare SYN exit routine\n         OPEN  ((R8),(OUTPUT)),MODE=31,    Open DCB of LCLDS01         +\n               MF=(E,LOPEN_LCLDS01)   !!! Remember - DATA MODE\n         TM    DCBOFLGS,DCBOFOPN      Is it work ?\n         BNZ   PROCESS_SPOOL\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         OI    WSEFLAGS,WSEFERRP      Remember this error\n         @MESSAGE ERROR,OPCODE=B,RC=(R15),                             +\n               OPER=IO,TYPE=OPEN,OBJECT=WSFFDSN,                       +\n               EXIT=ERROR_EXIT\nALLOC_FF_S390 EQU *\n         MVC   WSBYTE,WSOVFORM\n         L     R8,ADDR_LCLDS02      Switch to use LCLDS02 (locate mode)\n         ST    R8,ADDR_LCLDS01\n         @DYNAMIC UPDATE,             Update flat file SVC 99 parm     +\n               DD='LCLDS02',          DD name is LCLDS01               +\n               PREFIX=F,              The prefix is F                  +\n               LOC=*                  Inline\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BE    ALLOC_FF_S390_ASA    Ya, perform it\n         CLI   WSCC,WSCC_MCC        Is it MCC formatted sysout ?\n         BE    ALLOC_FF_S390_MCC    Yes, do it\n         B     ALLOC_FF_GO          Otherwise, forget them both\nALLOC_FF_S390_ASA EQU *\n         @DYNAMIC ALLOCATE,           Update flat file SVC 99 parm     +\n               PREFIX=F,              The prefix is F                  +\n               RECFM=VBA,             Indicate ASA bieng used          +\n               LOC=*                  Inline\n         B     ALLOC_RC\nALLOC_FF_S390_MCC EQU *\n         @DYNAMIC ALLOCATE,           Update flat file SVC 99 parm     +\n               PREFIX=F,              The prefix is F                  +\n               RECFM=VBM,             Indicate MCC bieng used          +\n               LOC=*                  Inline\n         B     ALLOC_RC\n         EJECT ,\n*\n*  +--------------------------------------------------------------+\n*  |  Process spoolfile (sysout) & flatfile (dataset)             |\n*  |  (1)  Initialize flat file w/ 3 records CADS-type header.    |\n*  |  (2)  Sysout is to be read into memory, record by record.    |\n*  |       Check CC in 1st byte of each record.                   |\n*  |  (3)  Write each spoolfile-record into flatfile record w/o   |\n*  |       CC with the following rule:                            |\n*  |         If CC = page-break then insert 3rd CADS-type header  |\n*  |         record into flatfile.                                |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nPROCESS_SPOOL  EQU *\n         NI    WSEFLAGS,X'FF'-WSEFIOER   Assume no I/O error\n         MVC   WSLRECL,DCBLRECL\n         @XCOMJOB EXEC,                                                +\n               PREFIX=XC,                                              +\n               PCDRIVE=WSPCDRVE,                                       +\n               EXTTYPE=WSBYTE,                                         +\n               LOC=*\n         L     R15,WSMODWTR         Access WTR module\n         TM    WSOFLAGS,WSOFFORC    Is it forced to use simple lrl ?\n         BZ    CALL_WRITER          No, just call writer\n         L     R15,WSMODWTB         Yes, use WTB module intsead\nCALL_WRITER    EQU *\n         LR    R1,R10               Address of WSA\n         BASR  R14,R15              Call WTR\n         NI    WSOFLAGS,X'FF'-WSOFFORC Clear force indicator\n         LTR   R15,R15              Check RC\n         BZ    SPOOL_END            Just end if no error\n         OI    WSEFLAGS,WSEFIOER    Remember the error\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         B     SPOOL_END\n*\nSPOOL_SYN EQU *\n*        PR   ,                     Unstack status\n         @WTO  CODE=148\nSPOOL_END EQU  *\nCLOSE_SO EQU   *\n         @WTO  CODE=161\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         CLOSE ((R8)),MODE=31,MF=(E,LCLOSE_JES2FILE) Close sysout\n         LTR   R15,R15\n         BZ    FREE_SO\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Close error for file JES2FILE'\nFREE_SO  EQU   *\n         @DYNAMIC FREE,               Prepare sysout SVC 99 parm       +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               PREFIX=D,              The prefix is D                  +\n               TOLFAIL=1080,          Tolerate 1080 error              +\n               LOC=*                  Inline\n         LTR   R15,R15\n         BZ    FREE_SO_OKEY\n         TM    WSSFLAGS,WSSFAJES      Is JES2FILE actually allocated\n         BZ    CLOSE_FF               No, just skip\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         @WTO  CODE=163\n         OI    WSEFLAGS,WSEFERRP      Remember this error\n         @MESSAGE ERROR,OPCODE=B,OPER=DYNALLOC,TYPE=DEALLOC,           +\n               OBJECT=WSSODSN,RC=DRBERR,EXIT=CLOSE_FF\n         B     CLOSE_FF\nFREE_SO_OKEY   EQU *\n         NI    WSSFLAGS,X'FF'-WSSFAJES Turn indicator off\nCLOSE_FF EQU   *\n         @WTO  CODE=162\n         L     R8,ADDR_LCLDS01        Access DCB of LCLDS01\n         TM    DCBOFLGS,DCBOFOPN      Is it open ?\n         BZ    FREE_FF                No, just leave it\n         CLOSE ((R8),FREE),MODE=31,MF=(E,LCLOSE_LCLDS01) Close flatDS\n         LTR   R15,R15\n         BZ    FREE_FF\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Close error for file LCLDS01'\nFREE_FF  EQU   *\n         @DYNAMIC FREE,               Prepare flatDS SVC 99 parm       +\n               ERRMSG=WTO,            Display error msg using WTO      +\n               PREFIX=U,              The prefix is U                  +\n               TOLFAIL=1080,          Tolerate 1080 error              +\n               LOC=*                  Inline\n         LTR   R15,R15\n         BZ    FREE_FF_OKEY           Just skip if RC 0\n         TM    WSSFLAGS,WSSFAFFL      Is LCLDS01 actually allocated\n         BZ    SUBMIT_XCOM            No, just skip\n         A     R15,WSRCODE            Accumulate RC\n         ST    R15,WSRCODE\n         OI    WSEFLAGS,WSEFERRP      Remember this error\n         @MESSAGE ERROR,OPCODE=B,OPER=DYNALLOC,TYPE=DEALLOC,           +\n               OBJECT=WSFFDSN,RC=URBERR,EXIT=SUBMIT_XCOM\n         B     SUBMIT_XCOM            Submit XCOM job\nFREE_FF_OKEY   EQU *\n         NI    WSSFLAGS,X'FF'-WSSFAFFL Turn indicator off\n         B     SUBMIT_XCOM            Submit XCOM job\n*\n* XCOM INTERFACE\n* -----------------------\n*        TM    WSOFLAGS,WSOFXCOM   Is XCOM being called internally ?\n*        BZ    SUBMIT_XCOM\n*\nSUBMIT_XCOM    EQU *\n         TM    WSEFLAGS,WSEFIOER   Any I/O error\n         BNZ   ERROR_EXIT          Yes, exit\n         LA    R2,XCJCL            Point to XCOM JCL\n         LA    R3,XCJCARDS-2       Number of cards - 2\n         L     R5,ADDR_INTRDR      Address of INTRDR DCB\nSEND_JCL EQU   *\n         PUT   (R5),(R2)           Put a card into INTRDR\n         CLC   =C'/*EOF',0(R2)     Is EOF sign reached ?\n         BE    END_SUBMIT          Yes, finish submission\n         LA    R2,80(,R2)          Bump to next card\n         BCT   R3,SEND_JCL         Iterate\n         MVC   0(8,R2),=CL8'/*EOF'   Make new EOF sign\n         MVC   8(72,R2),7(R2)      Roll blank to clear the card\nEND_SUBMIT     EQU *\n         MVC   XCGROUP(8),=CL8'GROUP='\n         @WTO  CODE=164\n         B     EXIT\n         LTORG ,\n         DS    0D\n*\n* +--------------------------------+\n* | EXIT Procedure                 |\n* | Due to everything done, then   |\n* | return to DERXDI               |\n* +--------------------------------+\n*\nERROR_EXIT     EQU *\n         @WTO  CODE=147\nEXIT     EQU   *\n         L     R8,ADDR_LCLDS01      Map LCLDS01 DCB\n         TM    DCBOFLGS,DCBOFOPN    Is it open ?\n         BZ    EXIT01               No, just leave it\n         CLOSE ((R8),FREE),MODE=31,MF=(E,LCLOSE_LCLDS01) Close flatDS\n         LTR   R15,R15\n         BZ    EXIT01\n         A     R15,WSRCODE            Add to saved RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Close error 2x for file LCLDS01'\nEXIT01   EQU   *\n         TM    WSSFLAGS,WSSFAFFL    Is LCLDS01 still allocated\n         BZ    EXIT02               No, just skip\n         @DYNAMIC FREE,               Prepare sysout SVC 99 parm       +\n               PREFIX=U,              The prefix is D                  +\n               TOLFAIL=1080,          Tolerate 1080 error              +\n               LOC=*                  Inline\n         LTR   R15,R15\n         BZ    EXIT01A\n         A     R15,WSRCODE            Add to saved RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Dealloc error 2x for file LCLDS01'\n         B     EXIT02\nEXIT01A  EQU   *\n         NI    WSSFLAGS,X'FF'-WSSFAFFL  Turn indicator off\nEXIT02   EQU   *\n         L     R8,ADDR_JES2FILE     Map JES2FILE DCB\n         TM    DCBOFLGS,DCBOFOPN    Is it open ?\n         BZ    EXIT03               No, just leave it\n         CLOSE ((R8),FREE),MODE=31,MF=(E,LCLOSE_JES2FILE) Close sysout\n         LTR   R15,R15\n         BZ    EXIT03\n         A     R15,WSRCODE            Add to saved RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Close error 2x for file JES2FILE'\nEXIT03   EQU   *\n         TM    WSSFLAGS,WSSFAJES    Is JES2FILE still allocated\n         BZ    EXIT04               No, just skip\n         @DYNAMIC FREE,               Prepare sysout SVC 99 parm       +\n               PREFIX=D,              The prefix is D                  +\n               TOLFAIL=1080,          Tolerate 1080 error              +\n               LOC=*                  Inline\n         LTR   R15,R15\n         BZ    EXIT03A\n         A     R15,WSRCODE            Add to saved RC\n         ST    R15,WSRCODE\n         WTO   'DERXIO999E Dealloc error 2x for file JES2FILE'\n         B     EXIT04\nEXIT03A  EQU   *\n         NI    WSSFLAGS,X'FF'-WSSFAJES  Turn indicator off\nEXIT04   EQU   *\n*        NI    WSPFLAGS,X'FF'-WSPFOVER  Turn override bit off\n         TM    WSEFLAGS,WSEFERRP    Any serious error ?\n         BZ    EXIT05               No, just exit\n         LA    R15,8                Make RC = 8\n         A     R15,WSRCODE            Add to saved RC\n         ST    R15,WSRCODE\nEXIT05   EQU   *\n         MVC   ADDR_LCLDS01,ADDR_IEFRDER  Restore LCLDS01 DCB pointer\n         B     EXIT06\n         LA    R2,WSASIZE(,R1)\n         PGSER R,FREE,A=(R1),EA=(R2),ECB=0,RELEASE=N\n         LM    R1,R2,WSMODWTX\n         LA    R2,0(R1,R2)\n         PGSER R,FREE,A=(R1),EA=(R2),ECB=0,RELEASE=N\n         LM    R1,R2,WSMODDCB\n         LA    R2,0(R1,R2)\n         PGSER R,FREE,A=(R1),EA=(R2),ECB=0,RELEASE=N\nEXIT06   EQU   *\n         L     R15,WSRCODE          Set RC\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n         END   DERXIO\n./ ADD NAME=DERXSF   0100-01324-01324-1743-00214-00214-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERXSF  |\n*                     +---------+\n*                     Local External Writer Component to Support\n*                     CA-Dispatch and CA-XCOM Handshaking\n*\n*     Function -\n*            Output writer routine to copy sysout into flat dataset\n*            files and submit XCOMJOB.\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          None\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R7   -->  Work registers\n*          R8      -->  DCB map (IHADCB) address\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  SSSO block address\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERXSF   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=24,                                               +\n               RENT=YES,                                               +\n               BREG=R12\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING SSOB,R11           Establish SSOB structure map\n*\n*        LR    R10,R1             Enable WSA addressability\n         LOAD  EP=DERWSA\n         LR    R10,R0             Enable WSA addressability\n         L     R11,WSSSOB         Enable WSA addressability\n         L     R9,WSMODWTX        Enable WTX addressability\n         EJECT ,\n*********************************************************************\n*\n*   ALLOCATE SYSOUT and FLATFILE Datasets\n*   -------------------------------------\n*\n*   (1)  Allocate sysout dataset as SYSOUT with DSN copied from\n*        SSOB and request is passed to subsystem named JES2.\n*\n*   (2)  Create XCOMJOB JCL which includes\n*          - Obtain system date and time\n*          - Construct flatfile DSN that describe Recipient-id\n*            (DESTid copied from SSOB), current system date and time,\n*            and Report-id (WTR-name from SSOB)\n*\n*   (3)  Allocate flatfile dataset as LCLDS01 with DSN copied\n*        from (2), Lrecl copied from SSOB, Blkzise 6233 and all\n*        other space parameters just estimated.\n*\n*   (4)  Check whether remote destination from is DISPATCH.  If so,\n*        prepare all DISPATCH page headers.\n*\n*   (5)  Return.\n*\n         DS    0H\nALLOC    EQU *\n         @EDITTOD\n         CP    WSCOUNT,=P'999999'     Has maximum count reached ?\n         BL    GOHEAD                 No, go ahead\n         ZAP   WSCOUNT,=PL1'0'        Yes, reset counter\nGOHEAD   AP    WSCOUNT,=PL1'1'        Increment counter\n         OI    WSCOUNT+L'WSCOUNT-1,X'0F'\n         UNPK  WSJNUM,WSCOUNT         Mark jobname of XCnnnnnn\n         @XCOMJOB EXEC,                                                +\n               PREFIX=XC,                                              +\n               LOC=*,DSN=WSSODSN,                                      +\n               RPTNAME=WSSOWRTR,        From SSSOPGMN                  +\n               RCPID=WSSODEST,          From SSSODEST                  +\n               DISP='(OLD,KEEP)',                                      +\n               JOBNUM=WSJNUM\nCONT     EQU   *\n         AP    WSCOUNT,=PL1'1'      Increment counter\n         ZAP   WSPGNUM,=PL1'0'      Initialize page number\n*\n* XCOM INTERFACE\n* -----------------------\n*        TM    WSOFLAGS,WSOFXCOM   Is XCOM being called internally ?\n*        BZ    SUBMIT_XCOM\n*\nSUBMIT_XCOM    EQU *\n         LA    R2,XCJCL            Point to XCOM JCL\n         LA    R3,XCJCARDS         Number of cards\n         L     R5,ADDR_INTRDR      Address of INTRDR DCB\n         TM    WSOFLAGS,WSOFTRAC   Is trace on ?\n         BO    SUBMIT_TRACE        No, just go\nSEND_JCL EQU   *\n         PUT   (R5),(R2)           Put a card into INTRDR\n         CLC   =C'/*EOF',0(R2)     Is EOF sign reached ?\n         BE    END_SUBMIT          Yes, finish submission\n         LA    R2,80(,R2)          Bump to next card\n         BCT   R3,SEND_JCL         Iterate\n         B     END_SUBMIT\nSUBMIT_TRACE   EQU *\n         MVC   WSWORK(2),=AL2(72)\n         MVC   WSWORK+2(12),=C'XDI Trace ='\nSEND_JCL_TRACE EQU *\n         PUT   (R5),(R2)           Put a card into INTRDR\n         MVC   WSWORK+14(60),0(R2)\n         WTO   TEXT=WSWORK,MF=(E,LWTO)\n         CLC   =C'/*EOF',0(R2)     Is EOF sign reached ?\n         BE    END_SUBMIT          Yes, finish submission\n         LA    R2,80(,R2)          Bump to next card\n         BCT   R3,SEND_JCL_TRACE   Iterate\nEND_SUBMIT     EQU *\n         MVC   XCGROUP(8),=CL8'GROUP='\n*\n* +--------------------------------+\n* | EXIT Procedure                 |\n* | Due to everything done, then   |\n* | return to DERXDI               |\n* +--------------------------------+\n*\nEXIT     EQU   *\n         XR    R15,R15             Set RC = 0\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n         END   DERXSF\n./ ADD NAME=DERXWR   0100-01324-01324-1743-00525-00525-00000-DERU-S\n**********************************************************************\n*\n*                     +---------+\n*     Module Name  -  | DERXWR  |\n*                     +---------+\n*                     Local External Writer Component to Support\n*                     CA-Dispatch and CA-XCOM Handshaking\n*\n*     Function -\n*            Output writer routine to copy sysout into flat dataset\n*            files and submit XCOMJOB.\n*\n*     Operating Environment -\n*        Type              MVS System Program\n*        Min. Auth.        Supervisor state\n*        Dsp.unit mode     Task\n*        AMODE             24-bit or 31-bit\n*        XM                PASN=HASN=SASN\n*        ASC mode          Primary\n*        Interrupt status  Enabled for I/O and Ext. interrupts\n*        Locks             No locks held\n*        Control Parm      The SSOB and SSSO control blocks can\n*                          reside in storage above 16 megabytes.\n*        Recovery          Program should provide an ESTAE-type\n*                          recovery environment. See MVS/ESA SP V5\n*                          Auth Assembler Services Guide for more info\n*                          an ESTAE-type recovery environment.\n*\n*\n*     Syntax -\n*          None\n*\n*     Operation -\n*\n*\n*     Register Usage -\n*          R0-R1   -->  System interface\n*          R2-R6   -->  Work registers\n*          R7      -->  DCB map (IHADCB) address of SYSOUT\n*          R8      -->  DCB map (IHADCB) address of LCLDS01\n*          R9      -->  Module extension base address\n*          R10     -->  WSA (working storage area) address\n*          R11     -->  Flat File record map\n*          R12     -->  Main module base address\n*          R13     -->  Conventional savearea\n*          R14     -->  BAS or BASR return address\n*          R15     -->  Return code\n*\n*     Author -\n*          Name     :  Deru Sudibyo\n*                      Technical Consultant\n*                      Computer Associates\n*                      Indonesia Office\n*                      Wisma BNI-46 34th floor, BNI-46 City\n*                      Jl. Jend. Sudirman, Kav 1, Jakarta Pusat\n*          Copyright:  (C)1998 Deru Sudibyo\n*\n*     Disclaimer -\n*         This module is developed as a personal support, and is\n*         not a part of CA support matterials.  The purpose is as\n*         a temporary solution or even just a sample.  Therefor,\n*         further modifications and maintenance are client's\n*         responsibilities.\n*\n*     Modification Log -\n*     +--------+------------+--------+---------------------------+\n*     | Date   | Engineer   | V.R.L. | Description               |\n*     +--------+------------+--------+---------------------------+\n*     |98/02/12| Deru S.    | 1.0.0. | First development         |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     |        |            |        |                           |\n*     +--------+------------+--------+---------------------------+\n*\n*\n         EJECT ,\nDERXWR   @PROLOG ESA=390,                                              +\n               AMODE=31,                                               +\n               RMODE=24,                                               +\n               RENT=YES,                                               +\n               BREG=R12\n*\n         USING DCBE,R7            Establish DCBE structure map\n         USING IHADCB,R8          Establish DCB structure map\n         USING DERWTX,R9          Establish Module extension logic map\n         USING WSA,R10            Establish WSA structure map\n         USING FFRECMAP,R11       Establish Flat file record map\n*\n*        LR    R10,R1             Enable WSA map\n*        L     R9,WSMODWTX        Enable WTX map\n*\n         LOAD  EP=DERWSA\n         LR    R10,R0             Enable WSA addressability\n         LOAD  EP=DERWTX\n         LR    R9,R0              Enable WTX addressability\n         LOAD  EP=DERDCB\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         L     R7,DCBDCBE\n         CLC   =C'DCBE',0(R7)\n         BE    INSTALL_EODA\n         WTO   'DER999999E DCBE Lost before I/O process begun...!!!'\n         B     EXIT\nINSTALL_EODA   EQU *\n         MVC   DCBEODA,=AL3(SPOOL_END)\n         MVC   DCBSYNA,=AL3(SPOOL_SYN)\n         MVC   DCBEEODA,=A(SPOOL_END)\n         MVC   DCBESYNA,=A(SPOOL_SYN)\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS01\n         L     R7,DCBDCBE\n         MVC   DCBSYNA,=AL3(SPOOL_SYN)\n         MVC   DCBESYNA,=A(SPOOL_SYN)\n         L     R11,WSIOBUF          Record buffer\n         XC    FFRRDW,FFRRDW\n         EJECT ,\n*\n*  +--------------------------------------------------------------+\n*  |  Process spoolfile (sysout) & flatfile (dataset)             |\n*  |  (1)  Initialize flat file w/ 3 records CADS-type header.    |\n*  |  (2)  Sysout is to be read into memory, record by record.    |\n*  |       Check CC in 1st byte of each record.                   |\n*  |  (3)  Write each spoolfile-record into flatfile record w/o   |\n*  |       CC with the following rule:                            |\n*  |         If CC = page-break then insert 3rd CADS-type header  |\n*  |         record into flatfile.                                |\n*  +--------------------------------------------------------------+\n*\n         DS    0H\nPROCESS_SPOOL  EQU *\n         @WTO  CODE=177\n         L     $SYSOUT,ADDR_JES2FILE Access DCB of JES2FILE\n         L     $FLATDS,ADDR_LCLDS01 Access DCB of LCLDS01\n         TM    WSPFLAGS,WSPFOVER    Is form overriden ?\n         BZ    PROCESS_STD          No, just take normal way\n         CLI   WSOVFORM,WSFFS390    Is it S/390 standard format ?\n         BE    PROCESS_S390         Yes, process it\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BNE   PROCESS_MCC          No, it should MCC format, handle it\n         CLI   WSOVFORM,WSFFDISP    Is it Dispatch format ?\n         BE    ASA_DISPATCH         Yes, process it\n         CLI   WSOVFORM,WSFFWIND    Is it Windows format ?\n         BE    ASA_WINDOWS          Yes, process it\n         B     PROCESS_S390         Otherwise, assume standard\nPROCESS_STD    EQU *\n         CLI   WSFFLAGS,WSFFS390    Is it S/390 format ?\n         BE    PROCESS_S390         Yes, process it\n         CLI   WSCC,WSCC_ASA        Is it ASA formatted sysout ?\n         BNE   PROCESS_MCC          No, it should MCC format, handle it\n         CLI   WSFFLAGS,WSFFDISP    Is it Dispatch format ?\n         BE    ASA_DISPATCH         Yes, process it\n         CLI   WSFFLAGS,WSFFWIND    Is it Windows format ?\n         BE    ASA_WINDOWS          Yes, process it\n         B     PROCESS_S390         Otherwise, assume standard\n*\nASA_DISPATCH   EQU *\n         @WTO  CODE=178\n         BAS   R6,DSP_HEADER       Build header\nASA_DSP_READ   EQU *\n         GET   ($SYSOUT)  JES2FILE  Load sysout record\n         BAS   R14,CALC_I_LRECL     Calculate lrecl & setup RDW\n         LA    R5,ASA_DSP_NEWPAGE   Return address if true\n         BAS   R6,ASA_TEST_CHANNEL\n         BAS   R6,ASA_TEST         Check all others\n         B     ASA_DSP_READ         Interate\nASA_DSP_NEWPAGE EQU *\n         BAS   R6,DSP_PAGE_HEADER Write page header\n         BAS   R6,ASA_SPACE1       Write 1st line record\n         B     ASA_DSP_READ         Interate\nASA_WINDOWS    EQU *\n         @WTO  CODE=179\nASA_WIN_READ   EQU *\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         BAS   R14,CALC_I_LRECL     Calculate lrecl & setup RDW\n         LA    R5,ASA_WIN_NEWPAGE\n         BAS   R6,ASA_TEST_CHANNEL\n         BAS   R6,ASA_TEST         Check all others\n         B     ASA_WIN_READ         Interate\nASA_WIN_NEWPAGE EQU *\n         MVI   FFRDATA,X'0C'        Put page-break sign\n         BAS   R14,CALC_O_LRECL     Calculate output LRECL\n         EX    R2,ASA_WIN_REC1\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         B     ASA_WIN_READ         Interate\nASA_WIN_REC1   MVC FFRDATA+1(*-*),0(R3) Move data from sysout buffer\nASA_TEST EQU   *\n         CLI   0(R1),$ASA_SP1       Is it space 1 line ?\n         BE    ASA_SPACE1           Yes, handle it\n         CLI   0(R1),$ASA_SP2       Is it space 2 line ?\n         BE    ASA_SPACE2           Yes, handle it\n         CLI   0(R1),$ASA_SP3       Is it space 3 line ?\n         BE    ASA_SPACE3           Yes, handle it\n*        CLI   0(R1),$ASA_SP0       Is it suppress line ?\n*        BER   R6                   Yes, ignore it\n         BR    R6                   Interate\nASA_SPACE1     EQU *\n         BAS   R14,CALC_O_LRECL     Calculate output LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Interate\nMOVE_FFREC     MVC FFRDATA(*-*),0(R3) Move data from sysout buffer\nASA_SPACE2     EQU *\n         LA    R4,1                 Do 1 x iteration\nASA_SPACE_LOOP EQU *\n         MVC   FFRECLEN,=H'5'       This line is 1 byte space\n         MVC   FFRDATA(8),=CL5' '\n         PUT   ($FLATDS),FFREC LCLDS01 Store it into output file\n         BCT   R4,ASA_SPACE_LOOP    Iterate\n         B     ASA_SPACE1           Attempt to store record\nASA_SPACE3     EQU *\n         LA    R4,2                 Do 2 x iteration\n         B     ASA_SPACE_LOOP       Iterate\n         SPACE ,\n*\nASA_TEST_CHANNEL EQU *\n         CLI   0(R1),$ASA_C01       Is it channel 1 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C02       Is it channel 2 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C03       Is it channel 3 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C04       Is it channel 4 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C05       Is it channel 5 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C06       Is it channel 6 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C07       Is it channel 7 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C08       Is it channel 8 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C09       Is it channel 9 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C10       Is it channel 10 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C11       Is it channel 11 skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$ASA_C12       Is it channel 12 skip ?\n         BER   R5                   Yes, return\n         BR    R6                   No, return to other gate\n*\nPROCESS_MCC    EQU *\n         CLI   WSFFLAGS,WSFFDISP    Is it Dispatch format ?\n         BNE   MCC_WINDOWS          No, it should Windows format\n         @WTO  CODE=180\n         BAS   R6,DSP_HEADER       Build header\nMCC_DSP_EJECT  EQU *\n         BAS   R6,DSP_PAGE_HEADER\nMCC_DSP_READ   EQU *\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         BAS   R14,CALC_I_LRECL     Calculate lrecl & setup RDW\n         LA    R5,MCC_DSP_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_EJECT   Evaluate MCC\n         LA    R5,MCC_DSP_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_CHANNEL Address to handle channel skipping\n         BAS   R6,MCC_LINE         Handle other MCC\n         B     MCC_DSP_READ         Interate\nMCC_WINDOWS    EQU *\n         @WTO  CODE=181\nMCC_WIN_READ   EQU *\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         BAS   R14,CALC_I_LRECL     Calculate lrecl & setup RDW\n         LA    R5,MCC_WIN_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_TEST_EJECT   Evaluate MCC for EJECTion\n         LA    R5,MCC_WIN_EJECT     Address to handle EJECTion\n         BAS   R6,MCC_LINE         Process other MCC\n         B     MCC_WIN_READ         Interate\nMCC_WIN_EJECT  EQU *\n         MVI   FFRDATA,X'0C'        Put page-break sign\n         BAS   R14,CALC_O_LRECL     Calculate output LRECL\n         GET   ($SYSOUT) JES2FILE   Load sysout record\n         BAS   R14,CALC_I_LRECL     Calculate lrecl & setup RDW\n         EX    R2,MCC_WIN_MVC\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         B     MCC_WIN_READ         Interate\nMCC_WIN_MVC    MVC FFRDATA+1(*-*),1(R1) Move data from sysout buffer\n*\nDSP_HEADER   EQU *\n         XC    FFRRDW,FFRRDW\n         L     $FLATDS,ADDR_LCLDS01   Access DCB of LCLDS01\n         MVC   FFRDATA(L'PH1),PH1\n         LA    R2,L'PH1             Length of header 1\n         STH   R2,FFRECLEN          Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         MVC   FFRDATA(L'PH2),PH2\n         LA    R2,L'PH2             Length of header 1\n         STH   R2,FFRECLEN          Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Return\nDSP_PAGE_HEADER EQU *\n         AP    WSPGNUM,=PL1'1'      Increment page number\n         @EDITHDR UPDATE,LOC=*,     Edit page number                   +\n               PAGENUM=(DEC,WSPGNUM),                                  +\n               PREFIX=PH\n         LA    R2,L'PH3             Length of header 3\n         STH   R2,FFRECLEN          Put it on DCB\n         MVC   FFRDATA(L'PH3),PH3   Lrecl > DCB lrecl  ?\n         PUT   ($FLATDS),FFREC LCLDS01 Store into flatfile\n         BR    R6                   Return\n*  Notes:\n*   The following MCC will affect to take action\n*   after printing.\nMCC_LINE EQU   *\n         CLI   0(R1),$MCC_SP1       Is it space 1 line ?\n         BE    MCC_SPACE1           Yes, handle it\n         CLI   0(R1),$MCC_SP2       Is it space 2 line ?\n         BE    MCC_SPACE2           Yes, handle it\n         CLI   0(R1),$MCC_SP3       Is it space 3 line ?\n         BE    MCC_SPACE3           Yes, handle it\n         CLI   0(R1),$MCC_SP0       Is it print only line ?\n         BNER  R6                   No, ignore it, return\nMCC_SPACE0     EQU *\n         LA    R4,1                 Do not iterate\n         B     MCC_PRINT\nMCC_SPACE1     EQU *\n         LA    R4,1                 Do 1 x iteration\n         B     MCC_PRINT\nMCC_SPACE2     EQU *\n         LA    R4,2                 Do 2 x iteration\n         B     MCC_PRINT\nMCC_SPACE3     EQU *\n         LA    R4,3                 Do 3 x iteration\nMCC_PRINT EQU  *\n         BAS   R14,CALC_O_LRECL     Calculate output LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store sysout record into flatds\nMCC_PRINT_SPACE EQU *\n         BCT   R4,MCC_SPACE_LOOP\n         BR    R6                   Interate\nMCC_SPACE_LOOP EQU *\n         MVC   FFRECLEN,=H'5'\n         MVC   FFRDATA(8),=CL5' '   This line is 1 byte space\n         PUT   ($FLATDS),FFREC LCLDS01 Store it into output file\n         B     MCC_PRINT_SPACE      Iterate\n         SPACE ,\n*\nMCC_TEST_CHANNEL EQU *\n         CLI   0(R1),$MCC_C01       Is it channel 1 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C02       Is it channel 2 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C03       Is it channel 3 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C04       Is it channel 4 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C05       Is it channel 5 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C06       Is it channel 6 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C07       Is it channel 7 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C08       Is it channel 8 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C09       Is it channel 9 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C10       Is it channel 10 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C11       Is it channel 11 skip ?\n         BE    MCC_PRINT_CHANNEL\n         CLI   0(R1),$MCC_C12       Is it channel 12 skip ?\n         BE    MCC_PRINT_CHANNEL\n         BR    R6                   No, return to other gate\nMCC_PRINT_CHANNEL EQU *\n         LR    R6,R5                 Copy return address\n         BAS   R14,CALC_O_LRECL     Calculate output LRECL\n         EX    R2,MOVE_FFREC\n         PUT   ($FLATDS),FFREC LCLDS01 Store sysout record into flatds\n         BR    R6                   Return\n*\nMCC_TEST_EJECT EQU *\n         CLI   0(R1),$MCC_C01I      Is it channel 1 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C02I      Is it channel 2 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C03I      Is it channel 3 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C04I      Is it channel 4 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C05I      Is it channel 5 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C06I      Is it channel 6 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C07I      Is it channel 7 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C08I      Is it channel 8 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C09I      Is it channel 9 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C10I      Is it channel 10 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C11I      Is it channel 11 immediate skip ?\n         BER   R5                   Yes, return\n         CLI   0(R1),$MCC_C12I      Is it channel 12 immediate skip ?\n         BER   R5                   Yes, return\n         BR    R6                   No, return to other gate\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Calculate LRECL of Input Dataset               \u00a6\n*  \u00a6       - Called after GET                        \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nCALC_I_LRECL   EQU *\n         XR    R2,R2\n         ICM   R2,B'0111',0(R1)     Lrecl\n         CH    R2,WSLRECL           Is it overlength\n         BNH   LRECL_I_OKEY         No, good\n         LH    R2,WSLRECL           Else, use max\nLRECL_I_OKEY   EQU *\n         LA    R2,1(R2)             Add 1\n         STH   R2,FFRECLEN          Save it in RDW\n         L     R1,WSRCAREA          Address of record\n         LA    R3,1(R3)             Skip CC\n         BR    R14\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Calculate LRECL of Output Dataset              \u00a6\n*  \u00a6      - Called before PUT                        \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nCALC_O_LRECL   EQU *\n         LH    R2,FFRECLEN          Get lrecl\n         SH    R2,=H'5'             Reduce 5 (4 to skip RDW)\n         LTR   R2,R2                Check\n         BPR   R14                  If positif - good, return\n         LA    R2,5                 Else, set minimum 5\n         BR    R14                  Return\n*\n*  +-------------------------------------------------+\n*  \u00a6                                                 \u00a6\n*  \u00a6  Process S/390 Standard Format Dataset          \u00a6\n*  \u00a6                                                 \u00a6\n*  +-------------------------------------------------+\n*\nPROCESS_S390   EQU *\n         @WTO  CODE=182\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         GET   (R8)    JES2FILE     Load sysout record\n         LM    R4,R5,WSRCAREA       Record addr & length\n         LR    R6,R1                Keep RDW\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS02\n         PUT   (R8)         LCLDS02  Store sysout record into flatfile\n         LR    R2,R1\nS390_LOOP EQU  *\n         XR    R3,R3\n         ICM   R3,B'0111',0(R1)     Get lrecl\n         SH    R3,=H'5'\n         CR    R3,R5\n         BNH   S390_INPUT_LO\n         LR    R3,R5\n         B     S390_CHECK_MIN\nS390_INPUT_LO  EQU *\n         LR    R5,R3\nS390_CHECK_MIN EQU *\n         XC    0(4,R2),0(R2)        Zap RDW\n         CH    R3,=H'5'             At least 5 byte, is it ?\n         BH    S390_IN_TO_OUT       Yes, gohead\n         LH    R3,=H'5'             No, make it 5\nS390_IN_TO_OUT EQU *\n         STH   R3,0(R2)             Set reclength\n         LA    R2,4(,R2)            Jump over RDW\nS390_MOVE_LOOP EQU *\n         MVCL  R2,R4                Move input buf to output buf\n         BC    1,S390_MOVE_LOOP     Loop if interrupted\n         L     R8,ADDR_LCLDS01      Access DCB of LCLDS01\n         PUT   (R8)         LCLDS02  Store sysout record into flatfile\n         LR    R2,R1\n         L     R8,ADDR_JES2FILE     Access DCB of JES2FILE\n         GET   (R8)    JES2FILE     Load sysout record\n         LM    R4,R5,WSRCAREA       Record addr & length\n         LR    R6,R1                Keep RDW\n         B     S390_LOOP\n*\nSPOOL_SYN EQU *\n         @WTO  CODE=148\nSPOOL_END EQU *\n         @WTO  CODE=183\nEXIT     EQU   *\n         @EXIT\n         LTORG ,\n         EJECT\n*\n* +--------------------------------+\n* | Working Storage Area Map       |\n* | Used as working set and other  |\n* | dynamic storages directory     |\n* +--------------------------------+\n*\n         DERWSA\n         EJECT ,\n*\n* +--------------------------------+\n* | Module Extension Area Map      |\n* | Used as a non reentrant part   |\n* | of this module                 |\n* +--------------------------------+\n*\n         DERWTX TYPE=DSECT\n*\n* +--------------------------------+\n* | Flat File Record Area Map      |\n* +--------------------------------+\n*\nFFRECMAP DERFFREC TYPE=DSECT\n*\n*   STANDARD MVS SOURCE COPY\n*   FOR DSECTS AND EQUATES\n*   ------------------------\n*\n         PRINT NOGEN\n         DERTABCC\n         CVT   DSECT=YES\n         DCBD  DSORG=(PO,PS)\n         IHADCBE\n         IEFJESCT TYPE=DSECT,MNTBL=YES\n         IEFJSSOB (SO,AG,AL),CONTIG=YES\n         IEFZB4D0\n*        IEFZB4D2\n$FLATDS  EQU   7\n$SYSOUT  EQU   8\n         END   DERXWR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT536/FILE536.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT536", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}