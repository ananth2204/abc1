
15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(GDSSDB)'                      30.11.12 08:26:06
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              TEMPLATEDEPTH(300)
                                  :NOTEMPLATEREGISTRY              TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)
                                  :TMPLPARSE(NO)   TUNE(7)         UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64
                                  :NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,NOMAF,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__,__I,_Complex,__complex__,__real__,__imag__)
                                  :NOKEYWORD(char16_t,char32_t,decltype,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NOCOMPATRVALUEBINDING,NODBCS,NODECLTYPE,NODELEGATINGCTORS,
                                   DEPENDENTBASELOOKUP,NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,
                                   EXTERNTEMPLATE,ILLPTOM,IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,
                                   NOOLDDIGRAPH,OLDFRIEND,NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,
                                   NOTEMPSASLOCALS,NOTEXTAFTERENDIF,GNU_LABELVALUE,GNU_COMPUTEDGOTO,TRAILENUM,TYPEDEFCLASS,NOUCS,
                                   VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY,NOC99COMPLEX,NOC99COMPLEXHEADER,
                                   NOGNU_COMPLEX,GNU_SUFFIXIJ)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410D0000
                                  : __LIBREL__=0x410D0000
                                  : __TARGET_LIB__=0x410D0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(GDSSDB)'                      30.11.12 08:26:06
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | ??=pragma filetag("IBM-273")
             2 | ??=pragma nomargins nosequence
             3 |
             4 |
             5 |
             6 |
             7 |
             8 |
             9 |
            10 |
            11 |
            12 |
            13 |
            14 |
            15 |
            16 |
            17 |
            18 |
            19 |
            20 |
            21 |
            22 |
            23 |
            24 |
            25 |
            26 |
            27 |
            28 |
            29 | #include <string.h>
            30 | #include <stddef.h>
            31 | extern "OS" void DSNHLI(void *);
            32 | typedef struct
            33 |               ä short   SQLPLLEN;
            34 |                 short   SQLFLAGS;
            35 |                 short   SQLCTYPE;
            36 |                 char    SQLPROGN??(8??);
            37 |                 unsigned short SQLTIMES??(4??);
            38 |                 short   SQLSECTN;
            39 |                 char   *SQLCODEP;
            40 |                 char   *SQLVPARM;
            41 |                 char   *SQLAPARM;
            42 |                 short   SQLSTNM7;
            43 |                 short   SQLSTYPE;
            44 |                 long    SQLSTNUM;
            45 |                 unsigned long SQLRSRVD??(5??);
            46 |               ü SQLPLIST;
            47 | typedef struct
            48 |               ä short    SQLTYPE;
            49 |                 short    SQLLEN;
            50 |                 char    *SQLADDR;
            51 |                 char    *SQLIND;
            52 |                 short    SQLNAMLEN;
            53 |                 char     SQLNAMDATA??(30??);
            54 |               ü SQLELTS;
            55 | typedef SQLELTS     *SQLELTS_PTR;
            56 | typedef struct
            57 |               ä long          SQLLONGLEN;
            58 |                 unsigned long RESERVED;
            59 |                 char         *SQLDATALEN;
            60 |                 short         SQLNAMLEN;
            61 |                 char          SQLNAMDATA??(30??);
            62 |               ü SQLELTS2;
            63 | typedef struct
            64 |     ä char   SQLDAID??(8??);
            65 |       long   SQLDABC;
            66 |       short  SQLN;
            67 |       short  SQLD;
            68 |       char  SQLPVELT??( sizeof(SQLELTS) ??);
            69 |     ü SQLPVARS;
            70 | typedef SQLPVARS *SQLPVARS_PTR;
            71 | char    SQLTEMP??( 129 ??) ;
            72 | long    DSNTEMP ;
            73 | long    DSNNROWS ;
            74 | char    DSNPNM??( 387 ??) ;
            75 | #define SQL_FILE_READ 2
            76 | #define SQL_FILE_CREATE 8
            77 | #define SQL_FILE_OVERWRITE 16
            78 | #define SQL_FILE_APPEND 32
            79 | class mERROR;
            80 |
            81 | class mERRORPSTACK ä
            82 | private:
            83 |    long int ip;
            84 |    long int max;
            85 |    mERROR * * sp;
            86 | public:
            87 |    mERRORPSTACK(long int size=256);
            88 |    void push(mERROR * value);
            89 |    mERROR * examine();
            90 |    int    callNextHandler(int);
            91 |    mERROR * pop();
            92 |    void  reset();
            93 |   ßmERRORPSTACK();
            94 |
            95 | ü;
            96 |
            97 |
            98 | class mERROR
            99 | ä
           100 | protected:
           101 |    char err;
           102 |    int (* handler)(int);
           103 | enum ERROR_ACTIONäWarning, Abortü;
           104 | public:
           105 |
           106 | static int max_rc;
           107 |
           108 | friend class mERRORPSTACK;
           109 |    mERROR();
           110 |    mERROR(int (*)(int) );
           111 | 	 virtual ßmERROR()äü;
           112 |    long int iserror()äreturn err;ü
           113 |    int  markerror(int code = 1)
           114 |    ä
           115 |     err = 1;
           116 |     if (handler) return (handler(code));
           117 |     else return 0;
           118 |    ü
           119 |    void clearerror()äerr = 0;ü
           120 |    void setmERRORHandler(int (*h)(int))ähandler = h;ü
           121 |    int error(char *,ERROR_ACTION);
           122 | ü;
           123 |
           124 | extern mERRORPSTACK mErrorPStack;
           125 |
           126 |
           127 |
           128 |
           129 |
           130 |
           131 |
           132 |
           133 |
           134 |
           135 |
           136 |
           137 | extern "C"
           138 | char * genOpenName(const char *name, char *nm);
           139 |
           140 |
           141 |
           142 |                    #pragma nomargins nosequence
           143 |                    #pragma checkout(suspend)
           144 |
           145 |
           146 |
           147 |   extern "C" ä
           148 |
           149 |
           150 |                    #pragma nomargins nosequence
           151 |                    #pragma checkout(suspend)
           152 |
           153 |
           154 |
           155 |
           156 | extern "C" ä
           157 |
           158 |
           159 |
           160 |
           161 |
           162 |
           163 |
           164 |
           165 |
           166 |
           167 |
           168 |
           169 |
           170 |
           171 |
           172 |
           173 |
           174 |
           175 |
           176 |
           177 |
           178 |
           179 |
           180 |
           181 |
           182 |
           183 |
           184 |
           185 |
           186 |
           187 |
           188 |
           189 |
           190 |
           191 |
           192 |
           193 |
           194 |
           195 |
           196 |
           197 |
           198 |
           199 |
           200 |
           201 |
           202 |
           203 |
           204 |
           205 |
           206 |
           207 |
           208 |
           209 |
           210 |
           211 |
           212 |
           213 |
           214 |
           215 |
           216 |
           217 |
           218 |
           219 |
           220 |
           221 |
           222 |
           223 |
           224 |
           225 |
           226 |
           227 |
           228 |
           229 |
           230 |
           231 |
           232 |
           233 |
           234 |
           235 |
           236 |
           237 |
           238 |
           239 |
           240 |
           241 |
           242 |
           243 |
           244 |
           245 |
           246 |
           247 |
           248 |
           249 |
           250 |
           251 |
           252 |
           253 |
           254 |
           255 |
           256 |
           257 |
           258 |
           259 |
           260 |
           261 |
           262 |
           263 |
           264 |
           265 |
           266 |
           267 |
           268 |
           269 |
           270 |
           271 |
           272 |
           273 |
           274 |
           275 |
           276 |
           277 |
           278 |
           279 |
           280 |
           281 |
           282 |
           283 |
           284 |
           285 |
           286 |
           287 |
           288 |
           289 |
           290 |
           291 |
           292 |
           293 |
           294 |
           295 |
           296 |
           297 |
           298 |
           299 |
           300 |
           301 |
           302 |
           303 |
           304 |
           305 |
           306 |
           307 |
           308 |
           309 |
           310 |
           311 |
           312 |
           313 |
           314 |
           315 |
           316 |
           317 |
           318 |
           319 |
           320 |
           321 |
           322 |
           323 |
           324 |
           325 |
           326 |
           327 |
           328 |
           329 |
           330 |
           331 |
           332 |
           333 |
           334 |
           335 |
           336 |
           337 |
           338 |
           339 |
           340 |
           341 |
           342 |
           343 |
           344 |
           345 |
           346 |
           347 |
           348 |
           349 |
           350 |
           351 |
           352 |
           353 |
           354 |
           355 |
           356 |
           357 |
           358 |
           359 |
           360 |
           361 |
           362 |
           363 |
           364 |
           365 |
           366 |
           367 |
           368 |
           369 |
           370 |
           371 |
           372 |
           373 |
           374 |
           375 |
           376 |
           377 |
           378 |
           379 |
           380 |
           381 |
           382 |
           383 |
           384 |
           385 | ü
           386 |
           387 |                    #pragma checkout(resume)
           388 |                    #pragma nomargins nosequence
           389 |                    #pragma checkout(suspend)
           390 |
           391 |
           392 |
           393 |
           394 |
           395 |
           396 |
           397 |
           398 |
           399 |
           400 |
           401 |
           402 |
           403 |
           404 |
           405 |                    #pragma nomargins nosequence
           406 |                    #pragma checkout(suspend)
           407 |
           408 |
           409 |
           410 |    extern "C" ä
           411 |
           412 |    typedef  int ptrdiff_t;
           413 |
           414 |        typedef unsigned int size_t;
           415 |
           416 |
           417 |
           418 |
           419 |
           420 |    ü
           421 |
           422 |                    #pragma checkout(resume)
           423 |
           424 |   extern "C" ä
           425 |
           426 |
           427 |
           428 |
           429 |
           430 |         extern "builtin"
           431 |
           432 |         int     __clcl (void*, void*, unsigned int*,
           433 |                         unsigned int*, unsigned char);
           434 |
           435 |
           436 |
           437 |
           438 |         extern "builtin"
           439 |
           440 |         int     __stck (unsigned long long *);
           441 |
           442 |
           443 |
           444 |
           445 |         extern "builtin"
           446 |
           447 |         int     __stcke (void *);
           448 |
           449 |
           450 |
           451 |
           452 |         #pragma pack (1)
           453 |
           454 |           typedef struct __stcke_tod ä
           455 |             unsigned char      c;
           456 |             unsigned long long slice;
           457 |             unsigned int       i;
           458 |           ü __stcke_tod_t;
           459 |
           460 |           typedef struct __stcke_tag ä
           461 |             unsigned char  zeros;
           462 |             __stcke_tod_t  tod;
           463 |             unsigned short p_field;
           464 |           ü __stcke_t;
           465 |         #pragma pack (reset)
           466 |
           467 |
           468 |
           469 |
           470 |
           471 |         extern "builtin" ä
           472 |
           473 |         void  __tr (unsigned char*, const unsigned char*,              Ö
           474 |        unsigned char);
           475 |
           476 |       ü
           477 |
           478 |         extern "builtin" ä
           479 |
           480 |         int  __ed (unsigned char*, unsigned char*, unsigned char);
           481 |         int  __edmk (unsigned char*, unsigned char*,                   Ö
           482 |    unsigned char, unsigned char**);
           483 |         int  __trt (unsigned char*, const unsigned char*,              Ö
           484 |        unsigned char, unsigned char*, unsigned char**);
           485 |         int  __nc (unsigned char*, unsigned char*, unsigned char);
           486 |         int  __oc (unsigned char*, unsigned char*, unsigned char);
           487 |         int  __xc (unsigned char*, unsigned char*, unsigned char);
           488 |         void __pack (unsigned char*, unsigned char,                    Ö
           489 |   unsigned char*, unsigned char);
           490 |         void __unpk (unsigned char*, unsigned char,                    Ö
           491 |   unsigned char*, unsigned char);
           492 |
           493 |       ü
           494 |
           495 |         long double  __fmaddl (long double, long double, long double);
           496 |
           497 |
           498 |
           499 |
           500 |
           501 |
           502 |
           503 |
           504 |
           505 |
           506 |
           507 |
           508 |
           509 |
           510 |
           511 |
           512 |
           513 |
           514 |
           515 |
           516 |
           517 |
           518 |
           519 |
           520 |
           521 |
           522 |       extern "builtin" ä
           523 |
           524 |         int    __lper (float*, float);
           525 |         int    __lpdr (double*, double);
           526 |         int    __lner (float*, float);
           527 |         int    __lndr (double*, double);
           528 |         float  __sqer (float);
           529 |         double __sqdr (double);
           530 |
           531 |       ü
           532 |
           533 |
           534 |
           535 |
           536 |
           537 |
           538 |       extern "builtin" ä
           539 |
           540 |         float       __fier (float);
           541 |         double      __fidr (double);
           542 |         long double __fixr (long double);
           543 |         int         __cfer (int*, int, float);
           544 |         int         __cfdr (int*, int, double);
           545 |         int         __cfxr (int*, int, long double);
           546 |         int         __lpxr (long double*, long double);
           547 |         int         __lnxr (long double*, long double);
           548 |         long double __sqxr (long double);
           549 |
           550 |       ü
           551 |
           552 |
           553 |
           554 |
           555 |
           556 |
           557 |
           558 |
           559 |
           560 |
           561 |       extern "builtin" ä
           562 |
           563 |         int __thder (double*, float);
           564 |         int __thdr  (double*, double);
           565 |         int __tbedr (float*, int, double);
           566 |         int __tbdr  (double*, int, double);
           567 |
           568 |       ü
           569 |
           570 |
           571 |
           572 |
           573 |       extern "builtin" ä
           574 |
           575 |         unsigned short __lrvh  (unsigned short*);
           576 |         unsigned int   __lrv   (unsigned int*);
           577 |         void  __strvh (unsigned short, unsigned short*);
           578 |         void  __strv  (unsigned int, unsigned int*);
           579 |
           580 |       ü
           581 |
           582 |
           583 |
           584 |
           585 |
           586 |
           587 |
           588 |
           589 |
           590 |
           591 |
           592 |
           593 |
           594 |       extern "builtin" ä
           595 |
           596 |         int  __cvb(char *op2);
           597 |         void __cvd(int op1, char *op2);
           598 |         int  __zap(unsigned char *op1, unsigned char len1,
           599 |                    unsigned char *op2, unsigned char len2);
           600 |
           601 |
           602 |
           603 |
           604 |
           605 |           int __clcle(char *op1, unsigned long op1_len, unsigned char oÖ
           606 | p2,
           607 |                       char *op3, unsigned long op3_len);
           608 |           int __mvcle(char *op1, unsigned long op1_len, unsigned char oÖ
           609 | p2,
           610 |                       char *op3, unsigned long op3_len);
           611 |
           612 |
           613 |
           614 |
           615 |
           616 |           int __tre(char *op1, unsigned long op1_len,
           617 |                     char *op2, unsigned char test_char);
           618 |
           619 |
           620 |             long long __cvbg(char *op2);
           621 |             void      __cvdg(long long op1, char *op2);
           622 |
           623 |
           624 |
           625 |
           626 |
           627 |
           628 |
           629 |
           630 |
           631 |
           632 |       ü
           633 |
           634 |
           635 |
           636 |
           637 |
           638 |
           639 |
           640 |
           641 |
           642 |
           643 |
           644 |
           645 |
           646 |
           647 |
           648 |
           649 |
           650 |
           651 |
           652 |
           653 |
           654 |
           655 |
           656 |
           657 |
           658 |
           659 |
           660 |
           661 |
           662 |
           663 |
           664 |
           665 |
           666 |
           667 |
           668 |
           669 |
           670 |
           671 |
           672 |
           673 |         typedef union ä
           674 |             struct __dword ä
           675 |                 unsigned int __high_word;
           676 |                 unsigned int __low_word;
           677 |             ü __s_dword;
           678 |             unsigned long long __dword;
           679 |         ü __plo_entry_t;
           680 |
           681 |         typedef union ä
           682 |             unsigned long long   __val;
           683 |             unsigned long long * __ptr;
           684 |         ü __plo_ull_ullptr_t;
           685 |
           686 |         typedef union ä
           687 |             unsigned int       * __uint_ptr;
           688 |             unsigned long long * __ull_ptr;
           689 |         ü __plo_uintptr_ullptr_t;
           690 |
           691 |         typedef __plo_ull_ullptr_t __plo_plistÄ18Ü;
           692 |
           693 |
           694 |
           695 |
           696 |
           697 |
           698 |
           699 |           extern "builtin" ä
           700 |
           701 |           int __plo_CL     (void *lock,
           702 |                             unsigned int *op1c, unsigned int *op2,
           703 |                             unsigned int *op3, unsigned int *op4);
           704 |           int __plo_CS     (void *lock,
           705 |                             unsigned int *op1c, unsigned int op1r,
           706 |                             unsigned int *op2);
           707 |           int __plo_DCS    (void *lock,
           708 |                             unsigned int *op1c, unsigned int op1r,
           709 |                             unsigned int *op2,
           710 |                             unsigned int *op3c, unsigned int op3r,
           711 |                             unsigned int *op4);
           712 |           int __plo_CSST   (void *lock,
           713 |                             unsigned int *op1c, unsigned int op1r,
           714 |                             unsigned int *op2,
           715 |                             unsigned int op3, unsigned int *op4);
           716 |           int __plo_CSDST  (void *lock,
           717 |                             unsigned int *op1c, unsigned int op1r,
           718 |                             unsigned int *op2, void *param_list);
           719 |           int __plo_CSTST  (void *lock,
           720 |                             unsigned int *op1c, unsigned int op1r,
           721 |                             unsigned int *op2, void *param_list);
           722 |
           723 |         ü
           724 |
           725 |
           726 |
           727 |
           728 |
           729 |
           730 |
           731 |
           732 |
           733 |
           734 |
           735 |
           736 |
           737 |
           738 |
           739 |
           740 |   ü
           741 |
           742 |                    #pragma checkout(resume)
           743 |
           744 |
           745 |     typedef struct __div_t
           746 |       ä
           747 |       int quot;
           748 |       int rem;
           749 |       ü div_t;
           750 |
           751 |     typedef struct __ldiv_t
           752 |       ä
           753 |       long int quot;
           754 |       long int rem;
           755 |       ü ldiv_t;
           756 |
           757 |    typedef struct ä
           758 |                long long quot;
           759 |                long long rem;
           760 |    ü lldiv_t;
           761 |
           762 |        typedef struct ä
           763 |                  long  __uheap_size;
           764 |                  long  __uheap_bytes_alloc;
           765 |                  long  __uheap_bytes_free;
           766 |        ü hreport_t;
           767 |
           768 |
           769 |
           770 |
           771 |
           772 |       extern "builtin"
           773 |       void **_Gtab(int);
           774 |
           775 |       extern "builtin"
           776 |       const void *_gtca(void);
           777 |
           778 |
           779 |
           780 |
           781 |
           782 |
           783 |
           784 |
           785 |       long long int strtoll(const char * restrict, char * * restrict, iÖ
           786 | nt);
           787 |       unsigned long long int strtoull(const char * restrict, char * * rÖ
           788 | estrict, int);
           789 |         #pragma map (strtoll,   "Ö174Ö174STRLL")
           790 |         #pragma map (strtoull,  "Ö174Ö174STRULL")
           791 |
           792 |     double   atof (const char *);
           793 |     int      atoi (const char *);
           794 |     long int atol (const char *);
           795 |     double   strtod (const char * restrict, char * * restrict);
           796 |     long int strtol (const char * restrict, char * * restrict,
           797 |                       int);
           798 |     unsigned long int strtoul (const char * restrict,
           799 |                                 char * * restrict, int);
           800 |     int      rand (void);
           801 |     void     srand (unsigned int);
           802 |         long long int strtoll (const char * restrict,
           803 |                                 char * * restrict, int);
           804 |         unsigned long long int strtoull (const char * restrict,
           805 |                                           char * * restrict, int);
           806 |
           807 |
           808 |
           809 |
           810 |       void *   calloc (size_t, size_t);
           811 |       void     free (void *);
           812 |       void *   malloc (size_t);
           813 |       void *   realloc (void *, size_t);
           814 |
           815 |
           816 |
           817 |     extern "builtin"
           818 |     int       __abs (int);
           819 |
           820 |
           821 |
           822 |      #pragma map (__getenv,        "Ö174Ö174GETENV")
           823 |
           824 |
           825 |
           826 |     void     abort (void);
           827 |     int      atexit (void (*)(void));
           828 |     void     exit (int);
           829 |     char *   getenv (const char *);
           830 |     char *   __getenv (const char *);
           831 |     int      system (const char *);
           832 |     void *   bsearch (const void *, const void *,
           833 |                       size_t, size_t,
           834 |                       int (*)(const void *,
           835 |                                     const void *));
           836 |     void     qsort (void *, size_t, size_t,
           837 |                     int (*)(const void *,
           838 |                                   const void *));
           839 |
           840 |     int unatexit(void (*)(void));
           841 |
           842 |
           843 |         int      __heaprpt(hreport_t *);
           844 |
           845 |     extern "C++" ä
           846 |       inline int abs (int x) ä return __abs(x); ü
           847 |     ü
           848 |
           849 |
           850 |
           851 |
           852 |
           853 |
           854 |     div_t    div (int, int);
           855 |     long int labs (long int);
           856 |     ldiv_t   ldiv (long int, long int);
           857 |     int      mblen (const char *, size_t);
           858 |     int      mbtowc (wchar_t * restrict,
           859 |                       const char * restrict, size_t);
           860 |     int      wctomb (char *, wchar_t);
           861 |     size_t   mbstowcs (wchar_t * restrict,
           862 |                         const char * restrict, size_t);
           863 |     size_t   wcstombs (char * restrict,
           864 |                         const wchar_t * restrict, size_t);
           865 |
           866 |
           867 |       long long llabs(long long );
           868 |       lldiv_t lldiv(long long , long long );
           869 |
           870 |
           871 |
           872 |
           873 |
           874 |
           875 |
           876 |
           877 |
           878 |
           879 |
           880 |       void (*  fetch (const char *))();
           881 |       void (*  fetchep (void (*)()))();
           882 |       int    release (void (*)());
           883 |
           884 |
           885 |         inline int fortrc (void)
           886 |           ä  return (*( (int *)((char *)_gtca() + 568) ))/4; ü
           887 |
           888 |
           889 |
           890 |       #pragma map (rpmatch, "Ö174Ö174RPMTCH")
           891 |       #pragma map (csid,    "Ö174Ö174CSID")
           892 |       #pragma map (wcsid,   "Ö174Ö174WCSID")
           893 |
           894 |       int __librel (void);
           895 |         int clearenv (void);
           896 |       int rpmatch(const char *);
           897 |       int csid(const char *);
           898 |       int wcsid(const wchar_t);
           899 |
           900 |
           901 |       typedef unsigned int cs_t;
           902 |
           903 |       typedef union ä
           904 |         struct ä
           905 |           unsigned int first_word;
           906 |           unsigned int second_word;
           907 |         ü double_word;
           908 |         double alignment_dummy;
           909 |       ü cds_t;
           910 |
           911 |         extern "builtin"
           912 |
           913 |       int     __cs (cs_t *, cs_t *, cs_t);
           914 |       int     (cs) (cs_t *, cs_t *, cs_t);
           915 |
           916 |         extern "builtin"
           917 |
           918 |         int     __cs1 (void *, void *, void *);
           919 |
           920 |
           921 |
           922 |
           923 |         extern "builtin"
           924 |
           925 |       int     __cds (cds_t *, cds_t *, cds_t);
           926 |       int     (cds) (cds_t *, cds_t *, cds_t);
           927 |
           928 |         extern "builtin"
           929 |
           930 |         int     __cds1 (void *, void *, void *);
           931 |
           932 |
           933 |
           934 |
           935 |
           936 |
           937 |
           938 |
           939 |
           940 |
           941 |
           942 |
           943 |     #pragma map(__EnvnA, "Ö174Ö174ENVNA")
           944 |
           945 |     char *** __EnvnA(void);
           946 |     char *** __Envn(void);
           947 |
           948 |
           949 |
           950 |
           951 |
           952 |
           953 |
           954 |
           955 |             extern "builtin"
           956 |             void *__alloca(unsigned int x);
           957 |
           958 |
           959 |
           960 |
           961 |
           962 |
           963 |
           964 |
           965 |
           966 |
           967 |
           968 |
           969 |
           970 |
           971 |
           972 |
           973 |
           974 |
           975 |
           976 |
           977 |         double       drand48(void);
           978 |         double       erand48(unsigned short int Ä3Ü);
           979 |         long int     jrand48(unsigned short int Ä3Ü);
           980 |         void         lcong48(unsigned short int Ä7Ü);
           981 |         long int     lrand48(void);
           982 |         long int     mrand48(void);
           983 |         long int     nrand48(unsigned short int Ä3Ü);
           984 |           int          putenv(const char *);
           985 |         unsigned short int  *seed48(unsigned short int Ä3Ü);
           986 |         void         srand48(long int);
           987 |           void         setkey(const char *);
           988 |
           989 |
           990 |
           991 |
           992 |
           993 |
           994 |
           995 |
           996 |
           997 |
           998 |         long         a64l(const char *);
           999 |         char        *ecvt(double, int, int * restrict,
          1000 |                                        int * restrict);
          1001 |         char        *fcvt(double, int, int * restrict,
          1002 |                                        int * restrict);
          1003 |         char        *gcvt(double, int, char *);
          1004 |         int          getsubopt(char **, char *const *, char **);
          1005 |         char        *initstate(unsigned, char *, size_t);
          1006 |         char        *l64a(long);
          1007 |         int          mkstemp(char *);
          1008 |         char        *mktemp(char *);
          1009 |         long         random(void);
          1010 |         char        *realpath(const char * restrict,
          1011 |                                     char * restrict);
          1012 |         char        *setstate(const char *);
          1013 |         void         srandom(unsigned);
          1014 |            int          ttyslot(void);
          1015 |            void        *valloc(size_t);
          1016 |           int          grantpt(int);
          1017 |           char        *ptsname(int);
          1018 |           int          unlockpt(int);
          1019 |
          1020 |
          1021 |
          1022 |
          1023 |        int rand_r(unsigned int *);
          1024 |
          1025 |
          1026 |
          1027 |
          1028 |     int __discarddata(void *, size_t);
          1029 |
          1030 |
          1031 |
          1032 |           int setenv (const char *, const char *, int);
          1033 |
          1034 |
          1035 |
          1036 |
          1037 |
          1038 |
          1039 |
          1040 |
          1041 |
          1042 |   ü
          1043 |
          1044 |
          1045 |   extern "C++" ä
          1046 |         inline long abs (long x) ä return labs(x); ü
          1047 |         inline ldiv_t div (long x, long y)
          1048 |         ä return ldiv(x,y); ü
          1049 |   ü
          1050 |
          1051 |
          1052 |                    #pragma checkout(resume)
          1053 |
          1054 |
          1055 |                    #pragma nomargins nosequence
          1056 |                    #pragma checkout(suspend)
          1057 |
          1058 |
          1059 |
          1060 |
          1061 |
          1062 |
          1063 |                    #pragma nomargins nosequence
          1064 |                    #pragma checkout(suspend)
          1065 |
          1066 |
          1067 |
          1068 |     extern "C" ä
          1069 |
          1070 |
          1071 |
          1072 |                    #pragma nomargins nosequence
          1073 |                    #pragma checkout(suspend)
          1074 |
          1075 |
          1076 |
          1077 |
          1078 |
          1079 |
          1080 |     extern "C" ä
          1081 |
          1082 |
          1083 |
          1084 |
          1085 |
          1086 |
          1087 |
          1088 |
          1089 |           typedef unsigned int dev_t ;
          1090 |
          1091 |
          1092 |
          1093 |
          1094 |              typedef int gid_t;
          1095 |
          1096 |
          1097 |
          1098 |
          1099 |           typedef unsigned int  ino_t ;
          1100 |
          1101 |
          1102 |
          1103 |           typedef int mode_t ;
          1104 |
          1105 |
          1106 |
          1107 |
          1108 |           typedef int nlink_t ;
          1109 |
          1110 |
          1111 |
          1112 |
          1113 |
          1114 |             typedef  int off_t ;
          1115 |
          1116 |
          1117 |            typedef long long off64_t;
          1118 |
          1119 |
          1120 |           typedef signed int pid_t ;
          1121 |
          1122 |
          1123 |
          1124 |
          1125 |             typedef signed int ssize_t ;
          1126 |
          1127 |
          1128 |
          1129 |
          1130 |              typedef int uid_t;
          1131 |
          1132 |
          1133 |
          1134 |
          1135 |
          1136 |
          1137 |
          1138 |           typedef long time_t ;
          1139 |
          1140 |
          1141 |
          1142 |           typedef unsigned long clock_t;
          1143 |
          1144 |
          1145 |
          1146 |           typedef struct ä
          1147 |                      unsigned int   __sigs_0;
          1148 |                      unsigned int   __sigs_1;
          1149 |                   ü sigset_t ;
          1150 |
          1151 |
          1152 |
          1153 |           typedef unsigned char cc_t;
          1154 |
          1155 |
          1156 |
          1157 |           typedef unsigned int speed_t ;
          1158 |
          1159 |
          1160 |
          1161 |           typedef unsigned int tcflag_t ;
          1162 |
          1163 |
          1164 |
          1165 |
          1166 |
          1167 |
          1168 |
          1169 |           typedef unsigned int mtm_t ;
          1170 |
          1171 |
          1172 |
          1173 |
          1174 |           typedef unsigned int rdev_t ;
          1175 |
          1176 |
          1177 |
          1178 |
          1179 |           typedef char tid_tÄ8Ü;
          1180 |
          1181 |
          1182 |             typedef struct ä
          1183 |                       char __Ä0x08Ü;
          1184 |             ü __osenv_token;
          1185 |
          1186 |
          1187 |
          1188 |
          1189 |
          1190 |
          1191 |
          1192 |           typedef struct ä
          1193 |                      char __Ä0x08Ü;
          1194 |           ü pthread_t;
          1195 |
          1196 |           typedef  struct ä
          1197 |                       char __Ä0x58Ü;
          1198 |           ü pthread_attr_t;
          1199 |
          1200 |              typedef struct ä
          1201 |                         unsigned long __m;
          1202 |              ü pthread_mutex_t;
          1203 |
          1204 |           typedef struct ä
          1205 |                      char __Ä0x04Ü;
          1206 |           ü pthread_mutexattr_t;
          1207 |
          1208 |                 typedef struct ä
          1209 |                      char __Ä0x04Ü;
          1210 |                 ü pthread_cond_t;
          1211 |
          1212 |           typedef struct ä
          1213 |                      char __Ä0x04Ü;
          1214 |           ü pthread_condattr_t;
          1215 |
          1216 |           typedef struct ä
          1217 |                      char __Ä0x04Ü;
          1218 |           ü pthread_key_t;
          1219 |
          1220 |           typedef int pthread_once_t;
          1221 |
          1222 |              typedef struct ä
          1223 |                         char __Ä0x04Ü;
          1224 |               ü pthread_rwlockattr_t;
          1225 |
          1226 |              typedef struct ä
          1227 |                         char __Ä0x04Ü;
          1228 |               ü pthread_rwlock_t;
          1229 |
          1230 |
          1231 |
          1232 |
          1233 |
          1234 |
          1235 |
          1236 |          typedef long key_t;
          1237 |
          1238 |
          1239 |
          1240 |
          1241 |
          1242 |
          1243 |
          1244 |          typedef int id_t;
          1245 |
          1246 |          typedef unsigned int  useconds_t;
          1247 |
          1248 |
          1249 |          typedef unsigned char sa_family_t;
          1250 |
          1251 |
          1252 |
          1253 |          typedef unsigned short in_port_t;
          1254 |
          1255 |
          1256 |             typedef long mcontext_tÄ40Ü;
          1257 |
          1258 |
          1259 |
          1260 |
          1261 |
          1262 |           typedef  unsigned char  u_char;
          1263 |
          1264 |           typedef  unsigned int   u_int;
          1265 |
          1266 |           typedef  unsigned short ushort;
          1267 |
          1268 |           typedef  unsigned short u_short;
          1269 |
          1270 |           typedef  unsigned long  u_long;
          1271 |
          1272 |
          1273 |
          1274 |
          1275 |
          1276 |          typedef unsigned long in_addr_t;
          1277 |
          1278 |          typedef in_addr_t ip_addr_t;
          1279 |
          1280 |
          1281 |          typedef  char *    caddr_t;
          1282 |
          1283 |
          1284 |
          1285 |
          1286 |
          1287 |
          1288 |          typedef signed long blkcnt_t;
          1289 |
          1290 |          typedef signed int    blksize_t;
          1291 |
          1292 |          typedef unsigned long fsblkcnt_t;
          1293 |
          1294 |          typedef unsigned int  fsfilcnt_t;
          1295 |
          1296 |
          1297 |          typedef signed int    suseconds_t;
          1298 |
          1299 |
          1300 |
          1301 |
          1302 |
          1303 |
          1304 |
          1305 |   ü
          1306 |
          1307 |                    #pragma checkout(resume)
          1308 |
          1309 |
          1310 |
          1311 |
          1312 |      struct __file;
          1313 |      typedef int _GETCFUNC(struct __file *);
          1314 |      typedef int _PUTCFUNC(int, struct __file *);
          1315 |      struct __file
          1316 |         ä
          1317 |         unsigned char  *__bufPtr;
          1318 |         long int        __countIn;
          1319 |         long int        __countOut;
          1320 |         _GETCFUNC      *__fcbgetc;
          1321 |         _PUTCFUNC      *__fcbputc;
          1322 |         unsigned int    __cntlinterpret : 1;
          1323 |         unsigned int    __fcb_ascii : 1;
          1324 |         unsigned int    __fcb_orientation : 2;
          1325 |         ü;
          1326 |
          1327 |      struct __ffile
          1328 |        ä
          1329 |        struct __file *__fp;
          1330 |        ü;
          1331 |
          1332 |      typedef struct __ffile *__FILEP;
          1333 |
          1334 |
          1335 |      typedef struct __ffile FILE;
          1336 |
          1337 |   struct __fpos_t ä
          1338 |     long int __fpos_elemÄ8Ü;
          1339 |     ü;
          1340 |
          1341 |   typedef struct __fpos_t fpos_t;
          1342 |
          1343 |
          1344 |
          1345 |
          1346 |
          1347 |
          1348 |       typedef char  *___valist;
          1349 |     typedef ___valist  va_list;
          1350 |
          1351 |
          1352 |
          1353 |
          1354 |
          1355 |
          1356 |
          1357 |
          1358 |
          1359 |
          1360 |      typedef const unsigned short *__cusp;
          1361 |
          1362 |
          1363 |
          1364 |
          1365 |
          1366 |
          1367 |
          1368 |
          1369 |
          1370 |       #pragma map (vprintf, "Ö174Ö174VPRNT")
          1371 |       #pragma map (vfprintf, "Ö174Ö174VFPRT")
          1372 |         #pragma map (vsprintf, "Ö174Ö174VSPRT")
          1373 |
          1374 |
          1375 |
          1376 |
          1377 |     void     clearerr (FILE *);
          1378 |     int      fclose (FILE *);
          1379 |     int      feof (FILE *);
          1380 |     int      ferror (FILE *);
          1381 |     int      fflush (FILE *);
          1382 |     int      fgetc (FILE *);
          1383 |     int      fgetpos (FILE * restrict, fpos_t * restrict);
          1384 |     char    *fgets (char * restrict, int, FILE * restrict);
          1385 |     FILE    *fopen (const char * restrict,
          1386 |                     const char * restrict);
          1387 |     int      fprintf (FILE * restrict,
          1388 |                        const char * restrict, ...);
          1389 |     int      fputc (int, FILE *);
          1390 |     int      fputs (const char * restrict, FILE * restrict);
          1391 |     size_t   fread (void * restrict, size_t,
          1392 |                     size_t, FILE * restrict);
          1393 |     FILE    *freopen (const char * restrict,
          1394 |                       const char * restrict, FILE * restrict);
          1395 |     int      fscanf (FILE * restrict,
          1396 |                       const char * restrict, ...);
          1397 |     int      fseek (FILE *, long int, int);
          1398 |     int      fsetpos (FILE *, const fpos_t *);
          1399 |     long int ftell (FILE *);
          1400 |    size_t   fwrite (const void * restrict, size_t, size_t,
          1401 |                      FILE * restrict);
          1402 |     int      getc (FILE *);
          1403 |     int      getchar (void);
          1404 |     char    *gets (char *);
          1405 |     void     perror (const char *);
          1406 |     int      printf (const char * restrict, ...);
          1407 |     int      putc (int, FILE *);
          1408 |     int      putchar (int);
          1409 |     int      puts (const char *);
          1410 |     int      remove (const char *);
          1411 |     int      rename (const char *, const char *);
          1412 |     void     rewind (FILE *);
          1413 |     int      scanf (const char * restrict, ...);
          1414 |     void     setbuf (FILE * restrict, char * restrict);
          1415 |     int      setvbuf (FILE * restrict, char * restrict,
          1416 |                       int, size_t);
          1417 |       int      sprintf (char * restrict,
          1418 |                          const char * restrict, ...);
          1419 |     int      sscanf (const char * restrict,
          1420 |                      const char * restrict, ...);
          1421 |     FILE    *tmpfile (void);
          1422 |     char    *tmpnam (char *);
          1423 |     int      ungetc (int, FILE *);
          1424 |     int      vfprintf (FILE * restrict,
          1425 |                         const char * restrict, ___valist);
          1426 |     int      vprintf (const char * restrict, ___valist);
          1427 |     int      vsprintf (char * restrict,
          1428 |                         const char * restrict, ___valist);
          1429 |
          1430 |
          1431 |          off_t ftello(FILE *);
          1432 |          int fseeko(FILE *, off_t, int);
          1433 |
          1434 |
          1435 |
          1436 |
          1437 |
          1438 |
          1439 |
          1440 |
          1441 |       struct __S99struc
          1442 |         ä
          1443 |              unsigned char __S99RBLN;
          1444 |              unsigned char __S99VERB;
          1445 |              unsigned short __S99FLAG1;
          1446 |              unsigned short __S99ERROR;
          1447 |              unsigned short __S99INFO;
          1448 |              void *__S99TXTPP;
          1449 |              void *__S99S99X;
          1450 |              unsigned int   __S99FLAG2;
          1451 |         ü;
          1452 |
          1453 |       typedef struct __S99struc __S99parms;
          1454 |
          1455 |
          1456 |     struct __S99rbx
          1457 |           ä
          1458 |         char           __S99EIDÄ6Ü;
          1459 |         unsigned char  __S99EVER;
          1460 |         unsigned char  __S99EOPTS;
          1461 |         unsigned char  __S99ESUBP;
          1462 |         unsigned char  __S99EKEY;
          1463 |         unsigned char  __S99EMGSV;
          1464 |         unsigned char  __S99ENMSG;
          1465 |         void *__S99ECPPL;
          1466 |         char           __reserved;
          1467 |         char           __S99ERES;
          1468 |         unsigned char  __S99ERCO;
          1469 |         unsigned char  __S99ERCF;
          1470 |         int            __S99EWRC;
          1471 |         void *__S99EMSGP;
          1472 |         unsigned short __S99EERR;
          1473 |         unsigned short __S99EINFO;
          1474 |         int            __reserv2;
          1475 |         ü;
          1476 |
          1477 |      typedef struct __S99rbx  __S99rbx_t;
          1478 |
          1479 |      struct  __S99emparms ä
          1480 |         unsigned char  __EMFUNCT;
          1481 |         unsigned char  __EMIDNUM;
          1482 |         unsigned char  __EMNMSGBK;
          1483 |         unsigned char  __filler1;
          1484 |         void *__EMS99RBP;
          1485 |         int            __EMRETCOD;
          1486 |         void *__EMCPPLP;
          1487 |         void *__EMBUFP;
          1488 |         int            __reserv1;
          1489 |         int            __reserv2;
          1490 |         ü;
          1491 |
          1492 |        typedef struct __S99emparms  __S99emparms_t;
          1493 |
          1494 |
          1495 |
          1496 |     typedef enum ä
          1497 |        __disk       =  0,
          1498 |        __terminal   =  1,
          1499 |        __printer    =  2,
          1500 |        __tape       =  3,
          1501 |        __tdq        =  5,
          1502 |        __dummy      =  6,
          1503 |
          1504 |        __msgfile    =  7,
          1505 |
          1506 |        __memory     =  8,
          1507 |        __hfs        =  9,
          1508 |        __hiperspace = 10,
          1509 |
          1510 |        __msgrtn     = 11,
          1511 |
          1512 |        __other      = 0xff
          1513 |     ü __device_t;
          1514 |
          1515 |
          1516 |
          1517 |
          1518 |
          1519 |
          1520 |
          1521 |
          1522 |     struct __fileData ä
          1523 |          unsigned int   __recfmF   :    1,
          1524 |                         __recfmV   :    1,
          1525 |                         __recfmU   :    1,
          1526 |                         __recfmS   :    1,
          1527 |                         __recfmBlk :    1,
          1528 |                         __recfmASA :    1,
          1529 |                         __recfmM   :    1,
          1530 |                         __dsorgPO  :    1,
          1531 |                         __dsorgPDSmem : 1,
          1532 |                         __dsorgPDSdir : 1,
          1533 |                         __dsorgPS  :    1,
          1534 |                         __dsorgConcat : 1,
          1535 |                         __dsorgMem :    1,
          1536 |                         __dsorgHiper  : 1,
          1537 |                         __dsorgTemp:    1,
          1538 |                         __dsorgVSAM:    1,
          1539 |
          1540 |                         __dsorgHFS :    1,
          1541 |
          1542 |                         __openmode :    2,
          1543 |                         __modeflag :    4,
          1544 |                         __dsorgPDSE :   1,
          1545 |
          1546 |                         __vsamRLS :     3,
          1547 |                         __vsamEA  :     1,
          1548 |                         __recfmB  :     1,
          1549 |                         __reserve2 :    3;
          1550 |
          1551 |          __device_t     __device;
          1552 |          unsigned long  __blksize,
          1553 |                         __maxreclen;
          1554 |          union ä
          1555 |            struct ä
          1556 |              unsigned short __vsam_type;
          1557 |              unsigned long  __vsam_keylen;
          1558 |              unsigned long  __vsam_RKP;
          1559 |            ü __vsam;
          1560 |            struct ä
          1561 |              unsigned short __disk_vsam_type;
          1562 |              unsigned char  __disk_access_method;
          1563 |              unsigned char  __disk_noseek_to_seek;
          1564 |              long           __disk_reserveÄ2Ü;
          1565 |            ü __disk;
          1566 |          ü __device_specific;
          1567 |          char *         __dsname;
          1568 |          void *         __reserve4;
          1569 |     ü;
          1570 |
          1571 |     typedef struct __fileData fldata_t;
          1572 |
          1573 |
          1574 |
          1575 |
          1576 |
          1577 |
          1578 |
          1579 |
          1580 |
          1581 |
          1582 |
          1583 |
          1584 |
          1585 |
          1586 |
          1587 |
          1588 |
          1589 |
          1590 |
          1591 |
          1592 |
          1593 |
          1594 |
          1595 |
          1596 |
          1597 |
          1598 |       int    svc99 (__S99parms *);
          1599 |       int    flocate (FILE *, const void *, size_t, int);
          1600 |       int    fdelrec (FILE *);
          1601 |       size_t fupdate (const void *, size_t, FILE *);
          1602 |       int    clrmemf (int);
          1603 |       int    fldata (FILE *, char *, fldata_t *);
          1604 |
          1605 |
          1606 |
          1607 |
          1608 |
          1609 |
          1610 |
          1611 |
          1612 |     typedef struct ä
          1613 |               unsigned int  __fill,
          1614 |                             __recnum;
          1615 |     ü __rrds_key_type;
          1616 |
          1617 |
          1618 |       typedef struct __amrctype ä
          1619 |
          1620 |        union ä
          1621 |                int __error;
          1622 |           struct ä
          1623 |             unsigned short __syscode,
          1624 |                            __rc;
          1625 |           ü __abend;
          1626 |           struct ä
          1627 |              unsigned char __fdbk_fill,
          1628 |                            __rc,
          1629 |                            __ftncd,
          1630 |                            __fdbk;
          1631 |           ü __feedback;
          1632 |           struct ä
          1633 |              unsigned short __svc99_info,
          1634 |                             __svc99_error;
          1635 |           ü __alloc;
          1636 |        ü __code;
          1637 |        unsigned int  __RBA;
          1638 |        unsigned int      __last_op;
          1639 |        struct ä
          1640 |         unsigned int   __len_fill;
          1641 |         unsigned int   __len;
          1642 |         char           __strÄ120Ü;
          1643 |         unsigned int   __parmr0;
          1644 |         unsigned int   __parmr1;
          1645 |         unsigned int   __fill2Ä2Ü;
          1646 |         char           __str2Ä64Ü;
          1647 |
          1648 |        ü __msg;
          1649 |
          1650 |        unsigned char        __rplfdbwdÄ4Ü;
          1651 |        unsigned long long   __XRBA;
          1652 |
          1653 |        unsigned char        __amrc_noseek_to_seek;
          1654 |
          1655 |        char                 __amrc_padÄ23Ü;
          1656 |
          1657 |     ü __amrc_type;
          1658 |
          1659 |
          1660 |     typedef __amrc_type *__amrc_ptr;
          1661 |
          1662 |
          1663 |     typedef struct __amrc2type ä
          1664 |              int       __error2;
          1665 |
          1666 |         FILE          *__fileptr;
          1667 |              int       __reservedÄ6Ü;
          1668 |     ü __amrc2_type;
          1669 |
          1670 |
          1671 |     typedef __amrc2_type *__amrc2_ptr;
          1672 |
          1673 |
          1674 |
          1675 |
          1676 |
          1677 |
          1678 |
          1679 |
          1680 |
          1681 |
          1682 |
          1683 |
          1684 |
          1685 |
          1686 |
          1687 |
          1688 |
          1689 |
          1690 |
          1691 |
          1692 |
          1693 |
          1694 |
          1695 |         FILE *fdopen(int, const char *);
          1696 |         int fileno(FILE *);
          1697 |         char *ctermid(char *);
          1698 |
          1699 |
          1700 |
          1701 |
          1702 |
          1703 |
          1704 |
          1705 |
          1706 |
          1707 |
          1708 |
          1709 |
          1710 |
          1711 |
          1712 |
          1713 |          char *cuserid(char *);
          1714 |
          1715 |
          1716 |           int          getopt(int, char * const ÄÜ, const char *);
          1717 |
          1718 |
          1719 |          int getw(FILE *);
          1720 |          int putw(int, FILE *);
          1721 |
          1722 |        extern char *optarg;
          1723 |        extern int optind, opterr, optopt;
          1724 |
          1725 |
          1726 |
          1727 |
          1728 |
          1729 |
          1730 |
          1731 |
          1732 |
          1733 |
          1734 |
          1735 |
          1736 |
          1737 |        int pclose(FILE *);
          1738 |        FILE *popen(const char *, const char *);
          1739 |        char  *tempnam(const char *, const char *);
          1740 |
          1741 |
          1742 |
          1743 |
          1744 |
          1745 |
          1746 |
          1747 |
          1748 |
          1749 |
          1750 |
          1751 |
          1752 |      #pragma map (__snprtf,  "Ö174Ö174SNPRTF")
          1753 |
          1754 |    int __snprtf(char *restrict, size_t, const char *restrict, ...);
          1755 |
          1756 |
          1757 |
          1758 |     ü
          1759 |
          1760 |                    #pragma checkout(resume)
          1761 |
          1762 |
          1763 |   extern "C" ä
          1764 |
          1765 |
          1766 |   void  __abort(void);
          1767 |   void  assert(int);
          1768 |
          1769 |
          1770 |
          1771 |
          1772 |   ü
          1773 |
          1774 |
          1775 |
          1776 | extern "C" ä
          1777 |
          1778 |
          1779 |
          1780 |
          1781 |
          1782 |
          1783 |       inline __FILEP* const * __gtab_filep(int e)       ä return (__FILÖ
          1784 | EP* const *)_Gtab(e); ü
          1785 |
          1786 |
          1787 |
          1788 |
          1789 | ü
          1790 |                    #pragma checkout(resume)
          1791 |
          1792 |
          1793 |
          1794 |
          1795 |
          1796 |
          1797 |
          1798 | enum genOpenNameType
          1799 | ä  sas_hfs,
          1800 |    ibm_hfs,
          1801 |    sas_ddn,
          1802 |    ibm_ddn,
          1803 |    sas_dsn,
          1804 |    ibm_dsn,
          1805 |    ont_dsn,
          1806 |    ont_ddn,
          1807 |    ont_mem,
          1808 |    ont_unknown,
          1809 |    genOpenNameType_int = -1
          1810 | ü;
          1811 |
          1812 | genOpenNameType genOpenType(const char *);
          1813 | char * stripMemberName(const char *name, char* nm);
          1814 | char * onlyMemberName(const char *name, char* nm);
          1815 |
          1816 |
          1817 |
          1818 | unsigned short  Ushort(int i);
          1819 | unsigned short  Ushort(short s);
          1820 | unsigned short  Ushort(char c);
          1821 |
          1822 |
          1823 |
          1824 |
          1825 |
          1826 |
          1827 | void * memcpyp(void * target , const void * source, size_t tsize, size_Ö
          1828 | t ssize, int pad);
          1829 |
          1830 |
          1831 |
          1832 |
          1833 |
          1834 |
          1835 |
          1836 |
          1837 |
          1838 |
          1839 | enum ALIGNTYPEäaLEFT=1, aRIGHT=3, aCENTER=2, aASIS=0, ALINGNTYPE_int = Ö
          1840 | -1 ü;
          1841 | enum CAPSTYPEäcUPPER=3, cLOWER=4, cWORD=2, cASIS=0, CAPSTYPE_int = -1ü;
          1842 | enum FIELDTYPEä
          1843 |                       fCHAR =0,
          1844 |                       fALPHANUMERIC=1,
          1845 |                       fALPHABETIC=2,
          1846 |                       fNUMERIC= 3,
          1847 |                       fSLLTAG = 20,
          1848 |                       fLOGICAL=4 ,fHEXA=16,
          1849 |                       fBINARY=17 ,fDATE=5 ,fFTIME=6, fLISTBOX = 19,
          1850 |                       FIELDTYPE_int = -1ü;
          1851 |
          1852 |
          1853 |
          1854 |
          1855 | class FORMAT
          1856 | ä
          1857 |    protected:
          1858 |    public:
          1859 |    ALIGNTYPE falign;
          1860 |    CAPSTYPE fcaps;
          1861 |   FORMAT() :  fcaps(cUPPER),
          1862 |     falign(aLEFT)äü
          1863 |
          1864 |   FORMAT(ALIGNTYPE a ,CAPSTYPE c=cASIS )
          1865 |   ä
          1866 |
          1867 |     falign = a;
          1868 |       fcaps = c;
          1869 |   ü
          1870 |   ßFORMAT()äü
          1871 | ü;
          1872 |
          1873 |
          1874 |
          1875 |
          1876 |
          1877 | extern FORMAT F_alcu;
          1878 | extern FORMAT F_alcw;
          1879 | extern FORMAT F_arcu;
          1880 |
          1881 |
          1882 |
          1883 | struct str ä
          1884 | enum status ä _VALID, _INVALID, status_int = -1 ü;
          1885 | enum length ä FIX, VARIABLE ü;
          1886 | char  * c;
          1887 | char  * lls;
          1888 | long int     l;
          1889 | status type;
          1890 | length ltype;
          1891 | str()ä c = lls = 0; l = 0; type = _VALID; ltype = VARIABLE; ü
          1892 |       ü;
          1893 |
          1894 |
          1895 |
          1896 |
          1897 | class sLL;
          1898 |
          1899 | class mvsSTRING ä
          1900 |    protected:
          1901 |    str st;
          1902 |    public:
          1903 |    static char parseSepCh;
          1904 |    mvsSTRING();
          1905 |    mvsSTRING(const char *);
          1906 |    mvsSTRING(const mvsSTRING &);
          1907 |    mvsSTRING(const char *,long int l );
          1908 |    mvsSTRING(const char , const long int l);
          1909 |
          1910 | 		virtual ßmvsSTRING();
          1911 |
          1912 |   virtual mvsSTRING& operator=(const char * );
          1913 |   virtual mvsSTRING& operator=(const mvsSTRING &);
          1914 | 		virtual mvsSTRING& operator=(const sLL &);
          1915 |
          1916 |   virtual operator char *() const
          1917 |   ä
          1918 |   if ( st.type == str::_VALID )
          1919 |       return st.c;
          1920 |
          1921 |    return st.c;
          1922 |    ü
          1923 |    virtual operator unsigned char *() const
          1924 |   ä
          1925 |   if ( st.type == str::_VALID )
          1926 |       return (unsigned char *)st.c;
          1927 |
          1928 |    return (unsigned char *)st.c;
          1929 |    ü
          1930 |    virtual operator const char *() const
          1931 |    ä
          1932 |     return (const char *)st.c;
          1933 |    ü
          1934 |    virtual operator const unsigned char *() const
          1935 |    ä
          1936 |     return (const unsigned char *)st.c;
          1937 |    ü
          1938 |    friend long int operator==(const mvsSTRING & , const mvsSTRING &);
          1939 |    friend long int operator|=(const mvsSTRING & , const mvsSTRING &);
          1940 |    friend mvsSTRING operator+(const mvsSTRING & , const mvsSTRING &);
          1941 |
          1942 |    mvsSTRING& operator+=(const mvsSTRING&);
          1943 |    void operator<<(long int );
          1944 |    void operator>>(long int );
          1945 |
          1946 |    virtual char& operatorÄÜ(int);
          1947 |    virtual char& byte(int);
          1948 |    mvsSTRING operator()(const long int , long int );
          1949 |
          1950 |    long int hashcode();
          1951 |   char * nameOf();
          1952 |    long int  lengthOf() constäreturn st.l;ü
          1953 |    long int toint()
          1954 |           ä long int ret = 0;
          1955 |              if ( st.l >= sizeof(long int) )
          1956 |                      ret = * (long int *)(st.c);
          1957 |            else if ( st.l == sizeof(short) )
          1958 |               ret = * (short *)(st.c);
          1959 |            else if ( st.l == 1)
          1960 |               ret = *st.c;
          1961 |          return ret ;
          1962 |        ü
          1963 |    void fromint(long int i)
          1964 |        ä
          1965 |              if ( st.l >= sizeof(long int) )
          1966 |                       *(long int *)(st.c) = i;
          1967 |            else if ( st.l == sizeof(short) )
          1968 |               *(short *)(st.c) = (short )i;
          1969 |            else if ( st.l == 1)
          1970 |           *st.c =(char) i;
          1971 |        ü
          1972 |   void changeAll(char ,char );
          1973 |   void align(ALIGNTYPE );
          1974 |   void caps(CAPSTYPE);
          1975 |   mvsSTRING & strip();
          1976 |   int  isEmpty();
          1977 |   mvsSTRING& stripmvsSTRING();
          1978 |     mvsSTRING& format(FORMAT *);
          1979 |   void parse(mvsSTRING&, char, mvsSTRING&);
          1980 |   void parse(mvsSTRING&, char, mvsSTRING&, char ,mvsSTRING &);
          1981 |   void parse(mvsSTRING&, char *,mvsSTRING&);
          1982 |   void parse(mvsSTRING&, char *, mvsSTRING&, char *,mvsSTRING &);
          1983 |   void split(mvsSTRING&, char *, mvsSTRING&,char *,mvsSTRING &);
          1984 | 	void split(mvsSTRING&, char *, mvsSTRING&,char *,mvsSTRING &,char *,mvÖ
          1985 | sSTRING &);
          1986 | 	void split(mvsSTRING&, char *, mvsSTRING&,char *,mvsSTRING &,char *,mvÖ
          1987 | sSTRING &,char *,mvsSTRING&);
          1988 | 	void parse(mvsSTRING&, char *, mvsSTRING&, char *,mvsSTRING &,char *,mÖ
          1989 | vsSTRING &);
          1990 | 	void dump(const char * ,int);
          1991 |   char * getLlmvsSTRING();
          1992 | ü;
          1993 |
          1994 | 	extern mvsSTRING nullstring;
          1995 |
          1996 |
          1997 |
          1998 | extern mvsSTRING nullmvsSTRING;
          1999 |
          2000 |
          2001 |
          2002 | class LLC_mvsSTRING : public mvsSTRING
          2003 | ä
          2004 |    short codev;
          2005 |   public:
          2006 |   LLC_mvsSTRING():mvsSTRING(), codev(0)äü
          2007 |   LLC_mvsSTRING(char * s):mvsSTRING(),codev(0)
          2008 |     ä
          2009 |      short l = *(short*) s;
          2010 |      if ( l >= 4 )
          2011 |
          2012 | 				ä
          2013 | 				mvsSTRING x = mvsSTRING(s+4,l-4);
          2014 | 				mvsSTRING::operator=(x);
          2015 | 				codev = *(short *)(s+2);
          2016 | 				ü
          2017 |     ü
          2018 |    LLC_mvsSTRING(long int c):mvsSTRING() , codev(c)äü
          2019 |   ßLLC_mvsSTRING()äü
          2020 |    long int   code(void)äreturn codev;ü
          2021 |  operator long int()
          2022 |        ä long int ret = 0;
          2023 |           if ( st.l == sizeof(long int) )
          2024 |                   ret = * (long int *)(st.c);
          2025 |          else if ( st.l == sizeof(short) )
          2026 |             ret = * (short *)(st.c);
          2027 |        else if ( st.l == 1)
          2028 |             ret = *st.c;
          2029 |        return ret ;
          2030 |     ü
          2031 | ü;
          2032 |
          2033 |
          2034 |
          2035 |
          2036 | mvsSTRING patternchng(mvsSTRING input , mvsSTRING mask,
          2037 |   mvsSTRING (*function)(mvsSTRING));
          2038 |
          2039 |
          2040 |
          2041 |
          2042 |
          2043 |
          2044 |
          2045 | class mvsSTRING;
          2046 | class mERROR;
          2047 |
          2048 |
          2049 |
          2050 |
          2051 |
          2052 |
          2053 |
          2054 |
          2055 | class mvsSTRING;
          2056 | class mERROR;
          2057 |
          2058 | class INT3
          2059 | ä
          2060 | private :
          2061 |    long v;
          2062 | public:
          2063 |    INT3(long u)ä v = u;ü
          2064 |    operator long()äreturn v;ü
          2065 |    INT3 & operator=(long u)ä v = u;return *this;ü
          2066 |
          2067 | ü;
          2068 |
          2069 |
          2070 |
          2071 |
          2072 |
          2073 |
          2074 |
          2075 |
          2076 |
          2077 | enum sLLUsage ä sLLinput , sLLoutput , sLLoutputVarü ;
          2078 |
          2079 |
          2080 |
          2081 |
          2082 |
          2083 | enum sLLType   äsLLt0 = 0, sLLt1 = 1  ,sLLt2 = 2 , sLLt3 = 3 , sLLt4 = Ö
          2084 | 4 ü;
          2085 | enum sLLStatus äsLLOk = 0, sLLUf = 1  ,sLLOf = 2ü;
          2086 |
          2087 | class sLL;
          2088 |
          2089 |
          2090 | class sLLskipä
          2091 | private:
          2092 |    int i;
          2093 | public:
          2094 |    sLLskip(int v):i(v)äü
          2095 |    operator int()äreturn i;ü
          2096 | ü;
          2097 |
          2098 | class sLL:public  mERROR
          2099 | ä
          2100 |
          2101 | protected:
          2102 |
          2103 |       int length;
          2104 |       int offset;
          2105 |       int llength;
          2106 |       int allocl;
          2107 |       int storedl;
          2108 |
          2109 |       sLL * base;
          2110 |       sLL * child;
          2111 |
          2112 |
          2113 |       char * start;
          2114 |       char * cursor;
          2115 |       sLLType type;
          2116 |       sLLStatus status;
          2117 |       char   dummy;
          2118 | 			mvsSTRING  string;
          2119 | protected:
          2120 |       sLLUsage usage;
          2121 |
          2122 | protected:
          2123 |
          2124 |     void init(sLL *,int,sLLType);
          2125 |     int storeOk(int);
          2126 |
          2127 | public:
          2128 |
          2129 |
          2130 |
          2131 |
          2132 |
          2133 |     sLL (sLLType = sLLt2,
          2134 |             sLLUsage = sLLoutput,int=1024 );
          2135 |     sLL (sLL * , int ,
          2136 |             sLLType = sLLt2);
          2137 |     sLL (sLL * ,char *,
          2138 |             sLLType = sLLt2);
          2139 |     sLL (char *,
          2140 |             sLLType = sLLt2);
          2141 |       sLL (char *,
          2142 |                    int );
          2143 |
          2144 |
          2145 |     sLL (const sLL &);
          2146 |
          2147 |     virtual ßsLL ();
          2148 |
          2149 |     virtual sLL & operator=(sLL &);
          2150 |
          2151 |
          2152 |
          2153 |
          2154 |
          2155 |       operator int();
          2156 |
          2157 |
          2158 |     char & operatorÄÜ(int);
          2159 |
          2160 | 			int   getLength() const
          2161 | 				ä
          2162 | 				if ( usage == sLLinput ) return length;
          2163 | 				else return storedl;
          2164 | 				ü
          2165 |
          2166 | 			char * getStart() const
          2167 | 				ä return start; ü
          2168 |
          2169 |     sLL * getBase();
          2170 |     int   getOffset();
          2171 |     sLL * getChild();
          2172 |
          2173 |
          2174 |     int   getFullLength();
          2175 |     int   getRemainderLength();
          2176 |     int   getStoredLength();
          2177 |
          2178 |     char * getCursor();
          2179 | 			mvsSTRING  getString();
          2180 |     void  setChild(sLL*);
          2181 |     void  setBase(sLL *);
          2182 |
          2183 |
          2184 |     void   setLength();
          2185 |     virtual void resetCursor();
          2186 |
          2187 |     char * goCursor(int);
          2188 |     void   setUsage(sLLUsage);
          2189 |
          2190 |
          2191 |
          2192 |
          2193 |
          2194 |     sLL * next();
          2195 |     sLL * iterate(sLLType,int = 0);
          2196 |     void remove(sLL& );
          2197 |
          2198 |
          2199 |
          2200 |
          2201 |
          2202 |
          2203 |     sLL& operator>>(int&);
          2204 |     sLL& operator>>(short&);
          2205 |     sLL& operator>>(unsigned short&);
          2206 |     sLL& operator>>(char &);
          2207 |     sLL& operator>>(char * &);
          2208 |     sLL& operator>>(mvsSTRING &);
          2209 |     sLL& operator>>(sLL &);
          2210 |     sLL& operator>>(INT3 &);
          2211 |     sLL& operator>>(sLLskip &);
          2212 |
          2213 |
          2214 |
          2215 |
          2216 |     sLL& operator<<(int);
          2217 |     sLL& operator<<(short);
          2218 |     sLL& operator<<(unsigned short);
          2219 |     sLL& operator<<(char );
          2220 |     sLL& operator<<(char *);
          2221 |     sLL& operator<<(mvsSTRING &);
          2222 |     sLL& operator<<(sLL& );
          2223 |     sLL& operator<<(INT3 &);
          2224 |     sLL& operator<<(sLLskip &);
          2225 |     sLL& store(char *,int);
          2226 |
          2227 |
          2228 |
          2229 |
          2230 |
          2231 |
          2232 |    int write(void *);
          2233 |    friend sLL * readsLL(void *,sLLType);
          2234 | 			virtual void dump(const char *,int);
          2235 |
          2236 | ü;
          2237 |
          2238 | class sLLTag: public sLL
          2239 | ä
          2240 | private:
          2241 |    short      code;
          2242 |    char       * name;
          2243 |    short      searchcode;
          2244 |    void       init(short);
          2245 | public:
          2246 |    sLLTag();
          2247 |    sLLTag(short);
          2248 |
          2249 |    sLLTag(char *);
          2250 |    sLLTag(sLL * , char *);
          2251 |    sLLTag(const sLLTag &);
          2252 |
          2253 |    ßsLLTag()äü
          2254 | 		sLLTag& operator=(sLLTag&);
          2255 |
          2256 |    short      getCode()ä return code;ü
          2257 |    char *     getName()ä return name ;ü
          2258 |    sLLTag *   search(short=0);
          2259 |    void       resetCursor();
          2260 |    void       remove(sLLTag &);
          2261 |    sLLTag *   update(sLLTag& );
          2262 |    sLLTag *   next();
          2263 |    sLLTag *   iterate();
          2264 | 	 virtual void dump(const char *,int);
          2265 | ü;
          2266 |
          2267 |
          2268 |
          2269 |
          2270 |
          2271 |
          2272 |
          2273 |
          2274 |
          2275 |
          2276 |
          2277 |
          2278 |
          2279 |
          2280 |
          2281 |
          2282 |
          2283 |
          2284 |
          2285 |                    #pragma nomargins nosequence
          2286 |                    #pragma checkout(suspend)
          2287 |
          2288 |
          2289 |
          2290 |     extern "C" ä
          2291 |
          2292 |
          2293 |
          2294 |
          2295 |
          2296 |
          2297 |
          2298 |         struct timespec
          2299 |             ä
          2300 |             time_t tv_sec;
          2301 |             long   tv_nsec;
          2302 |             ü;
          2303 |
          2304 |
          2305 |
          2306 |
          2307 |
          2308 |
          2309 |   struct tm
          2310 |      ä
          2311 |      int tm_sec;
          2312 |      int tm_min;
          2313 |      int tm_hour;
          2314 |      int tm_mday;
          2315 |      int tm_mon;
          2316 |      int tm_year;
          2317 |      int tm_wday;
          2318 |      int tm_yday;
          2319 |      int tm_isdst;
          2320 |      ü;
          2321 |
          2322 |     #pragma map(clock,"Ö174Ö174OCLCK")
          2323 |
          2324 |
          2325 |
          2326 |
          2327 |
          2328 |
          2329 |
          2330 |
          2331 |
          2332 |      clock_t     clock (void);
          2333 |      double      difftime (time_t, time_t);
          2334 |      time_t      mktime (struct tm *);
          2335 |      time_t      time (time_t *);
          2336 |      char       *asctime (const struct tm *);
          2337 |      char       *ctime (const time_t *);
          2338 |      struct tm  *gmtime (const time_t *);
          2339 |      struct tm  *localtime (const time_t *);
          2340 |      size_t      strftime (char * restrict, size_t,
          2341 |                            const char * restrict,
          2342 |                            const struct tm * restrict);
          2343 |      void        __tzset(void);
          2344 |
          2345 |
          2346 |       char    *strptime(const char *restrict, const char *restrict,
          2347 |                         struct tm *restrict);
          2348 |
          2349 |
          2350 |     inline char *ctime(const time_t *t) äreturn(asctime(localtime(t)));ü
          2351 |        inline double difftime (time_t t1, time_t t0)
          2352 |                               äreturn((double)((t1) - (t0)));ü
          2353 |
          2354 |
          2355 |
          2356 |
          2357 |
          2358 |
          2359 |
          2360 |
          2361 |
          2362 |          void tzset(void);
          2363 |
          2364 |       extern char *tznameÄ2Ü;
          2365 |
          2366 |
          2367 |
          2368 |       #pragma map(__TzznA, "Ö174Ö174TZZNA")
          2369 |
          2370 |       char  *(*__TzznA(void))Ä2Ü;
          2371 |       char  *(*__Tzzn(void))Ä2Ü;
          2372 |
          2373 |
          2374 |
          2375 |
          2376 |
          2377 |
          2378 |
          2379 |
          2380 |
          2381 |
          2382 |       extern int daylight;
          2383 |       extern long int timezone;
          2384 |
          2385 |
          2386 |
          2387 |
          2388 |         long int *__tzone(void);
          2389 |         int *__dlght(void);
          2390 |
          2391 |
          2392 |
          2393 |       extern int   getdate_err;
          2394 |
          2395 |
          2396 |         struct tm *getdate(const char *);
          2397 |
          2398 |         int *__gderr(void);
          2399 |
          2400 |
          2401 |
          2402 |     char * asctime_r(const struct tm *restrict, char *restrict);
          2403 |     char * ctime_r(const time_t *, char*);
          2404 |     struct tm * gmtime_r(const time_t *restrict, struct tm *restrict);
          2405 |     struct tm * localtime_r(const time_t *restrict, struct tm *restrictÖ
          2406 | );
          2407 |
          2408 |
          2409 |
          2410 |
          2411 |
          2412 |
          2413 |
          2414 |
          2415 |
          2416 |
          2417 |
          2418 |
          2419 |
          2420 |
          2421 |              ü
          2422 |
          2423 |
          2424 |                    #pragma checkout(resume)
          2425 |
          2426 |
          2427 |
          2428 |
          2429 | unsigned long cvb(unsigned long,unsigned long = 8);
          2430 | unsigned long cvd(unsigned long);
          2431 | void    formatTime(char *,int,char *);
          2432 |
          2433 | int dump(FILE *,char *, char *,  int );
          2434 | int dump(FILE *,char *, void * , int );
          2435 | int dump(char *,int, char *, int);
          2436 |
          2437 | int  fromInt(char *,long ,int  = sizeof(long));
          2438 | long toInt(char *,int);
          2439 | long toInt(unsigned char *,int);
          2440 | int  roundToInt(double);
          2441 |
          2442 | int   Char2Hex(char *);
          2443 | char * Hex2Char(char );
          2444 | int   isnull(char *,int = 0 );
          2445 |
          2446 |
          2447 |
          2448 | char*   getTimeStemp();
          2449 | int     DatetoTm(tm&,char *);
          2450 | char *  DatetoString(tm, char *);
          2451 |
          2452 | void  getUniqueKEY(char *);
          2453 | void  getUniqueLongKEY(char *);
          2454 | char*   DatetoString();
          2455 | char *	DatetoIBM(char * from);
          2456 |
          2457 |
          2458 |
          2459 |
          2460 |
          2461 |
          2462 |
          2463 | int   strcmpiList(const char *,const char *ÄÜ,int &);
          2464 |
          2465 | char *strrev(char *s);
          2466 |
          2467 | mvsSTRING makemvsSTRING(char *,int);
          2468 |
          2469 |   int stcpma(char * ,const char * );
          2470 |   void * memcpyp(void *,const void*,size_t,size_t,int);
          2471 |
          2472 |
          2473 |
          2474 | char * Astrupr(char *, int);
          2475 | char * ConvertmvsSTRINGToAscii( char *, int);
          2476 | char aup(char);
          2477 |
          2478 | void  swab( char *,char *, int);
          2479 | char *  StrDup(char *);
          2480 |
          2481 | char   bit_rotate(unsigned char);
          2482 | mvsSTRING makemvsSTRING(char *,int);
          2483 | extern char __test__ ;
          2484 |
          2485 | extern unsigned char ETOAÄ256Ü;
          2486 | extern unsigned char ATOEÄ256Ü;
          2487 |
          2488 | inline int ffixed(FILE * f)
          2489 | ä
          2490 |       fldata_t ft;
          2491 |       char fnÄ256Ü;
          2492 |       if (fldata(f,fn,&ft) == 0)
          2493 |          return (ft.__recfmF);
          2494 |       else
          2495 | 				return 0;
          2496 | ü
          2497 |
          2498 | inline void  strerror_r(int err, char *errmsg, int size)
          2499 | ä
          2500 |     const char* msg=strerror(err);
          2501 |     if(strlen(msg)>size-1)
          2502 |     ä
          2503 |         strncpy(errmsg,msg,size-1);
          2504 |         errmsgÄsize-1Ü='Ö0';
          2505 |     ü
          2506 |     else
          2507 |     ä
          2508 |         strcpy(errmsg,msg);
          2509 |     ü
          2510 | ü
          2511 |
          2512 |
          2513 |
          2514 | namespace isis_ns_mvs
          2515 | 	ä
          2516 |
          2517 |
          2518 |
          2519 |
          2520 | 	enum MSGETypesämsgundef = 0, msgint    = 1,
          2521 | 		msgshort = 2, msgcharp  = 3,
          2522 | 		msgchar  = 4,  msgmvsSTRING = 5ü;
          2523 |
          2524 |
          2525 | 	enum MSGEFormämsgfundef = 0, msgfd = 1, msgfs = 2, msgfx =3 , msgfc = Ö
          2526 | 4ü;
          2527 | 	class MSGE
          2528 | 		ä
          2529 | 		private:
          2530 | 			int         length;
          2531 | 			MSGEForm    form;
          2532 | 			MSGETypes   type;
          2533 | 			char *      to;
          2534 | 			unionä
          2535 | 				char     mchar;
          2536 | 				int      mint;
          2537 | 				short    mshort;
          2538 | 				char   * mcharp;
          2539 | 				mvsSTRING * mmvsSTRING;
          2540 | 				ü;
          2541 | 		public:
          2542 | 			MSGE();
          2543 | 			MSGE(int i,int l=sizeof(int), MSGEForm f = msgfd);
          2544 | 			MSGE(short s,int l = sizeof(short), MSGEForm f= msgfd);
          2545 | 			MSGE(char * c,int l = 0, MSGEForm f = msgfs);
          2546 | 			MSGE(const mvsSTRING &s,int l = 0,MSGEForm f = msgfs );
          2547 | 			MSGE(char c);
          2548 |
          2549 | 			ßMSGE()
          2550 | 				ä
          2551 | 				if ( type == msgmvsSTRING) delete mmvsSTRING;
          2552 | 				if ( to ) delete ÄÜ to;
          2553 | 				ü
          2554 | 			char * format();
          2555 | 		ü;
          2556 |
          2557 |
          2558 | 	class EOLä
          2559 | 		ü;
          2560 | 	const EOL eol=EOL();
          2561 |
          2562 | 	MSGE * tCHARp(char * ,int  = 0);
          2563 |
          2564 | 	MSGE * tINT(int ,int = sizeof(int));
          2565 |
          2566 | 	MSGE * tSHORT(int ,int  = sizeof(short));
          2567 |
          2568 | 	MSGE * tmvsSTRING(mvsSTRING & ,int  = 0);
          2569 |
          2570 | 	MSGE * tHEX(int  ,int = (sizeof(int)*2) );
          2571 |
          2572 | 	MSGE * tHEX(char * , int);
          2573 |
          2574 |
          2575 |
          2576 |
          2577 | 	enum FLAG_VALUEä FLAG_TEXT = 5, FLAG_IO = 4ü;
          2578 |
          2579 | 	typedef   struct  ENTRY
          2580 | 		ä
          2581 | 		char * name     ;
          2582 | 		char flag       ;
          2583 | 		int  xcoord     ;
          2584 | 		int  ycoord     ;
          2585 | 		int  length     ;
          2586 | 		char attrib     ;
          2587 | 		int  access     ;
          2588 | 		char fieldtype  ;
          2589 | 		char align      ;
          2590 | 		char caps       ;
          2591 | 		char * defvalue ;
          2592 | 		ü
          2593 | 	entry               ;
          2594 |
          2595 |
          2596 |
          2597 |
          2598 |
          2599 | 	typedef   struct  SELECTION
          2600 | 		ä
          2601 | 		char * line     ;
          2602 | 		int  access     ;
          2603 | 		ü
          2604 | 	selection           ;
          2605 | 	struct et
          2606 | 		ä
          2607 | 		char *   cid ;
          2608 | 		char * * ett;
          2609 | 		ü ;
          2610 |
          2611 |
          2612 |
          2613 |
          2614 |
          2615 | 	struct TEXTENTRY
          2616 | 		ä
          2617 | 		int i;
          2618 | 		char * t;
          2619 | 		ü;
          2620 |
          2621 |
          2622 | 	class  MessageTEXT
          2623 | 		ä
          2624 | 		private:
          2625 | 			char timestemp;
          2626 | 			int (*printfv)(char *);
          2627 | 			char * msgfilename;
          2628 | 			bool   logger;
          2629 | 			bool   onlylogger;
          2630 | 			FILE  * msgfile;
          2631 | 			TEXTENTRY *  vector;
          2632 | 			MSGE * vÄ8Ü;
          2633 | 			int    vi;
          2634 | 			int    number;
          2635 | 			char   defltÄ256Ü;
          2636 |
          2637 | 		public:
          2638 | 			MessageTEXT(char * = 0,char * = 0);
          2639 | 			ßMessageTEXT();
          2640 | 			MessageTEXT& operator<<(char *);
          2641 | 			MessageTEXT& operator<<(const mvsSTRING &);
          2642 |
          2643 | 			MessageTEXT& operator<<(int );
          2644 | 			char *       operator<<(const EOL);
          2645 | 			MessageTEXT& operator<<(void *);
          2646 | 			char * getText(int);
          2647 | 			int    copyText(int, char *, int);
          2648 | 			char * print(char *);
          2649 | 			void   resetPrintFv()ä printfv = 0;ü
          2650 | 		void   setPrintFv(int (*pfv)(char *))ä printfv= pfv;ü
          2651 | 	void   setLogger(const char *);
          2652 | 	void   setOnlyLogger(const char * l)
          2653 | 		ä
          2654 | 		setLogger(l);
          2655 | 		onlylogger = logger;
          2656 | 		ü
          2657 | 	void   setFILE(FILE *);
          2658 | 	FILE*  getFILE()äreturn msgfile;ü
          2659 | void   setFileName(char *);
          2660 | void   setTimeStempFlag(char c = 1)ätimestemp = c;ü
          2661 | char   getTimeStempFlag()ä return timestemp;ü
          2662 | void   setNumber(int n);
          2663 | 		ü;
          2664 |
          2665 | 	extern "C" typedef void * (*EXT_C_fp)();
          2666 |
          2667 |
          2668 | 	class ExternalTEXT
          2669 | 		ä
          2670 | 		private:
          2671 | 			EXT_C_fp fp;
          2672 | 			char   language;
          2673 | 			char   modulnameÄ8Ü;
          2674 | 			void * text ;
          2675 | 			void init(char * name);
          2676 | 		public:
          2677 | 			ExternalTEXT(char * name,char lang);
          2678 | 			ExternalTEXT(char * name);
          2679 |
          2680 |
          2681 | 			int         MSGTEXT(int id, char * buff,int len);
          2682 | 			char      * HelpText(char * hid);
          2683 | 			entry     * EntryText(char * hid);
          2684 | 			selection * SelectionText(char * hid);
          2685 | 		ü;
          2686 |
          2687 | 	extern ExternalTEXT * externaltext;
          2688 |
          2689 |
          2690 |
          2691 | 	extern  MessageTEXT * messagetext;
          2692 | 	int initMessageText();
          2693 |
          2694 | 	int     Error(int , ...);
          2695 | 	char *  Message(int , ...);
          2696 | 	char *  getErrorText();
          2697 | 	char *  getMessageText();
          2698 | 	MessageTEXT& Err(int);
          2699 | 	MessageTEXT& Msg(int);
          2700 |
          2701 | 	ü
          2702 |
          2703 | using namespace isis_ns_mvs;
          2704 |
          2705 |
          2706 |
          2707 |
          2708 |
          2709 |
          2710 |
          2711 |
          2712 | extern "OS" int  SQLASM(void);
          2713 |
          2714 | extern "OS" int  DSNALI(...);
          2715 | extern "OS" int  DSNTIAR(...);
          2716 | extern "OS" void DSNHLI(void *);
          2717 |
          2718 | const int data_dim = 30;
          2719 | const int data_len = 72;
          2720 |
          2721 |
          2722 | typedef struct varchar
          2723 | ä
          2724 |   short len;
          2725 |   char  valueÄ4096Ü;
          2726 | ü VARCHAR;
          2727 |
          2728 | typedef struct
          2729 |  ä
          2730 |   short error_len;
          2731 |   char error_textÄdata_dimÜÄdata_lenÜ;
          2732 |  ü ERROR_MESSAGE;
          2733 |
          2734 | enum  CallTypeäConnect,
          2735 |        Disconnect,
          2736 |        Commit,
          2737 |        Rollback,
          2738 |        Prepare,
          2739 |        Open,
          2740 |        Close,
          2741 |        Executeü;
          2742 |
          2743 |
          2744 |
          2745 |
          2746 |
          2747 |
          2748 |
          2749 |
          2750 |
          2751 |
          2752 |
          2753 |
          2754 | class ARCHSQL:public mERROR
          2755 | ä
          2756 | private:
          2757 |   int rc;
          2758 |   void * tecb,* secb,* ribptr,* eibptr;
          2759 |   long retcode , reasoncode;
          2760 |   char functionÄ13Ü;
          2761 |   char ssnmÄ5Ü;
          2762 |   char planÄ9Ü;
          2763 |   char reuseÄ9Ü;
          2764 |   char collectionÄ19Ü;
          2765 |   char correlation_idÄ13Ü;
          2766 |   char accounting_tokenÄ23Ü;
          2767 |   char accounting_intervalÄ7Ü;
          2768 |   int  rrs;
          2769 |   int status;
          2770 |   ERROR_MESSAGE error_message;
          2771 |   void * loadlistÄ8Ü;
          2772 | public:
          2773 |   ARCHSQL();
          2774 |   ßARCHSQL();
          2775 |   int call(CallType);
          2776 |   void setDynamicSQL(char *);
          2777 |   void * getLoadlist()ä return loadlistÄ0Ü;ü
          2778 |   void setSubSystem(char *n)ämemcpy(ssnm,n,4);ssnmÄ4Ü = 0;ü
          2779 |   void setPlan(char * p)ämemcpyp(plan,p,8,strlen(p),' '); planÄ8Ü = 0;ü
          2780 |   void setCollection(char * p)ämemcpyp(collection,p,8,strlen(p),' '); cÖ
          2781 | ollectionÄ8Ü = 0;ü
          2782 |   void setPlanName(char *n)ämemcpy(plan,n,8);planÄ8Ü = 0;ü
          2783 | ü;
          2784 |
          2785 | void  getUniqueKey(char *);
          2786 | void  getUniqueKEY(char *);
          2787 |
          2788 |
          2789 |
          2790 |
          2791 |
          2792 |
          2793 |
          2794 |
          2795 | struct chainE ä
          2796 |
          2797 | 	chainE * prev ;
          2798 | 	chainE * next ;
          2799 | 	char * chainEid   ;
          2800 | 	int    chainEidl  ;
          2801 |
          2802 | 	chainE()ächainEid = 0; chainEidl = 0; prev = next = 0;ü
          2803 |
          2804 | 	chainE(char * i,int l =0)
          2805 | 	ä
          2806 | 		if (i)
          2807 | 		ä
          2808 | 			if ( l ) chainEidl = l; else chainEidl =int(strlen(i));
          2809 | 			chainEid = new charÄchainEidl+1Ü; memcpy(chainEid,i,chainEidl+1);
          2810 | 		ü
          2811 | 		else chainEid =0;
          2812 | 		prev=next=0;
          2813 | 	ü
          2814 |
          2815 | 	chainE(const char * i,int l =0)
          2816 | 	ä
          2817 | 		if (i)
          2818 | 		ä
          2819 | 			if ( l ) chainEidl = l; else chainEidl =int(strlen(i));
          2820 | 			chainEid = new charÄchainEidl+1Ü; memcpy(chainEid,i,chainEidl+1);
          2821 | 		ü
          2822 | 		else chainEid =0;
          2823 | 		prev=next=0;
          2824 | 	ü
          2825 |
          2826 | 	chainE(const mvsSTRING * s)
          2827 | 	ä
          2828 | 		if (s)
          2829 | 		ä
          2830 | 			chainEidl = int((mvsSTRING *)s->lengthOf());
          2831 | 			chainEid = new charÄchainEidl+1Ü;
          2832 | 			memcpy(chainEid,(char *)mvsSTRING(*s),chainEidl+1);
          2833 | 		ü
          2834 | 		else chainEid =0;
          2835 | 		prev=next=0;
          2836 | 	ü
          2837 | 	virtual ßchainE()
          2838 | 	ä
          2839 | 		delete chainEid ;
          2840 | 	ü
          2841 | 	virtual void print()äü
          2842 | ü;
          2843 |
          2844 |
          2845 | class mCHAIN ä
          2846 |
          2847 | protected:
          2848 | 	chainE * first;
          2849 | 	chainE * last ;
          2850 |
          2851 | 	chainE * pgo;
          2852 | 	long int    counter;
          2853 | public:
          2854 | 	friend class CHAINITER ;
          2855 |
          2856 | 	mCHAIN()
          2857 | 	ä
          2858 |
          2859 | 		first = last = pgo = 0; counter = 0;
          2860 | 	ü
          2861 |
          2862 | 	mCHAIN(chainE * nc)
          2863 | 	ä
          2864 | 		pgo = 0;
          2865 | 		first = nc ; last = nc ;
          2866 | 		counter = 1;
          2867 | 	ü
          2868 |
          2869 | 	virtual ßmCHAIN();
          2870 | 	virtual   long int    add(chainE * nc,chainE * c,long int code = 1);
          2871 | 	virtual long int addfirst(chainE * nc )
          2872 | 	ä return add(nc,first,-1) ; ü
          2873 | 	virtual long int addlast(chainE * nc )
          2874 | 	ä return add(nc,last,+1) ; ü
          2875 | 	virtual long int before(chainE * nc , chainE * c)
          2876 | 	äreturn add(nc,c,-1);ü
          2877 | 	virtual long int after(chainE * nc , chainE * c)
          2878 | 	äreturn add(nc,c,+1);ü
          2879 | 	virtual long int del(chainE * c);
          2880 | 	virtual void swap(chainE * a , chainE * b);
          2881 |
          2882 |
          2883 |
          2884 | 	virtual chainE* goNext();
          2885 | 	virtual chainE* goPrev();
          2886 | 	virtual chainE* goFirst();
          2887 | 	virtual chainE* goLast();
          2888 | 	virtual chainE* go(int);
          2889 | 	virtual chainE * searchEQ(const char * id,size_t =0);
          2890 | 	virtual chainE * search(const char * id,size_t =0);
          2891 | 	virtual chainE * search(const mvsSTRING &);
          2892 | 	virtual chainE * search(char *id,size_t length =0)ä return search((conÖ
          2893 | st char *)id,length);ü
          2894 | 	virtual chainE * search(mvsSTRING &s)ä return search((const mvsSTRING&Ö
          2895 | )s);ü
          2896 |
          2897 | 	virtual void sort(long int direction);
          2898 | 	virtual void print_all_ids();
          2899 | 	virtual void print();
          2900 | 	friend int idcmp(chainE* , chainE*);
          2901 | ü;
          2902 |
          2903 | enum SORTEDTYPEäUNIQUE =0 ,NOUNIQUE =1 ü;
          2904 |
          2905 | class SORTEDmCHAIN:public mCHAIN
          2906 | ä
          2907 | private:
          2908 | 	SORTEDTYPE unique;
          2909 | public:
          2910 | 	SORTEDmCHAIN(SORTEDTYPE st = UNIQUE):
          2911 | 			mCHAIN(), unique(st)äü;
          2912 | 			SORTEDmCHAIN(chainE *nc, SORTEDTYPE st = UNIQUE)
          2913 | 				:mCHAIN(nc), unique(st)äü;
          2914 | 			long int add(chainE * nc,chainE * = 0,long int = 0);
          2915 | 			virtual ßSORTEDmCHAIN()äü
          2916 | ü;
          2917 |
          2918 | class mSTACK:public mCHAIN
          2919 | ä
          2920 | private:
          2921 | public:
          2922 | 	mSTACK():mCHAIN()äü
          2923 | 	mSTACK(chainE * nc):mCHAIN(nc)äü
          2924 |
          2925 | 	virtual long int push(chainE * nc)äreturn addlast(nc);ü
          2926 | 	virtual chainE * examine(int i = 0 )
          2927 | 	ä
          2928 | 		if ( i >= 0 ) return last;
          2929 | 		i = -i;
          2930 | 		if ( counter-i < 0 ) return 0;
          2931 | 		return go(counter-i);
          2932 |
          2933 | 	ü
          2934 | 	virtual chainE * pop()ächainE * r = last; if (last) del(last);return rÖ
          2935 | ;ü
          2936 | ü;
          2937 |
          2938 | class mHASH:public mCHAIN
          2939 | ä
          2940 | private:
          2941 | 	chainE * * table;
          2942 | 	int    hash;
          2943 | 	int		pi;
          2944 | public:
          2945 | 	mHASH(int h = 1023);
          2946 | 	ßmHASH();
          2947 | 	long int add(chainE *);
          2948 | 	long int del(chainE *);
          2949 | 	chainE * next();
          2950 | 	chainE * search(chainE *);
          2951 | private:
          2952 | 	size_t  hashCode(chainE *c)
          2953 | 	ä
          2954 | 		int r = 0;
          2955 | 		if (c->chainEid)
          2956 | 			for (int i = c->chainEidl;i;i--)
          2957 | 				r = (r<<1) ¬ (c->chainEidÄi-1Ü) ;
          2958 | 		return size_t(r<0 ? -r:r);
          2959 | 	ü
          2960 | ü;
          2961 |
          2962 | class CHAINITERä
          2963 | private:
          2964 | 	mCHAIN * c;
          2965 | 	chainE * a;
          2966 | public:
          2967 | 	CHAINITER(mCHAIN &ch) äc = &ch ; a = (c->first ? c->first:0) ; ü
          2968 | 	CHAINITER(mCHAIN *ch) äc =  ch ; a = (c->first ? c->first:0) ; ü
          2969 | 	ßCHAINITER()äü
          2970 | 	chainE * next() ä
          2971 |
          2972 | 		chainE * r = a ;
          2973 | 		if ( a == 0 ) a =c->first ;
          2974 | 		else a = a->next ;
          2975 | 		return r;
          2976 | 	ü
          2977 | 	chainE * operator()()ä return next(); ü
          2978 | 	void reset() ä a = (c ? c->first:0);ü
          2979 | ü;
          2980 |
          2981 | int idcmp(chainE* , chainE*);
          2982 |
          2983 |
          2984 |
          2985 |
          2986 |
          2987 |
          2988 |
          2989 |
          2990 |
          2991 |
          2992 | class JOBENV
          2993 | ä
          2994 | public:
          2995 | enum JOBENV_ACTION
          2996 | ä
          2997 | 	Abort,
          2998 |    Continue
          2999 | ü;
          3000 | public:
          3001 |     mvsSTRING jobName;
          3002 |     mvsSTRING jobId;
          3003 |     mvsSTRING stepName;
          3004 |     mvsSTRING procStepName;
          3005 |     mvsSTRING program;
          3006 | 		mvsSTRING programRb;
          3007 |     static int  debug;
          3008 | public:
          3009 |     JOBENV(char *);
          3010 |     ßJOBENV()äü
          3011 |     void print();
          3012 |     void static Error(char *,JOBENV_ACTION);
          3013 |     int  static DEBUG(int,char*);
          3014 |     int  static DEBUG(int,char*,int);
          3015 |     int  static DEBUG(int,size_t);
          3016 |     int  static DEBUG(int,char*,char*);
          3017 |     int  static DEBUG(int,char*,char*,char*);
          3018 |     int  static DEBUG(int,char*,char*,char*,char*);
          3019 |     int  static DEBUG(int,char*,char *,int);
          3020 | ü;
          3021 |
          3022 | extern JOBENV * jobEnv;
          3023 |
          3024 |
          3025 |
          3026 | const short  eiop00  = 0;
          3027 | const short  eiop01  = 1;
          3028 | const short  eiop02  = 2;
          3029 | const short  eiop03  = 3;
          3030 | const short  eiop04  = 4;
          3031 | const short  eiop05  = 5;
          3032 | const short  eiop06  = 6;
          3033 | const short  eiop07  = 7;
          3034 | const short  eiop08  = 8;
          3035 | const short  eiop09  = 9;
          3036 | const short  eiop10  =10;
          3037 | const short  eiop11  =11;
          3038 | const short  eiop12  =12;
          3039 | const short  eiop13  =13;
          3040 | const short  eiop14  =14;
          3041 | const short  eiop15  =15;
          3042 | const short  eiop16  =16;
          3043 | const short  eiop17  =17;
          3044 | const short  eiop18  =18;
          3045 | const short  eiop19  =19;
          3046 | const short  eiop20  =20;
          3047 | const short  eiop21  =21;
          3048 | const short  eiop22  =22;
          3049 | const short  eiop23  =23;
          3050 | const short  eiop24  =24;
          3051 | const short  eiop25  =25;
          3052 | const short  eiop26  =26;
          3053 |
          3054 | const int eirc_ok    = 0;
          3055 | const int eirc_replace    = 4;
          3056 | const int eirc_insert    = 8;
          3057 | const int eirc_delete    = 12;
          3058 | const int eirc_modified  = 16;
          3059 | const int eirc_disconnect  = 20;
          3060 | const int eirc_disconnect_after = 24;
          3061 | const int eirc_wtor        = 28;
          3062 | const int eirc_end_function= 32;
          3063 | const int eirc_end_dataset = 36;
          3064 |
          3065 |
          3066 | extern const char * ADRDSSU;
          3067 | extern const char * KEYWORD_INCLUDE_MARK;
          3068 | extern const char * KEYWORD_DUMP;
          3069 | extern const char * KEYWORD_RESTORE;
          3070 | extern const char * KEYWORD_DB_PLAN;
          3071 | extern const char * KEYWORD_DB_SUBSYS;
          3072 | extern const char * KEYWORD_PREFIX;
          3073 | extern const char * KEYWORD_SYSIN;
          3074 | extern const char * KEYWORD_ADR012I;
          3075 | extern const char * KEYWORD_DEBUG;
          3076 | extern const char * KEYWORD_COMPR;
          3077 | extern const char * KEYWORD_REFDT;
          3078 | extern const char * KEYWORD_SQLFILE;
          3079 | extern const char * KEYWORD_DIRECT;
          3080 | extern const char * KEYWORD_MAXLENGTH;
          3081 | extern const char * KEYWORD_USEDB2;
          3082 | extern const char * KEYWORD_USEDB2_FILE;
          3083 |
          3084 |
          3085 |
          3086 |
          3087 |
          3088 |
          3089 | extern "OS" int UIMASM(...);
          3090 |
          3091 |
          3092 |
          3093 |
          3094 |
          3095 |
          3096 |
          3097 |
          3098 |
          3099 |
          3100 |
          3101 |
          3102 |
          3103 |
          3104 |
          3105 |
          3106 |
          3107 |
          3108 |
          3109 |
          3110 | const  unsigned PSATOLD = 0x21c;
          3111 | const  unsigned PSAAOLD = 0x224;
          3112 | const  unsigned TCBFSA  = 0x70/4;
          3113 | const  unsigned TCBUSER = 0xA8;
          3114 | const  unsigned tcbuser = 0xa8;
          3115 | const  unsigned SAVEr1  = 0x18/4;
          3116 | static unsigned POSTcode = 0x40000000;
          3117 | static unsigned WAITcode = 0x80000000;
          3118 |
          3119 | class SUBTASK;
          3120 | class JOBENV;
          3121 |
          3122 |
          3123 | typedef void       (*SUBTASK_FUNCTION)(void*);
          3124 | typedef void       * addressP;
          3125 | inline addressP getASCB()äreturn(*(addressP*)PSAAOLD);ü
          3126 | inline addressP getTCB()äreturn (*(addressP *)PSATOLD);ü
          3127 |
          3128 |
          3129 | enum SUBTASK_STATUS
          3130 | ä
          3131 |     Reset,
          3132 |     Started,
          3133 |     WaitingForWork,
          3134 |     WaitingForMain,
          3135 |     Working,
          3136 |     Stopping
          3137 | ü;
          3138 | typedef struct PROGRAM_ARGUMENTS ä
          3139 |   short  arg_l;
          3140 |   char   arg_vÄ1024Ü;
          3141 |   ü programArguments;
          3142 |
          3143 |  class SUBTASK: public mERROR
          3144 | ä
          3145 | private:
          3146 |   char * dll;
          3147 | protected:
          3148 |   MessageTEXT * messageText;
          3149 |   JOBENV *      jobEnv;
          3150 |   void * TCB;
          3151 |   unsigned ECB;
          3152 |   unsigned StopECB;
          3153 |   unsigned WorkECB;
          3154 |   unsigned MainECB;
          3155 |   unsigned SuspendECB;
          3156 |   unsigned *  ecblistÄ2Ü;
          3157 |    void(* address)(void);
          3158 |   void (*subrun)();
          3159 |   int R15 ;
          3160 |   SUBTASK_FUNCTION functionsÄ4Ü;
          3161 |   void  * argÄ4Ü;
          3162 |   int subtask_rc;
          3163 |   int suspendflag;
          3164 |   SUBTASK_STATUS status;
          3165 |   char   nameÄ9Ü;
          3166 |   char   subtaskposted;
          3167 |   char   first_start;
          3168 |   int    timeout;
          3169 | public:
          3170 |   friend void run();
          3171 |   SUBTASK();
          3172 |   SUBTASK(char *);
          3173 |   SUBTASK(addressP,SUBTASK_FUNCTION,char*);
          3174 |   SUBTASK(int,char * *,char *,char *);
          3175 |   virtual ßSUBTASK();
          3176 |   virtual int    attach();
          3177 |   virtual int    detach();
          3178 |   virtual int    callAsync(int);
          3179 |   virtual int    callSync(int);
          3180 |   virtual int    waitForSubtask();
          3181 |   virtual int    waitForEndOfSubtask();
          3182 |   virtual void   start();
          3183 |   virtual void   stop();
          3184 |   virtual void   chap(int);
          3185 |   virtual void   exit(int);
          3186 |   virtual int    isTerminated()ä return (ECB&0x7fffffff);ü
          3187 |   SUBTASK_STATUS askStatus()äreturn status;ü
          3188 |   MessageTEXT * getMessageText()äreturn messageText;ü
          3189 |   JOBENV      * getJobEnv()äreturn jobEnv;ü
          3190 |   addressP      getParam()äreturn(addressP(argV));ü
          3191 |   addressP      getTCB()äreturn(addressP(TCB));ü
          3192 |   int           getTimeout()äreturn timeout;ü
          3193 |   char *        getDllName()ä return dll;ü
          3194 |   void          setDllName(char *d)ä dll = d;ü
          3195 |   char * *  argV;
          3196 |   int       argC;
          3197 |
          3198 | static addressP GetTCB()äreturn (*(addressP *)PSATOLD);ü
          3199 | static addressP GetASCB()äreturn(*(addressP*)PSAAOLD);ü
          3200 |
          3201 | protected:
          3202 |   int    checkR15(char *);
          3203 |   void   init(char *);
          3204 |   void   error(char *);
          3205 | ü;
          3206 |
          3207 |  class DLL_SUBTASK
          3208 | ä
          3209 | private:
          3210 | public:
          3211 |   SUBTASK * subtask;
          3212 |   DLL_SUBTASK(int,char * *,char *,char * = "SUBRUN ");
          3213 |   ßDLL_SUBTASK();
          3214 |   void      start()äsubtask->start();ü
          3215 |   void      stop()äsubtask->stop();ü
          3216 |   int       detach()äreturn(subtask->detach());ü
          3217 |   addressP  getTCB()äreturn(subtask->getTCB());ü
          3218 | ü;
          3219 |
          3220 |  class MAIN_SUBTASK:public SUBTASK
          3221 | ä
          3222 | private:
          3223 | mvsSTRING startmvsSTRING;
          3224 |  void * plistÄ1Ü;
          3225 | programArguments   argument;
          3226 | programArguments * argumentP;
          3227 | public:
          3228 |  MAIN_SUBTASK();
          3229 |  MAIN_SUBTASK(int,char * *,char *);
          3230 |  MAIN_SUBTASK(programArguments *,char * );
          3231 |  virtual int  attach();
          3232 | ü;
          3233 |
          3234 |                    #pragma nomargins nosequence
          3235 |                    #pragma checkout(suspend)
          3236 |
          3237 |
          3238 |
          3239 |     extern "C" ä
          3240 |
          3241 |
          3242 |
          3243 |
          3244 |
          3245 |
          3246 |
          3247 |
          3248 |                    #pragma nomargins nosequence
          3249 |                    #pragma checkout(suspend)
          3250 |
          3251 |
          3252 |
          3253 |     extern "C" ä
          3254 |
          3255 |
          3256 |
          3257 |
          3258 |
          3259 |
          3260 |
          3261 |
          3262 |
          3263 |
          3264 |
          3265 |
          3266 |
          3267 |
          3268 |
          3269 |
          3270 |
          3271 |
          3272 |
          3273 |
          3274 |
          3275 |
          3276 |
          3277 |
          3278 |
          3279 |
          3280 |
          3281 |
          3282 |
          3283 |
          3284 |
          3285 |
          3286 |
          3287 |
          3288 |
          3289 |
          3290 |
          3291 |
          3292 |
          3293 |
          3294 |   ü
          3295 |
          3296 |                    #pragma checkout(resume)
          3297 |
          3298 |
          3299 |
          3300 |
          3301 |
          3302 |
          3303 |
          3304 |
          3305 |
          3306 |
          3307 |
          3308 |
          3309 |
          3310 |
          3311 |
          3312 |
          3313 |
          3314 |
          3315 |
          3316 |
          3317 |
          3318 |
          3319 |       struct flock ä
          3320 |             short l_type;
          3321 |             short l_whence;
          3322 |                int   l_rsrvd1;
          3323 |             off_t l_start;
          3324 |                int   l_rsrvd2;
          3325 |             off_t l_len;
          3326 |             pid_t l_pid;
          3327 |       ü;
          3328 |
          3329 |
          3330 |
          3331 |
          3332 |         int creat(const char *, mode_t) ;
          3333 |         int fcntl(int, int, ... );
          3334 |         int open(const char *, int, ... );
          3335 |
          3336 |
          3337 |
          3338 |
          3339 |
          3340 |
          3341 |
          3342 |
          3343 |
          3344 |
          3345 |
          3346 |      ü
          3347 |
          3348 |                    #pragma checkout(resume)
          3349 |                    #pragma nomargins nosequence
          3350 |                    #pragma checkout(suspend)
          3351 |
          3352 |
          3353 |
          3354 |   extern "C" ä
          3355 |
          3356 |
          3357 |
          3358 |
          3359 |
          3360 |
          3361 |
          3362 |
          3363 |
          3364 |
          3365 |
          3366 |
          3367 |
          3368 |
          3369 |
          3370 |
          3371 |
          3372 |
          3373 |
          3374 |
          3375 |
          3376 |
          3377 |
          3378 |
          3379 |
          3380 |
          3381 |
          3382 |
          3383 |
          3384 |
          3385 |
          3386 |
          3387 |
          3388 |
          3389 |
          3390 |
          3391 |
          3392 |
          3393 |
          3394 |
          3395 |
          3396 |
          3397 |
          3398 |
          3399 |
          3400 |
          3401 |
          3402 |
          3403 |
          3404 |
          3405 |
          3406 |
          3407 |
          3408 |
          3409 |
          3410 |
          3411 |
          3412 |
          3413 |
          3414 |
          3415 |
          3416 |
          3417 |
          3418 |
          3419 |
          3420 |
          3421 |
          3422 |
          3423 |                #pragma map (getlogin, "Ö174Ö174GETLG2")
          3424 |
          3425 |
          3426 |          #pragma map (__getlogin1, "Ö174Ö174GETLOG")
          3427 |          #pragma map (__pid_affinity,"Ö174Ö174PIDÖ174AF")
          3428 |
          3429 |           #pragma map(__login_applid,"Ö174Ö174LOGNAP")
          3430 |          #pragma map(__certificate,"Ö174Ö174CERTIF")
          3431 |
          3432 |            void _exit(int);
          3433 |            int   access(const char *, int );
          3434 |            int   __certificate(int, int, char *, ...);
          3435 |            unsigned int alarm(unsigned int);
          3436 |            int   chdir(const char *);
          3437 |            int   chown(const char *, uid_t, gid_t);
          3438 |            int   close(int);
          3439 |            char *ctermid(char *);
          3440 |            int   dup(int);
          3441 |            int   dup2(int, int);
          3442 |            int   execl(const char *, const char *, ... );
          3443 |            int   execle(const char *, const char *, ... );
          3444 |            int   execlp(const char *, const char *, ... );
          3445 |            int   execv(const char *, char *const ÄÜ);
          3446 |            int   execve(const char *, char *const ÄÜ, char * const ÄÜ);
          3447 |            int   execvp(const char *, char *const ÄÜ );
          3448 |            pid_t fork(void);
          3449 |            long  fpathconf(int, int);
          3450 |            char *getcwd(char *, size_t);
          3451 |            gid_t getegid(void);
          3452 |            uid_t geteuid(void);
          3453 |            gid_t getgid(void);
          3454 |            int   getgroups(int, gid_t ÄÜ);
          3455 |              int   getgroupsbyname(char ÄÜ, int, gid_t ÄÜ);
          3456 |              int   __osenv(int, int, __osenv_token *);
          3457 |            char *__getlogin1(void);
          3458 |            char *getlogin(void);
          3459 |            pid_t getpgrp(void);
          3460 |            pid_t getpid(void);
          3461 |            pid_t getppid(void);
          3462 |            uid_t getuid(void);
          3463 |            int   isatty(int);
          3464 |            int   link(const char *, const char *);
          3465 |            int __login(int, int, int, void *, int, char *,
          3466 |                          int, char *, int);
          3467 |            off_t lseek(int, off_t, int);
          3468 |            long  pathconf(const char *, int);
          3469 |            int   pause(void);
          3470 |            int   __pid_affinity(int, pid_t, pid_t, int);
          3471 |            int   pipe(int Ä2Ü);
          3472 |            ssize_t read(int, void *, size_t);
          3473 |            int   rmdir(const char *);
          3474 |            int   setgid(gid_t);
          3475 |            int   setpgid(pid_t, pid_t);
          3476 |            pid_t setsid(void);
          3477 |            int   setuid(uid_t);
          3478 |            unsigned int sleep(unsigned int );
          3479 |            long  sysconf(int);
          3480 |            pid_t tcgetpgrp(int);
          3481 |            int   tcsetpgrp(int, pid_t);
          3482 |            char *ttyname(int);
          3483 |            int   unlink(const char *);
          3484 |            ssize_t write(int, const void *, size_t);
          3485 |
          3486 |          int __login_applid(int, int, int, void *, int, char *, int, chÖ
          3487 | ar *, int, const char *);
          3488 |
          3489 |
          3490 |
          3491 |
          3492 |
          3493 |
          3494 |
          3495 |
          3496 |
          3497 |
          3498 |
          3499 |
          3500 |
          3501 |
          3502 |
          3503 |
          3504 |            int   fchown(int , uid_t, gid_t);
          3505 |            int   fsync(int);
          3506 |            int   ftruncate(int, off_t);
          3507 |            int   readlink(const char *, char *, size_t );
          3508 |            int   setegid(gid_t);
          3509 |            int   seteuid(uid_t);
          3510 |            int   symlink(const char *, const char *);
          3511 |              int   extlink_np(const char *, const char *);
          3512 |
          3513 |
          3514 |
          3515 |
          3516 |
          3517 |
          3518 |
          3519 |
          3520 |
          3521 |
          3522 |
          3523 |
          3524 |
          3525 |
          3526 |
          3527 |
          3528 |
          3529 |
          3530 |
          3531 |
          3532 |
          3533 |
          3534 |
          3535 |
          3536 |
          3537 |
          3538 |
          3539 |
          3540 |
          3541 |
          3542 |
          3543 |
          3544 |
          3545 |
          3546 |           extern char *optarg;
          3547 |           extern int optind, opterr, optopt;
          3548 |
          3549 |
          3550 |
          3551 |
          3552 |
          3553 |
          3554 |
          3555 |
          3556 |
          3557 |
          3558 |
          3559 |
          3560 |
          3561 |
          3562 |
          3563 |
          3564 |
          3565 |
          3566 |
          3567 |
          3568 |
          3569 |
          3570 |
          3571 |
          3572 |
          3573 |
          3574 |
          3575 |
          3576 |
          3577 |
          3578 |
          3579 |
          3580 |
          3581 |              void         __cnvblk(char ÄÜ, char ÄÜ, int);
          3582 |                int          chroot(const char *);
          3583 |              char        *crypt(const char *, const char *);
          3584 |              void         encrypt(char Ä64Ü, int);
          3585 |              int          nice(int);
          3586 |            extern char **__opargf(void);
          3587 |            extern int  *__operrf(void);
          3588 |            extern int  *__opindf(void);
          3589 |            extern int  *__opoptf(void);
          3590 |            size_t       confstr(int, char *, size_t);
          3591 |              char        *cuserid(char *);
          3592 |            int          getopt(int, char * const ÄÜ, const char *);
          3593 |              char        *getpass(const char *);
          3594 |            void         swab(const void *restrict,
          3595 |                                    void *restrict, ssize_t);
          3596 |
          3597 |
          3598 |
          3599 |
          3600 |
          3601 |
          3602 |                    #pragma nomargins nosequence
          3603 |                    #pragma checkout(suspend)
          3604 |
          3605 |
          3606 |
          3607 |     extern "C" ä
          3608 |
          3609 |
          3610 |
          3611 |
          3612 |                    #pragma nomargins nosequence
          3613 |                    #pragma checkout(suspend)
          3614 |
          3615 |
          3616 |
          3617 |     extern "C" ä
          3618 |
          3619 |
          3620 |
          3621 |
          3622 |
          3623 |
          3624 |        typedef    signed  char   int8_t;
          3625 |        typedef    signed  short  int16_t;
          3626 |        typedef    signed  int    int32_t;
          3627 |
          3628 |
          3629 |        typedef signed long long  int64_t;
          3630 |
          3631 |
          3632 |
          3633 |
          3634 |        typedef  unsigned  char  uint8_t;
          3635 |
          3636 |
          3637 |        typedef  unsigned  short uint16_t;
          3638 |
          3639 |
          3640 |        typedef  unsigned  int   uint32_t;
          3641 |
          3642 |        typedef unsigned long long uint64_t;
          3643 |
          3644 |        typedef    signed long    intptr_t;
          3645 |        typedef  unsigned long   uintptr_t;
          3646 |
          3647 |
          3648 |
          3649 |     ü
          3650 |
          3651 |                    #pragma checkout(resume)
          3652 |
          3653 |
          3654 |
          3655 |
          3656 |     ü
          3657 |
          3658 |                    #pragma checkout(resume)
          3659 |
          3660 |
          3661 |
          3662 |
          3663 |
          3664 |
          3665 |
          3666 |
          3667 |
          3668 |
          3669 |
          3670 |
          3671 |
          3672 |
          3673 |
          3674 |
          3675 |
          3676 |
          3677 |
          3678 |
          3679 |
          3680 |
          3681 |
          3682 |
          3683 |
          3684 |
          3685 |
          3686 |              int          fchdir(int);
          3687 |                int          getdtablesize(void);
          3688 |              pid_t        getpgid(pid_t);
          3689 |              pid_t        getsid(pid_t);
          3690 |              char        *getwd(char *);
          3691 |              int          lchown(const char *, uid_t, gid_t);
          3692 |              int          setregid(gid_t, gid_t);
          3693 |              int          setreuid(uid_t, uid_t);
          3694 |              void         sync(void);
          3695 |              int          truncate(const char *, off_t);
          3696 |              useconds_t    ualarm(useconds_t, useconds_t);
          3697 |              int          brk(void *);
          3698 |              int          getpagesize(void);
          3699 |                void        *sbrk(intptr_t);
          3700 |            int          lockf(int, int, off_t);
          3701 |            pid_t        setpgrp(void);
          3702 |            int          usleep(useconds_t);
          3703 |            pid_t        vfork(void);
          3704 |
          3705 |
          3706 |
          3707 |
          3708 |
          3709 |
          3710 |
          3711 |
          3712 |
          3713 |
          3714 |
          3715 |       int getlogin_r(char *, size_t );
          3716 |       int ttyname_r(int, char *, size_t );
          3717 |
          3718 |
          3719 |       ssize_t pread(int, void *, size_t, off_t);
          3720 |
          3721 |       ssize_t pwrite(int, const void *, size_t, off_t);
          3722 |
          3723 |
          3724 |
          3725 |
          3726 |
          3727 |
          3728 |
          3729 |
          3730 |
          3731 |
          3732 |
          3733 |
          3734 |
          3735 |
          3736 |
          3737 |
          3738 |
          3739 |
          3740 |
          3741 |
          3742 |       int          __atoe(char *);
          3743 |       int          __atoe_l(char *, int);
          3744 |       int          __check_resource_auth_np(char *, char *, char *,
          3745 |                                             char *, char *, int);
          3746 |       int          __convert_id_np( int, char *, char *, char *);
          3747 |       int          __etoa(char *);
          3748 |       int          __etoa_l(char *, int);
          3749 |       int          __isPosixOn(void);
          3750 |       int          __openMvsRel(void);
          3751 |       int          __openVmRel(void);
          3752 |       int          __smf_record(int, int, int, char *);
          3753 |       int          __wsinit(void (*)());
          3754 |
          3755 |     int __smf_record2(int, int, int, char *, unsigned int);
          3756 |
          3757 |
          3758 |
          3759 |
          3760 |
          3761 |
          3762 |
          3763 |
          3764 |           long         gethostid(void);
          3765 |           int          gethostname(char *, size_t);
          3766 |
          3767 |
          3768 |
          3769 |
          3770 |
          3771 |
          3772 |
          3773 |
          3774 |
          3775 |
          3776 |
          3777 |
          3778 |
          3779 |
          3780 |
          3781 |
          3782 |       int __must_stay_clean(int);
          3783 |
          3784 |
          3785 |
          3786 |   ü
          3787 |
          3788 |                    #pragma checkout(resume)
          3789 |                    #pragma nomargins nosequence
          3790 |                    #pragma checkout(suspend)
          3791 |
          3792 |
          3793 |
          3794 |     extern "C" ä
          3795 |
          3796 |
          3797 |
          3798 |
          3799 |
          3800 |
          3801 |
          3802 |
          3803 |
          3804 |     int __errno2(void);
          3805 |     int *__err2ad(void);
          3806 |
          3807 |
          3808 |
          3809 |
          3810 |
          3811 |
          3812 |
          3813 |
          3814 |
          3815 |
          3816 |
          3817 |
          3818 |
          3819 |
          3820 |
          3821 |            extern int errno;
          3822 |            extern int *__errno(void);
          3823 |
          3824 |
          3825 |
          3826 |
          3827 |
          3828 |
          3829 |
          3830 |
          3831 |
          3832 |
          3833 |
          3834 |
          3835 |
          3836 |
          3837 |
          3838 |
          3839 |
          3840 |
          3841 |
          3842 |
          3843 |
          3844 |
          3845 |
          3846 |
          3847 |
          3848 |
          3849 |
          3850 |
          3851 |
          3852 |
          3853 |
          3854 |
          3855 |
          3856 |
          3857 |
          3858 |
          3859 |
          3860 |
          3861 |
          3862 |
          3863 |
          3864 |
          3865 |
          3866 |
          3867 |
          3868 |
          3869 |
          3870 |
          3871 |
          3872 |
          3873 |
          3874 |
          3875 |
          3876 |
          3877 |
          3878 |
          3879 |
          3880 |
          3881 |
          3882 |
          3883 |
          3884 |
          3885 |
          3886 |
          3887 |
          3888 |
          3889 |
          3890 |
          3891 |
          3892 |
          3893 |
          3894 |
          3895 |
          3896 |
          3897 |
          3898 |
          3899 |
          3900 |
          3901 |
          3902 |
          3903 |
          3904 |
          3905 |
          3906 |
          3907 |
          3908 |
          3909 |
          3910 |
          3911 |
          3912 |
          3913 |
          3914 |
          3915 |
          3916 |
          3917 |
          3918 |
          3919 |
          3920 |
          3921 |
          3922 |
          3923 |
          3924 |
          3925 |
          3926 |
          3927 |
          3928 |
          3929 |
          3930 |
          3931 |
          3932 |
          3933 |
          3934 |
          3935 |
          3936 |
          3937 |
          3938 |
          3939 |
          3940 |
          3941 |
          3942 |
          3943 |
          3944 |
          3945 |
          3946 |
          3947 |
          3948 |
          3949 |
          3950 |
          3951 |
          3952 |
          3953 |
          3954 |
          3955 |
          3956 |
          3957 |
          3958 |
          3959 |
          3960 |
          3961 |
          3962 |
          3963 |
          3964 |
          3965 |
          3966 |
          3967 |
          3968 |
          3969 |
          3970 |
          3971 |
          3972 |
          3973 |
          3974 |
          3975 |   ü
          3976 |
          3977 |                    #pragma checkout(resume)
          3978 |                    #pragma nomargins nosequence
          3979 |                    #pragma checkout(suspend)
          3980 |
          3981 |
          3982 |
          3983 |    extern "C" ä
          3984 |
          3985 |
          3986 |
          3987 |
          3988 |
          3989 |
          3990 |
          3991 |
          3992 |
          3993 |
          3994 |
          3995 |
          3996 |
          3997 |
          3998 |
          3999 |
          4000 |
          4001 |
          4002 |
          4003 |
          4004 |           int  bcmp (const void *, const void *, size_t);
          4005 |           void bcopy (const void *, void *, size_t);
          4006 |           void bzero (void *, size_t);
          4007 |           int ffs (int);
          4008 |           char * index  (const char *, int);
          4009 |           char * rindex (const char *, int);
          4010 |           int  strcasecmp (const char *, const char *);
          4011 |           int  strncasecmp (const char *, const char *, size_t);
          4012 |
          4013 |
          4014 |
          4015 |
          4016 |
          4017 |          extern "builtin"  ä
          4018 |
          4019 |          void * __memcpy (void *, const void *, size_t);
          4020 |          int    __memcmp (const void *, const void *, size_t);
          4021 |          void * __memset (void *, int, size_t);
          4022 |          char * __strchr (const char *, int);
          4023 |          char * __strrchr (const char *, int);
          4024 |
          4025 |          ü
          4026 |
          4027 |
          4028 |
          4029 |
          4030 |
          4031 |
          4032 |   ü
          4033 |
          4034 |                    #pragma checkout(resume)
          4035 |
          4036 |
          4037 |
          4038 |
          4039 |
          4040 |
          4041 |
          4042 |
          4043 |
          4044 | static const char fullQueryÄÜ =
          4045 | " SELECT * FROM DSSDATASETS A "
          4046 | " WHERE ( %m% ) AND "
          4047 | " ( DATE(KEY) <= DATE('%d%') ) AND "
          4048 | " ( "
          4049 | " A.KEY =  "
          4050 | " (SELECT MAX(B.KEY) FROM DSSDATASETS B WHERE A.DATASET = B.DATASET  "
          4051 | " AND DATE(B.KEY) <= DATE('%d%') ) "
          4052 | " ) " ;
          4053 |
          4054 |
          4055 | /***$$$
          4056 | EXEC SQL BEGIN DECLARE SECTION
          4057 | $$$***/
          4058 |
          4059 |
          4060 |
          4061 |
          4062 |
          4063 |
          4064 |
          4065 |
          4066 |
          4067 |
          4068 |
          4069 |
          4070 |
          4071 |
          4072 |
          4073 |
          4074 |
          4075 |
          4076 | typedef struct _TIMESTAMP
          4077 | ä
          4078 |   short len;
          4079 |   char  arrÄ28Ü;
          4080 | ü TIMESTAMP;
          4081 |
          4082 | struct _DssDatasetRecord
          4083 | ä
          4084 |    struct ä short len; char arr Ä 28 Ü ; ü key;
          4085 |    struct ä short len; char arr Ä 28 Ü ; ü job;
          4086 |    struct ä short len; char arr Ä 45 Ü ; ü dataset;
          4087 |    struct ä short len; char arr Ä 37 Ü ; ü volumes;
          4088 |    long int type;
          4089 |    long int recordsize;
          4090 | ü DssDatasetRecord;
          4091 |
          4092 | class TcbARCHSQL:public chainE
          4093 | ä
          4094 | private:
          4095 |    ARCHSQL * archsql;
          4096 | public:
          4097 |    TcbARCHSQL(char * t,ARCHSQL * a):chainE(t),archsql(a)
          4098 |    äü
          4099 |    ARCHSQL * get()äreturn archsql;ü
          4100 | ü;
          4101 |
          4102 | static char * initDynamicSql();
          4103 |
          4104 | class SQLINTERFACE:
          4105 |  public  mERROR
          4106 | ä
          4107 | protected:
          4108 |  static char * plan;
          4109 |  static char * subsystem;
          4110 |  static mCHAIN  tasks;
          4111 |  static ERROR_MESSAGE * error_message;
          4112 | protected:
          4113 |  static char * dSql;
          4114 | public:
          4115 | 	static bool useDB2;
          4116 | 	static FILE * fileDB2;
          4117 | public:
          4118 |  SQLINTERFACE();
          4119 |    ßSQLINTERFACE();
          4120 |    void diag(char *);
          4121 |    int  commit();
          4122 |    enum Error_Actionä Abort, Continueü;
          4123 |    void Error(char *,Error_Action);
          4124 |    ARCHSQL * connectDB();
          4125 |    void tryToConnect();
          4126 | ü;
          4127 |
          4128 | class DssJob:
          4129 |  public SQLINTERFACE,
          4130 |  public mCHAIN,
          4131 |  public CHAINITER,
          4132 |  public chainE
          4133 | ä
          4134 | private:
          4135 |    struct ä short len; char arr Ä 28 Ü ; ü t;
          4136 |    struct ä short len; char arr Ä 28 Ü ; ü record_key;
          4137 |    struct ä short len; char arr Ä 28 Ü ; ü record_job;
          4138 |    struct ä short len; char arr Ä 45 Ü ; ü record_dataset;
          4139 |    struct ä short len; char arr Ä 37 Ü ; ü record_volumes;
          4140 |    long int record_type;
          4141 |    long int record_size;
          4142 | public:
          4143 |    struct ä short len; char arr Ä 28 Ü ; ü timestamp;
          4144 |    struct ä short len; char arr Ä 9 Ü ; ü jobName;
          4145 |    struct ä short len; char arr Ä 9 Ü ; ü jobNumber;
          4146 |    struct ä short len; char arr Ä 9 Ü ; ü program;
          4147 |    struct ä short len; char arr Ä 255 Ü ; ü dataset;
          4148 |    long int datasetcount;
          4149 |    struct ä short len; char arr Ä 30000 Ü ; ü joblog;
          4150 |    struct ä short len; char arr Ä 32000 Ü ; ü dynamicSql;
          4151 | public:
          4152 |   static mCHAIN dssJobs;
          4153 |   static int    allOnline();
          4154 |   int    doWeNeed(const char *);
          4155 | public:
          4156 |  DssJob();
          4157 |  DssJob(TIMESTAMP&);
          4158 |  DssJob(const char *);
          4159 |  virtual ßDssJob();
          4160 |  int insert();
          4161 |  int query(mCHAIN*,char * =0);
          4162 |  char * getDatasetName()
          4163 | ä
          4164 |   return ((char *)dataset.arr);
          4165 | ü
          4166 | private:
          4167 |  void init();
          4168 | ü;
          4169 |
          4170 | class DssDataset:
          4171 |  public SQLINTERFACE,
          4172 |  public chainE
          4173 | ä
          4174 | private:
          4175 |  DssJob * job;
          4176 | public:
          4177 |    struct ä short len; char arr Ä 28 Ü ; ü timestamp;
          4178 |    struct ä short len; char arr Ä 45 Ü ; ü dataset;
          4179 |    struct ä short len; char arr Ä 37 Ü ; ü volumes;
          4180 |    long int type;
          4181 |    long int recordsize;
          4182 | public:
          4183 |  DssDataset(DssJob *,char *,char *,int = 0,int =0);
          4184 |  int compare(const char *n)
          4185 |    ä
          4186 |    for(int i =0;i<45&&dataset.arrÄiÜ&&dataset.arrÄiÜ-' '&&nÄiÜ&&nÄiÜ-' Ö
          4187 | ';i++)
          4188 |      if (dataset.arrÄiÜ - nÄiÜ) return 0;
          4189 |    return 1;
          4190 |    ü
          4191 |    virtual ßDssDataset();
          4192 |    int insert();
          4193 | ü;
          4194 |
          4195 | /***$$$
          4196 | EXEC SQL END DECLARE SECTION
          4197 | $$$***/
          4198 |
          4199 | /***$$$
          4200 | EXEC SQL INCLUDE SQLDA
          4201 | $$$***/
          4202 | #ifndef  SQLDASIZE                 /* Permit duplicate Includes      */
          4203 |  /**/
          4204 |  struct sqlvar
          4205 |         ä short  sqltype;
          4206 |           short  sqllen;
          4207 |           char  *sqldata;
          4208 |           short *sqlind;
          4209 |           struct sqlname
          4210 |                 ä short  length;
          4211 |                   char   data??(30??);
          4212 |                 ü sqlname;
          4213 |         ü;
          4214 |  /**/
          4215 |  struct sqlvar2
          4216 |         ä struct
          4217 |                 ä long   sqllonglen;
          4218 |          unsigned long   reserved;
          4219 |                 ü len;
          4220 |           char  *sqldatalen;
          4221 |           struct sqldistinct_type
          4222 |                 ä short  length;
          4223 |                   char   data??(30??);
          4224 |                 ü sqldatatype_name;
          4225 |         ü;
          4226 |  /**/
          4227 |  struct sqlda
          4228 |         ä char   sqldaid??(8??);
          4229 |           long   sqldabc;
          4230 |           short  sqln;
          4231 |           short  sqld;
          4232 |           struct sqlvar sqlvar??(1??);
          4233 |     ü;
          4234 |  /**/
          4235 | /*********************************************************************/
          4236 | /* Macros for using the sqlvar2 fields.                              */
          4237 | /*********************************************************************/
          4238 |  /**/
          4239 | /*********************************************************************/
          4240 | /*   '2' in the 7th byte of sqldaid indicates a doubled number of    */
          4241 | /*       sqlvar entries.                                             */
          4242 | /*   '3' in the 7th byte of sqldaid indicates a tripled number of    */
          4243 | /*       sqlvar entries.                                             */
          4244 | /*********************************************************************/
          4245 | #define   SQLDOUBLED  '2'
          4246 | #define   SQLTRIPLED  '3'
          4247 | #define   SQLSINGLED  ' '
          4248 |  /**/
          4249 | /*********************************************************************/
          4250 | /* GETSQLDOUBLED(daptr) returns 1 if the SQLDA pointed to by         */
          4251 | /* daptr has been doubled, or 0 if it has not been doubled.          */
          4252 | /*********************************************************************/
          4253 | #define GETSQLDOUBLED(daptr) Ö
          4254 |     (((daptr)->sqldaid??(6??) == ( char) SQLDOUBLED) ? Ö
          4255 |     (1)         : Ö
          4256 |     (0)           )
          4257 |  /**/
          4258 | /*********************************************************************/
          4259 | /* GETSQLTRIPLED(daptr) returns 1 if the SQLDA pointed to by         */
          4260 | /* daptr has been tripled, or 0 if it has not been tripled.          */
          4261 | /*********************************************************************/
          4262 | #define GETSQLTRIPLED(daptr) Ö
          4263 |     (((daptr)->sqldaid??(6??) == ( char) SQLTRIPLED) ? Ö
          4264 |     (1)         : Ö
          4265 |     (0)           )
          4266 |  /**/
          4267 | /*********************************************************************/
          4268 | /* SETSQLDOUBLED(daptr, SQLDOUBLED) sets the 7th byte of sqldaid     */
          4269 | /* to '2'.                                                         */
          4270 | /* SETSQLDOUBLED(daptr, SQLSINGLED) sets the 7th byte of sqldaid     */
          4271 | /* to be a ' '.                                                    */
          4272 | /*********************************************************************/
          4273 | #define SETSQLDOUBLED(daptr, newvalue) Ö
          4274 |     (((daptr)->sqldaid??(6??) = (newvalue)))
          4275 |  /**/
          4276 | /*********************************************************************/
          4277 | /* SETSQLTRIPLED(daptr) sets the 7th byte of sqldaid                 */
          4278 | /* to '3'.                                                         */
          4279 | /*********************************************************************/
          4280 | #define SETSQLTRIPLED(daptr) Ö
          4281 |     (((daptr)->sqldaid??(6??) = (SQLTRIPLED)))
          4282 |  /**/
          4283 | /*********************************************************************/
          4284 | /* GETSQLDALONGLEN(daptr,n) returns the data length of the nth       */
          4285 | /* entry in the sqlda pointed to by daptr. Use this only if the      */
          4286 | /* sqlda was doubled or tripled and the nth SQLVAR entry has a       */
          4287 | /* LOB datatype.                                                     */
          4288 | /*********************************************************************/
          4289 | #define GETSQLDALONGLEN(daptr,n)    (    Ö
          4290 |     (long) (((struct sqlvar2 *) &((daptr)->sqlvar??((n) + Ö
          4291 |            ((daptr)->sqld)??))) Ö
          4292 |             ->len.sqllonglen))
          4293 |  /**/
          4294 | /*********************************************************************/
          4295 | /* SETSQLDALONGLEN(daptr,n,len) sets the sqllonglen field of the     */
          4296 | /* sqlda pointed to by daptr to len for the nth entry. Use this only */
          4297 | /* if the sqlda was doubled or tripled and the nth SQLVAR entry has  */
          4298 | /* a LOB datatype.                                                   */
          4299 | /*********************************************************************/
          4300 | #define SETSQLDALONGLEN(daptr,n,length)  ä Ö
          4301 |     struct sqlvar2     *var2ptr; Ö
          4302 |     var2ptr = (struct sqlvar2 *) Ö
          4303 |         &((daptr)->sqlvar??((n) + ((daptr)->sqld)??)); Ö
          4304 |     var2ptr->len.sqllonglen  =  (long ) (length); Ö
          4305 |     ü
          4306 |  /**/
          4307 | /*********************************************************************/
          4308 | /* GETSQLDALENPTR(daptr,n) returns a pointer to the data length for  */
          4309 | /* the nth entry in the sqlda pointed to by daptr. Unlike the inline */
          4310 | /* value (union sql8bytelen len), which is 8 bytes, the sqldatalen   */
          4311 | /* pointer field returns a pointer to a long (4 byte) integer.       */
          4312 | /* If the SQLDATALEN pointer is zero, a NULL pointer is be returned. */
          4313 | /*                                                                   */
          4314 | /* NOTE: Use this only if the sqlda has been doubled or tripled.     */
          4315 | /*********************************************************************/
          4316 | #define GETSQLDALENPTR(daptr,n) (   Ö
          4317 |     (((struct sqlvar2 *) &(daptr)->sqlvar??((n) + (daptr)->sqld??)) Ö
          4318 |                            ->sqldatalen == NULL) ? Ö
          4319 |     ((long *) NULL ) : Ö
          4320 |     ((long *) ((struct sqlvar2 *) Ö
          4321 |         &(daptr)->sqlvar??((n) + (daptr)->sqld??)) Ö
          4322 |                                     ->sqldatalen ) )
          4323 |  /**/
          4324 | /*********************************************************************/
          4325 | /* SETSQLDALENPTR(daptr,n,ptr) sets a pointer to the data length for */
          4326 | /* the nth entry in the sqlda pointed to by daptr.                   */
          4327 | /* Use this only if the sqlda has been doubled or tripled.           */
          4328 | /*********************************************************************/
          4329 | #define SETSQLDALENPTR(daptr,n,ptr)  ä  Ö
          4330 |     struct sqlvar2 *var2ptr;    Ö
          4331 |     var2ptr = (struct sqlvar2 *) Ö
          4332 |         &((daptr)->sqlvar??((n) + ((daptr)->sqld)??)); Ö
          4333 |     var2ptr->sqldatalen  = (char *) ptr; Ö
          4334 |     ü
          4335 |  /**/
          4336 | #define SQLDASIZE(n) Ö
          4337 |    ( sizeof(struct sqlda) + ((n)-1) * sizeof(struct sqlvar) )
          4338 | #endif /* SQLDASIZE */
          4339 |
          4340 | /***$$$
          4341 | EXEC SQL INCLUDE SQLCA
          4342 | $$$***/
          4343 | #ifndef SQLCODE
          4344 | struct sqlca
          4345 |   ä unsigned  char     sqlcaid??(8??);
          4346 |               long     sqlcabc;
          4347 |               long     sqlcode;
          4348 |               short    sqlerrml;
          4349 |     unsigned  char     sqlerrmc??(70??);
          4350 |     unsigned  char     sqlerrp??(8??);
          4351 |               long     sqlerrd??(6??);
          4352 |     unsigned  char     sqlwarn??(11??);
          4353 |     unsigned  char     sqlstate??(5??);
          4354 |             ü ;
          4355 | #define SQLCODE  sqlca.sqlcode
          4356 | #define SQLWARN0 sqlca.sqlwarn??(0??)
          4357 | #define SQLWARN1 sqlca.sqlwarn??(1??)
          4358 | #define SQLWARN2 sqlca.sqlwarn??(2??)
          4359 | #define SQLWARN3 sqlca.sqlwarn??(3??)
          4360 | #define SQLWARN4 sqlca.sqlwarn??(4??)
          4361 | #define SQLWARN5 sqlca.sqlwarn??(5??)
          4362 | #define SQLWARN6 sqlca.sqlwarn??(6??)
          4363 | #define SQLWARN7 sqlca.sqlwarn??(7??)
          4364 | #define SQLWARN8 sqlca.sqlwarn??(8??)
          4365 | #define SQLWARN9 sqlca.sqlwarn??(9??)
          4366 | #define SQLWARNA sqlca.sqlwarn??(10??)
          4367 | #define SQLSTATE sqlca.sqlstate
          4368 | #endif
          4369 | struct sqlca sqlca;
          4370 |
          4371 | static bool _useDB2()
          4372 | ä
          4373 | if (getenv(KEYWORD_USEDB2) && strcasecmp(getenv(KEYWORD_USEDB2),"NO") =Ö
          4374 | = 0)
          4375 | ä
          4376 |     char wÄ128Ü;
          4377 |     SQLINTERFACE::fileDB2 = fopen(genOpenName(KEYWORD_USEDB2_FILE,w),"wÖ
          4378 | ");
          4379 |     Msg(10000+1003)<<eol;
          4380 |     return false;
          4381 | ü
          4382 | else
          4383 |     return true;
          4384 | ü
          4385 |
          4386 | char *      SQLINTERFACE::plan        = strdup(getenv(KEYWORD_DB_PLAN));
          4387 | char *      SQLINTERFACE::subsystem   = strdup(getenv(KEYWORD_DB_SUBSYSÖ
          4388 | ));
          4389 | char *      SQLINTERFACE::dSql        = initDynamicSql();
          4390 | mCHAIN      DssJob::dssJobs;
          4391 | mCHAIN      SQLINTERFACE::tasks;
          4392 | bool        SQLINTERFACE::useDB2     = _useDB2();
          4393 | FILE *      SQLINTERFACE::fileDB2    =  0;
          4394 |
          4395 |
          4396 |
          4397 | ERROR_MESSAGE * SQLINTERFACE::error_message = new ERROR_MESSAGE();
          4398 | SQLINTERFACE::SQLINTERFACE():mERROR()
          4399 | ä
          4400 |   tryToConnect();
          4401 | ü
          4402 |
          4403 | void SQLINTERFACE::tryToConnect()
          4404 | ä
          4405 |
          4406 |
          4407 |   char tÄ12Ü;
          4408 |   sprintf(t,"%p",getTCB());
          4409 |   if (tasks.search(t) == 0)
          4410 |       tasks.addlast(new TcbARCHSQL(t,connectDB()));
          4411 |       JOBENV::DEBUG(1,t);
          4412 | ü
          4413 |
          4414 | ARCHSQL * SQLINTERFACE::connectDB()
          4415 | ä
          4416 |       ARCHSQL * archsql = new ARCHSQL();
          4417 |       if (useDB2)
          4418 |       ä
          4419 |       if (subsystem==0) return 0;
          4420 |       ARCHSQL * archsql = new ARCHSQL();
          4421 |       archsql->setSubSystem(subsystem);
          4422 |       char _planÄÜ = "        ";
          4423 |       memcpy(_plan,plan,strlen(plan));
          4424 |       archsql->setPlan(_plan);
          4425 |       if (| archsql->call(Connect))
          4426 |        markerror();
          4427 |       ü
          4428 |       else
          4429 |       ARCHSQL * archsql = (ARCHSQL*)1;
          4430 |       error_message->error_len = short(data_dim*data_len);
          4431 |       if (useDB2)
          4432 |       Msg(10000+1000)<<subsystem<<plan<<tHEX(int(getTCB()))<<eol;
          4433 |       return archsql;
          4434 | ü
          4435 |
          4436 | SQLINTERFACE::ßSQLINTERFACE()
          4437 | ä
          4438 | ü
          4439 |
          4440 | void SQLINTERFACE::diag(char *t)
          4441 | ä
          4442 |  if (useDB2)
          4443 |  ä
          4444 |  Msg(10000+1001)<<t<<SQLCODE<<(char *)(sqlca.sqlerrmc)<<eol;
          4445 |  int rc = DSNTIAR(&sqlca,error_message,&data_len);
          4446 |  if ( rc )
          4447 |   Msg(10000+9707)<<long(rc)<<eol;
          4448 |  else
          4449 |  ä
          4450 |    for(int i = 0;i<data_dim;i++)
          4451 |    if (| mvsSTRING(error_message->error_textÄiÜ,data_len).isEmpty())
          4452 |       Msg(10000+9708)<<mvsSTRING(error_message->error_textÄiÜ,data_len)Ö
          4453 | <<eol;
          4454 |  ü
          4455 |  ü
          4456 |
          4457 |  Msg(100000+9709)<<"diag"<<eol;
          4458 | ü
          4459 |
          4460 | int SQLINTERFACE::commit()
          4461 | ä
          4462 | tryToConnect();
          4463 | if (useDB2)
          4464 | ä
          4465 |
          4466 | /***$$$
          4467 |   EXEC SQL COMMIT
          4468 | $$$***/
          4469 |   ä
          4470 |   SQLPLIST SQLPLIST1 =
          4471 |   ä64, 4, 150,
          4472 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          4473 |    0, 0, 0, 0, 0, 0, 0, 0, 1208, 310, 4239, 0, 0, 0, 0, 0ü;
          4474 |   SQLELTS_PTR SQLELTS_PTR1;
          4475 |   SQLPLIST1.SQLCODEP = (char *) &sqlca;
          4476 |   SQLPLIST1.SQLTIMES??( 0 ??) = 0x1951;
          4477 |   SQLPLIST1.SQLTIMES??( 1 ??) = 0x8331;
          4478 |   SQLPLIST1.SQLTIMES??( 2 ??) = 0x0BFC;
          4479 |   SQLPLIST1.SQLTIMES??( 3 ??) = 0x4B14;
          4480 |   DSNHLI ( (unsigned int * ) &SQLPLIST1);
          4481 |   ü
          4482 |
          4483 | ü
          4484 |   return 1;
          4485 | ü
          4486 |
          4487 | void SQLINTERFACE::Error(char * t,Error_Action a)
          4488 | ä
          4489 |
          4490 |
          4491 |  Msg(100000+9709)<<"error"<<eol;
          4492 |
          4493 | ü
          4494 |
          4495 | static char * initDynamicSql()
          4496 | ä
          4497 |   char bÄ32000Ü;
          4498 |   char _genFileNameÄ1024Ü;
          4499 |   size_t o = 0;
          4500 |   FILE * sqlFile = 0;
          4501 |   if (SQLINTERFACE::useDB2 && access(KEYWORD_SQLFILE,0x04)==0)
          4502 |   sqlFile=  fopen(genOpenName(KEYWORD_SQLFILE,_genFileName),"r");
          4503 |   if (sqlFile)
          4504 |   while(fgets(b+o,sizeof(b)-o,sqlFile))
          4505 |   ä
          4506 |     o = strchr(b+o,'Ön')-b;
          4507 |     if (o>0) *(b+o) = 0;
          4508 |       else
          4509 |     break;
          4510 |   ü
          4511 |   if (sqlFile)
          4512 |     fclose(sqlFile);
          4513 |   else
          4514 |     strcpy(b,fullQuery);
          4515 |   JOBENV::DEBUG(1,(char *)b);
          4516 |   char * rb = new charÄstrlen(b)+1Ü;
          4517 |   strcpy(rb,b);
          4518 |   return (rb);
          4519 | ü
          4520 |
          4521 |
          4522 |
          4523 |
          4524 |
          4525 | DssJob::DssJob():
          4526 | SQLINTERFACE(),
          4527 | chainE(""),
          4528 | mCHAIN(),
          4529 | CHAINITER(this)
          4530 | ä
          4531 | char _genFileNameÄ1024Ü;
          4532 | FILE * f = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
          4533 | if (f==0)
          4534 | ä
          4535 |    init();
          4536 | ü
          4537 | else
          4538 | 		 fclose(f);
          4539 |
          4540 | ü
          4541 |
          4542 | DssJob::DssJob(const char * d):
          4543 | SQLINTERFACE(),
          4544 | chainE(""),
          4545 | mCHAIN(),
          4546 | CHAINITER(this)
          4547 | ä
          4548 | char _genFileNameÄ1024Ü;
          4549 | FILE * f = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
          4550 | if (f==0)
          4551 | ä
          4552 |    init();
          4553 | ü
          4554 | else
          4555 | 	 fclose(f);
          4556 |  strcpy(dataset.arr,d);
          4557 |  dataset.len = strlen(d);
          4558 | ü
          4559 | DssJob::DssJob(TIMESTAMP& ts):
          4560 | SQLINTERFACE(),
          4561 | chainE(ts.arr),
          4562 | mCHAIN(),
          4563 | CHAINITER(this)
          4564 | ä
          4565 |  init();
          4566 |  memcpy(t.arr,ts.arr,ts.len);
          4567 |  t.len = ts.len;
          4568 |  if (useDB2)
          4569 |  ä
          4570 |
          4571 | /***$$$
          4572 |  EXEC SQL WHENEVER SQLERROR GOTO SQLERROR
          4573 | $$$***/
          4574 |
          4575 |
          4576 | /***$$$
          4577 |  EXEC SQL SELECT KEY, JOBNAME, JOBNUMBER, DATASET
          4578 |  INTO
          4579 |  :timestamp,
          4580 |  :jobName,
          4581 |  :jobNumber,
          4582 |  :dataset
          4583 |  FROM DSSJOBS WHERE KEY = :t
          4584 | $$$***/
          4585 |   ä
          4586 |   SQLPLIST SQLPLIST3 =
          4587 |   ä64, 17412, 30,
          4588 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          4589 |    0, 0, 0, 0, 2, 0, 0, 0, 1208, 231, 4328, 0, 0, 0, 0, 0ü;
          4590 |   SQLELTS_PTR SQLELTS_PTR3;
          4591 |   struct
          4592 |      ä char   SQLDAID??(8??);
          4593 |        long   SQLDABC;
          4594 |        short  SQLN;
          4595 |        short  SQLD;
          4596 |        char  SQLPVELT??( (sizeof(SQLELTS) * 1) ??);
          4597 |      ü SQLPVARS3;
          4598 |   struct
          4599 |      ä char   SQLDAID??(8??);
          4600 |        long   SQLDABC;
          4601 |        short  SQLN;
          4602 |        short  SQLD;
          4603 |        char  SQLAVELT??( (sizeof(SQLELTS) * 4) ??);
          4604 |      ü SQLAVARS3;
          4605 |   SQLELTS_PTR3 = (SQLELTS *) &SQLPVARS3.SQLPVELT;
          4606 |   SQLELTS_PTR3->SQLTYPE = 448;
          4607 |   SQLELTS_PTR3->SQLLEN  = 28;
          4608 |   SQLELTS_PTR3->SQLADDR = (char *)
          4609 |   &( t );
          4610 |   SQLELTS_PTR3->SQLIND  = NULL;
          4611 |   SQLELTS_PTR3->SQLNAMLEN  = 0;
          4612 |   strcpy(SQLPVARS3.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          4613 |   SQLPVARS3.SQLDABC = 60;
          4614 |   SQLPVARS3.SQLN    = 1;
          4615 |   SQLPVARS3.SQLD    = 1;
          4616 |   SQLPLIST3.SQLVPARM = (char *) &SQLPVARS3.SQLDAID;
          4617 |   SQLELTS_PTR3 = (SQLELTS *) &SQLAVARS3.SQLAVELT;
          4618 |   SQLELTS_PTR3->SQLTYPE = 448;
          4619 |   SQLELTS_PTR3->SQLLEN  = 28;
          4620 |   SQLELTS_PTR3->SQLADDR = (char *)
          4621 |   &( timestamp );
          4622 |   SQLELTS_PTR3->SQLIND  = NULL;
          4623 |   SQLELTS_PTR3->SQLNAMLEN  = 0;
          4624 |   SQLELTS_PTR3 = SQLELTS_PTR3 + 1;
          4625 |   SQLELTS_PTR3->SQLTYPE = 448;
          4626 |   SQLELTS_PTR3->SQLLEN  = 9;
          4627 |   SQLELTS_PTR3->SQLADDR = (char *)
          4628 |   &( jobName );
          4629 |   SQLELTS_PTR3->SQLIND  = NULL;
          4630 |   SQLELTS_PTR3->SQLNAMLEN  = 0;
          4631 |   SQLELTS_PTR3 = SQLELTS_PTR3 + 1;
          4632 |   SQLELTS_PTR3->SQLTYPE = 448;
          4633 |   SQLELTS_PTR3->SQLLEN  = 9;
          4634 |   SQLELTS_PTR3->SQLADDR = (char *)
          4635 |   &( jobNumber );
          4636 |   SQLELTS_PTR3->SQLIND  = NULL;
          4637 |   SQLELTS_PTR3->SQLNAMLEN  = 0;
          4638 |   SQLELTS_PTR3 = SQLELTS_PTR3 + 1;
          4639 |   SQLELTS_PTR3->SQLTYPE = 448;
          4640 |   SQLELTS_PTR3->SQLLEN  = 255;
          4641 |   SQLELTS_PTR3->SQLADDR = (char *)
          4642 |   &( dataset );
          4643 |   SQLELTS_PTR3->SQLIND  = NULL;
          4644 |   SQLELTS_PTR3->SQLNAMLEN  = 0;
          4645 |   strcpy(SQLAVARS3.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          4646 |   SQLAVARS3.SQLDABC = 192;
          4647 |   SQLAVARS3.SQLN    = 4;
          4648 |   SQLAVARS3.SQLD    = 4;
          4649 |   SQLPLIST3.SQLAPARM = (char *) &SQLAVARS3.SQLDAID;
          4650 |   SQLPLIST3.SQLCODEP = (char *) &sqlca;
          4651 |   SQLPLIST3.SQLTIMES??( 0 ??) = 0x1951;
          4652 |   SQLPLIST3.SQLTIMES??( 1 ??) = 0x8331;
          4653 |   SQLPLIST3.SQLTIMES??( 2 ??) = 0x0BFC;
          4654 |   SQLPLIST3.SQLTIMES??( 3 ??) = 0x4B14;
          4655 |   DSNHLI ( (unsigned int * ) &SQLPLIST3);
          4656 |   ü
          4657 |   if (SQLCODE < 0) goto  SQLERROR;
          4658 |
          4659 |  if (SQLCODE == 100)
          4660 |     markerror();
          4661 |  ü
          4662 |  char * c;
          4663 |  dataset.arrÄsizeof(dataset.arr)-1Ü = 0;
          4664 |  if ((c = strchr(dataset.arr,' ')))
          4665 |      *c = 0;
          4666 |  return;
          4667 | SQLERROR:
          4668 |   diag("SELECT");
          4669 |   markerror();
          4670 | ü
          4671 |
          4672 |
          4673 | DssJob::ßDssJob()
          4674 | ä
          4675 | ü
          4676 |
          4677 | void DssJob::init()
          4678 | ä
          4679 |    memset(&timestamp,0,sizeof(timestamp));
          4680 |    ä jobName.len = short((((sizeof(jobName.arr))>(strlen((char *)jobEnvÖ
          4681 | ->jobName)))?(strlen((char *)jobEnv->jobName)):(sizeof(jobName.arr))));Ö
          4682 |  strncpy(jobName.arr,(char *)jobEnv->jobName,jobName.len); ü;
          4683 |    ä jobNumber.len = short((((sizeof(jobNumber.arr))>(strlen((char *)joÖ
          4684 | bEnv->jobId)))?(strlen((char *)jobEnv->jobId)):(sizeof(jobNumber.arr)))Ö
          4685 | ); strncpy(jobNumber.arr,(char *)jobEnv->jobId,jobNumber.len); ü;
          4686 |    ä program.len = short((((sizeof(program.arr))>(strlen((char *)jobEnvÖ
          4687 | ->program)))?(strlen((char *)jobEnv->program)):(sizeof(program.arr))));Ö
          4688 |  strncpy(program.arr,(char *)jobEnv->program,program.len); ü;
          4689 |    datasetcount = 0;
          4690 |    memset(&joblog,0,sizeof(joblog));
          4691 |    tryToConnect();
          4692 |    if (useDB2)
          4693 |    ä
          4694 |
          4695 | /***$$$
          4696 |    EXEC SQL SET :timestamp = CURRENT TIMESTAMP
          4697 | $$$***/
          4698 |   ä
          4699 |   SQLPLIST SQLPLIST4 =
          4700 |   ä64, 1028, 30,
          4701 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          4702 |    0, 0, 0, 0, 3, 0, 0, 0, 1208, 746, 4370, 0, 0, 0, 0, 0ü;
          4703 |   SQLELTS_PTR SQLELTS_PTR4;
          4704 |   struct
          4705 |      ä char   SQLDAID??(8??);
          4706 |        long   SQLDABC;
          4707 |        short  SQLN;
          4708 |        short  SQLD;
          4709 |        char  SQLAVELT??( (sizeof(SQLELTS) * 1) ??);
          4710 |      ü SQLAVARS4;
          4711 |   SQLELTS_PTR4 = (SQLELTS *) &SQLAVARS4.SQLAVELT;
          4712 |   SQLELTS_PTR4->SQLTYPE = 448;
          4713 |   SQLELTS_PTR4->SQLLEN  = 28;
          4714 |   SQLELTS_PTR4->SQLADDR = (char *)
          4715 |   &( timestamp );
          4716 |   SQLELTS_PTR4->SQLIND  = NULL;
          4717 |   SQLELTS_PTR4->SQLNAMLEN  = 0;
          4718 |   strcpy(SQLAVARS4.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          4719 |   SQLAVARS4.SQLDABC = 60;
          4720 |   SQLAVARS4.SQLN    = 1;
          4721 |   SQLAVARS4.SQLD    = 1;
          4722 |   SQLPLIST4.SQLAPARM = (char *) &SQLAVARS4.SQLDAID;
          4723 |   SQLPLIST4.SQLCODEP = (char *) &sqlca;
          4724 |   SQLPLIST4.SQLTIMES??( 0 ??) = 0x1951;
          4725 |   SQLPLIST4.SQLTIMES??( 1 ??) = 0x8331;
          4726 |   SQLPLIST4.SQLTIMES??( 2 ??) = 0x0BFC;
          4727 |   SQLPLIST4.SQLTIMES??( 3 ??) = 0x4B14;
          4728 |   DSNHLI ( (unsigned int * ) &SQLPLIST4);
          4729 |   ü
          4730 |   if (SQLCODE < 0) goto  SQLERROR;
          4731 |
          4732 |    SQLERROR:
          4733 |    if (SQLCODE) diag("SET");
          4734 |    ü
          4735 |    else
          4736 |    ä
          4737 |    time_t temp;
          4738 |    struct tm *timeptr;
          4739 |    temp = time(0);
          4740 |    timeptr = localtime(&temp);
          4741 |    timestamp.len = strftime(timestamp.arr,sizeof(timestamp.arr)-1,"%Y-%Ö
          4742 | m-%d-%H.%M.%S", timeptr);
          4743 |    ü
          4744 |    mvsSTRING _dataset;
          4745 |    _dataset = mvsSTRING(getenv(KEYWORD_PREFIX)) + "/" +
          4746 |              jobEnv->jobName + jobEnv->jobId +
          4747 |              mvsSTRING(timestamp.arr,timestamp.len);
          4748 |    dataset.len = short(_dataset.lengthOf());
          4749 |    JOBENV::DEBUG(1,(char *)_dataset);
          4750 |    memcpy(dataset.arr,(char *)_dataset,dataset.len+1);
          4751 | ü
          4752 |
          4753 | int DssJob::insert()
          4754 | ä
          4755 |    CHAINITER::reset();
          4756 |    DssDataset * ds;
          4757 |    DssDataset * dp;
          4758 |    tryToConnect();
          4759 |    if (useDB2)
          4760 |    ä
          4761 |
          4762 | /***$$$
          4763 |    EXEC SQL WHENEVER SQLERROR GOTO SQLERROR
          4764 | $$$***/
          4765 |
          4766 |
          4767 | /***$$$
          4768 |    EXEC SQL INSERT INTO DSSJOBS
          4769 |     VALUES(:timestamp,
          4770 |            :jobName, :jobNumber, :program, :dataset, :joblog)
          4771 | $$$***/
          4772 |   ä
          4773 |   SQLPLIST SQLPLIST6 =
          4774 |   ä64, 16388, 30,
          4775 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          4776 |    0, 0, 0, 0, 4, 0, 0, 0, 1208, 232, 4401, 0, 0, 0, 0, 0ü;
          4777 |   SQLELTS_PTR SQLELTS_PTR6;
          4778 |   struct
          4779 |      ä char   SQLDAID??(8??);
          4780 |        long   SQLDABC;
          4781 |        short  SQLN;
          4782 |        short  SQLD;
          4783 |        char  SQLPVELT??( (sizeof(SQLELTS) * 6) ??);
          4784 |      ü SQLPVARS6;
          4785 |   SQLELTS_PTR6 = (SQLELTS *) &SQLPVARS6.SQLPVELT;
          4786 |   SQLELTS_PTR6->SQLTYPE = 448;
          4787 |   SQLELTS_PTR6->SQLLEN  = 28;
          4788 |   SQLELTS_PTR6->SQLADDR = (char *)
          4789 |   &( timestamp );
          4790 |   SQLELTS_PTR6->SQLIND  = NULL;
          4791 |   SQLELTS_PTR6->SQLNAMLEN  = 0;
          4792 |   SQLELTS_PTR6 = SQLELTS_PTR6 + 1;
          4793 |   SQLELTS_PTR6->SQLTYPE = 448;
          4794 |   SQLELTS_PTR6->SQLLEN  = 9;
          4795 |   SQLELTS_PTR6->SQLADDR = (char *)
          4796 |   &( jobName );
          4797 |   SQLELTS_PTR6->SQLIND  = NULL;
          4798 |   SQLELTS_PTR6->SQLNAMLEN  = 0;
          4799 |   SQLELTS_PTR6 = SQLELTS_PTR6 + 1;
          4800 |   SQLELTS_PTR6->SQLTYPE = 448;
          4801 |   SQLELTS_PTR6->SQLLEN  = 9;
          4802 |   SQLELTS_PTR6->SQLADDR = (char *)
          4803 |   &( jobNumber );
          4804 |   SQLELTS_PTR6->SQLIND  = NULL;
          4805 |   SQLELTS_PTR6->SQLNAMLEN  = 0;
          4806 |   SQLELTS_PTR6 = SQLELTS_PTR6 + 1;
          4807 |   SQLELTS_PTR6->SQLTYPE = 448;
          4808 |   SQLELTS_PTR6->SQLLEN  = 9;
          4809 |   SQLELTS_PTR6->SQLADDR = (char *)
          4810 |   &( program );
          4811 |   SQLELTS_PTR6->SQLIND  = NULL;
          4812 |   SQLELTS_PTR6->SQLNAMLEN  = 0;
          4813 |   SQLELTS_PTR6 = SQLELTS_PTR6 + 1;
          4814 |   SQLELTS_PTR6->SQLTYPE = 448;
          4815 |   SQLELTS_PTR6->SQLLEN  = 255;
          4816 |   SQLELTS_PTR6->SQLADDR = (char *)
          4817 |   &( dataset );
          4818 |   SQLELTS_PTR6->SQLIND  = NULL;
          4819 |   SQLELTS_PTR6->SQLNAMLEN  = 0;
          4820 |   SQLELTS_PTR6 = SQLELTS_PTR6 + 1;
          4821 |   SQLELTS_PTR6->SQLTYPE = 448;
          4822 |   SQLELTS_PTR6->SQLLEN  = 30000;
          4823 |   SQLELTS_PTR6->SQLADDR = (char *)
          4824 |   &( joblog );
          4825 |   SQLELTS_PTR6->SQLIND  = NULL;
          4826 |   SQLELTS_PTR6->SQLNAMLEN  = 0;
          4827 |   strcpy(SQLPVARS6.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          4828 |   SQLPVARS6.SQLDABC = 280;
          4829 |   SQLPVARS6.SQLN    = 6;
          4830 |   SQLPVARS6.SQLD    = 6;
          4831 |   SQLPLIST6.SQLVPARM = (char *) &SQLPVARS6.SQLDAID;
          4832 |   SQLPLIST6.SQLCODEP = (char *) &sqlca;
          4833 |   SQLPLIST6.SQLTIMES??( 0 ??) = 0x1951;
          4834 |   SQLPLIST6.SQLTIMES??( 1 ??) = 0x8331;
          4835 |   SQLPLIST6.SQLTIMES??( 2 ??) = 0x0BFC;
          4836 |   SQLPLIST6.SQLTIMES??( 3 ??) = 0x4B14;
          4837 |   DSNHLI ( (unsigned int * ) &SQLPLIST6);
          4838 |   ü
          4839 |   if (SQLCODE < 0) goto  SQLERROR;
          4840 |
          4841 |    ü
          4842 |    else
          4843 |    ä
          4844 |      if (fileDB2)
          4845 |      fprintf(fileDB2,"insert into DSSJOBS:Ön");
          4846 |      if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","jobName",jobName.len,jÖ
          4847 | obName.len,jobName.arr);;
          4848 |      if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","jobNumber",jobNumber.lÖ
          4849 | en,jobNumber.len,jobNumber.arr);;
          4850 |      if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","program",program.len,pÖ
          4851 | rogram.len,program.arr);;
          4852 |      if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","dataset",dataset.len,dÖ
          4853 | ataset.len,dataset.arr);;
          4854 |      if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","joblog",joblog.len,jobÖ
          4855 | log.len,joblog.arr);;
          4856 |     ü
          4857 |
          4858 |    ds = (DssDataset *)CHAINITER::next();
          4859 |    while(ds)
          4860 |    ä
          4861 |     if(| ds->insert())
          4862 |      Error(Msg(10000+1002)<<ds->dataset.arr<<eol,Abort);
          4863 |      dp = ds;
          4864 |      ds = (DssDataset *)CHAINITER::next();
          4865 |      mCHAIN::del(dp);
          4866 |      delete dp;
          4867 |    ü
          4868 |   commit();
          4869 |   return 1;
          4870 | SQLERROR:
          4871 |   diag("INSERT INTO DSSJOBS");
          4872 |   markerror();
          4873 |   return 0;
          4874 | ü
          4875 |
          4876 | static char todayÄ12Ü;
          4877 |
          4878 | int DssJob::query(mCHAIN *m,char * date)
          4879 | ä
          4880 |    if (useDB2==false)
          4881 | 	return 0;
          4882 |    CHAINITER iter(*m);
          4883 |    mvsSTRING like(" ");
          4884 |    chainE * mask = iter.next();
          4885 |    if ( date == 0 )
          4886 |    ä
          4887 |      date = today;
          4888 |      formatTime(today,sizeof(today),"%d.%m.%Y");
          4889 |      JOBENV::DEBUG(1,(char *)date);
          4890 |    ü
          4891 |    int likeFlag = 0;
          4892 |    while(mask)
          4893 |    ä
          4894 |       int i, j;
          4895 |       for(i=0, j=0;mask->chainEidÄiÜ;i++)
          4896 |       ä
          4897 |          if(mask->chainEidÄiÜ |= '*')
          4898 |             mask->chainEidÄj++Ü = mask->chainEidÄiÜ;
          4899 |          else if (mask->chainEidÄi+1Ü |= '*')
          4900 |          ä
          4901 |             mask->chainEidÄj++Ü = '%';
          4902 |             likeFlag = 1;
          4903 |          ü
          4904 |        ü
          4905 |        if (mask->chainEidÄj-1Ü |= '%')
          4906 |            mask->chainEidÄj++Ü = '%';
          4907 |       mask->chainEidÄjÜ = 0;
          4908 |       like = like + "A.DATASET LIKE '"+mvsSTRING(mask->chainEid)+"' ";
          4909 |       if (mask->next)
          4910 |          like = like + " OR ";
          4911 |       mask = iter.next();
          4912 |    ü
          4913 |    JOBENV::DEBUG(1,(char *)like);
          4914 |      ä
          4915 |      char * pÄ8Ü;
          4916 |      Msg(10000+122)<<dSql<<eol;
          4917 |      size_t l = strlen(dSql);
          4918 |      int j = 0;
          4919 |      for(int i = 0;i<l&&j<8;i++)
          4920 |        if (dSqlÄiÜ=='%' && dSqlÄi+2Ü == '%')
          4921 |          ä
          4922 |          switch (dSqlÄi+1Ü)
          4923 |            ä
          4924 |            case 'M':
          4925 |            case 'm': pÄj++Ü = like;
          4926 |              break;
          4927 |            case 'D':
          4928 |            case 'd': pÄj++Ü = date;
          4929 |              break;
          4930 |            default :
          4931 |              JOBENV::Error(Msg(10000+121)<<dSqlÄiÜ<<eol,JOBENV::Abort);
          4932 |            ü
          4933 |            dSqlÄi+1Ü = 's';
          4934 |          strcpy(dSql+i+2,dSql+i+3);
          4935 |          l -= 2;
          4936 |          ü
          4937 |        switch(j)
          4938 |          ä
          4939 |          default:
          4940 |          case 0:
          4941 |          strcpy(dynamicSql.arr,dSql);
          4942 |          break;
          4943 |          case 1:
          4944 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü);
          4945 |          break;
          4946 |          case 2:
          4947 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü);
          4948 |          break;
          4949 |          case 3:
          4950 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü);
          4951 |          break;
          4952 |          case 4:
          4953 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü);
          4954 |          break;
          4955 |          case 5:
          4956 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü,pÄ4Ü);
          4957 |          break;
          4958 |          case 6:
          4959 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü,pÄ4Ü,
          4960 |            pÄ5Ü);
          4961 |          break;
          4962 |          case 7:
          4963 |          sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü,pÄ4Ü,
          4964 |            pÄ5Ü,pÄ6Ü);
          4965 |          break;
          4966 |          ü
          4967 |      ü
          4968 |    JOBENV::DEBUG(1,(char *)dynamicSql.arr);
          4969 |    Msg(10000+123)<<dynamicSql.arr<<eol;
          4970 |    dynamicSql.len =short(strlen(dynamicSql.arr));
          4971 |    tryToConnect();
          4972 | 	 DssJob * job = 0;
          4973 |    int fetchCount = 0;
          4974 |
          4975 | /***$$$
          4976 |    EXEC SQL WHENEVER SQLERROR GOTO SQLERROR
          4977 | $$$***/
          4978 |
          4979 |
          4980 | /***$$$
          4981 |    EXEC SQL PREPARE FULL_QUERY FROM :dynamicSql
          4982 | $$$***/
          4983 |   ä
          4984 |   SQLPLIST SQLPLIST8 =
          4985 |   ä64, 16388, 35,
          4986 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          4987 |    0, 0, 0, 0, 1, 0, 0, 0, 1208, 14, 4538, 0, 0, 0, 0, 0ü;
          4988 |   SQLELTS_PTR SQLELTS_PTR8;
          4989 |   struct
          4990 |      ä char   SQLDAID??(8??);
          4991 |        long   SQLDABC;
          4992 |        short  SQLN;
          4993 |        short  SQLD;
          4994 |        char  SQLPVELT??( (sizeof(SQLELTS) * 2) ??);
          4995 |      ü SQLPVARS8;
          4996 |   SQLELTS_PTR8 = (SQLELTS *) &SQLPVARS8.SQLPVELT;
          4997 |   SQLELTS_PTR8->SQLTYPE = 452;
          4998 |   SQLELTS_PTR8->SQLLEN  = 0;
          4999 |   SQLELTS_PTR8->SQLADDR = 0;
          5000 |   SQLELTS_PTR8->SQLNAMLEN  = 0;
          5001 |   SQLELTS_PTR8 = SQLELTS_PTR8 + 1;
          5002 |   SQLELTS_PTR8->SQLTYPE = 448;
          5003 |   SQLELTS_PTR8->SQLLEN  = 32000;
          5004 |   SQLELTS_PTR8->SQLADDR = (char *)
          5005 |   &( dynamicSql );
          5006 |   SQLELTS_PTR8->SQLIND  = NULL;
          5007 |   SQLELTS_PTR8->SQLNAMLEN  = 0;
          5008 |   strcpy(SQLPVARS8.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          5009 |   SQLPVARS8.SQLDABC = 104;
          5010 |   SQLPVARS8.SQLN    = 2;
          5011 |   SQLPVARS8.SQLD    = 2;
          5012 |   SQLPLIST8.SQLVPARM = (char *) &SQLPVARS8.SQLDAID;
          5013 |   SQLPLIST8.SQLCODEP = (char *) &sqlca;
          5014 |   SQLPLIST8.SQLTIMES??( 0 ??) = 0x1951;
          5015 |   SQLPLIST8.SQLTIMES??( 1 ??) = 0x8331;
          5016 |   SQLPLIST8.SQLTIMES??( 2 ??) = 0x0BFC;
          5017 |   SQLPLIST8.SQLTIMES??( 3 ??) = 0x4B14;
          5018 |   DSNHLI ( (unsigned int * ) &SQLPLIST8);
          5019 |   ü
          5020 |   if (SQLCODE < 0) goto  SQLERROR;
          5021 |
          5022 |
          5023 | /***$$$
          5024 |    EXEC SQL DECLARE C_FULL_QUERY CURSOR FOR FULL_QUERY
          5025 | $$$***/
          5026 |
          5027 |
          5028 | /***$$$
          5029 |    EXEC SQL OPEN C_FULL_QUERY
          5030 | $$$***/
          5031 |   ä
          5032 |   SQLPLIST SQLPLIST10 =
          5033 |   ä64, 4, 50,
          5034 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          5035 |    0, 0, 0, 0, 1, 0, 0, 0, 1208, 3, 4540, 0, 0, 0, 0, 0ü;
          5036 |   SQLELTS_PTR SQLELTS_PTR10;
          5037 |   SQLPLIST10.SQLCODEP = (char *) &sqlca;
          5038 |   SQLPLIST10.SQLTIMES??( 0 ??) = 0x1951;
          5039 |   SQLPLIST10.SQLTIMES??( 1 ??) = 0x8331;
          5040 |   SQLPLIST10.SQLTIMES??( 2 ??) = 0x0BFC;
          5041 |   SQLPLIST10.SQLTIMES??( 3 ??) = 0x4B14;
          5042 |   DSNHLI ( (unsigned int * ) &SQLPLIST10);
          5043 |   ü
          5044 |   if (SQLCODE < 0) goto  SQLERROR;
          5045 |
          5046 |
          5047 |    for (;;)
          5048 |    ä
          5049 |
          5050 | /***$$$
          5051 |       EXEC SQL FETCH C_FULL_QUERY INTO
          5052 |       :record_key,
          5053 |       :record_job,
          5054 |       :record_dataset,
          5055 |       :record_volumes,
          5056 |       :record_size
          5057 | $$$***/
          5058 |   ä
          5059 |   SQLPLIST SQLPLIST11 =
          5060 |   ä64, 1028, 30,
          5061 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          5062 |    0, 0, 0, 0, 1, 0, 0, 0, 1208, 4, 4544, 0, 0, 0, 0, 0ü;
          5063 |   SQLELTS_PTR SQLELTS_PTR11;
          5064 |   struct
          5065 |      ä char   SQLDAID??(8??);
          5066 |        long   SQLDABC;
          5067 |        short  SQLN;
          5068 |        short  SQLD;
          5069 |        char  SQLAVELT??( (sizeof(SQLELTS) * 5) ??);
          5070 |      ü SQLAVARS11;
          5071 |   SQLELTS_PTR11 = (SQLELTS *) &SQLAVARS11.SQLAVELT;
          5072 |   SQLELTS_PTR11->SQLTYPE = 448;
          5073 |   SQLELTS_PTR11->SQLLEN  = 28;
          5074 |   SQLELTS_PTR11->SQLADDR = (char *)
          5075 |   &( record_key );
          5076 |   SQLELTS_PTR11->SQLIND  = NULL;
          5077 |   SQLELTS_PTR11->SQLNAMLEN  = 0;
          5078 |   SQLELTS_PTR11 = SQLELTS_PTR11 + 1;
          5079 |   SQLELTS_PTR11->SQLTYPE = 448;
          5080 |   SQLELTS_PTR11->SQLLEN  = 28;
          5081 |   SQLELTS_PTR11->SQLADDR = (char *)
          5082 |   &( record_job );
          5083 |   SQLELTS_PTR11->SQLIND  = NULL;
          5084 |   SQLELTS_PTR11->SQLNAMLEN  = 0;
          5085 |   SQLELTS_PTR11 = SQLELTS_PTR11 + 1;
          5086 |   SQLELTS_PTR11->SQLTYPE = 448;
          5087 |   SQLELTS_PTR11->SQLLEN  = 45;
          5088 |   SQLELTS_PTR11->SQLADDR = (char *)
          5089 |   &( record_dataset );
          5090 |   SQLELTS_PTR11->SQLIND  = NULL;
          5091 |   SQLELTS_PTR11->SQLNAMLEN  = 0;
          5092 |   SQLELTS_PTR11 = SQLELTS_PTR11 + 1;
          5093 |   SQLELTS_PTR11->SQLTYPE = 448;
          5094 |   SQLELTS_PTR11->SQLLEN  = 37;
          5095 |   SQLELTS_PTR11->SQLADDR = (char *)
          5096 |   &( record_volumes );
          5097 |   SQLELTS_PTR11->SQLIND  = NULL;
          5098 |   SQLELTS_PTR11->SQLNAMLEN  = 0;
          5099 |   SQLELTS_PTR11 = SQLELTS_PTR11 + 1;
          5100 |   SQLELTS_PTR11->SQLTYPE = 496;
          5101 |   SQLELTS_PTR11->SQLLEN  = 4;
          5102 |   SQLELTS_PTR11->SQLADDR = (char *)
          5103 |   &( record_size );
          5104 |   SQLELTS_PTR11->SQLIND  = NULL;
          5105 |   SQLELTS_PTR11->SQLNAMLEN  = 0;
          5106 |   strcpy(SQLAVARS11.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          5107 |   SQLAVARS11.SQLDABC = 236;
          5108 |   SQLAVARS11.SQLN    = 5;
          5109 |   SQLAVARS11.SQLD    = 5;
          5110 |   SQLPLIST11.SQLAPARM = (char *) &SQLAVARS11.SQLDAID;
          5111 |   SQLPLIST11.SQLCODEP = (char *) &sqlca;
          5112 |   SQLPLIST11.SQLTIMES??( 0 ??) = 0x1951;
          5113 |   SQLPLIST11.SQLTIMES??( 1 ??) = 0x8331;
          5114 |   SQLPLIST11.SQLTIMES??( 2 ??) = 0x0BFC;
          5115 |   SQLPLIST11.SQLTIMES??( 3 ??) = 0x4B14;
          5116 |   DSNHLI ( (unsigned int * ) &SQLPLIST11);
          5117 |   ü
          5118 |   if (SQLCODE < 0) goto  SQLERROR;
          5119 |
          5120 |       if (SQLCODE == 100) break;
          5121 |
          5122 |         if (job == 0 ]]
          5123 |          memcmp(job->timestamp.arr,record_job.arr,job->timestamp.len))
          5124 |     ä
          5125 |          job = new DssJob((TIMESTAMP&)record_job);
          5126 |          dssJobs.addlast(job);
          5127 |          fetchCount++;
          5128 |         ü
          5129 |         DssDataset * dataset = new DssDataset(job,
          5130 |                                         record_dataset.arr,
          5131 |                                         record_volumes.arr,
          5132 |                                         record_type,
          5133 |                                         record_size);
          5134 |    ü
          5135 |
          5136 | /***$$$
          5137 |    EXEC SQL CLOSE C_FULL_QUERY
          5138 | $$$***/
          5139 |   ä
          5140 |   SQLPLIST SQLPLIST12 =
          5141 |   ä64, 4, 45,
          5142 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          5143 |    0, 0, 0, 0, 1, 0, 0, 0, 1208, 5, 4565, 0, 0, 0, 0, 0ü;
          5144 |   SQLELTS_PTR SQLELTS_PTR12;
          5145 |   SQLPLIST12.SQLCODEP = (char *) &sqlca;
          5146 |   SQLPLIST12.SQLTIMES??( 0 ??) = 0x1951;
          5147 |   SQLPLIST12.SQLTIMES??( 1 ??) = 0x8331;
          5148 |   SQLPLIST12.SQLTIMES??( 2 ??) = 0x0BFC;
          5149 |   SQLPLIST12.SQLTIMES??( 3 ??) = 0x4B14;
          5150 |   DSNHLI ( (unsigned int * ) &SQLPLIST12);
          5151 |   ü
          5152 |   if (SQLCODE < 0) goto  SQLERROR;
          5153 |
          5154 |    return fetchCount;
          5155 | SQLERROR:
          5156 |    diag("FULL QUERY");
          5157 |    markerror();
          5158 |    return -1;
          5159 | ü
          5160 |
          5161 | int DssJob::doWeNeed(const char * d)
          5162 |   ä
          5163 |   CHAINITER iter(this);
          5164 |   DssDataset * ds =(DssDataset *)iter.next();
          5165 |   while (ds)
          5166 |     ä
          5167 |     if (ds->compare(d))
          5168 |       return 1;
          5169 |     ds =(DssDataset *)iter.next();
          5170 |     ü
          5171 |   return 0;
          5172 |   ü
          5173 |
          5174 | int DssJob::allOnline()
          5175 | ä
          5176 |  char _genFileNameÄ1024Ü;
          5177 |   FILE *   restore = fopen(genOpenName("RESTORE",_genFileName),"wb");
          5178 |   if (| restore)
          5179 |      JOBENV::Error(Msg(10000+110)<<"RESTORE"<<eol,JOBENV::Abort);
          5180 |   int rc = 1;
          5181 |   CHAINITER iter(dssJobs);
          5182 |   DssJob * job = (DssJob*)iter.next();
          5183 |   while (job)
          5184 |   ä
          5185 |     int file = open(genOpenName(job->getDatasetName(),_genFileName),0x0Ö
          5186 | 2+0);
          5187 |     if (file < 0)
          5188 |     ä
          5189 |        rc = 0;
          5190 |        JOBENV::Error(Msg(10000+120)<<job->getDatasetName()<<strerror((*Ö
          5191 | __errno()))
          5192 |          <<eol,JOBENV::Continue);
          5193 |        fprintf(restore,"%sÖn",job->getDatasetName());
          5194 |     ü
          5195 |     else
          5196 |        close(file);
          5197 |     job = (DssJob*)iter.next();
          5198 |   ü
          5199 |   fclose(restore);
          5200 |   return rc;
          5201 | ü
          5202 |
          5203 |
          5204 |
          5205 |
          5206 |
          5207 |
          5208 | DssDataset::DssDataset(DssJob* j,char *n,char *v,int t,int s):
          5209 | SQLINTERFACE(),
          5210 | chainE(n),
          5211 | job(j)
          5212 | ä
          5213 |    job->addlast(this);
          5214 |    dataset.len = (((strlen(n))>(sizeof(dataset.arr)))?(sizeof(dataset.aÖ
          5215 | rr)):(strlen(n)));
          5216 |    strncpy(dataset.arr,n,dataset.len);
          5217 |    dataset.arrÄdataset.lenÜ = 0;
          5218 |
          5219 |    volumes.len = (((strlen(v))>(sizeof(volumes.arr)-1))?(sizeof(volumesÖ
          5220 | .arr)-1):(strlen(v)));
          5221 |    strncpy(volumes.arr,v,volumes.len);
          5222 |    volumes.arrÄvolumes.lenÜ = 0;
          5223 |    type = t;
          5224 |    recordsize = s;
          5225 |    JOBENV::DEBUG(1,"Dataset construct",n,v);
          5226 | ü
          5227 |
          5228 | DssDataset::ßDssDataset()
          5229 | ä
          5230 | ü
          5231 |
          5232 | int DssDataset::insert()
          5233 | ä
          5234 |    tryToConnect();
          5235 |    memcpy(timestamp.arr,job->timestamp.arr,job->timestamp.len+1);
          5236 |    timestamp.len = job->timestamp.len;
          5237 |    JOBENV::DEBUG(1,"Dataset insert:",dataset.arr);
          5238 |    if (useDB2)
          5239 |    ä
          5240 |
          5241 | /***$$$
          5242 |    EXEC SQL WHENEVER SQLERROR GOTO SQLERROR
          5243 | $$$***/
          5244 |
          5245 |
          5246 | /***$$$
          5247 |    EXEC SQL INSERT INTO DSSDATASETS
          5248 |    VALUES(CURRENT TIMESTAMP,
          5249 |    :timestamp,
          5250 |    :dataset,
          5251 |    :volumes,
          5252 |    :type,
          5253 |    :recordsize)
          5254 | $$$***/
          5255 |   ä
          5256 |   SQLPLIST SQLPLIST14 =
          5257 |   ä64, 16388, 30,
          5258 |    ä'Öx44','Öx53','Öx53','Öx44','Öx42','Öx20','Öx20','Öx20'ü,
          5259 |    0, 0, 0, 0, 5, 0, 0, 0, 1208, 232, 4653, 0, 0, 0, 0, 0ü;
          5260 |   SQLELTS_PTR SQLELTS_PTR14;
          5261 |   struct
          5262 |      ä char   SQLDAID??(8??);
          5263 |        long   SQLDABC;
          5264 |        short  SQLN;
          5265 |        short  SQLD;
          5266 |        char  SQLPVELT??( (sizeof(SQLELTS) * 5) ??);
          5267 |      ü SQLPVARS14;
          5268 |   SQLELTS_PTR14 = (SQLELTS *) &SQLPVARS14.SQLPVELT;
          5269 |   SQLELTS_PTR14->SQLTYPE = 448;
          5270 |   SQLELTS_PTR14->SQLLEN  = 28;
          5271 |   SQLELTS_PTR14->SQLADDR = (char *)
          5272 |   &( timestamp );
          5273 |   SQLELTS_PTR14->SQLIND  = NULL;
          5274 |   SQLELTS_PTR14->SQLNAMLEN  = 0;
          5275 |   SQLELTS_PTR14 = SQLELTS_PTR14 + 1;
          5276 |   SQLELTS_PTR14->SQLTYPE = 448;
          5277 |   SQLELTS_PTR14->SQLLEN  = 255;
          5278 |   SQLELTS_PTR14->SQLADDR = (char *)
          5279 |   &( dataset );
          5280 |   SQLELTS_PTR14->SQLIND  = NULL;
          5281 |   SQLELTS_PTR14->SQLNAMLEN  = 0;
          5282 |   SQLELTS_PTR14 = SQLELTS_PTR14 + 1;
          5283 |   SQLELTS_PTR14->SQLTYPE = 448;
          5284 |   SQLELTS_PTR14->SQLLEN  = 37;
          5285 |   SQLELTS_PTR14->SQLADDR = (char *)
          5286 |   &( volumes );
          5287 |   SQLELTS_PTR14->SQLIND  = NULL;
          5288 |   SQLELTS_PTR14->SQLNAMLEN  = 0;
          5289 |   SQLELTS_PTR14 = SQLELTS_PTR14 + 1;
          5290 |   SQLELTS_PTR14->SQLTYPE = 496;
          5291 |   SQLELTS_PTR14->SQLLEN  = 4;
          5292 |   SQLELTS_PTR14->SQLADDR = (char *)
          5293 |   &( type );
          5294 |   SQLELTS_PTR14->SQLIND  = NULL;
          5295 |   SQLELTS_PTR14->SQLNAMLEN  = 0;
          5296 |   SQLELTS_PTR14 = SQLELTS_PTR14 + 1;
          5297 |   SQLELTS_PTR14->SQLTYPE = 496;
          5298 |   SQLELTS_PTR14->SQLLEN  = 4;
          5299 |   SQLELTS_PTR14->SQLADDR = (char *)
          5300 |   &( DssDatasetRecord.recordsize );
          5301 |   SQLELTS_PTR14->SQLIND  = NULL;
          5302 |   SQLELTS_PTR14->SQLNAMLEN  = 0;
          5303 |   strcpy(SQLPVARS14.SQLDAID, "ÖxE2ÖxD8ÖxD3ÖxC4ÖxC1Öx40Öx40Öx08");
          5304 |   SQLPVARS14.SQLDABC = 236;
          5305 |   SQLPVARS14.SQLN    = 5;
          5306 |   SQLPVARS14.SQLD    = 5;
          5307 |   SQLPLIST14.SQLVPARM = (char *) &SQLPVARS14.SQLDAID;
          5308 |   SQLPLIST14.SQLCODEP = (char *) &sqlca;
          5309 |   SQLPLIST14.SQLTIMES??( 0 ??) = 0x1951;
          5310 |   SQLPLIST14.SQLTIMES??( 1 ??) = 0x8331;
          5311 |   SQLPLIST14.SQLTIMES??( 2 ??) = 0x0BFC;
          5312 |   SQLPLIST14.SQLTIMES??( 3 ??) = 0x4B14;
          5313 |   DSNHLI ( (unsigned int * ) &SQLPLIST14);
          5314 |   ü
          5315 |   if (SQLCODE < 0) goto  SQLERROR;
          5316 |
          5317 |    ü
          5318 |    else
          5319 |    ä
          5320 |    if (SQLINTERFACE::fileDB2)
          5321 |    fprintf(SQLINTERFACE::fileDB2,"insert into DSSDATASETS:Ön");
          5322 |    if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","timestamp",timestamp.lenÖ
          5323 | ,timestamp.len,timestamp.arr);;
          5324 |    if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","dataset",dataset.len,datÖ
          5325 | aset.len,dataset.arr);;
          5326 |    if (fileDB2) fprintf(fileDB2," %s:%*.*sÖn","volumes",volumes.len,volÖ
          5327 | umes.len,volumes.arr);;
          5328 |    if (fileDB2)
          5329 |    fprintf(SQLINTERFACE::fileDB2," type:%dÖn size:%dÖn",type,recordsizeÖ
          5330 | );
          5331 |    ü
          5332 |   return 1;
          5333 | SQLERROR:
          5334 |   diag("INSERT INTO DSSDATASETS");
          5335 |   markerror();
          5336 |   return 0;
          5337 | ü
          5338 |
          5339 |
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(GDSSDB)'                      30.11.12 08:26:06
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'CEE.SCEEH.H(STRING)'
     2  =  //'CEE.SCEEH.H(FEATURES)'
     3  =  //'CEE.SCEEH.H(STDDEF)'
0                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(GDSSDB)'                      30.11.12 08:26:06
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
