
15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(CASMIF)'                      30.11.12 08:25:57
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              TEMPLATEDEPTH(300)
                                  :NOTEMPLATEREGISTRY              TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)
                                  :TMPLPARSE(NO)   TUNE(7)         UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64
                                  :NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,NOMAF,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__,__I,_Complex,__complex__,__real__,__imag__)
                                  :NOKEYWORD(char16_t,char32_t,decltype,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NOCOMPATRVALUEBINDING,NODBCS,NODECLTYPE,NODELEGATINGCTORS,
                                   DEPENDENTBASELOOKUP,NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,
                                   EXTERNTEMPLATE,ILLPTOM,IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,
                                   NOOLDDIGRAPH,OLDFRIEND,NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,
                                   NOTEMPSASLOCALS,NOTEXTAFTERENDIF,GNU_LABELVALUE,GNU_COMPUTEDGOTO,TRAILENUM,TYPEDEFCLASS,NOUCS,
                                   VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY,NOC99COMPLEX,NOC99COMPLEXHEADER,
                                   NOGNU_COMPLEX,GNU_SUFFIXIJ)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410D0000
                                  : __LIBREL__=0x410D0000
                                  : __TARGET_LIB__=0x410D0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(CASMIF)'                      30.11.12 08:25:57
-
                                       * * * * *   S O U R C E   * * * * *
0            1 |
             2 | /*******************************************************************************
             3 | * Copyright ISIS Papyrus Technologies Limited
             4 | *-------------------------------------------------------------------------------
             5 | * File:              $Source: /data/cvs/src/mvs/casmif.cpp,v $
             6 | *-------------------------------------------------------------------------------
             7 | * Description:
             8 | *   ???
             9 | *******************************************************************************/
            10 |
            11 | #include "isisdef.h"
            12 | #include <stdlib.h>
            13 | #include <string.h>
            14 | #include <strings.h>
            15 |
            16 | #if  defined(OWN_STDIO) == 1
            17 | #include "stdio.hpp"
            18 | //#include "crctable.hpp"
            19 | #include "filesys.hpp"
            20 | #endif
            21 |
            22 | #include "casmif.hpp"
            23 | #include "mchain.hpp"
            24 | #include "merror.hpp"
            25 | #include "mvsbase.hpp"
            26 | #include "mvstime.hpp"
            27 | #if defined(CICSAPPL) == 0 && defined(MU_STANDALONE) == 0  //szm20050810
            28 | #include "isismisc.hpp"
            29 | #endif
            30 | #include "misc.hpp"
            31 | #include "msgmgr.hpp"
            32 | #ifndef OWN_STDIO
            33 | #include <assert.h>
            34 | #endif
            35 |
            36 | ISIS_EXT_ASM unsigned int ASMIF(void *);
            37 | static pMvsInterface  _mvsInterfaceÄÜ = ä0,0,0,0,0,0,0,0ü;
            38 | static pcsul          _tcbÄÜ         = ä0,0,0,0,0,0,0,0ü;
            39 | //szm20081215 zIIP
            40 | bool MvsInterface::zIIP = getenv("ISIS_ZIIP_SUPPORT")?true:false;
            41 | pcsul  MvsInterface::wlmEnclave = 0;
            42 | //szm20081215 zIIP
            43 |
            44 | //ZA030610 always 8
            45 | static int            MAX_TCB        = 8;
            46 | static char CRITICAL_MAJORÄÜ = "ASM__MVS";
            47 | static char CRITICAL_MINORÄÜ = "ASM__MVS__CRITICAL";
            48 | static char MSG_MAJORÄÜ      = "ASM__MSG";
            49 | static char MSG_MINORÄÜ      = "OMSMSGMN";
            50 | static char ASM_MAJORÄÜ      = "OMS     ";
            51 | static char ASM_MSGÄÜ        = "ASM_MSG";
            52 | static char WAIT_MAJORÄÜ     = "ASM_WAIT";
            53 | static char POST_MAJORÄÜ     = "ASM_POST";
            54 | #ifndef sym_init
            55 | #define sym_init -1
            56 | #endif
            57 |
            58 | //20060418MessageTEXT * messagetext = NULL; //szm2041120
            59 |
            60 | static int _init_messagetext = initMessageText();
            61 |
            62 | int  GlobalTraceFlag = getenv("TRACE") ? atoi(getenv("TRACE")):0;
            63 | int  GlobalCicsFlag  = 0;
            64 | static char* MSGQ    = getenv("MSGQ") ? getenv("MSGQ"):"SASO";
            65 | static int   MvsTimer_status = 0;
            66 |
            67 | static void btracef(const char * text)
            68 |  ä
            69 |  printf(" %s Ön",text);
            70 |  ü
            71 |
            72 |
            73 | static int CompareAndSwap(pcsul &p1,pcsul p2,void *p3)
            74 |  ä
            75 |  // if ( p1 == *p3 ) *p3 = p2
            76 |  // else p1 = *p3
            77 |  return 1;
            78 |  ü
            79 |
            80 | #if (MEM_SUPPORT)
            81 | //
            82 | //------------------------------------------------------------------------------
            83 | //
            84 |
            85 | void * OwnRealloc(void *a, size_t size)
            86 |  ä
            87 |  if ( size == 0 )
            88 |   return NULL;
            89 |  else if ( a == NULL )
            90 |   return (OwnMalloc(size));
            91 |  void * n = OwnMalloc(size);
            92 |  if ( NOT n ) return NULL;
            93 |  size_t oldsize =*((int *)a-2)-16;
            94 |  assert(oldsize > 0);
            95 |  if ( oldsize < size )
            96 |   memcpy(n,a,oldsize);
            97 |  else
            98 |   memcpy(n,a,size);
            99 |  OwnFree(a);
           100 |  return n;
           101 |  ü
           102 | #endif
           103 | /*-----------------------------------------------------------------
           104 | MvsInterface
           105 | ------------------------------------------------------------------*/
           106 |
           107 | void MvsInterface::trace(char * t)
           108 |  ä
           109 |  if ( GlobalTraceFlag && file )
           110 |   fprintf(file,"%sÖn",t);
           111 |  ü
           112 |
           113 | void MvsInterface::tracedump(char * t,void * bv,int  bl)
           114 |  ä
           115 |  if ( GlobalTraceFlag )
           116 |   ä
           117 |   if ( file )
           118 |    fprintf(file,"%s === %pÖn",t,bv);
           119 |   char pÄ512Ü;
           120 |   char * b = (char *)bv;
           121 |   for(int o = 0;o<=bl;o+=16)
           122 |    ä
           123 |    dump(p,o,b,bl);
           124 |    fprintf(file,"%s %s Ön",DatetoString(),p);
           125 |    ü
           126 |   ü
           127 |  ü
           128 |
           129 | void MvsInterface::extractOper(char * text)
           130 |  ä
           131 |  mvsSTRING s(text), p1, p2, st;
           132 |  s.parse(p1,"=",st," ",p2);
           133 |  while ( st.lengthOf() )
           134 |   ä
           135 |   char* c = strchr((char *)st,'=');
           136 |   if ( c )
           137 |    *c = 0;
           138 |   else
           139 |    c = " 1";
           140 |   if ( strcmp(st,"TRACE") == 0)
           141 |    GlobalTraceFlag = atoi(getenv("TRACE"));
           142 |   s = p1+p2;
           143 |   s.parse(p1," =",st," ",p2);
           144 |   ü
           145 |  strcpy(text,s);
           146 |  ü
           147 |
           148 | /*-----------------------------------------------------------------
           149 | MvsStcInterface
           150 | ------------------------------------------------------------------*/
           151 |
           152 | char * function_name_tableÄÜ  = ä
           153 |  "CLEANUP",
           154 |  "GETTOKEN",
           155 |  "CREATETOKEN",
           156 |  "DELETETOKEN",
           157 |  "ALLOCATEPAGES",
           158 |  "FREEPAGES",
           159 |  "ENQ",
           160 |  "DEQ",
           161 |  "SLEEP",
           162 |  "GETECB",
           163 |  "WAIT",
           164 |  "POST",
           165 |  "RESET",
           166 |  "SELECT",
           167 |  "CONNECTSHMEM",
           168 |  "DISCONNECTSHMEM",
           169 |  "OPER",
           170 |  "WTO",
           171 |  "MALLOC",
           172 |  "FREE",
           173 |  "SVC",
           174 |  "ATTCHMVS",
           175 |  "CLOCK",
           176 |  "TIMEUSED",    //szm0050301
           177 |  "TDUMP",       //szm20050325
           178 |  "LOGGER",
           179 |  "VTOC",
           180 |  "SRB",
           181 |  "WLM",
           182 |  "OBTAIN",
           183 |  "TESTAUTH",
           184 |  "DIAGNOSE",
           185 |  "VSMLIST",
           186 |  NULL
           187 |  ü;
           188 |
           189 |
           190 | MvsInterface::MvsInterface()
           191 |  ä
           192 |  srb = false;
           193 |  jobnameÄ8Ü = programnameÄ8Ü = 0x00;
           194 |  if ( GlobalTraceFlag && NOT GlobalCicsFlag )
           195 |   ä
           196 |   file  = fopen("SYSPRINT","w");
           197 |   ü
           198 |  else file = 0;
           199 |  CASMIF(sym_init);
           200 |  memcpy(jobname,pASM->asm_jobname,8);
           201 |  memcpy(programname,pASM->asm_programname,8);
           202 |  // TRACE(4,Msg(9503)<<">MvsInterface"<<jobname<<programname<<eol);
           203 |  ü
           204 |
           205 | MvsInterface::ßMvsInterface()
           206 |  ä
           207 |  if ( file ) fclose(file);
           208 |  CASMIF(sym_cleanup);
           209 |  pASM = 0;
           210 |  TRACE(4,SMsg(9501)<<"<MvsInterface"<<eol);
           211 |  ü
           212 |
           213 | int MvsInterface::TCPCALL(int      function,
           214 |              void *   p0,void *   p1,void *   p2,void * p3,
           215 |              void *   p4,void *   p5,void *   p6,void * p7)
           216 |  ä
           217 |  CASMIF(function,p0,p1,p2,p3,
           218 |   p4,p5,p6,p7);
           219 | #if 0
           220 |  if ( rc == -1 )
           221 |   ä
           222 |   CASMIF(sym_lasterror);
           223 |   TRACE(1,Msg(9502)<<">Socket errror"<<int(rc)<<eol);
           224 |   MsgEnq();
           225 |   Msg(9511)<<function_name_tableÄfunctionÜ
           226 |   <<" code:"<<rc<<eol;
           227 |   MsgDeq();
           228 |   return -1;
           229 |   ü
           230 | #endif
           231 |  return rc;
           232 |  ü
           233 |
           234 | int MvsInterface::CASMIF(int      function,
           235 |              void * p0,void * p1,void * p2,void *p3,
           236 |              void * p4,void * p5,void * p6,void *p7)
           237 |  ä
           238 |  if (function == sym_init)
           239 |   ä
           240 |   pASM = (pasm)ASMIF(0);
           241 |   assert(pASM);
           242 |   pASM->asm_mvs = this;
           243 |   ü
           244 |  else
           245 |   ä
           246 |   pASM->asm_function_code = char(function);
           247 |   pASM->asm_parmsÄ0Ü= p0;
           248 |   pASM->asm_parmsÄ1Ü= p1;
           249 |   pASM->asm_parmsÄ2Ü= p2;
           250 |   pASM->asm_parmsÄ3Ü= p3;
           251 |   pASM->asm_parmsÄ4Ü= p4;
           252 |   pASM->asm_parmsÄ5Ü= p5;
           253 |   pASM->asm_parmsÄ6Ü= p6;
           254 |   pASM->asm_parmsÄ7Ü= p7;
           255 |   ASMIF(pASM);
           256 |   rc = int(pASM->asm_rc);
           257 |   reason = int(pASM->asm_reason);
           258 |   //szm20030616 no check for ENQ/DEQ
           259 |   if ( function NEQ sym_sleep &&  function NEQ sym_wait && function NEQ sym_attachmvs
           260 |    && function NEQ sym_svc &&  function NEQ sym_clock && function NEQ sym_logger && function NEQ sym
           260 | _wlm
           261 |    && function NEQ sym_srb   // no check for SRB
           262 |    &&function NEQ sym_obtain)
           263 |    check(rc,function," CASMIF ");
           264 |   else
           265 |    return (rc);
           266 |   ü
           267 |  return (rc==0);
           268 |  ü
           269 | int MvsInterface::check(int r,char *function,char * action)
           270 |  ä
           271 |  char hexÄ9Ü;
           272 |  sprintf(hex,"%8.8x",reason);
           273 |  if ( GlobalTraceFlag == 4 )
           274 |   TRACE(4,SMsg(9505)<<" Checking "<<rc<<hex<<function<<action<<eol);
           275 |  if ( r )
           276 |   ä
           277 |   MsgEnq();
           278 |   Msg(9510)<<function<<action<<r<<eol;
           279 |   MsgDeq();
           280 |   ü
           281 |  return r;
           282 |  ü
           283 |
           284 |
           285 | int MvsInterface::check(int r,int function,char * action)
           286 |  ä
           287 |
           288 |  char hexÄ9Ü;
           289 |  sprintf(hex,"%8.8x",reason);
           290 |  char hexrsnÄ9Ü;
           291 |  sprintf(hexrsn,"%8.8x",pASM->asm_bpx1_rsncode);
           292 |  if ( GlobalTraceFlag == 4 )
           293 |   TRACE(4,SMsg(9505)<<" Checking "<<int(rc)<<hex<<
           294 |   function_name_tableÄfunctionÜ<<action<<eol);
           295 |  if ( r )
           296 |   ä
           297 |   switch(function)
           298 |    ä
           299 |    case sym_select:      if ( r < 0 )
           300 |     ä
           301 |     MsgEnq();
           302 |     Msg(9510)<<function_name_tableÄfunctionÜ<<
           303 |      hex<<hexrsn<<eol;
           304 |     MsgDeq();
           305 |     ü
           306 |               break;
           307 |    case sym_enq:         if ( r == -1 ) break;
           308 |    case sym_wait:        if ( r == -1 ) break;
           309 |    case sym_gettoken:    if ( r == 4 ) break;
           310 |    case sym_deletetoken: if ( r == 4 ) break;
           311 |    case sym_disconnectshmem: if ( r == 4 ) break;
           312 |    case sym_vtoc:        if ( r ==4 ) break;
           313 |    default:
           314 |     MsgEnq();
           315 |     Msg(9510)<<function_name_tableÄfunctionÜ<<
           316 |      r<<hex<<eol;
           317 |     MsgDeq();
           318 |    ü
           319 |   ü
           320 |  return r;
           321 |  ü
           322 |
           323 |
           324 | pcsul MvsInterface::GetTCB()
           325 |  ä
           326 |  return (*(pcsul *)PSATOLD);
           327 |  ü
           328 |
           329 | pcsul MvsInterface::GetASCB()
           330 |  ä
           331 |  return(*(pcsul *)PSAAOLD);
           332 |  ü
           333 |
           334 | int MvsInterface::CheckASCB(pcsul ascb)
           335 |  ä
           336 |  return(NOT (memcmp("ASCB",(char *)ascb,4)));
           337 |  ü
           338 |
           339 | pcsul MvsInterface::GetToken(char * n)
           340 |  ä
           341 |  TRACE(4,SMsg(9502)<<">GetToken"<<n<<eol);
           342 |  if ( n  &&  CASMIF(sym_gettoken,n,wt))
           343 |   ä
           344 |   TRACEDUMP(4,SMsg(9501)<<"<GetToken"<<eol,(void *)wt,sizeof(*wt));
           345 |   return ((pcsul)wt);
           346 |   ü
           347 |  return ((pcsul)NULL);
           348 |  ü
           349 |
           350 | pcsul MvsInterface::CreateToken(char *n,pcsul * v)
           351 |  ä
           352 |  TRACE(4,SMsg(9502)<<">CreateToken"<<n<<eol);
           353 |  wtÄ0Ü = vÄ0Ü;
           354 |  wtÄ1Ü = vÄ1Ü;
           355 |  wtÄ2Ü = vÄ2Ü;
           356 |  wtÄ3Ü = vÄ3Ü;
           357 |  rc = 16;
           358 |  if ( n )
           359 |   ä
           360 |   CASMIF(sym_createtoken,n,wt);
           361 |   if ( rc == 4 )
           362 |    ä
           363 |    CASMIF(sym_deletetoken,n);
           364 |    CASMIF(sym_createtoken,n,wt);
           365 |    ü
           366 |   ü
           367 |  TRACEDUMP(4,SMsg(9501)<<">CreateToken"<<eol,(void *)wt,sizeof(*wt));
           368 |  return (rc==0);
           369 |  ü
           370 |
           371 | void MvsInterface::DeleteToken(char *n)
           372 |  ä
           373 |  TRACEDUMP(4,SMsg(9501)<<">DeleteToken"<<eol,(void *)n,strlen(n));
           374 |  CASMIF(sym_deletetoken,n);
           375 |  TRACE(4,SMsg(9501)<<"<DeleteToken"<<eol);
           376 |  ü
           377 |
           378 |
           379 | int MvsInterface::WaitEcb(pcsul  ms,
           380 |              void * pecb0,void * pecb1,void * pecb2,void * pecb3)
           381 |  ä
           382 |  TRACEDUMP(4,SMsg(9503)<<">WaitEcb"<<rc<<ms<<eol,pecb0,20);
           383 |  CASMIF(sym_wait,(void *)ms,pecb0,pecb1,pecb2,pecb3);
           384 |  TRACE(4,SMsg(9502)<<"<WaitEcb"<<rc<<eol);
           385 |  return rc;
           386 |  ü
           387 |
           388 | int MvsInterface::PostEcb(void * pecb,pcsul code)
           389 |  ä
           390 |  TRACE(3,SMsg(9502)<<">PostEcb"<<code<<eol);
           391 |  CASMIF(sym_post,pecb,(void *)code);
           392 |  TRACEDUMP(3,SMsg(9502)<<"<PostEcb"<<rc<<eol,pecb,20);
           393 |  return rc;
           394 |  ü
           395 |
           396 | int MvsInterface::Enq(char * n,int ms)
           397 |  ä
           398 |  TRACE(4,SMsg(9503)<<">Enq"<<n<<ms<<eol);
           399 |  CASMIF(sym_enq,ASM_MAJOR,n,(void *)strlen(n),(void *)ms);
           400 |  TRACE(4,SMsg(9502)<<"<Enq"<<rc<<eol);
           401 |  if ( rc == 0 ) return 1;
           402 |  else if ( rc < 0 ) return 0;
           403 |  else return -1;
           404 |  ü
           405 |
           406 | int MvsInterface::Deq(char * n)
           407 |  ä
           408 |  TRACE(4,SMsg(9502)<<">Deq"<<n<<eol);
           409 |  CASMIF(sym_deq,ASM_MAJOR,n,(void *)strlen(n));
           410 |  TRACE(4,SMsg(9503)<<"<Deq"<<rc<<n<<eol);
           411 |  return (rc==0);
           412 |  ü
           413 |
           414 |
           415 | int MvsInterface::Svc(int n, void *p)
           416 |  ä
           417 |  TRACE(4,SMsg(9502)<<">Svc"<<n<<eol);
           418 |  CASMIF(sym_svc,(void *)n,(void *)p);
           419 |  TRACE(4,SMsg(9503)<<"<Svc"<<rc<<n<<eol);
           420 |  return (rc);
           421 |  ü
           422 |
           423 | int MvsInterface::AttachMvs(const char * module,const char * parms)
           424 |  ä
           425 |  size_t l_module= strlen(module);
           426 |  size_t l_parms = strlen(parms);
           427 |  TRACE(4,SMsg(9503)<<">AttachMvs"<<module<<parms<<eol);
           428 |  CASMIF(sym_attachmvs,(void *)&l_module,(void *)module,(void *)&l_parms,(void *)parms);
           429 |  TRACE(4,SMsg(9503)<<"<AttachMvs"<<rc<<module<<eol);
           430 |  return (rc);
           431 |  ü
           432 |
           433 | void MvsInterface::Clock(void * stck)
           434 |  ä
           435 |  CASMIF(sym_clock,stck);
           436 |  ü
           437 |
           438 | //szm20050301
           439 | void MvsInterface::Timeused(void * time) //szm20050301
           440 |  ä
           441 |  CASMIF(sym_timeused,time);
           442 |  ü
           443 |
           444 | long long clock_mvs()
           445 |  ä
           446 |  long long here;
           447 |  mvs()->Timeused(&here);
           448 |  return here;
           449 |  ü
           450 | //szm20050301
           451 | //szm20050325
           452 | int MvsInterface::Tdump(const char * n,const char *d,int dd = 0)
           453 |  ä
           454 |  return (CASMIF(sym_tdump,(void *)n,(void *)d,(void *)dd));
           455 |  ü
           456 |
           457 | int tdump(const char *n, const char *d,int dd)
           458 |  ä
           459 |  return mvs()->Tdump(n,d,dd);
           460 |  ü
           461 |
           462 | //szm20071005 get back reason code
           463 | int mvsReasonCode()
           464 |  ä
           465 |  return mvs()->getReasonCode();
           466 |  ü
           467 | //szm20071005 get back reason code
           468 |
           469 |
           470 | //szm20050325
           471 |
           472 | //szm20051118 LOGGER
           473 | //szm20080421
           474 | int MvsInterface::LoggerOpen(const char * stream)
           475 |  ä
           476 |  char zerosÄ17Ü = "Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0Ö0";
           477 |  char tokenÄ17Ü = "                ";
           478 |  memcpy(token,stream,(strlen(stream)<16?strlen(stream):16));
           479 |  pcsul  p =NULL;
           480 |
           481 |  if (strcmp(stream,(const char *)(pASM->asm_streamname))==0)
           482 |   ä
           483 |   if (memcmp(pASM->asm_streamtoken,zeros,16)==0)
           484 |    ä
           485 |    if (p=GetToken(token))
           486 |     memcpy(pASM->asm_streamtoken,(char *)p,16);
           487 |    else
           488 |     if (CASMIF(sym_logger,(void *)0,(void *)stream,(void *)strlen(stream))==0)
           489 |      CreateToken(token,(pcsul *)(pASM->asm_streamtoken));
           490 |     else
           491 |      return 0;
           492 |    ü
           493 |   return 1;
           494 |   ü
           495 |
           496 |  if (CASMIF(sym_logger,(void *)0,(void *)stream,(void *)strlen(stream))|=0);
           497 |  return 0;
           498 |
           499 |  CreateToken(token,(pcsul *)(pASM->asm_streamtoken));
           500 |  return 1;
           501 |  ü
           502 | int MvsInterface::Logger(const char * stream,size_t l)
           503 |  ä
           504 |  return (CASMIF(sym_logger,(void *)1,(void *)stream,(void *)(l?l:strlen(stream)))==0);
           505 |  ü
           506 | //szm20060113
           507 | int MvsInterface::BrowseLogger(const char * & addr,size_t *  & length,int direction,int all,char * d
           507 | ate_time)
           508 |  ä
           509 |   if (direction ==0) //szm20100717
           510 |    direction = 2;
           511 |  return (CASMIF(sym_logger,(void *)(direction),(void *)&addr,(void *)&length,(void *)all,(void *)dat
           511 | e_time));
           512 |  ü
           513 |
           514 | //szm20080421
           515 | int MvsInterface::LoggerClose()
           516 |  ä
           517 |  //return (CASMIF(sym_logger,(void *)-1)); szm20080421
           518 |  // never close the logger
           519 |  return 1;
           520 |  ü
           521 | //szm20051118 LOGGER
           522 | //szm20051121 VTOC
           523 | int MvsInterface::VtocOpen(const char * ddname,const char * mask,char *dscb)
           524 |  ä
           525 |  char _maskÄ46Ü;
           526 |  char _ddnameÄ9Ü;
           527 |  memcpy(_mask+1,mask,44);
           528 |  _maskÄ45Ü = 0;
           529 |  if (strchr(_mask+1,' '))
           530 |   *strchr(_mask+1,' ')= 0;
           531 |  _maskÄ0Ü = strlen(_mask+1);
           532 |  memset(_ddname,' ',8);
           533 |  _ddnameÄ8Ü = 0;
           534 |  memcpy(_ddname,ddname,(strlen(ddname)<=8)?strlen(ddname):8);
           535 |  CASMIF(sym_vtoc,(void *)0,(void *)_ddname,(void *)_mask,(void *)dscb);
           536 |  return rc;
           537 |  ü
           538 | int MvsInterface::Vtoc(char * dscb)
           539 |  ä
           540 |  CASMIF(sym_vtoc,(void *)1,(void *)0,(void *)0,(void *)dscb);
           541 |  return rc;
           542 |  ü
           543 | int MvsInterface::VtocClose()
           544 |  ä
           545 |  return (CASMIF(sym_vtoc,(void *)-1));
           546 |  ü
           547 | //szm20051121 VTOC
           548 |
           549 | //szm20081119
           550 | int MvsInterface::initEnclave()
           551 |   ä
           552 |  	return wlmEnclave;
           553 |   ü
           554 |
           555 | int MvsInterface::Srb()
           556 |  ä
           557 |  if (srb)
           558 |   ä
           559 |  CASMIF(sym_srb);
           560 |  srb = false;
           561 |  //printf(" exit from SRB:%p %p srbFlag:%dÖn",pASM,this,pASM->asm_srb_mode);
           562 |   ü
           563 |  else
           564 |   ä
           565 |   //printf(" entry to SRB:%p %p srbFlag:%dÖn",pASM,this,pASM->asm_srb_mode);
           566 |   srb = true;
           567 |   CASMIF(sym_srb);
           568 |   ü
           569 |  return rc;
           570 |  ü
           571 |
           572 |
           573 | int MvsInterface::Wlm(const char * subsys,const char * subsysnm)
           574 |  ä
           575 |  /*
           576 |  if (CASMIF(sym_wlm,(void *)subsys,(void *)subsysnm)|=0)
           577 |   ä
           578 |   printf(" WLM function:%8.8s rc:%d(%8.8x) rsn:%d(%8.8x)Ön",
           579 |    pASM->asm_wlm_macro,pASM->asm_wlm_retcode,pASM->asm_wlm_retcode,
           580 |    pASM->asm_wlm_rsncode,pASM->asm_wlm_rsncode);
           581 |   return 8;
           582 |   ü
           583 |  */
           584 |
           585 |  return 0;
           586 |  ü
           587 |
           588 | int MvsInterface::Obtain(const char * dsn, const char * volser,char * dscb)
           589 | ä
           590 |  return (CASMIF(sym_obtain,(void *)dsn,(void *)volser,(void *)dscb));
           591 | ü
           592 |
           593 | int MvsInterface::Testauth()
           594 | ä
           595 |  return (CASMIF(sym_testauth));
           596 | ü
           597 |
           598 | int MvsInterface::Diagnose(int function,void * reply)
           599 | ä
           600 |  return(CASMIF(sym_diagnose,(void *)function,reply));
           601 | ü
           602 |
           603 |
           604 | int MvsInterface::Vsmlist(void * ascb,void * address, int length )
           605 | ä
           606 |  return(CASMIF(sym_vsmlist,ascb,address,(void *)length));
           607 | ü
           608 |
           609 | void MvsInterface::Chap(pcsul t,int p)
           610 |  ä
           611 |  TRACE(4,SMsg(9503)<<">Chap"<<t<<long(p)<<eol);
           612 | #ifdef __SASC_
           613 |  CHAP(p,&t);
           614 | #endif
           615 |  TRACE(4,SMsg(9501)<<"<Chap"<<eol);
           616 |  ü
           617 |
           618 | pcsul MvsInterface::Attach(char * pgm,char ** param,pcsul ecb)
           619 |  ä
           620 |  TRACE(4,SMsg(9502)<<">Attach"<<pgm<<eol);
           621 |  pcsul tcb = 0;
           622 |  *(pcsul *)ecb = 0;
           623 |  pcsul lparamÄ16Ü;
           624 |  int i;
           625 |  for(i =0;i<16 && paramÄiÜ;i++)lparamÄiÜ = (pcsul)(paramÄiÜ);
           626 |  lparamÄiÜ = lparamÄiÜ ] 0x80000000;
           627 |  check(rc,"Attach","ATTACH");
           628 |  TRACE(4,SMsg(9501)<<"<Attach"<<eol);
           629 |  return tcb;
           630 |  ü
           631 |
           632 | void MvsInterface::Detach(pcsul tcb)
           633 |  ä
           634 |  TRACE(4,SMsg(9502)<<">Detach"<<tcb<<eol);
           635 |  check(rc,"Deatch","DETACH");
           636 |  TRACE(4,SMsg(9501)<<"<Detach"<<eol);
           637 |  ü
           638 |
           639 | void MvsInterface::Sleep(int ms)
           640 |  ä
           641 |  TRACE(4,SMsg(9502)<<">Sleep"<<ms<<eol);
           642 |  if (ms) CASMIF(sym_sleep,(void *)ms);
           643 |  TRACE(4,SMsg(9501)<<"<Sleep"<<eol);
           644 |  ü
           645 |
           646 | int MvsInterface::Oper(char *to,const size_t length)
           647 |  ä
           648 |  TRACE(4,SMsg(9501)<<">Oper"<<eol);
           649 |  memset(to,0,length);
           650 |  CASMIF(sym_oper,(void *)to,(void *)length);
           651 |  if ( rc == 0 ) extractOper(to);
           652 |  TRACE(4,SMsg(9503)<<"<Oper"<<to<<rc<<eol);
           653 |  return rc;
           654 |  ü
           655 |
           656 | void MvsInterface::Wto(const char *text,const int desc)
           657 |  ä
           658 |  if ( text == 0 ) return;
           659 |  TRACE(4,SMsg(9502)<<">Wto"<<text<<eol);
           660 |  char  tÄ128Ü;
           661 |  memset(t,0,sizeof(t));
           662 |  strncpy(t,text,sizeof(t)-1);
           663 |  for(char * ct = t;*ct;ct++) if( *ct == 'Ön') *ct = ' ';
           664 |  CASMIF(sym_wto,(void *)t,(void *)strlen(t),(void *)desc);
           665 |  TRACE(4,SMsg(9501)<<"<Wto"<<eol);
           666 |  ü
           667 |
           668 | void * MvsInterface::Malloc(size_t size)
           669 |  ä
           670 |  void * a = 0;
           671 |  CASMIF(sym_malloc,(void *)size,(void *)&a);
           672 |  check(rc,"Malloc","MALLOC");
           673 |  return a;
           674 |  ü
           675 |
           676 | void  MvsInterface::Free(void * a)
           677 |  ä
           678 |  CASMIF(sym_free,(void *)a);
           679 |  check(rc,"Free","FREE");
           680 |  return ;
           681 |  ü
           682 |
           683 |
           684 | int MvsInterface::Select(pcsul numfds,
           685 |              void *rfds,void *wfds,void *efds,void *time)
           686 |  ä
           687 |  CASMIF(sym_select,(void *)numfds,rfds,wfds,efds,time);
           688 |  TRACE(4,SMsg(9502)<<"<Select"<<rc<<eol);
           689 |  return rc;
           690 |  ü
           691 |
           692 | /*-----------------------------------------------------------------
           693 | COMMON functions
           694 | ------------------------------------------------------------------*/
           695 |
           696 | int isCics()ä return GlobalCicsFlag;ü
           697 |
           698 |
           699 | MvsInterface * getTcbUser()
           700 |  ä
           701 |  pcsul  p = * (pcsul  * )PSATOLD;
           702 |  pasm pASM = ((pasm)*(pasm *)(p+TCBUSER));
           703 |  if (pASM)
           704 |   return((MvsInterface *)(pASM->asm_mvs));
           705 |  else
           706 |   return((MvsInterface * )NULL);
           707 |  ü
           708 |
           709 |
           710 | MvsInterface * mvs()
           711 |  ä
           712 |  int i = 0;
           713 |  for(;i<MAX_TCB && _mvsInterfaceÄiÜ;i++)
           714 |   if (_tcbÄiÜ == *(pcsul *)PSATOLD) break;
           715 |  assert(i<MAX_TCB);
           716 |  if (_mvsInterfaceÄiÜ && _tcbÄiÜ == *(pcsul *)PSATOLD)
           717 |   return(_mvsInterfaceÄiÜ);
           718 |  _tcbÄiÜ = *(pcsul *)PSATOLD;
           719 |  return (_mvsInterfaceÄiÜ = (MvsInterface*)new MvsInterface());
           720 |  ü
           721 |
           722 | int MsgEnq()
           723 |  ä
           724 |  int rc = 0;
           725 |  rc = ( ENQ(MSG_MAJOR,MSG_MINOR,E,8,STEP,NONE) == 0);
           726 |  return rc;
           727 |  ü
           728 |
           729 | int MsgDeq()
           730 |  ä
           731 |  int rc = 0;
           732 |  rc = ( DEQ(MSG_MAJOR,MSG_MINOR,8,STEP,NONE) == 0);
           733 |  return rc;
           734 |  ü
           735 |
           736 | //KV20030515
           737 | SyncVar::SyncVar(pcsul w)
           738 |  ä
           739 |  var  = 0;
           740 |  wait = w;
           741 |  ecb  = 0;
           742 |  ü
           743 |
           744 | SyncVar::SyncVar(const SyncVar & v)
           745 |  ä
           746 |  var  = v.var;
           747 |  wait = v.wait;
           748 |  ecb = 0;
           749 |  ü
           750 | SyncVar::ßSyncVar()
           751 |  ä
           752 |  if (ecb&WAITcode)
           753 |   mvs()->PostEcb(&ecb,0);
           754 |  ü
           755 | SyncVar& SyncVar::operator=(pcsul t)
           756 |  ä
           757 |  // printf(" %p TCB %s %dÖn",*(pcsul *)PSATOLD,">operator",t);
           758 |  // btrace(&btracef);
           759 |  for(;;)
           760 |   ä
           761 |   // if ( p1 == *p3 ) *p3 = p2
           762 |   // else p1 = *p3
           763 |   pcsul x = var;
           764 |   if (CompareAndSwap(x,t,&var)==0)
           765 |    break;
           766 |   ü
           767 |  mvs()->PostEcb(&ecb,t);
           768 |  //printf(" %p TCB %s %pÖn",*(pcsul *)PSATOLD,"<operator",var);
           769 |  return(*this);
           770 |  ü
           771 |
           772 | SyncVar::operator int()
           773 |  ä
           774 |  //printf(" %p TCB %s %pÖn",*(pcsul *)PSATOLD,"init()",var);
           775 |  return int(var);
           776 |  ü
           777 |
           778 | pcsul waitSyncVar(SyncVar &s)
           779 |  ä
           780 |  //printf(" %p TCB  %s %pÖn",*(pcsul *)PSATOLD,">wait",s.var);
           781 |  //szm20040624 avoid dumplicate wait on ECB's (S301)
           782 |  if (int(s.ecb)&0x80000000)
           783 |   mvs()->Sleep(100);
           784 |  else
           785 |   if (mvs()->WaitEcb(s.wait,&s.ecb) <0)
           786 |    return (-1);
           787 |  // printf(" %p TCB  %s %pÖn",*(pcsul *)PSATOLD,"<wait",s.var);
           788 |  return(s.var);
           789 |  ü
           790 | pcsul waitSyncVars(SyncVar &s1,SyncVar &s2)
           791 |  ä
           792 |  //printf(" %p TCB %s %p %pÖn",*(pcsul *)PSATOLD,">waits",s1.var, s2.var);
           793 |  //szm20040624 avoid dumplicate wait on ECB's (S301)
           794 |  if (int(s1.ecb)&0x80000000 ]] int(s2.ecb)&0x80000000)
           795 |   mvs()->Sleep(100);
           796 |  else
           797 |   if
           798 |    (mvs()->WaitEcb((s1.wait<s2.wait?s1.wait:s2.wait),&s1.ecb,&s2.ecb) < 0)
           799 |    return (-1);
           800 |  //printf(" %p TCB %s %p %pÖn",*(pcsul *)PSATOLD,"<waits",s1.var, s2.var);
           801 |  return(1);
           802 |  ü
           803 |
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(CASMIF)'                      30.11.12 08:25:57
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTDSSN.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(STDLIB)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.H(BUILTINS)'
     5  =  //'CEE.SCEEH.H(STDDEF)'
     6  =  //'CEE.SCEEH.H(STRING)'
     7  =  //'CEE.SCEEH.H(STRINGS)'
     8  =  //'CEE.SCEEH.SYS.H(TYPES)'
     9  =  //'ESA.PRJ.CBTDSSN.HPP(CASMIF)'
    10  =  //'ESA.PRJ.CBTDSSN.HPP(ASMIF)'
    11  =  //'CEE.SCEEH.H(STDIO)'
    12  =  //'ESA.PRJ.CBTDSSN.HPP(MCHAIN)'
    13  =  //'ESA.PRJ.CBTDSSN.HPP(MVSBASE)'
    14  =  //'ESA.PRJ.CBTDSSN.HPP(MERROR)'
    15  =  //'ESA.PRJ.CBTDSSN.HPP(DSNAMEUT)'
    16  =  //'CEE.SCEEH.H(ASSERT)'
    17  =  //'ESA.PRJ.CBTDSSN.HPP(MVSTIME)'
    18  =  //'CEE.SCEEH.H(TIME)'
    19  =  //'ESA.PRJ.CBTDSSN.HPP(MISC)'
    20  =  //'ESA.PRJ.CBTDSSN.HPP(MSGMGR)'
    21  =  //'CEE.SCEEH.H(ASSERT)'
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.13 z/OS XL C++              //'ESA.PRJ.CBTDSSN.CPP(CASMIF)'                      30.11.12 08:25:57
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
