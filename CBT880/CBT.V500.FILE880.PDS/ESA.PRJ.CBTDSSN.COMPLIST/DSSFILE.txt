
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSFILE)'                      30.11.12 08:25:26
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              TEMPLATEDEPTH(300)
                                  :NOTEMPLATEREGISTRY              TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)
                                  :TMPLPARSE(NO)   TUNE(7)         UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64
                                  :NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,NOMAF,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__,__I,_Complex,__complex__,__real__,__imag__)
                                  :NOKEYWORD(char16_t,char32_t,decltype,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NOCOMPATRVALUEBINDING,NODBCS,NODECLTYPE,NODELEGATINGCTORS,
                                   DEPENDENTBASELOOKUP,NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,
                                   EXTERNTEMPLATE,ILLPTOM,IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,
                                   NOOLDDIGRAPH,OLDFRIEND,NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,
                                   NOTEMPSASLOCALS,NOTEXTAFTERENDIF,GNU_LABELVALUE,GNU_COMPUTEDGOTO,TRAILENUM,TYPEDEFCLASS,NOUCS,
                                   VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY,NOC99COMPLEX,NOC99COMPLEXHEADER,
                                   NOGNU_COMPLEX,GNU_SUFFIXIJ)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410D0000
                                  : __LIBREL__=0x410D0000
                                  : __TARGET_LIB__=0x410D0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSFILE)'                      30.11.12 08:25:26
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | #include "isisdef.h"
             2 | #include <stdio.h>
             3 | #include <stdlib.h>
             4 | #include <string.h>
             5 | #include <errno.h>
             6 | #include <stdio.h>
             7 | #include <fcntl.h>
             8 |
             9 | #include <assert.h>
            10 | #include <ctype.h>
            11 | #include <sys/types.h>
            12 | #include <sys/stat.h>
            13 |
            14 | #include <unistd.h>
            15 | #ifndef O_BINARY
            16 | #define O_BINARY 0
            17 | #endif
            18 | #include "dssfile.hpp"
            19 | #include "dssmain.hpp"
            20 | #include "jobenv.hpp"
            21 | #include "subtask.hpp"
            22 | #include "msgmgr.hpp"
            23 | #include "casmif.hpp"
            24 |
            25 | int _edc_add_errno2 = setenv("_EDC_ADD_ERRNO2","1",1);
            26 | static int compressMethod = (getenv(KEYWORD_COMPR)?
            27 | 														 atoi(getenv(KEYWORD_COMPR)):-1);
            28 | static  size_t MAX_IOLENGTH  = (getenv(KEYWORD_MAXLENGTH))?atoi(getenv(KEYWORD_MAXLENGTH))*1024*1024
            28 | :1024*1024*512;
            29 |
            30 | DSSFILE::DSSFILE(const char * n,DSSFILE_TYPE t,size_t max):
            31 | mERROR(),
            32 | fileName(n), type(t), buff_size(max)
            33 | 	ä
            34 | 	file    = NULL;
            35 | 	count = compressedCount = 0;
            36 | 	seqNo = 0;
            37 | 	buff = (UCHAR *) malloc(max);
            38 | 	if (buff == NULL)
            39 | 		Error(Msg(10000+1)<<short(max)<<eol,Abort);
            40 | 	zStream = (z_streamp)malloc(sizeof(z_stream));
            41 | 	memset(zStream,0,sizeof(z_stream));
            42 | 	fileName.strip();
            43 | 	init();
            44 | 	ü
            45 |
            46 | DSSFILE::ßDSSFILE()
            47 | 	ä
            48 | 	term();
            49 | 	if (zStream)
            50 | 		free(zStream);
            51 | 	zStream = NULL;
            52 | 	if (buff)
            53 | 		free(buff);
            54 | 	buff = NULL;
            55 | 	ü
            56 |
            57 | int DSSFILE::init()
            58 | 	ä
            59 | 	char _fileNameÄ1024Ü;
            60 | 	char _genFileNameÄ1024Ü;
            61 | 	if (seqNo)
            62 | 		sprintf(_fileName,"%s.%d",(char *)fileName,seqNo);
            63 | 	else
            64 | 		sprintf(_fileName,"%s",(char *)fileName);
            65 | 	Msg(10000+13)<<_fileName<<eol;
            66 | 	seqNo+=1;
            67 |
            68 | 	JOBENV::DEBUG(1,_fileName);
            69 |
            70 | 	int  flag = O_RDONLY;
            71 | 	ioLength = 0;
            72 | 	mode_t mode = 0;
            73 | 	mode =  S_IRUSR ] S_IWUSR ] S_IXUSR ]
            74 | 		S_IRGRP ] S_IWGRP ] S_IXGRP ]
            75 | 		S_IROTH ] S_IWOTH ] S_IXOTH;
            76 | 	JOBENV::DEBUG(1,int(mode));
            77 | 	if (type == DSSFILE_output)
            78 | 		ä
            79 | 		flag = O_WRONLY+O_CREAT;
            80 | 		file = open(genOpenName(_fileName,_genFileName),flag+O_BINARY,flag,mode);
            81 | 		if (file NEQ -1)
            82 | 			close(file);
            83 | 		int rc= chmod(genOpenName(_fileName,_genFileName),mode);
            84 | 		JOBENV::DEBUG(1,rc);
            85 |
            86 | 		ü
            87 | 	file = open(genOpenName(_fileName,_genFileName),flag+O_BINARY,flag);
            88 | 	if (file==-1&&seqNo>1&&type==DSSFILE_input)
            89 | 		return 0;
            90 | 	if (file == -1)
            91 | 		ä
            92 | 		perror(_fileName);
            93 | 		Error(Msg(10000+2)<<_fileName<<flag<<mode<<strerror(errno)<<eol,Abort);
            94 | 		ü
            95 |
            96 | 	if (type == DSSFILE_input)
            97 | 		ä
            98 | 		if ( (fileF = fdopen(file,"rb")) == NULL)
            99 | 			ä
           100 | 			perror(_fileName);
           101 | 			Error(Msg(10000+12)<<_fileName<<"rb"<<strerror(errno)<<eol,Abort);
           102 | 			ü
           103 | 		zStream->next_in    = (Bytef*)buff;
           104 | 		zStream->avail_in   = 0;
           105 | 		if (seqNo==1)
           106 | 			ä
           107 | 			if ((zRc = inflateInit(zStream)) NEQ Z_OK)
           108 | 				Error(Msg(10000+3)<<"inflateInit"<<zRc<<eol,Abort);
           109 | 			ü
           110 | 		else
           111 | 			if ((zRc = inflateReset(zStream)) NEQ Z_OK)
           112 | 				Error(Msg(10000+3)<<"inflateReset"<<zRc<<eol,Abort);
           113 |
           114 | 		ü
           115 | 	else
           116 | 		ä
           117 | 		if ((fileF = fdopen(file,"wb")) == NULL)
           118 | 			ä
           119 | 			perror(_fileName);
           120 | 			Error(Msg(10000+12)<<_fileName<<"wb"<<strerror(errno)<<eol,Abort);
           121 | 			ü
           122 | 		zStream->next_out    = (Bytef*)buff;
           123 | 		zStream->avail_out   = buff_size;
           124 | 		if (seqNo==1)
           125 | 			ä
           126 | 			if ((zRc =deflateInit(zStream,compressMethod)) NEQ Z_OK)
           127 | 				Error(Msg(10000+3)<<"deflateInit"<<zRc<<eol,Abort);
           128 | 			ü
           129 | 		else
           130 | 			if ((zRc =deflateReset(zStream)) NEQ Z_OK)
           131 | 				Error(Msg(10000+3)<<"deflateReset"<<zRc<<eol,Abort);
           132 | 		ü
           133 | 	return 1;
           134 | 	ü
           135 |
           136 | int DSSFILE::term()
           137 | 	ä
           138 | 	JOBENV::DEBUG(1,"term");
           139 | 	if(type ==DSSFILE_output&&fileF)
           140 | 		flush();
           141 | 	if (fileF)
           142 | 		fclose(fileF);
           143 | 	fileF = NULL;
           144 | 	return 1;
           145 | 	ü
           146 |
           147 | int DSSFILE::_put(void * b,size_t l,int flush)
           148 | 	ä
           149 | 	if (iserror())
           150 | 		return 0;
           151 | 	int send_size;
           152 | 	//printf("Put%dÖn",l);
           153 | 	if (flush==Z_NO_FLUSH)
           154 | 		ä
           155 | 		zStream->next_in    = (Bytef*)b;
           156 | 		zStream->avail_in   =  l;
           157 | 		send_size = buff_size;
           158 | 		ü
           159 | 	ok = 0;
           160 | 	while(NOT ok)
           161 |     switch((zRc = deflate(zStream,flush)))
           162 | 			ä
           163 | 			case Z_NEED_DICT:
           164 | 				Error(Msg(10000+3)<<"deflate"<<zRc<<eol,Continue);
           165 | 				ok = -1;
           166 | 				break;
           167 | 			case Z_STREAM_END:
           168 | 				send_size = buff_size - zStream->avail_out;
           169 | 				if (send_size NEQ int(fwrite(buff,1,send_size,fileF)))
           170 | 					ä   ok = -1;
           171 | 				Error(Msg(10000+3)<<"write"<<errno<<eol,Abort);
           172 | 					ü
           173 | 				else
           174 | 					ä
           175 | 					//printf("Write Stream End%dÖn",send_size);
           176 | 					ioLength += l;
           177 | 					count += send_size;
           178 | 					compressedCount = zStream->total_out;
           179 | 					ü
           180 | 				ok = 1;
           181 | 				break;
           182 | 			case Z_OK:
           183 | 				if(zStream->avail_out == 0)
           184 | 					ä
           185 | 					send_size = buff_size - zStream->avail_out;
           186 | 					if (send_size NEQ int(fwrite(buff,1,send_size,fileF)))
           187 | 						ä   ok = -1;
           188 | 					Error(Msg(10000+3)<<"write"<<errno<<eol,Abort);
           189 | 						ü
           190 | 					else
           191 | 						ä
           192 | 						//printf("Write %dÖn",send_size);
           193 | 						ioLength += l;
           194 | 						zStream->next_out  = (Bytef*)buff;
           195 | 						zStream->avail_out = buff_size;
           196 | 						count += send_size;
           197 | 						compressedCount = zStream->total_out;
           198 | 						ü
           199 | 					ü
           200 | 				if(zStream->avail_in == 0&&l>0)
           201 | 					ok = 1;
           202 | 				break;
           203 | 			default:
           204 | 				Error(Msg(10000+3)<<"deflate"<<zRc<<eol,Continue);
           205 | 				ok = -1;
           206 | 				break;
           207 | 			ü
           208 | 	JOBENV::DEBUG(1,ioLength);
           209 | 	if (ioLength>MAX_IOLENGTH&&l==4)
           210 | 		ä
           211 | 		ioLength = 0;
           212 | 		term();
           213 | 		if (init()==0)
           214 | 			Error(Msg(10000+3)<<"deflate"<<zRc<<eol,Abort);
           215 | 		ü
           216 | 	return(ok>0?1:0);
           217 | 	ü
           218 |
           219 | int DSSFILE::_get(void *b,size_t l,int flush)
           220 | 	ä
           221 | 	if (iserror()]]fileF==NULL)
           222 | 		return 0;
           223 | 	int recv_size = -1;
           224 | 	ok = 0;
           225 | 	zStream->next_out  = (Bytef*)b;
           226 | 	zStream->avail_out = l;
           227 | 	//printf("Get%dÖn",l);
           228 | 	while(NOT ok)
           229 | 		ä
           230 | 		if (zStream->avail_in == 0 )
           231 | 			ä
           232 | 			recv_size = fread(buff,1,buff_size,fileF);
           233 | 			//printf("Read %dÖn",recv_size);
           234 |
           235 | 			if (recv_size < 0)
           236 | 				ä  ok = -1;
           237 | 			Error(Msg(10000+3)<<"read"<<errno<<eol,Continue);
           238 | 				ü
           239 | 			zStream->avail_in = recv_size;
           240 | 			zStream->next_in  =(Bytef*)buff;
           241 | 			if (recv_size==0)
           242 | 				flush=Z_FINISH;
           243 | 			ü
           244 |     if (NOT ok) switch((zRc=inflate(zStream,flush)))
           245 | 			ä
           246 | 								case Z_NEED_DICT:
           247 | 									Error(Msg(10000+3)<<"inflate"<<zRc<<eol,Continue);
           248 | 									ok = -1;
           249 | 									break;
           250 | 								case Z_STREAM_END:
           251 | 								case Z_BUF_ERROR:
           252 | 								case Z_OK:
           253 | 									if (recv_size == 0 )
           254 | 										ä
           255 | 										term();
           256 | 										Bytef * _b = zStream->next_out;
           257 | 										size_t _l  = zStream->avail_out;
           258 | 										if (init()==0)
           259 | 											return 0;
           260 | 										zStream->next_out   = _b;
           261 | 										zStream->avail_out  = _l;
           262 | 										ü
           263 | 									if (zStream->avail_out == 0)
           264 | 										ok = 1;
           265 | 									break;
           266 | 								default:
           267 | 									Error(Msg(10000+3)<<"inflate"<<zRc<<eol,Continue);
           268 | 									ok = -1;
           269 | 									break;
           270 | 			ü
           271 | 		ü
           272 | 	count +=l;
           273 | 	compressedCount = zStream->total_in;
           274 | 	return(ok>0?1:0);
           275 | 	ü
           276 |
           277 | int DSSFILE::put(void * b,size_t l)
           278 | 	ä
           279 | 	if( _put((void *)&l,sizeof(size_t)) && _put(b,l))
           280 | 		return 1;
           281 | 	else
           282 | 		return 0;
           283 | 	ü
           284 |
           285 | int DSSFILE::get(void *b)
           286 | 	ä
           287 | 	size_t l = 0;
           288 | 	if (_get((void*)&l,sizeof(size_t)))
           289 | 		ä
           290 | 		if ( _get(b,l))
           291 | 			return l;
           292 | 		ü
           293 | 	return 0;
           294 | 	ü
           295 |
           296 | int DSSFILE::flush()
           297 | 	ä
           298 | 	return(_put(0,0,Z_FINISH));
           299 | 	ü
           300 |
           301 | void DSSFILE::Error(char *,Error_Action a)
           302 | 	ä
           303 | 	if (a == Continue)
           304 | 		return;
           305 | 	else
           306 | 		ä
           307 | 		Msg(10000+9999)<<eol;
           308 | 		abort();
           309 | 		ü
           310 | 	ü
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSFILE)'                      30.11.12 08:25:26
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTDSSN.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(STDIO)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.SYS.H(TYPES)'
     5  =  //'CEE.SCEEH.H(STDLIB)'
     6  =  //'CEE.SCEEH.H(BUILTINS)'
     7  =  //'CEE.SCEEH.H(STDDEF)'
     8  =  //'CEE.SCEEH.H(STRING)'
     9  =  //'CEE.SCEEH.H(ERRNO)'
    10  =  //'CEE.SCEEH.H(FCNTL)'
    11  =  //'CEE.SCEEH.SYS.H(MODES)'
    12  =  //'CEE.SCEEH.H(ASSERT)'
    13  =  //'CEE.SCEEH.H(CTYPE)'
    14  =  //'CEE.SCEEH.SYS.H(STAT)'
    15  =  //'CEE.SCEEH.SYS.H(MNTENT)'
    16  =  //'CEE.SCEEH.SYS.H(STAT)'
    17  =  //'CEE.SCEEH.H(UNISTD)'
    18  =  //'CEE.SCEEH.H(INTTYPES)'
    19  =  //'CEE.SCEEH.H(STDINT)'
    20  =  //'ESA.PRJ.CBTDSSN.HPP(DSSFILE)'
    21  =  //'ESA.PRJ.CBTDSSN.HPP(MVSBASE)'
    22  =  //'ESA.PRJ.CBTDSSN.HPP(MERROR)'
    23  =  //'ESA.PRJ.CBTDSSN.HPP(DSNAMEUT)'
    24  =  //'CEE.SCEEH.H(ASSERT)'
    25  =  //'ESA.PRJ.CBTDSSN.HPP(CASMIF)'
    26  =  //'ESA.PRJ.CBTDSSN.HPP(ASMIF)'
    27  =  //'ESA.PRJ.CBTDSSN.HPP(ZLIB)'
    28  =  //'ESA.PRJ.CBTDSSN.HPP(ZCONF)'
    29  =  //'ESA.PRJ.CBTDSSN.HPP(DSSMAIN)'
    30  =  //'ESA.PRJ.CBTDSSN.HPP(JOBENV)'
    31  =  //'ESA.PRJ.CBTDSSN.HPP(SUBTASK)'
    32  =  //'ESA.PRJ.CBTDSSN.HPP(MSGMGR)'
    33  =  //'ESA.PRJ.CBTDSSN.HPP(MISC)'
    34  =  //'CEE.SCEEH.H(TIME)'
-
-
-
-
-
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSFILE)'                      30.11.12 08:25:26
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
