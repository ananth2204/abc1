
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(RARCSQL)'                      30.11.12 08:25:35
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              TEMPLATEDEPTH(300)
                                  :NOTEMPLATEREGISTRY              TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)
                                  :TMPLPARSE(NO)   TUNE(7)         UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64
                                  :NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,NOMAF,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__,__I,_Complex,__complex__,__real__,__imag__)
                                  :NOKEYWORD(char16_t,char32_t,decltype,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NOCOMPATRVALUEBINDING,NODBCS,NODECLTYPE,NODELEGATINGCTORS,
                                   DEPENDENTBASELOOKUP,NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,
                                   EXTERNTEMPLATE,ILLPTOM,IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,
                                   NOOLDDIGRAPH,OLDFRIEND,NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,
                                   NOTEMPSASLOCALS,NOTEXTAFTERENDIF,GNU_LABELVALUE,GNU_COMPUTEDGOTO,TRAILENUM,TYPEDEFCLASS,NOUCS,
                                   VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY,NOC99COMPLEX,NOC99COMPLEXHEADER,
                                   NOGNU_COMPLEX,GNU_SUFFIXIJ)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410D0000
                                  : __LIBREL__=0x410D0000
                                  : __TARGET_LIB__=0x410D0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(RARCSQL)'                      30.11.12 08:25:35
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | #include "isisdef.h"
             2 | #include <unistd.h>
             3 | #include <stdlib.h>
             4 | #include <string.h>
             5 | #include <strings.h>
             6 | #include "rarcsql.hpp"
             7 | #include "jobenv.hpp"
             8 | #include "casmif.hpp"
             9 | #include <sys/time.h>
            10 |
            11 | ISIS_EXT_C typedef int  (* ppdberror)(char *); //szm20050413
            12 | ppdberror  pdberror;                           //szm20050413
            13 |
            14 | extern "C" int locDBError(char *)
            15 | ä
            16 | 	 return 0;
            17 | ü
            18 |
            19 | #ifndef unsigned
            20 | #define unsigned
            21 | #endif
            22 |
            23 |
            24 | static char bhexÄ24Ü;
            25 |
            26 | char * hex(int v,int l)
            27 | ä
            28 |  sprintf(bhex,"%*.*xÖn",2*l,2*l,v);
            29 |  return bhex;
            30 | ü
            31 |
            32 | typedef struct
            33 |               ä short   SQLPLLEN;
            34 |                 short   SQLFLAGS;
            35 |                 short   SQLCTYPE;
            36 |                 char    SQLPROGNÄ8Ü;
            37 |                 short   SQLTIMESÄ4Ü;
            38 |                 short   SQLSECTN;
            39 |                 char   *SQLCODEP;
            40 |                 char   *SQLVPARM;
            41 |                 char   *SQLAPARM;
            42 |                 short   SQLSTNUM;
            43 |                 short   SQLSTYPE;
            44 |               ü SQLPLIST;
            45 | typedef struct
            46 |               ä short    SQLTYPE;
            47 |                 short    SQLLEN;
            48 |                 char    *SQLADDR;
            49 |                 char    *SQLIND;
            50 |               ü SQLELTS;
            51 | typedef SQLELTS     *SQLELTS_PTR;
            52 | char    SQLTEMPÄ 19 Ü ;
            53 | char    DSNPNMÄ 57 Ü ;
            54 |
            55 | /***$$$
            56 |   EXEC SQL INCLUDE SQLCA
            57 | $$$***/
            58 | #ifndef SQLCODE
            59 | struct sqlca
            60 |   ä unsigned  char     sqlcaidÄ8Ü;
            61 |               long     sqlcabc;
            62 |               long     sqlcode;
            63 |               short    sqlerrml;
            64 |     unsigned  char     sqlerrmcÄ70Ü;
            65 |     unsigned  char     sqlerrpÄ8Ü;
            66 |               long     sqlerrdÄ6Ü;
            67 |     unsigned  char     sqlwarnÄ11Ü;
            68 |     unsigned  char     sqlstateÄ5Ü;
            69 |             ü ;
            70 | #define SQLCODE  sqlca.sqlcode
            71 | #define SQLWARN0 sqlca.sqlwarnÄ0Ü
            72 | #define SQLWARN1 sqlca.sqlwarnÄ1Ü
            73 | #define SQLWARN2 sqlca.sqlwarnÄ2Ü
            74 | #define SQLWARN3 sqlca.sqlwarnÄ3Ü
            75 | #define SQLWARN4 sqlca.sqlwarnÄ4Ü
            76 | #define SQLWARN5 sqlca.sqlwarnÄ5Ü
            77 | #define SQLWARN6 sqlca.sqlwarnÄ6Ü
            78 | #define SQLWARN7 sqlca.sqlwarnÄ7Ü
            79 | #define SQLWARN8 sqlca.sqlwarnÄ8Ü
            80 | #define SQLWARN9 sqlca.sqlwarnÄ9Ü
            81 | #define SQLWARNA sqlca.sqlwarnÄ10Ü
            82 | #define SQLSTATE sqlca.sqlstate
            83 | #endif
            84 | struct sqlca sqlca;
            85 |
            86 |
            87 | /***$$$
            88 |   EXEC SQL INCLUDE SQLDA
            89 | $$$***/
            90 | #ifndef SQLDASIZE
            91 | struct sqlda
            92 |    ä  unsigned char   sqldaidÄ8Ü;
            93 |                long   sqldabc;
            94 |                short  sqln;
            95 |                short  sqld;
            96 |                struct sqlvar
            97 |                   ä short          sqltype;
            98 |                     short          sqllen;
            99 |                     unsigned char *sqldata;
           100 |                     short         *sqlind;
           101 |                     struct sqlname
           102 |                        ä short         length;
           103 |                          unsigned char dataÄ30Ü;
           104 |                        ü sqlname;
           105 |                   ü sqlvarÄ1Ü;
           106 |             ü ;
           107 | #define SQLDASIZE(n) Ö
           108 |    ( sizeof( sqlda) + ((n)-1) * sizeof( sqlvar) )
           109 | #endif
           110 |
           111 |
           112 | /***$$$
           113 |   EXEC SQL BEGIN DECLARE SECTION
           114 | $$$***/
           115 |
           116 |
           117 |   struct ä
           118 |   short len;
           119 |   char  valueÄ512Ü;
           120 |   ü prepare;
           121 |
           122 |
           123 | /***$$$
           124 |   EXEC SQL END DECLARE SECTION
           125 | $$$***/
           126 |
           127 |
           128 |
           129 |
           130 | const char * IDENTIFY           = "IDENTIFY          ";
           131 | const char * SIGNON             = "SIGNON            ";
           132 | const char * CREATE_THREAD      = "CREATE THREAD     ";
           133 | const char * TERMINATE_THREAD   = "TERMINATE THREAD  ";
           134 | const char * TERMINATE_IDENTIFY = "TERMINATE IDENTIFY";
           135 | const char * CONNECT            = "CONNECT           ";
           136 |
           137 | ARCHSQL::ARCHSQL()
           138 | ä
           139 |   status = 0;
           140 |   secb = tecb = 0;
           141 |   ribptr = 0;
           142 |   eibptr = 0;
           143 |
           144 |   memset(ssnm,' ',4);
           145 |   memset(plan,' ',8);
           146 |   memset(collection,' ',sizeof(collection));
           147 |   memset(reuse,' ',sizeof(reuse));  //That makes it INITIAL
           148 |   messagetext = new MessageTEXT(0); //ZA030519
           149 |   JOBENV job("RARCSQL");
           150 |   memset(correlation_id,' ',sizeof(correlation_id));
           151 |   strcpy(correlation_id,job.jobId);
           152 |   memset(accounting_token,' ',sizeof(accounting_token));
           153 |   sprintf(accounting_token,"%s%s",(char *)job.jobName,(char*)job.jobId); //ZA090713
           154 |   memset(accounting_interval,' ',sizeof(accounting_interval));
           155 |   if (pdberror==NULL)     //szm20050413
           156 | 			pdberror=locDBError;
           157 | 	// first call initializes list of load module entry points
           158 |   rrs = SQLASM();
           159 | ü
           160 |
           161 | ARCHSQL::ßARCHSQL()
           162 | ä
           163 |   if ( status )
           164 |   call(Disconnect);
           165 |   // second call clears list of load module entry points
           166 |   SQLASM();
           167 | ü
           168 |
           169 | int ARCHSQL::call(CallType t)
           170 | ä
           171 |   int msg = 0;
           172 |   retcode = reasoncode = 0;
           173 |   switch(t)
           174 |   ä
           175 |   case Connect:
           176 |     if (rrs)
           177 |     ä
           178 |       rc = DSNALI(IDENTIFY,
           179 |             &ssnmÄ0Ü,
           180 |             &ribptr,&eibptr,&tecb,&secb,
           181 |             &retcode,&reasoncode);
           182 | 			if (rc<0) //szm20050829 second connect returns -1 or -2 if parm error
           183 | 				ä
           184 | 				if (rc == -1)
           185 | 					return 1;
           186 | 				else
           187 | 					assert("SSQLASM parm error"|=0);
           188 | 				ü
           189 |       if ( retcode NEQ 0)
           190 |       ä
           191 |       	//ZA030519 97.. message numbers changed to 98.. message numbers
           192 |         pdberror(Msg(9821)<<IDENTIFY<<
           193 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           194 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           195 |         (int)retcode<<hex(reasoncode,4)<<eol);
           196 |         #else
           197 |         long(retcode)<<hex(reasoncode,4)<<eol);
           198 |         #endif
           199 |         return 0;
           200 |       ü
           201 |     ü
           202 |     else
           203 |     ä
           204 |       rc = DSNALI(CONNECT,
           205 |             &ssnmÄ0Ü,
           206 |             &tecb,&secb,&ribptr,&retcode,&reasoncode);
           207 | 			if (rc<0) //szm20050829 second connect returns -1 or -2 if parm error
           208 | 			ä
           209 | 				if (rc == -1)
           210 | 					return 1;
           211 | 				else
           212 | 					assert("SSQLASM parm error"|=0);
           213 | 			ü
           214 |       if ( retcode NEQ 0)
           215 |       ä
           216 |         if (retcode NEQ 200 ]] reasoncode NEQ 0x00c10201u)
           217 |         ä
           218 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           219 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           220 |         pdberror(Msg(9801)<<(int)retcode<<hex(reasoncode,4)<<eol);
           221 |         #else
           222 |         pdberror(Msg(9801)<<long(retcode)<<hex(reasoncode,4)<<eol);
           223 |         #endif
           224 |         return 0;
           225 |       ü
           226 |       else //ZA050304 already connected
           227 |       ä
           228 |         status = 1;
           229 |         break;
           230 |       ü
           231 |      ü
           232 |    ü
           233 |   case Open:
           234 |   if (rrs)
           235 |   ä
           236 |       rc = DSNALI(SIGNON,
           237 |             &correlation_idÄ0Ü,
           238 |             &accounting_tokenÄ0Ü,
           239 |             &accounting_intervalÄ0Ü,
           240 |             &retcode,&reasoncode);
           241 |
           242 |       if ( retcode NEQ 0)
           243 |       ä
           244 |         pdberror(Msg(9821)<<SIGNON<<
           245 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           246 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           247 |         (int)retcode<<hex(reasoncode,4)<<eol);
           248 |         #else
           249 |         long(retcode)<<hex(reasoncode,4)<<eol);
           250 |         #endif
           251 |         return 0;
           252 |       ü
           253 |       if (collectionÄ0Ü NEQ ' ' && collectionÄ0Ü NEQ  0)
           254 |         planÄ0Ü = '?';
           255 |       rc = DSNALI(CREATE_THREAD,
           256 |             &planÄ0Ü,
           257 |             &collectionÄ0Ü,
           258 |             &reuseÄ0Ü, //ToDo: 25777 Citibank
           259 |             &retcode,&reasoncode);
           260 |
           261 |       if ( retcode NEQ 0)
           262 |       ä
           263 |         pdberror(Msg(9821)<<CREATE_THREAD<<
           264 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           265 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           266 |         (int)retcode<<hex(reasoncode,4)<<eol);
           267 |         #else
           268 |         long(retcode)<<hex(reasoncode,4)<<eol);
           269 |         #endif
           270 |         return 0;
           271 |       ü
           272 |   ü
           273 |   else
           274 |   ä
           275 |     rc = DSNALI("OPEN        ",
           276 |           &ssnmÄ0Ü,
           277 |           &planÄ0Ü,
           278 |           &retcode,&reasoncode);
           279 |
           280 |     if ( retcode NEQ 0 )
           281 |     ä
           282 |       //#ifdef ISIS_PF_HOST_IBM //ZA050715
           283 |       #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           284 |       pdberror(Msg(9811)<<(int)retcode<<hex(reasoncode,4)<<eol);
           285 |       #else
           286 |       pdberror(Msg(9811)<<long(retcode)<<hex(reasoncode,4)<<eol);
           287 |       #endif
           288 |       return 0;
           289 |     ü
           290 |   ü
           291 |   status = 1;
           292 |   break;
           293 |   case Close:
           294 |     if (rrs)
           295 |     ä
           296 |       rc = DSNALI(TERMINATE_THREAD,
           297 |             &retcode,&reasoncode);
           298 |
           299 |       if ( retcode NEQ 0)
           300 |       ä
           301 |         pdberror(Msg(9821)<<TERMINATE_THREAD<<
           302 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           303 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           304 |         (int)retcode<<hex(reasoncode,4)<<eol);
           305 |         #else
           306 |         long(retcode)<<hex(reasoncode,4)<<eol);
           307 |         #endif
           308 |         return 0;
           309 |       ü
           310 |     ü
           311 |     else
           312 |     ä
           313 |       rc = DSNALI("CLOSE       ",
           314 |             "SYNC",
           315 |             &retcode,&reasoncode);
           316 |
           317 | 			if ( retcode NEQ 0)
           318 |       ä
           319 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           320 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           321 |         pdberror(Msg(9812)<<(int)retcode<<hex(reasoncode,4)<<eol);
           322 |         #else
           323 |         pdberror(Msg(9812)<<long(retcode)<<hex(reasoncode,4)<<eol);
           324 |         #endif
           325 |         return 0;
           326 |       ü
           327 |     ü
           328 | /***$$$
           329 |     EXEC SQL WHENEVER SQLERROR   GOTO SQLERROR
           330 | $$$***/
           331 |
           332 |
           333 | /***$$$
           334 |     EXEC SQL WHENEVER SQLWARNING GOTO SQLWARNING
           335 | $$$***/
           336 |
           337 |
           338 | /***$$$
           339 |     EXEC SQL WHENEVER NOT FOUND GOTO SQLNOTFOUND
           340 | $$$***/
           341 |
           342 |    status = 1;
           343 |    break;
           344 |   case Disconnect:
           345 |   if (rrs)
           346 |   ä
           347 |       rc = DSNALI(TERMINATE_IDENTIFY,
           348 |             &retcode,&reasoncode);
           349 |
           350 |       if ( retcode NEQ 0)
           351 |       ä
           352 |         pdberror(Msg(9821)<<TERMINATE_IDENTIFY<<
           353 |         //#ifdef ISIS_PF_HOST_IBM //ZA050715
           354 |         #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           355 |         (int)retcode<<hex(reasoncode,4)<<eol);
           356 |         #else
           357 |         long(retcode)<<hex(reasoncode,4)<<eol);
           358 |         #endif
           359 |         return 0;
           360 |      ü
           361 |   ü
           362 |   else
           363 |   ä
           364 |     rc = DSNALI("DISCONNECT  ",
           365 |           &retcode,&reasoncode);
           366 |
           367 | 		if (retcode && (NOT ( retcode == 4 && reasoncode == 0x00c10824u)) )
           368 |     ä
           369 |       //#ifdef ISIS_PF_HOST_IBM //ZA050715
           370 |       #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           371 |       pdberror(Msg(9802)<<(int)retcode<<(int)reasoncode<<eol);
           372 |       #else
           373 |       pdberror(Msg(9802)<<long(retcode)<<long(reasoncode)<<eol);
           374 |       #endif
           375 |       return 0;
           376 |     ü
           377 |     status = 0;
           378 |    ü
           379 |    status = 0;
           380 |    return 1;
           381 |     break;
           382 |   case Prepare:
           383 |
           384 | /***$$$
           385 |     EXEC SQL PREPARE S1 FROM :prepare
           386 | $$$***/
           387 |   ä
           388 |   SQLPLIST SQLPLIST4 =
           389 |   //ä40, 8192, 35, "ARCHSQL ", 0, 0, 0, 0,
           390 |   ä40, 8192, 35, "ARCHSQL", 0, 0, 0, 0,
           391 |    1, 0, 0, 0, 70, 14ü;
           392 |   SQLELTS_PTR SQLELTS_PTR4;
           393 |   SQLPLIST4.SQLVPARM = (char *) &prepare;
           394 |   SQLPLIST4.SQLCODEP = (char *) &sqlca;
           395 |   SQLPLIST4.SQLTIMESÄ 0 Ü = 0x15EC;
           396 |   SQLPLIST4.SQLTIMESÄ 1 Ü = 0xE8EE;
           397 |   SQLPLIST4.SQLTIMESÄ 2 Ü = 0x0228;
           398 |   SQLPLIST4.SQLTIMESÄ 3 Ü = 0x99B4;
           399 |   DSNHLI ( (unsigned int * ) &SQLPLIST4);
           400 |   ü
           401 |   if (SQLCODE < 0) goto  SQLERROR;
           402 |   if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
           403 |       SQLWARN0 == 'W') goto SQLWARNING;
           404 |   if (SQLCODE == 100)  goto  SQLNOTFOUND;
           405 |
           406 |     status = 1;
           407 |     break;
           408 |   case Execute:
           409 |
           410 | /***$$$
           411 |     EXEC SQL EXECUTE S1
           412 | $$$***/
           413 |   ä
           414 |   SQLPLIST SQLPLIST5 =
           415 |   //ä40, 0, 30, "ARCHSQL ", 0, 0, 0, 0,
           416 |   ä40, 0, 30, "ARCHSQL", 0, 0, 0, 0,
           417 |    1, 0, 0, 0, 74, 15ü;
           418 |   SQLELTS_PTR SQLELTS_PTR5;
           419 |   SQLPLIST5.SQLCODEP = (char *) &sqlca;
           420 |   SQLPLIST5.SQLTIMESÄ 0 Ü = 0x15EC;
           421 |   SQLPLIST5.SQLTIMESÄ 1 Ü = 0xE8EE;
           422 |   SQLPLIST5.SQLTIMESÄ 2 Ü = 0x0228;
           423 |   SQLPLIST5.SQLTIMESÄ 3 Ü = 0x99B4;
           424 |   DSNHLI ( (unsigned int * ) &SQLPLIST5);
           425 |   ü
           426 |   if (SQLCODE < 0) goto  SQLERROR;
           427 |   if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
           428 |       SQLWARN0 == 'W') goto SQLWARNING;
           429 |   if (SQLCODE == 100)  goto  SQLNOTFOUND;
           430 |
           431 |     status = 1;
           432 |     break;
           433 |   case Commit:
           434 |
           435 | /***$$$
           436 |     EXEC SQL COMMIT
           437 | $$$***/
           438 |   ä
           439 |   SQLPLIST SQLPLIST6 =
           440 |   //ä40, 0, 150, "ARCHSQL ", 0, 0, 0, 0,
           441 |   ä40, 0, 150, "ARCHSQL", 0, 0, 0, 0,
           442 |    0, 0, 0, 0, 78, 310ü;
           443 |   SQLELTS_PTR SQLELTS_PTR6;
           444 |   SQLPLIST6.SQLCODEP = (char *) &sqlca;
           445 |   SQLPLIST6.SQLTIMESÄ 0 Ü = 0x15EC;
           446 |   SQLPLIST6.SQLTIMESÄ 1 Ü = 0xE8EE;
           447 |   SQLPLIST6.SQLTIMESÄ 2 Ü = 0x0228;
           448 |   SQLPLIST6.SQLTIMESÄ 3 Ü = 0x99B4;
           449 |   DSNHLI ( (unsigned int * ) &SQLPLIST6);
           450 |   ü
           451 |   if (SQLCODE < 0) goto  SQLERROR;
           452 |   if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
           453 |       SQLWARN0 == 'W') goto SQLWARNING;
           454 |   if (SQLCODE == 100)  goto  SQLNOTFOUND;
           455 |
           456 |     status = 1;
           457 |     break;
           458 |   case Rollback:
           459 |
           460 | /***$$$
           461 |     EXEC SQL ROLLBACK
           462 | $$$***/
           463 |   ä
           464 |   SQLPLIST SQLPLIST7 =
           465 |   //ä40, 0, 155, "ARCHSQL ", 0, 0, 0, 0,
           466 |   ä40, 0, 155, "ARCHSQL", 0, 0, 0, 0,
           467 |    0, 0, 0, 0, 82, 277ü;
           468 |   SQLELTS_PTR SQLELTS_PTR7;
           469 |   SQLPLIST7.SQLCODEP = (char *) &sqlca;
           470 |   SQLPLIST7.SQLTIMESÄ 0 Ü = 0x15EC;
           471 |   SQLPLIST7.SQLTIMESÄ 1 Ü = 0xE8EE;
           472 |   SQLPLIST7.SQLTIMESÄ 2 Ü = 0x0228;
           473 |   SQLPLIST7.SQLTIMESÄ 3 Ü = 0x99B4;
           474 |   DSNHLI ( (unsigned int * ) &SQLPLIST7);
           475 |   ü
           476 |   if (SQLCODE < 0) goto  SQLERROR;
           477 |   if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
           478 |       SQLWARN0 == 'W') goto SQLWARNING;
           479 |   if (SQLCODE == 100)  goto  SQLNOTFOUND;
           480 |
           481 |     status = 1;
           482 |     break;
           483 |   default :
           484 |     status = 0;
           485 |     break;
           486 |    ü
           487 |   return status;
           488 |   SQLERROR: msg = 9804;
           489 |   //   err = ERROR;
           490 |        goto common;
           491 |   SQLWARNING: msg = 9805;
           492 |   //   err = WARNING;
           493 |        goto common;
           494 |   SQLNOTFOUND: msg = 9806;
           495 |   //   err = WARNING;
           496 |   common:
           497 |     //#ifdef ISIS_PF_HOST_IBM //ZA050715
           498 |     #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           499 |     pdberror(Msg(msg)<<(int)SQLCODE<<eol);
           500 |     #else
           501 |     pdberror(Msg(msg)<<SQLCODE<<eol);
           502 |     #endif
           503 |     rc = DSNTIAR(&sqlca,&error_message,&data_len);
           504 |     if ( rc )
           505 |       //#ifdef ISIS_PF_HOST_IBM //ZA050715
           506 |       #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
           507 |       pdberror(Msg(9807)<<(int)rc<<eol);
           508 |       #else
           509 |       pdberror(Msg(9807)<<long(rc)<<eol);
           510 |       #endif
           511 |     else
           512 |     ä
           513 |       for(int i = 0;i<data_dim;i++)
           514 |       pdberror(Msg(9808)<<mvsSTRING(error_message.error_textÄiÜ,data_len)<<eol);
           515 |     ü
           516 |   return status;
           517 | ü
           518 |
           519 | void ARCHSQL::setDynamicSQL(char * s)
           520 | ä
           521 |   prepare.len = strlen(s);
           522 |   strcpy(prepare.value,s);
           523 | ü
           524 |
           525 | //KV20050216 moved from isismisc.cpp
           526 | static unsigned char tUKÄÜ =
           527 |      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"Ö
           528 |          "0123456789#$"Ö
           529 |          "abcdefghijklmnopqrstuvwxyz";
           530 | #define UKEY_MAJOR "STRTUKEY"
           531 | #define UKEY_MINOR "ISIS_UKEY"
           532 |
           533 | void getUniqueKey(char * t)
           534 | ä
           535 |   char _dummy=0;                     //HL??
           536 |   struct timeval tv;
           537 |   struct timezone tz;
           538 |   int i;
           539 |   ENQ(UKEY_MAJOR,UKEY_MINOR,E,8,STEP,NONE);
           540 | #if defined(MU_STANDALONE) == 0
           541 |   PCSSleep(1);
           542 | #else
           543 | 	sleep(1);
           544 | #endif
           545 |   i = gettimeofday(&tv,&tz);
           546 |   DEQ(UKEY_MAJOR,UKEY_MINOR,8,STEP,NONE);
           547 |   memcpy((void*)t,(void*)&tv.tv_sec,4);
           548 |   memcpy((void*)&tÄ4Ü,(void*)&tv.tv_usec,4);
           549 |   for (i = 0;i<8;i++)
           550 |     if (NOT tÄiÜ)
           551 |       tÄiÜ = 64; //change nulls to EBCDIC blanks
           552 |   tÄ8Ü = _dummy;
           553 |
           554 | ü
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(RARCSQL)'                      30.11.12 08:25:35
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTDSSN.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(UNISTD)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.SYS.H(TYPES)'
     5  =  //'CEE.SCEEH.H(INTTYPES)'
     6  =  //'CEE.SCEEH.H(STDINT)'
     7  =  //'CEE.SCEEH.H(STDLIB)'
     8  =  //'CEE.SCEEH.H(BUILTINS)'
     9  =  //'CEE.SCEEH.H(STDDEF)'
    10  =  //'CEE.SCEEH.H(STRING)'
    11  =  //'CEE.SCEEH.H(STRINGS)'
    12  =  //'ESA.PRJ.CBTDSSN.HPP(RARCSQL)'
    13  =  //'ESA.PRJ.CBTDSSN.HPP(MVSBASE)'
    14  =  //'ESA.PRJ.CBTDSSN.HPP(MERROR)'
    15  =  //'ESA.PRJ.CBTDSSN.HPP(DSNAMEUT)'
    16  =  //'CEE.SCEEH.H(ASSERT)'
    17  =  //'CEE.SCEEH.H(STDIO)'
    18  =  //'ESA.PRJ.CBTDSSN.HPP(MSGMGR)'
    19  =  //'ESA.PRJ.CBTDSSN.HPP(MISC)'
    20  =  //'CEE.SCEEH.H(TIME)'
    21  =  //'ESA.PRJ.CBTDSSN.HPP(JOBENV)'
    22  =  //'ESA.PRJ.CBTDSSN.HPP(CASMIF)'
    23  =  //'ESA.PRJ.CBTDSSN.HPP(ASMIF)'
    24  =  //'CEE.SCEEH.SYS.H(TIME)'
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(RARCSQL)'                      30.11.12 08:25:35
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
