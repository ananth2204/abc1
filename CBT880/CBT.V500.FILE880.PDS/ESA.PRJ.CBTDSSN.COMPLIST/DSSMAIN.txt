
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSMAIN)'                      30.11.12 08:25:29
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              TEMPLATEDEPTH(300)
                                  :NOTEMPLATEREGISTRY              TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)
                                  :TMPLPARSE(NO)   TUNE(7)         UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64
                                  :NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,NOMAF,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__,__I,_Complex,__complex__,__real__,__imag__)
                                  :NOKEYWORD(char16_t,char32_t,decltype,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NOCOMPATRVALUEBINDING,NODBCS,NODECLTYPE,NODELEGATINGCTORS,
                                   DEPENDENTBASELOOKUP,NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,
                                   EXTERNTEMPLATE,ILLPTOM,IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,
                                   NOOLDDIGRAPH,OLDFRIEND,NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,
                                   NOTEMPSASLOCALS,NOTEXTAFTERENDIF,GNU_LABELVALUE,GNU_COMPUTEDGOTO,TRAILENUM,TYPEDEFCLASS,NOUCS,
                                   VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY,NOC99COMPLEX,NOC99COMPLEXHEADER,
                                   NOGNU_COMPLEX,GNU_SUFFIXIJ)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410D0000
                                  : __LIBREL__=0x410D0000
                                  : __TARGET_LIB__=0x410D0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSMAIN)'                      30.11.12 08:25:29
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | #pragma runopts(POSIX(ON),ANYHEAP(,,ANY),ALL31(ON),HEAP(,,ANY),STACK(,,ANY),STORAGE(NONE,NONE,NONE))
             2 | #include "isisdef.h"
             3 | #include <stdio.h>
             4 | #include <stdlib.h>
             5 | #include <string.h>
             6 | #include <strings.h>
             7 | #include <fcntl.h>
             8 |
             9 | #include <unistd.h>
            10 |
            11 | #include "msgmgr.hpp"
            12 | #include "mvsbase.hpp"
            13 | #include "mchain.hpp"
            14 | #include "merror.hpp"
            15 | #include "rarcsql.hpp"
            16 | #include "dssclas.hpp"
            17 | #include "dssmain.hpp"
            18 | #include "dssdb.hpp"
            19 | #include "dssfile.hpp"
            20 | #include "jobenv.hpp"
            21 | #include "adreib.hpp"
            22 | #include "adrufob.hpp"
            23 | #include "eirec21.hpp"
            24 | #include "eirec23.hpp"
            25 | #include "misc.hpp"
            26 | //#include "isismisc.hpp"
            27 |
            28 | typedef struct adreib _adreib;
            29 | typedef struct adrufob ADRUFOB;
            30 | typedef struct eirec21  EIREC21;
            31 | typedef struct eirec23  EIREC23;
            32 |
            33 | const char * ADRDSSU              = "ADRDSSU ";
            34 | const char * KEYWORD_INCLUDE_MARK = "/*include*/";
            35 | const char * KEYWORD_DUMP         = "DUMP";
            36 | const char * KEYWORD_RESTORE      = "RESTORE";
            37 | const char * KEYWORD_DB_PLAN      = "PLAN";
            38 | const char * KEYWORD_DB_SUBSYS    = "SUBSYS";
            39 | const char * KEYWORD_PREFIX       = "PREFIX";
            40 | const char * KEYWORD_SYSIN        = "SYSIN";
            41 | const char * KEYWORD_ADR012I      = "ADR012I";
            42 | const char * KEYWORD_DEBUG        = "DEBUG";
            43 | const char * KEYWORD_TRACE        = "TRACE";
            44 | const char * KEYWORD_COMPR        = "COMPR";
            45 | const char * KEYWORD_REFDT        = "REFDT";
            46 | const char * KEYWORD_SQLFILE      = "SQL";
            47 | const char * KEYWORD_DIRECT       = "DIRECT";
            48 | const char * KEYWORD_MAXLENGTH    = "MAXLENGTH";
            49 | const char * KEYWORD_USEDB2	  		= "USEDB2";
            50 | const char * KEYWORD_USEDB2_FILE  = "DB2OUT";
            51 | const char * KEYWORD_ADRDSSU      = "ADRDSSU";
            52 |
            53 | static DSS *          dss = NULL;
            54 | static mCHAIN    *    input      = new mCHAIN();
            55 | static CHAINITER *    inputIter  = new CHAINITER(*input);
            56 | static int            inputEof   = 0;
            57 | static mCHAIN    *    msgChain   = new mCHAIN();
            58 | static CHAINITER *    msgIter    = new CHAINITER(*input);
            59 | static char           buffÄDSSFILE_MAX_BUFFERÜ;
            60 | static FILE      *    trace      = NULL;
            61 | static char  dateÄ12Ü;
            62 | static char  dateToIBMÄ12Ü;
            63 |
            64 | static bool backspaceFlag = false;
            65 | static int  backspaceLength = 0;
            66 | static int   direct = 0;
            67 |
            68 | static bool adrdssu = false;
            69 |
            70 | #define _VERSION_  "V7R0M0"
            71 |
            72 | int main(int argc,char *argvÄÜ)
            73 | ä
            74 | 	char _genFileNameÄ1024Ü;
            75 | 	int rc = 0;
            76 | 	messagetext = new MessageTEXT();
            77 | 	jobEnv  = new JOBENV(argvÄ0Ü);
            78 | 	DssJob * job = new DssJob();
            79 | 	dss = new DSS(argvÄ1Ü,job);
            80 | 	formatTime(date,sizeof(date),"%d.%m.%Y");
            81 | 	JOBENV::DEBUG(1,date);
            82 | 	Msg(5500)<<argvÄ0Ü<<_VERSION_<<__DATE__<<eol; //szm20060419
            83 | 	mCHAIN * includes    = new mCHAIN();
            84 | 	char     buffÄ256Ü;
            85 | 	if (getenv(KEYWORD_TRACE))
            86 | 	ä
            87 | 		trace = fopen(genOpenName(getenv(KEYWORD_TRACE),_genFileName),"w");
            88 | 	ü
            89 | 	FILE *   sysin = fopen(genOpenName(KEYWORD_SYSIN,_genFileName),"r");
            90 | 	if (NOT sysin)
            91 | 		JOBENV::Error(Msg(10000+110)<<KEYWORD_SYSIN<<eol,JOBENV::Abort);
            92 | 	if (getenv(KEYWORD_ADRDSSU))
            93 | 		adrdssu = atoi(getenv(KEYWORD_ADRDSSU));
            94 | 	else
            95 | 		adrdssu = false;
            96 | 	while(fgets(buff,sizeof(buff)-1,sysin))
            97 | 	ä
            98 | 		if ( strchr(buff,'Ön') )
            99 | 			*strchr(buff,'Ön') = 0;
           100 | 		chainE * rec = new chainE(buff);
           101 | 		Msg(10000+112)<<buff<<eol;
           102 | 		input->addlast(rec);
           103 | 		mvsSTRING parse(rec->chainEid);
           104 | 		parse.strip();
           105 | 		if ( dss->function == DSS::invalid )
           106 | 		ä
           107 | 			if (memcmpi((const char *)parse,KEYWORD_DUMP,strlen(KEYWORD_DUMP))==0)
           108 | 				dss->function = DSS::dump;
           109 | 			else if (memcmpi((const char *)parse,KEYWORD_RESTORE,strlen(KEYWORD_RESTORE))==0)
           110 | 				dss->function = DSS::restore;
           111 | 		ü
           112 | 		else if(strstr((char *)parse,KEYWORD_INCLUDE_MARK) && dss->function == DSS::restore)
           113 | 		ä
           114 | 			mvsSTRING inc, rest;
           115 | 			parse.parse(inc," ",rest);
           116 | 			inc.strip();
           117 | 			Msg(10000+113)<<inc<<eol;
           118 | 			includes->addlast(new chainE((char *)inc));
           119 | 		ü
           120 | 		else if(strstr((char *)parse,KEYWORD_REFDT) && dss->function == DSS::restore)
           121 | 		ä
           122 | 			mvsSTRING dt = strchr(strstr((char *)parse,KEYWORD_REFDT),' ');
           123 | 			mvsSTRING oper, dateS, rest;
           124 | 			dt.strip();
           125 | 			dt.parse(oper," ",dateS,")",rest);
           126 | 			dateS.strip();
           127 | 			strcpy(date,(char *)dateS);
           128 | 			memcpy(dateToIBM,DatetoIBM(date),sizeof(dateToIBM));
           129 | 			Msg(10000+116)<<date<<dateToIBM<<eol;
           130 | 		ü
           131 | 	ü
           132 | 	fclose(sysin);
           133 | 	sysin = NULL;
           134 | 	FILE * _fd = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
           135 | 	if (_fd) fclose(_fd);
           136 | 	if (_fd)
           137 | 		sysin = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
           138 | 	if (sysin)
           139 | 	ä
           140 | 		while(fgets(buff,sizeof(buff)-1,sysin))
           141 | 		ä
           142 | 			if ( strchr(buff,'Ön') )
           143 | 				*strchr(buff,'Ön') = 0;
           144 | 			if ( strchr(buff,' ') )
           145 | 				*strchr(buff,' ') = 0;
           146 | 			direct = 1;
           147 | 			Msg(10000+126)<<buff<<eol;
           148 | 			DssJob::dssJobs.addlast(new DssJob(buff));
           149 | 		ü
           150 | 		fclose(sysin);
           151 | 	ü
           152 |
           153 | 	sysin = NULL;
           154 | 	int qrc = 0;
           155 | 	switch(dss->function)
           156 | 	ä
           157 | 	case DSS::dump:
           158 | 		Msg(10000+114)<<eol;
           159 | 		inputIter->reset();
           160 | 		rc = dss->run(job);
           161 | 		break;
           162 | 	case DSS::restore:
           163 | 		Msg(10000+115)<<eol;
           164 | 		ä
           165 | 			if (direct==0)
           166 | 			ä
           167 | 				if ((qrc = dss->getJob()->query(includes,date)) < 0)
           168 | 					JOBENV::Error(Msg(10000+111)<<eol,JOBENV::Abort);
           169 | 			ü
           170 | 			if ( NOT DssJob::allOnline() )
           171 | 				JOBENV::Error(Msg(10000+118)<<eol,JOBENV::Abort);
           172 | 			CHAINITER iter(DssJob::dssJobs);
           173 | 			DssJob * toRestore = (DssJob*)iter.next();
           174 | 			if (direct==0 &&(toRestore==NULL ]] qrc == 0))
           175 | 			ä
           176 | 				JOBENV::Error(Msg(10000+117)<<eol,JOBENV::Continue);
           177 | 				rc = 4;
           178 | 			ü
           179 | 			while(toRestore)
           180 | 			ä
           181 | 				inputEof = 0;
           182 | 				inputIter->reset();
           183 | 				rc ]= dss->run(toRestore);
           184 | 				toRestore = (DssJob*)iter.next();
           185 | 			ü
           186 | 		ü
           187 | 		break;
           188 | 	case DSS::invalid:
           189 | 	default:
           190 | 		JOBENV::Error(Msg(10000+111)<<eol,JOBENV::Abort);
           191 | 		break;
           192 | 	ü
           193 | 	Msg(10000+119)<<rc<<eol;
           194 | 	//printf(" DSSN ended with rc:%dÖn",rc);
           195 | 	_exit(rc);
           196 | 	delete job;
           197 | 	delete includes;
           198 | 	delete dss;
           199 | 	_exit(rc);
           200 | 	//return rc;
           201 | ü
           202 |
           203 | char * optionsÄÜ =
           204 | ä
           205 | 	"Function StartUp",
           206 | 	"Sysin Record",
           207 | 	"Printing SYSPRINT",
           208 | 	"Reading Physical Tape",
           209 | 	"Reading Logical Tape",
           210 | 	"Writing Logical Tape",
           211 | 	"Writing Physical Tape",
           212 | 	"Reading Disk Track",
           213 | 	"Writing Disk Track",
           214 | 	"Reading Utility Sysprint",
           215 | 	"Writing Utility Sysprint",
           216 | 	"Writing WTO",
           217 | 	"Writing WTOR",
           218 | 	"Presenting ADRUFO",
           219 | 	"Function Ending",
           220 | 	"Presenting WTOR response",
           221 | 	"OPEN Tape volume verification",
           222 | 	"OPEN Tape volume nonspecific",
           223 | 	"Insert Logical VSAM",
           224 | 	"Output TAPE error",
           225 | 	"Volume Notification",
           226 | 	"Dataset Verification",
           227 | 	"Bypass Verification",
           228 | 	"Dataset processed",
           229 | 	"Concurrent Copy",
           230 | 	"Backspace",
           231 | 	"Dump Volume",
           232 | 	"Physical Dataset Processed"
           233 | ü;
           234 |
           235 | extern "C"
           236 | int UIM(void  * eib)
           237 | ä
           238 | 	static DSSFILE  * dssFile  = NULL;
           239 | 	static int dssStart        = 1;
           240 |
           241 | 	_adreib  * adreib  = (_adreib *)eib;
           242 | 	dss                = (DSS *)(adreib->eiuseptr);
           243 | 	DssJob *  job      = dss->getJob();
           244 | 	JOBENV::DEBUG(1,"UIM entry:",optionsÄadreib->eioptionÜ);
           245 | 	adreib->eiretcod = eirc_ok; //set default o.k.
           246 | 	adreib->eixalow0 = 0xff; // allow all kind of actions ( replace delete etc.
           247 | 	if (adrdssu)
           248 | 	ä
           249 | 	ü
           250 | 	else
           251 | 	ä
           252 | 		switch(adreib->eioption)
           253 | 		ä
           254 | 		case eiop00:
           255 | 			ä
           256 | 				if (dssStart)
           257 | 				ä
           258 | 					dssStart = 0;
           259 | 					Msg(10000+130)<<"V7R0M0"<<__DATE__<<eol;
           260 | 				ü
           261 | 				else
           262 | 				ä
           263 | 					if (dss->function == DSS::dump)
           264 | 						dssFile = new DSSFILE(job->getDatasetName(),DSSFILE_output);
           265 | 					else
           266 | 						dssFile = new DSSFILE(job->getDatasetName(),DSSFILE_input);
           267 | 					if(NOT dssFile ]] dssFile->iserror())
           268 | 						JOBENV::Error(Msg(10000+111)<<eol,JOBENV::Abort);
           269 | 				ü
           270 | 			ü
           271 | 			adreib->eiretcod =  eirc_ok;
           272 | 			break;
           273 | 		case eiop01:
           274 | 			if (NOT inputEof)
           275 | 			ä
           276 | 				chainE  * rec = inputIter->next();
           277 | 				if ( rec)
           278 | 				ä
           279 | 					adreib->eirecptr = int(rec->chainEid);
           280 | 					adreib->eireclen = strlen(rec->chainEid);
           281 | 					char * c = NULL;
           282 | 					if ((c = strstr((char *)adreib->eirecptr,KEYWORD_INCLUDE_MARK)))
           283 | 						memset(c,' ',strlen(KEYWORD_INCLUDE_MARK));
           284 | 					else if (strstr((char *)adreib->eirecptr,KEYWORD_REFDT) && dss->function == DSS::restore)
           285 | 					ä
           286 | 						char * dt = strchr(strstr((char *)adreib->eirecptr,KEYWORD_REFDT),' ');
           287 | 						memcpy(dt+4,dateToIBM,strlen(date));
           288 | 					ü
           289 | 					JOBENV::DEBUG(1,(char *)adreib->eirecptr);
           290 | 					adreib->eiretcod = eirc_insert;
           291 | 				ü
           292 | 				else
           293 | 				ä
           294 | 					inputEof = 1;
           295 | 					if (adreib->eireclen)
           296 | 						adreib->eiretcod =  eirc_delete;
           297 | 					else
           298 | 						adreib->eiretcod =  eirc_disconnect;
           299 | 				ü
           300 | 			ü
           301 | 			else if (adreib->eireclen)
           302 | 				adreib->eiretcod =  eirc_delete;
           303 | 			else
           304 | 				adreib->eiretcod =  eirc_disconnect;
           305 | 			break;
           306 | 		case eiop02:
           307 | 			if (0)
           308 | 				//if (memcmpi(KEYWORD_ADR012I,(char *)adreib->eirecptr,strlen(KEYWORD_ADR012I)) == 0)
           309 | 			ä
           310 | 				if (msgIter == NULL)
           311 | 					msgIter = new CHAINITER(*msgChain);
           312 | 				chainE * next = msgIter->next();
           313 | 				if (next == NULL)
           314 | 				ä
           315 | 					delete msgIter;
           316 | 					adreib->eiretcod = eirc_ok;
           317 | 				ü
           318 | 				else
           319 | 				ä
           320 | 					adreib->eirecptr = int(next->chainEid);
           321 | 					adreib->eireclen = next->chainEidl;
           322 | 					adreib->eiretcod = eirc_insert;
           323 | 				ü
           324 | 			ü
           325 | 			else
           326 | 				if (dss->function == DSS::dump &&
           327 | 					job->joblog.len+adreib->eireclen < sizeof(job->joblog.arr))
           328 | 				ä
           329 | 					memcpy(job->joblog.arr+job->joblog.len,(char *)adreib->eirecptr,
           330 | 						adreib->eireclen);
           331 | 					job->joblog.len += adreib->eireclen;
           332 | 					job->joblog.arrÄjob->joblog.len++Ü = 0;
           333 | 				ü
           334 | 				adreib->eiretcod = eirc_ok;
           335 | 				break;
           336 | 		case eiop03:
           337 | 			ä
           338 | 				if (backspaceFlag)
           339 | 				ä
           340 | 					//JOBENV::DEBUG(1,"backspace Physical Tape Record");
           341 | 					adreib->eirecptr = int(buff);
           342 | 					adreib->eireclen = backspaceLength;
           343 | 					adreib->eiretcod = eirc_insert;
           344 | 					backspaceFlag = false;
           345 | 				ü
           346 | 				else
           347 | 				ä
           348 | 					size_t l = dssFile->get(buff);
           349 | 					if (l)
           350 | 					ä
           351 | 						backspaceLength = l;
           352 | 						//JOBENV::DEBUG(1,l);
           353 | 						// fwrite(buff,1,l,trace);
           354 | 						adreib->eirecptr = int(buff);
           355 | 						adreib->eireclen = l;
           356 | 						adreib->eiretcod = eirc_insert;
           357 | 					ü
           358 | 					else
           359 | 						adreib->eiretcod = eirc_disconnect;
           360 | 				ü
           361 | 			ü
           362 | 			break;
           363 | 		case eiop06:
           364 | 			if (dssFile->put((char *)adreib->eirecptr,adreib->eireclen))
           365 | 				adreib->eiretcod = eirc_delete;
           366 | 			else
           367 | 				adreib->eiretcod = eirc_disconnect;
           368 | 			break;
           369 | 		case eiop13:
           370 | 			ä
           371 | 				ADRUFOB * adrufob =(ADRUFOB *)adreib->eirecptr;
           372 | 				adrufob->ufaiflgs &= (255-ufuimch);
           373 | 				adrufob->ufaiflgs ]= (ufnoin+ufnoout);
           374 | 				adreib->eiretcod = eirc_modified;
           375 | 			ü
           376 | 			break;
           377 | 		case eiop14:
           378 | 			ä
           379 | 				if (dss->function == DSS::dump)
           380 | 					job->insert();
           381 | 				if (dssFile)
           382 | 					delete dssFile;
           383 | 				dssFile = NULL;
           384 | 			ü
           385 | 			adreib->eiretcod =  eirc_ok;
           386 | 			break;
           387 | 		case eiop21:
           388 | 			adreib->eiretcod =  eirc_ok;
           389 | 			if (dss->function==DSS::restore)
           390 | 			ä
           391 | 				EIREC21 * rec21 = (EIREC21 *)(adreib->eirecptr);
           392 | 				if (direct==0&&job->doWeNeed((char *)rec21->ei21dsn)==0)
           393 | 				ä
           394 | 					Msg(10000+125)<<mvsSTRING((char *)rec21->ei21dsn,sizeof(rec21->ei21dsn))<<eol;
           395 | 					adreib->eiretcod =  eirc_end_dataset;
           396 | 				ü
           397 | 				else
           398 | 					Msg(10000+124)<<mvsSTRING((char *)rec21->ei21dsn,sizeof(rec21->ei21dsn))<<eol;
           399 | 			ü
           400 | 			break;
           401 | 		case eiop23:
           402 | 			if (dss->function == DSS::dump)
           403 | 			ä
           404 | 				EIREC23 * rec23 = (EIREC23 *)(adreib->eirecptr);
           405 | 				if(rec23->ei23vol_ && memcmp(rec23->e23bytes,nulls,8))
           406 | 					new DssDataset(job,
           407 | 					mvsSTRING((char *)rec23->ei23dsn,sizeof(rec23->ei23dsn)),
           408 | 					mvsSTRING((char *)rec23->ei23vser,6*rec23->ei23vol_),
           409 | 					int(*(int *)(&rec23->e23sdsrg)));
           410 | 			ü
           411 | 			adreib->eiretcod = eirc_ok;
           412 | 			break;
           413 | 		case eiop25:
           414 | 			backspaceFlag = true;
           415 | 			adreib->eiretcod =  eirc_ok;
           416 | 			break;
           417 | 		default:
           418 | 			adreib->eiretcod =  eirc_ok;
           419 | 			break;
           420 | 		ü
           421 | 	ü
           422 | 	if (adreib->eirecptr&&adreib->eireclen>0)
           423 | 	ä
           424 | 		if (trace)
           425 | 			fwrite((char *)adreib->eirecptr,1,adreib->eireclen,trace);
           426 | 		JOBENV::DEBUG(1,"dump:",(char *)adreib->eirecptr,adreib->eireclen);
           427 | 	ü
           428 | 	JOBENV::DEBUG(3,"UIM exit:",adreib->eiretcod);
           429 | 	return int(adreib->eiretcod);
           430 | ü
           431 |
           432 | extern "C" int DBError(char * s)
           433 | ä
           434 | 	Msg(10000+9704)<<s<<eol;
           435 | 	return 1;
           436 | ü
           437 |
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSMAIN)'                      30.11.12 08:25:29
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTDSSN.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(STDIO)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.SYS.H(TYPES)'
     5  =  //'CEE.SCEEH.H(STDLIB)'
     6  =  //'CEE.SCEEH.H(BUILTINS)'
     7  =  //'CEE.SCEEH.H(STDDEF)'
     8  =  //'CEE.SCEEH.H(STRING)'
     9  =  //'CEE.SCEEH.H(STRINGS)'
    10  =  //'CEE.SCEEH.H(FCNTL)'
    11  =  //'CEE.SCEEH.SYS.H(MODES)'
    12  =  //'CEE.SCEEH.H(UNISTD)'
    13  =  //'CEE.SCEEH.H(INTTYPES)'
    14  =  //'CEE.SCEEH.H(STDINT)'
    15  =  //'ESA.PRJ.CBTDSSN.HPP(MSGMGR)'
    16  =  //'ESA.PRJ.CBTDSSN.HPP(MVSBASE)'
    17  =  //'ESA.PRJ.CBTDSSN.HPP(MERROR)'
    18  =  //'ESA.PRJ.CBTDSSN.HPP(DSNAMEUT)'
    19  =  //'CEE.SCEEH.H(ASSERT)'
    20  =  //'ESA.PRJ.CBTDSSN.HPP(MISC)'
    21  =  //'CEE.SCEEH.H(TIME)'
    22  =  //'ESA.PRJ.CBTDSSN.HPP(MCHAIN)'
    23  =  //'ESA.PRJ.CBTDSSN.HPP(RARCSQL)'
    24  =  //'ESA.PRJ.CBTDSSN.HPP(DSSCLAS)'
    25  =  //'ESA.PRJ.CBTDSSN.HPP(DSSMAIN)'
    26  =  //'ESA.PRJ.CBTDSSN.HPP(DSSDB)'
    27  =  //'ESA.PRJ.CBTDSSN.HPP(JOBENV)'
    28  =  //'ESA.PRJ.CBTDSSN.HPP(DSSFILE)'
    29  =  //'ESA.PRJ.CBTDSSN.HPP(CASMIF)'
    30  =  //'ESA.PRJ.CBTDSSN.HPP(ASMIF)'
    31  =  //'ESA.PRJ.CBTDSSN.HPP(ZLIB)'
    32  =  //'ESA.PRJ.CBTDSSN.HPP(ZCONF)'
    33  =  //'ESA.PRJ.CBTDSSN.HPP(ADREIB)'
    34  =  //'ESA.PRJ.CBTDSSN.HPP(ADRUFOB)'
    35  =  //'ESA.PRJ.CBTDSSN.HPP(EIREC21)'
    36  =  //'ESA.PRJ.CBTDSSN.HPP(EIREC23)'
-
-
-
-
-
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.13 z/OS XL C++             //'ESA.PRJ.CBTDSSN.CPP(DSSMAIN)'                      30.11.12 08:25:29
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
