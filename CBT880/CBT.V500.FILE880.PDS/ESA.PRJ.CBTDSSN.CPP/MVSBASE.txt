
/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/mvsbase.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/


#include "isisdef.h"
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#ifndef MU_STANDALONE
#include "pcsdll.hpp"
#include "systems.hpp" //szm
#else
	#ifndef stricmp
    #define stricmp strcmpi
	#endif
	#ifndef strcmpi
		#define strcmpi strcasecmp
	#endif
	#define MVSBatch() 1
	#ifndef PCS_MAX_PATH
		#define PCS_MAX_PATH 1024
	#endif
#endif

#include "mvsbase.hpp"
#if defined(CICSAPPL) == 0 && defined(MU_STANDALONE) == 0 //szm
#include "isismisc.hpp"
#endif
#include "misc.hpp"
#ifdef CALL_TAG
#include "pphctags.hpp"
#endif
#ifdef OWN_STDIO
#include "stdio.hpp"
#else
#include <assert.h>
#include <stdio.h>
#endif

#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include <new.h>

#if defined(ISIS_PF_HOST) ]] defined(ISIS_PF_MU)

#include "ibmdebug.hpp"
#if defined(ISIS_PF_MI) ]] defined (ISIS_PF_MU)
#include <ctest.h>
#endif
#endif

#define MVSBASE  0
char mvsSTRING::parseSepCh=0 ; //szm20061218 mvsSTRING parse escape ch is null|||||||

mvsSTRING nullstring(""); //szm

//KV20050203 why not for ms,mu ??
//#if defined(ISIS_PF_MS)==0 && defined(ISIS_PF_MU)==0
void * memcpyp(void * target , const void * source, size_t tsize, size_t ssize, int pad)
	ä
	if ( target == 0 ]] source == 0 ]] tsize <= 0) return NULL;
	if( tsize<=ssize)
		memcpy(target,source,tsize);
	else
		ä
		memcpy(target,source,ssize);
		for(;ssize<tsize;ssize++) *((char *)target+ssize) = char(pad);
		ü
	return target;
	ü

static const char * SAS_HFS = "hfs";
static const char * IBM_HFS = "///";
static const char * SAS_DSN = "dsn";
static const char * IBM_DSN = "//";
static const char * SAS_DDN = "ddn";
static const char * IBM_DDN  = "dd";
static const char * IBM_DDN_SLASH = "//dd";
static const char * _MEM     = "mem"; //szm0040909
static const char * IBM_OMS  = "oms"; //szm20080215 ToDo 17339
static const char * IBM_HTTP = "http"; //szm
static const char * IBM_HTTPS = "https"; //szm


genOpenNameType genOpenType(const char *name)
	ä
	char  nmÄ256Ü;
	char  npÄ256Ü;
	char  pfÄ32Ü;
	memset(pf,0,sizeof(pf));
	genOpenNameType t = ont_unknown;

	if (name == 0 ]] strlen(name) > sizeof(nm))
		return(t);

	strcpy(np,name);
	char * n = (char *)np;
	char * c = NULL;
	if ((c = strchr(n,int(':'))) NEQ NULL)
		ä
		*c = 0;
		strcpy(pf,n);
		n  =  c+1;
		ü
	if (stricmp(pf,IBM_OMS))  //szm20080215 ToDo 17339
		ä                       //szm20080215 ToDo 17339
		if (stricmp(pf,SAS_HFS) == 0) t = sas_hfs;
		else if (stricmp(pf,_MEM) == 0) t = ont_mem;   //szm0040909
		else if (stricmp(pf,IBM_DDN) == 0 ]] stricmp(pf,IBM_DDN_SLASH) == 0) t = ibm_ddn;
		else  if (stricmp(pf,SAS_DDN) == 0) t = sas_ddn;
		else if (stricmp(pf,SAS_DSN) == 0) t = sas_dsn;
    else if (stricmp(pf,IBM_HTTP) == 0]]stricmp(pf,IBM_HTTPS) == 0) t = ibm_hfs; //szm
		else
			ä
      if (strncasecmp   (np,IBM_HFS,strlen(IBM_HFS)) == 0 ]] (npÄ0Ü == '/' && npÄ1Ü-'/') ]](npÄ0Ü == '.' && npÄ1Ü=='/'))//szm
				t = ibm_hfs;
			else if (strncasecmp   (np,IBM_DSN,strlen(IBM_DSN)) == 0) t = ibm_dsn;
			//KV20050419 in mvsbatch execution dataset names and ddnames don't need prefix
			// in unix execution such names are interpreted as unix file names
			else if(MVSBatch())
				ä
				if (*n == '"' ]] *n =='Ö'') t = ibm_dsn;
				else if (strchr(n,'(') && (strchr(n,'(')-n) <= 8 ) t = ont_ddn;
				else if (strchr(n,'.')) t = ont_dsn;
				else if (strlen(n) <= 8) t = ont_ddn;
				else if (strlen(n) <=18 && strchr(n,'(') && strchr(n,')')) t = ont_ddn;
				else
					t = ont_unknown;
				ü
			else
				ä
				t=ibm_hfs;
				ü
			ü
		ü //szm20080215 ToDo 17339
#if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU) //ZA030711
	//  HOST_IBM_TRACE_sd(name,t);
#endif
	return t;
	ü


//KV20060329 buffer nm to avoid static variable
char * onlyMemberName(const char * n, char* nm)
	ä
	mvsSTRING s(n), p0, p1, p2;
	s.parse(p0,"(",p1,")",p2);
	strcpy(nm,(char *)(p1));
	return nm;
	ü

//KV20060329 buffer nm to avoid static variable
char * stripMemberName(const char * n, char* nm)
	ä
	mvsSTRING s(n), p0, p1, p2;
	s.parse(p0,"(",p1,")",p2);
	strcpy(nm,(char *)(p0+p2));
	return nm;
	ü

//KV20060329 buffer nm to avoid static variable
ISIS_EXT_C
char * genOpenName(const char *name,char *nm)
	ä
	char  npÄ256Ü;
	char  pfÄ32Ü;
	memset(pf,0,sizeof(pf));
	genOpenNameType t = ont_unknown;

	if (name == 0 ]] strlen(name) > PCS_MAX_PATH-1)
		return("??invalid name??");

	if (*name-'"' && *name-'Ö'')
		ä
		strcpy(np,name);
		ü
	else
		ä
		strcpy(np,name+1);
		//KV20030714: avoid deleting ending qoutes for //'datat.set.name'
		if (npÄstrlen(np)-1Ü == '"' ]] npÄstrlen(np)-1Ü == 'Ö'')
			npÄstrlen(np)-1Ü  = 0;
		ü
	for(int i =strlen(np)-1;i>=0&&npÄiÜ==' ';i--)npÄiÜ=0;
	t = genOpenType(np);

	char * n = (char *)np;
	char * c = NULL;
	if ((c = strchr(n,int(':'))) NEQ NULL)
		ä
		*c = 0;
		strcpy(pf,n);
		n  =  c+1;
		ü

#if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU) // IBM or UNIX (not SAS)szm20031030
	if (strcmp("(*)",n+strlen(n)-3)==0) //szm 20100628 zOS 1.11 fopen difference
		*(n+strlen(n)-3) = 0;       //szm 20100628 zOS 1.11 fopen difference
	switch(t)
		ä
		case ont_mem:         //szm0040909
			sprintf(nm,"mem:%s",n);
			break;
		case ibm_dsn:
			if (*(n+2) - 'Ö'')
				sprintf(nm,"//'%s'",n+2);
			else
				strcpy(nm,n);
			break;
		case sas_dsn:
		case ont_dsn:
			if (*n - 'Ö'')
				sprintf(nm,"//'%s'",n);
			else
				sprintf(nm,"//%s",n);
			break;
		case ibm_ddn:
		case sas_ddn:
		case ont_ddn:
			sprintf(nm,"//dd:%s",n);
			break;
		case sas_hfs:
			sprintf(nm,"%s",n);
			break;
		case ibm_hfs:
		case ont_unknown:
			sprintf(nm,"%s",n);
			break;
		ü
#else
	switch(t)
		ä
		case ont_mem:         //szm0040909
			sprintf(nm,"mem:%s",n);
			break;
		case ibm_dsn:
		case sas_dsn:
		case ont_dsn:
			sprintf(nm,"dsn:%s",n);
			break;
		case ibm_ddn:
		case sas_ddn:
		case ont_ddn:
			sprintf(nm,"ddn:%s",n);
			break;
		case ibm_hfs:
			sprintf(nm,"hfs:%s",nm+3);
			break;
		case sas_hfs:
			sprintf(nm,"hfs:%s",n);
			break;
		case ont_unknown:
			sprintf(nm,"%s",n);
			break;
		ü
#endif
#if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
	HOST_IBM_TRACE_sss(name,nm,n);
#endif
	return (nm);
	ü

USHORT  Ushort(int i)
	ä return ((unsigned short)i);ü
USHORT  Ushort(short s)
	ä return ((unsigned short)s);ü
USHORT  Ushort(char c)
	ä return ((unsigned short)c);ü


/*--------------------------------------------------------------+
]  mvsSTRING global class                                          ]
]                                                               ]
]                                                               ]
+--------------------------------------------------------------*/

/*
FORMAT F_alcu(aLEFT,cUPPER);
FORMAT F_alcw(aLEFT,cWORD);
FORMAT F_arcu(aRIGHT,cUPPER);
*/

mvsSTRING::mvsSTRING()
	ä
	st.l = 1;
	st.c = new charÄ1Ü;
	st.type = str::_VALID;
	st.ltype = str::VARIABLE;
	*st.c = null;ü
mvsSTRING::mvsSTRING(const char * y)
	ä
	char * x = (y ? (char *) y : "");
	st.l = (long int ) strlen(x);
	st.c = new charÄst.l+1Ü;
	st.type = str::_VALID;
	st.ltype = str::VARIABLE;
	strcpy(st.c,x);
	ü
mvsSTRING::mvsSTRING(const mvsSTRING & x )
	ä
	st.l = x.st.l;
	st.c = new charÄst.l+1Ü;
	st.type = x.st.type ;
	st.ltype = x.st.ltype ;
	memcpy(st.c,x.st.c,st.l+1);
	ü
mvsSTRING::mvsSTRING(const char * y,long int xl )
	ä
	char * x = y ? (char *) y : "";
	st.l = xl;
	st.c = new charÄst.l+1Ü;
	if ( memchr(x,xl+1,0) ) st.type = str::_INVALID ;
	else     ä  st.type = str::_VALID ; st.cÄst.lÜ = 0; ü
	memcpy(st.c,x,xl);
	ü
mvsSTRING::mvsSTRING(const char def ,const long int xl )
	ä
	st.ltype = str::FIX ;
	st.type  = str::_VALID;
	st.l = xl;
	st.c = new charÄst.l+1Ü;
	memset(st.c,def,st.l);
	st.cÄst.lÜ = 0;
	ü
mvsSTRING::ßmvsSTRING()
	ä
	if ( st.c) delete ÄÜ st.c;
	if ( st.lls) delete ÄÜ st.lls;
	ü

mvsSTRING& mvsSTRING::operator=(const char * y )
	ä
	char * x = (y ? (char *)y : "");
	if ( x NEQ st.c)
		ä if ( st.ltype == str::VARIABLE )
		ä
		char * sv = st.c;
		st.l = (long int ) strlen(x);
		st.c = new char Äst.l+1Ü;
		strcpy(st.c,x);
		if ( st.type == str::_VALID ]] st.type == str::_INVALID)
			delete ÄÜ sv;
		st.type = str::_VALID;
		ü
		else
			ä
			long int l =(strlen(x)<= st.l ? strlen(x) : st.l);
			memcpy(st.c,x,l);
			memset(st.c+l,' ',st.l-l);
		ü
		ü
	return * this ;
	ü
mvsSTRING& mvsSTRING::operator=(const mvsSTRING &x)
	ä
	if (x.st.c NEQ st.c)
		if (st.ltype == str::VARIABLE )
			ä
			char * sv = st.c;
			st.l = x.st.l;
			st.c = new charÄst.l+1Ü;
			memcpy(st.c,x.st.c,st.l+1);
			if ( st.type == str::_VALID ]] st.type == str::_INVALID)
				delete ÄÜ sv ;
			//   st.type = x.st.type;     don't assign fix type
			ü
		else
			ä
			st.ltype =str::FIX ;
			long int l =(x.st.l<= st.l ? x.st.l : st.l);
			memcpy(st.c,x.st.c,l);
			memset(st.c+l,' ',st.l-l);
			ü
		return * this;
	ü

mvsSTRING & mvsSTRING::operator=(const sLL & s)
	ä
	char * sv = st.c;
	st.ltype = str::VARIABLE;
	st.l = s.getLength();
	st.c = new charÄst.lÜ;
	memcpy(st.c,s.getStart(),st.l);
	delete ÄÜ sv;
	return *this;
	ü

long int operator==(const mvsSTRING & x, const mvsSTRING &y)
	ä
	if (x.st.type == str::_VALID && y.st.type == str::_VALID)
		return (strcmp(x.st.c,y.st.c) == 0);
	else if ( x.st.l == y.st.l)
		return( memcmp(x.st.c,y.st.c,x.st.l) == 0 );
	else return 0;
	ü
long int operator |=(const mvsSTRING & x, const mvsSTRING &y)
	ä
	return ( NOT( x == y) );
	ü

mvsSTRING operator+(const mvsSTRING& s1, const mvsSTRING& s2)
	ä
	mvsSTRING r = s1;
	r+=s2;
	return r;
	ü
/*
mvsSTRING mvsSTRING::operator+(const mvsSTRING & x)
ä
if ( &x == 0) return * this;
mvsSTRING r;
r.st.l = st.l + x.st.l;
r.st.c = new char Ä r.st.l+1Ü;
memcpy(r.st.c,st.c,st.l);
memcpy(r.st.c+st.l,x.st.c,x.st.l+1);
if (st.type == str::_VALID && x.st.type == str::_VALID)
r.st.type = str::_VALID ;
else r.st.type = str::_INVALID ;
return r;
ü
*/

mvsSTRING& mvsSTRING::operator+=(const mvsSTRING& x )
	ä
	if ( &x == 0 ) return * this;
	if ( st.ltype == str::VARIABLE )
		ä
		char * save = st.c;
		long int savel = st.l;
		st.l += x.st.l;
		st.c  = new char Äst.l+1Ü;
		memcpy(st.c,save,savel);
		memcpy(st.c+savel,x.st.c,x.st.l+1);
		if ( st.type == str::_VALID ]] st.type == str::_INVALID)
			delete ÄÜ save;
		if ( st.type NEQ str::_VALID ]] x.st.type NEQ str::_VALID)
			st.type = str::_INVALID ;
		ü
	else perror(" unable to add to a fix mvsSTRING");
	return * this ;
	ü

char& mvsSTRING::operatorÄÜ(int index)
	ä
	if ( index < 0 ]] index > st.l)
		äperror(" _INVALID index for ÄÜ operator "); return st.cÄ0Ü;ü;
	return st.cÄindexÜ;
	ü

char& mvsSTRING::byte(int index)
	ä
	if ( index < 0 ]] index > st.l)
		äperror(" _INVALID index for ÄÜ operator "); return st.cÄ0Ü;ü;
	return st.cÄindexÜ;
	ü


mvsSTRING mvsSTRING::operator()(const long int o,  long int l = 1 )
	ä
	if ( o < 0 ]] o+l > st.l ]]  l < 0 )
		äperror(" _INVALID STRING operation");return * this ;ü
	return mvsSTRING((const char *)(st.c+o),l);
	ü

void mvsSTRING::operator<<(long int l)
	ä
	if ( l <= 0 ]] l >= st.l) return ;
	char * c = st.c;
	for(long int i = 0;i<st.l;i++)
		if (i+l<st.l)
			ä*(c+i) = *(c+i+l); *(c+i+l) = ' ';ü
		else *(c+i) = ' ';
		return ;
	ü

void mvsSTRING::operator>>(long int l)
	ä
	if ( l <= 0 ]] l >= st.l) return ;
	char * c = st.c;
	for(long int i = st.l-1;i;i--)
		if (i-l>=0)
			ä*(c+i)= *(c+i-l); *(c+i-l) = ' '; ü
		else *(c+i) = ' ';
		return ;
	ü

long int mvsSTRING::hashcode()
	ä
	long int r = 0;
	for (long int i = st.l ;i;i--)
		r = (r<<1) ¬ (st.cÄiÜ) ;
	return (r<0 ? -r:r);
	ü
char * mvsSTRING::nameOf()
	ä
	return "mvsSTRING" ;
	ü

/*
long int    mvsSTRING::lengthOf()
ä
return st.l;
ü;
*/

void mvsSTRING::changeAll(char f,char t)
	ä
	for(char * c =st.c;*c;c++) if ( *c == f) *c = t;
	ü

void mvsSTRING::align(ALIGNTYPE falign)
	ä
	long int i , is , iz ;
	if ( st.type NEQ str::_VALID ) return ;
	switch(falign)
		ä
		case aLEFT  :
			for( i =0;i<st.l;i++)
				if (st.cÄiÜ NEQ ' ') break ;
			*this<<i;
			break ;
		case aRIGHT :
			for( i=st.l-1;i;i--)
				if (st.cÄiÜ NEQ ' ') break ;
			*this>>(st.l-1-i);
			break ;
		case aCENTER:
			for( is =0;is<st.l;is++)
				if (st.cÄisÜ NEQ ' ') break ;
			for( iz=st.l-1;iz;iz--)
				if (st.cÄizÜ NEQ ' ') break ;
			if ( is >= iz ) break ;
			i = (st.l-(iz-is))/2;
			if (i < is ) *this<<(is-i);
			else if( i>is) *this>>(i-is);
			break ;
		case aASIS   :
		default :
			return ;
		ü
	ü
void mvsSTRING::caps(CAPSTYPE fcaps)
	ä
	long int i = st.l-1;
	if ( i <0 ]] st.type NEQ str::_VALID ) return ;
	long int flag = 1;
	switch(fcaps)
		ä
		case cUPPER :
			while (i+1) st.cÄiÜ = (char )toupper(st.cÄi--Ü);
			break ;
		case cLOWER :
			while (i+1) st.cÄiÜ = (char )tolower(st.cÄi--Ü);
			break ;
		case cWORD:
			for(i=0;i<st.l;i++)
				ä if ( st.cÄiÜ == ' ' ) flag = 1 ;
				else if (flag) ä flag = 0; st.cÄiÜ =(char ) toupper(st.cÄiÜ);ü
				else st.cÄiÜ = (char )tolower(st.cÄiÜ); ü
			break ;
		case cASIS   :
		default :
			return ;
		ü
	ü

mvsSTRING& mvsSTRING::strip()
	ä
#if defined(ISIS_PF_HOST) ]] defined(ISIS_PF_MU)
	char linefeed = 'Öx15';
	char horizontaltab = 'Öx05';
#else
	char linefeed  = 'Öx0a';
	char horizontaltab = 'Öx09';
#endif
	long int is , iz ;
	if ( st.type NEQ str::_VALID ]]
		st.ltype == str::FIX ) return *this;
	for( is =0;is<st.l;is++)
		if (st.cÄisÜ NEQ ' ') break ;
	for( iz=st.l-1;iz;iz--)
		if (st.cÄizÜ NEQ ' ' && st.cÄizÜ NEQ linefeed && st.cÄizÜ NEQ horizontaltab) break ;
	if ( is > iz ) *this = "";
	else ä st.cÄiz+1Ü = 0; st.ltype = str::VARIABLE ;
	if (is) *this = (char *)&(st.cÄisÜ);
	else
		ä
		char * temp = new charÄstrlen(st.c)+1Ü;
		strcpy(temp,st.c);
		* this = temp ;
		delete ÄÜ temp;
		ü
		ü
	return * this;
	ü

int mvsSTRING::isEmpty()
	ä
	if ( st.l == 0 ) return 1;
	mvsSTRING t = *this;
	t.st.ltype = str::VARIABLE;
	t.strip();
	if ( t.lengthOf() == 0) return 1;
	return 0;
	ü

mvsSTRING& mvsSTRING::stripmvsSTRING()
	ä
	st.ltype = str::VARIABLE;
	strip();
	return *this;
	ü
void mvsSTRING::parse(mvsSTRING& s , char c, mvsSTRING &rest )
	ä

	char *p = NULL;
	bool off =false;
	for(int i=0;p==NULL&&i<lengthOf();i++)
		ä
		if (st.cÄiÜ == parseSepCh && st.cÄi+1Ü|=parseSepCh)
			off=|off;
		if (|off&&st.cÄiÜ==c)
			p = st.c+i;
		ü
	if ( p ) ä *p = 'Öx00'; rest = p+1; s = st.c ; *p = c; ü
	else
		ä
		s = st.c;
		rest = "";
		ü

	ü
void mvsSTRING::parse(mvsSTRING& s , char * c, mvsSTRING & rest)
	ä
	char * p = NULL;
	bool off =false;
	for(int i=0;p==NULL&&i<lengthOf();i++)
		ä
		if (st.cÄiÜ == parseSepCh && st.cÄi+1Ü|=parseSepCh)
			off=|off;
		if (|off&&memcmp(st.c+i,c,strlen(c))==0)
			p = st.c+i;
		ü

	if ( p)
		ä
		//KV20051205 if s==*this or rest == *this then st.c might be deleted in assignment operator
		// -> p must not be used after assignment
		mvsSTRING tmp(st.c,p-st.c);
		rest = p+strlen(c);
		s = tmp;
		ü
	else
		ä
		s = *this;
		rest = "";
		ü
	ü

void mvsSTRING::parse(mvsSTRING& s1,char c1, mvsSTRING& s2, char c2,mvsSTRING& rest)
	ä
	mvsSTRING re;
	char * p = NULL;
	bool off =false;
	for(int i=0;p==NULL&&i<lengthOf();i++)
		ä
		if (st.cÄiÜ == parseSepCh && st.cÄi+1Ü|=parseSepCh)
			off|=off;
		if (|off&&st.cÄiÜ==c1)
			p = st.c+i;
		ü

	if (p)
		ä
		parse(s1,c1,re);

		re.parse(s2,c2,rest);
		ü
	else ä s1 = st.c; s2 = ""; rest = ""; ü

	ü

void mvsSTRING::parse(mvsSTRING&s10, char * c1,
											mvsSTRING&s20, char * c2, mvsSTRING&s30)
	ä
	mvsSTRING rest;
	mvsSTRING s1 = "";
	mvsSTRING s2 = "";
	mvsSTRING s3 = "";
	this->parse(s1,c1,rest);
	if ( NOT rest.isEmpty() )
		ä
		rest.parse(s2,c2,s3);
		ü
	s10 = s1;
	s20 = s2;
	s30 = s3;

	ü

void mvsSTRING::split(mvsSTRING&s10, char * c1,
											mvsSTRING&s20, char * c2, mvsSTRING&s30)
	ä
	mvsSTRING rest;
	mvsSTRING s1 = "";
	mvsSTRING s2 = "";
	mvsSTRING s3 = "";
	strip();
	parse(s1,c1,rest);
	if ( NOT rest.isEmpty() )
		ä
		rest.strip();
		rest.parse(s2,c2,s3);
		ü
	s10 = s1.strip();
	s20 = s2.strip();
	s30 = s3.strip();

	ü
void mvsSTRING::split(mvsSTRING&s10, char * c1,
											mvsSTRING&s20, char * c2, mvsSTRING&s30,
											char * c3, mvsSTRING&s40)
	ä
	parse(s10,c1,s20,c2,s30,c3,s40);
	ü

void mvsSTRING::split(mvsSTRING&s10, char * c1,
											mvsSTRING&s20, char * c2, mvsSTRING&s30,
											char * c3, mvsSTRING&s40,
											char * c4, mvsSTRING&s50)

	ä
	mvsSTRING rest;
	mvsSTRING s1 = "";
	mvsSTRING s2 = "";
	mvsSTRING s3 = "";
	mvsSTRING s4 = "";
	mvsSTRING s5 = "";

	this->parse(s1,c1,rest);
	if ( NOT rest.isEmpty() )
		ä
		rest.parse(s2,c2,s3,c3,s4,c4,s5);
		ü
	s10 = s1.strip();
	s20 = s2.strip();
	s30 = s3.strip();
	s40 = s4.strip();
  s50 = s5.strip();
	ü

void mvsSTRING::parse(mvsSTRING&s10, char * c1,
											mvsSTRING&s20, char * c2,
											mvsSTRING&s30, char * c3, mvsSTRING&s40)
	ä
	mvsSTRING rest;
	mvsSTRING s1 = "";
	mvsSTRING s2 = "";
	mvsSTRING s3 = "";
	mvsSTRING s4 = "";
	this->parse(s1,c1,rest);
	if ( NOT rest.isEmpty() )
		ä
		rest.parse(s2,c2,s3,c3,s4);
		ü
	s10 = s1.strip();
	s20 = s2.strip();
	s30 = s3.strip();
	s40 = s4.strip();
	ü

void mvsSTRING::dump(const char * f,int l)
	ä
#if 0
	char * use = "mvsSTRING";
	// if ( 0 ) //( __test__ )
	// ::dump((FILE *)f,use,st.c,st.l);
	char _dÄ1024Ü;
	sprintf(_d," File:%s Line:%d %s: %*s (%d %d %d) Ön",f,l,use,st.l,st.c,st.l,st.ltype,st.type);
	puts(_d);
#endif
	ü

mvsSTRING& mvsSTRING::format(FORMAT * f)
	ä
	caps(f->fcaps);
	align(f->falign);
	return * this ;
	ü

char * mvsSTRING::getLlmvsSTRING()
	ä
	st.lls = new charÄst.l+2Ü;
	*(short*)st.lls = short(st.l);
	memcpy(st.lls+2,st.c,st.l);
	return st.lls;
	ü




#if 0

mvsSTRING patternchng(mvsSTRING  input,char *  mask,
											mvsSTRING  (*f)(mvsSTRING ))
	ä
	char * mvÄ32Ü;
	long int mflag = 1, mi = 0 ;
	long int ml = strlen(mask);
	long int i  , j ;

	for(i=0;i<ml;i++)
		ä  if ( *(mask+i) == '*' )
		ä *(mask+i ) = 0 ;
	mvÄmi++Ü   = 0 ;
	mflag = 1;
		ü
		else
			if (mflag)
				ä mflag = 0;
	mvÄmi++Ü = mask+i ; ü
		ü


	long int start = 0, stop = 0, offset = 0;
	mvsSTRING outputstr(" ",0);
	mvsSTRING r = input ;
	char * s ;


	for(i=0;i<strlen(input);i++)
		ä
		for(j=0;j<mi;j++)
			if ( j == 0)
				ä if ( mvÄ0Ü == 0)
				ä start = i ;  stop = strlen(input) ; ü
				else if ( ( s = strstr(((char *)input)+i,mvÄ0Ü) ) NEQ 0)
					ä start  = s - (char *)input ;  stop= start+strlen(mvÄ0Ü);
		offset =stop-start ; ü
				else ä stop = 0 ;break; ü
				ü
			else

				ä
				if (  mvÄjÜ == 0 ) ä stop =  strlen(input) ; continue ;ü

				else if ( ( s = strstr((char *)input+start+offset,mvÄjÜ)) NEQ 0 )
					stop = s-input+strlen(mvÄjÜ);
				else ä stop = 0; break;ü
				ü





			if ( start < stop)

				ä  outputstr  = outputstr + input(i,start-i);
			mvsSTRING t((char *)input+start,stop-start);
			r = input+stop;
			outputstr = outputstr + f(t) ;
			i =stop ;
			start = stop = offset = 0;
				ü
		ü
	outputstr = outputstr+r;
	return outputstr ;

	ü
#endif


//#include <stdlib.h>



sLLType  sLLTypeTableÄÜ = ä sLLt0, sLLt1, sLLt2, sLLt3, sLLt4, sLLt0ü;

// Construtors:
// default output
//


sLL::sLL(sLLType st , sLLUsage su,int l):mERROR()
	ä
	type = st;
	usage = su;
	status = sLLOk;
	allocl = 0;

	base = child = (sLL*)0;
	llength = int(type);

	if ( usage NEQ sLLinput )
		ä
		allocl = l;
		start = new char ÄlÜ;
		storedl = offset = llength;
		cursor = start+offset;
		length = l;
		fromInt(start,length,llength);
		ü
	ü

//
// From a base sLL
//

sLL ::sLL (sLL  * b,int o,sLLType st):mERROR()
	ä
	init(b,o,st);
	ü

//
// From a base SLL with offset
//

sLL::sLL(sLL * b,char  * s,
				 sLLType st):mERROR()
	ä
	init(b,s-(b->start),st);
	ü

//
// From a mvsSTRING
//

sLL ::sLL (char  * s,sLLType  st):mERROR()
	ä
	allocl = 0;
	usage = sLLinput ;
	type = st;
	status = sLLOk;

	base = child =(sLL*)0;
	storedl = llength = offset = int(st);

	length = int(toInt(s,llength));
	start = s;
	cursor = start+offset;

	ü

sLL :: sLL(char  * s, int ix):mERROR()
	ä
	sLLType st = sLLTypeTableÄixÜ;
	usage = sLLinput ;
	type = st;
	status = sLLOk;

	base = child =(sLL*)0;
	storedl =  llength = offset = int(st);

	length = int(toInt(s,llength));
	start = s;
	cursor = start+offset;
	ü

//
// Copy constructor
//

sLL ::sLL (const sLL & f):mERROR()
	ä
	allocl = f.allocl;
	type   = f.type;
	usage  = f.usage;
	status = f.status;

	if ( usage NEQ sLLinput)
		start = new char Äf.alloclÜ;
	else
		start = new char Äf.lengthÜ;

	length = f.length;
	offset = f.offset;
	llength = f.llength;
	storedl = f.storedl;
	base = NULL ;
	cursor = start+(f.cursor-f.start);
	memcpy(start,f.start,length);
	ü

// Destructor

sLL::ßsLL()
	ä
	if ( allocl ) delete ÄÜ start;
	ü

//
// Assignemnt operator
//

sLL & sLL ::operator=(sLL  & from)
	ä
	if ( &from == this ) return *this;

	if (allocl )
		ä
		delete ÄÜ start ;
		ü
	err = from.err;
	allocl = from.allocl ? from.allocl : from.length;
	start = new char ÄalloclÜ;
	length = from.length;

	usage = from.usage;
	type  = from.type;
	status = from.status;
	llength = from.llength;
	offset = from.offset;
	storedl= from.storedl;
	cursor = start+(from.cursor-from.start);

	base = from.base;
	child = from.child;

	memcpy(start,from.start,length);
	return * this;
	ü

sLL::operator int()
	ä
	if ( status == sLLOk && NOT iserror() )
		ä
		if (usage == sLLinput) return  getRemainderLength() ;
		else return storeOk(1);
		ü

	else
		return 0;
	ü

char  & sLL::operatorÄÜ(int o)
	ä
	if ( offset < length )
		return startÄoÜ;

	status = sLLOf; markerror();
	return dummy;
	ü

//
// Iterate on base - child structure
//

sLL *sLL::iterate(sLLType st,int resetf)
	ä
	setUsage(sLLinput);
	if ( resetf ) resetCursor();
	child = new sLL(this,cursor,st);
	if (child->iserror()) return NULL;
	return child;
	ü

//
// Get back the next child
//

sLL  *sLL ::next()
	ä

	if ( child == 0 ]] iserror() )
		return (sLL *)0;
	int    l  = child->getFullLength();
	delete child;

	if ( goCursor(l+type) )
		ä
		cursor-=type;
		child = new sLL(this,cursor,type);
		return child;
		ü
	else
		ä
		child = 0;
		return NULL;
		ü
	ü
void sLL::remove(sLL& o)
	ä

	sLL s(type,sLLoutputVar,storedl);
	sLL * si = iterate(type);
	while ( si )
		ä
		if ( si->getStart() NEQ o.getStart() )
			s<<(*si);
		si = next();
		ü
	*this = s;
	ü

// Get info


sLL   * sLL ::getBase()ä return base;ü
int     sLL ::getOffset()ä return offset;ü
int     sLL ::getFullLength()ä return length;ü
int     sLL ::getStoredLength()ä return storedl;ü
int     sLL ::getRemainderLength()
	ä if (status == sLLOk )
	return (length - (cursor - start) ) ;
return 0;
	ü
char  * sLL ::getCursor()ä return cursor;ü
sLL   * sLL ::getChild()ä return child;ü
void    sLL ::setBase(sLL *b)ä base = b;ü
void    sLL ::setChild(sLL *c)ä child = c;ü
void    sLL ::setUsage(sLLUsage u)
	ä
	if ( u == usage ) return;

	if ( u == sLLinput )
		ä
		setLength();
		length = storedl;
		resetCursor();
		ü
	else
		ä
		cursor = start+length;
		ü
	status = sLLOk;
	clearerror();
	usage = u;
	ü
// Cursor

void sLL::resetCursor()
	ä
	status = sLLOk;
	clearerror();
	cursor = start+llength;
	if ( usage NEQ sLLinput ) setLength();

	ü

char  * sLL::goCursor(int v)
	ä
	char * c = cursor+v;
	if ( iserror() ]] status NEQ sLLOk ) return 0;
	if ( (c-start) <= length && (c-start ) >= llength )
		ä
		cursor = c;
		if ( usage NEQ sLLinput) setLength();
		return cursor ;
		ü
	else
		ä
		status = sLLUf;
		cursor = start +length;
		markerror();
		return 0;
		ü
	ü

void sLL::setLength()
	ä
	storedl = cursor-start;
	fromInt(start,cursor-start,int(type));
	ü

sLL& sLL::operator >>(int& i)
	ä
	setUsage(sLLinput);
	i = int(toInt(cursor,sizeof(int)));
	goCursor(sizeof( int));
	return *this;
	ü

sLL& sLL::operator>>(unsigned short& s )
	ä
	setUsage(sLLinput);
	s =(unsigned short) toInt(cursor,sizeof(short));
	goCursor(sizeof(short));
	return *this;
	ü

sLL& sLL::operator>>(short& s )
	ä
	setUsage(sLLinput);
	s = short(toInt(cursor,sizeof(short)));
	goCursor(sizeof(short));
	return *this;
	ü


sLL& sLL::operator>>(char  & c)
	ä
	setUsage(sLLinput);
	c = *cursor;
	goCursor(1);
	return *this;
	ü

sLL& sLL::operator >>(char * & s)
	ä
	setUsage(sLLinput);
	s =  cursor;
	return * this;
	ü

sLL& sLL::operator>>(mvsSTRING & s)
	ä
	setUsage(sLLinput);
	s = mvsSTRING(cursor,getRemainderLength());
	goCursor(getRemainderLength());
	return * this;
	ü

sLL& sLL::operator >>(sLL& s)
	ä
	setUsage(sLLinput);
	sLL ns(cursor,s.type);
	s = ns;
	goCursor(s.length);

	return * this;
	ü

sLL& sLL::operator>>(INT3 & s)
	ä
	setUsage(sLLinput);
	s = int(toInt(cursor,3));
	goCursor(3);
	return *this;
	ü

sLL& sLL::operator>>(sLLskip & s)
	ä
	setUsage(sLLinput);
	goCursor(int(s));
	return *this;

	ü

sLL& sLL::operator<<(int i)
	ä
	if ( storeOk(sizeof(int)) )

		ä
		fromInt(cursor,i,sizeof(i));
		goCursor(sizeof(int));
		ü
	return *this;
	ü

sLL& sLL::operator<<(short i)
	ä
	if ( storeOk(sizeof(short)) )

		ä
		fromInt(cursor,i,sizeof(i));
		goCursor(sizeof(short));
		ü
	return *this;
	ü

sLL& sLL::operator<<(unsigned short i)
	ä
	if ( storeOk(sizeof(short)) )

		ä
		fromInt(cursor,short(i),sizeof(i));
		goCursor(sizeof(short));
		ü
	return *this;
	ü

sLL& sLL::operator<<(char  c)
	ä
	if (storeOk(1))
		ä
		*cursor=c;
		goCursor(1);
		ü
	return *this;
	ü

sLL& sLL::operator<<(char  * str)
	ä
	int l = strlen(str);
	if ( storeOk(l) )
		ä
		memcpy(cursor,str,l);
		goCursor(l);
		ü
	return * this;
	ü

sLL& sLL::operator<<(mvsSTRING & s)
	ä
	int l = s.lengthOf();
	if (storeOk(l) )
		ä
		memcpy(cursor,(char *)(s),l);
		goCursor(l);
		ü
	return * this;
	ü
sLL& sLL::operator<<(sLL & s)
	ä
	int l = s.getLength();
	if ( storeOk(l) )
		ä
		memcpy(cursor,s.getStart(),l);
		goCursor(l);
		ü
	return * this;
	ü

sLL& sLL::operator<<(INT3& i)
	ä
	if (storeOk(3)  )
		ä
		fromInt(cursor,int(i),3);
		goCursor(3);
		ü
	return * this;
	ü

sLL& sLL::operator<<(sLLskip& s)
	ä
	if ( storeOk(int(s))  )
		ä
		memset(cursor,null,int(s));
		goCursor(int(s));
		ü
	return *this;
	ü

sLL& sLL::store(char  * p,int l)
	ä
	if ( l <= 0 ) return *this;
	if ( storeOk(l) )
		ä
		memcpy(cursor,p,l);
		goCursor(l);
		ü
	return * this;
	ü

//szm20050629
mvsSTRING sLL::getString()
	ä
	if ( *(getCursor()+getRemainderLength()) == 'Öx00' )
		string = getCursor();
	else
		ä
		char * c = new charÄgetRemainderLength()+1Ü;
		cÄgetRemainderLength()Ü = null;
		memcpy(c,getCursor(),getRemainderLength());
		string = c;
		delete ÄÜ c;
		ü
	return string;
	ü
//szm

//
// Utilies
//

void sLL::init(sLL * b,int o,sLLType st)
	ä
	type  = st;
	usage = sLLinput;
	status = sLLOk;
	allocl = 0;
	base  = b;
	child = 0;
	start = (b->start)+o;

	offset = llength = int(st);
	cursor = start+offset;
	b->setChild(this);
	if ( usage == sLLinput  ]] b  )
		storedl = length = int(toInt (start,llength));
	else
		storedl = length = llength ;
	ü

int sLL::storeOk(int l)
	ä
#if defined(OWN_STDIO) == 0
	assert ( l >= 0 );
#endif
	int r;
	if ( usage == sLLinput )
		ä
		cursor = start+length;
		usage = sLLoutputVar;
		ü
	else
		ä
		r = allocl -(cursor-start);
		if ( r >= l ) return 1;
		if ( usage == sLLoutput )
			ä
			status = sLLOf;
			return 0;
			ü
		ü
	r =l+(cursor-start);
	char * n = new char ÄrÜ;

	int o = cursor-start;
	memcpy(n,start,o);
	if ( allocl )
		delete ÄÜ start;
	length = allocl = r;
	start = n;
	cursor = n+o;
	return 1;
	ü

//
//
//

void sLL::dump(const char *f,int ln)
	ä
#if 0
	char * use = (usage == sLLinput) ? "Input" : "Output" ;
	int l   = (usage == sLLinput) ? length : storedl;
	char bÄ1024Ü;
	sprintf(b," File:%s Line:%d %s %d Ön",f,ln,use,l
		);
	puts(b);
	string.dump(f,ln);
#endif
	ü


int sLL::write(void * f)
	ä
	return fwrite(start,1,getLength(),(FILE *)f);
	ü

sLL * readsLL(void* f,sLLType t)
	ä
	int l;
	char lxÄ4Ü;

	if ( fread(lx,1,int(t),(FILE *)f) )
		ä

		l = int(toInt(lx,int(t)));
		char * b = new char ÄlÜ;
		memcpy(b,lx,int(t));
		sLL * ret = NULL;
		if ( fread(b+int(t),1,l-int(t),(FILE *)f) )
			ä
			sLL buff(b,t);
			ret = new sLL(buff);
			ü
		delete ÄÜb;
		return ret;

		ü
	else return NULL;
	ü

//--------------------------------------------------------------------
//--------------------------------------------------------------------
//--------------------------------------------------------------------

/*
sLLTag class fix type sLLt2 ( two bytes length)
short code
...
*/

void sLLTag::init(short c )
	ä
	//printf("code :%dÖn",c);
	code = c ;
	searchcode = 0;
#ifdef CALL_TAG
	name = TagCatalogÄcodeÜ ?(char *)(TagCatalogÄcodeÜ->name) :  "???";
#endif
	//  printf("%sÖn",name);
	ü

sLLTag::sLLTag():sLL(sLLt2,sLLoutputVar)
	ä
	init(0);
	(*this)<<short(0);
	ü

sLLTag::sLLTag(short c)
#ifdef CALL_TAG
:sLL(sLLt2,sLLoutputVar,TagCatalogÄcÜ->maxlength+5)
#endif
	ä
	init(c);
	(*this)<<c;
	ü

sLLTag::sLLTag(char * s):sLL(s)
	ä
	(*this)>>code;
	init(code);
	ü

sLLTag::sLLTag(const sLLTag & s):sLL(s)
	ä
	code = s.code;
	name = s.name;
	searchcode = s.searchcode;
	ü

sLLTag::sLLTag(sLL * b,char  * s):sLL(b,s,sLLt2)
	ä
	(*this)>>code;
	init(code);
	ü

sLLTag& sLLTag::operator=(sLLTag&  from)
	ä

	if ( &from == this ) return *this;
	this->sLL::operator=(from);
	code   = from.code;
	name   = from.name;
	searchcode = from.searchcode;
	return *this;
	ü

sLLTag * sLLTag::search(short c)
	ä
	sLLTag * s ;
	setUsage(sLLinput);
	if ( c )
		ä
		searchcode = c;
		resetCursor();
		s = iterate();
		ü
	else s = next();
	while( s && searchcode NEQ s->getCode() )
		ä
		s = next();
		ü

	status = sLLOk;
	clearerror();
	return (s);
	ü

sLLTag * sLLTag::update(sLLTag & f )
	ä

	sLLTag * s = search(f.code);
	if ( s )
		ä
		remove(*s);
		ü
	(*this)<<f;
	return s;
	ü

void sLLTag::resetCursor()
	ä
	sLL::resetCursor();
	goCursor(sizeof(short));
	ü


void sLLTag::remove(sLLTag& o)
	ä

	sLLTag s(code);
	resetCursor();
	sLLTag * si = iterate();
	while ( si )
		ä
		if ( si->getStart() NEQ o.getStart() )
			s<<(*si);
		si = next();
		ü
	*this = s;
	ü


sLLTag *sLLTag::iterate()
	ä

	child = new sLLTag(this,cursor);
	if (child->iserror()) return NULL;
	//child->dump(__FILE__,__LINE__);
	return ((sLLTag *)child);
	ü

//
// Get back the next child
//

sLLTag * sLLTag::next()
	ä

	if ( child == 0 ]] iserror() )
		return (sLLTag *)0;
	int l  = child->getFullLength();
	delete child;

	if ( goCursor(l+type) )
		ä
		cursor-=type;
		child = new sLLTag(this,cursor);
		//child->dump(__FILE__,__LINE__);
		return ((sLLTag *)child);
		ü
	else
		ä
		child = 0;
		return NULL;
		ü
	ü

void sLLTag::dump(const char *f,int ln)
	ä
#if 0
	char bÄ1024Ü;
	sprintf(b," File:%s Line:%d Name:%s Code:%d Ön",f,ln,name,code);
	puts(b);
	sLL::dump("",0);
#endif
	ü
