#include "isisdef.h"
#include <stdlib.h>
#include <string.h>
#include "dssclas.hpp"
#include "dssmain.hpp"
#include "jobenv.hpp"


char 			DSS::ddnamelistÄ48Ü;
char 			DSS::pagenumberÄ4Ü;
address 	DSS::uim = NULL;

DSSPARM * makeDSSPARM(size_t l,void * v)
ä
 DSSPARM * rc = (DSSPARM *)malloc(l+2);
 rc->length = short(l);
 memcpy(rc->data,v,l);
 return rc;
ü


DSS::DSS(char * argv,DssJob * j)
ä
        JOBENV::DEBUG(1,"DSS construct");
        adrdssu = load(ADRDSSU);
        dssparmÄ0Ü = makeDSSPARM(strlen(argv),(address)argv);
        memset(ddnamelist,0,sizeof(ddnamelist));
        memcpy(ddnamelist+32,"SYSIN   ",8);
        memcpy(ddnamelist+40,"SYSPRINT",8);
        dssparmÄ1Ü = makeDSSPARM(sizeof(ddnamelist),(address)ddnamelist);
        memcpy(pagenumber,"0001",4);
        dssparmÄ2Ü = makeDSSPARM(sizeof(pagenumber),(address)pagenumber);
        uim        = (address)UIMASM;
		    uim        = address(0x80000000 +long(uim));
        dssparmÄ3Ü = makeDSSPARM(4,(address)&uim);
        address pthis =(address) this;
        dssparmÄ4Ü = makeDSSPARM(4,(address)&pthis);
        dssparmÄ4Ü = (DSSPARM *)(0x80000000 +long(dssparmÄ4Ü));
        function   = invalid;
        job        = j;
ü

DSS::ßDSS()
ä
        JOBENV::DEBUG(1,"DSS destruct");
        unload(ADRDSSU);
        for(int i =0;i<5;i++)
                free(dssparmÄiÜ);
        exit(0);
ü

int DSS::run(DssJob * j)
ä
        JOBENV::DEBUG(1,"DSS run");
        job = j;
        return (call(adrdssu,dssparm));
ü

adrdssu_address DSS::load(const char * name)
ä
				adrdssu_address rc = 0;
        return rc;
ü

void DSS::unload(const char * name)
ä

ü

int DSS::call(address a,DSSPARM **p)
ä
int rc = 0;
				rc = UIMASM(dssparmÄ0Ü,dssparmÄ1Ü,dssparmÄ2Ü,dssparmÄ3Ü,dssparmÄ4Ü);
        return rc;
ü


void DSS::exit(int rc)
ä
			exit(rc);
ü

