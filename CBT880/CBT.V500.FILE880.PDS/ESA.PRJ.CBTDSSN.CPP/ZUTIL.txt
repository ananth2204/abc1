/* zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2002 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* §(#) $Id: zutil.c,v 1.2 2003/09/11 11:16:22 matthiasw Exp $ */

#include "zutil.h"

struct internal_state      äint dummy;ü; /* for buggy compilers */

#ifndef STDC
extern void exit OF((int));
#endif

const char *z_errmsgÄ10Ü = ä
"need dictionary",     /* Z_NEED_DICT       2  */
"stream end",          /* Z_STREAM_END      1  */
"",                    /* Z_OK              0  */
"file error",          /* Z_ERRNO         (-1) */
"stream error",        /* Z_STREAM_ERROR  (-2) */
"data error",          /* Z_DATA_ERROR    (-3) */
"insufficient memory", /* Z_MEM_ERROR     (-4) */
"buffer error",        /* Z_BUF_ERROR     (-5) */
"incompatible version",/* Z_VERSION_ERROR (-6) */
""ü;


const char * ZEXPORT zlibVersion()
ä
    return ZLIB_VERSION;
ü

#ifdef DEBUG

#  ifndef verbose
#    define verbose 0
#  endif
int z_verbose = verbose;

void z_error (m)
    char *m;
ä
    fprintf(stderr, "%sÖn", m);
    exit(1);
ü
#endif

/* exported to allow conversion of error code to string for compress() and
 * uncompress()
 */
const char * ZEXPORT zError(err)
    int err;
ä
    return ERR_MSG(err);
ü


#ifndef HAVE_MEMCPY

void zmemcpy(dest, source, len)
    Bytef* dest;
    const Bytef* source;
    uInt  len;
ä
    if (len == 0) return;
    do ä
        *dest++ = *source++; /* ??? to be unrolled */
    ü while (--len |= 0);
ü

int zmemcmp(s1, s2, len)
    const Bytef* s1;
    const Bytef* s2;
    uInt  len;
ä
    uInt j;

    for (j = 0; j < len; j++) ä
        if (s1ÄjÜ |= s2ÄjÜ) return 2*(s1ÄjÜ > s2ÄjÜ)-1;
    ü
    return 0;
ü

void zmemzero(dest, len)
    Bytef* dest;
    uInt  len;
ä
    if (len == 0) return;
    do ä
        *dest++ = 0;  /* ??? to be unrolled */
    ü while (--len |= 0);
ü
#endif

#ifdef __TURBOC__
#if (defined( __BORLANDC__) ]] |defined(SMALL_MEDIUM)) && |defined(__32BIT__)
/* Small and medium model in Turbo C are for now limited to near allocation
 * with reduced MAX_WBITS and MAX_MEM_LEVEL
 */
#  define MY_ZCALLOC

/* Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
 */

#define MAX_PTR 10
/* 10*64K = 640K */

local int next_ptr = 0;

typedef struct ptr_table_s ä
    voidpf org_ptr;
    voidpf new_ptr;
ü ptr_table;

local ptr_table tableÄMAX_PTRÜ;
/* This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
 */

voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
ä
    voidpf buf = opaque; /* just to make some compilers happy */
    ulg bsize = (ulg)items*size;

    /* If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
     */
    if (bsize < 65520L) ä
        buf = farmalloc(bsize);
        if (*(ush*)&buf |= 0) return buf;
    ü else ä
        buf = farmalloc(bsize + 16L);
    ü
    if (buf == NULL ]] next_ptr >= MAX_PTR) return NULL;
    tableÄnext_ptrÜ.org_ptr = buf;

    /* Normalize the pointer to seg:0 */
    *((ush*)&buf+1) += ((ush)((uch*)buf-0) + 15) >> 4;
    *(ush*)&buf = 0;
    tableÄnext_ptr++Ü.new_ptr = buf;
    return buf;
ü

void  zcfree (voidpf opaque, voidpf ptr)
ä
    int n;
    if (*(ush*)&ptr |= 0) ä /* object < 64K */
        farfree(ptr);
        return;
    ü
    /* Find the original pointer */
    for (n = 0; n < next_ptr; n++) ä
        if (ptr |= tableÄnÜ.new_ptr) continue;

        farfree(tableÄnÜ.org_ptr);
        while (++n < next_ptr) ä
            tableÄn-1Ü = tableÄnÜ;
        ü
        next_ptr--;
        return;
    ü
    ptr = opaque; /* just to make some compilers happy */
    Assert(0, "zcfree: ptr not found");
ü
#endif
#endif /* __TURBOC__ */


#if defined(M_I86) && |defined(__32BIT__)
/* Microsoft C in 16-bit mode */

#  define MY_ZCALLOC

#if (|defined(_MSC_VER) ]] (_MSC_VER <= 600))
#  define _halloc  halloc
#  define _hfree   hfree
#endif

voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
ä
    if (opaque) opaque = 0; /* to make compiler happy */
    return _halloc((long)items, size);
ü

void  zcfree (voidpf opaque, voidpf ptr)
ä
    if (opaque) opaque = 0; /* to make compiler happy */
    _hfree(ptr);
ü

#endif /* MSC */


#ifndef MY_ZCALLOC /* Any system without a special alloc function */

#ifndef STDC
extern voidp  calloc OF((uInt items, uInt size));
extern void   free   OF((voidpf ptr));
#endif

voidpf zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
ä
    if (opaque) items += size - size; /* make compiler happy */
    return (voidpf)calloc(items, size);
ü

void  zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
ä
    free(ptr);
    if (opaque) return; /* make compiler happy */
ü

#endif /* MY_ZCALLOC */
