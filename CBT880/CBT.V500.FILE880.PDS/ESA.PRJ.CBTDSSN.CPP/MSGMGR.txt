/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/msgmgr.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/

#ifdef ISIS_PF_MU
#pragma csect(CODE,"msgmgrmC")
#pragma csect(STATIC,"msgmgrmS")
#pragma csect(TEST,"msgmgrmT")
#endif
#include "isisdef.h"
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#ifdef OWN_STDIO
#include "stdio.hpp"
//#include "iqvprj.hpp"
#endif
#include "mvsbase.hpp"
#include "casmif.hpp"
#if defined(CICSAPPL) == 0 && defined(MU_STANDALONE) == 0
#include "isismisc.hpp"
#endif
#include "misc.hpp"
#include "msgmgr.hpp"
#ifdef PANEL_ID
#include "panel.hpp"
#include "cicbase.hpp"
#endif
#include <dll.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>


namespace isis_ns_mvs
	ä
	//KV20040216 protection exception in pas dll
	//???MessageTEXT * messagetext   = new MessageTEXT();
	MessageTEXT * messagetext   = 0;
	ExternalTEXT * externaltext = 0;  //szm
	/*--------------------------------------------------------------+

	MSGE rouines                                                 ]
	+--------------------------------------------------------------*/



//#define ERROR_BUFF 512 szm
#define ERROR_BUFF 4096
	static char g_ebbÄ ERROR_BUFF Ü;
	static char g_ebb_flag = 0;


	void * TEXTVER();
	MSGE * tCHARp(char * c ,int l)
		ä return new MSGE(c,l);ü
	MSGE * tINT(int i,int l )
		ä return new MSGE(i,l); ü
	MSGE * tSHORT(int i,int l )
		ä return new MSGE(i, l);ü
	MSGE * tmvsSTRING( mvsSTRING & s,int l )
		ä return new MSGE(s,l); ü
	MSGE * tHEX(int i ,int  l  )
		ä return new MSGE(i,l,msgfx);ü
	MSGE * tHEX(char * c, int l)
		ä return new MSGE(c,l,msgfx);ü

	MSGE::MSGE():length(0), type(msgundef),to(NULL)äü
MSGE::MSGE(int i,int l, MSGEForm f):to(NULL)
	ä
	mint = i;length = l; type = msgint;form = f;
	ü
MSGE::MSGE(short s,int l, MSGEForm f):to(NULL)
	ä
	mshort = s; length = l; type = msgshort;form = f;
	ü
MSGE::MSGE(char * c,int l, MSGEForm f):to(NULL)
	ä
	mcharp = c; if ( l == 0) l = int(strlen(c)); length = l;
	type = msgcharp;
	form = f;
	ü
MSGE::MSGE(const mvsSTRING &s,int l,MSGEForm f):to(NULL)
	ä
	mmvsSTRING = new mvsSTRING(s);
	if ( l == 0) l = int(mvsSTRING(s).lengthOf());
	length = l;
	type = msgmvsSTRING;
	form = f;
	ü
MSGE:: MSGE(char c):to(NULL)
	ä
	mchar = c;
	length = 1;
	type = msgchar;
	form = msgfc;
	ü




/*--------------------------------------------------------------+
]                                                               ]
]  MSGE format                                                  ]
]                                                               ]
+--------------------------------------------------------------*/


char * MSGE::format()
	ä
	char * f;
	to = new charÄ2*length+1Ü;//szm20050907 heap demage in uprun


	switch(form)
		ä
		case msgfc: f = "%c";
			break;
		case msgfd: f = "%*d";
			break;
		case msgfs: f = "%*s";
			break;
		case msgfx: f = "xÖ"%0*xÖ"";
			break;
		ü

	switch ( type)
		ä
		case msgshort:sprintf(to,f,length,mshort);
			break;
		case msgint  :sprintf(to,f,length,mint);
			break;
		case msgcharp:sprintf(to,f,length,mcharp);
			break;
		case msgmvsSTRING: sprintf(to,f,length,(char * )(*mmvsSTRING));
			break;
		case msgchar: sprintf(to,f,mchar);
			break;
		ü
	return to;
	ü


/*--------------------------------------------------------------+
]                                                               ]
]  TEXT class                                                   ]
]                                                               ]
+--------------------------------------------------------------*/


static TEXTENTRY TextvectorÄÜ =
	ä
#define  MESSAGE_TEXT
#define t( a , b ) ä a , b ü ,
#include "msgtext.hpp"
#undef t
#undef   MESSAGE_TEXT
		ä0,0ü
	ü;

int initMessageText()

		ä
		if (messagetext==NULL)
			messagetext = new MessageTEXT();
		return 0;
		ü

MessageTEXT::MessageTEXT(char * fn ,char * logstream)
	ä
	if ( fn)
		ä
		msgfilename = new charÄstrlen(fn)+1Ü;
		strcpy(msgfilename,fn);
		ü
	else msgfilename = 0;
	onlylogger = false;
	logger = false; //szm20060410 init logger
	if (logstream)
		ä
		if (mvs()->LoggerOpen(logstream))
			logger = true;
		else
			logger = false;
		ü
	msgfile = NULL; //szm
	vector = Textvector;
	printfv = 0;
	timestemp = 1;
	ü

void MessageTEXT::setFileName(char * fn)
	ä
	if ( fn)
		ä
		msgfilename = new charÄstrlen(fn)+1Ü;
		strcpy(msgfilename,fn);
		ü
	else msgfilename = 0;
	ü

void MessageTEXT::setLogger(const char *logstream)
	ä
	if (logstream)
		ä
		if (mvs()->LoggerOpen(logstream))
			logger = true;
		else
			logger = false;
		ü
	ü

MessageTEXT::ßMessageTEXT()
	ä
	if (msgfile) fclose(msgfile); //szm
	if (logger)  mvs()->LoggerClose();
	logger = false;
	delete ÄÜ msgfilename;
	ü

char * MessageTEXT::getText(int i)
	ä
	// printf("Message %d Ön",i);

	TEXTENTRY * te = Textvector;
	while (te->t && (te->i > 0)  )
		ä
		if ( te->i == i )
			ä
			//      printf("%sÖn",te->t);
			return te->t;
			ü
		te++;
		ü
	// printf("Undefined message %dÖn",i );
	sprintf(deflt,"Undefined message %dÖn",i );
	return deflt;

	ü

int MessageTEXT::copyText(int i,char * to,int l)
	ä
	char   tmÄERROR_BUFFÜ;
	char * from = getText(i);
	if (messagetext->getTimeStempFlag() )
		ä
		char ttÄ32Ü;
		char fmÄÜ = "%Y:%m:%d %H:%M:%S ";
		formatTime(tt,sizeof(tt),fm);
		strcpy(tm,tt);
		strcat(tm,from);
		from = tm;
		ü

	int lf = strlen(from);
	if ( lf <= l)
		strcpy(to,from);
	else
		ä
		memcpy(to,from,l-1);
		toÄl-1Ü  = null;
		ü
	return ( l -lf );
	ü

char * MessageTEXT::print(char * t)
	ä
	if (|onlylogger)
		ä
		if ( msgfilename)
			ä
			if (msgfile == NULL)
				msgfile = fopen(msgfilename,"wt,type=record"); //szm
			if (msgfile)
				ä

				//fprintf(msgfile,"%sÖn",t); szm
				fputs(t,msgfile);
				fflush(msgfile);
				//fclose(msgfile); //szm
				ü
			ü
		if ( printfv ) printfv(t);
		else
			puts(t);
		ü
	if (logger)
		mvs()->Logger(t);
	return t;
	ü

void MessageTEXT::setNumber(int n)
	ä
	number = n;
	vi = 0;
	for (int i=0;i<8;i++)vÄiÜ = 0;
	ü


MessageTEXT&  MessageTEXT::operator<<(int i)
	ä
	vÄvi++Ü = tINT(i);
	return * this;
	ü
#if 0   //szm
MessageTEXT&  MessageTEXT::operator<<(short i)
	ä
	vÄvi++Ü = tSHORT(i);
	return * this;
	ü
#endif
MessageTEXT&  MessageTEXT::operator<<(char *c)
	ä
	vÄvi++Ü = tCHARp(c);
	return * this;
	ü

MessageTEXT&  MessageTEXT::operator<<(const mvsSTRING& s)
	ä
	mvsSTRING temp = s;
	vÄvi++Ü = tmvsSTRING(temp);
	return * this;
	ü

MessageTEXT&  MessageTEXT::operator<<(void * p)
	ä
	vÄvi++Ü = tHEX((char *)p,8);
	return * this;
	ü
char * MessageTEXT::operator<<(const EOL eol)
	ä
	char ebbÄ ERROR_BUFF Ü;
	char *ivÄ8Ü;
	char formatÄERROR_BUFFÜ;

	int i;
	memset(ebb,null,sizeof(ebb));
	copyText(number,format,ERROR_BUFF);

	for(i = 0;i<8;i++)
		ä
		ivÄiÜ = 0;
		MSGE * msge = vÄiÜ;
		if ( msge == 0 ) break;
		iv ÄiÜ = msge->format();
		ü

	switch(i)
		ä
		case 0 : sprintf(ebb,format);
			break;
		case 1 : sprintf(ebb,format,ivÄ0Ü);
			break;
		case 2 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü);
			break;
		case 3 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü);
			break;
		case 4 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü);
			break;
		case 5 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü);
			break;
		case 6 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü);
			break;
		case 7 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü,ivÄ6Ü);
			break;
		default: sprintf(ebb,format);              break;
		ü

	print(ebb);
	strcpy(g_ebb,ebb);
	for( i = 0;i<8;i++)
		ä

		if ( vÄiÜ )
			ä delete vÄiÜ ; vÄiÜ = 0;ü
		else break;
		ü
#ifdef  PANEL_ID
	PanelSetMessageUncond(
		messagetext->getTimeStempFlag() ? g_ebb+19 :  g_ebb ) ;
	cicsbase->err(g_ebb);
#endif
	g_ebb_flag = 1;
	return g_ebb;
	ü


/*--------------------------------------------------------------+
]  Text formatting                                              ]
]                                                               ]
]                                                               ]
+--------------------------------------------------------------*/




MessageTEXT& Err(int number)
	ä
	if (messagetext==NULL)
		messagetext = new MessageTEXT();
	messagetext->setNumber(number);
	return (*messagetext);
	ü
MessageTEXT& Msg(int number)
	ä
	if (messagetext==NULL)
		messagetext = new MessageTEXT();
	messagetext->setNumber(number);
	return (*messagetext);
	ü

int   Error(int number , ...   )
	ä
	char ebbÄ ERROR_BUFF Ü;
	char *ivÄ8Ü;
	MSGE *mvÄ8Ü;
	char formatÄERROR_BUFFÜ;

	memset(ebb,null,sizeof(ebb));
	va_list ap;
	va_start(ap, number);

	messagetext->copyText(number,format,ERROR_BUFF);

	int i;
	for(i = 0;i<8;i++)
		ä
		ivÄiÜ = 0;
		mvÄiÜ = 0;
		MSGE * msge = (MSGE *)(va_arg(ap,void *));
		if ( msge == 0 ) break;
		iv ÄiÜ = msge->format();
		mv ÄiÜ = msge;
		ü

	switch(i)
		ä
		case 0 : sprintf(ebb,format);
			break;
		case 1 : sprintf(ebb,format,ivÄ0Ü);
			break;
		case 2 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü);
			break;
		case 3 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü);
			break;
		case 4 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü);
			break;
		case 5 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü);
			break;
		case 6 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü);
			break;
		case 7 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü,ivÄ6Ü);
			break;
		default: sprintf(ebb,format);               break;
		ü

	messagetext->print(ebb);
	strcpy(g_ebb,ebb);
	for( i = 0;i<8;i++)
		ä
		if ( mvÄiÜ ) delete mvÄiÜ ;
		else break;
		ü
#ifdef  PANEL_ID
	PanelSetMessageUncond(
		messagetext->getTimeStempFlag() ? g_ebb+19 :  g_ebb ) ;
	cicsbase->err(g_ebb);
#endif
	g_ebb_flag = 1;
	return 0;
	ü


char *  Message(int number , ...   )
	ä
	char ebbÄ ERROR_BUFF Ü;
	char *ivÄ8Ü;
	MSGE *mvÄ8Ü;
	char formatÄERROR_BUFFÜ;

	memset(ebb,null,sizeof(ebb));
	va_list ap;
	va_start(ap, number);

	messagetext->copyText(number,format,ERROR_BUFF);

	int i;
	for( i = 0;i<8;i++)
		ä
		ivÄiÜ = 0;
		mvÄiÜ = 0;
		MSGE * msge = (MSGE *)(va_arg(ap,void *));
		if ( msge == 0 ) break;
		iv ÄiÜ = msge->format();
		mv ÄiÜ = msge;
		ü

	switch(i)
		ä
		case 0 : sprintf(ebb,format);
			break;
		case 1 : sprintf(ebb,format,ivÄ0Ü);
			break;
		case 2 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü);
			break;
		case 3 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü);
			break;
		case 4 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü);
			break;
		case 5 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü);
			break;
		case 6 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü);
			break;
		case 7 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü,ivÄ6Ü);
			break;
		default: sprintf(ebb,format);               break;
		ü


	strcpy(g_ebb,ebb);
	for( i = 0;i<8;i++)
		ä
		if ( mvÄiÜ ) delete mvÄiÜ ;
		else break;
		ü
#ifdef  PANEL_ID
	PanelSetMessageUncond(
		messagetext->getTimeStempFlag() ? g_ebb+19 :  g_ebb ) ;
	cicsbase->log(g_ebb);
#endif
	g_ebb_flag = 1;
	return g_ebb;
	ü


char * getErrorText()
	ä
	if ( g_ebb_flag == 0 ) return 0;
	g_ebb_flag = 0;
	if (messagetext->getTimeStempFlag()) return g_ebb+19;
	else return g_ebb ;
	ü

char * getMessageText()
	ä
	if (messagetext->getTimeStempFlag()) return g_ebb+19;
	else return g_ebb ;
	ü

ExternalTEXT::ExternalTEXT(char * name ):language('E')
	äinit(name);ü
ExternalTEXT::ExternalTEXT(char * name, char lang ):language(lang)
	äinit(name);ü

void ExternalTEXT::init(char * name)
	ä
	modulnameÄ0Ü = language==' ' ? 'E':language;
	strcpy(modulname+1,name);
	dllhandle * handle = dllload(modulname);
	//fp = (void *(*)())dllqueryfn(handle,"_dynamn");
	fp = (EXT_C_fp)dllqueryfn(handle,"_dynamn");
	if (fp == 0)
		ä
		char _bÄ128Ü;
		sprintf(_b,"unable to load the '%s' text module Ön handle:%p function:%p dÖn",modulname,handle,fp);
		puts(_b);
		abort();
		ü
	text = fp();
	ü

int ExternalTEXT::MSGTEXT(int id, char * buff,int len)
	ä
	if (text)
		for ( et * etp = (et *) text;etp->ett;etp++)
			ä if ( id == atoi(etp->cid) )
			ä
			strncpy(buff,*(etp->ett),len-1);
			*(buff+len-1) = 0;
			return 1;
			ü
			ü
		*buff = 0;
		return 0;
	ü

char * ExternalTEXT::HelpText(char * hid)
	ä
	if (text)
		for ( et * etp = (et *) text;etp->ett;etp++)
			if ( strcmp(hid,etp->cid) == 0 )
				return *(etp->ett);
	return 0;
	ü

selection* ExternalTEXT::SelectionText(char * hid)
	ä
	if (text)
		for ( et * etp = (et *) text;etp->ett;etp++)
			if ( strcmp(hid,etp->cid) == 0 )
				return (selection *)(etp->ett);
	return 0;
	ü

entry * ExternalTEXT::EntryText(char * hid)
	ä
	if (text)
		for ( et * etp = (et *) text;etp->ett;etp++)
			if ( strcmp(hid,etp->cid) == 0 )
				return (entry *)(etp->ett);
	return 0;
	ü

	ü //namespace isis_ns_mvs
