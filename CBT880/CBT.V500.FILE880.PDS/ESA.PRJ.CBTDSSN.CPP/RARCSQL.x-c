#include "isisdef.h"
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include "rarcsql.hpp"
#include "jobenv.hpp"
#include "casmif.hpp"
#include <sys/time.h>

ISIS_EXT_C typedef int  (* ppdberror)(char *); //szm
ppdberror  pdberror;                           //szm20050413

extern "C" int locDBError(char *)
ä
	 return 0;
ü

#ifndef unsigned
#define unsigned
#endif


static char bhexÄ24Ü;

char * hex(int v,int l)
ä
 sprintf(bhex,"%*.*xÖn",2*l,2*l,v);
 return bhex;
ü

typedef struct
              ä short   SQLPLLEN;
                short   SQLFLAGS;
                short   SQLCTYPE;
                char    SQLPROGNÄ8Ü;
                short   SQLTIMESÄ4Ü;
                short   SQLSECTN;
                char   *SQLCODEP;
                char   *SQLVPARM;
                char   *SQLAPARM;
                short   SQLSTNUM;
                short   SQLSTYPE;
              ü SQLPLIST;
typedef struct
              ä short    SQLTYPE;
                short    SQLLEN;
                char    *SQLADDR;
                char    *SQLIND;
              ü SQLELTS;
typedef SQLELTS     *SQLELTS_PTR;
char    SQLTEMPÄ 19 Ü ;
char    DSNPNMÄ 57 Ü ;

/***$$$
  EXEC SQL INCLUDE SQLCA
$$$***/
#ifndef SQLCODE
struct sqlca
  ä unsigned  char     sqlcaidÄ8Ü;
              long     sqlcabc;
              long     sqlcode;
              short    sqlerrml;
    unsigned  char     sqlerrmcÄ70Ü;
    unsigned  char     sqlerrpÄ8Ü;
              long     sqlerrdÄ6Ü;
    unsigned  char     sqlwarnÄ11Ü;
    unsigned  char     sqlstateÄ5Ü;
            ü ;
#define SQLCODE  sqlca.sqlcode
#define SQLWARN0 sqlca.sqlwarnÄ0Ü
#define SQLWARN1 sqlca.sqlwarnÄ1Ü
#define SQLWARN2 sqlca.sqlwarnÄ2Ü
#define SQLWARN3 sqlca.sqlwarnÄ3Ü
#define SQLWARN4 sqlca.sqlwarnÄ4Ü
#define SQLWARN5 sqlca.sqlwarnÄ5Ü
#define SQLWARN6 sqlca.sqlwarnÄ6Ü
#define SQLWARN7 sqlca.sqlwarnÄ7Ü
#define SQLWARN8 sqlca.sqlwarnÄ8Ü
#define SQLWARN9 sqlca.sqlwarnÄ9Ü
#define SQLWARNA sqlca.sqlwarnÄ10Ü
#define SQLSTATE sqlca.sqlstate
#endif
struct sqlca sqlca;


/***$$$
  EXEC SQL INCLUDE SQLDA
$$$***/
#ifndef SQLDASIZE
struct sqlda
   ä  unsigned char   sqldaidÄ8Ü;
               long   sqldabc;
               short  sqln;
               short  sqld;
               struct sqlvar
                  ä short          sqltype;
                    short          sqllen;
                    unsigned char *sqldata;
                    short         *sqlind;
                    struct sqlname
                       ä short         length;
                         unsigned char dataÄ30Ü;
                       ü sqlname;
                  ü sqlvarÄ1Ü;
            ü ;
#define SQLDASIZE(n) Ö
   ( sizeof( sqlda) + ((n)-1) * sizeof( sqlvar) )
#endif


/***$$$
  EXEC SQL BEGIN DECLARE SECTION
$$$***/


  struct ä
  short len;
  char  valueÄ512Ü;
  ü prepare;


/***$$$
  EXEC SQL END DECLARE SECTION
$$$***/




const char * IDENTIFY           = "IDENTIFY          ";
const char * SIGNON             = "SIGNON            ";
const char * CREATE_THREAD      = "CREATE THREAD     ";
const char * TERMINATE_THREAD   = "TERMINATE THREAD  ";
const char * TERMINATE_IDENTIFY = "TERMINATE IDENTIFY";
const char * CONNECT            = "CONNECT           ";

ARCHSQL::ARCHSQL()
ä
  status = 0;
  secb = tecb = 0;
  ribptr = 0;
  eibptr = 0;

  memset(ssnm,' ',4);
  memset(plan,' ',8);
  memset(collection,' ',sizeof(collection));
  memset(reuse,' ',sizeof(reuse));  //That makes it INITIAL
  messagetext = new MessageTEXT(0); //ZA030519
  JOBENV job("RARCSQL");
  memset(correlation_id,' ',sizeof(correlation_id));
  strcpy(correlation_id,job.jobId);
  memset(accounting_token,' ',sizeof(accounting_token));
  sprintf(accounting_token,"%s%s",(char *)job.jobName,(char*)job.jobId); //ZA090713
  memset(accounting_interval,' ',sizeof(accounting_interval));
  if (pdberror==NULL)     //szm
			pdberror=locDBError;
	// first call initializes list of load module entry points
  rrs = SQLASM();
ü

ARCHSQL::ßARCHSQL()
ä
  if ( status )
  call(Disconnect);
  // second call clears list of load module entry points
  SQLASM();
ü

int ARCHSQL::call(CallType t)
ä
  int msg = 0;
  retcode = reasoncode = 0;
  switch(t)
  ä
  case Connect:
    if (rrs)
    ä
      rc = DSNALI(IDENTIFY,
            &ssnmÄ0Ü,
            &ribptr,&eibptr,&tecb,&secb,
            &retcode,&reasoncode);
			if (rc<0) //szm20050829 second connect returns -1 or -2 if parm error
				ä
				if (rc == -1)
					return 1;
				else
					assert("SSQLASM parm error"|=0);
				ü
      if ( retcode NEQ 0)
      ä
      	//ZA030519 97.. message numbers changed to 98.. message numbers
        pdberror(Msg(9821)<<IDENTIFY<<
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        (int)retcode<<hex(reasoncode,4)<<eol);
        #else
        long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
      ü
    ü
    else
    ä
      rc = DSNALI(CONNECT,
            &ssnmÄ0Ü,
            &tecb,&secb,&ribptr,&retcode,&reasoncode);
			if (rc<0) //szm20050829 second connect returns -1 or -2 if parm error
			ä
				if (rc == -1)
					return 1;
				else
					assert("SSQLASM parm error"|=0);
			ü
      if ( retcode NEQ 0)
      ä
        if (retcode NEQ 200 ]] reasoncode NEQ 0x00c10201u)
        ä
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        pdberror(Msg(9801)<<(int)retcode<<hex(reasoncode,4)<<eol);
        #else
        pdberror(Msg(9801)<<long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
      ü
      else //ZA050304 already connected
      ä
        status = 1;
        break;
      ü
     ü
   ü
  case Open:
  if (rrs)
  ä
      rc = DSNALI(SIGNON,
            &correlation_idÄ0Ü,
            &accounting_tokenÄ0Ü,
            &accounting_intervalÄ0Ü,
            &retcode,&reasoncode);

      if ( retcode NEQ 0)
      ä
        pdberror(Msg(9821)<<SIGNON<<
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        (int)retcode<<hex(reasoncode,4)<<eol);
        #else
        long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
      ü
      if (collectionÄ0Ü NEQ ' ' && collectionÄ0Ü NEQ  0)
        planÄ0Ü = '?';
      rc = DSNALI(CREATE_THREAD,
            &planÄ0Ü,
            &collectionÄ0Ü,
            &reuseÄ0Ü, //ToDo: 25777 Citibank
            &retcode,&reasoncode);

      if ( retcode NEQ 0)
      ä
        pdberror(Msg(9821)<<CREATE_THREAD<<
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        (int)retcode<<hex(reasoncode,4)<<eol);
        #else
        long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
      ü
  ü
  else
  ä
    rc = DSNALI("OPEN        ",
          &ssnmÄ0Ü,
          &planÄ0Ü,
          &retcode,&reasoncode);

    if ( retcode NEQ 0 )
    ä
      //#ifdef ISIS_PF_HOST_IBM //ZA050715
      #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
      pdberror(Msg(9811)<<(int)retcode<<hex(reasoncode,4)<<eol);
      #else
      pdberror(Msg(9811)<<long(retcode)<<hex(reasoncode,4)<<eol);
      #endif
      return 0;
    ü
  ü
  status = 1;
  break;
  case Close:
    if (rrs)
    ä
      rc = DSNALI(TERMINATE_THREAD,
            &retcode,&reasoncode);

      if ( retcode NEQ 0)
      ä
        pdberror(Msg(9821)<<TERMINATE_THREAD<<
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        (int)retcode<<hex(reasoncode,4)<<eol);
        #else
        long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
      ü
    ü
    else
    ä
      rc = DSNALI("CLOSE       ",
            "SYNC",
            &retcode,&reasoncode);

			if ( retcode NEQ 0)
      ä
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        pdberror(Msg(9812)<<(int)retcode<<hex(reasoncode,4)<<eol);
        #else
        pdberror(Msg(9812)<<long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
      ü
    ü
/***$$$
    EXEC SQL WHENEVER SQLERROR   GOTO SQLERROR
$$$***/


/***$$$
    EXEC SQL WHENEVER SQLWARNING GOTO SQLWARNING
$$$***/


/***$$$
    EXEC SQL WHENEVER NOT FOUND GOTO SQLNOTFOUND
$$$***/

   status = 1;
   break;
  case Disconnect:
  if (rrs)
  ä
      rc = DSNALI(TERMINATE_IDENTIFY,
            &retcode,&reasoncode);

      if ( retcode NEQ 0)
      ä
        pdberror(Msg(9821)<<TERMINATE_IDENTIFY<<
        //#ifdef ISIS_PF_HOST_IBM //ZA050715
        #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
        (int)retcode<<hex(reasoncode,4)<<eol);
        #else
        long(retcode)<<hex(reasoncode,4)<<eol);
        #endif
        return 0;
     ü
  ü
  else
  ä
    rc = DSNALI("DISCONNECT  ",
          &retcode,&reasoncode);

		if (retcode && (NOT ( retcode == 4 && reasoncode == 0x00c10824u)) )
    ä
      //#ifdef ISIS_PF_HOST_IBM //ZA050715
      #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
      pdberror(Msg(9802)<<(int)retcode<<(int)reasoncode<<eol);
      #else
      pdberror(Msg(9802)<<long(retcode)<<long(reasoncode)<<eol);
      #endif
      return 0;
    ü
    status = 0;
   ü
   status = 0;
   return 1;
    break;
  case Prepare:

/***$$$
    EXEC SQL PREPARE S1 FROM :prepare
$$$***/
  ä
  SQLPLIST SQLPLIST4 =
  //ä40, 8192, 35, "ARCHSQL ", 0, 0, 0, 0,
  ä40, 8192, 35, "ARCHSQL", 0, 0, 0, 0,
   1, 0, 0, 0, 70, 14ü;
  SQLELTS_PTR SQLELTS_PTR4;
  SQLPLIST4.SQLVPARM = (char *) &prepare;
  SQLPLIST4.SQLCODEP = (char *) &sqlca;
  SQLPLIST4.SQLTIMESÄ 0 Ü = 0x15EC;
  SQLPLIST4.SQLTIMESÄ 1 Ü = 0xE8EE;
  SQLPLIST4.SQLTIMESÄ 2 Ü = 0x0228;
  SQLPLIST4.SQLTIMESÄ 3 Ü = 0x99B4;
  DSNHLI ( (unsigned int * ) &SQLPLIST4);
  ü
  if (SQLCODE < 0) goto  SQLERROR;
  if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
      SQLWARN0 == 'W') goto SQLWARNING;
  if (SQLCODE == 100)  goto  SQLNOTFOUND;

    status = 1;
    break;
  case Execute:

/***$$$
    EXEC SQL EXECUTE S1
$$$***/
  ä
  SQLPLIST SQLPLIST5 =
  //ä40, 0, 30, "ARCHSQL ", 0, 0, 0, 0,
  ä40, 0, 30, "ARCHSQL", 0, 0, 0, 0,
   1, 0, 0, 0, 74, 15ü;
  SQLELTS_PTR SQLELTS_PTR5;
  SQLPLIST5.SQLCODEP = (char *) &sqlca;
  SQLPLIST5.SQLTIMESÄ 0 Ü = 0x15EC;
  SQLPLIST5.SQLTIMESÄ 1 Ü = 0xE8EE;
  SQLPLIST5.SQLTIMESÄ 2 Ü = 0x0228;
  SQLPLIST5.SQLTIMESÄ 3 Ü = 0x99B4;
  DSNHLI ( (unsigned int * ) &SQLPLIST5);
  ü
  if (SQLCODE < 0) goto  SQLERROR;
  if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
      SQLWARN0 == 'W') goto SQLWARNING;
  if (SQLCODE == 100)  goto  SQLNOTFOUND;

    status = 1;
    break;
  case Commit:

/***$$$
    EXEC SQL COMMIT
$$$***/
  ä
  SQLPLIST SQLPLIST6 =
  //ä40, 0, 150, "ARCHSQL ", 0, 0, 0, 0,
  ä40, 0, 150, "ARCHSQL", 0, 0, 0, 0,
   0, 0, 0, 0, 78, 310ü;
  SQLELTS_PTR SQLELTS_PTR6;
  SQLPLIST6.SQLCODEP = (char *) &sqlca;
  SQLPLIST6.SQLTIMESÄ 0 Ü = 0x15EC;
  SQLPLIST6.SQLTIMESÄ 1 Ü = 0xE8EE;
  SQLPLIST6.SQLTIMESÄ 2 Ü = 0x0228;
  SQLPLIST6.SQLTIMESÄ 3 Ü = 0x99B4;
  DSNHLI ( (unsigned int * ) &SQLPLIST6);
  ü
  if (SQLCODE < 0) goto  SQLERROR;
  if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
      SQLWARN0 == 'W') goto SQLWARNING;
  if (SQLCODE == 100)  goto  SQLNOTFOUND;

    status = 1;
    break;
  case Rollback:

/***$$$
    EXEC SQL ROLLBACK
$$$***/
  ä
  SQLPLIST SQLPLIST7 =
  //ä40, 0, 155, "ARCHSQL ", 0, 0, 0, 0,
  ä40, 0, 155, "ARCHSQL", 0, 0, 0, 0,
   0, 0, 0, 0, 82, 277ü;
  SQLELTS_PTR SQLELTS_PTR7;
  SQLPLIST7.SQLCODEP = (char *) &sqlca;
  SQLPLIST7.SQLTIMESÄ 0 Ü = 0x15EC;
  SQLPLIST7.SQLTIMESÄ 1 Ü = 0xE8EE;
  SQLPLIST7.SQLTIMESÄ 2 Ü = 0x0228;
  SQLPLIST7.SQLTIMESÄ 3 Ü = 0x99B4;
  DSNHLI ( (unsigned int * ) &SQLPLIST7);
  ü
  if (SQLCODE < 0) goto  SQLERROR;
  if (SQLCODE > 0 && SQLCODE NEQ 100 ]]
      SQLWARN0 == 'W') goto SQLWARNING;
  if (SQLCODE == 100)  goto  SQLNOTFOUND;

    status = 1;
    break;
  default :
    status = 0;
    break;
   ü
  return status;
  SQLERROR: msg = 9804;
  //   err = ERROR;
       goto common;
  SQLWARNING: msg = 9805;
  //   err = WARNING;
       goto common;
  SQLNOTFOUND: msg = 9806;
  //   err = WARNING;
  common:
    //#ifdef ISIS_PF_HOST_IBM //ZA050715
    #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
    pdberror(Msg(msg)<<(int)SQLCODE<<eol);
    #else
    pdberror(Msg(msg)<<SQLCODE<<eol);
    #endif
    rc = DSNTIAR(&sqlca,&error_message,&data_len);
    if ( rc )
      //#ifdef ISIS_PF_HOST_IBM //ZA050715
      #if defined(ISIS_PF_MI) ]] defined(ISIS_PF_MU)
      pdberror(Msg(9807)<<(int)rc<<eol);
      #else
      pdberror(Msg(9807)<<long(rc)<<eol);
      #endif
    else
    ä
      for(int i = 0;i<data_dim;i++)
      pdberror(Msg(9808)<<mvsSTRING(error_message.error_textÄiÜ,data_len)<<eol);
    ü
  return status;
ü

void ARCHSQL::setDynamicSQL(char * s)
ä
  prepare.len = strlen(s);
  strcpy(prepare.value,s);
ü

//KV20050216 moved from isismisc.cpp
static unsigned char tUKÄÜ =
     "ABCDEFGHIJKLMNOPQRSTUVWXYZ"Ö
         "0123456789#$"Ö
         "abcdefghijklmnopqrstuvwxyz";
#define UKEY_MAJOR "STRTUKEY"
#define UKEY_MINOR "ISIS_UKEY"

void getUniqueKey(char * t)
ä
  char _dummy=0;                     //HL??
  struct timeval tv;
  struct timezone tz;
  int i;
  ENQ(UKEY_MAJOR,UKEY_MINOR,E,8,STEP,NONE);
#if defined(MU_STANDALONE) == 0
  PCSSleep(1);
#else
	sleep(1);
#endif
  i = gettimeofday(&tv,&tz);
  DEQ(UKEY_MAJOR,UKEY_MINOR,8,STEP,NONE);
  memcpy((void*)t,(void*)&tv.tv_sec,4);
  memcpy((void*)&tÄ4Ü,(void*)&tv.tv_usec,4);
  for (i = 0;i<8;i++)
    if (NOT tÄiÜ)
      tÄiÜ = 64; //change nulls to EBCDIC blanks
  tÄ8Ü = _dummy;

ü
