#include "isisdef.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>
#include <fcntl.h>

#include <assert.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>

#include <unistd.h>
#ifndef O_BINARY
#define O_BINARY 0
#endif
#include "dssfile.hpp"
#include "dssmain.hpp"
#include "jobenv.hpp"
#include "subtask.hpp"
#include "msgmgr.hpp"
#include "casmif.hpp"

int _edc_add_errno2 = setenv("_EDC_ADD_ERRNO2","1",1);
static int compressMethod = (getenv(KEYWORD_COMPR)?
														 atoi(getenv(KEYWORD_COMPR)):-1);
static  size_t MAX_IOLENGTH  = (getenv(KEYWORD_MAXLENGTH))?atoi(getenv(KEYWORD_MAXLENGTH))*1024*1024:1024*1024*512;

DSSFILE::DSSFILE(const char * n,DSSFILE_TYPE t,size_t max):
mERROR(),
fileName(n), type(t), buff_size(max)
	ä
	file    = NULL;
	count = compressedCount = 0;
	seqNo = 0;
	buff = (UCHAR *) malloc(max);
	if (buff == NULL)
		Error(Msg(10000+1)<<short(max)<<eol,Abort);
	zStream = (z_streamp)malloc(sizeof(z_stream));
	memset(zStream,0,sizeof(z_stream));
	fileName.strip();
	init();
	ü

DSSFILE::ßDSSFILE()
	ä
	term();
	if (zStream)
		free(zStream);
	zStream = NULL;
	if (buff)
		free(buff);
	buff = NULL;
	ü

int DSSFILE::init()
	ä
	char _fileNameÄ1024Ü;
	char _genFileNameÄ1024Ü;
	if (seqNo)
		sprintf(_fileName,"%s.%d",(char *)fileName,seqNo);
	else
		sprintf(_fileName,"%s",(char *)fileName);
	Msg(10000+13)<<_fileName<<eol;
	seqNo+=1;

	JOBENV::DEBUG(1,_fileName);

	int  flag = O_RDONLY;
	ioLength = 0;
	mode_t mode = 0;
	mode =  S_IRUSR ] S_IWUSR ] S_IXUSR ]
		S_IRGRP ] S_IWGRP ] S_IXGRP ]
		S_IROTH ] S_IWOTH ] S_IXOTH;
	JOBENV::DEBUG(1,int(mode));
	if (type == DSSFILE_output)
		ä
		flag = O_WRONLY+O_CREAT;
		file = open(genOpenName(_fileName,_genFileName),flag+O_BINARY,flag,mode);
		if (file NEQ -1)
			close(file);
		int rc= chmod(genOpenName(_fileName,_genFileName),mode);
		JOBENV::DEBUG(1,rc);

		ü
	file = open(genOpenName(_fileName,_genFileName),flag+O_BINARY,flag);
	if (file==-1&&seqNo>1&&type==DSSFILE_input)
		return 0;
	if (file == -1)
		ä
		perror(_fileName);
		Error(Msg(10000+2)<<_fileName<<flag<<mode<<strerror(errno)<<eol,Abort);
		ü

	if (type == DSSFILE_input)
		ä
		if ( (fileF = fdopen(file,"rb")) == NULL)
			ä
			perror(_fileName);
			Error(Msg(10000+12)<<_fileName<<"rb"<<strerror(errno)<<eol,Abort);
			ü
		zStream->next_in    = (Bytef*)buff;
		zStream->avail_in   = 0;
		if (seqNo==1)
			ä
			if ((zRc = inflateInit(zStream)) NEQ Z_OK)
				Error(Msg(10000+3)<<"inflateInit"<<zRc<<eol,Abort);
			ü
		else
			if ((zRc = inflateReset(zStream)) NEQ Z_OK)
				Error(Msg(10000+3)<<"inflateReset"<<zRc<<eol,Abort);

		ü
	else
		ä
		if ((fileF = fdopen(file,"wb")) == NULL)
			ä
			perror(_fileName);
			Error(Msg(10000+12)<<_fileName<<"wb"<<strerror(errno)<<eol,Abort);
			ü
		zStream->next_out    = (Bytef*)buff;
		zStream->avail_out   = buff_size;
		if (seqNo==1)
			ä
			if ((zRc =deflateInit(zStream,compressMethod)) NEQ Z_OK)
				Error(Msg(10000+3)<<"deflateInit"<<zRc<<eol,Abort);
			ü
		else
			if ((zRc =deflateReset(zStream)) NEQ Z_OK)
				Error(Msg(10000+3)<<"deflateReset"<<zRc<<eol,Abort);
		ü
	return 1;
	ü

int DSSFILE::term()
	ä
	JOBENV::DEBUG(1,"term");
	if(type ==DSSFILE_output&&fileF)
		flush();
	if (fileF)
		fclose(fileF);
	fileF = NULL;
	return 1;
	ü

int DSSFILE::_put(void * b,size_t l,int flush)
	ä
	if (iserror())
		return 0;
	int send_size;
	//printf("Put%dÖn",l);
	if (flush==Z_NO_FLUSH)
		ä
		zStream->next_in    = (Bytef*)b;
		zStream->avail_in   =  l;
		send_size = buff_size;
		ü
	ok = 0;
	while(NOT ok)
    switch((zRc = deflate(zStream,flush)))
			ä
			case Z_NEED_DICT:
				Error(Msg(10000+3)<<"deflate"<<zRc<<eol,Continue);
				ok = -1;
				break;
			case Z_STREAM_END:
				send_size = buff_size - zStream->avail_out;
				if (send_size NEQ int(fwrite(buff,1,send_size,fileF)))
					ä   ok = -1;
				Error(Msg(10000+3)<<"write"<<errno<<eol,Abort);
					ü
				else
					ä
					//printf("Write Stream End%dÖn",send_size);
					ioLength += l;
					count += send_size;
					compressedCount = zStream->total_out;
					ü
				ok = 1;
				break;
			case Z_OK:
				if(zStream->avail_out == 0)
					ä
					send_size = buff_size - zStream->avail_out;
					if (send_size NEQ int(fwrite(buff,1,send_size,fileF)))
						ä   ok = -1;
					Error(Msg(10000+3)<<"write"<<errno<<eol,Abort);
						ü
					else
						ä
						//printf("Write %dÖn",send_size);
						ioLength += l;
						zStream->next_out  = (Bytef*)buff;
						zStream->avail_out = buff_size;
						count += send_size;
						compressedCount = zStream->total_out;
						ü
					ü
				if(zStream->avail_in == 0&&l>0)
					ok = 1;
				break;
			default:
				Error(Msg(10000+3)<<"deflate"<<zRc<<eol,Continue);
				ok = -1;
				break;
			ü
	JOBENV::DEBUG(1,ioLength);
	if (ioLength>MAX_IOLENGTH&&l==4)
		ä
		ioLength = 0;
		term();
		if (init()==0)
			Error(Msg(10000+3)<<"deflate"<<zRc<<eol,Abort);
		ü
	return(ok>0?1:0);
	ü

int DSSFILE::_get(void *b,size_t l,int flush)
	ä
	if (iserror()]]fileF==NULL)
		return 0;
	int recv_size = -1;
	ok = 0;
	zStream->next_out  = (Bytef*)b;
	zStream->avail_out = l;
	//printf("Get%dÖn",l);
	while(NOT ok)
		ä
		if (zStream->avail_in == 0 )
			ä
			recv_size = fread(buff,1,buff_size,fileF);
			//printf("Read %dÖn",recv_size);

			if (recv_size < 0)
				ä  ok = -1;
			Error(Msg(10000+3)<<"read"<<errno<<eol,Continue);
				ü
			zStream->avail_in = recv_size;
			zStream->next_in  =(Bytef*)buff;
			if (recv_size==0)
				flush=Z_FINISH;
			ü
    if (NOT ok) switch((zRc=inflate(zStream,flush)))
			ä
								case Z_NEED_DICT:
									Error(Msg(10000+3)<<"inflate"<<zRc<<eol,Continue);
									ok = -1;
									break;
								case Z_STREAM_END:
								case Z_BUF_ERROR:
								case Z_OK:
									if (recv_size == 0 )
										ä
										term();
										Bytef * _b = zStream->next_out;
										size_t _l  = zStream->avail_out;
										if (init()==0)
											return 0;
										zStream->next_out   = _b;
										zStream->avail_out  = _l;
										ü
									if (zStream->avail_out == 0)
										ok = 1;
									break;
								default:
									Error(Msg(10000+3)<<"inflate"<<zRc<<eol,Continue);
									ok = -1;
									break;
			ü
		ü
	count +=l;
	compressedCount = zStream->total_in;
	return(ok>0?1:0);
	ü

int DSSFILE::put(void * b,size_t l)
	ä
	if( _put((void *)&l,sizeof(size_t)) && _put(b,l))
		return 1;
	else
		return 0;
	ü

int DSSFILE::get(void *b)
	ä
	size_t l = 0;
	if (_get((void*)&l,sizeof(size_t)))
		ä
		if ( _get(b,l))
			return l;
		ü
	return 0;
	ü

int DSSFILE::flush()
	ä
	return(_put(0,0,Z_FINISH));
	ü

void DSSFILE::Error(char *,Error_Action a)
	ä
	if (a == Continue)
		return;
	else
		ä
		Msg(10000+9999)<<eol;
		abort();
		ü
	ü
