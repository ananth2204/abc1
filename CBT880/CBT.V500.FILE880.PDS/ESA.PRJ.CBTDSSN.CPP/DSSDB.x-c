#include "isisdef.h"
#include "merror.hpp"
#include "mvsbase.hpp"
#include "rarcsql.hpp" //szm20050125
#include "mchain.hpp"
#include "jobenv.hpp"
#include "dssmain.hpp"
#include "misc.hpp"
#include "subtask.hpp"
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>
#include <strings.h>
#define  _XOPEN_SOURCE_EXTENDED 1

#define assign(t,f) Ö
ä  t.len = Ö
  short(min(sizeof(t.arr),strlen((char *)f))); Ö
  strncpy(t.arr,(char *)f,t.len); Ö
ü

#define PUTDB2(n) Ö
	if (fileDB2)  Ö
	fprintf(fileDB2," %s:%*.*sÖn",#n,n.len,n.len,n.arr);


//#include "pardb2a.h"
// this header will be fix included

#ifndef O_BINARY
	#define O_BINARY 0
#endif

#define assign(t,f) Ö
ä                   Ö
  t.len = Ö
  short(min(sizeof(t.arr),strlen((char *)f))); Ö
  strncpy(t.arr,(char *)f,t.len); Ö
  ü

static const char fullQueryÄÜ =
" SELECT * FROM DSSDATASETS A "
" WHERE ( %m% ) AND "
" ( DATE(KEY) <= DATE('%d%') ) AND "
" ( "
" A.KEY =  "
" (SELECT MAX(B.KEY) FROM DSSDATASETS B WHERE A.DATASET = B.DATASET  "
" AND DATE(B.KEY) <= DATE('%d%') ) "
" ) " ;


EXEC SQL BEGIN DECLARE SECTION;
#include "dssdb.hpp"
EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLDA;
EXEC SQL INCLUDE SQLCA;
#define SQLCA sqlca
#define SQLDA sqlda
static bool _useDB2()
ä
if (getenv(KEYWORD_USEDB2) && strcasecmp(getenv(KEYWORD_USEDB2),"NO") == 0)
ä
    char wÄ128Ü;
    SQLINTERFACE::fileDB2 = fopen(genOpenName(KEYWORD_USEDB2_FILE,w),"w");
    Msg(10000+1003)<<eol;
    return false;
ü
else
    return true;
ü

char *      SQLINTERFACE::plan        = strdup(getenv(KEYWORD_DB_PLAN));
char *      SQLINTERFACE::subsystem   = strdup(getenv(KEYWORD_DB_SUBSYS));
char *      SQLINTERFACE::dSql        = initDynamicSql();
mCHAIN      DssJob::dssJobs;
mCHAIN      SQLINTERFACE::tasks;
bool        SQLINTERFACE::useDB2     = _useDB2();
FILE *      SQLINTERFACE::fileDB2    =  NULL;



ERROR_MESSAGE * SQLINTERFACE::error_message = new ERROR_MESSAGE();
SQLINTERFACE::SQLINTERFACE():mERROR()
ä
  tryToConnect();
ü

void SQLINTERFACE::tryToConnect()
ä


  char tÄ12Ü;
  sprintf(t,"%p",getTCB());
  if (tasks.search(t) == NULL)
      tasks.addlast(new TcbARCHSQL(t,connectDB()));
      JOBENV::DEBUG(1,t);
ü

ARCHSQL * SQLINTERFACE::connectDB()
ä
      ARCHSQL * archsql = new ARCHSQL();
      if (useDB2)
      ä
      if (subsystem==NULL) return NULL;
      ARCHSQL * archsql = new ARCHSQL();
      archsql->setSubSystem(subsystem);
      char _planÄÜ = "        ";
      memcpy(_plan,plan,strlen(plan));
      archsql->setPlan(_plan);
      if (NOT archsql->call(Connect))
       markerror();
      ü
      else
      ARCHSQL * archsql = (ARCHSQL*)1;
      error_message->error_len = short(data_dim*data_len);
      if (useDB2)
      Msg(10000+1000)<<subsystem<<plan<<tHEX(int(getTCB()))<<eol;
      return archsql;
ü

SQLINTERFACE::ßSQLINTERFACE()
ä
ü

void SQLINTERFACE::diag(char *t)
ä
 if (useDB2)
 ä
 Msg(10000+1001)<<t<<SQLCODE<<(char *)(sqlca.sqlerrmc)<<eol;
 int rc = DSNTIAR(&sqlca,error_message,&data_len);
 if ( rc )
  Msg(10000+9707)<<long(rc)<<eol;
 else
 ä
   for(int i = 0;i<data_dim;i++)
   if (NOT mvsSTRING(error_message->error_textÄiÜ,data_len).isEmpty())
      Msg(10000+9708)<<mvsSTRING(error_message->error_textÄiÜ,data_len)<<eol;
 ü
 ü
 //abort();//szm20090403 only message at DB error
 Msg(100000+9709)<<"diag"<<eol; //szm20090403 only message at DB error
ü

int SQLINTERFACE::commit()
ä
tryToConnect();
if (useDB2)
ä
  EXEC SQL COMMIT;
ü
  return 1;
ü

void SQLINTERFACE::Error(char * t,Error_Action a)
ä
// if (a = Abort)//szm20090403 only message at DB error
//    abort();   //szm20090403 only message at DB error
 Msg(100000+9709)<<"error"<<eol; //szm20090403 only message at DB error

ü

static char * initDynamicSql()
ä
  char bÄ32000Ü;
  char _genFileNameÄ1024Ü;
  size_t o = 0;
  FILE * sqlFile = NULL;
  if (SQLINTERFACE::useDB2 && access(KEYWORD_SQLFILE,R_OK)==0)
  sqlFile=  fopen(genOpenName(KEYWORD_SQLFILE,_genFileName),"r");
  if (sqlFile)
  while(fgets(b+o,sizeof(b)-o,sqlFile))
  ä
    o = strchr(b+o,'Ön')-b;
    if (o>0) *(b+o) = 0;
      else
    break;
  ü
  if (sqlFile)
    fclose(sqlFile);
  else
    strcpy(b,fullQuery);
  JOBENV::DEBUG(1,(char *)b);
  char * rb = new charÄstrlen(b)+1Ü;
  strcpy(rb,b);
  return (rb);
ü

//-------------------------------------------------------------------
//-------------------------------------------------------------------
//-------------------------------------------------------------------

DssJob::DssJob():
SQLINTERFACE(),
chainE(""),
mCHAIN(),
CHAINITER(this)
ä
char _genFileNameÄ1024Ü;
FILE * f = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
if (f==NULL)
ä
   init();
ü
else
		 fclose(f);

ü

DssJob::DssJob(const char * d):
SQLINTERFACE(),
chainE(""),
mCHAIN(),
CHAINITER(this)
ä
char _genFileNameÄ1024Ü;
FILE * f = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
if (f==NULL)
ä
   init();
ü
else
	 fclose(f);
 strcpy(dataset.arr,d);
 dataset.len = strlen(d);
ü
DssJob::DssJob(TIMESTAMP& ts):
SQLINTERFACE(),
chainE(ts.arr),
mCHAIN(),
CHAINITER(this)
ä
 init();
 memcpy(t.arr,ts.arr,ts.len);
 t.len = ts.len;
 if (useDB2)
 ä
 EXEC SQL WHENEVER SQLERROR GOTO SQLERROR;
 EXEC SQL SELECT KEY, JOBNAME, JOBNUMBER, DATASET
 INTO
 :timestamp,
 :jobName,
 :jobNumber,
 :dataset
 FROM DSSJOBS WHERE KEY = :t;
 if (SQLCODE == 100)
    markerror();
 ü
 char * c;
 dataset.arrÄsizeof(dataset.arr)-1Ü = 0;
 if ((c = strchr(dataset.arr,' ')))
     *c = 0;
 return;
SQLERROR:
  diag("SELECT");
  markerror();
ü


DssJob::ßDssJob()
ä
ü

void DssJob::init()
ä
   memset(&timestamp,0,sizeof(timestamp));
   assign(jobName,jobEnv->jobName);
   assign(jobNumber,jobEnv->jobId);
   assign(program,jobEnv->program);
   datasetcount = 0;
   memset(&joblog,0,sizeof(joblog));
   tryToConnect();
   if (useDB2)
   ä
   EXEC SQL SET :timestamp = CURRENT TIMESTAMP;
   SQLERROR:
   if (SQLCODE) diag("SET");
   ü
   else
   ä
   time_t temp;
   struct tm *timeptr;
   temp = time(NULL);
   timeptr = localtime(&temp);
   timestamp.len = strftime(timestamp.arr,sizeof(timestamp.arr)-1,"%Y-%m-%d-%H.%M.%S", timeptr);
   ü
   mvsSTRING _dataset;
   _dataset = mvsSTRING(getenv(KEYWORD_PREFIX)) + "/" +
             jobEnv->jobName + jobEnv->jobId +
             mvsSTRING(timestamp.arr,timestamp.len);
   dataset.len = short(_dataset.lengthOf());
   JOBENV::DEBUG(1,(char *)_dataset);
   memcpy(dataset.arr,(char *)_dataset,dataset.len+1);
ü

int DssJob::insert()
ä
   CHAINITER::reset();
   DssDataset * ds;
   DssDataset * dp;
   tryToConnect();
   if (useDB2)
   ä
   EXEC SQL WHENEVER SQLERROR GOTO SQLERROR;
   EXEC SQL INSERT INTO DSSJOBS
    VALUES(:timestamp,
           :jobName, :jobNumber, :program, :dataset, :joblog);
   ü
   else
   ä
     if (fileDB2)
     fprintf(fileDB2,"insert into DSSJOBS:Ön");
     PUTDB2(jobName);
     PUTDB2(jobNumber);
     PUTDB2(program);
     PUTDB2(dataset);
     PUTDB2(joblog);
    ü

   ds = (DssDataset *)CHAINITER::next();
   while(ds)
   ä
    if(NOT ds->insert())
     Error(Msg(10000+1002)<<ds->dataset.arr<<eol,Abort);
     dp = ds;
     ds = (DssDataset *)CHAINITER::next();
     mCHAIN::del(dp);
     delete dp;
   ü
  commit();
  return 1;
SQLERROR:
  diag("INSERT INTO DSSJOBS");
  markerror();
  return 0;
ü

static char todayÄ12Ü;

int DssJob::query(mCHAIN *m,char * date)
ä
   if (useDB2==false)
	return 0;
   CHAINITER iter(*m);
   mvsSTRING like(" ");
   chainE * mask = iter.next();
   if ( date == NULL )
   ä
     date = today;
     formatTime(today,sizeof(today),"%d.%m.%Y");
     JOBENV::DEBUG(1,(char *)date);
   ü
   int likeFlag = 0;
   while(mask)
   ä
      int i, j;
      for(i=0, j=0;mask->chainEidÄiÜ;i++)
      ä
         if(mask->chainEidÄiÜ NEQ '*')
            mask->chainEidÄj++Ü = mask->chainEidÄiÜ;
         else if (mask->chainEidÄi+1Ü NEQ '*')
         ä
            mask->chainEidÄj++Ü = '%';
            likeFlag = 1;
         ü
       ü
       if (mask->chainEidÄj-1Ü NEQ '%')
           mask->chainEidÄj++Ü = '%';
      mask->chainEidÄjÜ = 0;
      like = like + "A.DATASET LIKE '"+mvsSTRING(mask->chainEid)+"' ";
      if (mask->next)
         like = like + " OR ";
      mask = iter.next();
   ü
   JOBENV::DEBUG(1,(char *)like);
     ä
     char * pÄ8Ü;
     Msg(10000+122)<<dSql<<eol;
     size_t l = strlen(dSql);
     int j = 0;
     for(int i = 0;i<l&&j<8;i++)
       if (dSqlÄiÜ=='%' && dSqlÄi+2Ü == '%')
         ä
         switch (dSqlÄi+1Ü)
           ä
           case 'M':
           case 'm': pÄj++Ü = like;
             break;
           case 'D':
           case 'd': pÄj++Ü = date;
             break;
           default :
             JOBENV::Error(Msg(10000+121)<<dSqlÄiÜ<<eol,JOBENV::Abort);
           ü
           dSqlÄi+1Ü = 's';
         strcpy(dSql+i+2,dSql+i+3);
         l -= 2;
         ü
       switch(j)
         ä
         default:
         case 0:
         strcpy(dynamicSql.arr,dSql);
         break;
         case 1:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü);
         break;
         case 2:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü);
         break;
         case 3:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü);
         break;
         case 4:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü);
         break;
         case 5:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü,pÄ4Ü);
         break;
         case 6:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü,pÄ4Ü,
           pÄ5Ü);
         break;
         case 7:
         sprintf(dynamicSql.arr,dSql,pÄ0Ü,pÄ1Ü,pÄ2Ü,pÄ3Ü,pÄ4Ü,
           pÄ5Ü,pÄ6Ü);
         break;
         ü
     ü
   JOBENV::DEBUG(1,(char *)dynamicSql.arr);
   Msg(10000+123)<<dynamicSql.arr<<eol;
   dynamicSql.len =short(strlen(dynamicSql.arr));
   tryToConnect();
	 DssJob * job = NULL;
   int fetchCount = 0;
   EXEC SQL WHENEVER SQLERROR GOTO SQLERROR;
   EXEC SQL PREPARE FULL_QUERY FROM :dynamicSql;
   EXEC SQL DECLARE C_FULL_QUERY CURSOR FOR FULL_QUERY;
   EXEC SQL OPEN C_FULL_QUERY;

   for (;;)
   ä
      EXEC SQL FETCH C_FULL_QUERY INTO
      :record_key,
      :record_job,
      :record_dataset,
      :record_volumes,
      :record_size;
      if (SQLCODE == 100) break;

        if (job == NULL ]]
         memcmp(job->timestamp.arr,record_job.arr,job->timestamp.len))
    ä
         job = new DssJob((TIMESTAMP&)record_job);
         dssJobs.addlast(job);
         fetchCount++;
        ü
        DssDataset * dataset = new DssDataset(job,
                                        record_dataset.arr,
                                        record_volumes.arr,
                                        record_type,
                                        record_size);
   ü
   EXEC SQL CLOSE C_FULL_QUERY;
   return fetchCount;
SQLERROR:
   diag("FULL QUERY");
   markerror();
   return -1;
ü

int DssJob::doWeNeed(const char * d)
  ä
  CHAINITER iter(this);
  DssDataset * ds =(DssDataset *)iter.next();
  while (ds)
    ä
    if (ds->compare(d))
      return 1;
    ds =(DssDataset *)iter.next();
    ü
  return 0;
  ü

int DssJob::allOnline()
ä
 char _genFileNameÄ1024Ü;
  FILE *   restore = fopen(genOpenName("RESTORE",_genFileName),"wb");
  if (NOT restore)
     JOBENV::Error(Msg(10000+110)<<"RESTORE"<<eol,JOBENV::Abort);
  int rc = 1;
  CHAINITER iter(dssJobs);
  DssJob * job = (DssJob*)iter.next();
  while (job)
  ä
    int file = open(genOpenName(job->getDatasetName(),_genFileName),O_RDONLY+O_BINARY);
    if (file < 0)
    ä
       rc = 0;
       JOBENV::Error(Msg(10000+120)<<job->getDatasetName()<<strerror(errno)
         <<eol,JOBENV::Continue);
       fprintf(restore,"%sÖn",job->getDatasetName());
    ü
    else
       close(file);
    job = (DssJob*)iter.next();
  ü
  fclose(restore);
  return rc;
ü


//-------------------------------------------------------------------
//-------------------------------------------------------------------
//-------------------------------------------------------------------

DssDataset::DssDataset(DssJob* j,char *n,char *v,int t,int s):
SQLINTERFACE(),
chainE(n),
job(j)
ä
   job->addlast(this);
   dataset.len = min(strlen(n),sizeof(dataset.arr));
   strncpy(dataset.arr,n,dataset.len);
   dataset.arrÄdataset.lenÜ = 0;

   volumes.len = min(strlen(v),sizeof(volumes.arr)-1);//szm20090403 max 6 volumes
   strncpy(volumes.arr,v,volumes.len);
   volumes.arrÄvolumes.lenÜ = 0;
   type = t;
   recordsize = s;
   JOBENV::DEBUG(1,"Dataset construct",n,v);
ü

DssDataset::ßDssDataset()
ä
ü

int DssDataset::insert()
ä
   tryToConnect();
   memcpy(timestamp.arr,job->timestamp.arr,job->timestamp.len+1);
   timestamp.len = job->timestamp.len;
   JOBENV::DEBUG(1,"Dataset insert:",dataset.arr);
   if (useDB2)
   ä
   EXEC SQL WHENEVER SQLERROR GOTO SQLERROR;
   EXEC SQL INSERT INTO DSSDATASETS
   VALUES(CURRENT TIMESTAMP,
   :timestamp,
   :dataset,
   :volumes,
   :type,
   :recordsize);
   ü
   else
   ä
   if (SQLINTERFACE::fileDB2)
   fprintf(SQLINTERFACE::fileDB2,"insert into DSSDATASETS:Ön");
   PUTDB2(timestamp);
   PUTDB2(dataset);
   PUTDB2(volumes);
   if (fileDB2)
   fprintf(SQLINTERFACE::fileDB2," type:%dÖn size:%dÖn",type,recordsize);
   ü
  return 1;
SQLERROR:
  diag("INSERT INTO DSSDATASETS");
  markerror();
  return 0;
ü

