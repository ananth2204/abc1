#pragma runopts(POSIX(ON),ANYHEAP(,,ANY),ALL31(ON),HEAP(,,ANY),STACK(,,ANY),STORAGE(NONE,NONE,NONE))
#include "isisdef.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <fcntl.h>

#include <unistd.h>

#include "msgmgr.hpp"
#include "mvsbase.hpp"
#include "mchain.hpp"
#include "merror.hpp"
#include "rarcsql.hpp"
#include "dssclas.hpp"
#include "dssmain.hpp"
#include "dssdb.hpp"
#include "dssfile.hpp"
#include "jobenv.hpp"
#include "adreib.hpp"
#include "adrufob.hpp"
#include "eirec21.hpp"
#include "eirec23.hpp"
#include "misc.hpp"
//#include "isismisc.hpp"

typedef struct adreib _adreib;
typedef struct adrufob ADRUFOB;
typedef struct eirec21  EIREC21;
typedef struct eirec23  EIREC23;

const char * ADRDSSU              = "ADRDSSU ";
const char * KEYWORD_INCLUDE_MARK = "/*include*/";
const char * KEYWORD_DUMP         = "DUMP";
const char * KEYWORD_RESTORE      = "RESTORE";
const char * KEYWORD_DB_PLAN      = "PLAN";
const char * KEYWORD_DB_SUBSYS    = "SUBSYS";
const char * KEYWORD_PREFIX       = "PREFIX";
const char * KEYWORD_SYSIN        = "SYSIN";
const char * KEYWORD_ADR012I      = "ADR012I";
const char * KEYWORD_DEBUG        = "DEBUG";
const char * KEYWORD_TRACE        = "TRACE";
const char * KEYWORD_COMPR        = "COMPR";
const char * KEYWORD_REFDT        = "REFDT";
const char * KEYWORD_SQLFILE      = "SQL";
const char * KEYWORD_DIRECT       = "DIRECT";
const char * KEYWORD_MAXLENGTH    = "MAXLENGTH";
const char * KEYWORD_USEDB2	  		= "USEDB2";
const char * KEYWORD_USEDB2_FILE  = "DB2OUT";
const char * KEYWORD_ADRDSSU      = "ADRDSSU";

static DSS *          dss = NULL;
static mCHAIN    *    input      = new mCHAIN();
static CHAINITER *    inputIter  = new CHAINITER(*input);
static int            inputEof   = 0;
static mCHAIN    *    msgChain   = new mCHAIN();
static CHAINITER *    msgIter    = new CHAINITER(*input);
static char           buffÄDSSFILE_MAX_BUFFERÜ;
static FILE      *    trace      = NULL;
static char  dateÄ12Ü;
static char  dateToIBMÄ12Ü;

static bool backspaceFlag = false;
static int  backspaceLength = 0;
static int   direct = 0;

static bool adrdssu = false;

#define _VERSION_  "V7R0M0"

int main(int argc,char *argvÄÜ)
ä
	char _genFileNameÄ1024Ü;
	int rc = 0;
	messagetext = new MessageTEXT();
	jobEnv  = new JOBENV(argvÄ0Ü);
	DssJob * job = new DssJob();
	dss = new DSS(argvÄ1Ü,job);
	formatTime(date,sizeof(date),"%d.%m.%Y");
	JOBENV::DEBUG(1,date);
	Msg(5500)<<argvÄ0Ü<<_VERSION_<<__DATE__<<eol; //szm
	mCHAIN * includes    = new mCHAIN();
	char     buffÄ256Ü;
	if (getenv(KEYWORD_TRACE))
	ä
		trace = fopen(genOpenName(getenv(KEYWORD_TRACE),_genFileName),"w");
	ü
	FILE *   sysin = fopen(genOpenName(KEYWORD_SYSIN,_genFileName),"r");
	if (NOT sysin)
		JOBENV::Error(Msg(10000+110)<<KEYWORD_SYSIN<<eol,JOBENV::Abort);
	if (getenv(KEYWORD_ADRDSSU))
		adrdssu = atoi(getenv(KEYWORD_ADRDSSU));
	else
		adrdssu = false;
	while(fgets(buff,sizeof(buff)-1,sysin))
	ä
		if ( strchr(buff,'Ön') )
			*strchr(buff,'Ön') = 0;
		chainE * rec = new chainE(buff);
		Msg(10000+112)<<buff<<eol;
		input->addlast(rec);
		mvsSTRING parse(rec->chainEid);
		parse.strip();
		if ( dss->function == DSS::invalid )
		ä
			if (memcmpi((const char *)parse,KEYWORD_DUMP,strlen(KEYWORD_DUMP))==0)
				dss->function = DSS::dump;
			else if (memcmpi((const char *)parse,KEYWORD_RESTORE,strlen(KEYWORD_RESTORE))==0)
				dss->function = DSS::restore;
		ü
		else if(strstr((char *)parse,KEYWORD_INCLUDE_MARK) && dss->function == DSS::restore)
		ä
			mvsSTRING inc, rest;
			parse.parse(inc," ",rest);
			inc.strip();
			Msg(10000+113)<<inc<<eol;
			includes->addlast(new chainE((char *)inc));
		ü
		else if(strstr((char *)parse,KEYWORD_REFDT) && dss->function == DSS::restore)
		ä
			mvsSTRING dt = strchr(strstr((char *)parse,KEYWORD_REFDT),' ');
			mvsSTRING oper, dateS, rest;
			dt.strip();
			dt.parse(oper," ",dateS,")",rest);
			dateS.strip();
			strcpy(date,(char *)dateS);
			memcpy(dateToIBM,DatetoIBM(date),sizeof(dateToIBM));
			Msg(10000+116)<<date<<dateToIBM<<eol;
		ü
	ü
	fclose(sysin);
	sysin = NULL;
	FILE * _fd = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
	if (_fd) fclose(_fd);
	if (_fd)
		sysin = fopen(genOpenName(KEYWORD_DIRECT,_genFileName),"r");
	if (sysin)
	ä
		while(fgets(buff,sizeof(buff)-1,sysin))
		ä
			if ( strchr(buff,'Ön') )
				*strchr(buff,'Ön') = 0;
			if ( strchr(buff,' ') )
				*strchr(buff,' ') = 0;
			direct = 1;
			Msg(10000+126)<<buff<<eol;
			DssJob::dssJobs.addlast(new DssJob(buff));
		ü
		fclose(sysin);
	ü

	sysin = NULL;
	int qrc = 0;
	switch(dss->function)
	ä
	case DSS::dump:
		Msg(10000+114)<<eol;
		inputIter->reset();
		rc = dss->run(job);
		break;
	case DSS::restore:
		Msg(10000+115)<<eol;
		ä
			if (direct==0)
			ä
				if ((qrc = dss->getJob()->query(includes,date)) < 0)
					JOBENV::Error(Msg(10000+111)<<eol,JOBENV::Abort);
			ü
			if ( NOT DssJob::allOnline() )
				JOBENV::Error(Msg(10000+118)<<eol,JOBENV::Abort);
			CHAINITER iter(DssJob::dssJobs);
			DssJob * toRestore = (DssJob*)iter.next();
			if (direct==0 &&(toRestore==NULL ]] qrc == 0))
			ä
				JOBENV::Error(Msg(10000+117)<<eol,JOBENV::Continue);
				rc = 4;
			ü
			while(toRestore)
			ä
				inputEof = 0;
				inputIter->reset();
				rc ]= dss->run(toRestore);
				toRestore = (DssJob*)iter.next();
			ü
		ü
		break;
	case DSS::invalid:
	default:
		JOBENV::Error(Msg(10000+111)<<eol,JOBENV::Abort);
		break;
	ü
	Msg(10000+119)<<rc<<eol;
	//printf(" DSSN ended with rc:%dÖn",rc);
	_exit(rc);
	delete job;
	delete includes;
	delete dss;
	_exit(rc);
	//return rc;
ü

char * optionsÄÜ =
ä
	"Function StartUp",
	"Sysin Record",
	"Printing SYSPRINT",
	"Reading Physical Tape",
	"Reading Logical Tape",
	"Writing Logical Tape",
	"Writing Physical Tape",
	"Reading Disk Track",
	"Writing Disk Track",
	"Reading Utility Sysprint",
	"Writing Utility Sysprint",
	"Writing WTO",
	"Writing WTOR",
	"Presenting ADRUFO",
	"Function Ending",
	"Presenting WTOR response",
	"OPEN Tape volume verification",
	"OPEN Tape volume nonspecific",
	"Insert Logical VSAM",
	"Output TAPE error",
	"Volume Notification",
	"Dataset Verification",
	"Bypass Verification",
	"Dataset processed",
	"Concurrent Copy",
	"Backspace",
	"Dump Volume",
	"Physical Dataset Processed"
ü;

extern "C"
int UIM(void  * eib)
ä
	static DSSFILE  * dssFile  = NULL;
	static int dssStart        = 1;

	_adreib  * adreib  = (_adreib *)eib;
	dss                = (DSS *)(adreib->eiuseptr);
	DssJob *  job      = dss->getJob();
	JOBENV::DEBUG(1,"UIM entry:",optionsÄadreib->eioptionÜ);
	adreib->eiretcod = eirc_ok; //set default o.k.
	adreib->eixalow0 = 0xff; // allow all kind of actions ( replace delete etc.
	if (adrdssu)
	ä
	ü
	else
	ä
		switch(adreib->eioption)
		ä
		case eiop00:
			ä
				if (dssStart)
				ä
					dssStart = 0;
					Msg(10000+130)<<"V7R0M0"<<__DATE__<<eol;
				ü
				else
				ä
					if (dss->function == DSS::dump)
						dssFile = new DSSFILE(job->getDatasetName(),DSSFILE_output);
					else
						dssFile = new DSSFILE(job->getDatasetName(),DSSFILE_input);
					if(NOT dssFile ]] dssFile->iserror())
						JOBENV::Error(Msg(10000+111)<<eol,JOBENV::Abort);
				ü
			ü
			adreib->eiretcod =  eirc_ok;
			break;
		case eiop01:
			if (NOT inputEof)
			ä
				chainE  * rec = inputIter->next();
				if ( rec)
				ä
					adreib->eirecptr = int(rec->chainEid);
					adreib->eireclen = strlen(rec->chainEid);
					char * c = NULL;
					if ((c = strstr((char *)adreib->eirecptr,KEYWORD_INCLUDE_MARK)))
						memset(c,' ',strlen(KEYWORD_INCLUDE_MARK));
					else if (strstr((char *)adreib->eirecptr,KEYWORD_REFDT) && dss->function == DSS::restore)
					ä
						char * dt = strchr(strstr((char *)adreib->eirecptr,KEYWORD_REFDT),' ');
						memcpy(dt+4,dateToIBM,strlen(date));
					ü
					JOBENV::DEBUG(1,(char *)adreib->eirecptr);
					adreib->eiretcod = eirc_insert;
				ü
				else
				ä
					inputEof = 1;
					if (adreib->eireclen)
						adreib->eiretcod =  eirc_delete;
					else
						adreib->eiretcod =  eirc_disconnect;
				ü
			ü
			else if (adreib->eireclen)
				adreib->eiretcod =  eirc_delete;
			else
				adreib->eiretcod =  eirc_disconnect;
			break;
		case eiop02:
			if (0)
				//if (memcmpi(KEYWORD_ADR012I,(char *)adreib->eirecptr,strlen(KEYWORD_ADR012I)) == 0)
			ä
				if (msgIter == NULL)
					msgIter = new CHAINITER(*msgChain);
				chainE * next = msgIter->next();
				if (next == NULL)
				ä
					delete msgIter;
					adreib->eiretcod = eirc_ok;
				ü
				else
				ä
					adreib->eirecptr = int(next->chainEid);
					adreib->eireclen = next->chainEidl;
					adreib->eiretcod = eirc_insert;
				ü
			ü
			else
				if (dss->function == DSS::dump &&
					job->joblog.len+adreib->eireclen < sizeof(job->joblog.arr))
				ä
					memcpy(job->joblog.arr+job->joblog.len,(char *)adreib->eirecptr,
						adreib->eireclen);
					job->joblog.len += adreib->eireclen;
					job->joblog.arrÄjob->joblog.len++Ü = 0;
				ü
				adreib->eiretcod = eirc_ok;
				break;
		case eiop03:
			ä
				if (backspaceFlag)
				ä
					//JOBENV::DEBUG(1,"backspace Physical Tape Record");
					adreib->eirecptr = int(buff);
					adreib->eireclen = backspaceLength;
					adreib->eiretcod = eirc_insert;
					backspaceFlag = false;
				ü
				else
				ä
					size_t l = dssFile->get(buff);
					if (l)
					ä
						backspaceLength = l;
						//JOBENV::DEBUG(1,l);
						// fwrite(buff,1,l,trace);
						adreib->eirecptr = int(buff);
						adreib->eireclen = l;
						adreib->eiretcod = eirc_insert;
					ü
					else
						adreib->eiretcod = eirc_disconnect;
				ü
			ü
			break;
		case eiop06:
			if (dssFile->put((char *)adreib->eirecptr,adreib->eireclen))
				adreib->eiretcod = eirc_delete;
			else
				adreib->eiretcod = eirc_disconnect;
			break;
		case eiop13:
			ä
				ADRUFOB * adrufob =(ADRUFOB *)adreib->eirecptr;
				adrufob->ufaiflgs &= (255-ufuimch);
				adrufob->ufaiflgs ]= (ufnoin+ufnoout);
				adreib->eiretcod = eirc_modified;
			ü
			break;
		case eiop14:
			ä
				if (dss->function == DSS::dump)
					job->insert();
				if (dssFile)
					delete dssFile;
				dssFile = NULL;
			ü
			adreib->eiretcod =  eirc_ok;
			break;
		case eiop21:
			adreib->eiretcod =  eirc_ok;
			if (dss->function==DSS::restore)
			ä
				EIREC21 * rec21 = (EIREC21 *)(adreib->eirecptr);
				if (direct==0&&job->doWeNeed((char *)rec21->ei21dsn)==0)
				ä
					Msg(10000+125)<<mvsSTRING((char *)rec21->ei21dsn,sizeof(rec21->ei21dsn))<<eol;
					adreib->eiretcod =  eirc_end_dataset;
				ü
				else
					Msg(10000+124)<<mvsSTRING((char *)rec21->ei21dsn,sizeof(rec21->ei21dsn))<<eol;
			ü
			break;
		case eiop23:
			if (dss->function == DSS::dump)
			ä
				EIREC23 * rec23 = (EIREC23 *)(adreib->eirecptr);
				if(rec23->ei23vol_ && memcmp(rec23->e23bytes,nulls,8))
					new DssDataset(job,
					mvsSTRING((char *)rec23->ei23dsn,sizeof(rec23->ei23dsn)),
					mvsSTRING((char *)rec23->ei23vser,6*rec23->ei23vol_),
					int(*(int *)(&rec23->e23sdsrg)));
			ü
			adreib->eiretcod = eirc_ok;
			break;
		case eiop25:
			backspaceFlag = true;
			adreib->eiretcod =  eirc_ok;
			break;
		default:
			adreib->eiretcod =  eirc_ok;
			break;
		ü
	ü
	if (adreib->eirecptr&&adreib->eireclen>0)
	ä
		if (trace)
			fwrite((char *)adreib->eirecptr,1,adreib->eireclen,trace);
		JOBENV::DEBUG(1,"dump:",(char *)adreib->eirecptr,adreib->eireclen);
	ü
	JOBENV::DEBUG(3,"UIM exit:",adreib->eiretcod);
	return int(adreib->eiretcod);
ü

extern "C" int DBError(char * s)
ä
	Msg(10000+9704)<<s<<eol;
	return 1;
ü

