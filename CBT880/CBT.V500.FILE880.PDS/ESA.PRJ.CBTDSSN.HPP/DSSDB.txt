#ifndef INCLUDE_DSSDB
#define INCLUDE_DSSDB

#include "merror.hpp"
#include "mvsbase.hpp"
//#include "archsql.hpp" szm
#include "mchain.hpp"
#include "jobenv.hpp"
#define assign(t,f) Ö
ä  t.len = Ö
  short(min(sizeof(t.arr),strlen((char *)f))); Ö
  strncpy(t.arr,(char *)f,t.len); Ö
ü

#ifndef VARCHAR
 #define VARCHAR( n , l) Ö
 struct ä  Ö
  short len; Ö
  char arr Ä l Ü ; Ö
  ü n
#endif

#define LONGINT( var )  long  int var
#define SHORTINT( var ) short int var

typedef struct _TIMESTAMP
ä
  short len;
  char  arrÄ28Ü;
ü TIMESTAMP;

struct _DssDatasetRecord
ä
   VARCHAR(key,28);
   VARCHAR(job,28);
   VARCHAR(dataset,45);
   VARCHAR(volumes,37);
   long int type;
   long int recordsize;
ü DssDatasetRecord;

class TcbARCHSQL:public chainE
ä
private:
   ARCHSQL * archsql;
public:
   TcbARCHSQL(char * t,ARCHSQL * a):chainE(t),archsql(a)
   äü
   ARCHSQL * get()äreturn archsql;ü
ü;

static char * initDynamicSql();

class SQLINTERFACE:
 public  mERROR
ä
protected:
 static char * plan;
 static char * subsystem;
 static mCHAIN  tasks;
 static ERROR_MESSAGE * error_message;
protected:
 static char * dSql;
public:
	static bool useDB2;
	static FILE * fileDB2;
public:
 SQLINTERFACE();
   ßSQLINTERFACE();
   void diag(char *);
   int  commit();
   enum Error_Actionä Abort, Continueü;
   void Error(char *,Error_Action);
   ARCHSQL * connectDB();
   void tryToConnect();
ü;

class DssJob:
 public SQLINTERFACE,
 public mCHAIN,
 public CHAINITER,
 public chainE
ä
private:
   VARCHAR(t,28);
   VARCHAR(record_key,28);
   VARCHAR(record_job,28);
   VARCHAR(record_dataset,45);
   VARCHAR(record_volumes,37);
   LONGINT(record_type);
   LONGINT(record_size);
public:
   VARCHAR(timestamp,28);
   VARCHAR(jobName,9);
   VARCHAR(jobNumber,9);
   VARCHAR(program,9);
   VARCHAR(dataset,255);
   LONGINT(datasetcount);
   VARCHAR(joblog,30000);
   VARCHAR(dynamicSql,32000);
public:
  static mCHAIN dssJobs;
  static int    allOnline();
  int    doWeNeed(const char *);
public:
 DssJob();
 DssJob(TIMESTAMP&);
 DssJob(const char *);
 virtual ßDssJob();
 int insert();
 int query(mCHAIN*,char * =0);
 char * getDatasetName()
ä
  return ((char *)dataset.arr);
ü
private:
 void init();
ü;

class DssDataset:
 public SQLINTERFACE,
 public chainE
ä
private:
 DssJob * job;
public:
   VARCHAR(timestamp,28);
   VARCHAR(dataset,45);
   VARCHAR(volumes,37);
   LONGINT( type);
   LONGINT(recordsize);
public:
 DssDataset(DssJob *,char *,char *,int = 0,int =0);
 int compare(const char *n)
   ä
   for(int i =0;i<45&&dataset.arrÄiÜ&&dataset.arrÄiÜ-' '&&nÄiÜ&&nÄiÜ-' ';i++)
     if (dataset.arrÄiÜ - nÄiÜ) return 0;
   return 1;
   ü
   virtual ßDssDataset();
   int insert();
ü;

#endif
