/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/rarcsql.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/


#ifndef  INCLUDE_RARCSQL
#define  INCLUDE_RARCSQL

#include "mvsbase.hpp"
#include "msgmgr.hpp"
#include "misc.hpp"
#include "merror.hpp"
#include <stdio.h>
#include <stdlib.h>

extern "OS" int  SQLASM(void);

extern "OS" int  DSNALI(...);
extern "OS" int  DSNTIAR(...);
extern "OS" void DSNHLI(void *);

const int data_dim = 30;
const int data_len = 72;


typedef struct varchar
ä
  short len;
  char  valueÄ4096Ü;
ü VARCHAR;

typedef struct
 ä
  short error_len;
  char error_textÄdata_dimÜÄdata_lenÜ;
 ü ERROR_MESSAGE;

enum  CallTypeäConnect,
       Disconnect,
       Commit,
       Rollback,
       Prepare,
       Open,
       Close,
       Executeü;

//  Communication :
//  The constructor will call the Assembler init function with the LoadList
//  pointer
//  The Assembler init function loads the required DB2 modules and put the addresses into
//  the LoadList vector
//  Before every DB2 call (dsnhali dsnali etc ) there is a callback to the
//  getLoadList routine to get the proper address




class ARCHSQL:public mERROR
ä
private:
  int rc;
  void * tecb,* secb,* ribptr,* eibptr;
  long retcode , reasoncode;
  char functionÄ13Ü;
  char ssnmÄ5Ü;
  char planÄ9Ü;
  char reuseÄ9Ü;
  char collectionÄ19Ü;
  char correlation_idÄ13Ü;
  char accounting_tokenÄ23Ü;
  char accounting_intervalÄ7Ü;
  int  rrs;
  int status;
  ERROR_MESSAGE error_message;
  void * loadlistÄ8Ü;
public:
  ARCHSQL();
  ßARCHSQL();
  int call(CallType);
  void setDynamicSQL(char *);
  void * getLoadlist()ä return loadlistÄ0Ü;ü
  void setSubSystem(char *n)ämemcpy(ssnm,n,4);ssnmÄ4Ü = 0;ü
  void setPlan(char * p)ämemcpyp(plan,p,8,strlen(p),' '); planÄ8Ü = 0;ü
  void setCollection(char * p)ämemcpyp(collection,p,8,strlen(p),' '); collectionÄ8Ü = 0;ü
  void setPlanName(char *n)ämemcpy(plan,n,8);planÄ8Ü = 0;ü // KRUBE 141100
ü;

void  getUniqueKey(char *);
void  getUniqueKEY(char *);

#endif
