/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/mvsebcdic.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   utility functions to convert from and to ebcdic charset
*******************************************************************************/

#ifndef __EBCDICUT_HPP__
#define __EBCDICUT_HPP__


extern const unsigned char isis_etoaÄ256Ü;
extern const unsigned char isis_atoeÄ256Ü;


/**
 * functions for ebcdic/ascii conversion
 * codesetConversion: helper function which does the conversion
 * local2ascii, ascii2local: generally called functions
 *   on ebcdic platforms they convert characters between ebcdic ascii
 *   on ascii platforms they don't change the characters
 * ascii2ebcdic, ebcdic2ascii: converts on ascii as well as on ebcdic platforms
 */


inline char* codesetConversion(char* dest, const char* src,const unsigned char * convtab)
ä
    char *d = dest;
    for(;*src;++src,++d)
    ä
        *d=convtabÄ(unsigned char)*srcÜ;
    ü
    *d=0;
    return dest;
ü

inline char* codesetConversion(char* dest, const char* src,const unsigned char * convtab,int len)
ä

    for(int i=0;i<len;++i)
    ä
        destÄiÜ=convtabÄ(unsigned char) srcÄiÜÜ;
    ü
    return dest;
ü

inline char* local2ascii(char* dest, const char* src)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_etoa);
#else
    return strcpy(dest,src);
#endif
ü

inline char* local2ascii(char* dest, const char* src,int len)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_etoa,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* local2ascii(char* str)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_etoa);
#else
    return str;
#endif
ü

inline char* local2ascii(char* str,int len)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_etoa,len);
#else
    return str;
#endif
ü

inline char local2ascii(char c)
ä
#if ' ' == 0x40
    return isis_etoaÄ(unsigned char)cÜ;
#else
    return c;
#endif
ü


inline char* ascii2local(char* dest, const char* src)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_atoe);
#else
    return strcpy(dest,src);
#endif
ü

inline char* ascii2local(char* dest, const char* src,int len)
ä
#if ' ' == 0x40
    return codesetConversion(dest,src,isis_atoe,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* ascii2local(char* str)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_atoe);
#else
    return str;
#endif
ü

inline char* ascii2local(char* str,int len)
ä
#if ' ' == 0x40
    return codesetConversion(str,str,isis_atoe,len);
#else
    return str;
#endif
ü

inline char ascii2local(char c)
ä
#if ' ' == 0x40
    return isis_atoeÄ(unsigned char) cÜ;
#else
    return c;
#endif
ü

inline char* local2ebcdic(char* dest, const char* src)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_atoe);
#else
    return strcpy(dest,src);
#endif
ü

inline char* local2ebcdic(char* dest, const char* src,int len)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_atoe,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* local2ebcdic(char* str)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_atoe);
#else
    return str;
#endif
ü

inline char* local2ebcdic(char* str,int len)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_atoe,len);
#else
    return str;
#endif
ü

inline char local2ebcdic(char c)
ä
#if ' ' == 0x20
    return isis_atoeÄ(unsigned char)cÜ;
#else
    return c;
#endif
ü


inline char* ebcdic2local(char* dest, const char* src)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_etoa);
#else
    return strcpy(dest,src);
#endif
ü

inline char* ebcdic2local(char* dest, const char* src,int len)
ä
#if ' ' == 0x20
    return codesetConversion(dest,src,isis_etoa,len);
#else
    return (char*)memcpy(dest,src,len);
#endif
ü

inline char* ebcdic2local(char* str)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_etoa);
#else
    return str;
#endif
ü

inline char* ebcdic2local(char* str,int len)
ä
#if ' ' == 0x20
    return codesetConversion(str,str,isis_etoa,len);
#else
    return str;
#endif
ü

inline char ebcdic2local(char c)
ä
#if ' ' == 0x20
    return isis_etoaÄ(unsigned char) cÜ;
#else
    return c;
#endif
ü



inline char* ebcdic2ascii(char* str)
ä
    return codesetConversion(str,str,isis_etoa);
ü

inline char* ascii2ebcdic(char* str)
ä
    return codesetConversion(str,str,isis_atoe);
ü

inline char ebcdic2ascii(char c)
ä
    return (char) isis_etoaÄ(unsigned char) cÜ;
ü

inline unsigned char ebcdic2ascii(unsigned char c)
ä
    return isis_etoaÄcÜ;
ü

inline char ascii2ebcdic(char c)
ä
    return (char)isis_atoeÄ(unsigned char) cÜ;
ü

inline unsigned char ascii2ebcdic(unsigned char c)
ä
    return isis_atoeÄcÜ;
ü

// for backwards compatibility
inline unsigned char etoa(unsigned char c)
ä
    return isis_etoaÄ cÜ;
ü

inline unsigned char atoe(unsigned char c)
ä
    return isis_atoeÄ cÜ;
ü

// Ascii representation of a string
// useful if you need the ascii representation of a text independently from the platform's codeset
// there is an overhead also on ascii platforms -> avoid frequent constructor calls
// usage samples:
// strcmp(fontName,AsciiString("Arial"));
// const AsciiString fontlistÄÜ=ä"X1",X2,"X3"ü;
class AsciiString
ä
protected:
    char * str;
public:
    AsciiString(const char* s)
    ä
        if(s)
        ä
            str=new charÄstrlen(s)+1Ü;
            local2ascii(str,s);
        ü
        else
        ä
            str=NULL;
        ü
    ü

    ßAsciiString()
    ä
        deleteÄÜ str;
    ü

    operator const char* () const
    ä
        return str;
    ü
ü;


#endif
