/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/casmif.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/


#ifndef INCLUDE_CASMIF
#define INCLUDE_CASMIF

#if defined(ISIS_PF_MU) == 1 ]] defined(ISIS_PF_MI) == 1
#define DEFINE_ENCLAVESRB(n) Ö
	pMvsInterface n;
#define ENTER_ENCLAVESRB(n)  if (MvsInterface::zIIP) Ö
äprintf(" Enter %s %dÖn",__FILE__,__LINE__);	n =	mvs()->enterSrb();ü
#define EXIT_ENCLAVESRB(n)  if (MvsInterface::zIIP) Ö
ä	n->exitSrb(); printf(" Exit %s %dÖn",__FILE__,__LINE__);ü


#define ASM_OPER_QUEUE "ASMOPERQ"
#define ASM_OPER_SECONDS    10
#define ASM_OPER_DESCRIPTOR 28

#include "asmif.hpp"
#include <stdio.h>
#include <stdlib.h>

class   SUBTASK;
class   MvsInterface;
typedef MvsInterface * pMvsInterface;
typedef struct asmdsect ASM;
typedef ASM * pasm;
typedef unsigned long pcsul;
typedef unsigned long handle;
typedef unsigned long pcshandle;
typedef long pcsl;
extern "C" typedef int CFUNC(void *);
MvsInterface * mvs();
#ifndef PSA_CONST
#define PSA_CONST
const  unsigned PSATOLD = 0x21c;
const  unsigned PSAAOLD = 0x224;
const  unsigned TCBFSA  = 0x70/4;
const  unsigned TCBUSER = 0xA8;
const  unsigned tcbuser = 0xa8;
const  unsigned SAVEr1 =  0x18/4;
static unsigned POSTcode = 0x40000000;
static unsigned WAITcode = 0x80000000;
static unsigned offPostWait = 0x3fffffff;
#endif
const  unsigned long  CICS_NULL= 0xff000000;
const  unsigned long  LOW_PRIORITY  = 1;
const  unsigned long  RUN_PRIORITY  = 15;
const  unsigned long  HIGH_PRIORITY = 255;

#ifndef SUBRUN_INCLUDE


#if defined(MEM_SUPPORT)
#ifndef IF_SASC_REPLACE_NEW_DELETE
#define IF_SASC_REPLACE_NEW_DELETE
#endif
extern void * asmm;
ISIS_EXT_ASM void *  ASMMINI(size_t,size_t);
ISIS_EXT_ASM void *  ASMMALL(size_t, void *);
ISIS_EXT_ASM void    ASMMFRE(void *, void *);
ISIS_EXT_ASM void    ASMMTER(void *);
#define ASMM_MAX 4*1024*1024
#define ASMM_MIN  128*1024

void * OwnMalloc(size_t s)
	ä
	if ( asmm == 0 ) asmm = ASMMINI(ASMM_MAX,ASMM_MIN);
	return (ASMMALL(s,asmm));
	ü

void OwnFree(void * s)
	ä
	ASMFREE(s,asmm);
	ü

void * OwnRealloc(void *, size_t);
#endif


#ifndef TMsg
#define TMsg( n ) Ö
	Msg( n +2 )<<(void * )(::mvs()->GetTCB())<<(void *)_eibptr
#endif

#ifndef SMsg
#define SMsg( n ) Ö
	Msg( n +1 )<<(int)(::mvs()->GetTCB())
#endif

#ifndef TRACE
#define TRACE( c , t ) Ö
	if ( GlobalTraceFlag >= c ) Ö
	ä MsgEnq();::mvs()->trace( t );MsgDeq();ü

#define TRACEDUMP( c , t , p ,l ) Ö
	if ( GlobalTraceFlag >= c ) Ö
	ä MsgEnq();::mvs()->tracedump( t , p , l );MsgDeq();ü
#endif

#define mytcb (void *)(::mvs()->GetTCB())
#define ZIIP_MAJOR  "ZIIP_MAJ"
#define ZIIP_MINOR  "ZIIP_MIN"
class MvsInterfaceä
protected:
	pcsul wtÄ4Ü;
	char  jobnameÄ9Ü;
	char  programnameÄ9Ü;
	int  rc;
	int   reason;
	int   critical;
	bool  srb;
	pasm  pASM;
	FILE  * file;
public:
	//szm
	static bool zIIP;
	static pcsul wlmEnclave;
	static int initEnclave();

	inline pMvsInterface enterSrb()
		ä
		if (wlmEnclave==0)
			initEnclave();
		if (|srb)
			Srb();
		return this;
		ü

	inline int exitSrb()
		ä
		if (srb)
			ä
			Srb();
			ü
		return 1;
		ü
	//szm

	MvsInterface();
	virtual ßMvsInterface();
	virtual pcsul GetTCB();                // get actual TCB address
	virtual pcsul GetASCB();               // get actual ASCB address
	virtual int CheckASCB(pcsul);          // check ASCB if valid
	virtual pcsul GetToken(char *);        // Get TOKEN
	virtual pcsul CreateToken(char *,pcsul *);//Create token
	virtual void DeleteToken(char*);       // delete token
	virtual int WaitEcb(pcsul,void *,void * = 0, void * =0,void * =0);
	virtual int PostEcb(void *,pcsul=0);   // post event
	virtual int Enq(char *,int);           // Exc Enq with minorname an    d max wait
	virtual int Deq(char *);               // Deq
	virtual void Chap(pcsul,int);          // change relative priority
	virtual pcsul Attach(char *,char **,pcsul); // start subtask
	virtual void Detach(pcsul);            // Detach Subtask
	virtual void Sleep(int);               // Sleep - task wait
	virtual int  Oper(char *,const size_t);// Oper comm
	virtual void Wto(const char *,const int= ASM_OPER_DESCRIPTOR);//Wto
	virtual void * Malloc(size_t);
	virtual void Free(void *);
	virtual int  Svc(int,void *);
	virtual int  AttachMvs(const char *,const char *);
	virtual void Clock(void *);
	virtual void Timeused(void *);           //szm 20050301used CPU time
	virtual int  Tdump(const char *,const char *,int); //szm200503265 TDUMP
	virtual int  LoggerOpen(const char *);   //szm20051118 logger support
	virtual int  Logger(const char *,size_t = 0);
	virtual int  LoggerClose();
	//virtual int  BrowseLogger(const char *&,size_t&,int=0,int = 0); //szm
	virtual int  BrowseLogger(const char * & addr,size_t *  & length,int direction,int all,char * date_time);
	virtual int  VtocOpen(const char * ddname,const char * mask,char * dscb);
	virtual int  Vtoc(char * dscb);
	virtual int  VtocClose();
	virtual int  Srb();
	virtual int  Wlm(const char * =0,const char * =0);
	virtual int  Obtain(const char * dsn, const char * volser,char * dscb);
	virtual int Testauth();
	virtual int Diagnose(int,void *);
	virtual int Vsmlist(void *,void *,int);
	virtual int  TCPCALL(int,void * =0, void * =0, void * =0, void * =0,
		void * =0, void * =0, void * =0, void * =0);
	char* GetJobName()äreturn jobname;ü
	char* GetProgramName()äreturn programname;ü
	void   trace(char *);
	void   tracedump(char *,void *,int);
	void   tracedump(char * t , const void * a,int l)
		ätracedump(t,(void *)a,l);ü
	void   diag(const char * a)
		ä
		printf(" %s function rc:%d reason:%dÖn",a,rc,reason);
		printf("    retval:%d retcode:%d reason:%8.8xÖn",pASM->asm_bpx1_retval,pASM->asm_bpx1_retcode,pASM->asm_bpx1_rsncode);
		ü
	void   extractOper(char *);
	virtual int EnterCritical() äreturn 0;ü        //enter critical section
	virtual int LeaveCritical()äreturn 0;ü         //leave critical
	virtual pcsul GetECB()äreturn 0;ü              //get a local ECB
	virtual pcsul FreeECB(void *)äreturn 0;ü       //free a local ECB
	virtual int WaitEvent(pcsul,int)äreturn 0;ü    //wait for the ECB
	virtual int PostEvent(pcsul)äreturn 0;ü        //post event with
	virtual int ResetEvent(pcsul)äreturn 0;ü       //clear ECB post
	virtual int Select(pcsul,void *,void *,void *, void *);// select BPX1
	virtual int ConnectShmem(pcsul,pcsul,int)äreturn 0;ü//connect
	virtual int DisconnectShmem(pcsul)äreturn 0;ü  //disconnect
	virtual pcsul AllocatePages(int)äreturn 0;ü    //allocate pages SHMEM
	virtual int FreePages(pcsul,int)äreturn 0 ;ü   //free pages
	virtual int getReasonCode()äreturn reason;ü  //szm20071005 get back reason code
	virtual pasm getpasm()
	ä
		return pASM;
	ü
protected:
	int  CASMIF(int,
		void * = 0 ,void * = 0 ,void * = 0 ,void * = 0,
		void * = 0 ,void * = 0 ,void * = 0 ,void * = 0);
	int check(int,char *,char * );
	int check(int,int ,char * );
	ü;

long long clock_mvs(); //szm
int  tdump(const char *,const char *,int=0); //szm
int  mvsReasonCode();  //szm20071005 get back reason code

int            MsgEnq();
int            MsgDeq();
int            isCics();
extern         int GlobalTraceFlag;
extern         int GlobalCicsFlag;

#endif                             // SUBRUN_INCLUDE

//KV
#if defined(ISIS_PF_MI) ]] defined (ISIS_PF_MU)
#if defined(__alignmem)==0
#define __alignmem
#endif
#endif

__alignmem class SyncVar
	ä
	private:
		pcsul var;
		pcsul wait;
		pcsul ecb;
	public:
		SyncVar(pcsul = 24*60*60*1000);
		SyncVar(const SyncVar&);
		ßSyncVar();
		SyncVar& operator=(pcsul);
		operator int();
		friend pcsul waitSyncVar(SyncVar&);
		friend pcsul waitSyncVars(SyncVar&,SyncVar&);
	ü;

pcsul waitSyncVar(SyncVar&);
pcsul waitSyncVars(SyncVar&,SyncVar&);

#define MAXSECOND  359999
#define TWAMAXECB  512

#if defined(ISIS_PF_MI) ]] defined (ISIS_PF_MU)

#define __Tjoin(x,y)  x ## y
#define __ENQ_E 0
#define __ENQ_S 0x80
#define __ENQ_STEP 0
#define __ENQ_SYSTEM 0x40
#define __ENQ_SYSTEMS 0x48
#define __ENQ_RET_NONE 0
#define __ENQ_RET_HAVE 1
#define __ENQ_RET_CHNG 2
#define __ENQ_RET_USE 3
#define __ENQ_RET_TEST 7
#define __DEQ_RET_NONE 0
#define __DEQ_RET_HAVE 1

extern inline int _enq(char *qn, char *rn, int rlen, int flags) ä
	static const struct __ENQ_plist ä
		char flags;
		char rname_len;
		char parms;
		char rc;
		char *qname;
		char *rname;
		ü __plist_init = ä 0xc0, 0, 0, 0, 0, 0 ü;
	struct __ENQ_plist __plist;
	__plist = __plist_init;
	__plist.rname_len = (char) rlen; __plist.qname = qn;
	__plist.rname = rn; __plist.parms ]= flags;
	if (mvs()->Svc(56,&__plist)==0)
		return 0;
	else return __plist.rc;
	ü

#define ENQ(qn, rn, excl, rlen, scope, ret) Ö
	_enq(qn, rn, rlen, __Tjoin(__ENQ_, excl) ] __Tjoin(__ENQ_, scope) ] Ö
	__Tjoin(__ENQ_RET_, ret))

extern inline int _deq(char *qn, char *rn, int rlen, int flags)
	ä
	static const struct __DEQ_plist
		ä
		char flags;
		char rname_len;
		char parms;
		char rc;
		char *qname;
		char *rname;

		ü __plist_init = ä 0xc0, 0, 0, 0, 0, 0 ü;

	struct __DEQ_plist __plist;
	__plist = __plist_init;
	__plist.rname_len = (char) rlen; __plist.qname = qn;
	__plist.rname = rn; __plist.parms ]= flags;
	if (mvs()->Svc(48,&__plist)==0)
		return 0;
	else
		return __plist.rc;
	ü

#define DEQ(qn, rn, rlen, scope, ret) Ö
	_deq(qn, rn, rlen, __Tjoin(__ENQ_, scope) ] Ö
	__Tjoin(__DEQ_RET_, ret))
#define WAIT1(ecbaddr) Ö
	(_ldregs(R0+R1, 1, ecbaddr), _ossvc(1))
#define WAITM(n, ecblist) Ö
	(_ldregs(R0+R1, n, ecblist), LCR(1,1), _ossvc(1))
#define POST(ecbaddr, code) Ö
	(_ldregs(R0+R1, code, ecbaddr), _ossvc(2))

#define _Aep 1                    /* ATTACH macro keyword tokens    */
#define _Adcb 2
#define _Alpmod 3
#define _Adpmod 4
#define _Aparam 5
#define _Aecb 6
#define _Aetxr 7
#define _Ashspl 8
#define _Agspl 9
#define _Aszerono 10
#define _Atasklib 11
#define _Aend 0

extern int ATTACH(void **, ...);

#define __DETACH_NOSTAE 0
#define __DETACH_STAE 0x

extern int _detach(void **, unsigned);

#define DETACH(tcbptr, staeopt) Ö
	_detach(tcbptr, __Tjoin(__DETACH_, staeopt))
#define CHAP(incr, tcbptr) Ö
	(_ldregs(R0+R1, incr, tcbptr), _ossvc(44))

#define __STATUS_STOP 6
#define __STATUS_START 7

#ifdef STATUS /* handle nameser.h conflict */
#undef STATUS
#endif

#define STATUS(action, tcbptr) Ö
	(_ldregs(R0+R1, __Tjoin(__STATUS_, action), tcbptr), _ossvc(79))


#endif

#else
#define ENTER_ENCLAVESRB
#define EXIT_ENCLAVESRB
#endif
#endif
