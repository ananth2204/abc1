#pragma pack(packed)

struct ecvt ä
  unsigned char  ecvtecvtÄ4Ü;  /* ECVT ACRONYM                                        */
  void          *ecvtcplx;     /* -              ADDRESS OF IXCCPLX CONTROL           */
  unsigned char  ecvtsplxÄ8Ü;  /* -           SYSPLEX NAME USED FOR           @D1A    */
  int            ecvtsple;     /* -              SYSPLEX PARTITIONING ECB THAT   @D1A */
  void          *ecvtsplq;     /* -              SYSPLEX PARTITIONING QUEUE.     @D1A */
  void          *ecvtstc1;     /* -       STCKSYNC, NON-AR MODE,          @L1A        */
  void          *ecvtstc2;     /* -       STCKSYNC, NON-AR MODE,          @L1A        */
  void          *ecvtstc3;     /* -       STCKSYNC, AR MODE,              @L1A        */
  void          *ecvtstc4;     /* -       STCKSYNC, AR MODE,              @L1A        */
  void          *ecvtappc;     /* -           ANCHOR FOR APPC DATA STRUCTURES @L5C    */
  void          *ecvtsch;      /* -           ANCHOR FOR APPC SCHEDULER       @L5A    */
  struct ä
    unsigned char  _ecvtios1; /* -           IOS FLAGS BYTE 1                @L7A */
    unsigned char  _ecvtios2; /* -           RESERVED.                       @L7A */
    unsigned char  _ecvtios3; /* -           RESERVED.                       @L7A */
    unsigned char  _ecvtios4; /* -           RESERVED.                       @L7A */
    ü ecvtiosf;
  void          *ecvtomda;     /* -           ADDRESS OF THE OPERATIONS       @L3A    */
  unsigned char  ecvtr038Ä3Ü;  /* -           RESERVED.                       @09C    */
  unsigned char  ecvtaloc;     /* -           Ownership: Allocation           @09A    */
  void          *ecvtbpms;     /* -           BELOW 16M, PAGEABLE DEVICE      @L4A    */
  void          *ecvtbpme;     /* -           BELOW 16M, PAGEABLE DEVICE      @L4A    */
  void          *ecvtapms;     /* -           ABOVE 16M, PAGEABLE DEVICE      @L4A    */
  void          *ecvtapme;     /* -           ABOVE 16M, PAGEABLE DEVICE      @L4A    */
  void          *ecvtqucb;     /* -           XCF DATA AREA (IXCYQUCB)        @D2C    */
  struct ä
    void          *_ecvtssdf; /* -           THE ADDRESS OF THE FREE SSD     @D3A */
    int            _ecvtssds; /* -           SEQUENCE NUMBER INCREMENTED     @D3A */
    ü ecvtssdd;
  unsigned char  ecvtr058Ä4Ü;  /* -           RESERVED                        @PCC    */
  void          *ecvtsrbt;     /* -           THE ADDRESS OF THE SSD          @D3A    */
  void          *ecvtdpqh;     /* Queue of DU-AL Pools (DPHs)     @D6C                */
  void          *ecvttcre;     /* -           IEAVTCRE ENTRY POINT ADDRESS.   @L9A    */
  unsigned char  ecvtxcfgÄ16Ü; /* SYSPLEX CONFIGURATION           @L6A                */
  void          *ecvtr078;     /* -           RESERVED. DO NOT USE.           @LAC    */
  void          *ecvtr07c;     /* -           RESERVED. DO NOT USE.           @LAA    */
  void          *ecvtscha;     /* -       THE ADDRESS OF IEAVSCHA.        @LBC        */
  unsigned char  ecvtr084Ä4Ü;  /* -           RESERVED.                       @LAA    */
  void          *ecvtdlcb;     /* Address of DLCB (CSVDLCB)                           */
  void          *ecvtnttp;     /* -           ADDRESS OF SYSTEM LEVEL         @LHA    */
  unsigned char  ecvtr090Ä8Ü;  /* -           RESERVED.                       @LHC    */
  void          *ecvtmsch;     /* -          THE ADDRESS OF SLM MESSAGE      @LNA     */
  void          *ecvtcal;      /* -          THE ADDRESS OF SLM COMMON AREA  @LNA     */
  unsigned char  ecvtloadÄ8Ü;  /* -          EDITED MVS LOAD PARAMETER       @P1C     */
  unsigned char  ecvtmlprÄ8Ü;  /* -           LOAD parameter used for this    @P1C    */
  void          *ecvttcp;      /* -           Token used by TCP/IP            @02A    */
  unsigned char  ecvtr0b4Ä4Ü;  /* -           RESERVED.                       @02C    */
  void          *ecvtnvdm;     /* -           NETVIEW DM TCP ID BLOCK POINTER @D4C    */
  unsigned char  ecvtr0bcÄ4Ü;  /* -           RESERVED. DO NOT USE.           @D4C    */
  void          *ecvtgrmp;     /* -           GRM DATA BLOCK POINTER          @LCA    */
  void          *ecvtwlm;      /* -          WLM VECTOR TABLE POINTER        @LQC     */
  void          *ecvtcsm;      /* -           Pointer to Communication        @03A    */
  void          *ecvtctbl;     /* Customer anchor table.                              */
  void          *ecvtpmcs;     /* STATUS SET,MC,PROCESS           @D5C                */
  void          *ecvtpmcr;     /* STATUS RESET,MC,PROCESS         @D5C                */
  void          *ecvtstx1;     /* STAX DEFER=YES,LINKAGE=BRANCH   @LDA                */
  void          *ecvtstx2;     /* STAX DEFER=NO,LINKAGE=BRANCH    @LDA                */
  unsigned char  ecvtslidÄ4Ü;  /* -          CONTAINS THE SLIP PER TRAP ID   @LFA     */
  void          *ecvtcsvt;     /* -           CSV TABLE.                      @LGA    */
  void          *ecvtasa;      /* -           ASA TABLE.                      @LIA    */
  void          *ecvtexpm;     /* -       GETXSB SERVICE ROUTINE.         @LLA        */
  void          *ecvtocvt;     /* -           ANCHOR FOR OpenMVS              @LKA    */
  void          *ecvtoext;     /* -           ANCHOR FOR OpenMVS              @LKA    */
  void          *ecvtcmps;     /* -       Address of the                  @P2A        */
  void          *ecvtnucp;     /* -           Pointer to nucleus dataset      @P3A    */
  void          *ecvtxrat;     /* -           XES anchor table for branch     @LOA    */
  void          *ecvtpwvt;     /* -           Address of the Processor        @LPA    */
  unsigned char  ecvtclonÄ2Ü;  /* -           1 or 2 character value used to  @LRA    */
  unsigned char  ecvtgmod;     /* GRS mode of operation           @LUA                */
  unsigned char  ecvtr10bÄ15Ü; /* -          RESERVED.                       @07C     */
  short int      ecvtptim;     /* Time value for Parallel Detach  @07A                */
  void          *ecvtjcct;     /* -           Address of the JES              @LVA    */
  void          *ecvtlsab;     /* -        Pointer to Logger Services      @P4C       */
  void          *ecvtetpe;     /* Addr of routine IEAVETPE.       @MLA                */
  void          *ecvtsymt;     /* Address of the system static    @LXC                */
  void          *ecvtesym;     /* Address of IEAVESYM routine.    @LXC                */
  struct ä
    unsigned char  _ecvtflg1;    /* First miscellaneous flag        @LXA */
    unsigned char  _filler1Ä3Ü;  /* @LXA                                 */
    ü ecvtflgs;
  void          *ecvtesy1;     /* Address of routine IEAVESY1.    @LXA                */
  void          *ecvtpetm;     /* Addr of routine IEAVPETM        @MHA                */
  void          *ecvtetpt;     /* Addr of routine IEAVETPT        @MHA                */
  void          *ecvtenvt;     /* -           Pointer to Enclave Vector Table @LWA    */
  int            ecvtvser;     /* Reserved for use by VSE         @P7C                */
  void          *ecvtlsen;     /* Address of module IEAVLSEN      @04A                */
  void          *ecvtdgnb;     /* Address of DGNB                 @D7A                */
  unsigned char  ecvthdnmÄ8Ü;  /* Hardware name of the processor  @LXA                */
  unsigned char  ecvtlpnmÄ8Ü;  /* LPAR name of the processor      @LXA                */
  unsigned char  ecvtvmnmÄ8Ü;  /* VM userid of the virtual        @LXA                */
  void          *ecvtgrm;      /* Address of routine CRG52GRM     @M3C                */
  void          *ecvtseif;     /* Address of routine CRG52SEI.    @M3C                */
  void          *ecvtaes;      /* Address of routine IEAVEAES.    @05A                */
  void          *ecvtrsmt;     /* Address of registration         @05A                */
  unsigned char  ecvtmmemÄ16Ü; /* Exit manager name of the   @05A                     */
  void          *ecvtipa;      /* Address of the Initialization   @LZA                */
  unsigned char  ecvtmmetÄ16Ü; /* -          Exit Manager Token of the MVS   @M3A     */
  void          *ecvtmmeq;     /* MVS Miscellaneous Event Exit    @M3A                */
  void          *ecvtmmea;     /* Address of the MVS              @M3A                */
  void          *ecvteaex;     /* Address of routine IEAVEAEX.    @05A                */
  void          *ecvteaux;     /* Address of routine IEAVEAUX.    @M3A                */
  void          *ecvtmmec;     /* Count of RMs registered with    @M3A                */
  void          *ecvtipst;     /* Address of IPST                 @PAA                */
  void          *ecvtrrsw;     /* Address of the RRS world object @M3A                */
  void          *ecvtrrtt;     /* RRS EOT Resmgr address          @0AA                */
  void          *ecvtrrmt;     /* RRS EOM Resmgr Address          @0AA                */
  void          *ecvtpred;     /* Product Enable/Disable block    @LYA                */
  unsigned char  ecvtcemtÄ16Ü; /* -          Exit Manager Token of the       @M4A     */
  void          *ecvtceme;     /* Address of routine CTXEMGRE.    @M4A                */
  void          *ecvtcemr;     /* Address of routine CTXCEMGR.    @M4A                */
  int            ecvtpseq;     /* Product sequence number.                            */
  unsigned char  ecvtpownÄ16Ü; /* Product owner                   @LYA                */
  unsigned char  ecvtpnamÄ16Ü; /* Product name.                   @LYA                */
  unsigned char  ecvtpverÄ2Ü;  /* Product version                 @LYA                */
  unsigned char  ecvtprelÄ2Ü;  /* Product release                 @LYA                */
  unsigned char  ecvtpmodÄ2Ü;  /* Product mod level               @LYA                */
  unsigned char  ecvtr206;     /* Reserved                        @MIC                */
  unsigned char  ecvtttfl;     /* Transaction Trace flags.        @MIA                */
  void          *ecvtcurx;     /* Address of routine CTXCSURX.    @M4A                */
  void          *ecvtctxr;     /* Addr of routine CTXRSMGR.       @M7A                */
  void          *ecvtcrgr;     /* Addr of routine CRGRSMGR.       @M8A                */
  void          *ecvtcsrb;     /* Addr of routine CTXSRB.         @MBA                */
  void          *ecvtrem1;     /* Addr of routine CRGRREM1 entry  @M6A                */
  void          *ecvtrem2;     /* Addr of routine CRGRREM2 entry  @M9A                */
  void          *ecvtxfr3;     /* Addr of routine IEAVXFR3 entry  @PCC                */
  void          *ecvtr224;     /* Reserved                        @MCA                */
  void          *ecvtdlpf;     /* Address of first CDE on dynamic @MCA                */
  void          *ecvtdlpl;     /* Address of last CDE on dynamic  @MCA                */
  void          *ecvtsrbr;     /* Return for T6EXIT RETURN=SRBSUSP                    */
  void          *ecvtbcba;     /* Address of SOMObjects data structure                */
  unsigned char  ecvtpidnÄ8Ü;  /* PID number                      @MEA                */
  struct ä
    void          *_ecvtrmdp; /* CRGREMD Parameter List Free Pool Ptr */
    int            _ecvtrmds; /* CRGREMD Parameter List Free Pool     */
    ü ecvtrmd;
  void          *ecvtrsu1;     /* Addr of routine IEAVRSU1 (Resume                    */
  void          *ecvtpest;     /* Address of the Pause Element Segment                */
  struct ä
    void          *_ecvtcdyn; /* Context Services Dynamic Area   @MFA */
    void          *_ecvtcdys; /* Context Services Dynamic Area   @MFA */
    ü ecvtcdya;
  unsigned char  ecvteormÄ8Ü;  /* -           Potential real high storage address     */
  void          *ecvtcbls;     /* Addr of IEAVCBLS (see IHACBLS)  @MMA                */
  void          *ecvtrins;     /* Address of RRS installed function                   */
  void          *ecvtttca;     /* Address of Transaction Trace    @MMA                */
  void          *ecvtlcxt;     /* Address of LCCXVT               @MMA                */
  unsigned char  ecvtoesiÄ4Ü;  /* -          When non-zero, orig SCCBMESI    @0BA     */
  unsigned char  ecvtoxsbÄ4Ü;  /* -          When non-zero, orig SCCBNXSB    @0BA     */
  void          *ecvtestu;     /* SVC update service              @MMA                */
  void          *ecvtrbup;     /* -          IEARBUP service                 @MMA     */
  unsigned char  ecvtosaiÄ4Ü;  /* -          When non-zero, orig SCCBSAIX    @MMA     */
  unsigned char  ecvtosarÄ2Ü;  /* -          When non-zero, original SCCBSAR @MMA     */
  unsigned char  ecvtr286Ä2Ü;  /* -          Reserved                        @MMA     */
  void          *ecvtcrdt;     /* Entry for RACF to get CDRACDTY bits                 */
  unsigned char  ecvtr28cÄ8Ü;
  void          *ecvtxpcb;
  unsigned char  ecvtlpubÄ16Ü; /* -         IBM Publisher ID for ILM        @MNA      */
  unsigned char  ecvtlpidÄ8Ü;  /* -          IBM Product ID for ILM          @MNA     */
  unsigned char  ecvtlvidÄ8Ü;  /* -           IBM Version ID for ILM          @MNA    */
  unsigned char  ecvtlklnÄ4Ü;  /* -           Length of IBM Key for ILM       @MNA    */
  void          *ecvtlkad;     /* -           Address of IBM Key for ILM      @MNA    */
  unsigned char  ecvtr2c0Ä16Ü; /* -          Reserved.                       @MNA     */
  unsigned char  ecvtr2d0Ä16Ü; /* -          Reserved.                       @MNA     */
  unsigned char  ecvtr2e0Ä16Ü; /* -          Reserved.                       @MNA     */
  unsigned char  ecvtr2f0Ä16Ü; /* -          Reserved.                       @MNA     */
  void          *ecvtslca;     /* -          Owner: LE                       @MNA     */
  unsigned char  ecvtr304Ä12Ü; /* -          Reserved.                       @MNA     */
  void          *ecvt4qv1;     /* IEAV4QV1                        @MQA                */
  void          *ecvt4qv2;     /* IEAV4QV2                        @MQA                */
  void          *ecvt4qv3;     /* IEAV4QV3                        @MQA                */
  void          *ecvt4qv4;     /* IEAV4QV4                        @MQA                */
  void          *ecvt4qv5;     /* IEAV4QV5                        @MQA                */
  void          *ecvt4qv6;     /* IEAV4QV6                        @MQA                */
  void          *ecvt4qv7;     /* IEAV4QV7                        @MQA                */
  void          *ecvttenc;     /* Timeused Enclave                @H1A                */
  void          *ecvtscf;      /* IEAVSCAF                        @MSA                */
  void          *ecvttsth;     /* IEAVTSTH                        @PJC                */
  void          *ecvtstc5;     /* -       STCKSYNC, AR MODE,              @MVA        */
  void          *ecvtstc6;     /* -       STCKSYNC, NON-AR MODE,          @MVA        */
  void          *ecvtch1;      /* IEAVECH1 Storage Check Service  @PLA                */
  void          *ecvtch2;      /* IEAVECH2 Storage Check Service  @PLA                */
  void          *ecvtceab;     /* CEAB                            @MYA                */
  void          *ecvtaxrb;     /* AXRB                            @MYA                */
  void          *ecvtect;      /* IEAVEECT service                @MYA                */
  unsigned char  ecvtr354Ä28Ü; /* @MYC                                                */
  double         ecvtend;      /* End of the ECVT.                @M4A                */
  ü;

#define ecvtios1 ecvtiosf._ecvtios1
#define ecvtios2 ecvtiosf._ecvtios2
#define ecvtios3 ecvtiosf._ecvtios3
#define ecvtios4 ecvtiosf._ecvtios4
#define ecvtssdf ecvtssdd._ecvtssdf
#define ecvtssds ecvtssdd._ecvtssds
#define ecvtflg1 ecvtflgs._ecvtflg1
#define ecvtrmdp ecvtrmd._ecvtrmdp
#define ecvtrmds ecvtrmd._ecvtrmds
#define ecvtcdyn ecvtcdya._ecvtcdyn
#define ecvtcdys ecvtcdya._ecvtcdys

/* Values for field "ecvtios1" */
#define ecvtchsc 0x80 /* -           RESERVED FOR IBM USE            @L7A */

/* Values for field "ecvtaloc" */
#define ecvtwarn 0x80 /* -           Warn about allocations          @09A */
#define ecvtfail 0x40 /* -           Fail allocations                @09A */

/* Values for field "ecvtocvt" */
#define ecvtomvs 0x80 /* If on, OpenMVS is up and        @LMA             */

/* Values for field "ecvtgmod" */
#define ecvtgnon 0x00 /* GRS operating with option NONE. @LUA             */
#define ecvtgrng 0x01 /* GRS operating in ring mode.     @LUA             */
#define ecvtgsta 0x02 /* GRS operating in star mode.     @M1A             */

/* Values for field "ecvtflg1" */
#define ecvtclnu 0x80 /* When set, this flag indicates   @LXA             */
#define ecvtpmac 0x40 /* Serialization: None.            @MOA             */

/* Values for field "ecvtttfl" */
#define ecvtttrc 0x80 /* Transaction Trace has been      @MIA             */
#define ecvttatf 0x40 /* If set on, TTrace is not active @MIA             */
#define ecvttesf 0x20 /* If set on, TTrace is not active @MIA             */
#define ecvttgmf 0x10 /* If set on, TTrace is not active @MIA             */
#define ecvttabt 0x08 /* If set on, TTrace is not active @MKA             */

/* Values for field "ecvtceab" */
#define ecvtceat 0x80 /* CEA has terminated              @MZA             */

/* Values for field "ecvtaxrb" */
#define ecvtaxrt 0x80 /* AXR has terminated              @MZA             */

#pragma pack(reset)
