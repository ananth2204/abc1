/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/msgmgr.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/



#ifndef INCLUDE_MSGMGR
#define INCLUDE_MSGMGR

#ifndef OWN_STDIO
#include <stdio.h>
#endif
#include "mvsbase.hpp"
#include "misc.hpp"

namespace isis_ns_mvs
	ä

	/*--------------------------------------------------------------------+
	|                                                                     |
	| Message generation                                                  |
	|                                                                     |
	+--------------------------------------------------------------------*/


	enum MSGETypesämsgundef = 0, msgint    = 1,
		msgshort = 2, msgcharp  = 3,
		msgchar  = 4,  msgmvsSTRING = 5ü;


	enum MSGEFormämsgfundef = 0, msgfd = 1, msgfs = 2, msgfx =3 , msgfc = 4ü;
	class MSGE
		ä
		private:
			int         length;
			MSGEForm    form;
			MSGETypes   type;
			char *      to;
			unionä
				char     mchar;
				int      mint;
				short    mshort;
				char   * mcharp;
				mvsSTRING * mmvsSTRING;
				ü;
		public:
			MSGE();
			MSGE(int i,int l=sizeof(int), MSGEForm f = msgfd);
			MSGE(short s,int l = sizeof(short), MSGEForm f= msgfd);
			MSGE(char * c,int l = 0, MSGEForm f = msgfs);
			MSGE(const mvsSTRING &s,int l = 0,MSGEForm f = msgfs );
			MSGE(char c);

			ßMSGE()
				ä
				if ( type == msgmvsSTRING) delete mmvsSTRING;
				if ( to ) delete ÄÜ to;
				ü
			char * format();
		ü;


	class EOLä
		ü;
	const EOL eol=EOL();

	MSGE * tCHARp(char * ,int  = 0);

	MSGE * tINT(int ,int = sizeof(int));

	MSGE * tSHORT(int ,int  = sizeof(short));

	MSGE * tmvsSTRING(mvsSTRING & ,int  = 0);

	MSGE * tHEX(int  ,int = (sizeof(int)*2) );

	MSGE * tHEX(char * , int);



	/* structure table for the used ENTRY     panels                      */
	enum FLAG_VALUEä FLAG_TEXT = 5, FLAG_IO = 4ü;

	typedef   struct  ENTRY
		ä
		char * name     ;
		char flag       ;
		int  xcoord     ;
		int  ycoord     ;
		int  length     ;
		char attrib     ;
		int  access     ;
		char fieldtype  ;
		char align      ;
		char caps       ;
		char * defvalue ;
		ü
	entry               ;


	/* the HELP and LIST panels and the messages need no structure defin's*/
	/* structure table for the used SELECTION panels                      */

	typedef   struct  SELECTION
		ä
		char * line     ;
		int  access     ;
		ü
	selection           ;
	struct et
		ä
		char *   cid ;
		char * * ett;
		ü ;





	struct TEXTENTRY
		ä
		int i;
		char * t;
		ü;


	class  MessageTEXT
		ä
		private:
			char timestemp;
			int (*printfv)(char *);
			char * msgfilename;
			bool   logger;
			bool   onlylogger;
			FILE  * msgfile;
			TEXTENTRY *  vector;
			MSGE * vÄ8Ü;
			int    vi;
			int    number;
			char   defltÄ256Ü;

		public:
			MessageTEXT(char * = 0,char * = 0);
			ßMessageTEXT();
			MessageTEXT& operator<<(char *);
			MessageTEXT& operator<<(const mvsSTRING &);
			//MessageTEXT& operator<<(short);
			MessageTEXT& operator<<(int );
			char *       operator<<(const EOL);
			MessageTEXT& operator<<(void *);
			char * getText(int);
			int    copyText(int, char *, int);
			char * print(char *);
			void   resetPrintFv()ä printfv = 0;ü
		void   setPrintFv(int (*pfv)(char *))ä printfv= pfv;ü
	void   setLogger(const char *);
	void   setOnlyLogger(const char * l)
		ä
		setLogger(l);
		onlylogger = logger;
		ü
	void   setFILE(FILE *);
	FILE*  getFILE()äreturn msgfile;ü
void   setFileName(char *);
void   setTimeStempFlag(char c = 1)ätimestemp = c;ü
char   getTimeStempFlag()ä return timestemp;ü
void   setNumber(int n);
		ü;

	ISIS_EXT_C typedef void * (*EXT_C_fp)();


	class ExternalTEXT
		ä
		private:
			EXT_C_fp fp;
			char   language;
			char   modulnameÄ8Ü;
			void * text ;
			void init(char * name);
		public:
			ExternalTEXT(char * name,char lang);
			ExternalTEXT(char * name);

			//???~TEXT(){if (fp) unloadm(fp);}
			int         MSGTEXT(int id, char * buff,int len);
			char      * HelpText(char * hid);
			entry     * EntryText(char * hid);
			selection * SelectionText(char * hid);
		ü;

	extern ExternalTEXT * externaltext;



	extern  MessageTEXT * messagetext;
	int initMessageText();

	int     Error(int , ...);
	char *  Message(int , ...);
	char *  getErrorText();
	char *  getMessageText();
	MessageTEXT& Err(int);
	MessageTEXT& Msg(int);

	ü //namespace isis_ns_mvs

using namespace isis_ns_mvs;

#endif
