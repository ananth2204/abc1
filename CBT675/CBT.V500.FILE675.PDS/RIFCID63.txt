 /* REXX                                                             */
 /* ANALYZE IFCID 63 - FROM SMF 102 RECORD                           */
 /* (C) ISAAC YASSIN - 1998 - 2004.                                  */
 /********************************************************************/
 TRACE O
 /********************************************************************/
 /* OUTPUT CAN BE IN EITHER 1 LONG LINE (UP TO 5000 BYTES)           */
 /* OR IT CAN BE FORMATED INTO 70 BYTES LINES SO IT IS READABLE      */
 /* OUTPUT FILE HAS TO BE ADJUSTED ACCORDINGLY                       */
 /********************************************************************/
 PARSE UPPER ARG FORMAT
 IF LEFT(FORMAT,1) /= 'F' THEN FORMAT='N'
 CALL INIT1
 NUMERIC DIGITS 20
 COUNT=0;
 "EXECIO 5000 DISKR SMF (STEM SMF.)"
 SAY " STARTING  -  TIME IS: "TIME() ;
 DO WHILE SMF.0 > 0
    DO I = 1 TO SMF.0
       RECORD = SMF.I
       /*-----------------------------------------------------------*/
       /* GET RID OF UNWANTED RECORDS                               */
       /*-----------------------------------------------------------*/
       PRD_NUM = C2D(SUBSTR(RECORD,31,2))   /* # OF PRODUCT REPEATS */
       IF PRD_NUM = 0 THEN ITERATE          /* NO REPEAT - GET OUT  */
       PRD_OFF = C2D(SUBSTR(RECORD,25,4))   /* PRODUCT OFFSET       */
       IFCID   = C2D(SUBSTR(RECORD,PRD_OFF+2,1)) /* GET IFCID VALUE */
       IF IFCID /= 63 THEN ITERATE          /* GET ONLY IFCID 63    */
       /*-----------------------------------------------------------*/
       /* GET OTHER IMPORTANT DATA                                  */
       /*-----------------------------------------------------------*/
       DATE = SMFDATE(SUBSTR(RECORD,7,4))   /* IFCID DATE           */
       TIME = SMFTIME(SUBSTR(RECORD,3,4))   /* IFCID TIME           */
       IO_TIME = DATE'-'TIME'0000'          /* MAKE IE TIMESTAMP    */
       SYSID = SUBSTR(RECORD,11,4)          /* COMPUTER NAME        */
       SSID  = SUBSTR(RECORD,15,4)          /* DB2 SSID NAME        */
       PRD_LEN = C2D(SUBSTR(RECORD,29,2))   /* PRODUCT LENGHT       */
       DAT_OFF = C2D(SUBSTR(RECORD,33,4))   /* DATA OFFSET          */
       DAT_LEN = C2D(SUBSTR(RECORD,37,2))   /* DATA LENGTH          */
       DAT_SQL = SUBSTR(RECORD,DAT_OFF+1,DAT_LEN-4)  /* THE SQL     */
       IF FORMAT = 'N' THEN QUEUE DAT_SQL   /* 5000 BYTES           */
       ELSE CALL WRITE_SQL                  /* FORMATED SQL         */
    END
    COUNT=COUNT + QUEUED();
    "EXECIO" QUEUED() "DISKW SQLCMDS"
    "EXECIO 5000 DISKR SMF (STEM SMF.)"
    SAY " COUNT="COUNT".   TIME IS: "TIME() ;
 END
 "EXECIO 0 DISKR SMF (STEM SMF. FINIS)"
 "EXECIO 0 DISKW SQLCMDS(FINIS)"
RETURN
/*********************************************************************/
WRITE_SQL:
/*--------------------------------------------------------*/
/* WRITE SQL                                              */
/*   AS SQL LENGTH CAN BE UP TO 5000 BYTES WE SPLIT IT    */
/*   THE 5000 BYTES LIMITE IS FORCED BY IBM               */
/*--------------------------------------------------------*/
QUEUE COPIES('=',70)
QUEUE "MACHINE: "SYSID" | SSID: "SSID" | IO-TIME: "IO_TIME

LINE='';
DO I1=1 TO WORDS(DAT_SQL);
   CURRENT_WORD=STRIP(SUBWORD(DAT_SQL,I1,1));
   SELECT ;
     WHEN LENGTH(LINE) + LENGTH(CURRENT_WORD) >= 70 THEN CALL Q_LINE;
     WHEN WORDPOS(CURRENT_WORD, ,
         'AND OR NOT ( ) WHEN AFTER BEFORE ' ,
         'BEGIN END VALUES  ',
         'REFERENCING FOR MODE') > 0
          THEN CALL Q_LINE;
     WHEN WORDPOS(CURRENT_WORD, ,
                 'FROM WHERE BETWEEN GROUP ORDER ' ,
                 'INSERT UPDATE DELETE SELECT SET ' ) > 0
          THEN DO;
                 CALL Q_LINE;
                 LINE=CURRENT_WORD ;
                 CALL Q_LINE;
                 CURRENT_WORD='';
               END;
     OTHERWISE NOP;
   END;
   LINE=LINE||CURRENT_WORD||' ' ;
END
CALL Q_LINE;  /* PRINT LAST LINE */
RETURN
/**************************************************************/
Q_LINE:
QUEUE LINE ;
LINE=''
RETURN
/**************************************************************/
INIT1:
MSG(OFF)
"FREE F(SQLCMDS)"
/*-----------------------------------------------------------------*/
/* ALLOCATE OUTPUT FILE                                            */
/*-----------------------------------------------------------------*/

IF FORMAT = 'N' THEN
DO
  LREC=5000
  BLKS=25000
END
ELSE
DO
  LREC = 80
  BLKS = 27920
END
OUT_DSN = "'"||USERID()||".DYNSQL.D"||DATE(J)||".T"||TIME(S)||"'"

IF SYSDSN(OUT_DSN) = "OK" THEN
   "ALLOC F(SQLCMDS) DA(" || OUT_DSN || ") OLD REU"
ELSE
   "ALLOC F(SQLCMDS) DA(" || OUT_DSN || ") NEW CATALOG " ||,
    "UNIT(SORTWK) SPACE(300 300) CYL RELEASE " ||,
    "LRECL("LREC") BLKSIZE("BLKS") " ||,
    "RECFM(F B) DSORG(PS)"

/*-----------------------------------------------------------------*/
/* DATE CALCULATIONS                                               */
/*-----------------------------------------------------------------*/
DAYS.1  = 31
DAYS.2  = 28
DAYS.3  = 31
DAYS.4  = 30
DAYS.5  = 31
DAYS.6  = 30
DAYS.7  = 31
DAYS.8  = 31
DAYS.9  = 30
DAYS.10 = 31
DAYS.11 = 30
DAYS.12 = 31
DAYLIST.1 = ''
DO I = 1 TO 12
   DO J = 1 TO DAYS.I
      DAYLIST.1 = DAYLIST.1||RIGHT(I,2,0)'-'RIGHT(J,2,0)
   END
END
DAYS.2 = 29
DAYLIST.0 = ''
DO I = 1 TO 12
   DO J = 1 TO DAYS.I
      DAYLIST.0 = DAYLIST.0||RIGHT(I,2,0)'-'RIGHT(J,2,0)
   END
END
RETURN
/*******************************************************************/
SMFTIME: PROCEDURE
ARG SMFTIME
HSECS = C2D(SMFTIME)
SECS  = HSECS%100
HSECS = HSECS//100
MINS  = SECS%60
SECS  = SECS//60
HOURS = MINS%60
MINS  = MINS//60
RETURN RIGHT(HOURS,2,0)'.'RIGHT(MINS,2,0)'.'RIGHT(SECS,2,0)'.'||,
       RIGHT(HSECS,2,0)
/*******************************************************************/
SMFDATE: PROCEDURE EXPOSE DAYLIST. MONLIST.
ARG SMFDATE
SMFDATE = C2X(SMFDATE)
YEAR = SUBSTR(SMFDATE,2,3)+1900
JDAY = SUBSTR(SMFDATE,5,3)
NOLEAP = ((YEAR//4)=1)
MMDD = SUBSTR(DAYLIST.NOLEAP,JDAY*5-4,5)
RETURN YEAR'-'MMDD
/*******************************************************************/
