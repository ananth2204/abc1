{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012558000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE675.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE675.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\t'", "DS1TRBAL": "b'I\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xc1\\x00\\x07\\x04\\xc1\\x00\\n\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x11/\\x01\\x04\\x11/\\x01\\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-04-21T00:00:00", "modifydate": "2004-04-21T01:13:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-465"}, "text": "REGULAR CBT TAPE - VERSION 465    FILE:  675\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT465.FILE675\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   6 MEMBERS COUNTED; CUMULATIVE SIZE IS 895 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/21/04    01:13:25    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x04\\x11/\\x01\\x04\\x11/\\x01\\x07\\x00\\x13\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-04-21T00:00:00", "modifydate": "2004-04-21T01:07:57", "lines": 19, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam,\n\nAttached are the following REXXes:\n\n1. READLOGP -\n   Input is DSN of file with SYSSUMRY data from DB2\n      utility DSN1LOGP\n   Output are 5 reports pertaining to the work done\n      by DB2.\n\n2. SMF42 -\n   Analyzes SMF 42.6 records\n\n3. RIFCID63 -\n   Analyzes IFCID 63 from SMF 102 records - DB2 dynamic\n      SQL text.\n\n\nIsaac Yassin      yassini@bezeqint.net\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE675": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x11/\\x01\\x04\\x11/\\x01\\x12\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-04-21T00:00:00", "modifydate": "2004-04-21T01:12:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT-465"}, "text": "//***FILE 675 is from Isaac Yassin, and contains REXX execs         *   FILE 675\n//*           pertaining to DB2 reporting.  Details are below:      *   FILE 675\n//*                                                                 *   FILE 675\n//*     email:   yassini@bezeqint.net                               *   FILE 675\n//*                                                                 *   FILE 675\n//*     Attached are the following REXXes:                          *   FILE 675\n//*                                                                 *   FILE 675\n//*     1. READLOGP -                                               *   FILE 675\n//*        Input is DSN of file with SYSSUMRY data from DB2         *   FILE 675\n//*           utility DSN1LOGP                                      *   FILE 675\n//*        Output are 5 reports pertaining to the work done         *   FILE 675\n//*           by DB2.                                               *   FILE 675\n//*                                                                 *   FILE 675\n//*     2. SMF42 -                                                  *   FILE 675\n//*        Analyzes SMF 42.6 records                                *   FILE 675\n//*                                                                 *   FILE 675\n//*     3. RIFCID63 -                                               *   FILE 675\n//*        Analyzes IFCID 63 from SMF 102 records - DB2 dynamic     *   FILE 675\n//*           SQL text.                                             *   FILE 675\n//*                                                                 *   FILE 675\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "READLOGP": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x11/\\x01\\x04\\x11/\\x01\\x05\\x01\\xb1\\x01\\xb1\\x00\\x00\\xe8\\xc1\\xe2\\xe2\\xc9\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-21T00:00:00", "modifydate": "2004-04-21T01:05:00", "lines": 433, "newlines": 433, "modlines": 0, "user": "YASSIN"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "RIFCID63": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x11/\\x01\\x04\\x11/\\x01\\x05\\x00\\xaa\\x00\\xaa\\x00\\x00\\xe8\\xc1\\xe2\\xe2\\xc9\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-21T00:00:00", "modifydate": "2004-04-21T01:05:00", "lines": 170, "newlines": 170, "modlines": 0, "user": "YASSIN"}, "text": " /* REXX                                                             */\n /* ANALYZE IFCID 63 - FROM SMF 102 RECORD                           */\n /* (C) ISAAC YASSIN - 1998 - 2004.                                  */\n /********************************************************************/\n TRACE O\n /********************************************************************/\n /* OUTPUT CAN BE IN EITHER 1 LONG LINE (UP TO 5000 BYTES)           */\n /* OR IT CAN BE FORMATED INTO 70 BYTES LINES SO IT IS READABLE      */\n /* OUTPUT FILE HAS TO BE ADJUSTED ACCORDINGLY                       */\n /********************************************************************/\n PARSE UPPER ARG FORMAT\n IF LEFT(FORMAT,1) /= 'F' THEN FORMAT='N'\n CALL INIT1\n NUMERIC DIGITS 20\n COUNT=0;\n \"EXECIO 5000 DISKR SMF (STEM SMF.)\"\n SAY \" STARTING  -  TIME IS: \"TIME() ;\n DO WHILE SMF.0 > 0\n    DO I = 1 TO SMF.0\n       RECORD = SMF.I\n       /*-----------------------------------------------------------*/\n       /* GET RID OF UNWANTED RECORDS                               */\n       /*-----------------------------------------------------------*/\n       PRD_NUM = C2D(SUBSTR(RECORD,31,2))   /* # OF PRODUCT REPEATS */\n       IF PRD_NUM = 0 THEN ITERATE          /* NO REPEAT - GET OUT  */\n       PRD_OFF = C2D(SUBSTR(RECORD,25,4))   /* PRODUCT OFFSET       */\n       IFCID   = C2D(SUBSTR(RECORD,PRD_OFF+2,1)) /* GET IFCID VALUE */\n       IF IFCID /= 63 THEN ITERATE          /* GET ONLY IFCID 63    */\n       /*-----------------------------------------------------------*/\n       /* GET OTHER IMPORTANT DATA                                  */\n       /*-----------------------------------------------------------*/\n       DATE = SMFDATE(SUBSTR(RECORD,7,4))   /* IFCID DATE           */\n       TIME = SMFTIME(SUBSTR(RECORD,3,4))   /* IFCID TIME           */\n       IO_TIME = DATE'-'TIME'0000'          /* MAKE IE TIMESTAMP    */\n       SYSID = SUBSTR(RECORD,11,4)          /* COMPUTER NAME        */\n       SSID  = SUBSTR(RECORD,15,4)          /* DB2 SSID NAME        */\n       PRD_LEN = C2D(SUBSTR(RECORD,29,2))   /* PRODUCT LENGHT       */\n       DAT_OFF = C2D(SUBSTR(RECORD,33,4))   /* DATA OFFSET          */\n       DAT_LEN = C2D(SUBSTR(RECORD,37,2))   /* DATA LENGTH          */\n       DAT_SQL = SUBSTR(RECORD,DAT_OFF+1,DAT_LEN-4)  /* THE SQL     */\n       IF FORMAT = 'N' THEN QUEUE DAT_SQL   /* 5000 BYTES           */\n       ELSE CALL WRITE_SQL                  /* FORMATED SQL         */\n    END\n    COUNT=COUNT + QUEUED();\n    \"EXECIO\" QUEUED() \"DISKW SQLCMDS\"\n    \"EXECIO 5000 DISKR SMF (STEM SMF.)\"\n    SAY \" COUNT=\"COUNT\".   TIME IS: \"TIME() ;\n END\n \"EXECIO 0 DISKR SMF (STEM SMF. FINIS)\"\n \"EXECIO 0 DISKW SQLCMDS(FINIS)\"\nRETURN\n/*********************************************************************/\nWRITE_SQL:\n/*--------------------------------------------------------*/\n/* WRITE SQL                                              */\n/*   AS SQL LENGTH CAN BE UP TO 5000 BYTES WE SPLIT IT    */\n/*   THE 5000 BYTES LIMITE IS FORCED BY IBM               */\n/*--------------------------------------------------------*/\nQUEUE COPIES('=',70)\nQUEUE \"MACHINE: \"SYSID\" | SSID: \"SSID\" | IO-TIME: \"IO_TIME\n\nLINE='';\nDO I1=1 TO WORDS(DAT_SQL);\n   CURRENT_WORD=STRIP(SUBWORD(DAT_SQL,I1,1));\n   SELECT ;\n     WHEN LENGTH(LINE) + LENGTH(CURRENT_WORD) >= 70 THEN CALL Q_LINE;\n     WHEN WORDPOS(CURRENT_WORD, ,\n         'AND OR NOT ( ) WHEN AFTER BEFORE ' ,\n         'BEGIN END VALUES  ',\n         'REFERENCING FOR MODE') > 0\n          THEN CALL Q_LINE;\n     WHEN WORDPOS(CURRENT_WORD, ,\n                 'FROM WHERE BETWEEN GROUP ORDER ' ,\n                 'INSERT UPDATE DELETE SELECT SET ' ) > 0\n          THEN DO;\n                 CALL Q_LINE;\n                 LINE=CURRENT_WORD ;\n                 CALL Q_LINE;\n                 CURRENT_WORD='';\n               END;\n     OTHERWISE NOP;\n   END;\n   LINE=LINE||CURRENT_WORD||' ' ;\nEND\nCALL Q_LINE;  /* PRINT LAST LINE */\nRETURN\n/**************************************************************/\nQ_LINE:\nQUEUE LINE ;\nLINE=''\nRETURN\n/**************************************************************/\nINIT1:\nMSG(OFF)\n\"FREE F(SQLCMDS)\"\n/*-----------------------------------------------------------------*/\n/* ALLOCATE OUTPUT FILE                                            */\n/*-----------------------------------------------------------------*/\n\nIF FORMAT = 'N' THEN\nDO\n  LREC=5000\n  BLKS=25000\nEND\nELSE\nDO\n  LREC = 80\n  BLKS = 27920\nEND\nOUT_DSN = \"'\"||USERID()||\".DYNSQL.D\"||DATE(J)||\".T\"||TIME(S)||\"'\"\n\nIF SYSDSN(OUT_DSN) = \"OK\" THEN\n   \"ALLOC F(SQLCMDS) DA(\" || OUT_DSN || \") OLD REU\"\nELSE\n   \"ALLOC F(SQLCMDS) DA(\" || OUT_DSN || \") NEW CATALOG \" ||,\n    \"UNIT(SORTWK) SPACE(300 300) CYL RELEASE \" ||,\n    \"LRECL(\"LREC\") BLKSIZE(\"BLKS\") \" ||,\n    \"RECFM(F B) DSORG(PS)\"\n\n/*-----------------------------------------------------------------*/\n/* DATE CALCULATIONS                                               */\n/*-----------------------------------------------------------------*/\nDAYS.1  = 31\nDAYS.2  = 28\nDAYS.3  = 31\nDAYS.4  = 30\nDAYS.5  = 31\nDAYS.6  = 30\nDAYS.7  = 31\nDAYS.8  = 31\nDAYS.9  = 30\nDAYS.10 = 31\nDAYS.11 = 30\nDAYS.12 = 31\nDAYLIST.1 = ''\nDO I = 1 TO 12\n   DO J = 1 TO DAYS.I\n      DAYLIST.1 = DAYLIST.1||RIGHT(I,2,0)'-'RIGHT(J,2,0)\n   END\nEND\nDAYS.2 = 29\nDAYLIST.0 = ''\nDO I = 1 TO 12\n   DO J = 1 TO DAYS.I\n      DAYLIST.0 = DAYLIST.0||RIGHT(I,2,0)'-'RIGHT(J,2,0)\n   END\nEND\nRETURN\n/*******************************************************************/\nSMFTIME: PROCEDURE\nARG SMFTIME\nHSECS = C2D(SMFTIME)\nSECS  = HSECS%100\nHSECS = HSECS//100\nMINS  = SECS%60\nSECS  = SECS//60\nHOURS = MINS%60\nMINS  = MINS//60\nRETURN RIGHT(HOURS,2,0)'.'RIGHT(MINS,2,0)'.'RIGHT(SECS,2,0)'.'||,\n       RIGHT(HSECS,2,0)\n/*******************************************************************/\nSMFDATE: PROCEDURE EXPOSE DAYLIST. MONLIST.\nARG SMFDATE\nSMFDATE = C2X(SMFDATE)\nYEAR = SUBSTR(SMFDATE,2,3)+1900\nJDAY = SUBSTR(SMFDATE,5,3)\nNOLEAP = ((YEAR//4)=1)\nMMDD = SUBSTR(DAYLIST.NOLEAP,JDAY*5-4,5)\nRETURN YEAR'-'MMDD\n/*******************************************************************/\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMF42": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x11/\\x01\\x04\\x11/\\x01\\x05\\x00\\xf1\\x00\\xf1\\x00\\x00\\xe8\\xc1\\xe2\\xe2\\xc9\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-21T00:00:00", "modifydate": "2004-04-21T01:05:00", "lines": 241, "newlines": 241, "modlines": 0, "user": "YASSIN"}, "text": "//  JOBCARD\n//*\n//DUMMY EXEC PGM=IEFBR14\n//*\n//DELETE EXEC PGM=IDCAMS,COND=(0,LE)\n//SYSPRINT DD SYSOUT=*\n//SYSIN DD *\n DELETE 'ZZZ.SORTED.REC42'\n//*\n//FILTER EXEC SYNCSORT,COND=(0,LE)\n//SYSOUT DD SYSOUT=*\n//*SORTIN DD DISP=SHR,DSN=GS.CP.SMFTEMP.SYS9\n//SORTIN DD DISP=SHR,DSN=GS.CP.SMFTEMP.REC42\n//SORTOUT DD DSN=ZZZ.SORTED.REC42,DISP=(NEW,CATLG),\n// RECFM=VB,LRECL=32756,BLKSIZE=32760,SPACE=(CYL,(500,200))\n//SYSIN DD *\n SORT FIELDS=COPY\n INCLUDE COND=(6,1,FI,EQ,42,AND,23,2,FI,EQ,6,AND,\n    15,4,CH,EQ,C'SYS9',AND,\n    7,4,FI,GE,2881000,AND,7,4,FI,LE,5761000,\n AND,11,4,PD,EQ,100247)\n//*\n//ANALYZE EXEC REXXBAT\n//SMF DD DISP=SHR,DSN=ZZZ.SORTED.REC42,DCB=BUFNO=80\n//SYSPRINT DD DCB=(DSORG=PS,RECFM=FB,LRECL=257,BUFNO=80),\n//  DISP=(NEW,CATLG),DSN=ZZZ.SMF42.REPORT,\n//  UNIT=SYSDA,SPACE=(CYL,(300,300),RLSE)\n CALL INIT\n NUMERIC DIGITS 20\n COUNT=0;\n \"EXECIO 1000 DISKR SMF (STEM SMF.)\"\n DO WHILE SMF.0 > 0\n    DO I = 1 TO SMF.0\n       RECORD = SMF.I\n       DATE = SMFDATE(SUBSTR(RECORD,7,4))\n       TIME = SMFTIME(SUBSTR(RECORD,3,4))\n       IO_TIME = DATE'-'TIME'0000'\n       SYSID = SUBSTR(RECORD,11,4)\n\n       /*-----------------------------------------------------------*/\n       /* DATA FROM THE PRODUCT SECTION:                            */\n       /*   HOW LONG WAS THE FILE OPEN (MILISECONDS)                */\n       /*-----------------------------------------------------------*/\n       PRD_OFF = C2D(SUBSTR(RECORD,25,4))\n       PRD_LEN = C2D(SUBSTR(RECORD,29,2))\n       PRD_NUM = C2D(SUBSTR(RECORD,31,2))\n       IF PRD_NUM = 0 THEN ITERATE\n       SECTION = SUBSTR(RECORD,PRD_OFF-3,PRD_LEN)\n       TIME_OPEN = FORMAT((C2D(SUBSTR(SECTION,29,7))-,\n                   C2D(SUBSTR(SECTION,21,7)))%(16*1000),10)\n\n       /*-----------------------------------------------------------*/\n       /* DATA FROM THE JOB HEADER SECTION:                         */\n       /*   JOBNAME                                                 */\n       /*-----------------------------------------------------------*/\n       JHD_OFF = C2D(SUBSTR(RECORD,33,4))\n       JHD_LEN = C2D(SUBSTR(RECORD,37,2))\n       JHD_NUM = C2D(SUBSTR(RECORD,39,2))\n       IF JHD_NUM = 0 THEN ITERATE\n       SECTION = SUBSTR(RECORD,JHD_OFF-3,JHD_LEN)\n       JOB_NAME = SUBSTR(SECTION,1,8)\n       IO_LEN   = C2D(SUBSTR(SECTION,35,2))\n\n       /*-----------------------------------------------------------*/\n       /* READ ALL DATASET HEADER SECTIONS                          */\n       /*-----------------------------------------------------------*/\n       DSN_OFF = C2D(SUBSTR(SECTION,25,4))\n       DSN_LEN = C2D(SUBSTR(SECTION,29,2))\n       DO WHILE DSN_OFF > 0\n          /*--------------------------------------------------------*/\n          /* DATA FROM THE DATASET HEADER SECTION:                  */\n          /*   DSN                                                  */\n          /*   VOLSER                                               */\n          /*   BLKSIZE                                              */\n          /*   DEVN    - THE DEVICE NUMBER                          */\n          /*   DSTYPE  - TYPE OF DATASET (PS,PO,ETC)                */\n          /*--------------------------------------------------------*/\n          SECTION = SUBSTR(RECORD,DSN_OFF-3,DSN_LEN)\n          DSN     = SUBSTR(SECTION,5,44)\n          TYPE    = C2D(SUBSTR(SECTION,49,1))\n          DSTYPE  = TYPES.TYPE\n          VOLSER  = SUBSTR(SECTION,61,6)\n          DEVN    = C2X(SUBSTR(SECTION,67,2))\n          BLKSIZE = FORMAT(C2D(SUBSTR(SECTION,77,4)),5)\n          DSN_OFF = C2D(SUBSTR(SECTION,1,4))\n          IF LEFT(DSN,1)='04'X THEN ITERATE  /* ASTEX SPECIAL DSN */\n\n          /*--------------------------------------------------------*/\n          /* DATA FROM THE IO STATISTICS SECTION:                   */\n          /* RESP  - AVERAGE RESPONSE TIME                          */\n          /* CONN  - AVERAGE CONNECT TIME                           */\n          /* PEND  - AVERAGE PENDING TIME                           */\n          /* DISC  - AVERAGE DISCONNECT TIME                        */\n          /* CUQ   - AVERAGE CONTROL UNIT QUEUE TIME                */\n          /* IOSQ  - AVERAGE IOS QUEUE TIME (CALCULATED)            */\n          /* IOC#     - NUMBER OF IOS                               */\n          /* C_CAND#  - NUMBER OF CACHE CANDIDATES                  */\n          /* C_HITS   - NUMBER OF CACHE HITS                        */\n          /* W_CAND#  - NUMBER OF WRITE CACHE CANDIDATES            */\n          /* W_HITS   - NUMBER OF WRITE CACHE HITS                  */\n          /* SEQ_IO#  - NUMBER OF SEQUENTIAL IOS                    */\n          /* RLC_IO#  - NUMBER OF RECORD LEVEL CACHE IOS            */\n          /* NO_C_IO# - NUMBER OF INHIBIT CACHE IOS                 */\n          /* MAX_RESP - MAXIMUM RESPONSE TIME. FFU                  */\n          /* MAX_SERV - MAXIMUM SERVICE TIME. FFU                   */\n          /*--------------------------------------------------------*/\n          IO_OFF = C2D(SUBSTR(SECTION,53,4))\n          IF IO_OFF = 0 THEN ITERATE\n          SECTION  = SUBSTR(RECORD,IO_OFF-3,IO_LEN)\n          RESP  = C2D(SUBSTR(SECTION,1,4))/8\n          CONN  = C2D(SUBSTR(SECTION,5,4))/8\n          PEND  = C2D(SUBSTR(SECTION,9,4))/8\n          DISC  = C2D(SUBSTR(SECTION,13,4))/8\n          CUQ   = C2D(SUBSTR(SECTION,17,4))/8\n          IOSQ  = RESP-(CONN+PEND+DISC+CUQ)\n          RESP  = FORMAT(RESP,5,2)\n          CONN  = FORMAT(CONN,5,2)\n          PEND  = FORMAT(PEND,5,2)\n          DISC  = FORMAT(DISC,5,2)\n          CUQ   = FORMAT(CUQ,5,2)\n          IOSQ  = FORMAT(IOSQ,5,2)\n          IO#      = FORMAT(C2D(SUBSTR(SECTION,21,4)),10)\n          C_CAND#  = FORMAT(C2D(SUBSTR(SECTION,25,4)),10)\n          C_HITS   = FORMAT(C2D(SUBSTR(SECTION,29,4)),10)\n          W_CAND#  = FORMAT(C2D(SUBSTR(SECTION,33,4)),10)\n          W_HITS   = FORMAT(C2D(SUBSTR(SECTION,37,4)),10)\n          SEQ_IO#  = FORMAT(C2D(SUBSTR(SECTION,41,4)),10)\n          RLC_IO#  = FORMAT(C2D(SUBSTR(SECTION,45,4)),10)\n          NO_C_IO# = FORMAT(C2D(SUBSTR(SECTION,49,4)),10)\n          MAX_RESP = FORMAT(0,5,2)\n          MAX_SERV = FORMAT(0,5,2)\n\n          /*--------------------------------------------------------*/\n          /* WRITE FOR DB/2 TO LOAD IT                              */\n          /*--------------------------------------------------------*/\n          QUEUE IO_TIME     ||,\n                SYSID       ||,\n                TIME_OPEN   ||,\n                JOB_NAME    ||,\n                DSN         ||,\n                DSTYPE      ||,\n                VOLSER      ||,\n                DEVN        ||,\n                BLKSIZE     ||,\n                RESP        ||,\n                CONN        ||,\n                DISC        ||,\n                PEND        ||,\n                CUQ         ||,\n                IOSQ        ||,\n                IO#         ||,\n                C_CAND#     ||,\n                C_HITS      ||,\n                W_CAND#     ||,\n                W_HITS      ||,\n                SEQ_IO#     ||,\n                RLC_IO#     ||,\n                NO_C_IO#    ||,\n                MAX_RESP    ||,\n                MAX_SERV    ||,\n                ''\n       END\n    END\n    COUNT=COUNT + QUEUED();\n    \"EXECIO\" QUEUED() \"DISKW SYSPRINT\"\n    \"EXECIO 1000 DISKR SMF (STEM SMF.)\"\n    SAY \"COUNT=\"COUNT\". TIME IS: \"TIME() ;\n END\n \"EXECIO 0 DISKR SMF (STEM SMF. FINIS)\"\n \"EXECIO 0 DISKW SYSPRINT (FINIS)\"\n EXIT\n\n INIT:\n TYPES.   = '??????'\n TYPES.0  = 'OTHER '\n TYPES.1  = 'PS    '\n TYPES.2  = 'PDS   '\n TYPES.3  = 'PDSE  '\n TYPES.4  = 'DA    '\n TYPES.5  = 'ISAM  '\n TYPES.6  = 'EXCP  '\n TYPES.7  = 'EXT-PS'\n TYPES.10 = 'HFS   '\n TYPES.16 = 'KSDS/D'\n TYPES.17 = 'KSDS/I'\n TYPES.18 = 'RRDS/D'\n TYPES.19 = 'RRDS/I'\n TYPES.20 = 'RRDS/F'\n TYPES.21 = 'LDS   '\n TYPES.22 = 'ESDS  '\n\n /*-----------------------------------------------------------------*/\n /* DATE CALCULATIONS                                               */\n /*-----------------------------------------------------------------*/\n DAYS.1  = 31\n DAYS.2  = 28\n DAYS.3  = 31\n DAYS.4  = 30\n DAYS.5  = 31\n DAYS.6  = 30\n DAYS.7  = 31\n DAYS.8  = 31\n DAYS.9  = 30\n DAYS.10 = 31\n DAYS.11 = 30\n DAYS.12 = 31\n DAYLIST.1 = ''\n DO I = 1 TO 12\n    DO J = 1 TO DAYS.I\n       DAYLIST.1 = DAYLIST.1||RIGHT(I,2,0)'-'RIGHT(J,2,0)\n    END\n END\n DAYS.2 = 29\n DAYLIST.0 = ''\n DO I = 1 TO 12\n    DO J = 1 TO DAYS.I\n       DAYLIST.0 = DAYLIST.0||RIGHT(I,2,0)'-'RIGHT(J,2,0)\n    END\n END\n RETURN\n\n SMFTIME: PROCEDURE\n ARG SMFTIME\n HSECS = C2D(SMFTIME)\n SECS  = HSECS%100\n HSECS = HSECS//100\n MINS  = SECS%60\n SECS  = SECS//60\n HOURS = MINS%60\n MINS  = MINS//60\n RETURN RIGHT(HOURS,2,0)'.'RIGHT(MINS,2,0)'.'RIGHT(SECS,2,0)'.'||,\n        RIGHT(HSECS,2,0)\n\n SMFDATE: PROCEDURE EXPOSE DAYLIST. MONLIST.\n ARG SMFDATE\n SMFDATE = C2X(SMFDATE)\n YEAR = SUBSTR(SMFDATE,2,3)+1900\n JDAY = SUBSTR(SMFDATE,5,3)\n NOLEAP = ((YEAR//4)=1)\n MMDD = SUBSTR(DAYLIST.NOLEAP,JDAY*5-4,5)\n RETURN YEAR'-'MMDD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT675/FILE675.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT675", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}