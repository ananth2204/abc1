.*================================================================*
.*                                                                *
.*   Module name -                                                *
.*                 @RXENTRY                                       *
.*                 Creates entrypoint and its prolog              *
.*                                                                *
.*   Description -                                                *
.*                 Creates entrypoint and its housekeeping        *
.*                 procedure                                      *
.*                                                                *
.*   Type -                                                       *
.*                 Assembly macro instruction                     *
.*                                                                *
.*   Syntax -                                                     *
.*                 @RXENTRY                                       *
.*                    ,type=<EP|CSECT|NONE>    default EP         *
.*                    ,basereg=<Rn|(Rm,Rn)>    default (R11,R12)  *
.*                    ,parmreg=<Rn>            default R10        *
.*                    ,workreg=<Rn>            default R8         *
.*                    ,svreg=<Rn>              default R13        *
.*                    ,argblok=<YES|NO>        default YES        *
.*                    ,regequ=<YES|NO>         default YES        *
.*                                                                *
.*   Author -                                                     *
.*                 Deru Sudibyo                                   *
.*                 Freelance consultant                           *
.*                 Nusantara IT ProClub                           *
.*                 Indonesia                                      *
.*                                                                *
.*                                                                *
.*   Modification log -                                           *
.*                                                                *
.*  +----------+-------+---------+----------------------------+   *
.*  |Date      | VRM   | Eng/Supp| Description                |   *
.*  +----------+-------+---------+----------------------------+   *
.*  |2004/03/05| 1.1.0 | Deru S. | First developed            |   *
.*  |          |       |         |                            |   *
.*  +----------+-------+---------+----------------------------+   *
.*                                                                *
.*                                                                *
.*================================================================*
         macro
&label   @RXENTRY &TYPE=EP,&BASEREG=(R11,R12),&PARMREG=R10,&WORKREG=R8,+
               &WORKLEN=WORKSETL,&SVREG=R13,&SVAREA=SAVEAREA,          +
               &LKREG=R14,&BASELBL=,&BASE=,&REGEQU=YES,&ARGBLOK=YES,   +
               &ARGBLEN=ARGBLOKL,&ARGREG=R9
         gblc  &wklen,&wkreg,&breg,&lbl
         gblb  &equate,&getstor,&trace
         lcla  &i,&nbreg
         lclb  &arg
         lclc  &usinglb,&breg2,&llbl
&llbl    setc   'DER'.'&SYSNDX'
&nbreg   seta  n'&BASEREG
         aif   (&nbreg gt 1).breg1
&breg    setc  '&BASEREG'
&breg2   setc  'NO'
         ago   .bregok
.breg1   anop
&breg    setc  '&BASEREG(1)'
&breg2   setc  '&BASEREG(2)'
.bregok  anop
&wkreg   setc  '&WORKREG'
&usinglb setc  ''
         aif   ('&ARGBLOK' eq 'YES').addarg
&wklen   setc  '&WORKLEN'
         ago   .cont1
.addarg  anop
&wklen   setc  '&WORKLEN+&ARGBLEN'
&arg     setb  1
.cont1   AIF   (T'&label ne 'O').OK
         mnote 8,'DRX004E Entry point name or label missing'
         mexit
.OK      AIF   ('&REGEQU' ne 'YES').endequ
         aif   (&equate).endequ
&lbl     setc   'DER'.'&SYSNDX'
&i       seta  0
.GRloop  aif   (&i gt 15).eqnext1
R&i      equ   &i
&i       seta  &i+1
         ago   .GRloop
.eqnext1 anop
&i       seta  0
.ARloop  aif   (&i gt 15).eqnext2
A&i      equ   &i
&i       seta  &i+1
         ago   .ARloop
.eqnext2 anop
&i       seta  0
.CRloop  aif   (&i gt 15).eqnext3
C&i      equ   &i
&i       seta  &i+1
         ago   .CRloop
.eqnext3 anop
F0       equ   0
F2       equ   2
F4       equ   4
F6       equ   6
$PARMREG equ   &PARMREG
$SAVEREG equ   &SVREG
&equate  setb  1
.endequ  AIF   ('&TYPE' eq 'EP').ep
         AIF   ('&TYPE' eq 'CSECT').csect
         ago   .skip
.ep      anop
         Entry &label
.skip    anop
         DS    0D
&label   EQU   *
         ago   .gohead
.csect   anop
&label   csect
.gohead  aif   (T'&BASELBL eq 'O').goon
&usinglb setc  '&BASELBL'
.goon    anop
         BAKR  &LKREG,0             Save regs, ARs etc
         LR    &parmreg,R1          Save parmlist address
         aif   (T'&BASE EQ 'O').ownbase
         aif   (T'&BASELBL eq 'O').adjust
         mnote 4,'DRX005W BASELBL=&BASELBL ignored for adjustable based+
                program'
.adjust  anop
&llbl.a  equ   (&label-&BASE)/2
         la    R1,&llbl.a
         sll   R1,1
.*       LAE   &breg,0(R15,0)
         LR    &breg,R15
         SLR   &breg,R1
         ago   .breg2
.ownbase anop
.*       LAE   &breg,0(R15,0)       Base register
         LR    &breg,R15
&usinglb USING &label,&basereg
.breg2   aif   (&nbreg eq 1).cknext
         LAE   &breg2,1
         LAE   &breg2,4095(&breg2,&breg)
.cknext  aif   ('&wkreg' ne 'NO').getwks
         ago   .trace
.getwks  aif   (&getstor).getwks1
.getwks1 anop
.*       la    r0,&wklen
.*       bas   r15,*+8
.*       dc    A(&lbl.x)
.*       l     r15,0(r15)
.*       basr  &wkreg,r15
         xr    r0,r0
         bas   &wkreg,&lbl.x
         LR    &svreg,R1
         LR    &wkreg,R0
         aif   (not &trace).trace01
         icm   r0,b'1111',=x'11111111'
.trace01 anop
*        XC    0(&worklen,&svreg),0(&svreg)  zap workset
         XC    0(worksave_length,&svreg),0(&svreg)  zap workset
         St    &wkreg,savesize       save the size
.*       LAE   &svreg,&svarea        save area addr in AR/R13
         LAE   &svreg,0(&svreg)      save area addr in AR/R13
         MVC   4(4,&svreg),=C'F1SA'  LS save area indicator
         mvc   traceid,=cl8'&label'
         aif   (not &arg).getstor
         LA    &argreg,&worklen.(&svreg)
.getstor aif   (&getstor).trace
         b     &lbl.z
&lbl.x   equ   *
         STORAGE OBTAIN,LOC=(31,31),LENGTH=&wklen
         br    &wkreg
&lbl.z   equ   *
&getstor setb  1
.trace   aif   (not &trace).exit
         WTO   'DRX0001I Prolog of &label was just passed',            +
               routcde=(1,10)
.exit    anop
         mend
