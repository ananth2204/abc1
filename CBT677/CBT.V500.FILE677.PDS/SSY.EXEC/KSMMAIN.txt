/* REXX */
Trace Off
sysnm=Mvsvar("SYSNAME")
skel_dsn="'SSY.SKELS'"
Address ISPEXEC

/* Call the initialization routine */
x=init()
Do Forever

/* Build the menus */
/* Type menu */
darea1="*Type:  +"type"/ "
shad1= "            "
Do i=1 To Length(types)
  Do e=1 To t_num
    t_itm=Substr(types,i,1)
    If t_itm=t_c.e Then Do
      If t_itm=type Then darea1=darea1||"%"
      Else darea1=darea1||"/"
      t_cp.i=Length(darea1)
      darea1=darea1||t_d.e
      shad1=shad1||" "t_s.e
      e=t_num
    End
  End
End
/* Action menu */
darea2="*Action:+"action"/ "
shad2= "            "
Do i=1 To Length(actions)
  Do e=1 To a_num
    a_itm=Substr(actions,i,1)
    If a_itm=a_c.e Then Do
      If a_itm=action Then darea2=darea2||"%"
      Else darea2=darea2||"/"
      a_cp.i=Length(darea2)
      darea2=darea2||a_d.e
      shad2=shad2||" "a_s.e
    End
  End
End
/* Item menu */
If i_num>0 Then Do
  darea3="*Item:  +"item"/ "
  shad3= " "
  shad4= " "
  darea4=""
/* Handle page up and down (no PF keys for the moment...) */
  last_i=first_i+kdepth
  If last_i>i_num Then last_i=i_num
  If last_i<i_num Then darea3=darea3||"   /More"
  If first_i>0 Then darea3=darea3||"   /Less"
/* Items List */
  Do i=1 To last_i-first_i
    e=i+first_i
    darea4=darea4||"        "
    If i=item Then darea4=darea4||"Â¢"Left(i,2)"/ "
    Else darea4=darea4||"/"Left(i,2)"\ "
    darea4=darea4||i.e
    darea4=darea4||Copies(" ",i*kwidth-Length(darea4))
  End
End
Else Do
/* No items to display */
 darea3=""
 shad3=""
 darea4=""
 shad4=""
End

/* Display the panel */
cpos="0010"
If cur="DAREA4" Then cur="DAREA3"
Else If cur<>"DAREA2"&cur<>"DAREA3" Then cur="DAREA1"
"DISPLAY PANEL(KSMPRIM) CURSOR("cur") CSRPOS("cpos")"
prc=Rc
If prc<>0 Then Exit
cpos=cpos+0
exec="Y"

/* Check cursor position */
/* Handle cursor position in type menu */
If cur="DAREA1"&cpos>13 Then Do
  Do i=Length(types) To 1 By -1
    If cpos>t_cp.i Then Do
      type=Substr(types,i,1)
      i=1
      exec="N"
    End
  End
End
Else type=Substr(darea1,10,1)
Upper type

/* Handle cursor position in action menu */
If cur="DAREA2"&cpos>13 Then Do
  Do i=Length(actions) To 1 By -1
    If cpos>a_cp.i Then Do
      action=Substr(actions,i,1)
      i=1
      exec="N"
    End
  End
End
Else action=Substr(darea2,10,1)
Upper action

/* Handle cursor position for page up-down (More-Less) */
If cur="DAREA3"&cpos>14 Then Do
  Select
    When cpos>25 Then Do
        pg=Substr(darea3,26,1)
        exec="N"
    End
    When cpos>17 Then Do
        pg=Substr(darea3,18,1)
        exec="N"
    End
    Otherwise pg="N"
  End
  Select
    When pg="M" Then first_i=first_i+kdepth
    When pg="L" Then first_i=first_i-kdepth
    Otherwise Nop
  End
End

/* Handle cursor position in items list */
If cur="DAREA4" Then Do
  i_sel=Trunc(cpos/kwidth)
  If i_sel<i_num Then Do
    item=i_sel+1
    exec="N"
  End
End
Else item=Substr(darea3,10,2)
item=Left(item,2)

/* Quit Action */
If action="Q" Then Exit

/* Do not perform action: cursor not in valid position */
If (cur="DAREA1"|cur="DAREA2")&cpos=12 Then exec="N"
If cur="DAREA3"&cpos=13 Then exec="N"

/* Reset menus */
If type=" " Then x=i_items()

/* Perform actions */
If exec="Y" Then x=exec()

/* Reformat item after actions */
item=left(item,2)
End

init:
/* Initialization routine */
"ISPEXEC PQUERY PANEL(KSMPRIM) AREANAME(DAREA4)",
                              "AREATYPE(KTYPE)",
                              "WIDTH(KWIDTH)",
                              "DEPTH(KDEPTH)",
                              "ROW(KROW)",
                              "COLUMN(KCOLUMN)"
kdepth=kdepth-3
/* Types */
t_c.1="D"
t_d.1="CDS"
t_s.1=" _ "
t_c.2="P"
t_d.2="Pol"
t_s.2="_  "
t_c.3="C"
t_d.3="Cf"
t_s.3="_ "
t_c.4="S"
t_d.4="Struc"
t_s.4="_    "
t_c.5="L"
t_d.5="SysLog"
t_s.5="   _  "
t_c.6="I"
t_d.6="PI"
t_s.6=" _"
t_c.7="O"
t_d.7="PO"
t_s.7=" _"
t_c.8="T"
t_d.8="TClass"
t_s.8="_     "
t_c.9="G"
t_d.9="xcfGrp"
t_s.9="   _  "
t_c.10="N"
t_d.10="CoNn"
t_s.10="  _ "
t_num=10
/* types="DPCSLIOTG" */
types="DPCS"
type="D"

/* Actions */
a_c.1="L"
a_d.1="List"
a_s.1="_   "
a_c.2="N"
a_d.2="New"
a_s.2="_  "
a_c.3="D"
a_d.3="Display"
a_s.3="_      "
a_c.4="W"
a_d.4="PsWitch"
a_s.4="  _    "
a_c.5="C"
a_d.5="aCouple"
a_s.5=" _     "
a_c.6="S"
a_d.6="Start"
a_s.6="_    "
a_c.7="O"
a_d.7="stOp"
a_s.7="  _ "
a_c.8="R"
a_d.8="Report"
a_s.8="_     "
a_c.9="P"
a_d.9="Populate"
a_s.9="P       "
a_c.10="I"
a_d.10="RebuIld"
a_s.10="    _  "
a_c.11="F"
a_d.11="Force"
a_s.11="_    "
a_c.12="X"
a_d.12="DupleX"
a_s.12="     _"
a_c.13="U"
a_d.13="Unduplex"
a_s.13="_       "
a_c.14="A"
a_d.14="Alter"
a_s.14="_    "
a_c.15="Q"
a_d.15="Quit"
a_s.15="_   "
a_num=15
actions="LNQ"
action="L"
/* Items */
i_num=0
item="  "
showcon="N"
Return 0

i_items:
/* Reset the menus in case type field is blank */
i_num=0
item="  "
actions="LNQ"
action="L"
types="DPCS"
type="D"
cur="DAREA1"
exec="N"
showcon="N"
Return 0

exec:
/* Choose action based on type */
Select
  When type="D" Then x=e_cds()
  When type="P" Then x=e_pol()
  When type="C" Then x=e_cf()
  When type="S" Then x=e_str()
  When type="N" Then x=e_con()
  Otherwise Nop
End
Return 0

/* Couple datasets */

e_cds:
/* Handle couple dataset actions */
Select
  When action="L" Then x=list_cds()
  When action="D" Then x=disp_cds()
  When action="N" Then x=new_cds()
  When action="W" Then x=psw_cds()
  When action="C" Then x=acp_cds()
  Otherwise Nop
End
Return 0

new_cds:
/* Prepare job for new cds */
item=Space(item,0)
If item="" Then cds_t=""
Else If Datatype(item,"N")=0 Then Return 0
Else Do
  inum=item+first_i
  Parse Var i.inum . +2 cds_t +7 .
End
cdst=Space(cds_t,0)
"ADDPOP"
"DISPLAY PANEL(KSMTYPE)"
rtc=Rc
"REMPOP"
If rtc=0 Then x=edit_skel("KSMNCDS")
Return 0

acp_cds:
/* ACOUPLE couple dataset for a specific type */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum . +2 cds_t +7 .
cds_t=Space(cds_t,0)
cdsdsn=""
"ADDPOP"
"DISPLAY PANEL(KSMCDSN)"
rtc=Rc
"REMPOP"
If rtc=0 Then Do
  If cds_t="SYSPLEX" Then ,
    Address TSO "KSMCONS SETXCF COUPLE,ACOUPLE="cdsdsn
  Else ,
    Address TSO "KSMCONS SETXCF COUPLE,TYPE="cds_t",ACOUPLE="cdsdsn
  q=Queued()
  Do i=1 To q
    Pull z.i
    Say z.i
  End
  x=i_items()
End
Return 0

psw_cds:
/* PSWITCH couple dataset for a specific type */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum . +2 cds_t +7 .
If cds_t="SYSPLEX" Then ,
  Address TSO "KSMCONS SETXCF COUPLE,PSWITCH"
Else ,
  Address TSO "KSMCONS SETXCF COUPLE,PSWITCH,TYPE="cds_t
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
x=i_items()
Return 0

disp_cds:
/* Display couple dataset for a specific type */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum . +2 cds_t +7 .
Address TSO "KSMCONS D XCF,COUPLE,TYPE="cds_t
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

list_cds:
/* Prepare couple datasets list */
Address TSO "KSMCONS D XCF,COUPLE"
i_num=0
q=Queued()
Do i=1 To q
  Pull z.i
End
sw="0"
first_i=0
Do e=1 To q
  Select
    When sw="0" Then Do
      If Pos("COUPLE DATA SETS",z.e)>0 Then Do
         cds_t=Word(z.e,2)
      End
      Else Do
        Parse Var z.e . cds_v "DSN: "cds_dsn .
        If cds_dsn<>"" Then Do
         cds_v=Space(cds_v,0)
         sw="1"
        End
      End
    End
    When sw="1" Then Do
      Parse Var z.e . "VOLSER: "cds_vol .
      If cds_vol<>"" Then Do
        i_num=i_num+1
        i.i_num=Left(cds_v,1) ,
                Left(cds_t,7) ,
                Left(Space(cds_dsn,0),40) ,
                Left(Space(cds_vol,0),8)
        sw="0"
      End
    End
    Otherwise Nop
  End
End
/* Set the actions available For cds */
If i_num>0 Then Do
  item="1 "
  actions="NDWC"
  action="D"
  types="D"
  type="D"
End
Return 0

/* Policies */

e_pol:
/* Handle policies actions */
Select
  When action="L" Then x=list_pol()
  When action="R" Then x=repo_pol()
  When action="N" Then x=new_pol()
  When action="S" Then x=start_pol()
  When action="O" Then x=stop_pol()
  Otherwise Nop
End
Return 0

start_pol:
/* Start a policy */
item=Space(item,0)
If item="" Then pol_t=""
Else If Datatype(item,"N")=0 Then Return 0
Else Do
  inum=item+first_i
  Parse Var i.inum pol_t +8 .
End
polt=Space(pol_t,0)
"ADDPOP"
"DISPLAY PANEL(KSMPNAM)"
rtc=Rc
"REMPOP"
If rtc=0 Then Do
  Address TSO "KSMCONS SETXCF START,POLICY,TYPE="POLT",POLNAME="polnm
  q=Queued()
  Do i=1 To q
    Pull z.i
    Say z.i
  End
  x=i_items()
  type="P"
End
Return 0

stop_pol:
/* Stop a policy */
item=Space(item,0)
If item="" Then pol_t=""
Else If Datatype(item,"N")=0 Then Return 0
Else Do
  inum=item+first_i
  Parse Var i.inum pol_t +8 .
End
polt=Space(pol_t,0)
Address TSO "KSMCONS SETXCF STOP,POLICY,TYPE="polt
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
x=i_items()
type="P"
Return 0

new_pol:
/* Prepare job for new policy */
item=Space(item,0)
If item="" Then pol_t=""
Else If Datatype(item,"N")=0 Then Return 0
Else Do
  inum=item+first_i
  Parse Var i.inum pol_t +8 .
End
polt=Space(pol_t,0)
"ADDPOP"
"DISPLAY PANEL(KSMPTYP)"
rtc=Rc
"REMPOP"
If rtc=0 Then x=edit_skel("KSMNPOL")
Return 0

repo_pol:
/* Prepare job to report policies */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum pol_t +8 .
polt=Space(pol_t,0)
x=edit_skel("KSMDPOL")
Return 0

list_pol:
/* Prepare policies list */
Address TSO "KSMCONS D XCF,POL"
i_num=0
q=Queued()
Do i=1 To q
  Pull z.i
End
sw="0"
first_i=0
Do e=1 To q
  Select
    When sw="0" Then Do
      If Pos("TYPE:",z.e)>0 Then Do
         pol_t=Word(z.e,3)
      End
      Else Do
        Parse Var z.e . "POLNAME: "pol_nam .
        If pol_nam<>"" Then sw="1"
      End
    End
    When sw="1" Then Do
        i_num=i_num+1
        i.i_num=Left(Space(pol_t,0),7),
                Left(pol_nam,40)
        sw="0"
    End
    Otherwise Nop
  End
End
/* Set the actions available For policies */
If i_num>0 Then Do
  item="1 "
  actions="NRSO"
  action="R"
  types="P"
  type="P"
End
Return 0

/* COUPLING FACILITIES */

e_cf:
/* Handle coupling facility actions */
Select
  When action="L" Then x=list_cf()
  When action="D" Then x=disp_cf()
  When action="P" Then x=pop_cf()
  When action="I" Then x=reb_cf()
  Otherwise Nop
End
Return 0

list_cf:
/* Prepare coupling facilities list */
Address TSO "KSMCONS D XCF,CF"
i_num=0
q=Queued()
Do i=1 To q
  Pull z.i
End
first_i=0
Do e=1 To i
  Parse Var z.e . "PARTITION: " pnum .
  If pnum<>"" Then Do
    i_num=i_num+1
    i.i_num=Left(Space(cf_n,0),8)
  End
  cf_n=Word(z.e,2)
End
/* Set the actions available For Coupling Facilities */
If i_num>0 Then Do
  item="1 "
  actions="DPI"
  action="D"
  types="C"
  type="C"
End
Return 0

disp_cf:
/* Display Coupling facility details */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum cf_n +8 .
Address TSO "KSMCONS D XCF,CF,CFNAME="cf_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

pop_cf:
/* Populate Coupling Facility */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum cf_n +8 .
cf_n=Space(cf_n,0)
Address TSO "KSMCONS SETXCF START,REBUILD,POPULATECF,CFNAME="cf_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

reb_cf:
/* Rebuild Coupling Facility Structures */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum cf_n +8 .
cf_n=Space(cf_n,0)
Address TSO "KSMCONS SETXCF START,REBUILD,CFNAME="cf_n",LOCATION=OTHER"
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

/* STRUCTURES */

e_str:
/* Handle structures actions */
Select
  When action="L" Then x=list_str()
  When action="D" Then x=disp_str()
  When action="A" Then x=alt_str()
  When action="I" Then x=reb_str()
  When action="X" Then x=dup_str()
  When action="U" Then x=undup_str()
  When action="F" Then x=force_str()
  Otherwise Nop
End
Return 0

list_str:
/* Prepare coupling facilities list */
showcon="N"
Address TSO "KSMCONS D XCF,STR"
i_num=0
q=Queued()
Do i=1 To q
  Pull z.i
End
first_i=0
Do e=1 To i
  Parse Var z.e . 2 str_n 20 str_t 40 str_s1 str_s2 str_s3 .
  If str_s1="ALLOCATED" |,
     str_s1="NOT" | ,
     str_s1="DEALLOCATION" | ,
     str_s1="TRANSITIONING:" | ,
     str_s1="STRUCTURE" | ,
     str_s1="DUPLEXING" | ,
     str_s1="POLICY" | ,
     str_s1="FAILED-PERSISTENT" | ,
     str_s1="REBUILDING" | ,
     str_s1="METHOD:" | ,
     str_s1="ALTER" | ,
     str_s1="POPULATECF" | ,
     str_s1="REBUILD" Then Do
    If str_n<>"" Then Do
      i_num=i_num+1
      i.i_num=Left(Space(str_n,0),20) ,
              str_s1 str_s2 str_s3
    End
  End
End
/* Set the actions available For Coupling Facilities */
If i_num>0 Then Do
  item="1 "
  actions="DAIXUFL"
  action="D"
  types="SN"
  type="S"
End
Return 0

alt_str:
/* Display Structure details */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
str_n=Space(str_n,0)
strsz=0
"ADDPOP"
"DISPLAY PANEL(KSMSSIZ)"
rtc=Rc
"REMPOP"
If rtc=0 Then Do
  Address TSO "KSMCONS SETXCF START,ALTER,STRNM="str_n",SIZE="strsz
  q=Queued()
  Do i=1 To q
    Pull z.i
    Say z.i
  End
End
Return 0

disp_str:
/* Display Structure details */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
Address TSO "KSMCONS D XCF,STR,STRNM="str_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

force_str:
/* Force Structure */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
str_n=space(str_n,0)
Address TSO "KSMCONS SETXCF ",
            "FORCE,STRUCTURE,STRNAME="str_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

reb_str:
/* Rebuild Structure */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
str_n=space(str_n,0)
Address TSO "KSMCONS SETXCF ",
            "START,REBUILD,STRNAME="str_n",LOCATION=OTHER"
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

dup_str:
/* Duplex Structure */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
str_n=space(str_n,0)
Address TSO "KSMCONS SETXCF ",
            "START,REBUILD,DUPLEX,STRNAME="str_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
x=i_items()
type="S"
Return 0

undup_str:
/* Unduplex Structure */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
str_n=space(str_n,0)
"ADDPOP"
"DISPLAY PANEL(KSMSDKP)"
rtc=Rc
"REMPOP"
Select
  When strkp="N" then str_k="NEW"
  When strkp="O" then str_k="OLD"
  Otherwise Return 0
End
If rtc=0 Then Do
  Address TSO "KSMCONS SETXCF ",
              "STOP,REBUILD,DUPLEX,STRNAME="str_n",KEEP="str_k
  q=Queued()
  Do i=1 To q
    Pull z.i
    Say z.i
  End
End
x=i_items()
type="S"
Return 0

/* CONNECTIONS */

e_con:
/* Handle connections actions */
If showcon="N"&action<>"L" Then Return 0
Select
  When action="L" Then x=list_con()
  When action="D" Then x=disp_con()
  When action="F" Then x=force_con()
  Otherwise Nop
End
Return 0

list_con:
/* List Connections for Structure */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum str_n +20 .
con_sn=space(str_n,0)
Address TSO "KSMCONS D XCF,STR,STRNM="con_sn
i_num=0
q=Queued()
Do i=1 To q
  Pull z.i
End
sw="0"
first_i=0
Do e=1 To q
  Select
    When sw="0" Then Do
      If Pos("CONNECTION NAME",z.e)>0 Then sw="1"
    End
    When sw="1" Then Do
      Parse Var z.e . con_n . . con_sys con_j con_a con_st
      If con_st<>""&left(con_st,3)<>"---" Then Do
        i_num=i_num+1
        i.i_num=Left(con_n,16) ,
                Left(con_sys,8) ,
                Left(con_st,16)
      End
    End
    Otherwise Nop
  End
End
/* Set the actions available for connections */
If i_num>0 Then Do
  showcon="Y"
  item="1 "
  actions="DF"
  action="D"
  types="N"
  type="N"
End
Return 0

disp_con:
/* Display Connection details */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum con_n +16 .
con_n=space(con_n,0)
Address TSO "KSMCONS D XCF,STR,STRNM="con_sn",CONNM="con_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

force_con:
/* Force connection */
item=Space(item,0)
If Datatype(item,"N")=0 Then Return 0
inum=item+first_i
Parse Var i.inum con_n +16 .
con_n=space(con_n,0)
Address TSO "KSMCONS SETXCF FORCE,CONNECTION,STRNM="con_sn",CONNM="con_n
q=Queued()
Do i=1 To q
  Pull z.i
  Say z.i
End
Return 0

/* GENERIC ROUTINES */

edit_skel: Arg sk_name
/* Generic routine To Do file tailoring */
"LIBDEF ISPSLIB DATASET ID("skel_dsn")"
"CONTROL ERRORS CANCEL"
"FTOPEN TEMP"
"FTINCL "sk_name
"FTCLOSE"
"LIBDEF ISPSLIB"
"VGET (ZTEMPN) SHARED"
"LMINIT DATAID(DDID) DDNAME("ztempn")"
"EDIT DATAID("ddid") MACRO(MACHION)"
"LMFREE DATAID("ddid")"
Return 0
