{"INMR01": {"INMLRECL": 80, "INMFNODE": "MVSESAS1", "INMFUID": "WIMA", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20040526111602000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "SSY.EXEC", "INMMEMBR": "SSY.EXEC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SSY.EXEC": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "040147", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\x01'", "DS1LSTAR": "b'\\x00r\\x02'", "DS1TRBAL": "b'\\xc8H'"}, "COPYR2": {"deb": "b'\\x10\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0b\\x80\\x00\\x04\\xb7\\n\\xd8'", "extents": ["b'\\x10\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0b\\x80\\x00\\x04\\xb7\\n\\xd8'", "b\"P\\xef\\xfd\\x98\\x00\\x00\\x07\\x14\\x00\\x00\\x07'\\x00\\x0e\\x01,\"", "b'P\\xef\\xfd\\x98\\x00\\x00\\x02c\\x00\\x00\\x02c\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x02d\\x00\\x00\\x02d\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x02e\\x00\\x00\\x02e\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x02f\\x00\\x00\\x02f\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x02i\\x00\\x00\\x02i\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04a\\x00\\x00\\x04a\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04b\\x00\\x00\\x04b\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04l\\x00\\x00\\x04l\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04n\\x00\\x00\\x04n\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04q\\x00\\x00\\x04q\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04r\\x00\\x00\\x04r\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x04s\\x00\\x00\\x04s\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x05\\x0f\\x00\\x00\\x05\\x0f\\x00\\x0e\\x00\\x0f'", "b'P\\xef\\xfd\\x98\\x00\\x00\\x05:\\x00\\x00\\x05:\\x00\\x0e\\x00\\x0f'"]}, "members": {"KSMCONS": {"ttr": 27652, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01\\x04\\x14o\\x01\\x04\\x14o\\x16W\\x00\\x18\\x00\\x18\\x00\\x00\\xe6\\xc9\\xd4\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-25T00:00:00", "modifydate": "2004-05-25T16:57:23", "lines": 24, "newlines": 24, "modlines": 0, "user": "WIMA"}, "text": "/* rexx */\nTrace Off\nArg command1\nline.0=0\nIf command1=\"\" Then Exit 16\nx=Msg(\"off\")\nAddress TSO\n\"CONSOLE DEACTIVATE\"\ncname=Left(Userid(),4)||\"CNRX\"\n\"CONSOLE ACTIVATE NAME(\"cname\")\"\ncart=Left(Userid(),4)||\"0123\"\nAddress CONSOLE \"CART '\"cart\"'\"\n\"CONSPROF SOLDISP(NO) UNSOLDISP(NO)\"\nAddress CONSOLE command1\nmsgrtc=Getmsg(\"line.\",\"SOL\",cart,,30)\nDo While msgrtc<4\n    Do i=1 To line.0\n        Queue \"*\" line.i\n    End\n    msgrtc=Getmsg(\"line.\",\"SOL\",cart,,1)\nEnd\n\"CONSOLE DEACTIVATE\"\nx=Msg(x)\nExit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KSMMAIN": {"ttr": 28673, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x01\\x01\\x04\\x12\\x7f\\x01\\x04\\x14o\\x17\\x12\\x03\\x87\\x00\\x03\\x00\\x00\\xe6\\xc9\\xd4\\xc1@@@@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "2004-05-06T00:00:00", "modifydate": "2004-05-25T17:12:01", "lines": 903, "newlines": 3, "modlines": 0, "user": "WIMA"}, "text": "/* REXX */\nTrace Off\nsysnm=Mvsvar(\"SYSNAME\")\nskel_dsn=\"'SSY.SKELS'\"\nAddress ISPEXEC\n\n/* Call the initialization routine */\nx=init()\nDo Forever\n\n/* Build the menus */\n/* Type menu */\ndarea1=\"*Type:  +\"type\"/ \"\nshad1= \"            \"\nDo i=1 To Length(types)\n  Do e=1 To t_num\n    t_itm=Substr(types,i,1)\n    If t_itm=t_c.e Then Do\n      If t_itm=type Then darea1=darea1||\"%\"\n      Else darea1=darea1||\"/\"\n      t_cp.i=Length(darea1)\n      darea1=darea1||t_d.e\n      shad1=shad1||\" \"t_s.e\n      e=t_num\n    End\n  End\nEnd\n/* Action menu */\ndarea2=\"*Action:+\"action\"/ \"\nshad2= \"            \"\nDo i=1 To Length(actions)\n  Do e=1 To a_num\n    a_itm=Substr(actions,i,1)\n    If a_itm=a_c.e Then Do\n      If a_itm=action Then darea2=darea2||\"%\"\n      Else darea2=darea2||\"/\"\n      a_cp.i=Length(darea2)\n      darea2=darea2||a_d.e\n      shad2=shad2||\" \"a_s.e\n    End\n  End\nEnd\n/* Item menu */\nIf i_num>0 Then Do\n  darea3=\"*Item:  +\"item\"/ \"\n  shad3= \" \"\n  shad4= \" \"\n  darea4=\"\"\n/* Handle page up and down (no PF keys for the moment...) */\n  last_i=first_i+kdepth\n  If last_i>i_num Then last_i=i_num\n  If last_i<i_num Then darea3=darea3||\"   /More\"\n  If first_i>0 Then darea3=darea3||\"   /Less\"\n/* Items List */\n  Do i=1 To last_i-first_i\n    e=i+first_i\n    darea4=darea4||\"        \"\n    If i=item Then darea4=darea4||\"\u00a2\"Left(i,2)\"/ \"\n    Else darea4=darea4||\"/\"Left(i,2)\"\\ \"\n    darea4=darea4||i.e\n    darea4=darea4||Copies(\" \",i*kwidth-Length(darea4))\n  End\nEnd\nElse Do\n/* No items to display */\n darea3=\"\"\n shad3=\"\"\n darea4=\"\"\n shad4=\"\"\nEnd\n\n/* Display the panel */\ncpos=\"0010\"\nIf cur=\"DAREA4\" Then cur=\"DAREA3\"\nElse If cur<>\"DAREA2\"&cur<>\"DAREA3\" Then cur=\"DAREA1\"\n\"DISPLAY PANEL(KSMPRIM) CURSOR(\"cur\") CSRPOS(\"cpos\")\"\nprc=Rc\nIf prc<>0 Then Exit\ncpos=cpos+0\nexec=\"Y\"\n\n/* Check cursor position */\n/* Handle cursor position in type menu */\nIf cur=\"DAREA1\"&cpos>13 Then Do\n  Do i=Length(types) To 1 By -1\n    If cpos>t_cp.i Then Do\n      type=Substr(types,i,1)\n      i=1\n      exec=\"N\"\n    End\n  End\nEnd\nElse type=Substr(darea1,10,1)\nUpper type\n\n/* Handle cursor position in action menu */\nIf cur=\"DAREA2\"&cpos>13 Then Do\n  Do i=Length(actions) To 1 By -1\n    If cpos>a_cp.i Then Do\n      action=Substr(actions,i,1)\n      i=1\n      exec=\"N\"\n    End\n  End\nEnd\nElse action=Substr(darea2,10,1)\nUpper action\n\n/* Handle cursor position for page up-down (More-Less) */\nIf cur=\"DAREA3\"&cpos>14 Then Do\n  Select\n    When cpos>25 Then Do\n        pg=Substr(darea3,26,1)\n        exec=\"N\"\n    End\n    When cpos>17 Then Do\n        pg=Substr(darea3,18,1)\n        exec=\"N\"\n    End\n    Otherwise pg=\"N\"\n  End\n  Select\n    When pg=\"M\" Then first_i=first_i+kdepth\n    When pg=\"L\" Then first_i=first_i-kdepth\n    Otherwise Nop\n  End\nEnd\n\n/* Handle cursor position in items list */\nIf cur=\"DAREA4\" Then Do\n  i_sel=Trunc(cpos/kwidth)\n  If i_sel<i_num Then Do\n    item=i_sel+1\n    exec=\"N\"\n  End\nEnd\nElse item=Substr(darea3,10,2)\nitem=Left(item,2)\n\n/* Quit Action */\nIf action=\"Q\" Then Exit\n\n/* Do not perform action: cursor not in valid position */\nIf (cur=\"DAREA1\"|cur=\"DAREA2\")&cpos=12 Then exec=\"N\"\nIf cur=\"DAREA3\"&cpos=13 Then exec=\"N\"\n\n/* Reset menus */\nIf type=\" \" Then x=i_items()\n\n/* Perform actions */\nIf exec=\"Y\" Then x=exec()\n\n/* Reformat item after actions */\nitem=left(item,2)\nEnd\n\ninit:\n/* Initialization routine */\n\"ISPEXEC PQUERY PANEL(KSMPRIM) AREANAME(DAREA4)\",\n                              \"AREATYPE(KTYPE)\",\n                              \"WIDTH(KWIDTH)\",\n                              \"DEPTH(KDEPTH)\",\n                              \"ROW(KROW)\",\n                              \"COLUMN(KCOLUMN)\"\nkdepth=kdepth-3\n/* Types */\nt_c.1=\"D\"\nt_d.1=\"CDS\"\nt_s.1=\" _ \"\nt_c.2=\"P\"\nt_d.2=\"Pol\"\nt_s.2=\"_  \"\nt_c.3=\"C\"\nt_d.3=\"Cf\"\nt_s.3=\"_ \"\nt_c.4=\"S\"\nt_d.4=\"Struc\"\nt_s.4=\"_    \"\nt_c.5=\"L\"\nt_d.5=\"SysLog\"\nt_s.5=\"   _  \"\nt_c.6=\"I\"\nt_d.6=\"PI\"\nt_s.6=\" _\"\nt_c.7=\"O\"\nt_d.7=\"PO\"\nt_s.7=\" _\"\nt_c.8=\"T\"\nt_d.8=\"TClass\"\nt_s.8=\"_     \"\nt_c.9=\"G\"\nt_d.9=\"xcfGrp\"\nt_s.9=\"   _  \"\nt_c.10=\"N\"\nt_d.10=\"CoNn\"\nt_s.10=\"  _ \"\nt_num=10\n/* types=\"DPCSLIOTG\" */\ntypes=\"DPCS\"\ntype=\"D\"\n\n/* Actions */\na_c.1=\"L\"\na_d.1=\"List\"\na_s.1=\"_   \"\na_c.2=\"N\"\na_d.2=\"New\"\na_s.2=\"_  \"\na_c.3=\"D\"\na_d.3=\"Display\"\na_s.3=\"_      \"\na_c.4=\"W\"\na_d.4=\"PsWitch\"\na_s.4=\"  _    \"\na_c.5=\"C\"\na_d.5=\"aCouple\"\na_s.5=\" _     \"\na_c.6=\"S\"\na_d.6=\"Start\"\na_s.6=\"_    \"\na_c.7=\"O\"\na_d.7=\"stOp\"\na_s.7=\"  _ \"\na_c.8=\"R\"\na_d.8=\"Report\"\na_s.8=\"_     \"\na_c.9=\"P\"\na_d.9=\"Populate\"\na_s.9=\"P       \"\na_c.10=\"I\"\na_d.10=\"RebuIld\"\na_s.10=\"    _  \"\na_c.11=\"F\"\na_d.11=\"Force\"\na_s.11=\"_    \"\na_c.12=\"X\"\na_d.12=\"DupleX\"\na_s.12=\"     _\"\na_c.13=\"U\"\na_d.13=\"Unduplex\"\na_s.13=\"_       \"\na_c.14=\"A\"\na_d.14=\"Alter\"\na_s.14=\"_    \"\na_c.15=\"Q\"\na_d.15=\"Quit\"\na_s.15=\"_   \"\na_num=15\nactions=\"LNQ\"\naction=\"L\"\n/* Items */\ni_num=0\nitem=\"  \"\nshowcon=\"N\"\nReturn 0\n\ni_items:\n/* Reset the menus in case type field is blank */\ni_num=0\nitem=\"  \"\nactions=\"LNQ\"\naction=\"L\"\ntypes=\"DPCS\"\ntype=\"D\"\ncur=\"DAREA1\"\nexec=\"N\"\nshowcon=\"N\"\nReturn 0\n\nexec:\n/* Choose action based on type */\nSelect\n  When type=\"D\" Then x=e_cds()\n  When type=\"P\" Then x=e_pol()\n  When type=\"C\" Then x=e_cf()\n  When type=\"S\" Then x=e_str()\n  When type=\"N\" Then x=e_con()\n  Otherwise Nop\nEnd\nReturn 0\n\n/* Couple datasets */\n\ne_cds:\n/* Handle couple dataset actions */\nSelect\n  When action=\"L\" Then x=list_cds()\n  When action=\"D\" Then x=disp_cds()\n  When action=\"N\" Then x=new_cds()\n  When action=\"W\" Then x=psw_cds()\n  When action=\"C\" Then x=acp_cds()\n  Otherwise Nop\nEnd\nReturn 0\n\nnew_cds:\n/* Prepare job for new cds */\nitem=Space(item,0)\nIf item=\"\" Then cds_t=\"\"\nElse If Datatype(item,\"N\")=0 Then Return 0\nElse Do\n  inum=item+first_i\n  Parse Var i.inum . +2 cds_t +7 .\nEnd\ncdst=Space(cds_t,0)\n\"ADDPOP\"\n\"DISPLAY PANEL(KSMTYPE)\"\nrtc=Rc\n\"REMPOP\"\nIf rtc=0 Then x=edit_skel(\"KSMNCDS\")\nReturn 0\n\nacp_cds:\n/* ACOUPLE couple dataset for a specific type */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum . +2 cds_t +7 .\ncds_t=Space(cds_t,0)\ncdsdsn=\"\"\n\"ADDPOP\"\n\"DISPLAY PANEL(KSMCDSN)\"\nrtc=Rc\n\"REMPOP\"\nIf rtc=0 Then Do\n  If cds_t=\"SYSPLEX\" Then ,\n    Address TSO \"KSMCONS SETXCF COUPLE,ACOUPLE=\"cdsdsn\n  Else ,\n    Address TSO \"KSMCONS SETXCF COUPLE,TYPE=\"cds_t\",ACOUPLE=\"cdsdsn\n  q=Queued()\n  Do i=1 To q\n    Pull z.i\n    Say z.i\n  End\n  x=i_items()\nEnd\nReturn 0\n\npsw_cds:\n/* PSWITCH couple dataset for a specific type */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum . +2 cds_t +7 .\nIf cds_t=\"SYSPLEX\" Then ,\n  Address TSO \"KSMCONS SETXCF COUPLE,PSWITCH\"\nElse ,\n  Address TSO \"KSMCONS SETXCF COUPLE,PSWITCH,TYPE=\"cds_t\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nx=i_items()\nReturn 0\n\ndisp_cds:\n/* Display couple dataset for a specific type */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum . +2 cds_t +7 .\nAddress TSO \"KSMCONS D XCF,COUPLE,TYPE=\"cds_t\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\nlist_cds:\n/* Prepare couple datasets list */\nAddress TSO \"KSMCONS D XCF,COUPLE\"\ni_num=0\nq=Queued()\nDo i=1 To q\n  Pull z.i\nEnd\nsw=\"0\"\nfirst_i=0\nDo e=1 To q\n  Select\n    When sw=\"0\" Then Do\n      If Pos(\"COUPLE DATA SETS\",z.e)>0 Then Do\n         cds_t=Word(z.e,2)\n      End\n      Else Do\n        Parse Var z.e . cds_v \"DSN: \"cds_dsn .\n        If cds_dsn<>\"\" Then Do\n         cds_v=Space(cds_v,0)\n         sw=\"1\"\n        End\n      End\n    End\n    When sw=\"1\" Then Do\n      Parse Var z.e . \"VOLSER: \"cds_vol .\n      If cds_vol<>\"\" Then Do\n        i_num=i_num+1\n        i.i_num=Left(cds_v,1) ,\n                Left(cds_t,7) ,\n                Left(Space(cds_dsn,0),40) ,\n                Left(Space(cds_vol,0),8)\n        sw=\"0\"\n      End\n    End\n    Otherwise Nop\n  End\nEnd\n/* Set the actions available For cds */\nIf i_num>0 Then Do\n  item=\"1 \"\n  actions=\"NDWC\"\n  action=\"D\"\n  types=\"D\"\n  type=\"D\"\nEnd\nReturn 0\n\n/* Policies */\n\ne_pol:\n/* Handle policies actions */\nSelect\n  When action=\"L\" Then x=list_pol()\n  When action=\"R\" Then x=repo_pol()\n  When action=\"N\" Then x=new_pol()\n  When action=\"S\" Then x=start_pol()\n  When action=\"O\" Then x=stop_pol()\n  Otherwise Nop\nEnd\nReturn 0\n\nstart_pol:\n/* Start a policy */\nitem=Space(item,0)\nIf item=\"\" Then pol_t=\"\"\nElse If Datatype(item,\"N\")=0 Then Return 0\nElse Do\n  inum=item+first_i\n  Parse Var i.inum pol_t +8 .\nEnd\npolt=Space(pol_t,0)\n\"ADDPOP\"\n\"DISPLAY PANEL(KSMPNAM)\"\nrtc=Rc\n\"REMPOP\"\nIf rtc=0 Then Do\n  Address TSO \"KSMCONS SETXCF START,POLICY,TYPE=\"POLT\",POLNAME=\"polnm\n  q=Queued()\n  Do i=1 To q\n    Pull z.i\n    Say z.i\n  End\n  x=i_items()\n  type=\"P\"\nEnd\nReturn 0\n\nstop_pol:\n/* Stop a policy */\nitem=Space(item,0)\nIf item=\"\" Then pol_t=\"\"\nElse If Datatype(item,\"N\")=0 Then Return 0\nElse Do\n  inum=item+first_i\n  Parse Var i.inum pol_t +8 .\nEnd\npolt=Space(pol_t,0)\nAddress TSO \"KSMCONS SETXCF STOP,POLICY,TYPE=\"polt\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nx=i_items()\ntype=\"P\"\nReturn 0\n\nnew_pol:\n/* Prepare job for new policy */\nitem=Space(item,0)\nIf item=\"\" Then pol_t=\"\"\nElse If Datatype(item,\"N\")=0 Then Return 0\nElse Do\n  inum=item+first_i\n  Parse Var i.inum pol_t +8 .\nEnd\npolt=Space(pol_t,0)\n\"ADDPOP\"\n\"DISPLAY PANEL(KSMPTYP)\"\nrtc=Rc\n\"REMPOP\"\nIf rtc=0 Then x=edit_skel(\"KSMNPOL\")\nReturn 0\n\nrepo_pol:\n/* Prepare job to report policies */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum pol_t +8 .\npolt=Space(pol_t,0)\nx=edit_skel(\"KSMDPOL\")\nReturn 0\n\nlist_pol:\n/* Prepare policies list */\nAddress TSO \"KSMCONS D XCF,POL\"\ni_num=0\nq=Queued()\nDo i=1 To q\n  Pull z.i\nEnd\nsw=\"0\"\nfirst_i=0\nDo e=1 To q\n  Select\n    When sw=\"0\" Then Do\n      If Pos(\"TYPE:\",z.e)>0 Then Do\n         pol_t=Word(z.e,3)\n      End\n      Else Do\n        Parse Var z.e . \"POLNAME: \"pol_nam .\n        If pol_nam<>\"\" Then sw=\"1\"\n      End\n    End\n    When sw=\"1\" Then Do\n        i_num=i_num+1\n        i.i_num=Left(Space(pol_t,0),7),\n                Left(pol_nam,40)\n        sw=\"0\"\n    End\n    Otherwise Nop\n  End\nEnd\n/* Set the actions available For policies */\nIf i_num>0 Then Do\n  item=\"1 \"\n  actions=\"NRSO\"\n  action=\"R\"\n  types=\"P\"\n  type=\"P\"\nEnd\nReturn 0\n\n/* COUPLING FACILITIES */\n\ne_cf:\n/* Handle coupling facility actions */\nSelect\n  When action=\"L\" Then x=list_cf()\n  When action=\"D\" Then x=disp_cf()\n  When action=\"P\" Then x=pop_cf()\n  When action=\"I\" Then x=reb_cf()\n  Otherwise Nop\nEnd\nReturn 0\n\nlist_cf:\n/* Prepare coupling facilities list */\nAddress TSO \"KSMCONS D XCF,CF\"\ni_num=0\nq=Queued()\nDo i=1 To q\n  Pull z.i\nEnd\nfirst_i=0\nDo e=1 To i\n  Parse Var z.e . \"PARTITION: \" pnum .\n  If pnum<>\"\" Then Do\n    i_num=i_num+1\n    i.i_num=Left(Space(cf_n,0),8)\n  End\n  cf_n=Word(z.e,2)\nEnd\n/* Set the actions available For Coupling Facilities */\nIf i_num>0 Then Do\n  item=\"1 \"\n  actions=\"DPI\"\n  action=\"D\"\n  types=\"C\"\n  type=\"C\"\nEnd\nReturn 0\n\ndisp_cf:\n/* Display Coupling facility details */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum cf_n +8 .\nAddress TSO \"KSMCONS D XCF,CF,CFNAME=\"cf_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\npop_cf:\n/* Populate Coupling Facility */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum cf_n +8 .\ncf_n=Space(cf_n,0)\nAddress TSO \"KSMCONS SETXCF START,REBUILD,POPULATECF,CFNAME=\"cf_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\nreb_cf:\n/* Rebuild Coupling Facility Structures */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum cf_n +8 .\ncf_n=Space(cf_n,0)\nAddress TSO \"KSMCONS SETXCF START,REBUILD,CFNAME=\"cf_n\",LOCATION=OTHER\"\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\n/* STRUCTURES */\n\ne_str:\n/* Handle structures actions */\nSelect\n  When action=\"L\" Then x=list_str()\n  When action=\"D\" Then x=disp_str()\n  When action=\"A\" Then x=alt_str()\n  When action=\"I\" Then x=reb_str()\n  When action=\"X\" Then x=dup_str()\n  When action=\"U\" Then x=undup_str()\n  When action=\"F\" Then x=force_str()\n  Otherwise Nop\nEnd\nReturn 0\n\nlist_str:\n/* Prepare coupling facilities list */\nshowcon=\"N\"\nAddress TSO \"KSMCONS D XCF,STR\"\ni_num=0\nq=Queued()\nDo i=1 To q\n  Pull z.i\nEnd\nfirst_i=0\nDo e=1 To i\n  Parse Var z.e . 2 str_n 20 str_t 40 str_s1 str_s2 str_s3 .\n  If str_s1=\"ALLOCATED\" |,\n     str_s1=\"NOT\" | ,\n     str_s1=\"DEALLOCATION\" | ,\n     str_s1=\"TRANSITIONING:\" | ,\n     str_s1=\"STRUCTURE\" | ,\n     str_s1=\"DUPLEXING\" | ,\n     str_s1=\"POLICY\" | ,\n     str_s1=\"FAILED-PERSISTENT\" | ,\n     str_s1=\"REBUILDING\" | ,\n     str_s1=\"METHOD:\" | ,\n     str_s1=\"ALTER\" | ,\n     str_s1=\"POPULATECF\" | ,\n     str_s1=\"REBUILD\" Then Do\n    If str_n<>\"\" Then Do\n      i_num=i_num+1\n      i.i_num=Left(Space(str_n,0),20) ,\n              str_s1 str_s2 str_s3\n    End\n  End\nEnd\n/* Set the actions available For Coupling Facilities */\nIf i_num>0 Then Do\n  item=\"1 \"\n  actions=\"DAIXUFL\"\n  action=\"D\"\n  types=\"SN\"\n  type=\"S\"\nEnd\nReturn 0\n\nalt_str:\n/* Display Structure details */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\nstr_n=Space(str_n,0)\nstrsz=0\n\"ADDPOP\"\n\"DISPLAY PANEL(KSMSSIZ)\"\nrtc=Rc\n\"REMPOP\"\nIf rtc=0 Then Do\n  Address TSO \"KSMCONS SETXCF START,ALTER,STRNM=\"str_n\",SIZE=\"strsz\n  q=Queued()\n  Do i=1 To q\n    Pull z.i\n    Say z.i\n  End\nEnd\nReturn 0\n\ndisp_str:\n/* Display Structure details */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\nAddress TSO \"KSMCONS D XCF,STR,STRNM=\"str_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\nforce_str:\n/* Force Structure */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\nstr_n=space(str_n,0)\nAddress TSO \"KSMCONS SETXCF \",\n            \"FORCE,STRUCTURE,STRNAME=\"str_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\nreb_str:\n/* Rebuild Structure */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\nstr_n=space(str_n,0)\nAddress TSO \"KSMCONS SETXCF \",\n            \"START,REBUILD,STRNAME=\"str_n\",LOCATION=OTHER\"\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\ndup_str:\n/* Duplex Structure */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\nstr_n=space(str_n,0)\nAddress TSO \"KSMCONS SETXCF \",\n            \"START,REBUILD,DUPLEX,STRNAME=\"str_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nx=i_items()\ntype=\"S\"\nReturn 0\n\nundup_str:\n/* Unduplex Structure */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\nstr_n=space(str_n,0)\n\"ADDPOP\"\n\"DISPLAY PANEL(KSMSDKP)\"\nrtc=Rc\n\"REMPOP\"\nSelect\n  When strkp=\"N\" then str_k=\"NEW\"\n  When strkp=\"O\" then str_k=\"OLD\"\n  Otherwise Return 0\nEnd\nIf rtc=0 Then Do\n  Address TSO \"KSMCONS SETXCF \",\n              \"STOP,REBUILD,DUPLEX,STRNAME=\"str_n\",KEEP=\"str_k\n  q=Queued()\n  Do i=1 To q\n    Pull z.i\n    Say z.i\n  End\nEnd\nx=i_items()\ntype=\"S\"\nReturn 0\n\n/* CONNECTIONS */\n\ne_con:\n/* Handle connections actions */\nIf showcon=\"N\"&action<>\"L\" Then Return 0\nSelect\n  When action=\"L\" Then x=list_con()\n  When action=\"D\" Then x=disp_con()\n  When action=\"F\" Then x=force_con()\n  Otherwise Nop\nEnd\nReturn 0\n\nlist_con:\n/* List Connections for Structure */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum str_n +20 .\ncon_sn=space(str_n,0)\nAddress TSO \"KSMCONS D XCF,STR,STRNM=\"con_sn\ni_num=0\nq=Queued()\nDo i=1 To q\n  Pull z.i\nEnd\nsw=\"0\"\nfirst_i=0\nDo e=1 To q\n  Select\n    When sw=\"0\" Then Do\n      If Pos(\"CONNECTION NAME\",z.e)>0 Then sw=\"1\"\n    End\n    When sw=\"1\" Then Do\n      Parse Var z.e . con_n . . con_sys con_j con_a con_st\n      If con_st<>\"\"&left(con_st,3)<>\"---\" Then Do\n        i_num=i_num+1\n        i.i_num=Left(con_n,16) ,\n                Left(con_sys,8) ,\n                Left(con_st,16)\n      End\n    End\n    Otherwise Nop\n  End\nEnd\n/* Set the actions available for connections */\nIf i_num>0 Then Do\n  showcon=\"Y\"\n  item=\"1 \"\n  actions=\"DF\"\n  action=\"D\"\n  types=\"N\"\n  type=\"N\"\nEnd\nReturn 0\n\ndisp_con:\n/* Display Connection details */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum con_n +16 .\ncon_n=space(con_n,0)\nAddress TSO \"KSMCONS D XCF,STR,STRNM=\"con_sn\",CONNM=\"con_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\nforce_con:\n/* Force connection */\nitem=Space(item,0)\nIf Datatype(item,\"N\")=0 Then Return 0\ninum=item+first_i\nParse Var i.inum con_n +16 .\ncon_n=space(con_n,0)\nAddress TSO \"KSMCONS SETXCF FORCE,CONNECTION,STRNM=\"con_sn\",CONNM=\"con_n\nq=Queued()\nDo i=1 To q\n  Pull z.i\n  Say z.i\nEnd\nReturn 0\n\n/* GENERIC ROUTINES */\n\nedit_skel: Arg sk_name\n/* Generic routine To Do file tailoring */\n\"LIBDEF ISPSLIB DATASET ID(\"skel_dsn\")\"\n\"CONTROL ERRORS CANCEL\"\n\"FTOPEN TEMP\"\n\"FTINCL \"sk_name\n\"FTCLOSE\"\n\"LIBDEF ISPSLIB\"\n\"VGET (ZTEMPN) SHARED\"\n\"LMINIT DATAID(DDID) DDNAME(\"ztempn\")\"\n\"EDIT DATAID(\"ddid\") MACRO(MACHION)\"\n\"LMFREE DATAID(\"ddid\")\"\nReturn 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KSMPKG": {"ttr": 29185, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00U\\x01\\x04\\x14o\\x01\\x04\\x14\\x7f\\x13\\x13\\x00K\\x00\\x1e\\x00\\x00\\xe6\\xc9\\xd4\\xc1@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2004-05-25T00:00:00", "modifydate": "2004-05-26T13:13:55", "lines": 75, "newlines": 30, "modlines": 0, "user": "WIMA"}, "text": "/* REXX */\nADDRESS TSO\n/***************/\n/* PACKAGE DOC */\n/***************/\n\"SMCOPY FDS(SSY.DOC(README))  TDS(SSY.PKG.PDS($README))  NOTRANS\"\n\"SMCOPY FDS(SSY.DOC(INSTALL)) TDS(SSY.PKG.PDS(INSTALL)) NOTRANS\"\n/****************/\n/* PACKAGE EXEC */\n/****************/\n\"XMIT X.Y DS(SSY.EXEC) OUTDS(SSY.TEMP.XMIT) \"||,\n  \"MEMBERS(\"||,\n          \"KSMCONS  \"||,\n          \"KSMMAIN  \"||,\n          \"KSMPKG   \"||,\n         \") NOLOG\"\n\"SMCOPY FDS(SSY.TEMP.XMIT) TDS(SSY.PKG.PDS(EXEC)) NOTRANS\"\n\"DELETE SSY.TEMP.XMIT\"\n/******************/\n/* PACKAGE PANELS */\n/******************/\n\"XMIT X.Y DS(SSY.PANELS) OUTDS(SSY.TEMP.XMIT) \"||,\n  \"MEMBERS(\"||,\n          \"KSMCDSN  \"||,\n          \"KSMPNAM  \"||,\n          \"KSMPRIM  \"||,\n          \"KSMPTYP  \"||,\n          \"KSMSDKP  \"||,\n          \"KSMSSIZ  \"||,\n          \"KSMTYPE  \"||,\n         \") NOLOG\"\n\"SMCOPY FDS(SSY.TEMP.XMIT) TDS(SSY.PKG.PDS(PANELS)) NOTRANS\"\n\"DELETE SSY.TEMP.XMIT\"\n/******************/\n/* PACKAGE TABLES */\n/******************/\n\"XMIT X.Y DS(SSY.TABLES) OUTDS(SSY.TEMP.XMIT) \"||,\n  \"MEMBERS(\"||,\n          \"KSMKEYS  \"||,\n         \") NOLOG\"\n\"SMCOPY FDS(SSY.TEMP.XMIT) TDS(SSY.PKG.PDS(TABLES)) NOTRANS\"\n\"DELETE SSY.TEMP.XMIT\"\n/*********************/\n/* PACKAGE SKELETONS */\n/*********************/\n\"XMIT X.Y DS(SSY.SKELS) OUTDS(SSY.TEMP.XMIT) \"||,\n  \"MEMBERS(\"||,\n          \"KSMDPOL  \"||,\n          \"KSMNCDS  \"||,\n          \"KSMNPOL  \"||,\n         \") NOLOG\"\n\"SMCOPY FDS(SSY.TEMP.XMIT) TDS(SSY.PKG.PDS(SKELS)) NOTRANS\"\n\"DELETE SSY.TEMP.XMIT\"\n/***************/\n/* PACKAGE GML */\n/***************/\n\"XMIT X.Y DS(SSY.GML) OUTDS(SSY.TEMP.XMIT) \"||,\n  \"MEMBERS(\"||,\n          \"KSMCDSN  \"||,\n          \"KSMPNAM  \"||,\n          \"KSMPRIM  \"||,\n          \"KSMPTYP  \"||,\n          \"KSMSDKP  \"||,\n          \"KSMSSIZ  \"||,\n          \"KSMTYPE  \"||,\n         \") NOLOG\"\n\"SMCOPY FDS(SSY.TEMP.XMIT) TDS(SSY.PKG.PDS(GML)) NOTRANS\"\n\"DELETE SSY.TEMP.XMIT\"\n/********************/\n/* PACKAGE PACKAGES */\n/********************/\n\"XMIT X.Y DS(SSY.PKG.PDS) OUTDS(SSY.PKG.XMIT) \"||,\n  \"NOLOG\"\n\"DELETE SSY.PKG.PDS\"\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT677/CBT.V500.FILE677.PDS/EXEC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT677/CBT.V500.FILE677.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}