/* REXX */
/*

Function: Complete error notification.

Usage:    This procedure designated for use in batch JCL jobs,
          usually as a last step (but not necessarilly). Traps
          the highest completion code of the previous (already
          completed) job steps as well as jobname, jobid, userid
          and date, then reads SYSUT1 stream and substitute any
          occurences of %MAXCC%, %JOBNAME%, %JOBID%, %USERID%,
          %DD%, %MM%, %YYYY%, %YY%, %JJJ% with an appropriate
          values and writes to SYSUT2.
          SYSUT1 data assumed to be a complete SMTP stream:
          HELO SMTP_host
          MAIL FROM: sender
          RCPT TO: recipients
          etc. etc.
          QUIT

Syntax:   FEEDBACK Â¢ctlchar!
          ctlchar - replacement for substitution control charater.
                    default is '%'.

Example:  //   IF condition THEN
          //   EXEC PGM=IRXJCL,PARM='FEEDBACK'
          //SYSEXEC  DD procedure_library
          //SYSTSPRT DD SYSOUT=*
          //SYSUT1   DD notification_template
          //SYSUT2   DD (B,SMTP)
          //   ENDIF

(C) 2005-2016 Gregory Bliznets gbliznets@iba.by

*/
trace off
maxcc = 0
parse upper arg ctlchar .
if ctlchar = ''
then ctlchar = '%'
CVT = '10' /* CVT absolute address */
TCB = c2x(storage(c2x(storage(c2x(storage(CVT,4)),4)),4)) /* current TCB */
TIOT = c2x(storage(la(TCB,'000C'),4)) /* ptr to TIOT */
jobname = storage(TIOT,8) /* jobname */
JSCB = c2x(storage(la(TCB,'00B4'),4)) /* ptr to JSCB */
JCT = c2x(storage(la(JSCB,'0104'),4)) /* ptr to JCT */
SSIB = c2x(storage(la(JSCB,'013C'),4)) /* ptr to SSIB */
jobid = storage(la(SSIB,'000C'),8) /* jobid */
timestamp = storage(la(JCT,'00A2'),6) /* Date and Time */
/* 'yydddFhhhhhh'x where hhhhhh number of centisec since 0h, not used yet */
SCT = c2x(storage(la(JCT,'0030'),3)) /* ptr to first SCT */
do i = 1 to 255 while SCT <> '00000000' /* limit to 255 to avoid loop */
  pgm = storage(la(SCT,'007C'),8) /* pgmname */
  SCTX = c2x(storage(la(SCT,'0054'),3)) /* ptr to SCTX */
  parm = strip(storage(la(SCTX,'0014'),100),,'00'x) /* parm */
  SCTSCLPC = storage(la(SCT,'003C'),8) /* procname */
  SCTSNAME = storage(la(SCT,'0044'),8) /* stepname */
  SCTSTEND = storage(la(SCT,'00BC'),1) /* switches */
  if stepname = ''
  then step = SCTSCLPC
  else step = SCTSNAME
  select
  when bitand(SCTSTEND, '10'x) == '10'x
  then nop /* this step was flushed */
  when bitand(SCTSTEND, 'C0'x) == 'C0'x
  then maxcc = max(maxcc, c2d(storage(la(SCT,'0018'),2))) /* completion code */
  when bitand(SCTSTEND, '80'x) == '80'x
  then nop /* active step, I'm running here */
  otherwise nop /* step not started yet */
  end
  SCT = c2x(storage(la(SCT,'0024'),3)) /* ptr to next SCT */
end i
yyyymmdd = date('S')
parse var yyyymmdd 1 yyyy +4 -2 yy +2 mm +2 dd +2
if ((yyyy//4=0 & yyyy//100<>0) | yyyy//400=0)
then dayspermonth = '31 29 31 30 31 30 31 31 30 31 30 31'
else dayspermonth = '31 28 31 30 31 30 31 31 30 31 30 31'
jjj = 0
do i = 1 to mm-1
  jjj = jjj + word(dayspermonth,i)
end i
jjj = right(jjj+dd,3,'0')

subs.1 = 'MAXCC 'maxcc
subs.2 = 'USERID 'userid()
subs.3 = 'JOBNAME 'jobname
subs.4 = 'JOBID 'jobid
subs.5 = 'DD 'dd
subs.6 = 'MM 'mm
subs.7 = 'YY 'yy
subs.8 = 'YYYY 'yyyy
subs.9 = 'JJJ 'jjj
subs.0 = 9
'EXECIO * DISKR SYSUT1 (FINIS STEM SMTP.'
do i = 1 to smtp.0
  do j = 1 to subs.0 while pos(ctlchar, smtp.i) > 0
    parse var subs.j var val
    smtp.i = changestr(ctlchar''var''ctlchar, smtp.i, val)
  end j
end i
'EXECIO 'smtp.0' DISKW SYSUT2 (FINIS STEM SMTP.'
exit maxcc

la: /* Load address (pointer calculation) */
  return d2x(x2d(arg(1))+x2d(arg(2)))

ChangeStr: /* Case-independent changestr function */
  parse arg _needle, _haystack, _newneedle
  parse upper arg _upper_needle, _upper_haystack, _upper_newneedle
  result=''
  _p1=1
  do forever
    _p2=pos(_upper_needle,_upper_haystack,_p1)
    if _p2=0
    then leave
    result=result''substr(_haystack,_p1,_p2-_p1)''_newneedle
    _p1=_p2+length(_needle)
  end
  return result''substr(_haystack,_p1)

