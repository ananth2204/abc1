/* REXX */
/*

Function:
       Unload ISPF table to CSV file

Syntax:
       ISP2CSV table csv ¢fs ¢fd!!

History:
       Created 02/2005
       Updated 09/2005 - command syntax changed to fit SCLM
       Updated 09/2012 - reviewed and rewritten
       Updated 09/2016 - wrong check for input CSV parameter

(C) 2005-2016 Gregory Bliznets gbliznets@iba.by

*/
trace off
parse upper arg tbl csv fs fd
address ISPEXEC
'CONTROL ERRORS RETURN'
lower = 'qwertyuiopasdfghjklzxcvbnm'
parse upper var lower upper
digits = '0123456789'
special = '$_@'
self = 'ISP2CSV'
zispfrc = 0
tbopen = 0
lmid = ''
lmopen = 0
isptdd = 'ISPTLIB'

if tbl = ''
then call error 16, 'Table was not specified'
if pos('=', tbl) > 0
then do /* reference to the ddname */
  tblref = 'DDNAME'
  parse var tbl keyword '=' isptlib '(' table ')'
  if abbrev('DDNAME', ToUpper(keyword), 2) = 0
  then call error 16, 'Invalid table specification: 'tbl
  if isptlib = ''
  then call error 16, 'Invalid table specification: 'tbl
  if table = ''
  then call error 16, 'Invalid table specification: 'tbl
  rc = ISPF(0, "LIBDEF "isptdd" LIBRARY ID("isptlib")")
  end
else do /* data set name specified */
  tblref = 'DSNAME'
  parse var tbl isptlib '(' table ')'
  if isptlib = ''
  then call error 16, 'Invalid table specification: 'tbl
  if table = ''
  then call error 16, 'Invalid table specification: 'tbl
  if Exists(isptlib) <> 0
  then call error 16, isptlib' does not exists'
  if dsorg <> 'PO'
  then call error 16, 'Invalid table specification: 'tbl
  rc = ISPF(0, "LIBDEF "isptdd" DATASET ID('"isptlib"')")
  end

if csv = ''
then call error 16, 'CSV output not specified'
if pos('=', csv) > 0
then do /* reference to the ddname */
  csvref = 'DDNAME'
  parse var csv keyword '=' csvdd '(' csvmember ')'
  if abbrev('DDNAME', ToUpper(keyword), 2) = 0
  then call error 16, 'Invalid CSV specification'
  if csvdd = ''
  then call error 16, 'Invalid CSV specification'
  end
else do /* data set name specified */
  csvref = 'DSNAME'
  parse var csv csvdsname '(' csvmember ')'
  dsorg = ''
  if exists(csvdsname) <> 0
  then call error 16, csvdsname' does not exists'
  select
  when dsorg = 'PS' & csvmember <> ''
  then call error 16, 'Invalid CSV specification'
  when dsorg = 'PO' & csvmember = ''
  then do
    csvmember = table
    csvdsname = csv
    csv = csvdsname'('csvmember')'
    end
  when dsorg = 'PO' & csvmember <> ''
  then nop
    otherwise call error 16, 'Invalid CSV specification'
  end
  csvdd = self
  end

if fs = ''
then fs = ','
if length(fs) = 2 & datatype(fs,'X') = 1
then fs = x2c(fs)
if length(fs) <>  1
then call error 16, 'Invalid field separator 'fs
if fd = ''
then fd = '"'
if length(fd) = 2 & datatype(fd,'X') = 1
then fd = x2c(fd)
if length(fd) <>  1
then call error 16, 'Invalid field delimiter 'fd
if fs = fd
then call error 16, 'Field delimiter and field separator cannot be the same'

/* Open CSV */
if csvref = 'DDNAME'
then lmopt = "DDNAME("csvdd")"
else lmopt = "DATASET('"csvdsname"')"
if csvmember = ''
then lmopt = lmopt' ENQ(EXCLU)'
else lmopt = lmopt' ENQ(SHRW)'
rc = ISPF(0, "LMINIT DATAID(LMID) "lmopt)
lmid = 'DATAID('lmid')'
lmopt = 'OPTION(OUTPUT)'
rc = ISPF(0, 'LMOPEN 'lmid' 'lmopt)
lmopen = 1

rc = ISPF(0, 'TBOPEN 'table' NOWRITE')
tbopen = 1
rc = ISPF(0, 'TBQUERY 'table' KEYS(KEYS) NAMES(NAMES)')
parse var keys . '(' keys ')' .
parse var names . '(' names ')' .
vars = ToUpper(keys) ToLower(names)
line = ''
do while vars <> ''
  parse var vars var vars
  if left(var, 2) = '__'
  then call error rc, 'Unsupported column name: 'var
  line = line''fs''var
end
line = substr(line, 2)
l = length(line)
rc = ISPF(0, 'LMPUT 'lmid' DATALOC(LINE) DATALEN('l') MODE(INVAR)')
rc = ISPF(0, 'TBTOP 'table)
do n = 2
  line = TBGet(table, keys' 'names, fd, fs)
  if line = ''
  then leave
  l = length(line)
  rc = ISPF(0, 'LMPUT 'lmid' DATALOC(LINE) DATALEN('l') MODE(INVAR)')
end
if csvmember <> ''
then rc = ISPF(8, 'LMMREP 'lmid' MEMBER('csvmember') STATS(NO) NOENQ')
say tbl' unloaded to 'csv

Quit:
  'TBEND 'table
  if lmopen = 1
  then 'LMCLOSE 'lmid
  if lmid <> ''
  then 'LMFREE 'lmid
  if isptdd <> ''
  then 'LIBDEF 'isptdd
  "VPUT (ZISPFRC)"
  exit zispfrc

Error: parse arg zispfrc, text
  say text
  signal Quit

TBGet: procedure
  /*
  Note: variable names prefixed here with __ to avoid accidental change when
  table column has the same name as variable (let suppose column name FD)
  */
  parse arg __table, __vars, __fd, __fs
  rc = ISPF(12, "TBSKIP "__table)
  if rc <> 0
  then return ''
  __values = ''
  do while __vars <> ''
    parse var __vars __var __vars
    __value = strip(value(__var))
    if (datatype(__value, 'W') = 0) | (verify(__value, '0123456789.-+') <> 0)
    then do
      if pos(__fd, __value) > 0
      then __value = ChangeStr(__fd, __fd''__fd, __value)
      __value = __fd''__value''__fd
      end
    __values = __values''__fs''__value
  end
  return substr(__values, 2) /* skip leading fs */

/* Check string for uppercase letters / digits / special */
IsUpper:
  return verify(arg(1), upper''digits''special) = 0

/* Check string for valid ISPF table field name */
IsName:
  return (verify(arg(1), lower''upper''digits''special) = 0) & ,
         (verify(left(arg(1),1), lower''upper''special) = 0)

/* Lowercase string */
ToLower:
  return translate(arg(1), lower, upper)

/* Uppercase string */
ToUpper:
  return translate(arg(1), upper, lower)

/* Case-independent changestr function */
ChangeStr: procedure
  parse arg needle, haystack, newneedle
  parse upper arg upper_needle, upper_haystack
  result = ''
  p1 = 1;
  do forever
    p2 = pos(upper_needle, upper_haystack, p1)
    if p2 = 0
    then leave
    result = result''substr(haystack,p1,p2-p1)''newneedle
    p1 = p2 + length(needle)
  end
  return result''substr(haystack, p1)

/* Check if library(member) exists */
Exists: procedure expose dsorg
  parse arg dsn
  rc = LISTDSI("'"dsn"'")
  dsorg = sysdsorg
  return rc

ISPF:
  address ISPEXEC arg(2)
  if rc > arg(1)
  then do
    say self' terminated due to 'word(arg(2),1)' error 'rc':'
    if word(arg(2),1) = 'TBOPEN'
    then do
      select
      when rc = 8
      then msg = 'Table does not exist'
      when rc = 12
      then msg = 'Table was in use'
      otherwise
        msg = 'Severe error'
      end
      end
    else do
      address ISPEXEC 'VGET (ZERRMSG ZERRLM)'
      msg = ZERRMSG' 'ZERRLM
      end
    say arg(2)
    say msg
    signal quit
    end
  return rc
