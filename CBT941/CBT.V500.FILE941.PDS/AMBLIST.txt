/* REXX/370 */
/*

Description:
       AMBLIST interactive interface

Function:
       Invoke AMBLIST interactively to perform an available function
       (LISTIDR, LISTLOAD, LISTOBJ, LISTLPA) and browse output.

Syntax:
       AMBLIST

Parameters:
       none

Note:
       This code contains inline ISPF elements (panel)

(C) 2006-2018 Gregori Bliznets gbliznets@iba.by

*/
trace off
rc = loadispf()
if rc <> 0
then exit 1
zmsg = ''
do forever
  address ISPEXEC 'DISPLAY PANEL(AMBLIST)'
  if rc > 4
  then leave
  address TSO
  if O <> 5
  then do
    volume = ''
    if ambvol <> ''
    then volume = 'VOLUME('ambvol')'
    call outtrap 'NIL.'
    'FREE FI(SYSLIB)'
    call outtrap 'OFF'
    call outtrap 'TSO.'
    "ALLOC FI(SYSLIB) SHR DA('"ambdsn"') "volume
    call outtrap 'OFF'
    end
  if rc <> 0
  then do
    zmsg = tso.1
    iterate
    end
  zmsg = ''
  call outtrap 'NIL.'
  'FREE FI(SYSIN SYSPRINT)'
  call outtrap 'OFF'
  'ALLOC FI(SYSIN) UNIT(VIO) SP(1,1) TRACK RECFM(F) LRECL(80) BLKSIZE(80)'
  if ambunit = 'TRK'
  then ambunit = 'TRACK'
  if ambunit = 'CYL'
  then ambunit = 'CYLINDER'
  'ALLOC FI(SYSPRINT) UNIT(VIO) SP('ambpri','ambsec') 'ambunit,
        'RECFM(F) LRECL(121) BLKSIZE(5687)'
  stmt.0 = 1
  select
  when O = 1
  then stmt.1 = ' LISTIDR MEMBER='ambmem
  when O = 2
  then stmt.1 = ' LISTLOAD OUTPUT=XREF,MEMBER='ambmem
  when O = 3
  then stmt.1 = ' LISTLOAD MEMBER='ambmem
  when O = 4
  then stmt.1 = ' LISTOBJ MEMBER='ambmem
  when O = 5
  then stmt.1 = ' LISTLPA'
  end
  'EXECIO 1 DISKW SYSIN (STEM STMT. FINIS'
  call outtrap off
  "CALL 'SYS1.LINKLIB(AMBLIST)'"
  address ISPEXEC
  'LMINIT DATAID(AMBROWSE) DDNAME(SYSPRINT)'
  'BROWSE DATAID('AMBROWSE')'
  'LMFREE DATAID('AMBROWSE')'
end
address TSO
call outtrap 'NIL.'
'FREE FI(SYSLIB SYSIN SYSPRINT)'
'ALLOC FI(SYSPRINT) DA(*)'
rc = quitispf()
call outtrap 'OFF'
exit

/* Load ISPF elements that are inline in the REXX source code */
LoadISPF:
  dataid = ''
  address TSO
  call outtrap 'NIL.'
  'FREE FI($$ISPF$$)'
  'ALLOC FI($$ISPF$$) UNIT(VIO) SPACE(5,5) DIR(1)' ,
    'LRECL(80) RECFM(F B) BLKSIZE(0)'
  call outtrap 'OFF'
  address ISPEXEC
  'CONTROL ERRORS RETURN'
  'LMINIT DATAID(DATAID) DDNAME($$ISPF$$)'
  'LMOPEN DATAID('dataid') OPTION(OUTPUT)'
  keys = 'START PANEL MSG SKEL END'
  drop data.
  data.0 = 0
  found = 0
  do i = sourceline() to 1 by -1
    s = sourceline(i)
    parse upper var s 1 ?? +2 keyword name .
    select
    when ?? = './'
    then do
      n = wordpos(keyword, keys)
      select
      when n = 0
      then signal quit /* unknown marker */
      when n = 1
      then leave i /* top marker */
      when n = words(keys)
      then found = 1 /* bottom marker */
      otherwise /* marker found */
        if name = ''
        then signal quit /* Name is missed */
        if data.0 = 0
        then iterate i /* empty element */
        do n = data.0 to 1 by -1
          s = data.n
          'LMPUT DATAID('dataid') MODE(INVAR) DATALOC(S) DATALEN(80)'
        end n
        'LMMADD DATAID('dataid') MEMBER('name')'
        drop data.
        data.0 = 0
      end
      end
    when found = 0
    then iterate i
    otherwise /* data element */
      n = data.0+1
      data.n = s
      data.0 = n
    end
  end i
  'LMCLOSE DATAID('dataid')'
  'LMFREE DATAID('dataid')'
  'LIBDEF ISPPLIB LIBRARY ID($$ISPF$$) STACK'
  'LIBDEF ISPMLIB LIBRARY ID($$ISPF$$) STACK'
  'LIBDEF ISPSLIB LIBRARY ID($$ISPF$$) STACK'
  return 0

QuitISPF:
  address ISPEXEC
  'CONTROL ERRORS RETURN'
  if dataid <> ''
  then do
    'LMCLOSE DATAID('dataid')'
    'LMFREE DATAID('dataid')'
     end
  'LIBDEF ISPPLIB'
  'LIBDEF ISPMLIB'
  'LIBDEF ISPSLIB'
  address TSO 'FREE FI($$ISPF$$)'
  return 0

/* Inline ISPF elements follow:
./START
./PANEL AMBLIST
)ATTR
 + TYPE(TEXT) INTENS(LOW)
 % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)
 _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) JUST(LEFT)
 ¬  TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(YELLOW) JUST(LEFT)
)BODY EXPAND (//)
%-/-/ Interactive AMBLIST -/-/
%Command ===>_ZCMD                                                     +
¬ZMSG                                                                          +
+
+Option. . . . . . . _O+ 1 LISTIDR (List load module identification records)
+                        2 LISTLOAD XREF (Load module cross-reference)
+                        3 LISTLOAD (Load module map)
+                        4 LISTOBJ (Object module map)
+                        5 LISTLPA (Link Pack Area listing)
+
+Input
+Library . . . . . . _AMBDSN                                      +
+Member. . . . . . . _AMBMEM  +
+Volume serial . . . _AMBVOL+
+
+Output
+Space units . . . . _AMBUNIT+ (TRACK, TRK, CYLINDER, CYL)
+Primary quantity. . _AMBPRI+  (In above units)
+Secondary quantity. _AMBSEC+  (In above units)
+
)INIT
 .HELP = 'AMBLISTH'
 &ZPRIM = NO
 .CURSOR = O
 &O = &AMBOPT
 &AMBPRI = 5
 &AMBSEC = 5
 &AMBUNIT = TRACK
 IF (&O = &Z )
    &O = 1
)PROC
  VER (&O,NONBLANK)
  VER (&O,LIST,1,2,3,4,5)
  IF  (&O NE 5)
    VER (&AMBDSN,NONBLANK)
    VER (&AMBDSN,DSNAME)
    VER (&AMBMEM,NONBLANK)
    VER (&AMBMEM,NAME)
  &AMBOPT = &O
  VER (&AMBUNIT,LIST,CYLINDER,CYL,TRACK,TRK)
  VER (&AMBPRI,NUM)
  VER (&AMBSEC,NUM)
  VPUT (AMBDSN AMBMEM AMBOPT AMBVOL AMBPRI AMBSEC AMBUNIT) PROFILE
)END
./PANEL AMBLISTH
)ATTR
 + TYPE(TEXT) INTENS(LOW)
 % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)
 _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE) JUST(LEFT)
 ¬  TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(YELLOW) JUST(LEFT)
)BODY EXPAND (//)
%-/-/ Interactive AMBLIST -/-/
%Command ===>_ZCMD                                                     +
¬ZMSG                                                                          +
+
+Specify AMBLIST option:
+  1 - LISTIDR - list load module identification records
+  2 - LISTLOAD XREF - load module cross-reference
+  3 - LISTLOAD - load module map
+  4 - LISTOBJ - object module map
+  5 - LISTLPA - Link Pack Area listing
+
+For all options except 5 (LISTLPA) full qualified library name without
+quotes and member name must be specified. Volume serial required if
+library is not cataloged (antique systems). Specify space allocation
+for output report if required (need to be increased for large module,
+like IEANUC01 etc.). See "MVS Diagnosis: Tools and Service Aids" manual
+for AMBLIST detail description.
)END
./END
*/
