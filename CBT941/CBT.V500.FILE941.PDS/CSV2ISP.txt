/* REXX */
/*

Function:
       Load ISPF table from CSV file

Syntax:
       CSV2ISP csv table ¢fs ¢fd!!

History:
       Created 02/2005
       Updated 09/2005 - command syntax changed to fit SCLM
       Updated 09/2012 - reviewed and rewritten

(C) 2005-2012 Gregory Bliznets gbliznets@iba.by

*/
trace off
parse upper arg csv tbl fs fd
address ISPEXEC
'CONTROL ERRORS RETURN'
lower = 'qwertyuiopasdfghjklzxcvbnm'
parse upper var lower upper
digits = '0123456789'
special = '$_@'
self = 'CSV2ISP'
zispfrc = 0
tbopen = 0
tbcreate = 0
lmid = ''
lmopen = 0
isptdd = 'ISPTABL'

if tbl = ''
then call error 16, 'Table was not specified'
if pos('=', tbl) > 0
then do /* reference to the ddname */
  tblref = 'DDNAME'
  parse var tbl keyword '=' isptlib '(' table ')'
  if abbrev('DDNAME', ToUpper(keyword), 2) = 0
  then call error 16, 'Invalid table specification: 'tbl
  if isptlib = ''
  then call error 16, 'Invalid table specification: 'tbl
  if table = ''
  then call error 16, 'Invalid table specification: 'tbl
  rc = ISPF(0, "LIBDEF "isptdd" LIBRARY ID("isptlib")")
  end
else do /* data set name specified */
  tblref = 'DSNAME'
  parse var tbl isptlib '(' table ')'
  if isptlib = ''
  then call error 16, 'Invalid table specification: 'tbl
  if table = ''
  then call error 16, 'Invalid table specification: 'tbl
  if Exists(isptlib) = 0
  then call error 16, isptlib' does not exists'
  rc = ISPF(0, "LIBDEF "isptdd" DATASET ID('"isptlib"')")
  end

if csv = ''
then call error 16, 'CSV input not specified'
if pos('=', csv) > 0
then do /* reference to the ddname */
  csvref = 'DDNAME'
  parse var csv keyword '=' csvdd '(' csvmember ')'
  if abbrev('DDNAME', ToUpper(keyword), 2) = 0
  then call error 16, 'Invalid CSV specification'
  if csvdd = ''
  then call error 16, 'Invalid CSV specification'
  end
else do /* data set name specified */
  csvref = 'DSNAME'
  parse var csv csvdsname '(' csvmember ')'
  if exists(csv) = 0
  then call error 16, csv' does not exists'
  csvdd = self
  end

if fs = ''
then fs = ','
if length(fs) = 2 & datatype(fs,'X') = 1
then fs = x2c(fs)
if length(fs) <>  1
then call error 16, 'Invalid field separator 'fs
if fd = ''
then fd = '"'
if length(fd) = 2 & datatype(fd,'X') = 1
then fd = x2c(fd)
if length(fd) <>  1
then call error 16, 'Invalid field delimiter 'fd
if fs = fd
then call error 16, 'Field delimiter and field separator cannot be the same'

/* Open CSV */
if csvref = 'DDNAME'
then lmopt = "DDNAME("csvdd")"
else lmopt = "DATASET('"csvdsname"')"
lmopt = lmopt' ENQ(SHR)'
rc = ISPF(0, "LMINIT DATAID(LMID) "lmopt)
lmid = 'DATAID('lmid')'
lmopt = 'OPTION(INPUT)'
rc = ISPF(0, 'LMOPEN 'lmid' 'lmopt)
lmopen = 1

if csvmember <> ''
then rc = ISPF(0, 'LMMFIND 'lmid' MEMBER('csvmember') STATS(NO)')
/* Read and parse CSV header */
parse value '' with keys names
lmopt = 'MODE(INVAR) MAXLEN(32768)'
rc = ISPF(8, 'LMGET 'lmid' DATALOC(LINE) DATALEN(L) 'lmopt)
if rc = 8
then call error rc, csv' is empty'
do while line <>  ''
  parse var line name (fs) line
  name = strip(name)
  if IsName(name) = 0
  then call error rc, 'Invalid column name: 'name
  if left(name, 2) = '__'
  then call error rc, 'Unsupported column name: 'name
  if IsUpper(name) = 1
  then keys = keys' 'name
  else names = names' 'name
end
/* Create table */
parms = ''
if keys <>  ''
then parms = parms' KEYS('strip(keys)')'
if names <>  ''
then parms = parms' NAMES('strip(ToUpper(names))')'
rc = ISPF(4, 'TBCREATE 'table' 'parms' REPLACE')
tbcreate = 1

/* Read and process CSV data records */
do n = 2 /* until EOF reached */
  rc = ISPF(8, 'LMGET 'lmid' DATALOC(LINE) DATALEN(L) 'lmopt)
  if rc = 8 /* EOF reached */
  then leave
  rc = TBPut(table, keys' 'names, strip(line), fd, fs, n)
end n
rc = ISPF(0, 'TBSAVE 'table)
say tbl' loaded from 'csv

Quit:
  if tbcreate = 1
  then 'TBEND 'table
  if lmopen = 1
  then 'LMCLOSE 'lmid
  if lmid <> ''
  then 'LMFREE 'lmid
  if isptdd <> ''
  then 'LIBDEF 'isptdd
  "VPUT (ZISPFRC)"
  exit zispfrc

Error: parse arg zispfrc, text
  say text
  signal Quit

TBPut: procedure
  /*
  Note: variable names prefixed here with __ to avoid accidental change when
  table column has the same name as variable (let suppose column name FD)
  */
  parse arg __table, __vars, __values, __fd, __fs, __n
  __fdfs = __fd''__fs
  do while __vars <>  ''
    parse var __vars __var __vars
    if __values = '' & __vars <> ''
    then call error 20, 'Too few data at line '__n
    if left(__values, 1) = __fd /* delimited field */
    then do
      if __vars = '' /* last field */
      then parse var __values (__fd) __value (__fd) __values
      else parse var __values (__fd) __value (__fdfs) __values
      if pos(__fd''__fd, __value) > 0
      then __value = ChangeStr(__fd''__fd, __fd, __value)
      end
    else parse var __values __value (__fs) __values
    parse upper var __var __var .
    call value __var, __value
  end
  if __values <> ''
  then call error 20, 'Too many data at line '__n
  rc = ISPF(4, 'TBADD '__table)
  return rc

/* Check string for uppercase letters / digits / special */
IsUpper:
  return verify(arg(1), upper''digits''special) = 0

/* Check string for valid ISPF table field name */
IsName:
  return (verify(arg(1), lower''upper''digits''special) = 0) & ,
         (verify(left(arg(1),1), lower''upper''special) = 0)

/* Lowercase string */
ToLower:
  return translate(arg(1), lower, upper)

/* Uppercase string */
ToUpper:
  return translate(arg(1), upper, lower)

/* Case-independent changestr function */
ChangeStr: procedure
  parse arg needle, haystack, newneedle
  parse upper arg upper_needle, upper_haystack
  result = ''
  p1 = 1;
  do forever
    p2 = pos(upper_needle, upper_haystack, p1)
    if p2 = 0
    then leave
    result = result''substr(haystack,p1,p2-p1)''newneedle
    p1 = p2 + length(needle)
  end
  return result''substr(haystack, p1)

/* Check if library(member) exists */
Exists: procedure
  parse arg dsn
  msgmode = 'MSG'('OFF')
  rc = 'SYSDSN'("'"dsn"'") = 'OK'
  msgmode = 'MSG'(msgmode)
  return rc

ISPF:
  address ISPEXEC arg(2)
  if rc > arg(1)
  then do
    say self' terminated due to ' word(arg(2),1) 'error' rc':'
    address ISPEXEC 'VGET (ZERRMSG ZERRLM)'
    msg = ZERRMSG' 'ZERRLM
    say arg(2)
    say msg
    signal quit
    end
  return rc
