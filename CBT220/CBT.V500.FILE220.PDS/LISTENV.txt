/*REXX*/
/*****************************************************************/
/* LISTENV: REXX program to display system environment data.     */
/*    Note: Developed and tested on an MVS/SP 2.2.3 system.      */
/*****************************************************************/
/* MVS DATA AREAS:                                               */
/*                CVT - Communications Vector Table (@'10'x)     */
/*              JESCT - JES Control Table                        */
/*             PCCAVT - Phys. Config. Comm. Area Vector Table    */
/*               PCCA - Physical Config. Communications Area     */
/*               TSVT - TSO Vector Table                         */
/*               MQCT - HSM CVT                                  */
/*                RCE - RSM Control and Enumeration Area         */
/*                PSA - Prefixed Saved Area (CVT & PSAATCVT)     */
/*              ASMVT - ASM Vector Table                         */
/*                DCQ - Device Class Queue                       */
/*                UCB - Device Unit Control Block                */
/*****************************************************************/
Address TSO ; "CLEAR" ; Numeric Digits 20
@cvt = STORAGE(10,4)                  /* get CVT address from PSAAOLD */
@cvt = D2X(C2D(@cvt))                                /* binary to hex */
@cvtprodn = D2X(X2D(@cvt)-40)                 /* get CVTPRODN address */
mvssplvl  = STORAGE(@cvtprodn,8)                      /* get SP level */
@cvtprodi = D2X(X2D(@cvt)-32)                 /* get CVTPRODI address */
mvsfmid   = STORAGE(@cvtprodi,8)                          /* get FMID */
@cvtmdl   = D2X(X2D(@cvt)-6)                    /* get CVTMDL address */
cpumodel  = STORAGE(@cvtmdl,2)                           /* get MODEL */
cpumodel  = C2X(cpumodel)
@cvtsysad = STORAGE(D2X(X2D(@cvt)+48),4)      /* get CVTSYSAD address */
@cvtsysad = D2X(C2D(@cvtsysad))                      /* binary to hex */
sysresucb = STORAGE(@cvtsysad,48)                          /* get UCB */
ucbchan   = SUBSTR(sysresucb,4,3)            /* correct for 4 char ucb*/
ucbchan   = SUBSTR(C2X(ucbchan),3)           /* Correct for 4 char UCB*/
ucbvoli   = SUBSTR(sysresucb,29,6)
@cvttvt   = STORAGE(D2X(X2D(@cvt)+156),4)       /* get CVTTVT address */
@cvttvt   = D2X(C2D(@cvttvt))                        /* binary to hex */
tsvtlver  = STORAGE(D2X(X2D(@cvttvt)+100),1)          /* get TSVTLVER */
tsvtlrel  = STORAGE(D2X(X2D(@cvttvt)+101),2)          /* get TSVTLREL */
tsvtlmod  = STORAGE(D2X(X2D(@cvttvt)+103),1)          /* get TSVTLMOD */
  tsoe = tsvtlver'.'tsvtlrel'.'tsvtlmod
@cvtmz00  = STORAGE(D2X(X2D(@cvt)+164),4)              /* get CVTMZ00 */
@cvtmz00  = D2X(C2D(@cvtmz00))                       /* binary to hex */
  eovm  = ((X2D(@cvtmz00)+1)/1048576)'M'
@cvtjesct = STORAGE(D2X(X2D(@cvt)+296),4)     /* get CVTJESCT address */
@cvtjesct = D2X(C2D(@cvtjesct))                      /* binary to hex */
  jes     = STORAGE(D2X(X2D(@cvtjesct)+28),4)         /* get JES name */
@cvteorm  = STORAGE(D2X(X2D(@cvt)+312),4)      /* get CVTEORM address */
@cvteorm  = D2X(C2D(@cvteorm))                       /* binary to hex */
  cstor = ((X2D(@cvteorm)+1)/1048576)'M'             /* convert to MB */
@cvtext2  = STORAGE(D2X(X2D(@cvt)+328),4)      /* get CVTEXT2 address */
@cvtext2  = D2X(C2D(@cvtext2))                       /* binary to hex */
cvtnucls  = STORAGE(D2X(X2D(@cvtext2)+4),1)   /* get selected nucleus */
@cvtasmvt = STORAGE(D2X(X2D(@cvt)+704),4)     /* get CVTASMVT address */
@cvtasmvt = D2X(C2D(@cvtasmvt))                      /* binary to hex */
asmflag2  = STORAGE(D2X(X2D(@cvtasmvt)+1),1)
  clpa = '(NO CLPA)'
  If BITAND(asmflag2,'08'x) \= '08'x Then clpa = '(CLPA)'
@cvtpccat = STORAGE(D2X(X2D(@cvt)+764),4)     /* get CVTPCCAT address */
@cvtpccat = D2X(C2D(@cvtpccat))                      /* binary to hex */
@cvtrlstg = STORAGE(D2X(X2D(@cvt)+856),4)       /* get CVTRLSTG bytes */
@cvtrlstg = C2D(@cvtrlstg)                           /* binary to dec */
  cstorol = ((@cvtrlstg)/1024)'M'                    /* convert to MB */
@cvthsm   = STORAGE(D2X(X2D(@cvt)+988),4)       /* get CVTHSM address */
@cvthsm   = D2X(C2D(@cvthsm))                        /* binary to hex */
mqctver   = STORAGE(D2X(X2D(@cvthsm)+48),2)            /* get MQCTVER */
mqctrel   = STORAGE(D2X(X2D(@cvthsm)+50),1)            /* get MQCTREL */
mqctmod   = STORAGE(D2X(X2D(@cvthsm)+51),1)            /* get MQCTMOD */
  hsm  = mqctver'.'mqctrel'.'mqctmod
@cvtdfa   = STORAGE(D2X(X2D(@cvt)+1216),4)      /* get CVTDFA address */
@cvtdfa   = D2X(C2D(@cvtdfa))                        /* binary to hex */
dfadata   = STORAGE(@cvtdfa,4)                  /* get DFP level data */
dfadata   = C2X(dfadata)
dfaver    = SUBSTR(dfadata,5,1)                    /* get DFP version */
dfarel    = SUBSTR(dfadata,6,1)                    /* get DFP release */
dfamod    = SUBSTR(dfadata,7,1)                    /* get DFP mod lvl */
  dfp  = dfaver'.'dfarel'.'dfamod
@cvtrcep  = STORAGE(D2X(X2D(@cvt)+1168),4)     /* get CVTRCEP address */
@cvtrcep  = D2X(C2D(@cvtrcep))                       /* binary to hex */
rceespl   = STORAGE(D2X(X2D(@cvtrcep)+160),4)  /* get RCEESPL frames  */
  estor = ((C2D(rceespl)*4096)/1048576)'M'           /* convert to MB */
@psaatcvt = STORAGE(408,4)             /* get VTAM ATCVT from PSAAOLD */
@psaatcvt = D2X(C2D(@psaatcvt))                      /* binary to hex */
atcvtdata = STORAGE(@psaatcvt,4)               /* get VTAM level data */
atcvtdata = C2X(atcvtdata)
atcvtver  = SUBSTR(atcvtdata,6,1)                 /* get VTAM version */
atcvtrel  = SUBSTR(atcvtdata,8,1)                 /* get VTAM release */
  vtam = atcvtver'.'atcvtrel
Say 'CVT:'@cvt'   SYSTEM ENVIRONMENT DATA on 'DATE() TIME()
Say ' '
Say '   Software -   MVS: 'mvssplvl' ('STRIP(mvsfmid)')    JES: 'jes
Say '                DFP: 'dfp'               TSO/E: 'tsoe
Say '               VTAM: 'vtam'                   HSM:'hsm
Say '                IPL: 'ucbvoli' @ 'ucbchan'     Nucleus: 'cvtnucls,
    '  'clpa
Say ' '
Say '  Processor - Model: 'cpumodel
Say '              CSTOR: 'cstor'   ('cstorol' on-line)    ESTOR: 'estor
Say '              VSTOR: 'eovm'  (Highest virtual address '@cvtmz00'/',
    X2D(@cvtmz00)')'
Do i = 0 to 15                                 /* loop thru CPU table */
   @pcca = STORAGE(D2X(X2D(@cvtpccat)+(i*4)),4)
   @pcca = C2X(@pcca)
   If @pcca \= 0 Then Do
      Say '                CPU: 'RIGHT(i,2,0),
          '    ('STORAGE(D2X(X2D(@pcca)+4),8)')'
      End
   End
@cvtdcqa  = STORAGE(D2X(X2D(@cvt)+1248),4)     /* get CVTDCQA address */
@cvtdcqa  = D2X(C2D(@cvtdcqa))                       /* binary to hex */
@cvtixav  = STORAGE(D2X(X2D(@cvt)+124),4)      /* get CVTIXAVL addres */
@cvtixav  = D2X(C2D(@cvtixav))                       /* binary to hex */
@iovtadr  = STORAGE(D2X(X2D(@cvtixav)+208),4)  /* get IOVT address    */
@iovtadr  = D2X(C2D(@iovtadr))                       /* binary to hex */
@ulutadr  = STORAGE(D2X(X2D(@iovtadr)+8),4)    /* get IOVT address    */
@ulutadr  = D2X(C2D(@ulutadr))                       /* binary to hex */
if @ulutadr = 0 then                            /* zOS V2.2 or higher */
  do
   Say ''
   @ulutadr  = STORAGE(D2X(X2D(@iovtadr)+440),8)  /* get IOVT address */
   @ulutadr  = D2X(C2D(@ulutadr))                    /* binary to hex */
   Say 'zOS:'MVSVAR(SYSOPSYS)' Ulut is in 64 bit storage @ '@ulutadr
  end
ulu      = STORAGE(@ulutadr,64)             /* get 56 byte ulu header */
uluname  = SUBSTR(ulu,1,4)                         /* ulut eyecatcher */
ulutype  = SUBSTR(ulu,5,1)                         /* ulut Type 1 or 2*/
If ulutype = '01'x Then off = 0                    /* ULUT Type 1     */
                   Else off = 8                    /* ULUT Type 2     */
If ulutype = '03'x Then                            /* ULUT Type 3     */
 Do
   ulufirst = SUBSTR(ulu,17,8)          /* addr of 1st ULU element(64)*/
   uluucbno = SUBSTR(ulu,29,4)          /* # of ucb's this I/O config */
   off = 12
 End
Else
 Do                                     /* Ulut type 1 or 2           */
   ulufirst = SUBSTR(ulu,13+off,4)      /* address of 1st ULU element */
   uluucbno = SUBSTR(ulu,17+off,4)      /* # of ucb's this I/O config */
 End
 uluttape = SUBSTR(ulu,21+off,4)        /* # of TAPE UCBs in I/O cfg  */
 ulutcomm = SUBSTR(ulu,25+off,4)        /* # of COMM UCBs in I/O cfg  */
 ulutdasd = SUBSTR(ulu,29+off,4)        /* # of DASD UCBs in I/O cfg  */
 ulutdisp = SUBSTR(ulu,33+off,4)        /* # of DISP UCBs in I/O cfg  */
 uluturec = SUBSTR(ulu,37+off,4)        /* # of UREC UCBs in I/O cfg  */
 ulutchar = SUBSTR(ulu,41+off,4)        /* # of CHAR UCBs in I/O cfg  */
 ulutctca = SUBSTR(ulu,45+off,4)        /* # of CTCA UCBs in I/O cfg  */
@uluchn  = C2X(ulufirst)
dcq      = STORAGE(@cvtdcqa,20)             /* get 20 byte DCQ header */
dcqcount = SUBSTR(dcq,7,2)                      /* number of elements */
dcqfirst = SUBSTR(dcq,9,4)              /* address of 1st dcq element */
@dcqchn  = C2X(dcqfirst) ; i = 0
Say ' '
Say '        I/O - Device    Class   UCBs  Active  ID=UCB'
Say '              --------  ------  ----  ------  ------'
Do i = 1 to C2D(dcqcount)          /* scan the DCQ for all dev classes*/
   dcqelmnt = STORAGE(@dcqchn,28)          /* get 28 byte DCQ element */
   dcqchain = SUBSTR(dcqelmnt,1,4)      /* get next element's address */
   @dcqchn  = D2X(C2D(dcqchain))
   dcqdevc.i = SUBSTR(dcqelmnt,5,1)    /* device class, i.e. UCBTBYT3 */
   dcqdevn.i = SUBSTR(dcqelmnt,13,8)             /* device class name */
   act.i = 0 ; uluucbc.i = 0 ; ok.i ='ERROR'  /* Initialize counters  */
End
 Do j = 1 to C2D(uluucbno)              /* scan the ULUT for ALL UCBs */
     uluelmnt = STORAGE(@uluchn,12)       /* get 12 byte ULUT element */
     uluucbad = SUBSTR(uluelmnt,9,4)     /* 1st ucb this device class */
     uluucbad = C2X(uluucbad) ; @ucbchn = uluucbad
      ucb     = STORAGE(@ucbchn,24) /* get 24 byte ucb common segment */
      ucbstat = SUBSTR(ucb,4,1)           /* status byte '80'x online */
      ucbnxucb= SUBSTR(ucb,9,4)                /* pointer to next ucb */
      ucbtbyt3= SUBSTR(ucb,19,1)           /* device ID like dcqdevcl */
   Do k = 1 to C2D(dcqcount)           /* loop through all dev classes*/
      If ucbtbyt3 = dcqdevc.k Then
        Do
          If BITAND(ucbstat,'80'x)='80'x Then act.k = act.k + 1
          uluucbc.k = uluucbc.k + 1
        End
   end                                 /* End  through all dev classes*/
   @uluchn  = D2X(x2d(@uluchn)+12)
 End                                               /* End of ULUT scan*/
    Do l = 1 to C2D(dcqcount)                     /*  Print output    */
    Select
      When dcqdevn.l = 'TAPE' Then
        If uluucbc.l = X2D(C2X(uluttape)) then ok.l = '*okay*'
      When dcqdevn.l = 'COMM' Then
        If uluucbc.l = X2D(C2X(ulutcomm)) then ok.l = '*okay*'
      When dcqdevn.l = 'DASD' Then
        If uluucbc.l = X2D(C2X(ulutdasd)) then ok.l = '*okay*'
      When dcqdevn.l = 'DISP' Then
        If uluucbc.l = X2D(C2X(ulutdisp)) then ok.l = '*okay*'
      When dcqdevn.l = 'UREC' Then
        If uluucbc.l = X2D(C2X(uluturec)) then ok.l = '*okay*'
      When dcqdevn.l = 'CHAR' Then
        If uluucbc.l = X2D(C2X(ulutchar)) then ok.l = '*okay*'
      Otherwise
        If uluucbc.l = X2D(C2X(ulutctca)) then ok.l = '*okay*'
    End
    If uluucbc.l = 0 Then Do
       uluucba.l = '        '
       act.l    = '    ' ; ok.l     = '      '
    End
   Say '              'dcqdevn.l'   'C2X(dcqdevc.l)'x',
       '   'RIGHT(uluucbc.l,4),
       '   'RIGHT(act.l,4)'  'ok.l
    end                                          /* End  Print output */
Exit
