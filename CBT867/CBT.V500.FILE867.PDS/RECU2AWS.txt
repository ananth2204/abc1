//HERC01R  JOB (XXXXXXXX,XXXX,1439,9999),RECU2AWS-HERC01,
//         CLASS=A,MSGCLASS=C,
//         NOTIFY=HERC01,COND=(0,NE)
//RECU2AWS EXEC ASMFCL,
//             PARM.ASM=(RENT,TERM,NODECK,OBJ,LIST),
//             PARM.LKED=(REUS,RENT,REFR,TERM,LIST,XREF,NOLET,NOCALL)
PASS     TITLE 'RECU2AWS - - - Copy file to AWSTAPE image file'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Change log:
*
* 2012-03-29 Removed the RECFM=U input restriction by hard-coding the
*   W.A.M.   SYSUT1 DCB too always claim that the input is RECFM=U
*
* 2011-10-23 LTR R10,R10 replaced SLR R10,R10 between label EOF and
*   W.A.M.   label EOF2.  Thank you Dave Kreiss
*
* This program copies the blocks of a sequential data set or member
* to an AWSTAPE image data set.  It pretends that the input is
* RECFM=U whether it is or not to use QSAM to read blocks of data
* instead of logical records.
*
* Note: RECU2AWS may be replaced with a program DSET2AWS
* that uses BSAM for input as soon as I have time.
*
* Override note: I have not written DSET2AWS but changed this
* program to also handle RECFM=FB and RECFM=VB input.
*
* Warning: this program is for sequential data, not a PDS.
* Trying to use it on a PDS would only get the directory.
*
* Date written: 2011-10-21
*
* Blame: somitcw@yahoo.com
*
* Sample JCL #1:
*
* //HERC01R JOB  (xxxxxxxx,xxxx,1439,9999,9999),RECU2AWS-HERC01,
* //             COND=(0,NE),NOTIFY=HERC01,CLASS=A,MSGCLASS=C
* //ADRDUMP EXEC PGM=ADRDSSU
* //SYSPRINT DD  SYSOUT=*
*  DUMP INDDNAME(INPUT) OUTDDNAME(OUTPUT) COMPRESS
* //INPUT    DD  DISP=SHARE,UNIT=SYSDA,VOL=SER=xxxxxx
* //OUTPUT   DD  DISP=(,PASS,DELETE),
* //             UNIT=(SYSDA,5),SPACE=(TRK,(65535,65535),RLSE),
* //             DCB=(RECFM=U,LRECL=0,BLKSIZE=27998)
* //*
* //RECU2AWS EXEC PGM=RECU2AWS,COND=(0,NE)
* //SYSUDUMP DD  SYSOUT=*  Please send dumps to the above "Blame:"
* //SYSUT1   DD  DISP=(SHARE,DELETE),DSNAME=*.ADRDUMP.OUTPUT
* //SYSUT2   DD  DISP=(,CATLG,DELETE),DSNAME=&SYSUID..Vxxxxxx.AWS,
* //             UNIT=(SYSDA,4),SPACE=(TRK,(65535,65535),RLSE),
* //             DCB=(RECFM=U,LRECL=0,BLKSIZE=27998)
* //*
* //CHECKCC EXEC PGM=IEFBR14
* //
*
* Sample JCL #2:
*
* //HERC01R JOB  (xxxxxxxx,xxxx,1439,9999,9999),RECU2AWS-HERC01,
* //             COND=(0,NE),NOTIFY=HERC01,CLASS=A,MSGCLASS=C
* //*
* //RECU2AWS EXEC PGM=RECU2AWS
* //SYSUDUMP DD  SYSOUT=*  Please send dumps to the above "Blame:"
* //SYSUT1   DD  DISP=SHR,DSN=HERC01.A.DATA(RECU2AWS)
* //SYSUT2   DD  DISP=(,CATLG,DELETE),DSN=HERC01.A.RECU2AWS,
* //             UNIT=3390,SPACE=(TRK,1),
* //             DCB=(RECFM=U,LRECL=0,BLKSIZE=27998)
* //*
* //CHECKCC EXEC PGM=IEFBR14
* //
*
*      DCL 1 T_Header,
*           2 t_size  fixed(16),  /* Size of the following block */
*           2 t_psize fixed(16),  /* Size of the previous block  */
*           2 t_flags,            /* Control flags.              */
*             3 t_Newrec  bit,    /* start of new record         */
*             3 t_eof     bit,    /* end-of-file mark            */
*             3 t_Endrec  bit,    /* End of a record             */
*             3 *         bit,    /* Must be zero                */
*             3 *         bit,    /* Reserved                    */
*             3 reserved bit(11); /* Must be zero                */
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         PRINT ON,DATA,GEN        Give me all assembler information
RECU2AWS CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'RECU2AWS.&SYSDATE..&SYSTIME' Save reg.s
         DROP  R15                DROP the temporary base register
         LR    R12,R15            Load RECU2AWS base register
         USING RECU2AWS,R12       Give the assembler the new base reg.
         L     R0,WORKSIZE        Load register for FREEMAIN size
         GETMAIN R,LV=(0)         Get memory for work area
         XC    0(256,R1),0(R1)    Clear first part of work area
         ST    R1,8(,R13)         Chain RECU2AWS old and new save areas
         ST    R13,4(,R1)         Chain RECU2AWS old and new save areas
         LR    R13,R1             Chain RECU2AWS old and new save areas
         USING WORKAREA,R13       Give the assembler the work area reg.
         MVC   SYSUT1(DUMUT1SZ),DUMUT1  Copy DCB template to DCB area
         MVI   OPENCLOS,X'80'     Mark last DCB in OPEN/CLOSE list
         OPEN  SYSUT1,MF=(E,OPENCLOS)  OPEN input file
*20120329 TM    SYSUT1+DCBRECFM-IHADCB,DCBRECU  See if RECFM=U
*20120329 BNO   ABEND1             Not RECFM=U, go abend
         MVC   SYSUT2(DUMUT2SZ),DUMUT2  Copy DCB template to DCB area
         MVI   OPENCLOS,X'80'     Mark last DCB in OPEN/CLOSE list
         OPEN  (SYSUT2,OUTPUT),MF=(E,OPENCLOS)  OPEN output file
         TM    SYSUT2+DCBRECFM-IHADCB,DCBRECU  See if RECFM=U
         BNO   ABEND2             Not RECFM=U, go abend
         SLR   R11,R11            Clear a work register
         ICM   R11,B'0011',SYSUT2+DCBBLKSI-IHADCB  Load output BLKSIZE
         ST    R11,BLKSIZE        Save the maximum output BLLSIZE
         LA    R11,BUFFER         Set R11 to current location in buffer
         LA    R10,0              Set R10 to amount of data in buffer
GET      DS    0H
         LA    R9,6(,R11)         Find where to read data
         GET   SYSUT1,(R9)        Read a record from the input file
         SLR   R9,R9              Clear a work register
         ICM   R9,B'0011',SYSUT1+DCBLRECL-IHADCB  Load data size read
* Build AWSTAPE header
         STC   R9,0(,R11)         Build AWSTAPE header, block size
         STCM  R9,B'0010',1(R11)  Build AWSTAPE header, block size
         MVC   2(2,R11),OLDSIZE   Build AWSTAPE header, previous size
         MVI   4(R11),X'A0'       Indicate start and end of block
         MVI   5(R11),X'00'       Clear all bits in last header byte
* AWSTAPE header has been built
         MVC   OLDSIZE(2),0(R11)  Save new block length for next block
         LA    R10,6(R9,R10)      Find new amount of data in buffer
         LA    R11,6(R9,R11)      Find new current loc. for next block
         CL    R10,BLKSIZE        Is full SYSUT2 block available?
         BL    GET                Not enough data yet, go get more data
         BAL   R8,PUTROUT         Else, go write some output data
         B     GET                Go to get more input data
*
* PUTROUT sub-routine writes at least one block of data even if not
* large enough for a full output BLKSIZE.  The "always write one
* block even if short" is to handle the last short block.
* PUTROUT sub-routine will normally write full output blocks until
* there is not enough data in the buffer to write a full block.
* PUTROUT then slides remaining data in the buffer to the beginning
* of the buffer area so the data should never over-flow the buffer.
*
PUTROUT  DS    0H
         LA    R11,BUFFER         Load address of input data
         L     R9,BLKSIZE         Load maximum size of block to put
         CR    R10,R9             See if enough data for maximum block
         BNL   PUTBLOCK           Have maximum available, go PUT
         LR    R9,R10             Set to put a short block
PUTBLOCK DS    0H
         STH   R9,SYSUT2+DCBLRECL-IHADCB  Update SYSUT2 DCB with
*                                 amount of data to write
         PUT   SYSUT2,(R11)       Write a SYSUT2 block
         SR    R10,R9             Find new data length left
         AR    R11,R9             Find location of remaining data
         CL    R10,BLKSIZE        See if enough data for another block
         BL    SHIFTBUF           Not enough, go shift data in buffer
         L     R9,BLKSIZE         Load maximum size of block to put
         B     PUTBLOCK           Go back to write another block
SHIFTBUF DS    0H
         LA    R2,BUFFER          Load MVCL output address
         LR    R4,R11             Copy data address to MVCL input addr.
         LA    R11,0(R10,R2)      Set R11 to location after data
         LTR   R3,R10             Load length of data in buffer
         BZR   R8                 Buffer is empty, return to main-line
         LR    R5,R3              Copy MVCL output length to input len.
         MVCL  R2,R4              Slide unwritten data to buffer start
         BNZ   ABEND3             Error, MVCL destructive over-lap?
         BR    R8                 Return to main-line code
* End of sub-routine PUTROUT
*
EOJ      DS    0H
         MVC   0(12,R11),EOTMARKS Put tapemarks after last block
         MVC   2(2,R11),OLDSIZE   Update previous block length
         LA    R10,12(,R10)       Add length of tapemarks
         BAL   R8,PUTROUT         Go write some output data
         LTR   R10,R10            Has all data been written?
         BZ    EOJ2               Output buffer empty, go close files
         BAL   R8,PUTROUT         Else, write last block of output data
EOJ2     DS    0H
         MVI   OPENCLOS,X'80'     Mark last DCB in OPEN/CLOSE list
         CLOSE SYSUT2,MF=(E,OPENCLOS)  CLOSE the output file first
         MVI   OPENCLOS,X'80'     Mark last DCB in OPEN/CLOSE list
         CLOSE SYSUT1,MF=(E,OPENCLOS)  CLOSE the input file last
         L     R0,WORKSIZE        Load register for FREEMAIN size
         LR    R1,R13             RECU2AWS work area addr. for FREEMAIN
         L     R13,4(,R13)        Restore the caller's save area addr.
         FREEMAIN R,LV=(0),A=(1)  Free work area
         RETURN (14,12),RC=0      Return to caller
*
*20120329 ABEND1   DS    0H
*20120329 WTO   'SYSUT1 is not RECFM=U, RECU2AWS abending',ROUTCDE=11
*20120329 ABEND 3331               Abend without a dump
*
ABEND2   DS    0H
         WTO   'SYSUT2 is not RECFM=U, RECU2AWS abending',ROUTCDE=11
         ABEND 3332               Abend without a dump
*
ABEND3   DS    0H
         WTO   'MVCL destructive overlap, RECU2AWS abending',ROUTCDE=11
         ABEND 3333,DUMP          Abend with a dump
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants Data Control Blocks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
EOTMARKS DC    XL12'000000004000000000004000' Will overlay bytes +2 & 3
*                  +0 1 2 3 4 5 6 7 8 9 a b
WORKSIZE DC    A(WORKLEN)         Length of work area
         DS    0D                 To have a better dump DCB alignment
DUMUT1   DCB   DDNAME=SYSUT1,     Should be RECFM=U and LRECL=0        C
               DSORG=PS,          Data Set Org. Physical Sequential    C
               EODAD=EOJ,         End Of Data Address of label EOJ     C
               MACRF=GM,          Input GET move-mode file             C
               RECFM=U            Pretend that input is RECFM=U to
*                                 read input as blocks 2012-03-29
DUMUT1SZ EQU   *-DUMUT1           Length of dummy Data Control Block
*
DUMUT2   DCB   DDNAME=SYSUT2,                                          C
               DSORG=PS,          Data Set Org. Physical Sequential    C
               LRECL=0,           Logical Record Length                C
               MACRF=PM,          Output PUT move-mode file            C
               RECFM=U            RECord ForMat is Undefined
DUMUT2SZ EQU   *-DUMUT2           Length of dummy Data Control Block
*
         LTORG ,                  In case someone adds literals
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
WORKAREA DSECT ,
SAVEAREA DS    18F                Register save area
OLDSIZE  DS    H                  Old header block size inited to zero
BLKSIZE  DS    F                  SYSUT2 output maximum BLKSIZE
         DS    0D                 Like DCBs on a double word boundary
SYSUT1   DS    XL(DUMUT1SZ)       Hold memory for SYSUT1 DCB
SYSUT2   DS    XL(DUMUT2SZ)       Hold memory for SYSUT2 DCB
OPENCLOS DS    D                  OPEN/CLOSE parameter list
BUFFER   DS    132XL1024          I/O and work buffer
WORKLEN  EQU   *-WORKAREA         Length of work area
*
* DCB DSECT follows
         DCBD   DSORG=PS,DEVD=DA  DSECT for a sequential DCB
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//LKED.SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR,SPACE=
 NAME RECU2AWS
//CHECKCC EXEC PGM=IEFBR14
//
