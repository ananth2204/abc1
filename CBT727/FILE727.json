{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012655000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE727.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE727.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x11'", "DS1TRBAL": "b'C\\xde'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xfc\\x00\\x01\\x04\\xfc\\x00\\x03\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04F\\x00\\x00\\x01\\x051\\x1f\\x01\\x051\\x1f\\x101\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf0@@@'", "ispf": {"version": "04.70", "flags": 0, "createdate": "2005-11-07T00:00:00", "modifydate": "2005-11-07T10:31:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-470"}, "text": "REGULAR CBT TAPE - VERSION 470    FILE:  727\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT470.FILE727\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 349 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/07/05    10:31:14    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE0": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x051\\x1f\\x01\\x051\\x1f\\x06Y\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-11-07T00:00:00", "modifydate": "2005-11-07T06:59:44", "lines": 25, "newlines": 25, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:       VBS Copy program\nFrom:          martin_kline@americancentury.com\nDate:          Tue, 18 Oct 2005 14:25:19 -0500\nTo:            sbgolob@cbttape.org\n\nHi, Sam.\n\nA question from Gilbert Saint-Flour on the IBM-MAIN list prompted\nme to put together a quick program.\n\nGilbert wanted a program that could copy and reblock a VBS format\ndisk file that had a full-track block size.  Apparently, an\nappropriate utility didn't exist.  The large block interface is\nnot currently supported for disk files.  So, I wrote a copy\nprogram.\n\nThe program is very simple. It reads the input file a track at a\ntime, deblocks the records, and writes them out to a new VBS file\nusing QSAM.\n\n\nI've included the assembler source in case you want to include\nthe file on the CBT tape.\n\nMartin Kline\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x050\\x1f\\x01\\x050\\x1f\\x00P\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-10-28T00:00:00", "modifydate": "2005-10-28T00:50:02", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam,\n\nThe program I sent yesterday would not work with input blocks\ngreater than 32,767 bytes.  It incorrectly used LH to pick up the\nblock length from the count field and CH to compare the block\nlength to the RDW in the block.  This new version should handle\nblocks greater than 32K in size.\n\n(See attached file: COPYVBS.txt)\n\nKeep up the good work!\n\nMartin Kline\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE727": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04F\\x00\\x00\\x01\\x051\\x1f\\x01\\x051\\x1f\\x101\\x00\\x07\\x00\\x07\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf0@@@'", "ispf": {"version": "04.70", "flags": 0, "createdate": "2005-11-07T00:00:00", "modifydate": "2005-11-07T10:31:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "CBT-470"}, "text": "//***FILE 727 is from Martin Kline and contains a program to copy   *   FILE 727\n//*           VB or VBS disk files, up to a full track in length,   *   FILE 727\n//*           to a VBS output file.  EXCP is used to read the       *   FILE 727\n//*           input file.                                           *   FILE 727\n//*                                                                 *   FILE 727\n//*           email:  martin_kline@americancentury.com              *   FILE 727\n//*                                                                 *   FILE 727\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COPYVBS": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x051\\x1f\\x01\\x051\\x1f\\x10)\\x01$\\x01$\\x00\\x00\\xd4`\\xd2\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-11-07T00:00:00", "modifydate": "2005-11-07T10:29:55", "lines": 292, "newlines": 292, "modlines": 0, "user": "M-KLINE"}, "text": "* ------------------------------------------------------------------- *\n* COPYVBS                                                             *\n*                                                                     *\n* THIS PROGRAM READS ANY VB/VBS DISK FILE AND WRITES IT TO A          *\n* VBS OUTPUT FILE.                                                    *\n*                                                                     *\n* USES EXCP TO READ A TRACK AT A TIME, ALLOWING FOR FULL-TRACK BLOCKS *\n*                                                                     *\n* DD NAMES ARE SYSUT1, SYSUT2 AND SYSPRINT                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n* 10/17/05 ORIGINAL CODE BY MARTIN KLINE                              *\n* ------------------------------------------------------------------- *\n         ENTRY COPYVBS\nCOPYVBS  CSECT\n         SAVE  (14,12),,COPYVBS.&SYSDATE.&SYSTIME\n         LR    12,15                  SET BASE REG\n         USING COPYVBS,12\n         LA    2,SAVEAREA             POINT TO SAVE AREA\n         ST    13,4(,2)               BACKWARD CHAIN SAVE AREAS\n         ST    2,8(,13)               FORWARD CHAIN SAVE AREAS\n         LR    13,2                   SET SAVE AREA POINTER\n         MVI   IOBFLAG1,B'11000010'\n         LA    1,ECB1\n         STCM  1,7,IOBECBPT\n         LA    1,CCW2\n         STCM  1,7,IOBSTART\n         LA    1,SYSUT1\n         STCM  1,7,IOBDCBPT\n* ------------------------------------------------------------------- *\n         OPEN  (SYSUT1,,SYSPRINT,OUTPUT,SYSUT2,OUTPUT)   OPEN FILES\n         LTR   15,15\n         BNZ   EXIT\n* ------------------------------------------------------------------- *\n         LA    10,SYSUT1\n         USING IHADCB,10\n         GETMAIN R,LV=32768\n         ST    1,RECAREA\n* ------------------------------------------------------------------- *\n*   READ AN ENTIRE TRACK                                              *\n* ------------------------------------------------------------------- *\n*\nREADLOOP L     0,DCBRELAD             GET TTRN\n         L     1,DCBDEBAD             DEB ADDRESS\n         LA    2,MBBCCHHR             MBBCCHHR FIELD\n         STM   8,13,20(13)            SAVE R8-R13\n         LR    8,13                   SAVE R8-R13\n         L     15,16                  CVTPTR\n         L     15,28(,15)             CVTPCNVT\n         BALR  14,15                  COMPUTE MBBCCHHR\n         LM    8,13,20(8)             RESTORE R8-R13\n         LTR   15,15                  SUCCESSFUL?\n         BNZ   EOFUT1                 END OF EXTENT, CLOSE\n         EXCP  IOB1                   FULL TRACK READ\n         WAIT  1,ECB=ECB1\n* ------------------------------------------------------------------- *\n*   INTERPRET THE ENTIRE TRACK JUST READ                              *\n*      R11  =  REMAINING LENGTH OF ALL DATA READ FROM A TRACK         *\n*      R10 --> COUNT FIELD OF CURRENT BLOCK                           *\n*      R9   =  REMAINING LENGTH OF DATA IN A BLOCK                    *\n*      R8  --> DATA OR RECORD IN A BLOCK                              *\n* ------------------------------------------------------------------- *\n         LM    10,11,CCW4             PTR TO BUFFER AND REQ LENGTH\n         USING COUNT,10\n         LA    10,0(,10)              START OF BUFFER\n         SLR   0,0\n         ICM   0,B'0011',IOB1+14      RESIDUAL COUNT\n         SLR   11,0                   ACTUAL LENGTH READ\n*\nBLKLOOP  CLC   COUNTKL(3),=3X'00'     KEY AND DATA LENGTH = 0 ?\n         BE    EOFUT1                 YES - THAT'S END OF FILE\n*\n         SLR   1,1                    CLEAR REG 1\n         IC    1,COUNTKL              GET KEY LENGTH\n         SLR   9,9                    CLEAR REG 9\n         ICM   9,3,COUNTDL            GET DATA LENGTH\n         LA    8,COUNT+8(1)           POINT TO DATA FIELD\n         CLM   9,3,0(8)               COMPARE DATA LENGTH TO RDW\n         BNE   BADBDW                 NOT MATCHED - ERROR\n*\n         LA    8,4(,8)                POINT PAST BDW\n         SH    9,=H'4'                REDUCE REMAINING LENGTH\n*\nRECLOOP  LTR   9,9                    ANY DATA LEFT IN BLOCK ?\n         BZ    NEXTBLK                NO - GO TO NEXT BLOCK\n*\n         CHI   9,4                    IS REMAINING LENGTH VALID ?\n         BL    BADRECL                NO - ERROR\n*\n         STCM  11,3,HWORD             SAVE REMAINING BLOCK LENGTH\n         CLC   HWORD,0(8)             IS RECORD LENGTH OK ?\n         BL    BADRECL                YES - INVALID\n*\n         CLC   0(2,8),=H'32760'       IS REC LENGTH VALID ?\n         BH    BADRECL                NO - ERROR\n*\n         TM    2(8),B'00000011'       PARTIAL RECORD ?\n         BZ    NOSEG                  NO - ONLY SEGMENT\n         BO    MIDSEG                 YES - MID-SEGMENT\n         TM    2(8),B'00000010'       WHAT TYPE OF PARTIAL RECORD ?\n         BO    LASTSEG                LAST SEGMENT\n*\n* ------------------------------------------------------------------- *\n*\nFIRSTSEG CLI   SEGSTAT,0              LOOKING FOR NEW SEGMENT ?\n         BNE   SEGERROR               NO - THIS IS AN ERROR\n*\n         L     0,RECAREA              OUTPUT AREA\n         LH    1,0(8)                 SAME LENGTH\n         MVCL  0,8                    COPY RECORD\n         MVI   SEGSTAT,1              1 = LOOKING FOR NEXT SEGMENT\n         B     RECLOOP                GO PROCESS NEXT RECORD\n*\n* ------------------------------------------------------------------- *\n*\nNOSEG    CLI   SEGSTAT,0              LOOKING FOR NEW SEGMENT ?\n         BNE   SEGERROR               NO - THIS IS AN ERROR\n*\n         L     0,RECAREA              OUTPUT AREA\n         LH    1,0(8)                 SAME LENGTH\n         MVCL  0,8                    COPY RECORD\n*\n         BAL   14,PUTREC              GO PUT THE RECORD\n*\n         B     RECLOOP                GO PROCESS NEXT RECORD\n*\n* ------------------------------------------------------------------- *\n*\nMIDSEG   CLI   SEGSTAT,0              LOOKING FOR CONTINUATION ?\n         BE    SEGERROR               NO - ERROR\n*\n         L     1,RECAREA              POINT TO OUTPUT RECORD\n         LH    1,0(,1)                PICK UP CURRENT LENGTH\n         AH    1,0(8)                 ADD NEW SEGMENT LENGTH\n         SH    1,=H'4'                MINUS LENGTH OF RDW\n         CHI   1,32760                IS IT TOO LONG  ?\n         BH    TOOLONG                YES - ERROR\n*\n         L     14,RECAREA             POINT TO RECORD AREA\n         LR    0,14                   COPY POINTER\n         AH    0,0(,14)               ADD CURRENT LENGTH\n         STH   1,0(,14)               SET NEW LENGTH\n         LH    1,0(8)                 COPY NEW SEGMENT LENGTH\n         SH    1,=H'4'                MINUS LENGTH OF THE RDW\n         SH    9,=H'4'                MINUS LENGTH OF THE RDW\n         LA    8,4(,8)                POINT PAST THE RDW\n         MVCL  0,8                    COPY NEW SEGMENT\n         B     RECLOOP                GO PROCESS NEXT RECORD\n*\n* ------------------------------------------------------------------- *\n*\nLASTSEG  CLI   SEGSTAT,0              LOOKING FOR CONTINUATION ?\n         BE    SEGERROR               NO - ERROR\n*\n         L     1,RECAREA              POINT TO OUTPUT RECORD\n         LH    1,0(,1)                PICK UP CURRENT LENGTH\n         AH    1,0(8)                 ADD NEW SEGMENT LENGTH\n         SH    1,=H'4'                MINUS LENGTH OF RDW\n         CHI   1,32760                IS IT TOO LONG  ?\n         BH    TOOLONG                YES - ERROR\n*\n         L     14,RECAREA             POINT TO RECORD AREA\n         LR    0,14                   COPY POINTER\n         AH    0,0(,14)               ADD CURRENT LENGTH\n         STH   1,0(,14)               SET NEW LENGTH\n         LH    1,0(8)                 COPY NEW SEGMENT LENGTH\n         SH    1,=H'4'                MINUS LENGTH OF THE RDW\n         SH    9,=H'4'                MINUS LENGTH OF THE RDW\n         LA    8,4(,8)                POINT PAST THE RDW\n         MVCL  0,8                    COPY NEW SEGMENT\n         L     1,RECAREA              POINT TO RECORD\n         XC    2(2,1),2(1)            CLEAR THE RDW FLAGS\n         BAL   14,PUTREC              GO PUT THE RECORD\n*\n         MVI   SEGSTAT,0              0 = LOOKING FOR NEW RECORD\n         B     RECLOOP                GO PROCESS NEXT RECORD\n*\n* ------------------------------------------------------------------- *\n*\nNEXTBLK  SLR   1,1                    CLEAR REG 1\n         IC    1,COUNTKL              PICK UP THE KEY LENGTH\n         SLR   0,0                    CLEAR REG 0\n         ICM   0,3,COUNTDL            PICK UP THE DATA LENGTH\n         AR    1,0                    ADD IT TO KEY LENGTH\n         LA    1,8(,1)                LENGTH OF ENTIRE CKD\n         AR    10,1                   POINT TO NEXT INPUT BLOCK\n         SR    11,1                   REDUCE REMAINING LENGTH\n         BH    BLKLOOP                IF MORE DATA, PROCESS IT\n*\n         LA    0,X'0001'              NEXT TRACK\n         AH    0,RELAD                TTRN NEXT TRACK\n         STH   0,RELAD                TTRN NEXT TRACK\n         B     READLOOP               PROCESS NEXT TRACK\n*\n* ------------------------------------------------------------------- *\n*\nEOFUT1   CLOSE (SYSUT1,,SYSUT2,,SYSPRINT)\n*\nEXIT     L     13,4(,13)              POINT TO CALLER'S SAVE AREA\n         RETURN (14,12),RC=(15)       RETURN TO CALLER\n*\n* ------------------------------------------------------------------- *\n*  ROUTINE TO USE LOCATE MODE OUTPUT\n* ------------------------------------------------------------------- *\n*\n         DC    4F'0'\nPUTREC   STM   14,1,PUTREC-16\n         PUT   SYSUT2\n         LR    0,1\n         L     14,RECAREA\n         LH    15,0(,14)\n         LR    1,15\n         MVCL  0,14\n         LM    14,1,PUTREC-16\n         BR    14\n*\n* ------------------------------------------------------------------- *\n*  ERROR ROUTINES\n* ------------------------------------------------------------------- *\n*\n         DC    4F'0'\nPUTPRINT STM   14,1,PUTPRINT-16\n         PUT   SYSPRINT,PRINTREC\n         MVI   PRINTREC,C' '\n         MVC   PRINTREC+1(L'PRINTREC-1),PRINTREC\n         LM    14,1,PUTPRINT-16\n         BR    14\n*\n* ------------------------------------------------------------------- *\n*  ERROR ROUTINES\n* ------------------------------------------------------------------- *\n*\nBADRECL  MVC   PRINTREC+1(27),=C'INVALID RECORD LENGTH FOUND'\n         BAL   14,PUTPRINT\n         LA    15,16\n         B     EXIT\n*\nSEGERROR MVC   PRINTREC+1(21),=C'INVALID SEGMENT FOUND'\n         BAL   14,PUTPRINT\n         LA    15,16\n         B     EXIT\n*\nBADBDW   MVC   PRINTREC+1(30),=C'INVALID BLOCK DESCRIPTOR FOUND'\n         BAL   14,PUTPRINT\n         LA    15,16\n         B     EXIT\n*\nTOOLONG  MVC   PRINTREC+1(33),=C'FOUND RECORD MORE THAN 32760 LONG'\n         BAL   14,PUTPRINT\n         LA    15,16\n         B     EXIT\n*\n* ------------------------------------------------------------------- *\nSAVEAREA DC    18F'0'\n* ------------------------------------------------------------------- *\nWORK9    DC    CL9' '\nSEGSTAT  DC    X'00'\nHWORD    DC    H'0'\nRECAREA  DC    A(0)\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PL,RECFM=VBS,BFTEK=A\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=DA,DEVD=DA,MACRF=E,OPTCD=R\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=133\nRELAD    EQU   SYSUT1+DCBRELAD-IHADCB\nPRINTREC DC    CL133' '\nECB1     DC    A(0)                    ECB\nIOB1     DC    XL4'42000000'           FLAG1/2 SENSE1/2\n         DC    A(ECB1)                 ECBPTR\n         DC    X'00',XL7'00'           FLAG3 CSW\n         DC    A(CCW2)                 CCW ADDR\n         DC    A(SYSUT1)               DCBPTR\n         DC    2A(0)                   RESTR INCAM ERRCT\nMBBCCHHR DC    XL8'01'\n*                   ------------------ CCW'S -------------------\nCCW2     CCW   X'31',MBBCCHHR+3,X'40',5      SEARCH ID EQUAL\nCCW3     CCW   X'08',*-8,0,0                 TIC\nCCW4     CCW   X'5E',COUNT,X'20',65535       READ MULTIPLE, SLI\n* ------------------------------------------------------------------- *\n         LTORG\n         PRINT NOGEN\n         IEZIOB DSECT=NO\n*\nCOUNT    DS    0D                      COUNT\nCOUNTCC  DS    H\nCOUNTHH  DS    H\nCOUNTR   DS    X\nCOUNTKL  DS    X\nCOUNTDL  DS    H\nKEY      DS    XL8                     KEY\nDATA     DS    65535X                  DATA\n* ------------------------------------------------------------------- *\n         DCBD  DSORG=PS,DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT727/FILE727.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT727", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}