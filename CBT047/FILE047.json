{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011127000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 8406398, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE047.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 8406398, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 8406398, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE047.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x81\\x06'", "DS1TRBAL": "b'vx'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00U\\x00\\r\\x00^\\x00\\x07\\x00\\x82'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\"\\x8f\\x01\\x01\"\\x8f\\x168\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-16T00:00:00", "modifydate": "2001-08-16T16:38:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 439    FILE:  047\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT439.FILE047\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   19 MEMBERS COUNTED; CUMULATIVE SIZE IS 79,750 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/16/01    16:38:21    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x00o\\x00o\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "LANEJ"}, "text": "===> LANEJ.CBT.OFFLOAD MEMBER LIST\n          ASM\n          CLISTS\n          CMD1\n          LISTICAT\n          MSGS\n          NOCELL\n          PANELS\n          RMFIII\n          SAS\n          SKELS\n          SMPELIST\n          TABLES\n===> MEMBER LIST COMPLETE\n\nTHE MEMBERS: LISTICAT, NOCELL, RMFIII AND SMPELIST\nARE SELF-CONTAINED APPLICATIONS WITH EACH ONE HAVING (I HOPE)\nALL THE REQUIRED PARTS.\n\n   NOCELL - A VTOC AND TAPE CATALOG LISTER\n   LISTICAT - A CONDENSED LISTING OF CATALOG ENTRIES\n   RMFIII   - A POST PROCESSOR FOR RMF MONITOR III DATA\n   SMPELIST - A CONDENSED LISTING OF SMPCSI ENTRIES\n\nI HAVE BEEN CARRYING THESE THINGS AROUND FOR A NUMBER OF YEARS\nAND I HAVEN'T HAD TIME TO DO MUCH WORK ON THEM. THEY STILL RUN\nPROPERLY ON MY CURRENT SYSTEM AT THE FOLLOWING LEVELS:\n\n   MVS/ESA 3.1.3\n   DFP     2.2.0\n   ISPF    3.5.0\n   DFHSM   2.6.0\n\nI HOPE TO BE CONVERTED FULLY TO DFSMS IN ANOTHER MONTH OR SO\nAND I PLAN TO UPDATE NOCELL AND LISTICAT AS REQUIRED AT THAT TIME.\n\n------------------------------------------------------------------------\n\nTHE MEMBER CMD1 IS A PARTIALLY UPDATED VERSION OF THE CMD1 SUBSYSTEM\nWITH UPDATES TO RUN UNDER MVS/ESA 3.1.3\nI RUN THIS CODE ONLY UNDER TSO SO I'M NOT SURE IF THE SUBSYSTEM\nPROPER STILL WORKS.\nI DID A BIT OF WORK ON THIS THINK BUT STOPPED AFTER I GOT OMEGAMON.\nNB: THE MEMBERS FOR PRIOR MVS LEVELS ARE NOT INCLUDED\n\n------------------------------------------------------------------------\n\nTHE MEMBER SAS IS A COLLECTION OF SAS PROGRAMS AS FOLLOWS:\n\n AFP1     - FORMAT LOGREC RECORDS TO ANALYZE HARDWARE PROBLEMS\n GTF      - FORMAT GTF SVC TRACE RECORDS FOR LINK/LOAD/ATTACH/XCTL.\n HLIST    - REPORT ON CONTENTS OF HSM CONTROL DATASETS.\n HSMFSR   - REPORT ON CONTENTS OF SMF RECORDS CUT BY HSM\n HSMLOG   - FORMAT HSM LOG RECORDS.\n LOGREC   - FORMAT LOGREC DATA.\n RMF79    - ANALYZE DATA IN RMF 79 RECORDS CONCERNING EXPANDED STORAGE\n SASDCOL  - ANALYZE DFP DCOLLECT RECORDS. USES MXG\n SASTSOMN - FORMAT TSO/MON SMF RECORDS.\n SYSLOG5  - FORMAT SYSLOG DATA.\n TMRECORD - FORMAT CA-1 TAPE CATALOG INFORMATION\n TTOC     - FORMAT RECORDS FROM HSM OCDS DATASET\n VTAMOBR  - FORMAT LOGREC DATA.\n\n------------------------------------------------------------------------\n\nTHE REMAINING MEMBERS IN THIS PDS ARE A MISH-MASH OF THINGS THAT\nI HAVE BEEN WORKING ON SINCE COMING TO TORONTO HYDRO 2.5 YEARS AGO.\nTHEY ARE MOSTLY ISPF DIALOGS SO I RECOMMEND THAT YOU INSTALL THE\nENTIRE SET OF LIBRARIES TO GET ALL THE FUNCTION.\nHERE IS WHAT IT CONSISTS OF:\n\n ASM      - AN EDIT MACRO TO ASSEMBLE THE CURRENT MEMBER\n BOOK     - AN EDIT MACRO TO FORMAT THE CURRENT MEMBER WITH BOOKMASTER\n BRIF     - A DIALOG TO BROWSE VSAM FILES\n DCF      - AN EDIT MACRO TO FORMAT THE CURRENT MEMBER WITH DCF\n DSNTBL   - AN EDIT MACRO TO DISPLAY THE DATASETS REFERRED TO IN THE\n            CURRENT MEMBER IN A TABLE.\n EDIF     - A DIALOG TO EDIT VSAM FILES\n EDX      - A PROCESS A LIST A DATASETS. AN IMPROVED OPTION 3.4\n FONTMAPS - A DIALOG TO PRODUCE CODEPAGE MAPS FROM AN AFP FONTLIB\n FONTTABL - A DIALOG TO PRODUCE A TABLE DISPLAY OF AVAILABLE FONTS\n GENAIX   - AN EDIT MACRO TO GENERATE DEFINE AIX CONTROL CARDS BASED\n            ON AN EXISTING MODEL\n GENDEF   - AN EDIT MACRO TO GENERATE DEFINE CLUSTER CONTROL CARDS\n            BASED ON AN EXISTING MODEL\n GENJCL   - AN EDIT MACRO TO GENERATE A DD STATEMENT OR TSO ALLOCATE\n            COMMAND TO CREATE A DATASET.\n INDEX    - AN EDIT MACRO TO GENERATE DCF INDEXING TAGS.\n ISR@PRIM - A SCROLLABLE MAIN PANEL FOR THOSE WITH LOTS OF OPTIONS\n            IN ISPF.\n ISSPACE  - A DIALOG TO DISPLAY DASD SPACE INFORMATION IN A TABLE.\n            AN ISPF VERSION OF TSSPACE.\n JOBCARD  - AN EDIT MACRO TO INSERT A STANDARD JOBCARD\n KSUBS    - A PROGRAM FROM THE ROCKWELL FILES UPDATED FOR SWA\n            ABOVE THE LINE.\n MI       - AN EDIT MACRO TO DO MASS INSERTS INTO THE CURRENT MEMBER.\n MTTESA   - A TSO COMMAND TO DISPLAY THE MASTER TRACE TABLE. UPDATED\n            FOR MVS/ESA 3.1.3\n NUMS     - AN EDIT MACRO TO INSERT A SERIES OF NUMBERS INTO A COLUMN\n            RANGE WITHIN THE CURRENT MEMBER.\n RACFDSET - A DIALOG TO DISPLAY RACF DATASET PROFILES IN A TABLE.\n RACFGRES - A DIALOG TO DISPLAY RACF GENERAL RESOURCE PROFILES IN A\n            TABLE.\n RACFGRP1 - A DIALOG TO DISPLAY RACF GROUP PROFILE IN A TABLE.\n RACFGRP2 - ANOTHER DIALOG TO DISPLAY RACF GROUP PROFILE IN A TABLE.\n RACFUSER - A DIALOG TO DISPLAY RACF USERIDS IN A TABLE.\n SUM      - AN EDIT MACRO TO ADD UP A SERIES OF NUMBERS IN A COLUMN\n            RANGE WITHIN THE CURRENT MEMBER.\n TSSPACE  - A TSO COMMAND TO DISPLAY DASD FREE SPACE INFO.\n            UPDATED FOR 3390'S.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE047": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00V\\x00\\x99\\x08?\\x01\\x01\"\\x0f\\x17\\x19\\x01%\\x01\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2001-08-08T17:19:56", "lines": 293, "newlines": 282, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 047 IS FROM TORONTO HYDRO IN TORONTO, ONTARIO, CANADA.    *   FILE 047\n//*           THIS FILE CONTAINS THE FOLLOWING, FOR ADDITIONAL      *   FILE 047\n//*           INFORMATION SEE THE MEMBER CALLED $INDEX : (THIS      *   FILE 047\n//*           FILE ALSO USES SOME MACROS THAT ARE IN FILES 435 AND  *   FILE 047\n//*           OR 464. THIS FILE HAS BEEN SUBMITTED BY MR JIM LANE   *   FILE 047\n//*                                                                 *   FILE 047\n//*           THE CURRENT FILE IS A REFRESH AS OF 12/09/93.         *   FILE 047\n//*                                                                 *   FILE 047\n//*           Some pieces from the 06/04/89 version of this file    *   FILE 047\n//*           have been grafted back in.  For example, JCLFLOW,     *   FILE 047\n//*           the EXITS member, and Jim's older SAS programs.       *   FILE 047\n//*           The ISPF stats will tell you which member is newer,   *   FILE 047\n//*           and which is older.                                   *   FILE 047\n//*           (Sam Golob - 08/08/01 - taken from CBT352)            *   FILE 047\n//*                                                                 *   FILE 047\n//*           THIS FILE ALSO CONTAINS AN ESA VERSION OF CMD1.       *   FILE 047\n//*           (SEE THE BF GOODRICH VERSION ON FILE 261 WHICH MAY    *   FILE 047\n//*           BE FOR A HIGHER LEVEL OF MVS/ESA.)                    *   FILE 047\n//*                                                                 *   FILE 047\n//*           JIM'S CURRENT ADDRESS:                                *   FILE 047\n//*                                                                 *   FILE 047\n//*                JIM LANE                                         *   FILE 047\n//*                TORONTO HYDRO                                    *   FILE 047\n//*                TECHNICAL SERVICES                               *   FILE 047\n//*                14 CARLTON STREET                                *   FILE 047\n//*                TORONTO, ONTARIO  M5B 1K5                        *   FILE 047\n//*                CANADA                                           *   FILE 047\n//*                416-542-2820   direct line                       *   FILE 047\n//*                                                                 *   FILE 047\n//*   Note:  Jim Lane is now doing AIX, and this file is            *   FILE 047\n//*          now \"functionally stabilized\" until somebody           *   FILE 047\n//*          else takes it over.    (SG - 07/99)                    *   FILE 047\n//*                                                                 *   FILE 047\n//*            THIS PDS CONTAINS THE FOLLOWING MEMBERS:             *   FILE 047\n//*                                                                 *   FILE 047\n//*           EDX      - \"PERSONAL DATASET MANAGER\" ISPF DIALOG.    *   FILE 047\n//*           EXITS    - SOME JES2 AND MPF EXITS.                   *   FILE 047\n//*           JCLFLOW  - AN ISPF PROGRAM EDIT MACRO TO NEATLY       *   FILE 047\n//*                      FORMAT JCL                                 *   FILE 047\n//*           LISTICAT - A BATCH PROGRAM TO 1-UP LIST DATASETS IN   *   FILE 047\n//*                      AN ICF CATALOG.                            *   FILE 047\n//*           NOCELL   - A BATCH PROGRAM TO LIST DISK, TAPE AND     *   FILE 047\n//*                      HSM MIGRATED DATASETS                      *   FILE 047\n//*           RMFIII   - A POST PROCEESOR FOR RMF MONITOR III       *   FILE 047\n//*                      DATA.                                      *   FILE 047\n//*           SASEREP  - A SAS PROGRAM TO PROCESS LOGREC RECORDS.   *   FILE 047\n//*           SASGTF   - A SAS PROGRAM TO PROCESS GTF SVC TRACE     *   FILE 047\n//*                      RECORDS.                                   *   FILE 047\n//*           SASHSM   - A SET OF SAS PROGRAM TO ANALYZE HSM USAGE  *   FILE 047\n//*           SASRMF79 - A SAS PROGRAM TO PROCESS RMF TYPE 79       *   FILE 047\n//*                      RECORDS.                                   *   FILE 047\n//*           SASSYSLG - A SAS PROGRAM TO PROCESS SYSLOG DATA.      *   FILE 047\n//*           SASTLMS  - A SAS PROGRAM TO PROCESS THE TLMS II       *   FILE 047\n//*                      VOLUME MASTER FILE.                        *   FILE 047\n//*           SMPELIST - A BATCH PROGRAM TO 1-UP LIST ENTRIES FROM  *   FILE 047\n//*                      AN SMP-E CSI.                              *   FILE 047\n//*                                            - EDX -              *   FILE 047\n//*              AN ISPF DIALOG CALLED \"PERSONAL DATASET MANAGER\".  *   FILE 047\n//*              EDX MAINTAINS AND DISPLAYS A TABLE OF DATASET      *   FILE 047\n//*              NAMES (OPTIONALLY INCLUDING A MEMBER NAME). THE    *   FILE 047\n//*              FOLLOWING OPERATIONS CAN BE REQUESTED ON ANY OF    *   FILE 047\n//*              THE DATASETS:                                      *   FILE 047\n//*             ?         TO DISPLAY INFORMATION ABOUT THE          *   FILE 047\n//*                       DATASET'S ATTRIBUTES.                     *   FILE 047\n//*             A         TO ALLOCATE A NEW DATASET USING THIS ONE  *   FILE 047\n//*                       AS A MODEL.                               *   FILE 047\n//*             B         TO ISPF BROWSE THE DATASET.               *   FILE 047\n//*             D         TO DELETE THE DATASET.                    *   FILE 047\n//*             E         TO ISPF EDIT THE DATASET.                 *   FILE 047\n//*             HM        TO MIGRATE THE DATASET WITH DFHSM.        *   FILE 047\n//*             HR        TO RECALL THE DATASET FROM DFHSM          *   FILE 047\n//*                       MIGRATION.                                *   FILE 047\n//*             P         TO INVOKE THE PDS84 DIALOG ON THE         *   FILE 047\n//*                       DATASET.                                  *   FILE 047\n//*             PR        TO PRINT THE DATASET.                     *   FILE 047\n//*             V         TO SET OR UPDATE THE VOLSER FIELD.        *   FILE 047\n//*             X         TO DROP THE DATASET FROM THE LIST.        *   FILE 047\n//*                                                                 *   FILE 047\n//*              EDX PICKS UP ON THE FACT THAT A DATASET HAS BEEN   *   FILE 047\n//*              MIGRATED AND DISPLAYS A MESSAGE TO THAT EFFECT IF  *   FILE 047\n//*              YOU TRY TO DO SOMETHING THAT NEEDS THE DATASET     *   FILE 047\n//*              UNMIGRATED. YOU HAVE TO EXPLICITLY HRECALL IT      *   FILE 047\n//*              FIRST.                                             *   FILE 047\n//*                                                                 *   FILE 047\n//*              THIS DATASET ALSO CONTAINS UPDATED VERSIONS OF     *   FILE 047\n//*              THE ED AND BR COMMAND TABLE COMMANDS THAT ADD THE  *   FILE 047\n//*              DATASET YOU EDIT OR BROWSE TO THE EDX DATASET      *   FILE 047\n//*              TABLE. THEY ALSO ACCEPT AN OPERAND OF \"*\" TO MEAN  *   FILE 047\n//*              THE MOST RECENT DATASET YOU EITHER EDITED OR       *   FILE 047\n//*              BROWSED.                                           *   FILE 047\n//*                                           - EXITS -             *   FILE 047\n//*              A SET OF JES2 AND MPF EXITS:                       *   FILE 047\n//*                EXIT02   - ENFORCE JOBNAME AND JOBCLASS          *   FILE 047\n//*                           STANDARDS                             *   FILE 047\n//*                EXIT03   - CANCEL JOBS FLAGGED BY EXIT02         *   FILE 047\n//*                EXIT04   - DUMMY OUT JOBCAT AND STEPCAT DD       *   FILE 047\n//*                           STATEMENTS                            *   FILE 047\n//*                MPFABEND - HIGHLIGHTED WTO FOR ABENDING          *   FILE 047\n//*                           PRODUCTION JOB                        *   FILE 047\n//*                MPFHOLD  - REPLY NOHOLD TO IEF433D               *   FILE 047\n//*                MPFJCLER - HIGHLIGHTED WTO FOR PRODUCTION JOB    *   FILE 047\n//*                           WITH JCL ERROR                        *   FILE 047\n//*                MPFVINIT - START TSO AFTER VTAM IS UP            *   FILE 047\n//*                MPFVTAM  - HIGHLIGHTED WTO WHEN NETWORK NODES    *   FILE 047\n//*                           GO INACT                              *   FILE 047\n//*                                            - JCLFLOW -          *   FILE 047\n//*              THIS PROGRAM WAS \"OBTAINED\" FROM FILE352 OF THE    *   FILE 047\n//*              CBT TAPE. IN ITS ORIGINAL FORM IT WAS A BATCH      *   FILE 047\n//*              UTILITY, READING JCL FROM SYSUT1 AND WRITING THE   *   FILE 047\n//*              REFORMATTED STUFF ONTO SYSUT2. I CHANGED IT BY     *   FILE 047\n//*              ALTERING THE I/O LOGIC TO USE ISPF EDIT MACRO      *   FILE 047\n//*              SERVICES. THE BASIC LOGIC IS TO START AT THE TOP   *   FILE 047\n//*              OF THE DECK ASSIGNING EACH LINE TO VARIABLE        *   FILE 047\n//*              \"CARD\". ANYTHING OTHER THAN PART OF A DD           *   FILE 047\n//*              STATEMENT IS LEFT AS IS. WHEN A DD STATEMENT IS    *   FILE 047\n//*              FOUND EACH LINE IS DELETED AFTER BEING READ. THE   *   FILE 047\n//*              LINE NUMBER AFTER WHICH TO INSERT REFORMATTED JCL  *   FILE 047\n//*              IS REMEMBERED IN VARIABLE \"ADDLINE\". AN ENTIRE DD  *   FILE 047\n//*              STATEMENT IS READ IN, CONTINUATION LINES AND ALL   *   FILE 047\n//*              AND STORED IN \"TABLEIN\", EACH INPUT LINE BEING     *   FILE 047\n//*              DELETED AFTER ASSIGNMENT. THE DD STATEMENT IS      *   FILE 047\n//*              THEN FORMATTED BY BEING COPIED ONE PARAMETER AT A  *   FILE 047\n//*              TIME OVER TO \"TABLEOUT\". FROM \"TABLEOUT\" NEW       *   FILE 047\n//*              LINES ARE INSERTED INTO THE DATASET TO CONTAIN     *   FILE 047\n//*              THE REFORMATTED DD STATEMENT. SINCE THE NUMBER OF  *   FILE 047\n//*              LINES IN THE DATASET COULD HAVE INCREASED, THE     *   FILE 047\n//*              LINE NUMBER OF THE LAST LINE IS RE-CALCULATED AS   *   FILE 047\n//*              NECESSARY AND REMEMBERED IN VARIABLE \"LLINE\".      *   FILE 047\n//*                                            - LISTICAT -         *   FILE 047\n//*            NAME         LISTICAT                                *   FILE 047\n//*            FUNCTION     LIST THE CONTENTS OF AN ICF CATALOG     *   FILE 047\n//*                         AND SELECTED DSCB AND VVDS FIELDS.      *   FILE 047\n//*            DESCRIPTION  THE UCBS OF ALL ONLINE DASD VOLUMES     *   FILE 047\n//*                         ARE LOCATED AND AN ATTEMPT IS MADE TO   *   FILE 047\n//*                         ALLOCATE SYS1.VVDS.VVOLSER.  IF THIS    *   FILE 047\n//*                         WORKS AN ACB AND RPL ARE GENERATED AND  *   FILE 047\n//*                         THEIR ADDRESSES ARE SAVED IN A LOOKUP   *   FILE 047\n//*                         TABLE.  THE BCS CLUSTER IS OPENED AS A  *   FILE 047\n//*                         DATASET AND READ SEQUENTIALLY. THE BCS  *   FILE 047\n//*                         RECORDS ARE SCANNED FOR CELL TYPES AND  *   FILE 047\n//*                         THE FOLLOWING CELLS ARE LISTED:         *   FILE 047\n//*                           NONVSAM                               *   FILE 047\n//*                           CLUSTER                               *   FILE 047\n//*                           INDEX                                 *   FILE 047\n//*                           DATA                                  *   FILE 047\n//*                           AIX                                   *   FILE 047\n//*                           PATH                                  *   FILE 047\n//*                           GDG BASE                              *   FILE 047\n//*                           GDG ENTRY                             *   FILE 047\n//*                         FOR NONVSAM ENTRIES THE FORMAT1 AND,    *   FILE 047\n//*                         IF IT EXISTS THE FORMAT 3, DSCB IS      *   FILE 047\n//*                         \"OBTAINED\" TO DETERMINE IF THE OBJECT   *   FILE 047\n//*                         EXISTS. IF IT DOES THE LRECL, BLKSIZE   *   FILE 047\n//*                         AND TOTAL TRACKS ALLOCATED ARE          *   FILE 047\n//*                         EXTRACTED.  IF THE OBJECT IS            *   FILE 047\n//*                         CATALOGED TO VOLSER \"MIGRAT\" THE        *   FILE 047\n//*                         DFHSM MIGRATION CONTROL DATASET IS      *   FILE 047\n//*                         OPENED (SYSUT2) AND USED INSTEAD OF     *   FILE 047\n//*                         THE VTOC.                               *   FILE 047\n//*                                                                 *   FILE 047\n//*                         FOR DATA AND INDEX ENTRIES THE VVDS OF  *   FILE 047\n//*                         THE VOLUME IN QUESTION, IF AVAILABLE,   *   FILE 047\n//*                         IS SCANNED TO DETERMINE THE LRECL,      *   FILE 047\n//*                         BLKSIZE AND TRACK ALLOCATION OF THE     *   FILE 047\n//*                         OBJECT.                                 *   FILE 047\n//*                                                                 *   FILE 047\n//*            ENVIRONMENT  OS/VS2 MVS, JDM1113 OR HDQ1102          *   FILE 047\n//*                         MVS/XA 2.1.7 DF/HSM 2.1.0               *   FILE 047\n//*                         (HAS BEEN RUN ON MVS/ESA.)              *   FILE 047\n//*            INPUT        THE BCS OF THE ICF CATALOG TO BE        *   FILE 047\n//*                         LISTED.                                 *   FILE 047\n//*            OUTPUT       OUTPUT CONSISTS OF A LISTING OF THE     *   FILE 047\n//*                         CATALOG.                                *   FILE 047\n//*                                             - NOCELL -          *   FILE 047\n//*            NAME         NOCELL                                  *   FILE 047\n//*             INTRODUCTION                                        *   FILE 047\n//*             NOCELL IS A UTILITY THE PURPOSE OF WHICH IS TO      *   FILE 047\n//*             ANALYZE ALLOCATED DATASETS.  THE  PROGRAM  CAN      *   FILE 047\n//*             PROCESS ALL DATASETS OR SELECT A SUBSET, AND        *   FILE 047\n//*             PRODUCE DETAIL LISTINGS OR SUMMARY REPORTS.         *   FILE 047\n//*             JCL REQUIREMENTS.                                   *   FILE 047\n//*             NOCELL CAN BE EXECUTED USING THE FOLLOWING JCL:     *   FILE 047\n//*               //STEP     EXEC PGM=NOCELL,REGION=4096K           *   FILE 047\n//*               //STEPLIB  DD DSN=<YOUR.LOADLIB>,DISP=SHR         *   FILE 047\n//*               //SYSUT1   DD DSN=<HSM.MCDS>,DISP=SHR             *   FILE 047\n//*               //SYSUT2   DD DSN=<HSM.BCDS>,DISP=SHR             *   FILE 047\n//*               //VMF      DD DSN=<TLMSII.VMF>,DISP=SHR           *   FILE 047\n//*               //CATALOG  DD DSN=<ASM2.ARCHIVE.CATALOG>,DISP=SHR *   FILE 047\n//*               //SYSUDUMP DD SYSOUT=                             *   FILE 047\n//*               //SYSIN    DD                                     *   FILE 047\n//*               /*                                                *   FILE 047\n//*            INSTALLATION  JCL TO INSTALL NOCELL IS CONTAINED IN  *   FILE 047\n//*                          MEMBER $INSTALL WHICH ASSEMBLES AND    *   FILE 047\n//*                          LINKS THE CODE AND COPIES THE          *   FILE 047\n//*                          ELEMENTS OF THE ISPF DIALOG TO THE     *   FILE 047\n//*                          PROPER LIBRARIES                       *   FILE 047\n//*            DOCUMENTATION A USER'S GUIDE COMPLETE WITH JCL       *   FILE 047\n//*                          EXAMPLES IS IN MEMBER $DOC. YOU WILL   *   FILE 047\n//*                          NEED IBM'S DCF TO PRINT THIS MEMBER.   *   FILE 047\n//*                                             - RMFIII -          *   FILE 047\n//*             NAME         ERB3POST                               *   FILE 047\n//*             FUNCTION     READS THE DATASET PRODUCED BY RMF 3.4  *   FILE 047\n//*                          MONITOR III, WRITES A REPORT OF        *   FILE 047\n//*                          POSSIBLE ANOMALIES AND WRITES TWO      *   FILE 047\n//*                          SEQUENTIAL FILES (ONE ABOUT ADDRESS    *   FILE 047\n//*                          SPACES AND ONE ABOUT DEVICES)          *   FILE 047\n//*                          SUMMARIZING THE MONITOR III            *   FILE 047\n//*                          MEASUREMENTS.                          *   FILE 047\n//*             DESCRIPTION  THE DATASET PRODUCED BY RMF MONITOR    *   FILE 047\n//*                          III AS OF 3.4 IS NOT IN ANY WAY        *   FILE 047\n//*                          NORMAL. IT IS A VSAM ESDS OF 32K       *   FILE 047\n//*                          RECORDS. THE 1ST RECORD, AFTER SOME    *   FILE 047\n//*                          DESCRIPTIVE DATA IS FILLED WITH AN     *   FILE 047\n//*                          ARRAY OF 28 BYTE POINTERS DESCRIBING   *   FILE 047\n//*                          \"SETS OF SAMPLES\". A SET OF SAMPLES    *   FILE 047\n//*                          IS WHAT MONITOR III CALCULATES EVERY   *   FILE 047\n//*                          \"MINTIME\" SECONDS.  THE SAMPLE DATA    *   FILE 047\n//*                          FILLS RECORDS 2 THROUGH N.  THE CATCH  *   FILE 047\n//*                          IS THAT MONITOR III KEEPS TRACK OF     *   FILE 047\n//*                          WHERE THINGS ARE IN THE DATASET BY     *   FILE 047\n//*                          USING OFFSET FIELDS THAT ARE RELATIVE  *   FILE 047\n//*                          TO BYTE 0 OF RECORD 1. IN EFFECT WHAT  *   FILE 047\n//*                          YOU HAVE IS A CHECKPOINTED COPY OF AN  *   FILE 047\n//*                          INCORE ARRAY OF SOME KIND, NOTHING IN  *   FILE 047\n//*                          RECORDS 2 TO N IS IN ANY NECESSARY     *   FILE 047\n//*                          ORDER. THEREFORE, IN ORDER TO PROCESS  *   FILE 047\n//*                          THIS MESS YOU NEED THE WHOLE THING IN  *   FILE 047\n//*                          CORE.                                  *   FILE 047\n//*                                                                 *   FILE 047\n//*                          ERB3POST PROCESSES BY READING THE      *   FILE 047\n//*                          ENTIRE DATASET INTO MEMORY AND THEN    *   FILE 047\n//*                          LOOPING OVER ALL SET OF SAMPLES        *   FILE 047\n//*                          POINTERS IN RECORD 1. FOR EACH OF      *   FILE 047\n//*                          THESE, TWO SUBROUTINES ARE CALLED ONE  *   FILE 047\n//*                          TO PROCESS ASID'S AND ONE TO PROCESS   *   FILE 047\n//*                          DEVICES. ASIDS AND DEVICES ARE EACH    *   FILE 047\n//*                          HELD IN A TABLE POINTED TO BY THE SET  *   FILE 047\n//*                          OF SAMPLES HEADER WHICH IS POINTED TO  *   FILE 047\n//*                          FROM RECORD 1. THE SUBROUTINES PRINT   *   FILE 047\n//*                          A LINE OF THE REPORT IF THE DELAY      *   FILE 047\n//*                          PERCENTS SEEM HIGH AND WRITE A RECORD  *   FILE 047\n//*                          TO THE EXTRACT FILES.  THE DATA        *   FILE 047\n//*                          WRITTEN TO THE EXTRACT FILES IS        *   FILE 047\n//*                          ESSENTIALLY WHAT YOU WOULD SEE WITH    *   FILE 047\n//*                          THE \"DELAYJ\" AND \"DEVR\" COMMANDS       *   FILE 047\n//*                          UNDER RMFWDM.                          *   FILE 047\n//*            ENVIRONMENT   MVS/XA 2.1.7                           *   FILE 047\n//*                          RMF 3.4                                *   FILE 047\n//*                          DFP/XA 2.2                             *   FILE 047\n//*            INPUT         A DATASET PRODUCED BY RMF MONITOR      *   FILE 047\n//*                          III.                                   *   FILE 047\n//*            OUTPUT        A PRINTED REPORT OF JOBS AND DEVICES   *   FILE 047\n//*                          WITH HIGH DELAYS                       *   FILE 047\n//*                          A SEQUENTIAL FILE, ONE RECORD PER      *   FILE 047\n//*                          ASID PER SET OF SAMPLES.               *   FILE 047\n//*                          A SEQUENTIAL FILE, ONE RECORD PER      *   FILE 047\n//*                          DEVICE PER SET OF SAMPLES.             *   FILE 047\n//*                                             - SASGTF -          *   FILE 047\n//*            SASGTF   - A SAS PROGRAM TO DECODE GTF SVC TRACE     *   FILE 047\n//*                       RECORDS.                                  *   FILE 047\n//*                                             - SASHSM -          *   FILE 047\n//*            THIS MEMBER CONTAINS 3 SAS PROGRAMS:                 *   FILE 047\n//*             HLIST  - READS THE DFHSM CONTROL DATASETS AND       *   FILE 047\n//*                      PRINTS REPORTS.  INTENDED TO ANALYZE THE   *   FILE 047\n//*                      EFFECTIVENESS OF HSM IMPLEMENTATION.       *   FILE 047\n//*             HSMFSR - READS THE \"FUNCTION STATISTICS RECORDS\"    *   FILE 047\n//*                      THAT DFHSM WRITES TO SMF. REPORTS ON       *   FILE 047\n//*                      FUNCTIONS THAT DIDN'T WORK, HOW OFTEN      *   FILE 047\n//*                      THINGS HAPPENED AND HOW LONG THEY TOOK.    *   FILE 047\n//*             HSMLOG - READS THE DFHSM LOG DATASET AND PRINTS     *   FILE 047\n//*                      PLOTS OF WHEN THINGS HAPPENED.             *   FILE 047\n//*                                            - SASRMF79 -         *   FILE 047\n//*            SASRMF79 - A SAS PROGRAM TO PROCESS RMF TYPE 79      *   FILE 047\n//*                       RECORDS. SPECIFICALLY IT DEALS WITH       *   FILE 047\n//*                       RECORDS PRODUCED BY THE OPTIONS ASD,      *   FILE 047\n//*                       SRCS AND SPAG TO PLOT DATA ON 3090        *   FILE 047\n//*                       EXTENDED STORAGE USAGE (SUCH LITTLE DATA  *   FILE 047\n//*                       AS THERE IS, ANYWAY).                     *   FILE 047\n//*                                            - SASSYSLG -         *   FILE 047\n//*            SASSYSLG - A SET OF SAS PROGRAMS TO POST-PROCESS     *   FILE 047\n//*                       SYSLOG DATA. WE USED THESE TO DESIGN OUR  *   FILE 047\n//*                       MPF LIST AMONG OTHER THINGS.              *   FILE 047\n//*                                            - SASTLMS -          *   FILE 047\n//*            SASTLMS  - A SAS PROGRAM TO REDUCE THE CONTENTS OF   *   FILE 047\n//*                       THE TLMSII VOLUME MASTER FILE TO A SAS    *   FILE 047\n//*                       DATABASE AND TO PRODUCE A REPORT  FROM    *   FILE 047\n//*                       IT ON LOW VOLUME TAPE DATASETS.           *   FILE 047\n//*                                            - SMPELIST -         *   FILE 047\n//*            SMPELIST - AN ASSEMBLER PROGRAM TO PRODUCE A         *   FILE 047\n//*                       SOMEWHAT MORE COMPACT LISTING OF THE      *   FILE 047\n//*                       MAC, MOD AND SYSMOD ENTRIES IN AN SMP-E   *   FILE 047\n//*                       CSI DATASET.                              *   FILE 047\n//*                                                                 *   FILE 047\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASM": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x16\\x0f\\x16\\x0f\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 5647, "newlines": 5647, "modlines": 0, "user": "LANEJ"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CLISTS": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\n\\xa3\\n\\xa3\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 2723, "newlines": 2723, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=ASM\nPROC 0\nISREDIT MACRO\nISREDIT (CHG) = DATA_CHANGED\nIF &STR(&CHG) = &STR(YES) THEN ISREDIT SAVE\nISREDIT (CURDSN) = DATASET\nISREDIT (CURMEM) = MEMBER\nSET &DSN = &CURDSN.(&CURMEM.)\nISPEXEC VPUT (DSN) SHARED\nISPEXEC DISPLAY PANEL(ISRFP01) CURSOR(FAL1)\nSET &LIBCONC = &Z\nIF &STR(&FAL1) \u00ac= &Z THEN -\nSET &LIBCONC = &STR(,&FAL1)\nIF &STR(&FAL2) \u00ac= &Z THEN -\nSET &LIBCONC = &STR(&LIBCONC,&FAL2)\nASMH   '&DSN'    +\n      PRINT('&PRJ1..&CURMEM..LIST')        +\n      &FASM +\n       LIB( 'SYS1.AMODGEN' 'SYS1.MACLIB' '&CURDSN' &LIBCONC )\n%GENPRINT DSN(&CURMEM..LIST) NODEL DEOPT(K)\nSET &DSN = &STR(TEMP)\nISPEXEC DISPLAY PANEL(ISRFP07) CURSOR(FSL1)\nSET &LIBCONC = &Z\nIF &STR(&FSL1) \u00ac= &Z THEN -\nSET &LIBCONC = &STR(,&FSL1)\nIF &STR(&FSL2) \u00ac= &Z THEN -\nSET &LIBCONC = &STR(&LIBCONC,&FSL2)\nLINK  TEMP                                +\n      LOAD('TECTSG.ISPFJCL.LOAD(&CURMEM)')    +\n      LIB('TECTSG.ISPFJCL.LOAD'              +\n          &LIBCONC)                       +\n      PRINT('&PRJ1..&CURMEM..LINKLIST')        +\n           &FLNK\n%GENPRINT DSN(&CURMEM..LINKLIST) NODEL DEOPT(K)\nEND\n./       ADD   NAME=BOOK\nPROC 0\nISREDIT MACRO (STYLE)\nSET &FONT = &STR(X0G055AI)\nIF &STR(&STYLE) = &STR() THEN SET &STYLE = &STR(FINAL)\nISREDIT (CHG) = DATA_CHANGED\nIF &STR(&CHG) = &STR(YES) THEN ISREDIT SAVE\nISREDIT (CURDSN) = DATASET\nISREDIT (CURMEM) = MEMBER\nIF &SYSDSN(&CURMEM..LIST3820) \u00ac= &STR(OK) +\nTHEN ALLOC DA(&CURMEM..LIST3820) NEW CATALOG +\n             UNIT(DEVL) +\n             LRECL(8205) BLKSIZE(8209) +\n             RECFM(V B M)  DSORG(PS) +\n             SPACE(1 15) TRACK\nIF &CURMEM \u00ac= &Z THEN SET &DSN = &CURDSN.(&CURMEM.)\nELSE SET &DSN = &CURDSN\nIF &STR(&STYLE) = &STR(OFFSET) THEN DO\nSCRIPT '&DSN'                       +\n        MESSAGE(ID)    INDEX +\n        SYSVAR(U CENTURY  S OFFSET X NO) +\n        DEVICE(3820A)              +\n        FILE('&SYSUID..&CURMEM..LIST3820') +\n        FO('SYS1.FONTLIBB') +\n        CHARS(&FONT) +\n        SEG('SYS1.PSEGLIB') +\n        PROF('SCRIPT.R40.MACLIB(EDFPRF30)') +\n        L('SCRIPT.R40.MACLIB')         +\n        CONTINUE                    +\n        BIND(10 10)               +\n        FP(2)\nEND\nELSE DO\nSCRIPT '&DSN'                       +\n        MESSAGE(ID)    INDEX +\n        SYSVAR(U CENTURY  S 1 X NO) +\n        DEVICE(3820A)               +\n        FILE('&SYSUID..&CURMEM..LIST3820') +\n        FO('SYS1.FONTLIBB') +\n        CHARS(&FONT) +\n        SEG('SYS1.PSEGLIB') +\n        PROF('SCRIPT.R40.MACLIB(EDFPRF30)') +\n        L('SCRIPT.R40.MACLIB')         +\n        CONTINUE                    +\n        BIND(10 10)               +\n        FP(2)\nEND\n%GENPRINT DSN(&CURMEM..LIST3820) NODEL DEOPT(K)\nEND\n./       ADD   NAME=BRIF\nPROC 1 DSVSAM\nSET TIME = &STR(&SUBSTR(1:2,&SYSTIME)&SUBSTR(4:5,&SYSTIME)+\n           &SUBSTR(7:8,&SYSTIME))\nSET DDVSAM = DD&TIME\nALLOC DD(&DDVSAM) DA(&DSVSAM) REU SHR\nIF &LASTCC = 0 THEN DO\n   ISPEXEC VPUT (DSVSAM,DDVSAM) SHARED\n   ISPEXEC SELECT PGM(BRIFASM)\n   FREE DD(&DDVSAM)\nEND\nELSE ISPEXEC SETMSG MSG(VSAM002)\nSET &TABLE = E&SYSUID\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC TBOPEN &TABLE WRITE\nIF &LASTCC > 0 THEN EXIT\nSET &EDBRDSNM = &DSVSAM\nSET &LPR = &LENGTH(&EDBRDSNM)\nSET &EDBRDSNM = &SUBSTR(2:&LPR-1,&EDBRDSNM)\nIF &SYSDSN('&EDBRDSNM') = &STR(OK) +\nTHEN DO\n   ISPEXEC   TBSCAN &TABLE ARGLIST(EDBRDSNM)\n   IF &LASTCC = 8   THEN DO\n      SET &EDBRLSTA = &STR(** BROWSE     )\n      SET &EDBRLSTU = &STR(&SYSSDATE)\n      LISTDSI '&EDBRDSNM' NORECALL\n      SET &EDBRVOLS = &SYSVOLUME\n      ISPEXEC  TBADD &TABLE ORDER\n   END\nEND\nISPEXEC TBCLOSE &TABLE\nEND\n./       ADD   NAME=CNAEBROW\nPROC 1   DSN VOLUME()\nSET FUNC = BROWSE\nIF &STR(&DSN) = &STR(*) THEN DO\n   ISPEXEC VGET (BRDSN BRMEM) PROFILE\n   IF &BRMEM = THEN SET DSN = &STR('&BRDSN')\n   ELSE SET DSN = &STR('&BRDSN(&BRMEM)')\nEND\nSET &APOS = &STR(')\nISPEXEC VGET (ZPREFIX)\nSET &LPR = &LENGTH(&ZPREFIX)\nIF &LENGTH(&DSN) < &LPR THEN SET &LPR = &LENGTH(&DSN)\nIF &SUBSTR(1,&DSN) \u00ac= &APOS THEN DO\n   IF &SUBSTR(1:&LPR,&DSN) \u00ac= &ZPREFIX THEN +\n   SET &DSN = &ZPREFIX..&DSN\n   SET &DSN = &STR(&APOS&DSN&APOS)\nEND\nLOOP:+\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC BROWSE DATASET(&DSN) VOLUME(&VOLUME)\nSET LCC = &LASTCC\nIF &LCC \u00ac= 0 THEN DO\n   ISPEXEC DISPLAY PANEL(BRDDSN) MSG(&ZERRMSG) CURSOR(DSN)\n   IF &LASTCC = 0 THEN GOTO LOOP\nEND\nSET &TABLE = E&SYSUID\nISPEXEC TBOPEN &TABLE WRITE\nSET &EDBRDSNM = &DSN\nSET &LPR = &LENGTH(&EDBRDSNM)\nSET &EDBRDSNM = &SUBSTR(2:&LPR-1,&EDBRDSNM)\nIF &SYSDSN('&EDBRDSNM') = &STR(OK) +\nTHEN DO\n   ISPEXEC   TBSCAN &TABLE ARGLIST(EDBRDSNM)\n   IF &LASTCC = 8   THEN DO\n      SET &EDBRLSTA = &STR(** BROWSE     )\n      SET &EDBRLSTU = &STR(&SYSSDATE)\n      LISTDSI '&EDBRDSNM' NORECALL\n      SET &EDBRVOLS = &SYSVOLUME\n      ISPEXEC  TBADD &TABLE ORDER\n   END\nEND\nISPEXEC TBCLOSE &TABLE\nEXIT CODE(&LCC)\n./       ADD   NAME=CNAEEDIT\nPROC 1 DSN VOL() PASSWORD() MACRO() PROFILE()\nSET FUNC = EDIT\nIF &STR(&DSN) = &STR(*) THEN DO\n   ISPEXEC VGET (BRDSN BRMEM) PROFILE\n   IF &BRMEM = THEN SET DSN = &STR('&BRDSN')\n   ELSE SET DSN = &STR('&BRDSN(&BRMEM)')\nEND\nSET &APOS = &STR(')\nISPEXEC VGET (ZPREFIX)\nSET &LPR = &LENGTH(&ZPREFIX)\nIF &LENGTH(&DSN) < &LPR THEN SET &LPR = &LENGTH(&DSN)\nIF &SUBSTR(1,&DSN) \u00ac= &APOS THEN DO\n   IF &SUBSTR(1:&LPR,&DSN) \u00ac= &ZPREFIX THEN +\n   SET &DSN = &ZPREFIX..&DSN\n   SET &DSN = &STR(&APOS&DSN&APOS)\nEND\nISPEXEC SELECT PGM(EDREC)\nIF &LASTCC = 20 THEN EXIT\nLOOP: +\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC EDIT DATASET(&DSN) +\n        VOLUME(&VOL) +\n        PASSWORD(&PASSWORD) +\n        MACRO(&MACRO) +\n        PROFILE(&PROFILE)\nSET LCC = &LASTCC\nIF &LCC > 4 THEN DO\n   ISPEXEC DISPLAY PANEL(EDDDSN) MSG(&ZERRMSG) +\n   CURSOR(DSN)\n   IF &LASTCC = 0 THEN GOTO LOOP\nEND\nSET &TABLE = E&SYSUID\nISPEXEC TBOPEN &TABLE WRITE\nSET &EDBRDSNM = &DSN\nSET &LPR = &LENGTH(&EDBRDSNM)\nSET &EDBRDSNM = &SUBSTR(2:&LPR-1,&EDBRDSNM)\nIF &SYSDSN('&EDBRDSNM') = &STR(OK) THEN DO\nISPEXEC TBSCAN &TABLE ARGLIST(EDBRDSNM)\n   IF &LASTCC = 8   THEN DO\n      SET &EDBRLSTA = &STR(** EDIT       )\n      SET &EDBRLSTU = &STR(&SYSSDATE)\n      LISTDSI '&EDBRDSNM' NORECALL\n      SET &EDBRVOLS = &SYSVOLUME\n      ISPEXEC  TBADD &TABLE ORDER\n   END\nEND\nISPEXEC TBCLOSE &TABLE\nEXIT CODE(&LCC)\n./       ADD   NAME=DCF\nPROC 0\nISREDIT MACRO (STYLE)\nSET &FONT = &STR(X0G055AI)\nIF &STR(&STYLE) = &STR() THEN SET &STYLE = &STR(FINAL)\nISPEXEC  VGET  (DCFHEAD DCFOFF DCFFP DCFINDEX DCFLDEV) PROFILE\nIF &DCFHEAD =  THEN SET &DCFHEAD = &STR(N)\nIF &DCFOFF =  THEN SET &DCFOFF = &STR(N)\nIF &DCFFP =  THEN SET &DCFFP = &STR(1)\nIF &DCFINDEX =  THEN SET &DCFINDEX = &STR(N)\nIF &DCFLDEV =  THEN SET &DCFLDEV = &STR(3820A)\nIF &STR(&STYLE) = &STR(SET) THEN DO\n   ISPEXEC DISPLAY PANEL(DCFSET)\n   ISPEXEC  VPUT  (DCFHEAD DCFOFF DCFFP DCFINDEX DCFLDEV) PROFILE\n   GOTO EXIT\nEND\nIF &DCFHEAD = Y THEN SET &SYSVARH = &STR(H YES )\nELSE SET &SYSVARH = &STR(H NO )\nIF &DCFOFF = Y THEN SET &SYSVARS = &STR(S OFFSET )\nELSE SET &SYSVARS = &STR(S NO )\nIF &DCFINDEX = Y THEN SET &IX = &STR(INDEX)\nELSE SET &IX = &STR()\nISREDIT (CHG) = DATA_CHANGED\nIF &STR(&CHG) = &STR(YES) THEN ISREDIT SAVE\nISREDIT (CURDSN) = DATASET\nISREDIT (CURMEM) = MEMBER\nIF &CURMEM \u00ac= &Z THEN SET &DSN = &CURDSN.(&CURMEM.)\nELSE SET &DSN = &CURDSN\nIF &STR(&STYLE) = &STR(FINAL) THEN DO\nSCRIPT '&DSN'                       +\n        MESSAGE(ID)    &IX   +\n        SYSVAR(&SYSVARH &SYSVARS  X NO) +\n        DEVICE(&DCFLDEV)           +\n        FILE('&SYSUID..&CURMEM..LIST3820') +\n        FO('SYS1.FONTLIBB') +\n        CHARS(&FONT) +\n        SEG('SYS1.PSEGLIB') +\n        PROF('SCRIPT.R40.MACLIB(DSMPROF4)') +\n        L('SCRIPT.R40.MACLIB')         +\n        CONTINUE                    +\n        BIND(10 10)               +\n        FP(&DCFFP)\n   %GENPRINT DSN(&CURMEM..LIST3820) NODEL DEOPT(K)\nEND\nELSE IF &STR(&STYLE) = &STR(DRAFT) THEN DO\nSCRIPT '&DSN'                       +\n        MESSAGE(ID)    &IX   +\n        SYSVAR(&SYSVARH &SYSVARS  X NO) +\n        DEVICE(1403N6)              +\n        FILE('&SYSUID..&CURMEM..LIST') +\n        PROF('SCRIPT.R40.MACLIB(DSMPROF4)') +\n        L('SCRIPT.R40.MACLIB')         +\n        CONTINUE                    +\n        BIND(10 10)               +\n        FP(&DCFFP)\n   %GENPRINT DSN(&CURMEM..LIST) NODEL DEOPT(K)\nEND\nEXIT:+\nEND\n./       ADD   NAME=DSNTBL\nISREDIT MACRO (D)\nCONTROL NOFLUSH NOMSG\nIF &D = D THEN DO\n   CONTROL MSG L C S\n   SET &ERR = CANCEL\nEND\nELSE SET &ERR = RETURN\nISPEXEC CONTROL ERRORS &ERR\nISREDIT (USTATE) = USER_STATE\nSET &TABLE = DSN\nSET &STABLE = STEP\nSET &XFIELD = STEP\nISPEXEC TBCREATE &STABLE NOWRITE SHARE KEYS(XROW) NAMES(XSTEP)\nISPEXEC TBSORT   &STABLE FIELDS(XROW,N,D)\nSET &RC = 0\nDO WHILE (&RC = 0)\n   ISREDIT FIND 'EXEC'\n   SET &RC = &LASTCC\n   ISREDIT (XROW) = CURSOR\n   ISREDIT (DATA) = LINE &XROW\n   SET &XSTEP = &SUBSTR(3:10,&DATA)\n   IF &RC = 0 THEN ISPEXEC TBADD &STABLE ORDER\nEND\nISPEXEC TBCREATE &TABLE NOWRITE KEYS(DDNAME DSN STEP ROW COL) SHARE +\n          NAMES(VOLUME DSORG)\nISPEXEC TBSORT   &TABLE FIELDS(STEP,C,A)\nSET &RC = 0\nISREDIT CURSOR = 1 1\nDO WHILE (&RC = 0)\n   ISREDIT FIND 'DSN='\n   SET &RC = &LASTCC\n   IF &RC = 0 THEN DO\n      SET &FOUND = 1\n      ISREDIT (ROW,COL) = CURSOR\n      ISPEXEC TBTOP &STABLE\n      ISPEXEC TBVCLEAR &STABLE\n      ISREDIT (XROW) = CURSOR\n      ISPEXEC TBSARG &STABLE NAMECOND(XROW,LT)\n      ISPEXEC TBSCAN &STABLE\n      IF &LASTCC = 0 THEN SET &STEP = &NRSTR(&XSTEP)\n      ISREDIT (L) = LINE &ROW\n      SET &DD = &SUBSTR(3:&SYSINDEX(&STR( ),&STR(&L),3),&STR(&L))\n      IF &STR(&DD) \u00ac= &STR() THEN SET &DDNAME = &STR(&DD)\n      SET &CNT = &EVAL(&SYSINDEX(&STR(,),&STR(&NRSTR(&L)),&COL)-1)\n      IF &CNT < 0 THEN +\n       SET &CNT = &EVAL(&SYSINDEX(&STR( ),&STR(&NRSTR(&L)),&COL)-1)\n      SET &DSN = &SUBSTR(&EVAL(&COL+4):&CNT,&STR(&L))\n      IF &SUBSTR(1:1,&NRSTR(&DSN)) = &STR(') THEN +\n      SET &DSN=&SUBSTR(2:&LENGTH(&DSN)-1,&NRSTR(&DSN))\n      IF &SYSINDEX(&STR(,),&STR(&DSN)) = 1 THEN +\n       SET &DSN = &STR(** CANNOT RESOLVE DATA SET NAME **)\n       SET &VOLUME = &STR()\n      IF &SUBSTR(1:1,&NRSTR(&DSN)) = &STR(&&)  THEN +\n      SET &VOLUME = &STR()\n      ELSE DO\n          LISTDSI '&DSN' NORECALL\n          IF &LASTCC = 16 THEN DO\n             IF &SYSREASON = 0009 THEN SET &VOLUME = MIGRAT\n             IF &SYSREASON = 0005 THEN SET &VOLUME = &STR(??????)\n             IF &SYSREASON = 0001 THEN SET &VOLUME = &STR(??????)\n          END\n          ELSE DO\n             SET &VOLUME = &SYSVOLUME\n             SET &DSORG = &SYSDSORG\n          END\n      END\n      ISPEXEC TBADD &TABLE ORDER\n      IF &LASTCC > 8 THEN DO\n         ISPEXEC SETMSG MSG(&ZERRMSG)\n         EXIT CODE(12)\n      END\n   END\nEND\nIF &FOUND = 1 THEN DO\n   ISPEXEC TBTOP &TABLE\n   ISPEXEC CONTROL DISPLAY SAVE\n   SET &DRC = 0\n   SET &LINE1 = &STR(B - BROWSE             L - LIST ATTR    )\n   SET &LINE2 = &STR(E - EDIT              LC - LISTCAT      )\n   SET &LINE3 = &STR(G - GOTO DSN IN FILE  HR - HRECALL      )\n   DO WHILE (&DRC < 8)\n      ISPEXEC TBDISPL &TABLE PANEL(&TABLE)\n      SET &DRC = &LASTCC\n      IF &DRC < 8 AND &ZCMD \u00ac= &STR() THEN DO\n         IF &SYSINDEX(&STR(SORT),&ZCMD) = 1 THEN DO\n            SET &PARM =+\n       &SUBSTR(&SYSINDEX(&STR( ),&STR(&ZCMD))+1:&LENGTH(&ZCMD),&ZCMD)\n         IF &PARM = STEP | &PARM = DDNAME | &PARM = DSN THEN DO\n            ISPEXEC TBSORT &TABLE FIELDS(&PARM,C,A)\n            SET &XFIELD = &PARM\n         END\n         ELSE DO\n            SET &ZEDSMSG = &STR(INVALID SORT FIELD)\n            SET &ZEDLMSG = &STR(INVALID SORT FIELD)\n            ISPEXEC SETMSG MSG(ISRZ001)\n         END\n      END\n      ELSE IF &SUBSTR(1:1,&ZCMD) = L THEN DO\n         SET &PARM =+\n         &SUBSTR(&SYSINDEX(&STR( ),&STR(&ZCMD))+1:&LENGTH(&ZCMD),&ZCMD)\n         ISPEXEC TBVCLEAR &TABLE\n         SET &&XFIELD = &STR(&PARM*)\n         ISPEXEC TBSARG &TABLE NAMECOND(&XFIELD,GE)\n         ISPEXEC TBSCAN &TABLE\n      END\n      ELSE DO\n         SET &ZEDSMSG = &STR(INVALID COMMAND)\n         SET &ZEDLMSG = &STR(INVALID COMMAND)\n         ISPEXEC SETMSG MSG(ISRZ001)\n      END\n   END\n   ELSE IF &DRC < 8 THEN DO\n      SELECT (&S)\n         WHEN (B) DO\n            IF &DSORG = &STR(VS) THEN DO\n               ISPEXEC SELECT CMD(%BRIF '&DSN')\n            END\n            ELSE DO\n               ISPEXEC BROWSE DATASET('&DSN')\n               IF &LASTCC > 8 THEN\n               ISPEXEC SETMSG(&ZERRMSG)\n            END\n         END\n         WHEN (E) DO\n            IF &DSORG = &STR(VS) THEN DO\n               ISPEXEC SELECT CMD(%EDIF '&DSN')\n            END\n            ELSE DO\n               ISPEXEC EDIT DATASET('&DSN')\n               IF &LASTCC > 8 THEN\n               ISPEXEC SETMSG(&ZERRMSG)\n            END\n         END\n         WHEN (L)  ISPEXEC SELECT CMD(LISTD '&DSN')\n         WHEN (HR) ISPEXEC SELECT CMD(HRECALL '&DSN')\n         WHEN (LC) ISPEXEC SELECT CMD(LISTC ENT('&DSN') ALL)\n         WHEN (G) DO\n            ISREDIT CURSOR = &ROW,&COL\n            SET &DRC = 8\n         END\n         OTHERWISE DO\n            SET &ZEDSMSG = &STR(INVALID COMMAND)\n            SET &ZEDLMSG = &STR(INVALID COMMAND)\n            ISPEXEC SETMSG MSG(ISRZ001)\n         END\n      END\n   END\n   END\n   ISPEXEC CONTROL DISPLAY RESTORE\n   ISPEXEC TBCLOSE &TABLE\n   ISPEXEC TBCLOSE &STABLE\n   IF &S \u00ac= G THEN ISREDIT USER_STATE = (USTATE)\nEND\nELSE DO\n   SET &ZEDSMSG = &STR(NO DATASETS FOUND)\n   SET &ZEDLMSG = &STR(NO DATASETS FOUND)\n   ISPEXEC SETMSG MSG(ISRZ001)\nEND\n./       ADD   NAME=EDIF\nPROC 1 DSVSAM\nSET TIME = &STR(&SUBSTR(1:2,&SYSTIME)&SUBSTR(4:5,&SYSTIME)+\n           &SUBSTR(7:8,&SYSTIME))\nSET DDVSAM = DD&TIME\nALLOC DD(&DDVSAM) DA(&DSVSAM) REU SHR\nIF &LASTCC = 0 THEN DO\n   ISPEXEC VPUT (DSVSAM,DDVSAM) SHARED\n   ISPEXEC SELECT PGM(EDIFASM)\n   FREE DD(&DDVSAM)\nEND\nELSE ISPEXEC SETMSG MSG(VSAM002)\nEND\n./       ADD   NAME=EDX\nPROC 0 DEBUG\nISPEXEC CONTROL ERRORS RETURN\nCONTROL NOMSG NOFLUSH\nIF &SF = THEN SET &SF = &STR(DSNAME)\nIF &SD = THEN SET &SD = &STR(A)\nSET &TABLE = E&SYSUID\nISPEXEC VPUT (SF SD) PROFILE\nIF &DEBUG = DEBUG THEN CONTROL L C S MSG\n  ISPEXEC  TBOPEN &TABLE            WRITE\n  IF &LASTCC = 8 THEN DO\n  ISPEXEC  TBCREATE  &TABLE    KEYS(EDBRDSNM) +\n                     NAMES(EDBRVOLS EDBRLSTU EDBRLSTA) +\n                     WRITE\n  END\nDISPLAY:+\n  ISPEXEC TBDISPL &TABLE PANEL(EDBRPANL)\n  SET &LCC = &LASTCC\nRESTART:+\n  IF &LCC >= 8 THEN GOTO EXIT\n  ISPEXEC TBQUERY &TABLE POSITION(CRP)\n  IF &OPT = &STR(ADD) +\n  THEN DO\n     ISPEXEC  TBVCLEAR &TABLE\n     SET &EDBRLSTA = &STR(** ADD    )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC DISPLAY PANEL(EDBRADD)\n     IF &LASTCC = 8 THEN GOTO DISPLAY\n     IF &EDBRDSNM = &STR() +\n     THEN DO\n        SET &SYSOUTTRAP = 5000\n        LISTC LEV(&EDBRLV)\n        SET &SYSOUTTRAP = 0\n        SET COUNT = 1\n        SET &LIMIT = &SYSOUTLINE\n        DO WHILE &COUNT <= &LIMIT\n           SET &LINE = &&SYSOUTLINE&COUNT\n           IF (&SUBSTR(1:7,&LINE) = NONVSAM) OR +\n           (&SUBSTR(1:7,&LINE) = CLUSTER) +\n           THEN DO\n              SET EDBRDSNM = &SUBSTR(17:&LENGTH(&STR(&LINE)),&LINE)\n              LISTDSI '&EDBRDSNM' NORECALL\n              SET &LCC = &LASTCC\n              IF &LCC = 16 && &SYSREASON = 0008 +\n              THEN\n              ELSE DO\n                 IF &LCC = 16 && &SYSREASON = 0009 +\n                 THEN SET &EDBRVOLS = MIGRAT\n                 ELSE SET &EDBRVOLS = &SYSVOLUME\n                 ISPEXEC  TBADD &TABLE ORDER\n                 IF &LASTCC = 8 THEN  ISPEXEC  TBPUT &TABLE ORDER\n              END\n           END\n           SET &COUNT = &COUNT + 1\n        END\n     END\n     ELSE DO\n        LISTDSI '&EDBRDSNM' NORECALL\n        IF &LASTCC = 16 && &SYSREASON = 0009 +\n        THEN SET &EDBRVOLS = MIGRAT\n        ELSE DO\n           IF &SYSDSN('&EDBRDSNM') \u00ac= &STR(OK) +\n           THEN DO\n              ISPEXEC SETMSG MSG(EDX004)\n              GOTO DISPLAY\n           END\n           ELSE SET &EDBRVOLS = &SYSVOLUME\n        END\n        ISPEXEC  TBADD &TABLE                   ORDER\n        IF &LASTCC = 8 THEN DO\n           ISPEXEC  TBPUT &TABLE ORDER\n        END\n     END\n  END\n  ELSE IF &OPT = &STR(DROP)   +\n  THEN DO\n     ISPEXEC DISPLAY PANEL(EDBRDROP)\n     IF &LASTCC = 8 THEN GOTO DISPLAY\n     SET &DL = &LENGTH(&EDBRDLEV)\n     ISPEXEC TBTOP &TABLE\n     SET &DCC = 0\n     SET &DCNT = 1\n     DO WHILE (&DCC = 0)\n        IF &SUBSTR(1:&DL,&STR(&EDBRDSNM)&STR(                    )) =+\n        &STR(&EDBRDLEV) +\n        THEN DO\n           SET &DCNT = &DCNT + 1\n           ISPEXEC  TBDELETE &TABLE\n        END\n        ISPEXEC  TBSKIP &TABLE\n        SET &DCC = &LASTCC\n     END\n     ISPEXEC SETMSG MSG(EDX017)\n  END\n  ELSE IF &OPT = &STR(VERIFY) +\n  THEN DO\n     ISPEXEC TBTOP &TABLE\n     SET &VCC = 0\n     DO WHILE (&VCC = 0)\n        LISTDSI '&EDBRDSNM' NORECALL\n        SET &LDCC = &LASTCC\n        IF &LDCC = 16 && &SYSREASON = 0009 THEN DO\n           SET &EDBRVOLS = MIGRAT\n           SET &EDBRLSTA = &STR(** VERIFY )\n           ISPEXEC  TBPUT &TABLE ORDER\n        END\n        ELSE IF &LDCC = 16 && &SYSREASON = 0005 THEN DO\n           ISPEXEC  TBDELETE &TABLE\n        END\n        ELSE DO\n           SET &EDBRVOLS = &SYSVOLUME\n           SET &EDBRLSTA = &STR(** VERIFY )\n           SET &EDBRLSTU = &STR(&SYSSDATE)\n           ISPEXEC  TBPUT &TABLE ORDER\n        END\n        ISPEXEC  TBSKIP &TABLE\n        SET &VCC = &LASTCC\n     END\n     ISPEXEC SETMSG MSG(EDX017)\n  END\n  ELSE IF &LENGTH(&OPT) > 3 +\n  THEN DO\n     IF &SUBSTR(1:4,&STR(&OPT)) = &STR(SORT) +\n     THEN DO\n        SET &S = &SUBSTR(6:&LENGTH(&OPT),&STR(&OPT))\n        IF &SUBSTR(1:6,&STR(&S)) = &STR(DSNAME) +\n        THEN DO\n           SET &SF = &STR(EDBRDSNM)\n           SET &SD = &SUBSTR(&LENGTH(&S):&LENGTH(&S),&STR(&S))\n        END\n        ELSE IF &SUBSTR(1:6,&STR(&S)) = &STR(VOLSER) +\n        THEN DO\n           SET &SF = &STR(EDBRVOLS)\n           SET &SD = &SUBSTR(&LENGTH(&S):&LENGTH(&S),&STR(&S))\n        END\n        ELSE IF &SUBSTR(1:5,&STR(&S)) = &STR(LSTUS) +\n        THEN DO\n           SET &SF = &STR(EDBRLSTU)\n           SET &SD = &SUBSTR(&LENGTH(&S):&LENGTH(&S),&STR(&S))\n        END\n        ISPEXEC  TBSORT   &TABLE FIELDS(&SF C,&SD)\n     END\n  END\n  IF &SELECT = &STR(B) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL\n     IF &LASTCC = 16 THEN DO\n        IF &SYSREASON = 0009 THEN DO\n           SET &EDBRVOLS = MIGRAT\n           ISPEXEC  TBPUT &TABLE ORDER\n           ISPEXEC SETMSG MSG(EDX001)\n        END\n        ELSE IF &SYSREASON = 0005 THEN DO\n           ISPEXEC SETMSG MSG(EDX013)\n        END\n     END\n     ELSE DO\n        SET &EDBRVOLS = &SYSVOLUME\n        SET &EDBRLSTA = &STR(** BROWSE )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC CONTROL DISPLAY SAVE\n        IF &SYSDSORG \u00ac= &STR(VS) THEN +\n        ISPEXEC BROWSE DATASET('&EDBRDSNM')\n        ELSE ISPEXEC SELECT CMD(%BRIF '&EDBRDSNM')\n        ISPEXEC CONTROL DISPLAY RESTORE\n     END\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(E) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL\n     IF &LASTCC = 16 THEN DO\n        IF &SYSREASON = 0009 THEN DO\n           SET &EDBRVOLS = MIGRAT\n           ISPEXEC  TBPUT &TABLE ORDER\n           ISPEXEC SETMSG MSG(EDX001)\n        END\n        ELSE IF &SYSREASON = 0005 THEN DO\n           ISPEXEC SETMSG MSG(EDX014)\n        END\n     END\n     ELSE DO\n        SET &EDBRVOLS = &SYSVOLUME\n        SET &EDBRLSTA = &STR(** EDIT )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC CONTROL DISPLAY SAVE\n        IF &SYSDSORG \u00ac= &STR(VS) THEN +\n        ISPEXEC EDIT DATASET('&EDBRDSNM')\n        ELSE ISPEXEC SELECT CMD(%EDIF '&EDBRDSNM')\n        ISPEXEC CONTROL DISPLAY RESTORE\n     END\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(P) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL\n     IF &LASTCC = 16 && &SYSREASON = 0009 THEN DO\n        SET &EDBRVOLS = MIGRAT\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC SETMSG MSG(EDX001)\n     END\n     ELSE DO\n        SET &EDBRVOLS = &SYSVOLUME\n        SET &EDBRLSTA = &STR(** PDS  )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC CONTROL DISPLAY SAVE\n        PDS84 '&EDBRDSNM'\n        ISPEXEC CONTROL DISPLAY RESTORE\n     END\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(HL) +\n  THEN DO\n     ALLOC DA('&SYSUID..HL') NEW CATALOG +\n             UNIT(DEVL) LRECL(121) BLKSIZE(1210) RECFM(F B A) +\n             DSORG(PS) SPACE(1 1) TRACK\n     HLIST DA('&EDBRDSNM') BOTH OUTDATASET('&SYSUID..HL')\n     ISPEXEC BROWSE DATASET('&SYSUID..HL')\n     DELETE '&SYSUID..HL'\n     SET &EDBRLSTA = &STR(** HLIST )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC  TBPUT &TABLE ORDER\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(PR) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL\n     IF &LASTCC = 16 && &SYSREASON = 0009 THEN DO\n        SET &EDBRVOLS = MIGRAT\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC SETMSG MSG(EDX001)\n     END\n     ELSE DO\n        ISPEXEC  SELECT CMD(%PRT '&EDBRDSNM')\n        SET &EDBRVOLS = &SYSVOLUME\n        SET &EDBRLSTA = &STR(** PRINT )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n     END\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(V) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL\n     SET &LDCC = &LASTCC\n     IF &LDCC = 16 && &SYSREASON = 0009 THEN DO\n        SET &EDBRVOLS = MIGRAT\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC SETMSG MSG(EDX001)\n     END\n     ELSE IF &LDCC = 16 && &SYSREASON = 0005 THEN DO\n        SET &EDBRVOLS = &STR(??????)\n        SET &EDBRLSTA = &STR(** INFO )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n        ISPEXEC SETMSG MSG(EDX016)\n     END\n     ELSE DO\n        SET &EDBRVOLS = &SYSVOLUME\n        SET &EDBRLSTA = &STR(** VOLSER )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n     END\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(D) +\n  THEN DO\n     ISPEXEC  DISPLAY  PANEL(EDBRDELT)\n     IF &LASTCC = 8 THEN GOTO ENDSEL\n     DELETE '&EDBRDSNM'\n     IF &LASTCC = 0 +\n     THEN DO\n        ISPEXEC  TBDELETE &TABLE\n        ISPEXEC SETMSG MSG(EDX005)\n     END\n     ELSE ISPEXEC SETMSG MSG(EDX006)\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(A) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL DIRECTORY\n     IF &LASTCC \u00ac= 0 THEN GOTO ENDSEL\n     SET &EDBRBLK  = &SYSBLKSIZE\n     SET &EDBRPRIM = &SYSPRIMARY\n     SET &EDBRSECQ = &SYSSECONDS\n     SET &EDBRDIRB = &SYSADIRBLK\n     SET &EDBRVOLS = &SYSVOLUME\n     SET &EDBRMDSN = &EDBRDSNM\n     SET &EDBRDSNM = &STR(')&EDBRDSNM&STR(')\n     ISPEXEC  DISPLAY  PANEL(EDBRMODL)\n     IF &LASTCC = 8 THEN GOTO ENDSEL\n     IF &SYSRECFM = &STR(FB) +\n     THEN SET &SYSRECFM = &STR(F B)\n     ELSE IF &SYSRECFM = &STR(VB) +\n     THEN SET &SYSRECFM = &STR(V B)\n     ELSE IF &SYSRECFM = &STR(FBA) +\n     THEN SET &SYSRECFM = &STR(F B A)\n     ELSE IF &SYSRECFM = &STR(VBA) +\n     THEN SET &SYSRECFM = &STR(V B A)\n     IF &SYSUNITS = &STR(BLOCK) +\n     THEN SET &SYSUNITS = &STR(BLOCK(&EDBRBLK))\n     IF &SYSDSORG = &STR(PO) THEN +\n     ALLOC DA('&EDBRDSNM') NEW CATALOG +\n         UNIT(&SYSUNIT) VOL(&EDBRVOLS) +\n         LRECL(&SYSLRECL) BLKSIZE(&EDBRBLK) +\n         RECFM(&SYSRECFM) DIR(&EDBRDIRB) DSORG(&SYSDSORG) +\n         SPACE(&SYSPRIMARY &SYSSECONDS) &SYSUNITS\n     ELSE +\n     ALLOC DA('&EDBRDSNM') NEW CATALOG +\n         UNIT(&SYSUNIT) VOL(&EDBRVOLS) +\n         LRECL(&SYSLRECL) BLKSIZE(&EDBRBLK) +\n         RECFM(&SYSRECFM)  DSORG(&SYSDSORG) +\n         SPACE(&SYSPRIMARY &SYSSECONDS) &SYSUNITS\n     IF &LASTCC = 0 +\n     THEN ISPEXEC SETMSG MSG(EDX007)\n     ELSE DO\n        ISPEXEC SETMSG MSG(EDX008)\n        GOTO ENDSEL\n     END\n     SET &EDBRLSTA = &STR(** ALLOC  )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC  TBADD &TABLE                   ORDER\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(X) +\n  THEN DO\n     ISPEXEC  TBDELETE &TABLE\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(LB) +\n  THEN DO\n     ISPEXEC SELECT CMD(%LB '&EDBRDSNM')\n     SET &EDBRLSTA = &STR(** LBCK )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC  TBPUT &TABLE                   ORDER\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(G) +\n  THEN DO\n     ISPEXEC SELECT CMD(%G '&EDBRDSNM')\n     SET &EDBRLSTA = &STR(** INFO-G )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC  TBPUT &TABLE                   ORDER\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(HM) +\n  THEN DO\n     HMIGRATE '&EDBRDSNM' NOWAIT\n     ISPEXEC SETMSG MSG(EDX002)\n     SET &EDBRVOLS = MIGRAT\n     SET &EDBRLSTA = &STR(** MIGRATE )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC  TBPUT &TABLE ORDER\n     GOTO ENDSEL\n  END\n  ELSE IF &SELECT = &STR(HR) +\n  THEN DO\n     HRECALL  '&EDBRDSNM' NOWAIT\n     ISPEXEC SETMSG MSG(EDX003)\n     SET &EDBRVOLS = ONLINE\n     SET &EDBRLSTA = &STR(** RECALL )\n     SET &EDBRLSTU = &STR(&SYSSDATE)\n     ISPEXEC  TBPUT &TABLE ORDER\n  END\n  ELSE IF &SELECT = &STR(?) +\n  THEN DO\n     LISTDSI '&EDBRDSNM' NORECALL\n     IF &LASTCC = 16 THEN DO\n        IF &SYSREASON = 0009 THEN DO\n           SET &EDBRVOLS = MIGRAT\n           ISPEXEC  TBPUT &TABLE ORDER\n           ISPEXEC SETMSG MSG(EDX001)\n        END\n        ELSE IF &SYSREASON = 0005 THEN DO\n           ISPEXEC SETMSG MSG(EDX015)\n        END\n     END\n     ELSE DO\n        SET &EDBRBLK  = &SYSBLKSIZE\n        SET &EDBRPRIM = &SYSPRIMARY\n        SET &EDBRSECQ = &SYSSECONDS\n        SET &EDBREXT  = &SYSEXTENTS\n        SET &EDBRVOLS = &SYSVOLUME\n        SET &EDBRCDTE = &STR(&SYSCREATE)\n        SET &EDBREFDT = &STR(&SYSREFDATE)\n        SET &EDBRUPDT = &SYSUPDATED\n        ISPEXEC  DISPLAY  PANEL(EDBRINFO)\n        SET &EDBRLSTA = &STR(** INFO )\n        SET &EDBRLSTU = &STR(&SYSSDATE)\n        ISPEXEC  TBPUT &TABLE ORDER\n     END\n  END\n ENDSEL:+\n ISPEXEC TBTOP  &TABLE\n ISPEXEC TBSKIP &TABLE NUMBER(&ZTDTOP)\n ISPEXEC VGET   (ZVERB ZSCROLLN)\n SELECT\n  WHEN (&ZVERB = 'UP') THEN ISPEXEC TBSKIP &TABLE NUMBER(-&ZSCROLLN)\n  WHEN (&ZVERB = 'DOWN') THEN ISPEXEC TBSKIP &TABLE NUMBER(&ZSCROLLN)\n  OTHERWISE\n END\n  IF &LCC = 4 THEN DO\n     ISPEXEC TBDISPL &TABLE  PANEL(EDBRPANL)\n     SET &LCC = &LASTCC\n     GOTO RESTART\n  END\n  ELSE GOTO DISPLAY\nEXIT:+\nISPEXEC TBCLOSE &TABLE\nEND\n./       ADD   NAME=FONTHELP\nISREDIT MACRO\n%FONTTABL  EDIT\n./       ADD   NAME=FONTMAPS\nPROC 0 DEBUG NOSUB\n\n/**********************************************************************/\n/* THIS CLIST IS DESIGNED TO READ THE ADVANCED FUNCTION PRINTING FONT */\n/* TABLE AND PERFORM THE FOLLOWING FUNCTION:                          */\n/*                                                                    */\n/*  1)  CREATE A TABLE OF CONTENTS LIST OF ALL FONTS LESS THAN 37     */\n/*      POINTS IN SIZE.                                               */\n/*  2)  GENERATE AND SUBMIT THE NECESSARY JCL AND OGL STATEMENTS      */\n/*      TO PRODUCE A MAP OF EVERY FONT SELECTED IN (1)                */\n/*                                                                    */\n/*  OPTIONS:  DEBUG  -  TURN ON CLIST TRACING FOR DIAGNOSTIC PURPOSES */\n/*            NOSUB  -  CREATE TABLE OF CONTENTS BUT DO NOT SUBMIT    */\n/*                      THE JOBS TO MAP THE FONTS                     */\n/*                                                                    */\n/*  NOTE:  THE SUBMITTED JOBS ARE STRUCTURED TO CONTAIN 50 OGL        */\n/*         STEPS                                                      */\n/**********************************************************************/\n\nIF &DEBUG = DEBUG +\n  THEN CONTROL LIST CONLIST SYMLIST NOFLUSH PROMPT MSG\n  ELSE CONTROL NOLIST NOCONLIST NOSYMLIST FLUSH NOPROMPT MSG\n\nISPEXEC LIBDEF FTABLE DATASET ID('TECTSG.ISPFJCL.ISPTLIB')\n\nDEL FONTMAPS.CNTL\nDEL FONTMAP.CONTENTS\n\nALLOC F(CONTENTS) DS(FONTMAP.CONTENTS) NEW  REUSE +\n      SPACE(10,10) TRACK RECFM(F B) LRECL(80) BLKSIZE(23440)\n\nALLOC F(ISPFILE) DS(FONTMAPS.CNTL) NEW  REUSE +\n      SPACE(30) CYL RECFM(F B) LRECL(80) BLKSIZE(23440)\n\nISPEXEC TBOPEN AFPFONTS NOWRITE LIBRARY(FTABLE) SHARE\nISPEXEC TBSORT AFPFONTS FIELDS(TYPEFACE,C,A POINTSIZ,N,A)\nISPEXEC TBSKIP AFPFONTS\n\nSET STEP = 0\nSET JOB  = NO\nSET PAGE = 0\nSET TOC = 0\nSET MAXTOC = 46  /* MAX FONTS PER PAGE */\n\nOPENFILE CONTENTS OUTPUT\n\nSET CONTENTS = &STR(.DF FONT TYPE(SERIF  8   ) CODEPAGE T1D0BASE )\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.BF FONT)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.PN PREF AFP-TOC-)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.RH ON)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(AFP FONT MAPS - TABLE OF CONTENTS)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.RH OFF)\nPUTFILE CONTENTS\n\nSET HEAD1 = &STR(:RDEF ID=FMTOC CWIDTHS='2.6I .5I 1.2I 1.2I .7I' +\n                  HP='2 0' ALIGN='L R'.)\nSET HEAD2 = &STR(:TABLE REFID=FMTOC.)\nSET LINE1 = &STR(:C.FONT NAME:C.SIZE:C.WIDTH:C.WEIGHT:C.PAGE #)\n\nSET CONTENTS = &STR(&HEAD1)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(&HEAD2)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(:ROW.)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(&LINE1)\nPUTFILE CONTENTS\n\nFIXUP: +\n    IF &POINTSIZ < 37 THEN DO\n              SET STEP = &STEP + 1\n              IF &STEP = 1  THEN SET JOB = YES\n              SET TFONT = &SUBSTR(3:&LENGTH(&CODEFONT),&CODEFONT  )\n              SET PAGE = &PAGE + 1\n\n   IF &TOC = &MAXTOC THEN DO\n                          SET TOC = 0\n                          SET CONTENTS = &STR(:ETABLE.)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(.PA)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(&HEAD2)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(:ROW.)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(&LINE1)\n                          PUTFILE CONTENTS\n                          END\n\n   SET CONTENTS = &STR(:ROW.)\n   PUTFILE CONTENTS\n\n   SET OFF = &SYSINDEX(NORMAL,&STR(&WIDTH),1)\n       IF &OFF > 0 THEN SET &WIDTH =\n\n   SET OFF = &SYSINDEX(MEDIUM,&STR(&WEIGHT),1)\n       IF &OFF > 0 THEN SET &WEIGHT =\n\nSET CONTENTS = &STR(:C.&TYPEFACE:C.&POINTSIZ:C.&WIDTH:C.&WEIGHT:C.&PAGE)\nPUTFILE CONTENTS\n\n   SET TOC = &TOC + 1\n\n              IF &NOSUB = THEN DO\n              ISPEXEC FTOPEN\n              ISPEXEC FTINCL FONTMJCL\n              IF &STEP = 50 THEN DO\n                                 ISPEXEC FTCLOSE\n                                 SUB FONTMAPS.CNTL\n                                 WRITE JOB SUBMITTED UP TO PAGE &PAGE\n                                 SET STEP = 0\n                                 END\n                           SET JOB = NO\n                           END\n                           END\n                    ISPEXEC TBSKIP AFPFONTS\n                    IF &LASTCC = 0 THEN GOTO FIXUP\nEXIT: +\n      SET CONTENTS = &STR(:ETABLE.)\n      PUTFILE CONTENTS\n      CLOSFILE CONTENTS\n\n      ISPEXEC TBEND AFPFONTS\n      ISPEXEC LIBDEF FTABLE\n      FREE FILE(CONTENTS ISPFILE)\n      DEL FONTMAPS.CNTL\n./       ADD   NAME=FONTSUMM\nPROC 0 DEBUG ALL\n\n/**********************************************************************/\n/* THIS CLIST IS DESIGNED TO SCAN THE TABLE OF ADVANCED FUNCTION      */\n/* PRINTING FONTS AND GENERATE A SUMMARY THAT CAN BE USED BY THE USER */\n/* IN SELECTING A FONT TO BE USED IN SCRIPTING A DOCUMENT.            */\n/*                                                                    */\n/* THE CLIST IS INVOKED BY ENTERING %FONTSUMM                         */\n/*                               OR %FONTSUMM ALL                     */\n/*                                                                    */\n/*      BY SPECIFYING THE OPTION 'ALL' A SUMMARY WILL BE              */\n/*      GENERATED OF ALL AVAILABLE FONTS.  THE DEFAULT IS TO          */\n/*      EXCLUDE THE FOREIGN (NON-U.S.) FONTS.                         */\n/*                                                                    */\n/*  THE OUTPUT PRODUCED BY THIS CLIST SHOULD THEN BE PROCESSED BY     */\n/*  SCRIPT TO GENERATE THE SUMMARY DOCUMENT                           */\n/**********************************************************************/\nIF &DEBUG = DEBUG +\n  THEN CONTROL LIST CONLIST SYMLIST NOFLUSH PROMPT MSG\n  ELSE CONTROL NOLIST NOCONLIST NOSYMLIST FLUSH NOPROMPT NOMSG\n\n\n/*  ISPEXEC LIBDEF FTABLE DATASET ID('TSGJCL.SPF.ISPTLIB')\n\nDEL FONTSUMM.TEXT\n\nALLOC F(CONTENTS) DS(FONTSUMM.TEXT) NEW +\n      SPACE(10,10) TRACK RECFM(F B) LRECL(80) BLKSIZE(23440)\nFREE  F(CONTENTS)\nALLOC F(CONTENTS) DS(FONTSUMM.TEXT) MOD +\n      SPACE(10,10) TRACK RECFM(F B) LRECL(80) BLKSIZE(23440)\n\nISPEXEC TBOPEN AFPFONTS NOWRITE                 SHARE\nWRITE &LASTCC\nISPEXEC TBSORT AFPFONTS FIELDS(TYPEFACE,C,A POINTSIZ,N,A)\nISPEXEC TBSKIP AFPFONTS\n\nSET STEP = 0\nSET JOB  = NO\nSET PAGE = 0\nSET TOC = 0\nSET SAMPLE = 0\nSET XFONT =\nSET FONT = FONT\nSET CP = CP\nSET MAXTOC = 23  /* MAX FONTS PER PAGE */\n\nOPENFILE CONTENTS OUTPUT\n\nSET CONTENTS = &STR(.DF FONT TYPE('HELVETICA LATIN1' 8   ) +\n                     CODEPAGE T1V10500 )\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.BF FONT)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.PN PREF FONTS-)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.RH ON)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(AFP FONT SUMMARY)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(.RH OFF)\nPUTFILE CONTENTS\n\nSET HEAD1 = +\n&NRSTR(:RDEF ID=FMTOC CWIDTHS='2.6I .5I 1.3I 1.1I .8I' HP='2'  +\n                  ALIGN='L R L L R'.)\nSET HEAD2 = &NRSTR(:RDEF ID=ROW2 CWIDTHS='1I 2.1I 3.2I' HP='1 1' +\n                  ALIGN='L R R'.)\nSET HEAD3 = &NRSTR(:RDEF ID=HEAD CWIDTHS='2.6I .5I 1.3I 1.1I .8I' +\n                  HP='2' ALIGN='L R L L R'.)\nSET HEAD4 = &NRSTR(:TABLE REFID=FMTOC.)\nSET LINE1 = &NRSTR(:C.FONT NAME:C.SIZE:C.WIDTH:C.WEIGHT:C.CODEPAGE)\n\nSET CONTENTS = &STR(&HEAD1)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(&HEAD2)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(&HEAD3)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(&HEAD4)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(:ROW REFID=HEAD.)\nPUTFILE CONTENTS\nSET CONTENTS = &STR(&LINE1)\nPUTFILE CONTENTS\n\nFIXUP: +\n IF &ALL \u00ac= ALL THEN DO\n   IF &SYSINDEX(AUSTRAL,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(AUSTRIA,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(BELGIUM,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(BRAZIL,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(DENMARK,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(FINLAND,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(FRANCE,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(GERMANY,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(FRENCH,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(ICELAND,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(KATAKANA,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(ITALY,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(JAPAN,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(KINGDOM,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(LUXEMBOURG,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(LATIN,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(U.K.&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(H.K.,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(NETHER,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(NORWAY,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(PORTU,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(SPAIN,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n   IF &SYSINDEX(SWEEDEN,&NRSTR(&CODEPD),1) > 0 THEN GOTO SKIP\n      END\n\n   IF &TOC = &MAXTOC THEN DO\n                          SET TOC = 0\n                          SET CONTENTS = &STR(:ETABLE.)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(.PA)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(&HEAD4)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(:ROW REFID=HEAD.)\n                          PUTFILE CONTENTS\n                          SET CONTENTS = &STR(&LINE1)\n                          PUTFILE CONTENTS\n                          END\n\n   SET CONTENTS = &STR(:ROW REFID=FMTOC.)\n   PUTFILE CONTENTS\n\n   SET OFF = &SYSINDEX(NORMAL,&STR(&WIDTH),1)\n       IF &OFF > 0 THEN SET &WIDTH =\n\n   SET OFF = &SYSINDEX(MEDIUM,&NRSTR(&WEIGHT),1)\n       IF &OFF > 0 THEN SET &WEIGHT =\n\n\n   SET CONTENTS = &STR(:C.&TYPEFACE:C.&POINTSIZ:C.&WIDTH+\n                       :C.&NRSTR(&WEIGHT):C.&CODEPAGE)\n   PUTFILE CONTENTS\n\n   SET CONTENTS = &STR(:ROW REFID=ROW2.)\n   PUTFILE CONTENTS\n   SET CONTENTS = &STR(:C.&CODEFONT:C.&STYLE:C.&NRSTR(&CODEPD))\n   PUTFILE CONTENTS\n\n   IF &STR(&XFONT) \u00ac= &STR(&TYPEFACE) THEN DO\n                            IF &STR(&WIDTH) \u00ac= THEN GOTO SETTOC\n                            IF &NRSTR(&WEIGHT) \u00ac= THEN GOTO SETTOC\n                            IF &POINTSIZ \u00ac= 10 THEN GOTO SETTOC\n                            IF &STR(&STYLE) \u00ac= THEN GOTO SETTOC\n                            SET SAMPLE = &SAMPLE + 1\n                            SET XFONT = &STR(&TYPEFACE)\n                            SET &&FONT&SAMPLE = &STR(&TYPEFACE)\n                            SET &&CP&SAMPLE = &CODEPAGE\n                            END\nSETTOC: +\n   SET TOC = &TOC + 1\n\nSKIP: +\n   ISPEXEC TBSKIP AFPFONTS\n      IF &LASTCC = 0 THEN GOTO FIXUP\n\nEXIT: +\n      SET CONTENTS = &STR(:ETABLE.)\n      PUTFILE CONTENTS\n\nIF &SAMPLE = 0 THEN GOTO EXIT2\n\nSET COUNT = 1\n\n   SET CONTENTS = &STR(.DS;.FO OFF)\n   PUTFILE CONTENTS\n   CLOSFILE CONTENTS\n\nSAMPLES: +\n      OPENFILE CONTENTS OUTPUT\n      SET CONTENTS = &STR(.PA)\n      PUTFILE CONTENTS\n\n      CONTROL NOCAPS\n      SET FONT = &&FONT&COUNT\n      SET CP = &&CP&COUNT\n      SET CONTENTS = &STR(.DF F&COUNT TYPE('&FONT' 10) CODEPAGE &CP)\n      PUTFILE CONTENTS\n      SET CONTENTS = &STR(.BF FONT)\n      PUTFILE CONTENTS\n      SET CONTENTS = &STR(FONT &FONT SIZE:10 )\n      PUTFILE CONTENTS\n      SET CONTENTS = &STR(.BF F&COUNT)\n      PUTFILE CONTENTS\n      CLOSFILE CONTENTS\n\n      ISPEXEC SELECT PGM(FONTSAMP)\n\n\n      SET COUNT = &COUNT + 1\n      IF &COUNT <= &SAMPLE THEN GOTO SAMPLES\n\nEXIT2: +\n      ISPEXEC TBEND AFPFONTS\n/*    ISPEXEC LIBDEF FTABLE\n      FREE FILE(CONTENTS)\n      ISPEXEC BROWSE DATASET(FONTSUMM.TEXT)\n./       ADD   NAME=FONTTABL\nPROC 0 DEBUG NEW SYS EDIT\nIF &DEBUG = DEBUG +\n   THEN CONTROL LIST CONLIST SYMLIST NOFLUSH PROMPT MSG\n   ELSE CONTROL NOLIST NOCONLIST NOSYMLIST FLUSH NOPROMPT NOMSG\nSET &SYS = SYS\nIF &SYS  = SYS  | &NEW = NEW THEN SET PANEL = AFPFONTX\nIF &EDIT = EDIT THEN SET PANEL = AFPFONTE\nIF &PANEL =     THEN SET PANEL = AFPFONTX\nISPEXEC LIBDEF FTABLE DATASET ID('TECTSG.ISPFJCL.ISPTLIB')\nIF &NEW \u00ac= NEW THEN DO\n                    ISPEXEC TBOPEN AFPFONTS NOWRITE +\n                            LIBRARY(FTABLE) SHARE\n                    SET LCC = &LASTCC\n                    IF &LCC = 0 THEN GOTO DOTOP\n                    SET ZEDSMSG = ERROR\n                    SET ZEDLMSG = &STR(SEVERE ERROR CODE=&LCC +\n                        OPENING FONT TABLE: INFORM SUPPORT PROGRAMMER)\n                    ISPEXEC SETMSG MSG(ISRZ000)\n                    ISPEXEC LIBDEF FTABLE\n                    EXIT\n                    END\nSET C =\nCREATE: +\nSET SYS = SYS\nISPEXEC TBCREATE AFPFONTS KEYS(CODEFONT) +\n        NAMES(CHARSET CODEPAGE TYPEFACE WEIGHT WIDTH +\n              POINTSIZ STYLE CODEPD CODEPTS CHARFP) +\n        WRITE REPLACE LIBRARY(FTABLE)\nSET CC = &LASTCC\nSELECT\nWHEN (&CC = 0) GOTO ALLOC\nWHEN (&CC = 4)  DO\nIF &C = C THEN DO\n               SET ZEDSMSG = ERROR\n               SET ZEDLMSG = &STR(TABLE CREATE ERROR TWICE)\n               ISPEXEC SETMSG MSG(ISRZ000)\n               ISPEXEC LIBDEF FTABLE\n               EXIT\n               END\nISPEXEC TBEND AFPFONTS\nISPEXEC TBERASE AFPFONTS LIBRARY(FTABLE)\nSET C = C\nGOTO CREATE\nEND\nWHEN (&CC > 4)  DO\n                SET ZEDSMSG = ERROR\n                SET ZEDLMSG = &STR(TABLE CREATE ERROR RETURN CODE = &CC)\n                ISPEXEC SETMSG MSG(ISRZ000)\n                ISPEXEC LIBDEF FTABLE\n                EXIT\n                END\n         END\nALLOC: +\n       ALLOC F(TBIN) DS(FONT3820.DATA) SHR REUSE\nOPENFILE TBIN\nSET CL =\nCONTROL NOLIST NOCONLIST NOSYMLIST FLUSH NOPROMPT NOMSG\nREAD: +\nIF &CL = CLOSED THEN GOTO SAVEIT\n   GETFILE TBIN\n/*  ERROR CHECK  */\nERROR DO\n      SET CL = CLOSED\n      CLOSFILE TBIN\n      FREE FILE(TBIN)\n      ERROR OFF\n      END\nCONTROL NOCAPS\nSET CODEFONT = &SUBSTR(1:8,&TBIN)\nSET CHARSET =  &SUBSTR(9:16,&TBIN)\nSET CODEPAGE = &SUBSTR(17:24,&TBIN)\nSET TF       = &STR(&SUBSTR(25:56,&TBIN))\n      SET OFF = &SYSINDEX(  ,&TF,1)\n      SET TYPEFACE = &SUBSTR(1:&OFF,&STR(&TF))\nSET WT       = &STR(&SUBSTR(57:71,&TBIN))\n      SET OFF = &SYSINDEX(  ,&WT,1)\n      IF &OFF = 0 THEN SET WEIGHT = &WTR(&WT)\n                  ELSE SET WEIGHT  = &SUBSTR(1:&OFF,&WT)\nSET POINTSIZ = &SUBSTR(72:75,&TBIN)\n    SET POINTSIZ = &POINTSIZ\nSET ST       = &STR(&SUBSTR(76:107,&TBIN))\n      SET OFF = &SYSINDEX(  ,&ST,1)\n      SET STYLE  = &SUBSTR(1:&OFF,&ST)\nSET WD       = &STR(&SUBSTR(108:122,&TBIN))\n      SET OFF = &SYSINDEX(  ,&WD,1)\n      IF &OFF = 0 THEN SET WIDTH = &STR(&WD)\n                  ELSE SET WIDTH  = &STR(&SUBSTR(1:&OFF,&WD))\nSET CPD      = &STR(&SUBSTR(123:154,&TBIN))\n      SET OFF = &SYSINDEX(  ,&NRSTR(&CPD),1)\n      IF &OFF = 0 THEN SET CODEPD = &NRSTR(&CPD)\n                  ELSE SET CODEPD = &STR(&SUBSTR(1:&OFF,&NRSTR(&CPD)))\nSET CODEPTS  = &SUBSTR(155:158,&TBIN)\nCONTROL NOCAPS\nSET CHARFP   = &SUBSTR(159:159,&TBIN)\nIF &CHARFP = F THEN SET CHARFP = Fixed\n               ELSE SET CHARFP = Prop\nISPEXEC TBADD AFPFONTS\nGOTO READ\nSAVEIT: ISPEXEC TBSAVE AFPFONTS LIBRARY(FTABLE)\nDOTOP: +\nIF &DEBUG = DEBUG +\n   THEN CONTROL LIST CONLIST SYMLIST NOFLUSH PROMPT MSG\n   ELSE CONTROL NOLIST NOCONLIST NOSYMLIST FLUSH NOPROMPT NOMSG\n      ISPEXEC TBSORT AFPFONTS FIELDS(TYPEFACE,C,A POINTSIZ,N,A)\n      ISPEXEC TBTOP AFPFONTS\n      ISPEXEC TBVCLEAR AFPFONTS\n      ISPEXEC TBSCAN AFPFONTS ARGLIST(CODEFONT)\n      SET CODEFONT = &STR(X*)\n      CONTROL NOCAPS\n      ISPEXEC TBSARG AFPFONTS\n      SET LCC = 0\nDISPLAY: +\n IF &LCC = 4 THEN ISPEXEC TBDISPL AFPFONTS\n             ELSE ISPEXEC TBDISPL AFPFONTS PANEL(&PANEL)\n SET LCC = &LASTCC\n IF &LCC = 8 THEN GOTO EXIT\n IF &TSEL = && &STR(&ZCMD) = THEN GOTO DISPLAY\n IF &TSEL = S && &EDIT = EDIT THEN DO\n  /*******************************************************/\n  /*   DETERMINE IF THERE ARE ANY LINES IN THE DATASET   */\n  /*   TO BEGIN WITH.                                    */\n  /*******************************************************/\n  ISREDIT (FIRST,LAST) = DISPLAY_LINES\n   ISREDIT RESET\n   ISREDIT (LINE) = CURSOR\n   SET OLINE = &LINE\n   IF &LINE > 1 THEN SET LINE = &LINE+1\n   IF &LINE \u00ac= 0 THEN ISREDIT CURSOR = &LINE\nSET STYLE = &STYLE\n  SET OFF = &SYSINDEX(MEDIUM,&WEIGHT,1)\n  IF &OFF \u00ac= 0 THEN SET WEIGHT =\n  SET OFF = &SYSINDEX(NORMAL,&WIDTH,1)\n  IF &OFF \u00ac= 0 THEN SET WIDTH =\nSET DEFINE =&STR(.DF F?? TYPE('&TYPEFACE' &POINTSIZ +\n    &STYLE &WEIGHT &WIDTH) CODEPAGE &CODEPAGE)\nISREDIT LINE_AFTER  .ZCSR=(DEFINE)\nGOTO EXIT\n                            END\nIF &TSEL = M && &SYS = SYS THEN DO   /*  MAP THE CHARACTER */\n   SET TFONT = &SUBSTR(3:&LENGTH(&CODEFONT),&CODEFONT  )\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL FONTMAP\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET ZTEMPF\n   FREE F(SYSPRINT SAMPLE OVRLIB FONTDD SYMBOLIC SEGDD SYSIN)\n   ALLOC F(SYSPRINT) DUMMY                            REUSE\n   OUTDES SAMPLE FORMDEF(A10110)\n   ALLOC F(SAMPLE)   SYSOUT(F) OUTDES(SAMPLE)         REUSE\n   ALLOC F(SYSIN)    DS('&ZTEMPF')     SHR            REUSE\n   ALLOC F(SYMBOLIC) DUMMY                            REUSE\n   ALLOC F(FONTDD)   DS('SYS1.FONTLIBB')      SHR     REUSE\n   ALLOC F(OVRLIB)   DS('SYS1.OVERLIB')          SHR  REUSE\n   ALLOC F(SEGDD)    DUMMY                            REUSE\n   CALL 'SYS1.LINKLIB(DZIOVRLY)' 'NOSEQ,ENG'\n   FREE F(SAMPLE)\n   FREE OUTDES(SAMPLE)\n   FREE F(ISPFILE SYSPRINT OVRLIB FONTDD SYMBOLIC SEGDD SYSIN)\n   END\nSET TSEL =\nIF &STR(&ZCMD) = THEN GOTO DISPLAY\nSET SYSDVAL = &STR(&ZCMD)\nREADDVAL V1 V2 V3\nISPEXEC TBVCLEAR AFPFONTS\nIF &V2 = THEN GOTO DISPLAY\nIF &SUBSTR(1:1,&STR(&V1)) = S THEN SET V1 = SORT\nIF &SUBSTR(1:1,&STR(&V1)) = L THEN SET V1 = LOCATE\nIF &SUBSTR(1:1,&STR(&V1)) = O THEN SET V1 = ONLY\nIF &STR(&V1) = ONLY | &STR(&V1) = LOCATE +\n   THEN DO\n    IF &STR(&V2) = CODEFONT | +\n        &STR(&V2) = CHARSET | +\n        &STR(&V2) = CODEPAGE | +\n        &STR(&V2) = NAME |        /* REALLY TYPEFACE */ +\n        &STR(&V2) = WEIGHT | +\n        &STR(&V2) = STYLE  | +\n        &STR(&V2) = WIDTH | +\n        &STR(&V2) = SIZE         /* REALLY POINTSIZ */ +\n        THEN DO\n           IF &STR(&V2) = CODEFONT THEN SET CODEFONT = &STR(&V3)&STR(*)\n           IF &STR(&V2) = CHARSET THEN SET CHARSET = &STR(&V3)&STR(*)\n           IF &STR(&V2) = CODEPAGE THEN SET CODEPAGE = &STR(&V3)&STR(*)\n           IF &STR(&V2) = NAME THEN SET TYPEFACE = &STR(&V3)&STR(*)\n           IF &STR(&V2) = WEIGHT THEN SET WEIGHT = &STR(&V3)&STR(*)\n           IF &STR(&V2) = STYLE THEN SET STYLE  = &STR(&V3)&STR(*)\n           IF &STR(&V2) = WIDTH THEN SET WIDTH = &STR(&V3)&STR(*)\n           IF &STR(&V2) = SIZE THEN SET POINTSIZ = &STR(&V3)&STR(*)\n           IF &STR(&V2) = NAME THEN SET &V2 = TYPEFACE\n           IF &STR(&V2) = SIZE THEN SET &V2 = POINTSIZ\n           IF &STR(&V1) = ONLY THEN ISPEXEC TBSARG AFPFONTS\n                         ELSE +\n           IF &STR(&V1) = LOCATE THEN DO\n                                ISPEXEC TBTOP AFPFONTS\n                                ISPEXEC TBSCAN AFPFONTS ARGLIST(&V2)\n                                END\n           END\nGOTO DISPLAY\nEND\nIF &STR(&V1) = SORT THEN DO\n                   IF &STR(&V2) = NAME THEN SET &V2 = TYPEFACE\n                   IF &STR(&V2) = SIZE THEN SET &V2 = POINTSIZ\n                   IF &V2 = POINTSIZ THEN SET SORTTYPE = N\n                                     ELSE SET SORTTYPE = C\n                   ISPEXEC TBSORT AFPFONTS FIELDS(&V2.,&SORTTYPE.,A)\n                   GOTO DISPLAY\n                   END\nGOTO DISPLAY\nEXIT: +\n      ISPEXEC TBEND AFPFONTS\n      ISPEXEC LIBDEF FTABLE\n./       ADD   NAME=GENAIX\n ISREDIT MACRO (OBJNAME) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n/*-------------------------------------------------------------*/\n/* MAKE SURE A DATASET NAME WAS SPECIFIED                      */\n/*-------------------------------------------------------------*/\n IF &STR(&PARMS) \u00ac= THEN DO\n    SET ZEDSMSG = &STR(INVALID PARAMETERS)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO +\n    SYNTAX ONLY)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n ISREDIT PROCESS DEST\n SET DSNINFO = &STR(&OBJNAME)\n/*-------------------------------------------------------------*/\n/* MAKE SURE THE MODEL DATASET EXISTS                          */\n/*-------------------------------------------------------------*/\n IF &SYSDSN(&DSNINFO)= &STR(DATASET NOT FOUND) THEN DO\n    SET ZEDSMSG = &STR(DATASET NOT FOUND)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO SYNTAX)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n/*-------------------------------------------------------------*/\n/* ALLOC \"GENAIX\" AS AN OUTPUT FILE FOR LISTCAT                */\n/*-------------------------------------------------------------*/\nALLOC F(GENAIX) REUSE TRACKS SPACE(1 15) UNIT(WORK) -\n LRECL(125) BLOCK(23375) RECFM(V B A) DSORG(PS)\n/*-------------------------------------------------------------*/\n/* LIST THE CATALOGUE ENTRY FOR THE MODEL DATASET              */\n/*-------------------------------------------------------------*/\nLISTCAT ENT(&OBJNAME) OUTFILE(GENAIX) ALL\n/*-------------------------------------------------------------*/\n/* HANDLE END OF FILE ON THE CATALOGUE LISTING                 */\n/*-------------------------------------------------------------*/\nERROR                              /* CLIST ERROR ROUTINE       */ +\n  DO\n    SET RCODE = &LASTCC            /* SAVE RETURN CODE          */\n    IF &RCODE = 400 THEN           /* END OF FILE REACHED?      */ +\n      DO                           /* RC 400 (EOF) ROUTINE      */\n         CLOSFILE GENAIX           /* CLOSE THE FILE            */\n         SET &EOF = ON             /* SAVE EOF STATUS           */\n         RETURN                    /* RETURN AFTER GETFILE STMT */\n      END                          /* END RC 400 ROUTINE        */\n    ELSE                           /* HARD ERROR, IT'S NOT EOF  */ +\n      DO\n        WRITE ERROR IN CLIST PROCESSING, ERROR CODE = &RCODE\n        IF &DATATYPE(&RCODE) EQ NUM THEN /* CLIST ERROR         */ +\n          DO\n            ERROR OFF              /* CANCEL ERROR ACTION       */\n          END\n        EXIT CODE(16)              /* CLIST UNSUCCESSFUL        */\n      END\n  END                              /* END ERROR ROUTINE         */\n/*-------------------------------------------------------------*/\n/* LOOP THROUGH THE CATALOGUE LISTING PROCESSING SELECTED      */\n/* LINES OF INTEREST.                                          */\n/*-------------------------------------------------------------*/\nOPENFILE GENAIX INPUT\nSET &EOF = OFF\nSET &XTSW = OFF\nSET &RCI = 0\nSET &ISW = NO\nSET &DSW = NO\nDO WHILE &EOF \u00ac= ON\n  GETFILE GENAIX\n  IF &EOF = OFF THEN DO\n    SET &GENAIX = &GENAIX&STR(                                       )\n    SET &GENAIX = &GENAIX&STR(                                       )\n    SET &L = &LENGTH(&GENAIX)\n    SET &RCI = &RCI + 1\n    SET &UD  = &STR(&&GENAIX)\n/*-------------------------------------------------------------*/\n/* PICK UP DATA COMPONENT NAME                                 */\n/*-------------------------------------------------------------*/\n    IF &SUBSTR(9:14,&UD) = &STR(DATA--) && &DSW = NO THEN DO\n      SET &COMP=&STR(DATA)\n      SET &DN = &SUBSTR(18:62,&GENAIX)\n      SET &DSW = YES\n    END\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(CLUSTER--) THEN DO\n      SET &BN = &SUBSTR(18:62,&GENAIX)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP INDEX COMPONENT NAME                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(5:11,&UD) = &STR(INDEX -) && &ISW = NO THEN DO\n      SET &COMP=&STR(INDEX)\n      SET &IN = &SUBSTR(18:62,&GENAIX)\n      SET &ISW = YES\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP AIX NAME                                            */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(2:10,&UD) = &STR(AIX -----) THEN DO\n      SET &CN = &SUBSTR(18:&L,&GENAIX)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP KEYLENGTH, AVERAGE RECORD LENGTH, BUFFERSPACE       */\n/* AND DATA CONTROLINTERVALSZIE                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:15,&UD) = &STR(KEYLEN-) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &KL = &SUBSTR(28:32,&GENAIX)\n        SYSCALL BLANK KL\n        SET &ARL = &SUBSTR(55:61,&GENAIX)\n        SYSCALL BLANK ARL\n        SET &BFS = &SUBSTR(85:90,&GENAIX)\n        SYSCALL BLANK BFS\n        SET &DCI = &SUBSTR(115:119,&GENAIX)\n        SYSCALL BLANK DCI\n      END\n/*-------------------------------------------------------------*/\n/* PICK UP INDEX CONTROLINTERVALSIZE                           */\n/*-------------------------------------------------------------*/\n      ELSE DO\n        SET &ICI = &SUBSTR(115:119,&GENAIX)\n        SYSCALL BLANK ICI\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP NUMBER OF EXTENTS                                   */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(67:74,&GENAIX) = &STR(EXTENTS-) && &XTSW = OFF +\n    THEN DO\n       SET &XTSW = ON\n       IF &SUBSTR(89:89,&GENAIX) = &STR(-) THEN +\n          SET &XT = &SUBSTR(90:90,&GENAIX)\n       ELSE SET &XT = &SUBSTR(89:90,&GENAIX)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP RELATIVE KEY POSITION AND MAXIMUM RECORD LENGTH     */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:12,&UD) = &STR(RKP-) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &MRL = &SUBSTR(55:61,&GENAIX)\n        SYSCALL BLANK MRL\n      END\n    END\n    ELSE IF &SUBSTR(9:14,&UD) = &STR(AXRKP-) THEN DO\n      SET &RKP = &SUBSTR(28:32,&GENAIX)\n      SYSCALL BLANK RKP\n    END\n    ELSE IF &SUBSTR(9:16,&UD) = &STR(UPGRADE ) THEN DO\n      SET &UPG = &STR(UPGRADE)\n    END\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(NOUPGRADE ) THEN DO\n      SET &UPG = &STR(NOUPGRADE)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP SHROPTIONS, SPEED/RECOVERY, AIX TYPE,               */\n/* IMBED AND REPLICATE OPTIONS.                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:16,&UD) = &STR(SHROPTNS) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SHR = &SUBSTR(9:21,&GENAIX)\n        SET &SHR = &STR(SHAREOPTIONS)&SUBSTR(9:13,&SHR)\n        SET &SPD = &SUBSTR(25:32,&GENAIX)\n        SET &IDX = &SUBSTR(67:76,&GENAIX)\n        IF &IDX = &STR(INDEXED) THEN SET &TYPE = K\n        IF &IDX = &STR(NONINDEXED) THEN SET &TYPE = E\n        IF &IDX = &STR(NUMBERED) THEN SET &TYPE = R\n        SET &IMB = &SUBSTR(96:102,&GENAIX)\n        SET &RPL = &SUBSTR(110:119,&GENAIX)\n        IF &RPL = &STR(NOREPLICAT) +\n        THEN SET &RPL = &RPL&STR(E)\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP REUSE AND SPANNED OPTIONS                           */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(UNORDERED) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        IF &SYSINDEX(NOREUSE,&GENAIX,1) > 0 +\n        THEN SET &REU = &STR(NOREUSE)\n        ELSE SET &REU = &STR(REUSE)\n        SET &SPA = &SUBSTR(55:64,&GENAIX)\n        IF &SYSINDEX(NONUNIQKEY,&GENAIX,1) > 0 +\n        THEN SET &UNK = &STR(NONUNIQUEKEY)\n        ELSE SET &UNK = &STR(UNIQUEKEY)\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP CI FREESPACE PERCENT                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(REC-INSERT) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &FCI = &SUBSTR(59:61,&GENAIX)\n        SYSCALL BLANK FCI\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP CA FREESPACE PERCENT                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(REC-UPDATE) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &FCA = &SUBSTR(59:61,&GENAIX)\n        SYSCALL BLANK FCA\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP SPACE ALLOCATION TYPE                               */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(SPACE-TYPE) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SPT = &SUBSTR(25:32,&GENAIX)\n        SYSCALL BLANK SPT\n        IF &SPT = CYLINDER THEN SET &SPT = CYLINDERS\n        IF &SPT = TRACK    THEN SET &SPT = TRACKS\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP PRIMARY SPACE QUANTITY                              */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(SPACE-PRI) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SPP = &SUBSTR(28:32,&GENAIX)\n        SYSCALL BLANK SPP\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP SECONDARY SPACE QUANTITY                            */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(SPACE-SEC) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SPS = &SUBSTR(28:32,&GENAIX)\n        SYSCALL BLANK SPS\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP DATA AND INDEX COMPONENT VOLSERS                    */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:15,&UD) = &STR(VOLSER-) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &VD = &SUBSTR(27:32,&GENAIX)\n      END\n      ELSE DO\n        SET &VI = &SUBSTR(27:32,&GENAIX)\n      END\n    END\n  END\n  ELSE DO\n  END\nEND\nERROR OFF\n/*-------------------------------------------------------------*/\n/* CALCULATE TOTAL SPACE REQUIRED FOR AIX                      */\n/*-------------------------------------------------------------*/\nSET &SPP = &SPP + (&SPS * &XT)\nFREE  F(GENAIX)\n ISREDIT (DEST) = LINENUM .ZDEST\n SET OB = &STR((\n SET CB = )\n SET CT = &NRSTR(-)\n/*-------------------------------------------------------------*/\n/* GENERATE \"DEFINE AIX( -\"                                    */\n/*-------------------------------------------------------------*/\n SET LINE = &NRSTR(&STR(  DEFINE AIX)&OB&STR( )&CT )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n/*-------------------------------------------------------------*/\n/* GENERATE \"NAME(AIX-NAME) - \"                                */\n/*-------------------------------------------------------------*/\n SET &CCB = )\n SET &CCT = &NRSTR(-)\n SET &COB = &STR((\n SET &LINE = &STR(NAME)\n SET &LINE = &LINE&STR(&COB)\n SET &LINE = &LINE&CN\n SET &LINE = &LINE&CCB\n SET &LINE = &LINE&STR( )\n SET &LINE = &LINE&STR(&CCT)\n SET &LINE = &NRSTR(&STR(        )&LINE)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(        RELATE(&BN) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        RECORDSIZE(XX XX) - \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        RECORDSIZE(&ARL &MRL) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        SPACE-TYPE(PRI SEC) - \"                   */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &SPT(&SPP &SPS)       - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        (NON)INDEXED SHR(N N) (REUSE) - \"         */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &SHR &REU &UNK - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        (NON)SPANNED (NO)IMBED                    */\n/*                   (NO)REPLICATE UNIQUE - \"                  */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &IMB &RPL UNIQUE  - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        FREESPACE(N N) - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        FREESPACE(&FCI &FCA)   - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n IF &TYPE = K THEN DO\n/*-------------------------------------------------------------*/\n/* GENERATE \"        KEYS(N N) SPEED/RECOVERY - \"              */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        KEYS(&KL &RKP) &SPD   - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n END\n ELSE DO\n/*-------------------------------------------------------------*/\n/* GENERATE \"        SPEED/RECOVERY - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &SPD                  - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n END\n/*-------------------------------------------------------------*/\n/* GENERATE \"        BUFFERSPACE(NNNN) - \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        BUFFERSPACE(&BFS)     - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        ) -                 \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(         )&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        DATA(NAME(DATACOMPONENTNAME) - \"          */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(   DATA)&OB&STR(NAME)&OB&DN&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        CISZ(NNNN) - \"                            */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        CISZ(&DCI)        - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        VOLUME(VOLSER) - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(        VOLUME(&VD) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n IF &TYPE \u00ac= K THEN GOTO SKIPIDX\n/*-------------------------------------------------------------*/\n/* GENERATE \"        ) -                 \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(         )&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        INDEX(NAME(INDEXCOMPONENTNAME) - \"        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(  INDEX)&OB&STR(NAME)&OB&IN&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        CISZ(NNNN) - \"                            */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        CISZ(&ICI)        - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        VOLUME(VOLSER) - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(        VOLUME(&VI) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        )                   \"                     */\n/*-------------------------------------------------------------*/\n SKIPIDX:+\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(         )&CB&STR( ))\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\nEXIT CODE(0)\n/*-------------------------------------------------------------*/\n/* SUBPROCEDURE TO TRANSLATE DASHES TO BLANKS                  */\n/*-------------------------------------------------------------*/\nBLANK: PROC 1 &OLDSTRG\nSYSREF &OLDSTRG\nSET &NEWSTRG =\nSET &LSTRG = &LENGTH(&STR(&OLDSTRG))\nSET &CURR = 0\nDO UNTIL &CURR = &LSTRG\n  SET &CURR = &CURR + 1\n  IF &CURR > &LSTRG THEN GOTO CHGCHARX\n  SET &NEW = &SUBSTR(&CURR:&CURR,&OLDSTRG)\n  IF &SUBSTR(&CURR:&CURR,&STR(&OLDSTRG)) \u00ac= &STR(-) +\n  THEN GOTO CHGCHARC\n  SET &NEW = &STR( )\nCHGCHARC: SET &NEWSTRG = &STR(&NEWSTRG&NEW)\nEND\nCHGCHARX: SET &OLDSTRG = &NEWSTRG\nEND\n./       ADD   NAME=GENDEF\n ISREDIT MACRO (OBJNAME) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n/*-------------------------------------------------------------*/\n/* MAKE SURE A DATASET NAME WAS SPECIFIED                      */\n/*-------------------------------------------------------------*/\n IF &STR(&PARMS) \u00ac= THEN DO\n    SET ZEDSMSG = &STR(INVALID PARAMETERS)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO +\n    SYNTAX ONLY)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n ISREDIT PROCESS DEST\n SET DSNINFO = &STR(&OBJNAME)\n/*-------------------------------------------------------------*/\n/* MAKE SURE THE MODEL DATASET EXISTS                          */\n/*-------------------------------------------------------------*/\n IF &SYSDSN(&DSNINFO)= &STR(DATASET NOT FOUND) THEN DO\n    SET ZEDSMSG = &STR(DATASET NOT FOUND)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO SYNTAX)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n/*-------------------------------------------------------------*/\n/* ALLOC \"GENDEF\" AS AN OUTPUT FILE FOR LISTCAT                */\n/*-------------------------------------------------------------*/\nALLOC F(GENDEF) REUSE TRACKS SPACE(1 15) UNIT(WORK) -\n LRECL(125) BLOCK(23375) RECFM(V B A) DSORG(PS)\n/*-------------------------------------------------------------*/\n/* LIST THE CATALOGUE ENTRY FOR THE MODEL DATASET              */\n/*-------------------------------------------------------------*/\nLISTCAT ENT(&OBJNAME) OUTFILE(GENDEF) ALL\n/*-------------------------------------------------------------*/\n/* HANDLE END OF FILE ON THE CATALOGUE LISTING                 */\n/*-------------------------------------------------------------*/\nERROR                              /* CLIST ERROR ROUTINE       */ +\n  DO\n    SET RCODE = &LASTCC            /* SAVE RETURN CODE          */\n    IF &RCODE = 400 THEN           /* END OF FILE REACHED?      */ +\n      DO                           /* RC 400 (EOF) ROUTINE      */\n         CLOSFILE GENDEF           /* CLOSE THE FILE            */\n         SET &EOF = ON             /* SAVE EOF STATUS           */\n         RETURN                    /* RETURN AFTER GETFILE STMT */\n      END                          /* END RC 400 ROUTINE        */\n    ELSE                           /* HARD ERROR, IT'S NOT EOF  */ +\n      DO\n        WRITE ERROR IN CLIST PROCESSING, ERROR CODE = &RCODE\n        IF &DATATYPE(&RCODE) EQ NUM THEN /* CLIST ERROR         */ +\n          DO\n            ERROR OFF              /* CANCEL ERROR ACTION       */\n          END\n        EXIT CODE(16)              /* CLIST UNSUCCESSFUL        */\n      END\n  END                              /* END ERROR ROUTINE         */\n/*-------------------------------------------------------------*/\n/* LOOP THROUGH THE CATALOGUE LISTING PROCESSING SELECTED      */\n/* LINES OF INTEREST.                                          */\n/*-------------------------------------------------------------*/\nOPENFILE GENDEF INPUT\nSET &EOF = OFF\nSET &XTSW = OFF\nSET &RCI = 0\nDO WHILE &EOF \u00ac= ON\n  GETFILE GENDEF\n  IF &EOF = OFF THEN DO\n    SET &GENDEF = &GENDEF&STR(                                       )\n    SET &GENDEF = &GENDEF&STR(                                       )\n    SET &L = &LENGTH(&GENDEF)\n    SET &RCI = &RCI + 1\n    SET &UD  = &STR(&&GENDEF)\n/*-------------------------------------------------------------*/\n/* PICK UP DATA COMPONENT NAME                                 */\n/*-------------------------------------------------------------*/\n    IF &SUBSTR(9:14,&UD) = &STR(DATA--) THEN DO\n      SET &COMP=&STR(DATA)\n      SET &DN = &SUBSTR(18:62,&GENDEF)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP INDEX COMPONENT NAME                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(5:11,&UD) = &STR(INDEX -) THEN DO\n      SET &COMP=&STR(INDEX)\n      SET &IN = &SUBSTR(18:62,&GENDEF)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP CLUSTER NAME                                        */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(2:10,&UD) = &STR(CLUSTER -) THEN DO\n      SET &CN = &SUBSTR(18:&L,&GENDEF)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP KEYLENGTH, AVERAGE RECORD LENGTH, BUFFERSPACE       */\n/* AND DATA CONTROLINTERVALSZIE                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:15,&UD) = &STR(KEYLEN-) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &KL = &SUBSTR(28:32,&GENDEF)\n        SYSCALL BLANK KL\n        SET &ARL = &SUBSTR(55:61,&GENDEF)\n        SYSCALL BLANK ARL\n        SET &BFS = &SUBSTR(85:90,&GENDEF)\n        SYSCALL BLANK BFS\n        SET &DCI = &SUBSTR(115:119,&GENDEF)\n        SYSCALL BLANK DCI\n      END\n/*-------------------------------------------------------------*/\n/* PICK UP INDEX CONTROLINTERVALSIZE                           */\n/*-------------------------------------------------------------*/\n      ELSE DO\n        SET &ICI = &SUBSTR(115:119,&GENDEF)\n        SYSCALL BLANK ICI\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP NUMBER OF EXTENTS                                   */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(67:74,&GENDEF) = &STR(EXTENTS-) && &XTSW = OFF +\n    THEN DO\n       SET &XTSW = ON\n       IF &SUBSTR(88:88,&GENDEF) \u00ac= &STR(-) THEN +\n          SET &XT = &SUBSTR(88:90,&GENDEF)\n       ELSE IF &SUBSTR(89:89,&GENDEF) = &STR(-) THEN +\n          SET &XT = &SUBSTR(90:90,&GENDEF)\n       ELSE SET &XT = &SUBSTR(89:90,&GENDEF)\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP RELATIVE KEY POSITION AND MAXIMUM RECORD LENGTH     */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:12,&UD) = &STR(RKP-) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &RKP = &SUBSTR(28:32,&GENDEF)\n        SYSCALL BLANK RKP\n        SET &MRL = &SUBSTR(55:61,&GENDEF)\n        SYSCALL BLANK MRL\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP SHROPTIONS, SPEED/RECOVERY, CLUSTER TYPE,           */\n/* IMBED AND REPLICATE OPTIONS.                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:16,&UD) = &STR(SHROPTNS) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SHR = &SUBSTR(9:21,&GENDEF)\n        SET &SHR = &STR(SHAREOPTIONS)&SUBSTR(9:13,&SHR)\n        SET &SPD = &SUBSTR(25:32,&GENDEF)\n        SET &IDX = &SUBSTR(67:76,&GENDEF)\n        IF &IDX = &STR(INDEXED) THEN SET &TYPE = K\n        IF &IDX = &STR(NONINDEXED) THEN SET &TYPE = E\n        IF &IDX = &STR(NUMBERED) THEN SET &TYPE = R\n        SET &IMB = &SUBSTR(96:102,&GENDEF)\n        SET &RPL = &SUBSTR(110:119,&GENDEF)\n        IF &RPL = &STR(NOREPLICAT) +\n        THEN SET &RPL = &RPL&STR(E)\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP REUSE AND SPANNED OPTIONS                           */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(UNORDERED) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        IF &SYSINDEX(NOREUSE,&GENDEF,1) > 0 +\n        THEN SET &REU = &STR(NOREUSE)\n        ELSE SET &REU = &STR(REUSE)\n        IF &SYSINDEX(NONSPANNED,&GENDEF,1) > 0 +\n        THEN SET &REU = &STR(NONSPANNED)\n        ELSE SET &REU = &STR(SPANNED)\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP CI FREESPACE PERCENT                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(REC-INSERT) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &FCI = &SUBSTR(59:61,&GENDEF)\n        SYSCALL BLANK FCI\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP CA FREESPACE PERCENT                                */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(REC-UPDATE) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &FCA = &SUBSTR(59:61,&GENDEF)\n        SYSCALL BLANK FCA\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP SPACE ALLOCATION TYPE                               */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:18,&UD) = &STR(SPACE-TYPE) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SPT = &SUBSTR(25:32,&GENDEF)\n        SYSCALL BLANK SPT\n        IF &SPT = CYLINDER THEN SET &SPT = CYLINDERS\n        IF &SPT = TRACK    THEN SET &SPT = TRACKS\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP PRIMARY SPACE QUANTITY                              */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(SPACE-PRI) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SPP = &SUBSTR(28:32,&GENDEF)\n        SYSCALL BLANK SPP\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP SECONDARY SPACE QUANTITY                            */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:17,&UD) = &STR(SPACE-SEC) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &SPS = &SUBSTR(28:32,&GENDEF)\n        SYSCALL BLANK SPS\n      END\n    END\n/*-------------------------------------------------------------*/\n/* PICK UP DATA AND INDEX COMPONENT VOLSERS                    */\n/*-------------------------------------------------------------*/\n    ELSE IF &SUBSTR(9:15,&UD) = &STR(VOLSER-) THEN DO\n      IF &COMP = &STR(DATA) THEN DO\n        SET &VD = &SUBSTR(27:32,&GENDEF)\n      END\n      ELSE DO\n        SET &VI = &SUBSTR(27:32,&GENDEF)\n      END\n    END\n  END\n  ELSE DO\n  END\nEND\nERROR OFF\n/*-------------------------------------------------------------*/\n/* CALCULATE TOTAL SPACE REQUIRED FOR CLUSTER                  */\n/*-------------------------------------------------------------*/\nSET &SPP = &SPP + (&SPS * &XT)\nFREE  F(GENDEF)\n ISREDIT (DEST) = LINENUM .ZDEST\n SET OB = &STR((\n SET CB = )\n SET CT = &NRSTR(-)\n/*-------------------------------------------------------------*/\n/* GENERATE \"DEFINE CLUSTER( -\"                                */\n/*-------------------------------------------------------------*/\n SET LINE = &NRSTR(&STR(  DEFINE CLUSTER)&OB&STR( )&CT )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n/*-------------------------------------------------------------*/\n/* GENERATE \"NAME(CLUSTER-NAME) - \"                            */\n/*-------------------------------------------------------------*/\n SET &CCB = )\n SET &CCT = &NRSTR(-)\n SET &COB = &STR((\n SET &LINE = &STR(NAME)\n SET &LINE = &LINE&STR(&COB)\n SET &LINE = &LINE&CN\n SET &LINE = &LINE&CCB\n SET &LINE = &LINE&STR( )\n SET &LINE = &LINE&STR(&CCT)\n SET &LINE = &NRSTR(&STR(        )&LINE)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        RECORDSIZE(XX XX) - \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        RECORDSIZE(&ARL &MRL) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        SPACE-TYPE(PRI SEC) - \"                   */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &SPT(&SPP &SPS)       - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        (NON)INDEXED SHR(N N) (REUSE) - \"         */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &IDX &SHR &REU   - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        (NON)SPANNED (NO)IMBED                    */\n/*                   (NO)REPLICATE UNIQUE - \"                  */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &SPA &IMB &RPL UNIQUE  - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        FREESPACE(N N) - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        FREESPACE(&FCI &FCA)   - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n IF &TYPE = K THEN DO\n/*-------------------------------------------------------------*/\n/* GENERATE \"        KEYS(N N) SPEED/RECOVERY - \"              */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        KEYS(&KL &RKP) &SPD   - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n END\n ELSE DO\n/*-------------------------------------------------------------*/\n/* GENERATE \"        SPEED/RECOVERY - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        &SPD                  - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n END\n/*-------------------------------------------------------------*/\n/* GENERATE \"        BUFFERSPACE(NNNN) - \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        BUFFERSPACE(&BFS)     - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        ) -                 \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(         )&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        DATA(NAME(DATACOMPONENTNAME) - \"          */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(   DATA)&OB&STR(NAME)&OB&DN&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        CISZ(NNNN) - \"                            */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        CISZ(&DCI)        - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        VOLUME(VOLSER) - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(        VOLUME(&VD) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n IF &TYPE \u00ac= K THEN GOTO SKIPIDX\n/*-------------------------------------------------------------*/\n/* GENERATE \"        ) -                 \"                     */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(         )&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        INDEX(NAME(INDEXCOMPONENTNAME) - \"        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(  INDEX)&OB&STR(NAME)&OB&IN&CB&STR( )&CT)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        CISZ(NNNN) - \"                            */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &STR(        CISZ(&ICI)        - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        VOLUME(VOLSER) - \"                        */\n/*-------------------------------------------------------------*/\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(        VOLUME(&VI) - )\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n/*-------------------------------------------------------------*/\n/* GENERATE \"        )                   \"                     */\n/*-------------------------------------------------------------*/\n SKIPIDX:+\n SET DEST = &DEST + 1\n SET LINE = &NRSTR(&STR(         )&CB&STR( ))\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\nEXIT CODE(0)\n/*-------------------------------------------------------------*/\n/* SUBPROCEDURE TO TRANSLATE DASHES TO BLANKS                  */\n/*-------------------------------------------------------------*/\nBLANK: PROC 1 &OLDSTRG\nSYSREF &OLDSTRG\nSET &NEWSTRG =\nSET &LSTRG = &LENGTH(&STR(&OLDSTRG))\nSET &CURR = 0\nDO UNTIL &CURR = &LSTRG\n  SET &CURR = &CURR + 1\n  IF &CURR > &LSTRG THEN GOTO CHGCHARX\n  SET &NEW = &SUBSTR(&CURR:&CURR,&OLDSTRG)\n  IF &SUBSTR(&CURR:&CURR,&STR(&OLDSTRG)) \u00ac= &STR(-) +\n  THEN GOTO CHGCHARC\n  SET &NEW = &STR( )\nCHGCHARC: SET &NEWSTRG = &STR(&NEWSTRG&NEW)\nEND\nCHGCHARX: SET &OLDSTRG = &NEWSTRG\nEND\n./       ADD   NAME=GENJCL\n ISREDIT MACRO (DSN TSO PARMS) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n IF &STR(&PARMS) \u00ac= THEN DO\n    SET ZEDSMSG = &STR(INVALID PARAMETERS)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO +\n    SYNTAX ONLY)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n IF &STR(&TSO) = OR &STR(&TSO) = TSO THEN\n ELSE DO\n    SET ZEDSMSG = &STR(INVALID PARAMETER)\n    SET ZEDLMSG = &STR(THE ONLY VALID PARAMETER FOR THIS +\n    COMMAND IS \"TSO\")\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n ISREDIT PROCESS DEST\n IF &STR(&DSN) = THEN DO\n    SET ZEDSMSG = &STR(SPECIFY A DATASET)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO SYNTAX)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n SET DSNINFO = &STR(&DSN)\n IF &SYSDSN(&DSNINFO) = &STR(DATASET NOT FOUND) THEN DO\n    WRITE &SYSDSN(&DSNINFO)\n    SET ZEDSMSG = &STR(DATASET NOT FOUND)\n    SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO SYNTAX)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n END\n IF &SUBSTR(1:1,&DSN) \u00ac= &STR(') THEN DO\n    SET DSN = &STR(&SYSPREF..&DSN)\n END\n ELSE DO\n    SET &DSN = &SUBSTR(2:&LENGTH(&DSN)-1,&DSN)\n END\n LISTDSI &DSNINFO  NORECALL DIRECTORY\n IF &SYSUNITS = &STR(TRACK) THEN SET &ALCTYPE = &STR(TRK)\n ELSE IF &SYSUNITS = &STR(CYLINDER) THEN SET &ALCTYPE = &STR(CYL)\n ELSE SET &ALCTYPE = &SYSBLKSIZE\n IF &STR(&TSO) = TSO THEN GOTO FLOWTSO\nFLOWIT: +\n IF &SUBSTR(1:1,&SYSVOLUME) = &STR(D) +\n THEN SET &SYSUNIT = &STR(DEVL)\n IF &SUBSTR(1:3,&SYSVOLUME) = &STR(WOR) +\n THEN SET &SYSUNIT = &STR(WORK)\n IF &SUBSTR(1:1,&SYSVOLUME) = &STR(P) +\n THEN SET &SYSUNIT = &STR(PROD)\n IF &STR(&SYSADIRBLK) \u00ac= THEN SET DIR = &STR(,&SYSADIRBLK)\n ELSE SET DIR =\n ISREDIT (DEST) = LINENUM .ZDEST\n SET LINE = &STR(//GENJCL  DD  DSN=&DSN,)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(//            DISP=(NEW,CATLG,DELETE),)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(//            UNIT=&SYSUNIT,)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(//            DCB=(LRECL=&SYSLRECL,+\n BLKSIZE=&SYSBLKSIZE,RECFM=&SYSRECFM,DSORG=&SYSDSORG),)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n IF &ALCTYPE = &STR(CYL) THEN DO\n    SET &SYSPRIMARY = &SYSPRIMARY * 15\n    SET &SYSSECONDS = &SYSSECONDS * 15\n    SET &ALCTYPE    = &STR(TRK)\n END\n SET LINE = &STR(//            SPACE=(&ALCTYPE,(&SYSPRIMARY,+\n &SYSSECONDS.&DIR),RLSE))\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n EXIT CODE(0)\nFLOWTSO: +\n IF &LENGTH(&SYSRECFM) = 1 THEN SET &RFM = &SYSRECFM\n ELSE IF &LENGTH(&SYSRECFM) = 2 THEN DO\n    SET &RFM = &SUBSTR(1:1,&SYSRECFM)&STR( )&SUBSTR(2:2,&SYSRECFM)\n END\n ELSE IF &LENGTH(&SYSRECFM) = 3 THEN DO\n    SET &RFM = &SUBSTR(1:1,&SYSRECFM)&STR( )&SUBSTR(2:2,&SYSRECFM)\n    SET &RFM = &RFM&STR( )&SUBSTR(3:3,&SYSRECFM)\n END\n IF &SYSADIRBLK = THEN SET DIR =\n ELSE SET DIR = &STR(DIR(&SYSADIRBLK))\n ISREDIT (DEST) = LINENUM .ZDEST\n SET LINE = &STR(ALLOC DA('&DSN') NEW CATALOG +)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(        UNIT(&SYSUNIT) LRECL(&SYSLRECL) +)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(        BLKSIZE(&SYSBLKSIZE) +)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(        RECFM(&RFM) &DIR DSORG(&SYSDSORG) +)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n SET DEST = &DEST + 1\n SET LINE = &STR(        SPACE(&SYSPRIMARY &SYSSECONDS) TRACK)\n ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n EXIT CODE(0)\n./       ADD   NAME=GENPRINT\nPROC 0 DSN() GPCLASS(A) GPDEST() NOBRO GPCOPIES GPFOLD DEOPT(P) NOTELL -\nNODEL DEBUG EDIT GPVOL() CC() NOED\n IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST PROMPT NOFLUSH\n    CONTROL NOMSG\n    IF &GPVOL = THEN ALLOC F(DD1) DS(&DSN) SHR REUSE\n                ELSE ALLOC F(DD1) DS(&DSN) SHR VOL(&GPVOL) REUSE\n    SET &GNPDSN = &DSN\n    LISTDSI &DSN\n    IF &SYSDSORG = PO THEN GOTO FREEIT\n    OPENFILE DD1\nERROR DO\n    IF &NOTELL = NOTELL THEN GOTO EXIT4\n    WRITE &DSN IS EMPTY\n    GOTO EXIT4\n    END\n    GETFILE DD1\n    CLOSFILE DD1\nERROR OFF\nFREEIT:  +\n    FREE F(DD1)\n    CONTROL MSG\n    IF &CC = X THEN SET &CC =\n    IF &EDIT = EDIT THEN GOTO EDITIT\n    IF &NOBRO = NOBRO THEN GOTO DISP\n     IF &GPVOL = THEN ISPEXEC BROWSE DATASET(&DSN)\n                 ELSE ISPEXEC BROWSE DATASET(&DSN) VOLUME(&GPVOL)\n     SET &GNPOPT = &DEOPT\nDISP: ISPEXEC DISPLAY PANEL(GENPRINT)\n     IF  &LASTCC  = 0 +\n     THEN DO\n           IF &GNPOPT = P THEN GOTO PRINT\n           IF &GNPOPT = B THEN GOTO BROWSE\n           IF &GNPOPT = D THEN GOTO DELETE\n           IF &GNPOPT = K THEN GOTO EXIT\n           IF &GNPOPT = E THEN GOTO EDITIT\n           IF &GNPOPT = R THEN GOTO RENAMEIT\n           GOTO DISP\n     END\n     ELSE GOTO EXIT\n     GOTO DISP\nPRINT: +\n     IF &GPCLASS \u00ac= THEN SET &POSOC = &GPCLASS\n     IF &GPDEST  \u00ac= THEN DO\n                         SET &PODEST = &GPDEST\n                         ISPEXEC VPUT PODEST\n                         END\n     IF &GPCOPIES \u00ac= THEN SET &POCOPY = &GPCOPIES\n     IF &GPFOLD \u00ac= THEN SET &FOLD = &GPFOLD\n     SET &HEAD = NO\n     SET &PODSN = &DSN\n     SET &POCC = &CC\n     ISPEXEC VPUT (DSN)\n     ISPEXEC VPUT (PODSN) PROFILE\n     ISPEXEC VGET (POSOC POOUTD) PROFILE\n     ISPEXEC SELECT PANEL(PRINTOFF)\n     ISPEXEC VPUT (HEAD PODSN POSOC POCOPY FOLD POCC POOUTD) PROFILE\n     GOTO DISP\nBROWSE: +\n     IF &GPVOL = THEN ISPEXEC BROWSE DATASET(&DSN)\n                 ELSE ISPEXEC BROWSE DATASET(&DSN)  VOLUME(&GPVOL)\n     GOTO DISP\nRENAMEIT: +\n     IF &NODEL = NODEL THEN GOTO DISP\n     RENAME &DSN &ZGPRDSN\n     ISPEXEC VPUT ZGPRDSN PROFILE  /* SAVE THE DSN FOR FUTURE USE */\n     SET &SHORT = RENAMED\n     SET &LONG = &STR(DATASET &DSN RENAMED TO &ZGPRDSN)\n     SET &DSN = &ZGPRDSN\n     ISPEXEC VPUT (DSN SHORT LONG) PROFILE\n     ISPEXEC  SETMSG MSG(AOST010)\n     GOTO DISP\nEDITIT: +\n     IF &NOED = NOED THEN GOTO DISP\n     IF &GPVOL = THEN ISPEXEC EDIT DATASET(&DSN)\n                 ELSE ISPEXEC EDIT DATASET(&DSN) VOLUME(&GPVOL)\n     GOTO DISP\nDELETE: +\n     IF &NODEL = NODEL THEN GOTO DISP\n     CONTROL NOMSG\n     DELETE &DSN\nEXIT: +\n      CONTROL NOMSG\n      FREE F(DD1)\n      EXIT\nEXIT4: +\n      ERROR OFF\n      CONTROL NOMSG\n      FREE F(DD1)\n      EXIT CODE(4)\nBADTYPE: +\n    WRITE *** DATE DSORG INVALID FOR PRINT\n    GOTO EXIT4\nERROR: ERROR OFF\n       CLOSFILE DD1\n       FREE F(DD1)\n./       ADD   NAME=GENSUB\nPROC 1 DSN\n\n/* ================================================================= */\n/* THIS CLIST IS A GENERALIZED SUBMIT CLIST WHICH DISPLAYS ISPF      */\n/* PANEL GENSUB AND ALLOWS THE USER TO CANCEL THE SUBMIT; DO THE     */\n/* SUBMIT; EDIT THE JOB PRIOR TO SUBMIT; OR BROWSE THE JOB PRIOR     */\n/* TO SUBMIT.                                                        */\n/* ================================================================= */\n\n\nSET &DSNX = &DSN\nISPEXEC VPUT DSNX\nISPEXEC SELECT PGM(FIXUPDSN) PARM(DSNX)\nISPEXEC VGET DSNX\n\nALLOC F(GENSUB) REUSE DA('&DSNX') SHR\nISPEXEC SELECT PGM(RETDSNVL) PARM(GENSUB)\nISPEXEC VGET (DSN VOL)\nFREE F(GENSUB)\n\nDISPLAY: +\nISPEXEC DISPLAY PANEL(GENSUB)\n\n     IF &LASTCC NE 0 THEN GOTO EXIT\n\nIF &SOPT = C THEN GOTO EXIT\n\nIF &SOPT = S THEN DO\n                    SUBMIT '&DSNX'\n                    GOTO EXIT\n                    END\n\nIF &SOPT = E THEN ISPEXEC EDIT DATASET('&DSNX') VOLUME(&VOL)\n\nIF &SOPT = B THEN ISPEXEC BROWSE DATASET('&DSNX') VOLUME(&VOL)\n\nGOTO DISPLAY    /* ASK THE QUESTION AGAIN */\n\nEXIT: +\n      END\n./       ADD   NAME=INDEX\n/* JIMLANE 09/02/87 11:28:57 JIMLANE.CLIST(INDEX)\nISREDIT MACRO (MODE,DEBUG)\nCONTROL NOFLUSH\nSET CAPS = NO\nIF &DEBUG \u00ac= THEN +\n IF &SUBSTR(1,&DEBUG) = D THEN CONTROL L C S FLUSH\nIF &MODE \u00ac= THEN DO\n IF &SUBSTR(1,&MODE) = C THEN SET CAPS = YES\n IF &SUBSTR(1,&MODE) = R THEN DO\n  SET &CS =\n  SET &LS =\n  ISPEXEC VPUT (LS,CS)\n  EXIT CODE(0)\n END\nEND\nISPEXEC VGET (LS,CS)\nIF &CS =  THEN DO\n ISREDIT (LS,CS) = CURSOR\n IF &CS = 0 THEN DO\n  ISREDIT LINE_BEFORE .ZCSR = MSGLINE +\n     'CURSOR POSITION OUTSIDE OF DATA'\n  EXIT CODE(4)\n END\n ISREDIT FIND ' ' PREV\n ISREDIT FIND P'@'\n ISREDIT (LS,CS) = CURSOR\n ISPEXEC VPUT (LS,CS)\nEND\nELSE DO\n ISREDIT FIND ' '\n ISREDIT FIND P'\u00ac' PREV\n ISREDIT (LE,CE) = CURSOR\n IF &LE \u00ac= &LS THEN DO\n  ISREDIT LINE_BEFORE .ZCSR = MSGLINE +\n     'INDEX ITEM MUST BE ON ONE LINE'\n  EXIT CODE(4)\n END\n IF &CE < &CS THEN DO\n  ISREDIT LINE_BEFORE .ZCSR = MSGLINE +\n     'INDEX ITEM START MUST BE MARKED BEFORE END'\n  SET CS =\n  ISPEXEC VPUT (CS)\n END\n ELSE DO\n  ISREDIT (ILIN) = LINE .ZCSR\n  SET &ZTR = &SUBSTR(&CS:&CE,&NRSTR(&ILIN))\n  ISREDIT FIND ':' PREV 1\n  SET RC = &LASTCC\n  ISREDIT (LC) = LINENUM .ZCSR\n  SET &LC = &LC + 1\n  ISREDIT LINE_AFTER .ZCSR = ':I1.&ZTR'\n  ISREDIT LABEL (LC) = .IPTR\n  IF &CAPS = NO THEN +\n   ISREDIT CHANGE P'>' P'<' ALL .IPTR .IPTR\n  ISREDIT LINE_AFTER .ZCSR = NOTELINE 'INDEX MARK &ZTR'\n  SET DONE = NO\n  DO WHILE &DONE = NO\n   ISREDIT FIND ':P' NEXT\n   IF &LASTCC \u00ac= 0 THEN SET &DONE = YES\n   IF &DONE = NO THEN DO\n    ISREDIT FIND '&ZTR' NEXT\n    SET &RC = &LASTCC\n    IF &RC = 0 THEN DO\n     ISREDIT FIND ':P' PREV\n     ISREDIT (LPAR) = CURSOR\n     ISREDIT LINE_BEFORE .ZCSR = ':I1.&ZTR'\n     ISREDIT LABEL (LPAR) = .IPTR\n     ISREDIT LINE_BEFORE .ZCSR = NOTELINE 'INDEX MARK &ZTR'\n     IF &CAPS = NO THEN +\n      ISREDIT CHANGE P'>' P'<' ALL .IPTR .IPTR\n     SET &LPAR = &LPAR + 2\n     ISREDIT CURSOR = (LPAR)\n    END\n    ELSE SET &DONE = YES\n   END\n  END\n  ISREDIT RESET CHG\n  ISREDIT CURSOR = (LE,CE)\n  SET CS =\n  ISPEXEC VPUT (CS)\n END\nEND\nEXIT CODE(0)\n./       ADD   NAME=JOBCARD\nISREDIT MACRO\nISREDIT (DSN)  = DATASET\nISREDIT (MBR)  = MEMBER\nIF &MBR \u00ac= &Z THEN SET DSN = &STR(&DSN.(&MBR))\nSET &CLASS = &STR(A)\nIF &SYSUID = &STR(LANEJ)     THEN SET &CLASS = &STR(Z)\nIF &SYSUID = &STR(COPPW)     THEN SET &CLASS = &STR(Z)\nIF &SYSUID = &STR(DORDEAN)   THEN SET &CLASS = &STR(Z)\nIF &SYSUID = &STR(TITKAIS)   THEN SET &CLASS = &STR(Z)\nIF &SYSUID = &STR(CHOWA)     THEN SET &CLASS = &STR(Z)\nIF &SYSUID = &STR(DB2STAT)   THEN SET &CLASS = &STR(Z)\nIF &SYSUID = &STR(DB2STAT)   THEN +\nISREDIT LINE_AFTER 0      = +\n'//PROCLIB DD DSN=INT.DIST.PROCLIB,DISP=SHR                       '\nISREDIT LINE_AFTER 0      = +\n'//*-------------------------------------------------------------*'\nISREDIT LINE_AFTER 0      = +\n'//*   THIS JCL IS IN:        &DSN                               *'\nISREDIT LINE_AFTER 0      = +\n'//*-------------------------------------------------------------*'\nISREDIT LINE_AFTER 0        = +\n'//*FOURUP   OUTPUT PAGEDEF=U46D,FORMDEF=U46D DEFAULT=YES  '\nISREDIT LINE_AFTER 0        = +\n'//*TWOUP    OUTPUT PAGEDEF=A26D,FORMDEF=A26D DEFAULT=YES  '\nISREDIT LINE_AFTER 0        = +\n'//*PORTRAIT OUTPUT PAGEDEF=A16D,FORMDEF=A16D DEFAULT=YES  '\nIF &SYSUID = LANEJ THEN +\nISREDIT LINE_AFTER 0      = +\n'//*JOBLIB DD DSN=TECTSG.ISPFJCL.LOAD,DISP=SHR '\nISREDIT LINE_AFTER 0 =+\n'//         MSGLEVEL=(1,1),MSGCLASS=X,CLASS=&CLASS  '\nIF &SYSUID = LANEJ THEN +\nISREDIT LINE_AFTER 0 =+\n'//*        USER=IBMUSER,                  '\nISREDIT LINE_AFTER 0 =+\n'//&SYSUID     JOB &SYSUID,&MBR,NOTIFY=&SYSUID.,REGION=6M,  '\nEXIT\nEXIT\n./       ADD   NAME=LC\nPROC 1 &OBJNAME\nALLOC F(CATOUT) REUSE TRACKS SPACE(1 15) UNIT(WORK) -\n LRECL(125) BLOCK(23375) RECFM(V B A) DSORG(PS)\nISPEXEC LMINIT DATAID(CDSN) DDNAME(CATOUT)\nIF &SUBSTR(2:5,&OBJNAME) = &STR(UCAT) THEN +\nLISTCAT ENT(&OBJNAME) CAT(&OBJNAME) OUTFILE(CATOUT) ALL\nELSE LISTCAT ENT(&OBJNAME) OUTFILE(CATOUT) ALL\nISPEXEC BROWSE DATAID(&CDSN) PANEL(CATBRO)\nEND\n./       ADD   NAME=MI\nISREDIT MACRO\nCONTROL NOCAPS\nISPEXEC DISPLAY PANEL(MIPANEL)\nIF &LASTCC = 0 THEN DO\n   SET &SCC = 0\n   DO WHILE (&SCC = 0)\n      ISREDIT SEEK '&MIID'   NEXT\n      SET &SCC = &LASTCC\n      IF &SCC = 0 THEN DO\n         IF &MIDIR = A | &MIDIR = AFTER THEN +\n         ISREDIT LINE_AFTER .ZCSR  = '&MILINE'\n         ELSE ISREDIT LINE_BEFORE .ZCSR  = '&MILINE'\n      END\n   END\nEND\nISREDIT TOP\nEND\n./       ADD   NAME=NUMS\nISREDIT MACRO (START,COUNT,LEFT,BY,DIGITS) NOPROCESS\nISPEXEC CONTROL ERRORS RETURN\nCONTROL ASIS\nISREDIT PROCESS DEST\nISREDIT (FR) = LINENUM .ZDEST\nIF &BY = &Z THEN SET &BY = 1\nSET &NUMBER = &START + (&COUNT * &BY) - 1\nIF &DIGITS = &Z THEN SET &DIGITS = &LENGTH(&NUMBER)\nAGAIN:+\nSET &L = &LENGTH(&NUMBER)\nIF &L < &DIGITS THEN DO\n   SET &P = &DIGITS - &L\n   IF &P = 1 THEN SET &N = &STR(0&NUMBER)\n   IF &P = 2 THEN SET &N = &STR(00&NUMBER)\n   IF &P = 3 THEN SET &N = &STR(000&NUMBER)\nEND\nELSE SET &N = &STR(&NUMBER)\nISREDIT LINE_AFTER .ZDEST = <&LEFT &N>\nSET &NUMBER = &NUMBER - &BY\nSET &COUNT = &COUNT - 1\nIF &COUNT > 0 THEN GOTO AGAIN\nEXIT CODE(0)\n./       ADD   NAME=OGL\nISREDIT MACRO\nISREDIT (CHG) = DATA_CHANGED\nIF &STR(&CHG) = &STR(YES) THEN ISREDIT SAVE\nISREDIT (CURDSN) = DATASET\nISREDIT (CURMEM) = MEMBER\nIF &CURMEM \u00ac= &Z THEN SET &DSN = &CURDSN.(&CURMEM.)\nELSE SET &DSN = &CURDSN\nALLOC F(SYSIN) DA('&DSN') SHR REUSE\nIF &SYSDSN(&CURMEM..LIST) \u00ac= &STR(OK) +\nTHEN ALLOC DA(&CURMEM..LIST) NEW CATALOG +\n             UNIT(DEVL) LRECL(133) +\n             BLKSIZE(0)    +\n             F(SYSPRINT) REUSE +\n             RECFM(F B A)  DSORG(PS) +\n             SPACE(1 15) TRACK\nELSE ALLOC DA(&CURMEM..LIST) FI(SYSPRINT) SHR REUSE\nALLOC F(SYMBOLIC) DUMMY REUSE\nALLOC F(SEGDD)    DA('SYS1.PSEGLIB') SHR REU\nALLOC F(FONTDD)   DA('SYS1.FONTLIBB') SHR REU\nALLOC F(OVRLIB)   DA('SYS1.OVERLIB') SHR REU\nOUTDES OGL FORMDEF(OGL) REU\nALLOC F(SAMPLE) SYS(F) OUTDES(OGL) REU\nCALL 'SYS1.LINKLIB(DZIOVRLY)'\nFREE F(SAMPLE)\n%GENPRINT DSN(&CURMEM..LIST) NODEL DEOPT(K)\nFREE F(SYSIN)\nEND\n./       ADD   NAME=PPFA\nISREDIT MACRO\nISREDIT (CHG) = DATA_CHANGED\nIF &STR(&CHG) = &STR(YES) THEN ISREDIT SAVE\nISREDIT (CURDSN) = DATASET\nISREDIT (CURMEM) = MEMBER\nIF &CURMEM \u00ac= &Z THEN SET &DSN = &CURDSN.(&CURMEM.)\nELSE SET &DSN = &CURDSN\nALLOC F(SYSIN) DA('&DSN') SHR REUSE\nIF &SYSDSN(&CURMEM..LIST) \u00ac= &STR(OK) +\nTHEN ALLOC DA(&CURMEM..LIST) NEW CATALOG +\n             UNIT(DEVL) LRECL(133) +\n             BLKSIZE(0)    +\n             F(SYSPRINT) REUSE +\n             RECFM(F B A)  DSORG(PS) +\n             SPACE(1 15) TRACK\nELSE ALLOC DA(&CURMEM..LIST) FI(SYSPRINT) SHR REUSE\nALLOC F(FORMLIB) DA('SYS1.FDEFLIB') SHR REUSE\nALLOC F(PAGELIB) DA('SYS1.PDEFLIB') SHR REUSE\nCALL 'SYS1.LINKLIB(AKQPPFA)'\n%GENPRINT DSN(&CURMEM..LIST) NODEL DEOPT(K)\nFREE F(SYSIN)\nEND\n./       ADD   NAME=PRINTOFF\nPROC 0 A() B() C() D()\n\nCONTROL NOMSG PROMPT\n\n         ISPEXEC  VGET (PODSN POSOC PODEST POOUTD)\n         ISPEXEC  VPUT (POSOC PODEST) PROFILE\n\n         SET &A = &STR(PRINTDS)\n         SET &B = &STR(DA(&PODSN))\n         SET &C = CLASS(&POSOC)\n         SET &D = OUTDES(&POOUTD)\n         IF &PODEST \u00ac= THEN SET &E = DEST(&PODEST)\n\n/* ================================================================= */\n/* EXECUTE THE PRINTDS  TSO COMMAND........                          */\n/* ================================================================= */\n\n         &A &B &C &D &E\n\n         SET &SHORT = &STR(PRINTED)\n         SET &LONG  = &STR(&B HAS BEEN PRINTED)\n         ISPEXEC VPUT (SHORT LONG)\n         ISPEXEC SETMSG MSG(AOST010)\n./       ADD   NAME=SUM\nISREDIT MACRO (START,END,DEBUG)\n/* SUM MACRO. GIVE THE NUM OF NUMBERS IN SPECIFIED COLUMNS\n/*  FROM TECHNICAL SUPPORT MAGAZINE MARCH/89\nIF &DEBUG = DEBUG THEN CONTROL L C S\nIF &START = &STR() | &END = &STR() | &START > &END THEN DO\n   SET ZEDSMSG = INVALID PARAMETERS\n   SET ZEDLMSG = BOTH START AND END COLUMNS MUST BE SPECIFIED\n   ISPEXEC SETMSG MSG(ISRZ001)\n   EXIT\nEND\nCONTROL NOFLUSH\nISREDIT (NUMLINES) = LINENUM .ZLAST\nSET &TOTL = 0\nSET &NUMBERS = NO\nDO WHILE &NUMLINES > 0\n   ISREDIT (LINE) = LINE &NUMLINES\n   SET NUM = &SUBSTR(&START:&END,&STR(&LINE))\n   IF &DATATYPE(&NUM) = NUM THEN DO\n      SET TOTL = &TOTL + &NUM\n      SET NUMBERS = YES\n   END\n   SET NUMLINES = &NUMLINES - 1\nEND\nIF &NUMBERS = YES THEN DO\n   SET ZEDSMSG = &TOTL\n   SET ZEDLMSG = TOTAL OF COLUMNS &START:&END IS &TOTL\n   ISPEXEC SETMSG MSG(ISRZ000)\nEND\nELSE DO\n   SET ZEDSMSG = NO NUMBERS\n   SET ZEDLMSG = COLUMNS &START:&END CONTAIN NO NUMERIC VALUES\n   ISPEXEC SETMSG MSG(ISRZ001)\nEND\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMD1": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00u\\x9au\\x9a\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 30106, "newlines": 30106, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=$$$BFGES\nWE AT BFG HAV CONVERTED THE # COMMAND SUBSYSTEM TO RUN ON ESA(CURRENTLY\nAN EXPRESS ESA 3.1.0E AT 8903). THE CODE HAS HELD UP VERY WELL FROM\nXA, ONLY TWO MODULES WERE MODIFIED:\n\n  1. CSCSJ03D (#I) - CONTROL BLOCK SIZES CHANGED IN ESA (PART, SART)\n  2. CSCSL03D (#J) - FIELD ASCBSEQN WAS REMOVED BY IBM.\n\nFOR ADDTIONAL CHANGES SEE MEMBER $$$BFGXA WHICH SHOWS THE CHANGES\nMADE TO SUPPORT XA 2.1.3 AND ABOVE.\n\nIF YOU NEED TO USE THIS FOR AN XA SYSTEM THEN BACKOUT THE RENAMES IN\n$MVSES31 WHICH WILL RETURN THIS TO THE XA LEVEL.\n\n\nTHE FOLLOWING CHART SUMMARIZES THE MODIFICATIONS AND CURRENT STATUS\nOF THE DIFFERENT # SUBSYSTEM MODULES UNDER ESA.\n\nESA STATUS\n                                       T\n                                       E  MODIFIED  STILL\n                                       S    FOR      HAS\n MODULE        FUNCTION                T    ESA     BUGS\n --------      ----------------------- -   -----    -----\n CMDDOCTN  -   (DOCUMENTATION)\n CMDDUMMY  -   (CMDDUMMY MODULE)       X\n CMDINSTL  -   (INSTALLATION JCL)\n CMDPRINT  -   (DOCUMENTATION PRINT)\n CMDSBCSC  -   (CROSS-SYSTEM CNTRL)    X\n CMDSBINT  -   (INIT AND MONITOR)      X\n CMDSBMON  -   (STANDALONE MONITOR)                   X  NEEDS BTAM/XA\n CMDSBSYS  -   (PROCESSOR)             X\n CMDSBTSO  -   (TSO FULL SCREEN MON)   X\n CMDTSO    -   (TSO DIRECTOR)          X\n CSCGA03D  -   (A - ACTIVITY MONITOR)\n CSCGE03D  -   (E - EXCEPTION GRAPH)                  X  USES TCH INSTR\n CSCGF03D  -   (F - FRAME USE GRAPH)\n CSCGH03D  -   (H - HELP FOR GRAPH)\n CSCGI03D  -   (I - JES2 INIT GRAPH)                  X  NEEDS JES2 BLK\n CSCGJ03D  -   (J - JOB CPU GRAPH)\n CSCGO03D  -   (O - I/O ACT GRAPH)                    X  USES TCH INSTR\n CSCGQ03D  -   (Q - QUE)\n CSCGS03D  -   (S - SYS. IND. GRAPH)\n CSCGU03D  -   (U - FREE DASD SPACE)\n CSCSA03D  -   (#N -  D ENQ P1)        X\n CSCSB03D  -   (#N -  D ENQ P2)        X\n CSCSC03D  -   (#L -  D LINES)         X\n CSCSD03D  -   (#D -  COREZAP)         X\n CSCSE03D  -   (#A -  ASCB INFO)       X\n CSCSF03D  -   (#F -  D FRAMES)        X\n CSCSG03D  -   (#R -  D ALLOC)         X\n CSCSH03D  -   (#S -  D LPA)           X\n CSCSI03D  -   (#V -  D DEVICE)                       X  NEEDS UCB LOOK\n CSCSJ03D  -   (#I -  D SYS INDS)      X     X\n CSCSK03D  -   (#C -  CALCULATOR)      X\n CSCSL03D  -   (#J -  D A)             X     X\n CSCSM03D  -   (#H -  HELP)            X\n CSCSN03D  -   (#T -  D TIOT)          X\n CSCSO03D  -   (#M -  TSO SEND)\n CSCSP0ED  -   (#P -  D SU)\n CSCSQ03D  -   (#Q -  ANALYZE ENQ)     X\n CSCSR03D  -   (#O -  I/O PENDING)     X\n CSCSS03D  -   (#E -  EXECUTE)\n CSCSZ03D  -   (#Z -  D A)\n CSCZA03D  -   (##A -  JOB ACTIVITY)\n CSCZB03D  -   (##B -  DEVICE MON.)\n CSCZC03D  -   (##C -  CHANNEL MON.)                  X  USES TCH INSTR\n CSCZJ03D  -   (##J -  JOB MON.)\n CSCZP03D  -   (##P -  PAGING MON.)\n CSCZS03D  -   (##S -  SYSIND MON.)\n./       ADD   NAME=$$$BFGXA\nWE AT BFG HAV CONVERTED THE # COMMAND SUBSYSTEM TO RUN ON XA (CURRENTLY\nAN EXPRESS XA 2.1.3 AT 8501). IN DOING THIS WE FOUND SOME BUGS THAT\nCROSS ALL THE MODULES:\n\n  1. ESTAE PARMLIST LENGTH WAS HARD CODED, AND XA WAS LONGER. CAUSED\n     MANY FUNNY BRANCHES NOT TO THE ESTAE ROUTINE.  THE CODE AT THE\n     ESTAE ISSUANCE WAS CHANGED IN ALL MODULES HAVING ESTAES.  ALL\n     ESTAES FOR XA WERE CHANGED TO RECORD ANY FAILURES IN LOGREC\n     TO ALLOW EASIER DEBUGGING.\n  2. CMDTSO DEPENDED ON R4 NOT BEING MODIFIED DURING THE CALLING OF\n     ANY CSCXX03D MODULE. THIS RESTIRCTION DOES NOT EXIST IN THE\n     CONSOLE COMMAND INVOCATION.  THUS CERTAIN COMMANDS BOMBED FOR\n     NO APPARENT REASON. THIS WAS FIXED.\n\nTHIS FILE SUPERCEEDS BOTH FILES 409 AND 417, IN CURRENCY, AND IN FACT\nBOTH THOSE FILES WERE MERGED INTO THIS AS A BASE FOR OUR CONVERSION.\n\nWE ALSO FIXED ANY REENTRANCY PROBLEMS THAT OCCURED IN THE MODULES.\n(YOU WOULD BE SUPPRISED WHAT WAS FOUND.)\n\nCERTAIN MODULES WERE FIXED FOR XA AND SUPPORT ABOVE THE LINE PROCESSING:\n\n  1. #S WILL NOW ACCEPT 4 BYTE ADDRESSES AND DISPLAY 4 BYTE ADDRESSES.\n  2. #D WILL NOW ACCEPT 4 BYTE ADDRESSES AND DISPLAY 4 BYTE ADDRESSES.\n\n#T HAS BEEN ENHANCED (REALLY FIXED) TO DISPLAY THE LAST LINE OF\nITS FORMAT DATA. PREVIOUSLY THE LAST ENTRY WAS SKIPPED.\n\nTHE FOLLOWING CHART SUMMARIZES THE MODIFICATIONS AND CURRENT STATUS\nOF THE DIFFERENT # SUBSYSTEM MODULES UNDER XA.\n\nXA STATUS\n                                       T\n                                       E  MODIFIED  STILL\n                                       S    FOR      HAS\n MODULE        FUNCTION                T     XA     BUGS\n --------      ----------------------- -   -----    -----\n CMDDOCTN  -   (DOCUMENTATION)\n CMDDUMMY  -   (CMDDUMMY MODULE)       X\n CMDINSTL  -   (INSTALLATION JCL)\n CMDPRINT  -   (DOCUMENTATION PRINT)\n CMDSBCSC  -   (CROSS-SYSTEM CNTRL)    X     X\n CMDSBINT  -   (INIT AND MONITOR)      X     X\n CMDSBMON  -   (STANDALONE MONITOR)                   X  NEEDS BTAM/XA\n CMDSBSYS  -   (PROCESSOR)             X\n CMDSBTSO  -   (TSO FULL SCREEN MON)   X     X\n CMDTSO    -   (TSO DIRECTOR)          X     X\n CSCGA03D  -   (A - ACTIVITY MONITOR)\n CSCGE03D  -   (E - EXCEPTION GRAPH)                  X  USES TCH INSTR\n CSCGF03D  -   (F - FRAME USE GRAPH)\n CSCGH03D  -   (H - HELP FOR GRAPH)\n CSCGI03D  -   (I - JES2 INIT GRAPH)                  X  NEEDS JES2 BLK\n CSCGJ03D  -   (J - JOB CPU GRAPH)\n CSCGO03D  -   (O - I/O ACT GRAPH)                    X  USES TCH INSTR\n CSCGQ03D  -   (Q - QUE)\n CSCGS03D  -   (S - SYS. IND. GRAPH)\n CSCGU03D  -   (U - FREE DASD SPACE)\n CSCSA03D  -   (#N -  D ENQ P1)        X\n CSCSB03D  -   (#N -  D ENQ P2)        X\n CSCSC03D  -   (#L -  D LINES)\n CSCSD03D  -   (#D -  COREZAP)         X     X\n CSCSE03D  -   (#A -  ASCB INFO)       X     X\n CSCSF03D  -   (#F -  D FRAMES)        X     X\n CSCSG03D  -   (#R -  D ALLOC)         X     X\n CSCSH03D  -   (#S -  D LPA)           X     X\n CSCSI03D  -   (#V -  D DEVICE)        X     X        X  NEEDS UCB LOOK\n CSCSJ03D  -   (#I -  D SYS INDS)      X     X\n CSCSK03D  -   (#C -  CALCULATOR)\n CSCSL03D  -   (#J -  D A)             X     X\n CSCSM03D  -   (#H -  HELP)            X\n CSCSN03D  -   (#T -  D TIOT)          X     X\n CSCSO03D  -   (#M -  TSO SEND)\n CSCSP0ED  -   (#P -  D SU)\n CSCSQ03D  -   (#Q -  ANALYZE ENQ)     X\n CSCSR03D  -   (#O -  I/O PENDING)     X     X\n CSCSS03D  -   (#E -  EXECUTE)\n CSCSZ03D  -   (#Z -  D A)\n CSCZA03D  -   (##A -  JOB ACTIVITY)         X\n CSCZB03D  -   (##B -  DEVICE MON.)\n CSCZC03D  -   (##C -  CHANNEL MON.)                  X  USES TCH INSTR\n CSCZJ03D  -   (##J -  JOB MON.)             X\n CSCZP03D  -   (##P -  PAGING MON.)\n CSCZS03D  -   (##S -  SYSIND MON.)\n./       ADD   NAME=$$ORIGIN\nTHE SOURCE OF THIS DATASET IS THE COMBINATION OF FILES:\n     266  -  BASE # SUBSYSTEM\n     409  -  CORRECTED #T AND #D\n     417  -  INITIAL XA COMMANDS\nTHESE FILES CAME FROM VERSION 259 (4/1/86) OF THE CBT MODS TAPE\n./       ADD   NAME=$HELP\n)F       FUNCTION -\n               # IS THE TSO INTERFACE FOR THE EXTENDED OPERATOR\n                    # COMMANDS. FOR FULL SCREEN MODE TYPE #FS\n                    OR CMDSBTSO\n)X       SYNTAX -\n               # H  THERE MUST BE ONE SPACE BETWEEN THE # AND THE\n                    OPERAND\n)O       OPERANDS:\n               H   - THE HELP DATA SET FOR ALL THE # COMMANDS\n                        ACCESSABLE TO THE TSO USER.\n         WARNING:\n               CERTAIN COMMANDS AND/OR SUBCOMMANDS CANNOT BE\n               EXECUTED UNDER TSO UNLESS THE TMP IS AUTHORIZED\n               ERROR MESSAGES ARE ISSUED IF ANY OF THE FOLLOWING\n               COMMANDS ARE ISSUED.\n                 1. # L  2. # JT  3. # T  4. # D(ZAP)  5. # X\n\n               IF THE COMMAND YOU WISH TO ENTER CONTAINS A\n               COMMA (,) SUBSTITUTE AN AT SIGN (@)\n\n               IF THE COMMAND YOU WISH TO ENTER CONTAINS A\n               SLASH-ASTERICK (/*) SUBSTITUTE A SLASH-NOT (/\u00ac)\n\n         EXAMPLES:\n               # H  LIST OF ALL THE COMMANDS\n               # J  EXTENDED DISPLAY ACTIVE\n               # A  DISPLAY JOB STATUS\n               # R  DISPLAY DEVICE STATUS\n               # HJ DISPLAY HELP FOR THE # J COMMAND\n               # HA DISPLAY HELP FOR THE # A COMMAND\n               # HR DISPLAY HELP FOR THE # R COMMAND\n./       ADD   NAME=$JCL\n//CMD1   PROC  PROG=CMDSBINT,\n//             A=ASE0,\n//             B='$',\n//             C=CSK0,\n//             D=DSD0,\n//             E=ESS0,\n//             F=FSF0,\n//             G='$',\n//             H=HSM0,\n//             I=ISJ0,\n//             J=JSL0,\n//             K='$',\n//             L=LSC0,\n//             M=MSO0,\n//             N=NSA0,\n//             O=OSR0,\n//             P=PSP0,\n//             Q=QSQ0,\n//             R=RSG0,\n//             S=SSH0,\n//             T=TSN0,\n//             U='$',\n//             V=VSI0,\n//             W='$',\n//             X='$',\n//             Y='$',\n//             Z='$'\n//CMD1  EXEC PGM=&PROG,TIME=1440,DPRTY=(15,10),PERFORM=12,\n// PARM='&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z'\n//SYSUDUMP  DD  SYSOUT=1\n./       ADD   NAME=$MODS\n AUG   10, 1981\n\n IF YOU IEBCOPY IN THE LOAD MODULES FROM THE MVSMODS TAPE (FILE 267)\n YOU WILL END UP WITH THE MVS/SP RELEASE 1 VERSION OF THESE # COMMANDS\n IN YOUR SYSTEM. IF YOU WANT THE NON MVS/SE VERSIONS OF THE LOAD\n MODULES YOU WILL HAVE TO ASSEMBLE AND RELINK THE NON MVS/SE\n MODULES YOURSELF. IF YOU WANT THE MVS/SE RELEASE 2 VERSION YOU SHOULD\n SEE THE MEMBER IN THIS PDS CALLED $MVSSE2\n\n      DO NOT JUST RUN FILE 267 INTO YOUR LPALIB YOU WILL\n      HAVE UNBELIEVEABLE PROBLEMS IF YOU DO. CERTAIN MODULES\n      CAN NOT RESIDE THERE. READ THE REST OF THE DOCUMENT\n      IN OTHER MEMBERS OF THIS PDS FOR ADDITIONAL INFORMATION.\n\n//STEP267B  EXEC  IEBCOPY\n//SYSUT1 DD DSN=SYS2.MLINKLIB,DISP=SHR\n//SYSUT2 DD DSN=MVS.MVSMODS.TAPE,DISP=(NEW,CATLG),\n// UNIT=SYSDA,SPACE=(CYL,(5,2,56),RLSE),\n// DCB=(RECFM=U,BLKSIZE=19069)\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDPRINT,,R)) DOCUMENTATION PRINTER  ANY LIBRARY\n S M=((CMDSBCSC,,R)) X-SYSTEM PGM   NOT LPA LINKLIST AC=1\n S M=((CMDSBINT,,R)) INIT & MONITOR NOT LPA LINKLIST AC=1\n S M=((CMDSBSYS,,R)) PROCESSOR      NOT LPA LINKLIST AC=1\n S M=((CMDSBMON,,R)) STANDALONE MON LINKLIST NOT RENT\n S M=((CSCSA03D,,R))          #N     ANY LIBRARY\n S M=((CSCSC03D,,R))          #L     ANY LIBRARY\n S M=((CSCSD03D,,R))          #D     ANY LIBRARY\n S M=((CSCSE03D,,R))          #A     ANY LIBRARY\n S M=((CSCSF03D,,R))          #F     ANY LIBRARY\n S M=((CSCSG03D,,R))          #R     ANY LIBRARY\n S M=((CSCSH03D,,R))          #S     ANY LIBRARY\n S M=((CSCSI03D,,R))          #V     ANY LIBRARY\n S M=((CSCSJ03D,,R))          #I     ANY LIBRARY\n S M=((CSCSK03D,,R))          #C     ANY LIBRARY\n S M=((CSCSL03D,,R))          #J     ANY LIBRARY\n S M=((CSCSM03D,,R))          #H     ANY LIBRARY\n S M=((CSCSN03D,,R))          #T     ANY LIBRARY\n S M=((CSCSO03D,,R))          #M     ANY LIBRARY\n S M=((CSCSP03D,,R))          #P     ANY LIBRARY\n S M=((CSCSQ03D,,R))          #Q     ANY LIBRARY\n S M=((CSCSR03D,,R))          #O     ANY LIBRARY\n S M=((CSCSS03D,,R))          #E     ANY LIBRARY\n S M=((CSCZA03D,,R))          ##A    ANY LIBRARY\n S M=((CSCZB03D,,R))          ##B    ANY LIBRARY\n S M=((CSCZC03D,,R))          ##C    ANY LIBRARY\n S M=((CSCZJ03D,,R))          ##J    ANY LIBRARY\n S M=((CSCZP03D,,R))          ##P    ANY LIBRARY\n S M=((CSCZS03D,,R))          ##S    ANY LIBRARY\n/*\n//STEP267C EXEC IEBCOPY\n//SYSUT1 DD DSN=SYS2.MLINKLIB,DISP=SHR\n//SYSUT2 DD DSN=MVS.MVSMODS.TAPE,DISP=SHR\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CSCSA03D,IEESA03D,R))  #N     LPA LIBRARY\n S M=((CSCSC03D,IEESC03D,R))  #L     LPA LIBRARY\n S M=((CSCSD03D,IEESD03D,R))  #D     LPA LIBRARY\n S M=((CSCSE03D,IEESE03D,R))  #A     LPA LIBRARY\n S M=((CSCSF03D,IEESF03D,R))  #F     LPA LIBRARY\n S M=((CSCSG03D,IEESG03D,R))  #R     LPA LIBRARY\n S M=((CSCSH03D,IEESH03D,R))  #S     LPA LIBRARY\n S M=((CSCSI03D,IEESI03D,R))  #V     LPA LIBRARY\n S M=((CSCSJ03D,IEESJ03D,R))  #I     LPA LIBRARY\n S M=((CSCSK03D,IEESK03D,R))  #C     LPA LIBRARY\n S M=((CSCSL03D,IEESL03D,R))  #J     LPA LIBRARY\n S M=((CSCSM03D,IEESM03D,R))  #H     LPA LIBRARY\n S M=((CSCSN03D,IEESN03D,R))  #T     LPA LIBRARY\n S M=((CSCSO03D,IEESO03D,R))  #M     LPA LIBRARY\n S M=((CSCSP03D,IEESP03D,R))  #P     LPA LIBRARY\n S M=((CSCSQ03D,IEESQ03D,R))  #Q     LPA LIBRARY\n S M=((CSCSR03D,IEESR03D,R))  #O     LPA LIBRARY\n S M=((CSCSS03D,IEESS03D,R))  #E     LPA LIBRARY\n S M=((CSCZA03D,IEEZA03D,R))  ##A    LPA LIBRARY\n S M=((CSCZB03D,IEEZB03D,R))  ##B    LPA LIBRARY\n S M=((CSCZC03D,IEEZC03D,R))  ##C    LPA LIBRARY\n S M=((CSCZJ03D,IEEZJ03D,R))  ##J    LPA LIBRARY\n S M=((CSCZP03D,IEEZP03D,R))  ##P    LPA LIBRARY\n S M=((CSCZS03D,IEEZS03D,R))  ##S    LPA LIBRARY\n/*\n//STEP267D EXEC IEBCOPY\n//SYSUT1 DD DSN=SYS2.MLINKLIB,DISP=SHR\n//SYSUT2 DD DSN=MVS.MVSMODS.TAPE,DISP=SHR\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDTSO,,R))    TSO DRIVER                 ANY LIBRARY NO RENT\n S M=((CMDSBTSO,,R))  TSO FULL SCREEN DRIVER     ANY LIBRARY NO RENT\n S M=((CSCGA03D,,R))  TSO JOB ACTIVITY MON       ANY LIBRARY\n S M=((CSCGE03D,,R))  TSO EXCEPTION GRAPH        ANY LIBRARY\n S M=((CSCGF03D,,R))  TSO FRAME USE GRAPH        ANY LIBRARY\n S M=((CSCGH03D,,R))  TSO HELP FOR GRAPHICS      ANY LIBRARY\n S M=((CSCGI03D,,R))  TSO JES2 INIT GRAPH        ANY LIBRARY\n S M=((CSCGJ03D,,R))  TSO JOB CPU GRAPH          ANY LIBRARY\n S M=((CSCGO03D,,R))  TSO I/O ACTIVITY MON       ANY LIBRARY\n S M=((CSCGQ03D,,R))  TSO QUE COMMAND            ANY LIBRARY\n S M=((CSCGS03D,,R))  TSO SYS. IND. GRAPH        ANY LIBRARY\n S M=((CSCGU03D,,R))  TSO FREE DASD SPACE GRAPH  ANY LIBRARY\n//STEP267E EXEC IEBCOPY\n//SYSUT1 DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSUT2 DD DSN=MVS.MVSMODS.TAPE,DISP=SHR\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDDUMMY,,R))    CMDDUMMY     MUST BE FIXED LPA AC=0,RENT,REUS\n//STEP267F  EXEC IEBCOPY\n//IN        DD   DSN=MVS.MVSMODS.TAPE,DISP=SHR\n//OT        DD   UNIT=TAPEHI,VOL=SER=MVSTAP,DISP=(OLD,PASS),\n//          LABEL=(267,NL),DCB=DEN=3\n COPY INDD=IN,OUTDD=OT\n./       ADD   NAME=$PASSWRD\n NOVEMBER 4, 1979\n\n FOR THOSE WHO WISH TO KNOW THE 8 DIGIT PASSWORD FOR SWITCHING\n THE  MASTER  CONSOLE  WITH  THE  #CZ COMMAND IT IS AS FOLLOWS\n\n DIGIT      WHAT IT IS\n\n   1        1ST DIGIT OF THE SMF SYSTEM ID\n   2        1ST DIGIT OF THE JULIAN DAY\n   3        1ST DIGIT OF THE HOUR\n   4        2ND DIGIT OF THE JULIAN DAY\n   5        2ND DIGIT OF THE HOUR\n   6        3RD DIGIT OF THE JULIAN DAY\n   7        1ST DIGIT OF THE MINUTE\n   8        2ND DIGIT OF THE MINUTE\n\n./       ADD   NAME=ALLOC\n         MACRO\n&NAME    ALLOC &DUMMY,&PERM,&DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,      X\n               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X\n               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X\n               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X\n               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X\n               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,           X\n               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=\n.**********************************************************************\n.*                                                                    *\n.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *\n.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *\n.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *\n.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *\n.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *\n.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *\n.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *\n.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *\n.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *\n.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *\n.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *\n.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *\n.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *\n.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *\n.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *\n.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *\n.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *\n.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *\n.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *\n.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *\n.*    THAT QUANTITY. (SEE DYNSPACE)                                   *\n.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *\n.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *\n.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *\n.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *\n.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *\n.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *\n.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *\n.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *\n.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *\n.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *\n.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *\n.*                                                                    *\n.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *\n.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *\n.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *\n.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *\n.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *\n.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *\n.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *\n.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *\n.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *\n.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *\n.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *\n.*    CONTAIN THE LENGTH.                                            *\n.*    EG          ALLOC DSN=LOCATOR                                  *\n.*       LOCATOR  DC    A(DSN),Y(12)                                 *\n.*       DSN      DC    C'SYS1.LINKLIB'                              *\n.*                                                                   *\n.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *\n.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *\n.*       A VALUE IN A REGISTER, COPIES=(R3),                         *\n.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *\n.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *\n.*       FULLWORD FIELD.                                             *\n.*                                                                   *\n.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *\n.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *\n.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *\n.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *\n.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *\n.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *\n.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *\n.*       SUPERVISOR AND TSO).                                        *\n.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *\n.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *\n.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *\n.*       ARE TO RECEIVE THE DDNAME.                                  *\n.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *\n.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *\n.*                                                                   *\n.**********************************************************************\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS\n         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS\n         LCLA  &I                 COUNTER\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n.*\n.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&SSREQ' EQ 'YES').SSREQ\n.TDSN    AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&DSNPDE' NE '').DSNPDE\n         AIF   ('&DSNRET' NE '').DSNRT\n         AIF   ('&SYSOUT' NE '').SYSOUT\n         AIF   ('&DUMMY' NE '').DUMMY\n         AIF   ('&QNAME' NE '').QNAME\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n         AIF   ('&DDNRET&DDNTO' NE '').DDNRT\n.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT\n.TVOLRET AIF   ('&VOLRET' NE '').VOLRET\n.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT\n.TLABEL  AIF   ('&LABEL' NE '').LABEL\n.TPSWD   AIF   ('&PASWORD' NE '').PASWORD\n.TFORUSE AIF   ('&FORUSER' NE '').FORUSER\n.TTU     AIF   ('&TU' NE '').TU\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TSPACE  AIF   ('&SPACE' NE '').SPACE\n.TLRECL  AIF   ('&LRECL' NE '').DCB\n         AIF   ('&DEN' NE '').DCB\n         AIF   ('&RECFM' NE '').DCB\n         AIF   ('&BLKSIZE' NE '').DCB\n         AIF   ('&DSORG' NE '').DCB\n         AIF   ('&KEYLEN' NE '').DCB\n.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN\n.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN\n.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343\n.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM\n         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM\n.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL\n         AGO   .SVC99\n.SSREQ   RCPSSREQ\n         AGO   .TDSN\n.DSN     RCPDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.DSNPDE  RCPDSNPD &DSNPDE\n         AGO   .TDDN\n.DSNRT   RCPDSNRT &DSNRET\n&DSNRTO  SETA  &DTUO-46\n         AGO   .TDDN\n.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X\n               FORMS=&FORMS\n         AGO   .TDDN\n.DUMMY   RCPDUMMY &DUMMY\n         AGO   .TDDN\n.QNAME   RCPQNAME &QNAME\n         AGO   .TDDN\n.DDN     RCPDDN &DDN&F&FILE\n         AGO   .TUNIT\n.DDNRT   RCPDDNRT &DDNRET\n&DDNRTO  SETA  &DTUO-10\n         AGO   .TUNIT\n.UNIT   RCPUNIT &UNIT,&VOL\n         AGO   .TVOLRET\n.VOLRET  RCPVOLRT &VOLRET\n&VOLRTO  SETA  &DTUO-8\n         AGO   .TDSRGO\n.DSORGRT RCPDSRGR\n&DSRGRTO SETA  &DTUO-2\n         AGO   .TLABEL\n.LABEL   RCPLABEL &LABEL\n         AGO   .TPSWD\n.PASWORD RCPPSWD &PASWORD\n         AGO   .TFORUSE\n.FORUSER RCPFORUS &FORUSER\n         AGO   .TTU\n.TU      RCPTU &TU\n         AGO   .TDISP\n.DISP    RCPDISP &DISP\n         AGO   .TSPACE\n.SPACE   RCPSPACE &SPACE\n         AGO   .TLRECL\n.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X\n               DSORG=&DSORG,KEYLEN=&KEYLEN\n         AGO .TDCBDSN\n.DCBDSN  RCPDCBDS &DCBDSN\n         AGO .TDCBDDN\n.DCBDDN  RCPDCBDD &DCBDDN\n         AGO .TFREE                                              TE7343\n.FREE    RCPFREE  &FREE                                          TE7343\n         AGO   .TPERM\n.PERM    RCPPERM\n         AGO   .TSPECI\n.SPECIAL RCPSPEC &SPECIAL\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n.DYNA    DYNALLOC\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **\n.LTR     AIF   ('&ERROR' EQ '').TDDTO\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE\n&I       SETA  0\n.DDNTOL  ANOP\n&I       SETA  &I+1\n         AIF   ('&DDNTO(&I)' EQ '').RESERVE\n         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR\n         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.DDNTOR  ANOP\n&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)\n         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE 1\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU21\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AIF   (&DSNRTO EQ 0).TDDNRTO\n&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN\n.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11\n&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME\n.DTU11   AIF   (&VOLRTO EQ 0).DTU12\n&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER\n.DTU12   AIF   (&DSRGRTO EQ 0).DTU10\n&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG\n         AGO   .DTU10\n.DTU21   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n./       ADD   NAME=BFGINSTL\n//CMDSBJB1 JOB (U32048,17F),GUY,CLASS=A,MSGCLASS=E,TYPRUN=HOLD\n/*JOBPARM  L=999,BYTES=99999\n//*\n//*  COMMENTED OUT THE QUE ASSEMBLIES (SEE MEMBER CALLED $QUE IN THIS\n//*  PDS)  ARNOLD CASINGHINO UPDATE 09/16/84\n//*\n//*\n//*   CMDINSTL  VERSION 2.4   LAST UPDATED 11/16/82\n//*\n//*\n//DMALLOC PROC  ASMLIB='SFTB.SP310#.SOURCE',     THE PDS YOU GOT\n//         LINKLIB='SFTB.SP310#.LOAD',\n//         LINKUNT=3380,\n//         LINKVOL=SYS001\n//DMALLOC EXEC  PGM=IEFBR14\n//LINKLIB  DD DSN=&LINKLIB.,UNIT=&LINKUNT.,VOL=SER=&LINKVOL.,\n//         DISP=(,CATLG),SPACE=(CYL,(5,1,28)),\n//         DCB=(RECFM=U,BLKSIZE=6144)\n//ASMLIB   DD DSN=&ASMLIB,DISP=SHR\n//        PEND\n//DMASM    PROC   MEMBER=,LNCT=55,\n//         ASMLIB='SFTB.SP310#.SOURCE',\n//         LINKLIB='SFTB.SP310#.LOAD'\n//ASM EXEC PGM=ASMBLR,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=&ASMLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,VOL=SER=ESARES,UNIT=DISK,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,VOL=SER=ESADLB,UNIT=DISK,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=*\n//SYSLIN DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//LKED EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=*\n//     PEND\n//ALLOC  EXEC DMALLOC\n//ASMPR  EXEC DMASM,MEMBER=CMDPRINT\n//DOCCMD1 EXEC  PGM=CMDPRINT,PARM='01072'\n//STEPLIB  DD  DSN=SFTB.SP310#.LOAD,DISP=SHR\n//SYSPRINT DD   SYSOUT=Z\n//SYSUDUMP DD   SYSOUT=*\n#$#\n                    VERSION\n             $DOC         .COMMAND SUB-SYSTEM -   (ADDIT DOCUMENTATION)\n             $HELP        .COMMAND SUB-SYSTEM -   (TSO HELP MEMBER)\n             $HINTS       .COMMAND SUB-SYSTEM -   (ADDIT INSTALL HINTS)\n             $JCL         .COMMAND SUB-SYSTEM -   (JCL TO RUN CMD1)\n             $MODS        .COMMAND SUB-SYSTEM -   (MVSMODS IEBCOPY)\n             CMDDOCTN     .COMMAND SUB-SYSTEM -   (DOCUMENTATION)\n             CMDDUMMY     .COMMAND SUB-SYSTEM -   (CMDDUMMY MODULE)\n             CMDINSTL     .COMMAND SUB-SYSTEM -   (INSTALLATION JCL)\n             CMDPRINT     .COMMAND SUB-SYSTEM -   (DOCUMENTATION PRINT)\n             CMDSBCSC     .COMMAND SUB-SYSTEM -   (CROSS-SYSTEM CNTRL)\n             CMDSBINT     .COMMAND SUB-SYSTEM -   (INIT AND MONITOR)\n             CMDSBMON     .COMMAND SUB-SYSTEM -   (STANDALONE MONITOR)\n             CMDSBSYS     .COMMAND SUB-SYSTEM -   (PROCESSOR)\n             CMDSBTSO     .COMMAND SUB-SYSTEM -   (TSO FULL SCREEN MON)\n             CMDTSO       .COMMAND SUB-SYSTEM -   (TSO DIRECTOR)\n             CSCGA03D     .COMMAND SUB-SYSTEM -   (A - ACTIVITY MON.)\n             CSCGE03D     .COMMAND SUB-SYSTEM -   (E - EXCEPTION MON.)\n             CSCGF03D     .COMMAND SUB-SYSTEM -   (F - FRAME USE GRAPH)\n             CSCGH03D     .COMMAND SUB-SYSTEM -   (H - HELP FOR GRAPH)\n             CSCGI03D     .COMMAND SUB-SYSTEM -   (I - JES2 INIT DISP)\n             CSCGJ03D     .COMMAND SUB-SYSTEM -   (J - JOB CPU GRAPH)\n             CSCGO03D     .COMMAND SUB-SYSTEM -   (O - I/O ACTIVITY)\n             CSCGQ03D     .COMMAND SUB-SYSTEM -   (Q - QUE)\n             CSCGS03D     .COMMAND SUB-SYSTEM -   (S - SYS. IND. GRAPH)\n             CSCGU03D     .COMMAND SUB-SYSTEM -   (U -DASD SPACE DISPL)\nCSCSA03D     IEESA03D     .COMMAND SUB-SYSTEM -   (#N -  D ENQ P1)\nCSCSB03D     IEESB03D     .COMMAND SUB-SYSTEM -   (#N -  D ENQ P2)\nCSCSC03D     IEESC03D     .COMMAND SUB-SYSTEM -   (#L -  D LINES)\nCSCSD03D     IEESD03D     .COMMAND SUB-SYSTEM -   (#D -  COREZAP)\nCSCSE03D     IEESE03D     .COMMAND SUB-SYSTEM -   (#A -  ASCB INFO)\nCSCSF03D     IEESF03D     .COMMAND SUB-SYSTEM -   (#F -  D FRAMES)\nCSCSG03D     IEESG03D     .COMMAND SUB-SYSTEM -   (#R -  D ALLOC)\nCSCSH03D     IEESH03D     .COMMAND SUB-SYSTEM -   (#S -  D LPA)\nCSCSI03D     IEESI03D     .COMMAND SUB-SYSTEM -   (#V -  D DEVICE)\nCSCSJ03D     IEESJ03D     .COMMAND SUB-SYSTEM -   (#I -  D PAGES)\nCSCSK03D     IEESK03D     .COMMAND SUB-SYSTEM -   (#C -  CALCULATOR)\nCSCSL03D     IEESL03D     .COMMAND SUB-SYSTEM -   (#J -  D A)\nCSCSZ03D     IEESZ03D     .COMMAND SUB-SYSTEM -   (#Z -  D A)\nCSCSM03D     IEESM03D     .COMMAND SUB-SYSTEM -   (#H -  HELP)\nCSCSN03D     IEESN03D     .COMMAND SUB-SYSTEM -   (#T -  D TIOT)\nCSCSO03D     IEESO03D     .COMMAND SUB-SYSTEM -   (#M -  TSO SEND)\nCSCSP0ED     IEESP03D     .COMMAND SUB-SYSTEM -   (#P -  D SU)\nCSCSQ03D     IEESQ03D     .COMMAND SUB-SYSTEM -   (#Q -  ANALYZE ENQ)\nCSCSR03D     IEESR03D     .COMMAND SUB-SYSTEM -   (#O -  I/O PENDING)\nCSCSS03D     IEESS03D     .COMMAND SUB-SYSTEM -   (#E -  EXECUTE)\nCSCZA03D     IEEZA03D     .COMMAND SUB-SYSTEM -   (##A -  ACTIVITY MON.)\nCSCZB03D     IEEZB03D     .COMMAND SUB-SYSTEM -   (##B -  DEVICE MON.)\nCSCZC03D     IEEZC03D     .COMMAND SUB-SYSTEM -   (##C -  CHANNEL MON.)\nCSCZJ03D     IEEZJ03D     .COMMAND SUB-SYSTEM -   (##J -  JOB MON.)\nCSCZP03D     IEEZP03D     .COMMAND SUB-SYSTEM -   (##P -  PAGING MON.)\nCSCZS03D     IEEZS03D     .COMMAND SUB-SYSTEM -   (##S -  SYSIND MON.)\n             NSEGF03D     .CMD SUB-SYS (NONSE) -  (F - FRAME USE GRAPH)\n             NSEGJ03D     .CMD SUB-SYS (NONSE) -  (J - JOB CPU GRAPH)\n             NSEGS03D     .CMD SUB-SYS (NONSE) -  (S - SYS. IND. GRAPH)\n             NSESE03D     .CMD SUB-SYS (NONSE) -  (#A -  ASCB INFO)\n             NSESJ03D     .CMD SUB-SYS (NONSE) -  (#I -  D PAGES)\n             NSESL03D     .CMD SUB-SYS (NONSE) -  (#J -  D A)\n             NSEZJ03D     .CMD SUB-SYS (NONSE) -  (##J -  JOB MON.)\n             NSEZS03D     .CMD SUB-SYS (NONSE) -  (##S -  SYSIND MON.)\n#$#\n             MACROS VERSION  FOR CMDSBMON\n             ALLOC    1.0 .MACRO NEEDED FOR CMDSBMON\n             DYNSPACE 1.0 .MACRO NEEDED FOR CMDSBMON\n             FREE     1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBFRGS 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBTU   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBTU2  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPCKID  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDDN   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDDNRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDEBUG 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDFPL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDINC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDISP  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDS    1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSECT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSN   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSNPD 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSNRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSRGR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDUMMY 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPENDD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDDN  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDISP 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDSN  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFHOLD 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFORUS 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFREE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPIOPL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLINK  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOAD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCSW 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCS1 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCS2 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPMCA   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPNTU   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPERM  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPPL   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPROC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPSWD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPQNAME 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPRNGE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSPACE 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSPEC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSR2   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSSREQ 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSUBL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSYSOU 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTU    1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTUBFR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTXTL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTYPE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPUNALC 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPUNIT  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPVCHAR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPVOLRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             S99FAIL  1.0 .MACRO NEEDED FOR CMDSBMON\n#$#\n                   VERSION\n             CSCGQQ00 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - QUEUECMN)\n             CSCGQQ01 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - QUEUE)\n             CSCGQQ02 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - ALLOCATE)\n             CSCGQQ03 1.1 .CMD SUB-SYSTEM -       (Q - QCMD - CKPT)\n             CSCGQQ04 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DDNAME)\n             CSCGQQ05 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DISPLAY)\n             CSCGQQ05 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DISPLAY)\n             CSCGQQ06 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - FINDJOB)\n             CSCGQQ07 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - FORMAT)\n             CSCGQQ08 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - HELP)\n             CSCGQQ09 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - HEXBLK)\n             CSCGQQ10 1.1 .CMD SUB-SYSTEM -       (Q - QCMD - INIT)\n             CSCGQQ11 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JCL)\n             CSCGQQ12 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JLOG)\n             CSCGQQ13 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JMSG)\n             CSCGQQ14 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - LIST)\n             CSCGQQ15 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - LISTDS)\n             CSCGQQ16 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - PARSE)\n             CSCGQQ17 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - READSPC)\n             CSCGQQ18 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - REPOS)\n             CSCGQQ19 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SAVE)\n             CSCGQQ20 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SEARCH)\n             CSCGQQ21 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SYSLOG)\n             CSCGQQ22 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - XDS)\n#$#\n                   VERSION\n             MACROS VERSION  FOR THE QUE COMMAND\n             $JQT     1.0 .MACRO NEEDED FOR QUEUE\n             QCLNK    1.0 .MACRO NEEDED FOR QUEUE\n             QCOMMON  1.1 .MACRO NEEDED FOR QUEUE\n             QSTART   1.1 .MACRO NEEDED FOR QUEUE\n             QSTOP    1.0 .MACRO NEEDED FOR QUEUE\n             QTILT    1.0 .MACRO NEEDED FOR QUEUE\n/*\n//DOCCMD2 EXEC  PGM=CMDPRINT,PARM='01072'\n//STEPLIB  DD  DSN=SFTB.SP310#.LOAD,DISP=SHR\n//SYSPRINT DD   SYSOUT=Z\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DSN=SFTB.SP310#.SOURCE(CMDDOCTN),DISP=SHR\n//UPD1    EXEC  PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=SYS2.PROCLIB,DISP=SHR\n//SYSUT2   DD DSN=SYS2.PROCLIB,DISP=SHR\n//SYSIN  DD  DATA\n./ ADD NAME=CMD1                           CHANGE THIS CARD TO ./\n//CMD1   PROC  A=ASE0,\n//             B='$',\n//             C=CSK0,\n//             D=DSD0,\n//             E=ESS0,\n//             F=FSF0,\n//             G='$',\n//             H=HSM0,\n//             I=ISJ0,\n//             J=JSL0,\n//             K='$',\n//             L=LSC0,\n//             M=MSO0,\n//             N=NSA0,\n//             O=OSR0,\n//             P=PSP0,\n//             Q=QSQ0,\n//             R=RSG0,\n//             S=SSH0,\n//             T=TSN0,\n//             U='$',\n//             V=VSI0,\n//             W='$',\n//             X='$',\n//             Y='$',\n//             Z=ZSZ0\n//CMD1  EXEC PGM=CMDSBINT,TIME=1440,DPRTY=(15,10)\n// PARM='&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z'\n//SYSUDUMP  DD  SYSOUT=A\n//CSC#ASYS  DD  DUMMY\n//CSC#BSYS  DD  DUMMY\n//CSC#CSYS  DD  DUMMY\n//CSCDATA   DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n//*\n//*      WHERE  -    FOR CSC#.... REPLACE .... WITH SMF SYSID OF ONE\n//*                  OF THE SYSTEMS USING CROSS-SYSTEM COMMANDS.\n//*                  AS MANY CSC#.... DD CARDS AS NECESSARY MAY EXIST.\n//*\n./ ADD NAME=CMDSBMON                          CHANGE THIS CARD TO ./\n//CMDSBMON  PROC  U=XXX\n//CMDSBMON  EXEC  PGM=CMDSBMON,PARM='&U.',REGION=8000K\n//SYSUDUMP  DD    SYSOUT=A\n//CMDLOG    DD    SYSOUT=A\n//CSCDATA  DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n//*   WHERE  XXX  IS THE 3270 UNIT ADDRESS\n/*\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 1\n//*\n//*\n//CMDSBJB2 JOB (U32048,17F),GUY,CLASS=A,MSGCLASS=E,TYPRUN=HOLD\n/*JOBPARM  L=999,BYTES=99999\n//DMASM    PROC   MEMBER=,LNCT=55,\n//         ASMLIB='SFTB.SP310#.SOURCE',\n//         LINKLIB='SFTB.SP310#.LOAD'\n//ASM EXEC PGM=IEV90,PARM=(LOAD,NODECK,'LINECNT=&LNCT.'),\n//        REGION=4096K\n//SYSLIB   DD   DSN=&ASMLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,VOL=SER=ESARES,UNIT=DISK,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,VOL=SER=ESADLB,UNIT=DISK,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=*\n//SYSLIN DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS),DCB=BLKSIZE=400\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//DMLINK EXEC PGM=IEWL,\n//        REGION=4096K,\n//          PARM='XREF,LET,LIST,AC=1'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=*\n//     PEND\n//DMLINK   PROC   MEMBER=,\n//         LINKLIB='SFTB.SP310#.LOAD'\n//DMLINK EXEC PGM=IEWL,\n//        REGION=4096K,\n//          PARM='XREF,LET,LIST,AC=1'\n//SYSLIN   DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=*\n//     PEND\n//ASM00 EXEC DMASM,MEMBER=CMDDUMMY\n//ASM01 EXEC DMASM,MEMBER=CMDSBCSC\n//ASM02 EXEC DMASM,MEMBER=CMDSBINT\n//ASM03 EXEC DMASM,MEMBER=CMDSBSYS\n//ASM04 EXEC DMASM,MEMBER=CMDTSO\n//ASM05 EXEC DMASM,MEMBER=CMDSBTSO\n//ASM05A EXEC DMASM,MEMBER=CMDSBMON\n//ASM06 EXEC DMASM,MEMBER=CSCSB03D\n//ASM07 EXEC DMASM,MEMBER=CSCSA03D\n//DMLINK.SYSIN DD *\n INCLUDE SYSLIB(CSCSB03D)\n ENTRY IEESA03D\n/*\n//ASM08 EXEC DMASM,MEMBER=CSCSC03D\n//ASM09 EXEC DMASM,MEMBER=CSCSD03D\n//ASM10 EXEC DMASM,MEMBER=CSCSE03D\n//ASM11 EXEC DMASM,MEMBER=CSCSF03D\n//ASM12 EXEC DMASM,MEMBER=CSCSG03D\n//ASM13 EXEC DMASM,MEMBER=CSCSH03D\n//ASM14 EXEC DMASM,MEMBER=CSCSI03D\n//ASM15 EXEC DMASM,MEMBER=CSCSJ03D\n//ASM16 EXEC DMASM,MEMBER=CSCSK03D\n//ASM17 EXEC DMASM,MEMBER=CSCSL03D\n//ASM17A EXEC DMASM,MEMBER=CSCSZ03D\n//ASM18 EXEC DMASM,MEMBER=CSCSM03D\n//ASM19 EXEC DMASM,MEMBER=CSCSN03D\n//ASM20 EXEC DMASM,MEMBER=CSCSO03D\n//ASM21 EXEC DMASM,MEMBER=CSCSP03D\n//ASM22 EXEC DMASM,MEMBER=CSCSQ03D\n//ASM23 EXEC DMASM,MEMBER=CSCSR03D\n//ASM24 EXEC DMASM,MEMBER=CSCSS03D\n//ASM25 EXEC DMASM,MEMBER=CSCZB03D\n//ASM26 EXEC DMASM,MEMBER=CSCZC03D\n//ASM27 EXEC DMASM,MEMBER=CSCZJ03D\n//ASM28 EXEC DMASM,MEMBER=CSCZP03D\n//ASM29 EXEC DMASM,MEMBER=CSCZS03D\n//ASM30 EXEC DMASM,MEMBER=CSCGA03D\n//ASM31 EXEC DMASM,MEMBER=CSCGE03D\n//ASM32 EXEC DMASM,MEMBER=CSCGF03D\n//ASM33 EXEC DMASM,MEMBER=CSCGH03D\n//ASM34 EXEC DMASM,MEMBER=CSCGJ03D\n//ASM35 EXEC DMASM,MEMBER=CSCGO03D\n//ASM36 EXEC DMASM,MEMBER=CSCGS03D\n//*ASM37 EXEC DM*ASM,MEMBER=CSCGQQ00\n//*ASM38 EXEC DM*ASM,MEMBER=CSCGQQ01\n//*ASM39 EXEC DM*ASM,MEMBER=CSCGQQ02\n//*ASM40 EXEC DM*ASM,MEMBER=CSCGQQ03\n//*ASM41 EXEC DM*ASM,MEMBER=CSCGQQ04\n//*ASM42 EXEC DM*ASM,MEMBER=CSCGQQ05\n//*ASM43 EXEC DM*ASM,MEMBER=CSCGQQ06\n//*ASM44 EXEC DM*ASM,MEMBER=CSCGQQ07\n//*ASM45 EXEC DM*ASM,MEMBER=CSCGQQ08\n//*ASM46 EXEC DM*ASM,MEMBER=CSCGQQ09\n//*ASM47 EXEC DM*ASM,MEMBER=CSCGQQ10\n//*ASM48 EXEC DM*ASM,MEMBER=CSCGQQ11\n//*ASM49 EXEC DM*ASM,MEMBER=CSCGQQ12\n//*ASM50 EXEC DM*ASM,MEMBER=CSCGQQ13\n//*ASM51 EXEC DM*ASM,MEMBER=CSCGQQ14\n//*ASM52 EXEC DM*ASM,MEMBER=CSCGQQ15\n//*ASM53 EXEC DM*ASM,MEMBER=CSCGQQ16\n//*ASM54 EXEC DM*ASM,MEMBER=CSCGQQ17\n//*ASM55 EXEC DM**ASM,MEMBER=CSCGQQ18\n//*ASM56 EXEC DM*ASM,MEMBER=CSCGQQ19\n//*ASM57 EXEC DM*ASM,MEMBER=CSCGQQ20\n//*ASM58 EXEC DM*ASM,MEMBER=CSCGQQ21\n//*ASM59 EXEC DM*ASM,MEMBER=CSCGQQ22\n//*LNK60 EXEC DMLINK,MEMBER=CSCGQ03D\n//*DMLINK.SYSIN DD *\n//*  INCLUDE SYSLIB(CSCGQQ01)\n//*  INCLUDE SYSLIB(CSCGQQ02)\n//*  INCLUDE SYSLIB(CSCGQQ03)\n//*  INCLUDE SYSLIB(CSCGQQ04)\n//*  INCLUDE SYSLIB(CSCGQQ05)\n//*  INCLUDE SYSLIB(CSCGQQ06)\n//*  INCLUDE SYSLIB(CSCGQQ07)\n//*  INCLUDE SYSLIB(CSCGQQ08)\n//*  INCLUDE SYSLIB(CSCGQQ09)\n//*  INCLUDE SYSLIB(CSCGQQ10)\n//*  INCLUDE SYSLIB(CSCGQQ11)\n//*  INCLUDE SYSLIB(CSCGQQ12)\n//*  INCLUDE SYSLIB(CSCGQQ13)\n//*  INCLUDE SYSLIB(CSCGQQ14)\n//*  INCLUDE SYSLIB(CSCGQQ15)\n//*  INCLUDE SYSLIB(CSCGQQ16)\n//*  INCLUDE SYSLIB(CSCGQQ17)\n//*  INCLUDE SYSLIB(CSCGQQ18)\n//*  INCLUDE SYSLIB(CSCGQQ19)\n//*  INCLUDE SYSLIB(CSCGQQ20)\n//*  INCLUDE SYSLIB(CSCGQQ21)\n//*  INCLUDE SYSLIB(CSCGQQ22)\n//*  ENTRY QUEUE\n//* /*\n//ASM61 EXEC DMASM,MEMBER=CSCZA03D\n//ASM62 EXEC DMASM,MEMBER=CSCGI03D\n//ASM63 EXEC DMASM,MEMBER=CSCGU03D\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 2\n//*\n//*\n//CMDSBJB4 JOB (U32048,17F),GUY,CLASS=A,MSGCLASS=E,TYPRUN=HOLD\n//DMCOPY   PROC   LINKLIB='SFTB.SP310#.LOAD',\n//         TARGLIB=\n//DMCOPY EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1  DD DSN=&LINKLIB.,DISP=SHR\n//SYSUT2  DD DSN=&TARGLIB.,DISP=SHR\n//SYSUT3 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT4 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//     PEND\n//COPY2 EXEC DMCOPY,TARGLIB='SYS1.ESA.BFGLPA'\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDDUMMY,,R))\n S M=((CSCSA03D,IEESA03D,R))\n S M=((CSCSC03D,IEESC03D,R))\n S M=((CSCSD03D,IEESD03D,R))\n S M=((CSCSE03D,IEESE03D,R))\n S M=((CSCSF03D,IEESF03D,R))\n S M=((CSCSG03D,IEESG03D,R))\n S M=((CSCSH03D,IEESH03D,R))\n S M=((CSCSI03D,IEESI03D,R))\n S M=((CSCSJ03D,IEESJ03D,R))\n S M=((CSCSK03D,IEESK03D,R))\n S M=((CSCSL03D,IEESL03D,R))\n S M=((CSCSM03D,IEESM03D,R))\n S M=((CSCSN03D,IEESN03D,R))\n S M=((CSCSO03D,IEESO03D,R))\n S M=((CSCSP03D,IEESP03D,R))\n S M=((CSCSQ03D,IEESQ03D,R))\n S M=((CSCSR03D,IEESR03D,R))\n S M=((CSCSS03D,IEESS03D,R))\n S M=((CSCZA03D,IEEZA03D,R))\n S M=((CSCZB03D,IEEZB03D,R))\n S M=((CSCZC03D,IEEZC03D,R))\n S M=((CSCZJ03D,IEEZJ03D,R))\n S M=((CSCZP03D,IEEZP03D,R))\n S M=((CSCZS03D,IEEZS03D,R))\n/*\n./       ADD   NAME=BFGINST1\n//LANEJ     JOB LANEJ,TECHSUPPORT,\n//*            USER=IBMUSER,\n//         NOTIFY=LANEJ,\n//         REGION=6M,\n//             MSGLEVEL=(1,1),MSGCLASS=X,\n//             CLASS=Z\n//*JOBLIB DD DSN=LANE.TECTSG.LOAD,DISP=SHR\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//*   THIS JCL IS IN:        LANEJ.V325.FILE261.PDS(BFGINST1)\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//L0 OUTPUT LINECT=0,DEFAULT=YES\n//DMASM    PROC   MEMBER=,LNCT=80,\n//         ASMLIB='LANEJ.V325.FILE261.PDS',\n//         LINKLIB='LANEJ.TECTSG.LOAD'\n//ASM EXEC PGM=IEV90,PARM=(LOAD,NODECK,'LINECNT=&LNCT.'),\n//        REGION=4096K\n//SYSLIB   DD   DSN=&ASMLIB,DISP=SHR\n//*        DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSVIO,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSVIO,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSVIO,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=*,FCB=8,OUTPUT=*.L0\n//SYSLIN DD  DSN=&&SYSGO,UNIT=SYSVIO,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS),DCB=BLKSIZE=400\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//DMLINK EXEC PGM=IEWL,\n//        REGION=4096K,\n//          PARM='XREF,LET,LIST,AC=1'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSVIO,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=*\n//     PEND\n//DMLINK   PROC   MEMBER=,\n//         LINKLIB='LANEJ.TECTSG.LOAD'\n//DMLINK EXEC PGM=IEWL,\n//        REGION=4096K,\n//          PARM='XREF,LET,LIST,AC=1'\n//SYSLIN   DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSVIO,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=*\n//     PEND\n//ASM17 EXEC DMASM,MEMBER=CSCSJ03D\n//ASM00 EXEC DMASM,MEMBER=CMDDUMMY\n//ASM01 EXEC DMASM,MEMBER=CMDSBCSC\n//ASM02 EXEC DMASM,MEMBER=CMDSBINT\n//ASM03 EXEC DMASM,MEMBER=CMDSBSYS\n//ASM04 EXEC DMASM,MEMBER=CMDTSO\n//ASM05 EXEC DMASM,MEMBER=CMDSBTSO\n//ASM05A EXEC DMASM,MEMBER=CMDSBMON\n//ASM06 EXEC DMASM,MEMBER=CSCSB03D\n//ASM07 EXEC DMASM,MEMBER=CSCSA03D\n//DMLINK.SYSIN DD *\n INCLUDE SYSLIB(CSCSB03D)\n ENTRY IEESA03D\n/*\n//ASM08 EXEC DMASM,MEMBER=CSCSC03D\n//ASM09 EXEC DMASM,MEMBER=CSCSD03D\n//ASM10 EXEC DMASM,MEMBER=CSCSE03D\n//ASM11 EXEC DMASM,MEMBER=CSCSF03D\n//ASM12 EXEC DMASM,MEMBER=CSCSG03D\n//ASM13 EXEC DMASM,MEMBER=CSCSH03D\n//ASM14 EXEC DMASM,MEMBER=CSCSI03D\n//ASM15 EXEC DMASM,MEMBER=CSCSJ03D\n//ASM16 EXEC DMASM,MEMBER=CSCSK03D\n//ASM17A EXEC DMASM,MEMBER=CSCSZ03D\n//ASM18 EXEC DMASM,MEMBER=CSCSM03D\n//ASM19 EXEC DMASM,MEMBER=CSCSN03D\n//ASM20 EXEC DMASM,MEMBER=CSCSO03D\n//ASM21 EXEC DMASM,MEMBER=CSCSP03D\n//ASM22 EXEC DMASM,MEMBER=CSCSQ03D\n//ASM23 EXEC DMASM,MEMBER=CSCSR03D\n//ASM24 EXEC DMASM,MEMBER=CSCSS03D\n//ASM25 EXEC DMASM,MEMBER=CSCZB03D\n//ASM26 EXEC DMASM,MEMBER=CSCZC03D\n//ASM27 EXEC DMASM,MEMBER=CSCZJ03D\n//ASM28 EXEC DMASM,MEMBER=CSCZP03D\n//ASM29 EXEC DMASM,MEMBER=CSCZS03D\n//ASM30 EXEC DMASM,MEMBER=CSCGA03D\n//ASM31 EXEC DMASM,MEMBER=CSCGE03D\n//ASM32 EXEC DMASM,MEMBER=CSCGF03D\n//ASM33 EXEC DMASM,MEMBER=CSCGH03D\n//ASM34 EXEC DMASM,MEMBER=CSCGJ03D\n//ASM35 EXEC DMASM,MEMBER=CSCGO03D\n//ASM36 EXEC DMASM,MEMBER=CSCGS03D\n//*ASM37 EXEC DM*ASM,MEMBER=CSCGQQ00\n//*ASM38 EXEC DM*ASM,MEMBER=CSCGQQ01\n//*ASM39 EXEC DM*ASM,MEMBER=CSCGQQ02\n//*ASM40 EXEC DM*ASM,MEMBER=CSCGQQ03\n//*ASM41 EXEC DM*ASM,MEMBER=CSCGQQ04\n//*ASM42 EXEC DM*ASM,MEMBER=CSCGQQ05\n//*ASM43 EXEC DM*ASM,MEMBER=CSCGQQ06\n//*ASM44 EXEC DM*ASM,MEMBER=CSCGQQ07\n//*ASM45 EXEC DM*ASM,MEMBER=CSCGQQ08\n//*ASM46 EXEC DM*ASM,MEMBER=CSCGQQ09\n//*ASM47 EXEC DM*ASM,MEMBER=CSCGQQ10\n//*ASM48 EXEC DM*ASM,MEMBER=CSCGQQ11\n//*ASM49 EXEC DM*ASM,MEMBER=CSCGQQ12\n//*ASM50 EXEC DM*ASM,MEMBER=CSCGQQ13\n//*ASM51 EXEC DM*ASM,MEMBER=CSCGQQ14\n//*ASM52 EXEC DM*ASM,MEMBER=CSCGQQ15\n//*ASM53 EXEC DM*ASM,MEMBER=CSCGQQ16\n//*ASM54 EXEC DM*ASM,MEMBER=CSCGQQ17\n//*ASM55 EXEC DM**ASM,MEMBER=CSCGQQ18\n//*ASM56 EXEC DM*ASM,MEMBER=CSCGQQ19\n//*ASM57 EXEC DM*ASM,MEMBER=CSCGQQ20\n//*ASM58 EXEC DM*ASM,MEMBER=CSCGQQ21\n//*ASM59 EXEC DM*ASM,MEMBER=CSCGQQ22\n//*LNK60 EXEC DMLINK,MEMBER=CSCGQ03D\n//*DMLINK.SYSIN DD *\n//*  INCLUDE SYSLIB(CSCGQQ01)\n//*  INCLUDE SYSLIB(CSCGQQ02)\n//*  INCLUDE SYSLIB(CSCGQQ03)\n//*  INCLUDE SYSLIB(CSCGQQ04)\n//*  INCLUDE SYSLIB(CSCGQQ05)\n//*  INCLUDE SYSLIB(CSCGQQ06)\n//*  INCLUDE SYSLIB(CSCGQQ07)\n//*  INCLUDE SYSLIB(CSCGQQ08)\n//*  INCLUDE SYSLIB(CSCGQQ09)\n//*  INCLUDE SYSLIB(CSCGQQ10)\n//*  INCLUDE SYSLIB(CSCGQQ11)\n//*  INCLUDE SYSLIB(CSCGQQ12)\n//*  INCLUDE SYSLIB(CSCGQQ13)\n//*  INCLUDE SYSLIB(CSCGQQ14)\n//*  INCLUDE SYSLIB(CSCGQQ15)\n//*  INCLUDE SYSLIB(CSCGQQ16)\n//*  INCLUDE SYSLIB(CSCGQQ17)\n//*  INCLUDE SYSLIB(CSCGQQ18)\n//*  INCLUDE SYSLIB(CSCGQQ19)\n//*  INCLUDE SYSLIB(CSCGQQ20)\n//*  INCLUDE SYSLIB(CSCGQQ21)\n//*  INCLUDE SYSLIB(CSCGQQ22)\n//*  ENTRY QUEUE\n//* /*\n//ASM61 EXEC DMASM,MEMBER=CSCZA03D\n//ASM62 EXEC DMASM,MEMBER=CSCGI03D\n//ASM63 EXEC DMASM,MEMBER=CSCGU03D\n./       ADD   NAME=BFGINST2\n//CMDSBJB4 JOB (U32048,17F),GUY,CLASS=A,MSGCLASS=T\n//DMCOPY   PROC   LINKLIB='SFTB.SP310#.LOAD',\n//         TARGLIB=\n//DMCOPY EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1  DD DSN=&LINKLIB.,DISP=SHR\n//SYSUT2  DD DSN=&TARGLIB.,DISP=SHR\n//SYSUT3 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT4 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//     PEND\n//COPY2 EXEC DMCOPY,TARGLIB='SYS1.ESA.BFGLPA'\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CSCSJ03D,IEESJ03D,R))\n/*\n./       ADD   NAME=CMDDOCTN\n#$#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                      COMMAND  SUB-SYSTEM  COMMANDS\n                  --------------------------------------\n\n\n\n\n\n                     UPDATED ON -   DEC 30, 1981\n\n\n                     VERSION -      2.5\n\n\n                     WRITTEN BY -   A. R. MAGNUSON\n\n                     UPDATED BY -   A. CASINGHINO\n#$#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                      COMMAND  SUB-SYSTEM  COMMANDS\n                  --------------------------------------\n\n\n\n\n\n                     UPDATED ON -   DEC 30, 1981\n\n\n                     VERSION -      2.5\n\n\n                     WRITTEN BY -   A. R. MAGNUSON\n\n                     UPDATED BY  -  A. CASINGHINO\n#$#\n\n         COMMAND SUB-SYSTEM  -        BASIC OPERATION FLOW\n-----------------------------------------------------------------------\n\n\n\n\n\n\n\n\n  I------------I         I------------I            SSCVT CHAIN BUILT BY\n  I    CVT     I         I   JESCT    I            NIP FROM 4 BYTE\n  I  +X'128'   I-------->I   +X'18'   I---------/  NAMES IN SUBSYS NAME\n  I            I         I            I       /    TABLE.\n  I------------I         I------------I     /      CSECT -   IEFJESNM\n                                          /        MODULE -  IEEVIPL\n          /-----------------------------/\n        /\n      /\n    /  I------------I         I------------I         I------------I\n  /    I   SSCVT    I         I   SSCVT    I         I   SSCVT    I\n/----->I  +X'04'    I-------->I   +X'04'   I-------->I   +X'04'   I--->\n       I   'JES2'   I         I   'MSTR'   I         I   'CMD1'   I\n       I            I         I            I         I   +X'16'   I---/\n       I------------I         I------------I         I------------I /\n                                                                  /\n                                                                /\n          /---------------------------------------------------/\n        /\n      /\n    /  I-----------------------I     SSVT FOR CMD1 IS BUILT BY CMDSBINT\n  /    I         SSVT          I     AT CMD1 START UP TIME.\n/----->I                       I     CMDSBINT ISSUES GETMAIN FOR SSVT\n       I +0   RESERVED         I     AND INITIALIZES IT.\n       I +2   NO. OF FUNCTIONS I\n       I +4   FUNCTION MATRIX  I\n       I      (256 BYTES)      I\n       I +260 CMDDUMMY ADDR    I\n       I +264 CMD1 WORK AREA   I\n       I-----------------------I\n#$#\n\n\n       I-----------------------I     GETMAIN SSVT.\n       I      CMDSBINT         I     INITIALIZE SSVT.\n       I-----------------------I     LOAD CMDDUMMY.\n       I                       I     LOAD CMDSBSYS.\n       I   INITIALIZATION      I     OVERLAY CMDDUMMY WITH CMDSBSYS.\n       I                       I     ATTACH CMDSBCSC IF NECESSARY.\n       I                       I     LOAD ALL COMMAND MODULES AND BUILD\n       I                       I     CMD TABLE FOR USE BY CMDSBSYS.\n       I                       I     STORE SSVT IN SSCVT TO ACTIVATE.\n       I-----------------------I\n       I                       I\n       I                       I     HANDLE ALL ## COMMANDS.\n       I   ## CMD MONITOR      I     STIMER WAIT IF ISSUED UNDER\n       I                       I     MASTER SCHEDULER COULD LOCK OUT\n       I                       I     CONSOLES.\n       I-----------------------I\n\n\n\n\n       I-----------------------I     READ CSCDATA DATA SET.\n       I      CMDSBCSC         I     IF COMMAND, VALIDATE COMMAND AND\n       I-----------------------I     WRITE IT TO CSCDATA DAT SET.\n       I                       I     IF EXECUTE, LOAD, CHANGE WTO TO\n       I                       I     BRANCH SEQUENCE TO SAVE OUTPUT.\n       I                       I     BRANCH ENTER COMMAND MODULE.\n       I  CROSS SYSTEM CONTROL I     WRITE CSCDATA DATA SET WITH\n       I                       I     COMMAND OUTPUT.\n       I                       I     IF OUTPUT, ISSUE WTO FOR ALL MSGS.\n       I                       I     WRITE CSCDATA DATA SET TO CLEAR\n       I                       I     AND ALLOW NEXT COMMAND.\n       I-----------------------I\n\n\n\n\n       I-----------------------I\n       I      CMDSBSYS         I\n       I-----------------------I\n       I                       I     ENTERED FROM IEFJSREQ FOR ALL\n       I   COMMAND PROCESSOR   I     COMMANDS.  OPERATES UNDER MASTER\n       I                       I     SCHEDULER ADDRESS SPACE.\n       I                       I     VALIDATE COMMAND.  IF NOT # OR ##\n       I                       I     INDICATE COMMAND NOT PROCESSED IN\n       I                       I     SSIB AND RETURN TO MASTER SCHEDLR.\n       I                       I     IF ## COMMAND,  MOVE COMMAND TO\n       I                       I     MONITOR CMD COMMUNICATION AREA.\n       I                       I     IF CROSS SYSTEM COMMAND, MOVE\n       I                       I     COMMAND TO CROSS SYSTEM CMD\n       I                       I     COMMUNICATION AREA.\n       I                       I     INDICATE COMMAND PROCESSED IN\n       I                       I     SSIB AND RETURN TO MASTER SCHEDLR.\n       I                       I     IF # COMMAND,  LOAD COMMAND MODULE\n       I                       I     ADDR FROM CMD TABLE AND BRANCH.\n       I-----------------------I\n#$#\n         CMD SUB-SYSTEM INSTALLATION\n\n\n\n         1.  ASSEMBLE AND LINK EACH COMMAND MODULE INTO SYS1.LPALIB,\n             OR SYS1.LINKLIB IF YOU PLAN TO MLPA THEM.\n             NOTE THAT IEESA03D AND IEESB03D MUST BE LINKEDITED\n             TOGETHER AS IEESA03D.\n\n\n         2.  ASSEMBLE AND LINK CMDSBINT,CMDSBSYS, AND CMDSBCSC INTO\n             SYS1.LINKLIB OR ANY LNKLSTNN LIBRARY YOU WISH.\n\n\n         3.  ASSEMBLE AND LINK A DUMMY MODULE CALLED  CMDDUMMY  INTO\n             SYS1.LPALIB, OR SYS1.LINKLIB IF YOU WANT TO MLPA IT.\n             CMDDUMMY MUST BE AT LEAST 2048 BYTES LONG AND MUST BE\n             SPECIFIED IN AN IEAFIXNN MEMBER OF PARMLIB TO CAUSE\n             CMDDUMMY TO BE FIXED IN LOW CORE.\n             AT SUB-SYSTEM INITIALIZATION CMDDUMMY IS OVERLAID IN LOW\n             CORE WITH MODULE CMDSBSYS,  BY CMDSBINT THE COMMAND\n             SUB-SYSTEM INITIALIZATION ROUTINE.\n\n\n         4.  CREATE A PROC CALLED  CMD1  AND PUT IT IN SYS1.PROCLIB.\n\n         //CMD1   PROC  A=ASE0,\n         //             B='$',\n         //             C=CSK0,\n         //             D=DSD0,\n         //             E=ESS0,\n         //             F=FSF0,\n         //             G='$',\n         //             H=HSM0,\n         //             I=ISJ0,\n         //             J=JSL0,\n         //             K='$',\n         //             L=LSC0,\n         //             M=MSO0,\n         //             N=NSA0,\n         //             O=OSR0,\n         //             P=PSP0,\n         //             Q=QSQ0,\n         //             R=RSG0,\n         //             S=SSH0,\n         //             T=TSN0,\n         //             U='$',\n         //             V=VSI0,\n         //             W='$',\n         //             X='$',\n         //             Y='$',\n         //             Z='ZSZ0'\n         //CMD1  EXEC PGM=CMDSBINT,TIME=1440,DPRTY=(15,10)\n         // PARM='&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z'\n         //SYSUDUMP  DD  SYSOUT=A\n         //CSC#....  DD  DUMMY\n         //CSCDATA   DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n\n\n         WHERE  -    FOR CSC#.... REPLACE .... WITH SMF SYSID OF ONE\n                     OF THE SYSTEMS USING CROSS-SYSTEM COMMANDS.\n                     AS MANY CSC##.... DD CARDS AS NECESSARY MAY EXIST.\n#$#\n         5.  ALLOCATE A ONE TRACK DATASET FOR THE CSCDATA DD IN THE\n             CMD1 PROC. WRITE ONE 16 BYTE RECORD OF HEX ZEROS IN THE\n             DATASET TO INITIALIZE IT.  IF YOU DO NOT WANT TO USE THE\n             CROSS-SYSTEM COMMAND FACILITY DO NOT PUT THE CSCDATA\n             DD CARD IN THE CMD1 JCL PROC.\n\n\n         6.  SUPERZAP (OR SYSGEN IN SCHEDULER MACRO SUBSYS=CMD1),  THE\n             SUB-SYSTEM NAME TABLE.\n\n                 NAME IEEVIPL IEFJESNM\n                 VER  0008  00000000\n                 REP  0008  C3D4C4F1\n\n\n         7.  COPY INTO A LNKLSTNN LIBRARY OR SYS1.LINKLIB ALL THE\n             SUB-SYSTEM MODULES IEESA03D - IEEZS03D RENAMING THEM TO\n             CSCSA03D - CSCZS03D. THESE ARE USED FOR THE CROSS-SYSTEM\n             # COMMANDS AND THE TSO # COMMANDS.\n\n\n         8.  SOME HELPFUL HINTS THAT MAY SAVE SOME PROBLEMS.\n             A. TO LINK QCB TRACE TOGETHER USE THE FOLLOWING\n                (1).  INCLUDE LIBRARY(IEESA03D)\n                (2).  INCLUDE LIBRARY(IEESB03D)\n                (3).  ENTRY IEESA03D\n                (4).  NAME  IEESA03D(R)\n             B. LINK CMDDUMMY WITH REUS, RENT LINKEDIT ATTRIBUTES.\n             C. LINK CMDSBINT AND CMDSBCSC WITH AC=1 ATTRIBUTE.\n             D. LINK CMDSBSYS WITH REUS, RENT AND AC=1 ATTRIBUTES.\n             E. BE SURE ALL # COMMANDS (IEES*03D) ARE NOT IN ANY\n                LNKLSTNN LIBRARIES. (UNLESS YOU ARE MPLAING FROM IT)\n             F. MAKE SURE CMDSBSYS, CMDSBINT, AND CMDSBCSC\n                ARE NOT IN LPA.\n             G. MAKE SURE THAT CMDDUMMY IS IN FLPA.\n             H. MAKE SURE THAT ALL # COMMANDS ARE IN LPA.\n                (PLPA,MLPA, OR FLPA)\n             I. WHEN LINKING THE # COMMANDS DO NOT USE RENT REUS\n                ATTRIBUTES.  IT DOESNT MATTER FOR LPA BUT EXECUTION\n                OF COPIED 'CSC' MODULES WITH THESE ATTRIBUTES WILL\n                CAUSE 0C4'S.\n#$#\n\n\n         9.  THE BASE SYSTEM FOR THE CMD SUB-SYSTEM IS SE-1 WITHOUT\n             SU64.  IT WILL BE NECESSARY TO REPLACE SOME MODULES IF\n             YOUR SYSTEM IS NOT SE-1. THE MODULE PREFIX NAMES FOR\n             REPLACEMENT MODULES ARE AS FOLLOWS -\n             NSE -   NON-SE  NON-SU64       SE2 -   SE-2 AND SU64.\n             SP1 -   MVS/SP1.0 1.1\n\n\n         10. IF YOU WISH TO ALLOW # COMMANDS UNDER TSO,\n             LINK MODULES CMDTSO, AND/OR CMDSBTSO WITH LINKEDIT\n             ATTRIBUTES OF NOT REENTRANT INTO ANY LIBRARY.\n             LINK GRAPHIC DISPLAY MODULES CSCGA03D, CSCGE03D, CSCGF03D,\n             CSCGH03D, CSCGI03D, CSCGJ03D, CSCGO03D, CSCGQ03D,\n             CSCGS03D, AND CSCGU03D,\n             INTO THE SAME LIBRARY AS CMDSBTSO.\n             NOTE -   REMEMBER REPLACEMENT MODULES.\n             NSE -   NON-SE  NON-SU64       SE2 -   SE-2 AND SU64.\n             SP1 -   MVS/SP1.0 1.1\n\n\n         11. IF YOU WISH TO ALLOW # COMMANDS AT A STANDALONE 3270,\n             LINK MODULE CMDSBMON WITH LINKEDIT ATTRIBUTES\n             OF NOT REENTRANT INTO ANY AUTHORIZED LIBRARY.\n             LINK GRAPHIC DISPLAY MODULES CSCGA03D, CSCGE03D, CSCGF03D,\n             CSCGH03D, CSCGI03D, CSCGJ03D, CSCGO03D, CSCGQ03D,\n             CSCGS03D, AND CSCGU03D,\n             INTO THE SAME LIBRARY AS CMDSBMON.\n             NOTE -   REMEMBER REPLACEMENT MODULES.\n             NSE -   NON-SE  NON-SU64       SE2 -   SE-2 AND SU64.\n             SP1 -   MVS/SP1.0 1.1\n\n\n         12. PRIOR TO ASSEMBLING CSCGQQXX MODULES IT WILL BE NECESSARY\n             TO EDIT MACRO QCOMMON IN ORDER TO PROVIDE SYS1.HASPCKPT\n             DEVTYPE AND VOLSER, AND SYSTEM IDS OF ALL SYSTEMS IN A\n             MULTI-ACCESS SPOOL ENVIRONMENT.\n             SYSTEM IDS MUST BE SPECIFIED IN THE SAME ORDER AS THEY\n             APPEAR IN THE JES2PARM MEMBER OF SYS1.PARMLIB.\n             NOTE THAT THIS VERSION OF THE QUEUE COMMAND DOES NOT\n             WORK WITH NJE SUPPORT AND MAY NOT WORK WITH THE DUAL\n             CHECKPOINT PTF ON.\n#$#\n         COMMAND  SUB-SYSTEM  INITIALIZATION\n\n\n\n\n               TO START  -\n\n\n                           ISSUE COMMAND  (S CMD1)  WHICH WILL START\n                           A JOB TO INITIALIZE AND CONNECT THE\n                           COMMAND SUB-SYSTEM AND REMAIN ACTIVE TO\n                           SERVICE MONITOR AND CROSS-SYSTEM COMMANDS.\n                           CMD1 WILL SET ITSELF NON-SWAPPABLE.\n\n\n                           IF YOU WISH TO BYPASS USE OF ANY OF THE\n                           # COMMANDS, YOU MAY SO SPECIFY WHEN YOU\n                           ISSUE THE START COMMAND.\n\n\n                           EXAMPLE   -\n\n                           S CMD1,D=$     (WILL ELIMINATE USE OF #D)\n\n\n\n                           IF YOU WISH TO DISABLE ANY OF THE\n                           ## COMMANDS, YOU MAY ISSUE ##$X COMMANDS\n                           FOR EACH COMMAND YOU WISH TO DISABLE AFTER\n                           YOU START CMD1.\n\n                           WHERE  X -      IS THE COMMAND TO DELETE\n\n\n\n\n               TO STOP THE CROSS-SYSTEM FACILITY -\n\n                           ISSUE COMMAND (#**) WHICH WILL DISCONNECT\n                           THE CROSS-SYSTEM COMMANDS AND ISSUE A\n                           MESSAGE TO INDICATE CSC HAS BEEN STOPPED.\n\n\n\n\n               TO END  -\n\n                           ISSUE COMMAND (P CMD1) WHICH WILL DISCONNECT\n                           THE COMMAND SUB-SYSTEM, AND ISSUE A\n                           NON-ROLLABLE MESSAGE TO THE OPERATOR.\n\n\n                           CMDSBSYS -   COMMAND SUB-SYSTEM TERMINATED\n#$#\n        COMMAND SUB-SYSTEM COMMANDS  (#X)\n\n\n\n             ALL OF THE FOLLOWING COMMANDS HAVE SOME COMMON SYNTAX\n             RULES AND SOME COMMON OUTPUT.\n\n\n\n        SYNTAX -\n\n\n             1.    THERE MUST BE 1 BLANK OR NO BLANKS BETWEEN THE #\n                   AND THE COMMAND ID,  AND THERE MAY OR MAY NOT BE\n                   A SPACE OR SPACES FOLLOWING THE COMMAND ID.\n\n                   EXAMPLES -    #X    # X    #XY    #X Y    # X Y\n                                ##X   ## X   ##XY   ##X Y   ## X Y\n\n             2.    ,T=NNN   PARAMETER FOR ANY ## COMMAND SPECIFIES\n                            A 1-3 DIGIT TIME LIMIT FOR THE MONITOR\n                            COMMAND.  ANY VALUE FROM 1 TO 999 MAY BE\n                            SPECIFIED.\n\n             3.    IF THE  ,T=NNN  PARAMETER IS SPECIFIED IT MUST BE\n                   THE LAST PARAMETER IN THE COMMAND, UNLESS THE\n                   ,L=CC  PARAMETER IS ALSO SPECIFIED, IN WHICH CASE\n                   THE ,T=NNN PARAMETER MUST PRECEDE IT.\n\n             4.    ,L=CC    PARAMETER FOR ANY COMMAND DIRECTS THE\n                            OUTPUT OF THE COMMAND TO THE SPECIFIED\n                            CONSOLE ID.   OMISSION OF THIS PARAMETER\n                            CAUSES THE COMMAND OUTPUT TO RETURN TO\n                            THE CONSOLE THAT ISSUED THE COMMAND.\n\n             5.    IF THE  ,L=CC  PARAMETER IS SPECIFIED IT MUST BE -\n                       A.   THE LAST PARAMETER IN THE COMMAND\n                       B.   FOR A TWO DIGIT DECIMAL CONSOLE ID\n\n             6.    ,S=XXXX  PARAMETER FOR ANY # COMMAND SPECIFIES\n                            A 4 DIGIT SYSTEM ID (FROM SMF PARMS)\n                            TO SEND THE COMMAND TO.  THE COMMAND\n                            IS EXECUTED ON THE SYSTEM IT IS SENT TO\n                            AND THE OUTPUT IS SENT BACK TO THE\n                            ISSUING CONSOLE OR THE CONSOLE\n                            SPECIFIED BY THE L=NN PARAMETER.\n                            COMMANDS  #T  AND ALL  ## COMMANDS\n                            CANNOT BE EXECUTED CROSS-SYSTEM.\n\n\n        OUTPUT -\n\n\n             FOR ALL COMMANDS A HEADER LINE IS PRINTED INDICATING\n             THE COMMAND ID, ISSUING CONSOLE ID, SYSTEM ID AND DATE.\n             SINCE ALL COMMAND OUTPUT IS ECHOED IN THE SYSTEM LOG,\n             THIS PROVIDES AN EASY IDENTIFICATION METHOD FOR\n             WHICH SYSTEM AND WHAT DATE THE SYSTEM LOG REPRESENTS.\n\n\n             EXAMPLE -\n\n                   ---  CMD SBSYS (#X)  L=10  K168  76.362  ---\n\n\n\n        ERROR RECOVERY -\n\n\n             ALL COMMANDS EXECUTE IN AN ESTAE ENVIRONMENT,\n             AND ISSUE APPROPRIATE MESSAGES IF AN ABEND OCCURS.\n#$#\n        COMMAND SUB-SYSTEM COMMANDS UNDER TSO    (# X)\n\n\n\n        IN ORDER TO EXECUTE # COMMANDS UNDER TSO A CLIST NAMED '#'\n        IS INSTALLED WHICH CALLS MODULE CMDTSO PASSING AS A\n        PARAMETER THE # COMMAND AND ITS SUB-PARMS.\n        NOTE THAT CROSS-SYSTEM COMMANDS CAN BE ISSUED FROM TSO\n        AS IF THEY WERE ISSUED FROM AN OPERATOR CONSOLE AND THE\n        OUTPUT IS RETURNED TO THE TSO TERMINAL.\n        THE FOLLOWING IS A LIST OF THE '#' CLIST -\n\n        PROC 1 CMD\n        ALLOC FI(CSCDATA) DA('SYS1.SYSTEM.CMDSBSYS.CSCDATA') SHR\n        CALL 'SYS1.LINKLIB(CMDTSO)' '&CMD.'\n        END\n\n\n        IN ORDER TO EXECUTE ## COMMANDS UNDER TSO A CLIST NAMED '##'\n        IS INSTALLED WHICH CALLS MODULE CMDTSO PASSING AS A\n        PARAMETER THE ## COMMAND AND ITS SUB-PARMS.\n        NOTE THAT CROSS-SYSTEM COMMANDS CAN BE ISSUED FROM TSO\n        AS IF THEY WERE ISSUED FROM AN OPERATOR CONSOLE AND THE\n        OUTPUT IS RETURNED TO THE TSO TERMINAL.\n        THE FOLLOWING IS A LIST OF THE '##' CLIST -\n\n        PROC 1 CMD\n        CALL 'SYS1.LINKLIB(CMDTSO)' '#&CMD.'\n        END\n\n\n        ALL OF THE FOLLOWING COMMANDS HAVE SOME COMMON SYNTAX\n        RULES AND SOME COMMON OUTPUT.\n\n\n        SYNTAX -\n\n\n             1.    THERE MUST BE 1 BLANK BETWEEN THE  #  AND THE\n                   COMMAND ID.     (# X)  OR  (## X).\n\n             2.    THERE MAY NOT BE SPACES BETWEEN THE COMMAND ID\n                   AND ANY SUB-PARAMETERS.   (# XY)  OR  (## XY).\n\n\n        OUTPUT -\n\n\n             FOR ALL COMMANDS A HEADER LINE IS PRINTED INDICATING\n             THE COMMAND ID, SYSTEM ID, DATE, TIME, USERID, AND ASID.\n             AN EXAMPLE OF THE HEADER FOLLOWS -\n\n ---  <TSO>  CMD SBSYS (#X)  K168  78.100  1430  TMTCE07  0023  ---\n\n\n\n\n        NOTE -  A.   CERTAIN COMMANDS AND/OR SUBCOMMANDS CANNOT BE\n                     EXECUTED UNDER TSO.\n                     ERROR MESSAGES ARE ISSUED IF ANY OF THE FOLLOWING\n                     COMMANDS ARE ISSUED.\n\n                     1. # L    2. # T    3. # D (ZAP ONLY)\n                     4. # E    5. ##C\n\n\n                B.   IF THE COMMAND YOU WISH TO ENTER CONTAINS\n                     A COMMA (,) SUBSTITUTE AN AT SIGN (@).\n\n                C.   IF THE COMMAND YOU WISH TO ENTER CONTAINS\n                     A SLASH-ASTERISK (/*) SUBSTITUTE A SLASH-NOT (/\u00ac).\n#$#\n        COMMAND SUB-SYSTEM TSO FULL SCREEN SUPPORT\n\n\n\n        IN ORDER TO EXECUTE THE TSO FULL SCREEN MONITOR\n        ENTER CMDSBTSO TO EXECUTE THE MONITOR AS A COMMAND PROCESSOR\n        (EXECUTION OF PGM OR OTHER CP IS ALLOWED ONLY IN THIS MODE),\n        OR CREATE A CLIST AS FOLLOWS -\n\n        PROC 0\n        ALLOC FI(CSCDATA) DA('SYS1.SYSTEM.CMDSBSYS.CSCDATA') SHR\n        CALL 'SYS1.LINKLIB(CMDSBTSO)'\n        END\n\n\n        WHEN EXECUTED THIS PROGRAM WILL ISSUE FULL SCREEN WRITES FOR\n        COMMAND OUTPUT FOR ANY # COMMAND OR ## COMMAND AS WELL AS\n        SOME SPECIAL GRAPHIC DISPLAY COMMANDS.  THE FIRST DISPLAY\n        PRODUCED IS A MENU SCREEN WHICH IS SELF-EXPLANATORY.\n        AN AUTOMATIC REFRESH OF ANY #, ##, OR GRAPHIC DISPLAY MAY BE\n        REQUESTED BY ENTERING A 2-DIGIT NUMERIC NUMBER OF SECONDS\n        IN REFRESH INTERVAL, AND OPTIONALLY A NUMBER OF INTERVALS\n        TO ALLOW AUTOMATIC REFRESH (DEFAULT IS 20).\n        NOTE THAT CROSS-SYSTEM COMMANDS CAN BE ISSUED FROM TSO\n        AS IF THEY WERE ISSUED FROM AN OPERATOR CONSOLE AND THE\n        OUTPUT IS RETURNED TO THE TSO TERMINAL.\n\n\n        ALL OF THE FOLLOWING COMMANDS HAVE SOME COMMON SYNTAX\n        RULES AND SOME COMMON OUTPUT.\n\n\n        SYNTAX -\n\n\n             1.    THERE MUST NOT BE SPACES BETWEEN THE # AND THE\n                   COMMAND ID.     (#X)  OR  (##X).\n\n             2.    THERE MUST NOT BE SPACES BETWEEN THE COMMAND ID\n                   AND ANY SUB-PARAMETERS.   (#XY)  OR  (##XY).\n\n\n        OUTPUT -\n\n\n             FOR ALL COMMANDS A HEADER LINE IS PRINTED INDICATING\n             THE COMMAND ID, SYSTEM ID, DATE, TIME, USERID, AND ASID.\n             AN EXAMPLE OF THE HEADER FOLLOWS -\n\n ---  <TSO>  CMD SBSYS (#X)  K168  78.100  1430  TMTCE07  0023  ---\n\n\n\n\n        NOTE -  A.   CERTAIN COMMANDS AND/OR SUBCOMMANDS CANNOT BE\n                     EXECUTED UNDER TSO.\n                     ERROR MESSAGES ARE ISSUED IF ANY OF THE FOLLOWING\n                     COMMANDS ARE ISSUED.\n\n                     1. # L    2. # T    3. # D (ZAP ONLY)\n                     4. # E    5. ##C    6. E (CHANNEL BUSY ONLY)\n#$#\n        COMMAND SUB-SYSTEM STANDALONE 3270 FULL SCREEN SUPPORT\n\n\n\n        IN ORDER TO EXECUTE THE STANDALONE FULL SCREEN MONITOR\n        CREATE A PROC AS FOLLOWS -\n\n        //CMDSBMON  PROC  U=XXX\n        //CMDSBMON  EXEC  PGM=CMDSBMON,PARM='&U.'\n        //CSCDATA  DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n        //SYSUDUMP  DD  SYSOUT=A\n        //CMDLOG    DD  SYSOUT=A\n        //*   WHERE  XXX  IS THE 3270 UNIT ADDRESS\n\n\n        WHEN EXECUTED THIS PROGRAM WILL ISSUE FULL SCREEN WRITES FOR\n        COMMAND OUTPUT FOR ANY # COMMAND OR ## COMMAND AS WELL AS\n        SOME SPECIAL GRAPHIC DISPLAY COMMANDS.  THE FIRST DISPLAY\n        PRODUCED IS A MENU SCREEN WHICH IS SELF-EXPLANATORY.\n        AN AUTOMATIC REFRESH OF ANY #, ##, OR GRAPHIC DISPLAY MAY BE\n        REQUESTED BY ENTERING A 2-DIGIT NUMERIC NUMBER OF SECONDS\n        IN REFRESH INTERVAL, AND OPTIONALLY A NUMBER OF INTERVALS\n        TO ALLOW AUTOMATIC REFRESH (DEFAULT IS 20).\n        NOTE THAT CROSS-SYSTEM COMMANDS CAN BE ISSUED\n        AS IF THEY WERE ISSUED FROM AN OPERATOR CONSOLE AND THE\n        OUTPUT IS RETURNED TO THE TERMINAL.\n\n\n        ALL OF THE FOLLOWING COMMANDS HAVE SOME COMMON SYNTAX\n        RULES AND SOME COMMON OUTPUT.\n\n\n        SYNTAX -\n\n\n             1.    THERE MUST NOT BE SPACES BETWEEN THE # AND THE\n                   COMMAND ID.     (#X)  OR  (##X).\n\n             2.    THERE MUST NOT BE SPACES BETWEEN THE COMMAND ID\n                   AND ANY SUB-PARAMETERS.   (#XY)  OR  (##XY).\n\n\n        OUTPUT -\n\n\n             FOR ALL COMMANDS A HEADER LINE IS PRINTED INDICATING\n             THE COMMAND ID, SYSTEM ID, DATE, TIME, USERID, AND ASID.\n             AN EXAMPLE OF THE HEADER FOLLOWS -\n\n ---  <MON>  CMD SBSYS (#X)  K168  78.100  1430  CMDSBMON  0023  ---\n\n\n\n\n        NOTE -  A.   CERTAIN COMMANDS AND/OR SUBCOMMANDS CANNOT BE\n                     EXECUTED UNDER THE STANDALONE MONITOR.\n                     ERROR MESSAGES ARE ISSUED IF ANY OF THE FOLLOWING\n                     COMMANDS ARE ISSUED.\n\n                     1. # T\n\n#$#\n                 COMMAND SUB-SYSTEM GENERAL MESSAGES\n              -----------------------------------------\n\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND PARAMETER ERROR\n\nDESCRIPTION ->    INVALID COMMAND STRUCTURE.\n\nOPER ACTION ->    REENTER COMMAND.\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND NOT SUPPORTED\n\nDESCRIPTION ->    INVALID COMMAND ENTERED.\n\nOPER ACTION ->    REENTER COMMAND.\n\n\n\nMESSAGE ->        CMD SUBSYS - CONSOLE NOT ACTIVE\n\nDESCRIPTION ->    CONSOLE SPECIFIED BY 'L=NN' PARAMETER IS NOT ACTIVE.\n\nOPER ACTION ->    VARY CONSOLE ONLINE BEFORE RETRYING COMMAND.\n\n\n\nMESSAGE ->        CMD SUBSYS - S CHKDUMP ISSUED FOR D DUMP\n\nDESCRIPTION ->    SUB-SYSTEM HAS INTERCEPTED A 'D DUMP' COMMAND\n                  AND ISSUED A 'S CHKDUMP' COMMAND.\n\nOPER ACTION ->    NONE.  INFORMATION ONLY.\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND SUB-SYSTEM TERMINATED\n\nDESCRIPTION ->    SUB-SYSTEM HAS TERMINATED NORMALLY.\n\nOPER ACTION ->    RESTART THE SUB-SYSTEM.\n\n\n\nMESSAGE ->        ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND\n\nDESCRIPTION ->    AN ESTAE ROUTINE HAS BEEN ENTERED TO PROCESS AN\n                  ABEND FOR THE COMMAND ENTERED.\n\nOPER ACTION ->    REENTER COMMAND.\n\n\n\n#$#\nMESSAGE ->        CMD SUBSYS - COMMAND REJECTED, SUBSYS BUSY\n\nDESCRIPTION ->    SUB-SYSTEM IS BUSY PROCESSING A PREVIOUS COMMAND.\n\nOPER ACTION ->    REENTER COMMAND.  IF PROBLEM PERSISTS, RESTART\n                  THE SUB-SYSTEM.\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND REJECTED, MONITOR BUSY\n\nDESCRIPTION ->    MONITOR CONTROL IS BUSY PROCESSING A PREVIOUS COMMAND.\n\nOPER ACTION ->    REENTER COMMAND.  IF PROBLEM PERSISTS FOR AN EXTENDED\n                  PERIOD OF TIME, RESTART THE SUB-SYSTEM.\n\n\n\nMESSAGE ->        CMD SUBSYS - MONITOR COMMAND ACCEPTED\n\nDESCRIPTION ->    MONITOR CONTROL HAS ACCEPTED THE ENTERED COMMAND.\n\nOPER ACTION ->    NONE.  INFORMATION ONLY.\n\n\n\nMESSAGE ->        CMD SUBSYS - XMPOST ERROR - RESTART SUBSYS\n\nDESCRIPTION ->    A CROSS-MEMORY POST ERROR HAS OCCURRED.\n\nOPER ACTION ->    RESTART THE SUB-SYSTEM.\n\n\n\nMESSAGE ->        CMD SUBSYS - ##X COMMAND DISABLED\n\nDESCRIPTION ->    MONITOR COMMAND ##X HAS BEEN DISABLED.\n\nOPER ACTION ->    TO REINSTATE COMMAND, RESTART THE SUB-SYSTEM.\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND NOT DISABLED\n\nDESCRIPTION ->    MONITOR COMMAND DISABLE REQUEST HAS FAILED.\n\nOPER ACTION ->    REENTER REQUEST.\n\n\n\n#$#\nMESSAGE ->        CMD SUBSYS - CSC PARAMETER ERROR\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL PARAMETER ERROR.\n                  MOST LIKELY THE 'S=XXXX' PARAMETER IS MISSING\n                  OR INVALID.\n\nOPER ACTION ->    REENTER COMMAND.\n\n\n\nMESSAGE ->        CMD SUBSYS - CSC INVALID COMMAND\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL INVALID COMMAND.\n                  COMMAND DOES NOT EXIST OR IS NOT VALID WHEN\n                  ISSUED AS A CROSS-SYSTEM COMMAND. (E.G. #T)\n\nOPER ACTION ->    REENTER COMMAND.\n\n\n\nMESSAGE ->        CMD SUBSYS - CSC #X COMMAND ACCEPTED\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL HAS ACCEPTED THE ENTERED COMMAND.\n\nOPER ACTION ->    NONE.  INFORMATION ONLY.\n\n\n\nMESSAGE ->        CMD SUBSYS - CSC BUSY, CMD PENDING ON SSSS\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL HAS DETECTED THAT A PREVIOUS\n                  COMMAND ENTERED ON SOME SYSTEM IS PENDING, AND HAS\n                  REJECTED THE COMMAND ENTERED.\n\nOPER ACTION ->    REENTER COMMAND.\n\n\n\nMESSAGE ->        CMD SUBSYS - CSC TIMEOUT, CMD PENDING ON SSSS\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL HAS DETECTED THAT A PREVIOUS\n                  COMMAND ENTERED ON SOME SYSTEM IS PENDING AND HAS\n                  EXCEEDED THE EXPECTED COMPLETION TIME.  THE PENDING\n                  COMMAND HAS BEEN AUTOMATICALLY RESET.\n\nOPER ACTION ->    NONE.  INFORMATION ONLY.\n\n\n\nMESSAGE ->        CMD SUBSYS - CSC STOPPED\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL HAS BEEN STOPPED.\n\nOPER ACTION ->    RESTART THE SUB-SYSTEM IF CROSS-SYSTEM COMMANDS\n                  ARE DESIRED.\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND REJECTED, CSC NOT ACTIVE\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL HAS BEEN STOPPED OR WAS NEVER\n                  ACTIVE.\n\nOPER ACTION ->    RESTART THE SUB-SYSTEM IF CROSS-SYSTEM COMMANDS\n                  ARE DESIRED.\n\n\n\nMESSAGE ->        CMD SUBSYS - COMMAND REJECTED, CSC BUSY\n\nDESCRIPTION ->    CROSS-SYSTEM CONTROL IS BUSY PROCESSING A PREVIOUS\n                  COMMAND.\n\nOPER ACTION ->    REENTER COMMAND.  IF PROBLEM PERSISTS, CSC WILL\n                  AUTOMATICALLY RESET THE PREVIOUS COMMAND.\n#$#\n      #A  COMMAND     (DISPLAY JOB STATUS -   EXPANDED  D A)\n\n\n\n               #A   ASID       4 LINES OF OUTPUT FOR AN ASID\n\n\n               #A   .JOBNAME   4 LINES OF OUTPUT FOR AN JOBNAME\n\n\n               #A              2 LINES OF OUTPUT FOR ALL JOBS\n\n\n               #A   0000       4 LINES OF OUTPUT FOR ALL JOBS\n\n\n               #A   XX,L       4 LINES OF OUTPUT FOR SELECTED TYPE\n\n\n               #A   XX         2 LINES OF OUTPUT FOR SELECTED TYPE\n\n\n               #A   XX,S       1 LINE OF OUTPUT FOR SELECTED TYPE\n\n\n               #A   XX,D       1 LINE OF DISPATCHABILITY OUTPUT\n\n\n                    WHERE  XX   IS ONE OF THE FOLLOWING TYPES -\n\n\n                    $A         SELECT ALL JOB, TSU, AND STC\n\n                    $J         SELECT ALL JOBS\n\n                    $S         SELECT ALL STARTED TASKS\n\n                    $T         SELECT ALL TSO USERS\n\n                    $I         SELECT ALL IDLE INITIATORS\n\n                    NN         SELECT ALL JOBS IN DOMAIN -   NN\n#$#\n                   E X A M P L E\n\n\n    TEST00   (000B) DP(112) SWL(010/016) SWC(0001)\n       PERF-NRS(0B/07/0B) DPRTY-NR(70/76) DMN(01)\n       Q(00) S(80) Y(40) A(58) T(83) E(00) U(00)\n       AS(FE2578) SR(06) OU(FE1080) A(0063/00000)\n\n\n\n    1ST LINE -\n\n         TEST00                JOBNAME\n         (000B)                ASID\n         DP(112)               DISPATCHING PRIORITY  (FROM ASCB)\n         SWL(010/016)          SWAP LOAD IN DECIMAL PAGES  (IN/OUT)\n         SWC(0001)             SWAP COUNT IN DECIMAL\n\n\n    2ND LINE -\n\n         PERF-NRS(0B/07/0B)    PERFORMANCE GROUP  (NEW/RESET/SPECIFIED)\n         DPRTY-NR(70/76)       DISPATCHING PRIORITY  (FROM OUCB)\n         DMN(01)               DOMAIN NUMBER\n\n\n    3RD LINE -\n\n         (OUCB FLAGS -   SEE DESCRIPTION IN FE HANDBOOK)\n\n\n    4TH LINE -\n\n         AS(FE2578)            ASCB ADDRESS\n         SR(06)                SWAP REASON CODE  (SEE TABLE BELOW)\n         QP(01)                DISPATCHING QUEUE POSITION\n         OU(FE1080)            OUCB ADDRESS\n         A(0063/00000)         ADDRESS SPACE SLOTS/VIO SLOTS\n\n\n\n         NOTE THAT IF THE SWAP REASON CODE IS  00,   QP(XX) WILL\n         PRINT TO INDICATE THE DISPATCHING QUEUE POSITION.\n\n\n\n\n    SWAP REASON CODES -\n\n\n         01        TERMINAL WAIT -   OWAITHI\n         02        TERMINAL WAIT -   INPUT\n         03        LONG WAIT\n         04        AUXILLARY STORAGE SHORTAGE\n         05        REAL STORAGE SHORTAGE\n         06        DETECTED WAIT\n         07        REQUEST SWAP\n         08        ENQ EXCHANGE SWAP\n         09        EXCHANGE ON RECOMMENDATION VALUE\n         0A        UNILATERAL SWAP\n         0B        TRANSITION SWAP\n         0C        LOGICAL SWAP\n         0D        LOGICAL SWAP FAIL\n#$#\n          #C   COMMAND   (CALCULATOR, TOD, AND MSTCONS SWITCH)\n\n\n\n\n         #C           DISPLAY TOD CLOCK HIGH-ORDER WORD\n\n         #CS          DISPLAY CURRENT SMF DATA SET\n\n\n         #CBNN,XX..X  SEND MESSAGE  NN  TIMES TO ALL ACTIVE\n                      DISPLAY TYPE CONSOLES.\n\n\n         #CMNN,XX..X  SEND MESSAGE  NN  TIMES TO THE\n                      CONSOLE SPECIFIED BY THE L=XX PARAMETER\n\n\n         #CXNNNN      CALCULATE CHARACTER LXYZ LOCATION FROM HEX\n\n\n         #CXL-XXX-YY-Z  CALCULATE HEX LXYZ LOCATION FROM CHARACTER\n\n\n         #CZ,PASSWRD  SWITCH MASTER CONSOLE DESIGNATION TO THE\n                      CONSOLE SPECIFIED BY THE L=XX PARAMETER\n\n\n         #C XXXX      CONVERT 1-8 DIGIT HEX VALUE TO DEC\n\n\n         #C ,DDDD     CONVERT 1-8 DIGIT DEC VALUE TO HEX\n\n\n         #C AAAOBBB   CALCULATOR MODE\n\n\n               AAA    IS 1-8 DIGIT HEX OR ,DEC VALUE\n\n               BBB    IS 1-8 DIGIT HEX OR ,DEC VALUE\n\n               O      IS ARITHMETIC OPERATOR\n                      +   ADD\n                      -   SUBTRACT\n                      .   MULTIPLY\n                      /   DIVIDE\n#$#\n      #D  COMMAND     (DISPLAY AND ZAP CORE)\n\n             ADDRESS SPACE FROM WHICH ADDRESS SPECIFIED IS RESOLVED\n             IS THE CALLERS,  UNLESS >AAAA PREFIXES THE COMMAND SUBPARM\n             WHERE  AAAA IS THE ASID OF THE ADDRESS SPACE TO DUMP/ZAP.\n             EXAMPLE -    #D  >0002,0A0000\n\n\n             FOR DUMPING CORE\n\n                 #D 0000,NN          WHERE  NN  IS THE NUMBER OF LINES\n                                     TO PRINT FROM 01 - 64. DEFAULT= 04\n\n\n             FOR DUMPING A UCB\n\n                 #D  U280  (WILL DUMP THE 280 UCB)\n\n\n             FOR ZAPPING CORE\n\n                 #D  0ACD/FF000000/FF160000\n\n                     0ACD     = ADDRESS TO BE ZAPPED\n                     FF000000 = DATA TO BE VERIFIED\n                     FF160000 = DATA TO BE ZAPPED IN\n\n\n             FOR TERMINATING AN ADDRESS SPACE\n\n                 #D  EXIT,AAAA        TERMINATE ASID AAAA\n\n\n             FOR CHANGING THE AUTHORIZED USE BIT OF SVC 107 (MODESET)\n\n                 #D  S     SET SVC 107 USABLE BY NON-AUTH PROGRAM\n                 #D  SA    SET SVC 107 NOT USABLE BY NON-AUTH PROGRAM\n\n\n             FOR CHANGING AN ADDRESS SPACE STATUS\n\n                 #D  NOSWAP,AAAA      SET ASID 'AAAA' NON-SWAPPABLE\n                 #D  OKSWAP,AAAA      SET ASID 'AAAA' SWAPPABLE\n                 #D  NOCANC,AAAA      SET ASID 'AAAA' NON-CANCELABLE\n                 #D  OKCANC,AAAA      SET ASID 'AAAA' CANCELABLE\n                 #D  CHAP,AAAA,DDD    CHAP ASID 'AAAA' TO DPRTY 'DDD'\n                 #D  DOSWAP,AAAA      SWAP ASID 'AAAA' IN/OUT\n\n             NOTE 1  -   IN ORDER FOR THE CHAP TO TAKE EFFECT THE JOB\n                         MUST PASS FROM SWAPPED OUT TO SWAPPED IN.\n\n             NOTE 2  -   IF A SET IPS COMMAND IS ISSUED OR IF THE JOB\n                         CHANGES STEPS, THE JOB WILL BE RESET TO ITS\n                         ORIGINAL STATE.\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n      #E  COMMAND     (EXECUTE COMMAND)\n\n\n\n             FOR SENDING A COMMAND\n\n                 #E XXXXX     XXXXX -   THE COMMAND TO BE EXECUTED\n\n                 #E V PATH(XXX,YYY,C),ONLINE    VARY PATH RANGE ON\n\n                 #E V PATH(XXX,YYY,C),OFFLINE   VARY PATH RANGE OFF\n\n\n#$#\n      #F  COMMAND     (DISPLAY PAGE FRAME ASSIGNMENTS)\n\n\n\n             #F\n\n\n             TOTAL       2048  8192K\n             NUCLEUS       98   392K\n             TOT FIXED    130   520K\n             SQA FIXED     88   352K\n             CMN FIXED     12    48K\n             SYS PAGES    260  1040K     SQA=  340K\n             AVAILABLE     24    96K\n             MASTER        16    64K     LSQA=  32K\n             JES2          48   192K     LSQA=  44K\n             FFGRI1        68   272K     LSQA=  28K\n             TEST00        10    40K     LSQA=  32K\n\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n\n         #F C     -       TO DISPLAY CSA VIRTUAL STORAGE USAGE\n\n\n\n          CSA SIZE =      3752K      CSA ADDR =     790000\n          SQA FREE =        56K     SQA AVAIL =     2092K\n          NUC END =      0A9000     SEG END =       0B0000\n          V=R SIZE =        80K      V=R ADDR =     0B4000\n          PRV SIZE =      8288K      PRV ADDR =     0C8000\n          FREE        SIZE=   1980K      ADDR =     790000\n          ALLOCATED   SIZE=   1696K      ADDR =     97F000\n          FREE        SIZE=     48K      ADDR =     B00000\n          ALLOCATED   SIZE=     32K      ADDR =     B0C000\n#$#\n     #F R   -       TO DISPLAY THE V=R AREA SHOWING FRAME\n                    ALLOCATION,  INCLUDING NO. OF FRAMES,\n                    OWNING ASID AND PFT FLAGS.\n\n\n\n             EXAMPLE OUTPUT -\n\n\n                        PAGES.ASID.FLAGS\n                        ----------------\n                        012...0008...R-U\n                        001...FFFF...A-A\n\n\n\n             PAGES COLUMN -    NO. OF FRAMES OWNED BY THIS ASID\n                               AND WITH THESE FLAGS IN DECIMAL.\n\n\n\n             ASID COLUMN -     ASID OF ADDRESS SPACE LAST TO OWN\n                               OR CURRENTLY OWNING THESE FRAMES.\n                               FFFF INDICATES NO OWNER.\n\n\n\n             FLAGS COLUMN -    THREE FLAG DIGITS WITH THE FOLLOWING\n                               MEANINGS.  A - IN ANY FLAG DIGIT\n                               INDICATES NO STATUS.\n\n\n                   1ST DIGIT -    O     OFFLINE\n                                  C     OFFLINE INTERCEPT\n                                  R     V=R ALLOCATE\n                                  I     V=R INTERCEPT\n                                  A     AVAILABLE\n\n\n                   2ND DIGIT -    B     BAD FRAME\n                                  F     LONG TERM FIXED\n                                  S     SQA/LSQA FRAME\n                                  V     VIO FRAME\n\n\n                   3RD DIGIT -    A     AVAILABLE QUEUE\n                                  R     SQA RESERVED QUEUE\n                                  C     COMMON QUEUE\n                                  S     SQA QUEUE\n                                  U     LOCAL QUEUE\n                                  L     LSQA QUEUE\n                                  N     NOT QUEUED\n#$#\n         #F MX   -        TO DISPLAY THE SPECIFIED MEGABYTE (M1 TO M9)\n                          OF REAL STORAGE SHOWING FRAME ALLOCATION,\n                          INCLUDING NUMBER OF FRAMES, OWNING ASID,\n                          PFT FLAGS.\n\n\n                          SEE  (#F R)  FOR DESCRIPTION OF OUTPUT.\n\n\n\n                 NOTE -   MEGABYTE 0 CANNOT BE DISPLAYED AND WILL\n                          CAUSE A PARM ERROR IF ATTEMPTED.\n                          SINCE MEGABYTE 0 CANNOT BE VARIED\n                          OFFLINE  (IT CONTAINS THE NUCLEUS),\n                          THIS RESTRICTION SEEMS REASONABLE.\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n         #F OX  -     TO DISPLAY, FOR THE SPECIFIED MEGABYTE (O1 TO O9)\n                      OF REAL STORAGE,  FRAME ALLOCATION FOR OFFLINE\n                      INTERCEPTED FRAMES WHICH ARE NOT YET OFFLINE,\n                      INCLUDING NUMBER OF FRAMES, OWNING ASID,\n                      PFT FLAGS.\n\n\n                      SEE  (#F R)  FOR DESCRIPTION OF OUTPUT.\n\n\n\n             NOTE -   MEGABYTE 0 CANNOT BE DISPLAYED AND WILL\n                      CAUSE A PARM ERROR IF ATTEMPTED.\n                      SINCE MEGABYTE 0 CANNOT BE VARIED\n                      OFFLINE  (IT CONTAINS THE NUCLEUS),\n                      THIS RESTRICTION SEEMS REASONABLE.\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n         #F BX  -     TO DISPLAY, FOR THE SPECIFIED MEGABYTE (B1 TO B9)\n                      OF REAL STORAGE,  FRAME ALLOCATION FOR\n                      BAD FRAMES INCLUDING NUMBER OF FRAMES,\n                      OWNING ASID AND PFT FLAGS.\n\n\n                      SEE  (#F R)  FOR DESCRIPTION OF OUTPUT.\n\n\n\n             NOTE -   MEGABYTE 0 CANNOT BE DISPLAYED AND WILL\n                      CAUSE A PARM ERROR IF ATTEMPTED.\n                      SINCE MEGABYTE 0 CANNOT BE VARIED\n                      OFFLINE  (IT CONTAINS THE NUCLEUS),\n                      THIS RESTRICTION SEEMS REASONABLE.\n#$#\n        #H  COMMAND      (DISPLAY  # COMMAND  HELP)\n\n\n\n           #H         DISPLAYS COMMAND LIST\n\n           #H X       DISPLAYS HELP FOR  COMMAND  #X\n\n           #H #X      DISPLAYS HELP FOR  COMMAND  ##X\n\n\n\n                    #A -   (SE)  DISPLAY JOB STATUS -  EXPANDED  D A\n                    #C -   (SK)  HEX/DEC CALCULATOR AND TOD DISPLAY\n                    #D -   (SD)  DISPLAY AND ZAP CORE\n                    #E -   (SS)  EXECUTE A COMMAND\n                    #F -   (SF)  DISPLAY PAGE FRAME ASSIGNMENTS\n                    #H -   (SM)  DISPLAY HELP\n                    #I -   (SJ)  DISPLAY IPS AND SWAP COUNTS\n                    #J -   (SL)  MODIFIED DISPLAY ACTIVE REPLACEMENT\n                    #L -   (SC)  DISPLAY LINES FOR TSO\n                    #M -   (SO)  TSO MULTIPLE SEND\n                    #N -   (SA)  DISPLAY ENQUEUE\n                    #O -   (SR)  DISPLAY PENDING I/O AND ALLOCATION\n                    #P -   (SP)  DISPLAY SU CONFIGURATION\n                    #Q -   (SQ)  ANALYZE ENQUEUE CONFLICTS\n                    #R -   (SG)  DISPLAY DEVICE STATUS\n                    #S -   (SH)  DISPLAY LPA MODULES\n                    #T -   (SN)  DISPLAY TIOT FOR A JOB\n                    #V -   (SI)  DISPLAY UNIT\n                    #Z -   (SZ)  MODIFIED DISPLAY ACTIVE REPLACEMENT\n                    ##A -  (ZA)  MONITOR JOB ACTIVITY\n                    ##B -  (ZB)  MONITOR DEVICES\n                    ##C -  (ZC)  MONITOR CHANNELS\n                    ##J -  (ZJ)  MONITOR JOBS\n                    ##P -  (ZP)  MONITOR PAGING\n                    ##S -  (ZS)  MONITOR SYSTEM INDICATORS\n#$#\n        #I  COMMAND      (DISPLAY IPS AND SWAP COUNTS)\n\n\n\n               DISPLAYS CURRENT IPS MEMBER AND SWAP COUNTS\n               BY REASON SINCE LAST IPL.\n\n\n\n               CURRENT IPS -   IEAIPST2\n               LGCP 100  AVCP 101  AVPG  27  AUIC  16  ASMQ  07\n               TERM WAIT - OUT     (01)          0\n               TERM WAIT - IN      (02)          0\n               LONG WAIT           (03)        304\n               AUX STOR SHORTAGE   (04)          0\n               REAL STOR SHORTAGE  (05)          0\n               DETECTED WAIT       (06)        932\n               REQUEST SWAP        (07)         82\n               ENQ EXCHANGE        (08)        112\n               WORKLOAD EXCHANGE   (09)         89\n               UNILATERAL SWAP     (0A)        243\n               TRANSITION SWAP     (0B)         21\n               LOGICAL SWAP        (0C)        289\n               LOGICAL SWAP FAIL   (0D)         12\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n         #I A      (DISPLAY ASM COUNTS)\n\n\n\n         EXAMPLE  -\n\n               ILRSLOTC            16\n               ILRSLOTV            16\n               AVAIL SLOTS        836\n               TOTAL SLOTS      4,338\n               VIO SLOTS            0\n               ADSPC SLOTS        796\n               BAD SLOTS            0\n\n\n\n         NOTE  -      AVAIL SLOTS IS THE NUMBER OF UNRESERVED\n                      LOCAL PAGE DATA SET SLOTS.\n\n         #I C      (DISPLAY AVAILABLE PCCWS)\n\n\n\n         EXAMPLE  -\n\n               NUMBER OF PCCWS BUILT BY RIM 00000044\n               NUMBER OF AVAILABLE PCCWS    00000030\n\n\n#$#\n        #I P     (DISPLAY PAGE DATA SET USAGE)\n\n\n\n        EXAMPLE -\n\n             PLPA  A53  PAGE01  PLPAPAGE           ERR(000)\n             SIZE(1044) AVAIL(0197) USED(82%) BRST(019)\n             COMN  942  PAGE02  COMMPG2            ERR(000)\n             SIZE(0522) AVAIL(0438) USED(17%) BRST(021)\n             LOCL  A53  PAGE02  LOCALP2            ERR(000)\n             SIZE(1566) AVAIL(1110) USED(30%) BRST(027)\n             LOCL  942  PAGE01  LOCALPG2           ERR(000)\n             SIZE(1566) AVAIL(1105) USED(30%) BRST(038)\n\n\n             SIZE AND AVAILABLE FIGURES ARE DECIMAL NUMBER OF SLOTS.\n\n             BRST IS THE PARERQTM VALUE DIVIDED BY 256, IN DECIMAL.\n             IT REPRESENTS THE AVERAGE TIME REQUIRED TO\n             TRANSFER 1 PAGE.\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n        #I R     (DISPLAY SRM VALUES)\n\n\n        EXAMPLE  -\n\n               SRM RESOURCE CONTROL TABLE\n                                            THRESHOLD\n                CPU UTILIZATION        45     98  101\n                CPU UTIL W/ DEM PAG           95   98\n                PAGING RATE             2   1000 1000\n                DEMAND PAGING RATE     29     70   88\n                TOTAL PAGING RATE      38\n                PAGE DELAY TIME (MS)  726   1000 1000\n                PAGE DELAY W/ DEM PAG        100  130\n                AVG ASM QUEUE          27   1000 1000\n                AVG UIC               255      2    4\n                AVG AVAIL FRAMES      598\n\n\n#$#\n\n        #I S     (DISPLAY SWAP DATA SET USAGE)\n\n\n\n        EXAMPLE -\n\n             SWAP DS- 001  SETS- 200  PGS/SET-  12\n             940  MVACAT  SYS1.SWAP01\n             SIZE(2400) AVAIL(1200) USED(50%) ERR(0000)\n\n\n             SIZE AND AVAILABLE FIGURES ARE DECIMAL NUMBER OF SLOTS.\n\n             ERR  IS THE NUMBER OF ERRORS SUFFERED ON THE SWAP DS.\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n        #I X     (DISPLAY PERFORMANCE GROUP ACTIVITY)\n\n\n        EXAMPLE - (TSO PERFORMANCE GROUP 2)\n\n             PGN PER   TR CNT   TR RATE  AB RATE  SW RATE  AVGRESP\n             02   1      2366      131      146     1.23     0.78\n             02   2       234      108      110     1.45     5.62\n             02   3        20      156      170     1.67   110.23\n             02  ALL     2620      126      134     1.31     2.21\n\n        TR CNT -      NO. OF TRANSACTIONS\n        TR RATE -     TRANSACTION SERVICE RATE\n        AB RATE -     ABSORPTION RATE\n        SW RATE -     SWAP RATIO\n        AVGRESP -     AVERAGE RESPONSE TIME\n#$#\n      #J  COMMAND      (MODIFIED DISPLAY ACTIVE REPLACEMENT)\n\n      #J T  COMMAND    (MODIFIED DISPLAY ACTIVE -  TSO ONLY)\n\n      #J NN  COMMAND   (MODIFIED DISPLAY ACTIVE -  FOR DOMAIN  'NN')\n\n\n          EXAMPLE  -\n\n     *****   IN  QUEUE   *****     ASID DPRTY QP  FLAGS   CPU TIME\n     JES2     JES2     IEFPROC     0002  253  02  NSW      1.33.01\n     TEST00   STEP1                0004  117  04  IN CP    2.55.33\n     TEST01   STEPX    ASMBLR      0005  119  03  IN       0.10.68\n     TMSBKUP  FDR                  0006  112  05  IN       1.11.24\n     *****   OUT  QUEUE   *****    ASID DPRTY SR  FLAGS   CPU TIME\n     RMF      148      IEFPROC     0003  251  03  OUTLW    1.11.98\n\n\n      WHERE -\n\n         ASID    DPRTY    QP/SR    FLAGS    CPU TIME\n        ------  -------  -------  -------  ----------\n\n         NNNN     DDD     QQ/SS    XXXYY    MMM.SS.HH\n\n\n        NNNN         IS THE ADDRESS SPACE IDENTIFICATION\n\n        DDD          IS THE JOBS DISPATCHING PRIORITY\n\n        QQ           IS THE JOBS ASCB QUEUE POSITION, WHICH IS\n                     A RELATIVE DISPATCHING PRIORITY\n\n        SS           IS THE SWAP REASON CODE AS DESCRIBED IN THE\n                     DOCUMENTATION FOR THE  # A COMMAND.\n\n        XXXYY        IS THE JOB STATUS AS DESCRIBED BELOW\n\n        MMM.SS.HH    IS THE CPU AND SRB ACCUMULATED JOB STEP TIME\n\n\n\n        XXX -\n\n            IN  -   IN CORE - SWAPPED IN\n            NSW -   NON-SWAPPABLE\n            OUT -   SWAPPED OUT\n            GOO -   IN PROCESS OF BEING SWAPPED OUT\n            GOI -   IN PROCESS OF BEING SWAPPED IN\n            GOB -   CURRENTLY CHANGING STATUS\n\n\n        YY -\n\n            LW  -   LONG WAIT STATUS -  EXPLICIT OR IMPLICIT\n            MW  -   LONG WAIT STATUS DETECTED BY MSO (MS6)\n            CP  -   SIGNIFICANT CPU USER - SET BY IRARMCPM\n            A   -   AUXILLARY STORAGE SHORTAGE\n            S   -   REAL STORAGE SHORTAGE\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n      #L  COMMAND     (DISPLAY LINES FOR TSO)\n\n\n\n                #L        (WILL SHOW USERID, ASID AND TP LINE)\n\n                       IBMUSER   (000C)  - 3F1\n#$#\n      #M  COMMAND      (TSO MULTIPLE SEND)\n\n\n                #M XXXXXX\n\n\n                     WHERE  XXXXXX  IS A  1 - 68  DIGIT MESSAGE\n                     TO BE SENT TEN TIMES TO ALL LOGGED ON TSO USERS\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n      #N  COMMAND     (DISPLAY ENQUE -   SEE ENQ/DEQ SUMMARY)\n\n\n\n         #N   FORMAT IS AS FOLLOWS -\n\n          #N (ZZZZZZ)XXXXXXXX/YYYYYYYY\n\n             WHERE   -\n\n                XXXXXXXX       IS THE 8 DIGIT MAJOR NAME OR  '*'\n                YYYYYYYY       IS THE 1 - 44 DIGIT MINOR NAME OR  '*'\n                (ZZZZZZ)       IS THE 1 - 8 DIGIT JOBNAME TO LIMIT\n                               THE SEARCH.   (OPTIONAL)\n\n\n                 #N *\n\n                 #N SYSDSN/*\n\n                 #N SYSIEFSD/*\n\n                 #N SYSDSN/SYS1.LINKLIB\n\n\n\n                IN RESPONSE TO THE #N COMMAND THE CURRENT STATUS\n                TYPES ARE:\n\n                             SHR - SHARED USE ENQ\n                             EXCL- EXCLUSIVE USE ENQ\n                             RSVS- SHARED USE WITH A RESERVE\n                             RSVX- EXCLUSIVE USE WITH A RESERVE\n#$#\n                       MVS  ENQ/DEQ  SUMMARY\n\n\n\n     MAJOR NAME   MINOR NAME               DESCRIPTION\n     ----------   ----------    -----------------------------------\n\n     SYSDSN       -DSNAME       ENQ FOR USER OR SYSTEM DATA SETS\n\n     SYSIEA01     IEA           ABEND IN PROGRESS\n\n     SYSIEFSD     CHNGDEVS      UCB MANIPULATION\n\n                  Q4            UCB MANIPULATION\n\n                  Q6            PROTECT KEY ALTERATION\n\n                  Q10           CSCB CHAIN MANIPULATION\n\n                  RPLL          JOB JOURNAL DATA SET (CKPT/RSTRT)\n\n                  STCQUE        STARTED TASK CONTROL\n\n                  TSOQUE        TSO DATA SETS\n\n     SYSIGGV1     MCATOPEN      MASTER CATALOG\n\n     SYSIGGV2     -CATLGNAME    USER CATALOGS\n\n     SYSIKJBC     -RBA          TSO BRODCAST DATA SET (REL BYTE ADDR)\n\n     SYSIKJUA     OPENUADS      UADS DATA SET\n\n                  -USERID       TSO USERS\n\n     SYSLMOD      -DSNAME       LINKEDIT RESERVE\n\n     SYSSJWTP     JSCBWTP       WRITE-TO-PROGRAMMER MESSAGES\n\n                  -RPL+ASID     MESSAGE DATA SET PROCESSING\n                                (REQUEST PARAMETER LIST + ASID)\n\n     SYSSMF01     BUF           SMF BUFFER WRITE\n\n     SYSZUSRL     -UCBADDR      USER LABEL PROCESSING\n\n     SYSVSAM      -CCCCNNNX     VSAM DATA SET PROCESSING\n                                (CCCC- ACB ADDR, NNN- CI NO., X- STAT)\n\n     SYSVTOC      -VOLSER       VTOC RESERVE\n\n     SYSZRBMF     ACTIVE        MF1 ACTIVE INDICATOR\n\n     SYSZCAXW     CAXW          CAXWA (CATLG AUXILLARY WORK AREA)\n\n     SYSZCSD      CSDCPUJS      CSD UPDATE\n\n     SYSZEC16     PURGE         PURGE DATA SET PROCESSING\n\n     SYSZIGGI     -ASID         TSB PROCESSING\n\n     SYSZJES2     SPOOL         AWAITING SPOOL SPACE\n\n     SYSZPCCB     PCCB          PCCP (PRIV CATLG CONTROL BLOCK)\n\n     SYSZPGAD     PAGEADD       SERIALIZE FOR PAGEADD COMMAND\n\n     SYSZPSWD     -DSNAME       PASSWORD DATA SET PROCESSING\n\n     SYSZSIPS     IRARMSET      IPS SET\n\n     SYSZTIOT     -ASID         TIOT PROCESSING\n\n     SYSZVARY     CPU           RECONFIGURATION COMMANDS\n\n                  VALIDATE      STORAGE VALIDATION PROCESSING\n\n     SYSZVMV      -UCBADDR      VIRTUAL VOLUME PROCESSING\n\n     SYSZVOLS     -VOLSER       ALL ALLOCATED VOLUMES\n#$#\n    #O  COMMAND   (DISPLAY OUTSTANDING I/O AND ALLOCATION REQUESTS)\n\n\n\n     #O                DISPLAY ALL OUTSTANDING I/O\n\n     #O A              DISPLAY ACTIVE OUTSTANDING I/O\n\n     #O Q              DISPLAY QUEUED OUTSTANDING I/O\n\n     #O X              DISPLAY ALLOCATION QUEUE\n\n\n\n              I/O OUTPUT EXAMPLE -\n\n              UUU  VVVVVV  JJJJJJJJ  IIIIII  DDDDDDDD  SSSSSSS\n\n\n              WHERE -\n                      UUU -         UNIT ADDR\n                      VVVVVV -      VOLSER\n                      JJJJJJJJ -    JOBNAME OR ASID\n                      IIIIII -      IOQ ADDR\n                      DDDDDDDD -    I/O DRIVER NAME\n                      SSSSSSS -     STATUS (ACTIVE OR QUEUED)\n\n\n\n              ALLOCATION OUTPUT EXAMPLE -\n\n              *SYSTEM*  *AQTOP*  M1M1M1M1M1M1  M2M2M2M2M2M2\n              JJJJJJJJ  SSSSSSS  M1M1M1M1M1M1  M2M2M2M2M2M2\n\n\n              WHERE -\n                      1ST LINE IS SYSTEM WIDE ALLOCATION MASK\n                      AND FOLLOWING LINES ARE JOB INFO\n\n                      JJJJJJJJ -   JOBNAME OR ASID\n                      SSSSSSS -    STATUS (ACTIVE OR QUEUED)\n                                   OWNING -   JOB HOLDS MASK\n                                   AQUEUE -   JOB QUEUED FOR 'A' QUEUE\n                                   BQUEUE -   JOB QUEUED FOR 'AB' QUEUE\n                                   WAITING -  OPERATOR REPLIED 'WAIT'\n                      M1M1M1M1 -   A OWNERSHIP MASK\n                      M2M2M2M2 -   B OWNERSHIP MASK\n#$#\n\n         #P           DISPLAY SU CONFIGURATION\n\n\n\n             #P         DISPLAY NON-OBSOLETE INSTALLED SU'S\n\n             #P I       DISPLAY ALL INSTALLED SU'S\n\n             #P C       DISPLAY ALL NON-OBSOLETE SU'S\n\n             #P A       DISPLAY ALL SU'S\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n      #Q  COMMAND     (ANALYZE ENQUE -   SEE ENQ/DEQ SUMMARY)\n\n\n\n         #Q\n\n\n\n                OUTPUT EXAMPLE -\n\n                MAJOR= SYSDSN\n                MINOR= SYS1.LINKLIB\n                ROSLINK1  EXCL  RESERVE\n                ROSLINK2  EXCL  RESERVE\n                ROSLIST1  SHR\n\n\n\n                IN RESPONSE TO THE #Q COMMAND THE CURRENT STATUS\n                TYPES ARE:\n\n                             SHR - SHARED USE ENQ\n                             EXCL- EXCLUSIVE USE ENQ\n                             RESERVE -  RESERVE INDICATOR\n#$#\n    #R  COMMAND   (DEVICE STATUS COMMAND)\n\n\n\n     #R M              PENDING MOUNTS FOR TAPE\n\n     #R T              TAPE BUSY AND PENDING MOUNTS\n\n     #R D              DISK BUSY AND PENDING MOUNTS\n\n     #R P              UNIT RECORD BUSY\n\n     #R B              ALL DEVICE BUSY AND PENDING MOUNTS\n\n     #R V              ALL PENDING VARIED OR UNLOADED DEVICES\n\n     #R R              ALL RESERVES OUTSTANDING\n\n\n\n     #R M=XXXXXXXX     PENDING MOUNTS FOR A JOB\n\n     #R T=XXXXXXXX     ALLOCATED TAPE DEVICES FOR A JOB\n\n     #R D=XXXXXXXX     ALLOCATED DISK DEVICES FOR A JOB\n\n     #R P=XXXXXXXX     ALLOCATED UNIT RECORD DEVICES FOR A JOB\n\n     #R B=XXXXXXXX     ALL ALLOCATED DEVICES FOR A JOB\n\n\n         =XXXXXXXX     FOR ALL COMANDS IS EITHER A 4 DIGIT ASID OR A\n                       1 - 8 DIGIT JOBNAME\n\n\n\n     #R S=VVVVVV       DEVICE ON WHICH VOLUME VVVVVV IS MOUNTED\n\n\n     #R U=NNN          DISPLAY SPECIFIED -\n\n                           DEVICE          (NNN)\n                           CONTROL UNIT    (NN)\n                           CHANNEL         (N)\n\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n\n      #S  COMMAND     (DISPLAY LPA MODULES)\n\n\n\n        #S PGMNAME   WILL DISPLAY LOAD MODULES IN FLPA, MLPA OR\n        PLPA. THE VIRTUAL ADDRESS AND MODULES SIZE ARE DISPLAYED\n        UNLESS THE MODULE  SPECIFIED IS REPRESENDED BY A MINOR\n        CDE OR LPDE, IN WHICH CASE THE VIRUAL ADDRESS AND MAJOR\n        NAME ARE DISPLAYED.\n\n        #S *ADDR    WILL DISPLAY THE NAME OF THE LOAD MODULE\n        AND ITS STARTING ADDRESS AND LENGTH.\n\n\n        EXAMPLE -\n\n        BBBBBB  NNNNNNNN  AAAAAA  LLLLLL  USE=CCCC\n\n        WHERE -      BBBBBB -      IS THE LPDE OR CDE ADDRESS\n                     NNNNNNNN -    IS THE MODULE NAME\n                     AAAAAA -      IS THE MODULE ADDRESS\n                     LLLLLL -      IS THE MODULE LENGTH\n                     CCCC -        IS THE MODULE USE COUNT\n#$#\n      #T  COMMAND     (DISPLAY TIOT FOR A JOB)\n\n\n\n            #T     NNNN         DISPLAY TIOT SHORT  ASID  NNNN\n            #T     NNNN,L       DISPLAY TIOT LONG   ASID  NNNN\n\n\n\n        EXAMPLE  SHORT FORM  -\n\n        0006  JOBNAME1  STEPNAM1  PROCNAM1\n        - DDNAME1  1A0  3350    MVSA37     6609\n\n\n        EXAMPLE   LONG FORM  -\n\n        0006  JOBNAME1  STEPNAM1  PROCNAM1\n        - DDNAME1  1A0  3350    MVSA37     6609\n        - SYS1.LINKLIB\n        - DSO=(PO)  RFM=(U  )  LRECL=00000  BLKSZ=19069\n\n\n\n        IN THE ABOVE EXAMPLES THE 1ST LINE IS THE JOB LINE\n        THE 1ST DDLINE CONTAINS  DDNAME, UNIT ADDRESS, DEVICE TYPE,\n        VOLSER, AND EXCP COUNT.\n        THE 2ND DD LINE CONTAINS  DSNAME.\n        THE 3RD DD LINE CONTAINS  DSORG, RECFM, LRECL, AND BLKSIZE.\n\n        NOTE THAT THIS COMMAND EXECUTES AS AN SRB AND CONSEQUENTLY\n        WILL OCCASIONALLY FAIL WITH NOTHING WRONG.  IN ADDITION, THIS\n        COMMAND WILL ONLY WORK FOR JOBS WHICH ARE SWAPPED IN.\n        STARTED TASKS WILL NOT DISPLAY ANY EXCP COUNTS.\n#$#\n      #V  COMMAND     (DISPLAY UNIT)\n\n\n\n            #V D           (DISPLAY DASD MATRIX)\n            #V D1          (DISPLAY 3330-1 MATRIX)\n            #V D3          (DISPLAY 3330 MATRIX)\n            #V D5          (DISPLAY 3350 MATRIX)\n            #V T           (DISPLAY TAPE MATRIX)\n\n\n            #V CUU         (DISPLAY SINGLE UNIT)\n\n                EX.    #V 251\n\n\n           #V CUX          (DISPLAY ALL UNITS BY CONTROL UNIT)\n\n                EX.    #V 25X\n\n\n           #V CUU,CUU...   (DISPLAY ALL UNITS IN LIST)\n\n                EX.    #V 251,363,108,288\n\n\n           #V CUX,CUX...   (DISPLAY ALL UNITS IN LIST BY C.U.)\n\n                EX.    #V 25X,36X,47X\n\n\n           #V S=VOLSER     (DISPLAY UNIT FOR THIS VOLSER)\n\n                EX.    #V S=DAA001\n\n\n\n           COMMAND OUTPUT IS AS FOLLOWS -\n\n\n                 UUU  SSSSSS  FFF  UNIT=DDDDDD  AS=AAAA  PATH=X,Y\n                    DCB=MM  USR=UU  RSV=RR  FLG=11111111/22222222\n                                   - OR -\n                    DEVTYPE=ZZZZZZZZ        FLG=11111111/22222222\n\n\n                    UUU       IS THE UNIT ADDRESS\n                    SSSSSS    THE VOLUME SERIAL OR DEVICE CLASS\n                    FFF       ON, OFF, OF CHG\n                    DDDDDD    THE DEVICE TYPE\n                    AAAA      THE ADDRESS SPACE ID\n                    X,Y       THE PRIMARY,SECONDARY DEVICE PATH\n                    MM        THE NO. OF OPEN DCBS TO THE DEVICE\n                    UU        THE NO. OF USERS\n                    RR        THE DEVICE RESERVE COUNT\n                    ZZZZZZZZ  THE 4 BYTE HEX DEVICE TYPE FIELD\n                    1111/2222 THE FIRST 8 BYTES OF THE UCB IN HEX\n#$#\n\n\n     #Z     COMMAND (MODIFIED DISPLAY ACTIVE REPLACEMENT)\n\n     #Z T   COMMAND (MODIFIED DISPLAY ACTIVE REPLACEMENT-TSO ONLY)\n\n     #Z NN  COMMAND (MODIFIED DISPLAY ACTIVE REPLACEMENT-FOR\n\n          EXAMPLE -\n\n\n      *****   IN   QUEUE   ***** ASID DP PG QP SC FLAGS   CPU  CPUR\n      MASTER                     0001 FF 00 01 00 NSW    1437 85564\n      JES2     JES2     IEFPROC  0003 FF 09 02 00 NSW    1054 85514\n      CMD1     CMD1     CMD1     0004 FF 12 03 00 NSW      11 86392\n      FAT067D4 PROC#1   FAT067#3 0011 75 01 13 03 IN       76 14332\n      CMDSBMON CMDSBMON CMDSBMON 0014 75 01 14 01 NSW       0 86399\n      TCAMB    TCAMB    TCAM     0015 FC 06 05 00 NSW    1329 85291\n      P731500A CIF408#1          0023 74 01 15 02 IN       48 14355\n      DUMMYWTR 480      IEFPROC  0028 00 01 17 00 NSW     130 86272\n      CBTLOG   CBTLOG   CBT290   0041 FC 01 06  R NSW       0 86399\n      CIC888D0 PROC#1   DFHSIP#4 0046 FB 30 08 00 NSW     240 86110\n      *****   OUT  QUEUE   ***** ASID DP PG SR SC FLAGS   CPU  CPUR\n      ACF2     ACF2     IEFPROC  0002 FF 01 03 05 OUTLW     2 86397\n      RMF      RMF      IEFPROC  0009 FF 00 03 56 OUTLW     3 86396\n      TSSO     TSSO     TSSO     0040 FF 01 03 08 OUTLW     0 86399\n      NCCF     NCCF     NCCF#1   004F FF 12 06 ** OUTMW     3 86396\n\n         WHERE -\n\n                ASID     ADDRESS SPACE ID\n                DP       DISPATCHING PRIORITY\n                PG       PERFORMANCE GROUP\n                QP       ASCB QUEUE POSITION, WHICH IS\n                         A RELATIVE DISPATCHING PRIORITY\n                SR       SWAP REASON CODE AS IN THE OUTPUT\n                         OF THE #I COMMAND\n                SC       SWAP COUNT\n                FLAGS    JOB STATUS DESCRIBED BELOW = XXXYY\n                CPU      CPU/SRB ACCUMULATED JOB STEP TIME\n                CPUR     CPU STEP TIME REMAINING\n                XXX -\n                    IN  -   IN CORE - SWAPPED IN\n                    NSW -   NON-SWAPPABLE\n                    OUT -   SWAPPED OUT\n                    GOO -   IN PROCESS OF BEING SWAPPED OUT\n                    GOI -   IN PROCESS OF BEING SWAPPED IN\n                    GOB -   CURRENTLY CHANGING STATUS\n                YY -\n                    LW  -   LONG WAIT STATUS\n                    MW  -   DETECTED WAIT\n                    CP  -   SIGNIFICANT CPU USER\n                    A   -   AUXILLARY STORAGE SHORTAGE\n                    S   -   REAL STORAGE SHORTAGE\n\n#$#\n\n\n     ##A  COMMAND      (MONITOR JOB ACTIVITY)\n\n     ##A D  COMMAND    (MONITOR DOMAIN ACTIVITY)\n\n     ##A T  COMMAND    (MONITOR TSO USERS ACTIVITY)\n\n     ##A NN  COMMAND   (MONITOR JOB ACTIVITY -  FOR DOMAIN  'NN')\n\n\n     OUTPUT IS AS FOLLOWS -\n\n\n                JOBNAME AND STEPNAME\n\n                CPU PCT -   CURRENT CPU PERCENT BUSY\n\n                SIO/SEC -   CURRENT EXCPS PER SEC\n\n                PAG/SEC -   CURRENT PAGING PER SEC\n\n                WORKSET -   CURRENT REAL STORAGE USE\n\n                ASID -      ADDRESS SPACE ID\n\n                DSP -       DISPATCHING PRTY\n\n                DMN -       DOMAIN NUMBER\n\n                PGN -       PERFORMANCE GROUP NUMBER\n\n                SWC -       SWAP COUNT\n\n\n                FLAGS -     FLAGS -  XX-NN\n\n                            XX -   IN-  IN QUEUE\n                            XX -   NS-  NON-SWAPPABLE\n                            NN -   QUEUE POSITION\n                            XX -   OU-  OUT QUEUE\n                            NN -   SWAP REASON CODE\n#$#\n          ##BXXX,Y     MONITOR DEVICE BUSY FOR ALL DASD\n\n          ##BUUU,Y     MONITOR DEVICE BUSY FOR DEVICE  UUU\n\n          ##BUUX,Y     MONITOR DEVICE BUSY FOR DEVICES ON\n                       CONTROL UNIT  UU\n\n\n                       WHERE Y =  D -  DEVICE LIST\n                                  J -  DEVICE AND JOB LIST\n                                  S -  SEEK ANALYSIS\n\n\n                       OUTPUT FORMAT AS FOLLOWS -\n\n                       UUU VVVVVV  BUSY  NN%  NN%\n                       -- JJJJJJJJ       NN%  NN%\n\n                       NOTE -   TWO PERCENT BUSY VALUES ARE\n                                DISPLAYED FOR DEVICE BUSY.\n\n                                1ST -  DEVICE BUSY TOTAL\n                                2ND -  DEVICE BUSY PRIMARY CHAN\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n          ##C          MONITOR CHANNEL BUSY\n                       DISPLAY CHANNEL BUSY IN BOTH\n                       NUMERIC AND BAR GRAPH FORM.\n\n\n          ##CNN,Y      MONITOR CHANNEL AND DEVICE BUSY\n                       DISPLAY CHANNEL AND DEVICE BUSY\n                       FOR CHANNEL NN IN NUMERIC AND\n                       BAR GRAPH FORM.\n\n\n                       WHERE Y =  D -  DEVICE LIST\n                                  J -  DEVICE AND JOB LIST\n\n\n\n                  OUTPUT FORMAT AS FOLLOWS -\n\n                  CHANNEL NN  BUSY       NN%\n                  UUU VVVVVV  BUSY  NN%  NN%\n                  -- JJJJJJJJ       NN%  NN%\n\n\n                  NOTE -   TWO PERCENT BUSY VALUES ARE\n                           DISPLAYED FOR DEVICE BUSY.\n\n                           1ST -  DEVICE BUSY TOTAL\n                           2ND -  DEVICE BUSY THIS CHANNEL\n#$#\n\n\n     ##J  COMMAND      (MONITOR JOBS)\n\n     ##J T  COMMAND    (MONITOR TSO USERS)\n\n     ##J NN  COMMAND   (MONITOR JOBS -  FOR DOMAIN  'NN')\n\n\n          EXAMPLE  -\n\n     *****   IN  QUEUE   *****    EXCPC   EXCPT    CPUC     CPUT\n     JES2     JES2     IEFPROC      43    68,976   9.37   61.33.01\n     TEST00   STEP1                 21     3,400   0.58       5.33\n     TEST01   STEPX    ASMBLR      153   178,922  12.77    9.10.68\n     TMSBKUP  FDR                    3       367   0.09       1.24\n     *****   OUT  QUEUE   *****   EXCPC   EXCPT    CPUC     CPUT\n     RMF      148      IEFPROC       0       666   0.00      11.98\n\n\n      WHERE -\n\n         EXCPC     EXCPT      CPUC      CPUT\n        ------    -------    -------   -------\n\n        XX,XXX   X,XXX,XXX   M.SS.TH  MMM.SS.TH\n\n\n        EXCPC        IS THE EXCP COUNT FOR THE SAMPLED INTERVAL\n\n        EXCPT        IS THE EXCP COUNT TOTAL FOR THE CURRENT STEP\n\n        CPUC         IS THE CPU/SRB TIME FOR THE SAMPLED INTERVAL\n\n        CPUT         IS THE CPU/SRB TIME TOTAL FOR THE CURRENT STEP\n#$#\n\n\n     ##P  COMMAND      (MONITOR PAGING)\n\n\n\n        VIO PAGING        NNN.NN   PAGES/SEC\n        SWAP PAGING       NNN.NN   PAGES/SEC\n        COMMON PAGING     NNN.NN   PAGES/SEC\n        ADDRSPC PAGING    NNN.NN   PAGES/SEC\n        TOTAL PAGING      NNN.NN   PAGES/SEC\n\n\n\n\n\n-----------------------------------------------------------------------\n-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-\n-----------------------------------------------------------------------\n\n\n\n\n\n         ##S          MONITOR SYSTEM INDICATORS\n                      DISPLAYING AVERAGE, MINIMUM, AND MAXIMUM\n\n\n         ##S D        MONITOR SYSTEM INDICATORS AND DOMAIN VALUES\n                      DISPLAYING AVERAGE, MINIMUM, AND MAXIMUM\n\n\n         ##S DA       MONITOR SYSTEM INDICATORS AND DOMAIN VALUES\n                      DISPLAYING AVERAGE\n\n\n\n                      SYSTEM INDICATORS -  LONG TERM CPU,\n                           AVERAGE CPU, AVERAGE PAGING,\n                           AVERAGE UIC, AND AVERAGE ASMQ.\n\n\n                      DOMAIN VALUES -  WT, MIN, MAX AT INTERVAL START\n                           TARGET MPL, CURRENT MPL, READY USERS,\n                           GOING OUT USERS, OUT USERS, IN USERS,\n                           WEIGHTED DOMAIN SERVICE\n#$#\n\n    THE FOLLOWING IS THE PRIMARY MENU SCREEN FOR CMDSBMON\n\n\n\n\n #####   CMD  SUB-SYSTEM  MONITOR   #####\n\n\n --->  ENTER  # CMDS,  ## CMDS,  OR  GRAPHIC MONITOR CMDS\n              BEGINNING WHERE CURSOR IS POSITIONED\n\n\n --->  ENTER  NN/XX  TO CHANGE MONITOR REFRESH INTERVAL\n\n              WHERE  NN  =   NUMBER OF SECONDS\n                     XX  =   NUMBER OF INTERVALS\n\n\n --->  ENTER  ''Z''  OR  ''END''   TO TERMINATE\n\n\n --->  PRESS  PA1 TO STOP AUTOMATIC REFRESH\n --->  PRESS  PA2 OR CLEAR TO REPEAT THE LAST COMMAND\n --->  PRESS  PFK 1  TO DISPLAY PFK ASSIGNMENTS\n\n\n --->  ENTER  ''H''  TO OBTAIN HELP FOR GRAPHIC MONITOR CMDS\n#$#\n\n    THE FOLLOWING IS THE PFK MENU SCREEN FOR CMDSBMON\n\n\n\n\n#####        PFK  ASSIGNMENTS        #####'\n\n\nPFK1 =   DISPLAY PFK ASSIGNMENTS\nPFK2 =   H\nPFK3 =   E\nPFK4 =   F\nPFK5 =   J\nPFK6 =   S\nPFK7 =   #J\nPFK8 =   #O\nPFK9 =   #OX\nPFK10 =  #Q\nPFK11 =  ##SD\nPFK12 =  05/50\nPFK13 =  ##A,T=5\nPFK14 =  H\nPFK15 =  E\nPFK16 =  F\nPFK17 =  J\nPFK18 =  S\nPFK19 =  #J\nPFK20 =  #O\nPFK21 =  #OX\nPFK22 =  #Q\nPFK23 =  ##SD\nPFK24 =  05/50\n\n\n\n --->  ENTER  NN=XXXX  AND PRESS PFK 1  TO CHANGE PFK FUNCTION'\n\n              WHERE  NN -   IS THE PFK NUMBER  02 - 12'\n                     XXXX - IS THE COMMAND TO BE ASSIGNED'\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         ENTER  H X  FOR HELP WITH COMMAND  X'\n\n         H -   (GH)  DISPLAY HELP\n         A -   (GA)  DISPLAY JOB ACTIVITY\n         E -   (GE)  DISPLAY EXCEPTIONS\n         F -   (GF)  DISPLAY PAGE STATISTICS BY JOB\n         J -   (GJ)  DISPLAY CPU UTILIZATION\n         I -   (GI)  DISPLAY JES2 INITIATORS\n         O -   (GO)  DISPLAY SYSTEM I/O ACTIVITY\n         Q -   (GQ)  DISPLAY JES QUEUE  (MODIFIED Q CMD)\n         S -   (GS)  DISPLAY SYSTEM INDICATORS\n         U -   (GU)  DISPLAY DASD FREE SPACE\n         # -   (SM)  DISPLAY HELP # COMMANDS\n\n         FOLLOWING ARE FULL SCREEN POSITIONING COMMANDS.\n         -NNN        SCROLL UP NNN LINES\n         +NNN        SCROLL DOWN NNN LINES\n         -           SCROLL TO TOP\n         +           SCROLL TO BOTTOM\n         =YXXXY      FIND STRING EQ XXX, Y IS DELIMITER\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         A -         DISPLAY JOB ACTIVITY\n\n\n\n\n\n         ANNNN       DISPLAY JOB ACTIVITY  FOR ASID NNNN\n\n\n                     GRAPHIC DISPLAY OF -\n\n                     JOBNAME,  STEPNAME,  PERCENT CPU\n                     PERCENT CPU,\n                     PAGE FRAME ALLOCATION,\n                     PAGING IN PAGES PER SECOND,\n                     AVERAGE JOB CPU UTILIZATION,\n                     AVERAGE REAL FRAME USAGE,\n                     CURRENT SWAP COUNT,\n                     JOB I/O ACTIVITY.\n\n\n                     JOB EXCEPTIONS AS FOLLOWS -\n\n                     POSSIBLE LOOPS,\n                     ABEND IN PROGRESS,\n                     WAITING ON REPLIES,\n                     WAITING ON ALLOCATION,\n                     WAITING ON ENQUEUE CONFLICTS,\n                     WAITING ON I/O PENDING,\n                     WAITING TO BE SWAPPED IN.\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         E -         DISPLAY EXCEPTIONS\n\n\n\n\n\n         E -         DISPLAY ALL EXCEPTIONS\n                     AUTOMATIC REFRESH MINIMUM 10 SEC\n\n         ED -        DISPLAY EXCEPTIONS (NOT DEVICE)\n                     AUTOMATIC REFRESH MINIMUM 10 SEC\n\n         EC -        DISPLAY EXCEPTIONS (NOT CHAN/DEVICE)\n\n\n                     EXCEPTIONAL SYSTEM CONDITIONS -\n\n                     SQA SHORTAGE,\n                     WTO BUFFER SHORTAGE,\n                     EXCESS PAGING AND PAGE I/O BUSY,\n                     EXCESS DEVICE UTILIZATION,\n                     EXCESS CHANNEL UTILIZATION.\n\n\n                     EXCEPTIONAL JOB CONDITIONS -\n\n                     POSSIBLE LOOPS,\n                     ABEND IN PROGRESS,\n                     EXCESS JOB CPU UTILIZATION,\n                     EXCESS REAL FRAME USAGE,\n                     EXCESS SWAP COUNT,\n                     WAITING ON REPLIES,\n                     WAITING ON ALLOCATION,\n                     WAITING ON ENQUEUE CONFLICTS,\n                     WAITING ON I/O PENDING,\n                     WAITING TO BE SWAPPED IN.\n#$#\n\n\n\n                   EXCEPTION MONITOR OUTPUT MESSAGES\n                ---------------------------------------\n\n\n\n\n    SYSTEM EXCEPTION MESSAGES\n    --------------------------------------\n\n    CHANNEL XX   XXX% BUSY  FOR XXXXX SEC\n    UUU VVVVVV   XXX% BUSY  FOR XXXXX SEC\n    UUU VVVVVV   NOT READY  FOR XXXXX SEC\n    EXCESS SYSTEM PAGING FOR    XXXXX SEC\n    LOCAL PAGE I/O DEGRADED FOR XXXXX SEC\n    WTO BUFFER SHORTAGE, WQE COUNT= XXXXX\n    SQA AVAIL= XXXXXK, CSA AVAIL= XXXXXK\n\n\n\n\n    JOB RESOURCE USAGE EXCEPTION MESSAGES\n    --------------------------------------\n\n    JJJJJJJJ POSSIBLE LOOP FOR  XXXXX SEC\n    JJJJJJJJ XXX% CPU FOR       XXXXX SEC\n    JJJJJJJJ ABEND IN PROGRESS  XXXXX SEC\n    JJJJJJJJ EXCESS SWAP COUNT = XXXXX\n    JJJJJJJJ XXXXX FRAMES FOR   XXXXX SEC\n\n\n\n\n    JOB WAIT EXCEPTION MESSAGES\n    --------------------------------------\n\n     ( NOTE -   A JOB IS CONSIDERED TO BE WAITING IF IT USES 0% CPU  )\n\n\n    JJJJJJJJ ENQ SYSDSN   WAIT  XXXXX SEC       ENQ CONFLICT\n    JJJJJJJJ I/O ON UUU   WAIT  XXXXX SEC       I/O PENDING\n    JJJJJJJJ ALLOC QUEUE  WAIT  XXXXX SEC       ALLOC QUEUE\n    JJJJJJJJ REPLY NN     WAIT  XXXXX SEC       REPLY PENDING\n    JJJJJJJJ ???????????  WAIT  XXXXX SEC       REASON UNKNOWN\n    JJJJJJJJ SWAP RRRRRR  WAIT  XXXXX SEC       SWAPPED OUT\n\n       RRRRRR -     ( SWAP REASON CODES )\n                    LONGWT           LONG WAIT\n                    AUXSTOR          AUXILLARY STORAGE SHORTAGE\n                    REALSTR          REAL STORAGE SHORTAGE\n                    DETWAIT          MSO DETECTED WAIT\n                    REQUEST          REQUEST SWAP\n                    ENQEXC           ENQ EXCHANGE\n                    WORKEXC          WORKLOAD EXCHANGE\n                    UNILATR          UNILATERAL\n\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         F -         DISPLAY PAGE STATISTICS\n\n\n\n\n\n         F -         DISPLAY PAGE STATISTICS BY JOB\n\n\n                     GRAPHIC DISPLAY OF -\n\n                     PAGE FRAME ALLOCATION BY JOB AND\n                     PAGING BY JOB IN PAGES PER SECOND.\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         J -         DISPLAY CPU UTILIZATION\n\n\n\n\n\n\n         JD -        DISPLAY CPU UTILIZATION\n\n                     GRAPHIC DISPLAY OF -\n                     ALL ACTIVE DOMAINS.\n\n\n         J -         DISPLAY CPU UTILIZATION\n\n                     GRAPHIC DISPLAY OF -\n                     JOBNAME,  STEPNAME,  PERCENT CPU\n                     UTILIZATION FOR ACTIVE JOBS.\n\n\n         JT -        DISPLAY CPU UTILIZATION\n\n                     GRAPHIC DISPLAY OF -\n                     JOBNAME,  STEPNAME,  PERCENT CPU\n                     UTILIZATION FOR ACTIVE TSO USERS.\n\n\n         JNN -       DISPLAY CPU UTILIZATION\n\n                     GRAPHIC DISPLAY OF -\n                     JOBNAME,  STEPNAME,  PERCENT CPU\n                     UTILIZATION FOR ALL JOBS IN DMN XX.\n\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         I -         DISPLAY JES2 INITIATORS\n\n\n\n\n\n\n         I -         DISPLAY JES2 INITIATORS\n\n\n                     DISPLAY OF -\n\n                     INITIATOR STATUS,\n                     JOB NUMBER,\n                     JOBNAME,\n                     JOB CLASS,\n                     INITIATOR CLASSES.\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         O -         DISPLAY SYSTEM I/O ACTIVITY\n\n\n\n\n\n\n         OXNN -      DISPLAY SYSTEM I/O ACTIVITY\n\n\n                     WHERE -\n\n                       X -   SCAN TYPE\n                             A -   ALL DEVICES\n                             V -   DASD AND TAPE\n                             D -   DASD\n                             T -   TAPE\n                             U -   UNIT RECORD\n                             C -   COMM AND DISPLAY\n\n                       NN -  PERCENT BUSY THRESHOLD\n                             20% BUSY IS THE DEFAULT\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         Q -         DISPLAY JES QUEUE\n\n\n\n\n\n\n         Q XXX       DISPLAY JES QUEUE  (MODIFIED Q CMD)\n\n\n         (NNN)Q XXX  DISPLAY JES QUEUE  (MODIFIED Q CMD)\n\n\n                     WHERE -\n\n                       NNN -    IS THE NUMBER OF\n                                1000 LINE SEGMENTS\n                                TO INCREMENT INTO THE\n                                DATA SET BEFORE\n                                DISPLAY ANY DATA.\n\n                       XXX -    IS THE Q COMMAND\n\n                       H -         HELP WITH Q CMD\n                       DI -        DISPLAY INPUT\n                       DO -        DISPLAY OUTPUT\n                       DA -        DISPLAY ACTIVE JOBS\n                       DT -        DISPLAY ACTIVE TSO\n                       DS -        DISPLAY ACTIVE STC\n                       JLOG J -    DISPLAY JOBLOG JOB J\n                       JCL J -     DISPLAY JOBJCL JOB J\n                       JMSG J -    DISPLAY JOBMSG JOB J\n                       DD J -      DISPLAY DD IDS JOB J\n                       SL S -      DISPLAY SYSLOG STC S\n                       L J DSID -  DISPLAY DATASET DSID\n                                   JOB J\n\n\n              NOTE -   J IS EITHER JOBNAME OR JOB NUMBER\n\n              NOTE -   S IS STC NUMBER\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         S -         DISPLAY SYSTEM INDICATORS\n\n\n\n\n\n\n         S -         DISPLAY SYSTEM INDICATORS\n\n\n                     GRAPHIC DISPLAY OF -\n\n                     CURRENT AVERAGE CPU,\n                     CURRENT LONG TERM CPU,\n                     CURRENT AVERAGE PAGING,\n                     CURRENT AVERAGE UIC,\n                     CURRENT AVERAGE ASMQ LENGTH,  AND\n                     CURRENT MPL FOR EACH DOMAIN\n                     CONTAINING RUNNING JOBS.\n\n\n\n         SA -        DISPLAY SYSTEM INDICATORS\n\n\n                     GRAPHIC DISPLAY OF -\n\n                     AVERAGE AVERAGE CPU,\n                     AVERAGE LONG TERM CPU,\n                     AVERAGE AVERAGE PAGING,\n                     AVERAGE AVERAGE UIC,\n                     AVERAGE AVERAGE ASMQ LENGTH,  AND\n                     CURRENT MPL FOR EACH DOMAIN\n                     CONTAINING RUNNING JOBS.\n#$#\n      GRAPHIC MONITOR COMMANDS\n\n\n\n         U -         DISPLAY DASD SPACE\n\n\n\n\n\n\n         U           DISPLAY DASD SPACE ALL ONLINE DASD\n\n\n         U VVVV      DISPLAY DASD SPACE ON VOLUME VVVV\n                     WHERE VVVV IS A 1-6 DIGIT VOLSER OR\n                     VOLSER PREFIX\n\n\n         U U=NNN     DISPLAY DASD SPACE ON UNIT NNN\n\n\n         U D=XXXX    DISPLAY DASD SPACE ON DEVTYPE XXXX\n                     (3330,3330V,3330-1,3350,2305-2)\n\n\n                     DISPLAY OF -\n\n                     UNIT, DEVTYPE, STATUS, VOLSER,\n                     NO. OF DCBS OPEN, NO. OF USERS,\n                     FREE CYLS, FREE TRKS, FREE EXTENTS,\n                     LARGEST CONTIG EXTENT CYL/TRK\n./       ADD   NAME=CMDDUMMY\n         TITLE 'CMDDUMMY -   DUMMY # MODULE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDDUMMY -       DUMMY # MODULE                           ***\n***                                                                 ***\n***       VERSION -        1.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        02/20/77                                 ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDDUMMY CSECT\n*\n* THIS MODULE MUST NOT EVER BE SMALLER THAN CMDSBSYS\n* ELSE ALL # COMMANDS WILL OC1 (AT THE VERY LEAST)\n*\n         SR    15,15\n         DS    CL4132\n         END\n./       ADD   NAME=CMDINSTL\n//CMDSBJB1 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//*\n//*  COMMENTED OUT THE QUE ASSEMBLIES (SEE MEMBER CALLED $QUE IN THIS\n//*  PDS)  ARNOLD CASINGHINO UPDATE 09/16/84\n//*\n//*\n//*   CMDINSTL  VERSION 2.4   LAST UPDATED 11/16/82\n//*\n//*\n//DMALLOC PROC  ASMLIB='SYS1.CMDSBSYS.SOURCE',   THE PDS YOU GOT\n//         LINKLIB='SYS1.CMDSBSYS.LOAD',\n//         LINKUNT=3350,\n//         LINKVOL=CMDVOL\n//DMALLOC EXEC  PGM=IEFBR14\n//LINKLIB  DD DSN=&LINKLIB.,UNIT=&LINKUNT.,VOL=SER=&LINKVOL.,\n//         DISP=(,CATLG),SPACE=(CYL,(5,1,28)),\n//         DCB=(RECFM=U,BLKSIZE=6144)\n//        PEND\n//DMASM    PROC   MEMBER=,LNCT=55,\n//         ASMLIB='SYS1.CMDSBSYS.SOURCE',\n//         LINKLIB='SYS1.CMDSBSYS.LOAD'\n//ASM EXEC PGM=IEUASM,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=SYS1.CMDSBSYS.SOURCE,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=A\n//SYSGO  DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//LKED EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//ALLOC  EXEC DMALLOC\n//ASMPR  EXEC DMASM,MEMBER=CMDPRINT\n//DOCCMD1 EXEC  PGM=CMDPRINT,PARM='01072'\n//STEPLIB  DD  DSN=SYS1.CMDSBSYS.LOAD,DISP=SHR\n//SYSPRINT DD   SYSOUT=A\n//SYSUDUMP DD   SYSOUT=A\n#$#\n                    VERSION\n             $DOC         .COMMAND SUB-SYSTEM -   (ADDIT DOCUMENTATION)\n             $HELP        .COMMAND SUB-SYSTEM -   (TSO HELP MEMBER)\n             $HINTS       .COMMAND SUB-SYSTEM -   (ADDIT INSTALL HINTS)\n             $JCL         .COMMAND SUB-SYSTEM -   (JCL TO RUN CMD1)\n             $MODS        .COMMAND SUB-SYSTEM -   (MVSMODS IEBCOPY)\n             CMDDOCTN     .COMMAND SUB-SYSTEM -   (DOCUMENTATION)\n             CMDDUMMY     .COMMAND SUB-SYSTEM -   (CMDDUMMY MODULE)\n             CMDINSTL     .COMMAND SUB-SYSTEM -   (INSTALLATION JCL)\n             CMDPRINT     .COMMAND SUB-SYSTEM -   (DOCUMENTATION PRINT)\n             CMDSBCSC     .COMMAND SUB-SYSTEM -   (CROSS-SYSTEM CNTRL)\n             CMDSBINT     .COMMAND SUB-SYSTEM -   (INIT AND MONITOR)\n             CMDSBMON     .COMMAND SUB-SYSTEM -   (STANDALONE MONITOR)\n             CMDSBSYS     .COMMAND SUB-SYSTEM -   (PROCESSOR)\n             CMDSBTSO     .COMMAND SUB-SYSTEM -   (TSO FULL SCREEN MON)\n             CMDTSO       .COMMAND SUB-SYSTEM -   (TSO DIRECTOR)\n             CSCGA03D     .COMMAND SUB-SYSTEM -   (A - ACTIVITY MON.)\n             CSCGE03D     .COMMAND SUB-SYSTEM -   (E - EXCEPTION MON.)\n             CSCGF03D     .COMMAND SUB-SYSTEM -   (F - FRAME USE GRAPH)\n             CSCGH03D     .COMMAND SUB-SYSTEM -   (H - HELP FOR GRAPH)\n             CSCGI03D     .COMMAND SUB-SYSTEM -   (I - JES2 INIT DISP)\n             CSCGJ03D     .COMMAND SUB-SYSTEM -   (J - JOB CPU GRAPH)\n             CSCGO03D     .COMMAND SUB-SYSTEM -   (O - I/O ACTIVITY)\n             CSCGQ03D     .COMMAND SUB-SYSTEM -   (Q - QUE)\n             CSCGS03D     .COMMAND SUB-SYSTEM -   (S - SYS. IND. GRAPH)\n             CSCGU03D     .COMMAND SUB-SYSTEM -   (U -DASD SPACE DISPL)\nCSCSA03D     IEESA03D     .COMMAND SUB-SYSTEM -   (#N -  D ENQ P1)\nCSCSB03D     IEESB03D     .COMMAND SUB-SYSTEM -   (#N -  D ENQ P2)\nCSCSC03D     IEESC03D     .COMMAND SUB-SYSTEM -   (#L -  D LINES)\nCSCSD03D     IEESD03D     .COMMAND SUB-SYSTEM -   (#D -  COREZAP)\nCSCSE03D     IEESE03D     .COMMAND SUB-SYSTEM -   (#A -  ASCB INFO)\nCSCSF03D     IEESF03D     .COMMAND SUB-SYSTEM -   (#F -  D FRAMES)\nCSCSG03D     IEESG03D     .COMMAND SUB-SYSTEM -   (#R -  D ALLOC)\nCSCSH03D     IEESH03D     .COMMAND SUB-SYSTEM -   (#S -  D LPA)\nCSCSI03D     IEESI03D     .COMMAND SUB-SYSTEM -   (#V -  D DEVICE)\nCSCSJ03D     IEESJ03D     .COMMAND SUB-SYSTEM -   (#I -  D PAGES)\nCSCSK03D     IEESK03D     .COMMAND SUB-SYSTEM -   (#C -  CALCULATOR)\nCSCSL03D     IEESL03D     .COMMAND SUB-SYSTEM -   (#J -  D A)\nCSCSZ03D     IEESZ03D     .COMMAND SUB-SYSTEM -   (#Z -  D A)\nCSCSM03D     IEESM03D     .COMMAND SUB-SYSTEM -   (#H -  HELP)\nCSCSN03D     IEESN03D     .COMMAND SUB-SYSTEM -   (#T -  D TIOT)\nCSCSO03D     IEESO03D     .COMMAND SUB-SYSTEM -   (#M -  TSO SEND)\nCSCSP0ED     IEESP03D     .COMMAND SUB-SYSTEM -   (#P -  D SU)\nCSCSQ03D     IEESQ03D     .COMMAND SUB-SYSTEM -   (#Q -  ANALYZE ENQ)\nCSCSR03D     IEESR03D     .COMMAND SUB-SYSTEM -   (#O -  I/O PENDING)\nCSCSS03D     IEESS03D     .COMMAND SUB-SYSTEM -   (#E -  EXECUTE)\nCSCZA03D     IEEZA03D     .COMMAND SUB-SYSTEM -   (##A -  ACTIVITY MON.)\nCSCZB03D     IEEZB03D     .COMMAND SUB-SYSTEM -   (##B -  DEVICE MON.)\nCSCZC03D     IEEZC03D     .COMMAND SUB-SYSTEM -   (##C -  CHANNEL MON.)\nCSCZJ03D     IEEZJ03D     .COMMAND SUB-SYSTEM -   (##J -  JOB MON.)\nCSCZP03D     IEEZP03D     .COMMAND SUB-SYSTEM -   (##P -  PAGING MON.)\nCSCZS03D     IEEZS03D     .COMMAND SUB-SYSTEM -   (##S -  SYSIND MON.)\n             NSEGF03D     .CMD SUB-SYS (NONSE) -  (F - FRAME USE GRAPH)\n             NSEGJ03D     .CMD SUB-SYS (NONSE) -  (J - JOB CPU GRAPH)\n             NSEGS03D     .CMD SUB-SYS (NONSE) -  (S - SYS. IND. GRAPH)\n             NSESE03D     .CMD SUB-SYS (NONSE) -  (#A -  ASCB INFO)\n             NSESJ03D     .CMD SUB-SYS (NONSE) -  (#I -  D PAGES)\n             NSESL03D     .CMD SUB-SYS (NONSE) -  (#J -  D A)\n             NSEZJ03D     .CMD SUB-SYS (NONSE) -  (##J -  JOB MON.)\n             NSEZS03D     .CMD SUB-SYS (NONSE) -  (##S -  SYSIND MON.)\n#$#\n             MACROS VERSION  FOR CMDSBMON\n             ALLOC    1.0 .MACRO NEEDED FOR CMDSBMON\n             DYNSPACE 1.0 .MACRO NEEDED FOR CMDSBMON\n             FREE     1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBFRGS 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBTU   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBTU2  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPCKID  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDDN   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDDNRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDEBUG 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDFPL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDINC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDISP  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDS    1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSECT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSN   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSNPD 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSNRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSRGR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDUMMY 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPENDD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDDN  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDISP 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDSN  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFHOLD 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFORUS 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFREE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPIOPL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLINK  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOAD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCSW 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCS1 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCS2 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPMCA   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPNTU   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPERM  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPPL   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPROC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPSWD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPQNAME 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPRNGE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSPACE 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSPEC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSR2   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSSREQ 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSUBL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSYSOU 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTU    1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTUBFR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTXTL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTYPE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPUNALC 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPUNIT  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPVCHAR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPVOLRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             S99FAIL  1.0 .MACRO NEEDED FOR CMDSBMON\n#$#\n                   VERSION\n             CSCGQQ00 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - QUEUECMN)\n             CSCGQQ01 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - QUEUE)\n             CSCGQQ02 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - ALLOCATE)\n             CSCGQQ03 1.1 .CMD SUB-SYSTEM -       (Q - QCMD - CKPT)\n             CSCGQQ04 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DDNAME)\n             CSCGQQ05 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DISPLAY)\n             CSCGQQ05 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DISPLAY)\n             CSCGQQ06 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - FINDJOB)\n             CSCGQQ07 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - FORMAT)\n             CSCGQQ08 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - HELP)\n             CSCGQQ09 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - HEXBLK)\n             CSCGQQ10 1.1 .CMD SUB-SYSTEM -       (Q - QCMD - INIT)\n             CSCGQQ11 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JCL)\n             CSCGQQ12 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JLOG)\n             CSCGQQ13 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JMSG)\n             CSCGQQ14 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - LIST)\n             CSCGQQ15 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - LISTDS)\n             CSCGQQ16 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - PARSE)\n             CSCGQQ17 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - READSPC)\n             CSCGQQ18 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - REPOS)\n             CSCGQQ19 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SAVE)\n             CSCGQQ20 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SEARCH)\n             CSCGQQ21 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SYSLOG)\n             CSCGQQ22 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - XDS)\n#$#\n                   VERSION\n             MACROS VERSION  FOR THE QUE COMMAND\n             $JQT     1.0 .MACRO NEEDED FOR QUEUE\n             QCLNK    1.0 .MACRO NEEDED FOR QUEUE\n             QCOMMON  1.1 .MACRO NEEDED FOR QUEUE\n             QSTART   1.1 .MACRO NEEDED FOR QUEUE\n             QSTOP    1.0 .MACRO NEEDED FOR QUEUE\n             QTILT    1.0 .MACRO NEEDED FOR QUEUE\n/*\n//DOCCMD2 EXEC  PGM=CMDPRINT,PARM='01072'\n//STEPLIB  DD  DSN=SYS1.CMDSBSYS.LOAD,DISP=SHR\n//SYSPRINT DD   SYSOUT=A\n//SYSUDUMP DD   SYSOUT=A\n//SYSIN    DD   DSN=SYS1.CMDSBSYS.SOURCE(CMDDOCTN),DISP=SHR\n//UPD1    EXEC  PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=A\n//SYSUT1   DD DSN=SYS1.PROCLIB,DISP=SHR\n//SYSUT2   DD DSN=SYS1.PROCLIB,DISP=SHR\n//SYSIN  DD  DATA\n./ ADD NAME=CMD1                           CHANGE THIS CARD TO ./\n//CMD1   PROC  A=ASE0,\n//             B='$',\n//             C=CSK0,\n//             D=DSD0,\n//             E=ESS0,\n//             F=FSF0,\n//             G='$',\n//             H=HSM0,\n//             I=ISJ0,\n//             J=JSL0,\n//             K='$',\n//             L=LSC0,\n//             M=MSO0,\n//             N=NSA0,\n//             O=OSR0,\n//             P=PSP0,\n//             Q=QSQ0,\n//             R=RSG0,\n//             S=SSH0,\n//             T=TSN0,\n//             U='$',\n//             V=VSI0,\n//             W='$',\n//             X='$',\n//             Y='$',\n//             Z=ZSZ0\n//CMD1  EXEC PGM=CMDSBINT,TIME=1440,DPRTY=(15,10)\n// PARM='&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z'\n//SYSUDUMP  DD  SYSOUT=A\n//CSC#ASYS  DD  DUMMY\n//CSC#BSYS  DD  DUMMY\n//CSC#CSYS  DD  DUMMY\n//CSCDATA   DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n//*\n//*      WHERE  -    FOR CSC#.... REPLACE .... WITH SMF SYSID OF ONE\n//*                  OF THE SYSTEMS USING CROSS-SYSTEM COMMANDS.\n//*                  AS MANY CSC#.... DD CARDS AS NECESSARY MAY EXIST.\n//*\n./ ADD NAME=CMDSBMON                          CHANGE THIS CARD TO ./\n//CMDSBMON  PROC  U=XXX\n//CMDSBMON  EXEC  PGM=CMDSBMON,PARM='&U.',REGION=8000K\n//SYSUDUMP  DD    SYSOUT=A\n//CMDLOG    DD    SYSOUT=A\n//CSCDATA  DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n//*   WHERE  XXX  IS THE 3270 UNIT ADDRESS\n/*\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 1\n//*\n//*\n//CMDSBJB2 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//DMASM    PROC   MEMBER=,LNCT=55,\n//         ASMLIB='SYS1.CMDSBSYS.SOURCE',\n//         LINKLIB='SYS1.CMDSBSYS.LOAD'\n//ASM EXEC PGM=IEUASM,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=SYS1.CMDSBSYS.SOURCE,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=A\n//SYSGO  DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//DMLINK EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//DMLINK   PROC   MEMBER=,\n//         LINKLIB='SYS1.CMDSBSYS.LOAD'\n//DMLINK EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//ASM00 EXEC DMASM,MEMBER=CMDDUMMY\n//ASM01 EXEC DMASM,MEMBER=CMDSBCSC\n//ASM02 EXEC DMASM,MEMBER=CMDSBINT\n//ASM03 EXEC DMASM,MEMBER=CMDSBSYS\n//ASM04 EXEC DMASM,MEMBER=CMDTSO\n//ASM05 EXEC DMASM,MEMBER=CMDSBTSO\n//ASM05A EXEC DMASM,MEMBER=CMDSBMON\n//ASM06 EXEC DMASM,MEMBER=CSCSB03D\n//ASM07 EXEC DMASM,MEMBER=CSCSA03D\n//DMLINK.SYSIN DD *\n INCLUDE SYSLIB(CSCSB03D)\n ENTRY IEESA03D\n/*\n//ASM08 EXEC DMASM,MEMBER=CSCSC03D\n//ASM09 EXEC DMASM,MEMBER=CSCSD03D\n//ASM10 EXEC DMASM,MEMBER=CSCSE03D\n//ASM11 EXEC DMASM,MEMBER=CSCSF03D\n//ASM12 EXEC DMASM,MEMBER=CSCSG03D\n//ASM13 EXEC DMASM,MEMBER=CSCSH03D\n//ASM14 EXEC DMASM,MEMBER=CSCSI03D\n//ASM15 EXEC DMASM,MEMBER=CSCSJ03D\n//ASM16 EXEC DMASM,MEMBER=CSCSK03D\n//ASM17 EXEC DMASM,MEMBER=CSCSL03D\n//ASM17A EXEC DMASM,MEMBER=CSCSZ03D\n//ASM18 EXEC DMASM,MEMBER=CSCSM03D\n//ASM19 EXEC DMASM,MEMBER=CSCSN03D\n//ASM20 EXEC DMASM,MEMBER=CSCSO03D\n//ASM21 EXEC DMASM,MEMBER=CSCSP03D\n//ASM22 EXEC DMASM,MEMBER=CSCSQ03D\n//ASM23 EXEC DMASM,MEMBER=CSCSR03D\n//ASM24 EXEC DMASM,MEMBER=CSCSS03D\n//ASM25 EXEC DMASM,MEMBER=CSCZB03D\n//ASM26 EXEC DMASM,MEMBER=CSCZC03D\n//ASM27 EXEC DMASM,MEMBER=CSCZJ03D\n//ASM28 EXEC DMASM,MEMBER=CSCZP03D\n//ASM29 EXEC DMASM,MEMBER=CSCZS03D\n//ASM30 EXEC DMASM,MEMBER=CSCGA03D\n//ASM31 EXEC DMASM,MEMBER=CSCGE03D\n//ASM32 EXEC DMASM,MEMBER=CSCGF03D\n//ASM33 EXEC DMASM,MEMBER=CSCGH03D\n//ASM34 EXEC DMASM,MEMBER=CSCGJ03D\n//ASM35 EXEC DMASM,MEMBER=CSCGO03D\n//ASM36 EXEC DMASM,MEMBER=CSCGS03D\n//*ASM37 EXEC DM*ASM,MEMBER=CSCGQQ00\n//*ASM38 EXEC DM*ASM,MEMBER=CSCGQQ01\n//*ASM39 EXEC DM*ASM,MEMBER=CSCGQQ02\n//*ASM40 EXEC DM*ASM,MEMBER=CSCGQQ03\n//*ASM41 EXEC DM*ASM,MEMBER=CSCGQQ04\n//*ASM42 EXEC DM*ASM,MEMBER=CSCGQQ05\n//*ASM43 EXEC DM*ASM,MEMBER=CSCGQQ06\n//*ASM44 EXEC DM*ASM,MEMBER=CSCGQQ07\n//*ASM45 EXEC DM*ASM,MEMBER=CSCGQQ08\n//*ASM46 EXEC DM*ASM,MEMBER=CSCGQQ09\n//*ASM47 EXEC DM*ASM,MEMBER=CSCGQQ10\n//*ASM48 EXEC DM*ASM,MEMBER=CSCGQQ11\n//*ASM49 EXEC DM*ASM,MEMBER=CSCGQQ12\n//*ASM50 EXEC DM*ASM,MEMBER=CSCGQQ13\n//*ASM51 EXEC DM*ASM,MEMBER=CSCGQQ14\n//*ASM52 EXEC DM*ASM,MEMBER=CSCGQQ15\n//*ASM53 EXEC DM*ASM,MEMBER=CSCGQQ16\n//*ASM54 EXEC DM*ASM,MEMBER=CSCGQQ17\n//*ASM55 EXEC DM**ASM,MEMBER=CSCGQQ18\n//*ASM56 EXEC DM*ASM,MEMBER=CSCGQQ19\n//*ASM57 EXEC DM*ASM,MEMBER=CSCGQQ20\n//*ASM58 EXEC DM*ASM,MEMBER=CSCGQQ21\n//*ASM59 EXEC DM*ASM,MEMBER=CSCGQQ22\n//*LNK60 EXEC DMLINK,MEMBER=CSCGQ03D\n//*DMLINK.SYSIN DD *\n//*  INCLUDE SYSLIB(CSCGQQ01)\n//*  INCLUDE SYSLIB(CSCGQQ02)\n//*  INCLUDE SYSLIB(CSCGQQ03)\n//*  INCLUDE SYSLIB(CSCGQQ04)\n//*  INCLUDE SYSLIB(CSCGQQ05)\n//*  INCLUDE SYSLIB(CSCGQQ06)\n//*  INCLUDE SYSLIB(CSCGQQ07)\n//*  INCLUDE SYSLIB(CSCGQQ08)\n//*  INCLUDE SYSLIB(CSCGQQ09)\n//*  INCLUDE SYSLIB(CSCGQQ10)\n//*  INCLUDE SYSLIB(CSCGQQ11)\n//*  INCLUDE SYSLIB(CSCGQQ12)\n//*  INCLUDE SYSLIB(CSCGQQ13)\n//*  INCLUDE SYSLIB(CSCGQQ14)\n//*  INCLUDE SYSLIB(CSCGQQ15)\n//*  INCLUDE SYSLIB(CSCGQQ16)\n//*  INCLUDE SYSLIB(CSCGQQ17)\n//*  INCLUDE SYSLIB(CSCGQQ18)\n//*  INCLUDE SYSLIB(CSCGQQ19)\n//*  INCLUDE SYSLIB(CSCGQQ20)\n//*  INCLUDE SYSLIB(CSCGQQ21)\n//*  INCLUDE SYSLIB(CSCGQQ22)\n//*  ENTRY QUEUE\n//* /*\n//ASM61 EXEC DMASM,MEMBER=CSCZA03D\n//ASM62 EXEC DMASM,MEMBER=CSCGI03D\n//ASM63 EXEC DMASM,MEMBER=CSCGU03D\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 2\n//*\n//*\n//CMDSBJB3 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//*\n//*\n//*   EXECUTE THIS JOB FOR NON-SE SYSTEMS ONLY\n//*\n//*\n//*\n//DMASM    PROC   MEMBER=,LNCT=55,LINKMEM=,\n//         ASMLIB='SYS1.CMDSBSYS.SOURCE',\n//         LINKLIB='SYS1.CMDSBSYS.LOAD'\n//ASM EXEC PGM=IEUASM,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=SYS1.CMDSBSYS.SOURCE,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=A\n//SYSGO  DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//LKED EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLMOD DD DSN=&LINKLIB.(&LINKMEM.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//ASM01 EXEC DMASM,MEMBER=NSESE03D,LINKMEM=CSCSE03D\n//ASM02 EXEC DMASM,MEMBER=NSESJ03D,LINKMEM=CSCSJ03D\n//ASM03 EXEC DMASM,MEMBER=NSESL03D,LINKMEM=CSCSL03D\n//ASM04 EXEC DMASM,MEMBER=NSEZJ03D,LINKMEM=CSCZJ03D\n//ASM05 EXEC DMASM,MEMBER=NSEZS03D,LINKMEM=CSCZS03D\n//ASM06 EXEC DMASM,MEMBER=NSEGF03D,LINKMEM=CSCGF03D\n//ASM07 EXEC DMASM,MEMBER=NSEGJ03D,LINKMEM=CSCGJ03D\n//ASM08 EXEC DMASM,MEMBER=NSEGS03D,LINKMEM=CSCGS03D\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 3\n//*\n//*  -------------------------------------------------------------\n//CMDSBJB4 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//DMCOPY   PROC   LINKLIB='SYS1.CMDSBSYS.LOAD',\n//         TARGLIB=\n//DMCOPY EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=A\n//SYSUT1  DD DSN=&LINKLIB.,DISP=SHR\n//SYSUT2  DD DSN=&TARGLIB.,DISP=SHR\n//SYSUT3 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT4 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//     PEND\n//COPY1 EXEC DMCOPY,TARGLIB='SYS1.LINKLIB'    ANY LINKLIST LIBRARY\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDPRINT,,R))\n S M=((CMDSBCSC,,R))\n S M=((CMDSBINT,,R))\n S M=((CMDSBSYS,,R))\n S M=((CMDSBMON,,R))\n S M=((CSCSA03D,,R))\n S M=((CSCSC03D,,R))\n S M=((CSCSD03D,,R))\n S M=((CSCSE03D,,R))\n S M=((CSCSF03D,,R))\n S M=((CSCSG03D,,R))\n S M=((CSCSH03D,,R))\n S M=((CSCSI03D,,R))\n S M=((CSCSJ03D,,R))\n S M=((CSCSK03D,,R))\n S M=((CSCSL03D,,R))\n S M=((CSCSM03D,,R))\n S M=((CSCSN03D,,R))\n S M=((CSCSO03D,,R))\n S M=((CSCSP03D,,R))\n S M=((CSCSQ03D,,R))\n S M=((CSCSR03D,,R))\n S M=((CSCSS03D,,R))\n S M=((CSCSZ03D,,R))\n S M=((CSCZA03D,,R))\n S M=((CSCZB03D,,R))\n S M=((CSCZC03D,,R))\n S M=((CSCZJ03D,,R))\n S M=((CSCZP03D,,R))\n S M=((CSCZS03D,,R))\n/*\n//COPY2 EXEC DMCOPY,TARGLIB='SYS1.LPALIB'   LPA FOR OPER COMMANDS\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDDUMMY,,R))\n S M=((CSCSA03D,IEESA03D,R))\n S M=((CSCSC03D,IEESC03D,R))\n S M=((CSCSD03D,IEESD03D,R))\n S M=((CSCSE03D,IEESE03D,R))\n S M=((CSCSF03D,IEESF03D,R))\n S M=((CSCSG03D,IEESG03D,R))\n S M=((CSCSH03D,IEESH03D,R))\n S M=((CSCSI03D,IEESI03D,R))\n S M=((CSCSJ03D,IEESJ03D,R))\n S M=((CSCSK03D,IEESK03D,R))\n S M=((CSCSL03D,IEESL03D,R))\n S M=((CSCSM03D,IEESM03D,R))\n S M=((CSCSN03D,IEESN03D,R))\n S M=((CSCSO03D,IEESO03D,R))\n S M=((CSCSP03D,IEESP03D,R))\n S M=((CSCSQ03D,IEESQ03D,R))\n S M=((CSCSR03D,IEESR03D,R))\n S M=((CSCSS03D,IEESS03D,R))\n S M=((CSCSS03D,IEESZ03D,R))\n S M=((CSCZA03D,IEEZA03D,R))\n S M=((CSCZB03D,IEEZB03D,R))\n S M=((CSCZC03D,IEEZC03D,R))\n S M=((CSCZJ03D,IEEZJ03D,R))\n S M=((CSCZP03D,IEEZP03D,R))\n S M=((CSCZS03D,IEEZS03D,R))\n/*\n//COPY3 EXEC DMCOPY,TARGLIB='SYS1.TSOLIB' FULL SCREEN FOR TSO AND OPER\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDTSO,,R))\n S M=((CMDSBTSO,,R))\n S M=((CSCGA03D,,R))        ACTIVITY MONITOR\n S M=((CSCGE03D,,R))        EXCEPTION MONITOR\n S M=((CSCGF03D,,R))        JOB FRAME MONITOR\n S M=((CSCGH03D,,R))        HELP FOR GRAPH MONITORS\n S M=((CSCGI03D,,R))        JES2 INIT DISPLAY\n S M=((CSCGJ03D,,R))        JOB CPU MONITOR\n S M=((CSCGO03D,,R))        I/O ACTIVITY MONITOR\n S M=((CSCGQ03D,,R))        QUE COMMAND\n S M=((CSCGS03D,,R))        SYSTEM IND. GRAPH\n S M=((CSCGU03D,,R))        DASD FREE SPACE\n/*\n./       ADD   NAME=CMDINSXA\n//CMDSBJB1 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//*\n//*  COMMENTED OUT THE QUE ASSEMBLIES (SEE MEMBER CALLED $QUE IN THIS\n//*  PDS)  ARNOLD CASINGHINO UPDATE 09/16/84\n//*\n//*\n//*   CMDINSTL  VERSION 2.4   LAST UPDATED 11/16/82\n//*\n//*\n//DMALLOC PROC  ASMLIB='SFT.XA213#.SOURCE',      THE PDS YOU GOT\n//         LINKLIB='SYS1.XA213#.LOAD',\n//         LINKUNT=3380,\n//         LINKVOL=SYS002\n//DMALLOC EXEC  PGM=IEFBR14\n//LINKLIB  DD DSN=&LINKLIB.,UNIT=&LINKUNT.,VOL=SER=&LINKVOL.,\n//         DISP=(,CATLG),SPACE=(CYL,(5,1,28)),\n//         DCB=(RECFM=U,BLKSIZE=6144)\n//        PEND\n//DMASM    PROC   MEMBER=,LNCT=55,\n//         ASMLIB='SFT.XA213#.SOURCE',\n//         LINKLIB='SYS1.XA213#.LOAD'\n//ASM EXEC PGM=IEUASM,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=&ASMLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=A\n//SYSGO  DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//LKED EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//ALLOC  EXEC DMALLOC\n//ASMPR  EXEC DMASM,MEMBER=CMDPRINT\n//DOCCMD1 EXEC  PGM=CMDPRINT,PARM='01072'\n//STEPLIB  DD  DSN=SYS1.XA213#.LOAD,DISP=SHR\n//SYSPRINT DD   SYSOUT=A\n//SYSUDUMP DD   SYSOUT=A\n#$#\n                    VERSION\n             $DOC         .COMMAND SUB-SYSTEM -   (ADDIT DOCUMENTATION)\n             $HELP        .COMMAND SUB-SYSTEM -   (TSO HELP MEMBER)\n             $HINTS       .COMMAND SUB-SYSTEM -   (ADDIT INSTALL HINTS)\n             $JCL         .COMMAND SUB-SYSTEM -   (JCL TO RUN CMD1)\n             $MODS        .COMMAND SUB-SYSTEM -   (MVSMODS IEBCOPY)\n             CMDDOCTN     .COMMAND SUB-SYSTEM -   (DOCUMENTATION)\n             CMDDUMMY     .COMMAND SUB-SYSTEM -   (CMDDUMMY MODULE)\n             CMDINSTL     .COMMAND SUB-SYSTEM -   (INSTALLATION JCL)\n             CMDPRINT     .COMMAND SUB-SYSTEM -   (DOCUMENTATION PRINT)\n             CMDSBCSC     .COMMAND SUB-SYSTEM -   (CROSS-SYSTEM CNTRL)\n             CMDSBINT     .COMMAND SUB-SYSTEM -   (INIT AND MONITOR)\n             CMDSBMON     .COMMAND SUB-SYSTEM -   (STANDALONE MONITOR)\n             CMDSBSYS     .COMMAND SUB-SYSTEM -   (PROCESSOR)\n             CMDSBTSO     .COMMAND SUB-SYSTEM -   (TSO FULL SCREEN MON)\n             CMDTSO       .COMMAND SUB-SYSTEM -   (TSO DIRECTOR)\n             CSCGA03D     .COMMAND SUB-SYSTEM -   (A - ACTIVITY MON.)\n             CSCGE03D     .COMMAND SUB-SYSTEM -   (E - EXCEPTION MON.)\n             CSCGF03D     .COMMAND SUB-SYSTEM -   (F - FRAME USE GRAPH)\n             CSCGH03D     .COMMAND SUB-SYSTEM -   (H - HELP FOR GRAPH)\n             CSCGI03D     .COMMAND SUB-SYSTEM -   (I - JES2 INIT DISP)\n             CSCGJ03D     .COMMAND SUB-SYSTEM -   (J - JOB CPU GRAPH)\n             CSCGO03D     .COMMAND SUB-SYSTEM -   (O - I/O ACTIVITY)\n             CSCGQ03D     .COMMAND SUB-SYSTEM -   (Q - QUE)\n             CSCGS03D     .COMMAND SUB-SYSTEM -   (S - SYS. IND. GRAPH)\n             CSCGU03D     .COMMAND SUB-SYSTEM -   (U -DASD SPACE DISPL)\nCSCSA03D     IEESA03D     .COMMAND SUB-SYSTEM -   (#N -  D ENQ P1)\nCSCSB03D     IEESB03D     .COMMAND SUB-SYSTEM -   (#N -  D ENQ P2)\nCSCSC03D     IEESC03D     .COMMAND SUB-SYSTEM -   (#L -  D LINES)\nCSCSD03D     IEESD03D     .COMMAND SUB-SYSTEM -   (#D -  COREZAP)\nCSCSE03D     IEESE03D     .COMMAND SUB-SYSTEM -   (#A -  ASCB INFO)\nCSCSF03D     IEESF03D     .COMMAND SUB-SYSTEM -   (#F -  D FRAMES)\nCSCSG03D     IEESG03D     .COMMAND SUB-SYSTEM -   (#R -  D ALLOC)\nCSCSH03D     IEESH03D     .COMMAND SUB-SYSTEM -   (#S -  D LPA)\nCSCSI03D     IEESI03D     .COMMAND SUB-SYSTEM -   (#V -  D DEVICE)\nCSCSJ03D     IEESJ03D     .COMMAND SUB-SYSTEM -   (#I -  D PAGES)\nCSCSK03D     IEESK03D     .COMMAND SUB-SYSTEM -   (#C -  CALCULATOR)\nCSCSL03D     IEESL03D     .COMMAND SUB-SYSTEM -   (#J -  D A)\nCSCSZ03D     IEESZ03D     .COMMAND SUB-SYSTEM -   (#Z -  D A)\nCSCSM03D     IEESM03D     .COMMAND SUB-SYSTEM -   (#H -  HELP)\nCSCSN03D     IEESN03D     .COMMAND SUB-SYSTEM -   (#T -  D TIOT)\nCSCSO03D     IEESO03D     .COMMAND SUB-SYSTEM -   (#M -  TSO SEND)\nCSCSP0ED     IEESP03D     .COMMAND SUB-SYSTEM -   (#P -  D SU)\nCSCSQ03D     IEESQ03D     .COMMAND SUB-SYSTEM -   (#Q -  ANALYZE ENQ)\nCSCSR03D     IEESR03D     .COMMAND SUB-SYSTEM -   (#O -  I/O PENDING)\nCSCSS03D     IEESS03D     .COMMAND SUB-SYSTEM -   (#E -  EXECUTE)\nCSCZA03D     IEEZA03D     .COMMAND SUB-SYSTEM -   (##A -  ACTIVITY MON.)\nCSCZB03D     IEEZB03D     .COMMAND SUB-SYSTEM -   (##B -  DEVICE MON.)\nCSCZC03D     IEEZC03D     .COMMAND SUB-SYSTEM -   (##C -  CHANNEL MON.)\nCSCZJ03D     IEEZJ03D     .COMMAND SUB-SYSTEM -   (##J -  JOB MON.)\nCSCZP03D     IEEZP03D     .COMMAND SUB-SYSTEM -   (##P -  PAGING MON.)\nCSCZS03D     IEEZS03D     .COMMAND SUB-SYSTEM -   (##S -  SYSIND MON.)\n             NSEGF03D     .CMD SUB-SYS (NONSE) -  (F - FRAME USE GRAPH)\n             NSEGJ03D     .CMD SUB-SYS (NONSE) -  (J - JOB CPU GRAPH)\n             NSEGS03D     .CMD SUB-SYS (NONSE) -  (S - SYS. IND. GRAPH)\n             NSESE03D     .CMD SUB-SYS (NONSE) -  (#A -  ASCB INFO)\n             NSESJ03D     .CMD SUB-SYS (NONSE) -  (#I -  D PAGES)\n             NSESL03D     .CMD SUB-SYS (NONSE) -  (#J -  D A)\n             NSEZJ03D     .CMD SUB-SYS (NONSE) -  (##J -  JOB MON.)\n             NSEZS03D     .CMD SUB-SYS (NONSE) -  (##S -  SYSIND MON.)\n#$#\n             MACROS VERSION  FOR CMDSBMON\n             ALLOC    1.0 .MACRO NEEDED FOR CMDSBMON\n             DYNSPACE 1.0 .MACRO NEEDED FOR CMDSBMON\n             FREE     1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBFRGS 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBTU   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPBTU2  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPCKID  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDDN   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDDNRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDEBUG 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDFPL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDINC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDISP  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDS    1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSECT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSN   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSNPD 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSNRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDSRGR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPDUMMY 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPENDD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDDN  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDISP 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFDSN  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFHOLD 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFORUS 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPFREE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPIOPL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLINK  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOAD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCSW 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCS1 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPLOCS2 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPMCA   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPNTU   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPERM  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPPL   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPROC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPPSWD  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPQNAME 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPRNGE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSPACE 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSPEC  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSR2   1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSSREQ 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSUBL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPSYSOU 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTU    1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTUBFR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTXTL  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPTYPE  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPUNALC 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPUNIT  1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPVCHAR 1.0 .MACRO NEEDED FOR CMDSBMON\n             RCPVOLRT 1.0 .MACRO NEEDED FOR CMDSBMON\n             S99FAIL  1.0 .MACRO NEEDED FOR CMDSBMON\n#$#\n                   VERSION\n             CSCGQQ00 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - QUEUECMN)\n             CSCGQQ01 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - QUEUE)\n             CSCGQQ02 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - ALLOCATE)\n             CSCGQQ03 1.1 .CMD SUB-SYSTEM -       (Q - QCMD - CKPT)\n             CSCGQQ04 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DDNAME)\n             CSCGQQ05 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DISPLAY)\n             CSCGQQ05 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - DISPLAY)\n             CSCGQQ06 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - FINDJOB)\n             CSCGQQ07 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - FORMAT)\n             CSCGQQ08 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - HELP)\n             CSCGQQ09 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - HEXBLK)\n             CSCGQQ10 1.1 .CMD SUB-SYSTEM -       (Q - QCMD - INIT)\n             CSCGQQ11 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JCL)\n             CSCGQQ12 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JLOG)\n             CSCGQQ13 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - JMSG)\n             CSCGQQ14 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - LIST)\n             CSCGQQ15 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - LISTDS)\n             CSCGQQ16 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - PARSE)\n             CSCGQQ17 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - READSPC)\n             CSCGQQ18 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - REPOS)\n             CSCGQQ19 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SAVE)\n             CSCGQQ20 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SEARCH)\n             CSCGQQ21 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - SYSLOG)\n             CSCGQQ22 1.0 .CMD SUB-SYSTEM -       (Q - QCMD - XDS)\n#$#\n                   VERSION\n             MACROS VERSION  FOR THE QUE COMMAND\n             $JQT     1.0 .MACRO NEEDED FOR QUEUE\n             QCLNK    1.0 .MACRO NEEDED FOR QUEUE\n             QCOMMON  1.1 .MACRO NEEDED FOR QUEUE\n             QSTART   1.1 .MACRO NEEDED FOR QUEUE\n             QSTOP    1.0 .MACRO NEEDED FOR QUEUE\n             QTILT    1.0 .MACRO NEEDED FOR QUEUE\n/*\n//DOCCMD2 EXEC  PGM=CMDPRINT,PARM='01072'\n//STEPLIB  DD  DSN=SYS1.XA213#.LOAD,DISP=SHR\n//SYSPRINT DD   SYSOUT=A\n//SYSUDUMP DD   SYSOUT=A\n//SYSIN    DD   DSN=SFT.XA213#.SOURCE(CMDDOCTN),DISP=SHR\n//UPD1    EXEC  PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=A\n//SYSUT1   DD DSN=SYS1.PROCLIB,DISP=SHR\n//SYSUT2   DD DSN=SYS1.PROCLIB,DISP=SHR\n//SYSIN  DD  DATA\n./ ADD NAME=CMD1                           CHANGE THIS CARD TO ./\n//CMD1   PROC  A=ASE0,\n//             B='$',\n//             C=CSK0,\n//             D=DSD0,\n//             E=ESS0,\n//             F=FSF0,\n//             G='$',\n//             H=HSM0,\n//             I=ISJ0,\n//             J=JSL0,\n//             K='$',\n//             L=LSC0,\n//             M=MSO0,\n//             N=NSA0,\n//             O=OSR0,\n//             P=PSP0,\n//             Q=QSQ0,\n//             R=RSG0,\n//             S=SSH0,\n//             T=TSN0,\n//             U='$',\n//             V=VSI0,\n//             W='$',\n//             X='$',\n//             Y='$',\n//             Z=ZSZ0\n//CMD1  EXEC PGM=CMDSBINT,TIME=1440,DPRTY=(15,10)\n// PARM='&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z'\n//SYSUDUMP  DD  SYSOUT=A\n//CSC#ASYS  DD  DUMMY\n//CSC#BSYS  DD  DUMMY\n//CSC#CSYS  DD  DUMMY\n//CSCDATA   DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n//*\n//*      WHERE  -    FOR CSC#.... REPLACE .... WITH SMF SYSID OF ONE\n//*                  OF THE SYSTEMS USING CROSS-SYSTEM COMMANDS.\n//*                  AS MANY CSC#.... DD CARDS AS NECESSARY MAY EXIST.\n//*\n./ ADD NAME=CMDSBMON                          CHANGE THIS CARD TO ./\n//CMDSBMON  PROC  U=XXX\n//CMDSBMON  EXEC  PGM=CMDSBMON,PARM='&U.',REGION=8000K\n//SYSUDUMP  DD    SYSOUT=A\n//CMDLOG    DD    SYSOUT=A\n//CSCDATA  DD  DSN=SYS1.SYSTEM.CMDSBSYS.CSCDATA,DISP=SHR\n//*   WHERE  XXX  IS THE 3270 UNIT ADDRESS\n/*\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 1\n//*\n//*\n//CMDSBJB2 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//DMASM    PROC   MEMBER=,LNCT=55,\n//         ASMLIB='SFT.XA213#.SOURCE',\n//         LINKLIB='SYS1.XA213#.LOAD'\n//ASM EXEC PGM=IEUASM,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=&ASMLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=A\n//SYSGO  DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//DMLINK EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//DMLINK   PROC   MEMBER=,\n//         LINKLIB='SYS1.XA213#.LOAD'\n//DMLINK EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DDNAME=SYSIN\n//SYSLIB  DD DSN=&LINKLIB.,DISP=SHR\n//SYSLMOD DD DSN=&LINKLIB.(&MEMBER.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//ASM00 EXEC DMASM,MEMBER=CMDDUMMY\n//ASM01 EXEC DMASM,MEMBER=CMDSBCSC\n//ASM02 EXEC DMASM,MEMBER=CMDSBINT\n//ASM03 EXEC DMASM,MEMBER=CMDSBSYS\n//ASM04 EXEC DMASM,MEMBER=CMDTSO\n//ASM05 EXEC DMASM,MEMBER=CMDSBTSO\n//ASM05A EXEC DMASM,MEMBER=CMDSBMON\n//ASM06 EXEC DMASM,MEMBER=CSCSB03D\n//ASM07 EXEC DMASM,MEMBER=CSCSA03D\n//DMLINK.SYSIN DD *\n INCLUDE SYSLIB(CSCSB03D)\n ENTRY IEESA03D\n/*\n//ASM08 EXEC DMASM,MEMBER=CSCSC03D\n//ASM09 EXEC DMASM,MEMBER=CSCSD03D\n//ASM10 EXEC DMASM,MEMBER=CSCSE03D\n//ASM11 EXEC DMASM,MEMBER=CSCSF03D\n//ASM12 EXEC DMASM,MEMBER=CSCSG03D\n//ASM13 EXEC DMASM,MEMBER=CSCSH03D\n//ASM14 EXEC DMASM,MEMBER=CSCSI03D\n//ASM15 EXEC DMASM,MEMBER=CSCSJ03D\n//ASM16 EXEC DMASM,MEMBER=CSCSK03D\n//ASM17 EXEC DMASM,MEMBER=CSCSL03D\n//ASM17A EXEC DMASM,MEMBER=CSCSZ03D\n//ASM18 EXEC DMASM,MEMBER=CSCSM03D\n//ASM19 EXEC DMASM,MEMBER=CSCSN03D\n//ASM20 EXEC DMASM,MEMBER=CSCSO03D\n//ASM21 EXEC DMASM,MEMBER=CSCSP03D\n//ASM22 EXEC DMASM,MEMBER=CSCSQ03D\n//ASM23 EXEC DMASM,MEMBER=CSCSR03D\n//ASM24 EXEC DMASM,MEMBER=CSCSS03D\n//ASM25 EXEC DMASM,MEMBER=CSCZB03D\n//ASM26 EXEC DMASM,MEMBER=CSCZC03D\n//ASM27 EXEC DMASM,MEMBER=CSCZJ03D\n//ASM28 EXEC DMASM,MEMBER=CSCZP03D\n//ASM29 EXEC DMASM,MEMBER=CSCZS03D\n//ASM30 EXEC DMASM,MEMBER=CSCGA03D\n//ASM31 EXEC DMASM,MEMBER=CSCGE03D\n//ASM32 EXEC DMASM,MEMBER=CSCGF03D\n//ASM33 EXEC DMASM,MEMBER=CSCGH03D\n//ASM34 EXEC DMASM,MEMBER=CSCGJ03D\n//ASM35 EXEC DMASM,MEMBER=CSCGO03D\n//ASM36 EXEC DMASM,MEMBER=CSCGS03D\n//*ASM37 EXEC DM*ASM,MEMBER=CSCGQQ00\n//*ASM38 EXEC DM*ASM,MEMBER=CSCGQQ01\n//*ASM39 EXEC DM*ASM,MEMBER=CSCGQQ02\n//*ASM40 EXEC DM*ASM,MEMBER=CSCGQQ03\n//*ASM41 EXEC DM*ASM,MEMBER=CSCGQQ04\n//*ASM42 EXEC DM*ASM,MEMBER=CSCGQQ05\n//*ASM43 EXEC DM*ASM,MEMBER=CSCGQQ06\n//*ASM44 EXEC DM*ASM,MEMBER=CSCGQQ07\n//*ASM45 EXEC DM*ASM,MEMBER=CSCGQQ08\n//*ASM46 EXEC DM*ASM,MEMBER=CSCGQQ09\n//*ASM47 EXEC DM*ASM,MEMBER=CSCGQQ10\n//*ASM48 EXEC DM*ASM,MEMBER=CSCGQQ11\n//*ASM49 EXEC DM*ASM,MEMBER=CSCGQQ12\n//*ASM50 EXEC DM*ASM,MEMBER=CSCGQQ13\n//*ASM51 EXEC DM*ASM,MEMBER=CSCGQQ14\n//*ASM52 EXEC DM*ASM,MEMBER=CSCGQQ15\n//*ASM53 EXEC DM*ASM,MEMBER=CSCGQQ16\n//*ASM54 EXEC DM*ASM,MEMBER=CSCGQQ17\n//*ASM55 EXEC DM**ASM,MEMBER=CSCGQQ18\n//*ASM56 EXEC DM*ASM,MEMBER=CSCGQQ19\n//*ASM57 EXEC DM*ASM,MEMBER=CSCGQQ20\n//*ASM58 EXEC DM*ASM,MEMBER=CSCGQQ21\n//*ASM59 EXEC DM*ASM,MEMBER=CSCGQQ22\n//*LNK60 EXEC DMLINK,MEMBER=CSCGQ03D\n//*DMLINK.SYSIN DD *\n//*  INCLUDE SYSLIB(CSCGQQ01)\n//*  INCLUDE SYSLIB(CSCGQQ02)\n//*  INCLUDE SYSLIB(CSCGQQ03)\n//*  INCLUDE SYSLIB(CSCGQQ04)\n//*  INCLUDE SYSLIB(CSCGQQ05)\n//*  INCLUDE SYSLIB(CSCGQQ06)\n//*  INCLUDE SYSLIB(CSCGQQ07)\n//*  INCLUDE SYSLIB(CSCGQQ08)\n//*  INCLUDE SYSLIB(CSCGQQ09)\n//*  INCLUDE SYSLIB(CSCGQQ10)\n//*  INCLUDE SYSLIB(CSCGQQ11)\n//*  INCLUDE SYSLIB(CSCGQQ12)\n//*  INCLUDE SYSLIB(CSCGQQ13)\n//*  INCLUDE SYSLIB(CSCGQQ14)\n//*  INCLUDE SYSLIB(CSCGQQ15)\n//*  INCLUDE SYSLIB(CSCGQQ16)\n//*  INCLUDE SYSLIB(CSCGQQ17)\n//*  INCLUDE SYSLIB(CSCGQQ18)\n//*  INCLUDE SYSLIB(CSCGQQ19)\n//*  INCLUDE SYSLIB(CSCGQQ20)\n//*  INCLUDE SYSLIB(CSCGQQ21)\n//*  INCLUDE SYSLIB(CSCGQQ22)\n//*  ENTRY QUEUE\n//* /*\n//ASM61 EXEC DMASM,MEMBER=CSCZA03D\n//ASM62 EXEC DMASM,MEMBER=CSCGI03D\n//ASM63 EXEC DMASM,MEMBER=CSCGU03D\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 2\n//*\n//*\n//CMDSBJB3 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//*\n//*\n//*   EXECUTE THIS JOB FOR NON-SE SYSTEMS ONLY\n//*\n//*\n//*\n//DMASM    PROC   MEMBER=,LNCT=55,LINKMEM=,\n//         ASMLIB='SFT.XA213#.SOURCE',\n//         LINKLIB='SYS1.XA213#.LOAD'\n//ASM EXEC PGM=IEUASM,PARM=(LOAD,NODECK,'LINECNT=&LNCT.')\n//SYSLIB   DD   DSN=&ASMLIB,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT2  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSUT3  DD  UNIT=SYSDA,SPACE=(TRK,(90,50))\n//SYSPRINT  DD  SYSOUT=A\n//SYSGO  DD  DSN=&&SYSGO,UNIT=SYSDA,SPACE=(TRK,(90,50)),\n//    DISP=(,PASS)\n//SYSIN    DD  DSN=&ASMLIB.(&MEMBER.),DISP=SHR\n//LKED EXEC PGM=IEWL,\n//          PARM='XREF,LET,LIST,AC=1,SIZE=(140K,6400)'\n//SYSLIN   DD   DSN=&&SYSGO,DISP=(OLD,DELETE)\n//     DD   DDNAME=SYSIN\n//SYSLMOD DD DSN=&LINKLIB.(&LINKMEM.),DISP=SHR\n//SYSUT1 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT  DD  SYSOUT=A\n//     PEND\n//ASM01 EXEC DMASM,MEMBER=NSESE03D,LINKMEM=CSCSE03D\n//ASM02 EXEC DMASM,MEMBER=NSESJ03D,LINKMEM=CSCSJ03D\n//ASM03 EXEC DMASM,MEMBER=NSESL03D,LINKMEM=CSCSL03D\n//ASM04 EXEC DMASM,MEMBER=NSEZJ03D,LINKMEM=CSCZJ03D\n//ASM05 EXEC DMASM,MEMBER=NSEZS03D,LINKMEM=CSCZS03D\n//ASM06 EXEC DMASM,MEMBER=NSEGF03D,LINKMEM=CSCGF03D\n//ASM07 EXEC DMASM,MEMBER=NSEGJ03D,LINKMEM=CSCGJ03D\n//ASM08 EXEC DMASM,MEMBER=NSEGS03D,LINKMEM=CSCGS03D\n//*\n//*\n//*     END OF CMD SUB-SYSTEM INSTALL JOB 3\n//*\n//*  -------------------------------------------------------------\n//CMDSBJB4 JOB CLASS=R,REGION=512K,MSGCLASS=A\n//DMCOPY   PROC   LINKLIB='SYS1.XA213#.LOAD',\n//         TARGLIB=\n//DMCOPY EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=A\n//SYSUT1  DD DSN=&LINKLIB.,DISP=SHR\n//SYSUT2  DD DSN=&TARGLIB.,DISP=SHR\n//SYSUT3 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT4 DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//     PEND\n//COPY1 EXEC DMCOPY,TARGLIB='SYS1.LINKLIB'    ANY LINKLIST LIBRARY\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDPRINT,,R))\n S M=((CMDSBCSC,,R))\n S M=((CMDSBINT,,R))\n S M=((CMDSBSYS,,R))\n S M=((CMDSBMON,,R))\n S M=((CSCSA03D,,R))\n S M=((CSCSC03D,,R))\n S M=((CSCSD03D,,R))\n S M=((CSCSE03D,,R))\n S M=((CSCSF03D,,R))\n S M=((CSCSG03D,,R))\n S M=((CSCSH03D,,R))\n S M=((CSCSI03D,,R))\n S M=((CSCSJ03D,,R))\n S M=((CSCSK03D,,R))\n S M=((CSCSL03D,,R))\n S M=((CSCSM03D,,R))\n S M=((CSCSN03D,,R))\n S M=((CSCSO03D,,R))\n S M=((CSCSP03D,,R))\n S M=((CSCSQ03D,,R))\n S M=((CSCSR03D,,R))\n S M=((CSCSS03D,,R))\n S M=((CSCSZ03D,,R))\n S M=((CSCZA03D,,R))\n S M=((CSCZB03D,,R))\n S M=((CSCZC03D,,R))\n S M=((CSCZJ03D,,R))\n S M=((CSCZP03D,,R))\n S M=((CSCZS03D,,R))\n/*\n//COPY2 EXEC DMCOPY,TARGLIB='SYS1.LPALIB'   LPA FOR OPER COMMANDS\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDDUMMY,,R))\n S M=((CSCSA03D,IEESA03D,R))\n S M=((CSCSC03D,IEESC03D,R))\n S M=((CSCSD03D,IEESD03D,R))\n S M=((CSCSE03D,IEESE03D,R))\n S M=((CSCSF03D,IEESF03D,R))\n S M=((CSCSG03D,IEESG03D,R))\n S M=((CSCSH03D,IEESH03D,R))\n S M=((CSCSI03D,IEESI03D,R))\n S M=((CSCSJ03D,IEESJ03D,R))\n S M=((CSCSK03D,IEESK03D,R))\n S M=((CSCSL03D,IEESL03D,R))\n S M=((CSCSM03D,IEESM03D,R))\n S M=((CSCSN03D,IEESN03D,R))\n S M=((CSCSO03D,IEESO03D,R))\n S M=((CSCSP03D,IEESP03D,R))\n S M=((CSCSQ03D,IEESQ03D,R))\n S M=((CSCSR03D,IEESR03D,R))\n S M=((CSCSS03D,IEESS03D,R))\n S M=((CSCSS03D,IEESZ03D,R))\n S M=((CSCZA03D,IEEZA03D,R))\n S M=((CSCZB03D,IEEZB03D,R))\n S M=((CSCZC03D,IEEZC03D,R))\n S M=((CSCZJ03D,IEEZJ03D,R))\n S M=((CSCZP03D,IEEZP03D,R))\n S M=((CSCZS03D,IEEZS03D,R))\n/*\n//COPY3 EXEC DMCOPY,TARGLIB='SYS1.TSOLIB' FULL SCREEN FOR TSO AND OPER\n//SYSIN  DD  *\n C I=SYSUT1,O=SYSUT2\n S M=((CMDTSO,,R))\n S M=((CMDSBTSO,,R))\n S M=((CSCGA03D,,R))        ACTIVITY MONITOR\n S M=((CSCGE03D,,R))        EXCEPTION MONITOR\n S M=((CSCGF03D,,R))        JOB FRAME MONITOR\n S M=((CSCGH03D,,R))        HELP FOR GRAPH MONITORS\n S M=((CSCGI03D,,R))        JES2 INIT DISPLAY\n S M=((CSCGJ03D,,R))        JOB CPU MONITOR\n S M=((CSCGO03D,,R))        I/O ACTIVITY MONITOR\n S M=((CSCGQ03D,,R))        QUE COMMAND\n S M=((CSCGS03D,,R))        SYSTEM IND. GRAPH\n S M=((CSCGU03D,,R))        DASD FREE SPACE\n/*\n./       ADD   NAME=CMDPRINT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                             OPRINT                                  *\n*                          ------------                               *\n*                                                                     *\n*                                                                     *\n*    FUNCTION -      TO PRINT DATASETS GENERATING PAGE EJECTS WHEN    *\n*                    AN   #$#   IS ENCOUNTERED.   RECORD LENGTH IS    *\n*                    CONTROLED BY PARMS AS IS NUMBER OF COPIES.       *\n*                                                                     *\n*    SYSIN -         DDNAME=SYSIN,  DATASET TO BE PRINTED.            *\n*                                                                     *\n*    SYSPRINT -      DDNAME=SYSPRINT,  SYSOUT DATA SET.               *\n*                                                                     *\n*    PARMS -         'CCLLL'                                          *\n*                       CC  -     THE NUMBER OF COPIES DESIRED.       *\n*                       LLL  -    THE SYSPRINT RECORD LENGTH FOR DATA *\n*                                 MOVING ONLY.  DCB LRECL IS 133.     *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\nOPRINT   CSECT\n         SAVE  (14,12)\n         LR    R3,R15              BASE REG\n         USING OPRINT,R3\n         ST    R13,SAVE+4          SAVE AREA\n         LA    R13,SAVE               CONVENTIONS\n         L     R1,0(0,R1)          PARM ADDR\n         MVC   COPIES(2),2(R1)\n         MVC   RECLEN(3),4(R1)     SAVE SYSIN RECORD LENGTH\n         PACK  DOUBLE(8),COPIES(2)\n         CVB   R4,DOUBLE           NO. OF COPIES\n         PACK  DOUBLE(8),RECLEN(3)\n         CVB   R5,DOUBLE           GET LRECL\n         CH    R5,=H'132'          MAX LRECL\n         BH    ABEND               OVER MAX, ABEND\n         BCTR  R5,0                SET MOVE LENGTH\n         OPEN  (SYSPRINT,(OUTPUT))\nOPEN     OPEN  (SYSIN)\nGET      GET   SYSIN,WORK          GET A RECORD\n         CLC   WORK(3),=C'#$#'     SKIP TO CHANNEL 1 IND\n         BE    PUTSKIP             YES,GO SKIP\n         EX    R5,PRTMOVE          MOVE SYSIN TO SYSPRINT\n         PUT   SYSPRINT,PRINT      PUT A RECORD\n         B     GET                 GET NEXT RECORD\nPUTSKIP  PUT   SYSPRINT,PRINT-1    SKIP TO CHANNEL 1\n         B     GET                 GET NEXT RECORD\nPRTMOVE  MVC   PRINT+1(1),WORK     EXECUTED MOVE\nABEND    ABEND 1\nEOJ      CLOSE (SYSIN)\n         BCT   R4,OPEN\n         CLOSE (SYSPRINT)\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         LTORG\nSAVE     DS    18F\n         DS    0D\nDOUBLE   DC    2F'0'\nRECLEN   DS    CL3\nCOPIES   DS    CL2\nWORK     DS    CL132\n         DC    X'8B'\nPRINT    DC    X'09',CL132' '\n         EJECT\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,RECFM=FB,MACRF=(GM),EODAD=EOJ\nSYSPRINT DCB DDNAME=SYSPRINT,DSORG=PS,RECFM=FBM,LRECL=133,BLKSIZE=1330,X\n               MACRF=(PM)\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CMDSBCSC\n         TITLE 'CMDSBCSC -   CROSS-SYSTEM CONTROL MODULE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDSBCSC -       CROSS-SYSTEM CONTROL MODULE              ***\n***                                                                 ***\n***       VERSION -        3.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA SP 2.1.1                          ***\n***                                                                 ***\n***       UPDATED -        02/13/81                                 ***\n***                                                                 ***\n***                        02/02/84   SNET-JAL 31-BIT CODING FOR XA ***\n***                                                                 ***\n***       WARNINGS -       THE CSCDATA DATA SET USED BY THIS        ***\n***                        MODULE MUST BE INITIALIZED WITH 16       ***\n***                        BYTES OF BINARY ZEROES.  ALLOCATE        ***\n***                        THIS DATA SET WITH RECFM=U,LRECL=0,      ***\n***                        BLKSIZE=16.                              ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDSBCSC CSECT\n         SAVE  (14,12)                   SAVE REGISTERS\n         LR    R3,R15                    ESTABLISH BASE REGISTER\n         USING CMDSBCSC,R3\n         ST    R13,SAVE+4                CALLERS SAVE AREA ADDRESS\n         LA    R13,SAVE                  GET OUR SAVE AREA ADDRESS\n         LA    R12,0(0,R1)               COMM AREA ADDRESS\n         USING AREA,R12                  ADDRESSABILITY FOR COMM AREA\n         LA    R2,XSA\n         ST    R2,SAVER2\n         ST    R12,SAVER12\n         L     R1,16                     CVT\n         L     R1,196(0,R1)              SMCA\n         MVC   CSCSID(4),16(R1)          SAVE SYSTEM ID\n         MVC   CSCIN+62(2),=H'19069'     SET FULL BLOCKSIZE\n         OPEN  (CSCIN,(INPUT))           OPEN COMMUNICATION DATA SET\n         TM    CSCIN+48,X'10'            Q. WAS OPEN OK ?\n         BZ    CSCEXIT                   A. NO TURN OFF FACILITY\n         MODESET KEY=ZERO,MODE=SUP       SWITCH INTO PROTECT KEY ZERO\n         SPACE 1\n***********************************************************************\n*  WE NOW WAIT FOR TWENTY SECONDS, AFTER WHICH A READ WILL BE ISSUED  *\n*             TO THE COMMUNICATIONS DATA SET.                         *\n***********************************************************************\nCSC      STIMER WAIT,DINTVL=CSCWAIT\n         L     R1,16                     CVT\n         L     R1,0(0,R1)                TCB WORDS\n         L     R1,12(0,R1)               CURRENT ASCB\n         SR    R10,R10             -JAL/XA-\n         L     R10,AMODE31         -JAL/XA-\n         BSM   0,R10               -JAL/XA-\nAMODE31  DC    A(OUCBCONT+X'80000000') -JAL/XA-\nOUCBCONT DS    0H                  -JAL/XA-\n         L     R1,144(0,R1)        OUCB\n         OI    17(R1),X'80'        SET NON-SWAPPABLE\n         LA    R10,AMODE24         -JAL/XA-\n         BSM   0,R10               -JAL/XA-\nAMODE24  DS    0H                  -JAL/XA-\n         L     R1,RESETCNT               RESET COUNT\n         BCT   R1,CSC1                   BR AROUND RESET\n         L     R1,=F'-1'                 FORCE NEVER RESET\n         MVC   CSCWAIT+4(4),=CL4'2000'   20 SECOND WAIT\n         MVC   PREVCNT(4),=F'3'\n         MVC   PREVSTRT(4),=F'3'\n         SPACE 1\nCSC1     ST    R1,RESETCNT               SAVE NEW COUNT\n         BAL   R10,CSCREAD               READ CSC DATA\n         CLI   CSCCMD,X'00'              COMMAND REQUEST\n         BNE   CSCCOM                    YES\n         SPACE 1\nCSC2     CLC   CSCSID(4),4(R11)    OUTPUT OR COM REQUEST FOR THIS SYS\n         BNE   CSC                 NO\n         CLI   0(R11),X'00'        OUTPUT REQUEST\n         BE    CSCOUT$             YES\n         B     CSCLNK              NO, CMD REQUEST\n         EJECT\nCSCCOM   CLI   CSCCMD,C'*'         CROSS-SYSTEM TERMINATE REQUEST\n         BE    CSCEXIT             YES\n         CLC   0(8,R11),=8X'00'    CROSS-SYSTEM BUSY\n         BE    CSCCOM1             NO\n         MVI   CSCCMD,X'00'\n         MVC   COMSID(4),4(R11)\n         LA    R1,COMMSG           BUSY MSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     CSC2\n         SPACE 1\nCSCCOM1  SR    R1,R1\n         IC    R1,XAU\n         STH   R1,8(0,R11)         SAVE UCM ID\n         MVC   0(4,R11),CSCSID     SENDING SYSID\n         XC    10(2,R11),10(R11)\n         MVC   12(4,R11),=F'148'   COMMAND RECORD LENGTH\n         MVC   16(78,R11),CSCCMD   MOVE COMMAND TO RECORD\n         MVC   96(52,R11),CSCHDR   MOVE HEADER TO RECORD\n         BAL   R10,CSCSYS          MOVE RECEIVING SYSID TO RECORD\n         BAL   R10,CSCWRITE        REWRITE RECORD\n         MVC   RECVMSG+24(1),16(R11)\n         SR    R0,R0\n         IC    R0,XAU\n         LA    R1,RECVMSG\n         SVC   35\n         MVI   CSCCMD,X'00'\n         B     CSC\n         SPACE 3\nCSCOUT$  LH    R8,8(0,R11)         UCM ID\n         LH    R9,10(0,R11)        WTO COUNT\n         LA    R1,96(0,R11)        HEADER ADDR\n         LR    R0,R8               UCM ID\n         SVC   35\n         LA    R11,148(0,R11)      1ST WTO ADDR\n         SPACE 1\nCSCOUT1  LR    R0,R8               UCM ID\n         MVC   RECWTO(80),0(R11)\n         LA    R1,RECWTO           MSG ADDR\n         SVC   35\n         LH    R1,0(0,R11)         WTO LENGTH\n         LA    R11,0(R1,R11)       NEXT MSG\n         BCT   R9,CSCOUT1\n         BAL   R10,CSCCLEAR        RESET DATASET TO ALLOW REUSE\n         B     CSC\n         EJECT\nCSCLNK   MVC   4(4,R11),0(R11)     SET UP RECEIVING SYSID\n         LA    R1,148(0,R11)       1ST WTO SLOT\n         ST    R1,0(0,R11)         SAVE ADDR\n         LA    R1,148\n         ST    R1,RECORD+12        SET BASE LENGTH\n         BAL   R10,CSCSET          SET UP ENTRY\n         B     CSCLNK1             BYPASS COMMAND ENTRY IF INVALID CMD\n         LA    R2,EXITLIST         PARM LIST FOR COMMAND\n         BALR  R14,R15             BR TO COMMAND MODULE\n         SPACE 3\n         BALR  R15,0\n         USING *,R15\n         L     R3,=A(CMDSBCSC)     RELOAD ORIG ENTRY POINT\n         DROP  R15\n         SPACE 1\n         L     R4,MODLOC\n         DELETE EPLOC=(R4)\n         SPACE 1\n         L     R2,SAVER2\n         L     R12,SAVER12\n         LA    R13,SAVE\n         SPACE 1\nCSCLNK1  XC    RECORD(4),RECORD    INDICATE OUTPUT READY\n         BAL   R10,CSCWRITE        REWRITE CSC DATA\n         B     CSC\n         EJECT\nCSCSYS   LA    R1,16(0,R11)        COMMAND BEGIN\n         LA    R8,94(0,R11)        COMMAND END\n         SPACE 1\nCSCSYS1  CLC   0(2,R8),=C'S='      SYSID PARM\n         BE    CSCSYS3             YES\n         BCTR  R8,0\n         CR    R1,R8               SYSID PARM MISSING\n         BNE   CSCSYS1             NO\n         SPACE 1\nCSCSYS2  LA    R1,CSCERR           ERROR MESSAGE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVI   CSCCMD,X'00'\n         B     CSC\n         SPACE 1\nCSCSYS3  MVC   4(4,R11),2(R8)      SET UP RECEIVING SYSID\n         LA    R1,CSCSTABL\n         BCTR  R8,0\n         MVC   0(8,R8),=CL8' '\n         SPACE 1\nCSCSYS4  CLC   4(4,R11),0(R1)      VALID\n         BCR   8,R10               YES\n         LA    R1,4(0,R1)\n         CLC   0(4,R1),=F'0'       END OF SYSID TABLE\n         BNE   CSCSYS4             NO, TRY NEXT\n         B     CSCSYS2             INVALID, ERR MSG\n         EJECT\nCSCREAD  MVC   CSCIN+62(2),=H'19069' FULL BLOCKSIZE\n***********************************************************************\n*                                                                     *\n*               READ THE COMMUNICATIONS DATA SET                      *\n*                                                                     *\n***********************************************************************\n*\n         POINT CSCIN,RECORD1\n         READ  DECB1,SF,CSCIN,RECORD,'S'\n         CHECK DECB1\n         LA    R11,RECORD\n         CLC   0(12,R11),=XL12'00' ZERO REQUEST\n         BE    CSCREAD1            NO\n         CLC   0(96,R11),PREVREC   SAME REQUEST\n         BNE   CSCREAD1            NO\n         L     R1,PREVCNT\n         BCT   R1,CSCREAD2         CONTINUE\n         L     R1,PREVSTRT         SET NEW COUNT\n         ST    R1,PREVCNT          SAVE COUNT\n         LA    R10,CSC             NEW RETURN ADDR\n         MVC   TIMESID(4),4(R11)\n         LA    R1,TIMEMSG          TIMEOUT MSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     CSCCLEAR\n         SPACE 1\nCSCREAD1 MVC   PREVREC(96),0(R11)  SAVE NEW REQUEST\n         LA    R1,5                SET NEW COUNT\n         SPACE 1\nCSCREAD2 ST    R1,PREVCNT          SAVE COUNT\n         BR    R10\n         EJECT\nCSCCLEAR XC    RECORD(16),RECORD\n         SPACE 1\nCSCWRITE L     R1,RECORD+12        RECORD LENGTH\n         LTR   R1,R1               ZERO LENGTH\n         BNZ   CSCWRIT1            NO\n         LA    R1,16               MINIMUM LENGTH\n         SPACE 1\nCSCWRIT1 STH   R1,CSCOUT+62       SAVE LENGTH FOR WRITE\n         LR    R2,R1\n***********************************************************************\n*                                                                     *\n*              RE-WRITE THE COMMUNICATIONS DATA SET RECORD            *\n*                                                                     *\n***********************************************************************\n         TM    CSCOUT+48,X'10'            Q. WAS OPEN DONE ?\n         BO    CSCDOIO                    A. YES DO IO OPERATION\n         OPEN  (CSCOUT,(OUTPUT))          OPEN COMMUNICATIONS DATA SET\n         TM    CSCOUT+48,X'10'            Q. OPEN MAKE IT ?\n         BZ    CSCEXIT                    A. NO - TURN OFF FACILITY\nCSCDOIO  POINT CSCOUT,RECORD1\n         WRITE DECB2,SF,CSCOUT,RECORD,'S'\n         CHECK DECB2\n         MVC   RESETCNT(4),=F'20' RESET IN 100 SECONDS\n         MVC   CSCWAIT+4(4),=CL4'0500'  5 SECOND STIMER WAIT\n         MVC   PREVCNT(4),=F'5'\n         MVC   PREVSTRT(4),=F'5'\n         BR    R10\n         SPACE 3\n         USING CSCENTRY,R15\nCSCENTRY STM   R13,R14,8(R2)       SAVE WORK REGS\n         L     R14,RECORD+12       CURRENT LENGTH\n         AH    R14,0(0,R1)         ADD WTO LENGTH\n         ST    R14,RECORD+12       SAVE NEW LENGTH\n         L     R14,RECORD          NEXT WTO SLOT\n         LH    R13,0(0,R1)         WTO LENGTH\n         BCTR  R13,0\n         EX    R13,CSCMOVE         MOVE WTO TO OUTPUT\n         LA    R14,1(R13,R14)      NEXT WTO SLOT\n         ST    R14,RECORD          SAVE NEXT SLOT ADDR\n         LH    R14,RECORD+10       WTO COUNT\n         LA    R14,1(0,R14)        ADD 1\n         STH   R14,RECORD+10       SAVE WTO COUNT\n         LM    R13,R14,8(R2)       RELOAD ORIG REGS\n         BR    R14\n         SPACE 1\nCSCMOVE  MVC   0(0,R14),0(R1)\n         DROP  R15\n         EJECT\nCSCSET   TR    16(1,R11),COMTAB    MODULE NAME INDEX\n         SR    R4,R4\n         IC    R4,16(0,R11)        MODULE NAME INDEX\n         SLL   R4,3                MULTIPLY BY 8\n         LTR   R4,R4               INVALID CSC COMMAND DETECTED\n         BZ    CSCSET4             YES, DO DUMMY OUTPUT\n         LA    R4,MODLIST(R4)      MODULE NAME ADDR\n         SR    R15,R15\n         CLI   17(R11),C' '        SUB-PARM EXIST\n         BE    CSCSET0             NO\n         LA    R15,17(0,R11)       SUBPARM ADDR\n         SPACE 1\nCSCSET0  ST    R15,EXITLIST+20     SAVE SUB-PARM ADDR\n         ST    R4,MODLOC           SAVE EP NAME LOCATION\n         LOAD  EPLOC=(R4)\n         LR    R5,R0               MODULE ADDR\n         LA    R15,0(0,R5)         MODULE ADDR\n         LA    R6,0(0,R1)          MODULE DOUBLEWORDS\n         SLL   R6,3                MODULE LENGTH\n         SH    R6,=H'6'            ADJUST SCAN LENGTH\n         SPACE  1\nCSCSET1  CLC   0(6,R5),=X'430020280A23'   WTO INSTRUCTIONS\n         BE    CSCSET3             YES\n         SPACE 1\nCSCSET2  LA    R5,2(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCT   R6,CSCSET1          PROCESS NEXT\n         B     4(R10)\n         SPACE 1\nCSCSET3  MVC   0(6,R5),=X'58F0200005EF'\n         B     CSCSET2\n         SPACE 1\nCSCSET4  L     R14,RECORD+12       CURRENT RECORD LENGTH\n         LA    R1,CSCINV           MSG TO INSERT\n         AH    R14,0(0,R1)         ADD MSG LENGTH\n         ST    R14,RECORD+12       SAVE NEW RECORD LENGTH\n         L     R14,RECORD          OUTPUT SLOT ADDRESS\n         LH    R6,0(0,R1)          WTO LENGTH\n         BCTR  R6,0                ADJUST FOR EXECUTED MOVE\n         EX    R6,CSCMOVE          MOVE MSG TO RECORD\n         MVC   RECORD+10(2),=H'1'  WTO COUNT = 1\n         BR    R10\n         SPACE 3\nCSCEXIT  MODESET KEY=NZERO,MODE=PROB\n         TM    CSCOUT+48,X'10'            Q. WAS OPEN DONE ?\n         BZ    CLOSE2                     A. NO SKIP CLOSE\n         CLOSE (CSCOUT)\nCLOSE2   TM    CSCIN+48,X'10'            Q. WAS OPEN DONE ?\n         BZ    LASTMSG                   A. NO SKIP CLOSE\n         CLOSE (CSCIN)\nLASTMSG  WTO   'CMD SUBSYS -   CSC FACILITY DISABLED'\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         EJECT\n         LTORG\n         SPACE 3\nRECORD1  DC    A(256)              TTRZ RECORD 1\nSAVE     DS    18F\n         DS    0D\nCSCWAIT  DC    CL8'00002000'\nCSCSID   DS    F\nMODLOC   DS    F\nSAVER2   DS    F\nSAVER12  DS    F\nRESETCNT DC    F'-1'\nPREVCNT  DC    F'3'\nPREVSTRT DC    F'3'\nPREVREC  DC    CL96' '\nRECWTO   DC    CL80' '\n         SPACE 3\nEXITLIST DC    A(CSCENTRY)\n         DC    11F'0'\n         EJECT\nCSCINV   DS    0CL48\n         DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   CSC INVALID COMMAND'\n         SPACE 3\nCSCERR   DS    0CL48\n         DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   CSC PARAMETER ERROR'\n         SPACE 3\nRECVMSG  DS    0CL48\n         DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   CSC #X COMMAND ACCEPTED'\n         SPACE 3\nCOMMSG   DS    0CL48\n         DC    X'00300100'\n         DC    CL40'CMD SUBSYS -   CSC BUSY, CMD PENDING ON '\nCOMSID   DC    CL4' '\n         SPACE 3\nTIMEMSG  DS    0CL52\n         DC    X'00340100'\n         DC    CL43'CMD SUBSYS -   CSC TIMEOUT, CMD PENDING ON '\nTIMESID  DC    CL4' ',C' '\n         EJECT\n         DS    0D\nCOMTAB   DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'04000A031105000C09',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'0B00020D01100E0F06',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0700000800030012',XL23'00'\n         SPACE 3\nMODLIST  DC    CL8' '\n         DC    CL8'CSCSA03D'  1\n         DC    CL8'CSCSC03D'  2\n         DC    CL8'CSCSD03D'  3\n         DC    CL8'CSCSE03D'  4\n         DC    CL8'CSCSF03D'  5\n         DC    CL8'CSCSG03D'  6\n         DC    CL8'CSCSH03D'  7\n         DC    CL8'CSCSI03D'  8\n         DC    CL8'CSCSJ03D'  9\n         DC    CL8'CSCSK03D'  A\n         DC    CL8'CSCSL03D'  B\n         DC    CL8'CSCSM03D'  C\n         DC    CL8'CSCSO03D'  D\n         DC    CL8'CSCSP03D'  E\n         DC    CL8'CSCSQ03D'  F\n         DC    CL8'CSCSR03D'  10\n         DC    CL8'CSCSS03D'  11\n         DC    CL8'CSCSZ03D'  12\n         DC    CL8'        '\n         DC    CL8'        '\n         DC    CL8'        '\n         EJECT\nCSCIN    DCB   DDNAME=CSCDATA,DSORG=PS,RECFM=U,BLKSIZE=19069,          X\n               MACRF=(RP),BUFNO=1\nCSCOUT   DCB   DDNAME=CSCDATA,DSORG=PS,RECFM=U,BLKSIZE=19069,          X\n               MACRF=(WP),BUFNO=1\n         SPACE 5\nRECORD   DS    CL19069\n         EJECT\nAREA     DSECT\nSSVT     DS    H\nSSVTFNUM DS    H\nSSVTFCOD DS    XL256\nSSVTFRTN DS    0F\nSSVTFUNC DS    0F\nSSVTFUN1 DS    F\n         DS    8F\nSSVTMSGT DS    F\nSSVTLIST DS    2F\nSSVTECB  DS    F\n         DS    0D\nSSVTWAIT DS    CL8\nSSVTTIME DS    F\nSSVTASCB DS    0F\nSSVTSTAT DS    X\n         DS    XL3\nSSVTUMID DS    F\n         SPACE 3\nCMDTABLE DS    20F\nCMDEND   DS    F\n         EJECT\n         DS    0D\nUSERWORK DS    0CL228\nDOUBLE   DS    D\nCMDSAVE  DS    18F\nCOMMAND  DS    CL80\nINCONS   DS    CL2\n         SPACE 2\n         DS    0F\nWTOLIST  DS    0CL52\n         DS    CL19\nCMDID    DS    C\n         DS    CL5\nUCMID    DS    CL2\n         DS    CL2\nSYSID    DS    CL4\n         DS    CL2\nYEAR     DS    CL2\n         DS    C\nDAY      DS    CL3\n         DS    CL2\nHOUR     DS    CL2\n         DS    C\nMINUTE   DS    CL2\n         DS    CL4\nPADDING  DS    CL12\n         SPACE 2\nXSA      DS    0CL48\n         DS    5F\nXAL      DS    F\nXAT      DS    F\n         DS    F\nXAS      DS    2F\nXAU      DS    X\n         DS    XL7\n         SPACE 2\nCMD##    DS    CL78\nHDRMSG   DS    CL52\nDISBL    DS    CL48\n         DS    0F\nCSCHDR   DS    CL52\nCSCCMD   DS    CL78\nCSCSTABL DS    CL48\n         SPACE 2\nAREAEND  DS    0D\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CMDSBINT\n         TITLE 'CMDSBINT -   INITIALIZATION AND MONITOR MODULE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDSBINT -       INITIALIZATION AND MONITOR MODULE        ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA SP2.1.1                           ***\n***                                                                 ***\n***       UPDATED -        12/15/79                                 ***\n***                                                                 ***\n***                        02/02/84 SNET-JAL 31-BIT CODING ADDED    ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDSBINT CSECT\n         SAVE  (14,12)\n         LR    R3,R15\n         USING CMDSBINT,R3\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         L     R4,0(0,R1)          PARM ADDR\n         LH    R5,0(0,R4)          PARM LENGTH\n         LA    R4,2(0,R4)          PARM BEGIN\n         LA    R7,TABLE            LOAD INIT TABLE ADDR\n         LTR   R5,R5               ANY PARMS\n         BNZ   PARM                YES, PROCESS\n         SPACE 1\n         ABEND 78,DUMP\n         SPACE 3\nPARM     CLI   0(R4),C'$'          BYPASSED OR NON-EXISTANT CMD\n         BE    PARM2               YES, NEXT PARM\n         MVC   0(4,R7),0(R4)       SET IN INIT TABLE\n         LA    R7,4(0,R7)          NEXT TABLE SLOT\n         C     R7,=A(TABEND)       ANY MORE SLOTS\n         BE    PARMEND             NO, JUST USE THESE\n         SPACE 1\nPARM1    LA    R4,3(0,R4)          NEXT PARM-1\n         SH    R5,=H'3'            DECR PARM LENGTH\n         SPACE 1\nPARM2    LA    R4,1(0,R4)          NEXT PARM\n         BCTR  R5,0                DECR PARM LENGTH\n         LTR   R5,R5               ARE ALL PARMS PROCESSED\n         BP    PARM                NO, CONTINUE\n         EJECT\nPARMEND  MODESET KEY=ZERO,MODE=SUP\n         SPACE 1\n         L     R0,SIZE             LOAD SIZE AND SUBPOOL\n         SPACE 1\n         GETMAIN R,LV=(0)\n         SPACE 1\n         LR    R4,R1               SAVE ADDR OR SSVT AND WORK AREA\n         USING AREA,R4\n         XC    SSVT(4),SSVT        CLEAR SSVT 1ST 4 BYTES\n         MVI   SSVTFNUM+1,X'01'    SET NO. OF SUPPORTED FUNCTIONS\n         XC    SSVTFCOD(256),SSVTFCOD  CLEAR FUNCTION MATRIX\n         XC    SSVTFUNC(156),SSVTFUNC  CLEAR REST OF SSVT\n         XC    USERWORK(228),USERWORK  CLEAR WORK AREA\n         XC    CMDXSA(48),CMDXSA   CLEAR # XSA\n         XC    XSA(48),XSA         CLEAR ## XSA\n         XC    CSCCMD(78),CSCCMD   CLEAR CSC COMMAND AREA\n         XC    CSCSTABL(48),CSCSTABL CLEAR CSC SYSID TABLE\n         MVI   SSVTSTAT,X'FF'      SET MONITOR BUSY INDICATOR\n         MVI   SSVTFCOD+9,X'01'    SUPPORT CMD ENTRY\n         LA    R1,SSVTECB          COMMAND ANSWER ECB\n         ST    R1,SSVTLIST         ECB ADDR TO ECB LIST\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,12(0,R1)         CURRENT ASCB\n         ST    R1,SSVTASCB         SAVE CMD1 ASCB ADDR\n         L     R1,56(0,R1)         CSCB ADDR\n         L     R1,40(0,R1)         STOP/MODIFY ECB ADDR\n         ST    R1,SSVTLIST+4       ECB ADDR TO LIST\n         MVI   SSVTLIST+4,X'80'    END OF LIST INDICATOR\n         LA    R1,SSVTWAIT         WAIT TIME FIELD\n         ST    R1,XAT              SAVE ADDR IN XSA\n         EJECT\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,12(0,R1)         CURRENT ASCB\n         SR    R15,R15             -JAL/XA-\n         L     R15,AMODE31         -JAL/XA-\n         BSM   0,R15               -JAL/XA-\nAMODE31  DC    A(OUCBCONT+X'80000000') -JAL/XA-\nOUCBCONT DS    0H                  -JAL/XA-\n         L     R1,144(0,R1)        OUCB\n         OI    17(R1),X'80'        SET NON-SWAPPABLE\n         LA    R15,AMODE24         -JAL/XA-\n         BSM   0,R15               -JAL/XA-\nAMODE24  DS    0H                  -JAL/XA-\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,4(0,R1)          CURRENT TCB\n         L     R1,12(0,R1)         TIOT\n         LA    R1,24(0,R1)         DD ENTRIES\n         LA    R14,CSCSTABL        CSC SYSID TABLE\n         SPACE 1\nCSCLOOP  CLC   4(8,R1),=CL8'CSCDATA'\n         BE    CSCATCH             CSCDATA DD FOUND, ATTACH CMDSBCSC\n         CLC   4(4,R1),=CL4'CSC#'\n         BE    CSCLOOP2            CSC SYSID DD FOUND\n         SPACE 1\nCSCLOOP1 SR    R15,R15\n         IC    R15,0(0,R1)         DD ENTRY LENGTH\n         LA    R1,0(R15,R1)        NEXT DD ENTRY\n         LTR   R15,R15             END OF TIOT\n         BNZ   CSCLOOP             NO, CHECK NEXT\n         L     R15,CSCTCB          CSC SUB-TASK TCB\n         LTR   R15,R15             CSC ATTACHED\n         BNZ   NOCSC               YES, CONTINUE\n         MVI   CSCCMD,C'*'         INDICATE CSC NOT ACTIVE\n         B     NOCSC\n         SPACE 1\nCSCLOOP2 MVC   0(4,R14),8(R1)      CSC SYSID\n         LA    R14,4(0,R14)        NEXT ENTRY\n         B     CSCLOOP1\n         SPACE 1\nCSCATCH  LA    R1,AREA\n         XC    TERMECB(4),TERMECB\n         ATTACH EP=CMDSBCSC,ECB=TERMECB\n         ST    R1,CSCTCB           SAVE CSC TCB ADDR\n         B     CSCLOOP1\nNOCSC    EQU   *\n         EJECT\n         LOAD  EP=CMDSBSYS         LOAD CMD SUB-SYSTEM MODULE\n         SPACE 1\n         LR    R10,R0              LOAD FROM ADDR\n         LA    R11,0(0,R1)         LOAD LENGTH\n         SLL   R11,3               MULT NO. OF DOUBLEWORDS BY 8\n         SPACE 1\n         LOAD  EP=CMDDUMMY         LOAD DUMMY FLPA MODULE ADDR\n         SPACE 1\n         LR    R8,R0               SAVE\n         A     R8,0(0,R10)            FUNCTION 1\n         ST    R8,SSVTFUN1               ADDR IN SSVT\n         LR    R8,R0               LOAD TO ADDR\n         LA    R9,0(0,R1)          LOAD LENGTH\n         SLL   R9,3                MULT NO. OF DOUBLEWORDS BY 8\n         EJECT\n*\n*   THE FOLLOWING PAGE FIX CODE WILL FIX CMDDUMMY IN PLPA\n*   ELIMINATING THE REQUIREMENT TO PUT IT IN A FIX LIST\n*\n*   THE ABOVE IS NOT TRUE YOU STILL NEED TO PUT\n*   CMDDUMMY IN THE FIX LIST\n*\nPGFIX    LR    R5,R8               ... MODULE START\n         SRL   R5,12               ... START PAGE\n         LA    R6,0(R9,R8)         ... MODULE END\n         SRL   R6,12               ... END PAGE\n         XC    FIXECB(4),FIXECB    ... CLEAR PGFIX ECB\n         PGFIX R,A=(5),ECB=FIXECB  ... FIX 1ST PAGE\n         WAIT  ECB=FIXECB          ...\n         CR    R5,R6               ... IS MODULE IN 1 OR 2 PAGES\n         BE    PGFIX1              ... 1 PAGE, BYPASS 2ND PGFIX\n         XC    FIXECB(4),FIXECB    ... CLEAR PGFIX ECB\n         PGFIX R,A=(6),ECB=FIXECB  ... FIX 2ND PAGE\n         WAIT  ECB=FIXECB          ...\n         SPACE 1\nPGFIX1   EQU   *\n         EJECT\n         MVCL  R8,R10              MOVE IN SUB-SYS MODULE\n         L     R5,16               CVT\n         L     R6,0(0,R5)          TCB WORDS\n         L     R6,4(0,R6)          CURRENT TCB\n         L     R6,12(0,R6)         TIOT\n         L     R5,296(0,R5)        JESCT\n         L     R5,24(0,R5)         1ST SSCVT ADDR\n         EJECT\nSSCVT1   CLC   8(4,R5),8(R6)       NAME MATCH\n         BE    SSCVT2              YES, CONTINUE\n         L     R5,4(0,R5)          NEXT SSCVT\n         LTR   R5,R5               ZERO SSCVT\n         BNZ   SSCVT1              NO, CONTINUE\n         SPACE 1\n         ABEND 77,DUMP             INIT ERROR\n         SPACE 3\nSSCVT2   LA    R7,TABLE            INPUT TABLE\n         LA    R12,CMDTABLE        OUTPUT TABLE\n         XC    0(84,R12),0(R12)    CLEAR OUTPUT TABLE\n         SPACE 3\nSSCVT3   MVC   CMDNAME+3(2),1(R7)  FINISH NAME\n         SPACE 1\n         LOAD  EPLOC=CMDNAME       LOAD IT\n         SPACE 1\n         CLI   3(R7),C'0'          TEST VERSION\n         BNE   SSCVT5              YES, GET DUMMY TO OVERLAY\n         ST    R0,0(0,R12)         SAVE ADDRESS\n         MVC   0(1,R12),0(R7)      SAVE COMMAND ID\n         DELETE EPLOC=CMDNAME\n         EJECT\nSSCVT4   LA    R7,4(0,R7)          INCR INPUT TABLE\n         LA    R12,4(0,R12)        INCR OUTPUT TABLE\n         CLI   0(R7),X'00'         END OF INPUT\n         BE    SSCVT6              YES, EXIT\n         B     SSCVT3              CONTINUE\n         SPACE 3\nSSCVT5   LR    R10,R0              SAVE TEST MODULE ADDR\n         LA    R11,0(0,R1)         SAVE FROM LENGTH\n         SLL   R11,3               MULT NO. OF DOUBLEWORDS BY 8\n         MVC   TESTNAME+7(1),3(R7) FINISH NAME\n         SPACE 1\n         LOAD  EPLOC=TESTNAME\n         SPACE 1\n         ST    R0,0(0,R12)         SAVE ADDRESS\n         MVC   0(1,R12),0(R7)      SAVE COMMAND ID\n         LR    R8,R0               SAVE DUMMY MODULE ADDR\n         LA    R9,2048             SAVE TO LENGTH\n         MVCL  R8,R10              MOVE IN TEST MODULE\n         B     SSCVT4              NEXT\n         SPACE 3\nSSCVT6   ST    R4,16(0,R5)         SAVE SSVT ADDR IN SSCVT\n         LA    R8,CMD##TAB\n         SPACE 1\nSSCVT7   CLC   0(4,R8),=F'0'       END OF COMMANDS\n         BE    WAIT                YES\n         MVC   CMD#ID(1),0(R8)     SET UP COMMAND MODULE NAME\n         LOAD  EPLOC=CMD#NAME\n         ST    R0,0(0,R8)          SAVE MODULE ADDR\n         MVC   0(1,R8),CMD#ID      RESTORE COMMAND ID\n         LA    R8,4(0,R8)          NEXT COMMAND\n         B     SSCVT7\n         EJECT\nWAIT     XC    SSVTECB(4),SSVTECB\n         MVI   SSVTSTAT,X'00'      SET MONITOR READY INDICATOR\n         WAIT  ECBLIST=SSVTLIST\n         L     R1,SSVTASCB         ASCB ADDR\n         L     R1,56(0,R1)         CSCB ADDR\n         L     R14,40(0,R1)        ECB ADDR\n         TM    0(R14),X'40'        STOP COMMAND ISSUED\n         BZ    CMDPROC             NO\n         WTO   'CMD SUBSYS -   COMMAND SUB-SYSTEM TERMINATED',DESC=2\n         XC    16(4,R5),16(R5)     DISCONNECT CMD SUBSYS\n         CLI   CSCCMD,C'*'         CSC ACTIVE\n         BE    EXIT                NO, BYPASS DETACH\n         MVI   CSCCMD,C'*'         INDICATE SHUTDOWN\n         WAIT  ECB=TERMECB\n         LA    R1,CSCTCB\n         DETACH (1)\n         SPACE 1\nEXIT     LR    R1,R4               GETMAIN AREA\n         L     R0,SIZE\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 3\nRETURN   L     R13,SAVE+4\n         SPACE 1\n         RETURN (14,12),RC=0\n         EJECT\nCMDPROC  MVC   XAU(1),SSVTUMID+3\n         MVC   SSVTWAIT(8),=8C'0'\n         XC    SSVTTIME(4),SSVTTIME\n         LA    R1,CMD##\n         CLI   0(R1),C'$'          TABLE ENTRY DELETE REQUEST\n         BE    CMDDEL              YES\n         LA    R8,CMD##+73\n         SPACE 1\nCMDPROCA CLC   0(2,R8),=C'T='      TIME PARM\n         BE    CMDPROCB            YES\n         BCTR  R8,0                PREVIOUS CHARACTER\n         CR    R1,R8               BACK TO BEGINNING\n         BE    CMDPROC0            YES, NO T= PARM\n         B     CMDPROCA\n         SPACE 1\nCMDPROCB LA    R1,PACK+3           TARGET FIELD\n         MVC   PACK(4),=C'0000'\n         CLI   4(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),4(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   3(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),3(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   2(R8),C' '          SENDING BYTE BLANK\n         BE    *+10                YES, DONT MOVE\n         MVC   0(1,R1),2(R8)       MOVE IT\n         MVC   DOUBLE(4),=C'0000'\n         MVZ   DOUBLE(4),PACK\n         CLC   DOUBLE(4),=C'0000'  IS IT NUMERIC\n         BE    CMDPROCC            YES\n         MVC   PACK(4),=C'0000'\n         SPACE 1\nCMDPROCC PACK  DOUBLE(8),PACK(4)\n         CVB   R15,DOUBLE          SECONDS TO BINARY\n         SR    R14,R14\n         ST    R15,SSVTTIME        SAVE BINARY SECONDS\n         D     R14,=F'60'          CALCULATE MINUTES AND SECONDS\n         CVD   R15,DOUBLE          MINUTES\n         UNPK  SSVTWAIT+2(2),DOUBLE+6(2)\n         OI    SSVTWAIT+3,X'F0'\n         CVD   R14,DOUBLE          SECONDS\n         UNPK  SSVTWAIT+4(2),DOUBLE+6(2)\n         OI    SSVTWAIT+5,X'F0'\n         MVC   0(4,R8),=CL4' '\n         BCTR  R8,0\n         CLI   0(R8),C','\n         BNE   *+8\n         MVI   0(R8),C' '\n         EJECT\nCMDPROC0 LA    R8,CMD##TAB         ## COMMAND TABLE\n         SPACE 1\nCMDPROC1 CLC   CMD##(1),0(R8)      COMMAND MATCH\n         BE    CMDPROC3            YES\n         LA    R8,4(0,R8)          NEXT TABLE ENTRY\n         CLC   0(4,R8),=F'0'       END OF TABLE\n         BNE   CMDPROC1            NO\n         SPACE 1\nCMDPROC2 SR    R0,R0\n         IC    R0,XAU\n         LA    R1,NOTSPMSG         COMMAND NOT SUPPORTED MSG\n         SVC   35\n         B     WAIT\n         SPACE 1\nCMDPROC3 SR    R0,R0\n         IC    R0,XAU\n         LA    R1,MONMSG           MONITOR COMMAND ACCEPTED MSG\n         SVC   35\n         LA    R1,CMD##+1          SUB-PARM ADDR\n         CLI   0(R1),C' '          1 BLANK ALLOWED\n         BNE   CMDPROC4            NOT BLANK\n         LA    R1,1(0,R1)          NEXT CHAR\n         CLI   0(R1),C' '          ANY SUB-PARM\n         BNE   CMDPROC4            YES\n         XC    XAL(4),XAL          CLEAR SUB-PARM ADDR\n         B     CMDPROC5\n         SPACE 1\nCMDPROC4 ST    R1,XAL              SUB-PARM ADDR\n         SPACE 1\nCMDPROC5 STM   R14,R12,SAVE+12     SAVE REGS\n         LA    R2,XSA              XSA ADDR\n         L     R15,0(0,R8)         LOAD COMMAND MODULE ADDR\n         LA    R15,0(0,R15)\n         LTR   R15,R15             ZERO ADDR\n         BZ    CMDPROC2            YES, NOT SUPPORTED\n         BALR  R14,R15             BRANCH TO COMMAND MODULE\n         EJECT\n         USING CMDRETN,R14\nCMDRETN  L     R1,CMDBASE\n         LA    R3,0(0,R14)         LOAD RETURN POINT\n         SR    R3,R1               CALC ENTRY POINT\n         DROP  R14\n         LM    R14,R12,SAVE+12     RELOAD REGS\n         B     WAIT\n         SPACE 3\nCMDDEL   LA    R15,1(0,R1)         COMMAND ID\n         LA    R1,CMD##TAB         COMMAND TABLE\n         SPACE 1\nCMDDEL1  CLC   0(1,R15),0(R1)      COMMAND MATCH\n         BE    CMDDEL2             YES\n         LA    R1,4(0,R1)          NEXT ENTRY\n         CLC   0(4,R1),=F'0'       END OF TABLE\n         BNE   CMDDEL1             NO, CHECK NEXT\n         B     CMDDEL3             YES, NOT FOUND, IGNORE\n         SPACE 1\nCMDDEL2  MVI   0(R1),X'00'         DISABLE COMMAND\n         MVC   DISBL(4),=X'00300100'\n         MVC   DISBL+4(44),=CL44'CMD SUBSYS -   ##X  COMMAND DISABLED'\n         MVC   DISBL+21(1),0(R15)\n         SR    R0,R0\n         IC    R0,XAU\n         LA    R1,DISBL\n         SVC   35\n         B     WAIT\n         SPACE 1\nCMDDEL3  SR    R0,R0\n         IC    R0,XAU\n         LA    R1,NOTDSMSG\n         SVC   35\n         B     WAIT\n         EJECT\n         LTORG\n         SPACE 5\nSAVE     DS    18F\n         DS    0D\nDOUBLE   DS    2F\nCSCTCB   DC    F'0'\nTERMECB  DS    F\nFIXECB   DS    F\nPACK     DS    F\nSIZE     DC    X'F1',AL3(AREAEND-AREA)\nCMDBASE  DC    A(CMDRETN-CMDSBINT)\n         SPACE 1\n         DS    0D\nCMDNAME  DC    CL8'IEEXX03D'\nCMD#NAME DC    CL4'IEEZ'\nCMD#ID   DC    C' '\n         DC    CL3'03D'\nTESTNAME DC    CL8'CMDTESTX'\n         SPACE 1\nTABLE    DC    20F'0'\nTABEND   DC    F'0'\n         SPACE 1\n         DS    0F\nCMD##TAB DC    C'A',AL3(0)\n         DC    C'B',AL3(0)\n         DC    C'C',AL3(0)\n         DC    C'J',AL3(0)\n         DC    C'P',AL3(0)\n         DC    C'S',AL3(0)\n         DC    F'0'\n         SPACE 1\nNOTSPMSG DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   COMMAND NOT SUPPORTED'\n         SPACE 1\nNOTDSMSG DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   COMMAND NOT DISABLED'\n         SPACE 1\nMONMSG   DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   MONITOR COMMAND ACCEPTED'\n         EJECT\n         DS    0D\nXSA      DS    0CL48\n         DS    5F\nXAL      DS    F\nXAT      DS    F\n         DS    F\nXAS      DS    2F\nXAU      DS    X\n         DS    XL7\n         EJECT\nAREA     DSECT\nSSVT     DS    H\nSSVTFNUM DS    H\nSSVTFCOD DS    XL256\nSSVTFRTN DS    0F\nSSVTFUNC DS    0F\nSSVTFUN1 DS    F\n         DS    8F\nSSVTMSGT DS    F\nSSVTLIST DS    2F\nSSVTECB  DS    F\n         DS    0D\nSSVTWAIT DS    CL8\nSSVTTIME DS    F\nSSVTASCB DS    0F\nSSVTSTAT DS    X\n         DS    XL3\nSSVTUMID DS    F\n         SPACE 3\nCMDTABLE DS    20F\nCMDEND   DS    F\n         SPACE 3\n         DS    0D\nUSERWORK DS    CL228\n         SPACE 3\nCMDXSA   DS    0CL48\n         DS    5F\nCMDXAL   DS    F\n         DS    4F\nCMDXAU   DS    X\n         DS    XL7\n         SPACE 3\nCMD##    DS    CL78\nHDRMSG   DS    CL52\nDISBL    DS    CL48\n         DS    0F\nCSCHDR   DS    CL52\nCSCCMD   DS    CL78\nCSCSTABL DS    CL48\n         SPACE 3\nAREAEND  DS    0D\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CMDSBMON\n         TITLE 'XA1SBMON -   STANDALONE FULL SCREEN MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDSBMON -       STANDALONE FULL SCREEN MONITOR           ***\n***                                                                 ***\n***       VERSION -        3.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      XA 2.1.3                                 ***\n***                                                                 ***\n***       UPDATED -        06/24/86  BFG-XA SUPPORT FOR XA       FNB001\n***                                                                 ***\n***  THIS MODULE SEARCHES THE CODE IT IS LOADING (#Q, #N, ETC.) TO  ***\n***     SEE IF SUBPOOL 241 IS BEING REQUESTED FOR THE GETMAIN.  THIS***\n***     MODULE DOES THIS BY SEARCHING FOR X'F100' IN THE CODE.      ***\n***     IF THE EXECUTION IS TAKING PLACE VIA THE SYSTEM CONSOLE,    ***\n***     THEN SUBPOOL 241 IS ALLOWED.  IF THE EXECUTION IS TAKING    ***\n***     PLACE WITHIN TSO, THEN THE X'F100' IS CHANGED TO X'0000'    ***\n***     (FOR SUBPOOL 0) PRIOR TO THE ACTUAL EXECUTION OF THE CODE.  ***\n***     IF THE PROPER CODING CONVENTIONS ARE NOT FOLLOWED IN THE    ***\n***     SUB-MODULES (#Q, #N, ETC.), THIS CHECK MAY NOT BE SUCCESS-  ***\n***     FUL, AND AN ABEND B0A WILL TAKE PLACE.\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDSBMON CSECT\n         SAVE  (14,12)\n         LR    R3,R15\n         USING CMDSBMON,R3\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         USING SAVE,R13\n         L     R4,0(0,R1)\n         L     R15,16              CVT ADDR\n         L     R15,0(0,R15)        TCB WORDS\n         L     R14,12(0,R15)       CURRENT ASCB\n         L     R14,4(0,R15)        CURRENT TCB\n         L     R14,12(0,R14)       TIOT\n         CLC   0(8,R14),=CL8'CMDSBPAG'    SPECIAL NAME TO FORCE\n         BNE   *+8                        PAGE EJECT BETWEEN LOG ENTRY\n         MVI   LOGLINE-1,X'8B'\n         MVC   UNIT(3),2(R4)         UNIT ADDR\n         MVC   UNITVOFF(3),2(R4)     UNIT ADDR\n         MVC   UNITVON(3),2(R4)      UNIT ADDR\n         GETMAIN VU,LA=CMDOUTST,A=CMDOUTPT\n         L     R15,CMDOUTPT+4        GETMAIN AREA LENGTH\n         C     R15,=F'180000'        MINIMUM\n         BL    ABEND                 NO\n         S     R15,=F'100000'        MINUS GUARANTEE\n         ST    R15,CMDOUTSZ+4        SET MAX SIZE\n         L     R0,CMDOUTPT+4\n         L     R1,CMDOUTPT\n         FREEMAIN R,LV=(0),A=(1)\n         GETMAIN VU,LA=CMDOUTSZ,A=CMDOUTPT\n         SR    R14,R14\n         L     R15,CMDOUTPT+4        GETMAIN AREA LENGTH\n         D     R14,=F'80'\n         SR    R14,R14\n         M     R14,=F'80'            ROUND TO MULTIPLE OF 80\n         A     R15,CMDOUTPT          GETMAIN AREA END\n         S     R15,=F'240'           PRACTICAL END\n         ST    R15,CMDOUTEN\n         MVC   0(161,R15),CMDOUTOV   SET TRUNCATED MESSAGE\n         MODESET KEY=ZERO,MODE=SUP\n         MVC   SCRSAVE(4),PACK MOVE VALUE TO WORK AREA           BFG-XA\n         TR    SCRSAVE(3),TOHEX                                  BFG-XA\n         PACK  SCRSAVE+4(3),SCRSAVE(4) MAKE HEX                  BFG-XA\n         LH    R4,SCRSAVE+4   GET HEX VALUE                      BFG-XA\n         L     R6,SAVE+4      GET SAVE AREA VALUE                BFG-XA\n         IOSLOOK DEV=(R4),UCB=(R5) GET UCB ADDRESS               BFG-XA\n         ST    R6,SAVE+4                                         BFG-XA\n         LTR   R15,R15        DID UCB EXIST                      BFG-XA\n         BNZ   TERMINAT                                          BFG-XA\n         CLI   18(R5),X'10'          DISPLAY TYPE UCB\n         BNE   TERMINAT              NO, TERMINATE\n         TM    3(R5),X'02'           ACTIVE CONSOLE\n         BZ    VARYCONT              NO\n         MVC   UNITVCON(3),UNIT      UNIT ADDR\n         SR    R0,R0\n         LA    R1,VARYOFF\n         SVC   34\n         SPACE 1\nVARYWAIT STIMER WAIT,DINTVL=VARYTIME\n         TM    3(R5),X'80'\n         BO    VARYWAIT\n         SPACE 1\nVARYCONT SR    R0,R0\n         LA    R1,VARYON\n         SVC   34\n         SPACE 1\nVARYCWT  STIMER WAIT,DINTVL=VARYTIME\n         TM    3(R5),X'80'\n         BZ    VARYCWT\n         BAL   R4,DYNALLOC\n         XC    GETMADR(4),GETMADR\n         OPEN  (TPDCB,(OUTPUT),CMDLOG,(OUTPUT))\n         B     CMDINIT\n         EJECT\nDYNALLOC ALLOC UNIT=UNITADR,DDNTO=DDNAME,ERROR=ABEND\n         MVC   TPDCB+40(8),DDNAME\n         BR    R4\n         EJECT\nCMDINIT  MODESET KEY=ZERO,MODE=SUP\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,12(0,R1)         CURRENT ASCB\n         L     R1,144(0,R1)        OUCB\n         OI    17(R1),X'80'        SET NON-SWAPPABLE\n         L     R0,SIZEGETM         GETMAIN SIZE\n         L     R1,GETMADR          GETMAIN ADDR\n         LTR   R1,R1               GETMAIN ALREADY DONE\n         BNZ   CMDINIT1            YES\n         GETMAIN R,LV=(0)          GET COMMAND WORK AREA\n         LA    R1,0(0,R1)\n         ST    R1,GETMADR          SAVE GETMAIN ADDR\n         SPACE 1\nCMDINIT1 LR    R4,R1\n         L     R5,SIZEGETM\n         LA    R5,0(0,R5)\n         SR    R6,R6\n         SR    R7,R7\n         MVCL  R4,R6               CLEAR GETMAIN AREA\n         MVI   RETCODE,X'00'\n         L     R4,CMDOUTPT\n         LA    R5,1760\n         L     R6,=A(OPENTEXT)\n         LA    R7,1760\n         MVCL  R4,R6               MOVE OPENING TEXT TO OUTPUT\n         L     R4,CMDOUTPT\n         MVI   REFRSW,X'00'\n         MVC   REFRESH(8),=CL8'00000000'\n         EJECT\nCMDGET   CLC   REFRESH(8),=CL8'00000000'  AUTO REFRESH\n         BE    CMDGET1             NO\n         L     R4,CMDOUTPT         OUTPUT ADDR\n         BAL   R7,SCREEN           WRITE SCREEN AND GET NEXT COMMAND\n         CLI   RETCODE,C'Z'        ATTENTION\n         BE    CMDINIT             YES\n         STIMER WAIT,DINTVL=REFRESH\n         L     R1,REFRCNT\n         BCT   R1,*+8              BRANCH UNTIL END OF AUTO REFRESH\n         B     CMDINIT\n         ST    R1,REFRCNT\n         MVC   SCRREPLY+6(57),SCRLSREP\n         LA    R14,SCRREPLY+6\n         B     CMDGET2\n         SPACE 1\nCMDGET1  L     R4,CMDOUTPT         OUTPUT ADDR\n         BAL   R7,SCREEN           WRITE SCREEN AND GET NEXT COMMAND\n         CLI   RETCODE,C'Z'        ATTENTION\n         BE    CMDINIT             YES\n         SPACE 1\nCMDGET2  L     R4,CMDOUTPT\n         XC    CMDOUTBG(4),CMDOUTBG\n         XC    CMDOUTCT(4),CMDOUTCT\n         CLI   0(R14),C'('         OUTPUT INCREMENT\n         BNE   CMDGET2A            NO\n         CLI   4(R14),C')'         OUTPUT INCREMENT\n         BNE   CMDGET2A            NO\n         MVC   DOUBLE(3),=C'000'\n         MVZ   DOUBLE(3),1(R14)\n         CLC   DOUBLE(3),=C'000'   NUMERIC\n         BNE   CMDGET2A            NO, ERROR\n         PACK  DOUBLE(8),1(3,R14)\n         LR    R1,R14              SAVE REG14\n         SR    R14,R14\n         CVB   R15,DOUBLE\n         M     R14,=F'1000'\n         ST    R15,CMDOUTBG\n         LR    R14,R1              POINT TO COMMAND\n         MVC   0(58,R14),5(R14)    SHIFT OVER COMMAND\n         SPACE 1\nCMDGET2A LA    R10,COMTAB          # COMMAND TABLE\n         LA    R11,MODLIST         # COMMAND MODULE LIST\n         MVI   TCMDTYP,C' '\n         CLI   0(R14),C'#'         # COMMAND\n         BNE   PLOOPA              NO, CHECK CONTROL COMMANDS\n         LA    R14,1(0,R14)        ADJUST INPUT PARM\n         CLI   0(R14),C'#'         ## COMMAND\n         BNE   PLOOPC              NO\n         LA    R14,1(0,R14)        ADJUST INPUT PARM\n         BCTR  R1,0                ADJUST LENGTH\n         LA    R10,COMTAB2         ## COMMAND TABLE\n         LA    R11,MODLIST2        ## COMMAND MODULE LIST\n         MVI   TCMDTYP,C'#'        INDICATE ##\n         B     PLOOPC\n         EJECT\nPLOOPA   LA    R10,COMTAB3         GRAPHIC MONITOR COMMAND TABLE\n         LA    R11,MODLIST3        GRAPHIC MONITOR MODULE LIST\n         MVI   TCMDTYP,C'-'        INDICATE GRAPHIC MONITOR\n         TM    0(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPC              NO, GRAPHIC MONITOR COMMAND\n         TM    1(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPB              NO, ERROR\n         MVC   REFRESH+4(2),0(R14)\n         LA    R1,20               DEFAULT REFRESH COUNT\n         CLI   2(R14),C'/'\n         BNE   PLOOPA1\n         TM    3(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPB              NO, ERROR\n         TM    4(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPB              NO, ERROR\n         PACK  DOUBLE(8),3(2,R14)\n         CVB   R1,DOUBLE\n         SPACE 1\nPLOOPA1  MVC   0(80,R4),=CL80'CONTROL COMMAND ACCEPTED'\n         MVI   80(R4),X'FF'\n         ST    R1,REFRCNT\n         B     CMDGET1\n         SPACE 1\nPLOOPB   MVC   0(80,R4),=CL80'ERROR IN CONTROL COMMAND'\n         MVI   80(R4),X'FF'\n         B     CMDGET\n         SPACE 1\nPLOOPC   MVC   COMMAND(1),0(R14)   SAVE COMMAND\n         SR    R15,R15\n         LA    R1,1(0,R14)         1ST BYTE OF SUB-PARM\n         CLI   0(R1),C' '          1ST BYTE BLANK\n         BNE   *+16                NO\n         LA    R1,1(0,R1)          NEXT BYTE\n         CLI   0(R1),C' '          2ND BYTE BLANK\n         BE    PROCESS             YES, NO SUB-PARM\n         LA    R15,PARM\n         MVC   PARM(60),0(R1)\n         EJECT\nPROCESS  ST    R15,EXITLIST+20     SAVE TEXT ADDR\n         MVC   WAITTIME(8),=8C'0'\n         XC    CSCSYSID(4),CSCSYSID\n         XC    HEXTIME(4),HEXTIME\n         LA    R1,PARM\n         LA    R8,PARM+74\n         SPACE 1\nPROCESS1 CLC   0(2,R8),=C'T='      TIME PARM\n         BE    PROCESS2            YES\n         CLC   0(2,R8),=C'S='      SYSID PARM\n         BE    PROCESS4            YES\n         BCTR  R8,0                PREVIOUS CHARACTER\n         CR    R1,R8               BACK TO BEGINNING\n         BNE   PROCESS1            NO, CHECK NEXT\n         B     PROCESS5            YES, NO T= FOUND\n         SPACE 1\nPROCESS2 LA    R1,PACK+3           TARGET FIELD\n         MVC   PACK(4),=C'0000'\n         CLI   4(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),4(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   3(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),3(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   2(R8),C' '          SENDING BYTE BLANK\n         BE    *+10                YES, DONT MOVE\n         MVC   0(1,R1),2(R8)       MOVE IT\n         MVC   DOUBLE(4),=C'0000'\n         MVZ   DOUBLE(4),PACK\n         CLC   DOUBLE(4),=C'0000'  IS IT NUMERIC\n         BE    PROCESS3            YES\n         MVC   PACK(4),=C'0000'\n         SPACE 1\nPROCESS3 PACK  DOUBLE(8),PACK(4)\n         CVB   R15,DOUBLE          SECONDS TO BINARY\n         SR    R14,R14\n         ST    R15,HEXTIME         SAVE BINARY SECONDS\n         D     R14,=F'60'          CALCULATE MINUTES AND SECONDS\n         CVD   R15,DOUBLE          MINUTES\n         UNPK  WAITTIME+2(2),DOUBLE+6(2)\n         OI    WAITTIME+3,X'F0'\n         CVD   R14,DOUBLE          SECONDS\n         UNPK  WAITTIME+4(2),DOUBLE+6(2)\n         OI    WAITTIME+5,X'F0'\n         MVC   0(4,R8),=CL4' '\n         BCTR  R8,0\n         CLI   0(R8),C','\n         BNE   *+8\n         MVI   0(R8),C' '\n         B     PROCESS5\n         SPACE 1\nPROCESS4 MVC   CSCSYSID(4),2(R8)\n         BCTR  R8,0\n         MVC   0(8,R8),=CL8' '\n         MVC   CSCCMD(1),COMMAND\n         MVC   CSCCMD+1(79),PARM\n         EJECT\nPROCESS5 LA    R1,WAITTIME\n         ST    R1,EXITLIST+24      PASS WAITTIME TO COMMANDS\n         MVC   TCOMMAND(1),COMMAND\n         TR    COMMAND,0(R10)      TRANSLATE COMMAND TO INDEX\n         SR    R9,R9\n         IC    R9,COMMAND          INSERT INDEX\n         SLL   R9,3                OFFSET INTO MODULE LIST\n         L     R15,16              CVT ADDR\n         L     R15,0(0,R15)        TCB WORDS\n         L     R14,12(0,R15)       CURRENT ASCB\n         MVC   ASID(2),36(R14)     SAVE ASID\n         L     R14,4(0,R15)        CURRENT TCB\n         L     R14,12(0,R14)       TIOT\n         MVC   USERID(8),0(R14)    USERID (JOBNAME)\n         UNPK  TASID(5),ASID(3)\n         NC    TASID(4),=8X'0F'\n         TR    TASID(4),=C'0123456789ABCDEF'\n         MVI   TASID+4,C' '\n         L     R15,16              CVT ADDR\n         L     R15,196(0,R15)      SMCA\n         MVC   SYSTEM(4),16(R15)   SYSTEM ID\n         TIME  DEC\n         ST    R1,DOUBLE\n         UNPK  YEAR(3),DOUBLE+1(2)\n         MVI   YEAR+2,C'.'\n         UNPK  DAY(3),DOUBLE+2(2)\n         OI    DAY+2,X'F0'\n         ST    R0,DOUBLE\n         UNPK  HOUR(3),DOUBLE(2)\n         MVI   HOUR+2,C'.'\n         UNPK  MINUTE(3),DOUBLE+1(2)\n         MVI   MINUTE+2,C' '\n         MVI   68(R4),C' '\n         MVC   69(11,R4),68(R4)\n         MVC   0(68,R4),HEADER\n         LA    R4,80(0,R4)\n         CLI   CSCSYSID,X'00'      CROSS-SYSTEM REQUEST\n         BNE   CSCPROC             YES\n         LTR   R9,R9               COMMAND IN LIST\n         BNZ   LOAD                YES, GO PROCESS\n         MVC   0(80,R4),=CL80'COMMAND NOT FOUND'\n         LA    R4,80(0,R4)\n         MVI   0(R4),X'FF'\n         B     CMDGET\n         EJECT\nCSCPROC  LA    R1,10               RESET TIMER COUNT\n         MVI   0(R4),C' '\n         MVC   1(79,R4),0(R4)\n         SPACE 1\nCSCPROC0 ST    R1,RESETCNT         RESET TIMER COUNT\n         BAL   R10,CSCREAD         READ CSC DATA\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,4(0,R1)          CURRENT TCB\n         L     R1,12(0,R1)         TIOT\n         CLC   0(8,R11),=8X'00'    CSC BUSY\n         BE    CSCPROC4            NO\n         CLI   4(R11),X'FF'        TSO ID CROSS-SYSTEM COMMAND\n         BNE   CSCPROC1            NO\n         CLC   5(3,R11),4(R1)      TSO ID MATCH\n         BE    CSCPROC2            YES\n         SPACE 1\nCSCPROC1 STIMER WAIT,DINTVL=CSCWAIT\n         L     R1,RESETCNT         RESET COUNT\n         BCT   R1,CSCPROC0         TRY AGAIN\n         MVC   TIMESID(4),4(R11)\n         MVC   0(48,R4),TIMEMSG    TIMEOUT MSG\n         LA    R4,80(0,R4)\n         MVI   0(R4),X'FF'\n         BAL   R10,CSCCLEAR        FORCE CLEAR\n         B     CMDGET\n         SPACE 3\nCSCPROC2 LH    R9,10(0,R11)        WTO COUNT\n         LA    R11,148(0,R11)      1ST WTO ADDR\n         SPACE 1\nCSCPROC3 MVI   0(R4),C' '\n         MVC   1(79,R4),0(R4)\n         LA    R1,4(0,R11)         MSG ADDR\n         LH    R14,0(0,R11)        MSG LENGTH\n         SH    R14,=H'5'\n         EX    R14,CSCMVE\n         LH    R1,0(0,R11)         WTO LENGTH\n         LA    R11,0(R1,R11)       NEXT MSG\n         LA    R4,80(0,R4)\n         BCT   R9,CSCPROC3\n         BAL   R10,CSCCLEAR        RESET DATASET TO ALLOW REUSE\n         MVI   0(R4),X'FF'\n         B     CMDGET\n         SPACE 1\nCSCMVE   MVC   0(0,R4),0(R1)\n         EJECT\nCSCPROC4 MVI   0(R11),X'FF'        TSO SENDER\n         MVC   1(3,R11),4(R1)      TSO ID\n         XC    8(2,R11),8(R11)\n         MVC   12(4,R11),=F'148'   COMMAND RECORD LENGTH\n         MVC   16(78,R11),CSCCMD   MOVE COMMAND TO RECORD\n         XC    96(52,R11),96(R11)\n         MVC   4(4,R11),CSCSYSID\n         BAL   R10,CSCWRITE        REWRITE RECORD\n         MVC   RECVMSG+20(1),16(R11)\n         MVC   0(44,R4),RECVMSG\n         LA    R4,80(0,R4)\n         MVI   0(R4),X'FF'\n         L     R4,CMDOUTPT         OUTPUT ADDR\n         STM   R2,R12,SCRSAVE\n         BAL   R7,SCREEN\n         LM    R2,R12,SCRSAVE\n         CLI   RETCODE,C'Z'        ATTENTION\n         BE    CMDINIT             YES\n         B     CSCPROC1\n         EJECT\nCSCREAD  MVC   CSCDATA+62(2),=H'19069' FULL BLOCKSIZE\n         OPEN  (CSCDATA)\n         L     R8,=A(RECORD)\n         GET   CSCDATA,(R8)\n         L     R11,=A(RECORD)\n         CLC   0(12,R11),=XL12'00' ZERO REQUEST\n         BE    CSCREAD1            NO\n         CLC   0(96,R11),PREVREC   SAME REQUEST\n         BE    CSCREAD2            NO\n         SPACE 1\nCSCREAD1 MVC   PREVREC(96),0(R11)  SAVE NEW REQUEST\n         MVC   RESETCNT(4),=F'10'  SET NEW COUNT\n         SPACE 1\nCSCREAD2 CLOSE (CSCDATA)\n         BR    R10\n         EJECT\nCSCCLEAR L     R1,=A(RECORD)\n         XC    0(16,R1),0(R1)\n         SPACE 1\nCSCWRITE L     R1,=A(RECORD)\n         L     R1,12(0,R1)         RECORD LENGTH\n         LTR   R1,R1               ZERO LENGTH\n         BNZ   CSCWRIT1            NO\n         LA    R1,16               MINIMUM LENGTH\n         SPACE 1\nCSCWRIT1 STH   R1,CSCDATA+62       SAVE LENGTH FOR WRITE\n         LR    R2,R1\n         OPEN  (CSCDATA,(OUTPUT))\n         L     R8,=A(RECORD)\n         PUT   CSCDATA,(R8)\n         CLOSE (CSCDATA)\n         BR    R10\n         EJECT\nLOAD     LA    R9,0(R11,R9)        MODULE NAME ADDR\n         MVC   LOADNAME(8),0(R9)\n         LOAD  EPLOC=LOADNAME      LOAD COMMAND MODULE\n         ST    R0,ENTRY            SAVE ENTRY ADDR\n         LR    R5,R0               MODULE ADDR\n         LA    R6,0(0,R1)          MODULE DOUBLEWORDS\n         SLL   R6,3                MODULE LENGTH\n         ST    R6,LENGTH           SAVE MODULE LENGTH\n         SH    R6,=H'6'            ADJUST SCAN LENGTH\n         SPACE  1\nLOAD1    CLC   0(6,R5),=X'430020280A23'   WTO INSTRUCTIONS\n         BE    LOAD3               YES\n         SPACE 1\nLOAD2    LA    R5,2(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCT   R6,LOAD1            PROCESS NEXT\n         B     LOAD4\n         SPACE 1\nLOAD3    MVC   0(6,R5),=X'58F0200005EF'\n         B     LOAD2\n         SPACE 1\nLOAD4    L     R5,ENTRY            MODULE ADDR\n         L     R6,LENGTH           MODULE LENGTH\n         SH    R6,=H'4'            ADJUST SCAN LENGTH\n         SPACE  1\nLOAD5    CLC   0(2,R5),=X'F100'    SUBPOOL 241\n         BE    LOAD7               YES\n         SPACE 1\nLOAD6    LA    R5,4(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCTR  R6,0\n         BCTR  R6,0\n         BCT   R6,LOAD5            PROCESS NEXT\n         B     EXECUTE             END OF MODULE\n         SPACE 1\nLOAD7    MVC   0(2,R5),=H'0'       SET SUBPOOL ZERO\n         B     EXECUTE             END OF MODULE\n         EJECT\nSCREEN   LA    R5,22               MAX OUTPUT LINES\n         LA    R6,SCRLIN02         OUTPUT BEGIN LINE\n         LA    R8,SCRLIN02\n         LA    R9,1760\n         SR    R10,R10\n         SR    R11,R11\n         MVCL  R8,R10              CLEAR SCREEN AREA\n         SPACE 1\nSCREEN1  MVC   0(80,R6),0(R4)      SET OUTPUT LINE\n         MVC   LOGLINE+1(80),0(R4)\n         PUT   CMDLOG,LOGLINE\n         L     R1,=A(SCRPLUS)\n         MVI   0(R1),C' '\n         LA    R4,80(0,R4)         NEXT INPUT LINE\n         LA    R6,80(0,R6)         NEXT OUTPUT LINE\n         CLI   0(R4),X'FF'         END OF INPUT\n         BE    SCREEN2             YES, GO WRITE\n         BCT   R5,SCREEN1\n         L     R1,=A(SCRPLUS)\n         MVI   0(R1),C'+'\n         SPACE 1\nSCREEN2  PUT   CMDLOG,LOGLINE-1    SPACE BETWEEN SCREENS\n         LA    R14,SCRLIN02\n         TR    0(80,R14),TABLE\n         TR    80(80,R14),TABLE\n         TR    160(80,R14),TABLE\n         TR    240(80,R14),TABLE\n         TR    320(80,R14),TABLE\n         TR    400(80,R14),TABLE\n         TR    480(80,R14),TABLE\n         TR    560(80,R14),TABLE\n         TR    640(80,R14),TABLE\n         TR    720(80,R14),TABLE\n         TR    800(80,R14),TABLE\n         TR    880(80,R14),TABLE\n         TR    960(80,R14),TABLE\n         TR    1040(80,R14),TABLE\n         TR    1120(80,R14),TABLE\n         TR    1200(80,R14),TABLE\n         TR    1280(80,R14),TABLE\n         TR    1360(80,R14),TABLE\n         TR    1440(80,R14),TABLE\n         TR    1520(80,R14),TABLE\n         TR    1600(80,R14),TABLE\n         TR    1680(80,R14),TABLE\n         SPACE 3\nSCREEN2A CLI   SCRREPLY,X'6C'      ATTENTION\n         BE    ATENTION            YES\n         CLI   SCRREPLY,X'6D'      REPEAT\n         BE    REPEAT              YES\n         CLI   SCRREPLY,X'6E'      ATTENTION\n         BE    ATENTION            YES\n         LA    R2,SCRBEGIN\n         RESETPL TPDECB,ATTENT\n         SPACE 3\n         XC    TPDECB(4),TPDECB\n         WRITE TPDECB,TS,TPDCB,(2),SCRLEN,,1,MF=E\n         WAIT  ECB=TPDECB\n         SPACE 3\n         XC    SCRREPLY(63),SCRREPLY\n         XC    TPDECB(4),TPDECB\n         LA    R2,SCRREPLY\n         READ  TPDECB,TI,TPDCB,(2),63,,1,MF=E\n         CLI   REFRSW,X'FF'        REFRESH IN PROGRESS\n         BCR   8,R7                YES\n         CLC   REFRESH(8),=CL8'00000000' REFRESH REQUESTED\n         BE    *+8                 NO\n         MVI   REFRSW,X'FF'\n         WAIT  ECB=TPDECB\n         CLI   SCRREPLY,X'6C'      ATTENTION\n         BE    ATENTION            YES\n         CLI   SCRREPLY,X'6D'      REPEAT\n         BE    REPEAT              YES\n         CLI   SCRREPLY,X'6E'      ATTENTION\n         BE    REPEAT              YES\n         OC    SCRREPLY(63),=CL63' '  CAPITALIZE\n         CLI   SCRREPLY,X'7D'      ENTER KEY\n         BNE   PFKCHK              NO, CHECK PFK ENTRY\n         SPACE 3\nSCREEN3  LA    R14,SCRREPLY+6\n         MVC   SCRLSREP(57),SCRREPLY+6\n         CLI   SCRREPLY+6,C'Z'       TERMINATE\n         BE    EXIT                YES\n         CLC   SCRREPLY+6(3),=C'END' TERMINATE\n         BE    EXIT                YES\n         CLI   SCRREPLY+6,C'-'     SCROLL BACK\n         BE    SCROLL              YES\n         CLI   SCRREPLY+6,C'+'     SCROLL FORWARD\n         BE    SCROLL              YES\n         CLI   SCRREPLY+6,C'='     SCROLL FIND EQ\n         BE    SCROLL2             YES\n         CLI   SCRREPLY+6,C' '     NEXT SCREEN REQUEST\n         BCR   7,R7                NO\nSCREEN3B LA    R8,SCRLIN02\n         LA    R9,1760\n         SR    R10,R10\n         SR    R11,R11\n         MVCL  R8,R10              CLEAR SCREEN AREA\n         CLI   0(R4),X'FF'         ANY MORE OUTPUT\n         BNE   SCREEN              YES\n         MVC   SCRLIN02(80),=CL80'****   END  OF  OUTPUT   ****'\n         B     SCREEN2\n         EJECT\nSCROLL   MVC   DOUBLE(3),=C'000'\n         MVZ   DOUBLE(3),SCRREPLY+7\n         CLC   DOUBLE(3),=C'000'   NUMERIC\n         BNE   SCROLL1\n         PACK  DOUBLE(8),SCRREPLY+7(3)\n         CVB   R14,DOUBLE\n         B     SCROLL2\n         SPACE 1\nSCROLL1  L     R14,=F'99999999'\n         SPACE 1\nSCROLL2  LA    R11,SCROLLEQ\n         CLI   SCRREPLY+6,C'='     SCROLL FIND EQ\n         BE    SCROLLF             YES\n         CLI   SCRREPLY+6,C'-'     SCROLL UP\n         BE    SCROLLU             YES\n         CLI   SCRREPLY+6,C'+'     SCROLL DOWN\n         BE    SCROLLD             YES\n         BR    R7\n         SPACE 1\nSCROLLU  LA    R14,22(0,R14)       ADJUST TO TOP OF PAGE\n         SPACE 1\nSCROLLU1 C     R4,CMDOUTPT         TOP\n         BE    SCREEN3B\n         S     R4,=F'80'\n         BCT   R14,SCROLLU1\n         B     SCREEN3B\n         SPACE 1\nSCROLLD  CLI   0(R4),X'FF'         BOTTOM\n         BE    SCROLLD1\n         A     R4,=F'80'\n         BCT   R14,SCROLLD\n         SPACE 1\nSCROLLD1 LA    R14,22\n         SPACE 1\nSCROLLD2 C     R4,CMDOUTPT         TOP\n         BE    SCREEN3B\n         S     R4,=F'80'\n         BCT   R14,SCROLLD2\n         B     SCREEN3B\n         EJECT\nSCROLLF  LA    R14,21\n         SPACE 1\nSCROLLF1 C     R4,CMDOUTPT         TOP\n         BE    SCROLLF2\n         S     R4,=F'80'\n         BCT   R14,SCROLLF1\n         SPACE 1\nSCROLLF2 SR    R14,R14\n         LA    R10,SCRREPLY+7\n         LA    R9,55\n         SPACE 1\nSCROLLF3 BCT   R9,*+6\n         BR    R7\n         LA    R10,1(0,R10)        NEXT SEARCH BYTE\n         LA    R14,1(0,R14)\n         CLC   0(1,R10),SCRREPLY+7 DELIMITER FOUND\n         BNE   SCROLLF3\n         BCTR  R14,0\n         BCTR  R14,0\n         SPACE 1\nSCROLLF4 CLI   0(R4),X'FF'         BOTTOM\n         BNE   SCROLLF5\n         S     R4,=F'80'\n         B     SCREEN3B\n         SPACE 1\nSCROLLF5 LA    R8,0(0,R4)          BEGIN OF OUTPUT LINE\n         LA    R9,80\n         SPACE 1\nSCROLLF6 EX    R14,SCROLLCL        COMPARE\n         EX    0,0(0,R11)          BR ON CONDITION\n         LA    R8,1(0,R8)\n         BCT   R9,SCROLLF6         CHECK NEXT\n         LA    R4,80(0,R4)\n         B     SCROLLF4\n         SPACE 1\nSCROLLCL CLC   0(0,R8),SCRREPLY+8\nSCROLLEQ BC    8,SCREEN3B\n         EJECT\nPFKCHK   LA    R2,PFKTAB\n         SPACE 1\nPFKCHK1  CLC   SCRREPLY(1),0(R2)   PFK MATCH\n         BE    PFKCHK2\n         CLI   0(R2),X'00'         END OF PFK TABLE\n         BE    ATENTION            YES, I DONT KNOW\n         LA    R2,4(0,R2)          NEXT ENTRY\n         B     PFKCHK1\n         SPACE 1\nPFKCHK2  LA    R14,SCRREPLY+6\n         CLI   0(R2),X'F1'         PFK 1\n         BE    PFKCHK3             YES, CHANGE OR DISPLAY PFK\n         L     R2,0(0,R2)          PFK DEFINITION\n         MVC   SCRREPLY+6(57),9(R2)\n         MVC   SCRLSREP(57),9(R2)\n         BR    R7\n         SPACE 1\nPFKCHK3  CLI   SCRREPLY+6,C' '     DISPLAY PFK\n         BNE   PFKCHK5             NO, CHANGE REQUEST\n         SPACE 1\nPFKCHK4  LR    R8,R7\n         L     R4,CMDOUTPT\n         LA    R5,1760\n         L     R6,=A(PFKTEXT)\n         LA    R7,1760\n         MVCL  R4,R6               PFK LIST\n         LR    R7,R8\n         L     R4,CMDOUTPT\n         B     SCREEN              DISPLAY PFK ASSIGNMENTS\n         SPACE 1\nPFKCHK5  MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),SCRREPLY+6\n         CLC   DOUBLE(2),=C'00'    NUMERIC PFK\n         BNE   PFKCHK4             NO, DISPLAY\n         CLI   SCRREPLY+8,C'='     VALID FORMAT\n         BNE   PFKCHK4             NO, DISPLAY\n         PACK  DOUBLE(8),SCRREPLY+6(2)\n         CVB   R4,DOUBLE\n         CH    R4,=H'2'            MIN PFK NUMBER\n         BL    PFKCHK4             NO, DISPLAY\n         CH    R4,=H'24'           MAX PFK NUMBER               FNB001\n         BH    PFKCHK4             NO, DISPLAY\n         SLL   R4,2                MULT BY 4\n         LA    R4,PFKTAB-4(R4)     TABLE SLOT ADDR\n         L     R4,0(0,R4)          PFK DEFINITION ADDR\n         MVC   9(50,R4),SCRREPLY+9 SAVE NEW PFK ASSIGNMENT\n         B     PFKCHK4\n         EJECT\nATENTION MVI   RETCODE,C'Z'        INDICATE ATTENTION\n         MVI   SCRREPLY,X'00'\n         BR    R7\n         SPACE 3\nREPEAT   LA    R14,SCRREPLY+6\n         MVC   SCRREPLY+6(57),SCRLSREP   LAST COMMAND\n         MVI   SCRREPLY,X'00'\n         B     SCREEN3\n         SPACE 3\nEXECUTE  LA    R2,EXITLIST         PARM LIST\n         L     R15,CMDOUTPT\n         LA    R15,80(0,R15)\n         ST    R15,EXITLIST+16\n         L     R15,ENTRY           COMMAND ENTRY\n         BALR  R14,R15             BRANCH\n         SPACE 3\n         BALR  R15,0\n         USING *,R15\n         L     R3,EXECSBMN         LOAD ORIGINAL BASE\n         L     R13,EXECSAVE\n         DELETE EPLOC=LOADNAME     DELETE MODULE\n         B     CMDGET\n         SPACE 1\nEXECSBMN DC    A(CMDSBMON)\nEXECSAVE DC    A(SAVE)\n         DROP  R15\n         SPACE 3\nEXIT     CLOSE (TPDCB,,CMDLOG)\n         FREE  UNALC,DDN=DDADR,ERROR=ABEND\n         L     R0,SIZEGETM\n         L     R1,GETMADR\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 1\nTERMINAT SR    R0,R0\n         LA    R1,VARYCONS\n         CLI   UNITVCON,C' '       VARY CONSOLE TO BE DONE\n         BE    *+6                 NO\n         SVC   34\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         SPACE 3\nABEND    ABEND 77,DUMP\n         EJECT\n         USING TPUT,R15\nTPUT     ST    R14,8(0,R2)         SAVE RETURN ADDR\n         ST    R13,CMDOUTSV        LOAD PREV REG13\n         L     R13,CMDOUT13        LOAD R13 BASE REG\n         ST    R4,12(0,R2)         SAVE WORK REG\n         L     R4,16(0,R2)         LOAD OUTPUT ADDR\n         LTR   R0,R0               NORMAL ENTRY\n         BNZ   TPUT0               NO, QUEUE COMMAND\n         C     R4,CMDOUTEN         END OF OUTPUT\n         BE    TPUT4               YES\n         MVI   0(R4),C' '\n         MVC   1(79,R4),0(R4)\n         LH    R14,0(0,R1)         ORIG MSG LENGTH\n         SH    R14,=H'5'           NEW MSG LENGTH\n         EX    R14,TPUTMVE         MSG TEXT ADDR\n         LA    R4,80(0,R4)         ADD IN MSG LENGTH\n         MVI   0(R4),X'FF'\n         ST    R4,16(0,R2)         SAVE OUTPUT ADDR\n         L     R14,8(0,R2)         LOAD RETURN ADDR\n         L     R4,12(0,R2)         LOAD WORK REG\n         L     R13,CMDOUTSV        LOAD PREV REG13\n         BR    R14                 RETURN\n         SPACE 1\nTPUTMVE  MVC   0(0,R4),4(R1)\n         SPACE 1\nTPUT0    LR    R14,R0\n         SPACE 1\nTPUT1    L     R0,CMDOUTCT         LOAD CURRENT RECORD COUNT\n         A     R0,=F'1'            ADD 1\n         ST    R0,CMDOUTCT         SAVE NEW RECORD COUNT\n         C     R0,CMDOUTBG         EQUAL TO 1ST REC TO PRINT\n         BL    TPUT2               NOT YET\n         MVC   0(80,R4),0(R1)\n         LA    R4,80(0,R4)         ADD IN MSG LENGTH\n         C     R4,CMDOUTEN         END OF OUTPUT\n         BE    TPUT3               YES\n         SPACE 1\nTPUT2    LA    R1,80(0,R1)\n         BCT   R14,TPUT1\n         MVI   0(R4),X'FF'\n         SPACE 1\nTPUT3    ST    R4,16(0,R2)         SAVE OUTPUT ADDR\n         SR    R0,R0\n         C     R4,CMDOUTEN         END OF OUTPUT\n         BL    *+8                 NO\n         LA    R0,1                INDICATE END\n         SPACE 1\nTPUT4    L     R14,8(0,R2)         LOAD RETURN ADDR\n         L     R4,12(0,R2)         LOAD WORK REG\n         L     R13,CMDOUTSV        LOAD PREV REG13\n         BR    R14                 RETURN\nCMDOUTCT DC    F'0'                CURRENT COUNT\nCMDOUTBG DC    F'0'                1ST RECORD TO PRINT\nCMDOUTSV DC    F'0'                SAVE AREA REG13\nCMDOUT13 DC    A(SAVE)             ADDR CMDSBMON SAVE AREA (2ND BASE)\n         DROP  R15\n         EJECT\n         WRITE TPDECB,TS,TPDCB,SCRBEGIN,SCRLEN,,1,MF=L\n         EJECT\nSAVE     DS    18F\nSCRSAVE  DS    12F\n         DS    0D\nVARYTIME DC    CL8'00000100'\nDOUBLE   DS    2F\nRETCODE  DC    F'0'\nCMDOUTST DC    F'80000',F'8000000'\nCMDOUTSZ DC    F'80000',F'7200000'\nCMDOUTPT DC    F'0',F'0'\nCMDOUTEN DC    F'0'\nREFRESH  DC    CL8'00000000'\nREFRCNT  DC    F'20'\nLOADNAME DC    CL8' '\nWAITTIME DS    2F\nHEXTIME  DS    F\nSIZEGETM DC    F'4096'\nREFRSW   DS    F\nPACK     DS    F\nUNIT     DC    CL4' '\nUNITADR  DC    A(UNIT)\nUNITLEN  DC    H'3'                    AND LENGTH OF UNIT NAME\nDDNAME   DC    CL8' '\nDDADR    DC    A(DDNAME)\nDDLEN    DC    H'8'                    AND LENGTH OF UNIT NAME\nENTRY    DS    F\nLENGTH   DS    F\nCOMMAND  DC    F'0'\nPARM     DC    CL80' '\nCSCSYSID DC    F'0'\nCSCCMD   DC    CL80' '\n         DC    X'13'\nLOGLINE  DC    X'09',CL80' '\n         SPACE 3\nVARYOFF  DC    X'00200000',C' V '\nUNITVOFF DC    CL3' ',CL22',OFFLINE'\nVARYON   DC    X'00200000',C' V '\nUNITVON  DC    CL3' ',CL22',ONLINE'\nVARYCONS DC    X'00200000',C' V '\nUNITVCON DC    CL3' ',CL22',CONSOLE'\n         SPACE 3\nHEADER   DS    0CL68\n         DC    C'---  <MON>  CMD SBSYS (#'\nTCMDTYP  DC    C' '\nTCOMMAND DC    C' ',C')  '\nSYSTEM   DC    CL4' ',C'  '\nYEAR     DC    CL2' ',C' '\nDAY      DC    CL3' ',C'  '\nHOUR     DC    CL2' ',C' '\nMINUTE   DC    CL2' ',C'  '\nUSERID   DC    CL8' ',C' '\nTASID    DC    CL4' ',C'  ---'\n         SPACE 3\nEXITLIST DC    A(TPUT)\nASID     DC    F'0'\n         DC    9F'0'\nGETMADR  DC    F'0'\n         DC    A(SCRREPLY+8)\n         EJECT\n         LTORG\n         EJECT\n         DS    0D\nTABLE    DC    64C' '\n     DC    C'           .<(+|&&          $*);\u00ac-/         '\n     DC    C',%_>?          :#@''=\" '\n     DC    C'ABCDEFGHI',CL7' ',C'JKLMNOPQR',CL8' ',C'STUVWXYZ',CL23' '\n     DC    C'ABCDEFGHI',CL7' ',C'JKLMNOPQR',CL8' ',C'STUVWXYZ',CL6' '\n     DC    C'0123456789',CL6' '\n         SPACE 3                                                 BFG-XA\nTOHEX    DC    256X'00'                                          BFG-XA\n         ORG   TOHEX+C'A'                                        BFG-XA\n         DC    X'FAFBFCFDFEFF'                                   BFG-XA\n         ORG   TOHEX+C'0'                                        BFG-XA\n         DC    C'0123456789'                                     BFG-XA\n         ORG   ,                                                 BFG-XA\n         SPACE 3\n         DS    0D\nCOMTAB   DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'04000A030005000C09',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'0B000200010F0D0E06',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0700000800030010',XL23'00'\n         SPACE 3\nMODLIST  DC    CL8' '\n         DC    CL8'CSCSA03D'  1\n         DC    CL8'CSCSC03D'  2\n         DC    CL8'CSCSD03D'  3\n         DC    CL8'CSCSE03D'  4\n         DC    CL8'CSCSF03D'  5\n         DC    CL8'CSCSG03D'  6\n         DC    CL8'CSCSH03D'  7\n         DC    CL8'CSCSI03D'  8\n         DC    CL8'CSCSJ03D'  9\n         DC    CL8'CSCSK03D'  A\n         DC    CL8'CSCSL03D'  B\n         DC    CL8'CSCSM03D'  C\n         DC    CL8'CSCSP03D'  D\n         DC    CL8'CSCSQ03D'  E\n         DC    CL8'CSCSR03D'  F\n         DC    CL8'CSCSZ03D' 10\n         DC    CL8'        '\n         DC    CL8'        '\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCOMTAB2  DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'010203000000000000',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'040000000000050000',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0600000000000000',XL23'00'\n         SPACE 3\nMODLIST2 DC    CL8'        '\n         DC    CL8'CSCZA03D'  1\n         DC    CL8'CSCZB03D'  2\n         DC    CL8'CSCZC03D'  3\n         DC    CL8'CSCZJ03D'  4\n         DC    CL8'CSCZP03D'  5\n         DC    CL8'CSCZS03D'  6\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCOMTAB3  DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'010000000203000405',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'060000000007000800',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'09000A0000000000',XL23'00'\n         SPACE 3\nMODLIST3 DC    CL8'        '\n         DC    CL8'CSCGA03D'  1\n         DC    CL8'CSCGE03D'  2\n         DC    CL8'CSCGF03D'  3\n         DC    CL8'CSCGH03D'  4\n         DC    CL8'CSCGI03D'  5\n         DC    CL8'CSCGJ03D'  6\n         DC    CL8'CSCGO03D'  7\n         DC    CL8'CSCGQ03D'  8\n         DC    CL8'CSCGS03D'  9\n         DC    CL8'CSCGU03D'  A\n         DC    CL8'        '\n         EJECT\n         DYNSPACE\n         SPACE 3\nCMDOUTOV DC    CL80' '\n         DC    30C'-',CL20'  OUTPUT TRUNCATED  ',30C'-'\n         DC    X'FF'\n         SPACE 3\n         DS    0D\nCSCWAIT  DC    CL8'00000200'\nRESETCNT DC    F'10'\nPREVREC  DC    CL96' '\n         SPACE 5\nRECVMSG  DS    0CL44\n         DC    CL44'CMD SUBSYS -   CSC #X COMMAND ACCEPTED'\n         SPACE 3\nTIMEMSG  DS    0CL48\n         DC    CL43'CMD SUBSYS -   CSC TIMEOUT, CMD PENDING ON '\nTIMESID  DC    CL4' ',C' '\n         SPACE 5\nPFKTAB   DC    X'F1',AL3(PFK01)\n         DC    X'F2',AL3(PFK02)\n         DC    X'F3',AL3(PFK03)\n         DC    X'F4',AL3(PFK04)\n         DC    X'F5',AL3(PFK05)\n         DC    X'F6',AL3(PFK06)\n         DC    X'F7',AL3(PFK07)\n         DC    X'F8',AL3(PFK08)\n         DC    X'F9',AL3(PFK09)\n         DC    X'7A',AL3(PFK10)\n         DC    X'7B',AL3(PFK11)\n         DC    X'7C',AL3(PFK12)\n         DC    X'C1',AL3(PFK13)                                 FNB001\n         DC    X'C2',AL3(PFK14)                                 FNB001\n         DC    X'C3',AL3(PFK15)                                 FNB001\n         DC    X'C4',AL3(PFK16)                                 FNB001\n         DC    X'C5',AL3(PFK17)                                 FNB001\n         DC    X'C6',AL3(PFK18)                                 FNB001\n         DC    X'C7',AL3(PFK19)                                 FNB001\n         DC    X'C8',AL3(PFK20)                                 FNB001\n         DC    X'C9',AL3(PFK21)                                 FNB001\n         DC    X'4A',AL3(PFK22)                                 FNB001\n         DC    X'4B',AL3(PFK23)                                 FNB001\n         DC    X'4C',AL3(PFK24)                                 FNB001\n         DC    X'00'\n         EJECT\nCSCDATA  DCB   DDNAME=CSCDATA,DSORG=PS,RECFM=U,BLKSIZE=19069,          X\n               MACRF=(GM,PM)\n         EJECT\nTPDCB    DCB   DDNAME=TERMINAL,DSORG=CX,MACRF=(R,W),EROPT=T\nCMDLOG   DCB   DDNAME=CMDLOG,DSORG=PS,MACRF=(PM),RECFM=FBM,LRECL=81,   X\n               BLKSIZE=4050\n         EJECT\nSCRREPLY DC    CL63' ',CL17' '\nSCRBEGIN DS    0D\nSCRLIN01 DC    X'C31140403C404000'\n         DC    C'CMD SUBSYSTEM -'\n         DC    X'1DC8'\nSCRLSREP DC    CL63' '\n         DC    X'1DF0'\nSCRLIN02 DC    CL80' '\nSCRLIN03 DC    CL80' '\nSCRLIN04 DC    CL80' '\nSCRLIN05 DC    CL80' '\nSCRLIN06 DC    CL80' '\nSCRLIN07 DC    CL80' '\nSCRLIN08 DC    CL80' '\nSCRLIN09 DC    CL80' '\nSCRLIN10 DC    CL80' '\nSCRLIN11 DC    CL80' '\nSCRLIN12 DC    CL80' '\nSCRLIN13 DC    CL80' '\nSCRLIN14 DC    CL80' '\nSCRLIN15 DC    CL80' '\nSCRLIN16 DC    CL80' '\nSCRLIN17 DC    CL80' '\nSCRLIN18 DC    CL80' '\nSCRLIN19 DC    CL80' '\nSCRLIN20 DC    CL80' '\nSCRLIN21 DC    CL80' '\nSCRLIN22 DC    CL80' '\nSCRLIN23 DC    CL80' '\nSCRLIN24 DC    C'REPLY -'\n         DC    X'1DC8115DF71DF0'\nSCRPLUS  DC    C' '\n         DC    X'115CF813'\nSCRLEN   EQU   *-SCRBEGIN\n         EJECT\nOPENTEXT DC    CL80'#####   CMD  SUB-SYSTEM  MONITOR   #####'\n DC CL80' '\n DC CL80' '\n DC CL80'--->  ENTER  # CMDS,  ## CMDS,  OR  GRAPHIC MONITOR CMDS'\n DC CL80'             BEGINNING WHERE CURSOR IS POSITIONED'\n DC CL80' '\n DC CL80' '\n DC CL80'--->  ENTER  NN/XX  TO CHANGE MONITOR REFRESH INTERVAL'\n DC CL80' '\n DC CL80'             WHERE  NN  =   NUMBER OF SECONDS'\n DC CL80'                    XX  =   NUMBER OF INTERVALS'\n DC CL80' '\n DC CL80' '\n DC CL80'--->  ENTER  ''Z''  OR  ''END''   TO TERMINATE'\n DC CL80' '\n DC CL80' '\n DC CL80'--->  PRESS  PA1 TO STOP AUTOMATIC REFRESH'\n DC CL80'--->  PRESS  PA2 OR CLEAR TO REPEAT THE LAST COMMAND'\n DC CL80'--->  PRESS  PFK 1  TO DISPLAY PFK ASSIGNMENTS'\n DC CL80' '\n DC CL80' '\n DC CL80'--->  ENTER  ''H''  TO OBTAIN HELP FOR GRAPHIC MONITOR CMDS'\n         SPACE 5\nPFKTEXT  DC    CL80'#####        PFK  ASSIGNMENTS        #####'\n DC CL80' '\n DC CL80' '\nPFK01    DC    CL80'PFK1 =   DISPLAY PFK ASSIGNMENTS'\nPFK02    DC    CL80'PFK2 =   H'\nPFK03    DC    CL80'PFK3 =   E'\nPFK04    DC    CL80'PFK4 =   F'\nPFK05    DC    CL80'PFK5 =   J'\nPFK06    DC    CL80'PFK6 =   S'\nPFK07    DC    CL80'PFK7 =   #J'\nPFK08    DC    CL80'PFK8 =   #O'\nPFK09    DC    CL80'PFK9 =   #OX'\nPFK10    DC    CL80'PFK10 =  #Q'\nPFK11    DC    CL80'PFK11 =  ##SD'\nPFK12    DC    CL80'PFK12 =  05/50'\nPFK13    DC    CL80'PFK13 =  ##A,T=5'                           FNB001\nPFK14    DC    CL80'PFK14 =  H'                                 FNB001\nPFK15    DC    CL80'PFK15 =  E'                                 FNB001\nPFK16    DC    CL80'PFK16 =  F'                                 FNB001\nPFK17    DC    CL80'PFK17 =  J'                                 FNB001\nPFK18    DC    CL80'PFK18 =  S'                                 FNB001\nPFK19    DC    CL80'PFK19 =  #J'                                FNB001\nPFK20    DC    CL80'PFK20 =  #O'                                FNB001\nPFK21    DC    CL80'PFK21 =  #OX'                               FNB001\nPFK22    DC    CL80'PFK22 =  #Q'                                FNB001\nPFK23    DC    CL80'PFK23 =  ##SD'                              FNB001\nPFK24    DC    CL80'PFK24 =  05/50'                             FNB001\n DC CL80' '\n DC CL80' '\n DC CL80' '\n DC CL80'--->  ENTER  NN=XXXX  AND PRESS PFK 1  TO CHANGE PFK FUNCTION'\n DC CL80' '\n DC CL80'             WHERE  NN -   IS THE PFK NUMBER  02 - 12'\n DC CL80'                    XXXX - IS THE COMMAND TO BE ASSIGNED'\n         SPACE 5\nRECORD   DS    CL19069\n         EJECT\n         CVT   DSECT=YES\n         EJECT\n         IECDIOCM\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CMDSBSYS\n         TITLE 'CMDSBSYS -   COMMAND PROCESSOR MODULE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDSBSYS -       COMMAND PROCESSOR MODULE                 ***\n***                                                                 ***\n***       VERSION -        1.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        09/01/79                                 ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDSBSYS CSECT\n         SPACE 1\n         DC    A(CMDENTRY-CMDSBSYS)\n         SPACE 1\nCMDENTRY EQU   *\n         SAVE  (14,12)\n         LR    R12,R15\n         USING CMDENTRY,R12\n         LR    R2,R0               LOAD SSCVT ADDR\n         L     R10,16(0,R2)        LOAD SSVT ADDR\n         LR    R11,R1              LOAD SSOB ADDR\n         XC    12(4,R11),12(R11)   CLEAR RETURN CODE\n         LA    R3,0(0,R10)         LOAD SSVT ADDR\n         USING AREA,R3\n         L     R10,16(0,R11)       LOAD FUNCTION DEPENDENT AREA ADDR\n         SR    R4,R4               CLEAR UCMID HOLDER\n         IC    R4,11(0,R10)        SAVE UCMID OF ISSUING CONSOLE\n         L     R10,4(0,R10)        LOAD CMD BUFFER ADDR\n         LH    R9,0(0,R10)         LOAD COMMAND LENGTH\n         SH    R9,=H'4'            SUB 4 FOR HDR PORTION\n         LA    R10,4(0,R10)        TEXT ADDR\n         CLI   0(R10),C'D'         DISPLAY COMMAND\n*        BE    CMDCHK              YES, CHECK FOR  D DUMP CMD\n         CLI   0(R10),C'#'         OUR COMMAND\n         BNE   CMDOUT              NO, LET MVS OR JES2 HANDLE\n         XC    SSVTTIME(4),SSVTTIME\n         CLC   0(2,R10),=C'##'     MONITOR COMMAND\n         BNE   *+10                NO\n         MVC   SSVTTIME(4),=F'30'  INDICATE MONITOR COMMAND REQUEST\n         CLC   SAVE+4(4),=F'0'     CMDSBSYS ALREADY ACTIVE\n         BNE   CMDACTIV            YES, REJECT COMMAND\n         ST    R13,SAVE+4          SAVE AREA\n         LA    R13,SAVE               CONVENTIONS\n         STC   R4,XAU              SAVE UCM ID OF ISSUING CONSOLE\n         SR    R1,R1               LOAD\n         IC    R1,XAU                 INPUT CONSOLE UCM ID\n         CVD   R1,DOUBLE           CONVERT AND PRINT\n         UNPK  INCONS(2),DOUBLE+6(2)\n         OI    INCONS+1,X'F0'\n*        CH    R9,=H'80'           SELF-IMPOSED MAX LENGTH\n*        BH    CMDERROR            TOO HIGH, ERROR\n         CH    R9,=H'2'            SELF-IMPOSED MIN LENGTH\n         BL    CMDERROR            TOO LOW, ERROR\n         LA    R8,CMDTABLE         COMMAND TABLE ADDR\n         LA    R10,1(0,R10)        NEXT BYTE\n         BCTR  R9,0                SUB 1 FROM LENGTH\n         CLI   0(R10),C' '         BLANK OR COMMAND\n         BNE   CMD1                COMMAND\n         LA    R10,1(0,R10)        BLANK, NEXT BYTE\n         BCT   R9,CMD1                MUST BE COMMAND\n         B     CMDERROR            NOT COMMAND, ERROR\n         EJECT\nCMD1     CLI   0(R10),C'#'         SUBSYS MONITOR REQUEST\n         BE    CMD2                YES, CONTINUE\n         CLC   0(2,R10),=C'**'     SUBSYS CSC STOP REQUEST\n         BE    CMD2                YES, CONTINUE\n         CLI   0(R8),X'00'         TABLE END\n         BE    CMDNOSUP            YES, COMMAND NOT SUPPORTED\n         CLC   0(1,R8),0(R10)      COMMAND MATCH\n         BE    CMD2                YES, CONTINUE\n         LA    R8,4(0,R8)          NEXT ENTRY\n         B     CMD1\n         SPACE 1\nCMD2     MVI   COMMAND,C' '        CLEAR COMMAND\n         MVC   COMMAND+1(79),COMMAND\n         SPACE 1\nCMD3     CLI   0(R10),C'#'         SUBSYS MONITOR REQUEST\n         BE    CMD4                YES, CONTINUE\n         CLC   0(2,R10),=C'**'     SUBSYS CSC STOP REQUEST\n         BE    CMD4                YES, CONTINUE\n         LA    R10,1(0,R10)        NEXT BYTE\n         BCT   R9,CMD4             SUB 1 FROM LENGTH\n         XC    XAL,XAL             CLEAR SUB-PARM ADDR\n         B     CMDISSUE            GO PROCESS COMMAND\n         SPACE 1\nCMD4     CLI   0(R10),C' '         BLANK\n         BE    CMD3                YES, CHECK NEXT\n         LA    R1,COMMAND          LOAD COMMAND AREA ADDR\n         ST    R1,XAL              SAVE SUB-PARM ADDR\n         LR    R6,R10              SAVE SUB-PARM START\n         LA    R10,0(R9,R10)       POINT TO\n         BCTR  R10,0                  LAST BYTE\n         EJECT\nCMD5     CR    R6,R10              CHECK FOR NON-BLANKS BACK TO START\n         BNL   CMDMOVE             GO MOVE IF ALREADY THERE\n         CLI   0(R10),C' '         BLANK\n         BNE   CMDMOVE             NO, GO MOVE SUB-PARM\n         BCT   R10,CMD5            CHECK NEXT PREVIOUS BYTE\n         B     CMDERROR            THIS CANNOT HAPPEN -   I THINK\n         SPACE 3\nCMDMOVE  LR    R1,R10              BACK UP 4 BYTES\n         SH    R1,=H'4'\n         SR    R10,R6              CALCULATE MOVE LENGTH\n         MVC   SYSID(4),3(R1)      SAVE RECEIVING SYSID\n         CLC   0(3,R1),=C',L='     DIRECTED OUTPUT\n         BNE   CMDMOVEX            NO, CONTINUE\n         TM    3(R1),X'F0'         NUMERIC\n         BNO   CMDERROR               CONSOLE\n         TM    4(R1),X'F0'               I.D.\n         BNO   CMDERROR                     CHECK\n         PACK  DOUBLE(8),3(2,R1)   CONVERT\n         CVB   R14,DOUBLE             SAVE AND\n         BAL   R7,CONSCHK                VALIDATE\n         STC   R14,XAU                      NEW UCMID\n         LR    R10,R1              POINT TO COMMA\n         BCTR  R10,0               BACK UP 1\n         SR    R10,R6              CALCULATE MOVE LENGTH\n         BNM   CMDMOVEX            GO MOVE IF NOT NEGATIVE\n         XC    XAL,XAL             CLEAR SUB-PARM ADDR\n         B     CMDISSUE            GO PROCESS COMMAND\n         SPACE 3\nCMDMOVEX EX    R10,CMDMEXEC        MOVE SUB-PARM\n         B     CMDISSUE            GO PROCESS COMMAND\n         SPACE 3\nCMDMEXEC MVC   COMMAND(0),0(R6)\n         EJECT\nCSCSYS   LA    R1,COMMAND-1        COMMAND BEGIN -1\n         LA    R14,COMMAND+76      COMMAND END\n         CLC   COMMAND(2),=C'**'   CSC STOP REQUEST\n         BNE   *+12                NO\n         MVI   CSCCMD,C'*'         SET CSC STOPPED\n         B     CSCSYS4\n         SPACE 1\nCSCSYS1  CLC   0(3,R14),=C',S='    SYSID PARM\n         BE    CSCSYS2             YES\n         BCTR  R14,0\n         CR    R1,R14              SYSID PARM MISSING\n         BNE   CSCSYS1             NO\n         BR    R7\n         SPACE 1\nCSCSYS2  CLI   CSCCMD,C'*'         IS CSC STOPPED\n         BE    CSCSYS3             YES\n         MVC   SYSID(4),3(R14)     SET UP RECEIVING SYSID\n         CLC   SSVTTIME(4),=F'0'   MONITOR COMMAND\n         BNE   CMDNOSUP            YES, NOT ALLOWED\n         MVI   SSVTTIME,C'C'\n         BR    R7\n         SPACE 1\nCSCSYS3  LA    R1,CSCNACT          CSC NOT ACTIVE MSG\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDMSG\n         SPACE 1\nCSCSYS4  LA    R1,CSCSTOP          CSC NOT ACTIVE MSG\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDMSG\n         EJECT\nCONSCHK  L     R15,16              CVT\n         L     R15,100(0,R15)      UCM BASE\n         L     R9,72(0,R15)        UCM 1ST ENTRY ADDR\n         LM    R4,R5,76(R15)       UCM ENTRY LENGTH AND LAST ENTRY ADDR\n         SPACE 3\nCONSCHK1 CLM   R14,1,26(R9)        UCM ID MATCH\n         BNE   CONSCHK2            NO, CHECK NEXT\n         TM    25(R9),X'10'        IS CONSOLE ACTIVE\n         BNO   CONSCHK3            NO, ERROR\n         BR    R7                  YES,BACK TO NORMAL\n         SPACE 3\nCONSCHK2 BXLE  R9,R4,CONSCHK1      NEXT UCM ENTRY\n         SPACE 3\nCONSCHK3 LA    R1,UCMMSG           UCM ID ERROR MSG\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDMSG\n         EJECT\nCMDISSUE MVC   WTOLIST(52),WTOOVLY\n         BAL   R7,CSCSYS           CHECK FOR S=\n         MVC   UCMID(2),INCONS     UCM ID OF INPUT CONSOLE\n         MVC   CMDID(1),0(R8)      COMMAND ID FROM TABLE\n         L     R1,16               CVT\n         L     R1,196(0,R1)        SMCA\n         CLI   SSVTTIME,C'C'       CROSS-SYSTEM COMMAND\n         BE    *+10                YES\n         MVC   SYSID(4),16(R1)     SYSTEM ID\n         TIME  DEC\n         ST    R1,DOUBLE\n         UNPK  YEAR(3),DOUBLE+1(2)\n         MVI   YEAR+2,C'.'\n         UNPK  DAY(3),DOUBLE+2(2)\n         OI    DAY+2,X'F0'\n         ST    R0,DOUBLE\n         UNPK  HOUR(3),DOUBLE(2)\n         MVI   HOUR+2,C'.'\n         UNPK  MINUTE(3),DOUBLE+1(2)\n         MVI   MINUTE+2,C' '\n         CLC   SSVTTIME(4),=F'30'  SUBSYS MONITOR REQUEST\n         BE    CMDMON              YES, CONTINUE\n         CLI   SSVTTIME,C'C'       CROSS-SYSTEM COMMAND\n         BE    CMDMON              YES\n         LA    R1,WTOLIST\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         MVC   XAS(1),SYSID\n         MVC   XAS+1(1),DAY\n         MVC   XAS+2(1),HOUR\n         MVC   XAS+3(1),DAY+1\n         MVC   XAS+4(1),HOUR+1\n         MVC   XAS+5(1),DAY+2\n         MVC   XAS+6(2),MINUTE\n         EJECT\nCMDBRNCH SR    R15,R15             LOAD COMMAND\n         ICM   R15,7,1(R8)            MODULE ADDR\n         LTR   R15,R15             ZERO MODULE ADDR\n         BZ    CMDNOSUP            YES, NOT SUPPORTED\n         LA    R2,XSA              XSA ADDR\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         LA    R14,CMDRETN         LOAD RETURN ADDR\n         BR    R15                 EXIT TO COMMAND MODULE\n         SPACE 3\nCSC      MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         CLI   CSCCMD,X'00'        AVAILABLE\n         BE    CSC1                YES\n         LA    R1,CSCMSG\n         B     CMDMSG\n         SPACE 1\nCSC1     MVC   HDRMSG+20(1),0(R8)  COMMAND ID\n         MVC   CSCHDR(52),HDRMSG\n         MVC   CSCCMD+1(77),COMMAND SUB PARM\n         MVC   CSCCMD(1),0(R8)     COMMAND\n         B     CMDEXIT\n         EJECT\nCMDMON   LA    R14,COMMAND+1\n         CLI   0(R14),C' '         1 BLANK ALLOWED\n         BNE   CMDMON0             YES\n         LA    R14,1(0,R14)\n         SPACE 1\nCMDMON0  MVC   CMD##(78),0(R14)    SAVE MONITOR COMMAND\n         MVC   HDRMSG(52),WTOLIST\n         MVI   HDRMSG+19,C'#'\n         CLI   SSVTTIME,C'C'       CROSS-SYSTEM COMMAND\n         BNE   *+8                 NO\n         MVI   HDRMSG+19,C'*'      YES, SO INDICATE\n         MVC   HDRMSG+20(1),CMD##\n         MVI   HDRMSG+21,C')'\n         CLI   SSVTTIME,C'C'       CROSS-SYSTEM COMMAND\n         BE    CSC                 YES\n         CLI   SSVTSTAT,X'F0'      XMPOST ERROR\n         BE    CMDMON3A            YES\n         CLI   SSVTSTAT,X'FF'      MONITOR BUSY\n         BE    CMDMON3             YES\n         MVI   SSVTSTAT,X'FF'      SET MONITOR BUSY\n         MVC   SSVTUMID+3(1),XAU   SAVE UCM ID\n         SPACE 1\nCMDMON1  LA    R4,SSVTECB          ECB TO POST\n         L     R5,SSVTASCB         ASCB ADDR\n         LA    R5,0(0,R5)\n         STM   R14,R12,SAVE+12\n         POST  (4),ASCB=(5),ERRET=CMDMON4\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDEXIT\n         SPACE 1\nCMDMON3  LA    R1,MONAMSG          MONITOR BUSY MSG\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDMSG\n         SPACE 1\nCMDMON3A LA    R1,POSTMSG          XMPOST ERROR MSG\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDMSG\n         EJECT\n         USING *,R15\nCMDMON4  BALR  R15,0\n         LA    R15,0(0,R15)\n         BCTR  R15,0\n         BCTR  R15,0\n         STM   R0,R14,POSTSAVE\n         L     R5,16               CVT\n         L     R5,296(0,R5)        JESCT\n         L     R5,24(0,R5)         1ST SSCVT ADDR\n         SPACE 1\nCMDMON4A CLC   8(3,R5),=CL3'CMD'   NAME MATCH\n         BE    CMDMON4B            YES, CONTINUE\n         L     R5,4(0,R5)          NEXT SSCVT\n         LTR   R5,R5               ZERO SSCVT\n         BNZ   CMDMON4A            NO, CONTINUE\n         B     CMDMON4C\n         SPACE 3\n         USING AREA,R3\n         DROP  R15\nCMDMON4B L     R3,16(0,R5)         SSVT ADDR\n         LA    R13,SAVE\n         LM    R14,R12,SAVE+12\n         MVI   SSVTSTAT,X'F0'      SET POST ERROR IND\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         SPACE 1\nCMDMON4C LM    R0,R14,POSTSAVE\n         SR    R15,R15\n         BR    R14\n         EJECT\nCMDERROR LA    R1,ERRMSG           ERROR\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         B     CMDMSG\n         SPACE 3\nCMDNOSUP LA    R1,SUPPMSG          NOT SUPPORTED\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         SPACE\nCMDMSG   SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         SPACE 3\nCMDEXIT  L     R13,4(0,R13)        LOAD PREVIOUS SAVE AREA ADDR\n         XC    SAVE+4(4),SAVE+4    CLEAR PREVIOUS SAVE AREA ADDR\nCMDOUT   RETURN (14,12),RC=0\n         EJECT\nCMDCHK   LA    R1,70\n         SPACE 1\nCMDCHK1  LA    R10,1(0,R10)\n         CLI   0(R10),C' '         COMMAND END\n         BE    CMDCHK2             YES\n         BCT   R1,CMDCHK1\n         B     CMDOUT\n         SPACE 1\nCMDCHK2  LA    R10,1(0,R10)\n         CLI   0(R10),C' '         SUB PARM REACHED\n         BNE   CMDCHK3             YES\n         BCT   R1,CMDCHK2\n         B     CMDOUT\n         SPACE 1\nCMDCHK3  CLC   0(2,R10),=C'D '     D DUMP COMMAND\n         BE    CMDCHK4             YES\n         CLC   0(2,R10),=C'D,'     D DUMP COMMAND\n         BE    CMDCHK4             YES\n         CLC   0(4,R10),=C'DUMP'   D DUMP COMMAND\n         BNE   CMDOUT              NO\n         SPACE 1\nCMDCHK4  MVI   15(R11),X'04'       INDICATE MSG PROCESSED\n         LA    R1,DDUMPMSG         LOAD DISPLAY DUMP MSG ADDR\n         LR    R0,R4               LOAD UCMID\n         SVC   35\n         LA    R1,DDUMPCMD         S CHKDUMP COMMAND\n         SR    R0,R0\n         SVC   34\n         RETURN (14,12),RC=0\n         SPACE 3\nCMDACTIV LA    R1,ACTVMSG          CMDSBSYS ACTIVE MSG\n         MVI   15(R11),X'04'       INDICATE CMD SUBSYS PROCESSED\n         LR    R0,R4               LOAD UCMID\n         SVC   35\n         RETURN (14,12),RC=0\n         EJECT\n         USING CMDRETN,R14\nCMDRETN  L     R1,CMDBASE          LOAD RELATIVE OFFSET\n         LA    R12,0(0,R14)        LOAD\n         SR    R12,R1                 MODULE BASE ADDR\n         B     CMDRETN1\n         DROP  R14\n         SPACE 3\n         DS    0F\nCMDBASE  DC    A(CMDRETN-CMDENTRY)\n         SPACE 3\n         USING CMDENTRY,R12\nCMDRETN1 L     R1,16               CVT\n         L     R1,296(0,R1)        JESCT\n         L     R1,24(0,R1)         1ST SSCVT\n         SPACE 3\nCMDRETN2 CLC   8(3,R1),=C'CMD'     CMD SUB-SYSTEM SSCVT ENTRY\n         BE    CMDRETN3            YES, CONTINUE\n         L     R1,4(0,R1)          NEXT SSCVT\n         B     CMDRETN2\n         SPACE 3\nCMDRETN3 L     R1,16(0,R1)         LOAD SSVT ADDR\n         LA    R3,0(0,R1)          LOAD WORK AREA ADDR\n         LA    R13,SAVE            LOAD SAVE AREA ADDR\n         B     CMDEXIT\n         EJECT\n         LTORG\n         SPACE 5\nPOSTSAVE DC    15F'0'\n         SPACE 2\n         DS    0F\nSIZE     DC    X'F1',AL3(AREAEND-AREA)\n         SPACE 2\n         DS    0F\nWTOOVLY  DS    0CL52\n         DC    X'00340100'\n         DC    CL4'--  ',CL8'CMDSBSYS',CL3' (#'\n         DC    CL4' )  ',CL6'L=    ',CL4' ',CL8' ',CL7' ',CL4'  --'\n         SPACE 2\nMSGOVLY  DS    0CL52\n         DC    X'00340100'\n         DC    CL4'--  ',CL12'MSGSBSYS -',CL6' ',CL2' '\n         DC    CL20'OUTSTANDING MESSAGES',CL4'  --'\n         EJECT\nERRMSG   DS    0CL44\n         DC    X'002C0100'\n         DC    CL40'CMD SUBSYS -   COMMAND PARAMETER ERROR'\n         SPACE 2\nSUPPMSG  DS    0CL40\n         DC    X'00280100'\n         DC    CL36'CMD SUBSYS -   COMMAND NOT SUPPORTED'\n         SPACE 2\nUCMMSG   DS    0CL40\n         DC    X'00280100'\n         DC    CL36'CMD SUBSYS -   CONSOLE NOT ACTIVE'\n         SPACE 2\nACTVMSG  DS    0CL48\n         DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   COMMAND REJECTED, SUBSYS BUSY'\n         SPACE 2\nMONAMSG  DS    0CL52\n         DC    X'00340100'\n         DC    CL48'CMD SUBSYS -   COMMAND REJECTED, MONITOR BUSY'\n         SPACE 2\nCSCMSG   DS    0CL48\n         DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   COMMAND REJECTED, CSC BUSY'\n         SPACE 2\nCSCSTOP  DS    0CL32\n         DC    X'00200100'\n         DC    CL28'CMD SUBSYS -   CSC STOPPED'\n         SPACE 2\nCSCNACT  DS    0CL52\n         DC    X'00340100'\n         DC    CL48'CMD SUBSYS -   COMMAND REJECTED, CSC NOT ACTIVE'\n         SPACE 2\nPOSTMSG  DS    0CL52\n         DC    X'00340100'\n         DC    CL48'CMD SUBSYS -   XMPOST ERROR -  RESTART SUBSYS'\n         SPACE 2\nDDUMPMSG DS    0CL48\n         DC    X'00300100'\n         DC    CL44'CMD SUBSYS -   S CHKDUMP ISSUED FOR  D DUMP'\n         SPACE 2\n         DS    0F\nDDUMPCMD DS    0CL16\n         DC    X'00100000'\n         DC    CL16' S CHKDUMP  '\n         EJECT\nAREA     DSECT\nSSVT     DS    H\nSSVTFNUM DS    H\nSSVTFCOD DS    XL256\nSSVTFRTN DS    0F\nSSVTFUNC DS    0F\nSSVTFUN1 DS    F\n         DS    8F\nSSVTMSGT DS    F\nSSVTLIST DS    2F\nSSVTECB  DS    F\n         DS    0D\nSSVTWAIT DS    CL8\nSSVTTIME DS    F\nSSVTASCB DS    0F\nSSVTSTAT DS    X\n         DS    XL3\nSSVTUMID DS    F\n         SPACE 3\nCMDTABLE DS    20F\nCMDEND   DS    F\n         EJECT\n         DS    0D\nUSERWORK DS    0CL228\nDOUBLE   DS    D\nSAVE     DS    18F\nCOMMAND  DS    CL80\nINCONS   DS    CL2\n         SPACE 2\n         DS    0F\nWTOLIST  DS    0CL52\n         DS    CL19\nCMDID    DS    C\n         DS    CL5\nUCMID    DS    CL2\n         DS    CL2\nSYSID    DS    CL4\n         DS    CL2\nYEAR     DS    CL2\n         DS    C\nDAY      DS    CL3\n         DS    CL2\nHOUR     DS    CL2\n         DS    C\nMINUTE   DS    CL2\n         DS    CL4\nPADDING  DS    CL12\n         SPACE 2\nXSA      DS    0CL48\n         DS    5F\nXAL      DS    F\nXAT      DS    F\n         DS    F\nXAS      DS    2F\nXAU      DS    X\n         DS    XL7\n         SPACE 2\nCMD##    DS    CL78\nHDRMSG   DS    CL52\nDISBL    DS    CL48\n         DS    0F\nCSCHDR   DS    CL52\nCSCCMD   DS    CL78\nCSCSTABL DS    CL48\n         SPACE 2\nAREAEND  DS    0D\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CMDSBTSO\n         PRINT NOGEN                                               @TEC\n         TITLE 'CMDSBTSO -   TSO FULL SCREEN MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDSBTSO -       TSO FULL SCREEN MONITOR                  ***\n***                                                                 ***\n***       VERSION -        2.4                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        12/15/79                                 ***\n***                                                                 ***\n***       UPDATED -        09/29/81    TO PROVIDE 3278/79 SUPPORT   ***\n***                                    AND TO PROVIDE FOR 24 PFKS   ***\n***                                                                 ***\n***       UPDATED -        09/16/91    REMOVE REFERENCE TO THE Q    ***\n***                                    GRAPHIC MONITOR COMMAND      ***\n***                                                                 ***\n***  THIS MODULE SEARCHES THE CODE IT IS LOADING (#Q, #N, ETC.) TO  ***\n***  SEE IF SUBPOOL 241 IS BEING REQUESTED FOR THE GETMAIN.  THIS   ***\n***  MODULE DOES THIS BY SEARCHING FOR X'F100' IN THE CODE.  IF THE ***\n***  EXECUTION IS TAKING PLACE VIA THE SYSTEM CONSOLE, THEN SUBPOOL ***\n***  241 IS ALLOWED.  IF THE EXECUTION IS TAKING PLACE WITHIN TSO,  ***\n***  THEN THE X'F100' IS CHANGED TO X'0000' (FOR SUBPOOL 0) PRIOR TO***\n***  THE ACTUAL EXECUTION OF THE CODE.  IF THE PROPER CODING        ***\n***  CONVENTIONS ARE NOT FOLLOWED IN THE SUB-MODULES (#Q, #N, ETC.),***\n***  THIS CHECK MAY NOT BE SUCCESS- FUL, AND AN ABEND B0A WILL TAKE ***\n***  PLACE.\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDSBTSO CSECT\n         SAVE  (14,12)\n         LR    R3,R15\n         USING CMDSBTSO,R3\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         USING SAVE,R13\n         ST    R1,DIRCPPL          SAVE CPPL ADDR IF APPLICABLE\n         XC    GETMADR(4),GETMADR\n         SPACE 1\nCMDINIT  STATTN  LINES=0,TENS=0,INPUT=ATTNCHAR\n         STAX  ATENTION,REPLACE=YES,DEFER=NO\n         L     R0,SIZEGETM         GETMAIN SIZE\n         L     R1,GETMADR          GETMAIN ADDR\n         LTR   R1,R1               GETMAIN ALREADY DONE\n         BNZ   CMDINIT1            YES\n         GETMAIN R,LV=(0)          GET COMMAND WORK AREA\n         LA    R1,0(0,R1)\n         ST    R1,GETMADR          SAVE GETMAIN ADDR\n         SPACE 1\nCMDINIT1 LR    R4,R1\n         L     R5,SIZEGETM\n         LA    R5,0(0,R5)\n         SR    R6,R6\n         SR    R7,R7\n         MVCL  R4,R6               CLEAR GETMAIN AREA\n         MVI   RETCODE,X'00'\n         L     R4,=A(CMDOUTPT)\n         LA    R5,1760\n         L     R6,=A(OPENTEXT)\n         LA    R7,1760\n         MVCL  R4,R6               MOVE OPENING TEXT TO OUTPUT\n         L     R4,=A(CMDOUTPT)\n         MVI   REFRSW,X'00'\n         MVC   REFRESH(8),=CL8'00000000'\n         EJECT\nCMDGET   CLC   REFRESH(8),=CL8'00000000'  AUTO REFRESH\n         BE    CMDGET1             NO\n         L     R4,=A(CMDOUTPT)     OUTPUT ADDR\n         BAL   R7,SCREEN           WRITE SCREEN AND GET NEXT COMMAND\n         CLI   RETCODE,C'Z'        ATTENTION\n         BE    CMDINIT             YES\n         STIMER  WAIT,DINTVL=REFRESH\n         L     R1,REFRCNT\n         BCT   R1,*+8              BRANCH UNTIL END OF AUTO REFRESH\n         B     CMDINIT\n         ST    R1,REFRCNT\n         MVC   SCRREPLY+6(57),SCRLSREP\n         LA    R14,SCRREPLY+6\n         B     CMDGET2\n         SPACE 1\nCMDGET1  L     R4,=A(CMDOUTPT)     OUTPUT ADDR\n         BAL   R7,SCREEN           WRITE SCREEN AND GET NEXT COMMAND\n         CLI   RETCODE,C'Z'        ATTENTION\n         BE    CMDINIT             YES\n         SPACE 1\nCMDGET2  L     R4,=A(CMDOUTPT)\n         XC    CMDOUTBG(4),CMDOUTBG\n         XC    CMDOUTCT(4),CMDOUTCT\n         CLI   0(R14),C'('         OUTPUT INCREMENT\n         BNE   CMDGET2A            NO\n         CLI   4(R14),C')'         OUTPUT INCREMENT\n         BNE   CMDGET2A            NO\n         MVC   DOUBLE(3),=C'000'\n         MVZ   DOUBLE(3),1(R14)\n         CLC   DOUBLE(3),=C'000'   NUMERIC\n         BNE   CMDGET2A            NO, ERROR\n         PACK  DOUBLE(8),1(3,R14)\n         LR    R1,R14              SAVE REG14\n         SR    R14,R14\n         CVB   R15,DOUBLE\n         M     R14,=F'1000'\n         ST    R15,CMDOUTBG\n         LR    R14,R1              POINT TO COMMAND\n         MVC   0(58,R14),5(R14)    SHIFT OVER COMMAND\n         SPACE 1\nCMDGET2A LA    R10,COMTAB          # COMMAND TABLE\n         LA    R11,MODLIST         # COMMAND MODULE LIST\n         MVI   TCMDTYP,C' '\n         CLI   0(R14),C'@'         EXEC PROGRAM\n         BE    DIREXEC             YES, GO HANDLE\n         CLI   0(R14),C'.'         EXEC CP\n         BE    DIREXEC             YES, GO HANDLE\n         CLI   0(R14),C'#'         # COMMAND\n         BNE   PLOOPA              NO, CHECK CONTROL COMMANDS\n         LA    R14,1(0,R14)        ADJUST INPUT PARM\n         CLI   0(R14),C'#'         ## COMMAND\n         BNE   PLOOPC              NO\n         LA    R14,1(0,R14)        ADJUST INPUT PARM\n         BCTR  R1,0                ADJUST LENGTH\n         LA    R10,COMTAB2         ## COMMAND TABLE\n         LA    R11,MODLIST2        ## COMMAND MODULE LIST\n         MVI   TCMDTYP,C'#'        INDICATE ##\n         B     PLOOPC\n         EJECT\nPLOOPA   LA    R10,COMTAB3         GRAPHIC MONITOR COMMAND TABLE\n         LA    R11,MODLIST3        GRAPHIC MONITOR MODULE LIST\n         MVI   TCMDTYP,C'-'        INDICATE GRAPHIC MONITOR\n         TM    0(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPC              NO, GRAPHIC MONITOR COMMAND\n         TM    1(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPB              NO, ERROR\n         MVC   REFRESH+4(2),0(R14)\n         LA    R1,20               DEFAULT REFRESH COUNT\n         CLI   2(R14),C'/'\n         BNE   PLOOPA1\n         TM    3(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPB              NO, ERROR\n         TM    4(R14),X'F0'        CHANGE REFRESH TIME COMMAND\n         BNO   PLOOPB              NO, ERROR\n         PACK  DOUBLE(8),3(2,R14)\n         CVB   R1,DOUBLE\n         SPACE 1\nPLOOPA1  MVC   0(80,R4),=CL80'CONTROL COMMAND ACCEPTED'\n         MVI   80(R4),X'FF'\n         ST    R1,REFRCNT\n         B     CMDGET1\n         SPACE 1\nPLOOPB   MVC   0(80,R4),=CL80'ERROR IN CONTROL COMMAND'\n         MVI   80(R4),X'FF'\n         B     CMDGET\n         SPACE 1\nPLOOPC   MVC   COMMAND(1),0(R14)   SAVE COMMAND\n         SR    R15,R15\n         LA    R1,1(0,R14)         1ST BYTE OF SUB-PARM\n         CLI   0(R1),C' '          1ST BYTE BLANK\n         BNE   *+16                NO\n         LA    R1,1(0,R1)          NEXT BYTE\n         CLI   0(R1),C' '          2ND BYTE BLANK\n         BE    PROCESS             YES, NO SUB-PARM\n         LA    R15,PARM\n         MVC   PARM(60),0(R1)\n         EJECT\nPROCESS  ST    R15,EXITLIST+20     SAVE TEXT ADDR\n         MVC   WAITTIME(8),=8C'0'\n         XC    CSCSYSID(4),CSCSYSID\n         XC    HEXTIME(4),HEXTIME\n         LA    R1,PARM\n         LA    R8,PARM+74\n         SPACE 1\nPROCESS1 CLC   0(2,R8),=C'T='      TIME PARM\n         BE    PROCESS2            YES\n         CLC   0(2,R8),=C'S='      SYSID PARM\n         BE    PROCESS4            YES\n         BCTR  R8,0                PREVIOUS CHARACTER\n         CR    R1,R8               BACK TO BEGINNING\n         BNE   PROCESS1            NO, CHECK NEXT\n         B     PROCESS5            YES, NO T= FOUND\n         SPACE 1\nPROCESS2 LA    R1,PACK+3           TARGET FIELD\n         MVC   PACK(4),=C'0000'\n         CLI   4(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),4(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   3(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),3(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   2(R8),C' '          SENDING BYTE BLANK\n         BE    *+10                YES, DONT MOVE\n         MVC   0(1,R1),2(R8)       MOVE IT\n         MVC   DOUBLE(4),=C'0000'\n         MVZ   DOUBLE(4),PACK\n         CLC   DOUBLE(4),=C'0000'  IS IT NUMERIC\n         BE    PROCESS3            YES\n         MVC   PACK(4),=C'0000'\n         SPACE 1\nPROCESS3 PACK  DOUBLE(8),PACK(4)\n         CVB   R15,DOUBLE          SECONDS TO BINARY\n         SR    R14,R14\n         ST    R15,HEXTIME         SAVE BINARY SECONDS\n         D     R14,=F'60'          CALCULATE MINUTES AND SECONDS\n         CVD   R15,DOUBLE          MINUTES\n         UNPK  WAITTIME+2(2),DOUBLE+6(2)\n         OI    WAITTIME+3,X'F0'\n         CVD   R14,DOUBLE          SECONDS\n         UNPK  WAITTIME+4(2),DOUBLE+6(2)\n         OI    WAITTIME+5,X'F0'\n         MVC   0(4,R8),=CL4' '\n         BCTR  R8,0\n         CLI   0(R8),C','\n         BNE   *+8\n         MVI   0(R8),C' '\n         B     PROCESS5\n         SPACE 1\nPROCESS4 MVC   CSCSYSID(4),2(R8)\n         BCTR  R8,0\n         MVC   0(8,R8),=CL8' '\n         MVC   CSCCMD(1),COMMAND\n         MVC   CSCCMD+1(79),PARM\n         EJECT\nPROCESS5 LA    R1,WAITTIME\n         ST    R1,EXITLIST+24      PASS WAITTIME TO COMMANDS\n         MVC   TCOMMAND(1),COMMAND\n         TR    COMMAND,0(R10)      TRANSLATE COMMAND TO INDEX\n         SR    R9,R9\n         IC    R9,COMMAND          INSERT INDEX\n         SLL   R9,3                OFFSET INTO MODULE LIST\n         L     R15,16              CVT ADDR\n         L     R15,0(0,R15)        TCB WORDS\n         L     R14,12(0,R15)       CURRENT ASCB\n         MVC   ASID(2),36(R14)     SAVE ASID\n         L     R14,4(0,R15)        CURRENT TCB\n         L     R14,12(0,R14)       TIOT\n         MVC   USERID(7),0(R14)    USERID (JOBNAME)\n         UNPK  TASID(5),ASID(3)\n         NC    TASID(4),=8X'0F'\n         TR    TASID(4),=C'0123456789ABCDEF'\n         MVI   TASID+4,C' '\n         L     R15,16              CVT ADDR\n         L     R15,196(0,R15)      SMCA\n         MVC   SYSTEM(4),16(R15)   SYSTEM ID\n         TIME  DEC\n         ST    R1,DOUBLE\n         UNPK  YEAR(3),DOUBLE+1(2)\n         MVI   YEAR+2,C'.'\n         UNPK  DAY(3),DOUBLE+2(2)\n         OI    DAY+2,X'F0'\n         ST    R0,DOUBLE\n         UNPK  HOUR(3),DOUBLE(2)\n         MVI   HOUR+2,C'.'\n         UNPK  MINUTE(3),DOUBLE+1(2)\n         MVI   MINUTE+2,C' '\n         MVI   68(R4),C' '\n         MVC   69(11,R4),68(R4)\n         MVC   0(68,R4),HEADER\n         LA    R4,80(0,R4)\n         CLI   CSCSYSID,X'00'      CROSS-SYSTEM REQUEST\n         BNE   CSCPROC             YES\n         LTR   R9,R9               COMMAND IN LIST\n         BNZ   LOAD                YES, GO PROCESS\n         MVC   0(80,R4),=CL80'COMMAND NOT FOUND'\n         LA    R4,80(0,R4)\n         MVI   0(R4),X'FF'\n         B     CMDGET\n         EJECT\nCSCPROC  LA    R1,10               RESET TIMER COUNT\n         MVI   0(R4),C' '\n         MVC   1(79,R4),0(R4)\n         SPACE 1\nCSCPROC0 ST    R1,RESETCNT         RESET TIMER COUNT\n         BAL   R10,CSCREAD         READ CSC DATA\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,4(0,R1)          CURRENT TCB\n         L     R1,12(0,R1)         TIOT\n         CLC   0(8,R11),=8X'00'    CSC BUSY\n         BE    CSCPROC4            NO\n         CLI   4(R11),X'FF'        TSO ID CROSS-SYSTEM COMMAND\n         BNE   CSCPROC1            NO\n         CLC   5(3,R11),4(R1)      TSO ID MATCH\n         BE    CSCPROC2            YES\n         SPACE 1\nCSCPROC1 STIMER  WAIT,DINTVL=CSCWAIT\n         L     R1,RESETCNT         RESET COUNT\n         BCT   R1,CSCPROC0         TRY AGAIN\n         MVC   TIMESID(4),4(R11)\n         MVC   0(48,R4),TIMEMSG    TIMEOUT MSG\n         LA    R4,80(0,R4)\n         MVI   0(R4),X'FF'\n         BAL   R10,CSCCLEAR        FORCE CLEAR\n         B     CMDGET\n         SPACE 3\nCSCPROC2 LH    R9,10(0,R11)        WTO COUNT\n         LA    R11,148(0,R11)      1ST WTO ADDR\n         SPACE 1\nCSCPROC3 MVI   0(R4),C' '\n         MVC   1(79,R4),0(R4)\n         LA    R1,4(0,R11)         MSG ADDR\n         LH    R14,0(0,R11)        MSG LENGTH\n         SH    R14,=H'5'\n         EX    R14,CSCMVE\n         LH    R1,0(0,R11)         WTO LENGTH\n         LA    R11,0(R1,R11)       NEXT MSG\n         LA    R4,80(0,R4)\n         BCT   R9,CSCPROC3\n         BAL   R10,CSCCLEAR        RESET DATASET TO ALLOW REUSE\n         MVI   0(R4),X'FF'\n         B     CMDGET\n         SPACE 1\nCSCMVE   MVC   0(0,R4),0(R1)\n         EJECT\nCSCPROC4 MVI   0(R11),X'FF'        TSO SENDER\n         MVC   1(3,R11),4(R1)      TSO ID\n         XC    8(2,R11),8(R11)\n         MVC   12(4,R11),=F'148'   COMMAND RECORD LENGTH\n         MVC   16(78,R11),CSCCMD   MOVE COMMAND TO RECORD\n         XC    96(52,R11),96(R11)\n         MVC   4(4,R11),CSCSYSID\n         BAL   R10,CSCWRITE        REWRITE RECORD\n         MVC   RECVMSG+20(1),16(R11)\n         MVC   0(44,R4),RECVMSG\n         LA    R4,80(0,R4)\n         MVI   0(R4),X'FF'\n         L     R4,=A(CMDOUTPT)     OUTPUT ADDR\n         STM   R2,R12,SCRSAVE\n         BAL   R7,SCREEN\n         LM    R2,R12,SCRSAVE\n         CLI   RETCODE,C'Z'        ATTENTION\n         BE    CMDINIT             YES\n         B     CSCPROC1\n         EJECT\nCSCREAD  MVC   CSCDATA+62(2),=H'19069'  FULL BLOCKSIZE\n         OPEN  (CSCDATA)\n         L     R8,=A(RECORD)\n         GET   CSCDATA,(R8)\n         L     R11,=A(RECORD)\n         CLC   0(12,R11),=XL12'00'  ZERO REQUEST\n         BE    CSCREAD1            NO\n         CLC   0(96,R11),PREVREC   SAME REQUEST\n         BE    CSCREAD2            NO\n         SPACE 1\nCSCREAD1 MVC   PREVREC(96),0(R11)  SAVE NEW REQUEST\n         MVC   RESETCNT(4),=F'10'  SET NEW COUNT\n         SPACE 1\nCSCREAD2 CLOSE (CSCDATA)\n         BR    R10\n         EJECT\nCSCCLEAR L     R1,=A(RECORD)\n         XC    0(16,R1),0(R1)\n         SPACE 1\nCSCWRITE L     R1,=A(RECORD)\n         L     R1,12(0,R1)         RECORD LENGTH\n         LTR   R1,R1               ZERO LENGTH\n         BNZ   CSCWRIT1            NO\n         LA    R1,16               MINIMUM LENGTH\n         SPACE 1\nCSCWRIT1 STH   R1,CSCDATA+62       SAVE LENGTH FOR WRITE\n         LR    R2,R1\n         OPEN  (CSCDATA,(OUTPUT))\n         L     R8,=A(RECORD)\n         PUT   CSCDATA,(R8)\n         CLOSE (CSCDATA)\n         BR    R10\n         EJECT\nLOAD     LA    R9,0(R11,R9)        MODULE NAME ADDR\n         MVC   LOADNAME(8),0(R9)\n         LOAD  EPLOC=LOADNAME      LOAD COMMAND MODULE\n         ST    R0,ENTRY            SAVE ENTRY ADDR\n         LR    R5,R0               MODULE ADDR\n         LA    R6,0(0,R1)          MODULE DOUBLEWORDS\n         SLL   R6,3                MODULE LENGTH\n         ST    R6,LENGTH           SAVE MODULE LENGTH\n         SH    R6,=H'6'            ADJUST SCAN LENGTH\n         SPACE  1\nLOAD1    CLC   0(6,R5),=X'430020280A23'  WTO INSTRUCTIONS\n         BE    LOAD3               YES\n         SPACE 1\nLOAD2    LA    R5,2(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCT   R6,LOAD1            PROCESS NEXT\n         B     LOAD4\n         SPACE 1\nLOAD3    MVC   0(6,R5),=X'58F0200005EF'\n         B     LOAD2\n         SPACE 1\nLOAD4    L     R5,ENTRY            MODULE ADDR\n         L     R6,LENGTH           MODULE LENGTH\n         SH    R6,=H'4'            ADJUST SCAN LENGTH\n         SPACE  1\nLOAD5    CLC   0(2,R5),=X'F100'    SUBPOOL 241\n         BE    LOAD7               YES\n         SPACE 1\nLOAD6    LA    R5,4(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCTR  R6,0\n         BCTR  R6,0\n         BCT   R6,LOAD5            PROCESS NEXT\n         B     EXECUTE             END OF MODULE\n         SPACE 1\nLOAD7    MVC   0(2,R5),=H'0'       SET SUBPOOL ZERO\n         B     EXECUTE             END OF MODULE\n         EJECT\nDIREXEC  ST    R14,DIRSAVE\n         TPUT  SCRBEGIN,8,FULLSCR\n         L     R14,DIRSAVE\n         MVC   DIREPLOC(8),1(R14)\n         L     R1,DIRCPPL\n         CLI   0(R14),C'.'         COMMAND PROCESSOR\n         BE    *+8                 YES\n         LA    R1,DIRPARM\n         STM   R14,R12,DIRSAVE\n         LINK  EPLOC=DIREPLOC\n         BALR  R15,0\n         USING *,R15\n         LM    R14,R12,DIRSAVE\n         DROP  R15\n         B     CMDINIT\n         EJECT\nSCREEN   LA    R5,22               MAX OUTPUT LINES\n         LA    R6,SCRLIN02         OUTPUT BEGIN LINE\n         LA    R8,SCRLIN02\n         LA    R9,1760\n         SR    R10,R10\n         SR    R11,R11\n         MVCL  R8,R10              CLEAR SCREEN AREA\n         SPACE 1\nSCREEN1  MVC   0(80,R6),0(R4)      SET OUTPUT LINE\n         L     R1,=A(SCRPLUS)\n         MVI   0(R1),C' '\n         LA    R4,80(0,R4)         NEXT INPUT LINE\n         LA    R6,80(0,R6)         NEXT OUTPUT LINE\n         CLI   0(R4),X'FF'         END OF INPUT\n         BE    SCREEN2             YES, GO WRITE\n         BCT   R5,SCREEN1\n         L     R1,=A(SCRPLUS)\n         MVI   0(R1),C'+'\n         SPACE 1\nSCREEN2  LA    R14,SCRLIN02\n         TR    0(80,R14),TABLE\n         TR    80(80,R14),TABLE\n         TR    160(80,R14),TABLE\n         TR    240(80,R14),TABLE\n         TR    320(80,R14),TABLE\n         TR    400(80,R14),TABLE\n         TR    480(80,R14),TABLE\n         TR    560(80,R14),TABLE\n         TR    640(80,R14),TABLE\n         TR    720(80,R14),TABLE\n         TR    800(80,R14),TABLE\n         TR    880(80,R14),TABLE\n         TR    960(80,R14),TABLE\n         TR    1040(80,R14),TABLE\n         TR    1120(80,R14),TABLE\n         TR    1200(80,R14),TABLE\n         TR    1280(80,R14),TABLE\n         TR    1360(80,R14),TABLE\n         TR    1440(80,R14),TABLE\n         TR    1520(80,R14),TABLE\n         TR    1600(80,R14),TABLE\n         TR    1680(80,R14),TABLE\n         EJECT\n         LA    R1,SCRBEGIN\n         TPUT  (1),SCRLEN,FULLSCR\n         CLI   REFRSW,X'FF'        REFRESH IN PROGRESS\n         BCR   8,R7                YES\n         CLC   REFRESH(8),=CL8'00000000'  REFRESH REQUESTED\n         BE    *+8                 NO\n         MVI   REFRSW,X'FF'\n         MVC   SCRREPLY(63),=CL63' '\n         LA    R1,SCRREPLY         REPLY ADDR\n         TGET  (1),63,ASIS         GET REPLY\n         OC    SCRREPLY+6(57),=CL63' '  CAPS\n         CH    R15,=H'12'          INPUT LARGER THAN BUFFER\n         BNE   SCREEN3             NO\n         TCLEARQ INPUT\n         SPACE 1\nSCREEN3  CLI   SCRREPLY,X'6C'      ATTENTION (PA1)              FNB001\n         BCR   8,R7                YES\n         CLI   SCRREPLY,X'7E'      ATTN KEY                     FNB001\n         BCR   8,R7                YES                          FNB001\n         CLI   SCRREPLY,X'6D'      REPEAT (CLEAR)\n         BE    REPEAT              YES\n         CLI   SCRREPLY,X'6E'      REPEAT (PA2)                 FNB001\n         BE    REPEAT              YES\n         CLI   SCRREPLY,X'7D'      ENTER KEY\n         BNE   PFKCHK              NO, CHECK PFK ENTRY\n         SPACE 1\nSCREEN3A LA    R14,SCRREPLY+6\n         MVC   SCRLSREP(57),SCRREPLY+6\n         CLI   SCRREPLY+6,C'Z'     TERMINATE\n         BE    EXIT                YES\n         CLC   SCRREPLY+6(3),=C'END'  TERMINATE\n         BE    EXIT                YES\n         CLI   SCRREPLY+6,C'-'     SCROLL BACK\n         BE    SCROLL              YES\n         CLI   SCRREPLY+6,C'+'     SCROLL FORWARD\n         BE    SCROLL              YES\n         CLI   SCRREPLY+6,C'='     SCROLL FIND EQ\n         BE    SCROLL2             YES\n         CLI   SCRREPLY+6,C' '     NEXT SCREEN REQUEST\n         BCR   7,R7                NO\n         SPACE 1\nSCREEN3B LA    R8,SCRLIN02\n         LA    R9,1760\n         SR    R10,R10\n         SR    R11,R11\n         MVCL  R8,R10              CLEAR SCREEN AREA\n         CLI   0(R4),X'FF'         ANY MORE OUTPUT\n         BNE   SCREEN              YES\n         MVC   SCRLIN02(80),=CL80'****   END  OF  OUTPUT   ****'\n         B     SCREEN2\n         SPACE 1\nSCREEN4  LA    R15,SCRREPLY(R1)\n         LH    R2,=H'63'\n         SR    R2,R1\n         EX    R2,CMDSCCLR         CLEAR EXCESS PARM\n         BR    R7\n         SPACE 1\nCMDSCCLR MVC   0(0,R15),=CL63' '\n         EJECT\nSCROLL   MVC   DOUBLE(3),=C'000'\n         MVZ   DOUBLE(3),SCRREPLY+7\n         CLC   DOUBLE(3),=C'000'   NUMERIC\n         BNE   SCROLL1\n         PACK  DOUBLE(8),SCRREPLY+7(3)\n         CVB   R14,DOUBLE\n         B     SCROLL2\n         SPACE 1\nSCROLL1  L     R14,=F'99999999'\n         SPACE 1\nSCROLL2  LA    R11,SCROLLEQ\n         CLI   SCRREPLY+6,C'='     SCROLL FIND EQ\n         BE    SCROLLF             YES\n         CLI   SCRREPLY+6,C'-'     SCROLL UP\n         BE    SCROLLU             YES\n         CLI   SCRREPLY+6,C'+'     SCROLL DOWN\n         BE    SCROLLD             YES\n         BR    R7\n         SPACE 1\nSCROLLU  LA    R14,22(0,R14)       ADJUST TO TOP OF PAGE\n         SPACE 1\nSCROLLU1 C     R4,=A(CMDOUTPT)     TOP\n         BE    SCREEN3B\n         S     R4,=F'80'\n         BCT   R14,SCROLLU1\n         B     SCREEN3B\n         SPACE 1\nSCROLLD  CLI   0(R4),X'FF'         BOTTOM\n         BE    SCROLLD1\n         A     R4,=F'80'\n         BCT   R14,SCROLLD\n         SPACE 1\nSCROLLD1 LA    R14,22\n         SPACE 1\nSCROLLD2 C     R4,=A(CMDOUTPT)     TOP\n         BE    SCREEN3B\n         S     R4,=F'80'\n         BCT   R14,SCROLLD2\n         B     SCREEN3B\n         EJECT\nSCROLLF  LA    R14,21\n         SPACE 1\nSCROLLF1 C     R4,=A(CMDOUTPT)     TOP\n         BE    SCROLLF2\n         S     R4,=F'80'\n         BCT   R14,SCROLLF1\n         SPACE 1\nSCROLLF2 SR    R14,R14\n         LA    R10,SCRREPLY+7\n         LA    R9,55\n         SPACE 1\nSCROLLF3 BCT   R9,*+6\n         BR    R7\n         LA    R10,1(0,R10)        NEXT SEARCH BYTE\n         LA    R14,1(0,R14)\n         CLC   0(1,R10),SCRREPLY+7  DELIMITER FOUND\n         BNE   SCROLLF3\n         BCTR  R14,0\n         BCTR  R14,0\n         SPACE 1\nSCROLLF4 CLI   0(R4),X'FF'         BOTTOM\n         BNE   SCROLLF5\n         S     R4,=F'80'\n         B     SCREEN3B\n         SPACE 1\nSCROLLF5 LA    R8,0(0,R4)          BEGIN OF OUTPUT LINE\n         LA    R9,80\n         SPACE 1\nSCROLLF6 EX    R14,SCROLLCL        COMPARE\n         EX    0,0(0,R11)          BR ON CONDITION\n         LA    R8,1(0,R8)\n         BCT   R9,SCROLLF6         CHECK NEXT\n         LA    R4,80(0,R4)\n         B     SCROLLF4\n         SPACE 1\nSCROLLCL CLC   0(0,R8),SCRREPLY+8\nSCROLLEQ BC    8,SCREEN3B\n         EJECT\nPFKCHK   L     R2,=A(PFKTAB)\n         SPACE 1\nPFKCHK1  CLC   SCRREPLY(1),0(R2)   PFK MATCH\n         BE    PFKCHK2\n         CLI   0(R2),X'00'         END OF PFK TABLE\n         BE    ATENTKEY            YES, I DONT KNOW\n         LA    R2,4(0,R2)          NEXT ENTRY\n         B     PFKCHK1\n         SPACE 1\nPFKCHK2  LA    R14,SCRREPLY+6\n         CLI   0(R2),X'F1'         PFK 1\n         BE    PFKCHK3             YES, CHANGE OR DISPLAY PFK\n         L     R2,0(0,R2)          PFK DEFINITION\n         MVC   SCRREPLY+6(57),13(R2)                            FNB001\n         MVC   SCRLSREP(57),13(R2)                              FNB001\n         BR    R7\n         SPACE 1\nPFKCHK3  CLI   SCRREPLY+6,C' '     DISPLAY PFK\n         BNE   PFKCHK5             NO, CHANGE REQUEST\n         SPACE 1\nPFKCHK4  LR    R8,R7\n         L     R4,=A(CMDOUTPT)\n         LA    R5,1760\n         L     R6,=A(PFKTEXT)\n         LA    R7,1760\n         MVCL  R4,R6               PFK LIST\n         LR    R7,R8\n         L     R4,=A(CMDOUTPT)\n         B     SCREEN              DISPLAY PFK ASSIGNMENTS\n         SPACE 1\nPFKCHK5  MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),SCRREPLY+6\n         CLC   DOUBLE(2),=C'00'    NUMERIC PFK\n         BNE   PFKCHK4             NO, DISPLAY\n         CLI   SCRREPLY+8,C'='     VALID FORMAT\n         BNE   PFKCHK4             NO, DISPLAY\n         PACK  DOUBLE(8),SCRREPLY+6(2)\n         CVB   R4,DOUBLE\n         CH    R4,=H'2'            MIN PFK NUMBER\n         BL    PFKCHK4             NO, DISPLAY\n         CH    R4,=H'24'           MAX PFK NUMBER              @FNB0001\n         BH    PFKCHK4             NO, DISPLAY\n         SLL   R4,2                MULT BY 4\n         L     R15,=A(PFKTAB-4)\n         LA    R4,0(R15,R4)        TABLE SLOT ADDR\n         L     R4,0(0,R4)          PFK DEFINITION ADDR\n         MVC   13(50,R4),SCRREPLY+9  SAVE NEW PFK ASSIGNMENT    FNB001\n         B     PFKCHK4\n         EJECT\nATENTKEY LA    R14,SCRREPLY+6\n         MVI   RETCODE,C'Z'        INDICATE ATTENTION\n         XC    SCRREPLY(63),SCRREPLY\n         BR    R7\n         SPACE 3\nREPEAT   LA    R14,SCRREPLY+6\n         MVC   SCRREPLY+6(57),SCRLSREP  LAST COMMAND\n         MVI   SCRREPLY,X'00'\n         B     SCREEN3A\n         SPACE 3\nATENTION BALR  R15,0\n         USING *,R15\n         MVI   RETCODE,C'Z'        INDICATE ATTENTION\n         BR    R14\n         DROP  R15\nRETCODE  DC    F'0'\n         EJECT\nEXECUTE  LA    R2,EXITLIST         PARM LIST\n         MVC   EXITLIST+16(4),=A(CMDOUTPT+80)\n         L     R15,ENTRY           COMMAND ENTRY\n         BALR  R14,R15             BRANCH\n         SPACE 3\n         BALR  R15,0\n         USING *,R15\n         L     R3,=A(CMDSBTSO)     LOAD ORIGINAL BASE\n         L     R13,=A(SAVE)\n         DELETE  EPLOC=LOADNAME    DELETE MODULE\n         B     CMDGET\n         DROP  R15\n         SPACE 3\nEXIT     TPUT  SCRBEGIN,8,FULLSCR\n         STATTN  LINES=0,TENS=0,INPUT=0\n         L     R0,SIZEGETM\n         L     R1,GETMADR\n         FREEMAIN  R,LV=(0),A=(1)\n         L     R13,SAVE+4\n         RETURN  (14,12),RC=0\n         EJECT\n         USING TPUT,R15\nTPUT     ST    R14,8(0,R2)         SAVE RETURN ADDR\n         ST    R4,12(0,R2)         SAVE WORK REG\n         L     R4,16(0,R2)         LOAD OUTPUT ADDR\n         LTR   R0,R0               NORMAL ENTRY\n         BNZ   TPUT0               NO, QUEUE COMMAND\n         C     R4,=A(CMDOUTEN)     END OF OUTPUT\n         BCR   8,R14               YES\n         MVI   0(R4),C' '\n         MVC   1(79,R4),0(R4)\n         LH    R14,0(0,R1)         ORIG MSG LENGTH\n         SH    R14,=H'5'           NEW MSG LENGTH\n         EX    R14,TPUTMVE         MSG TEXT ADDR\n         LA    R4,80(0,R4)         ADD IN MSG LENGTH\n         MVI   0(R4),X'FF'\n         ST    R4,16(0,R2)         SAVE OUTPUT ADDR\n         L     R14,8(0,R2)         LOAD RETURN ADDR\n         L     R4,12(0,R2)         LOAD WORK REG\n         BR    R14                 RETURN\n         SPACE 1\nTPUTMVE  MVC   0(0,R4),4(R1)\n         SPACE 1\nTPUT0    LR    R14,R0\n         SPACE 1\nTPUT1    L     R0,CMDOUTCT         LOAD CURRENT RECORD COUNT\n         A     R0,=F'1'            ADD 1\n         ST    R0,CMDOUTCT         SAVE NEW RECORD COUNT\n         C     R0,CMDOUTBG         EQUAL TO 1ST REC TO PRINT\n         BL    TPUT2               NOT YET\n         MVC   0(80,R4),0(R1)\n         LA    R4,80(0,R4)         ADD IN MSG LENGTH\n         C     R4,=A(CMDOUTEN)     END OF OUTPUT\n         BE    TPUT3               YES\n         SPACE 1\nTPUT2    LA    R1,80(0,R1)\n         BCT   R14,TPUT1\n         MVI   0(R4),X'FF'\n         SPACE 1\nTPUT3    ST    R4,16(0,R2)         SAVE OUTPUT ADDR\n         SR    R0,R0\n         C     R4,=A(CMDOUTEN)     END OF OUTPUT\n         BL    *+8                 NO\n         LA    R0,1                INDICATE END\n         L     R14,8(0,R2)         LOAD RETURN ADDR\n         L     R4,12(0,R2)         LOAD WORK REG\n         BR    R14                 RETURN\nCMDOUTCT DC    F'0'                CURRENT COUNT\nCMDOUTBG DC    F'0'                1ST RECORD TO PRINT\n         DROP  R15\n         EJECT\n         LTORG\n         SPACE 3\nSAVE     DS    18F\nDIRSAVE  DS    18F\nSCRSAVE  DS    12F\n         DS    0D\nATTNCHAR DC    CL8'#'\nDOUBLE   DS    2F\nDIREPLOC DC    CL8' '\nREFRESH  DC    CL8'00000000'\nREFRCNT  DC    F'20'\n         DS    0D\nLOADNAME DC    CL8' '\nWAITTIME DS    2F\nHEXTIME  DS    F\nSIZEGETM DC    F'16384'\nREFRSW   DS    F\nPACK     DS    F\nENTRY    DS    F\nLENGTH   DS    F\nCOMMAND  DC    F'0'\nPARM     DC    CL80' '\nCSCSYSID DC    F'0'\nCSCCMD   DC    CL80' '\n         SPACE 1\nDIRCPPL  DC    F'0'\nDIRPARM  DC    H'0'\n         DC    H'0'\n         SPACE 3\nHEADER   DS    0CL68\n         DC    C'---  <TSO>  CMDSBSYS (#'                       FNB001\nTCMDTYP  DC    C' '\nTCOMMAND DC    C' ',C')  '\nSYSTEM   DC    CL4' ',C'  '\nYEAR     DC    CL2' ',C' '\nDAY      DC    CL3' ',C'  '\nHOUR     DC    CL2' ',C' '\nMINUTE   DC    CL2' ',C'  '\nUSERID   DC    CL7' ',C'  '\nTASID    DC    CL4' ',C'  ---'\n         SPACE 3\nEXITLIST DC    A(TPUT)\nASID     DC    F'0'\n         DC    9F'0'\nGETMADR  DC    F'0'\n         DC    A(SCRREPLY+8)\n         EJECT\n         DS    0D\nTABLE    DC    64C' '\n         DC    C'           .<(+|&&          $*);\u00ac-/         '\n         DC    C',%_>?          :#@''=\" '\n     DC    C'ABCDEFGHI',CL7' ',C'JKLMNOPQR',CL8' ',C'STUVWXYZ',CL23' '\n     DC    C'ABCDEFGHI',CL7' ',C'JKLMNOPQR',CL8' ',C'STUVWXYZ',CL6' '\n         DC    C'0123456789',CL6' '\n         SPACE 3\n         DS    0D\nCOMTAB   DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'04000A030005000C09',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'0B000200010F0D0E06',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0700000800030010',XL23'00'\n         SPACE 3\nMODLIST  DC    CL8' '\n         DC    CL8'CSCSA03D'     1\n         DC    CL8'CSCSC03D'     2\n         DC    CL8'CSCSD03D'     3\n         DC    CL8'CSCSE03D'     4\n         DC    CL8'CSCSF03D'     5\n         DC    CL8'CSCSG03D'     6\n         DC    CL8'CSCSH03D'     7\n         DC    CL8'CSCSI03D'     8\n         DC    CL8'CSCSJ03D'     9\n         DC    CL8'CSCSK03D'     A\n         DC    CL8'CSCSL03D'     B\n         DC    CL8'CSCSM03D'     C\n         DC    CL8'CSCSP03D'     D\n         DC    CL8'CSCSQ03D'     E\n         DC    CL8'CSCSR03D'     F\n         DC    CL8'CSCSZ03D'    10\n         DC    CL8'        '\n         DC    CL8'        '\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCOMTAB2  DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'010203000000000000',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'040000000000050000',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0600000000000000',XL23'00'\n         SPACE 3\nMODLIST2 DC    CL8'        '   0\n         DC    CL8'CSCZA03D'   1\n         DC    CL8'CSCZB03D'   2\n         DC    CL8'CSCZC03D'   3\n         DC    CL8'CSCZJ03D'   4\n         DC    CL8'CSCZP03D'   5\n         DC    CL8'CSCZS03D'   6\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCOMTAB3  DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'010000000203000405',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'060000000007000000',XL8'00'                       @TEC\n*                 S T U V W X Y Z\n         DC    X'09000A0000000000',XL23'00'\n         SPACE 3\nMODLIST3 DC    CL8'        '\n         DC    CL8'CSCGA03D'  1\n         DC    CL8'CSCGE03D'  2\n         DC    CL8'CSCGF03D'  3\n         DC    CL8'CSCGH03D'  4\n         DC    CL8'CSCGI03D'  5\n         DC    CL8'CSCGJ03D'  6\n         DC    CL8'CSCGO03D'  7\n         DC    CL8'        '  8                                    @TEC\n         DC    CL8'CSCGS03D'  9\n         DC    CL8'CSCGU03D'  A\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCSCWAIT  DC    CL8'00000200'\nRESETCNT DC    F'10'\nPREVREC  DC    CL96' '\n         SPACE 5\nRECVMSG  DS    0CL44\n         DC    CL44'CMD SUBSYS -   CSC #X COMMAND ACCEPTED'\n         SPACE 3\nTIMEMSG  DS    0CL48\n         DC    CL43'CMD SUBSYS -   CSC TIMEOUT, CMD PENDING ON '\nTIMESID  DC    CL4' ',C' '\n         EJECT\nCSCDATA  DCB   DDNAME=CSCDATA,DSORG=PS,RECFM=U,BLKSIZE=19069,          X\n               MACRF=(GM,PM)\n         EJECT\nSCRREPLY DC    CL63' ',CL17' '\nSCRBEGIN DS    0D\nSCRLIN01 DC    X'C31140403C404000'\n         DC    C'CMD SUBSYSTEM -'\n         DC    X'1DC8'\nSCRLSREP DC    CL63' '\n         DC    X'1DF0'\nSCRLIN02 DC    CL80' '\nSCRLIN03 DC    CL80' '\nSCRLIN04 DC    CL80' '\nSCRLIN05 DC    CL80' '\nSCRLIN06 DC    CL80' '\nSCRLIN07 DC    CL80' '\nSCRLIN08 DC    CL80' '\nSCRLIN09 DC    CL80' '\nSCRLIN10 DC    CL80' '\nSCRLIN11 DC    CL80' '\nSCRLIN12 DC    CL80' '\nSCRLIN13 DC    CL80' '\nSCRLIN14 DC    CL80' '\nSCRLIN15 DC    CL80' '\nSCRLIN16 DC    CL80' '\nSCRLIN17 DC    CL80' '\nSCRLIN18 DC    CL80' '\nSCRLIN19 DC    CL80' '\nSCRLIN20 DC    CL80' '\nSCRLIN21 DC    CL80' '\nSCRLIN22 DC    CL80' '\nSCRLIN23 DC    CL80' '\nSCRLIN24 DC    C'REPLY -'\n         DC    X'1DC8115DF71DF0'\nSCRPLUS  DC    C' '\n         DC    X'115CF813'\nSCRLEN   EQU   *-SCRBEGIN\n         EJECT\nPFKTAB   DC    X'F1',AL3(PFK01)\n         DC    X'F2',AL3(PFK02)\n         DC    X'F3',AL3(PFK03)\n         DC    X'F4',AL3(PFK04)\n         DC    X'F5',AL3(PFK05)\n         DC    X'F6',AL3(PFK06)\n         DC    X'F7',AL3(PFK07)\n         DC    X'F8',AL3(PFK08)\n         DC    X'F9',AL3(PFK09)\n         DC    X'7A',AL3(PFK10)\n         DC    X'7B',AL3(PFK11)\n         DC    X'7C',AL3(PFK12)\n         DC    X'C1',AL3(PFK13)                                @FNB0001\n         DC    X'C2',AL3(PFK14)                                @FNB0001\n         DC    X'C3',AL3(PFK15)                                @FNB0001\n         DC    X'C4',AL3(PFK16)                                @FNB0001\n         DC    X'C5',AL3(PFK17)                                @FNB0001\n         DC    X'C6',AL3(PFK18)                                @FNB0001\n         DC    X'C7',AL3(PFK19)                                @FNB0001\n         DC    X'C8',AL3(PFK20)                                @FNB0001\n         DC    X'C9',AL3(PFK21)                                @FNB0001\n         DC    X'4A',AL3(PFK22)                                @FNB0001\n         DC    X'4B',AL3(PFK23)                                @FNB0001\n         DC    X'4C',AL3(PFK24)                                @FNB0001\n         DC    X'00'\n         EJECT\nOPENTEXT DC    CL80'#####   CMD  SUB-SYSTEM  MONITOR   #####'\n         DC    CL80' '\n         DC    CL80' '\n DC CL80'--->  ENTER  # CMDS,  ## CMDS,  OR  GRAPHIC MONITOR CMDS'\n         DC    CL80'             BEGINNING WHERE CURSOR IS POSITIONED'\n         DC    CL80' '\n DC CL80'--->  ENTER  NN/XX  TO CHANGE MONITOR REFRESH INTERVAL'\n         DC    CL80' '\n         DC    CL80'             WHERE  NN  =   NUMBER OF SECONDS'\n         DC    CL80'                    XX  =   NUMBER OF INTERVALS'\n         DC    CL80' '\n DC CL80'--->  ENTER  ''.XXXX''  TO CALL COMMAND PROCESSOR  XXXX'\n         DC    CL80'             ''@XXXX''  TO CALL PROGRAM  XXXX'\n         DC    CL80' '\n         DC    CL80'--->  ENTER  ''Z''  OR  ''END''   TO TERMINATE'\n         DC    CL80' '\n         DC    CL80'--->  PRESS  PA1 TO STOP AUTOMATIC REFRESH'\n         DC    CL80'--->  PRESS  PA2 TO REPEAT THE LAST COMMAND'\n         DC    CL80'--->  PRESS  PFK 1  TO DISPLAY PFK ASSIGNMENTS'\n         DC    CL80' '\n DC CL80'--->  ENTER  ''H''  TO OBTAIN HELP FOR GRAPHIC MONITOR CMDS'\n         DC    CL80' '\n         SPACE 5\nPFKTEXT  DC    CL80'#####        PFK  ASSIGNMENTS        #####'\n         DC    CL80' '\n         DC    CL80' '\nPFK01    DC    CL80'PFK1     =   DISPLAY PFK ASSIGNMENTS'      @FNB0001\nPFK02    DC    CL80'PFK2     =   H'                            @FNB0001\nPFK03    DC    CL80'PFK3     =   E'                            @FNB0001\nPFK04    DC    CL80'PFK4     =   F'                            @FNB0001\nPFK05    DC    CL80'PFK5     =   J'                            @FNB0001\nPFK06    DC    CL80'PFK6     =   S'                            @FNB0001\nPFK07    DC    CL80'PFK7     =   #J'                           @FNB0001\nPFK08    DC    CL80'PFK8     =   #O'                           @FNB0001\nPFK09    DC    CL80'PFK9     =   #OX'                          @FNB0001\nPFK10    DC    CL80'PFK10    =   #Q'                           @FNB0001\nPFK11    DC    CL80'PFK11    =   ##SD'                         @FNB0001\nPFK12    DC    CL80'PFK12    =   05/50'                        @FNB0001\nPFK13    DC    CL80'PFK13    =   #A'                           @FNB0001\nPFK14    DC    CL80'PFK14    =   #R'                           @FNB0001\nPFK15    DC    CL80'PFK15    =   ##P,T=5'                      @FNB0001\nPFK16    DC    CL80'PFK16    =   ##A,T=5'                      @FNB0001\nPFK17    DC    CL80'PFK17    =   #N*'                          @FNB0001\nPFK18    DC    CL80'PFK18    =   #P'                           @FNB0001\nPFK19    DC    CL80'PFK19    =   A'                            @FNB0001\nPFK20    DC    CL80'PFK20    =   U'                            @FNB0001\nPFK21    DC    CL80'PFK21    =   ##AT,T=5'                     @FNB0001\nPFK22    DC    CL80'PFK22    =   #F'                           @FNB0001\nPFK23    DC    CL80'PFK23    =   #I'                           @FNB0001\nPFK24    DC    CL80'PFK24    =   01/50'                        @FNB0001\n         DC    CL80' '\n         DC    CL80' '\n         DC    CL80' '\n DC CL80'--->  ENTER  NN=XXXX  AND PRESS PFK 1  TO CHANGE PFK FUNCTION'\n         DC    CL80' '\n DC CL80'             WHERE  NN -   IS THE PFK NUMBER  02 - 24' FNB001\n DC CL80'                    XXXX - IS THE COMMAND TO BE ASSIGNED'\n         SPACE 5\nRECORD   DS    CL19069\n         SPACE 5\nCMDOUTPT DS    4000CL80\nCMDOUTEN DC    CL80' '\n         DC    30C'-',CL20'  OUTPUT TRUNCATED  ',30C'-'\n         DC    X'FF'\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CMDTSO\n         TITLE 'CMDTSO -   TSO DRIVER MODULE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CMDTSO -         TSO DRIVER MODULE                        ***\n***                                                                 ***\n***       VERSION -        1.1                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        12/01/79                                 ***\n***                        05/31/86  GLA-BFG CORRECT DEPENDENCY     ***\n***                                  ON R4 BEING PRESERVED ACROSS   ***\n***                                  MODULE CALL                    ***\n***                                                                 ***\n***                                                                 ***\n***  THIS MODULE SEARCHES THE CODE IT IS LOADING (#Q, #N, ETC.) TO  ***\n***     SEE IF SUBPOOL 241 IS BEING REQUESTED FOR THE GETMAIN.  THIS***\n***     MODULE DOES THIS BY SEARCHING FOR X'F100' IN THE CODE.      ***\n***     IF THE EXECUTION IS TAKING PLACE VIA THE SYSTEM CONSOLE,    ***\n***     THEN SUBPOOL 241 IS ALLOWED.  IF THE EXECUTION IS TAKING    ***\n***     PLACE WITHIN TSO, THEN THE X'F100' IS CHANGED TO X'0000'    ***\n***     (FOR SUBPOOL 0) PRIOR TO THE ACTUAL EXECUTION OF THE CODE.  ***\n***     IF THE PROPER CODING CONVENTIONS ARE NOT FOLLOWED IN THE    ***\n***     SUB-MODULES (#Q, #N, ETC.), THIS CHECK MAY NOT BE SUCCESS-  ***\n***     FUL, AND AN ABEND B0A WILL TAKE PLACE.\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nCMDTSO   CSECT\n         SAVE  (14,12)\n         LR    R3,R15\n         USING CMDTSO,R3\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         L     R1,0(0,R1)          PARM ADDR\n         LH    R15,0(0,R1)         PARM LENGTH\n         BCTR  R15,0               SUBTRACT MIN LENGTH\n         LTR   R15,R15             ANY SUBPARMS\n         BM    EXIT                NO PARMS AT ALL\n         LA    R10,COMTAB          # COMMAND TABLE\n         LA    R11,MODLIST         # COMMAND MODULE LIST\n         CLI   2(R1),C'#'          ## COMMAND\n         BNE   PLOOP0              NO\n         LA    R1,1(0,R1)          ADJUST INPUT PARM\n         BCTR  R15,0               ADJUST LENGTH\n         LA    R10,COMTAB2         ## COMMAND TABLE\n         LA    R11,MODLIST2        ## COMMAND MODULE LIST\n         MVI   TCMDTYP,C'#'        INDICATE ##\n         SPACE 1\nPLOOP0   MVC   COMMAND(1),2(R1)    SAVE COMMAND\n         LA    R1,3(0,R1)          1ST BYTE OF SUBPARM\n         LTR   R15,R15             ANY SUBPARMS\n         BZ    PROCESS             NO\n         BCTR  R15,0\n         CH    R15,=H'79'          MAX PARM LENGTH\n         BNH   *+8                 NO\n         LH    R15,=H'79'          SET MAX\n         CLI   0(R1),C' '          1 BLANK ALLOWED\n         BNE   *+10\n         LA    R1,1(0,R1)\n         BCTR  R15,0\n         EX    R15,PARMMOVE        MOVE PARM\n         LA    R15,PARM-1\n         SPACE 1\nPLOOP    LA    R15,1(0,R15)\n         CLI   0(R15),C' '         END OF PARM\n         BE    PLOOP1              YES\n         CLI   0(R15),C'@'         COMMA REPLACE\n         BNE   PLOOP               NO, NEXT DIGIT\n         MVI   0(R15),C','         FORCE COMMA\n         B     PLOOP\n         SPACE 1\nPARMMOVE MVC   PARM(0),0(R1)\n         SPACE 1\nPLOOP1   LA    R15,PARM\n         EJECT\nPROCESS  ST    R15,EXITLIST+20     SAVE TEXT ADDR\n         MVC   WAITTIME(8),=8C'0'\n         XC    CSCSYSID(4),CSCSYSID\n         XC    HEXTIME(4),HEXTIME\n         LA    R1,PARM\n         LA    R8,PARM+74\n         SPACE 1\nPROCESS1 CLC   0(2,R8),=C'T='      TIME PARM\n         BE    PROCESS2            YES\n         CLC   0(2,R8),=C'S='      SYSID PARM\n         BE    PROCESS4            YES\n         BCTR  R8,0                PREVIOUS CHARACTER\n         CR    R1,R8               BACK TO BEGINNING\n         BNE   PROCESS1            NO, CHECK NEXT\n         B     PROCESS5            YES, NO T= FOUND\n         SPACE 1\nPROCESS2 LA    R1,PACK+3           TARGET FIELD\n         MVC   PACK(4),=C'0000'\n         CLI   4(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),4(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   3(R8),C' '          SENDING BYTE BLANK\n         BE    *+12                YES, DONT MOVE\n         MVC   0(1,R1),3(R8)       MOVE IT\n         BCTR  R1,0                NEXT TARGET BYTE\n         CLI   2(R8),C' '          SENDING BYTE BLANK\n         BE    *+10                YES, DONT MOVE\n         MVC   0(1,R1),2(R8)       MOVE IT\n         MVC   DOUBLE(4),=C'0000'\n         MVZ   DOUBLE(4),PACK\n         CLC   DOUBLE(4),=C'0000'  IS IT NUMERIC\n         BE    PROCESS3            YES\n         MVC   PACK(4),=C'0000'\n         SPACE 1\nPROCESS3 PACK  DOUBLE(8),PACK(4)\n         CVB   R15,DOUBLE          SECONDS TO BINARY\n         SR    R14,R14\n         ST    R15,HEXTIME         SAVE BINARY SECONDS\n         D     R14,=F'60'          CALCULATE MINUTES AND SECONDS\n         CVD   R15,DOUBLE          MINUTES\n         UNPK  WAITTIME+2(2),DOUBLE+6(2)\n         OI    WAITTIME+3,X'F0'\n         CVD   R14,DOUBLE          SECONDS\n         UNPK  WAITTIME+4(2),DOUBLE+6(2)\n         OI    WAITTIME+5,X'F0'\n         MVC   0(4,R8),=CL4' '\n         BCTR  R8,0\n         CLI   0(R8),C','\n         BNE   *+8\n         MVI   0(R8),C' '\n         B     PROCESS5\n         SPACE 1\nPROCESS4 MVC   CSCSYSID(4),2(R8)\n         BCTR  R8,0\n         MVC   0(8,R8),=CL8' '\n         MVC   CSCCMD(1),COMMAND\n         MVC   CSCCMD+1(79),PARM\n         EJECT\nPROCESS5 LA    R1,WAITTIME\n         ST    R1,EXITLIST+24      PASS WAITTIME TO COMMANDS\n         MVC   TCOMMAND(1),COMMAND\n         TR    COMMAND,0(R10)      TRANSLATE COMMAND TO INDEX\n         SR    R4,R4\n         IC    R4,COMMAND          INSERT INDEX\n         SLL   R4,3                OFFSET INTO MODULE LIST\n         L     R15,16              CVT ADDR\n         L     R15,0(0,R15)        TCB WORDS\n         L     R14,12(0,R15)       CURRENT ASCB\n         MVC   ASID(2),36(R14)     SAVE ASID\n         L     R14,4(0,R15)        CURRENT TCB\n         L     R14,12(0,R14)       TIOT\n         MVC   USERID(7),0(R14)    USERID (JOBNAME)\n         UNPK  TASID(5),ASID(3)\n         NC    TASID(4),=8X'0F'\n         TR    TASID(4),=C'0123456789ABCDEF'\n         MVI   TASID+4,C' '\n         L     R15,16              CVT ADDR\n         L     R15,196(0,R15)      SMCA\n         MVC   SYSTEM(4),16(R15)   SYSTEM ID\n         TIME  DEC\n         ST    R1,DOUBLE\n         UNPK  YEAR(3),DOUBLE+1(2)\n         MVI   YEAR+2,C'.'\n         UNPK  DAY(3),DOUBLE+2(2)\n         OI    DAY+2,X'F0'\n         ST    R0,DOUBLE\n         UNPK  HOUR(3),DOUBLE(2)\n         MVI   HOUR+2,C'.'\n         UNPK  MINUTE(3),DOUBLE+1(2)\n         MVI   MINUTE+2,C' '\n         CLI   CSCSYSID,X'00'      CROSS-SYSTEM REQUEST\n         BNE   CSCPROC             YES\n         L     R0,ASID\n         LA    R1,HEADER\n         ICM   R0,3,=H'68'\n         SVC   93\n         LTR   R4,R4               COMMAND IN LIST\n         BNZ   LOAD                YES, GO PROCESS\n         L     R0,ASID             LOAD ASID\n         LA    R1,=CL20'COMMAND NOT FOUND'\n         ICM   R0,3,=H'20'         INSERT MESSAGE LENGTH\n         SVC   93                  TPUT SVC\n         B     EXIT\n         EJECT\nCSCPROC  LA    R1,10               RESET TIMER COUNT\n         SPACE 1\nCSCPROC0 ST    R1,RESETCNT         RESET TIMER COUNT\n         BAL   R10,CSCREAD         READ CSC DATA\n         L     R1,16               CVT\n         L     R1,0(0,R1)          TCB WORDS\n         L     R1,4(0,R1)          CURRENT TCB\n         L     R1,12(0,R1)         TIOT\n         CLC   0(8,R11),=8X'00'    CSC BUSY\n         BE    CSCPROC4            NO\n         CLI   4(R11),X'FF'        TSO ID CROSS-SYSTEM COMMAND\n         BNE   CSCPROC1            NO\n         CLC   5(3,R11),4(R1)      TSO ID MATCH\n         BE    CSCPROC2            YES\n         SPACE 1\nCSCPROC1 STIMER WAIT,DINTVL=CSCWAIT\n         L     R1,RESETCNT         RESET COUNT\n         BCT   R1,CSCPROC0         TRY AGAIN\n         MVC   TIMESID(4),4(R11)\n         LA    R1,TIMEMSG          TIMEOUT MSG\n         L     R0,ASID             LOAD ASID\n         ICM   R0,3,=H'48'         INSERT MESSAGE LENGTH\n         SVC   93                  TPUT SVC\n         BAL   R10,CSCCLEAR        FORCE CLEAR\n         B     EXIT\n         SPACE 3\nCSCPROC2 LH    R9,10(0,R11)        WTO COUNT\n         LA    R11,148(0,R11)      1ST WTO ADDR\n         SPACE 1\nCSCPROC3 LA    R1,4(0,R11)         MSG ADDR\n         LH    R0,0(0,R11)         MSG LENGTH\n         SH    R0,=H'4'\n         ICM   R0,12,ASID          ASID\n         SVC   93\n         LH    R1,0(0,R11)         WTO LENGTH\n         LA    R11,0(R1,R11)       NEXT MSG\n         BCT   R9,CSCPROC3\n         BAL   R10,CSCCLEAR        RESET DATASET TO ALLOW REUSE\n         B     EXIT\n         EJECT\nCSCPROC4 MVI   0(R11),X'FF'        TSO SENDER\n         MVC   1(3,R11),4(R1)      TSO ID\n         XC    8(2,R11),8(R11)\n         MVC   12(4,R11),=F'148'   COMMAND RECORD LENGTH\n         MVC   16(78,R11),CSCCMD   MOVE COMMAND TO RECORD\n         XC    96(52,R11),96(R11)\n         MVC   4(4,R11),CSCSYSID\n         BAL   R10,CSCWRITE        REWRITE RECORD\n         MVC   RECVMSG+20(1),16(R11)\n         LA    R1,RECVMSG          TIMEOUT MSG\n         L     R0,ASID             LOAD ASID\n         ICM   R0,3,=H'44'         INSERT MESSAGE LENGTH\n         SVC   93                  TPUT SVC\n         B     CSCPROC1\n         EJECT\nCSCREAD  MVC   CSCDATA+62(2),=H'19069' FULL BLOCKSIZE\n         OPEN  (CSCDATA)\n         GET   CSCDATA,RECORD\n         LA    R11,RECORD\n         CLC   0(12,R11),=XL12'00' ZERO REQUEST\n         BE    CSCREAD1            NO\n         CLC   0(96,R11),PREVREC   SAME REQUEST\n         BE    CSCREAD2            NO\n         SPACE 1\nCSCREAD1 MVC   PREVREC(96),0(R11)  SAVE NEW REQUEST\n         MVC   RESETCNT(4),=F'10'  SET NEW COUNT\n         SPACE 1\nCSCREAD2 CLOSE (CSCDATA)\n         BR    R10\n         EJECT\nCSCCLEAR XC    RECORD(16),RECORD\n         SPACE 1\nCSCWRITE L     R1,RECORD+12        RECORD LENGTH\n         LTR   R1,R1               ZERO LENGTH\n         BNZ   CSCWRIT1            NO\n         LA    R1,16               MINIMUM LENGTH\n         SPACE 1\nCSCWRIT1 STH   R1,CSCDATA+62       SAVE LENGTH FOR WRITE\n         LR    R2,R1\n         OPEN  (CSCDATA,(OUTPUT))\n         PUT   CSCDATA,RECORD\n         CLOSE (CSCDATA)\n         BR    R10\n         EJECT\nLOAD     LA    R4,0(R11,R4)        MODULE NAME ADDR\n         ST    R4,EPNAME      SAVE ADDRESS OF NAME              GLA-BFG\n         LOAD  EPLOC=(R4)          LOAD COMMAND MODULE\n         ST    R0,ENTRY            SAVE ENTRY ADDR\n         LR    R5,R0               MODULE ADDR\n         LA    R6,0(0,R1)          MODULE DOUBLEWORDS\n         SLL   R6,3                MODULE LENGTH\n         ST    R6,LENGTH           SAVE MODULE LENGTH\n         SH    R6,=H'6'            ADJUST SCAN LENGTH\n         SPACE  1\nLOAD1    CLC   0(6,R5),=X'430020280A23'   WTO INSTRUCTIONS\n         BE    LOAD3               YES\n         SPACE 1\nLOAD2    LA    R5,2(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCT   R6,LOAD1            PROCESS NEXT\n         B     LOAD4\n         SPACE 1\nLOAD3    MVC   0(6,R5),=X'58F0200005EF'\n         B     LOAD2\n         SPACE 1\nLOAD4    L     R5,ENTRY            MODULE ADDR\n         L     R6,LENGTH           MODULE LENGTH\n         SH    R6,=H'4'            ADJUST SCAN LENGTH\n         SPACE  1\nLOAD5    CLC   0(2,R5),=X'F100'    SUBPOOL 241\n         BE    LOAD7               YES\n         SPACE 1\nLOAD6    LA    R5,4(0,R5)          NEXT INSTRUCTION\n         BCTR  R6,0\n         BCTR  R6,0\n         BCTR  R6,0\n         BCT   R6,LOAD5            PROCESS NEXT\n         B     EXECUTE             END OF MODULE\n         SPACE 1\nLOAD7    MVC   0(2,R5),=H'0'       SET SUBPOOL ZERO\n         EJECT\nEXECUTE  LA    R2,EXITLIST         PARM LIST\n         L     R15,ENTRY           COMMAND ENTRY\n         BALR  R14,R15             BRANCH\n         SPACE 3\n         BALR  R15,0\n         USING *,R15\n         L     R3,=A(CMDTSO)       LOAD ORIGINAL BASE\n         DROP  R15\n         L     R4,EPNAME      GET ADDRESS OF NAME               GLA-BFG\n         DELETE EPLOC=(R4)         DELETE MODULE                GLA-BFG\n         SPACE 3\nEXIT     L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         SPACE 3\n         USING TPUT,R15\nTPUT     LH    R0,0(0,R1)          ORIG MSG LENGTH\n         SH    R0,=H'4'            NEW MSG LENGTH\n         LA    R1,4(0,R1)          MSG TEXT ADDR\n         O     R0,ASID             ADD IN MSG LENGTH\n         ST    R14,8(0,R2)         SAVE RETURN ADDR\n         SVC   93                  TPUT SVC\n         L     R14,8(0,R2)         LOAD RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R15\n         EJECT\n         LTORG\n         SPACE 3\nSAVE     DS    18F\n         DS    0D\nDOUBLE   DS    2F\nWAITTIME DS    2F\nHEXTIME  DS    F\nPACK     DS    F\nENTRY    DS    F\nLENGTH   DS    F\nEPNAME   DS    F              ADDRESS OF MODULE NAME            GLA-BFG\nCOMMAND  DC    F'0'\nPARM     DC    CL80' '\nCSCSYSID DC    F'0'\nCSCCMD   DC    CL80' '\n         SPACE 3\nHEADER   DS    0CL68\n         DC    C'---  <TSO>  CMD SBSYS (#'\nTCMDTYP  DC    C' '\nTCOMMAND DC    C' ',C')  '\nSYSTEM   DC    CL4' ',C'  '\nYEAR     DC    CL2' ',C' '\nDAY      DC    CL3' ',C'  '\nHOUR     DC    CL2' ',C' '\nMINUTE   DC    CL2' ',C'  '\nUSERID   DC    CL7' ',C'  '\nTASID    DC    CL4' ',C'  ---'\n         SPACE 3\nEXITLIST DC    A(TPUT)\nASID     DC    F'0'\n         DC    10F'0'\n         EJECT\n         DS    0D\nCOMTAB   DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'04000A030005000C09',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'0B000200010F0D0E06',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0700000800030010',XL23'00'\n         SPACE 3\nMODLIST  DC    CL8' '\n         DC    CL8'CSCSA03D'  1\n         DC    CL8'CSCSC03D'  2\n         DC    CL8'CSCSD03D'  3\n         DC    CL8'CSCSE03D'  4\n         DC    CL8'CSCSF03D'  5\n         DC    CL8'CSCSG03D'  6\n         DC    CL8'CSCSH03D'  7\n         DC    CL8'CSCSI03D'  8\n         DC    CL8'CSCSJ03D'  9\n         DC    CL8'CSCSK03D'  A\n         DC    CL8'CSCSL03D'  B\n         DC    CL8'CSCSM03D'  C\n         DC    CL8'CSCSP03D'  D\n         DC    CL8'CSCSQ03D'  E\n         DC    CL8'CSCSR03D'  F\n         DC    CL8'CSCSZ03D' 10\n         DC    CL8'        '\n         DC    CL8'        '\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCOMTAB2  DC    193X'00'\n*                 A B C D E F G H I\n         DC    X'010203000000000000',XL7'00'\n*                 J K L M N O P Q R\n         DC    X'040000000000050000',XL8'00'\n*                 S T U V W X Y Z\n         DC    X'0600000000000000',XL23'00'\n         SPACE 3\nMODLIST2 DC    CL8'        '\n         DC    CL8'CSCZA03D'  1\n         DC    CL8'CSCZB03D'  2\n         DC    CL8'CSCZC03D'  3\n         DC    CL8'CSCZJ03D'  4\n         DC    CL8'CSCZP03D'  5\n         DC    CL8'CSCZS03D'  6\n         DC    CL8'        '\n         EJECT\n         DS    0D\nCSCWAIT  DC    CL8'00000200'\nRESETCNT DC    F'10'\nPREVREC  DC    CL96' '\n         EJECT\nRECVMSG  DS    0CL44\n         DC    CL44'CMD SUBSYS -   CSC #X COMMAND ACCEPTED'\n         SPACE 3\nTIMEMSG  DS    0CL48\n         DC    CL43'CMD SUBSYS -   CSC TIMEOUT, CMD PENDING ON '\nTIMESID  DC    CL4' ',C' '\n         EJECT\nCSCDATA  DCB   DDNAME=CSCDATA,DSORG=PS,RECFM=U,BLKSIZE=19069,          X\n               MACRF=(GM,PM)\n         SPACE 5\nRECORD   DS    CL19069\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGA03D\n         TITLE 'ESAGA03D -   A  JOB ACTIVITY MONITOR'\n         PRINT NOGEN                                               @TEC\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SP1GA03D -       A  JOB ACTIVITY MONITOR                  ***\n***                                                                 ***\n***       VERSION -        3.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        08/22/91                                 ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n*-------------------------------------------------------------*    @TEC\n* REGISTER USAGE                                              *    @TEC\n*  0  -                                                       *    @TEC\n*  1  - CTLBLK BASE:UCB                                       *    @TEC\n*  2  - XSA BASE ADDRESS                                      *    @TEC\n*  3  - WORK REGISTER                                         *    @TEC\n*  4  - CTLBLK BASE:CVT,ASVT,ASCB,PVT,PFTE                    *    @TEC\n*  5  - CTLBLK BASE:ASCB                                      *    @TEC\n*  6  - OFFSET WITHIN UCBTAB                                  *    @TEC\n*  7  - PROGRAM BASE 2                                        *    @TEC\n*  8  - JOBTABLE BASE ADDRESS                                 *    @TEC\n*  9  - CTLBLK BASE:OUCB                                      *    @TEC\n*  10 - SUBROUTINE LINKAGE                                    *    @TEC\n*  11 - SUBROUTINE LINKAGE                                    *    @TEC\n*  12 - PROGRAM BASE 1                                        *    @TEC\n*  13 - WORKING STORAGE BASE ADDRESS                          *    @TEC\n*  14 -                                                       *    @TEC\n*  15 -                                                       *    @TEC\n*-------------------------------------------------------------*    @TEC\nCSCGA03D CSECT\n         LR    R12,R15\n         LA    R7,4095(0,R12)\n         LA    R7,1(0,R7)\n         USING CSCGA03D,R12,R7\n*        MODESET KEY=ZERO,MODE=SUP\n         L     R0,SIZE                 LOAD SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET              SAVE RETURN ADDR\n         ST    R2,XSASAVE              SAVE XSA ADDR\n         USING XSA,R2\n*-------------------------------------------------------------*    @TEC\n* SET 31-BIT ADDRESSING                                       *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         L     R3,XAL\n         LA    R3,0(0,R3)\n         L     R8,XAA                  ASCB/OUCB INFO STORAGE\n         ST    R8,ACTSTORG\n         USING JOBTABLE,R8\n         MVC   JOBASID(2),=H'1'        FORCE MASTER AS DEFAULT\n         LTR   R3,R3                   ANY PARM\n         BZ    ESTAESET                NO\n         SR    R0,R0\n         SR    R1,R1\n         LA    R5,4                    SAVE DESIRED LENGTH IN R5\nPARMCVT0 CLI   0(R3),C' '              THEN WE AREA DONE\n         BE    ESTAESET                WRONG NUMBER OF CHAR\n         CLI   0(R3),C'A'              NOW CHECK FOR HEX CHARACTERS\n         BL    ESTAESET\n         CLI   0(R3),C'F'\n         BH    PARMCVT1                NOW TRY NUMBERICS\n         NI    0(R3),X'0F'             TURN OFF ZONE\n         IC    R0,0(R3)                GET THE CHARACTER\n         AH    R0,=H'9'                AND ADJUST TO PROPER VALUE\n         B     PARMCVT2\n         SPACE 1\nPARMCVT1 CLI   0(R3),C'0'              NOW SEE IF NUMERIC\n         BL    ESTAESET                IF NOT THEN ERROR\n         CLI   0(R3),C'9'              AND TRY HIGH VALUE\n         BH    ESTAESET\n         NI    0(R3),X'0F'             TURN OFF ZONE\n         IC    R0,0(R3)                GET DIGIT\n         SPACE 1\nPARMCVT2 SLL   R1,4                    CLEAR AREA\n         OR    R1,R0                   PUT IN NEW DIGIT\n         LA    R3,1(R3)                POINT PAST\n         BCT   R5,PARMCVT0             TRY AGAIN TILL EMPTY\n         B     PARMCVTX                ALL DONE AND HAD EXPECTED\n*                                  NUMBER OF CHARS\n         SPACE 1\nPARMCVTX STH   R1,JOBASID\n         SPACE 1\nESTAESET LR    R10,R13                 LOAD SAVE AREA ADDR\n         B     ESTAEBYP                BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L         * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL              * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\nCSCSTART DS    0H\n*-------------------------------------------------------------*    @TEC\n* CALCULATE AVERAGE TSO RESPONSE TIME                         *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R4,16                   CVT\n         L     R4,604(0,R4)            RMCT\n         MVC   WTOLIST(84),SRMOVLY\n         L     R5,88(0,R4)             WAMT\n         L     R1,THRTSOPG             TSO PERF GROUP NUMBER\n         SLL   R1,2                    TIMES 4\n         L     R6,88(R1,R5)            WAMP OFFSET                 @TEC\n         AR    R5,R6                   WAMP ADDRESS\n         SR    R14,R14\n         L     R15,0(0,R5)             TOTAL ENDED TRANS\n         LTR   R15,R15                 ZERO TRANS\n         BZ    NOTSO                   YES, BYPASS 0C9\n         L     R15,12(0,R5)            TOTAL ELAPSTM FOR ENDED TRANS\n         D     R14,0(0,R5)             DIVIDE BY ENDED TRANSACTIONS\n         SR    R14,R14\n         D     R14,=F'1000'            DIVIDE BY 1000 FOR SECONDS\n         SPACE 1\nNOTSO    CVD   R15,DOUBLE              AVG SECONDS RESPONSE TIME\n         SRDL  R14,32\n         D     R14,=F'10'\n         CVD   R15,DOUBLEX\n         MVC   WTOLIST+8(7),=X'402021204B2020'\n         ED    WTOLIST+8(4),DOUBLE+6\n         UNPK  WTOLIST+13(2),DOUBLEX+6(2)\n         OI    WTOLIST+14,X'F0'\n*-------------------------------------------------------------*    @TEC\n* GET LONG TERM CPU BUSY PERCENT                              *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,4(0,R4)              CCT                         @TEC\n         LH    R1,104(0,R1)            LONG TERM CPU UTIL          @TEC\n         SRL   R1,8                    SCALED BY 256?              @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+25(4),=X'40212020'\n         ED    WTOLIST+25(4),DOUBLE+6\n*-------------------------------------------------------------*    @TEC\n* GET CURRENT CPU BUSY PERCENT                                *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,4(0,R4)              CCT                         @TEC\n         LH    R1,102(0,R1)            AVERAGE CPU                 @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+38(4),=X'40212020'\n         ED    WTOLIST+38(4),DOUBLE+6\n*-------------------------------------------------------------*    @TEC\n* GET PAGING RATE                                             *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,228(0,R4)            RCT                         @TEC\n         LH    R1,64(0,R1)             AVERAGE PAGING              @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+51(4),=X'40212020'\n         ED    WTOLIST+51(4),DOUBLE+6\n*-------------------------------------------------------------*    @TEC\n* GET AVERAGE UNREFERENCED INTERVAL COUNT                     *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,228(0,R4)            RCT                         @TEC\n         LH    R1,54(0,R1)             AVERAGE UIC                 @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+65(4),=X'40212020'\n         ED    WTOLIST+65(4),DOUBLE+6\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         MVC   WTOLIST(4),=X'00540100'\n         L     R3,THRSTIMR             PICK UP NUMBER OF INTERVALS\n         BAL   R10,CHKUCB              (RE)INITIALIZE UCB INFO\n         BAL   R10,CHKLOOP             SAMPLE UCBS.\n         L     R8,XAA                  ASCB/OUCB INFO STORAGE\nJOBOUT   L     R4,16                   CVT ADDR\n         L     R4,556(0,R4)            ASVT ADDR\n         LA    R4,524(0,R4)            ASCB SLOT ADDR\n         LH    R5,JOBASID\n         SLL   R5,2\n         AR    R4,R5                   ASCB SLOT ADDR\n         L     R5,0(0,R4)              ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R6,56(0,R5)             CSCB ADDR\n         XC    SAVETIM1(16),SAVETIM1\n         BAL   R11,CSCBFORM            GET STEP NAME\n         CLC   JOBSTEP(8),=XL8'00'     1ST PASS\n         BE    *+14                    YES\n         CLC   JOBSTEP(8),ACTSNAME     STEPNAME MATCH\n         BE    *+10                    YES\n         XC    JOBFLAG(90),JOBFLAG     RESET COUNTERS\n         MVC   JOBSTEP(8),ACTSNAME\n         L     R9,144(0,R5)            LOAD OUCB ADDR\n         BAL   R11,ASCBFORM            GO FORMAT ASCB INFO\n         CLI   WJOB1,C' '              ANY OUTPUT\n         BE    JOBOUT1                 NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         SPACE 1\nJOBOUT1  CLI   WAITSW,X'00'            JOB WAITING\n         BNE   RETURN                  YES, NO I/O DISPLAY\n         CLC   SAVETIM1(16),=XL16'00'  1ST PASS\n         BE    RETURN                  YES, NO I/O DISPLAY\n         LA    R1,SEPRMSG\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         BAL   R10,CHKUCB6             GO FORMAT JOB I/O\n         B     RETURN\n         SPACE 2\n*-------------------------------------------------------------*    @TEC\n* FORMAT ASCB/OUCB INFO                                       *    @TEC\n*-------------------------------------------------------------*    @TEC\nASCBFORM L     R8,XAA                  JOBTABLE ADDR\n         LA    R1,=CL8'*MASTER*'\n         CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BE    ASCBFRM1                YES\n         L     R1,172(0,R5)            JOBNAME POINTER\n         LTR   R1,R1                   ZERO\n         BNZ   ASCBFRM1                NO\n         L     R1,176(0,R5)            STC/TSU NAME POINTER\n         LTR   R1,R1                   ZERO\n         BNZ   ASCBFRM1                NO\n         LA    R1,=CL8'*UNKNWN*'\n         B     ASCBFRM1                NO\n         SPACE 1\nASCBFRM0 XC    JOBFLAG(90),JOBFLAG     CLEAR COUNTERS\n         B     ASCBFRM2\n         SPACE 1\nASCBFRM1 CLC   JOBNAME(8),0(R1)        JOB/STC/TSU NAME MATCH\n         BE    ASCBFRM2                YES\n         MVC   JOBNAME(8),0(R1)        JOB/STC/TSU NAME\n         MVC   JOBASID(2),36(R5)       JOB/STC/TSU ASID\n         XC    JOBFLAG(90),JOBFLAG     CLEAR COUNTERS\nASCBFRM2 XC    ACTCPU(8),ACTCPU        CLEAR CPU UTIL FIELDS\n         MVI   WAITSW,X'00'            INDICATE JOB NOT WAITING\n         SR    R15,R15\n         L     R15,320(0,R5)           EXCP COUNT                  @TEC\n         A     R15,64(0,R9)            OUCB EXCP COUNT             @TEC\n         ST    R15,JOBSIOCT            SIO PER SEC\n         LM    R14,R15,64(R5)          TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)         SRB TIME\n         SRDL  R14,22\n         AR    R1,R15\n         C     R1,JOBINTT              COMPARE PREVIOUS CPU TIME\n         BNE   *+8                     JOB NOT WAITING\n         MVI   WAITSW,X'FF'            INDICATE JOB WAITING\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         L     R15,JOBINTT             LOAD PREVIOUS CPU TIME\n         LTR   R15,R15                 ANY PREVIOUS\n         BNZ   *+8                     YES\n         ST    R1,JOBINTT              PREVIOUS = CURRENT\n         LR    R15,R1\n         S     R15,JOBINTT             SUB PREVIOUS CPU TIME\n         ST    R1,JOBINTT              PREVIOUS = CURRENT\n         ST    R15,SAVETIM3            SAVE DIFFERENCE\n         C     R1,JOBTIME              COMPARE PREVIOUS CPU TIME\n         BNE   *+8                     JOB NOT WAITING\n         MVI   WAITSW,X'FF'            INDICATE JOB WAITING\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         C     R1,JOBCPUT              COMPARE PREVIOUS CPU TIME\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         L     R15,JOBCPUT             LOAD PREVIOUS CPU TIME\n         LTR   R15,R15                 ANY PREVIOUS\n         BNZ   *+8                     YES\n         ST    R1,JOBCPUT              PREVIOUS = CURRENT\n         L     R15,JOBTIME             LOAD PREVIOUS CPU TIME\n         LTR   R15,R15                 ANY PREVIOUS\n         BNZ   *+8                     YES\n         ST    R1,JOBTIME              PREVIOUS = CURRENT\n         LR    R15,R1\n         S     R15,JOBCPUT             SUB PREVIOUS CPU TIME\n         S     R1,JOBTIME              SUB PREVIOUS CPU TIME\n         ST    R15,SAVETIM1            SAVE DIFFERENCE\n         ST    R1,SAVETIM2             SAVE DIFFERENCE\n         TIME  BIN\n         L     R1,JOBINTL              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBINTL              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBINTL              INTERVAL TIME\n         ST    R0,JOBINTL              OLD TIME = NEW TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BZ    ASCBFRMA                ZERO, NO DIVIDE 0C9\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         L     R15,SAVETIM3            LOAD DIFFERENCE\n         LTR   R15,R15                 NEGATIVE\n         BM    ASCBFRM0                YES\n         SR    R14,R14\n         M     R14,=F'10'              PERCENT\n         SR    R14,R14\n         DR    R14,R1                  PERCENT UTIL\n         ST    R15,ACTCPU              SAVE CPU UTIL\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R1                  PERCENT UTIL  (HUNDREDTHS)\n         ST    R15,ACTCPUH             SAVE CPU UTIL (HUNDREDTHS)\nASCBFRMA BAL   R10,ACTIVE              GO FORMAT JOB ACTIVITY LINES\n         BAL   R10,CHKABN              CHECK FOR JOBS ABENDING\n         BAL   R10,CHKFRM              CHECK FOR JOBS WITH HIGH FRAMES\n         BAL   R10,CHKSWP              CHECK FOR JOBS WITH SWAP COUNTS\n         TIME  BIN\n         L     R1,JOBCPUL              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBCPUL              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBCPUL              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BE    ASCBFRMB                YES\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         L     R15,SAVETIM1            LOAD DIFFERENCE\n         LTR   R15,R15                 NEGATIVE\n         BM    ASCBFRM0                YES\n         SR    R14,R14\n         M     R14,=F'10'              PERCENT\n         SR    R14,R14\n         DR    R14,R1                  PERCENT UTIL\n         BAL   R10,CHKCPU              CHECK JOB CPU UTILIZATION LIMIT\nASCBFRMB CLI   WAITSW,X'00'            WAIT????\n         BNE   ASCBFRM4                YES\n         XC    JOBWAIT(4),JOBWAIT      CLEAR WAIT COUNTER\n         XC    SAVETIM4(4),SAVETIM4\n         TIME  BIN                     POTENTIAL LOOP\n         L     R1,JOBLOOP              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBLOOP              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBLOOP              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R11                   YES, NO LOOP YET\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         L     R15,SAVETIM2            LOAD DIFFERENCE\n         LTR   R15,R15                 NEGATIVE\n         BM    ASCBFRM0                YES\n         SR    R14,R14\n         M     R14,=F'10'              PERCENT\n         SR    R14,R14\n         DR    R14,R1                  PERCENT UTIL\n         C     R15,THRLOOPP            OVER CPU PERCENT THRESHOLD\n         BNL   *+18                    YES\n         XC    JOBLOOP(4),JOBLOOP      CLEAR LOOP COUNTER\n         XC    JOBTIME(4),JOBTIME      CLEAR CPUTIME FIELD\n         BR    R11\n         LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             LOOP SECONDS\n         CVD   R15,DOUBLE\n         C     R15,THRLOOPT            OVER LOOP THRESHOLD\n         BCR   4,R11                   NO\n         CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BCR   8,R11                   YES, NO LOOP CHECK\n         CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n         BNE   *+10                    JOB\n         CLI   28(R6),X'01'            TSU OR STC\n         BCR   7,R11                   STC\n         L     R1,108(0,R9)            EXCP COUNT\n         L     R15,JOBEXCP             PREVIOUS EXCP COUNT\n         ST    R1,JOBEXCP              SAVE PREVIOUS EXCP COUNT\n         CR    R1,R15                  COMPARE CURRENT TO PREVIOUS\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         BE    ASCBFRMC                NO EXCPS, POSSIBLE LOOP\n         XC    JOBLOOP(4),JOBLOOP      CLEAR LOOP COUNTER\n         XC    JOBTIME(4),JOBTIME      CLEAR CPUTIME FIELD\n         BR    R11\n         SPACE 1\nASCBFRMC CLI   WJOB1,C' '              1ST PASS\n         BNE   ASCBFRM3                NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28'POSSIBLE LOOP FOR XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLE+5\n         BR    R11\nASCBFRM3 MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28'POSSIBLE LOOP FOR XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\n         SPACE 1\nASCBFRM4 CLI   WJOB1,C' '              ANY OUTPUT\n         BE    ASCBFRMD                NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         SPACE 1\nASCBFRMD LA    R1,WAITMSG\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         TIME  BIN\n         L     R1,JOBWAIT              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBWAIT              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBWAIT              INTERVAL TIME\n         XC    JOBLOOP(4),JOBLOOP      CLEAR LOOP COUNTER\n         XC    JOBCPUT(4),JOBCPUT      CLEAR CPU TIME ACCUM\n         XC    JOBCPUL(4),JOBCPUL      CLEAR ELAPSED TIME ACCUM\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R11                   YES, NO WAIT YET\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             WAIT SECONDS\n         CVD   R15,DOUBLE\n         ST    R15,CURRWAIT\n         LA    R3,WMSG1\n         CLI   WJOB1,C' '              1ST PASS\n         BE    ASCBFRM5                YES\n         LA    R3,WMSG2\nASCBFRM5 MVC   0(12,R3),=CL12' '\n         BAL   R10,CHKENQ              CHECK ENQ OUTSTANDING\n         CLI   0(R3),C' '              ANY ENQS FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         BAL   R10,CHKALC              CHECK ALLOCATION QUEUE\n         CLI   0(R3),C' '              ANY ALLOC PENDING FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         BAL   R10,CHKQIO              CHECK I/O OUTSTANDING\n         CLI   0(R3),C' '              ANY I/O FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         BAL   R10,CHKREP              CHECK REPLY OUTSTANDING\n         CLI   0(R3),C' '              ANY REPLIES FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         L     R1,CURRWAIT             CURRENT WAIT TIME\n         C     R1,THRSWPWT             OVER SWAP WAIT THRESHOLD\n         BCR   4,R11                   NO\n         CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n         BNE   *+10                    JOB\n         CLI   28(R6),X'01'            TSU OR STC\n         BCR   7,R11                   STC OR INIT\n         BAL   R10,CHKSRC              CHECK SWAP REASON CODE\n         CLI   0(R3),C'*'              EXCLUDED SRC\n         BNE   *+10                    NO\n         MVI   0(R3),C' '\n         BR    R11\n         CLI   0(R3),C' '              ANY SRC FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         MVC   0(12,R3),=12C'?'\n         SPACE 1\nASCBFRM6 CLI   WJOB1,C' '              1ST TIME\n         BNE   ASCBFRM7                NO, 2ND PASS\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1+12(16),=CL16' WAIT XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLE+5\n         BR    R11\n         SPACE 1\nASCBFRM7 MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2+12(16),=CL16' WAIT XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nCHKCPU   STM   R0,R15,SAVEREGS\n         CVD   R15,DOUBLE\n         C     R15,THRCPULP            OVER CPU PERCENT THRESHOLD\n         BL    CHKCPU2                 NO\n         LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             LOOP SECONDS\n         CVD   R15,DOUBLEX\n         C     R15,THRCPULT            OVER CPU THRESHOLD\n         BL    CHKCPU3                 NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKCPU1                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28'   XXX% CPU FOR   XXXXX SEC'\n         MVC   WMSG1+2(4),=X'40202120'\n         ED    WMSG1+2(4),DOUBLE+6\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLEX+5\n         B     CHKCPU3\n         SPACE 1\nCHKCPU1  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28'   XXX% CPU FOR   XXXXX SEC'\n         MVC   WMSG2+2(4),=X'40202120'\n         ED    WMSG2+2(4),DOUBLE+6\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLEX+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         B     CHKCPU3\n         SPACE 1\nCHKCPU2  XC    JOBCPUL(4),JOBCPUL\n         XC    JOBCPUT(4),JOBCPUT\n         SPACE 1\nCHKCPU3  LM    R0,R15,SAVEREGS\n         BR    R10\nCHKLOOP  STIMER  WAIT,DINTVL=THRINTVL\n         LR    R4,R10\n         BAL   R10,CHKUCB1\n         LR    R10,R4\n         BCT   R3,CHKLOOP\n         BR    R10\nCHKUCB   STM   R0,R15,SAVEREGS\n         MVC   UCBTABND(2),=X'FFFF'\n         LA    R6,UCBTAB-20\n         SPACE 1\nCHKUCB0  LA    R6,20(0,R6)\n         CLC   0(2,R6),=X'FFFF'        END OF TABLE\n         BE    CHKUCB9                 YES\n         CLI   0(R6),X'00'             REFERENCED LAST PASS        @TEC\n         BNE   *+16                    YES\n         XC    0(8,R6),0(R6)\n         XC    16(4,R6),16(R6)\n         MVI   0(R6),X'00'                                         @TEC\n         XC    8(8,R6),8(R6)\n         B     CHKUCB0\n         SPACE 1\nCHKUCB1  XC    UCBDMSAV(24),UCBDMSAV\n         STM   R0,R15,SAVEREGS\n         L     R9,CVTPTR               CVT ADDR                    @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         XC    WKAREA(100),WKAREA      CLEAR WORK AREA             @TEC\n         LA    R1,WKAREA               SETUP PARAMETER LIST        @TEC\n         ST    R1,PLIST                                            @TEC\n         LA    R1,=X'20'               SPECIFY DASD                @TEC\n         ST    R1,PLIST+4                                          @TEC\n         LA    R1,ADDR                 WORD TO PUT ADDRESS OF UCB  @TEC\n         ST    R1,PLIST+8                                          @TEC\n         OI    PLIST+8,X'80'           31 BIT PARM END SET         @TEC\n         SPACE 1\nCHKUCB1A BAL   R10,UCBDML#0            GET NEXT UCB ADDR\n         LTR   R1,R1                   END OF UCBS\n         BZ    CHKUCB9                 YES, EXIT\n         TM    3(R1),X'88'             ONLINE/ALLOCATED\n         BNO   CHKUCB1A                NO\n         CLI   18(R1),X'20'            DASD\n         BE    *+18                    YES\n         L     R14,20(0,R1)            UCB EXTENSION\n         CLC   JOBASID(2),14(R14)      ASID MATCH\n         BNE   CHKUCB1A                NO\n         LA    R1,0(0,R1)\n         LR    R14,R1\n         S     R14,=F'4'\n         L     R14,0(0,R14)            IOQ ADDR\n         LA    R14,0(0,R14)\n         LTR   R14,R14                 ZERO\n         BZ    CHKUCB1A                YES\n         L     R15,8(0,R14)            IOSB ADDR\n         LA    R15,0(0,R15)\n         LTR   R15,R15                 ZERO\n         BZ    CHKUCB1A                YES\n         LA    R6,UCBTAB-20\n         MVC   SAVEBUSY(4),=F'0'\n         CLC   JOBASID(2),28(R14)      ASID MATCH                  @TEC\n         BNE   CHKUCB2                 NO\n         CLC   JOBASID(2),6(R15)       ASID MATCH\n         BNE   CHKUCB2                 NO\n         MVC   SAVEBUSY(4),=F'1'\n         SPACE 1\nCHKUCB2  LA    R6,20(0,R6)             NEXT UCB ENTRY\n         CLC   0(2,R6),=X'FFFF'        END OF UCB TABLE\n         BE    CHKUCB3                 YES, CHECK FOR EMPTY SLOT\n         CLM   R1,7,1(R6)              UCB ADDR MATCH              @TEC\n         BNE   CHKUCB2                 NO\n         B     CHKUCB5\n         SPACE 1\nCHKUCB3  LA    R6,UCBTAB-20\n         SPACE 1\nCHKUCB4  LA    R6,20(0,R6)             NEXT UCB ENTRY\n         CLC   0(2,R6),=X'FFFF'        END OF UCB TABLE\n         BE    CHKUCB1A                YES, NEXT UCB\n         CLC   0(2,R6),=X'0000'        EMPTY SLOT\n         BNE   CHKUCB4                 NO, NEXT ENTRY\n         SPACE 1\nCHKUCB5  STCM  R1,7,1(R6)              SAVE UCB ADDR               @TEC\n         MVI   0(R6),X'FF'             SLOT IN USE                 @TEC\n         L     R1,8(0,R6)\n         LA    R1,1(0,R1)\n         ST    R1,8(0,R6)              DEVICE BUSY\n         L     R1,12(0,R6)\n         A     R1,SAVEBUSY\n         ST    R1,12(0,R6)             DEVICE BUSY THIS JOB\n         B     CHKUCB1A\nCHKUCB6  STM   R0,R15,SAVEREGS\n         LA    R6,UCBTAB-20\n         SPACE 1\nCHKUCB7  LA    R6,20(0,R6)\n         CLC   0(2,R6),=X'FFFF'        END OF UCB TABLE\n         BE    CHKUCB9                 YES, EXIT\n         SR    R1,R1\n         ICM   R1,7,1(R6)              UCB ADDR                    @TEC\n         LA    R3,UCBNRDY\n         LA    R4,THRUCBNR\n         TM    6(R1),X'40'             NOT READY\n         BO    CHKUCB7A\n         LA    R3,UCBBUSY\n         LA    R4,THRUCBBS\n         SR    R14,R14\n         L     R15,8(0,R6)             UCB BUSY COUNT\n         XC    8(4,R6),8(R6)\n         M     R14,=F'100'\n         D     R14,THRSTIMR            PERCENT BUSY\n         LH    R1,16(0,R6)             CUMULATIVE PERCENT\n         LTR   R1,R1                   ZERO\n         BNZ   *+6                     NO\n         LR    R1,R15                  FAKE START\n         MH    R1,=H'3'                3/4 PREVIOUS\n         AR    R1,R15                  1/4 CURRENT\n         SRL   R1,2\n         STH   R1,16(0,R6)             NEW CUM PERCENT\n         SR    R14,R14\n         L     R15,12(0,R6)            UCB BUSY COUNT\n         XC    12(4,R6),12(R6)\n         M     R14,=F'100'\n         D     R14,THRSTIMR            PERCENT BUSY\n         LH    R1,18(0,R6)             CUMULATIVE PERCENT\n         LTR   R1,R1                   ZERO\n         BNZ   *+6                     NO\n         LR    R1,R15                  FAKE START\n         MH    R1,=H'3'                3/4 PREVIOUS\n         AR    R1,R15                  1/4 CURRENT\n         SRL   R1,2\n         STH   R1,18(0,R6)             NEW CUM PERCENT\n         C     R1,THRUCBLM             THRESHOLD REACHED\n         BL    CHKUCB7B                NO\n         SPACE 1\nCHKUCB7A TIME  BIN\n         L     R1,4(0,R6)              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,4(0,R6)              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,4(0,R6)              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BZ    CHKUCB7                 YES\n         BP    CHKUCB8\n         SPACE 1\nCHKUCB7B XC    4(16,R6),4(R6)\n         B     CHKUCB7\nCHKUCB8  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         LH    R1,16(0,R6)\n         CVD   R1,DOUBLEY\n         LH    R1,18(0,R6)\n         CVD   R1,DOUBLE\n         CVD   R15,DOUBLEX\n         C     R15,0(0,R4)             TIME THRESHOLD REACHED\n         BL    CHKUCB7                 NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKUCB8A                NO, 2ND HALF\n         MVC   WJOB1(38),0(R3)\n         SR    R1,R1\n         ICM   R1,7,1(R6)              UCB ADDR                    @TEC\n         MVC   WJOB1(3),13(R1)         DEVICE ADDRESS\n         MVC   WJOB1+4(6),=6C' '\n         TM    18(R1),X'A0'            TAPE OR DASD\n         BZ    *+10                    NO\n         MVC   WJOB1+4(6),28(R1)       DEVICE VOLSER\n         MVC   WJOB1+27(6),=X'402020202120'\n         ED    WJOB1+27(6),DOUBLEX+5\n         LA    R1,UCBNRDY\n         CR    R1,R3                   NOT READY MESSAGE\n         BE    CHKUCB7                 YES, NO PERCENT\n         MVC   WJOB1+11(4),=X'40202120'\n         ED    WJOB1+11(4),DOUBLEY+6\n         MVC   WJOB1+17(4),=X'40202120'\n         ED    WJOB1+17(4),DOUBLE+6\n         CLI   WJOB1+12,C' '\n         BE    *+12\n         MVI   WJOB1+11,C'('\n         B     CHKUCB7\n         CLI   WJOB1+13,C' '\n         BE    *+12\n         MVI   WJOB1+12,C'('\n         B     CHKUCB7\n         MVI   WJOB1+13,C'('\n         B     CHKUCB7\n         SPACE 1\nCHKUCB8A MVC   WJOB2(38),0(R3)\n         SR    R1,R1\n         ICM   R1,7,1(R6)              UCB ADDR                    @TEC\n         MVC   WJOB2(3),13(R1)         DEVICE ADDRESS\n         MVC   WJOB2+4(6),=6C' '\n         TM    18(R1),X'A0'            TAPE OR DASD\n         BZ    *+10                    NO\n         MVC   WJOB2+4(6),28(R1)       DEVICE VOLSER\n         MVC   WJOB2+27(6),=X'402020202120'\n         ED    WJOB2+27(6),DOUBLEX+5\n         LA    R1,UCBNRDY\n         CR    R1,R3                   NOT READY MESSAGE\n         BE    CHKUCB8B                YES, NO PERCENT\n         MVC   WJOB2+11(4),=X'40202120'\n         ED    WJOB2+11(4),DOUBLEY+6\n         MVC   WJOB2+17(4),=X'40202120'\n         ED    WJOB2+17(4),DOUBLE+6\n         CLI   WJOB2+12,C' '\n         BE    *+12\n         MVI   WJOB2+11,C'('\n         B     CHKUCB8B\n         CLI   WJOB2+13,C' '\n         BE    *+12\n         MVI   WJOB2+12,C'('\n         B     CHKUCB8B\n         MVI   WJOB2+13,C'('\n         SPACE 1\nCHKUCB8B LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         B     CHKUCB7\n         SPACE 1\nCHKUCB9  LM    R0,R15,SAVEREGS\n         BR    R10\nCHKABN   L     R1,16                   CVT\n         L     R1,640(0,R1)            FIRST VALID MAJOR QCB\n         B     CHKABN1+4               1ST MAJOR PROCESS\n         SPACE 1\nCHKABN1  L     R1,0(0,R1)              NEXT MAJOR\n         LTR   R1,R1                   EXIST\n         BCR   8,R10                   NO, END OF QCBS\n         CLC   16(8,R1),=CL8'SYSIEA01'  ABEND QCB\n         BNE   CHKABN1                 NO, NEXT MAJOR\n         L     R14,8(0,R1)             1ST MINOR\n         LTR   R14,R14                 EXIST\n         BCR   8,R10                   NO\n         B     CHKABN3\n         SPACE 1\nCHKABN2  L     R14,0(0,R14)            NEXT MINOR QCB\n         LTR   R14,R14                 EXIST\n         BCR   8,R10                   NO\n         SPACE 1\nCHKABN3  L     R15,8(0,R14)            1ST QEL\n         SPACE 1\nCHKABN4  LTR   R15,R15                 EXIST\n         BZ    CHKABN2                 NO\n         CLC   JOBASID(2),14(R15)      ASID MATCH\n         BE    CHKABN5                 YES, JOB ABENDING\n         L     R15,0(0,R15)            NEXT QEL\n         LA    R15,0(0,R15)\n         LTR   R15,R15                 EXIST\n         BZ    CHKABN2                 NO\n         B     CHKABN4\n         SPACE 1\nCHKABN5  TIME  BIN\n         L     R1,JOBABEND             OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBABEND             OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBABEND             INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R10                   YES\n         BP    CHKABN7\n         SPACE 1\nCHKABN6  XC    JOBABEND(4),JOBABEND\n         BR    R10\n         SPACE 1\nCHKABN7  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         CVD   R15,DOUBLEX\n         C     R15,THRABEND            TIME THRESHOLD REACHED\n         BCR   4,R10                   NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKABN8                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28'ABEND IN PROGRESS XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLEX+5\n         BR    R10\n         SPACE 1\nCHKABN8  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28'ABEND IN PROGRESS XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLEX+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\nCHKREP   L     R1,CURRWAIT             CURRENT WAIT TIME\n         C     R1,THRREPWT             OVER REPLY WAIT THRESHOLD\n         BCR   4,R10                   NO\n         L     R1,16                   CVT\n         L     R1,100(0,R1)            UCM BASE\n         L     R1,28(0,R1)             1ST ORE\n         LA    R1,0(0,R1)\n         SPACE 1\nCHKREP1  LTR   R1,R1                   ANY OUTSTANDING REPLIES\n         BCR   8,R10                   NO\n         CLC   JOBASID(2),24(R1)       ASID MATCH\n         BE    CHKREP2                 YES\n         L     R1,0(0,R1)              NEXT ORE\n         LA    R1,0(0,R1)\n         B     CHKREP1\n         SPACE 1\nCHKREP2  MVC   0(12,R3),=CL12'REPLY '\n         MVC   7(2,R3),4(R1)           REPLY ID\n         BR    R10\n         SPACE 5\nCHKSRC   LA    R1,SRCTAB\n         SR    R15,R15\n         IC    R15,41(0,R9)            SWAP REASON CODE\n         CH    R15,=H'13'              MAX SWAP REASON CODE\n         BCR   2,R10                   OVER MAX\n         MH    R15,=H'12'\n         LA    R1,0(R15,R1)            SWAP REASON CODE OUTPUT\n         MVC   0(12,R3),0(R1)\n         BR    R10\nCHKFRM   L     R1,16                   LOAD CVT ADDR\n         L     R1,356(0,R1)            LOAD PVT ADDR\n         L     R1,8(0,R1)              LOAD RIT ADDR               @TEC\n         L     R15,0(0,R1)             LOAD 1ST PFTE ADDR          @TEC\n         L     R14,4(0,R1)             LOAD LAST PFTE ADDR         @TEC\n         SR    R14,R15                 GET DIFFERENCE              @TEC\n         SRL   R14,5                   NUMBER OF PFTE'S            @TEC\n         SR    R1,R1                   CLEAR FRAME COUNT\n         SPACE 1\nCHKFRM1  CLC   0(2,R15),JOBASID        ASID MATCH\n         BNE   CHKFRM2                 NO\n         LA    R1,1(0,R1)              ADD 1 TO FRAME COUNT\n         SPACE 1\nCHKFRM2  LA    R15,32(0,R15)           NEXT PFT                    @TEC\n         BCT   R14,CHKFRM1             PROCESS NEXT\n         L     R15,JOBFRCNT            JOB FRAME COUNT  (WEIGHTED AVG)\n         XC    JOBFRCNT(4),JOBFRCNT\n         C     R1,THRFRAME             THRESHOLD REACHED\n         BL    CHKFRM3                 NO\n         LTR   R15,R15                 ZERO\n         BNZ   *+6                     NO\n         LR    R15,R1                  FAKE START\n         MH    R15,=H'3'               3/4 PREVIOUS\n         AR    R1,R15                  1/4 CURRENT\n         SRL   R1,2\n         ST    R1,JOBFRCNT\n         CVD   R1,DOUBLE\n         TIME  BIN\n         L     R1,JOBFRAME             OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBFRAME             OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBFRAME             INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R10                   YES\n         BP    CHKFRM4\n         SPACE 1\nCHKFRM3  XC    JOBFRAME(4),JOBFRAME\n         BR    R10\nCHKFRM4  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         CVD   R15,DOUBLEX\n         C     R15,THRFRMTM            FRAME USE TIME THRESHOLD?\n         BCR   4,R10                   NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKFRM5                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28' XXXXX FRAMES FOR XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLEX+5\n         MVC   WMSG1(6),=X'402020202120'\n         ED    WMSG1(6),DOUBLE+5\n         BR    R10\n         SPACE 1\nCHKFRM5  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28' XXXXX FRAMES FOR XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLEX+5\n         MVC   WMSG2(6),=X'402020202120'\n         ED    WMSG2(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\nCHKSWP   CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BCR   8,R10                   YES, NO SWAP CHECK\n         CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n         BCR   8,R10                   STC OR TSO\n         LH    R1,42(0,R9)             SWAP COUNT\n         CVD   R1,DOUBLE\n         C     R1,THRSWAP              THRESHOLD REACHED\n         BCR   4,R10\n         SPACE 1\nCHKSWP1  CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKSWP2                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28'CURRENT SWAP COUNT = XXXXX'\n         MVC   WMSG1+20(6),=X'402020202120'\n         ED    WMSG1+20(6),DOUBLE+5\n         BR    R10\n         SPACE 1\nCHKSWP2  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28'CURRENT SWAP COUNT = XXXXX'\n         MVC   WMSG2+20(6),=X'402020202120'\n         ED    WMSG2+20(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\nCHKENQ   L     R1,16                   CVT\n         L     R1,640(0,R1)            FIRST VALID MAJOR QCB\n         ST    R2,SAVEREGS\n         B     CHKENQ1+4               1ST MAJOR PROCESS\n         SPACE 1\nCHKENQ1  L     R1,0(0,R1)              NEXT MAJOR\n         LTR   R1,R1                   EXIST\n         BZ    CHKENQ8                 NO, END OF QCBS\n         MVC   MAJOR(8),16(R1)         SAVE MAJOR QCB\n         L     R14,8(0,R1)             1ST MINOR\n         LTR   R14,R14                 EXIST\n         BZ    CHKENQ1                 NO\n         B     CHKENQ3\n         SPACE 1\nCHKENQ2  L     R14,0(0,R14)            NEXT MINOR QCB\n         LTR   R14,R14                 EXIST\n         BZ    CHKENQ1                 NO\n         SPACE 1\nCHKENQ3  L     R15,8(0,R14)            1ST QEL\n         SPACE 1\nCHKENQ4  LTR   R15,R15                 EXIST\n         BZ    CHKENQ2                 NO\n         TM    12(R15),X'80'           SHARED\n         BZ    CHKENQ5                 NO\n         L     R15,0(0,R15)            NEXT QEL\n         LA    R15,0(0,R15)\n         B     CHKENQ4\n         SPACE 1\nCHKENQ5  C     R15,8(0,R14)            IS EXCL QEL THE 1ST QEL\n         BNE   CHKENQ6                 NO\n         L     R2,0(0,R15)             NEXT QEL\n         LA    R2,0(0,R2)\n         LTR   R2,R2                   EXIST\n         BZ    CHKENQ2                 NO\n         SPACE 1\nCHKENQ6  L     R15,0(0,R15)            NEXT QEL\n         LA    R15,0(0,R15)\n         LTR   R15,R15                 EXIST\n         BZ    CHKENQ2                 NO\n         CLC   JOBASID(2),14(R15)      ASID MATCH\n         BE    CHKENQ7                 YES, ENQ CONFLICT THIS JOB\n         B     CHKENQ6\n         SPACE 1\nCHKENQ7  MVC   0(12,R3),=CL12'ENQ'\n         MVC   4(8,R3),MAJOR\n         SPACE 1\nCHKENQ8  L     R2,SAVEREGS\n         BR    R10\nCHKALC   L     R1,CURRWAIT             CURRENT WAIT TIME\n         C     R1,THRALCWT             OVER ALLOCATION WAIT THRESHOLD\n         BCR   4,R10                   NO\n         L     R1,16                   CVT\n         L     R1,548(0,R1)            AQTOP\n         L     R14,0(0,R1)             1ST QUEUE ELEMENT\n         SPACE 1\nCHKALC1  CR    R1,R14                  END OF CHAIN\n         BCR   8,R10                   YES, NOT IN ALLOCATION\n         SR    R15,R15\n         LH    R15,22(0,R14)           ASID\n         CH    R15,JOBASID             ASID MATCH\n         BE    CHKALC2\n         L     R14,0(0,R14)            NEXT QUEUE ELEMENT\n         B     CHKALC1\n         SPACE 1\nCHKALC2  MVC   0(12,R3),=CL12'ALLOC QUEUE'\n         BR    R10\nCHKQIO   XC    UCBDMSAV(24),UCBDMSAV\n         MVC   QIOASID(2),JOBASID      SAVE ASID\n         STM   R0,R15,SAVEREGS\n         L     R9,CVTPTR               CVT ADDR                    @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         XC    WKAREA(100),WKAREA      CLEAR WORK AREA             @TEC\n         LA    R1,WKAREA               SETUP PARAMETER LIST        @TEC\n         ST    R1,PLIST                                            @TEC\n         LA    R1,=X'20'               SPECIFY DASD                @TEC\n         ST    R1,PLIST+4                                          @TEC\n         LA    R1,ADDR                 WORD TO PUT ADDRESS OF UCB  @TEC\n         ST    R1,PLIST+8                                          @TEC\n         OI    PLIST+8,X'80'           31 BIT PARM END SET         @TEC\n         SPACE 1\nCHKQIO1  BAL   R10,UCBDML#0            GET NEXT UCB ADDR\n         LTR   R1,R1                   END OF UCBS\n         BZ    CHKQIO3                 YES, EXIT\n         B     CHKQIO2\n         SPACE 1\nCHKQIO2  LR    R2,R1                   UCB ADDR\n         LR    R4,R1                   UCB ADDR\n         S     R4,=F'4'                DECR ADDR -4\n         L     R4,0(0,R4)              IOQ ADDR\n         LA    R4,0(0,R4)\n         LTR   R4,R4                   ANY IOQ\n         BZ    CHKQIO1                 NO, NEXT UCB\n         L     R5,8(0,R4)              IOSB ADDR\n         LA    R5,0(0,R5)\n         LTR   R5,R5                   EXIST\n         BZ    CHKQIO1                 NO, NEXT UCB\n         B     CHKQIO9\n         SPACE 1\nCHKQIO3  L     R8,16                   CVT ADDR\n         L     R8,140(0,R8)            LCH ADDR\n         SPACE 1\nCHKQIO4  CLC   16(4,R8),=F'0'          END OF LCH\n         BE    CHKQIO8A                YES, EXIT\n         CLC   0(4,R8),=X'FFFFFFFF'    IOQ ADDR EXIST\n         BNE   CHKQIO6                 YES\n         SPACE 1\nCHKQIO5  LA    R8,32(0,R8)             NEXT LCH\n         B     CHKQIO4\n         SPACE 1\nCHKQIO6  L     R4,0(0,R8)              1ST IOQ\n         L     R6,4(0,R8)              LAST IOQ\n         SPACE 1\nCHKQIO7  L     R5,8(0,R4)              IOSB ADDR\n         LA    R5,0(0,R5)\n         LTR   R5,R5                   EXIST\n         BZ    CHKQIO7A                NO\n         L     R2,16(0,R5)             UCB ADDR\n         CLC   QIOASID(2),6(R5)        ASID MATCH\n         BE    CHKQIO8                 YES\n         SPACE 1\nCHKQIO7A CR    R4,R6                   END OF IOQS\n         BE    CHKQIO5                 YES\n         L     R4,0(0,R4)              NEXT IOQ\n         B     CHKQIO7\n         SPACE 1\nCHKQIO8  MVC   0(12,R3),=CL12'I/O ON'\n         MVC   8(3,R3),13(R2)\n         SPACE 1\nCHKQIO8A LM    R0,R15,SAVEREGS\n         BR    R10\n         SPACE 1\nCHKQIO9  C     R2,16(0,R5)             UCB ADDR MATCH\n         BNE   CHKQIO8A                NO, EXIT\n         CLC   QIOASID(2),6(R5)        ASID MATCH\n         BE    CHKQIO8                 YES\n         B     CHKQIO1\nUCBDML#0 DS    0H\n         ST    R8,UCBDMSAV             SAVE WORK REG 1\n         ST    R10,UCBDMSAV+8          SAVE WORK REG 3\n         ST    R11,UCBDMSAV+12         SAVE WORK REG 4\nUCBLOOP1 L     R9,CVTPTR               CVT ADDR                    @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         LA    R1,PLIST                POINT AT PARM LIST          @TEC\n         LR    R15,R9                  GET MODULE ADDRESS          @TEC\n         BALR  R14,R15                 CALL MVS                    @TEC\n         LTR   R15,R15                 UCB FOUND?                  @TEC\n         BZ    UCBFND                  YES.                        @TEC\n         SR    R1,R1                   SAY THAT'S ALL.             @TEC\n         B     UCBDMCON                AND GO HOME.                @TEC\nUCBFND   DS    0H\n         L     R1,ADDR                 GET ADDR OF UCB             @TEC\n         L     R8,UCBDMLOW             SET SEARCH ARGUMENT\n         SPACE 1\nUCBDML#1 LA    R8,1(0,R8)              NEXT UNIT ADDR POSSIBLE\n         L     R10,=X'0000FFFF'        SET MAX NEXT LEAST HIGH\n         SPACE 1\nUCBDML#2 LTR   R1,R1                   MORE UCBS?                  @TEC\n         BZ    UCBDMOUT                NO, GO PROCESS\n         SPACE 1\nUCBDML#4 TM    6(R1),X'8A'             BUSY AND/OR CHANNEL PROGRAM\n*                                  ACTIVE\n         BZ    UCBLOOP1                NO, NEXT UCB                @TEC\n         TM    18(R1),X'20'            DASD?                       @TEC\n         BZ    UCBLOOP1                NO. SKIP IT.                @TEC\n         BAL   R11,UCBDMCNV            CONVERT UNIT ADDR TO HEX\n         CR    R0,R8                   UNIT EQUAL                  @TEC\n         BL    UCBLOOP1                LOW NOT EQUAL, NEXT UCB     @TEC\n         LR    R10,R0                  SET NEXT LEAST HIGH UNIT AD @TEC\n         ST    R1,UCBDMCUR             SET NEXT LEAST HIGH UCB ADD @TEC\n         B     UCBDMOUT                GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)            UNIT ADDR DIGIT\n         TM    13(R1),X'F0'            NUMERIC\n         BO    *+8                     YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)            SET VALUE TO COVER A-F\n         SLL   R15,28                  SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4                   INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)            UNIT ADDR DIGIT\n         TM    14(R1),X'F0'            NUMERIC\n         BO    *+8                     YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)            SET VALUE TO COVER A-F\n         SLL   R15,28                  SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4                   INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)            UNIT ADDR DIGIT\n         TM    15(R1),X'F0'            NUMERIC\n         BO    *+8                     YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)            SET VALUE TO COVER A-F\n         SLL   R15,28                  SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4                   INSERT INTO RESULTS REGISTER\n         LR    R0,R14                  SET RESULTS REG             @TEC\n         BR    R11\n         SPACE 3\nUCBDMOUT C     R10,=X'0000FFFF'        ALL DONE\n         BE    UCBDMEX                 YES\n         ST    R10,UCBDMLOW            NEXT LOW UNIT ADDR\n         L     R1,UCBDMCUR             LOAD UCB ADDR FOR FOUND UNIT\n         B     UCBDMCON                CONTINUE\n         SPACE 1\nUCBDMEX  SR    R1,R1                   CLEAR UCB ADDR REGISTER\n         L     R8,UCBDMSAV             RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8          RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12         RELOAD WORK REG 4\n         B     UCBDMRET                END OF UCBS\n         SPACE 1\nUCBDMCON L     R8,UCBDMSAV             RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8          RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12         RELOAD WORK REG 4\n         SPACE 1\nUCBDMRET EQU   *\n         BR    R10\nCSCBFORM CLI   28(R6),X'01'            TSO USER\n         BE    CSCBFRM4                YES\n         CLI   28(R6),X'03'            INIT\n         BNE   CSCBFRM3                NO, GO HANDLE\n         LA    R9,0(0,R6)              SAVE CSCB ADDR\n         SR    R10,R10                 INSERT\n         IC    R10,30(0,R6)\n         SLL   R10,8                   ASID\n         IC    R10,31(0,R6)\n         SPACE 1\nCSCBFRM1 L     R6,0(0,R6)              NEXT CSCB\n         LA    R6,0(0,R6)              CLEAR HIGH ORDER\n         LTR   R6,R6                   END OF CSCBS\n         BNZ   *+10                    NO, CONTINUE\n         LR    R6,R9                   LOAD CSCB ADDR\n         B     CSCBFRM5                NO GOOD\n         CR    R6,R9                   SAME CSCB\n         BE    CSCBFRM5                YES, NO GOOD\n         CH    R10,30(0,R6)            SAME ASID\n         BNE   CSCBFRM1                NO, CHECK NEXT\n         SPACE 1\nCSCBFRM2 MVC   ACTSNAME(8),64(R6)      STEP NAME\n         BR    R11\n         SPACE 1\nCSCBFRM3 MVC   ACTSNAME(8),8(R6)       STEP NAME\n         BR    R11\n         SPACE 1\nCSCBFRM4 MVC   ACTSNAME(8),16(R6)\n         BR    R11\n         SPACE 1\nCSCBFRM5 MVC   ACTSNAME(8),=CL8' '\n         BR    R11\nACTIVE   STM   R0,R15,ACTREGS\n         L     R8,ACTSTORG             ASCB/OUCB INFO STORAGE\n         CLI   WJOB1,C' '              ANY OUTPUT\n         BE    ACTIVE0                 NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         SPACE 1\nACTIVE0  MVI   ACTMSG1,C' '\n         MVC   ACTMSG1+1(79),ACTMSG1\n         MVC   ACTJNAME(8),JOBNAME\n         MVC   ACTSNAME(8),JOBSTEP\n         L     R15,ACTCPU              CPU UTIL\n         LTR   R15,R15                 NEGATIVE CPU\n         BM    ACTIVE1                 YES\n         CVD   R15,DOUBLE              PERCENT TO PRINT\n         MVC   ACTMSG1+19(4),=C'CPU='\n         MVC   PCT1(7),=X'402020204B2020'\n         ED    PCT1(4),DOUBLE+6\n         MVI   ACTMSG1+22,C'='\n         CH    R15,=H'46'              MAX\n         BNH   *+8                     NO\n         LH    R15,=H'46'              SET MAX\n         EX    R15,PCTMVE1             GRAPHIC PERCENT\n         LA    R15,PCTGRPH1(R15)\n         MVI   0(R15),C'>'\n         L     R15,ACTCPUH             CPU UTIL (HUNDREDTHS)\n         CVD   R15,DOUBLE              PERCENT TO PRINT  (HUNDREDTHS)\n         UNPK  PCT1+5(2),DOUBLE+6(2)\n         OI    PCT1+6,X'F0'\n         B     ACTIVE2\n         SPACE 1\nACTIVE1  MVC   PCT1(7),=C'**CHG**'\n         B     ACTIVE2\n         SPACE 1\nPCTMVE1  MVC   PCTGRPH1(0),PCTLINE\nACTIVE2  MVC   ACTLIST1(4),=X'00540100'\n         LA    R1,ACTLIST1\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   OUTMSG+4,C' '\n         MVC   OUTMSG+5(79),OUTMSG+4\n         L     R6,JOBPREVT\n         XC    JOBINTVL(4),JOBINTVL\n         TIME  BIN\n         LR    R5,R0                   CURRENT TIME\n         SR    R5,R6                   INTERVAL TIME\n         ST    R0,JOBPREVT\n         LTR   R6,R6                   1ST TIME\n         BZ    ACTIVE2A\n         ST    R5,JOBINTVL             SAVE INTERVAL TIME\n         SPACE 1\nACTIVE2A MVC   OUTMSG(4),=X'00540100'\n         L     R14,16                  LOAD CVT ADDR\n         L     R3,356(0,R14)           LOAD PVT ADDR\n         L     R4,12(0,R3)             PFT APPARENT ADDR\n         AH    R4,16(0,R3)             PFT ACTUAL ADDR\n         SR    R5,R5                   INDEX\n         IC    R5,18(0,R3)             TO\n         SLL   R5,8                    END OF\n         IC    R5,19(0,R3)             PFT\n         SH    R5,16(0,R3)\n         SRL   R5,4                    DIVIDE BY 16\n         STM   R4,R5,PFTREGS           SAVE PFT REGS\n         LH    R10,JOBASID\n         BAL   R11,PAGEPRNT            GO COUNT AND FORMAT\n         BAL   R11,JPAGE               GO COUNT AND FORMAT\n         L     R2,XSASAVE\n         LA    R1,OUTMSG               LOAD OUTPUT MSG ADDR\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 1\nACTIVE3  MVI   ACTMSG2,C' '\n         MVC   ACTMSG2+1(79),ACTMSG2\n         MVC   ACTMSG2(5),=C'EXCP='\n         L     R15,JOBSIOCT            EXCP COUNT\n         L     R14,JOBSIOPR            PREV COUNT\n         LTR   R14,R14                 ZERO\n         BNZ   *+6                     NO\n         LR    R14,R15                 PREV = CURRENT\n         ST    R15,JOBSIOPR\n         SR    R15,R14\n         CVD   R15,DOUBLE              EXCP TO PRINT\n         MVC   ACTMSG2+5(6),=X'402020202120'\n         ED    ACTMSG2+5(6),DOUBLE+5\n         L     R14,JOBINTVL            LOAD DIFFERENCE\n         LTR   R14,R14                 POSITIVE\n         BNP   ACTIVE3A                NO\n         MVC   ACTMSG2+19(4),=C'E/S='\n         SR    R14,R14\n         M     R14,=F'100'\n         D     R14,JOBINTVL            SIO PER SEC\n         CVD   R15,DOUBLE\n         MVC   PCT2(7),=X'402020204B2020'\n         ED    PCT2(4),DOUBLE+6\n         MVI   ACTMSG2+22,C'='\n         CH    R15,=H'46'              MAX\n         BNH   *+8                     NO\n         LH    R15,=H'46'              SET MAX\n         EX    R15,PCTMVE2             GRAPHIC PERCENT\n         LA    R15,PCTGRPH2(R15)\n         MVI   0(R15),C'>'\n         SRDL  R14,32\n         M     R14,=F'100'\n         D     R14,JOBINTVL\n         CVD   R15,DOUBLE              PERCENT TO PRINT  (HUNDREDTHS)\n         UNPK  PCT2+5(2),DOUBLE+6(2)\n         OI    PCT2+6,X'F0'\n         SPACE 1\nACTIVE3A MVC   ACTLIST2(4),=X'00540100'\n         LA    R1,ACTLIST2\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         SPACE 1\nACTIVE4  LM    R0,R15,ACTREGS\n         BR    R10\n         SPACE 1\nPCTMVE2  MVC   PCTGRPH2(0),PCTLINE\nJPAGE    L     R14,16                  LOAD CVT ADDR\n         L     R14,556(0,R14)          LOAD ASVT ADDR\n         LA    R14,524(0,R14)          1ST ASCB SLOT\n         SLL   R10,2\n         LA    R14,0(R10,R14)          THIS ASID ASCB SLOT\n         L     R8,ACTSTORG             ASCB/OUCB INFO STORAGE\n         L     R2,JOBINTVL\n         L     R8,0(0,R14)             ASCB ADDR\n         L     R1,148(0,R8)            OUXB ADDR\n         LA    R1,0(0,R1)\n         L     R8,ACTSTORG             ASCB/OUCB INFO STORAGE\n         LTR   R5,R1                   VALID ADDR\n         BCR   8,R11                   NO\n         CLC   JOBPAGES(24),=24X'00'   1ST TIME\n         BE    JPAGE3                  YES\n         SPACE 1\nJPAGE1   LTR   R2,R2                   1ST PASS\n         BCR   8,R11\n         MVC   OUTMSG+19(9),=CL9'PGS/SEC='\n         LA    R10,JOBPAGES\n         L     R14,16(0,R1)            CURR PAGEIN\n         S     R14,0(0,R10)            SUB PREV PAGEIN\n         LTR   R14,R14                 OVERFLOW\n         BM    JPAGE2                  YES\n         LR    R15,R14                 ACCUMULATE\n         L     R14,20(0,R1)            CURR PAGEOUT\n         S     R14,4(0,R10)            SUB PREV PAGEOUT\n         LTR   R14,R14                 OVERFLOW\n         BM    JPAGE2                  YES\n         AR    R15,R14                 ACCUMULATE\n         L     R14,24(0,R1)            CURR PAGE RECLAIM\n         S     R14,8(0,R10)            SUB PREV PAGE RECLAIM\n         LTR   R14,R14                 OVERFLOW\n         BM    JPAGE2                  YES\n         SR    R15,R14                 ACCUMULATE\n         L     R14,28(0,R1)            CURR VIO PAGEIN\n         S     R14,12(0,R10)           SUB PREV VIO PAGEIN\n         LTR   R14,R14                 OVERFLOW\n         BM    JPAGE2                  YES\n         AR    R15,R14                 ACCUMULATE\n         L     R14,32(0,R1)            CURR VIO PAGEOUT\n         S     R14,16(0,R10)           SUB PREV VIO PAGEOUT\n         LTR   R14,R14                 OVERFLOW\n         BM    JPAGE2                  YES\n         AR    R15,R14                 ACCUMULATE\n         L     R14,36(0,R1)            CURR VIO RECLAIM\n         S     R14,20(0,R10)           SUB PREV VIO RECLAIM\n         LTR   R14,R14                 OVERFLOW\n         BM    JPAGE2                  YES\n         SR    R15,R14                 ACCUMULATE\n         SR    R14,R14\n         M     R14,=F'100'\n         DR    R14,R2                  PAGES PER SEC\n         CVD   R15,DOUBLE\n         LR    R1,R15\n         MVC   OUTMSG+28(10),=X'402021204B2020404040'\n         ED    OUTMSG+28(4),DOUBLE+6\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R2                  HUNDREDTHS\n         CVD   R15,DOUBLE\n         UNPK  OUTMSG+33(2),DOUBLE+6(2)\n         OI    OUTMSG+34,X'F0'\n         SLL   R1,1\n         C     R15,=F'50'              ROUND UP GRAPH\n         BL    *+8                     NO\n         LA    R1,1(0,R1)\n         CH    R1,=H'46'\n         BNH   *+8\n         LH    R1,=H'46'               FORCE MAX\n         EX    R1,PAGMVE\n         LA    R1,OUTMSG+37(R1)\n         MVI   0(R1),C'>'\n         B     JPAGE3\n         SPACE 1\nJPAGE2   MVC   OUTMSG+28(18),=CL18'   0.00'\n         SPACE 1\nJPAGE3   MVC   JOBPAGES(24),16(R5)     SAVE OUXB PAGING ACCUM FIELDS\n         BR    R11\n         SPACE 1\nPAGMVE   MVC   OUTMSG+37(0),PAGGRAPH\nPAGEPRNT DS    0H\n         LH    R0,JOBASID              LOAD ASID TO CHECK FOR      @TEC\n         L     R4,16                   LOAD CVT ADDR               @TEC\n         L     R4,356(0,R4)            LOAD PVT ADDR               @TEC\n         L     R14,8(R4)               GET ADDR OR AREA IN RIT     @TEC\n         L     R4,0(0,R14)             GET ADDR OF FIRST REAL PFTE @TEC\n         L     R5,4(0,R14)             GET ADDR OF LAST REAL PFTE  @TEC\n         SR    R5,R4                   GET DIFFERENCE              @TEC\n         SRL   R5,5                    GET # ENTRIES               @TEC\n         LA    R5,1(0,R5)              ADD IN LAST ONE             @TEC\n         SR    R14,R14                 CLEAR FRAME COUNT           @TEC\n         SPACE 3                                                   @TEC\nPAGEPR1  SR    R15,R15                 LOAD                        @TEC\n         ICM   R15,3,18(R4)            PFT ASID                    @TEC\n         TM    10(R4),X'80'            AVAILABLE PAGE              @TEC\n         BO    PAGEPR2                 DON'T COUNT IT              @TEC\n         CR    R0,R15                  ASID MATCH                  @TEC\n         BNE   PAGEPR2                 NO, DONT INCR FRAME COUNT   @TEC\n         LA    R14,1(0,R14)            ADD 1 TO FRAME COUNT        @TEC\nPAGEPR2  LA    R4,32(0,R4)             NEXT PFT                    @TEC\n         BCT   R5,PAGEPR1              PROCESS NEXT                @TEC\n         MVC   OUTMSG+4(5),=CL5'STOR='\n         SLL   R14,2                   CHG FRAMES TO K\n         CVD   R14,DOUBLE              CONVERT TO DECIMAL\n         MVC   OUTMSG+9(7),=X'402020202120D2'\n         ED    OUTMSG+9(6),DOUBLE+5\n         BR    R11\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'               SDWA GOTTEN\n         BE    STAEXIT1                NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)         SAVE REGISTER\n         LR    R14,R13                 SAVE ORIG R13\n         L     R13,0(R1)               GET ESTAE PARM\n         L     R2,XSASAVE              GET XSA ADDRESS\n         LR    R13,R14                 RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)       GET PARM ADDRESS\n         BZ    ESTNOP                  IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19     SET LENGTH OF DATA\n         B     ESTNOP                  SKIP CONSTANTS\n         ESTMODS ,                     GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)  GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)         GET RETRY ADDRESS\n         LA    R3,ESTMODS              POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,  GLA-BFG          X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)  GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)         LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGA03D)        LOAD ENTRY POINT ADDR\n         LR    R13,R1                  RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG              ADDRESSING ERROR\n         L     R2,XSASAVE              RELOAD XSA ADDR\n         LA    R11,RETURN              LOAD RET ADDR\nMSGRTN   SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\n         SPACE 3\nRETURN   CLI   WJOB1,C' '              ANY OUTPUT\n         BE    RETURN1                 NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         SPACE 1\nRETURN1  ESTAE 0\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         L     R0,SIZE                 LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13                  LOAD GETMAIN AREA ADDR\n         L     R2,SAVRET               RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n*        MODESET KEY=NZERO,MODE=PROB\n         SR    R15,R15\n         LR    R14,R2\n         BR    R14\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00540100'\n         DC    CL80'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\n         DS    0F\nWAITMSG  DC    X'00540100'\n         DC    31C'-',CL18'   JOB  WAITING   ',31C'-'\n         SPACE 3\n         DS    0F\nSEPRMSG  DC    X'00540100'\n         DC    33C'-',CL14'   JOB  I/O   ',33C'-'\n         SPACE 3\nUCBNRDY  DC    CL38'XXX XXXXXX   NOT READY  FOR XXXXX SEC'\nUCBBUSY  DC    CL38'XXX XXXXXX  XXX%) XXX% BUSY XXXXX SEC'\n         SPACE 3\nPAGGRAPH DC    C'0=1=2=3=4=5=6=7=8==10========15========20========='\nPCTLINE  DC    CL51'0=========1=========2=========3=========4========='\n         SPACE 3\nSRMOVLY  DS    0CL84\n         DC    XL4'00540100'\n         DC    CL5'TSO-',CL10' '\n         DC    CL6'LGCP-',CL7' '\n         DC    CL6'AVCP-',CL7' '\n         DC    CL6'AVPG-',CL7' '\n         DC    CL7'AVUIC-',CL7' '\n         DC    CL6'ASMQ-',CL6' '\n         SPACE 3\nSRCTAB   DC    CL12' '\n         DC    CL12'SWAP TERMOUT'\n         DC    CL12'SWAP TERMIN '\n         DC    CL12'SWAP LONGWT '\n         DC    CL12'SWAP AUXSTOR'\n         DC    CL12'SWAP REALSTR'\n         DC    CL12'SWAP DETWAIT'\n         DC    CL12'SWAP REQUEST'\n         DC    CL12'SWAP ENQEXC '\n         DC    CL12'SWAP WORKEXC'\n         DC    CL12'SWAP UNILATR'\n         DC    CL12'SWAP TRANSIT'\n         DC    CL12'SWAP LOGICAL'\n         DC    CL12'SWAP LG FAIL'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*        THRESHOLD VALUES FOR ALL DISPLAY LIMITS                      *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 5\n         DS    0D\nTHRINTVL DC    CL8'00000020'           DEVICE MONITOR STIMER\nTHRSTIMR DC    F'50'                   NO. OF STIMERS\nTHRTSOPG DC    F'2'                    TSO PERFORMANCE GROUP\nTHRSWAP  DC    F'01'                   HIGH SWAP COUNT THRESHOLD\nTHRFRAME DC    F'001'                  HIGH FRAME USE LIMIT\nTHRFRMTM DC    F'05'                   HIGH FRAME USE TIME THRESHOLD\nTHRABEND DC    F'05'                   JOB ABENDING TIME THRESHOLD\nTHRLOOPP DC    F'05'                   LOOP CPU PERCENT THRESHOLD\nTHRLOOPT DC    F'15'                   LOOP TIME THRESHOLD\nTHRCPULP DC    F'01'                   EXCESS JOB CPU PERCENT THRESHOLD\nTHRCPULT DC    F'05'                   EXCESS JOB CPU TIME THRESHOLD\nTHRSWPWT DC    F'05'                   SWAP WAIT TIME THRESHOLD\nTHRREPWT DC    F'05'                   REPLY WAIT TIME THRESHOLD\nTHRALCWT DC    F'05'                   ALLOCATION WAIT TIME THRESHOLD\nTHRUCBNR DC    F'05'                   DEVICE NOT READY THRESHOLD\n*                                  (DASD)\nTHRUCBBS DC    F'05'                   DEVICE BUSY THRESHOLD\n*                                  (DASD)\nTHRUCBLM DC    F'01'                   DEVICE BUSY LIMIT\n*                                  (DASD)\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nSAVEREGS DS    18F\nACTREGS  DS    18F\nDOUBLE   DS    2F\nDOUBLEX  DS    2F\nDOUBLEY  DS    2F\nMAJOR    DS    2F\nNUMCHK   DS    2F\nPARM     DS    F\nWAITSW   DS    F                       X'FF' IF JOB WAITING\nSAVEBUSY DS    F\nACTSTORG DS    F\nACTCPU   DS    F                       CPU UTIL\nACTCPUH  DS    F                       CPU UTIL (HUNDREDTHS)\nQIOASID  DS    F\nXSASAVE  DS    F\nPFTREGS  DS    2F\nSAVETIM1 DS    F\nSAVETIM2 DS    F\nSAVETIM3 DS    F\nSAVETIM4 DS    F\nCURRWAIT DS    F\n         SPACE 2\nPLIST    DS    3F                                                  @TEC\nADDR     DS    F                                                   @TEC\nWKAREA   DS    0D,XL100                                            @TEC\nUCBDMSAV DS    4F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\n         SPACE 3\n         DS    0F\nACTLIST1 DS    F\nACTMSG1  DS    0CL80\nACTJNAME DS    CL8\n         DS    CL1\nACTSNAME DS    CL8\n         DS    CL2\n         DS    CL5\nPCT1     DS    CL7\n         DS    CL2\nPCTGRPH1 DS    CL47\n         SPACE 3\n         DS    0F\nACTLIST2 DS    F\nACTMSG2  DS    0CL80\n         DS    CL24\nPCT2     DS    CL7\n         DS    CL2\nPCTGRPH2 DS    CL47\n         SPACE 3\n         DS    0F\nOUTMSG   DS    F\nFRMMSG   DS    CL80\n         SPACE 3\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL80\nWJOB1    DS    CL8\n         DS    CL2\nWMSG1    DS    CL15\n         DS    CL1\nWRSN1    DS    CL12\n         DS    CL4\nWJOB2    DS    CL8\n         DS    CL2\nWMSG2    DS    CL15\n         DS    CL1\nWRSN2    DS    CL12\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nJOBTABLE DSECT\n         DS    5F\n*-------------------------------------------------------------*    @TEC\n*  TABLE OF DATA ABOUT UCB'S IN USE BY MONITORED JOB.         *    @TEC\n*                                                             *    @TEC\n*  00-00 SET TO X'FF' IF SLOT IN USE                          *    @TEC\n*  01-03 UCB ADDRESS (TROUBLE IF UCB'S GO ABOVE THE LINE).    *    @TEC\n*  04-07 TIME VALUE FOR BUSY THRESHOLD MONITORING             *    @TEC\n*  08-11 UCB BUSY COUNT                                       *    @TEC\n*  12-15 UCB BUSY COUNT - THIS JOB                            *    @TEC\n*  16-19 CUMULATIVE BUSY %                                    *    @TEC\n*-------------------------------------------------------------*    @TEC\nUCBTAB   DS    100CL20\nUCBTABND DS    F\nJOBNAME  DS    CL8\nJOBSTEP  DS    CL8\nJOBASID  DS    H\nJOBFLAG  DS    H\nJOBTIME  DS    F                       JOB CPUTIME SAVEAREA\nJOBCPUT  DS    F\nJOBINTT  DS    F                       INTERVAL CPU TIME\nJOBEXCP  DS    F\nJOBSIOCT DS    F\nJOBSIOPR DS    F\nJOBLOOP  DS    F                       MOST RECENT TIME NOT WAITING\nJOBCPUL  DS    F\nJOBINTL  DS    F\nJOBWAIT  DS    F\nJOBFRAME DS    F\nJOBFRCNT DS    F\nJOBABEND DS    F\nJOBINTVL DS    F\nJOBPREVT DS    F\nJOBPAGES DS    6F\n         DS    F\n*-------------------------------------------------------------*    @TEC\n* A COMMUNICATIONS AREA PASSED BY THE CONTROL PROGRAM         *    @TEC\n*-------------------------------------------------------------*    @TEC\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F                       ADDRESS OF WORKING STORAGE\n         PRINT NOGEN\n         IHASDWA\n         CVT   DSECT=YES                                           @TEC\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGE03D\n         TITLE 'CSCGE03D -   E  EXCEPTION MONITOR'\n         PRINT NOGEN                                               @TEC\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SP1GE03D -       E  EXCEPTION MONITOR                     ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        06/15/81                                 ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*                  EXCEPTION MONITOR OUTPUT MESSAGES\n*               ---------------------------------------\n*\n*\n*\n*\n*   SYSTEM EXCEPTION MESSAGES\n*   --------------------------------------\n*\n*   CHANNEL XX   XXX% BUSY  FOR XXXXX SEC\n*   UUU VVVVVV   XXX% BUSY  FOR XXXXX SEC\n*   UUU VVVVVV   NOT READY  FOR XXXXX SEC\n*   EXCESS SYSTEM PAGING FOR    XXXXX SEC\n*   LOCAL PAGE I/O DEGRADED FOR XXXXX SEC\n*   WTO BUFFER SHORTAGE, WQE COUNT= XXXXX\n*   SQA AVAIL= XXXXXK, CSA AVAIL= XXXXXK\n*\n*\n*\n*\n*   JOB RESOURCE USAGE EXCEPTION MESSAGES\n*   --------------------------------------\n*\n*   JJJJJJJJ POSSIBLE LOOP FOR  XXXXX SEC\n*   JJJJJJJJ XXX% CPU FOR       XXXXX SEC\n*   JJJJJJJJ ABEND IN PROGRESS  XXXXX SEC\n*   JJJJJJJJ EXCESS SWAP COUNT = XXXXX\n*   JJJJJJJJ XXXXX FRAMES FOR   XXXXX SEC\n*\n*\n*\n*\n*   JOB WAIT EXCEPTION MESSAGES\n*   --------------------------------------\n*\n*    ( NOTE -   A JOB IS CONSIDERED TO BE WAITING IF IT USES 0% CPU  )\n*\n*\n*   JJJJJJJJ ENQ SYSDSN   WAIT  XXXXX SEC       ENQ CONFLICT\n*   JJJJJJJJ I/O ON UUU   WAIT  XXXXX SEC       I/O PENDING\n*   JJJJJJJJ ALLOC QUEUE  WAIT  XXXXX SEC       ALLOC QUEUE\n*   JJJJJJJJ REPLY NN     WAIT  XXXXX SEC       REPLY PENDING\n*   JJJJJJJJ SWAP RRRRRR  WAIT  XXXXX SEC       SWAPPED OUT\n*\n*      RRRRRR -     ( SWAP REASON CODES )\n*                   LONGWT           LONG WAIT\n*                   AUXSTOR          AUXILLARY STORAGE SHORTAGE\n*                   REALSTR          REAL STORAGE SHORTAGE\n*                   DETWAIT          MSO DETECTED WAIT\n*                   REQUEST          REQUEST SWAP\n*                   ENQEXC           ENQ EXCHANGE\n*                   WORKEXC          WORKLOAD EXCHANGE\n*                   UNILATR          UNILATERAL\n*\n*\n*\n*   ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCSCGE03D CSECT\n         LR    R12,R15\n         LA    R7,4095(0,R12)\n         LA    R7,1(0,R7)\n         USING CSCGE03D,R12,R7\n*        MODESET KEY=ZERO,MODE=SUP\n         L     R0,SIZE                 LOAD GETMAIN SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET              SAVE RETURN ADDR\n         ST    R2,XSASAVE              SAVE XSA ADDR\n         USING XSA,R2\n         L     R3,XAL\n         LA    R3,0(0,R3)\n         MVI   PARM,C'A'               ALL SCANS ACTIVE\n         LTR   R3,R3                   ANY PARM\n         BZ    *+10                    NO\n         MVC   PARM(1),0(R3)           SET SCAN TYPE\n         LR    R10,R13                 LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP                BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L         * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL              * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\nCSCSTART L     R4,16                   CVT\n         L     R4,604(0,R4)            RMCT\n         MVC   WTOLIST(84),SRMOVLY\n         L     R5,88(0,R4)             WAMT\n         L     R1,THRTSOPG             TSO PERF GROUP NUMBER\n         SLL   R1,2                    TIMES 4\n         L     R6,88(R1,R5)            WAMP OFFSET                 @TEC\n         AR    R5,R6                   WAMP ADDRESS\n         SR    R14,R14\n         L     R15,0(0,R5)             TOTAL ENDED TRANS\n         LTR   R15,R15                 ZERO TRANS\n         BZ    NOTSO                   YES, BYPASS 0C9\n         L     R15,12(0,R5)            TOTAL ELAPSTM FOR ENDED TRANS\n         D     R14,0(0,R5)             DIVIDE BY ENDED TRANSACTIONS\n         SR    R14,R14\n         D     R14,=F'1000'\nNOTSO    CVD   R15,DOUBLE              AVG SECONDS RESPONSE TIME\n         SRDL  R14,32\n         D     R14,=F'10'\n         CVD   R15,DOUBLEX\n         MVC   WTOLIST+8(7),=X'402021204B2020'\n         ED    WTOLIST+8(4),DOUBLE+6\n         UNPK  WTOLIST+13(2),DOUBLEX+6(2)\n         OI    WTOLIST+14,X'F0'\n*-------------------------------------------------------------*    @TEC\n* GET LONG TERM CPU BUSY PERCENT                              *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,4(0,R4)              CCT                         @TEC\n         LH    R1,104(0,R1)            LONG TERM CPU UTIL          @TEC\n         SRL   R1,8                    SCALED BY 256?              @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+25(4),=X'40212020'\n         ED    WTOLIST+25(4),DOUBLE+6\n*-------------------------------------------------------------*    @TEC\n* GET CURRENT CPU BUSY PERCENT                                *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,4(0,R4)              CCT                         @TEC\n         LH    R1,102(0,R1)            AVERAGE CPU                 @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+38(4),=X'40212020'\n         ED    WTOLIST+38(4),DOUBLE+6\n*-------------------------------------------------------------*    @TEC\n* GET PAGING RATE                                             *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,228(0,R4)            RCT                         @TEC\n         LH    R1,64(0,R1)             AVERAGE PAGING              @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+51(4),=X'40212020'\n         ED    WTOLIST+51(4),DOUBLE+6\n*-------------------------------------------------------------*    @TEC\n* GET AVERAGE UNREFERENCED INTERVAL COUNT                     *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,228(0,R4)            RCT                         @TEC\n         LH    R1,54(0,R1)             AVERAGE UIC                 @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+65(4),=X'40212020'\n         ED    WTOLIST+65(4),DOUBLE+6\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         MVC   WTOLIST(4),=X'00540100'\n         L     R8,XAA                  ASCB/OUCB INFO STORAGE\n         USING JOBTABLE,R8\n         BAL   R10,CHKWQE\n         BAL   R10,CHKSQA\n         BAL   R10,CHKPAG\n         L     R3,THRSTIMR\n         CLI   PARM,C'C'               SKIP CHAN/DEV SCAN?\n         BE    JOBOUT                  YES\n         CLI   PARM,C'D'               DEVICE SCAN ELIMINATE\n         BE    *+8                     YES\n         BAL   R10,CHKUCB              CLEAR UCB TABLE\n         BAL   R10,CHNLOOP\nJOBOUT   L     R4,16                   CVT ADDR\n         L     R4,556(0,R4)            ASVT ADDR\n         LA    R4,524(0,R4)            ASCB SLOT ADDR\n         B     JOBOUT2\nJOBOUT1  L     R5,0(0,R4)              ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R6,56(0,R5)             CSCB ADDR\n         L     R9,144(0,R5)            LOAD OUCB ADDR\n         BAL   R11,ASCBFORM            GO FORMAT ASCB INFO\nJOBOUT2  LA    R4,4(0,R4)              INCR INTO ASVT\n         CLC   1(3,R4),=F'0'           END OF ASVT\n         BE    RETURN                  YES, RETURN\n         TM    0(R4),X'80'             AVAILABLE ENTRY\n         BO    JOBOUT2                 YES, CHECK NEXT\n         B     JOBOUT1                 GO USE IT\nASCBFORM LH    R1,36(0,R5)             ASID\n         MH    R1,=H'48'               TABLE ENTRY LENGTH\n         L     R8,XAA                  JOBTABLE ADDR\n         AR    R8,R1                   JOBTABLE ENTRY ADDR THIS ASID\n         LA    R1,=CL8'*MASTER*'\n         CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BE    ASCBFRM1                YES\n         L     R1,172(0,R5)            JOBNAME POINTER\n         LTR   R1,R1                   ZERO\n         BNZ   ASCBFRM1                NO\n         L     R1,176(0,R5)            STC/TSU NAME POINTER\n         LTR   R1,R1                   ZERO\n         BNZ   ASCBFRM1                NO\n         LA    R1,=CL8'*UNKNWN*'\n         B     ASCBFRM1                NO\nASCBFRM0 XC    JOBFLAG(38),JOBFLAG     CLEAR COUNTERS\n         B     ASCBFRM2+12\nASCBFRM1 CLC   JOBNAME(8),0(R1)        JOB/STC/TSU NAME MATCH\n         BE    ASCBFRM2                YES\n         MVC   JOBNAME(8),0(R1)        JOB/STC/TSU NAME\n         MVC   JOBASID(2),36(R5)       JOB/STC/TSU ASID\n         XC    JOBFLAG(38),JOBFLAG     CLEAR COUNTERS\nASCBFRM2 DS    0H\n         BAL   R10,CHKFRM              CHECK FOR JOBS WITH HIGH FRAMES\n         BAL   R10,CHKSWP              CHECK FOR JOBS WITH SWAP COUNTS\n         LM    R14,R15,64(R5)          TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)         SRB TIME\n         SRDL  R14,22\n         AR    R1,R15\n         C     R1,JOBTIME              COMPARE PREVIOUS CPU TIME\n         BE    ASCBFRM4                EQUAL, JOB WAITING\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         C     R1,JOBCPUT              COMPARE PREVIOUS CPU TIME\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         L     R15,JOBCPUT             LOAD PREVIOUS CPU TIME\n         LTR   R15,R15                 ANY PREVIOUS\n         BNZ   *+8                     YES\n         ST    R1,JOBCPUT              PREVIOUS = CURRENT\n         L     R15,JOBTIME             LOAD PREVIOUS CPU TIME\n         LTR   R15,R15                 ANY PREVIOUS\n         BNZ   *+8                     YES\n         ST    R1,JOBTIME              PREVIOUS = CURRENT\n         LR    R15,R1\n         S     R15,JOBCPUT             SUB PREVIOUS CPU TIME\n         S     R1,JOBTIME              SUB PREVIOUS CPU TIME\n         ST    R15,SAVETIM1            SAVE DIFFERENCE\n         ST    R1,SAVETIM2             SAVE DIFFERENCE\n         XC    JOBWAIT(4),JOBWAIT      CLEAR WAIT COUNTER\n         TIME  BIN\n         L     R1,JOBCPUL              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBCPUL              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBCPUL              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BE    ASCBFRMA                YES\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         L     R15,SAVETIM1            LOAD DIFFERENCE\n         LTR   R15,R15                 NEGATIVE\n         BM    ASCBFRM0                YES\n         SR    R14,R14\n         M     R14,=F'10'              PERCENT\n         SR    R14,R14\n         DR    R14,R1                  PERCENT UTIL\n         BAL   R10,CHKCPU              CHECK JOB CPU UTILIZATION LIMIT\nASCBFRMA TIME  BIN                     POTENTIAL LOOP\n         L     R1,JOBLOOP              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBLOOP              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBLOOP              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R11                   YES, NO LOOP YET\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         L     R15,SAVETIM2            LOAD DIFFERENCE\n         LTR   R15,R15                 NEGATIVE\n         BM    ASCBFRM0                YES\n         SR    R14,R14\n         M     R14,=F'10'              PERCENT\n         SR    R14,R14\n         DR    R14,R1                  PERCENT UTIL\n         C     R15,THRLOOPP            OVER CPU PERCENT THRESHOLD\n         BNL   *+18                    YES\n         XC    JOBLOOP(4),JOBLOOP\n         XC    JOBTIME(4),JOBTIME\n         BR    R11\n         LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             LOOP SECONDS                @TEC\n         CVD   R15,DOUBLE\n         C     R15,THRLOOPT            OVER LOOP THRESHOLD\n         BCR   4,R11                   NO\n         CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BCR   8,R11                   YES, NO LOOP CHECK\n         CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n         BNE   *+10                    JOB\n         CLI   28(R6),X'01'            TSU OR STC\n         BCR   7,R11                   STC\n         L     R1,108(0,R9)            EXCP COUNT\n         L     R15,JOBEXCP             PREVIOUS EXCP COUNT\n         ST    R1,JOBEXCP              SAVE PREVIOUS EXCP COUNT\n         CR    R1,R15                  COMPARE CURRENT TO PREVIOUS\n         BL    ASCBFRM0                CURRENT LOWER,  STEP CHANGE\n         BE    ASCBFRMC                NO EXCPS, POSSIBLE LOOP\n         XC    JOBLOOP(4),JOBLOOP\n         XC    JOBTIME(4),JOBTIME\n         BR    R11\nASCBFRMC CLI   WJOB1,C' '              1ST PASS\n         BNE   ASCBFRM3                NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28'POSSIBLE LOOP FOR XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLE+5\n         BR    R11\nASCBFRM3 MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28'POSSIBLE LOOP FOR XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nASCBFRM4 TIME  BIN\n         L     R1,JOBWAIT              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBWAIT              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBWAIT              INTERVAL TIME\n         XC    JOBLOOP(4),JOBLOOP      CLEAR LOOP COUNTER\n         XC    JOBCPUT(4),JOBCPUT      CLEAR CPU TIME ACCUM\n         XC    JOBCPUL(4),JOBCPUL      CLEAR ELAPSED TIME ACCUM\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R11                   YES, NO WAIT YET\n         BM    ASCBFRM0                NEGATIVE, CLEAR COUNTERS\n         LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             WAIT SECONDS\n         CVD   R15,DOUBLE\n         ST    R15,CURRWAIT\n         LA    R3,WMSG1\n         CLI   WJOB1,C' '              1ST PASS\n         BE    ASCBFRM5                YES\n         LA    R3,WMSG2\nASCBFRM5 MVC   0(12,R3),=CL12' '\n         BAL   R10,CHKENQ              CHECK ENQ OUTSTANDING\n         CLI   0(R3),C' '              ANY ENQS FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         BAL   R10,CHKALC              CHECK ALLOCATION QUEUE\n         CLI   0(R3),C' '              ANY ALLOC PENDING FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         BAL   R10,CHKQIO              CHECK I/O OUTSTANDING\n         CLI   0(R3),C' '              ANY I/O FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         BAL   R10,CHKREP              CHECK REPLY OUTSTANDING\n         CLI   0(R3),C' '              ANY REPLIES FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         L     R1,CURRWAIT             CURRENT WAIT TIME\n         C     R1,THRSWPWT             OVER SWAP WAIT THRESHOLD\n         BCR   4,R11                   NO\n         CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n         BNE   *+10                    JOB\n         CLI   28(R6),X'01'            TSU OR STC\n         BCR   7,R11                   STC OR INIT\n         BAL   R10,CHKSRC              CHECK SWAP REASON CODE\n         CLI   0(R3),C'*'              EXCLUDED SRC\n         BNE   *+10                    NO\n         MVI   0(R3),C' '\n         BR    R11\n         CLI   0(R3),C' '              ANY SRC FOR THIS JOB\n         BNE   ASCBFRM6                YES\n         MVC   0(12,R3),=12C'?'\nASCBFRM6 CLI   WJOB1,C' '              1ST TIME\n         BNE   ASCBFRM7                NO, 2ND PASS\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1+12(16),=CL16' WAIT XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLE+5\n         BR    R11\nASCBFRM7 MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2+12(16),=CL16' WAIT XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nCHNLOOP  DS    0H\n         LR    R4,R10\n         CLI   PARM,C'D'               DEVICE SCAN ELIMINATE\n         BE    *+8                     YES\n         BAL   R10,CHKUCB1             CHECK BUSY UCBS\n         LR    R10,R4\n         L     R1,16                   CVT                         @TEC\n         L     R1,604(0,R1)            RMCT                        @TEC\n         L     R1,280(0,R1)            CMCT                        @TEC\n         L     R14,28(0,R1)            END OF CPMT                 @TEC\n         S     R14,12(0,R1)            MINUS START                 @TEC\n         SRDA  R14,32                                              @TEC\n         D     R14,=F'12'              12 BYTES PER CHPID          @TEC\n         BCTR  R15,0                   MINUS 12 FOR THE HEADER     @TEC\n         LR    R3,R15                  NUMBER OF CHPID'S           @TEC\n         ST    R3,MAXCHPID             SAVE FOR LATER              @TEC\n         L     R14,12(0,R1)            CPMT                        @TEC\n         L     R0,8(0,R14)             START SAMPLE COUNT          @TEC\n         ST    R0,CHBSMPCT             AND SAVE IT                 @TEC\n         LA    R14,12(0,R14)           SKIP OVER HEADER            @TEC\n         SR    R15,R15                 INDEX REGISTER              @TEC\nCHNLOOP1 CLC   8(2,R14),=X'FFFF'       CHPID NOT INSTALLED.        @TEC\n         BE    CHNLOOP2                                            @TEC\n         L     R1,4(0,R14)             BUSY COUNT                  @TEC\n         ST    R1,CHBSYPCT(R15)                                    @TEC\nCHNLOOP2 LA    R14,12(0,R14)           NEXT CPMT ENTRY             @TEC\n         LA    R15,4(0,R15)            NEXT SLOT                   @TEC\n         BCT   R3,CHNLOOP1                                         @TEC\n         STIMER  WAIT,DINTVL=THRINTVL\n         L     R1,16                   CVT                         @TEC\n         L     R1,604(0,R1)            RMCT                        @TEC\n         L     R1,280(0,R1)            CMCT                        @TEC\n         L     R14,28(0,R1)            END OF CPMT                 @TEC\n         S     R14,12(0,R1)            MINUS START                 @TEC\n         SRDA  R14,32                                              @TEC\n         D     R14,=F'12'              12 BYTES PER CHPID          @TEC\n         BCTR  R15,0                   MINUS 12 FOR THE HEADER     @TEC\n         LR    R3,R15                  NUMBER OF CHPID'S           @TEC\n         L     R14,12(0,R1)            CPMT                        @TEC\n         L     R0,8(0,R14)             END SAMPLE COUNT            @TEC\n         S     R0,CHBSMPCT             MINUS STARTING COUNT        @TEC\n         LA    R14,12(0,R14)           SKIP OVER HEADER            @TEC\n         SR    R15,R15                 INDEX REGISTER              @TEC\nCHNLOOP3 CLC   8(2,R14),=X'FFFF'       CHPID NOT INSTALLED.        @TEC\n         BE    CHNLOOP4                                            @TEC\n         CLC   4(4,R14),=F'0'          NO CHANNEL ACTIVITY?        @TEC\n         BE    CHNLOOP4                IF SO, SKIP IT              @TEC\n         L     R4,4(0,R14)             BUSY SAMPLES                @TEC\n         S     R4,CHBSYPCT(R15)        MINUS PRIOR                 @TEC\n         SRDA  R4,32                                               @TEC\n         M     R4,=F'100'                                          @TEC\n         DR    R4,R0                                               @TEC\n         ST    R5,CHBSYPCT(R15)        SAVE CHANNEL BUSY %         @TEC\nCHNLOOP4 LA    R14,12(0,R14)           NEXT CPMT ENTRY             @TEC\n         LA    R15,4(0,R15)            NEXT SLOT                   @TEC\n         BCT   R3,CHNLOOP3                                         @TEC\n         LR    R4,R10\n         CLI   PARM,C'D'               DEVICE SCAN ELIMINATE\n         BE    *+8                     YES\n         BAL   R10,CHKUCB6             CHECK BUSY UCBS\n         LR    R10,R4\n         L     R14,MAXCHPID            PICK UP HIGHEST CHPID       @TEC\n         LA    R5,THRCH1LM             CHANNEL BUSY PERCENT LIMIT\n         LA    R6,THRCH1BS             CHANNEL BUSY TIME THRESHOLD\n         LA    R3,CHBSYPCT                                         @TEC\n         LA    R4,CHBSYTIM                                         @TEC\n         LA    R9,CHPNUMS                                          @TEC\nCHNLOOP5 BAL   R11,CHNDISP                                         @TEC\n         L     R14,R14SAVE             RESTORE LOOP REGISTER       @TEC\n         LA    R3,4(0,R3)              BUSY PCT NEXT CHPID         @TEC\n         LA    R4,4(0,R4)              BUSY TIME NEXT CHPID        @TEC\n         LA    R9,2(0,R9)              NEXT CHPID NUMBER           @TEC\n         LA    R5,8(0,R5)              NEXT PERCENT THRESHOLD      @TEC\n         LA    R6,8(0,R6)              NEXT TIME THRESHOLD         @TEC\n         BCT   R14,CHNLOOP5                                        @TEC\n         BR    R10\nCHNDISP  ST    R14,R14SAVE                                         @TEC\n         L     R1,0(0,R3)\n         C     R1,0(0,R5)              THRESHOLD REACHED\n         BL    CHNDISP1                NO\n         TIME  BIN\n         L     R1,0(0,R4)              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,0(0,R4)              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,0(0,R4)              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R11                   YES\n         BP    CHNDISP2\nCHNDISP1 XC    0(4,R4),0(R4)\n         BR    R11\nCHNDISP2 LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         L     R1,0(0,R3)              PERCENT BUSY\n         CVD   R1,DOUBLE\n         CVD   R15,DOUBLEX\n         C     R15,0(0,R6)             CHANNEL BUSY TIME THRESHOLD\n         BCR   4,R11                   NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHNDISP3                NO, 2ND HALF\n         MVC   WJOB1(38),=CL38'CHANNEL XX   XXX% BUSY  FOR XXXXX SEC'\n         MVC   WJOB1+8(2),0(R9)        CHANNEL NUMBER\n         MVC   WJOB1+12(4),=X'40202120'\n         ED    WJOB1+12(4),DOUBLE+6\n         MVC   WJOB1+27(6),=X'402020202120'\n         ED    WJOB1+27(6),DOUBLEX+5\n         BR    R11\nCHNDISP3 MVC   WJOB2(38),=CL38'CHANNEL XX   XXX% BUSY  FOR XXXXX SEC'\n         MVC   WJOB2+8(2),0(R9)        CHANNEL NUMBER\n         MVC   WJOB2+12(4),=X'40202120'\n         ED    WJOB2+12(4),DOUBLE+6\n         MVC   WJOB2+27(6),=X'402020202120'\n         ED    WJOB2+27(6),DOUBLEX+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nCHKCPU   STM   R0,R15,SAVEREGS\n         CVD   R15,DOUBLE\n         C     R15,THRCPULP            OVER CPU PERCENT THRESHOLD\n         BL    CHKCPU2                 NO\n         LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             LOOP SECONDS                @TEC\n         CVD   R15,DOUBLEX\n         C     R15,THRCPULT            OVER CPU THRESHOLD\n         BL    CHKCPU3                 NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKCPU1                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28' XXX% CPU FOR     XXXXX SEC'\n         MVC   WMSG1(4),=X'40202120'\n         ED    WMSG1(4),DOUBLE+6\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLEX+5\n         B     CHKCPU3\nCHKCPU1  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28' XXX% CPU FOR     XXXXX SEC'\n         MVC   WMSG2(4),=X'40202120'\n         ED    WMSG2(4),DOUBLE+6\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLEX+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         B     CHKCPU3\nCHKCPU2  XC    JOBCPUL(4),JOBCPUL\n         XC    JOBCPUT(4),JOBCPUT\nCHKCPU3  LM    R0,R15,SAVEREGS\n         BR    R10\nCHKPAG   L     R9,16                   CVT\n         L     R9,604(0,R9)            RMCT\n         SR    R1,R1\n         L     R1,228(0,R9)            RCT                         @TEC\n         LH    R1,64(0,R1)             AVERAGE PAGING              @TEC\n         C     R1,THRPAGLM             OVER PAGING THRESHOLD\n         BH    CHKPAG1                 YES\n         XC    PAGHITIM(4),PAGHITIM\n         B     CHKPAG3                 CHECK PAGE I/O\nCHKPAG1  TIME  BIN\n         L     R1,PAGHITIM             OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,PAGHITIM             OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,PAGHITIM             INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BZ    CHKPAG3                 YES\n         BP    CHKPAG2\n         XC    PAGHITIM(4),PAGHITIM\n         B     CHKPAG3                 CHECK PAGE I/O\nCHKPAG2  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         C     R15,THRPAGHI            PAGING HIGH TIME THRESHOLD\n         BL    CHKPAG3                 NO, CHECK PAGE I/O\n         CVD   R15,DOUBLE\n         CLI   WJOB1,C' '\n         BNE   CHKPAG2A\n         MVC   WJOB1(38),=CL38'EXCESS SYSTEM PAGING FOR    XXXXX SEC'\n         MVC   WJOB1+27(6),=X'402020202120'\n         ED    WJOB1+27(6),DOUBLE+5\n         B     CHKPAG3\nCHKPAG2A MVC   WJOB2(38),=CL38'EXCESS SYSTEM PAGING FOR    XXXXX SEC'\n         MVC   WJOB2+27(6),=X'402020202120'\n         ED    WJOB2+27(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\nCHKPAG3  L     R1,16                   CVT\n         L     R1,704(0,R1)            ASMVT\n         L     R1,8(0,R1)              PART\n         LA    R1,80(0,R1)             PART ENTRIES\nCHKPAG4  TM    8(R1),X'E0'             PLPA,COMMON OR DUPLEX?\n         BZ    CHKPAG6                 NO.\nCHKPAG5  LA    R1,96(0,R1)             NEXT PART ENTRY             @TEC\n         CLI   8(R1),X'00'             END OF PART\n         BE    CHKPAG5A                YES, EXIT\n         TM    9(R1),X'80'             NOT IN USE\n         BO    CHKPAG5                 YES, GET NEXT\n         B     CHKPAG4\nCHKPAG5A XC    PAGIOTIM(4),PAGIOTIM\n         BR    R10\nCHKPAG6  L     R14,56(0,R1)            PARERQTM -   BURST VALUE\n         SRL   R14,8                   DIVIDE BY 256\n         CVD   R14,DOUBLE\n         C     R14,THRPAGTM            OVER PAGE I/O AVG SERV TIME\n         BH    CHKPAG7                 YES\n         B     CHKPAG5\nCHKPAG7  TIME  BIN\n         L     R1,PAGIOTIM             OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,PAGIOTIM             OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,PAGIOTIM             INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R10                   YES\n         BP    CHKPAG8\n         XC    PAGIOTIM(4),PAGIOTIM\n         BR    R10\nCHKPAG8  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         C     R15,THRPAGIO            PAGE I/O HIGH TIME THRESHOLD\n*                                  REACHED\n         BCR   4,R10                   NO, EXIT\n         CVD   R15,DOUBLE\n         CLI   WJOB1,C' '\n         BNE   CHKPAG8A\n         MVC   WJOB1(38),=CL38'LOCAL PAGE I/O DEGRADED FOR XXXXX SEC'\n         MVC   WJOB1+27(6),=X'402020202120'\n         ED    WJOB1+27(6),DOUBLE+5\n         BR    R10\nCHKPAG8A MVC   WJOB2(38),=CL38'LOCAL PAGE I/O DEGRADED FOR XXXXX SEC'\n         MVC   WJOB2+27(6),=X'402020202120'\n         ED    WJOB2+27(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\nCHKREP   L     R1,CURRWAIT             CURRENT WAIT TIME\n         C     R1,THRREPWT             OVER REPLY WAIT THRESHOLD\n         BCR   4,R10                   NO\n         L     R1,16                   CVT\n         L     R1,100(0,R1)            UCM BASE\n         L     R1,28(0,R1)             1ST ORE\n         LA    R1,0(0,R1)\nCHKREP1  LTR   R1,R1                   ANY OUTSTANDING REPLIES\n         BCR   8,R10                   NO\n         CLC   JOBASID(2),24(R1)       ASID MATCH\n         BE    CHKREP2                 YES\n         L     R1,0(0,R1)              NEXT ORE\n         LA    R1,0(0,R1)\n         B     CHKREP1\nCHKREP2  MVC   0(12,R3),=CL12'REPLY '\n         MVC   7(2,R3),4(R1)           REPLY ID\n         BR    R10\nCHKSRC   LA    R1,SRCTAB\n         SR    R15,R15\n         IC    R15,41(0,R9)            SWAP REASON CODE\n         CH    R15,=H'13'              MAX SWAP REASON CODE\n         BCR   2,R10                   OVER MAX\n         MH    R15,=H'12'\n         LA    R1,0(R15,R1)            SWAP REASON CODE OUTPUT\n         MVC   0(12,R3),0(R1)\n         BR    R10\nCHKFRM   CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BCR   8,R10                   YES, NO FRAME CHECK\n*        CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n*        BNE   *+10                    JOB\n*        CLI   28(R6),X'01'            TSU OR STC\n*        BCR   7,R10                   STC\n         L     R1,16                   LOAD CVT ADDR\n         L     R1,356(0,R1)            LOAD PVT ADDR\n         L     R14,8(R1)           GET ADDR OR AREA IN RIT         @TEC\n         L     R0,0(0,R14)         GET ADDR OF FIRST REAL PFTE     @TEC\n         L     R1,4(0,R14)         GET ADDR OF LAST REAL PFTE      @TEC\n         SR    R1,R0               GET DIFFERENCE                  @TEC\n         SRL   R1,5                GET # ENTRIES                   @TEC\n         LA    R1,1(0,R1)          ADD IN LAST ONE                 @TEC\n         LR    R14,R1              PUT IN PROPER AREA              @TEC\n         SR    R1,R1                   CLEAR FRAME COUNT\n         LR    R15,R0              FIRST PFTE                      @TEC\nCHKFRM1  CLC   18(2,R15),JOBASID       ASID MATCH                  @TEC\n         BNE   CHKFRM2                 NO\n         LA    R1,1(0,R1)              ADD 1 TO FRAME COUNT\nCHKFRM2  LA    R15,16(0,R15)           NEXT PFT\n         BCT   R14,CHKFRM1             PROCESS NEXT\n         L     R15,JOBFRCNT            JOB FRAME COUNT  (WEIGHTED AVG)\n         XC    JOBFRCNT(4),JOBFRCNT\n         C     R1,THRFRAME             THRESHOLD REACHED\n         BL    CHKFRM3                 NO\n         LTR   R15,R15                 ZERO\n         BNZ   *+6                     NO\n         LR    R15,R1                  FAKE START\n         MH    R15,=H'3'               3/4 PREVIOUS\n         AR    R1,R15                  1/4 CURRENT\n         SRL   R1,2\n         ST    R1,JOBFRCNT\n         CVD   R1,DOUBLE\n         TIME  BIN\n         L     R1,JOBFRAME             OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,JOBFRAME             OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,JOBFRAME             INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BCR   8,R10                   YES\n         BP    CHKFRM4\nCHKFRM3  XC    JOBFRAME(4),JOBFRAME\n         BR    R10\nCHKFRM4  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         CVD   R15,DOUBLEX\n         C     R15,THRFRMTM            FRAME USAGE TIME THRESHOLD\n*                                  REACHED\n         BCR   4,R10                   NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKFRM5                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28' XXXXX FRAMES FOR XXXXX SEC'\n         MVC   WMSG1+17(6),=X'402020202120'\n         ED    WMSG1+17(6),DOUBLEX+5\n         MVC   WMSG1(6),=X'402020202120'\n         ED    WMSG1(6),DOUBLE+5\n         BR    R10\nCHKFRM5  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28' XXXXX FRAMES FOR XXXXX SEC'\n         MVC   WMSG2+17(6),=X'402020202120'\n         ED    WMSG2+17(6),DOUBLEX+5\n         MVC   WMSG2(6),=X'402020202120'\n         ED    WMSG2(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\nCHKSWP   CLC   36(2,R5),=H'1'          MASTER SCHEDULER\n         BCR   8,R10                   YES, NO SWAP CHECK\n         CLC   172(4,R5),=F'0'         JOB OR STC/TSU\n         BCR   8,R10                   STC OR TSO\n         LH    R1,42(0,R9)             SWAP COUNT\n         CVD   R1,DOUBLE\n         C     R1,THRSWAP              THRESHOLD REACHED\n         BCR   4,R10\nCHKSWP1  CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKSWP2                 NO, 2ND HALF\n         MVC   WJOB1(8),JOBNAME\n         MVC   WMSG1(28),=CL28'EXCESS SWAP COUNT = XXXXX'\n         MVC   WMSG1+19(6),=X'402020202120'\n         ED    WMSG1+19(6),DOUBLE+5\n         BR    R10\nCHKSWP2  MVC   WJOB2(8),JOBNAME\n         MVC   WMSG2(28),=CL28'EXCESS SWAP COUNT = XXXXX'\n         MVC   WMSG2+19(6),=X'402020202120'\n         ED    WMSG2+19(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\n*-------------------------------------------------------------*    @TEC\n* HOW MANY WTO BUFFERS ARE IN USE?                            *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKWQE   L     R1,16                   CVT\n         L     R1,100(0,R1)            UCM BASE\n         SR    R14,R14\n         L     R15,52(0,R1)            CURRENT WQE COUNT           @TEC\n         CVD   R15,DOUBLE\n         M     R14,=F'100'\n         LH    R1,238(0,R1)            WQE COUNT LIMIT\n         DR    R14,R1                  PERCENT USED\n         C     R15,THRWQELM            WQE THRESHOLD LIMIT REACHED\n         BCR   4,R10                   NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKWQE1                 NO, 2ND HALF\n         MVC   WJOB1(38),=CL38'WTO BUFFER SHORTAGE, WQE COUNT= XXXXX'\n         MVC   WJOB1+31(6),=X'402020202120'\n         ED    WJOB1+31(6),DOUBLE+5\n         BR    R10\nCHKWQE1  MVC   WJOB2(38),=CL38'WTO BUFFER SHORTAGE, WQE COUNT= XXXXX'\n         MVC   WJOB2+31(6),=X'402020202120'\n         ED    WJOB2+31(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\n*-------------------------------------------------------------*    @TEC\n* HOW MUCH SQA IS AVAILABLE? ADD UP TOTAL FREE AS PER FBQE'S  *    @TEC\n* AND SUBTRACT GDACSARE.                                      *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKSQA   DS    0H\n         L     R1,16               CVT                             @TEC\n         L     R6,560(0,R1)        GDA                             @TEC\n         L     R4,104(0,R6)        LAST FBQE FOR CSA               @TEC\n         L     R5,100(0,R6)        1ST FBQE FOR CSA                @TEC\n         SR    R3,R3                                               @TEC\n         CR    R4,R5               LAST IN CHAIN                   @TEC\n         BE    VCDISPB             YES                             @TEC\nVCDISPA  A     R3,8(0,R5)          ADD FREE AREA                   @TEC\n         L     R5,0(0,R5)          NEXT FBQE                       @TEC\n         CR    R4,R5               END OF CHAIN                    @TEC\n         BNE   VCDISPA             NO                              @TEC\nVCDISPB  A     R3,8(0,R4)          ADD FREE AREA OF LAST           @TEC\n         SRL   R3,10                   DIVIDE BY 1K                @TEC\n         CVD   R3,DOUBLE                                           @TEC\n         SLL   R3,10                                               @TEC\n         L     R1,132(0,R6)        SQA+CSA AVAIL                   @TEC\n         SR    R1,R3               SUBTRACT CSA                    @TEC\n         BP    *+6                 IF NOT NEGATIVE, BYPASS         @TEC\n         SR    R1,R1                                               @TEC\n         SRL   R1,10                   DIVIDE BY 1K\n         CVD   R1,DOUBLEX\nCHKSQA4  C     R1,THRSQALM             THRESHOLD REACHED\n         BCR   2,R10\nCHKSQA5  CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKSQA6                 NO, 2ND HALF\n         MVC   WJOB1(38),=CL38'SQA AVAIL= XXXXXK, CSA AVAIL= XXXXXK'\n         MVC   WJOB1+10(6),=X'402020202120'\n         ED    WJOB1+10(6),DOUBLEX+5\n         MVC   WJOB1+29(6),=X'402020202120'\n         ED    WJOB1+29(6),DOUBLE+5\n         BR    R10\nCHKSQA6  MVC   WJOB2(38),=CL38'SQA AVAIL= XXXXXK, CSA AVAIL= XXXXXK'\n         MVC   WJOB2+10(6),=X'402020202120'\n         ED    WJOB2+10(6),DOUBLEX+5\n         MVC   WJOB2+29(6),=X'402020202120'\n         ED    WJOB2+29(6),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R10\nCHKENQ   L     R1,16                   CVT\n         L     R1,640(0,R1)            FIRST VALID MAJOR QCB\n         ST    R2,SAVEREGS\n         B     CHKENQ1+4               1ST MAJOR PROCESS\nCHKENQ1  L     R1,0(0,R1)              NEXT MAJOR\n         LTR   R1,R1                   EXIST\n         BZ    CHKENQ8                 NO, END OF QCBS\n         MVC   MAJOR(8),16(R1)         SAVE MAJOR QCB\n         L     R14,8(0,R1)             1ST MINOR\n         LTR   R14,R14                 EXIST\n         BZ    CHKENQ1                 NO\n         B     CHKENQ3\nCHKENQ2  L     R14,0(0,R14)            NEXT MINOR QCB\n         LTR   R14,R14                 EXIST\n         BZ    CHKENQ1                 NO\nCHKENQ3  L     R15,8(0,R14)            1ST QEL\nCHKENQ4  LTR   R15,R15                 EXIST\n         BZ    CHKENQ2                 NO\n         TM    12(R15),X'80'           SHARED\n         BZ    CHKENQ5                 NO\n         L     R15,0(0,R15)            NEXT QEL\n         LA    R15,0(0,R15)\n         B     CHKENQ4\nCHKENQ5  C     R15,8(0,R14)            IS EXCL QEL THE 1ST QEL\n         BNE   CHKENQ6                 NO\n         L     R2,0(0,R15)             NEXT QEL\n         LA    R2,0(0,R2)\n         LTR   R2,R2                   EXIST\n         BZ    CHKENQ2                 NO\nCHKENQ6  L     R15,0(0,R15)            NEXT QEL\n         LA    R15,0(0,R15)\n         LTR   R15,R15                 EXIST\n         BZ    CHKENQ2                 NO\n         CLC   JOBASID(2),14(R15)      ASID MATCH\n         BE    CHKENQ7                 YES, ENQ CONFLICT THIS JOB\n         B     CHKENQ6\nCHKENQ7  MVC   0(12,R3),=CL12'ENQ'\n         MVC   4(8,R3),MAJOR\nCHKENQ8  L     R2,SAVEREGS\n         BR    R10\nCHKALC   L     R1,CURRWAIT             CURRENT WAIT TIME\n         C     R1,THRALCWT             OVER ALLOCATION WAIT THRESHOLD\n         BCR   4,R10                   NO\n         L     R1,16                   CVT\n         L     R1,548(0,R1)            AQTOP\n         L     R14,0(0,R1)             1ST QUEUE ELEMENT\nCHKALC1  CR    R1,R14                  END OF CHAIN\n         BCR   8,R10                   YES, NOT IN ALLOCATION\n         SR    R15,R15\n         LH    R15,22(0,R14)           ASID\n         CH    R15,JOBASID             ASID MATCH\n         BE    CHKALC2\n         L     R14,0(0,R14)            NEXT QUEUE ELEMENT\n         B     CHKALC1\nCHKALC2  MVC   0(12,R3),=CL12'ALLOC QUEUE'\n         BR    R10\n*-------------------------------------------------------------*    @TEC\n* INITIALIZE UCBTAB. CLEAR COUNT FIELDS IF NO ACTIVITY.       *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKUCB   STM   R0,R15,SAVEREGS\n         MVC   UCBTABND(2),=X'FFFF'\n         LA    R6,UCBTAB-16                                        @TEC\nCHKUCB0  LA    R6,16(0,R6)                                         @TEC\n         CLC   0(2,R6),=X'FFFF'        END OF TABLE\n         BE    CHKUCB9                 YES\n         CLI   12(R6),X'00'            BUSY PERCENT?               @TEC\n         BNE   CHKUCB0                 NO\n         XC    4(12,R6),4(R6)\n         B     CHKUCB0\n*-------------------------------------------------------------*    @TEC\n* (RE)BUILD UCBTAB. FILL IN ADDRESSES OF ONLINE DASD.         *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKUCB1  XC    UCBDMSAV(24),UCBDMSAV\n         STM   R0,R15,SAVEREGS\n         L     R9,CVTPTR               CVT ADDR                    @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         XC    WKAREA(100),WKAREA      CLEAR WORK AREA             @TEC\n         LA    R1,WKAREA               SETUP PARAMETER LIST        @TEC\n         ST    R1,PLIST                                            @TEC\n         LA    R1,=X'20'               SPECIFY DASD                @TEC\n         ST    R1,PLIST+4                                          @TEC\n         LA    R1,ADDR                 WORD TO PUT ADDRESS OF UCB  @TEC\n         ST    R1,PLIST+8                                          @TEC\n         OI    PLIST+8,X'80'           31 BIT PARM END SET         @TEC\nCHKUCB1A BAL   R10,UCBDML#0            GET NEXT UCB ADDR\n         LTR   R1,R1                   END OF UCBS\n         BZ    CHKUCB9                 YES, EXIT\n         CLI   18(R1),X'20'            DASD\n         BNE   CHKUCB1A                NO\n         TM    3(R1),X'88'             ONLINE/ALLOCATED\n         BNO   CHKUCB1A                NO\n         LA    R6,UCBTAB-16                                        @TEC\nCHKUCB2  LA    R6,16(0,R6)             NEXT UCB ENTRY              @TEC\n         CLC   0(2,R6),=X'FFFF'        END OF UCB TABLE\n         BE    CHKUCB3                 YES, CHECK FOR EMPTY SLOT\n         CLM   R1,7,1(R6)              UCB ADDR MATCH              @TEC\n         BNE   CHKUCB2                 NO\n         B     CHKUCB5\nCHKUCB3  LA    R6,UCBTAB-16                                        @TEC\nCHKUCB4  LA    R6,16(0,R6)             NEXT UCB ENTRY              @TEC\n         CLC   0(2,R6),=X'FFFF'        END OF UCB TABLE\n         BE    CHKUCB1A                YES, NEXT UCB\n         CLC   0(2,R6),=X'0000'        EMPTY SLOT\n         BNE   CHKUCB4                 NO, NEXT ENTRY\nCHKUCB5  STCM  R1,7,1(R6)              SAVE UCB ADDR               @TEC\n         MVI   0(R6),X'FF'             SLOT IN USE                 @TEC\n*        L     R1,8(0,R6)\n*        LA    R1,1(0,R1)\n*        ST    R1,8(0,R6)\n         B     CHKUCB1A\n*-------------------------------------------------------------*    @TEC\n* UPDATE COUNT AND BUSY FIELDS FOR ONLINE DASD UCBS.          *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKUCB6  STM   R0,R15,SAVEREGS\n         LA    R6,UCBTAB-16                                        @TEC\nCHKUCB7  LA    R6,16(0,R6)                                         @TEC\n         CLC   0(2,R6),=X'FFFF'        END OF UCB TABLE\n         BE    CHKUCB9                 YES, EXIT\n         CLC   0(2,R6),=X'0000'        EMPTY SLOT                  @TEC\n         BE    CHKUCB7                 YES. SKIP IT.               @TEC\n         SR    R1,R1\n         ICM   R1,7,1(R6)              UCB ADDR                    @TEC\n         LA    R3,UCBNRDY\n         LA    R4,THRUCBNR\n         TM    6(R1),X'40'             NOT READY\n         BO    CHKUCB7A\n         LA    R3,UCBBUSY\n         LA    R4,THRUCBBS\n         SR    R14,R14\n         LH    R15,8(0,R6)             UCB SCAN COUNT              @TEC\n         LA    R15,1(0,R15)                                        @TEC\n         STH   R15,8(0,R6)             UPDATE SCAN COUNT           @TEC\n         TM    6(R1),X'8A'             BUSY AND/OR CHANNEL PROGRAM @TEC\n         BZ    CHKUCBNB                NO                          @TEC\n         LR    R15,R1                  UCB ADDRESS                 @TEC\n         S     R15,=F'4'                                           @TEC\n         L     R15,0(0,R15)            IOQ ADDRESS                 @TEC\n         LTR   R15,R15                 ANY IOQ                     @TEC\n         BZ    CHKUCBB                 NO. CALL IT BUSY            @TEC\n         L     R15,8(0,R15)            IOSB ADDRESS                @TEC\n         LTR   R15,R15                 ANY IOSB                    @TEC\n         BZ    CHKUCBB                 NO. CALL IT BUSY            @TEC\n         CLI   4(R15),X'0E'            SUSPEND/RESUME?             @TEC\n         BE    CHKUCBNB                SAY NOT BUSY                @TEC\nCHKUCBB  DS    0H                                                  @TEC\n         LH    R15,10(0,R6)            UCB BUSY COUNT              @TEC\n         LA    R15,1(0,R15)                                        @TEC\n         STH   R15,10(0,R6)            UPDATE BUSY COUNT           @TEC\nCHKUCBNB DS    0H                                                  @TEC\n         LH    R14,10(0,R6)            BUSY COUNT                  @TEC\n         SRDA  R14,32                                              @TEC\n         M     R14,=F'100'             TIMES 100                   @TEC\n         LR    R14,R15                                             @TEC\n         SRDA  R14,32                                              @TEC\n         LH    R0,8(0,R6)              SCAN COUNT                  @TEC\n         DR    R14,R0                  R15 = PERCENT BUSY          @TEC\n         SR    R1,R1\n*        IC    R1,12(0,R6)             CUMULATIVE PERCENT          @TEC\n*        LTR   R1,R1                   ZERO\n*        BNZ   *+6                     NO\n*        LR    R1,R15                  FAKE START\n*        MH    R1,=H'3'                3/4 PREVIOUS\n*        AR    R1,R15                  1/4 CURRENT\n*        SRL   R1,2\n         STC   R15,12(0,R6)             NEW CUM PERCENT            @TEC\n         C     R15,THRUCBLM            THRESHOLD REACHED\n         BL    CHKUCB7B                NO\n*-------------------------------------------------------------*    @TEC\n* SAVE TIME WHEN DASD EXCEEDS BUSY THRESHOLD.                 *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKUCB7A TIME  BIN\n         L     R1,4(0,R6)              OLD TIME\n         LTR   R1,R1                   ANY OLD TIME\n         BNZ   *+8                     YES\n         ST    R0,4(0,R6)              OLD TIME = NEW TIME\n         LR    R1,R0                   BINARY TIME\n         S     R1,4(0,R6)              INTERVAL TIME\n         LTR   R1,R1                   TIME EQUAL 0\n         BZ    CHKUCB7                 YES\n         BP    CHKUCB8\n*-------------------------------------------------------------*    @TEC\n* ZERO TIME IF DASD NOT ABOVE BUSY THRESHOLD.                 *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKUCB7B XC    4(4,R6),4(R6)\n         B     CHKUCB7\n*-------------------------------------------------------------*    @TEC\n* DISPLAY MESSAGE FOR DASD NOT READY OR TOO BUSY.             *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKUCB8  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'             SECONDS\n         SR    R1,R1\n         IC    R1,12(0,R6)             BUSY PERCENT.               @TEC\n         CVD   R1,DOUBLE\n         CVD   R15,DOUBLEX\n         C     R15,0(0,R4)             TIME THRESHOLD REACHED\n         BL    CHKUCB7                 NO\n         CLI   WJOB1,C' '              1ST PASS\n         BNE   CHKUCB8A                NO, 2ND HALF\n         MVC   WJOB1(38),0(R3)\n         SR    R1,R1\n         ICM   R1,7,1(R6)              UCB ADDR                    @TEC\n         MVC   WJOB1(3),13(R1)         DEVICE ADDRESS\n         MVC   WJOB1+4(6),28(R1)       DEVICE VOLSER\n         MVC   WJOB1+27(6),=X'402020202120'\n         ED    WJOB1+27(6),DOUBLEX+5\n         LA    R1,UCBNRDY\n         CR    R1,R3                   NOT READY MESSAGE\n         BE    CHKUCB7                 YES, NO PERCENT\n         MVC   WJOB1+12(4),=X'40202120'\n         ED    WJOB1+12(4),DOUBLE+6\n         B     CHKUCB7\nCHKUCB8A MVC   WJOB2(38),0(R3)\n         SR    R1,R1\n         ICM   R1,7,1(R6)              UCB ADDR                    @TEC\n         MVC   WJOB2(3),13(R1)         DEVICE ADDRESS\n         MVC   WJOB2+4(6),28(R1)       DEVICE VOLSER\n         MVC   WJOB2+27(6),=X'402020202120'\n         ED    WJOB2+27(6),DOUBLEX+5\n         LA    R1,UCBNRDY\n         CR    R1,R3                   NOT READY MESSAGE\n         BE    CHKUCB8B                YES, NO PERCENT\n         MVC   WJOB2+12(4),=X'40202120'\n         ED    WJOB2+12(4),DOUBLE+6\nCHKUCB8B LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         B     CHKUCB7\nCHKUCB9  LM    R0,R15,SAVEREGS\n         BR    R10\nCHKQIO   XC    UCBDMSAV(24),UCBDMSAV\n         MVC   QIOASID(2),JOBASID      SAVE ASID\n         STM   R0,R15,SAVEREGS\n         L     R9,CVTPTR               CVT ADDR                    @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         XC    WKAREA(100),WKAREA      CLEAR WORK AREA             @TEC\n         LA    R1,WKAREA               SETUP PARAMETER LIST        @TEC\n         ST    R1,PLIST                                            @TEC\n         LA    R1,=X'20'               SPECIFY DASD                @TEC\n         ST    R1,PLIST+4                                          @TEC\n         LA    R1,ADDR                 WORD TO PUT ADDRESS OF UCB  @TEC\n         ST    R1,PLIST+8                                          @TEC\n         OI    PLIST+8,X'80'           31 BIT PARM END SET         @TEC\nCHKQIO1  BAL   R10,UCBDML#0            GET NEXT UCB ADDR\n         LTR   R1,R1                   END OF UCBS\n         BZ    CHKQIO8A                YES, EXIT                   @TEC\n         B     CHKQIO2\nCHKQIO2  LR    R2,R1                   UCB ADDR\n         CLI   18(R1),X'20'            DASD\n         BE    *+18                    YES\n         L     R4,20(0,R1)             UCB EXTENTION ADDR\n         CLC   QIOASID(2),14(R4)       ASID MATCH\n         BNE   CHKQIO1                 NO, NEXT UCB\n         LR    R4,R1                   UCB ADDR\n         S     R4,=F'4'                DECR ADDR -4\n         L     R4,0(0,R4)              IOQ ADDR\n         LA    R4,0(0,R4)\n         LTR   R4,R4                   ANY IOQ\n         BZ    CHKQIO1                 NO, NEXT UCB\n         L     R5,8(0,R4)              IOSB ADDR\n         LA    R5,0(0,R5)\n         LTR   R5,R5                   EXIST\n         BZ    CHKQIO1                 NO, NEXT UCB\n         B     CHKQIO9\nCHKQIO8  MVC   0(12,R3),=CL12'I/O ON'\n         MVC   8(3,R3),13(R2)\nCHKQIO8A LM    R0,R15,SAVEREGS\n         BR    R10\nCHKQIO9  C     R2,16(0,R5)             UCB ADDR MATCH\n         BNE   CHKQIO8A                NO, EXIT\n         CLC   QIOASID(2),6(R5)        ASID MATCH\n         BE    CHKQIO8                 YES\n         B     CHKQIO1\nUCBDML#0 DS    0H\n         ST    R8,UCBDMSAV             SAVE WORK REG 1\n         ST    R10,UCBDMSAV+8          SAVE WORK REG 3\n         ST    R11,UCBDMSAV+12         SAVE WORK REG 4\nUCBLOOP1 L     R9,CVTPTR               CVT ADDR                    @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         LA    R1,PLIST                POINT AT PARM LIST          @TEC\n         LR    R15,R9                  GET MODULE ADDRESS          @TEC\n         BALR  R14,R15                 CALL MVS                    @TEC\n         LTR   R15,R15                 UCB FOUND?                  @TEC\n         BZ    UCBFND                  YES.                        @TEC\n         SR    R1,R1                   SAY THAT'S ALL.             @TEC\n         B     UCBDMCON                AND GO HOME.                @TEC\nUCBFND   DS    0H\n         L     R1,ADDR                 GET ADDR OF UCB             @TEC\n         L     R8,UCBDMLOW             SET SEARCH ARGUMENT\n         SPACE 1\nUCBDML#1 LA    R8,1(0,R8)              NEXT UNIT ADDR POSSIBLE\n         L     R10,=X'0000FFFF'        SET MAX NEXT LEAST HIGH\n         SPACE 1\nUCBDML#2 LTR   R1,R1                   MORE UCBS?                  @TEC\n         BZ    UCBDMOUT                NO, GO PROCESS\n         SPACE 1\nUCBDML#4 TM    6(R1),X'8A'             BUSY AND/OR CHANNEL PROGRAM\n         NOP   UCBLOOP1                NO, NEXT UCB                @TEC\n         TM    18(R1),X'20'            DASD?                       @TEC\n         BZ    UCBLOOP1                NO. SKIP IT.                @TEC\n         BAL   R11,UCBDMCNV            CONVERT UNIT ADDR TO HEX\n         CR    R0,R8                   UNIT EQUAL                  @TEC\n         BL    UCBLOOP1                LOW NOT EQUAL, NEXT UCB     @TEC\n         LR    R10,R0                  SET NEXT LEAST HIGH UNIT AD @TEC\n         ST    R1,UCBDMCUR             SET NEXT LEAST HIGH UCB ADD @TEC\n         B     UCBDMOUT                GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)            UNIT ADDR DIGIT\n         TM    13(R1),X'F0'            NUMERIC\n         BO    *+8                     YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)            SET VALUE TO COVER A-F\n         SLL   R15,28                  SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4                   INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)            UNIT ADDR DIGIT\n         TM    14(R1),X'F0'            NUMERIC\n         BO    *+8                     YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)            SET VALUE TO COVER A-F\n         SLL   R15,28                  SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4                   INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)            UNIT ADDR DIGIT\n         TM    15(R1),X'F0'            NUMERIC\n         BO    *+8                     YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)            SET VALUE TO COVER A-F\n         SLL   R15,28                  SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4                   INSERT INTO RESULTS REGISTER\n         LR    R0,R14                  SET RESULTS REG             @TEC\n         BR    R11\n         SPACE 3\nUCBDMOUT C     R10,=X'0000FFFF'        ALL DONE\n         BE    UCBDMEX                 YES\n         ST    R10,UCBDMLOW            NEXT LOW UNIT ADDR\n         L     R1,UCBDMCUR             LOAD UCB ADDR FOR FOUND UNIT\n         B     UCBDMCON                CONTINUE\n         SPACE 1\nUCBDMEX  SR    R1,R1                   CLEAR UCB ADDR REGISTER\n         L     R8,UCBDMSAV             RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8          RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12         RELOAD WORK REG 4\n         B     UCBDMRET                END OF UCBS\n         SPACE 1\nUCBDMCON L     R8,UCBDMSAV             RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8          RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12         RELOAD WORK REG 4\n         SPACE 1\nUCBDMRET EQU   *\n         BR    R10\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'               SDWA GOTTEN\n         BE    STAEXIT1                NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)         SAVE REGISTER\n         LR    R14,R13                 SAVE ORIG R13\n         L     R13,0(R1)               GET ESTAE PARM\n         L     R2,XSASAVE              GET XSA ADDRESS\n         LR    R13,R14                 RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)       GET PARM ADDRESS\n         BZ    ESTNOP                  IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19     SET LENGTH OF DATA\n         B     ESTNOP                  SKIP CONSTANTS\n         ESTMODS ,                     GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)  GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)         GET RETRY ADDRESS\n         LA    R3,ESTMODS              POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,  GLA-BFG          X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)  GLA-BFG\nSTAEXIT1 L     R0,=A(STAERTRY)         LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGE03D)        LOAD ENTRY POINT ADDR\n         LR    R13,R1                  RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG              ADDRESSING ERROR\n         L     R2,XSASAVE              RELOAD XSA ADDR\n         LA    R11,RETURN              LOAD RET ADDR\nMSGRTN   SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nRETURN   CLI   WJOB1,C' '              ANY OUTPUT\n         BE    EXIT                    NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\nEXIT     ESTAE 0\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         L     R0,SIZE                 LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13                  LOAD GETMAIN AREA ADDR\n         L     R2,SAVRET               RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n*        MODESET KEY=NZERO,MODE=PROB\n         SR    R15,R15\n         LR    R14,R2\n         BR    R14\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\nUCBNRDY  DC    CL38'XXX XXXXXX   NOT READY  FOR XXXXX SEC'\nUCBBUSY  DC    CL38'XXX XXXXXX   XXX% BUSY  FOR XXXXX SEC'\n         DS    0F\nSTAEMSG  DC    X'00540100'\n         DC    CL80'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nSRMOVLY  DS    0CL84\n         DC    XL4'00540100'\n         DC    CL5'TSO-',CL10' '\n         DC    CL6'LGCP-',CL7' '\n         DC    CL6'AVCP-',CL7' '\n         DC    CL6'AVPG-',CL7' '\n         DC    CL7'AVUIC-',CL7' '\n         DC    CL6'ASMQ-',CL6' '\nCHPNUMS  DC    C'000102030405060708090A0B0C0D0E0F'                 @TEC\n         DC    C'101112131415161718191A1B1C1D1E1F'                 @TEC\nSRCTAB   DC    CL12' '\n         DC    CL12'*'\n         DC    CL12'*'\n         DC    CL12'SWAP LONGWT '\n         DC    CL12'SWAP AUXSTOR'\n         DC    CL12'SWAP REALSTR'\n         DC    CL12'SWAP DETWAIT'\n         DC    CL12'SWAP REQUEST'\n         DC    CL12'SWAP ENQEXC '\n         DC    CL12'SWAP WORKEXC'\n         DC    CL12'SWAP UNILATR'\n         DC    CL12'SWAP TRANSIT'\n         DC    CL12'*'\n         DC    CL12'*'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*        THRESHOLD VALUES FOR ALL DISPLAY LIMITS                      *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         DS    0D\nTHRINTVL DC    CL8'00001000'          10 SEC STIMER FOR CHANNEL BUSY\nTHRSTIMR DC    F'20'                   CHANNEL BUSY STIMER REPETITIONS\n***   THE ABOVE VALUES MULTIPLIED TOGETHER GIVE THE MINIMUM\n***   REFRESH FOR THIS COMMAND\nTHRTSOPG DC    F'2'                    TSO PERFORMANCE GROUP       @TEC\nTHRSWAP  DC    F'30'                   HIGH SWAP COUNT THRESHOLD\nTHRFRAME DC    F'200'                  HIGH FRAME USE LIMIT\n*  SET THRFRAME LOWER IF PAGING IS HIGH   = 100 ?\nTHRFRMTM DC    F'60'                   HIGH FRAME USE TIME THRESHOLD\nTHRABEND DC    F'10'                   JOB ABENDING TIME THRESHOLD\nTHRLOOPP DC    F'05'                   LOOP CPU PERCENT THRESHOLD\nTHRLOOPT DC    F'30'                   LOOP TIME THRESHOLD\nTHRCPULP DC    F'20'                   EXCESS JOB CPU PERCENT THRESHOLD\nTHRCPULT DC    F'10'                   EXCESS JOB CPU TIME THRESHOLD\nTHRSWPWT DC    F'180'                  SWAP WAIT TIME THRESHOLD\nTHRREPWT DC    F'30'                   REPLY WAIT TIME THRESHOLD\nTHRALCWT DC    F'30'                   ALLOCATION WAIT TIME THRESHOLD\nTHRWQELM DC    F'60'                   HIGH WQE PERCENT USE THRESHOLD\nTHRSQALM DC    F'64'                   SQA SHORTAGE MIN 'K' THRESHOLD\nTHRPAGHI DC    F'60'                   HIGH PAGING TIME THRESHOLD\nTHRPAGLM DC    F'50'                   HIGH PAGING PAGES/SEC LIMIT\nTHRPAGIO DC    F'30'                   PAGE I/O SLOW TIME THRESHOLD\nTHRPAGTM DC    F'60'                   PAGE I/O SLOW BURST LIMIT\nTHRUCBNR DC    F'30'                   DEVICE NOT READY THRESHOLD\nTHRUCBBS DC    F'30'                   DEVICE BUSY THRESHOLD TIME\nTHRUCBLM DC    F'25'                   DEVICE BUSY LIMIT PERCENT\n* CHANNEL LIMITS ARE SET TO 35% FOR DISK AND 70% FOR TAPE\nTHRCH1BS DC    F'20'                   CHANNEL 1 PERCENT BUSY THRESHOLD\nTHRCH1LM DC    F'20'                   CHANNEL 1 PERCENT BUSY LIMIT\n         DC    64A(1)                                              @TEC\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nSAVEREGS DS    18F\nDOUBLE   DS    2F\nDOUBLEX  DS    2F\nMAJOR    DS    2F\nNUMCHK   DS    2F\nPARM     DS    F\nQIOASID  DS    F\nXSASAVE  DS    F\nSAVETIM1 DS    F\nSAVETIM2 DS    F\nSAVECPU1 DS    F\nSAVECPU2 DS    F\nCURRWAIT DS    F\nUCBDMSAV DS    4F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\nPLIST    DS    3F                                                  @TEC\nADDR     DS    F                                                   @TEC\nWKAREA   DS    0D,XL100                                            @TEC\n         DS    F\nMAXCHPID DS    F                                                   @TEC\nR14SAVE  DS    F                                                   @TEC\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL80\nWJOB1    DS    CL8\n         DS    CL2\nWMSG1    DS    CL15\n         DS    CL1\nWRSN1    DS    CL12\n         DS    CL4\nWJOB2    DS    CL8\n         DS    CL2\nWMSG2    DS    CL15\n         DS    CL1\nWRSN2    DS    CL12\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nJOBTABLE DSECT\nPAGHITIM DS    F\nPAGIOTIM DS    F\nCHBSMPCT DS    F                       CHANNEL BUSY SAMPLE COUNT   @TEC\nCHBSYTIM DS    32F                                                 @TEC\nCHBSYPCT DS    32F                                                 @TEC\n*-------------------------------------------------------------*    @TEC\n* A TABLE OF SAVED INFO ABOUT UCBS:                           *    @TEC\n* 00-00 A FLAG. X'FF' IF THE SLOT IS IN USE                   *    @TEC\n* 01-03 UCB ADDRESS                                           *    @TEC\n* 04-07 TIME THE UCB WAS FIRST NOTICED AS BUSY                *    @TEC\n* 08-09 COUNT OF HOW MANY TIMES UCB HAS BEEN SCANNED          *    @TEC\n* 10-11 COUNT OF HOW MANY TIMES UCB HAS BEEN FOUND BUSY       *    @TEC\n* 12-12 CUMULATIVE PERCENT BUSY                               *    @TEC\n* 13-15 UNUSED.                                               *    @TEC\n*-------------------------------------------------------------*    @TEC\nUCBTAB   DS    100CL16                                             @TEC\nUCBTABND DS    F\nJOBNAME  DS    CL8\nJOBASID  DS    H\nJOBFLAG  DS    H\nJOBTIME  DS    F\nJOBCPUT  DS    F\nJOBEXCP  DS    F\nJOBLOOP  DS    F\nJOBCPUL  DS    F\nJOBWAIT  DS    F\nJOBFRAME DS    F\nJOBFRCNT DS    F\nJOBABEND DS    F\n         DS    499CL48\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         IHASDWA\n         CVT   DSECT=YES                                           @TEC\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGF03D\n         TITLE 'ESAGF03D -   F  DISPLAY STORAGE USAGE'             @TEC\n         PRINT NOGEN                                               @TEC\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SP1GF03D -       F  DISPLAY STORAGE USAGE                 ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        07/22/81  AXC-CBT HANDLE ESTAE           ***\n***                        09/04/91  JCL-TEC                        ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGF03D CSECT\n         LR    R12,R15\n         USING CSCGF03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         L     R1,XAA\n         ST    R1,JOBTABAD\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L     * ESTAE PARM FIX        *\nESTAEOVX EQU   *-ESTAEOVL          * ESTAE PARM FIX        *\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX        *\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n*-------------------------------------------------------------*    @TEC\n* CALCULATE INTERVAL SINCE LAST INVOCATION (IF ANY)           *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R4,JOBTABAD         POINT TO TIME\n         TIME  BIN\n         L     R6,4(0,R4)          PREVIOUS TIME\n         LR    R5,R0               CURRENT TIME\n         SR    R5,R6               INTERVAL TIME\n         ST    R0,4(0,R4)\n         LTR   R6,R6               1ST TIME\n         BZ    PFTLIST\n         ST    R5,0(0,R4)          SAVE INTERVAL TIME\n*-------------------------------------------------------------*    @TEC\n* FORMAT SYSTEM-WIDE VARIABLES                                *    @TEC\n*-------------------------------------------------------------*    @TEC\nPFTLIST  MVC   OUTMSG(4),=X'00540100'\n         L     R14,16              LOAD CVT ADDR\n         L     R6,556(0,R14)       LOAD ASVT ADDR\n         L     R7,516(0,R6)        MAX NO. OF ASCBS\n         LA    R6,524(0,R6)        1ST ASCB SLOT\n         L     R3,356(0,R14)       LOAD PVT ADDR\n         L     R14,8(R3)           GET ADDR OR AREA IN RIT         @TEC\n         L     R4,0(0,R14)         GET ADDR OF FIRST REAL PFTE     @TEC\n         L     R5,4(0,R14)         GET ADDR OF LAST REAL PFTE      @TEC\n         SR    R5,R4               GET DIFFERENCE                  @TEC\n         SRL   R5,5                GET # ENTRIES                   @TEC\n         LA    R5,1(0,R5)          ADD IN LAST ONE                 @TEC\n         STM   R4,R5,PFTREGS       SAVE PFT REGS\n         LR    R14,R5              PUT IN PROPER AREA              @TEC\n         ST    R14,TOTFRMS\n         CVD   R14,DOUBLE          CONVERT TO DECIMAL\n         MVI   OUTMSG+4,C' '\n         MVC   OUTMSG+5(79),OUTMSG+4\n         MVC   OUTMSG+4(12),=CL12'TOTAL'\n         MVC   OUTMSG+12(6),=X'402020202120'\n         ED    OUTMSG+12(6),DOUBLE+5\n         L     R14,16              LOAD CVT ADDR                   @TEC\n         L     R4,560(0,R14)       GET GDA ADDRESS                 @TEC\n         L     R14,152(0,R4)       GET GDAESQA                     @TEC\n         L     R15,144(0,R4)       GET GDASQA                      @TEC\n         A     R15,148(0,R4)       GDASQA + GDASQASZ               @TEC\n         SR    R14,R15             SIZE OF NUCLEUS                 @TEC\n         SRL   R14,12              GET NUMBER OF FRAMES            @TEC\n         AH    R14,1830(0,R3)      TOTAL FIXED\n         L     R1,TOTFRMS\n         SR    R1,R14              TOTAL PAGABLE\n         ST    R1,TOTFRMS          TOTAL PAGABLE\n         CVD   R1,DOUBLE\n         MVC   OUTMSG+24(12),=CL12'PAGABLE'\n         MVC   OUTMSG+32(6),=X'402020202120'\n         ED    OUTMSG+32(6),DOUBLE+5\n         L     R14,16              CVT\n         L     R14,604(0,R14)      RMCT\n         L     R1,4(0,R14)         CCT                             @TEC\n         LH    R1,104(0,R1)        LONG TERM CPU UTIL              @TEC\n         SRL   R1,8                SCALED BY 256?                  @TEC\n         CVD   R1,DOUBLE\n         MVC   OUTMSG+44(14),=CL14'LGCPU='\n         MVC   OUTMSG+50(4),=X'40202120'\n         ED    OUTMSG+50(4),DOUBLE+6\n         L     R1,4(0,R14)         CCT                             @TEC\n         LH    R1,102(0,R1)        AVERAGE CPU                     @TEC\n         CVD   R1,DOUBLE\n         MVC   OUTMSG+58(14),=CL14'AVCPU='\n         MVC   OUTMSG+64(4),=X'40202120'\n         ED    OUTMSG+64(4),DOUBLE+6\n         L     R1,228(0,R14)       RCT                             @TEC\n         LH    R1,54(0,R1)         AVERAGE UIC                     @TEC\n         CVD   R1,DOUBLE\n         MVC   OUTMSG+72(12),=CL12'AVUIC='\n         MVC   OUTMSG+78(4),=X'40202120'\n         ED    OUTMSG+78(4),DOUBLE+6\n         L     R1,228(0,R14)       RCT                             @TEC\n         LH    R1,64(0,R1)         AVERAGE PAGING                  @TEC\n         ST    R1,AVPAG\n         SR    R2,R2\n         BAL   R11,PGPRINT\n         MVI   OUTMSG+4,C' '\n         MVC   OUTMSG+5(79),OUTMSG+4\n         L     R10,=X'0000FFFF'\n         BAL   R11,PAGEPRNT        GO COUNT AND FORMAT\n         MVI   OUTMSG+4,C' '\n         MVC   OUTMSG+5(79),OUTMSG+4\n         L     R2,XSASAVE\n*-------------------------------------------------------------*    @TEC\n* LOOP OVER ALL ASCB'S                                        *    @TEC\n*-------------------------------------------------------------*    @TEC\nGETASCB  LA    R6,4(0,R6)          NEXT SLOT\n         BCT   R7,ASCBFND          GO PROCESS\n         B     PAGEPJP             GO OUTPUT RESULTS\nRETURN   EQU   *\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         ESTAE 0\n         L     R0,SIZE\n         LR    R1,R13              WORK AREA ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n*-------------------------------------------------------------*    @TEC\n* PROCESS DATA FOR ONE ADDRESS SPACE                          *    @TEC\n*-------------------------------------------------------------*    @TEC\nASCBFND  TM    0(R6),X'80'         AVAILABLE SLOT\n         BO    GETASCB             YES, GET NEXT SLOT\n         L     R8,0(0,R6)          LOAD ASCB ADDR\n         SR    R10,R10             LOAD\n         IC    R10,36(0,R8)\n         SLL   R10,8               ASID\n         IC    R10,37(0,R8)\n         BAL   R11,PAGEPRNT        GO COUNT AND FORMAT\n         L     R2,XSASAVE\n         B     GETASCB\n*-------------------------------------------------------------*    @TEC\n* CALCULATE ADDRESS SPACE'S INTERVAL PAGING RATE.             *    @TEC\n*-------------------------------------------------------------*    @TEC\nJPAGE    L     R14,16              LOAD CVT ADDR\n         L     R14,556(0,R14)      LOAD ASVT ADDR\n         LA    R14,524(0,R14)      1ST ASCB SLOT\n         SLL   R10,2\n         LA    R14,0(R10,R14)      THIS ASID ASCB SLOT\n         LR    R10,R2              JOB TABLE SLOT THIS ASID\n         L     R8,0(0,R14)         ASCB ADDR\n         L     R2,JOBTABAD         POINT TO TIME\n         L     R2,0(0,R2)          INTERVAL TIME\n         L     R1,148(0,R8)        OUXB ADDR\n         LA    R1,0(0,R1)\n         LTR   R1,R1               VALID ADDR\n         BCR   8,R11               NO\n         ST    R1,SAVEOUXB\n         CLC   0(24,R10),=24X'00'  1ST TIME\n         BNE   JPAGE2              NO\nJPAGE1   L     R1,SAVEOUXB\n         MVC   0(24,R10),16(R1)    SAVE OUXB PAGING ACCUM FIELDS\n         BR    R11\nJPAGE2   LTR   R2,R2               1ST TIME\n         BCR   8,R11\n         L     R14,16(0,R1)        CURR PAGEIN\n         S     R14,0(0,R10)        SUB PREV PAGEIN\n         LTR   R14,R14             OVERFLOW\n         BM    JPAGE4              YES\n         LR    R15,R14             ACCUMULATE\n         L     R14,20(0,R1)        CURR PAGEOUT\n         S     R14,4(0,R10)        SUB PREV PAGEOUT\n         LTR   R14,R14             OVERFLOW\n         BM    JPAGE4              YES\n         AR    R15,R14             ACCUMULATE\n         L     R14,24(0,R1)        CURR PAGE RECLAIM\n         S     R14,8(0,R10)        SUB PREV PAGE RECLAIM\n         LTR   R14,R14             OVERFLOW\n         BM    JPAGE4              YES\n         SR    R15,R14             ACCUMULATE\n         L     R14,28(0,R1)        CURR VIO PAGEIN\n         S     R14,12(0,R10)       SUB PREV VIO PAGEIN\n         LTR   R14,R14             OVERFLOW\n         BM    JPAGE4              YES\n         AR    R15,R14             ACCUMULATE\n         L     R14,32(0,R1)        CURR VIO PAGEOUT\n         S     R14,16(0,R10)       SUB PREV VIO PAGEOUT\n         LTR   R14,R14             OVERFLOW\n         BM    JPAGE4              YES\n         AR    R15,R14             ACCUMULATE\n         L     R14,36(0,R1)        CURR VIO RECLAIM\n         S     R14,20(0,R10)       SUB PREV VIO RECLAIM\n         LTR   R14,R14             OVERFLOW\n         BM    JPAGE4              YES\n         SR    R15,R14             ACCUMULATE\n         SR    R14,R14\n         M     R14,=F'100'\n         DR    R14,R2              PAGES PER SEC\n         CVD   R15,DOUBLE\n         LR    R1,R15\n         MVC   OUTMSG+25(10),=X'402021204B2020404040'\n         ED    OUTMSG+25(4),DOUBLE+6\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R2              HUNDREDTHS\n         CVD   R15,DOUBLE\n         UNPK  OUTMSG+30(2),DOUBLE+6(2)\n         OI    OUTMSG+31,X'F0'\n         SLL   R1,1\n         C     R15,=F'50'          ROUND UP GRAPH\n         BL    *+8                 NO\n         LA    R1,1(0,R1)\n         LR    R15,R1\n         C     R15,=F'45'\n         BNH   *+8\n         L     R15,=F'45'\n         LTR   R15,R15\n         BNP   *+6\n         BCTR  R15,0\n         LA    R1,OUTMSG+39(R15)\n         MVI   0(R1),C'>'\n         EX    R15,PAGMVE\n         CLC   OUTMSG+32(6),=C'      '\n         BE    JPAGE3A\n         MVI   OUTMSG+32,C' '\n         MVC   OUTMSG+33(50),OUTMSG+32\n         MVC   OUTMSG+26(6),=C'  0.00'\n         B     JPAGE1\nJPAGE3A  CLC   OUTMSG+26(6),=C'  0.00'\n         BNE   JPAGE1\n         MVC   OUTMSG+38(2),=C'  '\n         B     JPAGE1\nJPAGE4   MVC   OUTMSG+25(18),=CL18'   0 '\n         B     JPAGE1\nPAGMVE   MVC   OUTMSG+38(0),PAGGRAPH\n*-------------------------------------------------------------*    @TEC\n* COUNT FRAMES BELONGING TO AN ADDRESS SPACE                  *    @TEC\n*-------------------------------------------------------------*    @TEC\nPAGEPRNT LM    R4,R5,PFTREGS       LOAD PFT REGS\n         SR    R14,R14             CLEAR FRAME COUNT\n         SR    R9,R9               CLEAR AVAILABLE FRAME COUNT\n         SPACE 3\nPAGEPR1  SR    R15,R15\n         ICM   R15,3,18(R4)        LOAD PFT ASID                   @TEC\n         CR    R10,R15             ASID MATCH\n         BNE   PAGEPR2             NO, DONT INCR FRAME COUNT\n         LA    R14,1(0,R14)        ADD 1 TO FRAME COUNT\n         LA    R2,1\n         SPACE 3\nPAGEPR2  LA    R4,32(0,R4)         NEXT PFT                        @TEC\n         BCT   R5,PAGEPR1          PROCESS NEXT\n         C     R10,=X'00000001'    MASTER\n         BE    ASIDMSTR            YES, GO PRINT MASTER\n         C     R10,=X'0000FFFF'    SYS PAGES\n         BNE   PAGEPR3             NO, ASID\n         L     R15,AVPAG           AVERAGE PAGING\n         CVD   R15,DOUBLE\n         MVC   OUTMSG+4(12),=CL12'*SYSTEM*'\n         MVC   OUTMSG+27(12),=CL12'AVPAG='\n         MVC   OUTMSG+33(5),=X'4020212040'\n         ED    OUTMSG+33(4),DOUBLE+6\n         CH    R15,=H'46'\n         BNH   *+8\n         LH    R15,=H'46'          FORCE MAX\n         EX    R15,SYSMVE\n         LA    R15,OUTMSG+38(R15)\n         MVI   0(R15),C'>'\n         B     PAGEPR4\n         SPACE 1\nSYSMVE   MVC   OUTMSG+38(0),SYSGRAPH\nPAGEPR3  LTR   R14,R14             ANY FRAMES\n         BCR   8,R11               NO, BYPASS PRINT\n         CH    R10,=H'256'         MAX ASID ALLOWED                @TEC\n         BCR   2,R11               OVER MAX\n         MH    R10,=H'28'          COUNT AREA SIZE\n         A     R10,JOBTABAD        POINT TO ASID COUNT SLOTS\n         ST    R14,24(0,R10)       SAVE FRAME COUNT\n         BR    R11\n         SPACE 3\nPAGEPR4  CVD   R14,DOUBLE\n         MVC   OUTMSG+12(6),=X'402020202120'\n         ED    OUTMSG+12(6),DOUBLE+5\n         CLC   OUTMSG+4(3),=C'AS  '\n         BE    JOBFIND\nPGPRINT  L     R1,TOTFRMS          LOAD TOTAL PAGABLE FRAMES\n         LTR   R2,R2               DATA LINE\n         BZ    PRINT               NO\n         CVB   R15,DOUBLE\n         SR    R14,R14\n         M     R14,=F'100'\n         DR    R14,R1\n         LA    R15,1(0,R15)\n         CVD   R15,DOUBLE          PERCENT FRAMES\n         MVC   OUTMSG+19(5),=X'402021206C'\n         ED    OUTMSG+19(4),DOUBLE+6\n         SPACE 3\nPRINT    LA    R1,OUTMSG           LOAD OUTPUT MSG ADDR\n         SR    R0,R0\n         L     R2,XSASAVE\n         IC    R0,XAU\n         SVC   35\n         BR    R11\n         SPACE 3\nASIDMSTR DS    0H\n         MVC   OUTMSG+4(12),=CL12'*MASTER*'\n         B     PAGEPR4\nPAGEPJP  L     R2,JOBTABAD         JOB TABLE\n         LA    R1,256              MAX ASID                        @TEC\n         SR    R10,R10\n         XC    HIGHFRAM(4),HIGHFRAM\n         XC    HIGHJCNT(4),HIGHJCNT\n         XC    HIGHASID(4),HIGHASID\nPAGEPJP1 LA    R2,28(0,R2)         NEXT JOB ENTRY\n         LA    R10,1(0,R10)        ASID\n         L     R14,24(0,R2)        FRAME COUNT\n         LTR   R14,R14             GOOD FRAME COUNT\n         BNP   PAGEPJP2            NO\n         C     R14,HIGHFRAM        HIGHER\n         BL    PAGEPJP2            ANY FRAMES\n         ST    R14,HIGHFRAM        HIGH FRAME COUNT\n         ST    R10,HIGHASID        HIGH ASID\n         ST    R2,HIGHJCNT         HIGH COUNT ADDR\nPAGEPJP2 BCT   R1,PAGEPJP1\n         L     R2,HIGHJCNT\n         LTR   R2,R2               END OF OUTPUT\n         BZ    RETURN              YES\n         L     R10,HIGHASID\nPAGEPJP3 ST    R10,SAVEASID\n         MVI   OUTMSG+4,C' '\n         MVC   OUTMSG+5(79),OUTMSG+4\n         MVC   OUTMSG+4(12),=CL12'AS  '\n         XC    24(4,R2),24(R2)     CLEAR FRAME COUNT\n         BAL   R11,JPAGE           CALCULATE JOB INTERVAL PAGING\n         L     R10,SAVEASID\n         L     R14,HIGHFRAM\n         STH   R10,DOUBLE+6\n         UNPK  DOUBLE(5),DOUBLE+6(3)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   OUTMSG+7(4),DOUBLE  ASID TO MSG\n         LA    R2,1\n         BAL   R11,PAGEPR4\n         B     PAGEPJP\n*-------------------------------------------------------------*    @TEC\n* MOVE JOBNAME INTO OUTPUT MESSAGE.                           *    @TEC\n*-------------------------------------------------------------*    @TEC\nJOBFIND  EQU   *\n         L     R9,56(0,R8)         CSCB ADDR\n         CLI   28(R9),X'03'        INIT\n         BE    JOBFIND1            YES, GO SEARCH\nJOBFIND0 MVC   OUTMSG+4(8),8(R9)   JOBNAME\n         MVI   OUTMSG+12,C' '\n         B     PGPRINT\nJOBFIND1 LA    R1,0(0,R9)          SAVE ADDR\n         SR    R14,R14             LOAD\n         IC    R14,30(0,R9)\n         SLL   R14,8               ASID\n         IC    R14,31(0,R9)\nJOBFIND2 L     R9,0(0,R9)          NEXT CSCB\n         LA    R9,0(0,R9)\n         LTR   R9,R9               END OF CHAIN\n         BNZ   JOBFIND3            NO, CONTINUE\n         LR    R9,R1               USE ORIG CSCB\n         B     JOBFIND0\nJOBFIND3 CR    R9,R1               END OF CHAIN\n         BE    JOBFIND0            YES, USE ORIG CSCB\n         CH    R14,30(0,R9)        ASID EQUAL\n         BE    JOBFIND0            YES, USE THIS CSCB\n         B     JOBFIND2\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n**************************************************************\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE\n*  OPERANDS, REGISTERS, AND PSW IN IT.\n**************************************************************\n         STM   R14,R12,12(R13)     SAVE REGISTER\n         LR    R14,R13             SAVE ORIG R13\n         L     R13,0(R1)           GET ESTAE PARM\n         L     R2,XSASAVE          GET XSA ADDRESS\n         LR    R13,R14             RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA\n*                                  AND EBCDIC\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA\n         B     ESTNOP              SKIP CONSTANTS\n         ESTMODS ,\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS\n         LA    R3,ESTMODS          POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,                   X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGF03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\nPAGGRAPH DC    C'0=1=2=3=4=5=6=7=8==10========15========20========='\nSYSGRAPH DC    C'0=========1=========2=========3=========4========='\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nDOUBLE2  DS    2F\nXSASAVE  DS    F\nAVPAG    DS    F\nAVASQ    DS    F\nHIGHASID DS    F\nHIGHJCNT DS    F\nHIGHFRAM DS    F\nSAVEASID DS    F\nSAVEOUXB DS    F\nJOBTABAD DS    F\nTOTFRMS  DS    F\nPFTREGS  DS    2F\n         DS    0F\nOUTMSG   DS    84C\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\n*-------------------------------------------------------------*    @TEC\n* A TABLE OF 28-BYTE ENTRIES FOR SCANNED ASID'S:              *    @TEC\n*                                                             *    @TEC\n*  00-03 INTERVAL TIME                                        *    @TEC\n*  04-07 PREVIOUS INVOCATION TIME                             *    @TEC\n*  00-23 OUXB PAGING ACCUMULATOR FIELDS (OUXB+X'10')          *    @TEC\n*  23-27 JOB FRAME COUNT                                      *    @TEC\n*-------------------------------------------------------------*    @TEC\nJOBTAB   DSECT\nJOBOUXB  DS    256XL28                                             @TEC\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGH03D\n         TITLE 'CSCGH03D -   TSO GRAPHIC MONITOR HELP'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CSCGH03D -       TSO GRAPHIC MONITOR HELP                 ***\n***                                                                 ***\n***       VERSION -        2.5                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        07/19/81  AXC-CBT FIX ESTAE              ***\n***                        09/27/82  AXC-CBT ADD 3375 AND 3380      ***\n***                                  SUPPORT                        ***\n***                                                                 ***\n***       UPDATED -        09/16/91  REMOVE REFERENCE TO Q GRAPHIC  ***\n***                                  MONITOR COMMAND                ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGH03D CSECT\n         LR    R12,R15\n         USING CSCGH03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD SUB-PARM ADDR\n         MVC   WTOLIST(4),=X'00340100'\n         LA    R4,CMDTAB           LOAD COMMAND HELP TABLE ADDR\n         LTR   R3,R3               ANY PARMS\n         BZ    PRINT               NO, LEVEL 1 HELP\n         SPACE 3\nPARM     CLC   0(1,R3),0(R4)       TABLE MATCH\n         BE    PRINT               YES, USE IT\n         LA    R4,4(0,R4)          NEXT ENTRY\n         CLI   0(R4),X'00'         END OF TABLE\n         BNE   PARM                NO, CONTINUE\n         LA    R1,ERRMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     RETURN\nPRINT    L     R5,0(0,R4)          LEVEL 2 HELP LIST\n         SPACE 3\nPRINT1   MVC   WTOLIST+4(48),0(R5)\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R5,48(0,R5)         NEXT MSG\n         CLI   0(R5),X'00'         END OF MSGS\n         BNE   PRINT1              NO, CONTINUE\nRETURN   EQU   *\n         ESTAE 0\n         L     R0,SIZE             LOAD FREEMAIN SIZE\n         LR    R1,R13              LOAD FREEMAIN ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14                 EXIT\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGH03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\n         LTORG\n         SPACE 5\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nERRMSG   DC    X'00340100'\n         DC    CL48'HELP NOT AVAILABLE FOR THIS COMMAND, ENTER  H'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nCMDTAB   DS    0F\n         DC    C'H',AL3(HDRTAB)\n         DC    C'A',AL3(ATAB)\n         DC    C'E',AL3(ETAB)\n         DC    C'F',AL3(FTAB)\n         DC    C'I',AL3(ITAB)\n         DC    C'J',AL3(JTAB)\n         DC    C'O',AL3(OTAB)\n*        DC    C'Q',AL3(QTAB)                                      @TEC\n         DC    C'S',AL3(STAB)\n         DC    C'U',AL3(UTAB)\n         DC    C'#',AL3(#TAB)\n         DC    F'0'\nHDRTAB   DS    0F\n         DC    CL48'ENTER  H X  FOR HELP WITH COMMAND  X'\n         DC    CL48'H -   (GH)  DISPLAY HELP                       '\n         DC    CL48'A -   (GA)  DISPLAY JOB ACTIVITY               '\n         DC    CL48'E -   (GE)  DISPLAY EXCEPTIONS                 '\n         DC    CL48'F -   (GF)  DISPLAY PAGE STATISTICS BY JOB     '\n         DC    CL48'J -   (GJ)  DISPLAY CPU UTILIZATION            '\n         DC    CL48'I -   (GI)  DISPLAY JES2 INITIATORS            '\n         DC    CL48'O -   (GO)  DISPLAY SYSTEM I/O ACTIVITY        '\n*        DC    CL48'Q -   (GQ)  DISPLAY JES QUEUE  (MODIFIED Q CMD)'\n         DC    CL48'S -   (GS)  DISPLAY SYSTEM INDICATORS          '\n         DC    CL48'U -   (GU)  DISPLAY DASD FREE SPACE            '\n         DC    CL48'# -   (SM)  DISPLAY HELP # COMMANDS            '\n         DC    CL48' '\n         DC    CL48'FOLLOWING ARE FULL SCREEN POSITIONING COMMANDS.'\n         DC    CL48'-NNN        SCROLL UP NNN LINES                '\n         DC    CL48'+NNN        SCROLL DOWN NNN LINES              '\n         DC    CL48'-           SCROLL TO TOP                      '\n         DC    CL48'+           SCROLL TO BOTTOM                   '\n         DC    CL48'=YXXXY      FIND STRING EQ XXX, Y IS DELIMITER '\n         DC    F'0'\nATAB     DS    0F\n DC    CL48'ANNNN       DISPLAY JOB ACTIVITY  FOR ASID NNNN'\n DC    CL48'            GRAPHIC DISPLAY OF -               '\n DC    CL48'            JOBNAME,  STEPNAME,  PERCENT CPU   '\n DC    CL48'            PERCENT CPU,                       '\n DC    CL48'            PAGE FRAME ALLOCATION,             '\n DC    CL48'            PAGING IN PAGES PER SECOND,        '\n DC    CL48'            AVERAGE JOB CPU UTILIZATION,       '\n DC    CL48'            AVERAGE REAL FRAME USAGE,          '\n DC    CL48'            CURRENT SWAP COUNT,                '\n DC    CL48'            JOB I/O ACTIVITY.                  '\n DC    CL48'            JOB EXCEPTIONS AS FOLLOWS -        '\n DC    CL48'            POSSIBLE LOOPS,                    '\n DC    CL48'            ABEND IN PROGRESS,                 '\n DC    CL48'            WAITING ON REPLIES,                '\n DC    CL48'            WAITING ON ALLOCATION,             '\n DC    CL48'            WAITING ON ENQUEUE CONFLICTS,      '\n DC    CL48'            WAITING ON I/O PENDING,            '\n DC    CL48'            WAITING TO BE SWAPPED IN.          '\n DC    F'0'\nETAB     DS    0F\n DC    CL48'E -         DISPLAY ALL EXCEPTIONS              '\n DC    CL48'ED -        DISPLAY EXCEPTIONS (NOT DEVICE)     '\n DC    CL48'EC -        DISPLAY EXCEPTIONS (NOT CHAN/DEVICE)'\n DC    CL48'            AUTOMATIC REFRESH MINIMUM 10 SEC    '\n DC    CL48'                                                '\n DC    CL48'            EXCEPTIONAL SYSTEM CONDITIONS -     '\n DC    CL48'            EXCESS PAGING AND PAGE I/O BUSY,    '\n DC    CL48'            EXCESS DEVICE UTILIZATION,          '\n DC    CL48'            EXCESS CHANNEL UTILIZATION.         '\n DC    CL48'                                                '\n DC    CL48'            EXCEPTIONAL JOB CONDITIONS -        '\n DC    CL48'            POSSIBLE LOOPS,                     '\n DC    CL48'            ABEND IN PROGRESS,                  '\n DC    CL48'            EXCESS JOB CPU UTILIZATION,         '\n DC    CL48'            EXCESS REAL FRAME USAGE,            '\n DC    CL48'            EXCESS SWAP COUNT,                  '\n DC    CL48'            WAITING ON REPLIES,                 '\n DC    CL48'            WAITING ON ALLOCATION,              '\n DC    CL48'            WAITING ON ENQUEUE CONFLICTS,       '\n DC    CL48'            WAITING ON I/O PENDING,             '\n DC    CL48'            WAITING TO BE SWAPPED IN.           '\n DC    F'0'\nFTAB     DS    0F\n DC    CL48'F -         DISPLAY PAGE STATISTICS BY JOB     '\n DC    CL48'            GRAPHIC DISPLAY OF -               '\n DC    CL48'            PAGE FRAME ALLOCATION BY JOB AND   '\n DC    CL48'            PAGING BY JOB IN PAGES PER SECOND. '\n DC    F'0'\nJTAB     DS    0F\n DC    CL48'JD -        DISPLAY CPU UTILIZATION            '\n DC    CL48'            GRAPHIC DISPLAY OF -               '\n DC    CL48'            ALL ACTIVE DOMAINS.                '\n DC    CL48'                                               '\n DC    CL48'J -         DISPLAY CPU UTILIZATION            '\n DC    CL48'            GRAPHIC DISPLAY OF -               '\n DC    CL48'            JOBNAME,  STEPNAME,  PERCENT CPU   '\n DC    CL48'            UTILIZATION FOR ACTIVE JOBS.       '\n DC    CL48'                                               '\n DC    CL48'JT -        DISPLAY CPU UTILIZATION            '\n DC    CL48'            GRAPHIC DISPLAY OF -               '\n DC    CL48'            JOBNAME,  STEPNAME,  PERCENT CPU   '\n DC    CL48'            UTILIZATION FOR ACTIVE TSO USERS.  '\n DC    CL48'                                               '\n DC    CL48'JNN -       DISPLAY CPU UTILIZATION            '\n DC    CL48'            GRAPHIC DISPLAY OF -               '\n DC    CL48'            JOBNAME,  STEPNAME,  PERCENT CPU   '\n DC    CL48'            UTILIZATION FOR ALL JOBS IN DMN XX.'\n DC    CL48'                                               '\n DC    F'0'\nITAB     DS    0F\n DC    CL48'I -         DISPLAY JES2 INITIATORS            '\n DC    CL48'            DISPLAY OF -                       '\n DC    CL48'            INITIATOR STATUS,                  '\n DC    CL48'            JOB NUMBER,                        '\n DC    CL48'            JOBNAME,                           '\n DC    CL48'            JOB CLASS,                         '\n DC    CL48'            INITIATOR CLASSES.                 '\n DC    F'0'\nOTAB     DS    0F\n         DC    CL48'OXNN -      DISPLAY SYSTEM I/O ACTIVITY        '\n         DC    CL48'            WHERE -                            '\n         DC    CL48'              X -   SCAN TYPE                  '\n         DC    CL48'                    A -   ALL DEVICES          '\n         DC    CL48'                    V -   DASD AND TAPE        '\n         DC    CL48'                    D -   DASD                 '\n         DC    CL48'                    T -   TAPE                 '\n         DC    CL48'                    U -   UNIT RECORD          '\n         DC    CL48'                    C -   COMM AND DISPLAY     '\n         DC    CL48'              NN -  PERCENT BUSY THRESHOLD     '\n         DC    CL48'                    20% BUSY IS THE DEFAULT    '\n         DC    F'0'\nSTAB     DS    0F\n         DC    CL48'S -         DISPLAY SYSTEM INDICATORS          '\n         DC    CL48'            GRAPHIC DISPLAY OF -               '\n         DC    CL48'            CURRENT AVERAGE CPU,               '\n         DC    CL48'            CURRENT LONG TERM CPU,             '\n         DC    CL48'            CURRENT AVERAGE PAGING,            '\n         DC    CL48'            CURRENT AVERAGE UIC,               '\n         DC    CL48'            CURRENT AVERAGE ASMQ LENGTH,  AND  '\n         DC    CL48'            CURRENT MPL FOR EACH DOMAIN        '\n         DC    CL48'            CONTAINING RUNNING JOBS.           '\n         DC    CL48'                                               '\n         DC    CL48'SA -        DISPLAY SYSTEM INDICATORS          '\n         DC    CL48'            GRAPHIC DISPLAY OF -               '\n         DC    CL48'            AVERAGE AVERAGE CPU,               '\n         DC    CL48'            AVERAGE LONG TERM CPU,             '\n         DC    CL48'            AVERAGE AVERAGE PAGING,            '\n         DC    CL48'            AVERAGE AVERAGE UIC,               '\n         DC    CL48'            AVERAGE AVERAGE ASMQ LENGTH,  AND  '\n         DC    CL48'            CURRENT MPL FOR EACH DOMAIN        '\n         DC    CL48'            CONTAINING RUNNING JOBS.           '\n         DC    F'0'\nUTAB     DS    0F\n         DC    CL48'U           DISPLAY DASD SPACE ALL ONLINE DASD '\n         DC    CL48'U VVVV      DISPLAY DASD SPACE ON VOLUME VVVV  '\n         DC    CL48'            WHERE VVVV IS A 1-6 DIGIT VOLSER OR'\n         DC    CL48'            VOLSER PREFIX                      '\n         DC    CL48'U U=NNN     DISPLAY DASD SPACE ON UNIT NNN     '\n         DC    CL48'U D=XXXX    DISPLAY DASD SPACE ON DEVTYPE XXXX '\n         DC    CL48'            (3330,3330V,3330-1,3350,2305-2,    '\n         DC    CL48'             3375,3380)                        '\n         DC    CL48'                                               '\n         DC    CL48'            DISPLAY OF -                       '\n         DC    CL48'            UNIT, DEVTYPE, STATUS, VOLSER,     '\n         DC    CL48'            NO. OF DCBS OPEN, NO. OF USERS,    '\n         DC    CL48'            FREE CYLS, FREE TRKS, FREE EXTENTS,'\n         DC    CL48'            LARGEST CONTIG EXTENT CYL/TRK      '\n         DC    F'0'\n#TAB     DS    0F\n         DC    CL48'ENTER  #H X  FOR HELP WITH COMMAND  X'\n         DC    CL48'       L= NN    DIRECTS COMMAND OUTPUT TO       '\n         DC    CL48'                CONSOLE WITH ID =  NN           '\n         DC    CL48'       T= NNN   SETS TIME LIMIT IN SECONDS FOR  '\n         DC    CL48'                MONITOR COMMANDS   1 - 999      '\n         DC    CL48'       S= XXXX  DIRECTS THE COMMAND TO SYSTEM   '\n         DC    CL48'                XXXX AND THE OUTPUT BACK TO     '\n         DC    CL48'                THE ORIGINATOR.                 '\n         DC    CL48'#A -   (SE)  DISPLAY JOB STATUS -  EXPANDED  D A'\n         DC    CL48'#C -   (SK)  CALCULATOR, TOD, AND MSTCONS SWITCH'\n         DC    CL48'#D -   (SD)  DISPLAY AND ZAP CORE               '\n         DC    CL48'#E -   (SS)  EXECUTE AN OPERATOR COMMAND        '\n         DC    CL48'#F -   (SF)  DISPLAY PAGE FRAME ASSIGNMENTS     '\n         DC    CL48'#H -   (SM)  DISPLAY HELP                       '\n         DC    CL48'#I -   (SJ)  DISPLAY IPS AND SWAP COUNTS        '\n         DC    CL48'#J -   (SL)  MODIFIED DISPLAY ACTIVE REPLACEMENT'\n         DC    CL48'#L -   (SC)  DISPLAY LINES FOR TSO              '\n         DC    CL48'#M -   (SO)  TSO MULTIPLE SEND                  '\n         DC    CL48'#N -   (SA)  DISPLAY ENQUEUE                    '\n         DC    CL48'#O -   (SR)  DISPLAY PENDING I/O AND ALLOCATION '\n         DC    CL48'#P -   (SP)  DISPLAY SU CONFIGURATION           '\n         DC    CL48'#Q -   (SQ)  ANALYZE ENQUEUE CONFLICTS          '\n         DC    CL48'#R -   (SG)  DISPLAY DEVICE STATUS              '\n         DC    CL48'#S -   (SH)  DISPLAY LPA MODULES                '\n         DC    CL48'#T -   (SN)  DISPLAY TIOT AND EXCP COUNTS BY DD '\n         DC    CL48'#V -   (SI)  DISPLAY UNIT                       '\n         DC    CL48'##A -  (ZA)  MONITOR JOB ACTIVITY               '\n         DC    CL48'##B -  (ZB)  MONITOR DEVICE BUSY                '\n         DC    CL48'##C -  (ZC)  MONITOR CHANNEL BUSY               '\n         DC    CL48'##J -  (ZJ)  MONITOR JOBS                       '\n         DC    CL48'##P -  (ZP)  MONITOR PAGING                     '\n         DC    CL48'##S -  (ZS)  MONITOR SYSTEM INDICATORS          '\n         DC    F'0'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    F\nXSASAVE  DS    F\n         SPACE 3\n         DS    0F\nWTOLIST  DS    CL54\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGI03D\n         TITLE 'CSCGI03D -   I  JES2 INIT DISPLAY'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CSCGI03D -       I  JES2 INIT DISPLAY                     ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      UP TO MVS/SP1.3                          ***\n***                                                                 ***\n***       UPDATED -        03/24/83                                 ***\n***                                                                 ***\n***       NOTE -           WHEN YOU GET AN ASSEMBLE ERROR OF 12     ***\n***                        AT THE CSECT SDWA JUST IGNORE THE ERROR  ***\n***                        YOU WILL BE OKAY.                        ***\n***                        THE ERROR MESSAGE (AT LEAST FROM ASMBLER ***\n***                        H) IS 'PREVIOUS USE OF SYMBOL IS NOT     ***\n***                        THIS SECTION TYPE'.                      ***\n***                                                                 ***\n***                                                                 ***\n***       ADD MACRO CALLED $DEB BECAUSE THE $SJB MACRO NOW          ***\n***           REFERENCES DEB FIELDS WHICH MEANS THAT THE $DEB       ***\n***           MACRO MUST PRECEDE THE $SJB MACRO FOR ASSEMBLER F.    ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGI03D CSECT\n         LR    R12,R15\n         USING CSCGI03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         USING CVTDSECT,R1        SETUP CVT BASE\n         USING JESCT,R6           SETUP JESCT BASE\n         USING SSCT,R3            SETUP SSCT BASE\n         USING SSVT,R4            SETUP SSVT BASE\n         USING PITDSECT,R5        SETUP PIT BASE\n         USING SJBDSECT,R11       SETUP SJB BASE\n         LA    R1,ALINE1          PRINT HEADING LINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R1,ALINE2          PRINT HEADING LINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R1,ALINE3          PRINT HEADING LINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVI   LSW,C' '\nCONTINUE L     R1,16              GET CVT\n         L     R6,296(R1)         GET JESCT    (JES CONTROL TABLE)\n         L     R3,JESSSCT         GET FIRST JES SSCT (SSCVT)\n         SPACE 1\nNEXTSSCT L     R4,SSCTSSVT        GET JES SSVT\n         L     R5,$SVPIT          GET PIT ADDR--5.302 JES LOGIC+MAINT\n         SPACE 1\nNEXTPIT  MVC   IDENT(40),=CL40' ' CLEAR DETAIL LINE\n         MVC   CLINEX(4),=X'00540100'\n         TM    PITSTAT,PITHOLDA   PIT DRAINED $PI ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'DRAIN'   MOVE IN DRAINED STATUS\n         TM    PITSTAT,PITHOLD1   PIT DRAINED $P IN ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'DRAIN'   MOVE IN DRAINED STATUS\n         TM    PITSTAT,PITHALTA   PIT HALTED  $Z I ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'HALT'    MOVE IN HALTED STATUS\n         TM    PITSTAT,PITHALT1   PIT HALTED  $Z IN ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'HALT'    MOVE IN HALTED STATUS\n         TM    PITSTAT,PITINIT    OS INIT EXISTS FOR PIT?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'INACT'   MOVE IN INACTIVE\n         TM    PITSTAT,PITBUSY    PIT BUSY ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'ACTIV'   MOVE IN ACTIVE\n         TM    PITSTAT,PITIDLE    PIT IDLE ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'IDLE'     MOVE IN IDLE\n         CLC   STAT(6),=6C' '        STATUS NOT AVAILABLE ?\n         BNE   *+10               IF NOT CONTINUE\n         MVC   STAT(6),=CL6'?????'   MOVE IN STATUS NOT AVAIL.\n         MVC   IDENT(2),PITPATID     MOVE ID IN---FORMAT CL2\n         MVC   INITNAM(8),PITCLASS   MOVE THE INIT CLASSES TO OUTPUT\n         CLI   IDENT,C' '\n         BNE   *+8\n         MVI   IDENT,C'0'\n*\n*    &MAXCLAS PARAMETER ON GEN LIMITS MAX CLASSES, ABOVE MAY NEED\n*    TO BE CHANGED IF OTHER THAN 8 CLASSES.\n*\n         TM    PITSTAT,PITBUSY    PIT BUSY ?\n         BNO   PRINT              IF NOT CONTINUE\n         L     R11,PITSJB         GET SJB ADDRESS\n         MVC   JOBNAME(8),SJBJOBNM   GET JOBNAME FROM JOB CARD\n         MVC   JOBNUM(4),SJBJOBID+4  GET JOBID FROM JOB CARD\n         MVI   UCLASS,C'('\n         MVI   UCLASS+2,C')'\n         MVC   UCLASS+1(1),SJBJCLAS    GET USED CLASS\nPRINT    CLI   LSW,C' '           CHECK PRINT SW FOR LEFT SIDE\n         BE    MOVELEFT           MOVE IN LEFT PRINT AREA\n         CLI   LSW,C'1'           CHECK PRINT SW FOR RIGHT SIDE\n         BE    MOVERIGT           MOVE IN RIGHT PRINT AREA\n         LA    R1,STAEMSG         WRITE ERROR LINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     FINAL              END IF ERROR\n         SPACE 1\nPUTIT    LA    R1,CLINEX          WRITE MESSAGE LINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVI   LSW,C' '           RESET PRINT SWITCH\n         B     NEXTIT             GET NEXT PIT\n         SPACE 1\nFINAL    CLI   LSW,C' '           CHECK IF LAST DATA FILLED\n         BE    EXIT               IF DONE, DON'T WRITE\n         CLI   LSW,C'1'           CHECK IF LEFT ONLY FILLED\n         BE    SPRIGHT            GO TO SPACE-RIGHT\n         SPACE 1\nLASTWR   LA    R1,CLINEX          WRITE MESSAGE LINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\n         SPACE 1\nMOVELEFT MVC   LSW,=C'1'          SET LEFT PRINT FLAG\n         MVC   CLEFT(40),PLINE        MOVE IN LEFT SIDE\n         SPACE 1\nNEXTIT   L     R5,PITNEXT         GET NEXT PIT---REFER 5.200 JES2\n         LTR   R5,R5              CHK R5 FOR VALID ADDR\n         BZ    FINAL              END PROCESS FOR SSCT\n         B     NEXTPIT            GO BACK\n         SPACE 1\nSPRIGHT  MVC   CRIGHT(40),=CL40' ' MOVE SPACES TO RIGHT\n         B     LASTWR             GO TO LAST WRITE\n         SPACE 1\nMOVERIGT MVC   LSW,=C'2'          SET FULL PRINT FLAG\n         MVC   CRIGHT(40),PLINE       MOVE IN RIGHT SIDE\n         B     PUTIT              GO TO WRITE LINE\nEXIT     ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGI03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         SPACE 3\nCTLERROR LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nALINE1   DC    X'00540100'\n         DC    C'INITIATOR   JOB           JOB  INIT     '\n         DC    C'INITIATOR   JOB           JOB  INIT     '\n         SPACE 3\n         DS    0F\nALINE2   DC    X'00540100'\n         DC    C'ID  STATUS  NUM  JOBNAME  CLS  CLASS    '\n         DC    C'ID  STATUS  NUM  JOBNAME  CLS  CLASS    '\n         SPACE 3\n         DS    0F\nALINE3   DC    X'00540100'\n         DC    C'--------------------------------------  '\n         DC    C'--------------------------------------  '\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nDOUBLE   DS    2F\nSAVRET   DS    F\nXSASAVE  DS    F\nLSW      DS    C                  LINE PRINT SWITCH\n*\n* LSW ' ' IS NO FILLED, '1' IS LEFT FILLED, '2' IS BOTH FILLED\n*\n         SPACE 3\nPLINE    DS    0CL40\nIDENT    DS    CL4\nSTAT     DS    CL7\nJOBNUM   DS    CL6\nJOBNAME  DS    CL9\nUCLASS   DS    CL5\nINITNAM  DS    CL9\n         SPACE 3\n         DS    0F\nCLINEX   DS    F\nCLINE    DS    0CL80\nCLEFT    DS    CL40\nCRIGHT   DS    CL40\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\n         SPACE 3\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         $DEB               GEN $DEB\n         $SJB               GEN $SJB\n         $PIT               GEN $PIT\n         PRINT OFF\n         $CVT               GEN $CVT\n         $JESCT             GEN $JESCT\n         $SSCT              GEN $SSCT\n         $SVT               GEN $SVT\n         END\n./       ADD   NAME=CSCGJ03D\n         TITLE 'ESAGJ03D -   J  JOB MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CSCGJ03D -       J  JOB MONITOR                           ***\n***                                                                 ***\n***       VERSION -        1.1                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.1                            ***\n***                                                                 ***\n***       UPDATED -        09/01/79                                 ***\n***                        09/04/91 31-BIT ADDR.                    ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGJ03D CSECT\n         LR    R12,R15\n         USING CSCGJ03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVI   TSOSW,C' '\n         XC    JOBTOT2(8),JOBTOT2\n         XC    DMNTAB(200),DMNTAB\n         MVC   DMNTAB+200(200),DMNTAB\n         MVC   DMNTAB+400(200),DMNTAB\n         MVC   DMNTAB+600(200),DMNTAB\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY PARM\n         BZ    PARM2               NO\n         MVC   TSOSW(2),0(R3)      SAVE PARM\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C'T'          TSO DISPLAY\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C'J'          JOB DISPLAY\n         BE    PARM1               YES, CONTINUE\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),TSOSW\n         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY\n         BNE   PARM1\n         PACK  DOUBLE(8),TSOSW(2)\n         CVB   R1,DOUBLE\n         STC   R1,DOMAIN           SAVE DOMAIN\n         MVI   TSOSW,C'X'\n         B     PARM2\n         SPACE 1\nPARM1    MVI   TSOSW,C' '\n         SPACE 1\nPARM2    MVC   WTOLIST(4),=X'00540100'\n         MVI   SCANRET,C' '        SET FOUND\n         MVI   SCANTYPE,C'I'       SET IN QUEUE SCAN\nSETINIT  L     R4,16               CVT\n         L     R4,556(0,R4)        ASVT\n         LA    R4,524(0,R4)        ASCB SLOT ADDR\n         L     R8,XAA              ASCB/OUCB INFO STORAGE\n         USING JOBTABLE,R8\n         SPACE 1\nSETINIT1 CLC   0(16,R8),=4F'0'     1ST TIME\n         BNE   SETINIT3            NO\n         SPACE 1\nSETINIT2 LA    R4,4(0,R4)          INCR INTO ASVT\n         CLC   1(3,R4),=F'0'       END OF ASVT\n         BE    RETURN              YES, EXIT\n         TM    0(R4),X'80'         AVAILABLE SLOT\n         BO    SETINIT2            YES\n         L     R5,0(0,R4)          ASCB ADDR\n         LA    R5,0(0,R5)\n         ST    R5,0(0,R8)          ENTRY ID\n         LM    R14,R15,64(R5)      TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)     SRB TIME\n         SRDL  R14,22\n         AR    R15,R1\n         ST    R15,4(0,R8)         SAVE PREVIOUS CPU TIME\n         TIME  BIN\n         ST    R0,16(0,R8)\n         LA    R8,20(0,R8)         NEXT ENTRY\n         B     SETINIT2\n         SPACE 1\nSETINIT3 LA    R1,HDRI             IN QUEUE HDR\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    JOBOUT              YES, CONTINUE\n         BAL   R11,MSGRTN1\nJOBOUT   L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         LA    R4,524(0,R4)        ASCB SLOT ADDR\n         B     JOBOUT4\n         SPACE 1\nJOBOUT1  L     R5,0(0,R4)          ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R6,56(0,R5)         CSCB ADDR\n         L     R7,144(0,R5)        LOAD OUCB ADDR\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BNE   JOBOUT2             NO\n         CLI   41(R7),X'00'        SRC PRESENT\n         BNE   JOBOUT6             YES, GO CHECK DET WAIT\n         CLI   38(R5),X'7F'        LOGICAL SWAP\n         BE    JOBOUT4             YES, OUT\n         B     JOBOUT3             CONTINUE\n         SPACE 1\nJOBOUT2  CLI   38(R5),X'7F'        LOGICAL SWAP\n         BE    JOBOUT3             YES, OUT QUEUE\n         CLI   41(R7),X'00'        SWAP REASON\n         BE    JOBOUT4             NO, IN QUEUE\n         CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT3             NO\n         TM    21(R7),X'01'        MSO DET WAIT BIT ON\n         BZ    JOBOUT4             NO, IGNORE SRC\n         SPACE 1\nJOBOUT3  MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BAL   R11,ASCBFORM        GO FORMAT ASCB INFO\n         L     R6,144(0,R5)        OUCB ADDR\n         L     R3,60(0,R5)         TSB ADDR\n         L     R5,56(0,R5)         CSCB ADDR\n         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    JOBOUT4             YES, CONTINUE\n         CLC   JOBTOT1,=F'0'       ANY CPU THIS JOB?               @TEC\n         BE    JOBOUT4             NO. SKIP IT                     @TEC\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         SPACE 1\nJOBOUT4  LA    R4,4(0,R4)          INCR INTO ASVT\n         CLC   1(3,R4),=F'0'       END OF ASVT\n         BE    JOBOUT5             YES, RETURN\n         TM    0(R4),X'80'         AVAILABLE ENTRY\n         BO    JOBOUT4             YES, CHECK NEXT\n         B     JOBOUT1             GO USE IT\n         SPACE 1\nJOBOUT5  CLI   SCANTYPE,C'O'       OUT QUEUE SCAN\n         BE    DMNCHK              YES, EXIT\n         MVI   SCANRET,C' '        INIT OUTPUT SWITCH\n         MVI   SCANTYPE,C'O'       SET OUT QUEUE SCAN NEXT\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    JOBOUT              YES, CONTINUE\n         BAL   R11,JOBTOTL         TOTAL INPUT QUEUE\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         LA    R1,HDRO             OUT QUEUE HDR\n         BAL   R11,MSGRTN1\n         B     JOBOUT              NEXT PASS\n         SPACE 1\nJOBOUT6  CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT4             NO\n         TM    21(R7),X'01'        MSO DET WAIT BIT ON\n         BZ    JOBOUT3             NO, IGNORE SRC\n         B     JOBOUT4\nASCBFORM UNPK  DOUBLE(5),36(3,R5)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASID(4),DOUBLE      SAVE ASID\n         L     R8,XAA              JOBTABLE ADDR\n         SPACE 1\nASCBFRM1 CLC   0(4,R8),=F'0'       JOBTABLE END\n         BE    ASCBFRM2            YES\n         C     R5,0(0,R8)          ASCB MATCH\n         BE    ASCBFRM2            YES\n         LA    R8,20(0,R8)         NEXT ENTRY\n         B     ASCBFRM1\n         SPACE 1\nASCBFRM2 LM    R14,R15,64(R5)      TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)     SRB TIME\n         SRDL  R14,22\n         AR    R1,R15\n         L     R15,4(0,R8)         LOAD PREVIOUS CPU TIME\n         LTR   R15,R15             ANY PREVIOUS\n         BNZ   *+6                 NO\n         LR    R15,R1              PREVIOUS = CURRENT\n         ST    R15,8(0,R8)         SAVE PREVIOUS CPU TIME\n         ST    R1,4(0,R8)          SAVE TOTAL CPU TIME\n         S     R1,8(0,R8)          SUB PREVIOUS CPU TIME\n         ST    R1,12(0,R8)         SAVE DIFFERENCE\n         TIME  BIN\n         L     R1,16(0,R8)         OLD TIME\n         LTR   R1,R1               ANY OLD TIME\n         BNZ   *+8                 YES\n         ST    R0,16(0,R8)         OLD TIME = NEW TIME\n         LR    R1,R0               BINARY TIME\n         S     R1,16(0,R8)         INTERVAL TIME\n         ST    R0,16(0,R8)         NEW TIME BEGIN\n         LTR   R1,R1               TIME EQUAL 0\n         BZ    ASCBFRMY            YES, NO DIVIDE\n         L     R15,12(0,R8)        LOAD DIFFERENCE\n         LTR   R15,R15             NEGATIVE\n         BM    ASCBFRMX            YES\n         SR    R14,R14\n         M     R14,=F'10'          PERCENT\n         SR    R14,R14\n         DR    R14,R1              PERCENT UTIL\n         ST    R15,JOBTOT1+4       SAVE JOB TOTAL PCT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   PCT(7),=X'402020204B2020'\n         ED    PCT(4),DOUBLE+6\n         CH    R15,=H'50'          MAX\n         BNH   *+8                 NO\n         LH    R15,=H'50'          SET MAX\n         EX    R15,PCTMVE          GRAPHIC PERCENT\n         LA    R15,PCTGRAPH(R15)\n         MVI   0(R15),C'>'\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R1              PERCENT UTIL  (HUNDREDTHS)\n         ST    R15,JOBTOT1         SAVE JOB TOTAL HUNDREDTHS\n         CVD   R15,DOUBLE          PERCENT TO PRINT  (HUNDREDTHS)\n         UNPK  PCT+5(2),DOUBLE+6(2)\n         OI    PCT+6,X'F0'\n         BR    R11\n         SPACE 1\nASCBFRMX MVC   PCT(7),=C'**CHG**'\n         BR    R11\n         SPACE 1\nASCBFRMY MVC   PCT(7),=C'**ERR**'\n         BR    R11\n         SPACE 1\nPCTMVE   MVC   PCTGRAPH(0),PCTLINE\nJOBTOTL  MVC   WTOLIST+4(20),=CL20'## IN Q TOTAL ##'\n         SR    R14,R14\n         L     R15,JOBTOT2\n         D     R14,=F'100'\n         A     R15,JOBTOT2+4       TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   PCT(7),=X'402020204B2020'\n         ED    PCT(4),DOUBLE+6\n         SRL   R15,1\n         CH    R15,=H'50'          MAX\n         BNH   *+8                 NO\n         LH    R15,=H'50'          SET MAX\n         EX    R15,PCTTOT          GRAPHIC PERCENT\n         LA    R15,PCTGRAPH(R15)\n         MVI   0(R15),C'>'\n         CVD   R14,DOUBLE\n         UNPK  PCT+5(2),DOUBLE+6(2)\n         OI    PCT+6,X'F0'\n         BR    R11\n         SPACE 1\nPCTTOT   MVC   PCTGRAPH(0),PCTTLINE\nDMNCHK   MVC   DMNLIST(4),=X'00540100'\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BNE   RETURN              NO\n         LA    R4,DMNTAB-8\n         SR    R5,R5\n         SPACE 1\nDMNCHK1  CVD   R5,DOUBLE           DOMAIN NUMBER\n         MVC   DMNLIST+4(80),=CL80'DOMAIN XX'\n         UNPK  DMNNBR(2),DOUBLE+6(2)\n         OI    DMNNBR+1,X'F0'\n         LA    R5,1(0,R5)          NEXT DOMAIN\n         LA    R4,8(0,R4)          NEXT TABLE ENTRY\n         C     R5,=F'51'           END OF DOMAINS\n         BE    DMNCHK2             YES, TOTAL\n         CLC   0(8,R4),=2F'0'      ANY TIME IN THIS DOMAIN\n         BE    DMNCHK1             NO\n         SR    R14,R14\n         L     R15,0(0,R4)\n         D     R14,=F'100'\n         A     R15,4(0,R4)         TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNPCT(7),=X'402020204B2020'\n         ED    DMNPCT(4),DOUBLE+6\n         SRL   R15,1\n         CH    R15,=H'50'          MAX\n         BNH   *+8                 NO\n         LH    R15,=H'50'          SET MAX\n         EX    R15,DMNTOT          GRAPHIC PERCENT\n         LA    R15,DMNGRAPH(R15)\n         MVI   0(R15),C'>'\n         CVD   R14,DOUBLE\n         UNPK  DMNPCT+5(2),DOUBLE+6(2)\n         OI    DMNPCT+6,X'F0'\n         LA    R1,DMNLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         B     DMNCHK1\n         SPACE 3\nDMNCHK2  MVC   DMNLIST+4(80),=CL80'TOTAL PCT'\n         SR    R14,R14\n         L     R15,JOBTOT2\n         D     R14,=F'100'\n         A     R15,JOBTOT2+4       TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNPCT(7),=X'402020204B2020'\n         ED    DMNPCT(4),DOUBLE+6\n         SRL   R15,1\n         CH    R15,=H'50'          MAX\n         BNH   *+8                 NO\n         LH    R15,=H'50'          SET MAX\n         EX    R15,DMNTOT          GRAPHIC PERCENT\n         LA    R15,DMNGRAPH(R15)\n         MVI   0(R15),C'>'\n         CVD   R14,DOUBLE\n         UNPK  DMNPCT+5(2),DOUBLE+6(2)\n         OI    DMNPCT+6,X'F0'\n         LA    R1,DMNLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         B     RETURN\n         SPACE 1\nDMNTOT   MVC   DMNGRAPH(0),PCTTLINE\nCSCBFORM CLI   TSOSW,C'T'          TSO USER DISPLAY\n         BNE   CSCBFRM0            NO\n         CLI   28(R5),X'01'        TSO USER\n         BNE   JOBOUT4             NO, BYPASS\n         B     CSCBFRM6\n         SPACE 1\nCSCBFRM0 CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    *+12                YES, CONTINUE\n         CLI   28(R5),X'01'        TSO USER\n         BE    JOBOUT4             YES, DONT PROCESS\n         CLI   28(R5),X'03'        INIT\n         BNE   CSCBFRM3            NO, GO HANDLE\n         LA    R9,0(0,R5)          SAVE CSCB ADDR\n         SR    R10,R10             INSERT\n         IC    R10,30(0,R5)\n         SLL   R10,8               ASID\n         IC    R10,31(0,R5)\n         SPACE 1\nCSCBFRM1 L     R5,0(0,R5)          NEXT CSCB\n         LA    R5,0(0,R5)          CLEAR HIGH ORDER\n         LTR   R5,R5               END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R5,R9               LOAD CSCB ADDR\n         B     JOBOUT4             NO GOOD\n         CR    R5,R9               SAME CSCB\n         BE    JOBOUT4             YES, NO GOOD\n         CH    R10,30(0,R5)        SAME ASID\n         BNE   CSCBFRM1            NO, CHECK NEXT\n         SPACE 1\nCSCBFRM2 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),64(R5)\n         B     CSCBFRM4\n         SPACE 1\nCSCBFRM3 MVC   JOBNAME(8),16(R5)\n         MVC   STEPNAME(8),8(R5)\n         SPACE 1\nCSCBFRM4 CLI   TSOSW,C'X'          DOMAIN DISPLAY\n         BNE   CSCBFRM5            NO\n         CLC   DOMAIN(1),40(R6)    DOMAIN MATCH\n         BNE   JOBOUT4\n         SPACE 1\nCSCBFRM5 LM    R14,R15,JOBTOT1\n         A     R14,JOBTOT2\n         A     R15,JOBTOT2+4\n         STM   R14,R15,JOBTOT2\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    CSCBFRM7            YES\n         CLC   ASID(4),=C'0001'\n         BCR   7,R11\n         MVC   JOBNAME(20),=CL20'MASTER'\n         BR    R11\n         SPACE 1\nCSCBFRM6 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),16(R5)\n         B     CSCBFRM5\n         SPACE 1\nCSCBFRM7 SR    R1,R1\n         IC    R1,40(0,R6)         DOMAIN NUMBER\n         SLL   R1,3\n         LA    R1,DMNTAB(R1)       DOMAIN TABLE SLOT\n         LM    R14,R15,JOBTOT1\n         A     R14,0(0,R1)\n         A     R15,4(0,R1)\n         STM   R14,R15,0(R1)       SAVE DOMAIN TOTALS\n         B     JOBOUT4\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGJ03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\nMSGRTN   MVI   SCANRET,C'P'\n         SPACE 1\nMSGRTN1  SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         BR    R11\n         SPACE 3\nRETURN   ESTAE 0\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00540100'\n         DC    CL80'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nPCTLINE  DC    CL51'0=========1=========2=========3=========4========='\nPCTTLINE DC    CL51'0====1====2====3====4====5====6====7====8====9===='\n         SPACE 1\n         DS    0F\nNFNDMSG  DC    X'00540100'\n         DC    CL80'NO JOBS ON OUT QUEUE'\n         SPACE 1\nHDRI     DC    X'00540100'\n         DC    CL26'****   IN  QUEUE   ****'\n         DC    CL54' CPU PERCENT UTILIZATION'\n         SPACE 1\nHDRO     DC    X'00540100'\n         DC    CL26'****   OUT  QUEUE   ****'\n         DC    CL54' CPU PERCENT UTILIZATION'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nJOBTOT1  DS    2F\nJOBTOT2  DS    2F\nXSASAVE  DS    F\nASID     DS    F\nSCANRET  DS    C\nSCANTYPE DS    C\nTSOSW    DS    C\nDOMAIN   DS    C\n         SPACE 5\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL80\nJOBNAME  DS    CL8\n         DS    CL1\nSTEPNAME DS    CL8\n         DS    CL3\nPCT      DS    CL7\n         DS    CL2\nPCTGRAPH DS    CL51\n         SPACE 5\n         DS    0F\nDMNLIST  DS    F\nDMNMSG   DS    0CL80\n         DS    CL7\nDMNNBR   DS    CL2\n         DS    CL4\nDMNPCT   DS    CL7\n         DS    CL3\nDMNGRAPH DS    CL51\n         DS    CL6\n         SPACE 2\nESTAELST DS    0F,(ESTAEOVX)X\nDMNTAB   DS    200F\nWORKEND  DS    0F\n         SPACE 5\nJOBTABLE DSECT\nJOBTAB   DS    800F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGO03D\n         TITLE 'ESAGO03D -   O  I/O MONITOR'\n         PRINT NOGEN                                               @TEC\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       ESAGO03D -       O  I/O MONITOR                           ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        09/06/91                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGO03D CSECT\n         LR    R12,R15\n         LA    R7,4095(0,R12)\n         LA    R7,1(0,R7)\n         USING CSCGO03D,R12,R7\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\nPARMCHK  L     R3,XAL\n         LA    R3,0(0,R3)\n         MVI   PARMDEV,C'D'        DASD IS DEFAULT\n         LTR   R3,R3               ANY PARM\n         BZ    PARMCHK1            NO\n         MVC   PARMDEV(1),0(R3)    SET SCAN TYPE\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),1(R3)     BUSY PCT\n         CLC   DOUBLE(2),=C'00'    NUMERIC\n         BNE   PARMCHK1            NO\n         PACK  DOUBLE(8),1(2,R3)\n         CVB   R1,DOUBLE\n         ST    R1,THRLIMIT\nPARMCHK1 LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L\nESTAEOVX EQU   *-ESTAEOVL\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\nCSCSTART L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         MVC   WTOLIST(84),SRMOVLY\n         L     R5,88(0,R4)         WAMT\n         L     R1,THRTSOPG         TSO PERF GROUP NUMBER\n         SLL   R1,2                TIMES 4\n         L     R6,88(R1,R5)        WAMP OFFSET                     @TEC\n         AR    R5,R6               WAMP ADDRESS\n         SR    R14,R14\n         L     R15,0(0,R5)         TOTAL ENDED TRANS\n         LTR   R15,R15             ZERO TRANS\n         BZ    NOTSO               YES, BYPASS 0C9\n         L     R15,12(0,R5)        TOTAL ELAPSED TIME FOR ENDED TRANS\n         D     R14,0(0,R5)         DIVIDE BY ENDED TRANSACTIONS\n         SR    R14,R14\n         D     R14,=F'1000'\nNOTSO    CVD   R15,DOUBLE          AVG SECONDS RESPONSE TIME\n         SRDL  R14,32\n         D     R14,=F'10'\n         CVD   R15,DOUBLEX\n         MVC   WTOLIST+8(7),=X'402021204B2020'\n         ED    WTOLIST+8(4),DOUBLE+6\n         UNPK  WTOLIST+13(2),DOUBLEX+6(2)\n         OI    WTOLIST+14,X'F0'\n         L     R1,4(0,R4)          CCT                             @TEC\n         LH    R1,104(0,R1)        LONG TERM CPU %                 @TEC\n         SRL   R1,8                SCALED BY 256                   @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+25(4),=X'40212020'\n         ED    WTOLIST+25(4),DOUBLE+6\n         L     R1,4(0,R4)          CCT                             @TEC\n         LH    R1,102(0,R1)        AVERAGE CPU                     @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+38(4),=X'40212020'\n         ED    WTOLIST+38(4),DOUBLE+6\n         L     R1,228(0,R4)        RCT                             @TEC\n         LH    R1,64(0,R1)         AVERAGE PAGING                  @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+51(4),=X'40212020'\n         ED    WTOLIST+51(4),DOUBLE+6\n         L     R1,228(0,R4)        RCT                             @TEC\n         LH    R1,54(0,R1)         AVERAGE UIC                     @TEC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+65(4),=X'40212020'\n         ED    WTOLIST+65(4),DOUBLE+6\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         MVC   WTOLIST(4),=X'00540100'\n         L     R8,XAA              ASCB/OUCB INFO STORAGE\n         USING JOBTABLE,R8\n         L     R3,THRSTIMR\n         BAL   R10,CHKUCB          CLEAR UCB TABLE\n         BAL   R10,CHNLOOP\n         CLI   WJOB1,C' '          ANY OUTPUT\n         BE    CHNNODSP            NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\nCHNNODSP MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         MVC   WTOLIST(4),=X'00540100'\n         BAL   R10,CHKUCB6         CHECK BUSY UCBS\n         B     RETURN\nCHNLOOP  DS    0H\n         LR    R4,R10\n         BAL   R10,CHKUCB1         CHECK BUSY UCBS\n         LR    R10,R4\n         L     R1,16               CVT                             @TEC\n         L     R1,604(0,R1)        RMCT                            @TEC\n         L     R1,280(0,R1)        CMCT                            @TEC\n         L     R14,28(0,R1)        END OF CPMT                     @TEC\n         S     R14,12(0,R1)        MINUS START                     @TEC\n         SRDA  R14,32                                              @TEC\n         D     R14,=F'12'          12 BYTES PER CHPID              @TEC\n         BCTR  R15,0               MINUS 12 FOR THE HEADER         @TEC\n         LR    R3,R15              NUMBER OF CHPID'S               @TEC\n         ST    R3,MAXCHPID         SAVE FOR LATER                  @TEC\n         L     R14,12(0,R1)        CPMT                            @TEC\n         L     R0,8(0,R14)         START SAMPLE COUNT              @TEC\n         ST    R0,CHBSMPCT         AND SAVE IT                     @TEC\n         LA    R14,12(0,R14)       SKIP OVER HEADER                @TEC\n         SR    R15,R15             INDEX REGISTER                  @TEC\nCHNLOOP1 CLC   8(2,R14),=X'FFFF'   CHPID NOT INSTALLED.            @TEC\n         BE    CHNLOOP2                                            @TEC\n         L     R1,4(0,R14)         BUSY COUNT                      @TEC\n         ST    R1,CHBSYPCT(R15)                                    @TEC\nCHNLOOP2 LA    R14,12(0,R14)       NEXT CPMT ENTRY                 @TEC\n         LA    R15,4(0,R15)        NEXT SLOT                       @TEC\n         BCT   R3,CHNLOOP1                                         @TEC\n         STIMER  WAIT,DINTVL=THRINTVL\n         L     R1,16               CVT                             @TEC\n         L     R1,604(0,R1)        RMCT                            @TEC\n         L     R1,280(0,R1)        CMCT                            @TEC\n         L     R14,28(0,R1)        END OF CPMT                     @TEC\n         S     R14,12(0,R1)        MINUS START                     @TEC\n         SRDA  R14,32                                              @TEC\n         D     R14,=F'12'          12 BYTES PER CHPID              @TEC\n         BCTR  R15,0               MINUS 12 FOR THE HEADER         @TEC\n         LR    R3,R15              NUMBER OF CHPID'S               @TEC\n         L     R14,12(0,R1)        CPMT                            @TEC\n         L     R0,8(0,R14)         END SAMPLE COUNT                @TEC\n         S     R0,CHBSMPCT         MINUS STARTING COUNT            @TEC\n         LA    R14,12(0,R14)       SKIP OVER HEADER                @TEC\n         SR    R15,R15             INDEX REGISTER                  @TEC\nCHNLOOP3 CLC   8(2,R14),=X'FFFF'   CHPID NOT INSTALLED.            @TEC\n         BE    CHNLOOP4                                            @TEC\n         CLC   4(4,R14),=F'0'      NO CHANNEL ACTIVITY?            @TEC\n         BE    CHNLOOP4            IF SO, SKIP IT                  @TEC\n         L     R4,4(0,R14)         BUSY SAMPLES                    @TEC\n         S     R4,CHBSYPCT(R15)    MINUS PRIOR                     @TEC\n         SRDA  R4,32                                               @TEC\n         M     R4,=F'100'                                          @TEC\n         DR    R4,R0                                               @TEC\n         ST    R5,CHBSYPCT(R15)    SAVE CHANNEL BUSY %             @TEC\nCHNLOOP4 LA    R14,12(0,R14)       NEXT CPMT ENTRY                 @TEC\n         LA    R15,4(0,R15)        NEXT SLOT                       @TEC\n         BCT   R3,CHNLOOP3                                         @TEC\n         LR    R4,R10\n         BAL   R10,CHKUCB6         CHECK BUSY UCBS\n         LR    R10,R4\n         L     R14,MAXCHPID        PICK UP HIGHEST CHPID           @TEC\n         LA    R5,THRCH1LM         CHANNEL BUSY PERCENT LIMIT\n         LA    R6,THRCH1BS         CHANNEL BUSY TIME THRESHOLD\n         LA    R3,CHBSYPCT                                         @TEC\n         LA    R4,CHBSYTIM                                         @TEC\n         LA    R9,CHPNUMS                                          @TEC\nCHNLOOP5 BAL   R11,CHNDISP                                         @TEC\n         L     R14,R14SAVE         RESTORE LOOP REGISTER           @TEC\n         LA    R3,4(0,R3)          BUSY PCT NEXT CHPID             @TEC\n         LA    R4,4(0,R4)          BUSY TIME NEXT CHPID            @TEC\n         LA    R9,2(0,R9)          NEXT CHPID NUMBER               @TEC\n         LA    R5,8(0,R5)          NEXT PERCENT THRESHOLD          @TEC\n         LA    R6,8(0,R6)          NEXT TIME THRESHOLD             @TEC\n         BCT   R14,CHNLOOP5                                        @TEC\n         BR    R10\nCHNDISP  ST    R14,R14SAVE                                         @TEC\n         L     R1,0(0,R3)\n         C     R1,0(0,R5)          THRESHOLD REACHED\n         BL    CHNDISP1            NO\n         TIME  BIN\n         L     R1,0(0,R4)          OLD TIME\n         LTR   R1,R1               ANY OLD TIME\n         BNZ   *+8                 YES\n         ST    R0,0(0,R4)          OLD TIME = NEW TIME\n         LR    R1,R0               BINARY TIME\n         S     R1,0(0,R4)          INTERVAL TIME\n         LTR   R1,R1               TIME EQUAL 0\n         BCR   8,R11               YES\n         BP    CHNDISP2\nCHNDISP1 XC    0(4,R4),0(R4)\n         BR    R11\nCHNDISP2 LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'         SECONDS\n         L     R1,0(0,R3)          PERCENT BUSY\n         CVD   R1,DOUBLE\n         CVD   R15,DOUBLEX\n         C     R15,0(0,R6)         CHANNEL BUSY TIME THRESHOLD REACHED\n         BCR   4,R11               NO\n         CLI   WJOB1,C' '          1ST PASS\n         BNE   CHNDISP3            NO\n         MVC   WJOB1(16),=CL16'CHANNEL XX  XXX%'\n         MVC   WJOB1+8(2),0(R9)    CHANNEL NUMBER\n         MVC   WJOB1+11(4),=X'40202120'\n         ED    WJOB1+11(4),DOUBLE+6\n         BR    R11\nCHNDISP3 CLI   WJOB2,C' '          2ND PASS\n         BNE   CHNDISP4            NO\n         MVC   WJOB2(16),=CL16'CHANNEL XX  XXX%'\n         MVC   WJOB2+8(2),0(R9)    CHANNEL NUMBER\n         MVC   WJOB2+11(4),=X'40202120'\n         ED    WJOB2+11(4),DOUBLE+6\n         BR    R11\nCHNDISP4 CLI   WJOB3,C' '          3RD PASS\n         BNE   CHNDISP5            NO\n         MVC   WJOB3(16),=CL16'CHANNEL XX  XXX%'\n         MVC   WJOB3+8(2),0(R9)    CHANNEL NUMBER\n         MVC   WJOB3+11(4),=X'40202120'\n         ED    WJOB3+11(4),DOUBLE+6\n         BR    R11\nCHNDISP5 MVC   WJOB4(16),=CL16'CHANNEL XX  XXX%'\n         MVC   WJOB4+8(2),0(R9)    CHANNEL NUMBER\n         MVC   WJOB4+11(4),=X'40202120'\n         ED    WJOB4+11(4),DOUBLE+6\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nCHKUCB   STM   R0,R15,SAVEREGS\n         MVC   UCBTABND(2),=X'FFFF'\n         LA    R6,UCBTAB-16                                        @TEC\nCHKUCB0  LA    R6,16(0,R6)                                         @TEC\n         CLC   0(2,R6),=X'FFFF'    END OF TABLE\n         BE    CHKUCB9             YES\n         CLI   2(R6),X'00'         REFERENCED LAST PASS\n         BNE   *+10                YES\n         XC    0(8,R6),0(R6)\n         MVI   2(R6),X'00'\n         XC    8(4,R6),8(R6)\n         B     CHKUCB0\nCHKUCB1  XC    UCBDMSAV(24),UCBDMSAV\n         STM   R0,R15,SAVEREGS\n         L     R9,CVTPTR           CVT ADDR                        @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         XC    WKAREA(100),WKAREA  CLEAR WORK AREA                 @TEC\n         LA    R1,WKAREA           SETUP PARAMETER LIST            @TEC\n         ST    R1,PLIST                                            @TEC\n         LA    R1,=X'20'           SPECIFY DASD                    @TEC\n         ST    R1,PLIST+4                                          @TEC\n         LA    R1,ADDR             WORD TO PUT ADDRESS OF UCB      @TEC\n         ST    R1,PLIST+8                                          @TEC\n         OI    PLIST+8,X'80'       31 BIT PARM END SET             @TEC\nCHKUCB1A BAL   R10,UCBDML#0        GET NEXT UCB ADDR\n         LTR   R1,R1               END OF UCBS\n         BZ    CHKUCB9             YES, EXIT\n         LA    R6,UCBTAB-16                                        @TEC\n         TM    3(R1),X'88'         ONLINE/ALLOCATED\n         BNO   CHKUCB1A            NO\n         CLI   PARMDEV,C'A'        ALL DEV REQ\n         BE    CHKUCB2             YES\n         CLI   PARMDEV,C'D'        DASD REQ\n         BNE   *+12                NO\n         CLI   18(R1),X'20'        DASD\n         BE    CHKUCB2             YES\n         CLI   PARMDEV,C'T'        TAPE REQ\n         BNE   *+12                NO\n         CLI   18(R1),X'80'        TAPE\n         BE    CHKUCB2             YES\n         CLI   PARMDEV,C'V'        ALL DEV WITH VOLSER REQ\n         BNE   *+20                NO\n         CLI   18(R1),X'20'        DASD\n         BE    CHKUCB2             YES\n         CLI   18(R1),X'80'        TAPE\n         BE    CHKUCB2             YES\n         CLI   PARMDEV,C'U'        UNIT REC REQ\n         BNE   *+12                NO\n         CLI   18(R1),X'08'        UNIT REC\n         BE    CHKUCB2             YES\n         CLI   PARMDEV,C'C'        COMM REQ\n         BNE   CHKUCB1A            NO\n         CLI   18(R1),X'20'        DASD\n         BE    CHKUCB1A            YES\n         CLI   18(R1),X'80'        TAPE\n         BE    CHKUCB1A            YES\n         CLI   18(R1),X'08'        UNIT REC\n         BE    CHKUCB1A            YES\nCHKUCB2  LA    R6,16(0,R6)         NEXT UCB ENTRY                  @TEC\n         CLC   0(2,R6),=X'FFFF'    END OF UCB TABLE\n         BE    CHKUCB3             YES, CHECK FOR EMPTY SLOT\n         C     R1,12(0,R6)         UCB ADDR MATCH                  @TEC\n         BNE   CHKUCB2             NO\n         B     CHKUCB5\nCHKUCB3  LA    R6,UCBTAB-16                                        @TEC\nCHKUCB4  LA    R6,16(0,R6)         NEXT UCB ENTRY                  @TEC\n         CLC   0(2,R6),=X'FFFF'    END OF UCB TABLE\n         BE    CHKUCB1A            YES, NEXT UCB\n         CLC   12(4,R6),=F'0'      EMPTY SLOT                      @TEC\n         BNE   CHKUCB4             NO, NEXT ENTRY\nCHKUCB5  ST    R1,12(0,R6)         SAVE UCB ADDR                   @TEC\n         MVI   2(R6),X'FF'         SLOT IN USE\n         L     R1,8(0,R6)\n         LA    R1,1(0,R1)\n         ST    R1,8(0,R6)\n         B     CHKUCB1A\nCHKUCB6  STM   R0,R15,SAVEREGS\n         XC    PREVUADR(4),PREVUADR\nCHKUCB6A LA    R6,UCBTAB-16                                        @TEC\n         XC    CURRULST(4),CURRULST\n         MVC   CURRUADR(4),=X'0000FFFF'\nCHKUCB7  LA    R6,16(0,R6)                                         @TEC\n         CLC   0(2,R6),=X'FFFF'    END OF UCB TABLE\n         BE    CHKUCB7A            YES, GO CHECK\n         SR    R1,R1\n         L     R1,12(0,R6)         UCB ADDR                        @TEC\n         C     R1,PREVUADR         COMPARE TO PREVIOUS UCB\n         BNH   CHKUCB7             LOWER, NEXT\n         C     R1,CURRUADR         COMPARE TO CURRENT UCB\n         BNL   CHKUCB7             NOT LOWER, NEXT\n         ST    R1,CURRUADR\n         ST    R6,CURRULST\n         B     CHKUCB7\nCHKUCB7A L     R1,CURRUADR         LOAD UCB ADDR\n         L     R6,CURRULST         LOAD UCB TABLE ENTRY ADDR\n         LTR   R6,R6               END OF UCBS\n         BZ    CHKUCB9             YES\n         ST    R1,PREVUADR         SAVE PREV UCB ADDR\n         LA    R3,UCBNRDY\n         LA    R4,THRBSYTM\n         TM    6(R1),X'40'         NOT READY\n         BO    CHKUCB7B\n         LA    R3,UCBBUSY\n         LA    R4,THRBSYTM\n         SR    R14,R14\n         L     R15,8(0,R6)         UCB BUSY COUNT\n         XC    8(4,R6),8(R6)\n         M     R14,=F'100'\n         D     R14,THRSTIMR        PERCENT BUSY\n         SR    R1,R1\n         IC    R1,3(0,R6)          CUMULATIVE PERCENT\n         LTR   R1,R1               ZERO\n         BNZ   *+6                 NO\n         LR    R1,R15              FAKE START\n         MH    R1,=H'3'            3/4 PREVIOUS\n         AR    R1,R15              1/4 CURRENT\n         SRL   R1,2\n         STC   R1,3(0,R6)          NEW CUM PERCENT\n         C     R1,THRLIMIT         THRESHOLD REACHED\n         BL    CHKUCB7C            NO\nCHKUCB7B TIME  BIN\n         L     R1,4(0,R6)          OLD TIME\n         LTR   R1,R1               ANY OLD TIME\n         BNZ   *+8                 YES\n         ST    R0,4(0,R6)          OLD TIME = NEW TIME\n         LR    R1,R0               BINARY TIME\n         S     R1,4(0,R6)          INTERVAL TIME\n         LTR   R1,R1               TIME EQUAL 0\n         BZ    CHKUCB6A            YES\n         BP    CHKUCB8\nCHKUCB7C XC    4(8,R6),4(R6)\n         B     CHKUCB6A\nCHKUCB8  LR    R14,R1\n         SRDL  R14,32\n         D     R14,=F'100'         SECONDS\n         SR    R1,R1\n         IC    R1,3(0,R6)\n         CVD   R1,DOUBLE\n         CVD   R15,DOUBLEX\n         C     R15,0(0,R4)         TIME THRESHOLD REACHED\n         BL    CHKUCB6A            NO\n         CLI   WJOB1,C' '          1ST PASS\n         BNE   CHKUCB8A            NO\n         MVC   WJOB1(16),0(R3)\n         SR    R1,R1\n         L     R1,12(0,R6)         UCB ADDR                        @TEC\n         MVC   WJOB1(3),13(R1)     DEVICE ADDRESS\n         TM    18(R1),X'A0'        DASD OR TAPE\n         BZ    *+10                NO, NO VOLSER\n         MVC   WJOB1+4(6),28(R1)   DEVICE VOLSER\n         LA    R1,UCBNRDY\n         CR    R1,R3               NOT READY MESSAGE\n         BE    CHKUCB6A            YES, NO PERCENT\n         MVC   WJOB1+11(4),=X'40202120'\n         ED    WJOB1+11(4),DOUBLE+6\n         B     CHKUCB6A\nCHKUCB8A CLI   WJOB2,C' '          2ND PASS\n         BNE   CHKUCB8B            NO\n         MVC   WJOB2(16),0(R3)\n         SR    R1,R1\n         L     R1,12(0,R6)         UCB ADDR                        @TEC\n         MVC   WJOB2(3),13(R1)     DEVICE ADDRESS\n         TM    18(R1),X'A0'        DASD OR TAPE\n         BZ    *+10                NO, NO VOLSER\n         MVC   WJOB2+4(6),28(R1)   DEVICE VOLSER\n         LA    R1,UCBNRDY\n         CR    R1,R3               NOT READY MESSAGE\n         BE    CHKUCB6A            YES, NO PERCENT\n         MVC   WJOB2+11(4),=X'40202120'\n         ED    WJOB2+11(4),DOUBLE+6\n         B     CHKUCB6A\nCHKUCB8B CLI   WJOB3,C' '          3RD PASS\n         BNE   CHKUCB8C            NO\n         MVC   WJOB3(16),0(R3)\n         SR    R1,R1\n         L     R1,12(0,R6)         UCB ADDR                        @TEC\n         MVC   WJOB3(3),13(R1)     DEVICE ADDRESS\n         TM    18(R1),X'A0'        DASD OR TAPE\n         BZ    *+10                NO, NO VOLSER\n         MVC   WJOB3+4(6),28(R1)   DEVICE VOLSER\n         LA    R1,UCBNRDY\n         CR    R1,R3               NOT READY MESSAGE\n         BE    CHKUCB6A            YES, NO PERCENT\n         MVC   WJOB3+11(4),=X'40202120'\n         ED    WJOB3+11(4),DOUBLE+6\n         B     CHKUCB6A\nCHKUCB8C MVC   WJOB4(16),0(R3)\n         SR    R1,R1\n         L     R1,12(0,R6)         UCB ADDR                        @TEC\n         MVC   WJOB4(3),13(R1)     DEVICE ADDRESS\n         TM    18(R1),X'A0'        DASD OR TAPE\n         BZ    *+10                NO, NO VOLSER\n         MVC   WJOB4+4(6),28(R1)   DEVICE VOLSER\n         LA    R1,UCBNRDY\n         CR    R1,R3               NOT READY MESSAGE\n         BE    CHKUCB8D            YES, NO PERCENT\n         MVC   WJOB4+11(4),=X'40202120'\n         ED    WJOB4+11(4),DOUBLE+6\nCHKUCB8D LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         B     CHKUCB6A\nCHKUCB9  LM    R0,R15,SAVEREGS\n         BR    R10\nUCBDML#0 ST    R8,UCBDMSAV         .SAVE WORK REG 1\n         ST    R10,UCBDMSAV+8      .SAVE WORK REG 3\n         ST    R11,UCBDMSAV+12     .SAVE WORK REG 4\nUCBLOOP1 L     R9,CVTPTR           CVT ADDR                        @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         LA    R1,PLIST            POINT AT PARM LIST              @TEC\n         LR    R15,R9              GET MODULE ADDRESS              @TEC\n         BALR  R14,R15             CALL MVS                        @TEC\n         LTR   R15,R15             UCB FOUND?                      @TEC\n         BZ    UCBFND              YES.                            @TEC\n         SR    R1,R1               SAY THAT'S ALL.                 @TEC\n         B     UCBDMCON            AND GO HOME.                    @TEC\nUCBFND   DS    0H\n         L     R1,ADDR             GET ADDR OF UCB                 @TEC\n         L     R8,UCBDMLOW         .SET SEARCH ARGUMENT\nUCBDML#1 LA    R8,1(0,R8)          .NEXT UNIT ADDR POSSIBLE\n         L     R10,=X'0000FFFF'    .SET MAX NEXT LEAST HIGH\nUCBDML#2 LTR   R1,R1               MORE UCBS?                      @TEC\n         BZ    UCBDMOUT            .YES, GO PROCESS\nUCBDML#4 TM    6(R1),X'8A'         BUSY AND/OR CHANNEL PROGRAM ACTIVE\n         BZ    UCBLOOP1            NO, NEXT UCB                    @TEC\n         BAL   R11,UCBDMCNV        .CONVERT UNIT ADDR TO HEX\n         CR    R0,R8               .UNIT EQUAL                     @TEC\n         BL    UCBLOOP1            .LOW NOT EQUAL, NEXT UCB        @TEC\n         LR    R10,R0              .SET NEXT LEAST HIGH UNIT ADDR  @TEC\n         ST    R1,UCBDMCUR         SET NEXT LEAST HIGH UCB ADD     @TEC\n         B     UCBDMOUT            .GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)        .UNIT ADDR DIGIT\n         TM    13(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)        .UNIT ADDR DIGIT\n         TM    14(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)        .UNIT ADDR DIGIT\n         TM    15(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         LR    R0,R14              .SET RESULTS REG                @TEC\n         BR    R11\nUCBDMOUT C     R10,=X'0000FFFF'    .ALL DONE\n         BE    UCBDMEX             .YES\n         ST    R10,UCBDMLOW        .NEXT LOW UNIT ADDR\n         L     R1,UCBDMCUR         .LOAD UCB ADDR FOR FOUND UNIT\n         B     UCBDMCON            .CONTINUE\nUCBDMEX  SR    R1,R1               .CLEAR UCB ADDR REGISTER\n         L     R8,UCBDMSAV         .RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      .RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     .RELOAD WORK REG 4\n         B     UCBDMRET            .END OF UCBS\nUCBDMCON L     R8,UCBDMSAV         .RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      .RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     .RELOAD WORK REG 4\nUCBDMRET EQU   *\n         BR    R10\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n**************************************************************\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE\n*  OPERANDS, REGISTERS, AND PSW IN IT.\n**************************************************************\n         STM   R14,R12,12(R13)     SAVE REGISTER\n         LR    R14,R13             SAVE ORIG R13\n         L     R13,0(R1)           GET ESTAE PARM\n         L     R2,XSASAVE          GET XSA ADDRESS\n         LR    R13,R14             RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA\n*                                  AND EBCDIC\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA\n         B     ESTNOP              SKIP CONSTANTS\n         ESTMODS ,\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS\n         LA    R3,ESTMODS          POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,                   X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGO03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BR    R11\nRETURN   CLI   WJOB1,C' '          ANY OUTPUT\n         BE    EXIT                NO\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\nEXIT     ESTAE 0\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R2,SAVRET           RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15\n         LR    R14,R2\n         BR    R14\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\nUCBNRDY  DC    CL16'XXX         NRDY'\nUCBBUSY  DC    CL16'XXX         XXX%'\n         DS    0F\nCHPNUMS  DC    C'000102030405060708090A0B0C0D0E0F'                 @TEC\n         DC    C'101112131415161718191A1B1C1D1E1F'                 @TEC\nTHRCH1BS DC    F'20'               CHANNEL 1 PERCENT BUSY THRESHOLD\nTHRCH1LM DC    F'20'               CHANNEL 1 PERCENT BUSY LIMIT\n         DC    64A(1)                                              @TEC\n         DS    0F\nSTAEMSG  DC    X'00540100'\n         DC    CL80'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nSRMOVLY  DS    0CL84\n         DC    XL4'00540100'\n         DC    CL5'TSO-',CL10' '\n         DC    CL6'LGCP-',CL7' '\n         DC    CL6'AVCP-',CL7' '\n         DC    CL6'AVPG-',CL7' '\n         DC    CL7'AVUIC-',CL7' '\n         DC    CL6'ASMQ-',CL6' '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*        THRESHOLD VALUES FOR ALL DISPLAY LIMITS                      *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         DS    0D\nTHRINTVL DC    CL8'00000500'       5 SEC STIMER FOR CHANNEL BUSY\nTHRSTIMR DC    F'50'               CHANNEL BUSY STIMER REPETITIONS\n***   THE ABOVE VALUES MULTIPLIED TOGETHER GIVE THE MINIMUM\n***   REFRESH FOR THIS COMMAND\nTHRTSOPG DC    F'02'               TSO PERFORMANCE GROUP\nTHRBSYTM DC    F'05'               BUSY / NOT READY THRESHOLD\nTHRLIMIT DC    F'20'               BUSY / NOT READY LIMIT\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nSAVEREGS DS    18F\nDOUBLE   DS    2F\nDOUBLEX  DS    2F\nPARMDEV  DS    F\nXSASAVE  DS    F\nPREVUADR DS    F\nCURRUADR DS    F\nCURRULST DS    F\nUCBDMSAV DS    5F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\nPLIST    DS    3F                                                  @TEC\nADDR     DS    F                                                   @TEC\nWKAREA   DS    0D,XL100                                            @TEC\n         DS    F\nMAXCHPID DS    F                                                   @TEC\nR14SAVE  DS    F                                                   @TEC\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL80\nWJOB1    DS    CL16\n         DS    CL5\nWJOB2    DS    CL16\n         DS    CL5\nWJOB3    DS    CL16\n         DS    CL5\nWJOB4    DS    CL16\n         DS    CL1\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nJOBTABLE DSECT\nCHBSMPCT DS    F                   CHANNEL BUSY SAMPLE COUNT       @TEC\nCHBSYTIM DS    32F                                                 @TEC\nCHBSYPCT DS    32F                                                 @TEC\nUCBTAB   DS    100CL16                                             @TEC\nUCBTABND DS    F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\nCHAN1    EQU   256\nCHAN2    EQU   512\nCHAN3    EQU   768\nCHAN4    EQU   1024\nCHAN5    EQU   1280\nCHAN6    EQU   1536\nCHAN7    EQU   1792\nCHAN8    EQU   2048\nCHAN9    EQU   2304\nCHAN10   EQU   2560\nCHAN11   EQU   2816\nCHAN12   EQU   3072\nCHAN13   EQU   3328\nCHAN14   EQU   3584\nCHAN15   EQU   3840\n         IHASDWA\n         CVT   DSECT=YES                                           @TEC\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGS03D\n         TITLE 'ESAGS03D -   S  SYSTEM INDICATOR DISPLAY'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SP1GS03D -       S  SYSTEM INDICATOR DISPLAY              ***\n***                                                                 ***\n***       VERSION -        1.1                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        08/19/91  JCL-TEC                        ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGS03D CSECT\n         LR    R12,R15\n         USING CSCGS03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         L     R3,XAL\n         LA    R3,0(0,R3)\n         XC    PARM(3),PARM\n         LTR   R3,R3\n         BZ    *+10                NO PARM\n         MVC   PARM(3),0(R3)\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVC   WTOLIST(4),=X'00540100'\n         MVC   WTOLIST+4(80),WTOHDR\n         MVC   WTOLIST+22(9),=C'AVRG CURR'\n         CLI   PARM,C'A'           AVERAGE GRAPHIC DISPLAY\n         BNE   *+10                NO\n         MVC   WTOLIST+22(9),=C'CURR AVRG'\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         L     R5,XAA\n         USING AVERAGE,R5\n         CLC   0(4,R5),=F'0'       1ST PASS\n         BNE   SYSIND              NO\n         LA    R1,LGCPU\n         ST    R1,LGCPU\n         LA    R1,AVCPU\n         ST    R1,AVCPU\n         LA    R1,AVPAG\n         ST    R1,AVPAG\n         LA    R1,AVUIC\n         ST    R1,AVUIC\n         LA    R1,AVASQ\n         ST    R1,AVASQ\nSYSIND   L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         SR    R1,R1\n         L     R1,4(0,R4)          CCT                             @TEC\n         LH    R1,104(0,R1)        LONG TERM CPU UTIL              @TEC\n         SRL   R1,8                SCALED BY 256?                  @TEC\n         LA    R6,LGCPU\n         LA    R11,LGCPUEND\n         BAL   R7,SYSACCUM\n         LA    R6,LGCPUOVL\n         LA    R8,2\n         LA    R10,GRAPH2\n         BAL   R7,SYSWTO\n         L     R1,4(0,R4)          CCT                             @TEC\n         LH    R1,102(0,R1)        AVERAGE CPU                     @TEC\n         LA    R6,AVCPU\n         LA    R11,AVCPUEND\n         BAL   R7,SYSACCUM\n         LA    R6,AVCPUOVL\n         LA    R8,2\n         LA    R10,GRAPH2\n         BAL   R7,SYSWTO\n         L     R1,228(0,R4)        RCT                             @TEC\n         LH    R1,64(0,R1)         AVERAGE PAGING                  @TEC\n         LA    R6,AVPAG\n         LA    R11,AVPAGEND\n         BAL   R7,SYSACCUM\n         LA    R6,AVPAGOVL\n         LA    R8,1\n         LA    R10,GRAPH1\n         BAL   R7,SYSWTO\n         L     R1,228(0,R4)        RCT                             @TEC\n         LH    R1,54(0,R1)         AVERAGE UIC                     @TEC\n         LA    R6,AVUIC\n         LA    R11,AVUICEND\n         BAL   R7,SYSACCUM\n         LA    R6,AVUICOVL\n         LA    R8,1\n         LA    R10,GRAPH1\n         BAL   R7,SYSWTO\n*        LH    R1,878(0,R4)        AVERAGE ASMQ             AXC-SP1\n*        LA    R6,AVASQ\n*        LA    R11,AVASQEND\n*        BAL   R7,SYSACCUM\n*        LA    R6,AVASQOVL\n*        LA    R8,1\n*        LA    R10,GRAPH1\n*        BAL   R7,SYSWTO\nDOMAIN   L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         MVC   DOMAINO1(80),DOMAINB1\n         MVC   DOMAINO2(80),DOMAINB2\n         LH    R9,188(0,R4)        NO. OF DOMAINS\n         BCTR  R9,0\n         L     R4,180(0,R4)        DMDT\n         SPACE 1\nDOMAIN1  LA    R4,64(0,R4)         NEXT DOMAIN                     @TEC\n         CLC   6(4,R4),=F'0'       EMPTY DOMAIN\n         BNE   DOMAIN2             NO\n         CLC   12(4,R4),=F'0'      EMPTY DOMAIN\n         BNE   DOMAIN2             NO\n         BCT   R9,DOMAIN1          NEXT DOMAIN\n         B     RETURN\n         SPACE 1\nDOMAIN2  SR    R1,R1\n         IC    R1,0(0,R4)          DOMAIN NUMBER\n         CVD   R1,DOUBLE\n         LA    R6,DOMAINO1\n         UNPK  DOMAINO1+4(2),DOUBLE+6(2)\n         OI    DOMAINO1+5,X'F0'\n         LH    R1,10(0,R4)         CURRENT MPL\n         LR    R11,R1\n         LA    R8,1\n         LA    R10,GRAPH1\n         BAL   R7,SYSWTO\n         SR    R1,R1\n         IC    R1,0(0,R4)          DOMAIN NUMBER\n         CVD   R1,DOUBLE\n         LA    R6,DOMAINO2\n         UNPK  DOMAINO2+4(2),DOUBLE+6(2)\n         OI    DOMAINO2+5,X'F0'\n         LH    R1,6(0,R4)          CURRENT MPL\n         LA    R1,8(0,R1)\n         SRL   R1,4\n         LR    R11,R1\n         LA    R8,1\n         LA    R10,GRAPH1\n         BAL   R7,SYSWTO\n         BCT   R9,DOMAIN1          NEXT DOMAIN\n         B     RETURN\nSYSACCUM SR    R14,R14\n         SR    R15,R15\n         L     R10,0(0,R6)         PREVIOUS SLOT\n         LA    R10,4(0,R10)        NEXT SLOT\n         CR    R10,R11             SLOT OK\n         BL    SYSACC1             YES\n         LA    R10,4(0,R6)         1ST SLOT\n         SPACE 1\nSYSACC1  ST    R1,0(0,R10)         SAVE VALUE\n         ST    R10,0(0,R6)         SAVE NEW SLOT ADDR\n         SR    R10,R10\n         SPACE 1\nSYSACC2  LA    R6,4(0,R6)          NEXT TABLE SLOT\n         CLC   0(4,R6),=F'0'       END OF SLOTS\n         BE    SYSACC3             YES\n         CR    R6,R11              END OF SLOTS\n         BE    SYSACC3             YES\n         LA    R10,1(0,R10)        NO. OF SLOTS FOR AVERAGE\n         A     R15,0(0,R6)         ADD TO TOTAL\n         B     SYSACC2\n         SPACE 1\nSYSACC3  C     R10,=F'0'           0C9 POSSIBLE\n         BE    SYSACC4             YES\n         DR    R14,R10             AVG VALUE\n         LR    R11,R15\n         BR    R7\n         SPACE 1\nSYSACC4  SR    R11,R11\n         BR    R7\nSYSWTO   MVC   WTOLIST+4(80),0(R6)\n         CLI   PARM,C'A'           AVG GRAPHIC DISPLAY\n         BNE   *+10                NO\n         LR    R14,R1\n         LR    R1,R11\n         LR    R11,R14\n         CVD   R11,DOUBLE\n         MVC   AAA(4),=X'40202120'\n         ED    AAA(4),DOUBLE+6\n         CVD   R1,DOUBLE\n         MVC   BBB(4),=X'40202120'\n         ED    BBB(4),DOUBLE+6\n         SR    R14,R14\n         SR    R15,R15\n         C     R8,=F'0'            0C9 POSSIBLE\n         BE    SYSWTO1             YES\n         LR    R15,R1\n         DR    R14,R8              NUMBER OF GRAPH POSITIONS\n         SPACE 1\nSYSWTO1  CH    R15,=H'50'          MAX POSITIONS\n         BNH   *+8                 NO\n         LH    R15,=H'50'          FORCE MAX\n         EX    R15,GRAPHMVE\n         LA    R1,GRAPH(R15)\n         MVI   0(R1),C'>'\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         BR    R7\n         SPACE 1\nGRAPHMVE MVC   GRAPH(0),0(R10)\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         SPACE 3\nRETURN   ESTAE 0\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGS03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         B     MSGRTN\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nWTOHDR   DC   CL29' '\n         DC   5CL10'|----|----',C'| '\nGRAPH1   DC   CL51'0=========1=========2=========3=========4=========='\nGRAPH2   DC   CL51'0====1====2====3====4====5====6====7====8====9====='\n         SPACE 3\nLGCPUOVL DC    CL80'LONG TERM CPU     '\nAVCPUOVL DC    CL80'AVERAGE CPU       '\nAVPAGOVL DC    CL80'AVERAGE PAGING    '\nAVUICOVL DC    CL80'AVERAGE UIC       '\nAVASQOVL DC    CL80'ASMQ LENGTH       '\n         SPACE 1\nDOMAINB1 DC    CL80'DMN XX CURR MPL   '\nDOMAINB2 DC    CL80'DMN XX RDY USER   '\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nPARM     DS    F\nDOMAINO1 DS    CL80\nDOMAINO2 DS    CL80\nESTAELST DS    0F,(ESTAEOVX)X\n         SPACE 3\n         DS    0F\nWTOLIST  DS    F\n         DS    CL17\nAAA      DS    CL4\n         DS    CL1\nBBB      DS    CL4\n         DS    CL3\nGRAPH    DS    CL51\n         SPACE 3\nWORKEND  DS    0F\n         SPACE 5\nAVERAGE  DSECT\nLGCPU    DS    21F\nLGCPUEND DS    0F\nAVCPU    DS    21F\nAVCPUEND DS    0F\nAVPAG    DS    21F\nAVPAGEND DS    0F\nAVUIC    DS    21F\nAVUICEND DS    0F\nAVASQ    DS    21F\nAVASQEND DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCGU03D\n         TITLE 'CSCGU03D -   U  DISK SPACE MAP'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       CSCGU03D -       U  DISK SPACE MAP                        ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE TO MVS/SP1.3                      ***\n***                                                                 ***\n***       UPDATED -        01/10/82  RLL - CHANGE ESTAE PARM LENGTH ***\n***                        09/27/82  CBT-AXC ADD 3375 AND 3380      ***\n***                                          SUPPORT                ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nCSCGU03D CSECT\n         LR    R12,R15\n         USING CSCGU03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         L     R3,XAL\n         LA    R3,0(0,R3)\n         XC    PARM(8),PARM\n         LTR   R3,R3\n         BZ    *+10                NO PARM\n         MVC   PARM(8),0(R3)\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         LA    R1,HDR1\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         L     R9,16               .CVT\n         L     R9,40(0,R9)         .UCB LOOKUP TABLE\n         XC    UCBDMSAV(24),UCBDMSAV\nCHEK     BAL   R10,UCBDML#0        GET NEXT UCB ADDR\n         LTR   R1,R1               END OF UCBS\n         BZ    EOJ                 YES, EXIT\n         LR    R4,R1\n         CLI   18(R4),X'20'   SEE IF UCB IS FOR DASD\n         BNE   CHEK           NO, IGNORE IT\n         TM    3(R4),X'80'    IS DEVICE ONLINE\n         BZ    CHEK           NO, IGNORE IT\n         TM    3(R4),X'50'    PENDING OFFLINE/UNLOAD\n         BNZ   CHEK           YES, IGNORE IT\n         TM    35(R4),X'80'   MOUNT PENDING\n         BNZ   CHEK           YES, IGNORE IT\n         CLI   28(R4),X'00'   ANY VOLUME INFORMATION?\n         BE    CHEK           NO, VOLUME NOT VERIFIED YET\n         CLI   PARM,X'00'     ANY VOLUME PARM\n         BE    CHEK2          NO, ALL UNITS\n         CLC   PARM(2),=C'D=' DEVICE TYPE\n         BE    CHEK2          YES\n         CLC   PARM(2),=C'U=' SINGLE UNIT\n         BNE   CHEK0          NO\n         CLC   PARM+2(3),13(R4)  UNIT MATCH\n         BE    CHEK2          YES\n         B     CHEK\n         SPACE 1\nCHEK0    LA    R1,7\n         LA    R14,27(0,R4)\n         LA    R15,PARM-1\n         SPACE 1\nCHEK1    BCT   R1,*+8\n         B     CHEK2\n         LA    R14,1(0,R14)\n         LA    R15,1(0,R15)\n         CLI   0(R15),X'00'   END OF CHECK\n         BE    CHEK2          YES\n         CLI   0(R15),X'40'   END OF CHECK\n         BE    CHEK2          YES\n         CLC   0(1,R14),0(R15)  VOL MATCH\n         BE    CHEK1          YES\n         B     CHEK\nCHEK2    MVC   DTLLNE-4(84),DTLOVL\n         MVC   CLASS(6),=CL6'3330-1' INDICATE 3330 MOD 11\n         CLI   19(R4),X'0D'   IS IT A MODEL 11 3330?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6'3330' INDICATE A MODEL 1 3330\n         CLI   19(R4),X'09'   IS IT A MODEL 1 3330?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6'3350' INDICATE A 3350\n         CLI   19(R4),X'0B'   IS IT A 3350?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6'3375' INDICATE A 3375         CBT-AXC\n         CLI   19(R4),X'0C'   IS IT A 3375?                CBT-AXC\n         BE    CHKSTATS       YES, CHECK STATUS            CBT-AXC\n         MVC   CLASS(6),=CL6'3380' INDICATE A 3380         CBT-AXC\n         CLI   19(R4),X'0E'   IS IT A 3380?                CBT-AXC\n         BE    CHKSTATS       YES, CHECK STATUS            CBT-AXC\n         MVC   CLASS(6),=CL6'2314' INDICATE 2314/2319\n         CLI   19(R4),X'08'   IS IT A 2314/2319?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6'2305-1' INDICATE A DRUM MODEL 1\n         CLI   19(R4),X'06'   IS IT A 2305 MOD 1?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6'2305-2' INDICATE A DRUM MODEL 2\n         CLI   19(R4),X'07'   IS IT A MODEL 2 DRUM?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6'MSSC' INDICATE THE MSS CONTROL\n         CLI   19(R4),X'42'   IS IT THE MSS?\n         BE    CHKSTATS       YES, CHECK STATUS\n         MVC   CLASS(6),=CL6' ' UNKNOWN DEVICE TYPE\n         SPACE 1\nCHKSTATS TM    17(R4),X'08'   IS THIS A VIRTUAL VOLUME?\n         BZ    NOTVIRT        NO, CONTINUE\n         MVI   CLASS+4,C'V'  INDICATE VIRTUAL DEVICE\n         SPACE 1\nNOTVIRT  CLC   PARM(2),=C'D=' DEVTYPE CHECK\n         BNE   NOTVIRT1       NO\n         CLC   CLASS(6),PARM+2  DEV MATCH\n         BNE   CHEK           NO\n         SPACE 1\nNOTVIRT1 MVI   STATUS,C'O'    INDICATE DEVICE UNALLOCATED\n         TM    3(R4),X'08'    IS IT ALLOCATED\n         BNO   *+8            YES, DONT RESET STATUS\n         MVI   STATUS,C'A'    NO, INDICATE DEVICE ALLOCATED\n         MVC   ATTR(3),=C'PRV'   INDICATE PRIVATE\n         TM    34(R4),X'10'   IS IT PRIVATE\n         BO    DOSVC          YES, CONTINUE\n         MVC   ATTR(3),=C'PUB'   INDICATE PUBLIC\n         TM    34(R4),X'08'   IS IT PUBLIC\n         BO    DOSVC          YES, CONTINUE\n         MVC   ATTR(3),=C'STG'   INDICATE STORAGE\n         TM    34(R4),X'04'   IS IT STORAGE\n         BO    DOSVC          YES, CONTINUE\n         MVC   ATTR(3),=C'   '   CLEAR INDICATOR\n         SPACE 1\nDOSVC    LA    0,0(0,R4)      LOAD PNTR TO UCB INTO REG 0\n         LA    R1,MSGAREA     LOAD PNTR TO MSGAREA INTO REG 1\n         SVC   78             GET DATA FOR THIS DASD\n         LTR   R15,R15        TEST REG 15 FOR ZERO\n         BNZ   CHEK           ERROR, CHECK NEXT DEVICE\nCNTNU    MVC   VOLUME(6),28(R4)  MOVE VOLUME SERIAL NUMBER\n         MVC   ADDR(3),13(R4)    MOVE DEVICE ADDRESS\n         ICM   R11,1,35(R4)   OPEN DCBS\n         N     R11,=X'0000007F' TURN OFF UCBMOUNT BIT, IF ON\n         CVD   R11,DBWRD      CHANGE TO PACKED DECIMAL\n         MVC   DCBS(6),=X'402020202120'\n         ED    DCBS(6),DBWRD+5  MOVE TO DETAIL LINE\n         ICM   R11,1,38(R4)   NUMBER OF CURRENT USERS\n         CVD   R11,DBWRD      CHANGE TO PACKED DECIMAL\n         MVC   USRS(6),=X'402020202120'\n         ED    USRS(6),DBWRD+5  MOVE TO DETAIL LINE\n         PACK  DBWRD(8),FREECYL(4)\n         MVC   DTLCYL(6),=X'402020202120'\n         ED    DTLCYL(6),DBWRD+5\n         PACK  DBWRD(8),FREETRK(4)\n         MVC   DTLTRK(6),=X'402020202120'\n         ED    DTLTRK(6),DBWRD+5\n         PACK  DBWRD(8),FREEXTNT(4)\n         MVC   DTLEXT(4),=X'40202120'\n         ED    DTLEXT(4),DBWRD+6\n         PACK  DBWRD(8),CONTGCYL(4)\n         MVC   DTLCCY(6),=X'402020202120'\n         ED    DTLCCY(6),DBWRD+5\n         PACK  DBWRD(8),CONTGTRK(4)\n         MVC   DTLCTR(6),=X'402020202120'\n         ED    DTLCTR(6),DBWRD+5\n         LA    R1,DTLLNE-4\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     CHEK           CONTINUE\n         SPACE 1\nEOJ      ESTAE 0                                      ****(RLL)****\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\nUCBDML#0 ST    R8,UCBDMSAV         .SAVE WORK REG 1\n         ST    R10,UCBDMSAV+8      .SAVE WORK REG 3\n         ST    R11,UCBDMSAV+12     .SAVE WORK REG 4\n         L     R8,UCBDMLOW         .SET SEARCH ARGUMENT\n         SPACE 1\nUCBDML#1 LA    R8,1(0,R8)          .NEXT UNIT ADDR POSSIBLE\n         L     R10,=X'0000FFFF'    .SET MAX NEXT LEAST HIGH\n         SPACE 1\nUCBDML#2 CLC   0(2,R9),=X'FFFF'    .END OF TABLE\n         BE    UCBDMOUT            .YES, GO PROCESS\n         SR    R1,R1\n         ICM   R1,3,0(R9)          .LOAD UCB ADDR\n         LTR   R1,R1               .ZERO ADDR\n         BNZ   UCBDML#4            .NO, CONTINUE\n         SPACE 1\nUCBDML#3 LA    R9,2(0,R9)          .NEXT UCB LOOKUP TABLE ENTRY\n         B     UCBDML#2\n         SPACE 1\nUCBDML#4 BAL   R11,UCBDMCNV        .CONVERT UNIT ADDR TO HEX\n         CR    R1,R8               .UNIT EQUAL\n         BL    UCBDML#3            .LOW NOT EQUAL, NEXT UCB\n         LR    R10,R1              .SET NEXT LEAST HIGH UNIT ADDR\n         MVC   UCBDMCUR+2(2),0(R9) .SET NEXT LEAST HIGH UCB ADDR\n         B     UCBDMOUT            .GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)        .UNIT ADDR DIGIT\n         TM    13(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)        .UNIT ADDR DIGIT\n         TM    14(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)        .UNIT ADDR DIGIT\n         TM    15(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         LR    R1,R14              .SET RESULTS REG\n         BR    R11\n         SPACE 3\nUCBDMOUT C     R10,=X'0000FFFF'    .ALL DONE\n         BE    UCBDMEX             .YES\n         ST    R10,UCBDMLOW        .NEXT LOW UNIT ADDR\n         L     R1,UCBDMCUR         .LOAD UCB ADDR FOR FOUND UNIT\n         B     UCBDMCON            .CONTINUE\n         SPACE 1\nUCBDMEX  SR    R1,R1               .CLEAR UCB ADDR REGISTER\n         L     R8,UCBDMSAV         .RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      .RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     .RELOAD WORK REG 4\n         B     UCBDMRET            .END OF UCBS\n         SPACE 1\nUCBDMCON L     R8,UCBDMSAV         .RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      .RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     .RELOAD WORK REG 4\n         SPACE 1\nUCBDMRET EQU   *\n         BR    R10\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(CSCGU03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EOJ\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nHDR1     DC    X'00540100'\n         DC    CL40'UNIT  DEVICE   STATUS    VOLSER   DCBS  '\n         DC    CL40' USERS    CYLS  TRKS  EXT  CTGCYL CTGTRK'\n         SPACE 3\nDTLOVL   DC    X'00540100'\n         DC    CL17' ',CL5'(   )',CL58' '\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nDBWRD    DS    2F\nXSASAVE  DS    F\nPARM     DS    2F\n         SPACE 3\nUCBDMSAV DS    4F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\n         SPACE 3\nDTLPREFX DS    F\nDTLLNE   DS    0CL80\nADDR     DS    CL6            DEVICE ADDRESS\nCLASS    DS    CL9            DEVICE TYPE (CLASS)\nSTATUS   DS    CL3            STATUS (OPEN/ALLOCATED)\nATTR     DS    CL7            MOUNT ATTRIBUTE\nVOLUME   DS    CL7            VOLUME SERIAL NUMBER\nDCBS     DS    CL8            OPEN DCBS\nUSRS     DS    CL8            OPEN DCBS\nDTLCYL   DS    CL6            TOTAL FREE CYLINDERS\nDTLTRK   DS    CL7            TOTAL FREE TRACKS\nDTLEXT   DS    CL6            NUMBER OF EXTENTS\nDTLCCY   DS    CL7            LARGEST CONTIG CYLS\nDTLCTR   DS    CL6            LARGEST CONTIG ADDITIONAL TRACKS\n         SPACE 3\n*\n*        THE FOLLOWING IS THE SVC 78 PARAMETER LIST\n*\nMSGAREA  DS    0CL30\n         DS    CL6            CONSTANT - 'SPACE='\nFREECYL  DS    CL4            TOTAL NO. FREE CYLINDERS\n         DS    CL1            CONSTANT - ','\nFREETRK  DS    CL4            TOTAL NO. FREE TRACKS OUTSIDE CYLS\n         DS    CL1            CONSTANT - ','\nFREEXTNT DS    CL4            TOTAL NO. FREE EXTENTS\n         DS    CL1            CONSTANT - '/'\nCONTGCYL DS    CL4            LARGEST CONTIGUOUS FREE AREA\n         DS    CL1             IN CYLS AND TRKS\nCONTGTRK DS    CL4\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X                         ****(RLL)****\n         SPACE 3\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSA03D\n*          DATA SET TEC1283    AT LEVEL 001 AS OF 09/14/82\n         TITLE 'IEESA03D -   #N  DISPLAY ENQUEUE 1ST LOAD'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESA03D -       #N DISPLAY ENQUEUE 1ST LOAD              ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS 3.8 SP2/3                            ***\n***                                                                 ***\n***       UPDATED -        07/22/81  AXC-CBT HANDLE ESTAE           ***\n***               -        10/30/81  SP2/3  -BNSW-                  ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESA03D CSECT\n         B     14(0,R15)          BRANCH AROUND ID\n         DC    AL1(8)\n         DC    CL8'IEESA03D'      IDENTIFIER\n         LR    R12,R15            SET ADDRESSABILITY\n         USING IEESA03D,R12\n         LA    R0,LWKDSECT        SIZE OF SAVE-AREA AND WORK-AREA\n         O     R0,SUB241          GET FROM SUBPOOL\n         LR    R4,R0              SAVE SP AND LENGTH\n         GETMAIN R,LV=(0)\n         XC    0(256,R1),0(R1)    ZERO-OUT PART OF WORK AREA\n         XC    256(256,R1),256(R1)  MORE\n         LR    R13,R1\n         USING WKDSECT,R13        FIRST 18 WRDS ARE SAVE-AREA\n         ST    R14,SAVA           PUT RETURN ADDRESS IN UNUSED SLOT\n         MVC   SUBPOOL(4),SUB241  SAVE FREEMAIN SUBPOOL\n         ST    R2,XSASAVE         SAVE XSA PTR\n         STH   R4,WKSIZE          SAVE SIZE\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n***********************************************************************\n*\n*        GET CORE FOR WORK TABLE\n*\n***********************************************************************\n         L     R0,CORSIZ          LOAD GETMAIN SIZE\n         O     R0,SUBPOOL         SUBPOOL\n         STH   R0,CORESIZE        SAVE SP AND LENGTH\n         GETMAIN R,LV=(0)\n         LA    R1,0(0,R1)\n         ST    R1,CORE            SAVE GETMAIN ADDR\n***********************************************************************\n*\n*        PARSE INPUT STRING\n*\n***********************************************************************\n         MVC   SJOB(8),=CL8' '\n         MVI   MAJNAM,C' '\n         MVC   MAJNAM+1(256),MAJNAM    CLEAR MAJOR/MINOR NAME FIELDS\n         MVC   MAJNAM+257(6),MAJNAM+256\n         USING XSA,R2\n         L     R3,XAL             LIST POINTER\n         LA    R3,0(,R3)          CLEAR HI-BYTE -- VERB INDEX\n         LTR   R3,R3              PARAMETER EXIST ?\n         BZ    NOPARM             NO...ASSUME DEFAULTS.\n         CLI   0(R3),C'('         JOBNAME SELECT\n         BNE   PRMJOBBY           NO, BYPASS\n         LA    R1,SJOB-1          SELECTION NAME\n         SPACE 1\nPRMJOB1  LA    R1,1(0,R1)\n         LA    R3,1(0,R3)\n         CLI   0(R3),C')'         END OF JOBNAME\n         BE    PRMJOB2            YES\n         CLI   0(R3),C' '         END OF JOBNAME\n         BE    PRMJOBBY           YES\n         MVC   0(1,R1),0(R3)      MOVE 1 BYTE OF JOBNAME\n         B     PRMJOB1\n         SPACE 1\nPRMJOB2  LA    R3,1(0,R3)\n         SPACE 1\nPRMJOBBY LR    R8,R3              START OF LIST\n         CLI   0(R3),C'\u00ac'         FIND ONLY MAJOR NAMES ?\n         BNE   *+8                NO\n         MVI   0(R3),C'*'\n         CLI   0(R3),C'*'         FIND ONLY MAJOR NAMES ?\n         BE    SETMAJNM           YES..\n         LA    R4,0               LENGTH COUNTER\n         LA    R5,9\nLOOP2    CLI   0(R3),C'/'         MAJOR/MINOR DELIMITER ?\n         BE    GOTMAJOR           YES...\n         CLI   0(R3),C' '         END-OF-STRING ?\n         BE    PARMERR            YES...NO MINOR NAME GIVEN.\n         LA    R4,1(,R4)          INCREMENT LENGTH\n         LA    R3,1(,R3)          INCREMENT PTR\n         BCT   R5,LOOP2           TRY NEXT CHAR\n         B     BADERR             MAJOR NAME TOO LONG.\nGOTMAJOR BCTR  R4,0               SET FOR EXECUTE\n         LA    R6,MAJNAM          WHERE TO GO IN EXECUTE\n         EX    R4,MVNAM           GET MAJOR NAME\n         STH   R4,MAJLGTH         SAVE MODIFIED LENGTH\n         LA    R4,0               RESET LENGTH COUNTER\n         LA    R3,1(,R3)          MOVE PAST '/'\n         LR    R8,R3              SAVE START OF MINOR NAME\n         LA    R5,256             MAX LENGTH OF MINOR NAME\nLOOP3    CLI   0(R3),C' '         END-OF-STRING\n         BE    GOTMINOR           YES...\n         LA    R3,1(,R3)          INCREMENT PTR\n         LA    R4,1(,R4)          INCREMENT LENGTH\n         BCT   R5,LOOP3\n         B     BADERR             MINOR NAME TOO LONG\nGOTMINOR BCTR  R4,0\n         LA    R6,MINNAME         WHERE TO GO IN EXECUTE\n         EX    R4,MVNAM           GET MINOR NAME\n         LA    R4,1(,R4)          RESET LENGTH\n         STH   R4,MINLGTH         SAVE LENGTH\n***********************************************************************\n*\n*        SCAN FOR '*' IN MINOR NAME\n*\n***********************************************************************\n         LA    R3,MINNAME\n         LA    R4,0               COUNT OF CHAR PRIOR TO '*'\n         LH    R5,MINLGTH\nLOOP4    CLI   0(R3),C'\u00ac'         FIND IT ?\n         BNE   *+8                NO\n         MVI   0(R3),C'*'\n         CLI   0(R3),C'*'         FIND IT ?\n         BE    ASK                YES...\n         LA    R3,1(,R3)          NO..NEXT CHAR\n         LA    R4,1(,R4)          INCREMENT COUNT\n         BCT   R5,LOOP4\n         B     NOASK              NO '*' IN MINOR NAME\nASK      LTR   R4,R4              ANY CHAR PRIOR TO '*' ?\n         BZ    ALLMINOR           NO..GET ALL MINOR NAMES\n         MVI   SWTCH,X'0F'        YES..PARTIAL MINOR NAME GIVEN\n         STH   R4,MINLGTH         SET NEW LENGTH\n         B     NOASK              JOIN COMMON CODE\nALLMINOR MVI   SWTCH,X'F0'        SET FOR ALL MINOR NAMES\n         B     NOASK\nSETMAJNM MVI   MAJNAM,C'*'        SET MAJOR NAME\n         XC    MAJLGTH(2),MAJLGTH SET MODIFIED LENGTH\n         MVI   SWTCH+1,X'0F'      SET FOR ONLY MAJOR NAMES\n***********************************************************************\n*\n*        NO PARAMETERS SPECIFIED, ASSUME DEFAULTS\n*\n***********************************************************************\nNOPARM   EQU   *\n         XC    MAJLGTH(4),MAJLGTH ZERO OUT NAME LENGTH FIELDS\n         LA    R5,7               SET MODIFIED LENGTH OF\n         STH   R5,MAJLGTH         MAJOR NAME AND MOVE IN NAME\n         MVC   MAJNAM(8),=CL8'SYSIEFSD'\n         MVI   MINNAME,C'*'       SET MINOR NAME\n         MVI   SWTCH,X'F0'        SET FOR ALL MINOR NAMES\n***********************************************************************\n*\n*        OBTAIN FIRST MAJOR QCB\n*\n***********************************************************************\nNOASK    EQU   *\n         L     R5,X'10'           CVT PTR\n         LA    R3,0               CURRENT NUMBER OF TABLE ENTRIES\n         LA    R5,1000            MAX NUMBER OF ENTRIES\n         L     R4,CORE            START OF FREE CORE TABLE\n         SPACE\n         B     SP3                LEAVE OLD CODE INTACT *****\n         SPACE\n         L     R2,640(0,R5)       FIRST VALID MAJOR QCB\n         LTR   R2,R2              DOES IT EXIST ?\n         BZ    NOMAJNAM           NO...\n         TM    SWTCH+1,X'0F'      OBTAIN ONLY MAJOR NAMES ?\n         BZ    LOOP5              NO...CONTINUE NORMALLY\n***********************************************************************\n*\n*        OBTAIN ONLY MAJOR QCB NAMES HERE\n*\n***********************************************************************\nMAJLOOP  MVC   0(8,R4),16(R2)     GET MAJOR QCB NAME\n         LA    R3,1(,R3)          INCREMENT COUNTER\n         LA    R4,8(,R4)          NEXT TABLE ENTRY\n         CR    R3,R5              OVERFLOW TABLE ?\n         BH    TABLOVFL           YES...\n         L     R2,0(,R2)          NEXT MAJOR QCB\n         LTR   R2,R2              EXIST ?\n         BNZ   MAJLOOP            YES...GO GET IT\n         B     EXITOK1            ALL FINISHED.\n***********************************************************************\n*\n*        FIND REQUESTED MAJOR NAME QCB\n*\n***********************************************************************\nLOOP5    CLC   16(8,R2),MAJNAM    MAJOR NAMES MATCH ?\n         BE    LOOKMIN            YES...FIND MINOR NAMES\n         L     R2,0(,R2)          NEXT MAJOR QCB\n         LTR   R2,R2              END-OF-LIST ?\n         BNZ   LOOP5              NO...TRY NEXT QCB\n         B     NOMAJNAM           SET ERROR CODE\n***********************************************************************\n*\n*        MAJOR QCB FOUND, LOOK FOR MINOR QCB(S)\n*\n***********************************************************************\nLOOKMIN  L     R7,8(,R2)          FIRST MINOR QCB\n         LTR   R7,R7              EXIST ?\n         BNZ   MINOROK            YES...SHOULDN'T FALL THRU\n         B     QCBERR             SET ERROR CODE\nMINOROK  TM    SWTCH,X'F0'        ALL MINOR NAMES ?\n         BZ    CHKMIN             NO...\n         CLC   20(3,R7),=C'SYS'   SYSTEM NAME\n         BNE   CHKQEL             NO, CONTINUE\n         CLC   28(2,R7),=C'.T'    SYSTEM NAME\n         BNE   CHKQEL             NO, CONTINUE\n         CLI   36(R7),C'.'        SYSTEM NAME\n         BNE   CHKQEL             NO, CONTINUE\n         MVC   NUMCHK(6),=6C'0'   SET NUMERIC FIELD\n         MVZ   NUMCHK(5),23(R7)   MOVE NUMERIC ZONES\n         CLC   NUMCHK(6),=6C'0'   STILL NUMERIC\n         BNE   CHKQEL             NO, NOT SYSTEM NAME\n         MVZ   NUMCHK(6),30(R7)   MOVE NUMERIC ZONES\n         CLC   NUMCHK(6),=6C'0'   STILL NUMERIC\n         BE    NEXTMIN            NO, SYSTEM NAME\nCHKQEL   SR    R9,R9\n         IC    R9,16(R7)          LENGTH OF MINOR QCB NAME\n         CH    R9,=H'44'          GTR 44 BYTES ?\n         BNH   LGTHOK             NO...USE AS IS\n         LA    R9,44              YES..RESET TO 44 AND TRUNCATE NAME\nLGTHOK   STC   R9,1(,R4)          PUT NAME LENGTH IN TABLE\n         LA    R9,2(,R9)          INCREASE FOR FOLLOWING COMPUTATIONS\n         SR    R10,R10\n         LR    R11,R9             LENGTH OF MINOR NAME+CONTROL BYTES\n         D     R10,=F'9'          MULTIPLE OF 9 ?\n         LTR   R10,R10            ANY REMAINDER ?\n         BZ    L9                 NO...\n         LA    R11,1(,R11)        YES...ROUND UP\nL9       STC   R11,0(,R4)         PUT NO. OF TABLE ENTRIES IN TABLE\n         CLI   20(R7),C'$'        PRINTABLE NAME           AXC\n         BL    UNKNOWN            NO, UNKNOWN\n         CLI   20(R7),C'9'        PRINTABLE NAME\n         BH    UNKNOWN            NO, UNKNOWN\n         ST    R3,MINENTRY        SAVE CURRENT TABLE ENTRIES\n         AR    R3,R11             INCREMENT NO. OF ENTRIES\n         CR    R3,R5              OVERFLOW TABLE ?\n         BH    TABLOFL2           HOPEFULLY NOT.\n         BCTR  R9,0               REDUCE LENGTH\n         BCTR  R9,0               TO ORIGINAL AND THEN\n         BCTR  R9,0               SET FOR EXECUTE INST\n         EX    R9,QCBNAME         GET MINOR QCB NAME\n*                                 NO. OF TABLE SLOTS TAKEN BY NAME\nUNKBACK  SR    R10,R10            MULTIPLIED BY 9 BYTES/SLOT\n         M     R10,=F'9'          EQUALS TOTAL LENGTH TAKEN\n         ST    R4,MINADDR\n         AR    R4,R11             ADDED TO SLOT POINTER\n         L     R8,8(,R7)          FIRST QEL\n         LTR   R8,R8              EXIST ?\n         BNZ   QELOK              YES...SHOULDN'T FALL THRU\n         B     QELERR             SET ERROR CODE\nQELOK    SR    R14,R14            INSERT\n         IC    R14,14(0,R8)          ASID\n         SLL   R14,8                    INTO REG 14\n         IC    R14,15(0,R8)                AND MULTIPLY\n         SLL   R14,2                          BY FOUR\n         L     R15,16             CVT ADDR\n         L     R15,556(0,R15)     ASVT ADDR\n         L     R15,524(R14,R15)   ASCB ADDR\n         L     R14,56(0,R15)      CSCB ADDR\n         CLI   28(R14),X'03'      INIT CSCB ADDR\n         BE    QELOKJOB           YES, GO HANDLE\nQELOKBAK LA    R14,0(0,R14)       CLEAR HIGH ORDER\n         LTR   R14,R14            CSCB ZERO\n         BZ    QELOKAS            YES, GO PRINT ASID\n         MVC   0(8,R4),8(R14)     JOBNAME\n         CLC   SJOB(8),=CL8' '    ANY SELECTION JOB\n         BE    QELOKBK            NO, BYPASS\n         CLC   0(8,R4),SJOB       JOB MATCH SELECTION JOB\n         BE    QELOKBK            YES, CONTINUE\n         B     NEXTQELS\nQELOKAS  CLC   SJOB(8),=CL8' '    ANY SELECTION JOB\n         BNE   NEXTQELS           YES, NO ASID SELECTION\n         MVC   0(4,R4),=CL4'AS= '\n         UNPK  4(5,R4),14(3,R8)   UNPK ASID\n         NC    4(4,R4),=4X'0F'    TRANSLATE TO PRINT\n         TR    4(4,R4),=C'0123456789ABCDEF'\nQELOKBK  MVI   8(R4),C'S'         ASSUME SHR'D ENQ\n         TM    12(R8),X'10'       RESERVE\n         BZ    QELOKBKX           NO, BR AROUND\n         MVI   8(R4),C'R'         IND SHR RESERVE\nQELOKBKX TM    12(R8),X'80'       IS IT SHR'D ?\n         BO    NEXTONE            YES...\n         MVI   8(R4),C'E'         NO...MUST BE EXCLUSIVE\n         TM    12(R8),X'10'       RESERVE\n         BZ    NEXTONE            NO, BR AROUND\n         MVI   8(R4),C'X'         IND EXCL RESERVE\nNEXTONE  LA    R3,1(,R3)          INCREMENT ENTRY NUMBER\n         LA    R4,9(,R4)          INCREMENT TABLE LOCATION\n         CR    R3,R5              TOO MANY ENTRIES IN TABLE ?\n         BH    TABLOVFL           YES...IGNORE REMAINDER\n         MVI   SWTCH+1,X'F0'      FLAG MINORS FOUND\n         CLC   SJOB(8),=CL8' '    ANY SELECTION JOB\n         BNE   NEXTMIN            YES, NEXT MINOR QCB\nNEXTQEL  L     R8,0(,R8)          NEXT QEL\n         LA    R8,0(,R8)          CLEAR HI-BYTE\n         LTR   R8,R8              QEL EXIST ?\n         BNZ   QELOK              YES.\n         B     NEXTMIN            NO...GET NEXT MINOR QCB\nNEXTQELS L     R8,0(,R8)          NEXT QEL\n         LA    R8,0(,R8)          CLEAR HI-BYTE\n         LTR   R8,R8              QEL EXIST ?\n         BNZ   QELOK              YES.\n         L     R3,MINENTRY        RESET NUMBER OF ENTRIES\n         L     R4,MINADDR         RESET MIN NAME ADDR\n         B     NEXTMIN            NO...GET NEXT MINOR QCB\n         SPACE 1\nCHKMIN   SR    R8,R8\n         IC    R8,16(,R7)         LENGTH OF MINOR NAME\n         TM    SWTCH,X'0F'        ALL NAMES STARTING WITH GIVEN ?\n         BO    ALL                YES.\n         CH    R8,MINLGTH         MINOR NAME LENGTHS AGREE ?\n         BNE   NEXTMIN            NO...TRY ANOTHER MINOR QCB\nCOMP     BCTR  R8,0               LENGTHS AGREE..BUT DO NAMES ?\n         EX    R8,COMPMINR        FIND OUT.\n         BE    CHKQEL             YES..GET OWNER'S JOBNAME/USERID\nNEXTMIN  L     R7,0(,R7)          NEXT MINOR QCB\n         LTR   R7,R7              EXIST ?\n         BZ    EXITOK             NO..OUTPUT DATA\n         B     MINOROK            TRY THIS MINOR QCB.\nALL      LH    R8,MINLGTH         LENGTH OF MINOR NAME TO START WITH\n         B     COMP               JOIN COMMON CODE\nQELOKJOB LR    R15,R14            CSCB ADDR\n         SR    R1,R1              INSERT\n         IC    R1,14(0,R8)           ASID\n         SLL   R1,8                     INTO\n         IC    R1,15(0,R8)                 REG 1\nQELOKJB1 L     R14,0(0,R14)      NEXT CSCB\n         LTR   R14,R14           END OF CSCBS\n         BNZ   *+10              NO, CONTINUE\n         LR    R14,R15           LOAD CSCB ADDR\n         B     QELOKBAK          CONTINUE\n         CR    R14,R15           SAME CSCB\n         BE    QELOKBAK          YES, INIT\n         CH    R1,30(0,R14)      ASID MATCH\n         BNE   QELOKJB1          NO, CHECK NEXT\n         B     QELOKBAK          GO USE CSCB\nSP3      DS    0H                 FOR MVS SP3, USE GQSCAN\n         USING RIB,R2\n         USING RIBE,R7\n         USING RIBVAR,R15\n         ST    R4,SPSTART         KEEP START POINT\n         XC    TOKEN,TOKEN        FOR 1ST GQSCAN\n         MVC   GQSCANL(GQSCANE-GQSCANP),GQSCANP SET UP LIST FORM\n         MVI   SWTCHA,0           MAJOR NAME NOT FOUND YET\n         SPACE\n         TM    SWTCH+1,X'0F'      IF QNAME IS KNOWN\n         BZ    SPLOOP5            THEN GO FIND SPECIFIC/GENERIC RNAME\n*                                 ELSE FIND ALL MAJOR NAMES\n***********************************************************************\n*\n*        OBTAIN MAJOR QCB NAMES HERE USING GQSCAN\n*\n***********************************************************************\n         SPACE\nSPMAJGQ  GQSCAN AREA=(AREA,L'AREA),TOKEN=TOKEN,MF=(E,GQSCANL),         *\n               SCOPE=ALL,REQCNT=1\n         ST    R15,GQRET          KEEP RC\n         CH    R15,=H'8'          IF WE GET GRS ERROR\n         BH    QCBERR             THEN CALL IT QCB ERROR\n         CH    R15,=H'4'          IF NO MORE FOUND\n         BE    EXITOK1            THEN GO CALL PRINT MODULE\n         STH   R0,RIBELEN         L'RIBE\n         LA    R2,AREA            A(1ST RIB)\nSPMAJMAJ ST    R1,NUMRIBS         NUMBER OF MAJOR NAMES (RIBS)\n         SPACE\n*        CHECK FOR DUPLICATE QNAMES ALREADY IN TABLE\n         LTR   R1,R3              NUMBER IN TABLE\n         BZ    SPSTMAJ            NONE - GO STORE 1ST ONE\n         L     R15,SPSTART        1ST IN TABLE\nSPCOMAJ  CLC   0(8,R15),RIBQNAME  IF QNAME IS ALREADY IN TABLE\n         BE    SPMAJNXT           THEN DON'T PUT IT IN AGAIN\n         LA    R15,8(R15)         NEXT IN TABLE\n         BCT   R1,SPCOMAJ         REPEAT FOR ALL IN TABLE\n         SPACE\nSPSTMAJ  MVC   0(8,R4),RIBQNAME   MAJ NAME INTO TABLE\n         LA    R3,1(,R3)          COUNT NUMBER IN TABLE\n         LA    R4,8(,R4)          NEXT TABLE ENTRY\n         CR    R3,R5              TOO MANY?\n         BH    TABLOVFL           YES - GET OUT\n*        GET NEXT RIB\nSPMAJNXT LA    R15,RIBEND         END OF RIBN\n         LA    R7,RIBVAR          VAR PORTION\n         AH    R7,RIBVLEN         1ST RIBE\n         L     R1,RIBNRIBE        NUMBER OF RIBE'S\n         MH    R1,RIBELEN         * LENGTH OF EACH\n         AR    R7,R1              NEXT RIB\n         LR    R2,R7\n         L     R1,NUMRIBS         NUMBER STILL IN AREA\n         BCT   R1,SPMAJMAJ        PROCESS THOSE IN AREA\n         CLC   =F'8',GQRET        IF THERE ARE MORE\n         BE    SPMAJGQ            THEN GO GET THEM\n         B     EXITOK1            ELSE GO TO PRINT ROUTINE\n         SPACE 3\n***********************************************************************\n*\n*        OBTAIN RNAMES HERE FOR SPECIFIC QNAME USING GQSCAN\n*\n***********************************************************************\nSPLOOP5  DS    0H                 FIND SPECIFIC,GENERIC OR ALL RNAMES\n         GQSCAN AREA=(AREA,L'AREA),TOKEN=TOKEN,MF=(E,GQSCANL),         *\n               RESNAME=(MAJNAM),SCOPE=ALL,REQCNT=1\n         ST    R15,GQRET          KEEP RC\n         CH    R15,=H'8'          IF WE GET GRS ERROR\n         BH    QCBERR             THEN CALL IT QCB ERROR\n         CH    R15,=H'4'          IF NOT FOUND\n         BE    SPNOMAJ            THEN GET OUT\n         MVI   SWTCHA,1           MAJ NAME WAS FOUND\n         STH   R0,RIBELEN         L'RIBE\n         LA    R2,AREA            A(RIB)\nSPMINMAJ ST    R1,NUMRIBS         NUMBER OF RIBS\n         MVI   SWTCHB,0           RNAME NOT MOVED YET\n         LA    R15,RIBEND         END OF FIXED PORTION\n         LA    R7,RIBVAR          VAR PORTION\n         AH    R7,RIBVLEN         A(1ST RIBE)\n         L     R1,RIBNRIBE        NUMBER OF RIBE'S\nSPRIBE   ST    R1,NUMRIBES\n         SPACE 2\n*        DO REQUIRED SELECTION\n         CLC   SJOB(8),=CL8' '    IF THERE IS NO SELECTION JOB\n         BE    SPNOJOBS           THEN SELECT ALL JOBS\n         CLC   RIBEJBNM,SJOB      ELSE CHECK JOBNAME\n         BNE   SPNEXTE            NOT SPECIFIED JOB - GO ON TO NEXT\nSPNOJOBS TM    SWTCH,X'F0'        ALL MINOR NAMES REQUIRED?\n         BZ    SPCHKMIN           NO...\n         CLC   =C'SYS',RIBRNAME   SYSTEM NAME\n         BNE   SPINTAB            NO, GO PUT IN TABLE\n         CLC   =C'.T',RIBRNAME+8  SYSTEM NAME\n         BNE   SPINTAB            NO, CONTINUE\n         CLI   RIBRNAME+16,C'.'   SYSTEM NAME\n         BNE   SPINTAB            NO, CONTINUE\n         MVC   NUMCHK(6),=6C'0'   SET NUMERIC FIELD\n         MVZ   NUMCHK(5),23(R7)   MOVE NUMERIC ZONES\n         CLC   NUMCHK(6),=6C'0'   STILL NUMERIC\n         BNE   SPINTAB            NO, NOT SYSTEM NAME\n         MVZ   NUMCHK(6),30(R7)   MOVE NUMERIC ZONES\n         CLC   NUMCHK(6),=6C'0'   STILL NUMERIC\n         BE    SPNEXTE            NO, SYSTEM NAME\n         B     SPINTAB            GO PUT IN TABLE\n         SPACE 2\nSPCHKMIN DS    0H                 SPECIFIC OR GENERIC RNAME SELECTION\n         SR    R8,R8\n         IC    R8,RIBRNMLN        LENGTH OF MINOR NAME\n         TM    SWTCH,X'0F'        ALL NAMES STARTING WITH GIVEN ?\n         BO    SPALL              YES.\n         CH    R8,MINLGTH         MINOR NAME LENGTHS AGREE ?\n         BNE   SPNEXTE            NO...GO ON TO NEXT\nSPCOMP   BCTR  R8,0               LENGTHS AGREE..BUT DO NAMES ?\n         EX    R8,SPCLC           IF RNAMES MATCH\n         BE    SPINTAB            THEN GO PUT IN TABLE\n         B     SPNEXTE            ELSE GO ON TO NEXT\n         SPACE\nSPALL    LH    R8,MINLGTH         LENGTH OF MINOR NAME TO START WITH\n         B     SPCOMP             JOIN COMMON CODE\n         SPACE 2\nSPINTAB  BAL   R14,SPSTORE        PUT INTO TABLE\n         SPACE\nSPNEXTE  AH    R7,RIBELEN         NEXT RIBE IN AREA.\n         L     R1,NUMRIBES        REPEAT FOR\n         BCT   R1,SPRIBE          RIBES IN AREA.\n         SPACE\n         LR    R2,R7              NEXT RIB\n         L     R1,NUMRIBS         NUMBER OF RIBS REMAINING\n         BCT   R1,SPMINMAJ        REPEAT FOR ALL RIBS IN AREA\n         SPACE\n         CLC   =F'8',GQRET        IF THERE ARE MORE\n         BE    SPLOOP5            THEN GO GET THEM\n         B     EXITOK             ELSE GO PRINT\n         SPACE 3\nSPNOMAJ  DS    0H                 NONE THIS TIME, DID WE\n         CLI   SWTCHA,0           FIND ANY AT ALL?\n         BNE   EXITOK             FOUND ON PREVIOUS GQSCAN.\n         B     NOMAJNAM           THIS WAS 1ST GQSCAN - MAJ NOT FOUND\n         SPACE 3\nSPSTORE  DS    0H                 STORE INFO IN TABLE\n         CLI   SWTCHB,0           IF THIS IS 1ST FOR THIS RESOURCE\n         BE    SPSRNAM            THEN GO PUT RNAME IN TABLE\nSPSJOB   EQU   *                  PUT JOB INFO INTO TABLE\n         MVC   0(8,R4),RIBEJBNM   PUT JOBNAME IN TABLE\n         MVI   8(R4),C'S'         ASSUME SHR'D ENQ\n         TM    RIBERFLG,RIBERESV  RESERVE\n         BNO   SPLOKBKX           NO, BR AROUND\n         MVI   8(R4),C'R'         IND SHR RESERVE\nSPLOKBKX TM    RIBERFLG,RIBETYPE  IS IT SHR'D ?\n         BO    SPXTONE            YES...\n         MVI   8(R4),C'E'         NO...MUST BE EXCLUSIVE\n         TM    RIBERFLG,RIBERESV  RESERVE\n         BNO   SPXTONE            NO, BR AROUND\n         MVI   8(R4),C'X'         IND EXCL RESERVE\nSPXTONE  LA    R3,1(,R3)          INCREMENT ENTRY NUMBER\n         LA    R4,9(,R4)          INCREMENT TABLE LOCATION\n         CR    R3,R5              TOO MANY ENTRIES IN TABLE ?\n         BH    TABLOVFL           YES...IGNORE REMAINDER\n         MVI   SWTCH+1,X'F0'      FLAG MINORS FOUND\n         BR    R14                RETURN FROM SPSTORE\nSPSRNAM  DS    0H                 PUT RESOURCE INFO INTO TABLE\n         MVI   SWTCHB,1           DON'T MOVE RNAME AGAIN\n         SR    R9,R9\n         IC    R9,RIBRNMLN        LENGTH OF MINOR NAME\n         CH    R9,=H'44'          GTR 44 BYTES ?\n         BNH   SPLGTHOK           NO...USE AS IS\n         LA    R9,44              YES..RESET TO 44 AND TRUNCATE NAME\nSPLGTHOK STC   R9,1(,R4)          PUT NAME LENGTH IN TABLE\n         LA    R9,2(,R9)          INCREASE FOR FOLLOWING COMPUTATIONS\n         SR    R10,R10\n         LR    R11,R9             LENGTH OF MINOR NAME+CONTROL BYTES\n         D     R10,=F'9'          MULTIPLE OF 9 ?\n         LTR   R10,R10            ANY REMAINDER ?\n         BZ    SPL9               NO...\n         LA    R11,1(,R11)        YES...ROUND UP\nSPL9     STC   R11,0(,R4)         PUT NO. OF TABLE ENTRIES IN TABLE\n         CLI   RIBRNAME,C'$'      PRINTABLE NAME           AXC\n         BL    SPUNAME            NO, UNKNOWN\n         CLI   RIBRNAME,C'9'      PRINTABLE NAME\n         BH    SPUNAME            NO, UNKNOWN\n         AR    R3,R11             INCREMENT NO. OF ENTRIES\n         CR    R3,R5              OVERFLOW TABLE ?\n         BH    TABLOFL2           HOPEFULLY NOT.\n         BCTR  R9,0               REDUCE LENGTH\n         BCTR  R9,0               TO ORIGINAL AND THEN\n         BCTR  R9,0               SET FOR EXECUTE INST\n         EX    R9,SPRNAM          MOVE MINOR NAME\n*                                 NO. OF TABLE SLOTS TAKEN BY NAME\nSPKBACK  SR    R10,R10            MULTIPLIED BY 9 BYTES/SLOT\n         M     R10,=F'9'          EQUALS TOTAL LENGTH TAKEN\n         AR    R4,R11             ADDED TO SLOT POINTER\n         B     SPSJOB             GO PUT JOB INFO INTO TABLE\n         SPACE 3\nSPUNAME  MVC   2(7,R4),=CL7'UNKNOWN'\n         MVI   1(R4),X'07'        SET MINOR NAME LENGTH\n         MVI   0(R4),X'09'        SET FOR TABLE ENTRIES\n         LA    R11,9              LOAD ADJUSTED LENGTH\n         AR    R3,R11             INCR NO. OF ENTRIES\n         CR    R3,R5              OVERFLOW TABLE\n         BH    TABLOFL2           HOPEFULLY NOT\n         SH    R9,=H'3'           ADJUST LENGTH\n         B     SPKBACK\n         SPACE 3\nSPRNAM   MVC   2(0,R4),RIBRNAME   EX TO MOVE RNAME INTO TABLE\nSPCLC    CLC   MINNAME(0),RIBRNAME EX TO DO RNAME SELECTION\n         USING XSA,R2\n***********************************************************************\n*\n*        TABLE COMPLETE, READY FOR EXIT\n*\n***********************************************************************\nEXITOK   DS    0H\n         TM    SWTCH+1,X'F0'      MINOR NAMES FOUND ?\n         BZ    NOOUTPUT           NO...\nEXITOK1  LA    R1,0               MESSAGE CODE=0, ALL SUCCESSFUL\nSETSIZE  STH   R3,TBLSIZE         SET TABLE SIZE FOR I/O MODULE\n         MVC   0(4,R4),=F'-1'     SET END OF TABLE\n         SPACE 5\n***********************************************************************\n*\n*        XCTL TO SECOND LOAD OF MODULE FOR ALL I/O\n*\n***********************************************************************\nXCTL     EQU   *\n         ESTAE 0\n         STH   R1,MSGCODE         SET CODE FOR IGCSB03D\n         MVC   XCTLNAME(8),=CL8'IGCSB03D' NAME OF ENTRY POINT\n         L     R15,=V(IEESB03D)     SECOND LOAD\n         BR    R15\n         SPACE 3\nUNKNOWN  MVC   2(7,R4),=CL7'UNKNOWN'\n         MVI   1(R4),X'07'        SET MINOR NAME LENGTH\n         MVI   0(R4),X'09'        SET FOR TABLE ENTRIES\n         LA    R11,9              LOAD ADJUSTED LENGTH\n         AR    R3,R11             INCR NO. OF ENTRIES\n         CR    R3,R5              OVERFLOW TABLE\n         BH    TABLOFL2           HOPEFULLY NOT\n         SH    R9,=H'3'           ADJUST LENGTH FOR EXECUTE\n         B     UNKBACK\n***********************************************************************\n*\n*        ERROR MESSAGE CODES SET HERE\n*\n***********************************************************************\nNOMAJNAM LA    R1,4               MAJOR NAME QCB NOT FOUND\n         B     XCTL\n         SPACE 2\nQCBERR   LA    R1,8               MINOR QCB CHAIN ERROR\n         B     XCTL\n         SPACE 2\nQELERR   LA    R1,12              QEL CHAIN ERROR\n         B     XCTL\n         SPACE 2\nGETERR   LA    R1,16              NO FREE CORE AVAILABLE FROM GETMAIN\n         B     XCTL\n         SPACE 2\nBADERR   LA    R1,20              INVALID MAJOR/MINOR NAME\n         B     XCTL\n         SPACE 2\nPARMERR  LA    R1,24              NO MINOR NAME SPECIFIED\n         B     XCTL\n         SPACE 2\nNOOUTPUT LA    R1,28              MINOR NAME QCB NOT FOUND\n         B     XCTL\n         SPACE 2\nTABLOVFL LA    R1,32              LOST DATA--TABLE SIZE EXCEEDED\n         B     SETSIZE\n         SPACE 2\nTABLOFL2 SR    R3,R11             TABLE OVERFLOW ON MINOR QCB NAME\n         B     TABLOVFL           OMIT IT FROM TABLE\n         SPACE 2\nCMDERR   LA    R1,36              COMMAND ERROR\n         B     XCTL\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESA03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     CMDERR\n***********************************************************************\n*\n*        CONSTANTS, DSECTS, ETC HERE\n*\n***********************************************************************\nMVNAM    MVC   0(*-*,R6),0(R8)\nCOMPMINR CLC   MINNAME(*-*),20(R7)\nQCBNAME  MVC   2(*-*,R4),20(R7)\nGQSCANP  GQSCAN MF=L\nGQSCANE  EQU   *                  TO GET LENGTH OF GQSCAN PARM LIST\n         DS    0F\nTSMSK    DC    X'00007FFF'\nSUB241   DC    X'F1000000'\nENABLE   DC    X'FF'\nCORSIZ   DC    F'9120'\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n*\nWKDSECT  DSECT\nSAVA     DS    18F                SAVE-AREA\nSUBPOOL  DS    F                  GETMAIN SUBPOOL\nXSASAVE  DS    F                  EXTENDED SAVE-AREA PTR\nCORE     DS    F                  POINTER TO FREE CORE TABLE\nMAJLGTH  DS    H                  MODIFIED LENGTH OF MAJOR NAME\nMINLGTH  DS    H                  MODIFIED LENGTH OF MINOR NAME\nSWTCH    DS    H                  PROGRAM SWITCHES\n***********************************************************************\n*\n*              SWTCH -- BIT DEFINITIONS\n*\n*        OFFSET   VALUE   MEANING\n*       -------  ------- ---------\n*          +0     X'00'   FULLLY QUALIFIED MINOR NAME GIVEN\n*\n*          +0     X'F0'   OBTAIN ALL MINOR NAMES\n*\n*          +0     X'0F'   OBTAIN ALL MINOR NAMES STARTING WITH GIVEN\n*\n*          +1     X'F0'   FOUND MINOR NAME, OUTPUT EXISTS\n*\n*          +1     X'0F'   OBTAIN ONLY MAJOR QCB NAMES\n*\n***********************************************************************\nWKSIZE   DS    H                  SIZE OF WORK-AREA\nCORESIZE DS    H                  SIZE OF FREE-CORE TABLE\nMSGCODE  DS    H                  I/O MESSAGE CODE\nTBLSIZE  DS    H                  NUMBER OF TABLE ENTRIES\nMAJNAM   DS    CL8                MAJOR NAME\nMINNAME  DS    CL255              MINOR NAME\nNUMCHK   EQU   MINNAME+200\nWTOLIST  DS    F                  WTO CONTROL BYTES\nBUFFER   DS    CL65               WTO MESSAGE BUFFER\nXCTLLIST DS    0F                 XCTL CONTROL INFO\nXCTLEP   DS    F                  ADDRESS OF EP PARAMETER\nXCTLDCB  DS    F                  DCB ADDRESS PARAMETER\nXCTLNAME DS    CL8                ENTRY POINT NAME\n         DS    0F\nMINADDR  DS    F\nMINENTRY DS    F\nSJOB     DS    CL8                SELECTION JOB\nESTAELST DS    0F,(ESTAEOVX)X\nTOKEN    DS    F                  GQSCAN TOKEN\nSPSTART  DS    A                  START POINT OF QNAMES IN TABLE\nGQRET    DS    F                  GQSCAN RETURN CODE\nNUMRIBS  DS    F                  NUMBER OF RIB'S IN AREA\nNUMRIBES DS    F                  NUMBER OF RIBE'S\nRIBELEN  DS    H                  LENGTH OF RIBE\nGQSCANL  GQSCAN MF=L\nSWTCHA   DS    X                  0 IF MAJOR NAME NOT FOUND\nSWTCHB   DS    X                  0 IF RNAME NOT MOVED YET\n         DS    0D\nAREA     DS    XL1024             GQSCAN RETURN AREA\nLWKDSECT EQU   *-WKDSECT\nDSXSA    DSECT\nXSA      DS    0D\nXAP      DS    F                  PTR TO XCTL NAME\nXAD      DS    F                  DCB PTR\nXAX      DS    D                  XCTL NAME\nXAE      DS    0C                 ERROR CODE\nXAR      DS    F                  PTR TO PARM LIST (REG1)\nXAN      DS    0C                 VERB INDEX\nXAL      DS    F                  PTR TO LIST POSITION\nXAV      DS    D                  VERB\nXAS      DS    D                  TEMP SAVE-AREA\nXAU      DS    C                  UCM ENTRY INDICATOR\n         DS    C                  RESERVED\nXAJ      DS    H                  TJID ENTRY INDICATOR\n         DS    F                  RESERVED\n         PRINT NOGEN\n         IHASDWA\n         ISGRIB\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         END\n./       ADD   NAME=CSCSB03D\n         TITLE 'IEESB03D -   #N  DISPLAY ENQUEUE 2ND LOAD'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESB03D -       #N DISPLAY ENQUEUE 2ND LOAD              ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        07/22/81  AXC-CBT HANDLE ESTAE           ***\n***                                                                 ***\n***                        04/21/86  GLA-BFG PASS PARM TO ESTAE OK  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESB03D CSECT\n         LR    R12,R15\n         USING IEESB03D,R12\n         USING WKDSECT,R13\n         USING XSA,R2\n         SPACE 2\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(13),MF=(E,(1))                            GLA-BFG\n         L     R2,XSASAVE         A(EXTENDED SAVE AREA)\n         LH    R7,XAJ             TJID, IF IT EXISTS.\n         SLL   R7,16              MOVE TO HIGH ORDER BYTES.\n         SR    R10,R10            CLEAR REGISTER\n         IC    R10,XAU            R10 = CONSOL ID FOR MCS\n         MVI   WTOLIST+2,X'01'    MCSFLAG = QREG0\n         LH    R3,MSGCODE         GET MESSAGE ERROR CODE, IF ANY\n         LTR   R3,R3              ANY ERRORS ?\n         BZ    FORMAT             NO...\n         CH    R3,=H'36'          CONTROL BLOCK ERROR\n         BE    CLEANUP            YES, EXIT\n         L     R5,MSGTABLE(R3)    YES...GET DISPLACEMENT OF MESSAGE\n         LA    R5,0(R12,R5)       ADD BASE FOR ABSOLUTE ADDRESS\n         LH    R4,0(,R5)          LENGTH OF MESSAGE\n         BCTR  R4,0               SET FOR EXECUTE\n         EX    R4,GETMSG\n         LA    R4,5(,R4)          RESET LENGTH+4 FOR CONTROL BYTES\n         STH   R4,WTOLIST         PUT LENGTH IN CONTROL FIELD\n         BAL   R11,IOCS           OUTPUT MESSAGE\n         CH    R3,=H'32'          \"LOST DATA\" ERROR CODE ?\n         BNE   CLEANUP            NO...ALL FINISHED THEN.\n***********************************************************************\n*\n*        FORMAT DATA AND WRITE IT OUT\n*\n***********************************************************************\nFORMAT   EQU   *\n         LA    R3,36              SET MESSAGE CODE\n         LA    R9,2               LOOP COUNTER\n         TM    SWTCH+1,X'0F'      ONLY MAJOR QCB NAMES?\n         BZ    LOOP1              NO..OK AS IS.\n         LA    R3,44              YES..SET FOR CORRECT HEADER MSG.\nLOOP1    L     R5,MSGTABLE(R3)    DISPLACEMENT OF MESSAGE\n         LA    R5,0(R12,R5)       ADD BASE FOR ABSOLUTE ADDRESS\n         LH    R4,0(,R5)          LENGTH\n         BCTR  R4,0               SET FOR EXECUTE\n         EX    R4,GETMSG          MOVE MESSAGE TO BUFFER\n         LA    R4,5(,R4)          CORRECT LENGTH\n         STH   R4,WTOLIST         SET IN MESSAGE\n         BAL   R11,IOCS           DO OUTPUT\n         LA    R3,4(,R3)          NEXT MESSAGE CODE\n         BCT   R9,LOOP1           DO NEXT MESSAGE\n*\n         LH    R3,TBLSIZE         NO. OF ENTRIES IN TABLE\n         L     R5,CORE            START OF TABLE\n         LA    R6,BUFFER          START OF OUTPUT BUFFER\n*\n         TM    SWTCH+1,X'0F'      ONLY MAJOR QCB NAMES ?\n         BO    MAJONLY            YES..\n*\nLOOP2    MVI   BUFFER,C' '\n         MVC   BUFFER+1(64),BUFFER  BLANK-OUT BUFFER\n         LA    R4,24              SET NORMAL WTO LENGTH\n         SR    R9,R9\n         IC    R9,0(,R5)          GET FIRST CHAR IN ENTRY\n         CH    R9,=H'91'          LESS THAN X'5B'...CHAR '$' ?\n         BL    SETNAME            YES..\nGETOWNER MVC   2(8,R6),0(R5)      JOBNAME/USERID\n         MVC   11(6,R6),=CL6'- SHR '   ASSUME SHR'D ENQ\n         CLI   8(R5),C'S'         IS IT SO ?\n         BE    PRINT\n         MVC   13(4,R6),=CL4'EXCL'  NO...MUST BE EXCLUSIVE\n         CLI   8(R5),C'E'         IS IT SO\n         BE    PRINT\n         MVC   13(4,R6),=CL4'RSVS'  NO, SHR RESERVE\n         CLI   8(R5),C'R'         IS IT SO\n         BE    PRINT\n         MVC   13(4,R6),=CL4'RSVX'  NO, EXCL RESERVE\nPRINT    STH   R4,WTOLIST         SET MESSAGE LENGTH\n         BAL   R11,IOCS           OUTPUT BUFFER\n         LA    R5,9(,R5)          NEXT ENTRY IN TABLE\n         CLC   0(4,R5),=F'-1'     END OF TABLE\n         BE    CLEANUP            YES\n         BCT   R3,LOOP2           DO NEXT ENTRY, IF ANY\n         B     CLEANUP            FINISHED...\n*\nSETNAME  SR    R11,R11            MUST BE A MINOR QCB ENTRY.\n         IC    R11,1(,R5)         LENGTH OF MINOR NAME\n         LR    R4,R11\n         LA    R4,24(,R4)         TOTAL MESSAGE LENGTH\n         BCTR  R11,0              SET FOR EXECUTE INST\n         EX    R11,GETNAME        MOVE NAME INTO BUFFER\n         SR    R3,R9              DELETE NO. OF TABLE ENTRIES\n         SR    R8,R8              (NO. OF ENTRIES) X (SIZE OF ENTRY)\n         M     R8,=F'9'           PLUS CURRENT POINTER EQUAL\n         AR    R5,R9              NEXT TABLE ENTRY\n         B     GETOWNER           GET JOBNAME/USERID, ETC.\n         SPACE 2\n***********************************************************************\n*\n*        PRINT ONLY MAJOR QCB NAMES HERE\n*\n***********************************************************************\nLOOP3    EQU   *\nMAJONLY  LA    R4,17              SIZE OF MESSAGE\n         STH   R4,WTOLIST         PLACE IN CONTROL FIELD\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(64),BUFFER BLANK-OUT BUFFER\n         MVC   5(8,R6),0(R5)      GET MAJOR NAME FROM TABLE\n         BAL   R11,IOCS           WRITE IT OUT\n         LA    R5,8(,R5)          NEXT ENTRY IN TABLE,IF ANY\n         CLC   0(4,R5),=F'-1'     END OF TABLE\n         BE    CLEANUP            YES\n         BCT   R3,LOOP3           GET IT, IF IT EXISTS\n         B     CLEANUP            FINISHED...\n***********************************************************************\n*\n*        RELEASE ALL CORE AND EXIT\n*\n***********************************************************************\nCLEANUP  EQU   *\n         ESTAE 0\n         L     R1,CORE            START OF CORE TABLE\n         LH    R0,CORESIZE        SIZE OF TABLE\n         O     R0,SUBPOOL         RELEASE FROM SAME SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 2\nCLEAN2   EQU   *\n         LH    R0,WKSIZE          SIZE OF WORK-AREA\n         O     R0,SUBPOOL         RELEASE FROM SAME SUBPOOL\n         LR    R1,R13             START OF WORK-AREA\n         L     R14,SAVA           SET RETURN ADDRESS\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 2\n         SR    R15,R15\n         BR    R14                RETURN\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESB03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     CLEANUP\n***********************************************************************\n*\n*        IOCS -- I/O CONTROL SECTION\n*\n*        ON ENTRY:\n*                 R4  = MESSAGE LENGTH+4 (INCLUDES WTO CONTROL BYTES)\n*                 R10 = CONSOL ID FOR MCS\n*                 R11 = RETURN ADDRESS\n*\n*        NOTE: OUTPUT BUFFER IS SETUP PRIOR TO ENTRY\n*\n***********************************************************************\nIOCS     DS    0H\n         SPACE 2\nOPER     LA    R1,WTOLIST         WRITE MESSAGE TO OPERATOR\n         SR    R0,R0\n         IC    R0,XAU             R0 = CONSOL ID FOR MCS\n         SVC   35\n         BR    R11                RETURN\n***********************************************************************\n*\n*        CONSTANTS, TABLES, ETC.\n*\n***********************************************************************\nMSGTABLE DS    0F                 MSGCODE\n         DC    A(*)                 0 - NOT USED\n         DC    A(MSG1-IEESB03D)     4\n         DC    A(MSG2-IEESB03D)     8\n         DC    A(MSG3-IEESB03D)     12\n         DC    A(MSG4-IEESB03D)     16\n         DC    A(MSG5-IEESB03D)     20\n         DC    A(MSG6-IEESB03D)     24\n         DC    A(MSG7-IEESB03D)     28\n         DC    A(MSG8-IEESB03D)     32\n         DC    A(MSG9-IEESB03D)     36\n         DC    A(MSG10-IEESB03D)    40\n         DC    A(MSG11-IEESB03D)    44\n         DC    A(MSG12-IEESB03D)    48\n*\nMSG1     DC    H'32',C'*** MAJOR NAME QCB NOT FOUND ***'\nMSG2     DC    H'37',C'*** ERROR IN MINOR QCB CHAIN ***'\nMSG3     DC    H'27',C'*** QEL CHAIN ERROR ***'\nMSG4     DC    H'46',C'*** NO FREE SQA CORE AVAILABLE...TRY AGAIN ***'\nMSG5     DC    H'42',C'*** INVALID MAJOR/MINOR NAME SPECIFIED ***'\nMSG6     DC    H'31',C'*** NO MINOR NAME SPECIFIED ***'\nMSG7     DC    H'32',C'*** MINOR NAME QCB NOT FOUND ***'\nMSG8     DC    H'54',C'*** LOST DATA...MAXIMUM NUMBER OF ENTRIES EXCEEDX\n               ED ***'\nMSG9     DC    H'30',C'  JOB/USER   MODE   MINOR NAME'\nMSG10    DC    H'31',C' ------------------------------'\nMSG11    DC    H'16',C'  MAJOR QCB NAME'\nMSG12    DC    H'17',C' ----------------'\n         SPACE 2\n         DS    0F\nSUB255   DC    X'FF000000'\nGETMSG   MVC   BUFFER(*-*),2(R5)\nGETNAME  MVC   BUFFER+20(*-*),2(R5)\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 2\nWKDSECT  DSECT\nSAVA     DS    18F                SAVE-AREA\nSUBPOOL  DS    F                  SUBPOOL MASK\nXSASAVE  DS    F                  EXTENDED SAVE-AREA PTR\nCORE     DS    F                  POINTER TO FREE CORE\nMAJLGTH  DS    H                  MODIFIED LENGTH OF MAJOR NAME\nMINLGTH  DS    H                  MODFIED LENGTH OF MINOR NAME\nSWTCH    DS    H                  PROGRAM SWITCHES\nWKSIZE   DS    H                  SIZE OF WORK-AREA\nCORESIZE DS    H                  SIZE OF FREE CORE\nMSGCODE  DS    H                  I/O MESSAGE CODE\nTBLSIZE  DS    H                  NUMBER OF TABLE ENTRIES\nMAJNAM   DS    CL8                MAJOR NAME\nMINNAME  DS    CL255              MINOR NAME\nWTOLIST  DS    F                  WTO CONTROL BYTES\nBUFFER   DS    CL65               WTO MESSAGE BUFFER\nXCTLLIST DS    0F                 XCTL CONTROL INFO\nXCTLEP   DS    F                  ADDRESS OF EP PARAMETER\nXCTLDCB  DS    F                  DCB ADDRESS PARAMETER\nXCTLNAME DS    CL8                ENTRY POINT NAME\n         DS    0F\nMINADDR  DS    F\nMINENTRY DS    F\nSJOB     DS    CL8\nESTAELST DS    0F,(ESTAEOVX)X\nLWKDSECT EQU   *-WKDSECT\n         SPACE 2\nDSXSA    DSECT\nXSA      DS    0D\nXAP      DS    F                  PTR TO XCTL NAME\nXAD      DS    F                  DCB PTR\nXAX      DS    D                  XCTL NAME\nXAE      DS    0C                 ERROR CODE\nXAR      DS    F                  PTR TO PARM LIST (REG1)\nXAN      DS    0C                 VERB INDEX\nXAL      DS    F                  PTR TO LIST POSITION\nXAV      DS    D                  VERB\nXAS      DS    D                  TEMP SAVE-AREA\nXAU      DS    C                  UCM ENTRY INDICATOR\n         DS    C                  RESERVED\nXAJ      DS    H                  TJID ENTRY INDICATOR\n         DS    F                  RESERVED\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         END\n./       ADD   NAME=CSCSC03D\n         TITLE 'IEESC03D -   #L  DISPLAY TSO LINES'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESC03D -       #L DISPLAY TSO LINES                     ***\n***                                                                 ***\n***       VERSION -        1.4                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        07/19/81  AXC-CBT HANDLE ESTAE           ***\n***                        08/10/81  JCC-BCB TEST FOR END OF ASCBS  ***\n***                                          ADD VTAM LOGIC         ***\n***                        08/10/81  JGS - TEST IF UNDER TSO      NERDC\n***                        01/11/82  RLL - CHANGE ESTAE PARM LENGTH ***\n***                        01/19/82  AXC-CBT CHANGE TSO CHECK       ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESC03D CSECT\n         LR    R12,R15            SET ADDRESSABILITY\n         USING IEESC03D,R12\n         LA    R0,LWKDSECT        SIZE OF SAVE-AREA AND WORK-AREA\n         O     R0,SUB241          GET FROM SUB-POOL 241\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WKDSECT,R13        FIRST 18 WRDS ARE SAVE-AREA\n         USING XSA,R2\n         XC    0(LWKDSECT,R13),0(R13)  ZERO-OUT WORK AREA\n         ST    R14,SAVA           PUT RETURN ADDRESS IN UNUSED SLOT\n         ST    R2,XSASAVE         SAVE XSA POINTER\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         SR    R3,R3              CLEAR REGISTER\n         IC    R3,XAU             R3 = CONSOL ID FOR MCS\n         MVI   WTOLIST+2,X'01'    MCSFLAGS = QREG0\n         XC    SWTCH,SWTCH        ZERO-OUT SWTCH\n         LA    R6,BUFFER          START OF BUFFER\n         MVI   BUFFER,C' '        BLANK-OUT BUFFER\n         MVC   BUFFER+1(59),BUFFER                                JCC\n         LA    R7,2               ENTRIES PER LINE\n         L     R11,16             CVT ADDR\n         L     R9,556(0,R11)      LOAD ASVT ADDR\n         L     R5,516(0,R9)       MAX # OF ASIDS                  JCC\n         MH    R5,=H'4'           MULTIPLY BY 4                   JCC\n         LA    R5,528(R5,R9)      ADD TO ADDR OF FIRST ASCB       JCC\n         ST    R5,ASCBEND         STORE ADDR OF LAST ASCB         JCC\n         ZAP   TOTUSER,=P'0'      CLEAR TOTAL FIELD               JCC\n         LA    R9,520(0,R9)       ASVT ENTRY ADDR\n         B     NEXTONE            GO GET ASCB\n***********************************************************************\n*\n*        LOOP THRU ALL ASCBS\n*\n***********************************************************************\n         USING TSB,R11                                            JCC\nLOOP1    LM    R10,R11,56(R8)      LOAD CSCB/TSB ADDR\n         LTR   R11,R11             ANY TSB\n         BZ    NEXTONE             NO, NOT TP USER\n         AP    TOTUSER,=P'1'       ADD 1 TO USER TOTAL            JCC\n         MVI   SWTCH,X'F0'         OUTPUT EXISTS\n         MVC   1(8,R6),8(R10)      JOBNAME\n         MVI   10(R6),C'('         BRACKET ASCB\n         UNPK  11(5,R6),36(3,R8)   UNPACK ASID\n         NC    11(4,R6),=4X'0F'       AND\n         TR    11(4,R6),=C'0123456789ABCDEF' TRANSLATE\n         MVI   15(R6),C')'         BRACKET ASID\n*        CLC   =C'0A23',TSTSVC35   IF EXECUTING UNDER TSO         NERDC\n         CLC   =XL2'0A23',TSTSVC35   IF EXECUTING UNDER TSO     CBT-AX\n*        BNE   SKIPLINE             BYPASS ABEND S0C4             NERDC\n         BNE   LOOP1C               BYPASS ABEND S0C4           CBT-AXC\n         MVI   17(R6),C'-'\n         TM    TSBFLG5,TSBVTAM     IF THIS IS VTAM                JCC\n         BO    VTAMRTN             THEN GO TO EXTENSION           JCC\n         UNPK  18(5,R6),82(3,R11)  UNPACK LINE ADDR\n         NC    19(3,R6),=4X'0F'       AND\n         TR    19(3,R6),=C'0123456789ABCDEF' TRANSLATE\n         MVI   18(R6),C' '\n         MVI   22(R6),C' '\nLOOP1C   DS    0H                                                 JCC\n         LA    R6,ENTRYSIZ(0,R6)   INCR INTO BUFFER\n         BCT   R7,NEXTONE          NEXT ASCB\n         LA    R4,60               MSG LENGTH                     JCC\n         BAL   R11,IOCS            GO WTO\n         LA    R7,2                ENTRIES PER LINE\n         LA    R6,BUFFER           LOAD BUFFER ADDR\n         MVI   0(R6),C' '\n         MVC   1(59,R6),0(R6)                                     JCC\n         SPACE 3\nNEXTONE  LA    R9,4(0,R9)          INCR INTO ASVT\n         L     R8,0(0,R9)          LOAD ASCB ADDR\n         C     R9,ASCBEND          END OF ASCBS?                  JCC\n         BNL   LOOP2               YES, EXIT                      JCC\n         TM    0(R9),X'80'         ASID ASSIGNED\n         BO    NEXTONE             NO, CHECK NEXT\n         B     LOOP1\nVTAMRTN  DS    0H                                                 JCC\n         L     R5,TSBEXTNT         FETCH TSB EXTENSION ADDRESS    JCC\n         USING TSBX,R5             TELL THE ASSEMBLER             JCC\n         TM    TSBXFLG1,TSBXWREC   IF NOT WAITING RECONNECT       JCC\n         BNO   VTGETSYM            THEN GO GET SYMBOLIC NAME      JCC\n         MVC   19(8,R6),=CL8'*DISCON*'   SET DISCONNECT STATUS    JCC\n         B     LOOP1C              GO BACK TO LOOP                JCC\nVTGETSYM DS    0H                                                 JCC\n         MVC   19(8,R6),TSBTRMID   MOVE SYMBOLIC NAME TO LINE     JCC\n         B     LOOP1C              GO BACK TO LOOP                JCC\n         DROP  R5,R11                                             JCC\n         SPACE 3\nLOOP2    CH    R7,=H'2'            ANY TO WRITE\n         BE    CLEANUP             NO, EXIT\n         LA    R4,60               MSG LENGTH                     JCC\n         BAL   R11,IOCS            WRITE LAST\n***********************************************************************\n*\n*        RELEASE ALL CORE AND RETURN\n*\n***********************************************************************\nCLEANUP  TM    SWTCH,X'F0'        DID OUTPUT EXIST ?\n         BZ    NOOUTPUT           NO...\n         MVI   BUFFER,C' '        CLEAR THE                       JCC\n         MVC   BUFFER+1(59),BUFFER          BUFFER AREA           JCC\n         MVC   BUFFER(28),TOTMSG     MOVE THE TOTAL MESSAGE       JCC\n         MVC   BUFFER+28(4),=X'40202120'  MOVE EDIT MASK          JCC\n         ED    BUFFER+28(4),TOTUSER  EDIT THE TOTAL               JCC\n         LA    R4,60              MESSAGE LENGTH                  JCC\n         BAL   R11,IOCS           WRITE TOTALS                    JCC\n         SPACE 2\nCLNUPX   EQU   *\n         ESTAE 0\n         LA    R0,LWKDSECT        SIZE OF CORE\n         O     R0,SUB241          RETURN TO SUB-POOL 241\n         LR    R1,R13             START OF CORE\n         L     R4,SAVA\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         LR    R14,R4\n         BR    R14                RETURN\n***********************************************************************\n*\n*        I/O CONTROL SECTION\n*\n*        ON ENTRY :\n*                  R3  = CONSOL ID FOR MCS\n*                  R4  = LENGTH OF MESSAGE\n*                  R11 = RETURN ADDRESS\n*\n***********************************************************************\nIOCS     DS    0H\nOPER     LA    R4,4(,R4)          ADD CONTROL BYTES TO LENGTH\n         STH   R4,WTOLIST         SET LENGTH IN CONTROL FIELD\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU             R0 = CONSOL ID FOR MCS\nTSTSVC35 SVC   35                 LABEL FOR TEST IF UNDER TSO     NERDC\n         BR    R11                RETURN\n***********************************************************************\n*\n*        ISSUE ERROR MESSAGES HERE\n*\n***********************************************************************\nNOOUTPUT MVC   BUFFER(LMSG),MSG   SET ERROR MESSAGE\n         LA    R4,LMSG\n         SPACE 2\n         BAL   R11,IOCS\n         B     CLNUPX\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESC03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     CLNUPX\n***********************************************************************\n*\n*        DSECTS, EQUATES, TABLES, ETC.\n*\n***********************************************************************\n         SPACE 2\n         DS    0F                 ALIGN ON FULL WORD BOUNDARY\nSUB241   DC    X'F1000000'        MASK FOR SUB-POOL 241\nENTRYSIZ EQU   28                 SIZE OF EACH ENTRY IN BUFFER    JCC\nMSG      DC    C'   ***    NO ACTIVE TP USERS    ***'\nLMSG     EQU   *-MSG\nTOTMSG   DC    CL28'TOTAL NUMBER OF TSO USERS IS'                 JCC\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 2\nWKDSECT  DSECT\nSAVA     DS    18F                SAVE-AREA\nXSASAVE  DS    F                  EXTENDED SAVE-AREA ADDRESS\nWTOLIST  DS    F                  WTO CONTROL WORD\nBUFFER   DS    CL60               WTO BUFFER                      JCC\nSWTCH    DS    CL1\nESTAELST DS    0F,(ESTAEOVX)X                         ****(RLL)****\nASCBEND  DS    F                                                  JCC\nTOTUSER  DS    PL2                                                JCC\nLWKDSECT EQU   *-WKDSECT\n         SPACE 2\nDSXSA    DSECT\nXSA      DS    0D\nXAP      DS    F                  PTR TO XCTL NAME\nXAD      DS    F                  DCB PTR\nXAX      DS    D                  XCTL NAME\nXAE      DS    0C                 ERROR CODE\nXAR      DS    F                  PTR TO PARM LIST (REG1)\nXAN      DS    0C                 VERB INDEX\nXAL      DS    F                  PTR TO LIST POSITION\nXAV      DS    D                  VERB\nXAS      DS    D                  TEMP SAVE-AREA\nXAU      DS    C                  UCM ENTRY INDICATOR\n         DS    C                  RESERVED\nXAJ      DS    H                  TJID ENTRY INDICATOR\n         DS    F                  RESERVED\n         IKJTSB LIST=YES,EXT=YES                                  JCC\n         PRINT NOGEN\n         IHASDWA ,                RESERVED\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSD03D\n         PRINT NOGEN\n         TITLE 'XA1SD03D -   #D  DISPLAY/ZAP CORE'  BFG\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SE2SD03D -       #D DISPLAY/ZAP CORE                      ***\n***                                                                 ***\n***       VERSION -        4.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA 2.1.1 TO MVS/XA 2.1.3             ***\n***                                                                 ***\n***       WARNING   -      BE SURE TO CHANGE THE CONSTANT AT THE    ***\n***                        LABEL CALLED SWAPPG TO YOUR OWN          ***\n***                        PERFORMANCE SWAP OUT NUMBER (MAX AND     ***\n***                        MIN OF 0 ON A DOMAIN)                    ***\n***                                                                 ***\n***       UPDATED -                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESD03D CSECT\n***********************************************************************\n*\n*        THIS MODULE ATTEMPTS TO PERFORM THE BASIC FUNCTION OF\n*        DISPLAYING AND MODIFYING CORE IN ANY ADDRESS SPACE EXCEPT FOR\n*        LPA MODULES.\n*        THE SYNTAX ACCEPTED IS AS FOLLOWS.\n*\n*\n*              #DEXIT,AAAA        TERMINATE MEMORY FOR ASID AAAA\n*\n*              #DCHAP,AAAA,DDD    SET ASID AAAA TO DPRTY=DDD\n*\n*              #DNOCANC,AAAA      SET ASID AAAA NON-CANCELLABLE\n*\n*              #DOKCANC,AAAA      SET ASID AAAA CANCELABLE\n*\n*              #DNOSWAP,AAAA      SET ASID AAAA NON-SWAPABLE\n*\n*              #DOKSWAP,AAAA      SET ASID AAAA SWAPABLE\n*\n*              #DDOSWAP,AAAA      SWAP ASID AAAA IN/OUT\n*\n*              #DUNNN\n*\n*              #DSSSSSS,LL\n*\n*              #DSSSSSS/VVVVVVVV/RRRRRRRR\n*\n*              #D>AAAA,SSSSSS,LL\n*\n*              #D>AAAA,SSSSSS/VVVVVVVV/RRRRRRRR\n*\n*        WHERE THE FOLLOWING MEANINGS HOLD\n*              NNN      THE CUU OF THE DESIRED DEVICE. 64 BYTES ARE\n*                       DUMPPED.\n*              LL       NUMBER OF LINES OF 16 BYTES TO DUMP.\n*                       LIMIT IS 16.\n*              SSSSSS   THE ADDRESS OF THE AFFECTED AREA\n*              VVVVVVVV THE VALUE EXPECTED TO BE FOUND AT XXXXXX\n*              RRRRRRRR THE VALUE TO PLACE AT XXXXXX\n*              AAAA     THE ASID OF THE ADDRESS SPACE TO WORK IN\n*\n*  THE DEFAULTS ARE:\n*      - IF >AAAA IS NOT SPECIFIED THEN THE MASTER SCHEDULAR\n*        ADDRESS SPACE IS USED.\n*      - IF LL IS NOT SPECIFIED THEN 64 BYTES ARE DUMPPED.\n*\n*  NOTE:\n*      - VVVVVVVV AND RRRRRRRR MUST BE 8 CHARACTERS LONG.  ALL\n*        OTHER VARIABLES CAN BE SHORTER THAN SHOWN.\n*\n*\n*\n***********************************************************************\n         LR    R12,R15\n         USING IEESD03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         STM   R14,R12,SAVRET      SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         LA    R0,WTOLIST          POINT TO START OF CLEAR\n         LA    R1,WORKEND-WTOLIST  AND SET THE LENGTH\n         SR    R15,R15             CLEAR LENGTH 2\n         MVCL  R0,R14              CLEAR THE AREA\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L     * ESTAE PARM FIX        *\nESTAEOVX EQU   *-ESTAEOVL          * ESTAE PARM FIX        *\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX        *\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVC   PLINES(4),=F'4'     DEFAULT PRINT LINES\n         L     R3,XAL              LOAD LIST POINTER\n         LA    R3,0(0,R3)          CLEAR HIGH ORDER\n         LTR   R3,R3               PARM EXIST\n         BZ    NOPARM              NO, MVS MSG\n         LR    R7,R3               SAVE PARM START\n         CLI   0(R3),C'U'          IS THIS A UCB REQUEST\n         BE    UCBLOOP             YES SO PROCESS\n         CLI   0(R3),C'S'          IS THIS A SPECIAL REQUEST\n         BE    SVCLOOP             YES SO PROCESS\n         CLC   0(5,R3),=CL5'EXIT,'  EXIT REQUEST\n         BE    MEMTERM             YES SO PROCESS\n         CLC   0(5,R3),=CL5'CHAP,'  CHAP REQUEST\n         BE    CHAP                YES SO PROCESS\n         CLC   0(6,R3),=CL6'OKSWAP'  SET SWAPABLE\n         BE    SETSWAP             YES SO PROCESS\n         CLC   0(6,R3),=CL6'NOSWAP'  SET NON-SWAPABLE\n         BE    SETSWAP1            YES SO PROCESS\n         CLC   0(6,R3),=CL6'DOSWAP'  SWAP IN/OUT\n         BE    SETSWAP6            YES SO PROCESS\n         CLC   0(6,R3),=CL6'OKCANC'  SET CANCELABLE\n         BE    SETCANC             YES SO PROCESS\n         CLC   0(6,R3),=CL6'NOCANC'  SET NON-CANCELABLE\n         BE    SETCANC1            YES SO PROCESS\n         CLI   0(R3),C'>'          IS IT AN ASID\n         BNE   NOTASID             NOPE SO USE THIS ASID\n         LA    R3,1(R3)            POINT AT ASID NUMBER\n         LA    R4,4                SET MAX LENGTH\n         BAL   R11,PARMCVT         CONVERT HEX NUMBER\n         STH   R1,ASID             SAVE THE TARGET ASID\n         CLI   0(R3),C','          IS SYNTAX CORRECT\n         BNE   ERROR               GIVE ERROR IF NOT\n         LA    R3,1(R3)            SKIP OVER THE COMMA\nNOTASID  LA    R4,8                SET MAXLEN FOR ADDRESS\n         BAL   R11,PARMCVT         CONVERT THE ADDRESS\n         ST    R1,ADDR             SAVE ADDRESS TO DUMP OF REP AT\n         CLI   0(R3),C','          IS IT DUMP FORMAT\n         MVI   FLAG1,FG1DUMP       SET DUMP FLAG\n         BE    DUMPPREP            GO SETUP DUMP PARMS\n         CLI   0(R3),C' '          IF NEXT IS BLANK USE DEFAULT TO DUMP\n         BE    DOFUNC\n         MVI   FLAG1,FG1REP        SET REP FLAG\n         CLI   0(R3),C'/'          IS THE SYNTAX CORRECT\n         BNE   ERROR               BAD SYNTAX\n         TITLE 'XA1SD03D  D COMMAND  --  PREPARE FOR THE REP FUNCTION'\n         CLI   9(R3),C'/'          CHECK REST OF SYNTAX\n         BNE   ERROR\n         LA    R3,1(R3)            SKIP OVER THE '/'\n         LA    R4,0                SET MAX LENGTH TO 0 TO FORCE\n*                             A FULL WORD ONLY\n         BAL   R11,PARMCVT         CONVERT THE VER VALUE\n         ST    R1,ALTVER           SAVE EXPECTED VALUE\n         LA    R3,1(R3)            SKIP OVER '/'\n         LA    R4,0                SET MAX LENGTH TO 0 TO FORCE\n*                             A FULL WORD ONLY\n         BAL   R11,PARMCVT         CONVERT THE REP VALUE\n         ST    R1,ALTREP           AND SAVE IT\n         B     DOFUNC              GO SETUP TO DO FUNCTION\n         TITLE 'XA1SD03D  D COMMAND  --  SETUP FOR THE DUMP FUNCTION'\nDUMPPREP DS    0H\n         TM    1(R3),X'F0'         NUMERIC\n         BNO   ERROR               NO\n         TM    2(R3),X'F0'         NUMERIC\n         BNO   ERROR               NO\n         CLC   1(2,R3),=CL2'00'    AXC-CBT POSSIBLE LOOP\n         BE    MAX                 AXC-CBT YES\n         PACK  DOUBLE(8),1(2,R3)\n         CVB   R1,DOUBLE\n         CH    R1,=H'16'           MAX IS 256 BYTES\n         BNH   *+8\nMAX      LA    R1,16               SET MAX\n         ST    R1,PLINES           SAVE NUMBER OF LINES\n         TITLE 'XA1SD03D  D COMMAND  --  PERFORM THE DESIRED FUNCTION'\n*-------------------------------------------------------------*    @TEC\n*   CHECK FOR CROSS MEMORY FUNCTION  AND IF SO VALIDATE ASCB. *    @TEC\n*-------------------------------------------------------------*    @TEC\nDOFUNC   L     R1,PLINES           COMPUTE LENGTH OF INFO TO DISPLAY\n         SLL   R1,4                AS LINES*16\n         ST    R1,LENGTH\n         LH    R1,ASID             GET THE ASID\n         LTR   R1,R1               IS IT ZERO\n         BZ    DOSUBR              IF SO USE THIS ADDR SPACE  MS\n         L     R3,CVTPTR           POINT TO CVT\n         USING CVTMAP,R3\n         L     R2,CVTTCBP          GO GET MY ASCB ADDR\n         MVC   MYASCB,12(R2)       SAVE ADDR OF ASCB FOR POST\n         MVC   MYTCB,4(R2)         SAVE THE TCB ADDRESS FOR STIMER\n         L     R2,CVTASVT          POINT AT ASVT\n         USING ASVT,R2\n         C     R1,ASVTMAXU         IS ASID TOO BIG\n         BH    ERROR               YES\n         SLL   R1,2                ASID*4\n         LA    R1,ASVTENTY-4(R1)   POINT AT DESIRED ENTRY\n         MVC   TOASCB,0(R1)        MOVE THE ASCB ADDR IF ANY\n         TM    TOASCB,ASVTAVAL     IS THIS ASCB ADDR OR AVAILABLE\n         BO    ERROR               ASID DOES NOT EXIST\n         DROP  R2,R3\n         L     R2,TOASCB           POINT AT ASCB\n         USING ASCB,R2\n         TM    ASCBRCTF,ASCBOUT    IS ASCB SWAPPED OUT\n         BO    SWAPOUT\n         CLC   MYASCB,TOASCB       IS THE ASCB THE MS\n         BE    DOSUBR              IF SO THEN USE SUBROUTINE\n*-------------------------------------------------------------*    @TEC\n*   NOW INITIALIZE THE SRB                                    *    @TEC\n*-------------------------------------------------------------*    @TEC\n         LA    R3,SRBAREA          POINT AT THE SRB\n         USING SRBSECT,R3\n         XC    SRBAREA,SRBAREA     CLEAR THE SRB\n         MVC   SRBID,=C'SRB '      SET EBCDIC ID\n         MVC   SRBASCB,TOASCB      SET ASCB ADDR TO RUN IN\n         LA    R1,D#SRBCD          POINT AT SRB CODE\n         ST    R1,SRBEP            SAVE ENTRY POINT\n         ST    R13,SRBPARM         SAVE PARM ADDR AS WORK AREA\n         LA    R1,D#RMTR           SET ADDR OF RESOURCE MGR TERMINATION\n         ST    R1,SRBRMTR          AND SAVE IT\n         MVC   SRBPASID,ASID       SET ASID OF DESIRED ASCB\n         DROP  R3\n*-------------------------------------------------------------*    @TEC\n*   SCHEDULE SRB AND AWAIT COMPLETION                         *    @TEC\n*-------------------------------------------------------------*    @TEC\n         XC    ECB,ECB             CLEAR DONE ECB\n         XC    ECB2,ECB2           CLEAR STIMER ECB\n         LA    R1,ECB              NOW SETUP THE ECBLIST\n         ST    R1,ECBLIST\n         LA    R1,ECB2\n         ST    R1,ECBLIST+4\n         MVI   ECBLIST+4,X'80'     AXC\n         L     R2,MYTCB            POINT AT TCB\n         L     R2,0(0,R2)          POINT AT RB\n         USING RBBASIC,R2\n         ST    R1,RBEXSAVE+16      SAVE ECB2 ADDR IN RBXSA\n         DROP  R2\n         STIMER  REAL,D#STX,BINTVL==A(60*100)  WAIT 1 MINUTE\n         SCHEDULE  SRB=(R3),SCOPE=GLOBAL\n         WAIT  ECBLIST=ECBLIST\n         TTIMER  CANCEL            CANCEL THE TIMER IF STILL EXISTS\n         B     GOTBACK             GO AND CHECK COMPLETION\n*-------------------------------------------------------------*    @TEC\n*   USE THE SRB CODE AS A SUBROUTINE                          *    @TEC\n*-------------------------------------------------------------*    @TEC\nDOSUBR   OI    FLAG1,FG1SUBR       SET FLAG FOR SUBROUTINE\n         LA    R1,DMYPRMS          SETUP DUMMY FRR PARMS\n         ST    R1,FRRPRMS\n         XC    DMYPRMS,DMYPRMS\n         LR    R1,R13              SET UP PARM REGISTER\n         LA    R15,D#SRBCD         SET ENTRY POINT ADDR\n         LA    R14,GOTBACK         SET RETURN ADDRESS\n         BR    R15                 GO DO IT\n*-------------------------------------------------------------*    @TEC\n*   THIS IS THE STIMER EXIT.  ITS  PURPOSE IS TO POST THE ECB *    @TEC\n*   AT ECB2 AND WAKE UP COMM TASK IF THE SRB FAILS TO DO THIS *    @TEC\n*   WE MUST FIND THE ADDRESS OF THE ECB WHICH IS SAVED IN THE *    @TEC\n*   XSA AREA OF THE SVRB IN COMM TASK                         *    @TEC\n*-------------------------------------------------------------*    @TEC\n         USING *,R12\nD#STX    SAVE  (14,12)\n         LR    R12,R15             SET BAE REGISTER\n         L     R3,CVTPTR\n         L     R3,0(R3)            POINT AT TCB WORDS\n         L     R3,0(R3)            POINT AT MY TCB\n         L     R3,0(R3)            POINT AT MY RB\n         USING RBBASIC-4,R3\nD#STX1   SL    R3,=F'4'            POINT BACK TO LOOK AT INTC\n         CLI   3(R3),X'01'         LOOK FOR WAIT SVC\n         BE    D#STX2              IF FOUND THEN EXIT\n         TM    XSTAB2,RBTCBNXT     TEST TCB FLAG\n         BO    D#STX3              IF NOT FOUND PROPER RB\n         L     R3,RBLINK           POINT AT PREVIOUS RB\n         B     D#STX1              TRY AGAIN\nD#STX2   L     R2,RBEXSAVE+16      GET ADDR OF ECB\n         POST  (R2)                POST THE TIMER ECB\n         RETURN  (14,12)\n         DROP  R12,R3\n*-------------------------------------------------------------*    @TEC\n*   IF WE CAN NOT FIND THE RB THEN DUMP                       *    @TEC\n*-------------------------------------------------------------*    @TEC\nD#STX3   DC    H'0'\n         USING IEESD03D,R12\n         TITLE 'XA1SD03D  D COMMAND  --  PERFORM THE DUMP FUNCTION'\n*-------------------------------------------------------------*    @TEC\n*   WE HAVE  RETURNED  FOR  THE  SRB  FUNCTION  NOW CHECK THE *    @TEC\n*   RESULTS AND IF GOOD THEN DUMP THE PROPER PART OF MEMORY   *    @TEC\n*-------------------------------------------------------------*    @TEC\nGOTBACK  TM    FLAG1,FG1SUBR       ARE WE IN SUBROUTINE MOVE\n         BO    GOTBK2              IF SO THEN SKIP SOME TESTS\n         TM    FLAG1,FG1SRDN       HAS THE SRB COMPLETED\n         BZ    SRBFAIL             IF NOT THEN TIMER CAUGHT IT\n         TM    FLAG2,FG2PSTR       DID XMPOST HAVE ERROR\n         BO    XMPTERR             IF SO THEN MESSGAE\n         TM    FLAG2,FG2PURG       WAS SRB PURGED\n         BO    SRBPGERR            IF SO THEN TELL ABOUT IT\n         TM    FLAG2,FG2ERRR       TEST FOR BAD ERROR\n         BO    DISTERR             GIVE MESSAGE\nGOTBK2   TM    FLAG2,FG2NVER       DID VER FAIL\n         BO    NOTVER              IF SO THEN ISSUE MESSAGE\n         TM    FLAG2,FG2IVLD       WAS ADDR INVALID\n         BO    STAEMG\n*-------------------------------------------------------------*    @TEC\n*   NOW DUMP THE CORE SAVED  IN ALTVER FOR 'LENGTH' WHICH WAS *    @TEC\n*   FROM 'ADDR'                                               *    @TEC\n*-------------------------------------------------------------*    @TEC\nFORMAT   L     R4,PLINES           LOAD PRINT LINES\n         LA    R5,ALTVER           POINT AT DATA TO DUMP\nFORMAT1  LA    R6,PRINT            PRINT AREA ADDR\n         UNPK  0(9,R6),ADDR(5)     UNPACK ADDR\n         MVC   8(1,R6),=CL4' '     BLANK 1 BYTE\n         NC    0(8,R6),=8X'0F'     TRANSLATE TO PRINT\n         TR    0(8,R6),=C'0123456789ABCDEF'\n         MVI   45(R6),C'*'         START OF EBCDIC DATA\n         MVC   46(16,R6),0(R5)     EBCDIC DATA\n         TR    46(16,R6),EBCDICTB  TRANSLATE OUT UNPRINTABLES\n         MVI   46+16(R6),C'*'      END OF EBCDIC DATA\n         LA    R6,9(0,R6)          INCR INTO PRINT AREA\n         LA    R7,4                NO. OF FULLWORDS PER LINE\nFORMAT2  UNPK  0(9,R6),0(5,R5)     UNPACK DATA\n         MVC   8(1,R6),=CL4' '     BLANK 1 BYTE                   NERDC\n         NC    0(8,R6),=8X'0F'     TRANSLATE TO PRINT\n         TR    0(8,R6),=C'0123456789ABCDEF'\n         LA    R6,9(0,R6)          INCR INTO PRINT AREA           NERDC\n         LA    R5,4(0,R5)          INCR INTO DATA\n         BCT   R7,FORMAT2          GO FORMAT\n         L     R2,XSASAVE          POINT AT XSA\n         USING XSA,R2\n         MVC   WTOLIST(4),=X'00430100'  FILL IN WTO LIST          NERDC\n         LA    R1,WTOLIST          LOAD WTOLIST ADDR\n         SR    R0,R0\n         IC    R0,XAU              MCS ID\nTSTSVC35 EQU   *\n         SVC   35                  ISSUE WTO\n         DROP  R2\n         L     R1,ADDR             UPDATE ADDRESS OF DATA\n         A     R1,=F'16'\n         ST    R1,ADDR\n         BCT   R4,FORMAT1          NEXT LINE\n         B     RETURN              EXIT\nEBCDICTB DC    C'                                '  TRANSLATE     NERDC\n         DC    C'                                '  TABLE         NERDC\n         DC    C'           .<(+|&&          $*);\u00ac'  USED TO\n         DC    C'-/         ,%_>?          :#@''=\"'  TRANSLATE\n         DC    C' ABCDEFGHI       JKLMNOPQR      '  ALL           NERDC\n         DC    C'  STUVWXYZ      0123456789      '  ILLEGAL       NERDC\n         DC    C' ABCDEFGHI       JKLMNOPQR      '  CHARACTERS    NERDC\n         DC    C'  STUVWXYZ      0123456789      '  TO BLANKS     NERDC\n         TITLE 'XA1SD03D  D COMMAND  --  SVC CHANGE FUNCTION'\nSVCLOOP  L     R4,16               CVT ADDR\n         L     R4,200(0,R4)        SCVT ADDR\n         L     R4,132(0,R4)        SVCTABLE ADDR\n         LA    R4,860(0,R4)        SVC 107 FLAGS\n         CLI   1(R3),C'A'          SET AUTH\n         BNE   SVCLOOP1            NO, SET NOT AUTH\n         OI    0(R4),X'08'         SET NOT APF AUTH\n         LA    R1,SVCMSG1\n         B     MSGRTN\nSVCLOOP1 NI    0(R4),X'F7'         SET NOT APF AUTH\n         LA    R1,SVCMSG2\n         B     MSGRTN\n         TITLE 'XA1SD03D  D COMMAND  --  UCB LOCATE FUNCTION'\nUCBLOOP  L     R4,CVTPTR           CVT ADDR\n         L     R4,CVTUCBSC-CVTMAP(R4)  LOOKUP ROUTINE ADDRESS\n         XC    WKAREA(100),WKAREA  CLEAR WORK AREA\n         LA    R1,WKAREA           SETUP PARAMETER LIST\n         ST    R1,PLIST\n         LA    R1,=X'00'           SPECIFY ALL DEVICES\n         ST    R1,PLIST+4\n         LA    R1,ADDR             WORD TO PUT ADDRESS OF UCB\n         ST    R1,PLIST+8\n         OI    PLIST+8,X'80'       31 BIT PARM END SET\nUCBLOOP1 LA    R1,PLIST            POINT AT PARM LIST\n         LR    R15,R4              GET MODULE ADDRESS\n         BALR  R14,R15             CALL MVS\n         LTR   R15,R15             ANY ERROR\n         BNZ   UCBFND              IF ANY THEN USE LAST ADDRESS\n         L     R5,ADDR             GET ADDR OF UCB\n         CLC   1(3,R3),13(R5)      UNIT MATCH\n         BNE   UCBLOOP1            YES, UCB FOUND\nUCBFND   ST    R5,ADDR             SAVE ADDR TO DUMP AT\n         OI    FLAG1,FG1DUMP       SET TO DUMP CORE\n         B     DOFUNC              DUMP CORE USING SUBROUTINE\n*                             BECAUSE ASID IS ZERO\n         TITLE 'XA1SD03D  D COMMAND  --  CHARACTER TO HEX CONVERTOR'\n*-------------------------------------------------------------*    @TEC\n*        INPUT                                                *    @TEC\n*              R4 = MAX NUM OF CHARS TO CONVERT               *    @TEC\n*                   IF =0 THEN MUST BE 8 CHARACTERS           *    @TEC\n*-------------------------------------------------------------*    @TEC\nPARMCVT  XR    R0,R0\n         LR    R1,R0               CLEAR SOME REGISTERS\n         LR    R5,R4               SAVE DESIRED LENGTH IN R5\n         LTR   R4,R4               IS IT ZERO (FLAG TO FORCE TO 8 ONLY)\n         BNZ   PARMCVT0            NOPE. SO SKIP\n         LA    R4,8                SET TO PROPER DATA\nPARMCVT0 CLI   0(R3),C','          CHECK FOR DELIMITERS\n         BE    PARMCVTD            IF ANY DELIMITER IS FOUND\n         CLI   0(R3),C' '          THEN WE AREA DONE\n         BE    PARMCVTD\n         CLI   0(R3),C'/'\n         BE    PARMCVTD\n         CLI   0(R3),C'A'          NOW CHECK FOR HEX CHARACTERS\n         BL    ERROR               AND IF INVALID THEN FLAG AS ERROR\n         CLI   0(R3),C'F'\n         BH    PARMCVT1            NOW TRY NUMBERICS\n         NI    0(R3),X'0F'         TURN OFF ZONE\n         IC    R0,0(R3)            GET THE CHARACTER\n         AH    R0,=H'9'            AND ADJUST TO PROPER VALUE\n         B     PARMCVT2\nPARMCVT1 CLI   0(R3),C'0'          NOW SEE IF NUMERIC\n         BL    ERROR               IF NOT THEN ERROR\n         CLI   0(R3),C'9'          AND TRY HIGH VALUE\n         BH    ERROR\n         NI    0(R3),X'0F'         TURN OFF ZONE\n         IC    R0,0(R3)            GET DIGIT\nPARMCVT2 SLL   R1,4                CLEAR AREA\n         OR    R1,R0               PUT IN NEW DIGIT\n         LA    R3,1(R3)            POINT PAST\n         BCT   R4,PARMCVT0         TRY AGAIN TILL EMPTY\n         BR    R11                 ALL DONE. EXPECTED NUMBER OF CHARS\nPARMCVTD DS    0H                  HEX NUMBER TERMINATED BEFORE FULL\n         LTR   R5,R5               WAS A FULL WORD DESIRED\n         BNZR  R11                 OUT IF NOT\n         B     ERROR               FORCE FULLWORD TO BE PRESENT\n         TITLE 'XA1SD03D  D COMMAND  --  SET SWAP ROUTINE'\nSETSWAP  SR    R9,R9               SET UP FOR EXECUTE\n         MVC   WTOLIST+4(44),SWAPRMSG\n         MVC   WTOLIST+32(13),=CL13'SWAPPABLE'\n         B     SETSWAP2\nSETSWAP1 LA    R9,128              SET UP FOR EXECUTE\n         MVC   WTOLIST+4(44),SWAPRMSG\n         MVC   WTOLIST+32(13),=CL13'NON-SWAPPABLE'\nSETSWAP2 CLI   6(R3),C','          IS SYNTAX CORRECT\n         BNE   ERROR               GIVE ERROR IF NOT\n         LA    R3,7(0,R3)          POINT TO ASID\n         LA    R4,4                SET MAX LENGTH\n         BAL   R11,PARMCVT         CONVERT HEX NUMBER\n         STH   R1,ASID             SAVE THE TARGET ASID\n         LR    R5,R1               LOAD ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         LA    R4,524(R5,R4)       ASCB SLOT ADDR\n         L     R5,0(0,R4)          ASCB ADDR\n         L     R4,172(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO\n         BNZ   *+14                NO\n         L     R4,176(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO\n         BZ    *+10                YES\n         MVC   WTOLIST+9(8),0(R4)  JOBNAME\n         L     R5,144(0,R5)        LOAD OUCB ADDR\n         C     R9,=F'256'          IS SWAP SWITCH ON?\n         BE    SETSWAP7            YES, GO SWAP IT\n         NI    17(R5),X'7F'        SET SWAPPABLE\n         EX    R9,SETSWAPX         SET NON-SWAPPABLE OR LEAVE SWAPPABLE\nSETSWAP4 DS    0H\n         LA    R1,WTOLIST\n         MVC   WTOLIST(4),=X'00300100'\n         B     MSGRTN\nSETSWAP6 DS    0H\n         LA    R9,256              SET SWAP IN/OUT SWITCH ON\n         MVC   WTOLIST+4(44),SWAPRMSG\n         B     SETSWAP2            GO BACK TO COMMON RTN\nSETSWAP7 DS    0H\n*        MODESET KEY=ZERO              PREPARE FOR SYSEVENT\n         USING OUCB,R5\n         TM    OUCBSFL,OUCBNSW     IS THIS GUY SWAPPABLE?\n         BNO   SETSWAP8            YES,CONTINUE\n         MVC   WTOLIST+19(29),DOSWAP1  NO, SAY SO\n         B     SETSWAPA            GET OUT AFTER RESET\nSETSWAP8 DS    0H\n         CLC   OUCBNPG,SWAPPG      IS THIS GUY ALREADY OUT?\n         BE    SETSWAP9            YES, BRING HIM IN\n         SLR   R1,R1               NO, CLEAR REG 1\n         ICM   R1,B'0011',SWAPPG   SET PG TO PERM SWAP OUT\n         SYSEVENT  RESETPG,ASIDL=ASID\n         N     R1,=X'0000FF00'     IF THE SYSEVENT FAILED\n         BNZ   SETSWAPE            TELL THE OPERATOR\n         MVC   WTOLIST+19(29),DOSWAP2  OTHERWISE TELL HIM WHAT\n         B     SETSWAPA            YOU DID AND GET OUT\nSETSWAP9 DS    0H\n         SLR   R1,R1               NO, CLEAR REG 1\n         ICM   R1,B'0011',OUCBSPG  SET PG TO PERM SWAP OUT\n         SYSEVENT  RESETPG,ASIDL=ASID\n         N     R1,=X'0000FF00'     IF THE SYSEVENT FAILED\n         BNZ   SETSWAPE            TELL THE OPERATOR\n         MVC   WTOLIST+19(29),DOSWAP3  OTHERWISE TELL HIM WHAT\nSETSWAPA DS    0H\n*        MODESET KEY=NZERO             RESET TO OLD KEY\n         B     SETSWAP4            YOU DID AND GET OUT\nSETSWAPE DS    0H\n         MVC   WTOLIST+19(29),DOSWAP4  TELL THE OPERATOR THE SWAP\n         B     SETSWAPA            FAILED, AND GET OUT\n         DROP  R5\nSETSWAPX OI    17(R5),X'00'        EXECUTED OI FOR SWAP/NOSWAP\n         TITLE 'XA1SD03D  D COMMAND  --  SET CANC ROUTINE'\nSETCANC  LA    R9,8                SET UP FOR EXECUTE\n         MVC   WTOLIST+4(44),SWAPRMSG\n         MVC   WTOLIST+32(14),=CL14'CANCELABLE'\n         B     SETCANC2\nSETCANC1 SR    R9,R9               SET UP FOR EXECUTE\n         MVC   WTOLIST+4(44),SWAPRMSG\n         MVC   WTOLIST+32(14),=CL14'NON-CANCELABLE'\nSETCANC2 CLI   6(R3),C','          IS SYNTAX CORRECT\n         BNE   ERROR               GIVE ERROR IF NOT\n         LA    R3,7(0,R3)          POINT TO ASID\n         LA    R4,4                SET MAX LENGTH\n         BAL   R11,PARMCVT         CONVERT HEX NUMBER\n         STH   R1,ASID             SAVE THE TARGET ASID\n         LR    R5,R1               LOAD ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         LA    R4,524(R5,R4)       ASCB SLOT ADDR\n         L     R5,0(0,R4)          ASCB ADDR\n*-------------------------------------------------------------*    @TEC\n*   THE CSCB ADDR IN  THE  ASCB  POINTS TO THE INITIATOR CSCB *    @TEC\n*   FOR  BATCH  JOBS.   THE  JOBNAME  POINTERS  IN  THE  ASCB *    @TEC\n*   (ASCBJBNI  X'AC')  AND  (ASCBJBNS  X'B0')  POINT  TO  THE *    @TEC\n*   APPROPRIATE JOB STEP  TASK  AT  CSCB+8 OR CSCB+X'10'.  IF *    @TEC\n*   POSSIBLE WE WILL USE  THE  JOBNAME  POINTER TO GET TO THE *    @TEC\n*   CORRECT CSCB.                                             *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R4,172(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO                             LMB\n*-------------------------------------------------------------*    @TEC\n*   IF NON ZERO THEN THIS IS A BATCH JOB.  THE ASCB+AC POINTS *    @TEC\n*   TO CSCB+8 FOR THE JOBNAME                                 *    @TEC\n*-------------------------------------------------------------*    @TEC\n         BZ    JOBNM2              GET 2ND JOBNAME POSITION         LMB\n         LA    R5,0(0,R4)          LOAD CSCB ADDR OF JOB (NOT INIT) LMB\n         AH    R5,=H'-8'           BACK UP 8 BYTES TO START OF CSCB LMB\n         B     SETCANMS            GO DO WTO                        LMB\nJOBNM2   L     R4,176(0,R5)        JOBNAME POINTER                  LMB\n         LTR   R4,R4               ZERO                             LMB\n         BZ    OTHRCSCB            GET CSCB DIRECTLY FORM THE ASCB  LMB\n         CLC   60(4,R5),=X'00000000'  IS THERE A TSB IN THE ASCB?   LMB\n         BNZ   JOBTSO              THERE'S A TSB, IT IS A TSO ASID  LMB\n*-------------------------------------------------------------*    @TEC\n*   NO TSB, SO IT IS  A  STARTED TASK.  THE ASCB+B0 POINTS TO *    @TEC\n*   CSCB+X'10' FOR THE JOBNAME.                               *    @TEC\n*-------------------------------------------------------------*    @TEC\n         LA    R5,0(0,R4)          LOAD CSCB ADDR OF TASK (NOT INIT)LMB\n         AH    R5,=H'-16'          BACK UP 16 BYTES TO START OF CSCBLMB\n         B     SETCANMS            GO DO WTO                        LMB\n*-------------------------------------------------------------*    @TEC\n*   A TSB, SO THIS  IS  A  TSO  ASID.   THE ASCB+B0 POINTS TO *    @TEC\n*   CSCB+8 FOR THE JOBNAME.                                   *    @TEC\n*-------------------------------------------------------------*    @TEC\nJOBTSO   LA    R5,0(0,R4)          LOAD CSCB ADDR OF TASK           LMB\n         AH    R5,=H'-8'           BACK UP 8 BYTES TO START OF CSCB LMB\n         B     SETCANMS            GO DO WTO                        LMB\nSETCANMS MVC   WTOLIST+9(8),0(R4)  JOBNAME\n         B     SETCANBT            GO SET BITS\nOTHRCSCB L     R5,56(0,R5)         ASCB-CSCB ADDR (MAY BE INITIATOR)LMB\nSETCANBT DS    0H\n         CLC   TSTSVC35(2),=X'0A23'  IS THIS TSO EXECUTION OF #D\n         BE    *+24                NO. SKIP AUTH.\n         LA    R0,1                                                @TEC\n         SVC   232                                                 @TEC\n         MODESET KEY=ZERO                                          @TEC\n         NI    7(R5),X'F7'         SET NON-CANCELABLE\n         EX    R9,SETCANCX         SET CANCELABLE OR LEAVE NON-CANC\n         CLC   TSTSVC35(2),=X'0A23'  IS THIS TSO EXECUTION OF #D\n         BE    *+22                NO. SKIP AUTH.\n         MODESET KEY=NZERO                                         @TEC\n         SR    R0,R0                                               @TEC\n         SVC   232                                                 @TEC\n         LA    R1,WTOLIST\n         MVC   WTOLIST(4),=X'00300100'\n         B     MSGRTN\nSETCANCX OI    7(R5),X'00'         EXECUTED OI FOR SWAP/NOSWAP\n         TITLE 'XA1SD03D  D COMMAND  --  EXIT ROUTINE'\nMEMTERM  LA    R3,5(0,R3)          POINT TO ASID\n         MVC   WTOLIST+4(44),EXITMSG\n         LA    R4,4                SET MAX LENGTH\n         BAL   R11,PARMCVT         CONVERT HEX NUMBER\n         STH   R1,ASID             SAVE THE TARGET ASID\n         LH    R8,ASID             SAVE THE TARGET ASID\n         LR    R5,R1               LOAD ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         LA    R4,524(R5,R4)       ASCB SLOT ADDR\n         L     R5,0(0,R4)          ASCB ADDR\n         L     R4,172(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO\n         BNZ   *+14                NO\n         L     R4,176(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO\n         BZ    *+10                YES\n         MVC   WTOLIST+9(8),0(R4)  JOBNAME\n         CALLRTM TYPE=MEMTERM,COMPCOD=3549,ASID=(R8)\n         LA    R1,WTOLIST\n         MVC   WTOLIST(4),=X'00300100'\n         B     MSGRTN\n         TITLE 'XA1SD03D  D COMMAND  --  CHAP ROUTINE'\nCHAP     LA    R3,5(0,R3)          POINT TO ASID\n         MVC   WTOLIST+4(44),CHAPMSG\n         MVC   WTOLIST+42(3),5(R3)  DPRTY\n         MVC   DOUBLE(3),=C'000'\n         MVZ   DOUBLE(3),5(R3)\n         CLC   DOUBLE(3),=C'000'\n         BNE   ERROR               NOT NUMERIC\n         PACK  DOUBLE(8),5(3,R3)\n         CVB   R8,DOUBLE\n         LA    R4,4                SET MAX LENGTH\n         BAL   R11,PARMCVT         CONVERT HEX NUMBER\n         STH   R1,ASID             SAVE THE TARGET ASID\n         LR    R5,R1               LOAD ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         LA    R4,524(R5,R4)       ASCB SLOT ADDR\n         L     R5,0(0,R4)          ASCB ADDR\n         L     R4,172(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO\n         BNZ   *+14                NO\n         L     R4,176(0,R5)        JOBNAME POINTER\n         LTR   R4,R4               ZERO\n         BZ    *+10                YES\n         MVC   WTOLIST+9(8),0(R4)  JOBNAME\n         CH    R8,=H'255'          MAX DPRTY\n         BH    ERROR               OVER, ERROR\n         STC   R8,43(0,R5)         SET NEW DPRTY IN ASCB\n         L     R5,144(0,R5)        OUCB ADDR\n         STC   R8,26(0,R5)         SET NEW DPRTY IN OUCB\n         LA    R1,WTOLIST\n         MVC   WTOLIST(4),=X'00300100'\n         B     MSGRTN\n         TITLE 'XA1SD03D  D COMMAND  --  ERROR ROUTINES'\n         USING *,R15\n         USING XSA,R2\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n*-------------------------------------------------------------*    @TEC\n*   THIS WILL RECORD ANY ABENDS  IN LOGREC WITH THE OPERANDS, *    @TEC\n*   REGISTERS, AND PSW IN IT.                                 *    @TEC\n*-------------------------------------------------------------*    @TEC\n         STM   R14,R12,12(R13)     SAVE REGISTER\n         LR    R14,R13             SAVE ORIG R13\n         L     R13,0(R1)           GET ESTAE PARM\n         L     R2,XSASAVE          GET XSA ADDRESS\n         LR    R13,R14             RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA\n*                                  AND EBCDIC\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA\n         B     ESTNOP              SKIP CONSTANTS\n         ESTMODS ,\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS\n         LA    R3,ESTMODS          POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,                   X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(IEESD03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\nSTAEMG   LA    R1,STAEMSG          ADDRESSING ERROR\nMSGRTN   L     R2,XSASAVE          RELOAD XSA ADDR\n         USING XSA,R2\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         DROP  R2\n         B     RETURN\nNOTVER   LA    R1,VERMSG           NOT VERIFIED\n         B     MSGRTN              GO ISSUE WTO\nERROR    LA    R1,ERRMSG           PARM ERROR\n         B     MSGRTN              GO ISSUE WTO\nNOPARM   LA    R1,MVSMSG           MVS\n         B     MSGRTN              GO ISSUE WTO\nUCBNFND  LA    R1,UCBNFMSG         UCB NOT FOUND\n         B     MSGRTN              GO ISSUE WTO\nSWAPOUT  LA    R1,SWAPMSG          ADDRESS SPACE SWAPPED OUT\n         B     MSGRTN\nDISTERR  LA    R1,DISTMSG          ERROR OCCURRED IN SRB MODE\n         B     MSGRTN\nSRBFAIL  DS    0H                  SRB FAILED TO POST SO DUMP\n         DC    H'0'\nXMPTERR  LA    R1,XMPTMSG          POINT AT MSG\n         B     MSGRTN\nSRBPGERR LA    R1,PURGMSG          SRB WAS PURGED BEFORE PROCESS\n         B     MSGRTN\nRETURN   EQU   *\n         ESTAE 0\n         L     R0,SIZE\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         LTORG\n         DS    0F\nSIZE     DC    AL1(241),AL3(WORKEND-WORKSTRT)\n         DS    0F\nSWAPPG   DC    XL2'0005'           AXC-CBT\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         DS    0F\nVERMSG   DC    X'00360100'\n         DC    CL50'DATA NOT VERIFIED'\n         DS    0F\nSVCMSG1  DC    X'00360100'\n         DC    CL50'REQUEST COMPLETE -   SET APFAUTH'\n         DS    0F\nSVCMSG2  DC    X'00360100'\n         DC    CL50'REQUEST COMPLETE -   SET NOAUTH'\n         DS    0F\nERRMSG   DC    X'00360100'\n         DC    CL50'PARAMETER ERROR'\n         DS    0F\nEXITMSG  DC    CL44'JOB  XXXXXXXX  TERMINATED BY CMD SUB-SYSTEM'\n         DS    0F\nCHAPMSG  DC    CL44'JOB  XXXXXXXX  HAS BEEN SET TO DPRTY= NNN'\n         DS    0F\nSWAPRMSG DC    CL44'JOB  XXXXXXXX  HAS BEEN SET '\n         DS    0F\nMVSMSG   DC    X'00360100'\n         DC    CL50'I AM THE ALL-POWERFUL WIZARD OF MVS, YOUR MASTER '\n         DS    0F\nUCBNFMSG DC    X'00360100'\n         DC    CL50'UNIT SPECIFIED NOT FOUND'\n         DS    0F\nSWAPMSG  DC    X'00360100'\n         DC    CL50'ADDRESS SPACE REQUESTED IS SWAPPED OUT'\n         DS    0F\nDISTMSG  DC    X'00360100'\n         DC    CL50'DISASTEROUS ERROR OCCURED IN SRB MODE'\n         DS    0F\nXMPTMSG  DC    X'00360100'\n         DC    CL50'CROSS-MEMORY POST FAILED'\n         DS    0F\nPURGMSG  DC    X'00360100'\n         DC    CL50'ADDRESS SPACE PURGING SRBS'\nDOSWAP1  DC    CL29'IS A NON-SWAPPABLE JOB       '\nDOSWAP2  DC    CL29'RESET TO PERMANENT SWAP OUT  '\nDOSWAP3  DC    CL29'RESET TO PREVIOUS VALUE      '\nDOSWAP4  DC    CL29'SWAP FAILED, RETRY COMMAND   '\n         DROP  R12,R13\n         TITLE 'XA1SD03D  D COMMAND  --  SRB MODE CODE'\nD#SRBCD  DS    0D\n*-------------------------------------------------------------*    @TEC\n*  THIS CODE PERFORMS THE FOLLOWING FUNCTIONS                 *    @TEC\n*      1 ESTABLISHES AN FRR FOR ERROR RECOVERY                *    @TEC\n*      2 VERIFIES THAT THE ADDRESSES THAT ARE NEEDED DO EXIST.*    @TEC\n*      3 PERFORM THE MODIFICATION IF ALLOW AND NECESSARY      *    @TEC\n*      4 SAVE THE PROPER CORE FOR DUMPING.                    *    @TEC\n*      5 CROSS-MEMORY POST THE MAIN COMMAND PROCESSOR         *    @TEC\n*-------------------------------------------------------------*    @TEC\n         USING WORK,R8\n         USING D#SRBCD,R7\n         LR    R8,R1               SET THE MAIN PARM DSECT\n         LR    R7,R15              SET THE BASE REGISTER\n         ST    R14,ASRBRTN         SAVE RETURN ADDR\n         TM    FLAG1,FG1SUBR       IS THIS A SUBROUTINE CALL\n         BO    D#SRB1              YES SO SKIP FRR\n         LA    R5,D#FRRCD          POINT AT FRR CODE\n         SETFRR  A,FRRAD=(R5),WRKREGS=(2,3),PARMAD=(R4)\n         ST    R4,FRRPRMS          SAVE ADDR OF FRRPRMS\n*-------------------------------------------------------------*    @TEC\n*   NOW INIT THE FRR PARM AREA AND VALIDATE THE INPUT ADDR    *    @TEC\n*-------------------------------------------------------------*    @TEC\nD#SRB1   L     R2,FRRPRMS          ACCESS THE 6 WORK PARM AREA\n         STM   R7,R8,0(R2)         SAVE BASE AND WORK REGS\n         MVI   0(R2),X'80'         SET VERIFICATION IN PROGRESS\n         L     R1,=A(X'80000000'+D#SRB1A)\n         BSM   0,R1                GO TO 31 BIT MODE\nD#SRB1A  DS    0H\n         L     R1,ADDR             POINT AT CORE TO TROUBLE\n         CLI   0(R1),0             ACCESS START OF AREA\n         L     R3,LENGTH\n         ALR   R3,R1               SUM THEN UP\n         BCTR  R3,0                AND BACK DOWN ONE\n         CLI   0(R3),0             DOES END EXIST ALSO\n         MVI   0(R2),0             SET VERIFICATION FLAG OFF\n         TM    FLAG1,FG1DUMP       IS IT DUMP REQUEST\n         BO    D#SRB3              GO SETUP DUMP\n         CLC   0(4,R1),ALTVER      DOES THE INPUT VERIFY\n         BE    D#SRB2              B IF YES\n         MVI   FLAG2,FG2NVER       SET NOT VERIFY\n         B     D#SRB3              GO AND DUMP IT\nD#SRB2   MVC   0(4,R1),ALTREP      DO MODIFICATION\n*-------------------------------------------------------------*    @TEC\n*   NOW ADJSUST THE ADDR OF DUMP                              *    @TEC\n*-------------------------------------------------------------*    @TEC\nD#SRB3   SRL   R1,4\n         SLL   R1,4                ADJUST ADDR SO IT IS ON BOUNDARY\n         ST    R1,ADDR             SAVE IT FOR PRINTING\n         L     R2,LENGTH           GET LENGTH TO DUMP\n         BCTR  R2,0\n         EX    R2,D#SRBMVC         MOVE THE DATA INTO WORK\n*-------------------------------------------------------------*    @TEC\n*   NOW WE TERMINATE PROCESSING BY  DOING A CROSS MEMORY POST *    @TEC\n*   IF NOT IN SUBROUTINE MODE                                 *    @TEC\n*-------------------------------------------------------------*    @TEC\nFRRRTY   LA    R1,FRRRTY1          GET ADDRESS WITH 24 BIT MODE\n         BSM   0,1                 GO TO THAT MODE\nFRRRTY1  DS    0H\n         TM    FLAG1,FG1SUBR       IS THIS SUBROUTINE MODE\n         BO    D#EXIT              IF SO THEN EXIT\n         SETFRR  D,WRKREGS=(2,3)\nFRRPOST  L     R10,=A(X'40000000')  SET CODE FOR POST\n         LR    R9,R8               SAVE WORK POINTER IN SAFE REG\n         LA    R11,ECB             ADDR OF ECB TO POST\n         ICM   R11,8,=X'80'        FLAG AS XMPOST\n         LA    R12,D#POSTR         SET POST ERROR RETURN\n         L     R13,MYASCB          ASCB TO POST\n         L     R15,CVTPTR          POINT AT CVT\n         L     R15,CVT0PT01-CVTMAP(R15)  GET POST ENTRY POINTR\n         BALR  R14,R15             GO DO POST\n         DROP  R7                  KILL MAIN ADDRESS\n         USING *,R14               SET TEMP BASE\nD#PRTN   LR    R8,R9               RESET BASE OF WORK\n         SL    R14,=A(D#PRTN-D#SRBCD)  NOW HAVE CORRECTED BASE\n         LR    R7,R14              SET TO PROPER REG\n         DROP  R14\n         USING D#SRBCD,R7          RESET MAIN BASE\n         OI    FLAG1,FG1SRDN       FLAG SRB AS COMPLETED\nD#EXIT   L     R14,ASRBRTN         RESTORE RETURN ADDR\n         BR    R14                 EXIT\nD#SRBMVC MVC   ALTVER(0),0(R1)     MOVE IN THE DATA TO DUMP\n*-------------------------------------------------------------*    @TEC\n*   POST ERROR ROUTINE ..  FLAG  ERROR  AND LET TIMER WAKE UP *    @TEC\n*   COMM TASK                                                 *    @TEC\n*-------------------------------------------------------------*    @TEC\nD#POSTR  LR    R8,R9               RESET WORK BASE\n         OI    FLAG2,FG2PSTR       FLAG POST ERROR\n         BR    R14                 RETURN TO D#PRTN\n         TITLE 'XA1SD03D  D COMMAND  --  FRR FOR THE SRB MODE'\nD#FRRCD  DS    0D\n         L     R2,0(R1)            POINT AT PARM AREA\n         LM    R7,R8,0(R2)         SET BASE REGS\n         TM    0(R2),X'80'         ARE WE IN VALIDATION\n         BZ    D#FRR1              NOPE\n*-------------------------------------------------------------*    @TEC\n*   VALIDATION ERROR                                          *    @TEC\n*-------------------------------------------------------------*    @TEC\n         OI    FLAG2,FG2IVLD       SET FLAG FOR MESSAGE\n         SETRP RECORD=NO,RC=4,RETADDR=FRRRTY,REGS,DUMP=NO,             X\n               RETREGS=YES,FRESDWA=YES\n         BR    R14                 EXIT\n*-------------------------------------------------------------*    @TEC\n*   ALL OTHER ERRORS                                          *    @TEC\n*-------------------------------------------------------------*    @TEC\nD#FRR1   OI    FLAG2,FG2ERRR       SET FLAG FOR MESSAGES\n         SETRP RECORD=YES,RC=4,RETADDR=FRRRTY,REGS,DUMP=YES,           X\n               RETREGS=YES,FRESDWA=YES\n         BR    R14                 EXIT\n         TITLE 'XA1SD03D  D COMMAND  --  RESOURCE MANAGER CLEANUP'\n*-------------------------------------------------------------*    @TEC\n*   THIS ROUTINE RECEIVES CONTROL IF  THE SRB MUST BE PURGED. *    @TEC\n*-------------------------------------------------------------*    @TEC\nD#RMTR   DS    0H\n         USING *,R15\n         LR    R7,R15              SET BASE REGISTER\n         SL    R7,=A(D#RMTR-D#SRBCD)  BY COMPUTATION\n         DROP  R15\n         USING D#SRBCD,R7\n         LR    R8,R2               SET UP POINTER TO WORK\n         ST    R14,ASRBRTN         SAVE RETURN ADDR\n         OI    FLAG2,FG2PURG       SET PURGED\n         B     FRRPOST             GO AND POST TO CLEAN UP\n         LTORG\n         TITLE 'XA1SD03D  D COMMAND  --  DSECTS'\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAASVT\n         IHAASCB\n         IHAFRRS\n         IHAPSA\n         IHASDWA\n         IHASRB\n         IHARB\n         IRAOUCB\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\n         DS    0D\nDOUBLE   DS    2F\nPLINES   DS    F\nPLIST    DS    3F\nXSASAVE  DS    F\nWTOLIST  DS    F\nPRINT    DS    63C\nPST      STAE  PST,CT,MF=L\nDMYPRMS  DS    6F                  DUMMY AREA FOR FRR PARMS FOR SUBR\n*                                  MODE\nFRRPRMS  DS    F                   ADDRESS OF 6 WORD FRR PARM\nASRBRTN  DS    F                   RETURN ADDR FOR SRB CODE\nMYASCB   DS    F                   ASCB ADDR OF MAIN ROUTINE\nMYTCB    DS    F                   TCB ADDRESS FOR MAIN ROUTINE\nTOASCB   DS    F                   ASCB ADDR OF SRB ROUTINE\nECB      DS    F                   ECB FOR MAIN ROUTINE TO WAIT ON\nECB2     DS    F                   ECB FOR STIMER TO POST\nECBLIST  DS    2F\nLENGTH   DS    F                   LENGTH OF STORAGE TO DUMP\nSRBAREA  DS    ((SRBSIZE+3)/4)F    THE SRB ITSELF\nADDR     DS    F                   ADDRESS TO PROCESS AT\nALTREP   DS    F                   REPLACEMENT VALUE\nALTVER   DS    F,252C              SPACE FOR VER DATA AND DUMP DATA\nASID     DS    H                   ASID OF TOASCB\nFLAG1    DS    X\nFG1DUMP  EQU   X'80'\nFG1REP   EQU   X'40'\nFG1SRDN  EQU   X'02'               IF ON SRB HAS TERMINATED\nFG1SUBR  EQU   X'01'\nFLAG2    DS    X\nFG2NVER  EQU   X'01'               VERIFICATION FAILED\nFG2IVLD  EQU   X'02'               VALIDATION FAILED\nFG2ERRR  EQU   X'04'               DISASTER OCCURED IN SRB\nFG2PURG  EQU   X'08'               SRB WAS PURGED\nFG2PSTR  EQU   X'10'               IF ON THEN SRB POST HAD ERROR\nESTAELST DS    0F,(ESTAEOVX)X\nWKAREA   DS    0D,XL100\nWORKEND  DS    0F\n         END\n./       ADD   NAME=CSCSE03D\n         TITLE 'IEESE03D -   #A  EXTENDED DISPLAY ACTIVE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SE2SE03D -       #A  EXTENDED DISPLAY ACTIVE              ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA 2.1.1                             ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        08/10/81  JCC-BCB TEST FOR END OF ASCBS  ***\n***                        02/07/84  JAL-SNET ADD 31-BIT CODING FOR ***\n***                                      XA.                        ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESE03D CSECT\nIEESE03D AMODE 24\nIEESE03D RMODE 24\n         SPLEVEL SET=2\n         LR    R12,R15\n         USING IEESE03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         MVC   PARM(10),=CL10' '\n         MVI   LISTIND,C'L'        SET LIST\n         MVI   SCANRET,C' '        SET FOUND\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         L     R3,XAL              LOAD LIST POINTER\n         LA    R3,0(0,R3)          CLEAR HIGH ORDER\n         LTR   R3,R3               PARM EXIST\n         BZ    STAE                NO, ALL\n         LR    R7,R3               SAVE PARM START\n         LA    R4,10               MAXLENGTH\nPARM1    CLI   0(R3),C' '          END OF PARM\n         BE    PARM2               YES, USE IT\n         LA    R3,1(0,R3)          INCR INTO PARM\n         BCT   R4,PARM1            CHECK NEXT BYTE\n         B     ERROR               PARM TOO LONG\n         SPACE\nPARM2    LA    R6,9                MAX LENGTH-1\n         SR    R6,R4               ACTUAL LENGTH\n         BNP   ERROR               ZERO LENGTH                     WJB\n         EX    R6,JOBMOVE          MOVE PARM INFO\n         SPACE 3\nSTAE     LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                     -JAL/XA-\n         BSM   0,R9                                           -JAL/XA-\nAMODE31  DC    A(CONT31+X'80000000')                          -JAL/XA-\nCONT31   DS    0H                                             -JAL/XA-\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         B     JOBSCAN\n         SPACE 3\nJOBMOVE  MVC   PARM(0),0(R7)       MOVE PARM INFO\nJOBSCAN  SR    R8,R8               CLEAR ASID\n         XC    SCANTYPE(2),SCANTYPE CLEAR TYPE IND\n         CLI   PARM,C'.'           JOBNAME REQUEST\n         BE    JOBOUT              YES, GO PROCESS\n         CLI   PARM,C' '           ALL REQUESTED\n         BE    JOBOUTX             SET UP ALL, NO LIST\n         TM    PARM+2,X'F0'        ONE JOB ONLY REQUEST\n         BO    JOBSCAN1            YES\n         CLC   PARM+2(2),=C',L'    LIST REQUESTED\n         BE    JOBSCAN0            YES, CONTINUE\n         MVI   LISTIND,C'D'        TURN OFF LIST\n         CLC   PARM+2(2),=C',D'    DISPATCH LIST REQUEST\n         BE    JOBSCAN0            NYES, CONTINUE\n         MVI   LISTIND,C' '        SHORT LIST\n         CLC   PARM+2(2),=C',S'    SHORT LIST REQUEST\n         BNE   JOBSCAN0            NO\n         MVI   LISTIND,C'S'        SHORT LIST\n         SPACE\nJOBSCAN0 MVI   SCANTYPE+1,X'04'    TSO USERS\n         CLI   PARM+1,C'T'         IS REQUEST FOR TSO USERS\n         BE    JOBOUT              YES, GO PROCESS\n         MVI   SCANTYPE+1,X'08'    JOBS\n         CLI   PARM+1,C'J'         IS REQUEST FOR JOBS\n         BE    JOBOUT              YES, GO PROCESS\n         MVI   SCANTYPE+1,X'0C'    STC\n         CLI   PARM+1,C'S'         IS REQUEST FOR STC\n         BE    JOBOUT              YES, GO PROCESS\n         MVI   SCANTYPE+1,X'10'    INITS\n         CLI   PARM+1,C'I'         IS REQUEST FOR INITS\n         BE    JOBOUT              YES, GO PROCESS\n         MVI   SCANTYPE+1,X'18'    ALL JOBS\n         CLI   PARM+1,C'A'         IS REQUEST FOR INITS\n         BE    JOBOUT              YES, GO PROCESS\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),PARM\n         CLC   DOUBLE(2),=C'00'    DOMAIN SPECIFIED\n         BNE   ERROR               NO, PARM ERROR\n         PACK  DOUBLE(8),PARM(2)\n         CVB   R1,DOUBLE\n         STC   R1,DOMAINTS         SAVE SCAN DOMAIN\n         MVI   SCANTYPE+1,X'14'    SET DOMAIN SCAN\n         B     JOBOUT\n         SPACE\nJOBSCAN1 LA    R4,PARM             ASID INPUT ADDR\n         LA    R5,4                LOAD NUMBER OF DIGITS\n         SPACE\nJOBSCAN2 LA    R9,9                SET ADD BYTE\n         CLI   0(R4),C'A'          VALID CHAR\n         BL    ERROR               NO, ERROR\n         CLI   0(R4),C'F'          VALID CHAR\n         BNH   JOBSCAN3            YES, GO USE\n         CLI   0(R4),C'0'          VALID CHAR\n         BL    ERROR               NO, ERROR\n         CLI   0(R4),C'9'          VALID CHAR\n         BH    ERROR               NO, ERROR\n         SR    R9,R9               CLEAR ADD BYTE\n         SPACE\nJOBSCAN3 IC    R7,0(0,R4)          INSERT ASID BYTE\n         SLL   R7,28               SHIFT OUT JUNK\n         SRL   R7,28               SHIFT BACK\n         AR    R9,R7               ADD TO CALC ACTUAL DIGIT\n         SLL   R9,28               SHIFT OVER DIGIT\n         SLDL  R8,4                SHIFT DIGIT INTO ACCUMULATOR\n         LA    R4,1(0,R4)          NEXT ASID BYTE\n         BCT   R5,JOBSCAN2         GET NEXT\n         B     JOBOUT\nJOBOUTX  MVI   LISTIND,C' '\n         SPACE\nJOBOUT   MVC   JOBMSG1,JOBLINE1\n         MVC   JOBMSG2,JOBLINE2\n         MVC   JOBMSG3,JOBLINE3\n         MVC   JOBMSG4,JOBLINE4\n         LR    R5,R8               LOAD ASID\n         LTR   R5,R5               ZERO ASID\n         BZ    *+6                 YES, BYPASS ADJUST\n         BCTR  R5,0                ADJUST ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         L     R6,516(0,R4)        MAX # ASIDS                   JCC\n         MH    R6,=H'4'            MULT BY LENGTH                JCC\n         LA    R6,528(R4,R6)       FIND END OF ASID LIST         JCC\n         ST    R6,ASVTEND          STORE THAT ADDR               JCC\n         LA    R4,524(R5,R4)       ASCB SLOT ADDR\n         B     JOBOUT4\n         SPACE\nJOBOUT1  L     R5,0(0,R4)          ASCB ADDR\n         L     R6,56(0,R5)         CSCB ADDR\n         L     R7,144(0,R5)        LOAD OUCB ADDR\n         LH    R9,SCANTYPE         LOAD INCR INTO TABLE\n         B     *+4(R9)             BR INTO TABLE\n         B     JOBOUT2             ALL TYPES\n         B     TSO                 TS USERS\n         B     JOB                 JOBS\n         B     STC                 STARTED TASKS\n         B     JOB                 INITS\n         B     DOM                 DOMAIN SCAN\n         B     JOBOUT2             ALL JOBS\n         SPACE\nJOBOUT2  BAL   R11,ASCBFORM        GO FORMAT ASCB INFO\n         UNPK  OUCB(7),145(4,R5)   OUCB ADDR\n         NC    OUCB(6),=8X'0F'\n         TR    OUCB(6),=C'0123456789ABCDEF'\n         MVI   OUCB+6,C')'\n         L     R6,144(0,R5)        OUCB ADDR\n         L     R5,56(0,R5)         CSCB ADDR\n         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO\n         BAL   R11,OUCBFORM        GO FORMAT OUCB INFO\n         CLI   PARM,C'.'           JOBNAME REQUEST\n         BNE   JOBOUT2A            NO, BYPASS MATCH\n         CLC   PARM+1(8),JOBNAME\n         BNE   JOBOUT3             NO MATCH, NO PRINT\nJOBOUT2A EQU   *\n         CLI   LISTIND,C'D'        DISPATCH LIST\n         BE    JOBOUT5             YES, 1 LINE ONLY\n         LA    R1,JOBMSG1          LOAD MSG1 ADDR\n         BAL   R11,MSGRTN          GO PRINT MSG\n         CLI   LISTIND,C'S'        SHORT LIST\n         BE    JOBOUT3             YES, 1 LINE ONLY\n         LA    R1,JOBMSG2          LOAD MSG2 ADDR\n         BAL   R11,MSGRTN          GO PRINT MSG\n         CLI   LISTIND,C' '        NO LIST REQUIRED\n         BE    JOBOUT3             YES, BYPASS MSG2\n         LA    R1,JOBMSG3\n         BAL   R11,MSGRTN\n         LA    R1,JOBMSG4\n         BAL   R11,MSGRTN\n         SPACE\nJOBOUT3  LTR   R8,R8               ONE JOB ONLY\n         BNZ   RETURN              YES, RETURN\n         SPACE\nJOBOUT4  LA    R4,4(0,R4)          INCR INTO ASVT\n         C     R4,ASVTEND          END OF ASVT                   JCC\n         BNL   RETURN              YES, RETURN                   JCC\n         TM    0(R4),X'80'         AVAILABLE ENTRY\n         BO    JOBOUT4             YES, CHECK NEXT\n         B     JOBOUT1             GO USE IT\n         SPACE 1\nJOBOUT5  MVC   JOBMSG1+28(12),=CL12'DISPATCHABLE'\n         L     R5,0(0,R4)          ASCB ADDR\n         TM    208(R5),X'80'       LSMQ BIT ON\n         BZ    *+10                NO, DISPATCHABLE\n         MVC   JOBMSG1+28(12),=CL12' '\n         LA    R1,JOBMSG1          LOAD MSG1 ADDR\n         BAL   R11,MSGRTN          GO PRINT MSG\n         B     JOBOUT3\nTSO      CLI   28(R6),X'01'        TSO USER\n         BE    JOBOUT2             YES, USE IT\n         B     JOBOUT4\n         SPACE 3\nJOB      CLI   28(R6),X'03'        JOB INIT\n         BE    JOBOUT2             YES, USE IT\n         B     JOBOUT4\n         SPACE 3\nSTC      CLI   28(R6),X'00'        MASTER/AUXTM\n         BE    JOBOUT2             YES, USE IT\n         CLI   28(R6),X'03'        JOB INIT\n         BE    JOBOUT4             YES, BYPASS\n         TM    18(R7),X'50'        START/MOUNT\n         BZ    JOBOUT4             NO, CHECK NEXT\n         B     JOBOUT2             YES, USE IT\n         SPACE 3\nDOM      CLC   DOMAINTS(1),40(R7)  DOMAIN MATCH     MVS/SE         WJB\n         BE    JOBOUT2             YES, USE IT\n         B     JOBOUT4\nASCBFORM LTR   R8,R8               ASID PRESENT\n         BZ    ASCBFRM1            NO, CONTINUE\n         SR    R14,R14             LOAD\n         IC    R14,36(0,R5)\n         SLL   R14,8                  ASID\n         IC    R14,37(0,R5)\n         CR    R14,R8              ASID MATCH\n         BNE   JOBOUT4             NO, NO PRINT\n         SPACE\nASCBFRM1 UNPK  DOUBLE(5),36(3,R5)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASID(4),DOUBLE      SET ASID IN MSG\n         SR    R9,R9\n         IC    R9,43(0,R5)         DPRTY TO MSG\n         CVD   R9,DOUBLE\n         UNPK  DPRTY(3),DOUBLE+6(2)\n         OI    DPRTY+2,X'F0'\n         LH    R1,122(0,R5)        NON-VAM SLOT COUNT\n         CVD   R1,DOUBLE\n         UNPK  NVAMSLOT(4),DOUBLE+5(3)\n         OI    NVAMSLOT+3,X'F0'\n         LH    R1,120(0,R5)        VAM SLOT COUNT\n         CVD   R1,DOUBLE\n         UNPK  VAMSLOT(5),DOUBLE+5(3)\n         OI    VAMSLOT+4,X'F0'\n         MVC   SRC-3(2),=C'QP'     SET QUE POSITION IND\n         LH    R1,38(0,R5)         DISP POSITION\n         CVD   R1,DOUBLE\n         UNPK  SRC(2),DOUBLE+6(2)\n         OI    SRC+1,X'F0'\n         BR    R11\nCSCBFORM CLI   28(R5),X'03'        INIT\n         BNE   CSCBFRM3            NO, GO HANDLE\n         CLI   PARM+1,C'S'         STC REQUEST\n         BE    JOBOUT4             YES, EXIT\n         LA    R9,0(0,R5)          SAVE CSCB ADDR\n         SR    R10,R10             INSERT\n         IC    R10,30(0,R5)\n         SLL   R10,8               ASID\n         IC    R10,31(0,R5)\n         SPACE\nCSCBFRM1 L     R5,0(0,R5)          NEXT CSCB\n         LA    R5,0(0,R5)          CLEAR HIGH ORDER\n         LTR   R5,R5               END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R5,R9               LOAD CSCB ADDR\n         B     CSCBFRM2            CONTINUE\n         CR    R5,R9               SAME CSCB\n         BE    CSCBFRM2            YES, USE IT\n         CH    R10,30(0,R5)        SAME ASID\n         BNE   CSCBFRM1            NO, CHECK NEXT\n         CLI   PARM+1,C'I'         REQUEST FOR INITS\n         BE    JOBOUT4             YES, BYPASS\n         B     CSCBFRM3\n         SPACE\nCSCBFRM2 CLI   PARM+1,C'I'         REQUEST FOR INITS\n         BNE   JOBOUT4             NO, BYPASS\n         SPACE\nCSCBFRM3 MVC   JOBNAME(8),8(R5)\n         CLC   ASID(4),=C'0001'\n         BCR   7,R11\n         MVC   JOBNAME(8),=CL8'MASTER'\n         BR    R11\nOUCBFORM LH    R9,82(0,R6)         SWAP IN SIZE         MVS/SE     WJB\n         CVD   R9,DOUBLE\n         UNPK  SWAPIN(3),DOUBLE+6(2)\n         OI    SWAPIN+2,X'F0'\n         LH    R9,80(0,R6)         SWAP OUT SIZE        MVS/SE     WJB\n         CVD   R9,DOUBLE\n         UNPK  SWAPOUT(3),DOUBLE+6(2)\n         OI    SWAPOUT+2,X'F0'\n         CLI   41(R6),X'00'        JOB ON IN QUEUE      MVS/SE     WJB\n         BE    OUCBFRM0            YES, NO SWAP REASON\n         MVC   SRC-3(2),=C'SR'     SET COMMENT TO SWAP REASON\n         UNPK  SRC(3),41(2,R6)     SWAP REASON         MVS/SE      WJB\n         NC    SRC(2),=8X'0F'\n         TR    SRC(2),=C'0123456789ABCDEF'\n         MVI   SRC+2,C')'\n         CLI   38(R6),X'7F'        MVS/SE LOGICAL SWAP\n         BNE   OUCBFRM0            NO\n         MVC   SRC(2),=C'LG'\n         SPACE 1\nOUCBFRM0 LH    R9,42(0,R6)         SWAP COUNT          MVS/SE      WJB\n         CVD   R9,DOUBLE\n         UNPK  SWP(4),DOUBLE+5(3)\n         OI    SWP+3,X'F0'\n         LA    R9,16(0,R6)         OUCB FLAGS BEGIN\n         LA    R10,QFL             OUTPUT FLAGS BEGIN\n         LA    R7,6                NUMBER OF FLAG BYTES\n         SPACE\nOUCBFRM1 UNPK  0(3,R10),0(2,R9)    UNPACK A FLAG BYTE\n         NC    0(2,R10),=4X'0F'\n         TR    0(2,R10),=C'0123456789ABCDEF'\n         MVI   2(R10),C')'            AND TRANSLATE IT\n         LA    R9,1(0,R9)          NEXT FLAG BYTE\n         LA    R10,6(0,R10)        NEXT OUTPUT AREA\n         BCT   R7,OUCBFRM1         GET NEXT\n         UNPK  0(3,R10),1(2,R9)    LAST FLAG BYTE\n         NC    0(2,R10),=4X'0F'\n         TR    0(2,R10),=C'0123456789ABCDEF'\n         MVI   2(R10),C')'\nOUCBFRM2 UNPK  ASCB(7),45(4,R6)    ASCB ADDR         MVS/SE        WJB\n         NC    ASCB(6),=8X'0F'\n         TR    ASCB(6),=C'0123456789ABCDEF'\n         MVI   ASCB+6,C')'\n         UNPK  DOMAIN(3),40(2,R6)  DOMAIN NUMBER     MVS/SE        WJB\n         NC    DOMAIN(2),=8X'0F'\n         TR    DOMAIN(2),=C'0123456789ABCDEF'\n         MVI   DOMAIN+2,C')'\n         UNPK  NPG(3),185(2,R6)    NEW PERFORM NUMBER\n         NC    NPG(2),=8X'0F'\n         TR    NPG(2),=C'0123456789ABCDEF'\n         MVI   NPG+2,C'/'\n         UNPK  RPG(3),181(2,R6)    RESET PERFORM NUMBER\n         NC    RPG(2),=8X'0F'\n         TR    RPG(2),=C'0123456789ABCDEF'\n         MVI   RPG+2,C'/'\n         UNPK  SPG(3),183(2,R6)    SPECIFIED PERFORM NUMBER\n         NC    SPG(2),=8X'0F'\n         TR    SPG(2),=C'0123456789ABCDEF'\n         MVI   SPG+2,C')'\n         UNPK  NDP(3),26(2,R6)     NEW DPRTY\n         NC    NDP(2),=8X'0F'\n         TR    NDP(2),=C'0123456789ABCDEF'\n         MVI   NDP+2,C'/'\n         UNPK  RDP(3),27(2,R6)     REAL DPRTY\n         NC    RDP(2),=8X'0F'\n         TR    RDP(2),=C'0123456789ABCDEF'\n         MVI   RDP+2,C')'\n         BR    R11\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESE03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\nMSGRTN   MVI   SCANRET,C'P'\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         BR    R11\n         SPACE 3\nERROR    LA    R11,RETURN          LOAD RET ADDR\n         LA    R1,ERRMSG           PARM ERROR\n         B     MSGRTN              GO ISSUE WTO\n         SPACE 3\nRETURN   CLI   SCANRET,C' '        ANY FOUND\n         BE    NOTFOUND            NO, TELL OPERATOR\n         ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R8,AMODE24                                     -JAL/XA-\n         BSM   0,R8                                           -JAL/XA-\nAMODE24  DS    0H                                             -JAL/XA-\n         SR    R15,R15\n         BR    R14\n         SPACE 3\nNOTFOUND LA    R11,RETURN\n         LA    R1,NFNDMSG\n         B     MSGRTN\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\n         DS    0F\nERRMSG   DC    X'00360100'\n         DC    CL50'PARAMETER ERROR'\n         SPACE 3\n         DS    0F\nNFNDMSG  DC    X'00360100'\n         DC    CL50'REQUESTED TYPE OR ASID NOT FOUND'\n         DS    0F\nJOBLINE1 DC    X'00320100'\n         DC    CL9' '\n         DC    C'(    ) '\n         DC    C'DP(   ) '\n         DC    C'SWL(   /   ) '\n         DC    C'SWC(    )'\n         SPACE 3\n         DS    0F\nJOBLINE2 DC    X'00320100'\n         DC    CL4' '\n         DC    C'PERF-NRS(  /  /  ) '\n         DC    C'DPRTY-NR(  /  ) '\n         DC    C'DMN(  )'\n         SPACE 3\n         DS    0F\nJOBLINE3 DC    X'00320100'\n         DC    CL4' '\n         DC    C'Q(  ) S(  ) Y(  ) A(  ) '\n         DC    C'T(  ) E(  ) U(  ) '\n         SPACE 3\n         DS    0F\nJOBLINE4 DC    X'00320100'\n         DC    CL4' '\n         DC    C'AS(      ) QP(  ) '\n         DC    C'OU(      ) A(    /     )'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nASVTEND  DS    F                                                 JCC\nPARM     DS    3F\nSCANTYPE DS    H\nLISTIND  DS    C\nDOMAINTS DS    C\nSCANRET  DS    C\n         DS    0F\nJOBMSG1  DS    0CL50\n         DS    F\nJOBNAME  DS    CL10\nASID     DS    CL9\nDPRTY    DS    CL9\nSWAPIN   DS    CL4\nSWAPOUT  DS    CL9\nSWP      DS    CL5\n         SPACE 3\n         DS    0F\nJOBMSG2  DS    0CL50\n         DS    F\n         DS    CL13\nNPG      DS    CL3\nRPG      DS    CL3\nSPG      DS    CL13\nNDP      DS    CL3\nRDP      DS    CL8\nDOMAIN   DS    CL3\n         SPACE 3\n         DS    0F\nJOBMSG3  DS    0CL50\n         DS    F\n         DS    CL6\nQFL      DS    CL6\nSFL      DS    CL6\nYFL      DS    CL6\nAFL      DS    CL6\nTFL      DS    CL6\nEFL      DS    CL6\nUFL      DS    CL4\n         SPACE 3\n         DS    0F\nJOBMSG4  DS    0CL50\n         DS    F\n         DS    CL7\nASCB     DS    CL11\nSRC      DS    CL7\nOUCB     DS    CL10\nNVAMSLOT DS    CL5\nVAMSLOT  DS    CL6\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSF03D\n         TITLE 'XA1SF03D -   #F  DISPLAY STORAGE USAGE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SE2SF03D -       #F  DISPLAY STORAGE USAGE                ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA  2.1    TO                        ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                        05/25/86  GLA-BFG COMPLETE REWRITE FOR   ***\n***                                  XA STRUCTURE                   ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESF03D CSECT\n         LR    R12,R15\n         USING IEESF03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         XC    OUTMSLIM(4),OUTMSLIM\n         MVI   VOSWIT,X'00'        CLEAR OFFLINE SWITCH\n         MVI   VBSWIT,X'00'        CLEAR BAD FRAME SWITCH\n         MVI   OUTMSG+4,C' '\n         MVC   OUTMSG+5(65),OUTMSG+4\n         XC    OUTMSG+70(4),OUTMSG+70  CLEAR FLAGS\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R15,=A(X'80000000'+ESTAEBYP)\n         BSM   0,R15               CHANGE MODES   TO 31 BIT\nESTAEOVL ESTAE STAEXIT,CT,MF=L     * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL          * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD LIST POINTER\n         LA    R3,0(0,R3)          CLEAR HIGH ORDER\n         LTR   R3,R3               PARM EXIST\n         BZ    PFTLIST             NO, GO PROCESS PFT LIST\n         CLI   0(R3),C'C'          CSA DISPLAY REQUEST\n         BE    VCDISP              YES, GO PROCESS\n         CLI   0(R3),C'B'          BAD FRAME REQUEST\n         BE    VBDISP              YES, GO PROCESS\n         CLI   0(R3),C'R'          V=R DISPLAY REQUEST\n         BE    VRDISP              YES, GO PROCESS\n         CLI   0(R3),C'M'          MEGABYTE DISPLAY REQUEST\n         BE    VVDISP              YES, GO PROCESS\n         CLI   0(R3),C'O'          OFFLINE INTERCEPT REQUEST\n         BE    VODISP              YES, GO PROCESS\n         LA    R11,RETURN          LOAD RET ADDR\n         LA    R1,ERRMSG           PARM ERROR\n         B     PRINT               GO ISSUE WTO\nPFTLIST  MVC   OUTMSG(4),=X'00460100'\n         L     R14,16              LOAD CVT ADDR\n         L     R6,556(0,R14)       LOAD ASVT ADDR\n         L     R7,516(0,R6)        MAX NO. OF ASCBS\n         LA    R6,524(0,R6)        1ST ASCB SLOT\n         L     R3,356(0,R14)       LOAD PVT ADDR\n         L     R14,8(R3)           GET ADDR OR AREA IN RIT\n         L     R4,0(0,R14)         GET ADDR OF FIRST REAL PFTE\n         L     R5,4(0,R14)         GET ADDR OF LAST REAL PFTE\n         SR    R5,R4               GET DIFFERENCE\n         SRL   R5,5                GET # ENTRIES\n         LA    R5,1(0,R5)          ADD IN LAST ONE\n         STM   R4,R5,PFTREGS       SAVE REGS OF PFT\n*\n**       GET TOTAL FRAMES\n*\n         LR    R14,R5              PUT IN PROPER AREA\n         MVC   OUTMSG+4(12),=CL12'TOTAL'\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       GET NUCLEUS FRAMES\n**          = GDAESQA - (GDASQA + GDASQASZ)\n*\n         L     R14,16              LOAD CVT ADDR\n         L     R4,560(0,R14)       GET GDA ADDRESS\n         L     R14,152(0,R4)       GET GDAESQA\n         L     R15,144(0,R4)       GET GDASQA\n         A     R15,148(0,R4)       GDASQA + GDASQASZ\n         SR    R14,R15             SIZE OF NUCLEUS\n         SRL   R14,12              GET NUMBER OF FRAMES\n         MVC   OUTMSG+4(12),=CL12'NUCLEUS'\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       CYCLE PFT FOR INTERESTING SYSTEM COUNTS\n*\n         L     R10,=X'0000FFFF'\n         BAL   R11,PAGEPRNT        GO COUNT AND FORMAT\n         LR    R4,R2               SAVE VALUES\n         LR    R5,R14              AND AGAIN\n*\n**       TOTAL FIXED  (R3 VALUE)\n*\n         MVC   OUTMSG+4(12),=CL12'TOT FIXED'\n         LR    R14,R3              PUT IN PROPER REG\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       TOTAL SQA FIXED (R8 VALUE)\n*\n         MVC   OUTMSG+4(12),=CL12'SQA FIXED'\n         LR    R14,R8              PUT IN PROPER REG\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       TOTAL SYSTEM (R14 VALUE NOW IN R5)\n*\n         MVC   OUTMSG+4(12),=CL12'SYS PAGES'\n         LR    R14,R5              PUT IN PROPER REG\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       TOTAL SQA    (R2 VALUE NOW IN R4)\n*\n         MVC   OUTMSG+4(12),=CL12'TOTAL SQA'\n         LR    R14,R4              PUT IN PROPER REG\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       TOTAL AVAIL  (R9 VALUE)\n*\n         MVC   OUTMSG+4(12),=CL12'AVAILABLE'\n         LR    R14,R9              PUT IN PROPER REG\n         L     R2,=F'-1'\n         BAL   R11,PGPRINT         GO PRINT\n*\n**       NOW START EACH ASCB\n*\n         L     R2,XSASAVE\n         MVC   OUTMSG+4(10),=CL12' '\n         MVC   OUTMSG+14(56),=CL56'    TOTAL        FIXED         LSQA X\n               FXD LSQA    '\n         BAL   R11,PRINT           PRINT HEADER\nGETASCB  LA    R6,4(0,R6)          NEXT SLOT\n         BCT   R7,ASCBFND          GO PROCESS\n         SPACE 3\nRETURN   EQU   *\n         ESTAE 0\n         LA    R15,*+6             GET ADDRESS\n         BSM   0,R15               CHANGE MODES\n         L     R0,SIZE\n         LR    R1,R13              WORK AREA ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         SPACE 3\nASCBFND  TM    0(R6),X'80'         AVAILABLE SLOT\n         BO    GETASCB             YES, GET NEXT SLOT\n         L     R8,0(0,R6)          LOAD ASCB ADDR\n         SR    R10,R10             LOAD\n         ICM   R10,3,36(R8)        ASID\n         BAL   R11,PAGEPRNT        GO COUNT AND FORMAT\n         L     R2,XSASAVE\n         B     GETASCB\nPAGEPRNT LM    R4,R5,PFTREGS       LOAD PFT REGS\n         SR    R14,R14             CLEAR FRAME COUNT\n         SR    R2,R2               CLEAR LSQA/SQA COUNT\n         SR    R9,R9               CLEAR AVAILABLE FRAME COUNT\n         SR    R3,R3               CLEAR FIXED FRAME COUNT\n         SR    R8,R8               CLEAR FIXED & SQA FRAME COUNT\n         SPACE 3\nPAGEPR1  SR    R15,R15             LOAD\n         ICM   R15,3,18(R4)        PFT ASID\n         TM    10(R4),X'80'        AVAILABLE PAGE\n         BO    AVAILCNT            GO ADD TO AVAILABLE COUNT\n         CR    R10,R15             ASID MATCH\n         BNE   PAGEPR2A            NO, DONT INCR FRAME COUNT\n         LA    R14,1(0,R14)        ADD 1 TO FRAME COUNT\n         CLI   8(R4),X'82'         IS IT ALSO FIXED\n         BNE   PAGEPR1A            SKIP IF NOT FIXED\n         LA    R3,1(0,R3)          ADD 1 TO FIXED FRAME COUNT\nPAGEPR1A TM    10(R4),X'10'        LSQA FRAME\n         BZ    PAGEPR2             NO\n         LA    R2,1(0,R2)          ADD 1 T0 LSQA FRAME COUNT\n         CLI   8(R4),X'82'         IS IT ALSO FIXED\n         BNE   PAGEPR2             IF NOT DONE\n         LA    R8,1(0,R8)          ADD 1 TO FIXED & LSQA COUNT\n         B     PAGEPR2             GO TO NEXT ENTRY\n         SPACE 3\nPAGEPR2A C     R10,=X'0000FFFF'    IS THIS THE SYSTEM\n         BNE   PAGEPR2             IF NOT THEN SKIP OTHER FIXED\n         CLI   8(R4),X'82'         IS THIS FIXED\n         BNE   PAGEPR2             SKIP IF NOT FIXED\n         LA    R3,1(0,R3)          ADD 1 TO TOTAL FIXED FRAME COUNT\n         SPACE 3\nPAGEPR2  LA    R4,32(0,R4)         NEXT PFT\n         BCT   R5,PAGEPR1          PROCESS NEXT\n         MVC   OUTMSG+4(12),=CL12'ASID'\n         C     R10,=X'00000001'    MASTER\n         BE    ASIDMSTR            YES, GO PRINT MASTER\n         C     R10,=X'0000FFFF'    SYS PAGES\n         BNE   PAGEPR3             NO, ASID\n         BR    R11                 OUT IF SYSTEM\n         SPACE 3\n*\n**       START FORMATING FOR ASID  -  NOTE:\n**             R14 - TOTAL PAGES OWNED\n**             R3  - TOTAL FIXED FRAMES OWNED\n**             R2  - TOTAL LSQA FRAMES OWNED\n**             R8  - TOTAL LSQA FIXED FRAMES\n*\nPAGEPR3  LTR   R14,R14             ANY FRAMES\n         BZR   R11                 NO, BYPASS PRINT\n         STH   R10,DOUBLE+6        SAVE ASID\n         UNPK  DOUBLE(5),DOUBLE+6(3)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   OUTMSG+9(4),DOUBLE  ASID TO MSG\n         SPACE 3\nPAGEPR4  CVD   R14,DOUBLE\n         MVC   OUTMSG+15(5),=X'2020202120'\n         ED    OUTMSG+14(6),DOUBLE+5\n         CLC   OUTMSG+4(4),=C'ASID'\n         BE    JOBFIND\nPGPRINT  DS    0H\n         LA    R1,OUTMSG+13        POINT AT PLACE TO PUT IT\n         BAL   R15,FORMNUM         FORMAT TOTAL PAGES\n         LTR   R2,R2               TOP LINES INDICATOR ON\n         BM    PRINT               IF YES BRANCH\n         LR    R14,R3              GET NUMBER TO FORMAT\n         LA    R1,OUTMSG+26        AND PLACE TO PUT IT\n         BAL   R15,FORMNUM         FORMAT TOTAL FIXED FRAMES\n         LR    R14,R2              GET NUMBER TO FORMAT\n         LA    R1,OUTMSG+39        AND PLACE TO PUT IT\n         BAL   R15,FORMNUM         FORMAT TOTAL LSQA FRAMES\n         LR    R14,R8              GET NUMBER TO FORMAT\n         LA    R1,OUTMSG+52        AND PLACE TO PUT IT\n         BAL   R15,FORMNUM         FORMAT TOTAL FIXED LSQA FRAMES\n         SPACE 3\nPRINT    LA    R1,OUTMSG\n         SR    R0,R0\n         L     R2,XSASAVE\n         IC    R0,XAU\n         SVC   35\n         BR    R11\n         SPACE 3\nFORMNUM  MVC   0(13,R1),=XL13'402020202120402020202120D2'\n         CVD   R14,DOUBLE          MAKE FRAME COUNT DECIMAL\n         ED    0(6,R1),DOUBLE+5    AND PUT IN MESSAGE\n         SLL   R14,2               GET K FROM FRAMES\n         CVD   R14,DOUBLE2         MAKE K COUNT DECIMAL\n         ED    6(6,R1),DOUBLE2+5   AND PUT IN MESSAGE\n         MVI   6(R1),C'/'          SET PROPER CHAR\n         BR    R15\n         SPACE 3\nAVAILCNT LA    R9,1(0,R9)          ADD 1 TO COUNT\n         B     PAGEPR2\n         SPACE 3\nASIDMSTR MVC   OUTMSG+4(12),=CL12'MASTER'\n         B     PAGEPR4\n         SPACE 2\nJOBFIND  EQU   *\n         L     R15,0(0,R6)         LOAD ASCB ADDR\n         L     R15,56(0,R15)       CSCB ADDR\n         CLI   28(R15),X'03'       INIT\n         BE    JOBFIND1            YES, GO SEARCH\n         SPACE\nJOBFIND0 MVC   OUTMSG+4(8),8(R15)  JOBNAME\n         MVI   OUTMSG+12,C' '\n         B     PGPRINT\n         SPACE\nJOBFIND1 LA    R1,0(0,R15)         SAVE ADDR\n         SR    R14,R14             LOAD\n         ICM   R14,3,30(R15)       ASID\n         SPACE\nJOBFIND2 L     R15,0(0,R15)        NEXT CSCB\n         LA    R15,0(0,R15)\n         LTR   R15,R15             END OF CHAIN\n         BNZ   JOBFIND3            NO, CONTINUE\n         LR    R15,R1              USE ORIG CSCB\n         B     JOBFIND0\n         SPACE\nJOBFIND3 CR    R15,R1              END OF CHAIN\n         BE    JOBFIND0            YES, USE ORIG CSCB\n         CH    R14,30(0,R15)       ASID EQUAL\n         BE    JOBFIND0            YES, USE THIS CSCB\n         B     JOBFIND2\nVONONE   LA    R1,VOMSG            NO OFFLINE INTERCEPT MSG\n         LA    R11,RETURN\n         B     PRINT\n         SPACE 3\nVBNONE   LA    R1,VBMSG            NO BAD FRAMES MSG\n         LA    R11,RETURN\n         B     PRINT\n         SPACE 3\nVRDISP   MVI   VRSWIT,X'F0'        SET HDR SWITCH\n         MVC   OUTMSG(20),VRHDR1   SET 1ST HDR\n         BAL   R11,VRDISP5D        GO WTO IT\n         MVC   OUTMSG(20),VRHDR2   SET 2ND HDR\n         BAL   R11,VRDISP5D        GO WTO IT\n         MVI   VRSWIT,X'00'        CLEAR HDR SWITCH\n         L     R14,16              CVT ADDR\n         L     R3,356(0,R14)       PVT ADDR\n         L     R14,560(0,R14)      GDA ADDRESS\n         L     R4,8(0,R3)          GET ADDR OF AREA IN RIT\n         L     R4,0(R4)            GET PFT ORIGIN\n         L     R15,192(0,R14)      V=R START ADDRESS FROM GDA\n         SRL   R15,12-5            GET PAGE NUMBER * 32\n         AR    R4,R15              GET PFTE ADDRESS\n         L     R5,196(0,R14)       V=R SIZE FROM GDA\n         SRL   R5,12               GET NUMBER OF PAGES\n         MVI   VRSWIT,X'00'        CLEAR V=R END SWITCH\n         MVC   OUTMSG(20),VRMSG    SET UP V=R MSG BASE\n         B     VRDISP3             GO PROCESS\n         SPACE 3\nVRDISP1  CLI   VOSWIT,X'00'        OFFLINE INTERCEPT REQUEST\n         BE    VRDISP1A            NO\n         TM    11(R4),X'08'        OFFLINE INTERCEPT FLAG BIT ON\n         BNO   VRDISP2O            NO, NEXT PFTE\n         SPACE 3\nVRDISP1A CLI   VBSWIT,X'00'        BAD FRAME REQUEST\n         BE    VRDISP1O            NO\n         TM    9(R4),X'01'         BAD FRAME FLAG BIT ON\n         BNO   VRDISP2O            NO, NEXT PFTE\n         SPACE 3\nVRDISP1O CLC   18(2,R4),VRASID     ASID MATCH\n         BNE   VRDISP4             NO, GO FORMAT AND PRINT\n         CLC   8(4,R4),VRFLAGS     FLAGS MATCH\n         BNE   VRDISP4             NO, GO FORMAT AND PRINT\n         SPACE 3\nVRDISP2  L     R14,VRNUM           ADD 1\n         LA    R14,1(0,R14)        TO EQUAL\n         ST    R14,VRNUM           ENTRY COUNT\n         SPACE 3\nVRDISP2O LA    R4,32(0,R4)         NEXT PFTE\n         BCT   R5,VRDISP1\n         MVI   VRSWIT,X'FF'        SET END OF V=R SWITCH\n         B     VRDISP4             GO FORMAT AND PRINT LAST\n         SPACE 3\nVRDISP3  XC    VRNUM(4),VRNUM      CLEAR COUNT\n         MVC   VRASID(2),18(R4)    SET ASID\n         MVC   VRFLAGS(4),8(R4)    SET FLAGS\n         B     VRDISP2\nVRDISP4  L     R14,VRNUM           NO. OF FRAMES\n         CVD   R14,DOUBLE          DECIMAL\n         UNPK  OUTMSG+4(3),DOUBLE+6(2)\n         OI    OUTMSG+6,X'F0'\n         UNPK  DOUBLE(5),VRASID(3)  TRANSLATE ASID\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   OUTMSG+10(4),DOUBLE  PUT ASID IN MSG\n         SPACE 3\nVRDISP5A MVI   OUTMSG+17,C'O'      OFFLINE\n         TM    VRFLAGS+2,X'20'\n         BO    VRDISP5B\n         MVI   OUTMSG+17,C'C'      OFFLINE INTERCEPT\n         TM    VRFLAGS+3,X'08'\n         BO    VRDISP5B\n         MVI   OUTMSG+17,C'R'      V=R ALLOCATED\n         TM    VRFLAGS+2,X'04'\n         BO    VRDISP5B\n         MVI   OUTMSG+17,C'I'      V=R INTERCEPT\n         TM    VRFLAGS+3,X'10'\n         BO    VRDISP5B\n         MVI   OUTMSG+17,C'A'      AVAILABLE\n         TM    VRFLAGS+2,X'80'\n         BO    VRDISP5B\n         MVI   OUTMSG+17,C'-'      NO STATUS\n         SPACE 3\nVRDISP5B MVI   OUTMSG+18,C'B'      BAD PAGE\n         TM    VRFLAGS+1,X'01'\n         BO    VRDISP5C\n         MVI   OUTMSG+18,C'F'      LONG TERM FIXED\n         TM    VRFLAGS+3,X'40'\n         BO    VRDISP5C\n         MVI   OUTMSG+18,C'S'      LSQA/SQA PAGE\n         TM    VRFLAGS+2,X'10'\n         BO    VRDISP5C\n         MVI   OUTMSG+18,C'V'      VIO PAGE\n         TM    VRFLAGS+3,X'20'\n         BO    VRDISP5C\n         MVI   OUTMSG+18,C'-'      NO STATUS\nVRDISP5C MVI   OUTMSG+19,C'A'      AVAILABLE\n         TM    VRFLAGS,X'FF'\n         BZ    VRDISP5D\n         MVI   OUTMSG+19,C'N'      NOT QUEUED\n         TM    VRFLAGS,X'F0'\n         BO    VRDISP5D\n         MVI   OUTMSG+19,C'S'      SQA\n         CLI   VRFLAGS,X'21'\n         BO    VRDISP5D\n         MVI   OUTMSG+19,C'R'      SQA RESERVED\n         CLI   VRFLAGS,X'22'\n         BO    VRDISP5D\n         MVI   OUTMSG+19,C'-'      NO STATUS\n         SPACE 3\nVRDISP5D LA    R1,OUTMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         TM    VRSWIT,X'FF'        TEST HDR/END SWITCH\n         BO    RETURN              END\n         BCR   4,R11               HDR\n         B     VRDISP3\nVBDISP   MVI   VBSWIT,X'FF'        SET BAD FRAME ONLY SW\n         B     VVDISP\n         SPACE 3\nVODISP   MVI   VOSWIT,X'FF'        SET OFFLINE INTERCEPT ONLY SW\n         SPACE 3\nVVDISP   MVI   VRSWIT,X'F0'        SET HDR SWITCH\n         MVI   DOUBLE,X'F0'        TEST\n         MVZ   DOUBLE(1),1(R3)     NUMERIC\n         CLI   DOUBLE,X'F0'        MEGABYTE NUMBER\n         BNE   VVDISP1             NOT NUMERIC, ERROR\n         MVC   OUTMSG(20),VRHDR1   1ST HDR\n         BAL   R11,VRDISP5D\n         MVC   OUTMSG(20),VRHDR2   2ND HDR\n         BAL   R11,VRDISP5D\n         MVI   VRSWIT,X'00'        CLEAR HDR SWITCH\n         MVC   OUTMSG(20),VRMSG    BASE MSG\n         B     VVDISP2\nVVDISP1  LA    R11,RETURN          PARM\n         LA    R1,ERRMSG           ERROR\n         B     PRINT\n         SPACE 3\nVVDISP2  IC    R5,1(0,R3)          CALCULATE\n         SLL   R5,28               PFTE INDEX\n         SRL   R5,15               TO THIS MEG\n         LTR   R5,R5               ZERO MEG\n         BZ    VVDISP1             YES, ERROR\n         L     R14,16              CVT ADDR\n         L     R3,356(0,R14)       PVT ADDR\n         L     R14,8(0,R3)         GET ADDR OF AREA IN RIT\n         L     R4,0(R14)           GET PFT ORIGIN\n         L     R14,4(R14)          GET LAST PTFE ADDRESS\n         AR    R4,R5               PFT MEG START ADDR\n         CR    R4,R14              Q. PAST END OF PFT\n         BH    VVDISP1             YES, ERROR\n         LA    R5,256              NO. OF FRAMES IN | MEG\n         CLI   VOSWIT,X'00'        OFFLINE INTERCEPT REQUEST\n         BNE   VODISP1             YES, CONTINUE PROCESS\n         CLI   VBSWIT,X'00'        BAD FRAME REQUEST\n         BNE   VBDISP1             YES, CONTINUE PROCESS\n         B     VRDISP3             GO PROCESS\n         SPACE 3\nVODISP1  TM    11(R4),X'08'        OFFLINE INTERCEPT FLAG BIT ON\n         BO    VRDISP3             YES, GO CONTINUE PROCESS\n         LA    R4,32(0,R4)         NEXT PFTE\n         BCT   R5,VODISP1          GO CHECK NEXT\n         B     VONONE              NO INTERCEPT OFFLINE, GO MSG\n         SPACE 3\nVBDISP1  TM    9(R4),X'01'         BAD FRAME BIT ON\n         BO    VRDISP3             YES, GO CONTINUE PROCESS\n         LA    R4,32(0,R4)         NEXT PFTE\n         BCT   R5,VBDISP1          GO CHECK NEXT\n         B     VBNONE              NO INTERCEPT OFFLINE, GO MSG\n*\n**       DISPLAY THE CURRENT CSA STATUS AND ALLOCATED/FREED PARTS\n*\nVCDISP   L     R1,16               CVT\n         L     R3,356(0,R1)        LOAD PVT ADDR\n         L     R6,560(0,R1)        GDA\n         L     R4,104(0,R6)        LAST FBQE FOR CSA\n         L     R5,100(0,R6)        1ST FBQE FOR CSA\n         SR    R7,R7\n         CR    R4,R5               LAST IN CHAIN\n         BE    VCDISPB             YES\n         SPACE 1\nVCDISPA  A     R7,8(0,R5)          ADD FREE AREA\n         L     R5,0(0,R5)          NEXT FBQE\n         CR    R4,R5               END OF CHAIN\n         BNE   VCDISPA             NO\nVCDISPB  A     R7,8(0,R4)          ADD FREE AREA OF LAST\n         SPACE 1\n         MVC   CSADISP(4),=X'00340100'\n         MVC   CSADISP+4(14),=CL14'CSA SIZE ='\n         L     R1,112(0,R6)        CSA SIZE\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+18(8),=X'402020212020D240'\n         ED    CSADISP+18(6),DOUBLE+5\n         MVC   CSADISP+25(17),=CL17'     CSA ADDR ='\n         UNPK  CSADISP+42(9),108(5,R6)\n         NC    CSADISP+42(8),=8X'0F'\n         TR    CSADISP+42(8),=C'0123456789ABCDEF'\n         MVC   CSADISP+50(2),=CL2' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 1\n         MVC   CSADISP(4),=X'00340100'\n         MVC   CSADISP+4(14),=CL14'ECSA SIZE ='\n         L     R1,128(0,R6)        ECSA SIZE\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+18(8),=X'402020212020D240'\n         ED    CSADISP+18(6),DOUBLE+5\n         MVC   CSADISP+25(17),=CL17'    ECSA ADDR ='\n         UNPK  CSADISP+42(9),124(5,R6)\n         NC    CSADISP+42(8),=8X'0F'\n         TR    CSADISP+42(8),=C'0123456789ABCDEF'\n         MVC   CSADISP+50(2),=CL2' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVC   CSADISP(4),=X'00340100'\n         MVC   CSADISP+4(14),=CL14'SQA FREE ='\n         L     R1,132(0,R6)        SQA+CSA AVAIL\n         SR    R1,R7               SUBTRACT CSA\n         BP    *+6                 IF NOT NEGATIVE, BYPASS\n         SR    R1,R1\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+18(8),=X'402020212020D240'\n         ED    CSADISP+18(6),DOUBLE+5\n         MVC   CSADISP+25(17),=CL17'    SQA AVAIL ='\n         L     R1,148(0,R6)        SQA AVAIL\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+41(8),=X'402020212020D240'\n         ED    CSADISP+41(6),DOUBLE+5\n         MVC   CSADISP+49(3),=CL4' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         STM   R4,R5,VCSASAV\n         SPACE 1\nVCDISPD  MVC   CSADISP(4),=X'00340100'\n         MVC   CSADISP+4(14),=CL14'V=R SIZE ='\n         L     R1,196(0,R6)        V=R SIZE\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+18(8),=X'402020212020D240'\n         ED    CSADISP+18(6),DOUBLE+5\n         MVC   CSADISP+25(17),=CL17'     V=R ADDR ='\n         UNPK  CSADISP+42(9),192(5,R6)\n         NC    CSADISP+42(8),=8X'0F'\n         TR    CSADISP+42(8),=C'0123456789ABCDEF'\n         MVC   CSADISP+50(2),=CL2' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVC   CSADISP(4),=X'00340100'\n         MVC   CSADISP+4(14),=CL14'PRV SIZE ='\n         L     R1,164(0,R6)        PRIVATE AREA SIZE\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+18(8),=X'402020212020D240'\n         ED    CSADISP+18(6),DOUBLE+5\n         MVC   CSADISP+25(17),=CL17'     PRV ADDR ='\n         UNPK  CSADISP+42(9),160(5,R6)\n         NC    CSADISP+42(8),=8X'0F'\n         TR    CSADISP+42(8),=C'0123456789ABCDEF'\n         MVC   CSADISP+50(2),=CL2' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 1\n*\n**       SAVE INFOR FOR CSA ALLOCATED/FREED BLOCKS\n*\n         LA    R8,100(0,R6)        POINT AT CSA DESCRIPTOR\n*                             (1ST FBQE,LASTFBQE,ADDR,SIZE)\n         BAL   R3,VCDISP0          DISPLAY CSA BLOCKS\n         LA    R8,116(0,R6)        POINT AT ECSA DESCRIPTOR\n*                             (1ST FBQE,LASTFBQE,ADDR,SIZE)\n         BAL   R3,VCDISP0          DISPLAY CSA BLOCKS\n         B     RETURN\n*\n**       PRINT ALLOCATED/FREED SEGMENT ADDRESSES\n**       ON ENTRY R8 ->  +0 ADDR OF FIRST FBQE\n**                       +4 ADDR OF LAST FBQE\n**                       +8 LOWEST ADDRESS OF AREA\n**                       +12 SIZE OF AREA\n*\nVCDISP0  L     R5,0(0,R8)          GET FIRST AND LAST FBQE\n         LA    R4,0(0,R8)          GET VALUE OF LAST POINTER\n         L     R1,8(R8)            GET LOWEST ADDR\n         C     R1,12(0,R5)         1ST CHUNK FREE\n         BE    VCDISP1             YES\n         L     R14,12(0,R5)        1ST FREE AREA ADDR\n         B     VCDISP3             GO PROCESS ALLOCATED CHUNK\n         SPACE 1\nVCDISP1  CR    R4,R5               END OF FBQES\n         BER   R3                  YES\n         MVC   CSADISP(4),=X'00340100'\n         L     R1,8(0,R5)          FREE AREA SIZE\n         SRL   R1,10               DIVIDE BY 1K\n         CVD   R1,DOUBLE\n         MVC   CSADISP+4(30),=CL30'FREE        SIZE='\n         MVC   CSADISP+34(9),=CL9'ADDR ='\n         MVC   CSADISP+22(8),=X'402020202120D240'\n         ED    CSADISP+22(6),DOUBLE+5\n         UNPK  CSADISP+42(9),12(5,R5)\n         NC    CSADISP+42(8),=8X'0F'\n         TR    CSADISP+42(8),=C'0123456789ABCDEF'\n         MVC   CSADISP+50(2),=CL2' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         L     R1,OUTMSLIM\n         LA    R1,1(0,R1)\n         ST    R1,OUTMSLIM\n         C     R1,=F'100'          200 +  LINES OF OUTPUT\n         BH    RETURN              YES, THATS ALL.  AVOID SQA FILL\nVCDISP2  L     R1,12(0,R5)         FREE AREA ADDR\n         A     R1,8(0,R5)          ADD FREE AREA LENGTH\n         L     R5,0(0,R5)          NEXT FBQE\n         CR    R4,R5               END OF FBQES\n         BE    VCDISP4             YES\n         L     R14,12(0,R5)        NEXT FREE AREA ADDR\n         SPACE 3\nVCDISP3  SR    R14,R1\n         SRL   R14,10              USED AREA LENGTH\n         CVD   R14,DOUBLE\n         ST    R1,DOUBLE           USED AREA ADDR\n         MVC   CSADISP(4),=X'00340100'\n         MVC   CSADISP+4(30),=CL30'ALLOCATED   SIZE='\n         MVC   CSADISP+34(9),=CL9'ADDR ='\n         MVC   CSADISP+22(8),=X'402020202120D240'\n         ED    CSADISP+22(6),DOUBLE+5\n         UNPK  CSADISP+42(9),DOUBLE(5)\n         NC    CSADISP+42(8),=8X'0F'\n         TR    CSADISP+42(8),=C'0123456789ABCDEF'\n         MVC   CSADISP+50(2),=CL2' '\n         LA    R1,CSADISP\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     VCDISP1\n         SPACE  3\nVCDISP4  L     R14,8(0,R8)         START ADDRESS\n         A     R14,12(0,R8)        ADD LENGTH OF BLOCK\n         B     VCDISP3\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                 GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)  GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,  GLA-BFG          X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)  GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESF03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nERRMSG   DC    X'001C0100'\n         DC    CL24'PARAMETER ERROR'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\n         DS    0F\nVRHDR1   DC    X'00140100'\n         DC    CL16'PAGES.ASID.FLAGS'\n         SPACE 3\n         DS    0F\nVRHDR2   DC    X'00140100'\n         DC    16C'-'\n         SPACE 3\n         DS    0F\nVRMSG    DC    X'00140100'\n         DC    CL16'   ...    ...   '\n         SPACE 3\n         DS    0F\nVBMSG    DC    X'00220100'\n         DC    CL30'NO BAD FRAMES'\n         SPACE 3\n         DS    0F\nVOMSG    DC    X'00220100'\n         DC    CL30'NO FRAMES INTERCEPTED OFFLINE'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nDOUBLE2  DS    2F\nVCSASAV  DS    2F\nXSASAVE  DS    F\nPFTREGS  DS    2F\nVRNUM    DS    F\nVRASID   DS    H\nVRFLAGS  DS    CL4\nVRSWIT   DS    C\nVOSWIT   DS    C\nVBSWIT   DS    C\n         DS    0F\nOUTMSG   DS    74C\n         SPACE 1\n         DS    0F\nCSADISP  DS    CL52\nOUTMSLIM DS    F\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSG03D\n         TITLE 'XA1SG03D -   #R  DISPLAY DEVICE INTERVENTION REQUIRED'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESG03D -       #R  DISPLAY DEVICE INTERVENTION REQUIRED ***\n***                                                                 ***\n***       VERSION -        3.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA 2.1.1                             ***\n***                                                                 ***\n***       UPDATED -        07/21/81   AXC-CBT HANDLE ESTAE          ***\n***                        11/09/82   CBT: ENHANCED WITH SP3        ***\n***                                     SUPPORT VIA GQSCAN          ***\n***                        02/07/84   JAL-SNET UCB SCAN ROUTINE     ***\n***                                       MODIFIED FOR XA.          ***\n***                        04/26/86   GLA-BFG FIX REENTRANCY        ***\n***                                       AND ESTAE                 ***\n***********************************************************************\n***********************************************************************\n*    R1\n*    R2   -  BASE REG FOR XSA AREA\n*    R3\n*    R4   -  UCB + CVT CNTL BLKS\n*    R5   -  UCB SEARCHING\n*    R6   -  UCB WORK REG + PRINTING\n*    R7\n*    R8   -  A TEMPORARY WORK AREA\n*    R9   -  FOR RIB DSECT\n*    R10  -  ESTAE\n*    R11\n*    R12  -  BASE REG\n*    R13  -  GETMAIN AREA\n*    R14  -  JOBFIND CODE + WORK2 ADDRESSING, WTO\n*    R15  -  JOBFIND CODE\n*****************************************************************\nIEESG03D CSECT\n         LR    R12,R15\n         USING IEESG03D,R12\n         L     R0,WORK1SIZ   SIZE OF WORK AREA 1\n         LA    R13,WORK2SIZ  SIZE OF WORK AREA 2\n         AR    R0,R13          GET TOTAL WORK AREA SIZE\n         O     R0,SUB241     SUBPOOL MASK\n         A     R0,=F'00102400'   ADD IN SCANAREA SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK1,R13\n         ST    R14,SAVRET          SAVE RETURN ADDRESS\n         ST    R2,XSASAVE\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         LA    R4,UCBTAB\n         LA    R5,4000\n         LA    R6,=CL8' '\n         L     R7,CLEAR\n         MVCL  R4,R6               CLEAR UCBTAB TO BLANKS\n         L     R4,16               CVT\n         SR    R5,R5\n         MVI   TYPE,C'M'           SET DEFAULT OF TAPE MOUNTS\n         MVI   DEVCLASS,X'80'      SET DEFAULT OF TAPE UCBS    -JAL/XA-\n         L     R3,XAL              LOAD PARM ADDRESS\n         LTR   R3,R3               ANY PARM SPECIFIED\n         BZ    UCBLOOP             NO, USE DEFAULT\n         MVC   TYPE(10),0(R3)      SET TYPE FROM PARM\n         CLI   TYPE,C'T'           TAPE\n         BE    UCBLOOP              YES, GO DO UCB SCAN        -JAL/XA-\n         CLI   TYPE,C'D'           DISK\n         BNE   URCHK                NO, KEEP ON CHECKING       -JAL/XA-\n         MVI   DEVCLASS,X'20'       YES, SET FOR DISK UCBS ONLY-JAL/XA-\n         B     UCBLOOP             GO DO UCB SCAN              -JAL/XA-\nURCHK    DS    0H                                              -JAL/XA-\n         CLI   TYPE,C'P'           UNIT RECORD\n         BNE   UNITCHK              NO, KEEP ON CHECKING       -JAL/XA-\n         MVI   DEVCLASS,X'08'       YES, SET FOR UR UCBS ONLY  -JAL/XA-\n         B     UCBLOOP             GO DO UCB SCAN              -JAL/XA-\nUNITCHK  DS    0H                                              -JAL/XA-\n         MVI   DEVCLASS,X'00'      SET DEFAULT TO ALL UCBS     -JAL/XA-\n         CLI   TYPE,C'U'           UNIT=\n         BE    UCBLOOP\n         CLI   TYPE,C'S'           VOLSER=\n         BE    UCBLOOP\n         CLI   TYPE,C'B'           BOTH\n         BE    UCBLOOP             GO DO UCB SCAN              -JAL/XA-\n         CLI   TYPE,C'V'           VARIED\n         BE    UCBLOOP\n         CLI   TYPE,C'R'           RESERVE SEARCH\n         BE    RESERVE\n         MVI   TYPE,C'M'           TAPE MOUNTS\n         MVI   DEVCLASS,X'80'      SET DEFAULT OF TAPE UCBS    -JAL/XA-\nUCBLOOP  DS    0H                                              -JAL/XA-\n         XC    UCBWORK,UCBWORK     CLEAR UCB WORK AREA         -JAL/XA-\n         LA    R1,UCBWORK          LOAD ADDRESS OF UCB WORKAREA-JAL/XA-\n         ST    R1,PARMWA           STORE IT IN PARMLIST        -JAL/XA-\n         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS-JAL/XA-\n         ST    R1,PARMDEVT         STORE IT IN PARMLIST        -JAL/XA-\n         LA    R1,ADDRUCB          LOAD ADDRESS OF UCB POINTER -JAL/XA-\n         ST    R1,PARMUCB          STORE IT IN PARMLIST        -JAL/XA-\n         MVI   PARMUCB,X'80'       INDICATE END OF PARM LIST   -JAL/XA-\nUCBLOOP1 DS    0H                                              -JAL/XA-\n         L     R15,1076(0,R4)      GET ADDRESS OF UCB SCAN RTN -JAL/XA-\n         LA    R1,PARMLIST         LOAD ADDR OF PARMLIST       -JAL/XA-\n         BALR  R14,R15             GO GET A UCB                -JAL/XA-\n         LTR   R15,R15             UCB RETURNED                -JAL/XA-\n         BNZ   PRINT                NO, GO PRINT RESULTS       -JAL/XA-\nUCBLOOP2 DS    0H                                              -JAL/XA-\n         L     R5,ADDRUCB          LOAD ADDR OF UCB            -JAL/XA-\n         MVI   ASIDSW,X'00'        CLEAR ASID SEARCH SW\n         CLI   TYPE,C'V'\n         BE    UCBLOOPV\n         TM    3(R5),X'88'         ONLINE AND ALLOCATED\n         BNO   UCBLOOP1            NO, GET NEXT\n         CLI   TYPE,C'D'           DISK\n         BE    UCBLOOPD\n         CLI   TYPE,C'T'           TAPE\n         BE    UCBLOOPT\n         CLI   TYPE,C'P'           UNIT RECORD\n         BE    UCBLOOPP\n         CLI   TYPE,C'U'           UNIT=\n         BE    UCBLOOPU\n         CLI   TYPE,C'S'           VOLSER=\n         BE    UCBLOOPS\n         CLI   TYPE,C'M'           MOUNTS\n         BE    UCBLOOPM\n         B     UCBLOOP3            ASSUME BOTH\nUCBLOOPD TM    18(R5),X'20'        DISK\n         BZ    UCBLOOP1            NO, GET NEXT\n         B     UCBLOOP3\n         SPACE 3\nUCBLOOPT TM    18(R5),X'80'        TAPE\n         BZ    UCBLOOP1            NO, GET NEXT\n         B     UCBLOOP3\n         SPACE 3\nUCBLOOPP TM    18(R5),X'08'        UNIT RECORD\n         BZ    UCBLOOP1\n         B     UCBLOOP3\n         SPACE 3\nUCBLOOPU MVI   ASIDSW,X'F0'        FORCE PRINT\n         CLC   TYPE+2(3),13(R5)    UNIT MATCH\n         BE    UCBLOOP4\n         CLI   TYPE+4,C' '         UNIT COMPARE\n         BNE   UCBLOOP1            YES, NO MATCH\n         CLC   TYPE+2(2),13(R5)    CONTROL UNIT MATCH\n         BE    UCBLOOP4\n         CLI   TYPE+3,C' '         CONTROL UNIT COMPARE\n         BNE   UCBLOOP1            YES, NO MATCH\n         CLC   TYPE+2(1),13(R5)    CHANNEL MATCH\n         BE    UCBLOOP4\n         B     UCBLOOP1\n         SPACE 3\nUCBLOOPS MVI   ASIDSW,X'F0'        FORCE PRINT\n         CLC   TYPE+2(6),28(R5)    VOLSER MATCH\n         BNE   UCBLOOP1\n         B     UCBLOOP4\n         SPACE 3\nUCBLOOPM TM    18(R5),X'80'        TAPE\n         BZ    UCBLOOP1\n         TM    6(R5),X'40'         NOT READY\n         BZ    UCBLOOP1\n         TM    34(R5),X'01'        MOUNT MSG ISSUED\n         BZ    UCBLOOP1\nUCBLOOPV TM    3(R5),X'50'         VARIED OR UNLOADED\n         BZ    UCBLOOP1            NO, GO GET NEXT\n         MVI   ASIDSW,X'F0'        FORCE PRINT\n         B     UCBLOOP4\n         SPACE 3\nUCBLOOP3 MVI   ASIDSW,X'FF'        SET ASID SEARCH SW\n         CLI   TYPE+1,C'='         ASID DELIMITED SEARCH\n         BE    UCBLOOP4\n         MVI   ASIDSW,X'00'        CLEAR ASID SEARCH SW\n         CLI   6(R5),X'00'         FLAGS ZERO\n         BNE   UCBLOOP4            NO, GOT ONE\n         TM    18(R5),X'20'        DISK\n         BZ    UCBLOOP1            NO, NO RESERVE CHECK\n         CLI   40(R5),X'00'        RESERVE\n         BZ    UCBLOOP1            NO, GET NEXT\n         SPACE 3\nUCBLOOP4 LA    R6,UCBTAB           UCB TABLE\n         LA    R7,100              MAX ENTRIES\n         SPACE 3\nUCBLOOP5 CLI   0(R6),X'40'         EMPTY SLOT\n         BE    UCBLOOP7            YES, GO FILL IT\n         CLC   0(3,R6),13(R5)      UCB ALREADY IN LIST\n         BE    UCBLOOP1            YES, GET NEXT\n         SPACE 3\nUCBLOOP6 LA    R6,40(0,R6)         NEXT SLOT\n         BCT   R7,UCBLOOP5\n         B     PRINT\nUCBLOOP7 L     R1,20(0,R5)         UCB EXTENSION ADDR\n         UNPK  25(5,R6),14(3,R1)   ASID\n         NC    25(4,R6),=8X'0F'\n         TR    25(4,R6),=C'0123456789ABCDEF'\n         MVI   29(R6),C' '\n         MVC   22(3,R6),=C'AS='\n         BAL   R11,JOBFIND         GO GET JOBNAME\n         MVC   0(3,R6),13(R5)      UNIT NAME\n         TM    18(R5),X'A0'        TAPE OR DISK\n         BZ    *+10\n         MVC   5(6,R6),28(R5)      VOLSER\n         CLI   5(R6),X'FF'         PRIVAT MOUNT\n         BNE   *+10                NO, BYPASS MOVE\n         MVC   5(6,R6),=C'PRIVAT'  SET PRIVAT IN MSG\n         CLI   5(R6),X'00'         ZERO VOLSER\n         BNE   *+10                NO\n         MVC   5(6,R6),=CL6'*MTP*'\n         MVC   13(7,R6),=CL7'INT REQ'\n         TM    6(R5),X'40'         NOT READY\n         BO    UCBLOOP1            YES, GET NEXT\n         MVC   13(7,R6),=CL7'BUSY'\n         TM    6(R5),X'80'         BUSY\n         BO    UCBLOOP1\n         MVC   13(7,R6),=CL7'CU BUSY'\n         TM    6(R5),X'08'         CONTROL UNIT BUSY\n         BO    UCBLOOP1\n         TM    18(R5),X'20'        DISK\n         BZ    *+12\n         CLI   36(R5),X'00'        RESERVE COUNT EQUAL ZERO\n         BNE   UCBLOOP8\n         MVC   13(7,R6),=CL7'ALLOC'\n         TM    ASIDSW,X'F0'        PRINT FORCED\n         BO    UCBLOOP1            YES\n         MVI   0(R6),C' '          FORCE NO PRINT\n         B     UCBLOOP1\n         SPACE 3\nUCBLOOP8 MVC   13(7,R6),=CL7'RSVD-'\n         SR    R8,R8\n         IC    R8,36(0,R5)         RESERVE COUNT\n         CVD   R8,DOUBLE           SAVE RESERVE COUNT\n         UNPK  18(2,R6),DOUBLE+6(2)\n         OI    19(R6),X'F0'\n         B     UCBLOOP1\n********************************************************************\n* THE FOLLOWING RESERVE CODE HAS BEEN CHANGED TO SUPPORT SP3\n* VIA GRS AND CROSS MEMORY SERVICES\n* GQSCAN IS UTILIZED TO RETRIEVE THE APPROPRIATE RIBS TO SCAN\n* FOR RESERVE SETTINGS\n********************************************************************\nRESERVE  SR    R14,R14\n         L     R14,WORK1SIZ  THE SIZE OF WORK AREA 1\n         AR    R14,R13       ADD IN WORK AREA 1 ENTRY POINT\n         USING WORK2,R14     TO ADDRESS TO WORK AREA 2\n         MVC   TKN,=F'0'     ZERO OUT TOKEN\n         MVC   RESVMSG(4),=X'00520100' WTO CONTROL CHARS\n         MVI   RESVMSG+4,C' '\n         MVC   RESVMSG+5(77),RESVMSG+4  CLEAR OUT THE OUTPUT AREA\n         MVI   SWRES,X'00'   INITIALIZE THE RESERVE SWITCH\nSTART    MVI   TKNSW,X'00'   INITIALIZE TOKEN SWITCH\n         LA    R8,SCANAREA   ADDR OF RETURNED DATA\nSCAN     GQSCAN AREA=((R8),102400),    ADDR + LEN OF INFO RETURNED     X\n               REQLIM=MAX,   MAX NUM OF OWNERS TO BE RETURNED          X\n               SCOPE=ALL,    ALL SYSTEMS IN GRS RING                   X\n               RESERVE=YES,  ALL RESERVES                              X\n               TOKEN=TKN,    TOKEN FUNCTION                            X\n               MF=(E,GQSCANL)\n         LA    R8,BRTABLE    ADDR OF BRANCH TABLE\n         B     0(R15,R8)     BRANCH TO APPROPRIATE ROUTINE\nBRTABLE  B     CODE00        LOOKS GOOD\n         B     CODE04        NO RESOURCES MATCHED REQUEST\n         B     CODE08        GQSCAN AREA TOO SMALL\n         B     CODE0C        ENCOUNTERED ERROR DATA AREA NG\n         B     CODE10        INVALID SYSNAME\nCODE00   MVI   TKNSW,X'00'   INITIALIZE TOKEN SWITCH\nRIBWORK  ST    R0,RIBLNGTH   STORE RIB + RIBE LENGTH\n         LR    R8,R1         SAVE NUMBER OF RIBS\n         MVI   SWRES,X'00'   ZERO OUT RESERVE SWITCH\n         LA    R9,SCANAREA   ADDRESS OF GQSCAN AREA (1ST RIB)\n         USING RIB,R9        RESOURCE INFORMATION BLOCK\nRIBLOOP  L     R4,RIBNRIBE   # OF RIBE'S\n*************NOW LOOK AT THE RIBVAR + RIBE FOR THE RESERVES\nLOOKRIB  LR    R5,R9         RESOURCE INFO BLOCK\n         AH    R5,RIBLNGTH   POINT TO RIB VARIABLE SECTION\n         USING RIBVAR,R5     POINT TO RIB VAR SECTION\n         SR    R6,R6         ZERO OUT REG\n         IC    R6,RIBRNMLN   LENGTH OF MINOR NAME\n         CH    R6,=H'20'     GTR 20 BYTES\n         BNH   MOVEIT        NO, USE THE POSTED LENGTH\n         LA    R6,20         YES, RESET THE LENGTH TO 20\nMOVEIT   BCTR  R6,0          REDUCE LENGTH BY ONE\n         EX    R6,MOVEMIN    MOVE IN THE MINOR NAME\nLOOKRIBE EQU   *\n         DROP  R5\n         LR    R5,R9         RESOURCE INFORMATION BLOCK\n         AH    R5,RIBLNGTH   POINT TO RIB VARIABLE SECTION\n         AH    R5,RIBVLEN    ADD IN VAR SECTION LENGTH-GET TO EXTENT\nNEXTRIBE EQU   *\n         USING RIBE,R5       RESOURCE INFORMATION BLOCK\n         TM    RIBERFLG,RIBERESV  IS THIS RESERVE REQUEST\n         BC    1,RESMV       YES, MOVE IT TO OUTPUT AREA\n         B     BUMPRIB       NO GO GET NEXT RIB\n*******************************************************************\n* THE FIRST RIBE WAS A RESERVE, SO PRINT IT OUT WITH ALL THE QUEUED\n* RESOURCES WAITING\n*******************************************************************\nRESMV    MVC   RESVMSG+24(8),RIBQNAME  MOVE OUT MAJOR NAME\n         MVI   SWRES,X'01'   TURN RESERVE SWITCH FOR THIS RIB\n         MVC   RESVMSG+15(8),RIBEJBNM  JOBNAME OF REQUESTOR\n******************************************************************\n* GET UCB CONTROL BLOCK ADDRESS AND SEARCH THE CONTROL BLOCK\n* FOR THE UCB (UNIT ADDRESS) AND VOL-SER ID NAME\n******************************************************************\n         L     R6,RIBEUCB    LOAD UCB ADDRESS\n         LTR   R6,R6         SEE IF IT IS ZERO\n         BC    8,BUMPRIB     NO ADDRESS MEANS NO RESERVE\n         USING UCBCMSEG,R6   UCB CNTL BLK\n         MVC   RESVMSG+4(3),UCBNAME    MOVE UCB ADDRESS\n         MVC   RESVMSG+8(6),UCBVOLI    MOVE IN VOL SER\n         MVC   RESVMSG+68(8),RIBESYSN REQUESTORS SYSTEM NAME\nTESTSHR  TM    RIBERFLG,RIBETYPE  IS THIS EXCL OR SHARED\n         BC    1,SHARED        YES\n         MVC   RESVMSG+63(4),=C'EXCL'  EXCLUSIVE\n         B     TESTCOM       TELL USER\nSHARED   MVC   RESVMSG+63(4),=C'SHR '  SHR\nTESTCOM  EQU   *\n***********************************************************************\n*   THE MUST COMPLETE IS CURRENTLY NOT BEING PRINTED OUT\n***********************************************************************\n*TESTCOM TM    RIBERFLG,RIBEMC    IS MUST COMPLETE                   **\n*        BC    1,MUSTCOM       YES                                   **\n*        MVI   RESVMSG+?,C' '   NO - LEAVE IT BLANK                  **\n*        B     TESTGLOB      NEXT TEST                               **\n*MUSTCOM EQU   *                                                     **\n*        MVI   RESVMSG+?(5),C'MCOMP'  MOVE IT OUT                    **\n***********************************************************************\n***********************************************************************\nTESTGLOB TM    RIBERFLG,RIBERESC  IS THIS RESERVE REQUEST GLOBAL\n         BC    1,GLOBAL        YES\n         MVC   RESVMSG+77(2),=C'NG' NO RESVE NOT CONVTED TO GLOBL ENTRY\n         B     TESTOWN       NEXT TEST\nGLOBAL   EQU   *\n         MVC   RESVMSG+77(2),=C'GE' YES RESVE CONVERTED TO GLOBAL ENTRY\nTESTOWN  TM    RIBESFLG,RIBESTAT  IS THIS THE OWNER\n         BC    1,OWNER       YES\n         MVC   RESVMSG+55(7),=C'WAITING'    NO, IT IS WAITING\n         BAL   R6,RESVPRT    PUT IT OUT\n         B     BUMPRIBE      GO TO NEXT RIBE\nOWNER    EQU   *\n         MVC   RESVMSG+56(5),=C'OWNER'      YES, FIRST ON CHAIN\n         BAL   R6,RESVPRT    PUT IT OUT\n         B     BUMPRIBE      GO TO NEXT RIBE\n******************************************************************\n* THIS SECTION IS USED TO BUMP TO THE NEXT RIB ON THE CHAIN\n* THIS IS REQUESTED IF (1) THE FIXED PORTION OF RIB SHOWS\n* NOTHING IS WAITING (EITHER EXCLUSIVE OR SHR) OR (2) THE 'FIRST'\n* RIB EXTENSION DOES NOT SHOW A RESERVE\n******************************************************************\nBUMPRIB  SR    R3,R3         CLEAR THE REG\nBUMPLOOP AH    R3,RIBELENG   ADD RIBE LENGTH\n         BCT   R4,BUMPLOOP   AND ADD TIMESNUMBER OF RIBE'S\n         AH    R3,RIBLNGTH   ADD LENGTH OF RIB\n         AH    R3,RIBVLEN    ADD LENGTH OF VARIABLE SECTION\n         AR    R9,R3         POINT TO NEXT RIB\n         BCT   R8,RIBLOOP    AND LOOP UNTIL NO MORE RIBS\n         B     RESEXIT       PREPARE FOR EOJ\n******************************************************************\n*  THIS SECTION IS USED TO BUMP TO THE NEXT RIBE ON THE CHAIN\n*  IF THERE ARE NOR MORE RIBE'S, THEN GO TO NEXT RIB AND START\n*  SEARCH FOR A RESERVE ALL OVER\n*  IF NO MORE RIB'S GO TO EOJ\n******************************************************************\nBUMPRIBE AH    R5,RIBELENG   RIBE LENGTH\n         BCT   R4,NEXTRIBE   IF ANOTHER RIBE GO LOOK AT IT\n         LR    R9,R5         IF NOT GO TO NEXT RIB\n         BCT   R8,RIBLOOP    LOOP TILL NOR MORE RIB'S\n         B     RESEXIT       CLEAN UP\n*****************************************************************\n* TEST TO SEE IF ANY RESERVES HAVE BEEN FOUND\n*      IF NOT - PUT OUT MESSAGE\n*****************************************************************\nCODE04   EQU   *\n         MVI   TKNSW,X'00'   INITIALIZE TOKEN SWITCH\nRESEXIT  TM    TKNSW,X'01'   WAS A TOKEN SENT\n         BC    8,RESEOJ      NO, GO TO EOJ PROCESSING\n         BC    15,START      YES, GO RE-EXECUTE GQSCAN FOR MORE INFO\nRESEOJ   TM    SWRES,X'01'   ANY RESERVES FOUND\n         BC    1,EXIT        YES, GO TO EOJ\n         MVC   RESVMSG+4(27),=CL30'****** NO RESERVES FOUND *****'\n         BAL   R6,RESVPRT    WRITE OUT MSG\n         B     EXIT          GO TO EOJ\n******************************************************************\n*  PRINT ROUTINE FOR RESERVE INFO\n*\n*  SINCE CMDTSO + CMDSBTSO CONVERT THE SVC 35 TO A BALR 14,15\n*  I MUST SAVE REG 14 SO IT DOESN'T GET PERMANENTLY DESTROYED\n*\n******************************************************************\nRESVPRT  MVC   RESVMSG(4),=X'00520100'  MOVE IN CONTROL CHARS\n         ST    R14,SAVREG14    HOLD UNTIL AFTER THE WTO\n         LA    R1,RESVMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         L     R14,SAVREG14\n         MVI   RESVMSG+4,C' '\n         MVC   RESVMSG+5(77),RESVMSG+4 CLEAR OUT THE OUTPUT AREA\n         BR    R6            RETURN TO THE SEARCH LOOP\n***************************************************************\n* TOKEN RETURNED AFTER PROCESSING RE-EXEC THE GQSCAN\n***************************************************************\nCODE08   EQU   *\n         OI    TKNSW,X'01'    TURN ON TOKEN SWITCH\n         BC    15,RIBWORK     GO AND PROCESS THE RIB\n***************************************************************\n*  PROBLEM WITH GQSCAN.  PUT OUT MSG + GO TO EOJ\n***************************************************************\nCODE0C   EQU   *\nCODE10   EQU   *\n         MVC   RESVMSG+4(27),=CL27'INVALID INFO IN QUEUE SCAN AREA'\n         BAL   R6,RESVPRT    WRITE OUT MSG\n         BC    15,EXIT\n**********************************************************************\n*  END OF SP3 - GQSCAN AREA FOR RESERVE SEARCH\n**********************************************************************\nJOBFIND  SR    R14,R14\n         ICM   R14,3,14(R1)        ASID\n         SLL   R14,2               MULTIPLY ASID BY 4 FOR ASVT ADDR INC\n         L     R15,16              CVT\n         L     R15,556(0,R15)      ASVT\n         LA    R15,524(R14,R15)    ASVT ENTRY FOR ASID SPECIFIED\n         TM    0(R15),X'80'        AVAILABLE SLOT\n         BO    JOBFIND3            YES, JUST USE ASID\n         L     R15,0(0,R15)        ASCB\n         L     R14,56(0,R15)       CSCB\n         CLI   28(R14),X'03'       INIT/JOB\n         BNE   JOBFIND2            NO, GO USE THIS CSCB\n         LR    R15,R14             SAVE CSCB\n         LA    R15,0(0,R15)\n         SPACE 3\nJOBFIND1 L     R14,0(0,R14)        NEXT CSCB\n         LA    R14,0(0,R14)\n         LTR   R14,R14             END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R14,R15             LOAD ORIG CSCB ADDR\n         B     JOBFIND2\n         CR    R14,R15             SAME CSCB\n         BE    JOBFIND2            YES, INIT\n         CLC   14(2,R1),30(R14)    ASID MATCH\n         BNE   JOBFIND1            NO, GET NEXT\n         SPACE 3\nJOBFIND2 MVC   32(8,R6),=CL8' '\n         LTR   R14,R14             CSCB ZERO\n         BZ    JOBFIND3\n         MVC   32(8,R6),8(R14)     JOBNAME\n         SPACE 3\nJOBFIND3 CLI   ASIDSW,X'FF'        ASID SEARCH\n         BCR   7,R11               NO, CONTINUE\n         CLC   32(8,R6),TYPE+2     JOBNAME MATCH\n         BCR   8,R11               YES, CONTINUE\n         CLC   25(4,R6),TYPE+2     ASID MATCH\n         BCR   8,R11               YES, EXIT\n         B     UCBLOOP1\nPRINT    MVC   WTOLIST(4),=X'002C0100' SET MSG LEN AND UCM FLAGS\n         LA    R6,UCBTAB           UCB TABLE ADDR\n         LA    R7,100              MAX ENTRIES\n         CLI   0(R6),C' '          ANY TO PRINT\n         BE    NOPRINT             NO, GO TELL OPERATOR\n         SPACE 3\nPRINT1   CLI   0(R6),C' '          END OF PRINT\n         BE    EXIT                YES, EXIT\n         MVC   WTOLIST+4(40),0(R6)  SET MSG IN AREA\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         LA    R6,40(0,R6)         NEXT TABLE ENTRY\n         BCT   R7,PRINT1           GET NEXT\n         B     EXIT\n         SPACE 3\nNOPRINT  MVC   WTOLIST(4),=X'00200100'  SET LENGTH AND UCM FLAGS\n         MVC   WTOLIST+4(28),=CL28'NO SELECTED DEVICES FOUND'\n         CLI   TYPE,C'M'\n         BNE   NOPRINT1\n         MVC   WTOLIST+4(28),=CL28'NO MOUNTS PENDING'\n         SPACE 3\nNOPRINT1 LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         SPACE 3\nEXIT     EQU   *\n         ESTAE 0\n         L     R0,WORK1SIZ\n         LA    R1,WORK2SIZ\n         AR    R0,R1\n         O     R0,SUB241\n         A     R0,=F'00102400'     ADD IN SCANAREA SIZE\n         LR    R1,R13              AREA ADDRESS\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESG03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         SPACE 3\n         DS    0F\nSUB241   DC    X'F1000000'   SUBPOOL 241\n         DS    0F\nCLEAR    DC    X'40000001'\n         DS    0F\nNORESMSG DC    X'00200100',CL28'NO RESERVES OUTSTANDING'\nRESERMSG DC    X'00200100',CL28'ERROR -  INVALID QCB CHAIN'\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nMOVEMIN  MVC   RESVMSG+33(0),0(R5)     MOVE IN MINOR NAME\nWORK1SIZ DC    AL4(WORK1END-WORK1)\nWORK1    DSECT\nSCANSAVE DS    18F           18 WORD SAVEAREA REQ FOR GQSCAN + UCBSCAN\nWORKSTRT DS    0D\nDOUBLE   DS    D\nSAVRET   DS    F\nXSASAVE  DS    F\nWTOLIST  DS    CL44\nRESVMSG  DS    CL78\nTYPE     DS    CL10\nASIDSW   DS    C\nRESVFLAG DS    X\nESTAELST DS    0F,(ESTAEOVX)X\nSAVREG14 DS    F             SAVE REG14 SO WTO DOESN'T DESTROY\n         DS    0D                                              -JAL/XA-\nUCBWORK  DS    CL100                                           -JAL/XA-\nDEVCLASS DS    CL1                                             -JAL/XA-\nADDRUCB  DS    F                                               -JAL/XA-\nTKN      DS    F            GQSCAN CONTINUATION ADDR            GLA-BFG\nGQSCANL  GQSCAN MF=L        FOR REENTRANCY                      GLA-BFG\n         DS    0D                                              -JAL/XA-\nPARMLIST DS    3F                                              -JAL/XA-\n         ORG   PARMLIST                                        -JAL/XA-\nPARMWA   DS    F                                               -JAL/XA-\nPARMDEVT DS    F                                               -JAL/XA-\nPARMUCB  DS    F                                               -JAL/XA-\nUCBTAB   DS    100CL40\nWORK1END DS    0D\n*******************FOR RESERVE USE #R R***********************\nWORK2    DSECT\n         DS    0D\nTKNSW    DS    X\nSWRES    DS    X\n         DS    0F\n         DS    0F\nRIBLNGTH DS    H             RIB LENGTH\nRIBELENG DS    H             RIBE LENGTH\nWORK2SIZ EQU   *-WORK2\nSCANAREA DS    102400X       IF SIZE CHGS, AHANGE 'ALL' 102400 LINES\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT NOGEN\n         ISGRIB\n         IEFUCBOB\n         END   IEESG03D\n./       ADD   NAME=CSCSH03D\n         TITLE 'XA1SH03D -   #S  DISPLAY LPA MODULES'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESH03D -       #S  DISPLAY LPA MODULES                  ***\n***                                                                 ***\n***       VERSION -        1.3                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA  2.1                              ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                        05/10/86  GLA-BFG FIX FOR 31 BIT XA      ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESH03D CSECT\n         LR    R12,R15\n         USING IEESH03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD LIST POINTER\n         LA    R3,0(0,R3)          CLEAR HIGH ORDER\n         LTR   R3,R3               PARM EXIST\n         BZ    NOPARM              NO, CHECK RETURN\n         MVC   WTOLIST+4(9),0(R3)  SAVE MODULE NAME\n         CLI   0(R3),C'*'          ADDRESS\n         BE    ADDRESS             YES, GO SEARCH\n         L     R4,16               CVT ADDR\n         L     R4,188(0,R4)        LPA CDE\n         L     R4,0(0,R4)          1ST CDE\n         LA    R5,WTOLIST+4        MODULE NAME\n         SR    R9,R9               CDE INDICATOR\n         SPACE\nCDECHK   CLC   8(8,R4),0(R5)       MATCH\n         BE    PRINT               YES, GO PRINT\n         L     R4,0(0,R4)          NEXT CDE\n         LA    R4,0(0,R4)          CLEAR HIGH ORDER\n         LTR   R4,R4               END OF CHAIN\n         BNZ   CDECHK              NO, GO CHECK NEXT\n         L     R4,16               CVT\n         L     R4,360(0,R4)        LPDE CHAIN\n         LA    R9,4                LPDE INDICATOR\n         SPACE\nLPDECHK  CLC   8(8,R4),=8X'FF'     END OF CHAIN\n         BE    NOTFOUND            YES, MODULE NOT FOUND\n         CLC   8(8,R4),0(R5)       MATCH\n         BE    PRINT               YES, GO PRINT\n         LA    R4,40(0,R4)         NEXT LPDE\n         B     LPDECHK             GO CHECK NEXT\nADDRESS  LA    R7,WTOLIST+5        ADDRESS\n         SR    R4,R4               CLEAR RESULT\n         LA    R6,8                SET FOR FULL XA ADDRESS     GLA-BFG\nPARMCNV0 CLI   0(R7),C'0'          VALID CHAR\n         BL    PARMCNV1            NO\n         CLI   0(R7),C'9'          VALID CHAR\n         BH    ERROR               NO, PARM ERROR\n         B     PARMCNV2            O.K., VALID PARM\n         SPACE\nPARMCNV1 CLI   0(R7),C'A'          VALID CHAR\n         BL    ERROR               NO, PARM ERROR\n         CLI   0(R7),C'F'          VALID CHAR\n         BH    ERROR               NO, PARM ERROR\n         SPACE\nPARMCNV2 SR    R8,R8               INSERT\n         IC    R8,0(0,R7)             DIGIT\n         SRDL  R8,4                SHIFT OUT NUMERIC\n         SRL   R9,28               ADJUST NUMERIC\n         AH    R9,=H'9'               VALUE\n         SH    R8,=H'12'           MAKE SIGN 0 OR 3\n         MH    R8,=H'3'            MAKE SIGN 0 OR 9\n         SR    R9,R8               CALCULATE HEX VALUE\n         LR    R5,R9               LOAD HEX VALUE AND\n         SLL   R5,28                  SHIFT INTO\n         SLDL  R4,4                      RESULT\n         LA    R7,1(0,R7)          NEXT BYTE\n         BCT   R6,PARMCNV0\n         LR    R5,R4               SAVE ADDRESS\n         L     R4,16               CVT ADDR\n         L     R4,188(0,R4)        LPA CDE\n         L     R4,0(0,R4)          1ST CDE\n         SR    R9,R9               CDE INDICATOR\nACDECH1  TM    28(R4),X'04'        MINOR CDE\n         BO    ACDECH2             YES, GO TRY NEXT\n         L     R6,20(0,R4)         EXTENT LIST\n         L     R7,8(0,R6)          LOAD MODULE LENGTH\n         LA    R7,0(0,R7)          CLEAR HIGH ORDER\n         L     R6,12(0,R6)         LOAD MODULE ADDR\n         CR    R5,R6               MATCH\n         BL    ACDECH2             NO, TRY NEXT\n         AR    R6,R7               MODULE END\n         CR    R5,R6               MATCH\n         BL    APRINT              YES, GO PRINT\n         SPACE\nACDECH2  L     R4,0(0,R4)          NEXT CDE\n         LA    R4,0(0,R4)          CLEAR HIGH ORDER\n         LTR   R4,R4               END OF CHAIN\n         BNZ   ACDECH1             NO, GO CHECK NEXT\n         L     R4,16               CVT\n         L     R4,360(0,R4)        LPDE CHAIN\n         LA    R9,4                LPDE INDICATOR\n         SPACE\nALPDECH1 CLC   8(8,R4),=8X'FF'     END OF CHAIN\n         BE    NOTADDR             YES, ADDR NOT FOUND\n         TM    28(R4),X'04'        MINOR LPDE\n         BO    ALPDECH2            YES, TRY NEXT\n         L     R6,36(0,R4)         LOAD MODULE ADDR\n         L     R7,32(0,R4)         LOAD MODULE LEN\n         LA    R7,0(0,R7)          CLEAR HIGH ORDER\n         CR    R5,R6               MATCH\n         BL    ALPDECH2            NO, TRY NEXT\n         AR    R6,R7               MODULE END\n         CR    R5,R6               MATCH\n         BL    APRINT              YES, GO PRINT\n         SPACE\nALPDECH2 LA    R4,40(0,R4)         NEXT LPDE\n         B     ALPDECH1            GO CHECK NEXT\nAPRINT   MVC   WTOLIST+4(8),8(R4)  MODULE NAME\n         SPACE\nPRINT    MVI   WTOLIST+14,C' '     CLEAR\n         MVC   WTOLIST+15(37),WTOLIST+14\n         MVC   WTOLIST+14(8),WTOLIST+4\n         ST    R4,DOUBLE\n         UNPK  WTOLIST+4(9),DOUBLE(5)\n         NC    WTOLIST+4(8),=8X'0F'\n         TR    WTOLIST+4(8),=C'0123456789ABCDEF'\n         MVI   WTOLIST+12,C' '\n         MVI   WTOLIST+13,C' '\n         LTR   R9,R9\n         BNZ   PRINTXL             LPDE\n         L     R6,20(0,R4)         LOAD XTNT LIST ADDR\n         TM    28(R4),X'04'        MINOR CDE\n         BNO   PRINTCD             NO, USE THIS ONE\n         L     R6,20(0,R6)         LOAD MAJOR XTNT LIST ADDR\nPRINTCD  UNPK  WTOLIST+24(9),12(5,R6) TRANSLATE\n         B     PRINTXC\nPRINTXL  UNPK  WTOLIST+24(9),36(5,R4) TRANSLATE\nPRINTXC  NC    WTOLIST+24(8),=8X'0F'   MODULE ADDR\n         TR    WTOLIST+24(8),=C'0123456789ABCDEF'\n         MVI   WTOLIST+32,C' '\n         B     *+4(R9)             BR BY TYPE\n         B     PRTCDE              CDE\n         TM    28(R4),X'04'        MINOR LPDE\n         BNO   PRTLSIZ             NO, GO PRINT MODULE SIZE\n         MVC   WTOLIST+34(8),32(R4) PRINT MAJOR NAME\n         MVC   WTOLIST+24(7),=C'*MAJOR='\n         B     WTO\n         SPACE\nPRTLSIZ  UNPK  WTOLIST+34(7),33(4,R4)\n         NC    WTOLIST+34(6),=6X'0F'\n         TR    WTOLIST+34(6),=C'0123456789ABCDEF'\n         MVI   WTOLIST+40,C' '\n         B     WTO\n         SPACE\nPRTCDE   UNPK  WTOLIST+34(7),9(4,R6) TRANSLATE\n         NC    WTOLIST+34(6),=6X'0F'\n         TR    WTOLIST+34(6),=C'0123456789ABCDEF'\n         MVI   WTOLIST+40,C' '\n         MVC   WTOLIST+42(4),=C'USE='\n         UNPK  WTOLIST+47(5),24(3,R4)  USE COUNT\n         NC    WTOLIST+47(4),=6X'0F'\n         TR    WTOLIST+47(4),=C'0123456789ABCDEF'\n         MVI   WTOLIST+51,C' '\n         SPACE 3\nWTO      LA    R1,WTOLIST\n         MVC   WTOLIST(4),=X'00340100'\n         SR    R0,R0\n         IC    R0,XAU              MCSID\n         SVC   35\n         B     RETURN\nNOTFOUND LA    R1,NFNDMSG          NOT FOUND\n         B     MSGRTN\n         SPACE 3\nNOTADDR  LA    R1,NFNDADR          NOT FOUND\n         B     MSGRTN\n         SPACE 3\nERROR    LA    R1,BADADR           INVALID ADDR\n         B     MSGRTN\n         SPACE 3\nNOPARM   LA    R1,ERRMSG           PARM ERROR\n         SPACE 3\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         SPACE 3\nRETURN   EQU   *\n         ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESH03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nNFNDMSG  DC    X'00360100'\n         DC    CL50'MODULE NOT FOUND'\n         SPACE 3\n         DS    0F\nNFNDADR  DC    X'00360100'\n         DC    CL50'ADDRESS NOT FOUND'\n         SPACE 3\n         DS    0F\nBADADR   DC    X'00360100'\n         DC    CL50'ADDRESS INVALID'\n         SPACE 3\n         DS    0F\nERRMSG   DC    X'00360100'\n         DC    CL50'PARAMETER MISSING'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nDOUBLE   DS    2F\nSAVRET   DS    18F\nXSASAVE  DS    F\nWTOLIST  DS    52C\nESTAELST DS    0F,(ESTAEOVX)X AXC-CBT\nWORKEND  DS    0D\n         SPACE 5\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSI03D\n         PRINT NOGEN                                               @TEC\n         TITLE 'ESASI03D -   #V  EXTENDED DISPLAY UNITS'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESI03D -       #V  EXTENDED DISPLAY UNITS               ***\n***                                                                 ***\n***       VERSION -        2.1                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/11/82  RLL-CHANGE ESTAE PARM LENGTH   ***\n***                        09/27/82  AXC-CBT ADD 3375 AND 3380      ***\n***                                  SUPPORT                        ***\n***                        02/07/84  DEM-SNET UCB SCAN ROUTINE      ***\n***                                      MODIFIED FOR XA.           ***\n***                        04/26/86  GLA-BFG FIX XA CODING FOR      ***\n***                                      REENTRANCY AND ESTAE       ***\n***                        05/03/86  GLA-BFG FIX CODING FOR         ***\n***                                      UCB LOOKUP                 ***\n***                        09/17/91  JCL-TEC FIX CHANNEL PATH       ***\n***                                      DISPLAY                    ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESI03D CSECT\n         LR    R12,R15             ESTABLISH BASE\n         USING IEESI03D,R12\n         USING XSA,R2              'USE' XSA BASE\n         USING WTO,R13             'USE' WTO AREA BASE\n         L     R0,SIZE\n         GETMAIN R,LV=(0)          GET WTO AREA\n         LR    R13,R1              PUT WTO ADDR IN WTO BASE\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         MVC   WTOCTL1(52),WOVL1\n         MVC   WTOCTL2(52),WOVL2\n         MVC   WTOCTL3(52),WOVL3\n         MVC   ERRMSG(4),=X'00240100'\n         LA    R1,WORKAREA         *XA\n         ST    R1,PARMWA           *XA\n         LA    R1,=X'00'           *XA DEVICE CLASS            GLA-BFG\n         ST    R1,PARMDEVT         *XA                         GLA-BFG\n         LA    R1,ADDRUCB          *XA\n         ST    R1,PARMUCB          *XA\n         MVI   PARMUCB,X'80'       *XA END PARAMETER LIST\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R7,XAL              GET PTR TO INPUT PARM\n         LA    R7,0(R7)            CLEAR HI BYTE\n         LTR   R7,R7               IS THERE A PARM ?\n         BZ    NOTHING             NO\n         CLI   2(R7),C' '          COULD THIS BE A MATRIX REQUEST\n         BNE   PARMNMTR            NO\n         CLC   0(2,R7),=C'D1'      IS REQUEST 3330-1 MATRIX\n         BE    MATRIXA             YES\n         CLC   0(2,R7),=C'D3'      IS REQUEST 3330 MATRIX\n         BE    MATRIXB             YES\n         CLC   0(2,R7),=C'D5'      IS REQUEST 3350 MATRIX\n         BE    MATRIXC             YES\n         CLC   0(2,R7),=C'D7'      IS REQUEST 3375 MATRIX   AXC-CBT\n         BE    MATRIXF             YES                      AXC-CBT\n         CLC   0(2,R7),=C'D8'      IS REQUEST 3380 MATRIX   AXC-CBT\n         BE    MATRIXG             YES                      AXC-CBT\n         CLI   0(R7),C'D'          IS REQUEST DASD MATRIX\n         BE    MATRIXD             YES\n         CLI   0(R7),C'T'          IS REQUEST TAPE MATRIX\n         BE    MATRIXE             YES\nPARMNMTR CLI   1(R7),C'='          IS OUT BOY USING KEYWORDS ?\n         BNE   UNIT                NO, ASSUME HE WANTS UNITS\n         CLI   0(R7),C'U'          IS REQUEST BY UNIT ?\n         BE    SETUNIT             YES\n         CLI   0(R7),C'S'          IS REQUEST BY SERIAL ?\n         BE    SERIAL              YES\n         B     GOOF                ERROR\nSERIAL   LA    R5,EXSER            SET FOR SERIAL SEARCH\n         LA    R1,1(0,R7)          SCAN VOLSER\nSERIAL1  LA    R1,1(0,R1)          NEXT BYTE\n         CLI   0(R1),C' '          END OF VOLSER\n         BNE   SERIAL1             NO\n         SR    R1,R7               VOLSER LENGTH +2\n         SH    R1,=H'3'            VOLSER LENGTH -1\n         CH    R1,=H'5'            VOLSER MAX\n         BH    GOOF                OVER MAX\n         ST    R1,VLSERLEN         VOLSER LENGTH -1\n         BAL   R10,UCBSRCH         GO TRY TO FIND THE SERIAL NO.\n         L     R15,RETCODE\n         LTR   R15,R15             DID WE FIND IT ?\n         BZ    EXIT                YEP\n         B     GOOF                NOPE\nSETUNIT  LA    R7,2(R7)            SKIP THE 'U='\nUNIT     MVI   WCU,X'00'           INITIALIZE GHOST SUPPRESSOR\n         LA    R5,EXUCB            SET FOR SEARCH FOR SPECIFIC UCB\n         CLI   2(R7),C'X'          IS THIS REQ. FOR 'ALL' UCB'S\n         BNE   DOIT                NO\n         LA    R5,EXUCBX           SET SEARCH FOR 'ALL' UCB'S\nDOIT     BAL   R10,UCBSRCH         GO TRY TO FIND THE UCB\n         L     R15,RETCODE\n         LTR   R15,R15             DID WE SUCCEED ?\n         BNZ   GOOF                ERROR IN REQUEST\n         CLI   3(R7),C','          ARE THERE MORE UNITS ?\n         BNE   EXIT                NO\n         LA    R7,4(R7)            BUMP TO NEXT UNIT\n         B     UNIT                PROCESS NEW UNIT\nGOOF     MVC   EUNIT(9),0(R7)      SEARCH FAILED\nNOTHING  MVC   EUNIT+9(23),ERRTEXT               SET\n         SR    R0,R0                              UP\n         LA    R1,ERRMSG                              MESSAGE\n         IC    R0,XAU                                 ERROR\n         SVC   35\nEXIT     EQU   *\n         ESTAE 0                                      ****(RLL)****\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         LR    R1,R13\n         L     R14,SAVRET          RELOAD RETURN ADDR\n         L     R0,SIZE\n         FREEMAIN R,LV=(0),A=(1)          FREE WTO AREA\n         SR    R15,R15             CLEAR RETURN CODE\n         BR    R14                 EXIT\nUCBSRCH  MVI   RETCODE+3,X'04'     ASSUME BAD RETURN\n         XC    RETCODE(3),RETCODE\n         XC    WCU(1),WCU\n         XC    UCBDMCUR(4),UCBDMCUR\n         XC    UCBDMLOW(4),UCBDMLOW\n         XC    WORKAREA,WORKAREA\nUCBLOOP  BAL   R6,MATRXUCB\n         LTR   R3,R1               END OF UCBS\n         BCR   8,R10               YES\n         CLI   0(R7),C'S'          IS IT A SEARCH BY SERIAL ?\n         BE    UCBLOOP1            YES\n         EX    0,0(R5)             COMPARE SOMETHING IN THE UCB\n         BE    AHIT                BRANCH IF WE LIKED IT\n         B     UCBLOOP\nUCBLOOP1 L     R1,VLSERLEN         VOLSER LENGTH -1\n         EX    R1,0(0,R5)          COMPARE VOLSERS\n         BNE   UCBLOOP             NOT EQUAL\n         B     AHIT                BRANCH IF WE LIKED IT\nAHIT     CLC   WUNIT,13(R3)        IS THIS AN OPCHAN GHOST ?\n         BE    UCBLOOP             YES, EXORCISE IT AND CONTINUE\n         CLI   0(R7),C'S'          IS IT A SEARCH BY SERIAL ?\n         BE    MVUNAME             YES\n         CLC   WCU,5(R3)           IS THIS AN OPCHAN GHOST ?\n         BCR   2,R10               YES, EXORCISE IT AND QUIT\n         MVC   WCU,5(R3)           SAVE LAST UNIT ADDR FOR COMPARE\nMVUNAME  MVC   WUNIT,13(R3)        MOVE UNIT ADDR TO WTO AREA\n         TM    18(R3),X'A0'        IS IT TAPE OR DISK ?\n         BZ    MVSTAT              NEITHER\n         MVC   WSER,28(R3)         MOVE VOLSER\n         CLI   WSER,X'00'          IS THERE A VOLSER\n         BNE   MVSTAT              YES\n         MVC   WSER(6),=6C'*'      INSERT 'NO VOLSER' INDICATOR\nMVSTAT   MVC   WONOFF(3),=CL3'OFF'\n         TM    3(R3),X'C0'         ON/OFF/CHG FLAGS\n         BZ    MVSTAT1             OFFLINE\n         MVC   WONOFF(3),=CL3'CHG'\n         BO    MVSTAT1             CHANGING STATUS\n         TM    3(R3),X'40'         CHG FLAG\n         BO    MVSTAT1             CHANGING STATUS\n         MVC   WONOFF(3),=CL3'ON'\nMVSTAT1  L     R1,20(0,R3)         UCB EXTENTION ADDR\n         UNPK  WASID(5),14(3,R1)   ASID\n         TR    WASID(4),TABLE\n         MVI   WASID+4,C' '\n         UNPK  WDMCT(3),35(2,R3)   NO. OF OPEN DCBS\n         TR    WDMCT(2),TABLE\n         MVI   WDMCT+2,C' '\n         UNPK  WUSCT(3),38(2,R3)   NO. OF USERS\n         TR    WUSCT(2),TABLE\n         MVI   WUSCT+2,C' '\n         UNPK  WRSCT(3),36(2,R3)   NO. OF RESERVES\n         TR    WRSCT(2),TABLE\n         MVI   WRSCT+2,C' '\n         UNPK  WFLG1(9),0(5,R3)    1ST 4 BYTES OF UCB\n         TR    WFLG1(8),TABLE\n         MVI   WFLG1+8,C'/'\n         UNPK  WFLG2(9),4(5,R3)    2ND 4 BYTES OF UCB\n         TR    WFLG2(8),TABLE\n         MVI   WFLG2+8,C' '\nDEVTYPE  SR    R0,R0\n         CL    R0,16(0,R3)         SEE IF NULL UCBTYPE FIELD\n         BNE   DEVT1               NO\n         MVC   WDEVT(6),=CL6'DUMMY'  DUMMY UCB\n         B     WRITEIT\nDEVT1    DS    0H\n         LA    R1,DEVCNUM          NUM. OF DEV. CLASSWS\n         LA    R6,DEVCLASS         ADDR. OF TABLE\nDEVT2    CLC   18(1,R3),0(R6)      SEE IF EQ TO THIS ENTRY\n         BE    DEVT3               YES,GO PROCESS\n         LA    R6,1(0,R6)          TRY NEXT ENTRY\n         BCT   R1,DEVT2\n         MVC   WDEVT(6),=CL6'*UNK*'\n         B     WRITEIT\nDEVT3    LA    R6,DEVCNUM          NUM. OF ENTRIES\n         SR    R6,R1\n         SLL   R6,2                INDEX * 4 FOR OTHER TABLES\n         LA    R1,DEVCTAB          ADDR. OF BRANCH TABLE\n         ALR   R1,R6               THIS CLASS ENTRY\n         L     R1,0(0,R1)\n         BR    R1\nDEVTS    CLC   19(1,R3),0(R14)     THIS ENTRY?\n         BE    DEVTS1              YES\n         LA    R14,1(0,R14)        NEXT ENTRY\n         BCT   R1,DEVTS\n         MVC   WDEVT(6),=CL6'*UNK*'\n         BR    R11\nDEVTS1   SR    R8,R1               INDEX\n         MH    R8,=H'6'            TIMES 6 FOR BYTE OFFSET\n         ALR   R15,R8              ADDR. EBCDIC\n         MVC   WDEVT(6),0(R15)\n         BR    R11\nTAPEUCB  LA    R1,TAPENUM          NUM. TABLE ENTRIES\n         LA    R14,TAPETAB         TABLE ADDR.\n         LA    R15,TAPENAME        EBCDIC NAME\n         LR    R8,R1\n         BAL   R11,DEVTS\n         B     DEVTDSP\nCOMMUCB  MVC   WDEVT(6),=CL6'COMM'\n         MVC   WSER(6),=CL6'COMM'\n         B     DEVTDSP\nDASDUCB  DS    0H\n         LA    R1,DASDNUM          NUM. TABLE ENTRIES\n         LA    R14,DASDTAB         TABLE ADDR.\n         LA    R15,DASDNAME        EBCDIC NAME\n         LR    R8,R1\n         BAL   R11,DEVTS\n         MVC   WTOCTL3M+3(8),=CL8'PRIVATE'\n         TM    34(R3),X'10'        PRIVATE\n         BO    DASDUCB1            YES\n         MVC   WTOCTL3M+3(8),=CL8'STORAGE'\n         TM    34(R3),X'04'        STORAGE\n         BO    DASDUCB1            YES\n         MVC   WTOCTL3M+3(8),=CL8'PUBLIC'\n         TM    34(R3),X'08'        PUBLIC\n         BO    DASDUCB1            YES\n         MVC   WTOCTL3M+3(8),=CL8' '\nDASDUCB1 MVC   WTOCTL3M+11(8),=CL8'RESERVED'\n         TM    3(R3),X'20'         RESERVED\n         BO    DASDUCB2            YES\n         MVC   WTOCTL3M+11(8),=CL8'RESIDENT'\n         TM    3(R3),X'04'         RESIDENT\n         BO    DASDUCB2            YES\n         MVC   WTOCTL3M+11(8),=CL8'REMOVE'\nDASDUCB2 MVC   WTOCTL3M+20(8),=CL8'PAGING'\n         TM    34(R3),X'40'        PAGING\n         BO    DASDUCB3            YES\n         MVC   WTOCTL3M+20(8),=CL8'SYSRES'\n         TM    3(R3),X'02'         SYSRES\n         BO    DASDUCB3            YES\n         MVC   WTOCTL3M+20(8),=CL8'CATALOG'\n         TM    34(R3),X'01'        CATALOG\n         BO    DASDUCB3            YES\n         MVC   WTOCTL3M+20(8),=CL8' '\nDASDUCB3 MVC   WTOCTL3M+29(19),=CL19'DAVV MOUNT PENDING '\n         TM    37(R3),X'40'        DAVV MOUNT PENDING\n         BO    DASDUCB4            YES\n         MVC   WTOCTL3M+29(19),=CL19'DAVV IN CONTROL    '\n         TM    37(R3),X'80'        DAVV IN CONTROL\n         BO    DASDUCB4            YES\n         MVC   WTOCTL3M+29(19),=CL19'RESERVE PENDING    '\n         TM    37(R3),X'20'        RESERVE PENDING\n         BO    DASDUCB4            YES\n         MVC   WTOCTL3M+29(19),=CL19'3330V ATTN RECEIVED'\n         TM    37(R3),X'08'        3330V ATTENTION RECEIVED\n         BO    DASDUCB4            YES\n         MVC   WTOCTL3M+29(19),=CL19'3330V ATTN OVERDUE '\n         TM    37(R3),X'02'        3330V ATTENTION PENDING\n         BO    DASDUCB4            YES\n         MVC   WTOCTL3M+29(19),=CL19'CYL FAULT PENDING  '\n         TM    37(R3),X'04'        3330V CYLINDER FAULT PENDING\n         BO    DASDUCB4            YES\n         MVC   WTOCTL3M+29(19),=CL19' '\nDASDUCB4 TM    34(R3),X'01'        CATALOG\n         BO    DASDUCB3            YES\n         CLI   19(R3),X'09'        3330\n         BNE   WRITEIT             NO\n         TM    17(R3),X'08'        VIRTUAL VOLUME\n         BNO   WRITEIT             NO\n         MVC   WDEVT(6),=CL6'3330V'\n         B     WRITEIT\nDISPUCB  DS    0H\n         TM    3(R3),X'02'         SEE IF CONSOLE\n         BNO   DISPUCB1            NO\n         MVC   WSER(6),=CL6'CONS'\n         B     DISPUCB2\nDISPUCB1 MVC   WSER(6),=CL6'DISP'\nDISPUCB2 LA    R1,DISPNUM          MUN. OF ENTRIES\n         LA    R14,DISPTAB         TABLE ADDR.\n         LA    R15,DISPNAME        EBCDIC\n         LR    R8,R1\n         BAL   R11,DEVTS\n         TM    16(R3),X'01'        TEST FOR MODEL\n         BNO   DISPUCB3\n         MVC   WDEVT+4(2),=C'-1'      MODEL 1\nDISPUCB3 TM    16(R3),X'02'\n         BNO   DEVTDSP\n         MVC   WDEVT+4(2),=C'-2'      MODEL 2\n         B     DEVTDSP\nURUCB    LA    R1,URNUM          NUM. TABLE ENTRIES\n         LA    R14,URTAB         TABLE ADDR.\n         LA    R15,URNAME        EBCDIC NAME\n         LR    R8,R1\n         MVC   WSER(6),=CL6'U.R.'\n         BAL   R11,DEVTS\n         B     DEVTDSP\nWRITEIT  SR    R0,R0               CLEAR R0\n         LA    R1,WTOCTL1\n         IC    R0,XAU              GET UCMID IF REQUESTING CONSOLE\n         SVC   35\n         SR    R0,R0\n         LA    R1,WTOCTL2\n         IC    R0,XAU\n         SVC   35\n         CLC   WTOCTL3(52),WOVL3\n         BE    WRITEIT1\n         SR    R0,R0\n         LA    R1,WTOCTL3\n         IC    R0,XAU\n         SVC   35\nWRITEIT1 MVC   WTOCTL2(52),WOVL2\n         MVC   WTOCTL3(52),WOVL3\n         MVI   RETCODE+3,X'00'     SET ZERO RET CODE\n         CLI   0(R7),C'S'          IS IT A REQ. BY SERIAL ?\n         BE    UCBLOOP       YES, CONTINUE SEARCH IN CASE OF DUPLICATES\n         CLI   2(R7),C'X'          IS IT A REQ FOR ALL UNITS\n         BE    UCBLOOP             YES, GET THE REST OF THE UCB'S\n         BR    R10                 RETURN\nDEVTDSP  MVC   WTODISP+3(22),=CL22'DEVTYPE='\n         UNPK  WDMCT+4(9),16(5,R3) HEX DEVICE TYPE\n         TR    WDMCT+4(8),TABLE\n         MVI   WDMCT+12,C' '\n         B     WRITEIT\nEXUCB    CLC   13(3,R3),0(R7)      FIND SPECIFIC UCB\nEXUCBX   CLC   13(2,R3),0(R7)      FIND ALL UCB'S FOR A GIVEN CTL UNIT\nEXSER    CLC   28(0,R3),2(R7)      FIND UCB BY SERIAL NO.\nMATRIXA  LA    R5,MATRXD1\n         B     MATRIX\nMATRIXB  LA    R5,MATRXD3\n         B     MATRIX\nMATRIXC  LA    R5,MATRXD5\n         B     MATRIX\nMATRIXD  LA    R5,MATRXD\n         B     MATRIX\nMATRIXE  LA    R5,MATRXT\n         B     MATRIX\nMATRIXF  LA    R5,MATRXD7                                   AXC-CBT\n         B     MATRIX                                       AXC-CBT\nMATRIXG  LA    R5,MATRXD8                                   AXC-CBT\n         B     MATRIX                                       AXC-CBT\nMATRXD1  CLC   18(2,R3),=X'200D'   3330-1\nMATRXD3  CLC   18(2,R3),=X'2009'   3330\nMATRXD5  CLC   18(2,R3),=X'200B'   3350\nMATRXD7  CLC   18(2,R3),=X'200C'   3375                     AXC-CBT\nMATRXD8  CLC   18(2,R3),=X'200E'   3380                     AXC-CBT\nMATRXD   CLC   18(1,R3),=X'20'     DASD\nMATRXT   CLC   18(1,R3),=X'80'     TAPE\nMATRIX   BAL   R6,MATRXHD\n         LA    R7,MATRXLN          MATRIX OUTPUT LINE\n         MVC   MATRXCU(6),=CL6' '\n         MVC   MATRXPTH(6),=CL6' '\n         MVC   MATRXLN(32),=16C'. '\n         MVC   MATRXWTO(4),=X'00330100'\n         XC    WCU(1),WCU\n         XC    UCBDMCUR(4),UCBDMCUR\n         XC    UCBDMLOW(4),UCBDMLOW\nMATRIX1  BAL   R6,MATRXUCB\n         LTR   R3,R1               END OF UCBS\n         BZ    MATRIX4             YES\n         EX    0,0(0,R5)           CHECK UCB\n         BNE   MATRIX1             WRONG TYPE\n         CLI   WCU,X'00'           1ST TIME\n         BNE   MATRIX2             NO\n         BAL   R6,MATRXCHN\n         MVC   MATRXCU(2),13(R3)   CU ADDR\n         MVI   MATRXCU+2,C'X'\n         MVC   WCU(1),14(R3)       SAVE CU ADDR\nMATRIX2  CLC   WCU(1),14(R3)       CU MATCH\n         BE    MATRIX3             YES\n         BAL   R6,MATRXPRT         PRINT A LINE\n         MVC   WCU(1),14(R3)\n         MVC   MATRXLN(32),=16C'. '\n         MVC   MATRXCU(2),13(R3)   CU ADDR\n         MVI   MATRXCU+2,C'X'\n         BAL   R6,MATRXCHN\nMATRIX3  SR    R1,R1\n         IC    R1,5(0,R3)          CU ADDR\n         SLL   R1,28               SHIFT OUT CONTROL UNIT ADDR\n         SRL   R1,27               SHIFT BACK  X 2\n         LA    R1,MATRXLN(R1)      MATRIX PRINT POSITION\n         MVI   0(R1),C'*'          MARK OFFLINE\n         TM    3(R3),X'80'         ONLINE?\n         BZ    *+8                 NO\n         MVI   0(R1),C'0'          MARK ONLINE\n         B     MATRIX1\nMATRIX4  BAL   R6,MATRXPRT\n         B     EXIT\nMATRXHD  LA    R1,MATRXTIT\n         B     MATRXPRX\nMATRXPRT LA    R1,MATRXWTO\nMATRXPRX SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         BR    R6\nMATRXCHN DS    0H\n         LH    R15,=H'-24'             UCBCHPS (8CHIPIDS)          @TEC\n         AR    R15,R3                  GET ADDR OF UCBSHPS         @TEC\n         UNPK  MATRXPTH(9),0(5,R15)    HANDLE 1ST 4 PATHS          @TEC\n         MVI   MATRXPTH+8,C' '         FIX UNPK DAMAGE             @TEC\n         TR    MATRXPTH(8),HEXTR-X'F0' MAKE DISPLAY ABLE           @TEC\n         BR    R6\nMATRXUCB ST    R10,UCBDMSAV+8\n         ST    R8,UCBDMSAV\n         ST    R11,UCBDMSAV+12\n         L     R8,UCBDMLOW\nUCBDML#1 L     R10,=X'0000FFFF'    .SET MAX NEXT LEAST HIGH\n         LA    R8,1(0,R8)\n         L     R9,16               .CVT                        GLA-BFG\nUCBDML#2 L     R15,1076(0,R9)      *XA\n         LA    R1,PARMLST          *XA\n         BALR  R14,R15             *XA\n         LTR   R15,R15             *XA\n         BNZ   UCBDMOUT            *XA\n         L     R1,ADDRUCB          *XA\n         LTR   R1,R1               .ZERO ADDR\n         BZ    UCBDML#2            *XA                         GLA-BFG\nUCBDML#4 BAL   R11,UCBDMCNV        .CONVERT UNIT ADDR TO HEX\n         CR    R1,R8               .UNIT EQUAL\n         BL    UCBDML#2            .LOW NOT EQUAL, NEXT UCB\n         LR    R10,R1              .SET NEXT LEAST HIGH UNIT ADDR\n         B     UCBDMOUT            .GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)        .UNIT ADDR DIGIT\n         TM    13(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)        .UNIT ADDR DIGIT\n         TM    14(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)        .UNIT ADDR DIGIT\n         TM    15(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         LR    R1,R14              .SET RESULTS REG\n         BR    R11\nUCBDMOUT C     R10,=X'0000FFFF'    .ALL DONE\n         BE    UCBDMEX             .YES\n         L     R1,ADDRUCB\n         B     UCBDMRET            .CONTINUE\nUCBDMEX  SR    R1,R1               .CLEAR UCB ADDR REGISTER\nUCBDMRET DS    0H\n         L     R8,UCBDMSAV\n         L     R10,UCBDMSAV+8\n         L     R11,UCBDMSAV+12\n         BR    R6\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(IEESI03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WTOEND-WTO)\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nMATRXTIT DC    X'00330100'                                         @TEC\n         DC    CL15'CUU         '                                  @TEC\n         DC    CL32'0 1 2 3 4 5 6 7 8 9 A B C D E F'\nWOVL1    DC    X'00340100'\n         DC    CL18' ',CL13'UNIT=',CL9'AS=',CL8' '\nWOVL2    DC    X'00340100'\n         DC    CL11'   DCB=',CL8'USR=',CL8'RSV=',CL21'FLG='\nWOVL3    DC    X'00340100'\n         DC    CL48' '\nTABLE    EQU   *-X'F0'\nCHANNELS DC    C'0123456789ABCDEF'\nERRTEXT  DC    CL23'  UNIT OR VOL NOT FOUND'\nDEVCLASS DS    0F\n         DC    X'80'               TAPE\n         DC    X'40'               COMM.\n         DC    X'20'               DASD\n         DC    X'10'               DISP\n         DC    X'08'               UR\nDEVCNUM  EQU   *-DEVCLASS\nDEVCTAB  DS    0F\n*\n*        BRANCH TABLE FOR DEVICE CLASS PROCESSING\n*\n         DC    A(TAPEUCB)\n         DC    A(COMMUCB)\n         DC    A(DASDUCB)\n         DC    A(DISPUCB)\n         DC    A(URUCB)\nURTAB    DS    0F\n         DC    X'06'               3505\n         DC    X'08'               1403\n         DC    X'09'               3211\n         DC    X'0E'               3800\n         DC    X'0C'               3525\n         DC    X'0A'               1443\n         DC    X'04'               2501\n         DC    X'10'               2671\nURNUM    EQU   *-URTAB\nURNAME   DS    0F\n         DC    CL6'3505'\n         DC    CL6'1403'\n         DC    CL6'3211'\n         DC    CL6'3800'\n         DC    CL6'3525'\n         DC    CL6'1443'\n         DC    CL6'2501'\n         DC    CL6'2671'\nTAPETAB  DS    0F\n         DC    X'01'               2400\n         DC    X'03'               3400\nTAPENUM  EQU   *-TAPETAB\nTAPENAME DS    0F\n         DC    CL6'2400'\n         DC    CL6'3400'\nDASDTAB  DS    0F\n         DC    X'07'               2305-2\n         DC    X'09'               3330\n         DC    X'0A'               3340\n         DC    X'0D'               3330-11\n         DC    X'0B'               3350\n         DC    X'0C'               3375                     AXC-CBT\n         DC    X'0E'               3380                     AXC-CBT\nDASDNUM  EQU   *-DASDTAB\nDASDNAME DS    0F\n         DC    CL6'2305-2'\n         DC    CL6'3330  '\n         DC    CL6'3340  '\n         DC    CL6'3330-1'\n         DC    CL6'3350  '\n         DC    CL6'3375  '                                  AXC-CBT\n         DC    CL6'3380  '                                  AXC-CBT\nDISPTAB  DS    0F\n         DC    X'09'               3277\n         DC    X'0A'               3284\n         DC    X'0B'               3286\n         DC    X'08'               3066\nDISPNUM  EQU   *-DISPTAB\nDISPNAME DS    0H\n         DC    CL6'3277'\n         DC    CL6'3284'\n         DC    CL6'3286'\n         DC    CL6'3066'\nHEXTR    DC    C'0123456789ABCDEF'\nWTO      DSECT\nUSAVAREA DS    18F                 *XA SAVEAREA USED BY UCB SCAN RTN\nPARMLST  DS    0D                  *XA                          GLA-BFG\nPARMWA   DS    AL4                 *XA                          GLA-BFG\nPARMDEVT DS    A                   *XA                          GLA-BFG\nPARMUCB  DS    A                   *XA                          GLA-BFG\nERRMSG   DS    CL4\nEUNIT    DS    CL32\n         DS    0F\nWTOCTL1  DS    CL4\nWUNIT    DS    CL3\n         DS    CL2\nWSER     DS    CL6\n         DS    CL2\nWONOFF   DS    CL3\n         DS    CL7\nWDEVT    DS    CL6\n         DS    CL5\nWASID    DS    CL4\n         DS    CL7\nWPATH    DS    CL3\n         DS    0F\nWTOCTL2  DS    CL4\nWTODISP  DS    CL7\nWDMCT    DS    CL2\n         DS    CL6\nWUSCT    DS    CL2\n         DS    CL6\nWRSCT    DS    CL2\n         DS    CL6\nWFLG1    DS    CL8\n         DS    CL1\nWFLG2    DS    CL8\n         DS    CL1\n         DS    0F\nWTOCTL3  DS    CL4\nWTOCTL3M DS    CL48\n         DS    0F\nMATRXWTO DS    CL4\nMATRXCU  DS    CL6\nMATRXPTH DS    CL9\nMATRXLN  DS    CL32\nWCU      DS    CL1\nSAVRET   DS    F\nXSASAVE  DS    F\nRETCODE  DS    F\nVLSERLEN DS    F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\nUCBDMSAV DS    4F\nESTAELST DS    0F,(ESTAEOVX)X                         ****(RLL)****\nADDRUCB  DS    F                   *XA\n         DS    0D                  *XA\nWORKAREA DS    CL100               *XA\nWTOEND   DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSJ03D\n         TITLE 'XA1SJ03D -   #I  DISPLAY SYSTEM INDICATORS'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SE2SJ03D -       #I  DISPLAY SYSTEM INDICATORS            ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.0                            ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                                  ADD #IC SUBCOMMAND             ***\n***                        08/10/81  JGS - #IR SUBCOMMAND ADDED   NERDC\n***                        11/14/82  LMB-CBT FIX #IC FOR 1.3        ***\n***                        05/26/83  JAL-SNET FIX CONTROL BLOCK     ***\n***                                      CHAINING                   ***\n***                        02/07/84  JAL-SNET FIX CONTROL BLOCK     ***\n***                                      CHAINING, ADD 31-B1T CODING***\n***                                      FOR XA.                    ***\n***                        04/22/86  GLA-BFG FIX CVT CALL FOR LKED  ***\n***                                      UNRESOLVED EXTRNS          ***\n***                        04/26/86  GLA-BFG FIX ESTAE FOR BUG      ***\n***                                      FIX #IA FOR ASMVT CHANGE   ***\n***                        05/31/86  GLA-BFG IX AND IA FOR XA       ***\n***                                      CONTROL BLOCKS             ***\n***                        01/22/90  GLA-BFG CORRECT SIZE FOR ESA   ***\n***                                      CONTROL BLOCKS             ***\n***                        08/19/91  JCL-TEC FIXED RCT OFFSETS      ***\n***                                      REMOVED ASMQ AND DEMAND    ***\n***                                      PAGING RATE.               ***\n***                                      FIXED WAMT OFFSETS.        ***\n***                                      EXPANDED SWAP COUNT FIELDS ***\n***********************************************************************\n***********************************************************************\n*-------------------------------------------------------------*    @TEC\n*                                                             *    @TEC\n* PROGRAMMING NOTE: THE LOGIC FOR #IX USES A CONTROL BLOCK    *    @TEC\n*  CALLED \"WAMT\". THIS IS AN 88-BYTE HEADER, FOLLOWED BY A    *    @TEC\n*  LIST OF FULLWORD OFFSETS (FROM THE START OF THE WAMT),     *    @TEC\n*  FOLLOWED BY AN ARRAY OF 76-BYTE WAMP'S ONE FOR EACH PERF   *    @TEC\n*  GROUP PERIOD. EACH OFFSET (IF DIFFERENT FROM THE PRIOR)    *    @TEC\n*  POINTS TO THE WAMP FOR THE 1ST PERIOD OF A NEW PERFGRP.    *    @TEC\n*  IF NOT DIFFERENT FROM THE PRIOR, IT IS A PLACEHOLDER FOR   *    @TEC\n*  A PERFORMANCE GROUP NOT IN USE. THE FUNCTION OF THE TABLE  *    @TEC\n*  OF OFFSETS ISN'T CLEARLY DOCUMENT IN THE DATA AREAS BOOK!  *    @TEC\n*                                                             *    @TEC\n*-------------------------------------------------------------*    @TEC\nIEESJ03D CSECT\nIEESJ03D AMODE 24\nIEESJ03D RMODE 24\n         SPLEVEL SET=2\n         LR    R12,R15\n         USING IEESJ03D,R12\n         L     R0,SIZE             GETMAIN SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDRESS\n         ST    R2,XSASAVE\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                     -JAL/XA-\n         BSM   0,R9                                           -JAL/XA-\nAMODE31  DC    A(CONT31+X'80000000')                          -JAL/XA-\nCONT31   DS    0H                                             -JAL/XA-\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD PARM\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY SUB-PARMS\n         BNZ   PARM                YES, GO PROCESS\n         MVC   WTOLIST(4),=X'00280100'                             WJB\n         MVC   WTOLIST+4(36),LINE1\n         L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         L     R5,20(0,R4)         RMCA\n         L     R4,24(0,R4)         WMST\n         LA    R6,LINES            LINE FORMATS\n         LA    R5,244(0,R5)        SWAP COUNTS IN RMCA         -JAL/XA-\n         LA    R7,14               NUMBER OF LINES                 WJB\n         MVC   WTOLIST+26(2),4(R4) IPS ID                          WJB\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\nPRINT0   L     R4,16               CVT ADDRESS\n         L     R4,604(0,R4)        RMCT ADDRESS\n         L     R8,4(R4)            CCT ADDRESS\n         L     R4,228(R4)          RCT ADDRESS\n         MVC   WTOLIST(54),SRMOVLY\n         SR    R1,R1\n         LH    R1,104(R8)          LONG TERM CPU AVG\n         SLR   R0,R0               CLEAR REG. 0 FOR DIVIDE\n         D     R0,=F'256'          NORMALIZE THE VALUE\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+8(4),=X'40212020'\n         ED    WTOLIST+8(4),DOUBLE+6\n         LH    R1,102(0,R8)        AVERAGE CPU\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+18(4),=X'40212020'\n         ED    WTOLIST+18(4),DOUBLE+6\n         LH    R1,72(0,R4)         AVERAGE PAGING\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+28(4),=X'40212020'\n         ED    WTOLIST+28(4),DOUBLE+6\n         LH    R1,62(0,R4)         AVERAGE UIC\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+38(4),=X'40212020'\n         ED    WTOLIST+38(4),DOUBLE+6\n         LH    R1,70(0,R4)         AVERAGE ASMQ\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+48(4),=X'40212020'\n         ED    WTOLIST+48(4),DOUBLE+6\nPRINT    LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(49),WTOLIST+4\n         BCT   R7,PRINT1\n         B     EXIT\n         SPACE 3\nPRINT1   MVC   WTOLIST+4(36),0(R6) SET A LINE\n         L     R1,0(0,R5)          LOAD SWAP COUNT\n         CVD   R1,DOUBLE\n         MVC   WTOLIST+32(10),=X'40206B2020206B202120'             @TEC\n         ED    WTOLIST+32(10),DOUBLE+4                             @TEC\n         LA    R5,4(0,R5)          NEXT COUNT\n         LA    R6,36(0,R6)         NEXT LINE\n         B     PRINT\n         SPACE 3\nEXIT     EQU   *\n         ESTAE 0\n         L     R0,SIZE             GETMAIN SIZE\n         LR    R1,R13              AREA ADDRESS\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R8,AMODE24                                  -JAL/XA-\n         BSM   0,R8                                        -JAL/XA-\nAMODE24  DS    0H                                          -JAL/XA-\n         SR    R15,R15\n         BR    R14\n         SPACE 3\nPARM     CLI   0(R3),C'P'          PAGE DS DISPLAY\n         BE    PART                YES, GO PROCESS\n         CLI   0(R3),C'C'          PAGE DS DISPLAY\n         BE    PCCW                YES, GO PROCESS\n         CLI   0(R3),C'A'          ASM DISPLAY\n         BE    ASM                 YES, GO PROCESS\n         CLI   0(R3),C'S'          SWAP DS DISPLAY\n         BE    SART                YES, GO PROCESS\n         CLI   0(R3),C'X'          PERFORMANCE GROUP DISPLAY\n         BE    PERF                YES, GO PROCESS\n         CLI   0(R3),C'R'          RCT DISPLAY                    NERDC\n         BE    RCT                 YES, GO PROCESS                NERDC\n         LA    R1,PARMERR\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\nPCCW     SR    R5,R5               CLEAR REG 5\n         L     R3,16               CVT\n         L     R3,704(0,R3)        ASMVT\n         L     R4,72(0,R3)         NUMBER OF PCCWS CREATED BY RIM\n         L     R3,64(0,R3)         POINTER TO FIRST AVAILABLE PCCW\n         LTR   R3,R3               ARE THERE ANY AVAILABLE PCCWS\n         BZ    ALLDONE             IF NOT THEN PRINT 0000'S IN MSG\n         A     R5,=F'1'            ADD ONE TO COUNTER PCCW IS AVAIL\nDOITTOIT L     R3,12(0,R3)         GET POINTER TO NEXT PCCW LMB-CBT\n         LTR   R3,R3               IS IT THE LAST ONE\n         BZ    ALLDONE             IF SO THEN ALL DONE\n         A     R5,=F'1'            ADD ONE TO COUNTER\n         B     DOITTOIT            GO GET THE NEXT ONE\nALLDONE  CVD   R4,DOUBLE           CONVERT TOTAL NUM OF PCCWS\n         MVC   WTOLIST(34),PCCWMSG1  SET UP WTO\n         UNPK  WTOLIST+34(8),DOUBLE  UNPK TOTAL NUMBER OF PCCWS\n         OI    WTOLIST+41,X'F0'      MAKE IT PRINTABLE\n         LA    R1,WTOLIST            SET UP SVC 35\n         SR    R0,R0                 SET UP SVC 35\n         IC    R0,XAU\n         SVC   35\n         CVD   R5,DOUBLE           CONVERT TOTAL NUM OF PCCWS\n         MVC   WTOLIST(34),PCCWMSG2  SET UP WTO\n         UNPK  WTOLIST+34(8),DOUBLE  UNPK AVAILABLE PCCWS\n         OI    WTOLIST+41,X'F0'      MAKE IT PRINTABLE\n         LA    R1,WTOLIST            SET UP SVC 35\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT                GET OUT BOZO\nPART     L     R3,16               CVT\n         L     R3,704(0,R3)        ASMVT\n         L     R3,8(0,R3)          PART\n         L     R4,24(0,R3)         DSNAME TABLE\n         LA    R3,80(0,R3)         PART ENTRIES\n         SPACE 3\nPART1    MVI   PARTDSP1,C' '\n         MVC   PARTDSP1+1(47),PARTDSP1\n         MVC   PARTDSP2(44),PARTOVLY\n         MVC   PARTNAME(18),0(R4)  DSNAME\n         MVC   PARTTYPE(4),=C'PLPA'\n         TM    8(R3),X'80'\n         BO    PART2\n         MVC   PARTTYPE(4),=C'COMN'\n         TM    8(R3),X'40'\n         BO    PART2\n         MVC   PARTTYPE(4),=C'DPLX'\n         TM    8(R3),X'20'\n         BO    PART2\n         MVC   PARTTYPE(4),=C'LOCL'\nPART2    L     R1,44(0,R3)         UCB ADDR\n         MVC   PARTUNIT(3),13(R1)  UNIT ADDR\n         MVC   PARTVOL(6),28(R1)   VOLSER\n         L     R15,16(0,R3)        SIZE IN SLOTS\n         CVD   R15,DOUBLE\n         UNPK  PARTSIZE(5),DOUBLE+5(3)\n         OI    PARTSIZE+4,X'F0'\n         L     R9,20(0,R3)         AVAILABLE SLOTS\n         CVD   R9,DOUBLE\n         UNPK  PARTAVAL(5),DOUBLE+5(3)\n         OI    PARTAVAL+4,X'F0'\n         SR    R8,R8\n         M     R8,=F'100'\n         DR    R8,R15              CALCULATE PERCENT AVAILABLE\n         L     R8,=F'100'\n         SR    R8,R9               PERCENT USED\n         CVD   R8,DOUBLE\n         OI    DOUBLE+7,X'0F'      FORCE + SIGN\n         UNPK  PARTPCNT(2),DOUBLE+6(2)\n         CLC   DOUBLE+6(2),=X'100F'   100 PERCENT\n         BNE   *+10                NO, LEAVE ALONE\n         MVC   PARTPCNT(2),=C'99'  MAKE IT 99 PERCENT\n         L     R1,56(0,R3)         PARERQTM -   BURST COMPUTATION VALUE\n         SRL   R1,8                DIVIDE BY 256\n         CVD   R1,DOUBLE\n         UNPK  PARTBRST(3),DOUBLE+6(2)\n         OI    PARTBRST+2,X'F0'\n         MVC   PARTERR(8),=CL8'ERR(000)'\n         L     R1,24(0,R3)         LOAD PART ENTRY ERROR COUNT\n         CVD   R1,DOUBLE\n         UNPK  PARTERR+4(3),DOUBLE+6(2)\n         OI    PARTERR+6,X'F0'\n         MVC   PARTLST1(4),=X'00340100'\n         LA    R1,PARTLST1\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVC   PARTLST2(4),=X'00300100'\n         LA    R1,PARTLST2\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 3\nPART3    LA    R4,44(0,R4)         NEXT DSNAME\n         LA    R3,X'60'(0,R3)      NEXT PART ENTRY             ESA\n         CLI   8(R3),X'00'         END OF PART\n         BE    EXIT                YES, EXIT\n         TM    9(R3),X'80'         NOT IN USE\n         BO    PART3               YES, GET NEXT\n         B     PART1\nSART     L     R3,16               CVT\n         L     R3,704(0,R3)        ASMVT\n         L     R3,4(0,R3)          SART\n         L     R4,24(0,R3)         DSNAME TABLE\n         SPACE 3\nSART0    MVC   SARTDSP0(42),SARTOVL0\n         MVC   SARTNO(4),=XL4'40202120'\n         MVC   SARTTAVL(6),=XL6'402020202120'\n         MVC   SARTPGST(6),=XL6'402020202120'\n         MVC   SARTLST0(4),=X'002E0100'\n         LH    R1,8(0,R3)          NO. OF SWAP DS IN USE          ESA\n         CVD   R1,DOUBLE\n         ED    SARTNO(4),DOUBLE+6\n         LR    R10,R1              SAVE NO. OF SWAP DS\n         L     R1,36(0,R3)         AVAILABLE SWAP SETS TOTAL\n         CVD   R1,DOUBLE\n         ED    SARTTAVL(6),DOUBLE+5\n         L     R1,56(0,R3)         PAGES/SWAPSET\n         CVD   R1,DOUBLE\n         ED    SARTPGST(6),DOUBLE+5\n         LA    R1,SARTLST0\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R3,80(0,R3)         SART ENTRIES\n         LTR   R10,R10             ANY SWAP DS IN USE\n         BZ    SARTNMSG            NO, ISSUE MSG\n         SPACE 3\nSART1    MVI   SARTDSP1,C' '\n         MVC   SARTDSP1+1(47),SARTDSP1\n         MVC   SARTDSP2(42),SARTOVL2\n         MVC   SARTNAME(18),0(R4)  DSNAME\n         MVC   SARTLST1(4),=X'00340100'\n         MVC   SARTLST2(4),=X'002E0100'\n         L     R1,44(0,R3)         UCB ADDR\n         MVC   SARTUNIT(3),13(R1)  UNIT ADDR\n         MVC   SARTVOL(6),28(R1)   VOLSER\nSART2    L     R15,16(0,R3)        SIZE IN SWAP SETS\n         CVD   R15,DOUBLE\n         UNPK  SARTSIZE(4),DOUBLE+5(3)\n         OI    SARTSIZE+3,X'F0'\n         L     R9,20(0,R3)         AVAILABLE SWAP SETS\n         CVD   R9,DOUBLE\n         UNPK  SARTAVAL(4),DOUBLE+5(3)\n         OI    SARTAVAL+3,X'F0'\n         SR    R8,R8\n         M     R8,=F'100'\n         DR    R8,R15              CALCULATE PERCENT AVAILABLE\n         L     R8,=F'100'\n         SR    R8,R9               PERCENT USED\n         CVD   R8,DOUBLE\n         OI    DOUBLE+7,X'0F'      FORCE + SIGN\n         UNPK  SARTPCNT(2),DOUBLE+6(2)\n         CLC   DOUBLE+6(2),=X'100F'   100 PERCENT\n         BNE   *+10                NO, LEAVE ALONE\n         MVC   SARTPCNT(2),=C'99'  MAKE IT 99 PERCENT\n         L     R1,24(0,R3)         SWAP SETS IN ERROR\n         CVD   R1,DOUBLE\n         UNPK  SARTERR(4),DOUBLE+5(3)\n         OI    SARTERR+3,X'F0'\n         LA    R1,SARTLST1\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R1,SARTLST2\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 3\nSART3    BCT   R10,*+8             PROCESS NEXT ENTRY\n         B     EXIT                END\n         LA    R4,44(0,R4)         NEXT DSNAME\n         LA    R3,X'50'(0,R3)      NEXT SART ENTRY            ESA\n         TM    9(R3),X'80'         NOT IN USE\n         BO    SART3               YES, GET NEXT\n         B     SART1\n         SPACE 3\nSARTNMSG LA    R1,SARTMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\nASM      MVC   WTOLIST(4),=X'001A0100'\n         L     R4,16               CVT\n         L     R4,704(0,R4)        ASMVT\n         MVC   WTOLIST+4(12),=CL12'ILRSLOTC'\n         MVC   WTOLIST+16(10),=C'NO BACKING'                    GLA-BFG\n         L     R1,104(0,R4)        LOAD\n         C     R1,=X'7FFFFFFF'       SLOTC                      GLA-BFG\n         BE    ASM1A                    AND SKIP IF DEFAULT     GLA-BFG\n         CVD   R1,DOUBLE                       CONVERT\n         MVC   WTOLIST+16(10),=X'40206B2020206B202120'\n         ED    WTOLIST+16(10),DOUBLE+4\nASM1A    BAL   R5,APRINT           GO PRINT RESULTS             GLA-BFG\n         MVC   WTOLIST+4(12),=CL12'ILRSLOTV'\n         MVC   WTOLIST+16(10),=C'NO BACKING'                    GLA-BFG\n         L     R1,128(0,R4)        LOAD\n         C     R1,=X'7FFFFFFF'       SLOTV                      GLA-BFG\n         BE    ASM2A                    AND SKIP IF DEFAULT     GLA-BFG\n         CVD   R1,DOUBLE                 AND CONVERT\n         MVC   WTOLIST+16(10),=X'40206B2020206B202120'\n         ED    WTOLIST+16(10),DOUBLE+4\nASM2A    BAL   R5,APRINT           GO PRINT RESULTS\n         LA    R4,108(0,R4)        ASM COUNTS\n         MVC   WTOLIST+4(12),=CL12'AVAIL SLOTS'\n         BAL   R5,AFORM            GO FORMAT\n         MVC   WTOLIST+4(12),=CL12'TOTAL SLOTS'\n         BAL   R5,AFORM            GO FORMAT\n         MVC   WTOLIST+4(12),=CL12'VIO SLOTS'\n         BAL   R5,AFORM            GO FORMAT\n         MVC   WTOLIST+4(12),=CL12'ADSPC SLOTS'\n         BAL   R5,AFORM            GO FORMAT\n         MVC   WTOLIST+4(12),=CL12'BAD SLOTS'\n         BAL   R5,AFORM            GO FORMAT\n         B     EXIT                EXIT\n         SPACE 3\nAFORM    L     R1,0(0,R4)          LOAD COUNT\n         CVD   R1,DOUBLE              AND CONVERT\n         MVC   WTOLIST+16(10),=X'40206B2020206B202120'\n         ED    WTOLIST+16(10),DOUBLE+4\n         LA    R4,4(0,R4)          NEXT COUNT\n         SPACE 3\nAPRINT   LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              UCM ID\n         SVC   35                  ISSUE WTO\n         MVI   WTOLIST+4,C' '                                   -JAL-\n         MVC   WTOLIST+5(36),WTOLIST+4                          -JAL-\n         BR    R5                  RETURN\nPERF     L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         L     R5,88(0,R4)         WAMT\n         LH    R7,34(0,R5)         MAX PERFORM GROUP NUMBER        @TEC\n         SR    R8,R8\n         LA    R9,88(0,R5)         WAMP OFFSET TABLE               @TEC\n         SR    R10,R10\n         SR    R11,R11\n         XC    WAMPTOTL(80),WAMPTOTL\n         MVC   WTOLIST(54),PERFOVLY\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\n         SPACE 1\nPERF1    DS    0H\n         CLC   0(4,R9),4(R9)       NEXT SAME AS PREVIOUS\n         BE    PERF3               YES, GET NEXT OFFSET\n         L     R6,0(0,R9)          WAMP OFFSET\n         L     R15,4(0,R9)         NEXT OFFSET\n         SR    R15,R6\n         SR    R14,R14\n         LA    R1,76               WAMP LENGTH                     @TEC\n         DR    R14,R1\n         CH    R15,=H'1'           ONLY ONE\n         BE    *+10                YES\n         LR    R11,R15             SAVE NUMBER OF PERIODS\n         LA    R10,1               1ST PERIOD\n         AR    R6,R5               WAMP ADDRESS\n         SPACE 1\nPERF2    CVD   R8,DOUBLE\n         TM    46(R6),X'80'   IS THIS A RPT PGN                 GLA-BFG\n         BO    PERF3          IF SO SKIP                        GLA-BFG\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(49),WTOLIST+4\n         UNPK  WTOLIST+4(3),DOUBLE+6(2)\n         OI    WTOLIST+6,X'F0'\n         CVD   R10,DOUBLE\n         UNPK  WTOLIST+9(1),DOUBLE+7(1)\n         OI    WTOLIST+9,X'F0'\n         CLI   WTOLIST+9,C'0'      ONE PERIOD IN PGN\n         BNE   *+10                NO\n         MVC   WTOLIST+8(3),=C'ALL'\n         L     R15,0(0,R6)         NUMBER OF TRANSACTIONS\n         LR    R3,R15              SAVE NO. OF TRANS\n         L     R1,0(0,R6)          NUMBER OF TRANSACTIONS\n         A     R1,WAMPTOTL\n         ST    R1,WAMPTOTL         SAVE TOTAL FOR ALL PERIODS\n         LTR   R15,R15             ZERO\n         BZ    PERF3               YES, NO PRINT\n         CVD   R15,DOUBLE\n         MVC   WTOLIST+12(7),=X'4020206B202120'\n         ED    WTOLIST+12(7),DOUBLE+5\n         SR    R14,R14\n         L     R15,40(0,R6)        TOTAL SWAPS\n         L     R1,40(0,R6)         NUMBER OF SWAPS\n         A     R1,WAMPTOTL+40\n         ST    R1,WAMPTOTL+40      SAVE TOTAL FOR ALL PERIODS\n         DR    R14,R3              DIVIDE BY ENDED TRANSACTIONS\n         CVD   R15,DOUBLE          AVG SWAPS\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R3              AVG HUNDREDTHS SWAPS\n         CVD   R15,DOUBLEX\n         MVC   WTOLIST+38(7),=X'402021204B2020'\n         ED    WTOLIST+38(4),DOUBLE+6\n         UNPK  WTOLIST+43(2),DOUBLEX+6(2)\n         OI    WTOLIST+44,X'F0'\n         SR    R14,R14\n         L     R15,12(0,R6)        TOTAL ELAPSED TIME FOR ENDED TRANS\n         L     R1,12(0,R6)         TOTAL TIME\n         A     R1,WAMPTOTL+12\n         ST    R1,WAMPTOTL+12      SAVE TOTAL FOR ALL PERIODS\n         DR    R14,R3              DIVIDE BY ENDED TRANSACTIONS\n         SR    R14,R14\n         D     R14,=F'1000'\n         CVD   R15,DOUBLE          AVG SECONDS RESPONSE TIME\n         SRDL  R14,32\n         D     R14,=F'10'\n         CVD   R15,DOUBLEX         AVG HUNDREDTHS RESPONSE TIME\n         MVC   WTOLIST+45(9),=X'4020202021204B2020'\n         ED    WTOLIST+45(6),DOUBLE+5\n         UNPK  WTOLIST+52(2),DOUBLEX+6(2)\n         OI    WTOLIST+53,X'F0'\n         L     R3,8(0,R6)          TOTAL SERVICE\n         L     R1,8(0,R6)          TOTAL SERVICE\n         A     R1,WAMPTOTL+8\n         ST    R1,WAMPTOTL+8       SAVE TOTAL FOR ALL PERIODS\n         SR    R14,R14\n         LR    R15,R3\n         M     R14,=F'1000'\n         LR    R3,R15              SERVICE TIMES 1000\n         L     R15,4(0,R6)         TOTAL TRANS TIME\n         L     R1,4(0,R6)          TOTAL TRANS TIME\n         A     R1,WAMPTOTL+4\n         ST    R1,WAMPTOTL+4       SAVE TOTAL FOR ALL PERIODS\n         SR    R14,R14\n         LR    R1,R15\n         LR    R15,R3\n         DR    R14,R1              DIVIDE SERVICE\n         CVD   R15,DOUBLE          AVG TR SERVICE\n         MVC   WTOLIST+20(7),=X'4020206B202120'\n         ED    WTOLIST+20(7),DOUBLE+5\n         SR    R14,R14\n         L     R15,36(0,R6)        TOTAL RES TIME\n         L     R1,36(0,R6)         TOTAL RES TIME\n         A     R1,WAMPTOTL+36\n         ST    R1,WAMPTOTL+36      SAVE TOTAL FOR ALL PERIODS\n         SR    R14,R14\n         LR    R1,R15\n         LR    R15,R3\n         DR    R14,R1              DIVIDE SERVICE\n         CVD   R15,DOUBLE          AVG ABS RATE\n         MVC   WTOLIST+29(7),=X'4020206B202120'\n         ED    WTOLIST+29(7),DOUBLE+5\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              MCS ID OF REQUESTING CONSOLE\n         SVC   35\nPERF3    LTR   R11,R11             MULTIPLE PERIODS OR 'ALL'\n         BZ    PERF5               NO\n         LA    R1,76               WAMP SIZE                       @TEC\n         AR    R6,R1               NEXT PERIOD WAMP\n         LA    R10,1(0,R10)        BUMP PERIOD NUMBER\n         CR    R11,R10             END OF PERIODS\n         BNL   PERF2               NO\n         SPACE 1\nPERF4    SR    R10,R10\n         SR    R11,R11\n         LA    R6,WAMPTOTL\n         B     PERF2               PRINT TOTALS\n         SPACE 1\nPERF5    LA    R9,4(0,R9)          INCR INTO TABLE\n         XC    WAMPTOTL(80),WAMPTOTL\n         LA    R8,1(0,R8)          INCR PGN NUMBER                 @TEC\n         BCT   R7,PERF1\n         B     EXIT\nRCT      DS    0H                                                 NERDC\n         MVC   WTOLIST(4),=X'00290100'  LENGTH AND FLAGS          NERDC\n         MVC   WTOLIST+4(37),RCTLINE0   TITLE LINE                NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         L     R4,16               CVT                            NERDC\n         USING CVTDSECT,R4         ADDRESSING                     NERDC\n         L     R4,CVTOPCTP         POINT TO SRM CNTL BLKS         NERDC\n         USING RMCT,R4             ADDRESSING                     NERDC\n         L     R4,RMCTRCT          POINT TO SRM RCT               NERDC\n         USING RCTDSECT,R4         ADDRESSING FOR RCT (FINALLY)   NERDC\n         CLC   =C'RCT ',RCTRCT     FOUND IT?                      NERDC\n         BNE   RCTBAD              NOPE - GIVE UP                 NERDC\n         SPACE 1                                                  NERDC\n         MVI   WTOLIST+4,C' '           SECOND TITLE LINE         NERDC\n         MVC   WTOLIST+5(36),WTOLIST+4  SECOND TITLE LINE         NERDC\n         MVC   WTOLIST+28(9),RCTLINE1   SECOND TITLE LINE         NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(15),=C'CPU UTILIZATION'               -JAL-\n         LH    R1,RCVCPUA                                         NERDC\n         LA    R1,7(,R1)           BUMP FOR AVERAGE               NERDC\n         SRL   R1,4                DIVIDE BY 16                   NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n         LH    R1,RCCCPUTL                                        NERDC\n         LA    R1,7(,R1)           BUMP FOR AVERAGE               NERDC\n         SRL   R1,4                DIVIDE BY 16                   NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n         LH    R1,RCCCPUTH                                        NERDC\n         LA    R1,7(,R1)           BUMP FOR AVERAGE               NERDC\n         SRL   R1,4                DIVIDE BY 16                   NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(19),=C'CPU UTIL W/ DEM PAG'           -JAL-\n         LH    R1,RCCCPUPL                                        NERDC\n         LA    R1,7(,R1)           BUMP FOR AVERAGE               NERDC\n         SRL   R1,4                DIVIDE BY 16                   NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n         LH    R1,RCCCPUPH                                        NERDC\n         LA    R1,7(,R1)           BUMP FOR AVERAGE               NERDC\n         SRL   R1,4                DIVIDE BY 16                   NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(11),=C'PAGING RATE'                   -JAL-\n         LH    R1,RCVPTR                                          NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n         LH    R1,RCCPTRTL                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n         LH    R1,RCCPTRTH                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n*        MVC   WTOLIST+4(18),=C'DEMAND PAGING RATE'            -JAL-\n*        LH    R1,RCVDPR                                          NERDC\n*        BAL   R5,RCTBIN                                          NERDC\n*        MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n*        LH    R1,RCCDPRTL                                        NERDC\n*        BAL   R5,RCTBIN                                          NERDC\n*        MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n*        LH    R1,RCCDPRTH                                        NERDC\n*        BAL   R5,RCTBIN                                          NERDC\n*        MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n*        BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(17),=C'TOTAL PAGING RATE'             -JAL-\n         LH    R1,RCVPAGRT                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(20),=C'PAGE DELAY TIME (MS)'          -JAL-\n         LH    R1,RCVMSPP                                         NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n         LH    R1,RCCPDLTL                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n         LH    R1,RCCPDLTH                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(21),=C'PAGE DELAY W/ DEM PAG'         -JAL-\n         LH    R1,RCCMSPTL                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n         LH    R1,RCCMSPTH                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n*        MVC   WTOLIST+4(13),=C'AVG ASM QUEUE'                 -JAL-\n*        LH    R1,RCVASMQA                                        NERDC\n*        BAL   R5,RCTBIN                                          NERDC\n*        MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n*        LH    R1,RCCASMTL                                        NERDC\n*        BAL   R5,RCTBIN                                          NERDC\n*        MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n*        LH    R1,RCCASMTH                                        NERDC\n*        BAL   R5,RCTBIN                                          NERDC\n*        MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n*        BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(7),=C'AVG UIC'                        -JAL-\n         LH    R1,RCVUICA                                         NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n         LH    R1,RCCUICTL                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+27(5),DOUBLE                             NERDC\n         LH    R1,RCCUICTH                                        NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+32(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         MVC   WTOLIST+4(16),=C'AVG AVAIL FRAMES'              -JAL-\n         LH    R1,RCVAFQA                                         NERDC\n         BAL   R5,RCTBIN                                          NERDC\n         MVC   WTOLIST+4+20(5),DOUBLE                             NERDC\n         BAL   R5,APRINT           PRINT IT                       NERDC\n         SPACE 1                                                  NERDC\n         B     EXIT                DONE                           NERDC\n         SPACE 3                                                  NERDC\nRCTBIN   DS    0H                  CONVERT VALUE TO BIN           NERDC\n         CVD   R1,DOUBLE           TO DECIMAL                     NERDC\n         MVC   DOUBLE-1(6),=X'402020202120'                       NERDC\n         ED    DOUBLE-1(6),DOUBLE+5                               NERDC\n         BR    R5                  RETURN TO CALLER               NERDC\n         SPACE 3                                                  NERDC\nRCTBAD   DS    0H                                                 NERDC\n         MVC   WTOLIST+4(17),=C'RCT NOT LOCATABLE'             -JAL-\n         BAL   R5,APRINT           SEND MESSAGE                   NERDC\n         B     EXIT                RETURN TO CALLER               NERDC\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESJ03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nPARMERR  DC    X'001A0100',C'SUB-PARM NOT SUPPORTED'\n         SPACE 3\nSARTMSG  DC    X'001C0100',CL24'NO SWAP DATA SETS IN USE'\n         SPACE 3\nPCCWMSG1 DC    X'002A0100',CL30'NUMBER OF PCCWS BUILT BY RIM'\n         SPACE 3\nPCCWMSG2 DC    X'002A0100',CL30'NUMBER OF AVAILABLE PCCWS   '\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nLINE1    DC    CL22'CURRENT IPS -   IEAIPS'\n         DC    CL2' ',CL12' '\n         SPACE 3\nLINES    DC    CL20'TERM WAIT - OUT',C'(01)',CL12' '\n         DC    CL20'TERM WAIT - IN',C'(02)',CL12' '\n         DC    CL20'LONG WAIT',C'(03)',CL12' '\n         DC    CL20'AUX STOR SHORTAGE',C'(04)',CL12' '\n         DC    CL20'REAL STOR SHORTAGE',C'(05)',CL12' '\n         DC    CL20'DETECTED WAIT',C'(06)',CL12' '\n         DC    CL20'REQUEST SWAP',C'(07)',CL12' '\n         DC    CL20'ENQ EXCHANGE',C'(08)',CL12' '\n         DC    CL20'WORKLOAD EXCHANGE',C'(09)',CL12' '\n         DC    CL20'UNILATERAL SWAP',C'(0A)',CL12' '\n         DC    CL20'TRANSITION SWAP',C'(0B)',CL12' '\n         DC    CL20'LOGICAL SWAPS',C'(0C)',CL12' '\n         DC    CL20'LOGICAL SWAPS FAIL',C'(0D)',CL12' '\nPERFOVLY DS    0CL54\n         DC    XL4'00360100'\n         DC    CL50'PGN PER  TR CNT  TR RATE  AB RATE  SW RATE  AVGRSP'\n*                   NN   N   NN,NNN  NNN.NN   NNN.NN   NNN.NN NNNNN.NN\n         SPACE 3\nSRMOVLY  DS    0CL54\n         DC    XL4'00360100'\n         DC    CL4'LGCP',CL6' '\n         DC    CL4'AVCP',CL6' '\n         DC    CL4'AVPG',CL6' '\n         DC    CL4'AUIC',CL6' '\n         DC    CL4'ASMQ',CL6' '\n         SPACE 3\nPARTOVLY DS    0CL44\n         DC    CL5'SIZE(',CL5' '\n         DC    CL8') AVAIL(',CL5' '\n         DC    CL7') USED(',CL2' '\n         DC    CL8'%) BRST(',CL3' ',C')'\n         SPACE 3\nSARTOVL0 DS    0CL42\n         DC    CL9'SWAP  DS-'\n         DC    CL4' '\n         DC    CL7'  SETS-'\n         DC    CL6' '\n         DC    CL10'  PGS/SET-'\n         DC    CL6' '\n         SPACE 3\nSARTOVL2 DS    0CL42\n         DC    CL5'SIZE(',CL4' '\n         DC    CL8') AVAIL(',CL4' '\n         DC    CL7') USED(',CL2' '\n         DC    CL7'%) ERR(',CL4' ',C')'\n         SPACE 3                                                  NERDC\nRCTLINE0 DC    CL37'SRM RESOURCE CONTROL TABLE'                   NERDC\nRCTLINE1 DC    CL9'THRESHOLD'                                     NERDC\n         SPACE 3                                                  NERDC\n         LTORG ,                                                  NERDC\nWORK     DSECT\nWORKSTRT DS    0D\n         DS    D                   SCRATCH BEFORE DOUBLE          NERDC\nDOUBLE   DS    D\nDL4      EQU   DOUBLE+4,4\nDOUBLEX  DS    D\nSAVRET   DS    F\nXSASAVE  DS    F\nWTOLIST  DS    CL54\nWSC      EQU   WTOLIST+32,7\n         SPACE 3\n         DS    0F\nPARTLST1 DS    CL4\nPARTDSP1 DS    0CL48\nPARTTYPE DS    CL4\n         DS    CL2\nPARTUNIT DS    CL4\n         DS    CL2\nPARTVOL  DS    CL6\n         DS    CL2\nPARTNAME DS    CL18\n         DS    CL2\nPARTERR  DS    CL8\n         SPACE 3\n         DS    0F\nPARTLST2 DS    CL4\nPARTDSP2 DS    0CL44\n         DS    CL5\nPARTSIZE DS    CL5\n         DS    CL8\nPARTAVAL DS    CL5\n         DS    CL7\nPARTPCNT DS    CL2\n         DS    CL8\nPARTBRST DS    CL3\n         DS    C\n         DS    0F\nSARTLST0 DS    CL4\nSARTDSP0 DS    0CL42\n         DS    CL9\nSARTNO   DS    CL4\n         DS    CL7\nSARTTAVL DS    CL6\n         DS    CL10\nSARTPGST DS    CL6\n         SPACE 3\n         DS    0F\nSARTLST1 DS    CL4\nSARTDSP1 DS    0CL48\nSARTUNIT DS    CL4\n         DS    CL2\nSARTVOL  DS    CL6\n         DS    CL4\nSARTNAME DS    CL32\n         SPACE 3\n         DS    0F\nSARTLST2 DS    CL4\nSARTDSP2 DS    0CL42\n         DS    CL5\nSARTSIZE DS    CL4\n         DS    CL8\nSARTAVAL DS    CL4\n         DS    CL7\nSARTPCNT DS    CL2\n         DS    CL7\nSARTERR  DS    CL4\n         DS    C\n         DS    F\nWAMPTOTL DS    CL80\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nRMCT     DSECT ,                                                  NERDC\n         ORG   RMCT+228                                           NERDC\nRMCTRCT  DS    F                   POINTER TO RCT                 NERDC\n         ORG   ,                                                  NERDC\n         SPACE 3                                                  NERDC\nRCTDSECT DSECT ,                   SRM RES CNTL TABLE             NERDC\nRCTRCT   DS    CL4                 'RCT'                          NERDC\nRCCUICTL DS    H                   UIC THRESHOLD LOW              NERDC\nRCCUICTH DS    H                   UIC THRESHOLD HIGH             NERDC\nRCCCPUTL DS    H                   CPU THRESHOLD LOW              NERDC\nRCCCPUTH DS    H                   CPU THRESHOLD HIGH             NERDC\nRCCPTRTL DS    H                   PAGING THRESHOLD LOW           NERDC\nRCCPTRTH DS    H                   PAGING THRESHOLD HIGH          NERDC\nRCCASMTL DS    H                   ASM Q REQUEST THRESHOLD LOW    NERDC\nRCCASMTH DS    H                   ASM Q REQUEST THRESHOLD HIGH   NERDC\nRCCDPRTL DS    H                   DEMAND PAGE RATE LOW THRESH    NERDC\nRCCDPRTH DS    H                   DEMAND PAGE RATE HIGH THRESH   NERDC\nRCCCPUPL DS    H                   CPU UTIL W/ DEMAND PAGING LOW  NERDC\nRCCCPUPH DS    H                   CPU UTIL W/ DEMAND PAGING HI   NERDC\nRCCMSPTL DS    H                   PAGE DELAY W/ DEMAND PAGING LO NERDC\nRCCMSPTH DS    H                   PAGE DELAY W/ DEMAND PAGING HI NERDC\nRCCPDLTL DS    H                   PAGE DELAY TIME (MS) LOW       NERDC\nRCCPDLTH DS    H                   PAGE DELAY TIME (MS) HIGH      NERDC\n         ORG   RCTDSECT+52                                         @TEC\nRCVCTMC  DS    H                   SAMPLE INTERVALS COUNT         NERDC\nRCVUICA  DS    H                   UIC AVERAGE                    NERDC\nRCVCPUA  DS    H                   CPU USAGE AVERAGE              NERDC\nRCVAVQC  DS    H                   AVQ LOWW COUNT                 NERDC\nRCVAFQA  DS    H                   AVG AVAIL FRAMES               NERDC\nRCVRSVF6 DS    H                   WAS ASMQ                        @TEC\nRCVPTR   DS    H                   PAGING RATE                    NERDC\nRCVRSVF7 DS    H                   WAS DPR                         @TEC\nRCVPAGRT DS    H                   TOTAL PAGING RATE              NERDC\nRCVMSPP  DS    H                   PAGE DELAY TIME (MS)           NERDC\n         ORG   ,                                                  NERDC\n         PRINT NOGEN                                              NERDC\nCVTDSECT CVT   DSECT=YES                                        GLA-BFG\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSK03D\n         TITLE 'SE2SK03D -   #C  CALCULATOR/CONSOLE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SE2SK03D -       #C  CALCULATOR/CONSOLE                   ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   TO MVS/SP1.3 LEVEL        ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESK03D CSECT\n         LR    R12,R15\n         USING IEESK03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         MVC   WTOLIST(4),=X'00300100'\n         MVI   ANSWER,C' '         CLEAR\n         MVC   ANSWER+1(43),ANSWER    WTO AREA\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD SUB-PARM ADDR\n         LTR   R3,R3               SUB-PARM PRESENT\n         BNZ   CALC                YES, CONTINUE\n         STCK  DOUBLE              STORE CLOCK\n         UNPK  ANSWER(9),DOUBLE(5)\n         NC    ANSWER(8),=8X'0F'\n         TR    ANSWER(8),=C'0123456789ABCDEF'\n         MVI   ANSWER+8,C' '\n         SPACE 3\nEXIT     LA    R1,WTOLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\nEXIT1    EQU   *\n         ESTAE 0\n         L     R0,SIZE             LOAD FREEMAIN SIZE\n         LR    R1,R13              LOAD FREEMAIN ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14                 EXIT\nSMFIDISP L     R4,16               CVT\n         L     R4,196(0,R4)        SMCA\n         L     R5,244(0,R4)        1ST RDS\n         LA    R5,0(0,R5)\n         L     R6,248(0,R4)        LAST RDS (DUMMY)\n         LA    R6,0(0,R6)\n         L     R7,252(0,R4)        CURRENT RDS\n         LA    R7,0(0,R7)\n         MVC   SMFLIST(4),=X'00340100'\n         SPACE 1\nSMFIDSP1 CR    R5,R6               LAST\n         BE    EXIT1               YES\n         MVI   SMFANS,C' '\n         MVC   SMFANS+1(47),SMFANS\n         MVC   SMFANS(16),16(R5)   SMF DSNAME\n         CR    R5,R7               CURRENT\n         BNE   SMFIDSP2            NO\n         MVC   SMFANS+18(10),=CL10'CURRENT'\n         B     SMFIDSP3\n         SPACE 1\nSMFIDSP2 TM    12(R5),X'04'        DS READY\n         BZ    SMFIDSP3            NO\n         MVC   SMFANS+18(10),=CL10'READY  '\n         SPACE 1\nSMFIDSP3 TM    12(R5),X'08'        DS WAITING FOR DUMP\n         BZ    SMFIDSP4            NO\n         MVC   SMFANS+18(10),=CL10'DUMP REQ'\n         SPACE 1\nSMFIDSP4 TM    13(R5),X'60'        I/O ERROR\n         BZ    SMFIDSP5            NO\n         MVC   SMFANS+28(10),=CL10'I/O ERROR'\n         SPACE 1\nSMFIDSP5 LA    R1,SMFLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         SR    R14,R14\n         L     R15,44(0,R5)        SMF DS NEXT BLOCK\n         BCTR  R15,0\n         CVD   R15,DOUBLEB\n         M     R14,=F'100'\n         L     R1,40(0,R5)         SMF DS CAPACITY\n         CVD   R1,DOUBLEA\n         DR    R14,R1              PERCENT FULL\n         CVD   R15,DOUBLEC\n         MVC   SMFANS(48),SMFANSOA\n         MVC   SMFANS(10),=X'40206B2020206B202120'\n         ED    SMFANS(10),DOUBLEA+4\n         LA    R1,SMFLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         MVC   SMFANS(48),SMFANSOB\n         MVC   SMFANS(10),=X'40206B2020206B202120'\n         ED    SMFANS(10),DOUBLEB+4\n         MVC   SMFANS+29(4),=X'40202120'\n         ED    SMFANS+29(4),DOUBLEC+6\n         LA    R1,SMFLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         L     R5,4(0,R5)          NEXT RDS\n         LA    R5,0(0,R5)\n         B     SMFIDSP1\n         SPACE 3\nSMFANSOA DC    CL48' X,XXX,XXX BLOCKS ALLOCATED'\n         SPACE 3\nSMFANSOB DC    CL48' X,XXX,XXX BLOCKS USED        XXX % FULL'\nCALC     CLI   0(R3),C'M'          MSG REQUEST\n         BE    MSGREQ              YES\n         CLI   0(R3),C'B'          BROADCAST REQUEST\n         BE    BRODCST             YES\n         CLI   0(R3),C'S'          SMF ID DISPLAY REQUEST\n         BE    SMFIDISP            YES\n         CLI   0(R3),C'X'          LXYZ TRANSLATE REQUEST\n         BE    LXYZREQ             YES\n         CLI   0(R3),C'Z'          MSTCONS SWITCH REQUEST\n         BE    MSTCONS             YES\n         SPACE 1\nCALC0    LA    R10,FIELDA          LOAD 1ST FIELD ADDR\n         LA    R11,CALC2           RETURN POINT\n         SPACE 3\nCALC1    CLI   0(R3),C','          DECIMAL VALUE\n         BE    DECCONV\n         B     HEXCONV             HEX VALUE\n         SPACE 3\nCALC2    MVC   FUNCTION(1),0(R3)   SAVE FUNCTION CODE\n         MVC   RESULT(4),FIELDA    SAVE 1ST FIELD IF JUST CONVERT\n         CLI   FUNCTION,C' '       CONVERT FUNCTION\n         BE    CONVERT             YES, CONTINUE\n         LA    R3,1(0,R3)          NEXT VALUE START\n         LA    R10,FIELDB          2ND FIELD ADDR\n         LA    R11,CALC3           RETURN POINT\n         B     CALC1\n         SPACE 3\nCALC3    CLI   0(R3),C' '          BLANK DELIMETER\n         BNE   PARMERR             NO, ERROR\n         SR    R4,R4               INIT FUNCTION WORK REGS\n         L     R5,FIELDA\n         L     R6,FIELDB\n         CLI   FUNCTION,C'+'       ADD\n         BE    ADD\n         CLI   FUNCTION,C'-'       SUBTRACT\n         BE    SUB\n         CLI   FUNCTION,C'.'       MULTIPLY\n         BE    MLT\n         CLI   FUNCTION,C'/'       DIVIDE\n         BE    DIV\n         B     PARMERR             ERROR, INVALID FUNCTION\nDECCONV  LA    R5,9                MAX LENGTH\n         LA    R3,1(0,R3)          1ST BYTE OF FIELD\n         CLI   0(R3),C'0'          VALID\n         BL    PARMERR             NO, ERROR\n         CLI   0(R3),C'9'          VALID\n         BH    PARMERR             NO, ERROR\n         LR    R6,R3               SAVE FIELD ADDR\n         SPACE 3\nDECCONV1 CLI   0(R3),C'0'          VALID\n         BL    DECCONV2            NO\n         CLI   0(R3),C'9'          VALID\n         BH    DECCONV2            NO\n         LA    R3,1(0,R3)          NEXT BYTE\n         BCT   R5,DECCONV1\n         B     PARMERR             ERROR, FIELD TOO LONG\n         SPACE 3\nDECCONV2 LR    R1,R3               CALCULATE\n         BCTR  R1,0                   LENGTH\n         SR    R1,R6\n         EX    R1,PACK             PACK,\n         CVB   R1,DOUBLE              CONVERT AND\n         ST    R1,0(0,R10)               SAVE RESULT\n         BR    R11                 EXIT\n         SPACE 3\nPACK     PACK  DOUBLE(8),0(1,R6)\nHEXCONV  LA    R5,9                MAX LENGTH\n         LR    R6,R3               SAVE FIELD ADDR\n         SPACE 3\nHEXCONV1 CLI   0(R3),C'A'          VALID\n         BL    HEXCONV4            NO\n         CLI   0(R3),C'F'          VALID\n         BNH   HEXCONV2            YES\n         CLI   0(R3),C'0'          VALID\n         BL    HEXCONV4            NO\n         CLI   0(R3),C'9'          VALID\n         BH    HEXCONV4            NO\n         NI    0(R3),X'0F'         SET UP FOR TRANSLATE LATER\n         B     HEXCONV3\n         SPACE 3\nHEXCONV2 NI    0(R3),X'0F'         SET\n         SR    R1,R1                  UP\n         IC    R1,0(0,R3)                FOR\n         LA    R1,9(0,R1)                   TRANSLATE\n         STC   R1,0(0,R3)                      LATER\n         SPACE 3\nHEXCONV3 LA    R3,1(0,R3)          NEXT BYTE\n         BCT   R5,HEXCONV1\n         B     PARMERR             ERROR, FIELD TOO LONG\n         SPACE 3\nHEXCONV4 LR    R1,R3               CALCULATE\n         SR    R1,R6                  LENGTH\n         EX    R1,PACK             CREATE HEX\n         MVC   0(4,R10),DOUBLE+3      AND SAVE RESULT\n         BR    R11                 EXIT\nADD      AR    R5,R6               ADD FUNCTION\n         ST    R5,RESULT           SAVE RESULT\n         B     CONVERT             GO CONVERT AND PRINT\n         SPACE 3\nSUB      SR    R5,R6               SUBTRACT FUNCTION\n         ST    R5,RESULT           SAVE RESULT\n         B     CONVERT             GO CONVERT AND PRINT\n         SPACE 3\nMLT      LR    R4,R5               LOAD MULTIPLICAND\n         MR    R4,R6               MULTIPLY FUNCTION\n         ST    R5,RESULT           SAVE RESULT\n         B     CONVERT             GO CONVERT AND PRINT\n         SPACE 3\nDIV      LTR   R6,R6               ZERO DIVISOR\n         BZ    BADDIV              YES, ERROR\n         DR    R4,R6               DIVIDE FUNCTION\n         ST    R5,RESULT           SAVE RESULT,  QUOTIENT ONLY\n         SPACE 3\nCONVERT  UNPK  ANSWER(9),RESULT(5)\n         NC    ANSWER(8),=8X'0F'\n         TR    ANSWER(8),=C'0123456789ABCDEF'\n         MVI   ANSWER+8,C' '\n         L     R1,RESULT           LOAD RESULT\n         CVD   R1,DOUBLE\n         MVC   ANSWER2(15),MASK    EDIT MASK\n         ED    ANSWER2(15),DOUBLE+2\n         B     EXIT                GO PRINT\n         SPACE 3\nLXYZERR  MVC   ANSWER(44),LXYZMSG\n         B     EXIT                GO PRINT ERROR MSG\n         SPACE 3\nPARMERR  MVC   ANSWER(44),ERRMSG\n         B     EXIT                GO PRINT ERROR MSG\n         SPACE 3\nBADDIV   MVC   ANSWER(44),DIVMSG\n         B     EXIT                GO PRINT ERROR MSG\nMSGREQ   MVC   MSGTEXT(70),4(R3)\n         MVC   MSGLIST(4),=X'004A0100'\n         LA    R4,1                DEFAULT NO. OF MSGS\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),1(R3)\n         CLC   DOUBLE(2),=C'00'\n         BNE   MSGREQ1\n         PACK  DOUBLE(8),1(2,R3)\n         CVB   R4,DOUBLE\n         LTR   R4,R4               FORCE AT LEAST 1\n         BNZ   *+8\n         LA    R4,1\n         CH    R4,=H'30'           MAX\n         BNH   MSGREQ1\n         LA    R4,30\n         SPACE 1\nMSGREQ1  SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         LA    R1,MSGLIST          WTO PARM LIST ADDR\n         SVC   35                  WTO\n         BCT   4,MSGREQ1\n         CLC   TESTWTO(2),=X'0A23' WTO REPLACED\n         BE    EXIT1               NO\n         LA    R1,MSGLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         B     EXIT1\nLXYZREQ  MVC   MSGTEXT(24),=CL24'LXYZ= L-XXX-YY-Z (NNNN)'\n         MVC   MSGLIST(4),=X'001C0100'\n         CLI   2(R3),C'-'          DECIMAL INPUT\n         BE    LXYZREQ1            YES\n         MVC   MSGTEXT+18(4),1(R3)\n         LA    R10,FIELDA\n         LA    R3,1(0,R3)\n         BAL   R11,HEXCONV\n         SR    R14,R14\n         L     R15,FIELDA\n         SLL   R15,16\n         SLDL  R14,2               SHIFT IN 'L'\n         CVD   R14,DOUBLE\n         UNPK  MSGTEXT+6(1),DOUBLE+7(1)\n         OI    MSGTEXT+6,X'F0'\n         MVI   MSGTEXT+7,C'-'\n         SR    R14,R14\n         SLDL  R14,1               SHIFT IN 'Z'\n         CVD   R14,DOUBLE\n         UNPK  MSGTEXT+15(1),DOUBLE+7(1)\n         OI    MSGTEXT+15,X'F0'\n         SR    R14,R14\n         SLDL  R14,5               SHIFT IN 'Y'\n         CVD   R14,DOUBLE\n         UNPK  MSGTEXT+12(2),DOUBLE+6(2)\n         OI    MSGTEXT+13,X'F0'\n         MVI   MSGTEXT+14,C'-'\n         SR    R14,R14\n         SLDL  R14,8               SHIFT IN 'X'\n         CVD   R14,DOUBLE\n         UNPK  MSGTEXT+8(3),DOUBLE+6(2)\n         OI    MSGTEXT+10,X'F0'\n         MVI   MSGTEXT+11,C'-'\n         B     LXYZREQ2\n         SPACE 1\nLXYZREQ1 MVC   MSGTEXT+6(10),1(R3)\n         LR    R7,R3\n         CLI   6(R7),C'-'          DECIMAL INPUT\n         BNE   LXYZERR             NO, ERROR\n         CLI   9(R7),C'-'          DECIMAL INPUT\n         BNE   LXYZERR             NO, ERROR\n         LA    R10,FIELDA\n         BAL   R11,DECCONV\n         SR    R14,R14\n         L     R15,FIELDA\n         SLL   R15,30\n         SLDL  R14,2               SHIFT IN 'L'\n         LA    R3,9(0,R7)\n         BAL   R11,DECCONV\n         L     R15,FIELDA\n         SLL   R15,31\n         SLDL  R14,1               SHIFT IN 'Z'\n         LA    R3,6(0,R7)\n         BAL   R11,DECCONV\n         L     R15,FIELDA\n         SLL   R15,27\n         SLDL  R14,5               SHIFT IN 'Y'\n         LA    R3,2(0,R7)\n         BAL   R11,DECCONV\n         L     R15,FIELDA\n         SLL   R15,24\n         SLDL  R14,8               SHIFT IN 'X'\n         ST    R14,FIELDA\n         UNPK  DOUBLE(5),FIELDA+2(3)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   MSGTEXT+18(4),DOUBLE\n         SPACE 1\nLXYZREQ2 LA    R1,MSGLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         B     EXIT1\nMSTCONS  CLC   XAS(8),2(R3)        PASSWORD PROVIDED\n         BNE   NOAUTH              NO\n         L     R15,16              CVT\n         L     R15,100(0,R15)      UCM BASE\n         LA    R6,0(0,R15)         UCM\n         S     R6,=F'4'               MCS\n         L     R6,0(0,R6)                PREFIX ADDR\n         L     R7,0(0,R6)          MSTCONS UCM ENTRY ADDR\n         L     R9,72(0,R15)        UCM 1ST ENTRY ADDR\n         LM    R4,R5,76(R15)       UCM ENTRY LENGTH AND LAST ENTRY ADDR\n         SR    R14,R14\n         IC    R14,XAU             CONSOLE ID TO SWITCH MSTCONS TO\n         SPACE 1\nMSTCONS1 CLM   R14,1,26(R9)        UCM ID MATCH\n         BNE   MSTCONS2            NO, CHECK NEXT\n         TM    25(R9),X'10'        IS CONSOLE ACTIVE\n         BZ    MSTCONS3            NO, ERROR\n         TM    42(R9),X'50'        IS CONSOLE DISPLAY TYPE\n         BNZ   MSTCONS3            NO, ERROR\n         B     MSTCONS4            YES, CONTINUE\n         SPACE 1\nMSTCONS2 BXLE  R9,R4,MSTCONS1      NEXT UCM ENTRY\n         SPACE 1\nMSTCONS3 LA    R1,UCMMSG           UCM ID ERROR MSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT1\n         SPACE 1\nMSTCONS4 ST    R9,0(0,R6)          SAVE NEW MSTCONS UCM ENTRY\n         OI    42(R9),X'80'        SET MSTCONS BIT ON NEW MSTCONS\n         NI    42(R7),X'7F'        SET MSTCONS BIT OFF OLD MSTCONS\n         LA    R1,MSTCMSG          MSTCONS SWITCH MSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT1\n         SPACE 1\nNOAUTH   LA    R1,AUTHMSG          NO AUTHORITY\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT1\nBRODCST  L     R15,16              CVT\n         L     R15,100(0,R15)      UCM BASE\n         L     R9,72(0,R15)        UCM 1ST ENTRY ADDR\n         LM    R4,R5,76(R15)       UCM ENTRY LENGTH AND LAST ENTRY ADDR\n         SR    R14,R14\n         SPACE 1\nBRODCST1 ICM   R14,1,26(R9)        LOAD UCMID\n         TM    25(R9),X'10'        IS CONSOLE ACTIVE\n         BZ    BRODCST2            NO, NEXT\n         TM    42(R9),X'50'        IS CONSOLE DISPLAY TYPE\n         BNZ   BRODCST2            NO, NEXT\n         B     BRODCST3\n         SPACE 1\nBRODCST2 BXLE  R9,R4,BRODCST1      NEXT UCM ENTRY\n         CLC   TESTWTO(2),=X'0A23' WTO REPLACED\n         BE    EXIT1               NO\n         LA    R1,MSGLIST          WTO PARM LIST ADDR\n         SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         SVC   35                  WTO\n         B     EXIT1\n         SPACE 1\nBRODCST3 STC   R14,XAU             SAVE UCMID\n         MVC   MSGTEXT(70),4(R3)\n         MVC   MSGLIST(4),=X'004A0100'\n         LA    R8,1                DEFAULT NO. OF MSGS\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),1(R3)\n         CLC   DOUBLE(2),=C'00'\n         BNE   BRODCST4\n         PACK  DOUBLE(8),1(2,R3)\n         CVB   R8,DOUBLE\n         LTR   R8,R8               FORCE AT LEAST 1\n         BNZ   *+8\n         LA    R8,1\n         CH    R8,=H'30'           MAX\n         BNH   BRODCST4\n         LA    R8,30\n         SPACE 1\nBRODCST4 SR    R0,R0               LOAD\n         IC    R0,XAU                 UCM ID\n         LA    R1,MSGLIST          WTO PARM LIST ADDR\n         SVC   35                  WTO\n         BCT   R8,BRODCST4\n         B     BRODCST2\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESK03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT1\n         LTORG\n         SPACE 5\nTESTSEQ  IC    R0,XAU              UCM ID\nTESTWTO  SVC   35                  WTO\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\nMASK     DC    X'4020206B2020206B2020206B202120'\n         SPACE 3\nERRMSG   DC    CL44'CALCULATOR PARAMETER ERROR'\n         SPACE 3\nLXYZMSG  DC    CL44'LXYZ TRANSLATE PARM ERROR'\n         SPACE 3\nUCMMSG   DC    X'00300100'\n         DC    CL44'CONSOLE NOT ACTIVE, MSTCONS NOT SWITCHED'\n         SPACE 3\nAUTHMSG  DC    X'00300100'\n         DC    CL44'AUTHORITY INVALID, MSTCONS NOT SWITCHED'\n         SPACE 3\nMSTCMSG  DC    X'00300100'\n         DC    CL44'MSTCONS SWITCHED TO THIS CONSOLE'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nDIVMSG   DC    CL44'ANY IDIOT KNOWS YOU CANNOT DIVIDE BY ZERO'\nWORK     DSECT\nWORKSTRT DS    0D\nDOUBLE   DS    D\nDOUBLEA  DS    D\nDOUBLEB  DS    D\nDOUBLEC  DS    D\nFIELDA   DS    F\nFIELDB   DS    F\nRESULT   DS    F\nSAVRET   DS    F\nXSASAVE  DS    F\nFUNCTION DS    C\n         SPACE 3\n         DS    0F\nSMFLIST  DS    0CL52\n         DS    F\nSMFANS   DS    CL48\n         DS    0F\nWTOLIST  DS    0CL48\n         DS    F\nANSWER   DS    CL8\n         DS    CL4\nANSWER2  DS    CL32\n         SPACE 3\n         DS    0F\nMSGLIST  DS    0CL74\n         DS    F\nMSGTEXT  DS    CL70\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSL03D\n         PRINT NOGEN                                               @TEC\n         TITLE 'IEESL03D -   #J  DISPLAY ACTIVE REPLACEMENT'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESL03D -       #J  DISPLAY ACTIVE REPLACEMENT           ***\n***                                                                 ***\n***       VERSION -        3.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        05/27/81                                 ***\n***                        RICK LEOPOLDI RLL-CHANGE ESTAE PARM LEN. ***\n***                                      RLL-HAVE IN & OUT DISPLAYSQQ**\n***                        02/22/82 --BCB TEST FOR END OF ASCBS     ***\n***                        05/25/83 - OUR VERSION OF #J             ***\n***                        02/07/84 -JAL-SNET ADD 31-BIT CODING     ***\n***                                      FOR XA.                    ***\n***                        06/07/83 - FIX NUMBER OF ASCB ON         ***\n***                                      #JC SO NO OVERLAY OF CSA   ***\n***                        11/12/89 - FIX FOR ESA -                 ***\n***                                      NO ASCBSEQN                ***\n***                        20/08/91 -JCL-TEC CHANGE ELAPSED TIME    ***\n***                                      FORMAT TO HHH:MM:SS        ***\n***                                 -    DROPPED SEQN & RT          ***\n***                                 -    FORMAT DEVICE CONNECT TIME ***\n***                                 -    SHOW SWAP REASON CODE IN   ***\n***                                      CLEAR TEXT, NOT HEX        ***\n***                                 -    SHOW ON #JC ONLY IF CPU    ***\n***                                      TIME ACCUMULATED           ***\n***                                 -    USE AUTH SVC232/MODESET TO ***\n***                                      DISPLAY VTAM TERMID        ***\n***********************************************************************\n***********************************************************************\nIEESL03D CSECT\n         LR    R12,R15\n         USING IEESL03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         MVI   CPUSW,0             SET FOR PASS 1\n**       GET SPACE FOR #JC TABLE\n         L     R4,CVTPTR           CVT ADDR\n         USING CVT,R4\n         L     R4,CVTASVT          ASVT ADDR\n         USING ASVT,R4\n         L     R4,ASVTMAXU         GET NUMBER OF ASCBS\n         DROP  R4\n         MH    R4,=H'6'            6 BYTES PER ENTRY\n         ST    R4,CPUSSIZ\n         GETMAIN R,LV=(R4),SP=0    GET PRIVATE AREA\n         ST    R1,CPUSAVE\n         LR    R0,R1               GET ADDRESS\n         LR    R1,R4               GET LENGTH\n         SR    R2,R2\n         SR    R3,R3\n         MVCL  R0,R2\n         L     R2,XSASAVE          GET XSA ADDR\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31\n         BSM   0,R9\nAMODE31  DC    A(CONT31+X'80000000')\nCONT31   DS    0H\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L     * ESTAE PARM FIX *\nESTAEOVX EQU   *-ESTAEOVL          * ESTAE PARM FIX *\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX *\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVI   TSOSW,C' '\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY PARM\n         BZ    PARM2               NO\n         MVC   TSOSW(2),0(R3)      SAVE PARM\n         CLI   TSOSW,C'T'          TSO DISPLAY\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C'I'          *** DISPLAY IN-QUEUE ONLY ***\n         BE    PARM2               *** YES, CONTINUE ***\n         CLI   TSOSW,C'O'          *** DISPLAY OUT-QUEUE ONLY **\n         BE    PARM2               *** YES, CONTINUE ***\n         CLI   TSOSW,C'C'          IS THIS CPU PERCENTAGE\n         BE    PARM2               YES CONTINUE\n         CLI   TSOSW,C' '          TEST FOR A BLANK\n         BE    PARM1               YES CONTINUE\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),TSOSW\n         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY\n         BNE   PARM1\n         PACK  DOUBLE(8),TSOSW(2)\n         CVB   R1,DOUBLE\n         STC   R1,DOMAIN           SAVE DOMAIN\n         MVI   TSOSW,C'D'\n         B     PARM2\nPARM1    MVI   TSOSW,C' '\nPARM2    MVC   WTOLIST(4),=X'004A0100'                             @TEC\n         MVI   SCANRET,C' '        SET FOUND\n         SR    R8,R8               CLEAR ASID\n         MVI   SCANTYPE,C'I'       SET IN QUEUE SCAN\n         L     R11,CPUSAVE         POINT AT FIRST ENTRY IN TAB\n         ST    R11,ACPUSAVE        SAE IT\n         CLI   TSOSW,C'O'          *** IS THIS OUT-Q DISPLAY ***\n         BE    JOBOUT5             *** YES - THEN GET OUT    ***\n         MVC   HDRTMP,HDRI         SAVE IN HDR\n         MVC   DOUBLE(1),TSOSW     SAVE PARM VALUE\n         CLI   TSOSW,C'C'          CPU REQUEST\n         BNE   BK50\n         MVI   TSOSW,0             CLEAR FOR HEADER WTO TO APPEAR\n         MVC   HDRTMP+56(8),=CL8'CPU-PCT'\nBK50     LA    R1,HDRTMP\n         BAL   R11,MSGRTN1\n         MVC   TSOSW(1),DOUBLE     RESTORE PARM\nJOBOUT   MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(77),JOBMSG\n         LR    R5,R8               LOAD ASID\n         LTR   R5,R5               ZERO ASID\n         BZ    *+6                 YES, BYPASS ADJUST\n         BCTR  R5,0                ADJUST ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,CVTPTR           CVT ADDR\n         USING CVT,R4\n         L     R4,CVTASVT          ASVT ADDR\n         USING ASVT,R4\n         L     R6,ASVTMAXU         GET NUMBER OF ASCBS\n         MH    R6,=H'4'            GET OFFSET TO END OF TABLE\n         LA    R6,ASVTENTY(R6)     POINT AT END OF TABLE\n         ST    R6,JASVTEND         SAVE ADDR OF END OF TABLE\n         LA    R4,ASVTFRST(R5)     ASCB SLOT ADDR\n         USING ASVTFRST,R4\n         B     JOBOUT4\nJOBOUT1  L     R5,ASVTFRST         ASCB ADDR\n         USING ASCB,R5\n         L     R6,ASCBCSCB         CSCB ADDR\n         L     R7,ASCBOUCB         LOAD OUCB ADDR\n         USING OUCB,R7\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BNE   JOBOUT2             NO\n         CLI   OUCBSRC,0           DOES IT HAVE A SWAP REASON CODE\n         BNE   JOBOUT6             YES, CHECK SRC\n         B     JOBOUT3             CONTINUE\nJOBOUT2  CLI   OUCBSRC,0           THIS HAVE A SWAP REASON CODE?\n         BE    JOBOUT4             NO, IT'S IN THE IN QUEUE\n         CLI   OUCBSRC,X'06'       DETECTED WAIT\n         BNE   JOBOUT3             NO, OUT QUEUE\n         TM    OUCBEFL,OUCBMWT     MSO DETECTED WAIT BIT ON\n         BZ    JOBOUT4             NO, SRC IS NO GOOD\nJOBOUT3  CLI   TSOSW,C'I'          *** IN-QUEUE ONLY ***\n         BE    JOBOUTIO            *** YES, DO IT    ***\n         CLI   TSOSW,C'O'          *** OUT-QUEUE ONLY***\n         BNE   JOBOUTCN            *** NO ,CONTINUE  ***\nJOBOUTIO EQU   *                   *** WRITE IN/OUT  ***\n         CLC   SCANTYPE(1),TSOSW   *** IN/OUT=OPTION?***\n         BNE   JOBOUT4             *** NO, DONT WRITE***\nJOBOUTCN EQU   *                   *** YES, DO IT    ***\n         L     R6,ASCBOUCB         OUCB ADDR\n         BAL   R11,ASCBFORM        GO FORMAT ASCB INFO\n         L     R3,ASCBTSB          TSB ADDR\n         ST    R5,ASCBADDR         SAVE ASCBADDR\n         L     R5,ASCBCSCB         CSCB ADDR\n         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO\n         BAL   R11,OUCBFORM        GO FORMAT OUCB INFO\n         BAL   R11,DCTIFORM        FORMAT DEVICE CONNECT           @TEC\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         BAL   R11,CPURTN          GO SEE IF CPU RTN NEEDED\nJOBOUT4  LA    R4,ASVTFRST+4       INCR INTO ASVT\n         C     R4,JASVTEND         END OF ASVT\n         BNL   JOBOUT5             YES, RETURN\n         TM    0(R4),X'80'         AVAILABLE ENTRY\n         BO    JOBOUT4             YES, CHECK NEXT\n         B     JOBOUT1             GO USE IT\nJOBOUT5  CLI   SCANTYPE,C'O'       OUT QUEUE SCAN\n         BE    RETURN              YES, EXIT\n         CLI   TSOSW,C'I'          *** IS THIS IN-Q DISPLAY ***\n         BE    RETURN              *** YES - THEN GET OUT   ***\n         MVI   SCANRET,C' '        INIT OUTPUT SWITCH\n         MVI   SCANTYPE,C'O'       SET OUT QUEUE SCAN NEXT\n         CLI   TSOSW,C'C'          CPU REQUEST\n         BNE   JOBOUT5A\n         CLI   CPUSW,0             PASS 0\n         BE    JOBOUT              YES NO WTO NOW\nJOBOUT5A DS    0H\n         MVC   DOUBLE(1),TSOSW     SAVE SCAN TYPE\n         MVC   HDRTMP,HDRO         SAVE OUT HDR\n         CLI   TSOSW,C'C'          IS IT CPU REQUEST\n         BNE   JOBOUT5B\n         MVI   TSOSW,C' '          CLEAR FOR WTO\n         MVC   HDRTMP+56(8),=CL8'CPU-PCT'\nJOBOUT5B DS    0H\n         LA    R1,HDRTMP\n         BAL   R11,MSGRTN1\n         MVC   TSOSW,DOUBLE        RESTORE REQUEST TYPE\n         B     JOBOUT              NEXT PASS\nJOBOUT6  CLI   OUCBSRC,X'06'       DETECTED WAIT\n         BNE   JOBOUT4             NO, OUT QUEUE\n         TM    OUCBEFL,OUCBMWT     MSO DETECTED WAIT BIT ON\n         BZ    JOBOUT3             NO, SRC IS NO GOOD\n         B     JOBOUT4             OUT QUEUE\n         DROP  R5,R7\n         USING ASCB,R5\n         USING OUCB,R6\nASCBFORM UNPK  DOUBLE(5),ASCBASID(3)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASID(2),DOUBLE+2    SET ASID IN MSG\n         SR    R9,R9\n         UNPK  HEXWORK,ASCBDP(5)   CONVERT\n         TR    HEXWORK(8),TRBINHEX-X'F0'  DISP PRIORITY\n         MVC   DPRTY(2),HEXWORK    TO EBCDIC\n         MVC   EXECTIME(11),=XL11'402021207A40404B404040'          @TEC\n         LM    R14,R15,ASCBEJST    CPU TIME\n         SRDL  R14,12              GET INTO MICROSECONDS\n         D     R14,=F'1000'        GET INTO MILLISECONDS\n         SR    R14,R14\n         D     R14,=F'10'          HUNDREDTHS\n         SR    R14,R14\n         D     R14,=F'100'         SECONDS\n         CVD   R14,DOUBLE          HUNDREDTHS TO PRINT\n         UNPK  EXECTIME+8(2),DOUBLE+6(2)\n         OI    EXECTIME+9,X'F0'\n         SR    R14,R14\n         D     R14,=F'60'          MINUTES\n         CVD   R14,DOUBLE          SECONDS TO PRINT\n         UNPK  EXECTIME+5(2),DOUBLE+6(2)\n         OI    EXECTIME+6,X'F0'\n         CVD   R15,DOUBLE          MINUTES TO PRINT\n         ED    EXECTIME(4),DOUBLE+6\n         USING CVT,R1              CVT BASE\n         L     R1,CVTPTR           A(CVT)\n         L     R1,CVTOPCTP         A(RMCT)\n         DROP  R1\n         L     R15,124(R1)         CURRENT TIME        ***NO DSECT\n         SL    R15,OUCBTMO         ELAPSED TIME IN 1.024 MILL UNITS\n         SR    R14,R14\n         D     R14,=A(1024)        ELAPSED TIME IN SECONDS\n         LR    R14,R15             SECONDS -> R14                  @TEC\n         SRDA  R14,32              SET UP TO DIVIDE                @TEC\n         D     R14,=A(60)          DIVIDE BY 60                    @TEC\n         CVD   R14,DOUBLE          SECONDS TO PACKED               @TEC\n         MVC   ETSS-2(4),=X'40212020'                              @TEC\n         ED    ETSS-2(4),DOUBLE+6                                  @TEC\n         LR    R14,R15             MINUTES -> R14                  @TEC\n         SRDA  R14,32              SET UP TO DIVIDE                @TEC\n         D     R14,=A(60)          DIVIDE BY 60                    @TEC\n         CVD   R14,DOUBLE          MINUTES TO PACKED               @TEC\n         MVC   ETMM-2(4),=X'40212020'                              @TEC\n         ED    ETMM-2(4),DOUBLE+6                                  @TEC\n         CVD   R15,DOUBLE          HOURS TO PACKED                 @TEC\n         MVC   ETHH-1(4),=X'40212020'                              @TEC\n         ED    ETHH-1(4),DOUBLE+6                                  @TEC\n         MVI   ETMM+2,C':'                                         @TEC\n         MVI   ETHH+3,C':'                                         @TEC\n         BR    R11\n         DROP  R5,R6\nDCTIFORM DS    0H\n         L     R5,ASCBADDR         RESTORE ASCB ADDRESS            @TEC\n         L     R6,144(0,R5)        OUCB ADDR                       @TEC\n         CLI   41(R6),X'00'        SWAP REASON CODE?               @TEC\n         BNER  R11                 YES. SKIP SWAPPED OUT           @TEC\n         L     R6,380(0,R5)        ASCBDCTI                        @TEC\n         SRDA  R6,32                                               @TEC\n         M     R6,=F'83'                                           @TEC\n         LR    R6,R7                                               @TEC\n         SRDA  R6,32                                               @TEC\n         D     R6,=F'10000'        ASCBDCTI*8.3 MSEC               @TEC\n         LR    R6,R7                                               @TEC\n         SRDA  R6,32                                               @TEC\n         D     R6,=F'64'           DEDUCED EMPIRICALLY (?)         @TEC\n         CVD   R7,DOUBLE           PACK DEVICE CONNECT TIME        @TEC\n         MVC   DCTI-2(6),=X'402020202120'                          @TEC\n         ED    DCTI-2(6),DOUBLE+5                                  @TEC\n         BR    R11                                                 @TEC\n         USING CHAIN,R5\n         USING OUCB,R6\n         USING TSB,R3\nCSCBFORM CLI   TSOSW,C'T'          TSO USER DISPLAY\n         BNE   CSCBFRM0            NO\n         CLI   CHTRKID,CHTSID      TSO USER\n         BNE   JOBOUT4             NO, BYPASS\n         B     CSCBFRM6\nCSCBFRM0 CLI   CHTRKID,CHTSID      TSO USER\n         BE    JOBOUT4             YES, DONT PROCESS\n         CLI   CHTRKID,CHINITID    INIT\n         BNE   CSCBFRM3            NO, GO HANDLE\n         LA    R9,CHAIN            SAVE CSCB ADDR\n         SR    R10,R10             INSERT\n         IC    R10,CHASID\n         SLL   R10,8               ASID\n         IC    R10,CHASID+1\nCSCBFRM1 L     R5,CHAIN            NEXT CSCB\n         LA    R5,CHAIN            CLEAR HIGH ORDER\n         LTR   R5,R5               END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R5,R9               LOAD CSCB ADDR\n         B     JOBOUT4             NO GOOD\n         CR    R5,R9               SAME CSCB\n         BE    JOBOUT4             YES, NO GOOD\n         CH    R10,CHASID          SAME ASID\n         BNE   CSCBFRM1            NO, CHECK NEXT\nCSCBFRM2 MVC   JOBNAME(8),CHKEY\n         MVC   STEPNAME(8),CHSTEP\n         MVC   PROCNAME(8),CHPROCSN\n         B     CSCBFRM4\nCSCBFRM3 MVC   JOBNAME(8),CHCLS\n         MVC   STEPNAME(8),CHKEY\n         MVC   PROCNAME(8),CHPROCSN\nCSCBFRM4 CLI   TSOSW,C'D'          DOMAIN DISPLAY\n         BNE   CSCBFRM5            NO\n         CLC   DOMAIN(1),OUCBDMN   DOMAIN MATCH\n         BNE   JOBOUT4\nCSCBFRM5 CLC   ASID(2),=C'01'\n         BCR   7,R11\n         MVC   JOBNAME(26),=CL26'MASTER'\n         BR    R11\nCSCBFRM6 MVC   JOBNAME(8),CHKEY\n         MVC   STEPNAME(8),CHCLS\n         CLC   TSTSVC35(2),=X'0A23'  IS THIS TSO EXECUTION OF #J\n         BE    CSCBFRM7            NO. SKIP AUTH.\n         LA    R0,1                                                @TEC\n         SVC   232                                                 @TEC\n         MODESET KEY=ZERO                                          @TEC\n         MVC   PROCNAME(8),TSBTRMID  GET VTAM TERM NAME\n         MODESET KEY=NZERO                                         @TEC\n         SR    R0,R0                                               @TEC\n         SVC   232                                                 @TEC\n         B     CSCBFRM5\nCSCBFRM7 MVC   PROCNAME(8),TSBTRMID  GET VTAM TERM NAME\n         B     CSCBFRM5\n         DROP  R3,R5,R6\n         USING OUCB,R6\n         USING ASCB,R5\nOUCBFORM DS    0H\n         CLI   OUCBSRC,X'00'       JOB ON IN QUEUE\n         BE    OUCBFRM0            YES, NO SWAP REASON\n         SR    R15,R15                                             @TEC\n         IC    R15,OUCBSRC                                         @TEC\n         SLL   R15,1               SRC TIMES 2                     @TEC\n         LA    R15,SRCTAB(R15)     GET TEXT VERSION                @TEC\n         MVC   SRC(2),0(R15)       FORMAT SRC                      @TEC\nOUCBLOG1 DS    0H\nOUCBFRM0 MVC   FLAGS(2),=CL2'NS'\n         UNPK  HEXWORK,OUCBSWC(5)  SWAP COUNT\n         TR    HEXWORK(8),TRBINHEX-X'F0'\n         MVC   SC(2),HEXWORK+2\n         LH    R1,OUCBNPG\n         CVD   R1,DOUBLE\n         UNPK  PG-1(3),DOUBLE+6(2)\n         OI    PG+1,X'F0'\n         MVI   PG-1,C' '\n         TM    OUCBSFL,OUCBNSW     NON-SWAPPABLE\n         BO    OUCBFRM1\n         MVC   FLAGS(2),=CL2'IN'\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BE    OUCBFRM1\n         MVC   FLAGS(2),=CL2'OU'\n         TM    OUCBQFL,OUCBLSW     ARE WE LOGICAL\n         BZ    *+10                IF NOT SKIP\n         MVC   SRC(2),=CL3'LG'     MARK AS LOGICAL SWAP\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB\n         BZ    OUCBFRM1            NO, JUST OUT\n         MVC   FLAGS(2),=CL2'GO'\n         TM    OUCBQFL,OUCBGOO     GOING OUT\n         BO    OUCBFRM1\n         MVC   FLAGS(2),=CL2'GB'\n         TM    16(R6),X'20'        TRANSITIONING\n         BO    OUCBFRM1\n         MVC   FLAGS(2),=CL2'GI'\nOUCBFRM1 MVC   FLAGS+2(2),=CL2'A'\n         TM    OUCBYFL,OUCBAXS     AUX STORAGE SHORTAGE\n         BCR   1,R11\n         MVC   FLAGS+2(2),=CL2'S'\n         TM    OUCBYFL,OUCBFXS     REAL STORAGE SHORTAGE\n         BCR   1,R11\n         MVC   FLAGS+2(2),=CL2'LW'\n         TM    OUCBEFL,OUCBLWT     LONG WAIT\n         BCR   1,R11\n         MVC   FLAGS+2(2),=CL2'MW'\n         TM    OUCBEFL,OUCBMWT     DETECTED WAIT\n         BCR   1,R11\n         MVC   FLAGS+2(2),=CL2'CP'\n         TM    OUCBAFL,OUCBCPL     CPU USER\n         BCR   1,R11\n         MVC   FLAGS+2(2),=CL2' '\n         BR    R11\n         DROP  R5,R6\n****     PROCESS #JC TO ACCUMULATE JOB CPU %\nCPURTN   DS    0H\n         CLI   TSOSW,C'C'          CPU % REQUEST ?\n         BNER  R11                 NO, JUST EXIT\n         L     R5,ASCBADDR         RESTORE ASCB ADDRESS\n         USING ASCB,R5             RESET BASE\n         LM    R14,R15,ASCBEJST    TCB TOD CPU SECONDS\n         SRDL  R14,12              MICS\n         D     R14,=F'1000'        MILLS\n         LR    R9,R15              SAVE TCB MILLS\n         LM    R14,R15,ASCBSRBT    SRB TOD CPU MILLS\n         SRDL  R14,12              MICS\n         D     R14,=F'1000'        MILLS\n         ALR   R15,R9              TCB+SRB MILLS\n         CLI   CPUSW,0             PASS 0 ?\n         BNE   CPURTN11            NO, DO PASS 1 PROCESSING\n         L     R10,ACPUSAVE        CURRENT CPU TABLE ADDRESS\n         MVC   0(2,R10),ASCBASID\n         ST    R15,2(,R10)         SAVE CPU MILLS\n         LA    R10,6(,R10)         BUMP TABLE POINTER\n         ST    R10,ACPUSAVE        SAVE UPDATED ADDRESS\n         BR    R11                 AND RETURN\nCPURTN11 DS    0H\n         L     R10,CPUSAVE         BEGIN OF CPU TABLE\nCPURTN12 CLC   ASCBASID,0(R10)     ASID FOUND?\n         BE    CPURTN22            YES, CONTINUE PROCESSING\n         CLC   =XL2'00',0(R10)     END OF ENTRIES?\n         BER   R11                 YES, THIS AS NOT FOUND JUST RETURN\n         LA    R10,6(,R10)         NEXT ENTRY\n         B     CPURTN12            CONTINUE SCAN\nCPURTN22 DS    0H\n         S     R15,2(,R10)         GET CPU TIME USED\n         BNM   CPURTN44            AND FORMAT IF NOT MINUS\n         MVC   EXECTIME(11),=CL11' '  CLEAR FIELD\n         MVC   EXECTIME+5(4),=C'****'  SHOW CANT FORMAT IT\n         B     CPURTN55            AND GO PRINT IT\nCPURTN44 EQU   *\n         MH    R15,=H'100'         X 100\n         SR    R14,R14\n         D     R14,=A(2*1000)      MILLS IN 2 SECONDS\n         MVC   EXECTIME(11),=X'4040402020204B21204040'  BFG\n         CVD   R15,DOUBLE\n         ED    EXECTIME(06),DOUBLE+6  PRINTABEL FORMAT\n         LR    R15,R14             SAVE REMAINDER\n         MH    R15,=H'100'         X 100\n         SR    R14,R14\n         D     R14,=A(2*1000)      GET % OF A SEC\n         LTR   R15,R15                                             @TEC\n         BZR   R11                 SKIP IF ZERO PERCENT            @TEC\n         CVD   R15,DOUBLE\n         UNPK  EXECTIME+7(2),DOUBLE+6(2)\n         OI    EXECTIME+8,X'F0'\nCPURTN55 EQU   *\n         MVI   TSOSW,C'N'          SAY CPU REQ NOT ACTIVE\n         LA    R1,WTOLIST          A(MSG)\n         ST    R11,DOUBLE          SAVE OUR RETURN\n         BAL   R11,MSGRTN          GO DO WTO NOW\n         MVI   TSOSW,C'C'          SAY CPU REQ ACTIVE NOW\n         L     R11,DOUBLE          RESTORE RETURN ADDRESS\n         BR    R11                 RETURN\n         DROP  R5\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n**************************************************************\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE\n*  OPERANDS, REGISTERS, AND PSW IN IT.\n**************************************************************\n         STM   R14,R12,12(R13)     SAVE REGISTER\n         LR    R14,R13             SAVE ORIG R13\n         L     R13,0(R1)           GET ESTAE PARM\n         L     R2,XSASAVE          GET XSA ADDRESS\n         LR    R13,R14             RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA\n*                                  AND EBCDIC\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA\n         B     ESTNOP              SKIP CONSTANTS\n         ESTMODS ,\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS\n         LA    R3,ESTMODS          POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,                   X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(IEESL03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\nMSGRTN   MVI   SCANRET,C'P'\nMSGRTN1  CLI   TSOSW,C'C'          CPU REQUEST ACTIVE\n         BER   R11\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\nTSTSVC35 EQU   *\n         SVC   35                  ISSUE WTO\n         BR    R11\nRETURN   EQU   *\n         CLI   TSOSW,C'I'          *** IS THIS IN-Q DISPLAY ***\n         BE    GOBACK              *** YES - THEN GET OUT   ***\n         CLI   TSOSW,C'C'          CPU REQUEST?\n         BNE   RETURN1             NO SO EXIT\n         CLI   CPUSW,0             PASS 0?\n         BNE   RETURN1\n         MVI   CPUSW,1             SAY PASS 1 NOW IN EFFECT\n         MVI   SCANTYPE,C'I'       RESET FOR FULL SCAN\n         STIMER  WAIT,BINTVL=WAITINTV  WAIT FOR A WHILE\n         B     JOBOUT              AND DO PASS 1\nRETURN1  EQU   *\n         CLI   SCANRET,C' '        ANY FOUND\n         BE    NOTFOUND            NO, TELL OPERATOR\nGOBACK   EQU   *                   *** THIS BYPASS NOTFOUND ***\n         ESTAE 0                   ********\n         L     R1,CPUSAVE          GET ADDRESS\n         LTR   R1,R1               ANY AREA\n         BZ    GOBACK1\n         L     R0,CPUSSIZ          GET SIZE\n         FREEMAIN  R,LV=(0),A=(1)\nGOBACK1  EQU   *\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         LA    R8,AMODE24\n         BSM   0,R8\nAMODE24  DS    0H\n         SR    R15,R15\n         BR    R14\nNOTFOUND LA    R11,RETURN\n         LA    R1,NFNDMSG\n         B     MSGRTN\n         LTORG\nSRCTAB   DC    CL2'  '             00=??                           @TEC\n         DC    CL2'TO'             01=TERMINAL OUTPUT WAIT         @TEC\n         DC    CL2'TI'             02=TERMINAL INPUT WAIT\n         DC    CL2'LW'             03=LONG WAIT                    @TEC\n         DC    CL2'AU'             04=AUX STORAGE SHORTAGE         @TEC\n         DC    CL2'RS'             05=REAL STORAGE SHORTAGE        @TEC\n         DC    CL2'DW'             06=DETECTED WAIT                @TEC\n         DC    CL2'RQ'             07=REQUESTED                    @TEC\n         DC    CL2'NQ'             08=ENQUEUE EXCHANGE             @TEC\n         DC    CL2'EX'             09=WORKLOAD EXCHANGE            @TEC\n         DC    CL2'UN'             0A=UNILATERAL                   @TEC\n         DC    CL2'TR'             0B=TRANSITION                   @TEC\n         DC    CL2'LG'             0C=LOGICAL                      @TEC\n         DC    CL2'LF'             0D=LOGICAL FAILED               @TEC\n         DC    CL2'  '             0E=??                           @TEC\n         DC    CL2'  '             0F=??                           @TEC\nWAITINTV DC    A(100*2)            WAIT 2 SECONDS\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\nTRBINHEX DC    C'0123456789ABCDEF'\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         DS    0F\nNFNDMSG  DC    X'00360100'\n         DC    CL50'NO JOBS ON OUT QUEUE'\nHDRI     DC    Y(HDRIEND-HDRI),X'0100'\n         DC    CL27'*****   IN  QUEUE   *****'\n         DC    CL3'ID'\n         DC    CL3'DP'\n         DC    CL3'PG'\n         DC    CL3'SC'\n         DC    CL5'FLGS'\n         DC    CL5'DCTI'                                           @TEC\n         DC    CL1'  '                                             @TEC\n         DC    CL11'  TCB TIME'\n         DC    CL3' ET'\nHDRIEND  EQU   *\nHDRO     DC    Y(HDROEND-HDRO),X'0100'\n         DC    CL27'*****   OUT  QUEUE   *****'\n         DC    CL3'ID'\n         DC    CL3'DP'\n         DC    CL3'PG'\n         DC    CL3'SC'\n         DC    CL5'FLGS'\n         DC    CL3'SR'\n         DC    CL3'  '\n         DC    CL11'  TCB TIME'\n         DC    CL3' ET'\nHDROEND  EQU   *\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nDL3      EQU   DOUBLE+5,3\nDL2      EQU   DOUBLE+6,2\nASCBADDR DS    F\nXSASAVE  DS    F\nJASVTEND DS    F\nSCANRET  DS    C\nSCANTYPE DS    C\nTSOSW    DS    2C\nCPUSW    DS    X\nDOMAIN   DS    C\nHEXWORK  DS    XL9\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL78\nJOBNAME  DS    CL9\nSTEPNAME DS    CL9\nPROCNAME DS    CL09\nASID     DS    CL3\nDPRTY    DS    CL3\nPG       DS    CL3\nSC       DS    CL3\nFLAGS    DS    CL5\nSRC      DS    CL3\n         ORG   SRC                                                 @TEC\nDCTI     DS    CL4                                                 @TEC\n         ORG   SRC+3                                               @TEC\nRT       DS    CL3\nEXECTIME DS    CL11\nETHH     DS    CL3,C                                               @TEC\nETMM     DS    CL2,C                                               @TEC\nETSS     DS    CL2                                                 @TEC\n         ORG   JOBMSG+78                                           @TEC\nACPUSAVE DS    F                   ADDR OF CURRENT CPUSAVE ENTRY\nCPUSAVE  DS    F                   BEGINNING OF CPU TABLE\nCPUSSIZ  DS    F                   SIZE OF CPU TABLE\nHDRTMP   DS    CL68\nESTAELST DS    5F                  ********\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\n         IRAOUCB\nIEECSCB  DSECT\n         IEECHAIN\n         IKJTSB\n         IHAASVT\n         CVT   DSECT=YES\n         IHAASCB\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSM03D\n         TITLE 'IEESM03D -   #H  DISPLAY HELP'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESM03D -       #H  DISPLAY HELP                         ***\n***                                                                 ***\n***       VERSION -        2.5                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        08/10/81  JSG - NERDC CHANGES          NERDC\n***                        12/28/81  AXC-CBT HANDLE #Z ADDITION     ***\n***                                          ADD #IR DESCRIPTION    ***\n***                        09/27/82  AXC-CBT UPDATE #V FOR 3375 AND ***\n***                                          3380 MATRIX            ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESM03D CSECT\n         LR    R12,R15\n         USING IEESM03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD SUB-PARM ADDR\n         MVC   WTOLIST(4),=X'00340100'\n         LA    R4,CMDTAB           LOAD COMMAND HELP TABLE ADDR\n         LTR   R3,R3               ANY PARMS\n         BZ    PRINT               NO, LEVEL 1 HELP\n         CLI   0(R3),C'#'          ## COMMAND HELP\n         BNE   PARM                NO\n         LA    R3,1(0,R3)          INCR 1\n         LA    R4,CMD#TAB          ## COMMAND HELP TABLE ADDR\n         SPACE 3\nPARM     CLC   0(1,R3),0(R4)       TABLE MATCH\n         BE    PRINT               YES, USE IT\n         LA    R4,4(0,R4)          NEXT ENTRY\n         CLI   0(R4),X'00'         END OF TABLE\n         BNE   PARM                NO, CONTINUE\n         LA    R1,ERRMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     RETURN\nPRINT    L     R5,0(0,R4)          LEVEL 2 HELP LIST\n         SPACE 3\nPRINT1   MVC   WTOLIST+4(48),0(R5)\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R5,48(0,R5)         NEXT MSG\n         CLI   0(R5),X'00'         END OF MSGS\n         BNE   PRINT1              NO, CONTINUE\nRETURN   EQU   *\n         ESTAE 0\n         L     R0,SIZE             LOAD FREEMAIN SIZE\n         LR    R1,R13              LOAD FREEMAIN ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14                 EXIT\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESM03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\n         LTORG\n         SPACE 5\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nERRMSG   DC    X'00340100'\n         DC    CL48'HELP NOT AVAILABLE FOR THIS COMMAND, ENTER #H'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nCMDTAB   DS    0F\n         DC    C'H',AL3(HDRTAB)\n         DC    C'A',AL3(ATAB)\n         DC    C'C',AL3(CTAB)\n         DC    C'D',AL3(DTAB)\n         DC    C'E',AL3(ETAB)\n         DC    C'F',AL3(FTAB)\n         DC    C'I',AL3(ITAB)\n         DC    C'J',AL3(JTAB)\n         DC    C'L',AL3(LTAB)\n         DC    C'M',AL3(MTAB)\n         DC    C'N',AL3(NTAB)\n         DC    C'O',AL3(OTAB)\n         DC    C'P',AL3(PTAB)\n         DC    C'Q',AL3(QTAB)\n         DC    C'R',AL3(RTAB)\n         DC    C'S',AL3(STAB)\n         DC    C'T',AL3(TTAB)\n         DC    C'V',AL3(VTAB)\n         DC    C'Z',AL3(ZTAB)                                   AXC-CBT\n         DC    C'1',AL3(A1TAB)\n         DC    F'0'\n         SPACE 3\nCMD#TAB  DS    0F\n         DC    C'A',AL3(A#TAB)\n         DC    C'B',AL3(B#TAB)\n         DC    C'C',AL3(C#TAB)\n         DC    C'J',AL3(J#TAB)\n         DC    C'P',AL3(P#TAB)\n         DC    C'S',AL3(S#TAB)\n         DC    F'0'\nHDRTAB   DS    0F\n         DC    CL48'ENTER  #H X  FOR HELP WITH COMMAND  X'\n         DC    CL48'       L= NN    DIRECTS COMMAND OUTPUT TO       '\n         DC    CL48'                CONSOLE WITH ID =  NN           '\n         DC    CL48'       T= NNN   SETS TIME LIMIT IN SECONDS FOR  '\n         DC    CL48'                MONITOR COMMANDS   1 - 999      '\n         DC    CL48'       S= XXXX  DIRECTS THE COMMAND TO SYSTEM   '\n         DC    CL48'                XXXX AND THE OUTPUT BACK TO     '\n         DC    CL48'                THE ORIGINATOR.                 '\n         DC    CL48'#A -   (SE)  DISPLAY JOB STATUS -  EXPANDED  D A'\n         DC    CL48'#C -   (SK)  CALCULATOR, TOD, AND MSTCONS SWITCH'\n         DC    CL48'#D -   (SD)  DISPLAY AND ZAP CORE               '\n         DC    CL48'#E -   (SS)  EXECUTE AN OPERATOR COMMAND        '\n         DC    CL48'#F -   (SF)  DISPLAY PAGE FRAME ASSIGNMENTS     '\n         DC    CL48'#H -   (SM)  DISPLAY HELP                       '\n         DC    CL48'#I -   (SJ)  DISPLAY IPS AND SWAP COUNTS        '\n         DC    CL48'#J -   (SL)  MODIFIED DISPLAY ACTIVE REPLACEMENT'\n         DC    CL48'#L -   (SC)  DISPLAY LINES FOR TSO              '\n         DC    CL48'#M -   (SO)  TSO MULTIPLE SEND                  '\n         DC    CL48'#N -   (SA)  DISPLAY ENQUEUE                    '\n         DC    CL48'#O -   (SR)  DISPLAY PENDING I/O AND ALLOCATION '\n         DC    CL48'#P -   (SP)  DISPLAY SU CONFIGURATION           '\n         DC    CL48'#Q -   (SQ)  ANALYZE ENQUEUE CONFLICTS          '\n         DC    CL48'#R -   (SG)  DISPLAY DEVICE STATUS              '\n         DC    CL48'#S -   (SH)  DISPLAY LPA MODULES                '\n         DC    CL48'#T -   (SN)  DISPLAY TIOT AND EXCP COUNTS BY DD '\n         DC    CL48'#V -   (SI)  DISPLAY UNIT                       '\n         DC    CL48'#Z -   (SZ)  MODIFIED DISPLAY ACTIVE REPLACEMENT' A\n         DC    CL48'##A -  (ZA)  MONITOR JOB ACTIVITY               '\n         DC    CL48'##B -  (ZB)  MONITOR DEVICE BUSY                '\n         DC    CL48'##C -  (ZC)  MONITOR CHANNEL BUSY               '\n         DC    CL48'##J -  (ZJ)  MONITOR JOBS                       '\n         DC    CL48'##P -  (ZP)  MONITOR PAGING                     '\n         DC    CL48'##S -  (ZS)  MONITOR SYSTEM INDICATORS          '\n         DC    F'0'\nATAB     DS    0F\n         DC    CL48'ENTER  #H 1  FOR #A OUTPUT FORMAT HELP          '\n         DC    CL48'#A ASID      4 LINES OF OUTPUT FOR AN ASID      '\n         DC    CL48'#A .JOBNM    4 LINES OF OUTPUT FOR AN JOBNAME   '\n         DC    CL48'#A           2 LINES FOR ALL ACTIVE TASKS       '\n         DC    CL48'#A 0000      4 LINES FOR ALL ACTIVE TASKS       '\n         DC    CL48'#A XX        2 LINES OF OUTPUT FOR SELECTED TYPE'\n         DC    CL48'#A XX,D      1 LINE OF DISPATCHABILITY OUTPUT   '\n         DC    CL48'#A XX,S      1 LINE OF OUTPUT FOR SELECTED TYPE '\n         DC    CL48'#A XX,L      4 LINES OF OUTPUT FOR SELECTED TYPE'\n         DC    CL48'  WHERE  XX  IS    -                            '\n         DC    CL48'       NN        SELECT ALL JOBS IN DOMAIN 00   '\n         DC    CL48'       $A        SELECT ALL JOB, TSU, AND STC   '\n         DC    CL48'       $J        SELECT ALL JOBS                '\n         DC    CL48'       $T        SELECT ALL TSO USERS           '\n         DC    CL48'       $S        SELECT ALL STARTED TASKS       '\n         DC    CL48'       $I        SELECT ALL IDLE INITIATORS     '\n         DC    F'0'\nA1TAB    DS    0F\n         DC    CL48'LINE1 -   TEST00              JOBNAME           '\n         DC    CL48'          (000B)              ASID              '\n         DC    CL48'          DP(112)             ASCB DISP PRIORITY'\n         DC    CL48'          SWL(010/016)        SWAP LOAD (IN/OUT)'\n         DC    CL48'          SWC(0001)           SWAP COUNT        '\n         DC    CL48'LINE2 -   PERF-NRS(0B/07/0B)  PERFORMANCE GROUP '\n         DC    CL48'          DPRTY-NR(70/76)     OUCB DISP PRIORITY'\n         DC    CL48'          DMN(01)             DOMAIN NUMBER     '\n         DC    CL48'LINE3 -   OUCB FLAGS  (SEE FE HANDBOOK)         '\n         DC    CL48'LINE4 -   AS(FE2578)          ASCB ADDRESS      '\n         DC    CL48'          SR(06)              SWAP REASON CODE  '\n         DC    CL48'          QP(01)              DISP QUEUE POSITN '\n         DC    CL48'          OU(FE1080)          OUCB ADDRESS      '\n         DC    CL48'          A(0063/00000)       ADDRSPC/VIO SLOTS '\n         DC    CL48'** NOTE -  IF SWAP REASON CODE IS 00,  QUEUE    '\n         DC    CL48'           POSITION PRINTS INSTEAD              '\n         DC     F'0'\nCTAB     DS    0F\n         DC    CL48'#C           DISPLAY TOD CLOCK HIGH-ORDER WORD  '\n         DC    CL48'#CS          DISPLAY SMF DATASET STATUS         '\n         DC    CL48'#CMNN,XX..X  SEND A MESSAGE  NN  NUMBER OF TIMES'\n         DC    CL48'             TO THE CONSOLE INDICATED BY L=XX   '\n         DC    CL48'#CBNN,XX..X  BROADCAST A MESSAGE  NN  NUMBER OF '\n         DC    CL48'             TIMES TO ALL ACTIVE CONSOLES       '\n         DC    CL48'#CXNNNN      CONVERT 4 DIGIT HEX MSS LXYZ TO    '\n         DC    CL48'             FORM  L-XXX-YY-Z                   '\n         DC    CL48'#CXL-XXX-YY-Z  CONVERT 7 DIGIT L-XXX-YY-Z TO    '\n         DC    CL48'             4 DIGIT HEX MSS LXYZ               '\n         DC    CL48'#CZ,PASSWRD  SWITCH MASTER CONSOLE DESIGNATION  '\n         DC    CL48'             TO THE CONSOLE INDICATED BY L=XX   '\n         DC    CL48'#C XXXX      CONVERT 1-8 DIGIT HEX VALUE TO DEC '\n         DC    CL48'#C ,DDDD     CONVERT 1-8 DIGIT DEC VALUE TO HEX '\n         DC    CL48'#C AAAOBBB   CALCULATOR MODE                    '\n         DC    CL48'      AAA    IS 1-8 DIGIT HEX OR ,DEC VALUE     '\n         DC    CL48'      BBB    IS 1-8 DIGIT HEX OR ,DEC VALUE     '\n         DC    CL48'      O      IS ARITHMETIC OPERATOR             '\n         DC    CL48'             +   ADD                            '\n         DC    CL48'             -   SUBTRACT                       '\n         DC    CL48'             .   MULTIPLY                       '\n         DC    CL48'             /   DIVIDE                         '\n         DC    F'0'\nDTAB     DS    0F\n         DC    CL48'#D CHAP,AAAA,DDD  CHAP  ASID=AAAA  TO  DPRTY=DDD'\n         DC    CL48'          NOTE THAT IN ORDER FOR THE CHAP TO    '\n         DC    CL48'          TAKE EFFECT THE JOB MUST PASS FROM    '\n         DC    CL48'          SWAPPED OUT TO SWAPPED IN STATE.      '\n         DC    CL48'#D NOSWAP,AAAA    SET  ASID=AAAA  NON-SWAPPABLE '\n         DC    CL48'#D OKSWAP,AAAA    SET  ASID=AAAA  SWAPPABLE     '\n         DC    CL48'#D NOCANC,AAAA    SET  ASID=AAAA  NON-CANCELABLE'\n         DC    CL48'#D OKCANC,AAAA    SET  ASID=AAAA  CANCELABLE    '\n         DC    CL48'#D DOSWAP,AAAA    SWAP ASID=AAAA  IN/OUT        '\n         DC    CL48'#D UXXX   TO DUMP CORE FOR THE SPECIFIED UCB    '\n         DC    CL48'#D XXXX   OR   #D >AAAA,XXXX   AAAA IS ASID     '\n         DC    CL48'          TO DUMP CORE AT VIRTUAL ADDR XXXX     '\n         DC    CL48'#D XXXX   OR   #D >AAAA,XXXX   AAAA IS ASID     '\n         DC    CL48'          TO DUMP CORE AT VIRTUAL ADDR XXXX     '\n         DC    CL48'          FOR  NN  NUMBER OF LINES.  MAX=64.    '\n         DC    CL48'#D XXXX/YYYYYYYY/ZZZZZZZZ   OR                  '\n         DC    CL48'#D >AAAA,XXXX/YYYYYYYY/ZZZZZZZZ    AAAA IS ASID '\n         DC    CL48'          TO ZAP CORE AT VIRTUAL ADDR XXXX,     '\n         DC    CL48'          VER  YYYYYYYY,  AND REP  ZZZZZZZZ     '\n         DC    F'0'\nETAB     DS    0F\n         DC    CL48'#E XXXX      TO EXECUTE OPERATOR COMMAND  XXXX. '\n         DC    CL48'             COMMAND IS USED IN CONJUNCTION WITH'\n         DC    CL48'             CROSS-SYSTEM FACILITY TO SEND A    '\n         DC    CL48'             COMMAND TO ANOTHER SYSTEM.         '\n         DC    CL48'#E V PATH(UUU-UUU,S),XXXXXX                     '\n         DC    CL48'             TO EXECUTE A STRING OF VARY PATH   '\n         DC    CL48'             COMMANDS WHERE  UUU-UUU  IS THE    '\n         DC    CL48'             DEVICE STRING,  C  IS THE CPUID 0/1'\n         DC    CL48'             AND  XXXXXX  IS ONLINE OR OFFLINE. '\n         DC    F'0'\nFTAB     DS    0F\n         DC    CL48'#F           DISPLAY PAGE FRAME ASSIGNMENTS     '\n         DC    CL48'#F C         DISPLAY CSA VIRT ADDR ASSIGNMENTS  '\n         DC    CL48'#F MX        DISPLAY MEGABYTE  X  OF            '\n         DC    CL48'             REAL STORAGE SHOWING FRAME USAGE   '\n         DC    CL48'#F OX        DISPLAY MEGABYTE  X  OF            '\n         DC    CL48'             REAL STORAGE SHOWING FRAME USAGE OF'\n         DC    CL48'             OFFLINE INTERCEPTED FRAMES         '\n         DC    CL48'#F BX        DISPLAY MEGABYTE  X  OF            '\n         DC    CL48'             REAL STORAGE SHOWING FRAME USAGE OF'\n         DC    CL48'             BAD FRAMES                         '\n         DC    CL48'#F R         DISPLAY THE V=R AREA FRAME USAGE   '\n         DC    CL48'FLAGS -   A DASH IN ANY COLUMN MEANS NO STATUS  '\n         DC    CL48'          1ST DIGIT -    O     OFFLINE          '\n         DC    CL48'                         C     OFFLINE INTERCEPT'\n         DC    CL48'                         R     V=R ALLOCATE     '\n         DC    CL48'                         I     V=R INTERCEPT    '\n         DC    CL48'                         A     AVAILABLE        '\n         DC    CL48'          2ND DIGIT -    B     BAD FRAME        '\n         DC    CL48'                         F     LONG TERM FIXED  '\n         DC    CL48'                         S     SQA/LSQA FRAME   '\n         DC    CL48'                         V     VIO FRAME        '\n         DC    CL48'          3RD DIGIT -    A     AVAILABLE QUEUE  '\n         DC    CL48'                         R     SQA RSVRD QUEUE  '\n         DC    CL48'                         C     COMMON QUEUE     '\n         DC    CL48'                         S     SQA QUEUE        '\n         DC    CL48'                         U     LOCAL QUEUE      '\n         DC    CL48'                         L     LSQA QUEUE       '\n         DC    CL48'                         N     NOT QUEUED       '\n         DC    F'0'\nITAB     DS    0F\n         DC    CL48'#I           DISPLAY CURRENT IPS MEMBER AND SWAP'\n         DC    CL48'             COUNTS BY REASON SINCE LAST IPL,   '\n         DC    CL48'             CPU BUSY, PAGING, UIC, AND ASMQ.   '\n         DC    CL48'#I A         DISPLAY ASM COUNTS                 '\n         DC    CL48'             AVAIL VALUE IS THE TOTAL NUMBER    '\n         DC    CL48'             OF LOCAL PAGE D.S. UNRESERVED SLOTS'\n         DC    CL48'#I C         DISPLAY AVAILABLE PCCWS            '\n         DC    CL48'             VALUES ARE THE NUMBER OF PCCWS THAT'\n         DC    CL48'             ARE ALLOCATED BY RIM AND ALSO THE  '\n         DC    CL48'             NUMBER OF AVAILABLE PCCWS          '\n         DC    CL48'#I P         DISPLAY PAGE DATA SET USAGE        '\n         DC    CL48'             SIZE AND AVAIL VALUES ARE DECIMAL  '\n         DC    CL48'             NUMBER OF SLOTS,  BRST VALUE IS    '\n         DC    CL48'             RELATIVE SERVICE RATE,  THE HIGHER '\n         DC    CL48'             THE VALUE THE POORER THE RESPONSE  '\n         DC    CL48'#I R         DISPLAY SRM RCT VALUES             '\n         DC    CL48'#I S         DISPLAY SWAP DATA SET USAGE        '\n         DC    CL48'             SIZE AND AVAIL VALUES ARE DECIMAL  '\n         DC    CL48'             NUMBER OF SWAP SETS.               '\n         DC    CL48'#I X         DISPLAY PERFORMANCE GROUP ACTIVITY '\n         DC    CL48'             INCLUDING NUMBER OF TRANSACTIONS,  '\n         DC    CL48'             TRANSACTION SERVICE RATE,          '\n         DC    CL48'             ABSORPTION RATE,                   '\n         DC    CL48'             SWAP RATIO, AND AVERAGE RESPONSE   '\n         DC    CL48'             TIME IN SECONDS.                   '\n         DC    F'0'\nJTAB     DS    0F\n         DC    CL48'#J           DISPLAY JOB STATUS                 '\n         DC    CL48'#J T         DISPLAY TSO USER STATUS            '\n         DC    CL48'#J NN        DISPLAY JOB STATUS FOR DOMAIN -  NN'\n         DC    CL48'    ASID     ADDRESS SPACE ID                   '\n         DC    CL48'    DPRTY    DISPATCHING PRIORITY               '\n         DC    CL48'    QP       ASCB QUEUE POSITION, WHICH IS      '\n         DC    CL48'             A RELATIVE DISPATCHING PRIORITY    '\n         DC    CL48'    SR       SWAP REASON CODE AS IN THE OUTPUT  '\n         DC    CL48'             OF THE #I COMMAND                  '\n         DC    CL48'    FLAGS    JOB STATUS DESCRIBED BELOW = RXXXYY'\n         DC    CL48'    CPUTIME  CPU/SRB ACCUMULATED JOB STEP TIME  '\n         DC    CL48'    R -                                         '\n         DC    CL48'        R   -   V=R REGION                      '\n         DC    CL48'        -   -   V=V REGION                      '\n         DC    CL48'    XXX -                                       '\n         DC    CL48'        IN  -   IN CORE - SWAPPED IN            '\n         DC    CL48'        NSW -   NON-SWAPPABLE                   '\n         DC    CL48'        OUT -   SWAPPED OUT                     '\n         DC    CL48'        GOO -   IN PROCESS OF BEING SWAPPED OUT '\n         DC    CL48'        GOI -   IN PROCESS OF BEING SWAPPED IN  '\n         DC    CL48'        GOB -   CURRENTLY CHANGING STATUS       '\n         DC    CL48'    YY -                                        '\n         DC    CL48'        LW  -   LONG WAIT STATUS                '\n         DC    CL48'        MW  -   DETECTED WAIT                   '\n         DC    CL48'        CP  -   SIGNIFICANT CPU USER            '\n         DC    CL48'        A   -   AUXILLARY STORAGE SHORTAGE      '\n         DC    CL48'        S   -   REAL STORAGE SHORTAGE           '\n         DC    F'0'\nLTAB     DS    0F\n         DC    CL48'#L           DISPLAY USERID, ASID AND TP LINE   '\n         DC    F'0'\nMTAB     DS    0F\n         DC    CL48'#M XXXXXX    TSO MULTIPLE SEND                  '\n         DC    CL48'    WHERE   XXXXXX IS -                         '\n         DC    CL48'            1 - 68 CHARACTER MESSAGE TO         '\n         DC    CL48'            SEND TEN TIMES TO ALL TSO           '\n         DC    CL48'            USERS THAT ARE LOGGED ON            '\n         DC    F'0'\nNTAB     DS    0F\n         DC    CL48'#N           DISPLAY OUTSTANDING ENQUEUES       '\n         DC    CL48'    #N (ZZZZZZ)XXXXXXXX/YYYYYYYY                '\n         DC    CL48'      XXXXXXXX     8 DIGIT MAJOR NAME OR  *     '\n         DC    CL48'      YYYYYYYY     1 - 44 DIGIT MINOR NAME OR  *'\n         DC    CL48'      (ZZZZZZ)     1 - 8 DIGIT JOBNAME TO LIMIT '\n         DC    CL48'                   THE SEARCH  (OPTIONAL) .     '\n         DC    CL48'    IN RESPONSE TO THE #N COMMAND               '\n         DC    CL48'    THE CURRENT STATUS TYPES ARE -              '\n         DC    CL48'      SHR  -       SHARED USE ENQ               '\n         DC    CL48'      EXCL  -      EXCLUSIVE USE ENQ            '\n         DC    CL48'      RSVS  -      SHARED USE WITH A RESERVE    '\n         DC    CL48'      RSVX  -      EXCLUSIVE USE WITH A RESERVE '\n         DC    F'0'\nOTAB     DS    0F\n         DC    CL48'#O           DISPLAY I/O PENDING, AND           '\n         DC    CL48'             ALLOCATION PENDING                 '\n         DC    CL48'    #O       ALL I/O PENDING                    '\n         DC    CL48'    #OA      ACTIVE I/O PENDING                 '\n         DC    CL48'    #OQ      QUEUED I/O PENDING                 '\n         DC    CL48'    #OX      ALLOCATION PENDING                 '\n         DC    CL48'    I/O PENDING REQUESTS DISPLAY UNIT, VOLSER,  '\n         DC    CL48'    JOBNAME/ASID, IOQ ADDR, DRIVER, AND STATUS. '\n         DC    CL48'    ALLOCATION PENDING REQUESTS DISPLAY         '\n         DC    CL48'    SYSTEM MASK, JOBNAME, QUEUE STATUS, AND     '\n         DC    CL48'    JOB MASKS.                                  '\n         DC    F'0'\nPTAB     DS    0F\n         DC    CL48'#P           DISPLAY SU CONFIGURATION           '\n         DC    CL48'    #P       DISPLAY NON-OBSOLETE INSTALLED SU.S'\n         DC    CL48'    #PI      DISPLAY ALL INSTALLED SU.S         '\n         DC    CL48'    #PC      DISPLAY ALL NON-OBSOLETE SU.S      '\n         DC    CL48'    #PA      DISPLAY ALL SU.S                   '\n         DC    F'0'\nQTAB     DS    0F\n         DC    CL48'#Q           ANALYZE OUTSTANDING ENQUEUES       '\n         DC    CL48'    #Q                                          '\n         DC    CL48'    IN RESPONSE TO THE #Q COMMAND               '\n         DC    CL48'    THE CURRENT STATUS TYPES ARE -              '\n         DC    CL48'      SHR  -       SHARED USE ENQ               '\n         DC    CL48'      EXCL  -      EXCLUSIVE USE ENQ            '\n         DC    CL48'      RESERVE -    RESERVE INDICATOR            '\n         DC    F'0'\nRTAB     DS    0F\n         DC    CL48'#R M         PENDING MOUNTS FOR TAPE            '\n         DC    CL48'#R T         TAPE BUSY AND PENDING MOUNTS       '\n         DC    CL48'#R D         DISK BUSY AND PENDING MOUNTS       '\n         DC    CL48'#R P         UNIT RECORD BUSY                   '\n         DC    CL48'#R B         ALL DEVICE BUSY AND PENDING MOUNTS '\n         DC    CL48'#R V         ALL PENDING VARIED/UNLOADED DEVICES'\n         DC    CL48'#R R         ALL OUTSTANDING RESERVES           '\n         DC    CL48'#R M=XXXX    PENDING MOUNTS FOR A JOB           '\n         DC    CL48'#R T=XXXX    ALLOCATED TAPE DEVICES FOR A JOB   '\n         DC    CL48'#R D=XXXX    ALLOCATED DISK DEVICES FOR A JOB   '\n         DC    CL48'#R P=XXXX    ALLOCATED UNITREC DEVICES FOR A JOB'\n         DC    CL48'#R B=XXXX    ALL ALLOCATED DEVICES FOR A JOB    '\n         DC    CL48'    =XXXX         IS EITHER A 4 DIGIT ASID      '\n         DC    CL48'                  OR 1-8 DIGIT JOBNAME          '\n         DC    CL48'#R S=VVVVVV       DEVICE WITH VOLUME  VVVVVV    '\n         DC    CL48'#R U=NNN          DISPLAY SPECIFIED -           '\n         DC    CL48'                      DEVICE          (NNN)     '\n         DC    CL48'                      CONTROL UNIT    (NN)      '\n         DC    CL48'                      CHANNEL         (N)       '\n         DC    F'0'\nSTAB     DS    0F\n         DC    CL48'#S PGMNAME   DISPLAY LOAD MODULES IN LPA        '\n         DC    CL48'             THE ADDRESS AND SIZE ARE DISPLAYED '\n         DC    CL48'             UNLESS THE SPECIFIED MODULE IS     '\n         DC    CL48'             REPRESENTED BY A MINOR CDE OR LPDE '\n         DC    CL48'             IN WHICH CASE THE ADDRESS AND      '\n         DC    CL48'             MAJOR NAME ARE DISPLAYED           '\n         DC    CL48'#S *ADDR     DISPLAY THE NAME, STARTING ADDRESS '\n         DC    CL48'             AND LENGTH OF THE MODULE AT THE    '\n         DC    CL48'             SPECIFIED ADDRESS                  '\n         DC    F'0'\nTTAB     DS    0F\n         DC    CL48'#T NNNN      DISPLAY TIOT FOR  ASID NNNN        '\n         DC    CL48'             OUTPUT INCLUDES JOB ACCT INFO,     '\n         DC    CL48'             PROGRAMMER NAME.   DDNAME, UNIT,   '\n         DC    CL48'             DEVTYPE, VOLSER, AND EXCP COUNT    '\n         DC    CL48'             ARE PRINTED FOR EACH DD ENTRY.     '\n         DC    CL48'#T NNNN,L    OPTIONAL DSNAME AND DCB INFO       '\n         DC    CL48'             DISPLAY FOR EACH DD.               '\n         DC    F'0'\nVTAB     DS    0F\n         DC    CL48'#V T           DISPLAY MATRIX FOR TAPE          '\n         DC    CL48'#V D           DISPLAY MATRIX FOR DASD          '\n         DC    CL48'#V D1          DISPLAY MATRIX FOR 3330-1        '\n         DC    CL48'#V D3          DISPLAY MATRIX FOR 3330          '\n         DC    CL48'#V D5          DISPLAY MATRIX FOR 3350          '\n         DC    CL48'#V D7          DISPLAY MATRIX FOR 3375          '\n         DC    CL48'#V D8          DISPLAY MATRIX FOR 3380          '\n         DC    CL48'#V CUU         DISPLAY SINGLE UNIT              '\n         DC    CL48'#V CUX         DISPLAY ALL UNITS BY CONTROL UNIT'\n         DC    CL48'#V CUU,CUU..   DISPLAY ALL UNITS IN LIST        '\n         DC    CL48'#V CUX,CUX..   DISPLAY ALL UNITS IN LIST BY CU  '\n         DC    CL48'#V S=VOLSER    DISPLAY UNIT FOR THIS VOLSER     '\n         DC    CL48'--- TWO LINES OF OUTPUT ARE PRODUCED ---        '\n         DC    CL48'UUU  SSSSSS  FFF  UNIT=DDDDDD  AS=AAAA  PATH=X,Y'\n         DC    CL48'   DCB=MM  USR=UU  RSV=RR  FLG=11111111/22222222'\n         DC    CL48'                  - OR -                        '\n         DC    CL48'   DEVTYPE=ZZZZZZZZ        FLG=11111111/22222222'\n         DC    CL48'UUU          IS THE UNIT ADDRESS                '\n         DC    CL48'SSSSSS       THE VOLUME SERIAL OR DEVICE CLASS  '\n         DC    CL48'FFF          ON, OFF, OF CHG                    '\n         DC    CL48'DDDDDD       THE DEVICE TYPE                    '\n         DC    CL48'AAAA         THE ADDRESS SPACE ID               '\n         DC    CL48'X,Y          THE PRIMARY,SECONDARY DEVICE PATH  '\n         DC    CL48'MM           THE NO. OF OPEN DCBS TO THE DEVICE '\n         DC    CL48'UU           THE NO. OF USERS                   '\n         DC    CL48'RR           THE DEVICE RESERVE COUNT           '\n         DC    CL48'ZZZZZZZZ     THE 4 BYTE HEX DEVICE TYPE FIELD   '\n         DC    CL48'1111/2222    THE FIRST 8 BYTES OF THE UCB IN HEX'\n         DC    F'0'\nZTAB     DS    0F\n         DC    CL48'#Z           DISPLAY JOB STATUS                 '\n         DC    CL48'#Z T         DISPLAY TSO USER STATUS            '\n         DC    CL48'#Z NN        DISPLAY JOB STATUS FOR DOMAIN -  NN'\n         DC    CL48'    ASID     ADDRESS SPACE ID                   '\n         DC    CL48'    DP       DISPATCHING PRIORITY               ' N\n         DC    CL48'    PG       PERFORMANCE GROUP                  ' N\n         DC    CL48'    QP       ASCB QUEUE POSITION, WHICH IS      '\n         DC    CL48'             A RELATIVE DISPATCHING PRIORITY    '\n         DC    CL48'    SR       SWAP REASON CODE AS IN THE OUTPUT  '\n         DC    CL48'             OF THE #I COMMAND                  '\n         DC    CL48'    SC       SWAP COUNT                         ' N\n         DC    CL48'    FLAGS    JOB STATUS DESCRIBED BELOW = XXXYY ' N\n         DC    CL48'    CPU      CPU/SRB ACCUMULATED JOB STEP TIME  ' N\n         DC    CL48'    CPUR     CPU STEP TIME REMAINING            ' N\n         DC    CL48'    XXX -                                       '\n         DC    CL48'        IN  -   IN CORE - SWAPPED IN            '\n         DC    CL48'        NSW -   NON-SWAPPABLE                   '\n         DC    CL48'        OUT -   SWAPPED OUT                     '\n         DC    CL48'        GOO -   IN PROCESS OF BEING SWAPPED OUT '\n         DC    CL48'        GOI -   IN PROCESS OF BEING SWAPPED IN  '\n         DC    CL48'        GOB -   CURRENTLY CHANGING STATUS       '\n         DC    CL48'    YY -                                        '\n         DC    CL48'        LW  -   LONG WAIT STATUS                '\n         DC    CL48'        MW  -   DETECTED WAIT                   '\n         DC    CL48'        CP  -   SIGNIFICANT CPU USER            '\n         DC    CL48'        A   -   AUXILLARY STORAGE SHORTAGE      '\n         DC    CL48'        S   -   REAL STORAGE SHORTAGE           '\n         DC    F'0'\nA#TAB    DS    0F\n         DC    CL48'##A        MONITOR JOB ACTIVITY                 '\n         DC    CL48'##A D      MONITOR DOMAIN ACTIVITY              '\n         DC    CL48'##A T      MONITOR TSO USER ACTIVITY            '\n         DC    CL48'##A NN     MONITOR JOB ACTIVITY FOR DOMAIN -  NN'\n         DC    CL48'           CPU PCT -   CURRENT CPU PERCENT BUSY '\n         DC    CL48'           SIO/SEC -   CURRENT EXCPS PER SEC    '\n         DC    CL48'           PAG/SEC -   CURRENT PAGING PER SEC   '\n         DC    CL48'           WORKSET -   CURRENT REAL STORAGE USE '\n         DC    CL48'           ASID -      ADDRESS SPACE ID         '\n         DC    CL48'           DSP -       DISPATCHING PRTY         '\n         DC    CL48'           DMN -       DOMAIN NUMBER            '\n         DC    CL48'           PGN -       PERFORMANCE GROUP NUMBER '\n         DC    CL48'           SWC -       SWAP COUNT               '\n         DC    CL48'           FLAGS -     FLAGS -  XX-NN           '\n         DC    CL48'                       XX -   IN-  IN QUEUE     '\n         DC    CL48'                       XX -   NS-  NON-SWAPPABLE'\n         DC    CL48'                       NN -   QUEUE POSITION    '\n         DC    CL48'                       XX -   OU-  OUT QUEUE    '\n         DC    CL48'                       NN -   SWAP REASON CODE  '\n         DC    F'0'\nB#TAB    DS    0F\n         DC    CL48'##BXXX,Y     MONITOR DEVICE BUSY FOR ALL DASD   '\n         DC    CL48'##BUUU,Y     MONITOR DEVICE BUSY FOR DEVICE  UUU'\n         DC    CL48'##BUUX,Y     MONITOR DEVICE BUSY FOR DEVICES ON '\n         DC    CL48'             CONTROL UNIT  UU                   '\n         DC    CL48'             WHERE Y =  D -  DEVICE LIST        '\n         DC    CL48'                        J -  DEVICE AND JOB LIST'\n         DC    CL48'                        S -  SEEK ANALYSIS      '\n         DC    CL48'        OUTPUT FORMAT AS FOLLOWS -              '\n         DC    CL48'        UUU VVVVVV  BUSY  NN%  NN%              '\n         DC    CL48'        -- JJJJJJJJ       NN%  NN%              '\n         DC    CL48'                                                '\n         DC    CL48'        NOTE -   TWO PERCENT BUSY VALUES ARE    '\n         DC    CL48'                 DISPLAYED FOR DEVICE BUSY.     '\n         DC    CL48'                 1ST -  DEVICE BUSY TOTAL       '\n         DC    CL48'                 2ND -  DEVICE BUSY PRIMARY CHAN'\n         DC    F'0'\nC#TAB    DS    0F\n         DC    CL48'##C          MONITOR CHANNEL BUSY               '\n         DC    CL48'             DISPLAY CHANNEL BUSY IN BOTH       '\n         DC    CL48'             NUMERIC AND BAR GRAPH FORM.        '\n         DC    CL48'##CNN,Y      MONITOR CHANNEL AND DEVICE BUSY    '\n         DC    CL48'             DISPLAY CHANNEL AND DEVICE BUSY    '\n         DC    CL48'             FOR CHANNEL NN IN NUMERIC AND      '\n         DC    CL48'             BAR GRAPH FORM.                    '\n         DC    CL48'             WHERE Y =  D -  DEVICE LIST        '\n         DC    CL48'                        J -  DEVICE AND JOB LIST'\n         DC    CL48'        OUTPUT FORMAT AS FOLLOWS -              '\n         DC    CL48'        CHANNEL NN  BUSY       NN%              '\n         DC    CL48'        UUU VVVVVV  BUSY  NN%  NN%              '\n         DC    CL48'        -- JJJJJJJJ       NN%  NN%              '\n         DC    CL48'                                                '\n         DC    CL48'        NOTE -   TWO PERCENT BUSY VALUES ARE    '\n         DC    CL48'                 DISPLAYED FOR DEVICE BUSY.     '\n         DC    CL48'                 1ST -  DEVICE BUSY TOTAL       '\n         DC    CL48'                 2ND -  DEVICE BUSY THIS CHANNEL'\n         DC    F'0'\nJ#TAB    DS    0F\n         DC    CL48'##J          MONITOR JOB STATUS                 '\n         DC    CL48'##J T        MONITOR TSO USER STATUS            '\n         DC    CL48'##J NN       MONITOR JOB STATUS FOR DOMAIN -  NN'\n         DC    CL48'    EXCPC    CURRENT SAMPLE EXCP COUNT          '\n         DC    CL48'    EXCPT    TOTAL STEP EXCP COUNT              '\n         DC    CL48'    CPUC     CURRENT SAMPLE CPU TIME            '\n         DC    CL48'    CPUT     TOTAL STEP CPU TIME                '\n         DC    F'0'\nP#TAB    DS    0F\n         DC    CL48'##P          MONITOR PAGING                     '\n         DC    CL48'             MONITOR VIO, SWAP, COMMON (CSA),   '\n         DC    CL48'             ADDRESS SPACE AND TOTAL PAGING FOR '\n         DC    CL48'             THE INTERVAL REQUESTED.  ALL PAGING'\n         DC    CL48'             RATES ARE PAGES/SEC AND RECLAIMS   '\n         DC    CL48'             HAVE ALREADY BEEN SUBTRACTED.      '\n         DC    F'0'\nS#TAB    DS    0F\n         DC    CL48'##S          MONITOR SYSTEM INDICATORS          '\n         DC    CL48'##S D        MONITOR SYS IND AND DMN MIN/MAX/AVG'\n         DC    CL48'##S DA       MONITOR SYS IND AND DMN AVG        '\n         DC    CL48'             SYSTEM INDICATORS -  LONG TERM CPU,'\n         DC    CL48'             AVERAGE CPU, AVERAGE PAGING,       '\n         DC    CL48'             AVERAGE UIC, AND AVERAGE ASMQ.     '\n         DC    CL48'             DOMAIN -  DISPLAY DOMAIN MONITORED '\n         DC    CL48'             OVER TIME  AVERAGE/MINIMUM/MAXIMUM.'\n         DC    F'0'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    F\nXSASAVE  DS    F\n         SPACE 3\n         DS    0F\nWTOLIST  DS    CL54\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSN03D\n         TITLE 'XA1SN03D -   #T  DISPLAY TIOT INFORMATION'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESN03D -       #T  DISPLAY TIOT INFORMATION             ***\n***                                                                 ***\n***       VERSION -        1.3                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA 2.1                               ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/11/82  RLL-CHANGE ESTAE PARM LENGTH   ***\n***                        10/05/82  AXC-CBT ADD 3380 AND 3375      ***\n***                                  SUPPORT                        ***\n***                        01/04/84  ECS-BFG CORRECTION TO GET THE  ***\n***                                  RIGHT ASID/TCB FOR XM PROCESS  ***\n***                                  DURING POST OF WAITING TASK.   ***\n***                        04/22/86  GLA-BFG CORRECT CVT MACRO      ***\n***                                  TO ELIMINATE ERRORS AT LINK    ***\n***                        05/10/86  GLA-BFG FIX REFERENCES TO THE  ***\n***                                  TCTTIO FOR XA CHANGES          ***\n***                        05/10/86  GLA-BFG FORCE LAST LINE OUT    ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESN03D CSECT\n         LR    R12,R15\n         USING IEESN03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         STM   R14,R12,SAVRET      SAVE RETURN ADDR\n         XC    TYPE,TYPE\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         LA    R0,WTOLIST          POINT TO START OF CLEAR\n         LA    R1,OUTAREA-WTOLIST   AND SET THE LENGTH\n         SR    R15,R15        CLEAR LENGTH 2\n         MVCL  R0,R14         CLEAR THE AREA\n         LA    R15,500\n         LA    R1,OUTAREA-48\nINITOUT  LA    R1,48(0,R1)\n         XC    0(4,R1),0(R1)\n         BCT   R15,INITOUT\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD LIST POINTER\n         LA    R3,0(0,R3)          CLEAR HIGH ORDER\n         LTR   R3,R3               PARM EXIST\n         BZ    PARMERR             NO, ERROR\n         CLC   4(2,R3),=C',L' IS THIS A LONG REQUEST\n         BNE   *+12           NO\n         MVI   TYPE,C'L'      SET LONG OUTPUT\n         LA    R3,1(0,R3)     INCR TO ASID\n         MVC   ASIDCH(4),0(R3)\n         LA    R4,4           SET MAX LENGTH\n         BAL   R11,PARMCVT    CONVERT HEX NUMBER\n         STH   R1,ASID        SAVE THE TARGET ASID\n         LH    R1,ASID        GET THE ASID\n         LTR   R1,R1          IS IT ZERO\n         BZ    PARMERR        YES, ERROR\n         L     R3,CVTPTR      POINT TO CVT\n         USING CVTMAP,R3\n         L     R2,CVTTCBP     GO GET MY ASCB ADDR\n*        MVC   MYASCB,8(R2)   ***REPLACED***\n*        MVC   MYTCB,0(R2)    ***REPLACED***\n         MVC   MYASCB,12(R2)  SAVE ADDR OF ASCB FOR POST         ECS\n         MVC   MYTCB,4(R2)    SAVE THE TCB ADDRESS FOR STIMER    ECS\n         L     R2,CVTASVT     POINT AT ASVT\n         USING ASVT,R2\n         C     R1,ASVTMAXU    IS ASID TOO BIG\n         BH    ASNERR         YES\n         SLL   R1,2           ASID*4\n         LA    R1,ASVTENTY-4(R1)  POINT AT DESIRED ENTRY\n         MVC   TOASCB,0(R1)   MOVE THE ASCB ADDR IF ANY\n         TM    TOASCB,ASVTAVAL IS THIS ASCB ADDR OR AVAILABLE\n         BO    ASNERR         ASID DOES NOT EXIST\n         DROP  R2,R3\n         L     R2,TOASCB      POINT AT ASCB\n         USING ASCB,R2\n         TM    ASCBRCTF,ASCBOUT   IS ASCB SWAPPED OUT\n         BO    SWAPOUT\n         CLC   MYASCB,TOASCB  IS THE ASCB THE MS\n         BE    DOSUBR         IF SO THEN USE SUBROUTINE\n*\n*        NOW INITIALIZE THE SRB\n*\n         LA    R3,SRBAREA     POINT AT THE SRB\n         USING SRBSECT,R3\n         XC    SRBAREA,SRBAREA  CLEAR THE SRB\n         MVC   SRBID,=C'SRB '  SET EBCDIC ID\n         MVC   SRBASCB,TOASCB SET ASCB ADDR TO RUN IN\n         LA    R1,D#SRBCD     POINT AT SRB CODE\n         ST    R1,SRBEP       SAVE ENTRY POINT\n         ST    R13,SRBPARM    SAVE PARM ADDR AS WORK AREA\n         LA    R1,D#RMTR      SET ADDR OF RESOURCE MGR TERMINATION\n         ST    R1,SRBRMTR     AND SAVE IT\n         MVC   SRBPASID,ASID  SET ASID OF DESIRED ASCB\n         DROP  R3\n*\n*        SCHEDULE SRB AND AWAIT COMPLETION\n*\n         XC    ECB,ECB        CLEAR DONE ECB\n         XC    ECB2,ECB2      CLEAR STIMER ECB\n         LA    R1,ECB         NOW SETUP THE ECBLIST\n         ST    R1,ECBLIST\n         LA    R1,ECB2\n         ST    R1,ECBLIST+4\n         MVI   ECBLIST+4,X'80'\n         L     R2,MYTCB       POINT AT TCB\n         L     R2,0(0,R2)     POINT AT RB\n         USING RBBASIC,R2\n         ST    R1,RBEXSAVE+16 SAVE ECB2 ADDR IN RBXSA\n         DROP  R2\n         STIMER  REAL,D#STX,BINTVL==A(60*100) WAIT 1 MINUTE\n         SCHEDULE  SRB=(R3),SCOPE=GLOBAL\n         WAIT  ECBLIST=ECBLIST\n         TTIMER CANCEL        CANCEL THE TIMER IF STILL EXISTS\n         B     GOTBACK        GO AND CHECK COMPLETION\n         SPACE 5\n*\n*        USE THE SRB CODE AS A SUBROUTINE\n*\nDOSUBR   OI    FLAG1,FG1SUBR  SET FLAG FOR SUBROUTINE\n         LA    R1,DMYPRMS     SETUP DUMMY FRR PARMS\n         ST    R1,FRRPRMS\n         XC    DMYPRMS,DMYPRMS\n         LR    R1,R13         SET UP PARM REGISTER\n         LA    R15,D#SRBCD    SET ENTRY POINT ADDR\n         LA    R14,GOTBACK    SET RETURN ADDRESS\n         BR    R15            GO DO IT\n         SPACE 5\n*\n*        THIS IS THE STIMER EXIT.  ITS PURPOSE IS TO POST THE\n*        ECB AT ECB2 AND WAKE UP COMM TASK IF THE SRB FAILS\n*        TO DO THIS WE MUST FIND THE ADDRESS OF THE ECB WHICH IS\n*        SAVED IN THE XSA AREA OF THE SVRB IN COMM TASK\n*\n         USING *,R12\nD#STX    SAVE  (14,12)\n         LR    R12,R15        SET BAE REGISTER\n         L     R3,CVTPTR\n         L     R3,0(R3)       POINT AT TCB WORDS\n         L     R3,0(R3)       POINT AT MY TCB\n         L     R3,0(R3)       POINT AT MY RB\n         USING RBBASIC-4,R3\nD#STX1   SL    R3,=F'4'       POINT BACK TO LOOK AT INTC\n         CLI   3(R3),X'01'    LOOK FOR WAIT SVC\n         BE    D#STX2         IF FOUND THEN EXIT\n         TM    XSTAB2,RBTCBNXT     TEST TCB FLAG\n         BO    D#STX3         IF NOT FOUND PROPER RB\n         L     R3,RBLINK      POINT AT PREVIOUS RB\n         B     D#STX1         TRY AGAIN\nD#STX2   L     R2,RBEXSAVE+16 GET ADDR OF ECB\n         POST  (R2)         POST THE TIMER ECB\n         RETURN (14,12)\n         DROP  R12,R3\n*\n*        IF WE CAN NOT FIND THE RB THEN DUMP\n*\nD#STX3   DC    H'0'\n         USING IEESN03D,R12\n         TITLE 'XA1SN03D  #T COMMAND  --  PERFORM THE DUMP FUNCTION'\n*\n*        WE HAVE RETURNED FOR THE SRB FUNCTION NOW CHECK THE RESULTS\n*        AND IF GOOD THEN DUMP THE PROPER PART OF MEMORY\n*\nGOTBACK  TM    FLAG1,FG1SUBR  ARE WE IN SUBROUTINE MOVE\n         BO    GOTBK2         IF SO THEN SKIP SOME TESTS\n         TM    FLAG1,FG1SRDN  HAS THE SRB COMPLETED\n         BZ    SRBFAIL        IF NOT THEN TIMER CAUGHT IT\n         TM    FLAG2,FG2PSTR  DID XMPOST HAVE ERROR\n         BO    XMPTERR        IF SO THEN MESSGAE\n         TM    FLAG2,FG2PURG  WAS SRB PURGED\n         BO    SRBPGERR       IF SO THEN TELL ABOUT IT\nGOTBK2   EQU   *\n         SPACE 5\n*\n*        TIO SEARCH CODE FOLLOWS\n*\nFORMAT   L     R2,XSASAVE     POINT AT XSA\n         LA    R3,OUTAREA\n         USING XSA,R2\n         MVC   WTOLIST(4),=X'00340100'  FILL IN WTO LIST\n         SPACE 1\nFORMAT1  MVC   WTOLIST+4(48),0(R3)      FILL IN WTO LIST\n         LA    R1,WTOLIST          LOAD WTOLIST ADDR\n         SR    R0,R0\n         IC    R0,XAU                 MCS ID\n         SVC   35                  ISSUE WTO\n         LA    R3,48(0,R3)\n         CLI   0(R3),X'00'         END OF OUTPUT\n         BNE   FORMAT1             NO\n         B     RETURN\n         TITLE 'XA1SN03D  #T COMMAND  --  CHARACTER TO HEX CONVERTOR'\nPARMCVT  XR    R0,R0\n         LR    R1,R0          CLEAR SOME REGISTERS\n         LR    R5,R4          SAVE DESIRED LENGTH IN R5\n         SPACE 2\nPARMCVT0 CLI   0(R3),C','     CHECK FOR DELIMITERS\n         BE    PARMCVTD       IF ANY DELIMITER IS FOUND\n         CLI   0(R3),C' '     THEN WE AREA DONE\n         BE    PARMCVTD\n         CLI   0(R3),C'/'\n         BE    PARMCVTD\n         CLI   0(R3),C'A'     NOW CHECK FOR HEX CHARACTERS\n         BL    ERROR          AND IF INVALID THEN FLAG AS ERROR\n         CLI   0(R3),C'F'\n         BH    PARMCVT1       NOW TRY NUMBERICS\n         NI    0(R3),X'0F'    TURN OFF ZONE\n         IC    R0,0(R3)       GET THE CHARACTER\n         AH    R0,=H'9'       AND ADJUST TO PROPER VALUE\n         B     PARMCVT2\nPARMCVT1 CLI   0(R3),C'0'     NOW SEE IF NUMERIC\n         BL    ERROR          IF NOT THEN ERROR\n         CLI   0(R3),C'9'     AND TRY HIGH VALUE\n         BH    ERROR\n         NI    0(R3),X'0F'    TURN OFF ZONE\n         IC    R0,0(R3)       GET DIGIT\nPARMCVT2 SLL   R1,4           CLEAR AREA\n         OR    R1,R0          PUT IN NEW DIGIT\n         LA    R3,1(R3)       POINT PAST\n         BCT   R4,PARMCVT0    TRY AGAIN TILL EMPTY\n         BR    R11            ALL DONE AND HAD EXPECTED NUMBER OF CHARS\n         SPACE 3\nPARMCVTD DS    0H             THE HEX NUMBER TERMINATED BEFORE FULL\n         CH    R5,=H'8'       WAS A FULL WORD DESIRED\n         BNER  R11            OUT IF NOT\n         B     ERROR          FORCE FULLWORD TO BE PRESENT\n         TITLE 'XA1SN03D  #T COMMAND  --  ERROR ROUTINES'\n         USING *,R15\n         USING XSA,R2\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESN03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     RETURN\nMSGRTN   L     R2,XSASAVE     RELOAD XSA ADDR\n         USING XSA,R2\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         DROP  R2\n         B     RETURN\n         SPACE 3\nERROR    LA    R1,ERRMSG           PARM ERROR\n         B     MSGRTN              GO ISSUE WTO\n         SPACE 3\nASNERR   LA    R1,ASNFND           ASID NOT FOUND\n         B     MSGRTN              GO ISSUE WTO\n         SPACE 3\nPARMERR  LA    R1,ERRMSG           MVS\n         B     MSGRTN              GO ISSUE WTO\n         SPACE 3\nSWAPOUT  LA    R1,SWAPMSG     ADDRESS SPACE SWAPPED OUT\n         B     MSGRTN\n         SPACE 3\nDISTERR  LA    R1,DISTMSG     ERROR OCCURRED IN SRB MODE\n         B     MSGRTN\n         SPACE 3\nSRBFAIL  DS    0H             SRB FAILED TO POST SO DUMP\n         L     R2,XSASAVE     RELOAD XSA ADDR\n         USING XSA,R2\n         LA    R1,SRBFMSG     POINT AT MSG\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         DC    H'0'\n         SPACE 3\nXMPTERR  LA    R1,XMPTMSG     POINT AT MSG\n         B     MSGRTN\n         SPACE 3\nSRBPGERR LA    R1,PURGMSG     SRB WAS PURGED BEFORE PROCESS\n         B     MSGRTN\nRETURN   EQU   *\n         ESTAE 0                                      ****(RLL)****\n         L     R0,SIZE\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         LTORG\n         DS    0F\nSIZE     DC    AL1(241),AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS'\n         SPACE 3\n         DS    0F\nSRBFMSG  DC    X'00280100'\n         DC    CL36'SRB FAILED TO POST '\n         SPACE 3\n         DS    0F\nERRMSG   DC    X'00280100'\n         DC    CL36'PARAMETER ERROR'\n         SPACE 3\n         DS    0F\nASNFND   DC    X'00280100'\n         DC    CL36'ADDRESS SPACE SPECIFIED NOT FOUND'\n         SPACE 3\n         DS    0F\nSWAPMSG  DC    X'00360100'\n         DC    CL50'ADDRESS SPACE REQUESTED IS SWAPPED OUT'\n         SPACE 3\n         DS    0F\nDISTMSG  DC    X'00360100'\n         DC    CL50'DISASTEROUS ERROR OCCURED IN SRB MODE'\n         SPACE 3\n         DS    0F\nXMPTMSG  DC    X'00360100'\n         DC    CL50'CROSS-MEMORY POST FAILED'\n         SPACE 3\n         DS    0F\nPURGMSG  DC    X'00360100'\n         DC    CL50'ADDRESS SPACE PURGING SRBS'\n         DROP  R12,R13\n         TITLE 'XA1SN03D  #T COMMAND  --  SRB MODE CODE'\nD#SRBCD  DS    0D\n*\n*        THIS CODE PERFORMS THE FOLLOWING FUNCTIONS\n*              1 ESTABLISHES AN FRR FOR ERROR RECOVERY\n*              2 PASSES BACK THE FORMATTED DATA FOR WTO\n*              3 CROSS-MEMORY POST THE MAIN COMMAND PROCESSOR\n*\n         USING WORK,R8\n         USING D#SRBCD,R7\n         LR    R8,R1          SET THE MAIN PARM DSECT\n         LR    R7,R15         SET THE BASE REGISTER\n         ST    R14,ASRBRTN    SAVE RETURN ADDR\n         TM    FLAG1,FG1SUBR  IS THIS A SUBROUTINE CALL\n         BO    D#SRB1         YES SO SKIP FRR\n         LA    R5,D#FRRCD     POINT AT FRR CODE\n         SETFRR  A,FRRAD=(R5),WRKREGS=(2,3),PARMAD=(R4)\n         ST    R4,FRRPRMS     SAVE ADDR OF FRRPRMS\n*\n*        NOW INIT THE FRR PARM AREA AND VALIDATE THE INPUT ADDR\n*\nD#SRB1   L     R9,FRRPRMS     ACCESS THE 6 WORK PARM AREA\n         STM   R7,R8,0(R9)    SAVE BASE AND WORK REGS\n         LA    R10,OUTAREA    OUTPUT AREA\n         L     R4,16          CVT\n         L     R4,0(0,R4)     TCB WORDS\n         L     R4,12(0,R4)    CURRENT ASCB\n         L     R4,108(0,R4)   ASXB\n         L     R4,8(0,R4)     LAST TCB ON CHAIN\n         L     R1,180(0,R4)   JSCB ADDR\n         LA    R1,0(0,R1)\n         L     R6,12(0,R4)    TIOT\n         L     R4,164(0,R4)   TCT\n         LA    R4,0(0,R4)\n         LTR   R4,R4          TCT PRESENT\n         BZ    *+12           NO\n         L     R4,12(0,R4)    TCTTIO\n         LA    R4,0(0,R4)\n         MVC   0(48,R10),=CL48' '\n         MVC   0(4,R10),ASIDCH ASID\n         MVC   6(8,R10),0(R6) JOBNAME\n         MVC   16(8,R10),8(R6) STEPNAME\n         MVC   26(8,R10),16(R6) PROCNAME\n         LTR   R1,R1          JSCB PRESENT\n         BZ    D#SRB1B        NO\n         L     R1,260(0,R1)   JCT ADDR\n         LA    R1,0(0,R1)\n         LTR   R1,R1          JCT PRESENT\n         BZ    D#SRB1B        NO\n         L     R1,56(0,R1)    ACT ADDR\n         SRL   R1,8\n         LTR   R1,R1          ACT PRESENT\n         BZ    D#SRB1B        NO\n         LA    R10,48(0,R10)\n         MVC   0(20,R10),24(R1)  PROGRAMMER NAME\n         LA    R10,48(0,R10)\n         MVC   0(48,R10),48(R1)  ACCT FIELDS\n         LA    R14,0(0,R10)   1ST FIELD\n         SR    R1,R1\n         IC    R1,0(0,R14)    FIELD LENGTH\n         MVI   0(R14),C'('\nD#SRB1A  LA    R14,1(R1,R14)  NEXT FIELD\n         IC    R1,0(0,R14)    FIELD LENGTH\n         MVI   0(R14),C','\n         LTR   R1,R1          SKIPPED FIELD\n         BNZ   D#SRB1A        NO\n         CLC   1(4,R14),=F'0' END OF FIELDS\n         BNE   D#SRB1A        NO\n         MVI   0(R14),C')'\n         SPACE 1\nD#SRB1B  LTR   R4,R4          TCT PRESENT\n         BZ    NOTCTIO        NO\n         LA    R5,8(0,R4)     TCTTIO LOOKUP\n         SPACE 1\nD#SRB2   LA    R10,48(0,R10)  NEXT OUTAREA ADDR\n         MVC   0(48,R10),=CL48' '\n         MVI   0(R10),C'-'\n         L     R14,0(0,R5)    DD ENTRY TIOT OFFSET             GLA-BFG\n         L     R15,4(0,R5)    DD ENTRY TCTTIO COUNT ENTRY OFF  GLA-BFG\n         LA    R14,0(R14,R6)  DD ENTRY ADDRESS\n         LA    R15,0(R15,R4)  TCTTIO COUNT ENTRY ADDRESS\n         MVC   2(8,R10),4(R14) DD NAME\n         L     R1,16(0,R14)   UCB ADDR\n         LA    R1,0(0,R1)\n         LTR   R1,R1          ZERO UCB ADDR\n         BZ    D#SRB2B        YES\n         MVC   12(3,R10),13(R1) UNIT ADDR\n         TM    18(R1),X'A0'   DASD OR TAPE\n         BZ    D#SRB2A        NO, NO VOLSER\n         MVC   24(6,R10),28(R1) VOLSER\n         SPACE 1\nD#SRB2A  LA    R9,DEVTAB\n         SPACE 1\nD#SRB3   CLC   0(2,R9),18(R1) DEVTYPE MATCH\n         BE    D#SRB4         YES\n         LA    R9,8(0,R9)\n         CLI   0(R9),X'00'    END OF TABLE\n         BNE   D#SRB3         NO\n         SPACE 1\nD#SRB2B  MVC   16(6,R10),=CL6'*JES*'\n         TM    3(R14),X'82'   JES2 DATASET\n         BNZ   D#SRB5         YES\n         MVC   16(6,R10),=CL6'*TERM*'\n         TM    3(R14),X'20'   TERMINAL DATASET\n         BNZ   D#SRB5         YES\n         MVC   16(6,R10),=CL6'DYNAM'\n         TM    3(R14),X'10'   DD DYNAM DATASET\n         BNZ   D#SRB5         YES\n         MVC   16(6,R10),=CL6'*UNK*'\n         B     D#SRB5\n         SPACE 1\nD#SRB4   MVC   16(6,R10),2(R9) DEVTYPE\n         TM    18(R1),X'20'   DASD\n         BZ    D#SRB5         NO\n         TM    17(R1),X'08'   VIRTUAL VOLUME\n         BZ    D#SRB5         NO\n         MVI   20(R10),C'V'\nD#SRB5   L     R1,8(0,R15)    EXCP COUNT                       GLA-BFG\n         CVD   R1,DOUBLE\n         MVC   32(12,R10),=X'402020206B2020206B202120'\n         ED    32(12,R10),DOUBLE+3\n         L     R1,12(0,R14)   JFCB ADDR\n         SRL   R1,8           SHIFT OVER\n         LTR   R1,R1          JFCB ADDR PRESENT\n         BZ    D#SRBX         NO\n         LA    R1,16(0,R1)         POINT TO REAL JFCB START\n         CLI   TYPE,C'L'      LONG DISPLAY\n         BNE   D#SRBX         NO, CONTINUE\n         LA    R10,48(0,R10)\n         BAL   R11,DDFORM     FORMAT DCB INFO\n         SPACE 1\nD#SRBX   LA    R5,8(0,R5)     NEXT TCTIO LOOKUP ENTRY          GLA-BFG\n         CLC   0(4,R5),=F'0'  END OF ENTRIES\n         BNE   D#SRB2         NO\n         B     FRRRTY\nNOTCTIO  LA    R10,48(0,R10)\n         MVC   0(48,R10),=CL48'NO EXCP COUNTS AVAILABLE FOR THIS JOB'\n         LA    R6,24(0,R6)    DD ENTRIES\n         SPACE 1\nNOTCT    LA    R10,48(0,R10)\n         MVC   0(48,R10),=CL48' '\n         MVI   0(R10),C'-'\n         SR    R5,R5\n         IC    R5,0(0,R6)     DD ENTRY LENGTH\n         MVC   2(8,R10),4(R6) DD NAME\n         SR    R1,R1\n         L     R1,16(0,R6)    UCB ADDR\n         LA    R1,0(0,R1)\n         LTR   R1,R1          ZERO\n         BZ    NOTCT2A        YES\n         MVC   12(3,R10),13(R1) UNIT ADDR\n         TM    18(R1),X'A0'   DASD OR TAPE\n         BZ    NOTCT1         NO, NO VOLSER\n         MVC   24(6,R10),28(R1) VOLSER\n         B     NOTCT1\n         SPACE 1\nNOTCT1   LA    R9,DEVTAB\n         SPACE 1\nNOTCT2   CLC   0(2,R9),18(R1) DEVTYPE MATCH\n         BE    NOTCT3         YES\n         LA    R9,8(0,R9)\n         CLI   0(R9),X'00'    END OF TABLE\n         BNE   NOTCT2         NO\n         SPACE 1\nNOTCT2A  MVC   16(6,R10),=CL6'*JES*'\n         TM    3(R6),X'82'   JES2 DATASET\n         BNZ   NOTCT4         YES\n         MVC   16(6,R10),=CL6'*TERM*'\n         TM    3(R6),X'20'   TERMINAL DATASET\n         BNZ   NOTCT4         YES\n         MVC   16(6,R10),=CL6'DYNAM'\n         TM    3(R6),X'10'   DD DYNAM DATASET\n         BNZ   NOTCT4         YES\n         MVC   16(6,R10),=CL6'*UNK*'\n         B     NOTCT4\n         SPACE 1\nNOTCT3   MVC   16(6,R10),2(R9) DEVTYPE\n         TM    18(R1),X'20'   DASD\n         BZ    NOTCT4         NO\n         TM    17(R1),X'08'   VIRTUAL VOLUME\n         BZ    NOTCT4         NO\n         MVI   20(R10),C'V'\n         SPACE 1\nNOTCT4   L     R1,12(0,R6)    JFCB ADDR\n         SRL   R1,8           SHIFT OVER\n         LTR   R1,R1          JFCB ADDR PRESENT\n         BZ    NOTCTX         NO\n         LA    R1,16(0,R1)         POINT TO REAL JFCB START\n         CLI   TYPE,C'L'      LONG DISPLAY\n         BNE   NOTCTX         NO, CONTINUE\n         LA    R10,48(0,R10)\n         BAL   R11,DDFORM     FORMAT DCB INFO\n         SPACE 1\nNOTCTX   LA    R6,0(R5,R6)    NEXT DD ENTRY\n         CLC   0(4,R6),=F'0'  END OF ENTRIES\n         BNE   NOTCT          NO\n         B     FRRRTY\nDDFORM   MVC   2(44,R10),0(R1)     MOVE DSNAME TO MSG\n         MVC   0(2,R10),=CL2' '\n         MVC   46(2,R10),=CL2' '\n         LA    R10,48(0,R10)\n         MVC   0(2,R10),=CL2' '\n         MVC   2(46,R10),DCBMSG    DCB DUMMY MSG\n         LH    R14,104(0,R1)       LRECL\n         CVD   R14,DOUBLE\n         UNPK  29(5,R10),DOUBLE+5(3)\n         OI    33(R10),X'F0'\n         LH    R14,102(0,R1)       BLKSIZE\n         CVD   R14,DOUBLE\n         UNPK  42(5,R10),DOUBLE+5(3)\n         OI    46(R10),X'F0'\n         SPACE 3\nDDFORM2  MVC   7(2,R10),=C'PS'\n         TM    98(R1),X'40'        PS\n         BO    DDFORM3\n         MVC   7(2,R10),=C'PO'\n         TM    98(R1),X'02'        PO\n         BO    DDFORM3\n         MVC   7(2,R10),=C'IS'\n         TM    98(R1),X'80'        IS\n         BO    DDFORM3\n         MVC   7(2,R10),=C'DA'\n         TM    98(R1),X'20'        DA\n         BO    DDFORM3\n         MVC   7(2,R10),=C'CX'\n         TM    98(R1),X'10'        CX\n         BO    DDFORM3\n         MVC   7(2,R10),=C'AM'\n         TM    98(R1),X'08'        AMB\n         BO    DDFORM3\n         MVC   7(2,R10),=C'TX'\n         TM    99(R1),X'40'        TX\n         BO    DDFORM3\n         MVC   7(2,R10),=C'TQ'\n         TM    99(R1),X'20'        TQ\n         BO    DDFORM3\n         MVC   7(2,R10),=C'TR'\n         TM    99(R1),X'04'        TR\n         BO    DDFORM3\n         MVC   7(2,R10),=C'AC'\n         TM    99(R1),X'08'        ACB\n         BO    DDFORM3\n         XC    0(4,R10),0(R10)\n         S     R10,=F'48'\n         BR    R11\nDDFORM3  MVC   17(2,R10),=C'**'    SET DEFAULT RECFM\n         TM    100(R1),X'C0'\n         BZ    DDFORM4             NO RECFM\n         MVI   17(R10),C'U'        UNDEFINED\n         BO    DDFORM4\n         MVI   17(R10),C'F'        FIXED\n         TM    100(R1),X'80'\n         BO    DDFORM4\n         MVI   17(R10),C'V'        VARIABLE\n         SPACE 3\nDDFORM4  LA    R14,18(0,R10)       POINT TO NEXT BYTE\n         TM    100(R1),X'10'       BLOCKED\n         BZ    DDFORM5             NO\n         MVI   0(R14),C'B'\n         LA    R14,1(0,R14)\n         SPACE 3\nDDFORM5  MVI   0(R14),C'S'\n         TM    100(R1),X'08'       SPANNED\n         BO    DDFORM9\n         MVI   0(R14),C'A'\n         TM    100(R1),X'04'       ASA\n         BO    DDFORM9\n         MVI   0(R14),C'M'\n         TM    100(R1),X'02'       MACHINE\n         BO    DDFORM9\n         MVI   0(R14),C' '\n         SPACE 1\nDDFORM9  BR    R11\nFRRRTY   LA    R10,48(R10)         POINT TO NEXT ENTRY         GLA-BFG\n         XC    0(4,R10),0(R10)     END OF OUTPUT               GLA-BFG\n         TM    FLAG1,FG1SUBR  IS THIS SUBROUTINE MODE\n         BO    D#EXIT         IF SO THEN EXIT\n         SETFRR  D,WRKREGS=(2,3)\nFRRPOST  L     R10,=A(X'40000000') SET CODE FOR POST\n         LR    R9,R8          SAVE WORK POINTER IN SAFE REG\n         LA    R11,ECB        ADDR OF ECB TO POST\n         ICM   R11,8,=X'80'   FLAG AS XMPOST\n         LA    R12,D#POSTR    SET POST ERROR RETURN\n         L     R13,MYASCB     ASCB TO POST\n         L     R15,CVTPTR     POINT AT CVT\n         L     R15,CVT0PT01-CVTMAP(R15)    GET POST ENTRY POINTR\n         BALR  R14,R15        GO DO POST\n         DROP  R7             KILL MAIN ADDRESS\n         USING *,R14          SET TEMP BASE\nD#PRTN   LR    R8,R9          RESET BASE OF WORK\n         SL    R14,=A(D#PRTN-D#SRBCD)  NOW HAVE CORRECTED BASE\n         LR    R7,R14         SET TO PROPER REG\n         DROP  R14\n         USING D#SRBCD,R7     RESET MAIN BASE\n         OI    FLAG1,FG1SRDN  FLAG SRB AS COMPLETED\nD#EXIT   L     R14,ASRBRTN    RESTORE RETURN ADDR\n         BR    R14            EXIT\n         SPACE 5\n*\n*        POST ERROR ROUTINE  .. FLAG ERROR AND LET TIMER\n*        WAKE UP COMM TASK\n*\nD#POSTR  LR    R8,R9          RESET WORK BASE\n         OI    FLAG2,FG2PSTR  FLAG POST ERROR\n         BR    R14            RETURN TO D#PRTN\n         TITLE 'XA1SN03D  #T COMMAND  --  FRR FOR THE SRB MODE'\nD#FRRCD  DS    0D\n         L     R2,0(R1)       POINT AT PARM AREA\n         LM    R7,R8,0(R2)    SET BASE REGS\n         TM    0(R2),X'80'    ARE WE IN VALIDATION\n         BZ    D#FRR1         NOPE\n*\n*        VALIDATION ERROR\n*\n         OI    FLAG2,FG2IVLD  SET FLAG FOR MESSAGE\n         SETRP RECORD=NO,RC=4,RETADDR=FRRRTY,REGS,DUMP=NO,             X\n               RETREGS=YES,FRESDWA=YES\n         BR    R14            EXIT\n         SPACE 5\n*\n*        ALL OTHER ERRORS\n*\nD#FRR1   OI    FLAG2,FG2ERRR  SET FLAG FOR MESSAGES\n         LA    R10,OUTAREA-48\n         SPACE 1\nD#FRR2   LA    R10,48(0,R10)\n         CLC   0(4,R10),=F'0'        END OF OUTPUT\n         BNE   D#FRR2\n         MVC   0(48,R10),=CL48'ERROR ENCOUNTERED IN CONTROL BLOCKS'\n         SETRP RECORD=YES,RC=4,RETADDR=FRRRTY,REGS,DUMP=YES,           X\n               RETREGS=YES,FRESDWA=YES\n         BR    R14            EXIT\n         TITLE 'XA1SN03D  #T COMMAND  --  RESOURCE MANAGER CLEANUP'\n*\n*        THIS ROUTINE RECEIVES CONTROL IF THE SRB MUST BE\n*        PURGED.\n*\nD#RMTR   DS    0H\n         USING *,R15\n         LR    R7,R15         SET BASE REGISTER\n         SL    R7,=A(D#RMTR-D#SRBCD)   BY COMPUTATION\n         DROP  R15\n         USING D#SRBCD,R7\n         LR    R8,R2          SET UP POINTER TO WORK\n         ST    R14,ASRBRTN    SAVE RETURN ADDR\n         OI    FLAG2,FG2PURG  SET PURGED\n         B     FRRPOST        GO AND POST TO CLEAN UP\n         LTORG\nDCBMSG   DC    CL46'DSO=(  )  RFM=(   )  LRECL=       BLKSZ=     '\n         DS    0F\nDEVTAB   DC    X'0806',CL6'3505  '\n         DC    X'0808',CL6'1403  '\n         DC    X'0809',CL6'3211  '\n         DC    X'080E',CL6'3800  '\n         DC    X'080A',CL6'1443  '\n         DC    X'0804',CL6'2501  '\n         DC    X'1008',CL6'3066  '\n         DC    X'1009',CL6'3277  '\n         DC    X'100A',CL6'3284  '\n         DC    X'100B',CL6'3286  '\n         DC    X'8001',CL6'2400  '\n         DC    X'8003',CL6'3400  '\n         DC    X'2009',CL6'3330  '\n         DC    X'200B',CL6'3350  '\n         DC    X'200D',CL6'3330-1'\n         DC    X'200A',CL6'3340  '\n         DC    X'2007',CL6'2305-2'\n         DC    X'200C',CL6'3375  '   AXC-CBT 10/05/82\n         DC    X'200E',CL6'3380  '   AXC-CBT 10/05/82\n         DC    X'0000',CL6'      '\n         DC    X'0000',CL6'      '\n         DC    X'0000',CL6'      '\n         TITLE 'XA1SN03D  #T COMMAND  --  DSECTS'\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT NOGEN\n         CVT   DSECT=YES                                        GLA-BFG\n         IHAASVT\n         IHAASCB\n         IHAFRRS\n         IHAPSA\n         IHASDWA\n         IHASRB\n         IHARB\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\n         DS    0D\nDOUBLE   DS    2F\nXSASAVE  DS    F\nTYPE     DS    F\nWTOLIST  DS    F\nPRINT    DS    52C\nPST      STAE  PST,CT,MF=L\nDMYPRMS  DS    6F             DUMMY AREA FOR FRR PARMS FOR SUBR MODE\nFRRPRMS  DS    F              ADDRESS OF 6 WORD FRR PARM\nASRBRTN  DS    F              RETURN ADDR FOR SRB CODE\nMYASCB   DS    F              ASCB ADDR OF MAIN ROUTINE\nMYTCB    DS    F              TCB ADDRESS FOR MAIN ROUTINE\nTOASCB   DS    F              ASCB ADDR OF SRB ROUTINE\nECB      DS    F              ECB FOR MAIN ROUTINE TO WAIT ON\nECB2     DS    F              ECB FOR STIMER TO POST\nECBLIST  DS    2F\nLENGTH   DS    F              LENGTH OF STORAGE TO DUMP\nSRBAREA  DS    ((SRBSIZE+3)/4)F  THE SRB ITSELF\nASIDCH   DS    F              ASID OF TOASCB\nASID     DS    H              ASID OF TOASCB\nFLAG1    DS    X\nFG1DUMP  EQU   X'80'\nFG1REP   EQU   X'40'\nFG1SRDN  EQU   X'02'          IF ON SRB HAS TERMINATED\nFG1SUBR  EQU   X'01'\nFLAG2    DS    X\nFG2NVER  EQU   X'01'          VERIFICATION FAILED\nFG2IVLD  EQU   X'02'          VALIDATION FAILED\nFG2ERRR  EQU   X'04'          DISASTER OCCURED IN SRB\nFG2PURG  EQU   X'08'          SRB WAS PURGED\nFG2PSTR  EQU   X'10'          IF ON THEN SRB POST HAD ERROR\nESTAELST DS    0F,(ESTAEOVX)X                         ****(RLL)****\nOUTAREA  DS    500CL48\nWORKEND  DS    0F\n         END\n./       ADD   NAME=CSCSO03D\n         TITLE 'IEESO03D -   #M  TSO MULTIPLE SEND'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESO03D -       #M  TSO MULTIPLE SEND                    ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESO03D CSECT\n         LR    R12,R15\n         USING IEESO03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         MVC   CMDLIST(88),CMDLSTOV\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD SUB-PARM ADDR\n         LTR   R3,R3               SUB-PARM PRESENT\n         BNZ   COMMAND             YES, CONTINUE\n         LA    R1,ERRMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 3\nEXIT     EQU   *\n         ESTAE 0\n         L     R0,SIZE             LOAD FREEMAIN SIZE\n         LR    R1,R13              LOAD FREEMAIN ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14                 EXIT\nCOMMAND  MVC   CMDLIST+12(68),0(R3) MESSAGE\n         LA    R6,10\n         SPACE 1\nCOMMAND1 LA    R1,CMDLIST          YES\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   34\n         BCT   R6,COMMAND1\n         LA    R1,ISSMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESO03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         SPACE 5\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nERRMSG   DC    X'00300100'\n         DC    CL44'PARAMETER ERROR'\n         SPACE 3\nISSMSG   DC    X'00340100'\n         DC    CL48'MESSAGE SENT TO ALL LOGGED ON USERS'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nCMDLSTOV DC    X'00540000'\n         DC    CL8'  SEND '''\n         DC    CL68' ',C'''',CL7' '\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    F\nXSASAVE  DS    F\n         SPACE 3\n         DS    0F\nCMDLIST  DS    CL88\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X ACX-CBT\nWORKEND  DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSP03D\n         TITLE 'IEESP03D -   #P  SU CONFIGURATION'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESP03D -       #P  SU CONFIGURATION                     ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8. TO MVS/SP1.3                ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESP03D CSECT\n         LR    R12,R15            SET ADDRESSABILITY\n         USING IEESP03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         USING XSA,R2\n         ST    R14,SAVRET          PUT RETURN ADDRESS IN UNUSED SLOT\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVI   TYPE,C'S'          SET SU SELECT SCAN TYPE\n         L     R3,XAL             LOAD SUB-PARM ADDR\n         LTR   R3,R3              ANY SUB-PARM\n         BZ    *+10               NO\n         MVC   TYPE(1),0(R3)      SET SCAN TYPE\n         L     R3,16              CVT\n         L     R4,196(0,R3)       SMCA\n         LA    R9,0(0,R3)\n         S     R9,=F'8'\n         MVC   WTOLIST(52),SYSOVLY\n         MVC   WTOLIST+14(4),16(R4) SYSID\n         UNPK  WTOLIST+29(5),2(3,R9) CPU MODEL\n         OI    WTOLIST+32,X'F0'\n         MVI   WTOLIST+33,C' '\n         MVC   WTOLIST+48(4),4(R9)  OPER SYSTEM LEVEL\n         MVC   WTOLIST+48(1),5(R9)  OPER SYSTEM LEVEL\n         MVI   WTOLIST+49,C'.'\n         LA    R1,WTOLIST          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         L     R3,1044(0,R3)      SU BITS\n         LA    R4,SUTABLE-52\n         LA    R8,4                NO. OF SUBIT WORDS\nSUBIT1   L     R7,0(0,R3)          1ST WORD OF SU BITS\n         SR    R6,R6\n         LA    R5,32\n         SPACE 1\nSUBIT2   SLDL  R6,1\n         LA    R4,52(0,R4)\n         CLI   TYPE,C'C'           PRINT CURRENT\n         BE    SUBIT5\n         CLI   TYPE,C'A'           PRINT ALL\n         BE    SUBIT6\n         LTR   R6,R6               SU BIT ON\n         BZ    SUBIT3              NO\n         CLI   TYPE,C'I'           PRINT INSTALLED\n         BE    SUBIT4              YES\n         CLC   12(9,R4),=CL9'-OBSOLETE'\n         BNE   SUBIT4\n         SPACE 1\nSUBIT3   BCT   R5,SUBIT2           NEXT BIT\n         LA    R3,4(0,R3)          NEXT WORD\n         BCT   R8,SUBIT1\n         B     EXIT\n         SPACE 1\nSUBIT4   LA    R1,0(0,R4)          SU BIT TABLE MESSAGE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SR    R6,R6\n         B     SUBIT3\n         SPACE 1\nSUBIT5   CLC   12(9,R4),=CL9'-OBSOLETE'\n         BE    SUBIT3\n         SPACE 1\nSUBIT6   CLI   12(R4),C' '         VALID SU\n         BNE   SUBIT4              YES\n         B     SUBIT3\n         SPACE 3\nEXIT     EQU   *\n         ESTAE 0\n         L     R0,SIZE\n         L     R14,SAVRET\n         LR    R1,R13\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESP03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORK)\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nSYSOVLY  DC    X'00340100'\n         DC    CL48'SYSTEM -  XXXX    CPU -  XXXX    VS2 REL -  XXXX'\nSUTABLE  DC    X'00340100',CL48' '\n DC X'00340100',CL48'SU1     VTAM RELEASE 2            FMID(EVT0108)'\n DC X'00340100',CL48'SU2     -OBSOLETE-                             '\n DC X'00340100',CL48'SU3     -OBSOLETE-                             '\n DC X'00340100',CL48'SU4     SCHEDULER IMPROVEMENTS                 '\n DC X'00340100',CL48'SU5     SUPERVISOR PERF. # 1                   '\n DC X'00340100',CL48'SU6     -OBSOLETE-                             '\n DC X'00340100',CL48'SU7     SUPERVISOR PERF. # 2                   '\n DC X'00340100',CL48'SU8     DATA MANAGEMENT                        '\n DC X'00340100',CL48'SU9     SAM-E  5740-AM3    (PP)   FMID(JDM1112)'\n DC X'00340100',CL48'SU10    3800 SUPPORT                           '\n DC X'00340100',CL48'SU11    TSO CMD 5740-XT6   (PP)   FMID(JBB1112)'\n DC X'00340100',CL48'SU12    -OBSOLETE-                             '\n DC X'00340100',CL48'SU13    -OBSOLETE-                             '\n DC X'00340100',CL48'SU14    -OBSOLETE-                             '\n DC X'00340100',CL48'SU15    -OBSOLETE-                             '\n DC X'00340100',CL48'SU16    SCHEDULER/IOS SUPPORT                  '\n DC X'00340100',CL48'SU17    SERVICE DATA IMPROV.                   '\n DC X'00340100',CL48'SU18    -OBSOLETE-                             '\n DC X'00340100',CL48'SU19    -OBSOLETE-                             '\n DC X'00340100',CL48'SU20    -OBSOLETE-                             '\n DC X'00340100',CL48'SU21    -OBSOLETE-                             '\n DC X'00340100',CL48'SU22    -OBSOLETE-                             '\n DC X'00340100',CL48'SU23    JES2 NJE3 5740-XR8 (PP)   FMID(JJE1112)'\n DC X'00340100',CL48'SU24    3850 MSS R3 IMPROVMENTS   FMID(EMS1102)'\n DC X'00340100',CL48'SU25    JES2 R4.1                 FMID(EJE1102)'\n DC X'00340100',CL48'SU26    JES3 R3                   FMID(EJS1102)'\n DC X'00340100',CL48'SU27    EREP                                   '\n DC X'00340100',CL48'SU28                                           '\n DC X'00340100',CL48'SU29    3838 SUPPORT                           '\n DC X'00340100',CL48'SU30    3895 SUPPORT                           '\n DC X'00340100',CL48'SU31                                           '\n DC X'00340100',CL48'SU32    RACF                                   '\n DC X'00340100',CL48'SU33    DUMP IMPROVEMENTS                      '\n DC X'00340100',CL48'SU34    ACF/VTAM 5735-RC2  (PP)   FMID(JVT1122)'\n DC X'00340100',CL48'SU35    ACF/VTAM 5735-RC2  (PP)   FMID(JVT1112)'\n DC X'00340100',CL48'SU36    TCAM 10  NCP/VS DIRECT    FMID(ETC0108)'\n DC X'00340100',CL48'SU37    SSS R5                    FMID(ESS1102)'\n DC X'00340100',CL48'SU38                                           '\n DC X'00340100',CL48'SU39    CRYPT0   5740-XY5  (PP)   FMID(HCR1102)'\n DC X'00340100',CL48'SU40    ACF/VTAM SCP              FMID(EVT1102)'\n DC X'00340100',CL48'SU41    DASDR              (PP)   FMID(JDS1112)'\n DC X'00340100',CL48'SU42    3800 OFFL 5748-UT2 (PP)   FMID(JUT1112)'\n DC X'00340100',CL48'SU43    -OBSOLETE-                             '\n DC X'00340100',CL48'SU44    ACF/TCAM 5735-RC1  (PP)   FMID(JCT1122)'\n DC X'00340100',CL48'SU45    NOSP  5734-XX2     (PP)   FMID(HNO1102)'\n DC X'00340100',CL48'SU46    ACF/TCAM 5735-RC1  (PP)   FMID(JTC1112)'\n DC X'00340100',CL48'SU47    -OBSOLETE-                             '\n DC X'00340100',CL48'SU48    3800 12 LINES/INCH                     '\n DC X'00340100',CL48'SU49    -OBSOLETE-                             '\n DC X'00340100',CL48'SU50    MVS/SE R1 5740-XE1 (PP)   FMID(JBB1122)'\n DC X'00340100',CL48'SU51    PROCESSOR SUPPORT # 1                  '\n DC X'00340100',CL48'SU52    -OBSOLETE-                             '\n DC X'00340100',CL48'SU53    RMF2 R2.0 5740-XY4 (PP)   FMID(HRM2205)'\n DC X'00340100',CL48'SU54    ACF/VTAM CRYPTO    (PP)   FMID(JVT1132)'\n DC X'00340100',CL48'SU55    HARDWARE RECOVERY IMP.                 '\n DC X'00340100',CL48'SU56    VPSS   5744-CK1    (PP)   FMID(EVP1102)'\n DC X'00340100',CL48'SU57    IPCS                      FMID(EIP1102)'\n DC X'00340100',CL48'SU58    TSO/VTAM LEVEL 2          FMID(ETV0108)'\n DC X'00340100',CL48'SU59    ACF/TCAM SCP  TCAM11      FMID(ETC1102)'\n DC X'00340100',CL48'SU60    DATA MANAGEMENT SUPPORT                '\n DC X'00340100',CL48'SU61    RMF2 R2.2 5740-XY4 (PP)   FMID(HRM2204)'\n DC X'00340100',CL48'SU62    RACF V1 R3         (PP)   FMID(HRF1302)'\n DC X'00340100',CL48'SU63    -OBSOLETE-                             '\n DC X'00340100',CL48'SU64    PROCESSOR SUPPORT # 2                  '\n DC X'00340100',CL48'SU65    MVS/SE WITH SU64                       '\n DC X'00340100',CL48'SU66    HSM SUPPED BY SU99 (PP)   FMID(HHM1102)'\n DC X'00340100',CL48'SU67    SMP4                                   '\n DC X'00340100',CL48'SU68    DEMF                      FMID(EDE1102)'\n DC X'00340100',CL48'SU69                                           '\n DC X'00340100',CL48'SU70                                           '\n DC X'00340100',CL48'SU71                                           '\n DC X'00340100',CL48'SU72    AMS CRYPT 5740-AM8 (PP)   FMID(JDM1122)'\n DC X'00340100',CL48'SU73                                           '\n DC X'00340100',CL48'SU74                                           '\n DC X'00340100',CL48'SU75                                           '\n DC X'00340100',CL48'SU76                                           '\n DC X'00340100',CL48'SU77                                           '\n DC X'00340100',CL48'SU78    TSO SESION MANAGER (PP)   FMID(HTS1202)'\n DC X'00340100',CL48'SU79                                           '\n DC X'00340100',CL48'SU80                                           '\n DC X'00340100',CL48'SU81                                           '\n DC X'00340100',CL48'SU82                                           '\n DC X'00340100',CL48'SU83                                           '\n DC X'00340100',CL48'SU84    DEVICE SUPPORT FACILITY                '\n DC X'00340100',CL48'SU85                                           '\n DC X'00340100',CL48'SU86                                           '\n DC X'00340100',CL48'SU87                                           '\n DC X'00340100',CL48'SU88                                           '\n DC X'00340100',CL48'SU89                                           '\n DC X'00340100',CL48'SU90                                           '\n DC X'00340100',CL48'SU91                                           '\n DC X'00340100',CL48'SU92                                           '\n DC X'00340100',CL48'SU93                                           '\n DC X'00340100',CL48'SU94                                           '\n DC X'00340100',CL48'SU95    RMF SPPTZ (MVS/SE) (PP)                '\n DC X'00340100',CL48'SU96    RMF SPPTZ (NON/SE) (PP)                '\n DC X'00340100',CL48'SU97                                           '\n DC X'00340100',CL48'SU98                                           '\n DC X'00340100',CL48'SU99    HSM                (PP)   FMID(HHM1202)'\n DC X'00340100',CL48'SU100                                          '\n DC X'00340100',CL48'SU101                                          '\n DC X'00340100',CL48'SU102                                          '\n DC X'00340100',CL48'SU103                                          '\n DC X'00340100',CL48'SU104                                          '\n DC X'00340100',CL48'SU105                                          '\n DC X'00340100',CL48'SU106                                          '\n DC X'00340100',CL48'SU107                                          '\n DC X'00340100',CL48'SU108                                          '\n DC X'00340100',CL48'SU109                                          '\n DC X'00340100',CL48'SU110                                          '\n DC X'00340100',CL48'SU111                                          '\n DC X'00340100',CL48'SU112                                          '\n DC X'00340100',CL48'SU113                                          '\n DC X'00340100',CL48'SU114                                          '\n DC X'00340100',CL48'SU115                                          '\n DC X'00340100',CL48'SU116                                          '\n DC X'00340100',CL48'SU117                                          '\n DC X'00340100',CL48'SU118                                          '\n DC X'00340100',CL48'SU119                                          '\n DC X'00340100',CL48'SU120                                          '\n DC X'00340100',CL48'SU121                                          '\n DC X'00340100',CL48'SU122                                          '\n DC X'00340100',CL48'SU123                                          '\n DC X'00340100',CL48'SU124                                          '\n DC X'00340100',CL48'SU125                                          '\n DC X'00340100',CL48'SU126                                          '\n DC X'00340100',CL48'SU127                                          '\nWORK     DSECT\nSAVRET   DS    F\nXSASAVE  DS    F\nTYPE     DS    F\nWTOLIST  DS    CL52\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X AXC-CBT\nWORKEND  DS    0D\nDSXSA    DSECT\nXSA      DS    0D\nXAP      DS    F                  PTR TO XCTL NAME\nXAD      DS    F                  DCB PTR\nXAX      DS    D                  XCTL NAME\nXAE      DS    0C                 ERROR CODE\nXAR      DS    F                  PTR TO PARM LIST (REG1)\nXAN      DS    0C                 VERB INDEX\nXAL      DS    F                  PTR TO LIST POSITION\nXAV      DS    D                  VERB\nXAS      DS    D                  TEMP SAVE-AREA\nXAU      DS    C                  UCM ENTRY INDICATOR\n         DS    C                  RESERVED\nXAJ      DS    H                  TJID ENTRY INDICATOR\n         DS    F                  RESERVED\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSQ03D\n         TITLE 'IEESQ03D -   #Q  ENQUEUE ANALYZER'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESQ03D -       #Q  ENQUEUE ANALYZER                     ***\n***                                                                 ***\n***       VERSION -        1.3                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   MVS/SP1.2-MVS/SP1.3       ***\n***                                                                 ***\n***       UPDATED -  07/21/81  -AXC-CBT HANDLE ESTAE                ***\n***       UPDATED -  11/13/81  -DED-HNB MVS/SP 1.3                  ***\n***       UPDATED -   9/17/82  -ADDED TOKEN FOR INCREASED           ***\n***                             PROCESSING SP1.3 --- CBT            ***\n***                            -CHANGED SUBPOOL PROCESSING          ***\n***       UPDATED -  10/01/82  -CHGD SO OUTPUT DOESN'T HAVE UNPRINT-***\n***                             ABLE CHARS WHEN EXECUTING VIA #     ***\n***       UPDATED -  01/26/83  -AXC-CBT CHANGE ESTAE PARM LEN       ***\n***       UPDATED -  04/21/86  -GLA-BFG CHANGE GQSCAN TO USE        ***\n***                             PARAMETER LIST IN WORK AREA         ***\n***                             THIS WILL PRESERVE REENTRANCY       ***\n***                  04/26/86  -GLA-BFG FIX ESTAE PARM LIST         ***\n***                                                                 ***\n***********************************************************************\n*********************************************************************\n*                                                                   *\n*                      H N B  -  NOTES                              *\n*                                                                   *\n*                                                                   *\n* NOTE - THIS CODE HAS NOT BEEN TESTED WITH A GRS RING              *\n*        SCOPE=GLOBAL WILL HAVE TO BE SPECIFIED ON THE GQSCAN MACRO *\n*        AND THE GQSCAN HAS TO RUN AUTHORIZED KEY ZERO.             *\n*                                                                   *\n* NOTE - THE 'SYSNAME=' IN IEASYS00 SHOULD SPECIFY YOUR SMFID TO    *\n*        GET THE CORRECT SYSTEM NAME IN THE 'SYSTEM' FIELD,         *\n*        OTHERWISE (NONA) \"NONAME\" WILL BE DISPLAYED.               *\n*                                                                   *\n* NOTE - THE \"SCANAREA\" MIGHT HAVE TO BE MADE LARGER FOR A SYSTEM   *\n*        WITH MANY DATASETS IN USE.  IF IT IS CHANGED, THE 2ND      *\n*        OPERAND ON THE \"AREA\" OPERAND OF THE \"GQSCAN\" MACRO MUST   *\n*        ALSO BE CHANGED.                                           *\n*                                                                   *\n* NOTE - TOKEN ADDED TO GQSCAN TO ALLOW TO PROCESSING OF LONGER     *\n*        ENQUE LISTS                                                *\n*                                                                   *\n*********************************************************************\n***********************************************************************\nIEESQ03D CSECT\n         LR    R12,R15            SET ADDRESSABILITY\n         USING IEESQ03D,R12\n**********************************************************************\n*  THE FOLLOWING O INSTRUCTION IS USED TO DETERMINE THE SUBPOOL NUMBER\n*  IF RUNNING AS A SUBSYSTEM, THEN SUBPOOL 241 IS USED.\n*  IF RUNNING UNDER TSO, THEN CMDSBTSO WILL MODIFY THE MASK BIT OF\n*  'F1000000' TO A MASK BIT OF '00000000' AND THUS CAUSE SUBPOOL 0\n*  TO BE USED. IN ORDER FOR THIS TO TAKE PLACE, THE EXACT CODING\n*  CONVENTIONS USED HERE FOR THE GETMAIN MUST BE FOLLOWED:\n**********************************************************************\n         LA    R0,PARTWORK        SIZE OF SAVE AND WORK AREA\n         A     R0,=F'00102400'    ADD IN THE SCANAREA SIZE\n         O     R0,SUB241          SUBPOOL MASK\n         GETMAIN R,LV=(0)\n         LR    R10,R1\n         USING WORK,R10\n         USING XSA,R2\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         ST    R14,SAVRET          PUT RETURN ADDRESS IN UNUSED SLOT\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         MVC   GQSCANL(GQSCANE-GQSCANP),GQSCANP SETUP LIST FORM GLA-BFG\n         MVC   MAJLINE(4),=X'00360100'\n         MVC   MINLINE(4),=X'00360100'\n         MVC   JOBLINE(4),=X'00360100'\n         MVC   MAJLINE+4(8),=CL8'MAJOR='\n         MVC   MINLINE+4(8),=CL8'MINOR='\n         MVC   MAJOR(44),=CL44' '\n         MVC   MINOR(44),=CL44' '\n         MVC   TKN,=F'0'               ZERO OUT TOKEN\nSTART    MVI   TKNSW,X'00'             INITIALIZE TOKEN SWITCH\n         LA    R8,SCANAREA             ADDR OF RETURNED DATA\n         LA    R9,SYSDSN               ADDR OF SYSDSN MAJOR NAME\n         LA    R6,SCANSAVE             ADDR GQSCAN SAVE AREA\nSCAN     GQSCAN AREA=((R8),102400),  ADDR AND LENGTH OF INFO RETURNED  X\n               REQLIM=MAX,             MAX NUM OF OWNERS TO BE RETURNEDX\n               SCOPE=ALL,              ALL SYSTEMS IN GRS RING         X\n               RESNAME=((R9)),         SCAN SYSDSN                     X\n               TOKEN=TKN,              TOKEN FUNCTION           GLA-BFGX\n               MF=(E,GQSCANL)          USE PARM LIST IN WORK AR GLA-BFG\n         LA    R7,BRTABLE              ADDRESS OF BRANCH TABLE\n         B     0(R15,R7)               BRANCH TO APPROPRIATE ROUTINE\nBRTABLE  B     CODE00                  ALLS OK\n         B     CODE04                  NO RESOURCES MATCHED REQUEST\n         B     CODE08                  GQSCAN AREA TOO SMALL\n         B     CODE0C                  ENCOUNTERED ERROR DATA AREA NG\n         B     CODE10                  INVALID SYSNAME\n         SPACE 2\nCODE00   ST    R0,RIBLNGTH             STORE RIB AND RIBE LENGTH\n         LR    R7,R1                   SAVE NUMBER OF RIBS\n         LA    R5,SCANAREA             ADDRESS OF GQSCAN AREA (1ST RIB)\n         USING RIB,R5                  RESOURCE INFORMATION BLOCK\nRIBLOOP  LR    R11,R5                  SAVE RIB POINTER\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         USING RIBVAR,R11              RESOURCE INFORMATION BLOCK\n         SR    R8,R8                   CLEAR REG\n         LH    R8,RIBVLEN              LENGTH OF VARIABLE SECTION\n         MVC   MINOR(44),=44C' '       CLEAR BEFORE USING\n         BCTR  R8,0                    MINUS ONE FOR EX INSTUCTION\n         EX    R8,MVCDSN               MOVE DSN TO PRINT LINE\n         B     SKIP                    BYPASS NEXT INSTRUCTION\nMVCDSN   MVC   MINOR(1),RIBRNAME       MOVE DSN TO PRINT LINE\n         DROP  R11\nSKIP     MVC   MAJOR(8),SYSDSN\n         LR    R11,R5                  SAVE RIB POINTER\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         AH    R11,RIBVLEN             POINT TO FIRST RIBE\n         USING RIBE,R11                RESOURCE INFORMATION BLOCK EXT\n         L     R9,RIBNRIBE             LOAD THE # OF RIBE'S\n         CLC   RIBNTWE,ANYENQ          ANY WAITING FOR EXCLUSIVE ?\n         BNE   SKIP1                     YES...PROCESS\n         CLC   RIBNTWS,ANYENQ          ANY WAITING FOR SHARE ?\n         BE    BUMPRIB                   NO....BUMP TO NEXT RIB\nSKIP1    LA    R1,MAJLINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R1,MINLINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\nSEARCH   MVC   JOBLINE+4(52),=CL52' '  BLANK OUT THE OUTPUT AREA\n         MVI   SWITCH,C'1'             SET SWITCH THAT THERE WAS ENQ\n         MVC   JOBNAME(8),RIBEJBNM     JOBNAME OF REQUESTOR\n         MVC   SYSTEM(4),RIBESYSN      SYSTEM NAME OF REQUESTOR\n         SPACE\nTEST1    TM    RIBERFLG,RIBETYPE       IS THIS EXCL OR SHARED?\n         BO    SHARED                     YES..\n         MVC   EXCLSHR(4),=C'EXCL'        NO...TELL USER\n         B     TEST2                      NEXT TEST\nSHARED   MVC   EXCLSHR(4),=C'SHR '        TELL USER\n         SPACE\nTEST2    TM    RIBESFLG,RIBESTAT       IS THIS GUY THE OWNER?\n         BO    OWNER                      YES..\n         MVC   WAIT(9),=C'*WAITING*'      TELL USER WAITING FOR DSET'S\n         B     TPUTIT                     GO PRINT IT\nOWNER    MVC   WAIT(9),=9C' '             TELL USER\n         SPACE\nTPUTIT   LA    R1,JOBLINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 2\nBUMPRIBE AH    R11,RIBELENG            POINT TO NEXT RIBE\n         BCT   R9,SEARCH               AND DO IT FOR NEXT USER\nBUMPRIB  SR    R3,R3                   CLEAR THE REG\n         L     R4,RIBNRIBE             NUMBER OF RIBE'S\nBUMPLOOP AH    R3,RIBELENG             ADD RIBE LENGTH\n         BCT   R4,BUMPLOOP             AND ADD TIMES NUMBER OF RIBE'S\n         AH    R3,RIBLNGTH             ADD LENGTH OF RIB\n         AH    R3,RIBVLEN              ADD LENGTH OF VARIABLE SECTION\n         AR    R5,R3                   POINT TO NEXT RIB\n         BCT   R7,RIBLOOP              AND LOOP UNTIL NO MORE RIBS\n         SPACE\n         TM    TKNSW,X'01'             WAS THERE A TOKEN?\n         BC    8,FINISH                NO, GO TO EOJ\n         B     START                   YES, GO REPROCESS\nFINISH   CLI   SWITCH,C'1'             WAS THERE AN ENQ ?\n         BE    EXIT                       YES...EXIT\n         B     NOTFOUND                         TELL USER\nEXIT     EQU   *\n         ESTAE 0\n         LA    R0,PARTWORK\n         A     R0,=F'00102400'      ADD IN SCANAREA WORKSIZE\n         O     R0,SUB241\n         L     R14,SAVRET\n         LR    R1,R10\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\nNOTFOUND LA    R1,NFNDMSG\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         SPACE 2\nCODE04   LA    R1,CODE04M              DSNAME NOT FOUND\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         B     EXIT\n         SPACE 2\nCODE08   OI    TKNSW,X'01'             TURN TOKEN SW ON\n         B     CODE00                  GO FINISH PROCESSING\n         SPACE 2\nCODE0C   LA    R1,CODE0CM              DSNAME NOT FOUND\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         B     EXIT\n         SPACE\nCODE10   LA    R1,CODE10M              DSNAME NOT FOUND\n         SR    R0,R0\n         IC    R0,XAU                  INSERT MCS ID\n         SVC   35                      ISSUE WTO\n         B     EXIT\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESQ03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         SPACE 3\n         DS    0F\nGQSCANP  GQSCAN MF=L                                            GLA-BFG\nGQSCANE  EQU   *                                                GLA-BFG\nSYSDSN   DC    CL8'SYSDSN  '           QNAME FOR GQSCAN\nANYENQ   DC    F'0'                    NO ENQ'S\nSUB241   DC    X'F1000000'\n* TKN    DC    F'0'                    MOVED FOR REENTRANCY     GLA-BFG\nNFNDMSG  DC    X'00300100'\n         DC    CL48'NO ENQ CONFLICTS EXIST'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nCODE04M  DC    X'00360100'\n         DC    CL50'INVALID DSNAME - RETRY COMMAND'\n         SPACE 3\nCODE08M  DC    X'00360100'             GQSCAN AREA TOO SMALL\n         DC    CL50'GQSCAN AREA TOO SMALL - RETRY COMMAND'\n         SPACE 3\nCODE0CM  DC    X'00360100'             GQSCAN SCREWED UP\n         DC    CL50'GQSCAN ERROR - RETRY COMMAND'\n         SPACE 3\nCODE10M  DC    X'00360100'             INVALID SYSNAME SPECIFIED\n         DC    CL72'INVALID SYSNAME - RETRY COMMAND'\n         SPACE\nWORK     DSECT\nSAVRET   DS    F\nXSASAVE  DS    F\nSWITCH   DS    C\nTKNSW    DS    X\nTKN      DC    F'0'                    MOVED FOR REENTRANCY     GLA-BFG\nNUMCHK   DS    CL6\n         SPACE 1\n         DS    0F\nMAJLINE  DS    0CL56\n         DS    CL12\nMAJOR    DS    CL44\n         SPACE 1\n         DS    0F\nMINLINE  DS    0CL56\n         DS    CL12\nMINOR    DS    CL44\n         SPACE 1\n         DS    0F\nJOBLINE  DS    0CL56\n         DS    CL4\nJOBNAME  DS    CL8\n         DS    CL4\nEXCLSHR  DS    CL4\n         DS    CL4\nWAIT     DS    CL9\n         DS    CL4\nSYSTEM   DS    CL4\n         DS    CL15\n         SPACE 3\nRIBLNGTH DS    H                       RIB LENGTH\nRIBELENG DS    H                       RIBE LENGTH\nSCANSAVE DS    18F                     18 WORD SAVEAREA REQ FOR GQSCAN\nESTAELST DS    0F,(ESTAEOVX)X     AXC-CBT\nGQSCANL  GQSCAN MF=L              NEEDED FOR REENTRANCY         GLA-BFG\nPARTWORK EQU   *-WORK             SIZE OF WORKAREA MINUS SCANAREA\nSCANAREA DS    102400X            IF SIZE CHGS, CHG 'ALL' 102400 LINES\nWORKSIZE EQU   *-WORK\nDSXSA    DSECT\nXSA      DS    0D\nXAP      DS    F                  PTR TO XCTL NAME\nXAD      DS    F                  DCB PTR\nXAX      DS    D                  XCTL NAME\nXAE      DS    0C                 ERROR CODE\nXAR      DS    F                  PTR TO PARM LIST (REG1)\nXAN      DS    0C                 VERB INDEX\nXAL      DS    F                  PTR TO LIST POSITION\nXAV      DS    D                  VERB\nXAS      DS    D                  TEMP SAVE-AREA\nXAU      DS    C                  UCM ENTRY INDICATOR\n         DS    C                  RESERVED\nXAJ      DS    H                  TJID ENTRY INDICATOR\n         DS    F                  RESERVED\n         DS   0F\n         PRINT NOGEN\n         ISGRIB\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSR03D\n         TITLE 'XA1SR03D -   #O  DISPLAY I/O PENDING/ALLOC QUEUE'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       XA1SR03D -       #O  DISPLAY I/O PENDING/ALLOC QUEUE      ***\n***                                                                 ***\n***       VERSION -        2.1.1                                    ***\n***                                                                 ***\n***       MVS LEVEL -      FROM MVS/XA  2.1.1                       ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/11/82  RLL-CHANGE ESTAE PARM LENGTH   ***\n***                                  RLL-CHECK FOR UNIT RECORD UCB  ***\n***                                  RLL-CHECK ALLOC BITS           ***\n***                        10/19/82  INTEL UPDATE THE I/O DRIVER    ***\n***                                  TABLE                          ***\n***                        06/04/84  DED-CNB MVS/XA 2.1.1           ***\n***                                  IF YOU HAVE A 3880-11          ***\n***                                  DON'T BE SUPRISED IF IT        ***\n***                                  SHOWS UP MORE THAN ONCE, IT    ***\n***                                  HAS MULTIPLE EXPOSURES.        ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESR03D CSECT\nIEESR03D AMODE 24\nIEESR03D RMODE 24\n         SPLEVEL SET=2\n         LR    R12,R15            SET ADDRESSABILITY\n         USING IEESR03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         USING XSA,R2\n         ST    R14,SAVE           PUT RETURN ADDRESS IN UNUSED SLOT\n         ST    R2,XSASAVE         SAVE XSA ADDR\n         MVI   DEVCLASS,X'00'      DO ALL DEVICE CLASSES      *CNB/XA*\n         XC    WORKAREA,WORKAREA   CLEAR WORK AREA            *CNB/XA*\n         LA    R1,WORKAREA         GET ADDRESS OF WORKAREA    *CNB/XA*\n         ST    R1,PARMWA           STORE ADDRESS OF WORK AREA *CNB/XA*\n         LA    R1,DEVCLASS         START ADDRESS IN PARMLIST  *CNB/XA*\n         ST    R1,PARMDEVT         START ADDRESS IN PARMLIST  *CNB/XA*\n         LA    R1,ADDRUCB          ADDR TO STORE UCB ADDRESS  *CNB/XA*\n         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST  *CNB/XA*\n         MVI   PARMUCB,X'80'       INDICATE END OF PARM LIST  *CNB/XA*\n         MVI   FOUND,X'00'\n         MVI   IOLINE+4,C' '\n         MVC   IOLINE+5(47),IOLINE+4\n         MVC   IOLINE(4),=X'00350100'\n         MVI   QUELINE+4,C' '\n         MVC   QUELINE+5(50),QUELINE+4\n         MVC   QUELINE(4),=X'00350100'\n         MVI   TYPE,C' '\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         SR    R3,R3\n         L     R3,XAL\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY SUBPARMS\n         BZ    UCBFIND             NO, I/O PENDING ACTIVE AND QUEUED\n         MVI   TYPE,C'A'\n         CLI   0(R3),C'A'          ACTIVE ONLY\n         BE    UCBFIND             YES\n         MVI   TYPE,C'Q'\n         CLI   0(R3),C'Q'          QUEUED ONLY\n         BE    PROCESS2            YES\n         CLI   0(R3),C'X'          ALLOCATION QUEUE REQUEST\n         BE    ALLOC               YES\n         MVI   TYPE,C' '\nUCBSCAN  CLI   TYPE,C' '          ALL I/O PENDING\n         BE    UCBFIND            YES\n         CLI   TYPE,C'A'          ACTIVE I/O PENDING ONLY\n         BNE   PROCESS1           NO, EXIT\n         SPACE 1\nUCBFIND  L     R9,CVTPTR\n         USING CVTMAP,R9\nUCBNEXT  SR    R11,R11                                       *CNB/XA*\n         SR    R0,R0                                         *CNB/XA*\n         L     R11,AMODE24A                                  *CNB/XA*\n         BSM   0,R11                                         *CNB/XA*\nAMODE24A DC    A(CONT24A+X'00000000')                        *CNB/XA*\n         DS    0H                                            *CNB/XA*\nCONT24A  LA    R1,PARMLIST        UCBSCAN PARMLIST ADDR      *CNB/XA*\n         L     R15,CVTUCBSC       GET SCAN SERVICE ROUTINE   *CNB/XA*\n         BALR  R14,R15            GO TO SCAN SCERVICE RTN    *CNB/XA*\n         LTR   R15,R15            END OF UCBS?               *CNB/XA*\n         BNZ   UCBEND             YES, END                   *CNB/XA*\n         SR    R11,R11                                       *CNB/XA*\n         L     R11,ADDRUCB        ADDR TO UCB DSECT          *CNB/XA*\n         USING UCBOB,R11\n         CLC   UCBNAME(3),SAVEOLD SAME UCB?                  *CNB/XA*\n         BE    UCBNEXT                                       *CNB/XA*\n         MVC   SAVEOLD(3),UCBNAME                            *CNB/XA*\n         SPACE\n         CLI   UCBTBYT3,UCB3DISP  DISPLAY?\n         BE    UCBNEXT\n         CLI   UCBTBYT3,UCB3COMM  COMM\n         BE    UCBNEXT\n         CLI   UCBTBYT3,UCB3UREC  UNIT RECORD\n         BE    UCBNEXT\n         TM    UCBFLA,UCBSTRT+UCBHALT+UCBCLEAR ACT CHAN PROG *CNB/XA*\n         BZ    UCBNEXT            NO, NEXT UCB               *CNB/XA*\n         B     PROCESS                                       *CNB/XA*\n         SPACE\nUCBRET   B     UCBNEXT                                       *CNB/XA*\nUCBEND   B     PROCESS1            YES, EXIT                 *CNB/XA*\nPROCESS  SR    R3,R3                                         *CNB/XA*\n         SR    R4,R4                                         *CNB/XA*\n         SR    R0,R0                                         *CNB/XA*\n         L     R4,AMODE31A                                   *CNB/XA*\n         BSM   0,R4                                          *CNB/XA*\nAMODE31A DC    A(CONT31A+X'80000000')                        *CNB/XA*\n         DS    0H                                            *CNB/XA*\nCONT31A  LR    R3,R11             UCB ADDR                   *CNB/XA*\n         SR    R4,R4                                         *CNB/XA*\n         LR    R4,R11             UCB ADDR                   *CNB/XA*\n         S     R4,=F'4'           DECR ADDR -4\n         L     R4,0(0,R4)         IOQ ADDR\n         LA    R4,0(0,R4)\n         LTR   R4,R4              ANY IOQ\n         BZ    UCBNEXT            NO, NEXT UCB\n         SR    R5,R5                                         *CNB/XA*\n         L     R5,8(0,R4)         IOSB ADDR\n         LA    R5,0(0,R5)\n         LTR   R5,R5              EXIST\n         BZ    UCBNEXT            NO, NEXT UCB\n         BAL   R7,CHKASID\n         BAL   R7,FORMAT\n         B     UCBNEXT\nPROCESS1 CLI   TYPE,C' '          ALL I/O PENDING\n         BE    EXIT               YES\n         CLI   TYPE,C'Q'          QUEUED I/O PENDING ONLY\n         BNE   NOTFOUND           NO, EXIT\n         SPACE 1\nPROCESS2 MVC   IOLINE(52),QMSG1   * CNB/XA * NO LCH? UNDER XA\n         LA    R1,IOLINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\n         DROP  R9,11\nALLOC    SR    R3,R3                                          *CNB/XA*\n         SR    R0,R0                                          *CNB/XA*\n         L     R3,AMODE31                                     *CNB/XA*\n         BSM   0,R3                                           *CNB/XA*\nAMODE31  DC    A(CONT31+X'80000000')                          *CNB/XA*\n         DS    0H                                             *CNB/XA*\nCONT31   SR    R0,R0                                          *CNB/XA*\n         SR    R3,R3                                          *CNB/XA*\n         L     R3,16              CVT\n         L     R3,548(0,R3)       AQTOP\n         UNPK  MASK1(13),32(7,R3)\n         NC    MASK1(12),=12X'0F'\n         TR    MASK1(12),=C'0123456789ABCDEF'\n         MVI   MASK1+12,C' '\n*        UNPK  MASK2(13),39(7,R3)                     ****(RLL)****\n         UNPK  MASK2(13),38(7,R3)                     ****(RLL)****\n         NC    MASK2(12),=12X'0F'\n         TR    MASK2(12),=C'0123456789ABCDEF'\n         MVI   MASK2+12,C' '\n         MVC   QJOB(8),=CL8'*SYSTEM*'\n         MVC   QSTAT(7),=CL7'*AQTOP*'\n         SR    R1,R1                                         *CNB/XA*\n         LA    R1,QUELINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         L     R4,0(0,R3)         1ST QUEUE ELEMENT\n         SPACE 1\nALLOC1   CR    R3,R4              END OF CHAIN\n         BE    NOALLOC            YES\n*        L     R1,24(0,R4)        MASK ADDR           ****(RLL)****\n         SR    R1,R1                                         *CNB/XA*\n         LA    R1,29(0,R4)        MASK ADDR           ****(RLL)****\n         UNPK  MASK1(13),0(7,R1)\n         NC    MASK1(12),=12X'0F'\n         TR    MASK1(12),=C'0123456789ABCDEF'\n         MVI   MASK1+12,C' '\n*        UNPK  MASK2(13),7(7,R1)                      ****(RLL)****\n         UNPK  MASK2(13),6(7,R1)                      ****(RLL)****\n         NC    MASK2(12),=12X'0F'\n         TR    MASK2(12),=C'0123456789ABCDEF'\n         MVI   MASK2+12,C' '\n         MVC   QSTAT(7),=CL7'WAITING'\n         CLI   28(R4),C'W'        OPERATOR WAIT\n         BE    ALLOC2             YES\n         MVC   QSTAT(7),=CL7'PENDING'\n         CLI   28(R4),C'P'        OPER REPLY PENDING\n         BE    ALLOC2             YES\n         MVC   QSTAT(7),=CL7'AQUEUE'\n         CLI   28(R4),C'A'        A QUEUE WAIT\n         BE    ALLOC2             YES\n         MVC   QSTAT(7),=CL7'BQUEUE'\n         CLI   28(R4),C'B'        B QUEUE WAIT\n         BE    ALLOC2             YES\n         MVC   QSTAT(7),=CL7'OWNING'\n         CLI   28(R4),C'E'        OWNING\n         BE    ALLOC2             YES\n         MVC   QSTAT(7),=CL7'UNK-   '\n         MVC   QSTAT+6(1),28(R4)\n         SPACE 1\nALLOC2   SR    R5,R5                                         *CNB/XA*\n         LA    R5,16(0,R4)        ASID -6 ADDR\n         BAL   R7,CHKASID         FIND JOBNAME\n         MVC   QJOB(8),JOBNAME\n         SR    R1,R1                                         *CNB/XA*\n         LA    R1,QUELINE\n         SR    R0,R0                                         *CNB/XA*\n         IC    R0,XAU\n         SVC   35\n         MVI   FOUND,X'FF'        ANY OUTPUT\n         L     R4,0(0,R4)         NEXT QUEUE ELEMENT\n         B     ALLOC1\n         SPACE 3\nNOALLOC  SR    R5,R5\n         SR    R0,R0\n         L     R5,AMODE24                                    *CNB/XA*\n         BSM   0,R5                                          *CNB/XA*\nAMODE24  DC    A(CONT24+X'00000000')                         *CNB/XA*\n         DS    0H                                            *CNB/XA*\nCONT24   CLI   FOUND,X'00'        ANY OUTPUT\n         BNE   EXIT\n         SR    R1,R1                                         *CNB/XA*\n         LA    R1,NALOCMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\nFORMAT   MVC   UNIT(3),13(R3)     UNIT NAME\n         MVC   VOLSER(6),=CL6' '  NO VOLSER\n         TM    18(R3),X'A0'       DASD OR TAPE\n         BZ    *+10               NO\n         MVC   VOLSER(6),28(R3)   VOLSER\n         ST    R4,TEMP\n         UNPK  DOUBLE(7),TEMP+1(4)\n         NC    DOUBLE(6),=8X'0F'\n         TR    DOUBLE(6),=C'0123456789ABCDEF'\n         MVC   IOQADDR(6),DOUBLE\n         SR    R1,R1                                         *CNB/XA*\n         IC    R1,4(0,R5)         DRIVER ID\n         SLL   R1,3\n         LA    R1,DRIVRTAB(R1)    DRIVER NAME\n         MVC   DRIVER(8),0(R1)\n         MVC   STATUS(6),=CL6'ACTIVE'\n         MVC   BL1(2),=2C' '                                 *CNB/XA*\n         MVC   BL2(2),=2C' '                                 *CNB/XA*\n         MVC   BL3(2),=2C' '                                 *CNB/XA*\n         MVC   BL4(2),=2C' '                                 *CNB/XA*\n         MVC   BL5(2),=2C' '                                 *CNB/XA*\n         MVC   BL6(20),=20C' '                               *CNB/XA*\n         MVC   IOLINE+0(4),=X'00350100'                      *CNB/XA*\n         SR    R1,R1                                         *CNB/XA*\n         LA    R1,IOLINE\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVI   FOUND,X'FF'\n         BR    R7\nCHKASID  SR    R8,R8                                         *CNB/XA*\n         ICM   R8,3,6(R5)        ASID\n         CH    R8,=H'1'          MASTER\n         BNH   CHKASID6           YES\n         SLL   R8,2              X 4\n         SR    R15,R15                                       *CNB/XA*\n         L     R15,16             CVT\n         L     R15,556(0,R15)     ASVT\n         L     R15,524(R8,R15)   ASCB\n         L     R8,56(0,R15)      CSCB\n         CLI   28(R8),X'03'      INIT CSCB\n         BE    CHKASID2           GET JOBNAME\n         SPACE 1\nCHKASID1 LA    R8,0(0,R8)\n         LTR   R8,R8            CSCB EXIST\n         BZ    CHKASID5           NO, PRINT ASID\n         MVC   JOBNAME(8),8(R8)\n         BR    R7\n         SPACE 1\nCHKASID2 LR    R15,R8            CSCB\n         SR    R1,R1                                         *CNB/XA*\n         ICM   R1,3,30(R15)       ASID\n         SPACE 1\nCHKASID3 L     R8,0(0,R8)       NEXT CSCB\n         LTR   R8,R8            END OF CSCBS\n         BNZ   CHKASID4           NO\n         LR    R8,R15            ORIG CSCB\n         B     CHKASID1\n         SPACE 1\nCHKASID4 CR    R8,R15            SAME CSCB\n         BE    CHKASID1           YES\n         CH    R1,30(0,R8)       ASID MATCH\n         BNE   CHKASID3           NO, CHECK NEXT CSCB\n         B     CHKASID1\n         SPACE 1\nCHKASID5 MVC   JOBNAME(4),=CL4'AS='\n         UNPK  JOBNAME+4(5),6(3,R5)\n         NC    JOBNAME+4(4),=4X'0F'\n         TR    JOBNAME+4(4),=X'0123456789ABCDEF'\n         MVI   JOBNAME+5,C' '\n         BR    R7\n         SPACE 1\nCHKASID6 MVC   JOBNAME(8),=CL8'*MASTER*'\n         BR    R7\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         SR    R5,R5\n         SR    R0,R0                                         *CNB/XA*\n         L     R5,AMODE24X                                   *CNB/XA*\n         BSM   0,R5                                          *CNB/XA*\nAMODE24X DC    A(CONT24X+X'00000000')                        *CNB/XA*\n         DS    0H                                            *CNB/XA*\nCONT24X  SR    R15,R15\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESR03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\nMSGRTN1  SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\nNOTFOUND CLI   FOUND,X'00'        ANY OUTPUT\n         BNE   EXIT\n         SR    R1,R1                                         *CNB/XA*\n         LA    R1,NFNDMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 3\nEXIT     EQU   *\n         ESTAE 0                                      ****(RLL)****\n         SR    R0,R0                                         *CNB/XA*\n         L     R0,SIZE\n         SR    R14,R14                                       *CNB/XA*\n         L     R14,SAVE\n         SR    R1,R1                                         *CNB/XA*\n         LR    R1,R13\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORK)\nNFNDMSG  DC    X'00350100'\n         DC    CL50'NO SUBCHANNEL I/O REQUESTS OUTSTANDING            '\nNALOCMSG DC    X'00350100'\n         DC    CL50'NO ALLOCATION REQUESTS OUTSTANDING                '\nQMSG1    DC    X'00350100'\n         DC    CL50'QUEUED I/O NOT SUPPORTED IN XA MODE               '\nSTAEMSG  DC    X'00350100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 3\nDRIVRTAB DC    CL8'IOSRESV '\n         DC    CL8'IOSMISC '\n         DC    CL8'EXCP    '\n         DC    CL8'VSAM    '\n         DC    CL8'VTAM    '\n         DC    CL8'TCAM    '\n         DC    CL8'OLTEP   '\n         DC    CL8'PCIFETCH'\n         DC    CL8'JES3    '\n         DC    CL8'MSC/MSS '\n         DC    CL8'PURGE   '\n         DC    CL8'VPSS    '\n         DC    CL8'CRYPTO  '\n         DC    CL8'ASM     '\n         DC    CL8'SUSP/RES'\n         DC    CL8'DYN/PATH'                                 *CNB/XA*\n         DC    CL8'DAVV    '                                 *CNB/XA*\n         DC    CL8'SVC33   '                                 *CNB/XA*\n         DC    CL8'CLR RECV'                                 *CNB/XA*\n         DC    CL8'SVC16PRG'                                 *CNB/XA*\n         DC    CL8'ALT PATH'                                 *CNB/XA*\n         DC    CL8'MIH     '                                 *CNB/XA*\nWORK     DSECT\nSAVE     DS    F\nXSASAVE  DS    F\nTEMP     DS    F\n         DS    0D\nDOUBLE   DS    2F\n         SPACE 3\n         DS    0F\nIOLINE   DS    0CL50\n         DS    F\nUNIT     DS    CL3\nBL1      DS    CL2                                           *CNB/XA*\nVOLSER   DS    CL6\nBL2      DS    CL2                                           *CNB/XA*\nJOBNAME  DS    CL8\nBL3      DS    CL2                                           *CNB/XA*\nIOQADDR  DS    CL6\nBL4      DS    CL2                                           *CNB/XA*\nDRIVER   DS    CL8\nBL5      DS    CL2                                           *CNB/XA*\nSTATUS   DS    CL6\nBL6      DS    CL20                                          *CNB/XA*\n         SPACE 3\n         DS    0F\nQUELINE  DS    0CL50\n         DS    F\nQJOB     DS    CL8\n         DS    CL2\nQSTAT    DS    CL7\n         DS    CL2\nMASK1    DS    CL12\n         DS    CL2\nMASK2    DS    CL12\n         DS    CL20\n         SPACE 1\nSAVEOLD  DS    CL3                                           *CNB/XA*\nFOUND    DS    C\nTYPE     DS    C\nENDUCBX  DS    C                                             *CNB/XA*\n         DS    0D\nPARMLIST DS    3F                                            *CNB/XA*\n         ORG   PARMLIST\nPARMWA   DS    F                                             *CNB/XA*\nPARMDEVT DS    F                                             *CNB/XA*\nPARMUCB  DS    F                                             *CNB/XA*\n         ORG\nDEVCLASS DS    CL1                                           *CNB/XA*\nADDRUCB  DS    F                                             *CNB/XA*\n         DS    0D\nWORKAREA DS    CL100                                         *CNB/XA*\n         DS    0F\nESTAELST DS    0F,(ESTAEOVX)X                         ****(RLL)****\nWORKEND  DS    0D\nDSXSA    DSECT\nXSA      DS    0D\nXAP      DS    F                  PTR TO XCTL NAME\nXAD      DS    F                  DCB PTR\nXAX      DS    D                  XCTL NAME\nXAE      DS    0C                 ERROR CODE\nXAR      DS    F                  PTR TO PARM LIST (REG1)\nXAN      DS    0C                 VERB INDEX\nXAL      DS    F                  PTR TO LIST POSITION\nXAV      DS    D                  VERB\nXAS      DS    D                  TEMP SAVE-AREA\nXAU      DS    C                  UCM ENTRY INDICATOR\n         DS    C                  RESERVED\nXAJ      DS    H                  TJID ENTRY INDICATOR\n         DS    F                  RESERVED\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT NOGEN\n         IHASDWA\n         CVT   DSECT=YES                                     *CNB/XA*\n         IEFUCBOB PREFIX=YES                                 *CNB/XA*\n         END\n./       ADD   NAME=CSCSS03D\n         TITLE 'IEESS03D -   #E  EXECUTE MVS COMMAND'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESS03D -       #E  EXECUTE MVS COMMAND                  ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   TO MVS/SP1.3              ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESS03D CSECT\n         LR    R12,R15\n         USING IEESS03D,R12\n         L     R0,SIZE\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         XC    CMDLIST(4),CMDLIST\n         MVI   CMDLIST+4,C' '\n         MVC   CMDLIST+82(4),=CL4' '\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         L     R3,XAL              LOAD SUB-PARM ADDR\n         LTR   R3,R3               SUB-PARM PRESENT\n         BZ    CMDERR              NO, ERROR\n         SPACE 1\n         CLC   0(6,R3),=CL6'V PATH'  VARY PATH COMMAND\n         BE    VARY                YES\n         B     COMMAND\n         SPACE 1\nCMDERR   LA    R1,ERRMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         SPACE 3\nEXIT     EQU   *\n         ESTAE 0\n         L     R0,SIZE             LOAD FREEMAIN SIZE\n         LR    R1,R13              LOAD FREEMAIN ADDR\n         L     R14,SAVRET          LOAD RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14                 EXIT\nVARY     MVC   VPTHLIM(1),13(R3)   SET UPPER LIMIT\n         CLI   9(R3),C'9'\n         BH    CMDERR\n         CLI   9(R3),C'0'\n         BNL   *+20\n         CLI   9(R3),C'A'\n         BL    CMDERR\n         CLI   9(R3),C'F'\n         BH    CMDERR\n         CLI   13(R3),C'9'\n         BH    CMDERR\n         CLI   13(R3),C'0'\n         BNL   *+20\n         CLI   13(R3),C'A'\n         BL    CMDERR\n         CLI   13(R3),C'F'\n         BH    CMDERR\n         CLI   6(R3),C'('\n         BNE   CMDERR\n         CLI   16(R3),C')'\n         BNE   CMDERR\n         CLI   10(R3),C'-'\n         BNE   CMDERR\n         CLI   14(R3),C','\n         BNE   CMDERR\n         MVC   CMDLIST+5(10),0(R3)\n         MVC   CMDLIST+15(63),14(R3)\n         MVC   CMDLIST+76(10),=CL10' '\n         LA    R9,16               MAX POSSIBLE COMMANDS\n         LA    R14,CMDLIST+5\n         LA    R15,CMDLIST+85\nVARY1    CLI   0(R15),C' '         END OF COMMAND\n         BNE   VARY2               YES\n         CR    R14,R15             BEGIN OF COMMAND\n         BE    VARY2               YES\n         BCT   R15,VARY1\n         SPACE 1\nVARY2    SR    R15,R14\n         LA    R15,11(0,R15)\n         SRL   R15,2\n         SLL   R15,2\n         STH   R15,CMDLIST\n         SPACE 1\nVARY3    MVC   ISSMSG(52),ISSMSGT\n         MVC   ISSMSG+18(34),CMDLIST+5\n         LA    R1,CMDLIST          YES\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   34\n         LA    R1,ISSMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         CLI   CMDLIST+14,C'F'           LIMIT REACHED\n         BE    EXIT                      YES\n         CLC   CMDLIST+14(1),VPTHLIM     LIMIT REACHED\n         BE    EXIT                      YES\n         SR    R1,R1\n         IC    R1,CMDLIST+14\n         LA    R1,1(0,R1)\n         STC   R1,CMDLIST+14             SAVE NEW DEVICE\n         C     R1,=X'000000FA'           WAS PREVIOUS DEV XX9\n         BE    VARY4                     YES\n         BCT   R9,VARY3\n         B     EXIT                      NEXT VARY\n         SPACE 1\nVARY4    MVI   CMDLIST+14,X'C1'          FORCE SWITCH FROM 9 TO A\n         B     VARY3\nCOMMAND  MVC   CMDLIST+5(77),0(R3) COMMAND\n         LA    R14,CMDLIST+5\n         LA    R15,CMDLIST+85\n         SPACE 1\nCOMMAND1 CLI   0(R15),C' '         END OF COMMAND\n         BNE   COMMAND2            YES\n         CR    R14,R15             BEGIN OF COMMAND\n         BE    COMMAND2            YES\n         BCT   R15,COMMAND1\n         SPACE 1\nCOMMAND2 SR    R15,R14\n         LA    R15,11(0,R15)\n         SRL   R15,2\n         SLL   R15,2\n         STH   R15,CMDLIST\n         MVC   ISSMSG(52),ISSMSGT\n         MVC   ISSMSG+18(34),0(R3)   COMMAND\n         LA    R1,CMDLIST          YES\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   34\n         LA    R1,ISSMSG\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         B     EXIT\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEESS03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         B     EXIT\n         LTORG\n         SPACE 5\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nERRMSG   DC    X'00300100'\n         DC    CL44'EXECUTE COMMAND PARAMETER ERROR'\n         SPACE 3\nISSMSGT  DC    X'00340100'\n         DC    CL48'CMD ISSUED -  X'\n         SPACE 3\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    F\nXSASAVE  DS    F\nVPTHLIM  DS    F\nISSMSG   DS    CL52\n         SPACE 3\n         DS    0F\nCMDLIST  DS    CL86\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X     AXC-CBT\nWORKEND  DS    0D\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCSZ03D\n         PRINT NOGEN                                               @TEC\n         TITLE 'IEESZ03D -   #Z  DISPLAY ACTIVE REPLACEMENT'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEESZ03D -       #Z  DISPLAY ACTIVE REPLACEMENT           ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        07/19/81   AXC-CBT HANDLE ESTAE OKAY     ***\n***                        08/10/81   JGS - #J CHANGES            NERDC\n***                        08/10/81   JCC-BCB TEST FOR END OF ASCB JCC*\n***                        01/26/83   AXC-CBT CHANGE ESTAE PARM LEN ***\n***                        09/17/91   JCL-TEC ADDR FOR ESA/370      ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEESZ03D CSECT\n         LR    R12,R15\n         USING IEESZ03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVI   TSOSW,C' '\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY PARM\n         BZ    PARM2               NO\n         MVC   TSOSW(2),0(R3)      SAVE PARM\n         CLI   TSOSW,C'T'          TSO DISPLAY\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C' '          TEST FOR A BLANK                WJB\n         BE    PARM1               YES CONTINUE                    WJB\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),TSOSW\n         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY\n         BNE   PARM1\n         PACK  DOUBLE(8),TSOSW(2)\n         CVB   R1,DOUBLE\n         STC   R1,DOMAIN           SAVE DOMAIN\n         MVI   TSOSW,C'D'\n         B     PARM2\nPARM1    MVI   TSOSW,C' '\nPARM2    MVC   WTOLIST(4),=X'00410100'                            NERDC\n         MVI   SCANRET,C' '        SET FOUND\n         SR    R8,R8               CLEAR ASID\n         MVI   SCANTYPE,C'I'       SET IN QUEUE SCAN\n         LA    R1,HDRI             IN QUEUE HDR\n         BAL   R11,MSGRTN1\nJOBOUT   MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(L'JOBMSG-1),JOBMSG                        NERDC\n         LR    R5,R8               LOAD ASID\n         LTR   R5,R5               ZERO ASID\n         BZ    *+6                 YES, BYPASS ADJUST\n         BCTR  R5,0                ADJUST ASID\n         SLL   R5,2                MULTIPLY BY 4\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         L     R6,516(0,R4)        MAX # OF ASIDS                 JCC\n         MH    R6,=H'4'            MULT BY LENGTH                 JCC\n         LA    R6,528(R4,R6)       FIND END OF ASID LIST          JCC\n         ST    R6,ASVTEND          STORE THAT ADDR                JCC\n         LA    R4,524(R5,R4)       ASCB SLOT ADDR\n         B     JOBOUT4\nJOBOUT1  L     R5,0(0,R4)          ASCB ADDR\n         L     R6,56(0,R5)         CSCB ADDR\n         L     R7,144(0,R5)        LOAD OUCB ADDR\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BNE   JOBOUT2             NO\n         CLI   41(R7),0            DOES IT HAVE A SWAP REASON CODE WJB\n         BNE   JOBOUT6             YES, CHECK SRC                  WJB\n         CLI   38(R5),X'7F'        MVS SE                          WJB\n         BE    JOBOUT4                                             WJB\n         B     JOBOUT3             CONTINUE\nJOBOUT2  CLI   38(R5),X'7F'        MVS/SE                          WJB\n         BE    JOBOUT3        YES GO PROCESS THIS AS ON OUTQUEUE   WJB\n         CLI   41(R7),0            THIS HAVE A SWAP REASON CODE?   WJB\n         BE    JOBOUT4             NO, IT'S IN THE IN QUEUE        WJB\n         CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT3             NO, OUT QUEUE\n         TM    21(R7),X'01'        MSO DETECTED WAIT BIT ON\n         BZ    JOBOUT4             NO, SRC IS NO GOOD\nJOBOUT3  BAL   R11,ASCBFORM        GO FORMAT ASCB INFO\n         L     R6,144(0,R5)        OUCB ADDR\n         L     R3,60(0,R5)         TSB ADDR\n         L     R5,56(0,R5)         CSCB ADDR\n         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO\n         BAL   R11,OUCBFORM        GO FORMAT OUCB INFO\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\nJOBOUT4  LA    R4,4(0,R4)          INCR INTO ASVT\n         C     R4,ASVTEND          END OF ASVT                    JCC\n         BNL   JOBOUT5             YES, RETURN                    JCC\n         TM    0(R4),X'80'         AVAILABLE ENTRY\n         BO    JOBOUT4             YES, CHECK NEXT\n         B     JOBOUT1             GO USE IT\nJOBOUT5  CLI   SCANTYPE,C'O'       OUT QUEUE SCAN\n         BE    RETURN              YES, EXIT\n         MVI   SCANRET,C' '        INIT OUTPUT SWITCH\n         MVI   SCANTYPE,C'O'       SET OUT QUEUE SCAN NEXT\n         LA    R1,HDRO             OUT QUEUE HDR\n         BAL   R11,MSGRTN1\n         B     JOBOUT              NEXT PASS\nJOBOUT6  CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT4             NO, OUT QUEUE\n         TM    21(R7),X'01'        MSO DETECTED WAIT BIT ON\n         BZ    JOBOUT3             NO, SRC IS NO GOOD\n         B     JOBOUT4             OUT QUEUE\nASCBFORM UNPK  DOUBLE(5),36(3,R5)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASID(4),DOUBLE      SET ASID IN MSG\n         UNPK  DPRTY(3),43(2,R5)   DPRTY TO MSG                   NERDC\n         NC    DPRTY(2),=4X'0F'                                   NERDC\n         TR    DPRTY(2),=C'0123456789ABCDEF'                      NERDC\n         MVI   DPRTY+2,C' '                                       NERDC\n         LH    R1,38(0,R5)         DISP POSITION\n         CVD   R1,DOUBLE\n         UNPK  SRC(2),DOUBLE+6(2)\n         OI    SRC+1,X'F0'\n         L     R15,64(R5)          CPU TIME                       NERDC\n         A     R15,200(R5)           + SRB TIME                   NERDC\n         LTR   R15,R15             TEST FOR ZERO                  NERDC\n         BP    *+6                 SKIP IF PLUS                   NERDC\n         SR    R15,R15             ELSE SET TO ZERO               NERDC\n         SR    R14,R14                                            NERDC\n         SLDL  R14,20              CONVERT TO SECONDS             NERDC\n         D     R14,=F'1000000'     SEC = TOD * 1.048576           NERDC\n         CVD   R15,DOUBLE          TO DECIMAL                     NERDC\n         MVC   CPUTIME-1(6),=X'402020202120'                      NERDC\n         ED    CPUTIME-1(6),DOUBLE+5  TO PRINT                    NERDC\n         L     R15,80(R5)          STEP TIME LIMIT                NERDC\n         S     R15,64(R5)           - TIME USED = TIME REMAINING  NERDC\n         LTR   R15,R15             TEST FOR ZERO                  NERDC\n         BP    *+6                 SKIP IF OK                     NERDC\n         SR    R15,R15             ELSE SET TO ZERO               NERDC\n         SR    R14,R14                                            NERDC\n         SLDA  R14,20              CONVERT TO                     NERDC\n         D     R14,=F'1000000'       SECONDS                      NERDC\n         CVD   R15,DOUBLE          TO PRINTABLE                   NERDC\n         MVC   CPUREM-1(6),=X'402020202120'                       NERDC\n         ED    CPUREM-1(6),DOUBLE+5  TO PRINT LINE                NERDC\n         MVC   SC(2),=C'  '        CLEAR FOR LATER TEST           NERDC\n         TM    52(R5),X'10'        V=R\n         BCR   8,R11               NO\n         MVC   SC(2),=C' R'        SET IN SWAP COUNT FIELD        NERDC\n         BR    R11\nCSCBFORM CLI   TSOSW,C'T'          TSO USER DISPLAY\n         BNE   CSCBFRM0            NO\n         CLI   28(R5),X'01'        TSO USER\n         BNE   JOBOUT4             NO, BYPASS\n         B     CSCBFRM6\nCSCBFRM0 CLI   28(R5),X'01'        TSO USER\n         BE    JOBOUT4             YES, DONT PROCESS\n         CLI   28(R5),X'03'        INIT\n         BNE   CSCBFRM3            NO, GO HANDLE\n         LA    R9,0(0,R5)          SAVE CSCB ADDR\n         SR    R10,R10             INSERT\n         IC    R10,30(0,R5)\n         SLL   R10,8               ASID\n         IC    R10,31(0,R5)\nCSCBFRM1 L     R5,0(0,R5)          NEXT CSCB\n         LA    R5,0(0,R5)          CLEAR HIGH ORDER\n         LTR   R5,R5               END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R5,R9               LOAD CSCB ADDR\n         B     JOBOUT4             NO GOOD\n         CR    R5,R9               SAME CSCB\n         BE    JOBOUT4             YES, NO GOOD\n         CH    R10,30(0,R5)        SAME ASID\n         BNE   CSCBFRM1            NO, CHECK NEXT\nCSCBFRM2 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),64(R5)\n         MVC   PROCNAME(8),32(R5)\n         B     CSCBFRM4\nCSCBFRM3 MVC   JOBNAME(8),16(R5)\n         MVC   STEPNAME(8),8(R5)\n         MVC   PROCNAME(8),32(R5)\nCSCBFRM4 CLI   TSOSW,C'D'          DOMAIN DISPLAY\n         BNE   CSCBFRM5            NO\n         CLC   DOMAIN(1),40(R6)    DOMAIN MATCH    MVS/SE         WJB\n         BNE   JOBOUT4\nCSCBFRM5 CLC   ASID(4),=C'0001'\n         BCR   7,R11\n         MVC   JOBNAME(26),=CL26'MASTER'\n         BR    R11\nCSCBFRM6 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),16(R5)\n         CLC   TSTSVC35(2),=X'0A23'  IS THIS TSO EXECUTION OF #J\n         BNE   CSCBFRM5              YES, BYPASS 0C4\n*   IF YOU HAVE VTAM NO - OP NEXT THREE INSTRUCTIONS               WJB\n*        UNPK  PROCNAME(5),82(3,R3)  LINE NUMBER\n*        NC    PROCNAME(4),=8X'0F'\n*        TR    PROCNAME(4),=C'0123456789ABCDEF'\n         MVC   PROCNAME+4(4),=CL4' '\n         B     CSCBFRM5\nOUCBFORM DS    0H                                                  WJB\n         CLI   41(R6),X'00'        JOB ON IN QUEUE                 WJB\n         BE    OUCBFRM0            YES, NO SWAP REASON\n         UNPK  SRC(3),41(2,R6)     SWAP REASON             MVS/SE WJB\n         NC    SRC(2),=8X'0F'\n         TR    SRC(2),=C'0123456789ABCDEF'\n         MVI   SRC+2,C' '\n         CLI   38(R5),X'7F'        MVS SE                          WJB\n         BNE   OUCBLOG1                                            WJB\n         MVC   SRC(2),=CL3'LG'     FAKE UP LOGICAL SWAP CODE       WJB\n         B     OUCBFRM0            AND CONTINUE                    WJB\nOUCBLOG1 DS    0H                                                  WJB\nOUCBFRM0 MVC   FLAGS(3),=CL3'NSW'\n         TM    17(R6),X'80'        NON-SWAPPABLE\n         BO    OUCBFRM1\n         MVC   FLAGS(3),=CL3'IN'\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BE    OUCBFRM1\n         MVC   FLAGS(3),=CL3'OUT'\n         TM    16(R6),X'E0'        GOING IN/OUT\n         BZ    OUCBFRM1            NO, JUST OUT\n         MVC   FLAGS(3),=CL3'GOO'\n         TM    16(R6),X'80'        GOING OUT\n         BO    OUCBFRM1\n         MVC   FLAGS(3),=CL3'GOB'\n         TM    16(R6),X'20'        TRANSITIONING\n         BO    OUCBFRM1\n         MVC   FLAGS(3),=CL3'GOI'\nOUCBFRM1 MVC   FLAGS+3(2),=CL2'A'\n         TM    18(R6),X'04'        AUX STORAGE SHORTAGE\n         BC    1,OUCBFRM2                                         NERDC\n         MVC   FLAGS+3(2),=CL2'S'\n         TM    18(R6),X'01'        REAL STORAGE SHORTAGE\n         BC    1,OUCBFRM2                                         NERDC\n         MVC   FLAGS+3(2),=CL2'LW'\n         TM    21(R6),X'80'        LONG WAIT\n         BC    1,OUCBFRM2                                         NERDC\n         MVC   FLAGS+3(2),=CL2'MW'\n         TM    21(R6),X'01'        DETECTED WAIT\n         BC    1,OUCBFRM2                                         NERDC\n         MVC   FLAGS+3(2),=CL2'CP'\n         TM    19(R6),X'10'        CPU USER\n         BC    1,OUCBFRM2                                         NERDC\n         MVC   FLAGS+3(2),=CL2' '\nOUCBFRM2 LH    R1,184(R6)          OUCBNPG (PERFORM GRP NO)       NERDC\n         CVD   R1,DOUBLE                                          NERDC\n         UNPK  PG(2),DOUBLE+6(2)                                  NERDC\n         OI    PG+1,X'F0'                                         NERDC\n         CLI   SC+1,C'R'           V=R SET?                       NERDC\n         BER   R11                 YES, SKIP SETTING SWAP COUNT   NERDC\n         LH    R1,42(R6)           SWAP COUNT                     NERDC\n         CVD   R1,DOUBLE                                          NERDC\n         UNPK  SC(2),DOUBLE+6(2)                                  NERDC\n         OI    SC+1,X'F0'                                         NERDC\n         CH    R1,=H'100'                                         NERDC\n         BL    *+4+6                                              NERDC\n         MVC   SC(2),=C'**'        SET OVERFLOW                   NERDC\n         BR    R11\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(IEESZ03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\nMSGRTN   MVI   SCANRET,C'P'\nMSGRTN1  SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\nTSTSVC35 EQU   *\n         SVC   35                  ISSUE WTO\n         BR    R11\nRETURN   EQU   *\n         CLI   SCANRET,C' '        ANY FOUND\n         BE    NOTFOUND            NO, TELL OPERATOR\n         ESTAE  0\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\nNOTFOUND LA    R11,RETURN\n         LA    R1,NFNDMSG\n         B     MSGRTN\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         DS    0F\nNFNDMSG  DC    X'00360100'\n         DC    CL50'NO JOBS ON OUT QUEUE'\nHDRI     DC    X'00410100'                                        NERDC\n         DC    CL26'*****   IN   QUEUE   *****'                   NERDC\n         DC    CL35' ASID DP PG QP SC FLAGS   CPU  CPUR'          NERDC\nHDRO     DC    X'00410100'                                        NERDC\n         DC    CL26'*****   OUT  QUEUE   *****'\n         DC    CL35' ASID DP PG SR SC FLAGS   CPU  CPUR'          NERDC\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nASVTEND  DS    F                                                  JCC\nSCANRET  DS    C\nSCANTYPE DS    C\nTSOSW    DS    C\nDOMAIN   DS    C\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL61                                              NERDC\nJOBNAME  DS    CL9\nSTEPNAME DS    CL9\nPROCNAME DS    CL9                                                NERDC\nASID     DS    CL5                                                NERDC\nDPRTY    DS    CL3                                                NERDC\nPG       DS    CL3                                                NERDC\nSRC      DS    CL3                                                NERDC\nSC       DS    CL3                                                NERDC\nFLAGS    DS    CL6\nCPUTIME  DS    CL6                                                NERDC\nCPUREM   DS    CL5                                                NERDC\nESTAELST DS    0F,(ESTAEOVX)X     AXC-CBT\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAV      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCZA03D\n         TITLE 'ESAZA03D -   ##A  ACTIVITY MONITOR'\n         PRINT NOGEN                                               @TEC\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SE2ZA03D -       ##A  ACTIVITY MONITOR                    ***\n***                                                                 ***\n***       VERSION -        3.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        04/01/80                                 ***\n***                        08/10/81  JCC-BCB TEST FOR END OF ASCBS  ***\n***                        02/07/84  JCC-SNET ADD 31-BIT CODING     ***\n***                                      FOR XA.                    ***\n***                        09/05/91  TEC-JCL FIX FRAME COUNTS       ***\n***                                      AND EXCP COUNTS            ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n*-------------------------------------------------------------*    @TEC\n* REGISTER USAGE:                                             *    @TEC\n*                                                             *    @TEC\n*  R0  - WORK REGISTER                                        *    @TEC\n*  R1  - WORK REGISTER                                        *    @TEC\n*      - CONTROL BLOCK BASE. OUXB                             *    @TEC\n*  R2  - BASE ADDR OF XSA (PLIST FROM CONTROLLER)             *    @TEC\n*  R3  - WORK REGISTER                                        *    @TEC\n*  R4  - CONTROL BLOCK BASE. CVT,ASVT                         *    @TEC\n*      - OFFSET WITHIN DOMAIN TABLE                           *    @TEC\n*  R5  - CONTROL BLOCK BASE. ASCB                             *    @TEC\n*  R6  - CONTROL BLOCK BASE. CSCB, OUCB (RARELY)              *    @TEC\n*  R7  - CONTROL BLOCK BASE. OUCB (USUALLY)                   *    @TEC\n*  R8  - CURRENT ENTRY WITHIN JOBTABLE                        *    @TEC\n*  R9  - WORK REGISTER                                        *    @TEC\n*  R10 - SUBROUTINE LINKAGE (2ND LEVEL)                       *    @TEC\n*  R11 - SUBROUTINE LINKAGE (1ST LEVEL)                       *    @TEC\n*  R12 - PROGRAM BASE ADDRESS                                 *    @TEC\n*  R13 - WORKING STORAGE BASE (DSECT WORK)                    *    @TEC\n*  R14 - WORK REGISTER                                        *    @TEC\n*  R15 - WORK REGISTER                                        *    @TEC\n*-------------------------------------------------------------*    @TEC\nIEEZA03D CSECT\nIEEZA03D AMODE 24\nIEEZA03D RMODE 24\n         SPLEVEL SET=2\n         LR    R12,R15\n         USING IEEZA03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31          -JAL/XA-\n         BSM   0,R9                -JAL/XA-\nAMODE31  DC    A(CONT31+X'80000000')  -JAL/XA-\nCONT31   DS    0H                  -JAL/XA-\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L     * ESTAE PARM FIX        *\nESTAEOVX EQU   *-ESTAEOVL          * ESTAE PARM FIX        *\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX        *\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVI   TSOSW,C' '\n         XC    JOBTOT2(8),JOBTOT2\n         XC    DMNTAB(200),DMNTAB\n         MVC   DMNTAB+200(200),DMNTAB\n         MVC   DMNTAB+400(200),DMNTAB\n         MVC   DMNTAB+600(200),DMNTAB\n         MVC   DMNTAB+800(200),DMNTAB\n         MVC   DMNTAB+1000(200),DMNTAB\n         MVC   DMNTAB+1200(200),DMNTAB\n         MVC   DMNTAB+1400(200),DMNTAB\n         MVC   DMNTAB+1600(200),DMNTAB\n         MVC   DMNTAB+1800(200),DMNTAB\n         MVC   DMNTAB+2000(200),DMNTAB\n         MVC   DMNTAB+2200(200),DMNTAB\n         CLC   TSTSVC35(2),=X'0A23'  TSO OR STANDALONE EXEC\n         BE    *+16                NO\n         MVC   HDRIA(26),=CL26'ASID DSP DMN PGN SWC FLAGS'\n         MVC   HDROA(26),=CL26'ASID DSP DMN PGN SWC FLAGS'\n*-------------------------------------------------------------*    @TEC\n* DECODE COMMAND PARAMETER                                    *    @TEC\n*-------------------------------------------------------------*    @TEC\n         L     R1,XAT              LOAD WAITTIME ADDR\n         L     R15,8(0,R1)         LOAD HEX WAITTIME\n         LTR   R15,R15             TIME NOT SPECIFIED\n         BNZ   *+10                NO\n         MVC   0(8,R1),=CL8'00003000'  30 SECONDS DEFAULT\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY PARM\n         BZ    PARM2               NO\n         MVC   TSOSW(2),0(R3)      SAVE PARM\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C'T'          TSO DISPLAY\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C'J'          JOB DISPLAY\n         BE    PARM1               YES, CONTINUE\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),TSOSW\n         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY\n         BNE   PARM1\n         PACK  DOUBLE(8),TSOSW(2)\n         CVB   R1,DOUBLE\n         STC   R1,DOMAIN           SAVE DOMAIN\n         MVI   TSOSW,C'X'\n         B     PARM2\nPARM1    MVI   TSOSW,C' '\nPARM2    MVC   WTOLIST(4),=X'00540100'\n         MVI   SCANRET,C' '        SET FOUND\n         MVI   SCANTYPE,C'I'       SET IN QUEUE SCAN\n*-------------------------------------------------------------*    @TEC\n* LOOP OVER ASVT TO SCAN ALL ASCB'S                           *    @TEC\n*-------------------------------------------------------------*    @TEC\nSETINIT  L     R4,16               CVT\n         L     R4,556(0,R4)        ASVT\n         L     R8,516(0,R4)        MAX # OF ASIDS                JCC\n         MH    R8,=H'4'            MULT BY LENGTH                JCC\n         LA    R8,528(R4,R8)       FIND END OF ASID LIST         JCC\n         ST    R8,ASVTEND          STORE THAT ADDR               JCC\n         LA    R4,524(0,R4)        ASCB SLOT ADDR\n         LA    R8,JOBTABLE         ASCB/OUCB INFO STORAGE\nSETINIT1 XC    0(60,R8),0(R8)\nSETINIT2 LA    R4,4(0,R4)          INCR INTO ASVT\n         C     R4,ASVTEND          END OF ASVT                   JCC\n         BNL   SETINIT4            YES, EXIT                     JCC\n         TM    0(R4),X'80'         AVAILABLE SLOT\n         BO    SETINIT2            YES\n         L     R5,0(0,R4)          ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R7,144(0,R5)        OUCB ADDR\n         ST    R5,0(0,R8)          ENTRY ID\n         LM    R14,R15,64(R5)      TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)     SRB TIME\n         SRDL  R14,22\n         AR    R15,R1\n         ST    R15,4(0,R8)         SAVE PREVIOUS CPU TIME\n         SR    R15,R15\n         L     R15,320(0,R5)       EXCP COUNT                      @TEC\n         A     R15,64(0,R7)        OUCB EXCP COUNT                 @TEC\n         ST    R15,16(0,R8)        SAVE TOTAL EXCPS\n         L     R1,148(0,R5)        OUXB ADDR\n         LA    R1,0(0,R1)\n         LTR   R1,R1               VALID ADDR\n         BZ    SETINIT3            NO\n         L     R14,16(0,R1)        CURR PAGEIN\n         ST    R14,28(0,R8)        SAVE CURR PAGEIN\n         L     R14,20(0,R1)        CURR PAGEOUT\n         ST    R14,32(0,R8)        SAVE CURR PAGEOUT\n         L     R14,24(0,R1)        CURR PAGE RECLAIM\n         ST    R14,36(0,R8)        SAVE CURR PAGE RECLAIM\n         L     R14,28(0,R1)        CURR VIO PAGEIN\n         ST    R14,40(0,R8)        SAVE CURR VIO PAGEIN\n         L     R14,32(0,R1)        CURR VIO PAGEOUT\n         ST    R14,44(0,R8)        SAVE CURR VIO PAGEOUT\n         L     R14,36(0,R1)        CURR VIO RECLAIM\n         ST    R14,48(0,R8)        SAVE CURR VIO RECLAIM\nSETINIT3 TIME  BIN\n         ST    R0,52(0,R8)\n         LA    R8,56(0,R8)         NEXT ENTRY\n         B     SETINIT1\n*-------------------------------------------------------------*    @TEC\n* AFTER INITIAL SCAN WAIT FOR USER-SPECIFIED INTERVAL         *    @TEC\n*-------------------------------------------------------------*    @TEC\nSETINIT4 L     R3,XAT              LOAD WAITTIME ADDR\n         STIMER  WAIT,DINTVL=(R3)\n         LA    R1,HDRI             IN QUEUE HDR\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    JOBOUT              YES, CONTINUE\n         BAL   R11,MSGRTN1\n*-------------------------------------------------------------*    @TEC\n* RE-SCAN ALL ASCB'S AND CALCULATE OUTPUT.                    *    @TEC\n* NB: ASVT IS SCANNED ONCE FOR IN-QUEUE AND AGAIN FOR         *    @TEC\n* SWAPPED OUT USERS, IF REQUIRED.                             *    @TEC\n*-------------------------------------------------------------*    @TEC\nJOBOUT   L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         L     R5,516(0,R4)        MAX # OF ASIDS                JCC\n         MH    R5,=H'4'            MULT BY LENGTH                JCC\n         LA    R5,528(R4,R5)       FIND END OF ASID LIST         JCC\n         ST    R5,ASVTEND          STORE THAT ADDR               JCC\n         LA    R4,524(0,R4)        ASCB SLOT ADDR\n         B     JOBOUT4\nJOBOUT1  L     R5,0(0,R4)          ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R6,56(0,R5)         CSCB ADDR\n         L     R7,144(0,R5)        LOAD OUCB ADDR\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BNE   JOBOUT2             NO\n         CLI   41(R7),X'00'        SRC PRESENT\n         BNE   JOBOUT6             YES, GO CHECK DET WAIT\n         CLI   38(R5),X'7F'        LOGICAL SWAP\n         BE    JOBOUT4             YES, OUT\n         B     JOBOUT3             CONTINUE\nJOBOUT2  CLI   38(R5),X'7F'        LOGICAL SWAP\n         BE    JOBOUT3             YES, OUT QUEUE\n         CLI   41(R7),X'00'        SWAP REASON\n         BE    JOBOUT4             NO, IN QUEUE\n         CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT3             NO\n         TM    21(R7),X'01'        MSO DET WAIT BIT ON\n         BZ    JOBOUT4             NO, IGNORE SRC\nJOBOUT3  MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(79),JOBMSG\n         BAL   R11,ASCBFORM        GO FORMAT ASCB INFO\n         L     R6,144(0,R5)        OUCB ADDR\n         L     R3,60(0,R5)         TSB ADDR\n         L     R5,56(0,R5)         CSCB ADDR\n         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    JOBOUT4             YES, CONTINUE\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\nJOBOUT4  LA    R4,4(0,R4)          INCR INTO ASVT\n         C     R4,ASVTEND          END OF ASVT                   JCC\n         BNL   JOBOUT5             YES, RETURN                   JCC\n         TM    0(R4),X'80'         AVAILABLE ENTRY\n         BO    JOBOUT4             YES, CHECK NEXT\n         B     JOBOUT1             GO USE IT\nJOBOUT5  CLI   SCANTYPE,C'O'       OUT QUEUE SCAN\n         BE    DMNCHK              YES, EXIT\n         MVI   SCANRET,C' '        INIT OUTPUT SWITCH\n         MVI   SCANTYPE,C'O'       SET OUT QUEUE SCAN NEXT\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    JOBOUT              YES, CONTINUE\n         BAL   R11,JOBTOTL         TOTAL INPUT QUEUE\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         LA    R1,HDRO             OUT QUEUE HDR\n         BAL   R11,MSGRTN1\n         B     JOBOUT              NEXT PASS\nJOBOUT6  CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT4             NO\n         TM    21(R7),X'01'        MSO DET WAIT BIT ON\n         BZ    JOBOUT3             NO, IGNORE SRC\n         B     JOBOUT4\n*-------------------------------------------------------------*    @TEC\n* FORMAT ASCB/OUCB INFORMATION.                               *    @TEC\n*-------------------------------------------------------------*    @TEC\nASCBFORM LA    R8,JOBTABLE         JOBTABLE ADDR\n         UNPK  DOUBLE(5),36(3,R5)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASID(4),DOUBLE      SAVE ASID\n         CLI   HDRIA,C' '          TSO OR STANDALONE EXEC\n         BE    ASCBFRM1            NO, SHORTEN CONSOLE MESSAGE\n         L     R7,144(0,R5)        OUCB ADDR\n         UNPK  DOUBLE(5),36(3,R5)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASIDOUT(4),DOUBLE   ASID\n         SR    R1,R1\n         IC    R1,43(0,R5)         DPRTY TO MSG\n         CVD   R1,DOUBLE\n         UNPK  DSP(3),DOUBLE+6(2)\n         OI    DSP+2,X'F0'\n         LH    R1,42(0,R7)         SWAP COUNT          MVS/SE      WJB\n         CVD   R1,DOUBLE\n         MVC   SWC-1(4),=X'40202120'\n         ED    SWC-1(4),DOUBLE+6\n         SR    R1,R1\n         IC    R1,40(0,R7)         DOMAIN NUMBER       MVS/SE      WJB\n         CVD   R1,DOUBLE\n         MVC   DMN-1(4),=X'40202120'\n         ED    DMN-1(4),DOUBLE+6\n         SR    R1,R1\n         IC    R1,185(0,R7)        PERF GROUP NUMBER   MVS/SE2\n         CVD   R1,DOUBLE\n         MVC   PGN-1(4),=X'40202120'\n         ED    PGN-1(4),DOUBLE+6\n         CLI   SCANTYPE,C'I'       IN QUEUE PASS\n         BNE   ASCBFRM0            NO\n         LH    R1,38(0,R5)         DISP POSITION\n         CVD   R1,DOUBLE\n         MVC   FLAGS(5),=CL5'NS-'\n         TM    17(R7),X'80'        NON-SWAPPABLE\n         BO    *+10                YES\n         MVC   FLAGS(5),=CL5'IN-'\n         UNPK  FLAGS+3(2),DOUBLE+6(2)\n         OI    FLAGS+4,X'F0'\n         B     ASCBFRM1\nASCBFRM0 MVC   FLAGS(5),=CL5'OU-'\n         UNPK  FLAGS+3(3),41(2,R7)\n         NC    FLAGS+3(2),=2X'0F'\n         TR    FLAGS+3(2),=C'0123456789ABCDEF'\n         MVI   FLAGS+5,C' '\n         CLI   41(R7),X'00'        SRC = 0\n         BNE   ASCBFRM1            NO\n         CLI   38(R5),X'7F'        LOGICAL SWAP\n         BNE   ASCBFRM1            NO\n         MVC   FLAGS+3(2),=C'LG'\nASCBFRM1 CLC   0(4,R8),=F'0'       JOBTABLE END\n         BE    ASCBFRM2            YES\n         C     R5,0(0,R8)          ASCB MATCH\n         BE    ASCBFRM2            YES\n         LA    R8,56(0,R8)         NEXT ENTRY\n         B     ASCBFRM1\nASCBFRM2 LM    R14,R15,64(R5)      TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)     SRB TIME\n         L     R7,144(0,R5)        OUCB ADDR\n         SRDL  R14,22\n         AR    R1,R15\n         L     R15,4(0,R8)         LOAD PREVIOUS CPU TIME\n         LTR   R15,R15             ANY PREVIOUS\n         BNZ   *+6                 NO\n         LR    R15,R1              PREVIOUS = CURRENT\n         ST    R15,8(0,R8)         SAVE PREVIOUS CPU TIME\n         ST    R1,4(0,R8)          SAVE TOTAL CPU TIME\n         S     R1,8(0,R8)          SUB PREVIOUS CPU TIME\n         ST    R1,12(0,R8)         SAVE DIFFERENCE\n         SR    R1,R1\n         L     R1,320(0,R5)        EXCP COUNT                      @TEC\n         A     R1,64(0,R7)         OUCB EXCP COUNT                 @TEC\n         L     R15,16(0,R8)        LOAD PREVIOUS EXCP COUNT\n         LTR   R15,R15             ANY PREVIOUS\n         BNZ   *+6                 NO\n         LR    R15,R1              PREVIOUS = CURRENT\n         ST    R15,20(0,R8)        SAVE PREVIOUS CPU TIME\n         ST    R1,16(0,R8)         SAVE TOTAL CPU TIME\n         S     R1,20(0,R8)         SUB PREVIOUS CPU TIME\n         ST    R1,24(0,R8)         SAVE DIFFERENCE\n         TIME  BIN\n         L     R1,52(0,R8)         OLD TIME\n         LTR   R1,R1               ANY OLD TIME\n         BNZ   *+8                 YES\n         ST    R0,52(0,R8)         OLD TIME = NEW TIME\n         LR    R1,R0               BINARY TIME\n         S     R1,52(0,R8)         INTERVAL TIME\n         ST    R0,52(0,R8)         NEW TIME BEGIN\n         ST    R1,TIMEDIFF\n         LTR   R1,R1               TIME EQUAL 0\n         BZ    ASCBFRMY            YES, NO DIVIDE\n         L     R15,24(0,R8)        LOAD EXCP DIFFERENCE\n         LTR   R15,R15             NEGATIVE\n         BM    ASCBFRMX            YES\n         L     R15,12(0,R8)        LOAD CPU DIFFERENCE\n         LTR   R15,R15             NEGATIVE\n         BM    ASCBFRMX            YES\n         SR    R14,R14\n         M     R14,=F'10'          PERCENT\n         SR    R14,R14\n         DR    R14,R1              PERCENT UTIL\n         ST    R15,JOBTOT1+4       SAVE JOB TOTAL PCT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   PCT(7),=X'402020204B2020'\n         ED    PCT(4),DOUBLE+6\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R1              PERCENT UTIL  (HUNDREDTHS)\n         ST    R15,JOBTOT1         SAVE JOB TOTAL HUNDREDTHS\n         CVD   R15,DOUBLE          PERCENT TO PRINT  (HUNDREDTHS)\n         UNPK  PCT+5(2),DOUBLE+6(2)\n         OI    PCT+6,X'F0'\n         L     R15,24(0,R8)        LOAD EXCP DIFFERENCE\n         SR    R14,R14\n         M     R14,=F'100'         SET FOR DIVIDE\n         SR    R14,R14\n         DR    R14,R1              EXCP PER SEC\n         ST    R15,JOBTOT1+12      SAVE JOB TOTAL EXCP\n         CVD   R15,DOUBLE\n         MVC   SIO(9),=X'4020202020204B2020'\n         ED    SIO(6),DOUBLE+5\n         SRDL  R14,32\n         M     R14,=F'100'\n         DR    R14,R1              SIO PER SEC  (HUNDREDTHS)\n         ST    R15,JOBTOT1+8       SAVE JOB TOTAL HUNDREDTHS\n         CVD   R15,DOUBLE\n         UNPK  SIO+7(2),DOUBLE+6(2)\n         OI    SIO+8,X'F0'\n         L     R1,148(0,R5)        OUXB ADDR\n         LA    R1,0(0,R1)\n         LTR   R1,R1               VALID ADDR\n         BCR   8,R11               NO\n         L     R14,16(0,R1)        CURR PAGEIN\n         S     R14,28(0,R8)        SUB PREV PAGEIN\n         LTR   R14,R14             OVERFLOW\n         BM    ASCBFRM3            YES\n         LR    R15,R14             ACCUMULATE\n         L     R14,20(0,R1)        CURR PAGEOUT\n         S     R14,32(0,R8)        SUB PREV PAGEOUT\n         LTR   R14,R14             OVERFLOW\n         BM    ASCBFRM3            YES\n         AR    R15,R14             ACCUMULATE\n         L     R14,24(0,R1)        CURR PAGE RECLAIM\n         S     R14,36(0,R8)        SUB PREV PAGE RECLAIM\n         LTR   R14,R14             OVERFLOW\n         BM    ASCBFRM3            YES\n         SR    R15,R14             ACCUMULATE\n         L     R14,28(0,R1)        CURR VIO PAGEIN\n         S     R14,40(0,R8)        SUB PREV VIO PAGEIN\n         LTR   R14,R14             OVERFLOW\n         BM    ASCBFRM3            YES\n         AR    R15,R14             ACCUMULATE\n         L     R14,32(0,R1)        CURR VIO PAGEOUT\n         S     R14,44(0,R8)        SUB PREV VIO PAGEOUT\n         LTR   R14,R14             OVERFLOW\n         BM    ASCBFRM3            YES\n         AR    R15,R14             ACCUMULATE\n         L     R14,36(0,R1)        CURR VIO RECLAIM\n         S     R14,48(0,R8)        SUB PREV VIO RECLAIM\n         LTR   R14,R14             OVERFLOW\n         BM    ASCBFRM3            YES\n         SR    R15,R14             ACCUMULATE\n         SR    R14,R14\n         M     R14,=F'100'\n         D     R14,TIMEDIFF        PAGES PER SEC\n         ST    R15,JOBTOT1+20\n         CVD   R15,DOUBLE\n         LR    R1,R15\n         MVC   PAG(7),=X'402020214B2020'\n         ED    PAG(4),DOUBLE+6\n         SRDL  R14,32\n         M     R14,=F'100'\n         D     R14,TIMEDIFF        HUNDREDTHS\n         ST    R15,JOBTOT1+16\n         CVD   R15,DOUBLE\n         UNPK  PAG+5(2),DOUBLE+6(2)\n         OI    PAG+6,X'F0'\n         BAL   R10,CHKFRM\n         BR    R11\nASCBFRM3 MVC   PAG(7),=CL7'**OVF**'\n         BAL   R10,CHKFRM\n         BR    R11\nASCBFRMX MVC   PCT(7),=C'**CHG**'\n         BAL   R10,CHKFRM\n         BR    R11\nASCBFRMY MVC   PCT(7),=C'**ERR**'\n         BAL   R10,CHKFRM\n         BR    R11\n*-------------------------------------------------------------*    @TEC\n* SCAN PFT TO CALCULATE WORKING SET SIZE                      *    @TEC\n*-------------------------------------------------------------*    @TEC\nCHKFRM   L     R1,16               LOAD CVT ADDR\n         L     R1,356(0,R1)        LOAD PVT ADDR\n         L     R14,8(R1)           GET ADDR OR AREA IN RIT         @TEC\n         L     R0,0(0,R14)         GET ADDR OF FIRST REAL PFTE     @TEC\n         L     R1,4(0,R14)         GET ADDR OF LAST REAL PFTE      @TEC\n         SR    R1,R0               GET DIFFERENCE                  @TEC\n         SRL   R1,5                GET # ENTRIES                   @TEC\n         LA    R1,1(0,R1)          ADD IN LAST ONE                 @TEC\n         LR    R14,R1              PUT IN PROPER AREA              @TEC\n         SR    R1,R1               CLEAR FRAME COUNT\n         LR    R15,R0              FIRST PFTE                      @TEC\nCHKFRM1  CLC   18(2,R15),36(R5)    ASID MATCH                      @TEC\n         BNE   CHKFRM2             NO\n         LA    R1,1(0,R1)          ADD 1 TO FRAME COUNT\nCHKFRM2  LA    R15,32(0,R15)       NEXT PFT                        @TEC\n         BCT   R14,CHKFRM1         PROCESS NEXT\n         SLL   R1,2                CALC  'K'\n         CVD   R1,DOUBLE\n         MVC   FRAME(7),=X'402020202120D2'\n         ED    FRAME(6),DOUBLE+5\n         BR    R10\nJOBTOTL  MVC   WTOLIST+4(18),=CL18'## IN Q TOTL ##'\n         SR    R14,R14\n         L     R15,JOBTOT2\n         D     R14,=F'100'\n         A     R15,JOBTOT2+4       TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   PCT(7),=X'402020204B2020'\n         ED    PCT(4),DOUBLE+6\n         CVD   R14,DOUBLE\n         UNPK  PCT+5(2),DOUBLE+6(2)\n         OI    PCT+6,X'F0'\n         SR    R14,R14\n         L     R15,JOBTOT2+8\n         D     R14,=F'100'\n         A     R15,JOBTOT2+12      TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   SIO(9),=X'4020202020204B2020'\n         ED    SIO(6),DOUBLE+5\n         CVD   R14,DOUBLE\n         UNPK  SIO+7(2),DOUBLE+6(2)\n         OI    SIO+8,X'F0'\n         SR    R14,R14\n         L     R15,JOBTOT2+16\n         D     R14,=F'100'\n         A     R15,JOBTOT2+20      TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   PAG(7),=X'402020204B2020'\n         ED    PAG(4),DOUBLE+6\n         CVD   R14,DOUBLE\n         UNPK  PAG+5(2),DOUBLE+6(2)\n         OI    PAG+6,X'F0'\n         MVC   FRAME(35),=CL35' '\n         BR    R11\n*-------------------------------------------------------------*    @TEC\n* COME HERE AFTER ALL ASCB'S SCANNED                          *    @TEC\n*-------------------------------------------------------------*    @TEC\nDMNCHK   MVC   DMNLIST(4),=X'00540100'\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BNE   RETURN              NO\n         LA    R1,HDRD             OUT QUEUE HDR\n         BAL   R11,MSGRTN1\n         LA    R4,DMNTAB-24\n         SR    R5,R5\nDMNCHK1  CVD   R5,DOUBLE           DOMAIN NUMBER\n         MVC   DMNLIST+4(80),=CL80'DOMAIN XX'\n         UNPK  DMNNBR(2),DOUBLE+6(2)\n         OI    DMNNBR+1,X'F0'\n         LA    R5,1(0,R5)          NEXT DOMAIN\n         LA    R4,24(0,R4)         NEXT TABLE ENTRY\n         C     R5,=F'51'           END OF DOMAINS\n         BE    DMNCHK2             YES, TOTAL\n         CLC   0(24,R4),=6F'0'     ANY TIME IN THIS DOMAIN\n         BE    DMNCHK1             NO\n         SR    R14,R14\n         L     R15,0(0,R4)\n         D     R14,=F'100'\n         A     R15,4(0,R4)         TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNPCT(7),=X'402020204B2020'\n         ED    DMNPCT(4),DOUBLE+6\n         CVD   R14,DOUBLE\n         UNPK  DMNPCT+5(2),DOUBLE+6(2)\n         OI    DMNPCT+6,X'F0'\n         SR    R14,R14\n         L     R15,8(0,R4)\n         D     R14,=F'100'\n         A     R15,12(0,R4)        TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNSIO(9),=X'4020202020204B2020'\n         ED    DMNSIO(6),DOUBLE+5\n         CVD   R14,DOUBLE\n         UNPK  DMNSIO+7(2),DOUBLE+6(2)\n         OI    DMNSIO+8,X'F0'\n         SR    R14,R14\n         L     R15,16(0,R4)\n         D     R14,=F'100'\n         A     R15,20(0,R4)        TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNPAG(7),=X'402020204B2020'\n         ED    DMNPAG(4),DOUBLE+6\n         CVD   R14,DOUBLE\n         UNPK  DMNPAG+5(2),DOUBLE+6(2)\n         OI    DMNPAG+6,X'F0'\n         LA    R1,DMNLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         B     DMNCHK1\nDMNCHK2  MVC   DMNLIST+4(80),=CL80'TOTAL PCT'\n         SR    R14,R14\n         L     R15,JOBTOT2\n         D     R14,=F'100'\n         A     R15,JOBTOT2+4       TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNPCT(7),=X'402020204B2020'\n         ED    DMNPCT(4),DOUBLE+6\n         CVD   R14,DOUBLE\n         UNPK  DMNPCT+5(2),DOUBLE+6(2)\n         OI    DMNPCT+6,X'F0'\n         SR    R14,R14\n         L     R15,JOBTOT2+8\n         D     R14,=F'100'\n         A     R15,JOBTOT2+12      TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNSIO(9),=X'4020202020204B2020'\n         ED    DMNSIO(6),DOUBLE+5\n         CVD   R14,DOUBLE\n         UNPK  DMNSIO+7(2),DOUBLE+6(2)\n         OI    DMNSIO+8,X'F0'\n         SR    R14,R14\n         L     R15,JOBTOT2+16\n         D     R14,=F'100'\n         A     R15,JOBTOT2+20      TOTAL PERCENT\n         CVD   R15,DOUBLE          PERCENT TO PRINT\n         MVC   DMNPAG(7),=X'402020204B2020'\n         ED    DMNPAG(4),DOUBLE+6\n         CVD   R14,DOUBLE\n         UNPK  DMNPAG+5(2),DOUBLE+6(2)\n         OI    DMNPAG+6,X'F0'\n         LA    R1,DMNLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         B     RETURN\nCSCBFORM CLI   TSOSW,C'T'          TSO USER DISPLAY\n         BNE   CSCBFRM0            NO\n         CLI   28(R5),X'01'        TSO USER\n         BNE   JOBOUT4             NO, BYPASS\n         B     CSCBFRM6\nCSCBFRM0 CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    *+12                YES, CONTINUE\n         CLI   28(R5),X'01'        TSO USER\n         BE    JOBOUT4             YES, DONT PROCESS\n         CLI   28(R5),X'03'        INIT\n         BNE   CSCBFRM3            NO, GO HANDLE\n         LA    R9,0(0,R5)          SAVE CSCB ADDR\n         SR    R10,R10             INSERT\n         IC    R10,30(0,R5)\n         SLL   R10,8               ASID\n         IC    R10,31(0,R5)\nCSCBFRM1 L     R5,0(0,R5)          NEXT CSCB\n         LA    R5,0(0,R5)          CLEAR HIGH ORDER\n         LTR   R5,R5               END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R5,R9               LOAD CSCB ADDR\n         B     JOBOUT4             NO GOOD\n         CR    R5,R9               SAME CSCB\n         BE    JOBOUT4             YES, NO GOOD\n         CH    R10,30(0,R5)        SAME ASID\n         BNE   CSCBFRM1            NO, CHECK NEXT\nCSCBFRM2 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),64(R5)\n         B     CSCBFRM4\nCSCBFRM3 MVC   JOBNAME(8),16(R5)\n         MVC   STEPNAME(8),8(R5)\nCSCBFRM4 CLI   TSOSW,C'X'          DOMAIN DISPLAY\n         BNE   CSCBFRM5            NO\n         CLC   DOMAIN(1),40(R6)    DOMAIN MATCH\n         BNE   JOBOUT4\nCSCBFRM5 LM    R14,R15,JOBTOT1\n         A     R14,JOBTOT2\n         A     R15,JOBTOT2+4\n         STM   R14,R15,JOBTOT2\n         LM    R14,R15,JOBTOT1+8\n         A     R14,JOBTOT2+8\n         A     R15,JOBTOT2+12\n         STM   R14,R15,JOBTOT2+8\n         LM    R14,R15,JOBTOT1+16\n         A     R14,JOBTOT2+16\n         A     R15,JOBTOT2+20\n         STM   R14,R15,JOBTOT2+16\n         CLI   TSOSW,C'D'          DOMAIN LIST\n         BE    CSCBFRM7            YES\n         CLC   ASID(4),=C'0001'\n         BCR   7,R11\n         MVC   JOBNAME(20),=CL20'MASTER'\n         BR    R11\nCSCBFRM6 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),16(R5)\n         B     CSCBFRM5\nCSCBFRM7 SR    R1,R1\n         IC    R1,40(0,R6)         DOMAIN NUMBER\n         MH    R1,=H'24'\n         LA    R1,DMNTAB(R1)       DOMAIN TABLE SLOT\n         LM    R14,R15,JOBTOT1\n         A     R14,0(0,R1)\n         A     R15,4(0,R1)\n         STM   R14,R15,0(R1)       SAVE DOMAIN TOTALS\n         LM    R14,R15,JOBTOT1+8\n         A     R14,8(0,R1)\n         A     R15,12(0,R1)\n         STM   R14,R15,8(R1)       SAVE DOMAIN TOTALS\n         LM    R14,R15,JOBTOT1+16\n         A     R14,16(0,R1)\n         A     R15,20(0,R1)\n         STM   R14,R15,16(R1)      SAVE DOMAIN TOTALS\n         B     JOBOUT4\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n**************************************************************\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE\n*  OPERANDS, REGISTERS, AND PSW IN IT.\n**************************************************************\n         STM   R14,R12,12(R13)     SAVE REGISTER\n         LR    R14,R13             SAVE ORIG R13\n         L     R13,0(R1)           GET ESTAE PARM\n         L     R2,XSASAVE          GET XSA ADDRESS\n         LR    R13,R14             RESTORE R13\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA\n*                                  AND EBCDIC\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA\n         B     ESTNOP              SKIP CONSTANTS\n         ESTMODS ,\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS\n         LA    R3,ESTMODS          POINT AT NAMES\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,                   X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(IEEZA03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\nMSGRTN   MVI   SCANRET,C'P'\nMSGRTN1  SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\nTSTSVC35 SVC   35                  ISSUE WTO\n         BR    R11\nRETURN   ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         LA    R8,AMODE24          -JAL/XA-\n         BSM   0,R8                -JAL/XA-\nAMODE24  DS    0H                  -JAL/XA-\n         SR    R15,R15\n         BR    R14\n         LTORG\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         DS    0F\nSTAEMSG  DC    X'00540100'\n         DC    CL80'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         DS    0F\nNFNDMSG  DC    X'00540100'\n         DC    CL80'NO JOBS ON OUT QUEUE'\nHDRD     DC    X'00540100'\n         DC    CL18'**  DOMAINS  **'\n         DC    CL62'CPU PCT  SIO/SEC  PAG/SEC'\nHDRI     DC    X'00540100'\n         DC    CL18'** IN  QUEUE **'\n         DC    CL36'CPU PCT  SIO/SEC  PAG/SEC  WORKSET'\nHDRIA    DC    CL26' '\nHDRO     DC    X'00540100'\n         DC    CL18'** OUT QUEUE **'\n         DC    CL36'CPU PCT  SIO/SEC  PAG/SEC  WORKSET'\nHDROA    DC    CL26' '\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nJOBTOT1  DS    6F\nJOBTOT2  DS    6F\nXSASAVE  DS    F\nASID     DS    F\nTIMEDIFF DS    F\nASVTEND  DS    F                   JCC\nSCANRET  DS    C\nSCANTYPE DS    C\nTSOSW    DS    C\nDOMAIN   DS    C\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL80\nJOBNAME  DS    CL8\n         DS    CL1\nSTEPNAME DS    CL8\n         DS    CL1\nPCT      DS    CL7\nSIO      DS    CL9\n         DS    CL2\nPAG      DS    CL7\n         DS    CL2\nFRAME    DS    CL7\n         DS    CL2\nASIDOUT  DS    CL4\n         DS    CL1\nDSP      DS    CL3\n         DS    CL1\nDMN      DS    CL3\n         DS    CL1\nPGN      DS    CL3\n         DS    CL1\nSWC      DS    CL3\n         DS    CL1\nFLAGS    DS    CL5\n         DS    CL1\n         DS    0F\nDMNLIST  DS    F\nDMNMSG   DS    0CL80\n         DS    CL7\nDMNNBR   DS    CL2\n         DS    CL9\nDMNPCT   DS    CL7\nDMNSIO   DS    CL9\n         DS    CL2\nDMNPAG   DS    CL7\n         DS    CL37\nESTAELST DS    0F,(ESTAEOVX)X\nDMNTAB   DS    100CL24\nJOBTABLE DS    0D\nJOBTAB   DS    200CL48\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\nXAA      DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCZB03D\n         TITLE 'IEEZB03D -   ##B  DEVICE BUSY MONITOR'\n         PRINT NOGEN                                               @TEC\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEEZB03D -       ##B  DEVICE BUSY MONITOR                 ***\n***                                                                 ***\n***       VERSION -        2.3                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.   TO MVS/SP1.3 LEVEL        ***\n***                                                                 ***\n***       UPDATED -        07/21/81  AXC-CBT HANDLE ESTAE           ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEEZB03D CSECT\n         LR    R12,R15\n         USING IEEZB03D,R12\n         LR    R4,R14              SAVE RETURN ADDR\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R4,SAVRET           SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                          @TEC\n         BSM   0,R9                                                @TEC\nAMODE31  DC    A(CONT31+X'80000000')                               @TEC\nCONT31   DS    0H                                                  @TEC\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L     * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL          * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL  * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         LR    R1,R13\n         A     R1,=A(SEEKTAB-WORKSTRT)\n         ST    R1,SEEKTABA\n         XC    SEEKTOT(4),SEEKTOT\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         MVI   NFNDSW,X'00'        SET NOTHING FOUND\n         LTR   R3,R3               ANY PARM\n         BZ    RETURN              NO\n         MVC   PARM(3),0(R3)       SAVE PARM\n         SR    R1,R1\n         IC    R1,0(0,R3)          CHANNEL\n         SLL   R1,28\n         SRL   R1,28\n         TM    0(R3),X'F0'         NUMERIC CHANNEL\n         BO    *+8                 YES\n         LA    R1,9(0,R1)\n         STC   R1,CHANNEL          SAVE CHANNEL ID\n         CLI   0(R3),C'X'          ALL DASD REQ\n         BNE   *+8                 NO\n         MVI   CHANNEL,C'X'\n         MVC   DSPSW(1),4(R3)      SAVE LIST PARM\n         CLI   DSPSW,C'J'          JOB LIST\n         BE    PARM1               YES\n         CLI   DSPSW,C'S'          SEEK ANALYSIS\n         BNE   PARM0               NO\n         CLI   PARM+2,C'X'         SINGLE DEVICE\n         BNE   PARM1               YES\nPARM0    MVI   DSPSW,C'D'          DEVICE LIST\nPARM1    MVC   WTOLIST(4),=X'00540100'\n         L     R1,XAT              WAITTIME ADDR\n         L     R15,8(0,R1)         LOAD HEX TIME\n         LTR   R15,R15             TIME NOT SPECIFIED\n         BNZ   BYPASS              NO\n         MVC   0(8,R1),=CL8'00003000'  30 SECONDS DEFAULT\n         MVC   8(4,R1),=F'30'      30 SECONDS DEFAULT\nBYPASS   L     R3,8(0,R1)          LOAD MONITOR TIME\n         MH    R3,=H'5'            TIMES 5\n         LR    R5,R3\n         B     UCBTIME1\nUCBTIME  STIMER  WAIT,DINTVL=INTERVL\nUCBTIME1 BAL   R7,UCBLOOP\n         BCT   R3,UCBTIME\n         B     UCBBUSY\nUCBLOOP  STM   R0,R15,SAVEREGS\n         XC    UCBDMSAV(24),UCBDMSAV\n         L     R9,CVTPTR           CVT ADDR                        @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         XC    WKAREA(100),WKAREA  CLEAR WORK AREA                 @TEC\n         LA    R1,WKAREA           SETUP PARAMETER LIST            @TEC\n         ST    R1,PLIST                                            @TEC\n         LA    R1,=X'20'           SPECIFY DASD                    @TEC\n         ST    R1,PLIST+4                                          @TEC\n         LA    R1,ADDR             WORD TO PUT ADDRESS OF UCB      @TEC\n         ST    R1,PLIST+8                                          @TEC\n         OI    PLIST+8,X'80'       31 BIT PARM END SET             @TEC\nCHKUCB1A BAL   R10,UCBDML#0        GET NEXT UCB ADDR\n         LTR   R1,R1               END OF UCBS\n         BZ    CHKUCB5             YES, EXIT\n         CLI   CHANNEL,C'X'        ALL DASD REQ\n         BE    CHKUCB1X            YES, ALL MATCH\n         CLC   13(3,R1),PARM       UNIT MATCH\n         BE    CHKUCB1B            YES\n         CLI   PARM+2,C'X'         CONTROL UNIT REQ\n         BNE   CHKUCB1A            NO, NEXT UCB\n         CLC   13(2,R1),PARM       UNIT MATCH\n         BNE   CHKUCB1A            NO\n         B     CHKUCB1B\nCHKUCB1X CLI   18(R1),X'20'        DASD\n         BNE   CHKUCB1A            NO, NEXT\nCHKUCB1B MVI   NFNDSW,X'FF'\n         TM    3(R1),X'88'         ONLINE/ALLOCATED\n         BNO   CHKUCB1C            NO\n         LA    R6,UCBTAB-22\n         LR    R14,R1              UCB ADDR\n         S     R14,=F'4'           DECR ADDR -4\n         L     R14,0(0,R14)        IOQ ADDR\n         LA    R14,0(0,R14)\n         LTR   R14,R14             ANY IOQ\n         BZ    CHKUCB1D            NO\n         L     R14,8(0,R14)        IOSB ADDR\n         LA    R14,0(0,R14)\n         LTR   R14,R14             EXIST\n         BZ    CHKUCB1D            NO\n         CLI   DSPSW,C'S'          SEEK ANALYSIS\n         BNE   CHKUCB1C            NO\n         SR    R15,R15\n         ICM   R15,3,103(R14)      SEEK ADDR\n         SLL   R15,2\n         A     R15,SEEKTABA\n         L     R0,0(0,R15)\n         A     R0,=F'1'\n         ST    R0,0(0,R15)\n         L     R0,SEEKTOT\n         A     R0,=F'1'\n         ST    R0,SEEKTOT\nCHKUCB1C SR    R15,R15\n         ICM   R15,3,6(R14)        ASID\n         LA    R14,=CL8'*MASTER*'\n         CH    R15,=H'1'           MASTER\n         BE    CHKUCB2\n         SLL   R15,2               X 4\n         L     R14,16              CVT\n         L     R14,556(0,R14)      ASVT\n         L     R15,524(R15,R14)    ASCB\n         L     R14,56(0,R15)       CSCB                            @TEC\n         LA    R14,8(0,R14)        JOBNAME                         @TEC\n         CLI   0(R14),C'A'         LEGIT?                          @TEC\n         BNL   CHKUCB2             YES.                            @TEC\n         LA    R14,=CL8'*UNKNWN*'                                  @TEC\n         B     CHKUCB2                                             @TEC\nCHKUCB1D SR    R14,R14\nCHKUCB2  LA    R6,22(0,R6)         NEXT UCB ENTRY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BE    CHKUCB3             YES\n         CLI   0(R6),X'FF'         EMPTY SLOT\n         BE    CHKUCB3             YES\n         CLC   0(3,R6),13(R1)      UCB ADDR MATCH\n         BNE   CHKUCB2             NO\n         LTR   R14,R14             DEVICE NOT BUSY\n         BZ    CHKUCB1A            YES\n         CLI   DSPSW,C'D'          DEVICE ONLY\n         BE    CHKUCB4             YES\n         CLC   10(8,R6),0(R14)     JOBNAME MATCH\n         BNE   CHKUCB2             NO\n         B     CHKUCB4\nCHKUCB3  XC    18(4,R6),18(R6)\n         MVC   0(3,R6),13(R1)      UNIT ADDR\n         MVC   4(6,R6),=CL6' '\n         MVC   10(8,R6),0(R14)     JOBNAME\n         TM    18(R1),X'A0'        DASD OR TAPE\n         BZ    CHKUCB3A            NO\n         MVC   4(6,R6),28(R1)      VOLSER\nCHKUCB3A LTR   R14,R14             DEVICE NOT BUSY\n         BZ    CHKUCB1A            YES\nCHKUCB4  LH    R14,18(0,R6)        BUSY COUNT\n         LA    R14,1(0,R14)\n         STH   R14,18(0,R6)\n         CLC   4(1,R1),CHANNEL     CHANNEL MATCH\n         BNE   CHKUCB1A            NO\n         LH    R14,20(0,R6)        BUSY COUNT\n         LA    R14,1(0,R14)\n         STH   R14,20(0,R6)\n         B     CHKUCB1A\nCHKUCB5  LA    R6,UCBTAB-22\nCHKUCB5A LA    R6,22(0,R6)         NEXT UCB ENTRY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BNE   CHKUCB5A            NO\n         MVI   0(R6),X'FF'         SET END OF TABLE\nCHKUCB5B LM    R0,R15,SAVEREGS\n         BR    R7\nUCBDML#0 ST    R8,UCBDMSAV         SAVE WORK REG 1\n         ST    R10,UCBDMSAV+8      SAVE WORK REG 3\n         ST    R11,UCBDMSAV+12     SAVE WORK REG 4\nUCBLOOP1 L     R9,CVTPTR           CVT ADDR                        @TEC\n         L     R9,CVTUCBSC-CVTMAP(R9)  LOOKUP ROUTINE ADDRESS      @TEC\n         LA    R1,PLIST            POINT AT PARM LIST              @TEC\n         LR    R15,R9              GET MODULE ADDRESS              @TEC\n         BALR  R14,R15             CALL MVS                        @TEC\n         LTR   R15,R15             UCB FOUND?                      @TEC\n         BZ    UCBFND              YES.                            @TEC\n         SR    R1,R1               SAY THAT'S ALL.                 @TEC\n         B     UCBDMCON            AND GO HOME.                    @TEC\nUCBFND   DS    0H\n         L     R1,ADDR             GET ADDR OF UCB                 @TEC\n         L     R8,UCBDMLOW         SET SEARCH ARGUMENT\nUCBDML#1 LA    R8,1(0,R8)          NEXT UNIT ADDR POSSIBLE\n         L     R10,=X'0000FFFF'    SET MAX NEXT LEAST HIGH\nUCBDML#2 LTR   R1,R1               MORE UCBS?                      @TEC\n         BZ    UCBDMOUT            YES, GO PROCESS\nUCBDML#4 CLI   18(R1),X'10'        GRAPHICS\n         BE    UCBLOOP1            YES, NEXT UCB                   @TEC\n         CLI   18(R1),X'40'        COMM\n         BE    UCBLOOP1            YES, NEXT UCB                   @TEC\n         TM    6(R1),X'08'         SSCH ISSUED?                    @TEC\n         BZ    UCBLOOP1            NO, NEXT UCB                    @TEC\n         BAL   R11,UCBDMCNV        CONVERT UNIT ADDR TO HEX\n         CR    R0,R8               UNIT EQUAL                      @TEC\n         BL    UCBLOOP1            LOW NOT EQUAL, NEXT UCB         @TEC\n         LR    R10,R0              SET NEXT LEAST HIGH UNIT AD     @TEC\n         ST    R1,UCBDMCUR         SET NEXT LEAST HIGH UCB ADD     @TEC\n         B     UCBDMOUT            GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)        UNIT ADDR DIGIT\n         TM    13(R1),X'F0'        NUMERIC\n         BO    *+8                 YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        SET VALUE TO COVER A-F\n         SLL   R15,28              SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)        UNIT ADDR DIGIT\n         TM    14(R1),X'F0'        NUMERIC\n         BO    *+8                 YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        SET VALUE TO COVER A-F\n         SLL   R15,28              SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)        UNIT ADDR DIGIT\n         TM    15(R1),X'F0'        NUMERIC\n         BO    *+8                 YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        SET VALUE TO COVER A-F\n         SLL   R15,28              SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               INSERT INTO RESULTS REGISTER\n         LR    R0,R14              SET RESULTS REG                 @TEC\n         BR    R11\nUCBDMOUT C     R10,=X'0000FFFF'    ALL DONE\n         BE    UCBDMEX             YES\n         ST    R10,UCBDMLOW        NEXT LOW UNIT ADDR\n         L     R1,UCBDMCUR         LOAD UCB ADDR FOR FOUND UNIT\n         B     UCBDMCON            CONTINUE\nUCBDMEX  SR    R1,R1               CLEAR UCB ADDR REGISTER\n         L     R8,UCBDMSAV         RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     RELOAD WORK REG 4\n         B     UCBDMRET            END OF UCBS\nUCBDMCON L     R8,UCBDMSAV         RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     RELOAD WORK REG 4\nUCBDMRET EQU   *\n         BR    R10\nUCBBUSY  LA    R6,UCBTAB-22\n         MVC   CURRUNIT(3),=X'FFFFFF'\n         XC    CURRCNT(4),CURRCNT\nUCBBUSY1 LA    R6,22(0,R6)\n         MVC   WTOLIST+4(80),DEVOVLY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BE    UCBBUSY1            YES\n         CLI   0(R6),X'FF'         END OF UCB TABLE\n         BE    UCBBUSY3            YES\n         CLC   CURRUNIT(2),0(R6)   CURRENT UNIT CHECK\n         BL    UCBBUSY1            CURRENT LOW, CONTINUE\n         BH    UCBBUSY2            CURRENT HIGH, REPLACE\n         SR    R14,R14\n         IC    R14,CURRUNIT+2\n         SR    R15,R15\n         IC    R15,2(0,R6)\n         SLL   R14,28\n         SRL   R14,28\n         SLL   R15,28\n         SRL   R15,28\n         TM    CURRUNIT+2,X'F0'    NUMERIC\n         BO    *+8                 NO\n         LA    R14,9(0,R14)\n         TM    2(R6),X'F0'         NUMERIC\n         BO    *+8                 NO\n         LA    R15,9(0,R15)\n         CR    R14,R15             CURRENT UNIT CHECK\n         BL    UCBBUSY1            CURRENT LOW, CONTINUE\n         BH    UCBBUSY2            CURRENT HIGH, REPLACE\n         LH    R1,CURRCNT\n         AH    R1,18(0,R6)\n         STH   R1,CURRCNT\n         LH    R1,CURRCNT+2\n         AH    R1,20(0,R6)\n         STH   R1,CURRCNT+2\n         B     UCBBUSY1\nUCBBUSY2 MVC   CURRUNIT(3),0(R6)\n         MVC   CURRVOL(6),4(R6)\n         MVC   CURRCNT(4),18(R6)\n         B     UCBBUSY1\nUCBBUSY3 CLC   CURRUNIT(3),=X'FFFFFF'  END OF LIST\n         BE    RETURN\n         MVC   DEVSTRT(3),CURRUNIT  UNIT ADDR\n         MVI   DEVSTRT+3,C' '\n         MVC   DEVSTRT+4(6),CURRVOL  VOLSER\n         SR    R14,R14\n         LH    R15,CURRCNT         UCB BUSY COUNT\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         LR    R1,R15\n         MVC   BUSY(4),=X'40202120'\n         ED    BUSY(4),DOUBLE+6\n         SR    R14,R14\n         LH    R15,CURRCNT+2       UCB BUSY COUNT THIS CHANNEL\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         MVC   BUSY+4(4),=X'40202120'\n         ED    BUSY+4(4),DOUBLE+6\n         MVI   BUSY+4,C'%'\n         LR    R15,R1\n         SRL   R15,1\n         CH    R15,=H'50'\n         BNH   *+8\n         LH    R15,=H'50'\n         EX    R15,PCTMVE\n         LA    R15,PCTGRAPH(R15)\n         MVI   0(R15),C'>'\n         LA    R1,WTOLIST\n         BAL   R11,MSGRTN\n         CLI   DSPSW,C'S'          SEEK ANALYSIS\n         BE    UCBSEEK             YES\n         LA    R6,UCBTAB-22\nUCBBUSY4 LA    R6,22(0,R6)\n         MVC   WTOLIST+4(80),DEVOVLY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BE    UCBBUSY4            YES\n         CLI   0(R6),X'FF'         END OF UCB TABLE\n         BE    UCBBUSY             YES\n         CLC   CURRUNIT(3),0(R6)   CURRENT UNIT CHECK\n         BNE   UCBBUSY4            NO MATCH\n         CLI   DSPSW,C'J'          JOB DISPLAY\n         BNE   UCBBUSY5            NO\n         MVC   DEVSTRT+3(8),10(R6)  JOBNAME\n         MVC   DEVSTRT(3),=C'-- '\n         MVC   DEVSTRT+11(4),=CL4' '\n         SR    R14,R14\n         LH    R15,18(0,R6)        UCB BUSY COUNT\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         MVC   BUSY(4),=X'40202120'\n         ED    BUSY(4),DOUBLE+6\n         SR    R14,R14\n         LH    R15,20(0,R6)        UCB BUSY COUNT THIS CHANNEL\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         MVC   BUSY+4(4),=X'40202120'\n         ED    BUSY+4(4),DOUBLE+6\n         MVI   BUSY+4,C'%'\n         LA    R1,WTOLIST\n         BAL   R11,MSGRTN\n         MVI   0(R6),X'00'         CLEAR ENTRY\n         B     UCBBUSY4\nUCBBUSY5 MVI   0(R6),X'00'         CLEAR ENTRY\n         B     UCBBUSY\nPCTMVE   MVC   PCTGRAPH(0),PCTLINE\nUCBSEEK  MVC   WTOLIST+4(80),SEEKHDR\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         L     R4,SEEKTABA         SEEK TABLE ADDR\n         SR    R5,R5\n         LA    R6,300                                              @TEC\nUCBSEEK0 LA    R7,10               CYL PER LINE\n         LA    R8,WTOLIST+16\n         SR    R9,R9               TOTAL\n         CVD   R5,DOUBLE           CYL ADDR\n         MVI   WTOLIST+4,C' '\n         MVC   WTOLIST+5(79),WTOLIST+4\n         UNPK  WTOLIST+4(3),DOUBLE+6(2)\n         OI    WTOLIST+6,X'F0'\nUCBSEEK1 SR    R14,R14\n         L     R15,0(0,R4)         CYLINDER ACCESS COUNT\n         A     R9,0(0,R4)          TOTAL CYLINDER ACCESS COUNT\n         LTR   R15,R15             ANY ACCESS\n         BNZ   UCBSEEK4            YES\nUCBSEEK2 LA    R5,1(0,R5)          ADD TO CYL COUNT\n         LA    R4,4(0,R4)          NEXT CYL\n         LA    R8,7(0,R8)          NEXT PRINT ADDR\n         BCT   R7,UCBSEEK1\n         LTR   R15,R9              TOTAL FOR CYL RANGE\n         BZ    UCBSEEK3\n         M     R14,=F'100'\n         D     R14,SEEKTOT\n         CVD   R15,DOUBLE\n         MVC   WTOLIST+9(5),=X'402021206C'\n         ED    WTOLIST+9(4),DOUBLE+6\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\nUCBSEEK3 BCT   R6,UCBSEEK0\n         B     RETURN\nUCBSEEK4 M     R14,=F'100'\n         D     R14,SEEKTOT\n         CVD   R15,DOUBLE\n         MVC   0(5,R8),=X'402021206C'\n         ED    0(4,R8),DOUBLE+6\n         B     UCBSEEK2\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\nTSTTSSVC SVC   35                  ISSUE WTO\n         BR    R11\nRETURN   CLI   NFNDSW,X'00'        ANY OUTPUT\n         BNE   RETURN1             YES\n         LA    R1,NFNDMSG\n         BAL   R11,MSGRTN\nRETURN1  EQU   *\n         LA    R8,AMODE24                                          @TEC\n         BSM   0,R8                                                @TEC\nAMODE24  DS    0H                                                  @TEC\n         ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R5,SAVRET           RETURN ADDR\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15\n         LR    R14,R5\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC  SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX  MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2)  MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19  SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                 GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8)  GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,  GLA-BFG          X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)  GLA-BFG\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         USING *,R15\nSTAERTRY L     R12,=A(IEEZB03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\n         B     MSGRTN\n         LTORG\n         DS    0D\nINTERVL  DC    CL8'00000020'\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\nDEVOVLY  DC    CL80'UUU VVVVVV BUSY NNN/NNN%'\nSEEKHDR  DC    CL80'CYL    ALL    --0    --1    --2    --3    --4    --X\n               5    --6    --7    --8    --9'\nPCTLINE  DC    CL51'0====1====2====3====4====5====6====7====8====9===='\n         DS    0F\nNFNDMSG  DC    X'00300100'\n         DC    CL44'UNIT SPECIFIED NOT FOUND OR 00% BUSY'\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nSAVEREGS DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nSEEKTABA DS    F\nSEEKTOT  DS    F\nDSPSW    DS    C\nNFNDSW   DS    C\nCHANNEL  DS    C\nCURRUNIT DS    CL3\nCURRVOL  DS    CL6\nCURRCNT  DS    F\nPARM     DS    F\nESTAELST DS    0F,(ESTAEOVX)X      AXC-CBT\nPLIST    DS    3F                                                  @TEC\nADDR     DS    F                                                   @TEC\nWKAREA   DS    0D,XL100                                            @TEC\nUCBDMSAV DS    4F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\n         DS    0F\nWTOLIST  DS    F\nDEVSTRT  DS    CL8\n         DS    CL2\n         DS    CL5\nBUSY     DS    CL8\n         DS    CL2\nPCTGRAPH DS    CL51\n         DS    CL4\n         DS    0F\nUCBTAB   DS    2000CL22\nSEEKTAB  DS    3000F                                               @TEC\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\n         CVT   DSECT=YES                                           @TEC\nCHAN1    EQU   256\nCHAN2    EQU   512\nCHAN3    EQU   768\nCHAN4    EQU   1024\nCHAN5    EQU   1280\nCHAN6    EQU   1536\nCHAN7    EQU   1792\nCHAN8    EQU   2048\nCHAN9    EQU   2304\nCHAN10   EQU   2560\nCHAN11   EQU   2816\nCHAN12   EQU   3072\nCHAN13   EQU   3328\nCHAN14   EQU   3584\nCHAN15   EQU   3840\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCZC03D\n         TITLE 'IEEZC03D -   ##C  CHANNEL BUSY MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEEZC03D -       ##C  CHANNEL BUSY MONITOR                ***\n***                                                                 ***\n***       VERSION -        2.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SE  3.8.  TO MVS/SP1.3               ***\n***                                                                 ***\n***       UPDATED -        11/01/79                                 ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEEZC03D CSECT\n         LR    R12,R15\n         USING IEEZC03D,R12\n         LR    R4,R14              SAVE RETURN ADDR\n         MODESET KEY=ZERO,MODE=SUP\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R4,SAVRET           SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         XC    CHNTAB(64),CHNTAB\n         MVI   CHANNEL,X'00'\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY PARM\n         BZ    PARM1               NO\n         MVC   DSPSW(1),3(R3)      SAVE PARM\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),0(R3)\n         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY\n         BNE   PARM1\n         PACK  DOUBLE(8),0(2,R3)\n         CVB   R1,DOUBLE\n         STC   R1,CHANNEL          SAVE CHANNEL\n         CLI   DSPSW,C'D'          DEVICE BUSY\n         BE    PARM2               YES, CONTINUE\n         CLI   DSPSW,C'J'          DEVICE BUSY BY JOB\n         BE    PARM2               YES, CONTINUE\n         SPACE 1\nPARM1    MVI   DSPSW,C' '\n         SPACE 1\nPARM2    MVC   WTOLIST(4),=X'00540100'\n         L     R1,XAT              WAITTIME ADDR\n         L     R15,8(0,R1)         LOAD HEX TIME\n         LTR   R15,R15             TIME NOT SPECIFIED\n         BNZ   BYPASS              NO\n         MVC   0(8,R1),=CL8'00003000'  30 SECONDS DEFAULT\n         MVC   8(4,R1),=F'30'          30 SECONDS DEFAULT\n         SPACE 1\nBYPASS   L     R3,8(0,R1)          LOAD MONITOR TIME\n         MH    R3,=H'5'            TIMES 5\n         LR    R5,R3\n         B     CHNLOOP1\nCHNLOOP  STIMER WAIT,DINTVL=INTERVL\n         SPACE 1\nCHNLOOP1 SR    R4,R4\n         LA    R10,CHNTAB\n         TCH   CHAN1               TEST CHANNEL 01 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN2               TEST CHANNEL 02 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN3               TEST CHANNEL 03 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN4               TEST CHANNEL 04 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN5               TEST CHANNEL 05 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN6               TEST CHANNEL 06 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN7               TEST CHANNEL 07 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN8               TEST CHANNEL 08 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN9               TEST CHANNEL 09 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN10              TEST CHANNEL 10 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN11              TEST CHANNEL 11 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN12              TEST CHANNEL 12 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN13              TEST CHANNEL 13 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN14              TEST CHANNEL 14 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         LA    R10,4(0,R10)        NEXT COUNT\n         TCH   CHAN15              TEST CHANNEL 15 BUSY\n         L     R1,0(0,R10)         LOAD CURRENT BUSY COUNT\n         BC    1,CHNEND            END OF CHANNELS\n         BC    13,*+8              NOT BUSY\n         LA    R1,1(0,R1)          ADD 1 TO BUSY COUNT\n         ST    R1,0(0,R10)         SAVE BUSY COUNT\n         SPACE 1\nCHNEND   CLI   DSPSW,C' '          DEVICE DISPLAY\n         BE    CHNEND1             NO\n         BAL   R7,UCBLOOP\n         SPACE 1\nCHNEND1  BCT   R3,CHNLOOP\n         B     BUSYCHK\nUCBLOOP  STM   R0,R15,SAVEREGS\n         XC    UCBDMSAV(24),UCBDMSAV\n         L     R9,16               .CVT\n         L     R9,40(0,R9)         .UCB LOOKUP TABLE\n         SPACE 1\nCHKUCB1A BAL   R10,UCBDML#0        GET NEXT UCB ADDR\n         LTR   R1,R1               END OF UCBS\n         BZ    CHKUCB5             YES, EXIT\n         TM    18(R1),X'A0'        DASD OR TAPE\n         BZ    CHKUCB1A            NO\n         TM    3(R1),X'88'         ONLINE/ALLOCATED\n         BNO   CHKUCB1A            NO\n         MVI   CHANTEST,X'00'\n         SR    R0,R0\n         IC    R0,13(0,R1)\n         SLL   R0,28\n         SRL   R0,28\n         TM    13(R1),X'F0'        CHAN 0 - 9\n         BO    *+8                 YES\n         A     R0,=F'9'\n         STC   R0,CHANTEST         SAVE PRIMARY CHANNEL\n         CLC   CHANTEST(1),CHANNEL CHANNEL MATCH\n         BE    *+14                YES\n         CLC   4(1,R1),CHANNEL     CHANNEL MATCH\n         BNE   CHKUCB1A            NO\n         LA    R6,UCBTAB-22\n         LR    R14,R1             UCB ADDR\n         S     R14,=F'4'          DECR ADDR -4\n         L     R14,0(0,R14)       IOQ ADDR\n         LA    R14,0(0,R14)\n         LTR   R14,R14            ANY IOQ\n         BZ    CHKUCB1A           NO\n         L     R14,8(0,R14)       IOSB ADDR\n         LA    R14,0(0,R14)\n         LTR   R14,R14            EXIST\n         BZ    CHKUCB1A           NO\n         SR    R15,R15\n         ICM   R15,3,6(R14)       ASID\n         LA    R14,=CL8'*MASTER*'\n         CH    R15,=H'1'          MASTER\n         BE    CHKUCB2\n         SLL   R15,2              X 4\n         L     R14,16             CVT\n         L     R14,556(0,R14)     ASVT\n         L     R15,524(R15,R14)   ASCB\n         L     R14,172(0,R15)      JOBNAME POINTER\n         LTR   R14,R14             ZERO\n         BNZ   CHKUCB2             NO\n         L     R14,176(0,R15)      STC/TSU NAME POINTER\n         LTR   R14,R14             ZERO\n         BNZ   CHKUCB2             NO\n         LA    R14,=CL8'*UNKNWN*'\nCHKUCB2  LA    R6,22(0,R6)         NEXT UCB ENTRY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BE    CHKUCB3             YES\n         CLI   0(R6),X'FF'         EMPTY SLOT\n         BE    CHKUCB3             YES\n         CLC   0(3,R6),13(R1)      UCB ADDR MATCH\n         BNE   CHKUCB2             NO\n         CLI   DSPSW,C'D'          DEVICE ONLY\n         BE    CHKUCB4             YES\n         CLC   10(8,R6),0(R14)     JOBNAME MATCH\n         BNE   CHKUCB2             NO\n         B     CHKUCB4\n         SPACE 1\nCHKUCB3  XC    18(4,R6),18(R6)\n         MVC   0(3,R6),13(R1)      UNIT ADDR\n         MVC   4(6,R6),28(R1)      VOLSER\n         MVC   10(8,R6),0(R14)     JOBNAME\n         SPACE 1\nCHKUCB4  LH    R14,18(0,R6)        BUSY COUNT\n         LA    R14,1(0,R14)\n         STH   R14,18(0,R6)\n         CLC   4(1,R1),CHANNEL     CHANNEL MATCH\n         BNE   CHKUCB1A            NO\n         LH    R14,20(0,R6)        BUSY COUNT\n         LA    R14,1(0,R14)\n         STH   R14,20(0,R6)\n         B     CHKUCB1A\n         SPACE 1\nCHKUCB5  LA    R6,UCBTAB-22\n         SPACE 1\nCHKUCB5A LA    R6,22(0,R6)         NEXT UCB ENTRY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BNE   CHKUCB5A            NO\n         MVI   0(R6),X'FF'         SET END OF TABLE\n         SPACE 1\nCHKUCB5B LM    R0,R15,SAVEREGS\n         BR    R7\nUCBDML#0 ST    R8,UCBDMSAV         .SAVE WORK REG 1\n         ST    R10,UCBDMSAV+8      .SAVE WORK REG 3\n         ST    R11,UCBDMSAV+12     .SAVE WORK REG 4\n         L     R8,UCBDMLOW         .SET SEARCH ARGUMENT\n         SPACE 1\nUCBDML#1 LA    R8,1(0,R8)          .NEXT UNIT ADDR POSSIBLE\n         L     R10,=X'0000FFFF'    .SET MAX NEXT LEAST HIGH\n         SPACE 1\nUCBDML#2 CLC   0(2,R9),=X'FFFF'    .END OF TABLE\n         BE    UCBDMOUT            .YES, GO PROCESS\n         SR    R1,R1\n         ICM   R1,3,0(R9)          .LOAD UCB ADDR\n         LTR   R1,R1               .ZERO ADDR\n         BNZ   UCBDML#4            .NO, CONTINUE\n         SPACE 1\nUCBDML#3 LA    R9,2(0,R9)          .NEXT UCB LOOKUP TABLE ENTRY\n         B     UCBDML#2\n         SPACE 1\nUCBDML#4 CLI   18(R1),X'10'        GRAPHICS\n         BE    UCBDML#3            YES, NEXT UCB\n         CLI   18(R1),X'40'        COMM\n         BE    UCBDML#3            YES, NEXT UCB\n         TM    6(R1),X'8A'         BUSY AND/OR CHANNEL PROGRAM ACTIVE\n         BZ    UCBDML#3            NO, NEXT UCB\n         BAL   R11,UCBDMCNV        .CONVERT UNIT ADDR TO HEX\n         CR    R1,R8               .UNIT EQUAL\n         BL    UCBDML#3            .LOW NOT EQUAL, NEXT UCB\n         LR    R10,R1              .SET NEXT LEAST HIGH UNIT ADDR\n         MVC   UCBDMCUR+2(2),0(R9) .SET NEXT LEAST HIGH UCB ADDR\n         B     UCBDMOUT            .GO PROCESS\nUCBDMCNV SR    R14,R14\n         SR    R15,R15\n         IC    R15,13(0,R1)        .UNIT ADDR DIGIT\n         TM    13(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,14(0,R1)        .UNIT ADDR DIGIT\n         TM    14(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         IC    R15,15(0,R1)        .UNIT ADDR DIGIT\n         TM    15(R1),X'F0'        .NUMERIC\n         BO    *+8                 .YES, BYPASS VALUE ADJUST\n         LA    R15,9(0,R15)        .SET VALUE TO COVER A-F\n         SLL   R15,28              .SHIFT OUT ALL BUT PERTINENT\n         SLDL  R14,4               .INSERT INTO RESULTS REGISTER\n         LR    R1,R14              .SET RESULTS REG\n         BR    R11\n         SPACE 3\nUCBDMOUT C     R10,=X'0000FFFF'    .ALL DONE\n         BE    UCBDMEX             .YES\n         ST    R10,UCBDMLOW        .NEXT LOW UNIT ADDR\n         L     R1,UCBDMCUR         .LOAD UCB ADDR FOR FOUND UNIT\n         B     UCBDMCON            .CONTINUE\n         SPACE 1\nUCBDMEX  SR    R1,R1               .CLEAR UCB ADDR REGISTER\n         L     R8,UCBDMSAV         .RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      .RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     .RELOAD WORK REG 4\n         B     UCBDMRET            .END OF UCBS\n         SPACE 1\nUCBDMCON L     R8,UCBDMSAV         .RELOAD WORK REG 1\n         L     R10,UCBDMSAV+8      .RELOAD WORK REG 3\n         L     R11,UCBDMSAV+12     .RELOAD WORK REG 4\n         SPACE 1\nUCBDMRET EQU   *\n         BR    R10\n         BR    R7\nBUSYCHK  LA    R4,CHNTAB-4         CHANNEL TABLE ADDR\n         LA    R3,15\n         SR    R6,R6\n         SPACE 1\nBUSYCHK1 LA    R4,4(0,R4)          CHAN TABLE SLOT\n         L     R15,0(0,R4)         CHAN BUSY\n         LA    R6,1(0,R6)          CHAN NUMBER\n         CLI   CHANNEL,X'00'       SINGLE CHANNEL REQUEST\n         BE    *+12                NO\n         CLM   R6,1,CHANNEL        CHANNEL MATCH\n         BNE   BUSYCHK2\n         SR    R14,R14\n         CVD   R6,DOUBLE\n         MVC   WTOLIST+4(80),OVERLAY\n         UNPK  CHAN(2),DOUBLE+6(2)\n         OI    CHAN+1,X'F0'\n         M     R14,=F'100'\n         SR    R14,R14\n         DR    R14,R5\n         LR    R7,R15\n         SRDL  R14,32\n         LR    R1,R5\n         SRL   R1,1\n         DR    R14,R1\n         AR    R15,R7\n         CVD   R15,DOUBLE\n         MVC   BUSY+4(4),=X'40202120'\n         ED    BUSY+4(4),DOUBLE+6\n         SRL   R15,1\n         CH    R15,=H'50'\n         BNH   *+8\n         LH    R15,=H'50'\n         EX    R15,PCTMVE\n         LA    R15,PCTGRAPH(R15)\n         MVI   0(R15),C'>'\n         LA    R1,WTOLIST\n         BAL   R11,MSGRTN\n         SPACE 1\nBUSYCHK2 BCT   R3,BUSYCHK1\n         B     UCBBUSY\n         SPACE 3\nPCTMVE   MVC   PCTGRAPH(0),PCTLINE\nUCBBUSY  CLI   DSPSW,C' '          DEVICE DISPLAY\n         BE    RETURN              NO\n         LA    R6,UCBTAB-22\n         MVC   CURRUNIT(3),=X'FFFFFF'\n         XC    CURRCNT(4),CURRCNT\n         SPACE 1\nUCBBUSY1 LA    R6,22(0,R6)\n         MVC   WTOLIST+4(80),DEVOVLY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BE    UCBBUSY1            YES\n         CLI   0(R6),X'FF'         END OF UCB TABLE\n         BE    UCBBUSY3            YES\n         CLC   CURRUNIT(2),0(R6)   CURRENT UNIT CHECK\n         BL    UCBBUSY1            CURRENT LOW, CONTINUE\n         BH    UCBBUSY2            CURRENT HIGH, REPLACE\n         SR    R14,R14\n         IC    R14,CURRUNIT+2\n         SR    R15,R15\n         IC    R15,2(0,R6)\n         SLL   R14,28\n         SRL   R14,28\n         SLL   R15,28\n         SRL   R15,28\n         TM    CURRUNIT+2,X'F0'    NUMERIC\n         BO    *+8                 NO\n         LA    R14,9(0,R14)\n         TM    2(R6),X'F0'         NUMERIC\n         BO    *+8                 NO\n         LA    R15,9(0,R15)\n         CR    R14,R15             CURRENT UNIT CHECK\n         BL    UCBBUSY1            CURRENT LOW, CONTINUE\n         BH    UCBBUSY2            CURRENT HIGH, REPLACE\n         LH    R1,CURRCNT\n         AH    R1,18(0,R6)\n         STH   R1,CURRCNT\n         LH    R1,CURRCNT+2\n         AH    R1,20(0,R6)\n         STH   R1,CURRCNT+2\n         B     UCBBUSY1\n         SPACE 1\nUCBBUSY2 MVC   CURRUNIT(3),0(R6)\n         MVC   CURRVOL(6),4(R6)\n         MVC   CURRCNT(4),18(R6)\n         B     UCBBUSY1\n         SPACE 1\nUCBBUSY3 CLC   CURRUNIT(3),=X'FFFFFF'   END OF LIST\n         BE    RETURN\n         MVC   DEVSTRT(3),CURRUNIT UNIT ADDR\n         MVI   DEVSTRT+3,C' '\n         MVC   DEVSTRT+4(6),CURRVOL VOLSER\n         SR    R14,R14\n         LH    R15,CURRCNT         UCB BUSY COUNT\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         LR    R1,R15\n         MVC   BUSY(4),=X'40202120'\n         ED    BUSY(4),DOUBLE+6\n         SR    R14,R14\n         LH    R15,CURRCNT+2       UCB BUSY COUNT THIS CHANNEL\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         MVC   BUSY+4(4),=X'40202120'\n         ED    BUSY+4(4),DOUBLE+6\n         MVI   BUSY+4,C'%'\n         LR    R15,R1\n         SRL   R15,1\n         CH    R15,=H'50'\n         BNH   *+8\n         LH    R15,=H'50'\n         EX    R15,PCTMVE\n         LA    R15,PCTGRAPH(R15)\n         MVI   0(R15),C'>'\n         LA    R1,WTOLIST\n         BAL   R11,MSGRTN\n         LA    R6,UCBTAB-22\n         SPACE 1\nUCBBUSY4 LA    R6,22(0,R6)\n         MVC   WTOLIST+4(80),DEVOVLY\n         CLI   0(R6),X'00'         EMPTY SLOT\n         BE    UCBBUSY4            YES\n         CLI   0(R6),X'FF'         END OF UCB TABLE\n         BE    UCBBUSY             YES\n         CLC   CURRUNIT(3),0(R6)   CURRENT UNIT CHECK\n         BNE   UCBBUSY4            NO MATCH\n         CLI   DSPSW,C'J'          JOB DISPLAY\n         BNE   UCBBUSY5            NO\n         MVC   DEVSTRT+3(8),10(R6)   JOBNAME\n         MVC   DEVSTRT(3),=C'-- '\n         MVC   DEVSTRT+11(4),=CL4' '\n         SR    R14,R14\n         LH    R15,18(0,R6)        UCB BUSY COUNT\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         MVC   BUSY(4),=X'40202120'\n         ED    BUSY(4),DOUBLE+6\n         SR    R14,R14\n         LH    R15,20(0,R6)        UCB BUSY COUNT THIS CHANNEL\n         M     R14,=F'100'\n         DR    R14,R5              PERCENT BUSY\n         CVD   R15,DOUBLE\n         MVC   BUSY+4(4),=X'40202120'\n         ED    BUSY+4(4),DOUBLE+6\n         MVI   BUSY+4,C'%'\n         LA    R1,WTOLIST\n         BAL   R11,MSGRTN\n         MVI   0(R6),X'00'         CLEAR ENTRY\n         B     UCBBUSY4\n         SPACE 1\nUCBBUSY5 MVI   0(R6),X'00'         CLEAR ENTRY\n         B     UCBBUSY\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\nTSTTSSVC SVC   35                  ISSUE WTO\n         BR    R11\n         SPACE 3\nRETURN   ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R4,SAVRET           RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         CLC   TSTTSSVC(2),=X'0A23'  TSO EXECUTION\n         BE    EXIT                  NO\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 1\nEXIT     SR    R15,R15\n         LR    R14,R4\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEEZC03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\n         B     MSGRTN\n         LTORG\n         DS    0D\nINTERVL  DC    CL8'00000020'\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nOVERLAY  DC    CL80'CHANNEL XX BUSY     NNN%'\nDEVOVLY  DC    CL80'UUU VVVVVV BUSY NNN/NNN%'\n         SPACE 3\nPCTLINE  DC    CL51'0====1====2====3====4====5====6====7====8====9===='\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nSAVEREGS DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nDSPSW    DS    C\nCHANNEL  DS    C\nCHANTEST DS    C\nCURRUNIT DS    CL3\nCURRVOL  DS    CL6\nCURRCNT  DS    F\nTEMPLINE DS    CL84\nESTAELST DS    0F,(ESTAEOVX)X AXC-CBT\n         SPACE 3\nUCBDMSAV DS    4F\nUCBDMLOW DS    F\nUCBDMCUR DS    F\n         SPACE 5\n         DS    0F\nWTOLIST  DS    F\nDEVSTRT  DS    CL8\nCHAN     DS    CL2\n         DS    CL5\nBUSY     DS    CL8\n         DS    CL2\nPCTGRAPH DS    CL51\n         DS    CL4\n         SPACE 3\n         DS    0F\nCHNTAB   DS    16F\nUCBTAB   DS    500CL22\n         SPACE 3\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nCHAN1    EQU   256\nCHAN2    EQU   512\nCHAN3    EQU   768\nCHAN4    EQU   1024\nCHAN5    EQU   1280\nCHAN6    EQU   1536\nCHAN7    EQU   1792\nCHAN8    EQU   2048\nCHAN9    EQU   2304\nCHAN10   EQU   2560\nCHAN11   EQU   2816\nCHAN12   EQU   3072\nCHAN13   EQU   3328\nCHAN14   EQU   3584\nCHAN15   EQU   3840\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCZJ03D\n         TITLE 'IEEZJ03D -   ##J  JOB MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEEZJ03D -       ##J  JOB MONITOR                         ***\n***                                                                 ***\n***       VERSION -        2.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/XA 2.1.1                             ***\n***                                                                 ***\n***       UPDATED -        09/01/79                                 ***\n***                        08/10/81  JCC-BCB TEST FOR END OF ASCBS  ***\n***                        05/15/83  JAL-SNET INCREASE JOBTABLE TO  ***\n***                                      HOLD 300 ASIDS             ***\n***                        02/07/84  JAL-ADD 31-BIT CODING FOR XA   ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEEZJ03D CSECT\nIEEZJ03D AMODE 24\nIEEZJ03D RMODE 24\n         SPLEVEL SET=2\n         LR    R12,R15\n         USING IEEZJ03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                   -JAL/XA-\n         BSM   0,R9                                         -JAL/XA-\nAMODE31  DC    A(CONT31+X'80000000')                        -JAL/XA-\nCONT31   DS    0H                                           -JAL/XA-\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         MVI   TSOSW,C' '\n         L     R1,XAT              LOAD WAITTIME ADDR\n         L     R15,8(0,R1)         LOAD HEX WAITTIME\n         LTR   R15,R15             TIME NOT SPECIFIED\n         BNZ   *+10                NO\n         MVC   0(8,R1),=CL8'00003000'   30 SECONDS DEFAULT\n         L     R3,XAL              PARM LIST ADDR\n         LA    R3,0(0,R3)\n         LTR   R3,R3               ANY PARM\n         BZ    PARM2               NO\n         MVC   TSOSW(2),0(R3)      SAVE PARM\n         CLI   TSOSW,C'T'          TSO DISPLAY\n         BE    PARM2               YES, CONTINUE\n         CLI   TSOSW,C'J'          JOB DISPLAY\n         BE    PARM1               YES, CONTINUE\n         MVC   DOUBLE(2),=C'00'\n         MVZ   DOUBLE(2),TSOSW\n         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY\n         BNE   PARM1\n         PACK  DOUBLE(8),TSOSW(2)\n         CVB   R1,DOUBLE\n         STC   R1,DOMAIN           SAVE DOMAIN\n         MVI   TSOSW,C'D'\n         B     PARM2\n         SPACE 1\nPARM1    MVI   TSOSW,C' '\n         SPACE 1\nPARM2    MVC   WTOLIST(4),=X'00400100'\n         MVI   SCANRET,C' '        SET FOUND\n         MVI   SCANTYPE,C'I'       SET IN QUEUE SCAN\nSETINIT  L     R4,16               CVT\n         L     R4,556(0,R4)        ASVT\n         L     R8,516(0,R4)        MAX # ASIDS                   JCC\n         CH    R8,=H'0300'         OVER 300 ASIDS                JAL\n         BH    RETURN               YES, GET OUT                 JAL\n         MH    R8,=H'4'            MULT BY LENGTH                JCC\n         LA    R8,528(R4,R8)       FIND END OF ASID LIST         JCC\n         ST    R8,ASVTEND          STORE THAT ADDR               JCC\n         LA    R4,524(0,R4)        ASCB SLOT ADDR\n         LA    R8,JOBTABLE         ASCB/OUCB INFO STORAGE\n         SPACE 1\nSETINIT1 XC    0(16,R8),0(R8)\n         SPACE 1\nSETINIT2 LA    R4,4(0,R4)          INCR INTO ASVT\n         C     R4,ASVTEND          END OF ASVT                   JCC\n         BNL   SETINIT3            YES, EXIT                     JCC\n         TM    0(R4),X'80'         AVAILABLE SLOT\n         BO    SETINIT2            YES\n         L     R5,0(0,R4)          ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R7,144(0,R5)        OUCB ADDR\n         ST    R5,0(0,R8)          SAVE ENTRY ID\n         SR    R14,R14\n         SR    R15,R15\n         ICM   R15,3,40(R5)        EXCP COUNT\n         A     R15,108(0,R7)       OUCB EXCP COUNT\n         ST    R15,4(0,R8)         SAVE TOTAL EXCPS\n         LM    R14,R15,64(R5)      TCB TIME\n         SRDL  R14,22\n         LR    R1,R15\n         LM    R14,R15,200(R5)     SRB TIME\n         SRDL  R14,22\n         AR    R1,R15\n         ST    R1,8(0,R8)          SAVE TOTAL CPU TIME\n         LA    R8,12(0,R8)         NEXT ENTRY\n         B     SETINIT1\n         SPACE 1\nSETINIT3 L     R3,XAT              LOAD WAITTIME ADDR\n         STIMER WAIT,DINTVL=(R3)\n         LA    R1,HDRI             IN QUEUE HDR\n         BAL   R11,MSGRTN1\nJOBOUT   MVI   JOBMSG,C' '\n         MVC   JOBMSG+1(59),JOBMSG\n         L     R4,16               CVT ADDR\n         L     R4,556(0,R4)        ASVT ADDR\n         L     R5,516(0,R4)        MAX # ASIDS                   JCC\n         MH    R5,=H'4'            MULT BY LENGTH                JCC\n         LA    R5,528(R4,R5)       FIND END OF ASID LIST         JCC\n         ST    R5,ASVTEND          STORE THAT ADDR               JCC\n         LA    R4,524(0,R4)        ASCB SLOT ADDR\n         B     JOBOUT4\n         SPACE 1\nJOBOUT1  L     R5,0(0,R4)          ASCB ADDR\n         LA    R5,0(0,R5)\n         L     R6,56(0,R5)         CSCB ADDR\n         L     R7,144(0,R5)        LOAD OUCB ADDR\n         CLI   SCANTYPE,C'I'       IN QUEUE SCAN\n         BNE   JOBOUT2             NO\n         CLI   41(R7),X'00'        SRC PRESENT\n         BNE   JOBOUT6             YES, GO CHECK DET WAIT\n         CLI   38(R5),X'7F'        LOGICAL SWAP\n         BE    JOBOUT4             YES, OUT\n         B     JOBOUT3             CONTINUE\n         SPACE 1\nJOBOUT2  CLI   38(R5),X'7F'        LOGICAL SWAP\n         BE    JOBOUT3             YES, OUT QUEUE\n         CLI   41(R7),X'00'        SWAP REASON\n         BE    JOBOUT4             NO, IN QUEUE\n         CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT3             NO\n         TM    21(R7),X'01'        MSO DET WAIT BIT ON\n         BZ    JOBOUT4             NO, IGNORE SRC\n         SPACE 1\nJOBOUT3  BAL   R11,ASCBFORM        GO FORMAT ASCB INFO\n         L     R6,144(0,R5)        OUCB ADDR\n         L     R3,60(0,R5)         TSB ADDR\n         L     R5,56(0,R5)         CSCB ADDR\n         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO\n         LA    R1,WTOLIST          MSG AREA\n         BAL   R11,MSGRTN          GO PRINT MSG\n         SPACE 1\nJOBOUT4  LA    R4,4(0,R4)          INCR INTO ASVT\n         C     R4,ASVTEND          END OF ASVT                   JCC\n         BNL   JOBOUT5             YES, RETURN                   JCC\n         TM    0(R4),X'80'         AVAILABLE ENTRY\n         BO    JOBOUT4             YES, CHECK NEXT\n         B     JOBOUT1             GO USE IT\n         SPACE 1\nJOBOUT5  CLI   SCANTYPE,C'O'       OUT QUEUE SCAN\n         BE    RETURN              YES, EXIT\n         MVI   SCANRET,C' '        INIT OUTPUT SWITCH\n         MVI   SCANTYPE,C'O'       SET OUT QUEUE SCAN NEXT\n         LA    R1,HDRO             OUT QUEUE HDR\n         BAL   R11,MSGRTN1\n         B     JOBOUT              NEXT PASS\n         SPACE 1\nJOBOUT6  CLI   41(R7),X'06'        DETECTED WAIT\n         BNE   JOBOUT4             NO\n         TM    21(R7),X'01'        MSO DET WAIT BIT ON\n         BZ    JOBOUT3             NO, IGNORE SRC\n         B     JOBOUT4\nASCBFORM UNPK  DOUBLE(5),36(3,R5)\n         NC    DOUBLE(4),=4X'0F'\n         TR    DOUBLE(4),=C'0123456789ABCDEF'\n         MVC   ASID(4),DOUBLE      SAVE ASID\n         LA    R8,JOBTABLE\n         SPACE 1\nASCBFRM1 CLC   0(4,R8),=F'0'       JOBTABLE END\n         BE    ASCBFRM2            YES\n         C     R5,0(0,R8)          ASCB MATCH\n         BE    ASCBFRM2            YES\n         LA    R8,12(0,R8)         NEXT ENTRY\n         B     ASCBFRM1\n         SPACE 1\nASCBFRM2 MVC   CPUT(10),=XL10'402021204B40404B4040'\n         LM    R14,R15,64(R5)      CPU TIME\n         SRDL  R14,22\n         LR    R9,R15              SAVE CPU TIME\n         LM    R14,R15,200(R5)     SRB TIME\n         SRDL  R14,22\n         AR    R15,R9              CPU PLUS SRB TIME\n         SR    R14,R14\n         D     R14,=F'10'          HUNDREDTHS\n         SR    R14,R14\n         D     R14,=F'100'         SECONDS\n         CVD   R14,DOUBLE          HUNDREDTHS TO PRINT\n         UNPK  CPUT+8(2),DOUBLE+6(2)\n         OI    CPUT+9,X'F0'\n         SR    R14,R14\n         D     R14,=F'60'          MINUTES\n         CVD   R14,DOUBLE          SECONDS TO PRINT\n         UNPK  CPUT+5(2),DOUBLE+6(2)\n         OI    CPUT+6,X'F0'\n         CVD   R15,DOUBLE          MINUTES TO PRINT\n         ED    CPUT(4),DOUBLE+6\n         CLI   CPUT+2,C' '         OVER 9 MINUTES\n         BNE   ASCBFRM4            YES\n         CLC   CPUT+3(3),=C'0.0'\n         BNE   ASCBFRM3\n         MVC   CPUT+3(3),=CL8' '\n         SPACE 1\nASCBFRM3 CLC   CPUT+3(2),=C'0.0'\n         BNE   ASCBFRM4\n         MVC   CPUT+3(2),=CL8' '\n         SPACE 1\nASCBFRM4 CLC   0(4,R8),=F'0'       ANY INTERVAL DATA\n         BE    ASCBFRM6            NO\n         MVC   CPUC(8),=XL8'40404B40404B4040'\n         LM    R14,R15,64(R5)      CPU TIME\n         SRDL  R14,22\n         LR    R9,R15              SAVE CPU TIME\n         LM    R14,R15,200(R5)     SRB TIME\n         SRDL  R14,22\n         AR    R15,R9              CPU PLUS SRB TIME\n         C     R15,8(0,R8)         STEP CHANGE INDICATED\n         BNL   *+14                NO\n         MVC   CPUC+1(7),=CL7'**CHG**'\n         B     ASCBFRM6\n         SR    R14,R14\n         S     R15,8(0,R8)         CALCULATE INTERVAL TIME\n         D     R14,=F'10'          HUNDREDTHS\n         SR    R14,R14\n         D     R14,=F'100'         SECONDS\n         CVD   R14,DOUBLE          HUNDREDTHS TO PRINT\n         UNPK  CPUC+6(2),DOUBLE+6(2)\n         OI    CPUC+7,X'F0'\n         SR    R14,R14\n         D     R14,=F'60'          MINUTES\n         CVD   R14,DOUBLE          SECONDS TO PRINT\n         UNPK  CPUC+3(2),DOUBLE+6(2)\n         OI    CPUC+4,X'F0'\n         CVD   R15,DOUBLE          MINUTES TO PRINT\n         UNPK  CPUC(2),DOUBLE+6(2)\n         OI    CPUC+1,X'F0'\n         MVI   CPUC,X'40'\n         CLC   CPUC+1(3),=C'0.0'\n         BNE   ASCBFRM5\n         MVC   CPUC+1(3),=CL8' '\n         SPACE 1\nASCBFRM5 CLC   CPUC+1(2),=C'0.0'\n         BNE   ASCBFRM6\n         MVC   CPUC+1(2),=CL8' '\n         SPACE 1\nASCBFRM6 SR    R14,R14\n         SR    R15,R15\n         ICM   R15,3,40(R5)        EXCP COUNT\n         A     R15,108(0,R7)       OUCB EXCP COUNT\n         LR    R1,R15              SAVE TOTAL EXCPS\n         MVC   EXCPT(10),=XL10'40206B2020206B202120'\n         CVD   R1,DOUBLE\n         ED    EXCPT(10),DOUBLE+4\n         CLC   0(4,R8),=F'0'       ANY INTERVAL DATA\n         BCR   8,R11               NO\n         C     R1,4(0,R8)          STEP CHANGE INDICATED\n         BNL   *+12                NO\n         MVC   EXCPC+1(5),=CL5'*CHG*'\n         BR    R11\n         S     R1,4(0,R8)          SUB PREV COUNT\n         CVD   R1,DOUBLE\n         MVC   EXCPC(6),=X'402020202120'\n         ED    EXCPC(6),DOUBLE+5\n         BR    R11\nCSCBFORM CLI   TSOSW,C'T'          TSO USER DISPLAY\n         BNE   CSCBFRM0            NO\n         CLI   28(R5),X'01'        TSO USER\n         BNE   JOBOUT4             NO, BYPASS\n         B     CSCBFRM6\n         SPACE 1\nCSCBFRM0 CLI   28(R5),X'01'        TSO USER\n         BE    JOBOUT4             YES, DONT PROCESS\n         CLI   28(R5),X'03'        INIT\n         BNE   CSCBFRM3            NO, GO HANDLE\n         LA    R9,0(0,R5)          SAVE CSCB ADDR\n         SR    R10,R10             INSERT\n         IC    R10,30(0,R5)\n         SLL   R10,8               ASID\n         IC    R10,31(0,R5)\n         SPACE 1\nCSCBFRM1 L     R5,0(0,R5)          NEXT CSCB\n         LA    R5,0(0,R5)          CLEAR HIGH ORDER\n         LTR   R5,R5               END OF CSCBS\n         BNZ   *+10                NO, CONTINUE\n         LR    R5,R9               LOAD CSCB ADDR\n         B     JOBOUT4             NO GOOD\n         CR    R5,R9               SAME CSCB\n         BE    JOBOUT4             YES, NO GOOD\n         CH    R10,30(0,R5)        SAME ASID\n         BNE   CSCBFRM1            NO, CHECK NEXT\n         SPACE 1\nCSCBFRM2 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),64(R5)\n         MVC   PROCNAME(8),32(R5)\n         B     CSCBFRM4\n         SPACE 1\nCSCBFRM3 MVC   JOBNAME(8),16(R5)\n         MVC   STEPNAME(8),8(R5)\n         MVC   PROCNAME(8),32(R5)\n         SPACE 1\nCSCBFRM4 CLI   TSOSW,C'D'          DOMAIN DISPLAY\n         BNE   CSCBFRM5            NO\n         CLC   DOMAIN(1),40(R6)    DOMAIN MATCH\n         BNE   JOBOUT4\n         SPACE 1\nCSCBFRM5 CLC   ASID(4),=C'0001'\n         BCR   7,R11\n         MVC   JOBNAME(26),=CL26'MASTER'\n         BR    R11\n         SPACE 1\nCSCBFRM6 MVC   JOBNAME(8),8(R5)\n         MVC   STEPNAME(8),16(R5)\n         MVC   PROCNAME(8),=CL8' '\n         CLC   TSOSVTST(2),=X'0A23'  SVC 35 REPLACED\n         BNE   CSCBFRM5              YES, BYPASS 0C4\n         UNPK  PROCNAME(5),82(3,R3)  LINE NUMBER\n         NC    PROCNAME(4),=8X'0F'\n         TR    PROCNAME(4),=C'0123456789ABCDEF'\n         MVC   PROCNAME+4(4),=CL4' '\n         B     CSCBFRM5\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEEZJ03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\nMSGRTN   MVI   SCANRET,C'P'\n         SPACE 1\nMSGRTN1  SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\nTSOSVTST SVC   35                  ISSUE WTO\n         BR    R11\n         SPACE 3\nRETURN   CLI   SCANRET,C' '        ANY FOUND\n         BE    NOTFOUND            NO, TELL OPERATOR\n         ESTAE 0\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R8,AMODE24                                  -JAL/XA-\n         BSM   0,R8                                        -JAL/XA-\nAMODE24  DS    0H                                          -JAL/XA-\n         SR    R15,R15\n         BR    R14\n         SPACE 3\nNOTFOUND LA    R11,RETURN\n         LA    R1,NFNDMSG\n         B     MSGRTN\n         LTORG\n         SPACE 3\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\n         SPACE 1\n         DS    0F\nNFNDMSG  DC    X'00360100'\n         DC    CL50'NO JOBS ON OUT QUEUE'\n         SPACE 1\nHDRI     DC    X'00440100'\n         DC    CL26'****   IN  QUEUE   ****'\n         DC    CL38' EXCPC    EXCPT    CPUC     CPUT'\n         SPACE 1\nHDRO     DC    X'00440100'\n         DC    CL26'****   OUT  QUEUE   ****'\n         DC    CL38' EXCPC    EXCPT    CPUC     CPUT'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nASID     DS    F\nASVTEND  DS    F                                                 JCC\nSCANRET  DS    C\nSCANTYPE DS    C\nTSOSW    DS    C\nDOMAIN   DS    C\n         SPACE 5\n         DS    0F\nWTOLIST  DS    F\nJOBMSG   DS    0CL60\nJOBNAME  DS    CL9\nSTEPNAME DS    CL9\nPROCNAME DS    CL8\nEXCPC    DS    CL6\nEXCPT    DS    CL10\nCPUC     DS    CL8\nCPUT     DS    CL10\n         SPACE 3\nJOBTABLE DS    900F\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCZP03D\n         TITLE 'IEEZP03D -   ##P  PAGING MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       IEEZP03D -       ##P  PAGING MONITOR                      ***\n***                                                                 ***\n***       VERSION -        1.2                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/ESA 3.1.3                            ***\n***                                                                 ***\n***       UPDATED -        09/01/79                                 ***\n***                        01/26/83  AXC-CBT CHANGE ESTAE PARM LEN  ***\n***                        08/19/91  JCL-TEC UPDATES FOR ESA        ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n*-------------------------------------------------------------*    @TEC\n* UPDATE FOR ESA. PAGINGS STATS ARE NO LONGER KEPT IN THE     *    @TEC\n* PVT. THEY HAVE BEEN MOVED ABOVE THE LINE TO A CONTROL BLOCK *    @TEC\n* CALLED THE RCE.                                             *    @TEC\n*-------------------------------------------------------------*    @TEC\nIEEZP03D CSECT\n         LR    R12,R15\n         USING IEEZP03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                     -JAL/XA-\n         BSM   0,R9                                           -JAL/XA-\nAMODE31  DC    A(CONT31+X'80000000')                          -JAL/XA-\nCONT31   DS    0H                                             -JAL/XA-\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         XC    VIOWRK(16),VIOWRK   ZERO WORK FIELDS                @TEC\n         MVC   WTOLIST(4),=X'002C0100'\n         L     R1,XAT              WAITTIME ADDR\n         L     R15,8(0,R1)         LOAD HEX TIME\n         LTR   R15,R15             TIME NOT SPECIFIED\n         BNZ   SETINIT             NO\n         MVC   0(8,R1),=CL8'00003000'  30 SECONDS DEFAULT\n         MVC   8(4,R1),=F'30'          30 SECONDS DEFAULT\nSETINIT  L     R4,16               CVT\n         L     R4,1168(0,R4)       RCE                             @TEC\n         L     R1,84(0,R4)         RCEVIOPI                        @TEC\n         A     R1,100(0,R4)        RCEVIOPO                        @TEC\n         ST    R1,VIOWRK           SAVE VIO PAGING COUNT           @TEC\n         L     R1,80(0,R4)         RCESWPPI                        @TEC\n         A     R1,96(0,R4)         RCESWPPO                        @TEC\n         ST    R1,SWAPWRK          SAVE SWAP PAGING COUNT          @TEC\n         L     R1,72(0,R4)         RCECOMPI                        @TEC\n         A     R1,76(0,R4)         RCELPAPI                        @TEC\n         A     R1,92(0,R4)         RCECOMPO                        @TEC\n         ST    R1,COMNWRK          SAVE COMMON AREA PAGING         @TEC\n         L     R1,68(0,R4)         RCETOTPI                        @TEC\n         A     R1,88(0,R4)         RCETOTPO                        @TEC\n         S     R1,72(0,R4)         RCECOMPI                        @TEC\n         S     R1,76(0,R4)         RCELPAPI                        @TEC\n         S     R1,92(0,R4)         RCECOMPO                        @TEC\n         ST    R1,ASPCWRK          SAVE ADDRESS SPACE PAGING       @TEC\n         L     R6,XAT\n         L     R6,8(0,R6)          HEX NO. OF SECS\n         L     R3,XAT              WAITTIME ADDR\n         STIMER WAIT,DINTVL=(R3)\nPAGOUT   MVI   PAGMSG,C' '\n         MVC   PAGMSG+1(39),PAGMSG\n         MVC   PSEC(10),=CL10'PAGES/SEC'\n         L     R4,16               CVT ADDR\n         L     R4,1168(0,R4)       RCE                             @TEC\n         SR    R7,R7\n         L     R1,84(0,R4)         RCEVIOPI                        @TEC\n         A     R1,100(0,R4)        RCEVIOPO                        @TEC\n         S     R1,VIOWRK           MINUS PRIOR VIO COUNT           @TEC\n         LTR   R1,R1               OVERFLOW\n         BNP   *+6                 NO\n         AR    R7,R1               ACCUMULATE TOTAL PAGING\n         MVC   PAGNAME(16),=CL16'VIO PAGING'\n         BAL   R11,PAGFORM\n         L     R1,80(0,R4)         RCESWPPI                        @TEC\n         A     R1,96(0,R4)         RCESWPPO                        @TEC\n         S     R1,SWAPWRK          MINUS PRIOR SWAP COUNT          @TEC\n         LTR   R1,R1               OVERFLOW\n         BNP   *+6                 NO\n         AR    R7,R1               ACCUMULATE TOTAL PAGING\n         MVC   PAGNAME(16),=CL16'SWAP PAGING'\n         BAL   R11,PAGFORM\n         L     R1,72(0,R4)         RCECOMPI                        @TEC\n         A     R1,76(0,R4)         RCELPAPI                        @TEC\n         A     R1,92(0,R4)         RCECOMPO                        @TEC\n         S     R1,COMNWRK          MINUS PRIOR COMMON AREA         @TEC\n         LTR   R1,R1               OVERFLOW\n         BNP   *+6                 NO\n         AR    R7,R1               ACCUMULATE TOTAL PAGING\n         MVC   PAGNAME(16),=CL16'COMMON PAGING'\n         BAL   R11,PAGFORM\n         L     R1,68(0,R4)         RCETOTPI                        @TEC\n         A     R1,88(0,R4)         RCETOTPO                        @TEC\n         S     R1,72(0,R4)         RCECOMPI                        @TEC\n         S     R1,76(0,R4)         RCELPAPI                        @TEC\n         S     R1,92(0,R4)         RCECOMPO                        @TEC\n         S     R1,ASPCWRK          MINUS PRIOR AS PAGING           @TEC\n         LTR   R1,R1               OVERFLOW\n         BNP   *+6                 NO\n         AR    R7,R1               ACCUMULATE TOTAL PAGING\n         MVC   PAGNAME(16),=CL16'ADDRSPC PAGING'\n         BAL   R11,PAGFORM\n         LR    R1,R7               TOTAL PAGES/INTERVAL\n         MVC   PAGNAME(16),=CL16'TOTAL PAGING'\n         BAL   R11,PAGFORM\n         B     RETURN\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEEZP03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\n         B     MSGRTN\nPAGFORM  LTR   R1,R1               PAGE COUNT OVERFLOW\n         BM    PAGFORM1            YES\n         L     R15,XAT\n         SR    R14,R14\n         LR    R15,R1\n         M     R14,=F'100'         SET UP HUNDREDTHS\n         DR    R14,R6              FIND PAGING RATE\n         MVC   PAGSEC(7),=XL7'402020214B2020'\n         CVD   R15,DOUBLE          PAGES\n         ED    PAGSEC(7),DOUBLE+5\n         B     PAGFORM2\n         SPACE 1\nPAGFORM1 MVC   PAGSEC(7),=CL7'*OVER*'\n         SPACE 1\nPAGFORM2 LA    R1,WTOLIST\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         BR    R11\n         SPACE 3\nRETURN   ESTAE 0\n         LA    R8,AMODE24                                  -JAL/XA-\n         BSM   0,R8                                        -JAL/XA-\nAMODE24  DS    0H                                          -JAL/XA-\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         LTORG\n         DS    0D\nWAITTIME DC    CL8'00003000'\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\n         SPACE 5\n         DS    0F\nWTOLIST  DS    F\nPAGMSG   DS    0CL40\nPAGNAME  DS    CL16\n         DS    CL4\nPAGSEC   DS    CL7\n         DS    CL3\nPSEC     DS    CL10\n         SPACE 3\nVIOWRK   DS    F                  VIO PAGE WORK FIELD              @TEC\nSWAPWRK  DS    F                  SWAP PAGE WORK FIELD             @TEC\nCOMNWRK  DS    F                  COMN PAGE WORK FIELD             @TEC\nASPCWRK  DS    F                  ASPC PAGE WORK FIELD             @TEC\n         SPACE 3\nESTAELST DS    0F,(ESTAEOVX)X\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=CSCZS03D\n         TITLE 'SP1ZS03D -   ##S  SYSTEM INDICATOR MONITOR'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***                     COMMAND  SUB-SYSTEM                         ***\n***                  -------------------------                      ***\n***                                                                 ***\n***                                                                 ***\n***       SP1ZS03D -       ##S  SYSTEM INDICATOR MONITOR            ***\n***                                                                 ***\n***       VERSION -        1.0                                      ***\n***                                                                 ***\n***       MVS LEVEL -      MVS/SP RELEASE 1                         ***\n***                                                                 ***\n***       UPDATED -        06/15/81                                 ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\nIEEZS03D CSECT\n         LR    R12,R15\n         USING IEEZS03D,R12\n         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL\n         GETMAIN R,LV=(0)\n         LR    R13,R1\n         USING WORK,R13\n         ST    R14,SAVRET          SAVE RETURN ADDR\n         ST    R2,XSASAVE          SAVE XSA ADDR\n         USING XSA,R2\n         L     R3,XAL\n         LA    R3,0(0,R3)\n         XC    PARM(3),PARM\n         LTR   R3,R3\n         BZ    *+10                NO PARM\n         MVC   PARM(3),0(R3)       SAVE UNIT NAME SCAN\n         LR    R10,R13             LOAD SAVE AREA ADDR\n         L     R9,AMODE31                                     -JAL/XA-\n         BSM   0,R9                                           -JAL/XA-\nAMODE31  DC    A(CONT31+X'80000000')                          -JAL/XA-\nCONT31   DS    0H                                             -JAL/XA-\n         B     ESTAEBYP            BYPASS ESTAE LIST\nESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*\nESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*\nESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*\n         LA    R1,ESTAELST\n         ESTAE PARAM=(10),MF=(E,(1))\n         LA    R5,20\n         LA    R6,DMNTAB\n         USING DMNTAB,R6\n         ST    R6,DMNTABAD\n         L     R1,=X'7FFFFFFF'     FORCE INITIAL MIN FILL\n         SPACE 1\nDMNCLR   XC    0(128,R6),0(R6)     CLEAR AN ENTRY\n         ST    R1,DMINTGT\n         ST    R1,DMINMPL\n         ST    R1,DMINRDY\n         ST    R1,DMINGOO\n         ST    R1,DMINOUT\n         ST    R1,DMININC\n         ST    R1,DMINWSR\n         LA    R6,128(0,R6)        NEXT ENTRY\n         BCT   R5,DMNCLR           CLEAR WHOLE DMNTAB\n         XC    SYSTAB(100),SYSTAB\n         ST    R1,MINMLGCP\n         ST    R1,MINMAVCP\n         ST    R1,MINMAVPG\n         ST    R1,MINMUICA\n         ST    R1,MINMASMQ\n         L     R1,XAT              WAITTIME ADDR\n         L     R15,8(0,R1)         LOAD HEX TIME\n         LTR   R15,R15             TIME NOT SPECIFIED\n         BNZ   BYPASS              NO\n         MVC   0(8,R1),=CL8'00003000'  30 SECONDS DEFAULT\n         MVC   8(4,R1),=F'30'          30 SECONDS DEFAULT\n         SPACE 1\nBYPASS   L     R3,8(0,R1)          LOAD MONITOR TIME\n         LR    R5,R3\nSYSCHK   STIMER WAIT,DINTVL=INTERVL\n         SPACE 1\n         L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         L     R1,4(0,R4)          CCT                             @TEC\n         LH    R1,104(0,R1)        LONG TERM CPU UTIL              @TEC\n         SRL   R1,8                SCALED BY 256?                  @TEC\n         ST    R1,CURRLGCP\n         C     R1,MINMLGCP\n         BNL   *+8\n         ST    R1,MINMLGCP\n         C     R1,MAXMLGCP\n         BNH   *+8\n         ST    R1,MAXMLGCP\n         A     R1,ACUMLGCP\n         ST    R1,ACUMLGCP\n         L     R1,4(0,R4)          CCT                             @TEC\n         LH    R1,102(0,R1)        AVERAGE CPU                     @TEC\n         ST    R1,CURRAVCP\n         C     R1,MINMAVCP\n         BNL   *+8\n         ST    R1,MINMAVCP\n         C     R1,MAXMAVCP\n         BNH   *+8\n         ST    R1,MAXMAVCP\n         A     R1,ACUMAVCP\n         ST    R1,ACUMAVCP\n         L     R1,228(0,R4)        RCT                             @TEC\n         LH    R1,64(0,R1)         AVERAGE PAGING                  @TEC\n         ST    R1,CURRAVPG\n         C     R1,MINMAVPG\n         BNL   *+8\n         ST    R1,MINMAVPG\n         C     R1,MAXMAVPG\n         BNH   *+8\n         ST    R1,MAXMAVPG\n         A     R1,ACUMAVPG\n         ST    R1,ACUMAVPG\n         L     R1,228(0,R4)        RCT                             @TEC\n         LH    R1,54(0,R1)         AVERAGE UIC                     @TEC\n         ST    R1,CURRUICA\n         C     R1,MINMUICA\n         BNL   *+8\n         ST    R1,MINMUICA\n         C     R1,MAXMUICA\n         BNH   *+8\n         ST    R1,MAXMUICA\n         A     R1,ACUMUICA\n         ST    R1,ACUMUICA\n         LH    R1,878(0,R4)        AVERAGE ASMQ             AXC-SP1\n         ST    R1,CURRASMQ\n         C     R1,MINMASMQ\n         BNL   *+8\n         ST    R1,MINMASMQ\n         C     R1,MAXMASMQ\n         BNH   *+8\n         ST    R1,MAXMASMQ\n         A     R1,ACUMASMQ\n         ST    R1,ACUMASMQ\n         CLI   PARM,C'D'           DOMAIN MONITOR\n         BE    DOMAIN              YES\nSYSCHK0  BCT   R3,SYSCHK\n         SR    R14,R14\n         L     R15,ACUMAVCP\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,AVRGAVCP\n         SR    R14,R14\n         L     R15,ACUMLGCP\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,AVRGLGCP\n         SR    R14,R14\n         L     R15,ACUMAVPG\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,AVRGAVPG\n         SR    R14,R14\n         L     R15,ACUMUICA\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,AVRGUICA\n         SR    R14,R14\n         L     R15,ACUMASMQ\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,AVRGASMQ\n         B     SYSCHK1\nSYSCHK1  LA    R10,SYSTAB\n         LA    R9,SYSOTAB\n         MVC   WTOLIST(4),=X'00360100'\n         LA    R3,5                NO. OF OUTPUT LINES\n         SPACE 1\nSYSCHK2  MVC   WTOLIST+4(50),0(R9)\n         L     R1,8(0,R10)         MIN\n         CVD   R1,DOUBLE\n         MVC   MIN(4),=X'40202120'\n         ED    MIN(4),DOUBLE+6\n         L     R1,12(0,R10)        MAX\n         CVD   R1,DOUBLE\n         MVC   MAX(4),=X'40202120'\n         ED    MAX(4),DOUBLE+6\n         L     R1,16(0,R10)        AVG\n         CVD   R1,DOUBLE\n         MVC   AVG(4),=X'40202120'\n         ED    AVG(4),DOUBLE+6\n         LA    R1,WTOLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         LA    R9,50(0,R9)\n         LA    R10,20(0,R10)\n         BCT   R3,SYSCHK2\n         CLI   PARM,C'D'           DOMAIN MONITOR\n         BE    DOMAIN4             YES\n         B     RETURN\nDOMAIN   L     R4,16               CVT\n         L     R4,604(0,R4)        RMCT\n         LH    R9,188(0,R4)        NO. OF DOMAINS\n         BCTR  R9,0\n         L     R4,180(0,R4)        DMDT\n         LA    R7,20\n         L     R6,DMNTABAD\n         SPACE 1\nDOMAIN1  LA    R4,64(0,R4)         NEXT DOMAIN                     @TEC\n         CLC   6(4,R4),=F'0'       EMPTY DOMAIN\n         BNE   DOMAIN3             NO\n         CLC   12(4,R4),=F'0'      EMPTY DOMAIN\n         BNE   DOMAIN3             NO\n         BCT   R9,DOMAIN1          NEXT DOMAIN\n         B     SYSCHK0\n         SPACE 1\nDOMAIN2  LA    R6,128(0,R6)\n         BCT   R7,DOMAIN3\n         B     SYSCHK0\n         SPACE 1\nDOMAIN3  SR    R1,R1\n         IC    R1,0(0,R4)          DOMAIN NO.\n         C     R1,DMNNBR           DOMAIN MATCH\n         BE    DOMAIN3A            YES\n         CLI   DMNNBR+3,X'00'      EMPTY SLOT\n         BNE   DOMAIN2             NO\n         ST    R1,DMNNBR\n         IC    R1,1(0,R4)          MIN TARGET\n         ST    R1,DMNMIN\n         IC    R1,2(0,R4)          MAX TARGET\n         ST    R1,DMNMAX\n         IC    R1,3(0,R4)          WT\n         ST    R1,DMNWT\nDOMAIN3A LH    R1,4(0,R4)          TARGET\n         C     R1,DMINTGT\n         BNL   *+8\n         ST    R1,DMINTGT\n         C     R1,DMAXTGT\n         BNH   *+8\n         ST    R1,DMAXTGT\n         A     R1,DACCTGT\n         ST    R1,DACCTGT\n         LH    R1,6(0,R4)          READY USERS\n         LA    R1,8(0,R1)          ROUND UP\n         SRL   R1,4                DIVIDE BY 16\n         C     R1,DMINRDY\n         BNL   *+8\n         ST    R1,DMINRDY\n         C     R1,DMAXRDY\n         BNH   *+8\n         ST    R1,DMAXRDY\n         A     R1,DACCRDY\n         ST    R1,DACCRDY\n         LH    R1,8(0,R4)          GOING OUT USERS\n         C     R1,DMINGOO\n         BNL   *+8\n         ST    R1,DMINGOO\n         C     R1,DMAXGOO\n         BNH   *+8\n         ST    R1,DMAXGOO\n         A     R1,DACCGOO\n         ST    R1,DACCGOO\n         LH    R1,10(0,R4)         CURRENT MPL\n         C     R1,DMINMPL\n         BNL   *+8\n         ST    R1,DMINMPL\n         C     R1,DMAXMPL\n         BNH   *+8\n         ST    R1,DMAXMPL\n         A     R1,DACCMPL\n         ST    R1,DACCMPL\n         LH    R1,12(0,R4)         OUT USERS\n         C     R1,DMINOUT\n         BNL   *+8\n         ST    R1,DMINOUT\n         C     R1,DMAXOUT\n         BNH   *+8\n         ST    R1,DMAXOUT\n         A     R1,DACCOUT\n         ST    R1,DACCOUT\n         LH    R1,14(0,R4)         IN USERS\n         C     R1,DMININC\n         BNL   *+8\n         ST    R1,DMININC\n         C     R1,DMAXINC\n         BNH   *+8\n         ST    R1,DMAXINC\n         A     R1,DACCINC\n         ST    R1,DACCINC\n         L     R1,24(0,R4)         IN USERS\n         C     R1,DMINWSR\n         BNL   *+8\n         ST    R1,DMINWSR\n         C     R1,DMAXWSR\n         BNH   *+8\n         ST    R1,DMAXWSR\n         A     R1,DACCWSR\n         ST    R1,DACCWSR\n         BCTR  R9,0\n         LA    R6,128(0,R6)        NEXT DOMAIN AREA\n         BCT   R7,DOMAIN1\n         B     SYSCHK0\nDOMAIN4  L     R6,DMNTABAD         DOMAIN TABLE\n         SPACE 1\nDOMAIN4A CLI   DMNNBR+3,X'00'      END OF TABLE\n         BE    DOMAIN5             YES\n         SR    R14,R14\n         L     R15,DACCTGT\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGTGT\n         SR    R14,R14\n         L     R15,DACCMPL\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGMPL\n         SR    R14,R14\n         L     R15,DACCRDY\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGRDY\n         SR    R14,R14\n         L     R15,DACCGOO\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGGOO\n         SR    R14,R14\n         L     R15,DACCOUT\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGOUT\n         SR    R14,R14\n         L     R15,DACCINC\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGINC\n         SR    R14,R14\n         L     R15,DACCWSR\n         DR    R14,R5              AVERAGE CALCULATION\n         ST    R15,DAVGWSR\n         LA    R6,128(0,R6)\n         B     DOMAIN4A\n         SPACE 1\nDOMAIN5  L     R6,DMNTABAD         DOMAIN TABLE\n         LA    R5,20\n         LA    R1,DMNHDR1\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         LA    R1,DMNHDR2\n         SR    R0,R0\n         IC    R0,XAU\n         SVC   35\n         MVC   DMNLIST(4),=X'00360100'\n         MVI   DMNLIST+4,C' '\n         MVC   DMNLIST+5(49),DMNLIST+4\n         SPACE 1\nDOMAIN6  MVC   LTYP(3),=C'AVG'\n         L     R1,DMNNBR\n         CVD   R1,DOUBLE\n         UNPK  LDMN(2),DOUBLE+6(2)\n         OI    LDMN+1,X'F0'\n         SPACE 1\nDOMAIN7  L     R1,DMNWT\n         LA    R8,DAVGTGT          AVG VALUES\n         CLI   LTYP+2,C'G'         AVG LINE\n         BE    DOMAIN8             YES\n         L     R1,DMNMIN\n         LA    R8,DMINTGT          MIN VALUES\n         MVC   LDMN(2),=C'  '\n         CLI   LTYP+2,C'N'         MIN LINE\n         BE    DOMAIN8             YES\n         L     R1,DMNMAX\n         LA    R8,DMAXTGT          MAX VALUES\nDOMAIN8  MVC   LLIM-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LLIM-1(4),DOUBLE+6\n         L     R1,0(0,R8)\n         MVC   LTGT-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LTGT-1(4),DOUBLE+6\n         L     R1,4(0,R8)\n         MVC   LMPL-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LMPL-1(4),DOUBLE+6\n         L     R1,8(0,R8)\n         MVC   LRDY-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LRDY-1(4),DOUBLE+6\n         L     R1,12(0,R8)\n         MVC   LGOO-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LGOO-1(4),DOUBLE+6\n         L     R1,16(0,R8)\n         MVC   LOUT-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LOUT-1(4),DOUBLE+6\n         L     R1,20(0,R8)\n         MVC   LINC-1(4),=X'40202120'\n         CVD   R1,DOUBLE\n         ED    LINC-1(4),DOUBLE+6\n         L     R1,24(0,R8)\n         MVC   LWSR-1(6),=X'402020202120'\n         CVD   R1,DOUBLE\n         ED    LWSR-1(6),DOUBLE+5\n         CLI   PARM+1,C'A'         AVG LINE DISPLAY ONLY\n         BNE   DOMAIN8A            NO\n         CLI   LTYP,C'A'           IS THIS AVG LINE\n         BNE   DOMAIN8B            NO, BYPASS PRINT\n         SPACE 1\nDOMAIN8A LA    R1,DMNLIST\n         SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         SPACE 1\nDOMAIN8B CLI   LTYP+2,C'G'         AVG LINE\n         BNE   *+14                NO\n         MVC   LTYP(3),=C'MIN'\n         B     DOMAIN7\n         CLI   LTYP+2,C'N'         MIN LINE\n         BNE   DOMAIN9             NO\n         MVC   LTYP(3),=C'MAX'\n         B     DOMAIN7\n         SPACE 1\nDOMAIN9  LA    R6,128(0,R6)\n         CLI   DMNNBR+3,X'00'      END OF OUTPUT\n         BE    RETURN              YES\n         BCT   R5,DOMAIN6\n         B     RETURN\nMSGRTN   SR    R0,R0\n         IC    R0,XAU              INSERT MCS ID\n         SVC   35                  ISSUE WTO\n         BR    R11\n         SPACE 3\nRETURN   ESTAE 0\n         LA    R8,AMODE24                                  -JAL/XA-\n         BSM   0,R8                                        -JAL/XA-\nAMODE24  DS    0H                                          -JAL/XA-\n         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL\n         LR    R1,R13              LOAD GETMAIN AREA ADDR\n         L     R14,SAVRET          RETURN ADDR\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R15,R15\n         BR    R14\n         USING *,R15\nSTAEXIT  CH    R0,=H'12'           SDWA GOTTEN\n         BE    STAEXIT1            NO, FORCE RETURN\n************************************************************** GLA-BFG\n*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG\n*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG\n************************************************************** GLA-BFG\n         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG\n         LR    R14,R13             SAVE ORIG R13               GLA-BFG\n         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG\n         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG\n         LR    R13,R14             RESTORE R13                 GLA-BFG\n         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG\n         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG\n         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG\n*                                  AND EBCDIC                  GLA-BFG\n         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG\n         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG\n         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG\n         B     ESTNOP              SKIP CONSTANTS              GLA-BFG\n         ESTMODS ,                                             GLA-BFG\nESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG\nESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG\n         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG\n         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X\n               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG\n         SPACE 3\nSTAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR\n         LA    R15,4\n         BR    R14\n         DROP  R15\n         SPACE 3\n         USING *,R15\nSTAERTRY L     R12,=A(IEEZS03D)    LOAD ENTRY POINT ADDR\n         LR    R13,R1              RELOAD WORK AREA ADDR\n         DROP  R15\n         LA    R1,STAEMSG          ADDRESSING ERROR\n         L     R2,XSASAVE          RELOAD XSA ADDR\n         LA    R11,RETURN          LOAD RET ADDR\n         B     MSGRTN\n         LTORG\n         DS    0D\nINTERVL  DC    CL8'00000100'\n         DS    0F\nSIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)\n         SPACE 3\nDMNHDR1  DC    X'00300100'\n         DC    CL44' '\n         SPACE 3\nDMNHDR2  DC    X'00360100'\n         DC    CL50'DMN  TYP  LIM  TGT  MPL  RDY  GOO  OUT  INC   WSR'\n         SPACE 3\nSYSOTAB  DS    0F\nAVCPOVLY DC    CL50'AVERAGE CPU       MIN- NNN    MAX- NNN    AVG- NNN'\nLGCPOVLY DC    CL50'LONG TERM CPU     MIN- NNN    MAX- NNN    AVG- NNN'\nAVPGOVLY DC    CL50'AVERAGE PAGING    MIN- NNN    MAX- NNN    AVG- NNN'\nUICAOVLY DC    CL50'AVERAGE UIC       MIN- NNN    MAX- NNN    AVG- NNN'\nASMQOVLY DC    CL50'ASMQ LENGTH       MIN- NNN    MAX- NNN    AVG- NNN'\n         SPACE 3\n         DS    0F\nSTAEMSG  DC    X'00360100'\n         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'\nWORK     DSECT\nWORKSTRT DS    0D\nSAVRET   DS    18F\nDOUBLE   DS    2F\nXSASAVE  DS    F\nDMNTABAD DS    F\nPARM     DS    F\nESTAELST DS    0F,(ESTAEOVX)X\n         DS    0F\nSYSTAB   DS    0CL100\nCURRAVCP DS    F\nACUMAVCP DS    F\nMINMAVCP DS    F\nMAXMAVCP DS    F\nAVRGAVCP DS    F\nCURRLGCP DS    F\nACUMLGCP DS    F\nMINMLGCP DS    F\nMAXMLGCP DS    F\nAVRGLGCP DS    F\nCURRAVPG DS    F\nACUMAVPG DS    F\nMINMAVPG DS    F\nMAXMAVPG DS    F\nAVRGAVPG DS    F\nCURRUICA DS    F\nACUMUICA DS    F\nMINMUICA DS    F\nMAXMUICA DS    F\nAVRGUICA DS    F\nCURRASMQ DS    F\nACUMASMQ DS    F\nMINMASMQ DS    F\nMAXMASMQ DS    F\nAVRGASMQ DS    F\n         DS    0F\nWTOLIST  DS    F\n         DS    CL22\nMIN      DS    CL4\n         DS    CL8\nMAX      DS    CL4\n         DS    CL8\nAVG      DS    CL4\n         SPACE 3\n         DS    0F\nDMNLIST  DS    F\nLDMN     DS    CL3\n         DS    CL2\nLTYP     DS    CL3\n         DS    CL2\nLLIM     DS    CL3\n         DS    CL2\nLTGT     DS    CL3\n         DS    CL2\nLMPL     DS    CL3\n         DS    CL2\nLRDY     DS    CL3\n         DS    CL2\nLGOO     DS    CL3\n         DS    CL2\nLOUT     DS    CL3\n         DS    CL2\nLINC     DS    CL3\n         DS    CL2\nLWSR     DS    CL5\nDMNTAB   DS    0CL128\nDMNNBR   DS    F\nDMNMIN   DS    F\nDMNMAX   DS    F\nDMNWT    DS    F\nDMINTGT  DS    F\nDMINMPL  DS    F\nDMINRDY  DS    F\nDMINGOO  DS    F\nDMINOUT  DS    F\nDMININC  DS    F\nDMINWSR  DS    F\nDMAXTGT  DS    F\nDMAXMPL  DS    F\nDMAXRDY  DS    F\nDMAXGOO  DS    F\nDMAXOUT  DS    F\nDMAXINC  DS    F\nDMAXWSR  DS    F\nDAVGTGT  DS    F\nDAVGMPL  DS    F\nDAVGRDY  DS    F\nDAVGGOO  DS    F\nDAVGOUT  DS    F\nDAVGINC  DS    F\nDAVGWSR  DS    F\nDACCTGT  DS    F\nDACCMPL  DS    F\nDACCRDY  DS    F\nDACCGOO  DS    F\nDACCOUT  DS    F\nDACCINC  DS    F\nDACCWSR  DS    F\n         SPACE 3\n         DS    19CL128\n         SPACE 3\nWORKEND  DS    0F\nXSA      DSECT\nXAP      DS    F\nXAD      DS    F\nXAX      DS    D\nXAE      DS    0C\nXAR      DS    F\nXAN      DS    0C\nXAL      DS    F\nXAT      DS    D\nXAS      DS    D\nXAU      DS    C\n         DS    C\nXAJ      DS    H\n         DS    F\n         PRINT NOGEN\n         IHASDWA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./       ADD   NAME=EDIT\n         MACRO\n&NAME    EDIT  &PR,&NUM,&ED\n         LCLA  &A1,&A2,&A3,&A4\n         LCLB  &B1,&B2\n         LCLC  &C1,&C2,&C3\n         ACTR  200\n         AIF   (N'&SYSLIST EQ 2 AND K'&ED EQ 0).ANOP1\n         AIF   (N'&SYSLIST NE 3).MNOTE1\n         AIF   ('&ED'(1,1) EQ '-' OR '&ED'(1,1) EQ '$').EDMK\n.ANOP1   ANOP\n&A1      SETA  &A1+1\n         AIF   (K'&ED LT &A1).CONT\n&A2      SETA  &A2+1\n&A4      SETA  &A4+1\n         AIF   ('&ED'(&A1,1) NE 'Z' AND '&ED'(&A1,1) NE '&C2').NINE\n.ANOP2   ANOP\n&C1      SETC  '&C1.20'\n         AGO   .ANOP1\n.NINE    AIF   ('&ED'(&A1,1) NE '9').PER\n         AIF   (&B1).ANOP2\n&B1      SETB  1\n         AIF   (&A1 EQ 1).SIGNIF\n         AIF   (&A1 EQ 2 AND &B2).SIGNIF\n&C3      SETC  '&C1'(&A4*2-3,2)\n         AIF   ('&C3' NE '20').NINE2\n&C1      SETC  '&C1'(1,&A4*2-4).'2120'\n         AGO   .ANOP1\n.NINE2   ANOP\n&C1      SETC  '&C1'(1,&A4*2-6).'21&C3.20'\n         AGO   .ANOP1\n.SIGNIF  ANOP\n&C1      SETC  '21'\n         AGO   .ANOP1\n.PER     AIF   ('&ED'(&A1,1) NE '.').COMMA\n&C1      SETC  '&C1.4B'\n&A2      SETA  &A2-1\n         AGO   .ANOP1\n.COMMA   AIF   ('&ED'(&A1,1) NE 'V').SLASH\n&C1      SETC  '&C1.6B'\n&A2      SETA  &A2-1\n         AGO   .ANOP1\n.SLASH   AIF   ('&ED'(&A1,1) NE '/').DBCR\n&C1      SETC  '&C1.61'\n&A2      SETA  &A2-1\n         AGO   .ANOP1\n.DBCR    AIF   (&A1+1 NE K'&ED).MNOTE2\n         AIF   ('&ED'(&A1,2) NE 'CR').DB\n&C1      SETC  '&C1.C3D9'\n&A2      SETA  &A2-1\n         AGO   .CONT\n.DB      AIF   ('&ED'(&A1,2) NE 'DB').MNOTE2\n&C1      SETC  '&C1.C4C2'\n&A2      SETA  &A2-1\n.CONT    ANOP\n&C3      SETC  '&PR'\n         AIF   (L'&NUM*2-1 NE &A2).EDSIZE\n.ENDCHEC ANOP\n&A2      SETA  0\n         AIF   (K'&C1/2+1 NE L'&PR).AREASIZ\n.LAST    AIF   (&B2).EDMKEND\n&NAME    MVC   &C3,=X'40&C1'\n         ED    &C3,&NUM\n         MEXIT\n.EDSIZE  AIF   (L'&NUM*2-1 LT &A2).LONG\n.SHORT   ANOP\n&C1      SETC  '20&C1'\n&A3      SETA  &A3+1\n         AIF   (L'&NUM*2-1 GT &A2+&A3).SHORT\n         AGO   .ENDCHEC\n.LONG    ANOP\n&C1      SETC  '&C1'(3,K'&C1-2)\n&A3      SETA  &A3+1\n         AIF   (L'&NUM*2-1 LT &A2-&A3).LONG\n         AGO   .ENDCHEC\n.AREASIZ AIF   (K'&C1/2+1 LT L'&PR).LESS\n&A2      SETA  K'&C1/2+1-L'&PR\n&A3      SETA  K'&C1/2+1\n&C3      SETC  '&C3-&A2.(&A3)'\n&B1      SETB  1\n         AGO   .LAST\n.LESS    ANOP\n&B1      SETB  0\n&A3      SETA  K'&C1/2+1\n         AIF   (K'&C1/2+5 GE L'&PR).PLUSET\n&C3      SETC  '&C3.(&A3)'\n         AGO   .LAST\n.PLUSET  ANOP\n&A2      SETA  L'&PR-K'&C1/2-1\n&C3      SETC  '&C3+&A2.(&A3)'\n         AGO   .LAST\n.EDMK    AIF   ('&ED'(1,1) EQ '-').NEG\n&C2      SETC  '$'\n         AGO   .C2SET\n.NEG     ANOP\n&C2      SETC  '-'\n.C2SET   ANOP\n&A1      SETA  1\n&B2      SETB  1\n         AGO   .ANOP1\n.EDMKEND ANOP\n&A1      SETA  -1\n.EDMKNOP ANOP\n&A1      SETA  &A1+2\n         AIF   (K'&C1 LT &A1).SETA\n         AIF   ('&C1'(&A1,2) EQ '21').SETAA\n         AIF   ('&C1'(&A1,2) NE '4B').EDMKNOP\n&A1      SETA  (&A1+1)/2\n         AGO   .LA\n.SETA    ANOP\n&A1      SETA  (&A1+1)/2-1\n         AGO   .LA\n.SETAA   ANOP\n&A1      SETA  (&A1+1)/2+1\n.LA      ANOP\n         AIF   (&B1).MINUS\n&A1      SETA  &A1+&A2\n         AGO   .MVC\n.MINUS   ANOP\n&A1      SETA  &A1-&A2\n.MVC     ANOP\n&NAME    MVC   &C3,=X'40&C1'\n         LA    1,&PR+&A1\n         EDMK  &C3,&NUM\n         AIF   ('&C2' EQ '$').DOLLAR\n         BNM   EDIT&SYSNDX\n         BCTR  1,0\n         MVI   0(1),C'-'\n&C3      SETC  '&SYSNDX'\nEDIT&C3  EQU   *\n         MEXIT\n.DOLLAR  BCTR  1,0\n         MVI   0(1),C'$'\n         MEXIT\n.MNOTE1  MNOTE 8,'THREE OPERANDS MUST BE SPECIFIED'\n         MEXIT\n.MNOTE2  MNOTE 8,'INVALID EDIT PATTERN'\n         MEND\n./       ADD   NAME=ESTMODS\n         MACRO\n         ESTMODS\nESTMODS  DC    3CL8'&SYSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EDX": {"ttr": 16385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x15_\\x00\\x89\\x15_\\x14\\x10\\x04\\xa8\\x04\\xa8\\x00\\x00\\xd1\\xc9\\xd4\\xd3\\xc1\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-06-04T00:00:00", "modifydate": "1989-06-04T14:10:00", "lines": 1192, "newlines": 1192, "modlines": 0, "user": "JIMLANE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "EXITS": {"ttr": 16897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x15_\\x00\\x89\\x15_\\x14\\x10\\x03~\\x03~\\x00\\x00\\xd1\\xc9\\xd4\\xd3\\xc1\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-06-04T00:00:00", "modifydate": "1989-06-04T14:10:00", "lines": 894, "newlines": 894, "modlines": 0, "user": "JIMLANE"}, "text": "         TITLE 'JES2 EXIT 2 ENFORCES JOBNAME AND CLASS STANDARD'\n*        PROD JOBS XXXANNNO\n*                  XXX      - SYSTEM ID\n*                     A     - T FOR TEST, P FOR PRODUCTION\n*                      NNN  - JOB NUMBER\n*                         O - OPTIONAL CHARACTER\n*        LP JOBS   XXNNNNAO\n*                  XX       - SYSTEM ID- LP\n*                    N      - MODEL NUMBER 1,2,3,OR 4\n*                     NNN   - JOB NUMBER\n*                        A  -  P FOR PRODUCTION\n*                         O - OPTIONAL CHARACTER\n*        TEST JOBS XXXXXXAA\n*                  XXXXXX   - TSO USER ID\n*                        AA - UNIQUE CHARACTERS\n*\n*        FALPNNN  - CLASS Q\n*        ADAP001  - CLASS Q\n*        ADAI001  - CLASS U\n*        ADAT001  - CLASS R\n*        ADAPNNN  - CLASS S\n*        ADAINNN  - CLASS S\n*        ADATNNN  - CLASS B\n*        FALTNNN  - CLASS R\n*        XXXPNNN  - CLASS A\n*        XXXTNNN  - CLASS B\n*        LP1NNNP  - CLASS K OR G\n*        LP2NNNP  - CLASS L OR H\n*        LP3NNNP  - CLASS M OR I\n*        LP4NNNP  - CLASS N OR J\n*        TSGXXAA  - CLASS Z\n*        DEVXXAA  - CLASS B\n*        OPSXXAA  - CLASS B\n*        SECXXAA  - CLASS B\n*        IFOXXAA  - CLASS B\n*        DRMXXAA  - CLASS B\n*        CDSXXAA  - CLASS B\n*        PASXXAA  - CLASS B\n*        XXXXXAA  - CLASS A\n*        GLXPNNN  - CLASS 4\n*        GLMPNNN  - CLASS 4\n*        EXPPNNN  - CLASS A OR 4\n*        GASPNNN  - CLASS A OR 4\n*\n         COPY  $HASPGBL\nEXIT02   $MODULE RPL,                                                  X\n               $JQE,                                                   X\n               $PCE,                                                   X\n               $HASPEQU,                                               X\n               $LRC,                                                   X\n               $RDRWORK,                                               X\n               $BUFFER,                                                X\n               $JCT,                                                   X\n               $PADDR,                                                 X\n               $CAT,                                                   X\n               $HCT,                                                   X\n               $MIT\n****************    END CONTROL BLOCKS      **************************\n         EJECT\nEXIT002  $ENTRY CSECT=YES\n         $SAVE\n         LR     R8,R15      LOAD BASE REGISTER\n         L      R4,0(R1)    POINT R4 TO CARD IMAGE\n         LTR    R0,R0       TEST FOR CONTINUATION CARD\n         BNZ    CONTCARD\nNEWJOB   MVC    PCEUSER0,ZERO\n         CLC    TESTINIT,2(R4)   TEST FOR INIT\n         BE     FINISH\n         CLC    TESTLOG,2(R4)   TEST FOR SYSLOG\n         BE     FINISH\n         CLI    3(R4),C'Z'      CHAR COL4  JES CHECKS FOR CHAR\n         BH     BADJOB                     COL 3 SO NO NEED\n         CLI    4(R4),C'Z'      CHAR COL5 IF NOT THEN LP\n         BH     LPJOB\nTESTJOB  CLI    6(R4),C'Z'      CHAR COL7\n         BH     PRODJOB\n         CLC    JOBTSG,2(R4)    TEST FOR TSGXXNN\n         BNE    DEV\n         MVI    PCEUSER0,C'Z'      CLASS Z FOR TSG\n         B      SETCLASS        GO SET CLASS\nDEV      CLC    JOBDEV,2(R4)    TEST FOR DEVXXNN\n         BNE    SPA\n         MVI    PCEUSER0,C'B'   CLASS B FOR DEV\n         B      SETCLASS\nSPA      CLC    JOBSPA,2(R4)    TEST FOR SPACIDN\n         BNE    IFO\n         MVI    PCEUSER0,C'B'   CLASS B FOR DEV\n         B      SETCLASS\nIFO      CLC    JOBIFO,2(R4)    TEST FOR IFOXXNN\n         BNE    DRM\n         MVI    PCEUSER0,C'B'   CLASS B FOR DEV\n         B      SETCLASS\nDRM      CLC    JOBDRM,2(R4)    TEST FOR DRMXXNN\n         BNE    CDS\n         MVI    PCEUSER0,C'B'   CLASS B FOR DRM\n         B      SETCLASS\nCDS      CLC    JOBCDS,2(R4)    TEST FOR CDSXXNN\n         BNE    PAS\n         MVI    PCEUSER0,C'B'   CLASS B FOR PAS\n         B      SETCLASS\nPAS      CLC    JOBPAS,2(R4)    TEST FOR PASXXNN\n         BNE    OPS\n         MVI    PCEUSER0,C'B'   CLASS B FOR PAS\n         B      SETCLASS\nOPS      CLC    JOBOPS,2(R4)    TEST FOR OPSXXNN\n         BNE    SEC\n         MVI    PCEUSER0,C'B'   CLASS B FOR OPS\n         B      SETCLASS\nSEC      CLC    JOBSEC,2(R4)    TEST FOR SECXXNN\n         BNE    PPA\n         MVI    PCEUSER0,C'B'   CLASS B FOR SEC\n         B      SETCLASS\nPPA      CLC    JOBPPA,2(R4)    TEST FOR PPAXXXLN\n         BNE    REF\n         CLI    8(R4),C'L'      CHECK FOR L IN COL 9\n         BE     LPJOBTSO\n         B      USR             ELSE STRAIGHT USER JOB\nREF      CLC    JOBREF,2(R4)    TEST FOR REFXXXLN\n         BNE    USR\n         CLI    8(R4),C'L'      CHECK FOR L IN COL 9\n         BE     LPJOBTSO        ELSE STRAIGHT USER JOB\nUSR      CLI    5(R4),C'Z'      CHAR COL6\n         BH     BADJOB\n         CLI    7(R4),C' '      \u00ac= BLANK COL 9 MEANS XXXXXXAA USER JOB\n         BE     BADJOB\n         MVI    PCEUSER0,C'A'   CLASS A FOR USER JOB\n         B      SETCLASS\nLPJOB    CLC    JOBLP,2(R4)     TEST FOR LPXNNNP\n         BNE    BADJOB\n         CLI    5(R4),C'Z'      NUMERIC COL6\n         BNH    BADJOB\n         CLI    6(R4),C'Z'      NUMERIC COL7\n         BNH    BADJOB\n         CLI    7(R4),C'Z'      NUMERIC COL8\n         BNH    BADJOB\n         CLI    8(R4),C'P'      PROD COL9\n         BNE    BADJOB\nLPCLASS1 CLI    4(R4),C'1'\n         BNE    LPCLASS2\n         MVI    PCEUSER0,C'1'\n         B      SETCLASS\nLPCLASS2 CLI    4(R4),C'2'\n         BNE    LPCLASS3\n         MVI    PCEUSER0,C'2'\n         B      SETCLASS\nLPCLASS3 CLI    4(R4),C'3'\n         BNE    LPCLASS4\n         MVI    PCEUSER0,C'3'\n         B      SETCLASS\nLPCLASS4 CLI    4(R4),C'4'\n         BNE    BADJOB\n         MVI    PCEUSER0,C'4'\n         B      SETCLASS\nLPJOBTSO CLI    9(R4),C'1'      PPAXXXL1 REFXXXL1\n         BNE    LPTSO2\n         MVI    PCEUSER0,C'1'\n         B      SETCLASS\nLPTSO2   CLI    9(R4),C'2'      PPAXXXL2 REFXXXL2\n         BNE    LPTSO3\n         MVI    PCEUSER0,C'2'\n         B      SETCLASS\nLPTSO3   CLI    9(R4),C'3'      PPAXXXL3 REFXXXL3\n         BNE    LPTSO4\n         MVI    PCEUSER0,C'3'\n         B      SETCLASS\nLPTSO4   CLI    9(R4),C'4'      PPAXXXL4 REFXXXL4\n         BNE    BADJOB\n         MVI    PCEUSER0,C'4'\n         B      SETCLASS\nPRODJOB  CLI    7(R4),C'Z'      NUMERIC COL8\n         BNH    BADJOB\n         CLI    8(R4),C'Z'      NUMERIC COL9\n         BNH    BADJOB\n         CLI    5(R4),C'R'      RERUN COL 6\n         BE     JOBPROD\n         CLI    5(R4),C'P'      PROD COL6\n         BNE    PRODTEST\nFALPROD  CLC    JOBFAL,2(R4)    TEST FOR FALNNNP\n         BNE    EXPPROD\n         MVI    PCEUSER0,C'Q'      CLASS Q FOR PROD FALCON\n         B      SETCLASS        GO SET CLASS\nEXPPROD  CLC    JOBEXP,2(R4)    *** TEST FOR EXPP\n         BNE    GASPROD\n         MVI    PCEUSER0,C'*'      SET CLASS TO * TO INDICATE THIS\n         B      SETCLASS           IS SPECIAL EXP OR GAS JOB\nGASPROD  CLC    JOBGAS,2(R4)    *** TEST FOR EXPP\n         BNE    GLXPROD\n         MVI    PCEUSER0,C'*'      SET CLASS TO * TO INDICATE THIS\n         B      SETCLASS           IS SPECIAL EXP OR GAS JOB\nGLXPROD  CLC    JOBGLX,2(R4)    TEST FOR GLXPNNN\n         BNE    GLMPROD\n         MVI    PCEUSER0,C'+'      CLASS 4 FOR PROD GLX\n         B      SETCLASS        GO SET CLASS\nGLMPROD  CLC    JOBGLM,2(R4)    TEST FOR GLMPNNN\n         BNE    ADAPROD\n         MVI    PCEUSER0,C'+'      CLASS 4 FOR PROD GLM\n         B      SETCLASS        GO SET CLASS\nADAPROD  CLC    JOBADA1,2(R4)    TEST FOR ADAP001\n         BNE    ADAOTHER\n         MVI    PCEUSER0,C'Q'      CLASS Q FOR PROD ADABAS\n         B      SETCLASS        GO SET CLASS\nADAOTHER CLC    JOBADA,2(R4)    TEST FOR ADA\n         BNE    JOBPROD\n         MVI    PCEUSER0,C'S'      CLASS S FOR ADABAS\n         B      SETCLASS        GO SET CLASS\nJOBPROD  MVI    PCEUSER0,C'A'   CLASS A FOR PROD\n         B      SETCLASS\nPRODTEST CLI    5(R4),C'T'      PROD COL6\n         BNE    PRODIMPL\nADATEST  CLC    JOBADA2,2(R4)    TEST FOR ADAT001\n         BNE    ADATXXX\n         MVI    PCEUSER0,C'R'      CLASS R FOR TEST ADABAS\n         B      SETCLASS        GO SET CLASS\nADATXXX  CLC    JOBADA,2(R4)    TEST FOR ADA\n         BNE    FALTEST\n         B      JOBTEST\nFALTEST  CLC    JOBFAL,2(R4)    TEST FOR FALTNNN\n         BNE    JOBTEST\n         MVI    PCEUSER0,C'R'      CLASS R FOR TEST FALCON\n         B      SETCLASS        GO SET CLASS\nJOBTEST  MVI    PCEUSER0,C'B'   CLASS B FOR PROD TESTING\n         B      SETCLASS\nPRODIMPL CLI    5(R4),C'I'      PROD COL6\n         BNE    BADJOB\nADAIMPL  CLC    JOBADA3,2(R4)    TEST FOR ADAI001\n         BNE    ADAIXXX\n         MVI    PCEUSER0,C'U'      CLASS U FOR IMPL ADABAS\n         B      SETCLASS        GO SET CLASS\nADAIXXX  CLC    JOBADA,2(R4)    TEST FOR ADA\n         BNE    BADJOB\n         MVI    PCEUSER0,C'S'      CLASS S FOR ADABAS\nSETCLASS LA     R2,2(R4)\n         SR     R3,R3\n         LA     R3,3(R3)\nTEST     CLC    CLASS1,0(R2)\n         BE     REPLACE\n         CLC    CLASS2,0(R2)\n         BE     REPLACE\n         LA     R3,1(R3)\n         LA     R2,1(R2)\n         CL     R3,ENDCARD\n         BNE    TEST\n         B      FINISH\nREPLACE  CLI    PCEUSER0,C'+'    + IS GLX OR GLM JOB\n         BE     GLXJOB\nLP1      CLI    PCEUSER0,C'1'\n         BNE    LP2\n         CLI    7(R2),C'K'\n         BE     LPFIN\n         CLI    7(R2),C'G'\n         BE     LPFIN\n         B      BADJOB\nLP2      CLI    PCEUSER0,C'2'\n         BNE    LP3\n         CLI    7(R2),C'L'\n         BE     LPFIN\n         CLI    7(R2),C'H'\n         BE     LPFIN\n         B      BADJOB\nLP3      CLI    PCEUSER0,C'3'\n         BNE    LP4\n         CLI    7(R2),C'M'\n         BE     LPFIN\n         CLI    7(R2),C'I'\n         BE     LPFIN\n         B      BADJOB\nLP4      CLI    PCEUSER0,C'4'\n         BNE    GASOREXP\n         CLI    7(R2),C'N'\n         BE     LPFIN\n         CLI    7(R2),C'J'\n         BE     LPFIN\nGASOREXP CLI    PCEUSER0,C'*'    * IS GASP OR EXPP JOB\n         BNE    REGJOB\n         CLI    7(R2),C'A'       ALLOWED CLASSES ARE A OR 4 FOR\n         BE     LPFIN            GAS AND EXP\n         CLI    7(R2),C'4'\n         BE     LPFIN\n         B      BADJOB\nGLXJOB   MVI    PCEUSER0,C'4'      SET CLASS 4\nREGJOB   MVC    7(1,R2),PCEUSER0   OTHERWISE MOVE IN CLASS\n         B      LPFIN\nBADJOB   MVI    PCEUSER0+1,X'FF'\n         B      FINISH\nCONTCARD CLI    PCEUSER0,X'00'\n         BNE    SETCLASS\n         B      FINISH\nLPFIN    MVI    PCEUSER0,X'00'\nFINISH   LA     R15,0\n         $RETURN RC=(R15)\n         DS     0F\nENDCARD  DC     X'0000004C'    COL 75 CLASS=Z NOT FIT ON CARD\nJOBTSG   DC     CL3'TSG'\nJOBSPA   DC     CL3'SPA'\nJOBOPS   DC     CL3'OPS'\nJOBIFO   DC     CL3'IFO'\nJOBDRM   DC     CL3'DRM'\nJOBCDS   DC     CL3'CDS'\nJOBPAS   DC     CL3'PAS'\nJOBUSR   DC     CL3'USR'\nJOBDEV   DC     CL3'DEV'\nJOBPPA   DC     CL3'PPA'\nJOBREF   DC     CL3'REF'\nJOBGLX   DC     CL3'GLX'\nJOBGLM   DC     CL3'GLM'\nJOBGAS   DC     CL4'GASP'\nJOBEXP   DC     CL4'EXPP'\nJOBSEC   DC     CL3'SEC'\nJOBFAL   DC     CL3'FAL'\nJOBADA   DC     CL3'ADA'\nJOBADA1  DC     CL7'ADAP001'\nJOBADA2  DC     CL7'ADAT001'\nJOBADA3  DC     CL7'ADAI001'\nJOBLP    DC     CL2'LP'\nTESTINIT DC     CL4'INIT'\nTESTLOG  DC     CL6'SYSLOG'\nCLASS1   DC     CL7',CLASS='\nCLASS2   DC     CL7' CLASS='\n         DS     0F\nZERO     DC     XL4'00000000'\n         $MODEND\n         END\n         TITLE 'JES2 EXIT 3 CANCELS JOBS FLAGGED BY EXIT02'\n*        EXIT02 CANNOT DISTINGUISH BETWEEN BATCH JOBS AND STC'S\n*        SO CANCEL IS DONE IS EXIT03\n         COPY  $HASPGBL\n* USE $MODULE WITH PARAMETERS TO INCLUDE ALL JES2 CONTROL BLOCKS\nEXIT03   $MODULE RPL,                                                  X\n               $PADDR,                                                 X\n               $JQE,                                                   X\n               $PCE,                                                   X\n               $HASPEQU,                                               X\n               $LRC,                                                   X\n               $RDRWORK,                                               X\n               $BUFFER,                                                X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $HCT,                                                   X\n               $MIT\n****************    END CONTROL BLOCKS      **************************\n         USING JCT,R10\n         EJECT\nEXIT003  $ENTRY CSECT=YES\n         $SAVE\n         LR     R8,R15    ESTABLISH BASE REG\n         CLI    JCTJOBID,C'J'          TEST FOR JOB\n         BNE    FINISH                 IF NOT END\n         CLI    PCEUSER0+1,X'FF'       TEST FOR EXIT2 CANCEL FLAG\n         BNE    FINISH\n         MVC    JCTXWRK,MSG1\n         OI     RDWFLAGX,RDWXXSEM\n         LA     R15,12\n         B      BADFIN\nFINISH   LA     R15,0\nBADFIN   $RETURN RC=(R15)\n         DS     0F\nMSG1     DC    CL80'JOB CANCELLED BY JES2 EXIT:JOBNAME NOT TO STANDARD'\n         $MODEND\n         END\n         TITLE 'JES2 EXIT 4 TO DUMMY OUT JOBCAT AND STEPCAT'\n*        JOBCAT AND STEPCAT DD STATEMENTS WILL BE COMMENTED\n*        OUT UNLESS THE WORD TSG APPEARS IN COLUMN 65\n         COPY  $HASPGBL\nEXIT04   $MODULE RPL,                                                  X\n               $JQE,                                                   X\n               $PCE,                                                   X\n               $HASPEQU,                                               X\n               $LRC,                                                   X\n               $RDRWORK,                                               X\n               $PADDR,                                                 X\n               $BUFFER,                                                X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $HCT,                                                   X\n               $MIT\n****************    END CONTROL BLOCKS      **************************\n         EJECT\nEXIT004  $ENTRY CSECT=YES\n         $SAVE\n         LR     R8,R15      LOAD BASE REGISTER\n         LTR    R0,R0\n         BNZ    JCLTHEN\nFINISH   LA     R15,0\n         $STORE R15\n         $RETURN\nJCLTHEN  L      R12,0(R1)\n         CLC    JOBCAT,0(R12)\n         BE     TSGTEST\n         CLC    STEPCAT,0(R12)\n         BNE    TESTCONC\n         CLC    TSG,64(R12)\n         BNE    REPLAC2\nTSGTEST  CLC    TSG,64(R12)\n         BNE    REPLACE\n         MVC    64(3,R12),ZAPTSG\n         B      FINISH\nREPLACE  MVC    0(80,R12),MSG1\n         B      SETEMP\nREPLAC2  MVC    0(80,R12),MSG3\nSETEMP   MVI    RDWTEMP,X'FF'\n         B      FINISH\nTESTCONC CLI    RDWTEMP,X'FF'\n         BNE    FINISH\n         CLC    SLASH,0(R12)\n         BE     FIRSTEST\n         MVI    RDWTEMP,X'00'\n         B      FINISH\nFIRSTEST LA     R2,3(R12)\nBLNKTEST CLC    BLANK,0(R2)\n         BNE    DDTEST\n         LA     R2,1(R2)\n         CL     R2,EIGHTYI\n         BNE    BLNKTEST\n         MVI    RDWTEMP,X'00'\n         B      FINISH\nDDTEST   CLC    DD,0(R2)\n         BE     DELCONCT\n         MVI    RDWTEMP,X'00'\n         B      FINISH\nDELCONCT MVC    0(80,R12),MSG2\n         B      FINISH\nJOBCAT   DC     CL8'//JOBCAT'\nSTEPCAT  DC     CL9'//STEPCAT'\nTSG      DC     CL3'TSG'\nZAPTSG   DC     CL3'   '\nDD       DC     CL2'DD'\nBLANK    DC     CL1' '\nSLASH    DC     CL3'// '\n         DS     0F\nEIGHTYI  DC     X'00000051'\nMSG1     DC     CL80'//* JOBCAT STATEMENT REMOVED BY JES2 EXIT'\nMSG2     DC     CL80'//* CONCATENATED CATALOG REMOVED BY JES2 EXIT'\nMSG3     DC     CL80'//* STEPCAT STATEMENT REMOVED BY JES2 EXIT'\n         $MODEND\n         END\n         TITLE 'MPFABEND - ISSUES NONE DELETABLE MESSAGE FOR PROD JOBS'\nMPFABEND CSECT\nMPFABEND AMODE 31\nMPFABEND RMODE ANY\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)        SAVE CALLERS REGS\n         BALR  R12,R0                 ESTABLISH BASE\n         USING *,R12\n         L     R5,0(R1)               --> CTXT\n         USING CTXT,R5\n         GETMAIN RU,LV=DATAEND,LOC=BELOW,SP=230\n         LR    R11,R1                 --> GETMAINED AREA\n         USING DATAAREA,R11\n         ST    R13,SAVEAREA+4\n         LA    R15,SAVEAREA\n         ST    R15,8(R13)\n         LR    R13,R15\n         BAL   R14,ISSUWTO            ISSUE THE MESSAGE\nFINISHED EQU   *\n         L     R13,4(R13)\n         FREEMAIN RU,LV=DATAEND,A=(R11),SP=230 FREE THE STORAGE\n         LM    R14,R12,12(R13)        RESTORE CALLERS REGS\n         LA    R15,0                  SET RETURN CODE\n         BR    R14                    GO BACK TO CALLER\nISSUWTO  DS    0H\n         SR    R10,R10                CLEAR FLAG\n         L     R2,CTXTTXPJ\n         USING CTXTATTR,R2\n         LA    R4,CTXTTMSG\n         USING MSGTEXT,R4\n         MVC   USERAUTO,USERSTAT\n*\n* MOVE IN JOBNAME\n*\n         SLR   R6,R6                        LENGTH OF JOBNAME\n         LA    R7,8                         MAXIMUM JOB NAME LENGTH\n         LA    R8,USERAUTO+16               TARGET FOR JOBNAME\n         LA    R9,JOBDATA                   START OF JOBNAME IN MESSAGE\nJOBLOOP  CLI   0(R9),C' '                   END OF JOBNAME?\n         BE    JOBTYPE\n         MVC   0(1,R8),0(R9)                MOVE 1 CHARACTER AT A TIME\n         LA    R6,1(,R6)                    ADD 1 TO LENGTH\n         LA    R8,1(,R8)                    BUMP\n         LA    R9,1(,R9)                          POINTERS\n         BCT   R7,JOBLOOP                   MAX JOBNAME?\n*\n* DETERMINE IF IT A PRODUCTION NAME\n*\nJOBTYPE  C     R6,=F'7'                     MUST BE AT LEAST 7 LONG\n         BL    BYPASS                       IF LESS BYPASS\n         LA    R8,USERAUTO+16               JOBNAME\n         LA    R7,3                         FIRST THREE ARE CHARS\nCHARLOOP CLI   0(R8),C'Z'                   CHAR OR NUM?\n         BH    BYPASS                       NUM BYPASS\n         LA    R8,1(,R8)                    BUMP TO NEXT CHAR\n         BCT   R7,CHARLOOP                  CHECK ALL THREE\n         LA    R7,3                         FIRST THREE ARE CHARS\n         CLI   0(R8),C'P'                   IS IT NEW PROD FORMAT?\n         BNE   NUMLOOP\nNUMLOOPA L     R10,FLAG                     SET FLAG FOR NEW JOB\n         LA    R8,1(,R8)                    BUMP TO NEXT CHAR\nNUMLOOP  CLI   0(R8),C'Z'                   CHAR OR NUM?\n         BNH   BYPASS                       CHAR BYPASS\n         LA    R8,1(,R8)                    BUMP TO NEXT CHAR\n         BCT   R7,NUMLOOP                   CHECK ALL THREE\n         CL    R10,FLAG                     IS IT NEW JOB\n         BE    JOBWTO\n         CLI   0(R8),C'P'                   7TH CHAR A 'P'\n         BNE   BYPASS\n         DROP  R2,R4\nJOBWTO   WTO   MF=(E,USERAUTO)\nBYPASS   BR    R14\n         DS    0F\nFLAG     DC    X'FFFFFFFF'\nUSERSTAT WTO   'SUN001I JOB          ABENDED',ROUTCDE=(15),DESC=(11),MFX\n               =L\nABMSG    EQU   *-USERSTAT\nDATAAREA DSECT\n         DS    0F\nSAVEAREA DS    18F\n         DS    0F\nUSERAUTO DS    CL(ABMSG)\nDATAEND  EQU   *-DATAAREA\nMSGTEXT  DSECT\nMSGID    DS    CL8\nJOBDATA  DS    CL8\n         ORG   MSGTEXT\n         DS    CL4\nWTORID   DS    CL8\n         IEZVX100\n         END\n         TITLE 'MPFHOLD  - REPLIES NOHOLD TO IEF433D REPLY HOLD '\nMPFHOLD  CSECT\nMPFHOLD  AMODE 31\nMPFHOLD  RMODE ANY\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)        SAVE CALLERS REGS\n         BALR  R12,R0                 ESTABLISH BASE\n         USING *,R12\n         L     R5,0(R1)        --> CTXT\n         USING CTXT,R5\n         GETMAIN RU,LV=DATAEND,SP=230,LOC=BELOW\n         LR    R11,R1                 --> GETMAINED AREA\n         USING DATAAREA,R11\n         ST    R13,SAVEAREA+4\n         LA    R15,SAVEAREA\n         ST    R15,8(R13)\n         LR    R13,R15\n         L     R2,CTXTTXPJ\n         USING CTXTATTR,R2\n         LA    R4,CTXTTMSG\n         USING MSGTEXT,R4\n         OI    CTXTRFB2,CTXTRHCO\n         XC    MGCRPL(MGCRLTH),MGCRPL\n         MVC   MGCRTEXT(L'TXTINSRT),TXTINSRT\n         MVC   REPLY,CTXTRPID\n         LA    R1,(MGCRTEXT-MGCRPL)+L'TXTINSRT\n         STC   R1,MGCRLGTH\n         SR    R0,R0\n         MGCR  MGCRPL\n         DROP  R2,R4\nFINISH   L     R13,4(R13)\n         FREEMAIN RU,LV=DATAEND,SP=230,A=(R11)\n         LM    R14,R12,12(R13)        RESTORE CALLERS REGS\n         BR    R14                    GO BACK TO CALLER\nTXTINSRT DC    CL9'XX,NOHOLD'\nWAITTST  DC    CL14'WAIT REQUESTED'\nDATAAREA DSECT\n         DS    0F\nSAVEAREA DS    18F\n         DS    0F\nMGCR     IEZMGCR  DSECT=NO\n         ORG   MGCRTEXT\nREPLY    DS    CL2\nREPLYMSG DS    CL2\n         ORG\nDATAEND  EQU   *-DATAAREA\nMSGTEXT  DSECT\nMSGID    DS    CL8\nJOBNAME  DS    CL11\nWAITC    DS    CL14\n         IEZVX100\n         END   MPFHOLD\n         TITLE 'MPFJCLER - ISSUES NONE DELETABLE MESSAGE FOR PROD JOBS'\nMPFJCLER CSECT\nMPFJCLER AMODE 31\nMPFJCLER RMODE ANY\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)        SAVE CALLERS REGS\n         BALR  R12,R0                 ESTABLISH BASE\n         USING *,R12\n         L     R5,0(R1)               --> CTXT\n         USING CTXT,R5\n         GETMAIN RU,LV=DATAEND,LOC=BELOW,SP=230\n         LR    R11,R1                 --> GETMAINED AREA\n         USING DATAAREA,R11\n         ST    R13,SAVEAREA+4\n         LA    R15,SAVEAREA\n         ST    R15,8(R13)\n         LR    R13,R15\n         BAL   R14,ISSUWTO            ISSUE THE MESSAGE\nFINISHED EQU   *\n         L     R13,4(R13)\n         FREEMAIN RU,LV=DATAEND,A=(R11),SP=230 FREE THE STORAGE\n         LM    R14,R12,12(R13)        RESTORE CALLERS REGS\n         LA    R15,0                  SET RETURN CODE\n         BR    R14                    GO BACK TO CALLER\nISSUWTO  DS    0H\n         SR    R10,R10                CLEAR FLAG\n         L     R2,CTXTTXPJ\n         USING CTXTATTR,R2\n         LA    R4,CTXTTMSG\n         USING MSGTEXT,R4\n         MVC   USERAUTO,USERSTAT\n*\n* MOVE IN JOBNAME\n*\n         SLR   R6,R6                        LENGTH OF JOBNAME\n         LA    R7,8                         MAXIMUM JOB NAME LENGTH\n         LA    R8,USERAUTO+16               TARGET FOR JOBNAME\n         LA    R9,JOBDATA                   START OF JOBNAME IN MESSAGE\nJOBLOOP  CLI   0(R9),C' '                   END OF JOBNAME?\n         BE    JOBTYPE\n         MVC   0(1,R8),0(R9)                MOVE 1 CHARACTER AT A TIME\n         LA    R6,1(,R6)                    ADD 1 TO LENGTH\n         LA    R8,1(,R8)                    BUMP\n         LA    R9,1(,R9)                          POINTERS\n         BCT   R7,JOBLOOP                   MAX JOBNAME?\n*\n* DETERMINE IF IT A PRODUCTION NAME\n*\nJOBTYPE  C     R6,=F'7'                     MUST BE AT LEAST 7 LONG\n         BL    BYPASS                       IF LESS BYPASS\n         LA    R8,USERAUTO+16               JOBNAME\n         LA    R7,3                         FIRST THREE ARE CHARS\nCHARLOOP CLI   0(R8),C'Z'                   CHAR OR NUM?\n         BH    BYPASS                       NUM BYPASS\n         LA    R8,1(,R8)                    BUMP TO NEXT CHAR\n         BCT   R7,CHARLOOP                  CHECK ALL THREE\n         LA    R7,3                         FIRST THREE ARE CHARS\n         CLI   0(R8),C'P'                   IS IT NEW PROD FORMAT?\n         BNE   NUMLOOP\nNUMLOOPA L     R10,FLAG                     SET FLAG FOR NEW JOB\n         LA    R8,1(,R8)                    BUMP TO NEXT CHAR\nNUMLOOP  CLI   0(R8),C'Z'                   CHAR OR NUM?\n         BNH   BYPASS                       CHAR BYPASS\n         LA    R8,1(,R8)                    BUMP TO NEXT CHAR\n         BCT   R7,NUMLOOP                   CHECK ALL THREE\n         CL    R10,FLAG                     IS IT NEW JOB\n         BE    JOBWTO\n         CLI   0(R8),C'P'                   7TH CHAR A 'P'\n         BNE   BYPASS\n         DROP  R2,R4\nJOBWTO   WTO   MF=(E,USERAUTO)\nBYPASS   BR    R14\n         DS    0F\nFLAG     DC    X'FFFFFFFF'\nUSERSTAT WTO   'SUN002I JOB          HAD A JCL ERROR',                 X\n               ROUTCDE=(15),DESC=(11),MF=L\nABMSG    EQU   *-USERSTAT\nDATAAREA DSECT\n         DS    0F\nSAVEAREA DS    18F\n         DS    0F\nUSERAUTO DS    CL(ABMSG)\nDATAEND  EQU   *-DATAAREA\nMSGTEXT  DSECT\nMSGID    DS    CL8\nJOBDATA  DS    CL8\n         ORG   MSGTEXT\n         DS    CL4\nWTORID   DS    CL8\n         IEZVX100\n         END\nMPFVINIT TITLE 'MESSAGE PROCESSOR TO START TSO'\n         SPACE 1\n*********************************************************************\n*                                                                   *\n*   MPFVINIT: MPF ROUTINE TO START  TSO                             *\n*                                                                   *\n*   EXIT:     NORMAL  -  RC=0                                       *\n*                                                                   *\n*             ERROR   -  RC=4                                       *\n*                                                                   *\n*   MODS:     AUG.  9,1988   -   CHANGED GETMAIN TO SUBPOOL 230  RP *\n*                                                                   *\n*********************************************************************\nMPFVINIT CSECT ,\nMPFVINIT AMODE 31\nMPFVINIT RMODE ANY\n         SPACE 2\nCMDSVC   EQU   34\nK0       EQU   0\nK1       EQU   1\nK2       EQU   2\nK4       EQU   4\nK8       EQU   8\nK12      EQU   12\nK16      EQU   16\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SAVE  (14,12),,MPFVINIT_&SYSDATE  SAVE REGISTERS\n         USING MPFVINIT,R12                SET UP BASE\n         USING DATA,R13                    SETUP DATE AREA ADDRESS\n         LR    R12,R15                     LOAD BASE REG\n         L     R8,K0(R1)                   SAVE INPUT PARM\n         GETMAIN RU,LV=DATALEN,SP=230,LOC=BELOW GET STORAGE       (RP)\n         ST    R13,K4(R1)                  SAVE CALLERS WORK AREA\n         ST    R1,K8(R13)                  SAVE MY WORK AREA\n         LR    R13,R1                      LOAD SAVE AREA ADDRESS\n         SPACE 1\n*   START TSO\n         SPACE 1\n         MVC   CMDAREA1(CMDLEN1),CMDL1     MOVE IN START COMMAND\n         SLR   R0,R0                       CLEAR REG 0\n         LA    R1,CMDAREA1                 POINT TO START OF COMMAND\n         SVC   CMDSVC                      ISSUE START COMMAND\n*   START CICS MONITOR\n         MVC   CMDAREA2(CMDLEN2),CMDL2     MOVE IN START COMMAND\n         SLR   R0,R0                       CLEAR REG 0\n         LA    R1,CMDAREA2                 POINT TO START OF COMMAND\n         SVC   CMDSVC                      ISSUE START COMMAND\n*   START DTFVTAM\n         MVC   CMDAREA3(CMDLEN3),CMDL3     MOVE IN START COMMAND\n         SLR   R0,R0                       CLEAR REG 0\n         LA    R1,CMDAREA3                 POINT TO START OF COMMAND\n         SVC   CMDSVC                      ISSUE START COMMAND\n         SPACE 1\n         LR    R1,R13                      LOAD GETMAINED AREA\n         L     R13,K4(R13)                 POINT TO CALLERS SAVE AREA\n         FREEMAIN RU,LV=DATALEN,A=(1),SP=230  FREEMAIN AREA       (RP)\n         LM    14,12,12(13)                RESTORE REGS\n         LA    R15,0                       SET RC=0\n         BSM   0,R14                       GOBACK, IN CALLERS MODE\n         EJECT\nCMDL1    DS    0F\n         DC    AL2(CMDLEN1),AL2(00)        LENGTH OF STRING\n         DC    C'START TSO '               COMMAND PLUS BLANK\nCMDLEN1  EQU   *-CMDL1\nCMDL2    DS    0F\n         DC    AL2(CMDLEN2),AL2(00)        LENGTH OF STRING\n         DC    C'START TMONXS '            COMMAND PLUS BLANK\nCMDLEN2  EQU   *-CMDL2\nCMDL3    DS    0F\n         DC    AL2(CMDLEN3),AL2(00)        LENGTH OF STRING\n         DC    C'START DTFVTAM'            COMMAND PLUS BLANK\nCMDLEN3  EQU   *-CMDL3\n         SPACE 2\nDATA     DSECT\nSAVE     DS    18F\nCMDAREA1 DS    0F,XL(CMDLEN1)\nCMDAREA2 DS    0F,XL(CMDLEN2)\nCMDAREA3 DS    0F,XL(CMDLEN3)\nDATALEN  EQU   *-DATA\n         END\n         TITLE 'MPFVTAM - ISSUE NON-DELETABLE MESSAGE VTAM NODE INACT'\nMPFVTAM CSECT\nMPFVTAM AMODE 31\nMPFVTAM RMODE ANY\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)        SAVE CALLERS REGS\n         BALR  R12,R0                 ESTABLISH BASE\n         USING *,R12\n         L     R5,0(R1)               --> CTXT\n         USING CTXT,R5\n         GETMAIN RU,LV=DATAEND,LOC=BELOW,SP=230\n         LR    R11,R1                 --> GETMAINED AREA\n         USING DATAAREA,R11\n         ST    R13,SAVEAREA+4\n         LA    R15,SAVEAREA\n         ST    R15,8(R13)\n         LR    R13,R15\n         BAL   R14,ISSUWTO            ISSUE THE MESSAGE\nFINISHED EQU   *\n         L     R13,4(R13)\n         FREEMAIN RU,LV=DATAEND,A=(R11),SP=230 FREE THE STORAGE\n         LM    R14,R12,12(R13)        RESTORE CALLERS REGS\n         LA    R15,0                  SET RETURN CODE\n         BR    R14                    GO BACK TO CALLER\nISSUWTO  DS    0H\n         SR    R10,R10                CLEAR FLAG\n         L     R2,CTXTTXPJ\n         USING CTXTATTR,R2\n         LA    R4,CTXTTMSG\n         USING MSGTEXT,R4\n         MVC   USERAUTO,USERSTAT\n*\n* MOVE IN NODENAME\n*\n         SLR   R6,R6                        LENGTH OF NODENAME\n         LA    R7,8                         MAXIMUM NODENAME LENGTH\n         LA    R8,USERAUTO+22               TARGET FOR NODENAME\n         LA    R9,NODEDATA                START OF NODENAME IN MESSAGE\nNODELOOP CLI   0(R9),C' '                   END OF NODENAME?\n         BE    NODEWTO\n         MVC   0(1,R8),0(R9)                MOVE 1 CHARACTER AT A TIME\n         LA    R6,1(,R6)                    ADD 1 TO LENGTH\n         LA    R8,1(,R8)                    BUMP\n         LA    R9,1(,R9)                          POINTERS\n         BCT   R7,NODELOOP                  MAX NODENAME?\n*\n         DROP  R2,R4\nNODEWTO  WTO   MF=(E,USERAUTO)\nBYPASS   BR    R14\n         DS    0F\nFLAG     DC    X'FFFFFFFF'\nUSERSTAT WTO   'SUN105I VTAM NODE          HAS GONE INACTIVE',         X\n               ROUTCDE=(8),DESC=(11),MF=L\nABMSG    EQU   *-USERSTAT\nDATAAREA DSECT\n         DS    0F\nSAVEAREA DS    18F\n         DS    0F\nUSERAUTO DS    CL(ABMSG)\nDATAEND  EQU   *-DATAAREA\nMSGTEXT  DSECT\nMSGID    DS    CL8\nNODEDATA DS    CL8\n         ORG   MSGTEXT\n         DS    CL4\nWTORID   DS    CL8\n         IEZVX100\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLFLOW": {"ttr": 17158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x15_\\x00\\x89\\x15_\\x14\\x10\\x02\\xf1\\x02\\xf1\\x00\\x00\\xd1\\xc9\\xd4\\xd3\\xc1\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-06-04T00:00:00", "modifydate": "1989-06-04T14:10:00", "lines": 753, "newlines": 753, "modlines": 0, "user": "JIMLANE"}, "text": "><       ADD   NAME=$GENMSG\n         MACRO\n        $GENMSG  &M\n&NDX     SETC  '&SYSNDX'\n         CLC   M&M.LNO,=F'-4'       MSG NEEDED?\n         BE    GENA&NDX             NO.\n         L     R2,M&M.LNO           PICK UP HIGHEST OFFSET.\n         LA    R2,4(0,R2)           PLUS 1\n         SRL   R2,2                 DIVIDE BY 4. NUMBER TO INSERT\n         LA    R3,M&M.LNO+4         1ST LINE NUMBER\nGENB&NDX DS    0H\n         L     R1,0(0,R3)           PICK UP LINE NUMBER.\n         ST    R1,ADDLINE           SAVE AS INSERT POINT.\n         ISREDIT 82,MSG&M\n         LA    R3,4(0,R3)           SKIP TO NEXT LINE NUMBER.\n         BCT   R2,GENB&NDX          COUNT OF NUMBER TO INSERT.\nGENA&NDX DS    0H\n         MEND\n><       ADD   NAME=$NOTEMSG\n         MACRO\n        $NOTEMSG &M\n&NDX     SETC  '&SYSNDX'\n         L     R1,M&M.LNO           OFFSET INTO LINE NUMBER TBL\n         LA    R1,4(0,R1)           GET NEXT ENTRY\n         CH    R1,=Y(4*32)          TABLE FULL?\n         BH    TBF&NDX              YES.\n         L     R14,ADDLINE          PICK UP CURRENT INSERT POINT\n         ST    R14,M&M.LNO+4(R1)    SAVE LINE# FOR MESSAGE INSERT\n         ST    R1,M&M.LNO           SAVE UPDATED OFFSET.\nTBF&NDX  DS    0H\n         MEND\n><       ADD   NAME=JCLFLOW\nJCLFLOW  TITLE 'ISPF V2 EDIT MACRO TO REFORMAT AND CHECK JCL.'\n***********************************************************************\n*   THIS PROGRAM WAS \"OBTAINED\" FROM FILE352 OF THE CBT TAPE. IN      *\n*   ITS ORIGINAL FORM IT WAS A BATCH UTILITY, READING JCL FROM        *\n*   SYSUT1 AND WRITING THE REFORMATTED STUFF ONTO SYSUT2. I           *\n*   CHANGED IT BY ALTERING THE I/O LOGIC TO USE ISPF EDIT MACRO       *\n*   SERVICES. THE BASIC LOGIC IS TO START AT THE TOP OF THE DECK      *\n*   ASSIGNING EACH LINE TO VARIABLE \"CARD\". ANYTHING OTHER THAN       *\n*   PART OF A DD STATEMENT IS LEFT AS IS. WHEN A DD STATEMENT IS      *\n*   FOUND EACH LINE IS DELETED AFTER BEING READ. THE LINE NUMBER      *\n*   AFTER WHICH TO INSERT REFORMATTED JCL IS REMEMBERED IN            *\n*   VARIABLE \"ADDLINE\". AN ENTIRE DD STATEMENT IS READ IN,            *\n*   CONTINUATION LINES AND ALL AND STORED IN \"TABLEIN\", EACH INPUT    *\n*   LINE BEING DELETED AFTER ASSIGNMENT. THE DD STATEMENT IS THEN     *\n*   FORMATTED BY BEING COPIED ONE PARAMETER AT A TIME OVER TO         *\n*   \"TABLEOUT\". FROM \"TABLEOUT\" NEW LINES ARE INSERTED INTO THE       *\n*   DATASET TO CONTAIN THE REFORMATTED DD STATEMENT. SINCE THE        *\n*   NUMBER OF LINES IN THE DATASET COULD HAVE INCREASED, THE LINE     *\n*   NUMBER OF THE LAST LINE IS RE-CALCULATED AS NECESSARY AND         *\n*   REMEMBERED IN VARIABLE \"LLINE\".                                   *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*    THE FOLLOWING MACROS ARE USED IN JCLFLOW:                        *\n*                                                                     *\n*        LOCAL MACROS:                                                *\n*                                                                     *\n*   $GENMSG    - INSERT MESSAGE LINES INTO THE DATASET.               *\n*   $NOTEMSG   - UPDATE A TABLE OF LINE NUMBERS AFTER WHICH TO INSERT *\n*                A MESSAGE LINE.                                      *\n*                                                                     *\n*        ISPF MACROS (FROM SOMEWHERE ON THE CBT TAPE):                *\n*                                                                     *\n*   ISPF                                                              *\n*   ISREDIT                                                           *\n*   VDEFINE                                                           *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*                                                                     *\n*  R0    UNUSED.                                                      *\n*  R1    WORK REGISTER                                                *\n*  R2    CURRENT POSITION WITHIN INPUT TEXT (TABLEIN)                 *\n*  R3    LOOP COUNTER                                                 *\n*  R4    CURRENT POSITION WITHIN OUTPUT AREA (TABLEOUT)               *\n*        OR CURRENT ENTRY IN JCL PARAMETER TABLE.                     *\n*  R5    WORK REGISTER                                                *\n*  R6    WORK REGISTER                                                *\n*  R7    LOOP CONTROL (BXLE)                                          *\n*  R8    LOOP CONTROL (BXLE)                                          *\n*  R9    LOOP CONTROL (BXLE)                                          *\n*  R10   SUBROUTINE LINKAGE                                           *\n*  R11   PROGRAM BASE REGISTER 1                                      *\n*  R12   PROGRAM BASE REGISTER 2                                      *\n*  R13   SAVE AREA BASE ADDRESS.                                      *\n*  R14                                                                *\n*  R15                                                                *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nJCLFLOW CSECT                                                      @MLI\n         PRINT NOGEN                                               @MLI\n           SPACE 1\n*  EQUATE THE GENERAL REGISTERS FOR XREF USE.\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*  SET UP BASE REGISTERS AND SAVE AREA POINTERS\n         SPACE 1\n         STM   R14,R12,12(R13)\n         LR    R11,R15\n         USING JCLFLOW,R11,R12\n         LA    R12,4095(R11)\n         LA    R12,1(R12)\n         ST    R13,SAVEAREA+4\n         LR    R4,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R4)\n         ISPF  LOAD                                                @MLI\n         ISREDIT ,'MACRO '                                         @MLI\n         ISREDIT ,'RESET '                                         @MLI\n         VDEFINE '(CARD)',CARD,CHAR,80                             @MLI\n         VDEFINE '(LINENO)',LINENO,FIXED,4                         @MLI\n         VDEFINE '(LLINE)',LLINE,FIXED,4                           @MLI\n         VDEFINE '(ADDLINE)',ADDLINE,FIXED,4                       @MLI\n         ISREDIT ,'(LLINE) = LINENUM .ZLAST '                      @MLI\n         MVC   LINENO,=F'0'                                        @MLI\n         MVC   ADDLINE,=F'0'        INSERT AFTER ZERO TO START.    @MLI\n         EJECT\n**  MAINLINE OF THE PROGRAM -- BEGIN PROCESSING DATA.\n         SPACE 2\nGETUT1   DS    0H\n         L     R1,ADDLINE           GET NUMBER OF LAST INSERT.     @MLI\n         LA    R1,1(0,R1)           PLUS 1.                        @MLI\n         ST    R1,LINENO            GET NEXT NEW LINE.             @MLI\n         CLC   LINENO,LLINE            END OF FILE ON INPUT?       @MLI\n         BH    ENDOFJOB                YES, GO TO END OF JOB.\n         SPACE 1\n         ISREDIT ,'(CARD) = LINE &&LINENO '                        @MLI\n         CLC   CARD(2),=CL2'//'\n         BNE   GETUT1A                                             @MLI\n         SPACE 1\n         CLC   CARD(3),=CL3'//*'\n         BE    GETUT1A                                             @MLI\n         B     GETUT1B              PROCESS THIS ONE.              @MLI\nGETUT1A  DS    0H                                                  @MLI\n         L     R1,ADDLINE           GET NUMBER OF LAST INSERT      @MLI\n         LA    R1,1(0,R1)           PLUS 1.                        @MLI\n         ST    R1,ADDLINE           AND SAVE IT.                   @MLI\n         CLC   ADDLINE,LLINE        DOES IT LOOK LIKE THE BOTTOM   @MLI\n         BL    GETUT1               NO. NEXT LINE.                 @MLI\n         ISREDIT ,'(LLINE) = LINENUM .ZLAST '                      @MLI\n         B     GETUT1               TRY NEXT LINE.                 @MLI\nGETUT1B  DS    0H                                                  @MLI\n         ISREDIT ,'DELETE &&LINENO '                               @MLI\n         SPACE 1\n         CLC   CARD+2(69),INITOUT+2\n         BE    ALLDONE\n         SPACE 1\n         LA    R2,20\n         LA    R3,CARD+3\n         SPACE 1\nCOMPARES CLC   0(5,R3),=CL5' JOB '\n         BE    JOBCARD\n         SPACE 1\n         CLC   0(6,R3),=CL6' EXEC '\n         BE    EXECARD\n         SPACE 1\n         CLC   0(4,R3),=CL4' DD '\n         BE    DDCARD\n         SPACE 1\n         LA    R3,1(R3)\n         BCT   R2,COMPARES\n         SPACE 2\nALLDONE  MVC   CARD+72(8),INITOUT+2\nNOTJCL   DS    0H\n         BAL   R10,PUTUT2\n         B     GETUT1\n         EJECT\nJOBCARD  B     ALLDONE\n         SPACE 2\nEXECARD  B     ALLDONE\n         EJECT\nDDCARD   MVC   0(4,R3),=CL4'    '\n         SPACE 1\n         LA    R2,25\n         L     R3,=AL4(TABLEIN)\n         L     R4,=AL4(TABLEOUT)\nINITLOOP MVC   0(80,R3),INITIN      SET INPUT WORKAREA TO HEX FF'S\n         MVC   0(80,R4),INITOUT     SET OUTPUT WORKAREA TO '// '\n         LA    R3,80(R3)\n         LA    R4,80(R4)\n         BCT   R2,INITLOOP\n         SPACE 1\n         MVC   CARD(2),INITOUT+2    BLANK OUT // FROM INPUT\n         MVC   CARD+72(8),INITOUT+2 BLANK OUT SEQ# FROM INPUT\n         L     R3,=AL4(TABLEIN)\n         MVC   0(80,R3),CARD        MOVE JCL CARD TO INPUT WORKAREA\n         L     R4,=AL4(TABLEOUT)\n         MVC   11(2,R4),=CL2'DD'\n         SPACE 1\n         BAL   R10,FINELOAD         LOAD ANY CONTINUATION CARDS.\n         SPACE 1\n         L     R2,=AL4(TABLEIN+2)\n         L     R3,=AL4(TABLEOUT+2)\n         LA    R4,8\nDDNAMEMV CLI   0(R2),C' '\n         BE    DDNAMOVR\n         MVC   0(1,R3),0(R2)        MOVE 1 CHAR OF DDNAME TO OUTPUT\n         MVI   0(R2),C' '\n         LA    R2,1(R2)\n         LA    R3,1(R3)\n         BCT   R4,DDNAMEMV\n         EJECT\nDDNAMOVR L     R6,=AL4(TABLEIN)\n         ST    R6,CURENTRY          SAVE ADDR OF CURRENT INPUT RECORD\n         SPACE 1\n         LA    R6,72\n         ST    R6,COUNT             SAVE COUNTS OF COLUMNS TO SEARCH\n         SPACE 1\nGOAGAIN  MVC   NOPX+1(1),=X'F0'\n         L     R2,CURENTRY          RECORD TO SEARCH IN R2\n         L     R3,COUNT             COLUMNS TO SEARCH IN R3\n         BAL   R10,SEARCH           FIND A JCL PARAMETER, IF POSSIBLE\n         CLI   HITSW,C'0'           WAS THERE ONE?\n         BE    NEWENTRY             NO. WRITE OUT A NON-JCL RECORD\n         SPACE 1\nCONTINUE MVC   OUTADDR(4),0(R4)     SAVE ADDR IN TABLEOUT TO STORE PARM\n         ST    R2,START             SAVE START OF POSSIBLE NEXT PARM.\n         MVC   NOPX+1(1),=X'00'\n         LA    R2,1(R2)             DON'T RE-FIND THE SAME PARM\n         BCTR  R3,0                 WHICH MEANS 1 FEWER COLUMNS TO SCAN\n         BAL   R10,SEARCH           RESUME SCAN OF INPUT RECORD.\n         CLI   HITSW,C'0'           ANOTHER PARAMETER OR END OF CARD?\n         BE    NEWENTRY             NO. GOTO NEXT STATEMENT.\n         ST    R2,STOP              SAVE END OF PREVIOUS PARAMETER.\n         SPACE 1\n         L     R9,START             START OF PARAMETER TEXT.\n         L     R10,STOP             END OF PARAMETER TEXT.\n         SR    R10,R9               END MINUS START.\n         BCTR  R10,0                MINUS 1 IS LENGTH TO MOVE.\n         L     R9,OUTADDR           PICK UP PLACE TO SAVE IN TABLEOUT.\n         STC   R10,MOVEPARM+1       SET LENGTH TO SAVE TEXT.\n         STC   R10,CLEARPRM+1       SET LENGTH TO CLEAR INPUT.\n         STC   R10,78(R9)           SAVE LENGTH IN OUTPUT AREA\n         L     R10,START            PICK UP START OF TEXT IN INPUT.\n         SPACE 1\nMOVEPARM MVC   15(0,R9),0(R10)      SAVE IN TABLEOUT.\nCLEARPRM MVC   0(0,R10),INITOUT+2   BLANK OUT EQUIVALENT IN TABEIN.\n         MVI   79(R9),C'X'          FLAG THAT ONE AS GOOD.\n         CLI   EODCSW,C'1'          ANYTHING MORE ON INPUT?\n         BNE   CONTINUE             YES, GO DO IT.\n         MVI   EODCSW,C'0'\n         SPACE 1\n         LR    R7,R10\n         BAL   R10,SAVECMNT\n         SPACE 1\nNEWENTRY L     R6,CURENTRY\n         LA    R6,80(R6)\n         CLC   0(80,R6),INITIN\n         BE    WRITEIT\n         ST    R6,CURENTRY\n         B     GOAGAIN\n         EJECT\nWRITEIT  LA    R3,25\n         L     R4,=AL4(TABLEOUT)\n         MVC   CARDSAVE,CARD\n         SPACE 1\n         BAL   R10,LASTLOOK\n         BAL   R10,ADCOMMAS\n         BAL   R10,ADCOMNTS\n         SPACE 1\n         L     R1,=AL4(TABLEOUT)\n         CLI   79(R1),C'X'\n         BE    WRITLOOP\n         MVC   SLOTSAVE(11),2(R1)\n         MVC   BYSLOT+1(1),=XL1'00'\n         SPACE 1\nWRITLOOP MVC   CARD(80),0(R4)\n         CLI   CARD+79,C'X'\n         BNE   BUMPWRIT\n         SPACE 1\nBYSLOT   B     BLANKX\n         MVC   CARD+2(11),SLOTSAVE\n         MVC   BYSLOT+1(1),=XL1'F0'\nBLANKX   MVC   CARD+78(2),INITOUT+2\n         BAL   R10,PUTUT2\nBUMPWRIT LA    R4,80(R4)\n         BCT   R3,WRITLOOP\n         SPACE 2\n         CLI   ECSW,C'1'\n         BNE   WITEXIT\n         MVI   ECSW,C' '\n         MVC   CARD,ECARD\n         BAL   R10,PUTUT2\n         SPACE 1\nWITEXIT  MVC   SLOTSAVE(11),INITOUT+2\n         MVC   CARD,CARDSAVE\n         CLI   EOFUT1,C'1'\n         BE    ENDOFJOB\n         B     GETUT1                                              @MLI\n         EJECT\nEODUT1   MVI   EOFUT1,C'1'\n         SPACE 1\n         CLI   FINEON,C'1'\n         BE    FINERTRN\n         SPACE 2\nENDOFJOB LA    R15,0\nABORT    DS    0H\n        $GENMSG 1                                                  @MLI\n        $GENMSG 2                                                  @MLI\n        $GENMSG 3                                                  @MLI\n        $GENMSG 4                                                  @MLI\n         ISPF  DELETE                                              @MLI\n         L     R13,4(R13)\n         L     R14,12(13,0)\n         LM    R0,R12,20(13)\n         BR    R14\n         EJECT\n*  SUBROUTINE TO FINISH LOAD OF THE INPUT TABLE\n         SPACE 2\nFINELOAD ST    R10,FINESAVE\n         MVI   FINEON,C'1'\n         SPACE 1\n         L     R7,=AL4(TABLEIN)     DD CARD BEING SCANNED.         @MLI\n         LA    R8,1                 ONE COLUME AT A TIME.          @MLI\n         L     R9,=AL4(TABLEIN+70)  LAST COLUMN FOR ', '           @MLI\n         CLC   0(2,R7),=C', '       CONTINUATION INDICATED?        @MLI\n         BE    *+12                 YES, READ IN MORE              @MLI\n         BXLE  R7,R8,*-10           SCAN ENTIRE CARD.              @MLI\n         B     FINERTRN             NO CONT.                       @MLI\n         SPACE 1\n         LA    R8,24\n         L     R9,=AL4(TABLEIN+80)\n         SPACE 1\nFINEGET  DS    0H\n         CLC   LINENO,LLINE         ANY MORE DATA LINES?           @MLI\n         BH    FINERTRN             NO                             @MLI\n         ISREDIT ,'(CARD) = LINE &&LINENO '                        @MLI\n         ISREDIT ,'DELETE &&LINENO '                               @MLI\n         SPACE 1\n         BAL   R10,CHECKER\n         SPACE 1\n         MVC   CARD(2),=CL2' '\n         MVC   CARD+72(8),=CL8' '\n         MVC   0(80,R9),CARD\n         SPACE 1\n         CLI   MOREDD,C'0'          END OF THIS DD STATEMENT?      @MLI\n         BE    FINERTRN             YES.                           @MLI\n         LA    R9,80(R9)\n         BCT   R8,FINEGET\n         SPACE 1\nFINERTRN MVI   FINEON,C'0'\n         L     R10,FINESAVE\n         BR    R10\n         EJECT\n*  ROUTINE TO CHECK FOR CONTINUATION CARDS OF A DD CARD.\n         SPACE 2\nCHECKER  CLC   CARD(3),=CL3'//*'\n         BE    NOMODD\n         SPACE 1\n         CLC   CARD(2),=CL2'//'\n         BNE   NOMODD\n         SPACE 1\n         CLC   CARD+2(14),INITOUT+2\n         BE    NOMODD\n         SPACE 1\n         LA    R2,CARD+2\n         LA    R3,68                CONTINUATION COULD BE 3-70     @MLI\nCHKLOOP  DS    0H\n         CLC   0(2,R2),=CL2', '     CONTINUATION                   @MLI\n         BE    MODD                 YES. MORE TO THIS DD.          @MLI\n         LA    R2,1(R2)\n         BCT   R3,CHKLOOP\n         SPACE 1\nNOMODD   MVI   MOREDD,C'0'\n         BR    R10\nMODD     MVI   MOREDD,C'1'                                         @MLI\n         BR    R10\n         EJECT\n*  ROUTINE TO SEARCH FOR PARAMETERS IN A DD CARD.\n*  SET R2 TO START OF DD STATEMENT PARAMETER TEXT\n*  SET R4 TO CORRESPONDING ENTRY IN \"TABLE\".\n         SPACE 2\nSEARCH   LA    R4,TABLE\n         SR    R5,R5\n         IC    R5,PTABCNT\n         MVI   HITSW,C'0'\n         SPACE 1\nSETLEN   MVC   COMPARE+1(1),4(R4)\n         CLI   0(R2),X'7D'\n         BE    QUOTE\nCOMPARE  CLC   0(0,R2),5(R4)\n         BE    HIT\n         SPACE 1\nNOPX     NOP   BUMP\n         CLI   0(R2),C' '\n         BE    EODCARD\n         SPACE 1\nBUMP     LA    R4,25(R4)\n         BCT   R5,SETLEN\n         SPACE 1\nBUMP2    LA    R2,1(R2)\n         BCT   R3,SEARCH\n         SPACE 1\n         BR    R10\nHIT      MVI   HITSW,C'1'\n         BR    R10\nEODCARD  MVI   EODCSW,C'1'\n         BE    HIT\n         SPACE 2\nQUOTELUP CLI   0(R2),X'7D'\n         BE    BUMP2\nQUOTE    LA    R2,1(R2)\n         BCT   R3,QUOTELUP\n         B     EODCARD\n         EJECT\n*  ROUTINE TO MARK INPUT AREA FOR SAVING COMMENTS.\n         SPACE 1\nSAVECMNT SR    R4,R4\n         IC    R4,78(R9)\n         AR    R7,R4\n         LA    R7,1(R7)\n         LR    R4,R3\n         BCTR  R4,0\n         STC   R4,BCOMPR+1\nBCOMPR   CLC   0(0,R7),INITOUT+2\n         BE    SCEXIT\n         SPACE 1\n         L     R5,CURENTRY\n         MVI   0(R5),C'C'\n         SPACE 1\nSCEXIT   BR    R10\n         EJECT\n*  ROUTINE TO SCAN OUTPUT AREA AND INSERT COMMAS WHERE NECESSARY\n         SPACE 1\nADCOMMAS CLI   79(R4),C'X'\n         BNE   ADCBUMP\n         SPACE 1\n         CLC   15(3,R4),=CL3'DCB'\n         BNE   ADCCONT\n         CLI   ECSW,C'1'\n         BNE   ADCCONT\n         MVC   ADCMVCOM+1(1),=XL1'6B'\nADCCONT  LR    R5,R4\n         LA    R5,15(R5)\n         SR    R6,R6\n         IC    R6,78(R4)\n         LA    R6,1(R6)\n         AR    R5,R6\n         CLI   0(R5),C','\n         BE    ADCBUMP\n         BCTR  R5,0\n         CLI   0(R5),C','\n         BE    ADCBUMP\n         LA    R5,1(R5)\n         MVI   0(R5),C','\n         SPACE 1\nADCBUMP  LA    R4,80(R4)\n         LR    R7,R5\n         BCT   R3,ADCOMMAS\n         SPACE 1\nADCMVCOM MVI   0(R7),C' '\n         LA    R3,25\n         L     R4,=AL4(TABLEOUT)\n         MVC   ADCMVCOM+1(1),=XL1'40'\n         BR    R10\n         EJECT\n*  ROUTINE TO MOVE COMMENTS FROM INPUT AREA TO OUTPUT AREA\n         SPACE 1\nADCOMNTS L     R5,=AL4(TABLEIN)\n         LA    R6,25\nCLIC     CLI   0(R5),C'C'\n         BE    COMPUTE\nADCBUMP2 LA    R5,80(R5)\n         BCT   R6,CLIC\n         B     INCMNTS\n         SPACE 1\nCOMPUTE  LA    R7,71\n         LR    R3,R5\n         LA    R3,1(R3)\nCLIBLANK CLI   0(R3),C' '\n         BNE   CMNTSTRT\n         LA    R3,1(R3)\n         BCT   R7,CLIBLANK\n         MVI   0(R5),C' '\n         B     ADCBUMP2\n         SPACE 1\nCMNTSTRT ST    R3,FULLWORD\n         MVC   1(4,R5),FULLWORD\n         LR    R3,R5\n         LA    R3,71(R3)\nCLIBLNK2 CLI   0(R3),C' '\n         BNE   CMNTEND\n         BCTR  R3,0\n         BCT   R7,CLIBLNK2\n         MVI   0(R5),C' '\n         B     ADCBUMP2\n         SPACE 1\nCMNTEND  STC   R7,5(R5)\n         B     ADCBUMP2\n         SPACE 1\nINCMNTS  L     R5,=AL4(TABLEIN)\n         LA    R6,25\nINCSCLIC CLI   0(R5),C'C'\n         BE    INSERT\nINCSBUMP LA    R5,80(R5)\n         BCT   R6,INCSCLIC\n         B     ADCEXIT\n         EJECT\nINSERT   MVC   FULLWORD,1(R5)\n         L     R1,FULLWORD\n         MVC   MVCX+1(1),5(R5)\n         MVC   MVCY+1(1),5(R5)\n         LR    R7,R4\n         SR    R15,R15\n         IC    R15,5(R5)\n         SR    R7,R15\n         SH    R7,=H'9'\n         LA    R7,80(R7)\n         CLI   0(R7),C' '\n         BE    MVCX\n         LA    R4,80(R4)\n         B     INSERT\nMVCX     MVC   0(0,R7),0(R1)\nMVCY     MVC   0(0,R1),INITOUT+2\n         MVC   0(6,R5),INITOUT+2\nBUMP4    LA    R4,80(R4)\n         B     INCSBUMP\n         SPACE 1\nADCEXIT  LA    R3,25\n         L     R4,=AL4(TABLEOUT)\n         BR    R10\n         EJECT\n*  ROUTINE TO CHECK INPUT AREA FOR ANY DATA LEFT.\n         SPACE 2\nLASTLOOK CLI   DCBSW,C'1'\n         BNE   LLEXIT\n         L     R4,=AL4(TABLEIN)\n         SPACE 1\nLLGOON   CLC   0(72,R4),INITOUT+2\n         BNE   CHKITOUT\nLLBUMP   LA    R4,80(R4)\n         BCT   R3,LLGOON\n         SPACE 1\nLLEXIT   LA    R3,25\n         L     R4,=AL4(TABLEOUT)\n         BR    R10\n         SPACE 1\nCHKITOUT MVC   CARD(80),0(R4)\n         LA    R5,72\n         LA    R6,CARD\nCIOCLI   CLI   0(R6),C' '\n         BNE   CIOCOMP\n         LA    R6,1(R6)\n         BCT   R5,CIOCLI\n         B     LLBUMP\n         SPACE 1\nCIOCOMP  LA    R5,DCBTABL\n         LA    R7,14                REMOVED WEIRD DCB OPTIONS      @MLI\nMVCCLID  MVC   CLIDCB+1(1),0(R5)\nCLIDCB   CLC   1(0,R5),0(R6)\n         BE    DCBCONT\n         LA    R5,9(R5)\n         BCT   R7,MVCCLID\n         B     LLBUMP\n         SPACE 1\nDCBCONT  MVC   ECARD(80),INITOUT\n         MVC   ECARD+15(55),0(R6)\n         MVI   ECSW,C'1'\n         B     LLBUMP\n         EJECT\nPUTUT2   DS    0H\n         CLC   CARD+15(6),=C'SPACE=' SPACE PARAMETER?              @MLI\n         BNE   PUTUT2A              NO.                            @MLI\n         L     R1,=AL4(TABLEOUT)    ADDR OF DSN= (MAYBE).          @MLI\n         CLC   15(4,R1),=C'DSN='    DSN PARAMETER?                 @MLI\n         BNE   PUTUT2A              NO. MUST BE TEMP.              @MLI\n         CLI   19(R1),C'&&'         TEMP NAME?                     @MLI\n         BE    PUTUT2A              YES. LEAVE THEM.               @MLI\n         CLI   CARD+22,C'0'         QUANTITY IN BLOCKS?            @MLI\n         BNL   PUTUT2A              THAT'S GOOD.                   @MLI\n        $NOTEMSG 1                                                 @MLI\n         LA    R7,CARD+21           START OF SPACE SUBPARMS        @MLI\n         LA    R8,1                 1 COLUMN AT A TIME             @MLI\n         LA    R9,CARD+71           LAST VALID COLUMN              @MLI\nPUTUT20  CLC   0(5,R7),=C',RLSE'    RLSE PARAMETER?                @MLI\n         BE    PUTUT2A              GOOD FOR YOU.                  @MLI\n         BXLE  R7,R8,PUTUT20        SCAN REST OF INPUT.            @MLI\n        $NOTEMSG 4                                                 @MLI\nPUTUT2A  DS    0H                                                  @MLI\n         CLC   CARD+15(4),=C'DCB='  DCB PARAMETER   ?              @MLI\n         BNE   PUTUT2B              NO.                            @MLI\n         L     R1,=AL4(TABLEOUT)    ADDR OF DSN= (MAYBE).          @MLI\n         CLC   15(4,R1),=C'DSN='    DSN PARAMETER?                 @MLI\n         BNE   PUTUT2B              IGNORE BAD DCB FOR DUMMY ETC.  @MLI\n         LA    R7,CARD+19           START OF DCB SUBPARAMETERS     @MLI\n         LA    R8,1                 1 COLUMN AT A TIME             @MLI\n         LA    R9,CARD+71           LAST VALID COLUMN              @MLI\nPUTUT2AA CLC   0(8,R7),=C'BLKSIZE=' BLKSIZE PARM.                  @MLI\n         BE    PUTUT2AB             YES                            @MLI\n         BXLE  R7,R8,PUTUT2AA       SCAN OVER CARD.                @MLI\n         B     PUTUT2B              BLKSIZE= NOT MANDATORY.        @MLI\nPUTUT2AB DS    0H\n         LA    R7,8(0,R7)           SKIP OVER BLKSIZE=             @MLI\n         LR    R1,R7                SAVE START OF BLKSIZE VALUE    @MLI\nPUTUT2AC CLI   0(R7),C','           END OF BLKSIZE VALUE           @MLI\n         BE    PUTUT2AD             YES.                           @MLI\n         CLI   0(R7),C' '           BLANK IS THE END ALSO          @MLI\n         BE    PUTUT2AD             YES.                           @MLI\n         CLI   0(R7),C')'           OR MAYBE A CLOSE BRACKET.      @MLI\n         BE    PUTUT2AD             YES.                           @MLI\n         BXLE  R7,R8,PUTUT2AC       SCAN UNTIL END OF BLKSIZE      @MLI\n         B     PUTUT2B              QUIT IF IT LOOKS WEIRD.        @MLI\nPUTUT2AD DS    0H\n         SR    R7,R1                R7 = LENGTH OF BLKSIZE VALUE   @MLI\n         BCTR  R7,0                 MINUS 1 FOR EXECUTE            @MLI\n         B     *+10                 SKIP OVER EXECUTED INSTR       @MLI\n         PACK  DOUBLE,0(0,R1)       (EXECUTED)                     @MLI\n         EX    R7,*-6               PACK BLKSIZE VALUE             @MLI\n         CVB   R7,DOUBLE            PICK UP BLOCK SIZE             @MLI\n         CH    R7,=H'15000'         COMPARE TO ARBITRARY SIZE      @MLI\n         BH    PUTUT2B              BIG IS GOOD.                   @MLI\n        $NOTEMSG 2                                                 @MLI\nPUTUT2B  DS    0H                                                  @MLI\n         CLC   CARD+15(6),=C'DISP=(' DISP PARAMETER ?              @MLI\n         BNE   PUTUT2C              NO.                            @MLI\n         LA    R7,CARD+21           START OF DCB SUBPARAMETERS     @MLI\n         LA    R8,1                 1 COLUMN AT A TIME             @MLI\n         LA    R9,CARD+71           LAST VALID COLUMN              @MLI\nPUTUT2BA CLC   0(11,R7),=C',CATLG,KEEP' BAD DISP                   @MLI\n         BE    PUTUT2BB             YES.                           @MLI\n         BXLE  R7,R8,PUTUT2BA       SCAN REMAINDER OF RECORD       @MLI\n         B     PUTUT2C              NO NEWS IS GOOD NEWS.          @MLI\nPUTUT2BB DS    0H                                                  @MLI\n        $NOTEMSG 3                                                 @MLI\nPUTUT2C  DS    0H\n* INSERT A REFORMATTED LINE FROM VARIABLE CARD.\n* ADDLINE IS THE LINE# OF THE LAST REFORMATTED LINE, THAT IS THE LINE\n* AFTER WHICH TO INSERT NEW STUFF.  SINCE THIS LOGIC MAY HAVE CHANGED\n* THE NUMBER OF LINES IN THE DATASET, LLINE MUST BE RESET, IF WE SEEM\n* TO BE AT THE BOTTOM.\n         SPACE 1\n         ISREDIT ,'LINE_AFTER &&ADDLINE = (CARD) '\n         L     R1,ADDLINE           PICK OLD INSERT POINT.         @MLI\n         LA    R1,1(0,R1)           PLUS 1.                        @MLI\n         ST    R1,ADDLINE           NEXT INSERT AFTER THE LAST.    @MLI\n         CLC   ADDLINE,LLINE        DOES IT LOOK LIKE THE BOTTOM   @MLI\n         BLR   R10                  NO. GOBACK.                    @MLI\n         ISREDIT ,'(LLINE) = LINENUM .ZLAST '                      @MLI\n         SPACE 1\nUT2RET   BR    R10\n         EJECT\nSAVEAREA DS    18F\n         SPACE 1\n         ISPF  PARMS                                               @MLI\n         SPACE 1\nFINESAVE DS    F\nOUTADDR  DS    F\nCURENTRY DS    F\nNXTENTRY DS    F\nCOUNT    DS    F\nSTART    DS    F\nSTOP     DS    F\n         SPACE 1\nLINENO   DS    F                    CURRENT LINE NUMBER            @MLI\nLLINE    DS    F                    LAST LINE.                     @MLI\nADDLINE  DS    F                    LINE AFTER WHICH TO INSERT.    @MLI\nFULLWORD DS    F\nDOUBLE   DS    D\n         SPACE 1\nPRNT1SW  DC    XL1'00'\nPRNT2SW  DC    XL1'00'\nUT2SW    DC    XL1'00'\nFINEON   DC    C'0'\nMOREDD   DC    C'0'\nEOFUT1   DC    C'0'\nHITSW    DC    C'0'\nEODCSW   DC    C'0'\nDCBSW    DC    C'1'\nECSW     DC    C' '\nPTABCNT  DC    AL1(15)              COUNT OF ENTRIES IN \"TABLE\"    @MLI\n         SPACE 1\nMSG1     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' SPACE SHOULD BE AX\n               LLOCATED IN BLOCKS.'''                              @MLI\nM1LNO    DC    F'-4',32F'0'                                        @MLI\nMSG2     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' BLOCK SIZE IS TOOX\n                SMALL.'''                                          @MLI\nM2LNO    DC    F'-4',32F'0'                                        @MLI\nMSG3     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' USE DISP=(,CATLG,X\n               DELETE) NOT DISP=(,CATLG,KEEP).'''                  @MLI\nM3LNO    DC    F'-4',32F'0'                                        @MLI\nMSG4     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' THE \"RLSE\" PARAMEX\n               TER SHOULD BE USED.'''                              @MLI\nM4LNO    DC    F'-4',32F'0'                                        @MLI\n         SPACE 1\nINITIN   DC    80XL1'FF'\nINITOUT  DC    CL2'//'\n         DC    CL78' '\n         SPACE 1\nCARD     DS    CL80\n         DC    CL40' '\nCARDSAVE DS    CL80\nECARD    DS    CL80\n         DC    CL40' '      SAFETY FILLER\n         SPACE 1\nSLOTSAVE DC    CL11' '\n         SPACE 1\n         LTORG\n         SPACE 1\nDCBTABL  DC    XL1'4',CL8'BFTEK   '\n         DC    XL1'6',CL8'BLKSIZE '\n         DC    XL1'4',CL8'BUFNO   '\n         DC    XL1'2',CL8'DEN     '\n         DC    XL1'4',CL8'DSORG   '\n         DC    XL1'4',CL8'EROPT   '\n         DC    XL1'3',CL8'FUNC    '\n         DC    XL1'5',CL8'KEYLEN  '\n         DC    XL1'4',CL8'LIMCT   '\n         DC    XL1'4',CL8'LRECL   '\n         DC    XL1'2',CL8'NCP     '\n         DC    XL1'4',CL8'OPTCD   '\n         DC    XL1'4',CL8'RECFM   '\n         DC    XL1'2',CL8'RKP     '\n         SPACE 2\n*ABLE    DS    25CL25                                              @MLI\nTABLE    DS    0H                                                  @MLI\n         DC AL4(TABLEOUT+000),AL1(003),CL20'DSN=      '            @MLI\n         DC AL4(TABLEOUT+000),AL1(005),CL20' DATA     '            @MLI\n         DC AL4(TABLEOUT+000),AL1(001),CL20' *        '            @MLI\n         DC AL4(TABLEOUT+000),AL1(006),CL20'SYSOUT=   '            @MLI\n         DC AL4(TABLEOUT+000),AL1(004),CL20'DUMMY     '            @MLI\n         DC AL4(TABLEOUT+080),AL1(004),CL20'DISP=     '            @MLI\n         DC AL4(TABLEOUT+160),AL1(004),CL20'UNIT=     '            @MLI\n         DC AL4(TABLEOUT+240),AL1(005),CL20'SPACE=    '            @MLI\n         DC AL4(TABLEOUT+320),AL1(005),CL20'LABEL=    '            @MLI\n         DC AL4(TABLEOUT+400),AL1(003),CL20'VOL=      '            @MLI\n         DC AL4(TABLEOUT+480),AL1(003),CL20'AMP=      '            @MLI\n         DC AL4(TABLEOUT+560),AL1(006),CL20'COPIES=   '            @MLI\n         DC AL4(TABLEOUT+640),AL1(003),CL20'FCB=      '            @MLI\n         DC AL4(TABLEOUT+720),AL1(005),CL20'CHARS=    '            @MLI\n         DC AL4(TABLEOUT+1920),AL1(003),CL20'DCB=      '           @MLI\nTABLEIN  DS    25CL80\nTABLEOUT DS    25CL80\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTICAT": {"ttr": 17416, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x1e\\xb7\\x1e\\xb7\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 7863, "newlines": 7863, "modlines": 0, "user": "LANEJ"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MSGS": {"ttr": 20740, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x00Q\\x00Q\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=EDX00\nEDX001   'DATASET MIGRATED'                  .ALARM=YES\n'&EDBRDSNM has been migrated by DFHSM. HRECALL it first.'\n\nEDX002   'MIGRATE REQUESTED'\n'A request to migrate &EDBRDSNM has been sent to DFHSM.'\n\nEDX003   'RECALL REQUESTED'\n'A request to recall &EDBRDSNM has been sent to DFHSM.'\n\nEDX004   'DATASET NOT FOUND!'                .ALARM=YES\n'&EDBRDSNM cannot be found. Check the catalog.'\n\nEDX005   'DELETED'\n'&EDBRDSNM has been deleted.'\n\nEDX006   'NOT DELETED!'                      .ALARM=YES\n'&EDBRDSNM has not been deleted. RC=&LASTCC'\n\nEDX007   'ALLOCATED'\n'&EDBRDSNM has been allocated.'\n\nEDX008   'NOT ALLOCATED!'                    .ALARM=YES\n'&EDBRDSNM has not been allocated. RC=&LASTCC'\n\nEDX009   'INVALID UNIT!'                     .ALARM=YES\n'Valid units are: 3330,3350,3375 and 3380'\n\n./       ADD   NAME=EDX01\nEDX010   'INVALID DSORG'                     .ALARM=YES\n'Only PS and PO datasets can be allocated from here.'\n\nEDX011   'INVALID RECFM'                     .ALARM=YES\n'Try one of: V,F,VB,FB,VBA,FBA,VBM or FBM.'\n\nEDX012   'INVALID UNIT'                      .ALARM=YES\n'Valid units of allocation are: BLOCK, TRACK and CYLINDER.'\n\nEDX013   'BROWSE FAILED'                     .ALARM=YES\n'BROWSE failed for &EDBRDSNM - dataset not found.'\n\nEDX014   'EDIT FAILED'                       .ALARM=YES\n'EDIT failed for &EDBRDSNM - dataset not found.'\n\nEDX015   '? FAILED'                          .ALARM=YES\n'INFO request failed for &EDBRDSNM - dataset not found.'\n\nEDX016   'V FAILED'                          .ALARM=YES\n'&EDBRDSNM is not on any volume.'\n\nEDX017   'Verified.'                         .ALARM=YES\n'Your list is now synchronized with reality.'\n\n./       ADD   NAME=VSAM00\nVSAM000 .ALARM=YES                             .WINDOW=NORESP\n'dataset specified is not a vsam dataset.'\nVSAM001 .ALARM=YES                             .WINDOW=NORESP\n'&MSGCONT.'\nVSAM002 .ALARM=YES                             .WINDOW=NORESP\n'&DSVSAM COULD NOT BE ALLOCATED.'\nVSAM003 .ALARM=YES                             .WINDOW=NORESP\n'Invalid specification in a VSAM dataset name.'\nVSAM004 .ALARM=YES                             .WINDOW=NORESP\n'Empty VSAM dataset has been requested.'\nVSAM005 .ALARM=YES                             .WINDOW=NORESP\n'OPEN ACB failed.'\nVSAM006 .ALARM=YES                             .WINDOW=NORESP\n'EDIREC severe error.'\nVSAM007 'Dataset recovered.'  .ALARM=YES       .WINDOW=NORESP\n'&DSVSAM was recovered from backup dataset.'\nVSAM008 'Dataset saved.'  .ALARM=YES           .WINDOW=NORESP\n'&DSVSAM was replaced.'\nVSAM009 'VSAM error.'  .ALARM=YES              .WINDOW=NORESP\n'VSAM macro return code is not zero.'\n./       ADD   NAME=VSAM01\nVSAM010 'GET failed.'  .ALARM=YES              .WINDOW=NORESP\n'VSAM GET return code is &RETCODE reason code is &REASON'\nVSAM011 'PUT failed.'  .ALARM=YES              .WINDOW=NORESP\n'VSAM PUT return code is &RETCODE reason code is &REASON'\nVSAM012 'Length error.'  .ALARM=YES            .WINDOW=NORESP\n'Invalid record length encountered. 255 is max.'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NOCELL": {"ttr": 20743, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x004r4r\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 13426, "newlines": 13426, "modlines": 0, "user": "LANEJ"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PANELS": {"ttr": 26120, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x05@\\x05@\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 1344, "newlines": 1344, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=AFPFONT$\n)Attr Default(%+_)\n   % type(text  ) intens(high) color(yellow)\n/* + type(text  ) intens(low )                   information only  */\n/* _ type( input) intens(high) caps(on ) just(left )               */\n   | type(text)   intens(low)  color(turq)\n   $ type(text)   intens(low)  color(green)\n   @ type(text)   intens(low)  color(white)\n   ! type( input) intens(high) caps(on ) just(left ) pad('_')\n   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(white)\n   \u00a6 type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yellow)\n   \u00ac type(output)  intens(low)  caps(off) just(left ) pad(' ') color(turq)\n)Body  Expand(//)\n@-/-/- AFP Fonts Table Display Panel -/-/-\n@Command ===>_zcmd                                 / /@Scroll ===>_amt +\n%\n$Commands:|Sort, Only, Locate\n$Fields:|  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset\n%\n@    Name                           Size   Weight           Code Page\n%    Width           Style                                  Coded Font\n|    Points Fix-Pro  Code Page Description                  Character Set\n+\n)MODEL ROWS(SCAN)\n!z +#z                              +#z  +#z              +#z\n+   \u00a6z             +\u00a6z                                    +\u00a6z\n+   \u00acz    +\u00acz      +\u00acz                                    +\u00acz\n)Init\n  .ZVARS = '(tsel typeface pointsiz weight codepage  +\n             width style codefont +\n             codepts charfp codepd charset)'\n  &amt = TRANS(&amt ' ',CSR *,*)\n)Reinit\n)Proc\n)End\n./       ADD   NAME=AFPFONTE\n)Attr Default(%+_)\n   % type(text  ) intens(high) color(yellow)\n/* + type(text  ) intens(low )                   information only  */\n/* _ type( input) intens(high) caps(on ) just(left )               */\n   | type(text)   intens(low)  color(turq)\n   $ type(text)   intens(low)  color(green)\n   @ type(text)   intens(low)  color(white)\n   ! type( input) intens(high) caps(on ) just(left ) pad('_')\n   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(white)\n   \u00a6 type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yellow)\n   \u00ac type(output)  intens(low)  caps(off) just(left ) pad(' ') color(turq)\n)Body  Expand(//)\n@-/-/- AFP Fonts Table Display Panel -/-/-\n@Command ===>_zcmd                                 / /@Scroll ===>_amt +\n%\n$Commands:|Sort, Only, Locate        $Options:|S - Build Define Font (.df)\n$Fields:|  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset\n%\n@Sel Name                Weight     Size Style      Code Page\n+\n)MODEL ROWS(SCAN)\n!z +#z                 +\u00a6z        +\u00a6z  +\u00a6z        +\u00a6z\n)Init\n  .ZVARS = '(tsel typeface weight pointsiz style codepd)'\n  &amt = TRANS(&amt ' ',CSR *,*)\n)Reinit\n)Proc\n                                  /* Process )BODY fields here      */\n  If (&ztdsels \u00ac= 0000)           /* If user selected some rows ... */\n                                  /* ... process )MODEL fields here */\n    VER (&TSEL,LIST,S)\n)End\n./       ADD   NAME=AFPFONTS\n)Attr Default(%+_)\n   % type(text  ) intens(high) color(yellow)\n/* + type(text  ) intens(low )                   information only  */\n/* _ type( input) intens(high) caps(on ) just(left )               */\n   | type(text)   intens(low)  color(turq)\n   $ type(text)   intens(low)  color(green)\n   @ type(text)   intens(low)  color(white)\n   ! type( input) intens(high) caps(on ) just(left ) pad('_')\n   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(white)\n   \u00a6 type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yellow)\n   \u00ac type(output)  intens(low)  caps(off) just(left ) pad(' ') color(turq)\n)Body  Expand(//)\n@-/-/- AFP Fonts Table Display Panel -/-/-\n@Command ===>_zcmd                                 / /@Scroll ===>_amt +\n%\n$Commands:|Sort, Only, Locate\n$Fields:|  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset\n%\n@    Name                Weight     Size Style      Code Page\n+\n)MODEL ROWS(SCAN)\n!z +#z                 +\u00a6z        +\u00a6z  +\u00a6z        +\u00a6z\n)Init\n  .ZVARS = '(tsel typeface weight pointsiz style codepd)'\n  &amt = TRANS(&amt ' ',CSR *,*)\n)Reinit\n)Proc\n)End\n./       ADD   NAME=AFPFONTX\n)Attr Default(%+_)\n   % type(text  ) intens(high) color(yellow)\n/* + type(text  ) intens(low )                   information only  */\n/* _ type( input) intens(high) caps(on ) just(left )               */\n   | type(text)   intens(low)  color(turq)\n   $ type(text)   intens(low)  color(green)\n   @ type(text)   intens(low)  color(white)\n   ! type( input) intens(high) caps(on ) just(left ) pad('_')\n   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(white)\n   \u00a6 type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yellow)\n   \u00ac type(output)  intens(low)  caps(off) just(left ) pad(' ') color(turq)\n)Body  Expand(//)\n@-/-/- AFP Fonts Table Display Panel -/-/-\n@Command ===>_zcmd                                 / /@Scroll ===>_amt +\n%\n$Commands:|Sort, Only, Locate        $Options:|M - Map\n$Fields:|  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset\n%\n@Sel Name                Weight     Size Style      Code Page\n+\n)MODEL ROWS(SCAN)\n!z +#z                 +\u00a6z        +\u00a6z  +\u00a6z        +\u00a6z\n)Init\n  .ZVARS = '(tsel typeface weight pointsiz style codepd)'\n  &amt = TRANS(&amt ' ',CSR *,*)\n)Reinit\n)Proc\n                                  /* Process )BODY fields here      */\n  If (&ztdsels \u00ac= 0000)           /* If user selected some rows ... */\n                                  /* ... process )MODEL fields here */\n    VER (&TSEL,LIST,M)\n)End\n./       ADD   NAME=BRDDSN\n)ATTR\n  \u00ac TYPE(INPUT) INTENS(NON)\n)BODY EXPAND(\u00a2\u00a2)\n%\u00a2-\u00a2  &FUNC - ENTRY PANEL  \u00a2-\u00a2\n%COMMAND ===>_ZCMD                                                             +\n%\n+ENTER PARTITIONED OR SEQUENTIAL DATA SET NAME\n+   DATA SET NAME %===>_DSN\n+   VOLUME SERIAL %===>_VOL   +  (if not cataloged)\n+\n)INIT\n)PROC\n   IF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\n   VER (&DSN,NB,DSNAME)\n   VER (&VOL,NAME)\n)END\n./       ADD   NAME=BRIFPAN\n)ATTR DEFAULT(%+_)\n)BODY EXPAND(//)\n%-/-/- Browse VSAM Dataset -/-/-\n%\n+VSAM Dataset:\n+   Project%===>_PRJV     +\n+   Group  %===>_LIBV     +\n+   Type   %===>_TYPV     +\n+\n+Other VSAM dataset:\n+   Dataset name%===>_WDSN                                            +\n+\n)INIT\n &ZCMD = ' '\n IF (&WDSN \u00ac= ' ')  .CURSOR = WDSN\n .CURSOR = PRJV\n)PROC\n VPUT (PRJV,LIBV,TYPV) PROFILE\n IF (&WDSN = ' ')\n    &DSVSAM = '&PRJV..&LIBV..&TYPV'\n    VER (&DSVSAM,DSNAME)\n ELSE\n    &W = TRUNC(&WDSN,1)\n    IF (&W = '''')\n       &DSVSAM = .TRAIL\n       &DSVSAM = TRUNC(&DSVSAM,'''')\n    ELSE\n       &DSVSAM = '&SYSUID..&WDSN'\n    VER (&DSVSAM,DSNAME)\n)END\n./       ADD   NAME=CATBRO\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)\n 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)\n 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)\n 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)\n 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)\n 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)\n)BODY WIDTH(&ZWIDTH) EXPAND(//)\n\u00a2LISTCAT &B(&OBJNAME)                 / /              %LINE!ZLINES%COL!ZCOLUMS+\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_Z   +\n|ZDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  .ZVARS = 'ZSCBR'         /* SCROLL AMT VARIABLE NAME  */\n  IF (&ZMEMB \u00ac= ' ')\n    &ZTITLE = '&ZDSN(&ZMEMB)&ZLEVEL '\n  IF (&ZMEMB = ' ')\n    &ZTITLE = '&ZDSN&ZLEVEL '\n  &MIXED = MIX\n  IF (&ZPDMIX = N)         /* EBCDIC MODE REQUESTED     */\n    &MIXED = EBCDIC\n\n)REINIT\n  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)\n  .ATTRCHAR(+) = 'INTENS(&ZINTEN)'\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(ZDATA)\n\n)END\n\n/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)\n/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)\n./       ADD   NAME=DSN\n)ATTR\n   @ TYPE(OUTPUT)\n   | TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n   $ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(//)\n%-/-/- DSN PANEL -/-/-\n+COMMAND ====>_ZCMD                         +SCROLL ====>_AMT\n+\n$LINE COMMANDS:|LC$(Listc)|L$(Listd)|E$(Edit)|B$(Browse)|HR$(Hrecall)|G$(Go to)\n+\n+      DDNAME     STEP        DSNAME                                      VOLUME\n)MODEL\n+_S  +@DDNAME    @STEP       _DSN                                        @VOLUME\n)INIT\n &AMT = 'CSR'\n &ZCMD = &Z\n &S = &Z\n)END\n./       ADD   NAME=EDBRADD\n)ATTR DEFAULT(%+_)\n  $ TYPE(INPUT) INTENS(LOW) PAD(_)    /* input field padded with '_' */\n  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */\n)BODY  EXPAND(//)\n%EDX -/-/- Add more dataset(s) to your list -/-/- EDX\n%COMMAND ===>_ZCMD                                                             +\n%\n+   Enter information about the dataset you want to add:\n+\n+   Dataset Name  ......$EDBRDS                                       +\n+   Level         ......$EDBRLV               + (Dsname takes precedence)\n+   Volume Serial ......$EDBRVOLS+ (Optional)\n+\n+\n)INIT\n)PROC\n IF (&EDBRDS \u00ac= &Z)\n     &TEMP = TRUNC (&EDBRDS,'''')\n     &TRAIL = .TRAIL\n     IF (&TRAIL = &Z)\n         &EDBRDSNM = '&ZPREFIX..&EDBRDS'\n     IF (&TRAIL \u00ac= &Z)\n         &EDBRDSNM = TRUNC (&TRAIL,'''')\n IF (&EDBRDS = &Z)\n    VER (&EDBRLV,NONBLANK)\n)END\n./       ADD   NAME=EDBRDELT\n)ATTR DEFAULT(%+_)\n       %   TYPE(TEXT) INTENS(HIGH)\n       +   TYPE(TEXT) INTENS(LOW)\n       _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)\n  @   TYPE(OUTPUT)  INTENS(HIGH)\n)BODY  EXPAND(//)\n%EDX -/-/- Delete your dataset? -/-/- EDX\n%Command ===>_ZCMD\n+\n+  Please confirm your request to delete this dataset.\n+\n+      Data Set Name%===>@EDBRDSNM\n+          on Volume%===>@EDBRVOLS  +\n+\n+  Press%ENTER+to proceed with delete\n+  Press%PF3+or enter the%END+command to cancel\n+\n)INIT\n)PROC\n)END\n./       ADD   NAME=EDBRDROP\n)ATTR DEFAULT(%+_)\n  $ TYPE(INPUT) INTENS(LOW) PAD(_)    /* input field padded with '_' */\n  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */\n)BODY  EXPAND(//)\n%EDX -/-/- Drop some datasets from your list -/-/- EDX\n%COMMAND ===>_ZCMD                                                             +\n%\n+   Enter information about the datasets you want to drop:\n+\n+   Level         ......$EDBRDLEV             +\n+\n+\n)INIT\n)PROC\n VER (&EDBRDLEV,NB)\n)END\n./       ADD   NAME=EDBRHELP\n)ATTR DEFAULT(%+_)\n      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */\n      /*  + TYPE(TEXT) INTENS(LOW)       information only            */\n      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */\n)BODY  EXPAND(//)\n%EDX -/-/- Tutorial -/-/- EDX\n%SELECTION ===>_ZCMD                                                           +\n%\n+\n+\n   Personal Dataset Manager is an ISPF dialog that provides an improved\n   interface to%EDIT+and%BROWSE+as well as other dataset-oriented\n   functions. It does this by maintaining an ISPF table of the datasets\n   you are currently working with and providing command functions both\n   to maintain the list and to operate on the datasets.\n\n   The following topics are presented in sequence, or may be selected by\n   number:\n\n  %1+ LIST Commands\n  %2+ LINE Commands\n\n)PROC\n     &ZSEL = TRANS( &ZCMD\n                1,EDBRLIST\n                2,EDBRLINE\n                *,'?'\n                )\n)END\n./       ADD   NAME=EDBRINFO\n)ATTR DEFAULT(%+_)\n  $ TYPE(OUTPUT) INTENS(HIGH) PAD(' ')\n  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */\n)BODY  EXPAND(//)\n%EDX -/-/- Information about your dataset -/-/- EDX\n%COMMAND ===>_ZCMD                                                             +\n%\n+   Dataset Name  ......$EDBRDSNM                                              +\n+   Volume Serial ......$EDBRVOLS+\n+   Unit Name     ......$SYSUNIT+\n+   Organization  ......$SYSDSORG+\n+   Record Format ......$SYSRECFM+\n+   Record Length ......$SYSLRECL+\n+   Block Size    ......$EDBRBLK+\n+   Allocation unit ....$SYSUNITS+\n+   Allocated Space ....$SYSALLOC+     (in the above allocation units)\n+   Used Space      ....$SYSUSED+      (in the above allocation units)\n+   Primary Space   ....$EDBRPRIM+     (in the above allocation units)\n+   Secondary Space ....$EDBRSECQ+     (in the above allocation units)\n+   Extents         ....$EDBREXT+\n+   Creation Date   ....$EDBRCDTE+\n+   Last Used Date  ....$EDBREFDT+\n+   Change Indicator....$EDBRUPDT+\n+\n+\n)INIT\n)PROC\n)END\n./       ADD   NAME=EDBRLINE\n)ATTR DEFAULT(%+_)\n      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */\n      /*  + TYPE(TEXT) INTENS(LOW)       information only            */\n      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */\n)BODY  EXPAND(//)\n%EDX -/-/- Line commands -/-/- EDX\n%SELECTION ===>_ZCMD                                                           +\n+\n   The following commands may be entered in the selection field beside\n   any of the dataset names:\n\n  %?+        to display information about the dataset's attributes.\n  %A+        to ALLOCATE a new dataset using this one as a model.\n  %B+        to ISPF BROWSE the dataset.\n  %D+        to delete the dataset.\n  %E+        to ISPF EDIT the dataset.\n  %G+        to display space usage with a character graphic.\n  %HL+       to display DFHSM information about a dataset.\n  %HM+       to migrate the dataset with DFHSM.\n  %HR+       to recall the dataset from DFHSM migration.\n  %LB+       to list DFHSM backup version of the dataset.\n  %P+        to invoke the PDS84 dialog on the dataset.\n  %PR+       to print the dataset.\n  %V+        to set or update the VOLSER field.\n  %X+        to drop the dataset from the list.\n\n%NOTE:+this dialog picks up on the fact that a dataset has been migrated and\n       displays a message to that effect if you try to do something that needs\n       the dataset unmigrated. You have to explicitly HRECALL it first.\n)PROC\n  &ZCONT = EDBRHELP\n  &ZUP   = EDBRHELP\n)END\n./       ADD   NAME=EDBRLIST\n)ATTR DEFAULT(%+_)\n      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */\n      /*  + TYPE(TEXT) INTENS(LOW)       information only            */\n      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */\n)BODY  EXPAND(//)\n%EDX -/-/- List commands -/-/- EDX\n%SELECTION ===>_ZCMD                                                           +\n%\n+\n+\n   The following commands may be entered in the command entry field at\n   the top of the screen to act on the entire list of datasets:\n\n  %SORT+     to reorder the list by dsname,volume or last use date.\n  %ADD+      to add another dataset or group of datasets to the list.\n  %DROP+     to exclude some of the datasets from the list.\n  %VERIFY+   to delete from the list datasets that no longer exist, and update\n             the VOLSERS of all others.\n\n)PROC\n  &ZCONT = EDBRLINE\n  &ZUP   = EDBRHELP\n)END\n./       ADD   NAME=EDBRMODL\n)ATTR DEFAULT(%+_)\n  # TYPE(OUTPUT) INTENS(HIGH) PAD(' ')\n  $ TYPE(INPUT) INTENS(HIGH) PAD(' ')\n  ! TYPE(INPUT) INTENS(LOW) PAD(' ') /* INPUT FIELD PADDED WITH '       ' */\n)BODY  EXPAND(//)\n%EDX -/-/- Allocate a new dataset using #EDBRMDSN%as a model -/-/- EDX\n%COMMAND ===>_ZCMD                                                             +\n%\n+   Dataset Name  ......$EDBRDSNM                                              +\n+   Volume Serial ......$EDBRVOLS+\n+   Unit Name     ......$SYSUNIT+\n+   Organization  ......$SYSDSORG+\n+   Record Format ......$SYSRECFM+\n+   Record Length ......$SYSLRECL+\n+   Block Size    ......$EDBRBLK+\n+   Allocation unit ....$SYSUNITS+\n+   Allocated Space ....$SYSALLOC+     (in the above allocation units)\n+   Primary Space   ....$EDBRPRIM+     (in the above allocation units)\n+   Secondary Space ....$EDBRSECQ+     (in the above allocation units)\n+   Directory Blocks ...$EDBRDIRB+\n+\n+\n+ Change any of the above data and press%ENTER+to allocate\n+ Press%PF3+or enter the%END+command to cancel.\n     REFRESH (FIELD1,FIELD2,....)\n)INIT\n     .CURSOR = EDBRDSNM\n     &EDBRDIRB = TRANS (&EDBRDIRB ' ',0)\n)PROC\n    VER (&EDBRDSNM,NB)\n    VER (&EDBRDSNM,DSNAME)\n    IF (&EDBRDSNM \u00ac= &Z)\n        &INPUTDSN = &EDBRDSNM\n        &TEMP = TRUNC (&INPUTDSN,'''')\n        &TRAIL = .TRAIL\n        IF (&TRAIL = &Z)\n            &EDBRDSNM = '&ZPREFIX..&INPUTDSN'\n        IF (&TRAIL \u00ac= &Z)\n            &EDBRDSNM = TRUNC (&TRAIL,'''')\n    IF (&INPUTDSN = &Z)\n        &EDBRDSNM = &Z\n    VER (&EDBRVOLS,NB)\n    VER (&EDBRVOLS,PICT,CCCCCC)\n    VER (&SYSUNIT,NB)\n    VER (&SYSUNIT,NUM)\n    VER (&SYSUNIT,LIST,3380,3375,3350,3330,MSG=EDX0009)\n    VER (&SYSDSORG,NB)\n    VER (&SYSDSORG,LIST,PS,PO,MSG=EDX0010)\n    VER (&SYSRECFM,NB)\n    VER (&SYSRECFM,LIST,F,V,FB,VB,FBA,VBA,FBM,VBM,MSG=EDX0011)\n    VER (&SYSLRECL,NB)\n    VER (&SYSLRECL,NUM)\n    VER (&SYSLRECL,RANGE,1,32760)\n    VER (&EDBRBLK,NB)\n    VER (&EDBRBLK,NUM)\n    VER (&EDBRBLK,RANGE,1,32760)\n    VER (&SYSUNITS,NB)\n    VER (&SYSUNITS,LIST,TRACK,BLOCK,CYLINDER,MSG=EDX0012)\n    VER (&SYSALLOC,NB)\n    VER (&SYSALLOC,NUM)\n    VER (&EDBRPRIM,NB)\n    VER (&EDBRPRIM,NUM)\n    VER (&EDBRPRIM,RANGE,1,9999)\n    VER (&EDBRSECQ,NB)\n    VER (&EDBRSECQ,NUM)\n    VER (&EDBRDIRB,NB)\n    VER (&EDBRDIRB,NUM)\n)END\n./       ADD   NAME=EDBRPANL\n)ATTR DEFAULT(%+_)\n   ! TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n   \u00ac TYPE(OUTPUT) INTENS(LOW ) CAPS(OFF) JUST(ASIS ) PAD('_')\n)BODY  EXPAND(//)\n%EDX -/-/- Personal Dataset Manager -/-/- EDX\n%Command ===>_OPT                                  / /%Scroll ===>_AMT +\n%\n+Enter a line command in the selection field to process a dataset:\n+\n%Opt  Dataset name                                 Volume  Lstus     Last action\n+\n)MODEL\n!Z +\u00acZ                                           +\u00acZ     +\u00acZ       +\u00acZ         +\n)INIT\n  .HELP = EDBRHELP                /* INSERT NAME OF TUTORIAL PANEL\n  .ZVARS = '(SELECT EDBRDSNM EDBRVOLS EDBRLSTU EDBRLSTA) '\n  &AMT = PAGE\n  &SELECT = &Z\n  &OPT = &Z\n)PROC\n)END\n./       ADD   NAME=EDBRPRNT\n)ATTR DEFAULT(%+_)\n       %   TYPE(TEXT) INTENS(HIGH)\n       +   TYPE(TEXT) INTENS(LOW)\n       _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)\n  @   TYPE(OUTPUT)  INTENS(HIGH)\n)BODY  EXPAND(//)\n%EDX -/-/- Print your dataset -/-/- EDX\n%Command ===>_ZCMD\n+\n+\n+\n+Enter Data Set Name%===>@EDBRDSNM\n+       Sysout Class%===>_POSOC+\n+               Dest%===>_PODEST                +\n+\n+         Copy Count%===>_POCOPY+       Hold%===>_POHOLD +\n+              Forms%===>_FORM+         UCS%===>_UCS +\n+                FCB%===>_FCB +         Pagelength%===>_POPAGELN\n+\n+\n+Single-Double Space%===>_POSPACE    +SS or DS or blank for CC\n)INIT\n .CURSOR = POSOC\n &POSOC = TRANS (&POSOC ' ',A *,*)\n &POCOPY = TRANS (&POCOPY ' ',1 *,*)\n &PODEST = TRANS (&PODEST ' ',&Z *,*)\n &POHOLD = TRANS (&POHOLD ' ',NO *,*)\n &POPAGELN = TRANS (&POPAGELN ' ',60 *,*)\n)PROC\n VER (&POSOC,NONBLANK)     VER (&POSOC,PICT,C)\n IF (&PODEST \u00ac= &Z)\n    VER(&PODEST,EBCDIC)\n VER (&POCOPY,NONBLANK)        VER (&POCOPY,NUM)\n &POHOLD = TRANS (TRUNC (&POHOLD,1) Y,HOLD H,HOLD N,NOHOLD *,*)\n VER (&POHOLD,NONBLANK)        VER (&POHOLD,LIST,HOLD,NOHOLD)\n IF (&FORM \u00ac= &Z)\n    VER (&FORM,PICT,CCCC)\n IF (&UCS \u00ac= &Z)\n    VER (&UCS,PICT,CCCC)\n VER (&POPAGELN,NONBLANK)    VER (&POPAGELN,NUM)\n &POSPACE = TRANS (TRUNC (&POSPACE,1) S,SS D,DS *,*)\n VER (&POSPACE,LIST,SS,DS)\n VPUT (PODSN POSOC PODEST POCOPY POHOLD FORM UCS ) PROFILE\n VPUT (POPAGELN  FCB) PROFILE\n VPUT (POSPACE) PROFILE\n)END\n./       ADD   NAME=EDDDSN\n)ATTR\n  \u00ac TYPE(INPUT) INTENS(NON)\n)BODY EXPAND(\u00a2\u00a2)\n%\u00a2-\u00a2  &FUNC - ENTRY PANEL  \u00a2-\u00a2\n%COMMAND ===>_ZCMD                                                             +\n%\n+ENTER PARTITIONED OR SEQUENTIAL DATA SET NAME\n+   DATA SET NAME %===>_DSN\n+   VOLUME SERIAL %===>_VOL   +  (if not cataloged)\n+\n+   PASSWORD      %===>\u00acPASSWORD+\n+\n+   PROFILE NAME  %===>_PROFILE +\n+   INITIAL MACRO %===>_MACRO   +\n+\n)INIT\n)PROC\n   IF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\n   VER (&DSN,NB,DSNAME)\n   VER (&VOL,NAME)\n)END\n./       ADD   NAME=EDIFPAN\n)ATTR DEFAULT(%+_)\n)BODY EXPAND(//)\n%-/-/- Edit VSAM Dataset -/-/-\n%\n+VSAM Dataset:\n+   Project%===>_PRJV     +\n+   Group  %===>_LIBV     +\n+   Type   %===>_TYPV     +\n+\n+Other VSAM dataset:\n+   Dataset name%===>_WDSN                                            +\n+\n)INIT\n &ZCMD = ' '\n IF (&WDSN \u00ac= ' ')  .CURSOR = WDSN\n .CURSOR = PRJV\n)PROC\n VPUT (PRJV,LIBV,TYPV) PROFILE\n IF (&WDSN = ' ')\n    &DSVSAM = '&PRJV..&LIBV..&TYPV'\n    VER (&DSVSAM,DSNAME)\n ELSE\n    &W = TRUNC(&WDSN,1)\n    IF (&W = '''')\n       &DSVSAM = .TRAIL\n       &DSVSAM = TRUNC(&DSVSAM,'''')\n    ELSE\n       &DSVSAM = '&SYSUID..&WDSN'\n    VER (&DSVSAM,DSNAME)\n)END\n./       ADD   NAME=ISR@PRIM\n)ATTR\n/* Scrollable primary option menu                                     */\n/* R. F. Buxton -  BUXTON @ WINVMC                                    */\n/* 10/01/84                                                           */\n  # TYPE(TEXT) COLOR(pink) hilite(reverse)\n  \u00ac area(dynamic) extend(on) scroll(on)\n  $ type(dataout) intens(high) color(yellow)\n  \u00a2 type(dataout) intens(low) color(turq)\n  @ type(dataout) intens(high) color(green)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%---------------/-/- #ISPF-PDF 3.2.0 PRIMARY OPTION MENU %--/-/----------------%\n%OPTION  ===>_ZCMD                           / /              +SCROLL ===>_PSCR%\n+\n+ \u00acDYNAREA                                                                   \u00ac\n+\n+ Use UP and DOWN PF keys or commands to scroll MENU\n)INIT\n&LINELEN = 76                  /* Length of dynamic area lines      */\n/* Date and time reformatting   */\n/* Format date */\n  &TEMP = TRANS (&ZDAY 01,1 02,2 03,3 04,4 05,5 06,6 07,7 08,8 09,9 *,*)\n  &MONTH = TRANS (&ZMONTH 01,January 02,February 03,March\n                          04,April   05,May      06,June\n                          07,July    08,August   09,September\n                          10,October 11,November 12,December)\n  &DATE = '&MONTH &TEMP'\n  &YRMON = '&ZYEAR.&ZMONTH'\n  &DAY1 = TRANS( &YRMON\n     8501,3  8601,4   8701,5\n     8502,6  8602,7   8702,1\n     8503,6  8603,7   8703,1\n     8504,2  8604,3   8704,4\n     8505,4  8605,5   8705,6\n     8506,7  8606,1   8706,2\n     8507,2  8607,3   8707,4\n     8508,5  8608,6   8708,7\n     8509,1  8609,2   8709,3\n     8510,3  8610,4   8710,5\n     8511,6  8611,7   8711,1\n     8512,1  8612,2   8712,3\n     ) /* Calculate day of week of first day of month */\n  &TEMP = TRANS (&ZDAY 01,1 02,2 03,3 04,4 05,5 06,6 07,7 08,1 09,2 10,3\n                  11,4 12,5 13,6 14,7 15,1 16,2 17,3 18,4 19,5 20,6 21,7\n                  22,1 23,2 24,3 25,4 26,5 27,6 28,7 29,1 30,2 31,3)\n  IF (&DAY1 = 1)\n   &DOW = TRANS(&TEMP 1,Sun 2,Mon 3,Tues 4,Wednes 5,Thurs 6,Fri 7,Satur)\n  IF (&DAY1 = 2)\n   &DOW = TRANS(&TEMP 7,Sun 1,Mon 2,Tues 3,Wednes 4,Thurs 5,Fri 6,Satur)\n  IF (&DAY1 = 3)\n   &DOW = TRANS(&TEMP 6,Sun 7,Mon 1,Tues 2,Wednes 3,Thurs 4,Fri 5,Satur)\n  IF (&DAY1 = 4)\n   &DOW = TRANS(&TEMP 5,Sun 6,Mon 7,Tues 1,Wednes 2,Thurs 3,Fri 4,Satur)\n  IF (&DAY1 = 5)\n   &DOW = TRANS(&TEMP 4,Sun 5,Mon 6,Tues 7,Wednes 1,Thurs 2,Fri 3,Satur)\n  IF (&DAY1 = 6)\n   &DOW = TRANS(&TEMP 3,Sun 4,Mon 5,Tues 6,Wednes 7,Thurs 1,Fri 2,Satur)\n  IF (&DAY1 = 7)\n   &DOW = TRANS(&TEMP 2,Sun 3,Mon 4,Tues 5,Wednes 6,Thurs 7,Fri 1,Satur)\n  &DOW = 'day'\n/* Format time of day */\n  &TEMP = TRUNC (&ZTIME,':')\n  &AMPM = 'A.M.'\n  IF (&TEMP = 12,13,14,15,16,17,18,19,20,21,22,23)\n    &AMPM = 'P.M.'\n  &HR = TRANS (&TEMP 00,12 01,1 02,2 03,3 04,4 05,5 06,6 07,7 08,8 09,9\n          13,1 14,2 15,3 16,4 17,5 18,6 19,7 20,8 21,9 22,10 23,11 *,*)\n  &TEMP = .TRAIL\n  &DTIME = '&HR:&TEMP &AMPM'\n/* Format message lines */\n  &TEMP = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n  &DMSG='\u00a2The time is@&DTIME\u00a2on@&DOW.,'\n  &DMSG='&DMSG.@&DATE., 19&ZYEAR (&ZJDATE.)&TEMP'\n  &DMSG = TRUNC (&DMSG,&LINELEN)\n  &TMSG1= '\u00a2Userid is$&ZUSER.,\u00a2Dataset prefix is@&ZPREFIX.,'\n  &TMSG1= '&TMSG1.\u00a2Logon\u00a2procedure\u00a2is@&ZLOGON.,'\n  &TMSG1= '&TMSG1.&TEMP'\n  &TMSG1 = TRUNC (&TMSG1,&LINELEN)\n  &TMSG2='\u00a2Terminal is a@&ZTERM\u00a2with@&ZKEYS\u00a2PF\u00a2keys,'\n  &TMSG2= '&TMSG2. Screen size@&ZSCREENW\u00a2by@&ZSCREEND'\n  &TMSG2= '&TMSG2.&TEMP'\n  &TMSG2 = TRUNC (&TMSG2,&LINELEN)\n  &SPFLVL = TRUNC (&ZENVIR,8)\n  &OSNAME = .TRAIL\n  &OSNAME = TRUNC (&OSNAME,8)\n  &OSLVL = .TRAIL\n  &OSLVL = TRUNC (&OSLVL,8)\n  &TMSG3 = '\u00a2Environment is@&SPFLVL\u00a2under@&OSNAME\u00a2and@&OSLVL.&TEMP'\n  &TMSG3 = TRUNC (&TMSG3,&LINELEN)\n/* Normal primary option menu initialization  */\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  VPUT (ZHTOP,ZHINDEX) PROFILE\n/* Define data to be scrolled                                       */\n/* All lines must be same length as dynamic area in panel body     */\n&MENU = '+\n&DMSG.+\n                                                                            +\n$AM   \u00a2IDCAMS     - Access method serv                                      +\n$B    \u00a2BUGS       - Problem Management System                               +\n$BG   \u00a2BLDGDG     - Build a GDG Base                                        +\n$BKM  \u00a2BACKMEUP   - Generate backup JCL                                     +\n$BLK  \u00a2BLKSIZE    - Pick a block size                                       +\n$BN   \u00a2BINGO      - Maintain bingo card file                                +\n$BRO  \u00a2BROWSE     - ISPF browse                                             +\n$C    \u00a2CDF        - Console display.                                        +\n$CC   \u00a2CCGEN      - Generate ctl cards                                      +\n$CF   \u00a2CONFIG     - Terminal configuration                                  +\n$CN   \u00a2CONVCLST   - VB -> FB, FB -> VB.                                     +\n$CO   \u00a2COMMANDS   - Create/change command table                             +\n$CPE  \u00a2CPEPROT    - SAS/CPE starter set                                     +\n$CSPA\u00a2 CSP/AE     - Cross System Product/Application Execution              +\n$CSPD\u00a2 CSP/AD     - Cross System Product/Application Development            +\n$DB   \u00a2DB2/QMF    - DB2I/QMF against DB2-TEST data base                     +\n$DBT  \u00a2DB-TOOLS   - IMS 2.2 DBTOOLS - Historical Data Analyzer -            +\n$DF   \u00a2DF/DSS     - DF/DSS                                                  +\n$DM   \u00a2DISKMAP    - Good old diskmap.                                       +\n$DS   \u00a2DSTATS     - Dataset statistics.                                     +\n$DTL  \u00a2ISPDTLC    - ISPF DTL Conversion Utility                             +\n$E    \u00a2EDX        - Personal dataset manager                                +\n$EDIT \u00a2EDIT       - ISPF edit                                               +\n$EP   \u00a2EPILOG     - OMEGAMON historical component                           +\n$FC   \u00a2LISTFCB    - Interpret an FCB.                                       +\n$FD   \u00a2FDSPACE    - Fullscreen dspace                                       +\n$FM   \u00a2FINDMAC    - Identify macros.                                        +\n$G    \u00a2GRS        - Display ENQ data                                        +\n$H    \u00a2HSM        - Hysterical storage mangler                              +\n$I    \u00a2ISMF       - Interactive system management facility                  +\n$ICF  \u00a2ICFA       - Information center facility - user -                    +\n$ICFA \u00a2ICFA       - Information center facility - admin -                   +\n$IP   \u00a2IPCS       - Interactive Problem Control System (IPCS)               +\n$ISS  \u00a2ISSPACE    - DASD Free Space Display                                 +\n$J    \u00a2JSX        - JES/328X printer control.                               +\n$JT   \u00a2JOBTRAC    - Job Scheduling                                          +\n$L    \u00a2LOGREC     - EREP (batch/tso).                                       +\n$LI   \u00a2AMBLIST    - List                                                    +\n$LS   \u00a2LSP0ACE    - ISPF lspace                                             +\n$M    \u00a2SLSS       - List manuals.                                           +\n$MIII \u00a2RMF-III    - MVS/ESA RMF-MONITOR III                                 +\n$MTT  \u00a2MTTESA     - Display master trace table                              +\n$N    \u00a2NOCELL     - Dataset analysis.                                       +\n$NA   \u00a2NAMES      - Business Cards.                                         +\n$O    \u00a2OMEGAMON   - Omegamon II for MVS                                     +\n$PD   \u00a2PDSEXREF   - Compare directories                                     +\n$PH   \u00a2PHONE      - Phone list                                              +\n$PP   \u00a2ISPPREP    - Preprocessed panel utility                              +\n$PR   \u00a2PRINT      - PRINTOFF                                                +\n$Q    \u00a2LST0A      - Allocated datasets.                                     +\n$RACF \u00a2RACF 1.9   - RACF 1.9  On LIne facilities                            +\n$RD   \u00a2RACFDSET   - Display RACF dataset profiles                           +\n$READ\u00a2 READ/MVS   - BookManager READ/MVS (OnLine Documentation)             +\n$RG1  \u00a2RACFGRP1   - Display RACF groups and subgroups                       +\n$RG2  \u00a2RACFGRP2   - Display RACF groups and users                           +\n$RI  \u00a2 READ/INDEX - BookManager READ/MVS (BookShelf Index Creation)         +\n$RMO \u00a2 RMO        - Express Delivery                                        +\n$RU   \u00a2RACFUSER   - Display RACF userids                                    +\n$S    \u00a2SAS        - Statistical Analysis System                             +\n$SAR  \u00a2SAR        - Sysout archival and retrieval                           +\n$SC   \u00a2SCLM       - Software Configuration and Library Manager              +\n$SD   \u00a2SDSF       - Spool Display and Search Facility                       +\n$SDF  \u00a2SDF        - Screen Definition Facility  II                          +\n$SE   \u00a2SEND       - Messages to other users                                 +\n$SL   \u00a2SOFTLOG    - Software LOGREC                                         +\n$SMP  \u00a2SMP        - System Modification Program  version 1.6.0              +\n$T    \u00a2TUTORIAL   - Display information about SPF                           +\n$TA   \u00a2TASID      - System activity display                                 +\n$TD   \u00a2TO DO      - Stuff i gotta do.                                       +\n$TP   \u00a2TPAN       - Display ISPF panels                                     +\n$TPX  \u00a2TPANX      - Load and unload ISPF panels                             +\n$U    \u00a2RMF-FORMAT - MVS/ESA RMF-MONITOR Format Definition                   +\n$UL   \u00a2ULXL01     - Free space extents.                                     +\n$V    \u00a2VTAM       - Enter network commands.                                 +\n$VEN  \u00a2VENDORS    - Hardware/Software Vendors                               +\n$W    \u00a2SORT       - Get it in order.                                        +\n$X    \u00a2EXIT       - Terminate SPF using list/log defaults                   +\n$XD   \u00a2XDF        - Whats happening?                                        +\n$Y    \u00a2ARCH-DEF   - SCLM Architecture Definitions (ARCHDEF)                 +\n$0    \u00a2SPF PARMS  - Specify terminal and SPF parameters                     +\n$3    \u00a2UTILITIES  - Perform SPF utility functions                           +\n$4    \u00a2FOREGROUND - Compile, assemble, link edit, or debug                  +\n$5    \u00a2BACKGROUND - Compile, assemble, or link edit                         +\n$6    \u00a2COMMAND    - Enter TSO command or CLIST                              +\n$7    \u00a2SUPPORT    - Test dialog or convert menu/message formats             +\n$10   \u00a2CA1-TMS    - CA-1 (Tape Management System)                           +\n$                                                                           +\n&TMSG1.+\n&TMSG2.+\n&TMSG3.+\n\u00a2Enter END command to terminate ISPF.                                      \u00a2'\n/* End of scrollable data */\nIF (&CUTP = ' ') &CUTP = 0     /* Initialize to display top of menu */\nIF (&PSCR = ' ') &PSCR = PAGE  /* Initialize scroll amount          */\n&JUNK = TRUNC(&MENU,&CUTP)     /* Truncate menu display by scroll   */\n&DYNAREA = .TRAIL              /* Portion of menu to be displayed   */\n)PROC\n  &LASTLN = LVLINE(DYNAREA)    /* Last visible line of dynamic area */\n  IF (&ZCMD \u00ac= ' ')                  /* FOR APAR OZ73889  */\n    &ZQ = TRUNC(&ZCMD,'.')           /* FOR APAR OZ73889  */\n    IF (&ZQ = ' ')                   /* FOR APAR OZ73889  */\n      .MSG = ISPD241                 /* FOR APAR OZ73889  */\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                A,'PGM(CACTVATE) NEWAPPL(CACT)'\n               AM,'PANEL(AMSMENU) NEWAPPL(AMS) '\n                B,'CMD(%BUGS) NEWAPPL(BUGS) '\n               BG,'PANEL(BLDGDG) '\n              BLK,'PANEL(BLKOPT01) '\n              BKM,'PANEL(BACKMEUP) '\n               BN,'CMD(%BINGO) '\n              BRO,'PGM(ISRBRO) PARM(ISRBRO01)'\n                C,'PGM(CDF) '\n               CC,'CMD(%CCGEN) '\n               CF,'CMD(%TECCNFG) '\n               CN,'PANEL(CONVCLST) '\n               CO,'PANEL(ISPUCMA)'\n              CPE,'CMD(%CPEPROT) '\nCSPD,'PGM(ISRALTDI) PARM(DCACSPAD,+,ISRDCSPD,*,ISRDCSP1) NOCHECK'\nCSPA,'PGM(ISRALTDI) PARM(DCBCSPAE,+,ISRDCSPE,*,ISRDCSP2) NOCHECK'\n               DB,'PANEL(DB2@PRIM)'\n               DBT,'PANEL(FABGP000) NEWAPPL(DBT)'\n               DF,'PANEL(DFDSS) NEWAPPL(DFDS) '\n               DM,'PANEL(DISKMAP) '\n               DS,'PANEL(DSTATS) '\n              DTL,'CMD(%ISPDTLC)'\n                E,'CMD(%EDX) '\n             EDIT,'PGM(ISREDIT) PARM(P,ISREDM01)'\n               EP,'CMD(%KEDSPF) '\n               FC,'CMD(%LISTFCB) '\n               FD,'CMD(%FDSPACE) '\n               FM,'PANEL(FINDMAC) '\n                G,'PGM(VUTL16) '\n                H,'PGM(DFQFMD01) NEWAPPL(HSM) '\n                I,'PGM(DGTFMD01) NEWAPPL(DGT) NOCHECK '\n              ICF,'CMD(ICQAMLI0 APPLNAME(ICQUSER))   NEWAPPL(ICFU)'\n             ICFA,'CMD(ICQAMLI0 APPLNAME(ICQADMIN))  NEWAPPL(ICFA)'\n               IP,'PGM(BLSG) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG)'\n              ISS,'CMD(%ISSPACE) '\n                J,'CMD(%JSXPRTC) '\n               JT,'CMD(%TCLIST3) '\n                L,'CMD(%EREP) '\n               LI,'CMD(%AMBLIST) '\n               LS,'PGM(LSP0ACE) '\n                M,'CMD(%SLSS)   '\n             MIII,'CMD(%ERBRMF3X  PARM(T))     NEWAPPL(ERBS)'\n              MTT,'CMD(%MTT)    '\n                N,'CMD(%NOCELL) NEWAPPL(NOCL) '\n               NA,'CMD(%NAMES) '\n                O,'PANEL(OMSPF02) NEWAPPL(OMEG)'\n                P,'PANEL(P84PN@P) '\n               PD,'CMD(%PDSEXREF) '\n               PH,'CMD(%PHONE) '\n               PP,'PGM(ISPPREP) NEWAPPL'\n               PR,'PANEL(PRINTOFF) NEWAPPL(PRNT) '\n                Q,'PGM(LST0A)    '\n             RACF,'PANEL(ICHP00)               NEWAPPL(RACF)'\n               RD,'PGM(RACFDSET) '\nREAD,'CMD(%EOXVSTRT) MODE(FSCR) SUSPEND NOCHECK NEWAPPL(EOXR)'\n  RI 'CMD(%BKINDEX)'\n              RG1,'PGM(RACFGRP1) '\n              RG2,'PGM(RACFGRP2) '\n              RMO,'PGM(RMOSPF) PARM(RMO.SYSTEM1) NEWAPPL(RMO) '\n               RU,'PGM(RACFUSER) '\n                S,'CMD(%SASMAIN) '\n              SAR,'PGM(SARSPF) PARM(SAR.SYSTEM1) NEWAPPL(SAR) '\n               SC,'PGM(ISRSCLM) NOCHECK'\n               SD,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n              SDF,'PANEL(SDF@TSG)              NEWAPPL(DGI)'\n               SE,'PANEL(SEND#P) '\n               SL,'CMD(%SOFTLOG) '\n             SMP,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK  NEWAPPL(GIM)'\n                T,'PGM(ISPTUTOR) PARM(ISR00000) '\n               TA,'PGM(TASID) '\n               TD,'CMD(%SPTASKDR) '\n               TP,'CMD(%TPAN2A) NEWAPPL(TPAN)'\n              TPX,'CMD(%TPANX) NEWAPPL(TPAN)'\n                U,'CMD(%ERBRMF3U)              NEWAPPL(ERBU)'\n               UL,'PGM(ULXL01)   '\n                V,'PGM(SP1TC014) '\n              VEN,'CMD(%XXVEND01)'\n                W,'PGM(ICEPMD01) PARM(&ZCMD) NEWAPPL(ICE) NOCHECK '\n                X,'EXIT'\n               XD,'PGM(JOB0LIST) '\n                Y,'PANEL(TSGSCLM)              NEWAPPL(ARCH)'\n                0,'PANEL(ISPOPTA)'\n                1,'CMD(%EDX) '\n                2,'CMD(%EDX) '\n                3,'PANEL(ISRUTIL)'\n                4,'PANEL(ISRFPA)'\n                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'\n                6,'PGM(RTSO)'\n                7,'PGM(ISPYXDR) PARM(ISR) NOCHECK'\n               10,'PGM(U01IOPRI)               NEWAPPL(U01) NOCHECK '\n /* Check for scrolling: tuncation point, scroll data,               */\n /* last visible line, length of lines                               */\n                '  ','CMD(%SCROLL CUTP MENU LASTLN LINELEN)'\n                *,'?' )\n  IF (&ZCMD = 'S')\n      &ZSEL = 'PGM(ISFISP) NOCHECK  NEWAPPL(ISF)'\n  &ZTRAIL = .TRAIL\n)END\n)CM           SMP,'PGM(GIMISCV) PARM(&ZCMD) NEWAPPL(GIM)'\n./       ADD   NAME=ISRBROB\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)\n 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)\n 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)\n 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)\n 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)\n 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)\n)BODY WIDTH(&ZWIDTH) EXPAND(//)\n%BROWSE - &ZTITLE -----------------------------/-/-----%LINE!ZLINES%COL!ZCOLUMS+\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_Z   +\n|ZDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  .ZVARS = 'ZSCBR'         /* SCROLL AMT VARIABLE NAME  */\n  IF (&ZMEMB \u00ac= ' ')\n    &ZTITLE = '&ZDSNT(&ZMEMB)&ZLEVEL '       /* OZ91708 */\n  IF (&ZMEMB = ' ')\n    &ZTITLE = '&ZDSN&ZLEVEL '\n  &MIXED = MIX\n  IF (&ZPDMIX = N)         /* EBCDIC MODE REQUESTED     */\n    &MIXED = EBCDIC\n\n  &BRDSN = &ZDSN\n  &BRMEM = &ZMEMB\n  VPUT (BRDSN BRMEM) PROFILE\n\n)REINIT\n  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)\n  .ATTRCHAR(+) = 'INTENS(&ZINTEN)'\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(ZDATA)\n\n)END\n\n/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)\n/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)\n./       ADD   NAME=ISRBROBF\n)ATTR\n   _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n   + TYPE(TEXT) INTENS(LOW)\n)BODY  WIDTH(&ZWIDTH) EXPAND(//)\n%BROWSE ----------------------------------/-/----------------------------------+\n%COMMAND ===>_ZCMD                        / /                 %SCROLL ===>_Z   +\n)INIT\n  .HELP = ISR10000\n  .ZVARS = 'ZSCBR'\n  &MIXED = MIX             /* SET FROMAT MIX            */\n  IF (&ZPDMIX = N)         /* IF EBCDIC MODE REQUESTED  */\n    &MIXED = EBCDIC        /*  SET FORMAT EBCDIC        */\n  VPUT (ZDSN,ZMEMB)        /* PRC MODS */\n  &BRDSN = &ZDSN\n  &BRMEM = &ZMEMB\n  VPUT (BRDSN BRMEM) PROFILE\n)PROC\n)END\n./       ADD   NAME=ISREDDE\n)ATTR\n   _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n)BODY  WIDTH(&ZWIDTH) EXPAND(//)\n%EDIT ------------------------------------/-/----------------------------------+\n%COMMAND ===>_ZCMD                        / /                 %SCROLL ===>_Z   %\n)INIT\n  .HELP = ISR20000\n  .ZVARS = 'ZSCED'\n  &MIXED = MIX             /* SET FROMAT MIX            */\n  IF (&ZPDMIX = N)         /* IF EBCDIC MODE REQUESTED  */\n    &MIXED = EBCDIC        /*  SET FORMAT EBCDIC        */\n  VPUT (ZDSN,ZMEMB)        /* PRC MODS */\n  &BRDSN = &ZDSN\n  &BRMEM = &ZMEMB\n  VPUT (BRDSN BRMEM) PROFILE\n)REINIT\n IF (&EDITSW \u00ac= &Z)\n     .CURSOR = ZCMD\n     .CSRPOS = 1\n     &EDITSW = &Z\n)PROC\n IF (.RESP = ENTER)\n     IF (&ZCMD = '?')\n         &ZCMD = &EDITZCMD\n         REFRESH (ZCMD)\n         &ZEDSMSG = 'RECALL COMPLETED'\n         &ZEDLMSG = 'BY ENTERING A \"?\" YOU HAVE +\n         RECALLED YOUR LAST EDIT COMMAND'\n         &EDITSW = ON\n         .MSG = ISRZ000\n     IF (&ZCMD \u00ac= '?',&Z)\n         &EDITZCMD = &ZCMD\n         VPUT (EDITZCMD) PROFILE\n)END\n./       ADD   NAME=ISRFP01\n)ATTR\n   \u00ac TYPE(INPUT) INTENS(NON)\n)BODY\n%--------------------------  FOREGROUND ASSEMBLY  ------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+ISPF LIBRARY:\n+   PROJECT%===>_PRJ1    %\n+   GROUP  %===>_LIB1    % ===>_LIB2    % ===>_LIB3    % ===>_LIB4    %\n+   TYPE   %===>_TYP1    %\n+   MEMBER %===>_MEM     +       (Blank for member selection list)\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_DSN                                                    %\n+\n+LIST ID%===>_LID     +                   PASSWORD%===>\u00acPSWD    %\n+\n+ASSEMBLER OPTIONS:   (Options%LIB, LOAD,+and%PRINT+generated automatically)\n+       %===>_FASM                                                             %\n+\n+ADDITIONAL INPUT LIBRARIES:\n+       %===>_FAL1                                                             %\n+       %===>_FAL2                                                             %\n+\n)INIT\n  .HELP = ISR41000\n  &TYP1 = &ASMT                         /*ASSEMBLER TYPE VARIABLE NAME*/\n  IF (&ZORG = 'PS')\n    IF (&LID = ' ')      .CURSOR = LID\n  IF (&DSN \u00ac= ' ')\n    IF (.CURSOR = ' ')   .CURSOR = DSN\n  &LID  = ' '\n  IF (&ZFTEMP = '')\n    &ZFPACK = &ZFPACK\n    VPUT (ZFPACK) SHARED\n    &ZFTEMP = '0'\n  &ZSM = TRANS(TRUNC(&ZSMMODE,1),Y,YES,*,NO)\n)PROC\n  IF (&ZCMD \u00ac= ' ')  .MSG = ISPZ001     /* INVALID COMMAND            */\n  IF (&LID \u00ac= '*')  VER (&LID,NAME)     /* LIST ID MUST BE VALID NAME */\n  VER (&FAL1,DSNAME)                    /* VERIFY ADDITIONAL LIB1     */\n  VER (&FAL2,DSNAME)                    /* VERIFY ADDITIONAL LIB2     */\n  &ASMT = &TYP1                         /* SAVE ASSEMBLER TYPE        */\n  &ZSEL = 'CMD(%ISRFC01)'               /* EXECUTE ASSEMBLE CLIST     */\n  IF (.RESP = END ) &ZSM = NO\n  VPUT (PRJ1,LIB1,LIB2,LIB3,LIB4,ASMT,PSWD,FASM,FAL1,FAL2,ZSM) PROFILE\n  VPUT (PRJ1,LIB1,LIB2,LIB3,LIB4,ASMT,PSWD,FASM,FAL1,FAL2,DSN,LID) SHARED\n  &ZFBROWS = 'ISRBROB ' /*BROWSE LISTING   , IF BLANK NO AUTO BROWSE  */\n  &ZFPRINT = 'ISRFPPRT' /*PRINT PANEL NAME, IF BLANK NO AUTO PRINT PNL*/\n  VPUT (ZFBROWS,ZFPRINT) SHARED\n)END\n./       ADD   NAME=ISRTSO\n)ATTR         /* IBM INTERNAL USE ONLY       */\n/*********************************************************************/\n/* ISRTSO - Input panel for handling TSO Input                       */\n/* Hans Braun, D2097/ PPDC Sindelfingen  - BRA at SDFMVS4            */\n/* Karl-Heinz Kuppinger, Boeblingen Lab  - BKUP at BOEVS01           */\n/*$MAC(ISRTSO),PROD(LISTAF),COMP(LAF230): ISPF TSO COMMAND PANEL     */\n/*$A0=BASE,BRALAF,860930,BRA: LISTAF BASE                            */\n/*$A1=MISC1,BRALAF,871122,BRA: Increase input count              @A1A*/\n/*$A2=V23,BRALAF,880422,BKUP: ISPF V23 Support                   @A2A*/\n/*                                                                   */\n/*********************************************************************/\n  \" TYPE(TEXT)  COLOR(YELLOW)                 /* Change sysmbol          @A2C*/\n  ! TYPE(INPUT) INTENS(HIGH) COLOR(PINK) CAPS(OFF) JUST(ASIS)\n  ~ TYPE(INPUT) INTENS(HIGH) COLOR(PINK) HILITE(REVERSE) CAPS(OFF) JUST(ASIS)\n  $ TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(ASIS)\n  # TYPE(TEXT)  INTENS(HIGH) SKIP(ON)\n)BODY EXPAND(\u00a6\u00a6)\n%\u00a6-\u00a6\"TSO Command Processor%\u00a6-\u00a6\n%ISPF COMMAND ===>_ZCMD\n+Enter new%TSO-Command+or position cursor on %Command-line+ to be executed\n%===>!TSOCMD1\n%===>$TSOCMD2\n%===>$TSOCMD3\n%===>$TSOCMD4\n%===>$TSOCMD5\n%===>$TSOCMD60\n#    $TSOCMD61\n%===>$TSOCMD70\n#    $TSOCMD71\n#    $TSOCMD72\n%===>$TSOCMD8\n%===>$TSOCMD9\n%===>$TSOCMDA\n%===>$TSOCMDB\n%===>$TSOCMDC\n%===>$TSOCMDD\n%===>$TSOCMDE\n%===>$TSOCMDF\n)INIT  /* INIT SECTION EXECUTE BEFORE DISPLAY                         */\n .HELP = ISR60010\n &TSOC = TRUNC(&TSOCMDFL,6)                                /*             @A1A*/\n &TSOC = .TRAIL                                            /*             @A1A*/\n IF ( &TSOC \u00ac= 1,2,3,4,5,60,61,70,71,72,8,9,A,B,C,D,E,F,G )/* Check code  @A1A*/\n   &TSOCMDFL = TSOCMD1                                     /* Save code   @A1A*/\n IF ( &TSOCMDFL = &Z )                                     /*             @A1A*/\n   &TSOCMDFL = TSOCMD1                                     /*             @A1A*/\n .CURSOR = &TSOCMDFL                                       /* Set cursor  @A1A*/\n &PTCBTEXT = ' '\n)PROC  /* PROC SECTION EXECUTE AFTER  DISPLAY                         */\n &ZSM = NO\n &TSOCMDFL = .CURSOR                                       /*             @A1A*/\n IF ( .RESP = ENTER )\n  IF ( &ZCMD \u00ac= ' ' )                             /* IF INVALID COMMAND       */\n    .MSG = ISPZ001                                /* SET MESSAGEID            */\n    &TSOCMDFL = ZCMD                                       /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD1 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD1                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD2 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD2                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD3 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD3                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD4 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD4                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD5 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD5                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD60,TSOCMD61 )                     /*             @A1C*/\n    &PTCBTEXT = '&TSOCMD60&TSOCMD61'                       /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD70,TSOCMD71,TSOCMD72 )            /*             @A1C*/\n    &PTCBTEXT = '&TSOCMD70&TSOCMD71&TSOCMD72'              /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD8 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD8                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMD9 )                               /*             @A1C*/\n    &PTCBTEXT = &TSOCMD9                                   /*             @A1C*/\n  IF ( &TSOCMDFL = TSOCMDA )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDA                                   /*             @A1A*/\n  IF ( &TSOCMDFL = TSOCMDB )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDB                                   /*             @A1A*/\n  IF ( &TSOCMDFL = TSOCMDC )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDC                                   /*             @A1A*/\n  IF ( &TSOCMDFL = TSOCMDD )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDD                                   /*             @A1A*/\n  IF ( &TSOCMDFL = TSOCMDE )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDE                                   /*             @A1A*/\n  IF ( &TSOCMDFL = TSOCMDF )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDF                                   /*             @A1A*/\n  IF ( &TSOCMDFL = TSOCMDG )                               /*             @A1A*/\n    &PTCBTEXT = &TSOCMDG                                   /*             @A1A*/\n  /* add TSOCMDG to VPUT, if more selections wanted                       @A2A*/\n  VPUT (TSOCMD1 TSOCMD2 TSOCMD3 TSOCMD4 TSOCMD5 TSOCMD8 TSOCMD9 /*        @A1A*/\n    TSOCMDA TSOCMDB TSOCMDC TSOCMDD TSOCMDE TSOCMDF        /*             @A1A*/\n    TSOCMD60 TSOCMD61 TSOCMD70 TSOCMD71 TSOCMD72 TSOCMDFL) SHARED /*      @A1A*/\n  VPUT (TSOCMD1 TSOCMD2 TSOCMD3 TSOCMD4 TSOCMD5 TSOCMD8 TSOCMD9 /*        @A1C*/\n    TSOCMDA TSOCMDB TSOCMDC TSOCMDD TSOCMDE TSOCMDF             /*        @A1A*/\n    TSOCMD60 TSOCMD61 TSOCMD70 TSOCMD71 TSOCMD72 TSOCMDFL) PROFILE /*     @A1C*/\n  &PTCLOG = 'Y'          /* Y = YES, LOG COMMANDS. N = NO LOGGING        @A2A*/\n  &Z6MODE = '          ' /* \"MODE(LINE)\" to have command run in          @A2A*/\n                         /* line mode, \"MODE(FSCR)\" to have the          @A2A*/\n                         /* command run in full screen mode              @A2A*/\n  &ZSMMODE = N                                             /*            @A2A*/\n  VPUT (ZSMMODE) PROFILE                                   /*            @A2A*/\n)END\n./       ADD   NAME=ISSPANL0\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n  @ TYPE(OUTPUT) COLOR(YELLOW)\n  \u00ac TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n)BODY EXPAND(//)\n%ISSPACE + DASD FREE SPACE -/-/----%LINE!ZLINES%COL!ZCOLUMS%\n+COMMAND ===>_ZCMD                             / /            %SCROLL ===>_AMT +\n\n)MODEL\n@ORECRD\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  &AMT    = CSR\n)PROC\n  &ISPLROWS = &ZTDSELS\n)END\n./       ADD   NAME=ISSPANL1\n)ATTR DEFAULT(%+_)\n      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */\n      /*  + TYPE(TEXT) INTENS(LOW)       information only            */\n      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */\n  $ TYPE(INPUT) INTENS(LOW) PAD(_)    /* input field padded with '_' */\n  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */\n)BODY EXPAND(//)\n%ISSPACE + DASD FREE SPACE -/-/-\n%COMMAND ===>_ZCMD                                                             +\n%\n+   Enter the%volser prefix+of the volume pool you want information on:\n+\n+   Volume Prefix ......$ISPPRF+\n+\n)INIT\n    .CURSOR = ISPPRF\n)PROC\n    VER (&ISPPRF,NB)\n)END\n./       ADD   NAME=MIPANEL\n)ATTR DEFAULT(%+_)\n      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */\n      /*  + TYPE(TEXT) INTENS(LOW)       information only            */\n      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */\n  $ TYPE(INPUT) INTENS(LOW) PAD(_) CAPS(OFF)\n  ! TYPE(INPUT) INTENS(LOW) PAD(_) CAPS(On)\n)BODY  EXPAND(//)\n%Mass Insert -/-/- Parameters -/-/- Mass Insert\n%COMMAND ===>_ZCMD                                                             +\n%\n+   Enter details below:\n+\n+   Identifier .........$MIID                                     +\n+   Direction ..........!MIDIR + (A,B,AFTER,BEFORE)               +\n+   Line to be inserted\n$MILINE                                                                       +\n+\n+Where%Identifier+is a character string contained in the lines after which the\n+ insert is to take place,%Direction+ specifies insertion before or after the\n+ specified line and%line to be inserted+is the new line.\n+\n)INIT\n &MIDIR  = TRANS (&MIDIR  ' ',AFTER *,*)\n)PROC\n    VER (&MIID,NB)\n    VER (&MIDIR,NB)\n    VER (&MIDIR,LIST,A,B,AFTER,BEFORE)\n    VER (&MILINE,NB)\n)END\n./       ADD   NAME=RACDPANL\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  \u00ac TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n)BODY EXPAND(//)\n%RACFDSET+ LIST OF RACF DATASET PROFILES  -/-/-----%LINE!ZLINES%COL!ZCOLUMS%\n+COMMAND ===>_ZCMD                             / /            %SCROLL ===>_AMT +\n   %DSNAME                                       OWNER    U --USER-- A PROF-TYP\n)MODEL\n   @ORECRD\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  &SELECT = ' '\n  &AMT    = CSR\n)PROC\n  &ISPLROWS = &ZTDSELS\n)END\n./       ADD   NAME=RACGPNL0\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  \u00ac TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n)BODY EXPAND(//)\n%RACFGRES+ LIST OF RACF GENERAL RESOURCES -/-/----%LINE!ZLINES%COL!ZCOLUMS%\n+COMMAND ===>_ZCMD                             / /            %SCROLL ===>_AMT +\n   %NAME     CLASS    OWNER    U AUTH-USR A\n)MODEL\n   @ORECRD\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  &AMT    = CSR\n)PROC\n  &ISPLROWS = &ZTDSELS\n)END\n./       ADD   NAME=RACGPNL1\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  \u00ac TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n)BODY EXPAND(//)\n%RACFGRP1+ LIST OF RACF GROUPS & SUBGROUPS -/-/----%LINE!ZLINES%COL!ZCOLUMS%\n+COMMAND ===>_ZCMD                             / /            %SCROLL ===>_AMT +\n    %GROUP    SUP-GRP  OWNER    U N    # SUBGROUP NAME\n)MODEL\n   @ORECRD\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  &AMT    = CSR\n)PROC\n  &ISPLROWS = &ZTDSELS\n)END\n./       ADD   NAME=RACGPNL2\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  \u00ac TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n)BODY EXPAND(//)\n%RACFGRP2+ LIST OF RACF GROUPS AND USERS  -/-/-----%LINE!ZLINES%COL!ZCOLUMS%\n+COMMAND ===>_ZCMD                             / /            %SCROLL ===>_AMT +\n   %GROUP    SUP-GRP  OWNER             USER                            ROF-TYP\n)MODEL\n   @ORECRD\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  &AMT    = CSR\n)PROC\n  &ISPLROWS = &ZTDSELS\n)END\n./       ADD   NAME=RACUPANL\n)ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  \u00ac TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')\n)BODY EXPAND(//)\n%RACFUSER+ LIST OF RACF USER IDS  -/-/-----%LINE!ZLINES%COL!ZCOLUMS%\n+COMMAND ===>_ZCMD                             / /            %SCROLL ===>_AMT +\n   %USERID   NAME                 OWNER    GROUP    -FLG- LAST-USE PWD-CHG  PCI\n)MODEL\n   @ORECRD\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  &AMT    = CSR\n)PROC\n  &ISPLROWS = &ZTDSELS\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RMFIII": {"ttr": 26634, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\r\\x90\\r\\x90\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 3472, "newlines": 3472, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=$AMODE\n         MACRO\n&LABEL  $AMODE &MODE,&REG=R9,&SAVE=,&RESET=\n&SP      SETC  'SP'.'&SYSNDX'\n         AIF   (T'&MODE EQ 'O').MODEOK\n         AIF   ('&MODE' EQ '24' OR '&MODE' EQ '31').MODEOK\n         MNOTE 12,'*** INVALID AMODE SPECIFIED.'\n         MEXIT\n.MODEOK  ANOP\n         AIF   (T'&LABEL EQ 'O').NOLABEL\n&LABEL   DS    0H\n.NOLABEL ANOP\n         L     &REG,16\n         TM    CVTDCB-CVTMAP(&REG),CVTMVSE\n         BZ    &SP\n         AIF   (T'&SAVE EQ 'O').NOSAVE\n         SR    &REG,&REG\n         BSM   &REG,0\n         ST    &REG,&SAVE\n.NOSAVE  ANOP\n         AIF   (T'&RESET EQ 'O').SET\n         L     &REG,&RESET\n         O     &REG,=AL4(*+6)\n         BSM   0,&REG\n         AGO   .AMODE99\n.SET     ANOP\n         AIF   ('&MODE' EQ '31').TO31\n         L     &REG,=AL4(*+6)\n         BSM   0,&REG\n         AGO   .AMODE99\n.TO31    ANOP\n         L     &REG,=AL4(*+6+X'80000000')\n         BSM   0,&REG\n.AMODE99 ANOP\n&SP      DS    0H\n         MEND\n./       ADD   NAME=$EPILOG\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n./       ADD   NAME=$JCL\n//TSGJCLU  JOB (T50000),'TSGJCL  ',\n//         NOTIFY=TSGJCL,MSGCLASS=X,CLASS=Z\n//ERB3  EXEC PGM=ERB3POST,REGION=128M\n//STEPLIB  DD  DSN=TSGJCL.SYSTEMS.LOAD,\n//             DISP=SHR\n//SYSUT1   DD  DSN=SYS3.RMFIII.DS1,\n//             DISP=SHR\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//ASIDLIST DD  SYSOUT=*\n//ASIDS    DD  DSN=&&ASIDS,\n//             DISP=(,CATLG),\n//             UNIT=WORK,\n//             SPACE=(CYL,(10,5),RLSE)\n//DEVICES  DD  DSN=&&DEVICES,\n//             DISP=(,CATLG),\n//             UNIT=WORK,\n//             SPACE=(CYL,(10,5),RLSE)\n//*\n//         EXEC SAS\n//ASIDS    DD  DSN=&&ASIDS,\n//             DISP=SHR\n//DEVICES  DD  DSN=&&DEVICES,\n//             DISP=SHR\n//SYSIN    DD  DSN=TSGJCL.SYSTEMS.RMFIII(SASASID),\n//             DISP=SHR\n//         DD  DSN=TSGJCL.SYSTEMS.RMFIII(SASDEVCE),\n//             DISP=SHR\n//\n./       ADD   NAME=$PROLOG\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n./       ADD   NAME=$REGS\n         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n./       ADD   NAME=@STCK\n         MACRO\n&LABEL   @STCK  &TYPE\n         LCLC   &L\n.**********************************************************************\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.\n.**********************************************************************\n.****    TYPE SHOULD BE: 'BOTH' - GEN CODE AND DATA AREAS.\n.****                    'CODE' - GEN CODE ONLY.\n.****                    'DATA' - GEN DATA AREA ONLY.\n.**********************************************************************\n.****    DATA AREAS ARE SHOWN BELOW:\n.****\n.****  STCK     DC   CL28'MM/DD/YY HH:MM:SS DOW YY.DDD'\n.****\n.****  STCKDATE DS   CL8    THE DATE IN MM/DD/YY FORMAT\n.****\n.****  STCKTIME DS   CL8    THE TIME IN HH:MM:SS FORMAT\n.****\n.****  STCKDOW  DS   CL3    CHAR DAY OF WEEK\n.****\n.****  STCKDATJ DS   CL6    YY.DDD - JULIAN DATE\n.****\n.****  STCKWRK1 DS   D      WORK AREA\n.****  STCKWRK2 DS   D      WORK AREA\n.****\n.****  STCKDOWX DS   H      A BINARY NUMBER (HEX) RELATIVE TO\n.****                       THE DAY OF THE WEEK AS FOLLOWS\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,\n.****                       3=THURSDAY, 4=FRIDAY,\n.****                       5=SATURDAY, 6=SUNDAY\n.****  STCKDDDX DS   H      A BINARY NUMBER-DAY IN YEAR 1-366\n.****  STCKYYX  DS   H      A BINARY NUMBER-YEAR\n.****  STCKMMX  DS   H      A BINARY NUMBER-MONTH (1-12)\n.****  STCKDDX  DS   H      A BINARY NUMBER-DAY-OF-MONTH (1-31)\n.****\n.****  STCKSTCK DS   CL8    THE STCK TO BE CONVERTED\n.****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).\n.****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   DS    0H                 STORE THE TIME-OF-DAY CLOCK\n         AIF    ('&TYPE' EQ 'DATA').GEN ONLY DO DATA\n         AIF    ('&TYPE' EQ 'BOTH').CODE DO CODE\n         AIF    ('&TYPE' EQ 'CODE').CODE DO CODE\n         MNOTE 8,'INVALID TYPE:  &TYPE , MUST BE DATA,BOTH, OR CODE'\n.CODE    ANOP\n*\n**             GET INPUT, ADJUST TIME ZONE\n*\n         LM    R0,R1,STCKSTCK          LOAD INTO WORK REGS\n         L     R15,16                  GET CVT ADDRESS\n         A     R0,304(R15)             ADD LOCAL TIME DEVIATION\n         SRDL  R0,12                   ISOLATE NUMBER OF MICROSECONDS\n*              MINUTES\n         D     R0,=F'60000000'         DIVIDE BY 60M (R1=MINUTES AFT EP\n         LR    R15,R0                  COPY REMAINDER OF MICS TO GET SE\n         SR    R14,R14                 CLEAR FOR DIVIDE\n*              SECONDS\n         D     R14,=F'951424'          DIVIDE TO GET REMAINING SECONDS\n         LR    R14,R15                 COPY TO WORK REG\nS&L.B    SL    R14,=F'60'              DECREMENT BY 60 SECONDS\n         BM    S&L.S                   LESS THAN SIXTY, CONTINUE\n         SL    R15,=F'60'              MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    R1,=F'1'                BUMP MINUTES\n         B     S&L.B                   CHECK AGAIN\n*\n**             DISPLAYABLE TIME HH:MM:SS\n*\nS&L.S    CVD   R15,STCKWRK1            CONVERT SECONDS TO PACKED FORMAT\n         UNPK  STCKWRK2(4),STCKWRK1    UNPACK SECONDS FOR PRINT\n         OI    STCKWRK2+3,X'F0'        SET UP FOR PRINTING\n         MVC   STCKTIME+6(2),STCKWRK2+2 MOVE THE SECONDS\n*\n         XR    R0,R0\n         D     R0,=F'60'               DIVIDE INTO HOURS AND MINUTES\n         CVD   R0,STCKWRK1             CONVERT MINUTES TO PACKED\n         UNPK  STCKWRK2(4),STCKWRK1    UNPACK MINUTES FOR PRINT\n         OI    STCKWRK2+3,X'F0'        SET UP FOR PRINTING\n         MVC   STCKTIME+3(2),STCKWRK2+2 MOVE THE MINUTES\n*\n         XR    R0,R0                   CLEAR\n         D     R0,=F'24'               R1=DAYS AND R0=HOURS\n         CVD   R0,STCKWRK1             CONVERT HOURS TO PACKED\n         UNPK  STCKWRK2(4),STCKWRK1    UNPACK HOURS FOR PRINT\n         OI    STCKWRK2+3,X'F0'        SET UP FOR PRINTING\n         MVC   STCKTIME+0(2),STCKWRK2+2 MOVE THE HOURS\n*\n         MVI   STCKTIME+2,C':'         ADD COLIN\n         MVI   STCKTIME+5,C':'         ADD COLIN\n*\n**             DAY-OF-WEEK\n*\n         LR    R15,R1                  COPY NUMBER OF DAYS\n         XR    R14,R14                 CLEAR\n         D     R14,=F'7'               GET DAY INDEX\n         STC   R14,STCKDOWX            SET RELATIVE DAY OF WEEK\n         MH    R14,=H'3'               WEEKDAY: 0,3,..\n         LA    R14,S&L.W(R14)          GET 3CHAR DAY\n         MVC   STCKDOW,0(R14)          MAKE DISPLAYABLE\n*\n**             JULIAN\n*\n         XR    R0,R0                   CLEAR EVEN REG\n         S     R1,=F'365'              # OF DAYS SINCE JAN 1, 1901\n         D     R0,=F'1461'             # COMPLETED LEAP YRS\n         SLA   R1,2                    * LEAP YEARS BY 4\n         LR    R14,R1                  SAVE\n         STH   R1,STCKYYX              SAVE BINARY YEAR FOR CALLER\n         LR    R1,R0                   REMANDER\n         SR    R0,R0                   CLEAR R0\n         D     R0,=F'365'              # COMPLETED YRS (NOT INCL LEAPS)\n         AR    R1,R14                  # OF LEAPS*4\n         LA    R1,1(,R1)               +1 FOR 1900 ADJUST ABOVE\n         LR    R14,R1                  SAVE BINARY YEAR\n         AH    R0,=H'1'                JAN 1 IS XX001 NOT XX000\n         LR    R15,R0                  SAVE BINARY DAY(1-366)\n         STH   R0,STCKDDDX             SAVE BINARY DAY FOR CALLER\n         MH    R1,=H'1000'             YY OVER 3 DIGITS\n         AR    R1,R0                   ADD DAYS\n         CVD   R1,STCKWRK2             DEC VERSION 0..YYDDDS\n         MVC   STCKWRK1(7),=X'4021204B202020'\n         ED    STCKWRK1(7),STCKWRK2+5  JULIAN\n         MVC   STCKDATJ,STCKWRK1+1     KILL BLANK\n*\n**             GREGORIAN\n*\n         CVD   R14,STCKWRK1            DEC. YEAR\n         UNPK  STCKDATE+6(2),STCKWRK1+6(2) UNPACK INTO OUT AREA\n         LA    R1,S&L.T                LOAD ADDR OF TABLE\n         N     R14,=F'3'               SEE IF MULT OF 4\n         BNZ   S&L.NL                  NOT 0, BRANCH\n         LA    R1,S&L.TL               LEAP YEAR\nS&L.NL   LR    R0,R1                   SAVE TABLE ADDR\nS&L.L    IC    R14,0(R1)               LOAD CHAR FROM TABLE\n         LA    R1,1(R1)                INDEX TABLE POINTER\n         SR    R15,R14                 SUBTRACT FROM WORK VALUE\n         BP    S&L.L                   STILL POSITIVE, DO AGAIN\n         AR    R15,R14                 ELSE, ADD IT BACK\n         STH   R15,STCKDDX             SAVE BINARY DAY FOR CALLER\n         CVD   R15,STCKWRK1            CONVERT TO DEC\n         UNPK  STCKDATE+3(2),STCKWRK1+6(2) UNPACK DAY\n         SR    R1,R0                   GET MONTH INDEX FROM TABLE\n         STH   R1,STCKMMX              SAVE BINARY MONTH FOR CALLER\n         CVD   R1,STCKWRK1             CONVERT TO DEC\n         UNPK  STCKDATE(2),STCKWRK1+6(2)  UNPACK MONTH INTO OUT\n         OI    STCKDATE+1,C'0'         INSURE NUMERICS\n         OI    STCKDATE+4,C'0'         INSURE NUMERICS\n         OI    STCKDATE+7,C'0'         INSURE NUMERICS\n         MVI   STCKDATE+2,C'/'         ADD SLASH\n         MVI   STCKDATE+5,C'/'         ADD SLASH\n*\n**             CONSTANTS\n*\n         B     S&L.E                    BR AROUND CONSTANTS\nS&L.W    DC    C'MONTUEWEDTHUFRISATSUN' DAYS OF WEEK\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    ('&TYPE' EQ 'CODE').NOGEN ONLY DO CODE\n.GEN     ANOP\nSTCK     DC    0C'MM/DD/YY HH:MM:SS DOW YY.DDD'\nSTCKDATE DC    C'  /  /  '             MM/DD/YY\n         DC    C' '                    FILLER                  25JUN84\nSTCKTIME DC    C'  :  :  '             HH:MM:SS\n         DC    C' '                    FILLER                  25JUN84\nSTCKDOW  DC    C'XXX'                  DAY OF THE WEEK\n         DC    C' '                    FILLER                  25JUN84\nSTCKDATJ DC    C'YY.DDD'               JULIAN DATE\n         DC    C' '                    FILLER                  25JUN84\nSTCKWRK1 DS    D                       WORK\nSTCKWRK2 DS    D                       WORK\nSTCKSTCK DS    D                       STORE CLOCK INPUT\nSTCKDOWX DC    H'00'                   REL. DAY OF THE WEEK\nSTCKDDDX DC    H'00'                   BINARY DAY IN YEAR (1-366)\nSTCKYYX  DC    H'00'                   BINARY YEAR\nSTCKMMX  DC    H'00'                   BINARY MONTH (1-12)\nSTCKDDX  DC    H'00'                   BINARY DAY-OF-MONTH (1-31)\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n./       ADD   NAME=DATASECT\nDATASECT CSECT ,\n         PRINT GEN\n        @STCK  DATA\n         PRINT NOGEN\nDOUBLE   DC    D'0'\nDWK2     EQU   DOUBLE+6,2\nDWK3     EQU   DOUBLE+5,3\nPWAOPN   DC    F'0'               0=CLOSED, 255=OPEN\nPWDOPN   DC    F'0'               0=CLOSED, 255=OPEN\n         DS    0F\nTABSTART DS    AL4                START OF MONITOR III DATA\nTABEND   DS    AL4                END OF MONITOR III DATA\nBXLE1    DS    3AL4               LOOP CONTROL TO FILL TABLE.\n         SPACE ,\nCURRSSH  DC    AL4(0)             CURRENT SET OF SAMPLES HDR ADDR.\nCURRASIG DC    AL4(0)             CURRENT ASID TABLE ADDR\nCURRDVTG DC    AL4(0)             CURRENT DEVICE TABLE ADDR.\nLASTSAMP DC    AL4(0)             ADDR OF LAST HEADER IN A SET OF SMPLS\n         SPACE ,\nACBAD    DS    AL4                INPUT ACB ADDRESS\nRPLAD    DS    AL4                INPUT RPL ADDRESS\nEXLAD    DS    AL4                EXLST ADDRESS\nARGFLD   DS    AL4                ARGUMENT FIELD. FEEDS BACK RRN\nPLINE0   DS    2AL4               PARM LIST FOR PRINT ROUTINE\nPRTLINE  DS    CL133              PRINT LINE WORK AREA.\nPWALHD1  XPRLDEF TEXT=PWLHDT1,LENGTH=L'PWLHDT1,SPB=(0,ATHOF),SPA=1\nPWLHDT1  DC    C'&NAME &VERSION -- LISTING OF ACTIVE ASIDS'\nPWALHD2  XPRLDEF TEXT=PWLHDT2,LENGTH=132,SPB=0,SPA=2\nPWLHDT2  DS    0H\n         DC    CL132' '\n         ORG   PWLHDT2\n         DC    CL1' '\n         DC    CL8'JOBN/SER',CL2' '       JOB NAME\n         DC    CL3'TYP',CL2' '       JOB/TSU/STC\n         DC    CL3'DOW',CL2' '      DAY OF THE WEEK\n         DC    CL8'--DATE--',CL2' '      DATE MM/DD/YY\n         DC    CL8'--TIME--',CL2' '      TIME HH:MM:SS\n         DC    CL11'--CPU TIME-',CL2' '      CPU TIME\n         DC    CL5'#SMPL',CL2' '      VALID SAMPLES\n         DC    CL3'USG',CL2' '      USING PERCENT\n         DC    CL3'DLY',CL2' '      DELAY PERCENT\n         DC    CL8'USG JOBN',CL2' '\n         DC    CL8'DLY JOBN',CL2' '\n         ORG   PWLHDT2+132\n         SPACE ,\nLA1LINE  DC    CL133' '\n         ORG   LA1LINE\n         DC    CL1' '\nLA1JOBNA DC    CL8' ',CL2' '       JOB NAME\nLA1TYPE  DC    CL3' ',CL2' '       JOB/TSU/STC\nLA1DOW   DC    CL3' ',CL2' '      DAY OF THE WEEK\nLA1DATE  DC    CL8' ',CL2' '      DATE MM/DD/YY\nLA1TIME  DC    CL8' ',CL2' '      TIME HH:MM:SS\nLA1CPUTM DC    CL11' ',CL2' '      CPU TIME\nLA1SMPLS DC    CL5' ',CL2' '      VALID SAMPLES\nLA1USING DC    CL3' ',CL2' '      USING PERCENT\nLA1DELAY DC    CL3' ',CL2' '      DELAY PERCENT\n         ORG   LA1LINE+133\n         SPACE ,\nLD1LINE  DC    CL133' '\n         ORG   LD1LINE\n         DC    CL1' '\nLD1VOLI  DC    CL6' ',CL4' '       VOLSER\nLD1TYPE  DC    CL3' ',CL2' '       DEV\nLD1DOW   DC    CL3' ',CL2' '      DAY OF THE WEEK\nLD1DATE  DC    CL8' ',CL2' '      DATE MM/DD/YY\nLD1TIME  DC    CL8' ',CL2' '      TIME HH:MM:SS\n         DC    CL11' ',CL2' '\nLD1SMPLS DC    CL5' ',CL2' '\nLD1USING DC    CL3' ',CL2' '      USING PERCENT\nLD1DELAY DC    CL3' ',CL2' '      DELAY PERCENT\nLD1HUJBN DC    CL8' ',CL2' '      HIGHEST USING JOB\nLD1HWJBN DC    CL8' ',CL2' '      MOST DELAYED JOB\n         ORG   LD1LINE+133\n         SPACE 1\n         DS    0F\nPWA      XPRDCB  DDNAME=SYSPRINT\nHEADER1  XPRLDEF TEXT=HTEXT1,LENGTH=L'HTEXT1,SPB=(0,ATHOF),SPA=1\nHTEXT1   DC    C'&NAME &VERSION -- LISTING OF RMF MONITOR III RECORDINGX\n                DATASET CONTENTS            '\nHEADER2A XPRLDEF TEXT=HTEXT2A,LENGTH=L'HTEXT2A,SPB=0,SPA=2\nHTEXT2A  DC    C'DSIG3: DATASET RECORD AND TABLE FORMATS '\n./       ADD   NAME=EDIT\n         MACRO\n&NAME    EDIT  &PR,&NUM,&ED\n         LCLA  &A1,&A2,&A3,&A4\n         LCLB  &B1,&B2\n         LCLC  &C1,&C2,&C3\n         ACTR  200\n         AIF   (N'&SYSLIST EQ 2 AND K'&ED EQ 0).ANOP1\n         AIF   (N'&SYSLIST NE 3).MNOTE1\n         AIF   ('&ED'(1,1) EQ '-' OR '&ED'(1,1) EQ '$').EDMK\n.ANOP1   ANOP\n&A1      SETA  &A1+1\n         AIF   (K'&ED LT &A1).CONT\n&A2      SETA  &A2+1\n&A4      SETA  &A4+1\n         AIF   ('&ED'(&A1,1) NE 'Z' AND '&ED'(&A1,1) NE '&C2').NINE\n.ANOP2   ANOP\n&C1      SETC  '&C1.20'\n         AGO   .ANOP1\n.NINE    AIF   ('&ED'(&A1,1) NE '9').PER\n         AIF   (&B1).ANOP2\n&B1      SETB  1\n         AIF   (&A1 EQ 1).SIGNIF\n         AIF   (&A1 EQ 2 AND &B2).SIGNIF\n&C3      SETC  '&C1'(&A4*2-3,2)\n         AIF   ('&C3' NE '20').NINE2\n&C1      SETC  '&C1'(1,&A4*2-4).'2120'\n         AGO   .ANOP1\n.NINE2   ANOP\n&C1      SETC  '&C1'(1,&A4*2-6).'21&C3.20'\n         AGO   .ANOP1\n.SIGNIF  ANOP\n&C1      SETC  '21'\n         AGO   .ANOP1\n.PER     AIF   ('&ED'(&A1,1) NE '.').COMMA\n&C1      SETC  '&C1.4B'\n&A2      SETA  &A2-1\n         AGO   .ANOP1\n.COMMA   AIF   ('&ED'(&A1,1) NE 'V').SLASH\n&C1      SETC  '&C1.6B'\n&A2      SETA  &A2-1\n         AGO   .ANOP1\n.SLASH   AIF   ('&ED'(&A1,1) NE '/').DBCR\n&C1      SETC  '&C1.61'\n&A2      SETA  &A2-1\n         AGO   .ANOP1\n.DBCR    AIF   (&A1+1 NE K'&ED).MNOTE2\n         AIF   ('&ED'(&A1,2) NE 'CR').DB\n&C1      SETC  '&C1.C3D9'\n&A2      SETA  &A2-1\n         AGO   .CONT\n.DB      AIF   ('&ED'(&A1,2) NE 'DB').MNOTE2\n&C1      SETC  '&C1.C4C2'\n&A2      SETA  &A2-1\n.CONT    ANOP\n&C3      SETC  '&PR'\n         AIF   (L'&NUM*2-1 NE &A2).EDSIZE\n.ENDCHEC ANOP\n&A2      SETA  0\n         AIF   (K'&C1/2+1 NE L'&PR).AREASIZ\n.LAST    AIF   (&B2).EDMKEND\n&NAME    MVC   &C3,=X'40&C1'\n         ED    &C3,&NUM\n         MEXIT\n.EDSIZE  AIF   (L'&NUM*2-1 LT &A2).LONG\n.SHORT   ANOP\n&C1      SETC  '20&C1'\n&A3      SETA  &A3+1\n         AIF   (L'&NUM*2-1 GT &A2+&A3).SHORT\n         AGO   .ENDCHEC\n.LONG    ANOP\n&C1      SETC  '&C1'(3,K'&C1-2)\n&A3      SETA  &A3+1\n         AIF   (L'&NUM*2-1 LT &A2-&A3).LONG\n         AGO   .ENDCHEC\n.AREASIZ AIF   (K'&C1/2+1 LT L'&PR).LESS\n&A2      SETA  K'&C1/2+1-L'&PR\n&A3      SETA  K'&C1/2+1\n&C3      SETC  '&C3-&A2.(&A3)'\n&B1      SETB  1\n         AGO   .LAST\n.LESS    ANOP\n&B1      SETB  0\n&A3      SETA  K'&C1/2+1\n         AIF   (K'&C1/2+5 GE L'&PR).PLUSET\n&C3      SETC  '&C3.(&A3)'\n         AGO   .LAST\n.PLUSET  ANOP\n&A2      SETA  L'&PR-K'&C1/2-1\n&C3      SETC  '&C3+&A2.(&A3)'\n         AGO   .LAST\n.EDMK    AIF   ('&ED'(1,1) EQ '-').NEG\n&C2      SETC  '$'\n         AGO   .C2SET\n.NEG     ANOP\n&C2      SETC  '-'\n.C2SET   ANOP\n&A1      SETA  1\n&B2      SETB  1\n         AGO   .ANOP1\n.EDMKEND ANOP\n&A1      SETA  -1\n.EDMKNOP ANOP\n&A1      SETA  &A1+2\n         AIF   (K'&C1 LT &A1).SETA\n         AIF   ('&C1'(&A1,2) EQ '21').SETAA\n         AIF   ('&C1'(&A1,2) NE '4B').EDMKNOP\n&A1      SETA  (&A1+1)/2\n         AGO   .LA\n.SETA    ANOP\n&A1      SETA  (&A1+1)/2-1\n         AGO   .LA\n.SETAA   ANOP\n&A1      SETA  (&A1+1)/2+1\n.LA      ANOP\n         AIF   (&B1).MINUS\n&A1      SETA  &A1+&A2\n         AGO   .MVC\n.MINUS   ANOP\n&A1      SETA  &A1-&A2\n.MVC     ANOP\n&NAME    MVC   &C3,=X'40&C1'\n         LA    1,&PR+&A1\n         EDMK  &C3,&NUM\n         AIF   ('&C2' EQ '$').DOLLAR\n         BNM   EDIT&SYSNDX\n         BCTR  1,0\n         MVI   0(1),C'-'\n&C3      SETC  '&SYSNDX'\nEDIT&C3  EQU   *\n         MEXIT\n.DOLLAR  BCTR  1,0\n         MVI   0(1),C'$'\n         MEXIT\n.MNOTE1  MNOTE 8,'THREE OPERANDS MUST BE SPECIFIED'\n         MEXIT\n.MNOTE2  MNOTE 8,'INVALID EDIT PATTERN'\n         MEND\n./       ADD   NAME=ERBASIG3\n         MACRO\n         ERBASIG3\nASIG3    DSECT ,\nASIASIG3 DS    CL5           ACRONYM 'ASIG3'\nASIVERG3 DS    XL1           CONTROL BLOCK VERSION X'04'           @035\nASIHDRLE DS    XL1           LENGTH OF ASIG3 HEADER\nASIENTLE DS    XL1           LENGTH OF EACH TABLE ENTRY\nASIENTMX DS    XL4           NUMBER OF TABLE ENTRIES\nASIENTNR DS    XL4           INDEX OF LAST TABLE ENTRY (?)\nASIG3ENT DSECT ,\nASIENIDX DS    XL2           INDEX OF THIS TABLE ENTRY\nASIOREVI DS    XL2           INDEX OF THE PREVIOUS TABLE ENTRY FOR THE\n*                            SAME ADDRESS SPACE\nASIJOBNA DS    CL8           JOBNAME FOR THIS ASID\nASINPG   DS    XL2           CONTROL PERFORMANCE GROUP\n         DS    XL1\nASIDMN   DS    XL1           DOMAIN\nASIASINR DS    XL2           ASID NUMBER\nASIFLAG1 DS    XL2           JOB FLAGS:\n*                            BIT     MEANING WHEN SET\n*                            0       STARTED TASK\n*                            1       BATCH JOB\n*                            2       TSO ASID\n*                            3-15    RESERVED\nASICPUTA DS    XL4           TOTAL TCB+SRB TIME (IN MILLISECONDS)\nASIDCTIA DS    XL4           TOTAL CHANNEL CONNECT TIME\nASIFIXA  DS    XL4           NUMBER OF REAL FIXED FRAMES\nASITRCA  DS    XL4           TOTAL NUMBER OF TRANSACTIONS\nASIFMCT  DS    XL4           TOTAL FRAMES FOR SWAPPED-IN USERS\nASIFMCTI DS    XL4           TOTAL FRAMES FOR IDLE USERS\nASIESF   DS    XL4           EXTENDED STORAGE FRAMES - SWAPPED-IN\nASIESFI  DS    XL4           EXTENDED STORAGE FRAMES - IDLE USERS\nASISMPCT DS    XL2           NUMBER OF VALID SAMPLES\nASISWAP  DS    XL2           NUMBER OF SAMPLES WHEN JOB WAS PHYSICALLY\n*                            SWAPPED OUT.\nASIIDLE  DS    XL2           NUMBER OF SAMPLES WHEN JOB WAS IDLE\nASISWAR  DS    XL2           NUMBER OF SAMPLES WHEN JOB WAS SWAPPED\n*                            OUT READY.\n         DS    XL2\nASIUKN   DS    XL2           NUMBER OF SAMPLES WHEN JOB STATUS UNKNOWN\nASISUSEN DS    XL2           NUMBER OF SINGLE STATE USING SAMPLES\nASISUCPR DS    XL2           # OF SINGLE STATE SAMPLES USING PROCESSOR\nASISUCDV DS    XL2           # OF SINGLE STATE SAMPLES USING DEVICE\nASISWAIN DS    XL2           # OF SINGLE STATE SAMPLES DELAYED\nASISDCPR DS    XL2           # OF SINGLE STATE SAMPLES DELAYED PROC\nASISDCDV DS    XL2           # OF SINGLE STATE SAMPLES DELAYED DEV\nASISDCST DS    XL2           # OF SINGLE STATE SAMPLES DELAYED STOR\nASISDCJE DS    XL2           # OF SINGLE STATE SAMPLES DELAYED JES\nASISDCHS DS    XL2           # OF SINGLE STATE SAMPLES DELAYED HSM\nASISDCEN DS    XL2           # OF SINGLE STATE SAMPLES DELAYED ENQ\nASIVECTA DS    XL4           TOTAL ACCUMULATED VECTOR PROC TIME    @035\n         MEND\n./       ADD   NAME=ERBDSIG3\n         MACRO\n         ERBDSIG3\nDSIG3    DSECT ,\nDSIDSIG3 DS    CL5           ACRONYM 'DSIG3'\nDSIGRMFV DS    XL1           CONTROL BLOCK VERSION X'01'\nDSIGID   DS    CL4           SYSTEM IDENTIFIER\n         DS    XL2\nDSIGTODC DS    XL8           TIME DATASET WAS CREATED\nDSIGTODF DS    XL8           TIME STAMP FOR FIRST SET OF SAMPLES\nDSIGTODL DS    XL8           TIME STAMP FOR LAST SET OF SAMPLES\nDSIGFSPT DS    AL4           OFFSET OF 1ST SET OF SAMPLES FROM ERBDSIG3\nDSIGLSPT DS    AL4           OFFSET OF LST SET OF SAMPLES FROM ERBDSIG3\n         DS    XL4\nDSIGFIPT DS    AL4           OFFSET OF 1ST INDEX ENTRY FROM ERBDSIG3\nDSIGLIPT DS    AL4           OFFSET OF LAST INDEX ENTRY FROM ERBDSIG3\n         DS    XL4\nDSIGILEN DS    AL4           LENGTH OF AN INDEX ENTRY\n         DS    XL4\n         DS    XL6\nDSIG3IX  DSECT ,\nDSIGTOD1 DS    XL8           TIME STAMP FOR BEGINNING SET OF SAMPLES\nDSIGTOD2 DS    XL8           TIME STAMP FOR ENDING SET OF SAMPLES\nDSIGSBEG DS    AL4           OFFSET FROM BEGINNING OF THE DATASET TO\n*                            THE SET OF SAMPLES\nDSIGSLEN DS    AL4           LENGTH OF THE SET OF SAMPLES.\n         DS    XL1\n         DS    XL3\n         MEND\n./       ADD   NAME=ERBDVTG3\n         MACRO\n         ERBDVTG3\nDVTG3    DSECT ,\nDVTDVTG3 DS    CL5           ACRONYM 'DVTG3'\nDVTVERG3 DS    XL1           CONTROL BLOCK VERSION - X'02'\nDVTHDRLE DS    XL1           LENGTH OF THE DEVICE TABLE HEADER\nDVTENTLE DS    XL1           LENGTH OF EACH TABLE ENTRY\nDVTENTMX DS    XL4           NUMBER OF TABLE ENTRIES\nDVTENTNR DS    XL4           INDEX OF LAST TABLE ENTRY\nDVTG3ENT DSECT ,\nDVTVOLI  DS    CL6           VOLSER FOR THIS DEVICE\nDVTENIDX DS    XL2           INDEX OF THIS TABLE ENTRY\nDVTDEVNR DS    XL2           DEVICE NUMBER IN HEX\nDVTPREVI DS    XL2           INDEX OF THE PREVIOUS TABLE ENTRY FOR THE\n*                            SAME DEVICE\n         DS    XL4\n         DS    XL4\nDVTFLAG1 DS    XL1           DEVICE TYPE INDICATOR\n*                            BIT     MEANING WHEN SET\n*                            0       MULTIPLE EXPOSURE DEVICE\n*                            1       DASD DEVICE\n*                            2       TAPE DEVICE\n*                            3       MSC CONTROLLER\n*                            4       VIRTUAL DASD\n*                            5       DEVICE HAS ALT CUA (3350P)\n*                            6-7     RESERVED\nDVTFLAG2 DS    XL1           DEVICE STORAGE INDICATOR\n*                            BIT     MEANING WHEN SET\n*                            0       CONN/DISC/PEND TIMES AVAILABLE\n*                                    AT BEGIN TIME\n*                            1       CONN/DISC/PEND TIMES AVAILABLE\n*                                    AT END TIME\n*                            2       DEV BUSY DELAY/CUB DELAY TIMES\n*                                    AVAILABLE AT BEGIN TIME\n*                            3       DEV BUSY DELAY/CUB DELAY TIMES\n*                                    AVAILABLE AT END TIME\n*                            4       DEVICE HAS PLPA DATASET\n*                            5       DEVICE HAS COMMON PAGE DATASET\n*                            6       DEVICE HAS LOCAL PAGE DATASET\n*                            7       DEVICE HAS SWAP PAGE DATASET\nDVTMEXNR DS    XL2           NUMBER OF EXPOSURE (INCLUDING BASE)\nDVTDISIF DS    XL4           DEVICE DISC TIME AT BEGIN OF THE MINTIME\n*                            FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTPETIF DS    XL4           DEVICE PEND TIME AT BEGIN OF THE MINTIME\n*                            FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTCOTIF DS    XL4           DEVICE CONN TIME AT BEGIN OF THE MINTIME\n*                            FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTDVBIF DS    XL4           DEVICE BUSY DELAY TIME AT BEGIN OF THE\n*                            MINTIME FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTCUBIF DS    XL4           CONTROL UNIT BUSY DELAY AT BEGIN OF THE\n*                            MINTIME FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTDISIL DS    XL4           DEVICE DISC TIME AT END OF THE MINTIME\n*                            FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTPETIL DS    XL4           DEVICE PEND TIME AT END OF THE MINTIME\n*                            FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTCOTIL DS    XL4           DEVICE CONN TIME AT END OF THE MINTIME\n*                            FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTDVBIL DS    XL4           DEVICE BUSY DELAY TIME AT END OF THE\n*                            MINTIME FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTCUBIL DS    XL4           CONTROL UNIT BUSY DELAY AT END OF THE\n*                            MINTIME FOR THIS SET OF SAMPLES\n*                            (128 MICROSECOND UNITS).\nDVTTYP   DS    XL4           DEVICE TYPE FROM UCBTYP MACRO\n         MEND\n./       ADD   NAME=ERBENTG3\n         MACRO\n         ERBENTG3\nENTG3    DSECT ,\nENTENTG3 DS    CL5           ACRONYM 'ENTG3'\nENTVERG3 DS    XL1           CONTROL BLOCK VERSION - X'02'\nENTHDRLE DS    XL1           LENGTH OF THE ENQUEUE NAME TABLE HEADER\nENTENTLE DS    XL4           LENGTH OF EACH ENTRY\nENTENTMX DS    XL4           NUMBER OF TABLE ENTRIES\nENTENTNR DS    XL4           INDEX OF LAST TABLE ENTRY\nENTG3ENT DSECT ,\nENTENIDX DS    XL2           INDEX OF THIS TABLE ENTRY\nENTMAJNA DS    CL8           MAJOR NAME OF THIS RESOURCE\nENTMINNA DS    CL36          MINOR NAME OF THIS RESOURCE\nENTSCOPE DS    XL1           SCOPE OF THE RESOURCE:\n*                            BIT     MEANING WHEN SET\n*                            1       SYSTEMS\n*                            2       STEP\n*                            3       GLOBAL RESOURCE\n*                            4-7     RESERVED\n         MEND\n./       ADD   NAME=ERBGEIG3\n         MACRO\n         ERBGEIG3\nGEIG3    DSECT ,\nGEIGEIG3 DS    CL5           ACRONYM 'GEIG3'\nGEIVERG3 DS    XL1           CONTROL BLOCK VERSION - X'02'         @035\nGEILEN   DS    XL2           LENGTH OF THIS CONTROL BLOCK\nGEIWTIMB DS    XL8           SUM OF WAIT TIME FOR ALL PROCESSORS AT THE\n*                            BEGIN OF THIS MINTIME INTERVAL\nGEIWTIME DS    XL8           SUM OF WAIT TIME FOR ALL PROCESSORS AT THE\n*                            END OF THIS MINTIME INTERVAL\nGEIVERSN DS    XL1           CPU VERSION NUMBER\n         DS    XL1\nGEIFLAG  DS    XL1           PROCESSOR FLAG:\n*                            BIT     MEANING WHEN SET\n*                            0       SERVICE PROCESSOR ARCHITECTURE\n*                                    SUPPORTED\n*                            1-7     RESERVED\n         DS    XL1\nGEIMODEL DS    XL2           CPU MODEL NUMBER (PACKED UNSIGNED)\nGEIIPSID DS    CL2           IPS MEMBER SUFFIX\nGEIOPTN  DS    CL2           OPT MEMBER SUFFIX\nGEIICSN  DS    CL2           ICS MEMBER SUFFIX\nGEISID   DS    CL4           SMF ID\nGEICPUOL DS    XL4           NUMBER OF ONLINE PROCESSORS\nGEIAHUIC DS    XL4           HIGHEST SYSTEM UIC\nGEIRPOOL DS    XL4           NUMBER OF ONLINE REAL FRAMES\nGEIRCOMA DS    XL4           NUMBER OF REAL CSA FRAMES\nGEIRSQAA DS    XL4           NUMBER OF REAL SQA FRAMES\nGEIRAFC  DS    XL4           NUMBER OF AVAILABLE REAL FRAMES\nGEINUCA  DS    XL4           NUMBER OF NUCLEUS FRAMES\n         DS    XL8\nGEIEESPL DS    XL4           NUMBER OF ONLINE EXTENDED STORAGE FRAMES\nGEIGAGE  DS    XL4           EXTENDED STORAGE MIGRATION AGE\nGEIECOME DS    XL4           NUMBER OF EXTENDED COMMON FRAMES\nGEIEAEC  DS    XL4           NUMBER OF AVAILABLE EXTENDED FRAMES\nGEIVECOL DS    XL4           NUMBER OF ONLINE VECTOR PROCESSORS    @035\n         MEND\n./       ADD   NAME=ERBREDG3\n         MACRO\n         ERBREDG3\nREDG3    DSECT ,\nREDREDID DS    XL1           RESOURCE ID:\n*                            VALUE MEANING\n*                            X'01' PROC\n*                            X'02' DEV\n*                            X'03' STOR\n*                            X'04' JES2/JES3\n*                            X'06' HSM\n*                            X'07' ENQ\n*                            X'3F' USER\nREDFLAG  DS    XL1           RESOURCE DATA RECORD FLAGS:\n*                            BIT   MEANING WHEN SET\n*                            0     INVALID RESOURCE\n*                            1     USE RECORDS AVAILABLE\n*                            2     WAIT RECORDS AVAILABLE\n*                            3-7   RESERVED\n         DS    XL2\nREDFUWDO DS    XL4           OFFSET TO 1ST USE/WAIT RECORD FROM\n*                            ERBREDG3\nREDUWDLE DS    0XL1          FOR USE/WAIT RECORDS, THE LENGTH OF THE\n*                            RECORD\nREDUSERL DS    0XL1          FOR USER RECORDS, THEN LENGTH OF THE\n*                            RECORD\nREDUWDL1 DS    XL1           FOR ENQ USE RECORDS, THE LENGTH OF THE\n*                            RECORD WITHOUT SYSTEM/JOBNAME\nREDUWDL2 DS    XL1           FOR ENQ USE RECORDS, THE LENGTH OF THE\n*                            RECORD INCLUDING SYSTEM/JOBNAME\nREDUWDNR DS    0XL2          NUMBER OF USE/WAIT RECORDS\nREDUSERN DS    XL2           NUMBER OF USER EXIT RECORDS\n         MEND\n./       ADD   NAME=ERBSHDG3\n         MACRO\n         ERBSHDG3\nSHDG3    DSECT ,\nSHDSHDG3 DS    CL5           ACRONYM 'SHDG3'\nSHDRMFV  DS    XL1           CONTROL BLOCK VERSION - X'02'\nSHDLEN   DS    XL1           LENGTH OF SHDG3 CONTROL BLOCK\nSHDFLAG1 DS    XL1           SAMPLE FLAGS:\n*                            BIT     MEANING WHEN SET\n*                            0       INVALID SAMPLE\n*                            1-7     RESERVED\nSHDPREVO DS    XL4           OFFSET TO PREVIOUS SAMPLE FROM ERBSHDG3\nSHDNEXTO DS    XL4           OFFSET TO NEXT SAMPLE FROM ERBSHDG3\nSHDREDOF DS    XL4           OFFSET TO FIRST RESOURCE DATA RECORD\n*                            (RED) FROM ERBSHDG3\nSHDREDNR DS    XL2           NUMBER OF RED RECORDS\nSHDREDLE DS    XL2           LENGTH OF EACH RED ENTRY\n         DS    XL4\n         DS    XL2\nSHDUWDNR DS    XL2           NUMBER OF USE/WAIT RECORDS\n         DS    XL8\n         DS    XL8\n         MEND\n./       ADD   NAME=ERBSSHG3\n         MACRO\n         ERBSSHG3\nSSHG3    DSECT ,\nSSHSSHG3 DS    CL5           ACRONYM 'SSHG3'\nSSHRMFV  DS    XL1           CONTROL BLOCK VERSION NUMBER X'02'\nSSHLEN   DS    AL2           LENGTH OF SET OF SAMPLES HEADER\nSSHRMFVN DS    CL3           RMF VERSION NUMBER\n         DS    XL1\n         DS    XL24\nSSHSHDFO DS    AL4           OFFSET OF 1ST SAMPLE HEADER FROM ERBSSHG3\nSSHSHDLO DS    AL4           OFFSET OF LAST SAMPLE HEADER FROM ERBSSHG3\nSSHTOTLE DS    AL4           TOTAL LENGTH FOR THIS SET OF SAMPLES\n*                             (INCLUDING THE SET OF SAMPLES HEADER)\n         DS    XL4\n         DS    XL4\nSSHSMPNR DS    AL4           NUMBER OF VALID SAMPLES\nSSHTIBEG DS    XL8           BEGIN TIME FOR THIS SET OF SAMPLES\nSSHTIEND DS    XL8           END TIME FOR THIS SET OF SAMPLES\n         DS    XL16\nSSHASIO  DS    AL4           OFFSET OF THE ASID TABLE FROM ERBSSHG3\n         DS    XL4\n         DS    XL4\n         DS    XL4\nSSHDVTO  DS    AL4           OFFSET OF THE DVT TABLE FROM ERBSSHG3\n         DS    XL4\n         DS    XL4\nSSHENTO  DS    AL4           OFFSET OF THE ENT TABLE FROM ERBSSHG3\n         DS    XL8\n         DS    XL4\n         DS    XL12\nSSHGEIO  DS    AL4           OFFSET OF THE GENERAL INFORMATION TABLE\n*                            FROM ERBSSHG3\nSSHIOML  DS    XL1           PROCESSOR TYPE ON WHICH THE DATA WAS\n*                            CREATED:\n*        EQU   X'01'          308X/908X\n*        EQU   X'02'          4381\n*        EQU   X'03'          3090\nSSHEFLAG DS    XL1           EXTENDED STORAGE INDICATORS:\n*                             BIT     MEANING WHEN SET\n*                             0       EXTENDED STORAGE INSTALLED\n*                             1-7     RESERVED\n         DS    XL2\nSSHGOCYC DS    XL4           GATHERER CYCLE OPTION\nSSHGOSTO DS    XL4           GATHERER STOP OPTION\n*                            (IF THE 1ST BIT IS 0, NOSTOP IS IN EFFECT)\nSSHGOSYN DS    XL4           GATHERER SYNC OPTION\n*                            (IF THE 1ST BIT IS 0, NOSYNC IS IN EFFECT)\nSSHGOMNT DS    XL4           GATHERER MINTIME OPTION\n         DS    XL3\nSSHGOCLA DS    CL1           GATHERER SYSOUT CLASS OPTION\n         DS    XL4\nSSHJESN  DS    CL1           NAME OF JES SUBSYSTEM\nSSHGOWHL DS    XL4           GATHERER DATASET WHOLD OPTION\nSSHGOWST DS    XL4           GATHERER WSTOR OPTION\n         DS    XL40\nSSHSTDIF DS    XL8           DIFFERENCE BETWEEN LOCAL TIME AND GMT\n*                            WHERE THE DIFFERENCE EQUALS LOCAL TIME\n*                            MINUS GMT\n         DS    XL24\n         MEND\n./       ADD   NAME=ERBUWDG3\n         MACRO\n         ERBUWDG3\nUWDG3    DSECT ,\nUWDUWRID DS    XL1           USE/WAIT RECORD ID\n*                            BIT     MEANING WHEN SET\n*                            0       WAIT RECORD\n*                            1       USE RECORD\n*                            2-7     RESOURCE ID\nUWDASID  DS    XL2           ADDRESS SPACE (ASIG3) TABLE INDEX\nUWDDEVNR DS    0XL2          DEVICE TABLE (DVTG3) INDEX\nUWDPDEVR DS    XL2           PAGING DEVICE (DVTG3) INDEX\nUWDFLAGS DS    XL1           FLAGS FOR STORAGE STATUS:\n*                            BIT     MEANING WHEN SET\n*                            0       DELAYED FOR LOCAL REQUEST\n*                            1       DELAYED FOR SWAP IN REQUEST\n*                            2       DELAYED FOR COMMON REQUEST\n*                            3       DELAYED FOR VIO REQUEST\n*                            4       SPACE TYPE LOCAL\n*                            5       SPACE TYPE SWAP\n*                            6       SPACE TYPE COMMON\n*                            7       SPACE TYPE VIO\n         ORG   *-3\nUWDJESFU DS    XL2           JES2/JES3 FUNCTION CODE\nUWDJS3MO DS    XL1           JES3 MODIFICATION CODE\n         ORG   *-3\nUWDHSMFU DS    XL2           HSM FUNCTION CODE\nUWDHSMMO DS    XL1           HSM MODIFICATION CODE\n         ORG   *-3\nUWDENTID DS    XL2           ENQUEUE NAME TABLE (ENTG3) INDEX\nUWDFLAGE DS    XL1           ENQUEUE FLAGS:\n*                            BIT     MEANING WHEN SET\n*                            0       OFF=REQUEST IS EXCLUSIF\n*                                    ON=REQUEST IS SHARED\n*                            1       ON=REQUEST FROM ANOTHER SYSTEM\n*                                    FIELDS UXDSYSNA/UWDJOBNA ARE\n*                                    VALID\n*                            2-7     RESERVED\nUWDSYSNA DS    CL8           SYSTEM NAME OF REQUESTOR\nUWDJOBNA DS    CL8           JOB NAME OF REQUESTOR\n         MEND\n./       ADD   NAME=ERB3POST\nERB3     TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT MANUFACTURER'S LIFE INSURANCE OR     *\n*     SUPPLIED BY OTHER USERS ON A NON-RESTRICTIVE BASIS, IS OF       *\n*     GENERAL INTEREST AND IS SUBMITTED FOR UNRESTRICTED DISTRIBUTION.*\n*                                                                     *\n*     THE AUTHOR HAS, SINCE DEVELOPING THIS PROGRAM, MOVED TO SUNCOR  *\n*     INC.  USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR          *\n*     DOCUMENTATION TO SUNCOR.  HOWEVER, NO PROMISE CAN BE MADE THAT  *\n*     SUCH SUGGESTIONS WILL BE IMPLEMENTED OR ERRORS CORRECTED.       *\n*     SUBMIT COMMENTS TO:                                             *\n*                                                                     *\n*                                                                     *\n*              JIM LANE                                               *\n*              TECHNICAL SUPPORT GROUP                                *\n*              SUNCOR INC.                                            *\n*              36 YORK MILLS RD                                       *\n*              TORONTO, ONTARIO M2P 2C5                               *\n*                                                                     *\n*                PHONE: (416)-733-7396                                *\n*                                                                     *\n*                SHARE INSTALLATION CODE: SNI                         *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY SUNCOR WITHOUT CHARGE OR      *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n TITLE 'PROGRAM DESCRIPTION.'\n***********************************************************************\n*                                                                     *\n*  NAME         ERB3POST                                              *\n*                                                                     *\n*  FUNCTION     READS THE DATASET PRODUCED BY RMF 3.5 MONITOR         *\n*               III, WRITES A REPORT OF POSSIBLE ANOMOLIES AND        *\n*               WRITES TWO SEQUENTIAL FILES (ONE ABOUT ADDRESS        *\n*               SPACES AND ONE ABOUT DEVICES) SUMMARIZING THE         *\n*               MONITOR III MEASUREMENTS.                             *\n*                                                                     *\n*  DESCRIPTION  THE DATASET PRODUCED BY RMF MONITOR III AS OF 3.5 IS  *\n*               NOT IN ANY WAY NORMAL. IT IS A VSAM ESDS OF 32K       *\n*               RECORDS. THE 1ST RECORD, AFTER SOME DESCRIPTIVE       *\n*               DATA IS FILLED WITH AN ARRAY OF 28 BYTE POINTERS      *\n*               DESCRIBING \"SETS OF SAMPLES\". A SET OF SAMPLES IS     *\n*               WHAT MONITOR III CALCULATES EVERY \"MINTIME\" SECONDS.  *\n*               THE SAMPLE DATA DATA FILLS RECORDS 2 THROUGH N.       *\n*               THE CATCH IS THAT MONITOR III KEEPS TRACK OF WHERE    *\n*               THINGS ARE IN THE DATASET BY USING OFFSET FIELDS      *\n*               THAT ARE RELATIVE TO BYTE 0 OF RECORD 1. IN EFFECT    *\n*               WHAT YOU HAVE IS A CHECKPOINTED COPY OF AN INCORE     *\n*               ARRAY OF SOME KIND, NOTHING IN RECORDS 2 TO N IS IN   *\n*               ANY NECESSARY ORDER. THEREFORE, IN ORDER TO PROCESS   *\n*               THIS MESS YOU NEED THE WHOLE THING IN CORE.           *\n*                                                                     *\n*               ERB3POST PROCESSES BY READING THE ENTIRE DATASET      *\n*               INTO MEMORY AND THEN LOOPING OVER ALL SET OF SAMPLES  *\n*               POINTERS IN RECORD 1. FOR EACH OF THESE, TWO          *\n*               SUBROUTINES ARE CALLED ONE TO PROCESS ASID'S AND ONE  *\n*               TO PROCESS DEVICES. ASIDS AND DEVICES ARE EACH HELD   *\n*               IN A TABLE POINTED TO BY THE SET OF SAMPLES HEADER    *\n*               WHICH IS POINTED TO FROM RECORD 1. THE SUBROUTINES    *\n*               PRINT A LINE OF THE REPORT IF THE DELAY PERCENTS SEEM *\n*               HIGH AND WRITE A RECORD TO THE EXTRACT FILES.         *\n*               THE DATA WRITTEN TO THE EXTRACT FILES IS ESSENTIALLY  *\n*               WHAT YOU WOULD SEE WITH THE \"DELAYJ\" AND \"DEVR\"       *\n*               COMMANDS UNDER RMFWDM.                                *\n*                                                                     *\n***********************************************************************\n EJECT ,\n***********************************************************************\n*                                                                     *\n* ENVIRONMENT   MVS/XA 2.2.0                                          *\n*               RMF 3.5                                               *\n*               DFP/XA 2.3                                            *\n*                                                                     *\n* INPUT         A DATASET PRODUCED BY RMF MONITOR III.                *\n*                                                                     *\n* OUTPUT        A PRINTED REPORT OF JOBS AND DEVICES WITH HIGH DELAYS *\n*               A SEQUENTIAL FILE, ONE RECORD PER ASID PER SET OF     *\n*               SAMPLES.                                              *\n*               A SEQUENTIAL FILE, ONE RECORD PER DEVICE PER SET OF   *\n*               SAMPLES.                                              *\n*                                                                     *\n* JCL EXAMPLE                                                         *\n*                                                                     *\n*          //ERB3  EXEC PGM=ERB3POST,REGION=128M                      *\n*          //STEPLIB  DD  DSN=JIMLANE.SYSTEMS.LOAD,                   *\n*          //             DISP=SHR                                    *\n*          //SYSUT1   DD  DSN=THP.RMFIII.MANDS,                       *\n*          //             DISP=SHR                                    *\n*          //SYSUDUMP DD  SYSOUT=*                                    *\n*          //SYSPRINT DD  SYSOUT=*                                    *\n*          //ASIDLIST DD  SYSOUT=*                                    *\n*          //ASIDS    DD  DSN=JIMLANE.ASIDS,                          *\n*          //             DISP=(,CATLG),                              *\n*          //             UNIT=TEST,                                  *\n*          //             SPACE=(TRK,(15,15),RLSE)                    *\n*          //DEVICES  DD  DSN=JIMLANE.DEVICES,                        *\n*          //             DISP=(,CATLG),                              *\n*          //             UNIT=TEST,                                  *\n*          //             SPACE=(TRK,(15,15),RLSE)                    *\n*          //*                                                        *\n*          //         EXEC SAS                                        *\n*          //ASIDS    DD  DSN=JIMLANE.ASIDS,                          *\n*          //             DISP=SHR                                    *\n*          //DEVICES  DD  DSN=JIMLANE.DEVICES,                        *\n*          //             DISP=SHR                                    *\n*          //SYSIN    DD  DSN=JIMLANE.SYSTEMS.RMFIII(SASASID),        *\n*          //             DISP=SHR                                    *\n*          //                                                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n&NAME    SETC  'ERB3POST'\n&VERSION SETC  '1.1.0'\n         TITLE 'RMF MONITOR III POST PROCESSOR.'\n         AMODE 31\n         PUNCH ' MODE AMODE(31),RMODE(24) '\n        $REGS ,\nPOST3   $PROLOG R11,R12\n         L     R10,=V(DATASECT)\n         USING DATASECT,R10\n         L     R2,MEG128          LENGTH TO GETMAIN\n         GETMAIN RU,LV=(2),                                            X\n               LOC=(ANY,ANY)      GET STORAGE FOR MONITOR III DATA\n         ST    R1,TABSTART        SAVE START ADDRESS.\n         ST    R1,BXLE1           SAVE START ADDRESS.\n         L     R3,RECLIII         GET RECORD LENGTH\n         ST    R3,BXLE1+4         SAVE AS INCREMENT\n         AR    R1,R2              DEVELOP END ADDRESS\n         SR    R1,R3              WHICH IS THE START OF THE LAST SLOT\n         ST    R1,TABEND          AND SAVE IT ALSO.\n         ST    R1,BXLE1+8         SAVE ALSO AS STOP VALUE.\n         GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               DDNAME=SYSUT1,                                          X\n               EXLST=EXLST1,                                           X\n               MACRF=(KEY,AMODE31,SEQ)\n         ST    R1,ACBAD           SAVE ADDRESS OF INPUT ACB.\n         GENCB BLK=RPL,                                                X\n               AM=VSAM,                                                X\n               ACB=(*,ACBAD),                                          X\n               ARG=(S,ARGFLD),                                         X\n               AREALEN=32752,                                          X\n               OPTCD=(KEY,SEQ)\n         ST    R1,RPLAD           SAVE RPL ADDRESS\n         L     R2,ACBAD           ADDR OF ACB TO BE OPENED\n        $AMODE 24                 OPEN IN AMODE24\n         OPEN  ((2))\n        $AMODE 31                 BACK TO 31 BIT\n         LM    R3,R5,BXLE1        LOOP OVER MONITOR DATA\n         L     R2,RPLAD           PICK UP RPL ADDRESS\nRDLOOP1  MODCB RPL=(2),AREA=(3)   SPECIFY BUFFER ADDRESS.\n         GET   RPL=(2)            GET A RECORD\n         LTR   R15,R15            GOTTEN OK?\n         BZ    RDLOOP2            YES.\n         ICM   R3,15,RPLFDBWD-IFGRPL(R2)\n         ABEND 1,DUMP             CRASH AND BURN.\nRDLOOP2  BXLE  R3,R4,RDLOOP1      READ ALL RECORDS\n*        ABEND 99,DUMP            TABLE OVERFLOW\nEODADIN  DS    0H\n         L     R2,ACBAD           ADDR OF ACB TO BE CLOSED\n        $AMODE 24                 CLOSE IN AMODE24\n         CLOSE ((2))\n        $AMODE 31                 BACK TO 31 BIT\n         XPROPEN PWA              OPEN PRINT FILE\n         XPRHEAD PWA,LIST=(HEADER1,HEADER2A)\n         L     R3,TABSTART        START ADDR OF RMFIII DATA.\n         USING DSIG3,R3\n         LA    R1,DSIGTODC        GET TIME/DATE DATASET CREATED.\n         BAL   R9,CLOCK           CONVERT IT.\n         MVC   PRTLINE(19),=C' DATA SET CREATED: '\n         MVC   PRTLINE+30(28),STCK MOVE IN CREATE DATE/TIME\n         LA    R0,0               SKIP 0 LINES\n         LA    R1,PRTLINE+1       START OF DATA TO PRINT.\n         STM   R0,R1,PLINE0       SAVE PLIST\n         BAL   R9,PRINT\n         LA    R1,DSIGTODF        GET TIME/DATE 1ST SET OF SAMPLES\n         BAL   R9,CLOCK           CONVERT IT.\n         MVC   PRTLINE(27),=C' 1ST SET OF SAMPLES TAKEN: '\n         MVC   PRTLINE+30(28),STCK MOVE IN CREATE DATE/TIME\n         LM    R0,R1,PLINE0       PRINTER PARMS\n         BAL   R9,PRINT\n         LA    R1,DSIGTODL        GET TIME/DATE 1ST SET OF SAMPLES\n         BAL   R9,CLOCK           CONVERT IT.\n         MVC   PRTLINE(28),=C' LAST SET OF SAMPLES TAKEN: '\n         MVC   PRTLINE+30(28),STCK MOVE IN CREATE DATE/TIME\n         LM    R0,R1,PLINE0       PRINTER PARMS\n         BAL   R9,PRINT\n         LR    R5,R3              GET DSIG3 ADDRESS\n         A     R5,DSIGFIPT        ADDRESS OF 1ST INDEX ENTRY\n         USING DSIG3IX,R5\n         L     R6,DSIGILEN        LENGTH OF AN INDEX ENTRY\n         LR    R7,R3              GET DSIG3 ADDRESS\n         A     R7,DSIGLIPT        ADDRESS OF LAST INDEX ENTRY\nLOOPIX1  DS    0H\n         CLC   DSIGTOD1,DSIGTOD2  COMPARE TIMESTAMPS\n         BNL   LOOPIX1A           EQUAL INDICATES TIME GAP, I THINK\n         L     R9,DSIGSBEG        OFFSET OF SET OF SAMPLES HEADER\n         AR    R9,R3              PLUS ERBDSIG3\n         USING SSHG3,R9\n         CLC   SSHSMPNR,=F'30'    CHECK NUMBER OF SAMPLES\n         BNH   LOOPIX1A           A LOW NUMBER IS A GAP, I THINK?\n         DROP  R9\n         LA    R1,DSIGTOD1        TIMESTAMP BEGINNING\n         BAL   R9,CLOCK           CONVERT IT.\n         L     R15,=V(LISTASID)   ASID TABLE ROUTINE\n         BALR  R14,R15            CALL IT.\n         L     R15,=V(LISTDEVT)   DEVICE TABLE ROUTINE\n         BALR  R14,R15            CALL IT, TOO.\nLOOPIX1A BXLE  R5,R6,LOOPIX1      PROCESS ALL INDEX ENTRIES.\n         XPRCLOSE PWA             CLOSE PRINT FILE\n         L     R1,TABSTART        ADDRESS TO FREEMAIN\n         L     R0,MEG128          LENGTH TO FREEMAIN\n         FREEMAIN RU,LV=(0),A=(1)\n        $EPILOG ,\n         TITLE ' - TOD CLOCK CONVERSION SUBROUTINE.'\nCLOCK    DS    0H\n         MVC   STCKSTCK,0(R1)     MOVE IN CLOCK VALUE TO BE CONVERTED.\n        @STCK  CODE\n         BR    R9                 GOBACK.\n         TITLE ' - PRINT LINE SUBROUTINE.'\nPRINT    DS    0H\n         ST    R1,PRINT1\n         XPRNTLIN  PWA,TEXT=(R1),LENGTH=132,SPB=((R0)),SPA=1\n         L     R1,PRINT1\n         MVI   0(R1),C' '\n         MVC   1(132,R1),0(R1)\n         BR    R9                 GOBACK.\nPRINT1   DC    F'0'\n         LTORG ,\n         TITLE 'DATA AREAS.'\n         DS    0F\nMEG128   DC    AL4(128*1024*1024) 128 MEG TABLE SIZE\nRECLIII  DC    AL4(32752)         RECORDING DATASET RECORD LENGTH.\nEXLST1   EXLST EODAD=EODADIN      EOD ROUTINE FOR SYSUT1\n         SPACE ,\n         PRINT NOGEN\n         COPY  LISTASID\n         COPY  LISTDEVT\n         COPY  TOTIME\n         COPY  DATASECT\n         PRINT OFF\n         COPY  PRINT\n         PRINT ON,GEN\n         ERBASIG3 ,\n         ERBDSIG3 ,\n         ERBDVTG3 ,\n         ERBENTG3 ,\n         ERBGEIG3 ,\n         ERBREDG3 ,\n         ERBSHDG3 ,\n         ERBSSHG3 ,\n         ERBUWDG3 ,\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IFGRPL ,\n         END   POST3\n./       ADD   NAME=LISTASID\n         TITLE ' - LIST ACTIVE ASIDS.'\n* ON ENTRY R5 CONTAINS THE DATASET INDEX ENTRY ADDRESS.\n* R3 CONTAINS ERBDSIG3\nLISTASID $PROLOG R11,R12\n         L     R10,=V(DATASECT)\n         USING DATASECT,R10\n         CLC   PWAOPN,=F'0'       HAVE I BEEN HERE BEFORE.\n         BNE   LAOPEN             YES.\n        $AMODE 24\n         OPEN  (ASIDS,OUTPUT)     OPEN ASID DATA OUTPUT FILE.\n        $AMODE 31\n         CLC   PWDOPN,=F'0'       HAVE I HAD A DEVICE ALREADY?\n         BNE   LAOPEN1            IF SO, HEADINGS ARE SET.\n         XPRHEAD PWA,LIST=(PWALHD1,PWALHD2)\n         XPREJECT PWA\nLAOPEN1  DS    0H\n         MVC   PWAOPN,=F'255'     SAY ITS OPEN.\nLAOPEN   DS    0H\n         L     R6,DSIGSBEG        OFFSET OF SET OF SAMPLES HEADER.\n         AR    R6,R3              PLUS ERBDSIG3.\n         USING SSHG3,R6\n         MVC   ASRTIBEG,SSHTIBEG  SETUP BEGIN TIME STAMP.\n         L     R7,SSHASIO         OFFSET OF ASID TABLE.\n         AR    R7,R6              PLUS ERBSSHG3.\n         DROP  R6\n         USING ASIG3,R7\n         L     R2,ASIENTMX        NUMBER OF ASID ENTRIES.\n         LTR   R2,R2              ARE THERE ANY?\n         BNP   LAEXIT             IF NOT, GET OUT.\n         SR    R8,R8              CLEAR A REGISTER.\n         ICM   R8,1,ASIENTLE      ENTRY LENGTH.\n         SR    R6,R6              CLEAR A REGISTER.\n         ICM   R6,1,ASIHDRLE      HEADER LENGTH\n         AR    R7,R6              POINT TO 1ST ENTRY\n         DROP  R7\n         USING ASIG3ENT,R7\nLALOOP1  DS    0H\n         SR    R6,R6\n         ICM   R6,3,ASISMPCT      GET NUMBER OF SAMPLES.\n         LTR   R6,R6              ARE THERE ANY?\n         BNP   LALOOP2            SKIP IT IF NOT.\n         ICM   R4,15,ASICPUTA     GET CPU TIME.\n         LTR   R4,R4              WAS THERE ANY?\n         BNP   LALOOP2            SKIP IT IF NOT.\n         SPACE ,\n         MVC   ASRJOBNA,ASIJOBNA\n         MVC   ASRNPG,ASINPG\n         MVC   ASRDMN,ASIDMN\n         MVC   ASRASINR,ASIASINR\n         MVC   ASRCPUTA,ASICPUTA\n         MVC   ASRDCTIA,ASIDCTIA\n         MVC   ASRFIXA,ASIFIXA\n         MVC   ASRTRCA,ASITRCA\n         MVC   ASRFMCT,ASIFMCT\n         MVC   ASRFMCTI,ASIFMCTI\n         MVC   ASRSMPCT,ASISMPCT\n         MVC   ASRSWAP,ASISWAP\n         MVC   ASRIDLE,ASIIDLE\n         MVC   ASRSWAR,ASISWAR\n         MVC   ASRUKN,ASIUKN\n         MVC   ASRSUSEN,ASISUSEN\n         MVC   ASRSUCPR,ASISUCPR\n         MVC   ASRSUCDV,ASISUCDV\n         MVC   ASRSWAIN,ASISWAIN\n         MVC   ASRSDCPR,ASISDCPR\n         MVC   ASRSDCDV,ASISDCDV\n         MVC   ASRSDCST,ASISDCST\n         MVC   ASRSDCJE,ASISDCJE\n         MVC   ASRSDCHS,ASISDCHS\n         MVC   ASRSDCEN,ASISDCEN\n        $AMODE 24\n         PUT   ASIDS,ASREC        WRITE DETAILS OF ASID\n        $AMODE 31\n         SPACE ,\n         MVC   LA1JOBNA,ASIJOBNA  MOVE IN JOB NAME\n         ICM   R0,15,ASICPUTA     CPU TIME\n         LA    R1,LA1CPUTM        ADDR OF RESULT FIELD.\n         L     R15,=V(TOTIME)     ADDR OF CONVERT ROUTINE\n         BALR  R14,R15            GET IT IN HH:MM:SS\n         SR    R4,R4\n         ICM   R4,3,ASISUSEN      GET NUMBER OF USING SAMPLES\n         SR    R5,R5\n         ICM   R5,3,ASISWAIN      GET NUMBER OF DELAY SAMPLES\n         LTR   R5,R5              ANY DELAY?\n         BZ    LALOOP2            NO PROBLEM. NO REPORT.\n         AR    R5,R4              R5 = USING + DELAY SAMPLES.\n         LTR   R5,R5              ARE THERE ANY?\n         BNP   LALOOP2            IF NOT, WHY BOTHER?\n         MH    R4,=H'100'         TIMES 100\n         SRDA  R4,32              SET UP TO DIVIDE\n         DR    R4,R6              DIVIDE BY TOTAL SAMPLES\n         CVD   R5,DOUBLE          R5 IS USING PERCENT.\n         ST    R5,LAUSING         SAVE FOR LATER ANALYSIS\n         EDIT  LA1USING,DWK2,ZZ9  FORMAT USING PERCENT.\n         SR    R4,R4\n         ICM   R4,3,ASISWAIN      GET NUMBER OF DELAY SAMPLES\n         MH    R4,=H'100'         TIMES 100\n         SRDA  R4,32              SET UP TO DIVIDE\n         DR    R4,R6              DIVIDE BY TOTAL SAMPLES\n         CVD   R5,DOUBLE          R5 IS DELAY PERCENT.\n         ST    R5,LADELAY         SAVE FOR LATER.\n         EDIT  LA1DELAY,DWK2,ZZ9  FORMAT DELAY PERCENT.\n         CVD   R6,DOUBLE          CONVERT TOTAL SAMPLES\n         EDIT  LA1SMPLS,DWK3,ZZZZZ9\n         TM    ASIFLAG1,X'80'     IS IT AN STC?\n         BNO   *+10               NO\n         MVC   LA1TYPE,=C'STC'    CALL AN STC AN STC.\n         TM    ASIFLAG1,X'40'     IS IT A JOB?\n         BNO   *+10               NO\n         MVC   LA1TYPE,=C'JOB'    CALL A JOB A JOB.\n         TM    ASIFLAG1,X'20'     IS IT A TSU?\n         BNO   *+10               NO\n         MVC   LA1TYPE,=C'TSU'    CALL A TSU A TSU.\n         MVC   LA1DOW,STCKDOW     DAY OF THE WEEK\n         MVC   LA1DATE,STCKDATE   DATE\n         MVC   LA1TIME,STCKTIME   TIME\n         BAL   R9,LASELECT        SELECT ONLY THE INTERSTING ONES.\n         LTR   R1,R1              DO WE WANT THIS ONE?\n         BNZ   LALOOP2            I GUESS NOT.\n         XPRNTLIN  PWA,TEXT=LA1LINE,LENGTH=132,SPB=0,SPA=1\nLALOOP2  AR    R7,R8              POINT TO NEXT ENTRY.\n         BCT   R2,LALOOP1         LOOP OVER ALL ASIDS.\nLAEXIT   DS    0H\n         $EPILOG ,\n         TITLE ' - SELECT ONLY INTERESTING ASIDS.'\nLASELECT DS    0H\n         LA    R1,1               REJECT BY DEFAULT.\n         C     R6,=F'50'          DECENT NUMBER OF SAMPLES?\n         BLR   R9                 IF NOT, THE REST DOESN'T MEAN MUCH\n         TM    ASIFLAG1,X'20'     IS IT A TSU?\n         BO    LASELTSU           GOTO TSU LOGIC\n         TM    ASIFLAG1,X'40'     IS IT A JOB?\n         BO    LASELJOB           GOTO JOB LOGIC\n         CLC   LADELAY,=F'10'     DELAY PCT > 10 ?\n         BLR   R9                 NO.\n         SR    R1,R1              THAT'S A KEEPER.\n         BR    R9                 GOBACK.\nLASELTSU DS    0H\n         CLC   LADELAY,=F'50'     DELAY PCT > 50 ?\n         BLR   R9                 NO.\n         SR    R1,R1              THAT'S A KEEPER.\n         BR    R9                 GOBACK.\nLASELJOB DS    0H\n         CLC   LADELAY,=F'25'     DELAY PCT > 25 ?\n         BLR   R9                 NO.\n         SR    R1,R1              THAT'S A KEEPER.\n         BR    R9                 GOBACK.\n         LTORG ,\n         TITLE 'DATA AREAS.'\nLAUSING  DC    F'0'               USING PERCENT\nLADELAY  DC    F'0'               DELAY PERCENT\n         SPACE ,\nASIDS    DCB   DDNAME=ASIDS,DSORG=PS,MACRF=(PM),LRECL=75,BLKSIZE=9375, X\n               RECFM=FB\nASREC    DS    0H\nASRJOBNA DS    CL8           JOBNAME FOR THIS ASID\nASRTIBEG DS    XL8           BEGIN TIME STAMP.\nASRNPG   DS    XL2           CONTROL PERFORMANCE GROUP\nASRDMN   DS    XL1           DOMAIN\nASRASINR DS    XL2           ASID NUMBER\nASRCPUTA DS    XL4           TOTAL TCB+SRB TIME (IN MILLISECONDS)\nASRDCTIA DS    XL4           TOTAL CHANNEL CONNECT TIME\nASRFIXA  DS    XL4           NUMBER OF REAL FIXED FRAMES\nASRTRCA  DS    XL4           TOTAL NUMBER OF TRANSACTIONS\nASRFMCT  DS    XL4           TOTAL FRAMES FOR SWAPPED-IN USERS\nASRFMCTI DS    XL4           TOTAL FRAMES FOR IDLE USERS\nASRSMPCT DS    XL2           NUMBER OF VALID SAMPLES\nASRSWAP  DS    XL2           NUMBER OF SAMPLES WHEN JOB WAS PHYSICALLY\n*                            SWAPPED OUT.\nASRIDLE  DS    XL2           NUMBER OF SAMPLES WHEN JOB WAS IDLE\nASRSWAR  DS    XL2           NUMBER OF SAMPLES WHEN JOB WAS SWAPPED\n*                            OUT READY.\nASRUKN   DS    XL2           NUMBER OF SAMPLES WHEN JOB STATUS UNKNOWN\nASRSUSEN DS    XL2           NUMBER OF SINGLE STATE USING SAMPLES\nASRSUCPR DS    XL2           # OF SINGLE STATE SAMPLES USING PROCESSOR\nASRSUCDV DS    XL2           # OF SINGLE STATE SAMPLES USING DEVICE\nASRSWAIN DS    XL2           # OF SINGLE STATE SAMPLES DELAYED\nASRSDCPR DS    XL2           # OF SINGLE STATE SAMPLES DELAYED PROC\nASRSDCDV DS    XL2           # OF SINGLE STATE SAMPLES DELAYED DEV\nASRSDCST DS    XL2           # OF SINGLE STATE SAMPLES DELAYED STOR\nASRSDCJE DS    XL2           # OF SINGLE STATE SAMPLES DELAYED JES\nASRSDCHS DS    XL2           # OF SINGLE STATE SAMPLES DELAYED HSM\nASRSDCEN DS    XL2           # OF SINGLE STATE SAMPLES DELAYED ENQ\nASRLEN   EQU   *-ASREC\n./       ADD   NAME=LISTDEVT\n         TITLE ' - LIST ACTIVE DEVICES.'\n* ON ENTRY R5 CONTAINS THE DATASET INDEX ENTRY ADDRESS.\n* R3 CONTAINS ERBDSIG3\nLISTDEVT $PROLOG R11,R12\n         L     R10,=V(DATASECT)\n         USING DATASECT,R10\n         CLC   PWDOPN,=F'0'       HAVE I BEEN HERE BEFORE.\n         BNE   LDOPEN             YES.\n        $AMODE 24\n         OPEN  (DEVICES,OUTPUT)   OPEN DEVICE DATA OUTPUT FILE.\n        $AMODE 31\n         CLC   PWAOPN,=F'0'       HAVE I HAD AN ASID ALREADY.\n         BNE   LDOPEN1            YES, HEADINGS SET.\n         XPRHEAD PWA,LIST=(PWALHD1,PWALHD2)\n         XPREJECT PWA\nLDOPEN1  DS    0H\n         MVC   PWDOPN,=F'255'     SAY ITS OPEN.\nLDOPEN   DS    0H\n         L     R2,ASDVTBAD        ADDR OF ASID/DEVICE TABLE.\n         LTR   R2,R2              IS IT GOTTEN?\n         BNZ   LDTBOK             YES.\n         L     R2,ASDVTBLN        LENGTH TO GETMAIN\n         GETMAIN RU,LV=(2),                                            X\n               LOC=(ANY,ANY)      GET STORAGE FOR ASID/DEVICE TABLE\n         ST    R1,ASDVTBAD        SAVE START ADDRESS.\nLDTBOK   DS    0H\n         L     R6,DSIGSBEG        OFFSET OF SET OF SAMPLES HEADER.\n         AR    R6,R3              PLUS ERBDSIG3.\n         USING SSHG3,R6\n         ST    R6,CURRSSH         SAVE THIS FOR LATER.\n         MVC   DVRTIBEG,SSHTIBEG  MOVE IN TIMESTAMP.\n         XC    LDSMPLES,LDSMPLES  ZERO SAMPLE COUNT\n         XC    LDUWFLAG,LDUWFLAG  RESET USE/WAIT FLAG\n         L     R1,SSHSHDLO        OFFSET OF LAST SAMPLE HEADER.\n         AR    R1,R6              ADDR OF LAST SAMPLE HEADER.\n         ST    R1,LASTSAMP        SAVE AS STOP CRITERION\n         A     R6,SSHSHDFO        PLUS OFFSET OF 1ST SAMPLE HEADER\n         DROP  R6\n         USING SHDG3,R6\nLDSMLP1  DS    0H\n         L     R3,SHDREDOF        OFFSET OF 1ST RED RECORD.\n         AR    R3,R6              PLUS A(SHDG3) TO GET A(RED)\n         LH    R4,SHDREDNR        COUNT OF RED'S. (COULD BE ZERO).\n         LTR   R4,R4              ARE THERE ANY?\n         BNP   LDSMLP1C           NO.\n         LH    R4,SHDREDLE        PICK LENGTH OF AN RED RECORD.\n         LR    R5,R4\n         MH    R5,SHDREDNR        LENGTH TIMES NUMBER OF RED'S\n         AR    R5,R3              PLUS ADDR OF 1ST RED.\n         USING REDG3,R3\nLDSMLP1A DS    0H\n         CLI   REDREDID,X'02'     IS THIS THE ONE FOR DEV?\n         BE    LDSMLP1B           YES\n         BXLE  R3,R4,LDSMLP1A     CHECK ALL RED RECORDS.\n         B     LDSMLP1C           NO DEV. HOW ODD!\nLDSMLP1B DS    0H\n         LH    R4,REDUWDLE        LENGTH OF A USE/WAIT RECORD.\n         LH    R5,REDUWDNR        NUMBER OF USE/WAIT RECORDS.\n         MH    R5,REDUWDLE        TIMES LENGTH OF EACH\n         A     R5,REDFUWDO        PLUS OFFSET OF 1ST ONE.\n         AR    R5,R3              PLUS A(REDG3)\n         SR    R5,R4              MINUS 1 FOR START OF LAST ENTRY.\n         A     R3,REDFUWDO        ADDR OF 1ST USE/WAIT RECORD.\n         DROP  R3\n         USING UWDG3,R3\nLDSMLP2A DS    0H\n         SR    R1,R1\n         ICM   R1,3,UWDASID       PICK UP ASID INDEX.\n         SR    R14,R14\n         ICM   R14,3,UWDDEVNR     PICK UP DEVICE INDEX.\n         SLL   R14,12             TIMES 4096 BYTES PER DEVICE\n         SLL   R1,2               TIMES 4 BYTES PER ASID PER DEVICE\n         AR    R1,R14             SUBSCRIPT W/IN TABLE.\n         A     R1,ASDVTBAD        PLUS START ADDR.\n         TM    UWDUWRID,X'80'     IS THIS A WAIT RECORD?\n         BZ    LDSMLP2C           NO, TRY FOR A USE.\n         LA    R1,2(0,R1)         SKIP OVER USE COUNT HALFWORD.\n         OI    LDUWFLAG,X'80'     FLAG WAIT RECORDS FOUND.\n         B     LDSMLP2D           PROCESS WAIT RECORD.\nLDSMLP2C TM    UWDUWRID,X'40'     IS THIS A USE RECORD?\n         BZ    LDSMLP2B           NO, KEEP GOING.\n         OI    LDUWFLAG,X'40'     FLAG USE RECORDS FOUND.\nLDSMLP2D LH    R9,0(0,R1)         PICK UP USE OR WAIT COUNT.\n         LA    R9,1(0,R9)         ADD ONE.\n         STH   R9,0(0,R1)         AND SAVE IT.\nLDSMLP2B BXLE  R3,R4,LDSMLP2A     LOOP OVER ALL DEV USE/WAIT RECORDS\nLDSMLP1C DS    0H\n         CLC   SHDNEXTO,=F'0'     WAS THAT THE LAST SAMPLE HEADER?\n         BE    LDSMLP2            YES.\n         L     R1,LDSMPLES        PICK UP SAMPLE COUNT.\n         LA    R1,1(0,R1)         INCREMENT IT.\n         ST    R1,LDSMPLES        AND SAVE IT.\n         A     R6,SHDNEXTO        INCREMENT TO NEXT HEADER.\n         B     LDSMLP1            AND GO TO IT.\nLDSMLP2  DS    0H\n         L     R6,CURRSSH         PICK UP CURRENT SSH.\n         USING SSHG3,R6\n         L     R7,SSHASIO         OFFSET OF ASID TABLE.\n         AR    R7,R6              PLUS ERBSSHG3.\n         ST    R7,CURRASIG        SAVE ASID TABLE ADDR FOR LATER.\n         L     R7,SSHDVTO         OFFSET OF DEVICE TABLE.\n         AR    R7,R6              PLUS ERBSSHG3.\n         DROP  R6\n         USING DVTG3,R7\n         ST    R7,CURRDVTG        SAVE DEVICE TABLE ADDRESS.\n         L     R2,DVTENTMX        NUMBER OF DEVICE ENTRIES.\n         LTR   R2,R2              ARE THERE ANY?\n         BNP   LDEXIT             IF NOT, GET OUT.\n         SR    R8,R8              CLEAR A REGISTER.\n         ICM   R8,1,DVTENTLE      ENTRY LENGTH.\n         SR    R6,R6              CLEAR A REGISTER.\n         ICM   R6,1,DVTHDRLE      HEADER LENGTH\n         AR    R7,R6              POINT TO 1ST ENTRY\n         DROP  R7\n         USING DVTG3ENT,R7\nLDLOOP1  DS    0H\n         SPACE ,\n         MVC   DVRVOLI,DVTVOLI\n         MVC   DVRMEXNR,DVTMEXNR\n         MVC   DVRDISIF,DVTDISIF\n         MVC   DVRPETIF,DVTPETIF\n         MVC   DVRCOTIF,DVTCOTIF\n         MVC   DVRDVBIF,DVTDVBIF\n         MVC   DVRCUBIF,DVTCUBIF\n         MVC   DVRDISIL,DVTDISIL\n         MVC   DVRPETIL,DVTPETIL\n         MVC   DVRCOTIL,DVTCOTIL\n         MVC   DVRDVBIL,DVTDVBIL\n         MVC   DVRCUBIL,DVTCUBIL\n         MVC   DVRTYP,DVTTYP\n         MVC   DVRHUJBN,=CL8'--NONE--'\n         MVC   DVRHWJBN,=CL8'--NONE--'\n         XC    DVRHUCNT,DVRHUCNT\n         XC    DVRHWCNT,DVRHWCNT\n         XC    DVRSMPCT,DVRSMPCT\n         LH    R3,DVTENIDX        INDEX OF CURRENT DEVICE\n         SLL   R3,12              4096 BYTES PER DEVICE.\n         A     R3,ASDVTBAD        PLUS START OF ASID/DEVICE TABLE\n         LA    R4,4               4 BYTE ENTRIES\n         LR    R5,R3\n         AH    R5,=H'4096'        LAST ASID ENTRY THIS DEVICE.\n         SR    R1,R1              CURRENT HIGH USE COUNT\n         SR    R14,R14            CURRENT HIGH WAIT COUNT\n         SR    R6,R6              INDEX FOR HIGH USE COUNT\n         SR    R9,R9              INDEX FOR HIGH WAIT COUNT\nLDSMLP3  DS    0H\n         CH    R1,0(R3)           IS THIS NEW HIGHEST USER?\n         BNL   LDSMLP3A           NO.\n         LH    R1,0(R3)           PICK UP NEW HIGH COUNT.\n         LR    R6,R3              PICK UP INDEX THEREOF\nLDSMLP3A CH    R14,2(R3)          IS THIS NEW HIGHEST WAITER?\n         BNL   LDSMLP3B           NO\n         LH    R14,2(R3)          PICK NEW HIGH WAIT COUNT\n         LR    R9,R3              PICK ITS INDEX.\nLDSMLP3B BXLE  R3,R4,LDSMLP3\n         XC    LDUWFLAG,LDUWFLAG  RESET FLAG\n         LTR   R6,R6              WAS THERE ANY USE?\n         BNP   *+8                NO.\n         OI    LDUWFLAG,X'40'     YES.\n         LTR   R9,R9              WAS THERE ANY DELAY?\n         BNP   *+8                NO.\n         OI    LDUWFLAG,X'80'     YES.\n         LR    R0,R14\n         LH    R3,DVTENIDX        INDEX OF CURRENT DEVICE\n         SLL   R3,12              4096 BYTES PER DEVICE.\n         A     R3,ASDVTBAD        PLUS START OF ASID/DEVICE TABLE\n         SR    R6,R3              ADDR TO OFFSET\n         SRL   R6,2               DIVIDE BY 4 TO GET ASID INDEX\n         SR    R9,R3              ADDR TO OFFSET\n         SRL   R9,2               DIVIDE BY 4 TO GET ASID INDEX\n         L     R3,CURRASIG        PICK UP ADDR OF ASID TABLE.\n         USING ASIG3,R3\n         SR    R14,R14\n         IC    R14,ASIENTLE       PICK UP ASID ENTRY LENGTH\n         ST    R14,SAVENTLE       SAVE FOR LATER.\n         LA    R3,16(0,R3)        SKIP OVER HEADER.\n         DROP  R3\n         SRDA  R14,32             SET UP TO DIVIDE\n         MR    R14,R6             R15 CONTAINS OFFSET OF HIGHEST USER\n         AR    R15,R3             PLUS ADDR OF 1ST ENTRY\n         USING ASIG3ENT,R15\n         TM    LDUWFLAG,X'40'     WERE THERE USE RECORDS?\n         BZ    LDSMLP3C           IF NOT, NO HIGHEST USER.\n         MVC   DVRHUJBN,ASIJOBNA  MOVE HIGHEST USER'S NAME\n         STCM  R1,15,DVRHUCNT     STORE HIGHEST USE COUNT\nLDSMLP3C DS    0H\n         L     R14,SAVENTLE\n         SRDA  R14,32             SET UP TO DIVIDE\n         MR    R14,R9             R15 CONTAINS OFFSET OF HIGHEST WAITER\n         AR    R15,R3             PLUS ADDR OF 1ST ENTRY\n         TM    LDUWFLAG,X'80'     WERE THERE WAIT RECORDS?\n         BZ    LDSMLP3D           IF NOT, NO HIGHEST WAITER\n         MVC   DVRHWJBN,ASIJOBNA  MOVE HIGHEST WAITER'S NAME\n         LR    R14,R0\n         STCM  R14,15,DVRHWCNT    STORE HIGHEST WAIT COUNT\nLDSMLP3D DS    0H\n         DROP  R15\n         MVC   DVRSMPCT,LDSMPLES  SAMPLE COUNT\nLDSMLP4  DS    0H\n        $AMODE 24\n         PUT   DEVICES,DVREC      WRITE DETAILS OF DEVICE\n        $AMODE 31\n         SPACE ,\n         MVC   LD1VOLI,DVTVOLI    MOVE IN VOLSER\n         MVC   LD1TYPE,=C'DEV'    CALL IT A DEVICE.\n         MVC   LD1HUJBN,DVRHUJBN  MOST USING JOB.\n         MVC   LD1HWJBN,DVRHWJBN  MOST DELAYED JOB.\n         MVC   LD1DOW,STCKDOW     DAY OF THE WEEK\n         MVC   LD1DATE,STCKDATE   DATE\n         MVC   LD1TIME,STCKTIME   TIME\n         ICM   R3,15,DVRSMPCT     TOTAL SAMPLES\n         LTR   R3,R3              ANY SAMPLES?\n         BNP   LDSMLP4A           NO 0C9'S PLEASE.\n         ICM   R4,15,DVRHUCNT     NUMBER OF USING SAMPLES\n         MH    R4,=H'100'         TIMES 100\n         SRDA  R4,32              SET UP TO DIVIDE\n         DR    R4,R3              R5 CONTAINS USING PERCENT\n         ST    R5,LDUSING         SAVE FOR LATER ANALYSIS\n         CVD   R5,DOUBLE\n         EDIT  LD1USING,DWK2,ZZ9  FORMAT USING PERCENT\n         ICM   R4,15,DVRHWCNT     NUMBER OF DELAY SAMPLES\n         MH    R4,=H'100'         TIMES 100\n         SRDA  R4,32              SET UP TO DIVIDE\n         DR    R4,R3              R5 CONTAINS DELAY PERCENT\n         ST    R5,LDDELAY         SAVE FOR LATER ANALYSIS\n         CVD   R5,DOUBLE\n         EDIT  LD1DELAY,DWK2,ZZ9  FORMAT DELAY PERCENT\nLDSMLP4A DS    0H\n         L     R5,LDSMPLES        SAMPLE COUNT\n         CVD   R5,DOUBLE\n         EDIT  LD1SMPLS,DWK3,ZZZZ9\n         BAL   R9,LDSELECT        SELECT ONLY THE INTERSTING ONES.\n         LTR   R1,R1              DO WE WANT THIS ONE?\n         BNZ   LDLOOP2            I GUESS NOT.\n         XPRNTLIN  PWA,TEXT=LD1LINE,LENGTH=132,SPB=0,SPA=1\nLDLOOP2  AR    R7,R8              POINT TO NEXT ENTRY.\n         BCT   R2,LDLOOP1         LOOP OVER ALL DEVICES.\nLDEXIT   DS    0H\n         L     R4,ASDVTBAD\n         L     R5,ASDVTBLN\n         L     R14,ASDVTBAD\n         SR    R15,R15\n         MVCL  R4,R14\n         $EPILOG ,\n         TITLE ' - SELECT ONLY INTERESTING DEVICES.'\nLDSELECT DS    0H\n         LA    R1,1               REJECT BY DEFAULT.\n         CLI   DVTFLAG1,X'00'     ANY DEVICE TYPE FLAGS SET?\n         BER   R9                 IF NONE, MUST BE NO GOOD.\n         CLI   DVTVOLI,C'A'       VOLSER OK?\n         BLR   R9                 REJECT WEIRD VOLSERS.\n         CLI   DVTVOLI,C'9'       COULD BE STRANGE EITHER WAY!\n         BHR   R9                 SKIP THEM TOO.\n         L     R5,DVTCOTIL        ENDING CONNECT TIME.\n         SL    R5,DVTCOTIF        MINUS START CONNECT TIME.\n         LTR   R5,R5              IS ANYTHING HAPPENING?\n         BNPR  R9                 REJECT THE SLEEPERS.\n* FIELDS REFERENCED BELOW ARE 3090 ONLY.\n*        L     R5,DVTDVBIL        END DEV BUSY DELAY\n*        AL    R5,DVTCUBIL        PLUS END CUB DELAY\n*        SL    R5,DVTDVBIF        MINUS START DEV BUSY DELAY\n*        SL    R5,DVTCUBIF        MINUS START CUB DELAY.\n*        LTR   R5,R5              WAS THERE ANY DELAY?\n*        BNPR  R9                 NO DELAY, NO PROBLEM, NO LIST.\n         CLC   LDDELAY,=F'10'     WORST DELAY LT 10%\n         BLR   R9                 YES. SO WHO CARES\n         SR    R1,R1              SELECT IT.\n         BR    R9                 GOBACK.\n         LTORG ,\n         TITLE 'DATA AREAS.'\nLDUSING  DC    F'0'               USING PERCENT\nLDDELAY  DC    F'0'               DELAY PERCENT\n         SPACE ,\nDEVICES  DCB   DDNAME=DEVICES,DSORG=PS,MACRF=(PM),LRECL=88,            X X\n               BLKSIZE=9416,RECFM=FB\nLDSMPLES DC    F'0'               COUNT OF SAMPLES THIS SET.\nLDUWFLAG DC    X'00'              FLAG FOR USE/WAIT SAMPLES THIS DEVICE\nSAVENTLE DC    F'0'               SAVE AREA. ASID ENTRY LENGTH\nASDVTBAD DC    AL4(0)             ADDR OF TABLE OF DEVICES/ASIDS.\nASDVTBLN DC    AL4(1024*256*4)    LENGTH OF ABOVE TABLE.\nDVREC    DS    0H\nDVRVOLI  DC    CL6'  '       VOLSER FOR THIS DEVICE\nDVRMEXNR DC    XL2'00'       NUMBER OF EXPOSURE (INCLUDING BASE)\nDVRDISIF DC    XL4'00'       DEVICE DISC TIME AT BEGIN OF THE MINTIME\nDVRPETIF DC    XL4'00'       DEVICE PEND TIME AT BEGIN OF THE MINTIME\nDVRCOTIF DC    XL4'00'       DEVICE CONN TIME AT BEGIN OF THE MINTIME\nDVRDVBIF DC    XL4'00'       DEVICE BUSY DELAY TIME AT BEGIN OF THE\nDVRCUBIF DC    XL4'00'       CONTROL UNIT BUSY DELAY AT BEGIN OF THE\nDVRDISIL DC    XL4'00'       DEVICE DISC TIME AT END OF THE MINTIME\nDVRPETIL DC    XL4'00'       DEVICE PEND TIME AT END OF THE MINTIME\nDVRCOTIL DC    XL4'00'       DEVICE CONN TIME AT END OF THE MINTIME\nDVRDVBIL DC    XL4'00'       DEVICE BUSY DELAY TIME AT END OF THE\nDVRCUBIL DC    XL4'00'       CONTROL UNIT BUSY DELAY AT END OF THE\nDVRTYP   DC    XL4'00'       DEVICE TYPE FROM UCBTYP MACRO\nDVRSMPCT DC    XL4'00'            SAMPLE COUNT.\nDVRHUJBN DC    CL8' '             JOBNAME OF HIGHEST USER\nDVRHUCNT DC    XL4'00'            USE COUNT OF HIGHEST USER\nDVRHWJBN DC    CL8' '             JOBNAME OF HIGHEST WAITER\nDVRHWCNT DC    XL4'00'            WAIT COUNT OF HIGHEST WAITER\nDVRTIBEG DC    XL8'00'            TIME STAMP.\nDVRECL   EQU   *-DVREC\n./       ADD   NAME=PRINT\n         TITLE 'XPRNTSUB - GENERAL PRINTING SUBROUTINE'\n         SPACE\n* FUNCTION/OPERATION:  THIS IS A GENERAL PRINTING SUBROUTINE TO MANAGE\n*        THE DETAILS OF PAGINATION, HEADINGS, AND OUTPUT COMPRESSION\n*        FOR PRINTED OUTPUT.  IT IS INVOKED FROM A PROBLEM PROGRAM VIA\n*        THE MACRO 'XPRNT', WHICH HAS THE FOLLOWING CALL MODES:\n*           OPEN - INITIALIZES PAGE SIZE PARAMETERS AND MAXIMUM NUMBER\n*              OF OUTPUT LINES, RESETS PAGE NUMBER, CLEARS HEADING\n*              LINES AND INSERTS CURRENT DATE AND TIME, INSERTS DDNAME\n*              IN DCB, AND OPENS THE DATA SET.\n*           MODIFY - ALTERS ANY OR ALL OF THE PARAMETERS LISTED UNDER\n*              'OPEN' EXCEPT THE DDNAME.\n*           SETHEAD - SUPPLIES TEXT FOR ONE OR MORE LINES TO BE USED\n*              PAGE HEADINGS.\n*           PRINT - DELIVERS ONE OR MORE LINES TO BE PRINTED.\n*           SPACE - MOVES THE PAGE VERTICALLY A GIVEN NUMBER OF LINES.\n*           EJECT - CONDITIONAL OR UNCONDITIONAL SKIP TO HEAD-OF-FORM.\n*           CLOSE - CLOSES THE DATA SET.\n         SPACE\n* ENTRY POINTS:  EACH MODE HAS A SEPARATE ENTRY AT A FIXED OFFSET FROM\n*        THE BASE ADDRESS.  ENTRYS ARE EFFECTED BY A  BAL  14,D(15)\n*        (WHERE D IS A DISPLACEMENT WHICH SELECTS THE DESIRED MODE) AND\n*        ASSUMES THAT REGISTER 13 ADDRESSES A STANDARD 18-WORD SAVE\n*        AREA.\n         SPACE\n* INPUT:  ON ENTRY, REG 0 POINTS TO A WORK AREA FOR THE DATA SET, WHICH\n*        IS DESCRIBED IN THIS CODING BY THE DUMMY SECTION 'WORKAREA'.\n*        REG 1 POINTS TO A PARAMETER LIST OF A FORM APPROPRIATE TO THE\n*        CALL MODE.  THESE LISTS ARE EITHER DESCRIBED BY DUMMY SECTIONS\n*        OR ARE STANDARD VARIABLE-LENGTH ADDRESS LISTS.\n         SPACE\n         SPACE\n* OUTPUT:  PRINT LINES AND SPACE CONTROL RECORDS ARE DELIVERED VIA QSAM\n*        TO A SEQUENTIAL DATA SET.  EACH LINE IS REDUCED TO ITS MIN-\n*        IMUM LENGTH BY TRUNCATING TRAILING BLANKS.\n         SPACE\n* DATA SETS:  THE OUTPUT DATA SET IS SEQUENTIAL, ARRANGED FOR BLOCKED\n*        FORMAT V RECORDS USING MACHINE CONTROL CHARACTERS APPROPRIATE\n*        TO 1403 OR 1404 PRINTERS.  THE DDNAME IS SUPPLIED BY THE\n*        'OPEN' CALL; THE STANDARD VALUE IS 'SYSPRINT'.\n         SPACE\n* EXTERNAL ROUTINES:  CALLS 'XDATEDIT' TO FORMAT THE DATE FOR THE\n*        PAGE HEADING LINE.\n         SPACE\n* EXITS - NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0 IN REG 15.\n*        THE CURRENT PAGE NUMBER (IN BINARY) IS IN REG 0 AND THE BINARY\n*        NUMBER OF LINES REMAINING ON THE CURRENT PAGE IS IN REG 1.\n*        IF AN OPEN CALL CANNOT OPEN THE DCB, THE RETURN CODE IS 4.\n         SPACE\n* EXITS - ERROR:  ERRONEOUS CALLS RESULT IN AN 'ABEND' WITH ONE OF THE\n*        FOLLOWING COMPLETION CODES:\n*           4000 - ROUTINE WAS ILLEGALLY ENTERED AT ITS BASE ADDRESS.\n*           4002 - A CALL MODE OTHER THAN 'OPEN' WAS DIRECTED TO A DATA\n*              SET WHICH WAS NOT OPEN.\n*           4003 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LARGE A PAGE WIDTH.\n*           4004 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LONG A PAGE.\n*           4005 - 'PRINT' OR 'SETHEAD' SPECIFIED A LINE WHOSE TEXT\n*              LENGTH PLUS OFFSET EXCEEDED THE PAGE WIDTH.\n*           4006 - THE MAXIMUM NUMBER OF OUTPUT LINES WAS EXCEEDED.\n*           4007 - SYNCHRONOUS I/O ERROR.\n         SPACE\n* TABLES/WORK AREAS:  THE CALL PARAMETER LISTS, WORK AREA, AND PRINT\n*        LINE DESCRIPTOR BLOCK ARE ALL DESCRIBED BY DUMMY SECTIONS\n*        AT THE END OF THE PROGRAM.\n         SPACE\n* ATTRIBUTES:  REENTRANT, READ-ONLY.  WILL HANDLE ANY NUMBER OF DATA\n*        SETS SIMULTANEOUSLY, USING A SEPARATE WORK AREA FOR EACH.\n         SPACE\n* OPERATING ENVIRONMENT:  RUNS UNDER OPERATING SYSTEM/360, USING\n*        QSAM DATA MANAGEMENT WITH LOCATE-MODE PUT MACROS AND SIMPLE\n*        BUFFERING.  ASSUMES OPTION 6A OR 6B FOR TIME OF DAY.\n         SPACE\n* NOTES:  NONE.\n         EJECT\nXPRNTSUB CSECT\n         SPACE 2\n* REGISTER ASSIGNMENTS:\n         SPACE 2\n* N.B.  REGISTER GROUPS 'RWA,RWB,RWC,RWD' AND 'RLPEXIT,RPARM' MUST BE\n* KEPT IN ORDER FOR LM AND STM ORDERS.\n         SPACE\nRWA      EQU   2                   GENERAL WORK REG\nRWB      EQU   3                   GENERAL WORK REG\nRWC      EQU   4                   GENERAL WORK REG\nRWD      EQU   5                   GENERAL WORK REG\nRSPACE   EQU   6                   NUMBER OF LINES TO SPACE\nRBAL     EQU   7                   NUMBER OF LINES LEFT ON PAGE\nRLPEXIT  EQU   8                   EXIT FROM LIST PROCESSING ROUTINE\nRPARM    EQU   9                   CALL PARAMETER LIST ADDR\nRPLD     EQU   10                  PLD BLOCK BASE\nRWKAREA  EQU   11                  BASE REGISTER FOR WORK AREA\nRBASE    EQU   12                  BASE REGISTER FOR CODING\nRRET     EQU   14                  STANDARD RETURN ADDR\n         SPACE\n* MASKS FOR CONTROL BYTE \"SWITCHES\":\n         SPACE\nHOFBIT   EQU   X'80'               PAGE IS AT PHYSICAL HEAD-OF-FORM\nNOSKBIT  EQU   X'40'               DISALLOW EJECT DURING HEAD PRINTING\nTXT1BIT  EQU   X'20'               ON FOR FIRST TEXT LINE ON PAGE\nHD1BIT   EQU   X'10'               ON FOR FIRST HEAD LINE WITH PAGE\n*                                  NO, ETC\nSP0BIT   EQU   X'08'               LAST LINE SPACED 0\n         SPACE 2\nEJFORCE  EQU   255                 SPACING QUANTITY TO FORCE PAGE EJECT\nOPENBIT  EQU   X'10'               TO TEST 'DCBOFLGS' FOR SUCCESSFUL\n*                                  OPEN\nMAXLNGTH EQU   254                 MAXIMUM PAGE LENGTH\nMAXWIDTH EQU   132                 MAXIMUM PAGE WIDTH\nDEFBLKSZ EQU   1692                DEFAULT DCB BLOCK SIZE\n         EJECT\n**********************\n* ENTRY AND PROLOGUE *\n**********************\n         SPACE\n* ENTER FROM THE CALLING SEQUENCE VIA THE INSTRUCTION \"BAL 14,X(0,15)\".\n* REGISTER 15 IS SET TO THE BASE OF THE ROUTINE AND THE DISPLACEMENT\n* \"X\" SELECTS THE ENTRY POINT.  EACH ENTRY SAVES REGISTERS, LOADS THE\n* ADDRESS OF THE APPROPRIATE SUBROUTINE, AND GOES TO A COMMON\n* PROLOGUE.  NOTE THAT AN ATTEMPT TO ENTER AT THE BASE RESULTS IN\n* AN ABEND.\n         SPACE 2\nBASEADDR B     20(0,R15)           BRANCH AROUND MODULE IDENTIFIER\n         DC    AL1(15)             LENGTH OF IDENTIFIER\n         DC    CL15'XPRNTSUB-028214'\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         SR    R1,R1               SET ABEND COMPLETION CODE\n         LR    RBASE,R15           SET BASE REG FOR ABEND ROUTINE\n         USING BASEADDR,RBASE\n         B     ABEND\n         DROP  RBASE\n         SPACE 2\n* ENTRY POINTS FOR VARIOUS FUNCTIONS, AT 12-BYTE INTERVALS BEGINNING\n* AT BASEADDR+32.  EACH LOADS \"RWA\" WITH THE ADDRESS OF THE SUBROUTINE\n* TO GO TO AFTER EXECUTING \"PROLOGUE\".\n         SPACE\n         ORG   XPRNTSUB+32\n         USING BASEADDR,R15\n         SPACE\nPRENTRY  STM   R14,R12,12(R13)     PRINT\n         LA    RWA,PRPROC\n         B     PROLOGUE\nSPENTRY  STM   R14,R12,12(R13)     SPACE\n         LA    RWA,SPPROC\n         B     PROLOGUE\nOPENTRY  STM   R14,R12,12(R13)     OPEN\n         LA    RWA,OPPROC\n         B     PROLOGUE\nCLENTRY  STM   R14,R12,12(R13)     CLOSE\n         LA    RWA,CLPROC\n         B     PROLOGUE\nSHENTRY  STM   R14,R12,12(R13)     SETHEAD\n         LA    RWA,SHPROC\n         B     PROLOGUE\nEJENTRY  STM   R14,R12,12(R13)     EJECT\n         LA    RWA,EJPROC\n         B     PROLOGUE\nMDENTRY  STM   R14,R12,12(R13)     MODIFY\n         LA    RWA,MDPROC\n         B     PROLOGUE\n         SPACE 2\n* PROLOGUE.  SET UP BASE REGISTERS FOR CODING AND WORK AREA.  CHAIN\n* SAVE AREAS IN STANDARD FASHION.  LOAD \"RBAL\" WITH CURRENT PAGE\n* BALANCE AND \"RPARM\" WITH THE CALLING PARAMETER LIST ADDRESS.\n         SPACE\nPROLOGUE LR    RBASE,R15           LOAD CODING BASE REG\n         USING BASEADDR,RBASE\n         DROP  R15\n         SPACE\n         LR    RWKAREA,R0          BASE REG FOR WORK AREA\n         USING WORKAREA,RWKAREA\n         SPACE\n         LR    RWB,R13             ADDR OF CALLER'S SAVE AREA\n         LA    R13,SAVEAREA        ADDR OF OUR SAVE AREA\n         ST    R13,8(RWB)          CHAIN TO US FROM CALLER\n         ST    RWB,SAVEAREA+4      CHAIN TO CALLER FROM US\n         SPACE\n        $AMODE 24,REG=RWB\n         LR    RPARM,R1            LOAD PARAMETER LIST ADDR\n         LH    RBAL,PAGEBAL        LOAD PAGE LINE COUNT BALANCE\n         MVC   DCBSYNAD(3),=AL3(SYNAD)  PUT ERROR ROUTINE ADDRESS IN\n*                                  DCB\n         SPACE\n         TM    DCBOFLGS,OPENBIT    MAKE SURE DATA SET IS OPEN\n         BCR   1,RWA               BRANCH IF OPEN\n         CL    RWA,=A(OPPROC)      IF NOT, ONLY OPEN CALL ALLOWED\n         BCR   8,RWA               BR IF OPEN CALL\n         LA    R1,2                ERROR CODE 2, GO TO ABEND\n         SPACE 3\n* ABEND ROUTINE FOR SERIOUS ERRORS.  ENTER WITH ERROR NUMBER IN R1.\n* ADD DECIMAL 4000 FOR USER CONPLETION CODE AND ISSUE 'ABEND' WITH DUMP\n         SPACE\n         CNOP  2,4                 ALIGN CONSTANT FOLLOWING SVC\nABEND    AL    R1,*+6              LOAD ABEND CODES\n         SVC   13                  ISSUE ABEND SVC\n         DC    X'80'               'DUMP' BIT FOR ABEND\n         DC    AL3(4000)           BASE FOR COMPLETION CODE\n         EJECT\n************\n* EPILOGUE *\n************\n         SPACE\n* ALL MODES RETURN TO THE CALLER VIA THIS ROUTINE.  IT EXITS WITH\n* THE RETURN CODE IN REGISTER 15, THE PAGE NUMBER IN REGISTER 0, AND\n* THE NUMBER OF LINES REMAINING ON THE PAGE IN REGISTER 1.\n         SPACE 2\nEXIT4    LA    R15,4               SET RETURN CODE 4\n         B     EXIT\n         SPACE\nEXIT0    SR    R15,R15             SET RETURN CODE 0\n         SPACE\nEXIT     LH    R0,PAGENO           LOAD CURRENT PAGE NUMBER\n         LR    R1,RBAL             LOAD NUMBER OF LINES LEFT\n         STH   RBAL,PAGEBAL        SAVE PAGE BALANCE\n         XC    DCBSYNAD(3),DCBSYNAD  CLEAR ERROR ROUTINE ADDRESS\n         SPACE\n        $AMODE 31\n         L     R13,SAVEAREA+4      ADDRESS OF CALLER'S SAVE AREA\n         L     R14,12(R13)         LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE CALLER'S REGISTERS\n         MVI   12(R13),X'FF'       SET RETURN INDICATION\n         BR    R14                 RETURN TO CALLER\n         EJECT\n******************\n* PRINT FUNCTION *\n******************\n         SPACE\n* PRINT LINE DELIVERY CALL.  THE PARAMETER LIST IS A VARIABLE-LENGTH\n* LIST OF ADDRESSES, THE LAST OF WHICH IS NEGATIVE (I.E. BIT 0 IS A 1).\n* EACH ADDRESS POINTS TO A PLD DESCRIBING A LINE TO BE PRINTED.  CALL\n* THE GENERAL LIST PROCESSING ROUTINE TO DO THE DIRTY WORK.\n         SPACE 2\nPRPROC   BAL   RLPEXIT,LISTPROC    INVOKE LIST PROCESSOR\n         SPACE\n         B     EXIT0               EXIT TO CALLER\n         EJECT\n******************\n* SPACE FUNCTION *\n******************\n         SPACE\n* CALL TO MOVE THE PAPER A SPECIFIED NUMBER OF LINES.  IF THE NUMBER\n* OF LINES EXCEEDS THE CURRENT PAGE BALANCE, AN EJECT RESULTS, UNLESS\n* SUPPRESSED BY THE 'SPNOEJ' BIT IN THE PARAMETER LIST.  IF THE PAGE\n* IS AT HEAD-OF-FORM, SPACING IS SUPPRESSED UNLESS THE 'SPATHOF' BIT\n* IS SET IN THE PARAMETER LIST.  IN THE LATTER CASE, THE PAGE HEADINGS\n* WILL BE PRINTED BEFORE THE SPACING IS EXECUTED.\n         SPACE 2\n         USING SPPARM,RPARM        ADDRESSING FOR PARM LIST\n         SPACE\nSPPROC   TM    SWITCHES,HOFBIT     TEST IF AT HEAD-OF-FORM\n         BZ    SPSUBTR             BR IF NOT\n         TM    SPCOND,SPATHOF      IS SPACE ALLOWED AT HOF?\n         BZ    EXIT0               EXIT IF NOT\n         BAL   RRET,HEADPRNT       IF SO, PRINT HEADINGS FIRST\n         SPACE\nSPSUBTR  SR    RSPACE,RSPACE\n         IC    RSPACE,SPQUAN       LOAD SPACING AMOUNT\n         SR    RBAL,RSPACE         COMPUTE NEW PAGE BALANCE\n         SPACE\n         BP    SPMOVE              BRANCH IF BAL STILL > 0\n         TM    SPCOND,SPNOEJ       TEST IF EJECT ALLOWED\n         BO    SPMOVE              BRANCH IF NOT\n         LA    RSPACE,EJFORCE      IF ALLOWED, FORCE EJECT\n         SPACE\nSPMOVE   BAL   RWA,MOVE            CALL PAPER MOVING SUB\n         B     EXIT0               EXIT TO CALLER\n         SPACE\n         DROP  RPARM\n         EJECT\n******************\n* EJECT FUNCTION *\n******************\n         SPACE\n* CALL TO MOVE THE PAPER TO HEAD-OF-FORM.  IF THE PAGE IS ALREADY\n* THERE, THE EJECT IS NOT EXECUTED UNLESS THE 'EJATHOF' BIT IN THE\n* PARAMETER LIST IS ON.  IN THE LATTER CASE, A SKIP IS EXECUTED WITHOUT\n* PRINTING ANY HEADINGS, RESULTING IN A BLANK PAGE.  IF THE MASK BITS\n* IN THE 'EJCOND' PARAMETER ARE NOT ALL ONES, A CONDITIONAL EJECT IS\n* REQUESTED.  THE PAGE BALANCE IS COMPARED AGAINST THE TEST QUANTITY\n* 'EJQUAN' IN THE PARAMETER LIST, THEN THE DECISION TO EJECT OR NOT\n* IS MADE WITH A 'BC' ORDER USING THE 'EJCOND' BITS AS A MASK.\n         SPACE 2\n         USING EJPARM,RPARM        FOR PARM LIST ADDRESSING\n         SPACE\nEJPROC   TM    SWITCHES,HOFBIT     TEST IF AT HOF\n         BZ    EJTEST              BR IF NOT\n         TM    EJCOND,EJATHOF      IF SO, IS EJECT ALLOWED?\n         BZ    EXIT0               IF NOT, EXIT\n         SPACE\nEJTEST   SR    R0,R0\n         IC    R0,EJQUAN           LOAD TEST QUANTITY\n         IC    R1,EJCOND           GET CONDITIONAL TEST MASK\n         N     R1,=XL4'000000F0'   KEEP BITS 24-27 ONLY\n         CR    RBAL,R0             COMPARE BALANCE WITH TEST QUAN\n         EX    R1,EJBC             EXECUTE BC WITH MASK FROM PARM\n         B     EXIT0               EXIT IF CONDITION NOT MET\n         SPACE\nEJMOVE   LA    RSPACE,EJFORCE      TO FORCE EJECT\n         BAL   RWA,MOVE            CALL PAPER MOVER SUB\n         B     EXIT0               EXIT TO CALLER\n         SPACE 2\nEJBC     BC    0,EJMOVE            BRANCH IF EJECT REQUIRED\n         SPACE\n         DROP  RPARM\n         EJECT\n*****************\n* OPEN FUNCTION *\n*****************\n         SPACE\n* THIS MUST BE THE FIRST CALL FOR A NEW DATA SET.  IT SETS THE DDNAME\n* IN THE DCB AND OPENS THE DATA SET.   ALL COUNTERS AND SWITCHES ARE\n* SET TO THEIR NOMINAL VALUES BEFORE PROCESSING ANY OPTIONS WHICH\n* MAY HAVE BEEN SUPPLIED WITH THE CALL.  THE PAGE BALANCE IS SET TO\n* ZERO, BUT THE PAGE IS NOT MOVED.  THE PROGRAMMER SHOULD NORMALLY\n* ISSUE AN 'EJECT' CALL BEFORE BEGINNING HIS OUTPUT.\n         SPACE\n* IF THE DATA SET IS ALREADY OPEN, THE DDNAME IS IGNORED, THE NOMINAL\n* OPTIONS ARE SET, THEN THIS CALL IS TREATED EXACTLY AS IF IT WERE A\n* 'MODIFY' CALL.\n         SPACE 2\n         USING OMPARM,RPARM\n         SPACE\nOPPROC   MVC   PAPARMS(DEFSIZE),DEFAULTS  SET STANDARD OPTIONS\n         MVI   HLTEXT,C' '         CLEAR HEADING TEXT\n         MVC   HLTEXT+1(HLTXTLNG-1),HLTEXT\n         SPACE\n         TIME  DEC                 GET CURRENT DATE & TIME\n         STM   R0,R1,HPRSAVE       SAVE TIME AND DATE\n         SPACE\n* NOW IF DATA SET IS ALREADY OPEN, GO TO 'MDPROC'.  OTHERWISE, INSERT\n* DDNAME AND OPEN IT.\n         SPACE\n         TM    DCBOFLGS,OPENBIT    TEST IF OPEN\n         BO    OPJOIN              BR TO 'MDPROC' IF OPEN\n         MVC   DCBDDNAM(8),OMDDNAME  INSERT DDNAME INTO CLOSED DCB\n         MVC   DCBEXLST(3),=AL3(EXLST)  INSERT ADDRESS OF EXIT LIST\n         SPACE\n         MVI   DWORK,X'80'         SET END-OF-LIST BIT\n         OPEN  (PRINTDCB,(OUTPUT,LEAVE)),MF=(E,DWORK)\n         SPACE\n         XC    DCBEXLST(3),DCBEXLST  CLEAR ADDRESS OF EXIT LIST\n         TM    DCBOFLGS,OPENBIT    TEST FOR SUCCESSFUL OPEN\n         BO    OPJOIN              TO 'MDPROC' IF O.K.\n         B     EXIT4               EXIT WITH RC=4 IF OPEN FAILS\n         SPACE\n         DROP  RPARM\n         EJECT\n* DCB EXIT ROUTINE FOR OPEN.  SET BLOCK SIZE TO THE DEFAULT VALUE IF\n* NOT SPECIFIED IN DS LABEL OR DD CARD.\n         SPACE\nEXLST    DS    0F                  EXIT LIST, ON BOUNDARY\n         DC    X'85'\n         DC    AL3(DCBMOD)\n         SPACE\nDCBMOD   LH    RWA,DCBBLKSZ        LOAD BLOCK SIZE\n         LTR   RWA,RWA             TEST IF ZERO\n         BNZ   DCBNZ               BRANCH IF NOT ZERO\nSETDEF   LA    RWA,DEFBLKSZ        SET DEFAULT BLOCK SIZE\n         STH   RWA,DCBBLKSZ        STORE IN DCB\n         BR    R14                 RETURN TO OPEN ROUTINE\nDCBNZ    CH    RWA,=H'141'         TEST FOR MINIMUM BLOCKSIZE\n         BL    SETDEF              USE DEFAULT IF TOO LOW\n         BR    R14                 RETURN TO OPEN IF OK\n         EJECT\n*******************\n* MODIFY FUNCTION *\n*******************\n         SPACE\n* THIS CALL MAY ALTER ANY  OR ALL OF THE FOLLOWING: DATE, TIME, PAGE\n* NUMBER, PAGE LENGTH, PAGE WIDTH, MAXIMUM NUMBER OF OUTPUT LINES.\n* THE NEW VALUES ARE PRESENTED IN A PARAMETER LIST.  IF A PARAMETER IS\n* ZERO, THE CORRESPONDING QUANTITY IS NOT ALTERED.\n         SPACE\n* THE DATE AND TIME FIELDS MAY BE SUPPLIED BY THE 'OPEN' ROUTINE,\n* WHICH JOINS THIS CODING AT 'OPJOIN'.  IN THAT CASE, THE VALUES\n* INSERTED BY 'OPEN' ARE USED UNLESS OVERRIDDEN BY THE PARAMETER LIST.\n         SPACE\n         USING OMPARM,RPARM\n         SPACE\nMDPROC   SR    R0,R0               GENERATE TWO ZERO WORDS\n         SR    R1,R1\n         STM   R0,R1,HPRSAVE       SET DATE & TIME FIELDS TO ZERO\n         SPACE\n* ENTER HERE FROM 'OPEN'.  THE OBJECT OF THE FOLLOWING IS TO GET THE\n* ACTUAL TIME AND DATE (IN PACKED DECIMAL) INTO 'HPRSAVE' AND\n* 'HPRSAVE+4', RESPECTIVELY.  THOSE FIELDS MAY HAVE BEEN FILLED IN BY\n* THE OPEN ROUTINE, OR THEY MAY HAVE BEEN SET TO ZEROS BY 'MDPROC'\n* ABOVE.  NOW WE SEE IF ADDRESSES FOR TIME AND/OR DATE VALUES WERE\n* PROVIDED IN THE PARAMETER LIST, AND TRANSFER THE VALUES IF SO.\n         SPACE\nOPJOIN   LM    RWA,RWB,OMTIMEAD    LOAD TIME & DATE ADDRS FROM PARM\n         LTR   RWA,RWA             TEST FOR TIME ADDR SUPPLIED\n         BZ    NOTIME              BRANCH IF ZERO\n         MVC   HPRSAVE(4),0(RWA)   GET TIME AS DECIMAL 'HHMMSSTH'\nNOTIME   LTR   RWB,RWB             TEST IF DATE ADDR SUPPLIED\n         BZ    DATEEDIT            BR IF NOT\n         MVC   HPRSAVE+4(4),0(RWB)  GET DECIMAL DATE AS '00YYDDD+'\n         SPACE\n* IF THE DATE VALUE IS NOT ZERO, EDIT INTO THE HEADING LINE TEXT.  BOTH\n* THE DAY NUMBER AND THE MONTH-DAY-YEAR FORM ARE USED.\n         SPACE\nDATEEDIT LM    RWA,RWB,HPRSAVE     LOAD TIME & DATE FOR TESTING\n         LTR   RWB,RWB             TEST IF DATE WAS GIVEN\n         BZ    TIMEEDIT            BRANCH IF ZERO\n         SPACE\n         MVC   HLDAY(4),=C'DAY='   INSERT DAY NUMBER\n         UNPK  HLDAY+4(3),HPRSAVE+6(2)  UNPACK DAY NUMBER\n         OI    HLDAY+6,X'F0'       TIDY UP SIGN BITS\n         SPACE\n         ST    RWB,DWORK+4         STORE DATE ARG FOR EDIT RTNE\n         LA    R1,DWORK            CONSTRUCT ONE-WORD PARM LIST\n         ST    R1,HPRSAVE+4        FOR XDATEDIT CALL\n         LA    R1,HPRSAVE+4        LOAD PARM LIST ADDRESS\n         L     R15,=V(XDATEDIT)    LOAD ADDRESS OF DATE EDIT RTNE\n         BALR  R14,R15             TO EDIT DATE AS 'MM/DD/YY'\n         MVC   HLDATE(8),DWORK     INSERT RESULT IN HL TEXT\n         SPACE\n* EDIT TIME IN HOURS AND MINUTES, IF SUPPLIED.\n         SPACE\nTIMEEDIT LTR   RWA,RWA             TEST IF TIME GIVEN\n         BZ    TSTPGNO             BR IF ZERO\n         SRL   RWA,4               ADD LEADING ZERO TO TIME\n         ST    RWA,HPRSAVE         STORE TIME IN WORK LOC\n         MVC   HLTIME(7),=X'402120207A2020'  EDIT CONTROL CHAR\n         ED    HLTIME(7),HPRSAVE   EDIT INTO ALPHA\n         SPACE\n* MODIFY PAGE NUMBER.  VALUE GIVEN IS DECREMENTED BY ONE, SINCE IT IS\n* INCREMENTED BEFORE USE.\n         SPACE\nTSTPGNO  LH    RWA,OMPAGENO        GET VALUE FROM PARM LIST\n         LTR   RWA,RWA             TEST IF ZERO\n         BZ    TSTPGWID            BR IF ZERO\n         BCTR  RWA,0               DECREMENT BY 1\n         STH   RWA,PAGENO          STORE\n         SPACE\n* MODIFY PAGE WIDTH, TESTING FOR MAXIMUM ALLOWED.\n         SPACE\nTSTPGWID SR    RWA,RWA\n         IC    RWA,OMPAGWID        GET WIDTH FROM PARM LIST\n         LTR   RWA,RWA             TEST IF ZERO\n         BZ    TSTPGLNG            BRANCH IF SO\n         CLI   OMPAGWID,MAXWIDTH   TEST MAXIMUM SIZE\n         BNH   PGWIDOK\n         LA    R1,3                ERROR, TOO LARGE\n         B     ABEND\nPGWIDOK  STH   RWA,PAGWIDTH\n         SPACE\n* MODIFY PAGE LENGTH, TESTING FOR MAXIMUM VALUE.\n         SPACE\nTSTPGLNG SR    RWA,RWA\n         IC    RWA,OMPAGLNG        GET FROM PARM LIST\n         LTR   RWA,RWA             TEST IF SUPPLIED\n         BZ    TSTMAXLN            BR IF NOT\n         CLI   OMPAGLNG,MAXLNGTH   TEST FOR LEGAL VALUE\n         BNH   PGLNGOK\n         LA    R1,4                ERROR, ABORT\n         B     ABEND\nPGLNGOK  STH   RWA,PAGELNG         STORE\n         SPACE\n* MODIFY PRINT LINE LIMIT COUNTER.\n         SPACE\nTSTMAXLN L     RWA,OMMAXLIN        GET FROM PARM LIST\n         LTR   RWA,RWA             TEST IF SUPPLIED\n         BZ    EXIT0               EXIT IF NOT\n         ST    RWA,MAXLINES        STORE\n         B     EXIT0               EXIT TO CALLER\n         SPACE\n         DROP  RPARM\n         EJECT\n********************\n* SETHEAD FUNCTION *\n********************\n         SPACE\n* THIS CALL PRESENTS A LIST OF LINES WHICH WILL BE USED AS PAGE HEADING\n* AND SUB-HEADING LINES.  THE PARAMETER LIST IS A VARIABLE-LENGTH LIST\n* OF PLD ADDRESSES, EXACTLY AS FOR 'PRINT' CALLS.  THE FIRST LINE WILL\n* HAVE ADDED TO ITS RIGHT END THE DATE, TIME, AND PAGE NUMBER.\n* HOWEVER, IF ITS LENGTH EXCEEDS 98 BYTES, IT WILL OVERLAY THOSE\n* FIELDS.  THE SECOND AND SUBSEQUENT LINES WILL BE PRINTED NORMALLY.\n* NOTE THAT THESE LINES ARE NOT PRINTED WHEN THE PAGE IS EJECTED, BUT\n* WHEN THE LINE WHICH WILL BE FIRST ON THE NEW PAGE IS DELIVERED, THUS\n* ALLOWING THE HEADINGS TO BE ALTERED AFTER DELIVERY OF THE LAST LINE\n* ON THE PRECEDING PAGE.  THE ADDRESS OF THE PARAMETER LIST IS SAVED\n* BY THE PRINTING ROUTINE, BUT THE PARAMETER LIST, THE PLD'S TO WHICH\n* IT POINTS, AND THE LINE TEXTS TO WHICH THEY POINT, MUST BE PRESERVED\n* BY THE PROBLEM PROGRAM FOR AS LONG AS THEY ARE IN USE, SINCE THEY\n* ARE REFERRED TO AT THE BEGINNING OF EACH NEW PAGE.  EACH CALL TO\n* TO 'SETHEAD' SUPERSEDES THE EFFECT OF THE PREVIOUS CALL.  A CALL WITH\n* A PARAMETER LIST ADDRESS OF ZERO INDICATES THAT NO HEADINGS ARE\n* PROVIDED BY THE PROBLEM PROGRAM, AND ONLY THE PAGE NUMBER, DATE, AND\n* TIME WILL BE PRINTED, WITH A STANDARD SPACING OF THREE.\n         SPACE 2\nSHPROC   LTR   RPARM,RPARM         TEST FOR NULL LIST ADDR\n         BNZ   SHOK                BRANCH IF NON-ZERO\n         LA    RPARM,NOHDLIST      ADDRESS OF PLD FOR BLANK LINE\nSHOK     ST    RPARM,HEADLIST      STORE ADDR OF HEADING PARMS\n         B     EXIT0               EXIT\n         EJECT\n******************\n* CLOSE FUNCTION *\n******************\n         SPACE\n* THIS CALL CLOSES THE PRINTER DATA SET.  IT DOES NOT MOVE THE PAGE\n* OR ALTER ANY SWITCHES OR VARIABLES EXCEPT THE DCB ITSELF.\n* AFTER CLOSING THE DCB, IT RELEASES THE PRINT BUFFERS.\n         SPACE 2\nCLPROC   TM    DCBOFLGS,OPENBIT    IS DCB OPEN NOW?\n         BZ    EXIT0               EXIT IF ALREADY CLOSED\n         MVI   DWORK,X'80'         SET END-OF-LIST BIT\n         CLOSE (PRINTDCB,LEAVE),MF=(E,DWORK)\n         SPACE\n         FREEPOOL  PRINTDCB        FREE THE BUFFER CORE\n         SPACE\n         B     EXIT0               EXIT TO CALLER\n         EJECT\n************\n* LISTPROC *\n************\n         SPACE\n* THIS ROUTINE PROCESSES A LIST OF PLD ADDRESSES, FORMATTING EACH PRINT\n* LINE AND PERFORMING THE NECESSARY PRE- AND POST-SPACING OPERATIONS.\n* IT IS ENTERED WITH 'RPARM' POINTING TO THE LIST OF ADDRESSES AND\n* 'RLPEXIT' CONTAINING THE EXIT ADDRESS.  IT MAY DISCOVER THAT ITS\n* SPACING OPERATIONS HAVE BROUGHT THE PAGE TO HEAD OF FORM, REQUIRING\n* THAT THE HEADING AND SUB-HEADING LINES BE PRINTED.  WHEN THIS OCCURS,\n* IT BRANCHES TO 'HEADPRNT', WHICH SAVES 'RPARM' AND 'RLPEXIT' AND\n* REENTERS THIS ROUTINE WITH AN ADDRESS LIST FOR THE HEADING LINES.\n* (WHEN THIS SECOND-LEVEL CALL IS MADE, SWITCH 'NOSKPBIT' IS ON,\n* PREVENTING ANY FURTHER PAGE SKIPS AND ELIMINATING THE POSSIBILITY OF\n* YET ANOTHER CALL TO 'HEADPRNT'.)  AFTER THE HEADINGS ARE PRINTED,\n* THE ORIGINAL VALUES ARE RETURNED TO 'RPARM' AND 'RLPEXIT' AND\n* PROCESSING OF THE LIST OF TEXT LINES PROVIDED BY THE CALLER IS\n* CONTINUED.\n         SPACE 2\n         USING PLDBLOCK,RPLD       TO ADDRESS PLD BLOCKS\n         SPACE\nLISTPROC L     RPLD,0(RPARM)       LOAD A PLD BLOCK ADDRESS\n         SPACE\n* IF PAGE IS NOW AT HEAD OF FORM, EXECUTE 'HEADPRNT'.\n         SPACE\n         LA    RRET,LISTPROC       EXIT FROM HEADPRNT STARTS AGAIN\n         TM    SWITCHES,HOFBIT     SEE IF HEAD-OF-FORM FLAG IS ON\n         BO    HEADPRNT            EXIT IF SO\n         SPACE 2\n* TEST WHETHER WE ARE AT THE FIRST TEXT LINE ON A PAGE, AND, IF SO,\n* WHETHER PRE-SPACING IS ALLOWED IN THAT POSITION.  IF NOT, BYPASS\n* PRE-SPACING ALTOGETHER.\n         SPACE\n         TM    SWITCHES,TXT1BIT    TEST IF FIRST TEXT LINE\n         BZ    PRSUBTR             BRANCH IF NOT\n         TM    PLDFLAGS,PRHOFBIT   TEST IF ALLOW SKIP AT HOF\n         BZ    POSTSP              SKIP PRESPACING IF NOT\n         SPACE\n* DECREMENT THE PAGE BALANCE BY THE AMOUNT TO BE SPACED.\n         SPACE\nPRSUBTR  SR    RSPACE,RSPACE\n         IC    RSPACE,PLDSPB       LOAD AMOUNT TO SPACE\n         SR    RBAL,RSPACE         DECREMENT PAGE BALANCE\n         SPACE\n* IF SKIPPING IS ALLOWED BY BOTH THE SYSTEM AND THE USER, TEST THE\n* BALANCE AND FORCE A PAGE SKIP IF <= ZERO.\n         SPACE\n         TM    SWITCHES,NOSKBIT    TEST IF SYSTEM ALLOWS SKIP\n         BO    PREMOVE             BRANCH IF NOT\n         TM    PLDFLAGS,PRSKPBIT   TEST IF USER ALLOWS SKIP\n         BO    PREMOVE             BRANCH IF NOT\n         LTR   RBAL,RBAL           TEST PAGE BALANCE\n         BP    PREMOVE             BRANCH IF SOME LINES LEFT\n         LA    RSPACE,EJFORCE      FORCE A PAGE SKIP\n         SPACE\n* MOVE THE PAGE THE NUMBER OF LINES IN 'RSPACE'.\n         SPACE\nPREMOVE  BAL   RWA,MOVE            TO PAPER MOVING SUBROUTINE\n         SPACE\n* IF THAT MOVING PUT US AT HEAD-OF-FORM, PRINT THE HEADINGS.\n         SPACE\n         LA    RRET,LISTPROC       EXIT FROM HEADPRNT STARTS AGAIN\n         TM    SWITCHES,HOFBIT     TEST HEAD-OF-FORM BIT\n         BO    HEADPRNT            EXIT IF AT HEAD\n         SPACE 2\n* NOW CONSIDER THE SPACING TO BE PERFORMED WHEN THE TEXT OF THE LINE\n* IS PRINTED.  BEGIN BY COMPUTING THE NEW PAGE BALANCE.\n         SPACE\nPOSTSP   SR    RSPACE,RSPACE\n         IC    RSPACE,PLDSPA       LOAD AMOUNT TO SPACE AFTER PRINT\n         SR    RBAL,RSPACE         COMPUTE NEW PAGE BALANCE\n         SPACE\n* IF THE SYSTEM AND USER BOTH ALLOW SKIPPING, TEST THE PAGE BALANCE,\n* AND FORCE A SKIP IF <= ZERO.\n         SPACE\n         TM    SWITCHES,NOSKBIT    TEST IF SYSTEM ALLOWS SKIPPING\n         BO    GETPRCC             BRANCH IF NOT\n         TM    PLDFLAGS,SPSKPBIT   TEST IF USER ALLOWS SKIPPING\n         BO    GETPRCC             BRANCH IF NOT\n         LTR   RBAL,RBAL           TEST FOR PAGE END\n         BP    GETPRCC             BRANCH IF SOME LINES LEFT\n         LA    RSPACE,EJFORCE      FORCE PAGE SKIP\n         SPACE\n* NOW CONSTRUCT THE PRINT LINE IN AN OUTPUT BUFFER.  IN THE INTERESTS\n* OF SAVING BUFFER SPACE, THE CALLER'S TEXT IS SCANNED FROM THE RIGHT\n* TO REDUCE ITS NOMINAL LENGTH BY THE NUMBER OF RIGHT BLANKS.  IN THE\n* EXTREME CASE THAT IT IS ENTIRELY BLANK, BYPASS PRINTING ALTOGETHER\n* AND MERELY SPACE.  IF THIS IS TO BE THE FIRST HEADING LINE OF THE\n* PAGE ('HD1BIT' SET), SCANNING IS OMITTED, THE RECORD LENGTH IS SET TO\n* THE PAGE WIDTH, AND THE DATE, TIME, AND PAGE NUMBER ARE INSERTED.\n         SPACE\nGETPRCC  DS    0H\n         SR    RWA,RWA\n         IC    RWA,PLDLNGTH        LOAD NOMINAL LENGTH OF TEXT\n         SR    RWB,RWB\n         IC    RWB,PLDOFFST        LOAD LEFT MARGIN OFFSET\n         SPACE\n         LA    R0,0(RWA,RWB)       LINE LENGTH = TEXT + OFFSET\n         CH    R0,PAGWIDTH         TEST AGAINST PAGE WIDTH\n         BNH   TSTHD1              BR IF OK\n         LA    R1,5                ERROR, LINE TOO LONG\n         B     ABEND\n         SPACE\nTSTHD1   TM    SWITCHES,HD1BIT     TEST IF FIRST HEADING LINE\n         BZ    BLNKSCAN            BR IF NOT\n         LH    RWB,PAGWIDTH        SET RECORD LENGTH AS PAGE WIDTH\n         B     GETBUF              SKIP BLANK SCANNING\n         SPACE\n* SET UP A 'BXH' FOR SCAN.  R0 IS INCREMENT, R1 IS COMPARAND, RWA\n* VARIABLE.\n         SPACE\nBLNKSCAN LH    R0,=H'-1'           INCREMENT IS MINUS 1\n         L     R1,PLDTXTAD-1       LOAD TEXT ADDRESS\n         LA    R1,0(R1)            ZERO HIGH-ORDER BYTE\n         BCTR  R1,0                DECREMENT BY ONE\n         AR    RWA,R1              SET RWA TO RIGHT-MOST TEXT BYTE\n         SPACE\n* SCAN THE LINE, SEARCHING FOR FIRST NON-BLANK.  RESULT IS NEW TEXT\n* LENGTH IN RWA, WHICH WILL BE ZERO FOR BLANK LINES.\n         SPACE\nBLNKLOOP CLI   0(RWA),C' '         TEST FOR NON-BLANK CHAR\n         BNE   BLNKDONE            EXIT WHEN FOUND\n         BXH   RWA,R0,BLNKLOOP\nBLNKDONE SR    RWA,R1              NOW RWA IS NEW TEXT LENGTH\n         BC    13,POSTMOVE         NO PRINTING IF <= 0\n         SPACE\n* NOW ADD OFFSET TO LENGTH OF SURVIVING TEXT TO GET ACTUAL LINE LENGTH.\n         SPACE\n         AR    RWB,RWA             ADD TEXT LENGTH\n         SPACE\n* NOW RWA IS THE LENGTH OF THE CALLER'S TEXT, AND RWB IS THE LENGTH OF\n* THE LINE.  THE RECORD LENGTH WILL BE FIVE MORE THAT THE LENGTH OF THE\n* LINE, TO INCLUDE FORMAT 'V'  AND PRINTER CONTROL CHARACTERS.  GET\n* A BUFFER OF THE PROPER LENGTH, KEEPING ITS ADDRESS IN R1.\n         SPACE\nGETBUF   LA    RWC,5(RWB)          LOAD LENGTH OF RECORD IN RWC\n         STH   RWC,DCBLRECL        PUT LRECL IN DCB FOR PUT CALL\n         SPACE\n         PUT   PRINTDCB            GET BUFFER ADDRESS IN R1\n         SPACE\n         ST    R1,CCLAST           SAVE LOCATION OF THIS LINE\n         LR    RWD,R1              RWD BECOMES BUFFER BASE REG\n         MVI   3(RWD),C' '         CLEAR BUFFER TO BLANKS\n         EX    RWB,BLNKMOVE\n         SLL   RWC,16              SET UP 4-BYTE 'V' CONTROL FIELD\n         ST    RWC,DWORK           CAN'T ASSUME BUFFER ON ANY\n         MVC   0(4,RWD),DWORK      BOUNDARY\n         SPACE\n* IF THIS IS THE FIRST HEADING LINE, INSERT DATE AND TIME, AND EDIT\n* THE PAGE NUMBER.\n         SPACE\n         TM    SWITCHES,HD1BIT     TEST IF FIRST LINE\n         BZ    MOVETEXT            BRANCH IF NOT\n         SPACE\n         LA    RWC,0(RWB,RWD)      ADDRESS RIGHT END -5\n         SH    RWC,=AL2(HLTXTLNG+10-5)  LOCATE PLACE FOR HEADING INFO\n         MVC   0(HLTXTLNG,RWC),HLTEXT  INSERT DATE & TIME\n         SPACE\n         LH    R1,PAGENO           INCREMENT PAGE NUMBER\n         LA    R1,1(R1)\n         STH   R1,PAGENO\n         CVD   R1,DWORK            CONVERT TO DECIMAL\n         MVC   HLTXTLNG(10,RWC),=XL10'40404040402020202120'  EDIT CHARS\n         LA    R1,HLTXTLNG+9(RWC)  IN CASE SIGNIFIGANCE FORCED\n         EDMK  HLTXTLNG+4(6,RWC),DWORK+5  EDIT AND MARK SPOT FOR \"PAGE\"\n         SH    R1,=H'5'\n         MVC   0(4,R1),=C'PAGE'    INSERT WORD \"PAGE\"\n         SPACE\n* PUT PRINTER CONTROL CHARACTER AND CALLER'S TEXT INTO THE BUFFER.\n* REGISTER RWA CONTAINS THE LENGTH OF THE TEXT.\n         SPACE\nMOVETEXT BAL   RWB,CCGEN           GO GET CONTROL CHAR\n         STC   R0,4(RWD)           INSERT IN BUFFER\n         NI    4(RWD),B'11111101'  CHANGE SPACE IMMEDIATE TO WRITE\n         SPACE\n         SR    RWB,RWB\n         IC    RWB,PLDOFFST        LOAD LEFT MARGIN OFFSET\n         LA    RWB,5(RWB,RWD)      ADDRESS FOR FIRST TEXT BYTE\n         BCTR  RWA,0               DECREMENT LENGTH BY 1 FOR MVC\n         L     RWC,PLDTXTAD-1      LOAD ADDRESS OF CALLER'S TEXT\n         EX    RWA,MOVEINST        MOVE TEXT\n         SPACE\n         NI    SWITCHES,255-HD1BIT-TXT1BIT  RESET ONE-SHOT BITS\n         SPACE\n* DECREMENT PRINT LINE LIMIT COUNTER, ABORTING IF IT GOES NEGATIVE.\n         SPACE\n         L     R1,MAXLINES\n         S     R1,=F'1'            BCTR WOULD NOT SET COND CODE\n         ST    R1,MAXLINES\n         BP    POSTMOVE            BRANCH IF POSITIVE\n         LA    R1,6                ABORT, TOO MUCH OUTPUT\n         B     ABEND\n         SPACE\n* DO ANY ADDITIONAL SPACING NECESSARY.  AMOUNT STILL IN 'RSPACE'.\n         SPACE\nPOSTMOVE BAL   RWA,MOVE            CALL PAPER MOVING SUBROUTINE\n         SPACE 2\n* NOW WE ARE FINISHED WITH THAT LINE.  IF THE ADDRESS WHICH POINTED TO\n* ITS PLD WAS NEGATIVE, THE LIST IS EXHAUSTED AND THE ROUTINE EXITS.\n* OTHERWISE, INCREMENT THE LIST POINTER BY 4 AND START THE NEXT ONE.\n         SPACE\n         LTR   RPLD,RPLD           TEST CURRENT PLD ADDRESS\n         BCR   4,RLPEXIT           EXIT IF NEGATIVE\n         SPACE\n         LA    RPARM,4(RPARM)      INCREMENT LIST POINTER\n         B     LISTPROC            TO PROCESS NEXT LINE\n         SPACE 2\n* EXECUTED INSTRUCTIONS:\n         SPACE\nBLNKMOVE MVC   4(0,RWD),3(RWD)     SPREAD BLANKS IN OUTPUT BUFFER\nMOVEINST MVC   0(0,RWB),0(RWC)     MOVE CALLER'S TEXT TO OUTPUT BUF\n         SPACE\n         DROP  RPLD\n         EJECT\n************\n* HEADPRNT *\n************\n         SPACE\n* ENTER THIS ROUTINE WHEN IT IS DISCOVERED THAT WE ARE AT\n* HEAD-OF-FORM AND ARE ABOUT TO PRINT A LINE.  SAVE THE REGISTERS\n* DEFINING THE STATE OF 'LISTPROC' AND CALL IT WITH A LIST SPECIFYING\n* THE HEADING AND SUB-HEADING LINES.\n         SPACE 2\nHEADPRNT ST    RRET,HPREXIT        SAVE RETURN ADDRESS\n         STM   RLPEXIT,RPARM,HPRSAVE  STORE LISTPROC REGISTERS\n         SPACE\n* RESET HEAD-OF-FORM BIT AND SET NO-SKIP BIT TO SUPPRESS FORM SKIPS\n* AND HEADING LINE BIT TO INCLUDE THE PAGE NUMBER.  RESET PAGE BALANCE.\n         SPACE\n         NI    SWITCHES,255-HOFBIT  RESET HOF BIT\n         OI    SWITCHES,HD1BIT+NOSKBIT  SET HEADING AND NOSKIP BITS\n         LH    RBAL,PAGELNG        RESET PAGE BALANCE\n         SPACE\n* LOAD ADDRESS OF HEADINGS LIST AND CALL LIST PROCESSOR.\n         SPACE\n         L     RPARM,HEADLIST      ADDRESS OF HEADINGS LIST\n         BAL   RLPEXIT,LISTPROC    CALL PROCESSING ROUTINE\n         SPACE\n* AFTER PRINTING THE HEADINGS, TURN SYSTEM SKIP-SUPPRESSION BIT OFF\n* AND SET 'TXT1BIT' TO INDICATE THAT THERE ARE NO TEXT LINES ON THE\n* PAGE YET.  THEN RESTORE THE 'LISTPROC' REGISTERS AND RETURN TO\n* PROCESSING THE CALLER'S LINES.\n         SPACE\n         NI    SWITCHES,255-NOSKBIT  RESET NO-SKIP BIT\n         OI    SWITCHES,TXT1BIT    SET FIRST-TEXT-LINE BIT\n         SPACE\n         LM    RLPEXIT,RPARM,HPRSAVE  RESTORE LISTPROC REGISTERS\n         L     RRET,HPREXIT        RECOVER EXIT ADDRESS AND\n         BR    RRET                RETURN TO CALLER\n         EJECT\n***********************************\n* MOVE - VERTICAL SPACING ROUTINE *\n***********************************\n         SPACE\n* SUBROUTINE TO MOVE THE PAPER BY THE NUMBER OF LINES IN REGISTER\n* 'RSPACE'.  RETURN ADDRESS IS IN 'RWA'.  IF THE CONTROL CHARACTER FOR\n* THE LAST LINE SPACED 0 LINES, REPLACE IT WITH A NEW ONE BEFORE\n* GENERATING ANY EXTRA LINES.\n         SPACE 2\nMOVE     LTR   RSPACE,RSPACE       TEST NUMBER OF LINES TO BE MOVED\n         BCR   13,RWA              EXIT IF <= ZERO\n         TM    SWITCHES,SP0BIT     DID PREVIOUS LINE SPACE 0?\n         BZ    PREVNOT0            BRANCH IF NOT\n         L     R1,CCLAST           GET ADDRESS OF PREVIOUS LINE\n         BAL   RWB,CCGEN           GENERATE NEW CONTROL CHAR\n         NI    4(R1),X'02'         TEST WRITE/SPACE BIT IN OLD CC\n         STC   R0,4(R1)            STORE NEW CC IN PREVIOUS LINE\n         BNZ   *+8                 BR IF WRITE/SPACE BIT WAS ON\n         NI    4(R1),255-X'02'     TURN WRITE/SPACE BIT OFF\nPREVNOT0 DS    0H\n         MVC   DCBLRECL(2),MOVELINE  SET LOGICAL RECORD LENGTH IN DCB\n         SPACE\n         PUT   PRINTDCB            GET BUFFER ADDRESS IN R1\n         SPACE\n         ST    R1,CCLAST           SAVE LOCATION OF THIS LINE\n         MVC   0(6,R1),MOVELINE    INSERT FORMAT 'V' CONTROL RECORD\n         BAL   RWB,CCGEN           GET PRINT CONTROL CHAR IN R0\n         STC   R0,4(R1)            INSERT IN RECORD\n         SPACE\n         B     MOVE                LOOP UNTIL 'RSPACE' IS ZERO\n         SPACE 3\nMOVELINE DC    XL6'000600000340'   FORMAT 'V' CONTROL RECORD\n         EJECT\n*****************************************\n* CCGEN - GENERATE PRINTER CONTROL CHAR *\n*****************************************\n         SPACE\n* THIS ROUTINE GENERATES A PRINTER CONTROL CHARACTER TO SPACE OR EJECT\n* IMMEDIATELY (WITHOUT PRINTING).  ENTER WITH THE TOTAL NUMBER OF\n* LINES TO BE MOVED IN 'RSPACE' AND RETURN ADDRESS IN 'RWB'.  EXITS\n* WITH THE CONTROL CHARACTER IN BITS 24-31 OF REGISTER 0 AND THE COUNT\n* IN 'RSPACE' DECREMENTED BY THE AMOUNT WHICH THE CHARACTER WILL SPACE.\n* A SPACE VALUE OF 255 OR GREATER WILL GENERATE AN EJECT CONTROL\n* CHARACTER, SET 'RSPACE' AND 'RBAL' TO ZERO, AND SET THE HEAD-OF-FORM\n* BIT.  NOTE:  MUST NOT USE R1.\n         SPACE 2\nCCGEN    NI    SWITCHES,255-SP0BIT  RESET 'PREVIOUS SPACED 0' BIT\n         CH    RSPACE,=AL2(EJFORCE)  TEST FOR EJECT REQUEST\n         BL    CCNOEJ              BRANCH IF NOT\n         LA    R0,X'8B'            LOAD 'SKIP TO CHAN 1' CC\n         OI    SWITCHES,HOFBIT     SET HEAD-OF-PAGE BIT\n         SR    RBAL,RBAL           SET PAGE BALANCE TO ZERO\n         SR    RSPACE,RSPACE       SET REMAINING SPACING TO ZERO\n         BR    RWB                 EXIT\n         SPACE\nCCNOEJ   LR    R15,RSPACE          LOAD WORK REGISTER\n         CH    RSPACE,=H'3'        TEST IF OVER THREE LINES\n         BNH   CCOK                BR IF <= 3\n         LA    R15,3               SET 3, MAXIMUM FOR 1 OPERATION\nCCOK     SR    RSPACE,R15          DECR RSPACE BY AMOUNT SPACED\n         SLL   R15,3               PUT AMOUNT IN BITS 2-4 OF BYTE\n         LA    R0,X'03'(R15)       ADD COMMAND BITS AND PUT IN R0\n         LTR   R15,R15             TEST FOR ZERO SPACING\n         BCR   7,RWB               EXIT IF NOT ZERO\n         OI    SWITCHES,SP0BIT     SET 'LINE SPACED 0' BIT\n         BR    RWB                 EXIT\n         EJECT\n***********************\n* SYNAD ERROR ROUTINE *\n***********************\n         SPACE\n* IF A PERMANENT I/O ERROR OCCURS, TYPE A DIAGNOSTIC MESSAGE AND ABORT.\n         SPACE\nSYNAD    SYNADAF ACSMETH=QSAM      GET ERROR MESSAGE FROM O/S\n         LR    RWA,R1              SAVE MESSAGE ADDRESS\n         GETMAIN R,LV=128          GET BUFFER FOR MESSAGE\n         MVC   0(LIOMSG,R1),IOMSG  INSERT MESSAGE BEGINNING\n         MVC   LIOMSG(79,R1),49(RWA)  ADD TEXT FROM O/S\n         LR    RWA,R1              SAVE MESSAGE ADDRESS\n         SYNADRLS                  FREE O/S MESSAGE\n         WTO   MF=(E,(RWA))        TYPE MESSAGE ON CONSOLE\n         LA    R1,7                LOAD ERROR CODE\n         B     ABEND               TO ABORT AND DUMP\n         SPACE\nIOMSG    DC    AL2(LIOMSG+78,0)    FORMAT V CONTROL FIELD\n         DC    C'XPRNTSUB I/O ERROR'\nLIOMSG   EQU   *-IOMSG\n         EJECT\n**************************\n* CONSTANTS AND LITERALS *\n**************************\n         SPACE\n* DUMMY PARAMETER LIST AND PLD FOR USE WHEN NO HEADING IS PROVIDED.\n         SPACE\nNOHDLIST DS    0F\n         DC    XL1'80'             VL LIST BIT\n         DC    AL3(NOHDPLD)        ADDRESS OF PLD BELOW\n         SPACE\nNOHDPLD  DS    0F                  ALIGN ON FULL-WORD BOUNDARY\n         DC    BL1'00010000'       OPTION BITS\n         DC    AL3(BLANK1)         PRINT TEXT ADDRESS\n         DC    AL1(1)              PRINT TEXT LENGTH\n         DC    AL1(0)              LEFT MARGIN INDENTATION\n         DC    AL1(0)              SPACING BEFORE PRINTING\n         DC    AL1(3)              SPACING AFTER PRINTING\n         SPACE\n* CONSTANTS TO INITIALIZE PARAMETERS AND SWITCHES WHEN 'OPEN' CALL IS\n* RECEIVED.  THE ORDER MUST MATCH THE 'PAPARMS' LIST IN THE WORK AREA.\n         SPACE\nDEFAULTS DS    0F\n         DC    A(NOHDLIST)         PAGE HEADING PARM LIST ADDRESS\n         DC    F'1000000'          MAXIMUM NUMBER OF OUTPUT LINES\n         DC    H'132'              PAGE WIDTH\n         DC    H'57'               PAGE LENGTH            ***TRW***\n         DC    H'0'                PAGE NUMBER (-1)\n         DC    H'0'                PAGE BALANCE\n         DC    X'00'               SWITCHES\nDEFSIZE  EQU   *-DEFAULTS\n         SPACE\n* MISCELLANEOUS CONSTANTS:\n         SPACE\nBLANK1   DC    C' '                TEXT OF DUMMY HEADING LINE\n         LTORG\n         EJECT\n*******************\n* WORK AREA DSECT *\n*******************\n         SPACE\n* THIS DUMMY SECTION DEFINES THE WORK AREA PROVIDED BY THE PROBLEM\n* PROGRAM FOR EACH DATA SET.  ITS ADDRESS IS PASSED IN PARAMETER\n* REGISTER 0 AT EACH CALL.\n         SPACE 2\nWORKAREA DSECT\n         SPACE 2\n* STANDARD 18-WORD SAVE AREA:\n         SPACE\nSAVEAREA DS    18F\n         SPACE 2\n* DATA CONTROL BLOCK FOR PRINTER DATA SET:\n         SPACE\n         PRINT NOGEN\nPRINTDCB DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               RECFM=VBM,                                              X\n               LRECL=137,                                              X\n               MACRF=PL,                                               X\n               BFTEK=S,                                                X\n               BUFNO=2,                                                X\n               EROPT=ACC\n         PRINT GEN\n         SPACE\nDCBEXLST EQU   PRINTDCB+37         ADDRESS OF EXIT LIST\nDCBOFLGS EQU   PRINTDCB+48         CONTAINS 'OPENED SUCCESSFULLY' BIT\nDCBDDNAM EQU   PRINTDCB+40         DDNAME (WHEN CLOSED)\nDCBSYNAD EQU   PRINTDCB+57         ADDRESS OF SYNCHRONOUS ERROR ROUTINE\nDCBBLKSZ EQU   PRINTDCB+62         BLOCK SIZE\nDCBLRECL EQU   PRINTDCB+82         LOGICAL RECORD LENGTH\n         SPACE 2\n* ADDRESS OF LAST BUFFER OBTAINED BY \"PUT\" MACRO:\n         SPACE\nCCLAST   DS    1A\n         SPACE\n         DS    1F                  SPARE FULL WORD\n         SPACE 2\n* TEMPORARY WORK CELLS:\n         SPACE\nDWORK    DS    1D                  DOUBLE-WORD WORK CELL\nHPREXIT  DS    1F                  HEADPRNT EXIT SAVE\nHPRSAVE  DS    2F                  HEADPRNT REGISTER STORAGE\n         SPACE 2\n* PARAMETERS AND SWITCHES WHICH DEFINE THE PAGE SIZE AND STATUS.\n* SEQUENCE MUST MATCH THAT IN 'DEFAULTS', WHICH INITIALIZES THEM.\n         SPACE\nPAPARMS  DS    0F\nHEADLIST DS    1A                  PAGE HEADING PARM LIST ADDRESS\nMAXLINES DS    1F                  MAXIMUM NUMBER OF OUTPUT LINES\nPAGWIDTH DS    1H                  PAGE WIDTH\nPAGELNG  DS    1H                  PAGE LENGTH\nPAGENO   DS    1H                  PAGE NUMBER OF CURRENT PAGE\nPAGEBAL  DS    1H                  PAGE BALANCE\nSWITCHES DS    1X                  SWITCHES\n         SPACE 2\n* STORAGE FOR DATE AND TIME PORTION OF PAGE HEADING:\n         SPACE\nHLTXTLNG EQU   24\nHLTEXT   DS    CL(HLTXTLNG)\nHLDAY    EQU   HLTEXT\nHLTIME   EQU   HLTEXT+7\nHLDATE   EQU   HLTEXT+16\n         EJECT\n*************************\n* PARAMETER LIST DSECTS *\n*************************\n         SPACE 2\n* PARAMETER LIST FOR 'EJECT' CALL:\n         SPACE\nEJPARM   DSECT\n         SPACE\nEJCOND   DS    1X                  CONDITIONAL MASK AND SWITCHES\nEJQUAN   DS    1X                  CONDITIONAL TEST QUANTITY\n         SPACE\nEJATHOF  EQU   X'01'               MASK FOR 'EJCOND'\n         SPACE 6\n* PARAMETER LIST FOR 'SPACE' CALL:\n         SPACE\nSPPARM   DSECT\n         SPACE\nSPCOND   DS    1X                  CONDITIONAL BITS\nSPQUAN   DS    1X                  NUMBER OF LINES TO SPACE\n         SPACE\nSPATHOF  EQU   X'01'               MASK FOR 'SPCOND'\nSPNOEJ   EQU   X'02'               MASK FOR 'SPCOND'\n         SPACE 6\n* PARAMETER LIST FOR 'OPEN' AND 'MODIFY' CALLS:\n         SPACE\nOMPARM   DSECT\n         SPACE\nOMMAXLIN DS    1F                  MAXIMUM NUMBER OF OUTPUT LINES\nOMPAGENO DS    1H                  INITIAL PAGE NUMBER\nOMPAGWID DS    1X                  PAGE WIDTH\nOMPAGLNG DS    1X                  PAGE LENGTH\nOMTIMEAD DS    1A                  ADDRESS OF TIME\nOMDATEAD DS    1A                  ADDRESS OF DATE\nOMDDNAME DS    CL8                 DDNAME (OPEN CALL ONLY)\n         EJECT\n*************\n* PLD DSECT *\n*************\n         SPACE\n* PRINT LINE DESCRIPTOR DUMMY SECTION:\n         SPACE 2\n*        ******************************************************\n*        *            *                                       *\n*        *   OPTION   *                                       *\n*        *    BITS    *             TEXT ADDRESS              *\n*        *            *                                       *\n*        ******************************************************\n*        *            *            *            *             *\n*        *    TEXT    *    TEXT    *   SPACE    *    SPACE    *\n*        *   LENGTH   *   OFFSET   *   BEFORE   *    AFTER    *\n*        *            *            *            *             *\n*        ******************************************************\n         SPACE 3\nPLDBLOCK DSECT\n         SPACE\nPLDFLAGS DS    1X                  OPTION BITS\nPLDTXTAD DS    AL3                 TEXT ADDRESS\nPLDLNGTH DS    1X                  TEXT LENGTH\nPLDOFFST DS    1X                  TEXT OFFSET, OR LEFT MARGIN\nPLDSPB   DS    1X                  AMOUNT TO SPACE BEFORE PRINTING\nPLDSPA   DS    1X                  AMOUNT TO SPACE AFTER PRINTING\n         SPACE 2\nPRHOFBIT EQU   B'00000010'         MASK FOR 'PLDFLAGS'\nPRSKPBIT EQU   B'00000001'         MASK FOR 'PLDFLAGS'\nSPSKPBIT EQU   B'00010000'         MASK FOR 'PLDFLAGS'\n         TITLE 'DATE EDITING ROUTINE \"XDATEDIT\"'\n* STATUS:  VERSION 0, MOD 2, 5 OCTOBER 1967.\n         SPACE\n* FUNCTION/OPERATION:  EDITS A PACKED DECIMAL DATE IN YEAR-DAY FORM TO\n*        EBCDIC MONTH-DAY-YEAR FORM.  CORRECTS FOR LEAP YEARS AND\n*        FOR THE TURN OF A CENTURY.\n         SPACE\n* ENTRY POINTS:  ENTER AT \"XDATEDIT\" VIA BALR 14,15 WITH REG 13 SET\n*        TO A STANDARD 18-WORD SAVE AREA.  REGISTER 1 POINTS TO A\n*        PARAMETER LIST CONTAINING ONE ADDRESS.\n         SPACE\n* INPUT:  THE ADDRESS IN THE PARAMETER LIST IS THAT OF AN ALIGNED\n*        DOUBLE WORD CONTAINING THE ARGUMENT IN PACKED DECIMAL AS:\n*        X'0000000000YYDDD+'.\n         SPACE\n* OUTPUT:  THE RESULT IS RETURNED IN THE SAME DOUBLE WORD IN EBCDIC AS\n*        C'MM/DD/YY'.\n         SPACE\n* DATA SETS:  NONE.\n         SPACE\n* EXTERNAL ROUTINES:  NONE.\n         SPACE\n* EXITS-NORMAL:  RETURN VIA REG 14 WITH RETURN CODE 0 IN REG 15.\n         SPACE\n* EXITS-ERROR:  IF THE DAY NUMBER IS ZERO OR EXCEEDS THE MAXIMUM VALUE\n*        APPROPRIATE TO THE YEAR, RETURN VIA REG 14 WITH RETURN CODE 4\n*        IN REG 15 AND THE RESULT FIELD SET TO C' YY.DDD '.\n         SPACE\n* TABLES/WORK AREAS:  NONE.\n         SPACE\n* ATTRIBUTES:  REENTRANT, READ ONLY.\n         SPACE\n* NOTES:  NONE.\n         EJECT\n* DUMMY SECTION TO DEFINE THE ARGUMENT AND RETURN FIELD.\n         SPACE\nDUMMY    DSECT\nDWORD    DS    1D\n         SPACE 6\n* BEGIN CONTROL SECTION HERE.  DEFINE REGISTER TAGS.\n         SPACE\nXDATEDIT CSECT\n         SPACE\nRDSECT   EQU   11                  BASE REG FOR ARGUMENT/RESULT\nRPARMD   EQU   1                   PARAMETER LIST POINTER\nRARGSAVE EQU   2                   TO SAVE ORIGINAL PACKED ARGUMENT\nRMONTH   EQU   3\nRDAY     EQU   4                   RDAY AND RYEAR ARE AN EVEN/ODD\nRYEAR    EQU   5                   PAIR FOR DIVISION\nRWORK    EQU   6\nRLIST    EQU   7\n         SPACE 6\n* ENTER HERE.  SAVE GENERAL REGISTERS AND SET UP BASE REGISTERS.\n         SPACE\n         SAVE  (14,12),,*\n         SPACE\n         BALR  RBASE,0\n         USING *,RBASE\n         L     RDSECT,0(RPARMD)    LOAD ARGUMENT ADDRESS\n         USING DWORD,RDSECT\n         EJECT\n* CONVERT YEAR AND DAY TO BINARY, AND SEPARATE BY DIVISION.\n         SPACE\n         MVI   DWORD,X'00'         CLEAR HIGH DECIMAL DIGITS\n         MVC   DWORD+1(4),DWORD    IN ARG TO ZEROS\n         OI    DWORD+7,X'0F'       FORCE PLUS SIGN\n         L     RARGSAVE,DWORD+4    SAVE ARGUMENT FOR 'BADDATE'\n         SPACE\n         CVB   RYEAR,DWORD         CONVERT YYDDD TO BINARY\n         SR    RDAY,RDAY           CLEAR HIGH-ORDER DIVIDEND\n         D     RDAY,F1000          QUOTIENT=YEAR; REMAINDER=DAY\n         SPACE\n* CHECK FOR LEAP YEAR, AND LOAD RLIST WITH BASE ADDRESS OF APPROPRIATE\n* LIST OF MONTH SIZES.\n         SPACE\nDAYOK    DS    0H\n         LA    RLIST,STDLIST       POINT RLIST TO STANDARD MONTHS\n         LTR   RWORK,RYEAR         LOAD BINARY YEAR NUMBER\n         BZ    NOTLEAP             BR IF TURN OF CENTURY\n         N     RWORK,=F'3'         TEST LOW TWO BITS\n         BC    4,NOTLEAP           BR IF NON-ZERO\n         LA    RLIST,LPYLIST       POINT RLIST TO LEAP-YEAR MONTHS\nNOTLEAP  DS    0H\n         SPACE\n* TEST DAY NUMBER AGAINST ZERO AND THE UPPER LIMIT DETERMINED BY\n* THE YEAR NUMBER.\n         SPACE\n         LTR   RDAY,RDAY           TEST FOR ZERO\n         BZ    BADDATE             BR IF SO\n         CH    RDAY,0(0,RLIST)     TEST FOR UPPER LIMIT\n         BH    BADDATE             BR IF TOO LARGE\n         SPACE\n* REDUCE JULIAN DAY TO DAY-OF-MONTH, ACCUMULATING MONTH NUMBER.\n         SPACE\n         LA    RMONTH,1            INITIAL MONTH NUMBER\n         SR    RWORK,RWORK\nDAYLOOP  IC    RWORK,1(RMONTH,RLIST)  LENGTH OF MONTH INTO RWORK\n         CR    RDAY,RWORK          TEST IF DAY IN THIS MONTH\n         BNH   DAYDONE             BR IF DAY LESS THAN MONTH SIZE\n         SR    RDAY,RWORK          REDUCE DAY BY LENGTH OF MONTH\n         LA    RMONTH,1(RMONTH)    INCREMENT MONTH\n         B     DAYLOOP\nDAYDONE  DS    0H\n         SPACE\n* COMBINE MONTH, DAY, AND YEAR IN BINARY IN ONE REGISTER, MULTIPLYING\n* EACH BY A FACTOR TO PLACE IT PROPERLY IN THE DECIMAL RESULT.\n* THE TRICK IS THAT  1000(1000(MONTH)+DAY)+YEAR  GIVES  MM0DD0YY  WHEN\n* CONVERTED TO DECIMAL.  AFTER UNPACKING, THE ZEROS ARE REPLACED BY\n* SLASHES.\n         SPACE\n         MH    RMONTH,H1000\n         AR    RMONTH,RDAY\n         MH    RMONTH,H1000\n         AR    RMONTH,RYEAR\n         CVD   RMONTH,DWORD\n         MVC   DWORD(5),DWORD+3    MOVE OVER FOR UNPACKING\n         UNPK  DWORD(8),DWORD(5)   CONVERT TO ALPHA\n         OI    DWORD+7,X'F0'       COVER UP SIGN\n         MVI   DWORD+2,C'/'        INSERT SLASHES\n         MVI   DWORD+5,C'/'\n         SR    15,15               SET NORMAL RETURN CODE OF 0\n         SPACE\nEXITD    RETURN  (14,12),T,RC=(15)  RETURN TO CALLER\n         SPACE 2\n* FOR ARGUMENTS WHOSE DAY NUMBER IS ZERO OR TOO LARGE, RETURN IN\n* 'DWORD' THE EDITED VALUE  C' YY.DDD ' AND SET A RETURN CODE OF 4.\n         SPACE\nBADDATE  ST    RARGSAVE,DWORD      RESTORE ORIGINAL PACKED ARGUMENT\n         UNPK  DWORD+2(5),DWORD+1(3)  UNPACK INTO ALPHA\n         MVC   DWORD+1(2),DWORD+2  SHIFT YEAR 1 LEFT\n         MVI   DWORD,C' '          APPLY COSMETICS\n         MVI   DWORD+3,C'.'\n         MVI   DWORD+7,C' '\n         LA    15,4                SET RETURN CODE\n         B     EXITD\n         EJECT\n* LISTS OF MONTH SIZES FOR STANDARD AND LEAP YEARS:\n         SPACE\n         SPACE\nSTDLIST  DC    H'365'              DAY LIMIT FOR STANDARD YEARS\n         DC    AL1(31)\n         DC    AL1(28)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         SPACE\nLPYLIST  DC    H'366'              DAY LIMIT FOR LEAP YEARS\n         DC    AL1(31)\n         DC    AL1(29)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         SPACE\nF1000    DC    F'1000'\nH1000    EQU   F1000+2\n         LTORG\n./       ADD   NAME=SASASID\nDATA A;\n INFILE ASIDS;\n INPUT\n @01  ASRJOBNA       $8.\n @09  ASRTIBEG       TODSTAMP.\n @17  ASRNPG         IB2.\n @19  ASRDMN         IB1.\n @20  ASRASINR       IB2.\n @22  ASRCPUTA       IB4.\n @26  ASRDCTIA       IB4.\n @30  ASRFIXA        IB4.\n @34  ASRTRCA        IB4.\n @38  ASRFMCT        IB4.\n @42  ASRFMCTI       IB4.\n @46  ASRSMPCT       IB2.\n @48  ASRSWAP        IB2.\n @50  ASRIDLE        IB2.\n @52  ASRSWAR        IB2.\n @54  ASRUKN         IB2.\n @56  ASRSUSEN       IB2.\n @58  ASRSUCPR       IB2.\n @60  ASRSUCDV       IB2.\n @62  ASRSWAIN       IB2.\n @64  ASRSDCPR       IB2.\n @66  ASRSDCDV       IB2.\n @68  ASRSDCST       IB2.\n @70  ASRSDCJE       IB2.\n @72  ASRSDCHS       IB2.\n @74  ASRSDCEN       IB2.\n      @ ;\n DATE=DATEPART(ASRTIBEG);\n IF WEEKDAY(DATE) = 1\n  | WEEKDAY(DATE) = 7 THEN DELETE;\n TIME=TIMEPART(ASRTIBEG);\n USING=(ASRSUSEN*100)/ASRSMPCT;\n DELAY=(ASRSWAIN*100)/ASRSMPCT;\n\n IF ASRJOBNA=:'CICP'\n  | ASRJOBNA='JES2'\n  | ASRJOBNA='NET'\n  | ASRJOBNA=:'ADAP'\n ;\n\nPROC SORT; BY ASRJOBNA DATE;\n\n\nPROC PLOT DATA=WORK.A;\n PLOT USING*TIME='U' DELAY*TIME='*' / OVERLAY VAXIS=0 TO 100 BY 10;\n BY ASRJOBNA DATE;\n FORMAT TIME TIME. ;\n FORMAT DATE DATE. ;\n\n./       ADD   NAME=SASDEVCE\nDATA A;\n INFILE DEVICES;\n INPUT\n  @01      DVRVOLI        $6.\n  @07      DVRMEXNR       IB2.\n  @09      DVRDISIF       IB4.\n  @13      DVRPETIF       IB4.\n  @17      DVRCOTIF       IB4.\n  @21      DVRDVBIF       IB4.\n  @25      DVRCUBIF       IB4.\n  @29      DVRDISIL       IB4.\n  @33      DVRPETIL       IB4.\n  @37      DVRCOTIL       IB4.\n  @41      DVRDVBIL       IB4.\n  @45      DVRCUBIL       IB4.\n  @49      DVRTYP         IB4.\n  @53      DVRSMPCT       IB4.\n  @57      DVRHUJBN       $8.\n  @65      DVRHUCNT       IB4.\n  @69      DVRHWJBN       $8.\n  @77      DVRHWCNT       IB4.\n  @81      DVRTIBEG       TODSTAMP.\n      @ ;\n DATE=DATEPART(DVRTIBEG);\n TIME=TIMEPART(DVRTIBEG);\n USING=(DVRHUCNT*100)/DVRSMPCT;\n DELAY=(DVRHWCNT*100)/DVRSMPCT;\nIF DVRVOLI=:'PROD'\n | DVRVOLI=:'SUN' ;\n\nPROC SORT; BY DVRVOLI DATE;\n\n\nPROC PLOT DATA=WORK.A;\n PLOT USING*TIME='U' DELAY*TIME='*' / OVERLAY VAXIS=0 TO 100 BY 10;\n BY DVRVOLI DATE;\n FORMAT TIME TIME. ;\n FORMAT DATE DATE. ;\n\n./       ADD   NAME=TOTIME\n         TITLE ' - TIME CONVERSION SUBROUTINE.'\n* ON ENTRY R0 CONTAINS THE TIME TO CONVERT,\n* AND R1 THE ADDRESS OF A RESULT FIELD TO BE UPDATED.\nTOTIME  $PROLOG R12\n         L     R10,=V(DATASECT)\n         USING DATASECT,R10\n         LR    R5,R0              INPUT TIME IN 100THS SEC\n         SR    R4,R4              SETUP FOR DIVIDE\n         MVC   WRK11PAT,=C'HH:MM:SS.TH'  SETUP OUTPUT PATTERN\n         D     R4,=F'100'         GET 100TH OF SECS\n         CVD   R4,DOUBLE          PACKED DEC\n         OI    DOUBLE+7,X'0F'     FOXIE SIGN\n         UNPK  WRK11TH,DOUBLE+6(2) HUND OF SEC\n         SR    R4,R4              SETUP FOR DIVIDE\n         D     R4,=F'60'          GET SECS\n         CVD   R4,DOUBLE          PACKED DEC\n         OI    DOUBLE+7,X'0F'     FOXIE SIGN\n         UNPK  WRK11SS,DOUBLE+6(2) SEC\n         SR    R4,R4              SETUP FOR DIVIDE\n         D     R4,=F'60'          GET MIN\n         CVD   R4,DOUBLE          PACKED DEC\n         OI    DOUBLE+7,X'0F'     FOXIE SIGN\n         UNPK  WRK11MM,DOUBLE+6(2) MIN\n         CVD   R5,DOUBLE          PACKED DEC\n         OI    DOUBLE+7,X'0F'     FOXIE SIGN\n         UNPK  WRK11HH,DOUBLE+6(2) HR\n         MVC   0(11,R1),WRK11PAT  UPDATE CALLER'S RESULT FIELD.\n        $EPILOG ,\n         LTORG ,\n         TITLE 'DATA AREAS.'\nWRK11PAT DS    CL11            WORK AREA TO BUILD HH:MM:SS:TH\nWRK11HH  EQU   WRK11PAT+00,2\nWRK11MM  EQU   WRK11PAT+03,2\nWRK11SS  EQU   WRK11PAT+06,2\nWRK11TH  EQU   WRK11PAT+09,2\n./       ADD   NAME=XPRCLOSE\n         MACRO\n&SYMBOL  XPRCLOSE  &WA\n.* MACRO TO EXECUTE A CLOSE CALL TO 'XPRNTSUB'.\n         CNOP  0,4\n&SYMBOL  B     *+8                     BRANCH AROUND ADDRESS\n         XPRINNRA  &WA,68\n         MEND\n./       ADD   NAME=XPRDCB\n         MACRO\n&SYMBOL  XPRDCB  &DDNAME=SYSPRINT,&BLKSIZE=0\n         LCLC  &TAG\n.* MACRO TO GENERATE A WORK AREA FOR A PRINTER DATA SET, CONTAINING\n.* A SAVE AREA, THE DCB, OPEN AND CLOSE PARAMETER LISTS, AND VARIOUS\n.* CELLS AND SWITCHES.\n&TAG     SETC  '&SYMBOL'\n         AIF   (T'&SYMBOL NE 'O').TOK  TEST IF NAME SUPPLIED\n&TAG     SETC  'XPRDCB01'              SUPPLY STANDARD PRDCB NAME\n.TOK     ANOP\n&TAG     DS    0D                      ALIGN ON DOUBLE-WORD BOUNDARY\n         DS    18F                     STANDARD SAVE AREA\n         SPACE\n*        DCB   DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,           X\n*              BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2\nIHB&SYSNDX DCB DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,            X\n               BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2\n         SPACE\n* PARAMETER LISTS FOR OPEN AND CLOSE:\n         SPACE\n         OPEN  (IHB&SYSNDX,(OUTPUT,LEAVE)),MF=L  PARM LIST FOR OPEN\n         SPACE\n         CLOSE (IHB&SYSNDX,LEAVE),MF=L PARM LIST FOR CLOSE\n         SPACE\n* WORK CELLS AND VARIABLE STORAGE:\n         SPACE\n         DS    1D                      WORK CELL\n         DS    3F                      WORK CELLS\n         DS    1A                      PAGE HEADING PARM LIST ADDRESS\n         DS    1F                      MAXIMUM NUMBER OF OUTPUT LINES\n         DS    1H                      PAGE WIDTH\n         DS    1H                      PAGE LENGTH\n         DS    1H                      PAGE NUMBER\n         DS    1H                      PAGE BALANCE\n         DS    1X                      SWITCHES\n         DS    CL24                    DATE & TIME FOR PAGE HEADING\n         SPACE 2\n         MEND\n./       ADD   NAME=XPREJECT\n         MACRO\n&SYMBOL  XPREJECT  &WA,&COND=\n.* MACRO TO EXECUTE AN EJECT CALL TO 'XPRNTSUB'.\n         LCLC  &TAG,&SYM,&OPT,&R\n         LCLA  &K\n&SYM     SETC  '&SYMBOL'\n&TAG     SETC  'IHB&SYSNDX'\n         CNOP  2,4\n.TST1    AIF   ('&COND' NE '').TST2\n&OPT     SETC  'F000'\n         AGO   .SIMPLE\n.TST2    AIF   ('&COND' NE 'ATHOF').TSTC\n&OPT     SETC  'F100'\n.SIMPLE  ANOP\n&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS\n         DC    XL2'&OPT'               OPTION BITS\n         AGO   .VCON\n.TSTC    AIF   ('&COND(1)' NE 'EQ').NE\n&OPT     SETC  '80'\n.NE      AIF   ('&COND(1)' NE 'NE').LT\n&OPT     SETC  '70'\n.LT      AIF   ('&COND(1)' NE 'LT').GT\n&OPT     SETC  '40'\n.GT      AIF   ('&COND(1)' NE 'GT').LE\n&OPT     SETC  '20'\n.LE      AIF   ('&COND(1)' NE 'LE').GE\n&OPT     SETC  'C0'\n.GE      AIF   ('&COND(1)' NE 'GE').NOT\n&OPT     SETC  'A0'\n.NOT     AIF   ('&OPT' NE '').COK\n         MNOTE 4,'COND OPERAND &COND(1) ILLEGAL'\n.COK     AIF   ('&COND(2)' NE '').C2OK\n         MNOTE 4,'COND TEST QUANTITY MISSING'\n         AGO   .NOTREG\n.C2OK    AIF   ('&COND(2)'(1,1) NE '(').NOTREG\n&K       SETA  K'&COND(2)-2\n&R       SETC  '&COND(2)'(2,&K)\n&SYM     STC   &R,&TAG.A               STORE INTO PARM LIST\n&SYM     SETC  ''\n.NOTREG  ANOP\n&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS\n         DC    XL1'&OPT'               CONDITION MASK\n         AIF   ('&COND(2)' EQ '').NOTREG2\n         AIF   ('&COND(2)'(1,1) NE '(').NOTREG2\n&TAG.A   DC    AL1(0)                  TEST QUANTITY\n         AGO   .VCON\n.NOTREG2 DC    AL1(&COND(2))           TEST QUANTITY\n.VCON    ANOP\n&TAG.L   XPRINNRA  &WA,92\n         MEND\n./       ADD   NAME=XPRHEAD\n         MACRO\n&SYMBOL  XPRHEAD  &WA,&LIST=\n.* MACRO TO PRESENT A LIST OF PRINT LINE DESCRIPTORS FOR PAGE HEADINGS\n.* TO 'XPRNTSUB'.\n&SYMBOL  XPRLIST  &WA,LIST=&LIST,IHBPARM=80\n         MEND\n./       ADD   NAME=XPRINNRA\n         MACRO\n&TAG     XPRINNRA  &WA,&IHBPARM\n.* INNER MACRO USED IN CALLS TO 'XPRNTSUB'\n         DC    V(XPRNTSUB)             PRINTING SUBROUTINE ADDRESS\n&TAG     L     15,*-4                  LOAD ENTRY POINT\n         AIF   ('&WA' NE '').WOK\n         LA    0,XPRDCB01              LOAD STANDARD WORK AREA ADDRESS\n         AGO   .BAL\n.WOK     AIF   ('&WA' EQ '(0)').BAL\n         AIF   ('&WA'(1,1) EQ '(').REG\n         LA    0,&WA                   LOAD WORK AREA ADDRESS\n         AGO   .BAL\n.REG     LR    0,&WA(1)                LOAD WORK AREA ADDRESS\n.BAL     BAL   14,&IHBPARM.(15)        CALL PRINT SUBROUTINE\n         MEND\n./       ADD   NAME=XPRLDEF\n         MACRO\n&SYMBOL  XPRLDEF  &TEXT=,&LENGTH=132,&OFFSET=0,&SPA=1,&SPB=0\n.* MACRO TO DEFINE PRINT LINE DESCRIPTOR BLOCKS (\"PLD\" BLOCKS) FOR\n.* THE PRINTING SUBROUTINE \"XPRNTSUB\".\n         LCLA  &N\n         LCLC  &B3,&B6,&B7\n         ACTR  25                      JUST IN CASE\n&B3      SETC  '0'\n&B6      SETC  '0'\n&B7      SETC  '0'\n.* PROCESS OPTIONS IN SPA OPERAND:\n.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1\n         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2\n&B3      SETC  '1'\n         AGO   .TSTB1\n.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'\n.* PROCESS OPTIONS IN SPB OPERAND:\n.TSTB1   ANOP\n&N       SETA  2\n.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2\n&B7      SETC  '1'\n         AGO   .TSTB4\n.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3\n&B6      SETC  '1'\n         AGO   .TSTB4\n.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4\n         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'\n.TSTB4   ANOP\n&N       SETA  &N+1\n         AIF   (&N LE 3).TSTB5\n.IFTEXT  AIF   ('&TEXT' NE '').TOK\n         MNOTE 4,'TEXT ADDRESS MISSING'\n.TOK     ANOP\n&SYMBOL  DS    0F                      ALIGN ON FULL-WORD BOUNDARY\n         DC    BL1'000&B3.00&B6&B7'    OPTION BITS\n         DC    AL3(&TEXT)              TEXT ADDRESS\n         DC    AL1(&LENGTH)            TEXT LENGTH\n         DC    AL1(&OFFSET)            MARGIN OFFSET\n.TESTB   AIF   ('&SPB(1)' EQ 'EJECT').BSKIP\n         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP\n         DC    AL1(&SPB(1))            PRE-SPACING\n         AGO   .TESTA\n.BSKIP   ANOP\n         DC    AL1(255)                EJECT BEFORE PRINTING\n.TESTA   AIF   ('&SPA(1)' EQ 'EJECT').ASKIP\n         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP\n         DC    AL1(&SPA(1))                 POST-SPACING\n         MEXIT\n.ASKIP   ANOP\n         DC    AL1(255)                EJECT AFTER PRINTING\n         MEND\n./       ADD   NAME=XPRLIST\n         MACRO\n&SYMBOL  XPRLIST  &WA,&LIST=,&IHBPARM=32\n.* MACRO TO DELIVER A LIST OF PRINT LINE DESCRIPTORS TO 'XPRNTSUB'.\n         LCLA  &N,&K,&D\n         LCLC  &TAG,&SYM,&R\n         ACTR  100\n&SYM     SETC  '&SYMBOL'\n&TAG     SETC  'IHB&SYSNDX'\n         AIF   ('&LIST' NE '').LOK\n         MNOTE 8,'LIST OPERAND MUST BE SUPPLIED'\n         MEXIT\n.LOK     CNOP  0,4\n         AIF   ('&LIST' NE '(1)').STLOOP\n&SYMBOL  B     &TAG.L                  BRANCH AROUND ADDRESS\n         AGO   .VCON\n.STLOOP  ANOP\n&N       SETA  &N+1\n         AIF   (&N GT N'&LIST).STDONE\n         AIF   ('&LIST(&N)'(1,1) NE '(').STLOOP\n&K       SETA  K'&LIST(&N)-2\n&R       SETC  '&LIST(&N)'(2,&K)\n&D       SETA  4*(&N-1)\n&SYM     ST    &R,&TAG.A+&D            STORE INTO PARM LIST\n&SYM     SETC  ''\n         AIF   (&N NE N'&LIST).STLOOP\n         OI    &TAG.A+&D,X'80'         SET END-OF-LIST BIT\n.STDONE  ANOP\n&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS\n&SYM     SETC  '&TAG.A'\n&N       SETA  0\n.LOOP    ANOP\n&N       SETA  &N+1\n         AIF   (&N GT N'&LIST).VCON\n         AIF   ('&LIST(&N)'(1,1) NE '(').NOTREG\n&SYM     DC    A(0)\n&SYM     SETC  ''\n         AGO   .LOOP\n.NOTREG  AIF   (&N EQ N'&LIST).LAST\n&SYM     DC    A(&LIST(&N))\n&SYM     SETC  ''\n         AGO   .LOOP\n.LAST    ANOP\n&SYM     DC    X'80'                   END-OF-LIST BIT\n         DC    AL3(&LIST(&N))\n.VCON    ANOP\n&TAG.L   XPRINNRA  &WA,&IHBPARM\n         MEND\n./       ADD   NAME=XPRMOD\n         MACRO\n&SYMBOL  XPRMOD  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,       X\n               &TIME=0,&DATE=0\n.* MACRO TO EXECUTE A MODIFY CALL TO 'XPRINTSUB'.\n&SYMBOL  XPROPEN  &WA,MAXLINE=&MAXLINE,PAGENO=&PAGENO,PAGEWID=&PAGEWID,X\n               PAGELEN=&PAGELEN,TIME=&TIME,DATE=&DATE,IHBPARM=104\n         MEND\n./       ADD   NAME=XPRNTLIN\n         MACRO\n&SYMBOL  XPRNTLIN  &WA,&TEXT=00,&LENGTH=132,&OFFSET=0,&SPB=0,&SPA=1\n         LCLA  &N\n         LCLC  &B3,&B6,&B7,&T,&R\n         ACTR  25\n&T       SETC  'IHB&SYSNDX'\n&B3      SETC  '0'\n&B6      SETC  '0'\n&B7      SETC  '0'\n.* PROCESS OPTIONS IN SPA OPERAND:\n.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1\n         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2\n&B3      SETC  '1'\n         AGO   .TSTB1\n.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'\n.* PROCESS OPTIONS IN SPB OPERAND:\n.TSTB1   ANOP\n&N       SETA  2\n.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2\n&B7      SETC  '1'\n         AGO   .TSTB4\n.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3\n&B6      SETC  '1'\n         AGO   .TSTB4\n.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4\n         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'\n.TSTB4   ANOP\n&N       SETA  &N+1\n         AIF   (&N LE 3).TSTB5\n.* GENERATE STORE INSTRUCTIONS IF REGISTER NOTATION IS USED:\n         CNOP  0,4\n         AIF   ('&SYMBOL' EQ '').IFR1\n&SYMBOL  DS    0H\n.IFR1    AIF   ('&TEXT' NE '00').TXTOK\n         MNOTE 4,'TEXT ADDRESS MUST BE SUPPLIED'\n.TXTOK   AIF   ('&TEXT'(1,1) NE '(').IFR2\n         ST    &TEXT(1),&T.A           STORE TEXT ADDRESS\n         MVI   &T.A,B'000&B3.00&B6&B7' INSERT OPTION BITS\n.IFR2    AIF   ('&LENGTH'(1,1) NE '(').IFR3\n         STC   &LENGTH(1),&T.A+4       STORE TEXT LENGTH\n.IFR3    AIF   ('&OFFSET'(1,1) NE '(').IFR4\n         STC   &OFFSET(1),&T.A+5       STORE MARGIN OFFSET\n.IFR4    AIF   ('&SPB(1)'(1,1) NE '(').IFR5\n&N       SETA  K'&SPB(1)-2\n&R       SETC  '&SPB(1)'(2,&N)\n         STC   &R,&T.A+6               STORE PRE-SPACING\n.IFR5    AIF   ('&SPA(1)'(1,1) NE '(').LOAD1\n&N       SETA  K'&SPA(1)-2\n&R       SETC  '&SPA(1)'(2,&N)\n         STC   &R,&T.A+7               STORE POST-SPACING\n.* LOAD REG 1 AND GENERATE PLD LIST ADDRESS:\n.LOAD1   BAL   1,&T.L                  LOAD PARM ADDRESS\n         DC    X'80'                   MARK END OF ADDRESS LIST\n         DC    AL3(&T.A)               ADDRESS OF PLD\n.* GENREATE PLD PARAMETERS TO DESCRIBE THE PRINT LINE:\n.IFR11   AIF   ('&TEXT'(1,1) NE '(').NOTR11\n&T.A     DC    A(0)                    TEXT ADDRESS & OPTION BITS\n         AGO   .IFR12\n.NOTR11  ANOP\n&T.A     DC    B'000&B3.00&B6&B7'      OPTION BITS\n         DC    AL3(&TEXT)              TEXT ADDRESS\n.IFR12   AIF   ('&LENGTH'(1,1) NE '(').NOTR12\n         DC    AL1(0)                  TEXT LENGTH\n         AGO   .IFR13\n.NOTR12  DC    AL1(&LENGTH)            TEXT LENGTH\n.IFR13   AIF   ('&OFFSET'(1,1) NE '(').NOTR13\n         DC    AL1(0)                  MARGIN OFFSET\n         AGO   .IFR14\n.NOTR13  DC    AL1(&OFFSET)            MARGIN OFFSET\n.IFR14   AIF   ('&SPB(1)'(1,1) NE '(').NOTR14\n         DC    AL1(0)                  PRE-SPACING\n         AGO   .IFR15\n.NOTR14  AIF   ('&SPB(1)' EQ 'EJECT').BSKIP\n         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP\n         DC    AL1(&SPB(1))            PRE-SPACING\n         AGO   .IFR15\n.BSKIP   DC    AL1(255)                SKIP BEFOR PRINTING\n.IFR15   AIF   ('&SPA(1)'(1,1) NE '(').NOTR15\n         DC    AL1(0)                  POST-SPACING\n         AGO   .VCON\n.NOTR15  AIF   ('&SPA(1)' EQ 'EJECT').ASKIP\n         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP\n         DC    AL1(&SPA(1))            POST-SPACING\n         AGO   .VCON\n.ASKIP   DC    AL1(255)                SKIP AFTER PRINTING\n.VCON    ANOP\n&T.L    XPRINNRA  &WA,32\n         MEND\n./       ADD   NAME=XPROPEN\n         MACRO\n&SYMBOL  XPROPEN  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,      X\n               &TIME=0,&DATE=0,&DDNAME=SYSPRINT,&IHBPARM=56\n.* MACRO TO EXECUTE AN 'OPEN' OR 'MODIFY' CALL TO 'XPRNTSUB'.\n         LCLC  &TAG\n&TAG     SETC  'IHB&SYSNDX'\n         AIF   ('&SYMBOL' EQ '').T1\n&SYMBOL  DS    0H\n.T1      AIF   ('&MAXLINE'(1,1) NE '(').T2\n         ST    &MAXLINE(1),&TAG.A      STORE IN PARM LIST\n.T2      AIF   ('&PAGENO'(1,1) NE '(').T3\n         STH   &PAGENO(1),&TAG.A+4     STORE IN PARM LIST\n.T3      AIF   ('&PAGEWID'(1,1) NE '(').T4\n         STC   &PAGEWID(1),&TAG.A+6    STORE IN PARM LIST\n.T4      AIF   ('&PAGELEN'(1,1) NE '(').T5\n         STC   &PAGELEN(1),&TAG.A+7    STORE IN PARM LIST\n.T5      AIF   ('&TIME'(1,1) NE '(').T6\n         ST    &TIME(1),&TAG.A+8       STORE IN PARM LIST\n.T6      AIF   ('&DATE'(1,1) NE '(').T7\n         ST    &DATE(1),&TAG.A+12      STORE IN PARM LIST\n.T7      AIF   ('&DDNAME'(1,1) NE '(').CNOP\n         MVC   &TAG.A+16(8),0(&DDNAME(1))  STORE IN PARM LIST\n.CNOP    CNOP  0,4\n         BAL   1,&TAG.L        LOAD PARM LIST ADDRESS\n.P1      AIF   ('&MAXLINE'(1,1) EQ '(').PR1\n&TAG.A   DC    A(&MAXLINE)             PRINT OUTPUT LIMIT\n         AGO   .P2\n.PR1     ANOP\n&TAG.A   DC    A(0)                    PRINT OUTPUT LIMIT\n.P2      AIF   ('&PAGENO'(1,1) EQ '(').PR2\n         DC    AL2(&PAGENO)            PAGE NUMBER\n         AGO   .P3\n.PR2     DC    AL2(0)                  PAGE NUMBER\n.P3      AIF   ('&PAGEWID'(1,1) EQ '(').PR3\n         DC    AL1(&PAGEWID)           PAGE WIDTH\n         AGO   .P4\n.PR3     DC    AL1(0)                  PAGE WIDTH\n.P4      AIF   ('&PAGELEN'(1,1) EQ '(').PR4\n         DC    AL1(&PAGELEN)           PAGE LENGTH\n         AGO   .P5\n.PR4     DC    AL1(0)                  PAGE LENGTH\n.P5      AIF   ('&TIME'(1,1) EQ '(').PR5\n         DC    A(&TIME)                ADDRESS OF TIME\n         AGO   .P6\n.PR5     DC    A(0)                    ADDRESS OF TIME\n.P6      AIF   ('&DATE'(1,1) EQ '(').PR6\n         DC    A(&DATE)                ADDRESS OF DATE\n         AGO   .P7\n.PR6     DC    A(0)                    ADDRESS OF DATE\n.P7      AIF   ('&IHBPARM' NE '56').VCON\n         AIF   ('&DDNAME'(1,1) EQ '(').PR7\n         DC    CL8'&DDNAME'            DDNAME FOR DATA SET\n         AGO   .VCON\n.PR7     DC    CL8' '                  DDNAME FOR DATA SET\n.VCON    ANOP\n&TAG.L   XPRINNRA  &WA,&IHBPARM\n         MEND\n./       ADD   NAME=XPRSPACE\n         MACRO\n&SYMBOL  XPRSPACE  &WA,&LINES=1,&COND=\n.* MACRO TO EXECUTE A SPACE CALL TO 'XPRNTSUB'.\n         LCLA  &N,&B6,&B7\n         LCLC  &TAG,&SYM\n&SYM     SETC  '&SYMBOL'\n&TAG     SETC  'IHB&SYSNDX'\n.LOOP    ANOP\n&N       SETA  &N+1\n         AIF   (&N GT N'&COND).LDONE\n.TST1    AIF   ('&COND(&N)' NE 'NOEJ').TST2\n&B6      SETA  1\n         AGO   .LOOP\n.TST2    AIF   ('&COND(&N)' NE 'ATHOF').TST3\n&B7      SETA  1\n         AGO   .LOOP\n.TST3    MNOTE 4,'OPERAND &COND(&N) AFTER KEYWORD COND IS ILLEGAL'\n         AGO   .LOOP\n.LDONE   CNOP  2,4\n         AIF   ('&LINES'(1,1) NE '(').NOTREG1\n&SYM     STC   &LINES(1),&TAG.A+1      STORE INTO PARM LIST\n&SYM     SETC  ''\n.NOTREG1 ANOP\n&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS\n&TAG.A   DC    B'000000&B6&B7'         OPTION BITS\n         AIF   ('&LINES'(1,1) NE '(').NOTREG2\n         DC    X'00'                   SPACING AMOUNT\n         AGO   .VCON\n.NOTREG2 DC    AL1(&LINES)             SPACING AMOUNT\n.VCON    ANOP\n&TAG.L   XPRINNRA  &WA,44\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAS": {"ttr": 28166, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\t\\x96\\t\\x96\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 2454, "newlines": 2454, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=AFP1\nDATA A;\n INFILE SERLOG ;\n INPUT @001   TYPE     IB1.\n       @ ;\n       IF TYPE='0001....'B THEN CLASS='MACHINE CHECK      ';\n  ELSE IF TYPE='0010....'B THEN CLASS='CHANNEL CHECK      ';\n  ELSE IF TYPE='0011....'B THEN CLASS='UNIT CHECK (OBR)   ';\n  ELSE IF TYPE='0100....'B THEN CLASS='SOFTWARE ERROR     ';\n  ELSE IF TYPE='0101....'B THEN CLASS='IPL RECORD         ';\n  ELSE IF TYPE='0110....'B THEN CLASS='DDR RECORD         ';\n  ELSE IF TYPE='0111....'B THEN CLASS='MISSING INTERRUPT  ';\n  ELSE IF TYPE='1000....'B THEN CLASS='SYSTEM TERMINATION ';\n  ELSE IF TYPE='1001....'B THEN CLASS='NON-STANDARD MDR   ';\n  ELSE IF TYPE='1010....'B THEN CLASS='MACHINE CHECK FRAME';\n  ELSE IF TYPE='1011....'B THEN CLASS='CHANNEL CHECK FRAME';\n\nPROC FREQ DATA=WORK.A;\n TABLES CLASS;\n\nDATA OBR (KEEP=DATE TIME JOBID CCW DEVTYPE PCUA SENSE LEVEL DATE1)\n     SFT (KEEP=DATE TIME JOBID PROGRAM ABEND LMOD CSECT DATE1)\n ;\n INFILE SERLOG MISSOVER;\n INPUT @001   TYPE     IB1.\n       @ ;\n\n  IF TYPE='0011....'B THEN LINK TYPE03;\n  IF TYPE='0100....'B THEN LINK TYPE04;\n  RETURN;\n  TYPE03:\n  IF TYPE='0011.11.'B THEN DELETE;  /* VTAM OBR RECORD. */\n  INPUT @003   SWITCHES IB2.\n        @ ;\n  IF SWITCHES='..........0.....'B ;\n  IF SWITCHES='.............1..'B THEN DELETE; /* VOLUME DEMOUNT. */\n  IF SWITCHES='.........1......'B THEN LEVEL='TEMP'; ELSE LEVEL='PERM';\n  INPUT @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @033   CCW      $PHEX8.\n        @049   DEVDEPC  IB1.\n        @053   DEVT1    $PHEX5.\n        @057   SDRCNT   IB1.\n        @058   PCUA1    $PHEX4.\n        @063   SENSCNT  IB2.\n        @ ;\n  SENSOFF=65+(DEVDEPC*8)+SDRCNT;\n  INPUT @SENSOFF SENSE1  $PHEX5.\n        @ ;\n  YY = ROUND(DATE1,1000);\n  DDD = DATE1-YY;\n  YY = YY/1000;\n  DATE = DATEJUL(1000*YY+DDD);\n  PCUA=SUBSTR(PCUA1,4,3);\n  DEVTYPE=SUBSTR(DEVT1,1,8);\n  SENSE=SUBSTR(SENSE1,1,8);\n  IF SUBSTR(SENSE,1,2)='40' & DEVTYPE='1000080E' THEN DELETE;\n  IF DEVTYPE='80062023' THEN DEVTYPE='3380  ';\n  IF DEVTYPE='10800811' THEN DEVTYPE='4245  ';\n  IF DEVTYPE='0000080F' THEN DEVTYPE='3825  ';\n  IF DEVTYPE='78048080' THEN DEVTYPE='3490  ';\n  IF DEVTYPE='78008000' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='78008080' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='32108003' THEN DEVTYPE='3420  ';\n  IF DEVTYPE='1000080E' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='10800809' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='1200100B' THEN DEVTYPE='3286  ';\n  IF DEVTYPE='12801009' THEN DEVTYPE='3277  ';\n  IF DEVTYPE='12201009' THEN DEVTYPE='3278  ';\n  IF DEVTYPE='10014100' THEN DEVTYPE='CTCA  ';\n  IF DEVTYPE='3010200E' THEN DEVTYPE='3380  ';\n  OUTPUT OBR;\n  RETURN;\n\n  TYPE04:\n  INPUT @004   HDRDS    IB1.\n        @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @037   ABEND    $PHEX4.\n        @121   PROGRAM  $8.\n        @325   LMOD     $8.\n        @333   CSECT    $8.\n        @ ;\n  IF HDRDS='1.......'B THEN DELETE;\n  IF HDRDS='.1......'B THEN DELETE;\n  YY = ROUND(DATE1,1000);\n  DDD = DATE1-YY;\n  YY = YY/1000;\n  DATE = DATEJUL(1000*YY+DDD);\n  OUTPUT SFT;\n  RETURN;\n\n\nPROC SUMMARY DATA=WORK.OBR NWAY;\n CLASS DEVTYPE DATE;\n ID DATE;\n VAR TIME;\n OUTPUT OUT=S N=COUNT;\nPROC SORT; BY DEVTYPE DATE;\nPROC PLOT;\n PLOT COUNT*DATE; BY DEVTYPE;\n FORMAT DATE DATE. ;\n\n./       ADD   NAME=GTF\nOPTIONS OBS=MAX;\nDATA SVC;\n     INFILE IN MISSOVER            LENGTH=LRECL ;\n     INPUT    @1   RECTYPE  PIB2. @ ;\n     IF RECTYPE = '1111111100000001'B THEN DO ;*(SVC COMPREHENSIVE) ;\n        INPUT @3   CLOCK    TODSTAMP8.\n              @11  EVENT    PIB2.\n              @13  ASCB     PIB4.\n              @17  CPUID    PIB2.\n              @19  JOBNAME  $CHAR8.\n              @27  SVCOPSW  PIB8.\n              @29  SVC_NO   PIB2.\n              @35  TCB_OLD  PIB4.\n              @39  CDENAME  $CHAR8.\n              @47  REG15    PIB4.\n              @51  REG0     PIB4.\n              @55  REG1     PIB4.\n              @                    ;\n              TIME=TIMEPART(CLOCK) ;\n\n        FORMAT RECTYPE HEX4. ASCB HEX8. CPUID HEX4.\n\n        TIME TIME12. EVENT TCB_OLD SVCOPSW REG1 REG0 REG15 HEX4. ;\n        END;\n\n\n\n        IF SVC_NO = 6 THEN DO ;\n           TYPE='LINK  ' ;\n           INPUT @59 EP_NAME $CHAR8.;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO = 7 THEN DO ;\n           TYPE='XCTL  ' ;\n           INPUT @59 EP_NAME $CHAR8.;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n\n        IF SVC_NO = 8 THEN DO ;\n           TYPE='LOAD  ' ;\n           INPUT @59 EP_NAME $CHAR8. ;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO = 9 THEN DO ;\n           TYPE='DELETE' ;\n           INPUT @59 EP_NAME $CHAR8. ;\n           DELETE ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO =18 THEN DO ;\n           TYPE='BLDL  ' ;\n           INPUT @64 EP_NAME $CHAR8. ;\n           DELETE ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO =42 THEN DO ;\n           TYPE='ATTACH' ;\n           INPUT +29 EP_NAME $CHAR8. ;\n           OUTPUT ;\n           RETURN ;\n        END ;\n        DELETE;\n\n\n\nPROC SUMMARY NWAY;\n CLASS EP_NAME;\n OUTPUT OUT=S;\n\nPROC PRINT; ID EP_NAME;\n./       ADD   NAME=HLIST\nPROC FORMAT;\n VALUE TYPEFMT\n  0='DATA SET (CODE D)      '\n  1='USER (CODE U)          '\n  2='FREE SPACE ON ML1      '\n  4='VOLUME (CODE V)        '\n  7='JES3 VOLUME ALLOC COUNT'\n 16='STATISTICS OR CONTROL  '\n 17='MIGRATED COPY NAME     '\n 18='VSAM DATASET ASSOC.    '\n ;\nDATA A;\n INFILE MCDS VSAM BUFND=16 BUFNI=16 ;\n INPUT @045 MCHLEN  IB2.\n       @047 MCKTYPE IB1.\n         ;\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n FORMAT MCKTYPE TYPEFMT. ;\n TITLE COUNTS OF LOGICAL RECORD TYPES ON THE MCDS;\n\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n WEIGHT MCHLEN;\n FORMAT MCKTYPE TYPEFMT. ;\n TITLE PROPORTIONS OF THE TOTAL SPACE TAKEN BY MCDS RECORD TYPES;\n\nPROC DELETE DATA=WORK.A;\n\nDATA ML1 ML2\n MCV\n (KEEP=\n MCVVSN MCVMINAG MCVNMDS MCVNTRKM MCVFRAG\n VOLTYPE FULL AUTOMIGR AUTOBKUP EMPTY SINGLE\n )\n ;\n\n INFILE MCDS VSAM BUFND=16 BUFNI=16 ;\n\n INPUT\n      @001 TYPE       PIB1.\n      @  ;\n IF TYPE=04X THEN DO;\n    INPUT\n         @002 MCVVSN       $6.\n         @073 MCVFLGS      PIB2.\n         @123 MCVMINAG     PIB2.\n         @125 MCVNMDS      PIB2.\n         @127 MCVNTRKM     PIB2.\n         @129 MCVFRAG      PIB2.\n         @135 MCV3480F     PIB1.\n         @  ;\n\n    IF MCVFLGS='10..............'B\n    THEN VOLTYPE='PRIMARY';\n    IF MCVFLGS='00..............'B\n    THEN VOLTYPE='MIGR L1';\n    IF MCVFLGS='01..............'B\n    THEN VOLTYPE='MIGR L2';\n    IF MCVFLGS='.......1........'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF MCVFLGS='...1............'B\n    THEN AUTOMIGR='NO ';\n    ELSE AUTOMIGR='YES';\n    IF MCVFLGS='......1.........'B\n    THEN AUTOBKUP='YES';\n    ELSE AUTOBKUP='NO ';\n    IF MCVFLGS='..........1.....'B\n    THEN EMPTY='YES';\n    ELSE EMPTY='NO ';\n    IF MCV3480F='1.......'B\n    THEN SINGLE='YES';\n    ELSE SINGLE='NO ';\n    LABEL\n    MCVVSN  ='VOLUME*SERIAL*NUMBER                '\n    MCVMINAG='MINIMUM AGE*SELECTED*FOR MIGRATION  '\n    MCVNMDS ='DATASETS*PROCESSED*LAST MIGRATION   '\n    MCVNTRKM='TRACKS*FREED*LAST MIGRATION         '\n    MCVFRAG ='VOLUME*FRAGMENTATION*INDEX          '\n    VOLTYPE ='VOLUME*TYPE                         '\n    FULL    ='IS VOLUME*FULL?                     '\n    AUTOMIGR='AUTOMATIC*MIGRATION*ALLOWED         '\n    AUTOBKUP='AUTOMATIC*BACKUP*ALLOWED            '\n    EMPTY   ='IS*VOLUME*EMPTY?                    '\n    SINGLE  ='3480*SINGLEFILE*FORMAT?             '\n    ;\n    OUTPUT MCV;\n END;\n INPUT @001 MCDDSN  $44.\n       @045 MCHLEN  IB2.\n       @047 MCKTYPE IB2.\n       @ ;\n IF MCKTYPE=0 THEN DO;\n    INPUT @049 MCHTSLU        TODSTAMP8.\n          @057 MCHTSCR        TODSTAMP8.\n          @065 MCDVSN         $6.\n          @071 MCDFLG1        $CHAR1.\n          @072 MCDFLG2        IB1.\n          @073 MCDCOMPR       IB1.\n          @074 MCDRV          IB3.\n          @077 MCDDLC1     ?? PD4.\n          @081 MCDTLR         IB4.\n          @085 MCDDLR1     ?? PD4.\n          @089 MCDTLU         IB4.\n          @093 MCDDLU      ?? PD4.\n          @097 MCDTMIG        IB4.\n          @101 MCDDMIG1    ?? PD4.\n          @105 MCDDSORG       IB2.\n          @107 MCDBLKSZ       IB2.\n          @109 MCDKEYLN       IB1.\n          @110 MCDRECFM       IB1.\n          @111 MCDDSIND       IB1.\n          @112 MCDHID         $1.\n          @113 MCDSIZE        IB4.\n          @117 MCDSIZEB       IB4.\n          @121 MCDCSZ         IB4.\n          @125 MCDNMIG        IB2.\n          @127 MCDDAYS        IB2.\n          @129 MCDFRVSN       $6.\n          @135 FLASG2         IB1.\n          @136 MCDMCL43       $1.\n          @137 MCDCTID        $4.\n          @141 MCDUCBTY       IB4.\n          @145 MCDTRES        IB4.\n          @149 MCDDRES     ?? PD4.\n          @153 MCDMDEVT       IB4.\n          @157 MCDJDAYS       IB1.\n          @158 MCDJDATE       IB3.\n          @161 MCDJVEXD       IB3.\n          @164 MCDPDEP        IB1.\n          @165 MCDJCT         IB1.\n          @217 MCDEXPD1   ??  PD4.\n          @ ;\n    IF MCDFLG1='1.......'B;\n    IF MCDFLG1='....1...'B THEN SDSP='YES'; ELSE SDSP='NO ';\n    IF MCDFLG1='.....1..'B THEN LEVEL='ML2'; ELSE LEVEL='ML1';\n    I=INDEX(MCDDSN,'.');\n    IF I=0 THEN I=8;\n    HIQUAL=SUBSTR(MCDDSN,1,I-1);\n    I=INDEX(MCDDSN,' ');\n    DO J = 1 TO I;\n       IF SUBSTR(MCDDSN,J,1)='.'\n       THEN LOWQUAL=SUBSTR(MCDDSN,J+1);\n    END;\n    DROP I J;\n    IF MCDDLC1\u00ac=.\n    THEN MCDDLC=PUT(DATEJUL(MCDDLC1),DATE.);\n    ELSE MCDDLC='.';\n    IF MCDDLR1\u00ac=.\n    THEN MCDDLR=PUT(DATEJUL(MCDDLR1),DATE.);\n    ELSE MCDDLR='.';\n    IF MCDDMIG1\u00ac=.\n    THEN MCDDMIG=PUT(DATEJUL(MCDDMIG1),DATE.);\n    ELSE MCDDMIG='.';\n    IF MCDEXPD1\u00ac=.\n    THEN MCDEXPDT=PUT(DATEJUL(MCDEXPDT),DATE.);\n    ELSE MCDEXPDT='.';\n    AGE=TODAY()-DATEJUL(MCDDLR1);\n    FORMAT AGE 3.;\n    IF LEVEL='ML1'\n    THEN DO;\n       IF SDSP='NO'\n       THEN ML1TRKS=CEIL(MCDCSZ/18);\n       ELSE ML1TRKS=MCDCSZ/18;\n    END;\n    ELSE ML1TRKS=0;\n    IF LEVEL='ML1' THEN OUTPUT ML1;\n    IF LEVEL='ML2' THEN OUTPUT ML2;\n END;\n    LABEL\n    HIQUAL  ='HIGH*LEVEL*QUALIFIER                '\n    MCDDSN  ='DATA*SET*NAME                       '\n    MCDDLC  ='CREATION*DATE                       '\n    MCDDLC  ='DATE*LAST*REFERENCED                '\n    MCDDMIG ='DATE*MIGRATED                       '\n    MCDVSN  ='MIGRATION*VOLUME*SERIAL             '\n    MCDFRVSN='VOLUME*MIGRATED*FROM                '\n    SDSP    ='MIGRATED*INTO*SDSP?                 '\n    MCDCOMPR='PERCENT*COMPRESSED                  '\n    MCDSIZE ='ORIGINAL*SIZE*IN TRKS               '\n    ;\n\nPROC PRINT DATA=WORK.MCV SPLIT='*'; ID MCVVSN;\n TITLE PRIMARY AND MIGRATION VOLUMES CONTROLLED BY DFHSM;\n TITLE2 ;\n\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS HIQUAL ;\n VAR MCDCSZ ML1TRKS MCDCOMPR AGE MCDSIZE ;\n OUTPUT OUT=S N(MCDCSZ)=DATASETS SUM(ML1TRKS)=\n MEAN(MCDCOMPR)=AVGCOMPR MEAN(AGE)=AVGAGE\n SUM(MCDSIZE)=ML0TRKS;\n\nDATA S;\n SET S;\n    LABEL\n    AVGAGE  ='AVERAGE*DAYS*UNUSED                 '\n    ML0TRKS ='TRACKS*USED ON*LEVEL 0              '\n    ML1TRKS ='TRACKS*USED ON*LEVEL 1              '\n    AVGCOMPR='AVERAGE*PERCENT*COMPRESSION         '\n    ;\n\nPROC PRINT DATA=WORK.S;\n ID HIQUAL; VAR DATASETS AVGAGE ML0TRKS ML1TRKS AVGCOMPR;\n TITLE SUMMARY OF MIGRATED DATASETS BY HIGH LEVEL QUALIFIER;\n TITLE2 LEVEL 1 ONLY;\n SUM DATASETS ML0TRKS ML1TRKS;\n\n\nPROC SUMMARY DATA=WORK.ML2 NWAY;\n CLASS HIQUAL ;\n VAR MCDCSZ ML1TRKS MCDCOMPR AGE MCDSIZE ;\n OUTPUT OUT=S N(MCDCSZ)=DATASETS SUM(ML1TRKS)=\n MEAN(MCDCOMPR)=AVGCOMPR MEAN(AGE)=AVGAGE\n SUM(MCDSIZE MCDCSZ)=ML0TRKS ML2BLKS;\n\nDATA S;\n SET S;\n    LABEL\n    AVGAGE  ='AVERAGE*DAYS*UNUSED                 '\n    ML0TRKS ='TRACKS*USED ON*LEVEL 0              '\n    ML2TRKS ='TRACKS*USED ON*LEVEL 2              '\n    AVGCOMPR='AVERAGE*PERCENT*COMPRESSION         '\n    ;\n\nPROC PRINT DATA=WORK.S;\n ID HIQUAL; VAR DATASETS AVGAGE ML0TRKS ML2BLKS AVGCOMPR;\n TITLE SUMMARY OF MIGRATED DATASETS BY HIGH LEVEL QUALIFIER;\n TITLE2 LEVEL 2 ONLY;\n SUM DATASETS ML0TRKS ML2BLKS;\n\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS MCDVSN ;\n VAR MCDCSZ;\n OUTPUT OUT=S N=DATASETS SUM=BLOCKS;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;\n TITLE SUMMARY OF MIGRATED DATASETS BY ML1 VOLUME;\n TITLE2 ;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;\n TITLE SUMMARY OF BLOCKS ON ML1 VOLUMES;\n TITLE2 ;\n\n\nPROC SUMMARY DATA=WORK.ML2 NWAY;\n CLASS MCDVSN ;\n VAR MCDCSZ;\n OUTPUT OUT=S N=DATASETS SUM=BLOCKS;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;\n TITLE SUMMARY OF MIGRATED DATASETS BY ML2 VOLUME;\n TITLE2 ;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;\n TITLE SUMMARY OF BLOCKS ON ML2 VOLUMES;\n TITLE2 ;\n\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS SDSP ;\n VAR MCDCSZ;\n OUTPUT OUT=S N=DATASETS SUM=BLOCKS;\n\nPROC CHART DATA=WORK.S;\n VBAR SDSP / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;\n TITLE SUMMARY OF MIGRATED DATASETS BY SDSP VS NOSDSP;\n\nPROC CHART DATA=WORK.S;\n VBAR SDSP / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;\n TITLE SUMMARY OF 2K BLOCKS BY SDSP VS NOSDSP;\n\n\n\nPROC SORT DATA=WORK.ML1; BY DESCENDING ML1TRKS;\n\nOPTIONS OBS=50;\nPROC PRINT UNIFORM DATA=WORK.ML1;\n ID MCDDSN;\n VAR MCDDLC MCDDLR MCDDMIG\n MCDVSN MCDFRVSN SDSP MCDCOMPR MCDSIZE ML1TRKS;\n SUM MCDSIZE ML1TRKS;\n TITLE LISTING OF LARGEST MIGRATED DATASETS ON LEVEL 1;\n\nOPTIONS OBS=MAX;\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS LOWQUAL;\n VAR ML1TRKS MCDCOMPR;\n OUTPUT OUT=S N(MCDCOMPR)=DATASETS SUM(ML1TRKS)=\n MEAN(MCDCOMPR)= ;\n\nDATA S;\n SET S;\n IF DATASETS GT 9 OR ML1TRKS GT 99;\n\nPROC PRINT DATA=WORK.S;\n ID LOWQUAL; VAR DATASETS ML1TRKS MCDCOMPR;\n             SUM DATASETS ML1TRKS;\n TITLE AVERAGE COMPRESSION AMOUNT BY LOWEST LEVEL QUALIFIER;\n\n\n\nPROC UNIVARIATE DATA=WORK.ML1 NOPRINT;\n VAR MCDSIZE;\n OUTPUT OUT=S1 N=DATASETS MEAN=AVGSIZE P90=PCTL90\n P95=PCTL95 P99=PCTL99 MAX=LARGEST ;\n\nPROC PRINT DATA=WORK.S1; ID DATASETS;\n TITLE STATISTICS ON ORIGINAL SIZES OF MIGRATED DATASETS;\n TITLE2 IN TRACKS - LEVEL 1;\n\nPROC UNIVARIATE DATA=WORK.ML2 NOPRINT;\n VAR MCDSIZE;\n OUTPUT OUT=S2 N=DATASETS MEAN=AVGSIZE P90=PCTL90\n P95=PCTL95 P99=PCTL99 MAX=LARGEST ;\n\nPROC PRINT DATA=WORK.S2; ID DATASETS;\n TITLE STATISTICS ON ORIGINAL SIZES OF MIGRATED DATASETS;\n TITLE2 IN TRACKS - LEVEL 2;\n\nPROC FORMAT;\n VALUE BTYPFMT\n  32='DATA SET (CODE B)      '\n  33='DUMP VOLUME            '\n  34='DUMP CLASS             '\n  36='BACKUP VERSION ENTRY   '\n  38='MOVE BACKUP COPY       '\n  39='BACKUP MIGRATED DATASET'\n  40='VOLUME BACKED UP       '\n  41='DUMP GENERATION        '\n  44='BACKUP VOLUME          '\n  48='CONTROL                '\n ;\nDATA A;\n INFILE BCDS VSAM BUFND=16 BUFNI=16 ;\n INPUT @045 MCHLEN  IB2.\n       @047 MCKTYPE IB1.\n         ;\n\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n FORMAT MCKTYPE BTYPFMT. ;\n TITLE COUNTS OF LOGICAL RECORD TYPES ON THE BCDS;\n TITLE2 ;\n\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n WEIGHT MCHLEN;\n FORMAT MCKTYPE BTYPFMT. ;\n TITLE PROPORTIONS OF THE TOTAL SPACE TAKEN BY BCDS RECORD TYPES;\n\n\nDATA\n MCT\n (KEEP=\n MCTVSN MCTDAY MCTTSFBD MCTTSLBD MCTTSLCD\n FULL SINGLE\n )\n MCP\n (KEEP=\n MCPVSN MCPTSLBD MCPTSLBT\n AUTORECL AUTOBKUP VOLTYPE\n )\n ;\n INFILE BCDS VSAM BUFND=16 BUFNI=16 ;\n INPUT\n      @001 TYPE       PIB1.\n      @  ;\n IF TYPE=2CX THEN DO;\n    INPUT\n         @002 MCTVSN       $6.\n         @083 MCTFLGS      PIB2.\n         @105 MCTTSFB1  ?? PD4.\n         @113 MCTTSLB1  ?? PD4.\n         @127 MCTVOLSQ     PIB2.\n         @168 MCTDAY       PIB1.\n         @185 MCTTSLC1  ?? PD4.\n         @  ;\n\n    IF MCTFLGS='.1..............'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF MCTFLGS='.............1..'B\n    THEN SINGLE='YES';\n    ELSE SINGLE='NO ';\n    IF MCTTSFB1\u00ac=.\n    THEN MCTTSFBD=PUT(DATEJUL(MCTTSFB1),DATE.);\n    ELSE MCTTSFBD='.';\n    DROP MCTTSFB1;\n    IF MCTTSLB1\u00ac=.\n    THEN MCTTSLBD=PUT(DATEJUL(MCTTSLB1),DATE.);\n    ELSE MCTTSLBD='.';\n    DROP MCTTSLB1;\n    IF MCTTSLC1\u00ac=.\n    THEN MCTTSLCD=PUT(DATEJUL(MCTTSLC1),DATE.);\n    ELSE MCTTSLCD='.';\n    DROP MCTTSLC1;\n    LABEL\n    MCTVSN  ='BACKUP*VOLUME*SERIAL                    '\n    MCTDAY  ='BACKUP*CYCLE*DAY                        '\n    MCTTSFBD='DATE OF*1ST BKUP*THIS VOL               '\n    MCTTSLBD='DATE OF*LAST BKUP*THIS VOL              '\n    MCTTSLCD='DATE OF*MOST RECENT*CLEANUP             '\n    FULL    ='IS*VOLUME*FULL?                         '\n    SINGLE  ='3480*SINGLEFILE*FORMAT?                 '\n     ;\n    OUTPUT MCT;\n END;\n\n IF TYPE=28X THEN DO;\n    INPUT\n         @002 MCPVSN       $6.\n         @073 MCPFLGS      PIB2.\n         @077 MCPTSLBH     PK1.\n         @078 MCPTSLBM     PK1.\n         @079 MCPTSLBS     PK2.2\n         @081 MCPTSLB1  ?? PD4.\n         @ ;\n    IF MCPTSLB1\u00ac=.\n    THEN MCPTSLBD=PUT(DATEJUL(MCPTSLB1),DATE.);\n    ELSE MCPTSLBD='.';\n    DROP MCPTSLB1;\n    MCPTSLBT=HMS(MCPTSLBH,MCPTSLBM,MCPTSLBS);\n    FORMAT MCPTSLBT TIME10.2 ;\n    IF MCPFLGS='1...............'B\n    THEN VOLTYPE='PRIMARY  ';\n    ELSE VOLTYPE='MIGRATION';\n    IF MCPFLGS='.......1........'B\n    THEN AUTOBKUP='YES';\n    ELSE AUTOBKUP='NO ';\n    IF MCPFLGS='......1.........'B\n    THEN AUTORECL='NO ';\n    ELSE AUTORECL='YES';\n    LABEL\n    MCPVSN  ='SERIAL OF*VOLUME*BACKED UP           '\n    MCPTSLBD='DATE OF*MOST RECENT*BACKUP           '\n    MCPTSLBT='TIME OF*MOST RECENT*BACKUP           '\n    AUTORECL='AUTOMATIC*RECALL*ALLOWED             '\n    AUTOBKUP='AUTOMATIC*BACKUP*ALLOWED             '\n    VOLTYPE ='VOLUME*TYPE                          '\n    ;\n    OUTPUT MCP;\n END;\n\nPROC PRINT DATA=WORK.MCT SPLIT='*'; ID MCTVSN;\nTITLE VOLUMES CONTAINING BACKUP VERSIONS;\nTITLE2 ;\n\nPROC PRINT DATA=WORK.MCP SPLIT='*'; ID MCPVSN;\nTITLE VOLUMES FROM WHICH BACKUPS HAVE BEEN TAKEN;\nTITLE2 ;\n\nDATA TTOC\n     (KEEP=VOLSER TYPE DATASETS FULL VSAM VALID\n     PREVVOL NEXTVOL\n     BLOCKS PSWD RCYCLMSG\n     );\n INFILE OCDS VSAM BUFND=16 BUFNI=16 EOF=EOFOCDS;\n INPUT @001 TTCKEY  $44.\n       @045 MCHLEN  IB2.\n       @047 MCKTYPE IB2.\n       @049 MCHTSLU        TODSTAMP8.\n       @057 MCHTSCR        TODSTAMP8.\n       @065 TTCHSTID       $1.\n       @066 TTCFFLGS       IB2.\n       @069 TTCUNIT        $8.\n       @077 TTCNUM         IB2.\n       @079 TTCDSNUM       IB2.\n       @081 TTCTBLK        IB4.\n       @085 TTCVBLK        IB4.\n       @089 TTCPREVL       $6.\n       @095 TTCSUCVL       $6.\n       @101 TTCLFBID       IB4.\n       @105 TTCFFBID       IB4.\n       @ ;\n RETAIN\n           VOLSER TYPE DATASETS FULL VSAM VALID\n     PREVVOL NEXTVOL\n     BLOCKS PSWD RCYCLMSG\n ;\n IF SUBSTR(TTCKEY,12,4)='0000'\n THEN DO;\n    OUTPUT;\n    VALID=0;\n    VSAM=0;\n    DATASETS=0;\n    BLOCKS=0;\n    VOLSER=SUBSTR(TTCKEY,5,6);\n    FULL=REPEAT(' ',3);\n    PREVVOL=TTCPREVL;\n    NEXTVOL=TTCSUCVL;\n    IF TTCFFLGS='1...............'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF TTCFFLGS='...1............'B\n    THEN PSWD='YES';\n    ELSE PSWD='NO ';\n    IF TTCFFLGS='....1...........'B\n    THEN RCYCLMSG='YES';\n    ELSE RCYCLMSG='NO ';\n    IF SUBSTR(TTCKEY,2,2) ='SP' THEN TYPE='SPILL       ';\n    IF SUBSTR(TTCKEY,2,2) ='UN' THEN TYPE='UNASSIGNED  ';\n    IF SUBSTR(TTCKEY,2,2) ='L2' THEN TYPE='LEVEL 2     ';\n    IF SUBSTR(TTCKEY,2,2)>='00' THEN TYPE='DAILY BACKUP';\n END;\n DATASETS=DATASETS+TTCDSNUM;\n DO COL=157 TO MCHLEN BY 56;\n    INPUT @COL              TTCDSN        $44.\n          @COL+044          TTCNBLKS      IB4.\n          @COL+048          TTCDLR     ?? PD3.\n          @COL+052          TTCEFLGS      IB1.\n          @COL+053          TTCEXPDT   ?? PD3.\n          @ ;\n    IF TTCEFLGS='.1......'B THEN VALID=VALID+1;\n    IF TTCEFLGS='1.......'B THEN VSAM=VSAM+1;\n    BLOCKS=BLOCKS+TTCNBLKS;\n END;\n RETURN;\n EOFOCDS: OUTPUT;\n\nDATA TTOC;\n SET TTOC;\n IF DATASETS=. THEN DELETE;\n\nPROC PRINT; ID VOLSER;\n SUM DATASETS VALID BLOCKS;\n TITLE TAPE VOLUMES IN USE BY DFHSM;\n./       ADD   NAME=HSMFSR\nPROC FORMAT;\n VALUE FSRFMT\n  1='MIGRATE L0->L1 '\n  2='MIGRATE L1->L2 '\n  3='MIGRATE L0->L2 '\n  4='RECALL L1->L0  '\n  5='RECALL L2->L0  '\n  6='HDELETE        '\n  7='DAILY BACKUP   '\n  8='SPILL BACKUP   '\n  9='RECOVERY       '\n 10='RECYCLE BACKVOL'\n 11='HBDELETE       '\n 12='RECYCLE ML2    '\n 13='VOLUME DUMP    '\n 14='RESTORE        '\n ;\n\nDATA FSR;\n  INFILE SMF STOPOVER LENGTH=LENGTH COL=COL RECFM=VBS LRECL=32756\n             JFCB=SMFJFCB START=BEGINCPY;\n  LENGTH PREVTIME SMFTIME 8 ID MVSXA OFFSMF 2 ;\n  FORMAT\n         MVSXAFLG                   HEX2.\n         SMFJFCB                 $HEX200.\n         RUNDATE                 MMDDYY8.\n         PREVTIME SMFTIME     DATETIME19.2\n         SYSTEM                       $4.\n  ;\n  IF OFFSMF=. THEN DO;\n     IF SUBSTR(SMFJFCB,100,1)='....1...'B  THEN OFFSMF=4;\n     ELSE OFFSMF=0;\n     BEGINCPY=OFFSMF+1;\n     RETAIN BEGINCPY OFFSMF RUNDATE SMFTIME SYSTEM;\n     RUNDATE=TODAY();\n  END;\n  PREVTIME=SMFTIME;\n  PREVSYS = SYSTEM;\n  IF OFFSMF=4 THEN DO;\n    INPUT @5 EOFSTRNG $CHAR7. @;\n    IF EOFSTRNG=:'SMF EOF'\n    OR EOFSTRNG=:'SMFEOF' THEN STOP;\n  END;\n  INPUT @1+OFFSMF MVSXAFLG     PIB1.\n        @2+OFFSMF ID           PIB1.\n        @3+OFFSMF SMFTIME SMFSTAMP8.\n       @11+OFFSMF SYSTEM         $4.\n  @;\n  MVSXA=0;\n  IF MVSXAFLG='.....1..'B THEN MVSXA=1;\n  IF ID=241;\n\n  INPUT @015+OFFSMF  FSRJBN      $8.\n        @023+OFFSMF  FSRRST      SMFSTAMP8.\n        @031+OFFSMF  FSRUID      $8.\n        @039+OFFSMF  FSRTYPE     PIB1.\n        @041+OFFSMF  FSRDSN      $44.\n        @085+OFFSMF  FSRTVOL     $6.\n        @091+OFFSMF  FSRDEVT     PIB4.\n        @095+OFFSMF  FSRFVOL     $6.\n        @105+OFFSMF  FSRRC       PIB4.\n        @109+OFFSMF  FSRREAS     PIB4.\n        @113+OFFSMF  FSRABCC     PIB4.\n        @117+OFFSMF  FSRDARC     PIB2.\n        @119+OFFSMF  FSRGRP      $8.\n        @127+OFFSMF  FSRRACF     IB1.\n        @129+OFFSMF  FSRRQN      IB4.\n        @133+OFFSMF  FSRDATR     PD4.\n        @137+OFFSMF  FSRTIMRH    PK1.\n        @138+OFFSMF  FSRTIMRM    PK1.\n        @139+OFFSMF  FSRTIMRS    PK2.2\n        @141+OFFSMF  FSRTIMSH    PK1.\n        @142+OFFSMF  FSRTIMSM    PK1.\n        @143+OFFSMF  FSRTIMSS    PK2.2\n        @145+OFFSMF  FSRTIMEH    PK1.\n        @146+OFFSMF  FSRTIMEM    PK1.\n        @147+OFFSMF  FSRTIMES    PK2.2\n        @149+OFFSMF  FSRTIMAH    PK1.\n        @150+OFFSMF  FSRTIMAM    PK1.\n        @151+OFFSMF  FSRTIMAS    PK2.2\n        @153+OFFSMF  FSRDLU   ?? PD4.\n        @157+OFFSMF  FSRDLM   ?? PD4.\n        @161+OFFSMF  FSRBYTR     IB4.\n        @165+OFFSMF  FSRBYTW     IB4.\n        @169+OFFSMF  FSRTRKR     IB2.\n        @171+OFFSMF  FSRTRKW     IB2.\n        @173+OFFSMF  FSRDORG     PIB2.\n        @175+OFFSMF  FSRFLG2     PIB2.\n        @ ;\n IF FSRFLG2='....1...........'B\n THEN INPUT\n        @101+OFFSMF  FSRDATE  ?? PD4.\n        @ ;\n ELSE INPUT\n        @101+OFFSMF  FSRGEN      PIB4.\n        @ ;\n INPUT\n        @181+OFFSMF  FSRAGE      IB2.\n        @183+OFFSMF  FSRRECFM    IB1.\n        @184+OFFSMF  FSROPTCD    IB1.\n        @237+OFFSMF  FSRNENT1    IB2.\n        @239+OFFSMF  FSRNENT2    IB2.\n        @ ;\n FSRTIMR=HMS(FSRTIMRH,FSRTIMRM,FSRTIMRS);\n FORMAT FSRTIMR TIME8. ;\n DROP FSRTIMRH FSRTIMRM FSRTIMRS ;\n FSRTIMS=HMS(FSRTIMSH,FSRTIMSM,FSRTIMSS);\n FORMAT FSRTIMS TIME8. ;\n DROP FSRTIMSH FSRTIMSM FSRTIMSS ;\n FSRTIME=HMS(FSRTIMEH,FSRTIMEM,FSRTIMES);\n FORMAT FSRTIME TIME8. ;\n DROP FSRTIMEH FSRTIMEM FSRTIMES ;\n FSRTIMA=HMS(FSRTIMAH,FSRTIMAM,FSRTIMAS);\n FORMAT FSRTIMA TIME8. ;\n DROP FSRTIMAH FSRTIMAM FSRTIMAS ;\n DURATION=FSRTIME-FSRTIMR;\n FORMAT DURATION TIME8. ;\n WAITING=FSRTIMS-FSRTIMR;\n FORMAT WAITING TIME8. ;\n PENDING=FSRTIMA-FSRTIMR;\n FORMAT PENDING TIME8. ;\n FUNCTION=PUT(FSRTYPE,FSRFMT.);\n DATE=PUT(DATEPART(SMFTIME),DATE.);\n IF FSRTYPE=1 OR FSRTYPE=3\n THEN DO;\n    L0VOL=FSRFVOL;\n    L1VOL=FSRTVOL;\n    L0BYTES=FSRBYTR;\n    L1BYTES=FSRBYTW;\n    L0TRKS=FSRTRKR;\n    L1TRKS=FSRTRKW;\n END;\n IF FSRTYPE=4\n THEN DO;\n    L0VOL=FSRTVOL;\n    L1VOL=FSRFVOL;\n    L0BYTES=FSRBYTW;\n    L1BYTES=FSRBYTR;\n    L0TRKS=FSRTRKW;\n    L1TRKS=FSRTRKR;\n END;\n  LABEL\n  FSRDSN  ='DATASET*NAME                            '\n  FUNCTION='DFHSM*OPERATION*TYPE                    '\n  FSRTIMR ='TIME OF*USER''S*REQUEST                 '\n  FSRTVOL ='RECEIVING*VOLUME*SERIAL                 '\n  FSRFVOL ='ORIGINAL*VOLUME*SERIAL                  '\n  DURATION='TIME TAKEN*TO PROCESS*REQUEST           '\n  WAITING ='TIME REQUEST*WAS QUEUED*BY DFHSM        '\n  PENDING ='MOUNT*PENDING*TIME                      '\n  FSRRC   ='MWE*RETURN*CODE                         '\n  L0VOL   ='PRIMARY*VOLUME*SERIAL                   '\n  L1VOL   ='LEVEL 1*MIGRATION*VOLUME                '\n  L0BYTES ='BYTES*TRANSFERRED*ON PRIMARY            '\n  L0TRKS  ='TRACKS*TRANSFERRED*ON PRIMARY           '\n  L1BYTES ='BYTES*TRANSFERRED*ON LEVEL 1            '\n  L1TRKS  ='TRACKS*TRANSFERRED*ON LEVEL 1           '\n  ;\n\nPROC SORT; BY DATE FSRTIMR;\n\n\nPROC PRINT SPLIT='*';\n ID FSRDSN;\n VAR FSRJBN FUNCTION FSRTIMR\n FSRTVOL FSRFVOL DURATION WAITING FSRRC;\n BY DATE;\n\nPROC SORT; BY FUNCTION;\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS FSRRC;\n BY FUNCTION;\n VAR FSRAGE;\n OUTPUT OUT=S N=COUNT;\n\nPROC PRINT DATA=WORK.S;\n ID FSRRC; VAR COUNT; BY FUNCTION;\n\nPROC DELETE DATA=WORK.S;\n\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS FUNCTION;\n VAR DURATION WAITING;\n OUTPUT OUT=S MEAN(DURATION WAITING)=AVGRESP AVGQUEUE\n              MAX(DURATION WAITING)=MAXRESP MAXQUEUE\n              N=COUNT ;\n  LABEL\n  AVGRESP ='AVERAGE*SERVICE*TIME                    '\n  MAXRESP ='MAXIMUM*SERVICE*TIME                    '\n  AVGQUEUE='AVERAGE*QUEUE*TIME                      '\n  MAXQUEUE='MAXIMUM*QUEUE*TIME                      '\n  COUNT   ='TIMES*FUNCTION*EXECUTED                 '\n  ;\n\nPROC PRINT DATA=WORK.S SPLIT='*';\n ID FUNCTION;\n VAR COUNT AVGRESP MAXRESP AVGQUEUE MAXQUEUE;\n FORMAT AVGRESP MAXRESP AVGQUEUE MAXQUEUE TIME8. ;\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS DATE L1VOL;\n VAR L1BYTES L1TRKS;\n OUTPUT OUT=S SUM= ;\n\nPROC PRINT SPLIT='*';\n ID L1VOL; VAR L1BYTES L1TRKS; BY DATE;\n\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS DATE L0VOL;\n VAR L0BYTES L0TRKS;\n OUTPUT OUT=S SUM= ;\n\nPROC PRINT SPLIT='*';\n ID L0VOL; VAR L0BYTES L0TRKS; BY DATE;\n\nPROC SORT DATA=WORK.FSR; BY FUNCTION;\n\nPROC CHART DATA=WORK.FSR;\n VBAR DURATION / TYPE=FREQ NOSPACE\n MIDPOINTS=0.1 0.25 0.5 0.75 1.0 1.5 2 3 4 5 7.5 10 15 30 60 90 120 180\n 240 300 600 1200 1800;\n BY FUNCTION;\n\nPROC CHART DATA=WORK.FSR;\n VBAR FSRAGE / TYPE=FREQ NOSPACE DISCRETE;\n BY FUNCTION;\n\nPROC CHART DATA=WORK.FSR;\n VBAR PENDING / TYPE=FREQ NOSPACE DISCRETE;\n BY FUNCTION;\n\n./       ADD   NAME=HSMLOG\nPROC FORMAT;\n VALUE FSRFMT\n  1='MIGRATE L0->L1         '\n  2='MIGRATE L1->L2         '\n  3='MIGRATE L0->L2         '\n  4='RECALL L1->L0          '\n  5='RECALL L2->L0          '\n  6='DELETE MIGRATED DATASET'\n  7='DAILY BACKUP           '\n  8='SPILL BACKUP           '\n  9='RECOVERY               '\n 10='RECYCLE BACKUP VOLUME  '\n 11='DATA SET DELETION      '\n 12='RECYCLE ML2 VOLUME     '\n 13='FULL VOLUME DUMP       '\n 14='VOLUME/DATASET RESTORE '\n ;\n\n VALUE MWEFMT\n  0='RETURN THE QCT POINTER       '\n  1='START UP DFHSM               '\n  2='SHUTDOWN DFHSM               '\n  3='RECALL A DATASET             '\n  4='UNUSED                       '\n  5='RECOVER A DATASET OR VOLUME  '\n  6='MIGRATE A DATASET OR VOLUME  '\n  7='BACKUP A DATASET OR VOLUME   '\n  8='READ A CONTROL DATASET RECORD'\n  9='PROCESS COMMAND TEXT         '\n 10='POST AN MWE COMPLETE         '\n 11='PURGE THE MWE                '\n 12='DELETE A MIGRATED DATASET    '\n ;\n\n VALUE LOGFMT\n  1='DFHSM STARTUP                         '\n  2='OPERATOR COMMAND RECEIVED             '\n  3='OUTPUT MESSAGE TO OPERATOR            '\n  4='MWE RECEIVED BY ARCCTL                '\n  5='RECALL OR DELETION STARTED            '\n  6='RECALL OR DELETION ENDED              '\n  7='MIGRATION STARTED                     '\n  8='MIGRATION ENDED                       '\n  9='ARCERP PROCESSING PERFORMED           '\n 10='SUBTASK ABNORMAL END                  '\n 11='MWE RECEIVED BY MIGRATION SUBTASK     '\n 12='DFHSM SHUTDOWN                        '\n 13='MWE COMPLETED                         '\n 14='STATISTICS RECORD                     '\n 15='CONTROL DATASET UPDATE OR NEW ENTRY   '\n 16='CONTROL DATASET ENTRY DELETED         '\n 17='BACKUP OF DATASET STARTED             '\n 18='BACKUP OF DATASET ENDED               '\n 19='RECOVERY OF BACKUP VERSION STARTED    '\n 20='RECOVERY OF BACKUP VERSION ENDED      '\n 21='DATASET DELETION OR RETIREMENT STARTED'\n 22='DELETION ENDED                        '\n 23='RECYCLE STARTED                       '\n 24='RECYCLE ENDED                         '\n ;\nDATA OPERATNS(KEEP=DATE TIME FUNCTION UID DSNAME VSN RC REAS\n                   KBYTES)\n     CMDLOG(KEEP=DATE TIME UID COMMAND)\n     MSGLOG(KEEP=DATE TIME TO TEXT)\n     DSR   (KEEP=DATE TIME DSRIPL DSRABEND DSRSHUT DSRNMWE DSREJST\n               DSREVENT         DSRNVMG DSRNVBU\n               PL1NDS PL1NTRKR PL1NTRKW\n               PL1NBYTR PL1NBYTW PL1NDSF PL1NVOL PL1NSYS PL1TAGE\n               PL1TTINQ PL1TTWV PL1TTINP PL1TTOT\n               L1PNDS L1PNTRKR L1PNTRKW\n               L1PNBYTR L1PNBYTW L1PNDSF L1PNVOL L1PNSYS L1PTAGE\n               L1PTTINQ L1PTTWV L1PTTINP L1PTTOT\n     )\n     ;\n INFILE HSMLOG ;\n INPUT  @1   MRECL     IB2.\n  @ ;\n I = 3;\n DO WHILE (I <= MRECL);\n  MWEFUNC=.;\n  MWEDSN=REPEAT(' ',44);\n  MWEUID=REPEAT(' ',8);\n  UID=REPEAT(' ',8);\n  VSN=REPEAT(' ',6);\n  DATE=.;\n  TIME=.;\n  FUNCTION=REPEAT(' ',38);\n  DSNAME=REPEAT(' ',44);\n  INPUT\n        @I    MLOGL     IB2.\n        @I+2  MLOGID    IB1.\n        @I+3  MLOGFLGS  IB1.\n        @I+4  MLOGJUL   PD4.\n        @I+8  MLOGHH    PK1.\n        @I+9  MLOGMM    PK1.\n        @I+10 MLOGSS    PK1.\n        @I+11 MLOGTT    PK1.\n     @ ;\n  DATE=DATEJUL(MLOGJUL);\n  TIME=HMS(MLOGHH,MLOGMM,MLOGSS);\n  IF MLOGID=03 THEN LINK ID03;\n  IF MLOGID=04 THEN LINK ID04;\n  IF MLOGID=06 THEN LINK ID06;\n  IF MLOGID=08 THEN LINK ID06;\n  IF MLOGID=14 THEN LINK ID14;\n  I = I+MLOGL;\n END;\n RETURN;\n ID03: /* MESSAGE TEXT.          */\n INPUT @I+16   TO       $8.\n       @ ;\n INPUT @I+24   TEXTL    IB1.\n       @ ;\n TEXTL=TEXTL-1;\n INPUT @I+25   MSGTEXT  $VARYING132. TEXTL\n       @ ;\n TEXT=PUT(MSGTEXT,$110.);\n OUTPUT MSGLOG;\n RETURN;\n ID04: /* ARCCTL RECEIVES MWE.   */\n INPUT @I+12   MWEFWD   IB4.\n       @I+16   MWEBWD   IB4.\n       @I+20   MWESPN   IB1.\n       @I+21   MWELEN   IB3.\n       @I+24   MWEFSR   IB4.\n       @I+28   MWETSTIM IB4.\n       @I+32   MWETSDAT PD4.\n       @I+36   MWEFUNC  IB1.\n       @I+40   MWEUID   $8.\n       @ ;\n IF MWEFUNC\u00ac=9 THEN RETURN;\n INPUT @I+152  MWECMDL  IB2.\n       @ ;\n MWECMDL=MWECMDL-4;\n INPUT @I+156  MWECMDT  $VARYING80. MWECMDL\n       @ ;\n COMMAND=PUT(MWECMDT,$80.);\n UID=MWEUID;\n OUTPUT CMDLOG;\n RETURN;\n ID06: /* RECALL/DELETE ENDED. */\n INPUT @I+30   FSRJBN   $8.\n       @I+54   FSRTYPE  IB1.\n       @I+56   FSRDSN   $44.\n       @I+100  FSRTVOL  $6.\n       @I+110  FSRFVOL  $6.\n       @I+120  FSRRC    IB4.\n       @I+124  FSRREAS  IB4.\n       @I+176  FSRBYTR  IB4.\n       @I+180  FSRBYTW  IB4.\n       @ ;\n FUNCTION=PUT(FSRTYPE,FSRFMT.);\n UID=FSRJBN;\n DSNAME=FSRDSN;\n IF FSRTYPE=4 OR FSRTYPE=5 OR FSRTYPE=9\n THEN VSN=FSRTVOL;\n ELSE VSN=FSRFVOL;\n RC=FSRRC;\n REAS=FSRREAS;\n KBYTES=(FSRBYTR+FSRBYTW)/1024;\n OUTPUT OPERATNS;\n RETURN;\n ID14: /* STATISTICS RECORD. */\n INPUT @I+12   DSRKEY   $44.\n       @ ;\n IF SUBSTR(DSRKEY,2,3)\u00ac='DSR' THEN RETURN;\n INPUT @I+076  DSRIPL   IB4.\n       @I+080  DSRABEND IB4.\n       @I+084  DSRSHUT  IB4.\n       @I+088  DSRNMWE  IB4.\n       @I+096  DSREJST1 IB4.\n       @I+112  DSREVENT IB4.\n       @I+120  DSRNVMG  IB2.\n       @I+124  DSRNVBU  IB2.\n       @I+196  PL1NDS   IB2.\n       @I+204  PL1NTRKR IB4.\n       @I+208  PL1NTRKW IB4.\n       @I+212  PL1NBYTR IB4.\n       @I+216  PL1NBYTW IB4.\n       @I+220  PL1NDSF  IB2.\n       @I+222  PL1NVOL  IB2.\n       @I+224  PL1NSYS  IB2.\n       @I+226  PL1TAGE  IB2.\n       @I+228  PL1TTINQ IB4.\n       @I+232  PL1TTWV  IB4.\n       @I+236  PL1TTINP IB4.\n       @I+240  PL1TTOT  IB4.\n       @I+192+196 L1PNDS   IB2.\n       @I+192+204 L1PNTRKR IB4.\n       @I+192+208 L1PNTRKW IB4.\n       @I+192+212 L1PNBYTR IB4.\n       @I+192+216 L1PNBYTW IB4.\n       @I+192+220 L1PNDSF  IB2.\n       @I+192+222 L1PNVOL  IB2.\n       @I+192+224 L1PNSYS  IB2.\n       @I+192+226 L1PTAGE  IB2.\n       @I+192+228 L1PTTINQ IB4.\n       @I+192+232 L1PTTWV  IB4.\n       @I+192+236 L1PTTINP IB4.\n       @I+192+240 L1PTTOT  IB4.\n       @ ;\n DSREJST1=DSREJST1/1000;\n HH=DSREJST1/(60*60);\n MM=(DSREJST1/60)-(HH*60);\n SS=DSREJST1-((MM*60)+(HH*60*60));\n DSREJST=HMS(HH,MM,SS);\n OUTPUT DSR;\n RETURN;\n\nPROC SORT DATA=WORK.OPERATNS; BY FUNCTION DATE TIME;\n\nPROC PLOT DATA=WORK.OPERATNS;\n BY FUNCTION DATE;\n PLOT KBYTES*TIME;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n\nPROC SUMMARY DATA=WORK.OPERATNS;\n CLASS FUNCTION DATE;\n VAR TIME;\n OUTPUT OUT=S N(TIME)=COUNT;\n\nPROC PRINT DATA=WORK.S;\n ID FUNCTION; VAR DATE COUNT;\n FORMAT DATE DATE. ;\n\n/*\n\nPROC PRINT  DATA=WORK.OPERATNS; ID DATE;\n VAR TIME FUNCTION RC REAS UID VSN DSNAME;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n\nPROC PRINT  DATA=WORK.CMDLOG; ID UID;\n VAR DATE TIME COMMAND;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n */\n\n/*\nPROC SORT DATA=WORK.MSGLOG; BY DATE;\n\nPROC PRINT  DATA=WORK.MSGLOG; ID TIME;\n BY DATE;\n VAR TO TEXT;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n */\n\nPROC PRINT  DATA=WORK.DSR;    ID DATE;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n FORMAT DSREJST TIME. ;\n./       ADD   NAME=LOGREC\nDATA A;\n INFILE SERLOG ;\n INPUT @001   TYPE     IB1.\n       @ ;\n       IF TYPE='0001....'B THEN CLASS='MACHINE CHECK      ';\n  ELSE IF TYPE='0010....'B THEN CLASS='CHANNEL CHECK      ';\n  ELSE IF TYPE='0011....'B THEN CLASS='UNIT CHECK (OBR)   ';\n  ELSE IF TYPE='0100....'B THEN CLASS='SOFTWARE ERROR     ';\n  ELSE IF TYPE='0101....'B THEN CLASS='IPL RECORD         ';\n  ELSE IF TYPE='0110....'B THEN CLASS='DDR RECORD         ';\n  ELSE IF TYPE='0111....'B THEN CLASS='MISSING INTERRUPT  ';\n  ELSE IF TYPE='1000....'B THEN CLASS='SYSTEM TERMINATION ';\n  ELSE IF TYPE='1001....'B THEN CLASS='NON-STANDARD MDR   ';\n  ELSE IF TYPE='1010....'B THEN CLASS='MACHINE CHECK FRAME';\n  ELSE IF TYPE='1011....'B THEN CLASS='CHANNEL CHECK FRAME';\n\nPROC FREQ DATA=WORK.A;\n TABLES CLASS;\n\nOPTIONS OBS=50000;\nDATA OBR (KEEP=DATE TIME JOBID CCW DEVTYPE PCUA SENSE LEVEL)\n     SFT (KEEP=DATE TIME JOBID PROGRAM ABEND LMOD CSECT)\n ;\n INFILE SERLOG MISSOVER;\n INPUT @001   TYPE     IB1.\n       @ ;\n\n  IF TYPE='0011....'B THEN LINK TYPE03;\n  IF TYPE='0100....'B THEN LINK TYPE04;\n  RETURN;\n  TYPE03:\n  IF TYPE='0011.11.'B THEN DELETE;  /* VTAM OBR RECORD. */\n  INPUT @003   SWITCHES IB2.\n        @ ;\n  IF SWITCHES='..........0.....'B ;\n  IF SWITCHES='.............1..'B THEN DELETE; /* VOLUME DEMOUNT. */\n  IF SWITCHES='.........1......'B THEN LEVEL='TEMP'; ELSE LEVEL='PERM';\n  INPUT @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @033   CCW      $PHEX8.\n        @049   DEVDEPC  IB1.\n        @053   DEVT1    $PHEX5.\n        @057   SDRCNT   IB1.\n        @058   PCUA1    $PHEX4.\n        @063   SENSCNT  IB2.\n        @ ;\n  YY = ROUND(DATE1,1000);\n  DDD = DATE1-YY;\n  DATE = DATEJUL(1000*YY+DDD);\n  SENSOFF=65+(DEVDEPC*8)+SDRCNT;\n  INPUT @SENSOFF SENSE1  $PHEX5.\n        @ ;\n  PCUA=SUBSTR(PCUA1,4,3);\n  DEVTYPE=SUBSTR(DEVT1,1,8);\n  SENSE=SUBSTR(SENSE1,1,8);\n  IF SUBSTR(SENSE,1,2)='40' & DEVTYPE='1000080E' THEN DELETE;\n  IF DEVTYPE='0000080F' THEN DEVTYPE='3825  ';\n  IF DEVTYPE='78048080' THEN DEVTYPE='3490  ';\n  IF DEVTYPE='78008000' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='78008080' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='32108003' THEN DEVTYPE='3420  ';\n  IF DEVTYPE='1000080E' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='10800809' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='1200100B' THEN DEVTYPE='3286  ';\n  IF DEVTYPE='12801009' THEN DEVTYPE='3277  ';\n  IF DEVTYPE='12201009' THEN DEVTYPE='3278  ';\n  IF DEVTYPE='10014100' THEN DEVTYPE='CTCA  ';\n  IF DEVTYPE='3010200E' THEN DEVTYPE='3380  ';\n  OUTPUT OBR;\n  RETURN;\n\n  TYPE04:\n  INPUT @004   HDRDS    IB1.\n        @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @037   ABEND    $PHEX4.\n        @121   PROGRAM  $8.\n        @325   LMOD     $8.\n        @333   CSECT    $8.\n        @ ;\n  IF HDRDS='1.......'B THEN DELETE;\n  IF HDRDS='.1......'B THEN DELETE;\n  YY = ROUND(DATE1,1000);\n  DDD = DATE1-YY;\n  DATE = DATEJUL(1000*YY+DDD);\n  OUTPUT SFT;\n  RETURN;\n\n\nPROC SUMMARY DATA=WORK.OBR NWAY;\n CLASS DEVTYPE LEVEL;\n VAR TIME;\n OUTPUT OUT=S N=COUNT;\nPROC PRINT; ID DEVTYPE; VAR LEVEL COUNT;\n\n\nPROC PRINT DATA=WORK.OBR;\n ID DATE;\n FORMAT TIME TIME. ;\n\nPROC PRINT DATA=WORK.SFT;\n ID DATE;\n FORMAT TIME TIME. ;\n./       ADD   NAME=RMF79\nOPTIONS OBS=MAX;\nDATA\n ASD  (KEEP=DATE TIME JOB ESFRAMES CSFRAMES)\n SRCS (KEEP=DATE TIME AFC HIUIC ASMQ)\n SPAG (KEEP=DATE TIME MIGAGE ESRTE ESFRAMES MIGRTE PAGEINS PAGEOUTS)\n ;\n  INFILE SMF MISSOVER LENGTH=LENGTH COL=COL RECFM=VBS LRECL=32756\n             JFCB=SMFJFCB START=BEGINCPY;\n  LENGTH                             OFFSMF 2 ;\n  FORMAT\n         SMFJFCB                 $HEX200.\n  ;\n  IF OFFSMF=. THEN DO;\n     IF SUBSTR(SMFJFCB,100,1)='....1...'B  THEN OFFSMF=4;\n     ELSE OFFSMF=0;\n     BEGINCPY=OFFSMF+1;\n     RETAIN BEGINCPY OFFSMF         ;\n  END;\n  IF OFFSMF=4 THEN DO;\n    INPUT @5 EOFSTRNG $CHAR7. @;\n    IF EOFSTRNG=:'SMF EOF'\n    OR EOFSTRNG=:'SMFEOF' THEN STOP;\n  END;\n  INPUT @2+OFFSMF TYPE         PIB1. @;\n  IF TYPE=79;\n\n  INPUT @1+OFFSMF\n       SMF79FLG    IB1.   /* HEADER FLAG BYTE                       */\n       SMF79RTY    IB1.   /* RECORD TYPE                            */\n       TIMESTMP    SMFSTAMP8.\n       SMF79SID    $4.    /* SYSTEM ID FROM INSTALLATION            */\n       SMF79SSI    $4.    /* SUBSYSTEM ID (RMF)                     */\n       SMF79STY    IB2.   /* SUBTYPE                                */\n       SMF79TRN    IB2.   /* NUMBER OF TRIPLETS IN THIS RECORD      */\n       SMF79AAA    IB2.   /* RESERVED                               */\n       SMF79PRS    IB4.   /* OFFSET TO RMF PRODUCT SECTION          */\n       SMF79PRL    IB2.   /* LENGTH OF RMF PRODUCT SECTION          */\n       SMF79PRN    IB2.   /* NUMBER OF RMF PRODUCT SECTIONS         */\n       SMF79MCS    IB4.   /* OFFSET TO MONITOR II CONTROL SECTION   */\n       SMF79MCL    IB2.   /* LENGTH OF MONITOR II CONTROL SECTION   */\n       SMF79MCN    IB2.   /* NUMBER OF MONITOR II CONTROL SECTION   */\n       SMF79ASS    IB4.   /* OFFSET TO DATA SECTION                 */\n       SMF79ASL    IB2.   /* LENGTH OF DATA SECTION                 */\n       SMF79ASN    IB2.   /* NUMBER OF DATA SECTION                 */\n       SMF79DCS    IB4.   /* OFFSET TO DATA CONTROL SECTION         */\n       SMF79DCL    IB2.   /* LENGTH OF DATA CONTROL SECTION         */\n       SMF79DCN    IB2.   /* NUMBER OF DATA CONTROL SECTION         */\n       SMF79QSS    IB4.   /* OFFSET TO I/O QUEUING GLBL.SECT.       */\n       SMF79QSL    IB2.   /* LENGTH OF I/O QUEUING GLBL.SECT.       */\n       SMF79QSN    IB2.   /* NUMBER OF I/O QUEUING GLBL.SECT.       */\n @ ;\n\n DATE=DATEPART(TIMESTMP);\n TIME=TIMEPART(TIMESTMP);\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n\n IF SMF79STY=1 THEN DO;\n  I=SMF79ASS-4;\n  J=SMF79ASL;\n  K=SMF79ASN;\n  DO L=1 TO K;\n   INPUT @1+OFFSMF+I\n       R791ASID    IB2.   /* ADDRESS SPACE IDENTIFIER               */\n       R791JBN     $8.    /* NAME OF JOB                            */\n       R791DMN     IB2.   /* DOMAIN NUMBER                          */\n       R791NPG     IB2.   /* PERFORMANCE GROUP                      */\n       R791PGP     IB2.   /* PERFORMANCE GROUP PERIOD               */\n       R791TTOD    IB4.   /* REAL TIME INTO TRANSACTION             */\n       R791CL      $2.    /* CURRENT LOCATION                       */\n       R791TAS     IB2.   /* TYPE OF USER                           */\n       R791SRC     $2.    /* REASON LAST SWAP OUT                   */\n       R791DP      IB2.   /* DISPATCHER PRIORITY                    */\n       R791SEQN    IB2.   /* RESERVED                         @S1C  */\n       R791FMCT    IB2.   /* NUMBER OF REAL STORAGE FRAMES          */\n       R791WSS     IB2.   /* WORKING SET AT LAST SWAP IN            */\n       R791SWC     IB2.   /* TRANSACTION SWAP COUNT                 */\n       R791SWMR    IB2.   /* SRM WORKLOAD RECOM VALUE               */\n       R791SCRV    IB2.   /* SRM PROCESSOR RECOM VALUE              */\n       R791SIOC    IB2.   /* SRM I/O RECOM VALUE                    */\n       R791WMS     IB4.   /* SRM SSERVICE FOR THE CURRENT           */\n       R791TCPU    IB4.   /* CPU (TCB+SRB) FOR CURRENT JOB STEP IN  */\n       R791SSRV    IB2.   /* SRM STORAGE RECOMMENDATION VALUE       */\n       R791ES      IB2.   /* NUMBER OF EXT. STORAGE SLOTS     @P2A  */\n       R791ESSL    IB4.   /* AVAILABLE FOR FUTURE USE         @P2A  */\n       @;\n       IF R791DMN=6\n       THEN DO;\n          JOB=R791JBN;\n          CSFRAMES=R791FMCT;\n          ESFRAMES=R791ES;\n          OUTPUT ASD;\n       END;\n       I=I+J;\n  END;\n END;\n\n\n IF SMF79STY=3 THEN DO;\n  I=SMF79ASS-4;\n  J=SMF79ASL;\n  K=SMF79ASN;\n  DO L=1 TO K;\n   INPUT @1+OFFSMF+I\n       R793AFC     IB2.   /* NUMBER OF AVAILABLE FRAMES              */\n       R793CRI     IB2.   /* HIGH UIC COUNT                          */\n       R793SQA     IB2.   /* NUMBER OF SQA FRAMES                    */\n       R793CMNF    IB2.   /* NUMBER OF COMMON (LPA+CSA)              */\n       R793CMFF    IB2.   /* NUMBER OF COMMON (LPA+CSA)              */\n       R793PRFX    IB2.   /* NUMBER OF PRIVATE FIXED FRAMES          */\n       R793CPUU    IB2.   /* PROCESSOR UTILIZATION (0-101)           */\n       R793DQ      IB2.   /* LENGTH OF ASCB READY QUEUE              */\n       R793INC     IB2.   /* NUMBER OF ADDRESS SPACES IN STORAGE     */\n       R793OUTU    IB2.   /* NUMBER OF ADDRESS SPACES OUT OF         */\n       R793LCU     IB2.   /* RESERVED                                */\n       R793ASMQ    IB2.   /* SRM MEASURE OF ASM QUEUE LENGTH         */\n       R793LPAF    IB2.   /* NUMBER OF LPA PAGEABLE FRAMES           */\n       R793CSAF    IB2.   /* NUMBER OF CSA PAGEABLE FRAMES           */\n       R793LPFX    IB2.   /* NUMBER OF LPA FIXED FRAMES              */\n       R793CSFX    IB2.   /* NUMBER OF CSA FIXED FRAMES              */\n       R793LSQA    IB2.   /* NUMBER OF LSQA FRAME                    */\n       R793NLQF    IB2.   /* NUMBER OF PRIVATE NON LSQA FIX FRAMES   */\n       R793LOUT    IB2.   /* NUMBER OF ADDRESS SPACES LOGICALLY      */\n       @;\n       AFC=R793AFC;\n       HIUIC=R793CRI;\n       ASMQ=R793ASMQ;\n       OUTPUT SRCS;\n       I=I+J;\n  END;\n END;\n\n IF SMF79STY=4 THEN DO;\n  I=SMF79ASS-4;\n  J=SMF79ASL;\n  K=SMF79ASN;\n  DO L=1 TO K;\n   INPUT @1+OFFSMF+I\n       R794CMNI    IB4.   /* SYSTEM COMMON (LPA+CSA) PAGES IN        */\n       R794CMNO    IB4.   /* SYSTEM COMMON (CSA) PAGES OUT           */\n       R794CMNR    IB4.   /* SYSTEM COMMON (LPA+CSA) PAGES           */\n       R794SWPO    IB4.   /* NUMBER OF SWAPS (OUT)            @P1C   */\n       R794PSPI    IB4.   /* NUMBER OF PAGES SWAPPED IN              */\n       R794PSPO    IB4.   /* NUMBER OF PAGES SWAPPED OUT             */\n       R794PRVI    IB4.   /* NUMBER OF PRIVATE PAGES                 */\n       R794PRVO    IB4.   /* NUMBER OF PRIVATE PAGES                 */\n       R794PRVR    IB4.   /* NUMBER OF PRIVATE PAGES                 */\n       R794VIO     IB4.   /* NUMBER OF VIO PAGES (IN+OUT)            */\n       R794AFC     IB2.   /* NUMBER AVAILABLE FRAMES                 */\n       R794CRI     IB2.   /* HIGH UIC COUNT                          */\n       R794ACRI    IB2.   /* AVERAGE OF HIGH UIC COUNT               */\n       R794RV1     IB2.   /* RESERVED                                */\n       R794LPAI    IB4.   /* SYSTEM LPA PAGES IN          @G537NLS   */\n       R794CSAI    IB4.   /* SYSTEM CSA PAGES OUT         @G537NLS   */\n       R794LPAR    IB4.   /* SYSTEM LPA PAGES RECLAIMED   @G537NLS   */\n       R794CSAR    IB4.   /* SYSTEM CSA PAGES RECLAIMED   @G537NLS   */\n       R794TWSS    IB2.   /* TARGET WORKING SETSIZE FOR THE COMMON   */\n       R794MAGE    IB2.   /* MIGRATION AGE                           */\n       R794ERTE    IB4.   /* NO. PAGES TO EXT. STORAGE               */\n       R794EVAL    IB4.   /* NO. OF EXTENDED STORAGE SLOTS           */\n       R794ESSL    IB4.   /* AVAILABLE FOR FUTURE USE                */\n       R794MRTE    IB4.   /* NO. OF PAGES MIGRATED FROM              */\n       MIGAGE      IB4.   /* !!!!! */\n       @;\n /*    MIGAGE=R794MAGE; */\n       PAGEINS=(R794PRVI-LAG1(R794PRVI))/(TIME-LAG1(TIME));\n       PAGEOUTS=(R794PRVO-LAG1(R794PRVO))/(TIME-LAG1(TIME));\n       ESRTE=(R794ERTE-LAG1(R794ERTE))/(TIME-LAG1(TIME));\n       ESFRAMES=R794EVAL;\n       MIGRTE=(R794MRTE-LAG1(R794MRTE))/(TIME-LAG1(TIME));\n       OUTPUT SPAG;\n       I=I+J;\n  END;\n END;\n\nPROC SORT DATA=WORK.ASD; BY JOB DATE TIME;\nPROC PLOT DATA=WORK.ASD;\n PLOT CSFRAMES*TIME='C' ESFRAMES*TIME='E'  / OVERLAY;\n BY JOB DATE;\n\nPROC PLOT DATA=WORK.SPAG;\n PLOT\n       MIGAGE*TIME\n       ESRTE*TIME\n       ESFRAMES*TIME\n       MIGRTE*TIME\n       PAGEINS*TIME\n       PAGEOUTS*TIME\n       ;\n\n\nPROC PRINT DATA=WORK.SRCS; ID DATE;\nPROC PRINT DATA=WORK.SPAG; ID DATE;\n./       ADD   NAME=SASDCOL\n//LANEJ     JOB LANEJ,SASDCOL,NOTIFY=LANEJ,REGION=6M,\n//*        USER=IBMUSER,\n//         MSGLEVEL=(1,1),MSGCLASS=X,CLASS=Z\n//*JOBLIB DD DSN=TECTSG.ISPFJCL.LOAD,DISP=SHR\n//*PORTRAIT OUTPUT PAGEDEF=A16D,FORMDEF=A16D DEFAULT=YES\n//TWOUP    OUTPUT PAGEDEF=A26D,FORMDEF=A26D,DEFAULT=YES,JESDS=ALL\n//*FOURUP   OUTPUT PAGEDEF=U46D,FORMDEF=U46D DEFAULT=YES\n//*-------------------------------------------------------------*\n//*   THIS JCL IS IN:        LANEJ.TECTSG.CNTL(SASDCOL)\n//*-------------------------------------------------------------*\n//S1 EXEC SAS607,TIME=1439,\n//  OPTIONS='ERRORABEND NOSOURCE NOSOURCE2 NOMACROGEN',\n//  CONFIG='TECTSG.MXG.V99.SOURCE(CONFIG07)'\n//WORK     DD UNIT=WORK,SPACE=(CYL,(500,50)),DCB=RECFM=FS\n//SASLOG   DD SYSOUT=*\n//SASLIST  DD SYSOUT=*\n//SORTWK01 DD SPACE=(CYL,(25)),UNIT=WORK\n//SORTWK02 DD SPACE=(CYL,(25)),UNIT=WORK\n//SORTWK03 DD SPACE=(CYL,(25)),UNIT=WORK\n//LIBRARY  DD DSN=TECTSG.MXG.V99.FORMATS,DISP=SHR\n//DCOLLECT DD DSN=TECTSG.DCOLLECT.DASDCAP,DISP=SHR\n//         DD DSN=TECTSG.DCOLLECT.VOLUMES,DISP=SHR\n//SOURCLIB DD DSN=TECTSG.MXG.USER.SOURCE,DISP=SHR\n//         DD DSN=TECTSG.MXG.V99.SOURCE,DISP=SHR\n//SYSIN DD *\n%INCLUDE SOURCLIB(IMACDCOL,VMACDCOL,IMACKEEP);\nDATA\n_VARDCOL\n_CDEDCOL\n\nDATA DCOLVOLS;\n SET DCOLVOLS;\n IF DCVVOLSR=:'PROD' | DCVVOLSR=:'DEVL';\n\nDATA DCOLCAPD;\n SET DCOLCAPD;\n IF UCVOLSR=:'PROD' | UCVOLSR=:'DEVL';\n\nPROC SORT DATA=WORK.DCOLVOLS; BY DCVVOLSR DCUTMSTP;\nPROC SORT DATA=WORK.DCOLCAPD; BY UCVOLSR DCUTMSTP;\nPROC SORT DATA=WORK.DCOLCAPT; BY         DCUTMSTP;\n\nPROC PLOT DATA=WORK.DCOLVOLS;\n PLOT (\n         DCVALLOC DCVFDSCB          DCVFRAG1 DCVFRESP DCVFREXT\n         DCVFVIRS                            DCVLGEXT DCVPERCT\n          ) * DCUTMSTP;\n BY DCVVOLSR;\nPROC PLOT DATA=WORK.DCOLCAPD;\n PLOT (\n         UCAFOCC  UCBFOCC UCNOMIG\n          ) * DCUTMSTP;\n        BY UCVOLSR;\nPROC PLOT DATA=WORK.DCOLCAPT;\n PLOT (\n         UCEMPTY UTFULL UTPART\n          ) * DCUTMSTP;\n./       ADD   NAME=SASTSOMN\nOPTIONS OBS=MAX;\n\nMACRO    TOD  HH = FLOOR (TIM1 /360000);\n              MM = FLOOR ((TIM1 -360000*HH)/6000);\n              SS = FLOOR ((TIM1 -360000*HH-6000*MM)/100);\n\n              TIM=HMS(HH,MM,SS);\n              FORMAT TIM TIME. ;\n              %\n\n DATA CMDS\n  (KEEP = USER TXN NRTR TYPE)\n      USRINTVL\n  (KEEP = WEEKDAYS DATE USER TIM\n          CPU THINK TRIVRESP TOTSHORT RESPONSE TRANS )\n      CMDRECS\n  (KEEP = WEEKDAYS DATE USER TIM TXN\n          TGETS TPUTS CPU        EXCP SWAPOUT SERVUNIT)\n   ;\n   INFILE SMFDD MISSOVER JFCB=JFCBMANX;\n   IF _N_ = 1 THEN DO;\n            IF SUBSTR(JFCBMANX,100,1) = '....1...'B\n               THEN SMFCOL1 = 6 ;\n            ELSE SMFCOL1 = 2;\n            RETAIN SMFCOL1;\n            DROP SMFCOL1;\n            END;\n          INPUT @SMFCOL1 RECNO PIB1.\n                 EOFMARK $8. @;\n          IF EOFMARK = 'FEOFMARK' THEN STOP;\n   INPUT\n         @SMFCOL1+5    SMFDATE PD4.@ ;\n   IF RECNO = 198 OR RECNO = 197;\n   DATE = DATEJUL(SMFDATE);\n   FORMAT DATE DATE.;\n   WEEKDAYS = PUT(DATE,WEEKDATE3.) ;\n   IF RECNO = 198 THEN GOTO REC198;\n   INPUT @SMFCOL1+09 SYSID  $4.\n         @SMFCOL1+13 OFFSET  PIB2.\n         @SMFCOL1+19 INTLEN   PIB4. @;\n   INPUT @SMFCOL1+39 TIM1 PIB4.\n         @SMFCOL1+87 MAX_USER  PIB2. @;\n   TOD\n   INTLEN  = INTLEN  / 38400;\n MULTSEG:\n*  REPEAT FOLLOWING CODE FOR INDIVIDUAL USER SEGMENTS;\n   IF OFFSET = 0 THEN RETURN;\n   N = SMFCOL1 + OFFSET - 1;\n   INPUT @N  USER $7.\n         @N+24 TRIVTM IB4.\n         @N+28 TOTSHORT PIB2.\n         @N+40 NTRIVTM PIB4.\n         @N+44 TOTMED  PIB2.\n         @N+46 UCBE    PIB2.\n         @N+56 LONGTM  PIB4.\n         @N+60 TOTLONG PIB2.\n         @N+70 OFFSET  PIB2.\n         @N+72 TCB     PIB4.\n         @N+76 SRB     PIB4.\n         @N+88 THINKTM PIB4.\n         @N+134 THINKS PIB2.\n         @N+138 NRCMDS PIB1. @;\n   TRANS = 0;\n   IF TXNS     = . THEN TXNS  = 0;\n   TCB = TCB / 38400;\n   SRB = SRB / 38400;\n   CPU = TCB + SRB;\n   FORMAT CPU 6.2 ;\n   THINKTM = THINKTM / 38400;\n   IF THINKS LE 0 THEN THINK = 0;\n   ELSE THINK = THINKTM / THINKS;\n   FORMAT THINK 7.2 ;\n   TRIVTM = TRIVTM / 38400;\n   NTRIVTM = NTRIVTM / 38400;\n   LONGTM = LONGTM / 38400;\n   RESPONSE = TRIVTM + NTRIVTM + LONGTM;\n   TRANS = TOTSHORT + TOTMED + TOTLONG;\n   IF RESPONSE <= 0  OR TRANS <= 0 THEN GOTO MULTSEG;\n   RESPONSE = RESPONSE/ TRANS;\n   FORMAT RESPONSE 6.2 ;\n   IF TOTSHORT LE 0 THEN TRIVRESP=0;\n   ELSE TRIVRESP = TRIVTM / TOTSHORT;\n   FORMAT TRIVRESP 4.2 ;\n   OUTPUT USRINTVL;\nLOOPCMD:\n    TXN = '        ';\n    IF NRCMDS <= 0 THEN GOTO RESTMON;\n       INPUT    CMD  $2.\n                NRTR PIB1. @;\n   TYPE='TSMCMDXX  ';\n   LINK DECODE;\nIF TXN\u00ac=USER THEN OUTPUT CMDS;\n       CMD = '  ';\n       NRCMDS = NRCMDS - 1;\n       GOTO LOOPCMD;\nRESTMON:\n   INPUT @N+UCBE TSMFEXIT PIB2.\n         @N+UCBE+14 NOCMDS PIB1.@;\nCYCLE:\n   INPUT @N+TSMFEXIT     TXN  $8.\n         @N+TSMFEXIT+8   NRTR PIB1.\n         @N+TSMFEXIT+9   FLAG $1.@;\n   IF FLAG='.1......'B THEN TYPE='CLIST     ';\n   IF FLAG='S'         THEN TYPE='ISPF PANEL';\n   IF FLAG='T'         THEN TYPE='TSO CP    ';\n   IF FLAG='U'         THEN TYPE='DIALOG PGM';\n   IF FLAG='V'         THEN TYPE='ISPF SERV ';\n   NOCMDS = NOCMDS - 1;\n   IF TXN\u00ac=USER THEN OUTPUT CMDS;\n   IF NOCMDS LE 0 THEN GOTO MULTSEG;\n   TSMFEXIT = TSMFEXIT + 10;\n   GOTO CYCLE;\nREC198:\n   INPUT\n         @SMFCOL1+15  USER   $8.\n         @SMFCOL1+31 TIM1 PIB4.\n         @SMFCOL1+43 TXN $8.\n         @SMFCOL1+51 TGETS PIB2.\n         @SMFCOL1+53 TPUTS PIB2.\n         @SMFCOL1+63 INCPUT PIB4.\n         @SMFCOL1+67 SRB PIB4.\n         @SMFCOL1+71 EXCP PIB4.\n         @SMFCOL1+121 SWAPOUT PIB2.\n         @SMFCOL1+131 CMD     $2.\n         @SMFCOL1+147 SERVUNIT PIB4.\n         @SMFCOL1+171 OFFDSN   PIB2.\n         @SMFCOL1+174 FLAG1    PIB1.\n         @\n         ;\n   TOD\n   IF OFFDSN GT 0\n    & FLAG1='0.......'B  THEN DO;\n      INPUT @OFFDSN  DSNL   PIB1. @ ;\n      IF DSNL LE 8 THEN DO;\n         INPUT @OFFDSN TXN1 $VARYING44. DSNL @ ;\n         TXN=PUT(TXN1,$8.);\n      END;\n   END;\n   IF SUBSTR(TXN,1,1) LT 'A' THEN LINK DECODE;\n   TSOCPU = (INCPUT / 384)/100;\n   TSOSRB = (SRB  / 384)/100;\n   CPU      = TSOCPU+TSOSRB;\n   TRANS = 1;\n   OUTPUT CMDRECS;\n   RETURN;\n\nDECODE:\nIF CMD = 'A1' THEN TXN =         'ACCOUNT ';\nIF CMD = 'A2' THEN TXN =         'ALLOCATE';\nIF CMD = '6E' THEN TXN =         'APL     ';\nIF CMD = 'A4' THEN TXN =         'ASM     ';\nIF CMD = 'A5' THEN TXN =         'ATTRIB  ';\nIF CMD = 'CA' THEN TXN =         'CALL    ';\nIF CMD = 'C3' THEN TXN =         'CALC    ';\nIF CMD = 'C1' THEN TXN =         'CONVERT ';\nIF CMD = 'C2' THEN TXN =         'COPY    ';\nIF CMD = 'C4' THEN TXN =         'COBOL   ';\nIF CMD = 'D1' THEN TXN =         'DELETE  ';\nIF CMD = 'E2' THEN TXN =         'EDIT    ';\nIF CMD = 'E$' THEN TXN =         'END     ';\nIF CMD = 'E5' THEN TXN =         'EXEC    ';\nIF CMD = 'F1' THEN TXN =         'FORMAT  ';\nIF CMD = 'F2' THEN TXN =         'FREE    ';\nIF CMD = 'F3' THEN TXN =         'FREEALL ';\nIF CMD = 'F4' THEN TXN =         'FORT    ';\nIF CMD = 'G1' THEN TXN =         'GOFORT  ';\nIF CMD = 'H1' THEN TXN =         'HELP    ';\nIF CMD = 'I1' THEN TXN =         'IND$FILE';\nIF CMD = 'L1' THEN TXN =         'LINK    ';\nIF CMD = 'L2' THEN TXN =         'LIST    ';\nIF CMD = 'L3' THEN TXN =         'LISTALC ';\nIF CMD = 'L5' THEN TXN =         'LISTBC  ';\nIF CMD = 'L8' THEN TXN =         'LISTDS  ';\nIF CMD = 'Y1' THEN TXN =         'LOGOFF  ';\nIF CMD = 'LN' THEN TXN =         'LOGON   ';\nIF CMD = 'Y2' THEN TXN =         'LOADGO  ';\nIF CMD = 'M1' THEN TXN =         'MERGE   ';\nIF CMD = 'O1' THEN TXN =         'OPERATOR';\nIF CMD = 'P2' THEN TXN =         'PLI     ';\nIF CMD = 'P3' THEN TXN =         'PLIC    ';\nIF CMD = 'P4' THEN TXN =         'PROFILE ';\nIF CMD = 'P5' THEN TXN =         'PROTECT ';\nIF CMD = 'R3' THEN TXN =         'RENAME  ';\nIF CMD = 'R4' THEN TXN =         'RUN     ';\nIF CMD = 'S2' THEN TXN =         'SEND    ';\nIF CMD = '$$' THEN TXN =         'SPF     ';\nIF CMD = 'T1' THEN TXN =         'TERMINAL';\nIF CMD = 'T2' THEN TXN =         'TEST    ';\nIF CMD = 'T3' THEN TXN =         'TESTCOB ';\nIF CMD = 'T4' THEN TXN =         'TESTFORT';\nIF CMD = 'T5' THEN TXN =         'TIM1E    ';\nIF CMD = 'A0' THEN TXN =         'TRANSMIT';\nIF CMD = 'C0' THEN TXN =         'TSOEXEC ';\nIF CMD = 'B0' THEN TXN =         'RECEIVE ';\nIF CMD = 'T6' THEN TXN =         'TSOSORT ';\nIF CMD = '6G' THEN TXN =         '@       ';\nIF CMD = 'W5' THEN TXN =         'ALTER   ';\nIF CMD = 'B2' THEN TXN =         'BLDINDEX';\nIF CMD = '87' THEN TXN =         'CHKLIST ';\nIF CMD = 'C5' THEN TXN =         'CNVTCAT ';\nIF CMD = 'D2' THEN TXN =         'DEFINE  ';\nIF CMD = 'E7' THEN TXN =         'EXPORT  ';\nIF CMD = 'E8' THEN TXN =         'EXPORTRA';\nIF CMD = 'I2' THEN TXN =         'IMPORT  ';\nIF CMD = '88' THEN TXN =         'IMPORTRA';\nIF CMD = 'Y4' THEN TXN =         'LISTCAT ';\nIF CMD = 'Y5' THEN TXN =         'LISTCRA ';\nIF CMD = 'P8' THEN TXN =         'PRINT   ';\nIF CMD = 'R5' THEN TXN =         'REPRO   ';\nIF CMD = 'R6' THEN TXN =         'RESETCAT';\nIF CMD = 'V1' THEN TXN =         'VERIFY  ';\nIF CMD = 'C6' THEN TXN =         'CANCEL  ';\nIF CMD = 'O2' THEN TXN =         'OUTPUT  ';\nIF CMD = 'S5' THEN TXN =         'STATUS  ';\nIF CMD = 'S6' THEN TXN =         'SUBMIT  ';\nIF CMD = 'W1' THEN TXN =         'WHEN    ';\nIF CMD = '70' THEN TXN =         'RMFMON  ';\nIF CMD = '71' THEN TXN =         'HALTERDS';\nIF CMD = '72' THEN TXN =         'HBACKDS ';\nIF CMD = '73' THEN TXN =         'HBDELETE';\nIF CMD = '74' THEN TXN =         'HDELETE ';\nIF CMD = '75' THEN TXN =         'HLIST   ';\nIF CMD = '76' THEN TXN =         'HMIGRATE';\nIF CMD = '77' THEN TXN =         'HQUERY  ';\nIF CMD = '78' THEN TXN =         'HRECALL ';\nIF CMD = '79' THEN TXN =         'HRECOVER';\nIF CMD = '7A' THEN TXN =         'HSENDCMD';\nIF CMD = '7B' THEN TXN =         'IPCS    ';\nIF CMD = '7C' THEN TXN =         'IPCSDDIR';\nIF CMD = '7D' THEN TXN =         'SYSDSCAN';\nIF CMD = '7E' THEN TXN =         'ADDGROUP';\nIF CMD = '7F' THEN TXN =         'ADDSD   ';\nIF CMD = '7G' THEN TXN =         'ADDUSER ';\nIF CMD = '7H' THEN TXN =         'ALTDSD  ';\nIF CMD = '7I' THEN TXN =         'ALTGROUP';\nIF CMD = '7J' THEN TXN =         'ALTUSER ';\nIF CMD = '7K' THEN TXN =         'CONNECT ';\nIF CMD = '7L' THEN TXN =         'DELDSD  ';\nIF CMD = '7M' THEN TXN =         'DELGROUP';\nIF CMD = '7N' THEN TXN =         'DELUSER ';\nIF CMD = '7O' THEN TXN =         'LISTDSD ';\nIF CMD = '7P' THEN TXN =         'LISTGRP ';\nIF CMD = '7Q' THEN TXN =         'LISTUSER';\nIF CMD = '7R' THEN TXN =         'PASSWORD';\nIF CMD = '7S' THEN TXN =         'PERMIT  ';\nIF CMD = '7T' THEN TXN =         'RALTER  ';\nIF CMD = '7U' THEN TXN =         'RDEFINE ';\nIF CMD = '7V' THEN TXN =         'RDELETE ';\nIF CMD = '7W' THEN TXN =         'REMOVE  ';\nIF CMD = '7X' THEN TXN =         'RLIST   ';\nIF CMD = '7Y' THEN TXN =         'RVARY   ';\nIF CMD = '7Z' THEN TXN =         'SEARCH  ';\nIF CMD = '80' THEN TXN =         'SETROPTS';\nIF CMD = '81' THEN TXN =         'SMCOPY  ';\nIF CMD = '82' THEN TXN =         'SMFIND  ';\nIF CMD = '83' THEN TXN =         'SMPUT   ';\nIF CMD = '$3' THEN TXN =         'BOTTOM  ';\nIF CMD = '$4' THEN TXN =         'CHANGE  ';\nIF CMD = '$6' THEN TXN =         'COPY    ';\nIF CMD = '$7' THEN TXN =         'DELETE  ';\nIF CMD = '$8' THEN TXN =         'DOWN    ';\nIF CMD = '$2' THEN TXN =         'EDITDATA';\nIF CMD = '$9' THEN TXN =         'END     ';\nIF CMD = '$B' THEN TXN =         'FIND    ';\nIF CMD = '$P' THEN TXN =         'FORMAT  ';\nIF CMD = '84' THEN TXN =         'FSE     ';\nIF CMD = '85' THEN TXN =         'FULSEDIT';\nIF CMD = '2A' THEN TXN =         'PF      ';\nIF CMD = '2B' THEN TXN =         'PB      ';\nIF CMD = '2C' THEN TXN =         'HF      ';\nIF CMD = '2D' THEN TXN =         'HB      ';\nIF CMD = '2E' THEN TXN =         'LS      ';\nIF CMD = '2F' THEN TXN =         'SS      ';\nIF CMD = '$H' THEN TXN =         'HELP    ';\nIF CMD = '$E' THEN TXN =         'INPUT   ';\nIF CMD = '$F' THEN TXN =         'INSERT  ';\nIF CMD = '$2' THEN TXN =         '*       ';\nIF CMD = '$A' THEN TXN =         'LIST    ';\nIF CMD = '$1' THEN TXN =         'MERGE   ';\nIF CMD = '$M' THEN TXN =         'MOVE    ';\nIF CMD = '$O' THEN TXN =         'RENUM   ';\nIF CMD = '$Q' THEN TXN =         'RUN     ';\nIF CMD = '$R' THEN TXN =         'SAVE    ';\nIF CMD = '$S' THEN TXN =         'SCAN    ';\nIF CMD = '$V' THEN TXN =         'TABSET  ';\nIF CMD = '$X' THEN TXN =         'TOP     ';\nIF CMD = '$Y' THEN TXN =         'UNNUM   ';\nIF CMD = '$Z' THEN TXN =         'UP      ';\nIF CMD = '$#' THEN TXN =         'VERIFY  ';\nIF CMD = 'A2' THEN TXN =         'ALLOCATE';\nIF CMD = 'A5' THEN TXN =         'ATTRIB  ';\nIF CMD = '86' THEN TXN =         'CKPOINT ';\nIF CMD = 'E5' THEN TXN =         'EXEC    ';\nIF CMD = 'F2' THEN TXN =         'FREE    ';\nIF CMD = 'P4' THEN TXN =         'PROFILE ';\nIF CMD = 'S2' THEN TXN =         'SEND    ';\nIF CMD = 'S6' THEN TXN =         'SUBMIT  ';\nIF CMD = '#1' THEN TXN =         'ASSIGN  ';\nIF CMD = 'A2' THEN TXN =         'ALLOCATE';\nIF CMD = '#2' THEN TXN =         'AT      ';\nIF CMD = '#O' THEN TXN =         'AND     ';\nIF CMD = 'A5' THEN TXN =         'ATTRIB  ';\nIF CMD = '#3' THEN TXN =         'CALL    ';\nIF CMD = '#4' THEN TXN =         'COPY    ';\nIF CMD = '#5' THEN TXN =         'DELETE  ';\nIF CMD = '#6' THEN TXN =         'DROP    ';\nIF CMD = '#7' THEN TXN =         'END     ';\nIF CMD = '#8' THEN TXN =         'EQUATE  ';\nIF CMD = 'E5' THEN TXN =         'EXEC    ';\nIF CMD = 'F2' THEN TXN =         'FREE    ';\nIF CMD = '#9' THEN TXN =         'FREEMAIN';\nIF CMD = '#A' THEN TXN =         'GETMAIN ';\nIF CMD = '#B' THEN TXN =         'GO      ';\nIF CMD = '#C' THEN TXN =         'HELP    ';\nIF CMD = 'L1' THEN TXN =         'LINK    ';\nIF CMD = '#D' THEN TXN =         'LIST    ';\nIF CMD = 'L3' THEN TXN =         'LISTALC ';\nIF CMD = 'L5' THEN TXN =         'LISTBC  ';\nIF CMD = 'Y4' THEN TXN =         'LISTCAT ';\nIF CMD = '#E' THEN TXN =         'LISTDCB ';\nIF CMD = '#F' THEN TXN =         'LISTDEB ';\nIF CMD = 'L8' THEN TXN =         'LISTDS  ';\nIF CMD = '#G' THEN TXN =         'LISTMAP ';\nIF CMD = '#H' THEN TXN =         'LISTPSW ';\nIF CMD = '#I' THEN TXN =         'LISTTCB ';\nIF CMD = '#J' THEN TXN =         'LOAD    ';\nIF CMD = '#K' THEN TXN =         'OFF     ';\nIF CMD = '#P' THEN TXN =         'OR      ';\nIF CMD = 'P4' THEN TXN =         'PROFILE ';\nIF CMD = 'P5' THEN TXN =         'PROTECT ';\nIF CMD = 'R3' THEN TXN =         'RENAME  ';\nIF CMD = '#M' THEN TXN =         'RUN     ';\nIF CMD = '#L' THEN TXN =         'QUALIFY ';\nIF CMD = 'S2' THEN TXN =         'SEND    ';\nIF CMD = 'T1' THEN TXN =         'TERMINAL';\nIF CMD = '#N' THEN TXN =         'WHERE   ';\nIF CMD = 'C6' THEN TXN =         'CANCEL  ';\nIF CMD = 'S5' THEN TXN =         'STATUS  ';\nIF CMD = 'S6' THEN TXN =         'SUBMIT  ';\nIF CMD = '@0' THEN TXN =         'SPFTERM ';\nIF CMD = '@1' THEN TXN =         'SPFLOGL ';\nIF CMD = '4V' THEN TXN =         'SPFLIST ';\nIF CMD = '4W' THEN TXN =         'SPFDSPLY';\nIF CMD = '@2' THEN TXN =         'SPFEDIT ';\nIF CMD = '@3' THEN TXN =         'BROWSE  ';\nIF CMD = '@4' THEN TXN =         'LIBUTIL ';\nIF CMD = '@5' THEN TXN =         'LIBUTILC';\nIF CMD = '@6' THEN TXN =         'LIBUTILX';\nIF CMD = '@7' THEN TXN =         'LIBUTILL';\nIF CMD = '@8' THEN TXN =         'LIBUTILP';\nIF CMD = '@9' THEN TXN =         'LIBUTILR';\nIF CMD = '@A' THEN TXN =         'LIBUTILD';\nIF CMD = '@B' THEN TXN =         'DSALLOC ';\nIF CMD = '@C' THEN TXN =         'DSRENAME';\nIF CMD = '@D' THEN TXN =         'DSDELETE';\nIF CMD = '@E' THEN TXN =         'DSINFO  ';\nIF CMD = '@F' THEN TXN =         'UTILMC  ';\nIF CMD = '@G' THEN TXN =         'UTILCAT ';\nIF CMD = '38' THEN TXN =         'UTILRESR';\nIF CMD = '40' THEN TXN =         'UTILRESN';\nIF CMD = '41' THEN TXN =         'UTILRESD';\nIF CMD = '3L' THEN TXN =         'UTILRES ';\nIF CMD = '36' THEN TXN =         'UTLHCPYJ';\nIF CMD = '37' THEN TXN =         'UTLHCPYL';\nIF CMD = '3M' THEN TXN =         'UTLHCPY ';\nIF CMD = '3N' THEN TXN =         'CMDTABLE';\nIF CMD = '4X' THEN TXN =         'UTILFMT ';\nIF CMD = '3Q' THEN TXN =         'DMTSTFUN';\nIF CMD = '3R' THEN TXN =         'DMTSTPAN';\nIF CMD = '3S' THEN TXN =         'DMTSTVAR';\nIF CMD = '3T' THEN TXN =         'DMTSTTBL';\nIF CMD = '3U' THEN TXN =         'DMTSTLOG';\nIF CMD = '3V' THEN TXN =         'DMTSTSRV';\nIF CMD = '3W' THEN TXN =         'DMTSTTRC';\nIF CMD = '3X' THEN TXN =         'DMTSTBRK';\nIF CMD = '@J' THEN TXN =         'FORASM  ';\nIF CMD = '@K' THEN TXN =         'FORCOB  ';\nIF CMD = '@L' THEN TXN =         'FORFORG1';\nIF CMD = '@M' THEN TXN =         'FORPLIC ';\nIF CMD = '@N' THEN TXN =         'FORPLIOP';\nIF CMD = '@O' THEN TXN =         'FORLINK ';\nIF CMD = '@P' THEN TXN =         'FORCOBID';\nIF CMD = '@Q' THEN TXN =         'FORFORID';\nIF CMD = '44' THEN TXN =         'FORPASCL';\nIF CMD = '4J' THEN TXN =         'FORMEM  ';\nIF CMD = '@R' THEN TXN =         'BCKASM  ';\nIF CMD = '@S' THEN TXN =         'BCKCOB  ';\nIF CMD = '@T' THEN TXN =         'BCKFORG1';\nIF CMD = '@U' THEN TXN =         'BCKPLIC ';\nIF CMD = '@V' THEN TXN =         'BCKPLIOP';\nIF CMD = '@W' THEN TXN =         'BCKLINK ';\nIF CMD = '45' THEN TXN =         'BCKPASCL';\nIF CMD = '4K' THEN TXN =         'BCKMEM  ';\nIF CMD = '@X' THEN TXN =         'SPFVTOC ';\nIF CMD = '@Y' THEN TXN =         'TUTORIAL';\nIF CMD = '4L' THEN TXN =         'LMFCNTL ';\nIF CMD = '4M' THEN TXN =         'LMFSET  ';\nIF CMD = '4N' THEN TXN =         'LMFDIST ';\nIF CMD = '4O' THEN TXN =         'LMFACTV ';\nIF CMD = '4U' THEN TXN =         'LMFREVW ';\nIF CMD = '@Z' THEN TXN =         'SPFERR01';\nIF CMD = '@@' THEN TXN =         'SPFERR02';\nIF CMD = '@#' THEN TXN =         'SPFERR03';\nIF CMD = '34' THEN TXN =         'SPFERR04';\nIF CMD = '35' THEN TXN =         'SPFERR05';\nIF CMD = '42' THEN TXN =         'SPFERR06';\nIF CMD = '43' THEN TXN =         'SPFERR07';\nIF CMD = '48' THEN TXN =         'SPFERR08';\nIF CMD = '@?' THEN TXN =         'DATUTILC';\nIF CMD = '@-' THEN TXN =         'DATUTILU';\nIF CMD = '3K' THEN TXN =         'DATUTIL ';\nIF CMD = '46' THEN TXN =         'CONVMNU ';\nIF CMD = '47' THEN TXN =         'CONVMSG ';\nIF CMD = '3O' THEN TXN =         'CNVTMNMG';\nIF CMD = '@+' THEN TXN =         'TESTMENU';\nIF CMD = '@=' THEN TXN =         'SPFPK1  ';\nIF CMD = '@!' THEN TXN =         'SPFPK2  ';\nIF CMD = '@\u00ac' THEN TXN =         'SPFPK3  ';\nIF CMD = '3A' THEN TXN =         'SPFPFK  ';\nIF CMD = '@:' THEN TXN =         'UTILBRWS';\nIF CMD = '30' THEN TXN =         'UTILOUT ';\nIF CMD = '31' THEN TXN =         'UTILOUTD';\nIF CMD = '32' THEN TXN =         'UTILOUTP';\nIF CMD = '33' THEN TXN =         'UTILOUTR';\nIF CMD = '@;' THEN TXN =         'UTILOUTL';\nIF CMD = '20' THEN TXN =         'SCRIPTD ';\nIF CMD = '21' THEN TXN =         'SCRIPTF ';\nIF CMD = '3P' THEN TXN =         'SCRIPT  ';\nIF CMD = '49' THEN TXN =         'PANBRWSE';\nIF CMD = '4A' THEN TXN =         'PANEDIT ';\nIF CMD = '4B' THEN TXN =         'PANCHNGE';\nIF CMD = '4C' THEN TXN =         'PANMANIP';\nIF CMD = '4D' THEN TXN =         '$DMPROGM';\nIF CMD = '4E' THEN TXN =         '$DMPANEL';\nIF CMD = '01' THEN TXN =         'AFTER   ';\nIF CMD = '02' THEN TXN =         'BEFORE  ';\nIF CMD = '03' THEN TXN =         'BOUNDS  ';\nIF CMD = '04' THEN TXN =         'COLS    ';\nIF CMD = '05' THEN TXN =         'COPY    ';\nIF CMD = '06' THEN TXN =         'DELETE  ';\nIF CMD = '07' THEN TXN =         'INSERT  ';\nIF CMD = '08' THEN TXN =         'MASK    ';\nIF CMD = '09' THEN TXN =         'MOVE    ';\nIF CMD = '11' THEN TXN =         'OVERLAY ';\nIF CMD = '0A' THEN TXN =         'REPEAT  ';\nIF CMD = '0B' THEN TXN =         'DATASHFT';\nIF CMD = '0C' THEN TXN =         'DATASHFT';\nIF CMD = '0D' THEN TXN =         'TABS    ';\nIF CMD = '0E' THEN TXN =         'SHOW    ';\nIF CMD = '0F' THEN TXN =         'EXCLUDE ';\nIF CMD = '0G' THEN TXN =         'FIRST   ';\nIF CMD = '0H' THEN TXN =         'LAST    ';\nIF CMD = '0I' THEN TXN =         'COLSHIFT';\nIF CMD = '0J' THEN TXN =         'COLSHIFT';\nIF CMD = '0K' THEN TXN =         'TXTENTRY';\nIF CMD = '0L' THEN TXN =         'TXTFLOW ';\nIF CMD = '0M' THEN TXN =         'TXTSPLIT';\nIF CMD = '0N' THEN TXN =         'MOVE$   ';\nIF CMD = '3B' THEN TXN =         'EDITERR ';\nIF CMD = '3C' THEN TXN =         'MOVCOP$ ';\nIF CMD = '3D' THEN TXN =         'EDITOPTS';\nIF CMD = '3E' THEN TXN =         'MODEL   ';\nIF CMD = '3F' THEN TXN =         'SORT    ';\nIF CMD = '3G' THEN TXN =         'CREATREP';\nIF CMD = '3H' THEN TXN =         'DELETE$ ';\nIF CMD = '3I' THEN TXN =         'LC      ';\nIF CMD = '3J' THEN TXN =         'UC      ';\nIF CMD = '3Y' THEN TXN =         'MICSSAF ';\nIF CMD = '0O' THEN TXN =         'CANCEL  ';\nIF CMD = '0P' THEN TXN =         'CHANGE  ';\nIF CMD = '0Q' THEN TXN =         'FIND    ';\nIF CMD = '@H' THEN TXN =         'RCHANGE ';\nIF CMD = '@I' THEN TXN =         'RFIND   ';\nIF CMD = '0R' THEN TXN =         'LOCATE  ';\nIF CMD = '0S' THEN TXN =         'PROFILE ';\nIF CMD = '4Q' THEN TXN =         'AUTOLIST';\nIF CMD = '4R' THEN TXN =         'AUTONUM ';\nIF CMD = '4S' THEN TXN =         'AUTOSAVE';\nIF CMD = '4T' THEN TXN =         'PACK    ';\nIF CMD = '4F' THEN TXN =         'VERSION ';\nIF CMD = '4G' THEN TXN =         'LEVEL   ';\nIF CMD = '4H' THEN TXN =         'EDRECUR ';\nIF CMD = '4P' THEN TXN =         'DEFINE  ';\nIF CMD = '4I' THEN TXN =         'NOTES   ';\nIF CMD = '0T' THEN TXN =         'RESET   ';\nIF CMD = '0U' THEN TXN =         'SAVE    ';\nIF CMD = '0V' THEN TXN =         'SUBMIT  ';\nIF CMD = '0W' THEN TXN =         'ASIS    ';\nIF CMD = '0Y' THEN TXN =         'CAPS    ';\nIF CMD = '0Z' THEN TXN =         'COPY$   ';\nIF CMD = '10' THEN TXN =         'CREATE  ';\nIF CMD = '12' THEN TXN =         'HEX     ';\nIF CMD = '13' THEN TXN =         'NONULLS ';\nIF CMD = '14' THEN TXN =         'NONUMBER';\nIF CMD = '15' THEN TXN =         'NOTABS  ';\nIF CMD = '16' THEN TXN =         'NULLS   ';\nIF CMD = '17' THEN TXN =         'NUMBER  ';\nIF CMD = '18' THEN TXN =         'PRINT   ';\nIF CMD = '19' THEN TXN =         'RECOVERY';\nIF CMD = '1A' THEN TXN =         'RENUMBER';\nIF CMD = '1B' THEN TXN =         'REPLACE ';\nIF CMD = '1C' THEN TXN =         'STATS   ';\nIF CMD = '1D' THEN TXN =         'TABS    ';\nIF CMD = '1E' THEN TXN =         'UNNUMBER';\nRETURN;\n\n   OPTIONS OBS=MAX ;\n\n   PROC SUMMARY DATA=WORK.CMDS NWAY;\n    CLASS TYPE TXN;\n    VAR NRTR;\n    OUTPUT OUT=CMDSUMRY SUM=COUNT;\n\n   PROC SUMMARY DATA=WORK.USRINTVL NWAY;\n    CLASS USER;\n    VAR   CPU THINK TRIVRESP TOTSHORT RESPONSE TRANS ;\n    OUTPUT OUT=USRSUMRY\n    MEAN(THINK TRIVRESP RESPONSE)=\n    SUM(CPU TOTSHORT TRANS)= ;\n\n   PROC SUMMARY DATA=WORK.CMDRECS NWAY;\n    CLASS TXN;\n    VAR CPU EXCP SERVUNIT;\n    OUTPUT OUT=COMMANDS SUM= N(CPU)=COUNT;\n\n   PROC PRINT DATA = COMMANDS; ID TXN;\n    VAR COUNT CPU EXCP SERVUNIT;\n    SUM COUNT CPU EXCP SERVUNIT;\n\n   PROC SORT DATA = COMMANDS; BY DESCENDING CPU;\n   OPTIONS OBS=12;\n   DATA COMMANDS;\n    SET COMMANDS;\n   OPTIONS OBS=MAX;\n   PROC SORT DATA=COMMANDS; BY TXN;\n\n   PROC CHART DATA = COMMANDS;\n    VBAR TXN / TYPE=SUM SUMVAR=CPU DISCRETE NOSPACE;\n\n   PROC PRINT DATA = USRSUMRY; ID USER;\n    VAR CPU THINK TRIVRESP TOTSHORT RESPONSE TRANS ;\n    SUM CPU TOTSHORT TRANS;\n\n   PROC PRINT DATA = CMDSUMRY; ID TXN; VAR TYPE COUNT;\n   SUM COUNT;\n./       ADD   NAME=SYSLOG5\nOPTIONS OBS=MAX;\n\nDATA A;\n INFILE SYSLOG\n LENGTH=LENGTH MISSOVER;\n INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */\n           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */\n @ ;\n IF HCLRECTP='X' /* UNKNOWN SOURCE                                */\n  | HCLRECTP='S' /* CONTINUATION LINE                             */\n  | HCLRECTP='L' /* MLWTO LABEL LINE                              */\n  | HCLRECTP='D' /* MLWTO DATA LINE                               */\n  | HCLRECTP='E' /* MLWTO END LINE                                */\n THEN DELETE;\n INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */\n           HCLROUTC   HEX7.    /* ROUTING CODES                      */\n           HCLRV1     $CHAR1.  /* BLANK                              */\n           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */\n           HCLRV2     $CHAR1.  /* BLANK                              */\n           HCLYEAR    $CHAR2.  /* YEAR                  YY           */\n           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */\n           HCLRV3     $CHAR1.  /* BLANK                              */\n           HCLHR      $CHAR2.  /* HOURS                 HH           */\n           HCLCOLN1   $CHAR1.  /* COLON                   :          */\n           HCLMIN     $CHAR2.  /* MINUTES                  MM        */\n           HCLCOLN2   $CHAR1.  /* COLON                      :       */\n           HCLSEC     $CHAR2.  /* SECONDS                     SS     */\n           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */\n           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */\n           HCLRV4     $CHAR1.  /* BLANK                              */\n           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */\n           HCLRV5     $CHAR1.  /* BLANK                              */\n           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */\n           HCLRV6     $CHAR1.  /* BLANK                              */\n           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */\n           @ ;\n\n\n\n IF HCLRECTP='W'               /* WTOR. */\n THEN DO;\n    INPUT HCLRV7 $CHAR3. @ ;\n    LENGTH=LENGTH-3;\n END;\n LENGTH=LENGTH-57;\n INPUT\n           HCLTEXT $VARYING78. LENGTH\n           ;\n\n IF HCLREQTP\u00ac=' ' & HCLREQTP\u00ac='R'\n THEN DELETE;\n ELSE DO;\n    MSGID=SUBSTR(HCLTEXT,1,9);\n    MSGID=SCAN(MSGID,1,' ');\n    IF SUBSTR(MSGID,1,1)='+'\n    THEN MSGID=SUBSTR(MSGID,2);\n END;\n IF MSGID='IST264I';\n LUNAME=SUBSTR(HCLTEXT,27,8);\n IF LUNAME=:'TPXUN';\n YY=PUT(HCLYEAR,2.);\n DDD=PUT(HCLDAY,3.);\n J=(YY*1000)+DDD;\n DATE=DATEJUL(J);\n HH=PUT(HCLHR,2.);\n MM=PUT(HCLMIN,2.);\n SS=PUT(HCLSEC,2.);\n TIME=(HH*3600)+(MM*60)+SS;\n HOUR=HH;\n\n\nPROC SUMMARY NWAY;\n CLASS DATE;\n VAR HH;\n OUTPUT OUT=S N= ;\n\nPROC PRINT; ID DATE; VAR N;\n FORMAT DATE DATE.;\n\nPROC SORT;\n BY DATE HOUR;\n\nPROC CHART;\n VBAR HOUR / TYPE=FREQ DISCRETE NOSPACE;\n BY DATE;\n FORMAT DATE DATE.;\n./       ADD   NAME=TMRECORD\nDATA A;\n INFILE TMC;\n INPUT\n     TMDSN          $44.            /* DATA SET NAME                 */\n          @;\n IF SUBSTR(TMDSN,1,1) < 'A'\n  | SUBSTR(TMDSN,1,1) > 'Z' THEN DELETE;\n INPUT\n     TMSTPNAM       $8.             /* CREATING STEP NAME            */\n     TMSLOT         IB2.            /* VAULT SLOT NUMBER             */\n     TMVOLSEQ       IB2.            /* VOLUME SEQUENCE NUMBER        */\n     TMCRTDT1       PD3.            /* CREATION DATE                 */\n     TMEXPDT1       PD3.            /* EXPIRATION DATE               */\n     TMTRTCH        IB1.            /* RECORDING TECHNIQUE           */\n     TMDEN          IB1.            /* DENSITY                       */\n     TMLTYPE        IB1.            /* TAPE LABEL TYPE               */\n     TMRECFM        IB1.            /* RECORD FORMAT                 */\n     TMBLKSI        IB2.            /* MAXIMUM BLOCK SIZE            */\n     TMLRECL        IB2.            /* LOGICAL RECORD LENGTH         */\n     TMFLAG2        IB1.            /* INTERNAL FLAG BITS            */\n     TMVOLSER       $6.             /* VOLUME SERIAL NUMBER          */\n     TMNXTVOL       $6.             /* NEXT VOLSER OF DATA SET       */\n     TMPRVVOL       $6.             /* PREVIOUS VOLSER OF DATA SET   */\n     TMDSSIF        IB1.            /* INTERNAL FLAGS FOR PASSWORD   */\n     TMDSSPW        IB4.            /* DATA SET SECURITY PASSWORD    */\n     TMDSNBS        IB2.            /* NUMBER OF DATA SET NAME BLOCKS*/\n     TMADSNB        IB4.            /* ADDRESS OF 1ST DSNB           */\n     TMFRSVOL       $6.             /* FIRST VOLSER OF DATA SET      */\n     TMBATCH        IB1.            /* BATCH UPDATE ID NUMBER        */\n     TMFLAG3        IB1.            /* INTERNAL FLAG BITS            */\n     TMCRTTI        PD3.            /* CREATION TIME                 */\n     TMCRUNI        IB2.            /* CREATION UNIT                 */\n     TMUSUNI        IB2.            /* UNIT LAST USED                */\n     TMLASUSD       PD3.            /* DATE LAST USED                */\n     TMLASUSJ       $8.             /* JOB NAME WHICH LAST USED VOL  */\n     TMBTHDT        PD3.            /* DATE TAPE IS FIRST USED       */\n     TMUCOUNT       IB2.            /* NUMBER OF TIMES TAPE OPENED   */\n     TMFLAG1       PIB1.            /* INTERNAL FLAG BITS            */\n     TMCLNCNT       IB1.            /* NUMBER OF TIMES TAPE $EANED   */\n     TMOUTDAT       PD3.            /* DATE TAPE WAS TAKEN OUT       */\n     TMOUTAR        $4.             /* OUT OF AREA CODE              */\n     TMUSECLN       IB2.            /* USE COUNT AT LAST $EANING     */\n     TMDATCLN       PD3.            /* DATE OF LAST $EANING          */\n     TMBLKCNT       IB4.            /* DATA SET BLOCK COUNT          */\n     TMRERROR       IB1.            /* NUMBER OF READ ERRORS         */\n     TMWERROR       IB1.            /* NUMBER OF WRITE ERRORS        */\n     TMJOBNM        $8.             /* CREATING JOB NAME             */\n     @;\n    IF TMCRTDT1\u00ac=.\n    THEN TMCRTDT=PUT(DATEJUL(TMCRTDT1),DATE.);\n    ELSE TMCRTDT='.';\n    DROP TMCRTDT1;\n    IF TMEXPDT1\u00ac=.\n    THEN TMEXPDT=PUT(DATEJUL(TMEXPDT1),DATE.);\n    ELSE TMEXPDT='.';\n    DROP TMEXPDT1;\n    IF TMFLAG1='.....1..'B\n    THEN VOLTYPE='SCRATCH';\n    ELSE VOLTYPE='FILE   ';\n    LENGTH HLQ $ 8;\n    I=INDEX(TMDSN,'.');\n    IF I=0 THEN I=LENGTH(TMDSN);\n    HLQ=SUBSTR(TMDSN,1,I-1);\n\nPROC SORT; BY TMDSN TMVOLSER;\n\nPROC PRINT;\n ID TMDSN;\n VAR TMVOLSER TMCRTDT TMEXPDT TMBLKSI TMFLAG1 TMBLKCNT TMJOBNM   ;\n FORMAT TMFLAG1 BINARY. ;\n\nPROC FREQ;\n TABLES HLQ;\n./       ADD   NAME=TTOC\nDATA TTOC\n     (KEEP=VOLSER TYPE DATASETS FULL VSAM VALID\n     PREVVOL NEXTVOL\n     BLOCKS PSWD RCYCLMSG\n     );\n INFILE OCDS VSAM BUFND=16 BUFNI=16 EOF=EOFOCDS;\n INPUT @001 TTCKEY  $44.\n       @045 MCHLEN  IB2.\n       @047 MCKTYPE IB2.\n       @049 MCHTSLU        TODSTAMP8.\n       @057 MCHTSCR        TODSTAMP8.\n       @065 TTCHSTID       $1.\n       @066 TTCFFLGS       IB2.\n       @069 TTCUNIT        $8.\n       @077 TTCNUM         IB2.\n       @079 TTCDSNUM       IB2.\n       @081 TTCTBLK        IB4.\n       @085 TTCVBLK        IB4.\n       @089 TTCPREVL       $6.\n       @095 TTCSUCVL       $6.\n       @101 TTCLFBID       IB4.\n       @105 TTCFFBID       IB4.\n       @ ;\n RETAIN\n           VOLSER TYPE DATASETS FULL VSAM VALID\n     PREVVOL NEXTVOL\n     BLOCKS PSWD RCYCLMSG\n ;\n IF SUBSTR(TTCKEY,12,4)='0000'\n THEN DO;\n    OUTPUT;\n    VALID=0;\n    VSAM=0;\n    DATASETS=0;\n    BLOCKS=0;\n    VOLSER=SUBSTR(TTCKEY,5,6);\n    FULL=REPEAT(' ',3);\n    PREVVOL=TTCPREVL;\n    NEXTVOL=TTCSUCVL;\n    IF TTCFFLGS='1...............'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF TTCFFLGS='...1............'B\n    THEN PSWD='YES';\n    ELSE PSWD='NO ';\n    IF TTCFFLGS='....1...........'B\n    THEN RCYCLMSG='YES';\n    ELSE RCYCLMSG='NO ';\n    IF SUBSTR(TTCKEY,2,2) ='SP' THEN TYPE='SPILL       ';\n    IF SUBSTR(TTCKEY,2,2) ='UN' THEN TYPE='UNASSIGNED  ';\n    IF SUBSTR(TTCKEY,2,2) ='L2' THEN TYPE='LEVEL 2     ';\n    IF SUBSTR(TTCKEY,2,2)>='00' THEN TYPE='DAILY BACKUP';\n END;\n DATASETS=DATASETS+TTCDSNUM;\n DO COL=157 TO MCHLEN BY 56;\n    INPUT @COL              TTCDSN        $44.\n          @COL+044          TTCNBLKS      IB4.\n          @COL+048          TTCDLR     ?? PD3.\n          @COL+052          TTCEFLGS      IB1.\n          @COL+053          TTCEXPDT   ?? PD3.\n          @ ;\n    IF TTCEFLGS='.1......'B THEN VALID=VALID+1;\n    IF TTCEFLGS='1.......'B THEN VSAM=VSAM+1;\n    BLOCKS=BLOCKS+TTCNBLKS;\n END;\n RETURN;\n EOFOCDS: OUTPUT;\n\nDATA TTOC;\n SET TTOC;\n IF DATASETS=. THEN DELETE;\n\nPROC PRINT; ID VOLSER;\n SUM DATASETS VALID BLOCKS;\n./       ADD   NAME=VTAMOBR\nDATA A;\n INFILE SERLOG ;\n INPUT @001   TYPE     IB1.\n       @ ;\n       IF TYPE='0001....'B THEN CLASS='MACHINE CHECK      ';\n  ELSE IF TYPE='0010....'B THEN CLASS='CHANNEL CHECK      ';\n  ELSE IF TYPE='0011....'B THEN CLASS='UNIT CHECK (OBR)   ';\n  ELSE IF TYPE='0100....'B THEN CLASS='SOFTWARE ERROR     ';\n  ELSE IF TYPE='0101....'B THEN CLASS='IPL RECORD         ';\n  ELSE IF TYPE='0110....'B THEN CLASS='DDR RECORD         ';\n  ELSE IF TYPE='0111....'B THEN CLASS='MISSING INTERRUPT  ';\n  ELSE IF TYPE='1000....'B THEN CLASS='SYSTEM TERMINATION ';\n  ELSE IF TYPE='1001....'B THEN CLASS='NON-STANDARD MDR   ';\n  ELSE IF TYPE='1010....'B THEN CLASS='MACHINE CHECK FRAME';\n  ELSE IF TYPE='1011....'B THEN CLASS='CHANNEL CHECK FRAME';\n\nPROC FREQ DATA=WORK.A;\n TABLES CLASS;\n\nDATA OBR (KEEP=DATE TIME JOBID CCW DEVTYPE PCUA SENSE LEVEL DATE1)\n     SFT (KEEP=DATE TIME JOBID PROGRAM ABEND LMOD CSECT DATE1)\n ;\n INFILE SERLOG MISSOVER;\n INPUT @001   TYPE     IB1.\n       @ ;\n\n  IF TYPE='0011....'B THEN LINK TYPE03;\n  IF TYPE='0100....'B THEN LINK TYPE04;\n  RETURN;\n  TYPE03:\n /*   IF TYPE\u00ac='0011.11.'B THEN DELETE;     VTAM OBR RECORD. */\n  INPUT @003   SWITCHES IB2.\n        @ ;\n /*   IF SWITCHES='..........0.....'B ; */\n  IF SWITCHES='.............1..'B THEN DELETE; /* VOLUME DEMOUNT. */\n  IF SWITCHES='.........1......'B THEN LEVEL='TEMP'; ELSE LEVEL='PERM';\n  INPUT @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @033   CCW      $PHEX8.\n        @049   DEVDEPC  IB1.\n        @053   DEVT1    $PHEX5.\n        @057   SDRCNT   IB1.\n        @058   PCUA1    $PHEX4.\n        @063   SENSCNT  IB2.\n        @ ;\n  SENSOFF=65+(DEVDEPC*8)+SDRCNT;\n  INPUT @SENSOFF SENSE1  $PHEX5.\n        @ ;\n  YY = ROUND(DATE1,1000);\n  DDD = DATE1-YY;\n  YY = YY/1000;\n  DATE = DATEJUL(1000*YY+DDD);\n  PCUA=SUBSTR(PCUA1,4,3);\n  DEVTYPE=SUBSTR(DEVT1,1,8);\n  SENSE=SUBSTR(SENSE1,1,8);\n /* IF SUBSTR(SENSE,1,2)='40' & DEVTYPE='1000080E' THEN DELETE; */\n  IF DEVTYPE='12501009' THEN DEVTYPE='3270  ';\n  IF DEVTYPE='500040F1' THEN DEVTYPE='3270  ';\n  IF DEVTYPE='50004015' THEN DEVTYPE='3270  ';\n  IF DEVTYPE='80062024' THEN DEVTYPE='3390  ';\n  IF DEVTYPE='80062023' THEN DEVTYPE='3380  ';\n  IF DEVTYPE='10800811' THEN DEVTYPE='4245  ';\n  IF DEVTYPE='0000080F' THEN DEVTYPE='3825  ';\n  IF DEVTYPE='78048080' THEN DEVTYPE='3490  ';\n  IF DEVTYPE='78008000' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='78008080' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='32108003' THEN DEVTYPE='3420  ';\n  IF DEVTYPE='1000080E' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='10800809' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='1200100B' THEN DEVTYPE='3286  ';\n  IF DEVTYPE='12801009' THEN DEVTYPE='3277  ';\n  IF DEVTYPE='12201009' THEN DEVTYPE='3278  ';\n  IF DEVTYPE='10014100' THEN DEVTYPE='CTCA  ';\n  IF DEVTYPE='3010200E' THEN DEVTYPE='3380  ';\n  OUTPUT OBR;\n  RETURN;\n\n  TYPE04:\n  INPUT @004   HDRDS    IB1.\n        @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @037   ABEND    $PHEX4.\n        @121   PROGRAM  $8.\n        @325   LMOD     $8.\n        @333   CSECT    $8.\n        @ ;\n  IF HDRDS='1.......'B THEN DELETE;\n  IF HDRDS='.1......'B THEN DELETE;\n  YY = ROUND(DATE1,1000);\n  DDD = DATE1-YY;\n  YY = YY/1000;\n  DATE = DATEJUL(1000*YY+DDD);\n  OUTPUT SFT;\n  RETURN;\n\n\nPROC SUMMARY DATA=WORK.OBR NWAY;\n CLASS DEVTYPE DATE;\n ID DATE;\n VAR TIME;\n OUTPUT OUT=S N=COUNT;\nPROC SORT; BY DEVTYPE DATE;\nPROC PLOT;\n PLOT COUNT*DATE; BY DEVTYPE;\n FORMAT DATE DATE. ;\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASOLDER": {"ttr": 29190, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00T\\x00\\x89\\x15_\\x01\\x01\"\\x0f\\x14\\x10\\x08\\xf7\\x08\\xf7\\x00\\x00\\xd1\\xc9\\xd4\\xd3\\xc1\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-06-04T00:00:00", "modifydate": "2001-08-08T14:10:54", "lines": 2295, "newlines": 2295, "modlines": 0, "user": "JIMLANE"}, "text": "./ ADD NAME=SASEREP  0100-89155-89155-1410-00101-00101-00000-JIMLANE\n/*\nDATA A;\n INFILE SERLOG ;\n INPUT @001   TYPE     IB1.\n       @ ;\n       IF TYPE='0001....'B THEN CLASS='MACHINE CHECK      ';\n  ELSE IF TYPE='0010....'B THEN CLASS='CHANNEL CHECK      ';\n  ELSE IF TYPE='0011....'B THEN CLASS='UNIT CHECK (OBR)   ';\n  ELSE IF TYPE='0100....'B THEN CLASS='SOFTWARE ERROR     ';\n  ELSE IF TYPE='0101....'B THEN CLASS='IPL RECORD         ';\n  ELSE IF TYPE='0110....'B THEN CLASS='DDR RECORD         ';\n  ELSE IF TYPE='0111....'B THEN CLASS='MISSING INTERRUPT  ';\n  ELSE IF TYPE='1000....'B THEN CLASS='SYSTEM TERMINATION ';\n  ELSE IF TYPE='1001....'B THEN CLASS='NON-STANDARD MDR   ';\n  ELSE IF TYPE='1010....'B THEN CLASS='MACHINE CHECK FRAME';\n  ELSE IF TYPE='1011....'B THEN CLASS='CHANNEL CHECK FRAME';\n\nPROC FREQ DATA=WORK.A;\n TABLES CLASS;\n */\n\nOPTIONS OBS=50000;\nDATA OBR (KEEP=DATE TIME JOBID CCW DEVTYPE PCUA SENSE LEVEL)\n     SFT (KEEP=DATE TIME JOBID PROGRAM ABEND LMOD CSECT)\n ;\n INFILE SERLOG MISSOVER;\n INPUT @001   TYPE     IB1.\n       @ ;\n\n  IF TYPE='0011....'B THEN LINK TYPE03;\n  IF TYPE='0100....'B THEN LINK TYPE04;\n  RETURN;\n  TYPE03:\n  IF TYPE='0011.11.'B THEN DELETE;  /* VTAM OBR RECORD. */\n  INPUT @003   SWITCHES IB2.\n        @ ;\n  IF SWITCHES='..........0.....'B ;\n  IF SWITCHES='.............1..'B THEN DELETE; /* VOLUME DEMOUNT. */\n  IF SWITCHES='.........1......'B THEN LEVEL='TEMP'; ELSE LEVEL='PERM';\n  INPUT @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @033   CCW      $PHEX8.\n        @049   DEVDEPC  IB1.\n        @053   DEVT1    $PHEX5.\n        @057   SDRCNT   IB1.\n        @058   PCUA1    $PHEX4.\n        @063   SENSCNT  IB2.\n        @ ;\n  SENSOFF=65+(DEVDEPC*8)+SDRCNT;\n  INPUT @SENSOFF SENSE1  $PHEX5.\n        @ ;\n  DATE=PUT(DATEJUL(DATE1),DATE.);\n  PCUA=SUBSTR(PCUA1,4,3);\n  DEVTYPE=SUBSTR(DEVT1,1,8);\n  SENSE=SUBSTR(SENSE1,1,8);\n  IF SUBSTR(SENSE,1,2)='40' & DEVTYPE='1000080E' THEN DELETE;\n  IF DEVTYPE='78008000' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='78008080' THEN DEVTYPE='3480  ';\n  IF DEVTYPE='32108003' THEN DEVTYPE='3420  ';\n  IF DEVTYPE='1000080E' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='10800809' THEN DEVTYPE='3800-3';\n  IF DEVTYPE='1200100B' THEN DEVTYPE='3286  ';\n  IF DEVTYPE='12801009' THEN DEVTYPE='3277  ';\n  IF DEVTYPE='12201009' THEN DEVTYPE='3278  ';\n  IF DEVTYPE='10014100' THEN DEVTYPE='CTCA  ';\n  IF DEVTYPE='3010200E' THEN DEVTYPE='3380  ';\n  OUTPUT OBR;\n  RETURN;\n\n  TYPE04:\n  INPUT @004   HDRDS    IB1.\n        @009   DATE1    PD4.\n        @013   TIME     TU4.\n        @025   JOBID    $8.\n        @037   ABEND    $PHEX4.\n        @121   PROGRAM  $8.\n        @325   LMOD     $8.\n        @333   CSECT    $8.\n        @ ;\n  IF HDRDS='1.......'B THEN DELETE;\n  IF HDRDS='.1......'B THEN DELETE;\n  DATE=PUT(DATEJUL(DATE1),DATE.);\n  OUTPUT SFT;\n  RETURN;\n\n\nPROC SUMMARY DATA=WORK.OBR NWAY;\n CLASS DEVTYPE LEVEL;\n VAR TIME;\n OUTPUT OUT=S N=COUNT;\nPROC PRINT; ID DEVTYPE; VAR LEVEL COUNT;\n\n\nPROC PRINT DATA=WORK.OBR;\n ID DATE;\n FORMAT TIME TIME. ;\n\nPROC PRINT DATA=WORK.SFT;\n ID DATE;\n FORMAT TIME TIME. ;\n./ ADD NAME=SASGTF   0100-89155-89155-1410-00072-00072-00000-JIMLANE\nDATA SVC;\n     INFILE IN MISSOVER            LENGTH=LRECL ;\n     INPUT    @1   RECTYPE  PIB2. @ ;\n     IF RECTYPE = '1111111100000001'B THEN DO ;*(SVC COMPREHENSIVE) ;\n        INPUT @3   CLOCK    TODSTAMP8.\n              @11  EVENT    PIB2.\n              @13  ASCB     PIB4.\n              @17  CPUID    PIB2.\n              @19  JOBNAME  $CHAR8.\n              @27  SVCOPSW  PIB8.\n              @29  SVC_NO   PIB2.\n              @35  TCB_OLD  PIB4.\n              @39  CDENAME  $CHAR8.\n              @47  REG15    PIB4.\n              @51  REG0     PIB4.\n              @55  REG1     PIB4.\n              @                    ;\n              TIME=TIMEPART(CLOCK) ;\n\n        FORMAT RECTYPE HEX4. ASCB HEX8. CPUID HEX4.\n\n        TIME TIME12. EVENT TCB_OLD SVCOPSW REG1 REG0 REG15 HEX4. ;\n        END;\n\n\n\n        IF SVC_NO = 6 THEN DO ;\n           TYPE='LINK  ' ;\n           INPUT @59 EP_NAME $CHAR8.;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO = 7 THEN DO ;\n           TYPE='XCTL  ' ;\n           INPUT @59 EP_NAME $CHAR8.;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n\n        IF SVC_NO = 8 THEN DO ;\n           TYPE='LOAD  ' ;\n           INPUT @59 EP_NAME $CHAR8. ;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO = 9 THEN DO ;\n           TYPE='DELETE' ;\n           INPUT @59 EP_NAME $CHAR8. ;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO =18 THEN DO ;\n           TYPE='BLDL  ' ;\n           INPUT @64 EP_NAME $CHAR8. ;\n           OUTPUT ;\n           RETURN ;\n        END ;\n\n        IF SVC_NO =42 THEN DO ;\n           TYPE='ATTACH' ;\n           INPUT +29 EP_NAME $CHAR8. ;\n           OUTPUT ;\n           RETURN ;\n        END ;\n        DELETE;\n\nPROC FREQ;\n TABLES EP_NAME;\n./ ADD NAME=SASHSM   0100-89155-89155-1410-01019-01019-00000-JIMLANE\n><       ADD   NAME=HLIST\nPROC FORMAT;\n VALUE TYPEFMT\n  0='DATA SET (CODE D)      '\n  1='USER (CODE U)          '\n  2='FREE SPACE ON ML1      '\n  4='VOLUME (CODE V)        '\n  7='JES3 VOLUME ALLOC COUNT'\n 16='STATISTICS OR CONTROL  '\n 17='MIGRATED COPY NAME     '\n 18='VSAM DATASET ASSOC.    '\n ;\nDATA A;\n INFILE MCDS VSAM BUFND=16 BUFNI=16 ;\n INPUT @045 MCHLEN  IB2.\n       @047 MCKTYPE IB1.\n         ;\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n FORMAT MCKTYPE TYPEFMT. ;\n TITLE COUNTS OF LOGICAL RECORD TYPES ON THE MCDS;\n\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n WEIGHT MCHLEN;\n FORMAT MCKTYPE TYPEFMT. ;\n TITLE PROPORTIONS OF THE TOTAL SPACE TAKEN BY MCDS RECORD TYPES;\n\nPROC DELETE DATA=WORK.A;\n\nDATA ML1 ML2\n MCV\n (KEEP=\n MCVVSN MCVMINAG MCVNMDS MCVNTRKM MCVFRAG\n VOLTYPE FULL AUTOMIGR AUTOBKUP EMPTY SINGLE\n )\n ;\n\n INFILE MCDS VSAM BUFND=16 BUFNI=16 ;\n\n INPUT\n      @001 TYPE       PIB1.\n      @  ;\n IF TYPE=04X THEN DO;\n    INPUT\n         @002 MCVVSN       $6.\n         @073 MCVFLGS      PIB2.\n         @123 MCVMINAG     PIB2.\n         @125 MCVNMDS      PIB2.\n         @127 MCVNTRKM     PIB2.\n         @129 MCVFRAG      PIB2.\n         @135 MCV3480F     PIB1.\n         @  ;\n\n    IF MCVFLGS='10..............'B\n    THEN VOLTYPE='PRIMARY';\n    IF MCVFLGS='00..............'B\n    THEN VOLTYPE='MIGR L1';\n    IF MCVFLGS='01..............'B\n    THEN VOLTYPE='MIGR L2';\n    IF MCVFLGS='.......1........'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF MCVFLGS='...1............'B\n    THEN AUTOMIGR='NO ';\n    ELSE AUTOMIGR='YES';\n    IF MCVFLGS='......1.........'B\n    THEN AUTOBKUP='YES';\n    ELSE AUTOBKUP='NO ';\n    IF MCVFLGS='..........1.....'B\n    THEN EMPTY='YES';\n    ELSE EMPTY='NO ';\n    IF MCV3480F='1.......'B\n    THEN SINGLE='YES';\n    ELSE SINGLE='NO ';\n    LABEL\n    MCVVSN  ='VOLUME*SERIAL*NUMBER                '\n    MCVMINAG='MINIMUM AGE*SELECTED*FOR MIGRATION  '\n    MCVNMDS ='DATASETS*PROCESSED*LAST MIGRATION   '\n    MCVNTRKM='TRACKS*FREED*LAST MIGRATION         '\n    MCVFRAG ='VOLUME*FRAGMENTATION*INDEX          '\n    VOLTYPE ='VOLUME*TYPE                         '\n    FULL    ='IS VOLUME*FULL?                     '\n    AUTOMIGR='AUTOMATIC*MIGRATION*ALLOWED         '\n    AUTOBKUP='AUTOMATIC*BACKUP*ALLOWED            '\n    EMPTY   ='IS*VOLUME*EMPTY?                    '\n    SINGLE  ='3480*SINGLEFILE*FORMAT?             '\n    ;\n    OUTPUT MCV;\n END;\n INPUT @001 MCDDSN  $44.\n       @045 MCHLEN  IB2.\n       @047 MCKTYPE IB2.\n       @ ;\n IF MCKTYPE=0 THEN DO;\n    INPUT @049 MCHTSLU        TODSTAMP8.\n          @057 MCHTSCR        TODSTAMP8.\n          @065 MCDVSN         $6.\n          @071 MCDFLG1        $CHAR1.\n          @072 MCDFLG2        IB1.\n          @073 MCDCOMPR       IB1.\n          @074 MCDRV          IB3.\n          @077 MCDDLC1     ?? PD4.\n          @081 MCDTLR         IB4.\n          @085 MCDDLR1     ?? PD4.\n          @089 MCDTLU         IB4.\n          @093 MCDDLU      ?? PD4.\n          @097 MCDTMIG        IB4.\n          @101 MCDDMIG1    ?? PD4.\n          @105 MCDDSORG       IB2.\n          @107 MCDBLKSZ       IB2.\n          @109 MCDKEYLN       IB1.\n          @110 MCDRECFM       IB1.\n          @111 MCDDSIND       IB1.\n          @112 MCDHID         $1.\n          @113 MCDSIZE        IB4.\n          @117 MCDSIZEB       IB4.\n          @121 MCDCSZ         IB4.\n          @125 MCDNMIG        IB2.\n          @127 MCDDAYS        IB2.\n          @129 MCDFRVSN       $6.\n          @135 FLASG2         IB1.\n          @136 MCDMCL43       $1.\n          @137 MCDCTID        $4.\n          @141 MCDUCBTY       IB4.\n          @145 MCDTRES        IB4.\n          @149 MCDDRES     ?? PD4.\n          @153 MCDMDEVT       IB4.\n          @157 MCDJDAYS       IB1.\n          @158 MCDJDATE       IB3.\n          @161 MCDJVEXD       IB3.\n          @164 MCDPDEP        IB1.\n          @165 MCDJCT         IB1.\n          @217 MCDEXPD1   ??  PD4.\n          @ ;\n    IF MCDFLG1='1.......'B;\n    IF MCDFLG1='....1...'B THEN SDSP='YES'; ELSE SDSP='NO ';\n    IF MCDFLG1='.....1..'B THEN LEVEL='ML2'; ELSE LEVEL='ML1';\n    I=INDEX(MCDDSN,'.');\n    IF I=0 THEN I=8;\n    HIQUAL=SUBSTR(MCDDSN,1,I-1);\n    I=INDEX(MCDDSN,' ');\n    DO J = 1 TO I;\n       IF SUBSTR(MCDDSN,J,1)='.'\n       THEN LOWQUAL=SUBSTR(MCDDSN,J+1);\n    END;\n    DROP I J;\n    IF MCDDLC1\u00ac=.\n    THEN MCDDLC=PUT(DATEJUL(MCDDLC1),DATE.);\n    ELSE MCDDLC='.';\n    IF MCDDLR1\u00ac=.\n    THEN MCDDLR=PUT(DATEJUL(MCDDLR1),DATE.);\n    ELSE MCDDLR='.';\n    IF MCDDMIG1\u00ac=.\n    THEN MCDDMIG=PUT(DATEJUL(MCDDMIG1),DATE.);\n    ELSE MCDDMIG='.';\n    IF MCDEXPD1\u00ac=.\n    THEN MCDEXPDT=PUT(DATEJUL(MCDEXPDT),DATE.);\n    ELSE MCDEXPDT='.';\n    AGE=TODAY()-DATEJUL(MCDDLR1);\n    FORMAT AGE 3.;\n    IF LEVEL='ML1'\n    THEN DO;\n       IF SDSP='NO'\n       THEN ML1TRKS=CEIL(MCDCSZ/18);\n       ELSE ML1TRKS=MCDCSZ/18;\n    END;\n    ELSE ML1TRKS=0;\n    IF LEVEL='ML1' THEN OUTPUT ML1;\n    IF LEVEL='ML2' THEN OUTPUT ML2;\n END;\n    LABEL\n    HIQUAL  ='HIGH*LEVEL*QUALIFIER                '\n    MCDDSN  ='DATA*SET*NAME                       '\n    MCDDLC  ='CREATION*DATE                       '\n    MCDDLC  ='DATE*LAST*REFERENCED                '\n    MCDDMIG ='DATE*MIGRATED                       '\n    MCDVSN  ='MIGRATION*VOLUME*SERIAL             '\n    MCDFRVSN='VOLUME*MIGRATED*FROM                '\n    SDSP    ='MIGRATED*INTO*SDSP?                 '\n    MCDCOMPR='PERCENT*COMPRESSED                  '\n    MCDSIZE ='ORIGINAL*SIZE*IN TRKS               '\n    ;\n\nPROC PRINT DATA=WORK.MCV SPLIT=*; ID MCVVSN;\n TITLE PRIMARY AND MIGRATION VOLUMES CONTROLLED BY DFHSM;\n TITLE2 ;\n\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS HIQUAL ;\n VAR MCDCSZ ML1TRKS MCDCOMPR AGE;\n OUTPUT OUT=S N(MCDCSZ)=DATASETS SUM(ML1TRKS)=\n MEAN(MCDCOMPR)=AVGCOMPR MEAN(AGE)=AVGAGE\n SUM(MCDSIZE)=ML0TRKS;\n    LABEL\n    AVGAGE  ='AVERAGE*DAYS*UNUSED                 '\n    ML0TRKS ='TRACKS*USED ON*LEVEL 0              '\n    ML1TRKS ='TRACKS*USED ON*LEVEL 1              '\n    AVGCOMPR='AVERAGE*PERCENT*COMPRESSION         '\n    ;\n\nPROC PRINT DATA=WORK.S;\n ID HIQUAL; VAR DATASETS AVGAGE ML0TRKS ML1TRKS AVGCOMPR;\n TITLE SUMMARY OF MIGRATED DATASETS BY HIGH LEVEL QUALIFIER;\n TITLE2 LEVEL 1 ONLY;\n SUM DATASETS ML0TRKS ML1TRKS;\n\n\nPROC SUMMARY DATA=WORK.ML2 NWAY;\n CLASS HIQUAL ;\n VAR MCDCSZ ML1TRKS MCDCOMPR AGE;\n OUTPUT OUT=S N(MCDCSZ)=DATASETS SUM(ML1TRKS)=\n MEAN(MCDCOMPR)=AVGCOMPR MEAN(AGE)=AVGAGE\n SUM(MCDSIZE MCDCSZ)=ML0TRKS ML2BLKS;\n    LABEL\n    AVGAGE  ='AVERAGE*DAYS*UNUSED                 '\n    ML0TRKS ='TRACKS*USED ON*LEVEL 0              '\n    ML2TRKS ='TRACKS*USED ON*LEVEL 2              '\n    AVGCOMPR='AVERAGE*PERCENT*COMPRESSION         '\n    ;\n\nPROC PRINT DATA=WORK.S;\n ID HIQUAL; VAR DATASETS AVGAGE ML0TRKS ML2BLKS AVGCOMPR;\n TITLE SUMMARY OF MIGRATED DATASETS BY HIGH LEVEL QUALIFIER;\n TITLE2 LEVEL 2 ONLY;\n SUM DATASETS ML0TRKS ML2BLKS;\n\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS MCDVSN ;\n VAR MCDCSZ;\n OUTPUT OUT=S N=DATASETS SUM=BLOCKS;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;\n TITLE SUMMARY OF MIGRATED DATASETS BY ML1 VOLUME;\n TITLE2 ;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;\n TITLE SUMMARY OF BLOCKS ON ML1 VOLUMES;\n TITLE2 ;\n\n\nPROC SUMMARY DATA=WORK.ML2 NWAY;\n CLASS MCDVSN ;\n VAR MCDCSZ;\n OUTPUT OUT=S N=DATASETS SUM=BLOCKS;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;\n TITLE SUMMARY OF MIGRATED DATASETS BY ML2 VOLUME;\n TITLE2 ;\n\nPROC CHART DATA=WORK.S;\n VBAR MCDVSN / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;\n TITLE SUMMARY OF BLOCKS ON ML2 VOLUMES;\n TITLE2 ;\n\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS SDSP ;\n VAR MCDCSZ;\n OUTPUT OUT=S N=DATASETS SUM=BLOCKS;\n\nPROC CHART DATA=WORK.S;\n VBAR SDSP / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;\n TITLE SUMMARY OF MIGRATED DATASETS BY SDSP VS NOSDSP;\n\nPROC CHART DATA=WORK.S;\n VBAR SDSP / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;\n TITLE SUMMARY OF 2K BLOCKS BY SDSP VS NOSDSP;\n\n\n\nPROC SORT DATA=WORK.ML1; BY DESCENDING ML1TRKS;\n\nOPTIONS OBS=50;\nPROC PRINT UNIFORM DATA=WORK.ML1;\n ID MCDDSN;\n VAR MCDDLC MCDDLR MCDDMIG\n MCDVSN MCDFRVSN SDSP MCDCOMPR MCDSIZE ML1TRKS;\n SUM MCDSIZE ML1TRKS;\n TITLE LISTING OF LARGEST MIGRATED DATASETS ON LEVEL 1;\n\nOPTIONS OBS=MAX;\nPROC SUMMARY DATA=WORK.ML1 NWAY;\n CLASS LOWQUAL;\n VAR ML1TRKS MCDCOMPR;\n OUTPUT OUT=S N(MCDCOMPR)=DATASETS SUM(ML1TRKS)=\n MEAN(MCDCOMPR)= ;\n\nDATA S;\n SET S;\n IF DATASETS GT 9 OR ML1TRKS GT 99;\n\nPROC PRINT DATA=WORK.S;\n ID LOWQUAL; VAR DATASETS ML1TRKS MCDCOMPR;\n             SUM DATASETS ML1TRKS;\n TITLE AVERAGE COMPRESSION AMOUNT BY LOWEST LEVEL QUALIFIER;\n\n\n\nPROC UNIVARIATE DATA=WORK.ML1 NOPRINT;\n VAR MCDSIZE;\n OUTPUT OUT=S1 N=DATASETS MEAN=AVGSIZE P90=PCTL90\n P95=PCTL95 P99=PCTL99 MAX=LARGEST ;\n\nPROC PRINT DATA=WORK.S1; ID DATASETS;\n TITLE STATISTICS ON ORIGINAL SIZES OF MIGRATED DATASETS;\n TITLE2 IN TRACKS - LEVEL 1;\n\nPROC UNIVARIATE DATA=WORK.ML2 NOPRINT;\n VAR MCDSIZE;\n OUTPUT OUT=S2 N=DATASETS MEAN=AVGSIZE P90=PCTL90\n P95=PCTL95 P99=PCTL99 MAX=LARGEST ;\n\nPROC PRINT DATA=WORK.S2; ID DATASETS;\n TITLE STATISTICS ON ORIGINAL SIZES OF MIGRATED DATASETS;\n TITLE2 IN TRACKS - LEVEL 2;\n\nPROC FORMAT;\n VALUE BTYPFMT\n  32='DATA SET (CODE B)      '\n  33='DUMP VOLUME            '\n  34='DUMP CLASS             '\n  36='BACKUP VERSION ENTRY   '\n  38='MOVE BACKUP COPY       '\n  39='BACKUP MIGRATED DATASET'\n  40='VOLUME BACKED UP       '\n  41='DUMP GENERATION        '\n  44='BACKUP VOLUME          '\n  48='CONTROL                '\n ;\nDATA A;\n INFILE BCDS VSAM BUFND=16 BUFNI=16 ;\n INPUT @045 MCHLEN  IB2.\n       @047 MCKTYPE IB1.\n         ;\n\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n FORMAT MCKTYPE BTYPFMT. ;\n TITLE COUNTS OF LOGICAL RECORD TYPES ON THE BCDS;\n TITLE2 ;\n\nPROC FREQ DATA=WORK.A;\n TABLES MCKTYPE;\n WEIGHT MCHLEN;\n FORMAT MCKTYPE BTYPFMT. ;\n TITLE PROPORTIONS OF THE TOTAL SPACE TAKEN BY BCDS RECORD TYPES;\n\n\nDATA\n MCT\n (KEEP=\n MCTVSN MCTDAY MCTTSFBD MCTTSLBD MCTTSLCD\n FULL SINGLE\n )\n MCP\n (KEEP=\n MCPVSN MCPTSLBD MCPTSLBT\n AUTORECL AUTOBKUP VOLTYPE\n )\n ;\n INFILE BCDS VSAM BUFND=16 BUFNI=16 ;\n INPUT\n      @001 TYPE       PIB1.\n      @  ;\n IF TYPE=2CX THEN DO;\n    INPUT\n         @002 MCTVSN       $6.\n         @083 MCTFLGS      PIB2.\n         @105 MCTTSFB1  ?? PD4.\n         @113 MCTTSLB1  ?? PD4.\n         @127 MCTVOLSQ     PIB2.\n         @168 MCTDAY       PIB1.\n         @185 MCTTSLC1  ?? PD4.\n         @  ;\n\n    IF MCTFLGS='.1..............'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF MCTFLGS='.............1..'B\n    THEN SINGLE='YES';\n    ELSE SINGLE='NO ';\n    IF MCTTSFB1\u00ac=.\n    THEN MCTTSFBD=PUT(DATEJUL(MCTTSFB1),DATE.);\n    ELSE MCTTSFBD='.';\n    DROP MCTTSFB1;\n    IF MCTTSLB1\u00ac=.\n    THEN MCTTSLBD=PUT(DATEJUL(MCTTSLB1),DATE.);\n    ELSE MCTTSLBD='.';\n    DROP MCTTSLB1;\n    IF MCTTSLC1\u00ac=.\n    THEN MCTTSLCD=PUT(DATEJUL(MCTTSLC1),DATE.);\n    ELSE MCTTSLCD='.';\n    DROP MCTTSLC1;\n    LABEL\n    MCTVSN  ='BACKUP*VOLUME*SERIAL                    '\n    MCTDAY  ='BACKUP*CYCLE*DAY                        '\n    MCTTSFBD='DATE OF*1ST BKUP*THIS VOL               '\n    MCTTSLBD='DATE OF*LAST BKUP*THIS VOL              '\n    MCTTSLCD='DATE OF*MOST RECENT*CLEANUP             '\n    FULL    ='IS*VOLUME*FULL?                         '\n    SINGLE  ='3480*SINGLEFILE*FORMAT?                 '\n     ;\n    OUTPUT MCT;\n END;\n\n IF TYPE=28X THEN DO;\n    INPUT\n         @002 MCPVSN       $6.\n         @073 MCPFLGS      PIB2.\n         @077 MCPTSLBH     PK1.\n         @078 MCPTSLBM     PK1.\n         @079 MCPTSLBS     PK2.2\n         @081 MCPTSLB1  ?? PD4.\n         @ ;\n    IF MCPTSLB1\u00ac=.\n    THEN MCPTSLBD=PUT(DATEJUL(MCPTSLB1),DATE.);\n    ELSE MCPTSLBD='.';\n    DROP MCPTSLB1;\n    MCPTSLBT=HMS(MCPTSLBH,MCPTSLBM,MCPTSLBS);\n    FORMAT MCPTSLBT TIME10.2 ;\n    IF MCPFLGS='1...............'B\n    THEN VOLTYPE='PRIMARY  ';\n    ELSE VOLTYPE='MIGRATION';\n    IF MCPFLGS='.......1........'B\n    THEN AUTOBKUP='YES';\n    ELSE AUTOBKUP='NO ';\n    IF MCPFLGS='......1.........'B\n    THEN AUTORECL='NO ';\n    ELSE AUTORECL='YES';\n    LABEL\n    MCPVSN  ='SERIAL OF*VOLUME*BACKED UP           '\n    MCPTSLBD='DATE OF*MOST RECENT*BACKUP           '\n    MCPTSLBT='TIME OF*MOST RECENT*BACKUP           '\n    AUTORECL='AUTOMATIC*RECALL*ALLOWED             '\n    AUTOBKUP='AUTOMATIC*BACKUP*ALLOWED             '\n    VOLTYPE ='VOLUME*TYPE                          '\n    ;\n    OUTPUT MCP;\n END;\n\nPROC PRINT DATA=WORK.MCT SPLIT=*; ID MCTVSN;\nTITLE VOLUMES CONTAINING BACKUP VERSIONS;\nTITLE2 ;\n\nPROC PRINT DATA=WORK.MCP SPLIT=*; ID MCPVSN;\nTITLE VOLUMES FROM WHICH BACKUPS HAVE BEEN TAKEN;\nTITLE2 ;\n\nDATA TTOC\n     (KEEP=VOLSER TYPE DATASETS FULL VSAM VALID\n     PREVVOL NEXTVOL\n     BLOCKS PSWD RCYCLMSG\n     );\n INFILE OCDS VSAM BUFND=16 BUFNI=16 EOF=EOFOCDS;\n INPUT @001 TTCKEY  $44.\n       @045 MCHLEN  IB2.\n       @047 MCKTYPE IB2.\n       @049 MCHTSLU        TODSTAMP8.\n       @057 MCHTSCR        TODSTAMP8.\n       @065 TTCHSTID       $1.\n       @066 TTCFFLGS       IB2.\n       @069 TTCUNIT        $8.\n       @077 TTCNUM         IB2.\n       @079 TTCDSNUM       IB2.\n       @081 TTCTBLK        IB4.\n       @085 TTCVBLK        IB4.\n       @089 TTCPREVL       $6.\n       @095 TTCSUCVL       $6.\n       @101 TTCLFBID       IB4.\n       @105 TTCFFBID       IB4.\n       @ ;\n RETAIN\n           VOLSER TYPE DATASETS FULL VSAM VALID\n     PREVVOL NEXTVOL\n     BLOCKS PSWD RCYCLMSG\n ;\n IF SUBSTR(TTCKEY,12,4)='0000'\n THEN DO;\n    OUTPUT;\n    VALID=0;\n    VSAM=0;\n    DATASETS=0;\n    BLOCKS=0;\n    VOLSER=SUBSTR(TTCKEY,5,6);\n    FULL=REPEAT(' ',3);\n    PREVVOL=TTCPREVL;\n    NEXTVOL=TTCSUCVL;\n    IF TTCFFLGS='1...............'B\n    THEN FULL='YES';\n    ELSE FULL='NO ';\n    IF TTCFFLGS='...1............'B\n    THEN PSWD='YES';\n    ELSE PSWD='NO ';\n    IF TTCFFLGS='....1...........'B\n    THEN RCYCLMSG='YES';\n    ELSE RCYCLMSG='NO ';\n    IF SUBSTR(TTCKEY,2,2) ='SP' THEN TYPE='SPILL       ';\n    IF SUBSTR(TTCKEY,2,2) ='UN' THEN TYPE='UNASSIGNED  ';\n    IF SUBSTR(TTCKEY,2,2) ='L2' THEN TYPE='LEVEL 2     ';\n    IF SUBSTR(TTCKEY,2,2)>='00' THEN TYPE='DAILY BACKUP';\n END;\n DATASETS=DATASETS+TTCDSNUM;\n DO COL=157 TO MCHLEN BY 56;\n    INPUT @COL              TTCDSN        $44.\n          @COL+044          TTCNBLKS      IB4.\n          @COL+048          TTCDLR     ?? PD3.\n          @COL+052          TTCEFLGS      IB1.\n          @COL+053          TTCEXPDT   ?? PD3.\n          @ ;\n    IF TTCEFLGS='.1......'B THEN VALID=VALID+1;\n    IF TTCEFLGS='1.......'B THEN VSAM=VSAM+1;\n    BLOCKS=BLOCKS+TTCNBLKS;\n END;\n RETURN;\n EOFOCDS: OUTPUT;\n\nDATA TTOC;\n SET TTOC;\n IF DATASETS=. THEN DELETE;\n\nPROC PRINT; ID VOLSER;\n SUM DATASETS VALID BLOCKS;\n TITLE TAPE VOLUMES IN USE BY DFHSM;\n><       ADD   NAME=HSMFSR\nPROC FORMAT;\n VALUE FSRFMT\n  1='MIGRATE L0->L1         '\n  2='MIGRATE L1->L2         '\n  3='MIGRATE L0->L2         '\n  4='RECALL L1->L0          '\n  5='RECALL L2->L0          '\n  6='DELETE MIGRATED DATASET'\n  7='DAILY BACKUP           '\n  8='SPILL BACKUP           '\n  9='RECOVERY               '\n 10='RECYCLE BACKUP VOLUME  '\n 11='DATA SET DELETION      '\n 12='RECYCLE ML2 VOLUME     '\n 13='FULL VOLUME DUMP       '\n 14='VOLUME/DATASET RESTORE '\n ;\n\nDATA FSR;\n  INFILE SMF STOPOVER LENGTH=LENGTH COL=COL RECFM=VBS LRECL=32756\n             JFCB=SMFJFCB START=BEGINCPY;\n  LENGTH PREVTIME SMFTIME 8 ID MVSXA OFFSMF 2 ;\n  FORMAT\n         MVSXAFLG                   HEX2.\n         SMFJFCB                 $HEX200.\n         RUNDATE                 MMDDYY8.\n         PREVTIME SMFTIME     DATETIME19.2\n         SYSTEM                       $4.\n  ;\n  IF OFFSMF=. THEN DO;\n     IF SUBSTR(SMFJFCB,100,1)='....1...'B  THEN OFFSMF=4;\n     ELSE OFFSMF=0;\n     BEGINCPY=OFFSMF+1;\n     RETAIN BEGINCPY OFFSMF RUNDATE SMFTIME SYSTEM;\n     RUNDATE=TODAY();\n  END;\n  PREVTIME=SMFTIME;\n  PREVSYS = SYSTEM;\n  IF OFFSMF=4 THEN DO;\n    INPUT @5 EOFSTRNG $CHAR7. @;\n    IF EOFSTRNG=:'SMF EOF'\n    OR EOFSTRNG=:'SMFEOF' THEN STOP;\n  END;\n  INPUT @1+OFFSMF MVSXAFLG     PIB1.\n        @2+OFFSMF ID           PIB1.\n        @3+OFFSMF SMFTIME SMFSTAMP8.\n       @11+OFFSMF SYSTEM         $4.\n  @;\n  MVSXA=0;\n  IF MVSXAFLG='.....1..'B THEN MVSXA=1;\n  IF ID=241;\n\n  INPUT @015+OFFSMF  FSRJBN      $8.\n        @023+OFFSMF  FSRRST      SMFSTAMP8.\n        @031+OFFSMF  FSRUID      $8.\n        @039+OFFSMF  FSRTYPE     PIB1.\n        @041+OFFSMF  FSRDSN      $44.\n        @085+OFFSMF  FSRTVOL     $6.\n        @091+OFFSMF  FSRDEVT     PIB4.\n        @095+OFFSMF  FSRFVOL     $6.\n        @105+OFFSMF  FSRRC       PIB4.\n        @109+OFFSMF  FSRREAS     PIB4.\n        @113+OFFSMF  FSRABCC     PIB4.\n        @117+OFFSMF  FSRDARC     PIB2.\n        @119+OFFSMF  FSRGRP      $8.\n        @127+OFFSMF  FSRRACF     IB1.\n        @129+OFFSMF  FSRRQN      IB4.\n        @133+OFFSMF  FSRDATR     PD4.\n        @137+OFFSMF  FSRTIMRH    PK1.\n        @138+OFFSMF  FSRTIMRM    PK1.\n        @139+OFFSMF  FSRTIMRS    PK2.2\n        @141+OFFSMF  FSRTIMSH    PK1.\n        @142+OFFSMF  FSRTIMSM    PK1.\n        @143+OFFSMF  FSRTIMSS    PK2.2\n        @145+OFFSMF  FSRTIMEH    PK1.\n        @146+OFFSMF  FSRTIMEM    PK1.\n        @147+OFFSMF  FSRTIMES    PK2.2\n        @149+OFFSMF  FSRTIMAH    PK1.\n        @150+OFFSMF  FSRTIMAM    PK1.\n        @151+OFFSMF  FSRTIMAS    PK2.2\n        @153+OFFSMF  FSRDLU   ?? PD4.\n        @157+OFFSMF  FSRDLM   ?? PD4.\n        @161+OFFSMF  FSRBYTR     IB4.\n        @165+OFFSMF  FSRBYTW     IB4.\n        @169+OFFSMF  FSRTRKR     IB2.\n        @171+OFFSMF  FSRTRKW     IB2.\n        @173+OFFSMF  FSRDORG     PIB2.\n        @175+OFFSMF  FSRFLG2     PIB2.\n        @ ;\n IF FSRFLG2='....1...........'B\n THEN INPUT\n        @101+OFFSMF  FSRDATE     PD4.\n        @ ;\n ELSE INPUT\n        @101+OFFSMF  FSRGEN      PIB4.\n        @ ;\n INPUT\n        @181+OFFSMF  FSRAGE      IB2.\n        @183+OFFSMF  FSRRECFM    IB1.\n        @184+OFFSMF  FSROPTCD    IB1.\n        @237+OFFSMF  FSRNENT1    IB2.\n        @239+OFFSMF  FSRNENT2    IB2.\n        @ ;\n FSRTIMR=HMS(FSRTIMRH,FSRTIMRM,FSRTIMRS);\n FORMAT FSRTIMR TIME10.2 ;\n DROP FSRTIMRH FSRTIMRM FSRTIMRS ;\n FSRTIMS=HMS(FSRTIMSH,FSRTIMSM,FSRTIMSS);\n FORMAT FSRTIMS TIME10.2 ;\n DROP FSRTIMSH FSRTIMSM FSRTIMSS ;\n FSRTIME=HMS(FSRTIMEH,FSRTIMEM,FSRTIMES);\n FORMAT FSRTIME TIME10.2 ;\n DROP FSRTIMEH FSRTIMEM FSRTIMES ;\n FSRTIMA=HMS(FSRTIMAH,FSRTIMAM,FSRTIMAS);\n FORMAT FSRTIMA TIME10.2 ;\n DROP FSRTIMAH FSRTIMAM FSRTIMAS ;\n DURATION=FSRTIME-FSRTIMR;\n FORMAT DURATION TIME10.2 ;\n WAITING=FSRTIMS-FSRTIMR;\n FORMAT WAITING TIME10.2 ;\n PENDING=FSRTIMA-FSRTIMR;\n FORMAT PENDING TIME10.2 ;\n FUNCTION=PUT(FSRTYPE,FSRFMT.);\n DATE=PUT(DATEPART(SMFTIME),DATE.);\n IF FSRTYPE=1 OR FSRTYPE=3\n THEN DO;\n    L0VOL=FSRFVOL;\n    L1VOL=FSRTVOL;\n    L0BYTES=FSRBYTR;\n    L1BYTES=FSRBYTW;\n    L0TRKS=FSRTRKR;\n    L1TRKS=FSRTRKW;\n END;\n IF FSRTYPE=4\n THEN DO;\n    L0VOL=FSRTVOL;\n    L1VOL=FSRFVOL;\n    L0BYTES=FSRBYTW;\n    L1BYTES=FSRBYTR;\n    L0TRKS=FSRTRKW;\n    L1TRKS=FSRTRKR;\n END;\n  LABEL\n  FSRDSN  ='DATASET*NAME                            '\n  FUNCTION='DFHSM*OPERATION*TYPE                    '\n  FSRTIMR ='TIME OF*USER''S*REQUEST                 '\n  FSRTVOL ='RECEIVING*VOLUME*SERIAL                 '\n  FSRFVOL ='ORIGINAL*VOLUME*SERIAL                  '\n  DURATION='TIME TAKEN*TO PROCESS*REQUEST           '\n  WAITING ='TIME REQUEST*WAS QUEUED*BY DFHSM        '\n  PENDING ='MOUNT*PENDING*TIME                      '\n  FSRRC   ='MWE*RETURN*CODE                         '\n  L0VOL   ='PRIMARY*VOLUME*SERIAL                   '\n  L1VOL   ='LEVEL 1*MIGRATION*VOLUME                '\n  L0BYTES ='BYTES*TRANSFERRED*ON PRIMARY            '\n  L0TRKS  ='TRACKS*TRANSFERRED*ON PRIMARY           '\n  L1BYTES ='BYTES*TRANSFERRED*ON LEVEL 1            '\n  L1TRKS  ='TRACKS*TRANSFERRED*ON LEVEL 1           '\n  ;\n\nPROC SORT; BY DATE FSRTIMR;\n\nDATA BADFSR;\n SET FSR;\n IF FSRRC > 0 & FSRRC \u00ac= 2;\n\nPROC PRINT SPLIT=*;\n ID FSRDSN;\n VAR FSRJBN FUNCTION FSRTIMR\n FSRTVOL FSRFVOL DURATION WAITING FSRRC;\n BY DATE;\n\nPROC SORT; BY FUNCTION;\n\nPROC SUMMARY DATA=WORK.BADFSR NWAY;\n CLASS FSRRC;\n BY FUNCTION;\n VAR FSRAGE;\n OUTPUT OUT=S N=COUNT;\n\nPROC PRINT DATA=WORK.S;\n ID FSRRC; VAR COUNT; BY FUNCTION;\n\nPROC DELETE DATA=WORK.S;\nPROC DELETE DATA=WORK.BADFSR;\n\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS FUNCTION;\n VAR DURATION WAITING;\n OUTPUT OUT=S MEAN(DURATION WAITING)=AVGRESP AVGQUEUE\n              MAX(DURATION WAITING)=MAXRESP MAXQUEUE\n              N=COUNT ;\n  LABEL\n  AVGRESP ='AVERAGE*SERVICE*TIME                    '\n  MAXRESP ='MAXIMUM*SERVICE*TIME                    '\n  AVGQUEUE='AVERAGE*QUEUE*TIME                      '\n  MAXQUEUE='MAXIMUM*QUEUE*TIME                      '\n  COUNT   ='TIMES*FUNCTION*EXECUTED                 '\n  ;\n\nPROC PRINT DATA=WORK.S SPLIT=*;\n ID FUNCTION;\n VAR COUNT AVGRESP MAXRESP AVGQUEUE MAXQUEUE;\n FORMAT AVGRESP MAXRESP AVGQUEUE MAXQUEUE TIME10.2 ;\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS DATE L1VOL;\n VAR L1BYTES L1TRKS;\n OUTPUT OUT=S SUM= ;\n\nPROC PRINT SPLIT=*;\n ID L1VOL; VAR L1BYTES L1TRKS; BY DATE;\n\n\nPROC SUMMARY DATA=WORK.FSR NWAY;\n CLASS DATE L0VOL;\n VAR L0BYTES L0TRKS;\n OUTPUT OUT=S SUM= ;\n\nPROC PRINT SPLIT=*;\n ID L0VOL; VAR L0BYTES L0TRKS; BY DATE;\n\nPROC SORT DATA=WORK.FSR; BY FUNCTION;\n\nPROC CHART DATA=WORK.FSR;\n VBAR DURATION / TYPE=FREQ NOSPACE\n MIDPOINTS=0.1 0.25 0.5 0.75 1.0 1.5 2 3 4 5 7.5 10 15 30 60 90 120 180\n 240 300 600 1200 1800;\n BY FUNCTION;\n\nPROC CHART DATA=WORK.FSR;\n VBAR FSRAGE / TYPE=FREQ NOSPACE DISCRETE;\n BY FUNCTION;\n\nPROC CHART DATA=WORK.FSR;\n VBAR PENDING / TYPE=FREQ NOSPACE DISCRETE;\n BY FUNCTION;\n\n><       ADD   NAME=HSMLOG\nPROC FORMAT;\n VALUE FSRFMT\n  1='MIGRATE L0->L1         '\n  2='MIGRATE L1->L2         '\n  3='MIGRATE L0->L2         '\n  4='RECALL L1->L0          '\n  5='RECALL L2->L0          '\n  6='DELETE MIGRATED DATASET'\n  7='DAILY BACKUP           '\n  8='SPILL BACKUP           '\n  9='RECOVERY               '\n 10='RECYCLE BACKUP VOLUME  '\n 11='DATA SET DELETION      '\n 12='RECYCLE ML2 VOLUME     '\n 13='FULL VOLUME DUMP       '\n 14='VOLUME/DATASET RESTORE '\n ;\n\n VALUE MWEFMT\n  0='RETURN THE QCT POINTER       '\n  1='START UP DFHSM               '\n  2='SHUTDOWN DFHSM               '\n  3='RECALL A DATASET             '\n  4='UNUSED                       '\n  5='RECOVER A DATASET OR VOLUME  '\n  6='MIGRATE A DATASET OR VOLUME  '\n  7='BACKUP A DATASET OR VOLUME   '\n  8='READ A CONTROL DATASET RECORD'\n  9='PROCESS COMMAND TEXT         '\n 10='POST AN MWE COMPLETE         '\n 11='PURGE THE MWE                '\n 12='DELETE A MIGRATED DATASET    '\n ;\n\n VALUE LOGFMT\n  1='DFHSM STARTUP                         '\n  2='OPERATOR COMMAND RECEIVED             '\n  3='OUTPUT MESSAGE TO OPERATOR            '\n  4='MWE RECEIVED BY ARCCTL                '\n  5='RECALL OR DELETION STARTED            '\n  6='RECALL OR DELETION ENDED              '\n  7='MIGRATION STARTED                     '\n  8='MIGRATION ENDED                       '\n  9='ARCERP PROCESSING PERFORMED           '\n 10='SUBTASK ABNORMAL END                  '\n 11='MWE RECEIVED BY MIGRATION SUBTASK     '\n 12='DFHSM SHUTDOWN                        '\n 13='MWE COMPLETED                         '\n 14='STATISTICS RECORD                     '\n 15='CONTROL DATASET UPDATE OR NEW ENTRY   '\n 16='CONTROL DATASET ENTRY DELETED         '\n 17='BACKUP OF DATASET STARTED             '\n 18='BACKUP OF DATASET ENDED               '\n 19='RECOVERY OF BACKUP VERSION STARTED    '\n 20='RECOVERY OF BACKUP VERSION ENDED      '\n 21='DATASET DELETION OR RETIREMENT STARTED'\n 22='DELETION ENDED                        '\n 23='RECYCLE STARTED                       '\n 24='RECYCLE ENDED                         '\n ;\nDATA OPERATNS(KEEP=DATE TIME FUNCTION UID DSNAME VSN RC REAS\n                   KBYTES)\n     CMDLOG(KEEP=DATE TIME UID COMMAND)\n     MSGLOG(KEEP=DATE TIME TO TEXT)\n     DSR   (KEEP=DATE TIME DSRIPL DSRABEND DSRSHUT DSRNMWE DSREJST\n               DSREVENT         DSRNVMG DSRNVBU\n               PL1NDS PL1NTRKR PL1NTRKW\n               PL1NBYTR PL1NBYTW PL1NDSF PL1NVOL PL1NSYS PL1TAGE\n               PL1TTINQ PL1TTWV PL1TTINP PL1TTOT\n               L1PNDS L1PNTRKR L1PNTRKW\n               L1PNBYTR L1PNBYTW L1PNDSF L1PNVOL L1PNSYS L1PTAGE\n               L1PTTINQ L1PTTWV L1PTTINP L1PTTOT\n     )\n     ;\n INFILE HSMLOG ;\n INPUT  @1   MRECL     IB2.\n  @ ;\n I = 3;\n DO WHILE (I <= MRECL);\n  MWEFUNC=.;\n  MWEDSN=REPEAT(' ',44);\n  MWEUID=REPEAT(' ',8);\n  UID=REPEAT(' ',8);\n  VSN=REPEAT(' ',6);\n  DATE=.;\n  TIME=.;\n  FUNCTION=REPEAT(' ',38);\n  DSNAME=REPEAT(' ',44);\n  INPUT\n        @I    MLOGL     IB2.\n        @I+2  MLOGID    IB1.\n        @I+3  MLOGFLGS  IB1.\n        @I+4  MLOGJUL   PD4.\n        @I+8  MLOGHH    PK1.\n        @I+9  MLOGMM    PK1.\n        @I+10 MLOGSS    PK1.\n        @I+11 MLOGTT    PK1.\n     @ ;\n  DATE=DATEJUL(MLOGJUL);\n  TIME=HMS(MLOGHH,MLOGMM,MLOGSS);\n  IF MLOGID=03 THEN LINK ID03;\n  IF MLOGID=04 THEN LINK ID04;\n  IF MLOGID=06 THEN LINK ID06;\n  IF MLOGID=08 THEN LINK ID06;\n  IF MLOGID=14 THEN LINK ID14;\n  I = I+MLOGL;\n END;\n RETURN;\n ID03: /* MESSAGE TEXT.          */\n INPUT @I+16   TO       $8.\n       @ ;\n INPUT @I+24   TEXTL    IB1.\n       @ ;\n TEXTL=TEXTL-1;\n INPUT @I+25   MSGTEXT  $VARYING132. TEXTL\n       @ ;\n TEXT=PUT(MSGTEXT,$110.);\n OUTPUT MSGLOG;\n RETURN;\n ID04: /* ARCCTL RECEIVES MWE.   */\n INPUT @I+12   MWEFWD   IB4.\n       @I+16   MWEBWD   IB4.\n       @I+20   MWESPN   IB1.\n       @I+21   MWELEN   IB3.\n       @I+24   MWEFSR   IB4.\n       @I+28   MWETSTIM IB4.\n       @I+32   MWETSDAT PD4.\n       @I+36   MWEFUNC  IB1.\n       @I+40   MWEUID   $8.\n       @ ;\n IF MWEFUNC\u00ac=9 THEN RETURN;\n INPUT @I+152  MWECMDL  IB2.\n       @ ;\n MWECMDL=MWECMDL-4;\n INPUT @I+156  MWECMDT  $VARYING80. MWECMDL\n       @ ;\n COMMAND=PUT(MWECMDT,$80.);\n UID=MWEUID;\n OUTPUT CMDLOG;\n RETURN;\n ID06: /* RECALL/DELETE ENDED. */\n INPUT @I+30   FSRJBN   $8.\n       @I+54   FSRTYPE  IB1.\n       @I+56   FSRDSN   $44.\n       @I+100  FSRTVOL  $6.\n       @I+110  FSRFVOL  $6.\n       @I+120  FSRRC    IB4.\n       @I+124  FSRREAS  IB4.\n       @I+176  FSRBYTR  IB4.\n       @I+180  FSRBYTW  IB4.\n       @ ;\n FUNCTION=PUT(FSRTYPE,FSRFMT.);\n UID=FSRJBN;\n DSNAME=FSRDSN;\n IF FSRTYPE=4 OR FSRTYPE=5 OR FSRTYPE=9\n THEN VSN=FSRTVOL;\n ELSE VSN=FSRFVOL;\n RC=FSRRC;\n REAS=FSRREAS;\n KBYTES=(FSRBYTR+FSRBYTW)/1024;\n OUTPUT OPERATNS;\n RETURN;\n ID14: /* STATISTICS RECORD. */\n INPUT @I+12   DSRKEY   $44.\n       @ ;\n IF SUBSTR(DSRKEY,2,3)\u00ac='DSR' THEN RETURN;\n INPUT @I+076  DSRIPL   IB4.\n       @I+080  DSRABEND IB4.\n       @I+084  DSRSHUT  IB4.\n       @I+088  DSRNMWE  IB4.\n       @I+096  DSREJST1 IB4.\n       @I+112  DSREVENT IB4.\n       @I+120  DSRNVMG  IB2.\n       @I+124  DSRNVBU  IB2.\n       @I+196  PL1NDS   IB2.\n       @I+204  PL1NTRKR IB4.\n       @I+208  PL1NTRKW IB4.\n       @I+212  PL1NBYTR IB4.\n       @I+216  PL1NBYTW IB4.\n       @I+220  PL1NDSF  IB2.\n       @I+222  PL1NVOL  IB2.\n       @I+224  PL1NSYS  IB2.\n       @I+226  PL1TAGE  IB2.\n       @I+228  PL1TTINQ IB4.\n       @I+232  PL1TTWV  IB4.\n       @I+236  PL1TTINP IB4.\n       @I+240  PL1TTOT  IB4.\n       @I+192+196 L1PNDS   IB2.\n       @I+192+204 L1PNTRKR IB4.\n       @I+192+208 L1PNTRKW IB4.\n       @I+192+212 L1PNBYTR IB4.\n       @I+192+216 L1PNBYTW IB4.\n       @I+192+220 L1PNDSF  IB2.\n       @I+192+222 L1PNVOL  IB2.\n       @I+192+224 L1PNSYS  IB2.\n       @I+192+226 L1PTAGE  IB2.\n       @I+192+228 L1PTTINQ IB4.\n       @I+192+232 L1PTTWV  IB4.\n       @I+192+236 L1PTTINP IB4.\n       @I+192+240 L1PTTOT  IB4.\n       @ ;\n DSREJST1=DSREJST1/1000;\n HH=DSREJST1/(60*60);\n MM=(DSREJST1/60)-(HH*60);\n SS=DSREJST1-((MM*60)+(HH*60*60));\n DSREJST=HMS(HH,MM,SS);\n OUTPUT DSR;\n RETURN;\n\nPROC SORT DATA=WORK.OPERATNS; BY FUNCTION DATE TIME;\n\nPROC PLOT DATA=WORK.OPERATNS;\n BY FUNCTION DATE;\n PLOT KBYTES*TIME;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n\nPROC SUMMARY DATA=WORK.OPERATNS;\n CLASS FUNCTION DATE;\n VAR TIME;\n OUTPUT OUT=S N(TIME)=COUNT;\n\nPROC PRINT DATA=WORK.S;\n ID FUNCTION; VAR DATE COUNT;\n FORMAT DATE DATE. ;\n\n/*\n\nPROC PRINT  DATA=WORK.OPERATNS; ID DATE;\n VAR TIME FUNCTION RC REAS UID VSN DSNAME;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n\nPROC PRINT  DATA=WORK.CMDLOG; ID UID;\n VAR DATE TIME COMMAND;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n */\n\n/*\nPROC SORT DATA=WORK.MSGLOG; BY DATE;\n\nPROC PRINT  DATA=WORK.MSGLOG; ID TIME;\n BY DATE;\n VAR TO TEXT;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n */\n\nPROC PRINT  DATA=WORK.DSR;    ID DATE;\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n FORMAT DSREJST TIME. ;\n./ ADD NAME=SASRMF79 0100-89155-89155-1410-00193-00193-00000-JIMLANE\nOPTIONS OBS=MAX;\nDATA\n ASD  (KEEP=DATE TIME JOB ESFRAMES CSFRAMES)\n SRCS (KEEP=DATE TIME AFC HIUIC ASMQ)\n SPAG (KEEP=DATE TIME MIGAGE ESRTE ESFRAMES MIGRTE PAGEINS PAGEOUTS)\n ;\n  INFILE SMF MISSOVER LENGTH=LENGTH COL=COL RECFM=VBS LRECL=32756\n             JFCB=SMFJFCB START=BEGINCPY;\n  LENGTH                             OFFSMF 2 ;\n  FORMAT\n         SMFJFCB                 $HEX200.\n  ;\n  IF OFFSMF=. THEN DO;\n     IF SUBSTR(SMFJFCB,100,1)='....1...'B  THEN OFFSMF=4;\n     ELSE OFFSMF=0;\n     BEGINCPY=OFFSMF+1;\n     RETAIN BEGINCPY OFFSMF         ;\n  END;\n  IF OFFSMF=4 THEN DO;\n    INPUT @5 EOFSTRNG $CHAR7. @;\n    IF EOFSTRNG=:'SMF EOF'\n    OR EOFSTRNG=:'SMFEOF' THEN STOP;\n  END;\n  INPUT @2+OFFSMF TYPE         PIB1. @;\n  IF TYPE=79;\n\n  INPUT @1+OFFSMF\n       SMF79FLG    IB1.   /* HEADER FLAG BYTE                       */\n       SMF79RTY    IB1.   /* RECORD TYPE                            */\n       TIMESTMP    SMFSTAMP8.\n       SMF79SID    $4.    /* SYSTEM ID FROM INSTALLATION            */\n       SMF79SSI    $4.    /* SUBSYSTEM ID (RMF)                     */\n       SMF79STY    IB2.   /* SUBTYPE                                */\n       SMF79TRN    IB2.   /* NUMBER OF TRIPLETS IN THIS RECORD      */\n       SMF79AAA    IB2.   /* RESERVED                               */\n       SMF79PRS    IB4.   /* OFFSET TO RMF PRODUCT SECTION          */\n       SMF79PRL    IB2.   /* LENGTH OF RMF PRODUCT SECTION          */\n       SMF79PRN    IB2.   /* NUMBER OF RMF PRODUCT SECTIONS         */\n       SMF79MCS    IB4.   /* OFFSET TO MONITOR II CONTROL SECTION   */\n       SMF79MCL    IB2.   /* LENGTH OF MONITOR II CONTROL SECTION   */\n       SMF79MCN    IB2.   /* NUMBER OF MONITOR II CONTROL SECTION   */\n       SMF79ASS    IB4.   /* OFFSET TO DATA SECTION                 */\n       SMF79ASL    IB2.   /* LENGTH OF DATA SECTION                 */\n       SMF79ASN    IB2.   /* NUMBER OF DATA SECTION                 */\n       SMF79DCS    IB4.   /* OFFSET TO DATA CONTROL SECTION         */\n       SMF79DCL    IB2.   /* LENGTH OF DATA CONTROL SECTION         */\n       SMF79DCN    IB2.   /* NUMBER OF DATA CONTROL SECTION         */\n       SMF79QSS    IB4.   /* OFFSET TO I/O QUEUING GLBL.SECT.       */\n       SMF79QSL    IB2.   /* LENGTH OF I/O QUEUING GLBL.SECT.       */\n       SMF79QSN    IB2.   /* NUMBER OF I/O QUEUING GLBL.SECT.       */\n @ ;\n\n DATE=DATEPART(TIMESTMP);\n TIME=TIMEPART(TIMESTMP);\n FORMAT DATE DATE. ;\n FORMAT TIME TIME. ;\n\n IF SMF79STY=1 THEN DO;\n  I=SMF79ASS-4;\n  J=SMF79ASL;\n  K=SMF79ASN;\n  DO L=1 TO K;\n   INPUT @1+OFFSMF+I\n       R791ASID    IB2.   /* ADDRESS SPACE IDENTIFIER               */\n       R791JBN     $8.    /* NAME OF JOB                            */\n       R791DMN     IB2.   /* DOMAIN NUMBER                          */\n       R791NPG     IB2.   /* PERFORMANCE GROUP                      */\n       R791PGP     IB2.   /* PERFORMANCE GROUP PERIOD               */\n       R791TTOD    IB4.   /* REAL TIME INTO TRANSACTION             */\n       R791CL      $2.    /* CURRENT LOCATION                       */\n       R791TAS     IB2.   /* TYPE OF USER                           */\n       R791SRC     $2.    /* REASON LAST SWAP OUT                   */\n       R791DP      IB2.   /* DISPATCHER PRIORITY                    */\n       R791SEQN    IB2.   /* RESERVED                         @S1C  */\n       R791FMCT    IB2.   /* NUMBER OF REAL STORAGE FRAMES          */\n       R791WSS     IB2.   /* WORKING SET AT LAST SWAP IN            */\n       R791SWC     IB2.   /* TRANSACTION SWAP COUNT                 */\n       R791SWMR    IB2.   /* SRM WORKLOAD RECOM VALUE               */\n       R791SCRV    IB2.   /* SRM PROCESSOR RECOM VALUE              */\n       R791SIOC    IB2.   /* SRM I/O RECOM VALUE                    */\n       R791WMS     IB4.   /* SRM SSERVICE FOR THE CURRENT           */\n       R791TCPU    IB4.   /* CPU (TCB+SRB) FOR CURRENT JOB STEP IN  */\n       R791SSRV    IB2.   /* SRM STORAGE RECOMMENDATION VALUE       */\n       R791ES      IB2.   /* NUMBER OF EXT. STORAGE SLOTS     @P2A  */\n       R791ESSL    IB4.   /* AVAILABLE FOR FUTURE USE         @P2A  */\n       @;\n       IF R791DMN=6\n       THEN DO;\n          JOB=R791JBN;\n          CSFRAMES=R791FMCT;\n          ESFRAMES=R791ES;\n          OUTPUT ASD;\n       END;\n       I=I+J;\n  END;\n END;\n\n\n IF SMF79STY=3 THEN DO;\n  I=SMF79ASS-4;\n  J=SMF79ASL;\n  K=SMF79ASN;\n  DO L=1 TO K;\n   INPUT @1+OFFSMF+I\n       R793AFC     IB2.   /* NUMBER OF AVAILABLE FRAMES              */\n       R793CRI     IB2.   /* HIGH UIC COUNT                          */\n       R793SQA     IB2.   /* NUMBER OF SQA FRAMES                    */\n       R793CMNF    IB2.   /* NUMBER OF COMMON (LPA+CSA)              */\n       R793CMFF    IB2.   /* NUMBER OF COMMON (LPA+CSA)              */\n       R793PRFX    IB2.   /* NUMBER OF PRIVATE FIXED FRAMES          */\n       R793CPUU    IB2.   /* PROCESSOR UTILIZATION (0-101)           */\n       R793DQ      IB2.   /* LENGTH OF ASCB READY QUEUE              */\n       R793INC     IB2.   /* NUMBER OF ADDRESS SPACES IN STORAGE     */\n       R793OUTU    IB2.   /* NUMBER OF ADDRESS SPACES OUT OF         */\n       R793LCU     IB2.   /* RESERVED                                */\n       R793ASMQ    IB2.   /* SRM MEASURE OF ASM QUEUE LENGTH         */\n       R793LPAF    IB2.   /* NUMBER OF LPA PAGEABLE FRAMES           */\n       R793CSAF    IB2.   /* NUMBER OF CSA PAGEABLE FRAMES           */\n       R793LPFX    IB2.   /* NUMBER OF LPA FIXED FRAMES              */\n       R793CSFX    IB2.   /* NUMBER OF CSA FIXED FRAMES              */\n       R793LSQA    IB2.   /* NUMBER OF LSQA FRAME                    */\n       R793NLQF    IB2.   /* NUMBER OF PRIVATE NON LSQA FIX FRAMES   */\n       R793LOUT    IB2.   /* NUMBER OF ADDRESS SPACES LOGICALLY      */\n       @;\n       AFC=R793AFC;\n       HIUIC=R793CRI;\n       ASMQ=R793ASMQ;\n       OUTPUT SRCS;\n       I=I+J;\n  END;\n END;\n\n IF SMF79STY=4 THEN DO;\n  I=SMF79ASS-4;\n  J=SMF79ASL;\n  K=SMF79ASN;\n  DO L=1 TO K;\n   INPUT @1+OFFSMF+I\n       R794CMNI    IB4.   /* SYSTEM COMMON (LPA+CSA) PAGES IN        */\n       R794CMNO    IB4.   /* SYSTEM COMMON (CSA) PAGES OUT           */\n       R794CMNR    IB4.   /* SYSTEM COMMON (LPA+CSA) PAGES           */\n       R794SWPO    IB4.   /* NUMBER OF SWAPS (OUT)            @P1C   */\n       R794PSPI    IB4.   /* NUMBER OF PAGES SWAPPED IN              */\n       R794PSPO    IB4.   /* NUMBER OF PAGES SWAPPED OUT             */\n       R794PRVI    IB4.   /* NUMBER OF PRIVATE PAGES                 */\n       R794PRVO    IB4.   /* NUMBER OF PRIVATE PAGES                 */\n       R794PRVR    IB4.   /* NUMBER OF PRIVATE PAGES                 */\n       R794VIO     IB4.   /* NUMBER OF VIO PAGES (IN+OUT)            */\n       R794AFC     IB2.   /* NUMBER AVAILABLE FRAMES                 */\n       R794CRI     IB2.   /* HIGH UIC COUNT                          */\n       R794ACRI    IB2.   /* AVERAGE OF HIGH UIC COUNT               */\n       R794RV1     IB2.   /* RESERVED                                */\n       R794LPAI    IB4.   /* SYSTEM LPA PAGES IN          @G537NLS   */\n       R794CSAI    IB4.   /* SYSTEM CSA PAGES OUT         @G537NLS   */\n       R794LPAR    IB4.   /* SYSTEM LPA PAGES RECLAIMED   @G537NLS   */\n       R794CSAR    IB4.   /* SYSTEM CSA PAGES RECLAIMED   @G537NLS   */\n       R794TWSS    IB2.   /* TARGET WORKING SETSIZE FOR THE COMMON   */\n       R794MAGE    IB2.   /* MIGRATION AGE                           */\n       R794ERTE    IB4.   /* NO. PAGES TO EXT. STORAGE               */\n       R794EVAL    IB4.   /* NO. OF EXTENDED STORAGE SLOTS           */\n       R794ESSL    IB4.   /* AVAILABLE FOR FUTURE USE                */\n       R794MRTE    IB4.   /* NO. OF PAGES MIGRATED FROM              */\n       MIGAGE      IB4.   /* !!!!! */\n       @;\n /*    MIGAGE=R794MAGE; */\n       PAGEINS=(R794PRVI-LAG1(R794PRVI))/(TIME-LAG1(TIME));\n       PAGEOUTS=(R794PRVO-LAG1(R794PRVO))/(TIME-LAG1(TIME));\n       ESRTE=(R794ERTE-LAG1(R794ERTE))/(TIME-LAG1(TIME));\n       ESFRAMES=R794EVAL;\n       MIGRTE=(R794MRTE-LAG1(R794MRTE))/(TIME-LAG1(TIME));\n       OUTPUT SPAG;\n       I=I+J;\n  END;\n END;\n\nPROC SORT DATA=WORK.ASD; BY JOB DATE TIME;\nPROC PLOT DATA=WORK.ASD;\n PLOT CSFRAMES*TIME='C' ESFRAMES*TIME='E'  / OVERLAY;\n BY JOB DATE;\n\nPROC PLOT DATA=WORK.SPAG;\n PLOT\n       MIGAGE*TIME\n       ESRTE*TIME\n       ESFRAMES*TIME\n       MIGRTE*TIME\n       PAGEINS*TIME\n       PAGEOUTS*TIME\n       ;\n\n\nPROC PRINT DATA=WORK.SRCS; ID DATE;\nPROC PRINT DATA=WORK.SPAG; ID DATE;\n./ ADD NAME=SASSYSLG 0100-89155-89155-1410-00736-00736-00000-JIMLANE\n><       ADD   NAME=SPOOL\n\nDATA A;\n INFILE SYSLOG\n LENGTH=LENGTH MISSOVER;\n INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */\n           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */\n @ ;\n IF HCLRECTP='X'\n  | HCLRECTP='S'\n  | HCLRECTP='L'\n  | HCLRECTP='D'\n  | HCLRECTP='E' THEN DELETE;\n INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */\n           HCLROUTC   HEX4.    /* ROUTING CODES                      */\n           HCLRV1     $CHAR1.  /* BLANK                              */\n           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */\n           HCLRV2     $CHAR1.  /* BLANK                              */\n           HCLYEAR    $CHAR2.  /* YEAR                  YY           */\n           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */\n           HCLRV3     $CHAR1.  /* BLANK                              */\n           HCLHR      $CHAR2.  /* HOURS                 HH           */\n           HCLCOLN1   $CHAR1.  /* COLON                   :          */\n           HCLMIN     $CHAR2.  /* MINUTES                  MM        */\n           HCLCOLN2   $CHAR1.  /* COLON                      :       */\n           HCLSEC     $CHAR2.  /* SECONDS                     SS     */\n           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */\n           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */\n           HCLRV4     $CHAR1.  /* BLANK                              */\n           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */\n           HCLRV5     $CHAR1.  /* BLANK                              */\n           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */\n           HCLRV6     $CHAR1.  /* BLANK                              */\n           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */\n           @ ;\n\n\n\n IF HCLRECTP='W'               /* WTOR. */\n THEN DO;\n    INPUT HCLRV7 $CHAR3. @ ;\n    LENGTH=LENGTH-3;\n END;\n LENGTH=LENGTH-54;\n INPUT\n           HCLTEXT $VARYING78. LENGTH\n           ;\n\n    MSGID=SUBSTR(HCLTEXT,1,9);\n    MSGID=SCAN(MSGID,1,' ');\n    IF SUBSTR(MSGID,1,1)='+'\n    THEN MSGID=SUBSTR(MSGID,2);\n DATE=HCLYEAR || '.' || HCLDAY;\n TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;\n IF MSGID='$HASP646';\n\n    PERCENT=SCAN(SUBSTR(HCLTEXT,10,3),1,' ');\n    DAY=DATEJUL(HCLYEAR || HCLDAY);\n    X=HCLHR || ':' || HCLMIN || ':' || HCLSEC;\n    T=INPUT(X,TIME8.);\n    KEEP PERCENT DAY T;\n\nPROC SORT; BY DAY;\n\nPROC PLOT;\n PLOT PERCENT*T;\n FORMAT DAY DATE7. ;\n FORMAT T TIME. ;\n BY DAY;\n\n><       ADD   NAME=SYSLOG\nOPTIONS OBS=50000;\n\nDATA A;\n INFILE SYSLOG\n LENGTH=LENGTH MISSOVER;\n INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */\n           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */\n @ ;\n IF HCLRECTP='X'\n  | HCLRECTP='S'\n  | HCLRECTP='L'\n  | HCLRECTP='D'\n  | HCLRECTP='E' THEN DELETE;\n INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */\n           HCLROUTC   HEX4.    /* ROUTING CODES                      */\n           HCLRV1     $CHAR1.  /* BLANK                              */\n           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */\n           HCLRV2     $CHAR1.  /* BLANK                              */\n           HCLYEAR    $CHAR2.  /* YEAR                  YY           */\n           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */\n           HCLRV3     $CHAR1.  /* BLANK                              */\n           HCLHR      $CHAR2.  /* HOURS                 HH           */\n           HCLCOLN1   $CHAR1.  /* COLON                   :          */\n           HCLMIN     $CHAR2.  /* MINUTES                  MM        */\n           HCLCOLN2   $CHAR1.  /* COLON                      :       */\n           HCLSEC     $CHAR2.  /* SECONDS                     SS     */\n           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */\n           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */\n           HCLRV4     $CHAR1.  /* BLANK                              */\n           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */\n           HCLRV5     $CHAR1.  /* BLANK                              */\n           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */\n           HCLRV6     $CHAR1.  /* BLANK                              */\n           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */\n           @ ;\n\n\n R01=.; R02=.; R03=.; R04=.; R05=.; R06=.; R07=.; R08=.;\n R09=.; R10=.; R11=.; R12=.; R13=.; R14=.; R15=.; R16=.;\n\n IF HCLROUTC='1...............'B THEN R01=1;\n IF HCLROUTC='.1..............'B THEN R02=1;\n IF HCLROUTC='..1.............'B THEN R03=1;\n IF HCLROUTC='...1............'B THEN R04=1;\n IF HCLROUTC='....1...........'B THEN R05=1;\n IF HCLROUTC='.....1..........'B THEN R06=1;\n IF HCLROUTC='......1.........'B THEN R07=1;\n IF HCLROUTC='.......1........'B THEN R08=1;\n IF HCLROUTC='........1.......'B THEN R09=1;\n IF HCLROUTC='.........1......'B THEN R10=1;\n IF HCLROUTC='..........1.....'B THEN R11=1;\n IF HCLROUTC='...........1....'B THEN R12=1;\n IF HCLROUTC='............1...'B THEN R13=1;\n IF HCLROUTC='.............1..'B THEN R14=1;\n IF HCLROUTC='..............1.'B THEN R15=1;\n IF HCLROUTC='...............1'B THEN R16=1;\n\n IF HCLRECTP='W'               /* WTOR. */\n THEN DO;\n    INPUT HCLRV7 $CHAR3. @ ;\n    LENGTH=LENGTH-3;\n END;\n LENGTH=LENGTH-54;\n INPUT\n           HCLTEXT $VARYING78. LENGTH\n           ;\n\n IF (HCLRECTP='M' AND R15=1)\n  | (R11=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */\n  | (R01=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */\n  | (R10=1 AND HCLREQTP=' ')              /* OLTEP. */\n  THEN DELETE;\n IF HCLREQTP\u00ac=' ' & HCLREQTP\u00ac='R'\n THEN MSGID='*NONE*   ';\n ELSE DO;\n    MSGID=SUBSTR(HCLTEXT,1,9);\n    MSGID=SCAN(MSGID,1,' ');\n    IF SUBSTR(MSGID,1,1)='+'\n    THEN MSGID=SUBSTR(MSGID,2);\n END;\n IF (SUBSTR(MSGID,1,1)='$' AND SUBSTR(MSGID,2,4)\u00ac='HASP')\n  | SUBSTR(MSGID,1,2)='S '\n  | (HCLRECTP='W' AND HCLWTOR='@')\n  | (SUBSTR(MSGID,1,1) GE '0' AND SUBSTR(MSGID,1,1) LE '9')\n  | SUBSTR(MSGID,1,2)='# '\n  | SUBSTR(MSGID,1,2)='V '\n  | SUBSTR(MSGID,1,1)='&'\n  | SUBSTR(MSGID,1,1)='*'\n  | SUBSTR(MSGID,1,1)='\"'\n  | SUBSTR(MSGID,1,1)='-'\n  | (R02=1 AND R11=1 AND SUBSTR(HCLTEXT,1,1)='+')\n THEN MSGID='*NONE*   ';\n IF R12=1\n THEN MSGID='*JES328X*';\n DATE=HCLYEAR || '.' || HCLDAY;\n TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;\n\n\nPROC SUMMARY;\n VAR R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16;\n OUTPUT OUT=S N=;\n\nPROC PRINT;\n\nDATA B;\n SET A;\n IF MSGID='$HASP000'\n  | MSGID='$HASP308'\n  | MSGID='$HASP309'\n  | MSGID='$HASP317'\n  | MSGID='$HASP524'\n  | MSGID='$HASP604'\n  | MSGID='$HASP632'\n THEN DELETE;\n IF HCLREQTP='C' THEN DELETE;  /* COMMAND TEXT.     */\n IF HCLREQTP='R' THEN DELETE;  /* COMMAND RESPONSE. */\n IF HCLROUTC='0000000000000000'B THEN DELETE;\n IF HCLROUTC='0100000000000000'B THEN DELETE; /* MSTR CONSOLE INFO */\n IF HCLROUTC='0000001000000000'B THEN DELETE; /* UNIT RECORD POOL. */\n IF HCLROUTC='0000001100000000'B THEN DELETE;\n IF HCLROUTC='0000000100000000'B\n  & SUBSTR(MSGID,1,3)\u00ac='IST'     THEN DELETE;\n IF HCLROUTC='0000000000010000'B THEN DELETE; /* RC=12. JES328X. */\n IF HCLROUTC='0100000010000000'B THEN DELETE; /* SECURITY INFO. */\n IF HCLROUTC='0000000000100000'B THEN DELETE; /* PGMR INFORMATION. */\n IF HCLROUTC='0010000000000000'B THEN DELETE; /* TAPE LIBRARY.     */\n IF HCLROUTC='0010100000000000'B THEN DELETE; /* TAPE LIBRARY.     */\n IF HCLROUTC='0100000000100000'B THEN DELETE; /* RC=(2,11)         */\n IF HCLROUTC='0000000000001000'B THEN DELETE; /* TLMSII            */\n IF HCLROUTC='0100100000000000'B THEN DELETE; /* TLMSII. RC=(2,5)  */\n\n\nPROC FREQ ORDER=FREQ;\n TABLES MSGID;\n\nPROC PRINT UNIFORM;\n ID DATE; VAR TIME HCLTEXT;\n\n><       ADD   NAME=SYSLOG1\nOPTIONS OBS=5000;\n\nDATA A;\n INFILE SYSLOG\n LENGTH=LENGTH MISSOVER;\n INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */\n           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */\n @ ;\n IF HCLRECTP='X'\n  | HCLRECTP='S'\n  | HCLRECTP='L'\n  | HCLRECTP='D'\n  | HCLRECTP='E' THEN DELETE;\n INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */\n           HCLROUTC   HEX4.    /* ROUTING CODES                      */\n           HCLRV1     $CHAR1.  /* BLANK                              */\n           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */\n           HCLRV2     $CHAR1.  /* BLANK                              */\n           HCLYEAR    $CHAR2.  /* YEAR                  YY           */\n           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */\n           HCLRV3     $CHAR1.  /* BLANK                              */\n           HCLHR      $CHAR2.  /* HOURS                 HH           */\n           HCLCOLN1   $CHAR1.  /* COLON                   :          */\n           HCLMIN     $CHAR2.  /* MINUTES                  MM        */\n           HCLCOLN2   $CHAR1.  /* COLON                      :       */\n           HCLSEC     $CHAR2.  /* SECONDS                     SS     */\n           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */\n           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */\n           HCLRV4     $CHAR1.  /* BLANK                              */\n           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */\n           HCLRV5     $CHAR1.  /* BLANK                              */\n           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */\n           HCLRV6     $CHAR1.  /* BLANK                              */\n           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */\n           @ ;\n\n\n R01=.; R02=.; R03=.; R04=.; R05=.; R06=.; R07=.; R08=.;\n R09=.; R10=.; R11=.; R12=.; R13=.; R14=.; R15=.; R16=.;\n\n IF HCLROUTC='1...............'B THEN R01=1;\n IF HCLROUTC='.1..............'B THEN R02=1;\n IF HCLROUTC='..1.............'B THEN R03=1;\n IF HCLROUTC='...1............'B THEN R04=1;\n IF HCLROUTC='....1...........'B THEN R05=1;\n IF HCLROUTC='.....1..........'B THEN R06=1;\n IF HCLROUTC='......1.........'B THEN R07=1;\n IF HCLROUTC='.......1........'B THEN R08=1;\n IF HCLROUTC='........1.......'B THEN R09=1;\n IF HCLROUTC='.........1......'B THEN R10=1;\n IF HCLROUTC='..........1.....'B THEN R11=1;\n IF HCLROUTC='...........1....'B THEN R12=1;\n IF HCLROUTC='............1...'B THEN R13=1;\n IF HCLROUTC='.............1..'B THEN R14=1;\n IF HCLROUTC='..............1.'B THEN R15=1;\n IF HCLROUTC='...............1'B THEN R16=1;\n\n IF HCLRECTP='W'               /* WTOR. */\n THEN DO;\n    INPUT HCLRV7 $CHAR3. @ ;\n    LENGTH=LENGTH-3;\n END;\n LENGTH=LENGTH-54;\n INPUT\n           HCLTEXT $VARYING78. LENGTH\n           ;\n\n IF (HCLRECTP='M' AND R15=1)\n  | (R11=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */\n  | (R01=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */\n  | (R10=1 AND HCLREQTP=' ')              /* OLTEP. */\n  THEN DELETE;\n IF HCLREQTP\u00ac=' ' & HCLREQTP\u00ac='R'\n THEN MSGID='*NONE*   ';\n ELSE DO;\n    MSGID=SUBSTR(HCLTEXT,1,9);\n    MSGID=SCAN(MSGID,1,' ');\n    IF SUBSTR(MSGID,1,1)='+'\n    THEN MSGID=SUBSTR(MSGID,2);\n END;\n IF (SUBSTR(MSGID,1,1)='$' AND SUBSTR(MSGID,2,4)\u00ac='HASP')\n  | SUBSTR(MSGID,1,2)='S '\n  | (HCLRECTP='W' AND HCLWTOR='@')\n  | (SUBSTR(MSGID,1,1) GE '0' AND SUBSTR(MSGID,1,1) LE '9')\n  | SUBSTR(MSGID,1,2)='# '\n  | SUBSTR(MSGID,1,2)='V '\n  | SUBSTR(MSGID,1,1)='&'\n  | SUBSTR(MSGID,1,1)='*'\n  | SUBSTR(MSGID,1,1)='\"'\n  | SUBSTR(MSGID,1,1)='-'\n  | (R02=1 AND R11=1 AND SUBSTR(HCLTEXT,1,1)='+')\n THEN MSGID='*NONE*   ';\n IF R12=1\n THEN MSGID='*JES328X*';\n DATE=HCLYEAR || '.' || HCLDAY;\n TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;\n\n\nPROC SUMMARY;\n VAR R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16;\n OUTPUT OUT=S N=;\n\nPROC PRINT;\n\nDATA B;\n SET A;\n IF MSGID='*NONE*'\n  | MSGID='*JES328X*'\n  | MSGID='         '\n  | MSGID='$HASP000'\n  | MSGID='$HASP094'\n  | MSGID='$HASP097'\n  | MSGID='$HASP100'\n  | MSGID='$HASP101'\n  | MSGID='$HASP104'\n  | MSGID='$HASP110'\n  | MSGID='$HASP119'\n  | MSGID='$HASP120'\n  | MSGID='$HASP125'\n  | MSGID='$HASP150'\n  | MSGID='$HASP160'\n  | MSGID='$HASP170'\n  | MSGID='$HASP185'\n  | MSGID='$HASP190'\n  | MSGID='$HASP200'\n  | MSGID='$HASP203'\n  | MSGID='$HASP250'\n  | MSGID='$HASP301'\n  | MSGID='$HASP308'\n  | MSGID='$HASP309'\n  | MSGID='$HASP317'\n  | MSGID='$HASP318'\n  | MSGID='$HASP373'\n  | MSGID='$HASP375'\n  | MSGID='$HASP395'\n  | MSGID='$HASP396'\n  | MSGID='$HASP398'\n  | MSGID='$HASP520'\n  | MSGID='$HASP524'\n  | MSGID='$HASP534'\n  | MSGID='$HASP530'\n  | MSGID='$HASP540'\n  | MSGID='$HASP604'\n  | MSGID='$HASP608'\n  | MSGID='$HASP628'\n  | MSGID='$HASP632'\n  | MSGID='$HASP688'\n  | MSGID='$HASP900'\n  | MSGID='IDMS'\n  | MSGID='LXXM1SEP'\n  | MSGID='PPIFMISA'\n  | MSGID='SIM001I'\n  | MSGID='SIM201L'\n  | MSGID='SIM203L'\n  | MSGID='SIM205L'\n  | MSGID='SIM210L'\n  | MSGID='SIM214L'\n  | MSGID='SIM215L'\n  | MSGID='ACFAE139'\n  | MSGID='CSV003I'\n  | MSGID='CSV300I'\n  | MSGID='DTM1460I'\n  | MSGID='DTM1461I'\n  | MSGID='ACF79506'\n  | MSGID='ACFAE067'\n  | MSGID='IOS003A'\n  | MSGID='IKJ56644I'\n  | MSGID='READY'\n  | MSGID='END'\n  | MSGID='ACF99900'\n  | MSGID='ACFAE089'\n  | MSGID='ACFAE088'\n  | MSGID='ACFAE087'\n  | MSGID='ACFAE086'\n  | MSGID='ACFAE085'\n  | MSGID='ACFAE084'\n  | MSGID='ACFAE083'\n  | MSGID='ACFAE082'\n  | MSGID='ACFAE081'\n  | MSGID='ACFAE080'\n  | MSGID='ACFAE077'\n  | MSGID='ACFAE076'\n  | MSGID='ACFAE075'\n  | MSGID='ACFAE074'\n  | MSGID='ACFAE073'\n  | MSGID='ACFAE072'\n  | MSGID='ACFAE066'\n  | MSGID='ACFAE065'\n  | MSGID='ACFAE064'\n  | MSGID='ACFAE063'\n  | MSGID='ACFAE062'\n  | MSGID='ACFAE061'\n  | MSGID='ACFAE060'\n  | MSGID='ACFAE059'\n  | MSGID='ACFAE058'\n  | MSGID='ACFAE057'\n  | MSGID='ACFAE056'\n  | MSGID='ACFAE055'\n  | MSGID='ACFAE054'\n  | MSGID='ACFAE053'\n  | MSGID='ACFAE052'\n  | MSGID='ACFAE051'\n  | MSGID='ACFAE050'\n  | MSGID='ACFAE049'\n  | MSGID='ACFAE048'\n  | MSGID='ACFAE047'\n  | MSGID='ACFAE046'\n  | MSGID='ACFAE045'\n  | MSGID='ACFAE044'\n  | MSGID='ACFAE043'\n  | MSGID='ACFAE042'\n  | MSGID='ACFAE041'\n  | MSGID='ACFAE040'\n  | MSGID='ACFAE039'\n  | MSGID='ACFAE038'\n  | MSGID='ACFAE037'\n  | MSGID='ACFAE036'\n  | MSGID='ACFAE035'\n  | MSGID='ACFAE034'\n  | MSGID='ACFAE033'\n  | MSGID='ACFAE032'\n  | MSGID='ACFAE031'\n  | MSGID='ACFAE030'\n  | MSGID='ACFAE019'\n  | MSGID='ACFAE018'\n  | MSGID='ACFAE017'\n  | MSGID='ACFAE016'\n  | MSGID='ACFAE131'\n  | MSGID='ACTL13I'\n  | MSGID='CAT2291D'\n  | MSGID='CAT2295D'\n  | MSGID='CAT9006I'\n  | MSGID='CAT9007I'\n  | MSGID='IEA989I'\n  | MSGID='IEA995I'\n  | MSGID='IEC130I'\n  | MSGID='IEC161I'\n  | MSGID='IEC501A'\n  | MSGID='IEC502E'\n  | MSGID='IEC507D'\n  | MSGID='IEC705I'\n  | MSGID='IEC999I'\n  | MSGID='IEE400I'\n  | MSGID='IEE600I'\n  | MSGID='IEF091I'\n  | MSGID='IEF099I'\n  | MSGID='IEF196'\n  | MSGID='IEF196I'\n  | MSGID='IEF233A'\n  | MSGID='IEF234E'\n  | MSGID='IEF236I'\n  | MSGID='IEF237I'\n  | MSGID='IEF238D'\n  | MSGID='IEF244I'\n  | MSGID='IEF247I'\n  | MSGID='IEF403I'\n  | MSGID='IEF404I'\n  | MSGID='IEF125I'\n  | MSGID='IEF126I'\n  | MSGID='IEF433D'\n  | MSGID='IEF450I'\n  | MSGID='IEF452I'\n  | MSGID='IEF471E'\n  | MSGID='IEF489I'\n  | MSGID='IEF677I'\n  | MSGID='IEF861I'\n  | MSGID='IEF863I'\n  | MSGID='IST670I'\n  | MSGID='IST464I'\n  | MSGID='U11-626'\n  | MSGID='U11-656'\n  | MSGID='UCC7.579'\n  | SUBSTR(MSGID,1,4)='VSN='\n  | SUBSTR(MSGID,1,6)='SCIUSB'\n THEN DELETE;\n\n\nPROC FREQ ORDER=FREQ;\n TABLES MSGID;\n\nPROC PRINT UNIFORM;\n ID DATE; VAR TIME HCLTEXT;\n\nDATA C;\n SET A;\n IF MSGID='$HASP646'\n THEN DO;\n    PERCENT=SCAN(SUBSTR(HCLTEXT,10,3),1,' ');\n    DAY=DATEJUL(HCLYEAR || HCLDAY);\n    X=HCLHR || ':' || HCLMIN || ':' || HCLSEC;\n    T=INPUT(X,TIME8.);\n    KEEP DAY T PERCENT;\n    OUTPUT;\n END;\n DELETE;\n\nPROC SORT; BY DAY;\n\nPROC PRINT;\n\nPROC PLOT;\n PLOT PERCENT*T;\n FORMAT DAY DATE7. ;\n FORMAT T TIME. ;\n BY DAY;\n\nDATA C;\n SET A;\nIF HCLREQTP NE 'C' THEN DELETE;\nIF SUBSTR(HCLJOBID,7,2)='01' THEN HCLJOBID= '*MASTER*';\nIF SUBSTR(HCLJOBID,7,2)='02' THEN HCLJOBID= 'A BACKUP';\nIF SUBSTR(HCLJOBID,7,2)='03' THEN HCLJOBID= 'B BACKUP';\nIF SUBSTR(HCLJOBID,7,2)='05' THEN HCLJOBID= 'TAPEAREA';\nIF SUBSTR(HCLJOBID,7,2)='06' THEN HCLJOBID= '  PRINT ';\nIF SUBSTR(HCLJOBID,7,2)='08' THEN HCLJOBID= '   C/C  ';\nIF SUBSTR(HCLJOBID,7,2)='10' THEN HCLJOBID= '   C/C  ';\nIF SUBSTR(HCLJOBID,7,2)='11' THEN HCLJOBID= '   C/C  ';\nIF SUBSTR(HCLJOBID,7,2)='12' THEN HCLJOBID= ' LIBRARY';\nIF SUBSTR(HCLJOBID,1,3)='TSU' THEN HCLJOBID= '  TSU   ';\nIF SUBSTR(HCLJOBID,1,3)='JOB' THEN DELETE;\nCOMTYP = '        ';\n*BREAK JES2 COMMANDS DOWN BY COMMAND TYPE;\nIF SUBSTR(HCLTEXT,1,2)='$A' THEN COMTYP='$RELEASE';\nIF SUBSTR(HCLTEXT,1,2)='$B' THEN COMTYP='$BKSPACE';\nIF SUBSTR(HCLTEXT,1,2)='$C' THEN COMTYP='$CANCEL ';\nIF SUBSTR(HCLTEXT,1,2)='$D' THEN COMTYP='$DISPLAY';\nIF SUBSTR(HCLTEXT,1,2)='$E' THEN COMTYP='$RESTART';\nIF SUBSTR(HCLTEXT,1,2)='$F' THEN COMTYP='$FORWARD';\nIF SUBSTR(HCLTEXT,1,2)='$G' THEN COMTYP='$GDISPLY';\nIF SUBSTR(HCLTEXT,1,2)='$H' THEN COMTYP='$HOLD   ';\nIF SUBSTR(HCLTEXT,1,2)='$I' THEN COMTYP='$INTRUPT';\nIF SUBSTR(HCLTEXT,1,2)='$L' THEN COMTYP='$LIST   ';\nIF SUBSTR(HCLTEXT,1,2)='$M' THEN COMTYP='$MLTSPOL';\nIF SUBSTR(HCLTEXT,1,2)='$N' THEN COMTYP='$REPEAT ';\nIF SUBSTR(HCLTEXT,1,2)='$O' THEN COMTYP='$HELD DS';\nIF SUBSTR(HCLTEXT,1,2)='$P' THEN COMTYP='$DRAIN  ';\nIF SUBSTR(HCLTEXT,1,2)='$R' THEN COMTYP='$ROUTE  ';\nIF SUBSTR(HCLTEXT,1,2)='$S' THEN COMTYP='$START  ';\nIF SUBSTR(HCLTEXT,1,2)='$T' THEN COMTYP='$SET    ';\nIF SUBSTR(HCLTEXT,1,3)='$TR' THEN COMTYP='$TRACE  ';\nIF SUBSTR(HCLTEXT,1,2)='$V' THEN COMTYP='$MVS CMD';\nIF SUBSTR(HCLTEXT,1,2)='$Z' THEN COMTYP='$HALT   ';\n*BREAK DOWN MVS O/S COMMANDS BY COMMAND;\nIF SUBSTR(HCLTEXT,1,1)='C' THEN COMTYP='CANCEL ';\nIF SUBSTR(HCLTEXT,1,2)='CD' THEN COMTYP='CNGDUMP';\nIF SUBSTR(HCLTEXT,1,8)='CHNGDUMP' THEN COMTYP='CNGDUMP';\nIF SUBSTR(HCLTEXT,1,2)='CF' THEN COMTYP='CONFIG ';\nIF SUBSTR(HCLTEXT,1,6)='CONFIG' THEN COMTYP='CONFIG ';\nIF SUBSTR(HCLTEXT,1,1)='K' THEN COMTYP='CONSOLE';\nIF SUBSTR(HCLTEXT,1,6)='CONTROL' THEN COMTYP='CONSOLE';\nIF SUBSTR(HCLTEXT,1,1)='D' THEN COMTYP='DISPLAY';\nIF SUBSTR(HCLTEXT,1,7)='DISPLAY' THEN COMTYP='DISPLAY';\nIF SUBSTR(HCLTEXT,1,4)='DUMP' THEN COMTYP='DUMP   ';\nIF SUBSTR(HCLTEXT,1,2)='DS' THEN COMTYP='DUMP DS';\nIF SUBSTR(HCLTEXT,1,6)='DUMPDS' THEN COMTYP='DUMP DS';\nIF SUBSTR(HCLTEXT,1,5)='FORCE' THEN COMTYP='FORCE  ';\nIF SUBSTR(HCLTEXT,1,1)='Z' THEN COMTYP='HALT   ';\nIF SUBSTR(HCLTEXT,1,4)='HALT' THEN COMTYP='HALT   ';\nIF SUBSTR(HCLTEXT,1,1)='L' THEN COMTYP='LOG CMD';\nIF SUBSTR(HCLTEXT,1,3)='LOG' THEN COMTYP='LOG CMD';\nIF SUBSTR(HCLTEXT,1,1)='F' THEN COMTYP='MODIFY ';\nIF SUBSTR(HCLTEXT,1,6)='MODIFY' THEN COMTYP='MODIFY ';\nIF SUBSTR(HCLTEXT,1,1)='M' THEN COMTYP='MOUNT  ';\nIF SUBSTR(HCLTEXT,1,5)='MOUNT' THEN COMTYP='MOUNT  ';\nIF SUBSTR(HCLTEXT,1,2)='MN' THEN COMTYP='MONITOR';\nIF SUBSTR(HCLTEXT,1,7)='MONITOR' THEN COMTYP='MONITOR';\nIF SUBSTR(HCLTEXT,1,2)='MR' THEN COMTYP='ROUTMSG';\nIF SUBSTR(HCLTEXT,1,5)='MSGRT' THEN COMTYP='ROUTMSG';\nIF SUBSTR(HCLTEXT,1,2)='PA' THEN COMTYP='PAGEADD';\nIF SUBSTR(HCLTEXT,1,7)='PAGEADD' THEN COMTYP='PAGEADD';\nIF SUBSTR(HCLTEXT,1,6)='QUIESE' THEN COMTYP='QUIESE ';\nIF SUBSTR(HCLTEXT,1,1)='R' THEN COMTYP='REPLY';\nIF SUBSTR(HCLTEXT,1,5)='REPLY' THEN COMTYP='REPLY';\nIF SUBSTR(HCLTEXT,1,1)='S' THEN COMTYP='START  ';\nIF SUBSTR(HCLTEXT,1,5)='START' THEN COMTYP='START  ';\nIF SUBSTR(HCLTEXT,1,2)='SE' THEN COMTYP='SENDMSG';\nIF SUBSTR(HCLTEXT,1,4)='SEND' THEN COMTYP='SENDMSG';\nIF SUBSTR(HCLTEXT,1,1)='T' THEN COMTYP='SET CMD';\nIF SUBSTR(HCLTEXT,1,3)='SET' THEN COMTYP='SET CMD';\nIF SUBSTR(HCLTEXT,1,2)='SS' THEN COMTYP='SET SMF';\nIF SUBSTR(HCLTEXT,1,6)='SETSMF' THEN COMTYP='SET SMF';\nIF SUBSTR(HCLTEXT,1,2)='SL' THEN COMTYP='SLIPCMD';\nIF SUBSTR(HCLTEXT,1,4)='SLIP' THEN COMTYP='SLIPCMD';\nIF SUBSTR(HCLTEXT,1,1)='P' THEN COMTYP='STOP   ';\nIF SUBSTR(HCLTEXT,1,4)='STOP' THEN COMTYP='STOP   ';\nIF SUBSTR(HCLTEXT,1,2)='PM' THEN COMTYP='STOPMON';\nIF SUBSTR(HCLTEXT,1,6)='STOPMN' THEN COMTYP='STOPMON';\nIF SUBSTR(HCLTEXT,1,2)='PT' THEN COMTYP='TRACMSG';\nIF SUBSTR(HCLTEXT,1,6)='STOPTR' THEN COMTYP='TRACMSG';\nIF SUBSTR(HCLTEXT,1,1)='G' THEN COMTYP='OPRSWAP';\nIF SUBSTR(HCLTEXT,1,4)='SWAP' THEN COMTYP='OPRSWAP';\nIF SUBSTR(HCLTEXT,1,1)='I' THEN COMTYP='SMFSWAP';\nIF SUBSTR(HCLTEXT,1,6)='SWITCH' THEN COMTYP='SMFSWAP';\nIF SUBSTR(HCLTEXT,1,5)='TRACE' THEN COMTYP='TRACE  ';\nIF SUBSTR(HCLTEXT,1,2)='TR' THEN COMTYP='TRACK  ';\nIF SUBSTR(HCLTEXT,1,5)='TRACK' THEN COMTYP='TRACK  ';\nIF SUBSTR(HCLTEXT,1,1)='U' THEN COMTYP='UNLOAD ';\nIF SUBSTR(HCLTEXT,1,6)='UNLOAD' THEN COMTYP='UNLOAD ';\nIF SUBSTR(HCLTEXT,1,1)='V' THEN COMTYP='VARYCMD';\nIF SUBSTR(HCLTEXT,1,4)='VARY' THEN COMTYP='VARYCMD';\nIF SUBSTR(HCLTEXT,1,1)='W' THEN COMTYP='WRITLOG';\nIF SUBSTR(HCLTEXT,1,8)='WRITELOG' THEN COMTYP='WRITLOG';\nIF COMTYP = '        ' THEN DELETE;\n*MAKE SOME SENSE OF ALL THIS NONSENSE;\nPROC FREQ FORMCHAR='|----+|---' ORDER=FREQ;\nTABLES COMTYP HCLJOBID/ NOPERCENT NOROW NOCOL;\nTABLES COMTYP*HCLJOBID/ NOPERCENT NOROW NOCOL;\n><       ADD   NAME=SYSLOG2\n\nDATA A;\n INFILE SYSLOG\n LENGTH=LENGTH MISSOVER;\n INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */\n           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */\n @ ;\n IF HCLRECTP='X'\n  | HCLRECTP='S'\n  | HCLRECTP='L'\n  | HCLRECTP='D'\n  | HCLRECTP='E' THEN DELETE;\n INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */\n           HCLROUTC   HEX4.    /* ROUTING CODES                      */\n           HCLRV1     $CHAR1.  /* BLANK                              */\n           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */\n           HCLRV2     $CHAR1.  /* BLANK                              */\n           HCLYEAR    $CHAR2.  /* YEAR                  YY           */\n           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */\n           HCLRV3     $CHAR1.  /* BLANK                              */\n           HCLHR      $CHAR2.  /* HOURS                 HH           */\n           HCLCOLN1   $CHAR1.  /* COLON                   :          */\n           HCLMIN     $CHAR2.  /* MINUTES                  MM        */\n           HCLCOLN2   $CHAR1.  /* COLON                      :       */\n           HCLSEC     $CHAR2.  /* SECONDS                     SS     */\n           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */\n           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */\n           HCLRV4     $CHAR1.  /* BLANK                              */\n           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */\n           HCLRV5     $CHAR1.  /* BLANK                              */\n           HCLREQFL   HEX8.    /* USER EXIT/MPF REQUEST FLAGS        */\n           HCLRV6     $CHAR1.  /* BLANK                              */\n           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */\n           @ ;\n\n\n R01=.; R02=.; R03=.; R04=.; R05=.; R06=.; R07=.; R08=.;\n R09=.; R10=.; R11=.; R12=.; R13=.; R14=.; R15=.; R16=.;\n\n IF HCLROUTC='1...............'B THEN R01=1;\n IF HCLROUTC='.1..............'B THEN R02=1;\n IF HCLROUTC='..1.............'B THEN R03=1;\n IF HCLROUTC='...1............'B THEN R04=1;\n IF HCLROUTC='....1...........'B THEN R05=1;\n IF HCLROUTC='.....1..........'B THEN R06=1;\n IF HCLROUTC='......1.........'B THEN R07=1;\n IF HCLROUTC='.......1........'B THEN R08=1;\n IF HCLROUTC='........1.......'B THEN R09=1;\n IF HCLROUTC='.........1......'B THEN R10=1;\n IF HCLROUTC='..........1.....'B THEN R11=1;\n IF HCLROUTC='...........1....'B THEN R12=1;\n IF HCLROUTC='............1...'B THEN R13=1;\n IF HCLROUTC='.............1..'B THEN R14=1;\n IF HCLROUTC='..............1.'B THEN R15=1;\n IF HCLROUTC='...............1'B THEN R16=1;\n\n      IF HCLREQFL='...............................1'B\n THEN SUPPRESS='MPF ';\n ELSE IF HCLREQFL='.............................1..'B\n THEN SUPPRESS='TSSO';\n ELSE SUPPRESS='NO  ';\n\n IF HCLRECTP='W'               /* WTOR. */\n THEN DO;\n    INPUT HCLRV7 $CHAR3. @ ;\n    LENGTH=LENGTH-3;\n END;\n LENGTH=LENGTH-54;\n INPUT\n           HCLTEXT $VARYING78. LENGTH\n           ;\n\n IF (HCLRECTP='M' AND R15=1)\n  | (R11=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */\n  | (R01=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */\n  | (R10=1 AND HCLREQTP=' ')              /* OLTEP. */\n  THEN DELETE;\n IF HCLREQTP\u00ac=' '\n  | HCLRECTP='M'\n THEN MSGID='*NONE*   ';\n ELSE DO;\n    MSGID=SUBSTR(HCLTEXT,1,9);\n    MSGID=SCAN(MSGID,1,' ');\n    IF SUBSTR(MSGID,1,1)='+'\n    THEN MSGID=SUBSTR(MSGID,2);\n END;\n IF (SUBSTR(MSGID,1,1)='$' AND SUBSTR(MSGID,2,4)\u00ac='HASP')\n  | SUBSTR(MSGID,1,2)='S '\n  | (HCLRECTP='W' AND HCLWTOR='@')\n  | (SUBSTR(MSGID,1,1) GE '0' AND SUBSTR(MSGID,1,1) LE '9')\n  | SUBSTR(MSGID,1,2)='# '\n  | SUBSTR(MSGID,1,2)='V '\n  | SUBSTR(MSGID,1,1)='&'\n  | SUBSTR(MSGID,1,1)='*'\n  | SUBSTR(MSGID,1,1)='\"'\n  | SUBSTR(MSGID,1,1)='-'\n  | (R02=1 AND R11=1 AND SUBSTR(HCLTEXT,1,1)='+')\n THEN MSGID='*NONE*   ';\n IF R12=1\n THEN MSGID='*JES328X*';\n DATE=HCLYEAR || '.' || HCLDAY;\n TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;\n\n\nPROC SUMMARY;\n VAR R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16;\n OUTPUT OUT=S N=;\n\nPROC PRINT;\n\nPROC FREQ ORDER=FREQ DATA=WORK.A;\n TABLES SUPPRESS;\n\nPROC FREQ ORDER=FREQ DATA=WORK.A;\n TABLES MSGID;\n\nPROC FREQ ORDER=FREQ DATA=WORK.A;\n TABLES MSGID*SUPPRESS;\n./ ADD NAME=SASTLMS  0100-89155-89155-1410-00168-00168-00000-JIMLANE\nDATA TAPES.TAPES;\n INFILE VMF;\n INPUT    BASRVSCR $1.     /* SERVICE/SCRATCH INDICATOR              */\n          BATYPE   $1.     /* RECORD TYPE                            */\n          @;\n IF BATYPE\u00ac='B' THEN DELETE;\n INPUT\n          BAVSN    $6.     /* VOLUME SERIAL NUMBER                   */\n          BAVOLSQ  PD2.    /* VOLUME SEQUENCE NUMBER                 */\n          BAVOLCT  PD2.    /* VOLUME COUNT                           */\n          BAFILECT IB2.    /* FILE COUNT                             */\n          BAVSN1    $6.    /* MULTI-VOL 1ST VOLUME SERIAL NUMBER     */\n          BAVSNL    IB4.   /* MULTI-VOL LAST CHAIN PTR               */\n          BAMDS1    IB4.   /* MULTI-DATASET 1ST CHAIN PTR            */\n          BAMDSL    IB4.   /* MULTI-DATASET LAST CHAIN PTR           */\n          BAUNIQUE  IB4.   /* SORT UNIQUE CODE                       */\n          BADEN     $1.    /* DENSITY                                */\n          BATRTCH   $1.    /* TRACK RECORDING TECHNIQUE              */\n          BALABEL   $1.    /* LABEL TYPE                             */\n          RESV1     $1.    /* AVAILABLE                              */\n          BAACTIVE  IB2.   /* ACTIVE FILE COUNT                      */\n          BACDSSEQ  IB2.   /* CONTROLLING DATA SET SEQUENCE NUMBER   */\n          BALOC     $2.    /* VOLUME LOCATION                        */\n          BACCSS    $4.    /* BOX OR CABINET/SLOT                    */\n          BAVMOVED  PD3.   /* DATE VOLUME MOVED                      */\n          BAVKEEPD  PD3.   /* HIGHEST KEEP DATE ON VOLUME            */\n          BAVEXPDT  PD3.   /* HIGHEST IBM EXPIRATION DATE ON         */\n                           /* VOLUME                                 */\n          BAVSCRDT  PD3.   /* DATE VOLUME SCRATCHED                  */\n          BATLENTH  IB2.   /* TAPE LENGTH         (USER UPDATED)     */\n          BAPURCH   PD3.   /* PURCHASE DATE       (USER UPDATED)     */\n          BAMANU    $2.    /* MANUFACTURER CODE   (USER UPDATED)     */\n          BATAPTYP  $2.    /* TAPE TYPE           (USER UPDATED)     */\n          BALOST    $1.    /* LOST CODE           (USER UPDATED)     */\n          BADAMAGE  $1.    /* DAMAGED CODE        (USER UPDATED)     */\n          BADEST    $1.    /* DESTROYED CODE      (USER UPDATED)     */\n          BADESTDT  PD3.   /* DESTROYED DATE      (USER UPDATED)     */\n          RESV2     $15.   /* AVAILABLE                              */\n          BACLUSES  IB2.   /* USES SINCE CLEANED                     */\n          BACEUSES  IB2.   /* USES SINCE CERTIFIED                   */\n          BATOUSES  IB2.   /* USES SINCE PURCHASED                   */\n          BACURERG  IB2.   /* CURRENT ERASE GAPS ON VOLUME           */\n          BAMAXERG  IB2.   /* MAX ERASE GAPS ON VOLUME               */\n          BATMPRER  IB2.   /* CURRENT TEMPORARY READ ERRORS          */\n          BACLNCT   IB2.   /* CLEANINGS SINCE CERTIFIED              */\n          BACERTCT  IB2.   /* TOTAL CERTIFICATIONS                   */\n          BACLNDT   PD3.   /* CLEAN DATE                             */\n          BACERTDT  PD3.   /* CERTIFICATION DATE                     */\n          BAMVLCNT  IB2.   /* COUNT OF VOLUMES IN BAMVLTAB           */\n                           /* 5 OCCURRANCES OF MULTI-VOL INFO        */\n          BAMVLVSN  $6.    /* VOLUME SERIAL NUMBER                   */\n          BAMVLSEQ  IB2.   /* VOLUME SEQUENCE NUMBER                 */\n          RESV3     $32.   /* REMAINDER OF BAMVLTAB                  */\n          BAFILESQ  IB2.   /* FILE SEQUENCE NUMBER                   */\n          BAABEND   $1.    /* ABEND STATUS                           */\n          BACDSFLG  $1.    /* CONTROLLING DATA SET FLAG              */\n          BADSN     $44.   /* DATA SET NAME                          */\n          BACTIME   PD4.   /* CREATE TIME                            */\n          BACDATE   PD3.   /* CREATE DATE                            */\n          BACDRIVE  $3.    /* CREATE DRIVE                           */\n          BACJOB    $8.    /* CREATE JOBNAME                         */\n          BACSTEP   $8.    /* CREATE STEPNAME                        */\n          BAIDATE   PD3.   /* INPUT DATE                             */\n          BAIDRIVE  $3.    /* INPUT DRIVE                            */\n          BAIJOB    $8.    /* INPUT JOBNAME                          */\n          BABLKCT   IB4.   /* BLOCK COUNT                            */\n          BALRECL   IB2.   /* LOGICAL RECORD LENGTH                  */\n          BABLKSI   IB2.   /* BLOCK SIZE                             */\n          BARECFM   $3.    /* RECORD FORMAT                          */\n          BAJOBACC  $15.   /* JOB ACCOUNTING INFO (FROM IEFUJI)      */\n          BADKEEPD  PD3.   /* TLMS II KEEP DATE FOR DATA SET         */\n          BADEXPDT  PD3.   /* IBM EXPIRATION DATE FOR DATA SET       */\n          BACPUID   $1.    /* CREATION CPU ID                        */\n          BASPAN    $1.    /* SPANNED DATA SET FLAG (1 = SPANNED)    */\n          BADRSRV1  $2.    /* RESERVED FOR FUTURE ENHANCEMENTS       */\n          BADRSRV2  PD3.   /* RESERVED FOR FUTURE ENHANCEMENTS       */\n          BADXPIRD  PD3.   /* DATE DATA SET EXPIRED                  */\n  ;\n\n /*\nPROC PRINT; ID BAVSN; VAR BAVKEEPD BADKEEPD BASRVSCR BADSN;\n */\n\nDATA A;\n SET TAPES.TAPES;\n IF BASRVSCR='1';\n IF BALABEL=' ' THEN DELETE;\n IF SUBSTR(BAVSN,1,1)='0'\n  | SUBSTR(BAVSN,1,1)='1';\n IF SUBSTR(BAVSN,1,1)='1'\n THEN DEVICE='3480';\n ELSE DEVICE='3420';\n IF DEVICE='3480';\n IF BAFILECT=1;\n TYPE='OTHER  ';\n SYSTEM='NONE';\n TTAPES=0;\n PTAPES=0;\n TAPES=1;\n IF BABLKCT>0\n  & BABLKSI>0\n THEN DO;\n  IF BALRECL = 0 THEN BALRECL = BABLKSI;\n  IF BALRECL GT 23476\n  THEN GOODBLK = 23476;\n  ELSE GOODBLK = INT(23476/BALRECL) * BALRECL;\n  D = INT(((GOODBLK + 12) / 32) + 1);\n  BLTRK = INT(1499 / (D + 15));\n  TRACKS = INT((BABLKCT / BLTRK)*(BABLKSI / GOODBLK) + 1);\n END;\n ELSE DELETE;\n IF SUBSTR(BADSN,4,1)='.'  & SUBSTR(BADSN,3,1)='P'\n THEN DO;\n  TYPE='PROD';\n  PTAPES=1;\n  IF TRACKS <= 15 THEN DO;\n   TOPROD=1;\n   TODASD=1;\n  END;\n  ELSE DO;\n   TOPROD=0;\n   TODASD=0;\n  END;\n  SYSTEM=SUBSTR(BADSN,1,3);\n END;\n ELSE DO;\n  TYPE='TEST';\n  TTAPES=1;\n  IF TRACKS <= 15 THEN DO;\n   TOTEST=1;\n   TODASD=1;\n  END;\n  ELSE DO;\n   TOTEST=0;\n   TODASD=0;\n  END;\n  SYSTEM='***';\n END;\n IF TRACKS > 15 THEN TRACKS=0;\n KEEP BABLKCT BABLKSI BALOC BAFILECT\n TTAPES PTAPES\n TRACKS\n TOTEST TOPROD TODASD\n DEVICE\n BACJOB\n SYSTEM TYPE TAPES BADSN BASRVSCR BACDATE     BALABEL BAVSN;\n\n\nPROC SUMMARY DATA=WORK.A NWAY;\n CLASS SYSTEM;\n VAR TAPES TTAPES PTAPES TOTEST TOPROD TODASD TRACKS;\n OUTPUT OUT=S1 SUM= ;\n\nPROC PRINT; ID SYSTEM;\n VAR TTAPES PTAPES TAPES TRACKS TOTEST TOPROD TODASD;\n SUM TTAPES PTAPES TAPES TRACKS TOTEST TOPROD TODASD;\n\nDATA A;\n SET A;\n IF TOTEST=1 OR TOPROD=1;\n\nPROC SORT; BY SYSTEM BADSN;\n\nPROC PRINT; ID BADSN;\n VAR BABLKCT BABLKSI\n TRACKS\n BACJOB                           BACDATE     BALABEL BAVSN;\n BY SYSTEM;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SKELS": {"ttr": 30211, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x02\\xe3\\x02\\xe3\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 739, "newlines": 739, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=EDBRPRNT\nPROC 0\nCONTROL MSG\n   PRINTDS       DATASET('&EDBRDSNM')      -\n)SEL &POSOC \u00ac= &Z\n                 CLASS(&POSOC)             -\n)ENDSEL\n)SEL &POCOPY \u00ac= &Z\n                 COPIES(&POCOPY)           -\n)ENDSEL\n)SEL &PODEST \u00ac= &Z\n                 DEST(&PODEST)              -\n)ENDSEL\n)SEL &POFCB \u00ac= &Z\n                 FCB(&POFCB)                -\n)ENDSEL\n)SEL &FORM \u00ac= &Z\n                 FORMS(&FORM)              -\n)ENDSEL\n)SEL &UCS \u00ac= &Z\n                 UCS(&UCS)                -\n)ENDSEL\n)SEL &POPAGELN \u00ac= &Z\n                 PAGELEN(&POPAGELN)        -\n)ENDSEL\n)SEL &POHOLD = HOLD\n                 HOLD -\n)ENDSEL\n)SEL &POSPACE = SS\n                 SINGLE -\n)ENDSEL\n)SEL &POSPACE = DS\n                 DOUBLE -\n)ENDSEL\n                 NOTITLE\nEND\n./       ADD   NAME=FONTMAP\nOVERLAY FMAP SIZE 8 IN 10 IN OFFSET .5 IN .5 IN ;\nORIENT 00 ;\n)BLANK\n   FONT tfont  &TFONT DDNAME FONTDD ;\n   FONT FONT10 n4100c DDNAME FONTDD ;\n   FONT FONT07 n4107c DDNAME FONTDD ;\n)BLANK\n)SEL &OGL = OGL\n position absolute 6.3 in absolute .0 in ;\n drawbox 1.5 in .5 in 0\n withtext box 1 0 modern top right\n   line font10 char 'Page: &page';\n)BLANK\n)ENDSEL\n position absolute .5 in absolute .0 in ;\n drawbox 7 in .6 in 0\n withtext box 1 0 modern top left\n  line FONT10 char 'Character Map of Font &TYPEFACE'\n                   'Size: &POINTSIZ'\n)SEL &CHARFP = Fixed\n       FONT10 char '    Fixed &STYLE '\n)ENDSEL\n)SEL &CHARFP = Prop\n       FONT10 char '    Proportional &STYLE '\n)ENDSEL\n  line FONT07 char\n     'Coded Font: X0&TFONT     Char set: &CHARSET  '\n     '     Code Page: &CODEPAGE'\n  line FONT07 char 'Weight: &WEIGHT Width: &WIDTH'\n                   ' Active Code Points: &CODEPTS'\n  line FONT07 char\n     '&CODEPD';\n)BLANK\n   position absolute .5 in absolute .6 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 16\n       withtext box 1 0 modern\n         line font10 char ' '\n       withtext box 2 0 modern\n         line font10 char '0'\n       withtext box 3 0 modern\n         line font10 char '1'\n       withtext box 4 0 modern\n         line font10 char '2'\n       withtext box 5 0 modern\n         line font10 char '3'\n       withtext box 6 0 modern\n         line font10 char '4'\n       withtext box 7 0 modern\n         line font10 char '5'\n       withtext box 8 0 modern\n         line font10 char '6'\n       withtext box 9 0 modern\n         line font10 char '7'\n       withtext box 10 0 modern\n         line font10 char '8'\n       withtext box 11 0 modern\n         line font10 char '9'\n       withtext box 12 0 modern\n         line font10 char 'A'\n       withtext box 13 0 modern\n         line font10 char 'B'\n       withtext box 14 0 modern\n         line font10 char 'C'\n       withtext box 15 0 modern\n         line font10 char 'D'\n       withtext box 16 0 modern\n         line font10 char 'E'\n       withtext box 17 0 modern\n         line font10 char 'F' ;\n)BLANK\n   position absolute .5 in absolute .6 in ;\n   drawbox .4 in .55 in bold solid\n   repeat down   16\n       withtext box 1 0 modern\n         line font10 char ' '\n       withtext box 2 0 modern\n         line font10 char '0'\n       withtext box 3 0 modern\n         line font10 char '1'\n       withtext box 4 0 modern\n         line font10 char '2'\n       withtext box 5 0 modern\n         line font10 char '3'\n       withtext box 6 0 modern\n         line font10 char '4'\n       withtext box 7 0 modern\n         line font10 char '5'\n       withtext box 8 0 modern\n         line font10 char '6'\n       withtext box 9 0 modern\n         line font10 char '7'\n       withtext box 10 0 modern\n         line font10 char '8'\n       withtext box 11 0 modern\n         line font10 char '9'\n       withtext box 12 0 modern\n         line font10 char 'A'\n       withtext box 13 0 modern\n         line font10 char 'B'\n       withtext box 14 0 modern\n         line font10 char 'C'\n       withtext box 15 0 modern\n         line font10 char 'D'\n       withtext box 16 0 modern\n         line font10 char 'E'\n       withtext box 17 0 modern\n         line font10 char 'F' ;\n)BLANK\n   position right .4 in down .55 in;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '00'\n       withtext box 2 0 modern\n         line tfont hex '01'\n       withtext box 3 0 modern\n         line tfont hex '02'\n       withtext box 4 0 modern\n         line tfont hex '03'\n       withtext box 5 0 modern\n         line tfont hex '04'\n       withtext box 6 0 modern\n         line tfont hex '05'\n       withtext box 7 0 modern\n         line tfont hex '06'\n       withtext box 8 0 modern\n         line tfont hex '07'\n       withtext box 9 0 modern\n         line tfont hex '08'\n       withtext box 10 0 modern\n         line tfont hex '09'\n       withtext box 11 0 modern\n         line tfont hex '0A'\n       withtext box 12 0 modern\n         line tfont hex '0B'\n       withtext box 13 0 modern\n         line tfont hex '0C'\n       withtext box 14 0 modern\n         line tfont hex '0D'\n       withtext box 15 0 modern\n         line tfont hex '0E'\n       withtext box 16 0 modern\n         line tfont hex '0F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '10'\n       withtext box 2 0 modern\n         line tfont hex '11'\n       withtext box 3 0 modern\n         line tfont hex '12'\n       withtext box 4 0 modern\n         line tfont hex '13'\n       withtext box 5 0 modern\n         line tfont hex '14'\n       withtext box 6 0 modern\n         line tfont hex '15'\n       withtext box 7 0 modern\n         line tfont hex '16'\n       withtext box 8 0 modern\n         line tfont hex '17'\n       withtext box 9 0 modern\n         line tfont hex '18'\n       withtext box 10 0 modern\n         line tfont hex '19'\n       withtext box 11 0 modern\n         line tfont hex '1A'\n       withtext box 12 0 modern\n         line tfont hex '1B'\n       withtext box 13 0 modern\n         line tfont hex '1C'\n       withtext box 14 0 modern\n         line tfont hex '1D'\n       withtext box 15 0 modern\n         line tfont hex '1E'\n       withtext box 16 0 modern\n         line tfont hex '1F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '20'\n       withtext box 2 0 modern\n         line tfont hex '21'\n       withtext box 3 0 modern\n         line tfont hex '22'\n       withtext box 4 0 modern\n         line tfont hex '23'\n       withtext box 5 0 modern\n         line tfont hex '24'\n       withtext box 6 0 modern\n         line tfont hex '25'\n       withtext box 7 0 modern\n         line tfont hex '26'\n       withtext box 8 0 modern\n         line tfont hex '27'\n       withtext box 9 0 modern\n         line tfont hex '28'\n       withtext box 10 0 modern\n         line tfont hex '29'\n       withtext box 11 0 modern\n         line tfont hex '2A'\n       withtext box 12 0 modern\n         line tfont hex '2B'\n       withtext box 13 0 modern\n         line tfont hex '2C'\n       withtext box 14 0 modern\n         line tfont hex '2D'\n       withtext box 15 0 modern\n         line tfont hex '2E'\n       withtext box 16 0 modern\n         line tfont hex '2F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '30'\n       withtext box 2 0 modern\n         line tfont hex '31'\n       withtext box 3 0 modern\n         line tfont hex '32'\n       withtext box 4 0 modern\n         line tfont hex '33'\n       withtext box 5 0 modern\n         line tfont hex '34'\n       withtext box 6 0 modern\n         line tfont hex '35'\n       withtext box 7 0 modern\n         line tfont hex '36'\n       withtext box 8 0 modern\n         line tfont hex '37'\n       withtext box 9 0 modern\n         line tfont hex '38'\n       withtext box 10 0 modern\n         line tfont hex '39'\n       withtext box 11 0 modern\n         line tfont hex '3A'\n       withtext box 12 0 modern\n         line tfont hex '3B'\n       withtext box 13 0 modern\n         line tfont hex '3C'\n       withtext box 14 0 modern\n         line tfont hex '3D'\n       withtext box 15 0 modern\n         line tfont hex '3E'\n       withtext box 16 0 modern\n         line tfont hex '3F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '40'\n       withtext box 2 0 modern\n         line tfont hex '41'\n       withtext box 3 0 modern\n         line tfont hex '42'\n       withtext box 4 0 modern\n         line tfont hex '43'\n       withtext box 5 0 modern\n         line tfont hex '44'\n       withtext box 6 0 modern\n         line tfont hex '45'\n       withtext box 7 0 modern\n         line tfont hex '46'\n       withtext box 8 0 modern\n         line tfont hex '47'\n       withtext box 9 0 modern\n         line tfont hex '48'\n       withtext box 10 0 modern\n         line tfont hex '49'\n       withtext box 11 0 modern\n         line tfont hex '4A'\n       withtext box 12 0 modern\n         line tfont hex '4B'\n       withtext box 13 0 modern\n         line tfont hex '4C'\n       withtext box 14 0 modern\n         line tfont hex '4D'\n       withtext box 15 0 modern\n         line tfont hex '4E'\n       withtext box 16 0 modern\n         line tfont hex '4F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '50'\n       withtext box 2 0 modern\n         line tfont hex '51'\n       withtext box 3 0 modern\n         line tfont hex '52'\n       withtext box 4 0 modern\n         line tfont hex '53'\n       withtext box 5 0 modern\n         line tfont hex '54'\n       withtext box 6 0 modern\n         line tfont hex '55'\n       withtext box 7 0 modern\n         line tfont hex '56'\n       withtext box 8 0 modern\n         line tfont hex '57'\n       withtext box 9 0 modern\n         line tfont hex '58'\n       withtext box 10 0 modern\n         line tfont hex '59'\n       withtext box 11 0 modern\n         line tfont hex '5A'\n       withtext box 12 0 modern\n         line tfont hex '5B'\n       withtext box 13 0 modern\n         line tfont hex '5C'\n       withtext box 14 0 modern\n         line tfont hex '5D'\n       withtext box 15 0 modern\n         line tfont hex '5E'\n       withtext box 16 0 modern\n         line tfont hex '5F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '60'\n       withtext box 2 0 modern\n         line tfont hex '61'\n       withtext box 3 0 modern\n         line tfont hex '62'\n       withtext box 4 0 modern\n         line tfont hex '63'\n       withtext box 5 0 modern\n         line tfont hex '64'\n       withtext box 6 0 modern\n         line tfont hex '65'\n       withtext box 7 0 modern\n         line tfont hex '66'\n       withtext box 8 0 modern\n         line tfont hex '67'\n       withtext box 9 0 modern\n         line tfont hex '68'\n       withtext box 10 0 modern\n         line tfont hex '69'\n       withtext box 11 0 modern\n         line tfont hex '6A'\n       withtext box 12 0 modern\n         line tfont hex '6B'\n       withtext box 13 0 modern\n         line tfont hex '6C'\n       withtext box 14 0 modern\n         line tfont hex '6D'\n       withtext box 15 0 modern\n         line tfont hex '6E'\n       withtext box 16 0 modern\n         line tfont hex '6F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '70'\n       withtext box 2 0 modern\n         line tfont hex '71'\n       withtext box 3 0 modern\n         line tfont hex '72'\n       withtext box 4 0 modern\n         line tfont hex '73'\n       withtext box 5 0 modern\n         line tfont hex '74'\n       withtext box 6 0 modern\n         line tfont hex '75'\n       withtext box 7 0 modern\n         line tfont hex '76'\n       withtext box 8 0 modern\n         line tfont hex '77'\n       withtext box 9 0 modern\n         line tfont hex '78'\n       withtext box 10 0 modern\n         line tfont hex '79'\n       withtext box 11 0 modern\n         line tfont hex '7A'\n       withtext box 12 0 modern\n         line tfont hex '7B'\n       withtext box 13 0 modern\n         line tfont hex '7C'\n       withtext box 14 0 modern\n         line tfont hex '7D'\n       withtext box 15 0 modern\n         line tfont hex '7E'\n       withtext box 16 0 modern\n         line tfont hex '7F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '80'\n       withtext box 2 0 modern\n         line tfont hex '81'\n       withtext box 3 0 modern\n         line tfont hex '82'\n       withtext box 4 0 modern\n         line tfont hex '83'\n       withtext box 5 0 modern\n         line tfont hex '84'\n       withtext box 6 0 modern\n         line tfont hex '85'\n       withtext box 7 0 modern\n         line tfont hex '86'\n       withtext box 8 0 modern\n         line tfont hex '87'\n       withtext box 9 0 modern\n         line tfont hex '88'\n       withtext box 10 0 modern\n         line tfont hex '89'\n       withtext box 11 0 modern\n         line tfont hex '8A'\n       withtext box 12 0 modern\n         line tfont hex '8B'\n       withtext box 13 0 modern\n         line tfont hex '8C'\n       withtext box 14 0 modern\n         line tfont hex '8D'\n       withtext box 15 0 modern\n         line tfont hex '8E'\n       withtext box 16 0 modern\n         line tfont hex '8F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex '90'\n       withtext box 2 0 modern\n         line tfont hex '91'\n       withtext box 3 0 modern\n         line tfont hex '92'\n       withtext box 4 0 modern\n         line tfont hex '93'\n       withtext box 5 0 modern\n         line tfont hex '94'\n       withtext box 6 0 modern\n         line tfont hex '95'\n       withtext box 7 0 modern\n         line tfont hex '96'\n       withtext box 8 0 modern\n         line tfont hex '97'\n       withtext box 9 0 modern\n         line tfont hex '98'\n       withtext box 10 0 modern\n         line tfont hex '99'\n       withtext box 11 0 modern\n         line tfont hex '9A'\n       withtext box 12 0 modern\n         line tfont hex '9B'\n       withtext box 13 0 modern\n         line tfont hex '9C'\n       withtext box 14 0 modern\n         line tfont hex '9D'\n       withtext box 15 0 modern\n         line tfont hex '9E'\n       withtext box 16 0 modern\n         line tfont hex '9F' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex 'A0'\n       withtext box 2 0 modern\n         line tfont hex 'A1'\n       withtext box 3 0 modern\n         line tfont hex 'A2'\n       withtext box 4 0 modern\n         line tfont hex 'A3'\n       withtext box 5 0 modern\n         line tfont hex 'A4'\n       withtext box 6 0 modern\n         line tfont hex 'A5'\n       withtext box 7 0 modern\n         line tfont hex 'A6'\n       withtext box 8 0 modern\n         line tfont hex 'A7'\n       withtext box 9 0 modern\n         line tfont hex 'A8'\n       withtext box 10 0 modern\n         line tfont hex 'A9'\n       withtext box 11 0 modern\n         line tfont hex 'AA'\n       withtext box 12 0 modern\n         line tfont hex 'AB'\n       withtext box 13 0 modern\n         line tfont hex 'AC'\n       withtext box 14 0 modern\n         line tfont hex 'AD'\n       withtext box 15 0 modern\n         line tfont hex 'AE'\n       withtext box 16 0 modern\n         line tfont hex 'AF' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex 'B0'\n       withtext box 2 0 modern\n         line tfont hex 'B1'\n       withtext box 3 0 modern\n         line tfont hex 'B2'\n       withtext box 4 0 modern\n         line tfont hex 'B3'\n       withtext box 5 0 modern\n         line tfont hex 'B4'\n       withtext box 6 0 modern\n         line tfont hex 'B5'\n       withtext box 7 0 modern\n         line tfont hex 'B6'\n       withtext box 8 0 modern\n         line tfont hex 'B7'\n       withtext box 9 0 modern\n         line tfont hex 'B8'\n       withtext box 10 0 modern\n         line tfont hex 'B9'\n       withtext box 11 0 modern\n         line tfont hex 'BA'\n       withtext box 12 0 modern\n         line tfont hex 'BB'\n       withtext box 13 0 modern\n         line tfont hex 'BC'\n       withtext box 14 0 modern\n         line tfont hex 'BD'\n       withtext box 15 0 modern\n         line tfont hex 'BE'\n       withtext box 16 0 modern\n         line tfont hex 'BF' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex 'C0'\n       withtext box 2 0 modern\n         line tfont hex 'C1'\n       withtext box 3 0 modern\n         line tfont hex 'C2'\n       withtext box 4 0 modern\n         line tfont hex 'C3'\n       withtext box 5 0 modern\n         line tfont hex 'C4'\n       withtext box 6 0 modern\n         line tfont hex 'C5'\n       withtext box 7 0 modern\n         line tfont hex 'C6'\n       withtext box 8 0 modern\n         line tfont hex 'C7'\n       withtext box 9 0 modern\n         line tfont hex 'C8'\n       withtext box 10 0 modern\n         line tfont hex 'C9'\n       withtext box 11 0 modern\n         line tfont hex 'CA'\n       withtext box 12 0 modern\n         line tfont hex 'CB'\n       withtext box 13 0 modern\n         line tfont hex 'CC'\n       withtext box 14 0 modern\n         line tfont hex 'CD'\n       withtext box 15 0 modern\n         line tfont hex 'CE'\n       withtext box 16 0 modern\n         line tfont hex 'CF' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex 'D0'\n       withtext box 2 0 modern\n         line tfont hex 'D1'\n       withtext box 3 0 modern\n         line tfont hex 'D2'\n       withtext box 4 0 modern\n         line tfont hex 'D3'\n       withtext box 5 0 modern\n         line tfont hex 'D4'\n       withtext box 6 0 modern\n         line tfont hex 'D5'\n       withtext box 7 0 modern\n         line tfont hex 'D6'\n       withtext box 8 0 modern\n         line tfont hex 'D7'\n       withtext box 9 0 modern\n         line tfont hex 'D8'\n       withtext box 10 0 modern\n         line tfont hex 'D9'\n       withtext box 11 0 modern\n         line tfont hex 'DA'\n       withtext box 12 0 modern\n         line tfont hex 'DB'\n       withtext box 13 0 modern\n         line tfont hex 'DC'\n       withtext box 14 0 modern\n         line tfont hex 'DD'\n       withtext box 15 0 modern\n         line tfont hex 'DE'\n       withtext box 16 0 modern\n         line tfont hex 'DF' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex 'E0'\n       withtext box 2 0 modern\n         line tfont hex 'E1'\n       withtext box 3 0 modern\n         line tfont hex 'E2'\n       withtext box 4 0 modern\n         line tfont hex 'E3'\n       withtext box 5 0 modern\n         line tfont hex 'E4'\n       withtext box 6 0 modern\n         line tfont hex 'E5'\n       withtext box 7 0 modern\n         line tfont hex 'E6'\n       withtext box 8 0 modern\n         line tfont hex 'E7'\n       withtext box 9 0 modern\n         line tfont hex 'E8'\n       withtext box 10 0 modern\n         line tfont hex 'E9'\n       withtext box 11 0 modern\n         line tfont hex 'EA'\n       withtext box 12 0 modern\n         line tfont hex 'EB'\n       withtext box 13 0 modern\n         line tfont hex 'EC'\n       withtext box 14 0 modern\n         line tfont hex 'ED'\n       withtext box 15 0 modern\n         line tfont hex 'EE'\n       withtext box 16 0 modern\n         line tfont hex 'EF' ;\n)BLANK\n   position right 0 in down .55 in ;\n   drawbox .4 in .55 in bold solid\n   repeat across 15\n       withtext box 1 0 modern\n         line tfont hex 'F0'\n       withtext box 2 0 modern\n         line tfont hex 'F1'\n       withtext box 3 0 modern\n         line tfont hex 'F2'\n       withtext box 4 0 modern\n         line tfont hex 'F3'\n       withtext box 5 0 modern\n         line tfont hex 'F4'\n       withtext box 6 0 modern\n         line tfont hex 'F5'\n       withtext box 7 0 modern\n         line tfont hex 'F6'\n       withtext box 8 0 modern\n         line tfont hex 'F7'\n       withtext box 9 0 modern\n         line tfont hex 'F8'\n       withtext box 10 0 modern\n         line tfont hex 'F9'\n       withtext box 11 0 modern\n         line tfont hex 'FA'\n       withtext box 12 0 modern\n         line tfont hex 'FB'\n       withtext box 13 0 modern\n         line tfont hex 'FC'\n       withtext box 14 0 modern\n         line tfont hex 'FD'\n       withtext box 15 0 modern\n         line tfont hex 'FE'\n       withtext box 16 0 modern\n         line tfont hex 'FF' ;\n./       ADD   NAME=FONTMJCL\n)SET   OGL = OGL\n)SEL   &JOB = YES\n//&SYSUID.3 JOB AFP,'FONTMAP ',\n//         NOTIFY=&SYSUID,\n//         REGION=6M,\n//         MSGCLASS=X,\n//         CLASS=Z\n)ENDSEL\n//OG&STEP  EXEC PGM=DZIOVRLY\n//SYSPRINT  DD SYSOUT=Z\n//SAMPLE    DD DSN=LANEJ.SAMPLE.LIST3820,DISP=MOD\n//OVRLIB    DD DSN=SYS1.OVERLIB,DISP=SHR\n//SYMBOLIC  DD DUMMY\n//FONTDD    DD DSN=SYS1.FONTLIBB,DISP=SHR\n//SEGDD     DD DUMMY\n//SYSIN     DD *\n)IM FONTMAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMPELIST": {"ttr": 30469, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x08\\n\\x08\\n\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 2058, "newlines": 2058, "modlines": 0, "user": "LANEJ"}, "text": "./       ADD   NAME=$AMODE\n         MACRO\n&LABEL  $AMODE &MODE,&REG=R3,&SAVE=,&RESET=\n&SP      SETC  'SP'.'&SYSNDX'\n         AIF   (T'&MODE EQ 'O').MODEOK\n         AIF   ('&MODE' EQ '24' OR '&MODE' EQ '31').MODEOK\n         MNOTE 12,'*** INVALID AMODE SPECIFIED.'\n         MEXIT\n.MODEOK  ANOP\n         AIF   (T'&LABEL EQ 'O').NOLABEL\n&LABEL   DS    0H\n.NOLABEL ANOP\n         L     &REG,16\n         TM    CVTDCB-CVTMAP(&REG),CVTMVSE\n         BZ    &SP\n         AIF   (T'&SAVE EQ 'O').NOSAVE\n         SR    &REG,&REG\n         BSM   &REG,0\n         ST    &REG,&SAVE\n.NOSAVE  ANOP\n         AIF   (T'&RESET EQ 'O').SET\n         L     &REG,&RESET\n         O     &REG,=AL4(*+6)\n         BSM   0,&REG\n         AGO   .AMODE99\n.SET     ANOP\n         AIF   ('&MODE' EQ '31').TO31\n         L     &REG,=AL4(*+6)\n         BSM   0,&REG\n         AGO   .AMODE99\n.TO31    ANOP\n         L     &REG,=AL4(*+6+X'80000000')\n         BSM   0,&REG\n.AMODE99 ANOP\n&SP      DS    0H\n         MEND\n./       ADD   NAME=$EPILOG\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n./       ADD   NAME=$EXEC\n//LANEJ     JOB LANEJ,$EXEC,NOTIFY=LANEJ,REGION=6M,\n//*        USER=IBMUSER,\n//         MSGLEVEL=(1,1),MSGCLASS=X,CLASS=C\n//JOBLIB DD DSN=TECTSG.ISPFJCL.LOAD,DISP=SHR\n//*PORTRAIT OUTPUT PAGEDEF=A16D,FORMDEF=A16D DEFAULT=YES\n//*TWOUP    OUTPUT PAGEDEF=A26D,FORMDEF=A26D DEFAULT=YES\n//*FOURUP   OUTPUT PAGEDEF=U46D,FORMDEF=U46D DEFAULT=YES\n//*-------------------------------------------------------------*\n//*   THIS JCL IS IN:        LANEJ.TECTSG.SMPELIST($EXEC)\n//*-------------------------------------------------------------*\n// EXEC PGM=LISTCSI,REGION=4000K\n//SYSPRINT DD DSN=LANEJ.FM,DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n//SMPCSI   DD DSN=MVSESA.MVSP.SMPCSI.CSI,\n//         DISP=SHR\n./       ADD   NAME=$IDCAMS\n//TSGJCL  JOB T50000,LANE,\n//         NOTIFY=TSGJCL,MSGCLASS=X,CLASS=X\n// EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=*\n//RMF DD DSN=MVST.V1R5.CSI,DISP=SHR\n//SYSIN DD *\n PRINT IFILE(RMF) FROMKEY(X'00016F00E4E8F3')  COUNT(256)\n./       ADD   NAME=$PELIST\n//TSGJCLA   JOB  (T50000),'TSGJCL ',\n//          NOTIFY=TSGJCL,MSGCLASS=X,CLASS=Z\n//STEP1     EXEC PGM=PELIST,PARM=(MVST,MVSD)                            090002\n//STEPLIB   DD   DSN=TSGJCL.SYSTEMS.LOAD,DISP=SHR\n//GLBLCSI   DD   DSN=GLOBAL.V1R5.CSI,DISP=SHR\n//TARGCSI   DD   DSN=MVST.V1R5.CSI,DISP=SHR\n//DISTCSI   DD   DSN=MVSD.V1R5.CSI,DISP=SHR\n//WRKDISK   DD   DSN=&&WORK,DISP=(,PASS,DELETE),\n//          UNIT=WORK,\n//          SPACE=(3120,(100,50)),\n//          DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DISKIN    DD   DDNAME=WRKDISK\n//REPORT    DD   SYSOUT=*\n//SYSOUT    DD   SYSOUT=*\n./       ADD   NAME=$PROLOG\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n./       ADD   NAME=$REGS\n         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n./       ADD   NAME=#RTN\n         MACRO\n&LABEL   #RTN\n.*---------------------------------------------------------------------\n.*\n.*       STANDARD RETURN MACRO\n.*\n.*---------------------------------------------------------------------\n         L     R13,4(R13)         GET BACK CHAIN POINTER\n         ST    R15,16(R13)        SAVE REGISTER 15 (RETCODE)\n         LM    R14,R12,12(R13)    RESTORE CALLERS REGS\n         BR    R14                RETURN TO CALLER\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n.*\n.*       FREEWARE: THIS MACRO IS DISTRIBUTED ON AN AS-IS BASIS\n.*                 WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:\n.*\n.*                 THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)\n.*                 P.O. BOX 21525\n.*                 GREENFIELD, WI 53221\n.*\n.*\n.*       MACRO WRITTEN BY:\n.*\n.*                 PRODUCTIVITY SYSTEMS, INC.\n.*                 MILWAUKEE, WI\n.*\n.*---------------------------------------------------------------------\n.*\n.*    THIS MACRO HAS MET A BASIC SET OF PROGRAMMING AND\n.*    DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY\n.*    FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL\n.*    EVALUATION OF THE USE OF THIS MACRO IN THEIR ENVIRONMENT.\n.*\n.*    NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS\n.*    FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,\n.*    FUNCTION, RESULTS, OR PERFORMANCE OF THIS MACRO.\n.*\n.*    IMPLEMENTATION AND USE OF THIS MACRO CONSTITUTES A RELEASE\n.*    FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF\n.*    THIS MACRO AT THE USER'S INSTALLATION.\n.*\n.*    THIS MACRO IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.\n.*    RECIPIENTS ARE FREE TO MAKE THIS MACRO AVAILABLE TO OTHERS IN\n.*    LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY\n.*    NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN\n.*    INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE\n.*    INTEGRATED INTO ANY PROGRAM FOR SUCH USE.\n.*\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n         MEND\n./       ADD   NAME=#SLC\n         MACRO\n&LABEL   #SLC\n.*---------------------------------------------------------------------\n.*\n.*       STANDARD LINKAGE MACRO\n.*\n.*---------------------------------------------------------------------\n         LCLA  &AA,&BB,&CC\n&AA      SETA  1\n&LABEL   CSECT\n         SAVE  (14,12),,'&LABEL &SYSPARM &SYSDATE &SYSTIME '\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n         LR    &SYSLIST(1),R15    SET BASE\n         LA    R1,SAVEAREA\n         B     START\nSAVEAREA DC    18F'0'\nSTART    EQU   *\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         L     R1,24(R13)          RESTORE REG 1\n         LA    R13,SAVEAREA        SET SAVEAREA POINTER\n.LOOP    ANOP\n&AA      SETA  &AA+1\n&CC      SETA  &CC+4096\n         AIF   (&AA GT N'&SYSLIST).DONE\n&BB      SETA  &AA-1\n         USING &LABEL+&CC,&SYSLIST(&AA) INFORM ASSEMBLER\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&BB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         AGO   .LOOP\n.DONE    ANOP\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n.*\n.*       FREEWARE: THIS MACRO IS DISTRIBUTED ON AN AS-IS BASIS\n.*                 WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:\n.*\n.*                 THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)\n.*                 P.O. BOX 21525\n.*                 GREENFIELD, WI 53221\n.*\n.*\n.*       MACRO WRITTEN BY:\n.*\n.*                 PRODUCTIVITY SYSTEMS, INC.\n.*                 MILWAUKEE, WI\n.*\n.*---------------------------------------------------------------------\n.*\n.*    THIS MACRO HAS MET A BASIC SET OF PROGRAMMING AND\n.*    DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY\n.*    FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL\n.*    EVALUATION OF THE USE OF THIS MACRO IN THEIR ENVIRONMENT.\n.*\n.*    NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS\n.*    FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,\n.*    FUNCTION, RESULTS, OR PERFORMANCE OF THIS MACRO.\n.*\n.*    IMPLEMENTATION AND USE OF THIS MACRO CONSTITUTES A RELEASE\n.*    FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF\n.*    THIS MACRO AT THE USER'S INSTALLATION.\n.*\n.*    THIS MACRO IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.\n.*    RECIPIENTS ARE FREE TO MAKE THIS MACRO AVAILABLE TO OTHERS IN\n.*    LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY\n.*    NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN\n.*    INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE\n.*    INTEGRATED INTO ANY PROGRAM FOR SUCH USE.\n.*\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n         MEND\n./       ADD   NAME=GIMMAC\n         MACRO\n         GIMMAC\n         PUSH  PRINT\n         PRINT GEN\nGMAC     DSECT ,\nGMAIDENT DS    XL4                 00013040 IDENTIFIES A MACRO     @L05\nGMANAME  DS    CL8                 MACRO NAME\nGMASUBID DS    XL2                 MACRO SUBTYPE IDENTIFIER        @L05\nGMASELF  EQU   X'0100'             SELF-DEFINING ENTRY             @L05\nGMAFMID  EQU   X'0120'             FMID THAT THE MAC BELONGS TO    @L05\nGMARMID  EQU   X'0130'             SYSMOD LAST REPLACED THE MACRO  @L05\nGMALSTUP EQU   X'0D90'             LAST UPDATE                     @L05\nGMASLIB  EQU   X'0DD0'             SYSLIB THE MACRO GOES INTO      @L05\nGMADLIB  EQU   X'1F00'             DISTLIB THE MACRO LIVES IN      @L05\nGMARESV2 DS    XL2                 ??\nGMADATA1 DS    CL8                 VARIABLE DATA\n         POP   PRINT\n         MEND\n./       ADD   NAME=GIMMOD\n         MACRO\n         GIMMOD\n         PUSH  PRINT\n         PRINT GEN\nGMOD     DSECT ,\nGMOIDENT DS    XL4                 00013030 IDENTIFIES A MOD       @L05\nGMONAME  DS    CL8                 MODULE NAME\nGMOSUBID DS    XL2                 MODULE SUBTYPE IDENTIFIER       @L05\nGMOSELF  EQU   X'0100'             SELF-DEFINING ENTRY             @L05\nGMOFMID  EQU   X'0120'             FMID THAT THE MOD BELONGS TO    @L05\nGMORMID  EQU   X'0130'             SYSMOD LAST REPLACED THE MODULE @L05\nGMOLSTUP EQU   X'0D90'             LAST UPDATE                     @L05\nGMODLIB  EQU   X'1F00'             DISTLIB THE MODULES LIVES IN    @L05\nGMOCSECT EQU   X'2130'             A CSECT WITHIN THE MODULE       @L05\nGMOLMOD  EQU   X'3010'             THE LMOD THIS MOD BELONGS IN    @L05\nGMORESV3 DS    XL2                 ??\nGMODATA1 DS    CL8                 VARIABLE DATA\n         POP   PRINT\n         MEND\n./       ADD   NAME=GIMSYMOD\n         MACRO\n         GIMSYMOD\n         PUSH  PRINT\n         PRINT GEN\nGSYSMOD  DSECT ,\nGSYIDENT DS    XL4                 00016F00 IDENTIFIES A SYSMOD    @L05\nGSYNAME  DS    CL8                 SYSMOD NAME\nGSYSUBID DS    XL2                 SYSMOD SUBTYPE IDENTIFIER       @L05\nGSYSELF  EQU   X'0100'             SELF-DEFINING ENTRY             @L05\nGSYTYPE  EQU   X'0140'             SYSMOD TYPE                     @L05\nGSYSTATE EQU   X'0150'             SYSMOD STATUS (I THINK)         @L05\nGSYLSTSP EQU   X'0170'             LASTSUP                         @L05\nGSYFMID  EQU   X'0E20'             FMID THE SYSMOD BELONGS TO      @L05\nGSYRECV  EQU   X'0E30'             RECEIVE DATE AND TIME           @L05\nGSYINST  EQU   X'0E40'             INSTALL DATE AND TIME           @L05\nGSYPRERQ EQU   X'7020'             SYSMOD THAT THIS ONE PREREQ'S   @L05\nGSYSUP   EQU   X'7040'             SYSMOD THAT THIS ONE SUP'S      @L05\nGSYDELET EQU   X'7080'             SYSMOD DELETED BY THIS ONE      @L05\nGSYSRCID EQU   X'70C0'             SYSMOD SOURCE IDENTIFIER        @L05\nGSYMOD   EQU   X'3030'             A MOD CONTAINED IN THIS SYSMOD  @L05\nGSYMAC   EQU   X'3040'             A MAC CONTAINED IN THIS SYSMOD  @L05\nGSYSUPBY EQU   X'F0'               A SYSMOD THAT SUPS THIS ONE\n*SYIFREQ EQU   X'F1'               IFREQ\nGSYRESV2 DS    XL2                 ??\nGSYDATA1 DS    CL8                 VARIABLE DATA\n         ORG   GSYDATA1\nGSYDATE  DS    PL3                 APPLY OR ACCEPT DATE\nGSYTIME  DS    XL3                 TIME X'HHMMSS'\n         ORG   GSYDATA1\nGSYIFID1 DS    CL8                 IFREQ NAME 1\nGSYIFID2 DS    CL8                 IFREQ NAME 2\n         ORG   GSYDATA1+8\n         POP   PRINT\n         MEND\n./       ADD   NAME=GIMZONE\n         MACRO\n         GIMZONE\n         PUSH  PRINT\n         PRINT GEN\nGZONE    DSECT ,\nGZOIDENT DS    XL4                 00010300 IDENTIFIES A ZONE      @L05\nGZONAME  DS    CL8                 ZONE NAME\nGZORESV1 DS    XL1                 CONSTANT X'10'\nGZOSUBID DS    XL1                 ZONE SUBTYPE IDENTIFIER\nGZOTYPE  EQU   X'00'               ZONE TYPE\nGZORESV2 DS    XL1                 ??                              @L05\nGZODATA1 DS    CL8                 VARIABLE DATA\n         POP   PRINT\n         MEND\n./       ADD   NAME=LISTCSI\n         PRINT  GEN\nLCSI     TITLE 'DISCLAIMER AND AUTHOR''S NAME.'\n*---------------------------------------------------------------------*\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT SUNCOR INC.  OR SUPPLIED BY OTHER    *\n*     USERS ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST AND IS *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.                        *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO SUNCOR.  HOWEVER, NO PROMISE CAN BE MADE THAT SUCH           *\n*     SUGGESTIONS WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT    *\n*     COMMENTS TO:                                                    *\n*                                                                     *\n*              JIM LANE                                               *\n*              TECHNICAL SUPPORT GROUP                                *\n*              SUNCOR INC.                                            *\n*              36 YORK MILLS RD                                       *\n*              TORONTO, ONTARIO M2P 2C5                               *\n*                                                                     *\n*                PHONE: (416)-733-7396                                *\n*                                                                     *\n*                SHARE INSTALLATION CODE: SNI                         *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY SUNCOR WITHOUT CHARGE OR      *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*  NAME     LISTCSI                                                   *\n*                                                                     *\n*  ABSTRACT THIS PROGRAM PRODUCES A CONDENSED LISTING OF THE CONTENTS *\n*           OF AN SMP/E CSI DATASET.  IT LISTS THE FOLLOWING ELEMENT  *\n*           TYPES (IN THE INDICATED ORDER) WITH THE FOLLOWING DATA    *\n*           FOR EACH:                                                 *\n*                                                                     *\n*              MODS     FMID/RMID/LASTUPD/DISTLIB/LMOD                *\n*              MACS     FMID/RMID/LASTUPD/DISTLIB/SYSLIB              *\n*              SYSMODS  STATUS/FMID/LASTUPD/DATE/PRE/SUP/ELEMENTS     *\n*                                                                     *\n*           LISTCSI IS NOT INTENDED TO COMPLETELY REPLACE THE LIST    *\n*           FUNCTION OF SMP/E, BUT JUST CREATE A SUMMARY THAT WON'T   *\n*           WRECK YOUR BACK GETTING IT TO YOUR OFFICE (OR TURN THE    *\n*           TREE INTO AN ENDANGERED SPECIES).                         *\n*                                                                     *\n*                                                                     *\n* ENVIRONMENT                                                         *\n*                                                                     *\n*           MVS/XA 2.2.0                                              *\n*           DFP/XA 2.3.0                                              *\n*           SMP/E  1.5.0\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*  JCL REQUIREMENTS:                                                  *\n*                                                                     *\n*     //JOBNAME  JOB ............                                     *\n*     //LIST   EXEC PGM=LISTCSI,REGION=4000K                          *\n*     //STEPLIB  DD DSN=TSGJCL.SYSTEMS.LOAD,DISP=SHR                  *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*     //SYSUDUMP DD SYSOUT=*                                          *\n*     //SMPCSI   DD DSN=SYS1.EUPT.CSI,                                *\n*     //         DISP=SHR                                             *\n*                                                                     *\n*  REGISTER USAGE:                                                    *\n*                                                                     *\n*     2 -      BASE ADDRESS FOR CSI RECORDS                           *\n*    10 -      INTERNAL SUBROUTINE LINKAGE                            *\n*    11 -      PROGRAM BASE ADDRESS 1                                 *\n*    12 -      PROGRAM BASE ADDRESS 2                                 *\n*                                                                     *\n*  IBM MACROS:    ABEND ACB CLOSE CVT DCB EXLST GET OPEN PUT RPL      *\n*                                                                     *\n*  USER MACROS:   $AMODE $EPILOG $PROLOG $REGS GIMMAC GIMMOD GIMSYMOD *\n*                 GIMZONE                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*    CHANGE ACTIVITY SUMMARY:                                         *\n*                                                                     *\n*    @TEC - FIX BUGS FOUND AFTER AUTHOR'S MOVE TO TORONTO HYDRO:      *\n*         . FIRST 2 BYTES OF KEY AREN'T ALWAYS X'0001'                *\n*         - CHANGE PAGE LENGTH TO 80                                  *\n*    @L05 - UPGRADE TO SUPPORT CSI FORMAT OF SMP/E RELEASE 5.         *\n*         - SKIP PRINTING OF SYSMODS IN UNKNOWN STATUS.               *\n*         - CORRECTLY PRINT RECEIVE AND INSTALL DATES. I HAD THOUGHT  *\n*           THESE WERE APPLY AND ACCEPT DATE RESPECTIVELY.            *\n*         - INCREASE CAPACITY OF ELEMENTS AND SUPERSEDED SYSMOD       *\n*           TABLES TO ALLOW FULL DETAILS OF FUNCTION SYSMODS.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         TITLE 'LIST THE CONTENTS OF AN SMP/E CSI CLUSTER.'\n&NAME    SETC  'LISTCSI'\n&VERSION SETC  '1.2.0'                                             @L05\n         AMODE 31\n         PUNCH ' MODE AMODE(31),RMODE(24) '\n         $REGS ,\nLISTCSI  $PROLOG R11,R12          ENTRY LINKAGE\n         LA    R2,CSIREC          BASE ADDRESS FOR CSI RECORDS.\n         OPEN  (SYSPRINT,OUTPUT)\n         OPEN  (ACBCSI)\n         LTR   R15,R15            DID IT OPEN?\n         BZ    NEXTREC            YES.\n         ABEND 98\n         SPACE ,\nNEXTREC  DS    0H\n         LA    R1,RPLCSI           PICK UP ADDR OF RPL\n         GET   RPL=(1)             READ IN A CSI RECORD\n         LTR   R15,R15             GOTTEN OK?\n         BZ    GOTONE              YES.\n         ABEND 99                  OOPS?\n         SPACE ,\n***********************************************************************\n*    CHECK THE 1ST 4 BYTES OF THE RECORD TO DETERMINE IF IT IS A TYPE *\n*    WE WANT TO PROCESS.                                              *\n***********************************************************************\n         SPACE ,\nGOTONE   DS    0H\n         CLC   2(2,R2),GIMSMOD     IS THIS A SYSMOD?               @TEC\n         BE    DOSYSMOD            YES. LET'S DO IT.\n         CLC   2(2,R2),GIMMOD      IS THIS A MOD?                  @TEC\n         BE    DOMOD               YES.\n         CLC   2(2,R2),GIMMAC      IS THIS A MAC?                  @TEC\n         BE    DOMAC               YES.\n         CLC   2(2,R2),GIMZONE     ZONE DESCRIPTION?               @TEC\n         BE    DOZONE              YES.\n         B     NEXTREC             TRY THE NEXT ONE.\n         SPACE ,\nEODCSI   DS    0H\n         CLOSE (ACBCSI,,SYSPRINT)\n         $EPILOG ,\n         TITLE 'ROUTINE TO PROCESS A SYSMOD ENTRY.'\n         USING GSYSMOD,R2\nDOSYSMOD DS    0H\n         TM    SWITCH,MOD1ST       DID WE HAVE MODS PREVIOUSLY?\n         BZ    *+16                NO.\n         TM    SWITCH,MODRIGHT     DID THEY LEAVE A PARTIAL LINE?\n         BZ    *+8                 NO.\n         BAL   R10,PRINTIT         IF SO, PRINT IT.\n         NI    SWITCH,255-MOD1ST   FORGET ABOUT MODS NOW.\n         TM    SWITCH,SYSM1ST      HAVE WE DONE ONE OF THESE YET?\n         BO    *+12                YES.\n         OI    SWITCH,SYSM1ST      THEN THIS MUST BE THE ONE.\n         BAL   R10,SYSMTITL\n         XC    ELEMOFF,ELEMOFF     RESET ELEMENT COUNT\n         XC    ELEMNUM,ELEMNUM     RESET ELEMENT COUNT\n         XC    SUPOFF,SUPOFF       RESET SUP COUNT\n         XC    PREOFF,PREOFF       RESET PRE COUNT\n         MVC   SAVSMOD,GSYNAME     SAVE THE NAME OF THIS SYSMOD.\n         AP    CNTSMODR,ONE        COUNT A SYSMOD RECORD\n         AP    CNTSMODS,ONE        COUNT A SYSMOD.\n         SPACE ,\nSMGET    LA    R1,RPLCSI           PICK UP ADDR OF RPL\n         GET   RPL=(1)             READ IN A CSI RECORD\n         AP    CNTSMODR,ONE        COUNT A SYSMOD RECORD\n         CLC   SAVSMOD,GSYNAME     IS IT STILL THE SAME SYSMOD?\n         BNE   SMSKIP99            NO. PRINT THE OLD ONE.\n         CLC   GSYSUBID,=AL2(GSYFMID) IS THIS THE FMID SUBREC?     @L05\n         BNE   SMSKIP1             NO\n         MVC   SAVFMID,GSYDATA1    SAVE FMID NAME.\n         B     SMGET               AND GET ANOTHER RECORD.\n         SPACE ,\nSMSKIP1  DS    0H\n         CLC   GSYSUBID,=AL2(GSYRECV) IS THIS THE RECEIVE SUBREC   @L05\n         BNE   SMSKIP2             NO\n         MVC   SAVRCDTE,GSYDATE    SAVE THE RECEIVE DATE           @L05\n         MVC   SAVRCTME,GSYTIME    SAVE THE RECEIVE TIME           @L05\n         SR    R0,R0               CLEAR R0.\n         ICM   R0,7,GSYDATE        PICK UP APPLY DATE.\n         XC    DTWORK,DTWORK       CLEAR DOUBLE WORD\n         ST    R0,DTWORK+4         STORE FOR DATE CONVERSION\n         LA    R1,DTWORK           SETUP ADDRESS\n         ST    R1,DTPARM           OF PACKED FIELD\n         LA    R1,DTPARM           IN PARMLIST\n         L     R15,=V(XDATEDIT)    ADDRESS OF DATE CONVERT ROUTINE\n         BALR  R14,R15             CONVERT DATE\n         MVC   LSRCDATE,DTWORK     SETUP CONVERTED DATE            @L05\n         B     SMGET               AND GET ANOTHER RECORD.\n         SPACE ,\nSMSKIP2  DS    0H\n         CLC   GSYSUBID,=AL2(GSYINST)  IS THIS THE INSTALL SUBREC  @L05\n         BNE   SMSKIP3             NO\n         MVC   SAVINDTE,GSYDATE    SAVE THE ACCEPT DATE            @L05\n         MVC   SAVINTME,GSYTIME    SAVE THE ACCEPT TIME            @L05\n         SR    R0,R0               CLEAR R0.\n         ICM   R0,7,GSYDATE        PICK UP ACCEPT DATE.\n         XC    DTWORK,DTWORK       CLEAR DOUBLE WORD\n         ST    R0,DTWORK+4         STORE FOR DATE CONVERSION\n         LA    R1,DTWORK           SETUP ADDRESS\n         ST    R1,DTPARM           OF PACKED FIELD\n         LA    R1,DTPARM           IN PARMLIST\n         L     R15,=V(XDATEDIT)    ADDRESS OF DATE CONVERT ROUTINE\n         BALR  R14,R15             CONVERT DATE\n         MVC   LSINDATE,DTWORK     SETUP CONVERTED DATE            @L05\n         B     SMGET               AND GET ANOTHER RECORD.         @L05\n         SPACE ,\nSMSKIP3  DS    0H\n         CLC   GSYSUBID,=AL2(GSYLSTSP) IS THIS THE LASTSUP SUBREC? @L05\n         BNE   SMSKIP4             NO\n         MVC   SAVLSTSP,GSYDATA1   SAVE THE LASTSUP ID.\n         MVC   SAVINTME,GSYTIME    SAVE THE INSTALL TIME           @L05\n         B     SMGET               AND GET ANOTHER RECORD.         @L05\n         SPACE ,\nSMSKIP4  DS    0H\n         CLC   GSYSUBID,=AL2(GSYSTATE) IS THIS THE STATUS SUBREC?  @L05\n         BNE   SMSKIP5             NO\n         CLI   GSYDATA1,X'00'                                      @L05\n         BE    SMFLUSH                                             @L05\n         CLI   SAVSMOD,C'U'                                        @L05\n         BE    SMSKIP41                                            @L05\n         CLI   GSYDATA1,X'04'                                      @L05\n         BE    SMFLUSH                                             @L05\n         B     SMSKIP41            GET ANOTHER RECORD.             @L05\nSMFLUSH  DS    0H                                                  @L05\n         OI    SWITCH,FLUSH        DON'T PRINT THIS ONE.           @L05\nSMSKIP41 DS    0H                                                  @L05\n         TM    GSYDATA1,X'04'      IS IT SUPD?                     @L05\n         BZ    *+10                NO                              @L05\n         MVC   LSSTATUS,=CL10'SUPERSEDED'\n         TM    GSYDATA1,X'20'      IS IT ACCEPTED?                 @L05\n         BZ    *+10                NO                              @L05\n         MVC   LSSTATUS,=CL10'ACCEPTED'\n         TM    GSYDATA1,X'80'      IS IT APPLIED?                  @L05\n         BZ    *+10                NO                              @L05\n         MVC   LSSTATUS,=CL10'APPLIED'\n         B     SMGET               AND GET ANOTHER RECORD.\n         SPACE ,\nSMSKIP5  DS    0H\n         CLC   GSYSUBID,=AL2(GSYPRERQ) IS THIS THE PREREQ SUBREC?  @L05\n         BNE   SMSKIP6             NO\n         L     R3,PREOFF           GET OFFSET INTO TABLE OF PREREQS\n         LA    R4,PRES(R3)         ADDR OF NEXT SLOT\n         C     R4,LSTPRE           TABLE OVERFLOW?\n         BNL   SMGET               OOPS.\n         MVC   0(7,R4),GSYDATA1    SAVE NAME OF PREREQ\n         LA    R3,7(0,R3)          SKIP AHAEAD 1.\n         ST    R3,PREOFF           AND SAVE FOR A NEXT TIME\n         B     SMGET               AND GET ANOTHER RECORD.\n         SPACE ,\nSMSKIP6  DS    0H\n         CLC   GSYSUBID,=AL2(GSYSUP) IS THIS THE SUP SUBREC?       @L05\n         BNE   SMSKIP7             NO\n         L     R3,SUPOFF           GET OFFSET INTO TABLE OF SUPS\n         LA    R4,SUPS(R3)         ADDR OF NEXT SLOT\n         L     R0,=AL4(LSTSUP)                                     @L05\n         CR    R4,R0               TABLE OVERFLOW?                 @L05\n         BNL   SMGET               OOPS.\n         MVC   0(7,R4),GSYDATA1    SAVE NAME OF SUP\n         LA    R3,7(0,R3)          SKIP AHAEAD 1.\n         ST    R3,SUPOFF           AND SAVE FOR A NEXT TIME\n         B     SMGET               AND GET ANOTHER RECORD.\n         SPACE ,\nSMSKIP7  DS    0H\n         CLC   GSYSUBID,=AL2(GSYMOD) IS THIS A MOD RECORD?         @L05\n         BE    SMSKIP71            YES.\n         CLC   GSYSUBID,=AL2(GSYMAC) IS THIS A MAC RECORD?         @L05\n         BE    SMSKIP71            YES.\n         B     SMSKIP8             NO\n         SPACE ,\nSMSKIP71 DS    0H\n         L     R3,ELEMOFF          GET OFFSET INTO TABLE OF ELEMS\n         L     R15,=A(ELEMS)       ADDR OF ELEMENTS TABLE          @L05\n         LA    R4,0(R15,R3)        ADDR OF NEXT SLOT               @L05\n         L     R0,=AL4(LSTELEM)\n         CR    R4,R0               TABLE OVERFLOW?\n         BNL   SMGET               OOPS.\n         MVC   0(8,R4),GSYDATA1    SAVE NAME OF ELEM\n         LA    R3,8(0,R3)          SKIP AHAEAD 1.\n         ST    R3,ELEMOFF          AND SAVE FOR A NEXT TIME\n         B     SMGET               AND GET ANOTHER RECORD.\nSMSKIP8  DS    0H\n         B     SMGET               AND GET ANOTHER RECORD.\n         SPACE ,\nSMSKIP99 DS    0H\n         TM    SWITCH,FLUSH        SHOULD I PRINT THIS ONE?        @L05\n         BO    SKIPSMOD            NO.                             @L05\n         MVC   LSNAME,SAVSMOD      SET UP SYSMOD NAME\n         MVC   LSFMID,SAVFMID      SET UP THE FMID.\n         MVC   LSLSTSP,SAVLSTSP    SET UP LASTSUP.\nCONTPRNT DS    0H\n         BAL   R10,FORMELEM        SET UP SOME ELEMNTS, MAYBE\n         BAL   R10,FORMPRE         ALSO PREREQS\n         BAL   R10,FORMSUP         AND DON'T FORGET THE SUPS\n         BAL   R10,PRINTIT         PRINT\n         L     R6,LINECNTR         PICK UP CURRENT LINE NUMBER\n         LA    R6,1(0,R6)          COUNT THE ONE I'VE JUST PRINTED\n         ST    R6,LINECNTR         AND SAVE THAT\n         C     R6,PAGESIZE         IS THERE ROOM FOR ANOTHER ONE?\n         BL    *+8                 YES.\n         BAL   R10,SYSMTITL        NO.\n         SPACE ,\n         L     R6,ELEMNXT          NEXT ELEMENT\n         C     R6,ELEMOFF          IS THAT ALL FOR THIS SYSMOD?\n         BL    CONTPRNT            NO. KEEP ON PRINTING.\n         L     R6,PRENXT           NEXT PREREQ\n         C     R6,PREOFF           IS THAT ALL FOR THIS SYSMOD?\n         BL    CONTPRNT            NO. KEEP ON PRINTING.\n         L     R6,SUPNXT           NEXT SUP\n         C     R6,SUPOFF           IS THAT ALL FOR THIS SYSMOD?\n         BL    CONTPRNT            NO. KEEP ON PRINTING.\nSKIPSMOD DS    0H                                                  @L05\n         NI    SWITCH,255-FLUSH    RESET NOPRINT FLAG.             @L05\n         XC    ELEMNXT,ELEMNXT     RESET FOR NEXT SYSMOD.\n         XC    ELEMNUM,ELEMNUM     RESET FOR NEXT SYSMOD.\n         XC    PRENXT,PRENXT       RESET FOR NEXT SYSMOD.\n         XC    PRENUM,PRENUM       RESET FOR NEXT SYSMOD.\n         XC    SUPNXT,SUPNXT       RESET FOR NEXT SYSMOD.\n         XC    SUPNUM,SUPNUM       RESET FOR NEXT SYSMOD.\n         MVI   SAVSTUFF,C' '\n         MVC   SAVSTUFF+1(SAVLEN),SAVSTUFF\n         B     GOTONE\n         TITLE 'SUBROUTINE TO SET UP ELEMENT NAMES ON A PRINT LINE.'\nFORMELEM DS    0H\nMORELEM  L     R6,ELEMNXT          OFFSET OF NEXT ELEMENT TO PRINT.\n         C     R6,ELEMOFF          IS THAT ALL FOR THIS SYSMOD?\n         BNL   DONELEM             YES.\n         L     R15,=A(ELEMS)       ADDRESS OF ELEMENTS TABLE       @L05\n         LA    R7,0(R15,R6)        ADDR OF ELEMENT NAME TO PRINT   @L05\n         L     R8,ELEMNUM          SLOT NUMBER W/IN PRINT LINE\n         SR    R9,R9               CLEAR A REGISTER\n         IC    R9,ELEMTAB(R8)      OFFSET W/IN PRINT LINE\n         LA    R9,LINE(R9)         ADDR OF SLOT W/IN PRINT LINE\n         MVC   0(8,R9),0(R7)       MOVE ELEMENT NAME ONTO PRINT LINE\n         LA    R6,8(0,R6)          NEXT OFFSET W/IN ELEMS\n         ST    R6,ELEMNXT          SAVE THAT.\n         LA    R8,1(0,R8)          NEXT SLOT NUMBER W/IN PRINT LINE\n         C     R8,ELEMMAX          MORE ROOM ON PRINT LINE?\n         BH    OVFELEM             NO.\n         ST    R8,ELEMNUM          SAVE SLOT #.\n         B     MORELEM             SET UP MORE ELEMENTS, MAYBE.\nOVFELEM  DS    0H\n         XC    ELEMNUM,ELEMNUM     BACK TO 1ST SLOT ON PRINT LINE\nDONELEM  DS    0H\n         BR    R10                 GOBACK\n         TITLE 'SUBROUTINE TO SET UP PREREQ NAMES ON A PRINT LINE.'\nFORMPRE  DS    0H\nMORPRE   L     R6,PRENXT           OFFSET OF NEXT PREREQ TO PRINT.\n         C     R6,PREOFF           IS THAT ALL FOR THIS SYSMOD?\n         BNL   DONPRE              YES.\n         LA    R7,PRES(R6)         ADDR OF PREREQ NAME TO PRINT\n         L     R8,PRENUM           SLOT NUMBER W/IN PRINT LINE\n         SR    R9,R9               CLEAR A REGISTER\n         IC    R9,PRETAB(R8)       OFFSET W/IN PRINT LINE\n         LA    R9,LINE(R9)         ADDR OF SLOT W/IN PRINT LINE\n         MVC   0(7,R9),0(R7)       MOVE PREREQ NAME ONTO PRINT LINE\n         LA    R6,7(0,R6)          NEXT OFFSET W/IN PRES\n         ST    R6,PRENXT           SAVE THAT.\n         LA    R8,1(0,R8)          NEXT SLOT NUMBER W/IN PRINT LINE\n         C     R8,PREMAX           MORE ROOM ON PRINT LINE?\n         BH    OVFPRE              NO.\n         ST    R8,PRENUM           SAVE SLOT #.\n         B     MORPRE              SET UP MORE PREREQS, MAYBE.\nOVFPRE   DS    0H\n         XC    PRENUM,PRENUM       BACK TO 1ST SLOT ON PRINT LINE\nDONPRE   DS    0H\n         BR    R10                 GOBACK\n         TITLE 'SUBROUTINE TO SET UP SUP NAMES ON A PRINT LINE.'\nFORMSUP  DS    0H\nMORSUP   L     R6,SUPNXT           OFFSET OF NEXT SUP TO PRINT.\n         C     R6,SUPOFF           IS THAT ALL FOR THIS SYSMOD?\n         BNL   DONSUP              YES.\n         LA    R7,SUPS(R6)         ADDR OF SUP NAME TO PRINT\n         L     R8,SUPNUM           SLOT NUMBER W/IN PRINT LINE\n         SR    R9,R9               CLEAR A REGISTER\n         IC    R9,SUPTAB(R8)       OFFSET W/IN PRINT LINE\n         LA    R9,LINE(R9)         ADDR OF SLOT W/IN PRINT LINE\n         MVC   0(7,R9),0(R7)       MOVE SUP NAME ONTO PRINT LINE\n         LA    R6,7(0,R6)          NEXT OFFSET W/IN SUPS\n         ST    R6,SUPNXT           SAVE THAT.\n         LA    R8,1(0,R8)          NEXT SLOT NUMBER W/IN PRINT LINE\n         C     R8,SUPMAX           MORE ROOM ON PRINT LINE?\n         BH    OVFSUP              NO.\n         ST    R8,SUPNUM           SAVE SLOT #.\n         B     MORSUP              SET UP MORE SUPS, MAYBE.\nOVFSUP   DS    0H\n         XC    SUPNUM,SUPNUM       BACK TO 1ST SLOT ON PRINT LINE\nDONSUP   DS    0H\n         BR    R10                 GOBACK\n         DROP  R2\n         TITLE 'SUBROUTINE TO PRINT A TITLE LINE OVER SYSMODS.'\nSYSMTITL DS    0H\n         MVI   CC,C'1'             NEW PAGE\n         MVC   LINE(7),=C'&NAME'\n         MVC   LINE+8(5),=C'&VERSION'\n         MVC   LINE+44(24),=C'LISTING OF ENTRIES FROM '\n         MVC   LINE+68(8),ZONETYPE\n         MVC   LINE+77(4),=C'ZONE'\n         MVC   LINE+82(8),ZONE\n         MVC   LINE+119(7),=C'&NAME'\n         MVC   LINE+127(5),=C'&VERSION'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   CC,C' '\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE ,\n         MVC   LINE+37(17),=C'-----DATE--------'                   @L05\n         MVC   LINE+55(15),=C'-PREREQUISITE--'\n         MVC   LINE+71(15),=C'---SUPERSEDED--'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   CC,C' '\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE(6),=C'SYSMOD'\n         MVC   LINE+10(10),=C'--STATUS--'\n         MVC   LINE+21(7),=C'-FMID--'\n         MVC   LINE+29(7),=C'LASTSUP'\n         MVC   LINE+37(8),=C'RECEIVE '                             @L05\n         MVC   LINE+46(8),=C'INSTALL '                             @L05\n         MVC   LINE+55(15),=C'----SYSMODS----'\n         MVC   LINE+71(15),=C'----SYSMODS----'\n         MVC   LINE+87(18),=C'------------------'\n         MVC   LINE+105(08),=C'ELEMENTS'\n         MVC   LINE+113(18),=C'------------------'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE ,\n         MVI   CC,C'0'\n         MVC   LINECNTR,=F'4'      COUNT THREE LINES OF TITLE.\n         MVC   LSNAME,SAVSMOD      SET UP SYSMOD NAME\n         BR    R10                 GOBACK\n         TITLE 'PROCESS A MOD ENTRY.'\n         USING GMOD,R2\nDOMOD    DS    0H\n         TM    SWITCH,MAC1ST       DID WE HAVE MACS PREVIOUSLY?\n         BZ    *+16                NO.\n         TM    SWITCH,MACRIGHT     DID THEY LEAVE A PARTIAL LINE?\n         BZ    *+8                 NO.\n         BAL   R10,PRINTIT         IF SO, PRINT IT.\n         NI    SWITCH,255-MAC1ST   FORGET ABOUT MACS NOW.\n         TM    SWITCH,MOD1ST       HAVE WE DONE ONE OF THESE YET?\n         BO    *+12                YES.\n         OI    SWITCH,MOD1ST       THEN THIS MUST BE THE ONE.\n         BAL   R10,MODTITL\n         MVC   SAVMOD,GMONAME      SAVE THE NAME OF THIS MOD.\n         AP    CNTMODR,ONE         COUNT A MOD RECORD\n         AP    CNTMODS,ONE         COUNT A MOD.\n         SPACE ,\nMOGET    LA    R1,RPLCSI           PICK UP ADDR OF RPL\n         GET   RPL=(1)             READ IN A CSI RECORD\n         AP    CNTMODR,ONE         COUNT A MOD RECORD\n         CLC   SAVMOD,GMONAME      IS IT STILL THE SAME MOD?\n         BNE   MOSKIP99            NO. PRINT THE OLD ONE.\n         CLC   GMOSUBID,=AL2(GMOFMID) IS THIS THE MODS FMID?       @L05\n         BNE   MOSKIP1             NO\n         MVC   SAVFMID,GMODATA1    SAVE THE FMID VALUE.\n         B     MOGET               GET ANOTHER RECORD.\n         SPACE ,\nMOSKIP1  DS    0H\n         CLC   GMOSUBID,=AL2(GMORMID) IS THIS THE MODS RMID?       @L05\n         BNE   MOSKIP2             NO\n         MVC   SAVRMID,GMODATA1    SAVE THE RMID VALUE.\n         B     MOGET               GET ANOTHER RECORD.\n         SPACE ,\nMOSKIP2  DS    0H\n         CLC   GMOSUBID,=AL2(GMOLSTUP) IS THIS THE MODS LASTUPD?   @L05\n         BNE   MOSKIP3             NO\n         MVC   SAVLSTUP,GMODATA1   SAVE THE LASTUPD VALUE.\n         B     MOGET               GET ANOTHER RECORD.\n         SPACE ,\nMOSKIP3  DS    0H\n         CLC   GMOSUBID,=AL2(GMODLIB) IS THIS THE MODS DISTLIB?    @L05\n         BNE   MOSKIP4             NO\n         MVC   SAVDLIB,GMODATA1    SAVE THE DLIB NAME.\n         B     MOGET               GET ANOTHER RECORD.\n         SPACE ,\nMOSKIP4  DS    0H\n         CLC   GMOSUBID,=AL2(GMOLMOD) IS THIS THE MODS LMOD?       @L05\n         BNE   MOSKIP5             NO\n         MVC   SAVLMOD,GMODATA1    SAVE THE LMOD NAME.\n         B     MOGET               GET ANOTHER RECORD.\nMOSKIP5  DS    0H\n         B     MOGET               GET ANOTHER RECORD.\n         SPACE ,\nMOSKIP99 DS    0H\n         SR    R6,R6               CLEAR A REGISTER\n         TM    SWITCH,MODRIGHT     SHIFT THE PRINT?\n         BZ    *+16                NO.\n         LA    R6,60               SHIFT AMOUNT\n         NI    SWITCH,255-MODRIGHT SWITCH OFF\n         B     *+08\n         OI    SWITCH,MODRIGHT     SHIFT THE NEXT ONE.\n         SPACE ,\n         LA    R7,LMODNAME(R6)\n         MVC   0(8,R7),SAVMOD      SET UP MOD NAME\n         LA    R7,LMFMID(R6)\n         MVC   0(7,R7),SAVFMID     SET UP FMID\n         LA    R7,LMRMID(R6)\n         MVC   0(7,R7),SAVRMID     SET UP RMID\n         LA    R7,LMLSTUP(R6)\n         MVC   0(7,R7),SAVLSTUP    SET UP LSTUP\n         LA    R7,LMDLIB(R6)\n         MVC   0(8,R7),SAVDLIB     SET UP DLIB\n         LA    R7,LMLMOD(R6)\n         MVC   0(8,R7),SAVLMOD     SET UP LMOD\n         TM    SWITCH,MODRIGHT     LINE FULL?\n         BO    GOTONE              NO.\n         BAL   R10,PRINTIT         PRINT\n         SPACE ,\n         L     R6,LINECNTR         PICK UP CURRENT LINE NUMBER\n         LA    R6,1(0,R6)          COUNT THE ONE I'VE JUST PRINTED\n         ST    R6,LINECNTR         AND SAVE THAT\n         C     R6,PAGESIZE         IS THERE ROOM FOR ANOTHER ONE?\n         BL    *+8                 YES.\n         BAL   R10,MODTITL         NO.\n         SPACE ,\n         MVI   SAVSTUFF,C' '\n         MVC   SAVSTUFF+1(SAVLEN),SAVSTUFF\n         B     GOTONE\n         DROP  R2\n         TITLE 'PRINT TITLES OVER A MOD'\nMODTITL  DS    0H\n         MVI   CC,C'1'             NEW PAGE\n         MVC   LINE(7),=C'&NAME'\n         MVC   LINE+8(5),=C'&VERSION'\n         MVC   LINE+44(24),=C'LISTING OF ENTRIES FROM '\n         MVC   LINE+68(8),ZONETYPE\n         MVC   LINE+77(4),=C'ZONE'\n         MVC   LINE+82(8),ZONE\n         MVC   LINE+119(7),=C'&NAME'\n         MVC   LINE+127(5),=C'&VERSION'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   CC,C' '\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE ,\n         MVC   LINE+00(7),=C'--MOD--'\n         MVC   LINE+10(7),=C'-FMID--'\n         MVC   LINE+18(7),=C'-RMID--'\n         MVC   LINE+26(7),=C'LASTUPD'\n         MVC   LINE+34(7),=C'DISTLIB'\n         MVC   LINE+43(8),=C'--LMOD--'\n         MVC   LINE+60(7),=C'--MOD--'\n         MVC   LINE+70(7),=C'-FMID--'\n         MVC   LINE+78(7),=C'-RMID--'\n         MVC   LINE+86(7),=C'LASTUPD'\n         MVC   LINE+94(7),=C'DISTLIB'\n         MVC   LINE+103(8),=C'--LMOD--'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE ,\n         MVI   CC,C'0'\n         MVC   LINECNTR,=F'3'      COUNT TWO LINES OF TITLE.\n         BR    R10                 GOBACK\n         TITLE 'PROCESS A MAC ENTRY.'\n         USING GMAC,R2\nDOMAC    DS    0H\n         TM    SWITCH,MAC1ST       HAVE WE DONE ONE OF THESE YET?\n         BO    *+12                YES.\n         OI    SWITCH,MAC1ST       THEN THIS MUST BE THE ONE.\n         BAL   R10,MACTITL\n         MVC   SAVMAC,GMANAME      SAVE THE NAME OF THIS MAC.\n         AP    CNTMACR,ONE         COUNT A MAC RECORD\n         AP    CNTMACS,ONE         COUNT A MAC.\n         SPACE ,\nMAGET    LA    R1,RPLCSI           PICK UP ADDR OF RPL\n         GET   RPL=(1)             READ IN A CSI RECORD\n         AP    CNTMACR,ONE         COUNT A MAC RECORD\n         CLC   SAVMAC,GMANAME      IS IT STILL THE SAME MAC?\n         BNE   MASKIP99            NO. PRINT THE OLD ONE.\n         CLC   GMASUBID,=AL2(GMAFMID) IS THIS THE MACS FMID?       @L05\n         BNE   MASKIP1             NO\n         MVC   SAVFMID,GMADATA1    SAVE THE FMID VALUE.\n         B     MAGET               GET ANOTHER RECORD.\n         SPACE ,\nMASKIP1  DS    0H\n         CLC   GMASUBID,=AL2(GMARMID) IS THIS THE MACS RMID?       @L05\n         BNE   MASKIP2             NO\n         MVC   SAVRMID,GMADATA1    SAVE THE RMID VALUE.\n         B     MAGET               GET ANOTHER RECORD.\n         SPACE ,\nMASKIP2  DS    0H\n         CLC   GMASUBID,=AL2(GMALSTUP) IS THIS THE MACS LASTUPD?   @L05\n         BNE   MASKIP3             NO\n         MVC   SAVLSTUP,GMADATA1   SAVE THE LASTUPD VALUE.\n         B     MAGET               GET ANOTHER RECORD.\n         SPACE ,\nMASKIP3  DS    0H\n         CLC   GMASUBID,=AL2(GMADLIB) IS THIS THE MACS DISTLIB?    @L05\n         BNE   MASKIP4             NO\n         MVC   SAVDLIB,GMADATA1    SAVE THE DLIB NAME.\n         B     MAGET               GET ANOTHER RECORD.\n         SPACE ,\nMASKIP4  DS    0H\n         CLC   GMASUBID,=AL2(GMASLIB) IS THIS THE MACS SYSLIB?     @L05\n         BNE   MASKIP5             NO\n         MVC   SAVSLIB,GMADATA1    SAVE THE SLIB NAME.\n         B     MAGET               GET ANOTHER RECORD.\nMASKIP5  DS    0H\n         B     MAGET               GET ANOTHER RECORD.\n         SPACE ,\nMASKIP99 DS    0H\n         SR    R6,R6               CLEAR A REGISTER\n         TM    SWITCH,MACRIGHT     SHIFT THE PRINT?\n         BZ    *+16                NO.\n         LA    R6,60               SHIFT AMOUNT\n         NI    SWITCH,255-MACRIGHT SWITCH OFF\n         B     *+08\n         OI    SWITCH,MACRIGHT     SHIFT THE NEXT ONE.\n         SPACE ,\n         LA    R7,LMACNAME(R6)\n         MVC   0(8,R7),SAVMAC      SET UP MAC NAME\n         LA    R7,LMFMID(R6)\n         MVC   0(7,R7),SAVFMID     SET UP FMID\n         LA    R7,LMRMID(R6)\n         MVC   0(7,R7),SAVRMID     SET UP RMID\n         LA    R7,LMLSTUP(R6)\n         MVC   0(7,R7),SAVLSTUP    SET UP LSTUP\n         LA    R7,LMDLIB(R6)\n         MVC   0(8,R7),SAVDLIB     SET UP DLIB\n         LA    R7,LMSLIB(R6)\n         MVC   0(8,R7),SAVSLIB     SET UP SLIB\n         TM    SWITCH,MACRIGHT     LINE FULL?\n         BO    GOTONE              NO.\n         BAL   R10,PRINTIT         PRINT\n         SPACE ,\n         L     R6,LINECNTR         PICK UP CURRENT LINE NUMBER\n         LA    R6,1(0,R6)          COUNT THE ONE I'VE JUST PRINTED\n         ST    R6,LINECNTR         AND SAVE THAT\n         C     R6,PAGESIZE         IS THERE ROOM FOR ANOTHER ONE?\n         BL    *+8                 YES.\n         BAL   R10,MACTITL         NO.\n         SPACE ,\n         MVI   SAVSTUFF,C' '\n         MVC   SAVSTUFF+1(SAVLEN),SAVSTUFF\n         B     GOTONE\n         DROP  R2\n         TITLE 'PRINT TITLES OVER A MAC'\nMACTITL  DS    0H\n         MVI   CC,C'1'             NEW PAGE\n         MVC   LINE(7),=C'&NAME'\n         MVC   LINE+8(5),=C'&VERSION'\n         MVC   LINE+44(24),=C'LISTING OF ENTRIES FROM '\n         MVC   LINE+68(8),ZONETYPE\n         MVC   LINE+77(4),=C'ZONE'\n         MVC   LINE+82(8),ZONE\n         MVC   LINE+119(7),=C'&NAME'\n         MVC   LINE+127(5),=C'&VERSION'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   CC,C' '\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE ,\n         MVC   LINE+00(7),=C'--MAC--'\n         MVC   LINE+10(7),=C'-FMID--'\n         MVC   LINE+18(7),=C'-RMID--'\n         MVC   LINE+26(7),=C'LASTUPD'\n         MVC   LINE+34(7),=C'DISTLIB'\n         MVC   LINE+43(8),=C'--SLIB--'\n         MVC   LINE+60(7),=C'--MAC--'\n         MVC   LINE+70(7),=C'-FMID--'\n         MVC   LINE+78(7),=C'-RMID--'\n         MVC   LINE+86(7),=C'LASTUPD'\n         MVC   LINE+94(7),=C'DISTLIB'\n         MVC   LINE+103(8),=C'--SLIB--'\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE ,\n         MVI   CC,C'0'\n         MVC   LINECNTR,=F'3'      COUNT TWO LINES OF TITLE.\n         BR    R10                 GOBACK\n         TITLE 'SAVE ZONE DETAILS.'\n         USING GZONE,R2\nDOZONE   DS    0H\n         CLC   GZOSUBID,=AL2(GZOTYPE) IS THIS THE ZONE TYPE SUB    @L05\n         BNE   NEXTREC             NO.\n         MVC   ZONE,GZONAME        SAVE ZONE NAME.\n         MVC   ZONETYPE,GZODATA1   SAVE ZONE TYPE.\n         B     NEXTREC             GOBACK\n         DROP  R2\n         TITLE 'PRINT CONTENT OF A LINE.'\nPRINTIT  DS    0H\n        $AMODE 24\n         PUT   SYSPRINT,PRTLINE\n        $AMODE 31\n         MVI   CC,C' '\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         BR    R10                 GOBACK\n         LTORG ,\n         TITLE 'DATA AREAS'\n*        VALUES IN THE 1ST 3 BYTES OF THE CSI RECORD KEY.\nGIMUNK1  DC    X'000001'           ??\nGIMZONE1 DC    X'000002'           ZONE NAME OF THIS CSI\nGIMZONE  DC    X'0300'             ZONE\nGIMDDDEF DC    X'0605'             DDDEF ENTRY                     @TEC\nGIMLMOD  DC    X'3010'             LMOD ENTRY                      @TEC\nGIMMAC   DC    X'3040'             MAC ENTRY                       @TEC\nGIMMOD   DC    X'3030'             MOD ENTRY                       @TEC\nGIMSRC   DC    X'3050'             SRC ENTRY                       @TEC\nGIMSMOD  DC    X'6F00'             SYSMOD ENTRY                    @TEC\n         SPACE ,\n*        CSI RECORD TYPE COUNTERS\nONE      DC    PL3'1'              ONE.\nCNTSMODR DC    PL3'0'              COUNT OF SYSMOD RECORDS\nCNTSMODS DC    PL3'0'              COUNT OF SYSMODS\nCNTMODR  DC    PL3'0'              COUNT OF MOD RECORDS\nCNTMODS  DC    PL3'0'              COUNT OF MODS\nCNTMACR  DC    PL3'0'              COUNT OF MAC RECORDS\nCNTMACS  DC    PL3'0'              COUNT OF MACS\n         SPACE ,\n*        ZONE INFO FOR THE 1ST TITLE LINE\nZONE     DC    CL8' '              NAME OF ZONE WE'RE LISTING\nZONETYPE DC    CL8' '              TYPE OF ZONE\n         SPACE ,\n*        DATA TO BE SAVED FROM CSI RECORDS BEFORE PRINTING.\nSAVSTUFF EQU   *\nSAVMOD   DC    CL8' '              CURRENT MOD NAME.\nSAVMAC   DC    CL8' '              CURRENT MAC NAME.\nSAVRMID  DC    CL7' '              CURRENT RMID.\nSAVLSTUP DC    CL7' '              CURRENT LASTUPD\nSAVDLIB  DC    CL8' '              CURRENT DLIB\nSAVSLIB  DC    CL8' '              CURRENT SYSLIB\nSAVLMOD  DC    CL8' '              CURRENT LMOD.\nSAVSMOD  DC    CL8' '              CURRENT SYSMOD NAME.\nSAVFMID  DC    CL7' '              FMID OF CURRENT ENTRY.\nSAVLSTSP DC    CL7' '              LASTSUP\nSAVRCDTE DC    PL3'0'              RECEIVE DATE                    @L05\nSAVRCTME DC    XL3'0'              RECEIVE TIME                    @L05\nSAVINDTE DC    PL3'0'              INSTALL DATE                    @L05\nSAVINTME DC    XL3'0'              INSTALL TIME                    @L05\nSAVLEN   EQU   *-SAVSTUFF-1\n         SPACE ,\n*        DATA AREAS FOR DATE CONVERSION\n         DS    0D\nDTWORK   DC    D'0'                WORK FIELD FOR DATE CONVERSION\nDTPARM   DC    AL4(0)\nDTL5     EQU   DTWORK+3,5          5 BYTES FOR EDIT MACRO\nDTL4     EQU   DTWORK+4,4          4 BYTES FOR EDIT MACRO\nDTL3     EQU   DTWORK+5,3          3 BYTES FOR EDIT MACRO\nDTL2     EQU   DTWORK+6,2          2 BYTES FOR EDIT MACRO\n         SPACE ,\n*        CONTROL BLOCKS FOR DDNAME=SMPCSI\n         DS    0F\nBUFLEN   DC    AL4(1024*128)       128K RECORD BUFFER\nOPENERR  DC    AL4(0)              OPEN ERROR CODE.\nBUFPTR   DC    AL4(0)\nACBCSI   ACB   AM=VSAM,DDNAME=SMPCSI,EXLST=EXLCSI,                     X\n               BUFNI=8,BUFND=32\nEXLCSI   EXLST EODAD=EODCSI\nPAGELEN  EQU   60                                                  @TEC\n         DS    0F\nCSIPTR   DC    AL4(0)\nCSIKEY   DC    CL24' '                                             @L05\nCSIREC   DC    CL143' '                                            @L05\nRPLCSI   RPL   ACB=ACBCSI,                                             X\n               AM=VSAM,                                                X\n               AREA=CSIREC,                                            X\n               AREALEN=123,                                            X\n               OPTCD=(KEY,SEQ,MVE)\nCSIOPEN  DC    X'00'\n         SPACE ,\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,            X\n               LRECL=133,BLKSIZE=23408\n         SPACE ,\n*        WORK AREA FOR REPORT PRINTLINE\nPRTLINE  DS    0CL133\nCC       DC    CL1' '             CARRIAGE CONTROL CHARACTER\nLINE     DC    CL132' '           PRINT LINE\nLSNAME   EQU   LINE,8              SYSMOD NAME\nLSSTATUS EQU   LINE+10,10          SYSMOD STATUS\nLSFMID   EQU   LINE+21,7           SYSMOD'S FMID\nLSLSTSP  EQU   LINE+29,7           SYSMOD'S LASTSUP\nLSRCDATE EQU   LINE+37,8           RECEIVE DATE                    @L05\nLSINDATE EQU   LINE+46,8           INSTALL DATE                    @L05\n         SPACE ,\nLMACNAME EQU   LINE,8              MAC NAME\nLMODNAME EQU   LINE,8              MOD NAME\nLMFMID   EQU   LINE+10,7           MOD'S FMID\nLMRMID   EQU   LINE+18,7           MOD'S RMID\nLMLSTUP  EQU   LINE+26,7           MOD'S LASTUPD\nLMDLIB   EQU   LINE+34,8           MOD'S DLIB\nLMLMOD   EQU   LINE+43,8           MOD'S LMOD\nLMSLIB   EQU   LINE+43,8           MAC'S SYSLIB\n         SPACE ,\n*        CONTROL VARIABLE FOR PAGE LAYOUT\nPAGESIZE DC    F'80'               MAX LINES PER PAGE              @TEC\nLINECNTR DC    F'0'                CURRENT LINE NUMBER\n         SPACE ,\n*        FLAGS TO CONTROL INTER-RELATIONSHIPS BETWEEN MULTIPLE CSI\n*        RECORDS MAKING UP A SINGLE LOGICAL ENTITY\nSWITCH   DC    X'00'\nSYSM1ST  EQU   X'80'               1ST SYSMOD HAS BEEN PROCESSED.\nMOD1ST   EQU   X'40'               1ST MOD HAS BEEN DONE\nMODRIGHT EQU   X'20'               PRINT NEXT MOD ON RIGHT HALF\nMAC1ST   EQU   X'10'               1ST MAC HAS BEEN DONE\nMACRIGHT EQU   X'08'               PRINT NEXT MAC ON RIGHT HALF\nFLUSH    EQU   X'01'               FLUSH THIS BOGUS SYSMOD         @L05\n         SPACE ,\n*        A SYSMOD CAN HAVE A VARIABLE NUMBER OF PRE'S, SUP'S AND\n*        ELEMENTS. IF NECESSARY \"EXTRA\" ONES ARE FLOWED ONTO SUBSEQUENT\n*        PRINT LINES.\n*        THESE VARIABLES ARE:\n*              1) TABLES TO ACCUMULATE PRE'S, SUP'S AND ELEMENTS\n*              2) COUNTERS TO KEEP TRACK OF HOW MANY WE HAVE AND TO\n*                 DETECT TABLE OVERFLOW.\n*              3) COUNTERS TO RECORD HOW MANY ITEMS HAVE BEEN PRINTED\n*                 AND HOW MANY CAN FIT ON A PRINT LINE.\n*              4) TABLES OF OFFSETS ACROSS THE PAGE AT WHICH TO\n*                 POSITION THINGS.\n*\n*        NB: VARIABLES NAMED LSTXXXX BELOW HERE MUST NOT BE MOVED!\nELEMMAX  DC    F'4'                HIGHEST ELEMENT FIELD\nELEMNUM  DC    F'0'                NEXT AVAILABLE ELEMENT FIELD\nELEMNXT  DC    F'0'                NEXT ELEMENT TO BE PRINTED.\nELEMOFF  DC    AL4(0)              OFFSET OF LATEST ELEMENT\nELEMTAB  DC    AL1(87,96,105,114,123)\nPREMAX   DC    F'1'                HIGHEST PREREQ FIELD\nPRENUM   DC    F'0'                NEXT AVAILABLE PREREQ FIELD\nPRENXT   DC    F'0'                NEXT PREREQ TO BE PRINTED.\nPREOFF   DC    AL4(0)              OFFSET OF LATEST PRE\nPRETAB   DC    AL1(55,63)\nSUPMAX   DC    F'1'                HIGHEST SUP FIELD\nSUPNUM   DC    F'0'                NEXT AVAILABLE SUP FIELD\nSUPNXT   DC    F'0'                NEXT SUP TO BE PRINTED.\nSUPOFF   DC    AL4(0)              OFFSET OF LATEST SUP\nSUPTAB   DC    AL1(71,79)\n         SPACE ,\nPRES     DC    64CL7' '            TABLE OF PRE NAMES\nLSTPRE   DC    A(*)\nSUPS     DC    1200CL7' '          TABLE OF SUP NAMES              @L05\nLSTSUP   DC    A(*)\n         DS    0F\nELEMS    DC    3000CL8' '          TABLE OF ELEMENT NAMES          @L05\nLSTELEM  DC    A(*)\n         SPACE ,\n         TITLE 'LAYOUTS FOR SMP/E CSI RECORD TYPES.'\n         GIMSYMOD ,\n         GIMMOD ,\n         GIMMAC ,\n         GIMZONE ,\n         CVT   LIST=NO,DSECT=YES\n         EJECT ,\n         COPY  XDATEDIT\n         END   ,\n         PUNCH ' IDENTIFY LISTCSI(''@120 &SYSDATE &SYSTIME'') '\n         PUNCH ' IDENTIFY XDATEDIT(''@110 &SYSDATE &SYSTIME'') '\n         PUNCH ' NAME LISTCSI(R) '\n         END   ,\n./       ADD   NAME=PELIST\n         PRINT GEN                                                 @L05\n*----------------------------------------------------------------------\n*\n*        FREEWARE: THIS PROGRAM IS DISTRIBUTED ON AN AS-IS BASIS\n*                  WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:\n*\n*                  THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)\n*                  P.O. BOX 21525\n*                  MILWAUKEE, WI 53221\n*\n*   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n*        PROGRAM WRITTEN BY:\n*\n*                  MICHAEL GEARING\n*                  PORTLAND, OR\n*\n*   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n*        MODIFIED MARCH 1988\n*                 BY R.B.VIPOND\n*                    BALCOR/AMERICAN EXPRESS\n*                    4849 GOLF ROAD\n*                    SKOKIE, IL.   60077\n*                    (312)677-2900\n*\n*          IN AN ATTEMPT TO REDUCE THE AMOUNT OF MANUAL\n*          INTERVENTION AND CHECKING THAT HAD TO BE DONE\n*          AND DECISIONS THAT HAD TO BE MADE, THE FOLLOWING\n*          CHANGES HAVE BE INCORPORATED INTO THIS PROGRAM:\n*\n*            INCLUDED ACTION TO BE TAKEN MESSAGE ON REPORT...\n*\n*            INCLUDED CORRECTING PTF NUMBER ON REPORT IF IT\n*            WAS ON THE SYSTEM...\n*\n*            EXCLUDED PE'D PTF'S THAT HAD ALREADY BEEN SUP'D\n*            BY ANOTHER PTF...\n*\n*            CHANGED NAME FROM HOLDPGM TO PELIST...\n*\n*   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n*     PROGRAM INPUT:\n*        ,PARM=(???????,???????) - TARGET ZONE NAME,DIST ZONE NAME...\n*        GLBLCSI        -  GLOBAL CSI\n*        TARGCSI        -  TARGET CSI\n*        DISTCSI        -  DISTRIBUTION CSI\n*        DISKIN         -  WORK DISK CREATED IN OUTPUT\n*\n*     PROGRAM OUTPUT:\n*        WRKDISK        -  WORK DISK ALSO USED AS INPUT\n*        REPORT         -  PE LIST WITH ACTION TO BE TAKEN\n*\n*   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n*     COMPILE AND EXECUTION JCL SAMPLES:\n*\n* //PROC1    EXEC ASMHCL,REGION.C=4096K,REGION.L=4096K,\n* //  PARM.L='LIST,LET,NCAL,XREF,SIZE=(384K,96K)'\n* //C.SYSLIB DD  DSN=TECH.NASPA.MACLIB,DISP=SHR\n* //         DD  DSN=SYS1.MACLIB,DISP=SHR\n* //         DD  DSN=SYS1.AMODGEN,DISP=SHR\n* //C.SYSIN  DD  DSN=TECH.SMPE.SOURCE(PELIST),DISP=SHR\n* //L.SYSLMOD DD  DSN=TBCT.LINKLIB,DISP=SHR\n* //L.SYSIN  DD  DSN=TECH.NASPA.LINKDATA(PELIST),DISP=SHR\n*\n*   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n* //STEP1    EXEC PGM=PELIST,PARM=(MVST,MVSD)\n* //STEPLIB  DD  DSN=TBCT.LINKLIB,DISP=SHR\n* //GLBLCSI  DD  DSN=GLOBAL.CSI,DISP=SHR\n* //TARGCSI  DD  DSN=MVST.CSI,DISP=SHR\n* //DISTCSI  DD  DSN=MVSD.CSI,DISP=SHR\n* //WRKDISK  DD  DSN=&&WORK,DISP=(,PASS,DELETE),\n* //            UNIT=WORK,\n* //            VOL=SER=WORK01,\n* //            SPACE=(3120,(100,50)),\n* //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n* //DISKIN   DD  DSN=&&WORK,DISP=(SHR,DELETE,DELETE),\n* //            UNIT=(WORK,,DEFER),\n* //            VOL=SER=WORK01\n* //REPORT   DD  SYSOUT=*\n* //SYSOUT   DD  SYSOUT=*\n*\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*     THIS PROGRAM HAS MET A BASIC SET OF PROGRAMMING AND\n*     DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY\n*     FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL\n*     EVALUATION OF THE USE OF THIS PROGRAM IN THEIR ENVIRONMENT.\n*\n*     NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS\n*     FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,\n*     FUNCTION, RESULTS, OR PERFORMANCE OF THIS PROGRAM.\n*\n*     IMPLEMENTATION AND USE OF THIS PROGRAM CONSTITUTES A RELEASE\n*     FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF\n*     THIS PROGRAM AT THE USER'S INSTALLATION.\n*\n*     THIS PROGRAM IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.\n*     RECIPIENTS ARE FREE TO MAKE THIS PROGRAM AVAILABLE TO OTHERS IN\n*     LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY\n*     NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN\n*     INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE\n*     INTEGRATED INTO ANY PROGRAM FOR SUCH USE.\n*\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        FIND  PTF'S THAT HAVE BEEN APPLIED THAT ARE IN ERROR\n*\n*----------------------------------------------------------------------\n*\nPELIST   #SLC  R12\n         EJECT\n*----------------------------------------------------------------------\n*        PROCESS INPUT PARM\n*----------------------------------------------------------------------\n*\n         L     R3,0(R1)           LOAD REG 3 WITH PTR TO PARM\n         LH    R4,0(R3)           PARM LENGTH\n         BCTR  R4,R0              DECR FOR MVC\n         B     EXECWTO            BRANCH AROUND\nEXMVC1   MVC   WTOPARM+15(0),2(R3)\nEXECWTO  EX    R4,EXMVC1\nWTOPARM  WTO   'PARM =                     '\n         B     EXCPARM            BRANCH AROUND\nEXMVC2   MVC   ZONENAME(0),2(R3)\nEXCPARM  EX    R4,EXMVC2          COPY ZONE NAME TO KEY\n         BLDVRP BUFFERS=(2048(256),4096(64)),STRNO=3               @L05\n         OPEN  (GLBLCSI,(INPUT),TARGCSI,(INPUT))\n         LTR   R15,R15            GOOD OPEN?\n         BNZ   ERROR              NO - ABEND\n         OPEN  (DISTCSI,(INPUT),WRKDISK,(OUTPUT))\n         LTR   R15,R15            GOOD OPEN?\n         BNZ   ERROR              NO - ABEND\n         EJECT\n*----------------------------------------------------------------------\n*        SEPERATE TARGET ZONE AND DISTRIBUTION ZONE NAMES...\n*----------------------------------------------------------------------\n*\nSEPZONE  DS    0H\n         LA    R5,7               POSSIBLE 7 POSITION NAME\n         LA    R15,TZONAME        FIRST POS OF TZONE NAME\n         LA    R2,ZONENAME        FIRST POS OF PARM AREA\nCHKTNAM  DS    0H\n         CLI   0(R2),C','         END OF NAME ?\n         BE    ENDNAM                 YES\n         MVC   0(1,R15),0(R2)     MOVE ONE POS OF TZONE NAME\n         LA    R15,1(R15)         ADD ONE\n         LA    R2,1(R2)           ADD ONE\n         BCT   R5,CHKTNAM         IF NOT END GO MOVE NEXT POS\nENDNAM   DS    0H\n         LA    R2,1(R2)           ADD ONE\n         MVC   DZONAME,0(R2)      MOVE DZONE NAME\n         EJECT\n*----------------------------------------------------------------------\n*        FIND THE TARGET ZONE RECORD THAT HAS A HEX NUMBER IN IT THAT\n*        IS USED AS PART OF THE KEY TO THAT TARGET ZONE.\n*----------------------------------------------------------------------\n*\nFINDTZ   DS    0H\n         GET   RPL=TARGSEQ        GET A RECORD\n         LTR   R15,R15            DID WE GET ONE?\n         BNZ   ERROR              NO -\n         CLC   TARGETZ,=X'000002' PAST ZONE RECORDS?\n         BNH   FINDTZ2            NO - OK\n         WTO   'THERE IS NO TARGET ZONE TO MATCH THE INPUT PARM',      +\n               ROUTCDE=(11)\n         B     STOP2\nFINDTZ2  EQU   *\n         CLC   TZONAME,TARGETS    COMPARE THE ZONE NAMES\n         BNE   FINDTZ             NOT THE ONE WE WANT\n         MVC   TZONKEY,TARGETH    SAVE ZONE KEY\n         MVC   TARGHEX,TZONKEY    MOVE ZONE HEX TO TARGET\n         EJECT\n*----------------------------------------------------------------------\n*        FIND THE DIST   ZONE RECORD THAT HAS A HEX NUMBER IN IT THAT\n*        IS USED AS PART OF THE KEY TO THAT DIST   ZONE.\n*----------------------------------------------------------------------\n*\nFINDDZ   DS    0H\n         GET   RPL=DISTSEQ        GET A RECORD\n         LTR   R15,R15            DID WE GET ONE?\n         BNZ   ERROR              NO -\n         CLC   DISTZ,=X'000002'   PAST ZONE RECORDS?\n         BNH   FINDDZ2            NO - OK\n         WTO   'THERE IS NO DIST   ZONE TO MATCH THE INPUT PARM',      +\n               ROUTCDE=(11)\n         B     STOP2\nFINDDZ2  EQU   *\n         CLC   DZONAME,DISTS      COMPARE THE ZONE NAMES\n         BNE   FINDDZ             NOT THE ONE WE WANT\n         MVC   DZONKEY,DISTH      SAVE ZONE KEY\n         MVC   DISTHEX,DZONKEY    MOVE ZONE HEX TO DIST\n         EJECT\n*----------------------------------------------------------------------\n*        POSITION OURSELVES INTO THE GLOBAL ZONE AT THE FIRST\n*        GLOBAL ZONE SYSMOD RECORD.\n*----------------------------------------------------------------------\n*\nSETUP    DS    0H\n         POINT RPL=GLBLSEQ        POSITION TO GLOBAL ZONE START\n         LTR   R15,R15            OK?\n         BNZ   ERROR              NO - ERROR\n*\n*----------------------------------------------------------------------\n*        LOOK AT EACH GLOBAL ZONE SYSMOD RECORD TO SEE IF IT IS A\n*        HOLD TYPE SYSMOD.\n*----------------------------------------------------------------------\n*\nREADGLB  DS    0H\n         GET   RPL=GLBLSEQ        GET A RECORD\n         LTR   R15,R15            GOT IT?\n         BNZ   ERROR              NO - ERROR\n         CLC   GLOBALK,ZONE26     LAST GLOBAL SYSMOD RECORD?\n         BH    SETEOF                                              @L05\n         CLC   GLOBALF,=X'2210'   HOLD TYPE SYSMOD?                @L05\n         BNE   READGLB            NO - KEEP LOOKING\n*\n*----------------------------------------------------------------------\n*        ONCE WE HAVE A HOLD TYPE SYSMOD, SEE IF IT IS APPLIED IN\n*        OUR TARGET ZONE.\n*----------------------------------------------------------------------\n*\n         MVC   TARGSYS,GLOBALP    MOVE HOLD PTF\n         GET   RPL=TARGDIR        SEE IF IT IS IN THE TZONE\n         LTR   R15,R15            FIND IT?\n         BNZ   READGLB            NO - OK\n*\n*----------------------------------------------------------------------\n*        JUST BECAUSE THE HELD PTF IS APPLIED DOESN'T MEAN IT IS\n*        ON IN ERROR. THE APAR NUMBER THAT THE PTF IS BEING HELD FOR\n*        MAY HAVE BEEN VALIDLY SUPERCEDED BY ANOTHER PTF.\n*        TO CHECK THIS OUT, SEE IF THE APAR IN ERROR IS APPLIED\n*        IN OUR TZONE. IF IT IS NOT, THEN WE KNOW THAT THE HELD\n*        PTF IS ON IN ERROR.\n*----------------------------------------------------------------------\n*\n         MVC   TARGSYS,GLOBALE    MOVE ERROR APAR\n         GET   RPL=TARGDIR        SEE IF IT IS ON\n         LTR   R15,R15            IS THE ERROR APAR IN THE TZONE?\n         BZ    READGLB            YES - THEN IT IS SUPERCEDED\n*\n*----------------------------------------------------------------------\n*        CREATE WORK DISK FILE...\n*----------------------------------------------------------------------\n*\n         MVC   WDISKS,GLOBALP     PTF IN ERROR\n         MVC   WDISKE,GLOBALE     FIXING APAR\n         PUT   WRKDISK,WDISK      WRITE WORK DISK RECORD\n         B     READGLB            GET NEXT RECORD\n         EJECT\n*----------------------------------------------------------------------\n*        ROUTINE TO DETERMINE ACTION TO BE TAKEN...\n*----------------------------------------------------------------------\n*\nSETEOF   DS    0H\n         MVI   EOFSW,C'Y'       VALID EOF REACHED\nCHKWORK  DS    0H\n         CLOSE (GLBLCSI,,TARGCSI,,WRKDISK,,DISTCSI)\n         LTR   R15,R15            GOOD CLOSE ?\n         BNZ   ERROR              NO - ABEND\n         OPEN  (GLBLCSI,(INPUT),TARGCSI,(INPUT),REPORT,(OUTPUT))\n         LTR   R15,R15            GOOD OPEN?\n         BNZ   ERROR              NO - ABEND\n         OPEN  (DISTCSI,(INPUT),DISKIN,(INPUT))\n         LTR   R15,R15            GOOD OPEN?\n         BNZ   ERROR              NO - ABEND\n*----------------------------------------------------------------------\n         MVC   REPRTS,=C' P E   '\n         MVC   REPRTE,=C'A P A R'\n         MVC   REPRTF,=C' F I X '\n         MVC   REPRTM,=C'ACTION TO BE TAKEN                      '\n         PUT   REPORT,REPRT       WRITE A LINE\n         MVC   REPRTS,=C'-------'\n         MVC   REPRTE,=C'-------'\n         MVC   REPRTF,=C'-------'\n         MVC   REPRTM,=C'----------------------------------------'\n         PUT   REPORT,REPRT       WRITE A LINE\n*----------------------------------------------------------------------\n         MVC   TARGHEX,TZONKEY\n         MVI   TARGHEX-1,X'00'\n         MVI   TARGHEX+1,X'26'\n         MVC   SUPDHEX,DZONKEY\n*        MVI   SUPDHEX-1,X'00'\n*        MVI   SUPDHEX+1,X'26'\n         MVI   SUPDPE+7,C' '\n         MVC   SUPDPE+8,=X'26010000'\n         MVC   SUPDPE+12,=C'UNKNOWN'\n         MVC   DISTHEX,DZONKEY\n         MVI   DISTHEX-1,X'00'\n         MVI   DISTHEX+1,X'26'\n         EJECT\n*----------------------------------------------------------------------\n*        READ WORK FILE...\n*----------------------------------------------------------------------\n*\nREADWRK  DS    0H\n         MVI   FIXFND,C'N'      RESET FIX FOUND SWITCH\n         CLI   EOFSW,C'N'       VALID EOF REACHED ?\n         BE    STOP                   NO\n*----------------------------------------------------------------------\n         GET   DISKIN,WDISK       READ RECORD\n         MVC   REPRTS,WDISKS      PTF IN ERROR\n         MVC   REPRTE,WDISKE      FIXING APAR\n*\n*----------------------------------------------------------------------\n*        POSITION OURSELVES INTO THE GLOBAL ZONE AT THE FIRST\n*        GLOBAL ZONE SYSMOD RECORD.\n*----------------------------------------------------------------------\n*\nCHKFIX   DS    0H\n         POINT RPL=GLBLSEQ        POSITION TO GLOBAL ZONE START\n         LTR   R15,R15            OK?\n         BNZ   ERROR              NO - ERROR\n*\n*----------------------------------------------------------------------\n*        LOOK AT EACH GLOBAL ZONE SYSMOD RECORD TO SEE IF IT IS THE\n*        CORRECTING PTF FOR THIS APAR FIX...\n*----------------------------------------------------------------------\n*\nAPARFIX  DS    0H\n         GET   RPL=GLBLSEQ        GET A RECORD\n         LTR   R15,R15            GOT IT?\n         BNZ   ERROR              NO - ERROR\n         CLC   GLOBALK,ZONE26     LAST GLOBAL SYSMOD RECORD?\n         BNE   NOFIX                 YES\n         CLC   GLOBALF,=X'7040'   SUPING APAR ?                    @L05\n         BNE   APARFIX            NO - KEEP LOOKING\n         CLC   GLOBALE,WDISKE     PTF FIX FOR ARAR ?\n         BNE   APARFIX            NO - KEEP LOOKING\n         MVC   REPRTF,GLOBALP     FIXING PTF\n         MVI   FIXFND,C'Y'        FIX FOUND\n         B     CHKSUPD            CHECK TO SEE IF IT IS SUPD\nNOFIX    DS    0H\n         MVC   REPRTF,=C'       '\n         MVI   FIXFND,C'N'        FIX NOT FOUND\n*\n*----------------------------------------------------------------------\n*        ONCE WE HAVE A FIXING SYSMOD, BEGIN CHECK FOR SUPD PE IN\n*        OUR TARGET ZONE.\n*----------------------------------------------------------------------\n*\nCHKSUPD  DS    0H\n         MVC   SUPDPE,WDISKS      PE PTF\n         GET   RPL=TARGSUP        SEE IF IT IS IN THE TZONE\n         LTR   R15,R15            FIND IT?\n         BNZ   CHKACC             NO - OK\n         CLI   FIXFND,C'Y'        WAS A FIX FOUND ?\n         BNE   FIXNFND                  NO\n         MVC   REPRTM,MESS4       PE SUPD IGNORE FIX\n         B     PRTRPT\nFIXNFND  DS    0H\n         MVC   REPRTM,MESS5       PE SUPD\n         B     PRTRPT\n*\n*----------------------------------------------------------------------\n*        ONCE WE HAVE A FIXING PTF THAT HASN'T BEEN SUPERCEDED,\n*        SEE IF PE IS ACCEPTED INTO OUR DISTRIBUTION ZONE...\n*----------------------------------------------------------------------\n*\nCHKACC   DS    0H\n         CLI   FIXFND,C'Y'        WAS A FIX FOUND ?\n         BE    CONTCHK                 YES\n         MVC   REPRTM,MESS3       FIX NOT ON SYSTEM\n         B     PRTRPT\nCONTCHK  DS    0H\n         MVC   DISTSYS,WDISKS     MOVE HOLD PTF\n         GET   RPL=DISTDIR        SEE IF IT IS IN THE DIST ZONE\n         LTR   R15,R15            FIND IT?\n         BNZ   NOACC              NO - OK\n         MVC   REPRTM,MESS1       APPLY FIX\n         B     PRTRPT\nNOACC    DS    0H\n         MVC   REPRTM,MESS2       RESTORE PE OR APPLY FIX\n         B     PRTRPT\n*\n*----------------------------------------------------------------------\n*        PRINT REPORT\n*----------------------------------------------------------------------\n*\nPRTRPT   DS    0H\n         PUT   REPORT,REPRT       WRITE A LINE\n         AP    COUNT,=P'1'        ADD ONE\n         B     READWRK            GET NEXT RECORD\n         EJECT\n*----------------------------------------------------------------------\n*        END OF JOB ROUTINE\n*----------------------------------------------------------------------\n*\nSTOP     DS    0H\n         MVC   REPRTS,=C'-------'\n         MVC   REPRTE,=C'-------'\n         MVC   REPRTF,=C'-------'\n         MVC   REPRTM,=C'----------------------------------------'\n         PUT   REPORT,REPRT       WRITE A LINE\n         MVC   REPRTS,=C'*******'\n         MVC   REPRTE,TZONAME\n         MVC   REPRTF,DZONAME\n         MVC   REPRTM,=C'PRINT AND READ MCS FOR ALL FIXES        '\n         PUT   REPORT,REPRT       WRITE A LINE\n*----------------------------------------------------------------------\n         UNPK  WTO+23(7),COUNT    UNPACK COUNT\n         OI    WTO+29,X'F0'       SET SIGN\nWTO      WTO   'RECORD COUNT = NNNNNNN'\n         CLOSE (GLBLCSI,,TARGCSI,,DISKIN)\n         CLOSE (DISTCSI,,REPORT)\nSTOP2    EQU   *\n         DLVRP TYPE=LSR                                            @L05\n         LA    R15,0\n         #RTN\n         EJECT\n*----------------------------------------------------------------------\n*        ERROR ROUTINES\n*----------------------------------------------------------------------\nERROR    DS    0H\n         ABEND 16,DUMP\n         EJECT\n*----------------------------------------------------------------------\nZONE26   DC    XL4'00006F00'                                       @L05\n*----------------------------------------------------------------------\nGLOBAL   DS    0CL143                                              @L05\nGLOBALK  DC    CL4' '                                              @L05\nGLOBALP  DC    CL7' '\n         DC    CL1' '                                              @L05\n*\nGLOBALF  DC    CL2' '        X'2210' = HOLD ERROR                  @L05\n*                            X'F5' = SYSTEM HOLD\n*                            X'F7' = SOURCE ID\n*                            X'7040' = SUPS THIS APAR              @L05\n         DC    CL2' '\nGLOBALE  DC    CL7' '\n         DC    CL121' '                                            @L05\n*----------------------------------------------------------------------\nZONENAME DC    CL15' '\nTZONAME  DC    CL7' '\nDZONAME  DC    CL7' '\n*----------------------------------------------------------------------\nSUPDKEY  DS    0CL23\nSUPDHEX  DC    XL2'0000'                                           @L05\n         DC    XL2'6F00'                                           @L05\nSUPDPE   DC    CL7' '\n         DC    CL1' '\n         DC    XL1'26'\n         DC    XL1'01'\n         DC    XL2'0000'\n         DC    CL8'UNKNOWN '\n*----------------------------------------------------------------------\nTARGKEY  DS    0CL11                                               @L05\nTARGHEX  DC    XL2'0000'                                           @L05\n         DC    XL2'6F00'                                           @L05\nTARGSYS  DC    CL7' '\n*----------------------------------------------------------------------\nTARGET   DS    0CL143                                              @L05\nTARGETZ  DC    CL3' '\n         DC    CL1' '                                              @L05\nTARGETE  DC    CL7' '\n         DC    CL1' '                                              @L05\n*\nTARGETF  DC    CL2' '        X'01' = SUPD IF TARGETS = UNKNOWN     @L05\n*                            X'12' = SUPD BY TARGETS\n         DC    CL2' '\nTARGETS  DC    CL7' '\n         DC    CL121' '                                            @L05\n*----------------------------------------------------------------------\n         ORG   TARGET\n         DS    CL4\nTARGETH  DS    CL2                                                 @L05\n         ORG\n*----------------------------------------------------------------------\nDISTKEY  DS    0CL11                                               @L05\nDISTHEX  DC    XL2'0000'                                           @L05\n         DC    XL2'6F00'                                           @L05\nDISTSYS  DC    CL7' '\n*----------------------------------------------------------------------\nDISTRIB  DS    0CL143                                              @L05\nDISTZ    DC    CL3' '\n         DC    CL1' '                                              @L05\nDISTE    DC    CL7' '\n         DC    CL1' '                                              @L05\nDISTF    DC    CL2' '                                              @L05\n         DC    CL2' '\nDISTS    DC    CL7' '\n         DC    CL121' '                                            @L05\n*----------------------------------------------------------------------\n         ORG   DISTRIB\n         DS    CL4\nDISTH    DS    CL2                                                 @L05\n         ORG\n*----------------------------------------------------------------------\nWDISK    DS    0CL80\nWDISKS   DC    CL7' '    PTF IN ERROR\nWDISKE   DC    CL7' '    APAR FIX\n         DC    CL66' '\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\nREPRT    DS    0CL80\n         DC    CL2' '\nREPRTS   DC    CL7' '   PTF IN ERROR\n         DC    CL2' '\nREPRTE   DC    CL7' '   APAR FIX\n         DC    CL2' '\nREPRTF   DC    CL7' '   FIXING PTF\n         DC    CL2' '\nREPRTM   DC    CL40' '  ACTION TO BE TAKEN\n         DC    CL11' '\n*------------------*----------------------------------------*----------\nMESS1    DC    CL40'APPLY FIXING PTF'\nMESS2    DC    CL40'RESTORE PTF IN ERROR OR APPLY FIXING PTF'\nMESS3    DC    CL40'FIXING PTF NOT ON SYSTEM * CALL SUPPORT'\nMESS4    DC    CL40'PE HAS BEEN SUPD * FIX CAN BE IGNORED'\nMESS5    DC    CL40'PE HAS BEEN SUPD'\n*----------------------------------------------------------------------\nCOUNT    DC    PL4'0'   RECORD COUNT\nEOFSW    DC    CL1'N'   END OF FILE SWITCH\nFIXFND   DC    CL1'N'   FIXING PTF FOUND SWITCH\nTZONKEY  DC    XL2'00'  TARG ZONE KEY                              @L05\nDZONKEY  DC    XL2'00'  DIST ZONE KEY                              @L05\n*----------------------------------------------------------------------\nGLBLCSI  ACB   AM=VSAM,MACRF=(LSR,KEY,SEQ,DIR,IN),DDNAME=GLBLCSI,  @L05+\n               EXLST=CSIEXIT\nTARGCSI  ACB   AM=VSAM,MACRF=(LSR,KEY,SEQ,DIR,IN),DDNAME=TARGCSI,  @L05+\n               EXLST=CSIEXIT\nDISTCSI  ACB   AM=VSAM,MACRF=(LSR,KEY,SEQ,DIR,IN),DDNAME=DISTCSI,  @L05+\n               EXLST=CSIEXIT\nGLBLSEQ  RPL   ACB=GLBLCSI,AM=VSAM,OPTCD=(KEY,SEQ,KEQ,GEN,MVE),        +\n               KEYLEN=3,ARG=ZONE26,AREA=GLOBAL,AREALEN=143         @L05\nTARGDIR  RPL   ACB=TARGCSI,AM=VSAM,OPTCD=(KEY,DIR,MVE,GEN,KEQ),        +\n               KEYLEN=11,ARG=TARGKEY,AREA=TARGET,AREALEN=143       @L05\nTARGSEQ  RPL   ACB=TARGCSI,AM=VSAM,OPTCD=(KEY,SEQ,MVE),                +\n               AREA=TARGET,AREALEN=143                             @L05\nTARGSUP  RPL   ACB=TARGCSI,AM=VSAM,OPTCD=(KEY,DIR,MVE,GEN,KEQ),        +\n               KEYLEN=23,ARG=SUPDKEY,AREA=TARGET,AREALEN=143       @L05\nDISTDIR  RPL   ACB=DISTCSI,AM=VSAM,OPTCD=(KEY,DIR,MVE,GEN,KEQ),        +\n               KEYLEN=11,ARG=DISTKEY,AREA=DISTRIB,AREALEN=143      @L05\nDISTSEQ  RPL   ACB=DISTCSI,AM=VSAM,OPTCD=(KEY,SEQ,MVE),                +\n               AREA=DISTRIB,AREALEN=143                            @L05\nCSIEXIT  EXLST AM=VSAM,EODAD=READWRK\nWRKDISK  DCB   DDNAME=WRKDISK,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80,   +\n               BLKSIZE=3120\nDISKIN   DCB   DDNAME=DISKIN,DSORG=PS,MACRF=(GM),RECFM=FB,LRECL=80,    +\n               BLKSIZE=3120,EODAD=STOP\nREPORT   DCB   DDNAME=REPORT,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80,    +\n               BLKSIZE=3120\n         END\n./       ADD   NAME=SAS\nDATA A;\n INFILE CSI VSAM;\n INPUT @1 K1  IB4.   ;\n K=PUT(K1,$HEX8.) ;\n\nPROC FREQ;\n TABLES K;\n./       ADD   NAME=XDATEDIT\nRWA      EQU   2                   GENERAL WORK REG\nRWB      EQU   3                   GENERAL WORK REG\nRWC      EQU   4                   GENERAL WORK REG\nRWD      EQU   5                   GENERAL WORK REG\nRSPACE   EQU   6                   NUMBER OF LINES TO SPACE\nRBAL     EQU   7                   NUMBER OF LINES LEFT ON PAGE\nRLPEXIT  EQU   8                   EXIT FROM LIST PROCESSING ROUTINE\nRPARM    EQU   9                   CALL PARAMETER LIST ADDR\nRPLD     EQU   10                  PLD BLOCK BASE\nRWKAREA  EQU   11                  BASE REGISTER FOR WORK AREA\nRBASE    EQU   12                  BASE REGISTER FOR CODING\nRRET     EQU   14                  STANDARD RETURN ADDR\nRDSECT   EQU   11                  BASE REG FOR ARGUMENT/RESULT\nRPARMD   EQU   1                   PARAMETER LIST POINTER\nRARGSAVE EQU   2                   TO SAVE ORIGINAL PACKED ARGUMENT\nRMONTH   EQU   3\nRDAY     EQU   4                   RDAY AND RYEAR ARE AN EVEN/ODD\nRYEAR    EQU   5                   PAIR FOR DIVISION\nRWORK    EQU   6\nRLIST    EQU   7\n         TITLE 'DATE EDITING ROUTINE \"XDATEDIT\"'\n* STATUS:  VERSION 0, MOD 2, 5 OCTOBER 1967.\n         SPACE\n* FUNCTION/OPERATION:  EDITS A PACKED DECIMAL DATE IN YEAR-DAY FORM TO\n*        EBCDIC MONTH-DAY-YEAR FORM.  CORRECTS FOR LEAP YEARS AND\n*        FOR THE TURN OF A CENTURY.\n         SPACE\n* ENTRY POINTS:  ENTER AT \"XDATEDIT\" VIA BALR 14,15 WITH REG 13 SET\n*        TO A STANDARD 18-WORD SAVE AREA.  REGISTER 1 POINTS TO A\n*        PARAMETER LIST CONTAINING ONE ADDRESS.\n         SPACE\n* INPUT:  THE ADDRESS IN THE PARAMETER LIST IS THAT OF AN ALIGNED\n*        DOUBLE WORD CONTAINING THE ARGUMENT IN PACKED DECIMAL AS:\n*        X'0000000000YYDDD+'.\n         SPACE\n* OUTPUT:  THE RESULT IS RETURNED IN THE SAME DOUBLE WORD IN EBCDIC AS\n*        C'MM/DD/YY'.\n         SPACE\n* DATA SETS:  NONE.\n         SPACE\n* EXTERNAL ROUTINES:  NONE.\n         SPACE\n* EXITS-NORMAL:  RETURN VIA REG 14 WITH RETURN CODE 0 IN REG 15.\n         SPACE\n* EXITS-ERROR:  IF THE DAY NUMBER IS ZERO OR EXCEEDS THE MAXIMUM VALUE\n*        APPROPRIATE TO THE YEAR, RETURN VIA REG 14 WITH RETURN CODE 4\n*        IN REG 15 AND THE RESULT FIELD SET TO C' YY.DDD '.\n         SPACE\n* TABLES/WORK AREAS:  NONE.\n         SPACE\n* ATTRIBUTES:  REENTRANT, READ ONLY.\n         SPACE\n* NOTES:  NONE.\n         EJECT\n* DUMMY SECTION TO DEFINE THE ARGUMENT AND RETURN FIELD.\n         SPACE\nDUMMY    DSECT\nDWORD    DS    1D\n         SPACE 6\n* BEGIN CONTROL SECTION HERE.  DEFINE REGISTER TAGS.\n         SPACE\nXDATEDIT CSECT\n         SPACE\n         SPACE 6\n* ENTER HERE.  SAVE GENERAL REGISTERS AND SET UP BASE REGISTERS.\n         SPACE\n         SAVE  (14,12),,*\n         SPACE\n         BALR  RBASE,0\n         USING *,RBASE\n         L     RDSECT,0(RPARMD)    LOAD ARGUMENT ADDRESS\n         USING DWORD,RDSECT\n         EJECT\n* CONVERT YEAR AND DAY TO BINARY, AND SEPARATE BY DIVISION.\n         SPACE\n         MVI   DWORD,X'00'         CLEAR HIGH DECIMAL DIGITS\n         MVC   DWORD+1(4),DWORD    IN ARG TO ZEROS\n         OI    DWORD+7,X'0F'       FORCE PLUS SIGN\n         L     RARGSAVE,DWORD+4    SAVE ARGUMENT FOR 'BADDATE'\n         SPACE\n         CVB   RYEAR,DWORD         CONVERT YYDDD TO BINARY\n         SR    RDAY,RDAY           CLEAR HIGH-ORDER DIVIDEND\n         D     RDAY,F1000          QUOTIENT=YEAR; REMAINDER=DAY\n         SPACE\n* CHECK FOR LEAP YEAR, AND LOAD RLIST WITH BASE ADDRESS OF APPROPRIATE\n* LIST OF MONTH SIZES.\n         SPACE\nDAYOK    DS    0H\n         LA    RLIST,STDLIST       POINT RLIST TO STANDARD MONTHS\n         LTR   RWORK,RYEAR         LOAD BINARY YEAR NUMBER\n         BZ    NOTLEAP             BR IF TURN OF CENTURY\n         N     RWORK,=F'3'         TEST LOW TWO BITS\n         BC    4,NOTLEAP           BR IF NON-ZERO\n         LA    RLIST,LPYLIST       POINT RLIST TO LEAP-YEAR MONTHS\nNOTLEAP  DS    0H\n         SPACE\n* TEST DAY NUMBER AGAINST ZERO AND THE UPPER LIMIT DETERMINED BY\n* THE YEAR NUMBER.\n         SPACE\n         LTR   RDAY,RDAY           TEST FOR ZERO\n         BZ    BADDATE             BR IF SO\n         CH    RDAY,0(0,RLIST)     TEST FOR UPPER LIMIT\n         BH    BADDATE             BR IF TOO LARGE\n         SPACE\n* REDUCE JULIAN DAY TO DAY-OF-MONTH, ACCUMULATING MONTH NUMBER.\n         SPACE\n         LA    RMONTH,1            INITIAL MONTH NUMBER\n         SR    RWORK,RWORK\nDAYLOOP  IC    RWORK,1(RMONTH,RLIST)  LENGTH OF MONTH INTO RWORK\n         CR    RDAY,RWORK          TEST IF DAY IN THIS MONTH\n         BNH   DAYDONE             BR IF DAY LESS THAN MONTH SIZE\n         SR    RDAY,RWORK          REDUCE DAY BY LENGTH OF MONTH\n         LA    RMONTH,1(RMONTH)    INCREMENT MONTH\n         B     DAYLOOP\nDAYDONE  DS    0H\n         SPACE\n* COMBINE MONTH, DAY, AND YEAR IN BINARY IN ONE REGISTER, MULTIPLYING\n* EACH BY A FACTOR TO PLACE IT PROPERLY IN THE DECIMAL RESULT.\n* THE TRICK IS THAT  1000(1000(MONTH)+DAY)+YEAR  GIVES  MM0DD0YY  WHEN\n* CONVERTED TO DECIMAL.  AFTER UNPACKING, THE ZEROS ARE REPLACED BY\n* SLASHES.\n         SPACE\n         MH    RMONTH,H1000\n         AR    RMONTH,RDAY\n         MH    RMONTH,H1000\n         AR    RMONTH,RYEAR\n         CVD   RMONTH,DWORD\n         MVC   DWORD(5),DWORD+3    MOVE OVER FOR UNPACKING\n         UNPK  DWORD(8),DWORD(5)   CONVERT TO ALPHA\n         OI    DWORD+7,X'F0'       COVER UP SIGN\n         MVI   DWORD+2,C'/'        INSERT SLASHES\n         MVI   DWORD+5,C'/'\n         SR    15,15               SET NORMAL RETURN CODE OF 0\n         SPACE\nEXITD    RETURN  (14,12),T,RC=(15)  RETURN TO CALLER\n         SPACE 2\n* FOR ARGUMENTS WHOSE DAY NUMBER IS ZERO OR TOO LARGE, RETURN IN\n* 'DWORD' THE EDITED VALUE  C' YY.DDD ' AND SET A RETURN CODE OF 4.\n         SPACE\nBADDATE  ST    RARGSAVE,DWORD      RESTORE ORIGINAL PACKED ARGUMENT\n         UNPK  DWORD+2(5),DWORD+1(3)  UNPACK INTO ALPHA\n         MVC   DWORD+1(2),DWORD+2  SHIFT YEAR 1 LEFT\n         MVI   DWORD,C' '          APPLY COSMETICS\n         MVI   DWORD+3,C'.'\n         MVI   DWORD+7,C' '\n         LA    15,4                SET RETURN CODE\n         B     EXITD\n         EJECT\n* LISTS OF MONTH SIZES FOR STANDARD AND LEAP YEARS:\n         SPACE\n         SPACE\nSTDLIST  DC    H'365'              DAY LIMIT FOR STANDARD YEARS\n         DC    AL1(31)\n         DC    AL1(28)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         SPACE\nLPYLIST  DC    H'366'              DAY LIMIT FOR LEAP YEARS\n         DC    AL1(31)\n         DC    AL1(29)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         DC    AL1(30)\n         DC    AL1(31)\n         SPACE\nF1000    DC    F'1000'\nH1000    EQU   F1000+2\n         LTORG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TABLES": {"ttr": 31240, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x13\\x00\\x10\\xbf\\x10\\xbf\\x00\\x00\\xd3\\xc1\\xd5\\xc5\\xd1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T13:00:00", "lines": 4287, "newlines": 4287, "modlines": 0, "user": "LANEJ"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT047/FILE047.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT047", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}