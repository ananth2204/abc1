Subject:  SQLITE status
From:     John McKown <john.archie.mckown@gmail.com>
Date:     8/22/2013 10:34 AM
To:       Sam Golob <sbgolob@cbttape.org>

It's been a while, but I do have "something" right now. It might
be considered a minimal port of only what is in the SQLITE3
distribution. That is, it works, but does not have any of the
"extras" which people would want. In particular, I don't yet have
a "stub" program in LE assembler to allow "easy" (FSVO easy) use
with COBOL. Easy in this case meaning using a subroutine whose
name is in upper case and 8 or less characters in length so that
it can be easily used by normal COBOL programmers. What is
available and working is the "sqlite3" UNIX program which is a
UNIX command line program which does interactive SQLITE commands
such as creating tables, dropping tables, inserting rows,
deleting rows, and doing SELECT commands.

What I am currently working on is the assembler stub program. It
is going slowly due to not much free time.

What I need to work on:
1) example COBOL program to use the stub.
2) example COBOL program which uses the C subroutines directly.
3) example PL/I program which uses the C subroutines directly.

After these, I am looking at the possibility of using a VSAM LDS
to hold the sqlite3 data base instead of a z/OS UNIX file. I
_assume_ that many shops would prefer using an LDS to a UNIX
file. I need to see how sqlite3 accesses the UNIX file and how
easy it would be to modify the C code to optionally use an LDS
instead.

Having looked at the documentation, sqlite has an interesting
concept of a VFS, Virtual File System, which looks like it
_might_ be used to implement reading (writing?) to other types of
data sets such as VSAM LDS (instead integrating LDS into the base
code as above), KSDS, or ESDS and maybe even sequential files
(though lack of direct record access would make this "iffy").

What I have is in JOARMC.SQLITE3.CNTL Pds and the
/u/joarmc/sqlite-3071700 UNIX subdirectory.

I don't know the PDS could be placed on the CBTTape.org site as a
preliminary release for advanced UNIX users who can write C code.

--
As of next week, passwords will be entered in Morse code.

John McKown

