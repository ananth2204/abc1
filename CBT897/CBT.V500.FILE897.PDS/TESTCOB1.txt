000100 PROCESS DYNAM,NAME,PGMNAME(COMPAT)
000200 PROCESS ADV,AWO,NOC(W),FSRT,FLAG(I,I)
000300 PROCESS INTDATE(ANSI),LANG(EN),LIB,LIST,MAP
000400 PROCESS NONUM,NUMPROC(PFD),OBJ,APOST
000500 PROCESS RENT,NOSEQ,SOURCE,NOSSRANGE,
000600 PROCESS NOTERM,NOTEST,VBREF,
000700 PROCESS XREF(FULL),ZWB,FASTSRT,AR(E)
000800 ID DIVISION.
000900 PROGRAM-ID. 'TESTCOB1'.
001000 AUTHOR. JOHN MCKOWN.
001100 INSTALLATION. CBT Tape.
001200 DATE-WRITTEN.
001300 DATE-COMPILED.
001400 SECURITY. NONE.
001500*
001600 ENVIRONMENT DIVISION.
001700 CONFIGURATION SECTION.
001800 SOURCE-COMPUTER. IBM-370.
001900 OBJECT-COMPUTER. IBM-370.
002000 SPECIAL-NAMES.
002100 INPUT-OUTPUT SECTION.
002200 FILE-CONTROL.
002300 I-O-CONTROL.
002400*    APPLY WRITE-ONLY ON REPORT1-FD.
002500*
002600 DATA DIVISION.
002700 FILE SECTION.
002800
002900*
003000 WORKING-STORAGE SECTION.
003100 COPY COBSQLTE .
003200 01  CEE3DMP-PARAMETERS.
003300     05 CEE3DMP-TITLE              PIC X(80)
003400        VALUE 'TEST DUMP'.
003500     05 CEE3DMP-OPTIONS            PIC X(255)
003600        VALUE 'NOTRACE NOENTRY'.
003700 01  LE-FC.
003800     02  CONDITION-TOKEN-VALUE.
003900     COPY  CEEIGZCT.
004000         03  CASE-1-CONDITION-ID.
004100             04  SEVERITY    PIC S9(4) BINARY.
004200             04  MSG-NO      PIC S9(4) BINARY.
004300         03  CASE-2-CONDITION-ID
004400                   REDEFINES CASE-1-CONDITION-ID.
004500             04  CLASS-CODE  PIC S9(4) BINARY.
004600             04  CAUSE-CODE  PIC S9(4) BINARY.
004700         03  CASE-SEV-CTL    PIC X.
004800         03  FACILITY-ID     PIC XXX.
004900     02  I-S-INFO            PIC S9(9) BINARY.
005000*
005100 LOCAL-STORAGE SECTION.
005200 01  LS-FULLWORD-RETURN.
005300     05  LS-SOURCEID-POINTER     POINTER.
005400     05  LS-SOURCEID-BINVALUE    REDEFINES LS-SOURCEID-POINTER
005500                                 PIC S9(9) COMP-5.
005600 77  LS-LILIAN               PIC S9(9) COMP-5.
005700 77  LS-GMT-SECS-1           USAGE COMP-2.
005800 77  LS-GMT-SECS-2           USAGE COMP-2.
005900 77  LS-GMT-SECS-3           USAGE COMP-2.
006000 77  LS-GMT-SECS-4           USAGE COMP-2.
006100 77  LS-GMT-SECS-5           USAGE COMP-2.
006200 77  LS-GMT-SECS-6           USAGE COMP-2.
006300 77  LS-DB                   USAGE IS POINTER.
006400 77  LS-INSERT-STMT          USAGE IS POINTER.
006500 77  LS-SELECT-STMT          USAGE IS POINTER.
006600 77  LS-ZERO                 PIC S9(9) COMP-5
006700                             VALUE IS ZERO.
006800 77  LS-RC                   PIC S9(9) COMP-5.
006900 77  LS-SQL-RC               PIC S9(9) COMP-5.
007000 77  SQL-ZCHAR               PIC X(255).
007100 77  LS-I                    PIC S9(9) COMP-5.
007200 77  LS-RECORD-COUNT         PIC S9(9) COMP-5.
007300 77  LS-MINUS-ONE            PIC S9(9) COMP-5
007400        VALUE IS -1.
007500 77  LS-ONE                  PIC S9(9) COMP-5
007600        VALUE IS 1.
007700 77  LS-SOURCEID-LENGTH      PIC S9(9) COMP-5.
007800 LINKAGE SECTION.
007900 01  MVS-PARM.
008000     05 MVS-PARM-LENGTH      PIC S9(4) COMP-5.
008100     05 MVS-PARM-VALUE       PIC X(32760).
008200 77  LINKAGE-SOURCEID        PIC X(101).
008300* MVS-PARM-VALUE LENGTH IS REALLY ONLY THE NUMBER OF CHARACTERS
008400* CONTAINED IN MVS-PARM-LENGTH. YOU NEED TO USE REFERENCE
008500* MODIFICATION TO MAKE SURE YOU DON'T EXCEED THE ACTUAL LENGTH
008600* PASSED TO THIS PROGRAM.
008700*
008800 PROCEDURE DIVISION USING MVS-PARM.
008900 START-UP.
009000**
009100** How to access the data when SQLITE returns a
009200** pointer. The following shows how to get the pointer
009300** and then determine the length of the C "string"
009400** which ends with a LOW-VALUES (0x00).
009500     CALL 'SQLITE3A' USING SQLITE3-LIBVERSION
009600          RETURNING LS-SOURCEID-POINTER
009700     END-CALL
009800     IF LS-SOURCEID-POINTER NOT EQUAL TO NULL THEN
009900        SET ADDRESS OF LINKAGE-SOURCEID TO LS-SOURCEID-POINTER
010000*
010100* Get the length of the returned string by finding the first
010200* LOW-VALUE (0x00). Probably not as efficient as calling the
010300* C "strlen" routine, but is "pure" COBOL.
010400        INSPECT LINKAGE-SOURCEID
010500                TALLYING LS-SOURCEID-LENGTH
010600                FOR CHARACTERS BEFORE INITIAL LOW-VALUE
010700*
010800* If you're interested, this is how to call "strlen". It requires
010900* that CEE.SCEELKED be available for dynamic calling or linking
011000* depending on the compile option DYNAM or NODYNAM, respectively.
011100*       CALL    'STRLEN' USING BY VALUE LS-SOURCEID-POINTER
011200*               RETURNING LS-SOURCEID-LENGTH
011300*       END-CALL
011400        DISPLAY "Sqlite version is "
011500                LINKAGE-SOURCEID(1:LS-SOURCEID-LENGTH)
011600                UPON SYSOUT
011700     END-IF
011800     CALL 'SQLITE3A' USING SQLITE3-INITIALIZE
011900     RETURNING LS-SQL-RC
012000     END-CALL
012100D    DISPLAY 'INITIALIZE LS-SQL-RC=' LS-SQL-RC
012200D            UPON SYSOUT
012300     IF LS-SQL-RC NOT = SQLITE-OK THEN
012400        DISPLAY 'SQLITE-INITIALIZE FAILED. RC='
012500            RETURN-CODE
012600            UPON SYSOUT
012700        GOBACK
012800     END-IF
012900     .
013000 INITIALIZE-SQLITE.
013100*
013200* Note: in my testing, this creates a z/OS UNIX file in
013300* the /tmp subdirectory, with the name testdb.sqlite3 .
013400* That is, the data base name is actually the UNIX file name.
013500* This can be absolute, as in my example, or relative to the
013600* user's UNIX $HOME directory if the value does not start with
013700* a slash character. This is the norm for UNIX file names.
013800*
013900* Note that a prefix of a tilde, ~/, does not expand to the user's
014000* $HOME as it would in a UNIX shell.
014100* Again, in my testing, the OPEN fails with SQLITE-CANTOPEN (14).
014200*
014300     MOVE Z'/tmp/testdb.sqlite3' TO SQL-ZCHAR
014400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-OPEN
014500          BY REFERENCE SQL-ZCHAR
014600          BY REFERENCE LS-DB
014700          RETURNING LS-SQL-RC
014800     END-CALL
014900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
015000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
015100        DISPLAY 'SQLITE3-OPEN FAILED. RC='
015200           LS-SQL-RC UPON SYSOUT
015300        GOBACK
015400     END-IF
015500     .
015600 DROP-TABLE.
015700     MOVE Z'DROP TABLE xz' TO SQL-ZCHAR
015800     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
015900          BY VALUE LS-DB
016000          BY REFERENCE SQL-ZCHAR
016100          BY VALUE LS-ZERO
016200          BY VALUE LS-ZERO
016300          BY VALUE LS-ZERO
016400          RETURNING LS-SQL-RC
016500     END-CALL
016600     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
016700        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
016800        DISPLAY 'DROP TABLE  FAILED. RC='
016900           LS-SQL-RC UPON SYSOUT
017000     END-IF
017100     .
017200 CREATE-TABLE.
017300     MOVE Z'CREATE TABLE xz(N INTEGER)' TO SQL-ZCHAR
017400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
017500          BY VALUE LS-DB
017600          BY REFERENCE SQL-ZCHAR
017700          BY VALUE LS-ZERO
017800          BY VALUE LS-ZERO
017900          BY VALUE LS-ZERO
018000          RETURNING LS-SQL-RC
018100     END-CALL
018200D    DISPLAY 'CREATE TABLE RC=' LS-SQL-RC UPON SYSOUT
018300     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
018400        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
018500        DISPLAY 'CREATE TABLE  FAILED. RC='
018600           LS-SQL-RC UPON SYSOUT
018700        GOBACK
018800     END-IF
018900     .
019000 CREATE-INDEX.
019100     MOVE Z'CREATE INDEX r1 ON xz(N)' TO SQL-ZCHAR
019200     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
019300          BY VALUE LS-DB
019400          BY REFERENCE SQL-ZCHAR
019500          BY VALUE LS-ZERO
019600          BY VALUE LS-ZERO
019700          BY VALUE LS-ZERO
019800          RETURNING LS-SQL-RC
019900     END-CALL
020000D    DISPLAY 'CREATE TABLE RC=' RETURN-CODE UPON SYSOUT
020100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
020200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
020300        DISPLAY 'CREATE TABLE  FAILED. RC='
020400           LS-SQL-RC UPON SYSOUT
020500        GOBACK
020600     END-IF
020700     .
020800 PREPARE-INSERT.
020900     MOVE Z'INSERT INTO xz(N) VALUES(?)' TO SQL-ZCHAR
021000     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-PREPARE
021100          BY VALUE LS-DB
021200          BY REFERENCE SQL-ZCHAR
021300          BY VALUE LS-MINUS-ONE
021400          BY REFERENCE LS-INSERT-STMT
021500          BY VALUE LS-ZERO
021600          RETURNING LS-SQL-RC
021700     END-CALL
021800D    DISPLAY 'PREPARE INSERT RC=' LS-SQL-RC UPON SYSOUT
021900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
022000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
022100        DISPLAY 'PREPARE OF INSERT FAILED. RC='
022200           LS-SQL-RC UPON SYSOUT
022300        GOBACK
022400     END-IF
022500     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-CHANGES
022600          BY VALUE LS-DB
022700          RETURNING LS-SQL-RC
022800     END-CALL
022900     DISPLAY 'CHANGES BEFORE BEGIN=' LS-SQL-RC
023000       UPON SYSOUT
023100     .
023200 BEGIN-TRANSACTION.
023300     MOVE Z'BEGIN TRANSACTION' TO SQL-ZCHAR
023400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
023500          BY VALUE LS-DB
023600          BY REFERENCE SQL-ZCHAR
023700          BY VALUE LS-ZERO
023800          BY VALUE LS-ZERO
023900          BY VALUE LS-ZERO
024000          RETURNING LS-SQL-RC
024100     END-CALL
024200D    DISPLAY 'BEGIN TRANSACTION RC=' LS-SQL-RC UPON SYSOUT
024300     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
024400        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
024500        DISPLAY 'BEGIN TRANSACTION. RC='
024600           LS-SQL-RC UPON SYSOUT
024700        GOBACK
024800     END-IF
024900     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-1, LE-FC
025000     .
025100 INSERT-VALUES.
025200*
025300* Inline PERFORM to insert values.
025400     PERFORM VARYING LS-I FROM 0 BY 1 UNTIL LS-I >= 50000
025500* Bind the host variable contents to the prepared statement
025600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-BIND-INT
025700          BY VALUE LS-INSERT-STMT
025800          BY VALUE LS-ONE
025900          BY VALUE LS-I
026000          RETURNING LS-SQL-RC
026100     END-CALL
026200D    DISPLAY 'INSERT BIND RC=' LS-SQL-RC UPON SYSOUT
026300     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
026400        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
026500        DISPLAY 'INSERT BIND FAILED. RC='
026600           LS-SQL-RC UPON SYSOUT
026700        GOBACK
026800     END-IF
026900* Actually insert the data.
027000     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-STEP
027100          BY VALUE LS-INSERT-STMT
027200          RETURNING LS-SQL-RC
027300     END-CALL
027400D    DISPLAY 'INSERT STEP RC=' LS-SQL-RC
027500D            ' VALUE=' LS-I
027600D            UPON SYSOUT
027700     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
027800        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
027900        DISPLAY 'INSERT (STEP) FAILED. RC='
028000           LS-SQL-RC UPON SYSOUT
028100        GOBACK
028200     END-IF
028300* Do a "reset" to reset the prepared statement for reuse.
028400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-RESET
028500          BY VALUE LS-INSERT-STMT
028600          RETURNING LS-SQL-RC
028700     END-CALL
028800D    DISPLAY 'INSERT RESET RC=' LS-SQL-RC UPON SYSOUT
028900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
029000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
029100        DISPLAY 'RESET FAILED. RC='
029200           LS-SQL-RC UPON SYSOUT
029300        GOBACK
029400     END-IF
029500     END-PERFORM
029600* End of INSERT loop
029700     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-CHANGES
029800          BY VALUE LS-DB
029900          RETURNING LS-SQL-RC
030000     END-CALL
030100     DISPLAY 'CHANGES BEFORE COMMIT=' LS-SQL-RC
030200             UPON SYSOUT
030300* Finalize the prepared statement to release resources.
030400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-FINALIZE
030500          BY VALUE LS-INSERT-STMT
030600          RETURNING LS-SQL-RC
030700     END-CALL
030800*    MOVE RETURN-CODE TO LS-SQL-RC
030900D    DISPLAY 'INSERT FINIALIZE RC=' LS-SQL-RC UPON SYSOUT
031000     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
031100        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
031200        DISPLAY 'FINALIZE FAILED. RC='
031300           LS-SQL-RC UPON SYSOUT
031400        GOBACK
031500     END-IF
031600     .
031700 COMMIT-TRANSACTION.
031800* Commit the data just inserted.
031900     MOVE Z'COMMIT TRANSACTION' TO SQL-ZCHAR
032000     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
032100          BY VALUE LS-DB
032200          BY REFERENCE SQL-ZCHAR
032300          BY VALUE LS-ZERO
032400          BY VALUE LS-ZERO
032500          BY VALUE LS-ZERO
032600          RETURNING LS-SQL-RC
032700     END-CALL
032800D    DISPLAY 'COMMIT EXEC RC=' LS-SQL-RC UPON SYSOUT
032900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
033000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
033100        DISPLAY 'DROP TABLE  FAILED. RC='
033200           LS-SQL-RC UPON SYSOUT
033300        GOBACK
033400     END-IF
033500     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-CHANGES
033600          BY VALUE LS-DB
033700          RETURNING LS-SQL-RC
033800     END-CALL
033900     DISPLAY 'CHANGES AFTER COMMIT=' LS-SQL-RC
034000             UPON SYSOUT
034100     .
034200 GET-TIMING-1.
034300     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-2, LE-FC
034400     SUBTRACT LS-GMT-SECS-1 FROM LS-GMT-SECS-2
034500              GIVING LS-GMT-SECS-4.
034600     DISPLAY 'TIME DIFFERENCE #1=' LS-GMT-SECS-4
034700             UPON SYSOUT
034800     .
034900 PREPARE-SELECT.
035000     MOVE Z'SELECT N FROM xz;' TO SQL-ZCHAR
035100     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-PREPARE
035200          BY VALUE LS-DB
035300          BY REFERENCE SQL-ZCHAR
035400          BY VALUE LS-MINUS-ONE
035500          BY REFERENCE LS-SELECT-STMT
035600          BY VALUE LS-ZERO
035700          RETURNING LS-SQL-RC
035800     END-CALL
035900*    MOVE RETURN-CODE TO LS-SQL-RC
036000D    DISPLAY 'SELECT PREPARE RC=' LS-SQL-RC UPON SYSOUT
036100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
036200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
036300        DISPLAY 'PREPARE OF SELECT FAILED. RC='
036400           LS-SQL-RC UPON SYSOUT
036500        GOBACK
036600     END-IF
036700     .
036800 SETUP-SELECT-LOOP.
036900     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-4, LE-FC
037000     MOVE ZERO TO LS-SQL-RC
037100     MOVE ZERO TO LS-I
037200     MOVE ZERO TO LS-RECORD-COUNT
037300     .
037400 SELECT-LOOP.
037500* Inline PERFORM to insert values.
037600     PERFORM UNTIL LS-SQL-RC NOT = 0
037700* Bind the host variable contents to the prepared statement
037800D    DISPLAY 'LS-RECORD-COUNT=' LS-RECORD-COUNT UPON SYSOUT
037900D    DISPLAY 'LS-ONE=' LS-ONE UPON SYSOUT
038000     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-STEP
038100          BY VALUE LS-SELECT-STMT
038200          RETURNING LS-SQL-RC
038300     END-CALL
038400D    DISPLAY 'SELECT STEP RC=' LS-SQL-RC UPON SYSOUT
038500     EVALUATE LS-SQL-RC
038600     WHEN SQLITE-OK
038700D         DISPLAY 'SQLITE-OK' UPON SYSOUT
038800          ADD +1 TO LS-RECORD-COUNT
038900          MOVE 0 TO LS-SQL-RC
039000     WHEN SQLITE-ROW
039100D         DISPLAY 'SQLITE-ROW' UPON SYSOUT
039200          ADD +1 TO LS-RECORD-COUNT
039300D         CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-COLUMN-INT
039400D              BY VALUE LS-SELECT-STMT
039500D              BY VALUE LS-ZERO
039600D              RETURNING LS-I
039700D         END-CALL
039800D         DISPLAY 'GOT VALUE ' LS-I ' ON CALL ' LS-RECORD-COUNT
039900D                 UPON SYSOUT
040000          MOVE 0 TO LS-SQL-RC
040100     WHEN SQLITE-DONE
040200D         DISPLAY 'SQLITE-DONE' UPON SYSOUT
040300          MOVE +4 TO LS-SQL-RC
040400     WHEN OTHER
040500D         DISPLAY 'OTHER' UPON SYSOUT
040600          DISPLAY 'SELECT FAILED ERROR=' LS-SQL-RC
040700                  'COUNT=' LS-RECORD-COUNT
040800                  UPON SYSOUT
040900          MOVE +8 TO LS-SQL-RC
041000     END-EVALUATE
041100     END-PERFORM
041200* End of INSERT loop
041300* Finalize the prepared statement to release resources.
041400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-FINALIZE
041500          BY VALUE LS-SELECT-STMT
041600          RETURNING LS-SQL-RC
041700     END-CALL
041800D    DISPLAY 'SELECT FINALIZE RC=' LS-SQL-RC UPON SYSOUT
041900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
042000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
042100        DISPLAY 'FINALIZE FAILED. RC='
042200           LS-SQL-RC UPON SYSOUT
042300        GOBACK
042400     END-IF
042500     .
042600
042700 GET-TIMING-2.
042800     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-5, LE-FC
042900     SUBTRACT LS-GMT-SECS-4 FROM LS-GMT-SECS-5
043000              GIVING LS-GMT-SECS-6.
043100     DISPLAY 'SELECT TIME=' LS-GMT-SECS-6 ' '
043200             LS-RECORD-COUNT ' ROWS SELECTED.'
043300             UPON SYSOUT
043400     .
043500
043600 SHUTDOWN.
043700     CALL 'SQLITE3A' USING SQLITE3-SHUTDOWN
043800          RETURNING LS-SQL-RC
043900     END-CALL
044000     GOBACK
044100     .
044200 END PROGRAM 'TESTCOB1'.
