/* REXX */
/*% NOCOMMENT - This statement removes all REXX comment lines
       before the program is loaded into VLF storage.                 */
/*executil ts*/
/*                                                                    **
**           Copied from TSO TIMES Fall 1994 edition                  **
**                                                                    **
**  PROGRAM: ZOOM                                                     **
**                                                                    **
**  AUTHOR:  John Bubenheim - Union Bank                              **
**                                                                    **
**  SYNTAX:  ZOOM - EDIT mode                                         **
**           ZOOM B - Browse mode                                     **
**                                                                    **
**  PURPOSE: provide cursor sensitive DSN and DSNAME recognition      **
**           allowing users to ZOOM into another dataset without      **
**           leaving their current edit session.                      **
**                                                                    **
**  USAGE:   place cursor anywhere within a valid DSN or DSNAME       **
**           character and start ZOOM from the command line or a      **
**           pre-defined PFKey.  PFKey use is recommended to minimize **
**           cursor repositioning.  If the cursor is left on the      **
**           line, the first data line displayed will be searched for **
**           a valid dsn.                                             **
**                                                                    **
**  FEATURES: - DSN syntax checking with SYSDSN                       **
**            - Symbolic variable substitution                        **
**            - concatenation recognition with member search option   **
**            - automatic switch to browse mode if edit fails         **
**            - allows edit sessions to be stacked                    **
**            - allows modular addition of new functions              **
**                                                                    **
**                                                                    **
**                                                                    */
SETUP:
/*            - set error and message controls                        **
**            - establish edit macro environment                      **
**            - set mode                                              **
**                                                                    */

  "ISPEXEC CONTROL ERRORS RETURN"
  x = MSG("OFF")
  "isredit macro (func)"
  IF TRANSLATE(SUBSTR(FUNC,1,1)) = "?" then
    do
    "ISPExEC DISPLAY PANEL(ZOOMP)"
    exit
    END
  IF TRANSLATE(SUBSTR(FUNC,1,1)) = "B" then FUNC = "BROWSE"
    else FUNC = "EDIT"

CHECK_CURSOR_DATA:
/*            - find and save current cursor location                 **
**            - reposition cursor to data field if necessary          **
**            - set data length and a list of valid DSN characters    **
**            - determine if cursor is on valid DSN character         **
**            - check if DSN or DSNAME and call appropriate routine   **
**                                                                    */
  "isredit (LIN,COL) = CURSOR"
  olin = lin ; ocol = col
  if col = 0 then
    do
      "isredit find '.' .zcsr .zcsr"
      if rc = 4 then "isredit cursor = .zcsr 1"
      "isredit (lin,col) = cursor"
    end
 "isredit (data) = line .zcsr"
  data = translate(data)
  len = length(data)
  val = "ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789.{()-+&"
  if verify(substr(data,col,1),val,"N") \= 0 then
    do
       say "*******************************************************"
       say "Invalid cursor location."
       say "Cursor must be located on a valid dataset name or a"
       say "valid dataset name must be on the first line displayed."
       say "*******************************************************"
       signal quit
    end
 mem = ""
 If substr(data,1,2) = "//" & col < pos(" DD ",data) then call ddname
    else call dsname
PROCESS_STACK:
/*     - pull dsns from stack in FIFO order                           **
**     - check for symbolics and take appropriate action              **
**     - perform first level check using SYSDSN                       **
**     - protect current stack from recursive edits                   **
**     - check SYSDSN msg and decide whether to proceed               */
Do Queued()
  pull dsn
  if pos("&",dsn) \= 0 & pos("&&",dsn) = 0 then CALL SYMBOLIC
  if mem \= "" then dsn = dsn || "(" || mem || ")"
  msg = SYSDSN("'"dsn"'")
  "NEWSTACK"
  if (msg = "INVALID DATASET NAME, '"dsn"'" & mem = "") |,
     (msg = "MEMBER NOT FOUND" & mem = "") |,
     (MSG = "OK") then interpret "CALL" func
 else say msg "-" dsn
 "DELSTACK"
 end

QUIT:
/*     - reset excluded lines                                         **
**     - return cursor to original position                           **
**     - exit from zoom                                               */
  "ISREDIT RESET"
  "ISREDIT CURSOR = "olin ocol
EXIT

DDNAME:
/*     - this routine I designed for JCL DDNAME processing            **
**     - set current DDNAME                                           **
**     - determine total number of lines                              **
**     - get new line of data if needed and parse it                  **
**     - find all occurrences of DSN= and DSNAME= in current          **
**       DDNAME, reposition cursor to first DSN position, and call    **
**       DSNAME (do not process JCL comment statements)               **
**     - if concatenation detected (more than one DSN queued)         **
**       ask user if member search is desired                         **
**     - return to original caller                                    */
  ddn = substr(data,3,pos(" ",data) - 3)
  "ISREDIT (LAST) = LINENUM .ZLAST"
  do n = 1 to (last - lin + 1) by 1
    if n \= 1 then "isredit (data) = line" lin + n - 1
    parse var data v1 3 v2 v3 v4 v5
    if v1 = "//" then
       select
         when substr(data,3,1) = "*" then nop
         when substr(data,3,1) = " " | n = 1 then
           do
             if v2 \= "" & v3 = "DD" then v2 = v4
             if v2 = "DD" then v2 = v3
             if pos("dsname=",v2) \= 0 then
               do
                 col = pos("dsname=",data) + 7
                 call DSNAME
               end
             if pos("DSN=",v2) \= o then
               do
                 col = pos("DSN=",data) + 4
                 call DSNAME
               end
             end
           otherwise leave n
         end
       end
   if queued() > 1 then
     do
       "NEWSTACK"
       say "DD STATEMENT '"ddn"' contains concatenated datasets."
       say
       say "Please enter a name to begin a member search, or just"
       say "press ENTER to" func "each dataset individually."
       say
       pull mem
       "DELSTACK"
     end
  return
DSNAME:
/*     - find beginning/ending DSN characters by searching for        **
         first invalid DSN character left and right of current        **
         cursor location                                              **
**     - extract the DSN from the data using above  beg/end           **
**     - return to original caller                                    */
  beg = verify(reverse(data),val,"N",(len - col + 1))
  if beg = 0 then beg = 1; else beg = len - beg + 2
  end = verify(data,val,"n",col) ; if end = 0 then end = len + 1
  dsn = substr(data,beg,abs(end - beg))
  queue dsn
return

SYMBOLIC:
/*     - exclude all JCL statements                                   **
**     - set pos1/pos2 to starting/ending symbolic positions          **
**     - set sym variable stripping "&" and trailing "."              **
**     - find next occurrence of sym (probably on EXEC for            **
**       instream PROC)                                               **
**     - if not found, check for first occurrence (probably           **
**       on PROC statement)                                           **
**     - if found set pos2/pos3 to start/end literal positions        **
**     - if not found or more than one found ask user to supply       **
**       the symbolic's literal value                                 **
**     - strip leading and trailing single quotes                     **
**     - replace DSN's symbolic variable with literal value           **
**     - continue processing until all symbolics have been resolved   **
**     - return to original caller                                    */
  "isredit exclude '//*' 1 all"
  do forever
    pos1 = pos("&",dsn)
    if pos1 = 0 then leave
    pos2 = pos(".",dsn,pos1)
    if pos2 = 0 then pos2 = verify(dsn,"()","M",pos1) - 1
    if pos2 < 0 then pos2 = length(dsn)
    sym = strip(substr(dsn,(pos1 + 1),(pos2 - pos1)),"T",".")
    "isredit find ' "sym"=' NEXT NX"
    if rc = 4 then "isredit find ',"sym"=' NEXT NX"
    if rc = 4 then "isredit find ' "sym"=' ALL  NX"
    if rc = 4 then "isredit find ',"sym"=' ALL  NX"
    "isredit (NUMFINDS) = FIND_COUNTS"
    if numfinds = 1 then
      do
        "isredit (lin,col) = cursor"
        "isredit (data) = line" lin
        pos3 = pos("=",data,col) + 1
        pos4 = verify(data,", ","M",pos3)
        lit = substr(data,pos3,(pos4-pos3))
      end
    else
      do
        "NEWSTACK"
        say
        say "WARNING: unable to determine the literal value for"
        say "         symbolic variable '"sym"'"
        say "         in dataset '"dsn"'"
        say
        say "Please enter a value (or null) to resume processing"
        say
        pull lit
        "DELSTACK"
        lit = strip(lit,"B","'")
      end
    lit = strip(lit,"B","'")
    dsn = insert(lit,delstr(dsn,pos1,(pos2 - pos1 + 1)),(pos1 -1))
    "isredit cursor = " olin ocol
  end
  return

  EDIT:
/*     - edit the desired data set                                    **
**     - return the appropriate message if edit fails                 **
**     - attempt to browse the data set if severe error               **
**     - return to original caller                                    */
  "ispexec edit dataset('"dsn"')"
  select
    when rc = 14 then say dsn "- data set or member in use"
    when rc = 16 then say dsn "- no members in library"
    when rc = 20 then call BROWSE
    otherwise NOP
  end
return

BROWSE:
/*     - browse the desired data set                                  **
**     - return the appropriate message if browse fails               **
**     - return to original caller                                    */
  "ispexec browse dataset('"dsn"')"
  select
    when rc = 12 then say dsn "- zero-length data"
    when rc = 14 then say dsn "- member not found"
    when rc = 16 then say dsn "- no members in library"
    when rc = 20 then say dsn "- severe error"
    otherwise NOP
  end
return
