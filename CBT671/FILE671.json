{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012555000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE671.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE671.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x10'", "DS1TRBAL": "b'C\\xde'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xbf\\x00\\x02\\x04\\xbf\\x00\\x04\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x07\\x0f\\x01\\x04\\x07\\x0f\\x10P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-03-10T00:00:00", "modifydate": "2004-03-10T10:50:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-465"}, "text": "REGULAR CBT TAPE - VERSION 465    FILE:  671\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT465.FILE671\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 358 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/10/04    10:50:22    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x04\\x07\\x0f\\x01\\x04\\x07\\x0f\\t\\x07\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe3\\xf3\\xf1\\xf1\\xc5\\xd3\\xd7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-03-10T00:00:00", "modifydate": "2004-03-10T09:07:42", "lines": 28, "newlines": 28, "modlines": 0, "user": "T311ELP"}, "text": "//*          Contains one editmacro \"ZOOM\" and associated HELP file.   *\n//*          This editmacro was hand copied from an article in         *\n//*          the Fall 1994 TSO Times.                                  *\n//*                                                                    *\n//* PURPOSE: provide cursor sensitive DSN and DSNAME recognition      **\n//*          allowing users to ZOOM into another dataset without      **\n//*          leaving their current edit session.                      **\n//*                                                                   **\n//* USAGE:   place cursor anywhere within a valid DSN or DSNAME       **\n//*          character and start ZOOM from the command line or a      **\n//*          pre-defined PFKey.  PFKey use is recommended to minimize **\n//*          cursor repositioning.  If the cursor is left on the      **\n//*          line, the first data line displayed will be searched for **\n//*          a valid dsn.                                             **\n//*                                                                   **\n//* FEATURES: - DSN syntax checking with SYSDSN                       **\n//*           - Symbolic variable substitution                        **\n//*           - concatenation recognition with member search option   **\n//*           - automatic switch to browse mode if edit fails         **\n//*           - allows edit sessions to be stacked                    **\n//*           - allows modular addition of new functions              **\n//*                                                                    *\n//* INSTALL: Install by copying ZOOM to any concatenated SYSEXEC or    *\n//*          SYSPROC library. Copy ZOOMP to a concatenated ISPPLIB     *\n//*          library.                                                  *\n//*                                                                    *\n//*          For best results assign value \"ZOOM\" to a PF Key.         *\n//*                                                                    *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE671": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x07\\x0f\\x01\\x04\\x07\\x0f\\x10P\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-03-10T00:00:00", "modifydate": "2004-03-10T10:50:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT-465"}, "text": "//***FILE 671 is from Ed Pancoast and contains a useful edit macro  *   FILE 671\n//*           called ZOOM which allows you to retrieve a dataset    *   FILE 671\n//*           by placing a cursor on its name.  ZOOM originally     *   FILE 671\n//*           came from the TSO TIMES magazine from the Fall 1994   *   FILE 671\n//*           issue.                                                *   FILE 671\n//*                                                                 *   FILE 671\n//*           email:  edward.pancoast@mail.va.gov                   *   FILE 671\n//*                                                                 *   FILE 671\n//*    DESCRIPTION:                                                 *   FILE 671\n//*                                                                 *   FILE 671\n//*             Contains one edit macro \"ZOOM\" and associated       *   FILE 671\n//*             HELP file.  This edit macro was hand copied         *   FILE 671\n//*             from an article in the Fall 1994 TSO Times.         *   FILE 671\n//*                                                                 *   FILE 671\n//*    PURPOSE: provide cursor sensitive DSN and DSNAME             *   FILE 671\n//*             recognition allowing users to ZOOM into             *   FILE 671\n//*             another dataset without leaving their current       *   FILE 671\n//*             edit session.                                       *   FILE 671\n//*                                                                 *   FILE 671\n//*    USAGE:   place cursor anywhere within a valid DSN or         *   FILE 671\n//*             DSNAME character and start ZOOM from the            *   FILE 671\n//*             command line or a pre-defined PFKey.  PFKey         *   FILE 671\n//*             use is recommended to minimize cursor               *   FILE 671\n//*             repositioning.  If the cursor is left on the        *   FILE 671\n//*             line, the first data line displayed will be         *   FILE 671\n//*             searched for a valid dsn.                           *   FILE 671\n//*                                                                 *   FILE 671\n//*    FEATURES: - DSN syntax checking with SYSDSN                  *   FILE 671\n//*              - Symbolic variable substitution                   *   FILE 671\n//*              - concatenation recognition with member            *   FILE 671\n//*                search option                                    *   FILE 671\n//*              - automatic switch to browse mode if edit          *   FILE 671\n//*                fails                                            *   FILE 671\n//*              - allows edit sessions to be stacked               *   FILE 671\n//*              - allows modular addition of new functions         *   FILE 671\n//*                                                                 *   FILE 671\n//*    INSTALL: Install by copying ZOOM to any concatenated         *   FILE 671\n//*             SYSEXEC or SYSPROC library. Copy ZOOMP to a         *   FILE 671\n//*             concatenated ISPPLIB library.                       *   FILE 671\n//*                                                                 *   FILE 671\n//*             For best results assign value \"ZOOM\" to a PF        *   FILE 671\n//*             Key.                                                *   FILE 671\n//*                                                                 *   FILE 671\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZOOM": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x01\\x00\\x941\\x9f\\x01\\x04\\x07\\x0f\\x08\\x17\\x00\\xfe\\x00\\xf5\\x00\\x00\\xe3\\xf3\\xf1\\xf1\\xc5\\xd3\\xd7@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1994-11-15T00:00:00", "modifydate": "2004-03-10T08:17:01", "lines": 254, "newlines": 245, "modlines": 0, "user": "T311ELP"}, "text": "/* REXX */\n/*% NOCOMMENT - This statement removes all REXX comment lines\n       before the program is loaded into VLF storage.                 */\n/*executil ts*/\n/*                                                                    **\n**           Copied from TSO TIMES Fall 1994 edition                  **\n**                                                                    **\n**  PROGRAM: ZOOM                                                     **\n**                                                                    **\n**  AUTHOR:  John Bubenheim - Union Bank                              **\n**                                                                    **\n**  SYNTAX:  ZOOM - EDIT mode                                         **\n**           ZOOM B - Browse mode                                     **\n**                                                                    **\n**  PURPOSE: provide cursor sensitive DSN and DSNAME recognition      **\n**           allowing users to ZOOM into another dataset without      **\n**           leaving their current edit session.                      **\n**                                                                    **\n**  USAGE:   place cursor anywhere within a valid DSN or DSNAME       **\n**           character and start ZOOM from the command line or a      **\n**           pre-defined PFKey.  PFKey use is recommended to minimize **\n**           cursor repositioning.  If the cursor is left on the      **\n**           line, the first data line displayed will be searched for **\n**           a valid dsn.                                             **\n**                                                                    **\n**  FEATURES: - DSN syntax checking with SYSDSN                       **\n**            - Symbolic variable substitution                        **\n**            - concatenation recognition with member search option   **\n**            - automatic switch to browse mode if edit fails         **\n**            - allows edit sessions to be stacked                    **\n**            - allows modular addition of new functions              **\n**                                                                    **\n**                                                                    **\n**                                                                    */\nSETUP:\n/*            - set error and message controls                        **\n**            - establish edit macro environment                      **\n**            - set mode                                              **\n**                                                                    */\n\n  \"ISPEXEC CONTROL ERRORS RETURN\"\n  x = MSG(\"OFF\")\n  \"isredit macro (func)\"\n  IF TRANSLATE(SUBSTR(FUNC,1,1)) = \"?\" then\n    do\n    \"ISPExEC DISPLAY PANEL(ZOOMP)\"\n    exit\n    END\n  IF TRANSLATE(SUBSTR(FUNC,1,1)) = \"B\" then FUNC = \"BROWSE\"\n    else FUNC = \"EDIT\"\n\nCHECK_CURSOR_DATA:\n/*            - find and save current cursor location                 **\n**            - reposition cursor to data field if necessary          **\n**            - set data length and a list of valid DSN characters    **\n**            - determine if cursor is on valid DSN character         **\n**            - check if DSN or DSNAME and call appropriate routine   **\n**                                                                    */\n  \"isredit (LIN,COL) = CURSOR\"\n  olin = lin ; ocol = col\n  if col = 0 then\n    do\n      \"isredit find '.' .zcsr .zcsr\"\n      if rc = 4 then \"isredit cursor = .zcsr 1\"\n      \"isredit (lin,col) = cursor\"\n    end\n \"isredit (data) = line .zcsr\"\n  data = translate(data)\n  len = length(data)\n  val = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789.{()-+&\"\n  if verify(substr(data,col,1),val,\"N\") \\= 0 then\n    do\n       say \"*******************************************************\"\n       say \"Invalid cursor location.\"\n       say \"Cursor must be located on a valid dataset name or a\"\n       say \"valid dataset name must be on the first line displayed.\"\n       say \"*******************************************************\"\n       signal quit\n    end\n mem = \"\"\n If substr(data,1,2) = \"//\" & col < pos(\" DD \",data) then call ddname\n    else call dsname\nPROCESS_STACK:\n/*     - pull dsns from stack in FIFO order                           **\n**     - check for symbolics and take appropriate action              **\n**     - perform first level check using SYSDSN                       **\n**     - protect current stack from recursive edits                   **\n**     - check SYSDSN msg and decide whether to proceed               */\nDo Queued()\n  pull dsn\n  if pos(\"&\",dsn) \\= 0 & pos(\"&&\",dsn) = 0 then CALL SYMBOLIC\n  if mem \\= \"\" then dsn = dsn || \"(\" || mem || \")\"\n  msg = SYSDSN(\"'\"dsn\"'\")\n  \"NEWSTACK\"\n  if (msg = \"INVALID DATASET NAME, '\"dsn\"'\" & mem = \"\") |,\n     (msg = \"MEMBER NOT FOUND\" & mem = \"\") |,\n     (MSG = \"OK\") then interpret \"CALL\" func\n else say msg \"-\" dsn\n \"DELSTACK\"\n end\n\nQUIT:\n/*     - reset excluded lines                                         **\n**     - return cursor to original position                           **\n**     - exit from zoom                                               */\n  \"ISREDIT RESET\"\n  \"ISREDIT CURSOR = \"olin ocol\nEXIT\n\nDDNAME:\n/*     - this routine I designed for JCL DDNAME processing            **\n**     - set current DDNAME                                           **\n**     - determine total number of lines                              **\n**     - get new line of data if needed and parse it                  **\n**     - find all occurrences of DSN= and DSNAME= in current          **\n**       DDNAME, reposition cursor to first DSN position, and call    **\n**       DSNAME (do not process JCL comment statements)               **\n**     - if concatenation detected (more than one DSN queued)         **\n**       ask user if member search is desired                         **\n**     - return to original caller                                    */\n  ddn = substr(data,3,pos(\" \",data) - 3)\n  \"ISREDIT (LAST) = LINENUM .ZLAST\"\n  do n = 1 to (last - lin + 1) by 1\n    if n \\= 1 then \"isredit (data) = line\" lin + n - 1\n    parse var data v1 3 v2 v3 v4 v5\n    if v1 = \"//\" then\n       select\n         when substr(data,3,1) = \"*\" then nop\n         when substr(data,3,1) = \" \" | n = 1 then\n           do\n             if v2 \\= \"\" & v3 = \"DD\" then v2 = v4\n             if v2 = \"DD\" then v2 = v3\n             if pos(\"dsname=\",v2) \\= 0 then\n               do\n                 col = pos(\"dsname=\",data) + 7\n                 call DSNAME\n               end\n             if pos(\"DSN=\",v2) \\= o then\n               do\n                 col = pos(\"DSN=\",data) + 4\n                 call DSNAME\n               end\n             end\n           otherwise leave n\n         end\n       end\n   if queued() > 1 then\n     do\n       \"NEWSTACK\"\n       say \"DD STATEMENT '\"ddn\"' contains concatenated datasets.\"\n       say\n       say \"Please enter a name to begin a member search, or just\"\n       say \"press ENTER to\" func \"each dataset individually.\"\n       say\n       pull mem\n       \"DELSTACK\"\n     end\n  return\nDSNAME:\n/*     - find beginning/ending DSN characters by searching for        **\n         first invalid DSN character left and right of current        **\n         cursor location                                              **\n**     - extract the DSN from the data using above  beg/end           **\n**     - return to original caller                                    */\n  beg = verify(reverse(data),val,\"N\",(len - col + 1))\n  if beg = 0 then beg = 1; else beg = len - beg + 2\n  end = verify(data,val,\"n\",col) ; if end = 0 then end = len + 1\n  dsn = substr(data,beg,abs(end - beg))\n  queue dsn\nreturn\n\nSYMBOLIC:\n/*     - exclude all JCL statements                                   **\n**     - set pos1/pos2 to starting/ending symbolic positions          **\n**     - set sym variable stripping \"&\" and trailing \".\"              **\n**     - find next occurrence of sym (probably on EXEC for            **\n**       instream PROC)                                               **\n**     - if not found, check for first occurrence (probably           **\n**       on PROC statement)                                           **\n**     - if found set pos2/pos3 to start/end literal positions        **\n**     - if not found or more than one found ask user to supply       **\n**       the symbolic's literal value                                 **\n**     - strip leading and trailing single quotes                     **\n**     - replace DSN's symbolic variable with literal value           **\n**     - continue processing until all symbolics have been resolved   **\n**     - return to original caller                                    */\n  \"isredit exclude '//*' 1 all\"\n  do forever\n    pos1 = pos(\"&\",dsn)\n    if pos1 = 0 then leave\n    pos2 = pos(\".\",dsn,pos1)\n    if pos2 = 0 then pos2 = verify(dsn,\"()\",\"M\",pos1) - 1\n    if pos2 < 0 then pos2 = length(dsn)\n    sym = strip(substr(dsn,(pos1 + 1),(pos2 - pos1)),\"T\",\".\")\n    \"isredit find ' \"sym\"=' NEXT NX\"\n    if rc = 4 then \"isredit find ',\"sym\"=' NEXT NX\"\n    if rc = 4 then \"isredit find ' \"sym\"=' ALL  NX\"\n    if rc = 4 then \"isredit find ',\"sym\"=' ALL  NX\"\n    \"isredit (NUMFINDS) = FIND_COUNTS\"\n    if numfinds = 1 then\n      do\n        \"isredit (lin,col) = cursor\"\n        \"isredit (data) = line\" lin\n        pos3 = pos(\"=\",data,col) + 1\n        pos4 = verify(data,\", \",\"M\",pos3)\n        lit = substr(data,pos3,(pos4-pos3))\n      end\n    else\n      do\n        \"NEWSTACK\"\n        say\n        say \"WARNING: unable to determine the literal value for\"\n        say \"         symbolic variable '\"sym\"'\"\n        say \"         in dataset '\"dsn\"'\"\n        say\n        say \"Please enter a value (or null) to resume processing\"\n        say\n        pull lit\n        \"DELSTACK\"\n        lit = strip(lit,\"B\",\"'\")\n      end\n    lit = strip(lit,\"B\",\"'\")\n    dsn = insert(lit,delstr(dsn,pos1,(pos2 - pos1 + 1)),(pos1 -1))\n    \"isredit cursor = \" olin ocol\n  end\n  return\n\n  EDIT:\n/*     - edit the desired data set                                    **\n**     - return the appropriate message if edit fails                 **\n**     - attempt to browse the data set if severe error               **\n**     - return to original caller                                    */\n  \"ispexec edit dataset('\"dsn\"')\"\n  select\n    when rc = 14 then say dsn \"- data set or member in use\"\n    when rc = 16 then say dsn \"- no members in library\"\n    when rc = 20 then call BROWSE\n    otherwise NOP\n  end\nreturn\n\nBROWSE:\n/*     - browse the desired data set                                  **\n**     - return the appropriate message if browse fails               **\n**     - return to original caller                                    */\n  \"ispexec browse dataset('\"dsn\"')\"\n  select\n    when rc = 12 then say dsn \"- zero-length data\"\n    when rc = 14 then say dsn \"- member not found\"\n    when rc = 16 then say dsn \"- no members in library\"\n    when rc = 20 then say dsn \"- severe error\"\n    otherwise NOP\n  end\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZOOMP": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x00\\x942\\x0f\\x00\\x942\\x0f\\x10\\x14\\x00\\x15\\x00\\x13\\x00\\x00\\xd4\\xd5\\xe2\\xe2\\xc5\\xd3\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-11-16T00:00:00", "modifydate": "1994-11-16T10:14:34", "lines": 21, "newlines": 19, "modlines": 0, "user": "MNSSELP"}, "text": "%EDITMAC  ------------------ZOOM    MACRO ----------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+The%ZOOM+macro will (1) EDIT a DSN (either sequential or PDS member)\n+or; (2) BROWSE a DSN (sequential dataset or PDS member) when the optional\n+character \"B\" is placed after the command (i.e. ZOOM B).  The ZOOM command\n+can also be placed on a DDNAME concatenation and it will edit or browse each\n+DSN in succession.\n+\n+USE:\n+(A) Type%ZOOM+or %ZOOM B+on the COMMAND===> line and\n+(B) Place the cursor on any dataset name  or DDNAME\n+\n%COMMAND ===> (1) ZOOM or (2) ZOOM B  or (3) add ZOOM to a PFKey\n+//...............\n+//....................\n+//IN   DD    DISP=SHR,DSN=XXXXX.AAA  %<PLACE CURSOR ANYWHERE ON THE DDNAME>+\n+//     DD    DISP=SHR,DSN=XXXXX.BBB  %<  OR ANYWHERE ON AN INDIVIDUAL DSN>+\n+//...............\n+//....................\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT671/FILE671.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT671", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}