{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011243000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE111.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE111.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x03'", "DS1TRBAL": "b'\\xc0.'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xb7\\x00\\x08\\x00\\xb8\\x00\\x00\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MEMBERS WTOETPS1 AND WTOETPS2 ARE MODIFICATIONS OF THE COCA-COLA WTO\n  EXITS.  THESE EXITS WILL WRITE AN SMF RECORD FOR EACH MOUNT AND DISMOUNT\n  IN ADDITION TO THE DISPLAY OF WHERE A TAPE WAS IF IT WAS RECENTLY\n  MOUNTED.  MODIFICATIONS HAVE ALSO BEEN MADE TO CREATE A USER CVT WHICH\n  WAS NEEDED BY THE EXITS.\n\nMEMBER WTOTAPMT MAY BE USED TO WRITE AN SMF RECORD FOR EACH TAPE MOUNT\n  IF THE WTOETPS1 AND WTOETPS2 MODULES ARE NOT USED.\n\nMEMBER WTOERWAT IS A MODIFICATION OF THE COCA-COLA EXIT WHICH WILL\n  RESPOND 'WAIT' TO MESSAGE IEF238D AND WRITE AN SMF RECORD TO INDICATE\n  THE ALLOCATION RECOVERY CONDITION.\n\nMEMBER WTOTAPAL IS THE EXIT TO ONLY WRITE THE SMF RECORD FOR ALLOCATION\n  RECOVERY.\n\nMEMBERS LISTGDGC AND LISTGDGP ARE A PAIR OF PROGRAMS THAT COMPRISE\n  THE LISTGDG TSO COMMAND.  THIS COMMAND WILL LIST THE ATTRIBUTES OF\n  A GDG AND THE MOST RECENTLY CREATED GENERATIONS.  THE NUMBER OF\n  GENERATIONS RETAINED IN THE CATALOG MAY BE CHANGED UPON REQUEST.  NEW\n  GDG BASE ENTRIES MAY ALSO BE CREATED. THIS COMMAND WORKS WITH ICF\n  CATALOGS AND HAS SUPPORT FOR 3380 DISK AND 3480 CARTS.  THE COMMAND\n  IS IN TWO PARTS:  THE ALLOCATION PIECE WHICH IS WRITTEN IN ASSEMBLER;\n  AND THE LOGIC PIECE WRITTEN IN PL1.\n\nMEMBER IKJEFF10 IS A TSO SUBMIT EXIT\n  THIS EXIT WILL CONDITIONALLY CHECK THE JOB CARD SUBMITTED TO VERIFY\n  THAT THE JOBNAME STARTS WITH THE USERID OR FIRST N CHAR OF USERID.\n  THE EXECUTION CLASS, MSGCLASS, AND TIME PARAMETERS ARE ALSO\n  CONDITIONALLY CHECKED AND MAY BE MANDITORY AND/OR IN THE APPROPRIATE\n  TABLES.   A TIME PARAMETER MAY ALSO BE INSERTED BY THE EXIT.\n  ALL CHECKING IS BASED ON THE USERID AND THE PRIVILIGES ALLOWED THAT\n  USER IN THE UIDTABLE.\n  JOB CLASSES MAY HAVE FLAGS TO REQUIRE TIME PARAMETERS OR REQUIRE NOT\n  TO HAVE THEM. ALSO, THERE MAY BE MAX TIME AND DEFAULT TIME BY CLASS.\n  COMMAND AND CERTAIN JES 2 CONTROL CARDS WILL NOT BE ALLOWED IN THE\n  SUBMITTED JCL.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFF10": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//S40DA01S JOB (11613109,0402,1,1,,LONG,,,104),PURDY,CLASS=H,\n//            MSGCLASS=X\n//ASM     EXEC PGM=IEV90,\n//             PARM='NODECK,OBJ,LINECNT=99,BUFSIZE(MAX),RENT',\n//             REGION=4096K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nIKJEFF10 TITLE 'REVLON IKJEFF10 TSO SUBMIT EXIT - V1.2'\nIKJEFF10 CSECT\n         USING *,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n* REVLON IKJEFF10 TSO SUBMIT EXIT V1.2                                *\n*                                                                     *\n* THIS EXIT WILL CONDITIONALLY CHECK THE JOB CARD SUBMITTED TO VERIFY *\n* THAT THE JOBNAME STARTS WITH THE USERID OR FIRST N CHAR OF USERID.  *\n* THE EXECUTION CLASS, MSGCLASS, AND TIME PARAMETERS ARE ALSO         *\n* CONDITIONALLY CHECKED AND MAY BE MANDITORY AND/OR IN THE APPROPRIATE*\n* TABLES.  A TIME PARAMETER MAY ALSO BE INSERTED BY THE EXIT.         *\n* ALL CHECKING IS BASED ON THE USERID AND THE PRIVILIGES ALLOWED THAT *\n* USER IN THE UIDTABLE.                                               *\n*                                                                     *\n* JOB CLASSES MAY HAVE FLAGS TO REQUIRE TIME PARAMETERS OR REQUIRE NOT*\n* TO HAVE THEM. ALSO, THERE MAY BE MAX TIME AND DEFAULT TIME BY CLASS.*\n*                                                                     *\n* COMMAND AND CERTAIN JES 2 CONTROL CARDS WILL NOT BE ALLOWED IN THE  *\n* SUBMITTED JCL.                                                      *\n*                                                                     *\n* THE SCHEME IS TO TURN ON BITS IN FLAG BYTES WHEN WE FIND SOMETHING  *\n* AND SAVE THE INFO, THEN CHECK THE FLAGS AND INFO AFTER WE HAVE      *\n* THE ENTIRE JOB CARD.  THE CHECKING SECTION WILL THEN TURN ON FLAGS  *\n* TO ABORT AND SEND MESSAGES.  THE WRAPUP SECTION WILL DO THE MESSAGE *\n* SENDING AND AS EACH MESSAGE IS SENT, TURN OFF THE FLAG THAT CAUSED  *\n* THE MESSAGE TO BE SENT.  WHEN ALL FLAGS ARE OFF, THE WRAPUP CODE    *\n* WILL EITHER ALLOW THE SUBMIT TO COMPLETE OR WILL ABORT THE SUBMIT.  *\n*                                                                     *\n* THIS EXIT MUST BE LINKEDITED WITH THE NAME IKJEFF10 INTO            *\n* SYS1.LINKLIB WITH THE ATTRIBUTES OF REUSABLE, REENTRANT AND         *\n* REFRESHABLE.                                                        *\n*                                                                     *\n* SEE GC28-0629 - TSO SPL - FOR FURTHER DETAILS ON SUBMIT EXIT.       *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3    ---  BASE REG\nR4       EQU   4    ===> INPUT PARM\nR5       EQU   5    ===> GOTTEN WORK AREA\nR6       EQU   6    ===> CURRENT STATEMENT\nR7       EQU   7\nR8       EQU   8    ===> USERID RULE TABLE\nR9       EQU   9    ===> MESSAGE AREA\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13   ===> GOTTEN REG SAVE AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************************************************\n*                                                                    *\n*        SETUP AND SEE WHY WE WERE CALLED                            *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n         SAVE  (14,12),,REVLON.IKJEFF10.V1.1.&SYSDATE..&SYSTIME\n         LR    R3,R15\n         SPACE\n         DROP  R15\n         USING IKJEFF10,R3\n         SPACE\n         L     R4,0(R1)      LOAD POINTER TO PASSED PARM LIST\n         USING IEDSECTD,R4   ESTABLISH ADDRESSABILITY TO PARM LIST\n         SPACE\n         GETMAIN R,LV=AREAREGS GET AREA FOR REGISTER SAVE\n         SPACE\n         LR    R10,R1        SAVE POINTER TO GOTTEN AREA\n         MVI   0(R10),X'00'  CLEAR GOTTEN AREA\n         MVC   1(AREAREGS-1,R10),0(R10)\n         ST    R13,4(R10)    EXCHANGE THE REGISTER SAVE AREA\n         ST    R10,8(R13)    POINTERS TRICK\n         LR    R13,R10\n         SPACE\n         L     R5,IEEXITWD   LOAD EXIT WORD FROM PARM LIST\n         LTR   R5,R5         CHECK FOR FIRST TIME IN EXIT\n         BNZ   AFTERSET      ... MUST HAVE BEEN HERE BEFORE\n         SPACE\nSETUP    GETMAIN R,LV=AREAWORK GET AREA FOR EXIT WORK - FIRST TIME ONLY\n         SPACE\n         USING WORKAREA,R5   ESTABLISH ADDRESSABILITY TO WORK AREA\n         LR    R5,R1         SAVE POINTER TO GOTTEN AREA\n         ST    R5,IEEXITWD   SAVE POINTER IN EXIT WORD IN PARM LIST\n         MVI   0(R5),X'00'   CLEAR GOTTEN AREA\n         MVC   1(255,R5),0(R5)\n         MVC   257(AREAWORK-257,R5),256(R5)\n         SPACE\n         USING IESUBCTD,R7   ESTABLISH ADDRESSABILITY TO FLAG DSECT\nAFTERSET L     R6,IECARDP    LOAD POINTER TO CURRENT STATEMENT\n         L     R7,IESUBCTP   LOAD FLAGS POINTER\n         OI    IETAKEEX,IETJOB+IETJES+IETCMD TURN ON EXIT FOR CMDS+JOB\n         SPACE\n         LTR   R6,R6         SEE IF READY TO INSERT CARD\n         BZ    DOINSERT      GO INSERT NEW CARD\n         SPACE\n         L     R9,IEMSGP     LOAD POINTER TO MESSAGE AREA\n         LA    R10,MESSAGE   LOAD ADDRESS OF MESSAGE AREA\n         CR    R9,R10        SEE IF MESSAGE WAS SENT BY THIS EXIT\n         BE    WRAPUP        ... YES WE ARE SENDING MESSAGES-GO FINISH\n         SPACE\n         TM    IESTMTP2,IESCOMNT SEE IF INVALIDLY CALLED FOR COMMENT\n         BO    RETURN0       THIS EXIT ONLY VALIDATES JOBCARD INFO\n         TM    IESTMTYP,IESCMD  VERIFY EXIT CALLED FOR COMMAND\n         BO    COMMAND       GO CHECK WHAT THIS JOB SHOULDNT DO\n         TM    IESTMTP2,IESJES  VERIFY EXIT CALLED FOR JES CNTL\n         BO    JESCTL        GO CHECK WHAT THIS JOB SHOULDNT DO\n         TM    IESTMTYP,IESJOB  VERIFY EXIT CALLED FOR JOB CARD\n         BNO   RETURN0       THIS EXIT ONLY VALIDATES JOBCARD INFO\n         EJECT\n**********************************************************************\n*                                                                    *\n*        SETUP TO SCAN JOBCARD                                       *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*        NOW WE MUST BE HERE TO VALIDATE A JOBCARD\n         SPACE\n         TM    IESTMTYP,IESCONTN SEE IF CONTINUATION OF JOB CARD\n         BO    JOBCARD2      ... MUST HAVE BEEN HERE BEFORE\n         DROP  R7            DROP ADDRESSABILITY TO FLAG DSECT\n         SPACE 2\n*        SETUP THE FIRST CARD OF A JOBCARD SEQUENCE\n         SPACE\nJOBCARD1 MVC   JOBNAM,2(R6)  SAVE JOBNAME\n         OI    FLAGFND,FLJOBNAM FLAG THAT WE FOUND PARM\n         LA    R1,71         LOAD LENGTH TO SCAN = CARD-SEQ-CONT\n         MVI   SCANCHR,C')'  NOTE SCAN ARGUMENT\n         BAL   R14,SCAN      GO LOOK FOR END OF ACCOUNTING INFO\n         B     SCANCRD       GO TO BASIC KEYWORD SCAN\n         SPACE\n*        SETUP THE SECOND AND SUBSEQUENT CARDS OF A JOBCARD SEQUENCE\n         SPACE\nJOBCARD2 LA    R1,69         LOAD LENGTH TO SCAN = CARD-SEQ-CONT-//\n         LA    R6,2(R6)      INCR PAST //\n         BAL   R14,SCANNB    GO SCAN FOR FIRST NON BLANK\n         EJECT\n**********************************************************************\n*                                                                    *\n*        SCAN THE JOBCARD FOR INTERESTING KEYWORDS                   *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nSCANCRD  CLC   0(2,R6),=C', ' SEE IF AT END OF CARD WITH CONTINUATION\n         BE    RETURN0       BUY THIS ONE\n         CLI   0(R6),C''''   LOOK FOR QUOTE\n         BE    QUOTE         GO PROCESS AND SCAN TO AFTER NEXT QUOTE\n         CLI   0(R6),C' '    SEE IF AT END OF CARD\n         BE    ENDCARD\n         CLC   0(9,R6),=C'MSGCLASS='   FIND THE KEYWORDS WE ARE\n         BE    RMSGCLS                 INTERESTED IN AND GO TO\n         CLC   0(6,R6),=C'CLASS='      THE APPORPRIATE ROUTINES\n         BE    RXEQCLS                 TO GET THE INFO TO MAKE\n         CLC   0(5,R6),=C'TIME='       THE FINAL DECISION WITH\n         BE    RCPUTIM\n         LA    R6,1(R6)      INCR TO NEXT POSITION ON CURRENT CARD\n         BCT   R1,SCANCRD    ONLY SCAN TO CONTINUATION POSITION\n         SPACE\n         CLI   0(R6),C','    SEE IF COMMA AS CONTINUATION IN 71\n         BE    RETURN0       BUY THIS ONE\n         B     ERR           THIS JOB IS IN TROUBLE NOW\n         SPACE\n*        SCAN FOR THE \"SCANCHR\"\n         SPACE\nSCAN     CLC   SCANCHR,0(R6) LOOK FOR SCAN ARGUMENT\n         BER   R14           RETURN FROM WHENCE WE CAME\n         LA    R6,1(R6)      INCR TO NEXT CHAR\n         BCT   R1,SCAN       ONLY LOOK SO FAR\n         B     ERR           WE HAVE NO SENSE OF HUMOR\n         SPACE\n*        SCAN FOR THE FIRST NONBLANK POSITION\n         SPACE\nSCANNB   CLI   0(R6),C' '    LOOK FOR NON BLANK SCAN ARGUMENT\n         BNER  R14           RETURN FROM WHENCE WE CAME\n         LA    R6,1(R6)      INCR TO NEXT CHAR\n         BCT   R1,SCANNB     ONLY LOOK TO END OF CARD IMAGE\n         B     ERR           CANT HAVE A // WITH NOTHING AFTER IT\n         SPACE\n*        SCAN FOR THE NEXT QUOTE MARK\n         SPACE\nQUOTE    LA    R6,1(R6)      INCR TO NEXT POSITION AFTER FIRST QUOTE\n         BCTR  R1,0          COUNT THIS CHAR\n         MVI   SCANCHR,C'''' NOTE SCAN ARGUMENT AS QUOTE\n         BAL   R14,SCAN      GO FIND NEXT QUOTE\n         LA    R6,1(R6)      INCR TO NEXT POSITION AFTER SECOND QUOTE\n         BCTR  R1,0          COUNT THIS CHAR\n         B     SCANCRD       GO BACK TO MAIN SCAN FOR MORE KEYWORDS\n         SPACE\n*        PROCESS THE MESSAGE CLASS\n         SPACE\nRMSGCLS  MVC   MSGCLS,9(R6)  SAVE MSGCLASS PARM\n         OI    FLAGFND,FLMSGCLS FLAG THAT WE FOUND PARM\n         LA    R6,10(R6)     INCR TO NEXT PARM\n         S     R1,=F'10'     COUNT THE CHARS IN THE KEYWORD+1\n         B     SCANCRD       GO BACK TO MAIN SCAN FOR MORE KEYWORDS\n         SPACE\n*        PROCESS THE EXECUTION CLASS\n         SPACE\nRXEQCLS  MVC   XEQCLS,6(R6)  SAVE EXECUTION CLASS\n         OI    FLAGFND,FLXEQCLS FLAG THAT WE FOUND PARM\n         LA    R6,7(R6)      INCR TO NEXT PARM\n         S     R1,=F'7'      COUNT THE CHARS IN THE KEYWORD+1\n         B     SCANCRD       GO BACK TO MAIN SCAN FOR MORE KEYWORDS\n         SPACE\n*        PROCESS THE TIME PARAMETER\n         SPACE\nRCPUTIM  MVC   CPUTIM,5(R6)  SAVE TIME PARAMETER\n         OI    FLAGFND,FLCPUTIM FLAG THAT WE FOUND PARM\n         LA    R6,6(R6)      INCR TO NEXT PARM\n         S     R1,=F'6'      COUNT THE CHARS IN THE KEYWORD+1\n         B     SCANCRD       GO BACK TO MAIN SCAN FOR MORE KEYWORDS\n         EJECT\n**********************************************************************\n*                                                                    *\n*        JOBCARD HAS BEEN SCANNED AND PARSED - PROCESS DATA          *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*        SETUP TO FIND THE USERID OR PREFIX OF USERID IN TABLE\n         SPACE\nENDCARD  L     R8,IEUSRIDP   LOAD POINTER TO USERID\n         L     R15,=A(UIDTAB) LOAD ADDRESS OF UIDTABLE\n         USING UIDDSECT,R15  ESTABLISH ADDRESSABILITY TO UIDTABLE\n         SPACE\n*        FIND THE USERID OR PREFIX OF USERID IN TABLE\n         SPACE\nUIDSRCH  SR    R14,R14       CLEAR REG 14 FOR EXEC INSTRUCTION\n         CLI   0(R15),C' '   LOOK FOR END OF TABLE\n         BE    DEFAULT       DEFAULT GETS BLANK ENTRIES\n         SPACE\nUIDSRCH1 LA    R9,0(R14,R8)  POINT TO ONE CHAR OF USERID\n         LA    R10,0(R14,R15) POINT TO CORRESPONDING CHAR IN UIDTAB\n         CLI   0(R10),C'*'   SEE IF THIS CHAR IS TO BE COMPARED\n         BE    UIDSRCH2      ... NOT TO BE COMPARED\n         CLI   0(R10),C' '   SEE IF AT END OF STRING OF CHAR\n         BE    UIDFOUND      ... YES - NO MORE CHAR TO CHECK\n         CLC   0(1,R10),0(R9) COMPARE THE CORRESPONDING CHAR\n         BNE   UIDSRCH3      ... CHAR DONT MATCH - GO TO NEXT ENTRY\n         SPACE\nUIDSRCH2 LA    R14,1(R14)    MAKE INDEX TO NEXT CHARACTER\n         C     R14,=F'7'     SEE IF WE HAVE CHECKED ALL CHAR\n         BE    UIDFOUND      ... YES ALL 7 CHAR HAVE BEEN CHECKED\n         B     UIDSRCH1      GO CHECK NEXT CHAR\n         SPACE\nUIDSRCH3 LA    R15,UIDELEN(R15) INDEX TO NEXT TABLE ENTRY\n         B     UIDSRCH\n         EJECT\n**********************************************************************\n*                                                                    *\n*        PROCESS JOBNAME                                             *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*              R15 POINTS TO UID ENTRY\n*              R14 HAS LENGTH OF PREFIX\n         SPACE\n*        COMPARE THE JOBNAME TO THE USERID OR PREFIX OF USERID\n         SPACE\nDEFAULT  EQU   *\n         LA    R14,7         DEFAULT - JOBNAME = USERID + CHAR\n         SPACE\nUIDFOUND BCTR  R14,0         DECREMENT LENGTH WHEN PREFIX FOUND\n         CLI   JOBN,C'N'     SEE IF ANY JOBNAME COMPARE\n         BE    JOBCMPR1      THIS ONE CAN SUBMIT ANYTHING\n         CLI   JOBN,C'P'     SEE IF PREFIX ONLY COMPARE\n         BE    JOBCMPR       JOBNAM MUST START WITH FIRST N CHAR OF UID\n         LA    R14,6         DEFAULT - JOBNAME = USERID + CHAR\nJOBCMPR  EX    R14,JOBNCMPR  EXEC COMPARE INST\n         BE    JOBCMPR1      ... OK WE WONT ABORT THE SUBMIT FOR JOBNAM\n         OI    FLAGABR,FLJOBNAM  FLAG THAT WE WILL ABORT\n         B     JOBCMPR2      GO DETERMINE WHAT KIND OF MESSAGE TO SEND\n         SPACE\nJOBNCMPR CLC   JOBNAM(1),0(R8) EXECUTED COMPARE\n         SPACE\nJOBCMPR1 CLC   JOBNAM(7),0(R8) SEE IF JOBNAME = USERID + CHAR\n         BE    XCLS            ... GOOD - NO MESSAGE NEEDED FOR NAME\n         SPACE\nJOBCMPR2 OI    FLAGMSG,FLJOBNAM  FLAG TO SEND MESSAGE\n         C     R14,=F'6'       SEE IF WHOLE JOBNAME USED\n         BE    XCLS            MUST HAVE BEEN HIS USERID\n         MVC   UIDPFX,UID      SAVE PREFIX TO SEND IN MESSAGE\n         OI    FLAGMSG,FLJOBPRF  FLAG TO SEND PREFIX MESSAGE\n         EJECT\n**********************************************************************\n*                                                                    *\n*        PROCESS EXECUTION CLASS                                     *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*        COMPARE THE EXECUTION CLASS TO THE ALLOWABLE CLASSES\n         SPACE\nXCLS     CLI   XEQCLSI,C'*'  SEE IF EXECUTION CLASS IS NOT REQUIRED\n         BE    XEQCLSOK      IF NOT REQUIRED - DONT CHECK AT ALL\n         L     R14,=A(CLSTAB) POINT TO EXECUTION CLASS TABLE\n         SPACE\nXCLS1    CLC   XEQCLSI,0(R14) LOOK FOR CLASS TABLE ENTRY\n         BE    XCLS2         ... FOUND ENTRY IN CLASS TABLE\n         LA    R14,38(R14)   INCR TO NEXT ENTRY\n         B     XCLS1         ... KEEP LOOKING\n         SPACE\nXCLS2    ST    R14,UIDXEQCP  SAVE POINTER TO TABLE FOR POSSIBLE MESSAGE\n         TM    FLAGFND,FLXEQCLS  MAKE SURE EXECUTION CLASS IS THERE\n         BNO   XCLS4         ... NO ENTRY - BOMB THIS ONE OUT\n         SPACE\nXCLS3    LA    R14,1(R14)    POINT TO REAL TABLE\n         CLI   0(R14),C' '   NO REAL CLASS ENTRY\n         BE    XCLS4         ... GO BOMB THIS JOB OUT\n         CLC   XEQCLS,0(R14) SEE IF EXECUTION CLASS IS IN TABLE\n         BE    XEQCLSOK      ... YES ITS OK\n         B     XCLS3         GO LOOK SOME MORE\n         SPACE\nXCLS4    OI    FLAGABR,FLXEQCLS FLAG THE ERROR FOR ABORT\n         OI    FLAGMSG,FLXEQCLS FLAG THE ERROR FOR MESSAGE\n         OI    FLAGMS1,FLXEQCLS FLAG THE ERROR FOR MESSAGE\n         EJECT\n**********************************************************************\n*                                                                    *\n*        PROCESS MESSAGE CLASS                                       *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nXEQCLSOK EQU   *\n         SPACE\n*        COMPARE THE MESSAGE CLASS TO THE ALLOWABLE CLASSES\n         SPACE\nMCLS     CLI   MSGCLSI,C'*'  SEE IF MSGCLASS IS NOT REQUIRED\n         BE    MSGCLSOK      IF NOT REQUIRED - DONT CHECK AT ALL\n         L     R14,=A(MSGTAB) POINT TO MSGCLASS TABLE\n         SPACE\nMCLS1    CLC   MSGCLSI,0(R14) LOOK FOR CLASS TABLE ENTRY\n         BE    MCLS2         ... FOUND ENTRY IN CLASS TABLE\n         LA    R14,38(R14)   INCR TO NEXT ENTRY\n         B     MCLS1         ... KEEP LOOKING\n         SPACE\nMCLS2    ST    R14,UIDMSGCP  SAVE POINTER TO TABLE FOR POSSIBLE MESSAGE\n         TM    FLAGFND,FLMSGCLS  MAKE SURE MSGCLASS IS THERE\n         BNO   MCLS4         ... NO ENTRY - BOMB THIS ONE OUT\n         SPACE\nMCLS3    LA    R14,1(R14)    POINT TO REAL TABLE\n         CLI   0(R14),C' '   NO REAL CLASS ENTRY\n         BE    MCLS4         ... GO BOMB THIS JOB OUT\n         CLC   MSGCLS,0(R14) SEE IF EXECUTION CLASS IS IN TABLE\n         BE    MSGCLSOK      ... YES ITS OK\n         B     MCLS3         GO LOOK SOME MORE\n         SPACE\nMCLS4    OI    FLAGABR,FLMSGCLS FLAG THE ERROR FOR ABORT\n         OI    FLAGMSG,FLMSGCLS FLAG THE ERROR FOR MESSAGE\n         OI    FLAGMS1,FLMSGCLS FLAG THE ERROR FOR MESSAGE\n         SPACE\nMSGCLSOK EQU   *\n         EJECT\n**********************************************************************\n*                                                                    *\n*        PROCESS CPU TIME PARAMETER - IF SPECIFIED                   *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*        COMPARE THE CPU TIME PARAMETER AND:\n*          1) DENY SUBMISSION IF THE EXECUTION CLASS DOES NOT ALLOW\n*             A TIME PARAMETER AND THE USER SPECIFIES ONE.\n*          2) DENY SUBMISSION IF THE EXECUTION CLASS REQUIRES A TIME\n*             PARAMETER AND THE USER DID NOT SPECIFY ONE.\n*          3) INSERT A TIME PARAMETER IF THE CLASS REQUIRES ONE\n*             AND THE USER DIDNT SPECIFY ONE\n*          4) CHECK FOR USER SPECIFIED TIME GREATER THAN MAX TIME\n*             FOR THE CLASS\n         SPACE\nCTIM     L     R14,=A(TIMTAB) POINT TO TIME PARM TABLE\n         SPACE\nCTIM1    CLI   0(R14),C' '   MAKE SURE TABLE ENTRY IS VALID\n         BE    CTIM8         ... NOT VALID - GO FLAG AND ABORT\n         CLC   XEQCLS,0(R14) LOOK FOR THE EXECUTION CLASS IN TABLE\n         BE    CTIM2         ... OK GO PROCESS\n         LA    R14,6(R14)    INCR TO NEXT ENTRY\n         B     CTIM1         ... KEEP LOOKING\n         SPACE\nCTIM2    CLI   1(R14),C'N'   SEE IF MANDITORY TO NOT HAVE TIME SPEC\n         BNE   CTIM3\n         TM    FLAGFND,FLCPUTIM SEE IF SPECIFIED\n         BO    CTIM6         IF NOT SUPPOSED TO HAVE TIME AND DOES ...\n         B     CTIM5         ... GOOD - NOT SUPPOSED TO AND DOESNT\n         SPACE\nCTIM3    CLI   1(R14),C'Y'   SEE IF MANDITORY TO HAVE TIME SPEC\n         BNE   CTIM4         ... GO SEE IF TIME IS OPTIONAL\n         TM    FLAGFND,FLCPUTIM SEE IF SPECIFIED\n         BNO   CTIM6         ... ITS MANDITORY AND DOESNT - BOMB\n         B     CTIM9         ... GOOD SUPPOSED TO AND DOES HAVE IT\n         SPACE\nCTIM4    CLI   1(R14),C'O'   SEE IF OPTIONAL TO HAVE TIME\n         BNE   WRAPUP        ... NOTHING MORE TO DO HERE - LETS FINISH\n         TM    FLAGFND,FLCPUTIM SEE IF SPECIFIED\n         BO    CTIM9         IF OPTIONAL AND SPECIFIED THEN OK\n         SPACE\nCTIM5    LH    R1,2(R14)     SEE IF TIME IN TABLE TO USE AS INSERT\n         LTR   R1,R1\n         BZ    WRAPUP        ... NOTHING TO INSERT - GET OUT NOW\n         BAL   R15,CTIMD1    GO FORMAT TIME\n         L     R2,IECARDP    GET START OF CARD IMAGE\n         LR    R1,R6         GET ADDRESS OF LOCATION TO INSERT COMMA\n         SR    R1,R2         SEE WHERE WE MIGHT WANT TO INSERT COMMA\n         C     R1,=F'71'     SEE IF THERE IS ROOM FOR THE COMMA\n         BNL   CTIM7         CANT INSERT COMMA IN CC 72\n         MVI   0(R6),C','    PUT IN COMMA FOR CONTINUATION ON JOB CARD\n         MVC   TIMECARD,TIMESKEL  SET UP CARD TO INSERT\n         MVC   TIMECARD+17(8),CPUTIMAX GET TIME TO USE\n         B     RETURN4       GO TO ACCEPT THIS MODIFIED CARD\n         SPACE\nCTIM6    OI    FLAGABR,FLCPUTIM FLAG REASON FOR ABORT\n         OI    FLAGMSG,FLCPUTIM FLAG MESSAGE\n         B     WRAPUP        NOW GO TELL THE SUCKER OF HIS PLIGHT\n         SPACE\nCTIM7    OI    FLAGABR,FLCPUTIN FLAG REASON FOR ABORT\n         OI    FLAGMSG,FLCPUTIN FLAG MESSAGE\n         B     WRAPUP        NOW GO TELL THE SUCKER OF HIS PLIGHT\n         SPACE\nCTIM8    OI    FLAGABR,FLXEQCLS FLAG THE ERROR FOR ABORT\n         OI    FLAGMSG,FLXEQCLS FLAG THE ERROR FOR MESSAGE\n         B     WRAPUP        WHY LET THIS CONTINUE\n         SPACE 1\nCTIM9    LH    R1,4(R14)     LOAD MAX TIME\n         LTR   R1,R1         SEE IF SPECIFIED / NON ZERO\n         BZ    WRAPUP        GO WRAPUP IF NOTHING TO DO\n         LA    R1,CPUTIM     GET ADDR OF TIME PARM\n         LR    R10,R1        POINT R10 AT START OF TIME TOO\n         XC    TIMEFLG,TIMEFLG CLEAR OUT THE FLAGS\n         SR    R11,R11       AND ZERO OUT R11 TOO\n         SPACE 1\nCTIM10   CLI   0(R10),C'('   CHECK FOR START OF PARM IN PARENDS\n         BE    CTIM11\n         CLI   0(R10),C')'   CHECK FOR END OF PARM IN PARENDS\n         BE    CTIM14\n         CLI   0(R10),C' '   CHECK FOR END OF PARM\n         BE    CTIM14\n         CLI   0(R10),C','   CHECK FOR END OF PARM OR END OF INNER\n         BE    CTIM12\n         CLI   0(R10),C'0'   CHECK FOR VALID NUMERIC\n         BL    CTIM6\n         CLI   0(R10),C'9'   CHECK FOR VALID NUMERIC\n         BH    CTIM6\n         LA    R10,1(R10)    INCR TO NEXT POSITION\n         B     CTIM10        GO LOOK AT NEXT PLACE\n         EJECT\nCTIM11   OI    TIMEFLG,TIMEFLGO INDICATE OPENING PAREND\n         B     CTIM13        GO TO INCREMENT OVER PAREND\n         SPACE\nCTIM12   TM    TIMEFLG,TIMEFLGO SEE IF THERE WAS AN OPENING PAREND\n         BNO   CTIM14        GO PROCESS COMMA AS END OF PARM\n         CR    R1,R10        SEE IF ANY DATA TO WORK WITH\n         BNE   CTIM15        GO PROCESS THE DATA\n         OI    TIMEFLG,TIMEFLGS SET FLAGS FOR SECONDS COMING NEXT\n         SPACE 1\nCTIM13   LA    R10,1(R10)    INCR TO NEXT POSITION\n         LR    R1,R10        SAVE START OF PARM IN R1 TOO\n         B     CTIM10        GO LOOK FOR NEXT REAL PARM\n         SPACE 1\nCTIM14   OI    TIMEFLG,TIMEFLGE FLAG END OF PARM\n         CR    R1,R10        SEE IF ANY DATA TO WORK WITH\n         BE    CTIM6         ERROR IF NO DIGITS AT ALL\n         SPACE 1\nCTIM15   SR    R10,R1        GET NUMBER OF DIGITS TO WORK WITH\n         BCTR  R10,0         DECREASE THE NUMBER BY 1 FOR EX INSTR.\n         EX    R10,CTIMPACK  EXEC PACK INSTRUCTION\n         TM    TIMEFLG,TIMEFLGS SEE IF WORKING WITH SECONDS\n         BO    CTIM16        GO ADD IN SECONDS\n         CVB   R11,DWWORK    FIRST MAKE IT BINARY IN REG11\n         MH    R11,=H'60'    NOW MAKE MINUTES INTO SECONDS\n         TM    TIMEFLG,TIMEFLGE SEE IF AT END OF PARM\n         BO    CTIM17        GO SEE IF TOO BIG\n         LA    R10,1(R10,R1) RESTORE PREVIOUS VALUE TO R10\n         OI    TIMEFLG,TIMEFLGS SET FLAGS FOR SECONDS COMING NEXT\n         B     CTIM13\n         SPACE 1\nCTIM16   CVB   R12,DWWORK    CONVERT TO BINARY\n         AR    R11,R12       ADD SECONDS TO SECONDS FROM MINUTES\n         SPACE 1\nCTIM17   LH    R1,4(R14)     LOAD MAX CPU TIME VALUE FROM TABLE\n         CR    R11,R1        SEE IF SPECIFIED VALUE IS TOO BIG\n         BNH   WRAPUP        OK .. GO LET IT HAPPEN\n         OI    FLAGMS1,FLCPUTIM FLAG FOR CPU TIME ERR\n         BAL   R15,CTIMD1    GO EDIT THE MAX VALUE FOR MESSAGE\n         B     CTIM6         GO MAKE SURE THIS ONE DOESNT HAPPEN\n         SPACE 1\nCTIMPACK PACK  DWWORK,0(1,R1) PACK DIGITS INTO WORK AREA\n         SPACE 2\n*        MAKE HALFWORD VALUE INTO PRINTABLE MINUTES AND SECONDS\n         SPACE 1\nCTIMD1   ST    R15,R15D1     SAVE RETURN ADDRESS\n         LR    R11,R1        LOAD VALUE TO DECODE INOT R11\n         SR    R10,R10       CLEAR EVEN REG OF 10-11 PAIR\n         D     R10,=F'60'    MAKE THE  SECONDS INTO MINUTES AND SECS\n         MVI   CPUTIMAX,C' ' BLANK OUT THE FIELD\n         MVC   CPUTIMAX+1(7),CPUTIMAX\n         MVI   CPUTIMAX,C'(' ALWAYS START WITH PAREND\n         LA    R12,CPUTIMAX+1 POINT TO THE OUTPUT FIELD\n         BAL   R15,CTIME1    GO EDIT THE VALUE IN R11\n         LTR   R10,R10       SEE IF ANY SECONDS TO EDIT\n         BZ    CTIMD2        ..  NO ... GO INSERT ENDING PAREND\n         MVI   0(R12),C','   NOW PUT IN THE COMMA\n         LA    R12,1(R12)    INCR TO THE NEXT OUTPUT POSITION\n         LR    R11,R10       PICK UP THE SECONDS\n         BAL   R15,CTIME1    NOW EDIT THE SECONDS\nCTIMD2   MVI   0(R12),C')'   PUT IN THE ENDING PAREND\n         L     R15,R15D1 RESTORE THE RETURN ADDRESS\n         BR    R15           GO BACK TO THE CALLER\n         SPACE 2\n*        THE REAL TIME EDIT\n         SPACE 1\nCTIME1   CVD   R11,DWWORK    CONVERT THE VALUE TO DECIMAL\n         MVC   EDWORK,=X'4020202020202020' MOVE IN THE EDIT MASK\n         ED    EDWORK,DWWORK+4 EDIT THE TIME\n         LA    R11,EDWORK+1  POINT AT THE FIRST REAL PLACE IN THE TIME\n         LA    R1,7          CREATE THE NUMBER OF POSSIBLE DIGITS\nCTIME2   CLI   0(R11),C' '   SEE IF THE POSITION IS BLANK\n         BE    CTIME3        DONT MOVE BLANKS\n         MVC   0(1,R12),0(R11) MOVE ONE CHARACTER\n         LA    R12,1(R12)    INCR TO NEXT OUTPUT POSITION\nCTIME3   LA    R11,1(R11)    INCR TO NEXT INPUT POSITION\n         BCT   R1,CTIME2     GO BACK AND TRY NEXT SPOT\n         BR    R15           RETURN TO CALLER\n         SPACE 2\n*        HANDLE JOBCARDS THAT ARE TOO LONG\n         SPACE\nERR      OI    FLAGABR,FLJERRIC  JOB CARD ERROR > 72 BYTES\n         OI    FLAGMSG,FLJERRIC\n         B     WRAPUP20      GO TO SEND MESSAGE ABOUT THIS THING\n         EJECT\n**********************************************************************\n*                                                                    *\n*        HANDLE JES2 OR SYSTEM CONTROL CARDS                         *\n*                                                                    *\n**********************************************************************\n         SPACE\nJESCTL   EQU   *\n         CLI   2(R6),C'$'    SEE IF JES COMMAND   \"/*$\" NO-NO\n         BE    BADCMND       GO TURN ON THE NASTYGRAM FLAGS\n         CLI   2(R6),C'P'    SEE IF PRIORITY CARD \"/*PRIORITY\"\n         BE    BADCMND       GO TURN ON THE NASTYGRAM FLAGS\n         B     RETURN0       LET THIS JES CARD SLIP THROUGH\n         SPACE\nCOMMAND  LA    R1,71         LOAD LENGTH TO SCAN\n         MVI   SCANCHR,C' '  NOTE SCAN ARGUMENT - FIRST BLANK\n         BAL   R14,SCAN      GO SCAN FOR FIRST BLANK\n         BAL   R14,SCANNB    NOW SCAN FOR FIRST NONBLANK\n         L     R14,=A(OPERCMDS)  SET UP TO LOOK FOR OPER CMDS\nCOMMAND1 SR    R15,R15       CLEAR REG 15 FOR INSERT CHAR\n         IC    R15,0(R14)    GET LENGTH OF COMMAND\n         LTR   R15,R15       SEE IF AT END OF TABLE\n         BZ    RETURN0       ... NOT COMMAND ... LET IT GO\n         EX    R15,CMNDCHEK  IS THIS IN TABLE\n         BE    BADCMND       ... YES ... PUT A NOOSE ON IT AND PULL\n         LA    R14,10(R14)   INCR TO NEXT ENTRY IN TABLE\n         B     COMMAND1\n         SPACE\nCMNDCHEK CLC   0(1,R6),1(R14)  COMPARE WORD ON JCL TO COMMAND TABLE\n         SPACE\nBADCMND  OI    FLAGABR,FLINVCMD  INVALID CONTROL CARD DETECTED\n         OI    FLAGMSG,FLINVCMD    ABORT + MESSAGE + SEND BAD CARD BACK\n         OI    FLAGMS1,FLINVCMD\n         L     R6,IECARDP    GET THE ADDRESS OF START OF BAD COMMAND\n         MVC   INVCARD,0(R6) SAVE THIS CARD TO SEND IT BACK WITH MSG\n         B     WRAPUP22      GO TO SEND MESSAGE ABOUT THIS THING\n         EJECT\n**********************************************************************\n*                                                                    *\n*        SETUP TO INSERT TIME PARAMETER CARD                         *\n*                                                                    *\n**********************************************************************\n         SPACE\nDOINSERT LA    R15,TIMECARD  LOAD ADDRESS OF CARD TO INSERT\n         ST    R15,IECARDP   STORE IN CURRENT CARD POINTER\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*        ISSUE THE APPROPRIATE MESSAGES TO THE TERMINAL              *\n*                                                                    *\n**********************************************************************\n         SPACE\nWRAPUP   EQU   *             SEE IF WE HAVE ANY MESSAGES TO SEND\n         TM    FLAGMSG,FLJOBNAM+FLXEQCLS+FLMSGCLS+FLCPUTIM+FLJERRIC+FLC*\n               PUTIN+FLINVCMD\n         BNZ   WRAPUP1       ... PRIMARY MESSAGES TO ISSUE - DO IT\n         TM    FLAGMS1,FLXEQCLS+FLMSGCLS+FLINVCMD+FLCPUTIM\n         BZ    WRAPUP98      ... NO MESSAGES TO ISSUE\n         SPACE\nWRAPUP1  TM    FLAGABR,FLJOBNAM  SEE IF ABORT FOR JOBNAME\n         BNO   WRAPUP2       ... NOT ABORT BUT LETS SEE IF WARNING\n         TM    FLAG0XL,FLJOBNAX  SEE IF WE ISSUED \"REJECTED\"\n         BO    WRAPUP3       ... IF YES THEN GO SEE IF JOBNAME MSG\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLJOBNAX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP2  TM    FLAGMSG,FLJOBNAM  DO WE NEED TO ISSUE JOBNAME MSG\n         BNO   WRAPUP6\n         TM    FLAG0XL,FLJOBNAX  SEE IF WE ISSUED \"WARNING\"\n         BO    WRAPUP3       ... IF YES THEN GO SEE IF JOBNAME MSG\n         MVC   MESSAGE(L'WARNMS1+2),WARNMSG\n         OI    FLAG0XL,FLJOBNAX  FLAG SENDING \"WARNING\"\n         B     RETURN8\n         SPACE\nWRAPUP3  TM    FLAGMSG,FLJOBNAM  SEE IF WE ISSUED JOBNAME MSG\n         BNO   WRAPUP6\n         TM    FLAGABR,FLJOBNAM  SEE IF ABORTING FOR JOBNAME\n         BZ    WRAPUP4           ... NOT ABORT - WARNING ONLY\n         TM    FLAGMSG,FLJOBPRF  SEE IF WE SHOULD ISSUE PREFIX\n         BO    WRAPUP5\nWRAPUP4  MVC   MESSAGE(L'JOBNMS1+2),JOBNMSG\n         NI    FLAGMSG,X'FF'-FLJOBNAM TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP5  TM    FLAGMSG,FLJOBNAM  SEE IF WE ISSUED JOBNAME MSG\n         BNO   WRAPUP6\n         MVC   MESSAGE(L'PREFMS1+2),PREFMSG\n         MVC   MESSAGE+51(7),UIDPFX\n         NI    FLAGMSG,X'FF'-FLJOBPRF-FLJOBNAM TURN OFF MSG FLAGS\n         B     RETURN8\n         SPACE\nWRAPUP6  TM    FLAGABR,FLXEQCLS SEE IF ABORT FOR XEQCLS\n         BNO   WRAPUP11\n         TM    FLAG0XL,FLXEQCLX  SEE IF WE HAVE SENT \"REJECTED\"\n         BO    WRAPUP7\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLXEQCLX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP7  TM    FLAGMSG,FLXEQCLS SEE IF MSG FOR XEQCLS\n         BNO   WRAPUP10\n         TM    FLAGFND,FLMSGCLS SEE IF MSGCLASS FOUND\n         BO    WRAPUP8\n         MVC   MESSAGE(L'XEQCMS3+2),XEQCMS2\n         B     WRAPUP9\nWRAPUP8  MVC   MESSAGE(L'XEQCMS1+2),XEQCMSG\nWRAPUP9  NI    FLAGMSG,X'FF'-FLXEQCLS TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP10 TM    FLAGMS1,FLXEQCLS SEE IF MSG FOR XEQCLS\n         BNO   WRAPUP11\n         MVC   MESSAGE(L'VALCMS1+2),VALCMSG\n         L     R14,UIDXEQCP\n         MVC   MESSAGE+22(37),1(R14)\n         NI    FLAGMS1,X'FF'-FLXEQCLS TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP11 TM    FLAGABR,FLMSGCLS SEE IF ABORT FOR MSGCLS\n         BNO   WRAPUP16\n         TM    FLAG0XL,FLMSGCLX  SEE IF WE HAVE SENT \"REJECTED\"\n         BO    WRAPUP12\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLMSGCLX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP12 TM    FLAGMSG,FLMSGCLS SEE IF MSG FOR MSGCLS\n         BNO   WRAPUP15\n         TM    FLAGFND,FLMSGCLS SEE IF MSGCLASS FOUND\n         BO    WRAPUP13\n         MVC   MESSAGE(L'MSGCMS3+2),MSGCMS2\n         B     WRAPUP14\nWRAPUP13 MVC   MESSAGE(L'MSGCMS1+2),MSGCMSG\nWRAPUP14 NI    FLAGMSG,X'FF'-FLMSGCLS TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP15 TM    FLAGMS1,FLMSGCLS SEE IF MSG FOR MSGCLS\n         BNO   WRAPUP16\n         MVC   MESSAGE(L'VALCMS1+2),VALCMSG\n         L     R14,UIDMSGCP\n         MVC   MESSAGE+22(37),1(R14)\n         NI    FLAGMS1,X'FF'-FLMSGCLS TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP16 TM    FLAGABR,FLCPUTIM SEE IF ABORT FOR CPUTIM\n         BNO   WRAPUP18\n         TM    FLAG0XL,FLCPUTIX  SEE IF WE HAVE SENT \"REJECTED\"\n         BO    WRAPUP17\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLCPUTIX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP17 TM    FLAGMSG,FLCPUTIM SEE IF MSG FOR CPUTIM\n         BNO   WRAPU17A\n         MVC   MESSAGE(L'CPUTMS1+2),CPUTMSG\n         NI    FLAGMSG,X'FF'-FLCPUTIM TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPU17A TM    FLAGMS1,FLCPUTIM SEE IF MSG FOR CPUTIME\n         BNO   WRAPUP18\n         MVC   MESSAGE(L'VALTMS1+2),VALTMSG\n         MVC   MESSAGE+22(8),CPUTIMAX\n         NI    FLAGMS1,X'FF'-FLCPUTIM TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP18 TM    FLAGABR,FLCPUTIN SEE IF ABORT FOR UNABLE TO INSERT COMMA\n         BNO   WRAPUP20\n         TM    FLAG0XL,FLCPUTIX  SEE IF WE HAVE SENT \"REJECTED\"\n         BO    WRAPUP19       ... DONT ISSUE ABORT MESSAGE TWICE\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLCPUTIX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP19 TM    FLAGMSG,FLCPUTIN SEE IF MSG FOR UNABLE TO INSERT COMMA\n         BNO   WRAPUP20\n         MVC   MESSAGE(L'CPUTMS3+2),CPUTMS2\n         NI    FLAGMSG,X'FF'-FLCPUTIN TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP20 TM    FLAGABR,FLJERRIC SEE IF ABORT FOR INVALID JOBCARD\n         BNO   WRAPUP22       ... NOT ABORTING FOR JOBCARD >71 CHAR\n         TM    FLAG0XL,FLJERRIX  SEE IF WE HAVE SENT \"REJECTED\"\n         BO    WRAPUP21       ... DONT ISSUE ABORT MESSAGE TWICE\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLJERRIX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP21 TM    FLAGMSG,FLJERRIC SEE IF MSG FOR INVALID JOBCARD\n         BNO   WRAPUP22      ... JOBCARD WAS < 72 CHAR\n         MVC   MESSAGE(L'JERRMS1+2),JERRMSG\n         NI    FLAGMSG,X'FF'-FLJERRIC TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP22 TM    FLAGABR,FLINVCMD SEE IF ABORT FOR INVALID COMMAND\n         BNO   WRAPUP24       ... NOT ABORTING FOR COMMAND IN JCL\n         TM    FLAG0XL,FLINVCMX  SEE IF WE HAVE SENT \"REJECTED\"\n         BO    WRAPUP23       ... DONT ISSUE ABORT MESSAGE TWICE\n         MVC   MESSAGE(L'ABORTMS1+2),ABORTMSG\n         OI    FLAG0XL,FLINVCMX  FLAG SENDING \"REJECTED\"\n         B     RETURN8\n         SPACE\nWRAPUP23 TM    FLAGMSG,FLINVCMD SEE IF MSG FOR COMMAND IN JCL\n         BNO   WRAPUP24      ... JES 2 OR SYSTEM COMMAND IN JCL\n         MVC   MESSAGE(L'INVCMMS1+2),INVCMMSG\n         NI    FLAGMSG,X'FF'-FLINVCMD TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP24 TM    FLAGMS1,FLINVCMD SEE IF MSG FOR COMMAND IN JCL\n         BNO   WRAPUP98      ... JES 2 OR SYSTEM COMMAND IN JCL\n         MVC   MESSAGE(2),=AL2(80)\n         MVC   MESSAGE+2(78),INVCARD MOVE IN DETECTED JES OR SYSTEM\n         NI    FLAGMS1,X'FF'-FLINVCMD TURN OFF MSG FLAG TO NOT RESEND\n         B     RETURN8\n         SPACE\nWRAPUP98 LA    R10,RETURN0   DEFAULT TO RETURN0\n*                            SEE IF WE WANT TO ABORT THIS SUBMISSION\n         TM    FLAGABR,FLJOBNAM+FLXEQCLS+FLMSGCLS+FLCPUTIM+FLJERRIC+FLC*\n               PUTIN+FLINVCMD\n         BZ    WRAPUP99      WE WILL LET THIS SUBMIT GO THROUGH\n         LA    R10,RETURN16  TERMINATE THE SUBMIT\n         SPACE\nWRAPUP99 LA    R15,TIMECARD  LOAD ADDRESS OF INSERT CARD\n         C     R15,IECARDP   SEE IF ABOUT TO INSERT CARD\n         BER   R10           GO INSERT - DONT DO THE FREEMAIN\n         SPACE\n         LA    R0,AREAWORK   LOAD LENGTH OF AREA TO FREE\n         L     R1,IEEXITWD   LOAD ADDRESS OF AREA TO FREE\n         FREEMAIN R,LV=(0),A=(1)  FREE GOTTEN AREA FOR EXIT WORK\n         SR    R1,R1         CLEAR ADDRESS OF GOTTEN AREA SINCE\n         ST    R1,IEEXITWD   WE JUST FREED IT - MAY COME FOR NEXT JOB\n         BR    R10           GO END THE SUBMIT WITH EITHER 0 OR 16\n         EJECT\n**********************************************************************\n*                                                                    *\n*        RETURN THE APPROPRIATE RETURN CODES TO THE CALLING PROGRAM  *\n*                                                                    *\n**********************************************************************\n         SPACE\nRETURN16 LA    R10,IEABORT   LOAD ABORT RETURN CODE\n         B     RETURN        ... THE ULTIMATE INSULT - SUBMIT REJECTED\n         SPACE\nRETURN8  LA    R10,MESSAGE   GET ADDRESS OF MESSAGE TO SEND\n         ST    R10,IEMSGP    STORE IN PARM WORD\n         LA    R10,IEMSG     LOAD ISSUE MESSAGE RETURN CODE\n         B     RETURN\n         SPACE\nRETURN4  LA    R10,IERETURN  LOAD PROCESS & RETURN FOR ANOTHER STMT\n         B     RETURN        ... ONLY USED TO DO AN INSERT\n         SPACE\nRETURN0  LA    R10,IECONTIN  LOAD OK TO CONTINUE RETURN CODE\n         SPACE\nRETURN   LR    R1,R13        LOAD ADDRESS OF GOTTEN AREA FOR REGS\n         L     R13,4(R13)    LOAD PREVIOUS SAVE AREA ADDRESS\n         LA    R0,AREAREGS   LOAD SIZE OF GOTTEN AREA FOR REGISTERS\n         FREEMAIN R,LV=(0),A=(1)  FREE GOTTEN AREA FOR REGISTER SAVE\n         LR    R15,R10       PLACE RETURN CODE IN REG15\n         RETURN (14,12),RC=(15) RETURN TO THE CALLER\n         EJECT\n**********************************************************************\n*                                                                    *\n*        MESSAGES TO SEND REGARDING THE STATUS OF THIS SUBMISSION    *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nABORTMSG DC    AL2(L'ABORTMS1+2)\nABORTMS1 DC    C'**  SUBMIT REJECTED  **'\n         SPACE\nWARNMSG  DC    AL2(L'WARNMS1+2)\nWARNMS1  DC    C'WARNING - OUTPUT COMMAND WILL NOT DISPLAY THIS JOB'\n         SPACE\nJOBNMSG  DC    AL2(L'JOBNMS1+2)\nJOBNMS1  DC    C'JOBNAME DOES NOT START WITH YOUR USERID'\n         SPACE\nPREFMSG  DC    AL2(L'PREFMS1+2)\nPREFMS1  DC C'JOBNAME DOES NOT START WITH YOUR USERID PREFIX -        '\n         SPACE\nXEQCMSG  DC    AL2(L'XEQCMS1+2)\nXEQCMS1  DC    C'EXECUTION CLASS SPECIFIED IS INVALID'\n         SPACE\nXEQCMS2  DC    AL2(L'XEQCMS3+2)\nXEQCMS3  DC    C'EXECUTION CLASS IS REQUIRED BUT NOT SPECIFIED'\n         SPACE\nMSGCMSG  DC    AL2(L'MSGCMS1+2)\nMSGCMS1  DC    C'MSGCLASS SPECIFIED IS INVALID'\n         SPACE\nMSGCMS2  DC    AL2(L'MSGCMS3+2)\nMSGCMS3  DC    C'MSGCLASS IS REQUIRED BUT NOT SPECIFIED'\n         SPACE\nCPUTMSG  DC    AL2(L'CPUTMS1+2)\nCPUTMS1  DC    C'CPU TIME IS MISSING, INVALID, OR TOO LARGE'\n         SPACE\nCPUTMS2  DC    AL2(L'CPUTMS3+2)\nCPUTMS3  DC    C'JOB CARD IS TOO LONG, CAN''T INSERT TIME PARAMETER'\n         SPACE\nVALCMSG  DC    AL2(L'VALCMS1+2)\nVALCMS1  DC    CL57'VALID CLASSES ARE - '\n         SPACE\nVALTMSG  DC    AL2(L'VALTMS1+2)\nVALTMS1  DC    CL57'MAX CPU TIME IS   - '\n         SPACE\nINVCMMSG DC    AL2(L'INVCMMS1+2)\nINVCMMS1 DC    C'JES2 OR SYSTEM CONTROL CARD DETECTED - NOT PERMITTED'\n         SPACE\nJERRMSG  DC    AL2(L'JERRMS1+2)\nJERRMS1  DC    C'INVALID JOBCARD'\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*        CONSTANTS USED IN THIS ROUTINE                              *\n*                                                                    *\n**********************************************************************\n         SPACE\nTIMESKEL DC    CL80'//          TIME=          CARD INSERTED BY SUBMIT'\n         SPACE\n         LTORG\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ALL TABLES WHICH FOLLOW ARE ADDRESSED VIA ADCONS            *\n*        NO ADDRESSABILITY IS NEEDED                                 *\n*                                                                    *\n*        TABLES TO CHECK - (NOTE TABLES ALL END WITH A BLANK ENTRY)  *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*        USERID TABLE                                                *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nUIDTAB   DS    0C      USERID OR USERID PREFIX TABLE\n*\n*        (NOTE: THIS TABLE IS MAPPED BY UIDDSECT DSECT)\n*\n*        (NOTE: USERIDS OR PREFIXES MUST BE IN SIGNIFICANCE SEQUENCE\n*               I.E. FIRST MATCH IS TAKEN                           )\n*\n*             USERID OR  | XCLSI  | MCLSI  | CHECK JOBNAME/USERID\n*             PREFIX -   |        |        |\n*                        | KEY TO TABLE OR |  Y = YES - 7 CHAR\n*             \"*\"        | \"*\" FOR NOT     |  N = NO\n*             INDICATES  | REQUIRED AND    |  P = PREFIX LENGTH ONLY\n*             ANY CHAR   | NOT CHECKED IF  |\n*             WILL DO    | SPECIFIED       |\n*\n         DC    CL7'DRNHLCG',CL1'0',CL1'*',CL1'Y'  NO SUBMIT ALLOWED\n         DC    CL7'E40CG01',CL1'H',CL1'H',CL1'Y'  PREFIX CHK\n         DC    CL7'E40CH  ',CL1'T',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'E6TSA  ',CL1'T',CL1'B',CL1'Y'  CHECK JOBNAME\n         DC    CL7'MOCSY05',CL1'B',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'PCBFL  ',CL1'H',CL1'H',CL1'P'  PREFIX CHK\n         DC    CL7'P00TF  ',CL1'D',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P00CI02',CL1'I',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P00CS01',CL1'I',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P08CC  ',CL1'D',CL1'E',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P08IC  ',CL1'D',CL1'E',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P08PP  ',CL1'D',CL1'E',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P4ECTR1',CL1'I',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P4ECTR2',CL1'I',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P4E0B01',CL1'*',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'P4E0B02',CL1'*',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'P40BF01',CL1'D',CL1'D',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P40CD  ',CL1'S',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'P40CF  ',CL1'*',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'P40PR  ',CL1'*',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'P**PN  ',CL1'D',CL1'B',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P64FC  ',CL1'D',CL1'E',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P63PR  ',CL1'D',CL1'B',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P64RP  ',CL1'D',CL1'B',CL1'Y'  CHECK JOBNAME\n         DC    CL7'P74PR01',CL1'G',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'P75PR  ',CL1'G',CL1'*',CL1'N'  NO JOBNAME CHK\n         DC    CL7'PBHDD  ',CL1'H',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'PDI    ',CL1'F',CL1'F',CL1'N'  NO JOBNAME CHK\n         DC    CL7'PDJ    ',CL1'F',CL1'F',CL1'N'  NO JOBNAME CHK\n         DC    CL7'S      ',CL1'H',CL1'H',CL1'P'  PREFIX CHK\n         DC    CL7'TDI    ',CL1'F',CL1'F',CL1'N'  NO JOBNAME CHK\n         DC    CL7'T00AA05',CL1'L',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T00AA07',CL1'L',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AB06',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AC0 ',CL1'J',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AC1 ',CL1'J',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AC21',CL1'Z',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AF  ',CL1'E',CL1'C',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG01',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG02',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG05',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG10',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG06',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG13',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40AG34',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BC07',CL1'M',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BC00',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BC01',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BC03',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BC16',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BC19',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BE  ',CL1'U',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BG01',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BG07',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40BV01',CL1'J',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40DB20',CL1'J',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40EK  ',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T40PC00',CL1'9',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T4E0A  ',CL1'T',CL1'C',CL1'Y'  CHECK JOBNAME\n         DC    CL7'T      ',CL1'T',CL1' ',CL1'Y'  CHECK JOBNAME\n         DC    CL7'       ',CL1' ',CL1' ',CL1' '  DEFAULT\n         EJECT\n**********************************************************************\n*                                                                    *\n*        EXECUTION CLASS TABLE                                       *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCLSTAB   DS    0C      EXECUTION CLASS TABLE\n*\n*              XCLSI       EXECUTION CLASS ALLOWED\n*\n         DC    CL1'A',CL37'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '\n         DC    CL1'B',CL37'P1234                                ' MOCS\n         DC    CL1'D',CL37'P                                    ' PAY\n         DC    CL1'E',CL37'FG1234                               ' NHL\n         DC    CL1'F',CL37'DP1234                               ' RCA\n         DC    CL1'G',CL37'FG                                   ' NHL\n         DC    CL1'H',CL37'CHP1234789                           ' SOFT\n         DC    CL1'I',CL37'A                                    ' FINA\n         DC    CL1'J',CL37'H12349                               ' DATAB\n         DC    CL1'L',CL37'L1234                                ' PAYR\n         DC    CL1'M',CL37'M1234                                ' PAYR\n         DC    CL1'S',CL37'PS                                   ' DATA\n         DC    CL1'T',CL37'1234                                 ' PGMRS\n         DC    CL1'U',CL37'K1234                                ' PAYR\n         DC    CL1'Z',CL37'Z                                    ' AUD\n         DC    CL1'0',CL37' ** BATCH SUBMISSION NOT ALLOWED **  ' CIBA\n         DC    CL1'9',CL37'12349                                ' DCS\n         DC    CL1' ',CL37'1234                                 ' DEF.\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*        MESSAGE CLASS TABLE                                         *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nMSGTAB   DS    0C      MESSAGE CLASS TABLE\n*\n*              MCLSI       MESSAGE CLASS ALLOWED\n*\n         DC    CL1'A',CL37'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '\n         DC    CL1'B',CL37'ACDSXZ                               ' USV\n         DC    CL1'C',CL37'ACX                                  ' NHL\n         DC    CL1'D',CL37'ACDX                                 ' CONS\n         DC    CL1'E',CL37'AD                                   ' CONS\n         DC    CL1'F',CL37'ACDX                                 ' RCA\n         DC    CL1'H',CL37'ACDJXZ0                              ' SOFT\n         DC    CL1' ',CL37'CX                                   ' DEF.\n         EJECT\n**********************************************************************\n*                                                                    *\n*        TIME TABLE FOR EACH EXECUTION CLASS                         *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nTIMTAB   DS    0H      TIME PARAMETER TABLE VS. EXECUTION CLASS\n*\n*        EXECUTION CLASS\n*                      MAND - Y = MUST HAVE TIME PARAMETER ON JOB\n*                           - N = MUST NOT HAVE TIME - PARM IS USED\n*                           - O = OPTIONAL BUT PARM WILL BE USED IF\n*                                 NOT SPECIFIED ON JOB CARD\n*                            DEF. - DEFAULT TIME TO USE IF NOT\n*                                   SPECIFIED - IN SECONDS -\n*                                   0 INDICATES NO DEFAULT\n*                                 MAX - MAX TIME ALLOWED FOR CLASS\n*                                       SPECIFIED - IN SECONDS\n*                                       0 INDICATES NO MAX VALUE\n*\n*              XEQCLS  MAND. DEF. MAX\n*\n         DC    CL1'A',CL1'O',H'0',H'0'\n         DC    CL1'B',CL1'O',H'0',H'0'\n         DC    CL1'C',CL1'O',H'0',H'0'    CICS\n         DC    CL1'D',CL1'O',H'0',H'0'\n         DC    CL1'E',CL1'O',H'0',H'0'    OTB\n         DC    CL1'F',CL1'O',H'0',H'0'    NHL\n         DC    CL1'G',CL1'O',H'0',H'0'    CHL\n         DC    CL1'H',CL1'O',H'0',H'0'    SYSTEM SOFTWARE\n         DC    CL1'I',CL1'O',H'0',H'0'    ONLINE\n         DC    CL1'J',CL1'O',H'0',H'0'\n         DC    CL1'K',CL1'O',H'0',H'0'\n         DC    CL1'L',CL1'O',H'0',H'0'\n         DC    CL1'M',CL1'O',H'0',H'0'\n         DC    CL1'N',CL1'O',H'0',H'0'\n         DC    CL1'O',CL1'O',H'0',H'0'    PRD\n         DC    CL1'P',CL1'O',H'0',H'0'    PRODUCTION BATCH\n         DC    CL1'Q',CL1'O',H'0',H'0'    BILLING\n         DC    CL1'R',CL1'O',H'0',H'0'    O/P\n         DC    CL1'S',CL1'O',H'0',H'0'    PACK & MANI\n         DC    CL1'T',CL1'O',H'0',H'0'\n         DC    CL1'U',CL1'O',H'0',H'0'\n         DC    CL1'V',CL1'O',H'0',H'0'\n         DC    CL1'W',CL1'O',H'0',H'0'\n         DC    CL1'X',CL1'O',H'0',H'0'\n         DC    CL1'Y',CL1'O',H'0',H'0'\n         DC    CL1'Z',CL1'O',H'0',H'0'\n         DC    CL1'0',CL1'O',H'0',H'0'\n         DC    CL1'1',CL1'O',H'10',H'10'   TEST CLASS 1\n         DC    CL1'2',CL1'O',H'20',H'120'  TEST CLASS 2\n         DC    CL1'3',CL1'O',H'20',H'120'  TEST CLASS 3\n         DC    CL1'4',CL1'O',H'10',H'10'   TEST CLASS 4\n         DC    CL1'5',CL1'O',H'0',H'0'\n         DC    CL1'6',CL1'O',H'0',H'0'\n         DC    CL1'7',CL1'O',H'0',H'0'\n         DC    CL1'8',CL1'O',H'0',H'0'\n         DC    CL1'9',CL1'O',H'0',H'0'      DCS TEST\n         DC    CL1' ',CL1' ',H'0',H'0'      END OF TABLE\n         EJECT\n**********************************************************************\n*                                                                    *\n*        OPERATOR COMMAND TABLE THAT WILL NOT BE ALLOWED IN JCL      *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nOPERCMDS DC    AL1(6),CL9'CANCEL   '\n         DC    AL1(1),CL9'C        '\n         DC    AL1(8),CL9'CHNGDUMP '\n         DC    AL1(2),CL9'CD       '\n         DC    AL1(7),CL9'DISPLAY  '\n         DC    AL1(1),CL9'D        '\n         DC    AL1(4),CL9'HOLD     '\n         DC    AL1(1),CL9'H        '\n         DC    AL1(3),CL9'LOG      '\n         DC    AL1(1),CL9'L        '\n         DC    AL1(5),CL9'MODIFY   '\n         DC    AL1(1),CL9'F        '\n         DC    AL1(7),CL9'MONITOR  '\n         DC    AL1(2),CL9'MN       '\n         DC    AL1(5),CL9'MOUNT    '\n         DC    AL1(1),CL9'M        '\n         DC    AL1(7),CL9'PAGEADD  '\n         DC    AL1(2),CL9'PA       '\n         DC    AL1(7),CL9'RELEASE  '\n         DC    AL1(1),CL9'A        '\n         DC    AL1(5),CL9'REPLY    '\n         DC    AL1(1),CL9'R        '\n         DC    AL1(5),CL9'RESET    '\n         DC    AL1(1),CL9'E        '\n         DC    AL1(4),CL9'SEND     '\n         DC    AL1(2),CL9'SE       '\n         DC    AL1(3),CL9'SET      '\n         DC    AL1(1),CL9'T        '\n         DC    AL1(6),CL9'SETDMN   '\n         DC    AL1(2),CL9'SD       '\n         DC    AL1(4),CL9'SLIP     '\n         DC    AL1(2),CL9'SL       '\n         DC    AL1(5),CL9'START    '\n         DC    AL1(1),CL9'S        '\n         DC    AL1(4),CL9'STOP     '\n         DC    AL1(1),CL9'P        '\n         DC    AL1(6),CL9'STOPMN   '\n         DC    AL1(2),CL9'PM       '\n         DC    AL1(6),CL9'UNLOAD   '\n         DC    AL1(1),CL9'U        '\n         DC    AL1(4),CL9'VARY     '\n         DC    AL1(1),CL9'V        '\n         DC    AL1(8),CL9'WRITELOG '\n         DC    AL1(1),CL9'W        '\n         DC    AL1(0),CL9'         '  END OF TABLE - LENGTH 0\n         SPACE\n         EJECT\n**********************************************************************\n*                                                                    *\n*        DSECTS USED BY THIS ROUTINE                                 *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*        DSECT USED TO MAP GOTTEN REGISTER SAVE AREA                 *\n*                                                                    *\n**********************************************************************\n         SPACE\nWORKREGS DSECT\n         SPACE\nREGAREA  DS    18F\n         SPACE\nAREAREGS EQU   *-WORKREGS\n         EJECT\n**********************************************************************\n*                                                                    *\n*        DSECT USED TO MAP GOTTEN WORK AREA                          *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nWORKAREA DSECT\n         SPACE\nDWWORK   DS    D         DOUBLE WORD WORK AREA - CVB CVD\nEDWORK   DS    D         DOUBLE WORD WORK AREA - EDIT\nCPUTIMAX DS    D         EDITED OUTPUT FOR CPUTIME - DEFAULT AND MAX\nR15D1    DS    F         REG 15 SAVE AREA\n         SPACE\nUIDXEQCP DS    F         POINTER TO EXECUTION CLASS TABLE FOR MESSAGE\nUIDMSGCP DS    F         POINTER TO MSGCLASS TABLE FOR MESSAGE\n         SPACE\nFLAGFND  DS    XL1       FLAG FOR PARAMETER FOUND\n         SPACE\nFLJOBNAM EQU   X'80'     \"JOBNAME FLAG\"\nFLXEQCLS EQU   X'40'     \"EXECUTION CLASS FLAG\"\nFLMSGCLS EQU   X'20'     \"MSGCLASS FLAG\"\nFLCPUTIM EQU   X'10'     \"CPU TIME FLAG\"\n         SPACE\nFLAGABR  DS    XL1       FLAG FOR ABORT REASON\n         SPACE\n* FLJOBNAM EQU   X'80'\n* FLXEQCLS EQU   X'40'\n* FLMSGCLS EQU   X'20'\n* FLCPUTIM EQU   X'10'\nFLJERRIC EQU   X'08'     \"JOB CARD ERROR FLAG - > 72 CHAR\"\nFLCPUTIN EQU   X'02'     \"UNABLE TO INSERT COMMA IN JOB CARD FLAG\"\nFLINVCMD EQU   X'01'     \"INVALID COMMAND - JES OR SYSTEM IN JCL\"\n         SPACE\nFLAGMSG  DS    XL1       FLAG FOR MESSAGE TO SEND\n         SPACE\n* FLJOBNAM EQU   X'80'\n* FLXEQCLS EQU   X'40'\n* FLMSGCLS EQU   X'20'\n* FLCPUTIM EQU   X'10'\n* FLJERRIC EQU   X'08'\nFLJOBPRF EQU   X'04'     \"USERID PREFIX FLAG\"\n* FLCPUTIN EQU   X'02'\n* FLINVCMD EQU   X'01'\n         SPACE\nFLAGMS1  DS    XL1       FLAG FOR VALID CLASS MESSAGE TO SEND\n         SPACE\n* FLXEQCLS EQU   X'40'\n* FLMSGCLS EQU   X'20'\n* FLCPUTIM EQU   X'10'\n* FLINVCMD EQU   X'01'\n         SPACE\nFLAG0XL  DS    XL1       FLAG FOR WARNING OR ABORT MESSAGE SENT\n         SPACE\nFLJOBNAX EQU   X'80'     FLAG THESE GUYS SO THAT WE ONLY SEND\nFLXEQCLX EQU   X'40'     ONE WARNING OR ABORT MESSAGE PER ERROR\nFLMSGCLX EQU   X'20'\nFLCPUTIX EQU   X'10'\nFLJERRIX EQU   X'08'\nFLINVCMX EQU   X'01'\n         SPACE\nTIMEFLG  DS    XL1       FLAG FOR TIME CHECK USE\n         SPACE\nTIMEFLGS EQU   X'80'     FLAG TO INDICATE TIME IN SECONDS\nTIMEFLGE EQU   X'40'     FLAG TO INDICATE END OF TIME PARMS\nTIMEFLGO EQU   X'20'     FLAG TO INDICATE OPENING PAREND FOUND\n         SPACE\nJOBNAM   DS    CL8   JOBNAME FROM JOBCARD SUBMITTED\nXEQCLS   DS    CL1   EXECUTION CLASS FROM JOBCARD SUBMITTED\nMSGCLS   DS    CL1   MSGCLASS FROM JOBCARD SUBMITTED\nCPUTIM   DS    CL8   TIME PARAMETER FROM JOBCARD\nSCANCHR  DS    CL1   CHARACTER TO SCAN FOR USED BY \"SCAN\" ROUTINE\nMESSAGE  DS    CL80  AREA FOR MESSAGE TO BE SENT TO USER\nTIMECARD DS    CL80  AREA TO BUILD THE \"TIME\" CARD FOR INSERTION\nINVCARD  DS    CL80  AREA TO SAVE DETECTED JES2 OR SYSTEM COMMAND\nUIDPFX   DS    CL7   USERID PREFIX FOUND IN UID TABLE FOR MESSAGE\n         SPACE\nAREAWORK EQU   *-WORKAREA\n         EJECT\n**********************************************************************\n*                                                                    *\n*        DSECT USED TO MAP USERID TABLE ENTRY                        *\n*                                                                    *\n**********************************************************************\n         SPACE\nUIDDSECT DSECT\n         SPACE\nUIDENTRY EQU   *\n         SPACE\nUID      DS    CL7   USERID OR FIRST N CHARACTERS OF USERID\nXEQCLSI  DS    CL1   INDEX TO EXECUTION CLASS TABLE\nMSGCLSI  DS    CL1   INDEX TO MSGCLASS TABLE\nJOBN     DS    CL1   Y/N/P\n         SPACE\nUIDELEN  EQU   *-UIDENTRY\n         EJECT\n         IKJEFFIE IETYPE=SUBMIT\n         SPACE\n         END\n/*\n//LKED1   EXEC PGM=IEWL,PARM='LIST,LET,MAP,XREF,RENT,REFR',\n//             COND=(8,LT,ASM)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n SETCODE AC(1)\n NAME IKJEFF10(R)\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTGDGC": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "LISTGDG  TITLE 'LISTGDGC - CONTROLLER MODULE FOR LISTGDGP'\n         SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* THIS IS THE CONTROL MODULE FOR THE LISTGDG COMMAND THAT WILL LIST   *\n* OR CHANGE THE GDG-BASE ENTRY IN AN ICF CATALOG.                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* THIS PROGRAM DE-ALLOCATES THE FOUR DD NAMES ALLOCATED FOR THE       *\n* LISTGDGP PROGRAM, ALLOCATES TWO DD NAMES TO VIO FILES AND TWO       *\n* DD NAMES TO THE TERMINAL AND LINKS TO LISTGDGP TO ACT AS THE REAL   *\n* COMMAND TO PROCESS THE REQUESTS.  UPON RETURN FROM LISTGDGP THIS    *\n* MODULE WILL DE-ALLOCATE THE FOUR DD NAMES PREVIOUSLY ALLOCATED.     *\n* THIS MODULE AND THE LISTGDGP MODULE SHOULD BE LINKED INTO           *\n* SYS1.CMDLIB .  THIS MODULE SHOULD BE NAMED LISTGDG OR SOME          *\n* APPROPRIATE NAME.  LISTGDGP AND THE DDNAMES SHOULD REMAIN THE SAME  *\n* UNLESS CHANGES ARE MADE IN BOTH THIS MODULE AND LISTGDGP.           *\n* NEITHER THIS MODULE NOR LISTGDGP ARE WRITTEN TO BE RE-ENTRANT.      *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nLISTGDGC CSECT\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3  - BASE REGISTER\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10 - LINK REGISTER TO DE ALLOCATE ROUTINE\nR11      EQU   11 - WORK REGISTER\nR12      EQU   12 - WORK REGISTER\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SAVE  (14,12),,LISTGDGC.TEST.&SYSTIME..&SYSDATE\n         LR    R3,R15        ESTABLISH BASE REGISTER\n         USING LISTGDGC,R3   AND ADDRESSABILITY\n         SPACE\n         LA    R10,REGAREA\n         ST    R13,4(R10)    CHAIN SAVE AREA ADDRESSES\n         ST    R10,8(R13)\n         LR    R13,R10\n         EJECT\n         BAL   R10,DEALLOC   BAL TO DE-ALLOCATE DD NAMES\n         SPACE\n* ALLOCATE DDNAME IDCAMIN TO VIO DATA SET\n         SPACE\n         MVC   RB1TU1+6(8),DDNAME01\n         MVC   RB1TU2+6(8),DSNAME01\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n         SPACE\n         LTR   R15,R15       CHECK SVC99 RETURN CODE\n         BNZ   ABEND\n         SPACE\n* ALLOCATE DDNAME IDCAMOU TO VIO DATA SET\n         SPACE\n         MVC   RB1TU1+6(8),DDNAME02\n         MVC   RB1TU2+6(8),DSNAME02\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n         SPACE\n         LTR   R15,R15       CHECK SVC99 RETURN CODE\n         BNZ   ABEND\n         SPACE\n* ALLOCATE DDNAME GDGLINP TO THE TERMINAL\n         SPACE\n         MVC   RB2TU1+6(8),DDNAME03\n         LA    R1,APRB2      LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n         SPACE\n         LTR   R15,R15       CHECK SVC99 RETURN CODE\n         BNZ   ABEND\n         SPACE\n* ALLOCATE DDNAME GDGLOUT TO THE TERMINAL\n         SPACE\n         MVC   RB2TU1+6(8),DDNAME04\n         LA    R1,APRB2      LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n         SPACE\n         LTR   R15,R15       CHECK SVC99 RETURN CODE\n         BNZ   ABEND\n         SPACE\n         LINK  EP=LISTGDGP,PARAM=(NULLPARM)\n         SPACE\n         BAL   R10,DEALLOC   BAL TO DE-ALLOCATE DD NAMES\n         SPACE\nRETURN   L     R13,4(R13)\n         RETURN (14,12),RC=0 RETURN FROM WHENCE WE CAME\n         EJECT\nDEALLOC  LA    R12,4        LOAD NUMBER OF DDNAMES TO DE-ALLOCATE\n         LA    R11,DDNAME01 LOAD ADDRESS OF FIRST NAME TO DEALLOC\nDEALLOOP MVC   RB3TU1+6(8),0(R11) MOVE DDNAME TO T.U. BLOCK\n         LA    R1,APRB3     LOAD ADDRESS OF R.B. POINTER\n         DYNALLOC           ISSUE SVC99\n         LTR   R15,R15      CHECK SVC99 RETURN CODE\n         BZ    *+8          0 COND CODE OK\n         BAL   R14,ALLOCERR BAL TO CHECK TO SEE IF ERR IS OK\n         LA    R11,8(R11)   INCREMENT TO NEXT DDNAME\n         BCT   R12,DEALLOOP BCT BACK TO START OF LOOP\n         BR    R10          RETURN TO CALLER\n         SPACE\nALLOCERR C     R15,=F'4'    SEE IF COND CODE 4\n         BNE   ABEND        ANY OTHER CODE IS REAL BAD\n         CLC   RB3+4(2),=X'0438' SEE IF NOT ALLOCATED\n         BER   R14          NOT ALLOCATED IS STILL GOOD.\nABEND    ABEND 3999,DUMP    REAL PROBLEMS - TELL THE WORLD\n         EJECT\n         SPACE\nDDNAME01 DC    C'IDCAMIN '  ***  THESE FOUR DDNAMES MUST REMAIN\nDDNAME02 DC    C'IDCAMOU '    *  CONTIGUOUS FOR THE DEALLOC ROUTINE\nDDNAME03 DC    C'GDGLINP '    *  TO BE ABLE TO LOOP  THROUGH.\nDDNAME04 DC    C'GDGLOUT '  ***\nDSNAME01 DC    C'&&IDCAMIN'      TEMP DSNAMES FOR VIO DATA SETS\nDSNAME02 DC    C'&&IDCAMOU'\n         SPACE\nREGAREA  DS    18F        REGISTER SAVE AREA\n         SPACE\n* DYNALLOC REQUEST BLOCKS FOR VIO ALLOCATION\n         SPACE\nAPRB1    DS    0F         POINTER TO SVC99 REQUEST BLOCKS\n         DC    X'80',AL3(RB1)\n         SPACE\nRB1      DS    0F         SVC 99 REQUEST BLOCKS\n         DC    X'14014000'\n         DC    X'00000000'\n         DC    A(RB1P1)\n         DC    X'00000000'\n         DC    X'00000000'\n         SPACE\nRB1P1    DC    A(RB1TU1)  POINTER TO SVC99 TEXT UNIT 1\nRB1P2    DC    A(RB1TU2)  POINTER TO SVC99 TEXT UNIT 2\nRB1P4    DC    A(RB1TU4)  POINTER TO SVC99 TEXT UNIT 4\nRB1P5    DC    A(RB1TU5)  POINTER TO SVC99 TEXT UNIT 5\nRB1P8    DC    A(RB1TU8)  POINTER TO SVC99 TEXT UNIT 8\nRB1PA    DC    A(RB1TUA)  POINTER TO SVC99 TEXT UNIT A\nRB1PB    DC    A(RB1TUB)  POINTER TO SVC99 TEXT UNIT B\nRB1P15   DS    0F         POINTER TO SVC99 TEXT UNIT 15\n         DC    X'80',AL3(RB1TU15)\n         SPACE\nRB1TU1   DC    H'1',H'1',H'8',C'DDNAME  '     DDNAME\nRB1TU2   DC    H'2',H'1',H'8',C'DSNAME  '     DDNAME\nRB1TU4   DC    H'4',H'1',H'1',X'04'           STATUS = NEW\nRB1TU5   DC    H'5',H'1',H'1',X'04'           DISP = DELETE\nRB1TU8   DC    H'8',H'0'                      CYLINDER\nRB1TUA   DC    H'10',H'1',H'3',X'000001'      PRIMARY SPACE\nRB1TUB   DC    H'11',H'1',H'3',X'000001'      SECONDARY SPACE\nRB1TU15  DC    H'21',H'1',H'3',C'VIO'         UNIT\n         SPACE\n* DYNALLOC REQUEST BLOCKS FOR TERMINAL ALLOCATION\n         SPACE\nAPRB2    DS    0F         POINTER TO SVC99 REQUEST BLOCKS\n         DC    X'80',AL3(RB2)\n         SPACE\nRB2      DS    0F         SVC 99 REQUEST BLOCKS\n         DC    X'14014000'\n         DC    X'00000000'\n         DC    A(RB2P1)\n         DC    X'00000000'\n         DC    X'00000000'\n         SPACE\nRB2P1    DC    A(RB2TU1)  POINTER TO SVC99 TEXT UNIT 1\nRB2P4    DC    A(RB2TU4)  POINTER TO SVC99 TEXT UNIT 4\nRB2P5    DC    A(RB2TU5)  POINTER TO SVC99 TEXT UNIT 5\nRB2P28   DC    A(RB2TU28) POINTER TO SVC99 TEXT UNIT 28\nRB2P52   DS    0F         POINTER TO SVC99 TEXT UNIT 52\n         DC    X'80',AL3(RB2TU52)\n         SPACE\nRB2TU1   DC    H'1',H'1',H'8',C'DDNAME  '     DDNAME\nRB2TU4   DC    H'4',H'1',H'1',X'04'           STATUS = NEW\nRB2TU5   DC    H'5',H'1',H'1',X'04'           DISP = DELETE\nRB2TU28  DC    H'40',H'0'                     TERMINAL\nRB2TU52  DC    H'82',H'0'                     PERM ALLOCATION\n         SPACE\n* DYNALLOC REQUEST BLOCKS FOR DE-ALLOCATION\n         SPACE\nAPRB3    DS    0F         POINTER TO SVC99 REQUEST BLOCKS\n         DC    X'80',AL3(RB3)\n         SPACE\nRB3      DS    0F         SVC 99 REQUEST BLOCKS\n         DC    X'14020000'\n         DC    X'00000000'\n         DC    A(RB3P1)\n         DC    X'00000000'\n         DC    X'00000000'\n         SPACE\nRB3P1    DC    A(RB3TU1)  POINTER TO SVC99 TEXT UNIT 1\nRB3P7    DS    0F         POINTER TO SVC99 TEXT UNIT 7\n         DC    X'80',AL3(RB3TU7)\n         SPACE\nRB3TU1   DC    H'1',H'1',H'8',C'DDNAME  '     DDNAME\nRB3TU7   DC    H'7',H'0'                      UNALLOC\n         SPACE 2\nNULLPARM DC    H'0'\n         SPACE\n         LTORG\n         SPACE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTGDGP": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " GDGLIST: PROC OPTIONS(MAIN) REORDER;\n\n /*  THIS MODULE WILL CALL IDCAMS TO PERFORM LISTS OR CHANGES TO\n     GDG BASE ENTRIES IN AN ICF CATALOGUE.  ALLOCATIONS AND\n     DE-ALLOCATIONS ARE PERFORMED BY THE LISTGDGC MODULE THAT IS\n     LINKED INTO SYS1.CMDLIB WITH THE APPROPRIATE NAME.  THIS\n     MODULE IS LINKED TO BY LISTGDGC.\n\n     THIS MODULE IS DEPENDENT UPON THE FORMAT OF THE SYSPRINT\n     OUTPUT OF IDCAMS.\n\n     THE GTABDATV AREA WILL HOLD 255 GENERATIONS OF A GDG WITH\n     16 VOLSERS PER GENERATION OR MORE VOLSERS WITH\n     LESS GENERATIONS. CHANGES TO THE BASE WILL NOT BE MADE\n     IF MORE THAN 4095 VOLSERS ARE CATALOGUED IN ALL GENERATIONS.\n\n     REQUESTS FOR LISTS OF GDG BASE ENTRIES AND GDGS CATALOGUED ARE\n     DESCRIBED IN THE BANNER SENT TO THE USERS TERMINAL.  THE WORD\n     'ALL' MAY BE USED INSTEAD OF 'NN' WITH THE 'LE' FORMAT.\n\n     CHANGES TO THE GDG-BASE REQUIRE THE FOLLOWING FORMAT:\n     GDG-BASE-NAME,LIMIT=NN\n     FOLLOWED BY PROMPT TO THE USER FOR THE PASSWORD: MASTERPW\n\n     NEW GDG BASE ENTRIES MAY BE CREATED WITH THE FORMAT:\n     GDG-BASE-NAME,LIMIT=NN,NEW\n     AND DOES NOT REQUIRE A PASSWORD.\n\n     THIS MODULE WAS WRITTED FOR AND COMPILED WITH THE PL/1\n     OPTOMIZING COMPLIER.\n\n   MODULE HISTORY\n\n     SUPPORT ADDED FOR 3480                              JWP 012888\n     SUPPORT ADDED FOR ICF CAT DUP NAMES                 JWP 012888\n     REMOVE 8 VOLSER PER GENERATION LIMIT                JWP 050190\n     FIX OVERLAY BUG                                     JWP 050190\n     SUPPORT ADDED FOR 3390                              JWP 050190\n                                                                */\n\n DCL PLIXOPT CHAR(100) VAR INIT('ISA(0)') STATIC EXTERNAL;\n\n DCL IDCAMS  ENTRY OPTIONS(ASSEMBLER,INTER);\n\n   /* FILE DECLARATIONS                                            */\n\n DCL GDGLOUT FILE RECORD SEQUENTIAL ENV(F RECSIZE(72) BLKSIZE(72));\n DCL GDGLINP FILE RECORD SEQUENTIAL ENV(F RECSIZE(72) BLKSIZE(72));\n DCL IDCAMIN FILE RECORD SEQUENTIAL ENV(F RECSIZE(80) BLKSIZE(80));\n DCL IDCAMOU FILE RECORD SEQUENTIAL;\n\n   /* ENDFILE ON BLOCKS                                            */\n\n ON ENDFILE (IDCAMOU) GOTO ENDIDCOU;\n ON ENDFILE (GDGLINP) GOTO ENDJOB;\n\n   /* CALL PARM LISTS FOR IDCAMS                                   */\n\n DCL OPTS           FIXED BIN(15,0)  INIT(0);\n\n DCL DDNAMLST       CHAR(100) VARYING  INIT(\n   '                                IDCAMIN IDCAMOU ');\n DCL DDNAMLS2       CHAR(100) VARYING INIT(\n   '                                IDCAMIN GDGLOUT ');\n\n   /* IDCAMS CONTROL CARD SKELETONS                                */\n\n DCL IDCAMIN1       CHAR(80) STATIC INIT(\n ' LISTC ENT(                                        ) GDG ALL');\n DCL IDCAMIN2       CHAR(80) STATIC INIT(\n ' LISTC LVL(                                        ) VOL');\n DCL IDCAMIN3       CHAR(80) STATIC INIT(\n ' DEL (                                             ) NVSAM      ');\n DCL IDCAMIN4       CHAR(80) STATIC INIT(\n ' DEL (                                     ) GDG                ');\n DCL IDCAMIN5       CHAR(80) STATIC INIT(\n ' DEF GDG(NAME(                                    ) LIMIT(   ) SCR)');\n DCL IDCAMIN6       CHAR(80) STATIC INIT(\n ' DEF NVSAM(NAME(                                             ) - ');\n DCL IDCAMIN7       CHAR(80) STATIC INIT(' ');\n DCL IDCAMIN8       CHAR(80) STATIC INIT(' ');\n\n   /* TERMINAL BANNER LINES                                        */\n\n DCL BANNER1        CHAR(72) STATIC INIT(\n  'LISTGDG COMMAND');\n DCL BANNER1A       CHAR(72) STATIC INIT(\n  'ENTER:  GDGNAME,LE  /  GDGNAME,LE,##  /  GDGNAME,LI   FOR QUERIES');\n DCL BANNER1B       CHAR(72) STATIC INIT(\n  '      LE = LIST ENTRIES   /   LI = LIST BASE   /   ## = # ENTRIES');\n DCL BANNER1C       CHAR(72) STATIC INIT(\n  'ENTER:  GDGNAME,LIMIT=##,NEW   TO CREATE NEW GDGBASE ENTRY       ');\n DCL BANNER3        CHAR(72) STATIC INIT(\n  'ENTER:  GDGNAME,LE  /  ,LE,## /  ,LI  /  ,LIMIT=##,NEW  /  END ');\n DCL BANNER4        CHAR(72) STATIC INIT(\n  'ENTER PASSWORD TO CHANGE GDG BASE                               ');\n\n   /* TERMINAL ERROR MESSAGES                                      */\n\n DCL ERROR1         CHAR(72) STATIC INIT(\n  '*** ERROR: INVALID NAME ENTERED OR MISSING COMMA ***');\n DCL ERROR2         CHAR(72) STATIC INIT(\n  '*** ERROR: INVALID OPTION ENTERED ***');\n DCL ERROR3         CHAR(72) STATIC INIT(\n  '*** ERROR: INVALID NUMBER ENTERED ***');\n DCL ERROR4         CHAR(72) STATIC INIT(\n  '*** INVALID PASSWORD ENTERED - RESTART FROM BEGINING ***');\n DCL ERROR5         CHAR(72) STATIC INIT(\n  '*** NO CHANGE MADE TO BASE * * INVALID DEVICE TYPE ENCOUNTERED ***');\n DCL ERROR5A        CHAR(72) STATIC INIT('**          ** ');\n DCL ERROR6         CHAR(72) STATIC INIT(\n  '*** NO CHANGE MADE TO BASE * * OVER 4095 VOLUMES CATALOGUED ***');\n DCL ERROR7         CHAR(72) STATIC INIT(\n  '*** ERROR * * * OVER 4095 VOLUMES CATALOGUED ***');\n\n   /* WORK AREAS                                                   */\n\n DCL GDGLOUT1       CHAR(72) STATIC;         /* TERM OUTPUT WORK     */\n DCL GDGLINP1       CHAR(72) STATIC;         /* TERM INPUT WORK      */\n DCL ENTRIES        PIC'999' STATIC;         /* EXISTING LIMIT       */\n DCL NUMREQ         PIC'999' STATIC;         /* LE REQUEST LIMIT     */\n DCL NEWENT         PIC'999' STATIC;         /* NEW LIMIT FOR CHANGE */\n DCL IDCP           POINTER;\n DCL IDCWORK        CHAR(137) BASED(IDCP);\n DCL LIMIT          CHAR(3) STATIC INIT(' ');/* LIMIT FROM AMS       */\n DCL GDGNUM         CHAR(8) STATIC INIT(' ');/* GXXXXVYY FROM AMS    */\n DCL CREATE         CHAR(6) STATIC INIT(' ');/* CAT DATE FROM AMS    */\n DCL VOLSER         CHAR(6) STATIC INIT(' ');/* VOLSER FROM AMS      */\n DCL DEVTYP         CHAR(8) STATIC INIT(' ');/* DEVTYPE FROM AMS     */\n DCL DEVTYP6        CHAR(6) STATIC          ;/* DEVTYPE FROM FNDDEV  */\n DCL GTABINXX       FIXED BIN (31,0) STATIC INIT (0); /* INDEX TO    */\n                                             /* GTABINX AND GTABDLL  */\n DCL FIRST          FIXED BIN (31,0) STATIC INIT(0);\n DCL TABFULL        FIXED BIN (31,0) STATIC INIT(0); /* TABLE FULL   */\n DCL GTEMPNXX       FIXED BIN (31,0) STATIC; /* TEMP INDEX TO GTABINX*/\n DCL GTEMPNXY       FIXED BIN (31,0) STATIC; /* TEMP INDEX TO GTABINX*/\n DCL GTABSUBS       FIXED BIN (31,0) STATIC; /* TEMP START OF ENTRY  */\n DCL NUMRESP        FIXED BIN (31,0) STATIC; /* NUMBER OF RESP GIVEN */\n DCL DEVSUBS        FIXED BIN (31,0) STATIC; /* WORK FOR RECAT SUBSTR*/\n DCL TEMPDLL        FIXED BIN (31,0) STATIC; /* TEMP LENGTH OF ENTRY */\n DCL NAMELEN        FIXED BIN (31,0) STATIC; /* LEN OF GDG-BASE NAME */\n DCL GTABINX  (256) FIXED BIN (31,0) STATIC; /* START OF ENTRY       */\n DCL GTABDLL  (256) FIXED BIN (31,0) STATIC; /* LENGTH OF ENTRY      */\n DCL (I,J)          FIXED BIN (31,0) STATIC;\n DCL GTABNAM   (256) CHAR(8)         STATIC; /* SAVE AREA GEN NAMES  */\n DCL GTABCRT   (256) CHAR(6)         STATIC; /* SAVE AREA CREATE DATE*/\n DCL GTABDATV (4095) CHAR(6)         STATIC; /* SAVE AREA VOLSERS    */\n DCL GTABDATD (4095) CHAR(8)         STATIC; /* SAVE AREA DEVTYPES   */\n                       /* NUMDEV IS NUMBER OF DEVICE TYPES IN DEVTAB */\n DCL NUMDEV         FIXED BIN (31,0) STATIC INIT(10);\n DCL DEVTAB (NUMDEV) CHAR(12)     AUTOMATIC INIT('2009  3330  ',\n                                                 '200A  3340  ',\n                                                 '200B  3350  ',\n                                                 '200C  3375  ',\n                                                 '200D  3330-1',\n                                                 '200E  3380  ',\n                                                 '200F  3390  ',\n                                                 '8001  2400  ',\n                                                 '8003  3400-6',\n                                                 '8080  3480  ');\n\n DCL MODAY (2,13) FIXED BIN (15,0) STATIC INIT(\n  0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365,\n  0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 );\n DCL MON (12) CHAR (3) STATIC INIT('JAN','FEB','MAR','APR','MAY',\n              'JUN','JUL','AUG','SEP','OCT','NOV','DEC');\n DCL MONTHC   CHAR (3) STATIC ;\n DCL YEARC    CHAR (2) STATIC ;\n DCL DAYC     CHAR (2) STATIC ;\n DCL YEARB    FIXED BIN (15,0) STATIC;\n DCL DAYB     FIXED BIN (15,0) STATIC;\n DCL JDAYB    FIXED BIN (15,0) STATIC;\n DCL JDAYC    CHAR (3) STATIC ;\n DCL LEAP     FIXED BIN (15,0) STATIC;\n DCL GNUMB    FIXED BIN (15,0) STATIC;\n DCL GNUMC    CHAR (3) STATIC ;\n\n DCL (ONCHAR,ONCODE,SUBSTR,BIN,CHAR,MOD) BUILTIN;\n   ON CONVERSION BEGIN;       /* REPLACE ALPHA CHARS WITH ZEROS     */\n     IF ONCODE = 612 THEN DO; /* IF CONVERSION ERROR                */\n       ONCHAR = '0';\n     END;\n   END;\n\n   OPEN FILE (GDGLOUT) OUTPUT;/* WRITE FULL BANNER LINES FIRST TIME */\n   GDGLOUT1 = ' ';\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   WRITE FILE (GDGLOUT) FROM (BANNER1);\n   WRITE FILE (GDGLOUT) FROM (BANNER1A);\n   WRITE FILE (GDGLOUT) FROM (BANNER1B);\n   WRITE FILE (GDGLOUT) FROM (BANNER1C);\n   GDGLOUT1 = ' ';\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   CLOSE FILE (GDGLOUT);\n\n SREQIN1:\n   DO I = 1 TO 256;           /* CLEAR INDEX POINTERS               */\n     GTABINX(I) = 0;\n     GTABDLL(I) = 0;\n   END;\n   GTABINX(1) = 1;            /* SET TO POINT TO 1ST OF GTABDATV    */\n   GTABINXX   = 0;\n   NUMREQ = 0;\n   NEWENT = 0;\n   GNUMB  = 0;\n   LIMIT = ' ';\n   IF FIRST = 0 THEN GOTO SREQIN3;\n\n   OPEN FILE (GDGLOUT) OUTPUT;\n\n SREQIN2:                     /* WRITE SHORT BANNER AFTER 1ST TIME  */\n   GDGLOUT1 = ' ';\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   WRITE FILE (GDGLOUT) FROM (BANNER3);\n   GDGLOUT1 = ' ';\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   CLOSE FILE (GDGLOUT);\n\n SREQIN3:                     /* READ REQUEST                       */\n   OPEN FILE (GDGLINP) INPUT;\n   GDGLINP1 = ' ';\n   READ FILE (GDGLINP) INTO (GDGLINP1);\n   CLOSE FILE (GDGLINP);\n\n   IF SUBSTR(GDGLINP1,1,4) = 'END '  |\n      SUBSTR(GDGLINP1,1,2) = 'E '    |\n      SUBSTR(GDGLINP1,1,5) = 'QUIT ' |\n      SUBSTR(GDGLINP1,1,2) = 'Q '   THEN GOTO ENDJOB;\n\n   DO I = 1 TO 36;            /* PARSE FOR NAME OF GDG-BASE         */\n     IF SUBSTR(GDGLINP1,I,1) = ',' |\n        SUBSTR(GDGLINP1,I,1) = ' ' THEN DO;\n       NAMELEN = I-1;\n       SUBSTR(IDCAMIN1,12,35)      = ' ';\n       SUBSTR(IDCAMIN1,12,NAMELEN) = SUBSTR(GDGLINP1,1,NAMELEN);\n       SUBSTR(IDCAMIN2,12,35)      = ' ';\n       SUBSTR(IDCAMIN2,12,NAMELEN) = SUBSTR(GDGLINP1,1,NAMELEN);\n       GOTO EREQIN1;\n     END;\n   END;\n   OPEN FILE (GDGLOUT) OUTPUT;\n   WRITE FILE (GDGLOUT) FROM (ERROR1);\n   GOTO SREQIN2;\n\n EREQIN1:                     /* PARSE FOR OPERAND                  */\n   IF SUBSTR(GDGLINP1,I,1) = ' ' THEN DO;\n     NUMREQ = 0;\n     GOTO EREQIN2;\n   END;\n   I = I + 1;                 /* IF LIST ENTRIES WITH SUBOPERAND    */\n   IF SUBSTR(GDGLINP1,I,3) = 'LE,' THEN DO;\n     IF SUBSTR(GDGLINP1,I+3,3) = 'ALL' THEN DO;\n       NUMREQ = 256;\n       GOTO EREQIN2;\n     END;\n     I = I + 3;\n     DO J = 1 TO 3;           /* FIND HOW MANY ENTRIES TO LIST      */\n       IF SUBSTR(GDGLINP1,I+J,1) = ' ' THEN DO;\n         NUMREQ = SUBSTR(GDGLINP1,I,J);\n         GOTO EREQIN2;\n       END;\n     END;\n     OPEN FILE (GDGLOUT) OUTPUT;\n     WRITE FILE (GDGLOUT) FROM (ERROR3);\n     GOTO SREQIN2;\n   END;\n   IF SUBSTR(GDGLINP1,I,2) = 'LE' THEN DO;\n     NUMREQ = 5;              /* IF LE ONLY THEN DEFAULT TO LIST 5  */\n     GOTO EREQIN2;\n   END;\n                              /* IF LIMIT - SETUP FOR CHANGE BASE   */\n   IF SUBSTR(GDGLINP1,I,6) = 'LIMIT=' THEN DO;\n     I = I + 6;\n     DO J = 1 TO 3;\n       IF SUBSTR(GDGLINP1,I+J,1) = ' ' |\n          SUBSTR(GDGLINP1,I+J,1) = ',' THEN DO;\n         NEWENT = SUBSTR(GDGLINP1,I,J);\n         IF NEWENT = 0 | NEWENT > 255 THEN GOTO INVNEW;\n                              /* IF NEW THEN GO TO SETUP FOR CREATE */\n         IF SUBSTR(GDGLINP1,I+J,4) = ',NEW' THEN GOTO NEWGDG;\n                              /* IF CHANGE THEN REQUEST PASSWORD    */\n         OPEN FILE (GDGLOUT) OUTPUT;\n         WRITE FILE (GDGLOUT) FROM (BANNER4);\n         CLOSE FILE (GDGLOUT);\n         OPEN FILE (GDGLINP) INPUT;\n         READ FILE (GDGLINP) INTO (GDGLINP1);\n         CLOSE FILE (GDGLINP);\n         IF SUBSTR(GDGLINP1,1,8) \u00ac= 'MASTERPW' THEN DO;\n           OPEN FILE (GDGLOUT) OUTPUT;\n           WRITE FILE (GDGLOUT) FROM (ERROR4);\n           GOTO SREQIN2;\n         END;\n         GOTO EREQIN2;\n       END;\n     END;\n INVNEW:\n     OPEN FILE (GDGLOUT) OUTPUT;\n     WRITE FILE (GDGLOUT) FROM (ERROR3);\n     GOTO SREQIN2;\n   END;\n                              /* IF LI THEN SETUP FOR LIST BASE ONLY*/\n   IF SUBSTR(GDGLINP1,I,2) = 'LI' THEN DO;\n     NUMREQ = 0;\n     GOTO EREQIN2;\n   END;\n\n   OPEN FILE (GDGLOUT) OUTPUT;\n   WRITE FILE (GDGLOUT) FROM (ERROR2);\n   GOTO SREQIN2;\n\n EREQIN2:                     /* WRITE REQUEST TO TEMP FILE FOR AMS */\n   OPEN FILE (IDCAMIN) OUTPUT;\n   WRITE FILE (IDCAMIN) FROM (IDCAMIN1);\n   WRITE FILE (IDCAMIN) FROM (IDCAMIN2);\n   CLOSE FILE (IDCAMIN);\n\n   FETCH IDCAMS;              /* LOAD AND CALL AMS                  */\n   CALL IDCAMS (OPTS,DDNAMLST);\n   RELEASE IDCAMS;\n   OPEN FILE (IDCAMOU) INPUT;\n\n READIDCW:                    /* READ AND PARSE RESPONSE FROM AMS   */\n   READ FILE (IDCAMOU) SET(IDCP);\n   IF LIMIT = ' ' THEN DO;\n     IF SUBSTR(IDCWORK,9,5) = 'LIMIT' THEN DO;\n       LIMIT = SUBSTR(IDCWORK,30,3);\n       DO I = 1 TO 3;         /* CHANGE - TO 0 IF LIMIT < 100       */\n         IF SUBSTR(LIMIT,I,1) = '-' THEN SUBSTR(LIMIT,I,1) = '0';\n       END;\n     END;\n   END;\n   ELSE DO;                   /* IF GDG NAME                        */\n     IF SUBSTR(IDCWORK,2,7) = 'NONVSAM' THEN DO;\n       GDGNUM = SUBSTR(IDCWORK,18+NAMELEN+1,8);\n       IF SUBSTR(GDGNUM,1,1)              = 'G' &\n          SUBSTR(GDGNUM,2,1)             >= '0' &\n          SUBSTR(GDGNUM,3,1)             >= '0' &\n          SUBSTR(GDGNUM,4,1)             >= '0' &\n          SUBSTR(GDGNUM,5,1)             >= '0' &\n          SUBSTR(GDGNUM,6,1)              = 'V' &\n          SUBSTR(GDGNUM,7,1)             >= '0' &\n          SUBSTR(GDGNUM,8,1)             >= '0' THEN DO;\n         IF GTABINXX = 0 THEN DO;\n           GTABSUBS = 1;        /* SET POINTER FIRST TIME TO 1       */\n         END;\n         ELSE DO;               /* CALC POINTER TO NEXT FREE SLOT    */\n           GTABSUBS = GTABSUBS + GTABDLL(GTABINXX);\n         END;\n         GTABINXX = GTABINXX + 1;      /* SET INDEX FOR ENTRY        */\n         GTABINX(GTABINXX) = GTABSUBS; /* SET START OF ENTRY         */\n         GTABNAM(GTABINXX) = GDGNUM;   /* SAVE GXXXVYY IN TABLE      */\n         VOLSER = '      ';            /* FLAG GOOD INDEX            */\n       END;\n       ELSE DO;\n         VOLSER = '@%#&$!';            /* FLAG OTHER INDEX           */\n       END;\n     END;\n                              /* SAVE CATALOG - CREATE DATE          */\n     IF SUBSTR(IDCWORK,9,8) = 'OWNER-ID' &\n        VOLSER \u00ac= '@%#&$!' THEN DO;\n       CREATE = SUBSTR(IDCWORK,56,6);\n       GTABCRT(GTABINXX) = CREATE; /* SAVE CREATE DATE IN TABLE     */\n     END;\n                              /* SAVE EACH VOLSER/DEVICE TYPE       */\n     IF SUBSTR(IDCWORK,9,6) = 'VOLSER' &\n        VOLSER \u00ac= '@%#&$!' THEN DO;\n       VOLSER = SUBSTR(IDCWORK,27,6);\n       DEVTYP = SUBSTR(IDCWORK,53,8);\n       GTEMPNXX = GTABSUBS+GTABDLL(GTABINXX); /* CALC NEW SLOT      */\n       IF GTEMPNXX >= 4095 THEN DO;\n         TABFULL = 1;\n         GOTO ENDIDCOU;\n       END;\n       GTABDATV(GTEMPNXX) = VOLSER; /* SAVE VOLSER IN TABLE         */\n       GTABDATD(GTEMPNXX) = DEVTYP; /* SAVE DEVTYP IN TABLE         */\n       GTABDLL(GTABINXX) = GTABDLL(GTABINXX) + 1; /* RESET LENGTH   */\n     END;\n   END;\n GOTO READIDCW;\n\n ENDIDCOU:                    /* EOF ADDR ON IDCAMOU FILE           */\n   CLOSE FILE (IDCAMOU);\n   OPEN FILE (GDGLOUT) OUTPUT;\n   GDGLOUT1 = ' ';\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   IF LIMIT = ' ' THEN DO;    /* NO LIMIT FOUND - NOT GDG-BASE      */\n     SUBSTR(GDGLOUT1,1,3) = '***';\n     SUBSTR(GDGLOUT1,7,35)  = SUBSTR(IDCAMIN1,12,35);\n     SUBSTR(GDGLOUT1,45,12) = 'IS NOT A GDG';\n     WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n     GOTO ENDRESP;\n   END;\n                              /* SET UP LIST BASE ENTRY LINE        */\n   SUBSTR(GDGLOUT1,1,5)   = 'BASE:';\n   SUBSTR(GDGLOUT1,7,35)  = SUBSTR(IDCAMIN1,12,35);\n   SUBSTR(GDGLOUT1,44,6)  = 'LIMIT:';\n   SUBSTR(GDGLOUT1,51,3)  = LIMIT;\n   SUBSTR(GDGLOUT1,58,8)  = 'ENTRIES:';\n   ENTRIES                = GTABINXX;\n   SUBSTR(GDGLOUT1,67,3)  = ENTRIES  ;\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   GDGLOUT1 = ' ';\n   IF TABFULL = 1 THEN WRITE FILE (GDGLOUT) FROM (ERROR7);\n\n   IF NEWENT \u00ac= 0 THEN GOTO UNCAT;\n\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   NUMRESP = 0;\n                           /* WRITE THE TABLE BACK IN INVERTED ORDER */\n   DO GTEMPNXX = GTABINXX TO 1 BY -1;\n     IF NUMREQ = NUMRESP THEN GOTO ENDRESP;\n     NUMRESP = NUMRESP + 1;\n                              /* SET START OF ENTRY FROM INDEX      */\n     GTEMPNXY = GTABINX(GTEMPNXX);\n     SUBSTR(GDGLOUT1,2,4)   = 'GEN:';\n     SUBSTR(GDGLOUT1,7,8)   = GTABNAM(GTEMPNXX);\n     GNUMC = SUBSTR(CHAR(GNUMB,9),7,3);\n     SUBSTR(GDGLOUT1,18,3) = GNUMC;\n     SUBSTR(GDGLOUT1,21,1) = ')';\n     IF      GNUMB  =  0 THEN SUBSTR(GDGLOUT1,19,1) = '(';\n     ELSE IF GNUMB <=  9 THEN SUBSTR(GDGLOUT1,18,2) = '(-';\n     ELSE IF GNUMB <= 99 THEN SUBSTR(GDGLOUT1,17,2) = '(-';\n     ELSE                     SUBSTR(GDGLOUT1,16,2) = '(-';\n     GNUMB = GNUMB + 1;\n     SUBSTR(GDGLOUT1,25,5)  = 'DATE:';\n     CREATE = GTABCRT(GTEMPNXX);\n     YEARC = SUBSTR(CREATE,1,2);\n     JDAYC = SUBSTR(CREATE,4,3);\n     YEARB = BIN(YEARC,15);\n     JDAYB = BIN(JDAYC,15);\n     LEAP = 1;\n     IF MOD(YEARB,4) = 0 & MOD(YEARB,100) \u00ac= 0 THEN LEAP = 2;\n     DO I = 2 TO 13;\n       IF MODAY(LEAP,I) >= JDAYC THEN DO;\n         DAYB = JDAYB - MODAY(LEAP,I-1);\n         DAYC = SUBSTR(CHAR(DAYB,9),8,2);\n         IF SUBSTR(DAYC,1,1) = ' ' THEN SUBSTR(DAYC,1,1) = '0';\n         MONTHC = MON(I-1);\n         GOTO DATEFND;\n       END;\n     END;\n DATEFND:\n     SUBSTR(GDGLOUT1,31,2)  = DAYC;\n     SUBSTR(GDGLOUT1,33,3)  = MONTHC;\n     SUBSTR(GDGLOUT1,36,2)  = YEARC;\n     SUBSTR(GDGLOUT1,40,4)  = 'VOL:';\n     SUBSTR(GDGLOUT1,45,6)  = GTABDATV(GTEMPNXY);\n     SUBSTR(GDGLOUT1,53,4)  = 'DEV:';\n     CALL FINDDEV;\n     SUBSTR(GDGLOUT1,58,6)  = DEVTYP6;\n     WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n     GDGLOUT1 = ' ';\n     TEMPDLL = 1 ;\n                              /* PICK UP ADDITIONAL VOLSER/DEVICES  */\n     DO WHILE (GTABDLL(GTEMPNXX) \u00ac= TEMPDLL);\n       GTEMPNXY = GTEMPNXY + 1;\n       SUBSTR(GDGLOUT1,45,6)  = GTABDATV(GTEMPNXY);\n       CALL FINDDEV;\n       SUBSTR(GDGLOUT1,58,6)  = DEVTYP6;\n       WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n       GDGLOUT1 = ' ';\n       TEMPDLL = TEMPDLL + 1;\n     END;\n   END;\n   CLOSE FILE (GDGLOUT);\n   GOTO ENDRESP;\n\n                              /* BUILD THE AMS CONTROL CARDS TO     */\n                              /* UNCAT EACH GEN, DELETE THE BASE,   */\n                              /* REBUILD THE BASE WITH NEW LIMIT,   */\n UNCAT:                       /* AND RECAT EACH GEN THAT WILL FIT   */\n   CLOSE FILE (GDGLOUT);\n   OPEN FILE (IDCAMIN) OUTPUT;\n   IF TABFULL = 1 THEN GOTO ABORT2; /* DONT MESS UP WITH OVERFLOWS  */\n   SUBSTR(IDCAMIN3,7,44) = ' ';\n   SUBSTR(IDCAMIN3,7,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);\n                              /* SET UP FOR UNCAT OF EACH GEN       */\n   DO GTEMPNXX = 1 TO GTABINXX;\n     SUBSTR(IDCAMIN3,NAMELEN+7,1) = '.';\n     SUBSTR(IDCAMIN3,NAMELEN+8,8) = GTABNAM(GTEMPNXX);\n     SUBSTR(IDCAMIN3,60,4)        = 'NSCR';\n     I = GTABINXX - GTEMPNXX;\n                              /* IF DECREMENTING LIMIT AND GENS TO  */\n     IF I >= NEWENT THEN DO;  /* BE DROPPED, SCRATCH IF ON DASD     */\n       GTEMPNXY = GTABINX(GTEMPNXX);\n       IF SUBSTR(GTABDATD(GTEMPNXY),5,2) = '20' THEN\n         SUBSTR(IDCAMIN3,60,4)        = '    ';\n     END;\n     WRITE FILE (IDCAMIN) FROM (IDCAMIN3);\n   END;\n                              /* SET UP TO UNCAT BASE ENTRY         */\n   SUBSTR(IDCAMIN4,7,35)      = ' ';\n   SUBSTR(IDCAMIN4,7,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);\n   WRITE FILE (IDCAMIN) FROM (IDCAMIN4);\n                              /* SET UP TO BUILD NEW BASE ENTRY     */\n   SUBSTR(IDCAMIN5,15,35)      = ' ';\n   SUBSTR(IDCAMIN5,15,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);\n   SUBSTR(IDCAMIN5,59,3)       = NEWENT;\n   WRITE FILE (IDCAMIN) FROM (IDCAMIN5);\n   SUBSTR(IDCAMIN6,17,44) = ' ';\n   SUBSTR(IDCAMIN6,17,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);\n                              /* SET UP TO RECAT EACH GENERATION    */\n   DO GTEMPNXX = 1 TO GTABINXX;\n     I = GTABINXX - GTEMPNXX;\n                              /* DONT RECAT IF IT WONT FIT          */\n     IF I >= NEWENT THEN GOTO NORECAT;\n     SUBSTR(IDCAMIN6,NAMELEN+17,1) = '.';\n     SUBSTR(IDCAMIN6,NAMELEN+18,8) = GTABNAM(GTEMPNXX);\n     WRITE FILE (IDCAMIN) FROM (IDCAMIN6);\n     GTEMPNXY = GTABINX(GTEMPNXX);\n     TEMPDLL = 0;\n     IDCAMIN7 = ' ';\n     SUBSTR(IDCAMIN7,2,5) = 'DEVT(';\n     DEVSUBS = 7;\n     DO WHILE (GTABDLL(GTEMPNXX) \u00ac= TEMPDLL);\n       CALL FINDDEV;          /* FIND DEVICE TYPE IN TABLE          */\n       SUBSTR(IDCAMIN7,DEVSUBS,6)  = DEVTYP6;\n       GTEMPNXY = GTEMPNXY + 1;\n       IF DEVSUBS >= 56 THEN DO;\n         IF GTABDLL(GTEMPNXX) > TEMPDLL THEN DO;\n           SUBSTR(IDCAMIN7,63,1) = '-';\n           WRITE FILE (IDCAMIN) FROM (IDCAMIN7);\n           IDCAMIN7 = ' ';\n           DEVSUBS = 0;\n         END;\n       END;\n       TEMPDLL = TEMPDLL + 1;\n       DEVSUBS = DEVSUBS + 7;\n     END;\n     SUBSTR(IDCAMIN7,DEVSUBS,3) = ') -';\n     WRITE FILE (IDCAMIN) FROM (IDCAMIN7);\n     GTEMPNXY = GTABINX(GTEMPNXX);\n     TEMPDLL = 0;\n     IDCAMIN8 = ' ';\n     SUBSTR(IDCAMIN8,2,5) = ' VOL(';\n     DEVSUBS = 7;\n     DO WHILE (GTABDLL(GTEMPNXX) \u00ac= TEMPDLL);\n       SUBSTR(IDCAMIN8,DEVSUBS,6)  = GTABDATV(GTEMPNXY);\n       GTEMPNXY = GTEMPNXY + 1;\n       IF DEVSUBS >= 56 THEN DO;\n         IF GTABDLL(GTEMPNXX) > TEMPDLL THEN DO;\n           SUBSTR(IDCAMIN8,63,1) = '-';\n           WRITE FILE (IDCAMIN) FROM (IDCAMIN8);\n           IDCAMIN8 = ' ';\n           DEVSUBS = 0;\n         END;\n       END;\n       TEMPDLL = TEMPDLL + 1;\n       DEVSUBS = DEVSUBS + 7;\n     END;\n     SUBSTR(IDCAMIN8,DEVSUBS,3) = ') )';\n     WRITE FILE (IDCAMIN) FROM (IDCAMIN8);\n\n NORECAT:\n   END;\n\n CALLAMS:                     /* CALL IDCAMS FOR CHANGE             */\n   CLOSE FILE (IDCAMIN);\n\n   FETCH IDCAMS;\n   CALL IDCAMS (OPTS,DDNAMLS2); /* CALL WITH SYSPRINT TO TERMINAL   */\n   RELEASE IDCAMS;\n\n   GOTO ENDRESP;\n\n NEWGDG:                      /* SET UP FOR CREATE NEW BASE         */\n   OPEN FILE (IDCAMIN) OUTPUT;\n   SUBSTR(IDCAMIN5,15,35)      = ' ';\n   SUBSTR(IDCAMIN5,15,NAMELEN) = SUBSTR(IDCAMIN1,12,NAMELEN);\n   SUBSTR(IDCAMIN5,59,3)       = NEWENT;\n   WRITE FILE (IDCAMIN) FROM (IDCAMIN5);\n   GOTO CALLAMS;\n\n ABORT1:\n   CLOSE FILE (IDCAMIN);\n   OPEN FILE (GDGLOUT) OUTPUT;\n   WRITE FILE (GDGLOUT) FROM (ERROR5);\n   SUBSTR(ERROR5A,4,8) =  GTABDATD(GTEMPNXY);\n   WRITE FILE (GDGLOUT) FROM (ERROR5A);\n\n ABORT1A:\n   GDGLOUT1 = ' ';\n   SUBSTR(GDGLOUT1,1,8) = '* * FOR:';\n   SUBSTR(GDGLOUT1,10,NAMELEN+9) = SUBSTR(IDCAMIN6,17,NAMELEN+9);\n   WRITE FILE (GDGLOUT) FROM (GDGLOUT1);\n   CLOSE FILE (GDGLOUT);\n   GOTO ENDRESP;\n\n ABORT2:\n   CLOSE FILE (IDCAMIN);\n   OPEN FILE (GDGLOUT) OUTPUT;\n   WRITE FILE (GDGLOUT) FROM (ERROR6);\n   GOTO ABORT1A;\n\n ENDRESP:\n   FIRST = 1;\n   GOTO SREQIN1;\n\n FINDDEV: PROC;\n   DO I = 1 TO NUMDEV;    /* FIND DEVICE TYPE IN TABLE          */\n     IF SUBSTR(DEVTAB(I),1,4)  = SUBSTR(GTABDATD(GTEMPNXY),5,4)\n       THEN DO;           /* FILL IN DEVICE TYPE IN AMS CARD    */\n         DEVTYP6 = SUBSTR(DEVTAB(I),7,6);\n         RETURN;\n     END;\n   END;\n   GOTO ABORT1;\n END;\n\n ENDJOB:\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTOERWAT": {"ttr": 1287, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//S40DA01S JOB (11613109,0402,1,1,,LONG,,,104),PURDY,CLASS=H,\n//            MSGCLASS=X\n//ASM     EXEC PGM=IEV90,\n//             PARM='NODECK,OBJ,LINECNT=99,BUFSIZE(MAX),RENT',\n//             REGION=4096K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\n*          DATA SET WTOERWAT   AT LEVEL 005 AS OF 10/20/86\nWTOERWAT TITLE 'WTOERWAT -- WTOR EXIT TO REPLY \"WAIT\" TO MESSAGE'\nWTOERWAT CSECT\nWTOERWAT AMODE 31\nWTOERWAT RMODE ANY\n         USING *,R12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         B     START\n         DC    C'WTOERWAT'\n         DC    C'&SYSDATE',C' &SYSTIME'\n         PRINT NOGEN\nSTART    L     R11,0(R1)           PICK UP ADDRESS OF CTXT\n         USING CTXT,R11\n         L     R10,CTXTTXPJ   LOAD POINTER TO THE MESSAGE ATTRIBUTES\n         USING CTXTATTR,R10\n         TM    CTXTTFB1,CTXTTFWR  WTOR?\n         BNO   RETURN          NO, FORGET IT\n         LA    R3,CTXTTMSG    LOAD START OF MESSAGE\n         LA    R4,1           LOAD INCREMENT\n         LA    R5,CTXTTMSG+L'CTXTTMSG-6 END OF MESSAGE\nWAITCK   CLC   =C'''WAIT''',0(R3) IS THERE A \"WAIT\" IN MESSAGE?\n         BE    WAITOK          YES, REPLY TO IT\n         CLC   =C' WAIT ',0(R3) IS THERE A \"WAIT\" IN MESSAGE?\n         BE    WAITOK          YES, REPLY TO IT\n         CLC   =C' WAIT,',0(R3) IS THERE A \"WAIT\" IN MESSAGE?\n         BE    WAITOK          YES, REPLY TO IT\n         BXLE  R3,R4,WAITCK   NOT YET, TRY AGAIN\n         B     RETURN         NO, FORGET IT\nWAITOK   GETMAIN RU,LV=WORKEND,SP=230,LOC=(BELOW,ANY)\n         ST    R13,4(R1)\n         ST    R1,8(R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n         XC    MGCRPL(MGCRSIZ),MGCRPL CLEAR THE MGCR AREA\n         MVC   MGCRTEXT(L'REPLY),REPLY MOVE REPLY TO MACRO AREA\n         MVC   MGCRTEXT+6(L'CTXTRPID),CTXTRPID\n         LA    R3,(MGCRTEXT-MGCRPL)+L'REPLY\n         STC   R3,MGCRLGTH    SET THE LENGTH OF THE REPLY\n         SR    R0,R0          CLEAR R0 FOR SOME REASON\n         MGCR  MGCRPL\n         SPACE\n         MVC   SMFREC(SMFSLEN),SMFSKEL MOVE SKELETON SMF RECORD\n         TIME  BIN           GET DATE AND TIME\n         ST    R0,SMFDTIME   STORE DATE & TIME IN RECORD\n         ST    R1,SMFDDATE\n         L     R1,16         LOAD ADDRESS OF CVT\n         L     R1,196(R1)    LOAD ADDRESS OF SMCA\n         MVC   SMFDSID,16(R1) MOVE SYSTEM ID FROM SMCA\n         SPACE\n         SMFWTM SMFREC       WRITE SMF RECORD\n         SPACE\n         L     R10,4(R13)     RETURN TO MPF\n         FREEMAIN RU,LV=WORKEND,A=(R13),SP=230\n         LR    R13,R10\n         SPACE\n         SPACE\nRETURN   LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE 1\nREPLY    DC    C'REPLY NN,''WAIT'' BY WTOERWAT'\n         CNOP  2,4\nSMFSKEL  DS    0H        SMF RECORD TO BE WRITTEN\nSMFLEN   DC    H'19'     RECORD LENGTH\nSMFSEG   DC    H'0'      SEGMENT INDICATOR\nSMFSIND  DC    X'06'     SYSTEM INDICATOR\nSMFRECTY DC    AL1(200)  RECORD TYPE\nSMFTIME  DS    XL4       TIME\nSMFDATE  DS    XL4       DATE\nSMFSID   DS    CL4       SYSTEM ID\nSMFTYPE  DC    C'A'      A - ALLOCATION RECOVERY\nSMFSLEN  EQU   *-SMFSKEL\n         SPACE\n         LTORG\n         SPACE 3\n         PRINT   GEN\nWORKAREA DSECT\n         DS    18F            SAVE AREA\n         CNOP  2,4\nSMFREC   DS    0H        SMF RECORD TO BE WRITTEN\nSMFDLEN  DS    H         LENGTH\nSMFDSEG  DS    H         SEGMENT INDICATOR\nSMFDSIND DS    XL1       SYSTEM INDICATOR\nSMFDRECT DS    XL1       RECORD TYPE\nSMFDTIME DS    XL4       TIME\nSMFDDATE DS    XL4       DATE\nSMFDSID  DS    CL4       SYSTEM ID\nSMFDTYPE DS    CL1       A - ALLOCATION RECOVERY\n         SPACE\n         IEZMGCR DSECT=NO\n         ORG\nWORKEND  EQU   *-WORKAREA\n         SPACE 3\n         IEZVX100\n         PRINT NOGEN\n         REGEQU\n         END   WTOERWAT\n/*\n//LKED1   EXEC PGM=IEWL,PARM='LIST,LET,MAP,XREF,RENT,REFR',\n//             COND=(8,LT,ASM)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n  SETCODE AC(1)\n  NAME WTOERWAT(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WTOETPS1": {"ttr": 1290, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//S40DA01S JOB (11613109,0402,1,1,,LONG,,,104),PURDY,CLASS=H,\n//            MSGCLASS=X\n//ASM     EXEC PGM=IEV90,\n//             PARM='NODECK,OBJ,LINECNT=99,BUFSIZE(MAX),RENT',\n//             REGION=4096K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\n*          DATA SET WTOETPS1   AT LEVEL 004 AS OF 01/08/88\nWTOETPS1 TITLE 'WTOETPS1 -- MACROS TO INITIALIZE TAPE TABLE IN CSA'\n         MACRO\n&NAME1   STRING  &ADDRESS=,&STACKER=N\n         GBLA  &OFFSET\n         LCLA  &RANGE,&I\n         LCLC  &CONST,&START,&A,&STKR\n         AIF   (&OFFSET NE 0).AFTINIT\n&NAME1   B     STRINGGM       BRANCH TO DO THE GETMAIN\nSTRINGIN DS    0H             INITIALIZE THE TAPE TABLE\n.AFTINIT ANOP\n&MAXIMUM SETC  '0123456789ABCDEF'\n&CPTR    SETA  0\n&CONST   SETC  '&ADDRESS(1)'(1,2)\n.*               ASSUMES A THREE DIGIT DEVICE ADDRESS\n&START   SETC  '&ADDRESS(1)'(3,1)\n&RANGE   SETA  1\n         AIF   (K'&ADDRESS LT 2).NORANGE\n&RANGE   SETA  &ADDRESS(2)\n.NORANGE ANOP\n&CPTR    SETA  &CPTR+1\n         AIF   ('&START' NE '&MAXIMUM'(&CPTR,1)).NORANGE\n.*    TABLE LAYOUT:\n.*       RESERVED            CL1\n.*       UNIT ADDRESS        CL3\n.*       NUMBER OF ENTRIES   H\n.*       VOLUME SERIALS      CL6\n         SPACE 1\n&ENTRIES SETA  2             AN ORDINARY TAPE DRIVE\n         SPACE 1\n&STKR    SETC  '&STACKER'\n         AIF   ('&STKR' EQ 'N').NOSTKR\n         SPACE 1\n&ENTRIES SETA  6 A TAPE DRIVE WITH A STACKER FOR UNLOADED TAPES\n         SPACE 1\n.NOSTKR  ANOP\n         MVC   TAPETBL+&OFFSET.(3),=C' &CONST.' INITIALIZE EACH ENTRY\n.*               ASSUMES A THREE DIGIT DEVICE ADDRESS\n&A       SETC  '&MAXIMUM'(&CPTR,1)\n&I       SETA  &OFFSET+3\n         MVI   TAPETBL+&I.,C'&A.'         CALCULATED UNIT NUMBER\n         LA    R1,&ENTRIES                VOLUMES IN DEVICE STACKER\n&I       SETA  &OFFSET+4\n         STH   R1,TAPETBL+&I              STORED IN THE TAPE TABLE\n&OFFSET  SETA  &OFFSET+6+&ENTRIES*6\n&RANGE   SETA  &RANGE-1\n&CPTR    SETA  &CPTR+1\n         AIF   (&CPTR GT 16).MEND\n         AIF   (&RANGE GT 0).NOSTKR\n.MEND    MEND\n         SPACE 3\n         MACRO\n         STRNGEND\n         GBLA  &OFFSET\n&I       SETA  &OFFSET\n         MVC   TAPETBL+&I.(6),=X'FFFFFFFF0000' INITIALIZE FINAL ENTRY\n&OFFSET  SETA  &OFFSET+6\n         B     STRINGPR       BRANCH TO PROCESSING CODE\n&OFFSET  SETA  &OFFSET+12     ADD SPACE FOR THE TABLE HEADER\nHDRLEN   EQU           12     ADD SPACE FOR THE TABLE HEADER\n*        GETMAIN RU,LV=&OFFSET,LOC=ANY,SP=241,RELATED=GETCSA\nSTRINGGM GETMAIN RU,LV=&OFFSET,LOC=ANY,SP=241,RELATED=GETCSA\n         LR    R11,R1         SAVE THE ADDRESS FOR LATER\n         LA    R2,=XL6'00'    CLEAR THE AREA TO HEX ZEROES\n         SR    R3,R3\n         LR    R4,R11\n         LA    R1,&OFFSET     STORE THE LENGTH OF THE TABLE\n         LR    R5,R1\n         BCTR  R5,0\n         MVCL  R4,R2\n         MVC   CSAEYECT,=C'WTOETPS1' SET UP THE TABLE HEADER\n         ST    R1,CSALENG\n         SR    R2,R2          STORE THE TAPE UNIT ADDRESS TABLE ADDRESS\n         CS    R2,R11,TAPESTKR\n         BE    STRINGIN INITIALIZE THE TAPE TABLE\n         L     R2,CSALENG     OOPS, SOMEBODY BEAT ME TO IT\n         MVC   0(4,R11),=C'OLD ' CHANGE THE EYE CATCHER\n         FREEMAIN RU,LV=(R2),A=(R11),SP=241,RELATED=GETCSA\n         B     START2\nSTRINGSZ DC    F'&OFFSET'     CHECK THE SIZE OF THE EXISTING AREA\nSTRINGPR DS    0H\n.MEND    MEND\n         TITLE 'WTOETPS1 -- WTO EXIT TO MAINTAIN TAPE UNLOAD DATA'\nWTOETPS1 CSECT\nWTOETPS1 AMODE 31\nWTOETPS1 RMODE ANY\n         PRINT ON,GEN\n         USING *,R12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         B     START\n         DC    C'WTOETPS1'\n         DC    C'&SYSDATE',C' &SYSTIME'\nSTART    LR    R4,R1         PRESERVE POINTER TO PASSED PARM LIST  JWP\n         SPACE\n         GETMAIN RU,LV=AREAREGS,SP=230,LOC=(BELOW,ANY) GETMAIN FOR REGS\n         SPACE\n         LR    R10,R1        SAVE POINTER TO GOTTEN AREA           JWP\n         MVI   0(R10),X'00'  CLEAR GOTTEN AREA                     JWP\n         MVC   1(AREAREGS-1,R10),0(R10)                            JWP\n         ST    R13,4(R10)    EXCHANGE THE REGISTER SAVE AREA       JWP\n         ST    R10,8(R13)    POINTERS TRICK                        JWP\n         LR    R13,R10                                             JWP\n         USING WORKREGS,R13  ESTABLISH ADDRESSABILITY TO GOTTEN AREA\n         LR    R1,R4         RESTORE REG 1                         JWP\n         SPACE\n         L     R8,CVTPTR      FIND USERCVT\n         USING CVT,R8\n         L     R9,CVTUSER\n         USING USERCVT,R9\n         LTR   R9,R9          IS THE USERCVT VALID?\n         BNZ   CVTOK           NO, DO NOT DO ANYTHING DUMB          JWP\n         SPACE 1                                                    JWP\n         LR    R3,R1          SAVE REGISTER 1                       JWP\n         GETMAIN RU,LV=80,LOC=ANY,SP=241   GET USERCVT AREA         JWP\n         CS    R9,R1,CVTUSER  STORE ADDRESS OF GOTTEN AREA          JWP\n         BNE   CVTOK          OTHER PROCESSOR  GOT HERE FIRST       JWP\n         LR    R9,R1          LOAD ADDRESS OF GOTTEN AREA           JWP\n         MVI   0(R9),X'00'    CLEAR USERCVT                         JWP\n         MVC   1(79,R9),0(R9)                                       JWP\n         MVC   0(8,R9),=C'USERCVT*' PUT IN EYECATCHER               JWP\n         LR    R1,R3          RESTORE REGISTER 1                    JWP\n         DROP  R8\n         SPACE 1\nCVTOK    L     R8,0(R1)       PICK UP ADDRESS OF CTXT\n         USING CTXT,R8\n         L     R7,CTXTTXPJ    LOAD POINTER TO THE MAJOR LINE\n         USING CTXTATTR,R7\n         TM    CTXTTFB1,CTXTTFWR  WTOR?\n         BO    RETURN          YES, SOMETHING IS WRONG\n         CLC   =C'IEC502E',CTXTTMSG IS THIS THE CORRECT MAJOR LINE?\n         BE    START1          YES, PROCESS IT\n         CLC   =C'IEF234E',CTXTTMSG IS THIS THE CORRECT MAJOR LINE?\n         BNE   RETURN          NO, DON'T KNOW WHY I WAS CALLED\nSTART1   LA    R6,CTXTTMSG+10\n         USING MSGAREA,R6\n         CLI   UNITADDR,C' '  IS THIS A TWO-CHARACTER DISPOSITION\n         BNE   START2           NO, SKIP CHANGES\n         LA    R6,1(R6)         YES, MOVE FURTHER OUT\n         SPACE 1\nSTART2   MVC   SMFREC(SMFSLEN),SMFSKEL MOVE SKELETON SMF RECORD    JWP\n         TIME  BIN           GET DATE AND TIME                     JWP\n         ST    R0,SMFDTIME   STORE DATE & TIME IN RECORD           JWP\n         ST    R1,SMFDDATE                                         JWP\n         L     R1,16         LOAD ADDRESS OF CVT                   JWP\n         L     R1,196(R1)    LOAD ADDRESS OF SMCA                  JWP\n         MVC   SMFDSID,16(R1) MOVE SYSTEM ID FROM SMCA             JWP\n         MVC   SMFDUNIT,UNITADDR MOVE IN UNIT ADDRESS              JWP\n         CLC   DISPSL,=C'SL' SEE IF DISP IS WHAT WE WANT           JWP\n         BNE   DISPPVT                                             JWP\n         MVC   SMFDJOBN,JOBNAME  MOVE IN JOBNAME                   JWP\n         CLC   JOBNAME(3),=C'T40' SEE IF TEST TYPE JOB             JWP\n         BNE   WRITESMF                                            JWP\n         MVI   SMFDTEST,C'T' FLAG THIS AS A TEST TYPE TAPE         JWP\n         B     WRITESMF                                            JWP\nDISPPVT  MVC   SMFDJOBN,JOBNAME+1  MOVE IN JOBNAME                 JWP\n         CLC   JOBNAME+1(3),=C'T40' SEE IF TEST TYPE JOB           JWP\n         BNE   WRITESMF                                            JWP\n         MVI   SMFDTEST,C'T' FLAG THIS AS A TEST TYPE TAPE         JWP\n         B     WRITESMF                                            JWP\nWRITESMF SMFWTM SMFREC       WRITE SMF RECORD                      JWP\n         SPACE\n         L     R11,TAPESTKR   FIND THE TAPE UNIT ADDRESS TABLE\n         LTR   R11,R11        IS THERE ONE?\n         BZ    STRINGS         NO, CREATE ONE\n         USING CSATABLE,R11\n         CLC   =C'WTOETPS1',CSAEYECT  IS THIS THE CORRECT TABLE?\n         BE    START3                   YES, CHECK MORE\n         EX    4,*                      NO, FIND OUT WHY\nSTART3   CLC   STRINGSZ,CSALENG       IS THE TABLE THE CORRECT LENGTH?\n         BE    STRINGPR                 YES, LET'S GO\n         SR    R1,R1                  CLEAR THE USERCVT AREA\n         LR    R2,R11\n         CS    R2,R1,TAPESTKR\n         L     R2,CSALENG\n         MVC   0(4,R11),=C'OLD ' CHANGE THE EYE CATCHER\n         FREEMAIN RU,LV=(R2),A=(R11),SP=241,RELATED=GETCSA\nSTRINGS  STRING ADDRESS=(570,4),STACKER=N\n         STRING ADDRESS=(F70,16),STACKER=Y\n         STRING ADDRESS=(580,4),STACKER=Y\n         STRNGEND\n         DROP  R11\n         SPACE 1\n         LA    R11,HDRLEN(R11)   SKIP PAST THE TAPE TABLE HEADER\nCKVOLSER CLC   =X'FFFFFFFF',0(R11) IS THIS THE END OF THE TABLE?\n         BE    CKVOLSE3              YES, FORGET IT\n         LH    R10,4(R11)          PICK UP THE NUMBER OF TABLE ENTRIES\n         LA    R3,6(R11)           FIND THE FIRST TABLE ENTRY\nCKVOLSE1 CLC   0(6,R3),VOLSER\n         BE    CKVOLSE2              YES, ERASE IT\n         LA    R3,6(R3)              NO, TRY ANOTHER\n         BCT   R10,CKVOLSE1        TRY ANOTHER VOL=SER=\n         LR    R11,R3              SET UP THE NEW POINTER\n         B     CKVOLSER            GO TO IT\nCKVOLSE2 MVC   0(6,R3),=XL6'00'  CLOBBER THE OLD VOLUME SERIAL NUMBER\n         SPACE 1\nCKVOLSE3 CLC   =CL6' ',VOLSER    IS THE VOLUME SERIAL NUMBER BLANK?\n         BE    RETURN              YES, FORGET IT\n         L     R11,TAPESTKR   FIND THE TAPE UNIT ADDRESS TABLE\n         LA    R11,HDRLEN(R11)   SKIP PAST THE TAPE TABLE HEADER\nCHKUNIT  CLC   =X'FFFFFFFF',0(R11) IS THIS THE END OF THE TABLE?\n         BE    RETURN                YES, FORGET IT\n*              ASSUMES A THREE DIGIT UNIT ADDRESS\n         CLC   1(3,R11),UNITADDR IS THIS THE CORRECT UNIT ADDRESS?\n         BE    FOUNDIT             YES, PROCESS IT\n         LH    R1,4(R11)           NO, FIND THE NEXT ONE\n         MH    R1,=H'6'          NUMBER OF TABLE ENTRIES * 6\n         LA    R11,6(R1,R11)     SKIP TO NEXT TABLE ENTRY\n         B     CHKUNIT\nSTACKER  CLC   =XL6'00',0(R11)   IS THERE A TAPE HERE?\n         BE    FOUNDIT1            NO, SKIP THE MOVE\n         BCTR  R1,0              SUBTRACT ONE\n         LR    R3,R1             CALCULATE OFFSET\n         MH    R3,=H'6'          CALCULATE END OF TABLE\n         L     R10,=F'-6'        LOAD INCREMENT\n         LA    R3,0(R3,R11)      POINT TO THE NEXT-TO-LAST ENTRY\nSTACKER1 MVC   6(6,R3),0(R3)     WIPE OUT THE OLDEST ONE\n         BXH   R3,R10,STACKER1   LOOP TO PUSH DOWN THE STACK\n         MVC   6(6,R3),0(R3)     WIPE OUT THE OLDEST ONE\n         B     FOUNDIT1\nFOUNDIT  LH    R1,4(R11)         PICK UP THE UNIT ADDRESS COUNTER\n         LA    R11,6(R11)        SKIP THE HEADING INFORMATION\n         BCT   R1,STACKER        SUBTRACT 1 AND HANDLE STACKER\nFOUNDIT1 MVC   0(6,R11),VOLSER   MOVE VOLSER TO TABLE\nRETURN   LR    R1,R13            LOAD ADDRESS OF GOTTEN AREA\n         L     R13,4(R13)        LOAD PREVIOUS SAVE AREA ADDRESS\n         LA    R0,AREAREGS       LOAD LENGTH OF AREA\n         FREEMAIN RU,LV=(0),A=(1),SP=230\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE 1\n         LTORG\n         EJECT\n         CNOP  2,4\nSMFSKEL  DS    0H        SMF RECORD TO BE WRITTEN\nSMFLEN   DC    H'31'     RECORD LENGTH\nSMFSEG   DC    H'0'      SEGMENT INDICATOR\nSMFSIND  DC    X'06'     SYSTEM INDICATOR\nSMFRECTY DC    AL1(200)  RECORD TYPE\nSMFTIME  DS    XL4       TIME\nSMFDATE  DS    XL4       DATE\nSMFSID   DS    CL4       SYSTEM ID\nSMFTYPE  DC    C'K'      K - KEEP RECORD\nSMFUNIT  DS    CL3       UNIT ADDRESS\nSMFTEST  DC    C'P'      SET TEST FLAG FOR PRODUCTION\nSMFJOBN  DC    CL8' '    JOBNAME\nSMFSLEN  EQU   *-SMFSKEL\n         EJECT\n**********************************************************************\n*                                                                    *\n*        DSECT USED TO MAP GOTTEN AREA                               *\n*                                                                    *\n**********************************************************************\n         SPACE\nWORKREGS DSECT\n         SPACE\nREGAREA  DS    18F       REGISTER SAVE AREA\n         SPACE\n         CNOP  2,4\nSMFREC   DS    0H        SMF RECORD TO BE WRITTEN\nSMFDLEN  DS    H         LENGTH\nSMFDSEG  DS    H         SEGMENT INDICATOR\nSMFDSIND DS    XL1       SYSTEM INDICATOR\nSMFDRECT DS    XL1       RECORD TYPE\nSMFDTIME DS    XL4       TIME\nSMFDDATE DS    XL4       DATE\nSMFDSID  DS    CL4       SYSTEM ID\nSMFDTYPE DS    CL1       K - KEEP RECORD\nSMFDUNIT DS    CL3       UNIT ADDRESS\nSMFDTEST DS    CL1       TEST TYPE TAPE\nSMFDJOBN DS    CL8       JOBNAME\n         SPACE\nAREAREGS EQU   *-WORKREGS\n         EJECT\nCSATABLE DSECT\n         SPACE 1\nCSAEYECT DS    D              TABLE EYE-CATCHER\nCSALENG  DS    F              LENGTH OF THE TABLE\nTAPETBL  DS    F              TAPE UNIT ENTRIES\n         SPACE 1\nUSERCVT  DSECT                                                      JWP\n         DS    D              EYECATCHER 'USERCVT*'                 JWP\nTAPESTKR DS    A              ADDRESS OF TAPE CSA TABLE             JWP\n         SPACE 1\nMSGAREA  DSECT\nUNITADDR DS    CL3            UNIT ADDRESS IN THE MESSAGE\n         DS    C              ,\nVOLSER   DS    CL6            VOLUME SERIAL NUMBER IN THE MESSAGE\n         DS    C              ,\nDISPSL   DS    CL2            SL\n         DS    C              ,\nJOBNAME  DS    CL8            JOBNAME IN THE MESSAGE\n         SPACE 3\n         IEZVX100\n         PRINT NOGEN\n         REGEQU\n         CVT   DSECT=YES,LIST=YES\n         END   WTOETPS1\n/*\n//LKED1   EXEC PGM=IEWL,PARM='LIST,LET,MAP,XREF,RENT,REFR',\n//             COND=(8,LT,ASM)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n  SETCODE AC(1)\n  NAME WTOETPS1(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTOETPS2": {"ttr": 1541, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//S40DA01S JOB (11613109,0402,1,1,,LONG,,,104),PURDY,CLASS=H,\n//            MSGCLASS=X\n//ASM     EXEC PGM=IEV90,\n//             PARM='NODECK,OBJ,LINECNT=99,BUFSIZE(MAX),RENT',\n//             REGION=4096K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\n*          DATA SET WTOETPS2                AS OF 05/27/88\nWTOETPS2 TITLE 'WTOETPS2 -- WTO EXIT TO DISPLAY TAPE UNLOADED DATA'\nWTOETPS2 CSECT\nWTOETPS2 AMODE 31\nWTOETPS2 RMODE ANY\nHDRLEN   EQU   12   CONSTANT FROM THE EXIT \"WTOETPS1\" MACRO\n         USING *,R12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         B     START\n         DC    C'WTOETPS2'\n         DC    C'&SYSDATE',C' &SYSTIME'\n         PRINT NOGEN\nSTART    L     R4,0(R1)      LOAD POINTER TO PASSED PARM LIST      JWP\n         SPACE\n         GETMAIN RU,LV=AREAREGS,SP=230,LOC=(BELOW,ANY) GETMAIN FOR JWP\n         SPACE\n         LR    R10,R1        SAVE POINTER TO GOTTEN AREA           JWP\n         MVI   0(R10),X'00'  CLEAR GOTTEN AREA                     JWP\n         MVC   1(AREAREGS-1,R10),0(R10)                            JWP\n         ST    R13,4(R10)    EXCHANGE THE REGISTER SAVE AREA       JWP\n         ST    R10,8(R13)    POINTERS TRICK                        JWP\n         LR    R13,R10                                             JWP\n         USING WORKREGS,R13  ESTABLISH ADDRESSABILITY TO GOTTEN AREA\n         SPACE\n         L     R8,CVTPTR      FIND USERCVT\n         USING CVT,R8\n         L     R9,CVTUSER\n         LTR   R9,R9          IS THE USERCVT VALID?\n         BZ    RETURN           NO, DO NOT DO ANYTHING DUMB\n         USING USERCVT,R9\n         DROP  R8\n         LR    R10,R4         PICK UP ADDRESS OF CTXT\n         USING CTXT,R10\n         L     R8,CTXTTXPJ    LOAD POINTER TO THE MAJOR LINE\n         USING CTXTATTR,R8\n         TM    CTXTTFB1,CTXTTFWR  WTOR?\n         BO    RETURN          YES, SOMETHING IS WRONG\n         CLC   =C'IEC501A',CTXTTMSG IS THIS THE CORRECT MAJOR LINE?\n         BE    START1          YES, PROCESS IT\n         CLC   =C'IEC501E',CTXTTMSG IS THIS THE CORRECT MAJOR LINE?\n         BE    START1          YES, PROCESS IT\n         CLC   =C'IEF233A',CTXTTMSG IS THIS THE CORRECT MAJOR LINE?\n         BE    START1          YES, PROCESS IT\n         CLC   =C'IEF233D',CTXTTMSG IS THIS THE CORRECT MAJOR LINE?\n         BNE   RETURN          NO, DON'T KNOW WHY I WAS CALLED\n         SPACE\nSTART1   EQU   *\n         MVC   SMFREC(SMFSLEN),SMFSKEL MOVE SKELETON SMF RECORD    JWP\n         TIME  BIN           GET DATE AND TIME                     JWP\n         ST    R0,SMFDTIME   STORE DATE & TIME IN RECORD           JWP\n         ST    R1,SMFDDATE                                         JWP\n         L     R1,16         LOAD ADDRESS OF CVT                   JWP\n         L     R1,196(R1)    LOAD ADDRESS OF SMCA                  JWP\n         MVC   SMFDSID,16(R1) MOVE SYSTEM ID FROM SMCA             JWP\n         MVC   SMFDUNIT,CTXTTMSG+10 MOVE UNIT ADDRESS TO SMF RECORD\n         MVC   SMFDVOL,CTXTTMSG+14  MOVE VOLSER TO SMF RECORD      JWP\n         SMFWTM SMFREC         WRITE SMF RECORD FOR MOUNT          JWP\n         SPACE\n         TRT   CTXTTMSG,COMMATBL  FIND THE INFAMOUS COMMA\n         CLI   0(R1),C','    DID I REALLY FIND IT\n         BE    START2          YES, CONTINUE PROCESSING\n         EX    1,*             NO, PROBLEM SOMEWHERE\nSTART2   LA    R6,1(R1)      PROCESS THE VOL=SER=\n         CLC   =CL6' ',0(R6)  IS THE VOLUME SERIAL NUMBER BLANK?\n         BE    RETURN           YES, FORGET IT\n         CLC   =C'SCRTCH',0(R6) IS THE VOLUME SERIAL NUMBER SCRTCH?\n         BE    RETURN           YES, FORGET IT\n         CLC   =C'PRIVAT',0(R6) IS THE VOLUME SERIAL NUMBER PRIVAT?\n         BE    RETURN           YES, FORGET IT\nSTART4   L     R11,TAPESTKR   FIND THE TAPE UNIT ADDRESS TABLE\n         LTR   R11,R11        IS THERE ONE?\n         BZ    RETURN           NO, FORGET IT\n         USING CSATABLE,R11\n         CLC   =C'WTOETPS1',CSAEYECT  IS THIS THE CORRECT TABLE?\n         BE    START3                   YES, USE IT\n         EX    2,*                      NO, FIND OUT WHY\nSTART3   LA    R11,HDRLEN(R11)   SKIP PAST THE TAPE TABLE HEADER\nCKVOLSER CLC   =X'FFFFFFFF',0(R11) IS THIS THE END OF THE TABLE?\n         BE    RETURN                YES, FORGET IT\n         LH    R4,4(R11)           PICK UP THE NUMBER OF TABLE ENTRIES\n         LA    R5,6(R11)           FIND THE FIRST TABLE ENTRY\nCKVOLSE1 CLC   0(6,R5),0(R6)       IS THIS THE VOLUME SERIAL NUMBER?\n         BE    FOUNDIT               YES, DISPLAY IT\n         LA    R5,6(R5)              NO, TRY ANOTHER\n         BCT   R4,CKVOLSE1         TRY ANOTHER VOL=SER=\n         LR    R11,R5              SET UP THE NEW POINTER\n         B     CKVOLSER            GO TO IT\n         SPACE 1\nFOUNDIT  CLC   =H'108',CTXTTLMX    ENOUGH ROOM FOR THE MESSAGE?\n         BH    RETURN                NO, FORGET IT\n         MVC   CTXTTLEN,CTXTTLMX   GIVE THE MESSAGE ENOUGH ROOM\n         MVC   CTXTTMSG+(108-L'UNITMSG)(L'UNITMSG),UNITMSG\n         MVC   CTXTTMSG+103(4),0(R11) MOVE THE UNIT ADDRESS\n         OI    CTXTRFB1,CTXTRCMT      TELL COMMTASK TO CHANGE THE MSG\n         SPACE\nRETURN   LR    R1,R13       LOAD ADDRESS OF GOTTEN AREA           JWP\n         L     R13,4(R13)   LOAD PREVIOUS SAVE AREA ADDRESS       JWP\n         LA    R0,AREAREGS  LOAD SIZE OF GOTTEN AREA              JWP\n         FREEMAIN RU,LV=(0),A=(1),SP=230 FREE THE GOTTEN AREA     JWP\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE 1\n         LTORG\nUNITMSG  DC    C'  IT MAY STILL BE ON XXXX.'\nCOMMATBL DC    107X'00'        FIND THE INFAMOUS FIRST COMMA\n         DC    C','\n         DC    148X'00'\n         SPACE\n         CNOP  2,4\nSMFSKEL  DS    0H        SMF RECORD TO BE WRITTEN\nSMFLEN   DC    H'28'     RECORD LENGTH\nSMFSEG   DC    H'0'      SEGMENT INDICATOR\nSMFSIND  DC    X'06'     SYSTEM INDICATOR\nSMFRECTY DC    AL1(200)  RECORD TYPE\nSMFTIME  DS    XL4       TIME\nSMFDATE  DS    XL4       DATE\nSMFSID   DS    CL4       SYSTEM ID\nSMFTYPE  DC    C'M'      M - MOUNT RECORD\nSMFUNIT  DS    CL3       UNIT ADDRESS\nSMFVOL   DS    CL6       VOLSER\nSMFSLEN  EQU   *-SMFSKEL\n         SPACE\n         PRINT GEN\n         SPACE 3\nCSATABLE DSECT\nCSAEYECT DS    D              TABLE EYE-CATCHER\nCSALENG  DS    F              LENGTH OF THE TABLE\nTAPETBL  DS    F              TAPE UNIT ENTRIES\n         SPACE 1\nUSERCVT  DSECT\n         DS    D              EYECATCHER 'USERCVT*'\nTAPESTKR DS    F              ADDRESS OF TAPE CSA TABLE\n         SPACE 1\nWORKREGS DSECT\n         SPACE\nREGAREA  DS    18F       REGISTER SAVE AREA\n         SPACE\n         CNOP  2,4\nSMFREC   DS    0H        SMF RECORD TO BE WRITTEN\nSMFDLEN  DS    H         LENGTH\nSMFDSEG  DS    H         SEGMENT INDICATOR\nSMFDSIND DS    XL1       SYSTEM INDICATOR\nSMFDRECT DS    XL1       RECORD TYPE\nSMFDTIME DS    XL4       TIME\nSMFDDATE DS    XL4       DATE\nSMFDSID  DS    CL4       SYSTEM ID\nSMFDTYPE DS    CL1       M - MOUNT RECORD\nSMFDUNIT DS    CL3       UNIT ADDRESS\nSMFDVOL  DS    CL6       VOLSER\n         SPACE\nAREAREGS EQU   *-WORKREGS\n         EJECT\n         IEZVX100\n         PRINT NOGEN\n         REGEQU\n         CVT   DSECT=YES,LIST=YES\n         END   WTOETPS2\n/*\n//LKED1   EXEC PGM=IEWL,PARM='LIST,LET,MAP,XREF,RENT,REFR',\n//             COND=(8,LT,ASM)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n  SETCODE AC(1)\n  NAME WTOETPS2(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WTOTAPAL": {"ttr": 1545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//S40DA01S JOB (11613109,0402,1,1,,LONG,,,104),PURDY,CLASS=H,\n//            MSGCLASS=X\n//ASM     EXEC PGM=IEV90,\n//             PARM='NODECK,OBJ,LINECNT=99,BUFSIZE(MAX),RENT',\n//             REGION=4096K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nWTOTAPAL TITLE 'MPF EXIT FOR TAPE ALLOCATION RECOVERY'\nWTOTAPAL CSECT\nWTOTAPAL AMODE 31\nWTOTAPAL RMODE ANY\n         USING *,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n* THIS EXIT IS USED TO WRITE AN ALLOCATION RECOVERY SMF RECORD FOR    *\n* EVERY ALLOCATION RECOVERY MESSAGE RECIEVED FOR TAPE - IEF489        *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3    ---  BASE REG\nR4       EQU   4    ===> CTXT\nR5       EQU   5    ===> CTXTATTR\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13   ===> GOTTEN REG SAVE AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************************************************\n*                                                                    *\n*        SETUP AND SEE WHY WE WERE CALLED                            *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n         SAVE  (14,12),,WTOTAPAL.&SYSDATE..&SYSTIME\n         LR    R3,R15\n         SPACE\n         DROP  R15\n         USING WTOTAPAL,R3\n         SPACE\n         L     R4,0(R1)      LOAD POINTER TO PASSED PARM LIST\n         USING CTXT,R4       ESTABLISH ADDRESSABILITY TO PARM LIST\n         SPACE\n         GETMAIN RU,LV=AREAREGS,SP=230,LOC=(BELOW,ANY) GETMAIN FOR REGS\n         SPACE\n         LR    R10,R1        SAVE POINTER TO GOTTEN AREA\n         MVI   0(R10),X'00'  CLEAR GOTTEN AREA\n         MVC   1(AREAREGS-1,R10),0(R10)\n         ST    R13,4(R10)    EXCHANGE THE REGISTER SAVE AREA\n         ST    R10,8(R13)    POINTERS TRICK\n         LR    R13,R10\n         USING WORKREGS,R13  ESTABLISH ADDRESSABILITY TO GOTTEN AREA\n         SPACE\n         MVC   SMFREC(SMFSLEN),SMFSKEL MOVE SKELETON SMF RECORD\n         TIME  BIN           GET DATE AND TIME\n         ST    R0,SMFDTIME   STORE DATE & TIME IN RECORD\n         ST    R1,SMFDDATE\n         L     R1,16         LOAD ADDRESS OF CVT\n         L     R1,196(R1)    LOAD ADDRESS OF SMCA\n         MVC   SMFDSID,16(R1) MOVE SYSTEM ID FROM SMCA\n         SPACE\n         L     R5,CTXTTXPJ   LOAD POINTER TO MESSAGE ATTRIBUTES\n         USING CTXTATTR,R5   EXTABLISH ADDRESSABILITY TO ATTRIBUTES\n         CLC   CTXTTMSG(6),=C'IEF238'  CHECK FOR CORRECT MESSAGE TYPE\n         BE    OK238\n         B     RETURN0\n         SPACE\nOK238    EQU   *\n         SPACE\nWRITESMF SMFWTM SMFREC\n         SPACE\nRETURN0  SR    R10,R10\n         SPACE\nRETURN   LR    R1,R13        LOAD ADDRESS OF GOTTEN AREA FOR REGS\n         L     R13,4(R13)    LOAD PREVIOUS SAVE AREA ADDRESS\n         LA    R0,AREAREGS   LOAD SIZE OF GOTTEN AREA FOR REGISTERS\n         FREEMAIN RU,LV=(0),A=(1),SP=230  FREE GOTTEN AREA\n         LR    R15,R10       PLACE RETURN CODE IN REG15\n         RETURN (14,12),RC=(15) RETURN TO THE CALLER\n         EJECT\n         CNOP  2,4\nSMFSKEL  DS    0H        SMF RECORD TO BE WRITTEN\nSMFLEN   DC    H'19'     RECORD LENGTH\nSMFSEG   DC    H'0'      SEGMENT INDICATOR\nSMFSIND  DC    X'06'     SYSTEM INDICATOR\nSMFRECTY DC    AL1(200)  RECORD TYPE\nSMFTIME  DS    XL4       TIME\nSMFDATE  DS    XL4       DATE\nSMFSID   DS    CL4       SYSTEM ID\nSMFTYPE  DC    C'A'      A - ALLOCATION RECOVERY\nSMFSLEN  EQU   *-SMFSKEL\n         EJECT\n**********************************************************************\n*                                                                    *\n*        DSECT USED TO MAP GOTTEN AREA                               *\n*                                                                    *\n**********************************************************************\n         SPACE\nWORKREGS DSECT\n         SPACE\nREGAREA  DS    18F       REGISTER SAVE AREA\n         SPACE\n         CNOP  2,4\nSMFREC   DS    0H        SMF RECORD TO BE WRITTEN\nSMFDLEN  DS    H         LENGTH\nSMFDSEG  DS    H         SEGMENT INDICATOR\nSMFDSIND DS    XL1       SYSTEM INDICATOR\nSMFDRECT DS    XL1       RECORD TYPE\nSMFDTIME DS    XL4       TIME\nSMFDDATE DS    XL4       DATE\nSMFDSID  DS    CL4       SYSTEM ID\nSMFDTYPE DS    CL1       A - ALLOCATION RECOVERY\n         SPACE\nAREAREGS EQU   *-WORKREGS\n         EJECT\n         IEZVX100\n         SPACE 2\n         END\n/*\n//LKED1   EXEC PGM=IEWL,PARM='LIST,LET,MAP,XREF,RENT,REFR',\n//             COND=(8,LT,ASM)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n  SETCODE AC(1)\n  NAME WTOTAPAL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTOTAPMT": {"ttr": 1549, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//S40DA01S JOB (11613109,0402,1,1,,LONG,,,104),PURDY,CLASS=H,\n//            MSGCLASS=X\n//ASM     EXEC PGM=IEV90,\n//             PARM='NODECK,OBJ,LINECNT=99,BUFSIZE(MAX),RENT',\n//             REGION=4096K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nWTOTAPMT TITLE 'MPF EXIT FOR TAPE MOUNTS'\nWTOTAPMT CSECT\nWTOTAPMT AMODE 31\nWTOTAPMT RMODE ANY\n         USING *,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n* THIS EXIT IS USED TO WRITE A MOUNT TYPE SMF RECORD FOR EVERY        *\n* MOUNT MESSAGE PROCESSED - TMS001, IEC501  & IEF233                  *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3    ---  BASE REG\nR4       EQU   4    ===> CTXT\nR5       EQU   5    ===> CTXTATTR\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13   ===> GOTTEN REG SAVE AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************************************************\n*                                                                    *\n*        SETUP AND SEE WHY WE WERE CALLED                            *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n         SAVE  (14,12),,WTOTAPMT.&SYSDATE..&SYSTIME\n         LR    R3,R15\n         SPACE\n         DROP  R15\n         USING WTOTAPMT,R3\n         SPACE\n         L     R4,0(R1)      LOAD POINTER TO PASSED PARM LIST\n         USING CTXT,R4       ESTABLISH ADDRESSABILITY TO PARM LIST\n         SPACE\n         GETMAIN RU,LV=AREAREGS,SP=230,LOC=(BELOW,ANY) GETMAIN FOR REGS\n         SPACE\n         LR    R10,R1        SAVE POINTER TO GOTTEN AREA\n         MVI   0(R10),X'00'  CLEAR GOTTEN AREA\n         MVC   1(AREAREGS-1,R10),0(R10)\n         ST    R13,4(R10)    EXCHANGE THE REGISTER SAVE AREA\n         ST    R10,8(R13)    POINTERS TRICK\n         LR    R13,R10\n         USING WORKREGS,R13  ESTABLISH ADDRESSABILITY TO GOTTEN AREA\n         SPACE\n         MVC   SMFREC(SMFSLEN),SMFSKEL MOVE SKELETON SMF RECORD\n         TIME  BIN           GET DATE AND TIME\n         ST    R0,SMFDTIME   STORE DATE & TIME IN RECORD\n         ST    R1,SMFDDATE\n         L     R1,16         LOAD ADDRESS OF CVT\n         L     R1,196(R1)    LOAD ADDRESS OF SMCA\n         MVC   SMFDSID,16(R1) MOVE SYSTEM ID FROM SMCA\n         SPACE\n         L     R5,CTXTTXPJ   LOAD POINTER TO MESSAGE ATTRIBUTES\n         USING CTXTATTR,R5   EXTABLISH ADDRESSABILITY TO ATTRIBUTES\n         CLC   CTXTTMSG(7),=C'TMS001 '\n         BE    OKTMS1\n         CLC   CTXTTMSG(6),=C'IEC501'  BOTH 501A & 501E\n         BE    OK501\n         CLC   CTXTTMSG(6),=C'IEF233'  BOTH 233A & 233D\n         BE    OK233\n         B     RETURN0\n         SPACE\nOK233    EQU   *\nOK501    MVC   SMFDUNIT,CTXTTMSG+10  MOVE UNIT ADDRESS\n         MVC   SMFDVOL,CTXTTMSG+14   MOVE VOLSER\n         B     WRITESMF\n         SPACE\nOKTMS1   MVC   SMFDUNIT,CTXTTMSG+18  MOVE UNIT ADDRESS\n         MVC   SMFDVOL,CTXTTMSG+22   MOVE VOLSER\n         B     WRITESMF\n         SPACE\nWRITESMF SMFWTM SMFREC\n         SPACE\nRETURN0  SR    R10,R10\n         SPACE\nRETURN   LR    R1,R13        LOAD ADDRESS OF GOTTEN AREA FOR REGS\n         L     R13,4(R13)    LOAD PREVIOUS SAVE AREA ADDRESS\n         LA    R0,AREAREGS   LOAD SIZE OF GOTTEN AREA FOR REGISTERS\n         FREEMAIN RU,LV=(0),A=(1),SP=230  FREE GOTTEN AREA\n         LR    R15,R10       PLACE RETURN CODE IN REG15\n         RETURN (14,12),RC=(15) RETURN TO THE CALLER\n         EJECT\n         CNOP  2,4\nSMFSKEL  DS    0H        SMF RECORD TO BE WRITTEN\nSMFLEN   DC    H'28'     RECORD LENGTH\nSMFSEG   DC    H'0'      SEGMENT INDICATOR\nSMFSIND  DC    X'06'     SYSTEM INDICATOR\nSMFRECTY DC    AL1(200)  RECORD TYPE\nSMFTIME  DS    XL4       TIME\nSMFDATE  DS    XL4       DATE\nSMFSID   DS    CL4       SYSTEM ID\nSMFTYPE  DC    C'M'      M - MOUNT RECORD\nSMFUNIT  DS    CL3       UNIT ADDRESS\nSMFVOL   DS    CL6       VOLSER\nSMFSLEN  EQU   *-SMFSKEL\n         EJECT\n**********************************************************************\n*                                                                    *\n*        DSECT USED TO MAP GOTTEN AREA                               *\n*                                                                    *\n**********************************************************************\n         SPACE\nWORKREGS DSECT\n         SPACE\nREGAREA  DS    18F       REGISTER SAVE AREA\n         SPACE\n         CNOP  2,4\nSMFREC   DS    0H        SMF RECORD TO BE WRITTEN\nSMFDLEN  DS    H         LENGTH\nSMFDSEG  DS    H         SEGMENT INDICATOR\nSMFDSIND DS    XL1       SYSTEM INDICATOR\nSMFDRECT DS    XL1       RECORD TYPE\nSMFDTIME DS    XL4       TIME\nSMFDDATE DS    XL4       DATE\nSMFDSID  DS    CL4       SYSTEM ID\nSMFDTYPE DS    CL1       M - MOUNT RECORD\nSMFDUNIT DS    CL3       UNIT ADDRESS\nSMFDVOL  DS    CL6       VOLSER\n         SPACE\nAREAREGS EQU   *-WORKREGS\n         EJECT\n         IEZVX100\n         SPACE 2\n         END\n/*\n//LKED1   EXEC PGM=IEWL,PARM='LIST,LET,MAP,XREF,RENT,REFR',\n//             COND=(8,LT,ASM)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n  SETCODE AC(1)\n  NAME WTOTAPMT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT111/FILE111.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT111", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}