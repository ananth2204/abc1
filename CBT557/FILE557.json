{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012334000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE557.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE557.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x16'", "DS1TRBAL": "b'\\x07N'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x14\\x00\\x00\\x04\\x14\\x00\\x02\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\t/\\x01\\x02\\t/\\x14\\x16\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-02T00:00:00", "modifydate": "2002-04-02T14:16:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 444    FILE:  557\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT444.FILE557\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 497 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/02/02    14:16:27    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01\\x02\\t/\\x01\\x02\\t/\\x14\\x01\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-02T00:00:00", "modifydate": "2002-04-02T14:01:52", "lines": 21, "newlines": 21, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Soundex Code Package\nDate: Mon, 1 Apr 2002 09:32:43 -0800\nFrom: \"JB Moore\" <conlogco@ix.netcom.com>\nTo: \"Sam Golob\" <sbgolob@attglobal.net>\n\nSam,\n\nHere's a good attachment.  Interested people can use the Soundex\ncode for all sorts of things with regard to databases and file\nsearching.  I am using this code as a sample in the ISPF Debugging\nseries that I am doing right now in the magazine.  Haven't got a\nlot of requests for it but I have sent it off to the webmaster at\nnaspa.  Anyway, try it out and notice the code that it returns for\nyour last name.  Most U.S. states use the ANNN Soundex code to\nbegin their driver's license number.\n\n    -------------------------------------------------------\n                 Name: Clcsdx.txt\n   Clcsdx.txt    Type: Plain Text (text/plain)\n             Encoding: quoted-printable\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE557": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00U\\x01\\x01\\x02_\\x01\\x02\\t/\\x14\\x15\\x00'\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-04-02T14:15:55", "lines": 39, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 557 is from Jim Moore of Concentrated Logic Corp. and     *   FILE 557\n//*           contains some interesting code to calculate the       *   FILE 557\n//*           Soundex Code using a COBOL program (for the guts)     *   FILE 557\n//*           an Assembler program, a REXX, and an ISPF panel.      *   FILE 557\n//*                                                                 *   FILE 557\n//*           email:  \"JB Moore\" <conlogco@IX.NETCOM.COM>           *   FILE 557\n//*                                                                 *   FILE 557\n//*      Here's something you can do to illustrate the use of       *   FILE 557\n//*      this program.  Try it out and notice the code that it      *   FILE 557\n//*      returns for your last name.  Most U.S. states use the      *   FILE 557\n//*      ANNN Soundex code to begin their driver's license          *   FILE 557\n//*      number.                                                    *   FILE 557\n//*                                                                 *   FILE 557\n//*      A brief description of the package follows:                *   FILE 557\n//*                                                                 *   FILE 557\n//*      This program will create a Soundex code from a name.       *   FILE 557\n//*      The \"Knuth Rules\" Soundex algorithm is used.  Refer to     *   FILE 557\n//*      pages 394 - 395 of Volume 3 - \"The Art of Computer         *   FILE 557\n//*      Programming\" By Don Knuth.  This is the \"Sorting and       *   FILE 557\n//*      Searching\" volume, 2nd edition.                            *   FILE 557\n//*                                                                 *   FILE 557\n//*      I have added some feature to the algorithm which, IMHO,    *   FILE 557\n//*      make it more useful across a wider variety of names.       *   FILE 557\n//*      These features are:                                        *   FILE 557\n//*                                                                 *   FILE 557\n//*      1) The capability of having a longer code generated.       *   FILE 557\n//*         The standard code is in the format ANNN (alpha, nbr,    *   FILE 557\n//*         nbr, nbr).  By using a passed parameter, a code as      *   FILE 557\n//*         long as 10 can be created.                              *   FILE 557\n//*                                                                 *   FILE 557\n//*      2) The capability of having an \"all alpha\" code            *   FILE 557\n//*         created.  The standard code is in the format ANNN       *   FILE 557\n//*         (alpha, nbr, nbr, nbr).  By using a passed              *   FILE 557\n//*         parameter, a code can be generated that is all          *   FILE 557\n//*         alphabetic.                                             *   FILE 557\n//*                                                                 *   FILE 557\n//*      3) The capability of varying the pad character.  The       *   FILE 557\n//*         normal pad character is a zero (\"0\").                   *   FILE 557\n//*                                                                 *   FILE 557\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLCCSNDX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\t/\\x01\\x02\\t/\\x13S\\x01-\\x01-\\x00\\x00\\xd1\\xc2\\xd4\\xd6\\xd6\\xd9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-02T00:00:00", "modifydate": "2002-04-02T13:53:00", "lines": 301, "newlines": 301, "modlines": 0, "user": "JBMOORE"}, "text": "000100* -------------------------------------------------------------- *\n000200* Compile Options To use:                                        *\n000300*                                                                *\n000400* PARM=(RENT,RMODE(ANY),NOSEQ,SSRANGE,APOST,DYN,                 *\n000500* NOADV,SOURCE,MAP,XREF,TRUNC(BIN),NUMPROC(PFD))                 *\n000600*                                                                *\n000700* Link-Edit Options To use:                                      *\n000800*                                                                *\n000900* PARM=(LET,LIST,MAP,XREF,RENT)                                  *\n001000*                                                                *\n001100* This program will create a Soundex code from a name. The       *\n001200* \"Knuth Rules\" Soundex algorithm is used. Refer to pages 394 -  *\n001300* 395 of Volume 3 -\"The Art of Computer Programming\" By Don      *\n001400* Knuth. This is the \"Sorting and Searching\" volume, 2nd edition *\n001500*                                                                *\n001600* I have added some feature to the algorithm which, IMHO, make   *\n001700* it more useful across a wider variety of names. These features *\n001800* are:                                                           *\n001900*                                                                *\n002000* 1) The capability of having a longer code generated. The       *\n002100*    standard code is in the format ANNN (alpha, nbr, nbr, nbr). *\n002200*    By using a passed parameter, a code as long as 10 can be    *\n002300*    created.                                                    *\n002400*                                                                *\n002500* 2) The capability of having an \"all alpha\" code created. The   *\n002600*    standard code is in the format ANNN (alpha, nbr, nbr, nbr). *\n002700*    By using a passed parameter, a code can be generated that   *\n002800*    is all alphabetic.                                          *\n002900*                                                                *\n003000* 3) The capability of varying the pad character. The normal     *\n003100*    pad character is a zero (\"0\").                              *\n003200*                                                                *\n003300* -------------------------------------------------------------- *\n003400 Identification Division.\n003500 Program-ID.    CLCCSNDX is Initial.\n003600 Author.        Jim Moore. Concentrated Logic Inc.\n003700 Environment Division.\n003800 Data Division.\n003900\n004000 Working-Storage Section.\n004100 01  Copyright.\n004200     05                     Pic  X(52) Value\n004300         ' ---------The Soundex Algorithm in COBOL----------- '.\n004400     05                     Pic  X(53) Value\n004500         'Copyright 1990,2002 - Concentrated Logic Incorporated'.\n004600 01  Switches.\n004700     05  Finished-SW        Pic  X(01) Value Zero.\n004800         88  Finished                  Value 'Y'.\n004900 01  Feedback-Codes.\n005000     05  FC-Severity        Pic S9(04) Binary.\n005100     05  FC-Message         Pic S9(04) Binary.\n005200     05                     Pic  X(08).\n005300 01  Function-Pool-Variables.\n005400     05  FP-1-Byte-Fields.\n005500         10  Type-Code      Pic  X(01) Value 'N'.\n005600             88  Alphameric            Value 'N'.\n005700             88  All-Alpha             Value 'A'.\n005800         10  Pad-Character  Pic  X(01) Value Space.\n005900     05  FP-2-Byte-Fields.\n006000         10  Code-Length    Pic  9(02) Value 4.\n006100     05  FP-8-Byte-Fields.\n006200         10  FP-Address     Pic  X(08) Value Spaces.\n006300     05  FP-10-Byte-Fields.\n006400         10  Soundex-Code   Pic  X(10) Value Spaces.\n006500     05  FP-30-Byte-Fields.\n006600         10  Soundex-Name   Pic  X(30) Value Spaces.\n006700/\n006800 01  Name-Column            Pic S9(08) Binary Value +1.\n006900 01  Code-Column            Pic S9(08) Binary Value +1.\n007000 01  My-Index-Value         Pic  9(02).\n007500\n007600 01  Compare-Fields.\n007700     05  Valid-Letter       Pic S9(04) Binary Value +0.\n007800     05  Prev-Valid-Letter  Pic S9(04) Binary Value +0.\n007900     05  Prev-Group         Pic  X(01)        Value Space.\n008000     05  Gap                Pic S9(04) Binary Value +0.\n008100 01  Letter-Table.\n008200     05                     Pic  X(18) Value 'a0b1c2d3e0f1g2h0i0'.\n008300     05                     Pic  X(18) Value 'j2k2l4m5n5o0p1q2r6'.\n008400     05                     Pic  X(18) Value 's2t3u0v1w0x2y0z2A0'.\n008500     05                     Pic  X(18) Value 'B1C2D3E0F1G2H0I0J2'.\n008600     05                     Pic  X(18) Value 'K2L4M5N5O0P1Q2R6S2'.\n008700     05                     Pic  X(14) Value 'T3U0V1W0X2Y0Z2'.\n008800 01                         Redefines Letter-Table.\n008900     05  Letters            Occurs 52 Times,\n009000                            Ascending Key is AlphaChar,\n009100                            Indexed By L-IX.\n009200         10  AlphaChar      Pic  X(01).\n009300             88  HW-Rule    Values 'H' 'h' 'W' 'w'.\n009400         10  Soundex-Group  Pic  X(01).\n009500 01  ISPF-Name-Literals.\n009600     05  Vdef-L1-Lit        Pic  X(18)\n009700*               ----+----1----+----2----+----3----+----4----+----5\n009800         Value '(TYPECODE,PADCHAR)'.\n009900     05  Vdef-L2-Lit        Pic  X(10)\n010000         Value '(CODELENG)'.\n010100     05  Vdef-L8-Lit        Pic  X(08)\n010200         Value '(FPADDR)'.\n010300     05  Vdef-L10-Lit       Pic  X(09)\n010400         Value '(SDXCODE)'.\n010500     05  Vdef-L30-Lit       Pic  X(09)\n010600         Value '(SDXNAME)'.\n010700/\n010800 01  ISPF-API-Services.\n010900     05  Vdefine            Pic  X(08) Value 'VDEFINE'.\n011000     05  Vput               Pic  X(08) Value 'VPUT'.\n011100     05  Vget               Pic  X(08) Value 'VGET'.\n011200     05  Display-P          Pic  X(08) Value 'DISPLAY'.\n011300     05  Addpop             Pic  X(08) Value 'ADDPOP'.\n011400     05  Rempop             Pic  X(08) Value 'REMPOP'.\n011500 01  ISPF-API-Parameters.\n011600     05  Len-Fld            Pic S9(08) Binary.\n011700     05  Char-Fld           Pic  X(08) Value 'CHAR'.\n011800 01  ISPF-Panel-Names.\n011900     05  SDXMAINP           Pic  X(08) Value 'SDXMAINP'.\n012000     05  SDXTEMPP           Pic  X(08) Value 'SDXTEMPP'.\n012100 01  String-Of-Commands.\n012200     05  Command-String-Length Pic S9(04) Binary.\n012300     05  Command-String        Pic  X(36) Value\n012400     'Monitor List Function-Pool-Variables'.\n012500/\n012600 Linkage Section.\n012700 01  Run-Time-Parm.\n012800     05  RT-Parm-Length     Pic S9(04) Binary.\n012900     05                     Pic  X(01).\n013000         88  Debug-Run      Value 'D'.\n013100/\n013200 Procedure Division Using Run-Time-Parm.\n013300     Perform 1000-Initialize                     Thru 1000-Exit.\n013400     Perform 2000-All-Processing                 Thru 2000-Exit\n013500      Until Finished.\n013600     Perform 9000-Finalize                       Thru 9000-Exit.\n013700     GoBack.\n013800\n013900 1000-Initialize.\n015100     If Debug-Run\n015200        Move Length Of Command-String To Command-String-Length\n015300        Call 'CEETEST'  Using String-Of-Commands\n015400                              Feedback-Codes\n015500        Call 'Viewup03' Using Function-Pool-Variables,\n015600                              FP-Address.\n015610\n015700\n015800     Move Length Of Type-Code     To Len-Fld.\n015900     Call 'ISPLINK' Using  Vdefine Vdef-L1-Lit\n016000                           FP-1-Byte-Fields Char-fld\n016100                           Len-Fld.\n016200     Move Length Of Code-Length     To Len-Fld.\n016300     Call 'ISPLINK' Using  Vdefine Vdef-L2-Lit\n016400                           FP-2-Byte-Fields Char-fld\n016500                           Len-Fld.\n016600     Move Length Of FP-Address      To Len-Fld.\n016700     Call 'ISPLINK' Using  Vdefine Vdef-L8-Lit\n016800                           FP-8-Byte-Fields Char-fld\n016900                           Len-Fld.\n017000     Move Length Of Soundex-Code    To Len-Fld\n017100     Call 'ISPLINK' Using  Vdefine Vdef-L10-Lit\n017200                           FP-10-Byte-Fields Char-fld\n017300                           Len-Fld.\n017400     Move Length Of Soundex-Name    To Len-Fld\n017500     Call 'ISPLINK' Using  Vdefine Vdef-L30-Lit\n017600                           FP-30-Byte-Fields Char-fld\n017700                           Len-Fld.\n017800     Call 'ISPLINK' Using  Addpop.\n017900 1000-Exit. Exit.\n018000/\n018100\n018200 2000-All-Processing.\n018300     Call 'ISPLINK' Using  Display-P SDXMAINP.\n018400\n018500     If Return-Code > Zeros\n018600       Move 'Y' To Finished-SW\n018700     Else\n018800     Perform 3000-Generate-Code                  Thru 3000-Exit.\n018900 2000-Exit. Exit.\n019000/\n019100 3000-Generate-Code.\n019200     If Code-Length (1:1) Numeric\n019300     And Code-Length (2:1) Not Numeric\n019400         Move Code-Length (1:1) To Code-Length (2:1)\n019500         Move Zero              To Code-Length (1:1).\n019600\n019700     Perform\n019800      Varying Code-Column From 1 By 1\n019900       Until Code-Column > Length Of Soundex-Code\n020000         Move Pad-Character To Soundex-Code (Code-Column:1)\n020100     End-Perform.\n020200\n020300     Move 1 To Name-Column, Code-Column.\n020400*----------------------------------------------------------------*\n020500* Loop until either:                                             *\n020600*                                                                *\n020700* Off the end of the passed name                                 *\n020800*      -OR-                                                      *\n020900* The requested length of the Soundex code is reached            *\n021000*                                                                *\n021100* Final clean-up involves spacing out pad characters beyond the  *\n021200* requested length, followed by a Function Upper-Case move.      *\n021300*----------------------------------------------------------------*\n021400\n021500     Perform 4000-Do-Soundex                 Thru 4000-Exit\n021600        Until Name-Column > Length Of Soundex-Name\n021700        OR    Code-Column > Code-Length\n021800\n021900     If Code-Length < Length Of Soundex-Code\n022000       Move Spaces To Soundex-Code\n022100       (Code-Length + 1:Length Of Soundex-Code -   Code-Length).\n022200\n022300     Move Function Upper-Case (Soundex-Code) To Soundex-Code.\n022400 3000-Exit. Exit.\n022500/\n022600 4000-Do-Soundex.\n022700*----------------------------------------------------------------*\n022800* Inline perform to locate UPPER or lower case letter. Note that *\n022900* the space character (X'40') is considered alpha-upper so the   *\n023000* Boolean \"and not = space\" is required.                         *\n023100*----------------------------------------------------------------*\n023200     Perform\n023300     Varying Name-Column From Name-Column By 1\n023400       Until Name-Column > Length Of Soundex-Name\n023500       Or    ((Soundex-Name (Name-Column:1) Alphabetic-Upper\n023600              Or\n023700              Soundex-Name (Name-Column:1) Alphabetic-Lower)\n023800              And\n023900              Soundex-Name (Name-Column:1) NOT = Space)\n024000     End-Perform\n024100\n024200     If Name-Column > Length Of Soundex-Name\n024300        Next Sentence\n024400     Else\n024500     Search All Letters\n024600        At End\n024700        Continue\n024800     When AlphaChar (L-IX) = Soundex-Name (Name-Column:1)\n024900        Perform 5000-Derive-Groupings           Thru 5000-Exit\n025000     End-Search\n025100     Add 1 To Name-Column.\n025200 4000-Exit. Exit.\n025300/\n025400 5000-Derive-Groupings.\n025500*----------------------------------------------------------------*\n025600* Soundex always takes the first letter of its code \"as-is\".     *\n025700* So, if Code-Column = 1, the actual letter (never a number) is  *\n025800* moved to the output code.                                      *\n025900*                                                                *\n026000* If Code Column > 1, the \"contiguous letter in same group\" test *\n026100* is performed before moving the actual letter/number to the     *\n026200* output code.                                                   *\n026300*----------------------------------------------------------------*\n026400     If Code-Column > 1\n026500       Add 1 To Valid-Letter\n026600       If Soundex-Group (L-IX) NOT = Zero\n026700         Compute Gap = Valid-Letter - Prev-Valid-Letter\n026800         If Soundex-Group (L-IX) NOT = Prev-Group\n026900              Perform 6000-Move-To-Code        Thru 6000-Exit\n027000         Else\n027100         If Gap > 1\n027200            Perform 6000-Move-To-Code          Thru 6000-Exit\n027300         Else\n027400         Move Valid-Letter         To Prev-Valid-Letter\n027500         Move Soundex-Group (L-IX) To Prev-Group\n027600       Else\n027700       If HW-Rule (L-IX)\n027800          Add 1 To Prev-Valid-Letter\n027900       Else\n028000       Next Sentence\n028100     Else\n028200     Perform 6000-Move-To-Code                 Thru 6000-Exit.\n028300 5000-Exit. Exit.\n028400/\n028500 6000-Move-To-Code.\n028600*----------------------------------------------------------------*\n028700* Again, if code-column = 1, move \"alphachar\" to code.           *\n028800* Otherwise, save values for the current soundex group and       *\n028900* letter as \"previous\".                                          *\n029000*                                                                *\n029100* When \"alphameric\", move the numeric group number to the        *\n029200* output code, else move the \"alphachar\".                        *\n029300*                                                                *\n029400* Code-Column is incremented here only.                          *\n029500*----------------------------------------------------------------*\n029600     If Code-Column > 1\n029700      Move Soundex-Group (L-IX) To Prev-Group\n029800      Move Valid-Letter         To Prev-Valid-Letter\n029900      If Alphameric\n030000         Move Soundex-Group (L-IX)\n030100         To  Soundex-Code (Code-Column:1)\n030200      Else\n030300      Move AlphaChar (L-IX)    To Soundex-Code (Code-Column:1)\n030400     Else\n030500     Move 1                    To Valid-Letter\n030600     Move Valid-Letter         To Prev-Valid-Letter\n030700     Move Soundex-Group (L-IX) To Prev-Group\n030800     Move AlphaChar (L-IX)     To Soundex-Code (Code-Column:1).\n030900\n031000     Add 1 To Code-Column.\n031100 6000-Exit. Exit.\n031200/\n031300 9000-Finalize.\n031400     Call 'ISPLINK' Using Rempop.\n031500 9000-Exit. Exit.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SDXMAINP": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\t/\\x01\\x02\\t/\\x13S\\x00%\\x00%\\x00\\x00\\xd1\\xc2\\xd4\\xd6\\xd6\\xd9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-02T00:00:00", "modifydate": "2002-04-02T13:53:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "JBMOORE"}, "text": ")ATTR\n ! TYPE(INPUT) CAPS(OFF) JUST(LEFT)\n)BODY WINDOW(35,15)\n%Command ===>_ZCMD                +\n%                                 +\n% Enter Name to Soundex Below:    +\n+  !Z                             +\n+                                 +\n+ Type of Code%===>_Z+(A/N)       +\n+                                 +\n+ Code Length%===>_Z +(4 thru 10) +\n+                                 +\n+ Pad Character%===>_Z+           +\n+                                 +\n+ Soundex Code> &SDXCODE          +\n+                                 +\n+   Press%ENTER+to process        +\n+   Press%PF3 (END)+to cancel     +\n)INIT\n.ZVARS = '(SDXNAME,TYPECODE,CODELENG,PADCHAR)'\n&ZWINTTL = 'Generate a Soundex Code'\n&ZCMD = ''\nIF (&PADCHAR = '')\n    &PADCHAR = '0'\nIF (&CODELENG = '')\n    &CODELENG = '04'\nIF (&TYPECODE = '')\n    &TYPECODE = 'N'\n)PROC\nVER (&SDXNAME  NB)\nVER (&TYPECODE NB)\nVER (&TYPECODE LIST A,N)\nVER (&CODELENG NB)\nVER (&CODELENG LIST 4,5,6,7,8,9,10,04,05,06,07,08,09)\nIF (&PADCHAR = '')\n    &PADCHAR = '0'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SOUNDEX": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\t/\\x01\\x02\\t/\\x13S\\x00\\n\\x00\\n\\x00\\x00\\xd1\\xc2\\xd4\\xd6\\xd6\\xd9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-02T00:00:00", "modifydate": "2002-04-02T13:53:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "JBMOORE"}, "text": "/* REXX */\nPARSE UPPER ARG Debug\nADDRESS TSO\n\"ALLOC DD(SYSOUT) DA(*)\"\nADDRESS ISPEXEC\n\"LIBDEF ISPPLIB DATASET ID('pds.with.panel') STACK\"\n\"LIBDEF ISPLLIB DATASET ID('loadlib.containg.CLCCSNDX') STACK\"\n\"SELECT PGM(CLCCSNDX) PARM(\"Debug\")\"\n\"LIBDEF ISPPLIB\"\n\"LIBDEF ISPLLIB\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VIEWUP03": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\t/\\x01\\x02\\t/\\x13S\\x00M\\x00M\\x00\\x00\\xd1\\xc2\\xd4\\xd6\\xd6\\xd9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-02T00:00:00", "modifydate": "2002-04-02T13:53:00", "lines": 77, "newlines": 77, "modlines": 0, "user": "JBMOORE"}, "text": "*---------------------/*-------------------------------------------\nR0       EQU   0      /*  VIEWUP03 - By Jim Moore\nR1       EQU   1      /*             Concentrated Logic Inc\nR2       EQU   2      /* ------------------------------------------\nR3       EQU   3      /* This program is passed two addresses. It\nR4       EQU   4      /* stores, translates and returns the first\nR5       EQU   5      /* address passed to it in the area pointed to\nR6       EQU   6      /* by the second address. It is meant to\nR7       EQU   7      /* demonstrate how a \"CALL BY REFERENCE\" really\nR8       EQU   8      /* works. Use it from any language that supports\nR9       EQU   9      /* a \"CALL BY REFERENCE\".\nR10      EQU   10     /*\nR11      EQU   11     /* It uses AMODE(31), RMODE(ANY) declaratives on\nR12      EQU   12     /* the CSECT. It is fully reentrant. Any address\nR13      EQU   13     /* passed to it will be converted, even 24-bit\nR14      EQU   14     /* addresses.\nR15      EQU   15     /*\n*---------------------/* ----------------------------------------------\nVIEWUP03 CSECT                      /* PROGRAM-ID equivalent\nVIEWUP03 AMODE 31                   /* This code uses 31-bit storage\nVIEWUP03 RMODE ANY                  /* This code is 31-bit eligible\n         PRINT NOGEN                /* No macro expansion in SYSPRINT\nBEGIN    STM   R14,R12,12(R13)      /* Store regs in caller SAVEAREA\n         LR    R12,R15              /* Get VIEWUP03 entry addr in R12\n         L     R11,0(R1)            /* Load R11 with first parm address\n         L     R9,4(R1)             /* Load R9 with second parm address\n         USING LINKAGE,R11          /* Base 1st parm address\n         USING PASSBACK,R9          /* Base 2nd parm address\n         USING VIEWUP03,R12         /* Base entire program\n         LA    R0,LSTORAGE          /* Get STORAGE length into R0\n         GETMAIN RC,LV=(0)          /* Acquire storage\n         LTR   R15,R15              /* Did I get it?\n         BNZ   GETMERR              /* No, this is a problem\n         LR    R10,R1               /* Storage address returned in R1\n         USING STORAGE,R10          /* Base acquired storage\n         ST    R13,SAVEAREA+4       /* Save caller R13 address in chain\n         LA    R13,SAVEAREA         /* Point R13 at my SAVEAREA\n         ST    R13,SAVEAREA+8       /* Place my SAVEAREA addr in chain\n         B     MAINLINE             /* Go around literals\nCOPYRITE DC  CL50'VIEWUP03 -   Concentrated Logic Inc - Translate a '\n         DC  CL50'passed address into \"Printable Hex\"   ASM->'\n         DC    C' &SYSDATC '        /* --------------------------------\n         DC    C' At '              /* Stamp OBJECT deck with\n         DC    C' &SYSTIME '        /* date, time and name of\n         DC    C' Using '           /* the assembler.\n         DC    C' &SYSASM'          /* --------------------------------\nMAINLINE ST    R11,DATADDR          /* Store 1st parm address value\n         LA    R2,DATADDR           /* Point to it with R2\n         UNPK  UNPACK(9),0(5,R2)    /* UNPK address (+1 slack byte)\n         TR    UNPACK,HEXTOCHR      /* Make it \"printable\"\n         MVC   RETDATA,UNPACK       /* Move it to 2nd address area\nRETURN   L     R13,SAVEAREA+4       /* Restore caller's R13 value\n         LA    R0,LSTORAGE          /* Get STORAGE length into R0\n         FREEMAIN RU,LV=(0),A=(10)  /* Free STORAGE (R10-based)\nGOBACK   LM    R14,R12,12(R13)      /* Restore caller's registers\n         SR    R15,R15              /* Clear R15 (RC=0)\n         BR    R14                  /* Back to caller's next instruc\nGETMERR  LM    R14,R12,12(R13)      /* Restore caller's registers\n         L     R15,8                /* Bad return-code (RC=8)\n         BR    R14                  /* Back with RC=8\n         DS    0F                   /* Align translate table\nHEXTOCHR EQU   *-C'0'               /*\n         DC    C'0123456789ABCDEF'  /* All 16 unary hex digits\n         LTORG\nLINKAGE  DSECT                      /* --------------------------------\n         DS CL4                     /* Ignore this value\nPASSBACK DSECT                      /* --------------------------------\nRETDATA  DS CL8                     /* UNPK'd and TR address here\nSTORAGE  DSECT                      /* --------------------------------\nSAVEAREA DS 18F                     /* Register save area\nDATADDR  DS F                       /* Aligned storage\n         DS CL1                     /* Plus an extra byte\n         DS 0F                      /* Align the Unpack area\nUNPACK   DS CL8                     /* Unpack here\n         DS CL1                     /* Plus an extra byte\nLSTORAGE EQU *-STORAGE              /* LSTORAGE = Length of DSECT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT557/FILE557.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT557", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}