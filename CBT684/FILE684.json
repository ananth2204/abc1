{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012607000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 881790, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE684.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 881790, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 881790, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE684.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0f\\t'", "DS1TRBAL": "b'dF'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xc7\\x00\\x06\\x04\\xc8\\x00\\x06\\x00\\x10'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x06\\x01\\x04\\x19_\\x01\\x186\\x0f\"C\\x00,\\x00\\x16\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2018-12-26T22:43:06", "lines": 44, "newlines": 22, "modlines": 0, "user": "CHSY227"}, "text": " IEFACTRT Jobs statistics after each step.\n\n IEFUTL   extends wait time based on job type: batch and stc, forever\n          and TSO for 2 hours only\n\n IEFU29   starts dumpsmf automatically at ds switch\n\n IEFU29A  starts purgsmf like u28; smf data goes to bit bucket\n\n IEFU83   excp stats at ds close time; see also MPFLST83 and MSG.. exits\n\n MPFLST83 prevent IEFU83 messages to consoles or log\n\n MSGFLUSH, MSGJOBLG, MSGNOJLG, MSGNOLOG - useful mpf exits\n\n PDSSCAN  just what the name says. very fast.\n\n PDSUPDTE again, just what the name says. very fast; does update in\n          place\n\n SMFDUMP  the elusive dumpsmf program, last distributed by IBM, long ago\n\n SVCMAP   program to display the SVC table and extended SVC's.  A quick\n          dump of the first few bytes of each SVC is included in the\n          display.\n\n SVCMAB   REXX to BROWSE the output of the SVCMAP program\n SVCMAE   REXX to EDIT   the output of the SVCMAP program\n SVCMAR   REXX to REVIEW the output of the SVCMAP program\n SVCMAV   REXX to VIEW   the output of the SVCMAP program\n\n TCPU83, TCBU84 U83 and U84 exits for ftp statistics. Crude but they\n          work\n\n Remainder contains necessary macros, related procs, etc.\n\n Collected or developed by:\n Rick Fochtman\n\n Support:   Sam Golob\n\n   email:   sbgolob@cbttape.org    or\n            sbgolob@attglobal.net\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$#DATE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x05\\x00\\x00'\\x01  /\\x01  /\\x12V\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@\"", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-07-20T00:00:00", "modifydate": "2020-07-20T12:56:27", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  684\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE684\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 41 MEMBERS COUNTED; CUMULATIVE SIZE IS 7,874 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/20/20    12:56:26    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$IEFU83": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00F\\x00F\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 70, "newlines": 70, "modlines": 0, "user": "CHSY227"}, "text": "     LIST OF MEMBERS IN THIS PACKAGE:\n\n     $U83INDX - YOU GUESSED IT, YOU ARE INDEED LOOKING AT IT!\n     $U83INFO - SOME THOUGHTS ON THE WHOLE KIT AND CABOODLE.\n     IEFU83   - SMF EXIT SOURCE (ISSUE MESSAGES FOR SOME RECORD TYPES).\n     MSGFLUSH - MPF EXIT SOURCE (FLUSH MESSAGE WITH ONLY A TRACE).\n     MSGJOBLG - MPF EXIT SOURCE (LIMIT MESSAGE TO JOBLOG).\n     MSGNOJLG - MPF EXIT SOURCE (SUPPRESS MESSAGE FROM JOBLOG).\n     MSGNOLOG - MPF EXIT SOURCE (SUPPRESS MESSAGE FROM LOG).\n\n   This package consists of an IEFU83 SMF exit and several MPF exits.\n   Assembler source is supplied in each case.\n\n   This package represents an example of issuing messages to the log,\n   consoles, and/or users from the IEFU83 SMF exit.  These messages\n   can contain information from SMF records which is not usually\n   available at run-time, without the need for any post-processing\n   effort.\n\n   The main function of this code is to report the I/O activity of\n   a job in the job's own print output.  This is a very handy source\n   of run-time characteristic information often of great value to\n   programmers during debugging and testing.  The idea was that the\n   I/O count for a file would be shown next to the relevant data set\n   name and not just in a DD summary often produced by IEFACTRT SMF\n   exits.\n\n   The famous \"I/O count zap\" was an ideal solution because the\n   information was supplied on existing printlines, so output volumes\n   were not increased.  Alas, this is just one of many facilities\n   no longer available to us since the dreaded OCO was introduced.\n\n   MVS messages in the \"job messages\" data set provide the link\n   between the devices and the DD name at allocation-time, and\n   show the final disposition of the data set at deallocation-time.\n   The messages of the IEFU83 exit, written at file-close-time, show\n   the link between the DD name and the data set name, as well as\n   showing the access method used, type of access, I/O count, the\n   physical block size, and, where calculable, the approximate\n   byte-transfer count.\n\n   The variation of the '?' character in the U83?14I and U83?15I\n   message-ids is for installations that are only interested in\n   a subset of data sets (eg. only TAPE data sets, only non-VIO\n   data sets, or only updated data sets).\n\n   The MPFLST83 member contains sample statements for the \"proper\"\n   distribution of these messages.  It is assumed that these messages\n   would be unwelcome on the console, hence the MPF suppression.\n\n   MSGJOBLG is used to keep U83021I off the SYSLOG.  If you want it\n   on the SYSLOG then no exit is necessary for this message.\n   MSGNOLOG is used to keep data set I/O messages from appearing\n   on the job log.\n\n   To keep U83?14I, U83?15I and U83064I from being written to the\n   SYSLOG you will probably have to remove routecode 11 from the\n   SYSLOG.  Routecode 11 is essential for these messages so that\n   they go to the \"job messages\" data set.\n\n   Remember, if you want the message but don't want the SMF record,\n   change the SMF parameters to collect the record, and change the\n   exit to delete the record.\n\n                                    Greg Price,\n                                                 16th December 1992.\n\n   P.S.  The comments under FUNCTION in the MSGNOLOG source may seem\n   confusing, but they ARE correct.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CLINE": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\n\\x00\\n\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 10, "newlines": 10, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&LBL     $CLINE    &COMMENT\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n         MVI   LINE,C' '           START WITH A DASH\n         MVC   LINE+1(119),LINE    FILL THE LINE\n         MVI   LINE,C'\u00a6'           MARK THE\n         MVI   LINE+119,C'\u00a6'         CORNERS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$CVTIME": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00&\\x00&\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 38, "newlines": 38, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO --- CONVERT BINARY TIME TO HH:MM:SS.TH\n&LBL     $CVTIME  &OUT,&IN\n         LCLC  &Z\n         SPACE 1\n&Z       SETC  '&LBL'\n         AIF   ('&Z' EQ '').NOLBL\n&Z       DS    0H                  DEFINE THE LABEL\n.NOLBL   ANOP\n         LA    15,&IN              LOAD POINTER TO INPUT FIELD\n         ICM   0,15,0(15)          INSERT INPUT VALUE\n         LA    14,&OUT\n         XC    0(11,14),0(14)\n         SRDA  0,32                AND SHIFT TO R1\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,10(,14)           STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,9(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,7(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'6'             DIVIDE BY 6\n         STC   0,6(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,4(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'6'             DIVIDE BY 6\n         STC   0,3(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,1(,14)            STORE IN OUTPUT AREA\n         STC   1,0(,14)            STORE IN OUTPUT AREA\n         OC    0(11,14),=C'00:00:00.00' INSERT NUMERIC ZONES\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$EDIT": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 9, "newlines": 9, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&LBL     $EDIT &TO,&FROM\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n         L     R0,&FROM            LOAD INPUT VALUE\n         LA    R1,&TO              POINT TO OUTPUT AREA\n         BAL   R14,EDIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$EDITK": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 9, "newlines": 9, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&LBL     $EDITK &TO,&FROM\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n         L     R0,&FROM            LOAD INPUT VALUE\n         LA    R1,&TO              POINT TO OUTPUT AREA\n         BAL   R14,EDITK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PUTYS": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 14, "newlines": 14, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO --- PUT TO JCL MESSAGE DATA SET ---\n&LBL     $PUTYS &LINE,&LEN\n         LCLC  &LLL\n&LLL     SETC  '&LBL'\n         AIF   ('&LLL' EQ '').NOLBL\n&LLL     DS    0H\n.NOLBL   ANOP\n         LA    R0,&LINE         POINT TO OUTPUT LINE\n         ST    R0,36(,R12)      STORE OUTPUT AREA ADDRESS\n         LA    R0,&LEN          LOAD OUTPUT LENGTH\n         STH   R0,42(,R12)      STORE IN PUT PARM LIST\n         L     R15,=V(IEFYS)    LOAD ROUTINE ADDRESS\n         BALR  R14,R15          CALL MSG WRITER ROUTINE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$U83INDX": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 11, "newlines": 11, "modlines": 0, "user": "CHSY227"}, "text": "\n     LIST OF MEMBERS IN THIS PACKAGE:\n\n     $U83INDX - YOU GUESSED IT, YOU ARE INDEED LOOKING AT IT!\n     $U83INFO - SOME THOUGHTS ON THE WHOLE KIT AND CABOODLE.\n     IEFU83   - SMF EXIT SOURCE (ISSUE MESSAGES FOR SOME RECORD TYPES).\n     MSGFLUSH - MPF EXIT SOURCE (FLUSH MESSAGE WITH ONLY A TRACE).\n     MSGJOBLG - MPF EXIT SOURCE (LIMIT MESSAGE TO JOBLOG).\n     MSGNOJLG - MPF EXIT SOURCE (SUPPRESS MESSAGE FROM JOBLOG).\n     MSGNOLOG - MPF EXIT SOURCE (SUPPRESS MESSAGE FROM LOG).\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$U83INFO": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00=\\x00=\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 61, "newlines": 61, "modlines": 0, "user": "CHSY227"}, "text": "\n   This package consists of an IEFU83 SMF exit and several MPF exits.\n   Assembler source is supplied in each case.\n\n   This package represents an example of issuing messages to the log,\n   consoles, and/or users from the IEFU83 SMF exit.  These messages\n   can contain information from SMF records which is not usually\n   available at run-time, without the need for any post-processing\n   effort.\n\n   The main function of this code is to report the I/O activity of\n   a job in the job's own print output.  This is a very handy source\n   of run-time characteristic information often of great value to\n   programmers during debugging and testing.  The idea was that the\n   I/O count for a file would be shown next to the relevant data set\n   name and not just in a DD summary often produced by IEFACTRT SMF\n   exits.\n\n   The famous \"I/O count zap\" was an ideal solution because the\n   information was supplied on existing printlines, so output volumes\n   were not increased.  Alas, this is just one of many facilities\n   no longer available to us since the dreaded OCO was introduced.\n\n   MVS messages in the \"job messages\" data set provide the link\n   between the devices and the DD name at allocation-time, and\n   show the final disposition of the data set at deallocation-time.\n   The messages of the IEFU83 exit, written at file-close-time, show\n   the link between the DD name and the data set name, as well as\n   showing the access method used, type of access, I/O count, the\n   physical block size, and, where calculable, the approximate\n   byte-transfer count.\n\n   The variation of the '?' character in the U83?14I and U83?15I\n   message-ids is for installations that are only interested in\n   a subset of data sets (eg. only TAPE data sets, only non-VIO\n   data sets, or only updated data sets).\n\n   The MPFLST83 member contains sample statements for the \"proper\"\n   distribution of these messages.  It is assumed that these messages\n   would be unwelcome on the console, hence the MPF suppression.\n\n   MSGJOBLG is used to keep U83021I off the SYSLOG.  If you want it\n   on the SYSLOG then no exit is necessary for this message.\n   MSGNOLOG is used to keep data set I/O messages from appearing\n   on the job log.\n\n   To keep U83?14I, U83?15I and U83064I from being written to the\n   SYSLOG you will probably have to remove routecode 11 from the\n   SYSLOG.  Routecode 11 is essential for these messages so that\n   they go to the \"job messages\" data set.\n\n   Remember, if you want the message but don't want the SMF record,\n   change the SMF parameters to collect the record, and change the\n   exit to delete the record.\n\n                                    Greg Price,\n                                                 16th December 1992.\n\n   P.S.  The comments under FUNCTION in the MSGNOLOG source may seem\n   confusing, but they ARE correct.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CVIP": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\"\\x00\"\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 34, "newlines": 34, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&LBL     #CVIP &TO,&FROM,&DWD\n         LCLC  &A,&B,&C,&D,&E,&F\n         LCLA  &Z,&Y,&X,&W,&V,&U\n&B       SETC  '&DWD'\n         AIF   ('&DWD' NE '').L0\n         CNOP  4,8\n&B       SETC  'CVIP&SYSNDX'\n.L0      ANOP\n&A       SETC  '&LBL'\n         AIF   ('&A' EQ '').L1\n&LBL     DS    0H\n.L1      ANOP\n         AIF   ('&DWD' NE '').L2\n         J     *+12                BRANCH AROUND WORK AREA\n&B       DS    D                   CVD/UNPACK WORK AREA\n.L2      ANOP\n         L     R0,&FROM            LOAD THE IP ADDRESS WORD\n         SRDL  R0,32               SHIFT OVER TO R1\n         D     R0,=F'256'          LAST 'TRIT' OF ADDRESS\n         CVD   R0,&B               DECIMALIZE IT\n         UNPK  &TO+12(3),&B+6(2)   GRAB THE VALUE\n         SR    R0,R0\n         D     R0,=F'256'          NEXT 'TRIT'\n         CVD   R0,&B               DECIMALIZE IT\n         UNPK  &TO+8(3),&B+6(2)    GRAB THE VALUE\n         SR    R0,R0\n         D     R0,=F'256'          NEXT 'TRIT'\n         CVD   R0,&B               DECIMALIZE IT\n         UNPK  &TO+4(3),&B+6(2)    GRAB THE VALUE\n         CVD   R1,&B               DECIMALIZE LAST 'TRIT'\n         UNPK  &TO.(3),&B+6(2)     GRAB THE VALUE\n         OC    &TO.(15),=C'000.000.000.000'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE684": {"ttr": 538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00!\\x01  /\\x01  /\\x12V\\x007\\x007\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-07-20T00:00:00", "modifydate": "2020-07-20T12:56:21", "lines": 55, "newlines": 55, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 684 is from Rick Fochtman, and contains a collection of   *   FILE 684\n//*           programs and exits which are very useful.             *   FILE 684\n//*                                                                 *   FILE 684\n//*       Collected or developed by Rich Fochtman.                  *   FILE 684\n//*                                                                 *   FILE 684\n//*       Support:  Sam Golob                                       *   FILE 684\n//*                                                                 *   FILE 684\n//*         email:  sbgolob@cbttape.org                             *   FILE 684\n//*                                                                 *   FILE 684\n//*  A description of the various programs and exits follows:       *   FILE 684\n//*                                                                 *   FILE 684\n//*     CHKSWAP  A gem of a program. A batch program to ATTACH      *   FILE 684\n//*              another batch program and run it non-swappable.    *   FILE 684\n//*                                                                 *   FILE 684\n//*     IEFACTRT Jobs statistics after each step.                   *   FILE 684\n//*                                                                 *   FILE 684\n//*     IEFUTL   Extends wait time based on job type: batch         *   FILE 684\n//*              and stc, forever and TSO for 2 hours only          *   FILE 684\n//*                                                                 *   FILE 684\n//*     IEFU29   Starts dumpsmf automatically at ds switch          *   FILE 684\n//*                                                                 *   FILE 684\n//*     IEFU29A  Starts purgsmf like u28; smf data goes to bit      *   FILE 684\n//*              bucket                                             *   FILE 684\n//*                                                                 *   FILE 684\n//*     IEFU83   EXCP stats at ds close time; see also              *   FILE 684\n//*              MPFLST83 and MSG.. exits                           *   FILE 684\n//*                                                                 *   FILE 684\n//*     MPFLST83 Prevent IEFU83 messages to consoles or log         *   FILE 684\n//*                                                                 *   FILE 684\n//*     MSGFLUSH, MSGJOBLG, MSGNOJLG, MSGNOLOG - useful mpf         *   FILE 684\n//*              exits                                              *   FILE 684\n//*                                                                 *   FILE 684\n//*     PDSSCAN  Just what the name says. very fast.                *   FILE 684\n//*                                                                 *   FILE 684\n//*     PDSUPDTE Again, just what the name says. very fast;         *   FILE 684\n//*              does update in place                               *   FILE 684\n//*                                                                 *   FILE 684\n//*     SMFDUMP  The elusive DUMPSMF program, last distributed      *   FILE 684\n//*              by IBM, long ago                                   *   FILE 684\n//*                                                                 *   FILE 684\n//*     SVCMAP   Program to display the SVC table and extended      *   FILE 684\n//*              SVC's.  A quick dump of the first few bytes        *   FILE 684\n//*              of each SVC is included in the display.            *   FILE 684\n//*                                                                 *   FILE 684\n//*     SVCMAB   REXX to BROWSE the output of the SVCMAP program    *   FILE 684\n//*     SVCMAE   REXX to EDIT   the output of the SVCMAP program    *   FILE 684\n//*     SVCMAR   REXX to REVIEW the output of the SVCMAP program    *   FILE 684\n//*     SVCMAV   REXX to VIEW   the output of the SVCMAP program    *   FILE 684\n//*                                                                 *   FILE 684\n//*     TCPU83, TCBU84 U83 and U84 exits for ftp statistics.        *   FILE 684\n//*              Crude but they work                                *   FILE 684\n//*                                                                 *   FILE 684\n//*     Remainder contains necessary macros, related procs,         *   FILE 684\n//*     etc.                                                        *   FILE 684\n//*                                                                 *   FILE 684\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHKSWAP": {"ttr": 540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00D\\x00\\x882\\x0f\\x01  /\\x12I\\x00\\xe5\\x00\\xd0\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1988-11-15T00:00:00", "modifydate": "2020-07-20T12:49:44", "lines": 229, "newlines": 208, "modlines": 0, "user": "SBGOLOB"}, "text": "CSWP     TITLE 'CHKSWAP --- INITIATE A PROGRAM IN NON-SWAPPABLE MODE'\n*---------------------------------------------------------------------*\n*    THIS IS A BATCH PROGRAM WHICH WILL RUN ANOTHER PROGRAM AS        *\n*                          NONSWAPPABLE                               *\n*                                                                     *\n*    I PRESUME THAT THE AUTHOR OF THIS PROGRAM WAS RICK FOCHTMAN.     *\n*                                                                     *\n*    EXAMPLE USAGE:  ANY PARM FOR THE CALLED PROGRAM COMES            *\n*                    AFTER THE SLASH IN THE PARM FIELD OF THE         *\n*                    EXEC CARD.  THE SLASH IS REQUIRED, EVEN          *\n*                    IF THERE IS NO PARM FOR THE CALLED PROGRAM.      *\n*                                                                     *\n*            PARM FIELD IN THE EXEC CARD:  'PGMNAME/ITS PARMS'        *\n*                                                                     *\n*            //STEPLIB DD   IS THE LIBRARY CONTAINING CHKSWAP         *\n*            //TASKLIB DD   IS THE TASKLIB CONTAINING THE CALLED      *\n*                           PROGRAM.                                  *\n*                                                                     *\n*    //   JOB CARD                                                    *\n*    //*                                                              *\n*    //*   RUN A PROGRAM NONSWAPPABLE                                 *\n*    //*                                                              *\n*    //ATTNSWP EXEC PGM=CHKSWAP,PARM='AMBLIST/'                       *\n*    //STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB                     *\n*    //TASKLIB  DD  DISP=SHR,DSN=SYS1.LINKLIB                         *\n*    //SYSPRINT DD  SYSOUT=*                                          *\n*    //SYSLIB   DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR                     *\n*    //SYSIN    DD *                                                  *\n*     LISTLOAD OUTPUT=XREF,MEMBER=OFFLOAD                             *\n*    /*                                                               *\n*                                                                     *\n*    ORIGINAL JCL TO RUN THE PROGRAM WITHOUT CHKSWAP:                 *\n*                                                                     *\n*    //   JOB CARD                                                    *\n*    //*                                                              *\n*    //STEP1    EXEC PGM=AMBLIST                                      *\n*    //SYSPRINT DD SYSOUT=*                                           *\n*    //SYSLIB   DD DSN=SYS1.W$$.LINKLIB,DISP=SHR                      *\n*    //SYSIN    DD *                                                  *\n*     LISTLOAD OUTPUT=XREF,MEMBER=OFFLOAD                             *\n*    /*                                                               *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*    NOTES:   (FROM SAM GOLOB)                                        *\n*                                                                     *\n*    THE WAY THIS PROGRAM IS SET UP, IT HAS TO BE LINKEDITED WITH     *\n*    SETCODE AC(1) AND IT HAS TO BE RUN FROM AN APF-AUTHORIZED        *\n*    LOAD LIBRARY.  HOWEVER, IF YOU HAVE AN IN-HOUSE SVC THAT DOES    *\n*    AUTHORIZATIONS, YOU CAN INSERT THE CALLS FOR IT AFTER LABEL      *\n*    PGML6, WHERE THE $AUTH CALLS USED TO BE.  WHEN YOU RUN THIS      *\n*    PROGRAM NON-APF-AUTHORIZED, USING THE SVC, IT IS PROBABLY        *\n*    SAFER, BUT NOT EVERYBODY HAS AN \"AUTH SVC\".  I'M NOT SURE HOW    *\n*    THE RSAPF=YES PARM IN THE ATTACH MACRO WORKS, WHEN THIS ENTIRE   *\n*    PROGRAM IS BEING RUN APF-AUTHORIZED.                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*---     STANDARD NON-REENTRANT LINKAGE STUFF                      ---*\n*---------------------------------------------------------------------*\nCHKSWAP  CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'CHKSWAP'  CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE REGISTERS\n         BAL   R2,92(,R15)         BAL AROUND\n         USING *,R13\n         DS    18F\n         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACK POINTERS\n         LR    R13,R2              LOAD PROGRAM BASE\n*---------------------------------------------------------------------*\n*---     COPY AND INTERPRET THE PARM FIELD                         ---*\n*---------------------------------------------------------------------*\n         L     R2,0(,R1)           LOAD PARM STRING POINTER\n         LH    R3,0(,R2)           LOAD PARM STRING LENGTH\n         LA    R3,1(,R3)           INCREMENT BY ONE\n         EX    R3,COPYPARM         COPY TO SCANNING AREA\n         LA    R2,PARM             POINT TO PARM AREA\n         LH    R5,PARMLEN          LOAD ITS LENGTH\n         LA    R5,0(R2,R5)         POINT PAST LAST CHARACTER\n         BCTR  R5,R0               BACK UP BY ONE\n         LA    R4,1                LOAD BXLE INCREMENT\n         LA    R6,PGMNAME          POINT TO PROGRAM NAME FIELD\n         LA    R7,9                LOAD MAX PROGRAM-NAME LENGTH\n         MVC   PGMNAME,=CL8' '     AND BLANK IT OUT\nPGML1    DS    0H\n         CLI   0(R2),C'/'          END OF PROGRAM NAME ??\n         BE    PGML2               YES ---\n         MVC   0(1,R6),0(R2)       NOPE; COPY A CHARACTER\n         LA    R6,1(,R6)           INCREMENT OUTPUT POINTER\n         BCT   R7,*+8              COUNT NAME CHARACTERS DOWN\n         B     ABENDX              TOO LONG; DIE HORRIBLY\n         BXLE  R2,R4,PGML1         LOOP FOR WHOLE NAME\n         B     ABENDX              NO SLASH FOUND; DIE HORRIBLY\n*---------------------------------------------------------------------*\n*---     PROGRAM NAME STRIPPED OUT. NOW SHORTEN THE COPIED PARM    ---*\n*---------------------------------------------------------------------*\nPGML2    DS    0H\n         LH    R3,PARMLEN          LOAD THE PARM LENGTH\n         XC    PARMLEN,PARMLEN     CLOBBER (REPLACED LATER)\nPGML3    DS    0H\n         CLI   PARMLEN+1,C'/'      FAR ENOUGH ??\n         BE    PGML4               YES ---\n         BCTR  R3,R0               NOPE; DECREMENT THE LENGTH\n         MVC   PARM-1(L'PARM),PARM SHIFT PARM LEFT A BYTE\n         B     PGML3               AND LOOP, SEARCHINGLY\nPGML4    DS    0H\n         CH    R3,=H'1'            PARM LESS THAN ONE ??\n         BNL   PGML5               NOPE ---\n         LA    R3,0                YES; ASSUME ZERO\n         STH   R3,PARMLEN          STORE NEW PARM LENGTH\n*        B     PGML6               SKIP PARM MOVE\n*---------------------------------------------------------------------*\n*---     REPLACE THE PARM WITH UPDATED VALUE                       ---*\n*---------------------------------------------------------------------*\nPGML5    DS    0H\n         L     R2,4(,R13)          LOAD SAVE AREA BACK POINTER\n         L     R2,24(,R2)          LOAD ORIG. REGISTER-1 VALUE\n         L     R2,0(,R2)           LOAD PARM STRING POINTER\n         STH   R3,PARMLEN          STORE NEW PARM LENGTH\n         LA    R3,1(,R3)           BUILD LENGTH FOR MVC\n         EX    R3,REPLPARM         AND REPLACE THE PARM VALUE\n*---------------------------------------------------------------------*\n*---     CHECK FOR EXISTENCE OF THE PROGRAM. ABEND IF MISSING.     ---*\n*---------------------------------------------------------------------*\nPGML6    DS    0H\n*        $AUTH ON,KEY=FAR\n         MODESET MODE=SUP\n*        $AUTH OFF,KEY=FAR\n         OPEN  (TASKLIB,INPUT)\n         BLDL  TASKLIB,PGMBLDL     ISSUE BLDL FOR PROGRAM NAME\n         LTR   R15,R15             IS IT PRESENT ??\n         BNZ   ABENDY              NOPE ---\n*---------------------------------------------------------------------*\n*---     SET MYSELF AUTHORIZED AND NON-SWAPPABLE                   ---*\n*---------------------------------------------------------------------*\n         SYSEVENT DONTSWAP         SET NON-SWAPPABLE\n*---------------------------------------------------------------------*\n*---     ATTACH THE SUBJECT PROGRAM, RESETING APF AS WE GO         ---*\n*---------------------------------------------------------------------*\n         ATTACH EPLOC=PGMNAME,RSAPF=YES,ECB=TASKECB,SM=PROB,           X\n               DCB=TASKLIB,ESTAI=ABEND,PARAM=(PARMLEN),VL=1\n         LTR   R15,R15             ATTACH OK ??\n         BNZ   ATTFAIL             NOPE\n         ST    R1,TASKTCB          SAVE TCB ADDRESS\n         WAIT  1,ECB=TASKECB       LET THE TASK COMPLETE\n         CLOSE TASKLIB             DONE WITH THE TASKLIB\n         L     R3,TASKECB          LOAD THE ECB\n         N     R3,TRIMMER          TRIM COMPLETION BITS\n         LTR   R3,R3               NON-ZERO ??\n         BNZ   CHECKEND            YES; CHECK COMPLETION STUFF\nNORMRET  DS    0H\n         DETACH TASKTCB\n         LR    R15,R3\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        RESTORE THE RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         BR    R14                 AND RETURN TO THE SYSTEM\n*---------------------------------------------------------------------*\n*---     NON-ZERO CODE IN ECB. CHECK FOR POSSIBLE ABEND            ---*\n*---------------------------------------------------------------------*\nCHECKEND DS    0H\n         CLI   ABEFLAG,0           DID SUBTASK ABEND ??\n         BE    NORMRET             NOPE ---\n         N     R3,TRIMMER          CLEAR OFF GARBAGE FLAG BITS\n         WTO   'CHKSWAP --- SUBTASK ABENDED. ABEND IS PROPOGATED',     X\n               ROUTCDE=(1,11)\n         ABEND (R3)\n*---------------------------------------------------------------------*\n*---     ABENDS, WITH APPROPRIATE MESSAGES                         ---*\n*---------------------------------------------------------------------*\nATTFAIL  DS    0H\n         WTO   'CHKSWAP - PROBLEM PROGRAM ATTACH FAILED',ROUTCDE=11\n         WTO   'ABENDCODE MINUS 1000 EQUALS ATTACH R.C.',ROUTCDE=11\n         LA    R2,1000(,R15)\n         ABEND (R2),DUMP,STEP\nABENDX   DS    0H\n         WTO   'CHKSWAP - INVALID PGM NAME/PARM FIELD',ROUTCDE=11\n         ABEND 1000,DUMP,STEP\nABENDY   DS    0H\n         WTO   'CHKSWAP - SPECIFIED PROGRAM NOT LOCATED BY BLDL',      X\n               ROUTCDE=11\n         ABEND X'806',DUMP,STEP,SYSTEM\n*---------------------------------------------------------------------*\n*---     TCB STAI EXIT ROUTINE. SET THE ABEND FLAG AND RETURN      ---*\n*---------------------------------------------------------------------*\nABEND    DS    0H\n         USING *,R15\n         OI    ABEFLAG,255         SET THE ABEND FLAG\n         LA    R15,0               SET 'CONTINUE' RETURN CODE\n         BR    R14                 AND RETURN TO SYSTEM\n         DROP  R15\n*---------------------------------------------------------------------*\n*---     CONSTANTS, DATA AREAS AND 'EX'ED INSTRUCTIONS             ---*\n*---------------------------------------------------------------------*\n         LTORG\nABEFLAG  DC    X'00'\nTASKECB  DC    F'0'                SUBTASK ECB\nTASKTCB  DC    A(0)                SUBTASK TCB ADDRESS\nTRIMMER  DC    X'3FFFFFFF'\nCOPYPARM MVC   PARMLEN(0),0(R2)    COPY PARM TO MY AREA\nREPLPARM MVC   0(0,R2),PARMLEN     REPLACE ORIGINAL PARM\nTASKLIB  DCB   DSORG=PO,MACRF=R,DDNAME=TASKLIB\nPARMLEN  DS    H                   PARM STRING LENGTH\nPARM     DS    CL200               ACTUAL PARM AREA\n         DC    XL2'00'             PADS FOR SHIFTING PARM\n         DS    0F                  ALIGNMENT FOR BLDL\nPGMBLDL  DC    AL2(1,72)           BLDL NAME COUNT, LIST LENGTH\nPGMNAME  DC    CL8' '              PROGRAM NAME\n         DS    CL64                BLDL RETURN AREA\n         IKJTCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHKSWAP$": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00G\\x01\\x07\"_\\x01  \\x1f#\\x06\\x00\\x1c\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2020-07-19T23:06:47", "lines": 28, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(CHKSWAP)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   CHKSWAP\n SETCODE AC(1)\n SETSSI  CB500AAA\n ENTRY   CHKSWAP\n NAME    CHKSWAP(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPSMF": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x001\\x001\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 49, "newlines": 49, "modlines": 0, "user": "CHSY227"}, "text": "//SMFDUMP  PROC  CLASS=X,IMAGE=\n//TEMPFILE EXEC PGM=SMFDUMP,REGION=6144K\n//DUMPOUT  DD   DSN=CHPD.SY.SM.&IMAGE..SMFSAVE,DISP=(MOD,CATLG),\n//         UNIT=SYSDA,SPACE=(CYL,(1500,500),RLSE),\n//         DATACLAS=BEST1\n//SYSPRINT DD   SYSOUT=&CLASS\n//SYSABEND DD   SYSOUT=&CLASS\n//ABNLIGNR DD   DUMMY\n//SYSIN    DD   DUMMY\n//*\n//********************************************************************\n//**                                                               ***\n//** THE NEXT STEP -STRIP- CREATES ALL THE DIFFERENT OUTPUT FILES  ***\n//** USING THE TEMP FILE CREATED IN THE PREVIOUS STEP - TEMPFILE.  ***\n//**                                                               ***\n//**  THE OUTPUT FILES ARE AS FOLLOWS:                             ***\n//**                                                               ***\n//**    RACF        FOR RECORD TYPES..  80, 81                     ***\n//**    DBSMF       FOR RECORD TYPES.. 230                         ***\n//**    DAILY       FOR ALL RECORD TYPES EXCEPT 230                ***\n//**    TCPIP       RCD TYPE 118 FOR COMM                          ***\n//**                                                               ***\n//********************************************************************\n//STRIP    EXEC PGM=IFASMFDP\n//SYSPRINT DD   SYSOUT=&CLASS\n//INPUT    DD   DSN=CHPD.SY.SM.&IMAGE..SMFSAVE,DISP=SHR,EROPT=SKP\n//RACF     DD   DSN=CH.SY.SM.PD.&IMAGE..RACF,\n//           DISP=(MOD,CATLG,CATLG),BLKSIZE=27998,\n//           SPACE=(CYL,(100,50),RLSE),UNIT=SYSDA\n//DBSMF    DD   DSN=CHPD.DB.&IMAGE.(+1),\n//           DISP=(,CATLG,DELETE),DATACLAS=CMPR,\n//           SPACE=(CYL,(50,25),RLSE),UNIT=SYSDA,\n//           DCB=(SYS1.MDSCB,BLKSIZE=27998)\n//DAILY    DD   DSN=CH.SY.SM.PD.&IMAGE..DAILY(+1),\n//           DISP=(,CATLG,DELETE),\n//           SPACE=(CYL,(300,150),RLSE),UNIT=(SYSDA,5),\n//           DCB=(SYS1.MDSCB,BLKSIZE=27998)\n//TCPIP    DD   DSN=CHPD.SY.&IMAGE..TCPIP(+1),\n//           DISP=(,CATLG,DELETE),\n//           SPACE=(CYL,(75,75),RLSE),UNIT=SYSDA,\n//           DCB=(SYS1.MDSCB,BLKSIZE=27998)\n//STATS    DD   DSN=CHPD.SY.&IMAGE..DAILY.TOTALS(+1),\n//           DISP=(,CATLG,DELETE),\n//           SPACE=(CYL,(10,5),RLSE),UNIT=SYSDA,\n//           DCB=(SYS1.MDSCB,BLKSIZE=27998)\n//SYSIN    DD   DSN=CH.SY.XX.PD.CTLLIB(STRIPSMF),DISP=SHR\n//*\n//BR14     EXEC PGM=IEFBR14,COND=(0,NE)\n//DD1      DD   DSN=CHPD.SY.SM.&IMAGE..SMFSAVE,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDIT": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x01X\\x01X\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 344, "newlines": 344, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&LABEL   EDIT  &TO,&FROM,&PIC,                                         X\n               &WRKA=CWADOUBL,&WRKB=CWATEMP,&WRKC=CWAEDIT\n         GBLA  &EDITCTR\n         GBLA  &RPMEDIT            EDIT MACRO EXTERNAL REQUIREMENT FLAG\n         GBLA  &RPDOUBL            EDIT MACRO EXTERNAL REQUIREMENT FLAG\n         GBLA  &RPMTEMP            EDIT MACRO EXTERNAL REQUIREMENT FLAG\n         LCLA  &SIZE,&LENGTH,&LEN,&LEN1,&LEN2,&LEN3\n.*\n         LCLA  &PTR,&NI,&ZE,&AS,&PL,&MI,&SI,&DO,&SUM,&$,&POS\n         LCLA  &DIGITS,&MASKSIZ,&CTR,&NEWSIZ,&FROML,&OFFSET\n         LCLA  &FLEN,&CO\n         LCLC  &FILL,&C,&B,&DRIFT,&MASK,&X(24)\n         LCLC  &FLOC\n&SIZE    SETA  K'&PIC              GET PICTURE SIZE+2.\n.*\n.*       CHECK FOR HEX FORMATTING.\n         AIF   (&SIZE LT 4).PICTURE\n         AIF   ('&PIC'(1,4) NE 'HEX(').PICTURE\n.**********************************************************************\n.*\n.*       HEXADECIMAL FORMATING\n.*\n.**********************************************************************\n&EDITCTR SETA  &EDITCTR+1\n&LENGTH  SETA  &SIZE-5\n&C       SETC  '&PIC'(5,&LENGTH)\n&LEN     SETA  &C\n&LEN1    SETA  2*&LEN\n&LEN2    SETA  1+&LEN\n&LEN3    SETA  2*&LEN+1\n&LABEL   MVC   &WRKA.(1),&TO+&LEN1\n         UNPK  &TO.(&LEN3),&FROM.(&LEN2)\n         MVC   &TO+&LEN1.(1),&WRKA\n         TR    &TO.(&LEN1),&WRKC-240 .TRANSLATE TO CHARACTERS.\n&RPMEDIT SETA  1                   SET EXTERNAL DATA REQUIRED.\n         MEXIT\n.*\n.**********************************************************************\n.*\n.*       PICTURE CHARACTER FORMATING\n.*\n.**********************************************************************\n.PICTURE ANOP\n.********\n.*       CONSTRUCT EDIT MASK\n.********\n&RPDOUBL SETA  1                   SET EXTERNAL DATA REQUIRED.\n&RPMTEMP SETA  1                   SET EXTERNAL DATA REQUIRED.\n&FILL    SETC  '40'                DEFAULT FILL CHARACTER.\n&PTR     SETA  2                   SET DEFAULT SCAN POINTER.\n&C       SETC  '&PIC        '\n         AIF   ('&C'(1,1) EQ '''').LOOP  BR IF LEADING APOST.\n         AIF   ('&C'(1,4) NE 'PIC''').PIC1\n&PTR     SETA  5                   SET NEW SCAN START.\n         AGO   .LOOP\n.PIC1    AIF   ('&C'(1,8) NE 'PICTURE''').ERROR3\n&PTR     SETA  9                   SET NEW SCAN START.\n.LOOP    ANOP\n.*\n.*       ISOLATE PICTURE CHARACTERS.\n&C       SETC  '&PIC'(&PTR,1)\n         AIF   ('&C' EQ '9').CNINE\n         AIF   ('&C' EQ 'Z').CZERO\n         AIF   ('&C' EQ '*').CASTER\n         AIF   ('&C' EQ ',').CCOMMA\n         AIF   ('&C' EQ '.').CPERIOD\n         AIF   ('&C' EQ '/').CSLASH\n         AIF   ('&C' EQ ':').CCOLON\n         AIF   ('&C' EQ '_').CUNDL\n         AIF   ('&C' EQ 'B').CBLANK\n         AIF   ('&C' EQ 'H').CHYPHEN\n         AIF   ('&C' EQ '$').CDOLLAR\n         AIF   ('&C' EQ 'S').CSIGN\n         AIF   ('&C' EQ '+').CPLUS\n         AIF   ('&C' EQ '-').CMINUS\n         AIF   ('&C' EQ 'C').CREDITC\n         AIF   ('&C' EQ 'R').CREDITR\n         AIF   ('&C' EQ 'D').CDEBITD\n         AIF   ('&C' EQ 'B').CDEBITB\n         AIF   ('&C' EQ '''').END\n         AGO   .ERROR0\n.*                                 DIGIT SELECT CHAR '9'\n.CNINE   ANOP\n&NI      SETA  &NI+1               SET OCCURANCE OF '9'\n         AGO   .ADD20\n.*                                 DIGIT SELECT CHAR 'Z'\n.CZERO   AIF   ((&NI GT 0) OR (&AS GT 0)).ERROR1\n&ZE      SETA  &ZE+1\n         AGO   .ADD\n.*                                 DIGIT SELECT CHAR '*'\n.CASTER  AIF   ((&NI GT 0) OR (&ZE GT 0)).ERROR1\n&AS      SETA  &AS+1\n&FILL    SETC  '5C'                RESET FILL CHARACTER.\n         AGO   .ADD\n.*                                 DIGIT SELECT CHAR '*'\n.CUNDL   AIF   ((&NI GT 0) OR (&ZE GT 0)).ERROR1\n&AS      SETA  &AS+1\n&FILL    SETC  '6D'                RESET FILL CHARACTER.\n         AGO   .ADD\n.*                                 INSERTION CHAR ','\n.CCOMMA  ANOP\n&B       SETC  '6B'\n         AGO   .NEXT\n.*                                 INSERTION CHAR '.'\n.CPERIOD ANOP\n&B       SETC  '4B'\n         AGO   .NEXT\n.*                                 INSERTION CHAR ':'\n.CCOLON  ANOP\n&B       SETC  '7A'\n         AGO   .NEXT\n.*                                 INSERTION CHAR '/'\n.CSLASH  ANOP\n&B       SETC  '61'\n         AGO   .NEXT\n.*                                 INSERTION CHAR 'B'\n.CBLANK  ANOP\n&B       SETC  '40'\n         AGO   .NEXT\n.*                                 INSERTION CHAR 'H'\n.CHYPHEN ANOP\n&B       SETC  '60'\n         AGO   .NEXT\n.*                                 INSERTION CHAR 'CR'\n.CREDITC ANOP\n&B       SETC  'C3'\n         AGO   .NEXT\n.CREDITR ANOP\n&B       SETC  'D9'\n         AGO   .NEXT\n.*                                 INSERTION CHAR 'DB'\n.CDEBITD ANOP\n&B       SETC  'C4'\n         AGO   .NEXT\n.CDEBITB ANOP\n&B       SETC  'C2'\n         AGO   .NEXT\n.*                                 DRIFTING/INSERTION CHAR '$'\n.CDOLLAR ANOP\n&SUM     SETA  &NI+&ZE+&AS+&PL+&MI+&SI\n         AIF   (&SUM NE 0).ERROR1\n         AIF   ('&PIC'(&PTR+1,1) EQ '&C').DRIFT\n         AIF   ('&PIC'(&PTR+2,1) EQ '&C').DRIFT\n         AIF   (&DO GT 0).DRIFT\n&B       SETC  '5B'\n&$       SETA  &MASKSIZ+1          SAVE FIXED POSITION OF DOLLAR.\n         AGO   .NEXT\n.*                                 DRIFTING CHAR '+'\n.CPLUS   ANOP\n&PL      SETA  &PL+1\n&SUM     SETA  &NI+&ZE+&AS+&MI+&SI+&DO\n.TEST    AIF   (&SUM NE 0).ERROR1\n         AGO   .DRIFT1\n.*                                 DRIFTING CHAR '-'\n.CMINUS  ANOP\n         AIF   ((&MI EQ 0) AND ((&NI+&ZE) GT 0)).CMINUSS\n&MI      SETA  &MI+1\n&SUM     SETA  &NI+&ZE+&AS+&PL+&SI+&DO\n         AGO   .TEST\n.CMINUSS ANOP\n         AIF   ((&AS+&PL+&SI) GT 0).ERROR1\n&B       SETC  '60'                STATIC USE OF '-'\n         AGO   .NEXT               (I.E.  EDIT ...,'999-')\n.*                                 DRIFTING CHAR 'S'\n.CSIGN   ANOP\n&SI      SETA  &SI+1\n&SUM     SETA  &NI+&ZE+&AS+&PL+&MI+&DO\n         AGO   .TEST\n.DRIFT   ANOP\n&DO      SETA  &DO+1\n.DRIFT1  ANOP\n&DRIFT   SETC  '&C'                SAVE DRIFTING CHAR TYPE.\n&B       SETC  '40'                RESERVE SPACE FOR DRIFTING CHAR.\n         AIF   (&PL+&MI+&SI+&DO EQ 1).NEXT\n.ADD     ANOP\n&POS     SETA  &MASKSIZ+1          SAVE DIGIT SELECT POSITION.\n.ADD20   ANOP\n&B       SETC  '20'                ADD DIGIT SELECTOR.\n&DIGITS  SETA  &DIGITS+1           COUNT DIGIT SELECTORS.\n.NEXT    ANOP\n&MASKSIZ SETA  &MASKSIZ+1          INCREMENT LITERAL BYTE COUNT.\n&X(&MASKSIZ) SETC '&B'              ADD BYTE TO MASK.\n&PTR     SETA &PTR+1               INCREMENT PICTURE SCAN POINTER.\n         AGO   .LOOP\n.********\n.*       CONSTRUCT INSTRUCTION SEQUENCE\n.********\n.END     ANOP\n&B       SETC  '&LABEL'\n&FLOC    SETC  '&FROM'             SET DEFAULT SOURCE LOCATION.\n         AIF   (('&FROM'(1,1) EQ '(') AND                              X\n               ('&FROM'(K'&FROM,1) EQ ')')).REGISTR\n&C       SETC  T'&FROM\n         MNOTE *,'  C IS &C TYPE '\n&FLEN    SETA  L'&FROM             SET DEFAULT SOURCE LENGTH.\n.*                                 INPUT AREA TYPE CHECK.\n         AIF   ('&C' EQ 'P').PACKED\n         AIF   ('&C' EQ 'Z').ZONED\n         AIF   ('&C' EQ 'H').BINARY\n         AIF   ('&C' EQ 'F').BINARY\n         AIF   ('&C' EQ 'X').BINARY\n         AIF   ('&C' EQ 'Y').BINARY\n         AIF   ('&C' EQ 'A').BINARY\n         AIF   ('&C' EQ 'R').BINARY\n         AIF   ('&C' EQ 'G').BINARY\n         AIF   ('&C' EQ 'B').BINARY\n         AGO   .ERROR2\n.REGISTR ANOP\n&FLOC    SETC  '&FROM'(2,K'&FROM-2)\n&B       CVD   &FLOC,&WRKA         .CONVERT DATA FOR EDIT.\n         AGO   .BINARY2\n.BINARY  AIF   (&FLEN EQ 4).FULLWD\n         AIF   (&FLEN EQ 2).HALFWD\n&B       SR    14,14               .CLEAR A WORK REGISTER.\n         AIF   (&FLEN EQ 1).BYTE\n         ICM   14,B'0111',&FLOC    .GET INPUT DATA FIELD.\n         AGO   .BINARY1\n.FULLWD  ANOP\n&B       L     14,&FROM            .GET INPUT DATA FIELD.\n         AGO   .BINARY1\n.HALFWD  ANOP\n&B       LH    14,&FROM            .GET INPUT DATA FIELD.\n         AGO   .BINARY1\n.BYTE    IC    14,&FROM            .GET INPUT DATA FIELD.\n.BINARY1 CVD   14,&WRKA            .CONVERT DATA FOR EDIT.\n         AGO   .BINARY2\n.ZONED   ANOP\n&B       PACK  &WRKA,&FROM         .CONVERT DATA FOR EDIT.\n.BINARY2 ANOP\n&FLEN    SETA  8                   SET WORK AREA LENGTH.\n&FLOC    SETC  '&WRKA'             SET WORK AREA LOCATION.\n&B       SETC  ''\n.PACKED  ANOP\n&SUM     SETA &ZE+&AS+&SI+&PL+&DO+&MI\n         AIF   (&SUM EQ 0).NOFILL\n&X(&POS) SETC   '21'                START SIGNIFICANCE.\n.NOFILL  ANOP\n&CTR     SETA 24\n.LOOP1   ANOP\n&MASK    SETC '&MASK'.'&X(25-&CTR)'\n&CTR     SETA &CTR-1\n         AIF   (&CTR NE 0).LOOP1\n         AIF   (&SUM NE 0).CASE2\n.*                                  CASE 1: NO FILL CHARACTERS,\n.*                                          NO DRIFTING CHARACTERS.\n.CASE1   ANOP\n&CTR     SETA  3                   SET DEFAULT MASK PREFIX SIZE.\n&C       SETC  '20'                USE EXTRA DIGIT SELECTOR IF ODD.\n         AIF   (&DIGITS/2*2 NE &DIGITS).ODD1\n&CTR     SETA  2                   SET NEW PREFIX SIZE.\n&C       SETC  ''\n.ODD1    ANOP\n         AIF   ((&FLEN*2-1) GT &DIGITS).USESRC1\n&B       ZAP   &WRKA,&FROM         SET UP TEMPORARY DECIMAL FIELD.\n&FLEN    SETA  8                   SET WORK AREA LENGTH.\n&FLOC    SETC  '&WRKA'             SET WORK AREA LOCATION.\n&B       SETC  ''\n.USESRC1 ANOP\n&MASK    SETC  '&FILL&C.21&MASK'   ADD PREFIX TO MASK.\n&NEWSIZ  SETA  &MASKSIZ+&CTR       ADD PREFIX SIZE TO MASK SIZE.\n&OFFSET  SETA  &FLEN-(&DIGITS+3)/2\n&B       MVC   &WRKB.(&NEWSIZ),=X'&MASK' SET UP EDIT MASK.\n         ED    &WRKB.(&NEWSIZ),&FLOC+&OFFSET EDIT THE PICTURE.\n         MVC   &TO.(&MASKSIZ),&WRKB+&CTR .MOVE PICTURE TO USER AREA.\n         AIF   (&$ NE 0).ADD$\n         MEXIT\n.*                                 CASE 2: FILL CHARACTERS,\n.*                                          NO DRIFTING CHARACTERS.\n.CASE2   ANOP\n&CTR     SETA  1                   SET DEFAULT MASK PREFIX SIZE.\n&C       SETC  ''                  USE EXTRA DIGIT SELECTOR IF EVEN.\n         AIF   (&DIGITS/2*2 NE &DIGITS).ODD2\n&CTR     SETA  2                   SET NEW PREFIX SIZE.\n&C       SETC  '20'\n.ODD2    ANOP\n         AIF   ((&FLEN*2-1) GE &DIGITS).USESRC2\n&B       ZAP   &WRKA,&FROM         SET UP TEMPORARY DECIMAL FIELD.\n&FLEN    SETA  8                   SET WORK AREA LENGTH.\n&FLOC    SETC  '&WRKA'             SET WORK AREA LOCATION.\n&B       SETC  ''\n.USESRC2 ANOP\n         AIF   (&PL+&MI+&SI+&DO GT 0).CASE3\n&MASK    SETC  '&FILL&C&MASK'      ADD PREFIX TO MASK.\n&NEWSIZ  SETA  &MASKSIZ+&CTR       ADD PREFIX SIZE TO MASK SIZE.\n&OFFSET  SETA  &FLEN-(&DIGITS+2)/2\n&B       MVC   &WRKB.(&NEWSIZ),=X'&MASK' .SET UP EDIT MASK.\n         ED    &WRKB.(&NEWSIZ),&FLOC+&OFFSET     .EDIT THE PICTURE.\n         MVC   &TO.(&MASKSIZ),&WRKB+&CTR .MOVE PIC TO USER AREA.\n         AIF   (&$ NE 0).ADD$\n         MEXIT\n.*                                 CASE 3: DRIFTING CHARACTERS.\n.*\n.CASE3   ANOP\n&MASK    SETC  '40&C&MASK.60'      ADD PREFIX,SUFFIX TO MASK.\n&POS     SETA  &POS+&CTR           ADJUST POS ACCORDINGLY.\n&NEWSIZ  SETA  &MASKSIZ+&CTR+1     ADD PREFIX,SUFFIX SIZE TO MASK SIZE.\n&OFFSET  SETA  &FLEN-(&DIGITS+2)/2\n&B       MVC   &WRKB.(&NEWSIZ),=X'&MASK' . SET UP EDIT MASK.\n         LA    1,&WRKB+&POS        .SET REG 1 IF SIGNIFICANCE FORCED.\n         EDMK  &WRKB.(&NEWSIZ),&FLOC+&OFFSET  .EDIT THE PICTURE.\n         BCTR  1,0                 .POINT TO THE RIGHTMOST BLANK.\n&NEWSIZ  SETA  &MASKSIZ+&CTR       SET 'SIGN' POSITION.\n         AIF   ('&DRIFT' EQ '+').POSONLY\n         AIF   ('&DRIFT' EQ '-').NEG\n         AIF   ('&DRIFT' EQ 'S').POS\n         MVI   0(1),C'$'           INSERT DOLLAR SIGN.\n         AGO   .MOVE\n.NEG     ANOP\n&PTR     SETA  &MASKSIZ+&CTR\n         MVC   0(1,1),&WRKB+&PTR    .INSERT MINUS OR BLANK.\n         AGO   .MOVE\n.POSONLY CLI   &WRKB+&NEWSIZ,C'-'  FIELD NEGATIVE ?\n         JE    *+8                 BR IF YES.\n         MVI   0(1),C'+'           INSERT PLUS SIGN.\n         AGO   .MOVE\n.POS     CLI   &WRKB+&NEWSIZ,C'-'  FIELD NEGATIVE ?\n         JE    *+12                BR IF YES.\n         MVI   0(1),C'+'           INSERT PLUS SIGN.\n         J     *+8                 CONTINUE PROCESSING.\n         MVI   0(1),C'-'           INSERT MINUS SIGN.\n.MOVE    MVC   &TO.(&MASKSIZ),&WRKB+&CTR  .MOVE PIC TO USER AREA.\n         AIF   (&$ NE 0).ADD$\n         MEXIT\n.ADD$    ANOP\n&$       SETA  &$-1                GET OFFSET POSITION.\n         MVI   &TO+&$,C'$'         INSERT DOLLAR SIGN.\n         MEXIT\n.*\n.ERROR0  MNOTE 2,'** ERROR- ''&C'' IS AN INVALID PICTURE CHARACTER'\n         SPACE 2\n         MEXIT\n.ERROR1  MNOTE 2,'** ERROR- INVALID USE OF ''&C'' IN PICTURE'\n         SPACE 2\n         MEXIT\n.ERROR2  MNOTE 2,'** ERROR- INPUT DATA SYMBOL MUST HAVE Z,P,H,F,Y,A,B, X\n               OR X TYPE ATTRIBUTE'\n         SPACE 2\n         MEXIT\n.ERROR3  MNOTE 2,'** ERROR- SYNTAX ERROR IN 3RD OPERAND'\n         MNOTE *,'          SHOULD BE SPECIFIED AS:'\n         MNOTE *,'          EDIT OUT,IN,PIC''...'''\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTRT": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x03\\x8a\\x03\\x8a\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 906, "newlines": 906, "modlines": 0, "user": "CHSY227"}, "text": "ACTRT    TITLE 'JOB AND STEP TERMINATION STATISTICS ON SYSOUT'\n*---------------------------------------------------------------------*\n*---     THIS RELATIVELY POOR EXAMPLE OF THE PROGRAMMER'S ART      ---*\n*---     GENERATES AND LISTS A REPORT OF SYSTEM RESOURCE USAGE     ---*\n*---     FOR EACH STEP OF A JOB, STARTED TASK OR TSU AT STEP       ---*\n*---     COMPLETION TIME.  FOR DOCUMENTATION ON THE INPUT          ---*\n*---     PARAMETERS, SEE THE 'USER EXITS' SPL MANUAL.              ---*\n*---                                                               ---*\n*---     IN MVS4.3, LOOK IN MANUAL 'INSTALLATION EXITS',           ---*\n*---     GC28-1637-05                                              ---*\n*---                                                               ---*\n*---     THIS EXIT CALLS MODULE IEFYS, WHICH IS LOCATED IN         ---*\n*---     DISTRIBUTION LIBRARY SYS1.AOSB3. (LMOD IEFTB724)          ---*\n*---------------------------------------------------------------------*\n         MACRO\n&LBL     $CLINE    &COMMENT\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n         MVI   LINE,C' '           START WITH A DASH\n         MVC   LINE+1(119),LINE    FILL THE LINE\n         MVI   LINE,C'\u00a6'           MARK THE\n         MVI   LINE+119,C'\u00a6'         CORNERS\n         MEND\n         MACRO --- CONVERT BINARY TIME TO HH:MM:SS.TH\n&LBL     $CVTIME  &OUT,&IN\n         LCLC  &Z\n         SPACE 1\n&Z       SETC  '&LBL'\n         AIF   ('&Z' EQ '').NOLBL\n&Z       DS    0H                  DEFINE THE LABEL\n.NOLBL   ANOP\n         LA    15,&IN              LOAD POINTER TO INPUT FIELD\n         ICM   0,15,0(15)          INSERT INPUT VALUE\n         LA    14,&OUT\n         XC    0(11,14),0(14)\n         SRDA  0,32                AND SHIFT TO R1\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,10(,14)           STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,9(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,7(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'6'             DIVIDE BY 6\n         STC   0,6(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,4(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'6'             DIVIDE BY 6\n         STC   0,3(,14)            STORE IN OUTPUT AREA\n         SR    0,0\n         D     0,=F'10'            DIVIDE BY 10\n         STC   0,1(,14)            STORE IN OUTPUT AREA\n         STC   1,0(,14)            STORE IN OUTPUT AREA\n         OC    0(11,14),=C'00:00:00.00' INSERT NUMERIC ZONES\n         SPACE 1\n         MEND\n         MACRO\n&LBL     $EDIT &TO,&FROM\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n         L     R0,&FROM            LOAD INPUT VALUE\n         LA    R1,&TO              POINT TO OUTPUT AREA\n         BAL   R14,EDIT\n         MEND\n         MACRO\n&LBL     $EDITK &TO,&FROM\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n         L     R0,&FROM            LOAD INPUT VALUE\n         LA    R1,&TO              POINT TO OUTPUT AREA\n         BAL   R14,EDITK\n         MEND\n         MACRO --- PUT TO JCL MESSAGE DATA SET ---\n&LBL     $PUTYS &LINE,&LEN\n         LCLC  &LLL\n&LLL     SETC  '&LBL'\n         AIF   ('&LLL' EQ '').NOLBL\n&LLL     DS    0H\n.NOLBL   ANOP\n         LA    R0,&LINE         POINT TO OUTPUT LINE\n         ST    R0,36(,R12)      STORE OUTPUT AREA ADDRESS\n         LA    R0,&LEN          LOAD OUTPUT LENGTH\n         STH   R0,42(,R12)      STORE IN PUT PARM LIST\n         L     R15,=V(IEFYS)    LOAD ROUTINE ADDRESS\n         BALR  R14,R15          CALL MSG WRITER ROUTINE\n         MEND\n         TITLE 'JOB AND STEP TERMINATION STATISTICS ON SYSOUT'\nIEFACTRT CSECT\nIEFACTRT RMODE ANY\nIEFACTRT AMODE 31\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         USING IEFACTRT,R15        INITIAL BASE REGISTER\n         B     PROLOG              BRANCH PAST ID STUFF\n         DC    CL8'IEFACTRT'\n         DC    CL8'&SYSTIME'\n         DC    CL8'&SYSDATE'\nPROLOG   DS    0H\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         LR    R11,R15             COPY BASE ADDRESS\n         LA    R10,2048\n         LA    R10,2048(R10,R11)\n         DROP  R15                 DROP THE SETUP BASE\n         USING IEFACTRT,R11,R10    DEFINE THE TRUE BASE\n         LR    R9,R1               COPY THE PARMLIST POINTER\n         USING ACTRTPRM,R9         AND BASE ITS DSECT\n         LR    R3,R0               AND ENTRY CODE\n         GETMAIN RU,LV=WKLEN       GRAB WORK-AREA STORAGE\n         LR    R4,R1               COPY ITS ADDRESS\n         LR    R5,R0               AND LENGTH\n         N     R5,=A(X'FFFFFF')    CLOBBER SUBPOOL NUMBER\n         LA    R14,0               SOURCE ADDRESS = 0\n         LA    R15,0               SOURCE LENGTH/PAD = ZEROS\n         MVCL  R4,R14              CLEAR THE AREA TO ZEROS\n         ST    R1,8(,R13)          ADD TO SAVE-AREA CHAIN\n         ST    R13,4(,R1)          SAVE THE BACK POINTER\n         LR    R13,R1              NEW SAVE AREA/WORK AREA\n         USING WKAREA,R13          AND BASE ITS DSECT\n         CH    R3,=H'20'           TYPE-30 RECORD COMING ??\n         BNE   ENDITALL            NOPE ---\n         L     R8,ACTADDR          POINT TO THE SMF RECORD\n         USING SMFRCD30,R8         AND BASE THE FIRST DSECT\n*---------------------------------------------------------------------*\n*---     WE'RE STILL CONCERNED ABOUT THIS PARTICULAR AREA: WHAT    ---*\n*---     IF THE JOB STEP HAS ENOUGH EXCP ENTRIES THAT THE RECORD   ---*\n*---     OVERFLOWS TO A SECOND RECORD?  THIS AREA NEEDS            ---*\n*---     ADDITIONAL RESEARCH AND TESTING.                          ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30SON,=H'0'      ANY SUBSYSTEM SEGMENTS PRESENT ??\n*        BE    IOSEG               NOPE; MUST BE JUST I/O STATS.\n         L     R7,SMF30SOF         LOAD SUBSYSTEM OFFSET\n         LA    R7,0(R7,R8)         POINT TO SUBSYSTEM SECTION\n         MVI   JSIND,C'S'          SET TO DEFAULT OF STEP\n         USING SMF30PSS,R7         AND BASE ITS SECTION\n         CLC   SMF30TYP,=H'4'      STEP TOTALS ??\n         BE    STEPE               YES ---\n         CLC   SMF30TYP,=H'5'      JOB TERMINATION ??\n         BE    JOBE                YES ---\n         DROP  R7\n         B     ENDITALL            NOTHING TO DO ---\n*---------------------------------------------------------------------*\n*---     START OF A  JOB-TERMINATION RECORD. PROCESS THE           ---*\n*---     COMPLETION SEGMENT OF THE TYPE-30 SMF RECORD.             ---*\n*---------------------------------------------------------------------*\nJOBE     DS    0H\n         MVI   JSIND,C'J'          INDICATE A JOB TERM RECORD\n*---------------------------------------------------------------------*\n*---     START OF A STEP-TERMINATION RECORD. PROCESS THE           ---*\n*---     COMPLETION SEGMENT OF THE TYPE-30 SMF RECORD.             ---*\n*---------------------------------------------------------------------*\nSTEPE    DS    0H\n         CLC   SMF30TON,=H'0'      COMPLETION SECTION PRESENT ??\n         BE    CEND                NOPE; SKIP THIS LINE\n         L     R7,SMF30TOF         LOAD COMPLETION SECTION OFFSET\n         LA    R7,0(R7,R8)         POINT TO COMPLETION SECTION\n         USING SMF30CMP,R7         AND BASE THE FIELDS\n*---------------------------------------------------------------------*\n*---     BOX-TOP LINE                                              ---*\n*---------------------------------------------------------------------*\n         $CLINE                    CLEAR THE LINE AREA\n         MVI   LINE+1,C'-'\n         MVC   LINE+2(118),LINE+1\n         MVI   LINE,C'+'\n         MVI   LINE+119,C'+'\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n*---------------------------------------------------------------------*\n*---     BOX TITLE LINE                                            ---*\n*---------------------------------------------------------------------*\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+4(L'M43),M43    MARK THE REPORT TYPE AS STEP\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BNE   BTL1                NO - IT'S A STEP\n         MVC   LINE+4(L'M44),M44    MARK THE REPORT TYPE AS JOB\nBTL1     $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n*---------------------------------------------------------------------*\n*---     SPACER LINE                                               ---*\n*---------------------------------------------------------------------*\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n*---------------------------------------------------------------------*\n*---     JOBNAME/STEPNAME/COMPLETION LINE                          ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30TON,=H'0'      ANY COMPLETION SECTIONS ??\n         BE    SKP0                NOPE ---\n         MVC   LINE+7(L'M15),M15      MOVE IN THE JOB NAME/STEP NAME\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BE    CEND                YES, DON'T NEED THE REST OF THIS\n         MVC   LINE+28(L'M10),M10\n         MVC   LINE+46(L'M37),M37\n         TM    SMF30STI,X'20'      CANCELLED BY IEFUJI ??\n         BNO   C1                  NOPE ---\n         MVC   LINE+74(24),=CL24'CANCELLED BY IEFUJI EXIT'\n         B     CEND                GO ADD JOB/STEP NAMES\nC1       DS    0H\n         TM    SMF30STI,X'10'      CANCELLED BY IEFUSI ??\n         BNO   C2                  NOPE ---\n         MVC   LINE+74(24),=CL24'CANCELLED BY IEFUSI EXIT'\n         B     CEND                GO ADD JOB/STEP NAMES\nC2       DS    0H\n         TM    SMF30STI,X'08'      CANCELLED BY IEFACTRT ?\n         BNO   C3                  NOPE ---\n         MVC   LINE+74(26),=CL26'CANCELLED BY IEFACTRT EXIT'\n         B     CEND                GO ADD JOB/STEP NAMES\nC3       DS    0H\n         TM    SMF30STI,X'01'      WAS STEP FLUSHED ??\n         BZ    C3A                 NOPE ---\n         MVC   LINE+74(22),=CL22'STEP WAS NOT EXECUTED.'\n         B     CEND                AND SCAT ---\nC3A      DS    0H\n         TM    SMF30STI,X'02'      ABENDED STEP ??\n         BO    C4                  YES ---\n         LH    R0,SMF30SCC         LOAD THE COMPLETION/RETURN CODE\n         CVD   R0,DWORK            DECIMALIZE IT\n         OI    DWORK+7,X'0F'       FORCE LAST CHAR. NUMERIC\n         UNPK  LINE+74(8),DWORK        UNPACK INTO THE LINE\n         MVC   LINE+74(3),=CL3'RC '    SHOW IT'S A RETURN CODE\n         B     CEND                GO ADD JOB/STEP NAMES\nC4       DS    0H\n         TM    SMF30SCC,X'80'      USER ABEND ??\n         BO    C5                  YES ---\n         MVC   LINE+74(11),=CL11'ABEND  S'\n         ICM   R2,3,SMF30SCC       INSERT THE ABEND CODE\n         SRDL  R2,4                SHIFT OFF A NIBBLE\n         SRL   R3,4                INSERT SOME SPACE\n         SRDL  R2,4                ANOTHER NIBBLE\n         SRL   R3,4                AND ANOTHER SPACE\n         SRDL  R2,4                ONE LAST\n         SRL   R3,4                  TIME\n         STCM  R3,14,LINE+74+8         STORE IN THE LINE\n         TR    LINE+74+8(3),=C'0123456789ABCDEF'\n         B     CEND                GO ADD JOB/STEP NAMES\nC5       DS    0H\n         LH    R0,SMF30SCC         LOAD THE CODE\n         N     R0,=A(X'FFF')       TRIM OFF GARBAGE STUFF\n         CVD   R0,DWORK            DECIMALIZE IT\n         OI    DWORK+7,X'0F'       FINISH LAST ZONE\n         UNPK  LINE+74(11),DWORK       ADD TO THE LINE\n         MVC   LINE+74(7),=CL7'ABEND U' AND DATA LABEL\nCEND     DS    0H\n         DROP  R7\n         CLC   SMF30ION,=H'0'      ANY ID SECTIONS ??\n         BE    SKP0                NOPE ---\n         L     R7,SMF30IOF         LOAD OFFSET OF ID SECTION\n         LA    R7,0(R7,R8)         POINT TO ID SECTION\n         USING SMF30ID,R7          AND BASE THE DSECT\n         MVC   LINE+16(8),SMF30JBN     MOVE THE JOB NAME\n         MVC   LINE+34(8),SMF30STM     AND STEP NAME\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n*---------------------------------------------------------------------*\n*---     PROGRAM NAME AND STEP #                                  ---*\n*---------------------------------------------------------------------*\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BE    SKP0                YES, DON'T NEED THE REST OF THIS\n         MVC   LINE+28(L'M54),M54     STEP #\n         MVC   LINE+7(L'M55),M55      PROGRAM\n         MVC   LINE+16(8),SMF30PGM    PROGRAM NAME\n         LH    1,SMF30STN\n         CVD   1,DWORK\n         OI    DWORK+7,X'0F'        MAKE SURE SIGN IS 'F'\n         UNPK  LINE+41(3),DWORK+6(2)\n         CLI   LINE+41,X'F0'   BLANK\n         BNE   BLANK1            OUT\n         MVI   LINE+41,X'40'       ZERO\n         CLI   LINE+42,X'F0'         DIGITS\n         BNE   BLANK1                  FOR\n         MVI   LINE+42,X'40'             READABILITY\nBLANK1   $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\nSKP0     DS    0H\n         DROP  R7\n*---------------------------------------------------------------------*\n*---     START AND END TIMES AND STEP ELAPSED TIME                 ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30ION,=H'0'      ANY ID SECTIONS ??\n         BE    SKP1                NOPE ---\n         L     R7,SMF30IOF         LOAD OFFSET OF ID SECTION\n         LA    R7,0(R7,R8)         POINT TO ID SECTION\n         USING SMF30ID,R7          AND BASE THE DSECT\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECD?\n         BE    JS7                 BUPASS THE NEXT TEST\n         CLC   SMF30PPS,=F'0'      WAS STEP STARTED ??\n         BE    EXCP6               NOPE ---\n*\nJS7      MVC   LINE+7(L'M21A),M21A     START DATE\n         MVC   LINE+36(L'M19A),M19A    END DATE\n         XC    WORK(L'WORK),WORK   CLEAR THE STORAGE\n         MVC   WORK+8(4),SMF30STD  MOVE START DATE TO CONVERT AREA\n         CONVTOD CONVVAL=WORK,TODVAL=TOD,TIMETYPE=BIN,                 X\n               DATETYPE=YYDDD,MF=(E,CONVTOD)\n         STCKCONV STCKVAL=TOD,CONVVAL=WORK,TIMETYPE=BIN,               X\n               DATETYPE=MMDDYYYY,MF=(E,STCKCONV)\n         MVC   TOD(4),WORK+8\n         MVI   TOD+4,X'0F'\n         UNPK  WORK(9),TOD(5)\n         MVC   LINE+19(2),WORK\n         MVI   LINE+21,C'/'\n         MVC   LINE+22(2),WORK+2\n         MVI   LINE+24,C'/'\n         MVC   LINE+25(4),WORK+4\n         XC    WORK(L'WORK),WORK   CLEAR THE STORAGE\n*\n         STCK  TOD\n         STCKCONV STCKVAL=TOD,CONVVAL=WORK,TIMETYPE=BIN,               X\n               DATETYPE=MMDDYYYY,MF=(E,STCKCONV)\n         MVC   TOD(4),WORK+8\n         MVI   TOD+4,X'0F'\n         UNPK  WORK(9),TOD(5)\n         MVC   LINE+47(2),WORK\n         MVI   LINE+49,C'/'\n         MVC   LINE+50(2),WORK+2\n         MVI   LINE+52,C'/'\n         MVC   LINE+53(4),WORK+4\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n*\n         TIME  BIN                 GET THE CURRENT TIME\n         STM   R0,R1,NOW           SAVE FOR FORMATTING\n         MVC   LINE+7(L'M21),M21      START TIME\n         MVC   LINE+36(L'M19),M19      STOP TIME\n         MVC   LINE+60(L'M45),M45      ELAPSED TIME\n         $CVTIME LINE+19,SMF30PPS      DO THE START TIME OF STEP\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BNE   JS2                 NO - SKIP CONVERT\n         $CVTIME LINE+19,SMF30SIT      DO THE START TIME OF JOB\nJS2      $CVTIME LINE+47,NOW           END TIME IS SMF RECORD TIME\n         ZAP   DWORK,SMF30STD      COPY DATE TO MY AREA\n         CVB   R0,DWORK            CONVERT TO BINARY\n         SRDA  R0,32               SHIFT TO DIVIDENT REGISTER\n         D     R0,=F'1000'         SEPARATE YEARS FROM DAYS\n         LR    R15,R0              SAVE THE NUMBER OF DAYS\n         LR    R0,R1               COPY THE YEAR VALUE\n         MH    R0,=H'365'          TIMES DAYS/YEAR\n         SRL   R1,2                YEAR/4 = LEAP DAYS\n         AR    R15,R1               ADD ---\n         AR    R15,R0                   ADD AGAIN ---\n         ZAP   DWORK,NOW+4(4)      COPY DATE TO MY AREA\n         CVB   R0,DWORK            CONVERT TO BINARY\n         SRDA  R0,32               SHIFT TO DIVIDEND REGISTER\n         D     R0,=F'1000'         SEPARATE YEARS FROM DAYS\n         LR    R14,R0              SAVE THE NUMBER OF DAYS\n         LR    R0,R1               COPY THE YEAR VALUE\n         MH    R0,=H'365'          TIMES DAYS/YEAR\n         SRL   R1,2                YEAR/4 = LEAP DAYS\n         AR    R14,R1              ADD ---\n         AR    R14,R0                 ADD AGAIN ---\n         SR    R14,R15             SUBTRACT THEN FROM NOW\n         SRDA  R14,32              SHIFT FOR MULTIPLY\n         M     R14,=F'8640000'     TIMES .01 SEC CHUNKS\n         ICM   R0,15,NOW           LOAD END TIME\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BNE   JS3                 NO USE STEP TIME\n         S     R0,SMF30SIT         SUBTRACT JOB START TIME\n         B     JS4                 GO AROUND NEXT INSTRUCTION\nJS3      S     R0,SMF30PPS         SUBTRACT STEP START TIME\nJS4      AR    R0,R15              ADD THE DAYS' WORTH\n         ST    R0,DWORK            SAVE IN A WORK AREA\n         $CVTIME LINE+69,DWORK         ELAPSED TIME\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         DROP  R7\nSKP1     DS    0H\n*---------------------------------------------------------------------*\n*---     CPU TIME FOR STEP TCB,SRB AND VECTOR FACILITY             ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30CON,=H'0'      IS THERE A PROCESSOR SECTION ??\n         BE    SKPPROC             NOPE ---\n         L     R7,SMF30COF         LOAD SECTION OFFSET\n         LA    R7,0(R7,R8)         POINT TO THE SECTION\n         USING SMF30CAS,R7         AND BASE THE DSECT\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+7(L'M25),M25\n         MVC   LINE+18(L'M25A),M25A  STEP:\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BNE   JS8                 YES- BYPASS A LOT OF STUFF\n         MVC   LINE+18(L'M25B),M25B  JOB:\nJS8      MVC   LINE+25(L'M2),M2\n         MVC   LINE+49(L'M1),M1\n         MVC   LINE+73(L'M11),M11\n         $CVTIME LINE+30,SMF30CPT\n         $CVTIME LINE+54,SMF30CPS\n         $CVTIME LINE+81,SMF30JVU\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BE    JS5                 YES- BYPASS A LOT OF STUFF\n         MVC   LINE+18(L'M8),M8\n         MVC   LINE+25(L'M2),M2\n         MVC   LINE+49(L'M1),M1\n         MVC   LINE+73(L'M11),M11\n         $CVTIME LINE+30,SMF30ICU\n         $CVTIME LINE+54,SMF30ISB\n         $CVTIME LINE+81,SMF30IVU\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         DROP  R7\nSKPPROC  DS    0H\n*---------------------------------------------------------------------*\n*---     PAGING ACTIVITY: 4 LINES FOR NOW, MAY BECOME 5            ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30RON,=H'0'      SECTION PRESENT ??\n         BZ    SKPPAGE             NOPE ---\n         L     R7,SMF30ROF         LOAD ITS OFFSET\n         LA    R7,0(R7,R8)         POINT TO THE SECTION\n         USING SMF30SAP,R7         AND BASE THE SECTION'S DSECT\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+7(L'M29),M29      SECTION HEADER\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+14(L'M23),M23      'PRIVATE AREA'\n         MVC   LINE+44(L'M16),M16      'PAGEINS, '\n         MVC   LINE+69(L'M18),M18      'PAGEOUTS, '\n*        MVC   LINE+95(L'M22),M22      'PAGE RECLAIMS '\n         $EDIT LINE+29,SMF30PGI        PAGEIN COUNT\n         $EDIT LINE+54,SMF30PGO        PAGEOUT COUNT\n*        $EDIT LINE+80,SMF30REC        RECLAIM COUNT\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+14(L'M7),M7        'VIO:'\n         MVC   LINE+44(L'M16),M16      'PAGEINS, '\n         MVC   LINE+69(L'M18),M18      'PAGEOUTS, '\n         MVC   LINE+95(L'M22),M22      'PAGE RECLAIMS '\n         $EDIT LINE+29,SMF30VPI        PAGEIN COUNT\n         $EDIT LINE+54,SMF30VPO        PAGEOUT COUNT\n         $EDIT LINE+80,SMF30VPR        RECLAIM COUNT\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+14(L'M13),M13      'COMMON:'\n         MVC   LINE+44(L'M16),M16      'PAGEINS, '\n*        MVC   LINE+95(L'M22),M22      'PAGE RECLAIMS '\n         $EDIT LINE+29,SMF30CPI        PAGEIN COUNT\n*        $EDIT LINE+80,SMF30CPR        PAGEOUT COUNT\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+14(L'M12),M12      'SWAPS:'\n         MVC   LINE+44(L'M30),M30      'PAGES IN,'\n         MVC   LINE+69(L'M31),M31      'PAGES OUT,'\n         MVC   LINE+95(L'M26),M26      'SWAP SEQUENCES'\n         $EDIT LINE+29,SMF30PSI        PAGES SWAPPED IN\n         $EDIT LINE+54,SMF30PSO        PAGES SWAPPED OUT\n         $EDIT LINE+80,SMF30NSW        SWAP SEQUENCES\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+44(L'M41),M41      'PAGE STEALS'\n         $EDIT LINE+29,SMF30PST        PAGESTEAL COUNT\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n*---------------------------------------------------------------------*\n*---     STORAGE USED/REQUESTED                                    ---*\n*---------------------------------------------------------------------*\n         MVC   LINE+7(L'M32),M32   SECTION HEADER\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+15(L'M46),M46  'AVAILABLE:'\n         MVC   LINE+27(L'M47),M47  'PRIVATE AREA:'\n         MVC   LINE+57(L'M48),M48  'EXTENDED PRIVATE AREA:'\n         L     R0,SMF30RGB         LOAD THE BYTE COUNT\n         SRL   R0,10               DIVIDE BY 1K (1024)\n         ST    R0,DWORK            SAVE FOR CONVERSION\n         $EDITK LINE+40,DWORK      CONVERT INTO THE LINE\n         L     R0,SMF30ERG         LOAD THE BYTE COUNT\n         SRL   R0,10               DIVIDE BY 1K (1024)\n         ST    R0,DWORK            SAVE FOR CONVERSION\n         $EDITK LINE+80,DWORK      CONVERT INTO THE LINE\n         MVC   LINE+49(2),=C'K,'   ADD THE\n         MVC   LINE+89(2),=C'K '     UNIT TAGS\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+15(L'M49),M49  'USED:'\n         MVC   LINE+27(L'M47),M47  'PRIVATE AREA:'\n         MVC   LINE+57(L'M48),M48  'EXTENDED PRIVATE AREA:'\n         L     R0,SMF30URB         LOAD BYTE COUNT\n         SRL   R0,10               DIVIDE BY 1K (1024)\n         ST    R0,DWORK            SAVE FOR CONVERSION\n         $EDITK LINE+40,DWORK      CONVERT INTO THE LINE\n         L     R0,SMF30EUR         LOAD THE BYTE COUNT\n         SRL   R0,10               DIVIDE BY 1K (1024)\n         ST    R0,DWORK            SAVE FOR CONVERSION\n         $EDITK LINE+80,DWORK      CONVERT INTO THE LINE\n         MVC   LINE+49(2),=C'K,'   ADD THE\n         MVC   LINE+89(2),=C'K '     UNIT TAGS\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+27(L'M51),M51  'PRIVATE AREA:'\n         MVC   LINE+57(L'M52),M52  'EXTENDED PRIVATE AREA:'\n         L     R0,SMF30ARB         LOAD BYTE COUNT\n         SRL   R0,10               DIVIDE BY 1K (1024)\n         ST    R0,DWORK            SAVE FOR CONVERSION\n         $EDITK LINE+40,DWORK      CONVERT INTO THE LINE\n         L     R0,SMF30EAR         LOAD THE BYTE COUNT\n         SRL   R0,10               DIVIDE BY 1K (1024)\n         ST    R0,DWORK            SAVE FOR CONVERSION\n         $EDITK LINE+80,DWORK      CONVERT INTO THE LINE\n         MVC   LINE+49(2),=C'K,'   ADD THE\n         MVC   LINE+89(2),=C'K '     UNIT TAGS\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+15(L'M50),M50  'REGION REQUESTED:'\n         $EDITK LINE+40,SMF30RGN   EDIT IN THE REGION SIZE\n         MVC   LINE+49(2),=C'K '   UNIT TAG\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         TM    SMF30SFL,X'40'      IEFUSI MODIFY REGION ??\n         BZ    NOUSI               NOPE ---\n         MVC   LINE+15(L'M53),M53  'REGION MODIFIED ...'\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\nJS5      $CLINE                    CLEAR THE LINE AREA\nNOUSI    DS    0H\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         DROP  R7\nSKPPAGE  DS    0H\n*---------------------------------------------------------------------*\n*---     SERVICE UNITS USED                                        ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30PON,=H'0'\n         BE    SKPPERF\n         L     R7,SMF30POF\n         LA    R7,0(R7,R8)\n         USING SMF30PRF,R7\n         MVC   LINE+7(L'M33),M33   STEP: MESSAGE\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECD?\n         BNE   JS10                NOPE\n         MVC   LINE+7(L'M33),M33A  JOB: MESSAGE\nJS10     $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+25(L'M6),M6\n         MVC   LINE+52(L'M5),M5\n         MVC   LINE+79(L'M3),M3\n         MVC   LINE+106(L'M4),M4\n         $EDIT LINE+10,SMF30CSU\n         $EDIT LINE+37,SMF30SRB\n         $EDIT LINE+64,SMF30IO\n         $EDIT LINE+91,SMF30MSO\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         MVC   LINE+52(L'M40),M40\n         $EDIT LINE+37,SMF30SRV\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         DROP  R7\nSKPPERF  DS    0H\n*---------------------------------------------------------------------*\n*---     OPERATOR SECTION                                          ---*\n*---------------------------------------------------------------------*\n         CLI   JSIND,C'J'          IS THIS A JOB TERM RECORD?\n         BE    JS6                 YES - WE ARE DONE\n         CLC   SMF30OON,=H'0'      ANY OPERATOR SECTIONS ??\n         BE    SKPOPER             NOPE ---\n         L     R7,SMF30OOF\n         LA    R7,0(R7,R8)\n         USING SMF30OPS,R7\n         CLC   SMF30PDM(24),=6F'0' ALL ZEROS ??\n         BE    SKPOPER\n         MVC   LINE+7(L'M34),M34\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         CLC   SMF30PTM(8),=2F'0'\n         BE    NOTAPE\n         MVC   LINE+11(L'M39),M39\n         MVC   LINE+60(L'M36),M36\n         $EDIT LINE+38,SMF30PTM\n         $EDIT LINE+83,SMF30TPR\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\nNOTAPE   DS    0H\n         CLC   SMF30PDM(8),=2F'0'\n         BE    NODISK\n         MVC   LINE+11(L'M38),M38\n         MVC   LINE+60(L'M35),M35\n         $EDIT LINE+38,SMF30PDM\n         $EDIT LINE+83,SMF30PRD\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\nNODISK   DS    0H\n         CLC   SMF30MTM(8),=2F'0'\n         BE    NOMSS\n         MVC   LINE+11(L'M38A),M38A\n         MVC   LINE+60(L'M35A),M35A\n         $EDIT LINE+38,SMF30MTM\n         $EDIT LINE+83,SMF30MSR\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\nNOMSS    DS    0H\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         DROP  R7\nSKPOPER  DS    0H\n*---------------------------------------------------------------------*\n*---     EXCP STATISTICS SECTION                                   ---*\n*---                                                               ---*\n*---     THIS GETS RATHER HAIRY HERE; WE HAVE TO WORK BETWEEN TWO  ---*\n*---     'ARRAYS' WITHOUT OVERFLOWING EITHER ONE.  THE FIRST       ---*\n*---     ARRAY IS THE EXCP SECTION OF THE SMF RECORD AND THE       ---*\n*---     SECOND IS THE PRINT LINE.  IN ADDITION, WE NEED TO        ---*\n*---     CONSIDER THE FACT THE THE EXCP SECTION MAY BE EXTENDED    ---*\n*---     TO MULTIPLE FOLLOWING RECORDS AS WELL AND WE DON'T        ---*\n*---     REALLY KNOW WHAT ELSE IS PRESENT IN THOSE RECORDS.  AND   ---*\n*---     I HAVEN'T EVEN CONSIDERED THE JOB TERMINATION RECORDS,    ---*\n*---     YET.                                                      ---*\n*---------------------------------------------------------------------*\n         CLC   SMF30EON,=H'0'      ANY EXCP SEGMENTS ??\n         BE    EXCP6               NOPE ---\n         MVC   LINE+7(L'M27),M27   SECTION HEADER\n         MVC   LINE+25(L'M42),M42  DETAIL DESCRIPTOR\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\nEXCPST   DS    0H\n         L     R7,SMF30EOF         LOAD SECTION OFFSET\n         LA    R7,0(R7,R8)         POINT TO THE SECTION\n         USING SMF30EXP,R7         BASE THE SEGMENT'S DSECT\n         LH    R4,SMF30ELN         LOAD SEGMENT LENGTH\n         LR    R5,R4               COPY THE LENGTH\n         MH    R5,SMF30EON         TIMES NUMBER OF SEGMENTS\n         LA    R5,0(R5,R7)         POINT TO LAST SEGMENT\n         SR    R5,R4               BACK UP TO LAST ENTRY\n         LA    R3,LINE+4           POINT TO FIRST POSITION\n         LA    R6,LINE+81          AND LAST POSITION\n         $CLINE                    CLEAR THE LINE AREA\nEXCP1    DS    0H\n         CLC   SMF30DEV,=H'0'      NULL DEVTYPE ??\n         BE    EXCP5               YES; VIO OR DUMMY\n         MVC   15(8,R3),SMF30DDN   COPY THE DDNAME\n         ICM   R0,3,SMF30CUA       INSERT UNIT ADDRESS\n         SRDL  R0,4\n         SRL   R1,4\n         SRDL  R0,4\n         SRL   R1,4\n         SRDL  R0,4\n         SRL   R1,4\n         SRDL  R0,4\n         SRL   R1,4\n         STCM  R1,B'1111',24(R3)   STORE ADDRESS IN LINE\n         TR    24(4,R3),=C'0123456789ABCDEF'\n         $EDIT 0(,R3),SMF30BLK     EDIT IN THE BLOCK COUNT\n         MVC   29(4,R3),=CL4'XXXX' STARTING DEVICE TYPE\n         LA    R1,DEVTAB           POINT TO DEVICE TYPE TABLE\n         LA    R14,6               AND ENTRY LENGTH\n         LA    R15,DEVTABE         POINT TO LAST ENTRY\nEXCP2    DS    0H\n         CLC   SMF30DEV(2),0(R1)   IS THIS A MATCH ??\n         BNE   EXCP3               NOPE ---\n         MVC   29(4,R3),2(R1)      YES; TRANSLATE IT\n         B     EXCP4               AND SCOOT ---\nEXCP3    DS    0H\n         BXLE  R1,R14,EXCP2        AND LOOP, SEARCHINGLY\nEXCP4    DS    0H\n         LA    R3,38(,R3)          POINT TO NEXT LINE AREA\n         CR    R3,R6               FAR ENOUGH ??\n         BNH   EXCP5               NOPE ---\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\n         LA    R3,LINE+4           RELOAD STARTING POINTER\nEXCP5    DS    0H\n         BXLE  R7,R4,EXCP1         AND LOOP ---\n         CLI   LINE+22,C' '        ANYTHING IN THIS LINE\n         BE    EXCP6               NOPE ---\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\nEXCP6    DS    0H\n         CLC   SMF30EOR,=H'0'      ANY IN SUBSEQUENT RECORDS ??\n         BNE   EXCP7               YES ---\nJS6      MVI   LINE,C'+'\n         MVI   LINE+1,C'-'\n         MVC   LINE+2(117),LINE+1\n         MVI   LINE+119,C'+'\n         $PUTYS LINE,120           OUTPUT THE CONSTRUCTED LINE\n         $CLINE                    CLEAR THE LINE AREA\nEXCP7    DS    0H\nENDITALL DS    0H\n         LR    R1,R13              COPY MY WORK-AREA ADDRESS\n         L     R13,4(,R13)\n         FREEMAIN RU,A=(1),LV=WKLEN RELEASE THE STORAGE\n         LM    R14,R12,12(R13)     RESTORE THE REGISTERS\n         LA    R15,0               SET ZERO RETURN CODE\n         LA    R1,0                RETAIN THIS SMF RECORD\n         BR    R14                 AND RETURN TO SMF\nEDITK    DS    0H\n         CVD   R0,DWORK\n         MVC   EDWORK,MASKA        COPY THE EDIT MASK\n         ED    EDWORK,DWORK        ACTUAL EDIT\n         MVC   0(9,R1),EDWORK+11   MOVE TO OUTPUT FIELD\n         BR    R14                 AND RETURN TO LOCAL CALLER\nEDIT     DS    0H\n         CVD   R0,DWORK\n         MVC   EDWORK,MASKA        COPY THE EDIT MASK\n         ED    EDWORK,DWORK        ACTUAL EDIT\n         MVC   0(14,R1),EDWORK+6   MOVE TO OUTPUT FIELD\n         BR    R14                 AND RETURN TO LOCAL CALLER\nMASKA    DS    0X\n         DC    C' '\n         DC    X'202020'\n         DC    C','\n         DC    X'202020'\n         DC    C','\n         DC    X'202020'\n         DC    C','\n         DC    X'202020'\n         DC    C','\n         DC    X'202120'\nM1       DC    CL03'SRB'\nM2       DC    CL03'TCB'\nM3       DC    CL04'IOC,'\nM4       DC    CL03'MSO'\nM5       DC    CL04'SRB,'\nM6       DC    CL04'TCB,'\nM7       DC    CL04'VIO:'\nM8       DC    CL05'INIT:'\nM9       DC    CL05'PLPA:'\nM10      DC    CL05'STEP:'\nM11      DC    CL06'VECTOR'\nM12      DC    CL06'SWAPS:'\nM13      DC    CL07'COMMON:'\nM14      DC    CL07'SYSTEM:'\nM15      DC    CL08'JOBNAME:'\nM16      DC    CL08'PAGEINS,'\nM17      DC    CL09'E/SYSTEM:'\nM18      DC    CL09'PAGEOUTS,'\nM19      DC    CL9'END TIME:'\nM19A     DC    CL9'END DATE:'\nM20      DC    CL11'E/PVT AREA:'\nM21      DC    CL11'START TIME:'\nM21A     DC    CL11'START DATE:'\nM22      DC    CL13'PAGE RECLAIMS'\nM23      DC    CL13'PRIVATE AREA:'\nM24      DC    CL14'PVT AREA USED:'\nM25      DC    CL9'CPU TIME:'\nM25A     DC    CL5'STEP:'\nM25B     DC    CL5' JOB:'\nM26      DC    CL14'SWAP SEQUENCES'\nM27      DC    CL16'DEVICE ACTIVITY:'\nM28      DC    CL16'E/PVT AREA USED:'\nM29      DC    CL30'PAGING AND SWAPPING ACTIVITY:'\nM30      DC    CL9'PAGES IN,'\nM31      DC    CL10'PAGES OUT,'\nM32      DC    CL31'STORAGE AVAILABILITY AND USAGE:'\nM33      DC    CL32'SERVICE UNITS USED BY THIS STEP:'\nM33A     DC    CL32'SERVICE UNITS USED BY THIS JOB: '\nM34      DC    CL21'DEVICE MOUNTS ISSUED:'\nM35      DC    CL22'SPECIFIC DASD VOLUMES:'\nM35A     DC    CL21'SPECIFIC MSS VOLUMES:'\nM36      DC    CL22'SPECIFIC TAPE VOLUMES:'\nM37      DC    CL26'CONDITION/COMPLETION CODE:'\nM38      DC    CL26'NON-SPECIFIC DASD VOLUMES:'\nM38A     DC    CL26'NON-SPECIFIC MSS VOLUMES:'\nM39      DC    CL26'NON-SPECIFIC TAPE VOLUMES:'\nM40      DC    CL19'TOTAL SERVICE UNITS'\nM41      DC    CL35'PAGE STEALS FROM THIS ADDRESS SPACE'\nM42      DC    CL42'(BLOCK COUNT, DDNAME, DEVICE, DEVICE TYPE)'\nM43      DC    CL27'STEP TERMINATION STATISTICS'\nM44      DC    CL27'JOB TERMINATION STATISTICS '\nM45      DC    CL9'ELAPSED: '\nM46      DC    CL10'AVAILABLE:'\nM47      DC    CL13'PRIVATE AREA:'\nM48      DC    CL22'EXTENDED PRIVATE AREA:'\nM49      DC    CL5'USED:'\nM50      DC    CL17'REGION REQUESTED:'\nM51      DC    CL13'SYSTEM  AREA:'\nM52      DC    CL22'EXTENDED SYSTEM  AREA:'\nM53      DC    CL46'--- REGION REQUEST MODIFIED BY IEFUSI EXIT ---'\nM54      DC    CL12'STEP NUMBER:'\nM55      DC    CL08'PROGRAM:'\nDEVTAB   DS    0H\n         DC    X'200F',CL4'3390'\n         DC    X'8081',CL4'3490'\n         DC    X'8080',CL4'3480'\n         DC    X'8003',CL4'3400'\n         DC    X'200E',CL4'3380'\n         DC    X'0400',CL4'OCR'\n         DC    X'080A',CL4'1443'\n         DC    X'080B',CL4'3203'\n         DC    X'080C',CL4'3525'\n         DC    X'080E',CL4'3800'\n         DC    X'0801',CL4'2540'\n         DC    X'0802',CL4'2540'\n         DC    X'0804',CL4'2501'\n         DC    X'0805',CL4'2520'\n         DC    X'0806',CL4'3505'\n         DC    X'0808',CL4'1403'\n         DC    X'0809',CL4'3211'\n         DC    X'081A',CL4'1285'\n         DC    X'081B',CL4'1287'\n         DC    X'081C',CL4'1288'\n         DC    X'081D',CL4'1419'\n         DC    X'081E',CL4'1419'\n         DC    X'081F',CL4'1275'\n         DC    X'0810',CL4'2671'\n         DC    X'0811',CL4'4245'\n         DC    X'0813',CL4'4248'\n         DC    X'0816',CL4'3890'\n         DC    X'0817',CL4'3886'\n         DC    X'0818',CL4'2495'\n         DC    X'0819',CL4'3895'\n         DC    X'0820',CL4'1052'\n         DC    X'0821',CL4'2150'\n         DC    X'0822',CL4'3210'\n         DC    X'0823',CL4'3215'\n         DC    X'0830',CL4'3215'\n         DC    X'084C',CL4'3838'\n         DC    X'0842',CL4'3851'\n         DC    X'0844',CL4'3540'\n         DC    X'100A',CL4'3284'\n         DC    X'100B',CL4'3286'\n         DC    X'100C',CL4'3158'\n         DC    X'100D',CL4'3036'\n         DC    X'100E',CL4'3138'\n         DC    X'100F',CL4'3148'\n         DC    X'1002',CL4'2250'\n         DC    X'1003',CL4'2260'\n         DC    X'1004',CL4'1053'\n         DC    X'1005',CL4'2280'\n         DC    X'1006',CL4'2282'\n         DC    X'1007',CL4'MD85'\n         DC    X'1008',CL4'3066'\n         DC    X'1009',CL4'327X'\n         DC    X'200A',CL4'3340'\n         DC    X'200B',CL4'3350'\n         DC    X'200C',CL4'3375'\n         DC    X'200D',CL4'3330'\n         DC    X'2001',CL4'2311'\n         DC    X'2002',CL4'2301'\n         DC    X'2003',CL4'2303'\n         DC    X'2004',CL4'2302'\n         DC    X'2005',CL4'2321'\n         DC    X'2006',CL4'2305'\n         DC    X'2007',CL4'2305'\n         DC    X'2008',CL4'2314'\n         DC    X'2009',CL4'3330'\n         DC    X'40F1',CL4'3791'\n         DC    X'4001',CL4'2702'\n         DC    X'4002',CL4'2701'\n         DC    X'4003',CL4'2703'\n         DC    X'4004',CL4'2955'\n         DC    X'4005',CL4'3705'\n         DC    X'4100',CL4'CTC'\n         DC    X'8001',CL4'2400'\nDEVTABE  DS    0H\n         DC    X'8001',CL4'2400'\n         LTORG\nACTRTPRM DSECT\nACTCXPA  DS    A                   COMMON EXIT PARM AREA\nACTSTEPN DS    A                   ADDRESS OF STEP NAME (CL8)\nACTPGMRN DS    A                   ADDRESS OF PGMR NAME (CL20)\nACTTCBAF DS    A                   ADDRESS OF CPUTIME/ACCT FLD COUNT\nACTACCT  DS    A                   ADDRESS OF JOB ACCT FIELDS\nACTTSBAF DS    A                   ADDRESS OF CPUTIME/STEP ACCT FLD CNT\nACTSACCT DS    A                   ADDRESS OF STEP ACCT FIELDS\nACTFLAG1 DS    A                   ADDRESS OF HALFWORD FLAGS\nACTTERM  DS    A                   ADDRESS OF TERM. STATUS (XL2)\nACTADDR  DS    A                   ADDRESS OF THE SMF RECORD\nWKAREA   DSECT\nSAVEAREA DS    18F\nNOW      DS    D                   TIME AND DATE FROM 'TIME' MACRO\nDWORK    DS    D\nJSIND    DS    C                   JOB/STEP INDICATOR\nEDWORK   DS    CL20\nLINE     DS    CL133\n         DS    0F                  ALIGN ON A WORD BOUNDARY\nWORK     DS    XL16\nTOD      DS    XL8\nTODLEN   EQU   L'TOD+L'WORK\nCONVTOD  CONVTOD MF=L\nSTCKCONV STCKCONV MF=L\nENDWK    DS    0D\nWKLEN    EQU   ENDWK-WKAREA\n         IFASMFR 30\n         END\n/*\n//IEWL     EXEC PGM=IEWL,REGION=4M,COND=(8,LE),\n//      PARM='LET,LIST,XREF,SIZE=(1400K,800K),NOTEST,RENT,REUS,AC(1)'\n//SYSPRINT DD SYSOUT=*\n//*YSLMOD  DD DISP=SHR,DSN=SYS0008.LINKLIB\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.PT.LINKLIB\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(1,2),RLSE)\n//SYSLIN   DD DISP=(OLD,DELETE),DSN=&&OBJ\n//         DD *\n INCLUDE SYSLIB(IEFTB724)\n NAME IEFACTRX(R)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.AOSB3\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00`\\x00`\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 96, "newlines": 96, "modlines": 0, "user": "CHSY227"}, "text": "IEFUTL   TITLE 'BOTCC USER TIME LIMIT EXIT '\n*---------------------------------------------------------------------*\n*---     FUNCTION - GRANT UNLIMITED EXTENSION FOR WAIT TIME TO     ---*\n*---                ANY JOB OR STC.  ALLOW TSO SESSIONS TO BE      ---*\n*---                CANCELLED AFTER 2 HOURS OF WAIT TIME.          ---*\n*---------------------------------------------------------------------*\nIEFUTL   CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         J     *+12                BRANCH AROUND\n         DC    AL1(7),CL7'IEFUTL'\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             COPY EP ADDRESS\n         USING IEFUTL,R12          DECLARE PROGRAM BASE REGISTER\n*---------------------------------------------------------------------*\n*---                                                               ---*\n*---     ESTABLISH ADDRESSABILITY TO SMF PARAMETER AREA DSECT      ---*\n*---     EVALUATE REGISTER 0 = 0 - JOB CPU TIME EXCEEDED           ---*\n*---                         = 4 - STEP CPU TIME EXCEEDED          ---*\n*---                         = 8 - JOB WAIT TIME EXCEEDED          ---*\n*---------------------------------------------------------------------*\n         L     R11,0(R1)           LOAD POINTER TO PARAMETER AREA\n         USING SMFEPLA,R11         DECLARE THE MAP\n         CHI   R0,4                SEE IF JOB/STEP TIME EXCEEDED\n         JH    WAITTIME            MUST BE WAIT TIME\n*---------------------------------------------------------------------*\n*---     CPU TIME EXCEEDED - EXTEND FOR ETERNITY                   ---*\n*---------------------------------------------------------------------*\n         LHI   R2,8                INDICATE RETURN CODE OF 8 -\n         ICM   R1,15,ETERNITY      LOAD TIME EXTENSION IN SECONDS\n         J     RETURN              GO RETURN TO CALLER\n*---------------------------------------------------------------------*\n*---     WAIT TIME EXCEEDED                                        ---*\n*---        - ALLOW TSO SESSION TO BE CANCELLED                    ---*\n*---        - EXTEND JOB/STC INDEFINITELY                          ---*\n*---------------------------------------------------------------------*\nWAITTIME DS    0H\n         TM    SMFOPT,SMFTSO       SEE IF TSO SESSION\n         JO    CANCEL              YES...GO CANCEL TSO SESSION\n*---------------------------------------------------------------------*\n*---     EXTEND INDEFINITELY ---                                   ---*\n*---------------------------------------------------------------------*\n         LHI   R2,8                EXTEND CPU TIME IN SECONDS\n         ICM   R1,15,ETERNITY      LOAD TIME EXTENSION IN SECONDS\n         J     RETURN              GO RETURN TO CALLER\n*---------------------------------------------------------------------*\n*---     ZERO REGISTER 2 TO INDICATE CANCEL                        ---*\n*---------------------------------------------------------------------*\nCANCEL   DS    0H\n         SLR   R2,R2               CANCEL RETURN CODE\n*---------------------------------------------------------------------*\n*---     NORMAL END PROCESSING                                     ---*\n*---------------------------------------------------------------------*\nRETURN   DS    0H\n         L     R14,12(,R13)        LOAD ADDRESS FOR RETURN\n         LR    R15,R2              LOAD RETURN CODE FROM REGISTER 2\n         LM    R2,R12,28(R13)      RESTORE REGISTERS 2 TO 12\n         BR    R14                 RETURN TO CALLER\n         SPACE 2\nETERNITY DC    X'7FFFFFFF'\n         SPACE 2\n************************ DSECTS (MAPPING MACROS) **********************\nSMFEPLA  DSECT\nSMFJOBN  DS    CL8\nSMFTIME  DS    CL4\nSMFDATE  DS    CL4\nSMFSID   DS    CL4\nSMFUSID  DS    CL8\nSMFSTEP  DS    CL1\nSMFOPT   DS    CL1\nSMFTSO   EQU   X'01'\nSMFVS1   DS    CL1\nSMFRESV  DS    CL1\nSMFUSER  DS    CL4\n         ORG   SMFUSER\nSMFUSERC DS    CL1\nSMFUSERW DS    CL1\n         ORG\n         SPACE 5\n********************************* EQUATES *****************************\n         SPACE 5\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU29": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\xd9\\x00\\xd9\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 217, "newlines": 217, "modlines": 0, "user": "CHSY227"}, "text": "IEFU29   TITLE 'SMF SWITCH EXIT ROUTINE                        '\n*---------------------------------------------------------------------*\n*---     NAME: IEFU29                                              ---*\n*---                                                               ---*\n*---     USAGE:  SMF EXIT ROUTINE TO START DUMP OF SMF WHEN SMF    ---*\n*---           SWITCH COMMAND IS ISSUED.                           ---*\n*---                                                               ---*\n*---     METHOD:                                                   ---*\n*---           1. ISSUE COMMAND 'START SMFDUMP,IMAGE=.........'    ---*\n*---           2. ISSUE WTO THAT COMMAND HAS BEEN ISSUED.          ---*\n*---                                                               ---*\n*---     PATCH AREA: PATCH (UNUSED AND INTIALIZED TO               ---*\n*---           BINARY ZEROES)                                      ---*\n*---                                                               ---*\n*---     ATTRIBUTES = KEY 0, REENTRANT, SUPERVISOR STATE, ENABLED, ---*\n*---           NO LOCKS HELD                                       ---*\n*---                                                               ---*\n*---     ENTRY POINT:  IEFU29                                      ---*\n*---                                                               ---*\n*---     LINKAGE:  AT ENTRY, R1 POINTS TO FULLWORD ADDRESS OF THE  ---*\n*---           SMF DATASET TO BE DUMPED.                           ---*\n*---                                                               ---*\n*---     EXIT: AT PROGRAM END VIA BSM 0,14                         ---*\n*---                                                               ---*\n*---     RETURN CODES: = ZERO EXIT NOPED JES NOT ACTIVE            ---*\n*---           0 ZERO EXIT NO-OPED JES NOT ACTIVE                  ---*\n*---           4 TO PREVENT SMF FROM ISSUING MESSAGE IEE362A OR    ---*\n*---             IEE362I                                           ---*\n*---                                                               ---*\n*---     DATA AREAS: CVT, SMCA                                     ---*\n*---                                                               ---*\n*---     MACROS: SAVE, WTO, RETURN, GETMAIN, FREEMAIN              ---*\n*---                                                               ---*\n*---     MESSAGES: INFORM OPERATOR THAT COMMAND HAS BEEN ISSUED.   ---*\n*---------------------------------------------------------------------*\n         SPACE 3\nIEFU29   CSECT ,                       CSECT NAME DECLARED\nIEFU29   AMODE 31\nIEFU29   RMODE ANY\n*---------------------------------------------------------------------*\n*---     REGISTER EQUATES                                          ---*\n*---------------------------------------------------------------------*\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         SPACE 3\n*---------------------------------------------------------------------*\n*---     STANDARD ENTRY LINKAGE (REENTRANT)                        ---*\n*---------------------------------------------------------------------*\n         B     28(,R15)            BRANCH AROUND\n         DC    AL1(23),CL7'IEFU29'\n         DC    CL8'&SYSTIME'\n         DC    CL8'&SYSDATE'\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         LR    R12,R15             COPY ENTRY POINT ADDRESS\n         USING IEFU29,R12          DECLARE THE BASE REGISTER\n         L     R8,0(R1)            SAVE INPUT PARM(DSNAME)\n         GETMAIN RU,LV=DATALEN,SP=0,LOC=BELOW GET STORAGE\n         ST    R13,4(,R1)          SAVE CALLER'S SAVE AREA ADDR\n         ST    R1,8(,R13)          SAVE MY SAVE AREA ADDRESS\n         LR    R13,R1              LOAD SAVE AREA ADDRESS\n         USING DATA,R13            SET UP DATA AREA ADDRESSABILITY\n*---------------------------------------------------------------------*\n*---     LOCATE SYSTEM IDENTIFICATION VIA CVT AND SMCA             ---*\n*---------------------------------------------------------------------*\n         L     R5,CVTPTR               OBTAIN ADDRESS OF CVT\n         USING CVTMAP,R5               TELL THE ASSEMBLER\n         L     R5,CVTSMCA              @ OF SMF CONTROL AREA\n         DROP  R5                      DONE USING THE CVT\n         USING SMCABASE,R5             TELL THE ASSEMBLER\n         MVC   SYSID,SMCASID           COPY SYSTEM IDENTIFIER\n         DROP  R5                      DONE USING SMCA\n*---------------------------------------------------------------------*\n*---     ENQ TO SEE IF WE'RE ALREADY ACTIVE.                       ---*\n*---------------------------------------------------------------------*\n         MVC   ENQLIST(LENQLIST),ENQLSTX LOAD IN MODEL PARM LIST\n         ENQ   MF=(E,ENQLIST)          TEST IF RESOURCE IN USE?\n         LTR   R15,R15                 WAS THE RESOURCE AVAILABLE?\n         BNZ   SKIPDUMP                NO, DO NOT START DUMP\n*---------------------------------------------------------------------*\n*---     CONVERT SYSID TO PARM VALUE FOR DDUMPSMF PROC             ---*\n*---------------------------------------------------------------------*\n         LM    R5,R7,SRCHPRM       LOAD BXLE PARMS\n         B     CMPID1              BRANCH AROUND 'EYEBALLER'\n         DC    CL42'ZAP TO 47F0.... TO NEGATE ID TRANSLATE -->'\nCMPID1   NOP   CMPID3\n         CLC   0(4,R5),SYSID       GOT A MATCH HERE ??\n         BNE   CMPID2              NOPE ---\n         MVC   SYSID,4(R5)         YES; TRANSLATE IT\n         B     CMPID3              AND EXIT\nCMPID2   DS    0H\n         BXLE  R5,R6,CMPID1\nCMPID3   DS    0H\n*---------------------------------------------------------------------*\n*---     BUILD COMMAND AND OPERATOR MESSAGE                        ---*\n*---------------------------------------------------------------------*\n         MVC   WTOAREA(WTOLEN),WTOL    MOVE IN WTO MESSAGE\n         MVC   WTOAREA+IMGOFF(4),SYSID MOVE DSN IN MESSAGE\n         MVC   CMDAREA(CMDLEN),CMDL    MOVE IN START COMMAND\n         MVC   CMDADSN,SYSID           MOVE DSN IN START CMD\n         SLR   R0,R0                   CLEAR REG ZERO FOR SVC 34\n         MGCR  CMDAREA                 ISSUE START COMMAND\n         B     *+4(R15)            CHECK RETURN CODE\n         B     CNSLMSG             OK; STARTED MESSAGE\n         B     RC4                 RETURN CODE OF 4\n         B     RC8                 RETURN CODE OF 8\n         B     RC12                RETURN CODE OF 12\n         B     RC16                RETURN CODE OF 16\nCNSLMSG  DS    0H\n         WTO   MF=(E,WTOAREA)          ISSUE MSG\nSKIPDUMP DS    0H\n         LR    R1,R13                  LOAD GETMAINED AREA\n         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA\n         FREEMAIN RU,LV=DATALEN,A=(1)  FREE GETMAINED STORAGE\n         LM    14,12,12(13)            RESTORE REGISTERS\n         LA    15,4                    SET RETURN CODE TO 4\n         BSM   0,R14                   RESTORE CALLER'S MODE\n         SPACE 3\nRC4      DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 4'\n         B     SKIPDUMP            AND EXIT ---\nRC8      DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 8'\n         B     SKIPDUMP            AND EXIT ---\nRC12     DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 12'\n         B     SKIPDUMP            AND EXIT ---\nRC16     DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 16'\n         B     SKIPDUMP            AND EXIT ---\n         EJECT\n*\n*  DATA AREA\n*\nSMFQNAME DC    CL8'IPOSMF01'\nSMFRNAME DC    CL7'DATASET'\n*\n* THIS TABLE DETERMINES THE IMAGE= PARM FOR THE DUMPSMF PROC,\n* BASED ON THE SYSID IN THE PARM LIST.\n*\nSRCHPRM  DC    A(TABLE,8,TABLEEND)\nTABLE    DC    CL4'PD  ',CL4'SMF1'\n         DC    CL4'TD  ',CL4'SMF2'\n         DC    CL4'SYSD',CL4'SMF3'\n         DC    CL4'SUNG',CL4'SMF1'\n         DC    CL4'MV  ',CL4'SMF4'\n         DC    CL4'MVSD',CL4'SMF4'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\nTABLEEND DC    CL4'????',CL4'????'\n*\nCMDL     DS    0F                  START COMMAND FORMAT FOR SVC\n         DC    AL2(CMDLEN)         LENGTH OF STRING\n         DC    AL2(00)\n         DC    C'START DUMPSMF,IMAGE=' COMMAND\nCMDLDSN  DC    CL4' '              SYSTEM IMAGE IDENTIFIER\n         DC    C' '                BLANK AT END OF COMMAND\nCMDLEN   EQU   *-CMDL              LENGTH OF COMMAND STRING\n*\n*  N O T E :  DO NOT CHANGE LENGTH OF THE FOLLOWING DSNAME  AREA\nWTOL     WTO   'IEFU29 HAS ISSUED ''START DUMPSMF,IMAGE=1234'' ',      C\n               ROUTCDE=(1,2,11),MF=L\nWTOLEN   EQU   *-WTOL             LENGTH OF WTO STRING\nIMGOFF   EQU   43                 OFFSET DSNAME FIELD IN WTO LIST\nENQLSTX  ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM),RET=TEST,MF=L\n*\n* DATA DSECT - AREA TO BE GETMAIN'ED\n*\nDATA     DSECT\nSAVE     DS    18F                REGISTER SAVE AREA\nSYSID    DS    CL4\nCMDAREA  DS    0F,XL(CMDLEN)      AREA FOR COMMAND\n         ORG   CMDAREA+(CMDLDSN-CMDL)\nCMDADSN  DS    CL4' '\n         ORG   ,\nWTOAREA  DS    0F,XL(WTOLEN)      AREA FOR WTO PARM LIST\nENQLIST  ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM),RET=TEST,MF=L\nLENQLIST EQU   *-ENQLIST          LENGTH OF WTO STRING\nRESERVED DS    4D                 RESERVED\nDATALEN  EQU   *-DATA             EQUATE FOR LENGTH OF DATA DSECT\n*\nIEFU29   CSECT                    GET BACK TO CSECT\n         DS    0D                 FORCE TO DOUBLE WORD\n*\n* PATCH AREA\n*\nMODLEN   EQU   *-IEFU29           EQUATE FOR MODULE LENGTH(- PATCH)\nPTCHLEN  EQU   ((MODLEN+7)/8+7)/8*8 PATCH AREA LENGTH EQUATE\nPTCHLNTH DC    Y(PTCHLEN)          LENGTH OF PATCH AREA\nPTCHBASE DC    S(PATCH)            BASE DISPLACED ADDRESS OF PATCH\nPATCH    DC    XL(PTCHLEN)'00'     PATCH AREA\n*\n         PRINT OFF\n         CVT   DSECT=YES               MAP THE CVT AREA\n         IEESMCA\n         PRINT ON\n         END   IEFU29\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU29A": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\xd6\\x00\\xd6\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 214, "newlines": 214, "modlines": 0, "user": "CHSY227"}, "text": "IEFU29   TITLE 'SMF SWITCH EXIT ROUTINE                        '\n*---------------------------------------------------------------------*\n*---     NAME: IEFU29                                              ---*\n*---                                                               ---*\n*---     USAGE:  SMF EXIT ROUTINE TO START PURGE OF SMF WHEN SMF   ---*\n*---           SWITCH COMMAND IS ISSUED.                           ---*\n*---                                                               ---*\n*---     METHOD:                                                   ---*\n*---           1. ISSUE COMMAND 'START PURGSMF,IMAGE=.........'    ---*\n*---           2. ISSUE WTO THAT COMMAND HAS BEEN ISSUED.          ---*\n*---                                                               ---*\n*---     PATCH AREA: PATCH (UNUSED AND INTIALIZED TO               ---*\n*---           BINARY ZEROES)                                      ---*\n*---                                                               ---*\n*---     ATTRIBUTES = KEY 0, REENTRANT, SUPERVISOR STATE, ENABLED, ---*\n*---           NO LOCKS HELD                                       ---*\n*---                                                               ---*\n*---     ENTRY POINT:  IEFU29                                      ---*\n*---                                                               ---*\n*---     LINKAGE:  AT ENTRY, R1 POINTS TO FULLWORD ADDRESS OF THE  ---*\n*---           SMF DATASET TO BE DUMPED.                           ---*\n*---                                                               ---*\n*---     EXIT: AT PROGRAM END VIA BSM 0,14                         ---*\n*---                                                               ---*\n*---     RETURN CODES: = ZERO EXIT NOPED JES NOT ACTIVE            ---*\n*---           0 ZERO EXIT NO-OPED JES NOT ACTIVE                  ---*\n*---           4 TO PREVENT SMF FROM ISSUING MESSAGE IEE362A OR    ---*\n*---             IEE362I                                           ---*\n*---                                                               ---*\n*---     DATA AREAS: CVT, SMCA                                     ---*\n*---                                                               ---*\n*---     MACROS: SAVE, WTO, RETURN, GETMAIN, FREEMAIN              ---*\n*---                                                               ---*\n*---     MESSAGES: INFORM OPERATOR THAT COMMAND HAS BEEN ISSUED.   ---*\n*---------------------------------------------------------------------*\n         SPACE 3\nIEFU29A  CSECT ,                       CSECT NAME DECLARED\nIEFU29A  AMODE 31\nIEFU29A  RMODE ANY\n*---------------------------------------------------------------------*\n*---     REGISTER EQUATES                                          ---*\n*---------------------------------------------------------------------*\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         SPACE 3\n*---------------------------------------------------------------------*\n*---     STANDARD ENTRY LINKAGE (REENTRANT)                        ---*\n*---------------------------------------------------------------------*\n         B     28(,R15)            BRANCH AROUND\n         DC    AL1(23),CL7'IEFU29A'\n         DC    CL8'&SYSTIME'\n         DC    CL8'&SYSDATE'\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         LR    R12,R15             COPY ENTRY POINT ADDRESS\n         USING IEFU29,R12          DECLARE THE BASE REGISTER\n         L     R8,0(R1)            SAVE INPUT PARM(DSNAME)\n         GETMAIN RU,LV=DATALEN,SP=0,LOC=BELOW GET STORAGE\n         ST    R13,4(,R1)          SAVE CALLER'S SAVE AREA ADDR\n         ST    R1,8(,R13)          SAVE MY SAVE AREA ADDRESS\n         LR    R13,R1              LOAD SAVE AREA ADDRESS\n         USING DATA,R13            SET UP DATA AREA ADDRESSABILITY\n*---------------------------------------------------------------------*\n*---     LOCATE SYSTEM IDENTIFICATION VIA CVT AND SMCA             ---*\n*---------------------------------------------------------------------*\n         L     R5,CVTPTR               OBTAIN ADDRESS OF CVT\n         USING CVTMAP,R5               TELL THE ASSEMBLER\n         L     R5,CVTSMCA              @ OF SMF CONTROL AREA\n         DROP  R5                      DONE USING THE CVT\n         USING SMCABASE,R5             TELL THE ASSEMBLER\n         MVC   SYSID,SMCASID           COPY SYSTEM IDENTIFIER\n         DROP  R5                      DONE USING SMCA\n*---------------------------------------------------------------------*\n*---     ENQ TO SEE IF WE'RE ALREADY ACTIVE.                       ---*\n*---------------------------------------------------------------------*\n         MVC   ENQLIST(LENQLIST),ENQLSTX LOAD IN MODEL PARM LIST\n         ENQ   MF=(E,ENQLIST)          TEST IF RESOURCE IN USE?\n         LTR   R15,R15                 WAS THE RESOURCE AVAILABLE?\n         BNZ   SKIPDUMP                NO, DO NOT START DUMP\n*---------------------------------------------------------------------*\n*---     CONVERT SYSID TO PARM VALUE FOR DPURGSMF PROC             ---*\n*---------------------------------------------------------------------*\n         LM    R5,R7,SRCHPRM       LOAD BXLE PARMS\n         B     CMPID1              BRANCH AROUND 'EYEBALLER'\n         DC    CL42'ZAP TO 47F0.... TO NEGATE ID TRANSLATE -->'\nCMPID1   B     CMPID3\n         CLC   0(4,R5),SYSID       GOT A MATCH HERE ??\n         BNE   CMPID2              NOPE ---\n         MVC   SYSID,4(R5)         YES; TRANSLATE IT\n         B     CMPID3              AND EXIT\nCMPID2   DS    0H\n         BXLE  R5,R6,CMPID1\nCMPID3   DS    0H\n*---------------------------------------------------------------------*\n*---     BUILD COMMAND AND OPERATOR MESSAGE                        ---*\n*---------------------------------------------------------------------*\n         MVC   WTOAREA(WTOLEN),WTOL    MOVE IN WTO MESSAGE\n*        MVC   WTOAREA+IMGOFF(4),SYSID MOVE DSN IN MESSAGE\n         MVC   CMDAREA(CMDLEN),CMDL    MOVE IN START COMMAND\n*        MVC   CMDADSN,SYSID           MOVE DSN IN START CMD\n         SLR   R0,R0                   CLEAR REG ZERO FOR SVC 34\n         MGCR  CMDAREA                 ISSUE START COMMAND\n         B     *+4(R15)            CHECK RETURN CODE\n         B     CNSLMSG             OK; STARTED MESSAGE\n         B     RC4                 RETURN CODE OF 4\n         B     RC8                 RETURN CODE OF 8\n         B     RC12                RETURN CODE OF 12\n         B     RC16                RETURN CODE OF 16\nCNSLMSG  DS    0H\n         WTO   MF=(E,WTOAREA)          ISSUE MSG\nSKIPDUMP DS    0H\n         LR    R1,R13                  LOAD GETMAINED AREA\n         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA\n         FREEMAIN RU,LV=DATALEN,A=(1)  FREE GETMAINED STORAGE\n         LM    14,12,12(13)            RESTORE REGISTERS\n         LA    15,4                    SET RETURN CODE TO 4\n         BSM   0,R14                   RESTORE CALLER'S MODE\n         SPACE 3\nRC4      DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 4'\n         B     SKIPDUMP            AND EXIT ---\nRC8      DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 8'\n         B     SKIPDUMP            AND EXIT ---\nRC12     DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 12'\n         B     SKIPDUMP            AND EXIT ---\nRC16     DS    0H\n         WTO   'IEFU29: MGCR RETURN CODE 16'\n         B     SKIPDUMP            AND EXIT ---\n         EJECT\n*\n*  DATA AREA\n*\nSMFQNAME DC    CL8'IPOSMF01'\nSMFRNAME DC    CL7'DATASET'\n*\nSRCHPRM  DC    A(TABLE,8,TABLEEND)\nTABLE    DC    CL4'PD  ',CL4'SMF1'\n         DC    CL4'TD  ',CL4'SMF2'\n         DC    CL4'SYSD',CL4'SMF3'\n         DC    CL4'SUNG',CL4'SMF1'\n         DC    CL4'MVSD',CL4'SMF4'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\n         DC    CL4'????',CL4'????'\nTABLEEND DC    CL4'????',CL4'????'\n*\nCMDL     DS    0F                  START COMMAND FORMAT FOR SVC\n         DC    AL2(CMDLEN)         LENGTH OF STRING\n         DC    AL2(00)\n         DC    C'START PURGSMF       ' COMMAND\nCMDLDSN  DC    CL4' '              SYSTEM IMAGE IDENTIFIER\n         DC    C' '                BLANK AT END OF COMMAND\nCMDLEN   EQU   *-CMDL              LENGTH OF COMMAND STRING\n*\n*  N O T E :  DO NOT CHANGE LENGTH OF THE FOLLOWING DSNAME  AREA\nWTOL     WTO   'IEFU29 HAS ISSUED ''START PURGSMF'' CMD        ',      C\n               ROUTCDE=(1,2,11),MF=L\nWTOLEN   EQU   *-WTOL             LENGTH OF WTO STRING\nIMGOFF   EQU   43                 OFFSET DSNAME FIELD IN WTO LIST\nENQLSTX  ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM),RET=TEST,MF=L\n*\n* DATA DSECT - AREA TO BE GETMAIN'ED\n*\nDATA     DSECT\nSAVE     DS    18F                REGISTER SAVE AREA\nSYSID    DS    CL4\nCMDAREA  DS    0F,XL(CMDLEN)      AREA FOR COMMAND\n         ORG   CMDAREA+(CMDLDSN-CMDL)\nCMDADSN  DS    CL4' '\n         ORG   ,\nWTOAREA  DS    0F,XL(WTOLEN)      AREA FOR WTO PARM LIST\nENQLIST  ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM),RET=TEST,MF=L\nLENQLIST EQU   *-ENQLIST          LENGTH OF WTO STRING\nRESERVED DS    4D                 RESERVED\nDATALEN  EQU   *-DATA             EQUATE FOR LENGTH OF DATA DSECT\n*\nIEFU29   CSECT                    GET BACK TO CSECT\n         DS    0D                 FORCE TO DOUBLE WORD\n*\n* PATCH AREA\n*\nMODLEN   EQU   *-IEFU29           EQUATE FOR MODULE LENGTH(- PATCH)\nPTCHLEN  EQU   ((MODLEN+7)/8+7)/8*8 PATCH AREA LENGTH EQUATE\nPTCHLNTH DC    Y(PTCHLEN)          LENGTH OF PATCH AREA\nPTCHBASE DC    S(PATCH)            BASE DISPLACED ADDRESS OF PATCH\nPATCH    DC    XL(PTCHLEN)'00'     PATCH AREA\n*\n         PRINT OFF\n         CVT   DSECT=YES               MAP THE CVT AREA\n         IEESMCA\n         PRINT ON\n         END   IEFU29\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU83": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x04\\t\\x04\\t\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 1033, "newlines": 1033, "modlines": 0, "user": "CHSY227"}, "text": "IEFU83   TITLE 'SMF RECORD (SVC 83 ENTRY) CONFIRMATION USER EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE: IEFU83 - SMF RECORD WRITE CONFIRMATION EXIT (SVC ENTRY)     *\n*                                                                     *\n* FUNCTION: TO ALLOW OR SUPPRESS THE WRITING OF SMF RECORDS           *\n*           ACCORDING TO USER SPECIFICATION.  IN ADDITION, TO         *\n*           PERFORM USER SPECIFIC PROCESSING.                         *\n*                                                                     *\n* MACROS: FROM SYS1.MACLIB AND SYS1.MODGEN.                           *\n*                                                                     *\n* ENTRY:  THIS MODULE RECEIVES CONTROL FROM SVC83/IGC0008C BEFORE     *\n*         IT WRITES EACH SMF RECORD TO THE SMF DATASET.  NOTE THAT    *\n*         THIS ROUTINE DOES NOT RECEIVE CONTROL FOR RECORDS FOR       *\n*         WHICH WRITING HAS BEEN SUPPRESSED BY THE SYSTEM SMF OPTIONS *\n*         OR RECORDS WHICH ARE WRITTEN VIA THE SMF BRANCH ENTRY.      *\n*                                                                     *\n*         REGISTERS AT ENTRY:                                         *\n*         R1  -  ADDRESS OF SMF RECORD RDW                            *\n*         R13 -  ADDRESS OF 72 BYTE SAVEAREA                          *\n*         R14 -  RETURN ADDRESS                                       *\n*         R15 -  ADDRESS OF IEFU83 (ENTRY POINT)                      *\n*                                                                     *\n* EXIT:   THIS MODULE MUST RESTORE ALL REGISTERS EXCEPT R15 WHICH     *\n*         CONTAINS A RETURN CODE.  THE SMF RECORD MAY BE MODIFIED     *\n*         BY THIS EXIT.                                               *\n*                                                                     *\n*         RETURN CODES:                                               *\n*         0   -  WRITE THE SMF RECORD TO THE SMF DATASET.             *\n*         4   -  SUPPRESS THE WRITING OF THE SMF RECORD.              *\n*                                                                     *\n* ATTRIBUTES: REUS,RENT,REFR, KEY 0, ENABLED, AMODE=31, RMODE=ANY.    *\n*                                                                     *\n* NOTE: GETMAINS DONE FOR SUBPOOL 231 (CSA, TCB'S KEY, FETCH          *\n*       PROTECTED, PAGEABLE, NONSWAPABLE) BECAUSE THE REGION MAY BE   *\n*       FULL WITH THE USER'S OWN DATA.                                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* WRITTEN BY:  GREG PRICE    FERNTREE COMPUTER SERVICES (MELB. AUST.) *\n*              15 OCT 92     MVS/SP4.2.0                              *\n*                                                                     *\n*              20 OCT 92     DISPLAY 'VTOC FOR VOLSER' INSTEAD OF     *\n*                            44X'04' WHEN VTOC IS ACCESSED (14/15).   *\n*                                                                     *\n*              22 OCT 92     REARRANGE 14/15/64 MESSAGES SO THERE     *\n*                            IS ALWAYS ROOM TO SHOW THE BLOCK SIZE.   *\n*                                                                     *\n*              17 DEC 92     ISSUE MESSAGE FOR TAPE E-O-V AND SHOW    *\n*                            VOLUME SERIAL NUMBER FOR TAPE RECORDS.   *\n*                            SHOW '<1KB' FOR 1 TO 1023 BYTES RATHER   *\n*                            THAN '0KB' WHICH COULD BE MISLEADING.    *\n*                                                                     *\n*              29 JAN 93     SUPPRESS MESSAGE IF DDNAME IS 'SMPPTS'   *\n*                            AND AN INPUT BPAM FILE IS ACCESSED TO    *\n*                            VASTLY REDUCE SMP APPLY AND ACCEPT       *\n*                            PROCESSING MESSAGE VOLUMES.              *\n*                                                                     *\n*              09 FEB 93     NEW TAPE PROCESSING: MAKE AN \"M\" MESSAGE *\n*                            FOR EACH TAPE VOLUME (E-O-V AND CLOSE)   *\n*                            SHOWING BLOCK COUNT AND BYTE COUNT WHERE *\n*                            PRACTICABLE.                             *\n*                            ALSO, MAKE A \"C\" MESSAGE FOR CLOSE WITH  *\n*                            THE TOTAL EXCP COUNT FOR THE WHOLE FILE. *\n*                                                                     *\n*              19 FEB 93     SUPPRESS PROBABLY MISLEADING BYTE        *\n*                            COUNT FOR VARIABLE-LENGTH UNBLOCKED      *\n*                            RECORDS, AS IS ALSO DONE FOR RECFM=U.    *\n*                                                                     *\n*              31 MAY 93     SHOW BYTE TRANSFERRED COUNT ESTIMATE     *\n*                            IF RECFM=VB BY CORRECTING JFCRFO IN      *\n*                            PREVIOUS CHANGE TO JFCRFB.               *\n*                                                                     *\n*              03 MAY 94     INCLUDE KEY IN BYTE COUNT FOR DISK       *\n*                            FILES.  FOR VARIABLE LENGTH RECORDS      *\n*                            ONLY ESTIMATE BYTE COUNT WHEN BLOCKED    *\n*                            AND ONLY FOR OUTPUT (TYPE 15) BUT NOT    *\n*                            IF QSAM LOCATE MODE IS USED.  BYTE       *\n*                            COUNT COULD BE WRONG ON INPUT BECAUSE    *\n*                            THE FILE MAY HAVE BEEN CREATED WITH      *\n*                            QSAM LOCATE MODE.  QSAM LOCATE MODE      *\n*                            ON OUTPUT (DSORG=PS,MACRF=PL) WILL       *\n*                            ALWAYS PRODUCE SHORT BLOCKS (UNLESS      *\n*                            ALL RECORDS HAVE MAXIMUM LENGTH, IN      *\n*                            WHICH CASE THERE IS NO BLOCKING).        *\n*                            EXPECTED \"SHORTNESS\" IS BLOCKSIZE        *\n*                            MINUS LOGICAL-RECORD-LENGTH BYTES.       *\n*                            REPLACE BYTE COUNT ESTIMATE FOR QSAM     *\n*                            PUT LOCATE FOR VARIABLE LENGTH RECORDS   *\n*                            WITH 'BLKNG=1' WHEN BLKSIZE = LRECL+4    *\n*                            AND WITH 'BLKNG<2' WHEN BLKSIZE IS NOT   *\n*                            GREATER THAN TWICE THE LRECL.            *\n*                                                                     *\n*              14 MAY 96     USE 4K AS BLOCK SIZE WHEN CALCULATING    *\n*                            PDSE BYTE TRANSFER COUNT.                *\n*                            (REASSEMBLE REQUIRED FOR SP5.2.2/DFSMS.) *\n*                                                                     *\n*              04 JUN 96     ALWAYS ISSUE U83064I UNLESS TSO USER.    *\n*                            REMOVE ROUTCDE 11 FROM U83021I.          *\n*                            USE U83E14I AND U83E15I FOR EXTENDED     *\n*                            FORMAT (AS WELL AS PDSE) FILES.          *\n*                                                                     *\n*              28 JAN 98     EXTEND OPNTYPES TABLE TO FULL SIZE.      *\n*                            ADD 'OUTINX' AND 'EXTEND' TO OPNTYPES.   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*             PERFORMED PROCESSING:                                   *\n*                                                                     *\n*  TYPE 14  - ISSUE A WTO MESSAGE CONTAINING VARIOUS FILE DETAILS     *\n*             INCLUDING THE EXCP COUNT FOR BATCH JOBS ONLY.           *\n*                                                                     *\n*  TYPE 15  - ISSUE A WTO MESSAGE CONTAINING VARIOUS FILE DETAILS     *\n*             INCLUDING THE EXCP COUNT FOR BATCH JOBS ONLY.           *\n*                                                                     *\n*  TYPE 21  - ISSUE A WTO MESSAGE SIMILAR TO THE MVT IEC209I MESSAGE. *\n*                                                                     *\n*  TYPE 64  - ISSUE A WTO MESSAGE CONTAINING VARIOUS FILE DETAILS     *\n*             INCLUDING THE EXCP COUNT UNLESS FOR TSO USER.           *\n*                                                                     *\n*         MPF CAN BE USED TO ADVANTAGE TO CONTROL THE DISTRIBUTION    *\n*         OF MESSAGES ISSUED BY THIS EXIT.                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*     IT IS EXPECTED THAT MOST INSTALLATIONS WOULD NOT WANT THE       *\n*  MESSAGES GENERATED BY THIS EXIT TO BE DISPLAYED ON SYSTEM OPERATOR *\n*  CONSOLES.  MPF IS THE BEST PLACE TO EFFECT THIS.  'MCS=HRDCPY'     *\n*  COULD BE SPECIFIED ON THE WTO MACROS, BUT THIS INTRODUCES SOME     *\n*  COMPLICATIONS WHEN MESSAGE HANDLING IS FURTHER CUSTOMIZED BY       *\n*  INSTALLATION-SUPPLIED MPF EXITS SUCH AS 'MSGNOLOG'.                *\n*                                                                     *\n*     THE IDEA IS THAT 'U83021I' APPEARS IN THE JOB LOG WITH THE      *\n*  TAPE MOUNT AND DEMOUNT MESSAGES.  HENCE, ROUTCDE=(3,5) FOR THIS    *\n*  MESSAGE.  THE MPF EXIT 'MSGJOBLG' CAN BE USED TO PREVENT THIS      *\n*  MESSAGE APPEARING ON THE SYSTEM LOG.                               *\n*                                                                     *\n*     IT IS INTENDED THAT THE FILE ACTIVITY MESSAGES APPEAR IN THE    *\n*  JOB MESSAGES, BUT NOT THE JOB LOG.  ROUTCDE=(11) IS USED FOR THE   *\n*  JOB MESSAGES DATA SET.  THE MPF EXIT 'MSGNOJLG' CAN BE USED TO     *\n*  PREVENT THE MESSAGES APPEARING IN THE JOB LOG DATA SET.            *\n*                                                                     *\n*     IN SUMMARY, MESSAGES ARE ISSUED HERE WITH THE WIDEST DESIRABLE  *\n*  DISTRIBUTION, TO BE LIMITED ACCORDING TO INSTALLATION REQUIREMENTS *\n*  BY MPF (MESSAGE PROCESSING FACILITY).  THUS, MESSAGE DISTRIBUTION  *\n*  CAN BE CUSTOMIZED DYNAMICALLY WITH THE 'SET MPF' MVS COMMAND,      *\n*  WITHOUT THE NEED TO RE-INSTALL THIS EXIT OR EVEN RE-IPL.           *\n*                                                                     *\n*     IF A REQUIRED MESSAGE IS BASED UPON AN SMF RECORD TYPE NOT      *\n*  USUALLY COLLECTED BY AN INSTALLATION, THE SMF OPTIONS CAN BE       *\n*  ALTERED TO REQUEST THAT THE SMF RECORD TYPE IS TO BE COLLECTED,    *\n*  AND THIS EXIT CAN BE CHANGED TO DELETE THE SMF RECORD AFTER THE    *\n*  APPROPRIATE MESSAGE HAS BEEN ISSSUED.  THE SOURCE CODE ALTERATION  *\n*  FOR THIS IS SIMPLY TO CHANGE THE RELEVANT 'B     WRITEREC'         *\n*  INSTRUCTION TO 'B     SUPRSREC'.                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFU83N  CSECT\nIEFU83N  AMODE 31\nIEFU83N  RMODE ANY\n***********************************************************************\n*                                                                     *\n*  REGISTER USAGE                                                     *\n*                                                                     *\nR0       EQU   0                                                      *\nR1       EQU   1                                                      *\nR2       EQU   2                    SMF RECORD BASE                   *\nR3       EQU   3                    WORK (MESSAGE BUFFER POINTER)     *\nR4       EQU   4                    WORK                              *\nR5       EQU   5                    WORK                              *\nR6       EQU   6                                                      *\nR7       EQU   7                                                      *\nR8       EQU   8                                                      *\nR9       EQU   9                    WORK AREA BASE                    *\nR10      EQU   10                                                     *\nR11      EQU   11                                                     *\nR12      EQU   12                   PROGRAM BASE                      *\nR13      EQU   13                   CALLER'S SAVE AREA BASE           *\nR14      EQU   14                   RETURN ADDRESS                    *\nR15      EQU   15                   ENTRY POINT, WORK, RETURN CODE    *\n*                                                                     *\n***********************************************************************\n         TITLE 'MAINLINE - GLOBAL PROCESSING AND RECORD TYPE CHECK'\n         J     U83$\n         DC    AL1(15),CL15'IEFU83 &SYSDATE'\nU83$     DS    0H\n         STM   R14,R12,12(R13)      SAVE REGISTERS\n         LR    R12,R15              R12 - PROGRAM BASE REGISTER\n         USING IEFU83N,R12\n         ICM   R2,15,0(R1)          R2  - SMF RECORD BASE REGISTER\n         JZ    WRITEREC             ZERO ADDRESS - CAN'T FIND RECORD\n         USING SMFRECD,R2\n         SPACE\n         CLI   SMF14RTY,14          TYPE 14 RECORD?\n         JE    REC1415$             YES\n         CLI   SMF14RTY,15          TYPE 15 RECORD?\n         JE    REC1415$             YES\n         CLI   SMF21RTY,21          TYPE 21 RECORD?\n         JE    REC21$               YES\n         CLI   SMF64RTY,64          TYPE 64 RECORD?\n         JE    REC64$               YES\n         CLI   5(R2),118            TYPE TCPIP RECORD ??\n         JE    REC118$              YES\n         SPACE\nWRITEREC DS    0H\n         LM    R14,R12,12(R13)      EXIT AND WRITE RECORD\n         SR    R15,R15                       RC=0\n         BR    R14\n         SPACE\nSUPRSREC DS    0H\n         LM    R14,R12,12(R13)      EXIT AND SUPPRESS RECORD\n         LA    R15,4                         RC=4\n         BR    R14\n         SPACE 2\n         USING PSA,0\n         TITLE 'SMF RECORD 14 AND 15 - NON-VSAM DATA SET CLOSE/E-O-V'\n***********************************************************************\n*                                                                     *\n* RECORD TYPE 14 AND 15 PROCESSING: FORMAT AND WRITE A U83@##I        *\n*  MESSAGE WHERE ## IS '14' OR '15', AS APPROPRIATE, AND @ IS (IN     *\n*  ORDER OF PRECEDENCE) 'M' FOR EACH MAGNETIC TAPE VOLUME E-O-V AND   *\n*  CLOSE, 'C' FOR CLOSE ON MAGNETIC TAPE DATA SETS, 'I' FOR ISAM      *\n*  DATA SETS, 'D' FOR BDAM DATA SETS, 'V' FOR VIO DATA SETS, 'T' FOR  *\n*  OTHER TEMPORARY DATA SETS, 'E' FOR PDSE DATA SETS, AND OTHERWISE   *\n*  'P' FOR OTHER (DISK) PERMANENT DATA SETS.                          *\n*                                                                     *\n* U83@##I ???PUT ??AM FILE DDDDDDDD CLOSED 123456789 EXCPS FOR        *\n*         12345678901234567890123456789012345678901234 BLKSZ=12345    *\n*         12345KB                                                     *\n***********************************************************************\n         SPACE\nREC1415$ DS    0H\n         L     R4,PSAAOLD           POINT TO CURRENT ASCB\n         USING ASCB,R4\n         L     R3,ASCBASXB        * GET ASCB EXTENSION ADDR\n         USING ASXB,3              * ESTABLISH ADDRESSABILITY\n         L     R3,ASXBSENV        * GET ACEE ADDR\n         LTR   R3,R3               ACEE PRESENT ??\n         JZ    NOACEE              NOPE ---\n         USING ACEE,R3              * ESTABLISH ADDRESSABILITY\n         MVC   SMF14UID,ACEEUSRI * COPY USER ID\n         DROP  R3                   * FREE WORK REGISTER\nNOACEE   DS    0H\n         ICM   R1,B'1111',ASCBJBNI  BATCH JOB?\n         JZ    WRITEREC             NO, DO NOT DISPLAY ANY MESSAGE\n         DROP  R4                   ASCB\n         TM    SMF14RIN,SMF14EOV+SMF14DAD\n         JO    WRITEREC             NO MESSAGE FOR DASD E-O-V RECORDS\n         GETMAIN RC,LV=WK14LEN,SP=231,LOC=(ANY)\n         LTR   R15,R15              TEST FOR SUCCESSFUL GETMAIN\n         JNZ   WRITEREC             FAILURE - JUST WRITE SMF RECORD\n         LR    R9,R1                ADDRESS GETMAINED AREA\n         USING WK83AREA,R9\n         MVC   WTOU83D(WTO1415L),WTO1415S INITIALIZE WTO PARAMETER LIST\n         CLI   SMF14RTY,14          TYPE 14 SMF RECORD?\n         JE    T1415OK              YES, CORRECT NUMBER IN MESSAGE\n         MVI   WTOMSGID+5,C'5'      NO, MUST BE A TYPE 15 SMF RECORD\nT1415OK  DS    0H\n         TM    SMF14RIN,SMF14DAD    MAGNETIC TAPE VOLUME (CLOSE/E-O-V)?\n         JZ    DSOR1415             YES, MESSAGE ID AND TEXT IS CORRECT\nCLOS1415 DS    0H\n         MVI   WTOMSGID+3,C'C'      TRY FOR CLOSE ON MAGNETIC TAPE\n         TM    SMF14RIN,SMF14DAD    MAGNETIC TAPE DATA SET?\n         JZ    ID1415OK             YES, MESSAGE ID IS CORRECT\n         MVI   WTOMSGID+3,C'I'      NO, TRY FOR ISAM\n         TM    SMF14RIN,SMF14IS+SMF14JIS  ISAM?\n         JNZ   ID1415OK             YES, MESSAGE ID IS CORRECT\n         MVI   WTOMSGID+3,C'D'      NO, TRY FOR BDAM\n         TM    SMF14RIN,SMF14DDA    BDAM?\n         JNZ   ID1415OK             YES, MESSAGE ID IS CORRECT\n         MVI   WTOMSGID+3,C'V'      NO, TRY FOR VIO\n         TM    SMF14RIN,SMF14VIO    VIO?\n         JNZ   ID1415OK             YES, MESSAGE ID IS CORRECT\n         MVI   WTOMSGID+3,C'T'      NO, TRY FOR NON-VIO TEMPORARY\n         TM    SMF14RIN,SMF14TDS    TEMPORARY?\n         JNZ   ID1415OK             YES, MESSAGE ID IS CORRECT\n         MVI   WTOMSGID+3,C'E'      NO, TRY FOR PDSE OR STRIPED\n         TM    SMF14RIN+1,SMF14IPD+SMF14STR  PDSE OR EXTENDED FORMAT?\n         JNZ   ID1415OK             YES, MESSAGE ID IS CORRECT\n         MVI   WTOMSGID+3,C'P'      NO, SIGNAL PERMANENT DISK FILE\nID1415OK DS    0H\n         MVC   WTOAMDES,=C' EXCPS FOR '   LOAD CORRECT DESCRIPTION\nDSOR1415 DS    0H\n         TM    SMFDCBMF,X'80'       EXCP PROCESSING USED?\n         JNZ   AM1415OK             YES, MESSAGE IS CORRECT\n         TM    SMFDCBOR,JFCORGIS+JFCORGPS+JFCORGDA+JFCORGPO\n*                                   KNOWN DATA SET ORGANIZATION?\n         JZ    AM1415OK             NO, JUST SAY EXCP\n         MVC   WTOAMNAM,=C'ISAM'    YES\n         TM    SMFDCBOR,JFCORGIS    DCBDSORG=IS?\n         JO    AM1415OK             YES\n         MVC   WTOAMNAM,=C'BDAM'    NO\n         TM    SMFDCBOR,JFCORGDA    DCBDSORG=DA?\n         JO    AM1415OK             YES\n         MVC   WTOAMNAM,=C'BPAM'    NO\n         TM    SMFDCBOR,JFCORGPO    DCBDSORG=PO?\n         JO    PTSCHECK             YES, GO CHECK FOR SMPPTS INPUT\n         MVC   WTOAMNAM,=C'BSAM'    NO, DCBDSORG=PS\n         LA    R1,SMFDCBMF          POINT TO DCBMACRF\n         LA    R0,2                 2 BYTES TO TEST (INPUT AND OUTPUT)\nMACR14LP DS    0H\n         TM    0(R1),X'60'          TEST BASIC AND QUEUED BITS\n         JM    PS14TEST             DIFFERENT SO SEE WHICH TYPE\n         LA    R1,1(,R1)            POINT TO NEXT BYTE\n         BRCT  R0,MACR14LP\n         J     AM1415OK             SHOULD NOT HAPPEN BUT LEAVE AS BSAM\nPTSCHECK DS    0H\n         TM    SMFDEBOP,X'0F'       BPAM FILE OPENED FOR INPUT?\n         JNZ   AM1415OK             NO, PRODUCE THE MESSAGE\n         CLC   =CL8'SMPPTS  ',SMFTIOE5  TEST FOR SMP PTS FILE TO\n         JE    MS1415FM                 REDUCE APPLY/ACCEPT MSG VOLUMES\n         J     AM1415OK             OTHERWISE, PRODUCE THE MESSAGE\nPS14TEST DS    0H\n         TM    0(R1),X'40'          IS THE QUEUED BIT ON?\n         JZ    AM1415OK             NO, SO THE BASIC BIT IS ON\n         MVC   WTOAMNAM,=C'QSAM'    YES\nAM1415OK DS    0H\n         MVC   WTOAMDDN,SMFTIOE5    SHOW THE DDNAME (LOGICAL FILE NAME)\n         IC    R1,SMFDEBOP          NO, GET DEBOPATB I/O METHOD FLAGS\n         SLL   R1,28                SHIFT OUT DISPOSITION FLAGS\n         SRL   R1,28-3              MULTIPLY BY EIGHT FOR INDEX\n         LA    R1,OPNTYPES(R1)      POINT TO OPEN TYPE LITERAL\n         MVC   WTOAMOPN,0(R1)       SHOW THE OPEN TYPE\nOPND1415 DS    0H\n         TM    SMF14RIN,SMF14DAD    DASD DATA SET?\n         JZ    LD1415DS             NO, SHOW DATA SET NAME\n         CLI   JFCBDSNM,X'04'       YES, ACCESSING THE VTOC?\n         JNE   LD1415DS             NO, SHOW DATA SET NAME\n         MVC   WTOAMDSN(7),=C'VTOC OF'  YES, DO NOT SHOW X'04' BYTES\n         MVC   WTOAMDSN+8(6),JFCBVOLS        BUT 'VTOC OF VOLSER'\n         J     DS1415OK             DATA SET NAME FIELD NOW LOADED\nLD1415DS DS    0H\n         MVC   WTOAMDSN,JFCBDSNM    SHOW THE DSN (PHYSICAL FILE NAME)\n         CLI   WTOMSGID+3,C'M'      MAGNETIC TAPE VOLUME MESSAGE?\n         JNE   DS1415OK             NO, GO LOOP THROUGH UCB SECTIONS\n         MVI   WTOAMSLA,C'/'        YES, SO INDICATE ON THIS TAPE ONLY\n         MVC   WTOAMVOL,SMFSRTEV    SHOW TAPE VOLUME WITH THIS EXCP CT\n         ICM   R5,15,SMFDCBBL       LOAD VOLUME EXCP COUNT\n         J     UN1415EX             DISPLAY THIS AS THE EXCP COUNT\nDS1415OK DS    0H\n         SLR   R5,R5                CLEAR EXCP COUNT ACCUMULATOR\n         SLR   R0,R0                CLEAR FOR INSERT\n         ICM   R0,1,SMF14NUC        GET THE NUMBER OF UCB SECTIONS\n         JZ    UN1415EX             HANDLE BAD DATA\n         SLR   R1,R1                CLEAR FOR INSERT\n         ICM   R1,1,SMF14SUC        GET THE UCB SECTION SIZE\n         JZ    UN1415EX             HANDLE BAD DATA\n         LA    R15,SMF14UCB         POINT TO THE FIRST UCB SECTION\n         USING SMF14UCB,R15         NO\nUN1415LP DS    0H\n         ICM   R4,15,SMFEXCP        GET THE EXCP COUNT FOR THIS UNIT\n         ALR   R5,R4                ADD TO THE ACCUMULATOR\n         ALR   R15,R1               POINT TO THE NEXT UCB SECTION\n         BRCT  R0,UN1415LP          PROCESS NEXT UCB SECTION IF ANY\n         DROP  R15                  SMF14UCB\nUN1415EX DS    0H\n         CVD   R5,WORK              GET DECIMAL TOTAL EXCP COUNT\n         MVC   WTOAMXCP,ED9         LOAD EDIT MASK\n         ED    WTOAMXCP,WORK+3      SHOW EXCP COUNT UP TO (10**9)-1\n         SLR   R15,R15              CLEAR FOR INSERT\n         ICM   R15,3,JFCBLKSI       GET THE DATA SET BLOCK SIZE\n         TM    SMF14RIN+1,SMF14IPD  PDSE?\n         JNZ   PDSE1415             YES\n         LTR   R15,R15              TEST THE BLOCK SIZE\n         JZ    MS1415OK             ZERO, SO SKIP CALCULATION\n         TM    JFCRECFM,JFCUND      UNDEFINED RECORD FORMAT?\n         JNM   BLSZ1415             YES, JUST SHOW BLOCK SIZE\n         TM    JFCRECFM,JFCFIX      FIXED FORMAT?\n         JO    NVPL1415             YES, \"NOT VARIABLE PUT LOCATE\"\n         TM    JFCRECFM,JFCRFB      VARIABLE RECORDS, BUT BLOCKED?\n         JZ    BLSZ1415             NO, JUST SHOW BLOCK SIZE\n         CLI   SMF14RTY,14          OPENED FOR INPUT (OR RDBACK)?\n         JE    BLSZ1415             YES, FILE MAY BE FROM PUT LOCATE\n         TM    SMFDCBMF+1,X'48'     OUTPUT, BUT IS IT QSAM PUT LOCATE?\n         JNO   NVPL1415             NO, \"NOT VARIABLE PUT LOCATE\"\n         SLR   R0,R0\n         ICM   R0,3,JFCLRECL        GET THE LOGICAL RECORD LENGTH\n         JNP   BLSZ1415             JUST SHOW BLOCK SIZE IF STRANGE\n         LR    R14,R15              COPY BLOCK SIZE\n         SR    R14,R0               SUBTRACT LRECL\n         CR    R14,R0               IS DIFFERENCE BIGGER THAN LRECL?\n         JH    BLSZ1415             YES, JUST SHOW BLOCK SIZE\n         MVC   WTOAMSIZ+1(7),=C'BLKNG<2'  NO, GETTING SHORT BLOCKS\n         LA    R0,4                 GET FOUR\n         CR    R14,R0               IS IT TRUE THAT BLKSIZE=LRECL+4?\n         JH    BLSZ1415             NO, CAN'T PROVE NO BLOCKING AT ALL\n         MVC   WTOAMSCL,=C'=1'      YES, INDICATE ABSOLUTELY UNBLOCKED\n         J     BLSZ1415             NOW SHOW THE BLOCK SIZE\nPDSE1415 DS    0H\n         LTR   R5,R5                ANY EXCPS?\n         JNZ   PDSEEXCP             YES\n         LTR   R15,R15              IS THE BLOCK SIZE ZERO?\n         JZ    MS1415OK             YES, SO SKIP ITS DISPLAY\n         J     BLSZ1415             NO, SHOW THE BLOCK SIZE\nPDSEEXCP DS    0H\n         SLR   R4,R4                CLEAR FOR SHIFT\n         SLDL  R4,12                MULTIPLY EXCP COUNT BY 4096\n         J     PDSEBLKS             GO SHOW THE BYTE TRANSFER COUNT\nNVPL1415 DS    0H\n         TM    SMFDCBOR,JFCORGPS    SEQUENTIAL FILE PROCESSING?\n         JZ    BLSZ1415             NO, JUST SHOW BLOCK SIZE\n         CLI   WTOMSGID+3,C'M'      MAGNETIC TAPE VOLUME MESSAGE?\n         JE    SQ1415OK             YES, CAN SHOW BYTE COUNT RELIABLY\n         TM    SMFDCBMF,X'80'       EXCP ACCESS METHOD USED?\n         JNZ   BLSZ1415             YES, JUST SHOW BLOCK SIZE\n         CLI   SMF14RTY,14          OPENED FOR INPUT (OR RDBACK)?\n         JNE   PMBR1415             NO\n         BCTR  R5,0                 YES, DECREMENT FOR E-O-F (OR TM)\nPMBR1415 DS    0H\n         TM    JFCDSORG,JFCORGPO    SEQUENTIAL ACCESS OF A PDS?\n         JZ    SQ1415OK             NO\n         LA    R15,256              YES, GET PDS DIRECTORY BLOCK SIZE\n         CLC   JFCBELNM,=CL8' '     SEQUENTIAL ACCESS OF A PDS MEMBER?\n         JE    SQ1415OK             NO\n         BCTR  R5,0                 YES, DECREMENT EXCP COUNT FOR BLDL\n         LA    R15,WTOAMDSN+43      POINT TO LAST DSNAME CHARACTER\nNVSDSNLP DS    0H\n         CLI   0(R15),C' '          TRAILING BLANK?\n         JNE   NVSMEMNM             NO\n         BRCT  R15,NVSDSNLP         YES, BACK UP ONE AND TEST AGAIN\nNVSMEMNM DS    0H\n         CLI   11(R15),C' '         ROOM FOR '(*MEMBER*)'?\n         JNE   NVSMEMDN             NO, DO NOT SHOW MEMBER NAME\n         MVI   1(R15),C'('          YES, SUPPLY LEFT PARENTHESIS\n         MVC   2(8,R15),JFCBELNM    LOAD PDS MEMBER NAME\nNVSMEMLP DS    0H\n         CLI   9(R15),C' '          TRAILING BLANK?\n         JNE   NVSMEMOK             NO\n         BRCT  R15,NVSMEMLP         YES, BACK UP ONE AND TEST AGAIN\nNVSMEMOK DS    0H\n         MVI   10(R15),C')'         SUPPLY RIGHT PARENTHESIS\nNVSMEMDN DS    0H\n         SLR   R15,R15              CLEAR FOR INSERT\n         ICM   R15,3,JFCBLKSI       GET THE DATA SET BLOCK SIZE\nSQ1415OK DS    0H\n         LTR   R5,R5                POSITIVE EXCP COUNT?\n         JNP   BLSZ1415             NO, JUST SHOW BLOCK SIZE\n         TM    SMF14RIN,SMF14DAD    DASD DATA SET?\n         JZ    SEQKEYOK             NO, CAN'T HAVE A KEY\n         SLR   R0,R0                YES\n         IC    R0,JFCKEYLE          GET THE KEY LENGTH USED\n         AR    R15,R0               ALSO COUNT KEY BYTES TRANSFERRED\nSEQKEYOK DS    0H\n         MR    R4,R15               GET BYTES (BLOCK_COUNT*SIZE)\nPDSEBLKS DS    0H\n         MVC   WTOAMSIZ+4(2),=C'<1' REPLACE '0KB' WITH '<1KB'\n         LA    R1,=C'KMGT'          POINT TO KILO/MEGA/GIGA/TERA FLAGS\nSZ1415LP DS    0H\n         SRDA  R4,10                DIVIDE BY 1024\n         JZ    SZ1415DN             IF ZERO THEN LESS THAN ONE\n         LTR   R4,R4                NUMBER LARGER THAN ONE FULLWORD?\n         JNZ   SZ1415BG             YES, TOO BIG\n         CL    R5,=F'99999'         NO, IS NUMBER BIGGER THAN 99,999?\n         JNH   SZ1415OK             NO, SHOW THE NUMBER\nSZ1415BG DS    0H\n         LA    R1,1(,R1)            POINT TO NEXT SCALE INDICATOR\n         J     SZ1415LP             CONTINUE TO SCALE DOWN\nSZ1415OK DS    0H\n         CVD   R5,WORK              SHOW THE APPROXIMATE BYTE COUNT\n         MVC   WTOAMSIZ,ED5         LOAD EDIT MASK\n         ED    WTOAMSIZ,WORK+5\nSZ1415DN DS    0H\n         MVC   WTOAMSCL(1),0(R1)    SHOW SCALING INDICATOR\n         MVI   WTOAMSCL+1,C'B'      INDICATE BYTES\n         ICM   R15,3,JFCBLKSI       GET THE DATA SET BLOCK SIZE AGAIN\n         JZ    MS1415OK             HANDLE PDSE WITH ZERO BLOCK SIZE\nBLSZ1415 DS    0H\n         CVD   R15,WORK             SHOW BLOCK SIZE\n         OI    WORK+7,15            PREPARE FOR UNPACK\n         MVC   WTOAMBLK,=C'BLKSZ='\n         UNPK  WTOAMBLS,WORK+5(3)   LOAD BLOCK SIZE NUMERICS\nBLSZ14LP DS    0H\n         CLI   WTOAMBLS,C'0'        LEADING ZERO?\n         JNE   MS1415OK             NO, FORMATTING COMPLETE\n         MVC   WTOAMBLS,WTOAMBLS+1  YES, SHUFFLE UP TO SUPPRESS IT\n         J     BLSZ14LP             CONTINUE WITH LEADING ZERO CHECK\nMS1415OK DS    0H                   MESSAGE NOW READY FOR DISPLAY\n         SPACE\n         WTO   MF=(E,WTOU83D)       DISPLAY U83?14I OR U83?15I\n         SPACE\n         CLI   WTOMSGID+3,C'M'      MAGNETIC TAPE VOLUME MESSAGE?\n         JNE   MS1415FM             NO, GO TIDY UP AND EXIT\n         TM    SMF14RIN,SMF14EOV    CLOSE OF TAPE FILE?\n         JO    MS1415FM             NO, JUST E-O-V FOR THIS VOLUME\n         MVI   WTOAMSLA,C' '        YES, PRODUCE EXTRA MESSAGE TO SHOW\n         MVC   WTOAMVOL,=C'CLOSED'       EXCP (AS OPPOSED TO BLOCK)\n         MVI   WTOAMBLK,C' '             COUNT FOR WHOLE FILE\n         MVC   WTOAMBLK+1(18),WTOAMBLK\n         J     CLOS1415\n         SPACE\n         DROP  R9                   WK83AREA\n         SPACE\nMS1415FM DS    0H                   FREE GETMAINED STORAGE\n         FREEMAIN RU,LV=WK14LEN,A=(R9),SP=231\n         J     WRITEREC             ALL DONE, GO WRITE TYPE 14/15 REC\n         TITLE 'SMF RECORD 21 - ERROR STATISTICS BY VOLUME (TAPE ONLY)'\n***********************************************************************\n*                                                                     *\n* RECORD TYPE 21 PROCESSING:  FORMAT AND WRITE A U83021I MESSAGE      *\n*  BASED ON IEC209I FROM OS/MVT.  COUNTERS ARE ONLY SHOWN IF          *\n*  NON-ZERO, EXCEPT THE SSCH COUNT WHICH IS ALWAYS SHOWN.             *\n*                                                                     *\n* U83021I JJJJJJJJ,VVVVVV,DEV,SIO=12345,DEN=1,BLKSIZE=12345,          *\n*         TR=123,TW=123,PR=123,PW=123,NB=123,ERG=12345,CLN=12345,     *\n*         TRF=12345,TRB=12345,TRW=12345,BR=123456789,BW=123456789     *\n*                                                                     *\n***********************************************************************\n         SPACE\nREC21$   DS    0H\n         GETMAIN RC,LV=WK21LEN,SP=231,LOC=(ANY)\n         LTR   R15,R15              TEST FOR SUCCESSFUL GETMAIN\n         JNZ   WRITEREC             FAILURE - JUST WRITE SMF RECORD\n         LR    R9,R1                ADDRESS GETMAINED AREA\n         USING WK83AREA,R9\n         MVC   WTOU83D(WTO21L),WTO21S     INITIALIZE WTO PARAMETER LIST\n         L     R4,548               POINT TO CURRENT ASCB\n         USING ASCB,R4\n         ICM   R1,B'1111',ASCBJBNI  POINT TO ADDRESS SPACE NAME\n         JNZ   LDJOB21              USE IT IF FOUND\n         ICM   R1,B'1111',ASCBJBNS  POINT TO ADDRESS SPACE NAME\n         JNZ   LDJOB21              USE IT IF FOUND\n         DROP  R4                   ASCB\n         LA    R1,=C'STARTING'      IN CASE OF NULL JOB NAME POINTER\nLDJOB21  DS    0H\n         MVC   WTOTEXT(8),0(R1)     LOAD ADDRESS SPACE NAME\n         LA    R3,WTOTEXT+7         POINT TO LAST BYTE OF JOB NAME\nJOB21LP  DS    0H\n         CLI   0(R3),C' '           TRAILING BLANK?\n         JNE   JOB21OK              NO\n         BRCT  R3,JOB21LP           YES, BACK UP ONE AND TEST AGAIN\nJOB21OK  DS    0H\n         MVI   1(R3),C','           SUPPLY SEPARATOR\n         MVC   2(6,R3),SMF21VOL     LOAD TAPE VOLUME SERIAL NUMBER\nVOL21LP  DS    0H\n         CLI   7(R3),C' '           TRAILING BLANK?\n         JNE   VOL21OK              NO\n         BRCT  R3,VOL21LP           YES, BACK UP ONE AND TEST AGAIN\nVOL21OK  DS    0H\n         MVI   8(R3),C','           SUPPLY SEPARATOR\n         UNPK  9(5,R3),SMF21CA(3)   LOAD DEVICE NUMBER\n         TR    9(4,R3),HEX-240      MAKE PRINTABLE HEX CHARACTERS\n         MVI   13(R3),C','          SUPPLY SEPARATOR\n         CLI   9(R3),C'0'           LEADING ZERO IN DEVICE NUMBER?\n         JNE   DEV21OK              NO\n         MVC   9(5,R3),10(R3)       YES, SUPPRESS IT\n         BCTR  R3,0                 ADJUST POINTER\nDEV21OK  DS    0H\n         LA    R3,14(,R3)           POINTER TO FIRST BLANK AFTER COMMA\n         SLR   R0,R0                CLEAR FOR INSERTS\n         ICM   R0,3,SMF21SIO        LOAD SSCH COUNT\n         LA    R1,=C'SIO'           POINT TO LABEL\n         BRAS  R14,CNTR3FST         SHOW I/O COUNT\n         TM    SMF21DEN,X'03'       VALID DENSITY?\n         JNO   DEN21OK              NO\n         IC    R0,SMF21DEN          YES, GET DENSITY BYTE FOR 2400/3400\n         LR    R1,R0                COPY IT\n         SLL   R0,24+2\n         SRL   R0,24+2+4            GET BITS 2 AND 3 AS A NUMBER\n         SLL   R1,6                 GET BITS 0 AND 1 AS A NUMBER\n         AR    R1,R0                ADD THE TWO NUMBERS (GET 0 TO 6)\n         MVC   0(5,R3),=C',DEN='    SUPPLY DENSITY LABEL\n         STC   R1,5(,R3)            SUPPLY DENSITY VALUE\n         OI    5(R3),X'F0'          MAKE PRINTABLE (ASSUME < 10)\n         LA    R3,6(,R3)            ADJUST DISPLAY LINE POINTER\nDEN21OK  DS    0H\n         ICM   R0,3,SMF21BLS        LOAD BLOCKSIZE\n         JZ    BLS21OK              ZERO SO DON'T SHOW IT\n*        LA    R1,=C'BLS'           POINT TO LABEL\n         MVC   0(5,R3),=C',BLKS'    WANT 'BLKSIZE=', NOT 'BLS='\n         LA    R3,5(,R3)            ADJUST DISPLAY LINE POINTER\n         LA    R1,=C'IZE'           POINT TO LABEL\n         BRAS  R14,CNTR3FST         SHOW BLOCKSIZE\n         SPACE\nBLS21OK  DS    0H\n         IC    R0,SMF21TR           LOAD TEMPORARY READ ERROR COUNT\n         LA    R1,=C'TR'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW TEMPORARY READ ERROR COUNT\n         SPACE\n         IC    R0,SMF21TW           LOAD TEMPORARY WRITE ERROR COUNT\n         LA    R1,=C'TW'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW TEMPORARY WRITE ERROR COUNT\n         SPACE\n         IC    R0,SMF21PR           LOAD PERMANENT READ ERROR COUNT\n         LA    R1,=C'PR'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW PERMANENT READ ERROR COUNT\n         SPACE\n         IC    R0,SMF21PW           LOAD PERMANENT WRITE ERROR COUNT\n         LA    R1,=C'PW'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW PERMANENT WRITE ERROR COUNT\n         SPACE\n         IC    R0,SMF21NB           LOAD NOISE BLOCK COUNT\n         LA    R1,=C'NB'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW NOISE BLOCK COUNT\n         SPACE\n         ICM   R0,3,SMF21ERG        LOAD ERASE GAP COUNT\n         LA    R1,=C'ERG'           POINT TO LABEL\n         BRAS  R14,COUNTER3         SHOW ERASE GAP COUNT\n         SPACE\n         ICM   R0,3,SMF21CLN        LOAD CLEANER ACTION COUNT\n         LA    R1,=C'CLN'           POINT TO LABEL\n         BRAS  R14,COUNTER3         SHOW CLEANER ACTION COUNT\n         SPACE\n         ICM   R0,3,SMF21TRF        LOAD TEMP READ FORWARD ERROR COUNT\n         LA    R1,=C'TRF'           POINT TO LABEL\n         BRAS  R14,COUNTER3         SHOW TEMP READ FORWARD ERROR COUNT\n         SPACE\n         ICM   R0,3,SMF21TRB        LOAD TEMP READ BACKWARD ERROR COUNT\n         LA    R1,=C'TRB'           POINT TO LABEL\n         BRAS  R14,COUNTER3         SHOW TEMP READ BACKWARD ERROR COUNT\n         SPACE\n         ICM   R0,3,SMF21TWF        LOAD TEMPORARY WRITE ERROR COUNT\n         LA    R1,=C'TWF'           POINT TO LABEL\n         BRAS  R14,COUNTER3         SHOW TEMPORARY WRITE ERROR COUNT\n         SPACE\n         ICM   R0,7,SMF21BR         LOAD 4K BYTES READ COUNT\n         LA    R1,=C'BR'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW 4K BYTES READ COUNT\n         SPACE\n         ICM   R0,7,SMF21BW         LOAD 4K BYTES WRITTEN COUNT\n         LA    R1,=C'BW'            POINT TO LABEL\n         BRAS  R14,COUNTER2         SHOW 4K BYTES WRITTEN COUNT\n         SPACE\n         WTO   MF=(E,WTOU83D)       DISPLAY U83021I\n         SPACE\n         FREEMAIN RU,LV=WK21LEN,A=(R9),SP=231\n         J     WRITEREC             ALL DONE, GO AND WRITE TYPE 21 REC\n         SPACE\nCOUNTER2 DS    0H                   SHOW COUNTER WITH 2-CHARACTER LABEL\n         LTR   R0,R0                NON-ZERO VALUE?\n         BZR   R14                  NO, SUPPRESS DISPLAY OF ZERO\n         MVI   0(R3),C','           SUPPLY SEPARATOR\n         CVD   R0,WORK              GET DECIMAL VALUE\n         OI    WORK+7,15            PREPARE FOR UNPACK\n         MVC   1(2,R3),0(R1)        LOAD VALUE LABEL (2 CHARACTERS)\n         J     CNTRCMN              BRANCH TO COMMON CODE\n         SPACE\nCOUNTER3 DS    0H                   SHOW COUNTER WITH 3-CHARACTER LABEL\n         LTR   R0,R0                NON-ZERO VALUE?\n         BZR   R14                  NO, SUPPRESS DISPLAY OF ZERO\n         MVI   0(R3),C','           SUPPLY SEPARATOR\n         LA    R3,1(,R3)            POINT PAST SEPARATOR\nCNTR3FST DS    0H\n         CVD   R0,WORK              GET DECIMAL VALUE\n         OI    WORK+7,15            PREPARE FOR UNPACK\n         MVC   0(3,R3),0(R1)        LOAD VALUE LABEL (3 CHARACTERS)\nCNTRCMN  DS    0H\n         MVI   3(R3),C'='\n         UNPK  4(9,R3),WORK+3(5)    LOAD NUMERIC COUNT\n         LA    R0,13                GET LENGTH OF TEXT ADDED\nCNTR0LP  DS    0H\n         CLI   4(R3),C'0'           LEADING ZERO?\n         JNE   CNTROKAY             NO\n         MVC   4(9,R3),5(R3)        YES, SUPPRESS IT\n         BRCT  R0,CNTR0LP           CONTINUE LEADING ZERO CHECK\nCNTROKAY DS    0H\n         ALR   R3,R0                POINT PAST ADDED MESSAGE TEXT\n         BR    R14                  RETURN TO CALLER\n         SPACE\n         DROP  R9                   WK83AREA\n         TITLE 'SMF RECORD 64 - VSAM DATA SET CLOSE'\n***********************************************************************\n*                                                                     *\n* RECORD TYPE 64: FORMAT AND WRITE A U83064I MESSAGE.                 *\n*                                                                     *\n* U83064I ???PUT VSAM FILE DDDDDDDD CLOSED 123456789 EXCPS FOR        *\n*         12345678901234567890123456789012345678901234 BLKSZ=12345    *\n*         12345KB                                                     *\n***********************************************************************\n         SPACE\nREC64$   DS    0H\n         L     R4,PSAAOLD           POINT TO CURRENT ASCB\n         USING ASCB,R4\n         ICM   R1,B'1111',ASCBTSB   TIME SHARING USER?\n         JNZ   WRITEREC             YES, DO NOT DISPLAY ANY MESSAGE\n         DROP  R4                   ASCB\n         TM    SMF64RIN,X'80'       RECORD WRITTEN BY CLOSE?\n         JZ    WRITEREC             NO, BY EOV, SO DO NOT MAKE A MSG\n         GETMAIN RC,LV=WK64LEN,SP=231,LOC=(ANY)\n         LTR   R15,R15              TEST FOR SUCCESSFUL GETMAIN\n         JNZ   WRITEREC             FAILURE - JUST WRITE SMF RECORD\n         LR    R9,R1                ADDRESS GETMAINED AREA\n         USING WK83AREA,R9\n         MVC   WTOU83D(WTO64L),WTO64S INITIALIZE WTO PARAMETER LIST\n         SLR   R3,R3                CLEAR FOR INSERT\n         ICM   R3,3,SMF64ESL        GET EXTENT SECTION LENGTH\n         LA    R3,SMF64FEX(R3)      POINT PAST EXTENT SECTION\n         USING SMF64STS,R3          STATISTICS SECTION ADDRESSABILITY\n         LA    R0,176\n         CLM   R0,15,SMF64SLN       STATISTICS SECTION LONG ENOUGH?\n         JH    REC64XIT             NO, DO NOT WRITE ANY MESSAGE\n         MVC   WTOAMDDN,SMF64DDN    SHOW THE DDNAME (LOGICAL FILE NAME)\n         IC    R1,SMF64MC1          GET ACBMACR1 FLAGS\n         SLL   R1,29                SHIFT OUT UNWANTED FLAGS\n         SRL   R1,30                GET GET/PUT READ/WRITE FLAGS\n         SLA   R1,3                 MULTIPLY BY EIGHT FOR INDEX\n         JZ    OPENED64             BOTH FLAGS OFF SO LEAVE BLANK\n         LA    R1,VOPNTYPS-8(R1)    POINT TO OPEN TYPE LITERAL\n         MVC   WTOAMOPN,0(R1)       SHOW THE OPEN TYPE\nOPENED64 DS    0H\n         MVC   WTOAMDSN,SMF64DNM    SHOW THE DSN (PHYSICAL FILE NAME)\n         CLI   WTOAMDSN,C'$'        VALID NAME?\n         JNL   DSN64OK              POSSIBLY, ASSUME THAT IT IS\n         MVC   WTOAMDSN,SMF64CLN    NO, SHOW THE JCL DATA SET NAME\nDSN64OK  DS    0H\n         ICM   R5,15,SMF64DEP       GET THE EXCP COUNT CHANGE\n         JM    REC64XIT             DO NOT ISSUE MESSAGE IF NEGATIVE\n         CVD   R5,WORK              GET DECIMAL TOTAL EXCP COUNT\n         MVC   WTOAMXCP,ED9         LOAD EDIT MASK\n         ED    WTOAMXCP,WORK+3      SHOW EXCP COUNT UP TO (10**9)-1\n         ICM   R15,15,SMF64DBS      GET THE DATA SET BLOCK SIZE\n         JNP   MESG64OK             ZERO SO SKIP CALCULATION\n         CVD   R15,WORK             SHOW BLOCK SIZE\n         OI    WORK+7,15            PREPARE FOR UNPACK\n         MVC   WTOAMBLK,=C'BLKSZ='\n         UNPK  WTOAMBLS,WORK+5(3)   LOAD BLOCK SIZE NUMERICS\nBLSZ64LP DS    0H\n         CLI   WTOAMBLS,C'0'        LEADING ZERO?\n         JNE   BLSZ64OK             NO, FORMATTING COMPLETE\n         MVC   WTOAMBLS,WTOAMBLS+1  YES, SHUFFLE UP TO SUPPRESS IT\n         J     BLSZ64LP             CONTINUE WITH LEADING ZERO CHECK\nBLSZ64OK DS    0H\n         LTR   R5,R5                ANY EXCPS?\n         JZ    MESG64OK             NO, SUPPRESS DISPLAY OF '0KB'\n         MR    R4,R15               YES, GET BYTES (BLOCK COUNT*SIZE)\n         MVC   WTOAMSIZ+4(2),=C'<1' REPLACE '0KB' WITH '<1KB'\n         LA    R1,=C'KMGT'          POINT TO KILO/MEGA/GIGA/TERA FLAGS\nSIZE64LP DS    0H\n         SRDA  R4,10                DIVIDE BY 1024\n         JZ    SIZE64DN             IF ZERO THEN LESS THAN ONE\n         LTR   R4,R4                NUMBER LARGER THAN ONE FULLWORD?\n         JNZ   SIZE64BG             YES, TOO BIG\n         CL    R5,=F'99999'         NO, IS NUMBER BIGGER THAN 99,999?\n         JNH   SIZE64OK             NO, SHOW THE NUMBER\nSIZE64BG DS    0H\n         LA    R1,1(,R1)            POINT TO NEXT SCALE INDICATOR\n         J     SIZE64LP             CONTINUE TO SCALE DOWN\nSIZE64OK DS    0H\n         CVD   R5,WORK              SHOW THE APPROXIMATE BYTE COUNT\n         MVC   WTOAMSIZ,ED5         LOAD EDIT MASK\n         ED    WTOAMSIZ,WORK+5\nSIZE64DN DS    0H\n         MVC   WTOAMSCL(1),0(R1)    SHOW SCALING INDICATOR\n         MVI   WTOAMSCL+1,C'B'      INDICATE BYTES\nMESG64OK DS    0H                   MESSAGE NOW READY FOR DISPLAY\n         SPACE\n         WTO   MF=(E,WTOU83D)       DISPLAY U83064I\n         SPACE\n         DROP  R9,R3                WK83AREA, SMF64STS\nREC64XIT DS    0H\n         SPACE\n         FREEMAIN RU,LV=WK64LEN,A=(R9),SP=231\n         J     WRITEREC             ALL DONE, GO WRITE TYPE 64 RECORD\n         TITLE 'TCP/IP FTP STATISTICS RECORDS'\n*---------------------------------------------------------------------*\n*---     THIS MODIFICATION INSERTED BY RICK FOCHTMAN, BOARD OF     ---*\n*---     TRADE CLEARING CORP., TO PROVIDE FTP STATISTICS ON        ---*\n*---     SYSLOG IN REAL TIME.  THE DSECT SMFFTP76 WAS EXTRACTED    ---*\n*---     FROM MACRO EZASMF76, FOUND IN THE SEZACMAC DATASET FOR    ---*\n*---     TCP/IP.  LOGIC IS FAIRLY SIMPLE AND REASONABLY WELL       ---*\n*---     DOCUMENTED.                                               ---*\n*---------------------------------------------------------------------*\nREC118$  DS    0H\n         WTO   'U83FTPI TYPE 118 RECORD LOCATED.'\n         CLC   22(2,R2),=H'75'     FTP SUBTYPE ??\n         JNE   WRITEREC            NOPE; SKIP IT\n         WTO   'U83FTPI SUBTYPE 75 LOCATED.'\n         GETMAIN RC,LV=WK118LEN,SP=231,LOC=(ANY)\n         LR    R8,R1               COPY STORAGE ADDRESS\n         LA    R9,WK118LEN         AND LENGTH\n         LA    R14,0               SOURCE TO ZEROS\n         LA    R15,0               LENGTH/PAD TO ZEROS\n         MVCL  R8,R14              CLEAR THE AREA\n         LR    R9,R1               COPY STORAGE ADDRESS\n         USING WK118,R9             AND BASE MY DSECT\n         USING SMFFTP76,R2         RECORD DSECT BASE\n         LH    R3,0(,R2)           LOAD RECORD LENGTH\n         BCTR  R3,R0               DECR BY ONE (POINT TO LAST BYTE)\n         LA    R4,INWTO            POINT TO MESSAGE INIT'S\n         LA    R5,INWTOL           AND LENGTH\n         LR    R15,R5              COPY FOR OUTPUT LEN\n         LA    R14,HDRL            OUTPUT POINTER\n         MVCL  R14,R4              INIT THE MESSAGES\n         MVC   FTPID,SMFFTPSU      USERID\n         MVC   FTPDSN,SMFFTDSN     DSNAME\n         #CVIP FTPIPO,SMFFTPSA,EDWK1     FROM ADDRESS\n         #CVIP FTPIPI,SMFFTPSL,EDWK1     TO ADDRESS\n         $CVTIME FTPSTT,SMFFTTRS         START TIME\n         $CVTIME FTPEDT,SMFFTTRE         END TIME\n         MVC   FTPEDT-3(3),=C' / '\n         MVC   FTPCMD,SMFFTPCM     FTP SUBCOMMAND\n         MVC   FTPTYP,SMFFTPFM     FORMAT, MODE AND STRUCTURE\n         EDIT  FTPBCT,SMFFTTBC,'Z,ZZZ,ZZZ,ZZZ',                        X\n               WRKA=EDWK1,WRKB=EDWK2\n         WTO   TEXT=((HDRL,),(DL1,),(DL2,),(DL2A,),(DL3,),(DL4,)),     X\n               MCSFLAG=HRDCPY,DESC=12,MF=(E,SMF76MSG)\n         FREEMAIN RC,LV=WK118LEN,A=(R9),SP=231\n         J     WRITEREC             ALL DONE, GO WRITE TYPE 64 RECORD\n         DROP  R2,R9\n         TITLE 'STATIC AREA AND LITERAL POOL'\n*-------------------------------------------------------------------\n*---     DATA TO INITIALIZE MLWTO AREA\n*------------------------------------------------------------------\nINWTO  DC  AL2(L'HDR)\n       DC  CL35'U83FTPI ----- FTP STATISTICS -----'\n       DC  AL2(L'LINE1)\n       DC  CL58'ID: XXXXXXXX   TIME START/STOP XX:XX:XX / XX:XX:XX'\n       DC  AL2(L'LINE2)\n       DC  CL58'IP ADDRESS TO/FROM: XXX.XXX.XXX.XXX / XXX.XXX.XXX.XXX'\n       DC  AL2(L'LINE2A)\n       DC  CL47'SUBCOMMAND: XXXX  FORMAT/XFER/STRUCTURE: XXXX '\n       DC  AL2(L'LINE3)\n       DC  CL31'BYTE COUNT: X,XXX,XXX,XXX'\n       DC  AL2(L'LINE4)\n       DC  CL54'DSNAME: XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\nSMF76WTO WTO   TEXT=((,L),(,D),(,D),(,D),(,D),(,DE)),DESC=12,          X\n               MCSFLAG=HRDCPY,MF=L\nINWTOL   EQU   *-INWTO\nHEX      DC    C'0123456789ABCDEF'\nED5      DC    XL6'402020202120'\nED9      DC    XL10'40202020202020202120'\n*                 OPEN TYPE      DEBOPATB SETTING\nOPNTYPES DC    CL8' INPUT  '       0000      0\n         DC    CL8'RDBACK  '       0001      1\n         DC    CL8'?0010?  '       0010      2\n         DC    CL8' INOUT  '       0011      3\n         DC    CL8'UPDATE  '       0100      4\n         DC    CL8'?0101?  '       0101      5\n         DC    CL8'OUTINX  '       0110      6\n         DC    CL8' OUTIN  '       0111      7\n         DC    CL8'?1000?  '       1000      8\n         DC    CL8'?1001?  '       1001      9\n         DC    CL8'?1010?  '       1010      A\n         DC    CL8'?1011?  '       1011      B\n         DC    CL8'?1100?  '       1100      C\n         DC    CL8'?1101?  '       1101      D\n         DC    CL8'EXTEND  '       1110      E\n*        DC    CL8'OUTPUT  '       1111      F\n*                 OPEN TYPE      ACBMACR1 SETTING\nVOPNTYPS DC    CL8'OUTPUT  '       .01.      2\n         DC    CL8' INPUT  '       .10.      4\n         DC    CL8'UPDATE  '       .11.      6\n         SPACE\n*        WTO TEMPLATES - 125 CHARS (MSGID + ' ' + UP TO 117 TEXT)\n         SPACE\nWTO1415S WTO   'U83M14I OUTPUT EXCP FILE *DDNAME* CLOSED 123456789 BLOC+\n               KS OF DSNAME                                            +\n                             ',ROUTCDE=(11),MF=L\nWTO1415L EQU   *-WTO1415S\n         SPACE\nWTO21S   WTO   'U83021I JOB-NAME                                       +\n                                                                       +\n                             ',ROUTCDE=(3,5),MF=L\nWTO21L   EQU   *-WTO21S\n         SPACE\nWTO64S   WTO   'U83064I        VSAM FILE *DDNAME* CLOSED 123456789 EXCP+\n               S FOR 12345678.12345678.12345678.12345678.12345678      +\n                             ',ROUTCDE=(11),MF=L\nWTO64L   EQU   *-WTO64S\n         SPACE 2\n         LTORG\n         SPACE 2\n         DS    0D                   END OF CSECT\n         TITLE 'DYNAMIC AREA DEFINITIONS'\nWK118    DSECT\n         DS    18F\nEDWK1    DS    D\nEDWK2    DS    CL16\n*----------------------------------------------------------\n*---     MLWTO AREA IN THE WORK DSECT\n*----------------------------------------------------------\nHDRL   DC  AL2(L'HDR)\nHDR    DC  CL35'U83FTPI ----- FTP STATISTICS -----'\nDL1    DC  AL2(L'LINE1)\nLINE1 DC CL58'ID: XXXXXXXX  TIME START/STOP XX:XX:XX.XX / XX:XX:XX.XX'\nDL2    DC  AL2(L'LINE2)\nLINE2  DC  CL58'IP ADDRESS TO/FROM: XXX.XXX.XXX.XXX / XXX.XXX.XXX.XXX'\nDL2A   DC  AL2(L'LINE2A)\nLINE2A DC  CL47'SUBCOMMAND: XXXX  FORMAT/XFER/STRUCTURE: XXXX '\nDL3    DC  AL2(L'LINE3)\nLINE3  DC  CL31'BYTE COUNT: X,XXX,XXX,XXX'\nDL4    DC  AL2(L'LINE4)\nLINE4  DC  CL54'DSNAME: XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\nFTPID    EQU   LINE1+4,8\nFTPSTT   EQU   LINE1+31\nFTPEDT   EQU   LINE1+45\nFTPIPI   EQU   LINE2+20\nFTPIPO   EQU   LINE2+38\nFTPCMD   EQU   LINE2A+12,4\nFTPTYP   EQU   LINE2A+41,4\nFTPBCT   EQU   LINE3+12,13\nFTPDSN   EQU   LINE4+8,44\nSMF76MSG WTO   TEXT=((,L),(,D),(,D),(,D),(,D),(,DE)),DESC=12,          X\n               MCSFLAG=HRDCPY,MF=L\nEND118   DS    0D\nWK118LEN EQU   *-WK118             AREA LENGTH\n         SPACE 3\n*---------------------------------------------------------------------*\n*                DSECT FOR FTP SMF RECORDS (SUBTYPE 75)               *\n*---------------------------------------------------------------------*\nSMFFTP76 DSECT                    DSECT TO DESCRIBE FTP SMF RECORDS\nSMFFTPHD DS    CL24               STANDARD SMF HEADER WITH SUBTYPES\n*\nSMFFTPCM DS    CL4                FTP SUBCOMMAND\n*\nSMFFTPTY DS    CL4                FTP SERVER=FILE TYPE (SEQ, JES, SQL)\n*                             OR  FTP CLIENT=VALUE OF REPLY TO FTP CMD\n*\nSMFFTPSA DS    F                  FTP SERVER REMOTE IP ADDRESS   OR\n*                                 FTP CLIENT LOCAL  IP ADDRESS\n*\nSMFFTPSL DS    F                  FTP SERVER LOCAL   IP ADDRESS  OR\n*                                 FTP CLIENT FOREIGN IP ADDRESS\n*\nSMFFTPCP DS    CL2                FTP CLIENT LOCAL   PORT\nSMFFTPCF DS    CL2                FTP CLIENT FOREIGN PORT\nSMFFTPR2 DS    CL4                FTP CLIENT RESERVED\n*\nSMFFTPSU DS    CL8                FTP SERVER LOCAL  USER ID      OR\n*                                 FTP CLIENT REMOTE USER ID\n*\nSMFFTPFM DS    CL1                FTP DATA FORMAT\nSMFFTPFA EQU   C'A'                   A = ASCII\nSMFFTPFE EQU   C'E'                   E = EBCDIC\nSMFFTPFI EQU   C'I'                   I = IMAGE\n*\nSMFFTPMO DS    CL1                FTP MODE\nSMFFTPMB EQU   C'B'                   B = BLOCK\nSMFFTPMC EQU   C'C'                   C = COMPRESSED\nSMFFTPMS EQU   C'S'                   S = STREAM\n*\nSMFFTPST DS    CL1                FTP STRUCTURE\nSMFFTPSF EQU   C'F'                   F = FILE\n*\nSMFFTPDT DS    CL1                FTP DATA SET TYPE\nSMFFTPDB EQU   C' '                   BLANK = SEQUENTIAL\nSMFFTPDP EQU   C'P'                   P     = PDS\n*\nSMFFTTRS DS    F                  FTP START TIME OF TRANSMISSION\nSMFFTTRE DS    F                  FTP END   TIME OF TRANSMISSION\nSMFFTTBC DS    F                  FTP BYTE COUNT OF TRANSMISSION\n*\nSMFFTPXD DS    CL1                FTP ID\nSMFFTPXC EQU   C'C'                   C = CLIENT\nSMFFTPXS EQU   C'S'                   S = SERVER\n*\nSMFFTSLR DS    CL3                FTP SERVER - LAST REPLY TO CLIENT\n*\nSMFFTDSN DS    CL44               FTP DATA SET NAME\nSMFFTMEM DS    CL8                FTP MEMBER NAME FOR PDS\nSMFFTRS2 DS    CL8                FTP RESERVED FOR ABNORMAL END INFO.\n*\nSMFFTDS2 DS    CL44               FTP SECOND DATA SET NAME (IF NEEDED)\n*                                 OR  FTP CLIENT LOCAL DIRECTORY\n*\nSMFFTMM2 DS    CL8                FTP SECOND MEMBER NAME FOR PDS\n*\nSMFFTSTC DS    CL8                FTP SERVER STARTED TASK QUALIFIER OR\n*                                 FTP CLIENT USER ID OF FTP USER\n*\nSMFFTHST DS    CL8                FTP TCP/IP HOST NAME\n*\nSMFFTSRP DS    CL2                FTP SERVER REMOTE PORT NUMBER\nSMFFTSLP DS    CL2                FTP SERVER LOCAL  PORT NUMBER\nSMFFTOF1 DS    AL2                OFFSET TO THE FIRST HFS FILE FIELD\nSMFFTOF2 DS    AL2                OFFSET TO THE SECOND HFS FILE FIELD\nSMFFTBYF DS    XL8                BYTES TRANSFERRED COUNTER IN DOUBLE\nSMFFTGIG DS    AL4                4-GIGABYTE COUNTER FOR BYTEXFER\nSMFFTVAR DS    0C                 VAR-LENGTH FIELDS\n*\nWK83AREA DSECT\nWORK     DS    D\nWTOU83D  WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678901234567890123456789012345678901+\n               23456789012345',ROUTCDE=(11),MF=L\n         ORG   WTOU83D+4\nWTOMSGID DS    CL8                  U83###I\nWTOTEXT  DS    CL112\n         ORG   WTOTEXT\nWTOAMOPN DS    CL6                  OPEN TYPE\n         DS    CL1                  ' '\nWTOAMNAM DS    CL4                  ACCESS METHOD\n         DS    CL6                  ' FILE '\nWTOAMDDN DS    CL8                  DDNAME\nWTOAMSLA DS    CL1                  ' ' OR '/'\nWTOAMVOL DS    CL6                  'CLOSED' OR TAPE VOLSER\nWTOAMXCP DS    CL10                 EXCP COUNT\nWTOAMDES DS    CL11                 ' EXCPS FOR ' OR ' BLOCKS OF '\nWTOAMDSN DS    CL44                 DSNAME\n         DS    CL1                  ' '\nWTOAMBLK DS    CL6                  'BLKSZ='\nWTOAMBLS DS    CL5                  DATA SET BLOCK SIZE\nWTOAMSIZ DS    CL6                  UPPER LIMIT TO BYTE COUNT\nWTOAMSCL DS    CL2                  'KB'/'MB'/'GB'/'TB'\n         ORG\n         SPACE\n         DS    0D\nWK14LEN  EQU   *-WK83AREA\nWK21LEN  EQU   *-WK83AREA\nWK64LEN  EQU   *-WK83AREA\n         EJECT\n         TITLE 'SMF RECORD STRUCTURES'\nSMFRECD  DSECT\n         IFASMFR (14)\n         SPACE\n         ORG   SMFJFCB1\n         IEFJFCBN\n         EJECT\n         ORG   SMFRECD\n         IFASMFR (21)\n         EJECT\n         ORG   SMFRECD\n         IFASMFR (64)\n         EJECT\n         TITLE 'SYSTEM CONTROL BLOCKS'\n         IHAPSA\n         SPACE 3\n         IHAASCB\n         SPACE 3\n         IHAASXB                   * ASXB MAPPING\n         SPACE 3\n         IHAACEE                   * ACEE MAPPING\n         SPACE 3\n         IEFJMR                    * MAP JOB MANAGEMENT RECORD\n         SPACE 3\n*        EZASMF76 FTP=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MPFLST83": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\n\\x00\\n\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 10, "newlines": 10, "modlines": 0, "user": "CHSY227"}, "text": "U83C1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE TAPE FILE MESSAGE\nU83M1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 TAPE END-OF-VOLUME MESSAGE\nU83I1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE ISAM FILE MESSAGE\nU83D1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE BDAM FILE MESSAGE\nU83V1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE VIO FILE MESSAGE\nU83T1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE TEMPORARY FILE MESSAGE\nU83E1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE PDSE FILE MESSAGE\nU83P1*,SUP(YES),USEREXIT(MSGFLUSH)  IEFU83 CLOSE PERMANENT FILE MESSAGE\nU83021I,SUP(YES),USEREXIT(MSGJOBLG) IEFU83 TAPE DEMOUNT MESSAGE\nU83064I,SUP(YES),USEREXIT(MSGFLUSH) IEFU83 CLOSE VSAM FILE MESSAGE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSGFLUSH": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00?\\x00?\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 63, "newlines": 63, "modlines": 0, "user": "CHSY227"}, "text": "MSGFLUSH TITLE 'MPF EXIT TO DELETE WTO MESSAGE FROM CONSOLES AND LOGS'\n*\n*        PURPOSE: TO SUPPRESS WTO MESSAGE DISPLAY ON EVERY\n*                 CONSOLE AS WELL AS THE SYSTEM LOG AND JOB LOG.\n*                 THIS ALLOWS INSTALLATION CODE SUCH AS SMF EXITS\n*                 LIKE IEFU83 TO SUPPLY NUMEROUS MESSAGES WHICH\n*                 CAN BE SELECTIVELY DISCARDED TO REDUCE CONSOLE\n*                 AND LOG MESSAGE CLUTTER.  THESE DISCARDED MESSAGES\n*                 WILL ONLY APPEAR IN THE MASTER TRACE TABLE, AND\n*                 WTP MESSAGES (ROUTCDE=11) WILL NOT BE TPUT UNDER\n*                 TSO EVEN IF 'PROFILE WTPMSG' IS ACTIVE.\n*\n*       FUNCTION: TURN ON THE \"DELETE THE MESSAGE\" BIT AS WELL AS\n*                 THE \"SUPPRESS FROM JOBLOG\" BIT.\n*                 SELECTIVITY IS PROVIDED BY THE ACTIVE MPFLST__\n*                 MEMBER OF SYS1.PARMLIB.\n*\n*        WRITTEN: GREG PRICE OF FERNTREE COMPUTER SERVICES 08 OCT 1992.\n*\n*     ATTRIBUTES: REUS,RENT,REFR,AMODE=31,RMODE=ANY.\n*\n*         MACROS: IEZVX100 MAPPING MACRO FROM SYS1.MODGEN.\n*\n         SPACE 2\nMSGFLUSH CSECT\nMSGFLUSH AMODE 31                 31 BIT ADDRESSING MODE\nMSGFLUSH RMODE ANY                31 BIT RESIDENCY MODE\n         SPACE\n         USING MSGFLUSH,R12\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         LR    R12,R15            ESTABLISH MODULE'S BASE REGISTER\n         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST\n         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT\n         OI    CTXTRFB2,CTXTRDTM  DELETE THE MESSAGE\n         OI    CTXTERF3,CTXTESJL  SUPPRESS MESSAGE FROM THE JOBLOG\n         DROP  R12,R9             MSGFLUSH, CTXT\n         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS\n         BR    R14                RETURN TO CALLER\n         SPACE 2\n         LTORG\n         SPACE 2\n         DS    0D                 END OF CSECT\n         TITLE 'EQUATES AND DSECTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         IEZVX100\n         SPACE 2\n         END   MSGFLUSH\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSGJOBLG": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00>\\x00>\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 62, "newlines": 62, "modlines": 0, "user": "CHSY227"}, "text": "MSGJOBLG TITLE 'MPF EXIT TO DELETE WTO MESSAGE FROM CONSOLES AND LOG'\n*\n*        PURPOSE: TO SUPPRESS WTO MESSAGE DISPLAY ON EVERY\n*                 CONSOLE AS WELL AS THE SYSTEM LOG.\n*                 THIS ALLOWS INSTALLATION CODE SUCH AS SMF EXITS\n*                 LIKE IEFU83 TO SUPPLY NUMEROUS MESSAGES WHICH\n*                 CAN BE SELECTIVELY DISCARDED TO REDUCE CONSOLE\n*                 AND SYSTEM LOG MESSAGE CLUTTER.  THESE DISCARDED\n*                 MESSAGES WILL ONLY APPEAR IN THE MASTER TRACE\n*                 TABLE AND THE JOB LOG, AND WTP MESSAGES (ROUTCDE=11)\n*                 WILL NOT BE TPUT UNDER TSO EVEN IF 'PROFILE WTPMSG'\n*                 IS ACTIVE.\n*\n*       FUNCTION: TURN ON THE \"DELETE THE MESSAGE\" BIT.\n*                 SELECTIVITY IS PROVIDED BY THE ACTIVE MPFLST__\n*                 MEMBER OF SYS1.PARMLIB.\n*\n*        WRITTEN: GREG PRICE OF FERNTREE COMPUTER SERVICES 08 OCT 1992.\n*\n*     ATTRIBUTES: REUS,RENT,REFR,AMODE=31,RMODE=ANY.\n*\n*         MACROS: IEZVX100 MAPPING MACRO FROM SYS1.MODGEN.\n*\n         SPACE 2\nMSGJOBLG CSECT\nMSGJOBLG AMODE 31                 31 BIT ADDRESSING MODE\nMSGJOBLG RMODE ANY                31 BIT RESIDENCY MODE\n         SPACE\n         USING MSGJOBLG,R12\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         LR    R12,R15            ESTABLISH MODULE'S BASE REGISTER\n         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST\n         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT\n         OI    CTXTRFB2,CTXTRDTM  DELETE THE MESSAGE\n         DROP  R12,R9             MSGJOBLG, CTXT\n         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS\n         BR    R14                RETURN TO CALLER\n         SPACE 2\n         LTORG\n         SPACE 2\n         DS    0D                 END OF CSECT\n         TITLE 'EQUATES AND DSECTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         IEZVX100\n         SPACE 2\n         END   MSGJOBLG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSGNOJLG": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x009\\x009\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 57, "newlines": 57, "modlines": 0, "user": "CHSY227"}, "text": "MSGNOJLG TITLE 'MPF EXIT TO DELETE WTO MESSAGE FROM JOBLOG'\n*\n*        PURPOSE: TO SUPPRESS WTO MESSAGE DISPLAY ON THE JOB LOG.\n*                 THIS ALLOWS INSTALLATION CODE SUCH AS SMF EXITS\n*                 LIKE IEFU83 TO SUPPLY NUMEROUS MESSAGES TO THE\n*                 JOB MESSAGES DATA SET (ASSUMING ROUTCDE=11)\n*                 WITHOUT CAUSING EXTRA JOB LOG MESSAGE CLUTTER.\n*\n*       FUNCTION: TURN ON THE \"SUPPRESS FROM JOBLOG\" BIT.\n*                 SELECTIVITY IS PROVIDED BY THE ACTIVE MPFLST__\n*                 MEMBER OF SYS1.PARMLIB.\n*\n*        WRITTEN: GREG PRICE OF FERNTREE COMPUTER SERVICES 08 OCT 1992.\n*\n*     ATTRIBUTES: REUS,RENT,REFR,AMODE=31,RMODE=ANY.\n*\n*         MACROS: IEZVX100 MAPPING MACRO FROM SYS1.MODGEN.\n*\n         SPACE 2\nMSGNOJLG CSECT\nMSGNOJLG AMODE 31                 31 BIT ADDRESSING MODE\nMSGNOJLG RMODE ANY                31 BIT RESIDENCY MODE\n         SPACE\n         USING MSGNOJLG,R12\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         LR    R12,R15            ESTABLISH MODULE'S BASE REGISTER\n         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST\n         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT\n         OI    CTXTERF3,CTXTESJL  SUPPRESS MESSAGE FROM THE JOBLOG\n         DROP  R12,R9             MSGNOJLG, CTXT\n         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS\n         BR    R14                RETURN TO CALLER\n         SPACE 2\n         LTORG\n         SPACE 2\n         DS    0D                 END OF CSECT\n         TITLE 'EQUATES AND DSECTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         IEZVX100\n         SPACE 2\n         END   MSGNOJLG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSGNOLOG": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00A\\x00A\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 65, "newlines": 65, "modlines": 0, "user": "CHSY227"}, "text": "MSGNOLOG TITLE 'MPF EXIT TO DELETE WTO MESSAGE FROM SYSLOG AND JOBLOG'\n*\n*        PURPOSE: TO SUPPRESS WTO MESSAGE DISPLAY ON THE SYSTEM\n*                 LOG AS WELL AS THE JOB LOG.\n*                 THIS ALLOWS INSTALLATION CODE SUCH AS SMF EXITS\n*                 LIKE IEFU83 TO SUPPLY NUMEROUS MESSAGES TO THE\n*                 JOB MESSAGES DATA SET (ASSUMING ROUTCDE=11)\n*                 WITHOUT CAUSING EXTRA LOG MESSAGE CLUTTER.\n*\n*       FUNCTION: TURN ON THE \"FORCE NO HARDCOPY\" BIT AS WELL AS\n*                 THE \"SUPPRESS FROM JOBLOG\" BIT.\n*                 SELECTIVITY IS PROVIDED BY THE ACTIVE MPFLST__\n*                 MEMBER OF SYS1.PARMLIB.  IF 'SUP(YES)' IS SPECIFIED\n*                 THEN THE MESSAGE WILL BE SHOWN ON THE SYSTEM LOG,\n*                 UNLESS MCSFLAG=HRDCPY IS SPECIFIED WHEREUPON THE\n*                 MESSAGE WILL BE DISPLAY ON THE SYSTEM CONSOLE(S).\n*                 WTP MESSAGES CAN STILL BE TPUT UNDER TSO SUBJECT\n*                 TO 'PROFILE WTPMSG' BEING ACTIVE.\n*\n*        WRITTEN: GREG PRICE OF FERNTREE COMPUTER SERVICES 08 OCT 1992.\n*\n*     ATTRIBUTES: REUS,RENT,REFR,AMODE=31,RMODE=ANY.\n*\n*         MACROS: IEZVX100 MAPPING MACRO FROM SYS1.MODGEN.\n*\n         SPACE 2\nMSGNOLOG CSECT\nMSGNOLOG AMODE 31                 31 BIT ADDRESSING MODE\nMSGNOLOG RMODE ANY                31 BIT RESIDENCY MODE\n         SPACE\n         USING MSGNOLOG,R12\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         LR    R12,R15            ESTABLISH MODULE'S BASE REGISTER\n         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST\n         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT\n         OI    CTXTRFB2,CTXTRNHC  FORCE NO HARDCOPY\n         OI    CTXTERF3,CTXTESJL  SUPPRESS MESSAGE FROM THE JOBLOG\n         DROP  R12,R9             MSGNOLOG, CTXT\n         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS\n         BR    R14                RETURN TO CALLER\n         SPACE 2\n         LTORG\n         SPACE 2\n         DS    0D                 END OF CSECT\n         TITLE 'EQUATES AND DSECTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         IEZVX100\n         SPACE 2\n         END   MSGNOLOG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSSCAN": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x03\\xf7\\x03\\xf7\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 1015, "newlines": 1015, "modlines": 0, "user": "CHSY227"}, "text": "PDSSCAN  TITLE 'GLOBAL PDS SCAN PROGRAM --- MAIN MODULE'\n*---------------------------------------------------------------------*\n*---     TITLE: PDSSCAN                                            ---*\n*---                                                               ---*\n*---     FUNCTION: PROVIDE A FACILITY FOR GLOBALLY SCANNING ALL    ---*\n*---           MEMBERS OF A PARTITIONED DATA SET.                  ---*\n*---                                                               ---*\n*---     INPUT: DDNAME=SYSIN A SERIES OF CONTROL STATEMENTS        ---*\n*---            CONTAINING THE STRINGS TO BE LOCATED. EACH STRING  ---*\n*---            IS A SINGLE CONTROL STATEMENT AND STARTS AT THE    ---*\n*---            FIRST NONBLANK CHARACTER AND ENDS AT THE FIRST     ---*\n*---            FOLLOWING BLANK.                                   ---*\n*---                                                               ---*\n*---     OUTPUT: DDNAME=SYSPRINT, QSAM SUPPORTED DEVICE,           ---*\n*---             RECFM=FBA, LRECL=133. BLKSIZE MAY BE SUPPLIED OR  ---*\n*---             ALLOWED TO DEFAULT TO 3059.                       ---*\n*---                                                               ---*\n*---     PDS DDNAMES: DDNAME MUST START WITH THE CHARACTER \"@\".    ---*\n*---                  AGAIN, AS MANY AS DESIRED MAY BE SUPPLIED.   ---*\n*---                                                               ---*\n*---     OUTPUT LISTING: THE FIRST PAGE CONTAINS A LISTING OF THE  ---*\n*---                     STRINGS TO BE LOCATED.  THE SECOND PAGE   ---*\n*---                     CONTAINS A LISTING OF THE DDNAMES AND     ---*\n*---                     DATASET NAMES TO BE UPDATED.  THE THIRD   ---*\n*---                     PAGE IS THE BEGINNING OF THE SCAN         ---*\n*---                     LISTING.  EACH RECORD CONTAINING THE      ---*\n*---                     STRING TO BE LOCATED IS DISPLAYED.  THE   ---*\n*---                     FIRST ITEM ON THE LINE IS THE DDNAME,     ---*\n*---                     FOLLOWED BY THE MEMBER NAME AND THE       ---*\n*---                     SELECTED RECORD.                          ---*\n*---                                                               ---*\n*---     ATTRIBUTES: NON-REENTRANT, NON-REUSABLE, PROBLEM STATE    ---*\n*---                                                               ---*\n*---     EXTERNAL ROUTINES: DIRIO, BPAMIO, TIOT, CTLPARSE          ---*\n*---------------------------------------------------------------------*\n         EJECT\n*---                                                               ---*\n*---     STANDARD NON-REENTRANT ENTRY LINKAGE                      ---*\n*---                                                               ---*\nPDSSCAN CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'PDSSCAN' CSECT EYE-POPPER\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         BAL   R2,92(,R15)         'BAL' AROUND NEW SAVE AREA\n         USING *,R13               BASE REGISTER DEFINITION\n         DS    18F                 AND NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACKWARD POINTERS\n         LR    R13,R2              LOAD PGM BASE REGISTER\n*---                                                               ---*\n*---     OPEN THE SYSPRINT FILE.                                   ---*\n*---                                                               ---*\n         OPEN  (SYSPRINT,OUTPUT)   OPEN THE LISTING FILE\n*---                                                               ---*\n*---     CHECK THE PARM FIELD AND PRINT THE HELP IF ANY PARM       ---*\n*---                                                               ---*\n         L     R1,4(,R13)          LOAD BACK S.A. POINTER\n         L     R1,24(,R1)          RESTORE OLD R1 VALUE\n         L     R1,0(,R1)           POINT TO PARM VALUE\n         CLC   =H'0',0(R1)         ANY VALUE PRESENT ??\n         BE    CHECK               NOPE; NO HELP PRINT\n         L     R3,=V(SCANHELP)     LOAD POINT TO THE MESSAGEWS\n         LM    R3,R5,0(R3)         LOAD FIRST,INCR,LAST\n         MVC   TITLE,TITLEHLP      INIT THE TITLE LINE\nPRTHELP  DS    0H\n         MVC   LINE,0(R3)          COPY TO PRINT AREA\n         BAL   R6,PRINTER          PRINT THE LINE\n         BXLE  R3,R4,PRTHELP       AND LOOP FOR ALL\nCHECK    DS    0H\n*---                                                               ---*\n*---     CALL CTLPARSE TO READ AND PROCESS CONTROL CARDS           ---*\n*---                                                               ---*\n         CALL  CTLPARSE            CALL CONTROL-STMT PARSER\n         ST    R15,CTLLINK         AND STORE ADDRESS OF CTL-LIST\n         LTR   R4,R15              NULL POINTER ??\n         BZ    ENDJOB              YES; NOTHING TO CHANGE OR LIST\n*---                                                               ---*\n*---     LIST THE INPUT CONTROL INFORMATION                        ---*\n*---                                                               ---*\n         MVC   TITLE,TITLE1        DEFINE THE FIRST TITLE LINE\n         MVI   FROM,C'1'\nDSPL1    DS    0H\n         SR    R5,R5               CLEAR A WORK REGISTER\n         LA    R6,STRING1          POINT OUT THE FIRST STRING\n         IC    R5,4(,R4)           INSERT LENGTH-1\n         LA    R10,5(,R4)          POINT TO ACTUAL STRING\n         EX    R5,MVC1             MOVE STRING TO LINE\n         MVC   LINE,FROM\n         BAL   R6,PRINTER          AND DISPLAY 'FROM' STRING\n         MVI   FROM,C'0'\n         MVC   STRING1,STRING1-1   RE-BLANK THAT AREA\n         L     R4,0(,R4)           LOAD NEXT  LINK POINTER\n         LTR   R4,R4               NULL POINTER ??\n         BNZ   DSPL1               NOPE ---\n*---                                                               ---*\n*---     LOCATE AND DISPLAY THE DDNAMES AND DSNAMES TO UPDATE      ---*\n*---                                                               ---*\n         MVC   TITLE,TITLE2\n         MVI   DDXLINE,C'1'\nTIOTLP1  DS    0H\n         CALL  TIOT,DDNAME         FETCH A DDNAME\n         LTR   R15,R15             NON-ZERO RETURN CODE ??\n         BNZ   TIOTLP2             YES; ALL DONE\n         CLI   DDNAME,C'@'         DOES DDNAME START WITH '@' ??\n         BNE   TIOTLP1             NOPE; IGNORE IT\n         MVC   DDCB+40(8),DDNAME   COPY DDNAME INTO DCB\n         RDJFCB DDCB               READ IN THE JFCB\n         MVC   DSNAME(44),JFCB     COPY DSNAME TO OUTPUT LINE\n         MVC   LINE,DDXLINE\n         BAL   R6,PRINTER          OUTPUT DDNAME, DSNAME\n         MVI   DDXLINE,C'0'\n         B     TIOTLP1             AND CONTINUE TIOT SCAN\nTIOTLP2  DS    0H\n*---                                                               ---*\n*---     RESET THE TIOT SCANNER TO THE BEGINNING AGAIN             ---*\n*---                                                               ---*\n         CALL  TIOT,ZERO           RESET TIOT SCANNER\n*---                                                               ---*\n*---     OUTPUT THE REPLACEMENT TITLES AND START MAIN LOOP         ---*\n*---                                                               ---*\n         MVC   TITLE,TITLE3\n         MVI   OLDLINE,C'1'\nPDSLP0   DS    0H\n         CALL  BPAMIO,(DDNAME,,CLOSE) CLOSE THE PDS\n         CALL  TIOT,DDNAME         FETCH A DDNAME\n         LTR   R15,R15             TIOT SCAN DONE ??\n         BNZ   ALLDONE             YES; I'M ALL THROUGH\n         CLI   DDNAME,C'@'         SPECIAL DDNAME ??\n         BNE   PDSLP0              NOPE; TRY AGAIN\n         MVC   DDN,DDNAME          COPY DDNAME TO OUTPUT LINE\n*---                                                               ---*\n*---     OPEN THE PDS FOR INPUT I/O                                ---*\n*---                                                               ---*\n         CALL  BPAMIO,(DDNAME,,OPENIN) OPEN THE PDS\n*---                                                               ---*\n*---     READ A MEMBER NAME FROM THE DIRECTORY                     ---*\n*---                                                               ---*\nPDSLP1   DS    0H\n         CALL  DIRIO,(DDNAME,MEMBER,TTRC)  READ A MEMBER NAME\n         LTR   R15,R15             IS DIRECTORY DONE ??\n         BNZ   PDSLP0              YES; TRY FOR ANOTHER DD CARD\n*---                                                               ---*\n*---     'POINT' TO THE MEMBER                                     ---*\n*---                                                               ---*\nPDSLP2   DS    0H\n         CALL  BPAMIO,(TTRC,,FIND)\n         LTR   R15,R15             MEMBER FOUND ??\n         BNZ   PDSLP1              NOPE; SKIP IT\n*---                                                               ---*\n*---     AND START READING THE MEMBER                              ---*\n*---                                                               ---*\nPDSLP3   DS    0H\n         CALL  BPAMIO,(LREC,,READ) READ A LOGICAL RECORD\n         LTR   R15,R15             END-OF-FILE ON THIS MEMBER ??\n         BNZ   PDSLP1              YES; SKIP TO NEXT MEMBER\n*\n* SCAN CODE GOES HERE\n*\nDOSCAN   DS    0H\n         LA    R4,LREC             POINT TO SCAN FIELD START\n         L     R9,CTLLINK          POINT TO FIRST 'LOCATE' STRING\nSCAN1    DS    0H\n         LTR   R9,R9               ALL DONE ??\n         BZ    SCANEND             YES ---\n         IC    R2,4(,R9)           LOAD STRING LENGTH\n         LA    R1,71               LOAD POSSIBLE MAX. LENGTH\n         N     R2,XFF              TRIM ---\n         SR    R1,R2               COMPUTE BXLE COUNT\n         LA    R7,0(R4,R1)         POINT TO END COLUMN\n         LR    R5,R4               COPY START ADDRESS\n         LA    R6,1                LOAD BXLE INCREMENT\nSCANLOOP DS    0H\n         EX    R2,CLC              COMPARE INPUT TO CTL STRING\n         BE    GOTIT               GOT A MATCH\n         BXLE  R5,R6,SCANLOOP      SCAN THE WHOLE THING\n         L     R9,0(,R9)           BUMP DOWN THE CONTROL CHAIN\n         B     SCAN1               AND LOOP, SCANNINGLY\nGOTIT    DS    0H\n         MVC   LINE,OLDLINE        COPY LINE TO PRINT AREA\n         BAL   R6,PRINTER          OUTPUT A 'GOTCHA' LINE\n         MVI   OLDLINE,C' '\nSCANEND  DS    0H\n         B     PDSLP3\nENDJOB   DS    0H\nALLDONE  DS    0H\n         L     R13,4(,R13)         LOAD SAVE AREA BACK POINTER\n         LM    R14,R12,12(R13)     RESTORE REGS\n         LA    R15,0               SET RETURN CODE ZERO\n         MVI   12(R13),255         SET DONE FLAG\n         BR    R14\n         EJECT\nPRINTER  UPO   SYSPRINT,LINE,(TITLE)\n         BR    R6\nLINE     DC    CL133' '\nTITLE    DC    CL133' '\n         EJECT\n*---                                                               ---*\n*---     MISC. CONSTANTS, DATA AREAS AND 'EX'ECUTED INSTRUCTIONS   ---*\n*---                                                               ---*\nZERO     EQU   0                   FOR GENERATING ZERO ADCONS IN CALLS\nXFF      DC    F'255'\nTTRC     DS    F                   TTRC OF CURRENT MEMBER\n*---                                                               ---*\n*---     KEYS FOR VARIOUS BPAMIO CALLS                             ---*\n*---                                                               ---*\nFIND     DC    F'0'                FIND A MEMBER\nREAD     DC    F'4'                RETURN A LOGICAL RECORD\nWRITE    DC    F'8'                REPLACE A LOGICAL RECORD\nCLOSE    DC    F'12'               CLOSE A PDS\nOPENIN   DC    F'16'               OPEN A PDS\n*---                                                               ---*\n*---     DC'S FOR DISPLAY OF OLD AND NEW LOGICAL RECORDS           ---*\n*---                                                               ---*\nOLDLINE  DC    CL133'0'            FOR PRE-CHANGE RECORD DISPLAY\n         ORG   OLDLINE+3\nDDN      DS    CL8                 CURRENT MEMBER NAME\n         ORG   OLDLINE+13\nMEMBER   DS    CL8                 BPAMIO INPUT RECORD AREA\n         ORG   OLDLINE+24          BPAMIO INPUT RECORD AREA\nLREC     DS    CL80                BPAMIO INPUT RECORD AREA\n         ORG\n*---                                                               ---*\n*---     VARIOUS TITLE LINES                                       ---*\n*---                                                               ---*\nTITLEHLP DC    CL133'1 --- INSTRUCTIONS FOR USING PDSSCAN --- '\nTITLE1   DC    CL133'1 THE FOLLOWING LIST DESCRIBES THE ACCEPTED INPUT X\n               PARAMETERS:'\nTITLE2   DC    CL133'1 THE FOLLOWING LIST DESCRIBES THE DDNAMES AND PDSX\n               ''S TO BE EXAMINED/UPDATED:'\nTITLE3   DC    CL133'1     SUMMARY OF MEMBER NAMES AND SCAN SUCCESSES.'\n*---                                                               ---*\n*---     DC'S FOR DISPLAYING THE DDNAMES AND DSNAMES               ---*\n*---                                                               ---*\nDDXLINE  DC    CL133'0'\n         ORG   DDXLINE+10\nDDNAME   DS    CL8\n         DS    CL5\nDSNAME   DS    CL44\n         ORG\n*---                                                               ---*\n*---     DC'S FOR DISPLAYING THE ACCEPTED CHANGE CONTROLS          ---*\n*---                                                               ---*\nFROM     DC    CL18'0 SCAN STRING ==> '\nSTRING1  DC    CL115' '\n*---                                                               ---*\n*---     VARIOUS AND SUNDRY 'EX'ECUTED INSTRUCTIONS                ---*\n*---                                                               ---*\nMVC1     MVC   0(0,R6),0(R10)      COPY STRINGS TO PRINT LINES\nCLC      CLC   5(1,R9),0(R5)       'EX' COMPARE OF STRINGS\n*---                                                               ---*\n*---     ADDRESS OF LIST OF ACCEPTED SCAN STRINGS                  ---*\n*---                                                               ---*\nCTLLINK  DC    A(0)\n*---                                                               ---*\n*---     LISTING DATA CONTROL BLOCK (NOTE MISSING BLKSIZE)         ---*\n*---                                                               ---*\nSYSPRINT DCB   DSORG=PS,                                               X\n               DDNAME=SYSPRINT,                                        X\n               MACRF=PM,                                               X\n               RECFM=FBA,                                              X\n               LRECL=133,                                              X\n               EXLST=PRTEXIT\n*---                                                               ---*\n*---     SYSPRINT DCB COMPLETION EXIT. FILL IN MISSING BLKSIZE.    ---*\n*---                                                               ---*\nPRTEXIT  DS    0F\n         DC    X'85',AL3(PRTEXIT+4)\n         NC    62(2,R1),62(R1)     IS BLKSIZE STILL ZERO ??\n         BNZR  R14                 NOPE; RETURN TO O/C/E\n         MVC   62(2,R1),=H'3059'   DEFAULT BLKSIZE\n         BR    R14                 RETURN TO O/C/E\n*---                                                               ---*\n*---     DUMMY DCB, USED ONLY FOR READING IN JFCB'S                ---*\n*---                                                               ---*\nDDCB     DCB   DSORG=PS,DDNAME=XXXXXXXX,MACRF=E,EXLST=DDCBEXIT\n*---                                                               ---*\n*---     JFCB EXIT LIST FOR READING JFCB'S IN FOR DUMMY DCB        ---*\n*---                                                               ---*\nDDCBEXIT DS    0F\n         DC    X'87',AL3(JFCB)\nJFCB     DS    22D\n         LTORG ,\n         END\nBPAMIO   TITLE 'PDSSCAN GLOBAL PDS UPDATE PROGRAM --- BPAM I/O '\n***********************************************************************\n*                                                                     *\n*  TITLE: BPAMIO                                                      *\n*                                                                     *\n*  FUNCTION: CENTRALIZED FACILITY FOR UPDATE-MODE BPAM I/O            *\n*                                                                     *\n*  INPUT: A THREE-WORD PARAMETER LIST, THE THIRD WORD DESCRIBING      *\n*         THE FUNCTION TO BE PERFORMED. THE REMAINING TWO WORDS       *\n*         ARE DEPENDENT UPON THE THIRD WORD.                          *\n*                                                                     *\n*         WORD 3 = 0 (FIND REQUEST):                                  *\n*              WORD 1 => MEMBER TTRC, IN FORM ACQUIRED BY READING     *\n*                        THE DIRECTORY WITHOUT BLDL. (NO CONCAT-      *\n*                        ENATION NUMBER)                              *\n*              RETURNS: ACTUAL RETURN CODE FROM 'POINT' MACRO         *\n*                                                                     *\n*         WORD 3 = 4 (READ REQUEST)                                   *\n*              WORD 1 => LOCATION FOR OUTPUT LOGICAL RECORD           *\n*              RETURNS: 0 FOR SUCCESSFUL COMPLETION                   *\n*                       4 FOR END-OF-FILE ON MEMBER                   *\n*                       8 FOR UNOPENED DCB                            *\n*                                                                     *\n*         WORD 3 = 8 (WRITE REQUEST)                                  *\n*              WORD 1 => LOGICAL RECORD TO BE REWRITTEN               *\n*              NO RETURN CODES                                        *\n*                                                                     *\n*         WORD 3 = 12 (CLOSE REQUEST)                                 *\n*              WORDS 1 AND 2 NOT SIGNIFICANT                          *\n*                                                                     *\n*         WORD 3 = 16 (OPEN REQUEST)                                  *\n*              WORD 1 => 8 CHARACTER DDNAME, RIGH PADDED WITH         *\n*                        BLANKS AS NEEDED.                            *\n*              WORD 2 IGNORED.                                        *\n*                                                                     *\n*  MACROS: GETBUF, FREEBUF, FREEPOOL, READ, WRITE, POINT,CHECK,DCB,   *\n*          OPEN, CLOSE                                                *\n*                                                                     *\n*  ATTRIBUTES: NONREENTRANT, NONREUSABLE, PROBLEM PROGRAM SUBROUTINE  *\n*                                                                     *\n*  AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                   *\n*          TRAILER TRAIN COMPANY                                      *\n*          300 SOUTH WACKER DRIVE,                                    *\n*          CHICAGO, ILLINOIS                                          *\n*          (312) 786-1200                                             *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     PERFORM STANDARD ENTRY LINKAGE                            ---*\n*---                                                               ---*\nBPAMIO   CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'BPAMIO'   EYE-POPPER\n         STM   R14,R12,12(R13)     SAVE ENTRY REGS\n         BAL   R2,92(,R15)         'BAL' AROUND\n         USING *,R13               BASE REGISTER DEFINITION\n         DS    18F                 AND NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA\n         ST    R13,4(,R2)          STORE BACKWARD AND\n         ST    R2,8(,R13)          FORWARD POINTERS\n         LR    R13,R2              AND LOAD PGM BASE\n*---                                                               ---*\n*---     LOAD PARMS AND BRANCH TO APPROPRIATE SUBROUTINE           ---*\n*---                                                               ---*\n         LM    R2,R4,0(R1)         LOAD PARM POINTERS\n         L     R4,0(,R4)           LOAD FUNCTION IDENTIFIER\n         B     *+4(R4)             GO TO INDICATED CODE\n         B     FIND                FIND A MEMBER\n         B     READ                RETURN A LOGICAL RECORD\n         B     WRITE               REPLACE A LOGICAL RECORD\n         B     CLOSE               CLOSE A PDS\n         B     OPENIN              OPEN A PDS FOR INPUT\n*---                                                               ---*\n*---     FIND REQUEST                                              ---*\n*---           R2 ==> MEMBER TTRC                                  ---*\n*---           RETURNS 'POINT' RETURN CODE                         ---*\n*---                                                               ---*\nFIND     DS    0H\n         NI    REWRITE,255-EODAD   TURN OFF EODAD FLAG\n         POINT PDS,(2)             POINT TO PDS MEMBER\n         B     RET                 AND RETURN TO CALLER\n*---                                                               ---*\n*---     OPEN REQUEST                                              ---*\n*---           R2 ==> DDNAME                                       ---*\n*---           RETURNS: 0 = SUCCESSFUL OPEN                        ---*\n*---                    4 = DCB OPEN; NEEDS CLOSE CALL             ---*\n*---                                                               ---*\nOPENIN   DS    0H\n         TM    PDS+48,X'10'        IS DCB OPEN ??\n         BNZ   RC4                 YES; REQUEST A CLOSE CALL\n         MVC   PDS+40(8),0(R2)     MOVE IN THE DDNAME\n         MVC   DDN,0(R2)           AND COPY TO SAVE FIELD\n         OPEN  (PDS,INPUT)         OPEN THE PDS FOR INPUT\n         GETBUF PDS,(5)            LOCATE THE BUFFER\n         ST    R5,BUFFER           AND SAVE ITS ADDRESS\n         XC    REWRITE,REWRITE     CLEAR UPDAT FLAG\n         B     RC0                 AND RETURN, CODE 0\n*---                                                               ---*\n*---     CLOSE REQUEST. PARAMETERS IGNORED.                        ---*\n*---                                                               ---*\nCLOSE    DS    0H\n         TM    PDS+48,X'10'        IS DCB OPEN ??\n         BZ    RC0                 NOPE; NOTHING TO DO\n         L     R4,BUFFER           LOAD BUFFER ADDRESS\n         FREEBUF PDS,(4)           RELEASE THE BUFFER\n         CLOSE (PDS)               CLOSE THE DCB\n         FREEPOOL PDS              RELEASE THE BUFFER POOL\n         B     RC0                 AND RETURN, CODE = 0\n*---                                                               ---*\n*---     WRITE REQUEST.                                            ---*\n*---           R2 ==> LOGICAL RECORD TO BE REWRITTEN               ---*\n*---                                                               ---*\n*---     A WRITE REQUEST UPDATES THE RECORD IN THE IN-CORE         ---*\n*---     BLOCK AND SETS A FLAG. ANY ACTUAL I/O IS DONE BY THE      ---*\n*---     READ SUBROUTINE.                                          ---*\n*---                                                               ---*\nWRITE    DS    0H\n         L     R5,CURS             LOAD CURSOR ADDRESS\n         MVC   0(80,R5),0(R2)      MOVE RECORD INTO BLOCK\n         OI    REWRITE,NEEDED      SHOW A REWRITE NEEDED\n         B     RC0                 RETURN, CODE = 0\n*---                                                               ---*\n*---     READ REQUEST                                              ---*\n*---           R2 ==> LOCATION TO PLACE THE LOGICAL RECORD         ---*\n*---           RETURNS: 0 FOR SUCCESSFUL COMPLETION                ---*\n*---                    4 FOR END-OF-FILE ON THIS MEMBER           ---*\n*---                    8 FOR DCB NOT OPENED                       ---*\n*---                                                               ---*\n*---     IF REWRITE FLAG IS ON, REWRITE THE PREVIOUS BLOCK FIRST   ---*\n*---                                                               ---*\nREAD     DS    0H\n         TM    PDS+48,X'10'        IS PDS OPEN ??\n         BZ    RC8                 NOPE --- PROBLEMS\n         TM    REWRITE,EODAD       END-OF-FILE ALREADY HIT ??\n         BNZ   RC4                 YES ---\n         L     R4,CURS             LOAD DEBLOCKING CURSOR\n         LA    R4,80(,R4)          POINT TO NEXT LOGICAL RECORD\n         C     R4,BUFEND           PAST END OF BUFFER ??\n         BL    NOIO                NOPE; STILL OK\n         TM    REWRITE,NEEDED      IS A REWRITE NEEDED ??\n         BZ    JUSTREAD            NOPE ---\n         L     R4,BUFFER           LOAD BUFFER POINTER WORD\n         WRITE DECB,SF,,(4),MF=E   YES; DO THAT NOW\n         CHECK DECB                WAIT FOR COMPLETION\n         NI    REWRITE,255-NEEDED  TURN OFF REWRITE FLAG\n         MVC   CURS,BUFFER         RESET THE CURSOR\nJUSTREAD DS    0H\n         L     R4,BUFFER           LOAD BUFFER ADDRESS\n         READ  DECB,SF,,(4),MF=E   READ A BLOCK\n         CHECK DECB                WAIT FOR COMPLETION\n         ST    R4,CURS             STORE NEW CURSOR ADDRESS\n         LH    R5,PDS+62           LOAD PDS BLKSIZE\n         L     R6,DECB+16          LOAD IOB ADDRESS\n         LH    R6,14(,R6)          LOAD RESIDUAL LENGTH\n         SR    R5,R6               COMPUTE ACTUAL BLOCK LENGTH\n         BCTR  R5,R0               DECREMENT BY ONE\n         A     R5,CURS             POINT TO END OF BLOCK\n         ST    R5,BUFEND           AND SAVE THAT ADDRESS\n         MVC   0(80,R2),0(R4)      RETURN THE FIRST LOGICAL RECORD\n         B     RC0                 RETURN, CODE = 0\nNOIO     DS    0H\n         MVC   0(80,R2),0(R4)      RETURN HIM A RECORD\n         ST    R4,CURS             SAVE CURSOR ADDRESS\n         B     RC0                 RETURN, CODE = 0\n*---                                                               ---*\n*---     SET CODE ZERO FOR RETURN                                  ---*\n*---                                                               ---*\nRC0      DS    0H\n         LA    R15,0               SET RETURN CODE = 0\n         B     RET                 AND RETURN\n*---                                                               ---*\n*---     SET CODE FOUR FOR RETURN                                  ---*\n*---                                                               ---*\nRC4      DS    0H\n         LA    R15,4               SET RETURN CODE 4\n         B     RET                 AND RETURN\n*---                                                               ---*\n*---     SET CODE 8 FOR RETURN                                     ---*\n*---                                                               ---*\nRC8      DS    0H\n         LA    R15,8               SET RETURN CODE = 8\n*---                                                               ---*\n*---     RETURN, LEAVING R15 UNCHANGED                             ---*\n*---                                                               ---*\nRET      DS    0H\n         L     R13,4(,R13)         LOAD BACK S.A. POINTER\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN\n*---                                                               ---*\n*---     EODAD ROUTINE FOR PDS INPUT ACCESS                        ---*\n*---                                                               ---*\nPDSEOD   DS    0H\n         OI    REWRITE,EODAD       TURN ON EOF FLAG\n         B     RC4                 RETURN, CODE = 4\n         EJECT\n*---                                                               ---*\n*---     VARIOUS AND SUNDRY CONSTANTS AND DATA AREAS               ---*\n*---                                                               ---*\nDDN      DC    CL8' '              CURRENT PDS DDNAME\nCURS     DC    A(0)                DEBLOCKING CURSOR\nBUFFER   DC    A(0)                BUFFER ADDRESS\nBUFEND   DC    A(0)                END OF BUFFER ADDRESS\nREWRITE  DC    X'00'               REWRITE FLAG\nEODAD    EQU   X'80'               END-OF-FILE FLAG\nNEEDED   EQU   X'40'               REWRITE-NEEDED FLAG\n         READ  DECB,SF,PDS,,MF=L   BPAM DECB\nPDS      DCB   DSORG=PO,                                               X\n               DDNAME=XXXXXXXX,                                        X\n               MACRF=(R,W),                                            X\n               EODAD=PDSEOD,                                           X\n               BUFNO=1\n         END\nCTLPARSE TITLE 'PDS GLOBAL UPDATER --- CONTROL CARD SCAN'\n***********************************************************************\n*                                                                     *\n*  TITLE: CTLPARSE                                                    *\n*                                                                     *\n*   FUNCTION: SCAN AND PARSE THE CONTROL STATEMENTS FOR THE GLOBAL    *\n*             PDS UPDATE PROGRAM.                                     *\n*                                                                     *\n*   PARAMETERS: NONE                                                  *\n*                                                                     *\n*   RETURNS: PARAMETERS, IN SPECIAL SINGLY-LINKED LIST, IN R15        *\n*            THE ACTUAL RETURN VALUE IS THE ADDRESS OF THE FIRST      *\n*            LIST ELEMENT.                                            *\n*                                                                     *\n*   EXTERNAL ROUTINES: NONE                                           *\n*                                                                     *\n*   EXTERNAL FILES: SYSIN. QSAM SUPPORTED; BLKSIZE MUST BE MULTIPLE   *\n*                   OF 80. DEFAULTS TO 80.                            *\n*                                                                     *\n*   ATTRIBUTES: NON-REENTRANT, NON-REUSABLE PROBLEM PROGRAM           *\n*                                                                     *\n*   AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                  *\n*           TRAILER TRAIN COMPANY                                     *\n*           300 SOUTH WACKER DRIVE                                    *\n*           CHICAGO, ILLINOIS                                         *\n*           (312) 786-1200                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     PERFORM STANDARD ENTRY LINKAGE STUFF. BASE IS R13         ---*\n*---                                                               ---*\nCTLPARSE CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'CTLPARSE' CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS\n         BAL   R2,92(,R15)         BAL AROUND\n         USING *,R13               BASE REGISTER DEFINITION\n         DS    18F                 AND NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR OUT NEW S.A.\n         ST    R2,8(,R13)          STORE BACKWARD AND\n         ST    R13,4(,R2)          FORWARD POINTER\n         LR    R13,R2              LOAD PGM BASE REGISTER\n*---                                                               ---*\n*---     OPEN THE SYSIN FILE AND INITIALIZE THE CHAIN POINTER      ---*\n*---                                                               ---*\n         OPEN  (SYSIN)             OPEN THE INPUT FILE\n         XC    LINK,LINK           AND CLEAR OUT THE CHAIN FIELD\n*---                                                               ---*\n*---     READ A SINGLE CARD, USING QSAM I/O                        ---*\n*---                                                               ---*\nINCARD   DS    0H\n         GET   SYSIN,CARD          READ A SINGLE INPUT CARD\n*---                                                               ---*\n*---     POINT TO FIRST NON-BLANK. FORGET LEADING BLANKS           ---*\n*---                                                               ---*\n         LA    R3,CARD             START DELETING LEADING BLANKS\n         CLI   0(R3),C' '          LEADING BLANK ??\n         BNE   *+12                NOPE; START SCAN HERE\n         LA    R3,1(,R3)           YES; BUMP TO NEXT COLUMN\n         B     *-12                CONTINUE SCANNING ---\n*---                                                               ---*\n*---     SET UP AND SCAN FOR THE NEXT BLANK. THAT MARKS THE END.   ---*\n*---                                                               ---*\n         LA    R4,CARD+71          POINT TO CC 72\n         CR    R3,R4               ARE WE PAST THAT ??\n         BNL   INCARD              YES; IGNORE THIS CARD\n         SR    R4,R3               COMPUTE ACTUAL LENGTH\n         BCTR  R4,R0               FOR TRT INSTRUCTION\n         EX    R4,TRT1             SCAN FOR A ' ' CHARACTER\n         BC    8,INCARD            NONE FOUND; SKIP THIS CARD\n         SR    R1,R3               COMPUTE STRING LENGTH\n         BCTR  R1,R0               FOR MOVES\n         STC   R1,STR1             SAVE COMPUTED LENGTH\n         ST    R3,STR1A            AND ADDRESS\n*---                                                               ---*\n*---     SCAN WAS COMPLETE AND SUCCESSFUL. NOW GRAB STORAGE        ---*\n*---     FOR A LIST LINK AND INITIALIZE IT. THE ORDER WILL BE      ---*\n*---     THE REVERSE OF THE INPUT CARDS, BUT WE DON'T CARE.        ---*\n*---                                                               ---*\n         SR    R2,R2               CLEAR A WORK REGISTER\n         IC    R2,STR1             INSERT STRING1 LENGTH\n         LA    R0,6(,R2)           LOAD LENGTH INTO REGISTER 0\n         ICM   R0,8,=AL1(1)        INSERT SUBPOOL NUMBER\n         GETMAIN R,LV=(0)          GRAB A HUNK OF CORE\n         MVC   0(4,R1),LINK        ADD LINK TO CHAIN\n         ST    R1,LINK             AND STORE NEW START\n         LA    R1,4(,R1)           POINT TO FIRST STRING AREA\n         SR    R2,R2               CLEAR A WORK REGISTER\n         IC    R2,STR1             INSERT STRING 1 LENGTH\n         STC   R2,0(,R1)           SAVE IN LINK AREA\n         L     R3,STR1A            LOAD STRING ADDRESS\n         EX    R2,MVSTR1           COPY IN STRING-1\n         B     INCARD              AND GO FOR ANOTHER CARD\n*---                                                               ---*\n*---     END-OF-FILE ON SYSIN. CLEAN UP AND RETURN TO CALLER       ---*\n*---                                                               ---*\nINPUTEOD DS    0H\n         CLOSE SYSIN               CLOSE THE FILE AND\n         FREEPOOL SYSIN            RELEASE THE BUFFER POOL\n         L     R15,LINK            LOAD THE CHAIN ADDRESS\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        AND RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN TO CALLER\n         TITLE 'CONSTANTS, DATA AREAS AND SYSIN DCB STUFF'\n*---                                                               ---*\n*---     MISCELLANEOUS STORAGE AREAS FOR CARDS AND STRINGS         ---*\n*---                                                               ---*\nSTR1     DC    X'00'               LENGTH OF 'FROM' STRING\nSTR1A    DC    A(0)                ADDRESS OF 'FROM' STRING\nLINK     DC    A(0)                ADDRESS OF NEXT LINK\nTRT1     TRT   0(0,R3),TRTAB       SCANNING INSTRUCTION\nMVSTR1   MVC   1(0,R1),0(R3)       MOVING INSTRUCTION\nCARD     DS    CL80\n*---                                                               ---*\n*---     TRANSLATE AND TEST TABLE USED FOR THE SCAN. TO CHANGE     ---*\n*---     THE INPUT DELIMITER, THIS TABLE MUST BE CHANGED.          ---*\n*---                                                               ---*\nTRTAB    DC    256X'00'            TRANSLATE-AND-TEST TABLE\n         ORG   TRTAB+C' '\n         DC    X'04'\n         ORG\n         EJECT\n*---                                                               ---*\n*---     SYSIN FILE DESCRIPTION. NOTE MISSING BLKSIZE.             ---*\n*---                                                               ---*\nSYSIN    DCB   DSORG=PS,                                               X\n               MACRF=GM,                                               X\n               DDNAME=SYSIN,                                           X\n               EODAD=INPUTEOD,                                         X\n               RECFM=FB,                                               X\n               LRECL=80,                                               X\n               EXLST=EXIT1\n         EJECT\n*---                                                               ---*\n*---     DCB COMPLETION EXIT. BLKSIZE GETS FILLED IN HERE IF       ---*\n*---     NOT SUPPLIED FROM ANY OTHER SOURCE                        ---*\n*---                                                               ---*\nEXIT1    DS    0F\n         DC    X'85',AL3(EXIT1+4)  DCB EXIT LIST FOR SYSIN DCB\n         NC    62(2,R1),62(R1)     IS BLKSIZE STILL ZERO ??\n         BNZR  R14                 NOPE ---\n         MVC   62(2,R1),82(R1)     YES; ASSUME LRECL = BLKSIZE\n         BR    R14                 RETURN TO O/C/EOV\n         LTORG ,                   DISPLAY THE LITERAL POOL\n         END\nDIRIO    TITLE 'PDS GLOBAL UPDATER --- PDS DIRECTORY I/O ROUTINE'\n***********************************************************************\n*                                                                     *\n*  TITLE: DIRIO                                                       *\n*                                                                     *\n*  FUNCTION: READ, DEBLOCK AND RETURN THE DIRECTORY OF A              *\n*            PARTITIONED DATA SET, ONE MEMBER AT A TIME               *\n*            ALSO RETURNS THE TTRC BYTES FROM THE DIRECTORY           *\n*            ENTRY IN A SEPARATE PARM.                                *\n*                                                                     *\n*  PARAMETERS: A THREE WORD LIST OF ADDRESSES.                        *\n*              WORD 1 ==> DDNAME OF PDS                               *\n*              WORD 2 ==> MEMBER NAME OUTPUT AREA                     *\n*              WORD 3 ==> TTRC FROM DIRECTORY ENTRY                   *\n*                                                                     *\n*  RETURN CODES: 0 FOR SUCCESSFUL COMPLETION                          *\n*                4 FOR END OF FILE                                    *\n*                                                                     *\n*  ATTRIBUTES: NON-REENTRANT, NON-REUSABLE PROBLEM SUBROUTINE         *\n*                                                                     *\n*  AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                   *\n*          TRAILER TRAIN COMPANY                                      *\n*          300 SOUTH WACKER DRIVE                                     *\n*          CHICAGO, ILLINOIS                                          *\n*          (312) 786-1200                                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     PERFORM STAND ENTRY LINKAGE                               ---*\n*---                                                               ---*\nDIRIO    CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'DIRIO'    CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS\n         BAL   R2,92(,R15)         'BAL' AROUND\n         USING *,R13               BASE REGISTER DEFINITION AND\n         DS    18F                 NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW S.A.\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACK POINTERS\n         LR    R13,R2              LOAD PGM BASE REGISTER\n         LM    R2,R4,0(R1)         LOAD THE DDNAME & MEMBER POINTERS\n         CLC   DDN,0(R2)           SAME AS LAST TIME ??\n         BE    NOCLOSE             YES---\n         TM    DIR+48,X'10'        IS DIRECTORY OPEN ??\n         BZ    JUSTOPEN            NO, SO JUST OPEN IT\n         CLOSE DIR                 CLOSE THE DIRECTORY DCB\n         FREEPOOL DIR              AND RELEASE ITS BUFFER POOL\nJUSTOPEN DS    0H\n         MVC   DDN,0(R2)           COPY DDNAME TO SAVE AREA\n         MVC   DIR+40(8),0(R2)     AND COPY DDNAME TO DCB\n         XC    CURS,CURS           ZERO OUT THE SCAN CURSOR\n         OPEN  (DIR,INPUT)         OPEN THE DIRECTORY FOR INPUT\nNOCLOSE  DS    0H\n         NC    CURS,CURS           IS SCAN CURSOR ZERO ??\n         BNE   DBLK                NO; JUST CONTINUE DEBLOCKING\nDIRIN    DS    0H\n         GET   DIR,BLOCK           YES; READ IN A DIRECTORY BLOCK\n         LH    R9,BLOCK            LOAD BYTES-USED COUNT\n         LA    R8,BLOCK(R9)        POINT JUST PAST END\n         BCTR  R8,R0               DECREMENT BY ONE\n         ST    R8,END              STORE BLOCK-END POINTER\n         LA    R9,BLOCK+2          POINT TO FIRST MEMBER NAME\n         ST    R9,CURS             STORE A NEW CURSOR VALUE\nDBLK     DS    0H\n         L     R9,CURS             LOAD DEBLOCKING CURSOR VALUE\n         CLC   0(8,R9),FENCE       END-OF-DIRECTORY MARKER ??\n         BE    DIREOD              YES; INDICATE END-OF-FILE\n         MVC   0(8,R3),0(R9)       RETURN THIS MEMBER NAME\n         MVC   0(4,R4),8(R9)       RETURN TTRC TO CALLER\n         NI    3(R4),X'80'         LEAVE ONLY ALIAS BIT\n         LA    R4,0                CLEAR A WORK REGISTER\n         IC    R4,11(,R9)          INSERT 'L' OF TTRL FIELD\n         N     R4,=A(X'1F')        CLOBBER ALIAS/NOTELIST BITS\n         SLL   R4,1                MULTIPLY BY TWO\n         LA    R9,12(R4,R9)        POINT TO NEXT DIRECTORY ENTRY\n         ST    R9,CURS             STORE NEW DEBLOCKING CURSOR\n         C     R9,END              PAST END OF DIRECTORY BLOCK ??\n         BL    RET0                NOPE ---\n         GET   DIR,BLOCK           YES; READ IN ANOTHER BLOCK\n         LH    R8,BLOCK            LOAD BYTES-USER COUNT\n         LA    R8,BLOCK(R8)        POINT JUST PAST LAST BYTE\n         BCTR  R8,R0               DECREMENT BY ONE\n         ST    R8,END              AND STORE NEW END POINTER\n         LA    R9,BLOCK+2          POINT TO FIRST MEMBER NAME\n         ST    R9,CURS             STORE NEW DEBLOCKING CURSOR\nRET0     DS    0H\n         LA    R15,0               SET RETURN CODE ZERO\nRET      DS    0H\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN TO CALLER\nRET4     DS    0H\n         LA    R15,4               SET RETURN CODE 4\n         B     RET                 AND RETURN TO CALLER\nDIREOD   DS    0H\n         CLOSE DIR                 CLOSE THE DIRECTORY\n         XC    CURS,CURS           NULLIFY THE CURSOR VALUE\n         XC    0(8,R3),0(R3)       NULLIFY THE RETURN MEMBER NAME\n         B     RET4                RETURN, CODE = 4\nDDN      DC    CL8' '              SUPPLIED/CURRENT DDNAME\nFENCE    DC    XL8'FFFFFFFFFFFFFFFF' SPECIAL END-OF-DIRECTORY NAME\nCURS     DC    A(0)                SCAN CURSOR\nEND      DS    A                   END OF USEFUL DATA\nBLOCK    DS    256X'00'            DIRECTORY BLOCK INPUT AREA\nDIR      DCB   DSORG=PS,                                               X\n               DDNAME=XXXXXXXX,                                        X\n               RECFM=FB,                                               X\n               LRECL=256,                                              X\n               BLKSIZE=256,                                            X\n               MACRF=GM,                                               X\n               EODAD=DIREOD\n         END\nTIOT     TITLE 'GLOBAL PDS UPDATE PROGRAM --- TIOT DDNAME EXTRACT'\n***********************************************************************\n*                                                                     *\n*  TITLE: TIOT                                                        *\n*                                                                     *\n*   FUNCTION: EXTRACT AND RETURN THE DDNAMES FROM THE TASK I/O TABLE, *\n*             ONE DDNAME PER CALL.                                    *\n*                                                                     *\n*   PARAMETERS: EITHER THE ADDRESS TO WHICH THE DDNAME IS TO BE       *\n*               COPIED, OR ZERO, SIGNALLING THAT THE TIOT SCAN IS     *\n*               TO RESTART AT THE BEGINNING OF THE TIOT.              *\n*                                                                     *\n*   RETURN CODES: 0 ==> SUCCESSFUL COMPLETION. RESET IS COMPLETE OR   *\n*                       A DDNAME HAS BEEN COPIED.                     *\n*                 4 ==> TIOT IS EXHAUSTED. ALL DDNAMES HAVE BEEN      *\n*                       EXTRACTED.                                    *\n*                                                                     *\n*   ATTRIBUTES: NON-REENTRANT, NON-REUSABLE, PROBLEM TASK             *\n*                                                                     *\n*   AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                  *\n*           TRAILER TRAIN COMPANY                                     *\n*           300 SOUTH WACKER DRIVE,                                   *\n*           CHICAGO, ILLINOIS                                         *\n*           (312) 786-1200                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     ENTRY LINKAGE GOODIES: BASE IS R13                        ---*\n*---                                                               ---*\nTIOT     CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'TIOT'     CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS\n         BAL   R2,92(,R15)         'BAL' AROUND\n         USING *,R13               BASE REGISTER DEFINITION AND\n         DS    18F                 NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW S.A.\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACK POINTERS\n         LR    R13,R2              LOAD PGM BASE REGISTER\n*---                                                               ---*\n*---     LOCATE PARM POINTER AND CHECK FOR RESET                   ---*\n*---                                                               ---*\n         L     R3,0(,R1)           LOAD PARM ADDRESS\n         LTR   R3,R3               RESET CALL ??\n         BNZ   NORESET             NOPE ---\n         XC    TIOTPTR,TIOTPTR     YES; CLOBBER TIOT ADDRESS\n         LA    R15,0               SET RETURN CODE ZERO\n         B     RETURN              AND RETURN TO CALLER\n*---                                                               ---*\n*---     LOCATE TIOT, SKIP PAST JOB/STEP/PROCSTEP NAMES, RETURN A  ---*\n*---     DDNAME AND SAVE THE SCAN ADDRESS                          ---*\n*---                                                               ---*\nNORESET  DS    0H\n         NC    TIOTPTR,TIOTPTR     IS TIOT POINTER NULL ??\n         BNZ   NOEXTRCT            NOPE --- SKIP THE 'EXTRACT'\n         EXTRACT TIOTPTR,FIELDS=TIOT  FETCH THE TIOT ADDRESS\n         L     R2,TIOTPTR          LOAD TIOT ADDRESS\n         LA    R2,24(,R2)          SKIP JOB/STEP NAMES\n         ST    R2,TIOTPTR          AND STORE UPDATED ADDRESS\n         MVC   0(8,R3),4(R2)       COPY OUT THE DDNAME\n         LA    R15,0               SET RETURN CODE ZERO\n         B     RETURN              AND RETURN TO CALLER\n*---                                                               ---*\n*---     ALREADY HAVE TIOT ADDRESS; JUST FETCH THE NEXT DDNAME     ---*\n*---                                                               ---*\nNOEXTRCT DS    0H\n         L     R2,TIOTPTR          LOAD TIOT ADDRESS\n         SR    R4,R4               CLEAR A WORK REGISTER\n         IC    R4,0(,R2)           INSERT TIOE LENGTH\n         LTR   R4,R4               ZERO ??\n         BZ    RET4                YES; ALL DONE WITH TIOT\n         LA    R2,0(R4,R2)         BUMP TO NEXT TIOE\n         MVC   0(8,R3),4(R2)       COPY DDNAME OVER\n         ST    R2,TIOTPTR          AND SAVE UPDATED POINTER\n         LA    R15,0               SET ZERO RETURN CODE\n*---                                                               ---*\n*---     STANDARD RETURN LINKAGE. R15 ALREADY HAS RETURN CODE      ---*\n*---                                                               ---*\nRETURN   DS    0H\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN TO CALLER\n*---                                                               ---*\n*---     SET RETURN CODE = 4                                       ---*\n*---                                                               ---*\nRET4     DS    0H\n         LA    R15,4               SET RETURN CODE 4\n         B     RETURN              AND RETURN TO CALLER\n*---                                                               ---*\n*---  MY ONE AND ONLY CLAIM TO NON-REENTRANCY AND NON-REUSABILITY  ---*\n*---                                                               ---*\nTIOTPTR  DC    A(0)                TIOT SCAN POINTER\n         LTORG ,                   DISPLAY THE LITERAL POOL\n         END\nSCANHELP CSECT\n         DC    A(FIRST,133,LAST)\nFIRST    DC    CL133'1TITLE:          PDSSCAN'\n         DC    CL133' '\n         DC    CL133' FUNCTION:       PROVIDE A FACILITY FOR GLOBALLY SX\n               CANNING ALL MEMBERS OF A PARTITIONED DATA SET.'\n         DC    CL133' '\n         DC    CL133' INPUT:          DDNAME=SYSIN A SERIES OF CONTROL X\n               STATEMENTS CONTAINING THE STRINGS TO BE LOCATED. EACH STX\n               RING IS A'\n         DC    CL133'                 SINGLE CONTROL STATEMENT AND STARX\n               TS AT THE FIRST NONBLANK CHARACTER AND ENDS AT THE FIRSTX\n                FOLLOWING'\n         DC    CL133'                 BLANK.  ANY SPECIAL CHARACTERS ARX\n               E RETAINED UNCHANGED.  THESE ARE EXAMPLES OF VALID SEARCX\n               H STRINGS:'\n         DC    CL133' '\n         DC    CL133'                 PROCLIB'\n         DC    CL133'                 DSNAME=CH.'\n         DC    CL133'                 DCB=BLKSIZE='\n         DC    CL133'                 PARM='''\n         DC    CL133'                 DISP=(OLD,SHR)'\n         DC    CL133' '\n         DC    CL133' OUTPUT:         DDNAME=SYSPRINT, QSAM SUPPORTED DX\n               EVICE, RECFM=FBA, LRECL=133. BLKSIZE MAY BE SUPPLIED OR X\n               ALLOWED TO'\n         DC    CL133'                 DEFAULT TO 9044.'\n         DC    CL133' '\n         DC    CL133' PDS DDNAMES:    DDNAME MUST START WITH THE CHARACX\n               TER \"@\".  AGAIN, AS MANY AS DESIRED MAY BE SUPPLIED.  THX\n               ESE ARE THE'\n         DC    CL133'                 DDNAMES OF THE DATASET(S) TO BE SX\n               CANNED.'\n         DC    CL133' '\n         DC    CL133' OUTPUT LISTING: THE FIRST PAGE CONTAINS A LISTINGX\n                OF THE STRINGS TO BE LOCATED. THE SECOND PAGE CONTAINS X\n               A LISTING OF'\n         DC    CL133'                 THE DDNAMES AND DATASET NAMES TO X\n               BE UPDATED. THE THIRD PAGE IS THE BEGINNING OF THE SCAN X\n               LISTING. EACH'\n         DC    CL133'                 RECORD CONTAINING THE STRING TO BX\n               E LOCATED IS DISPLAYED. THE FIRST ITEM ON THE LINE IS THX\n               E DDNAME,'\n         DC    CL133'                 FOLLOWED BY THE MEMBER NAME AND TX\n               HE SELECTED RECORD.'\n         DC    CL133' '\n         DC    CL133' EXAMPLE:        HERE IS AN EXAMPLE OF THE JCL ANDX\n                CONTROL STATEMENTS NECESSARY TO LOCATE TWO PARAMETERS IX\n               N FIVE'\n         DC    CL133'                 PROCEDURE LIBRARIES.'\n         DC    CL133' '\n         DC    CL133'                 // YOU SUPPLY A JOB CARD'\n         DC    CL133'                 //SCAN     EXEC  PGM=PDSSCAN,PARMX\n               =ANYTHING'\n         DC    CL133'                 //SYSPRINT DD    SYSOUT=C'\n         DC    CL133'                 //@PDS1    DD    DSN=CH.BK.XX.TD.X\n               PROCLIB,DISP=SHR'\n         DC    CL133'                 //@PDS2    DD    DSN=CH.CL.XX.TD.X\n               PROCLIB,DISP=SHR'\n         DC    CL133'                 //@PDS3    DD    DSN=CH.AP.XX.PD.X\n               PROCLIB,DISP=SHR'\n         DC    CL133'                 //@PDS4    DD    DSN=CH.BK.XX.TD.X\n               PROCLIB,DISP=SHR'\n         DC    CL133'                 //@PDS5    DD    DSN=CH.CL.XX.TD.X\n               PROCLIB,DISP=SHR'\n         DC    CL133'                 //SYSIN    DD    *'\n         DC    CL133'                     DCB=BLISIZE=13030'\n         DC    CL133'                     DCB=BLKSIZE=3120'\n         DC    CL133' '\n         DC    CL133' NOW THAT YOU HAVE THESE INSTRUCTIONS AT YOUR DISPX\n               OSAL, YOU CAN DELETE THEM FROM THE OUTPUT OF ANY FURTHERX\n                PDSSCAN RUNS'\nLAST     DC    CL133' BY SIMPLY DELETING THE PARM INFORMATION FROM THE X\n               ''EXEC'' JCL STATEMENT.'\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSUPDTE": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x04h\\x04h\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 1128, "newlines": 1128, "modlines": 0, "user": "CHSY227"}, "text": "//CHSYASM  JOB   (0227,CHSY),'FOCHTMAN - SYSTEMS',\n//         CLASS=S,NOTIFY=CHSY227,MSGCLASS=X\n//ASM      EXEC  PGM=ASMA90,\n//         PARM='NORLD,BATCH,NODECK,OBJECT'\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DSN=SYS1.MACLIB,DISP=SHR\n//         DD    DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD    UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSUT2   DD    UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSUT3   DD    UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSLIN DD      UNIT=VIO,SPACE=(TRK,(3,1)),DISP=(,PASS),\n//         RECFM=FB,LRECL=80,BLKSIZE=0\n//SYSIN    DD    *\nPDSUPDTE TITLE 'GLOBAL PDS UPDATE PROGRAM --- MAIN MODULE'\n***********************************************************************\n*                                                                     *\n*  TITLE: PDSUPDTE                                                    *\n*                                                                     *\n*  FUNCTION: PROVIDE A FACILITY FOR GLOBALLY UPDATING ALL MEMBERS     *\n*            OF A PARTITIONED DATA SET.                               *\n*                                                                     *\n*  INPUT: DDNAME=SYSIN A SERIES OF CONTROL STATEMENTS CONTAINING      *\n*         THE STRINGS TO BE REPLACED AND THE REPLACEMENT STRINGS      *\n*         IN THE FORMAT  OLDSTRING:NEWSTRING:                         *\n*         ALL CONTROL STATEMENTS MUST START IN COLUMN 1 AND MAY NOT   *\n*         BE CONTINUED. AS MANY CONTROL STATEMENTS AS DESIRED MAY BE  *\n*         SUPPLIED.                                                   *\n*                                                                     *\n*  OUTPUT: DDNAME=SYSPRINT, QSAM SUPPORTED DEVICE, RECFM=FBA,         *\n*          LRECL=133. BLKSIZE MAY BE SUPPLIED OR ALLOWED TO DEFAULT   *\n*          TO 3059.                                                   *\n*                                                                     *\n*  PDS DDNAMES: DDNAME MUST START WITH THE CHARACTER \"@\". AGAIN, AS   *\n*               MANY AS DESIRED MAY BE SUPPLIED.                      *\n*                                                                     *\n*  OUTPUT LISTING: THE FIRST PAGE CONTAINS A LISTING OF THE STRING    *\n*                  REPLACEMENTS TO BE PERFORMED. IF YOU SUPPLIED A    *\n*                  STRING REPLACEMENT AND IT DOES NOT APPEAR HERE,    *\n*                  CHECK THE APPROPRIATE CONTROL CARD FOR ERRORS.     *\n*                  THE SECOND PAGE CONTAINS A LISTING OF THE DDNAMES  *\n*                  AND DATASET NAMES TO BE UPDATED.                   *\n*                  THE THIRD PAGE IS THE BEGINNING OF THE REPLACE     *\n*                  LISTING. EACH MODIFIED RECORD IS DISPLAYED,        *\n*                  BEFORE ANY REPLACEMENTS AND AFTER ALL REPLACE-     *\n*                  MENTS. THE FIRST ITEM ON THE LINE IS THE DDNAME,   *\n*                  FOLLOWED BY THE MEMBER NAME AND THE UNMODIFIED     *\n*                  RECORD. THE SECOND LINE CONTAINS ONLY THE MODIFIED *\n*                  RECORD.                                            *\n*                                                                     *\n*  PARMS: A PARM OF \"CHECK\" WILL INHIBIT PDS REWRITING, SO THAT THE   *\n*         RESULTS OF A RUN MAY BE EXAMINED WITHOUT ACTUALLY ALTERING  *\n*         THE PDS. UNLESS A PARM OF \"ALTER\" IS SUPPLIED, THIS IS THE  *\n*         DEFAULT CONDITION.                                          *\n*                                                                     *\n*  ATTRIBUTES: NON-REENTRANT, NON-REUSABLE, PROBLEM STATE             *\n*                                                                     *\n*  EXTERNAL ROUTINES: DIRIO, BPAMIO, TIOT, CTLPARSE                   *\n*                                                                     *\n*  AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                   *\n*          TRAILER TRAIN COMPANY                                      *\n*          300 SOUTH WACKER DRIVE,                                    *\n*          CHICAGO, ILLINOIS                                          *\n*          (312) 786-1200                                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     STANDARD NON-REENTRANT ENTRY LINKAGE                      ---*\n*---                                                               ---*\nPDSUPDTE CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'PDSUPDTE' CSECT EYE-POPPER\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         BAL   R2,92(,R15)         'BAL' AROUND NEW SAVE AREA\n         USING *,R13               BASE REGISTER DEFINITION\n         DS    18F                 AND NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACKWARD POINTERS\n         LR    R13,R2              LOAD PGM BASE REGISTER\n*---                                                               ---*\n*---     OPEN THE SYSPRINT FILE AND CHECK THE ENTRY PARM. IF PARM  ---*\n*---     IS NOT 'ALTER', INHIBIT REWRITE.                          ---*\n*---                                                               ---*\n         OPEN  (SYSPRINT,OUTPUT)   OPEN THE LISTING FILE\n         L     R1,4(,R13)          LOAD BACK POINTER\n         L     R1,24(,R1)          RESTORE REGISTER 1\n         L     R1,0(,R1)           LOAD PARM STRING POINTER\n         CLC   0(2,R1),=H'5'       PARM STRING 'CHECK' ??\n         BNE   CHECK               NOPE\n         CLC   2(5,R1),=C'ALTER'   HUH ??\n         BNE   CHECK               NOPE ---\n         OI    FLAG1,REWRITE       ALLOW WRITES\nCHECK    DS    0H\n*---                                                               ---*\n*---     CALL CTLPARSE TO READ AND PROCESS CONTROL CARDS           ---*\n*---                                                               ---*\n         CALL  CTLPARSE            CALL CONTROL-STMT PARSER\n         ST    R15,CTLLINK         AND STORE ADDRESS OF CTL-LIST\n         LTR   R4,R15              NULL POINTER ??\n         BZ    ENDJOB              YES; NOTHING TO CHANGE OR LIST\n*---                                                               ---*\n*---     LIST THE INPUT CONTROL INFORMATION                        ---*\n*---                                                               ---*\n         MVC   TITLE,TITLE1        DEFINE THE FIRST TITLE LINE\n         MVI   FROM,C'1'\nDSPL1    DS    0H\n         SR    R5,R5               CLEAR A WORK REGISTER\n         LA    R6,STRING1          POINT OUT THE FIRST STRING\n         IC    R5,4(,R4)           INSERT LENGTH-1\n         LA    R10,5(,R4)          POINT TO ACTUAL STRING\n         EX    R5,MVC1             MOVE STRING TO LINE\n         MVC   LINE,FROM\n         BAL   R6,PRINTER          AND DISPLAY 'FROM' STRING\n         MVI   FROM,C'0'\n         MVC   STRING1,STRING2     CLEAR THAT AREA\n         LA    R6,STRING2          POINT OUT 'TO' STRING\n         LA    R10,1(R5,R10)       POINT TO LENGTH FIELD\n         IC    R5,0(,R10)          INSERT 'TO' LENGTH\n         LA    R10,1(,R10)         POINT TO ACTUAL STRING\n         EX    R5,MVC1             MOVE TO PRINT AREA\n         MVC   LINE,TO\n         BAL   R6,PRINTER\n         MVC   STRING2,STRING1     RE-BLANK THAT AREA\n         L     R4,0(,R4)           LOAD NEXT  LINK POINTER\n         LTR   R4,R4               NULL POINTER ??\n         BNZ   DSPL1               NOPE ---\n*---                                                               ---*\n*---     LOCATE AND DISPLAY THE DDNAMES AND DSNAMES TO UPDATE      ---*\n*---                                                               ---*\n         MVC   TITLE,TITLE2\n         MVI   DDXLINE,C'1'\nTIOTLP1  DS    0H\n         CALL  TIOT,DDNAME         FETCH A DDNAME\n         LTR   R15,R15             NON-ZERO RETURN CODE ??\n         BNZ   TIOTLP2             YES; ALL DONE\n         CLI   DDNAME,C'@'         DOES DDNAME START WITH '@' ??\n         BNE   TIOTLP1             NOPE; IGNORE IT\n         MVC   DDCB+40(8),DDNAME   COPY DDNAME INTO DCB\n         RDJFCB DDCB               READ IN THE JFCB\n         MVC   DSNAME(44),JFCB     COPY DSNAME TO OUTPUT LINE\n         MVC   LINE,DDXLINE\n         BAL   R6,PRINTER          OUTPUT DDNAME, DSNAME\n         MVI   DDXLINE,C'0'\n         B     TIOTLP1             AND CONTINUE TIOT SCAN\nTIOTLP2  DS    0H\n*---                                                               ---*\n*---     RESET THE TIOT SCANNER TO THE BEGINNING AGAIN             ---*\n*---                                                               ---*\n         CALL  TIOT,ZERO           RESET TIOT SCANNER\n*---                                                               ---*\n*---     OUTPUT THE REPLACEMENT TITLES AND START MAIN LOOP         ---*\n*---                                                               ---*\n         MVC   TITLE,TITLE3\n         MVI   OLDLINE,C'1'\nPDSLP0   DS    0H\n         CALL  BPAMIO,(DDNAME,,CLOSE) CLOSE THE PDS\n         CALL  TIOT,DDNAME         FETCH A DDNAME\n         LTR   R15,R15             TIOT SCAN DONE ??\n         BNZ   ALLDONE             YES; I'M ALL THROUGH\n         CLI   DDNAME,C'@'         SPECIAL DDNAME ??\n         BNE   PDSLP0              NOPE; TRY AGAIN\n         MVC   DDN,DDNAME          COPY DDNAME TO OUTPUT LINE\n*---                                                               ---*\n*---     OPEN THE PDS FOR UPDAT I/O  (READ I/O IF NO ALTER)        ---*\n*---                                                               ---*\n         TM    FLAG1,REWRITE        IS ALTER FLAG SET ??\n         BZ    PDSINPUT             NOPE; JUST OPEN FOR INPUT\n         CALL  BPAMIO,(DDNAME,,OPEN) OPEN THE PDS\n         B     PDSLP1               GO PROCESS THE PDS\nPDSINPUT DS    0H\n         CALL  BPAMIO,(DDNAME,,OPENIN) OPEN THE PDS\n*---                                                               ---*\n*---     READ A MEMBER NAME FROM THE DIRECTORY                     ---*\n*---                                                               ---*\nPDSLP1   DS    0H\n         CALL  DIRIO,(DDNAME,MEMBER,TTRC)  READ A MEMBER NAME\n         LTR   R15,R15             IS DIRECTORY DONE ??\n         BNZ   PDSLP0              YES; TRY FOR ANOTHER DD CARD\n*---                                                               ---*\n*---     'POINT' TO THE MEMBER                                     ---*\n*---                                                               ---*\nPDSLP2   DS    0H\n         CALL  BPAMIO,(TTRC,,FIND)\n         LTR   R15,R15             MEMBER FOUND ??\n         BNZ   PDSLP1              NOPE; SKIP IT\n*---                                                               ---*\n*---     AND START READING THE MEMBER                              ---*\n*---                                                               ---*\nPDSLP3   DS    0H\n         CALL  BPAMIO,(LREC,,READ) READ A LOGICAL RECORD\n         LTR   R15,R15             END-OF-FILE ON THIS MEMBER ??\n         BNZ   PDSLP1              YES; SKIP TO NEXT MEMBER\n*\n* SCAN AND CHANGE CODE GOES HERE\n*\nDOSCAN   DS    0H\n         MVC   NREC,LREC           COPY ACTUAL RECORD\n         LA    R4,NREC             POINT TO SCAN FIELD START\nSCAN1    DS    0H\n         CLI   0(R4),C' ' BLANK IN THIS POSITION ??\n         BNE   SCAN1A              NOPE ---\n         LA    R3,NREC+70          POINT TO LAST USEFUL BYTE\n         SR    R3,R4               COMPUTE LENGTH TO SCAN\n         BNP   SCANEND             NOTHING LEFT TO SCAN ---\n         EX    R3,BLKSCAN          SCAN FOR A NON-BLANK CHARACTER\n         BC    8,SCANEND           NONE FOUND; ALL DONE\n         LA    R4,0(,R1)           COPY NON-BLANK ADDRESS\nSCAN1A   DS    0H\n         LA    R3,NREC+70          POINT TO LAST POSSIBLE COLUMN\n         SR    R3,R4               COMPUTE THE LENGTH TO SCAN\n         BNP   SCANEND             COMPUTE THE LENGTH TO SCAN\n         EX    R3,TRT1             AND SCAN FOR A DELIMITER\n         BC    8,SCANEND           NO DELIMITER; ALL DONE HERE\n         SR    R1,R4               COMPUTE LENGTH OF FOUND STRING\n         BNZ   CONTSCAN            NONZERO LENGTH; CHECK STRING\n         LA    R4,1(,R4)           BUMP TO NEXT CHAR\n         B     SCAN1               AND TRY AGAIN\nCONTSCAN DS    0H\n         BCTR  R1,R0               DECREMENT FOR COMPARE\n         N     R2,=A(255)          CLOBBER JUNK IN R2\n         BAL   R9,CHKSUB           GO CHECK FOR A SUBSTITUTION\n         B     SCAN2               NO SUBSTITUTION; CONTINUE SCAN\n         B     SCAN1               ---\nSCAN2    DS    0H\n         LA    R4,2(R1,R4)         BUMP PAST THIS DELIMITER\n         B     SCAN1               AND CONTINUE SCAN\nSCANEND  DS    0H\n         TM    FLAG1,CHANGE        DID THE RECORD CHANGE ??\n         BZ    PDSLP3              NOPE ---\n         CLC   LREC+70(2),=C'  '   BLANKS IN 71/72 ??\n         BE    PROLD               YES\n         MVC   LREC+81(13),=C'*** CHECK ***'\nPROLD    DS    0H\n         MVC   LINE,OLDLINE\n         MVC   LREC+81(13),=CL13' '\n         BAL   R6,PRINTER\n         MVI   OLDLINE,C'0'\n         CLC   NREC+70(2),=C'  '   BLANKS IN 71/72 ??\n         BE    PRNEW               YES\n         MVC   NREC+81(13),=C'*** CHECK ***'\nPRNEW    DS    0H\n         MVC   LINE,NEWLINE\n         MVC   NREC+81(13),=CL13' '\n         BAL   R6,PRINTER\n         TM    FLAG1,REWRITE       IS REWRITING ALLOWED ??\n         BZ    NREWRITE            NOPE ---\n         CALL  BPAMIO,(NREC,,WRITE) YES; REWRITE THE RECORD\nNREWRITE DS    0H\n         NI    FLAG1,255-CHANGE    TURN OFF THE CHANGE FLAG\n         B     PDSLP3\nENDJOB   DS    0H\nALLDONE  DS    0H\n         L     R13,4(,R13)         LOAD SAVE AREA BACK POINTER\n         LM    R14,R12,12(R13)     RESTORE REGS\n         LA    R15,0               SET RETURN CODE ZERO\n         MVI   12(R13),255         SET DONE FLAG\n         BR    R14\n         EJECT\nCHKSUB   DS    0H\n         L     R8,CTLLINK          LOAD CHAIN LINK POINTER\nCHK0     DS    0H\n         LTR   R8,R8               LINK FIELD ZERO ??\n         BZR   R9                  YES; NOTHING LEFT TO CHECK\n         CLM   R1,B'0001',4(R8)    LENGTH MATCH ??\n         BNE   CHK1                NOPE; SKIP THIS LINK\n         EX    R1,CHKCLC           ACTUAL STRING MATCH ??\n         BNE   CHK1                NOPE ---\n         LA    R5,NREC             POINT TO START OF RECORD\n         LR    R6,R4               COPY SCAN CURSOR\n         SR    R6,R5               COMPUTE A LENGTH\n         BCTR  R6,R0\n         EX    R6,MVSTR1           MOVE PRE-CURSOR STUFF\n         LA    R11,WKSTR+1(R6)     POINT TO NEW-STRING LOCATION\n         LA    R3,4(,R8)           POINT TO OLD STRING\n         IC    R2,0(,R3)           INSERT OLD LENGTH\n         LA    R3,2(R2,R3)         POINT TO NEW STRING\n         LA    R4,1(R1,R4)         POINT TO REST OF GOOD STUFF\n         IC    R1,0(,R3)           INSERT NEW STRING LENGTH\n         EX    R1,MVSTR2           MOVE IN REPLACEMENT STRING\n         LA    R11,1(R1,R11)       POINT TO REMAINDER STUFF\n         LA    R1,NREC+70          POINT TO END OF GOOD STUFF\n         SR    R1,R4               COMPUTE LENGTH\n         BNP   CHKEND              ALL DONE\n         BCTR  R1,R0               DECREMENT BY ONE\n         EX    R1,MVSTR3           MOVE IT OVER\n         MVC   NREC(71),WKSTR      COPY MODIFIED STRING BACK\nCHKEND   DS    0H\n         OI    FLAG1,CHANGE        SHOW THAT A CHANGE OCCURED\n         C     R4,=A(NREC+72)      PAST END YET ??\n         BH    SCANEND             YES; SCAN IS DONE\n         B     4(,R9)              RETURN4\nCHK1     DS    0H\n         L     R8,0(,R8)           LOAD NEXT LINK POINTER\n         B     CHK0\n         EJECT\nPRINTER  UPO   SYSPRINT,LINE,(TITLE)\n         BR    R6\nLINE     DC    CL133' '\nTITLE    DC    CL133' '\n         EJECT\n*---                                                               ---*\n*---     MISC. CONSTANTS, DATA AREAS AND 'EX'ECUTED INSTRUCTIONS   ---*\n*---                                                               ---*\nFLAG1    DC    X'00'               VARIOUS FLAG BITS\nREWRITE  EQU   B'10000000'         ALLOW PDS UPDATE WRITES\nBLKDLM   EQU   B'01000000'         DELIMITER WAS A BLANK (NOT USED)\nCHANGE   EQU   B'00100000'         ACTUAL LINE HAS CHANGED\nZERO     EQU   0                   FOR GENERATING ZERO ADCONS IN CALLS\nTTRC     DS    F                   TTRC OF CURRENT MEMBER\n*---                                                               ---*\n*---     KEYS FOR VARIOUS BPAMIO CALLS                             ---*\n*---                                                               ---*\nFIND     DC    F'0'                FIND A MEMBER\nREAD     DC    F'4'                RETURN A LOGICAL RECORD\nWRITE    DC    F'8'                REPLACE A LOGICAL RECORD\nCLOSE    DC    F'12'               CLOSE A PDS\nOPEN     DC    F'16'               OPEN A PDS\nOPENIN   DC    F'20'               OPEN A PDS\n*---                                                               ---*\n*---     DC'S FOR DISPLAY OF OLD AND NEW LOGICAL RECORDS           ---*\n*---                                                               ---*\nOLDLINE  DC    CL133'0'            FOR PRE-CHANGE RECORD DISPLAY\n         ORG   OLDLINE+3\nDDN      DS    CL8                 CURRENT MEMBER NAME\n         ORG   OLDLINE+13\nMEMBER   DS    CL80                BPAMIO INPUT RECORD AREA\n         ORG   OLDLINE+24          BPAMIO INPUT RECORD AREA\nLREC     DS    CL80                BPAMIO INPUT RECORD AREA\n         ORG\nNEWLINE  DC    CL133' '\n         ORG   NEWLINE+24\nNREC     DS    CL80                BPAMIO OUTPUT RECORD AREA\n         ORG\n*---                                                               ---*\n*---     VARIOUS TITLE LINES                                       ---*\n*---                                                               ---*\nTITLE1   DC    CL133'1 THE FOLLOWING LIST DESCRIBES THE ACCEPTED INPUT X\n               PARAMETERS:'\nTITLE2   DC    CL133'1 THE FOLLOWING LIST DESCRIBES THE DDNAMES AND PDSX\n               ''S TO BE EXAMINED/UPDATED:'\nTITLE3   DC    CL133'1     SUMMARY OF MEMBER NAMES AND CHANGES'\n*---                                                               ---*\n*---     DC'S FOR DISPLAYING THE DDNAMES AND DSNAMES               ---*\n*---                                                               ---*\nDDXLINE  DC    CL133'0'\n         ORG   DDXLINE+10\nDDNAME   DS    CL8\n         DS    CL5\nDSNAME   DS    CL44\n         ORG\n*---                                                               ---*\n*---     DC'S FOR DISPLAYING THE ACCEPTED CHANGE CONTROLS          ---*\n*---                                                               ---*\nFROM     DC    CL17'0 OLD STRING ==> '\nSTRING1  DC    CL116' '\nTO       DC    CL17'  NEW STRING ==> '\nSTRING2  DC    CL116' '\n*---                                                               ---*\n*---     VARIOUS AND SUNDRY 'EX'ECUTED INSTRUCTIONS                ---*\n*---                                                               ---*\nMVC1     MVC   0(0,R6),0(R10)      COPY STRINGS TO PRINT LINES\nMVSTR1   MVC   WKSTR(0),0(R5)\nMVSTR2   MVC   0(0,R11),1(R3)\nMVSTR3   MVC   0(0,R11),0(R4)\nCHKCLC   CLC   0(0,R4),5(R8)\nTRT1     TRT   0(0,R4),TRTAB\nBLKSCAN  TRT   0(0,R4),TRBLANK\n*---                                                               ---*\n*---     TRANSLATE-AND-TEST TABLES USED FOR ALTERATION SCAN        ---*\n*---                                                               ---*\nTRBLANK  DC    256X'00'\n         ORG   TRBLANK+C' '\n         DC    X'01'\n         ORG\nTRTAB    DC    256X'00'            SCANNING TRT TABLE\n         ORG   TRTAB+C'='\n         DC    X'01'\n         ORG   TRTAB+C''''\n         DC    X'01'\n         ORG   TRTAB+C','\n         DC    X'01'\n         ORG   TRTAB+C'('\n         DC    X'01'\n         ORG   TRTAB+C')'\n         DC    X'01'\n         ORG   TRTAB+C'/'\n         DC    X'01'\n         ORG   TRTAB+C' '\n         DC    X'01'\n         ORG\n*---                                                               ---*\n*---     ADDRESS OF LIST OF ACCEPTED ALTER CONTROLS                ---*\n*---                                                               ---*\nCTLLINK  DC    A(0)\n*---                                                               ---*\n*---     LISTING DATA CONTROL BLOCK (NOTE MISSING BLKSIZE)         ---*\n*---                                                               ---*\nSYSPRINT DCB   DSORG=PS,                                               X\n               DDNAME=SYSPRINT,                                        X\n               MACRF=PM,                                               X\n               RECFM=FBA,                                              X\n               LRECL=133,                                              X\n               EXLST=PRTEXIT\n*---                                                               ---*\n*---     SYSPRINT DCB COMPLETION EXIT. FILL IN MISSING BLKSIZE.    ---*\n*---                                                               ---*\nPRTEXIT  DS    0F\n         DC    X'85',AL3(PRTEXIT+4)\n         NC    62(2,R1),62(R1)     IS BLKSIZE STILL ZERO ??\n         BNZR  R14                 NOPE; RETURN TO O/C/E\n         MVC   62(2,R1),=H'3059'   DEFAULT BLKSIZE\n         BR    R14                 RETURN TO O/C/E\n*---                                                               ---*\n*---     DUMMY DCB, USED ONLY FOR READING IN JFCB'S                ---*\n*---                                                               ---*\nDDCB     DCB   DSORG=PS,DDNAME=XXXXXXXX,MACRF=E,EXLST=DDCBEXIT\n*---                                                               ---*\n*---     JFCB EXIT LIST FOR READING JFCB'S IN FOR DUMMY DCB        ---*\n*---                                                               ---*\nDDCBEXIT DS    0F\n         DC    X'87',AL3(JFCB)\nJFCB     DS    22D\n         LTORG ,\nWKSTR    DC    50CL7' '\n         END\nBPAMIO   TITLE 'PDSUPDTE GLOBAL PDS UPDATE PROGRAM --- BPAM I/O '\n***********************************************************************\n*                                                                     *\n*  TITLE: BPAMIO                                                      *\n*                                                                     *\n*  FUNCTION: CENTRALIZED FACILITY FOR UPDATE-MODE BPAM I/O            *\n*                                                                     *\n*  INPUT: A THREE-WORD PARAMETER LIST, THE THIRD WORD DESCRIBING      *\n*         THE FUNCTION TO BE PERFORMED. THE REMAINING TWO WORDS       *\n*         ARE DEPENDENT UPON THE THIRD WORD.                          *\n*                                                                     *\n*         WORD 3 = 0 (FIND REQUEST):                                  *\n*              WORD 1 => MEMBER TTRC, IN FORM ACQUIRED BY READING     *\n*                        THE DIRECTORY WITHOUT BLDL. (NO CONCAT-      *\n*                        ENATION NUMBER)                              *\n*              RETURNS: ACTUAL RETURN CODE FROM 'POINT' MACRO         *\n*                                                                     *\n*         WORD 3 = 4 (READ REQUEST)                                   *\n*              WORD 1 => LOCATION FOR OUTPUT LOGICAL RECORD           *\n*              RETURNS: 0 FOR SUCCESSFUL COMPLETION                   *\n*                       4 FOR END-OF-FILE ON MEMBER                   *\n*                       8 FOR UNOPENED DCB                            *\n*                                                                     *\n*         WORD 3 = 8 (WRITE REQUEST)                                  *\n*              WORD 1 => LOGICAL RECORD TO BE REWRITTEN               *\n*              NO RETURN CODES                                        *\n*                                                                     *\n*         WORD 3 = 12 (CLOSE REQUEST)                                 *\n*              WORDS 1 AND 2 NOT SIGNIFICANT                          *\n*                                                                     *\n*         WORD 3 = 16 (OPEN REQUEST)                                  *\n*              WORD 1 => 8 CHARACTER DDNAME, RIGH PADDED WITH         *\n*                        BLANKS AS NEEDED.                            *\n*              WORD 2 IGNORED.                                        *\n*                                                                     *\n*  MACROS: GETBUF, FREEBUF, FREEPOOL, READ, WRITE, POINT,CHECK,DCB,   *\n*          OPEN, CLOSE                                                *\n*                                                                     *\n*  ATTRIBUTES: NONREENTRANT, NONREUSABLE, PROBLEM PROGRAM SUBROUTINE  *\n*                                                                     *\n*  AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                   *\n*          TRAILER TRAIN COMPANY                                      *\n*          300 SOUTH WACKER DRIVE,                                    *\n*          CHICAGO, ILLINOIS                                          *\n*          (312) 786-1200                                             *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     PERFORM STANDARD ENTRY LINKAGE                            ---*\n*---                                                               ---*\nBPAMIO   CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'BPAMIO'   EYE-POPPER\n         STM   R14,R12,12(R13)     SAVE ENTRY REGS\n         BAL   R2,92(,R15)         'BAL' AROUND\n         USING *,R13               BASE REGISTER DEFINITION\n         DS    18F                 AND NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA\n         ST    R13,4(,R2)          STORE BACKWARD AND\n         ST    R2,8(,R13)          FORWARD POINTERS\n         LR    R13,R2              AND LOAD PGM BASE\n*---                                                               ---*\n*---     LOAD PARMS AND BRANCH TO APPROPRIATE SUBROUTINE           ---*\n*---                                                               ---*\n         LM    R2,R4,0(R1)         LOAD PARM POINTERS\n         L     R4,0(,R4)           LOAD FUNCTION IDENTIFIER\n         B     *+4(R4)             GO TO INDICATED CODE\n         B     FIND                FIND A MEMBER\n         B     READ                RETURN A LOGICAL RECORD\n         B     WRITE               REPLACE A LOGICAL RECORD\n         B     CLOSE               CLOSE A PDS\n         B     OPEN                OPEN A PDS FOR UPDAT\n         B     OPENIN              OPEN A PDS FOR INPUT\n*---                                                               ---*\n*---     FIND REQUEST                                              ---*\n*---           R2 ==> MEMBER TTRC                                  ---*\n*---           RETURNS 'POINT' RETURN CODE                         ---*\n*---                                                               ---*\nFIND     DS    0H\n         NI    REWRITE,255-EODAD   TURN OFF EODAD FLAG\n         POINT PDS,(2)             POINT TO PDS MEMBER\n         B     RET                 AND RETURN TO CALLER\n*---                                                               ---*\n*---     OPEN REQUEST                                              ---*\n*---           R2 ==> DDNAME                                       ---*\n*---           RETURNS: 0 = SUCCESSFUL OPEN                        ---*\n*---                    4 = DCB OPEN; NEEDS CLOSE CALL             ---*\n*---                                                               ---*\nOPEN     DS    0H\n         TM    PDS+48,X'10'        IS DCB OPEN ??\n         BNZ   RC4                 YES; REQUEST A CLOSE CALL\n         MVC   PDS+40(8),0(R2)     MOVE IN THE DDNAME\n         MVC   DDN,0(R2)           AND COPY TO SAVE FIELD\n         OPEN  (PDS,UPDAT)         OPEN THE PDS FOR UPDAT\n         GETBUF PDS,(5)            LOCATE THE BUFFER\n         ST    R5,BUFFER           AND SAVE ITS ADDRESS\n         XC    REWRITE,REWRITE     CLEAR UPDAT FLAG\n         B     RC0                 AND RETURN, CODE 0\n*---                                                               ---*\n*---     OPEN REQUEST                                              ---*\n*---           R2 ==> DDNAME                                       ---*\n*---           RETURNS: 0 = SUCCESSFUL OPEN                        ---*\n*---                    4 = DCB OPEN; NEEDS CLOSE CALL             ---*\n*---                                                               ---*\nOPENIN   DS    0H\n         TM    PDS+48,X'10'        IS DCB OPEN ??\n         BNZ   RC4                 YES; REQUEST A CLOSE CALL\n         MVC   PDS+40(8),0(R2)     MOVE IN THE DDNAME\n         MVC   DDN,0(R2)           AND COPY TO SAVE FIELD\n         OPEN  (PDS,INPUT)         OPEN THE PDS FOR INPUT\n         GETBUF PDS,(5)            LOCATE THE BUFFER\n         ST    R5,BUFFER           AND SAVE ITS ADDRESS\n         XC    REWRITE,REWRITE     CLEAR UPDAT FLAG\n         B     RC0                 AND RETURN, CODE 0\n*---                                                               ---*\n*---     CLOSE REQUEST. PARAMETERS IGNORED.                        ---*\n*---                                                               ---*\nCLOSE    DS    0H\n         TM    PDS+48,X'10'        IS DCB OPEN ??\n         BZ    RC0                 NOPE; NOTHING TO DO\n         L     R4,BUFFER           LOAD BUFFER ADDRESS\n         FREEBUF PDS,(4)           RELEASE THE BUFFER\n         CLOSE (PDS)               CLOSE THE DCB\n         FREEPOOL PDS              RELEASE THE BUFFER POOL\n         B     RC0                 AND RETURN, CODE = 0\n*---                                                               ---*\n*---     WRITE REQUEST.                                            ---*\n*---           R2 ==> LOGICAL RECORD TO BE REWRITTEN               ---*\n*---                                                               ---*\n*---     A WRITE REQUEST UPDATES THE RECORD IN THE IN-CORE         ---*\n*---     BLOCK AND SETS A FLAG. ANY ACTUAL I/O IS DONE BY THE      ---*\n*---     READ SUBROUTINE.                                          ---*\n*---                                                               ---*\nWRITE    DS    0H\n         L     R5,CURS             LOAD CURSOR ADDRESS\n         MVC   0(80,R5),0(R2)      MOVE RECORD INTO BLOCK\n         OI    REWRITE,NEEDED      SHOW A REWRITE NEEDED\n         B     RC0                 RETURN, CODE = 0\n*---                                                               ---*\n*---     READ REQUEST                                              ---*\n*---           R2 ==> LOCATION TO PLACE THE LOGICAL RECORD         ---*\n*---           RETURNS: 0 FOR SUCCESSFUL COMPLETION                ---*\n*---                    4 FOR END-OF-FILE ON THIS MEMBER           ---*\n*---                    8 FOR DCB NOT OPENED                       ---*\n*---                                                               ---*\n*---     IF REWRITE FLAG IS ON, REWRITE THE PREVIOUS BLOCK FIRST   ---*\n*---                                                               ---*\nREAD     DS    0H\n         TM    PDS+48,X'10'        IS PDS OPEN ??\n         BZ    RC8                 NOPE --- PROBLEMS\n         TM    REWRITE,EODAD       END-OF-FILE ALREADY HIT ??\n         BNZ   RC4                 YES ---\n         L     R4,CURS             LOAD DEBLOCKING CURSOR\n         LA    R4,80(,R4)          POINT TO NEXT LOGICAL RECORD\n         C     R4,BUFEND           PAST END OF BUFFER ??\n         BL    NOIO                NOPE; STILL OK\n         TM    REWRITE,NEEDED      IS A REWRITE NEEDED ??\n         BZ    JUSTREAD            NOPE ---\n         L     R4,BUFFER           LOAD BUFFER POINTER WORD\n         WRITE DECB,SF,,(4),MF=E   YES; DO THAT NOW\n         CHECK DECB                WAIT FOR COMPLETION\n         NI    REWRITE,255-NEEDED  TURN OFF REWRITE FLAG\n         MVC   CURS,BUFFER         RESET THE CURSOR\nJUSTREAD DS    0H\n         L     R4,BUFFER           LOAD BUFFER ADDRESS\n         READ  DECB,SF,,(4),MF=E   READ A BLOCK\n         CHECK DECB                WAIT FOR COMPLETION\n         ST    R4,CURS             STORE NEW CURSOR ADDRESS\n         LH    R5,PDS+62           LOAD PDS BLKSIZE\n         L     R6,DECB+16          LOAD IOB ADDRESS\n         LH    R6,14(,R6)          LOAD RESIDUAL LENGTH\n         SR    R5,R6               COMPUTE ACTUAL BLOCK LENGTH\n         BCTR  R5,R0               DECREMENT BY ONE\n         A     R5,CURS             POINT TO END OF BLOCK\n         ST    R5,BUFEND           AND SAVE THAT ADDRESS\n         MVC   0(80,R2),0(R4)      RETURN THE FIRST LOGICAL RECORD\n         B     RC0                 RETURN, CODE = 0\nNOIO     DS    0H\n         MVC   0(80,R2),0(R4)      RETURN HIM A RECORD\n         ST    R4,CURS             SAVE CURSOR ADDRESS\n         B     RC0                 RETURN, CODE = 0\n*---                                                               ---*\n*---     SET CODE ZERO FOR RETURN                                  ---*\n*---                                                               ---*\nRC0      DS    0H\n         LA    R15,0               SET RETURN CODE = 0\n         B     RET                 AND RETURN\n*---                                                               ---*\n*---     SET CODE FOUR FOR RETURN                                  ---*\n*---                                                               ---*\nRC4      DS    0H\n         LA    R15,4               SET RETURN CODE 4\n         B     RET                 AND RETURN\n*---                                                               ---*\n*---     SET CODE 8 FOR RETURN                                     ---*\n*---                                                               ---*\nRC8      DS    0H\n         LA    R15,8               SET RETURN CODE = 8\n*---                                                               ---*\n*---     RETURN, LEAVING R15 UNCHANGED                             ---*\n*---                                                               ---*\nRET      DS    0H\n         L     R13,4(,R13)         LOAD BACK S.A. POINTER\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN\n*---                                                               ---*\n*---     EODAD ROUTINE FOR PDS INPUT ACCESS                        ---*\n*---                                                               ---*\nPDSEOD   DS    0H\n         OI    REWRITE,EODAD       TURN ON EOF FLAG\n         B     RC4                 RETURN, CODE = 4\n         EJECT\n*---                                                               ---*\n*---     VARIOUS AND SUNDRY CONSTANTS AND DATA AREAS               ---*\n*---                                                               ---*\nDDN      DC    CL8' '              CURRENT PDS DDNAME\nCURS     DC    A(0)                DEBLOCKING CURSOR\nBUFFER   DC    A(0)                BUFFER ADDRESS\nBUFEND   DC    A(0)                END OF BUFFER ADDRESS\nREWRITE  DC    X'00'               REWRITE FLAG\nEODAD    EQU   X'80'               END-OF-FILE FLAG\nNEEDED   EQU   X'40'               REWRITE-NEEDED FLAG\n         READ  DECB,SF,PDS,,MF=L   BPAM DECB\nPDS      DCB   DSORG=PO,                                               X\n               DDNAME=XXXXXXXX,                                        X\n               MACRF=(R,W),                                            X\n               EODAD=PDSEOD,                                           X\n               BUFNO=1\n         END\nCTLPARSE TITLE 'PDS GLOBAL UPDATER --- CONTROL CARD SCAN'\n***********************************************************************\n*                                                                     *\n*  TITLE: CTLPARSE                                                    *\n*                                                                     *\n*   FUNCTION: SCAN AND PARSE THE CONTROL STATEMENTS FOR THE GLOBAL    *\n*             PDS UPDATE PROGRAM.                                     *\n*                                                                     *\n*   PARAMETERS: NONE                                                  *\n*                                                                     *\n*   RETURNS: PARAMETERS, IN SPECIAL SINGLY-LINKED LIST, IN R15        *\n*            THE ACTUAL RETURN VALUE IS THE ADDRESS OF THE FIRST      *\n*            LIST ELEMENT.                                            *\n*                                                                     *\n*   EXTERNAL ROUTINES: NONE                                           *\n*                                                                     *\n*   EXTERNAL FILES: SYSIN. QSAM SUPPORTED; BLKSIZE MUST BE MULTIPLE   *\n*                   OF 80. DEFAULTS TO 80.                            *\n*                                                                     *\n*   ATTRIBUTES: NON-REENTRANT, NON-REUSABLE PROBLEM PROGRAM           *\n*                                                                     *\n*   AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                  *\n*           TRAILER TRAIN COMPANY                                     *\n*           300 SOUTH WACKER DRIVE                                    *\n*           CHICAGO, ILLINOIS                                         *\n*           (312) 786-1200                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     PERFORM STANDARD ENTRY LINKAGE STUFF. BASE IS R13         ---*\n*---                                                               ---*\nCTLPARSE CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'CTLPARSE' CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS\n         BAL   R2,92(,R15)         BAL AROUND\n         USING *,R13               BASE REGISTER DEFINITION\n         DS    18F                 AND NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR OUT NEW S.A.\n         ST    R2,8(,R13)          STORE BACKWARD AND\n         ST    R13,4(,R2)          FORWARD POINTER\n         LR    R13,R2              LOAD PGM BASE REGISTER\n*---                                                               ---*\n*---     OPEN THE SYSIN FILE AND INITIALIZE THE CHAIN POINTER      ---*\n*---                                                               ---*\n         OPEN  (SYSIN)             OPEN THE INPUT FILE\n         XC    LINK,LINK           AND CLEAR OUT THE CHAIN FIELD\n*---                                                               ---*\n*---     READ A SINGLE CARD, USING QSAM I/O                        ---*\n*---                                                               ---*\nINCARD   DS    0H\n         GET   SYSIN,CARD          READ A SINGLE INPUT CARD\n*---                                                               ---*\n*---     POINT TO FIRST NON-BLANK. FORGET LEADING BLANKS           ---*\n*---                                                               ---*\n         LA    R3,CARD             START DELETING LEADING BLANKS\n         CLI   0(R3),C' '          LEADING BLANK ??\n         BNE   *+12                NOPE; START SCAN HERE\n         LA    R3,1(,R3)           YES; BUMP TO NEXT COLUMN\n         B     *-12                CONTINUE SCANNING ---\n*---                                                               ---*\n*---     SET UP AND SCAN FOR THE SPECIAL DELIMITER CHARACTERS      ---*\n*---                                                               ---*\n         LA    R4,CARD+71          POINT TO CC 72\n         CR    R3,R4               ARE WE PAST THAT ??\n         BNL   INCARD              YES; IGNORE THIS CARD\n         SR    R4,R3               COMPUTE ACTUAL LENGTH\n         BCTR  R4,R0               FOR TRT INSTRUCTION\n         EX    R4,TRT1             SCAN FOR A ':' CHARACTER\n         BC    8,INCARD            NONE FOUND; SKIP THIS CARD\n         SR    R1,R3               COMPUTE STRING LENGTH\n         BCTR  R1,R0               FOR MOVES\n         STC   R1,STR1             SAVE COMPUTED LENGTH\n         ST    R3,STR1A            AND ADDRESS\n         LA    R3,2(R1,R3)         POINT TO SECOND STRING\n         LA    R4,CARD+71          POINT TO CC 72\n         SR    R4,R3               COMPUTE REMAINING\n         BCTR  R4,R0               LENGTH\n         LTR   R4,R4               IS REMAINING LENGTH ZERO ??\n         BNP   INCARD              YES; IGNORE THIS CARD\n         EX    R4,TRT1             SCAN FOR A ':' CHARACTER\n         BC    8,INCARD            NOT FOUND; IGNORE THIS CARD\n         SR    R1,R3               COMPUTE STRING\n         BCTR  R1,R0               LENGTH\n         STC   R1,STR2             STORE LENGTH\n         ST    R3,STR2A            AND ADDRESS\n*---                                                               ---*\n*---     SCAN WAS COMPLETE AND SUCCESSFUL. NOW GRAB STORAGE        ---*\n*---     FOR A LIST LINK AND INITIALIZE IT. THE ORDER WILL BE      ---*\n*---     THE REVERSE OF THE INPUT CARDS, BUT WE DON'T CARE.        ---*\n*---                                                               ---*\n         SR    R2,R2               CLEAR A WORK REGISTER\n         IC    R2,STR1             INSERT STRING1 LENGTH\n         LA    R0,13(R1,R2)        LOAD LENGTH INTO REGISTER 0\n         LA    R2,1                INSERT SUBPOOL NUMBER\n         SLL   R2,24               SHIFT TO SUBPOOL POSITION\n         OR    R0,R2               ADD SUBPOOL TO GETMAIN PARM\n         GETMAIN R,LV=(0)          GRAB A HUNK OF CORE\n         MVC   0(4,R1),LINK        ADD LINK TO CHAIN\n         ST    R1,LINK             AND STORE NEW START\n         LA    R1,4(,R1)           POINT TO FIRST STRING AREA\n         SR    R2,R2               CLEAR A WORK REGISTER\n         IC    R2,STR1             INSERT STRING 1 LENGTH\n         STC   R2,0(,R1)           SAVE IN LINK AREA\n         L     R3,STR1A            LOAD STRING ADDRESS\n         EX    R2,MVSTR1           COPY IN STRING-1\n         LA    R1,2(R2,R1)         POINT TO SECOND-STRING AREA\n         IC    R2,STR2             INSERT ITS LENGTH\n         STC   R2,0(,R1)           AND STORE IT\n         L     R3,STR2A            AND LOAD ITS ADDRESS\n         EX    R2,MVSTR1           AND MOVE IT IN\n         B     INCARD              AND GO FOR ANOTHER CARD\n*---                                                               ---*\n*---     END-OF-FILE ON SYSIN. CLEAN UP AND RETURN TO CALLER       ---*\n*---                                                               ---*\nINPUTEOD DS    0H\n         CLOSE SYSIN               CLOSE THE FILE AND\n         FREEPOOL SYSIN            RELEASE THE BUFFER POOL\n         L     R15,LINK            LOAD THE CHAIN ADDRESS\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        AND RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN TO CALLER\n         TITLE 'CONSTANTS, DATA AREAS AND SYSIN DCB STUFF'\n*---                                                               ---*\n*---     MISCELLANEOUS STORAGE AREAS FOR CARDS AND STRINGS         ---*\n*---                                                               ---*\nSTR1     DC    X'00'               LENGTH OF 'FROM' STRING\nSTR2     DC    X'00'               LENGTH OF 'TO' STRING\nSTR1A    DC    A(0)                ADDRESS OF 'FROM' STRING\nSTR2A    DC    A(0)                ADDRESS OF 'TO' STRING\nLINK     DC    A(0)                ADDRESS OF NEXT LINK\nTRT1     TRT   0(0,R3),TRTAB       SCANNING INSTRUCTION\nMVSTR1   MVC   1(0,R1),0(R3)       MOVING INSTRUCTION\nCARD     DS    CL80\n*---                                                               ---*\n*---     TRANSLATE AND TEST TABLE USED FOR THE SCAN. TO CHANGE     ---*\n*---     THE INPUT DELIMITER, THIS TABLE MUST BE CHANGED.          ---*\n*---                                                               ---*\nTRTAB    DC    256X'00'            TRANSLATE-AND-TEST TABLE\n         ORG   TRTAB+C':'\n         DC    X'04'\n         ORG\n         EJECT\n*---                                                               ---*\n*---     SYSIN FILE DESCRIPTION. NOTE MISSING BLKSIZE.             ---*\n*---                                                               ---*\nSYSIN    DCB   DSORG=PS,                                               X\n               MACRF=GM,                                               X\n               DDNAME=SYSIN,                                           X\n               EODAD=INPUTEOD,                                         X\n               RECFM=FB,                                               X\n               LRECL=80,                                               X\n               EXLST=EXIT1\n         EJECT\n*---                                                               ---*\n*---     DCB COMPLETION EXIT. BLKSIZE GETS FILLED IN HERE IF       ---*\n*---     NOT SUPPLIED FROM ANY OTHER SOURCE                        ---*\n*---                                                               ---*\nEXIT1    DS    0F\n         DC    X'85',AL3(EXIT1+4)  DCB EXIT LIST FOR SYSIN DCB\n         NC    62(2,R1),62(R1)     IS BLKSIZE STILL ZERO ??\n         BNZR  R14                 NOPE ---\n         MVC   62(2,R1),82(R1)     YES; ASSUME LRECL = BLKSIZE\n         BR    R14                 RETURN TO O/C/E\n         LTORG ,                   DISPLAY THE LITERAL POOL\n         END\nDIRIO    TITLE 'PDS GLOBAL UPDATER --- PDS DIRECTORY I/O ROUTINE'\n***********************************************************************\n*                                                                     *\n*  TITLE: DIRIO                                                       *\n*                                                                     *\n*  FUNCTION: READ, DEBLOCK AND RETURN THE DIRECTORY OF A              *\n*            PARTITIONED DATA SET, ONE MEMBER AT A TIME               *\n*            ALSO RETURNS THE TTRC BYTES FROM THE DIRECTORY           *\n*            ENTRY IN A SEPARATE PARM.                                *\n*                                                                     *\n*  PARAMETERS: A THREE WORD LIST OF ADDRESSES.                        *\n*              WORD 1 ==> DDNAME OF PDS                               *\n*              WORD 2 ==> MEMBER NAME OUTPUT AREA                     *\n*              WORD 3 ==> TTRC FROM DIRECTORY ENTRY                   *\n*                                                                     *\n*  RETURN CODES: 0 FOR SUCCESSFUL COMPLETION                          *\n*                4 FOR END OF FILE                                    *\n*                                                                     *\n*  ATTRIBUTES: NON-REENTRANT, NON-REUSABLE PROBLEM SUBROUTINE         *\n*                                                                     *\n*  AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                   *\n*          TRAILER TRAIN COMPANY                                      *\n*          300 SOUTH WACKER DRIVE                                     *\n*          CHICAGO, ILLINOIS                                          *\n*          (312) 786-1200                                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     PERFORM STAND ENTRY LINKAGE                               ---*\n*---                                                               ---*\nDIRIO    CSECT\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'DIRIO'    CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS\n         BAL   R2,92(,R15)         'BAL' AROUND\n         USING *,R13               BASE REGISTER DEFINITION AND\n         DS    18F                 NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW S.A.\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACK POINTERS\n         LR    R13,R2              LOAD PGM BASE REGISTER\n         LM    R2,R4,0(R1)         LOAD THE DDNAME & MEMBER POINTERS\n         CLC   DDN,0(R2)           SAME AS LAST TIME ??\n         BE    NOCLOSE             YES---\n         TM    DIR+48,X'10'        IS DIRECTORY OPEN ??\n         BZ    JUSTOPEN            NO, SO JUST OPEN IT\n         CLOSE DIR                 CLOSE THE DIRECTORY DCB\n         FREEPOOL DIR              AND RELEASE ITS BUFFER POOL\nJUSTOPEN DS    0H\n         MVC   DDN,0(R2)           COPY DDNAME TO SAVE AREA\n         MVC   DIR+40(8),0(R2)     AND COPY DDNAME TO DCB\n         XC    CURS,CURS           ZERO OUT THE SCAN CURSOR\n         OPEN  (DIR,INPUT)         OPEN THE DIRECTORY FOR INPUT\nNOCLOSE  DS    0H\n         NC    CURS,CURS           IS SCAN CURSOR ZERO ??\n         BNE   DBLK                NO; JUST CONTINUE DEBLOCKING\nDIRIN    DS    0H\n         GET   DIR,BLOCK           YES; READ IN A DIRECTORY BLOCK\n         LH    R9,BLOCK            LOAD BYTES-USED COUNT\n         LA    R8,BLOCK(R9)        POINT JUST PAST END\n         BCTR  R8,R0               DECREMENT BY ONE\n         ST    R8,END              STORE BLOCK-END POINTER\n         LA    R9,BLOCK+2          POINT TO FIRST MEMBER NAME\n         ST    R9,CURS             STORE A NEW CURSOR VALUE\nDBLK     DS    0H\n         L     R9,CURS             LOAD DEBLOCKING CURSOR VALUE\n         CLC   0(8,R9),FENCE       END-OF-DIRECTORY MARKER ??\n         BE    DIREOD              YES; INDICATE END-OF-FILE\n         MVC   0(8,R3),0(R9)       RETURN THIS MEMBER NAME\n         MVC   0(4,R4),8(R9)       RETURN TTRC TO CALLER\n         NI    3(R4),X'80'         LEAVE ONLY ALIAS BIT\n         LA    R4,0                CLEAR A WORK REGISTER\n         IC    R4,11(,R9)          INSERT 'L' OF TTRL FIELD\n         N     R4,=A(X'1F')        CLOBBER ALIAS/NOTELIST BITS\n         SLL   R4,1                MULTIPLY BY TWO\n         LA    R9,12(R4,R9)        POINT TO NEXT DIRECTORY ENTRY\n         ST    R9,CURS             STORE NEW DEBLOCKING CURSOR\n         C     R9,END              PAST END OF DIRECTORY BLOCK ??\n         BL    RET0                NOPE ---\n         GET   DIR,BLOCK           YES; READ IN ANOTHER BLOCK\n         LH    R8,BLOCK            LOAD BYTES-USER COUNT\n         LA    R8,BLOCK(R8)        POINT JUST PAST LAST BYTE\n         BCTR  R8,R0               DECREMENT BY ONE\n         ST    R8,END              AND STORE NEW END POINTER\n         LA    R9,BLOCK+2          POINT TO FIRST MEMBER NAME\n         ST    R9,CURS             STORE NEW DEBLOCKING CURSOR\nRET0     DS    0H\n         LA    R15,0               SET RETURN CODE ZERO\nRET      DS    0H\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN TO CALLER\nRET4     DS    0H\n         LA    R15,4               SET RETURN CODE 4\n         B     RET                 AND RETURN TO CALLER\nDIREOD   DS    0H\n         CLOSE DIR                 CLOSE THE DIRECTORY\n         XC    CURS,CURS           NULLIFY THE CURSOR VALUE\n         XC    0(8,R3),0(R3)       NULLIFY THE RETURN MEMBER NAME\n         B     RET4                RETURN, CODE = 4\nDDN      DC    CL8' '              SUPPLIED/CURRENT DDNAME\nFENCE    DC    XL8'FFFFFFFFFFFFFFFF' SPECIAL END-OF-DIRECTORY NAME\nCURS     DC    A(0)                SCAN CURSOR\nEND      DS    A                   END OF USEFUL DATA\nBLOCK    DS    256X'00'            DIRECTORY BLOCK INPUT AREA\nDIR      DCB   DSORG=PS,                                               X\n               DDNAME=XXXXXXXX,                                        X\n               RECFM=FB,                                               X\n               LRECL=256,                                              X\n               BLKSIZE=256,                                            X\n               MACRF=GM,                                               X\n               EODAD=DIREOD\n         END\nTIOT     TITLE 'GLOBAL PDS UPDATE PROGRAM --- TIOT DDNAME EXTRACT'\n***********************************************************************\n*                                                                     *\n*  TITLE: TIOT                                                        *\n*                                                                     *\n*   FUNCTION: EXTRACT AND RETURN THE DDNAMES FROM THE TASK I/O TABLE, *\n*             ONE DDNAME PER CALL.                                    *\n*                                                                     *\n*   PARAMETERS: EITHER THE ADDRESS TO WHICH THE DDNAME IS TO BE       *\n*               COPIED, OR ZERO, SIGNALLING THAT THE TIOT SCAN IS     *\n*               TO RESTART AT THE BEGINNING OF THE TIOT.              *\n*                                                                     *\n*   RETURN CODES: 0 ==> SUCCESSFUL COMPLETION. RESET IS COMPLETE OR   *\n*                       A DDNAME HAS BEEN COPIED.                     *\n*                 4 ==> TIOT IS EXHAUSTED. ALL DDNAMES HAVE BEEN      *\n*                       EXTRACTED.                                    *\n*                                                                     *\n*   ATTRIBUTES: NON-REENTRANT, NON-REUSABLE, PROBLEM TASK             *\n*                                                                     *\n*   AUTHOR: RICK FOCHTMAN, SENIOR SYSTEMS PROGRAMMER                  *\n*           TRAILER TRAIN COMPANY                                     *\n*           300 SOUTH WACKER DRIVE,                                   *\n*           CHICAGO, ILLINOIS                                         *\n*           (312) 786-1200                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---                                                               ---*\n*---     ENTRY LINKAGE GOODIES: BASE IS R13                        ---*\n*---                                                               ---*\nTIOT     CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         B     12(,R15)            BRANCH AROUND\n         DC    X'07',CL7'TIOT'     CSECT IDENTIFIER\n         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS\n         BAL   R2,92(,R15)         'BAL' AROUND\n         USING *,R13               BASE REGISTER DEFINITION AND\n         DS    18F                 NEW SAVE AREA\n         XC    0(72,R2),0(R2)      CLEAR NEW S.A.\n         ST    R2,8(,R13)          STORE FORWARD AND\n         ST    R13,4(,R2)          BACK POINTERS\n         LR    R13,R2              LOAD PGM BASE REGISTER\n*---                                                               ---*\n*---     LOCATE PARM POINTER AND CHECK FOR RESET                   ---*\n*---                                                               ---*\n         L     R3,0(,R1)           LOAD PARM ADDRESS\n         LTR   R3,R3               RESET CALL ??\n         BNZ   NORESET             NOPE ---\n         XC    TIOTPTR,TIOTPTR     YES; CLOBBER TIOT ADDRESS\n         LA    R15,0               SET RETURN CODE ZERO\n         B     RETURN              AND RETURN TO CALLER\n*---                                                               ---*\n*---     LOCATE TIOT, SKIP PAST JOB/STEP/PROCSTEP NAMES, RETURN A  ---*\n*---     DDNAME AND SAVE THE SCAN ADDRESS                          ---*\n*---                                                               ---*\nNORESET  DS    0H\n         NC    TIOTPTR,TIOTPTR     IS TIOT POINTER NULL ??\n         BNZ   NOEXTRCT            NOPE --- SKIP THE 'EXTRACT'\n         EXTRACT TIOTPTR,FIELDS=TIOT  FETCH THE TIOT ADDRESS\n         L     R2,TIOTPTR          LOAD TIOT ADDRESS\n         LA    R2,24(,R2)          SKIP JOB/STEP NAMES\n         ST    R2,TIOTPTR          AND STORE UPDATED ADDRESS\n         MVC   0(8,R3),4(R2)       COPY OUT THE DDNAME\n         LA    R15,0               SET RETURN CODE ZERO\n         B     RETURN              AND RETURN TO CALLER\n*---                                                               ---*\n*---     ALREADY HAVE TIOT ADDRESS; JUST FETCH THE NEXT DDNAME     ---*\n*---                                                               ---*\nNOEXTRCT DS    0H\n         L     R2,TIOTPTR          LOAD TIOT ADDRESS\n         SR    R4,R4               CLEAR A WORK REGISTER\n         IC    R4,0(,R2)           INSERT TIOE LENGTH\n         LTR   R4,R4               ZERO ??\n         BZ    RET4                YES; ALL DONE WITH TIOT\n         LA    R2,0(R4,R2)         BUMP TO NEXT TIOE\n         MVC   0(8,R3),4(R2)       COPY DDNAME OVER\n         ST    R2,TIOTPTR          AND SAVE UPDATED POINTER\n         LA    R15,0               SET ZERO RETURN CODE\n*---                                                               ---*\n*---     STANDARD RETURN LINKAGE. R15 ALREADY HAS RETURN CODE      ---*\n*---                                                               ---*\nRETURN   DS    0H\n         L     R13,4(,R13)         LOAD BACK POINTER\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         MVI   12(R13),255         SET 'DONE' FLAG\n         BR    R14                 AND RETURN TO CALLER\n*---                                                               ---*\n*---     SET RETURN CODE = 4                                       ---*\n*---                                                               ---*\nRET4     DS    0H\n         LA    R15,4               SET RETURN CODE 4\n         B     RETURN              AND RETURN TO CALLER\n*---                                                               ---*\n*---  MY ONE AND ONLY CLAIM TO NON-REENTRANCY AND NON-REUSABILITY  ---*\n*---                                                               ---*\nTIOTPTR  DC    A(0)                TIOT SCAN POINTER\n         LTORG ,                   DISPLAY THE LITERAL POOL\n         END\n//LINK     EXEC  PGM=IEWL,\n//         PARM='LIST,LET,NCAL,XREF'\n//SYSPRINT DD    SYSOUT=*\n//SYSLMOD  DD    DSN=CHSY227.MISC.LOAD,DISP=SHR\n//SYSLIN   DD    DSN=*.ASM.SYSLIN,DISP=(OLD,DELETE)\n//         DD    *\n ENTRY PDSUPDTE\n NAME  PDSUPDTE(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PURGSMF": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 16, "newlines": 16, "modlines": 0, "user": "CHSY227"}, "text": "//PURGSMF  PROC\n//TEMPFILE EXEC PGM=SMFDUMP,REGION=6144K\n//DUMPOUT  DD   UNIT=SYSDA,SPACE=(CYL,(100,100)),BLKSIZE=27998\n//SYSPRINT DD   SYSOUT=X\n//SYSIN    DD   DUMMY\n//*\n//********************************************************************\n//**                                                               ***\n//** THIS TRIVIAL LITTLE PROC IS STARTED BY THE IEFU29A SMF EXIT   ***\n//** FOR THE SOLE PURPOSE OF CLEARING THE SMF FILES AND DISCARDING ***\n//** THE CONTENTS.  IT IS STARTED BY THE COMMAND \"S PURGSMF\" THAT  ***\n//** IS ISSUED BY THE IEFU29A EXIT (ALIAS: IEFU29)                 ***\n//**                                                               ***\n//** THIS IS FOR THE SYSD LPAR ONLY!!                              ***\n//**                                                               ***\n//********************************************************************\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RGSMF": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:45", "lines": 16, "newlines": 16, "modlines": 0, "user": "CHSY227"}, "text": "//PURGSMF  PROC\n//TEMPFILE EXEC PGM=SMFDUMP,REGION=6144K\n//DUMPOUT  DD   UNIT=SYSDA,SPACE=(CYL,(100,100)),BLKSIZE=27998\n//SYSPRINT DD   SYSOUT=X\n//SYSIN    DD   DUMMY\n//*\n//********************************************************************\n//**                                                               ***\n//** THIS TRIVIAL LITTLE PROC IS STARTED BY THE IEFU29A SMF EXIT   ***\n//** FOR THE SOLE PURPOSE OF CLEARING THE SMF FILES AND DISCARDING ***\n//** THE CONTENTS.  IT IS STARTED BY THE COMMAND \"S PURGSMF\" THAT  ***\n//** IS ISSUED BY THE IEFU29A EXIT (ALIAS: IEFU29)                 ***\n//**                                                               ***\n//** THIS IS FOR THE SYSD LPAR ONLY!!                              ***\n//**                                                               ***\n//********************************************************************\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMFDUMP": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x02\\x1d\\x02\\x1d\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:46", "lines": 541, "newlines": 541, "modlines": 0, "user": "CHSY227"}, "text": "SMFDUMP  TITLE 'SMF DUMP ROUTINE TO DUMP - S M F - DATA SETS '\nSMFDUMP  CSECT\n*/* LIB: CPAC.SAMPLIB(SMFDUMP)\n*/* DOC: THIS PROGRAM USED TO DUMP NON-EMPTY SMF DATA SETS,\n*/*      THIS SAMPLE SMFDUMP IS FOR MVS VERSION 5.\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*             MODULE NAME = SMFDUMP                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME =                                      *\n*                ROUTINE TO DUMP THE SMF DATASETS                     *\n*                                                                     *\n*             COPYRIGHT = 5751-CS1                                    *\n*                         INTERNATIONAL BUSINESS MACHINES             *\n*                         CORPORATION, 1983, 1988                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                DUMP ALL FULL AND ACTIVE SMF DATA SETS            @D5A\n*                                                                     *\n*                OPERATION =                                          *\n*                   CHECK THAT DUMPOUT DD IS PRESENT.                 *\n*                   CHECK THAT DUMPOUT DEVICE TYPE IS DISK OR TAPE    *\n*                   IF ALTERNATE SMF DATASETS ARE ELIGIBLE TO      @D5A\n*                     BE DUMPED, THEN DUMP THEM                    @D5A\n*                   IF CURRENT SMF DATASET IS ELIGIBLE TO BE       @D5A\n*                     DUMPED, THEN SWITCH SMF AND DUMP WHAT WAS    @D5A\n*                     THE PRIMARY SMF DATASET                      @D5A\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS =                                      *\n*                    SMF MUST BE ACTIVE.                           @D5A\n*                    SMF DATA SETS MUST BE VSAM DATA SETS.         @D5A\n*                    DUMPOUT DEVICE MUST BE DISK OR TAPE.             *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 3  = WORK REGISTERS               *\n*                    REGISTERS 4 TO 6  = UNUSED                       *\n*                    REGISTER  7       = LINKAGE TO INTERNAL ROUTINES *\n*                    REGISTERS 8 TO 9  = UNUSED                       *\n*                    REGISTERS 10      = ADDRESSABILITY TO IEEMBRDS   *\n*                                       (RECORDING DATA SET BLOCKS)@D5A\n*                    REGISTER  11      = ADDRESSABILITY TO SMCA DSECT *\n*                    REGISTER  12      = ADDRESSABILITY TO SMFDUMP    *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 1200 BYTES                             *\n*                                                                     *\n*                ATTRIBUTES = KEY 8, NON-REENTRANT,                   *\n*                   PROBLEM PROGRAM STATE,AUTHORIZED                  *\n*                                                                     *\n*             ENTRY POINTS = SMFDUMP (ONLY ENTRY POINT)               *\n*                                                                     *\n*                LINKAGE = STANDARD OS LINKAGE CONVENTIONS         @D7C\n*                                                                     *\n*             INPUT = NONE                                            *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODES =                                       *\n*                   00 = NORMAL RETURN                                *\n*                   04 = NO SMF DATASETS AVAILABLE TO DUMP            *\n*                   08 = IFASMFDP RETURNED NON-ZERO RETURN CODE       *\n*                   12 = UNABLE TO SWITCH SMF RECORDING               *\n*                   16 = DUMPOUT DD MISSING                           *\n*                   20 = NOT AN MVS/SP SYSTEM                      @D1C\n*                                                                     *\n*             EXIT - ERROR = NONE - PROGRAM WILL RETURN WITH          *\n*                CODE IN REGISTER 15                                  *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IFASMFDP, IKJEFF18                        *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = SMCA, CVT.                          *\n*                                                                     *\n*                NOTE: IFASMFDP RUNS WITH RMODE=24 AND AMODE=24.   @D7A\n*                      SMFDUMP RUNS WITH RMODE=24 BECAUSE IT MUST  @D7A\n*                      PASS IFASMFDP A SAVEAREA IN 24-BIT ADDRESS  @D7A\n*                      SPACE.                                      @D7A\n*                      REQUIREMENT FOR VERSION 5:                  @D7A\n*                      SMFDUMP RUNS WITH AMODE=31 TO ADDRESS THE   @D7A\n*                      RDS CONTROL BLOCK.                          @D7A\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, DEVTYPE, WTO, MODESET, RETURN, DYNALLOC, *\n*                   STIMER, LINK, IEESMCA, IKJEFFDF.                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                DAIRFAIL SERVICE ROUTINE IS USED TO ISSUE MESSAGES.  *\n*                THOSE ISSUED BY THE COMMAND ARE FOUND FOLLOWING THE  *\n*                LABEL ERRMSGS.                                       *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n*             ADDITIONAL INFORMATION:                                 *\n*                THE SMFDUMP PROGRAM WILL 'SWITCH' BETWEEN SMF        *\n*                DATA SETS AND WAIT FOR THE SWITCH TO OCCUR.          *\n*                THE WAIT TIME IS SET BY THE EQUATE STATEMENT         *\n*                'WAITLIM' AND MAY BE CHANGED BY ADDING 60 FOR        *\n*                EACH ADDITIONAL MINUTE OF WAIT TIME.                 *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                                                                     *\n*$MOD=(SMFDUMP) COMP(SMF) HDLD(MVS):                                  *\n*$CC= REASONCD,RELEASE#,DATECHGD,CINIT: DESCRIPTION                   *\n*$D1=  MSPIPOG,        ,        ,       CHANGED IN MVS/SP IPO 3.8 G   *\n*$D2=  MSPIPOF,        ,        ,       CHANGED IN MVS/SP IPO 3.8 F   *\n*$D3=  MSPIPOH,        ,        ,       ...........................   *\n*$D4=  MSPIPOI,        ,        ,       ...........................   *\n*$D5=  MSEIPO4,        ,        ,       CHANGED TO SUPPORT MVS/SE2    *\n*$D6=CR#I70140,        ,        ,       INSURE INTEGERITY OF SMFDUMPW *\n*$D6=  -------------------------------- DATASET.                      *\n*$D7=  CR24926,    9402,04/25/94, FJB   SUPPORT 44 CHARACTER DSNAMES  *\n*$D7=  -------------------------------- FOR SMF DUMP DATASETS, AND    *\n*$D7=  -------------------------------- FOR VERSION 5.1 CHANGES.      *\n*$D8=  PR01623,   9402P,09/20/94, WGL   FIX MULTILINE WTO             *\n*$D9=  PR02195,   9601P,01/18/96, JMC   FIXED RDS OFFSETS             *\n*                                                                     *\n***********************************************************************\n         EJECT\nSMFDUMP  CSECT ,                       CSECT NAME DECLARED\nSMFDUMP  AMODE 31                      ADDRESS MODE,TO ADDRESS RDS @D7A\nSMFDUMP  RMODE 24                      RESIDENCE MODE              @D7A\n*\n*  CONSTANT EQUATES\n*\nCMDSVC   EQU   34                      SVC TO ISSUE COMMAND\nISITSP   EQU   X'80'                   HIGH-ORDER BIT CVTSMCA      @D1C\n*                                        TO INDICATE SP SYSTEM     @D1C\nDASD     EQU   X'20'                   UCB DEVICE TYPE FOR DASD DEVICES\nTAPE     EQU   X'80'                   UCB DEVICE TYPE FOR TAPE DEVICES\nWAITLIM  EQU   3600                    60 SECONDS/MINUTE           @D4A\n*                                          FOR 60 MINUTES          @D4A\n*\nK0       EQU   0                       CONSTANT 0\nK1       EQU   1                       CONSTANT 1\nK2       EQU   2                       CONSTANT 2\nK4       EQU   4                       CONSTANT 4\nK8       EQU   8                       CONSTANT 8\nK12      EQU   12                      CONSTANT 12\nK15      EQU   15                      CONSTANT 15                 @D5A\nK16      EQU   16                      CONSTANT 16\nK20      EQU   20                      CONSTANT 20                 @D5A\n*\n* REGISTER EQUATES\n*\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SAVE  (14,12),,SMFDUMP_&SYSDATE SAVE REGISTERS\n         USING SMFDUMP,R12             SET UP BASE ADDRESSABILITY\n         LR    R12,R15                 LOAD BASE REG WITH ENTRY POINT\n         LA    R14,SAVE                GET ADDRESS OF REGISTER SAVE\n         ST    R13,K4(R14)             SAVE CALLER'S SAVE AREA ADDR\n         ST    R14,K8(R13)             SAVE MY SAVE AREA ADDRESS\n         LR    R13,R14                 LOAD SAVE AREA ADDRESS\n*                                                                  @D3A\n* ISSUE SMFDUMP PROGRAM STARTED MESSAGE                            @D3A\n*                                                                  @D3A\n         WTO   MF=(E,MSG000)           ISSUE STARTED MESSAGE       @D3A\n*\n* CHECK FOR DUMPOUT DD PRESENT\n*\n         DEVTYPE DDOUT,DEVAREA         GET DEVICE TYPE OF DUMPOUT DD\n         LTR   R15,R15                 IS DUMPOUT DD PRESENT?\n         BNZ   NODDOUT                 DD MISSING BR TO ERROR RTN\n*\n* CHECK DEVICE TYPE OF DUMPOUT DEVICE(TAPE OR DASD)\n*\n         CLI   DEVAREA+K2,TAPE         IS DUMPOUT A TAPE DEVICE\n         BE    OKTODUMP                YES, BR TO CONTINUE PROCESSING\n         CLI   DEVAREA+K2,DASD         IS DUMPOUT A DASD DEVICE\n         BNE   NOCANDMP                NO, INVLAID DEVICE TYPE BR\n*                                                                  @D6A\n* IF DASD, GET UCB ADDRESS OF DUMPOUT FOR RESERVE                  @D6A\n*                                                                  @D6A\n         EXTRACT TIOTADDR,FIELDS=TIOT  GET TIOT ADDRESS            @D6A\n         SR    R02,R02                 CLEAR WORK REG              @D6A\n         L     R03,TIOTADDR            LOAD TIOT POINTER           @D6A\n         USING TIOT1,R03                                           @D6A\nNEXTDD   ICM   R02,1,TIOELNGH          GET LENGTH OF DD ENTRY      @D6A\n         BZ    NODDOUT                 END OF TIOT                 @D6A\n         CLC   TIOEDDNM,DDOUT          IS THIS OUR DD STMT         @D6A\n         BE    DDFOUND                 YES - BRANCH                @D6A\n         LA    R03,0(R02,R03)          POINT TO NEXT DD ENTRY      @D6A\n         B     NEXTDD                  AND PROCESS IT              @D6A\nDDFOUND  MVC   OUTUCB+1(3),TIOEFSRT    SAVE UCB ADDRESS            @D6A\n         DROP  R03                                                 @D6A\n*                                                                  @D5A\n* TEST IF THIS SYSTEM IS RUNNING MVS/SP                            @D1C\n*                                                                  @D5A\nOKTODUMP L     R11,CVTPTR              LOAD ADDRESS OF CVT         @D7C\n         USING CVTMAP,R11              TELL THE ASSEMBLER          @D7A\n         TM    CVTSMCA,ISITSP          CHECK FOR MVS/SP  INSTD     @D7C\n         BZ    NOSP                    NO - ERROR                  @D1C\n         L     R11,CVTSMCA             GET ADDRESS OF SMCA         @D7C\n         DROP  R11                     FINISHED WITH CVT           @D7A\n         USING SMCABASE,R11            GET SMCA BASE ADDRESS\n*                                                                  @D5A\n* DUMP ALL VSAM SMF DATA SETS THAT ARE FULL                        @D5A\n*                                                                  @D5A\n         ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM) ENQ ON SMF SMFW-Q     @D5A\nDMPINACT MVC   ACTRDS,SMCASVCR         SAVE ACTIVE RDS             @D5A\n         ICM   R10,K15,SMCAFRDS        POINT TO FIRST RDS          @D5A\n         BZ    SMFERROR                IF SMF NOT ACTIVE, EXIT     @D5A\n         USING IEEMBRDS,R10                                        @D5A\nGETNSMF  TM    RDSFLG1,RDSDUMP         IS SMF DATASET FULL         @D5A\n         BZ    SMFBUMP                 NO - GET NEXT ONE           @D5A\n         MVC   SMFDSN,RDSNAME          MOVE IN  SMF  DATASET NAME  @D7C\n         BAL   R07,DALOC               CALL DUMP SUBROUTINE\nSMFBUMP  L     R10,RDSNEXT             GET NEXT RDS                @D5A\n         TM    RDSFLG2,RDSLOST         IS THIS THE DUMMY RDS?      @D5A\n         BZ    GETNSMF                 NO-PROCESS NEXT DATA SET    @D5A\n*                                                                  @D5A\n* ALL INACTIVE SMF DATA SETS HAVE BEEN DUMPED.                     @D5A\n* TEST IF A SWITCH OCCURED DURING DUMPING.                         @D5A\n*                                                                  @D5A\n         C     R10,ACTRDS              WAS ACTIVE RDS THE DUMMY    @D2C\n         BE    DODEQ                   YES, THEN DEQ AND EXIT      @D2C\n         CLC   SMCASVCR,ACTRDS         IS SAME RDS STILL ACTIVE    @D5A\n         BNE   DMPINACT                NO, START ALL OVER AGN      @D5A\n         EJECT\n*\n* ISSUE OPERATOR 'SWITCH SMF' COMMAND AND WAIT FOR COMPLETION\n*\nSMFSWTCH DS    0H\n         L     R10,SMCASVCR            GET ADDR OF ACTIVE RDS      @D5A\n         DROP  R11                     FINISHED WITH SMCABASE      @D7A\n         MODESET MF=(E,SUPRMOD)        GET IN SUPR STATE FOR SVC 34  #\n         SLR   R00,R00                 CLEAR REG 0\n         LA    R01,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         SVC   CMDSVC                  ISSUE COMMAND VIA SVC 34\n         MODESET MF=(E,PROBMOD)        GET BACK IN PROB STATE\n         WTO   MF=(E,MSG010)           DISPLAY SWITCHED MESSAGE    @D3A\n         LA    R03,WAITLIM             SET LOOP COUNTER TO WAIT TIME\nCHKYX    TM    RDSFLG1,RDSDUMP         HAS SWITCH OCCURED ?        @D5A\n         BO    DOLAST1                 YES - DON'T WAIT            @D2C\n         STIMER WAIT,BINTVL=ONESEC     WAIT FOR ONE SECOND\n         BCT   R03,CHKYX               LOOP BACK TO TRY AGAIN\n         DEQ   MF=(E,DEQLIST)          DEQ ON SMF SMFWRITER-Q        #\n         WTO   MF=(E,MSG002)           UNABLE TO SWITCH ERROR MESSAGE\n         LA    R15,K12                 BAD RETURN CAN GO NO FURTHER\n         B     EXITR                   RETURN TO CALLER'S CALLER\n*\n* DUMP ALTERNATE SMF DATASET AFTER SWITCH OCCURRED                 @D5A\n*\nDOLAST1  MVC   SMFDSN,RDSNAME          MOVE IN  SMF  DATASET NAME  @D7C\n         BAL   R07,DALOC               CALL RTN TO DUMP INACTIVE SMF\nDODEQ    DEQ   MF=(E,DEQLIST)          DEQ ON SMF SMFWRITER-Q      @D2C\n*\n* RETURN BACK TO CALLER\n*\nEXIT     SLR   R15,R15                 SET NORMAL RETURN CODE\nEXITR    L     R13,K4(R13)             LOAD CALLERS SAVE AREA ADDRESS\n         RETURN (14,12),RC=(15)        RETURN TO CALLER\n         EJECT\n*                                                                  @D5A\nNOSP     WTO   MF=(E,MSG009)           ISSUE NO SP  SYSTEM MSG     @D1C\n         LA    R15,K20                 LOAD RETURN CODE            @D5A\n         B     EXITR                   BR TO EXIT                  @D5A\n*\nSMFERROR WTO   MF=(E,MSG003)           ISSUE NO DATASET TO DUMP MESSAGE\n         LA    R15,K4                  LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RETURN CODE\n*\nNOCANDMP WTO   MF=(E,MSG008)           ISSUE INVALID DEVICE TYPE MSG\n         LA    R15,K16                 LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RET. CODE\n*\nNODDOUT  WTO   MF=(E,MSG001)           ISSUE DUMPOUT DD MISSING MSG\n         LA    R15,K16                 LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RET. CODE\n*\n*  ROUTINE TO ALLOCATE  S M F  DATASET AS DDNAME DUMPIN\n*\nDALOC    DS    0H                      ALLOC SUBROUTINE\n         XC    FREEER(K4),FREEER       CLEAR DYNALLOC ERROR AREAS\n         LA    R01,FREE                LOAD DYNALLOC PARM LIST\n         DYNALLOC                      FREE DDNAME DUMPIN\n         XC    ALOCER(K4),ALOCER       CLEAR DYNALLOC ERROR AREAS\n         LA    R01,ALOC                LOAD PARM LIST ADDRESS\n         DYNALLOC                      ALLOC  SMF  DATASET DD=DUMPIN\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DYNERR                  IF ZERO THEN ALLOC OK\n         CLI   DEVAREA+K2,DASD         IS DUMPOUT A DASD DVC       @D6A\n         BNE   RESDONE                 NO, DONT RESERVE            @D6A\n         RESERVE MF=(E,OUTRSV)         RESERVE DUMPOUT             @D6A\nRESDONE  EQU   *                                                   @D6A\n         LINK  SF=(E,LINKDUMP)         LINK TO SMF UTILITY\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DUMPERR                 IF ZERO THEN BR TO EXIT ROUTINE\n         CLI   DEVAREA+K2,DASD         IS DUMPOUT A DASD DVC       @D6A\n         BNE   DEQDONE                 NO, DONT DEQUEUE            @D6A\n         DEQ   MF=(E,OUTDEQ)           RELEASE DUMPOUT             @D6A\nDEQDONE  EQU   *                                                   @D6A\n         MVC   MSG2DSN,SMFDSN          SMF DATASET NAME TO MESSAGE @D7C\n         WTO   TEXT=((MSG1,),(MSG2,)),MF=(E,MSG007) ISSUE MSG      @D7C\nCHKDMP   EQU   *\n         TM    RDSFLG1,RDSDUMP         HAS DUMP BEEN POSTED?       @D4A\n         BZR   R07                     YES - DON'T WAIT ANYMORE    @D4A\n         DROP  R10                     FINISHED WITH IEEMBRDS      @D7A\n         STIMER WAIT,BINTVL=ONESEC     WAIT FOR ONE SECOND         @D4A\n         B     CHKDMP                  LOOP BACK TO CHK AGAIN      @D4A\n*\nDUMPERR  WTO   MF=(E,MSG006)           ISSUE DUMP FAILED MESSAGE\n         LA    R15,K8                  SET RETURN CODE\n         B     EXITR                   BR TO EXIT FROM SMFDUMP\n*\nDYNERR   ST    R15,DRFLR15             SAVE RETCODE FOR DAIRFAIL\n         LA    R01,DRFLPARM            LOAD DAIRFAIL PARM LIST ADDRESS\n         XC    DRFLPARM(DFLEN),DRFLPARM CLEAR AREA FIRST\n         USING DFDSECTD,R01            SET ADDRESSIBLITY TO PARM LIST\n         LA    R15,ALOCRB              GET ADDRESS OF ALLOCATION RB\n         ST    R15,DFS99RBP            SAVE IN DAIRFAIL PARM LIST\n         LA    R15,DRFLR15             GET ADDRESS OF SAVED REG 15\n         ST    R15,DFRCP               SAVE IN DAIRFAIL PARM LIST\n         LA    R15,FULL0               GET ADDRESS OF OF DUMMY F02\n         ST    R15,DFJEFF02            SAVE IN DAIRFAIL PARM LIST\n         LA    R15,DRFLID              GET ADDRESS OF CALLER'S FLAGS\n         ST    R15,DFIDP               SAVE IN DAIRFAIL PARM LIST\n         DROP  R01\n         LINK  SF=(E,LINKDRFL)         LINK TO DAIRFAIL SERVICE ROUTINE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DRFLERR                 IF NOT ZERO THEN GOTO DRFL ERR\n         WTO   MF=(E,MSG005)           ELSE ISSUE DYNALLOC FAILED MSG\n         LA    R15,K12                 SET RETURN CODE\n         B     EXITR                   BR TO EXIT FROM SMFDUMP\n*\nDRFLERR  WTO   MF=(E,MSG004)           ELSE ISSUE DAIRFAIL ERROR MSG\n         LA    R15,K16                 SET RETURN CODE\n         B     EXITR                   BR TO EXIT FROM SMFDUMP\n         EJECT\n*\n*  DATA AREA\n*\n         DS    0D                                                    #\nSAVE     DC    18F'0'                  REGISTER SAVE AREA\nSMFQNAME DC    CL8'IPOSMF01'           QNAME FOR IFASMFDP      SIPO50#\nSMFRNAME DC    CL7'DATASET'            RNAME FOR IFASMFDP            #\nDEQLIST  DEQ   (SMFQNAME,SMFRNAME,,SYSTEM),MF=L     SMF SMFWRITER-Q  #\nCMDISMF  DC    Y(12),Y(00),CL08'I SMF' COMMAND (I SMF) SVC 34 INPUT\nACTRDS   DC    F'0'                    ACTIVE RECORDING DS         @D5A\nTIOTADDR DC    F'0'                    ADDRESS OF TIOT             @D6A\nOUTRSV   RESERVE (SMFQNAME,OUTRNAME,E,,SYSTEMS),UCB=OUTUCB,MF=L    @D6A\nOUTDEQ   DEQ   (SMFQNAME,OUTRNAME,,SYSTEMS),MF=L RLSE DUMPOUT      @D6A\nOUTRNAME DC    CL7'DUMPOUT'            RNAME FOR RESERVE           @D6A\nOUTUCB   DC    F'0'                    UCB ADDRESS FOR RSVE        @D6A\n*\n*  CONTROL FOR SVC 99 TO FREE DDNAME DUMPIN\n*\nFREE     DC    A(FREERB+X'80000000')   RB POINTER                  @D7C\nFREERB   DS    0F                      REQUEST BLOCK FO DYNALLOC\n         DC    AL1(20),AL1(02),AL2(0)  LENGTH,UNALLOC_VERB,FLAGS\nFREEER   DC    AL2(0)                  ERROR CODE\nFREEIN   DC    AL2(0)                  INFO CODE\n         DC    A(FREETP)               TXT UNIT LIST POINTER\n         DC    A(0)                    RESERVED\n         DC    A(0)                    FLAGS\nFREETP   CALL  ,(FREEDDN),VL,MF=L      TEXT UNIT POINTERS\nFREEDDN  DC    XL2'1',XL2'1',XL2'8',CL8'DUMPIN'  FREE DDNAME=DUMPIN\n*\n*  CONTROL FOR SVC 99 TO ALLOCATE DDNAME DUMPIN TO  SMF DATASET NAME\n*\nALOC     DC    A(ALOCRB+X'80000000')   RB POINTER                  @D7C\nALOCRB   DS    0F\n         DC    AL1(20)                 LENGTH\n         DC    AL1(01)                 ALLOC_VERB\n         DC    AL2(0)                  FLAGS\nALOCER   DC    AL2(0)                  ERROR CODE\nALOCIN   DC    AL2(0)                  INFO CODE\n         DC    A(ALOCTP)               TEXT UNIT LIST POINTER\n         DC    A(0)                    RESERVED\n         DC    A(0)                    FLAGS\nALOCTP   CALL  ,(ALOCDDN,ALOCDSN,ALOCDSP,ALOCVBS),VL,MF=L TU POINTERS\nALOCDDN  DC    XL2'1'                  TEXT UNIT FOR DDNAME        @D7C\n         DC    X'0001'                 NUMBER                      @D7C\n         DC    AL2(8)                  DDNAME LENGTH               @D7C\n         DC    CL8'DUMPIN'             DDNAME=DUMPIN               @D7C\nALOCDSN  DC    XL2'2'                  DATASET NAME KEY            @D7C\n         DC    X'0001'                 NUMBER                      @D7C\n         DC    AL2(L'SMFDSN)           DATASET NAME LENGTH         @D7C\nSMFDSN   DC    CL44' '                 SMF DATASET NAME            @D7C\nALOCDSP  DC    XL2'4'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    XL1'08'                 DISP=SHR\nALOCVBS  DC    XL2'49'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    XL1'58'                 RECFM=VBS\n*\n* PROGRAM CONSTANTS\n*\nONESEC   DC    F'100'                  100 HUNDREDTHS SEC. FOR STIMER\nDDOUT    DC    CL8'DUMPOUT'            OUTPUT DDNAME FOR TIOT SCAN\nDEVAREA  DC    2F'0'                   OUTPUT FOR DEVTYPE MACRO\n         IKJEFFDF DFDSECT=YES          DAIRFAIL PARM LIST MAP\nSMFDUMP  CSECT\nFULL0    DC    F'0'                    ADDRESS OF NULL IKJEFF02 ROUTINE\nDRFLR15  DC    A(0)\nDRFLPARM DC    XL(DFLEN)'00'\nDRFLID   DC    AL1(DFWTP)\n         DC    AL1(DFSVC99)\nSAVEYORX DC    C' '                    SAVE AREA FOR ALT. MAN_ DATASET\n*\nMSG1     DC    AL2(L'MSG1TXT)                                      @D7A\nMSG1TXT  DC    C'SMFDUMP COMPLETED FOR DATASET: '                  @D7A\nMSG2     DC    AL2(MSG2LEN)                                        @D7A\nMSG2TXT  DC    C'DSNAME='                                          @D7A\nMSG2DSN  DC    CL44' '                                             @D7A\nMSG2LEN  EQU   *-MSG2TXT                                           @D7A\n*\n*\n* MODESETS ISSUED\n*\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L GET IN SUPR STATE FOR SVC 34\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L GET BACK IN PROB STATE\n*\n* LINKS ISSUED\n*\nLINKDRFL LINK  EP=IKJEFF18,SF=L        LINK TO DAIRFAIL SERVICE ROUTINE\nLINKDUMP LINK  EP=IFASMFDP,SF=L        LINK TO IFASMFDP SMF DUMP RTN\n*\n* MESSAGES ISSUED\n*\nERRMSGS  DS    0F\nMSG000   WTO   'SMFDUMP VERSION 1 RELEASE 9 - STARTED',                X\n               ROUTCDE=(11),MF=L\nMSG001   WTO   'SMFDUMP DUMPOUT DD MISSING',                           X\n               ROUTCDE=(11),MF=L\nMSG002   WTO   'SMFDUMP SWITCH OF SMF FAILED TO OCCUR',                X\n               ROUTCDE=(11),MF=L\nMSG003   WTO   'SMFDUMP NO SMF DATASETS ELIGIBLE FOR DUMP',            X\n               ROUTCDE=(11),MF=L\nMSG004   WTO   'SMFDUMP DYNAMIC ALLOCATION FAILED, AND DAIRFAIL',      X\n               ROUTCDE=(11),MF=L\nMSG005   WTO   'SMFDUMP DYNAMIC ALLOCATION FAILED',                    X\n               ROUTCDE=(11),MF=L\nMSG006   WTO   'SMFDUMP IFASMFDP PROGRAM FAILED TO DUMP SMF',          X\n               ROUTCDE=(11),MF=L\nMSG007   WTO   TEXT=((,D),(,DE)),ROUTCDE=(1,2,11),MF=L             @D8C\nMSG008   WTO   'SMFDUMP DUMPOUT DD INVALID DEVICE TYPE ',              X\n               ROUTCDE=(11),MF=L\nMSG009   WTO   'SMFDUMP NO MVS/SP INSTALLED ',                     @D1CX\n               ROUTCDE=(11),MF=L                                   @D5A\nMSG010   WTO   'SMFDUMP SWITCH SMF COMMAND ISSUED',                @D3AX\n               ROUTCDE=(11),MF=L                                   @D3A\n*\n* PATCH AREA\n*\n         DS    0D\nMODLEN   EQU   *-SMFDUMP           EQUATE FOR MODULE LENGTH(- PATCH)\nPTCHLEN  EQU   ((MODLEN+7)/8+7)/8*8 PATCH AREA LENGTH EQUATE\nPTCHLNTH DC    Y(PTCHLEN)          LENGTH OF PATCH AREA\nPTCHBASE DC    S(PATCH)            BASE DISPLACED ADDRESS OF PATCH\nPATCH    DC    XL(PTCHLEN)'00'     PATCH AREA\n*\n         EJECT\n         IEESMCA ,                 SMCA DSECT IN SYS1.AMODGEN\n         EJECT ,                                                   @D6A\n         IEFTIOT1 ,                TIOT MAPPING DSECT              @D6A\n         EJECT ,                                                   @D7A\nIEEMBRDS DSECT                                                     @D5A\nRDSID    DS    CL4                 CONTROL BLOCK ID                @D5A\nRDSNEXT  DS    F                   FORWARD CHAIN POINTER           @D5A\nRDSPREV  DS    F                   BACKWARD CHAIN POINTER          @D5A\n*                                                                  @D5A\nRDSFLG1  DS    X                                                   @D5A\nRDSFREE  EQU   X'10'               1 - NEED TO FREE DATASET        @D5A\nRDSDUMP  EQU   X'08'               1 - OPER HAS BEEN TOLD TO       @D5A\n*                                      DUMP DS                     @D5A\nRDSREADY EQU   X'04'               1 - DS IS OPEN AND READY        @D5A\nRDSCLOSE EQU   X'02'               1 - DS NEEDS TO BE CLOSED       @D5A\nRDSNDOP  EQU   X'01'               1 - DS NEEDS TO BE OPENED       @D5A\n*                                                                  @D5A\nRDSFLG2  DS    X                                                   @D5A\nRDSLOST  EQU   X'80'               DUMMY RDS FOR LOST DATA         @D5A\nRDSPHYER EQU   X'40'               1 - PHYSICAL I/O ERROR          @D5A\nRDSLOGER EQU   X'20'               1 - LOGICAL I/O ERROR           @D5A\n*                                                                  @D5A\nRDSFLG3  DS    X                   RESERVED                        @D5A\nRDSNLEN  DS    X                   RESERVED                        @D5A\nRDSNAME  DS    CL44                DATASET NAME                    @D7C\nRDSVOLID DS    CL6                 VOLUME SERIAL                   @D5A\n         DS    CL2                                                 @D9A\nRDSDDN   DS    CL8                 DDNAME RETND BY DYNALLOC        @D5A\nRDSCAPTY DS    F                   CAPACITY IN # OF BLOCKS         @D5A\nRDSNXTBL DS    F                   NUMBER OF NEXT AVAIL BLOCK      @D5A\nRDSBQE   DS    F                   ADDR OF BQE BEING WRITTEN       @D5A\nRDSAVSPC DS    F                   AVAIL SPACE FROM SHOWCB         @D5A\nRDSENRBA DS    F                   ENDRBA FROM SHOWCB              @D5A\nRDSCINV  DS    F                   CONTROL INTERVAL SIZE           @D5A\nRDSDOMID DS    2F                  MSG # OF DUMP MSG               @D5A\nRDSRPL   DS    CL76                VSAM RPL                        @D5A\nRDSACB   DS    CL76                VSAM ACB                        @D5A\n*\n         PRINT OFF                                                 @D7A\n         CVT   DSECT=YES               MAP THE CVT AREA            @D7A\n         AGO   .FINI\n.FINI    ANOP\n         PRINT ON\n         END   SMFDUMP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCMAB": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x04\\x01\\x07\\x11\\x7f\\x01\\x186\\x0f\")\\x00\\x11\\x00\\x1f\\x00\\x00\\xc3\\xc1\\xd7\\xe3\\xe4\\xd9\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2018-12-26T22:29:04", "lines": 17, "newlines": 31, "modlines": 0, "user": "CAPTURE"}, "text": "/* REXX */\n/*    Run the SVCMAP program and ISPF VIEW the output   */\n/* TRACE ?I */\n/* parse arg TSOCMD */\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\n\"ALLOC FILE(\"SYSPRINT\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(79) RECFM(F B) BLKSIZE(10744)\"\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\n  SVCMAP\n/*                                    */\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"SYSPRINT\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\n   \"FREE FI(\"SYSPRINT\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCMAE": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00S\\x01\\x07\\x11\\x7f\\x01\\x186\\x0f\"(\\x00\\x11\\x00\\x1f\\x00\\x00\\xc3\\xc1\\xd7\\xe3\\xe4\\xd9\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2018-12-26T22:28:53", "lines": 17, "newlines": 31, "modlines": 0, "user": "CAPTURE"}, "text": "/* REXX */\n/*    Run the SVCMAP program and ISPF VIEW the output   */\n/* TRACE ?I */\n/* parse arg TSOCMD */\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\n\"ALLOC FILE(\"SYSPRINT\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(79) RECFM(F B) BLKSIZE(10744)\"\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\n  SVCMAP\n/*                                    */\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"SYSPRINT\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\n   \"FREE FI(\"SYSPRINT\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCMAP": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x008\\x00\\x92)o\\x01\\x186\\x0f\"4\\x02V\\x02&\\x00d\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1992-10-22T00:00:00", "modifydate": "2018-12-26T22:34:38", "lines": 598, "newlines": 550, "modlines": 100, "user": "SBGOLOB"}, "text": "* ----------------------------------------------------------------- *\n*                                                                   *\n*                                                                   *\n*                                                                   *\n*                                                                   *\n*                                                                   *\n* ----------------------------------------------------------------- *\nSVCMAP   CSECT                         ESTABLISH CSECT\nSVCMAP   AMODE 31\nSVCMAP   RMODE 24\nR0       EQU   0                   R\nR1       EQU   1                    E\nR2       EQU   2                     G\nR3       EQU   3                      I\nR4       EQU   4                       S\nR5       EQU   5                        T\nR6       EQU   6                         E\nR7       EQU   7                          R\nR8       EQU   8\nR9       EQU   9                   E\nR10      EQU   10                   Q\nR11      EQU   11                    U\nR12      EQU   12                     A\nR13      EQU   13                      T\nR14      EQU   14                       E\nR15      EQU   15                        S\n         GBLC  &RECSZ\n&RECSZ   SETC  '79'\n         SAVE  (14,12),,SVCMAP-&SYSDATE\n         LR    R12,R15                 LOAD R12 W/EPA ADDRESS\n         USING SVCMAP,R12             ESTABLISH ADDRESSABLITY\n         GETMAIN RU,LV=WORKLEN         GETMAIN WORKAREA\n         ST    R13,4(,R1)              ST CALLER'S S/A ADDR IN MY S/A\n         ST    R1,8(,R13)              ST MY S/A ADDR IN CALLER'S S/A\n         LR    R13,R1                  LOAD ADDR OF MY S/A IN R13\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n         OPEN  (SYSPRINT,OUTPUT)       OPEN OUTPUT FILE\n         LTR   R15,R15                 WAS IT SUCCESSFUL?\n         BNZ   ERR01                   NO, GO ISSUE ERROR MESSAGE\n         L     R3,CVTPTR               LOAD A(CVT)\n         L     R2,CVTSMEXT-CVT(,R3)    LOAD A(CVT STG. MAP EXTENSION)\n         USING CVTVSTGX,R2\n         L     R15,CVTMLPAE            LOAD A(MLPA END)\n         ST    R15,MLPAHIGH            STORE A(MLPA END)\n         L     R15,CVTFLPAE            LOAD A(FLPA END)\n         ST    R15,FLPAHIGH            STORE A(FLPA END)\n         L     R15,CVTPLPAE            LOAD A(PLPA END)\n         ST    R15,PLPAHIGH            STORE A(PLPA END)\n         L     R15,CVTEPLPE            LOAD A(EPLPA END)\n         ST    R15,EPLPHIGH            STORE A(EPLPA END)\n         L     R15,CVTEFLPE            LOAD A(EFLPA END)\n         ST    R15,EFLPHIGH            STORE A(EFLPA END)\n         L     R15,CVTEMLPE            LOAD A(EMLPA END)\n         ST    R15,EMLPHIGH            STORE A(EMLPA END)\n         L     R15,CVTNUCE             LOAD A(NUC END)\n         ST    R15,NUCHIGH             STORE A(NUC END)\n         L     R15,CVTERWNE            LOAD A(ENUC END)\n         ST    R15,ENUCHIGH            STORE A(ENUC END)\n         L     R2,CVTGDA-CVT(,R3)      LOAD A(GDA)\n         USING GDA,R2\n         L     R15,GDACSA              LOAD A(CSA START)\n         A     R15,GDACSASZ            ADD SIZE(CSA)\n         BCTR  R15,R0                  DECREMENT\n         ST    R15,CSAHIGH             STORE A(CSA END)\n         L     R15,GDAECSA             LOAD A(ECSA START)\n         A     R15,GDAECSAS            ADD SIZE(ECSA)\n         BCTR  R15,R0                  DECREMENT\n         ST    R15,ECSAHIGH            STORE A(ECSA END)\n         L     R15,GDASQA              LOAD A(SQA START)\n         A     R15,GDASQASZ            ADD SIZE(SQA)\n         BCTR  R15,R0                  DECREMENT\n         ST    R15,SQAHIGH             STORE A(SQA END)\n         L     R15,GDAESQA             LOAD A(ESQA START)\n         A     R15,GDAESQAS            ADD SIZE(ESQA)\n         BCTR  R15,R0                  DECREMENT\n         ST    R15,ESQAHIGH            STORE A(ESQA END)\n         L     R2,CVTABEND-CVT(,R3)    LOAD A(SECONDARY CVT)\n         L     R2,SCVTSVCT-SCVTSECT(,R2) LOAD A(SVC TABLE)\n         L     R15,=A(PUT24)           LOAD A(PUT24) IN 24 BIT\n         BSM   R0,R15                  GO TO 24 BIT MODE\nPUT24    DS    0H\n         PUT   SYSPRINT,OTHDR1         PUT HEADER\n         PUT   SYSPRINT,OTHDR2         PUT HEADER\n         PUT   SYSPRINT,OTHDR3         PUT HEADER\n         L     R15,=A(PUT24A+X'80000000') LOAD A(31 BIT MODE CODE)\n         BSM   0,R15                   BRANCH IN 31 BIT MODE\nPUT24A   DS    0H\n         NUCLKUP BYNAME,NAME=IGCERROR,ADDR=ADERROR\n         NI    ADERROR,X'7F'           TURN OFF HIGH ORDER BIT\n         LA    R9,256                  LOAD LOOP COUNTER\n         SR    R7,R7                   ZERO REGISTER FOR SVC NUMBER\nLOOP     DS    0H\n         MVC   OTREC,BLANKS            CLEAR OUTPUT RECORD\n         MVI   OTLPAREN,C'('           INIT FIELD\n         MVI   OTRPAREN,C')'           INIT FIELD\n         LA    R8,SVCNAMTB             LOAD A(SVC NAME TABLE)\n         LR    R10,R7                  COPY SVC NUMBER\n         SLL   R10,3                   MULTIPLY BY 8 FOR IN\n         AR    R8,R10                  ADD OFFSET TO SVC NAME TABLE\n         AR    R10,R2                  ADD OFFSET TO SVC TABLE ORIGIN\n         CVD   R7,DBLWORD              CONVERT SVC NUMBER TO DECIMAL\n         UNPK  OTSVCDEC-1(4),DBLWORD+5(3) UNPACK SVC NUMBER\n         OI    OTSVCDEC+2,X'F0'        FIX THE SIGN\n         MVI   OTSVCDEC+3,C'('         START PARENTHESES\n         XC    DBLWORD,DBLWORD         CLEAR AREA\n         STC   R7,DBLWORD              STORE SVC NUMBER\n         UNPK  OTSVCHEX(3),DBLWORD(2)  UNPACK SVC NUMBER\n         MVI   OTSVCHEX+2,C')'         CLOSE PARENTHESES\n         TR    OTSVCHEX,TRTAB          FIX UNPRINTABLE CHARACTERS\n         TM    4(R10),SVCESR           IS THIS AN ESR SVC\n         BO    ESRSTUFF PUT2A          YES, GO DO ESR STUFF\n         MVC   SVCADDR,0(R10)          SAVE A(SVC)\n         NI    SVCADDR,X'7F'           TURN OFF HIGH ORDER BIT\n         UNPK  OTEPALOC(9),0(5,R10)    UNPACK ADDRESS\n         TR    OTEPALOC,TRTAB          FIX UNPRINTABLE CHARACTERS\n         MVI   OTEPALOC+8,C' '         CLEAR GARBAGE FROM UNPK\n         MVC   OTSVCNAM,0(R8)          MOVE SVC NAME\n         CLC   SVCADDR,ADERROR         IS IT A(IGCERROR)\n         BNE   SKIPERR                 NO, SKIP IT\n         MVC   OTSVCNAM,IGCERROR       ELSE, SAY THAT IT'S UNUSED\nSKIPERR  DS    0H\n         SR    R15,R15                 CLEAR REGISTER\n         IC    R15,4(,R10)             GET ATTRIBUTES\n         UNPK  OTSVCLLA,6(2,R10)       UNPACK LOCKS\n         STC   R15,OTSVCLLA+2          SAVE TYPE\n         OI    OTSVCLLA+2,X'F0'        FIX SIGN\n         TR    OTSVCLLA,TRTAB          FIX UNPRINTABLE CHARACTERS\n         SRL   R15,5                   SHIFT TO GET TYPE\n         IC    R15,TYPES(R15)          INDEX INTO TYPE TABLE\n         STC   R15,OTSVCTYP+1          MOVE TO LINE\n         BAL   R14,CHECKLOC            GO CHECK LOCATION\n         CLC   OTSVCNAM,IGCERROR       IS IT IGCERROR\n         BE    PUTLINE                 YES, DON'T BOTHER WITH HEADER\n         L     R15,SVCADDR             LOAD A(SVC)\n         MVC   OTSVCHDR,0(R15)         MOVE SVC HEADER INFO\n         B     PUTLINE                 GO PUT OUT DETAIL LINE\nESRSTUFF DS    0H\n         L     R4,0(,R10)              LOAD A(ESR TABLE)\n         L     R5,4(,R4)               LOAD NUMBER OF ESRS FOR SVC\n         SR    R6,R6                   ZERO REGISTER FOR ESR NUMBER\nLOOP2    DS    0H\n         LR    R11,R6                  COPY SVC NUMBER\n         XC    DBLWORD,DBLWORD         CLEAR AREA\n         STC   R11,DBLWORD             STORE SVC NUMBER\n         UNPK  OTSVCNAM+6(3),DBLWORD(2) UNPACK SVC NUMBER\n         TR    OTSVCNAM,TRTAB          FIX UNPRINTABLE CHARACTERS\n         MVC   OTSVCNAM(L'ESR),ESR     MOVE ESR EYECATCHER\n         MVC   OTSVCNAM+8,C' '         CLEAR GARBAGE FROM UNPK\n         SLL   R11,3                   MULTIPLY BY 8 FOR IN\n         AR    R11,R4                  ADD OFFSET TO ESR TABLE ORIGIN\n         LA    R11,8(,R11)             ADD HEADER OFFSET\n         MVC   SVCADDR,0(R11)          SAVE A(SVC)\n         NI    SVCADDR,X'7F'           TURN OFF HIGH ORDER BIT\n         UNPK  OTEPALOC(9),0(5,R11)    UNPACK ADDRESS\n         TR    OTEPALOC,TRTAB          FIX UNPRINTABLE CHARACTERS\n         MVI   OTEPALOC+8,C' '         CLEAR GARBAGE FROM UNPK\n         SR    R15,R15                 CLEAR REGISTER\n         IC    R15,4(,R11)             GET ATTRIBUTES\n         UNPK  OTSVCLLA,6(2,R11)       UNPACK LOCKS\n         STC   R15,OTSVCLLA+2          SAVE TYPE\n         OI    OTSVCLLA+2,X'F0'        FIX SIGN\n         TR    OTSVCLLA,TRTAB          FIX UNPRINTABLE CHARACTERS\n         SRL   R15,5                   SHIFT TO GET TYPE\n         IC    R15,TYPES(R15)          INDEX INTO TYPE TABLE\n         STC   R15,OTSVCTYP+1          MOVE TO LINE\n         BAL   R14,CHECKLOC            GO CHECK LOCATION\n         L     R15,SVCADDR             LOAD A(SVC)\n         MVC   OTSVCHDR,0(R15)         MOVE SVC HEADER INFO\n         L     R15,=A(PUT3)            PREPARE FOR 24-BIT PUT\n         BSM   R0,R15                  GO THERE IN 24-BIT MODE\nPUT3     DS    0H\n         PUT   SYSPRINT,OTREC          PUT LINE\n         L     R15,=A(PUT3A+X'80000000') PREPARE FOR 31-BIT MODE AGAIN\n         BSM   R0,R15                  GO THERE IN 31-BIT MODE\nPUT3A    DS    0H\n         LA    R6,1(,R6)               ADD 1 TO SVC NUMBER\n         BCT   R5,LOOP2                LOOP TO GET NEXT ESR TBL ENTRY\n         B     PUT2A                   ELSE, GO GET SVC TBL ENTRY\nPUTLINE  DS    0H\n         L     R15,=A(PUT2)            PREPARE FOR 24-BIT PUT\n         BSM   R0,R15                  GO THERE IN 24-BIT MODE\nPUT2     DS    0H\n         PUT   SYSPRINT,OTREC          PUT LINE\n         L     R15,=A(PUT2A+X'80000000') PREPARE FOR 31-BIT MODE AGAIN\n         BSM   R0,R15                  GO THERE IN 31-BIT MODE\nPUT2A    DS    0H\n         LA    R7,1(,R7)               ADD 1 TO SVC NUMBER\n         BCT   R9,LOOP                 LOOP TO GET NEXT SVC TBL ENTRYY\n         CLOSE SYSPRINT                CLOSE OUTPUT FILE\nRETURN   DS    0H\n         LR    R1,R13                  LOAD R1 W/A(SAVEAREA)\n         L     R13,4(,R13)             LOAD R13 W/ADDR OF CALLER'S S/A\n         FREEMAIN RU,LV=WORKLEN,A=(1)  FREEMAIN WORKAREA\n         RETURN (14,12),RC=0           RETURN TO OS\nCHECKLOC DS    0H\n         CLC   SVCADDR,CSAHIGH         IS ADDR IN RANGE\n         BH    CKMLPA                  NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,CSA            ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKMLPA   DS    0H\n         CLC   SVCADDR,MLPAHIGH        IS ADDR IN RANGE\n         BH    CKFLPA                  NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,MLPA           ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKFLPA   DS    0H\n         CLC   SVCADDR,FLPAHIGH        IS ADDR IN RANGE\n         BH    CKPLPA                  NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,FLPA           ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKPLPA   DS    0H\n         CLC   SVCADDR,PLPAHIGH        IS ADDR IN RANGE\n         BH    CKSQA                   NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,PLPA           ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKSQA    DS    0H\n         CLC   SVCADDR,SQAHIGH         IS ADDR IN RANGE\n         BH    CKNUC                   NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,SQA            ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKNUC    DS    0H\n         CLC   SVCADDR,NUCHIGH         IS ADDR IN RANGE\n         BH    CKENUC                  NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,NUC            ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKENUC   DS    0H\n         CLC   SVCADDR,ENUCHIGH        IS ADDR IN RANGE\n         BH    CKESQA                  NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,ENUC           ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKESQA   DS    0H\n         CLC   SVCADDR,ESQAHIGH        IS ADDR IN RANGE\n         BH    CKEPLPA                 NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,ESQA           ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKEPLPA  DS    0H\n         CLC   SVCADDR,EPLPHIGH        IS ADDR IN RANGE\n         BH    CKEFLPA                 NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,EPLPA          ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKEFLPA  DS    0H\n         CLC   SVCADDR,EFLPHIGH        IS ADDR IN RANGE\n         BH    CKEMLPA                 NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,EFLPA          ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKEMLPA  DS    0H\n         CLC   SVCADDR,EMLPHIGH        IS ADDR IN RANGE\n         BH    CKECSA                  NO, GO CHECK NEXT AREA\n         MVC   OTSVCLOC,EMLPA          ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nCKECSA   DS    0H\n         CLC   SVCADDR,ECSAHIGH        IS ADDR IN RANGE\n         BH    NOAREA                  NO, GO SHOW UNKNOWN\n         MVC   OTSVCLOC,ECSA           ELSE, SHOW WHERE IT IS\n         BR    R14                     RETURN TO MAINLINE\nNOAREA   DS    0H\n         MVC   OTSVCLOC,UNKNOWN        GO SHOW UNKNOWN\n         BR    R14                     RETURN TO MAINLINE\nERR01    DS    0H\n         WTO   'SVC001I SYSPRINT FILE CANNOT BE OPENED',ROUTCDE=11\n         ABEND 0001\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=&RECSZ,RECFM=FB\nSVCNAMTB DS    0F\n         DC    CL8'EXCP    '           SVC 0\n         DC    CL8'WAIT    '           SVC 1\n         DC    CL8'POST    '           SVC 2\n         DC    CL8'EXIT    '           SVC 3\n         DC    CL8'GETMAIN '           SVC 4\n         DC    CL8'FREEMAIN'           SVC 5\n         DC    CL8'LINK    '           SVC 6\n         DC    CL8'XCTL    '           SVC 7\n         DC    CL8'LOAD    '           SVC 8\n         DC    CL8'DELETE  '           SVC 9\n         DC    CL8'G/F-MAIN'           SVC 10\n         DC    CL8'TIME    '           SVC 11\n         DC    CL8'SYNCH   '           SVC 12\n         DC    CL8'ABEND   '           SVC 13\n         DC    CL8'SPIE    '           SVC 14\n         DC    CL8'ERREXCP '           SVC 15\n         DC    CL8'PURGE   '           SVC 16\n         DC    CL8'RESTORE '           SVC 17\n         DC    CL8'BLDLFIND'           SVC 18\n         DC    CL8'OPEN    '           SVC 19\n         DC    CL8'CLOSE   '           SVC 20\n         DC    CL8'STOW    '           SVC 21\n         DC    CL8'OPEN-J  '           SVC 22\n         DC    CL8'CLOSE-T '           SVC 23\n         DC    CL8'DEVTYPE '           SVC 24\n         DC    CL8'TRKBAL  '           SVC 25\n         DC    CL8'CATALOG '           SVC 26\n         DC    CL8'OBTAIN  '           SVC 27\n         DC    CL8'RESERVED'           SVC 28\n         DC    CL8'SCRATCH '           SVC 29\n         DC    CL8'RENAME  '           SVC 30\n         DC    CL8'FEOV    '           SVC 31\n         DC    CL8'ALLOC   '           SVC 32\n         DC    CL8'IOHALT  '           SVC 33\n         DC    CL8'MGCRQEDT'           SVC 34\n         DC    CL8'WTO(R)  '           SVC 35\n         DC    CL8'WTL     '           SVC 36\n         DC    CL8'SEGLD/WT'           SVC 37\n         DC    CL8'RESERVED'           SVC 38\n         DC    CL8'LABEL   '           SVC 39\n         DC    CL8'EXTRACT '           SVC 40\n         DC    CL8'IDENTIFY'           SVC 41\n         DC    CL8'ATTACH  '           SVC 42\n         DC    CL8'CIRB    '           SVC 43\n         DC    CL8'CHAP    '           SVC 44\n         DC    CL8'OVLYBRCH'           SVC 45\n         DC    CL8'TTIMER  '           SVC 46\n         DC    CL8'STIMER  '           SVC 47\n         DC    CL8'DEQ     '           SVC 48\n         DC    CL8'RESERVED'           SVC 49\n         DC    CL8'RESERVED'           SVC 50\n         DC    CL8'SNAP    '           SVC 51\n         DC    CL8'RESTART '           SVC 52\n         DC    CL8'RELEX   '           SVC 53\n         DC    CL8'DISABLE '           SVC 54\n         DC    CL8'EOV     '           SVC 55\n         DC    CL8'ENQ/RESV'           SVC 56\n         DC    CL8'FREEDBUF'           SVC 57\n         DC    CL8'RELBUF  '           SVC 58\n         DC    CL8'OLTEP   '           SVC 59\n         DC    CL8'(E)STAE '           SVC 60\n         DC    CL8'IKJEGS6A'           SVC 61\n         DC    CL8'DETACH  '           SVC 62\n         DC    CL8'CHKPT   '           SVC 63\n         DC    CL8'RDJFCB  '           SVC 64\n         DC    CL8'RESERVED'           SVC 65\n         DC    CL8'BTAMTEST'           SVC 66\n         DC    CL8'RESERVED'           SVC 67\n         DC    CL8'SYNADAF '           SVC 68\n         DC    CL8'BSP     '           SVC 69\n         DC    CL8'GSERV   '           SVC 70\n         DC    CL8'BFR SVCS'           SVC 71\n         DC    CL8'NO MACRO'           SVC 72\n         DC    CL8'SPAR    '           SVC 73\n         DC    CL8'DAR     '           SVC 74\n         DC    CL8'DQUEUE  '           SVC 75\n         DC    CL8'IFBSTAT '           SVC 76\n         DC    CL8'RESERVED'           SVC 77\n         DC    CL8'LSPACE  '           SVC 78\n         DC    CL8'STATUS  '           SVC 79\n         DC    CL8'RESERVED'           SVC 80\n         DC    CL8'SETPRT  '           SVC 81\n         DC    CL8'RESERVED'           SVC 82\n         DC    CL8'SMFWTM  '           SVC 83\n         DC    CL8'GRAPHICS'           SVC 84\n         DC    CL8'DDRSWAP '           SVC 85\n         DC    CL8'ATLAS   '           SVC 86\n         DC    CL8'DOM     '           SVC 87\n         DC    CL8'RESERVED'           SVC 88\n         DC    CL8'RESERVED'           SVC 89\n         DC    CL8'RESERVED'           SVC 90\n         DC    CL8'VOLSTAT '           SVC 91\n         DC    CL8'TCPEXCP '           SVC 92\n         DC    CL8'TGET/PUT'           SVC 93\n         DC    CL8'STCC    '           SVC 94\n         DC    CL8'SYSEVENT'           SVC 95\n         DC    CL8'STAX    '           SVC 96\n         DC    CL8'IKJEGS9G'           SVC 97\n         DC    CL8'PROTECT '           SVC 98\n         DC    CL8'DYNALLOC'           SVC 99\n         DC    CL8'IKJEFFIB'           SVC 100\n         DC    CL8'QTIP    '           SVC 101\n         DC    CL8'AQCTL   '           SVC 102\n         DC    CL8'XLATE   '           SVC 103\n         DC    CL8'TOPCTL  '           SVC 104\n         DC    CL8'IMGLIB  '           SVC 105\n         DC    CL8'RESERVED'           SVC 106\n         DC    CL8'MODESET '           SVC 107\n         DC    CL8'RESERVED'           SVC 108\n         DC    CL8'ESR3    '           SVC 109\n         DC    CL8'RESERVED'           SVC 110\n         DC    CL8'JES-HAM '           SVC 111\n         DC    CL8'PGRLSE  '           SVC 112\n         DC    CL8'PG SVCS '           SVC 113\n         DC    CL8'EXCPVR  '           SVC 114\n         DC    CL8'RESERVED'           SVC 115\n         DC    CL8'ESR1    '           SVC 116\n         DC    CL8'DEBCHK  '           SVC 117\n         DC    CL8'RESERVED'           SVC 118\n         DC    CL8'TESTAUTH'           SVC 119\n         DC    CL8'G/F-MAIN'           SVC 120\n         DC    CL8'VSAM    '           SVC 121\n         DC    CL8'ESR2    '           SVC 122\n         DC    CL8'PURGEDQ '           SVC 123\n         DC    CL8'TPIO    '           SVC 124\n         DC    CL8'EVENTS  '           SVC 125\n         DC    CL8'MSS     '           SVC 126\n         DC    CL8'RESERVED'           SVC 127\n         DC    CL8'RESERVED'           SVC 128\n         DC    CL8'RESERVED'           SVC 129\n         DC    CL8'RACHECK '           SVC 130\n         DC    CL8'RACINIT '           SVC 131\n         DC    CL8'RACLIST '           SVC 132\n         DC    CL8'RACDEF  '           SVC 133\n         DC    CL8'RESERVED'           SVC 134\n         DC    CL8'RESERVED'           SVC 135\n         DC    CL8'RESERVED'           SVC 136\n         DC    CL8'ESR6    '           SVC 137\n         DC    CL8'PGSER   '           SVC 138\n         DC    CL8'CVAF    '           SVC 139\n         DC    CL8'RESERVED'           SVC 140\n         DC    CL8'RESERVED'           SVC 141\n         DC    CL8'RESERVED'           SVC 142\n         DC    CL8'RESERVED'           SVC 143\n         DC    CL8'RESERVED'           SVC 144\n         DC    CL8'RESERVED'           SVC 145\n         DC    CL8'RESERVED'           SVC 146\n         DC    CL8'RESERVED'           SVC 147\n         DC    CL8'RESERVED'           SVC 148\n         DC    CL8'RESERVED'           SVC 149\n         DC    CL8'RESERVED'           SVC 150\n         DC    CL8'RESERVED'           SVC 151\n         DC    CL8'RESERVED'           SVC 152\n         DC    CL8'RESERVED'           SVC 153\n         DC    CL8'RESERVED'           SVC 154\n         DC    CL8'RESERVED'           SVC 155\n         DC    CL8'RESERVED'           SVC 156\n         DC    CL8'RESERVED'           SVC 157\n         DC    CL8'RESERVED'           SVC 158\n         DC    CL8'RESERVED'           SVC 159\n         DC    CL8'RESERVED'           SVC 160\n         DC    CL8'RESERVED'           SVC 161\n         DC    CL8'RESERVED'           SVC 162\n         DC    CL8'RESERVED'           SVC 163\n         DC    CL8'RESERVED'           SVC 164\n         DC    CL8'RESERVED'           SVC 165\n         DC    CL8'RESERVED'           SVC 166\n         DC    CL8'RESERVED'           SVC 167\n         DC    CL8'RESERVED'           SVC 168\n         DC    CL8'RESERVED'           SVC 169\n         DC    CL8'RESERVED'           SVC 170\n         DC    CL8'RESERVED'           SVC 171\n         DC    CL8'RESERVED'           SVC 172\n         DC    CL8'RESERVED'           SVC 173\n         DC    CL8'RESERVED'           SVC 174\n         DC    CL8'RESERVED'           SVC 175\n         DC    CL8'RESERVED'           SVC 176\n         DC    CL8'RESERVED'           SVC 177\n         DC    CL8'RESERVED'           SVC 178\n         DC    CL8'RESERVED'           SVC 179\n         DC    CL8'RESERVED'           SVC 180\n         DC    CL8'RESERVED'           SVC 181\n         DC    CL8'RESERVED'           SVC 182\n         DC    CL8'RESERVED'           SVC 183\n         DC    CL8'RESERVED'           SVC 184\n         DC    CL8'RESERVED'           SVC 185\n         DC    CL8'RESERVED'           SVC 186\n         DC    CL8'RESERVED'           SVC 187\n         DC    CL8'RESERVED'           SVC 188\n         DC    CL8'RESERVED'           SVC 189\n         DC    CL8'RESERVED'           SVC 190\n         DC    CL8'RESERVED'           SVC 191\n         DC    CL8'RESERVED'           SVC 192\n         DC    CL8'RESERVED'           SVC 193\n         DC    CL8'RESERVED'           SVC 194\n         DC    CL8'RESERVED'           SVC 195\n         DC    CL8'RESERVED'           SVC 196\n         DC    CL8'RESERVED'           SVC 197\n         DC    CL8'RESERVED'           SVC 198\n         DC    CL8'RESERVED'           SVC 199\n         DC    CL8'RESERVED'           SVC 200\n         DC    CL8'RESERVED'           SVC 201\n         DC    CL8'RESERVED'           SVC 202\n         DC    CL8'RESERVED'           SVC 203\n         DC    CL8'RESERVED'           SVC 204\n         DC    CL8'RESERVED'           SVC 205\n         DC    CL8'RESERVED'           SVC 206\n         DC    CL8'RESERVED'           SVC 207\n         DC    CL8'RESERVED'           SVC 208\n         DC    CL8'RESERVED'           SVC 209\n         DC    CL8'RESERVED'           SVC 210\n         DC    CL8'RESERVED'           SVC 211\n         DC    CL8'RESERVED'           SVC 212\n         DC    CL8'RESERVED'           SVC 213\n         DC    CL8'RESERVED'           SVC 214\n         DC    CL8'CICS    '           SVC 215\n         DC    CL8'CICS    '           SVC 216\n         DC    CL8'RESERVED'           SVC 217\n         DC    CL8'RESERVED'           SVC 218\n         DC    CL8'RESERVED'           SVC 219\n         DC    CL8'RESERVED'           SVC 220\n         DC    CL8'RESERVED'           SVC 221\n         DC    CL8'RESERVED'           SVC 222\n         DC    CL8'RESERVED'           SVC 223\n         DC    CL8'RESERVED'           SVC 224\n         DC    CL8'RESERVED'           SVC 225\n         DC    CL8'RESERVED'           SVC 226\n         DC    CL8'RESERVED'           SVC 227\n         DC    CL8'RESERVED'           SVC 228\n         DC    CL8'RESERVED'           SVC 229\n         DC    CL8'RESERVED'           SVC 230\n         DC    CL8'RESERVED'           SVC 231\n         DC    CL8'RESERVED'           SVC 232\n         DC    CL8'RESERVED'           SVC 233\n         DC    CL8'RESERVED'           SVC 234\n         DC    CL8'RESERVED'           SVC 235 USER\n         DC    CL8'RESERVED'           SVC 236 USER\n         DC    CL8'RESERVED'           SVC 237 USER\n         DC    CL8'RESERVED'           SVC 238 USER\n         DC    CL8'RESERVED'           SVC 239\n         DC    CL8'DGT     '           SVC 240\n         DC    CL8'DGT     '           SVC 241\n         DC    CL8'RESERVED'           SVC 242\n         DC    CL8'RESERVED'           SVC 243\n         DC    CL8'RESERVED'           SVC 244\n         DC    CL8'CA-1    '           SVC 245\n         DC    CL8'CA-1    '           SVC 246\n         DC    CL8'RESERVED'           SVC 247\n         DC    CL8'RESERVED'           SVC 248\n         DC    CL8'RESERVED'           SVC 249\n         DC    CL8'RESERVED'           SVC 250\n         DC    CL8'RESERVED'           SVC 251\n         DC    CL8'IDMS DB '           SVC 252\n         DC    CL8'IDMS DB '           SVC 253\n         DC    CL8'IDMS DB '           SVC 254\n         DC    CL8'RESERVED'           SVC 255\nTRTAB    EQU   *-240\n         DC    C'0123456789ABCDEF'\nOTHDR1   DS    0CL&RECSZ               OUTPUT HEADER 1\n         DC    C'SVC NUM '\n         DC    C'SVC NAME '\n         DC    C'STOR '\n         DC    C'  ENTRY  '\n         DC    C'SVC '\n         DC    C'LLA '\n         DC    C'MODULE HEADER INFORMATION'\n         DC    CL(&RECSZ-(*-OTHDR1))' '\nOTHDR2   DS    0CL&RECSZ               OUTPUT HEADER 2\n         DC    C'DEC(HX) '\n         DC    C'         '\n         DC    C'LOC  '\n         DC    C'  POINT  '\n         DC    C'TYP    '\n         DC    C'    '\n         DC    CL(&RECSZ-(*-OTHDR2))' '\nOTHDR3   DC    (&RECSZ)C'_'              OUTPUT HEADER 3\nBLANKS   DC    CL&RECSZ' '             BLANKS FOR CLEARING FIELDS\n         DS    0F\nCVTNUCE  DC    X'00FFFFFF'             END OF READ-ONLY NUCLEUS\nCVTENUCS DC    X'01000000'             START OF READ-ONLY ENUCLEUS\nIGCERROR DC    CL8'IGCERROR'           NAME FOR NUCLKUP\nNUC      DC    C'NUC '                 STORAGE AREA LABEL\nENUC     DC    C'ENUC'                 STORAGE AREA LABEL\nCSA      DC    C'CSA '                 STORAGE AREA LABEL\nECSA     DC    C'ECSA'                 STORAGE AREA LABEL\nSQA      DC    C'SQA '                 STORAGE AREA LABEL\nESQA     DC    C'ESQA'                 STORAGE AREA LABEL\nFLPA     DC    C'FLPA'                 STORAGE AREA LABEL\nEFLPA    DC    C'EFLP'                 STORAGE AREA LABEL\nMLPA     DC    C'MLPA'                 STORAGE AREA LABEL\nEMLPA    DC    C'EMLP'                 STORAGE AREA LABEL\nPLPA     DC    C'PLPA'                 STORAGE AREA LABEL\nEPLPA    DC    C'EPLP'                 STORAGE AREA LABEL\nUNKNOWN  DC    C'????'                 UNKNOWN AREA\nESR      DC    C'ESRID='               ESR IDENTIFIER\nTYPES    DC    C'16??2?3?'             SVC TYPE TABLE\nSVCESR   EQU   X'04'                   ESR INDICATOR\nWORKAREA DSECT                         WORK AREA\nSAVEAREA DC    18F'0'                  SHOULD BE FIRST IN WORKAREA\nCSAHIGH  DS    F                       A(CSA END)\nMLPAHIGH DS    F                       A(MLPA END)\nFLPAHIGH DS    F                       A(FLPA END)\nPLPAHIGH DS    F                       A(PLPA END)\nSQAHIGH  DS    F                       A(SQA END)\nNUCHIGH  DS    F                       A(NUC END)\nENUCHIGH DS    F                       A(ENUC END)\nESQAHIGH DS    F                       A(ESQA END)\nEPLPHIGH DS    F                       A(EPLPA END)\nEFLPHIGH DS    F                       A(EFLPA END)\nEMLPHIGH DS    F                       A(EMLPA END)\nECSAHIGH DS    F                       A(ECSA END)\nADERROR  DS    F                       A(IGCERROR)\nSVCADDR  DS    F                       A(SVC)\nDBLWORD  DS    D                       CONVERSION AREA\nOTREC    DS    0CL&RECSZ               OUTPUT RECORD\nOTSVCDEC DC    CL3'   '                DECIMAL SVC NUMBER\nOTLPAREN DC    C'('\nOTSVCHEX DC    CL2'  '                 HEX SVC NUMBER\nOTRPAREN DC    C') '\nOTSVCNAM DC    CL8'    '               SVC NAME/ESR ID NUMBER\n         DC    C' '\nOTSVCLOC DC    CL4'    '               SVC LOCATION(CSA/SQA/ECSA/.... )\n         DC    C' '\nOTEPALOC DC    CL8'        '           SVC EPA/LOCATION\n         DC    C' '\nOTSVCTYP DC    C' 1'                   SVC TYPE (1/2/3/4/5/6)\n         DC    CL2' '\nOTSVCLLA DC    CL3'   '                LOCK/ATTRIBUTE BITS\n         DC    C' '\nOTSVCHDR DC    CL(&RECSZ-(*-OTREC))' ' MODULE HEADER INFO\nHDRLEN   EQU   *-OTSVCHDR              LENGTH(MODULE HEADER INFO)\nWORKLEN  EQU   *-WORKAREA              WORK AREA LENGTH\n         CVT   LIST=NO,DSECT=YES,PREFIX=NO\n         IHAGDA\n         IHASCVT LIST=NO,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCMAP$": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x009\\x01\\x126?\\x01\\x186\\x0f\"D\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-12-28T00:00:00", "modifydate": "2018-12-26T22:44:39", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(SVCMAP)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   SVCMAP\n SETSSI  CB497684\n SETCODE AC(0)\n ENTRY   SVCMAP\n NAME    SVCMAP(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCMAR": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\'\\x01\\x07\\x11\\x7f\\x01\\x186\\x0f\"(\\x00\\x11\\x00\\x1f\\x00\\x00\\xc3\\xc1\\xd7\\xe3\\xe4\\xd9\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2018-12-26T22:28:27", "lines": 17, "newlines": 31, "modlines": 0, "user": "CAPTURE"}, "text": "/* REXX */\n/*    Run the SVCMAP program and ISPF VIEW the output   */\n/* TRACE ?I */\n/* parse arg TSOCMD */\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\n\"ALLOC FILE(\"SYSPRINT\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(79) RECFM(F B) BLKSIZE(10744)\"\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\n  SVCMAP\n/*                                    */\n/* address ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"SYSPRINT\")\" */\naddress TSO     \"REVIEW  SYSPRINT FILE\"\n/* address ISPEXEC \"LMFREE DATAID(\"||temp\")\"                */\n   \"FREE FI(\"SYSPRINT\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCMAV": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00C\\x01\\x07\\x11\\x7f\\x01\\x186\\x0f\"(\\x00\\x11\\x00\\x1f\\x00\\x00\\xc3\\xc1\\xd7\\xe3\\xe4\\xd9\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2018-12-26T22:28:43", "lines": 17, "newlines": 31, "modlines": 0, "user": "CAPTURE"}, "text": "/* REXX */\n/*    Run the SVCMAP program and ISPF VIEW the output   */\n/* TRACE ?I */\n/* parse arg TSOCMD */\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\n\"ALLOC FILE(\"SYSPRINT\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(79) RECFM(F B) BLKSIZE(10744)\"\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\n  SVCMAP\n/*                                    */\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"SYSPRINT\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\n   \"FREE FI(\"SYSPRINT\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TCPU83": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\xff\\x00\\xff\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:46", "lines": 255, "newlines": 255, "modlines": 0, "user": "CHSY227"}, "text": "TCPU83   TITLE 'SMF RECORD SVC ENTRY CONFIRMATION USER EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE: TCPU83 - SMF RECORD WRITE CONFIRMATION EXIT (SVC ENTRY)     *\n*                                                                     *\n* FUNCTION: TO INTERCEPT SMF-118 RECORDS AND DISPLAY KEY FIELDS       *\n*           IN SYSLOG.  THE ULTIMATE USE IS TO VERIFY FTP             *\n*           PROCESSING.                                               *\n*                                                                     *\n* MACROS: FROM SYS1.MACLIB AND SYS1.MODGEN.                           *\n*                                                                     *\n*         REGISTERS AT ENTRY:                                         *\n*         R1  -  ADDRESS OF SMF RECORD RDW                            *\n*         R13 -  ADDRESS OF 72 BYTE SAVEAREA                          *\n*         R14 -  RETURN ADDRESS                                       *\n*         R15 -  ADDRESS OF TCPU83 (ENTRY POINT)                      *\n*                                                                     *\n* EXIT:   THIS MODULE MUST RESTORE ALL REGISTERS EXCEPT R15 WHICH     *\n*         CONTAINS A RETURN CODE.  THE SMF RECORD MAY BE MODIFIED     *\n*         BY THIS EXIT.                                               *\n*                                                                     *\n*         RETURN CODES:                                               *\n*         0   -  WRITE THE SMF RECORD TO THE SMF DATASET.             *\n*         4   -  SUPPRESS THE WRITING OF THE SMF RECORD.              *\n*                                                                     *\n* ATTRIBUTES: REUS,RENT,REFR, KEY 0, SRB MODE AMODE=31, RMODE=ANY.    *\n*                                                                     *\n***********************************************************************\n         EJECT\nTCPU83   CSECT\nTCPU83   AMODE 31\nTCPU83   RMODE ANY\n***********************************************************************\n*                                                                     *\n*  REGISTER USAGE                                                     *\n*                                                                     *\nR0       EQU   0                                                      *\nR1       EQU   1                                                      *\nR2       EQU   2                    SMF RECORD BASE                   *\nR3       EQU   3                    WORK (MESSAGE BUFFER POINTER)     *\nR4       EQU   4                    WORK                              *\nR5       EQU   5                    WORK                              *\nR6       EQU   6                                                      *\nR7       EQU   7                                                      *\nR8       EQU   8                                                      *\nR9       EQU   9                    WORK AREA BASE                    *\nR10      EQU   10                                                     *\nR11      EQU   11                                                     *\nR12      EQU   12                   PROGRAM BASE                      *\nR13      EQU   13                   CALLER'S SAVE AREA BASE           *\nR14      EQU   14                   RETURN ADDRESS                    *\nR15      EQU   15                   ENTRY POINT, WORK, RETURN CODE    *\n*                                                                     *\n***********************************************************************\n         TITLE 'MAINLINE - GLOBAL PROCESSING AND RECORD TYPE CHECK'\n         J     U84$\n         DC    AL1(15),CL15'TCPU83 &SYSDATE'\nU84$     DS    0H\n         STM   R14,R12,12(R13)      SAVE REGISTERS\n         LR    R12,R15              R12 - PROGRAM BASE REGISTER\n         USING TCPU83,R12\n         ICM   R2,15,0(R1)          R2  - SMF RECORD BASE REGISTER\n         JZ    WRITEREC             ZERO ADDRESS - CAN'T FIND RECORD\n         CLI   5(R2),118            TYPE TCPIP RECORD ??\n         JE    REC118$              YES\n         SPACE\nWRITEREC DS    0H\n         LM    R14,R12,12(R13)      EXIT AND WRITE RECORD\n         SR    R15,R15                       RC=0\n         BR    R14\n         TITLE 'TCP/IP FTP STATISTICS RECORDS'\n*---------------------------------------------------------------------*\n*---     THIS MODIFICATION INSERTED BY RICK FOCHTMAN, BOARD OF     ---*\n*---     TRADE CLEARING CORP., TO PROVIDE FTP STATISTICS ON        ---*\n*---     SYSLOG IN REAL TIME.  THE DSECT SMFFTP76 WAS EXTRACTED    ---*\n*---     FROM MACRO EZASMF76, FOUND IN THE SEZACMAC DATASET FOR    ---*\n*---     TCP/IP.  LOGIC IS FAIRLY SIMPLE AND REASONABLY WELL       ---*\n*---     DOCUMENTED.                                               ---*\n*---------------------------------------------------------------------*\nREC118$  DS    0H\n         STORAGE OBTAIN,LENGTH=WK118LEN,LOC=24,SP=31\n         LR    R8,R1               COPY STORAGE ADDRESS\n         LA    R9,WK118LEN         AND LENGTH\n         LA    R14,0               SOURCE TO ZEROS\n         LA    R15,0               LENGTH/PAD TO ZEROS\n         MVCL  R8,R14              CLEAR THE AREA\n         LR    R9,R1               COPY STORAGE ADDRESS\n         USING WK118,R9             AND BASE MY DSECT\n         USING SMFFTP76,R2         RECORD DSECT BASE\n         CLC   22(2,R2),=H'3'      FTP SUBTYPE ??\n         JE    DOIT                YES -----\n         CLC   22(2,R2),=H'70'     FTP RANGE ??\n         JL    ENDIT               NOPE ---\n         CLC   22(2,R2),=H'75'     FTP RANGE ??\n         JH    ENDIT               NOPE ---\nDOIT     DS    0H\n         LH    R3,0(,R2)           LOAD RECORD LENGTH\n         BCTR  R3,R0               DECR BY ONE (POINT TO LAST BYTE)\n         LA    R4,INWTO            POINT TO MESSAGE INIT'S\n         LA    R5,INWTOL           AND LENGTH\n         LR    R15,R5              COPY FOR OUTPUT LEN\n         LA    R14,HDRL            OUTPUT POINTER\n         MVCL  R14,R4              INIT THE MESSAGES\n         MVC   FTPID,SMFFTPSU      USERID\n         MVC   FTPDSN,SMFFTDSN     DSNAME\n         #CVIP FTPIPO,SMFFTPSA,EDWK1     FROM ADDRESS\n         #CVIP FTPIPI,SMFFTPSL,EDWK1     TO ADDRESS\n         $CVTIME FTPSTT,SMFFTTRS         START TIME\n         $CVTIME FTPEDT,SMFFTTRE         END TIME\n         MVC   FTPEDT-3(3),=C' / '\n         MVC   FTPCMD,SMFFTPCM     FTP SUBCOMMAND\n         MVC   FTPTYP,SMFFTPFM     FORMAT, MODE AND STRUCTURE\n         EDIT  FTPBCT,SMFFTTBC,'Z,ZZZ,ZZZ,ZZZ',                        X\n               WRKA=EDWK1,WRKB=EDWK2\n         LA    R0,0\n         WTO   TEXT=((HDRL,),(DL1,),(DL2,),(DL2A,),(DL3,),(DL4,)),     X\n               MCSFLAG=HRDCPY,MF=(E,SMF76MSG),                         X\n               DESC=12\nENDIT    DS    0H\n         STORAGE RELEASE,LENGTH=WK118LEN,ADDR=(9),SP=31\n         J     WRITEREC             ALL DONE, GO WRITE TYPE 64 RECORD\n         DROP  R2,R9\n         TITLE 'STATIC AREA AND LITERAL POOL'\n*-------------------------------------------------------------------\n*---     DATA TO INITIALIZE MLWTO AREA\n*------------------------------------------------------------------\n         DS    0F\nINWTO  DC  AL2(L'HDR)\n       DC  CL35'U83FTPI ----- FTP STATISTICS -----'\n       DC  AL2(L'LINE1)\n       DC  CL58'ID: XXXXXXXX   TIME START/STOP XX:XX:XX / XX:XX:XX'\n       DC  AL2(L'LINE2)\n       DC  CL58'IP ADDRESS TO/FROM: XXX.XXX.XXX.XXX / XXX.XXX.XXX.XXX'\n       DC  AL2(L'LINE2A)\n       DC  CL47'SUBCOMMAND: XXXX  FORMAT/XFER/STRUCTURE: XXXX '\n       DC  AL2(L'LINE3)\n       DC  CL31'BYTE COUNT: X,XXX,XXX,XXX'\n       DC  AL2(L'LINE4)\n       DC  CL54'DSNAME: XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\nSMF76WTO WTO   TEXT=((,L),(,D),(,D),(,D),(,D),(,DE)),DESC=12,          X\n               MCSFLAG=HRDCPY,MF=L\nINWTOL   EQU   *-INWTO\n         SPACE 2\n         LTORG\n         SPACE 2\n         TITLE 'DYNAMIC AREA DEFINITIONS'\nWK118    DSECT\n         DS    18F\nSTWTOS   WTO   'U83FTPI TYPE 118 RECORD LOCATED.  XX   ',              X\n               MF=L LINKAGE=BRANCH\nEDWK1    DS    D\nEDWK2    DS    CL16\n*----------------------------------------------------------\n*---     MLWTO AREA IN THE WORK DSECT\n*----------------------------------------------------------\nHDRL   DC  AL2(L'HDR)\nHDR    DC  CL35'U83FTPI ----- FTP STATISTICS -----'\nDL1    DC  AL2(L'LINE1)\nLINE1 DC CL58'ID: XXXXXXXX  TIME START/STOP XX:XX:XX.XX / XX:XX:XX.XX'\nDL2    DC  AL2(L'LINE2)\nLINE2  DC  CL58'IP ADDRESS TO/FROM: XXX.XXX.XXX.XXX / XXX.XXX.XXX.XXX'\nDL2A   DC  AL2(L'LINE2A)\nLINE2A DC  CL47'SUBCOMMAND: XXXX  FORMAT/XFER/STRUCTURE: XXXX '\nDL3    DC  AL2(L'LINE3)\nLINE3  DC  CL31'BYTE COUNT: X,XXX,XXX,XXX'\nDL4    DC  AL2(L'LINE4)\nLINE4  DC  CL54'DSNAME: XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\nFTPID    EQU   LINE1+4,8\nFTPSTT   EQU   LINE1+31\nFTPEDT   EQU   LINE1+45\nFTPIPI   EQU   LINE2+20\nFTPIPO   EQU   LINE2+38\nFTPCMD   EQU   LINE2A+12,4\nFTPTYP   EQU   LINE2A+41,4\nFTPBCT   EQU   LINE3+12,13\nFTPDSN   EQU   LINE4+8,44\nSMF76MSG WTO   TEXT=((,L),(,D),(,D),(,D),(,D),(,DE)),DESC=12,          X\n               MCSFLAG=HRDCPY,MF=L\nEND118   DS    0D\nWK118LEN EQU   *-WK118             AREA LENGTH\n         SPACE 3\n*---------------------------------------------------------------------*\n*                DSECT FOR FTP SMF RECORDS (SUBTYPE 75)               *\n*---------------------------------------------------------------------*\nSMFFTP76 DSECT                    DSECT TO DESCRIBE FTP SMF RECORDS\nSMFFTPHD DS    CL24               STANDARD SMF HEADER WITH SUBTYPES\n*\nSMFFTPCM DS    CL4                FTP SUBCOMMAND\n*\nSMFFTPTY DS    CL4                FTP SERVER=FILE TYPE (SEQ, JES, SQL)\n*                             OR  FTP CLIENT=VALUE OF REPLY TO FTP CMD\n*\nSMFFTPSA DS    F                  FTP SERVER REMOTE IP ADDRESS   OR\n*                                 FTP CLIENT LOCAL  IP ADDRESS\n*\nSMFFTPSL DS    F                  FTP SERVER LOCAL   IP ADDRESS  OR\n*                                 FTP CLIENT FOREIGN IP ADDRESS\n*\nSMFFTPCP DS    CL2                FTP CLIENT LOCAL   PORT\nSMFFTPCF DS    CL2                FTP CLIENT FOREIGN PORT\nSMFFTPR2 DS    CL4                FTP CLIENT RESERVED\n*\nSMFFTPSU DS    CL8                FTP SERVER LOCAL  USER ID      OR\n*                                 FTP CLIENT REMOTE USER ID\n*\nSMFFTPFM DS    CL1                FTP DATA FORMAT\nSMFFTPFA EQU   C'A'                   A = ASCII\nSMFFTPFE EQU   C'E'                   E = EBCDIC\nSMFFTPFI EQU   C'I'                   I = IMAGE\n*\nSMFFTPMO DS    CL1                FTP MODE\nSMFFTPMB EQU   C'B'                   B = BLOCK\nSMFFTPMC EQU   C'C'                   C = COMPRESSED\nSMFFTPMS EQU   C'S'                   S = STREAM\n*\nSMFFTPST DS    CL1                FTP STRUCTURE\nSMFFTPSF EQU   C'F'                   F = FILE\n*\nSMFFTPDT DS    CL1                FTP DATA SET TYPE\nSMFFTPDB EQU   C' '                   BLANK = SEQUENTIAL\nSMFFTPDP EQU   C'P'                   P     = PDS\n*\nSMFFTTRS DS    F                  FTP START TIME OF TRANSMISSION\nSMFFTTRE DS    F                  FTP END   TIME OF TRANSMISSION\nSMFFTTBC DS    F                  FTP BYTE COUNT OF TRANSMISSION\n*\nSMFFTPXD DS    CL1                FTP ID\nSMFFTPXC EQU   C'C'                   C = CLIENT\nSMFFTPXS EQU   C'S'                   S = SERVER\n*\nSMFFTSLR DS    CL3                FTP SERVER - LAST REPLY TO CLIENT\n*\nSMFFTDSN DS    CL44               FTP DATA SET NAME\nSMFFTMEM DS    CL8                FTP MEMBER NAME FOR PDS\nSMFFTRS2 DS    CL8                FTP RESERVED FOR ABNORMAL END INFO.\n*\nSMFFTDS2 DS    CL44               FTP SECOND DATA SET NAME (IF NEEDED)\n*                                 OR  FTP CLIENT LOCAL DIRECTORY\n*\nSMFFTMM2 DS    CL8                FTP SECOND MEMBER NAME FOR PDS\n*\nSMFFTSTC DS    CL8                FTP SERVER STARTED TASK QUALIFIER OR\n*                                 FTP CLIENT USER ID OF FTP USER\n*\nSMFFTHST DS    CL8                FTP TCP/IP HOST NAME\n*\nSMFFTSRP DS    CL2                FTP SERVER REMOTE PORT NUMBER\nSMFFTSLP DS    CL2                FTP SERVER LOCAL  PORT NUMBER\nSMFFTOF1 DS    AL2                OFFSET TO THE FIRST HFS FILE FIELD\nSMFFTOF2 DS    AL2                OFFSET TO THE SECOND HFS FILE FIELD\nSMFFTBYF DS    XL8                BYTES TRANSFERRED COUNTER IN DOUBLE\nSMFFTGIG DS    AL4                4-GIGABYTE COUNTER FOR BYTEXFER\nSMFFTVAR DS    0C                 VAR-LENGTH FIELDS\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TCPU84": {"ttr": 3599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\xff\\x00\\xff\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:46", "lines": 255, "newlines": 255, "modlines": 0, "user": "CHSY227"}, "text": "TCPU84   TITLE 'SMF RECORD BRANCH ENTRY) CONFIRMATION USER EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE: TCPU84 - SMF RECORD WRITE CONFIRMATION EXIT (BRANCH ENTRY)  *\n*                                                                     *\n* FUNCTION: TO INTERCEPT SMF-118 RECORDS AND DISPLAY KEY FIELDS       *\n*           IN SYSLOG.  THE ULTIMATE USE IS TO VERIFY FTP             *\n*           PROCESSING.                                               *\n*                                                                     *\n* MACROS: FROM SYS1.MACLIB AND SYS1.MODGEN.                           *\n*                                                                     *\n*         REGISTERS AT ENTRY:                                         *\n*         R1  -  ADDRESS OF SMF RECORD RDW                            *\n*         R13 -  ADDRESS OF 72 BYTE SAVEAREA                          *\n*         R14 -  RETURN ADDRESS                                       *\n*         R15 -  ADDRESS OF TCPU84 (ENTRY POINT)                      *\n*                                                                     *\n* EXIT:   THIS MODULE MUST RESTORE ALL REGISTERS EXCEPT R15 WHICH     *\n*         CONTAINS A RETURN CODE.  THE SMF RECORD MAY BE MODIFIED     *\n*         BY THIS EXIT.                                               *\n*                                                                     *\n*         RETURN CODES:                                               *\n*         0   -  WRITE THE SMF RECORD TO THE SMF DATASET.             *\n*         4   -  SUPPRESS THE WRITING OF THE SMF RECORD.              *\n*                                                                     *\n* ATTRIBUTES: REUS,RENT,REFR, KEY 0, SRB MODE AMODE=31, RMODE=ANY.    *\n*                                                                     *\n***********************************************************************\n         EJECT\nTCPU84   CSECT\nTCPU84   AMODE 31\nTCPU84   RMODE ANY\n***********************************************************************\n*                                                                     *\n*  REGISTER USAGE                                                     *\n*                                                                     *\nR0       EQU   0                                                      *\nR1       EQU   1                                                      *\nR2       EQU   2                    SMF RECORD BASE                   *\nR3       EQU   3                    WORK (MESSAGE BUFFER POINTER)     *\nR4       EQU   4                    WORK                              *\nR5       EQU   5                    WORK                              *\nR6       EQU   6                                                      *\nR7       EQU   7                                                      *\nR8       EQU   8                                                      *\nR9       EQU   9                    WORK AREA BASE                    *\nR10      EQU   10                                                     *\nR11      EQU   11                                                     *\nR12      EQU   12                   PROGRAM BASE                      *\nR13      EQU   13                   CALLER'S SAVE AREA BASE           *\nR14      EQU   14                   RETURN ADDRESS                    *\nR15      EQU   15                   ENTRY POINT, WORK, RETURN CODE    *\n*                                                                     *\n***********************************************************************\n         TITLE 'MAINLINE - GLOBAL PROCESSING AND RECORD TYPE CHECK'\n         J     U84$\n         DC    AL1(15),CL15'TCPU84 &SYSDATE'\nU84$     DS    0H\n         STM   R14,R12,12(R13)      SAVE REGISTERS\n         LR    R12,R15              R12 - PROGRAM BASE REGISTER\n         USING TCPU84,R12\n         ICM   R2,15,0(R1)          R2  - SMF RECORD BASE REGISTER\n         JZ    WRITEREC             ZERO ADDRESS - CAN'T FIND RECORD\n         CLI   5(R2),118            TYPE TCPIP RECORD ??\n         JE    REC118$              YES\n         SPACE\nWRITEREC DS    0H\n         LM    R14,R12,12(R13)      EXIT AND WRITE RECORD\n         SR    R15,R15                       RC=0\n         BR    R14\n         TITLE 'TCP/IP FTP STATISTICS RECORDS'\n*---------------------------------------------------------------------*\n*---     THIS MODIFICATION INSERTED BY RICK FOCHTMAN, BOARD OF     ---*\n*---     TRADE CLEARING CORP., TO PROVIDE FTP STATISTICS ON        ---*\n*---     SYSLOG IN REAL TIME.  THE DSECT SMFFTP76 WAS EXTRACTED    ---*\n*---     FROM MACRO EZASMF76, FOUND IN THE SEZACMAC DATASET FOR    ---*\n*---     TCP/IP.  LOGIC IS FAIRLY SIMPLE AND REASONABLY WELL       ---*\n*---     DOCUMENTED.                                               ---*\n*---------------------------------------------------------------------*\nREC118$  DS    0H\n         STORAGE OBTAIN,LENGTH=WK118LEN,LOC=24,SP=31\n         LR    R8,R1               COPY STORAGE ADDRESS\n         LA    R9,WK118LEN         AND LENGTH\n         LA    R14,0               SOURCE TO ZEROS\n         LA    R15,0               LENGTH/PAD TO ZEROS\n         MVCL  R8,R14              CLEAR THE AREA\n         LR    R9,R1               COPY STORAGE ADDRESS\n         USING WK118,R9             AND BASE MY DSECT\n         USING SMFFTP76,R2         RECORD DSECT BASE\n         CLC   22(2,R2),=H'3'      FTP SUBTYPE ??\n         JE    DOIT                YES -----\n         CLC   22(2,R2),=H'70'     FTP RANGE ??\n         JL    ENDIT               NOPE ---\n         CLC   22(2,R2),=H'75'     FTP RANGE ??\n         JH    ENDIT               NOPE ---\nDOIT     DS    0H\n         LH    R3,0(,R2)           LOAD RECORD LENGTH\n         BCTR  R3,R0               DECR BY ONE (POINT TO LAST BYTE)\n         LA    R4,INWTO            POINT TO MESSAGE INIT'S\n         LA    R5,INWTOL           AND LENGTH\n         LR    R15,R5              COPY FOR OUTPUT LEN\n         LA    R14,HDRL            OUTPUT POINTER\n         MVCL  R14,R4              INIT THE MESSAGES\n         MVC   FTPID,SMFFTPSU      USERID\n         MVC   FTPDSN,SMFFTDSN     DSNAME\n         #CVIP FTPIPO,SMFFTPSA,EDWK1     FROM ADDRESS\n         #CVIP FTPIPI,SMFFTPSL,EDWK1     TO ADDRESS\n         $CVTIME FTPSTT,SMFFTTRS         START TIME\n         $CVTIME FTPEDT,SMFFTTRE         END TIME\n         MVC   FTPEDT-3(3),=C' / '\n         MVC   FTPCMD,SMFFTPCM     FTP SUBCOMMAND\n         MVC   FTPTYP,SMFFTPFM     FORMAT, MODE AND STRUCTURE\n         EDIT  FTPBCT,SMFFTTBC,'Z,ZZZ,ZZZ,ZZZ',                        X\n               WRKA=EDWK1,WRKB=EDWK2\n         LA    R0,0\n         WTO   TEXT=((HDRL,),(DL1,),(DL2,),(DL2A,),(DL3,),(DL4,)),     X\n               MCSFLAG=HRDCPY,MF=(E,SMF76MSG),LINKAGE=BRANCH,          X\n               DESC=12\nENDIT    DS    0H\n         STORAGE RELEASE,LENGTH=WK118LEN,ADDR=(9),SP=31\n         J     WRITEREC             ALL DONE, GO WRITE TYPE 64 RECORD\n         DROP  R2,R9\n         TITLE 'STATIC AREA AND LITERAL POOL'\n*-------------------------------------------------------------------\n*---     DATA TO INITIALIZE MLWTO AREA\n*------------------------------------------------------------------\n         DS    0F\nINWTO  DC  AL2(L'HDR)\n       DC  CL35'U83FTPI ----- FTP STATISTICS -----'\n       DC  AL2(L'LINE1)\n       DC  CL58'ID: XXXXXXXX   TIME START/STOP XX:XX:XX / XX:XX:XX'\n       DC  AL2(L'LINE2)\n       DC  CL58'IP ADDRESS TO/FROM: XXX.XXX.XXX.XXX / XXX.XXX.XXX.XXX'\n       DC  AL2(L'LINE2A)\n       DC  CL47'SUBCOMMAND: XXXX  FORMAT/XFER/STRUCTURE: XXXX '\n       DC  AL2(L'LINE3)\n       DC  CL31'BYTE COUNT: X,XXX,XXX,XXX'\n       DC  AL2(L'LINE4)\n       DC  CL54'DSNAME: XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\nSMF76WTO WTO   TEXT=((,L),(,D),(,D),(,D),(,D),(,DE)),DESC=12,          X\n               MCSFLAG=HRDCPY,MF=L\nINWTOL   EQU   *-INWTO\n         SPACE 2\n         LTORG\n         SPACE 2\n         TITLE 'DYNAMIC AREA DEFINITIONS'\nWK118    DSECT\n         DS    18F\nSTWTOS   WTO   'U83FTPI TYPE 118 RECORD LOCATED.  XX   ',              X\n               MF=L LINKAGE=BRANCH\nEDWK1    DS    D\nEDWK2    DS    CL16\n*----------------------------------------------------------\n*---     MLWTO AREA IN THE WORK DSECT\n*----------------------------------------------------------\nHDRL   DC  AL2(L'HDR)\nHDR    DC  CL35'U83FTPI ----- FTP STATISTICS -----'\nDL1    DC  AL2(L'LINE1)\nLINE1 DC CL58'ID: XXXXXXXX  TIME START/STOP XX:XX:XX.XX / XX:XX:XX.XX'\nDL2    DC  AL2(L'LINE2)\nLINE2  DC  CL58'IP ADDRESS TO/FROM: XXX.XXX.XXX.XXX / XXX.XXX.XXX.XXX'\nDL2A   DC  AL2(L'LINE2A)\nLINE2A DC  CL47'SUBCOMMAND: XXXX  FORMAT/XFER/STRUCTURE: XXXX '\nDL3    DC  AL2(L'LINE3)\nLINE3  DC  CL31'BYTE COUNT: X,XXX,XXX,XXX'\nDL4    DC  AL2(L'LINE4)\nLINE4  DC  CL54'DSNAME: XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\nFTPID    EQU   LINE1+4,8\nFTPSTT   EQU   LINE1+31\nFTPEDT   EQU   LINE1+45\nFTPIPI   EQU   LINE2+20\nFTPIPO   EQU   LINE2+38\nFTPCMD   EQU   LINE2A+12,4\nFTPTYP   EQU   LINE2A+41,4\nFTPBCT   EQU   LINE3+12,13\nFTPDSN   EQU   LINE4+8,44\nSMF76MSG WTO   TEXT=((,L),(,D),(,D),(,D),(,D),(,DE)),DESC=12,          X\n               MCSFLAG=HRDCPY,MF=L\nEND118   DS    0D\nWK118LEN EQU   *-WK118             AREA LENGTH\n         SPACE 3\n*---------------------------------------------------------------------*\n*                DSECT FOR FTP SMF RECORDS (SUBTYPE 75)               *\n*---------------------------------------------------------------------*\nSMFFTP76 DSECT                    DSECT TO DESCRIBE FTP SMF RECORDS\nSMFFTPHD DS    CL24               STANDARD SMF HEADER WITH SUBTYPES\n*\nSMFFTPCM DS    CL4                FTP SUBCOMMAND\n*\nSMFFTPTY DS    CL4                FTP SERVER=FILE TYPE (SEQ, JES, SQL)\n*                             OR  FTP CLIENT=VALUE OF REPLY TO FTP CMD\n*\nSMFFTPSA DS    F                  FTP SERVER REMOTE IP ADDRESS   OR\n*                                 FTP CLIENT LOCAL  IP ADDRESS\n*\nSMFFTPSL DS    F                  FTP SERVER LOCAL   IP ADDRESS  OR\n*                                 FTP CLIENT FOREIGN IP ADDRESS\n*\nSMFFTPCP DS    CL2                FTP CLIENT LOCAL   PORT\nSMFFTPCF DS    CL2                FTP CLIENT FOREIGN PORT\nSMFFTPR2 DS    CL4                FTP CLIENT RESERVED\n*\nSMFFTPSU DS    CL8                FTP SERVER LOCAL  USER ID      OR\n*                                 FTP CLIENT REMOTE USER ID\n*\nSMFFTPFM DS    CL1                FTP DATA FORMAT\nSMFFTPFA EQU   C'A'                   A = ASCII\nSMFFTPFE EQU   C'E'                   E = EBCDIC\nSMFFTPFI EQU   C'I'                   I = IMAGE\n*\nSMFFTPMO DS    CL1                FTP MODE\nSMFFTPMB EQU   C'B'                   B = BLOCK\nSMFFTPMC EQU   C'C'                   C = COMPRESSED\nSMFFTPMS EQU   C'S'                   S = STREAM\n*\nSMFFTPST DS    CL1                FTP STRUCTURE\nSMFFTPSF EQU   C'F'                   F = FILE\n*\nSMFFTPDT DS    CL1                FTP DATA SET TYPE\nSMFFTPDB EQU   C' '                   BLANK = SEQUENTIAL\nSMFFTPDP EQU   C'P'                   P     = PDS\n*\nSMFFTTRS DS    F                  FTP START TIME OF TRANSMISSION\nSMFFTTRE DS    F                  FTP END   TIME OF TRANSMISSION\nSMFFTTBC DS    F                  FTP BYTE COUNT OF TRANSMISSION\n*\nSMFFTPXD DS    CL1                FTP ID\nSMFFTPXC EQU   C'C'                   C = CLIENT\nSMFFTPXS EQU   C'S'                   S = SERVER\n*\nSMFFTSLR DS    CL3                FTP SERVER - LAST REPLY TO CLIENT\n*\nSMFFTDSN DS    CL44               FTP DATA SET NAME\nSMFFTMEM DS    CL8                FTP MEMBER NAME FOR PDS\nSMFFTRS2 DS    CL8                FTP RESERVED FOR ABNORMAL END INFO.\n*\nSMFFTDS2 DS    CL44               FTP SECOND DATA SET NAME (IF NEEDED)\n*                                 OR  FTP CLIENT LOCAL DIRECTORY\n*\nSMFFTMM2 DS    CL8                FTP SECOND MEMBER NAME FOR PDS\n*\nSMFFTSTC DS    CL8                FTP SERVER STARTED TASK QUALIFIER OR\n*                                 FTP CLIENT USER ID OF FTP USER\n*\nSMFFTHST DS    CL8                FTP TCP/IP HOST NAME\n*\nSMFFTSRP DS    CL2                FTP SERVER REMOTE PORT NUMBER\nSMFFTSLP DS    CL2                FTP SERVER LOCAL  PORT NUMBER\nSMFFTOF1 DS    AL2                OFFSET TO THE FIRST HFS FILE FIELD\nSMFFTOF2 DS    AL2                OFFSET TO THE SECOND HFS FILE FIELD\nSMFFTBYF DS    XL8                BYTES TRANSFERRED COUNTER IN DOUBLE\nSMFFTGIG DS    AL4                4-GIGABYTE COUNTER FOR BYTEXFER\nSMFFTVAR DS    0C                 VAR-LENGTH FIELDS\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPO": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00\\x95\\x00\\x95\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:46", "lines": 149, "newlines": 149, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&NAME    UPO   &A,&B,&T,&MAXLINE=57,&LINELEN=133\n         GBLA  &UPOW\n         LCLA  &W,&NT,&N,&LL,&LL2\n         LCLC  &INTO,&FROM,&LINEA,&LINEB,&LINEC,&LINED\n&UPOW    SETA  &UPOW+1\n         AIF   (&UPOW GT 1).ERROR\n&LL      SETA  &LINELEN-1\n&W       SETA  &UPOW+2\n&INTO    SETC  'PRINTER'\n&FROM    SETC  'LINE'\n&NT      SETA  1\n&LINEA   SETC  'UPOLINE'\n         AIF   ('&T(1)' EQ '').TFIN\n&LINEA   SETC  '&T(1)'\n         AIF   ('&T(2)' EQ '').TFIN\n&NT      SETA  2\n&LINEB   SETC  '&T(2)'\n         AIF   ('&T(3)' EQ '').TFIN\n&NT      SETA  3\n&LINEC   SETC  '&T(3)'\n         AIF   ('&T(4)' EQ '').TFIN\n&NT      SETA  4\n&LINED   SETC  '&T(4)'\n.TFIN    ANOP\n         AIF   ('&A' EQ '').BNEXT\n&INTO    SETC  '&A'\n.BNEXT   AIF   ('&B' EQ '').DCBFIN\n&FROM    SETC  '&B'\n.DCBFIN  ANOP\n&NAME    ST    R6,UPOREG\n         CLI   &FROM,X'F1'\n         BE    UPON&W.&NT\n         CLI   &FROM,X'5C'\n         BE    UPOE&W.&NT\n         MVC   UPOTEMP(1),&FROM\n         BAL   R6,UPOTESTS\n         AP    UPOLINEB(2),UPOTEMP(1)\n         CP    UPOLINEA(2),UPOLINEB(2)\n         BL    UPON&W.&NT\nUPOL&W.&NT PUT &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL),&FROM\n         B     UPOFIN\nUPOE&W.&NT MVI &FROM,X'F1'\n         ZAP   UPOPAGE(3),=P'1'\n         ZAP   UPOLINEB(2),=P'1'\n         B     UPOL&W.&NT\nUPON&W.&NT CP  UPOPAGE(3),=P'1'\n         BE    UPONPAGE\n         SP    UPOINCR(2),UPOLINEB(2)\n         AP    UPOINCR(2),UPOTEMP(1)\n         CP    UPOINCR(2),=P'2'\n         BNH   UPOCON\n         UPRINT &INTO,UPOLINE,SKIPAFT=UPOINCR,LINELEN=&LINELEN\n         MVC   UPOINCR(2),UPOLINEA\n&LL2     SETA  &LL-28\nUPOCON   MVC   UPOLINE+&LL2.(20),=C'(CONTINUED ON PAGE  '\n         MVI   UPOLINE,X'F0'\n         LA    R6,UPOWORK+6\n         MVC   UPOWORK(6),UPOEDIT\n         EDMK  UPOWORK(6),UPOPAGE\n         SR    R6,R1\n         EX    R6,UPOEXECA\n         PUT   &INTO,UPOLINE\n         MVI   UPOLINE,X'40'\n         MVC   UPOLINE+1(&LL),UPOLINE\n&LL2     SETA  &LL-10\nUPONPAGE MVC   &LINEA+&LL2.(6),=C'PAGE  '\n         LA    R6,UPOWORK+5\n         MVC   UPOWORK(6),UPOEDIT\n         EDMK  UPOWORK(6),UPOPAGE\n         SR    R6,R1\n         EX    R6,UPOEXECB\n         AP    UPOPAGE(3),=P'1'\n         ZAP   UPOLINEB(2),=P'1'\n         MVI   &LINEA,X'F1'\n         PUT   &INTO,&LINEA\n         AIF   (&NT LE 1).PUTFIN\n         MVC   UPOTEMP(1),&LINEB\n         BAL   R6,UPOTESTS\n         AP    UPOLINEB(2),UPOTEMP(1)\n         PUT   &INTO,&LINEB\n         AIF   (&NT LE 2).PUTFIN\n         MVC   UPOTEMP(1),&LINEC\n         BAL   R6,UPOTESTS\n         AP    UPOLINEB(2),UPOTEMP(1)\n         PUT   &INTO,&LINEC\n         AIF   (&NT LE 3).PUTFIN\n         MVC   UPOTEMP(1),&LINED\n         BAL   R6,UPOTESTS\n         AP    UPOLINEB(2),UPOTEMP(1)\n         PUT   &INTO,&LINED\n.PUTFIN  ANOP\n         MVC   UPOTEMP(1),&FROM\n         BAL   R6,UPOTESTS\n*\nUPOADD   AP    UPOLINEB(2),UPOTEMP(1)\n         AP    UPOLINEB(2),=P'2'\n&LL2     SETA  &LL-2\n         MVC   UPOLINE+2(&LL2),UPOLINE+1\n         MVI   UPOLINE,X'F0'\n         PUT   &INTO,UPOLINE\n         B     UPOL&W.&NT\n&LL2     SETA  &LL-9\nUPOEXECA MVC   UPOLINE+&LL2.(0),0(R1)\n&LL2     SETA  &LL-4\nUPOEXECB MVC   &LINEA+&LL2.(0),0(R1)\nUPOTESTS CLI   UPOTEMP,X'40'\n         BE    UPO1\n         CLI   UPOTEMP,X'F0'\n         BE    UPO2\n         CLI   UPOTEMP,X'60'\n         BE    UPO3\n         CLI   UPOTEMP,X'4E'\n         BE    UPO0\n         MVI   &FROM,X'40'\nUPO1     MVI   UPOTEMP,X'1C'\n         BR    R6\nUPO0     MVI   UPOTEMP,X'0C'\n         BR    R6\nUPO2     MVI   UPOTEMP,X'2C'\n         BR    R6\nUPO3     MVI   UPOTEMP,X'3C'\n         BR    R6\nUPOREG   DC    F'0'\nUPOTEMP  DC    X'00'\nUPOPAGE  DC    PL3'1'\nUPOLINEA DC    PL2'&MAXLINE'\nUPOLINEB DC    PL2'&MAXLINE'\nUPOEDIT  DC    X'402020202020'\nUPOINCR  DC    PL2'&MAXLINE'\n&LL2     SETA  &LL+1\nUPOLINE  DS    0CL&LL2\n         DC    X'F0'\n         DC    CL&LL' '\nUPOWORK  DC    CL6' ',CL1')'\n         CNOP  0,4\nUPOFIN   L     R6,UPOREG\n         MEXIT\n.ERROR   ANOP\n         SPACE 3\n         MNOTE *,'**** FATAL ERROR,'\n         SPACE\n         MNOTE *,'           **** THE UPO MACRO WAS CALLED MORE THAN   +\n               ONCE IN THE PROGRAM'\n         SPACE 2\n         MNOTE *,'**** CONDITIONAL ASSEMBLY TERMINATED ****'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPRINT": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x04\\x19_\\x01\\x04\\x19_\\x13$\\x00A\\x00A\\x00\\x00\\xc3\\xc8\\xe2\\xe8\\xf2\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-07-13T00:00:00", "modifydate": "2004-07-13T13:24:46", "lines": 65, "newlines": 65, "modlines": 0, "user": "CHSY227"}, "text": "         MACRO\n&NAME    UPRINT &A,&B,&SKIPAFT=0,&LINELEN=133\n         GBLA  &W\n         LCLA  &N,&LL\n         LCLC  &INTO,&FROM,&LL2\n&W       SETA  &W+11\n&LL      SETA  &LINELEN-1\n&LL2     SETC  '&LL'\n&INTO    SETC  'PRINTER'\n&FROM    SETC  'LINE'\n         AIF   ('&A' EQ '').ONE\n&INTO    SETC  '&A'\n.ONE     AIF   ('&B' EQ '').TWO\n&FROM    SETC  '&B'\n.TWO     ANOP\n&NAME    PUT   &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         AIF   (T'&SKIPAFT EQ 'N').NUMERIC\nPRN0&W   CP    &SKIPAFT,=P'2'\n         BL    PRN&W\n         BH    PRN3&W\n         MVI   &FROM,X'F0'\n         SP    &SKIPAFT,=P'2'\n         PUT   &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         B      PRN4&W\nPRN&W    CP    &SKIPAFT,=P'1'\n         BL    PRN4&W\n         PUT   &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         SP    &SKIPAFT,=P'1'\n         B      PRN4&W\nPRN3&W   MVI   &FROM,X'60'\n         PUT   &INTO,&FROM\n         SP    &SKIPAFT,=P'3'\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         B     PRN0&W\nPRN4&W   EQU   *\n         MEXIT\n.NUMERIC ANOP\n&N       SETA  &SKIPAFT\n.LOOP    AIF   (&N LE 0).FIN\n         AIF   (&N GE 2).DUO\n         PUT   &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         AGO   .FIN\n.DUO     AIF   (&N GT 2).TRES\n         MVI   &FROM,X'F0'\n         PUT   &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         AGO   .FIN\n.TRES    MVI   &FROM,X'60'\n&N       SETA  &N-3\n         PUT   &INTO,&FROM\n         MVI   &FROM,X'40'\n         MVC   &FROM+1(&LL2),&FROM\n         AGO   .LOOP\n.FIN     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT684/FILE684.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT684", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}