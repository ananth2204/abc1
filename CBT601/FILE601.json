{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012436000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE601.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE601.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x0e'", "DS1TRBAL": "b'\\x0c\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04e\\x00\\x06\\x04f\\x00\\n\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04>\\x00\\x00\\x01\\x03\"\\x7f\\x01\\x03\"\\x7f\\x08X\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf2@@@'", "ispf": {"version": "04.62", "flags": 0, "createdate": "2003-08-15T00:00:00", "modifydate": "2003-08-15T08:58:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-462"}, "text": "REGULAR CBT TAPE - VERSION 462    FILE:  601\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT462.FILE601\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3200    PO\n\n   PDS117I 61 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,183 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/15/03    08:58:44    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$GPDOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x10\\x00\\x00\\x01\\x02 /\\x01\\x03\\x08\\x7f\\x18G\\x01\\x11\\x00\\x15\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.16", "flags": 0, "createdate": "2002-07-21T00:00:00", "modifydate": "2003-03-28T18:47:00", "lines": 273, "newlines": 21, "modlines": 0, "user": "GREG"}, "text": "This version of QUEUE was modified from the 1982 MVS/370 version\nshipped by Volker Bandke on his first MVS Turnkey CD.\n\nModifications by Greg Price of PRYCROFT SIX PTY LTD\n       during June to November 2002 for MVS 3.8J.\n\n       Updated 5th February 2003.\n\n       Updated 7th February 2003:\nCTSO changed to ensure that fullscreen mode is on after a TSO command.\n\n       Updated 15th February 2003:\n- Change screen buffer definitions in QCOMMON from DC to DS statements\n  to reduce the object deck size by about 200 card images.\n- Increase the static screen buffer sizes in QCOMMON (all three of them)\n  in order to be able to handle screen sizes up to 9920 (like 62x160).\n  For every 8 bytes of extra screen size QUEUE can handle, the size of\n  the load module grows by 24 bytes.  A dynamic buffer acquistion scheme\n  may well be an improvement that could be made.\n- Use a NOEDIT TPUT for screen sizes larger than 4096 so that 14-bit\n  buffer addresses are not translated before transmission.  Addresses >\n  4095 must be sent as binary numbers, and therefore can be corrupted\n  if any filtering of invalid characters takes place.  They are inserted\n  into the data stream by the compression of repeated characters.  The\n  compression of the data stream probably becomes more important as the\n  size of the screen becomes larger.\n- Reinstate the TPUT MF=L area in QCOMMON for the NOEDIT TPUT.\n- Add the X operand to the MODEL command to set the current terminal's\n  alternate size as the QUEUE screen size.  This is independent of the\n  screen size used by TSO line-mode screen management.\n- Show the Userid and the Terminal name on the top line on wide screens.\n- Ensure that the correct screen size is restored after a TSO command.\n\n       Updated 4th March 2003:\n- Restore SYSOUT data display after a TSO command is issued during a\n  display of SYSOUT data.\n- Do not trigger a PRINT when a PREV command is issued.\n\n       Updated 28th March 2003: add IEF702I to LNCDTABL.\n\n\nChanges during 2002 include:\n\n- Rationalisation to TPUT and TGET macros.\n\n  Problems with some maintenance levels of TPUT and/or TGET macros\n  have been circumvented by converting all TPUT and TGET macro calls\n  from MF=E to inline macros (which translate to a single SVC) with\n  registers being pre-loaded as required by program logic.  The MF=L\n  work areas have been dispensed with.  The TTPUT and TTGET members\n  have been deleted from this file.\n\n\n- Addition of support for 3270 character attributes.\n\n  A shadow buffer is maintained (in a similar fashion to ISPF\n  DYNAMIC areas) to specify the character attributes (as opposed\n  to field attributes) of each screen location.  The new BLD3270\n  routine creates a 3270 data stream from the primary and shadow\n  buffers, and calls the CB3270 routine (found on a SHARE or CBT\n  tape in the 1980s and which I originally added to the Fujitsu\n  port of QUEUE at the time) which has also been added with this\n  upgrade to apply 3270 data stream compression.\n\n  The new QHEAD macro, and changes to QTILT and many routines use\n  the shadow buffer to specify colour and highlighting to be used\n  for headings, display lines, and error messages.\n\n  Uses of this capabiliy include showing immediate action SYSLOG\n  messages in white, colour coding JMSG output, and highlighting\n  active work in queue lists.  These two features are performed\n  in routine LISTDS (formerly Q15).  The LNCDTABL table which has\n  the attribute codes for JMSG messages must have its entries in\n  collating sequence order.\n\n  The new MONO and COLO commands can toggle the \"use 3270 extended\n  data stream orders to activate extended colour and highlighting\"\n  switch.  The switch is on in the QCOMMON source.  If a 3270 terminal\n  or emulation thereof cannot handle 3270 EDS then the switch can be\n  turned off in the source and QUEUE can then be reassembled.  That\n  this is the actual problem can be tested by issuing 'Q MONO' from\n  the READY prompt.\n\n\n- Addition of support for selection codes.\n\n  Removing the 3270 data stream from the in-storage buffer of\n  the screen image under construction meant that it was simple to\n  introduce internal codes to represent field attribute bytes,\n  which in turn allowed new input fields to be easily created.\n  Most of the status displays have now had a selection input\n  field added to each item in the list.  This allows items to be\n  processed by selection as opposed to being processed by a\n  command where the name of the item has to be typed in.\n\n\n- Jump from leader dots or \"point-and-shoot\".\n\n  The \"jump from leader dots\" facility (as it is called in ISPF)\n  is controlled by the QFLG2PNS bit in byte QFLAG2 in QCOMMON.\n  When active, the 'S' selection code is implied by locating the\n  cursor over an input selection field in column 2 without actually\n  typing any text character into the field.  This feature is also\n  called \"point-and-shoot\" in the source code.  As a result of this\n  feature autoskip has been removed from the attribute bytes so that\n  the cursor does not automatically move to the next selection field\n  thereby triggering an inadvertent selection.\n\n\n- Removal of need to assemble local constants.\n\n  Previously the names of all systems present in the MAS, as well as\n  the unit and volume of the checkpoint data set to be accessed had\n  to be assembled from the source or zapped into the load module.\n  Now, the system identifiers are read from the checkpoint data set,\n  SYSALLDA is used as the unit name, and the volume is ascertained\n  from the primary subsystem vector table.  Hence, local customisations\n  pertaining to data set placement or system identifier names do not\n  generate a need to update QUEUE to maintain accuracy or convenience.\n  (The CKPT(unit,volser) operand is still allowable, but if no CKPT\n  operand is supplied the currently operational checkpoint will be\n  used.)\n\n\n- Addition of NEXT and PREV commands.\n\n  When a job is selected with an 'S' selection code, the job log is\n  shown.  Movement to subsequent data sets can be achieved with the\n  NEXT command.  'N 3' from the job log will cause SPOOL data set 101\n  of the job to be displayed.  PREV provides access to data sets with\n  lower data set identifiers.  I have obviously lifted this idea from\n  SDSF.  Unlike SDSF, SYSIN data sets are always eligible for display.\n\n\n- PF3/15 variable meaning.\n\n  PF3/15 meant \"exit QUEUE\".  Whenever it does not mean that now the\n  actual meaning of PF3/15 is shown on the bottom right corner of the\n  screen.  These \"other meanings\" are an attempt to make PF3/15 cause\n  a single level back-out rather than termination of the whole program.\n  EXIT and END and E still mean \"exit QUEUE\" no matter where in QUEUE\n  they are issued, but PF3/15 no longer always means END.\n\n\n- HELP processing updated.\n\n  The display of an extra blank page no longer occurs.  The extra\n  commands/operands have been documented.  An extra page on selection\n  codes has been added.  The fact that the only allowable selection\n  code from a DD display is 'S' is not listed.  When HELP is invoked\n  from the display of a SPOOL data set, PF3/15 functions as \"leave\n  HELP and return to the data set\".\n\n\n- Scrolling changes.\n\n  The scrolling has been made more SPF-like.  A scroll amount override\n  of H (half-page), P (page) or M (maximum) is now allowed.  Much of\n  the code for this change was lifted from the OSIV/F4 (MSP) revamp\n  carried out by Mike Holloway (MAH) of Fujitsu Australia in 1982/1983.\n  (Mike's version included support for AF/JES.  Fj's JES2 was called\n  JES, and their JES3 was called JESE.)\n\n  2003-02-05  The page and half page scrolling amounts have now been\n  fixed to not always be derived from a 24-line screen, but from the\n  number of lines the screen currently has.\n\n\n- PF8/20 fiddle.\n\n  Scrolling is only active in QUEUE when viewing a SPOOL data set.\n  Sometimes I find myself looking at a list of jobs or data sets in\n  QUEUE and when I want to see the next page I press PF8 instead of\n  ENTER.  To accommodate my habit PF8/20 now functions as ENTER\n  whenever a SPOOL data set is not being browsed.  This avoids the\n  disruption of the error message and having to restart at the\n  beginning of the list.\n\n\n- Initial command change.\n\n  The default initial command is changed from HELP to STATUS.\n  This is more likely to be useful on repeated usage.\n  This value is set in QCOMMON and can be changed by source\n  update or SUPERZAP to the CSECT.\n\n\n- Display of data set identifier.\n\n  The DSID shown in the heading line was taken from the second\n  operand of the L command.  If the data set was displayed by\n  another command then the DSID field would not be filled in.\n  Now it is always shown from the DSID used by QUEUE to access\n  the data set.\n\n\n- Display of priority.\n\n  The PRIORITY column of the STATUS display shows the JQE or job\n  JES2 priority in the 1 to 15 range.  Output elements also have a\n  JOE priority.  For a display with 14.4 showing, 14 is the JQE\n  priority and 4 is the JOE priority.  Held SYSOUT (denoted by\n  \"HELD OUT\" in QUEUE) has not yet had JOEs assigned to it by this\n  version of JES2.  (This was later changed.)  A JOE represents\n  a work element that can be processed by a printer or a punch.\n  Only held SYSOUT can be processed by the TSO OUTPUT command.\n\n\n- Century and day-of-the-week fixed in PRINT heading.\n\n  The heading produced by the PRINT command had the century\n  hard-coded.  Also, the day-of-the-week logic was not working\n  for at least 2002, and possibly the 21st century.  The GETTIME\n  routine was completely rewritten (with new Zeller's congruence\n  code) to work with 20th and 21st century dates.  (This was\n  deemed to be simpler than debugging the existing code.)\n\n\n- New MODEL logic.\n\n  The MODEL command screen handling logic has been redone.\n  It will be interesting to see if it works when (and if)\n  alternate screen size support is ever added to the free\n  versions of TSO and VTAM.\n\n  2003-02-05  Well, at least 32-line and 43-line screens worked okay.\n  The largest supported screen size has been increased from Model-4\n  to Model-5.  All STSIZE macros have been removed (because STSIZE\n  sets the size for TSO line-mode screen management, and has little\n  to do with a fullscreen application like QUEUE).  The TSO TERMINAL\n  command can be used from within QUEUE via the TSO subcommand if the\n  line-mode dimensions need to be changed without leaving QUEUE.\n\n- New SPIN command.\n\n  The CSPIN source member was pretty much copied as-is from the\n  \"modern\" version of QUEUE (for SP5.2).  Incorrect line number\n  in heading after SAVE or SPIN has been fixed.\n\n\n- New SLOG default.\n\n  SLOG (or SL) with no operands, or with an operand of SYSLOG,\n  will now attempt to show the current/active SYSLOG.  The\n  default is still to show the latest data set of a given\n  SYSLOG job.  \"SL SYSLOG 1\" and \"SL SYSLOG -1\" are equivalent,\n  and specify the second-latest data set.\n\n\n- Notes about DC.\n\n  The address spaces shown in DC are ascertained from JES2 control\n  blocks.  As a result, address spaces without a JES2 job identifier\n  such as JES2 itself will not be shown.  A small code change allowed\n  the selection of ASID 1 (under the auspices of SYSLOG) to be\n  selected.  I sought to make this change because my recollection is\n  that ASID 1 was displayed.  (A subtle change by SE2, perhaps?)\n  (MVS truism: CPU time consumed by paging activity will be most\n  evident as SRB time of ASID 1.  Q's DC is one of the few monitors\n  which shows the TCB and SRB times as separate items.)\n\n  The operand is a 0-3 character string made up from the letters J,\n  S and T to specify the address space types to be included.  No\n  operand specifies the inclusion of all address spaces.  Another\n  change lifted from Mike Holloway's version for MSP.\n\n  Highlighted (ie. yellow) jobs are swapped in.  This is derived from\n  the real storage usage because this level of MVS does not have\n  logical swapping.  Which brings us to the most crucial change made\n  to QUEUE by this series of updates:  The DC column heading has been\n  corrected from SLOTS to FRAMES.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$JQT": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO -- JQT -- PHONY DSECT TO DESCRIBE FIRST CKPT REC\n         $JQT\nJQTDSECT DSECT\n         GBLB  &QSP                                               UF020\n         AIF   (&QSP).QSP1                                        UF020\nJQTOUT   DS    H              HEADER FOR OUTPUT JQES\n         DS    7H\nJQTSTC   DS    H\nJQTTSU   DS    H              HEADER FOR TSO USER JQES\nJQTCLSA  DS    H              HEADER FOR CLASS A JQES\nJQTQMAX  EQU   46             MAXIMUM NUMBER OF QUEUES\n         MEXIT                                                    UF020\n.QSP1    ANOP                                                     UF020\nJQTOUT   DS    F              HEADER FOR PRINT/PUNCH JQES         RNB19\nJQTAWOUT DS    F              HEADER FOR OUTPUT JQES (AWAITING)   RNB19\nJQTDUMP  DS    F              HEADER FOR DUMP JQE'S               RNB19\n         DS    4F                                                 RNB19\nJQTXEQ   DS    F              HEADER FOR XEQ (CONVERSION) JQE'S   RNB19\nJQTSTC   DS    F                                                  UF020\nJQTTSU   DS    F              HEADER FOR TSO USER JQES            UF020\nJQTCLSA  DS    F              HEADER FOR CLASS A JQES             UF020\nJQTQMAX  EQU   48             MAXIMUM NUMBER OF QUEUES            UF020\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOAD": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\\x12$\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T12:24:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "//GREGQ   JOB  CLASS=A,NOTIFY=GREG,MSGCLASS=X,REGION=2048K\n//*\n//*  QUEUE FOR MVS 3.8J WITH 3270 EXTENDED ATTRIBUTES\n//*\n//*  THIS JOB CREATES THE SOURCE AND OBJECT LIBRARIES AND LOADS\n//*  THE SOURCE.  MEMBER C CONTAINS THE COMPILE AND LINK JCL.\n//*\n//*  CUSTOMISE THE JOB CARD ABOVE, AND THE SYSUT2 AND OBJECT\n//*  DD STATEMENTS BELOW FOR YOUR SYSTEM BEFORE RUNNING THIS JOB.\n//*\n//*  CUSTOMISE THE JOB CARD AND DATA SET NAMES IN MEMBER C\n//*  BEFORE SUBMITTING IT AFTER THIS JOB HAS RUN SUCCESSFULLY.\n//*\n//STEP1   EXEC PGM=PDSLOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=GREG.QUEUE.ASM,DISP=(NEW,CATLG),\n//             UNIT=3350,SPACE=(CYL,(10,5,20)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040)\n//OBJECT   DD  DSN=GREG.QUEUE.OBJ,DISP=(NEW,CATLG),\n//             UNIT=3350,SPACE=(CYL,(1,1,20)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD  DATA,DLM=@@\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RENAME": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x02 _\\x01\\x020\\x8f\\x15@\\x00-\\x00,\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2002-07-24T00:00:00", "modifydate": "2002-11-04T15:40:00", "lines": 45, "newlines": 44, "modlines": 0, "user": "GREG"}, "text": "  The following member renames were performed along the lines\n  of the renaming done by Jack Schudel in October 1982\n  because, as he pointed out at the time, those silly\n  Qnn member names were getting to be a real pain!             GP 2002\n\n  Q00     was renamed to      QUEUECMN\n  Q1      was renamed to      QUEUE\n  Q2      was renamed to      ALLOCATE\n  Q3      was renamed to      CKPT\n  Q4      was renamed to      DDNAME\n  Q5      was renamed to      DISPLAY\n  Q6      was renamed to      FINDJOB\n  Q7      was renamed to      FORMAT\n  Q8      was renamed to      HELP\n  Q9      was renamed to      HEXBLK\n  Q10     was renamed to      INIT\n  Q11     was renamed to      JCL\n  Q12     was renamed to      JLOG\n  Q13     was renamed to      JMSG\n  Q14     was renamed to      LIST\n  Q15     was renamed to      LISTDS\n  Q16     was renamed to      PARSE\n  Q17     was renamed to      READSPC\n  Q18     was renamed to      REPOS\n  Q19     was renamed to      SAVE\n  Q20     was renamed to      SEARCH\n  Q21     was renamed to      SYSLOG\n  Q22     was renamed to      XDS\n  Q23     was renamed to      INITS\n  Q24     was renamed to      ACTIVE\n  Q25     was renamed to      FINDPDDB\n  Q26     was renamed to      SYSOUT\n  Q27     was renamed to      PRINT\n  Q28     was renamed to      HEXDUMP\n  Q29     was renamed to      CJQE\n  Q30     was renamed to      CJCT\n  Q31     was renamed to      CTSO\n  Q32     was renamed to      CHCT\n  Q33     was renamed to      CPDDB\n  Q34     was renamed to      CJOE\n  Q35     was renamed to      BLD3270\n  Q36     was renamed to      CB3270\n  Q37     was renamed to      CSPIN\n  Q38     was renamed to      NEXT\n  HELP    was renamed to      TSOHELP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$RNBDOC": {"ttr": 529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THIS DATASET WAS OBTAINED FROM FILE 322 ON VER193 OF THE CBT TAPE, AND\nWAS THEN MODIFIED AT RAINIER NATIONAL BANK.\n\nRNB00 -                - MOVED DSECTS AROUND FOR IFOX ASSEMBLER\n        Q4  (DDNAME)\n        Q10 (INIT)\n        Q12 (JLOG)\n        Q15 (LISTDS)\n        Q20 (SEARCH)\n        Q25 (FINDPDDB)\n        Q26 (SYSOUT)\n        Q33 (CPPDB)\nRNB01 - Q1  (QUEUE)    - FIX TO FINAL TPUT MESSAGE TO ALLOW TO WORK WITH\n                           BOTH TCAM AND VTAM\nRNB02 - Q10 (INIT)     - REMOVE PART OF UF010: DON'T USE OPER AUTHORITY\n                           TO SET QXAUTH. ALSO UF024: DON'T USE DBC.\nRNB03 - Q10 (INIT)     - FOR RACF: IF &QRACF = 1, AND IF &QNEWUSR ISN'T\n                           NULL, THEN IF APF-AUTHORIZED CHANGE THE\n                           USERID IN THE ACEE SO THE USER CAN ACCESS A\n                           RACF-PROTECTED SPOOL/CHECKPOINT DATA SET.\n      - Q16 (PARSE)    - IF &QRACF = 1 THEN USE RACF TO CHECK AUTHORITY\n                           TO USE THE XP COMMAND.\n      - Q17 (READSPC)  - IF &QRACF = 1 THEN WHEN A JCT IS READ FROM THE\n                           SPOOL BLANK THE PASSWORD AND NEWPASSWORD.\n      - Q22 (XDS)      - IF &QRACF = 1 THEN DO A SPECIAL CHECK TO SEE IF\n                           THE USER IF ALLOWED TO DO THE XDS COMMAND.\nRNB04 - Q12 (JLOG)     - FIX TO ALLOW JLOG TO WORK FOR JOBS THAT ARE IN\n                           EXECUTION BUT THAT HAVEN'T FINISHED THE FIRST\n                           STEP. THIS WILL SHOW ONLY THE 'JOB STARTED'\n                           MESSAGE.\nRNB05 - Q14 (LIST)     - IF &QRNB = 1 THEN DO THE FOLLOWING:\n                           (1) REMOVE THE PART OF UF005 THAT ALLOWS L TO\n                               PROCESS DSID'S < 101 AND THAT ALLOWS AUTH\n                               USERS TO LIST ANY JOB.  THIS REQUIRES THE\n                               XD COMMAND TO BE USED TO LIST STRANGE\n                               THINGS.\n                           (2) ALLOW TSO USERS TO ACCESS ANY JOB THAT\n                               STARTS WITH THEIR USERID OR THAT HAS A\n                               NOTIFY FOR THEIR USERID. THIS WILL NOT\n                               BE ALLOWED FOR USERID'S STARTING WITH\n                               'PJS' DUE TO LOCAL RESTRICTIONS.\n                           (3) ALLOW TSO USERS WHOSE USERID'S START WITH\n                               'TEC' TO PROCESS ANY 'TEC...' JOB OR ANY\n                               JOB WITH A NOTIFY FOR A TEC USER. ALSO\n                               ALLOW THEM TO PROCESS OUTPUT FROM STARTED\n                               TASKS.\nRNB06 - Q16 (PARSE)    - ADDED THE FOLLOWING COMMAND ABBREVIATIONS FOR\n                           CONSISTENCY WITH PREVIOUS VERSIONS:\n                                 JC  FOR JCL\n                                 JL  FOR JLOG\n                                 JM  FOR JMSG\n                                 SL  FOR SLOG\n                                 FT  FOR FTIM\n                                 DE  FOR DEL\n                                 RE  FOR REQ\n                         ALSO, IF &QRNB = 1, DELETE COMMANDS TSO, EXEC,\n                           AND MODEL.\nRNB07 - Q24 (ACTIVE)   - WHEN LISTING BATCH JOBS SAY THEY\n                           ARE ON THE XEQ QUEUE INSTEAD OF THE INPUT\n                           QUEUE TO BE MORE CONSISTENT WITH WHAT THE\n                           OPERATORS USUALLY SEE.\nRNB08 - Q26 (SYSOUT)   - IF &QRNB = 1, ALLOW USERS TO MANIPULATE JOBS\n                           THAT START WITH THEIR USERID'S OR THAT HAVE\n                           A NOTIFY FOR THEIR USERID, UNLESS THE USERID\n                           STARTS WITH 'PJS'.\n                         IF &QRNB = 1, ALLOW 'TEC' USERS TO MANIPULATE\n                           ANY TEC JOB OR STARTED TASK OUTPUT.\nRNB09 - Q26 (SYSOUT)   - IF &QRNB = 1, FOR A REQ OPERATION, IF A NEW\n                           CLASS IS NOT GIVEN, USE CLASS C AS THE\n                           DEFAULT NEW CLASS.\nRNB10 - Q27 (PRINT)    - IF &QRNB = 1, USE C AS THE DEFAULT SYSOUT\n                           CLASS.\nRNB11 - Q4  (DDNAME)   - ALLOW DDNAME COMMAND TO BE\n                           ISSUED AS   DDNAME JOBID S\n                           WHERE THE S INDICATES THAT THE SPIN DATA\n                           SETS SHOULD ALSO BE LISTED. THIS WAS ADDED\n                           BECAUSE WE HAVE SOME LONG RUNNING BATCH JOBS\n                           (IMS) THAT SPIN THINGS AND THE STANDARD Q\n                           COMMAND DOESN'T SEARCH THE SPIN Q FOR BATCH\n                           JOBS.\nRNB12 - Q4  (DDNAME)   - IF &QSP = 1, DON'T FORMAT THE MESSAGE 'ALREADY\n                           PRINTED', AS IT APPEARS THAT THE FLAG BIT\n                           IN THE PDDB IS NOT USED ANY MORE, CAUSING\n                           ALL SPIN DATA SETS TO APPEAR PRINTED, EVEN\n                           WHEN THEY'RE NOT.\nRNB13 - Q5  (DISPLAY)  - FIX SOME PROBLEMS WITH TCAM\n                           AND THE PROCESSING OF THE TEST-REQUEST,\n                           SYSTEM-REQUEST, AND THE PA2/PA3 KEYS.\nRNB14 - Q5  (DISPLAY)  - BUG FIX FOR FULL-SCREEN PROCESSING. WITH THIS\n                           FIX THE USER CAN ENTER A COMMAND IN EITHER\n                           INPUT FIELD, NOT JUST THE BOTTOM ONE.\nRNB15 - Q5  (DISPLAY)  - RESTORE THE PFK DEFINITIONS FOR\n                           PF7/8 TO '- 27' AND '+ 27' AS ORIGINALLY\n                           SUPPLIED BY THE ICBC MOD. WE DON'T HAVE\n                           THE OTHER 3278 MODELS, AND SCROLLING IS\n                           EASIER THIS WAY. WITH NERDC'S CHANGES TO\n                           MAKE THE KEYS 'PB' AND 'PF' IT IS DIFFICULT\n                           TO SCROLL UP OR DOWN A FEW LINES.\nRNB16 - Q20 (SEARCH)   - PROCESS BOTH THE LOCAL AND REMOTE QUEUES FOR\n                           JOBS AWAITING PRINT/PUNCH.\n                         ALSO FIX A BUG IN UF020 THAT WAS CLEARING THE\n                           JOEFLAG  WHEN JUST THE JOEJQE POINTER SHOULD\n                           BE CLEARED.\nRNB17 - Q7  (FORMAT)   - WHEN FORMATTING JOES:\n                           (1) IF THE JOE IS BEING PROCESSED BY PSO,\n                               INDICATE EXT-WTR FOR A DEVICE TYPE.\n                           (2) USE $JOEBUSY FLAG TO INDICATE WHETHER JOB\n                               IS REALLY PRINTING/PUNCHING. OTHERWISE,\n                               AN INTERRUPTED JOB STILL SHOWS AS ON THE\n                               PRINTER/PUNCH.\n                           (3) FOR SP2, FIX A BUG IN GETTING TO THE\n                               CHECKPOINT JOE AND IN COMPUTING THE LINES\n                               LEFT TO PRINT/PUNCH.\n                           (4) FOR SP2, IF THE JOE IS NOT ACTIVE, BUT\n                               THE CHECKPOINT JOE IS VALID, SHOW THE\n                               LINES LEFT, NOT THE ORIGINAL LINE COUNT.\nRNB18 - Q7  (FORMAT)   - DISTINGUISH BETWEEN JOES WITH REMOTE ROUTING\n                           AND THOSE WITH SPECIAL LOCAL ROUTING (DESTID\n                           INITIALIZATION STATEMENT IN JES PARMS).\nRNB19 - Q20 (SEARCH)   - FOR STATUS OR DJ COMMANDS IN THE SP2 VERSION,\n                           ALSO SEARCH THE DUMP Q, THE CONVERSION Q,\n                           AND THE OUTPUT Q. THIS ALLOWS THE USER TO\n                           FIND HIS JOB IF IT'S AWAITING DUMP, AWAITING\n                           CONVERSION, OR AWAITING OUTPUT PROCESSING.\n      - Q7  (FORMAT)   - WHEN LISTING JQE'S, DON'T ASSUME INPUT QUEUE\n                           BUT USE JQETYPE INSTEAD. ALSO, SPECIAL\n                           HANDLING FOR AWAITING CONVERSION, AWAITING\n                           DUMP, AND AWAITING OUTPUT.\nRNB20 - Q7  (FORMAT)   - DISTINGUISH BETWEEN NORMAL HOLD, HELD VIA $HA,\n                           AND DUPLICATE HOLD. ALSO, FOR JOES, IF THE\n                           SELECT=NO FLAG IS ON, FLAG WITH S=N TO SHOW\n                           WHY THE OUTPUT WON'T PRINT.\nRNB21 - Q7  (FORMAT)   - FIX THE SETDEVIC ROUTINE FOR SP2 SO THE PROPER\n                           DEVICE NAMES SHOW UP FOR JOBS ON PRINTERS,\n                           ETC.\nRNB22 - Q6  (FINDJOB)  - IF JOBNAME = *, AFTER READING THE JCT, ENSURE\n                           THAT JQEJNAME = JCTJNAME AND THAT QPJOBID =\n                           JCTJBKEY IN CASE THE JOB HAS PURGED AND THE\n                           JCT HAS BEEN REUSED SINCE WE LAST READ THE\n                           CHECKPOINT. THIS IS UNLIKELY, BUT SEEMS TO BE\n                           POSSIBLE.\nRNB23 - Q8  (HELP)     - MISCELLANEOUS CHANGES TO THE NERDC HELP INFO.\n                           THE ORIGINAL NERDC VERSION IS MEMBER $Q8, AND\n                           THE OLD RNB MEMBER IS #Q8.\nRNB24 - Q23 (INITS)    - BUG FIX, AS SUGGESTED BY JACK SHUDEL\nRNB25 - Q7  (FORMAT)   - ADD 'COUNT' OPTION TO THE HO COMMAND TO HELP\n                           FIND WHICH JOBS ARE TIEING UP SPOOL SPACE.\n                           WHEN THE COUNT OPTION IS USED, THE JCT FOR\n                           EACH JQE WITH HELD OUTPUT WILL BE READ AND\n                           THE JCT TOTAL LINE COUNT WILL BE DISPLAYED.\nRNB26 - Q24 (ACTIVE)   - BUG FIX (SORT OF): THE DC COMMAND WAS SHOWING\n                           A LOT OF STRANGE JOBS. THIS FIX MAKES IT MORE\n                           REASONABLE, BUT IT'S STILL NOT QUITE RIGHT.\n                           ALL OF THE STARTED TASKS, E.G. TCAM, DON'T\n                           SHOW UP.\n\n========================================================================\nKNOWN PROBLEMS:\n  (1) DC S DOESN'T SHOW ALL OF THE STARTED TASKS.\n  (2) JOE PRIORITIES ARE (PROBABLY) INCORRECT, AS THE CALCULATIONS\n      CHANGED FOR SP2 AND Q HASN'T BEEN UPDATED TO REFLECT THAT.\n  (3) IT APPEARS THAT THE LINE COUNTS FOR JOBS ON A REMOTE PRINTER ARE\n      MAINTAINED DIFFERENTLY THAT FOR JOBS ON A LOCAL PRINTER. THIS HAS\n      NOT BEEN FULLY RESEARCHED YET, BUT IT SEEMS THAT THE LINE COUNT\n      REPORTED BY Q FOR A JOB ON A REMOTE PRINTER IS APPROXIMATELY THE\n      NUMBER OF LINES PRINTED, NOT THE NUMBER THAT REMAIN TO BE PRINTED.\n  (4) ONLY 2 (POSSIBLY 3) CHARACTER REMOTE NUMBERS CAN BE USED.\n  (5) NJE NODE NUMBERS ARE IGNORED.\n  (6) THE NJE JOB/SYSOUT TRANSMITTERS AND RECEIVERS ARE IGNORED AS\n      DEVICES AND AS QUEUES.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SP": {"ttr": 771, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THE SP VERSION OF THE QUEUE COMMAND IS OBTAINED BY SPECIFYING\n\"SYSPARM=((SP))\" FOR THE ASSEMBLIES (SEE MEMBER $NERJCL2).\nMEMBER QSTART CAN ALSO BE UPDATED TO CHANGE THE DEFAULT FLAG SETTING\nTO ELIMINATE THE NEED TO SPECIFY ANY SYSPARM AT ALL.\n\nSEE MEMBER $UFDOC FOR A DESCRIPTION OF THE OTHER MODIFICATIONS.\n\nTHIS VERSION OF QUEUE WAS DEVELOPED AS IN INTERNAL AID FOR THE DEBUGGING\nOF THE NEW JES2 SYSTEM, WHICH NORMALLY RUNS AS A SECONDARY SUBSYSTEM.\nIT IS BELIEVED THAT MOST OF THE DISPLAY COMMANDS WORK PROPERLY, WITH THE\nEXCEPTION OF STATUS AND DO.  BOTH OF THERE COMMANDS ARE IN MODULE Q20\n(SEARCH).  THE PROBLEM WITH THE DISPLAY OUTPUT COMMANDS IS THAT THERE\nARE NOW TWO QUEUES FOR OUTPUT JOES, ONE FOR LOCAL ROUTING, AND THE OTHER\nFOR REMOTE ROUTING.  AT THIS TIME ONLY THE LOCAL ROUTING QUEUE IS\nPROCESSED.  THE PROBLEM WITH THE STATUS COMMAND SEEMS TO BE THAT THE\nCOMMAND SKIPS SOME OF THE QUEUES ENTIRELY, BUT THAT SEEMED TO BE A\nPROBLEM WITH THE OLD VERSION OF THE COMMAND AS WELL.\nIN PARTICULAR, JOBS IN THE OUTPUT QUEUE (NOT HARDCOPY) SEEM TO\nBE IGNORED IN ALL ENVIRONMENTS.\n\nTHIS VERSION WILL NOT WORK IF ANY OF THE DEFINED SPOOL VOLUMES\nARE NOT AVAILABLE, INCLUDING A SPOOL VOLUME THAT WAS ADDED AND\nTHEN PURGED AT A LATER TIME.\n\nTHERE WAS ONE PROBLEM WITH THE SYSLOG COMMAND CAUSED BY A CHANGE IN\nTHE WAS THAT SPUN OUTPUT PDDB'S ARE GENERATED.  IT APPEARS THAT A\nSPUN SYSOUT WILL NOW HAVE TWO SEPARATE PDDB'S; A NULL ONE IN THE\nNORMAL IOT, AND THE TRUE ONE IN A SPIN IOT.  BECAUSE BOTH OF THE\nPDDB'S HAVE THE SAME NUMBER, NORMAL QUEUE PROCESSING WOULD LOCATE\nTHE FIRST ONE, SEE THAT IT WAS NULL, AND INDICATE THAT THE FILE WAS\nEMPTY.  CODE HAS BEEN CHANGED IN LISTDS TO CHECK IF THE MTTR FIELD\nIS ZERO BEFORE TESTING FOR THE PROPER DATASET ID NUMBER.  ANY PDDB\nWITH A ZERO MTTR FIELD WILL BE IGNORED.  THE ONLY POSSIBLE CHANGE\nTHAT THE USER WILL NOTICE IS THAT THERE WILL BE TIMES WHEN THE OLD\nVERSION WOULD INDICATE \"DATASET IS EMPTY\" WHILE THE NEW VERSION\nWILL INDICATE \"DATASET ID NOT FOUND\".\n\nAT THIS TIME THE FINDPDDB ROUTINE HAS NOT BEEN CHANGED, SO THE\nDD COMMAND WILL PROBABLY GIVE SOME INCORRECT INDICATIONS ABOUT\nTHE STATUS OF SOME SYSOUTS.\n\nA PDDB COMMAND HAS BEEN ADDED THAT WILL DUMP OUT SOME OF THE MORE\nRELEVANT INFORMATION ABOUT THE PDDB'S IN GENERAL, OR DUMP OUT\nSELECTED ONES IN HEX, TO ASSIST IN FIGURING OUT WHAT IS REALLY\nGOING ON.\n\nI WOULD APPRECIATE HEARING FROM ANYONE WHO COMES UP WITH EITHER\nADDITIONAL BUGS OR FIXES TO THE KNOWN ONES.  ALSO, I WILL TRY TO\nPASS ON ANY FIXES TO THOSE USERS THAT I AM AWARE OF, SO PLEASE DROP\nME A NOTE IF YOU GET THIS OFF OF ONE OF THE MODS TAPES.\n\nJACK SCHUDEL\nNORTHEAST REGIONAL DATA CENTER\n233 SSRB, UNIVERSITY OF FLORIDA\nGAINESVILLE, FLORIDA  32611\n(904) 392-4601\nSHARE CODE - UF\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE601": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04>\\x00\\x00\\x01\\x03\"\\x7f\\x01\\x03\"\\x7f\\x08X\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf2@@@'", "ispf": {"version": "04.62", "flags": 0, "createdate": "2003-08-15T00:00:00", "modifydate": "2003-08-15T08:58:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT-462"}, "text": "//***FILE 601 is from Greg Price, and contains a version of QUEUE   *   FILE 601\n//*           for MVS 3.8 (which is normally run under Hercules).   *   FILE 601\n//*                                                                 *   FILE 601\n//*           As is well known, the QUEUE program is for browsing   *   FILE 601\n//*           JES2 SPOOL files, especially program print output.    *   FILE 601\n//*                                                                 *   FILE 601\n//*           This version of QUEUE was adapted from an early       *   FILE 601\n//*           version distributed by Jack Schudel, and innovated    *   FILE 601\n//*           by several early JES2 geniuses.  Greg (in his usual   *   FILE 601\n//*           fashion) has spiced this version up quite a bit.      *   FILE 601\n//*           Please look at member $GPDOC to see some detail       *   FILE 601\n//*           about the very nice improvements to QUEUE that Greg   *   FILE 601\n//*           has made.                                             *   FILE 601\n//*                                                                 *   FILE 601\n//*           emails:  \"Greg Price\" <greg.price@optushome.com.au>   *   FILE 601\n//*                    gregp@prycroft6.com.au                       *   FILE 601\n//*                                                                 *   FILE 601\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACTIVE": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x07\\x00\\x00\\x01\\x02\\x16o\\x01\\x02 ?\\x00\\x19\\x00\\xf8\\x00\\xd1\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.07", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2002-07-22T00:19:00", "lines": 248, "newlines": 209, "modlines": 0, "user": "GREG"}, "text": "ACTIVE   QSTART 'QUEUE COMMAND - LIST ACTIVE JOB STATUS'\n******************************************************************\n* RNB CHANGES:                                                   *\n*       (1) RNB07 - WHEN LISTING BATCH JOBS, SAY THEY            *\n*                   ARE ON THE XEQ QUEUE INSTEAD OF INPUT QUEUE. *\n*       (1) RNB26 - BUG FIX TO STOP LISTING A LOT OF STRANGE JOBS*\n******************************************************************\n         GBLB  &QSP           MVS/SP OPTION                       UF020\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART    GP@P6\n         USING QCKPT,R9       BASE REG FOR CHECKPOINT AREA\n         L     R9,QVCKPT      LOAD BASE REG\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*        SET THE DISPLAY SELECTION CRITERIA       GP@P6/MAH JULY 2002 *\n*                                                                     *\n***********************************************************************\n         MVI   DATYPE,X'00'   CLEAR DISPLAY TYPE INDICATOR\n         LA    R8,QPARM1      R8 <- ADDRESS OF OPERAND\n         LH    R7,QLNG1       R7 <- LENGTH OF OPERAND\n         LTR   R7,R7          OPERAND SUPPLIED?\n         BNZ   CHKJ           -> YES - CHECK IT\n         OI    DATYPE,DAJ+DAS+DAT      INDICATE ALL REQUIRED\n         B     CALLCKPT\nCHKJ     CLI   0(R8),C'J'     ACTIVE JOBS?\n         BE    ISJ            -> YES\n         CLI   0(R8),C'B'     ACTIVE JOBS?\n         BNE   CHKS           -> NO - CHECK STARTED TASKS\nISJ      OI    DATYPE,DAJ     SHOW ACTIVE JOBS REQUIRED\n         B     CONT\nCHKS     CLI   0(R8),C'S'     ACTIVE STARTED TASKS?\n         BNE   CHKT           -> NO - CHECK TSS USERS\n         OI    DATYPE,DAS     SHOW STARTED TASKS REQUIRED\n         B     CONT\nCHKT     CLI   0(R8),C'T'     ACTIVE TSS USERS?\n         BNE   BADPARM        -> NO - BAD PARAMETER\n         OI    DATYPE,DAT     SHOW ACTIVE TSS USERS REQUIRED\nCONT     LA    R8,1(R8)\n         BCT   R7,CHKJ\n******************************************************************UF006\n*                                                                 UF006\n*   CALL - READ JES2 CHECKPOINT ROUTINE                           UF006\n*                                                                 UF006\n******************************************************************UF006\nCALLCKPT L     R15,=V(CKPT)   ADDR OF CKPT ROUTINE                UF006\n         BALR  R14,R15        GO TO IT                            UF006\n         L     R8,16          POINT TO CVT\n         USING CVTDSECT,R8\n***********************************************************************\n*                                                                     *\n*        FIND THE ACTIVE MAIN SUBSYSTEM SSVT                          *\n*                                                                     *\n***********************************************************************\n         L     R7,CVTASVT     POINT TO ASVT\n         L     R2,CVTMSER     POINT TO ASVT\n         USING ASVT,R7\n         L     R7,ASVTMAXU    LOAD THE MAX ASCBS\n         DROP  R7\n         L     R8,CVTJESCT    POINT TO JESCT\n         DROP  R8\n         USING JESCT,R8\n         L     R8,JESSSCT     POINT TO SSCT\n         DROP  R8\n         USING SSCT,R8\n         L     R8,SSCTSSVT    POINT TO SSVT\n         DROP  R8\n         USING SSVT,R8\n***********************************************************************\n*                                                                     *\n*        FIND THE ACTIVE MAIN SUBSYSTEM'S HAVT                        *\n*                                                                     *\n***********************************************************************\n         L     R6,$SVHAVT     POINT TO HAVT\n         LTR   R6,R6          TEST IF ANY PITS\n         BZ    NOHAVT         NO, IGNORE COMMAND\n         LA    R6,4(,R6)      POINT TO FIRST SJB POINTER\n         USING SJBDSECT,R5\n         QHEAD INITHD,X'24',TYP=QDDC   HEADING IN GREEN REVERSE   GP@P6\n***********************************************************************\n*                                                                     *\n*        BUILD THE MESSAGE(S) DESCRIBING THE JOBS                     *\n*                                                                     *\n***********************************************************************\nBLDMSG   MVC   QDMSG,QBLANK   BLANK THE AREA\n         L     R5,0(,R6)      POINT TO SJB\n         LTR   R5,R5          TEST FOR ANY\n         BZ    NEXTSJB\n         L     R4,SJBSJB      TEST FOR BATCH JOB\n         LTR   R4,R4          IS IT\n         BNZ   BATCHCHK\n         L     R3,SJBJQOFF    LOAD JQE OFFSET\n         LTR   R3,R3          ANY JQE?                            RNB26\n         BZ    NEXTSJB        /NO  - TRY NEXT SJB                 RNB26\n         AL    R3,QCJQTA      ADD TO JQE ORIGIN\n         USING JQEDSECT,R3    BASE REG FOR JQE\n         AIF   (&QSP).QSP1                                        UF020\n         LH    R0,JQEJOBNO    GET JOB NO.\n         CH    R0,=H'20000'   TSO USER?\n         BNL   TSOCHK         YES. GO PROCESS\n         B     STCCHK         NO. GO PROCESS AS STC\n         AGO   .QSP2                                              UF020\n.QSP1    ANOP                                                     UF020\n         TM    JQEFLAG3,QUEJOB  BATCH JOB?  (SHOULDN'T BE)        RNB26\n         BO    UNK              /YES - SAY UNKNOWN                RNB26\n         TM    JQEFLAG3,QUETSU  TSO USER?                         UF020\n         BO    TSOCHK         YES, GO PROCESS                     UF020\n         TM    JQEFLAG3,QUESTC  STARTED TASK?                     UF020\n         BO    STCCHK         YES, GO PROCESS                     UF020\nUNK      MVC   QUEUE,=CL8'UNKNOWN'                                UF020\n         B     NOTTSO         PRINT WHATEVER WE CAN FIND          UF020\n.QSP2    ANOP                                                     UF020\nBATCHCHK TM    DATYPE,DAJ     BATCH DISPLAY ?                    GP/MAH\n         BNO   NEXTSJB        NO. GET NEXT SJB                   GP/MAH\n         LR    R5,R4          COPY THE SJB ADDRESS\n         L     R3,SJBJQOFF    POINT TO JQE OFFSET\n         LTR   R3,R3          ANY JQE?                            RNB26\n         BZ    NEXTSJB        /NO  - TRY NEXT SJB                 RNB26\n         AL    R3,QCJQTA      POINT TO THE JQE\n         IC    R0,JQETYPE     GET THE JOB TYPE\n         MVC   QUEUE,=CL8'XEQ'                              GP@P6 RNB07\n         STC   R0,QUEUE+7     SET THE QUEUE TYPE\n         OI    QUEUE+7,X'80'  SET THE PRINTABLE QUEUE TYPE\n         B     NOTTSO         GO TO COMMON ROUTINE\nTSOCHK   TM    DATYPE,DAT     TSO DISPLAY ?                      GP/MAH\n         BNO   NEXTSJB        NO. GET NEXT SJB                   GP/MAH\n         MVC   QUEUE,=CL8'TSO USER'\n         B     NOTTSO\nSTCCHK   TM    DATYPE,DAS     STC DISPLAY ?                      GP/MAH\n         BNO   NEXTSJB        NO. GET NEXT SJB                   GP/MAH\n         MVC   QUEUE,=CL8'SYSTEM Q'\nNOTTSO   L     R1,SJBASCBP    POINT TO ASCB\n         USING ASCB,R1\n         LM    R14,R15,ASCBEJST GET THE CPU TIME\n         SRDL  R14,12         SKIP THE GARBAGE\n         D     R14,=F'10000'  GET THE VALUE IN .01 SECS\n         CVD   R15,CONVERT    GET THE DECIMAL VALUE\n         MVC   TCBTIME,EDCPU  MOVE EDIT MASK\n         ED    TCBTIME,CONVERT+4 EDIT THE NUMBER\n         MVI   TCBTIME+L'TCBTIME-1,C'S' SET SECONDS\n         LM    R14,R15,ASCBSRBT GET THE CPU TIME\n         SRDL  R14,12         SKIP THE GARBAGE\n         D     R14,=F'10000'  GET THE VALUE IN .01 SECS\n         CVD   R15,CONVERT    GET THE DECIMAL VALUE\n         MVC   SRBTIME,EDCPU  MOVE EDIT MASK\n         ED    SRBTIME,CONVERT+4 EDIT THE NUMBER\n         MVI   SRBTIME+L'SRBTIME-1,C'S' SET SECONDS\n         MVC   JOBNAME,SJBJOBNM MOVE IN JOBNAME\n         LH    R14,JQEJOBNO   LOAD JOB NUMBER\n         CVD   R14,CONVERT    GET THE DECIMAL VALUE\n         MVC   JOBNUM,ED5     GET THE CHARACTER VALUE\n         ED    JOBNUM,CONVERT+5 GET THE CHARACTER VALUE\n         LR    R4,R2          COPY THE ADDRESS\nFINDCSCB ICM   R4,15,0(R4)    POINT TO THE NEXT CSCB\n         BZ    DONECSCB       NO MATCHING CSCB WAS FOUND          GP@P6\n         USING CSCDSECT,R4\n         CLC   CHKEY,JQEJNAME TEST FOR RIGHT JOB\n         BNE   FINDCSCB       NOPE\n         MVC   STEPNAME,CHSTEP MOVE IN STEPNAME\n         MVC   PROCSTEP,CHPROCSN MOVE IN THE PROCSTEP NAME\n         DROP  R4\nDONECSCB L     R15,QVDSPL     POINT TO QUEUE DISPLAY VARIABLES    GP@P6\n         USING QDISPLAY,R15   BASE REG FOR DISPLAY AREA           GP@P6\n         LH    R0,ASCBFMCT    GET NUMBER OF FRAMES\n         MVI   QDLNCODE,X'05' TURQUOISE FOR SWAPPED OUT           GP@P6\n         SLA   R0,2           GET NUMBER OF K                     GP@P6\n         BZ    SWPCLROK       ADDRESS SPACE IS SWAPPED OUT        GP@P6\n         MVI   QDLNCODE,X'06' YELLOW FOR SWAPPED IN               GP@P6\nSWPCLROK CVD   R0,CONVERT     GET THE DECIMAL VALUE\n         MVC   SLOTS,ED5      MOVE EDIT MASK\n         ED    SLOTS,CONVERT+5 GET THE K\n         MVI   SLOTS+L'SLOTS-1,C'K' SET THE 'K'\n         AIF   (NOT &QPFK).DCNOSEL                                GP@P6\n         MVI   QDMSG,X'0B'    INPUT HIGH INTENSITY                GP@P6\n         MVI   QDMSG+1,C'.'   SUPPLY LEADER DOT                   GP@P6\n         MVI   QDMSG+2,X'0C'  OUTPUT LOW INTENSITY                GP@P6\n.DCNOSEL ANOP                                                     GP@P6\n         MVC   QDMLNG,=H'80'  SET THE LENGTH\n         LA    R0,QDMSG       GET THE ADDRESS\n         ST    R0,QDMSGA      SET THE ADDRESS\n         DROP  R15                                                GP@P6\n         L     R15,=V(DISPLAY) POINT TO THE ROUTINE\n         BALR  R14,R15        CALL THE ROUTINE\n***********************************************************************\n*                                                                     *\n*        SEND THE MESSAGE DESCRIBING THE PIT                          *\n*                                                                     *\n***********************************************************************\nNEXTSJB  LA    R6,4(,R6)      POINT TO NEXT HAVT POINTER\n         DROP  R1,R5\n         BCT   R7,BLDMSG      TEST FOR NEXT HAVT POINTER\n***********************************************************************\n*                                                                     *\n*        END IT ALL                                                   *\n*                                                                     *\n***********************************************************************\nEND      QSTOP\nNOHAVT   QTILT '***** NO JOBS TO DISPLAY *****'\nBADPARM  QTILT '***** INVALID OPERAND *****'                     GP/MAH\nINITHD   DC    CL80'      QUEUE  JOBNAME   JOB#  STEPNAME PROCSTEP  FRA*\n               MES    TCB-TIME    SRB-TIME'\nED5      DC    X'402020202120'\nEDCPU    DC    X'4020206B2021204B2020'\n         LTORG\n***********************************************************************\n*                                                                     *\n*        DESCRIBE ALL THE DSECTS NEEDED BY THIS MODULE                *\n*                                                                     *\n***********************************************************************\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nACTIVE   CSECT ,                                                  UF023\n         $CVT\n         $JESCT\n         $SSCT\n         $SVT\n         $ASVT\n         $ASCB\n         $CSCB\n         $DEB                                                     UF021\n         $SJB\n         $JQE\n         QCOMMON\n         ORG   QDMSG\n         DS    CL4\nQUEUE    DS    CL8\n         DS    C\nJOBNAME  DS    CL8\n         DS    C\nJOBNUM   DS    CL6\n         DS    C\nSTEPNAME DS    CL8\n         DS    C\nPROCSTEP DS    CL8\n         DS    C\nSLOTS    DS    CL7\n         DS    C\nTCBTIME  DS    CL11\n         DS    C\nSRBTIME  DS    CL11\n         DS    C\nWORK     DSECT\n         DS    CL80\nCONVERT  DS    D\nDATYPE   DS    X                   DISPLAY TYPE REQUIRED         GP/MAH\nDAJ      EQU   X'01'                 ACTIVE JOBS                 GP/MAH\nDAS      EQU   X'02'                 ACTIVE STARTED TASKS        GP/MAH\nDAT      EQU   X'04'                 ACTIVE TSO USERS            GP/MAH\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLOCATE": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x17?\\x01\\x02\\x17?\\x16B\\x00N\\x00N\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2002-06-22T16:42:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "GREG"}, "text": "ALLOCATE QSTART 'QUEUE COMMAND - DATASET ALLOCATION ROUTINES'\n         USING QDAIR,R10      BASE REG FOR DAIR WORK\n         L     R10,QVDAIR     LOAD ADDR OF DAIR WORK\n         USING QCKPT,R9       BASE REG FOR CKPT WORK ARES\n         L     R9,QVCKPT      LOAD ADDR\n***********************************************************************\n*                                                                     *\n*   DETERMINE FUNCTION                                                *\n*                                                                     *\n***********************************************************************\n         CLI   DAIRFLAG,X'08' IS THE FUNCTION ALLOCATE?\n         BE    ALLOC          YES. DO IT.\n         CLI   DAIRFLAG,X'18' IS THE FUNCTION FREE?\n         BE    FREE           YES. DO IT.\n         B     ABEND99        INVALID FUNCTION. ABANDON SHIP.\n***********************************************************************\n*                                                                     *\n*   FREE DDNAME(XXXXXXXX)                                             *\n*                                                                     *\n***********************************************************************\nFREE     LA    R1,DA18CD      LOAD ADDR OF FREE PARM LIST\n         ST    R1,DAPLDAPB    STORE IN DAIR CALL LIST\n         BAL   R2,CALLDAIR    CALL DAIR\n         B     STOP           RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   ALLOC DDNAME(XXXXXXXX) DSNAME(YYYYYYYY) SHR                       *\n*                                                                     *\n***********************************************************************\nALLOC    MVC   DA18DDN,DA08DDN MOVE DDNAME TO FREE LIST\n         LA    R1,DA18CD      LOAD ADDR OF FREE PARM LIST\n         ST    R1,DAPLDAPB    STORE IN DAIR CALL LIST\n         BAL   R2,CALLDAIR    CALL DAIR - FREE THE DDNAME\n         LA    R1,DA08CD      LOAD ADDR OF ALLOC PARM LIST\n         ST    R1,DAPLDAPB    STORE IN DAIR CALL LIST\n         BAL   R2,CALLDAIR    CALL DAIR - ALLOCATE THE DATASET\n         B     STOP           RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   RETURN TO CALLING ROUTINE                                         *\n*                                                                     *\n***********************************************************************\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   CALL DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR)                  *\n*                                                                     *\n***********************************************************************\nCALLDAIR XC    DAIRECB,DAIRECB CLEAR ECB\n         LA    R1,DAPLUPT     LOAD ADDR OF DAIR CALL LIST\n         LINK  EP=IKJEFD00    CALL DAIR\n         LTR   R15,R15        IS RETURN CODE ZERO?\n         BZR   R2             YES. RETURN.\n         CH    R15,=H'28'     IS DATASET ALREADY FREE?\n         BER   R2             YES. RETURN.\n         CLC   DA08DDN,=C'HASPSAVE' IS THIS A SAVE?\n         BNE   ABEND99        NO. ABEND.\n         QTILT '*** UNABLE TO ALLOCATE DATASET ***'\n***********************************************************************\n*                                                                     *\n*   DAIR HAS FAILED. TAKE A PICTURE AND GO HOME.                      *\n*                                                                     *\n***********************************************************************\nABEND99  LA    R1,MESSAGE     POINT TO THE MESSAGE                GP@P6\n         LA    R0,L'MESSAGE   SET MESSAGE LENGTH                  GP@P6\n         TPUT  (1),(0),R      TELL SAD STORY                 GP@P6 PWF*\n         ABEND 99,DUMP        ABEND THE JOB. USER CODE 0099.\n***********************************************************************\n*                                                                     *\n*   CONSTANTS AND ASSORTED GARBAGE                                    *\n*                                                                     *\n***********************************************************************\n         LTORG\nMESSAGE  DC    C'A MAJOR DISASTER HAS OCCURRED IN DAIR PROCESSING.'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLD3270": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x0b\\x00\\x00\\x01\\x02\\x17?\\x01\\x03\\x04o\\x03E\\x00\\xb5\\x00\\xe5\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.11", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2003-02-15T03:45:00", "lines": 181, "newlines": 229, "modlines": 0, "user": "GREG"}, "text": "BLD3270  QSTART 'QUEUE COMMAND - BUILD 3270 DATA STREAM'\n***********************************************************************\n*                                                                     *\n*   WRITTEN BY GREG PRICE OF PRYCROFT SIX PTY LTD IN JUNE 2002.       *\n*                                                                     *\n*   THE PURPOSE OF THIS ROUTINE IS TO BUILD A 3270 DATA STREAM FROM   *\n*   THE DISPLAY BUFFER AND ITS SHADOW BUFFER.  THE BUFFERS CONTAIN    *\n*   ONE BYTE EACH PERTAINING TO EACH SCREEN LOCATION.                 *\n*                                                                     *\n*   THE PRIMARY BUFFER CONTAINS THE TEXT TO BE SHOWN ON THE SCREEN    *\n*   PLUS INTERNAL CODES FOR EACH FIELD ATTRIBUTE BYTE.                *\n*                                                                     *\n*   THE SHADOW BUFFER CONTAINS INTERNAL CODES FOR THE CHARACTER       *\n*   ATTRIBUTES OF THE DISPLAYABLE TEXT.  IT IS DATA FROM THE SHADOW   *\n*   BUFFER THAT CAUSES 3270 EXTENDED DATA STREAM ORDERS TO BE         *\n*   GENERATED.  TO REMOVE 3270 EDS ORDERS FROM THE GENERATED OUTPUT   *\n*   ONE SIMPLY HAS TO IGNORE THE SHADOW BUFFER IN THIS ROUTINE        *\n*   WITHOUT CHANGING ANY OTHER QUEUE COMMAND SUBROUTINE.              *\n*                                                                     *\n*   THE ONLY EDS ORDER THAT CAN BE GENERATED HERE IS SET ATTRIBUTE    *\n*   (SA) AND ONLY COLOUR AND EXTENDED HIGHLIGHTING ARE USED.          *\n*                                                                     *\n*   APL CHARACTERS AND/OR GRAPHIC ESCAPE ORDERS ARE NOT USED.         *\n*                                                                     *\n*   START FIELD EXTENDED (SFE) CANNOT BE USED BECAUSE THE TSO/VTAM    *\n*   SHIPPED IN THE AVAILABLE MVS 3.8J DISTRIBUTION DOES NOT SUPPORT   *\n*   A 'NOEDIT' TPUT.  A 'FULLSCR' TPUT WILL NOT TRANSMIT THE SFE      *\n*   ATTRIBUTE PAIR COUNT UNALTERED, THUS CORRUPTING THE DATA STREAM.  *\n*                                                                     *\n*   THE SHADOW BUFFER BYTE CORRESPONDING TO A FIELD ATTRIBUTE BYTE    *\n*   IS IGNORED.                                                       *\n*                                                                     *\n*   A NULL IN THE SHADOW BUFFER RESETS EXTENDED HIGHLIGHTING.         *\n*                                                                     *\n*   FIELD ATTRIBUTE INTERNAL CODES ARE:                               *\n*         0A - UNPROTECTED, LOW INTENSITY                             *\n*         0B - UNPROTECTED, HIGH INTENSITY                            *\n*         0C - PROTECTED, LOW INTENSITY                               *\n*         0D - PROTECTED, HIGH INTENSITY                              *\n*         0D - PROTECTED, HIGH INTENSITY                              *\n*         0E - UNPROTECTED, INVISIBLE                                 *\n*         0F - PROTECTED, INVISIBLE                                   *\n*                                                                     *\n*   CHARACTER ATTRIBUTE INTERNAL CODES ARE OF THE FORM YZ             *\n*   WHERE THE VALUES OF Y ARE:                                        *\n*          0 - NO EXTENDED HIGHLIGHTING                               *\n*          1 - BLINKING                                               *\n*          2 - REVERSE VIDEO                                          *\n*          3 - UNDERSCORE                                             *\n*   AND THE VALUES OF Z ARE:                                          *\n*          1 - BLUE                                                   *\n*          2 - RED                                                    *\n*          3 - PINK                                                   *\n*          4 - GREEN                                                  *\n*          5 - TURQUOISE                                              *\n*          6 - YELLOW                                                 *\n*          7 - WHITE                                                  *\n*                                                                     *\n***********************************************************************\n         USING WORK,R13            WORKING STORAGE\n         L     R10,QVDSPL          ADDR OF DISPLAY WORK AREA\n         USING QDISPLAY,R10        BASE REG FOR DISPLAY WORK AREA\n***********************************************************************\n*                                                                     *\n*   LOCATE BUFFERS AND COPY \"HEADER\"                                  *\n*                                                                     *\n***********************************************************************\n         LA    R2,QDSCREEN         POINT TO SOURCE\n         L     R4,QDCBPRM3         POINT TO TARGET\n         MVC   0(6,R4),0(R2)       COPY DATA STREAM \"HEADER\"\n         LA    R4,6(,R4)           ADJUST TARGET POINTER\n         LA    R2,QDSCRTXT         POINT TO PRIMARY BUFFER\n         L     R3,QDSHADO@         POINT TO SHADOW BUFFER\n         L     R9,QDSCRPLN         GET BYTES TO PROCESS\n         MVI   CRNTHLIT,0          RESET HIGHLIGHT STATUS\n         MVI   CRNTCOLR,0          RESET COLOUR STATUS\n         MVI   CRNTCODE,0          RESET INTERNAL CODE \"CACHE\"\n         SLR   R1,R1               CLEAR FOR INSERT\n***********************************************************************\n*                                                                     *\n*   LOOP THROUGH EACH SCREEN LOCATION                                 *\n*                                                                     *\n***********************************************************************\nBLDLOOP  CLI   0(R2),X'0A'         FIELD ATTRIBUTE CODE?\n         BL    SHADOCHK            NO\n         CLI   0(R2),X'0F'         FIELD ATTRIBUTE CODE?\n         BH    SHADOCHK            NO\n         MVI   0(R4),X'1D'         YES, SUPPLY START FIELD\n         LA    R4,1(,R4)           ADJUST POINTER\n         IC    R1,0(,R2)           LOAD INTERNAL CODE\n         LA    R15,SFCODES-10(R1)  POINT TO ATTRIBUTE BYTE TO LOAD\n         MVC   0(1,R4),0(R15)      LOAD IT\n         B     NEXTBYTE            THIS BUFFER LOCATION NOW PROCESSED\nSHADOCHK TM    QFLAG2,QFLG2EDS     USING EXTENDED DATA STREAM ORDERS?\n         BNO   COPYBYTE            NO, DO NOT REFERENCE SHADOW BUFFER\n         CLC   CRNTCODE,0(R3)      SAME SHADOW CODE AS LAST TIME?\n         BE    COPYBYTE            YES, A 'CACHE\" HIT\n         MVC   CRNTCODE,0(R3)      NO, COPY THE NEW VALUE\n         UNPK  WORKCODE,CRNTCODE   GET NEW HIGHLIGHT SETTING\n         NI    WORKCODE,X'03'      FOLD INTO VALID RANGE\n         CLC   CRNTHLIT,WORKCODE   HAS IT CHANGED?\n         BE    COLORCHK            NO\n         MVC   CRNTHLIT,WORKCODE   YES, UPDATE IT\n         MVI   0(R4),X'28'         SET ATTRIBUTE\n         MVI   1(R4),X'41'         EXTENDED HIGHLIGHTING\n         MVC   2(1,R4),CRNTHLIT    COPY INTERNAL CODE\n         TR    2(1,R4),TABLHLIT    CONVERT TO 3270 ORDER CODE\n         LA    R4,3(,R4)           POINT PAST SA ORDER\nCOLORCHK MVC   WORKCODE,CRNTCODE   GET NEW COLOUR SETTING\n         NI    WORKCODE,X'07'      FOLD INTO VALID RANGE\n         BZ    COPYBYTE            LEAVE COLOUR UNCHANGED IF NULL\n         CLC   CRNTCOLR,WORKCODE   HAS IT CHANGED?\n         BE    COPYBYTE            NO\n         MVC   CRNTCOLR,WORKCODE   YES, UPDATE IT\n         MVI   0(R4),X'28'         SET ATTRIBUTE\n         MVI   1(R4),X'42'         EXTENDED COLOUR\n         MVC   2(1,R4),CRNTCOLR    COPY INTERNAL CODE\n         TR    2(1,R4),TABLCOLR    CONVERT TO 3270 ORDER CODE\n         LA    R4,3(,R4)           POINT PAST SA ORDER\nCOPYBYTE MVC   0(1,R4),0(R2)       COPY TEXT BYTE\nNEXTBYTE LA    R4,1(,R4)           POINT PAST COPIED BYTE\n         LA    R3,1(,R3)           POINT TO NEXT SHADOW BUFFER BYTE\n         LA    R2,1(,R2)           POINT TO NEXT PRIMARY BUFFER BYTE\n         BCT   R9,BLDLOOP          GO PROCESS NEXT SCREEN BYTE\n***********************************************************************\n*                                                                     *\n*   APPEND ORDER TO PLACE CURSOR                                      *\n*                                                                     *\n***********************************************************************\n         MVI   0(R4),X'11'         SET BUFFER ADDRESS\n         L     R1,QDSCRPLN         GET SCREEN SIZE\n         SH    R1,QDLNELEN         GET OFFSET OF LAST LINE\n         LA    R1,8(,R1)           GET OFFSET OF INPUT AREA\n         STCM  R1,3,1(R4)          SAVE 14-BIT ADDRESS\n         TM    1(R4),X'F0'         PAST LOCATION 4095?\n         BNZ   CSRADROK            YES, USE 14-BIT ADDRESS, NOT 12-BIT\n         SRL   R1,6                GET HIGH-ORDER SIX BITS\n         STC   R1,1(,R4)           SAVE HIGH SIX BITS\n         NI    2(R4),X'3F'         GET LOW SIX BITS\n         TR    1(2,R4),TABLADDR    CONVERT TO 3270 12-BIT ADDRESS CODE\nCSRADROK MVI   3(R4),X'13'         INSERT CURSOR\n         LA    R4,4(,R4)           POINT PAST END OF DATA STREAM\n***********************************************************************\n*                                                                     *\n*   CALL CB3270 TO REDUCE DATA STREAM LENGTH WITH 3270 COMPRESSION    *\n*                                                                     *\n***********************************************************************\n         S     R4,QDCBPRM3         GET THE DATA STREAM LENGTH\n         ST    R4,QDLENGTH         SAVE IT\n         LA    R1,QDCBPRM1         POINT TO PARAMETER LIST\n         L     R15,=V(CB3270)      GET COMPRESSION ROUTINE ENTRY POINT\n         BALR  R14,R15             COMPRESS IN PLACE - QDLENGTH UPDATED\n***********************************************************************\n*                                                                     *\n*   RETURN TO CALLER                                                  *\n*                                                                     *\n***********************************************************************\n         QSTOP\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nTABLADDR DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\nTABLHLIT DC    X'00F1F2F4'         NORMAL, BLINK, REVERSE, UNDERSCORE\nTABLCOLR DC    X'00F1F2F3F4F5F6F7' ZAP THIS TO PREFERRED COLOUR SCHEME\nSFCODES  DC    X'40C860E84C7C'     NO AUTOSKIP          22NOV2002 GP@P6\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nWORK     DSECT\n         DS    CL80\nCRNTHLIT DS    X\nCRNTCOLR DS    X\nCRNTCODE DS    X\nWORKCODE DS    X\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "C": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x1a\\x00\\x00\\x01\\x02\\x15?\\x01\\x020\\x8f\\x196\\x00K\\x00C\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.26", "flags": 0, "createdate": "2002-06-02T00:00:00", "modifydate": "2002-11-04T19:36:00", "lines": 75, "newlines": 67, "modlines": 0, "user": "GREG"}, "text": "//GREGQ    JOB (QUEUE),G.PRICE,CLASS=A,MSGCLASS=A,REGION=3072K,\n//             COND=(0,NE),NOTIFY=GREG\n//ASMLQUE PROC M=MISSING,SP='NOSP,NODEBUG',TEST=NOTEST\n//ASM     EXEC PGM=IFOX00,\n//             PARM='DECK,NOLOAD,TERM,&TEST,SYSPARM((&SP))'\n//SYSLIB   DD  DISP=SHR,DSN=GREG.QUEUE.ASM\n//         DD  DISP=SHR,DSN=SYS1.HASPSRC\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  SPACE=(CYL,(25,5)),UNIT=VIO\n//SYSUT2   DD  SPACE=(CYL,(25,5)),UNIT=VIO\n//SYSUT3   DD  SPACE=(CYL,(25,5)),UNIT=VIO\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=GREG.QUEUE.ASM(&M)\n//SYSPUNCH DD  DISP=SHR,DSN=GREG.QUEUE.OBJ(&M)\n//        PEND\n//Q00     EXEC ASMLQUE,M=QUEUECMN\n//Q01     EXEC ASMLQUE,M=QUEUE\n//Q02     EXEC ASMLQUE,M=ALLOCATE\n//Q03     EXEC ASMLQUE,M=CKPT\n//Q04     EXEC ASMLQUE,M=DDNAME\n//Q05     EXEC ASMLQUE,M=DISPLAY\n//Q06     EXEC ASMLQUE,M=FINDJOB\n//Q07     EXEC ASMLQUE,M=FORMAT\n//Q08     EXEC ASMLQUE,M=HELP\n//Q09     EXEC ASMLQUE,M=HEXBLK\n//Q10     EXEC ASMLQUE,M=INIT\n//Q11     EXEC ASMLQUE,M=JCL\n//Q12     EXEC ASMLQUE,M=JLOG\n//Q13     EXEC ASMLQUE,M=JMSG\n//Q14     EXEC ASMLQUE,M=LIST\n//Q15     EXEC ASMLQUE,M=LISTDS\n//Q16     EXEC ASMLQUE,M=PARSE\n//Q17     EXEC ASMLQUE,M=READSPC\n//Q18     EXEC ASMLQUE,M=REPOS\n//Q19     EXEC ASMLQUE,M=CSAVE\n//Q20     EXEC ASMLQUE,M=SEARCH\n//Q21     EXEC ASMLQUE,M=SYSLOG\n//Q22     EXEC ASMLQUE,M=XDS\n//Q23     EXEC ASMLQUE,M=INITS\n//Q24     EXEC ASMLQUE,M=ACTIVE\n//Q25     EXEC ASMLQUE,M=FINDPDDB\n//Q26     EXEC ASMLQUE,M=SYSOUT\n//Q27     EXEC ASMLQUE,M=PRINT\n//Q28     EXEC ASMLQUE,M=HEXDUMP\n//Q29     EXEC ASMLQUE,M=CJQE\n//Q30     EXEC ASMLQUE,M=CJCT\n//Q31     EXEC ASMLQUE,M=CTSO\n//Q32     EXEC ASMLQUE,M=CHCT\n//Q33     EXEC ASMLQUE,M=CPDDB\n//Q34     EXEC ASMLQUE,M=CJOE\n//Q35     EXEC ASMLQUE,M=BLD3270\n//Q36     EXEC ASMLQUE,M=CB3270\n//Q37     EXEC ASMLQUE,M=CSPIN\n//Q38     EXEC ASMLQUE,M=NEXT\n//LKED    EXEC PGM=IEWL,PARM='XREF,LIST,LET,AC=1'\n//SYSLMOD  DD  DSN=SYS1.PPLIB,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(8,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=GREG.QUEUE.OBJ\n//SYSLIN   DD  *\n INCLUDE SYSLIB(QUEUECMN,QUEUE,ALLOCATE,CKPT,DDNAME)\n INCLUDE SYSLIB(DISPLAY,FINDJOB,FORMAT,HELP,HEXBLK,INIT)\n INCLUDE SYSLIB(JCL,JLOG,JMSG,LIST,LISTDS,PARSE,READSPC)\n INCLUDE SYSLIB(REPOS,CSAVE,SEARCH,SYSLOG,XDS,INITS)\n INCLUDE SYSLIB(ACTIVE,FINDPDDB,SYSOUT,PRINT,HEXDUMP)\n INCLUDE SYSLIB(CJQE,CJCT,CTSO,CHCT,CPDDB,CJOE,BLD3270)\n INCLUDE SYSLIB(CB3270,CSPIN,NEXT)\n ENTRY QUEUE\n ALIAS QUEUE\n ALIAS QUE\n NAME Q(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CB3270": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02\\x17?\\x01\\x03\\x04o\\x03Q\\x00\\xbe\\x00\\xbc\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2003-02-15T03:51:00", "lines": 190, "newlines": 188, "modlines": 0, "user": "GREG"}, "text": "         TITLE 'CB3270 - COMPRESS A 3270 OUTPUT BUFFER - HMD 04/79'\n***********************************************************************\n*                                                                     *\n*        CSECT CB3270 PERFORMS THE FOLLOWING:                         *\n*                                                                     *\n*        1 - COMPRESSES A 3270 TPUT BUFFER                            *\n*                                                                     *\n*            FIVE OR MORE CONSECUTIVE IDENTICAL CHARACTERS ARE        *\n*            REPLACED BY A 4 BYTE REPEAT TO ADDRESS (RA) ORDER.       *\n*                                                                     *\n*            A SET BUFFER ADDRESS (SBA) ORDER TO THE CURRENT          *\n*            SCREEN ADDRESS IS DELETED.                               *\n*                                                                     *\n*            PARAMETERS REQUIRED:                                     *\n*                                                                     *\n*            A THREE WORD PARAMETER LIST IS PROVIDED.                 *\n*                                                                     *\n*            WORD 1 - POINTS TO A FULL WORD CONTAINING THE LENGTH     *\n*                     OF THE UNCOMPRESSED INPUT STRING.  ON EXIT      *\n*                     THE WORD WILL CONTAIN THE LENGTH OF THE         *\n*                     COMPRESSED OUTPUT STRING.                       *\n*                                                                     *\n*            WORD 2 - POINTS TO A FULL WORD CONTAINING THE NUMBER     *\n*                     OF SCREEN LINES.  *** NOW CHANGED ***           *\n*                     NOW IT POINTS TO A FULLWORD CONTAINING THE      *\n*                     NUMBER OF SCREEN LOCATIONS.  THIS CHANGE        *\n*                     MAKES THE ROUTINE SCREEN WIDTH INDEPENDENT.     *\n*                     GREG PRICE, PRYCROFT SIX P/L.  JUNE 2002        *\n*                                                                     *\n*            WORD 3 - POINTS TO THE BEGINNING OF THE INPUT STRING.    *\n*                                                                     *\n*            WORD 4 - POINTS TO THE BEGINNING OF THE OUTPUT AREA.     *\n*                     FOR AN \"IN PLACE\" COMPRESSION, SPECIFY THE      *\n*                     ADDRESS OF THE INPUT STRING FOR BOTH THE        *\n*                     INPUT AND OUTPUT AREAS.                         *\n*                                                                     *\n*            CSECT ATTRIBUTES - RENT, REFR                            *\n*                                                                     *\n***********************************************************************\n         EJECT\nCB3270   CSECT\n         SPACE\n         SAVE  (14,12),,CB3270_HMD_ASSEMBLED_&SYSDATE\n         LR    R12,R15                 COPY ENTRY ADDRESS\n         USING CB3270,R12              DEFINE BASE REGISTER\n         LR    R4,R1                   SAVE PARM LIST ADDRESS\n         L     R3,0(R4)                LOAD ADDRESS OF LENGTH\n         L     R11,0(R3)               LOAD LENGTH\n         L     R9,8(R4)                LOAD INPUT ADDRESS\n         LA    R11,0(R11,R9)           GET END OF INPUT ADDRESS\n         BCTR  R11,0\n         L     R8,12(R4)               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R8                   SAVE ADDRESS\n         L     R2,4(R4)\n         L     R2,0(R2)\n*        MH    R2,=H'80'   DO NOT DO - SCREEN SIZE - NOT LINE COUNT\n         LA    R6,0                    INITIALIZE SCREEN ADDRESS\n*\nTESTORDR CLI   0(R9),IC                TEST FOR INSERT CURSOR\n         BE    COPY1\n         CLI   0(R9),PT                TEST FOR PROGRAM TAB\n         BE    COPY1\n         CLI   0(R9),SF                TEST FOR START FIELD\n         BE    COPY2\n         CLI   0(R9),SA                TEST FOR SET ATTRIBUTE\n         BE    COPY3X\n         CLI   0(R9),SFE               TEST FOR START FIELD EXTENDED\n         BE    COPYX\n         CLI   0(R9),SBA               TEST FOR SET BUFFER ADDRESS\n         BE    COPY3\n         CLI   0(R9),EUA               TEST FOR ERASE UNPROTECTED\n         BE    COPY3\n         CLI   0(R9),RA                TEST FOR REPEAT TO ADDRESS\n         BE    COPY4\n*\n         LA    R10,1                   SET INCREMENT TO 1\n         LR    R7,R9                   SAVE ADDRESS OF FIRST CHAR\nTESTNEXT LA    R6,1(R6)                INCREMENT SCREEN ADDRESS\n         BXH   R9,R10,ENDBUF           INCREMENT TO NEXT CHAR\n         CLC   0(1,R7),0(R9)           SEE IF SAME CHARACTER\n         BE    TESTNEXT                IF SAME, LOOP\n*\nENDBUF   LR    R1,R9                   ADDRESS OF CURRENT CHAR\n         SR    R1,R7                   NUMBER OF SAME CHARACTERS\n         C     R1,=F'4'                AT LEAST 4 FOR RA\n         BH    BUILDRA\n         BCTR  R1,0                    SUBTRACT 1 FOR EXECUTE\n         EX    R1,COPY                 COPY TO OUTPUT AREA\n         LA    R8,1(R1,R8)             INCREMENT OUTPUT ADDRESS\n         CR    R9,R11                  SEE IF ANY MORE\n         BH    OUT\n         B     TESTORDR\n*\nBUILDRA  MVC   3(1,R8),0(R7)           COPY CHARACTER\n         MVI   0(R8),RA                MOVE IN RA ORDER CODE\n         CR    R6,R2\n         BL    GETADDR\n         SR    R6,R2\nGETADDR  STCM  R6,3,1(R8)\n         TM    1(R8),X'F0'             LOCATION OVER 4095?\n         BNZ   GOTADDR                 YES, USE 14-BIT ADDRESS\n         SR    R14,R14                 CONVERT SCREEN ADDRESS TO\n         LR    R15,R6                       3270 ADDRESS CODE\n         SLDL  R14,26\n         SRL   R15,26\n         IC    R14,TABLE(R14)\n         IC    R15,TABLE(R15)\n         STC   R14,1(R8)\n         STC   R15,2(R8)\nGOTADDR  LA    R8,4(R8)                INCREMENT OUTPUT AREA ADDRESS\n         CR    R9,R11                  SEE IF ANY MORE\n         BH    OUT\n         B     TESTORDR\n*\nCOPY1    LA    R10,1                   SET COUNT\n         B     COPYDATA\nCOPYX    SLR   R10,R10                 CLEAR FOR INSERT\n         IC    R10,1(R9)               GET ATTRIBUTE PAIR COUNT\n         LA    R10,1(R10)              COUNT SFE,COUNT AS A PAIR\n         SLA   R10,1                   GET THE BYTE COUNT\n         B     COPYATTR\nCOPY2    LA    R10,2                   SET COUNT\nCOPYATTR LA    R6,1(R6)                INCREMENT SCREEN ADDR FOR ATTR\n         B     COPYDATA\nCOPY3X   LA    R10,3                   SET COUNT\n         B     COPYDATA\nCOPY3    LA    R10,3                   SET COUNT\n         B     UPDATADR\nCOPY4    LA    R10,4                   SET COUNT\nUPDATADR IC    R15,1(R9)               CONVERT ADDRESS TO SCREEN POS.\n         SLL   R15,8\n         IC    R15,2(R9)\n         SLDL  R14,24\n         SLL   R15,2\n         SRDL  R14,6\n         SRL   R15,20\n         CR    R6,R15                  SEE IF ALREADY AT THIS ADDRESS\n         BNE   RESETADR\n         CLI   0(R9),SBA               IF ORDER IS SBA, SKIP IT\n         BE    INCRPTR\nRESETADR LR    R6,R15                  UPDATE SCREEN ADDRESS\n*\nCOPYDATA BCTR  R10,0                   DECREMENT COUNT FOR EXECUTE\n         LR    R7,R9                   COPY SOURCE ADDRESS\n         EX    R10,COPY                COPY TO OUTPUT AREA\n         LA    R10,1(R10)              RESTORE COUNT\n         LA    R8,0(R10,R8)            UPDATE OUTPUT AREA ADDRESS\nINCRPTR  BXLE  R9,R10,TESTORDR         INCREMENT ADDRESS AND LOOP\n*\nOUT      SR    R8,R5                   CALCULATE OUTPUT LENGTH\n         LA    R8,0(0,R8)              TURN OFF HIGH BIT\n         ST    R8,0(R3)                STORE NEW LENGTH\n         SR    R15,R15                 CLEAR RETURN CODE\n         RETURN (14,12),RC=(15)\n*\n         LTORG\n*\nCOPY     MVC   0(0,R8),0(R7)           << EXECUTED INSTRUCTION >>\n*\nTABLE    DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\nIC       EQU   X'13'\nPT       EQU   X'05'\nSF       EQU   X'1D'\nSA       EQU   X'28'\nSFE      EQU   X'29'\nSBA      EQU   X'11'\nEUA      EQU   X'12'\nRA       EQU   X'3C'\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHCT": {"ttr": 1034, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CHCT     QSTART 'QUEUE COMMAND - DUMP A HCT IN HEX'               UF022\n***********************************************************************\n* HCT                                                                 *\n***********************************************************************\n*                                                                     *\n*   CALL - READ JES2 CHECKPOINT ROUTINE                               *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(CKPT)        ADDR OF CKPT ROUTINE\n         BALR  R14,R15             GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL HEXDUMP TO DUMP THE HCT CHECKPOINT AREA                      *\n*                                                                     *\n***********************************************************************\n         L     R10,QVCKPT     BASE FOR CKPT WORK AREA\n         USING QCKPT,R10      ADDRESSING FOR IT\n         L     R1,QCJQTL      ADDRESS OF HCT SAVEAREA\n         LA    R0,$SAVEBEG-HCTDSECT  OFFSET TO START OF AREA\n         LA    R15,$SAVELEN   LENGTH OF $SAVEAREA\n         SLL   R0,16          MOVE OFFSET TO PROPER POSITION\n         OR    R0,R15         INSERT INTO LENGTH REG\n         L     R15,=V(HEXDUMP) ADDRESS OF DUMP ROUTINE\n         BALR  R14,R15        LINK TO IT\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nCHCT     CSECT\n         DROP\nJCT      EQU   10\nBASE1    EQU   11\nSAVE     EQU   13\n         GBLC  &VERSION\n&VERSION SETC  '0'\n$RPS     EQU   0\n$MSGID   EQU   0\n$DUPVOLT EQU   0\n$PRIOOPT EQU   0\n$PRTBOPT EQU   0\n$PRTRANS EQU   0\n$QSONDA  EQU   0\n$CMBDEF  EQU   0\n$JQEDEF  EQU   0\n$MAXDA   EQU   32\n$MAXJBNO EQU   0\n$SMFDEF  EQU   0\n$TGDEF   EQU   0\nFF       EQU   255\n        $BUFFER\n        $JCT\n        $CAT\n        $JQE\n        $PCE\n        $HCT\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CJCT": {"ttr": 1036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CJCT     QSTART 'QUEUE COMMAND - DUMP A JCT IN HEX'               UF016\n***********************************************************************\n* JCT JOBNAME <OFFSET>                                                *\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JCT                                    *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL HEXDUMP TO DUMP THE JCT                                      *\n*                                                                     *\n***********************************************************************\n         L     R10,QVCKPT     BASE FOR CKPT WORK AREA\n         USING QCKPT,R10      ADDRESSING FOR IT\n         L     R1,QCJCTA      ADDRESS OF JCT\n         LA    R0,JCTSTART-JCTDSECT  OFFSET TO START OF JCT\n         SR    R1,R0          BACK UP TO PREFIX\n         LH    R15,QLNG2      LENGTH OF USER OFFSET INTO JCT\n         LTR   R15,R15        IS THE LENGTH ZERO?\n         BNP   DUMP0          YES. NONE SPECIFIED\n         CH    R15,=H'8'      IS THE LENGTH TOO BIG?\n         BH    TILTO          YES, GIVE UP\n         EX    R15,OFFTR      CONVERT TO HEX\n         EX    R15,OFFPACK    PACK INTO QDWORD\n         LH    R15,QDWORD     PICK UP OFFSET\n         CR    R0,R15         COMPARE TO BASE OFFSET\n         BNL   DUMP0          USE R0 FOR OFFSET\n         LR    R0,R15         GET OTHER OFFSET\nDUMP0    AR    R1,R0          ADD TO BASE ADDRESS\n         LH    R15,HASPACE+62 MAX LEN INCLUDING NETWORK HEADERS\n         LA    R15,JCTSTART-JCTDSECT(R15)  + LEN OF PREFIX\n         SR    R15,R0         TOTAL LENGTH - OFFSET = LENGTH TO DUMP\n         SLL   R0,16          MOVE OFFSET TO PROPER POSITION\n         OR    R0,R15         INSERT INTO LENGTH REG\n         L     R15,=V(HEXDUMP) ADDRESS OF DUMP ROUTINE\n         BALR  R14,R15        LINK TO IT\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   EXCEPTIONS AND RETURN                                             *\n*                                                                     *\n***********************************************************************\nTILTO    QTILT '*** INVALID OFFSET SPECIFIED ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nOFFTR    TR    QPARM2,TABLEH       CONVERT TO HEX\nOFFPACK  PACK  QDWORD(3),QPARM2(1) PACK TO WORK AREA\n         LTORG\n* TABLE FOR HEX CONVERT\nTABLEH   DC    CL193' '\n         DC    X'0A0B0C0D0E0F',CL41' ',C'01234567890',CL6' '\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nCJCT     CSECT ,                                                  UF023\n        $BUFFER\n        $JQE\nJCT      EQU   0\n        $JCT\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CJOE": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x04\\x00\\x00\\x01\\x02!_\\x01\\x02!o\\x00(\\x00^\\x00O\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.04", "flags": 0, "createdate": "2002-08-03T00:00:00", "modifydate": "2002-08-04T00:28:00", "lines": 94, "newlines": 79, "modlines": 0, "user": "GREG"}, "text": "CJOE     QSTART 'QUEUE COMMAND - DUMP A JOE IN HEX'               UF026\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE                                    *\n*                                                                     *\n***********************************************************************\nFINDJQE  L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL HEXDUMP TO DUMP THE JOES                                     *\n*                                                                     *\n***********************************************************************\n         L     R10,QVCKPT     BASE FOR CKPT WORK AREA\n         USING QCKPT,R10      ADDRESSING FOR IT\n         L     R1,QCJQEA      ADDRESS OF JQE\n         USING JQEDSECT,R1    ADDRESSING FOR JQE\n         SR    R2,R2          CLEAR WORK REG\n         ICM   R2,3,JQEJOE    OFFSET/4 TO FIRST WORK JOE          GP@P6\n         BNZ   JOELOOP        CONTINUE IF ANY\nJOETILT  QTILT 'JOB HAS NO JOES'\n         DROP  R1             DROP JQE ADDRESSING\n         USING JOEDSECT,R2    ADDRESSING FOR JOE\n         SPACE 1\nJOELOOP  LR    R3,R2          SAVE JOE OFFSET/4 FOR LATER         GP@P6\n         SLL   R2,2           MULTIPLY BY 4 TO GET OFFSET         GP@P6\n         A     R2,QCJOTA      ADD TO GET ACTUAL ADDRESS\n         SLR   R1,R1          CLEAR FOR INSERT                    GP@P6\n         ICM   R1,3,JOEJQE    GET OFFSET/4 OF JQE                 GP@P6\n         SLL   R1,2           GET OFFSET OF JQE                   GP@P6\n         A     R1,QCJQTA      GET JQE ADDRESS                     GP@P6\n         C     R1,QCJQEA      DOES JOE BELONG TO THIS JOB?        GP@P6\n         BE    JOESHOW        YES, PROCEED WITH DISPLAY           GP@P6\n         L     R1,QCJQEA      ADDRESS OF JQE                      GP@P6\n         USING JQEDSECT,R1    ADDRESSING FOR JQE                  GP@P6\n         CLM   R3,3,JQEJOE    WAS THIS THE FIRST JOE LOOKED AT?   GP@P6\n         BE    JOETILT        YES, SO JOB HAD NO JOES             GP@P6\n         B     JOESTOP        NO, SO ALL RELEVANT JOES DONE NOW   GP@P6\n         DROP  R1             DROP JQE ADDRESSING                 GP@P6\nJOESHOW  DS    0H                                                 GP@P6\n         LA    R1,MSGJWORK    WORK JOE MESSAGE\n         ST    R1,QDMSGA      SAVE MESSAGE ADDRESS\n         LA    R1,L'MSGJWORK  LENGTH OF MESSAGE\n         STH   R1,QDMLNG      SAVE FOR DISPLAY ROUTINE\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE\n         BALR  R14,R15        LINK TO IT\n         LR    R1,R2          POINTER TO JOE TO DUMP\n         LA    R0,JOE1END-JOEDSECT ACTUAL LENGTH OF WORK JOE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 1\n         LA    R1,MSGJCHAR    CHAR JOE MESSAGE\n         ST    R1,QDMSGA      SAVE MESSAGE ADDRESS\n         LA    R1,L'MSGJCHAR  LENGTH OF MESSAGE\n         STH   R1,QDMLNG      SAVE FOR DISPLAY ROUTINE\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE\n         BALR  R14,R15        LINK TO IT\n         ICM   R1,3,JOECHAR   OFFSET/4 OF CHARACTERISTICS JOE     GP@P6\n         SLL   R1,2           MULTIPLY BY 4 TO GET OFFSET         GP@P6\n         A     R1,QCJOTA      ADD TO GET ACTUAL ADDRESS\n         LA    R0,JOE2END-JOEDSECT ACTUAL LENGTH OF CHAR JOE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 1\n         LA    R1,MSGJCKPT    CKPT JOE MESSAGE\n         ST    R1,QDMSGA      SAVE MESSAGE ADDRESS\n         LA    R1,L'MSGJCKPT  LENGTH OF MESSAGE\n         STH   R1,QDMLNG      SAVE FOR DISPLAY ROUTINE\n         ICM   R1,3,JOECKPT   OFFSET/4 OF CKPT JOE                GP@P6\n         BZ    NEXTWORK       NONE, GET NEXT WORK JOB FOR THIS JOB\n         SLL   R1,2           MULTIPLY BY 4 TO GET OFFSET         GP@P6\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE\n         BALR  R14,R15        LINK TO IT\n         A     R1,QCJOTA      ADD TO GET ACTUAL ADDRESS\n         LA    R0,JOE3END-JOEDSECT ACTUAL LENGTH OF CKPT JOE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 1\nNEXTWORK ICM   R2,12,JOENEXT  GET NEXT WORK JOE FOR THIS JOB      GP@P6\n         SRL   R2,16          MOVE TO LOW ORDER (CLEARS BITS)     GP@P6\n         BNZ   JOELOOP          AND DUMP IT\nJOESTOP  DS    0H             FINISHED PROCESSING                 GP@P6\n         QSTOP\nMSGJWORK DC    C'*** WORK JOE ***'\nMSGJCHAR DC    C'*** CHAR JOE ***'\nMSGJCKPT DC    C'*** CKPT JOE ***'\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nCJOE     CSECT ,                                                  UF023\n        $JOE\n        $JQE\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CJOESP": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CJOE     QSTART 'QUEUE COMMAND - DUMP A JOE IN HEX'               UF026\n         GBLB  &QSP           MVS/SP OPTION\n         AIF   (&QSP).SPOK\n         QTILT 'JOE COMMAND ONLY SUPPORT UNDER SP VERSION OF QUEUE'\n         AGO   .BYEBYE                                            VBA01\n.SPOK    ANOP\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE                                    *\n*                                                                     *\n***********************************************************************\nFINDJQE  L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL HEXDUMP TO DUMP THE JOES                                     *\n*                                                                     *\n***********************************************************************\n         L     R10,QVCKPT     BASE FOR CKPT WORK AREA\n         USING QCKPT,R10      ADDRESSING FOR IT\n         L     R1,QCJQEA      ADDRESS OF JQE\n         USING JQEDSECT,R1    ADDRESSING FOR JQE\n         SR    R2,R2          CLEAR WORK REG\n         ICM   R2,7,JQEJOEB   OFFSET TO FIRST WORK JOE\n         BNZ   JOELOOP        CONTINUE IF ANY\n         QTILT 'JOB HAS NO JOES'\n         DROP  R1             DROP JQE ADDRESSING\n         USING JOEDSECT,R2    ADDRESSING FOR JOE\n         SPACE 1\nJOELOOP  A     R2,QCJOTA      ADD TO GET ACTUAL ADDRESS\n         LA    R1,MSGJWORK    WORK JOE MESSAGE\n         ST    R1,QDMSGA      SAVE MESSAGE ADDRESS\n         LA    R1,L'MSGJWORK  LENGTH OF MESSAGE\n         STH   R1,QDMLNG      SAVE FOR DISPLAY ROUTINE\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE\n         BALR  R14,R15        LINK TO IT\n         LR    R1,R2          POINTER TO JOE TO DUMP\n         LA    R0,JOE1END-JOEDSECT ACTUAL LENGTH OF WORK JOE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 1\n         LA    R1,MSGJCHAR    CHAR JOE MESSAGE\n         ST    R1,QDMSGA      SAVE MESSAGE ADDRESS\n         LA    R1,L'MSGJCHAR  LENGTH OF MESSAGE\n         STH   R1,QDMLNG      SAVE FOR DISPLAY ROUTINE\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE\n         BALR  R14,R15        LINK TO IT\n         ICM   R1,7,JOECHARB  POINTER TO CHARACTERISTICS JOE\n         A     R1,QCJOTA      ADD TO GET ACTUAL ADDRESS\n         LA    R0,JOE2END-JOEDSECT ACTUAL LENGTH OF CHAR JOE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 1\n         LA    R1,MSGJCKPT    CKPT JOE MESSAGE\n         ST    R1,QDMSGA      SAVE MESSAGE ADDRESS\n         LA    R1,L'MSGJCKPT  LENGTH OF MESSAGE\n         STH   R1,QDMLNG      SAVE FOR DISPLAY ROUTINE\n         ICM   R1,7,JOECKPTB  POINTER TO CKPT JOE\n         BZ    NEXTWORK       NONE, GET NEXT WORK JOB FOR THIS JOB\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE\n         BALR  R14,R15        LINK TO IT\n         A     R1,QCJOTA      ADD TO GET ACTUAL ADDRESS\n         LA    R0,JOE3END-JOEDSECT ACTUAL LENGTH OF CKPT JOE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 1\nNEXTWORK ICM   R2,7,JOEJQNXB  GET NEXT WORK JOE FOR THIS JOB\n         BNZ   JOELOOP          AND DUMP IT\n.BYEBYE  ANOP                                                     VBA01\n         QSTOP\nMSGJWORK DC    C'*** WORK JOE ***'\nMSGJCHAR DC    C'*** CHAR JOE ***'\nMSGJCKPT DC    C'*** CKPT JOE ***'\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nCJOE     CSECT ,                                                  UF023\n        $JOE\n        $JQE\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CJQE": {"ttr": 1284, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CJQE     QSTART 'QUEUE COMMAND - DUMP A JQE IN HEX'               UF015\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE                                    *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL HEXDUMP TO DUMP THE JQE                                      *\n*                                                                     *\n***********************************************************************\n         L     R10,QVCKPT     BASE FOR CKPT WORK AREA\n         USING QCKPT,R10      ADDRESSING FOR IT\n         L     R1,QCJQEA      ADDRESS OF JQE\n         LA    R0,JQELNGTH    GET ACTUAL LENGTH OF JQE\n         L     R15,=V(HEXDUMP) ADDR OF HEXDUMP MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nCJQE     CSECT ,                                                  UF023\n        $JQE\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKPT": {"ttr": 1286, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CKPT     QSTART 'QUEUE COMMAND - READ JES2 CKPT RECORDS'\n         USING QCKPT,R10      BASE REG FOR HASP WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n***********************************************************************\n*                                                                     *\n*   REPOSITION DATASET                                                *\n*                                                                     *\n***********************************************************************\n         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS\n***********************************************************************\n*                                                                     *\n*   READ CHECKPOINT DATASET                                           *\n*                                                                     *\n***********************************************************************\n         L     R2,QCJQTL      ADDR OF IOAREA FOR CKPT HEADER REC\n         L     R3,QCJOTL      NUMBER OF RECORDS IN CKPT DATASET\nLOOP     READ  HDECB1,SF,,(R2),MF=E\n         CHECK HDECB1\n         AH    R2,HDECB1+6    INCREMENT TO NEXT BUFFER\n         BCT   R3,LOOP        READ NEXT RECORD.\n***********************************************************************\n*                                                                     *\n*   RETURN TO CALLER                                                  *\n*                                                                     *\n***********************************************************************\n         QSTOP\n         LTORG\n         DS    0F\nTIR3     DC    X'00000300'    POINT PAST SYNC RECORDS\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPILE": {"ttr": 1288, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ASMLQUE JOB (QUEUE),VB,CLASS=A,MSGCLASS=A,REGION=2048K\n//ASMLQUE PROC M=MISSING,SP='NOSP,NODEBUG'\n//ASM     EXEC PGM=CLS90,\n//             PARM='DECK,NOLOAD,TERM,TEST,SYSPARM((&SP))'\n//SYSLIB   DD  DISP=SHR,DSN=JES2.QUEUE.ASM\n//         DD  DISP=SHR,DSN=SYS1.HASPSRC\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  SPACE=(CYL,(25,5)),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(25,5)),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(25,5)),UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=JES2.QUEUE.ASM(&M)\n//SYSPUNCH DD  DISP=SHR,DSN=JES2.QUEUE.OBJ(&M)\n//        PEND\n//Q00     EXEC ASMLQUE,M=Q0                     QCOMMON\n//Q01     EXEC ASMLQUE,M=Q1                     QUEUE\n//Q02     EXEC ASMLQUE,M=Q2                     ALLOCATE\n//Q03     EXEC ASMLQUE,M=Q3                     CKPT\n//Q04     EXEC ASMLQUE,M=Q4                     DDNAME\n//Q05     EXEC ASMLQUE,M=Q5                     DISPLAY\n//Q06     EXEC ASMLQUE,M=Q6                     FINDJOB\n//Q07     EXEC ASMLQUE,M=Q7                     FORMAT\n//Q08     EXEC ASMLQUE,M=Q8                     HELP\n//Q09     EXEC ASMLQUE,M=Q9                     HEXBLK\n//Q10     EXEC ASMLQUE,M=Q10                    INIT\n//Q11     EXEC ASMLQUE,M=Q11                    JCL\n//Q12     EXEC ASMLQUE,M=Q12                    JLOG\n//Q13     EXEC ASMLQUE,M=Q13                    JMSG\n//Q14     EXEC ASMLQUE,M=Q14                    LIST\n//Q15     EXEC ASMLQUE,M=Q15                    LISTDS\n//Q16     EXEC ASMLQUE,M=Q16                    PARSE\n//Q17     EXEC ASMLQUE,M=Q17                    READSPC\n//Q18     EXEC ASMLQUE,M=Q18                    REPOS\n//Q19     EXEC ASMLQUE,M=Q19                    SAVE\n//Q20     EXEC ASMLQUE,M=Q20                    SEARCH\n//Q21     EXEC ASMLQUE,M=Q21                    SYSLOG\n//Q22     EXEC ASMLQUE,M=Q22                    XDS\n//Q23     EXEC ASMLQUE,M=Q23                    INITS\n//Q24     EXEC ASMLQUE,M=Q24                    ACTIVE\n//Q25     EXEC ASMLQUE,M=Q25                    FINDPDDB\n//Q26     EXEC ASMLQUE,M=Q26                    SYSOUT\n//Q27     EXEC ASMLQUE,M=Q27                    PRINT\n//Q28     EXEC ASMLQUE,M=Q28                    HEXDUMP\n//Q29     EXEC ASMLQUE,M=Q29                    CJQE\n//Q30     EXEC ASMLQUE,M=Q30                    CJCT\n//Q31     EXEC ASMLQUE,M=Q31                    CTSO\n//Q32     EXEC ASMLQUE,M=Q32                    CHCT\n//Q33     EXEC ASMLQUE,M=Q33                    CPDDB\n//Q34     EXEC ASMLQUE,M=Q34                    CJOE\n//LKED    EXEC PGM=IEWL,PARM='XREF,LIST,LET,TEST,AC=1',REGION=1024K\n//SYSLMOD  DD  DSN=SYS1.CMDLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(8,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=JES2.QUEUE.OBJ\n//SYSLIN   DD  *\n INCLUDE SYSLIB(Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9)\n INCLUDE SYSLIB(Q10,Q11,Q12,Q13,Q14,Q15,Q16,Q17,Q18,Q19)\n INCLUDE SYSLIB(Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29)\n INCLUDE SYSLIB(Q30,Q31,Q32,Q33,Q34)\n ENTRY QUEUE\n ALIAS QUEUE\n ALIAS QUE\n NAME Q(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPDDB": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02\\x17?\\x01\\x02 /\\x00\\x11\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2002-07-21T00:11:00", "lines": 176, "newlines": 176, "modlines": 0, "user": "GREG"}, "text": "CPDDB    QSTART 'QUEUE COMMAND - LIST PDDBS FOF A JOB'            UF025\n***********************************************************************\n*                                                                     *\n*        PDDB JOBNAME <PDDB#>                                         *\n*                                                                     *\n* DISPLAY LIMITED INFORMATION ABOUT ALL OF THE PDDB'S FOR A JOB       *\n*                                                                     *\n* IF THE OPTIONAL PDDB NUMBER IS SPECIFIED, ONLY THAT PDDB WILL       *\n* BE DUMPED IN HEX.                                                   *\n*                                                                     *\n***********************************************************************\n         GBLB  &QJTIP             JTIP OPTION, DEFINED BY QSTART\n         USING QCKPT,R10          BASE REG FOR CHECKPONT WORK AREA\n         L     R10,QVCKPT         LOAD BASE REG\n         USING QDISPLAY,R9        BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL          LOAD BASE REG\n         USING WORK,R13           BASE REG FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JCT                                    *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB)    ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15            GO TO IT\n***********************************************************************\n*                                                                     *\n*   FIND ALL PDDBS FOR THIS JOB                                       *\n*                                                                     *\n***********************************************************************\n         USING PDBDSECT,R2        BASE REG FOR PDDB\n         USING IOTSTART,R3        BASE REG FOR IOT\n         QHEAD HEADING,X'24'      HEADING IN GREEN REVERSE        GP@P6\n         MVI   SWITCH,0           CLEAR FLAG BYTE\n         L     R3,QCIOTA          LOAD BASE REG\n         LR    R5,R3              IOAREA FOR READ IOT BLOCK\n         USING JCTSTART,R1        SET TEMP ADDRESSING\n         L     R1,QCJCTA          POINT TO JCT\n         L     R4,JCTIOT          FIRST IOT ADDRESS\n         DROP  R1                 DROP TEMP ADDRESSING\n         BAL   R8,READ            READ THE IOT\n         SPACE 1\n         LH    R6,QLNG2           WAS A PDDB SPECIFIED?\n         LTR   R6,R6\n         BZ    NEXTIOT            NO, PROCEED NORMALLY\n         BCTR  R6,0               DROP FOR EXECUTES\n         MVC   QFZONES,QFZONE     PREPARE FOR NUMERIC TEST\n         EX    R6,MVZ             MOVE ZONES FOR TEST\n         CLC   QFZONES,QFZONE     ALL NUMERIC?\n         BNE   TILT               NO, SKIP IT\n         EX    R6,PACK            PACK TO DWORD\n         CVB   R6,CONVERT         GET PDDB NUMBER\n         OI    SWITCH,X'02'       AND INDICATE FOR LATER\n         SPACE 1\nNEXTIOT  LR    R4,R3              BASE OF IOT\n         A     R4,IOTPDDBP        OFFSET BEYOND LAST PDDB\n         LR    R2,R3              BASE OF IOT\n         A     R2,QCPDDB1         OFFSET TO FIRST PDDB IN IOT\nPDDBLOOP LH    R0,PDBDSKEY        GET THE DSID\n         TM    SWITCH,X'02'       ONLY WANT ONE PDDB?\n         BZ    PDDBLP1            NO, SKIP SPECIAL TEST\n         CR    R0,R6              FOUND RIGHT PDDB?\n         BNE   NEXTPDDB           NO, TRY NEXT ONE\n         LR    R1,R2              POINT TO PDDB\n         LA    R0,PDBLENG         LENGTH OF PDDB\n         L     R15,=V(HEXDUMP)    POINT TO DISPLAY ROUTINE\n         BALR  R14,R15            AND LINK TO IT\n         B     NEXTPDDB           JUST INCASE MULTIPLE PDDBS (SYSLOG)\n         SPACE 1\nPDDBLP1  MVC   QDMSG,QBLANK       BLANK WORK LINE AREA\n         LTR   R0,R0              TEST FOR NULL PDDB#\n         BZ    NEXTPDDB           SKIP IF SO\n         CVD   R0,CONVERT         CONVERT TO DECIMAL\n         MVC   DSID-4(8),ED8      MOVE EDIT PATTERN TO DISPLAY\n         ED    DSID-4(8),CONVERT+4  EDIT THE DSID\n         UNPK  DSFLAG1(3),PDBFLAG1(2)  HEX OF FLAG BYTE\n         TR    DSFLAG1,HEXTAB     MAKE PRINTABLE\n         MVI   DSFLAG1+2,C' '     CLEAR TRASH BYTE\n         L     R0,PDBRECCT        GET THE RECORD COUNT\n         CVD   R0,CONVERT         CONVERT TO DECIMAL\n         MVC   DSRECCT,ED8        MOVE EDIT PATTERN TO DISPLAY\n         ED    DSRECCT,CONVERT+4  EDIT THE RECORD COUNT\n         MVC   DSCLASS,PDBCLASS   MOVE PDBCLASS TO DISPLAY\n         UNPK  DSMTTR(9),PDBMTTR(5)  UNPACK MTTR TO DISPLAY\n         TR    DSMTTR,HEXTAB      MAKE PRINTABLE\n         MVI   DSMTTR+9,C' '      CLEAR JUNK BYTE\n         AIF   (NOT &QJTIP).JTIP1\n         MVC   DS#PROC,PDB#PROC   SET JTIP PROC NAME\n         MVC   DS#STEP,PDB#STEP   SET JTIP STEP NAME\n         MVC   DS#DDNM,PDB#DDN    SET JTIP DD NAME\n.JTIP1   ANOP\n         MVC   QDMLNG,=H'80'      SET THE LENGTH\n         LA    R0,QDMSG           POINT TO MESSAGE\n         ST    R0,QDMSGA          SET IN AREA\n         L     R15,=V(DISPLAY)    POINT TO DISPLAY ROUTINE\n         BALR  R14,R15            LINK TO IT\nNEXTPDDB LA    R2,PDBLENG(R2)     POINT TO NEXT PDDB\n         CR    R2,R4              HAVE WE GONE PAST THE LAST PDDB\n         BL    PDDBLOOP           NO. KEEP TRYING\n         L     R4,IOTIOTTR        DISK ADDR OF NEXT IOT\nSPIN     LTR   R4,R4              IS THERE ANOTHER IOT?\n         BZ    SPINIOT            NO. TRY THE SPIN IOT.\n         BAL   R8,READ            READ THE IOT\n         B     NEXTIOT            SEARCH THE NEXT IOT\n         USING JCTSTART,R1        BASE REG FOR JCT\nSPINIOT  TM    SWITCH,1           DID WE SEARCH THE SPINIOT ALREADY\n         BO    STOP               YES, DONE\n         OI    SWITCH,1           SET SWITCH\n         L     R1,QCJCTA          LOAD BASE REG\n         L     R4,JCTSPIOT        DISK ADDR OF SPIN IOT\n         B     SPIN               SEARCH THE SPIN IOT CHAIN\n         DROP  R1\nSTOP     QSTOP                    GO BACK TO CALLER\n***********************************************************************\n*                                                                     *\n*   READ A BLOCK FROM HASPACE                                         *\n*                                                                     *\n***********************************************************************\nREAD     ST    R4,QCTRAK          STORE DISK ADDR\n         LR    R1,R5              IOAREA ADDRESS\n         L     R15,=V(READSPC)    ADDR OF ROUTINE TO READ HASPACE\n         BALR  R14,R15            GO TO IT\n         BR    R8                 RETURN TO CALLER\nED8      DC    X'4020202020202120'\nMVZ      MVZ   QFZONES(1),QPARM2\nPACK     PACK  CONVERT,QPARM2(1)\nHEXTAB   EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\nTILT     QTILT 'INVALID PDDB# SPECIFIED'\nHEADING  DC    CL80' '\n         ORG   HEADING            POINT TO START OF AREA\n         DC    C'    DSID'\n         DC    C' F1'             FLAG BYTE 1\n         DC    C'  RECORDS'\n         DC    C' C'              CLASS\n         DC    C'   MTTR  '       MTTR\n         AIF   (NOT &QJTIP).JTIP2\n         DC    C' PROCNAME'\n         DC    C' STEPNAME'\n         DC    C' DDNAME  '\n.JTIP2   ANOP\n         ORG   ,                  BACK TO NORMAL ADDRESSING\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nCPDDB    CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $TAB\n         $JCT\n         $PDDB\n         $IOT\nWORK     DSECT\n         DS    CL72\nSWITCH   DS    C\nCONVERT  DS    D\n         QCOMMON\n         ORG   QDMSG\n         DS    CL4\nDSID     DS    CL4\n         DS    CL1\nDSFLAG1  DS    CL2\n         DS    CL1\nDSRECCT  DS    CL8\n         DS    CL1\nDSCLASS  DS    CL1\n         DS    CL1\nDSMTTR   DS    CL8\n         AIF   (NOT &QJTIP).JTIP3\n         DS    CL1\nDS#PROC  DS    CL8\n         DS    CL1\nDS#STEP  DS    CL8\n         DS    CL1\nDS#DDNM  DS    CL8\n.JTIP3   ANOP\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSAVE": {"ttr": 1294, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAVE     QSTART 'QUEUE COMMAND - CREATE A COPY OF CURRENT DATASET'\n         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13       LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   ALLOCATE OUTPUT DATASET                                           *\n*                                                                     *\n***********************************************************************\n         CLC   QPDSID,=H'0'   IS THERE A VALID DATASET?\n         BE    TILT1          NO. TELL THE USER.\n         MVC   DSNAME+2(44),QBLANK BLANK THE DSNAME\n         MVC   DSNAME+2(8),QPARM1 FIRST PART OF DSNAME\n         LA    R1,DSNAME      ADDR OF DSNAME\n         ST    R1,DA08PDSN    STORE IN PARM LIST\n         LH    R2,QLNG1       LENGTH OF QPARM1\n         LA    R1,2(R2,R1)    OFFSET INTO DSNAME\n         LH    R3,QLNG2       LENGTH OF QPARM2\n         LTR   R3,R3          ?/LENGTH ZERO\n         BZ    DATA           YES. USE DATA AS DEFAULT DS TYPE\n         MVI   0(R1),C'.'     MOVE IN DELIMITER\n         MVC   1(8,R1),QPARM2 NO. SAVE DS TYPE\n         LA    R1,1(R3,R2)    LENGTH OF DSNAME\n         B     DSLNGH         GO SAVE LENGTH\nDATA     MVC   0(5,R1),=C'.DATA' LAST PART OF DSNAME\n         LA    R1,5(R2)       LENGTH OF DSNAME\nDSLNGH   STH   R1,DSNAME      STORE LENGTH OF DSNAME\n         MVC   DA08DDN(72),ALCLIST REMAINDER OF PARM LIST\n         LH    R3,QLNG3       LENGTH OF QPARM3 (VOLSER)           UF028\n         LTR   R3,R3          WAS IT SPECIFIED?                   UF028\n         BZ    DSALLOC        NO, SKIP THIS                       UF028\n         MVC   DA08SER(8),QPARM3  SET VOLSER                      UF028\nDSALLOC  MVI   DAIRFLAG,X'08' INDICATE ALLOC FUNCTION\n         L     R15,=V(ALLOCATE) ADDR OF DAIR MODULE\n         BALR  R14,R15        GO TO IT\n         MVC   QCOUT+36(1),QCRECFM MOVE IN RECORD FORMAT\n         NI    QCOUT+36,X'06' TURN OFF EVERTHING BUT CCTL\n         OI    QCOUT+36,X'90' SPECIFY FIXED BLOCKED RECORDS\n         LH    R1,QCLRECL     RECORD LENGTH\n         LTR   R1,R1          IS THE LRECL ZERO?\n         BNZ   RECOK          NO. SKIP.\n         LA    R1,133         YES. USE LRECL 133.\nRECOK    STH   R1,QCOUT+82    STORE LRECL\nBIGGER   LR    R2,R1          UPDATE BLKSIZE\n         AH    R1,QCOUT+82    ADD LRECL TO BLKSIZE\n         CH    R1,=H'4096'    IS THE BLKSIZE GREATER THAN 4096?\n         BL    BIGGER         NO. MAKE IT BIGGER.\n         STH   R2,QCOUT+62    STORE BLKSIZE\n         OPEN  MF=(E,QCOPEN)\n***********************************************************************\n*                                                                     *\n*   REPOSITION DATASET TO TOP                                         *\n*                                                                     *\n***********************************************************************\n         L     R4,QCSTART     TOP OF DATASET POINTER\n         L     R4,0(R4)       DISK ADDR TOP OF DATASET\n         L     R5,QCBLKA      IOAREA ADDRESS\n         B     FIRST          GO DO IT\n***********************************************************************\n*                                                                     *\n*   PROCESS DATASET                                                   *\n*                                                                     *\n***********************************************************************\nNEXTBLK  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK\nFIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?\n         BZ    END            YES. END OF DATASET.\n         BAL   R8,READ        READ A BLOCK\n         CLC   QPJOBID(6),4(R5) DOES THE JOBID MATCH?\n         BNE   END            NO. END OF DATASET.\n         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK\n***********************************************************************\n*                                                                     *\n*   PROCESS RECORDS                                                   *\n*                                                                     *\n***********************************************************************\nNEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?\n         BE    NEXTBLK        YES. END OF BLOCK.\n         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPAN           YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R4)       INSERT LENGTH\n         TM    1(R4),X'80'    IS CCTL SPECIFIED?\n         BZ    NOCCTL         NO. SKIP.\n         LA    R6,1(R6)       INCREMENT LENGTH FOR CCTL\nNOCCTL   TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?\n         BO    SKIPREC        YES. SKIP IT.\n         MVI   BUFFER,C' '    BLANK FIRST BYTE OF BUFFER\n         MVC   BUFFER+1(255),BUFFER BLANK THE BUFFER\n         LR    R7,R6          DO NOT DESTROY R6\n         SH    R7,=H'1'       IS LENGTH ZERO?\n         BM    SKIPREC        YES. SKIP RECORD.\n         EX    R7,MVCREC      MOVE RECORD TO BUFFER\n         PUT   QCOUT,BUFFER\nSKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nSPAN     LH    R6,2(R4)       SEGMENT LENGTH\n         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPANFRST       YES. USE LARGER HEADER SIZE.\n         LA    R4,4(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nSPANFRST LA    R4,6(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\n***********************************************************************\n*                                                                     *\n*   CLOSE UP SHOP AND GO HOME                                         *\n*                                                                     *\n***********************************************************************\nEND      CLOSE MF=(E,QCOPEN)\n         MVI   DAIRFLAG,X'18' INDICATE FREE FUNCTION\n         L     R15,=V(ALLOCATE) ADDR OF DAIR MODULE\n         BALR  R14,R15        GO TO IT\n         L     R15,=V(LISTDS) GO BACK TO LISTDS\n         BALR  R14,R15        GO TO IT\n         QSTOP\n***********************************************************************\n*                                                                     *\n*   READ A BLOCK FROM HASPACE                                         *\n*                                                                     *\n***********************************************************************\nREAD     ST    R4,QCTRAK      STORE DISK ADDR\n         LR    R1,R5          IOAREA ADDRESS\n         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\n         BR    R8             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nTILT1    QTILT '*** YOU ARE NOT PROCESSING A VALID DATASET ***'\n         LTORG\nMVCREC   MVC   BUFFER(1),3(R4)\n         DS    0F\nALCLIST  DC    C'HASPSAVE',CL16' ',F'0',F'10',F'50',F'0'\n         DC    CL16' ',X'040202B0',F'0',CL8' '\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\nWORK     DSECT\n         DS    CL80\nBUFFER   DS    CL256\nDSNAME   DS    H\n         DS    CL44\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSPIN": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\n\\x00\\x00\\x00\\x96\\x19\\x1f\\x01\\x020o\\x16'\\x01\\xae\\x01\\xae\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@\"", "ispf": {"version": "01.10", "flags": 0, "createdate": "1996-07-09T00:00:00", "modifydate": "2002-11-02T16:27:00", "lines": 430, "newlines": 430, "modlines": 0, "user": "GREG"}, "text": "CSPIN    QSTART 'QUEUE COMMAND - SPIN A COPY OF CURRENT DATASET'  ONL01\n*        PRINT GEN\n         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13       LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   ALLOCATE OUTPUT DATASET                                           *\n*                                                                     *\n***********************************************************************\n         CLC   QPDSID,=H'0'   IS THERE A VALID DATASET?\n         BE    TILT1          NO. TELL THE USER.\n         LA    R1,1           DEFAULT FIRST LINE                 WGH\n         ST    R1,FRSTLINE    INIT DEFAULT                       WGH\n         LA    R1,0           INIT CURRENT LINE                  WGH\n         ST    R1,LINECNT     DEFAULT CURRENT LINE               WGH\n         L     R1,=F'9999999' DEFAULT LAST LINE                  WGH\n         ST    R1,LASTLINE    TO ENSUR END OF DATASET            WGH\n         MVC   DEST(8),=CL8' '         DEFAULT DEST              WGH\n         MVC   WRTRID(8),=CL8' '       DEFAULT WRTRID            WGH\n         MVI   CLASS,C'A'     SYSOUT=A\n         CLC   QPARM1(6),=C'CLASS='  IS CLASS SPECIFIED          WGH\n         BE    ALTCLASS       YES..  GET ALTERNATE CLASS PARM    WGH\n         LA    R4,QLNG1       POINT TO 1ST  FIELD LENGTH         WGH\n         LA    R5,QPARM1      POINT TO 1ST  FIELD                WGH\n         LH    R3,0(R4)       ANY PARMS  SPECIFIED               WGH\n         LTR   R3,R3          IS PARM1 0 CHAR?                   WGH\n         BZ    DSALLOC        YES..  USE DEFAULT                 WGH\n         CLI   QPARM1,C'Z'    CHECK FOR COUNT                    WGH\n         BH    CHKCNT         NOT ALPHABETIC TRY COUNT           WGH\n         CH    R3,=H'1'       IS PARM GT 1 CHAR?                 WGH\n         BH    DEST1          YES..  MUST BE DEST                WGH\n         CLI   QPARM1,C'A'    NO...  CHECK FOR VALID CLASS       WGH\n         BL    BADCLS         NOT ALPHABETIC BAD CLASS           WGH\n         MVC   CLASS,QPARM1   USE SPECIFIED CLASS                WGH\n         B     COUNT2         TRY FOR COUNT IN PARM2             WGH\nALTCLASS CLI   QPARM1+6,C'A'  CHECK FOR VALID CLASS              WGH\n         BL    BADCLS         TO LOW BAD SYSOUT CLASS            WGH\n         MVC   CLASS,QPARM1+6 USE SPECIFIED CLASS                WGH\nCOUNT2   LA    R4,QLNG2       POINT TO NEXT FIELD                WGH\n         LA    R5,QPARM2      POINT TO NEXT FIELD                WGH\nCHKCNT   EQU   *\n         LH    R3,0(R4)       LENGTH OF COUNT FIELD              WGH\n         LTR   R3,R3          ANYTHING THERE                     WGH\n         BZ    DSALLOC        NO.. CONTINUE WITH DEFAULTS        WGH\n         CLI   0(R5),C'0'     IS IT A NUMBER?                    WGH\n         BL    DEST1          NO.. MUST BE DEST                  WGH\n         XC    SCRATCH,SCRATCH YES..ZERO WORK AREA               WGH\n         MVC   SCRATCH+4,QPREC      MOVE CURRENT LINE            WGH\n         CVB   R15,SCRATCH     CONVERT TO BINARY                 WGH\n         LTR   R15,R15         IS IT POSITIVE                    WGH\n         BNP   CHKNUM          NO.. LEAVE AS DEFAULT             WGH\n         ST    R15,FRSTLINE    SAVE FOR LATER                    WGH\nCHKNUM   BCTR  R3,0            LENGTH OF FIELD -1                WGH\n         LA    R14,0(R5)       POINT TO PARM FIELD               WGH\n         MVC   QFZONES,QFZONE  INIT CHECK FIELD                  WGH\n         EX    R3,MVZ          MOVE ZONES FROM PARM              WGH\n         CLC   QFZONES,QFZONE  IS IT ALL NUMERIC ?               WGH\n         BNE   NOTNUM          NO.. INFORM USER                  WGH\n         EX    R3,PACK         PACK THE NUMBER                   WGH\n         CVB   R15,SCRATCH     LOAD THE NUMBER                   WGH\n         A     R15,FRSTLINE    ADD TO STARTING LINE              WGH\n         S     R15,=F'1'       ADJUST TO GET CORRECT COUNT       WGH\n         ST    R15,LASTLINE    SAVE IT                           WGH\n         LA    R4,12(R4)      POINT TO NEXT FIELD LENGTH         WGH\n         LA    R5,12(R5)      POINT TO NEXT FIELD (2 OR 3)       WGH\nDEST1    EQU   *                                                 WGH\n         LH    R3,0(R4)       LENGTH OF DEST  FIELD              WGH\n         LTR   R3,R3          ANYTHING THERE                     WGH\n         BZ    DSALLOC        NO.. CONTINUE WITH DEFAULTS        WGH\n         STH   R3,DESTLEN     SAVE LENGTH                        WGH\n         MVC   DEST(8),0(R5)   MOVE IN DEST FIELD                WGH\n         LA    R4,12(R4)      POINT TO WRTRID FIELD LENGTH       WGH\n         LA    R5,12(R5)      POINT TO WRTRID FIELD              WGH\n         LH    R3,0(R4)       LENGTH OF WRTRID FIELD             WGH\n         LTR   R3,R3          ANYTHING THERE                     WGH\n         BZ    DSALLOC        NO.. CONTINUE WITH DEFAULTS        WGH\n         STH   R3,WRTRLEN     SAVE LENGTH                        WGH\n         MVC   WRTRID(8),0(R5)   MOVE IN WRTRID FIELD            WGH\nDSALLOC  EQU   *\n         BAL   R8,ALLOSPIN    GO ALLOCATE SPIN DDN               WGH\n         MVC   QCOUT+36(1),QCRECFM MOVE IN RECORD FORMAT\n         NI    QCOUT+36,X'06' TURN OFF EVERTHING BUT CCTL\n         OI    QCOUT+36,X'90' SPECIFY FIXED BLOCKED RECORDS\n         LH    R1,QCLRECL     RECORD LENGTH\n         LTR   R1,R1          IS THE LRECL ZERO?\n         BNZ   RECOK          NO. SKIP.\n         LA    R1,133         YES. USE LRECL 133.\nRECOK    STH   R1,QCOUT+82    STORE LRECL\n         STH   R1,QCOUT+62    AND BLKSIZE\n***     $AMODE 24\n         OPEN  MF=(E,QCOPEN)\n***     $AMODE 31\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   REPOSITION DATASET TO TOP                                         *\n*                                                                     *\n***********************************************************************\n         L     R4,QCSTART     TOP OF DATASET POINTER\n         L     R4,0(R4)       DISK ADDR TOP OF DATASET\n         L     R5,QCBLKA      IOAREA ADDRESS\n         B     FIRST          GO DO IT\n***********************************************************************\n*                                                                     *\n*   PROCESS DATASET                                                   *\n*                                                                     *\n***********************************************************************\nNEXTBLK  L     R4,HDBNXTRK-BUFSTART(R5) DISK ADDR NEXT BLOCK   WGH42\nFIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?\n         BZ    END            YES. END OF DATASET.\n         BAL   R8,READ        READ A BLOCK\n         CLC   QPJOBID(6),HDBJBKEY-BUFSTART(R5) JOBID MATCH?  GP  WGH42\n         BNE   END                  NOMATCH                     WGH42\n**GP     CLC   QPDSID,HDBDSKEY-BUFSTART+2(R5)   DSID  MATCH?    WGH42\n**GP     BE    IDISOK              BR IF SO                          CL\n**GP     L     R4,QCJQEA           ADDR OF JQE                       CL\n**GP     TM    JQEFLAG3-JQE(R4),JQE3SYSD ALL THRU IF THIS            CL\n**GP     BNO   END                    IS NOT SYSTEM JQE              CL\nIDISOK   LA    R4,HDBSTART-BUFSTART(R5)    FIRST RECORD IN BLOCK  WGH42\n***********************************************************************\n*                                                                     *\n*   PROCESS RECORDS                                                   *\n*                                                                     *\n***********************************************************************\nNEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?\n         BE    NEXTBLK        YES. END OF BLOCK.\n         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPAN           YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R4)       INSERT LENGTH\n         TM    1(R4),X'80'    IS CCTL SPECIFIED?\n         BZ    NOCCTL         NO. SKIP.\n         LA    R6,1(R6)       INCREMENT LENGTH FOR CCTL\nNOCCTL   TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?\n         BO    SKIPREC        YES. SKIP IT.\n         MVI   BUFFER,C' '    BLANK FIRST BYTE OF BUFFER\n         MVC   BUFFER+1(255),BUFFER BLANK THE BUFFER\n         LR    R7,R6          DO NOT DESTROY R6\n         SH    R7,=H'1'       IS LENGTH ZERO?\n         BM    SKIPREC        YES. SKIP RECORD.\n         EX    R7,MVCREC      MOVE RECORD TO BUFFER\n         L     R1,LINECNT     GET CURRENT LINE CNT                WGH\n         LA    R1,1(R1)       ADD THIS LINE TO IT                 WGH\n         ST    R1,LINECNT     SAVE IT                             WGH\n         C     R1,LASTLINE    IT IS GT THAN LAST REQUESTED        WGH\n         BH    END            YES.. CLOSE IT                      WGH\n         C     R1,FRSTLINE    IS IT LESS THAN 1ST REQUESTED?      WGH\n         BL    SKIPREC        YES... SKIP IT                      WGH\n***     $AMODE 24\n         PUT   QCOUT,BUFFER\n***     $AMODE 31\n         SPACE 1\nSKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nSPAN     LH    R6,2(R4)       SEGMENT LENGTH\n         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPANFRST       YES. USE LARGER HEADER SIZE.\n         LA    R4,4(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nSPANFRST LA    R4,6(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\n***********************************************************************\n*                                                                     *\n*   CLOSE UP SHOP AND GO HOME                                         *\n*                                                                     *\n***********************************************************************\nEND      DS    0H\n***     $AMODE 24\n         CLOSE MF=(E,QCOPEN)\n***     $AMODE 31\n         SPACE 1\n         MVC   DYNALLOC(FREELEN),FREEPTR\n         LA    R1,YREERB\n         STCM  R1,B'0111',YREEPTR+1\n         LA    R1,YREETXPT\n         ST    R1,YREETPTR\n         LA    R1,YREETU1\n         STCM  R1,B'0111',YREETXPT+1\n         LA    R1,YREETU2\n         STCM  R1,B'0111',YREETXPT+5\n         LA    R1,YREEPTR\n         DYNALLOC\n         L     R15,=V(LISTDS) GO BACK TO LISTDS\n         BALR  R14,R15        GO TO IT\n         QSTOP\n***********************************************************************\n*                                                                     *\n*   READ A BLOCK FROM HASPACE                                         *\n*                                                                     *\n***********************************************************************\nREAD     ST    R4,QCTRAK      STORE DISK ADDR\n         LR    R1,R5          IOAREA ADDRESS\n         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\n         BR    R8             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   ALLOCATION ROUTINE                                                *\n*                                                                     *\n***********************************************************************\nALLOSPIN MVC   DYNALLOC(S99LENG),S99RBPTR  COPY DYN ALLOC LIST    WGH\n         LA    R1,X99RB       RELOCATE LIST\n         STCM  R1,B'0111',X99RBPTR+1\n         LA    R1,X99TUPL\n         ST    R1,X99TXTPP\n         LA    R1,X99TUKY1\n         STCM  R1,B'0111',X99TUPL+1\n         LA    R1,X99TUKY2\n         STCM  R1,B'0111',X99TUPL+5\n         LA    R1,X99TUKY3\n         STCM  R1,B'0111',X99UPLL+1\n         LA    R1,X99TUKY4\n         STCM  R1,B'0111',X99UPLLW+1\n         MVC   X99SYSOC,CLASS\n         CLI   DEST,C' '               ANY DEST SPEC?\n         BE    NODEST\n         MVC   X99DESTL,DESTLEN        MOVE IN LENGTH\n         MVC   X99DEST,DEST            MOVE IN DEST\n         MVI   X99EPARM,X'00'          SAY CLASS NOT LAST PARM\n         CLI   WRTRID,C' '             ANY WRTRID SPECIFIED\n         BE    NODEST\n         MVC   X99WRTRL,WRTRLEN        MOVE IN LENGTH\n         MVC   X99WRTR,WRTRID          MOVE IN WRTRID\n         MVI   X99UPLL,X'00'           SAY DEST NOT LAST PARM\nNODEST   LA    R1,DYNALLOC\n         DYNALLOC\n         LTR   R15,R15                 OK?\n         BNZ   CANTALLC                NO CAN DO\n         BR    R8             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   ALLOCATION FAILURE                                                *\n*                                                                     *\n***********************************************************************\nCANTALLC MVC   QDTLINE,QBLANK     CLEAR OUT LINE\n         CLC   X99ERROR,=X'046C'  WAS IT 'NOT DEF TO JES2'\n         BE    BADDEST            YES TELL USER\n*\n         MVC   QDTLINE(L'MSGERR),MSGERR\n         CVD   R15,SCRATCH\n         MVC   M2RC,=X'40202020'\n         ED    M2RC,SCRATCH+6\n*\n         UNPK  M2ERC(5),X99ERROR(3)  CONVT DYNAM ALLOC ERR CODE\n         NC    M2ERC,HEXMASK\n         TR    M2ERC,HEXTAB\n         MVI   M2ERC+4,C' '\n*\n         UNPK  M2INFO(5),X99INFO(3)  CONVT DYNAM ALLOC ERR INFO\n         NC    M2INFO,HEXMASK\n         TR    M2INFO,HEXTAB\n         MVI   M2INFO+4,C' '\n         B     GOTMSG\n*\nBADDEST  MVC   QDTLINE(L'MSGDEST),MSGDEST\n         MVC   MDEST,DEST\n         CLI   DEST,C' '             ANY DEST\n         BNE   GOTMSG                YES.. CONTINUE\n         MVC   MDEST(8),=CL8'LOCAL'\n         B     GOTMSG\n*\nGOTMSG   EQU   *\n         LA    R1,0                  SET A ZERO\n         L     R2,4(R13)             RETURN CODE\n         ST    R1,16(R2)\n         MVC   QDREPLY,QBLANK        KISS OFF OUR REPLY\n         XC    QDRLNG,QDRLNG         AND SAY NOBODY HOME (SNEAKY)\n         QSTOP\nHEXTAB   DC    C'0123456789ABCDEF'\nHEXMASK  DC    X'0F0F0F0F0F0F0F0F'\nMSGDEST  DC    C'  DEST XXXXXXXX NOT DEFINED TO JES2; SPIN BYPASSED'\nMSGERR   DC    C'CANT ALLOC SYSOUT FOR SPIN ; DARC= XXXX INFO= XXXX R15X\n               = XXXX '\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nTILT1    QTILT '*** YOU ARE NOT PROCESSING A VALID DATASET ***'\nNOTNUM   QTILT '*** INVALID RANGE FIELD SPECIFIED ***'\nBADCLS   QTILT '*** INVALID SYSOUT CLASS SPECIFIED ***'\n         LTORG\nMVCREC   MVC   BUFFER(1),3(R4)\nPACK     PACK  SCRATCH,0(1,R14)    PACK OPERAND                   WGH\nMVZ      MVZ   QFZONES(1),0(R14)   MOVE ZONES FROM PARM FIELD     WGH\n*\n***********************************************************************\n*                                                                     *\n*   DYNAMIC ALLOCATION CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         DS    0F\nS99RBPTR DC    X'80',AL3(S99RB)\n*\nS99RB    DS    0F\nS99RBLN  DC    AL1(20)             LENGTH = 20 BYTES\nS99VERB  DC    X'01'               VERB CDE=01 (DSN ALLOC)\nS99FLAG1 DC    X'1000'             DONT USE EXISTING ALLOC\nS99ERROR DC    AL2(0)              ERROR CODE\nS99INFO  DC    AL2(0)              INFO CODE\nS99TXTPP DC    A(S99TUPL)          TEXT UNIT PTR PTR\nS99RSVD1 DC    A(0)                RESERVED\nS99FLAG2 DC    A(0)                FLAGS 2\nS99TUPL  DC    A(S99TUKY1)         TEXT UNIT PTR\nS99EPARM DC    X'80',AL3(S99TUKY2) LAST PARM IF NO DEST\nS99UPLL  DC    X'80',AL3(S99TUKY3) LAST PARM IF NO WRTRID GIVEN\nS99UPLLW DC    X'80',AL3(S99TUKY4) LAST PARM IF WRTRID GIVEN\nS99TUNIT DS    0F\n*\nS99TUKY1 DC    X'0001',X'0001',X'0008',C'HASPSAVE'\n*\nS99TUKY2 DC    X'0018',X'0001',X'0001'       SYSOUT\nS99SYSOC DC    C'A'\n*\nS99TUKY3 DC    X'0058',X'0001'        OPTIONAL DEST=RMTXX OR NODE\nS99DESTL DC    X'0000'                LENGTH OF DEST PARM\nS99DEST  DC    CL8'LOCAL'             DEST PARM\nS99TUKY4 DC    X'0063',X'0001'        OPTIONAL WRTRID=USER OR WRTR\nS99WRTRL DC    X'0000'                LENGTH OF WRTR LENGTH\nS99WRTR  DC    CL8' '                 WRTR PARM\nS99LENG  EQU   *-S99RBPTR\n*\n*        DYNALLOC REQUEST CONTROL TO FREE DDNAME\n*\n         DS    0F\nFREEPTR  DC    X'80',AL3(FREERB)\n*\nFREERB   DC    FL1'20'                LENGTH OF RB 20 BYTES\n         DC    XL1'02'                VERB CODE 02 FREE BY DDN\n         DC    AL2(0)                 FLAGS1\nFREERC   DC    XL2'0000'              ERROR CODE\nFREEINFO DC    XL2'0000'              INFO CODE\nFREETPTR DC    AL4(FREETXPT)          TEXT UNIT PTR PTR\n         DC    XL4'00'                RESERVED\n         DC    XL4'00'                FLAGS2\n*\nFREETXPT DC    AL4(FREETU1)           ADDR OF DSN TEXT UNIT\n         DC    X'80',AL3(FREETU2)     ADDR OF UNALLOC TEXT\n*\nFREETU1  DC    X'0001',X'0001',FL2'8',C'HASPSAVE' DDNAME\nFREETU2  DC    X'0007',X'0000'        UNALLOC EVEN IF PERM\nFREELEN  EQU   *-FREEPTR\n*\n***********************************************************************\n*\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nCSPIN    CSECT                                                    GP@P6\n*        QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01\n*        $HASPEQU\n         $JQE                                                        CL\n         $BUFFER ,                                                WGH42\n         QCOMMON\nMDEST    EQU   QDTLINE+7,8\nM2ERC    EQU   QDTLINE+35,4\nM2INFO   EQU   QDTLINE+46,4\nM2RC     EQU   QDTLINE+56,4\n         IFGRPL  ,                                                WGH42\n*        QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\nWORK     DSECT\n         DS    CL80\nBUFFER   DS    CL256\nSCRATCH  DS    D                   DOUBLEWORD                     WGH\nFRSTLINE DS    F                   FIRST LINE TO SAVE             WGH\nLINECNT  DS    F                   CURRENT LINE #                 WGH\nLASTLINE DS    F                   LAST LINE TO SAVE              WGH\nDESTLEN  DS    H                   DESTINATION LENGTH             WGH\nDEST     DS    CL8                 DESTINATION                    WGH\nWRTRLEN  DS    H                   DESTINATION LENGTH             WGH\nWRTRID   DS    CL8                 DESTINATION                    WGH\nCLASS    DS    C                   SYSOUT CLASS                   WGH\n****************************************************************  WGH\n         DS    0F\nDYNALLOC DS    (S99LENG)XL1\n         ORG   DYNALLOC\n*\nX99RBPTR DC    X'80',AL3(X99RB)\n*\nX99RB    DS    0F\nX99RBLN  DC    AL1(20)             LENGTH = 20 BYTES\nX99VERB  DC    X'01'               VERB CDE=01 (DSN ALLOC)\nX99FLAG1 DC    X'1000'             DONT USE EXISTING ALLOC\nX99ERROR DC    AL2(0)              ERROR CODE\nX99INFO  DC    AL2(0)              INFO CODE\nX99TXTPP DC    A(X99TUPL)          TEXT UNIT PTR PTR\nX99RSVD1 DC    A(0)                RESERVED\nX99FLAG2 DC    A(0)                FLAGS 2\nX99TUPL  DC    A(X99TUKY1)         TEXT UNIT PTR\nX99EPARM DC    X'80',AL3(X99TUKY2) LAST PARM IF NO DEST\nX99UPLL  DC    X'80',AL3(X99TUKY3) LAST PARM IF NO WRTRID\nX99UPLLW DC    X'80',AL3(X99TUKY4) LAST PARM IF WRTRID GIVEN\nX99TUNIT DS    0F\n*\nX99TUKY1 DC    X'0001',X'0001',X'0008',C'HASPSAVE'\n*\nX99TUKY2 DC    X'0018',X'0001',X'0001'       SYSOUT\nX99SYSOC DC    C'A'\n*\nX99TUKY3 DC    X'0058',X'0001'        OPTIONAL DEST=RMTXX OR NODE\nX99DESTL DC    X'0000'                LENGTH OF DEST PARM\nX99DEST  DC    CL8'LOCAL'             DEST PARM\n*\nX99TUKY4 DC    X'0063',X'0001'        OPTIONAL WRTRID=USER OR WRTR\nX99WRTRL DC    X'0000'                LENGTH OF WRTRID PARM\nX99WRTR  DC    CL8' '                 WRTRID PARM\n*\n         ORG   DYNALLOC\n         DS    0F\nYREEPTR  DC    X'80',AL3(YREERB)\n*\nYREERB   DC    FL1'20'                LENGTH OF RB 20 BYTES\n         DC    XL1'02'                VERB CODE 02 FREE BY DDN\n         DC    AL2(0)                 FLAGS1\nYREERC   DC    XL2'0000'              ERROR CODE\nYREEINFO DC    XL2'0000'              INFO CODE\nYREETPTR DC    AL4(YREETXPT)          TEXT UNIT PTR PTR\n         DC    XL4'00'                RESERVED\n         DC    XL4'00'                FLAGS2\n*\nYREETXPT DC    AL4(YREETU1)           ADDR OF DSN TEXT UNIT\n         DC    X'80',AL3(YREETU2)     ADDR OF UNALLOC TEXT\n*\nYREETU1  DC    X'0001',X'0001',FL2'8',C'HASPSAVE' DDNAME\nYREETU2  DC    X'0007',X'0000'        UNALLOC EVEN IF PERM\n         ORG   ,\n****************************************************************  WGH\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTSO": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x02\\x17?\\x01\\x03\\x06?\\x14U\\x00\\xd3\\x00\\xca\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2003-03-04T14:55:00", "lines": 211, "newlines": 202, "modlines": 0, "user": "GREG"}, "text": "CTSO     QSTART 'ISSUE TSO COMMANDS WHILE IN QUEUE COMMAND.'      UF017\n         USING WORK,R13       BASE FOR WORK AREA\n         L     R10,QVCKPT     BASE FOR CKTP AREA\n         USING QCKPT,R10      ADDRESSING FOR AREA\n         L     R9,QVDSPL      BASE FOR DISPLAY AREA\n         USING QDISPLAY,R9    ADDRESSING FOR AREA\n         LA    R8,WCPPL       BASE FOR CPPL AREA\n         USING CPPL,R8        ADDRESSING FOR AREA\n         OC    QLNG1,QLNG1    TEST LENGTH OF COMMAND\n         BZ    NOCMD          NONE, ABORT\n         QHEAD QBLANK,X'04'   BLANK HEADING LINE                  GP@P6\n********                      2003-02-07 - REMOVE NEEDLESS TPUT   GP@P6\n**       TPUT  CLEAR,L'CLEAR,FULLSCR,MF=(E,QTPUT)  CLEAR THE SCREEN\n**       LA    R1,CLEAR       POINT TO DATA STREAM                GP@P6\n**       LA    R0,L'CLEAR     GET DATA STREAM LENGTH              GP@P6\n**       ICM   R1,8,=X'03'    SET FLAGS FOR FULLSCR               GP@P6\n**       TPUT  (1),(0),R      CLEAR THE SCREEN                    GP@P6\n********                      2003-02-07 - REMOVE NEEDLESS TPUT   GP@P6\n*        STLINENO LINE=1,MODE=OFF  TURN OFF FULL SCREEN MODE\n         MVC   WMODEL(WMODELEN),MODEL  COPY MODEL AREA TO DSECT AREA\n         MVC   WBLDLFF,=AL2(1)  1 ENTRY IN LIST\n         MVC   WBLDLLL,=AL2(12) 12 BYTES TO BE RETURNED\n         L     R1,DAPLECT     POINT TO ECT\n         USING ECT,R1         SET TEMP ADDRESSING\n         MVC   QDWORD,ECTPCMD SAVE PRIMARY COMMAND NAME\n         MVC   QDWORK,ECTSCMD  AND SECONDARY COMMAND NAME\n         DROP  R1             DROP TEMP ADDRESSING\n         SPACE 1\n         MVC   CPPLUPT,DAPLUPT   COPY UPT POINTER\n         MVC   CPPLPSCB,DAPLPSCB COPY PSCB POINTER\n         MVC   CPPLECT,DAPLECT   COPY ECT POINTER\n         SPACE 1\n         LA    R15,QDREPLY    POINT TO COMMAND LINE\n         AH    R15,QOFF1      POINT TO 1ST PARM (AFTER \"TSO\")\n         SH    R15,=H'4'      BACK UP FOR BUFFER HEADER\n         USING CMDBUF,R15     TEMP ADDRESSING FOR BUFFER\n         LH    R14,QDRLNG     LENGTH OF REPLY\n         SH    R14,QOFF1      - OFFSET TO OPERAND = TEXT LENGTH\n         LA    R14,4(,R14)    + HEADER\n         STH   R14,CMDLEN     SAVE AS LENGTH IN BUFFER\nSCAN     ST    R15,CPPLCBUF   SET BUFFER CB POINTER\n         XC    CMDOFF,CMDOFF  CLEAR OFFSET TO SECOND OPERAND\n         DROP  R15            DROP TEMP ADDRESSING\n         LA    R1,WCSPL       POINT TO IKJSCAN PARM LIST\n         USING CSPL,R1        SET TEMP ADDRESSING\n         L     R2,DAPLUPT     POINT TO UPT\n         ST    R2,CSPLUPT\n         L     R2,DAPLECT     POINT TO ECT\n         ST    R2,CSPLECT\n         LA    R2,WTCBECB     POINT TO ECB\n         MVI   0(R2),0          CLEAR ECB\n         ST    R2,CSPLECB\n         LA    R2,WTCBADDR    WORD FOR FLAGS\n         MVI   0(R2),0          CLEAR FLAGS\n         ST    R2,CSPLFLG\n         LA    R2,WCSOA       POINT TO OUTPUT AREA\n         ST    R2,CSPLOA\n         ST    R15,CSPLCBUF   COMMAND BUFFER ADDRESS TO CSPL\n         DROP  R1             DROP TEMP ADDRESSING\n         CALLTSSR EP=IKJSCAN  SCAN INPUT BUFFER\n         LA    R1,WCSOA       POINT TO OUTPUT AREA\n         USING CSOA,R1        SET TEMP ADDRESSING\n         L     R14,CSOACNM    POINTER TO COMMAND NAME\n         ICM   R15,3,CSOALNM  LENGTH OF NAME\n         BZ    NOCMD2         NONE, SKIP REST\n         BCTR  R15,0          DROP FOR EXECUTE\n         DROP  R1             DROP TEMP ADDRESSING\n         MVC   WBLDLNAM,QBLANK FILL WITH BLANKS\n         EX    R15,MVCCMD      MOVE COMMAND TO WBLDLNAM\n         CLC   =C'EX',QSUBNAME   IMPLICIT EXEC OF CLIST?\n         BNE   NOTEXEC           NO, SKIP THIS\nSETEXEC  NI    QSUBNAME,255-X'40'  DROP TO LOWER CASE\n         MVC   WBLDLNAM,=CL8'EXEC' SET MODULE NAME TO ATTACH\n         L     R1,CPPLCBUF       POINT TO BUFFER\n         USING CMDBUF,R1         TEMP ADDRESSING\n         XC    CMDOFF,CMDOFF     CLEAR OFFSET FOR EXEC\n         B     OKATTACH       AND GO DO IT\n         DROP  R1                DROP TEMP ADDRESSING\nNOTEXEC  DS    0H\n         BLDL  0,WBLDLPRM     CHECK FOR MODULE PRESENT\n         LTR   R15,R15        CHECK RETURN CODE\n         BNZ   SETEXEC        NONE, MUST BE CLIST\n         SPACE 1\nOKATTACH L     R1,DAPLECT     POINT TO ECT\n         USING ECT,R1         SET TEMP ADDRESSING\n         MVC   ECTPCMD,WBLDLNAM FAKE PRIMARY COMMAND NAME\n         MVC   ECTSCMD,QBLANK AND SECONDARY COMMAND NAME\n         DROP  R1             DROP TEMP ADDRESSING\n         SPACE 1\n         MVI   WTCBECB,0      CLEAR ECB\n         LA    R1,WCPPL       CPPL PTR FOR COMMAND\nATTACH   DS    0H\n         ATTACH EPLOC=WBLDLNAM,ECB=WTCBECB,                            +\n               MF=(1,(1)),SF=(E,WATTL)\n         ST    R1,WTCBADDR    SAVE TCB ADDR\nWAIT     DS    0H\n         WAIT  ECB=WTCBECB    WAIT\nDETACH   DS    0H\n         DETACH WTCBADDR\n         SPACE 1\nNOCMD2   DS    0H\n         ICM   R1,15,WGTPB+4  ADDRESS OF GETLINE BUFFER\n         BZ    NOFREE         NONO, SKIP FREEMAIN\n         LH    R0,0(R1)       LENGTH OF BUFFER\n         ICM   R0,B'1000',=X'01'  SUBPOOL 1\n         FREEMAIN R,LV=(0),A=(1)  FREE THE BUFFER\n         SPACE 1\nNOFREE   L     R1,DAPLECT     POINT TO ECT\n         USING ECT,R1         TEMP ADDRESSING\n         L     R1,ECTIOWA     --> I/O WORK AREA\n         DROP  R1             DROP TEMP ADDRESSING\n         L     R1,0(R1)       --> TO ELEMENT ON STACK\n         TM    0(R1),X'40'    FROM STORAGE (CLIST)?\n         BZ    DONE           NO, DONE WITH PROCESSING\n         LA    R1,WIOPL       ADDRESS OF IO PARM LIST\n         L     R2,CPPLUPT     ADDRESS OF UPT\n         L     R3,CPPLECT     ADDRESS OF ECT\n         LA    R4,WTCBECB     ADDRESS OF ECB\n         MVI   WTCBECB,0      CLEAR ECB\n         GETLINE PARM=WGTPB,UPT=(R2),ECT=(R3),ECB=(R4),MF=(E,(1))\n         CH    R15,=H'16'     END OF INPUT?\n         BE    DONE           YES, CLEAN UP AND RETURN\n         LA    R1,WGTPB       POINT TO GETLINE PARM LIST\n         USING GTPB,R1        TEMP ADDRESSING\n         L     R15,GTPBIBUF   POINT TO INPUT BUFFER\n         DROP  R1             DROP TEMP ADDRESSING\n         B     SCAN           AND GO TO SCAN PROCESSING\n         SPACE 1\nDONE     L     R1,DAPLECT     POINT TO ECT\n         USING ECT,R1         SET TEMP ADDRESSING\n         MVC   ECTPCMD,QDWORD RESTORE PRIMARY COMMAND NAME\n         MVC   ECTSCMD,QDWORK  AND SECONDARY COMMAND NAME\n         DROP  R1             DROP TEMP ADDRESSING\nTPUT     DS    0H\n*        TPUT  DONEMSG,L'DONEMSG  ASK FOR ENTER WHEN DONE\nTGET     DS    0H\n*        TGET  QDWORD,L'QDWORD,EDIT,MF=(E,QTGET)  READ RESPONSE\n         STFSMODE ON           RESTORE FULL SCREEN MODE      2003-02-07\n         OI    QFLAG1,QFLG1RSH ENSURE CORRECT SCREEN SIZE    2003-02-15\n         ICM   R0,3,QPDSID     LOOKING AT SYSOUT DATA?       2003-03-04\n         BZ    QSTOP           NO, SCREEN WILL BE EMPTY      2003-03-04\n         L     R15,=V(LISTDS)  YES  (NEED QCODE NON-ZERO)    2003-03-04\n         BALR  R14,R15         RESTORE SYSOUT DATA DISPLAY   2003-03-04\nQSTOP    DS    0H\n         QSTOP\n         SPACE 1\nNOCMD    QTILT '*** NO COMMAND SPECIFIED ***'\n         SPACE 1\nMVCCMD   MVC   WBLDLNAM(*-*),0(R14) MOVE COMMAND TO WBLDLNAM\n         SPACE 1\n*DONEMSG DC    C'*** PRESS ENTER TO RETURN TO QUEUE COMMAND ***'\n********                      2003-02-07 - REMOVE NEEDLESS TPUT   GP@P6\n*CLEAR1   EQU   *\n**        DC    X'27F5C1\n*         DC    X'115D7E'\n*         DC    X'114040'\n*         DC    X'3C404000'\n*         DC    X'1DC8'\n*         DC    X'13'\n*CLEAR    EQU   CLEAR1,*-CLEAR1\n********                      2003-02-07 - REMOVE NEEDLESS TPUT   GP@P6\n         SPACE 1\nMODEL    DS    0D\nMGTPB    GETLINE MF=L\nMATTL    ATTACH SHSPV=78,     NEEDED TO PREVENT S305 ABENDS            +\n               SF=L\nMODELEN  EQU   *-MODEL        LENGTH OF MODEL AREA\n         SPACE 1\n         LTORG\n         SPACE  1\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nWORK     DSECT ,              .\n         DS    18F            SAVE AREA\n         DS    0D\nWMODEL   DS    0D             START OF MODEL AREA\nWGTPB    GETLINE MF=L\nWATTL    ATTACH  SF=L\nWMODELEN EQU   *-WMODEL       CHECK FOR SAME LENGTH.\n         SPACE 1\nWTCBADDR DC    A(0)           ADDRESS OF CREATED TASK\nWTCBECB  DC    A(0)           COMPLETION CONTROL BLOCK.\nWCPPL    DS    4F             SPACE FOR CPPL TO BE PASSED TO CMD\nWPARML   DS    12F            SPACE FOR PARM LISTS\nWIOPL    EQU   WPARML,16      IO PARM LIST FOR GETLINE\nWCSPL    EQU   WPARML,24      PARM LIST FOR IKJSCAN\nWCSOA    EQU   WPARML+24,8    OUTPUT AREA FROM IKJSCAN\n         SPACE 1\n         DS    0F\nWBLDLPRM DS    XL16           WORK AREA FOR BLDL\nWBLDLFF  EQU   WBLDLPRM,2     NUMBER OF ENTRIES IN LIST\nWBLDLLL  EQU   WBLDLPRM+2,2   LENGTH OF EACH ENTRY\nWBLDLNAM EQU   WBLDLPRM+4,8   MEMBER NAME\nWBLDLTTR EQU   WBLDLPRM+12,3  TTR OF START\nWBLDLK   EQU   WBLDLPRM+15,1  CONCATENATION NUMBER\n         SPACE 1\nWORKLEN  EQU   *-WORK         LENGTH OF WORK AREA\n         SPACE 1\n         IKJCPPL  ,\n         IKJCSOA  ,\n         IKJCSPL  ,\n         IKJECT   ,\n         IKJGTPB  ,\n         CVT   DSECT=YES\n         SPACE 1\nCMDBUF   DSECT\nCMDLEN   DC    H'0'           LENGTH, INCLUDES HEADER (+4)\nCMDOFF   DC    H'0'           OFFSET TO NONBLANK PAST COMMAND.\nCMDTEXT  DC    C' '           FIRST TEXT BYTE.\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DDNAME": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x0e\\x00\\x00\\x01\\x02\\x17/\\x01\\x021\\x1f\\x17$\\x01%\\x01\\x10\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.14", "flags": 0, "createdate": "2002-06-21T00:00:00", "modifydate": "2002-11-07T17:24:00", "lines": 293, "newlines": 272, "modlines": 0, "user": "GREG"}, "text": "DDNAME   QSTART 'QUEUE COMMAND - LIST DDNAMES AND DSIDS FOR A JOB'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB11 - ALLOW COMMAND OF FORM   DD NAME S  WHERE S MEANS   *\n*                  TO LIST THE SPIN DATA SETS EVEN IF A BATCH JOB.    *\n*                  ADDED BECAUSE OUR IMS SYSTEM SPINS OFF DUMP DATA   *\n*                  SETS THAT WE WANT TO LOOK AT.                      *\n*      (2) RNB12 - WITH SP2 JES2 WE ALWAYS SEEM TO GET THE 'ALREADY   *\n*                  PRINTED' MESSAGE FOR SPIN DATA SETS. THIS CHANGE   *\n*                  BYPASSES THE MESSAGE IF QSP=1.                     *\n***********************************************************************\n         GBLB  &QRNB                                              RNB11\n         GBLB  &QSP                                               RNB12\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART    GP@P6\n         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ROUTINE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n         XC    QPDSID,QPDSID  NO LONGER LOOKING AT A DATA SET     GP@P6\n         CLI   PF3LEVEL+1,2   MANUAL 'DD' FROM SELECTED SYSOUT?   GP@P6\n         BNE   *+8            NO, LEAVE PF3 LEVEL ALONE           GP@P6\n         MVI   PF3LEVEL+1,1   YES, REDUCE TO LEVEL 1              GP@P6\n***********************************************************************\n*                                                                     *\n*   DETERMINE JOB TYPE (BATCH OR TSO)                                 *\n*                                                                     *\n***********************************************************************\n         USING JCTSTART,R1    BASE REG FOR JCT\n         USING PDBDSECT,R2    BASE REG FOR PDDB\n         USING IOTSTART,R3    BASE REG FOR IOT\n         L     R1,QCJCTA      A(JCT)\n         CLI   QPARM2,C'S'                                        RNB11\n         BE    DDTSO                                              RNB11\n         CLC   JCTJOBID(3),=CL3'TSU' ?/TSO USER\n         BE    DDTSO          YES. GO PROCESS\n         CLC   JCTJOBID(3),=CL3'STC' ?/STARTED TASK\n         BE    DDTSO          YES. GO PROCESS\n***********************************************************************\n*                                                                     *\n*   LOCATE PDDB NUMBER 5                                              *\n*                                                                     *\n***********************************************************************\nDDJOB    L     R3,QCIOTA      LOAD BASE REG\n         LR    R4,R3          BASE OF IOT\n         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB\n         LR    R2,R3          BASE OF IOT\n         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN IOT\n         MVC   QPDSID,=H'0'   NULLIFY VALIDITY FOR LISTDS\nFINDDS   CLC   =H'5',PDBDSKEY IS THIS THE DATASET?\n         BE    FOUNDDS        YES. CONTINUE.\n         LA    R2,PDBLENG(R2) NO. LOOK AT NEXT PDDB.\n         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB?\n         BL    FINDDS         NO. TRY AGAIN.\n         QTILT '*** JOB DOES NOT HAVE DD TABLE ***'\nFOUNDDS  L     R4,PDBMTTR     DISK ADDR OF FIRST BLOCK\n         L     R5,QCBLKA      ADDR OF DATASET BLOCK IOAREA\n         MVC   QDMSG,QBLANK   BLANK OUT THE MESSAGE AREA\n         B     FIRST          PROCESS DATASET\nCPTSOID  CLC   QLOGON(0),QPARM1  IS PARM THE USER'S TSOID.\n***********************************************************************\n*                                                                     *\n*   PROCESS DATASET                                                   *\n*                                                                     *\n***********************************************************************\nNEXTBLK  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK\nFIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?\n         BZ    END            YES. END OF DATASET.\n         BAL   R8,READ        READ A BLOCK\n         CLC   QPJOBID,4(R5)  DOES THE JOBID MATCH?\n         BNE   END            NO. END OF DATASET.\n         CLC   =H'5',8(R5)    IS THE DSID 5?\n         BNE   END            NO. END OF DATASET.\n         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK\n***********************************************************************\n*                                                                     *\n*   PROCESS RECORDS                                                   *\n*                                                                     *\n***********************************************************************\nNEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?\n         BE    NEXTBLK        YES. END OF BLOCK.\n         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPAN           YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R4)       INSERT LENGTH\n         TM    5(R4),2        IS THIS AN EXEC RECORD?\n         BO    EXEC           YES. PROCESS IT.\n         TM    5(R4),4        IS THIS A DD RECORD?\n         BO    DD             YES. PROCESS IT.\nSKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nSPAN     LH    R6,2(R4)       LENGTH OF SEGMENT\n         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPANFRST       YES. USE HEADER LENGTH OF 6.\n         LA    R4,4(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nSPANFRST LA    R4,6(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nEND      QSTOP\n***********************************************************************\n*                                                                     *\n*   PROCESS AN EXEC RECORD                                            *\n*                                                                     *\n***********************************************************************\nEXEC     MVC   STEPNAME,QBLANK BLANK OUT THE STEPNAME\n         CLI   7(R4),X'94'    IS THERE A STEPNAME?\n         BNE   SKIPREC        NO. SKIP THE REST.\n         SR    R1,R1          ZERO OUT R1\n         IC    R1,9(R4)       LENGTH OF STEPNAME\n         SH    R1,=H'1'       DECREMENT BY 1\n         BM    SKIPREC        STEPNAME WAS ZERO LENGTH.\n         EX    R1,MVCSTEP     MOVE THE STEPNAME\n         B     SKIPREC        CONTINUE PROCESSING\n***********************************************************************\n*                                                                     *\n*   PROCESS DD RECORDS                                                *\n*                                                                     *\n***********************************************************************\nDD       TM    6(R4),X'30'    IS THIS A SYSIN OR SYSOUT DD?\n         BZ    SKIPREC        NO. SKIP THE RECORD.\n         MVC   DDN,QBLANK     BLANK OUT THE DDNAME\n         MVC   DSID,QBLANK    BLANK OUT THE DSID\n         MVC   DSRECCT,QBLANK BLANK OUT THE DS RECORD COUNT\n         MVC   DSCLASS,QBLANK BLANK OUT THE DS CLASS\n         LA    R7,7(R4)       ADDR OF FIRST KEY\n         LR    R8,R6          REMAINING LENGTH OF RECORD\n         SR    R15,15         ZERO OUT R15\n         SR    R14,R14        ZERO OUT R14\n         SR    R1,R1          ZERO OUT R1\nTRYFLD   CLI   0(R7),X'6E'    IS THIS THE DDNAME?\n         BE    DDKEY          YES. PROCESS IT.\n         CLI   0(R7),X'4A'    IS THIS THE DSNAME?\n         BNE   NEXTFLD        NO. GET NEXT FIELD\n         CLC   3(3,R7),=C'JES' YES. IS THIS TRULY A JES2 SYSIN/OUT DS?\n         BE    DSKEY          YES. PROCESS IT.\nNEXTFLD  IC    R1,1(R7)       NUMBER OF SUBFIELDS\n         LA    R7,2(R7)       UPDATE LOCATION\n         SH    R8,=H'2'       REMAINING COUNT\n         SR    R8,R1          REMAINING COUNT\n         BNP   SKIPREC        RECORD IS EXHAUSTED\n         LTR   R1,R1          ARE THERE ANY SUBFIELDS?\n         BZ    TRYFLD         NO. TRY NEXT FIELD.\nLOOPFLD  TM    0(R7),X'80'    IS THIS A SUB-SUB-FIELD\n         BZ    NOSUB          NO. CONTINUE.\n         NI    0(R7),X'7F'    CLEAR THE HEX 80 BIT\n         IC    R14,0(R7)      NUMBER OF SUB-SUB-FIELDS\n         LA    R7,1(R7)       UPDATE LOCATION\n         SH    R8,=H'1'       REMAINING COUNT\n         SR    R8,R14         REMAINING COUNT\n         BNP   SKIPREC        RECORD IS EXHAUSTED\n         AR    R1,R14         INCREASE NUMBER OF SUBFIELDS\n         B     YESSUB         DECREMENT AND TRY AGAIN\nNOSUB    IC    R15,0(R7)      SUBFIELD LENGTH\n         LA    R7,1(R15,R7)   ADD TO LOCATION\n         SR    R8,R15         REMAINING COUNT\n         BNP   SKIPREC        RECORD IS EXHAUSTED\nYESSUB   BCT   R1,LOOPFLD     DO NEXT SUBFIELD\n         B     TRYFLD         TRY NEXT FIELD\nDDKEY    IC    R1,2(R7)       LENGTH OF DDNAME\n         LTR   R1,R1          IS THE LENGTH ZERO?\n         BZ    NEXTFLD        YES. SKIP THE FIELD.\n         BCTR  R1,0           DECREMENT BY 1\n         EX    R1,MVCDDN      MOVE THE DDNAME\n         B     NEXTFLD        PROCESS NEXT FIELD\nDSKEY    MVC   DSID+1(3),20(R7)  MOVE THE DSID\n         L     R15,=V(FINDPDDB) ADDR OF FINDPDDB MODULE\n         BALR  R14,R15        GO TO IT\n         QHEAD HEADING,X'24',TYP=QDDD,DMY=Y        GREEN REVERSE  GP@P6\n         AIF   (NOT &QPFK).DDNOSEL                                GP@P6\n         MVI   QDMSG,X'0B'    INPUT HIGH INTENSITY                GP@P6\n         MVI   QDMSG+1,C'.'   SUPPLY LEADER DOT                   GP@P6\n         MVI   QDMSG+2,X'0C'  OUTPUT LOW INTENSITY                GP@P6\n.DDNOSEL ANOP                                                     GP@P6\n         LA    R1,QDMSG       ADDR OF MESSAGE LINE\n         ST    R1,QDMSGA      STORE IN MESSAGE ADDR\n         MVC   QDMLNG,=H'80'  MESSAGE LENGTH\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        GO TO IT\n         B     SKIPREC        PROCESS NEXT RECORD\n***********************************************************************\n*                                                                     *\n*   PROCESS DD TSU                                                    *\n*                                                                     *\n***********************************************************************\nDDTSO    L     R5,QCBLKA      ADDR OF DATASET BLOCK IOAREA\n         LR    R3,R5          BASE OF IOAREA\n         L     R4,JCTSPIOT    ADDR OF FIRST SPIN IOT\nTSO010   LTR   R4,R4          IS IOT ADDR ZERO?\n         BZ    DDJOB          YES, GO READ REGULAR IOT'S\n         BAL   R8,READ        READ IOT\n         LR    R4,R3          BASE OF IOT\n         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB\n         LR    R2,R3          BASE OF IOT\n         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN IOT\nTSO020   CLI   PDBFLAG1,X'00' IS THIS PDDB VALID\n         BE    TSO040         NO, GET NEXT IOT\n         MVC   QDMSG,QBLANK   BLANK MESSAGE LINE\n         MVC   DDN,=CL8'SPIN-DS'      MOVE IN DDNAME\n         SR    R0,R0          CLEAR REG 0\n         LH    R0,PDBDSKEY    CONVERT\n         CVD   R0,CONVERT        DATA SET\n         MVC   DSID,ED4               ID  TO\n         ED    DSID,CONVERT+6             ZERO\n         L     R0,PDBRECCT    CONVERT\n         CVD   R0,CONVERT        RECORD\n         MVC   DSRECCT,ED8          COUNT TO\n         ED    DSRECCT,CONVERT+4        CHARACTER\n         MVC   DSCLASS,PDBCLASS  MOVE IN SYSOUT CLASS\n         AIF   (&QSP).RNB12A                                      RNB12\n         TM    PDBFLAG1,PDB1PSO  HAS DATA SET BEEN PRINTED\n         BO    TSO030         NO\n         MVC   MESSAGE,PRTMSG INDICATE DATA SET PRINTED\n.RNB12A  ANOP\nTSO030   QHEAD HEADING,X'24',TYP=QDDD,DMY=Y        GREEN REVERSE  GP@P6\n         AIF   (NOT &QPFK).TSNOSEL                                GP@P6\n         MVI   QDMSG,X'0B'    INPUT HIGH INTENSITY                GP@P6\n         MVI   QDMSG+1,C'.'   SUPPLY LEADER DOT                   GP@P6\n         MVI   QDMSG+2,X'0C'  OUTPUT LOW INTENSITY                GP@P6\n.TSNOSEL ANOP                                                     GP@P6\n         LA    R1,QDMSG       ADDR OF MESSAGE LINE\n         ST    R1,QDMSGA      STORE IN MESSAGE ADDR\n         MVC   QDMLNG,=H'80'  MESSAGE LENGTH\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        GO TO IT\n         LA    R2,PDBLENG(R2) LOOK AT NEXT PDDB\n         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB\n         BL    TSO020         NO, TRY AGAIN\nTSO040   L     R4,IOTIOTTR    DISK ADDR OF NEXT IOT\n         B     TSO010         GO SEARCH THE NEXT IOT\n***********************************************************************\n*                                                                     *\n*   READ A BLOCK FROM HASPACE                                         *\n*                                                                     *\n***********************************************************************\nREAD     ST    R4,QCTRAK      STORE DISK ADDR\n         LR    R1,R5          IOAREA ADDRESS\n         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\n         BR    R8             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nMVCSTEP  MVC   STEPNAME(1),10(R4)\nMVCDDN   MVC   DDN(1),3(R7)\n         AIF   (NOT &QPFK).DDNOESS                                GP@P6\nHEADING  DC   CL80' S  STEPNAME    DDNAME      DSID      LINES   CLASS'\n         AGO   .DONEHDG                                           GP@P6\n.DDNOESS ANOP                                                     GP@P5\nHEADING  DC   CL80'    STEPNAME    DDNAME      DSID      LINES   CLASS'\n.DONEHDG ANOP                                                     GP@P5\nED4      DC    X'40202120'\nED5      DC    X'4020202120'\nED8      DC    X'4020202020202120'\nPRTMSG   DC    CL15'ALREADY PRINTED'\n         DROP  ,                   DROP ALL ADDRESSINGS           NERDC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nDDNAME   CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $TAB\n         $JCT\n         $PDDB\n         $IOT\nWORK     DSECT\n         DS    CL72\nCONVERT  DS    D\n         QCOMMON\n         ORG   QDMSG\n         DS    CL4\nSTEPNAME DS    CL8\n         DS    CL4\nDDN      DS    CL8 END OF DATA. LAST REC #'\n         DS    CL4\nDSID     DS    CL4\n         DS    CL4\nDSRECCT  DS    CL8\n         DS    CL4\nDSCLASS  DS    CL1\n         DS    CL6\nMESSAGE  DS    CL15\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISPLAY": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P8\\x00\\x00\\x01\\x02\\x17/\\x01\\x03\\x06?\\x15$\\x02\\x1d\\x00\\xcb\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.56", "flags": 0, "createdate": "2002-06-21T00:00:00", "modifydate": "2003-03-04T15:24:00", "lines": 541, "newlines": 203, "modlines": 0, "user": "GREG"}, "text": "DISPLAY  QSTART 'QUEUE COMMAND - 3270 DISPLAY ROUTINES'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*     (1) RNB13 - MODIFICATIONS TO FIX PROBLEMS WITH TCAM FULL-SCREEN *\n*                 PROCESSING OF TEST-REQUEST, SYSTEM REQUEST, AND THE *\n*                 PA2/PA3 KEYS.                                       *\n*     (2) RNB14 - MODIFICATIONS TO FIX PROBLEMS FULL-SCREEN           *\n*                 PROCESSING. THIS ONE ALLOWS THE USER TO TYPE IN THE *\n*                 TOP COMMAND LINE WITHOUT QUEUE MISINTERPRETING WHAT *\n*                 WAS ENTERED. (TRY THE DO COMMAND FROM BOTH PLACES   *\n*                 WITHOUT THE MOD TO SEE THE EFFECT.)                 *\n*     (3) RNB15 - RESTORE PFK DEFINITIONS FOR PF7 AND PF8 TO ORIGINAL *\n*                 ICBC VALUES OF -27 AND +27. WE DON'T HAVE THE OTHER *\n*                 3278 MODELS, AND PARTIAL SCROLLING IS EASIER AND    *\n*                 MORE SPF CONSISTENT WITH THE ORIGINAL VALUES. ONLY  *\n*                 IF QRNB=1.                                          *\n***********************************************************************\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART     ICBC\n         GBLB  &QRNB                                              RNB13\n         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA\n         L     R10,QVDSPL     ADDR OF DISPLAY WORK AREA\n         USING QCPRINT,R9     BASE REG FOR PRINT   WORK AREA       FCI*\n         L     R9,QVPRINT     ADDR OF PRINT   WORK AREA            FCI*\n***********************************************************************\n*                                                                     *\n*   CHECK FOR ROOM ON SCREEN                                          *\n*                                                                     *\n***********************************************************************\n         MVI   QDOVER,0       ZERO OUT THE PAGE OVERFLOW INDICATOR\n         L     R1,QDPLUS@     POINT TO PLUS SIGN POSITION         GP@P6\n         MVI   0(R1),C' '     BLANK THE OVERFLOW INDICATOR        GP@P6\n         LH    R4,QDMLNG      LOAD MSG LENGTH\n         C     R4,QDSCRLEN    IS THE MSG LENGTH > SCRSIZE?  GP@P6 UF003\n         BH    RETURN         YES. GO AWAY.\n         MVC   QPRSAVE,QDTLINE        SAVE SUBTITLE LINE ON ENTRY  FCI*\n         LTR   R4,R4          IS MSG LENGTH ZERO?\n         BZ    WRTSCR         YES. WRITE SCREEN.\n         MVI   0(R1),C'+'     INDICATE SCREEN OVERFLOW            GP@P6\n         AH    R4,QDNEXT      ADD CURRENT LOCATION ON SCREEN\n         C     R4,QDSCRLEN    IS THERE ROOM ON THE SCREEN?  GP@P6 UF003\n         BH    WRTSCR         NO. WRITE SCREEN.\n***********************************************************************\n*                                                                     *\n*   MOVE THE MESSAGE TO THE SCREEN                                    *\n*                                                                     *\n***********************************************************************\nDSP2     LH    R7,QDMLNG      LOAD MESSAGE LENGTH\n         LTR   R7,R7          IS MESSAGE LENGTH ZERO?\n         BZ    RETURN         YES. RETURN.\n         LH    R4,QDNEXT      LOAD CURRENT SCREEN LINE NUMBER\n         LR    R1,R4          SAVE LINE NUMBER\n         A     R4,QDLINE1@    LOAD ADDRESS OF NEXT LINE           GP@P6\n         L     R6,QDMSGA      LOAD ADDR OF MESSAGE\n         LH    R5,QDLNELEN    LENGTH MUST BE MULTIPLE OF LINESIZE UF003\nDSP3     CR    R5,R7          IS 5 NOT LESS THAN 7?\n         BNL   DSP4           YES. GO DO IT.\n         AH    R5,QDLNELEN    INCR BY LINE LENGTH                 UF003\n         B     DSP3           TRY AGAIN\nDSP4     AR    R1,R5          UPDATE LINE NUMBER\n         STH   R1,QDNEXT      STORE LINE NUMBER\n         LR    R14,R4         SAVE TARGET ADDRESS                 GP@P6\n         LR    R15,R5         SAVE TARGET LENGTH                  GP@P6\n         MVCL  R4,R6          MOVE THE MESSAGE TO THE SCREEN\n         LR    R4,R14         COPY TARGET ADDRESS                 GP@P6\n         LA    R6,QDSCRTXT    POINT TO PRIMARY BUFFER             GP@P6\n         SR    R14,R6         GET TARGET SCREEN LOCATION          GP@P6\n         A     R14,QDSHADO@                                       GP@P6\n         ICM   R7,8,QDLNCODE  GET SHADOW DISPLAY CODE             GP@P6\n         LR    R5,R14         SAVE TARGET ADDRESS                 GP@P6\n         MVCL  R14,R6         PROPAGATE DISPLAY CODE IN SHADOW    GP@P6\n         CLI   0(R4),X'0B'    HIGH INTENSITY INPUT FIELD?         GP@P6\n         BNE   RETURN         NO                                  GP@P6\n         MVI   1(R5),X'01'    YES, SHOW LEADER DOT IN BLUE        GP@P6\n         CLI   10(R4),X'0B'   HIGH INTENSITY INPUT FIELD?         GP@P6\n         BNE   RETURN         NO                                  GP@P6\n         MVI   11(R5),X'02'   YES, SHOW JOB CLASS IN RED          GP@P6\n         CLI   13(R4),X'06'   YELLOW DISPLAY LINE?                GP@P6\n         BE    RETURN         YES, LEAVE CLASS IN RED             GP@P6\n         MVI   11(R5),X'04'   NO, SHOW JOB CLASS IN GREEN         GP@P6\n***********************************************************************\n*                                                                     *\n*   RETURN TO CALLER                                                  *\n*                                                                     *\n***********************************************************************\nRETURN   QSTOP\n***********************************************************************\n*                                                                     *\n*   WRITE A FULL SCREEN, WAIT FOR REPLY                               *\n*            (TRANSLATE OF UNDISPLAYABLES NOW DONE IN Q15 - GP@P6)    *\n***********************************************************************\nWRTSCR   L     R1,QDPLUS@     NO, POINT TO PF3 MEANING INDICATOR  GP@P6\n         MVC   1(7,R1),QBLANK CLEAR PF3 MEANING OVERRIDE LABEL    GP@P6\n         TM    QFLAG1,QFLG1HLP  IN HELP WITH VALID DATA SET?      GP@P6\n         BNO   WRTHLPOK       NO                                  GP@P6\n         MVC   2(6,R1),=C'PF3=+0'                                 GP@P6\n         B     WRTLEVEL       YES, LEVEL 2 SO PF3 IS \"EXIT HELP\"  GP@P6\nWRTHLPOK CLI   PF3LEVEL+1,1   ANY COMMAND LEVELS STACKED?         GP@P6\n         BL    WRTLEVEL       NO, DISPLAY TEXT NOW READY          GP@P6\n         MVC   2(6,R1),=C'PF3=DD'                                 GP@P6\n         BH    WRTLEVEL       YES, LEVEL 2 SO PF3 MEANS 'DD'      GP@P6\n         MVC   6(2,R1),PF3CMD1     LEVEL 1 SO SHOW ACTUAL MEANING GP@P6\nWRTLEVEL L     R15,=V(BLD3270)                                    GP@P6\n         BALR  R14,R15        GO CONSTRUCT 3270 DATA STREAM       GP@P6\n         SPACE 1                                                  UF003\nTPUTSCRN DS    0H                                                 UF003\n         L     R0,QDLENGTH    LOAD LENGTH FOR TPUT          GP@P6 UF003\n         L     R1,QDCBPRM4    POINT TO DATA STREAM                GP@P6\n         MVC   1(1,R1),QDSCRO1 COPY EW OR EWA COMMAND             GP@P6\n         TM    QFLAG1,QFLG1RSH                                    GP@P6\n         BO    RESHOWOK       LEAVE EW OR EWA FOR RESHOW          GP@P6\n         MVI   1(R1),X'F1'    REPLACE COMMAND WITH ORDINARY WRITE GP@P6\nRESHOWOK CLC   QDSCRPLN,=F'4096'                                  GP@P6\n         BNH   TPUTFLSC       TPUT FULLSCR IS SUFFICIENT          GP@P6\n         LA    R15,1(,R1)     SKIP ESCAPE - POINT TO VTAM COMMAND GP@P6\n         BCTR  R0,0           DECREMENT DATA STREAM LENGTH        GP@P6\n         OI    1(R15),X'02'   SET WCC TO UNLOCK KEYBOARD          GP@P6\n         TPUT  (15),(0),NOEDIT,MF=(E,QTPUT) NOEDIT FOR 14-BIT ADR GP@P6\n         B     TPUTDONE       TPUT HAS NOW BEEN ISSUED            GP@P6\nTPUTFLSC ICM   R1,8,=X'03'    LOAD FLAGS FOR FULLSCR              GP@P6\n         TPUT  (1),(0),R      DISPLAY NEW SCREEN IMAGE            GP@P6\nTPUTDONE MVC   QDTLINE,QPRSAVE        RESTORE SUBTITLE INFO        FCI*\n         AIF  (&QPFK).PFK1    SKIP NON-PFK CODE                    ICBC\n         LA    R1,QDREPLY     POINT TO INPUT BUFFER               GP@P6\n         LA    R0,L'QDREPLY   GET INPUT BUFFER LENGTH             GP@P6\n         ICM   R1,8,=X'80'    SET FLAGS FOR TGET EDIT             GP@P6\n         TGET  (1),(0),R      READ TERMINAL INPUT                 GP@P6\n         STH   R1,QDRLNG      STORE LENGTH OF REPLY\n         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?\n         BNE   NOCLEAR        NO. CONTINUE.\n         TCLEARQ INPUT        CLEAR THE QUEUE\nNOCLEAR  DS    0H\n         AGO   .PFK2                                               ICBC\n.PFK1    ANOP                                                      ICBC\n         LA    R6,QDREPLY                                          ICBC\n         XC    PFREPLY,PFREPLY                                     ICBC\n         XC    QDREPLY,QDREPLY                                     ICBC\n         LA    R1,PFREPLY     POINT TO INPUT BUFFER               GP@P6\n         LA    R0,L'PFREPLY   GET INPUT BUFFER LENGTH             GP@P6\n         ICM   R1,8,=X'81'    SET FLAGS FOR TGET ASIS             GP@P6\n         TGET  (1),(0),R      READ TERMINAL INPUT                 GP@P6\n         LR    R5,R1          COPY THE INPUT LENGTH               GP@P6\n         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?         ICBC\n         BNE   NOCLEAR        NO. CONTINUE.                        ICBC\n         TCLEARQ INPUT        CLEAR THE QUEUE                      ICBC\nNOCLEAR  OI    QFLAG1,QFLG1RSH   FLAG RESHOW REQUEST              GP@P6\n         CLI   PFCODE,X'6E'      PA2?                             RNB13\n         BE    TPUTSCRN          /YES - GO RESHOW SCREEN          RNB13\n         CLI   PFCODE,X'6B'      PA3?  (TCAM GENERATED)           RNB13\n         BE    TPUTSCRN          /YES - GO RESHOW SCREEN          RNB13\n         NI    QFLAG1,255-QFLG1RSH      NOT RESHOW REQUEST        GP@P6\n***********************************************************************\n*                                                                     *\n*   PLACE INPUT TEXT INTO SCREEN IMAGE                GP@P6 JUNE 2002 *\n*                                                                     *\n***********************************************************************\n         L     R0,QDCBPRM4       POINT TO A COPY AREA\n         L     R1,QDSCRPLN       GET SCREEN SIZE\n         LA    R14,QDSCRTXT      POINT TO SCREEN TEXT\n         LR    R15,R1            GET SCREEN SIZE\n         MVCL  R0,R14            COPY PRE-INPUT SCREEN CONTENTS\n         XC    QDTLINE,QDTLINE   CLEAR COMMAND ECHO FIELD\n         LA    R4,PFREPLY        POINT TO INPUT BUFFER\nNEWFIELD SLR   R1,R1             CLEAR FOR INSERT\n         ICM   R1,3,1(R4)        CATER FOR UNLIKELY 14-BIT ADDRESS\n         TM    1(R4),X'40'       14-BIT ADDRESS?\n         BZ    BINADROK          YES, BUT THAT MEANS SCREEN > 4096 LOCS\n         NI    1(R4),X'3F'       REMOVE 3270 \"PARITY\" BITS\n         NI    2(R4),X'3F'       REMOVE 3270 \"PARITY\" BITS\n         SLR   R1,R1             CLEAR FOR INSERT\n         IC    R1,2(,R4)         LOAD SCREEN LOCATION OF FIELD\n         SLL   R1,2\n         ICM   R1,2,1(R4)\n         SRL   R1,2\nBINADROK CLI   0(R4),X'11'       LOOKING AT AN INPUT FIELD?\n         BNE   CRSELCTN          NO, PROCESS CURSOR SELECTION\n         LA    R4,3(,R4)         POINT PAST SBA ORDER\n         SH    R5,=H'3'          GET DATA LENGTH SBA ORDER\n         BNP   SELCHARS          INPUT ENDED WITH NULL FIELD\n         LA    R1,QDSCRTXT(R1)   POINT TO INPUT AREA IN SCREEN IMAGE\nINCHARLP CLI   0(R4),X'11'       FOUND NEXT SBA ORDER?\n         BE    NEWFIELD          YES, IT IS A NEW INPUT FIELD\n         MVC   0(1,R1),0(R4)     NO, COPY THE TYPED CHARACTER\n         LA    R1,1(,R1)         POINT TO NEXT SCREEN LOCATION\n         LA    R4,1(,R4)         POINT TO NEXT INPUT BYTE\n         BCT   R5,INCHARLP       GO PROCESS NEXT INPUT BYTE\n         B     SELCHARS          LAST FIELD NOW PROCESSED\n***********************************************************************\n*                                                                     *\n*   PROCESS \"POINT-AND-SHOOT\"                     GP@P6 NOVEMBER 2002 *\n*                                                                     *\n***********************************************************************\n*\n*  CONTROL COMES HERE AFTER A 3270 BUFFER ADDRESS HAS BEEN DECODED\n*  BUT THE BYTE BEFORE THE BUFFER ADDRESS WAS NOT AN SBA.  THIS\n*  HAPPENS WHEN THE BYTE BEFORE THE BUFFER ADDRESS IS THE AID, AND\n*  THE BUFFER ADDRESS IS THE CURSOR LOCATION.  WHEN THIS HAPPENS\n*  \"POINT-AND-SHOOT\" PROCESSING IS PERFORMED.\n*\n*  \"POINT-AND-SHOOT\" OR \"JUMP FROM LEADER DOTS\" TAKES PLACE WHEN THE\n*  CURSOR IS PLACED ON A LEADER DOT.  IN QUEUE (TO DATE) ALL LEADER\n*  DOTS ARE IN THE SECOND SCREEN COLUMN FOLLOWING A FIELD ATTRIBUTE\n*  BYTE IN THE FIRST SCREEN COLUMN.  THE MAIN INPUT AREAS ON THE FIRST\n*  AND LAST SCREEN LINES DO NOT START AT THE LEFT EDGE OF THE SCREEN SO\n*  THERE IS NO CHANCE OF GENERATING INPUT FOR EITHER OF THOSE FIELDS.\n*\n*  INTERNALLY, AN 'S' IS PLACED WHERE THE CURSOR WAS (AFTER THE\n*  VALIDATION MENTIONED ABOVE) FOR SUBSEQUENT PROCESSING.\n*\n*  NOTE THAT THIS TAKES PLACE BEFORE THE PROCESSING OF TYPED-IN INPUT\n*  AND SO IT CAN BE OVERLAID BY TEXT TYPED IN INCLUDING A BLANK, BUT\n*  EXCLUDING A DELETE OR FIELD ERASURE.\n*\nCRSELCTN TM    QFLAG2,QFLG2PNS   IS \"POINT-AND-SHOOT\" GENNED?\n         BNO   PNSDONE           NO, SUPPRESS IT\n         BCTR  R1,0              GET LOCATION OF PREVIOUS BYTE\n         LA    R4,QDSCRTXT(R1)   POINT TO THIS PREVIOUS BYTE\n         CLI   0(R4),X'0B'       SELECTION CODE ATTRIBUTE BYTE?\n         BNE   PNSDONE           NO, CANNOT BE \"POINT-AND-SHOOT\"\n         LH    R15,QDLNELEN      GET THE LINE LENGTH\n         SLR   R0,R0             CLEAR FOR DIVIDE\n         DR    R0,R15            GET RELATIVE LINE AND COLUMN\n         LTR   R0,R0             WAS CURSOR IN COLUMN 2?\n         BNZ   PNSDONE           NO, DO NOT SET JOB CLASS TO S\n         MVI   1(R4),C'S'        YES, SET IMPLIED SELECTION CODE\n         LA    R4,PFREPLY+3      POINT TO INPUT BUFFER\n         SH    R5,=H'3'          GET DATA LENGTH AFTER HEADER\n         BP    NEWFIELD          PROCESS INPUT FIELD\n         B     SELCHARS          NO 3270 FIELDS SO PROCESS THIS 'S'\nPNSDONE  LA    R4,PFREPLY+3      POINT TO INPUT BUFFER\n         SH    R5,=H'3'          GET DATA LENGTH AFTER HEADER\n         BP    NEWFIELD          PROCESS INPUT FIELD\n         SLR   R1,R1             RESET TEXT LENGTH\n         B     NULLTEXT          NO 3270 FIELDS WERE MODIFIED\n***********************************************************************\n*                                                                     *\n*   PROCESS LINE SELECTION CODES                      GP@P6 JUNE 2002 *\n*                                                                     *\n***********************************************************************\nSELCHARS L     R5,QDLINE1@       POINT TO FIRST DETAIL LINE\nSELCHRLP CLI   0(R5),X'0B'       SELECTION CODE ATTRIBUTE BYTE?\n         BNE   PRIMCMND          NO, NO MORE SELECTION CODES ON SCREEN\n         LA    R1,1(,R5)         POINT TO ACTION/SELECTION CODE\n         CLI   1(R5),C'.'        SELECTION CODE TYPED HERE?\n         BH    DOACTION          YES\nCHKJBCLS CLI   10(R5),X'0B'      JOB CLASS CHANGE ALLOWED?\n         BNE   NEXTSELN          NO, CANNOT HAVE BEEN UPDATED\n         CLI   11(R5),C'.'       CLASS JUST BLANKED OUT?\n         BNH   NEXTSELN          YES\n         OI    11(R5),X'40'      FOLD TEXT TO UPPER CASE\n         LR    R1,R5             POINT TO DISPLAY LINE\n         LA    R0,QDSCRTXT       POINT TO START OF SCREEN BUFFER\n         SR    R1,R0             GET OFFSET\n         A     R1,QDCBPRM4       POINT TO PRE-INPUT SCREEN CONTENTS\n         CLC   11(1,R5),11(R1)   ANY CHANGE?\n         BE    NEXTSELN          NO\n         LA    R1,11(,R5)        YES, POINT TO NEW TEXT\n         CLI   0(R1),C'A'        VALIDATE CLASS\n         BL    BADCOMND\n         CLI   0(R1),C'9'\n         BH    BADCOMND          HOW WAS THAT DONE?\n         CLI   0(R1),C'0'\n         BNL   GOODCLS\n         MVC   80(1,R13),0(R1)\n         NI    80(R13),X'0F'\n         CLI   80(R13),0\n         BE    BADCOMND          PROBABLY BRACE OR BACKSLASH\n         CLI   80(R13),9\n         BH    BADCOMND\n         CLI   0(R1),X'E1'       FOR COMPLETENESS...\n         BE    BADCOMND\nGOODCLS  MVC   OSCMDTXT,=CL16'$TJ0000,C=?'\n         MVC   OSCMDTXT+10(1),0(R1)\n         OC    OSCMDTXT+3(4),34(R5)\n         MODESET MODE=SUP,KEY=ZERO\n         LA    R1,OSCMDLEN       POINT TO SYSTEM COMMAND\n         SLR   R0,R0             PRETEND TO BE MASTER CONSOLE\n         SVC   34                ISSUE OS COMMAND\n         MODESET MODE=PROB,KEY=NZERO\nNEXTSELN AH    R5,QDLNELEN       POINT TO NEXT DISPLAY LINE\n         B     SELCHRLP          GO CHECK IT FOR A SELECTION CODE\nDOACTION OI    0(R1),X'40'       FOLD TEXT TO UPPER CASE\n         CLI   QDISPTYP,QDJQ     JQE/JOE DISPLAY?\n         BE    DOACTNJQ          YES\n         CLI   QDISPTYP,QDDD     FILE DISPLAY?\n         BE    DOACTNDD          YES\n         CLI   QDISPTYP,QDDC     ACTIVE ADDRESS SPACE DISPLAY?\n         BE    DOACTNDC          YES\n         CLI   QDISPTYP,QDXI     INITIATOR/TERMINATOR DISPLAY?\n         BE    DOACTNXI          YES\nBADCOMND LA    R0,QDSCRTXT       POINT TO START OF SCREEN TEXT\n         SR    R1,R0             GET OFFSET OF PROBLEM INPUT\n         A     R1,QDSHADO@       POINT TO ITS SHADOW\n         MVI   0(R1),X'22'       HIGHLIGHT IN REVERSE VIDEO RED\n         B     WRTSCR            GO SHOW THE UPDATED SCREEN IMAGE\nDOACTNDC LA    R14,23(,R5)       POINT TO \"DC\" JOB NUMBER\n         LA    R7,13(,R5)        POINT TO \"DC\" JOB NAME\n         CLI   0(R1),C'C'        CANCEL JOB?\n         BNE   DOACTCMD          NO, BRANCH TO COMMON CODE\n         MVC   OSCMDTXT,QBLANK   YES, CLEAR RESIDUAL DATA\n         MVC   OSCMDTXT(4),=C'C U='\n         MVC   OSCMDTXT+4(8),13(R5)\n         CLI   23(R5),C'2'       REALLY A TSO USER?\n         BE    AUTHCHEK          YES, GO VERIFY AUTHORITY\n         MVC   OSCMDTXT+2(10),OSCMDTXT+4\n         B     AUTHCHEK          GO VERIFY AUTHORITY\nDOACTNJQ LA    R14,33(,R5)       NO, POINT TO \"ST\" JOB NUMBER\n         LA    R7,22(,R5)        POINT TO \"ST\" JOB NAME\nDOACTCMD CLI   0(R1),C'A'        RELEASE JOB?\n         BE    JQJOBCMD          YES\n         CLI   0(R1),C'H'        HOLD JOB?\n         BE    JQJOBCMD          YES\n         CLI   0(R1),C'C'        CANCEL JOB?\n         BE    JQJOBCMD          YES\n         CLI   0(R1),C'P'        PURGE JOB?\n         BE    PURGECHK          YES\n         LA    R15,=C'DD'\n         CLI   0(R1),C'D'        DISPLAY DATA SETS?\n         BE    JQSUBCMD          YES\n         LA    R15,=C'SL'\n         CLI   0(R1),C'S'        DISPLAY DATA SET CONTENTS?\n         BE    JQSUBCMD          YES\n         LA    R15,=C'JL'\n         CLI   0(R1),C'L'        SHOW JOB LOG?\n         BE    JQSUBCMD          YES\n         LA    R15,=C'JC'\n         CLI   0(R1),C'J'        SHOW JCL?\n         BE    JQSUBCMD          YES\n         LA    R15,=C'JM'\n         CLI   0(R1),C'M'        SHOW JOB MESSAGES?\n         BNE   BADCOMND          NO, INVALID\nJQSUBCMD MVC   QDTLINE(2),0(R15) LOAD SUBCOMMAND NAME\n         MVC   QDTLINE+3(5),0(R14)    JOB NUMBER\n         CLI   0(R15),C'S'       SLOG COMMAND?\n         BNE   GOTOLVL1          NO, CONTINUE\n         CLI   0(R14),C'1'       STARTED TASK JOB NUMBER?\n         BNE   GOTOJLOG          NO, CANNOT BE SYSLOG\n         CLC   =CL8'SYSLOG',0(R7)\n         BE    GOTOLVL1          IS SYSLOG SO SLOG IS GOOD\nGOTOJLOG MVC   QDTLINE(2),=C'JL' LOAD SUBCOMMAND NAME\nGOTOLVL1 MVC   PF3CMD1,QSUBNAME  SAVE CURRENT SUBCOMMAND NAME\n         MVC   QPARM1SV,QPARM1   SAVE CURRENT SUBCOMMAND OPERAND\n         MVI   PF3LEVEL+1,1      INCREMENT \"PF3 LEVEL\"\n         OI    QFLAG1,QFLG1SEL   INHIBIT RESET OF \"PF3 LEVEL\"\n         B     PRIMCMND          GO PARSE \"PRIMARY INPUT\"\nPURGECHK CLI   4(R5),C'H'        HELD OUTPUT?\n         BE    DODELETE          YES\n         CLI   4(R5),C'X'        JOB ON EXECUTE QUEUE?\n         BNE   JQJOBCMD          NO\n         MVC   OSCMDTXT,=CL16'$CJ0000,P'\n         B     JQGOTCMD\nDODELETE MVC   OSCMDTXT,=CL16'$OJ0000,C'\n         B     JQGOTCMD\nJQJOBCMD MVC   OSCMDTXT,=CL16'$?J0000  '\n         MVC   OSCMDTXT+1(1),0(R1)\nJQGOTCMD TM    0(R14),X'03'      IS CATEGORY BATCH JOB?\n         BZ    JQGOTJOB          YES, PRIMED 'J' IS CORRECT\n         SLR   R15,R15\n         IC    R15,0(,R14)       LOAD FIRST POSSIBLE JOB NUMBER DIGIT\n         LA    R0,C'1'-C'S'      1->S (STC)    2->T (TSU)\n         SR    R15,R0\n         STC   R15,OSCMDTXT+2    SET STARTED TASK OR TSO CATEGORY\nJQGOTJOB OC    OSCMDTXT+3(4),1(R14)  SET JOB NUMBER\nAUTHCHEK TM    QFLAG1,QFLG1APF   APF AUTHORIZED?\n         BNO   BADCOMND          YES\n         TM    QFLAG1,QFLG1OPR   GOT OPERATOR AUTHORITY?\n         BO    ISSUECMD          YES, ALLOWED TO FIDDLE WITH ANY JOB\n         LA    R15,QLOGON        POINT TO USER ID\n         LA    R14,13(,R5)       POINT TO \"DC\" JOB NAME\n         CLI   QDISPTYP,QDDC     GOT THE RIGHT DISPLAY?\n         BE    JOBCHKLP          YES\n         LA    R14,22(,R5)       NO, POINT TO \"ST\" JOB NAME\nJOBCHKLP CLI   0(R15),C' '       END OF LOGON ID?\n         BNH   ISSUECMD          YES, GOT A MATCH\n         CLC   0(1,R14),0(R15)   JOBNAME STARTS WITH USERID?\n         BNE   BADCOMND          NO, INVALID\n         LA    R14,1(,R14)\n         LA    R15,1(,R15)\n         B     JOBCHKLP\nDOACTNDD CLI   0(R1),C'S'        SELECT DATA SET?\n         BNE   BADCOMND          NO, INVALID\n         MVC   QDTLINE(4),=CL4'L * '\n         MVC   QDTLINE+4(4),28(R5)\n         CLI   PF3LEVEL+1,0      WAS 'DD' A \"LEVEL 0\" COMMAND?\n         BE    GOTOLVL1          YES, GO SET \"LEVEL 1\"\n         MVI   PF3LEVEL+1,2      NO, IT WAS \"LEVEL 1\" SO SET \"LEVEL 2\"\n         OI    QFLAG1,QFLG1SEL   INHIBIT RESET OF \"PF3 LEVEL\"\n         B     PRIMCMND          GO PARSE \"PRIMARY INPUT\"\nDOACTNXI CLI   0(R1),C'S'        START AN INITIATOR/TERMINATOR?\n         BE    INITACTN          YES\n         CLI   0(R1),C'P'        DRAIN AN INITIATOR/TERMINATOR?\n         BE    INITACTN          YES\n         CLI   0(R1),C'Z'        HALT AN INITIATOR/TERMINATOR?\n         BNE   BADCOMND          NO, INVALID\nINITACTN MVC   OSCMDTXT,=CL16'$?I??'\n         MVC   OSCMDTXT+1(1),0(R1)\n         MVC   OSCMDTXT+3(2),5(R5)\n         CLI   OSCMDTXT+3,C' '   LEADING BLANK IN INITIATOR NAME?\n         BNE   ISSUECMD          NO\n         MVC   OSCMDTXT+3(2),OSCMDTXT+4\nISSUECMD MODESET MODE=SUP,KEY=ZERO\n         LA    R1,OSCMDLEN       POINT TO SYSTEM COMMAND\n         SLR   R0,R0             PRETEND TO BE MASTER CONSOLE\n         SVC   34                ISSUE OS COMMAND\n         MODESET MODE=PROB,KEY=NZERO\n         B     CHKJBCLS          DONE LINE UNLESS NEW JOB CLASS\n*   FROM HERE ON R1 HAS THE TEXT LENGTH OF EITHER 0 OR 63\nPRIMCMND LA    R1,63             ASSUME COMMAND TEXT IS PRESENT\nNULLTEXT LA    R4,QDSCRTXT       POINT TO SCREEN IMAGE BUFFER\n         A     R4,QDSCRPLN       POINT PAST SCREEN IMAGE BUFFER\n         SH    R4,QDLNELEN       POINT TO LAST SCREEN LINE\n         MVC   PFTXT,QDTLINE     COPY TOP LINE INPUT\n         OC    PFTXT,QBLANK      FOLD ANY TOP LINE INPUT TO UPPER CASE\n         CLC   PFTXT,QBLANK      ANY TOP LINE INPUT?\n         BNE   DOPFCODE          YES, HAVE PRIMARY COMMAND\n         MVC   PFTXT,8(R4)       NO, COPY BOTTOM LINE INPUT\n         OC    PFTXT,QBLANK      FOLD BOTTOM LINE INPUT TO UPPER CASE\nDOPFCODE XC    8(63,R4),8(R4)    RESET BOTTOM LINE INPUT\n         L     R4,QDCBPRM4       POINT TO SCREEN CONTENTS SAVE AREA\n         MVC   QDTLINE,16(R4)    RESTORE COMMAND ECHO FIELD\n*   END OF REVISED INPUT DATA STREAM PROCESSING       GP@P6 JUNE 2002 *\n         CLI   PFCODE,X'F0'      TEST-REQ/SYS-REQ?                RNB13\n         BE    ENTKEY            /YES - TREAT AS ENTER            RNB13\n         CLI   PFCODE,X'01'      OTHER KIND OF SYS-REQ?           RNB13\n         BE    ENTKEY            /YES - TREAT AS ENTER            RNB13\n         IC    R4,PFCODE                                           ICBC\n         LA    R0,X'0F'                                      GP@P6 ICBC\n         NR    R4,R0             EXTRACT PF-KEY NUMBER       GP@P6 ICBC\n         CH    R4,=H'12'                                           ICBC\n         BH    ENTKEY           \"ENTER\" KEY                        ICBC\n         ICM   R0,3,QPDSID       LOOKING AT A DATA SET?           GP@P6\n         BNZ   PF8OKAY           YES, LEAVE PF8/20 AS IS          GP@P6\n         CH    R4,=H'8'          PF8/20?                          GP@P6\n         BE    ENTKEY            YES, ALLOW \"SCROLL DOWN\" REQUEST GP@P6\nPF8OKAY  CH    R4,=H'3'          PF3/15?                          GP@P6\n         BNE   PF3OKAY           NO, GO INSERT PFK MEANING        GP@P6\n         TM    QFLAG1,QFLG1HLP   IN HELP PROCESSING?              GP@P6\n         BNO   PF3HLPOK          NO, GO CHECK \"PF3 LEVEL\"         GP@P6\n         LA    R1,63             INPUT TEXT WILL BE PRESENT       GP@P6\n         MVC   QDREPLY,QBLANK    CLEAR RESIDUAL DATA              GP@P6\n         MVC   QDREPLY(3),=C'+ 0'                                 GP@P6\n         B     NOTXT             GO PROCESS \"OUTER\" COMMAND       GP@P6\nPF3HLPOK CLI   PF3LEVEL+1,0      DOES PF3 MEAN END?               GP@P6\n         BE    PF3OKAY           YES, GO INSERT PFK MEANING       GP@P6\n         LA    R1,63             INPUT TEXT WILL BE PRESENT       GP@P6\n         MVC   QDREPLY,QBLANK    CLEAR RESIDUAL DATA              GP@P6\n         MVC   QDREPLY(2),=C'DD' PREPARE FOR \"SECOND LEVEL\"       GP@P6\n         LH    R0,PF3LEVEL       GET CURRENT \"PF3 LEVEL\"          GP@P6\n         BCT   R0,NEWLEVEL       DECREMENT LEVEL                  GP@P6\n         MVC   QDREPLY(2),PF3CMD1 REALLY WAS \"FIRST LEVEL\"        GP@P6\n         MVC   QDREPLY+3(8),QPARM1SV                              GP@P6\nNEWLEVEL OI    QFLAG1,QFLG1SEL   INHIBIT RESET OF \"PF3 LEVEL\"     GP@P6\n         STH   R0,PF3LEVEL       SAVE NEW \"PF3 LEVEL\"             GP@P6\n         B     NOTXT             GO PROCESS \"OUTER\" COMMAND       GP@P6\nPF3OKAY  BCTR  R4,0                                                ICBC\n         MH    R4,=H'5'                                            ICBC\n         LA    R5,PFKTAB                                           ICBC\n         LA    R5,0(R4,R5)                                         ICBC\n         MVC   QDREPLY(5),0(R5)  MOVE PF-KEY VALUE                 ICBC\n         LA    R5,5                                                ICBC\n         LA    R6,3(,R6)                                           ICBC\n         LTR   R1,R1             ANY TEXT ACTUALLY TYPED IN?      GP@P6\n         LA    R1,63             INPUT TEXT IS NOW PRESENT        GP@P6\n         BNP   NOTXT             NO, LEAVE WHOLE PFK COMMAND      RNB14\n         MVC   0(60,R6),PFTXT    YES, OVERLAY 2 PFK-SUPPLIED CHRS RNB14\n         B     NOTXT                                              RNB14\nENTKEY   EQU   *                                                   ICBC\n         MVC   0(63,R6),PFTXT                                     RNB14\nNOTXT    STH   R1,QDRLNG      STORE LENGTH OF REPLY                ICBC\n.PFK2    ANOP                                                      ICBC\n         OC    QDREPLY,QBLANK     UPPERCASE THE COMMAND            FCI*\n         CLC   QDREPLY(2),=CL2'PR' POSSIBLE PRINT COMMAND?     PWF FCI*\n         BNE   CLSCRN             NOPE..SPLIT NORMALLY             FCI*\n         CLI   QDREPLY+2,C' '      POSSIBLE PRINT COMMAND?   2003-03-04\n         BE    DOPRINT            YES                        2003-03-04\n         CLI   QDREPLY+2,C'I'      POSSIBLE PRINT COMMAND?   2003-03-04\n         BNE   CLSCRN             NOPE..SPLIT NORMALLY       2003-03-04\nDOPRINT  EQU   *                                             2003-03-04\n         L     R15,=V(PRINT)  FETCH PRINT ENTRY ADDRESS            FCI*\n         BALR  R14,R15        AND CALL HIM                         FCI*\n         LTR   R15,R15        HOW IS HIS RETURN CODE               FCI*\n         BNZ   CLSCRN         NOTHING TO REPORT                    FCI*\n*                                                                  FCI*\n         B     WRTSCR         GO REBUILD AND REPOST SCREEN   GP@P6 FCI*\nCLSCRN   L     R4,QDLINE1@    LOAD ADDRESS OF FIRST LINE     GP@P6 FCI*\n         L     R5,QDSCRLEN    LOAD LENGTH OF SCREEN AREA    GP@P6 UF003\n         SR    R6,R6          NO SENDING FIELD NEEDED              FCI*\n         STH   R6,QDNEXT      STORE ZERO IN LINE NUMBER            FCI*\n         SR    R7,R7          FILL SCREEN WITH NULLS               FCI*\n         MVCL  R4,R6          CLEAR THE SCREEN                     FCI*\n*\n         L     R4,QDSHADO@    POINT TO THE SHADOW BUFFER          GP@P6\n         AH    R4,QDLNELEN    POINT TO HEADING LINE SHADOW        GP@P6\n         AH    R4,QDLNELEN    POINT TO THE DETAIL SHADOW          GP@P6\n         L     R5,QDSCRLEN    LOAD LENGTH OF SCREEN AREA          GP@P6\n         LA    R7,X'05'       RESET TO UNHIGHLIGHTED TURQUOISE    GP@P6\n         SLL   R7,24          PROMOTE CODE TO PAD BYTE            GP@P6\n         MVCL  R4,R6          CLEAR THE SHADOW                    GP@P6\n*\n         LH    R1,QDRLNG      STORE LENGTH OF REPLY\n         LTR   R1,R1          WAS THERE A RESPONSE FROM USER?\n         BNZ   INTER          YES. INTERRUPT PROCESSING.\n         MVI   QDOVER,1       INDICATE PAGE OVERFLOW\n         B     DSP2           CONTINUE PROCESSING\nINTER    L     R13,QFRSTSA    GO BACK TO MAIN MODULE\n         LM    R14,R12,12(R13) RESTORE REGISTERS FROM FIRST SAVEAREA\n         BR    R10            ADDRESS OF INTERRUPT HANDLER IN QUEUE\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\n         AIF  (NOT &QPFK).PFK3                                     ICBC\n* PF-KEY DEFINITIONS                                               ICBC\nPFKTAB   DS    0CL60                                               ICBC\nPF1      DC    CL5'H'                                              ICBC\nPF2      DC    CL5'DA'                                       FCI*  ICBC\nPF3      DC    CL5'E'                                              ICBC\nPF4      DC    CL5'PRINT'                                    FCI*  ICBC\nPF5      DC    CL5'F'                                              ICBC\nPF6      DC    CL5'DI'                                             ICBC\n*        AIF   (&QRNB).RNB15A                                     RNB15\n*F7      DC    CL5'PB'                                            UF003\n*F8      DC    CL5'PF'                                            UF003\n*        AGO   .RNB15B                                            RNB15\n*RNB15A  ANOP                                                     RNB15\nPF7      DC    CL5'-  P '          USE SPF-LIKE SCROLLING  GP/MAH RNB15\nPF8      DC    CL5'+  P '          USE SPF-LIKE SCROLLING  GP/MAH RNB15\n*RNB15B  ANOP                                                     RNB15\nPF9      DC    CL5'DO'                                             ICBC\nPF10     DC    CL5'CO 1'                                           ICBC\nPF11     DC    CL5'CO 41'                                          ICBC\nPF12     DC    CL5'ST'                                             ICBC\nOSCMDLEN DC    0F'0',H'20',H'0'                                   GP@P6\nOSCMDTXT DC    CL16' '                                            GP@P6\nSBATABLE DC    17X'00',X'11',238X'00'                             GP@P6\n.PFK3    ANOP                                                      ICBC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILE53": {"ttr": 2055, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "************************************************************************\n*\n*         F I L E   5 3   U P D A T E D   Q U E U E\n*\n************************************************************************\n\nTHIS FILE IS IN IEBCOPY UNLOAD FORMAT (80 X 32720).\n     THIS VERSION OF THE COMMAND HAS A NUMBER OF ENHANCEMENTS AND\nCLEANUP FIXES INSTALLED. THE SUPPORT FOR JES2 PRIOR TO 79/09 WAS REMOVED\nAND THE CODE STANDARDIZED ON THE DUPLEX CHECKPOINT LEVEL. A SCREEN PRINT\nFACILITY WAS ADDED. THE COMMAND RUNS AUTHORIZED AND NOW HAS SUPPORT FOR\nCANCEL, REQUEUE, AND PURGE. THE PDDB SYSOUT COUNTS ARE LISTED ON THE DD\nSUBCOMMAND. SUPPORT WAS ADDED TO FIND AND LIST TSO DYNAMICALLY SPUN\nSYSOUT.\n     THE COMMAND ONLY NEEDS TO RUN AUTHORIZED FOR THE FOLLOWING COMMANDS\nCANCEL, REQUEUE, AND PURGE. IF YOU DO NOT MARK THE CODE AC=1, THE\nPREVIOUS THREE COMMANDS WILL NOT FUNCTION.\n\n --- QUEUE COMMAND -----------------------------------------------------\n\n  QUEUE SUBCOMMAND OPERAND        DEFAULT Q STATUS *\n  Q                               CAN USE Q CKPT(DEVTYPE,VOLSER) TO GET\n                                  NONSTANDARD CHECKPOINT.\n\n --- SYSTEM DISPLAYS ---------------------------------------------------\n\nDA                  JOBS IN EXECUTION\nDT                  DISPLAY TSO USERS\nDS                  DISPLAY STARTED TASKS\nDC (B/S/T)          DISPLAY CPU BATCH/STC/TSO\nSTATUS (LEVEL)      JOB STATUS. DEFAULT FOR STATUS IS * (TSO ID).\n\n --- INPUT QUEUE DISPLAYS ----------------------------------------------\n\nDQ                  DISPLAY INPUT QUEUES\nDI (CLASS)          DISPLAY ALL INPUT JOBS\nAI (CLASS)          DISPLAY AVAILABLE JOBS\nHI (CLASS)          DISPLAY HELD JOBS\n\n --- OUTPUT QUEUE DISPLAYS----------------------------------------------\n\nDF                  DISPLAY OUTPUT QUEUES\nDO (CLASS)          DISPLAY ALL OUTPUT JOBS\nAO (CLASS)          DISPLAY AVAILABLE OUTPUT\nHO (CLASS)          DISPLAY HELD OUTPUT\n\n --- JOB MODIFICATION SUBCOMMANDS --------------------------------------\n\nCAN JOBNAME (PURGE) CANCEL FROM INPUT OR EXECUTION. DELETE OUTPUT IF\n                     PURGE IS SPECIFIED.\nREQ JOBNAME CLASS   CHANGE SYSOUT CLASS\nDEL JOBNAME         DELETE HELD OUTPUT\n\n --- MISC SUBCOMMANDS --------------------------------------------------\n\nSLOG STC# SEQ       LIST SYSTEM LOG.  ST SYSLOG WILL GET STC#. IF SEQ\n                     IS NOT SPECIFED ZERO IS ASSUMED (CURRENT).\nFTIME HH.MM.SS      POSITION SYSLOG TO TIME\nH/HELP              HELP\nE/END               EXIT\n\n --- JOB RELATED SUBCOMMANDS -------------------------------------------\n\nDJ JOBNAME          DISPLAY JOB\nJCL JOBNAME         LIST JOB JCL\nJLOG JOBNAME        LIST JOB LOG\nJMSG JOBNAME        LIST JOB MESSAGES\nDD JOBNAME          JES2 DD SUMMARY\nLIST JOBNAME DSID   LIST JES2 DATASET. OBTAIN DSID VALUES BY USING THE\n                     DD SUBCOMMAND.\n\n --- LIST RELATED SUBCOMMANDS ---------\n\nFIND 'STRING' COL(SS,EE)  FIND NEXT OCCURANCE OF 'STRING' IN THE DATA.\nFALL 'STRING' COL(SS,EE)  FIND ALL OCCURANCES OF 'STRING' IN THE DATA.\n                          STRING MUST BE IN QUOTES. COL DEFAULT IS ALL.\n\nCOL  #              POSITION TO COLUMN #\n@    #              POSITION TO RECORD #\nD/+  #              MOVE FORWARD # LINES\nUP/- #              MOVE BACKWARD # LINES\nTOP                 TOP OF CURRENT DATASET\nBOTTOM              BOTTOM OF CURRENT DATASET\nHF/HB #             FORWARD/BACKWARD # HALF PAGES\nPF/PB #             FORWARD/BACKWARD # PAGES\n\n                    DEFAULT VALUE FOR # IS 1.\n                    SYNONYMS L-LIST F-FIND C-COLUMN T-TOP B-BOTTOM\n\n --------- LOGGING SUBCOMMANDS---------------\n\nSAVE DSNAME TYPE    COPY DATASET\nPRINT ON CLASS DEST OPEN SCREEN LOG\n                    DEFAULT PRINT CLASS IS SYSOUT=A.\nPRINT               PRINT SCREEN\nPRINT OFF           CLOSE SCREEN LOG\n\n -------------------------------\n | PF1     | PF2     | PF3     |\n |   HELP  |   DA    |   END   |   PROGRAM FUNCTION KEY DEFINITIONS\n -------------------------------\n | PF4     | PF5     | PF6     |   TO SPECIFY OPERANDS FOR PF 5 OR\n |   PRINT |   FIND  |   DI    |   OPTIONALLY FOR PF 6,9,12 OR\n -------------------------------   TO OVERRIDE DEFAULTS FOR PF 4,7,8,10,\n | PF7     | PF8     | PF9     |   KEY IN THE VALUE AND PRESS THE KEY\n |   - 21  |   + 21  |   DO    |\n -------------------------------\n | PF10    | PF11    | PF12    |\n |  COL 1  |  COL 41 |   ST    |\n -------------------------------\n\n -------------------------- RESTRICTED SUBCOMMANDS ---------------------\n\nXB MTTR             DISPLAY DISK RECORD\nXD JOBNAME DSID     LIST ANY DATASET\nXI                  DISPLAY ACTIVE INITIATORS\nXJ JOBNAME          DISPLAY JQE AND JOES\nXP PASSWORD         REQUEST FOR PASSWORD PROMPT. PROMPT IS A BLANK SCREE\n                     THE PASSWARD AND IF SUCCESSFUL A MESSAGE WILL BE IS\n\nINSTALLATION PROCEDURE FOR QUEUE:\n\n     1. THERE ARE 36 MEMBERS IN THE DATASET.\n        Q0 IS THE COMMON AREA.\n        Q1 - Q27 ARE REENTRANT CODE.\n        QCOMMON, QSTART, QSTOP, QTILT, AND $JQT ARE MACROS.\n        HELP IS A TSO HELP MEMBER.\n        ASSEMBLE IS THE JCL TO ASSEMBLE AND LINK QUEUE.\n        TABLE IS A SAMPLE SMP JOB TO AUTHORIZE THE QUEUE COMMAND.\n\n     2. EDIT MEMBER QCOMMON CHANGING THE FOLLOWING PARAMETERS:\n\n        UNIT=XXXX THE DEVICE TYPE FOR SYS1.HASPCKPT.\n        VOLSER=YYYYYY THE VOLUME SERIAL FOR SYS1.HASPCKPT.\n        SID1-SID7=ZZZZ THE SMF IDS FOR EACH CPU IN THE COMPLEX. THE\n        IDS MUST BE IN THE SAME ORDER AS IN THE INITIALIZATION DECK.\n\n        AT PRESENT THERE IS SUPPORT IN THE INITIALIZATION MODULE TO\n        DYNAMICALLY ALLOCATE THE CHECKPOINT ON EITHER 3330, 3330-1,\n        OR 3350. IF YOU ARE FORTUNATE ENOUGH TO HAVE A DRUM YOU\n        WILL HAVE TO MODIFY Q10 TO ADD SUPPORT.\n\n        EDIT THE MACRO QSTART TO INDICATE THE OPTIONS DESIRED.\n\n        QPFK SETB 0      NO PFK SUPPORT.\n        QPFK SETB 1      PFK SUPPORT (DEFAULT).\n\n        THE PFK SUPPORT IS FROM VILKO MACEK - INSURANCE CORPORATION\n        OF BRITISH COLUMBIA. PFK SUPPORT CAN BE IDENTIFIED BY SOURCE\n        MARKED WITH ICBC IN MODULES Q5, Q8, AND THE MACRO QCOMMON. TO\n        CHANGE THE DEFINITIONS OF THE PFKS SEE THE END OF MODULE Q5.\n\n        QACF2 SETB 0     NO ACF2 SUPPORT (DEFAULT).\n        QACF2 SETB 1     ACF2 SUPPORT.\n\n        THE ACF2 SUPPORT IS FROM KEN TRUE - FAIRCHILD CAMERA. KEN ALSO\n        SUPPLIED THE ORIGINAL PRINT SUPPORT.\n\n     3. EDIT MEMBER ASSEMBLE TO CHANGE THE JCL TO FIT YOUR STANDARDS.\n        DO NOT ALTER THE ORDER OF THE ASSEMBLY SYSLIBS AS THERE IS A\n        CONFLICT ON THE MACRO QSTART. THE ASSEMBLIES AND LINKS CREATE\n        2 LOAD MODULES.\n\n        QUEUE (ALIAS Q) - IS THE REENTRANT CODE OF THE COMMAND. IT MAY\n        BE PLACED IN SYS1.LPALIB OR ANY OTHER AUTHORIZED LIBRARY WITH\n        AN AUTHORIZATION CODE OF 1.\n\n        QUEUECMN - THE MODIFIABLE COMMON AREA. CAN BE PLACED IN SYS1.\n        LINKLIB OR SYS1.CMDLIB. IF YOU WANT TO CHANGE THE NAME OF\n        QUEUECMN LOOK IN MEMBER Q10 WHERE THE LINK IS ISSUED.\n\n     4. ADD QUEUE ALIAS Q TO THE IKJEFTE2 MODULE WHICH IS THE TSO LIST\n        OF AUTHORIZED COMMANDS. A SAMPLE SMP JOB IS PROVIDED IN THE\n        MEMBER TABLE. QUEUE CAN BE RUN UNDER SPF BUT THE SUBCOMMANDS\n        USING THE SUBSYSTEM INTERFACE (CANCEL, REQUEUE, AND DELETE)\n        WILL BE INOPERABLE, ALL OTHER COMMANDS WILL FUNCTION NORMALLY.\n        IF YOU DON'T MIND THE INTEGRITY PROBLEM YOU CAN ADD CODE TO\n        QUEUE TO USE A SPECIAL SVC TO GET INTO SUPERVISOR STATE AND\n        HAVE FULL FACILITY UNDER SPF.\n\nNOTE:  THE QUEUE COMMAND WAS WRITTEN FOR JES2 4.1 AT PUT TAPE 79/09\nLEVEL WITH THE DUPLEX CHECKPOINT FACILITY (AZ27300). THERE IS NO REASON\nTHAT THE CONCEPT OF ACCESSING THE CHECKPOINT AND SPOOL WOULD NOT WORK\nWITH EARLIER VERSIONS OF JES2 OR WITH NJE. THE LOCATION OF CHECKPOINT\nVARIABLES AND CHECKPOINT AND SPOOL STRUCTURE MAY BE DIFFERENT AND THE\nUSER WILL HAVE TO MAKE APPROPRIATE CHANGES TO SUPPORT OTHER VERSIONS\nOF JES2.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FINDJOB": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x02\\x19\\x9f\\x01\\x020o\\x10F\\x00\\xe0\\x00\\xce\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2002-07-18T00:00:00", "modifydate": "2002-11-02T10:46:00", "lines": 224, "newlines": 206, "modlines": 0, "user": "GREG"}, "text": "FINDJOB  QSTART 'QUEUE COMMAND - LOCATE JQE, JCT, AND IOT BY JOBNAME'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*     (1) RNB22 - IN CASE JOBNAME = * (FOR CURRENT JOB), AFTER READING*\n*                 THE JCT ENSURE JQEJNAME = JCTJNAME AND QPJOBID =    *\n*                 JCTJBKEY. THIS IS DONE IN CASE THE JOB PURGED SINCE *\n*                 THE LAST FINDJOB.                                   *\n***********************************************************************\n         GBLB   &QACF2         ACF2 CHECKING FOR AUTH              FCI*\n         GBLB   &QSP           MVS/SP OPTION                      UF020\n         AIF    (NOT &QACF2).NACF1                                 FCI*\n*******************************************************************FCI*\n* MOD 1 - K TRUE  - 22 OCT 79 -                                    FCI*\n*   ADD ACF2 AUTH CHKING FOR USER AUTH TO LOOK AT STUFF.           FCI*\n*    OPER CHKS ALL..                                               FCI*\n*    USER CHKS OWN GOODIES (LOGONID = LOGONID IN JCT)              FCI*\n*    OTHER: ISSUE ACFVLD CHK FOR AUTH                              FCI*\n*******************************************************************FCI*\n.NACF1   ANOP                                                      FCI*\n         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING WORK,R13       LOCAL WORK AREA\n         LH    R1,QLNG1       LENGTH OF PARAMETER FIELD\n         SH    R1,=H'1'       IS THE LENGTH ZERO?\n         BM    JOBAGAIN       YES. TRY JOBAGAIN                   WGH\n         BM    TILT           YES. TILT.\n******************************************************************UF007\n*                                                                 UF007\n*   ALLOW JOBNAME = \"*\" TO SIGNIFY CURRENT JOB & SKIP CKPT READ   UF007\n*                                                                 UF007\n******************************************************************UF007\n         CLI   QPARM1,C'*'    WANT CURRENT JOB AGAIN?             UF007\n         BE    JOBAGAIN       YES, SKIP CKPT READ                 UF007\n         CLI   QPARM1,C'='    WANT CURRENT JOB AGAIN?             WGH\n         BE    JOBAGAIN       YES, SKIP CKPT READ                 WGH\n         MVC   QCJNAME,QPARM1 SAVE THE JOBNAME                    GP@P6\n******************************************************************UF006\n*                                                                 UF006\n*   CALL - READ JES2 CHECKPOINT ROUTINE                           UF006\n*                                                                 UF006\n******************************************************************UF006\nCALLCKPT L     R15,=V(CKPT)   ADDR OF CKPT ROUTINE                UF006\n         BALR  R14,R15        GO TO IT                            UF006\n***********************************************************************\n*                                                                     *\n*   DETERMINE IF SEARCH IS BY JOBNUMBER OR JOBNAME                    *\n*                                                                     *\n***********************************************************************\n         LH    R1,QLNG1       LENGTH OF PARAMETER FIELD\n         SH    R1,=H'1'       IS THE LENGTH ZERO?\n         BM    TILT           YES. TILT.\n         CLI   QPARM1,C'0'    IS THE FIRST CHARACTER NUMERIC?\n         BL    JOBNAME        NO. SEARCH BY JOBNAME\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R1,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. TILT.\n         EX    R1,PACK        PACK THE FIELD\n         CVB   R5,CONVERT     CONVERT TO BINARY\n***********************************************************************\n*                                                                     *\n*   LOCATE JQE BY JOBNAME                                             *\n*                                                                     *\n***********************************************************************\nJOBNAME  L     R2,QCJQHEAD    LOAD ADDR OF JQT\n         USING JQTDSECT,R2    BASE REG FOR JQT\n         LA    R2,JQTOUT      FIRST JQE QUEUE\n         LA    R1,JQTQMAX     MAXIMUM NUMBER OF QUEUES\n         DROP  R2\n         AIF   (&QSP).QSP1                                        UF020\nNEXTJQT  LH    R3,0(R2)       OFFSET TO FIRST JQE IN QUEUE\nNEXTJQE  SLA   R3,2           MULTIPLY BY 4\n         AGO   .QSP2                                              UF020\n.QSP1    ANOP                                                     UF020\nNEXTJQT  L     R3,0(R2)       OFFSET TO FIRST JQE IN QUEUE        UF020\nNEXTJQE  N     R3,=A(X'00FFFFFF')  TEST FOR END OF CHAIN          UF020\n.QSP2    ANOP                                                     UF020\n         BZ    ENDJQE         END OF QUEUE\n         A     R3,QCJQTA      ADD BASE TO OFFSET\n         USING JQEDSECT,R3    BASE REG FOR JQE\n         CLI   QPARM1,C'0'    IS SEARCH BY JOBNUMBER?\n         BL    CLCNAME        NO. SEARCH BY JOBNAME.\n         CH    R5,JQEJOBNO    IS THIS THE RIGHT JOBNUMBER?\n         BNE   NOMATCH        NO. TRY NEXT JQE.\n         B     FOUND          YES. PROCESS IT.\nCLCNAME  CLC   QPARM1,JQEJNAME IS THIS THE RIGHT JOBNAME?\n         BE    FOUND          YES. PROCESS IT.\n         AIF   (&QSP).QSP3                                        UF020\nNOMATCH  LH    R3,JQECHAIN    NO. TRY NEXT ENTRY.\n         B     NEXTJQE        LOOP\nENDJQE   LA    R2,2(R2)       TRY NEXT QUEUE\n         AGO   .QSP4                                              UF020\n.QSP3    ANOP                                                     UF020\nNOMATCH  L     R3,JQENEXT     NO. TRY NEXT ENTRY.                 UF020\n         B     NEXTJQE        LOOP                                UF020\nENDJQE   LA    R2,4(R2)       TRY NEXT QUEUE                      UF020\n.QSP4    ANOP                                                     UF020\n         BCT   R1,NEXTJQT     LOOP IF NOT LAST QUEUE\nTILT     QTILT '*** JOBNAME NOT FOUND OR INVALID ***'\n         SPACE 1                                                  UF007\nJOBAGAIN EQU   *                                                  WGH\n         MVI   QPARM1,C'*'    SET SAME JOB REFERENCE              WGH\n         MVI   QLNG1+1,X'01'  SET LENGTH TO 1                     WGH\n         OI    QFLAG1,QFLG1SEL   INHIBIT RESET OF \"PF3 LEVEL\"     GP@P6\n         L     R3,QCJQEA      PRIME JQE ADDRESS                   UF007\n         LTR   R3,R3          ANYONE HOME?                        UF034\n         BNZ   FOUND          YES, CONTINUE                       UF034\n         QTILT '*** YOU MUST SPECIFY A JOBNAME OR NUMBER BEFORE USING \"+\n               *\" ***'                                            UF034\n         SPACE 1                                                  ONL03\n***********************************************************************\n*                                                                     *\n*   READ JCT AND IOT                                                  *\n*                                                                     *\n***********************************************************************\nFOUND    ST    R3,QCJQEA      SAVE THE ADDRESS\n         LR    R4,R3          SAVE THE ADDRESS FOR COMPARE        RNB22\n         MVC   QCTRAK,JQETRAK DISK ADDR OF JCT\n         DROP  R3\n         L     R3,QCJCTA      ADDR OF IOAREA FOR JCT\n         LR    R1,R3          PARM FOR READSPC\n         L     R15,=V(READSPC) ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\n         USING JCTSTART,R3    BASE REG FOR JCT\n         USING JQEDSECT,R4    BASE FOR JQE                        RNB22\n         CLI   QPARM1,C'*'         WAS REQUEST FOR CURRENT JOB?   RNB22\n         BNE   RNB22A              /NO  - DON'T NEED EXTRA CHECK  RNB22\n         CLC   JQEJNAME,JCTJNAME   IS JOBNAME RIGHT?              RNB22\n         BNE   TILT                /NO  - TILT                    RNB22\n         CLC   QPJOBID,JCTJBKEY    IS JOBID RIGHT?                RNB22\n         BNE   TILT                /NO  - TILT                    RNB22\nRNB22A   EQU   *                                                  RNB22\n         CLC   QPJOBID,JCTJBKEY    IS JOBID UNCHANGED?            GP@P6\n         BE    JOBIDSET            /YES - JOB ID SET CORRECTLY    GP@P6\n         MVC   QPJOBID,JCTJBKEY JOB IDENTIFICATION\n         TM    QFLAG1,QFLG1SEL     LINE SELECTION JUST DONE?      GP@P6\n         BO    JOBIDSET            /YES - LEAVE PF3 LEVEL ALONE   GP@P6\n         MVI   PF3LEVEL+1,0        /NO  - FORCE PF3 LEVEL RESET   GP@P6\nJOBIDSET EQU   *                                                  GP@P6\n         AIF    (NOT &QACF2).NACF2                                 FCI*\n*******************************************************************FCI*\n* MOD 1 - K TRUE  - 22 OCT 79 -                                    FCI*\n*                                                                  FCI*\n         CLC   QLOGON,LIDLID  SEE IF USERS LOGONID=JOBS ACF LOGONIDKMT*\n         BE    ACF2OK         YES..CONTINUE FORTHWITH              FCI*\n         TM    QXAUTH,X'80'   IS USER OPER PRIVLEDGE ?             FCI*\n         BO    ACF2OK         YES..CONTINUE FORTHWITH              FCI*\n*                                                                  FCI*\n         USING ACCVT,R8                                            FCI*\n         ACFGACVT R8,NONE=NOTOK   GET THE ACF2 CVT                 FCI*\n*                                                                  FCI*\n         MVC   DSNAME,=CL44'SYSOUT. '  INITIALIZE DSNAME TO USE    FCI*\n         XC    ACFSPARM(ACFSPRML),ACFSPARM   CLEAR REQUEST BLOCK   FCI*\n         MVI   ACFSPREQ,ACFSPRDS  DSNAME ACCESS ONLY               FCI*\n         MVI   ACFSPID1,ACFSPIUR  DIS AM DE USER TALKING....       FCI*\n         LA    R7,DSNAME          GET DSNAME ADDRESS               FCI*\n         ST    R7,ACFSPDSN        AND GIVE IT TO ACF PARM LIST     FCI*\n*                                                                  FCI*\n*  GENERATE DSNAME OF FORMAT 'SYSOUT.LOGONID.JOBNAME' FOR CHKING   FCI*\n*                                                                  FCI*\n         MVC   DSNAME+7(8),LIDLID  MOVE LID TO DSNAME              FCI*\n         CLI   DSNAME+7,C' '       IS THE LID BLANK?               FCI*\n         BNE   ADSNCHK0            NO..NORMAL PROCESS              FCI*\n*                                                                  FCI*\n*  GOT HERE BECAUSE LID IS ' ' (BLANK)..SUBSTITUTE 'SYSTEM'        FCI*\n         MVC   DSNAME+7(8),=CL8'SYSTEM'                            FCI*\n*                                                                  FCI*\nADSNCHK0 LA    R1,DSNAME+7         GET ADDRESS                     FCI*\n         LA    R7,8                LOAD COUNT                      FCI*\nADSNCHK  CLI   0(R1),C' '          LOOK FOR BLANK                  FCI*\n         BE    ADSNCHK1            GOTIT..                         FCI*\n         LA    R1,1(R1)            BUMP AND                        FCI*\n         BCT   R7,ADSNCHK            GRIND                         FCI*\nADSNCHK1 MVI   0(R1),C'.'          MOVE IN PERIOD..                FCI*\n         MVC   1(8,R1),JCTJNAME    MOVE IN JOBNAME                 FCI*\n*                                                                  FCI*\n         LA    R1,ACFSPARM        GET ADDRESS OF PARM FIELD        FCI*\n         ACFSVC (1),TYPE=S,NONE=NOTOK,CVT=HAVE   INVOKE A C F 2    FCI*\n*                                                                  FCI*\n         LTR   R15,R15            HOW DID YOU LIKE THEM APPLES?    FCI*\n         BC    8,ACF2OK           ..OK BY YOU...CONTINUE..         FCI*\n*                                                                  FCI*\nNOTOK    QTILT '*** SORRY..NO ACF2 AUTHORITY TO LOOK AT THIS JOB'  FCI*\n*******************************************************************FCI*\nACF2OK   DS    0H                                                  FCI*\n.NACF2   ANOP                                                      FCI*\n         MVC   QCTRAK,JCTIOT  DISK ADDR OF IOT\n         DROP  R3\n         L     R1,QCIOTA      ADDR OF IOAREA FOR IOT\n         L     R15,=V(READSPC) ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nMVZ      MVZ   QFZONES(1),QPARM1 CHECK FOR NUMERIC\nPACK     PACK  CONVERT,QPARM1(1) CONVERT TO BINARY\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nFINDJOB  CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $JQE\n         $JCT\n         $JQT\n         QCOMMON\nWORK     DSECT\n         DS    72C\nCONVERT  DS    D\n         AIF    (NOT &QACF2).NACF3                                 FCI*\n         ACDSV DSECT=NO                                            FCI*\nDSNAME   DS    CL44                                                FCI*\n         EJECT   ,                                                 FCI*\n         ACCVT   ,                                                 FCI*\n         ACUCB   ,                                                 FCI*\n         PRINT OFF                                                 FCI*\n         IHAPSA  ,                                                 FCI*\n         PRINT ON                                                  FCI*\n.NACF3   ANOP   ,                                                  FCI*\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDPDDB": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x17\\x7f\\x01\\x02\\x17\\x7f\\x17\\x08\\x00e\\x00e\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-06-26T00:00:00", "modifydate": "2002-06-26T17:08:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "GREG"}, "text": "FINDPDDB QSTART 'QUEUE COMMAND - FIND PDDB FOR A DSID'\n         USING QCKPT,R10          BASE REG FOR CHECKPONT WORK AREA\n         L     R10,QVCKPT         LOAD BASE REG\n         USING QDISPLAY,R9        BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL          LOAD BASE REG\n         USING WORK,R13           BASE REG FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   CONVERT DATASET ID TO BINARY                                      *\n*                                                                     *\n***********************************************************************\n         XC    CONVERT,CONVERT       CLEAR CONVERT WORK AREA\n         PACK  CONVERT+5(3),DSID+1(3) PACK ASID\n         CVB   R7,CONVERT         CONVERT DSID TO BINARY\n***********************************************************************\n*                                                                     *\n*   FIND  PDDB  FOR  THIS  DATASET  ID                                *\n*                                                                     *\n***********************************************************************\nNORMAL   MVI   SWITCH,0           INITIALIZE SWITCH\n         USING PDBDSECT,R2        BASE REG FOR PDDB\n         USING IOTSTART,R3        BASE REG FOR IOT\n         L     R3,QCIOTA          LOAD BASE REG\n         L     R1,QCJCTA          ADDR OF JCT                     UF008\n         USING JCTSTART,R1        SET TEMP ADDRESSING             UF008\n         CLC   QCTRAK,JCTIOT      AT FIRST IOT?                   UF008\n         BNE   *+8                NO, SKIP FLAG SET               UF008\n         OI    SWITCH,X'02'       SET FLAG                        UF008\n         DROP  R1                 DROP TEMP ADDRESSING            UF008\n         LR    R5,R3              IOAREA FOR READ IOT BLOCK\nNEXTIOT  LR    R4,R3              BASE OF IOT\n         A     R4,IOTPDDBP        OFFSET BEYOND LAST PDDB\n         LR    R2,R3              BASE OF IOT\n         A     R2,QCPDDB1         OFFSET TO FIRST PDDB IN IOT\nFINDDS   CH    R7,PDBDSKEY        IS THIS THE DATASET?\n         BE    FOUNDDS            YES. CONTINUE\n         LA    R2,PDBLENG(R2)     NO. LOOK AT NEXT PDDB\n         CR    R2,R4              HAVE WE GONE PAST THE LAST PDDB\n         BL    FINDDS             NO. TRY AGAIN\n         L     R4,IOTIOTTR        DISK ADDR OF NEXT IOT\nSPIN     LTR   R4,R4              IS THERE ANOTHER IOT?\n         BZ    SPINIOT            NO. TRY THE SPIN IOT.\n         BAL   R8,READ            READ THE IOT\n         B     NEXTIOT            SEARCH THE NEXT IOT\n         USING JCTSTART,R1        BASE REG FOR JCT\nSPINIOT  TM    SWITCH,1           DID WE SEARCH THE SPINIOT ALREADY\n         BO    CKIOT1             YES, SEE IF WE STARTED AT FRONT UF008\n         OI    SWITCH,1           SET SWITCH\n         L     R1,QCJCTA          LOAD BASE REG\n         L     R4,JCTSPIOT        DISK ADDR OF SPIN IOT\n         DROP  R1\n         B     SPIN               SEARCH THE SPIN IOT CHAIN\nFOUNDDS  L     R0,PDBRECCT        GET THE RECORD COUNT\n         CVD   R0,CONVERT         CONVERT TO DECIMAL\n         MVC   DSRECCT,ED8        MOVE EDIT PATTERN TO DISPLAY\n         ED    DSRECCT,CONVERT+4  EDIT THE RECORD COUNT\n         MVC   DSCLASS,PDBCLASS   MOVE PDBCLASS TO DISPLAY\nSTOP     QSTOP                    GO BACK TO CALLER\nCKIOT1   TM    SWITCH,X'02'       DID WE START AT FIRST IOT?      UF008\n         BO    STOP               YES, NOT FOUND                  UF008\n         USING JCTSTART,R1        SET TEMP ADDRESSING             UF008\n         L     R1,QCJCTA          POINT TO JCT                    UF008\n         L     R4,JCTIOT          FIRST IOT ADDRESS               UF008\n         DROP  R1                 DROP TEMP ADDRESSING            UF008\n         BAL   R8,READ            READ THE IOT                    UF008\n         OI    SWITCH,X'02'       SET STARTED AT FRONT            UF008\n         B     NEXTIOT            AND TRY AGAIN                   UF008\n***********************************************************************\n*                                                                     *\n*   READ A BLOCK FROM HASPACE                                         *\n*                                                                     *\n***********************************************************************\nREAD     ST    R4,QCTRAK          STORE DISK ADDR\n         LR    R1,R5              IOAREA ADDRESS\n         L     R15,=V(READSPC)    ADDR OF ROUTINE TO READ HASPACE\n         BALR  R14,R15            GO TO IT\n         BR    R8                 RETURN TO CALLER\nED8      DC    X'4020202020202120'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nFINDPDDB CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $TAB\n         $JCT\n         $PDDB\n         $IOT\nWORK     DSECT\n         DS    CL72\nSWITCH   DS    C\nCONVERT  DS    D\n         QCOMMON\n         ORG   QDMSG\n         DS    CL28\nDSID     DS    CL4\n         DS    CL4\nDSRECCT  DS    CL8\n         DS    CL4\nDSCLASS  DS    CL1\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORMAT": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x0b\\x00\\x00\\x01\\x02\\x17/\\x01\\x020o\\x10\\x08\\x02\\x03\\x01\\xe0\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.11", "flags": 0, "createdate": "2002-06-21T00:00:00", "modifydate": "2002-11-02T10:08:00", "lines": 515, "newlines": 480, "modlines": 0, "user": "GREG"}, "text": "FORMAT   QSTART 'QUEUE COMMAND - JQE AND JOE FORMAT ROUTINES'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB17 - WHEN FORMATTING JOES, CHECK FOR JOE ON PSO AND     *\n*                  INDICATE 'EXT-WTR' IF SO. ALSO, DON'T INDICATE ON  *\n*                  ON PRINT/PUNCH UNLESS SHOWS ACTIVE IN JOEFLAGS.    *\n*                  ALSO, FIX BUG IN GETTING TO CHECKPOINT JOE FOR     *\n*                  RECORDS LEFT, AND FIX RECORDS LEFT FOR SP2.        *\n*                  ALSO, IF JOE NOT BUSY, BUT CHKPT JOE VALID, PRINT  *\n*                  NUMBER OF RECORDS LEFT, NOT TOTAL RECORDS.         *\n*      (2) RNB18 - DISTINGUISH BETWEEN JOES WITH REMOTE ROUTING AND   *\n*                  THOSE WITH SPECIAL LOCAL ROUTING (DEFINED BY DESTID*\n*                  STATEMENTS WITH DEST=UNNN).                        *\n*      (3) RNB19 - WHEN LISTING JQE'S, DON'T ASSUME INPUT QUEUE, BUT  *\n*                  USE THE JQETYPE INSTEAD. ALSO, SPECIALLY HANDLE    *\n*                  CONVERSION AND DUMP QUEUES, AND AWAITING OUTPUT.   *\n*      (4) RNB20 - WHEN LISTING THINGS, DISTINGUISH BETWEEN NORMAL    *\n*                  HOLD, HOLD ALL, AND DUPLICATE HOLD. ALSO, FOR      *\n*                  JOES, INDICATE SELECT=NO IF APPLICABLE.            *\n*      (5) RNB21 - FIX SETDEVIC SUBROUTINE FOR SP2.                   *\n*      (5) RNB25 - ALLOW 'COUNT' PARM TO HO TO INDICATE TOTAL LINE    *\n*                  COUNT DESIRED FOR JOBS ON HELD OUTPUT QUEUE        *\n***********************************************************************\n         GBLB  &QSP           MVS/SP OPTION                       UF020\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART    GP@P6\n         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA\n         L     R10,QVDSPL     LOAD BASE REG\n         USING JQEDSECT,R9    BASE REG FOR JQE DSECT\n         USING JOEDSECT,R8    BASE REG FOR JOE DSECT\n         USING WORK,R13       BASE FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   INPUT TO THIS MODULE -                                            *\n*     R1 = 0 INDICATES PRINT JQE                                      *\n*     R1 = 4 INDICATES PRINT JOE                                      *\n*     R9 CONTAINS JQE ADDRESS                                         *\n*     R8 CONTAINS JOE ADDRESS                                         *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*   BRANCH TO PROPER ROUTINE                                          *\n*                                                                     *\n***********************************************************************\n         MVC   FCLEAR,=CL80' ' CLEAR THE PRINT AREA\n         MVC   FQUEUE,QCLASS  CLASS NAME\n         XC    QPJOBID(6),QPJOBID       DROP JOB AND DATA SET     GP@P6\n         QHEAD HEADING,X'24',TYP=QDJQ   HEADING IN GREEN REVERSE  GP@P6\n         MVI   QDLNCODE,X'05' TURQUOISE IS DEFAULT COLOUR         GP@P6\n         CLI   QSUBNAME,C'X'  IS THE REQUEST FOR A HEX DUMP?\n         BE    NOTBUSY        YES. SKIP.\n*        CLC   =X'01000100',JQEPRTRT IS THE PRINT/PUNCH FOR LOCAL?\n*        BE    LOCAL          YES. SKIP THIS ROUTINE.\n*        MVC   FREMOTE,=C'RJE' INDICATE THIS JOB IS REMOTE\n         TM    JQEFLAGS,QUEBUSY IS THE JOB EXECUTING?\n         BZ    NOTBUSY        NO. SKIP THIS ROUTINE.\n         MVI   QDLNCODE,X'06' YES, SHOW LINE IN YELLOW            GP@P6\n         IC    R15,JQEFLAGS   GET SYSTEM NUMBER\n         N     R15,=F'7'      ZERO OUT UNWANTED BITS\n         SLL   R15,3          MULTIPLY BY 8\n         LA    R15,QSYSID(R15) OBTAIN SYSTEM ID\n         MVC   FSYSID,0(R15)  MOVE SYSTEM ID TO DISPLAY\nNOTBUSY  CLI   QCLASS,0       IS THIS THE TSO QUEUE?\n         BE    LISTTSO        YES. DO IT.\n         CLI   QCLASS,4       IS THIS THE STC QUEUE?\n         BE    LISTSTC        YES. DO IT.\n         CLI   QCLASS,8       IS THIS THE HELD OUTPUT QUEUE?\n         BE    LISTHO         YES. DO IT.\n         AIF   (NOT &QSP).RNB19A                                  RNB19\n         CLI   QCLASS,12      IS THIS THE DUMP QUEUE?             RNB19\n         BE    LISTDM         YES. DO IT.                         RNB19\n         CLI   QCLASS,16      IS THIS THE CONVERSION QUEUE?       RNB19\n         BE    LISTCN         YES. DO IT.                         RNB19\n         CLI   QCLASS,20      IS THIS THE AWAITING OUTPUT QUEUE?  RNB19\n         BE    LISTAOUT       YES. DO IT.                         RNB19\n.RNB19A  ANOP                                                     RNB19\n         LTR   R1,R1          IS REQUEST FOR JQE OR JOE?\n         BZ    LISTJQE        JQE.\n***********************************************************************\n*                                                                     *\n*   FORMAT JOE                                                        *\n*                                                                     *\n***********************************************************************\nLISTJOE  MVC   FQNAME,=C'OUTPUT' MOVE IN NAME OF QUEUE\n         CLI   QSUBNAME,C'X'  IS THE REQUEST FOR A HEX DUMP?\n         BE    HEXO           YES. DO IT.\n         AIF   (NOT &QSP).RNB20A                                  RNB20\n         TM    JOEFLAG2,$JOESLEC   IS THIS JOE SELECTABLE?        RNB20\n         BZ    LSTJOEAA            /YES - DON'T FLAG IT           RNB20\n         MVC   FHOLD,=C' S=N'      /NO  - SAY SO                  RNB20\nLSTJOEAA EQU   *                                                  RNB20\n.RNB20A  ANOP                                                     RNB20\n         L     R0,JOERECCT    NUMBER OF PRINT LINES\n         CVD   R0,CONVERT     CONVERT TO DECIMAL\n         MVC   FLINES,ED8     PREPARE FOR EDIT\n         ED    FLINES,CONVERT+4 EDIT NUMBER OF LINES\n         SLR   R0,R0          CLEAR FOR INSERT                    GP@P6\n         IC    R0,JOEPRIO     GET THE JOE PRIORITY                GP@P6\n         SRL   R0,4           GET INTO 0 TO 15 RANGE              GP@P6\n         CVD   R0,CONVERT     CONVERT TO DECIMAL                  GP@P6\n         OI    CONVERT+7,X'0F'                                    GP@P6\n         MVI   FPRIO+4,C'.'                                       GP@P6\n         UNPK  FPRIO+5(2),CONVERT                                 GP@P6\n         CLI   FPRIO+5,C'0'   LEADING ZERO?                       GP@P6\n         BNE   *+4+6+4        NO                                  GP@P6\n         MVC   FPRIO+5(1),FPRIO+6   OVERLAY 0 WITH SECOND DIGIT   GP@P6\n         MVI   FPRIO+6,C' '   CLEAR OLD SECOND DIGIT              GP@P6\n*        TM    JOEFLAG,X'20'  IS THIS JOB PRINTING?               RNB17\n*        BNO   LOCAL          NO. SKIP.                           RNB17\n         TM    JOEFLAG,$JOEBUSY  IS JOE ACTIVE?                   RNB17\n         BZ    LSTJOE$$          /NO  - DON'T SET DEVICE ID       RNB17\n*                                /YES -                           RNB17\n         MVI   QDLNCODE,X'06'    YELLOW FOR ACTIVE                GP@P6\n         CLI   JOEDEVID,X'0F'    IS JOB ON PSO (EXTERNAL WRITER)? RNB17\n         BNE   LSTJOE$           /NO  - GO DO REAL DEVICE         RNB17\n         MVC   FPRINT,=CL8'EXT-WTR'  /YES - SAY SO                RNB17\n         B     LSTJOE$$                                           RNB17\n         AIF   (&QSP).RNB17A                                      RNB17\nLSTJOE$  TM    JOEFLAG,$JOEPRT+$JOEPUN  JOB PRINTING OR PUNCHING? RNB17\n         BZ    LOCAL                     /NO  - SKIP DEVICE ID    RNB17\n         AGO   .RNB17B                                            RNB17\n.RNB17A  ANOP                                                     RNB17\nLSTJOE$  TM    JOEDEVID,X'40'           JOB ON NJE DEVICE?        RNB17\n         BO    LOCAL                     /YES - SKIP DEVICE ID    RNB17\n.RNB17B  ANOP                                                     RNB17\n         LA    R3,JOEDEVID    A(OUTPUT DEVICE DESCRIPTOR            FCI\n         BAL   R7,SETDEVIC    SET THE OUTPUT DEVICE                 FCI\nLSTJOE$$ EQU   *                                                  RNB17\n         TM    JOEFLAG,$JOECKV  IS CKPT JOE VALID?                RNB17\n         BO    LSTJOE##         /YES - USE RECORDS PRINTED        RNB17\n         TM    JOEFLAG,$JOEBUSY /NO  - IS JOE BUSY?               RNB17\n         BZ    LOCAL            IF NOT, GO DO LOCAL STUFF         RNB17\n         B     LIST             IF YES, SKIP LOCAL STUFF, GO LIST RNB17\nLSTJOE## EQU   *                                                  RNB17\n         L     R0,JOERECCT      RESTORE R0 FOR REMOTES            CBT1\n         LR    R3,R8            SAVE WORK JOE ADDRESS             RNB17\n         AIF   (&QSP).QSP01                                       UF020\n         LH    R8,JOECKPT     OFFSET TO CHECKPOINT JOE\n         SLA   R8,2           MULTIPLY BY 4\n         AGO   .QSP02                                             UF020\n.QSP01   ANOP                                                     UF020\n         LA    R8,0(,R8)      CLEAR HIGH BYTE FOR ICM             RNB17\n         ICM   R8,B'0111',JOECKPTB OFFSET TO CKPT JOE             UF020\n.QSP02   ANOP                                                     UF020\n         BZ    LIST           CHECKPOINT DOES NOT EXIST. SKIP.\n         USING QCKPT,R1       BASE REG FOR CKPT WORK AREA\n         L     R1,QVCKPT      LOAD BASE REG\n         A     R8,QCJOTA      ADD BASE TO OFFSET\n         DROP  R1\n         AIF   (&QSP).QSP02A                                      RNB17\n         S     R0,JOETLNC     SUBTRACT RECORDS PRINTED FROM TOTAL\n         AGO   .QSP02B                                            RNB17\n.QSP02A  ANOP\n         SL    R0,JOECRECN    SUBTRACT RECORDS PRINTED FROM TOTAL RNB17\n.QSP02B  ANOP\n         LR    R8,R3          BACK TO WORK JOE                    RNB17\n         CVD   R0,CONVERT     CONVERT TO DECIMAL\n         MVC   FLINES,ED8     PREPARE FOR EDIT\n         ED    FLINES,CONVERT+4 PRINT UPDATED LINE COUNT\n         TM    JOEFLAG,$JOEBUSY IS JOE ACTIVE?                    RNB17\n         BNZ   LIST                  /YES - GO LIST IT            RNB17\n         MVC   FLINES+9(4),=C'LEFT'  /NO  - SHOW IT'S LINES LEFT  RNB17\n*                                    AND FORMAT ROUTING INFO      RNB17\nLOCAL    LA    R15,FREMOTE    ADDRESS TO PUT TEXT\n         LA    R1,JOEROUT     POINT TO ROUTING INFO                FCI*\n***********************************************************************\n*RMTORLCL SUBROUTINE - DETERMINE REMOTE OR LOCAL DESTINATION       FCI*\n* R1 POINTS TO PRTRT/PUNRT, R15 TO ASSEMBLY POINTER                FCI*\n***********************************************************************\n         AIF   (&QSP).QSP1                                        UF020\nRMTORLCL CLI   1(R1),0        IS IT FOR REMOTE 00=LOCAL            FCI*\n         AGO   .QSP2                                              UF020\n.QSP1    ANOP                                                     UF020\nRMTORLCL CLI   3(R1),0        IS IT FOR REMOTE 00=LOCAL            FCI*\n.QSP2    ANOP                                                     UF020\n         BE    LIST           NO LUCK .. HAVE TO WORK FOR IT       FCI*\n         AIF   (&QSP).RNB18A                                      RNB18\n         CLI   0(R1),0        SPECIAL LOCAL ROUTING?              RNB18\n         AGO   .RNB18B                                            RNB18\n.RNB18A  ANOP                                                     RNB18\n         CLC   =H'0',0(R1)    SPECIAL LOCAL ROUTING (SP2) ?       RNB18\n.RNB18B  ANOP                                                     RNB18\n         BNE   RMTORLC1          /NO  - GO FORMAT RMTNN           RNB18\n         MVC   0(L'LCL,R15),LCL  /YES - MOVE IN LCL               RNB18\n         LA    R15,L'LCL(R15)    BUMP POINTER                     RNB18\n         B     RMTORLC2                                           RNB18\nRMTORLC1 EQU   *                                                  RNB18\n         MVC   0(L'RMT,R15),RMT       MOVE IN 'RMT'                FCI*\n         LA    R15,L'RMT(R15)  BUMP POINTER                        FCI*\nRMTORLC2 EQU   *                                                  RNB18\n         SR    R14,R14        LOAD RMT FLAGS                       FCI*\n         AIF   (&QSP).RNB18C                                      RNB18\n         IC    R14,1(R1)      FROM PRT/PUN                         FCI*\n         AGO   .RNB18D                                            RNB18\n.RNB18C  ANOP                                                     RNB18\n         IC    R14,3(R1)      FROM JOEROUT                        RNB18\n.RNB18D  ANOP                                                     RNB18\n         CVD   R14,DOUBLEWD   RMT NUMBER TO DECIMAL                FCI*\n         B     FITINUM1       FIT THE NUMBER IN RMT MESSAGE        FCI*\n         SPACE 2\n***********************************************************************\n* FITINUM SUBROUTINE - CONVERT BIN NUMBER TO NICE FORMAT           FCI*\n*                                                                  FCI*\n***********************************************************************\nFITINUM  CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL            FCI*\nFITINUM1 MVC   NUMBER(L'NORMAL),NORMAL INITIALIZE THE EDIT FORMAT  FCI*\n         LA    R1,NUMBER+SIGNORM IN CASE OF ZEROES                 FCI*\n         EDMK  NUMBER(L'NORMAL),DOUBLEWD+2 CONVERT TO EBCDIC       FCI*\n         LA    R14,NUMBER+L'NORMAL-1 A(END OF CONVERTED NUMBER)    FCI*\n         SLR   R14,R1         LENGTH OF THE CONVERTED NUMBER - 1   FCI*\n         EX    R14,MVNUMBER   PUT THE NUMBER IN THE MSG            FCI*\n         LA    R15,1(R14,R15) A(NEXT SPOT IN MSG)                  FCI*\n         B     LIST           RETURN TO OUR CALLER                 FCI*\n         SPACE 3                                                   FCI*\nMVNUMBER MVC   0(0,R15),0(R1) TO BE EXECUTED                       FCI*\n         SPACE 2                                                   FCI*\nNORMAL   DC    X'402020202020202020202120' EDIT MASK               FCI*\nSIGNORM  EQU   11             OFFSET TO LAST DIGIT                 FCI*\nRMT      DC    C'RMT'                                              FCI*\nLCL      DC    C'LCL'                                             RNB18\n***********************************************************************\n*                                                                     *\n*   FORMAT JQE                                                        *\n*                                                                     *\n***********************************************************************\nLISTTSO  MVC   FQNAME(8),=C'TSO USER' NAME OF QUEUE\n         B     LIST           CONTINUE\nLISTSTC  MVC   FQNAME(8),=C'SYSTEM Q' NAME OF QUEUE\n         B     LIST           CONTINUE\nLISTHO   MVC   FQNAME(8),=C'HELD OUT' NAME OF QUEUE\n         B     LIST           CONTINUE\n         AIF   (NOT &QSP).RNB19B                                  RNB19\nLISTDM   MVC   FQNAME(4),=C'DUMP'     NAME OF QUEUE               RNB19\n         B     LIST                                               RNB19\nLISTAOUT MVC   FQNAME(6),=C'AW OUT'   NAME OF QUEUE               RNB19\n         B     LISTCN1                GO DO SYSAFF                RNB19\nLISTCN   MVC   FQNAME(6),=C'CONVRT'   NAME OF QUEUE               RNB19\n         MVC   FQUEUE,JQEJCLAS        JOB CLASS                   RNB19\nLISTCN1  TM    JQEFLAGS,QUEBUSY       IS JOB CONVERTING?          RNB19\n         BNZ   LIST                   /YES - GO LIST IT           RNB19\n*                                     /NO  - PUT SYSAFF IN        RNB19\n         TM    JQEFLAG2,QUESYSAF      CHECK SYSTEM AFFINITY       RNB19\n         BO    LIST                   LIST IT IF NO SPECIAL AFF   RNB19\n         LA    R15,QSYSID+8           GET FIRST SID               RNB19\n         TM    JQEFLAG2,X'01'         IS THIS IT?                 RNB19\n         BO    LISTCN2                /YES -                      RNB19\n         LA    R15,8(,R15)            /NO  - CHECK REST           RNB19\n         TM    JQEFLAG2,X'02'                                     RNB19\n         BO    LISTCN2                                            RNB19\n         LA    R15,8(,R15)                                        RNB19\n         TM    JQEFLAG2,X'04'                                     RNB19\n         BO    LISTCN2                                            RNB19\n         LA    R15,8(,R15)                                        RNB19\n         TM    JQEFLAG2,X'08'                                     RNB19\n         BO    LISTCN2                                            RNB19\n         LA    R15,8(,R15)                                        RNB19\n         TM    JQEFLAG2,X'10'                                     RNB19\n         BO    LISTCN2                                            RNB19\n         LA    R15,8(,R15)                                        RNB19\n         TM    JQEFLAG2,X'20'                                     RNB19\n         BO    LISTCN2                                            RNB19\n         LA    R15,8(,R15)                                        RNB19\nLISTCN2  MVC   FREMOTE(4),0(R15)      MOVE SYSTEM ID TO DISPLAY   RNB19\n         B     LIST                                               RNB19\n.RNB19B  ANOP                                                     RNB19\n*LISTJQE  MVC   FQNAME,=C' INPUT' NAME OF QUEUE                   RNB19\nLISTJQE  MVC   FQNAME(5),=CL5'XEQ'  ASSUME XEQ QUEUE              RNB19\n         TM    JQETYPE,$XEQ         IS IT XEQ QUEUE?              RNB19\n         AIF   (NOT &QPFK).CLSFIXD                                GP@P6\n         BNO   INPUTCHK             NO, CHECK FOR INPUT           GP@P6\n         CLI   QDLNCODE,X'06' JOB ALREADY ACTIVE?                 GP@P6\n         BE    LIST           YES, CANNOT CHANGE CLASS NOW        GP@P6\n         TM    QFLAG1,QFLG1OPR+QFLG1APF                           GP@P6\n         BNO   LIST           NOT OPER PRIV IN APF ENVIRONMENT    GP@P6\n         MVI   FQUEUE-1,X'0B' INPUT HIGH INTENSITY                GP@P6\n         MVI   FQUEUE+1,X'0C' OUTPUT LOW INTENSITY                GP@P6\n         B     LIST           GO LIST IT                          GP@P6\nINPUTCHK DS    0H                                                 GP@P6\n         AGO   .ALTCLAS                                           GP@P6\n.CLSFIXD ANOP                                                     GP@P6\n         BO    LIST                 /YES - GO LIST IT             RNB19\n.ALTCLAS ANOP                                                     GP@P6\n         MVC   FQNAME(5),=C'INPUT'  ELSE ASSUME INPUT, ETC.       RNB19\n         TM    JQETYPE,$INPUT                                     RNB19\n         BO    LIST                                               RNB19\n         MVC   FQNAME(6),=C'OUTPUT'                               RNB19\n         TM    JQETYPE,$OUTPUT+$HARDCPY                           RNB19\n         BNZ   LIST                                               RNB19\n         MVC   FQNAME(5),=C'PURGE'                                RNB19\n         TM    JQETYPE,$PURGE                                     RNB19\n         BO    LIST                                               RNB19\n         MVC   FQNAME(8),=CL8'????????'                           RNB19\nLIST     CLI   QSUBNAME,C'X'  IS THE REQUEST FOR A HEX DUMP?\n         BE    HEX            YES. DO IT.\n         MVC   FCOUNT,ED5     PREPARE FOR EDIT\n         ED    FCOUNT,QCOUNT  EDIT THE POSITION IN QUEUE\n         MVC   FNAME,JQEJNAME MOVE IN JOBNAME\n         MVC   FJOBNO,ED5     PREPARE FOR EDIT\n         LH    R0,JQEJOBNO    LOAD HASP JOBNUMBER\n         CVD   R0,CONVERT     CONVERT TO DECIMAL\n         ED    FJOBNO,CONVERT+5 EDIT HASP JOBNUMBER\n         SR    R0,R0          ZERO OUT REGISTER\n         IC    R0,JQEPRIO     LOAD JQE PRIORITY\n         SRL   R0,4           DIVIDE BY 16\n         CVD   R0,CONVERT     CONVERT TO DECIMAL\n         MVC   FPRIO,ED3      PREPARE FOR EDIT\n         ED    FPRIO,CONVERT+6 EDIT JQE PRIORITY\n         TM    JQEFLAGS,X'E0' IS THE JOB HELD?\n         BZ    NOHOLD         NO.\n         MVC   FHOLD,=C'HELD' INDICATE JOB HELD\n         TM    JQEFLAGS,QUEHOLD1  SPECIFIC HOLD?                  RNB20\n         BO    NOHOLD             /YES - GO DISPLAY               RNB20\n         MVC   FHOLD,=C'DUP '     ASSUME DUPLICATE                RNB20\n         TM    JQEFLAGS,QUEHOLD2  IS IT DUPLICATE HOLD?           RNB20\n         BO    NOHOLD             /YES - GO DISPLAY               RNB20\n         MVC   FHOLD,=C'$HA '     ELSE MUST BE FROM $HA           RNB20\nNOHOLD   DS    0H\n         CLC   QCODEH,=H'28'  IS THIS THE HO COMMAND?             RNB25\n         BNE   LIST2          /NO  - DO NORMAL LISTING            RNB25\n*                             /YES -                              RNB25\n         CLC   =C'COUNT',QPARM1  DOES USER WANT LINE COUNTS?      RNB25\n         BNE   LIST2          /NO  - DO NORMAL LISTING            RNB25\n*                             /YES - GET JCT AND FORMAT LINE CNT  RNB25\n         MVC   QCTRAK,JQETRAK DISK ADDR OF JCT                    RNB25\n         L     R3,QCJCTA      ADDR OF IOAREA FOR JCT              RNB25\n         LR    R1,R3          PARM FOR READSPC                    RNB25\n         L     R15,=V(READSPC)  ROUTINE TO READ HASPACE           RNB25\n         BALR  R14,R15          GO DO IT                          RNB25\n         USING JCTSTART,R3    BASE FOR JCT                        RNB25\n         L     R0,JCTLINES    GET TOTAL LINES GENERATED BY JOB    RNB25\n         DROP  R3                                                 RNB25\n         CVD   R0,CONVERT     CONVERT TO DECIMAL                  RNB25\n         MVC   FLINES,ED8     PREPARE FOR EDIT                    RNB25\n         ED    FLINES,CONVERT+4  PRINT TOTAL LINE COUNT           RNB25\n         C     R0,=F'9999999' IS THE LINE COUNT >= 10 MILLION?    RNB25\n         BNH   LIST2          /NO  - GO LIST IT                   RNB25\n         MVI   FLINES+8,C'+'  /YES - SHOW OVERFLOW                RNB25\nLIST2    EQU   *                                                  RNB25\n         AIF   (NOT &QPFK).JQNOSEL                                GP@P6\n         MVI   QDMSG,X'0B'    INPUT HIGH INTENSITY                GP@P6\n         MVI   QDMSG+1,C'.'   SUPPLY LEADER DOT                   GP@P6\n         MVI   QDMSG+2,X'0C'  OUTPUT LOW INTENSITY                GP@P6\n.JQNOSEL ANOP                                                     GP@P6\n         LA    R1,QDMSG       ADDR OF MESSAGE AREA\n         ST    R1,QDMSGA      STORE MESSAGE ADDR\n         MVC   QDMLNG,=H'80'  LENGTH OF DISPLAY LINE\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        DISPLAY THE LINE\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   TAKE HEX DUMP OF JOE                                              *\n*                                                                     *\n***********************************************************************\nHEXO     UNPK  FHEX1,0(8,R8)  UNPK FIRST PART OF JOE INTO HEX\n         UNPK  FHEX2,7(8,R8)  SECOND\n         UNPK  FHEX3,14(8,R8) THIRD\n         UNPK  FHEX4,21(8,R8) FOURTH\n         UNPK  FHEX5,28(5,R8) FIFTH\n         MVI   FHEXOC,C' '    CLEAR LAST BYTE\n         TR    FHEXO,TABLE    CHANGE TO PRINTABLE HEX\n         LA    R1,QDMSG       ADDR OF MESSAGE AREA\n         ST    R1,QDMSGA      STORE MESSAGE ADDR\n         MVC   QDMLNG,=H'80'  LENGTH OF DISPLAY LINE\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        DISPLAY THE LINE\n***********************************************************************\n*                                                                     *\n*   TAKE HEX DUMP OF JQE                                              *\n*                                                                     *\n***********************************************************************\nHEX      UNPK  FHEX1,0(8,R9)  UNPK FIRST PART OF JOE INTO HEX\n         UNPK  FHEX2,7(8,R9)  SECOND\n         UNPK  FHEX3,14(8,R9) THIRD\n         UNPK  FHEX4,21(8,R9) FOURTH\n         MVC   FHEXC,QBLANK   CLEAR LAST BYTES\n         TR    FHEX,TABLE     CHANGE TO PRINTABLE HEX\n         B     NOHOLD         CALL DISPLAY\n***********************************************************************\n* SETDEVIC SUBROUTINE - GET DEVICE DATA (R3) POINTS TO DEVID       FCI*\n*                                                                  FCI*\n***********************************************************************\nSETDEVIC ST    R7,SETDHOLD       SAVE LINK ADDRESS                 FCI*\n         MVC   FPRINT(9),=CL9' '\n         TM    0(R3),HIGHBIT REMOTE DEVICE?                        FCI*\n         BO    RMTDEV         YES => OUTPUT IT                     FCI*\n         SR    R1,R1          FOR THE INSERT CHARACTER             FCI*\n         IC    R1,0(R3)         DEVICE TYPE                        FCI*\n         SRL   R1,4           RIGHT JUSTIFIED                      FCI*\n         MH    R1,DEVTYPEL    TYPE * LENGTH OF A DEVICE ENTRY      FCI*\n         LA    R1,DEVTABLE(R1) A(DEVICE TYPE)                      FCI*\n         MVC   FPRINT,1(R1)   PUT IN THE DEVICE TYPE\n         CLI   0(R3),0          INTERNAL READER?                   FCI*\n         BE    SETDRTN        YES => GIVE THE USER THE INFO        FCI*\n         SR    R15,R15        FOR THE INSERT CHARACTER             FCI*\n         AIF   (&QSP).RNB21A                                      RNB21\n         IC    R15,1(R3)        DEVICE NUMBER                      FCI*\n         AGO   .RNB21B                                            RNB21\n.RNB21A  ANOP                                                     RNB21\n         ICM   R15,3,1(R3)      DEVICE NUMBER  (SP2)              RNB21\n.RNB21B  ANOP                                                     RNB21\n         CVD   R15,DOUBLEWD   IN PACKED DECIMAL                    FCI*\n         IC    R15,0(R1)      OFFSET TO WHERE THE DEV # GOES       FCI*\n         LA    R15,FPRINT(R15) A(WHERE THE DEV # GOES)\n         MVC   1(L'DIGITS3,R15),DIGITS3 SET UP THE EDIT OF 3 DIGITSKMT*\n         EDMK  0(L'DIGITS3+1,R15),DOUBLEWD+6 DEV # IN EBCDIC       FCI*\n         MVC   0(L'DIGITS3+1,R15),0(R1) ADJUST FOR BLANKS          FCI*\n*                                                                  FCI*\n         B     SETDRTN        GO EXIT\n*                                                                  FCI*\nRMTDEV   SR    R0,R0          FOR THE INSERT CHARACTER             FCI*\n         AIF   (&QSP).QSP3                                        UF020\n         IC    R0,1(R3)         REMOTE NUMBER                      FCI*\n         AGO   .QSP4                                              UF020\n.QSP3    ANOP                                                     UF020\n         IC    R0,2(R3)         REMOTE NUMBER                     RNB21\n.QSP4    ANOP                                                     UF020\n         CVD   R0,DOUBLEWD    IN PACKED DECIMAL                    FCI*\n         MVI   FPRINT,C'R'    INDICATE A REMOTE DEVICE             FCI*\n         MVC   FPRINT+2(L'THREEPT),THREEPT SET UP THE EDIT MASK    FCI*\n         EDMK  FPRINT+1(L'THREEPT),DOUBLEWD+6 CONVERT TO EBCDIC    FCI*\n         MVC   FPRINT+1(L'THREEPT),0(R1) ADJUST FOR BLANKS         FCI*\n         LA    R1,FPRINT+1    A(SPOT JUST BEFORE POSSIBLE SEP)     FCI*\nFINDPT   LA    R1,1(R1)       A(NEXT BYTE)                         FCI*\n         CLI   0(R1),C'.'     FOUND THE SEPARATOR?                 FCI*\n         BNE   FINDPT         NO => KEEP LOOKING                   FCI*\n         SR    R15,R15        FOR THE INSERT CHARACTER             FCI*\n         IC    R15,0(R3)        DEVICE TYPE INDICATOR              FCI*\n         SRL   R15,3          RIGHT JUSTIFIED                      FCI*\n         LA    R15,RMTDEVS-HIGHBIT/8(R15) A(DEVICE TYPE)           FCI*\n         MVC   1(2,R1),0(R15) PUT IN THE DEVICE TYPE               FCI*\n         MVC   3(1,R1),0(R3) PUT IN THE DEVICE NUMBER              FCI*\n         OI    3(R1),C'0'     MAKE THE DEVICE NUMBER PRINTABLE     FCI*\n         B     SETDRTN\n         EJECT ,                                                   FCI*\nSETDRTN  L     R7,SETDHOLD    GET RETURN ADDRESS                   FCI*\n         BR    R7             RETURN TO OUR CALLER                 FCI*\n         SPACE 5                                                   FCI*\nDIGITS3  DC    X'202020'                                           FCI*\nTHREEPT  DC    X'2020204B'                                         FCI*\n         DS    0H                                                  FCI*\nDEVTABLE DC    AL1(0),CL8'INTRDR',AL1(6),CL8'READER'               FCI*\n         DC    AL1(7),CL8'PRINTER',AL1(5),CL8'PUNCH'               FCI*\nDEVTYPEL DC    AL2((*-DEVTABLE)/4)                                 FCI*\nRMTDEVS  DC    C'**',C'RD',C'PR',C'PU'                             FCI*\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nED8      DC    X'4020202020202120'\nED5      DC    X'402020202021'\nED3      DC    X'40202021'\nHEADING  DC   C'      QUEUE  POSITION JOBNAME    JOB#  PRIORITY  LINES'\n         DC    CL40'   EXECUTING'\nHIGHBIT  EQU   X'80'\nTABLE    EQU   *-240\n         DC    C'0123456789ABCDEF' TRANSLATE TO PRINTABLE HEX\nWORK     DSECT\n         DS    CL80\nCONVERT  DS    D\nSETDHOLD DS    F\nDOUBLEWD DS    D\nNUMBER   DS    CL16\nFORMAT   CSECT\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nFORMAT   CSECT ,                                                  UF023\n         $JQE\n         $JOE\nJCT      EQU   0                                                  RNB25\nBUFSTART EQU   0                                                  RNB25\nBUFDSECT EQU   0                                                  RNB25\n         $JCT                                                     RNB25\n         QCOMMON\n         ORG   QDMSG\nFCLEAR   DS    0CL80          FORMAT FOR QUEUE RECORDS\n         DS    CL4\nFQNAME   DS    CL6            NAME OF QUEUE\n         DS    C\nFQUEUE   DS    C              CLASS NAME\n         DS    CL2\nFCOUNT   DS    CL6            POSITION IN QUEUE\n         DS    CL2\nFNAME    DS    CL8            JOBNAME\n         DS    CL2\nFJOBNO   DS    CL6            JES2 JOB NUMBER\n         DS    CL2\nFPRIO    DS    CL4            JOB PRIORITY\n         DS    CL2\nFLINES   DS    CL8            NUMBER OF OUTPUT LINES\n         DS    CL3\nFSYSID   DS    CL8            SYSTEM ID\n         DS    CL3\nFHOLD    DS    CL4            JOB HOLD STATUS\n         DS    CL1\nFREMOTE  DS    CL8            REMOTE\n         ORG   FSYSID\nFPRINT   DS    CL8            PRINTING\n         ORG   FCOUNT\nFHEX     DS    0CL56          LENGTH OF JQE HEX DUMP\nFHEXO    DS    0CL64          LENGTH OF JOE HEX DUMP\nFHEX1    DS    0CL15\n         DS    CL14\nFHEX2    DS    0CL15\n         DS    CL14\nFHEX3    DS    0CL15\n         DS    CL14\nFHEX4    DS    0CL15\n         DS    CL14\nFHEXC    DS    0CL9           CLEAR LAST BYTES FOR JQE\nFHEX5    DS    0CL9\n         DS    CL8\nFHEXOC   DS    C              CLEAR LAST BYTE FOR JOE\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTTERM": {"ttr": 2565, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    GTTERM &PRMSZE=,&ALTSZE=,&ATTRIB=,&TERMID=,&MF=I      @G76XRYU\n.*                                                             @OW03892\n.* A000000-999999                                              @G76XR00\n.* A034000                                                     @OZ90350\n.* NOCHANGE SHIPPED WITH JCLIN                                 @OY20024\n.* NOCHANGE SHIPPED WITH JCLIN                                 @OY26821\n.* ADDED TERMID PARAMETER                                      @OW03892\n.*\n         LCLC  &NDX                                            @G76XRYU\n&NDX     SETC  '&SYSNDX'                                       @G76XRYU\n         AIF   ('&MF' EQ 'I' AND '&PRMSZE' EQ '' AND '&ATTRIB' EQ '' AN-\n               D '&TERMID' EQ '').ERROR1              @G76XRYU @OW03892\n         AIF   ('&MF' EQ 'L').LFORM\n         AIF   ('&MF(1)' EQ 'E').EFORM\n         AIF   ('&MF' NE 'I').ERROR2\n.*********************I -FORM OF MACRO*********************************\n&NAME    CNOP  0,4\n         BAL   1,*+20                   BRANCH AROUND PARMS    @G76XRYU\n.*                                                             @OW03892\nGTRM&NDX DC    A(0)                     ADDRESS OF PRIMARY     @G76XRYU\n         DC    A(0)                     ADDRESS OF ALTERNATE\n         DC    A(0)                     ADDRESS OF ATTRIBUTE   @G76XRYU\n         DC    A(0)                     ADDRESS OF TERMINAL ID @OW03892\n         AGO   .STADDR\n.EFORM   ANOP\n&NAME    CNOP  0,4                                             @OZ90350\n         IHBOPLST ,,&NAME,MF=&MF\n.STADDR  ANOP\n.*********COMMON CODE FOR BOTH I AND E FORM OF MACRO******************\n         AIF   ('&PRMSZE' EQ '').LABEL2\n         AIF   ('&PRMSZE'(1,1) NE '(').LOADPRM\n         ST    &PRMSZE(1),0(,1)         STORE PRIMARY ADDRESS\n         AGO   .LABEL2\n.LOADPRM ANOP\n         AIF   ('&PRMSZE'(K'&PRMSZE,1) EQ ')' OR '&MF' NE 'I').LPARM\n         ORG   GTRM&NDX                 PUT ADDR OF PRIMARY    @G76XRYU\n         DC    A(&PRMSZE)               IN PARM LIST           @G76XRYU\n         ORG\n         AGO   .LABEL2                                         @G76XRYU\n.LPARM   ANOP                      ..LA ADDR OR EXECUTE FORM   @G76XRYU\n         LA    0,&PRMSZE                LOAD ADDRESS OF PRIMARY\n         ST    0,0(,1)                  STORE ADDRESS OF PRIMARY\n.LABEL2  ANOP\n         AIF   ('&ALTSZE' EQ '').IEATRCK                       @G76XRYU\n         AIF   ('&ALTSZE'(1,1) NE '(').LOADALT\n         ST    &ALTSZE(1),4(,1)         STORE ADDRESS OF ALTERNATE\n         AGO   .IEATRCK                                        @G76XRYU\n.LOADALT ANOP\n         AIF   ('&ALTSZE'(K'&ALTSZE,1) EQ ')' OR '&MF' NE 'I').LAALT\n         ORG   GTRM&NDX+4               PUT ALTERNATE SIZE     @G76XRYU\n         DC    A(&ALTSZE)               IN PARM LIST           @G76XRYU\n         ORG\n         AGO   .IEATRCK                                        @G76XRYU\n.LAALT   ANOP                     ...LA ADDR OR EXECUTE FORM   @G76XRYU\n         LA    0,&ALTSZE                LOAD ADDR OF ALTERNATE @G76XRYU\n         ST    0,4(,1)                  STORE ADD OF ALTERNATE @G76XRYU\n.*  PROCESS ATTRIBUTE PARM FOR I AND E FORMS WHEN NOT NULL     @G76XRYU\n.IEATRCK ANOP                                                  @G76XRYU\n         AIF   ('&ATTRIB' EQ '').LABEL3               @G76XRYU @OW03892\n         AIF   ('&ATTRIB'(1,1) EQ '(').REGATR                  @G76XRYU\n         AIF   ('&ATTRIB'(K'&ATTRIB,1) EQ ')' OR '&MF' NE 'I').LAATRIB\n         ORG   GTRM&NDX+8               PUT ATTRIB BYTE ADDR   @G76XRYU\n         DC    A(&ATTRIB)               IN PARM LIST           @G76XRYU\n         ORG\n         AGO   .LABEL3                                @G76XRYU @OW03892\n.LAATRIB ANOP                       .. LA ADDR OR EXECUTE FORM @G76XRYU\n         LA    0,&ATTRIB                GET ADR OF ATTRIB BYTE @G76XRYU\n         ST    0,8(1)                   PUT IN 3RD PARM WORD   @G76XRYU\n         AGO   .LABEL3                                @G76XRYU @OW03892\n.REGATR  ANOP                                                  @G76XRYU\n         ST    &ATTRIB(1),8(1)          REG => 3RD PARM WORD   @G76XRYU\n.*  PROCESS TERMINAL ID PARM FOR I AND E FORMS WHEN NOT NULL   @OW03892\n.LABEL3  ANOP                                                  @OW03892\n         AIF   ('&TERMID' EQ '').SVCENTY                       @OW03892\n         AIF   ('&TERMID'(1,1) NE '(').LOTRMID                 @OW03892\n         ST    &TERMID(1),12(,1)        STORE PRIMARY ADDRESS  @OW03892\n         OI    12(1),128                END OF LIST INDICATOR  @OW03892\n         AGO   .SVCENT2                                        @OW03892\n.LOTRMID ANOP                                                  @OW03892\n         AIF   ('&TERMID'(K'&TERMID,1) EQ ')' OR '&MF' NE 'I').LTERM\n.*                                                             @OW03892\n         ORG   GTRM&NDX+12              PUT ADDR OF TERMID IN  @OW03892\n         DC    XL1'80',AL3(&TERMID)     PARM LIST WITH END OF  @OW03892\n.*                                      LIST INDICATOR         @OW03892\n         ORG\n         AGO   .SVCENT2                                        @OW03892\n.LTERM   ANOP                      ..LA ADDR OR EXECUTE FORM   @OW03892\n         LA    0,&TERMID                LOAD ADDRESS OF TERMINAL ID\n.*                                                             @OW03892\n         ST    0,12(,1)                 STORE ADDRESS OF TERMINAL ID\n.*                                                             @OW03892\n         OI    12(1),128                END OF LIST INDICATOR  @OW03892\n         AGO   .SVCENT2                                        @OW03892\n.SVCENTY ANOP\n         OI    8(1),128                 END OF LIST INDICATOR  @G76XRYU\n.SVCENT2 ANOP\n         LA    0,17                     ENTRY CODE\n         SLL   0,24                     SHIFT TO HIGH ORDER BYTE\n         SVC   94                       ISSUE SVC\n         MEXIT\n.***************  L  - FORM  ***************************\n.LFORM   ANOP\n&NAME    DS    0F\n         AIF   ('&PRMSZE' EQ '').NOPRMAD\n         AIF   ('&PRMSZE'(1,1) EQ '(').NOPRMAD\n         DC    A(&PRMSZE)               ADDRESS OF PRIMARY PARM ADDR\n         AGO   .CHKALT\n.NOPRMAD ANOP\n         DC    A(0)                     ADDRESS OF PRIMARY PARM ADDR\n.CHKALT  AIF   ('&ALTSZE' EQ '').NOALTAD\n         AIF   ('&ALTSZE'(1,1) EQ '(').NOALTAD\n         DC    A(&ALTSZE)               ADDRESS OF ALTERNATE ADDR\n         AGO   .LATTCK                                         @G76XRYU\n.NOALTAD ANOP\n         DC    A(0)                     ADDR OF ALTERNATE      @G76XRYU\n.*  PROCESS ATTRIBUTE PARM FOR LIST FORM                       @G76XRYU\n.LATTCK  ANOP                                                  @G76XRYU\n         AIF   ('&ATTRIB' NE '').CKATTR                        @G76XRYU\n         DC    A(0)                     L-FORM--ATTRIB BYTE    @G76XRYU\n         AGO   .CKTERM                                @G76XRYU @OW03892\n.CKATTR  ANOP                                                  @G76XRYU\n         AIF   ('&ATTRIB'(1,1) NE '(').ATTROK                  @G76XRYU\n         MNOTE 12,'IHB300 INCOMPATIBLE OPERANDS: MF=L AND ATTRIB=&ATTRI*\n               B'                                              @G76XRYU\n         AGO   .CKTERM                                @G76XRYU @OW03892\n.ATTROK  ANOP                                                  @G76XRYU\n         DC    A(&ATTRIB)               L-FORM--A(ATTR BYTE)   @G76XRYU\n         AGO   .CKTERM                                         @OW03892\n.CKTERM  AIF   ('&TERMID' EQ '').NOTRMAD                       @OW03892\n         AIF   ('&TERMID'(1,1) EQ '(').NOTRMAD                 @OW03892\n         DC    A(&TERMID)               ADDRESS OF TERMINAL ID ADDR\n.*                                                             @OW03892\n         MEXIT                                                 @OW03892\n.NOTRMAD ANOP                                                  @OW03892\n         DC    A(0)                     ADDRESS OF TERMINAL ID ADDR\n.*                                                             @OW03892\n         MEXIT                                                 @OW03892\n.ERROR1  ANOP\n         IHBERMAC 1006,PRMSZE\n         MEXIT\n.ERROR2  IHBERMAC 54,,&MF\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELP": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x12\\x00\\x00\\x01\\x02\\x17/\\x01\\x03\\x08\\x7f\\x18G\\x00\\xc9\\x00\\xa3\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.18", "flags": 0, "createdate": "2002-06-21T00:00:00", "modifydate": "2003-03-28T18:47:00", "lines": 201, "newlines": 163, "modlines": 0, "user": "GREG"}, "text": "HELP     QSTART 'QUEUE COMMAND - DISPLAY HELP'\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART     ICBC\n         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA\n         L     R10,QVDSPL     ADDR OF DISPLAY WORK AREA\n***********************************************************************\n*                                                                     *\n*   PASS HELP SCREEN TO DISPLAY MODULE                                *\n*                                                                     *\n***********************************************************************\n         ICM   R2,3,QPDSID     LOOKING AT VALID DATA SET?         GP@P6\n         BZ    HELPLOOP        NO                                 GP@P6\n         OI    QFLAG1,QFLG1HLP YES, MAKE PF3 MEAN \"EXIT HELP\"     GP@P6\nHELPLOOP QHEAD HEADING,X'07',DMY=Y       HEADING IN WHITE         GP@P6\n         LA    R2,MESSAG1N     NUMBER OF MESSAGES                 UF003\n         L     R3,=A(MESSAGE1) ADDRESS OF FIRST MESSAGE           UF003\n         BAL   R4,PUTHELP      WRITE THE MESSAGES                 UF003\n         SPACE 1                                                  UF003\n         LA    R2,MESSAG2N     NUMBER OF MESSAGES                 UF003\n         L     R3,=A(MESSAGE2) ADDRESS OF FIRST MESSAGE           UF003\n         BAL   R4,PUTHELP      WRITE THE MESSAGES                 UF003\n         SPACE 1                                                  UF003\n         LA    R2,MESSAG3N     NUMBER OF MESSAGES                 UF003\n         L     R3,=A(MESSAGE3) ADDRESS OF FIRST MESSAGE           UF003\n         BAL   R4,PUTHELP      WRITE THE MESSAGE                  UF003\n         SPACE 1                                                  UF003\n         TM    QXAUTH,1       IS THE USER PRIVILEGED?             UF003\n         BNO   NOAUTH         NO. SKIP.                           UF003\n         LA    R2,MESSAGXN    NUMBER OF PRIV MSGS                 UF003\n         L     R3,=A(MESSAGEX) ADDRESS OF FIRST MESSAGE           UF003\n         BAL   R4,PUTHELP      WRITE THE MESSAGE                  UF003\n         SPACE 1                                                  UF003\nNOAUTH   DS    0H\n         AIF  (NOT &QPFK).PFK1    SKIP DISPLAY OF PF-KEYS          ICBC\n         QHEAD HEADINGS,X'07',DMY=Y      HEADING IN WHITE         GP@P6\n         LA    R2,MESSAGSN     NUMBER OF MESSAGES                 GP@P6\n         L     R3,=A(MESSAGES) ADDRESS OF FIRST MESSAGE           GP@P6\n         BAL   R4,PUTHELP      WRITE THE MESSAGE                  GP@P6\n         SPACE 1                                                  GP@P6\n         QHEAD HEADINGP,X'07',DMY=Y      HEADING IN WHITE    GP@P6 ICBC\n         LA    R2,MESSAGPN     NUMBER OF MESSAGES                 UF003\n         L     R3,=A(MESSAGEP) ADDRESS OF FIRST MESSAGE           UF003\n         BAL   R4,PUTHELP      WRITE THE MESSAGES                 UF003\n         SPACE 1                                                  UF003\n.PFK1    ANOP                                                      ICBC\n         B     HELPLOOP                                           GP@P6\n         SPACE 3                                                  UF003\nPUTHELP  MVC   QDMLNG,=H'80'   SET MSG LENGTH                     UF003\nPUTHELP1 ST    R3,QDMSGA       SET MESSAGE ADDRESS                UF003\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE         UF003\n         BALR  R14,R15         LINK TO ROUTINE                    UF003\n         LA    R3,80(,R3)      POINT TO NEXT LINE                 UF003\n         BCT   R2,PUTHELP1     LOOP TILL DONE                     UF003\n         SPACE 1                                                  UF003\n         XC    QDMLNG,QDMLNG   SET TO FLUSH BUFFER                UF003\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY ROUTINE         UF003\n         BALR  R14,R15         LINK TO ROUTINE                    UF003\n         BR    R4              RETURN TO CALLER                   UF003\n         SPACE 3                                                  UF003\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nHEADING  DC    CL80'THE FOLLOWING SUBCOMMANDS ARE SUPPORTED:           +\n               (VER 3.8J REL P6.2003.MAR.28)'                GP@P6\n         AIF  (NOT &QPFK).PFK2    SKIP DISPLAY OF PF-KEYS          ICBC\nHEADINGP DC    CL80'THE PF KEYS ARE DEFINED AS FOLLOWS:                +\n               (VER 3.8J REL P6.2003.MAR.28)'                GP@P6 ICBC\nHEADINGS DC    CL80'THE FOLLOWING SELECTION CODES ARE SUPPORTED:       +\n               (VER 3.8J REL P6.2003.MAR.28)'                GP@P6\n.PFK2    ANOP                                                      ICBC\nMESSAGE1 DC    CL4' '\n DC CL80'DA           - DISPLAY ALL JOBS IN EXECUTION'\n DC CL80'DT           - DISPLAY TSO USERS'\n DC CL80'DS           - DISPLAY SYSTEM TASKS'\n DC CL80'DC           - DISPLAY CPU BATCH/STC/TSO'\n DC CL80'STATUS LEVEL - DISPLAY ALL JOBS BEGINNING WITH LEVEL'\n DC CL80'DQ           - DISPLAY INPUT QUEUES'\n DC CL80'DI CLASS     - DISPLAY ALL JOBS IN INPUT CLASS'\n DC CL80'AI CLASS     - DISPLAY JOBS AVAILABLE FOR PROCESSING'\n DC CL80'HI CLASS     - DISPLAY HELD JOBS IN INPUT CLASS'\n DC CL80'DF           - DISPLAY OUTPUT QUEUES'\n DC CL80'DO CLASS     - DISPLAY ALL JOBS IN OUTPUT CLASS'\n DC CL80'AO CLASS     - DISPLAY AVAILABLE OUTPUT'\n DC CL80'HO CLASS     - DISPLAY HELD OUTPUT'\n DC CL80'END          - TERMINATE PROCESSING'\n DC CL84' '\n DC CL80'DEFAULT FOR LEVEL IS LOGON ID'\n DC CL80'DEFAULT FOR CLASS IS ALL CLASSES'\n DC CL72'NO DEFAULT FOR JOBNAME'\nMESSAG1N EQU   (*-MESSAGE1)/80 NUMBER OF MESSAGES                 UF003\n         SPACE 1                                                  UF003\nMESSAGE2 DC    CL4' '\n DC CL80'DJ JOBNAME        - DISPLAY JOB BY JOBNAME'\n DC CL80'JCL  JOBNAME      - LIST JCL FOR A JOB'\n DC CL80'JLOG JOBNAME      - LIST JOBLOG FOR A JOB (ONLY ON OUTPUT Q)'\n DC CL80'JMSG JOBNAME      - LIST SYSTEM MESSAGES FOR A JOB'\n DC CL80'DD   JOBNAME      - LIST SYSIN AND SYSOUT DATASETS FOR A JOB'\n DC CL80'PDDB JOBNAME      - LIST PDDB''S FOR A JOB'              UF025\n DC CL80'LIST JOBNAME DSID - LIST A SYSIN OR SYSOUT DATASET'\n DC CL80'FIND ''STRING'' COL(SS,EE)  - FIND CHARACTER STRING IN DATA'\n DC CL80'FALL ''STRING'' COL(SS,EE)  - FIND ALL OCCURRENCES OF STRING'\n DC CL80'                              COL DEFAULTS TO ALL           '\n DC CL80'COL  #            - REPOSITION HORIZONTALLY TO COLUMN NUMBER'\n DC CL80'@/MD #            - REPOSITION TO SPECIFIC RECORD NUMBER'\n DC CL80'+/D  # (P,H,M OK) - REPOSITION FORWARD IN DATASET # RECORDS'\n DC CL80'-/UP # (P,H,M OK) - REPOSITION BACKWARD IN DATASET # RECORDS'\n DC CL80'T/TOP             - REPOSITION TO TOP OF DATASET'\n DC CL80'B/BOTTOM          - REPOSITION TO BOTTOM OF DATASET'\n DC CL80'HF/HB #           - FORWARD/BACKWARD # HALF PAGES'\n DC CL80'PF/PB #           - FORWARD/BACKWARD # PAGES'\n DC CL84' '\n DC CL80'DSID CAN BE DETERMINED BY USING SUBCOMMAND DD OR PDDB'   UF025\n DC CL72'JOBNAME CAN BE JOB NAME, NUMBER, OR \"*\" OR \"=\" FOR CURRENT JOB+\n               '                                            GP@P6 UF007\nMESSAG2N EQU   (*-MESSAGE2)/80 NUMBER OF MESSGES                  UF003\n         SPACE 1                                                  UF003\nMESSAGE3 DC    CL4' '\n DC CL80'SLOG JOB# SEQ - LIST THE SYSTEM LOG DATASET'\n DC CL80'FTIME TIME    - REPOSITION SYSTEM LOG TO GIVEN TIME'\n DC CL80'SAVE DSNAME   - CREATE A COPY OF THE CURRENT DATASET'\n DC CL80'SPIN <CLASS><#LINES><DEST> - SPOOL COPY OF CURRENT DATASET'\n DC CL80'PRINT/PR ON <CLASS> <DEST> - OPEN SCREEN LOG'\n DC CL80'PRINT/PR                   - PRINT CURRENT SCREEN'\n DC CL80'PRINT/PR OFF               - CLOSE SCREEN LOG'\n DC CL80'MODEL/M #     - SET 3270 MODEL 2, 3, 4, 5, OR X'         UF003\n DC CL80'MONO          - PROHIBIT EXTENDED DATA STREAM USAGE'     GP@P6\n DC CL80'COLOR/COLOUR  - ACTIVATE EXTENDED DATA STREAM USAGE'     GP@P6\n DC CL80'NEXT/N <#>    - JUMP TO NEXT DATA SET <N TIMES>'         GP@P6\n DC CL80'PREV/P <#>    - JUMP TO PREVIOUS DATA SET <N TIMES>'     GP@P6\n DC CL80'TSO  CMD PRMS - ISSUE ANY TSO COMMAND W/ OPTIONAL PARMS' UF017\n DC CL80'EXEC CMD PRMS - ISSUE ANY TSO COMMAND W/ OPTIONAL PARMS' UF017\n DC CL84' '\n DC CL80'JOB# MAY BE DETERMINED BY STATUS SYSLOG'\n DC CL80'DEFAULT FOR SEQ IS 0 (THE CURRENT SYSLOG DATASET)'\n DC CL80'    (USE A VALUE OF 1, 2, ... TO OBTAIN PREVIOUS DATASETS)'\n DC CL80'TIME IS IN THE FORM HH.MM.SS'\n DC CL80'DSNAME WILL BE EXPANDED TO USERID.DSNAME.DATA'\n DC CL72'MODEL X SETS THE SCREEN SIZE TO THE CURRENT ALTERNATE SIZE' GP\nMESSAG3N EQU   (*-MESSAGE3)/80 NUMBER OF MESSAGES                 UF003\n         SPACE 1                                                  UF003\nMESSAGEX DC    CL4' '                                             UF003\n DC CL84'PRIVILEGED SUBCOMMANDS:'\n DC CL80'XB MTTR              - DISPLAY BLOCK FROM SYS1.HASPACE'\n DC CL80'XD JOBNAME DSID      - UNRESTRICTED DISPLAY OF DATASETS'\n DC CL80'XI                   - DISPLAY ACTIVE INITIATORS       '\n DC CL80'XJ JOBNAME           - DISPLAY UNINTERPRETED JQES AND JOES'\n DC CL80'JQE JOBNAME          - DISPLAY JQE IN HEX/EBCDIC'        UF015\n DC CL80'JCT JOBNAME <OFFSET> - DISPLAY JCT IN HEX/EBCDIC'        UF016\n DC CL80'JOE JOBNAME          - DISPLAY JOES IN HEX/EBCDIC'       UF026\n DC CL72'HCT                  - DISPLAY HCT $SAVE AREA   '        UF022\nMESSAGXN EQU   (*-MESSAGEX)/80 NUMBER OF MESSAGES                 UF003\n         AIF  (NOT &QPFK).PFK3    SKIP DISPLAY OF PF-KEYS          ICBC\nMESSAGEP DC    CL12' '                                             ICBC\n DC CL80'_____________________________'                            ICBC\n DC CL80'|PK1     |PK2     |PK3      |'                            ICBC\n DC CL80'|  HELP  |  DA    |   END   |'                            ICBC\n DC CL80'|________|________|_________|'                            ICBC\n DC CL80'|PK4     |PK5     |PK6      |'                            ICBC\n DC CL80'|  PRINT |  FIND  |   DI    |'                            ICBC\n DC CL80'|________|________|_________|'                            ICBC\n DC CL80'|PK7     |PK8     |PK9      |'                            ICBC\n DC CL80'|  PB    |  PF    |   DO    |'                            ICBC\n DC CL80'|________|________|_________|'                            ICBC\n DC CL80'|PK10    |PK11    |PK12     |'                            ICBC\n DC CL80'|  COL 1 | COL 41 |   ST    |'                            ICBC\n DC CL80'|________|________|_________|'                            ICBC\n DC CL72' '                                                        ICBC\n DC CL80'TO SPECIFY OPERANDS (FOR PF5, AND OPTIONALLY FOR PF6, 9, 12),'\n DC CL80'OR TO TEMPORARILY OVERRIDE THE DEFAULTS (FOR PF7, 8, 10, 11),'\n DC CL76'KEY IN THE VALUE AND PRESS THE APPROPRIATE PF KEY.'       ICBC\nMESSAGPN EQU   (*-MESSAGEP)/80 NUMBER OF MESSAGES                 UF003\n         SPACE 1\nMESSAGES DC    CL84' '       SELECTION CODE HELP    NOV 2002      GP@P6\n DC CL86'SELECTION CODES FOR JOBS AND ADDRESS SPACES'\n DC CL80'A  (*)   - RELEASE THE JOB'\n DC CL80'C  (*)   - CANCEL THE JOB'\n DC CL80'D        - DISPLAY THE SPOOL DATA SETS OF THE JOB'\n DC CL80'H  (*)   - HOLD THE JOB'\n DC CL80'J        - DISPLAY THE JCL OF THE JOB'\n DC CL80'L        - DISPLAY THE JOB LOG OF THE JOB'\n DC CL80'M        - DISPLAY THE JOB MESSAGES OF THE JOB'\n DC CL80'P  (*)   - PURGE THE JOB OR DELETE THE HELD OUTPUT'\n DC CL80'S        - BROWSE THE SPOOL DATA SETS OF THE JOB'\n DC CL74' '\n DC CL86'SELECTION CODES FOR INITIATORS'\n DC CL80'S  (*)   - START THE INITIATOR (CREATES AN ADDRESS SPACE)'\n DC CL80'Z  (*)   - HALT THE INITIATOR (STOPS JOB SELECTION)'\n DC CL80'P  (*)   - DRAIN THE INITIATOR (TERMINATES THE ADDRESS SPACE)'\n DC CL74' '\n DC CL80'(*) - COMMAND REQUIRES SUITABLE AUTHORISATION'\n DC CL80' '\n DC CL76'AN ''S'' SELECTION IS IMPLIED BY PLACING THE CURSOR ON A LEADE+\n               R DOT'\nMESSAGSN EQU   (*-MESSAGES)/80 NUMBER OF MESSGES                  GP@P6\n.PFK3    ANOP                                                      ICBC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HEXBLK": {"ttr": 2573, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "HEXBLK   QSTART 'QUEUE COMMAND - HEXADECIMAL DUMP OF A BLOCK'\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         L     R2,QCBLKA      BLOCK IOAREA ADDR                   UF013\n***********************************************************************\n*                                                                     *\n*   VALIDATE AND CONVERT BLOCK ADDRESS                                *\n*                                                                     *\n***********************************************************************\n         LH    R1,QLNG1       LENGTH OF USER PARM\n         LTR   R1,R1          IS THE LENGTH ZERO?\n         BNP   TILT           YES. TILT.\n         CH    R1,=H'8'       IS THE LENGTH TOO BIG?\n         BH    TILT           YES. TILT.\n         CLI   QPARM1,C'*'    USE CURRENT BUFFER CONTENTS?        UF013\n         BE    READOK         YES, SKIP THE READ                  UF013\n         CLI   QPARM1,C'+'    CHAIN TO NEXT BLOCK?                UF013\n         BNE   READ1          NO, CONTINUE WITH NORMAL CODE       UF013\n         MVC   QCTRAK,0(R2)   GET NEXT BLOCK ADDRESS              UF013\n         OC    QCTRAK,QCTRAK  TEST FOR END OF CHAIN               UF013\n         BNZ   READ2          GO READ BLOCK IF OK                 UF013\n         QTILT ' *** BLOCK CHAIN FIELD IS ZERO ***'               UF013\nREAD1    MVC   QDWORD,QPARM1  LEAVE THE ORIGINAL ALONE            UF013\n         TR    QDWORD,TABLEH  CONVERT TO HEX                      UF013\n         EX    R1,PACK        PACK INTO QCTRAK\n***********************************************************************\n*                                                                     *\n*   READ THE BLOCK FROM HASPACE                                       *\n*                                                                     *\n***********************************************************************\nREAD2    DS    0H                                                 UF013\n         LR    R1,R2          PARM FOR READSPC\n         L     R15,=V(READSPC) ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\nREADOK   DS    0H                                                 UF013\n***********************************************************************\n*                                                                     *\n*   PRINT THE BLOCK                                                   *\n*                                                                     *\n***********************************************************************\n         LH    R0,HASPACE+62  LENGTH OF DATA                      UF012\n         LH    R1,QLNG2       LENGTH OF USER OFFSET               UF013\n         LTR   R1,R1          IS THE LENGTH ZERO?                 UF013\n         BNP   DUMP1          YES. NONE SPECIFIED                 UF013\n         CH    R1,=H'8'       IS THE LENGTH TOO BIG?              UF013\n         BH    TILTO          YES, GIVE UP                        UF013\n         EX    R1,OFFTR       CONVERT TO HEX                      UF013\n         EX    R1,OFFPACK     PACK INTO QDWORD                    UF013\n         LH    R1,QDWORD      PICK UP OFFSET                      UF013\n         AR    R2,R1          ADD TO BASE ADDRESS                 UF013\n         SR    R0,R1          SUBTRACT FROM TOTAL LENGTH          UF013\n         SLL   R1,16          MOVE TO PROPER POSITION             UF013\n         OR    R0,R1          INSERT INTO LENGTH REG              UF013\nDUMP1    LR    R1,R2          POINT TO BUFFER READ                UF012\n         L     R15,=V(HEXDUMP) ADDRESS OF DUMP ROUTINE            UF012\n         BALR  R14,R15        LINK TO IT                          UF012\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   EXCEPTIONS AND RETURN                                             *\n*                                                                     *\n***********************************************************************\nTILT     QTILT '*** BLOCK ADDRESS WAS OMITTED ***'\nTILTO    QTILT '*** INVALID OFFSET SPRCIFIED ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nPACK     PACK  QCTRAK(5),QDWORD(1) BLOCK ADDRESS                  UF013\nOFFTR    TR    QPARM2,TABLEH       CONVERT TO HEX                 UF013\nOFFPACK  PACK  QDWORD(3),QPARM2(1) PACK TO WORK AREA              UF013\n         LTORG\n* TABLE FOR HEX CONVERT\nTABLEH   DC    CL193' '\n         DC    X'0A0B0C0D0E0F',CL41' ',C'01234567890',CL6' '\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEXDUMP": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x17?\\x01\\x02\\x17?\\x00F\\x00\\xab\\x00\\xab\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2002-06-22T00:46:00", "lines": 171, "newlines": 171, "modlines": 0, "user": "GREG"}, "text": "HEXDUMP  QSTART 'QUEUE COMMAND - HEX DUMP OF PASSED DATA AREA'    UF011\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R8,QVPRINT     LOAD BASE REG\n         USING QCPRINT,R8     BASE REG FOR DISPLAY WORK AREA\n         LA    R8,QPLINE      LOAD BASE REG\n         USING WORK,R8        BASE REG FOR PRINT LINE AREA\n***********************************************************************\n*                                                                     *\n*   INPUT:                                                            *\n*        R1    POINTER TO DATA AREA TO BE DUMPED                      *\n*        R0    OFFSET AND LENGTH OF AREA TO DUMP (2 BYTES EACH)       *\n*              (OFFSET IS USED FOR PRINT DISPLACEMENT FIELD ONLY)     *\n*              (AS AN EXAMPLE, THE DUMP OF A JCT IS MOST USEFUL       *\n*              IF THE OFFSET IS SET TO THE LENGTH OF ITS              *\n*              ASSOCIATED IOB)                                        *\n*                                                                     *\n***********************************************************************\n         LR    R6,R1          POINTER TO START OF DATA AREA\n         LR    R3,R0          PRINT OFFSET FOR AREA\n         SRL   R3,16          MOVE TO PROPER POSITION\n         LR    R4,R0          LENGTH TO DUMP\n         SLL   R4,16          THROW AWAY OFFSET\n         SRL   R4,16          MOVE LENGTH TO PROPER POSITION\n***********************************************************************\n*                                                                     *\n*   FORMAT THE AREA                                                   *\n*                                                                     *\n***********************************************************************\n         QHEAD QBLANK,X'04'   BLANK THE TITLE LINE                GP@P6\n         LA    R5,WORKLINE    POINT TO LINE IN WORK AREA\n         ST    R5,QDMSGA      STORE ADDR OF PRINT LINE\n         MVC   QDMLNG,=H'80'  LENGTH OF MESSAGE\n         CLC   QDLNELEN,=H'132' LONG ENOUGH FOR DOUBLE LINE?\n         BL    *+4+6          NO, SKIP RESET OF LENGTH\n         MVC   QDMLNG,=H'132' LENGTH OF MESSAGE\n         SPACE 1\nLOOP     MVC   WORKLINE,QBLANK  BLANK THE WORK AREA\n         STH   R3,QDWORD      GET OFFSET\n         UNPK  OFFSET(5),QDWORD(3) CONVERT TO HEX\n         MVI   OFFSET+L'OFFSET,C' ' CLEAR GARBAGE BYTE\n         TR    OFFSET,TABLEP  TRANSLATE TO PRINTABLE CHARACTERS\n         SPACE 1\n         LR    R2,R6          POINTER TO DATA AREA\n         LA    R1,4           NUMBER OF WORDS IN LINE AREA\n         LA    R14,O1         POINTER TO FIRST OUTPUT AREA\n         LA    R15,P1         POINTER TO EBCDIC AREA\n         MVI   PS1,C'*'       SET STARS\n         MVI   PS2,C'*'       SET STARS\n         CLC   QDLNELEN,=H'132' SHORT LINES?\n         BL    LOOP1          YES, SKIP SETTING ALTERNATE PRINT AREA\n         MVI   PS1,C' '       FIX OTHER FLAG\n         MVI   PS2,C' '       FIX OTHER FLAG\n         LA    R15,P1A        ALTERNATE EBCDIC AREA\n         MVI   PS1A,C'*'      SET STARS\n         MVI   PS2A,C'*'      SET STARS\n         SPACE 1\nLOOP1    UNPK  0(9,R14),0(5,R2)  UNPACK DATA TO PRINT LINE\n         TR    0(8,R14),TABLEP TRANSLATE TO PRINTABLE CHARACTERS\n         MVI   8(R14),C' '    CLEAR WASTE BYTE\n         MVC   0(4,R15),0(R2) COPY DATA TO PRINT AREA\n         TR    0(4,R15),PRTAB FIX UNPRINTABLES\n         LA    R2,4(,R2)      NEXT DATA AREA\n         LA    R3,4(,R3)      BUMP OFFSET\n         LA    R14,9(,R14)    NEXT HEX AREA\n         LA    R15,4(,R15)    NEXT PRINT AREA\n         SH    R4,=H'4'       DROP BY PROCESSED LENGTH\n         BNP   PRINT1\n         BCT   R1,LOOP1       LOOP FOR ALL FOUR WORDS\n         SPACE 1\n         CLC   QDLNELEN,=H'132' SHORT LINES?\n         BL    PRINT1         YES, PRINT WHAT WE HAVE\n         LA    R14,O5         POINT TO OUTPUT AREA\n         LA    R15,P5A        POINT TO OUTPUT AREA\n         LA    R1,4           NUMBER OF WORDS\n         SPACE 1\nLOOP2    UNPK  0(9,R14),0(5,R2)  UNPACK DATA TO PRINT LINE\n         TR    0(8,R14),TABLEP TRANSLATE TO PRINTABLE CHARACTERS\n         MVI   8(R14),C' '    CLEAR WASTE BYTE\n         MVC   0(4,R15),0(R2) COPY DATA TO PRINT AREA\n         TR    0(4,R15),PRTAB FIX UNPRINTABLES\n         LA    R2,4(,R2)      NEXT DATA AREA\n         LA    R3,4(,R3)      BUMP OFFSET\n         LA    R14,9(,R14)    NEXT HEX AREA\n         LA    R15,4(,R15)    NEXT PRINT AREA\n         SH    R4,=H'4'       DROP BY PROCESSED LENGTH\n         BNP   PRINT1\n         BCT   R1,LOOP2       LOOP FOR ALL FOUR WORDS\n         SPACE 1\nPRINT1   L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        GO TO IT\n         LR    R15,R6         ADDR OF DATA JUST DUMPED\n         LR    R6,R2          ADDRESS OF NEXT TO DUMP\n         SR    R2,R15         LENGTH JUST DUMPED\n         BCTR  R2,0           DROP FOR EXECUTE\n         SPACE 1\nSKIP     DS    0H\n         LTR   R4,R4          TEST REMAINING LENGTH\n         BNP   STOP           YES. GO HOME.\n         EX    R2,CLC         IS THIS RECORD THE SAME AS PREVIOUS?\n         BNE   LOOP           NO, PRINT IT\n         LA    R6,1(R2,R6)    BUMP TO NEXT AREA\n         LA    R3,1(R2,R3)    BUMP OFFSET\n         SR    R4,R2          DROP BY LENGTH DUMPED\n         BCTR  R4,0           FIX FOR EXECUTE STUFF\n         B     SKIP           SKIP PRINTING DUPS\n         SPACE 1\nCLC      CLC   0(*-*,R15),0(R6)  TEST FOR SAME DATA\n***********************************************************************\n*                                                                     *\n*   RETURN                                                            *\n*                                                                     *\n***********************************************************************\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\n* TABLE TO REMOVE UNPRINTABLES\nPRTAB    DC    CL64' '\n         DC    192AL1(*-PRTAB)\n* TABLE FOR HEX UNCONVERT\nTABLEP   EQU   *-240\n         DC    C'0123456789ABCDEF'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nWORK     DSECT ,\nWORKLINE DS    CL132          LINE TO PRINT\n         ORG   WORKLINE       BACK UP TO WORK LINE\nOFFSET   DS    CL4            OFFSET INTO AREA\n         DS    XL3            SPACER\nO1       DS    CL8            OUTPUT HEX AREA\n         DS    X              SPACER\nO2       DS    CL8            OUTPUT HEX AREA\n         DS    X              SPACER\nO3       DS    CL8            OUTPUT HEX AREA\n         DS    X              SPACER\nO4       DS    CL8            OUTPUT HEX AREA\n         DS    XL3            SPACER\nO5       DS    CL8            OUTPUT HEX AREA\n         DS    X              SPACER\nO6       DS    CL8            OUTPUT HEX AREA\n         DS    X              SPACER\nO7       DS    CL8            OUTPUT HEX AREA\n         DS    X              SPACER\nO8       DS    CL8            OUTPUT HEX AREA\n         DS    XL2            SPACER\nPS1A     DS    C              STAR FOR PRINT AREA\nP1A      DS    CL4            PRINT AREA\nP2A      DS    CL4            PRINT AREA\nP3A      DS    CL4            PRINT AREA\nP4A      DS    CL4            PRINT AREA\nP5A      DS    CL4            PRINT AREA\nP6A      DS    CL4            PRINT AREA\nP7A      DS    CL4            PRINT AREA\nP8A      DS    CL4            PRINT AREA\nPS2A     DS    C              STAR FOR PRINT AREA\n         ORG   O5-1           BACK UP FOR SHORT LINES\nPS1      DS    C              STAR FOR PRINT AREA\nP1       DS    CL4            PRINT AREA\nP2       DS    CL4            PRINT AREA\nP3       DS    CL4            PRINT AREA\nP4       DS    CL4            PRINT AREA\nPS2      DS    C              STAR FOR PRINT AREA\n         ORG   ,              BACK TO NORMAL ADDRESSING\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INIT": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x06\\x00\\x00\\x01\\x02\\x15?\\x01\\x02 /\\x19\\x19\\x02X\\x02\\x14\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.06", "flags": 0, "createdate": "2002-06-02T00:00:00", "modifydate": "2002-07-21T19:19:00", "lines": 600, "newlines": 532, "modlines": 0, "user": "GREG"}, "text": "INIT     QSTART 'QUEUE COMMAND - INITIALIZATION ROUTINES'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*            (3) RNB03 - IF RACF OPTION IS SET, AND IF AUTHORIZED,    *\n*                        AND IF QNEWUSR IS NON-NULL, CHANGE ACEEUSER  *\n*                        SO USER WILL BE AUTHORIZED TO OPEN CKPT/SPOOL*\n***********************************************************************\n         GBLB  &QSP           MVS/SP OPTION                       UF020\n         GBLB  &QDBC          DBC    OPTION                       UF024\n         GBLB  &QRACF         RACF OPTION                         RNB03\n         GBLB  &QRNB          RNB OPTION FLAG                     RNB05\n***********************************************************************\n*                                                                     *\n*   LOAD QCOMMON                                                      *\n*                                                                     *\n***********************************************************************\n*\n****\n*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,\n****               THIS IS THE ONLY REFERENCE TO IT.\n*\n         L     R11,=V(QCOMMON) ADDR OF QCOMMON                    UF002\n         LTR   R11,R11        SEE IF LINKED IN                    UF002\n         BNZ   LOADED         YES, CONTINUE                       UF002\n         SPACE 1                                                  UF002\n         LOAD  EP=QUEUECMN    QUEUE COMMON AREA\n         LR    R11,R0         ADDR OF QCOMMON\n         SPACE 1                                                  UF002\nLOADED   DS    0H                                                 UF002\n         L     R1,4(R13)      PREVIOUS SAVE AREA\n         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA\n         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON\n         USING QDAIR,R10      BASE REG FOR DAIR WORK\n         L     R10,QVDAIR     LOAD BASE REG\n         USING QCKPT,R9       BASE REG FOR CKPT WORK\n         L     R9,QVCKPT      LOAD BASE REG\n         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK\n         L     R8,QVDSPL      LOAD BASE REG\n***********************************************************************\n*                                                                     *\n*   DETERMINE APF AUTHORIZATION STATUS                GP@P6 JUNE 2002 *\n*                                                                     *\n***********************************************************************\n         TESTAUTH FCTN=1\n         LTR   R15,R15        APF AUTHORIZED?\n         BNZ   AUTHDONE       NO\n         OI    QFLAG1,QFLG1APF\nAUTHDONE DS    0H\n***********************************************************************\n*                                                                     *\n*   VERIFY PSCB ADDRESS                               GP@P6 JULY 2002 *\n*                                                                     *\n***********************************************************************\n         USING CPPL,R2        ADDR OF CPPL IS IN R2\n         USING PSA,0\n         L     R3,PSATOLD     POINT TO THE CURRENT TASK\n         USING TCB,R3\n         L     R3,TCBJSCB     POINT TO THE JOB STEP CONTROL BLOCK\n         DROP  R3\n         USING JSCB,R3\n         L     R3,JSCBPSCB    POINT TO THE PROTECTED STEP CONTROL BLOCK\n         DROP  R3\n         C     R3,CPPLPSCB    CORRECT PSCB ADDRESS SUPPLIED?\n         BE    CORECTPL       YES\n         ST    R3,CPPLPSCB    NO, CORRECT IT\n         TM    CPPLCBUF,X'80' WAS QUEUE CALLED?\n         BO    CALLEDPL       YES, NO WONDER THE CPPL IS WRONG\n*                             NO, THE PARAMETER LIST HAS BEEN HACKED\n         WTO   '*** QUEUE PARAMETER LIST ERROR ***',ROUTCDE=(9,11)\n         ABEND 913            ABORT\nCALLEDPL L     R3,48(,R3)     POINT TO THE RELOGON BUFFER\n         L     R3,256(,R3)    POINT TO THE ENVIRONMENT CONTROL TABLE\n         ST    R3,CPPLECT     SUPPLY CORRECT ECT ADDRESS\n         OI    CPPLECT,X'80'  FLAG LAST PARAMETER OF THE CPPL\nCORECTPL DS    0H\n***********************************************************************\n*                                                                     *\n*   MOVE PARMS FROM CPPL TO DAPL                                      *\n*                                                                     *\n***********************************************************************\n         MVC   DAPLUPT,CPPLUPT USER PROFILE TABLE\n         MVC   DAPLPSCB,CPPLPSCB PROTECTED STORAGE CNTL BLK\n         MVC   DAPLECT,CPPLECT ENVIRONMENT CNTL TABLE\n         AIF   (&QRNB).RNB02      SKIP IF AT RNB                  RNB02\n******************************************************************UF010\n*                                                                 UF010\n*   CHECK PSCB FOR OPERATOR AUTHORITY                             UF010\n*                                                                 UF010\n******************************************************************UF010\n         L     R1,CPPLPSCB    ADDRESS OF PSCB                     UF010\n         USING PSCB,R1        ADDRESSING FOR PSCB                 UF010\n         TM    PSCBATR1,PSCBCTRL  TEST FOR OPERATOR AUTHORITY     UF010\n         BZ    NOTOPER        NO, SKIP THIS                       UF010\n         OI    QFLAG1,QFLG1OPR    SET OPER AUTH                   UF010\n         OI    QXAUTH,1           SET PRIV AUTH                   UF010\n         AIF   (NOT &QDBC).NODBC1 SKIP IF DBC NOT INSTALLED       UF024\n******************************************************************UF024\n*                                                                 UF024\n*   IF USER HAS OPER AUTHORITY, ESTABLISH ESTAE ENVIRONMENT       UF024\n*                                                                 UF024\n******************************************************************UF024\n         LOAD  EP=DBC,ERRET=NOTOPER  LOAD ESTAE ROUTINE           UF024\n         LR    R3,R0          ADDR OF ROUTINE                     UF024\n         ESTAE (R3)           CREATE THE ESTAE                    UF024\n         OI    QFLAG1,QFLG1DBC  INDICATE NEED TO DELETE AT TERM   UF024\n.NODBC1  ANOP                                                     UF024\n.RNB02   ANOP                                                     RNB02\nNOTOPER  DS    0H                                                 UF010\n***********************************************************************\n*                                                                     *\n*   FIND THE CHECKPOINT VOLUME                        GP@P6 JULY 2002 *\n*                                                                     *\n***********************************************************************\n         L     R3,16          POINT TO CVT\n         USING CVTDSECT,R3\n         L     R3,CVTJESCT    POINT TO JESCT\n         DROP  R3\n         USING JESCT,R3\n         L     R3,JESSSCT     POINT TO SSCT\n         DROP  R3\n         USING SSCT,R3\n         L     R3,SSCTSSVT    POINT TO SSVT\n         DROP  R3\n         USING SSVT,R3\n         MVC   DA08SER(6),$SVCHKPT\n         DROP  R3\n***********************************************************************\n*                                                                     *\n*   PROCESS COMMAND OPERAND                                           *\n*                                                                     *\n***********************************************************************\n         L     R1,CPPLCBUF    ADDR OF COMMAND BUFFER\n         LH    R3,0(R1)       LENGTH OF COMMAND BUFFER\n         LH    R4,2(R1)       OFFSET TO FIRST DATA BYTE\n         LA    R1,4(R1,R4)    FIRST DATA BYTE\n         SR    R3,R4          SUBTRACT OFFSET FROM LENGTH\n         SH    R3,=H'4'       SUBTRACT OVERHEAD\n         SH    R3,=H'1'       IS LENGTH ZERO?\n         BM    SKIP           YES. SKIP IT.\n         EX    R3,OCBUF       TRANSLATE TO UPPER CASE\n         CLC   =C'CKPT(',0(1) IS REQUEST FOR CKPT?\n         BE    CKPT           YES. DO IT.\n         MVC   QDREPLY,QBLANK BLANK THE REPLY LINE\n         CH    R3,=H'62'      IS LENGTH OVER 63?\n         BNH   OK             NO. USE IT.\n         LA    R3,62          USE MAXIMUM LENGTH\nOK       EX    R3,MVCBUF      MOVE THE DATA\n         LA    R3,1(R3)       INCREMENT TO TRUE LENGTH\n         STH   R3,QDRLNG      STORE REPLY LENGTH\n***********************************************************************\n*                                                                     *\n*   LOCATE LOGON ID, MOVE TO QLOGON                                   *\n*                                                                     *\n***********************************************************************\nSKIP     L     R1,16          ADDR OF CVT\n         L     R1,0(R1)       ADDR OF DISPATCH QUEUE\n         L     R1,12(R1)      ADDR OF CURRENT ASCB\n         L     R1,176(R1)     ADDR OF JOBNAME\n         MVC   QLOGON,0(R1)   MOVE JOBNAME TO QLOGON\n***********************************************************************\n*                                                                     *\n*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *\n*                                                                     *\n***********************************************************************\n         GETMAIN R,LV=65536\n         ST    R1,QGETA1      SAVE START ADDR OF GETMAIN\n         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE\n         A     R1,=F'65536'   END OF TABLE\n         ST    R1,QCEND\n***********************************************************************\n*                                                                     *\n*   ALLOCATE HASPCKPT                                                 *\n*                                                                     *\n***********************************************************************\n         MVC   DA08DDN,=CL8'HASPCKPT' DDNAME FOR ALLOCATE\n         MVC   DA08PDSN,=A(DSNCKPT) DSNAME FOR ALLOCATE\n         MVI   DAIRFLAG,X'08' REQUEST ALLOCATE FUNCTION\n         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *\n*                                                                     *\n***********************************************************************\n         AIF   (NOT &QRACF).RNB03B                                RNB03\n**       TESTAUTH FCTN=1             APF-AUTHORIZED?              RNB03\n**       LTR   R15,R15                                            RNB03\n**       BNZ   RNB03A                /NO  - CAN'T CHG ACEEUSER    RNB03\n         TM    QFLAG1,QFLG1APF       APF-AUTHORIZED?           GP RNB03\n         BNO   RNB03A                /NO  - CAN'T CHG ACEEUSER GP RNB03\n*                                    /YES -                       RNB03\n         RACSTAT ,                   IS RACF UP?                  RNB03\n         LTR   R15,R15                                            RNB03\n         BNZ   RNB03A                /NO  - CAN'T CHG ACEEUSER    RNB03\n*                                    /YES -                       RNB03\n         CLI   QNEWUSR,0             IS THERE A NEW USERID TO USE?RNB03\n         BE    RNB03A                /NO  - CAN'T CHG ACEEUSER    RNB03\n*                                    /YES - CHANGE ACEEUSER TO    RNB03\n*                                           ALLOW ACCESS TO THE   RNB03\n*                                           SPOOL/CKPT DATA SETS  RNB03\n         L     R2,CVTPTR             CVT                          RNB03\n         USING CVT,R2                #####                        RNB03\n         L     R2,CVTTCBP            TCB WORDS                    RNB03\n         L     R2,12(,R2)            CURRENT ASCB                 RNB03\n         USING ASCB,R2               #####                        RNB03\n         L     R2,ASCBASXB           ASXB                         RNB03\n         USING ASXB,R2               #####                        RNB03\n         ICM   R2,15,ASXBSENV        ACEE                         RNB03\n         BZ    RNB03A                FORGET IT IF NO ACEE         RNB03\n         USING ACEE,R2               #####                        RNB03\n         CLC   =C'ACEE',ACEEACEE     REALLY AN ACEE?              RNB03\n         BNE   RNB03A                /NO  - FORGET IT             RNB03\n         MVC   QUSRSAV,ACEEUSER      /YES - SAVE CURRENT USERID   RNB03\n         STAX  DEFER=YES             DON'T ALLOW ATTENTION'S      RNB03\n         MODESET KEY=ZERO            GET KEY ZERO TO UPDATE ACEE  RNB03\n         MVC   ACEEUSER,QNEWUSR      SET NEW USERID               RNB03\n         MODESET KEY=NZERO           BACK TO USER KEY             RNB03\nRNB03A   EQU   *                                                  RNB03\n.RNB03B  ANOP                                                     RNB03\n         OPEN  MF=(E,HOCKPT)  OPEN HASPCKPT\n         L     R2,QCSTART     USE TABLE AREA FOR IOAREA\n         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS\n         READ  HDECB1,SF,,(R2),MF=E READ FIRST RECORD\n         CHECK HDECB1\n***********************************************************************\n*                                                                     *\n*   COMPUTE OFFSET TO FIRST PDDB IN IOT                               *\n*                                                                     *\n***********************************************************************\n         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT\n         AIF   (&QSP).QSP1                                        UF020\n         LH    R5,$NUMTGV     NUMBER OF TRACK GROUPS PER VOLUME\n         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8\n         SRL   R5,3           DIVIDE BY 8\n         SR    R0,R0          ZERO OUT R0\n         IC    R0,$NUMDA      NUMBER OF SPOOL VOLUMES\n         MR    R4,R0          LENGTH OF TRACK GROUP MAP IN R5\n         AGO   .QSP2                                              UF020\n.QSP1    ANOP                                                     UF020\n         LH    R5,$NUMTG      NUMBER OF TRACK GROUPS PER VOLUME   UF020\n         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8           UF020\n         SRL   R5,3           DIVIDE BY 8                         UF020\n.QSP2    ANOP                                                     UF020\n         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP\n         LA    R5,IOTTGMAP-IOTSTART+TGMAP-TGMDSECT+3(R5) OFFSET\n         N     R5,=F'-4'      ROUND TO FULL WORD BOUNDARY\n         ST    R5,QCPDDB1     SAVE OFFSET TO FIRST PDDB IN IOT\n         AIF   (NOT &QSP).QSP3                                    UF020\n***********************************************************************\n*                                                                     *\n*   COMPUTE NUMBER OF JIX BLOCKS ON CKPT                              *\n*                                                                     *\n***********************************************************************\n         LH    R5,$NUMJBNO    NUMBER OF JOB NUMBERS               UF020\n         LA    R5,1(,R5)       PLUS 1 FOR HEADER                  UF020\n         SLL   R5,1           TIMES LENGTH OF 2                   UF020\n         LA    R5,4095(R5)    PREPARE TO ROUND                    UF020\n         SRL   R5,12          DIVIDE BY 4096                      UF020\n         STH   R5,QCJIXL      NUMBER OF BLOCKS FOR JIX            UF020\n.QSP3    ANOP                                                     UF020\n***********************************************************************\n*                                                                     *\n*   COMPUTE NUMBER OF JQE BLOCKS ON CKPT                              *\n*                                                                     *\n***********************************************************************\n         LH    R6,$MAXJOBS    NUMBER OF JQES\n         LA    R6,1(,R6)       PLUS 1 FOR EYE-CATCHER\n         MH    R6,=AL2(JQELNGTH) MULTIPLY BY LENGTH OF JQE\n         LA    R6,4095(R6)    PREPARE TO ROUND\n         SRL   R6,12          DIVIDE BY 4096\n         STH   R6,QCJQTL      NUMBER OF BLOCKS FOR JQES\n***********************************************************************\n*                                                                     *\n*   COMPUTE NUMBER OF JOT BLOCKS IN CKPT                              *\n*                                                                     *\n***********************************************************************\n         LH    R3,$NUMJOES    NUMBER OF JOES\n         LA    R3,NJOTPRFX(,R3) ADJUSTED LENGTH OF JOT PREFIX\n         MH    R3,=AL2(JOESIZE) MULTIPLY BY LENGTH OF JOE\n         LA    R3,4095(R3) PREPARE TO ROUND\n         SRL   R3,12          DIVIDE BY 4096\n         STH   R3,QCJOTL      NUMBER OF BLOCKS FOR JOT\n***********************************************************************\n*                                                                     *\n*   LOAD NODE MEMBER SYSTEM IDENTIFIERS             GP@P6 2002-06-02  *\n*                                                                     *\n***********************************************************************\n         LH    R0,$QSENO      GET NUMBER OF MEMBERS IN NODE\n         LA    R4,$SAVEEND    POINT TO FIRST QSE\n         USING QSEDSECT,R4\nSIDQSELP SLR   R1,R1          CLEAR FOR INSERT\n         IC    R1,QSESIBSY    GET SYSTEM NUMBER\n         SLA   R1,3           MULTIPLY BY 8 FOR INDEX\n         LA    R1,QSYSID(R1)  POINT TO QCOMMON SYSTEM ID ENTRY\n         MVC   0(4,R1),QSESID SET SYSTEM IDENTIFIER\n         LA    R4,QSELEN(,R4) POINT TO NEXT QSE\n         BCT   R0,SIDQSELP\n         DROP  R4             QSEDSECT\n***********************************************************************\n*                                                                     *\n*   COMPUTE TOTAL LENGTH OF QSES                                      *\n*                                                                     *\n***********************************************************************\n         LA    R4,QSELEN      QSE LENGTH\n         MH    R4,$QSENO      MULTIPLY LENGTH TIMES NUMBER OF QSES\n         AIF   (NOT &QSP).QSP5                                    UF020\n         ALR   R4,R5          ADD ONE BYTE FOR EACH JIX BLOCK     UF020\n******************************************************************UF020\n*                                                                 UF020\n*   COMPUTE NUMBER OF MSQ BLOCKS ON CKPT                          UF020\n*                                                                 UF020\n******************************************************************UF020\n         LH    R1,$NUMRJE     NUMBER OF REMOTES                   UF020\n         MH    R1,=Y(3)       TIMES LENGTH OF 3                   UF020\n         LA    R1,3(,R1)       PLUS HEADER LENGTH                 UF020\n         LA    R1,4095(R1)    PREPARE TO ROUND                    UF020\n         SRL   R1,12          DIVIDE BY 4096                      UF020\n         ALR   R4,R1          ADD 1 BYTE FOR EACH BLOCK           UF020\n******************************************************************UF020\n*                                                                 UF020\n*   COMPUTE NUMBER OF RSO BLOCKS ON CKPT                          UF020\n*                                                                 UF020\n******************************************************************UF020\n         LH    R1,$NUMRJE     NUMBER OF REMOTES                   UF020\n         LA    R1,4095(R1)    PREPARE TO ROUND                    UF020\n         SRL   R1,12          DIVIDE BY 4096                      UF020\n         ALR   R4,R1          ADD 1 BYTE FOR EACH BLOCK           UF020\n******************************************************************UF020\n*                                                                 UF020\n*   COMPUTE NUMBER OF LCK BLOCKS ON CKPT                          UF020\n*                                                                 UF020\n******************************************************************UF020\n*        LH    R1,$NUMLCK     NUMBER OF LOAD CKPT ELEMENTS        UF020\n         LA    R1,9*7         NUMBER OF LOAD CKPT ELEMENTS        UF020\n         MH    R1,=Y(LCKSIZE) TIMES LENGTH OF EACH                UF020\n         LA    R1,4095(R1)    PREPARE TO ROUND                    UF020\n         SRL   R1,12          DIVIDE BY 4096                      UF020\n         ALR   R4,R1          ADD 1 BYTE FOR EACH BLOCK           UF020\n.QSP5    ANOP                                                     UF020\n         ALR   R4,R6          ADD ONE BYTE FOR EACH JQE BLOCK\n         ALR   R4,R3          ADD ONE BYTE FOR EACH JOT BLOCK\n***********************************************************************\n*                                                                     *\n*   COMPUTE HASPACE BUFFER SIZE                                       *\n*                                                                     *\n***********************************************************************\n         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE\n         STH   R5,HASPACE+62  STORE IN DCB\n         STH   R5,HDECB2+6    STORE IN DECB\n         LA    R5,63(R5)      PREPARE TO ROUND\n         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY\n***********************************************************************\n*                                                                     *\n*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *\n*                                                                     *\n***********************************************************************\n         LR    R14,R5         HASPACE BUFFER SIZE\n         MH    R14,=H'3'      3 BUFFERS\n         LA    R1,1(R6,R3)    NUMBER OF BLOCKS IN CKPT DS\n         AIF   (NOT &QSP).QSP6                                    UF020\n         AH    R1,QCJIXL      ADD NUMBER OF JIX BLOCKS            UF020\n.QSP6    ANOP                                                     UF020\n         ST    R1,QCJOTL      STORE RECORD COUNT\n         SLL   R1,12          MULTIPLY BY 4096\n         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP\n         ST    R0,QGETL2      SAVE LENGTH OF GETMAIN AREA\n         GETMAIN R,LV=(0)     OBTAIN BUFFERS\n         ST    R1,QGETA2      SAVE ADDRESS OF GETMAIN AREA\n         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC\n         AH    R1,=H'4096'    INCREMENT\n         AIF   (NOT &QSP).QSP7                                    UF020\n         ST    R1,QCJIXA      BUFFER FOR JIX BLOCKS               UF020\n         LH    R15,QCJIXL     NUMBER OF JIX BLOCKS                UF020\n         SLL   R15,12         TIMES 4096                          UF020\n         AR    R1,R15         INCREMENT                           UF020\n.QSP7    ANOP                                                     UF020\n         ST    R1,QCJQTA      BUFFER FOR JQE BLOCKS\n         SLL   R6,12          MULTIPLY BY 4096\n         AR    R1,R6          INCREMENT\n         ST    R1,QCJOTA      BUFFER FOR JOE BLOCKS\n         SLL   R3,12          MULTIPLY BY 4096\n         AR    R1,R3          INCREMENT\n         ST    R1,QCJCTA      BUFFER FOR JCT\n         AR    R1,R5          INCREMENT\n         ST    R1,QCIOTA      BUFFER FOR IOT\n         AR    R1,R5          INCREMENT\n         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS\n         AIF   (NOT &QSP).QSP8                                    UF020\n         LA    R1,$JQHEADS+$JQHEADL-$SAVEBEG OFFSET 1ST JQE HEAD  UF020\n         AGO   .QSP9                                              UF020\n.QSP8    ANOP                                                     UF020\n         LA    R1,$JQHEADS+2-$SAVEBEG OFFSET TO FIRST JQE HEADER\n.QSP9    ANOP                                                     UF020\n         A     R1,QCJQTL      BASE OF FIRST CKPT REC\n         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER\n***********************************************************************\n*                                                                     *\n*   ALLOCATE AND OPEN HASPACE                                         *\n*                                                                     *\n***********************************************************************\n         LA    R3,$SAVEEND(R4) ADDR OF DA CKPT INFO\n.EXIT    ANOP\n         MVC   DA08DDN,=CL8'HASPACE' DDNAME FOR ALLOCATE\n         MVC   DA08PDSN,=A(DSNSPACE) DSNAME FOR ALLOCATE\n         LA    R4,9           MAX POSSIBLE SPOOLS FOR QUEUE       UF020\n         AIF   (&QSP).QSP10                                       UF020\n         IC    R4,$NUMDA      MAXIMUM NUMBER OF SPOOL VOLUMES\n.QSP10   ANOP                                                     UF020\n         LA    R7,QCDCBL      LENGTH OF HASPACE DCB\n         MR    R6,R4          COMPUTE LENGTH OF DCB POOL\n         GETMAIN R,LV=(R7)    OBTAIN DCB POOL\n         ST    R7,QGETL3      SAVE LENGTH OF GETMAIN\n         ST    R1,QGETA3      SAVE ADDRESS OF GETMAIN\n         LR    R7,R1          SAVE ADDR OF DCB POOL\n         LA    R8,QCSPOOLS-4  ADDR OF OPEN LIST\n         SR    R6,R6          ACTUAL NUMBER OF SPOOL VOLUMES\n         MVC   DA08SER(5),$SPOOL PATTERN FOR VOLSER\nSPOOL1   LA    R5,DEVTAB      ADDR OF DEVICE CHARACTERISTICS TBL\n         CLI   0(R3),0        IS THIS VOLUME UNUSED?\n         BE    SPOOL4         YES. TRY NEXT.\nSPOOL2   CLI   0(R5),X'FF'    IS THIS THE END OF TABLE?\n         BE    ABORT          YES. UNSUPPORTED DEVICE TYPE.\n         CLC   0(1,R5),0(R3)  IS THIS A MATCH?\n         BE    SPOOL3         YES. GO WITH IT.\n         LA    R5,12(R5)      NEXT TABLE ENTRY\n         B     SPOOL2         TRY NEXT ENTRY\nSPOOL3   MVC   150(2,R8),2(R5) MOVE TRK/CYL TO TRK/CYL LIST\n         MVC   DA08UNIT,4(R5) MOVE UNIT NAME\n         MVC   DA08SER+5(1),1(R3) LAST DIGIT OF VOLSER\n         LA    R6,1(R6)       INCREASE COUNT BY ONE\n         STC   R6,DA08DDN+7   UPDATE DDNAME\n         OI    DA08DDN+7,X'F0' MAKE IT A VALID NUMBER\n         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE\n         BALR  R14,R15        GO TO IT\n         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL\n         MVC   47(1,R7),DA08DDN+7 UPDATE THE DDNAME\n         ST    R7,4(R8)       STORE DCB ADDR IN OPEN LIST\n         LA    R7,QCDCBL(R7)  INCREMENT TO NEXT DCB\n         LA    R8,4(R8)       NEXT ENTRY IN OPEN LIST\nSPOOL4   LA    R3,6(R3)       NEXT VOLUME\n         BCT   R4,SPOOL1      BRANCH IF MORE VOLUMES.\n         OI    0(R8),X'80'    INDICATE END OF OPEN LIST\n         OPEN  MF=(E,QCSPOOLS) OPEN HASPACE\n         AIF   (NOT &QRACF).RNB03D                                RNB03\n         CLI   QUSRSAV,0           DID WE CHANGE ACEEUSER?        RNB03\n         BE    RNB03C              /NO  - SKIP THIS CODE          RNB03\n*                                  /YES - PUT USERID BACK         RNB03\n         L     R2,CVTPTR             CVT                          RNB03\n         USING CVT,R2                #####                        RNB03\n         L     R2,CVTTCBP            TCB WORDS                    RNB03\n         L     R2,12(,R2)            CURRENT ASCB                 RNB03\n         USING ASCB,R2               #####                        RNB03\n         L     R2,ASCBASXB           ASXB                         RNB03\n         USING ASXB,R2               #####                        RNB03\n         ICM   R2,15,ASXBSENV        ACEE                         RNB03\n         USING ACEE,R2               #####                        RNB03\n         MODESET KEY=ZERO            GET KEY ZERO TO UPDATE ACEE  RNB03\n         MVC   ACEEUSER,QUSRSAV      SET OLD USERID               RNB03\n         MODESET KEY=NZERO           BACK TO USER KEY             RNB03\n         STAX  DEFER=NO              ALLOW ATTENTION INTERRUPTS   RNB03\nRNB03C   EQU   *                                                  RNB03\n.RNB03D  ANOP                                                     RNB03\n***********************************************************************\n*                                                                     *\n*   GO HOME                                                           *\n*                                                                     *\n***********************************************************************\n         QSTOP\n***********************************************************************\n*                                                                     *\n*   PROCESS REQUEST FOR DIFFERENT UNIT AND VOL ON SYS1.HASPCKPT       *\n*                                                                     *\n***********************************************************************\n*\n*** FORMAT - QUEUE CKPT(UNIT,VOLSER)\n*\nCKPT     MVC   DA08UNIT(16),QBLANK BLANK THE UNIT AND VOLSER FIELDS\n         LA    R5,DA08UNIT    START OF UNIT FIELD\n         LA    R6,DA08SER     START OF VOLSER FIELD\n         SH    R3,=H'4'       SUBTRACT OVERHEAD FROM LENGTH\nCKPT1    CLI   5(R1),C','     IS THIS THE END OF UNIT FIELD?\n         BE    CKPT2          YES. PROCESS VOLSER NEXT.\n         MVC   0(1,R5),5(R1)  MOVE ONE BYTE OF UNIT NAME\n         LA    R5,1(R5)       ADD 1 TO RECEIVING ADDR\n         LA    R1,1(R1)       ADD 1 TO SENDING ADDR\n         BCT   R3,CKPT1       BRANCH IF NOT EXHAUSTED.\n         B     ABORT2         INVALID PARAMETERS.\nCKPT2    CLI   6(R1),C')'     IS THIS THE END OF VOLSER FIELD?\n         BE    CKPT3          YES. CONTINUE PROCESSING.\n         MVC   0(1,R6),6(R1)  MOVE ONE BYTE TO VOLSER\n         LA    R6,1(R6)       ADD ONE TO RECEIVING ADDR\n         LA    R1,1(R1)       ADD ONE TO SENDING ADDR\n         BCT   R3,CKPT2       BRANCH IF NOT EXHAUSTED.\n         B     ABORT2         INVALID PARAMETER.\nCKPT3    CLI   DA08UNIT,C' '  IS THERE A UNIT?\n         BE    ABORT2         NO. INVALID.\n         CLI   DA08SER,C' '   IS THERE A VOLSER?\n         BE    ABORT2         NO. INVALID.\n         CLI   DA08BLK,0      DID WE GO TOO FAR?\n         BE    SKIP           NO. EVERTHING LOOKS GOOD.\nABORT2   LA    R1,MESSAGE2    POINT TO THE MESSAGE                GP@P6\n         LA    R0,L'MESSAGE2  SET MESSAGE LENGTH                  GP@P6\n         TPUT  (1),(0),R      TELL THE USER                       GP@P6\n         ABEND 97,DUMP        QUIT\n***********************************************************************\n*                                                                     *\n*   UNSUPPORTED DEVICE TYPE. ABORT.                                   *\n*                                                                     *\n***********************************************************************\nABORT    LA    R1,MESSAGE     POINT TO THE MESSAGE                GP@P6\n         LA    R0,L'MESSAGE   SET MESSAGE LENGTH                  GP@P6\n         TPUT  (1),(0),R      TELL THE USER                       GP@P6\n         ABEND 98,DUMP        QUIT\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nOCBUF    OC    0(1,R1),QBLANK TRANSLATE COMMAND TO UPPER CASE\nMVCBUF   MVC   QDREPLY(1),0(R1) MOVE DATA TO REPLY\nDEVTAB   DC    X'0900',H'19',CL8'3330' DEVTYPE,TRK/CYL,DEVNAME\n         DC    X'0B00',H'30',CL8'3350'\n         DC    X'0D00',H'19',CL8'3330-1'\n         DC    X'0E00',H'15',CL8'3380  '\n         DC    X'0F00',H'15',CL8'3390  '\n         DC    X'FFFF'\n         DS    0F\nTIR3     DC    X'00000300'    POINT PAST SYNC RECORDS\nDSNCKPT  DC    H'13',CL44'SYS1.HASPCKPT'\nDSNSPACE DC    H'12',CL44'SYS1.HASPACE'\nMESSAGE  DC    C'UNSUPPORTED DEVICE TYPE SPECIFIED FOR SPOOL'\nMESSAGE2 DC    C'INVALID PARAMETER SPECIFIED - CKPT(UNIT,VOLSER)'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nINIT     CSECT ,                                                  UF023\n         GBLC  &VERSION\n&VERSION SETC  '0'\n         AIF   (NOT &QSP).QSP99A                                  UF020\n$MAXNODE EQU   1000           FOR SP2 $JOT DSECT                  UF020\n         AGO   .QSP99B                                            UF020\n.QSP99A  ANOP                                                     UF020\n$MAXNODE EQU   99             FOR NJE $JOT DSECT                  UF001\n.QSP99B  ANOP                                                     UF020\nSAVE     EQU   13             NEEDED FOR NJE $PCE                 UF001\n         $PCE  ,              NEEDED FOR NJE $HCT                 UF001\n         $JOE\n         $JOT\nNJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE\nBASE1    EQU   0\n$RPS     EQU   0\n$MSGID   EQU   0\n$DUPVOLT EQU   0\n$PRIOOPT EQU   0\n$PRTBOPT EQU   0\n$PRTRANS EQU   0\n$QSONDA  EQU   0\n         AIF   (NOT &QSP).QSP99                                   UF020\n*        EQUATES REQUIRED FOR $HCT EXPANSION                      UF020\nFF       EQU   X'FF'                                              UF020\n$CMBDEF  EQU   15                                                 UF020\n$JQEDEF  EQU   100                                                UF020\n$MAXDA   EQU   32                                                 UF020\n$MAXJBNO EQU   9999                                               UF020\n$SMFDEF  EQU   5                                                  UF020\n$TGDEF   EQU   3072                                               UF020\n*JCT      EQU   10                                         VBA01  UF020\n         $LCK  ,                                                  UF020\n.QSP99   ANOP                                                     UF020\nJCT      EQU    10                                         VBA01\n         $PSA   ,                                                 GP@P6\n         $CVT   ,                                                 GP@P6\n         $JESCT ,                                                 GP@P6\n         $SSCT  ,                                                 GP@P6\n         $SVT   ,                                                 GP@P6\n         $TCB   ,                                                 GP@P6\n         $JSCB  ,                                                 GP@P6\n         $BUFFER                                                  UF020\n         $JCT  ,                                                  UF020\n         $CAT  ,                                                  UF020\n         $TAB\n         $QSE\n         $PDDB                                                    UF021\n         $IOT\n         $TGM\n         $JQE\n         $HCT\n         IKJCPPL\n         IKJPSCB                                                  UF010\n         AIF   (NOT &QRACF).RNB03E                                RNB03\n         PUSH  PRINT                                              RNB03\n         PRINT NOGEN                                              RNB03\n         CVT   DSECT=YES                                          RNB03\n         IHAASCB ,                                                RNB03\n         IHAASXB ,                                                RNB03\n         IHAACEE ,                                                RNB03\n         POP   PRINT                                              RNB03\n.RNB03E  ANOP                                                     RNB03\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INITS": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\t\\x00\\x00\\x01\\x02\\x16o\\x01\\x02\\x18\\x8f C\\x00\\x98\\x00\\x8c\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.09", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2002-07-07T20:43:00", "lines": 152, "newlines": 140, "modlines": 0, "user": "GREG"}, "text": "INITS    QSTART 'QUEUE COMMAND - LIST INITIATORS COMMAND'\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART    GP@P6\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY AREA           GP@P6\n         L     R9,QVDSPL      LOAD BASE REG                       GP@P6\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n******************************************************************UF006\n*                                                                 UF006\n*   CALL - READ JES2 CHECKPOINT ROUTINE                           UF006\n*                                                                 UF006\n******************************************************************UF006\nCALLCKPT L     R15,=V(CKPT)   ADDR OF CKPT ROUTINE                UF006\n         BALR  R14,R15        GO TO IT                            UF006\n         L     R8,16          POINT TO CVT\n         USING CVTDSECT,R8\n***********************************************************************\n*                                                                     *\n*        FIND THE ACTIVE MAIN SUBSYSTEM SSVT                          *\n*                                                                     *\n***********************************************************************\n         L     R8,CVTJESCT    POINT TO JESCT\n         DROP  R8\n         USING JESCT,R8\n         L     R8,JESSSCT     POINT TO SSCT\n         DROP  R8\n         USING SSCT,R8\n         L     R8,SSCTSSVT    POINT TO SSVT\n         DROP  R8\n         USING SSVT,R8\n***********************************************************************\n*                                                                     *\n*        FIND THE ACTIVE MAIN SUBSYSTEM'S PITS                        *\n*                                                                     *\n***********************************************************************\n         L     R7,$SVPIT      POINT TO PITTABLE\n         LTR   R6,R7          TEST IF ANY PITS\n         BZ    NOPITS         NO, IGNORE COMMAND\n         BCTR  R6,0           SUBTRACT ONE\n         BCTR  R6,0           SUBTRACT ONE\n         SR    R0,R0          ZERO FOR INSERT\n         IC    R0,0(,R6)      INSERT NUMBER OF CLASSES\n         LR    R6,R0          COPY THE COUNT\n         IC    R6,$SVMAXCL    NUMBER OF CLASSES AFTER OZ35996     UF027\n         USING PITDSECT,R7\n         QHEAD INITHD,X'24',TYP=QDXI  HEADING IN GREEN REVERSE    GP@P6\n***********************************************************************\n*                                                                     *\n*        BUILD THE MESSAGE(S) DESCRIBING THE PITS                     *\n*                                                                     *\n***********************************************************************\nBLDMSG   MVC   QDMSG,QBLANK   BLANK THE AREA\n         MVC   INIT#(2),PITPATID MOVE IN PIT ID\n         LR    R1,R6          COPY THE LENGTH\n         BCTR  R1,0           SUBTRACT ONE\n         EX    R1,MVCLAS      MOVE THE CLASSES\n         MVI   QDLNCODE,X'01' BLUE FOR NOT ACCEPTING WORK         GP@P6\n         TM    PITSTAT,PITHOLDA+PITHOLD1 TEST FOR DRAINED\n         BNZ   HOLDPIT        YES\n         TM    PITSTAT,PITHALTA+PITHALT1 TEST FOR HALTED\n         BNZ   HALTPIT        YES\n         MVC   STATUS,=CL8' ACTIVE '\n         TM    PITSTAT,PITBUSY TEST FOR BUSY\n         BO    ACTPIT         YES\n         MVI   QDLNCODE,X'05' TURQUOISE FOR READY FOR WORK        GP@P6\n         MVC   STATUS,=CL8'INACTIVE'\n         B     NEXTPIT        END OF MESSAGE LINE.\nMVCLAS   MVC   CLASSES(0),PITCLASS SET THE CLASSES\nHOLDPIT  MVC   STATUS,=CL8'DRAINED' SET STATUS\n         TM    PITSTAT,PITBUSY TEST FOR BUSY\n         BZ    NEXTPIT        NO\n         MVC   STATUS+5(3),=C'ING' SET STATUS\n         B     ACTPIT         YES\nHALTPIT  MVC   STATUS,=CL8' HALTED ' SET STATUS\n         TM    PITSTAT,PITBUSY TEST FOR BUSY\n         BZ    NEXTPIT        NO\n         MVC   STATUS+5(3),=C'ING' SET STATUS\nACTPIT   MVI   QDLNCODE,X'06' YELLOW FOR RUNNING WORK             GP@P6\n         L     R5,PITSJB      POINT TO THE SJB\n         USING SJBDSECT,R5\n         L     R1,SJBJQOFF    POINT TO JOB QUEUE OFFSET\n         A     R1,QCJQTA      POINT TO THE JQE\n         USING JQEDSECT,R1\n         CLC   JQEJNAME,SJBJOBNM TEST FOR RIGHT JOB\n         BNE   NEXTPIT        RIGHT JOB, GOOD\n         MVC   JOBNAME,SJBJOBNM MOVE IN JOBNAME\n         LH    R0,JQEJOBNO    LOAD JOB NUMBER\n         CVD   R0,CONVERT     GET THE DECIMAL VALUE\n         MVC   JOBNUM,ED5     GET THE CHARACTER VALUE\n         ED    JOBNUM,CONVERT+5 GET THE CHARACTER VALUE\n***********************************************************************\n*                                                                     *\n*        SEND THE MESSAGE DESCRIBING THE PIT                          *\n*                                                                     *\n***********************************************************************\nNEXTPIT  L     R7,PITNEXT     POINT TO NEXT PIT\n         DROP  R1,R5\n         AIF   (NOT &QPFK).XINOSEL                                GP@P6\n         TM    QFLAG1,QFLG1OPR+QFLG1APF                           GP@P6\n         BNO   XISELNOK       NOT OPER PRIV IN APF ENVIRONMENT    GP@P6\n         MVI   QDMSG,X'0B'    INPUT HIGH INTENSITY                GP@P6\n         MVI   QDMSG+1,C'.'   SUPPLY LEADER DOT                   GP@P6\n         MVI   QDMSG+2,X'0C'  OUTPUT LOW INTENSITY                GP@P6\nXISELNOK DS    0H                                                 GP@P6\n.XINOSEL ANOP                                                     GP@P6\n         MVC   QDMLNG,=H'80'  SET THE LENGTH\n         LA    R0,QDMSG       GET THE ADDRESS\n         ST    R0,QDMSGA      SET THE ADDRESS\n         L     R15,=V(DISPLAY) POINT TO THE ROUTINE\n         BALR  R14,R15        CALL THE ROUTINE\n         LTR   R7,R7          TEST FOR NEXT PIT\n         BNZ   BLDMSG         YES, GO DO IT\n***********************************************************************\n*                                                                     *\n*        END IT ALL                                                   *\n*                                                                     *\n***********************************************************************\nEND      QSTOP\nNOPITS   QTILT '***** NO PITS  TO DISPLAY *****'\nINITHD   DC    CL80'    INIT    STATUS   JOBNAME    NUMBER    CLASSES'\nED5      DC    X'402020202120'\n         LTORG\n***********************************************************************\n*                                                                     *\n*        DESCRIBE ALL THE DSECTS NEEDED BY THIS MODULE                *\n*                                                                     *\n***********************************************************************\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nINITS    CSECT ,                                                  UF023\n         $CVT\n         $JESCT\n         $SSCT\n         $SVT\n         $PIT\n         $DEB                                                     UF021\n         $SJB\n         $JQE\n         QCOMMON\n         ORG   QDMSG\n         DS    CL5\nINIT#    DS    CL2\n         DS    CL4\nSTATUS   DS    CL8\n         DS    CL2\nJOBNAME  DS    CL8\n         DS    CL3\nJOBNUM   DS    CL6\n         DS    CL4\nCLASSES  DS    C\nWORK     DSECT\n         DS    CL72\nCONVERT  DS    D\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCL": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02!_\\x01\\x020\\x8f!4\\x00\\x17\\x00\\x18\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-08-03T00:00:00", "modifydate": "2002-11-04T21:34:00", "lines": 23, "newlines": 24, "modlines": 0, "user": "GREG"}, "text": "JCL      QSTART 'QUEUE COMMAND - LIST THE JCL FOR A JOB'\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\n         MVC   QPOFFSET,=H'10' PRINT OFFSET FOR EACH RECORD\n         MVC   QPDSID,=H'3'   DSID OF DATASET TO BE PRINTED\n         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JLOG": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x04\\x00\\x00\\x01\\x02!/\\x01\\x020\\x8f!4\\x00Q\\x00Q\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.04", "flags": 0, "createdate": "2002-07-31T00:00:00", "modifydate": "2002-11-04T21:34:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "GREG"}, "text": "JLOG     QSTART 'QUEUE COMMAND - LIST THE JOBLOG MESSAGES FOR A JOB'\n         GBLB  &QRNB                                              RNB04\n         LCLB  &SAVB                                              GP@P6\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   DETERMINE IF JOB LOG IS AVAILABLE                                 *\n*                                                                     *\n***********************************************************************\n         USING PDBDSECT,R2    BASE REG FOR PDDB\n         USING IOTSTART,R3    BASE REG FOR IOT\n         L     R3,QCIOTA      LOAD BASE REG\nNEXTIOT  LR    R4,R3          BASE OF IOT\n         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB\n         LR    R2,R3          BASE OF IOT\n         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN JOT\nFINDDS   CLC   PDBDSKEY,=H'2' IS THIS THE JOB LOG\n         BE    FOUNDDS        YES. CONTINUE.\n         LA    R2,PDBLENG(R2) NO. LOOK AT NEXT PDDB\n         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB\n         BL    FINDDS         NO. TRY AGAIN\n         B     TILT\n&SAVB    SETB  (&QRNB EQ 1)                                       GP@P6\n&QRNB    SETB  1                                                  GP@P6\n         AIF   (&QRNB).RNB04A                                     RNB04\nFOUNDDS  CLC   PDBRECCT,=F'1' IS JOB LOG EMPTY\n         BE    TILT           YES, SAY SO\n         AGO   .RNB04B                                            RNB04\n.RNB04A  ANOP                                                     RNB04\n***********************************************************************\n* RNB CHANGES:                                                        *\n*          (1) RNB04 - ALLOW JOBLOG FOR JOBS THAT HAVE BEGUN EXECUTING*\n*                      BUT HAVEN'T FINISHED FIRST STEP YET. WILL ONLY *\n*                      SHOW JOB-STARTED MESSAGE.                      *\n***********************************************************************\nFOUNDDS  L     R3,QCJCTA      GET THE JCT                         RNB04\n         USING JCTSTART,R3    #####                               RNB04\n         OC    JCTXEQON,JCTXEQON  JOB EXECUTING OR EXECUTED?      RNB04\n         BZ    TILT2              /NO  - REALLY EMPTY             RNB04\n*                                 /YES - OK TO LIST IT            RNB04\n         DROP  R3                                                 RNB04\n.RNB04B  ANOP                                                     RNB04\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\n         MVC   QPOFFSET,=H'0' PRINT OFFSET FOR EACH RECORD\n         MVC   QPDSID,=H'2'   DSID OF DATASET TO BE PRINTED\n         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\n         AIF   (&QRNB).RNB04C                                     RNB04\nTILT     QTILT '*** JOBLOG IS NOT AVAILABLE ***'\n         AGO   .RNB04D                                            RNB04\n.RNB04C  ANOP                                                     RNB04\nTILT     QTILT '*** JOBLOG NOT FOUND ***'                         RNB04\nTILT2    QTILT '*** JOBLOG NOT AVAILABLE - JOB HAS NOT EXECUTED ***' 04\n.RNB04D  ANOP                                                     RNB04\n&QRNB    SETB  (&SAVB EQ 1)                                       GP@P6\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nJLOG     CSECT ,                                                  UF023\nJCT      EQU   0\n         $BUFFER                                                  UF020\n         $JQE\n         $TAB\n         $JCT\n         $PDDB\n         $IOT\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JMSG": {"ttr": 3086, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02!_\\x01\\x020\\x8f!4\\x00\\x17\\x00\\x18\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-08-03T00:00:00", "modifydate": "2002-11-04T21:34:00", "lines": 23, "newlines": 24, "modlines": 0, "user": "GREG"}, "text": "JMSG     QSTART 'QUEUE COMMAND - LIST THE SYSTEM MESSAGES FOR A JOB'\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\n         MVC   QPOFFSET,=H'0' PRINT OFFSET FOR EACH RECORD\n         MVC   QPDSID,=H'4'   DSID OF DATASET TO BE PRINTED\n         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LIST": {"ttr": 3088, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x02 /\\x01\\x02 /#9\\x00\\x84\\x00\\x84\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2002-07-21T00:00:00", "modifydate": "2002-07-21T23:39:00", "lines": 132, "newlines": 132, "modlines": 0, "user": "GREG"}, "text": "LIST     QSTART 'QUEUE COMMAND - PRINT A DATASET FROM SPOOL BY ID'\n         GBLB  &QACF2         IS ACF2 AUTH CHECKING TO BE DONE     FCI*\n         GBLB  &QRNB                                              RNB05\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING WORK,R13       BASE REG FOR TEMP WORK\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   ENSURE JOBNAME BEGINS WITH USER ID                                *\n*                                                                     *\n***********************************************************************\n         AIF   (&QRNB).RNB05A                                     RNB05\n         SPACE 1                                                  UF005\n         TM    QXAUTH,1       IS USER AUTHORIZED?                 UF005\n         BO    OKJOB          YES, ALLOW TO PROCEED               UF005\n         SPACE 1                                                  UF005\n.RNB05A  ANOP                                                     RNB05\n         L     R9,QCJCTA      ADDR OF JCT\n         USING JCTSTART,R9    BASE REG FOR JCT\n         LA    R2,7           MAXIMUM LENGTH OF USER ID\n         LA    R3,QLOGON+7    LAST BYTE OF USER ID\nLOOP     CLI   0(R3),C' '     IS THIS BYTE BLANK?\n         BNE   CHECK          NO. CONTINUE.\n         BCTR  R3,0           TRY PREVIOUS BYTE\n         BCT   R2,LOOP        TRY AGAIN\nCHECK    EX    R2,CLC         IS THE JOBNAME VALID?\n         AIF   (&QRNB).RNB05B                                     RNB05\n         AIF   (&QACF2).ACF1                                       FCI*\n         BE    OKJOB          YES, ALLOW TO PROCEED               GP@P6\n         CLI   QLOGON+7,C' '  \"USERID\" VALID?                     GP@P6\n         BNE   TILT2          NO. TILT.                            FCI*\n         CLC   JCTTSUID,QLOGON    NOTIFY TO THIS USER?            GP@P6\n         AGO   .ACF2                                               FCI*\n.ACF1    ANOP  ,                                                   FCI*\n         NOP   TILT2          ACF2 HAS ALREADY CHECKED AUTHORITY   FCI*\n.ACF2    ANOP  ,                                                   FCI*\n*        BNE   TILT2          NO. TILT.\n         AGO   .RNB05C                                            RNB05\n.RNB05B  ANOP                                                     RNB05\n         BE    OKJOB          /YES - GO CHECK DSID                RNB05\n         CLC   =C'PJS',QLOGON IS THIS A PJS USER?                 RNB05\n         BE    TILT2          INVALID JOB IF SO                   RNB05\n         CLC   QLOGON(*-*),JCTTSUID  DOES THE USERID              RNB05\n         EX    R2,*-6                MATCH THE NOTIFY ID?         RNB05\n         BE    OKJOB                 GOOD JOB IF SO               RNB05\n         CLC   =C'TEC',QLOGON        IS THIS A TEC USERID?        RNB05\n         BNE   TILT2                 INVALID JOB IF NOT           RNB05\n         CLC   =C'TEC',JCTJNAME      FOR A TEC USER, ALLOW LIST   RNB05\n         BE    OKJOB                 FOR ANY TEC JOB OR ANY JOB   RNB05\n         CLC   =C'TEC',JCTTSUID      WITH A TEC NOTIFY            RNB05\n         BE    OKJOB                                              RNB05\n         TM    JCTJOBFL,JCTSTCJB     ALSO ALLOW IF AN STC         RNB05\n         BZ    TILT2                                              RNB05\n.RNB05C  ANOP                                                     RNB05\nOKJOB    DS    0H                                                 UF005\n***********************************************************************\n*                                                                     *\n*   CHECK AND CONVERT THE DATASET ID NUMBER                           *\n*                                                                     *\n***********************************************************************\n         LH    R2,QLNG2       LENGTH OF DATASET ID FIELD\n         SH    R2,=H'1'       IS THE DATASET ID FIELD ZERO LENGTH?\n         BM    TILT           YES. QUIT.\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. QUIT.\n         EX    R2,PACK        PACK THE FIELD\n         CVB   R2,CONVERT     CONVERT TO BINARY\n         SPACE 1                                                  UF005\n         TM    QXAUTH,1       IS USER AUTHORIZED?                 UF005\n         BO    *+4+8          YES, ALLOW ANY DSID                 UF005\n         SPACE 1                                                  UF005\n         CH    R2,=H'101'     IS THE DATASET ID LESS THAN 101?\n         BL    TILT           YES. TILT.\n         STH   R2,QPDSID      STORE DATASET ID\n***********************************************************************\n*                                                                     *\n*   CHECK AND CONVERT THE PRINT OFFSET                                *\n*                                                                     *\n***********************************************************************\n         MVC   QPOFFSET,=H'0' DEFAULT TO ZERO\n         LH    R2,QLNG3       LENGTH OF OFFSET FIELD\n         SH    R2,=H'1'       IS THE OFFSET FIELD ZERO LENGTH?\n         BM    CALLLIST       YES. USE ZERO OFFSET.\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R2,MVZ2        MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. QUIT.\n         EX    R2,PACK2       PACK THE FIELD\n         CVB   R2,CONVERT     CONVERT TO BINARY\n         STH   R2,QPOFFSET    STORE OFFSET\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\nCALLLIST L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\nTILT     QTILT '*** DATASET ID INVALID ***'\nTILT2    QTILT '*** JOBNAME MUST BEGIN WITH USERID ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nCLC      CLC   QLOGON(1),JCTJNAME IS THE JOBNAME EQUAL TO USERID\nMVZ      MVZ   QFZONES(1),QPARM2 CHECK FOR NUMERIC\nMVZ2     MVZ   QFZONES(1),QPARM3 CHECK FOR NUMERIC\nPACK     PACK  CONVERT,QPARM2(1) CONVERT TO BINARY\nPACK2    PACK  CONVERT,QPARM3(1) CONVERT TO BINARY\n         LTORG\n         DROP  ,                   DROP ALL ADDRESSINGS           NERDC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nLIST     CSECT ,                                                  UF023\nJCT      EQU   0\n         $BUFFER                                                  UF020\n         $JCT\nWORK     DSECT\n         DS    72C\nCONVERT  DS    D\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTDS": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x14\\x00\\x00\\x01\\x02\\x16o\\x01\\x03\\x08\\x7f\\x18D\\x01\\x94\\x01\\x19\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.20", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2003-03-28T18:44:00", "lines": 404, "newlines": 281, "modlines": 0, "user": "GREG"}, "text": "LISTDS   QSTART 'QUEUE COMMAND - LIST A DATASET FROM THE SPOOL PACK'\n         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13       BASE REG FOR LOCAL WORK\n***********************************************************************\n*                                                                     *\n*   DETERMINE FUNCTION REQUESTED                                      *\n*                                                                     *\n***********************************************************************\n         CLI   QCODE,0        IS THE REQUEST FOR REPOSITIONING?\n         BNE   REPOS          YES. DO IT.\n***********************************************************************\n*                                                                     *\n*   LOCATE PDDB FOR DATASET SPECIFIED IN QPDSID                       *\n*                                                                     *\n***********************************************************************\n         MVI   SWITCH,0       INITIALIZE SWITCH\n         USING PDBDSECT,R2    BASE REG FOR PDDB\n         USING IOTSTART,R3    BASE REG FOR IOT\n         L     R3,QCIOTA      LOAD BASE REG\n         LR    R5,R3          IOAREA FOR READ IOT BLOCK\n         ICM   R4,15,QPNEXT   'NEXT' OR 'PREVIOUS' ACTIVE?        GP@P6\n         BZ    NEXTIOT        NO                                  GP@P6\n         BM    PREV1          YES, 'PREVIOUS'                     GP@P6\nNEXT1    LH    R4,QPDSID      GET CURRENT DATA SET ID             GP@P6\n         LA    R4,1(,R4)      INCREMENT IT                        GP@P6\n         CH    R4,=H'5'       WAS IT JOB MESSAGES?                GP@P6\n         BNE   *+8            NO                                  GP@P6\n         LA    R4,101         YES, GO TO FIRST \"USER\" DATA SET    GP@P6\n         STH   R4,QPDSID      SAVE UPDATED DATA SET ID            GP@P6\n         B     NEXTIOT        START THE SEARCH                    GP@P6\nPREV1    CLC   QPDSID,=H'2'   BACK TO JOB LOG ALREADY?            GP@P6\n         BH    PREV2          NO                                  GP@P6\n         XC    QPNEXT,QPNEXT  YES, NOTHING PREVIOUS TO THIS       GP@P6\n         XC    QPOFFSET,QPOFFSET   LEFT MAX                       GP@P6\n         B     NEXTIOT                                            GP@P6\nPREV2    LH    R4,QPDSID      GET CURRENT DATA SET ID             GP@P6\n         BCTR  R4,0           DECREMENT IT                        GP@P6\n         CH    R4,=H'100'     JUST DONE LAST \"USER\" DATA SET?     GP@P6\n         BNE   *+8            NO                                  GP@P6\n         LA    R4,4           YES, GO BACK TO JOB MESSAGES        GP@P6\n         STH   R4,QPDSID      SAVE UPDATED DATA SET ID            GP@P6\nNEXTIOT  LR    R4,R3          BASE OF IOT\n         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB\n         LR    R2,R3          BASE OF IOT\n         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN IOT\nFINDDS   OC    PDBMTTR,PDBMTTR IS THERE ANY OUTPUT?               UF020\n         BZ    FINDDS1        NO, SKIP THIS ONE                   UF020\n         CLC   QPDSID,PDBDSKEY IS THIS THE DATASET?\n         BE    FOUNDDS        YES. CONTINUE.\nFINDDS1  LA    R2,PDBLENG(R2) NO. LOOK AT NEXT PDDB.              UF020\n         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB?\n         BL    FINDDS         NO. TRY AGAIN.\n         L     R4,IOTIOTTR    DISK ADDR OF NEXT IOT\nSPIN     LTR   R4,R4          IS THERE ANOTHER IOT?\n         BZ    SPINIOT        NO. TRY THE SPIN IOT?\n         BAL   R8,READ        READ THE IOT\n         B     NEXTIOT        SEARCH THE NEXT IOT\n         USING JCTSTART,R1    BASE REG FOR JCT\nSPINIOT  TM    SWITCH,1       DID WE SEARCH THE SPINIOT ALREADY?\n         BO    TILT           YES. TILT.\n         OI    SWITCH,1       SET SWITCH\n         L     R1,QCJCTA      LOAD BASE REG\n         L     R4,JCTSPIOT    DISK ADDR OF SPIN IOT\n         DROP  R1\n         B     SPIN           SEARCH THE SPIN IOT CHAIN\nTILT     ICM   R0,15,QPNEXT   'NEXT' ACTIVE?                      GP@P6\n         BP    NEXTLAST       YES                                 GP@P6\n         MVC   QPDSID,=H'0'   INVALIDATE DSID\n         QTILT '*** DATASET ID NOT FOUND ***'\nNEXTLAST SLR   R0,R0                                              GP@P6\n         BCTR  R0,0                                               GP@P6\n         ST    R0,QPNEXT      ISSUE 'PREV'                        GP@P6\n         B     PREV1                                              GP@P6\nTILT2    QTILT '*** DATASET TABLE LIMITS EXCEEDED ***'\nFOUNDDS  DS    0H                                                 UF007\n         ICM   R4,15,QPNEXT   'NEXT'/'PREV' ACTIVE?               GP@P6\n         BZ    FOUNDDS2       NO                                  GP@P6\n         BM    PREVDONE       YES, 'PREV'                         GP@P6\n         BCTR  R4,0           'NEXT', DECREMENT COUNTER           GP@P6\n         ST    R4,QPNEXT      SAVE UPDATED COUNTER                GP@P6\n         LTR   R4,R4          AT REQUESTED DATA SET?              GP@P6\n         BP    NEXT1          NO                                  GP@P6\n         B     FOUNDDS1       YES                                 GP@P6\nPREVDONE AH    R4,=H'1'       ADJUST COUNTER                      GP@P6\n         ST    R4,QPNEXT      SAVE UPDATED COUNTER                GP@P6\n         BM    PREV1          NOT YET BACKED UP ENOUGH DATA SETS  GP@P6\nFOUNDDS1 XC    QPOFFSET,QPOFFSET   LEFT MAX                       GP@P6\n         CLC   QPDSID,=H'3'   IS IT THE JOB'S JCL?                GP@P6\n         BNE   FOUNDDS2       NO, LEFT MAX IS GOOD                GP@P6\n         MVI   QPOFFSET+1,10  YES                                 GP@P6\nFOUNDDS2 CLI   QPARM1,C'*'    USE LAST JOB NAME?                  UF007\n         BE    *+4+6          YES, SKIP OVERLAY OF JOBNAME        UF007\n         MVC   QCJNAME,QPARM1 SAVE THE JOBNAME                    UF007\n         LH    R15,QPDSID     GET THE DATA SET ID                 GP@P6\n         CVD   R15,QDWORK     SHOW IT IN THE HEADING              GP@P6\n         MVC   QCDSNO(6),=X'402020202120'                         GP@P6\n         ED    QCDSNO(6),QDWORK+5                                 GP@P6\n         QHEAD QCHLINE,X'24',SEL=Y            GREEN REVERSE       GP@P6\n         MVC   QCRECFM,PDBRECFM RECORD FORMAT FOR SAVE\n         MVC   QCLRECL,PDBLRECL RECORD LENGTH FOR SAVE\n         L     R4,PDBMTTR     DISK ADDR OF FIRST BLOCK\n         L     R5,QCBLKA      ADDR OF DATASET BLOCK IOAREA\n         L     R2,QCSTART     BEGINNING OF DISK ADDR TABLE\n         ZAP   QCCREC,=P'0'   ZERO CURRENT RECORD NO\n         MVC   QCCPTR,QCSTART BEGIN OF TBL\n         ZAP   QCHREC,=P'0'   ZERO HIGH REC NO\n         MVC   QCHPTR,QCSTART BEGIN OF TBL\n         ZAP   QPREC,=P'1'    REPOSITION TO TOP OF DATASET\n         B     FIRST          PROCESS DATASET\n         DROP  R2\n         DROP  R3\n***********************************************************************\n*                                                                     *\n*   PROCESS DATASET                                                   *\n*                                                                     *\n***********************************************************************\nNEXTBLK  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK\nFIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?\n         BZ    END            YES. END OF DATASET.\n         ST    R4,0(R2)       STORE DISK ADDR IN TABLE\n         BAL   R8,READ        READ A BLOCK\n         CLC   QPJOBID(6),4(R5) DOES THE JOBID MATCH?\n         BNE   END            NO. END OF DATASET.\n         MVC   4(4,R2),QCCREC STORE CURRENT REC NUM IN TABLE\n         ST    R2,QCCPTR      STORE CURRENT TABLE ADDR\n         CP    QCCREC,QCHREC  IS THE CURRENT REC NO > HIGHEST?\n         BNH   NOTHI          NO. SKIP.\n         MVC   QCHREC(8),QCCREC REPLACE HI REC CNT AND PTR\nNOTHI    LA    R2,8(R2)       INCREMENT TO NEXT TBL ENTRY\n         C     R2,QCEND       IS THIS THE END OF TABLE?\n         BNL   TILT2          YES. TILT.\n         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK\n***********************************************************************\n*                                                                     *\n*   PROCESS RECORDS                                                   *\n*                                                                     *\n***********************************************************************\nNEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?\n         BE    NEXTBLK        YES. END OF BLOCK.\n         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPAN           YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R4)       INSERT LENGTH\n         LR    R7,R6          SAVE RECORD LENGTH\n         LR    R1,R4          SAVE RECORD LOCATION\n         TM    1(R4),X'80'    IS CARRIAGE CONTROL SPECIFIED?\n         BZ    NOCCTL         NO. CONTINUE.\n         LA    R1,1(R1)       SKIP OVER CARRIAGE CONTROL\nNOCCTL   TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?\n         LR    R4,R1          UPDATE RECORD POINTER\n         BNZ   SKIPREC        YES. SKIP IT.\n         AP    QCCREC,=P'1'   ADD ONE TO CUR REC NO\n         CP    QCCREC,QPREC   HAVE WE REACHED THE RECORD WE WANT?\n         BL    SKIPREC        NO. TRY NEXT RECORD.\n         CLI   QCODE,4        IS THE REQUEST FOR A FIND?\n         BE    FIND           YES. DO IT.\n         CLI   QCODE,8        IS THE REQUEST FOR A FINDTIME?\n         BE    FINDTIME       YES. DO IT.\nFINDOFF  L     R14,QCJCTA     ADDR OF JCT                         GP@P6\n         USING JCTSTART,R14   BASE REG FOR JCT                    GP@P6\n         CLC   JCTJNAME,=C'SYSLOG  '                              GP@P6\n         BNE   NORMLMSG       NOT LOOKING AT SYSTEM LOG           GP@P6\n         DROP  R14                                                GP@P6\n         CH    R7,=H'24'      LINE LONG ENOUGH FOR ACTION FLAG?   GP@P6\n         BL    NORMLMSG       NO, DATA TOO SHORT TO COMPARE       GP@P6\n         MVI   QDLNCODE,X'07' PREPARE FOR IMMEDIATE ACTION MSG    GP@P6\n         CLI   26(R1),C'*'    ACTION FLAG PRESENT?                GP@P6\n         BE    LNCDOKAY       YES                                 GP@P6\n         CLI   26(R1),C'@'    ACTION FLAG PRESENT?                GP@P6\n         BE    LNCDOKAY       YES                                 GP@P6\nNORMLMSG MVI   QDLNCODE,X'05' STANDARD DISPLAY IS TURQUOISE       GP@P6\n         CLC   QPDSID,=H'4'   LOOKING AT JOB MESSAGES?            GP@P6\n         BNE   LNCDOKAY       NO, NO COLOUR CODING OF LINE        GP@P6\n         CH    R7,=H'7'       LINE SHORTER THAN 7 BYTES?          GP@P6\n         BL    LNCDOKAY       YES, DATA TOO SHORT TO COMPARE      GP@P6\n         MVI   QDLNCODE,X'01' UNCODED DISPLAY IS BLUE             GP@P6\n         LA    R14,LNCDTABL   POINT TO COMPARE TABLE              GP@P6\nLNCDLOOP IC    R15,6(,R14)    SET LENGTH CODE OF COMPARE          GP@P6\n         EX    R15,LNCDCOMP   MATCHING TABLE ENTRY?               GP@P6\n         BE    LNCDMTCH       YES                                 GP@P6\n         LA    R14,8(,R14)    NO, POINT TO NEXT ENTRY IN TABLE    GP@P6\n         CLI   0(R14),X'FF'   END OF TABLE?                       GP@P6\n         BNE   LNCDLOOP       NO, KEEP SEARCHING TABLE            GP@P6\n         B     LNCDOKAY       YES, NOT IN TABLE                   GP@P6\nLNCDCOMP CLC   3(0,R1),0(R14) <<< EXECUTED >>>                    GP@P6\nLNCDMTCH MVC   QDLNCODE,7(R14) SET LINE SHADOW CODE               GP@P6\nLNCDOKAY AH    R1,QPOFFSET    ADD OFFSET TO START OF RECORD\n         SH    R7,QPOFFSET    SUBTRACT OFFSET FROM LENGTH\n         BNP   ZEROPRT        NO DATA LEFT IN RECORD.\n         CH    R7,QDLNELEN    IS THE RECORD BIGGER THAN LINE?     UF003\n         BNH   LTMAX          NO. USE RECORD LENGTH.              UF003\n         LH    R7,QDLNELEN    YES. USE A LENGTH OF LINE.          UF003\nLTMAX    STH   R7,QDMLNG      STORE MESSAGE LENGTH                UF003\n         LA    R1,3(R1)       OFFSET PAST REC HDR\n         ST    R1,QDMSGA      STORE ADDR OF MESSAGE LINE\n         BCTR  R7,0           DECREMENT FOR EXECUTE               GP@P6\n         EX    R7,XLATEMSG    CLEAR UNDISPLAYABLES FROM MESSAGE   GP@P6\n         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY MODULE\n         BALR  R14,R15        GO TO IT\n         TM    QDOVER,1       WAS THERE A PAGE OVERFLOW?\n         BNO   SKIPREC        NO. SKIP.\n         ZAP   QPREC,QCCREC   UPDATE THE REPOSITION NUMBER\n         L     R15,QDHLINE@   POINT TO HEADING LINE               GP@P6\n         USING Q15HLINE,R15                                       GP@P6\n         MVC   HREC,EDIT      PATTERN FOR EDIT\n         ED    HREC,QCCREC    EDIT RECORD NUMBER\n         DROP  R15                                                GP@P6\nSKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTREC        PROCESS NEXT RECORD\nXLATEMSG TR    0(0,R1),TABLE  <<< EXECUTED >>>                    GP@P6\nSPAN     LH    R6,2(R4)       LENGTH OF SEGMENT\n         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPANFRST       YES. USE HEADER LENGTH OF 6.\n         LA    R4,4(R6,R4)    UPDATE RECORD POSITION\n         B     NEXTREC        PROCESS NEXT RECORD\nSPANFRST LA    R4,6(R6,R4)    UPDATE RECORD POSITION\n         B     NEXTREC        PROCESS NEXT RECORD\nZEROPRT  LA    R1,QBLANK      PRINT A BLANK\n         LA    R7,1           LENGTH OF ONE\n         B     LTMAX          PRINT THE RECORD                    UF003\nEND      CP    QCCREC,=P'0'   IS THE DATASET EMPTY\n         BE    STOP           YES. QUIT.\n         L     R15,QDHLINE@   POINT TO HEADING LINE               GP@P6\n         USING Q15HLINE,R15                                       GP@P6\n         MVC   HEND,ENDLINE   TELL THEM THIS IS THE END\n         MVC   HREND,EDIT     PATTERN FOR EDIT\n         ED    HREND,QCCREC   LAST REC NO\n         DROP  R15                                                GP@P6\n         CLI   QCODE,32       WAS REQUEST FOR BOTTOM?\n         BE    BOTTOM         YES. BACK UP 21 LINES.\n         MVC   QDMLNG,=H'0'   ZERO OUT MESSAGE LENGTH\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        FLUSH THE SCREEN\n         ZAP   QPREC,=P'1'    RECORD NUMBER 1\n         QHEAD QCHLINE,X'24',DMY=Y            GREEN REVERSE       GP@P6\n         B     TOP            START AT TOP OF DATASET\nSTOP     XC    QPDSID,QPDSID  MAKE USER SPECIFY A NEW DATA SET\n         QHEAD =CL80'*** DATA SET IS EMPTY ***',X'26',DMY=Y       GP@P6\n         QSTOP\n***********************************************************************\n*                                                                     *\n*   BOTTOM OF DATASET                                                 *\n*                                                                     *\n***********************************************************************\nBOTTOM   ZAP   QPREC,QCCREC   LAST RECORD NUMBER\n         MVI   QCODE,0        AVOID A LOOP\n         SP    QPREC,QDLNES   TOP OF PAGE -1                      UF003\n         AP    QPREC,=P'1'    TOP OF PAGE                         UF003\n         BP    REPOS          CONTINUE IF POSITIVE.\n         ZAP   QPREC,=P'1'    TOP OF DATASET\n***********************************************************************\n*                                                                     *\n*   REPOSITION TO REQUESTED RECORD NUMBER                             *\n*                                                                     *\n***********************************************************************\nREPOS    QHEAD QCHLINE,X'24',DMY=Y            GREEN REVERSE       GP@P6\n         L     R15,QDHLINE@   POINT TO HEADING LINE               GP@P6\n         USING Q15HLINE,R15                                       GP@P6\n         MVC   HREC,EDIT      PREPARE FOR EDIT\n         ED    HREC,QPREC     EDIT RECORD NUMBER\n         DROP  R15                                                GP@P6\n         CP    QPREC,QCHREC   IS THE REQ NO > HIGHEST READ?\n         BNL   HI             YES. GO FROM HI.\n         CP    QPREC,QCCREC   IS THE REQ NO > CURRENT REC?\n         BH    FWD            YES. GO FROM CURRENT.\n         CP    QPREC,=P'1'    IS REQ FOR TOP OF DATASET?\n         BH    BACK           NO. GO BACK FROM CURRENT.\nTOP      L     R2,QCSTART     YES. START AT TOP\nRESUME   L     R4,0(R2)       LOAD DISK ADDR\n         L     R5,QCBLKA      ADDR OF BLOCK IOAREA\n         MVC   QCCREC,4(R2)   RESET CURRENT REC NO\n         B     FIRST          RESUME PROCESSING\nHI       L     R2,QCHPTR      START AT HIGHEST SO FAR\n         B     RESUME         FIND CORRECT BLOCK                  GP@P6\nFWD      L     R2,QCCPTR      CURRENT TABLE PTR\nFWDLOOP  CP    QPREC,12(4,R2) IS THE NEXT ENTRY > REQ NO?\n         BL    RESUME         YES. PROCESS IT.                    GP@P6\n         LA    R2,8(R2)       TRY NEXT ENTRY\n         B     FWDLOOP        AGAIN\nBACK     L     R2,QCCPTR      CURRENT TABLE PTR\nBACKLOOP CP    QPREC,4(4,R2)  IS THE ENTRY < REQ NO?\n         BNL   RESUME         YES. PROCESS IT.                    GP@P6\n         SH    R2,=H'8'       TRY PREVIOUS ENTRY\n         B     BACKLOOP       AGAIN\n***********************************************************************\n*                                                                     *\n*   FIND MATCHING RECORD ROUTINE                                      *\n*                                                                     *\n***********************************************************************\nFIND     LH    R3,QPLNG       LENGTH-1 OF COMPARE\n         LR    R14,R6         LENGTH OF RECORD\n         SR    R14,R3         NUMBER OF COMPARES\n         BNP   SKIPREC        RECORD IS TOO SMALL. SKIP IT.\n         LR    R15,R4         FIRST BYTE OF RECORD\n         CLC   QOFFE,=H'0'    END RANGE FOR FIND SPECIFIED ?\n         BE    FLOOP          NO. BYPASS RANGE FOR FIND\n         AH    R15,QOFFS      YES. START ADDR FOR FIND\n         LH    R14,QOFFE      END ADDR FOR FIND\n         SH    R14,QOFFS      VALID RANGE ?\n         BP    FLOOP          YES. CONTINUE PROCESSING\n         QTILT ' *** ERROR IN COLUMN SPECIFICATION ***'\nFLOOP    EX    R3,CLC         DOES THE FIND DATA MATCH THE RECORD?\n         BE    MATCH          YES. DISCONTINUE SEARCH.\n         LA    R15,1(R15)     INCREMENT TO NEXT BYTE\n         BCT   R14,FLOOP      TRY NEXT BYTE\n         B     SKIPREC        SKIP THE RECORD. NO MATCH.\nMATCH    CLI   QSUBNAME+1,C'A' IS THE REQUEST FOR A FINDALL?\n         BE    FALL           YES. DO NOT DISABLE SEARCH.\n         MVI   QCODE,0        END THE SEARCH\n         ZAP   QPREC,QCCREC   UPDATE THE REPOSITION NUMBER\nFALL     L     R15,QDHLINE@   POINT TO HEADING LINE               GP@P6\n         USING Q15HLINE,R15                                       GP@P6\n         MVC   HREC,EDIT      PREPARE FOR EDIT\n         ED    HREC,QCCREC    EDIT RECORD NUMBER\n         B     FINDOFF        CONTINUE\n         DROP  R15                                                GP@P6\nCLC      CLC   QPFIND(1),3(R15) COMPARE PARM TO RECORD\n***********************************************************************\n*                                                                     *\n*   FIND THE RECORD WHICH IS GREATER THAN OR EQUAL TO TIME            *\n*                                                                     *\n***********************************************************************\nFINDTIME CLI   10(R4),C'.'    DOES THIS RECORD HAVE TIME?\n         BNE   SKIPREC        NO. SKIP IT.\n         CLC   QPARM1,8(R4)   IS THIS THE TIME WE WANT?\n         BH    SKIPREC        NO. SKIP IT.\n         B     MATCH          END THE SEARCH\n***********************************************************************\n*                                                                     *\n*   READ A BLOCK FROM HASPACE                                         *\n*                                                                     *\n***********************************************************************\nREAD     ST    R4,QCTRAK      STORE DISK ADDR\n         LR    R1,R5          IOAREA ADDRESS\n         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE\n         BALR  R14,R15        GO TO IT\n         BR    R8             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nENDLINE  DC    C', END OF DATA. LAST REC #'\nEDIT     DC    X'4020202020202021'\n         DC    CL45' '\n         DS    0D\n* INTERNAL ATTRIBUTE CODE IS X'YZ' WHERE Y=HIGHLIGHTING AND Z=COLOUR\n* Y IN 0-3 RANGE: 0=NORMAL 1=BLINK 2=REVERSE 3=UNDERSCORE\n* Z IN 1-7 RANGE: 1=BLUE 2=RED 3=PINK 4=GREEN 5=TURQ 6=YELLOW 7=WHITE\n*              CL6'MSG-ID',AL1(LENGTH-CODE),X'INTERNAL-ATTR-CODE'\nLNCDTABL DC    CL6' STMT ',AL1(5),X'07'  STMT NO.\n         DC    CL6'IEA***',AL1(2),X'26' ** SUPERVISOR MESSAGES\n         DC    CL6'IEC***',AL1(2),X'26' ** DATA MANAGEMENT MESSAGES\n         DC    CL6'IEF142',AL1(5),X'07' STEP WAS EXECUTED\n         DC    CL6'IEF19*',AL1(4),X'22' (VARIOUS ALLOCATION ERRORS)\n         DC    CL6'IEF201',AL1(5),X'22' JOB TERMINATED BY COND CODES\n         DC    CL6'IEF202',AL1(5),X'22' STEP WAS NOT RUN\n         DC    CL6'IEF21*',AL1(4),X'22' DATA SET NOT FOUND (AND OTHERS)\n         DC    CL6'IEF236',AL1(5),X'06' ALLOC. FOR\n         DC    CL6'IEF237',AL1(5),X'04' ALLOCATED TO\n         DC    CL6'IEF25*',AL1(4),X'22' (VARIOUS DASD ALLOC FAILURES)\n         DC    CL6'IEF26*',AL1(4),X'22' (VARIOUS ISAM AND OTHER ERRORS)\n         DC    CL6'IEF272',AL1(5),X'07' STEP WAS NOT EXECUTED\n         DC    CL6'IEF283',AL1(5),X'25' NOT DELETED\n         DC    CL6'IEF285',AL1(5),X'05' (SUCCESSFUL DISPOSITION)\n         DC    CL6'IEF286',AL1(5),X'23' DISP FIELD INCOMPATIBLE\n         DC    CL6'IEF287',AL1(5),X'25' NOT CATLG/RECTLG/UNCTLG\n         DC    CL6'IEF318',AL1(5),X'22' 'UNIT=AFF' INVALID FOR DASD\n         DC    CL6'IEF367',AL1(5),X'22' PATTERN DSCB OBTAIN I/O ERROR\n         DC    CL6'IEF373',AL1(5),X'02' STEP START\n         DC    CL6'IEF374',AL1(5),X'32' STEP STOP\n         DC    CL6'IEF375',AL1(5),X'03' JOB START\n         DC    CL6'IEF376',AL1(5),X'03' JOB STOP\n         DC    CL6'IEF470',AL1(5),X'22' UNALLOCATION FAILED\n         DC    CL6'IEF472',AL1(5),X'22' (ABNORMAL) COMPLETION CODE\n         DC    CL6'IEF702',AL1(5),X'22' UNABLE TO ALLOCATE\n         DC    FL8'-1'\n* TABLE OF PRINTABLE CHARACTERS\nTABLE    DC    CL64' '\n         DC    191AL1(*-TABLE),C' '                         GP@P6 UF003\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nLISTDS   CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $TAB\n         $JCT\n         $PDDB\n         $IOT\n         QCOMMON\nQ15HLINE DSECT                                                    GP@P6\n         DS    C'JOB XXXXXXXX, DSID XXXXXXXX, REC #'\nHREC     DS    CL8\nHEND     DS    C', END OF DATA. LAST REC #'\nHREND    DS    CL8\nWORK     DSECT\n         DS    CL72\nSWITCH   DS    C\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NEXT": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x020o\\x01\\x020\\x8f \\x00\\x008\\x00<\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-11-02T00:00:00", "modifydate": "2002-11-04T20:00:00", "lines": 56, "newlines": 60, "modlines": 0, "user": "GREG"}, "text": "NEXT     QSTART 'QUEUE COMMAND - JUMP TO ANOTHER DATA SET'\n         GBLB  &QACF2         IS ACF2 AUTH CHECKING TO BE DONE     FCI*\n         GBLB  &QRNB                                              RNB05\n***********************************************************************\n*                                                                     *\n*   CHECK AND CONVERT THE DATASET ID NUMBER                           *\n*                                                                     *\n***********************************************************************\n         LH    R2,QLNG1       SAVE LENGTH OF DATASET COUNT FIELD\n         LA    R3,1           PREPARE FOR NO OPERAND\n         SH    R2,=H'1'       IS THE COUNT FIELD ZERO LENGTH?\n         BM    GOTCOUNT       YES, USE DEFAULT COUNT\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. QUIT.\n         EX    R2,PACK        PACK THE FIELD\n         CVB   R3,QDWORK      CONVERT TO BINARY\nGOTCOUNT CLI   QSUBNAME,C'N'  'NEXT' COMMAND?\n         BE    COUNTOK        YES\n         LNR   R3,R3          NO, MUST BE 'PREV' COMMAND\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\nCOUNTOK  XC    QLNG1,QLNG1    ZERO FOR FINDJOB\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n         ST    R3,QPNEXT      STORE DATA SET COUNT\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\nTILT     QTILT '*** MISSING NUMERIC OPERAND ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nMVZ      MVZ   QFZONES(0),QPARM1 CHECK FOR NUMERIC\nPACK     PACK  QDWORK,QPARM1(0)  CONVERT TO BINARY\n         LTORG\n         DROP  ,                   DROP ALL ADDRESSINGS           NERDC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nLIST     CSECT ,                                                  UF023\nJCT      EQU   0\n         $BUFFER                                                  UF020\n         $JCT\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARSE": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x08\\x00\\x00\\x01\\x02\\x17?\\x01\\x03\\x06?\\x14D\\x00\\xf1\\x00\\xe7\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.08", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2003-03-04T14:44:00", "lines": 241, "newlines": 231, "modlines": 0, "user": "GREG"}, "text": "PARSE    QSTART 'QUEUE COMMAND - COMMAND LINE PARSE ROUTINES'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*    (1) ADDED COMMAND ABBREVIATIONS: RNB06                           *\n*                JM FOR JMSG                                          *\n*                JL FOR JLOG                                          *\n*                JC FOR JCL                                           *\n*                SL FOR SLOG                                          *\n*                FT FOR FTIM                                          *\n*                DE FOR DEL                                           *\n*                RE FOR REQ                                           *\n*    (2) DELETED COMMANDS:      RNB06  (ONLY IF QRNB=1)               *\n*                TSO, EXEC, AND MODEL                                 *\n*    (3) USE RACF TO CHECK FOR X AUTHORITY (XP COMMAND): RNB03        *\n*                                                                     *\n***********************************************************************\n         GBLB  &QRNB                                              RNB06\n         GBLB  &QRACF                                             RNB03\n         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA\n         L     R10,QVDSPL     LOAD BASE REG\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   PARSE SUBCOMMAND NAME                                             *\n*                                                                     *\n***********************************************************************\n         LH    R2,QDRLNG      LENGTH OF REPLY LINE\n         OC    QDREPLY,QBLANK TRANSLATE TO UPPER CASE\n         CLC   QDREPLY,QBLANK IS THE ENTIRE REPLY BLANK?\n         BE    LOOKUP         YES. DO LOOKUP.\n         MVC   QDTLINE,QDREPLY MOVE COMMAND LINE TO HEADING\n         MVC   FIELD,QBLANK   BLANK THE WORK FIELD\n         MVC   OFFSET(4),=F'0' ZERO THE OFFSET AND LENGTH\n         MVC   QOFF0(12),OFFSET INITIALIZE FIRST FIELD\n         MVC   QOFF1(48),QOFF0 INITIALIZE NEXT FOUR FIELDS\n         LA    R6,QOFF4+12    ADDR PAST LAST FIELD\n         LA    R5,QOFF0       ADDR OF FIRST SET OF FIELDS\n         LA    R3,QDREPLY     FIRST BYTE OF REPLY LINE\nENCORE   LA    R4,FIELD       FIRST BYTE OF WORK FIELD\nBLANK    CLI   0(R3),C' '     IS THIS BYTE BLANK?\n         BNE   FIRST          NO. START OF FIELD.\n         LA    R3,1(R3)       YES. SKIP IT.\n         BCT   R2,BLANK       TRY NEXT BYTE\n         B     EMPTY          END OF REPLY LINE.\nFIRST    LH    R1,QDRLNG      REPLY LENGTH\n         SR    R1,R2          COMPUTE OFFSET TO START OF FIELD\n         STH   R1,OFFSET      STORE OFFSET\n         LR    R1,R2          SAVE COUNT OF REMAINING BYTES\n         B     CHAR           CONTINUE\nLOOP     CLI   0(R3),C' '     IS THIS BYTE BLANK?\n         BE    LAST           YES. END OF FIELD.\nCHAR     MVC   0(1,R4),0(R3)  MOVE BYTE TO SUBNAME\n         LA    R3,1(R3)       INCREMENT\n         LA    R4,1(R4)       INCREMENT\n         BCT   R2,LOOP        TRY NEXT BYTE\nLAST     SR    R1,R2          COMPUTE FIELD LENGTH\n         CH    R1,=H'8'       IS LENGTH GREATER THAN 8?\n         BNH   STORE          NO. USE IT.\n         LA    R1,8           YES. USE LENGTH OF EIGHT.\nSTORE    STH   R1,LENGTH      STORE FIELD LENGTH\nEMPTY    MVC   0(12,R5),OFFSET MOVE FIELD TO QCOMMON\n         LTR   R2,R2          IS THE REMAINING LENGTH ZERO?\n         BZ    LOOKUP         YES. DO THE TABLE LOOKUP.\n         MVC   FIELD,QBLANK   BLANK THE WORK FIELD\n         MVC   OFFSET(4),=F'0' ZERO OUT OFFSET AND LENGTH\n         LA    R5,12(R5)      INCREMENT TO NEXT FIELD\n         CR    R5,R6          WAS THAT THE LAST FIELD?\n         BL    ENCORE         NO. PROCESS NEXT FIELD.\n***********************************************************************\n*                                                                     *\n*   LOOK UP THE MODULE ADDRESS FOR THE SUB COMMAND                    *\n*                                                                     *\n***********************************************************************\nLOOKUP   CLC   =C'XP',QSUBNAME  IS THIS A PASSWORD REQUEST?       UF014\n         BE    PASSWD         YES. CHECK FOR PASSWORD.            UF014\nLOOKUP2  LA    R2,TABLE       START OF SUBCOMMAND TABLE\n         TM    QXAUTH,1       IS THE USER PRIVILEGED?             UF014\n         BNO   NEXT           NO, TABLE IS OK                     UF014\n         LA    R2,TABLEX      START OF PRIV TABLE                 UF014\n         CLC   =C'DIE',QSUBNAME IS THIS THE DIE REQUEST?          UF024\n         BE    CDIE           YES, DO IT                          UF024\nNEXT     CLC   0(4,R2),QSUBNAME COMPARE FIRST 4 CHARACTERS        UF014\n         BE    FOUND          THIS IS THE ONE\n         LA    R2,10(R2)      NEXT ENTRY                          UF014\n         CLI   0(R2),X'FF'    IS THIS THE END OF TABLE?\n         BNE   NEXT           NO. TRY NEXT ENTRY.\nFOUND    MVC   QCODEH(6),4(R2) SUBCOMMAND CODE AND COMMAND ADDR   UF014\n         NI    QFLAG1,255-QFLG1HLP        NO LONGER IN HELP       GP@P6\nSTOP     QSTOP\n***********************************************************************\n*                                                                     *\n*   CHECK PASSWORD FOR AUTHORIZED COMMANDS                        UF014\n*                                                                     *\n***********************************************************************\n         AIF   (&QRACF).RNB03A                                    RNB03\nPASSWD   CLC   QPARM1,=C'PASSWORD' DID THE USER SAY PASSWORD?\n         BNE   BOUNCE         NO. REJECT.\n*        TPUT  WPASS,L'WPASS,FULLSCR,MF=(E,QTPUT)\n         LA    R1,WPASS       POINT TO DATA STREAM                GP@P6\n         LA    R0,L'WPASS     GET DATA STREAM LENGTH              GP@P6\n         ICM   R1,8,=X'03'    SET FLAGS FOR FULLSCR               GP@P6\n         TPUT  (1),(0),R      CLEAR THE SCREEN                    GP@P6\n*        TGET  RPASS,8,EDIT,MF=(E,QTGET)\n         LA    R1,RPASS       REPLY ADDRESS                       GP@P6\n         LA    R0,8           GET INPUT BUFFER LENGTH             GP@P6\n         ICM   R1,8,=X'80'    SET FLAGS FOR EDIT                  GP@P6\n         TGET  (1),(0),R      CLEAR THE SCREEN                    GP@P6\n         CLC   RPASS,=C'YES SIR!' IS THE PASSWORD CORRECT?\n         BNE   BOUNCE         NO. REJECT.\n         OI    QXAUTH,1       AUTHORIZE USER\n         QTILT '*** PASSWORD ACCEPTED ***'\n         AGO   .RNB03B                                            RNB03\n.RNB03A  ANOP                                                     RNB03\nPASSWD   RACHECK ENTITY=QRACNMXP,MF=(E,QRACHECK)                  RNB03\n         LTR   R15,R15                                            RNB03\n         BNZ   BOUNCE                                             RNB03\n         OI    QXAUTH,1       AUTHORIZE USER                      RNB03\n         QTILT '*** AUTHORIZED FUNCTIONS ENABLED'                 RNB03\n.RNB03B  ANOP                                                     RNB03\nBOUNCE   LA    R2,HELPCC      NO. PRETEND IT IS INVALID.\n         B     FOUND          CONTINUE\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\n         EJECT ,                                                  UF014\nTABLEX   DS    0D             START OF PRIV COMMAND TABLE         UF014\n         DC    C'XB  ',H'0',VL4(HEXBLK)    DISP SPOOL BLOCK\n         DC    C'XJ  ',H'36',VL4(SEARCH)   DISP HEX JQE/JOE\n         DC    C'XI  ',H'0',VL4(INITS)     DISP ACTIVE INITS\n         DC    C'XD  ',H'0',VL4(XDS)       UNRESTRICTED DISP OF FILES\n         DC    C'JQE ',H'0',VL4(CJQE)      HEX DUMP OF JQE        UF015\n         DC    C'JCT ',H'0',VL4(CJCT)      HEX DUMP OF JCT        UF016\n         DC    C'HCT ',H'0',VL4(CHCT)      HEX DUMP OF HCT SAVEAREUF022\n         DC    C'PDDB',H'0',VL4(CPDDB)     LIST PDDB'S FOR JOB    UF025\n         DC    C'JOE ',H'0',VL4(CJOE)      HEX DUMP OF JOE        UF026\n         SPACE 1                                                  UF014\nTABLE    EQU   *              START OF STANDARD COMMAND TABLE     UF014\n         DC    C'STAT',H'0',VL4(SEARCH)    STATUS\n         DC    C'ST  ',H'0',VL4(SEARCH)    STATUS\n         DC    C'DD  ',H'0',VL4(DDNAME)    LIST SYSINS/SYSOUTS FOR JOB\n         DC    C'LIST',H'0',VL4(LIST)      LIST A SYSIN/SYSOUT FILE\n         DC    C'L   ',H'0',VL4(LIST)      LIST A SYSIN/SYSOUT FILE\n         DC    C'FIND',H'4',VL4(REPOS)     FIND\n         DC    C'FALL',H'4',VL4(REPOS)     FIND ALL\n         DC    C'FA  ',H'4',VL4(REPOS)     FIND ALL\n         DC    C'F   ',H'4',VL4(REPOS)     FIND\n         DC    C'FTIM',H'8',VL4(REPOS)     FTIME (SYSLOG)\n         DC    C'FT  ',H'8',VL4(REPOS)     FTIME (SYSLOG)         RNB06\n         DC    C'COL ',H'12',VL4(REPOS)    COLUMN\n         DC    C'CO  ',H'12',VL4(REPOS)    COLUMN\n         DC    C'C   ',H'12',VL4(REPOS)    COLUMN\n         DC    C'@   ',H'16',VL4(REPOS)    REPOS TO RECORD NUMBER\n         DC    C'MD  ',H'16',VL4(REPOS)    REPOS TO RECORD NUMBER\n         DC    C'+   ',H'20',VL4(REPOS)    DOWN\n         DC    C'D   ',H'20',VL4(REPOS)    DOWN\n         DC    C'DOWN',H'20',VL4(REPOS)    DOWN\n         DC    C'PF  ',H'20',VL4(REPOS)    PAGE FORWARD\n         DC    C'HF  ',H'20',VL4(REPOS)    HALF PAGE FORWARD\n         DC    C'-   ',H'24',VL4(REPOS)    UP\n         DC    C'U   ',H'24',VL4(REPOS)    UP\n         DC    C'UP  ',H'24',VL4(REPOS)    UP\n         DC    C'PB  ',H'24',VL4(REPOS)    PAGE BACK\n         DC    C'HB  ',H'24',VL4(REPOS)    HALF BACK\n         DC    C'TOP ',H'28',VL4(REPOS)    TOP\n         DC    C'T   ',H'28',VL4(REPOS)    TOP\n         DC    C'BOTT',H'32',VL4(REPOS)    BOTTOM\n         DC    C'BOT ',H'32',VL4(REPOS)    BOTTOM\n         DC    C'B   ',H'32',VL4(REPOS)    BOTTOM\n         AIF   (&QRNB).RNB06A                                     RNB06\n         DC    C'MODE',H'36',VL4(REPOS)    MODEL                  UF003\n         DC    C'M   ',H'36',VL4(REPOS)    MODEL                  UF003\n.RNB06A  ANOP                                                     RNB06\n         DC    C'MONO',H'40',VL4(REPOS)    MONOCHROME             GP@P6\n         DC    C'COLO',H'44',VL4(REPOS)    EXTENDED DATA STREAM   GP@P6\n         DC    C'SAVE',H'6',VL4(SAVE)      SAVE COPY OF CURRENT FILE\n         DC    C'SPIN',H'6',VL4(CSPIN)     SPIN COPY OF CURRENT FILE\n         DC    C'SLOG',H'0',VL4(SYSLOG)    LIST THE SYSTEM LOG DATASET\n         DC    C'SL  ',H'0',VL4(SYSLOG)    LIST THE SYSTEM LOG    RNB06\n         DC    C'DA  ',H'4',VL4(SEARCH)    DISP ALL IN EXEC\n         DC    C'DI  ',H'8',VL4(SEARCH)    DISP ALL IN INPUT CLASS\n         DC    C'DO  ',H'12',VL4(SEARCH)   DISP ALL IN OUTPUT CLASS\n         DC    C'AI  ',H'16',VL4(SEARCH)   DISP ALL AVAIL FOR EXEC\n         DC    C'AO  ',H'20',VL4(SEARCH)   DISP ALL AVAIL FOR OUTPUT\n         DC    C'HI  ',H'24',VL4(SEARCH)   DISP ALL IN INPUT HOLD\n         DC    C'HO  ',H'28',VL4(SEARCH)   DISP ALL IN OUTPUT HOLD\n         DC    C'DT  ',H'32',VL4(SEARCH)   DISP TSO USERS\n         DC    C'DJ  ',H'36',VL4(SEARCH)   DISPLAY JOB\n         DC    C'DS  ',H'40',VL4(SEARCH)   DISPLAY STC\n         DC    C'DQ  ',H'44',VL4(SEARCH)   DISP INPUT QUEUES\n         DC    C'DF  ',H'48',VL4(SEARCH)   DISP OUTPUT QUEUES\n         DC    C'JCL ',H'0',VL4(JCL)       LIST JCL\n         DC    C'JC  ',H'0',VL4(JCL)       LIST JCL               RNB06\n         DC    C'JLOG',H'0',VL4(JLOG)      LIST JOBLOG\n         DC    C'JL  ',H'0',VL4(JLOG)      LIST JOBLOG            RNB06\n         DC    C'JMSG',H'0',VL4(JMSG)      LIST SYSMSGS\n         DC    C'JM  ',H'0',VL4(JMSG)      LIST SYSMSGS           RNB06\n         DC    C'DC  ',H'0',VL4(ACTIVE)    DISP CPU BATCH/STC/TSO\n         DC    C'DEL ',H'0',VL4(SYSOUT)    DELETE JOB\n         DC    C'DE  ',H'0',VL4(SYSOUT)    DELETE JOB             RNB06\n         DC    C'REQ ',H'4',VL4(SYSOUT)    REQUEUE JOB\n         DC    C'RE  ',H'4',VL4(SYSOUT)    REQUEUE JOB            RNB06\n         DC    C'CAN ',H'8',VL4(SYSOUT)    CANCEL JOB\n         DC    C'CA  ',H'8',VL4(SYSOUT)    CANCEL JOB             RNB06\n         AIF   (&QRNB).RNB06B                                     RNB06\n         DC    C'TSO ',H'4',VL4(CTSO)      ISSUE ANY TSO COMMAND  UF017\n         DC    C'EX  ',H'0',VL4(CTSO)      IMPLICIT CLIST INVOKE  UF017\n         DC    C'EXEC',H'0',VL4(CTSO)      IMPLICIT CLIST INVOKE  UF017\n         DC    C'PDDB',H'0',VL4(CPDDB)     LIST PDDB'S FOR JOB    UF025\n         DC    C'NEXT',H'0',VL4(NEXT)      NEXT DATA SET          GP@P6\n         DC    C'N   ',H'0',VL4(NEXT)      NEXT DATA SET          GP@P6\n         DC    C'PREV',H'0',VL4(NEXT)      PREVIOUS DATA SET      GP@P6\n         DC    C'P   ',H'0',VL4(NEXT)      PREVIOUS DATA SET      GP@P6\n.RNB06B  ANOP                                                     RNB06\nHELPCC   DC    X'FF0000000000',VL4(HELP)\n         SPACE 1                                                  UF014\nWPASS    DC    X'C1115D7F1140403C4040001D4C13'  *** SPF TCAM\n         SPACE 1                                                  UF024\nCDIE     DC    X'00DEAD'                                          UF024\n         DC    AL1(L'CDIEMSG)                                     UF024\nCDIEMSG  DC    C'DIE COMMAND ENTERRED'                            UF024\n         SPACE 1                                                  UF024\nCDIEDONE LA    R2,HELPCC          SIMULATE HELP REQUEST WHEN RETURN 024\n         MVI   QSUBNAME,0         CLEAR COMMAND NAME              UF024\n         B     FOUND              AND RETURN TO CALLER            UF024\n         SPACE 1                                                  UF024\n         AIF   (NOT &QRACF).RNB03C                                RNB03\nRACNAME  DC    CL8'QUEUEXP'                                       RNB03\n.RNB03C  ANOP                                                     RNB03\nWORK     DSECT\n         DS    CL72\nOFFSET   DS    H\nLENGTH   DS    H\nFIELD    DS    CL8\nRPASS    DS    CL8\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINT": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x06\\x00\\x00\\x01\\x02\\x17?\\x01\\x022o\\x14\\x14\\x02\\x17\\x01\\xfb\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.06", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2002-11-22T14:14:00", "lines": 535, "newlines": 507, "modlines": 0, "user": "GREG"}, "text": "PRINT    QSTART 'QUEUE COMMAND - PRINT SCREEN DISPLAY ROUTINE'     FCI*\n***********************************************************************\n* GP@P6 CHANGES:                                                      *\n*      (1) GP@P6 - PROCESS NEW BYTE-FOR-BYTE BUFFER MAPPING METHOD 6/02\n*      (2) GP@P6 - REWRITE GETTIME TO REMOVE Y2K PROBLEMS         11/02\n***********************************************************************\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB10 - CHANGE DEFAULT SYSOUT CLASS TO C (IF QRNB=1)       *\n***********************************************************************\n         GBLB  &QRNB                                              RNB10\n         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA       FCI*\n         L     R10,QVDSPL     LOAD BASE REG                        FCI*\n         USING QCPRINT,R9     BASE REG FOR PRINT WORK AREA         FCI*\n         L     R9,QVPRINT     LOAD BASE REGISTER                   FCI*\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA         FCI*\n***********************************************************************\n*   PROCESS THE PRINT COMMAND                                      FCI*\n***********************************************************************\nSTARTIT  BAL   R7,PARSECMD    GO PARSE THE PRINT COMMAND           FCI*\n         CLC   =C'ON',QPPARM1 IS IT ON?                            FCI*\n         BE    STARTPRT         YES..GO START IT                   FCI*\n         CLC   =C'OFF',QPPARM1 IS PRINT OFF?                       FCI*\n         BE    STOPPRT          YES..GO STOP IT                    FCI*\n         CLI   QPPARM1,C' '   NO PARM?                             FCI*\n         BE    STARTPRT         YES..ASSUME START                  FCI*\nSTOP     MVC   QDREPLY,QBLANK   KISS OFF OUR REPLY  (SNEAKY)       FCI*\n         XC    QDRLNG,QDRLNG    AND SAY NOBODY HOME                FCI*\n         QSTOP                                                     FCI*\n         EJECT ,                                                   FCI*\n***********************************************************************\n*   START (OR CONTINUE) THE PRINT PROCESS                          FCI*\n***********************************************************************\nSTARTPRT DS 0H                                                     FCI*\n         TM    QPFLAG,HARDCPY  IS HARDCOPY ON                      FCI*\n         BO    JUSTPRT         YES..JUST PRINT                     FCI*\n         ZAP   QPPAGE,=P'0'    RESET PAGE NUMBER                   FCI*\n         MVI   QPHEAD1,C'0'    AND ASA ON HEADING SO WELL START FRESH\n         BAL   R7,ALLOCHC      GO ALLOCATE / OPEN HARDCOPY         FCI*\nJUSTPRT  BAL   R7,GETTIME      GO GET DATE AND TIME                FCI*\n         MVC   QPUSER,QLOGON   MOVE IN USERID                      FCI*\n         MVC   QPDATE,JDATE    MOVE IN DATE TIME INFO              FCI*\n         MVC   QPPAGE#,QBLANK     CLEAR OUT PAGE # FIELD           FCI*\n         XC    QPHEAD1(1),=X'01'  TOGGLE ASA FLAG 0-1 OR 1-0       FCI*\n         CLI   QPHEAD1,C'1'    EJECT NOW SCHEDULED?                FCI*\n         BNE   NOPAGE             NO..SKIP PAGE SETTING            FCI*\n*                                                                  FCI*\n         AP    QPPAGE,=P'1'    BUMP PAGE COUNT                     FCI*\n         MVC   QPPAGE#,=X'402020202021'  MOVE IN MASK              FCI*\n         ZAP   DBLWORK,QPPAGE  MOVE INTO AREA                      FCI*\n         ED    QPPAGE#,DBLWORK+5   EDIT IN PAGE NUMBER             FCI*\nNOPAGE   PUT   HASPPRNT,QPHEAD1  PUT OUT TITLE LINE                FCI*\n         PUT   HASPPRNT,QPHEAD2  PUT OUT '-' LINE                  FCI*\n*                                                                  FCI*\n         MVC   QPLINE,QBLANK                   RECONSTRUCT IMAGE   FCI*\n*        MVC   QPLINE(15),=C'QUEUE COMMAND -'    OF HEADER LINE    FCI*\n*        MVC   QPLINE+16(L'QPRSAVE),QPRSAVE        WITHOUT 3270    FCI*\n*        PUT   HASPPRNT,QPDETAIL                      CONTROL CHARS\n         EJECT ,                                                   FCI*\n*                                                                  FCI*\n*  PUT OUT ENTIRE SCREEN OF DETAIL LINES (BLANK OR NOT)            FCI*\n*                                                                  FCI*\n*        MVC   QPLINE(80),QDHLINE MOVE HEADING LINE TO BUFFER     UF003\n*        PUT   HASPPRNT,QPDETAIL PRINT THE LINE                   UF003\n*        LH    R3,QDSCRLEN       SIZE OF SCREEN                   UF003\n*        SR    R2,R2             CLEAR FOR DIVIDE                 UF003\n         LH    R7,QDLNELEN       LINE LENGTH                      UF003\n*        DR    R2,R7             NUMBER OF LINES                  UF003\n         BCTR  R7,0              DROP LINE LEN FOR EXECUTES       UF003\n*        LA    R2,QDLINE1        LOAD ADDRESS OF FIRST LINE       UF003\n         LA    R2,QDSCRTXT       LOAD ADDRESS OF FIRST LINE       GP@P6\n         L     R3,QDSCRPLN       GET SCREEN SIZE                  GP@P6\nPUTLOOP  EX    R7,PUTMVC         MOVE LINE TO BUFFER              UF003\n         TR    QPLINE,PRTXLATE   REMOVE UNPRINTABLES              GP@P6\n         PUT   HASPPRNT,QPDETAIL PUT DETAIL LINE LOUT              FCI*\n         LA    R2,1(R2,R7)       POINT TO NEXT LINE               UF003\n*        BCT   R3,PUTLOOP        AND GRIND THE SCREEN THROUGH      FCI*\n         SH    R3,QDLNELEN       ADJUST BYTES TO GO               GP@P6\n         BP    PUTLOOP           AND GRIND THE SCREEN THROUGH     GP@P6\n*                                                                  FCI*\n*        MVC   QPLINE,QBLANK                   RECONSTRUCT IMAGE   FCI*\n*        MVC   QPLINE(07),=C'REPLY -'            OF COMMAND LINE   FCI*\n*        MVC   QPLINE+08(L'QDREPLY),QDREPLY        WITHOUT 3270    FCI*\n*        MVC   QPLINE+72(1),QDPLUS                   CONTROL CHARS FCI*\n*        PUT   HASPPRNT,QPDETAIL                       AND PRINT IT\n*                                                                  FCI*\n         MVI   QPDETAIL,C'-'       TRIPLE SPACE A BLANK LINE       FCI*\n         MVC   QPLINE,QBLANK                                       FCI*\n         PUT   HASPPRNT,QPDETAIL   AND PRINT IT                    FCI*\n         MVI   QPDETAIL,C' '       RESTORE TO SINGLE SPACE         FCI*\n*                                                                  FCI*\n         MVC   QDTLINE+L'QDTLINE-L'PRTMSG-1(L'PRTMSG),PRTMSG       FCI*\nGOTMSG   LA    R1,0               SET A ZERO                       FCI*\n         L     R2,4(R13)              RETURN CODE                  FCI*\n         ST    R1,16(R2)                  IN REGISTER 15 (SAVED)   FCI*\n         B     STOP                                                FCI*\n         SPACE 2                                                   FCI*\nPUTMVC   MVC   QPLINE(*-*),0(R2)  EXECUTED MOVE                   UF003\nPRTMSG   DC    C'SCREEN PRINTED'                                   FCI*\n         EJECT ,                                                   FCI*\n***********************************************************************\n*   STOP PRINT PROCESS AND FREE HASPPRNT DDNAME                    FCI*\n***********************************************************************\nSTOPPRT  TM    QPFLAG,HARDCPY             IS HARDCPY ON            FCI*\n         BNO   STOP                       NOPE..NO WORK TO DO      FCI*\n         LA    R2,HASPPRNT          BUILD                          FCI*\n         LA    R1,DBLWORK                   LIST                   FCI*\n         MVI   DBLWORK,X'80'              LAST ENTRY IN LIST       FCI*\n         CLOSE ((2)),MF=(E,(1))           CLOSE OFF THE FILE       FCI*\n         FREEPOOL (2)                     FREE THE BUFFERS TOO     FCI*\n         MVC   DYNALLOC(F99LEN),F99PTR   COPY DYN FREE LIST        FCI*\n         LA    R1,FREERB          RELOCATE THE LIST ADDRESSES.     FCI*\n         STCM  R1,B'0111',FREEPTR+1   *                            FCI*\n         LA    R1,FREETXPT            *                            FCI*\n         ST    R1,FREETPTR            *                            FCI*\n         LA    R1,FREETU1             *                            FCI*\n         STCM  R1,B'0111',FREETXPT+1  *                            FCI*\n         LA    R1,FREETU2             *                            FCI*\n         STCM  R1,B'0111',FREETXPT+5  *                            FCI*\n         LA    R1,FREEPTR                                          FCI*\n         DYNALLOC                                                  FCI*\n         NI    QPFLAG,255-HARDCPY    TURN OFF PRINT FLAG           FCI*\n         MVC   QDTLINE+L'QDTLINE-L'PRTSTP-1(L'PRTSTP),PRTSTP       FCI*\n         B     GOTMSG                                              FCI*\nPRTSTP   DC    C'PRINT STOPPED; SYSOUT FREED FOR PRINT'            FCI*\n         EJECT ,                                                   FCI*\n***********************************************************************\n*                                                                  FCI*\n*   PARSE PRINT COMMAND                                            FCI*\n*                                                                  FCI*\n***********************************************************************\nPARSECMD LH    R2,QDRLNG      LENGTH OF REPLY LINE                 FCI*\n         OC    QDREPLY,QBLANK TRANSLATE TO UPPER CASE              FCI*\n         CLC   QDREPLY,QBLANK IS THE ENTIRE REPLY BLANK?           FCI*\n         BER   R7             YES. NOTHING TO PARSE..RETURN        FCI*\n         MVC   FIELD,QBLANK   BLANK THE WORK FIELD                 FCI*\n         MVC   OFFSET(4),=F'0' ZERO THE OFFSET AND LENGTH          FCI*\n         MVC   QPOFF0(12),OFFSET INITIALIZE FIRST FIELD            FCI*\n         MVC   QPOFF1(48),QPOFF0 INITIALIZE NEXT FOUR FIELDS       FCI*\n         LA    R6,QPOFF4+12   ADDR PAST LAST FIELD                 FCI*\n         LA    R5,QPOFF0      ADDR OF FIRST SET OF FIELDS          FCI*\n         LA    R3,QDREPLY     FIRST BYTE OF REPLY LINE             FCI*\nENCORE   LA    R4,FIELD       FIRST BYTE OF WORK FIELD             FCI*\nBLANK    CLI   0(R3),C' '     IS THIS BYTE BLANK?                  FCI*\n         BNE   FIRST          NO. START OF FIELD.                  FCI*\n         LA    R3,1(R3)       YES. SKIP IT.                        FCI*\n         BCT   R2,BLANK       TRY NEXT BYTE                        FCI*\n         B     EMPTY          END OF REPLY LINE.                   FCI*\nFIRST    LH    R1,QDRLNG      REPLY LENGTH                         FCI*\n         SR    R1,R2          COMPUTE OFFSET TO START OF FIELD     FCI*\n         STH   R1,OFFSET      STORE OFFSET                         FCI*\n         LR    R1,R2          SAVE COUNT OF REMAINING BYTES        FCI*\n         B     CHAR           CONTINUE                             FCI*\nLOOP     CLI   0(R3),C' '     IS THIS BYTE BLANK?                  FCI*\n         BE    LAST           YES. END OF FIELD.                   FCI*\nCHAR     MVC   0(1,R4),0(R3)  MOVE BYTE TO SUBNAME                 FCI*\n         LA    R3,1(R3)       INCREMENT                            FCI*\n         LA    R4,1(R4)       INCREMENT                            FCI*\n         BCT   R2,LOOP        TRY NEXT BYTE                        FCI*\nLAST     SR    R1,R2          COMPUTE FIELD LENGTH                 FCI*\n         CH    R1,=H'8'       IS LENGTH GREATER THAN 8?            FCI*\n         BNH   STORE          NO. USE IT.                          FCI*\n         LA    R1,8           YES. USE LENGTH OF EIGHT.            FCI*\nSTORE    STH   R1,LENGTH      STORE FIELD LENGTH                   FCI*\nEMPTY    MVC   0(12,R5),OFFSET MOVE FIELD TO QCOMMON               FCI*\n         LTR   R2,R2          IS THE REMAINING LENGTH ZERO?        FCI*\n         BZR   R7             YES. FINITO OF PARSE..RETURN         FCI*\n*                                                                  FCI*\n         MVC   FIELD,QBLANK   BLANK THE WORK FIELD                 FCI*\n         MVC   OFFSET(4),=F'0' ZERO OUT OFFSET AND LENGTH          FCI*\n         LA    R5,12(R5)      INCREMENT TO NEXT FIELD              FCI*\n         CR    R5,R6          WAS THAT THE LAST FIELD?             FCI*\n         BL    ENCORE         NO. PROCESS NEXT FIELD.              FCI*\n         EJECT ,                                                   FCI*\n***********************************************************************\n* GET DATE/TIME FOR HEADING   ENTER WITH BAL R7,GETTIME            FCI*\n* RETURNS WITH JDATE(LEN) = YY.DDD  HH:MM:SS DAY MTH DD,YYYY       FCI*\n*                           123456789.123456789.123456789.123      FCI*\n*                                                                  FCI*\n***********************************************************************\n***********************************************************************\n*                                                                     *\n* GETTIME - REWRITTEN FOR Y2K READINESS             GP@P6 22 NOV 2002 *\n*                                                                     *\n***********************************************************************\nGETTIME  STM   R14,R12,12(R13)             SAVE REGISTERS\n         MVC   JDATE(32),QBLANK            CLEAR RESIDUAL DATA\n         TIME  DEC                         GET CURRENT DATE AND TIME\n         STM   R0,R1,DATEAREA              STORE DATE FOR TESTING\n         ST    R1,DATEAREA+8                 AND CONVERSION\n         UNPK  JDATE+1(5),DATEAREA+5(3)    SHOW JULIAN DATE\n         MVC   JDATE(2),JDATE+1            SHIFT YY LEFT\n         MVI   JDATE+2,C'.'                PUT PERIOD IN YY.DDD\n         UNPK  TIMEHRS(3),DATEAREA(2)      SHOW HOURS\n         MVI   TIMEHRS+2,C':'\n         UNPK  TIMMINS(3),DATEAREA+1(2)    SHOW MINUTES\n         MVI   TIMMINS+2,C':'\n         UNPK  TIMSECS(3),DATEAREA+2(2)    SHOW SECONDS\n         MVI   TIMSECS+2,C' '\n         AP    DATEAREA+4(4),=P'1900000'\n         ZAP   DBLWORK,DATEAREA+4(4)\n         SRP   DBLWORK,64-3,0              GET YEAR.\n         OI    DBLWORK+7,X'0F'             FIX SIGN FOR UNPACK\n         UNPK  CYR,DBLWORK                 SHOW 4-DIGIT YEAR\n         CVB   R5,DBLWORK                  GET BINARY YEAR\n         SLR   R4,R4\n         D     R4,=F'100'\n         ST    R4,BINYEAR                  GET YEAR OF CENTURY\n         ST    R5,BINCENT                  GET CENTURY\n         XC    DATEAREA(6),DATEAREA        GET JULIAN DAY IN DECIMAL\n         CVB   R4,DATEAREA                 GET JULIAN DAY IN BINARY\n         SLR   R1,R1\n         LA    R5,MNTHTBL-6                ADJUST FOR FIRST INCREMENT\n         TM    DATEAREA+9,X'01'            IF ODD THEN\n         BO    NOTLEAP                                 NOT LEAP YEAR\n         TM    DATEAREA+9,X'12'            TEST FOR LEAP (OK TILL 2099)\n         BNM   NEXTMNTH                       IF MIXED NOT LEAP YEAR\nNOTLEAP  CH    R4,=H'60'                   DDD AFTER 28TH FEBRUARY?\n         BL    NEXTMNTH                    NO, LEAP YEAR IRRELEVANT\n         LA    R4,1(,R4)                   YES, FUDGE DDD ACCORDINGLY\nNEXTMNTH LA    R5,6(,R5)                   INCREMENT THRU MONTH TABLE\n         LA    R1,1(,R1)                   INCREMENT MONTH NUMBER\n         SH    R4,0(,R5)                   DECREASE NUMBER OF DAYS\n         BP    NEXTMNTH                    NOT YET, TRY NEXT MONTH\n         AH    R4,0(,R5)                   FOUND THE MONTH\n         ST    R4,BINDAYS                  SAVE DAY OF MONTH\n         CVD   R4,DBLWORK\n         OI    DBLWORK+7,X'0F'\n         UNPK  CDAYN(2),DBLWORK            SHOW DAY OF MONTH\n         MVC   CMON(3),2(R5)               SHOW NAME OF MONTH\n         BCTR  R1,0                        BEGIN ZELLER'S CONGRUENCE\n         BCTR  R1,0\n         LTR   R1,R1\n         BP    YEAROKAY                    MONTH-2>0\n         AH    R1,=H'12'\n         L     R5,BINYEAR\n         BCTR  R5,0\n         LTR   R5,R5\n         BNM   CENTOKAY                    YEAR NOT NEGATIVE\n         LA    R5,99\n         L     R6,BINCENT\n         BCTR  R6,0\n         ST    R6,BINCENT                  GET CENTURY (CC)\nCENTOKAY ST    R5,BINYEAR                      YEAR (YY) AND MONTH (MM)\nYEAROKAY EQU   *                               OF 2 MONTHS AGO\n         M     R0,=F'26'\n         BCTR  R1,0\n         BCTR  R1,0\n         D     R0,=F'10'                   R1 = ((MM*26)-2)/10\n         L     R2,BINYEAR\n         SRL   R2,2                        R2 = YY/4\n         L     R3,BINCENT\n         LR    R4,R3\n         SRL   R3,2                        R3 = CC/4\n         SLL   R4,1                        R4 = CC*2\n         LR    R7,R1\n         A     R7,BINDAYS\n         A     R7,BINYEAR\n         AR    R7,R2\n         AR    R7,R3\n         SR    R7,R4\n         SLR   R6,R6\n         LR    R1,R7                       COPY NUMERATOR\n         LPR   R7,R7                       AVOID -VE DIVIDE RESULTS\n         LA    R15,7                       GET DENOMINATOR\n         DR    R6,R15\n         LTR   R1,R1                       NEGATIVE NUMERATOR?\n         BNM   MODULOOK                    NO, SO MOD(X,7)=REM(X/7)\n         SR    R15,R6                      YES, ADJUST SO THAT RESULT\n         LR    R6,R15                      OF MOD(_,_) IS NOT NEGATIVE\nMODULOOK SLL   R6,2                        DAY OF WEEK (0=SUNDAY) BY 4\n         LA    R6,DAYTBL(R6)\n         MVC   CDAY(3),0(R6)               SHOW NAME OF DAY OF WEEK\n         LM    R14,R12,12(R13)\n         BR    R7                          RETURN\n         SPACE\nMNTHTBL  DC    H'31',C'JAN '\n         DC    H'29',C'FEB '\n         DC    H'31',C'MAR '\n         DC    H'30',C'APR '\n         DC    H'31',C'MAY '\n         DC    H'30',C'JUN '\n         DC    H'31',C'JUL '\n         DC    H'31',C'AUG '\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'99',C'DEC '             (ALLOW FOR STUPID DDD)\nDAYTBL   DC    C'SUN MON TUE WED THU FRI SAT '\n********       END OF GETTIME REWRITE   22NOV2002                 GP@P6\n         EJECT ,                                                   FCI*\n***********************************************************************\n* ALLOC HARDCOPY TO HASPPRNT DDNAME                                FCI*\n*                                                                  FCI*\n***********************************************************************\nALLOCHC  MVC   DYNALLOC(S99LENG),S99RBPTR COPY DYN ALLOCATION LIST.\n         LA    R1,P99RB           RELOCATE THE LIST ADDRESSES.     FCI*\n         STCM  R1,B'0111',P99RBPTR+1  *                            FCI*\n         LA    R1,P99TUPL             *                            FCI*\n         ST    R1,P99TXTPP            *                            FCI*\n         LA    R1,P99TUKY1            *                            FCI*\n         STCM  R1,B'0111',P99TUPL+1   *                            FCI*\n         LA    R1,P99TUKY2            *                            FCI*\n         STCM  R1,B'0111',P99TUPL+5   *                            FCI*\n         LA    R1,P99TUKY3            *                            FCI*\n         STCM  R1,B'0111',P99UPLL+1   *                            FCI*\n*  PROCESS PARMS..........                                         FCI*\n         LH    R1,QPLNG2        GET LENGTH OF SECOND PARM          FCI*\n         CH    R1,=H'1'         LENGTH OF ONE?                     FCI*\n         BNE   NOCLSCHG         NO..NO CHANGE OF SYSOUT CLASS      FCI*\n         CLI   QPPARM2,C'A'     IS IT ALPHA                        FCI*\n         BL    NOCLSCHG                                            FCI*\n         MVC   P99SYSOC,QPPARM2 MOVE IN PARM FOR SYSOUT CLASS      FCI*\nNOCLSCHG CLI   QPPARM3,C' '     ANY DEST SPECIFIED                 FCI*\n         BE    NODEST                                              FCI*\n         MVC   P99DEST,QPPARM3  MOVE IN DEST                       FCI*\n         MVC   P99DESTL,QPLNG3  MOVE IN LENGTH                     FCI*\n         MVI   P99EPARM,X'00'   SAY CLASS IS NOT LAST PARM         FCI*\n*  DO THE ALLOCATE                                                 FCI*\nNODEST   LA    1,DYNALLOC         ADDR OF PARM LIST FOR DYNALLOC.  FCI*\n         DYNALLOC                                                  FCI*\n         LTR   R15,R15            CHK RETURN CODE                  FCI*\n         BNZ   CANTALLC           NO CAN DO..POST MESSAGE          FCI*\n         LA    R6,HASPPRNT        ADDRESS OF OUTPUT DCB.           FCI*\n         USING IHADCB,R6          ADDRESSABILITY TO OUTPUT DCB.    FCI*\n         LA    R1,DBLWORK         BUILD                            FCI*\n         MVI   0(R1),X'80'          ONLY ENTRY IN LIST             FCI*\n         OPEN  ((6),(OUTPUT)),MF=(E,(1))  OPEN THE FILE            FCI*\n         TM    DCBOFLGS,X'10'     CHECK FOR SUCCESSFUL OPEN.       FCI*\n         DROP  R6                 ELIMINATE DCB ADDRESSABILITY.    FCI*\n         BZ    PRNTBAD            BYPASS SWITCH SETTING IF BAD OPEN.\n         OI    QPFLAG,HARDCPY     INDICATE HARDCPY FILE AVAILABLE. FCI*\n         MVC   QDTLINE(L'MSGSTART),MSGSTART  MOVE IN START MSG     FCI*\n         MVC   M1CLASS,P99SYSOC   MOVE IN SYSOUT CLASS             FCI*\n         MVC   M1DEST,P99DEST                                      FCI*\n         CLI   M1DEST,C' '        ANY DEST?                        FCI*\n         BNE   PRNTOKAY                                            FCI*\n         MVC   M1DEST,=CL8'LOCAL' SAY LOCAL                        FCI*\n         B     PRNTOKAY           BYPASS TPUT ERROR MSG.           FCI*\n         EJECT ,                                                   FCI*\nPRNTBAD  QTILT 'SORRY...UNABLE TO ALLOC/OPEN HASPPRNT FOR HARDCOPY'\nPRNTOKAY BR    R7                 RETURN                           FCI*\n         SPACE 2                                                   FCI*\nMSGSTART DC    CL63'PRINT STARTED; SYSOUT=X,DEST=XXXXXXXX'         FCI*\n         EJECT ,                                                   FCI*\n***********************************************************************\n*        FORMULATE TEXT FOR SVC99 ALLOCATE FAILURE                 FCI*\n***********************************************************************\n         SPACE 3                                                   FCI*\nCANTALLC MVC   QDTLINE,QBLANK     CLEAR OUT LINE                   FCI*\n         CLC   P99ERROR,=X'046C'  WAS IT 'RMT NOT DEF TO JES2'?    FCI*\n         BE    BADRMT             YES..POST MSG AND EXIT           FCI*\n*                                                                  FCI*\n         MVC   QDTLINE(L'MSGERR),MSGERR                            FCI*\n         CVD   R15,DBLWORK        CONVERT SVC 99 RETURN CODE       FCI*\n         MVC   M2RC,=X'40202020'   TO NICE PRINTABLE DECIMAL       FCI*\n         ED    M2RC,DBLWORK+6                                      FCI*\n*                                                                  FCI*\n         UNPK  M2ERC(5),P99ERROR(3) CONVERT DYNAM ALLOC ERR CODE   FCI*\n         NC    M2ERC,HEXMASK         TO PRINTABLE HEXADECIMAL      FCI*\n         TR    M2ERC,HEXTAB          AND FIX IT UP PRETTY          FCI*\n         MVI   M2ERC+4,C' '                                        FCI*\n*                                                                  FCI*\n         UNPK  M2INFO(5),P99INFO(3) CONVERT DYNAM ALLOC INFO       FCI*\n         NC    M2INFO,HEXMASK        CODE TO PRNTABLE HEX          FCI*\n         TR    M2INFO,HEXTAB         AND FIX IT UP PRETTY          FCI*\n         MVI   M2INFO+4,C' '                                       FCI*\n         B     GOTMSG                   AND GO POST THE MESSAGE    FCI*\n*                                                                  FCI*\nBADRMT   MVC   QDTLINE(L'MSGNRMT),MSGNRMT  MOVE IN NO SUCH REMOTE MSG\n         MVC   MREMOTE,QPPARM3         MOVE IN REMOTE ASKED FOR    FCI*\n         B     GOTMSG                   AND GO POST THE MESSAGE    FCI*\n         SPACE 2                                                   FCI*\nHEXTAB   DC    C'0123456789ABCDEF'                                 FCI*\nHEXMASK  DC    X'0F0F0F0F0F0F0F0F'                                 FCI*\nMSGNRMT  DC    C'REMOTE XXXXXXXX NOT DEFINED TO JES2; PRINT BYPASSED'\nMSGERR   DC    C'CANT ALLOC SYSOUT FOR PRINT; DARC= XXXX INFO= XXXX R15X\n               = XXXX '                                            FCI*\n***********************************************************************\n         EJECT ,                                                   FCI*\n         LTORG                                                     FCI*\n         SPACE 2                                                   FCI*\n         DS    0F                                                  FCI*\n*                                          SVC 99 REQUEST BLOCK  PTR\nS99RBPTR DC    X'80',AL3(S99RB)                                    FCI*\n*                                          SVC 99 REQUEST BLOCK    FCI*\nS99RB    DS    0F                                                  FCI*\nS99RBLN  DC    AL1(20)                     LENGTH=20 BYTES         FCI*\nS99VERB  DC    X'01'                       VERB CODE=01 (DSNAME ALLOC)\nS99FLAG1 DC    X'1000'                     DONT USE EXISTING ALLOC FCI*\nS99ERROR DC    AL2(0)                              ERROR CODE      FCI*\nS99INFO  DC    AL2(0)                              INFO  CODE      FCI*\nS99TXTPP DC    A(S99TUPL)                 POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                          RESERVED              FCI*\nS99FLAG2 DC    A(0)                          FLAGS 2               FCI*\nS99TUPL  DC    A(S99TUKY1)                TEXT UNIT POINTERS       FCI*\nS99EPARM DC    X'80',AL3(S99TUKY2)        LAST PARM IF NO DEST=    FCI*\n         DC    X'80',AL3(S99TUKY3)        LAST PARM IF DEST= GIVEN FCI*\nS99TUNIT DS    0F                                                  FCI*\n*                                                  DDNAME=HASPPRNT FCI*\nS99TUKY1 DC    X'0001',X'0001',X'0008',C'HASPPRNT'                 FCI*\n*                                                  SYSOUT=A        FCI*\nS99TUKY2 DC    X'0018',X'0001',X'0001'                             FCI*\n         AIF   (&QRNB).RNB10A                                     RNB10\nS99SYSOC DC    C'A'                                                FCI*\n         AGO   .RNB10B                                            RNB10\n.RNB10A  ANOP                                                     RNB10\nS99SYSOC DC    C'C'                                               RNB10\n.RNB10B  ANOP                                                     RNB10\n*                                      OPTIONAL    DEST=RMTXXX     FCI*\nS99TUKY3 DC    X'0058',X'0001'                                     FCI*\nS99DESTL DC    X'0000'   LENGTH OF DEST                            FCI*\nS99DEST  DC    CL8' '  DEST PARAMETER                              FCI*\n*                                                                  FCI*\n         DS    0D                                                  FCI*\nS99LENG  EQU   *-S99RBPTR              LENGTH OF WHOLE MAGILLA     FCI*\n         EJECT ,                                                   FCI*\n*.....................................................................*\n*.       DYNAMIC ALLOCATION REQUEST BLOCK TO FREE DDNAME HASPPRNT    .*\n*.....................................................................*\n         SPACE 3                                                   FCI*\n         DS    0F                  GET FULLWORD BOUNDARY           FCI*\nF99PTR   DC    X'80',AL3(F99RB)    THE POINTER TO THE MESS..       FCI*\n*                                                                  FCI*\nF99RB    DC    FL1'20'            LENGTH OF RB IN BYTES = 20       FCI*\n         DC    XL1'02'            VERB CODE=X'02'..FREE BY DDN     FCI*\n         DC    AL2(0)             FLAGS1..NO OPTIONS               FCI*\nF99RC    DC    XL2'0000'          ERROR CODE                       FCI*\nF99INFO  DC    XL2'0000'          INFO CODE                        FCI*\n         DC    AL4(F99TXPT)       ADDRESS OF TEXT UNITS            FCI*\n         DC    XL4'00'            RESERVED                         FCI*\n         DC    XL4'00'            FLAGS2                           FCI*\n         SPACE 2                                                   FCI*\nF99TXPT DC     AL4(F99TU1)        ADDR OF DSN TEXT UNIT            FCI*\n         DC    X'80',AL3(F99TU2) ADDR OF UNALLOC TEXT TU(LAST)     FCI*\n         SPACE 2                                                   FCI*\nF99TU1   DC    X'0001',X'0001',FL2'8',C'HASPPRNT' DDNAME           FCI*\nF99TU2   DC    X'0007',X'0000'        UNALLOC EVEN IF PERM ALLOC   FCI*\nF99LEN   EQU   *-F99PTR           LENGTH OF FILEDS                 FCI*\n         SPACE 2                                                  GP@P6\nPRTXLATE DC    64C' ',191AL1(*-PRTXLATE),C' '                     GP@P6\n         EJECT ,                                                   FCI*\n***********************************************************************\nWORK     DSECT                                                     FCI*\n         DS    CL76                                                FCI*\nOFFSET   DS    H                                                   FCI*\nLENGTH   DS    H                                                   FCI*\nFIELD    DS    CL8                                                 FCI*\nRPASS    DS    CL8                                                 FCI*\nDBLWORK  DS    D                                                   FCI*\nDATEAREA DS    3F                                                 GP@P6\nBINCENT  DS    F                                                  GP@P6\nBINYEAR  DS    F                                                   FCI*\nBINDAYS  DS    F                                                   FCI*\nWORKWORD DS    2F                                                  FCI*\n***********************************************************************\n* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES       FCI*\n*                                                                  FCI*\nJDATE    DC    C'XX.XXX',C'  '                           E  F      FCI*\nTIMEHRS  DC    CL2' ',C':'                               A  I  T   FCI*\nTIMMINS  DC    CL2' ',C':'                               V  E  O   FCI*\nTIMSECS  DC    CL2' ',C' '                               E  L  G   FCI*\nCDAY     DC    CL3' ',C' '                                  D  E   FCI*\nCMON     DC    CL3' ',C' '                                  S  T   FCI*\nCDAYN    DC    CL2' ',C','                                     H   FCI*\nCYR      DC    CL4' ',C' '       4-DIGIT YEAR (GP@P6)          E   FCI*\n*                                                              R   FCI*\n***********************************************************************\nLEN      EQU   *-JDATE                                             FCI*\n         SPACE 2                                                   FCI*\n         DS    0F                                                  FCI*\nDYNALLOC DS    (S99LENG)XL1                                        FCI*\n         ORG   DYNALLOC                                            FCI*\n*                                          SVC 99 REQUEST BLOCK  PTR\nP99RBPTR DC    X'80',AL3(P99RB)                                    FCI*\n*                                          SVC 99 REQUEST BLOCK    FCI*\nP99RB    DS    0F                                                  FCI*\nP99RBLN  DC    AL1(20)                     LENGTH=20 BYTES         FCI*\nP99VERB  DC    X'01'                       VERB CODE=01 (DSNAME ALLOC)\nP99FLAG1 DC    X'1000'                     DONT USE EXISTING ALLOC FCI*\nP99ERROR DC    AL2(0)                              ERROR CODE      FCI*\nP99INFO  DC    AL2(0)                              INFO  CODE      FCI*\nP99TXTPP DC    A(P99TUPL)                 POINTER TO TEXT UNIT POINTERS\nP99RSVD1 DC    A(0)                          RESERVED              FCI*\nP99FLAG2 DC    A(0)                          FLAGS 2               FCI*\nP99TUPL  DC    A(P99TUKY1)                TEXT UNIT POINTERS       FCI*\nP99EPARM DC    X'80',AL3(P99TUKY2)        LAST PARM IF NO DEST=    FCI*\nP99UPLL  DC    X'80',AL3(P99TUKY3)        LAST PARM IF DEST= GIVEN FCI*\nP99TUNIT DS    0F                                                  FCI*\n*                                                  DDNAME=HASPPRNT FCI*\nP99TUKY1 DC    X'0001',X'0001',X'0008',C'HASPPRNT'                 FCI*\n*                                                  SYSOUT=A        FCI*\nP99TUKY2 DC    X'0018',X'0001',X'0001'                             FCI*\nP99SYSOC DC    C'A'                                                FCI*\n*                                      OPTIONAL    DEST=RMTXXX     FCI*\nP99TUKY3 DC    X'0058',X'0001'                                     FCI*\nP99DESTL DC    X'0000'   LENGTH OF DEST                            FCI*\nP99DEST  DC    CL8' '  DEST PARAMETER                              FCI*\n*                                                                  FCI*\n         ORG   DYNALLOC                                            FCI*\n         DS    0F                  GET FULLWORD BOUNDARY           FCI*\nFREEPTR  DC    X'80',AL3(FREERB)   THE POINTER TO THE MESS..       FCI*\n*                                                                  FCI*\nFREERB   DC    FL1'20'            LENGTH OF RB IN BYTES = 20       FCI*\n         DC    XL1'02'            VERB CODE=X'02'..FREE BY DDN     FCI*\n         DC    AL2(0)             FLAGS1..NO OPTIONS               FCI*\nFREERC   DC    XL2'0000'          ERROR CODE                       FCI*\nFREEINFO DC    XL2'0000'          INFO CODE                        FCI*\nFREETPTR DC    AL4(FREETXPT)      ADDRESS OF TEXT UNITS            FCI*\n         DC    XL4'00'            RESERVED                         FCI*\n         DC    XL4'00'            FLAGS2                           FCI*\n         SPACE 2                                                   FCI*\nFREETXPT DC    AL4(FREETU1)       ADDR OF DSN TEXT UNIT            FCI*\n         DC    X'80',AL3(FREETU2) ADDR OF UNALLOC TEXT TU(LAST)    FCI*\n         SPACE 2                                                   FCI*\nFREETU1  DC    X'0001',X'0001',FL2'8',C'HASPPRNT' DDNAME           FCI*\nFREETU2  DC    X'0007',X'0000'        UNALLOC EVEN IF PERM ALLOC   FCI*\n         ORG   ,                                                   FCI*\n*                                                                  FCI*\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON                                                   FCI*\n         SPACE 2                                                   FCI*\nMREMOTE  EQU   QDTLINE+7,8                                         FCI*\nM2ERC    EQU   QDTLINE+35,4                                        FCI*\nM2INFO   EQU   QDTLINE+46,4                                        FCI*\nM2RC     EQU   QDTLINE+56,4                                        FCI*\nM1CLASS  EQU   QDTLINE+22,1                                        FCI*\nM1DEST   EQU   QDTLINE+29,8                                        FCI*\n         EJECT ,                                                   FCI*\nPRINT    CSECT                                                     FCI*\n         PRINT NOGEN                                               FCI*\n         DCBD  DSORG=(PS)                                          FCI*\n         PRINT GEN                                                 FCI*\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END  ,                                                    FCI*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QCOMMON": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\"\\x00\\x00\\x01\\x02\\x15?\\x01\\x03\\x04o\\x075\\x01\\x98\\x01r\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.34", "flags": 0, "createdate": "2002-06-02T00:00:00", "modifydate": "2003-02-15T07:35:00", "lines": 408, "newlines": 370, "modlines": 0, "user": "GREG"}, "text": "         MACRO\n         QCOMMON &CSECT=NO\n         GBLB  &QPFK      PF-KEY OPTION. SEE QSTART MACRO          ICBC\n         GBLB  &QSP       MVS/SP OPTION. SEE QSTART MACRO         UF020\n         GBLB  &QRACF     RACF OPTION. SEE QSTART MACRO           RNB03\n         GBLC  &QRACUSR   RACF USERID. SEE QSTART MACRO           RNB03\n         LCLA  &RACLEN    LENGTH OF RACF USERID                   RNB03\n         LCLA  &SIZE      BLOCK SIZE FOR CKPT DCB\n         AIF   ('&CSECT' EQ 'YES').CSECT\n         TITLE 'QUEUE COMMAND - COMMON AREA DSECT'\n***********************************************************************\n*                                                                     *\n*   QUEUE COMMAND - COMMON AREA DSECT                                 *\n*                                                                     *\n***********************************************************************\nQCOMMON  DSECT\n.CSECT   ANOP\n***********************************************************************\n*                                                                     *\n*   VECTOR TABLE - ADDRESSES OF AREAS IN QCOMMON                      *\n*                                                                     *\n***********************************************************************\nQVDSPL   DC    A(QDISPLAY)    PTR TO DISPLAY WORK AREA\nQVDAIR   DC    A(QDAIR)       PTR TO DAIR WORK AREA\nQVCKPT   DC    A(QCKPT)       PTR TO CKPT WORK AREA\nQVPRINT  DC    A(QCPRINT)     PTR TO PRINT WORK AREA               FCI*\n         DC    3F'0'          SPARE POINTERS RESERVED FOR FUTURE\nQFRSTSA  DC    A(0)           ADDRESS OF FIRST SAVE AREA\n***********************************************************************\n*                                                                     *\n*   MISCELLANEOUS NUTS AND BOLTS                                      *\n*                                                                     *\n***********************************************************************\nQDWORK   DC    D'0'           SCRATCH DOUBLE WORD                 UF009\nQDWORD   DC    D'0'           SCRATCH DOUBLE WORD                 UF009\nQLOGON   DC    CL8' '         LOGON ID (JOBNAME)\nQCLASSH  DC    0H'0',X'00'    HALFWORD BOUNDARY\nQCLASS   DC    C' '           SEARCH CLASS\nQCODEH   DC    0H'0',X'00'    HALFWORD BOUNDARY\nQCODE    DC    X'00'          SEARCH FUNCTION CODE\nQSUBCMD  DC    A(0)           ADDR OF CURRENT SUBCOMMAND\nQOFF0    DC    H'0'           OFFSET TO SUBCOMMAND\nQLNG0    DC    H'0'           LENGTH OF SUBCOMMAND\nQSUBNAME DC    CL8' '         NAME OF SUBCOMMAND                  UF018\nQOFF1    DC    H'0'           OFFSET TO QPARM1\nQLNG1    DC    H'0'           LENGTH OF QPARM1\nQPARM1   DC    CL8' '         USER SUPPLIED PARAMETER #1\nQOFF2    DC    H'0'\nQLNG2    DC    H'0'\nQPARM2   DC    CL8' '                                 #2\nQOFF3    DC    H'0'\nQLNG3    DC    H'0'\nQPARM3   DC    CL8' '                                 #3\nQOFF4    DC    H'0'\nQLNG4    DC    H'0'\nQPARM4   DC    CL8' '                                 #4\nPF3LEVEL DC    H'0'           PF3 LEVELS BEFORE EXIT COUNT        GP@P6\nPF3CMD1  DC    CL2' '         LEVEL-1 MEANING OF PF3              GP@P6\nQPARM1SV DC    CL8' '         LEVEL-1 OPERAND FOR PF3             GP@P6\nQXAUTH   DC    X'00'          AUTOMATIC HOLD\nQFLAG1   DC    X'08'          FLAG BYTE - START WITH RESHOW GP@P6 UF009\nQFLG1IOE EQU   X'80'          I/O ERROR ON SPOOL READ             UF009\nQFLG1OPR EQU   X'40'          TSO OPERATOR AUTHORITY              UF010\nQFLG1DBC EQU   X'20'          ESTAE ENVIRONMENT ESTABLISHED       UF024\nQFLG1LCL EQU   X'10'          Q20 - SEARCHING LOCAL JOE QUE (SP3) RNB16\nQFLG1RSH EQU   X'08'          Q5  - ENSURE CORRECT SCREEN SIZE    GP@P6\nQFLG1APF EQU   X'04'          IN APF AUTHORISED ENVIRONMENT       GP@P6\nQFLG1SEL EQU   X'02'          LINE SELECTION OR PF3/15 PERFORMED  GP@P6\nQFLG1HLP EQU   X'01'          HELP PROCESSING ACTIVE              GP@P6\nQFLAG2   DC    X'C0'          FLAG BYTE - START WITH EDS AND PNS  GP@P6\nQFLG2EDS EQU   X'80'          USE EXTENDED DATA STREAM ORDERS     GP@P6\nQFLG2PNS EQU   X'40'          USE \"POINT-AND-SHOOT\"               GP@P6\n         DC    XL1'0'         RESERVED                            UF009\nQBLANK   DC    CL132' '       132 BLANKS                          UF003\nQFZONE   DC    C'0'           USED TO CLEAR QFZONES\nQFZONES  DC    C'00000000'    USED FOR NUMERIC CHECK\nQCOUNT   DC    PL3'0'         NUMBER OF ELEMENTS IN QUEUE\nQCOUNTA  DC    PL3'0'         NUMBER OF ELEMENTS IN AWAITING QUEUE\nQCOUNTE  DC    PL3'0'         NUMBER OF ELEMENTS IN EXECUTION QUEUE\nQCOUNTH  DC    PL3'0'         NUMBER OF ELEMENTS IN HOLD QUEUE\nQOFFS    DC    H'0'           START COLUMN FOR FIND\nQOFFE    DC    H'0'           END COLUMN FOR FIND\nQDELIMIT DC    C' '           DELIMITER\nQRSVD    DC    XL15'0'        RSVD\nQPNEXT   DC    F'0'           DATA SET JUMP DIRECTION AND COUNT   GP@P6\nQPJOBID  DC    F'0'           JOB ID FOR LISTDS     ** THESE TWO FIELDS\nQPDSID   DC    H'0'           DATASET ID FOR LISTDS ** MUST BE CONTIG.\nQPOFFSET DC    H'0'           PRINT OFFSET FROM BEGINNING OF RECORD\nQPREC    DC    PL4'0'         CURRENT RECORD COUNT\nQPLNG    DC    H'0'           LENGTH OF COMPARE FIELD FOR FIND\nQPFIND   DC    CL58' '        COMPARE FIELD FOR FIND\nQSYSID   DC    CL8' '         SYSTEM ID TABLE\n*   EACH SYSTEM ID THAT EXISTS IS LOADED FROM THE CHECKPOINT RECORD\n         DC    CL8'SID1'      SYSTEM ID FOR SYSTEM 1\n         DC    CL8'SID2'                           2\n         DC    CL8'SID3'                           3\n         DC    CL8'SID4'                           4\n         DC    CL8'SID5'                           5\n         DC    CL8'SID6'                           6\n         DC    CL8'SID7'                           7\n         EJECT\n***********************************************************************\n*                                                                     *\n*   SAVE AREA FOR GETMAIN/FREEMAIN                                    *\n*                                                                     *\n***********************************************************************\nQGETAREA DC    3F'0'\nQGETA1   EQU   QGETAREA+0\nQGETA2   EQU   QGETAREA+4\nQGETA3   EQU   QGETAREA+8\nQGETLNGH DC    F'65536',2F'0'\nQGETL2   EQU   QGETLNGH+4\nQGETL3   EQU   QGETLNGH+8\nQFREE    FREEMAIN L,LA=QGETLNGH,A=QGETAREA,MF=L\n***********************************************************************\n*                                                                     *\n*   LIST FORM OF TPUT                                                 *\n*                                                                     *\n***********************************************************************\nQTPUT    TPUT  0,0,NOEDIT,MF=L                                    GP@P6\n         EJECT\n***********************************************************************\n*                                                                     *\n*   DATASET ALLOCATION FIELDS                                         *\n*      (ADAPTED FROM SYS1.MACLIB (IKJDAPL,IKJDAP08,0C,18))            *\n*                                                                     *\n***********************************************************************\nQDAIR    DS    0D             START OF DAIR WORK AREAS\nDAIRECB  DC    F'0'           ECB USED BY DAIR\nDAIRFLAG DC    X'00'          FLAG USED BY ALLOCATE SUBROUTINE\n         DC    XL3'0'         DEAD SPACE FOR ALLIGNMENT\n***********************************************************************\n*    THE DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR) PARAMETER LIST   *\n*    (DAPL) IS A LIST OF ADDRESSES PASSED FROM THE INVOKER TO DAIR    *\n*    VIA REGISTER 1                                                   *\n***********************************************************************\nDAPLUPT  DC    A(0)     PTR TO UPT\nDAPLECT  DC    A(0)     PTR TO ECT\nDAPLECB  DC    A(DAIRECB) PTR TO CP'S ECB\nDAPLPSCB DC    A(0)     PTR TO PSCB\nDAPLDAPB DC    A(0)     PTR TO DAIR PARAMETER BLOCK\n***********************************************************************\n*                                                                     *\n*   ALLOCATE DDNAME(W) DSNAME(X) SHR UNIT(Y) VOLUME(Z)                *\n*                                                                     *\n***********************************************************************\nDA08CD   DC    X'0008'  DAIR ENTRY CODE\nDA08FLG  DC    X'00'    FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\n         DC    X'00'\nDA08DARC DC    H'0'     DYN ALLOC RETURN CODE\nDA08CTRC DC    H'0'     CATALOG RETURN CODE\nDA08PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA08DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE\n* YOU MUST SUPPLY THE DEFAULT UNIT AND VOLUME SERIAL FOR YOUR SYSTEM\nDA08UNIT DC    CL8'SYSALLDA' UNITNAME FOR SYS1.HASPCKPT\nDA08SER  DC    CL8'*CKPT*  ' VOLUME SERIAL FOR SYS1.HASPCKPT\nDA08BLK  DC    F'0'     DATA SET  AVERAGE RECORD LENGTH\nDA08PQTY DC    F'0'     PRIMARY SPACE QUANTITY\nDA08SQTY DC    F'0'     SECONDARY SPACE QUANTITY\nDA08DQTY DC    F'0'     DIRECTORY BLOCK QUANTITY\nDA08MNM  DC    CL8' '   MEMBER NAME\nDA08PSWD DC    CL8' '   PASSWORD\nDA08DSP1 DC    X'08'    DATA SET STATUS FLGS - SHR\nDA08DPS2 DC    X'08'    DATA SET DISPOSITION - KEEP\nDA08DPS3 DC    X'08'    DATA SET CONDITIONAL DISPOSITION - KEEP\nDA08CTL  DC    X'00'    FLAGS TO CONTROL ACTIONS TAKEN BY DAIR\n         DC    XL3'0'   RESERVED\nDA08DSO  DC    X'00'    DSORG\nDA08ALN  DC    CL8' '   ATTR-LIST-NAME                           C99236\n***********************************************************************\n*                                                                     *\n*   FREE DDNAME(XXXXXXXX)                                             *\n*                                                                     *\n***********************************************************************\nDA18CD   DC    X'0018'  DAIR ENTRY CODE\nDA18FLG  DC    X'00'    FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\n         DC    X'00'\nDA18DARC DC    H'0'     DYNAMIC ALLOCATION RETURN CODE\nDA18CTRC DC    H'0'     CATALOG RETURN CODE AREA\nDA18PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA18DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE\nDA18MNM  DC    CL8' '   MEMBER NAME\nDA18SCLS DC    CL2' '   SYSOUT CLASS DESIRED WHEN UNALLOCATING  A\n*                       SYSOUT DATA SET\nDA18DPS2 DC    X'08'    DATA SET DISPOSITION - KEEP\nDA18CTL  DC    X'10'    FLAGS FOR SPECIAL DAIR PROCESSING\nDA18JBNM DC    CL8' '   IGNORED AS OF OS VS/2 RELEASE 2       Y02670\n         EJECT\n***********************************************************************\n*                                                                     *\n*   CHECKPOINT WORK AREAS                                             *\n*                                                                     *\n***********************************************************************\n* NOTE - BLOCKSIZES ARE INSTALLATION DEPENDENT\nQCKPT    DS    0D\n         AIF   (NOT &QSP).QSP1                                    UF020\nQCJIXL   DC    A(0)                                               UF020\nQCJIXA   DC    A(0)           ADDRESS OF JIX IOAREA               UF020\n.QSP1    ANOP                                                     UF020\nQCJQTA   DC    A(0)           ADDRESS OF JQT IOAREA\nQCJOTA   DC    A(0)           ADDRESS OF JOT IOAREA\nQCJCTA   DC    A(0)           ADDRESS OF JCT IOAREA\nQCIOTA   DC    A(0)           ADDRESS OF IOT IOAREA\nQCBLKA   DC    A(0)           ADDRESS OF DATASET BLOCK IOAREA\nQCJQTL   DC    F'0'           ADDRESS OF FIRST CKPT REOCRD\nQCJQEA   DC    A(0)           ADDR OF CURRENT JQE\nQCJOTL   DC    F'0'           COUNT OF RECORDS ON CKPT DS\nQCPDDB1  DC    F'0'           OFFSET IN IOT TO FIRST PDDB\nQCTRAK   DS    0F             DISK ADDR IN THE FORM MTTR\nQCTRAKM  DC    X'0'           EXTENT NUMBER\nQCTRAKTT DC    X'0000'        ABSOLUTE TRACK NUMBER\nQCTRAKR  DC    X'0'           RECORD NUMBER\n         DC    X'0'           EXTRA SPACE NEEDED FOR HEX CONVERT\nQCDAD    DS    0XL8           DISK ADDR IN THE FORM MBBCCHHR\nQCDADM   DC    X'0'           EXTENT NUMBER\nQCDADBB  DC    X'0000'        BIN NUMBER\nQCDADCC  DC    X'0000'        CYLINDER NUMBER\nQCDADHH  DC    X'0000'        HEAD NUMBER\nQCDADR   DC    X'0'           RECORD NUMBER\n         DC    XL3'0'         DEAD SPACE TO GET BACK TO FULLWORD\nQCJQHEAD DC    A(0)           OFFSET TO JQE HEADERS\n         DS    0F\nQCCREC   DC    PL4'0'         CURRENT RECORD NUMBER\nQCCPTR   DC    A(0)           CURRENT TABLE ADDRESS\nQCHREC   DC    PL4'0'         HIGHEST RECORD NUMBER\nQCHPTR   DC    A(0)           HIGHEST TABLE ADDRESS\nQCSTART  DC    A(0)           ADDRESS OF TABLE START\nQCEND    DC    A(0)           ADDRESS OF TABLE END\nQCHLINE  DS    0CL80          HEADING LINE FOR LISTDS\n         DC    C'JOB '\nQCJNAME  DC    CL8' '         JOBNAME\n         DC    C', DSID '\nQCDSNO   DC    CL8' '         DATASET ID NUMBER\n         DC    C', REC #       1'\n         DC    CL40' '\nQCLRECL  DC    H'0'           LRECL FOR SAVE\nQCRECFM  DC    X'0'           RECFM FOR SAVE\nQCSPOOLS DC    36F'0'         LIST OF DCBS FOR HASPACE\nQCTRKCYL DC    36F'0'         LIST OF TRACKS/CYLINDER FOR EACH DCB\n&SIZE    SETA  4096\nHASPCKPT DCB   DDNAME=HASPCKPT,DSORG=PS,MACRF=(RCP),                   X\n               RECFM=U,BLKSIZE=&SIZE\nHASPACE  DCB   DDNAME=HASPACE1,DSORG=DA,MACRF=(RIC),OPTCD=A,           X\n               RECFM=F\nQCDCBL   EQU   *-HASPACE      LENGTH OF HASPACE DCB\nQCOUT    DCB   DDNAME=HASPSAVE,DSORG=PS,MACRF=(PM),BUFL=8192\n         READ  HDECB1,SF,HASPCKPT,,&SIZE,MF=L\n         READ  HDECB2,DI,HASPACE,,0,0,QCDAD,MF=L\nQCOPEN   OPEN  (QCOUT,OUTPUT),MF=L\nHOCKPT   OPEN  (HASPCKPT),MF=L\n***********************************************************************\n*                                                                  FCI*\n*   PRINT WORKAREA                                                 FCI*\n*                                                                  FCI*\n***********************************************************************\nQCPRINT  DS    0D                                                  FCI*\nQPOFF0   DC    H'0'           OFFSET TO SUBCOMMAND                 FCI*\nQPLNG0   DC    H'0'           LENGTH OF SUBCOMMAND                 FCI*\nQPSUBNME DC    CL8'PRINT'     NAME OF SUBCOMMAND                   FCI*\nQPOFF1   DC    H'0'           OFFSET TO QPPARM1                    FCI*\nQPLNG1   DC    H'0'           LENGTH OF QPPARM1                    FCI*\nQPPARM1  DC    CL8' '         USER SUPPLIED PARAMETER #1           FCI*\nQPOFF2   DC    H'0'                                                FCI*\nQPLNG2   DC    H'0'                                                FCI*\nQPPARM2  DC    CL8' '                                 #2           FCI*\nQPOFF3   DC    H'0'                                                FCI*\nQPLNG3   DC    H'0'                                                FCI*\nQPPARM3  DC    CL8' '                                 #3           FCI*\nQPOFF4   DC    H'0'                                                FCI*\nQPLNG4   DC    H'0'                                                FCI*\nQPPARM4  DC    CL8' '                                 #4           FCI*\nQPHEAD1  DC    CL1'1'                                              FCI*\n*        123456789.123456789.123456789.123456789.'                 FCI*\n DC CL40'QUEUE HARDCOPY LOG  USER=XXXXXXXX  DATE='                 FCI*\n DC CL40'YY.DDD  HH:MM:SS DAY MON DD,19XX   XXXXX'                 FCI*\n DC CL52' '                                                       UF003\n         ORG   QPHEAD1+26                                          FCI*\nQPUSER   DS    CL8           FOR USERID                            FCI*\n         ORG   QPHEAD1+41                                          FCI*\nQPDATE   DS    CL32                                                FCI*\n         ORG   QPHEAD1+75                                          FCI*\nQPPAGE#  DS    CL6                                                 FCI*\n         ORG   ,                                                   FCI*\nQPHEAD2  DS    0CL81                                               FCI*\n         DC    C' ',80C'-'                                         FCI*\n         DC    52C' '                                             UF003\nQPDETAIL DC    CL1' '         ASA CONTROL CHARACTER                FCI*\nQPLINE   DC    CL132' '       TO HOLD PRINT LINE                  UF003\nQPPAGE   DC    PL3'1'                                              FCI*\nQPFLAG   DC    XL1'00'                                             FCI*\nHARDCPY  EQU   X'80'                                               FCI*\nQPRSAVE  DS    CL63           SAVE AREA TO HOLD SUBTITLE INFO      FCI*\nQPPWORK  DC    6F'0'          SPARE WORK ZONE                      FCI*\n         DS    0F                                                  FCI*\n*HASPPRNT DCB  DDNAME=HASPPRNT,DSORG=PS,MACRF=(PM),                FCI*\n*              RECFM=FA,LRECL=133,BLKSIZE=133                     UF003\nHASPPRNT DCB   DDNAME=HASPPRNT,DSORG=PS,MACRF=(PM),                FCI*X\n               RECFM=FA,LRECL=133,BLKSIZE=133                     UF003\n         AIF   (NOT &QRACF).RNB03A                                RNB03\n******************************************************************RNB03\n*                                                                *RNB03\n*   RACF FIELDS                                                  *RNB03\n*                                                                *RNB03\n******************************************************************RNB03\n&RACLEN  SETA  K'&QRACUSR       LENGTH OF NEW RACF USERID         RNB03\nQNEWUSR  DC    AL1(&RACLEN),CL8'&QRACUSR'  NEW USERID             RNB03\nQUSRSAV  EQU   *,9                         OLD USERID             RNB03\n         DC    AL1(0),CL8' '               OLD USERID             RNB03\nQRACNMXP DC    CL8'QUEUEXP'       ENTITY FOR RACHECK FOR XP CMD   RNB03\nQRACNMXD DC    CL8'QUEUEXDS'      ENTITY FOR RACHECK FOR XDS CMD  RNB03\nQRACHECK RACHECK ENTITY=QRACNMXP,CLASS='APPL',ATTR=READ,          RNB03X\n               APPL=QRACNMXP,MF=L                                 RNB03\n.RNB03A  ANOP                                                     RNB03\n***********************************************************************\n*                                                                     *\n*   PARAMETER LIST FOR CB3270                         GP@P6 JUNE 2002 *\n*                                                                     *\n***********************************************************************\nQDCBPRM1 DC    A(QDLENGTH)    POINTER TO DATA STREAM LENGTH FULLWORD\nQDCBPRM2 DC    A(QDSCRPLN)    POINTER TO SCREEN SIZE FULLWORD\nQDCBPRM3 DC    A(QDOUTPUT)    POINTER TO START OF INPUT DATA STREAM\nQDCBPRM4 DC    A(QDOUTPUT)    POINTER TO START OF OUTPUT DATA STREAM\n         EJECT\n***********************************************************************\n*                                                                     *\n*   DISPLAY WORK FIELDS                                               *\n*                                                                     *\n***********************************************************************\nQDISPLAY DS    0D             START OS DISPLAY WORK AREA\nQDGTRM   GTTERM PRMSZE=QDPRMSZ,ALTSZE=QDALTSZ,ATTRIB=QDATTRB,     GP@P6+\n               TERMID=QDTRMID,MF=L                                GP@P6\nQDPRMSZ  DC    X'1850'        PRIMARY SIZE                        GP@P6\nQDALTSZ  DC    X'1850'        ALTERNATE SIZE                      GP@P6\nQDATTRB  DC    F'0'           TERMINAL ATTRIBUTES                 GP@P6\nQDTRMID  DC    CL16' '        TERMINAL IDENTIFIER                 GP@P6\nQDOSZR0  DC    F'0'           ORIG SCREEN DEPTH                   UF003\nQDOSZR1  DC    F'0'           ORIG SCREEN LINESZ                  UF003\nQDLNELEN DC    H'80'          LENGTH OF DISPLAY LINE              UF003\nQDLNES   DC    PL2'21'        LINES PER SCREEN                    UF003\nQDSCRLEN DC    A(21*80)       LENGTH OF DISPLAY AREA        GP@P6 UF003\nQDSCRPLN DC    A(24*80)       LENGTH OF SHADOWED BUFFER     GP@P6 UF003\nQDLENGTH DC    A(24*80+10)    LENGTH OF OUTPUT DATA STREAM        GP@P6\nQDSHADO@ DC    A(QDSHADOW)    ADDRESS OF SHADOW BUFFER            GP@P6\n         DS    0D                                                 UF003\n         AIF   (NOT &QPFK).PFK1\nPFREPLY  DS    0CL256                                        GP@P6 ICBC\nPFCODE   DC    CL6' '                                              ICBC\nPFTXT    DC    CL63' '                                             ICBC\n         DC    CL187' '       SELECTION CODE BUFFER EXTENSION     GP@P6\n.PFK1    ANOP\nQDISPTYP DC    X'00'          DISPLAY TYPE FOR SELECTION CODES    GP@P6\nQDXI     EQU   X'04'          INITIATOR/TERMINATOR LIST (XI)      GP@P6\nQDDC     EQU   X'03'          ACTIVE ADDRESS SPACE LIST (DC)      GP@P6\nQDDD     EQU   X'02'          DD LIST                             GP@P6\nQDJQ     EQU   X'01'          JQE/JOE LIST                        GP@P6\nQDNA     EQU   X'00'          OTHER (SHOULDN'T GET SELECTION CODE)GP@P6\nQDPLUS@  DC    A(0)           ADDRESS OF \"MORE\" DISPLAY INDICATOR\nQDHLINE@ DC    A(0)           ADDRESS OF HEADING LINE\nQDLINE1@ DC    A(0)           ADDRESS OF MESSAGE AREA\nQDMSGA   DC    A(0)           ADDRESS OF MESSAGE TO BE DISPLAYED\nQDMLNG   DC    H'0'           MESSAGE LENGTH\nQDMSG    DC    CL80' '        WORK AREA FOR BUILDING OUTPUT LINE\nQDRLNG   DC    H'4'           REPLY LENGTH                        UF018\nQDREPLY  DC    CL63'STATUS'   TERMINAL USER REPLY           GP@P6 UF018\n         DC    C' '           RESERVED\nQDNEXT   DC    H'0'           CURRENT LINE NUMBER ON SCREEN\n         DS    0D             PREFER QDSCRTXT DOUBLEWORD ALIGNED  GP@P6\nQDOVER   DC    X'00'          PAGE OVERFLOW INDICATOR\nQDLNCODE DC    X'05'          SHADOW CODE FOR LINE                GP@P6\nQDSCREEN DS    0H             DISPLAY SCREEN\n         DC    X'27'          CONTROL                             UF003\nQDSCRO1  DC    X'F5'          VTAM WRITE COMMAND (WRT/EW/EWA)     UF003\n         DC    X'C1114040'    START FROM TOP LEFT CORNER\nQDSCRTXT DC    CL15'QUEUE COMMAND -' TITLE LINE\n         DC    X'0B'          HIGH INTENSITY INPUT FIELD\nQDTLINE  DC    CL63' '        ECHO PREVIOUS COMMAND\n         DC    X'0C'          LOW INTENSITY OUTPUT FIELD\n* MAKE REST OF DATA DS (DEFINE STORAGE) INSTEAD OF DC (DEFINE CONSTANT)\n* TO REDUCE THE SIZE OF THE OBJECT DECK.  THE METHOD OF STATIC SCREEN\n* BUFFERS USED HERE MEANS THAT THE SIZE OF THIS AREA INCREASES THREE\n* TIMES THE MAXIMUM SUPPORTED SCREEN SIZE INCREASE.    2003-02-14 GP@P6\n         DC    CL80' '        FINISH REST OF TOP 160-COLUMN LINE  GP@P6\n         DS    61CL160        62BY160 IS LARGEST SUPPORTED SCREEN GP@P6\nQDLINEND EQU   *              END OF LINE BUFFERS                 UF003\nQDSLNG   EQU   *-QDSCREEN     LENGTH OF SCREEN BUFFER\n         DS    XL4            ROOM FOR TRAILING SBA AND IC ORDERS\n         SPACE\n***********************************************************************\n*                                                                     *\n*   SCREEN DISPLAY SHADOW AREA                        GP@P6 JUNE 2002 *\n*                                                                     *\n***********************************************************************\n         DS    0D\nQDSHADOW DS    62CL160        UP TO 9920 LOCATIONS     2003-02-14 GP@P6\n         SPACE\n***********************************************************************\n*                                                                     *\n*   TPUT DATA STREAM BUFFER                           GP@P6 JUNE 2002 *\n*                                                                     *\n***********************************************************************\n*\n*  THE 3270 DATA STREAM CONSTRUCTION AREA BELOW NEEDS TO HAVE ENOUGH\n*  CAPACITY TO HOLD THE UNOPTIMISED DATA STREAM WHICH WILL CONTAIN\n*  MORE BYTES THAN THE SCREEN SIZE.  THE DATA STREAM IS OPTIMISED IN\n*  IN PLACE BEFORE TRANSMISSION.\n*\nQDOUTPUT DS    80CL160        OPTIMISED 3270 DATA STREAM OUTPUT AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QHEAD": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x06\\x00\\x00\\x01\\x02\\x16o\\x01\\x03\\x04_\\x14V\\x00\\x16\\x00\\r\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.06", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2003-02-14T14:56:00", "lines": 22, "newlines": 13, "modlines": 0, "user": "GREG"}, "text": "         MACRO\n&NAME    QHEAD &MSGVAR,&ATTR,&TYP=0,&SEL=N,&DMY=N\n&NAME    L     R15,QVDSPL          LOAD BASE REG\n         USING QDISPLAY,R15        BASE REG FOR DISPLAY WORK AREA\n         L     R14,QDHLINE@        POINT TO HEADING LINE\n         MVC   0(80,R14),&MSGVAR\n         L     R14,QDSHADO@        POINT TO THE SHADOW BUFFER\n         AH    R14,QDLNELEN        POINT TO HEADING LINE SHADOW\n         MVI   0(R14),&ATTR        SUPPLY HEADING CHARACTER ATTRIBUTES\n         MVC   1(79,R14),0(R14)\n         MVI   QDISPTYP,&TYP       SET SELECTION CODE DISPLAY TYPE\n         MVI   QDLNCODE,X'05'      SET DATA DISPLAY TO TURQUOISE\n         DROP  R15\n         AIF   ('&DMY' EQ 'Y').MEND\n         AIF   ('&SEL' NE 'Y').SELOK\n         TM    QFLAG1,QFLG1SEL     LINE SELECTION OR PF3/15?\n         BO    *+8                 YES, DO NOT RESET \"PF3 LEVEL\"\n.SELOK   ANOP\n         MVI   PF3LEVEL+1,0        RESET \"PF3 LEVEL\" FOR NEW COMMAND\n         NI    QFLAG1,255-QFLG1SEL RESET LINE SELECTION FLAG\n.MEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QPRBGEN": {"ttr": 3853, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,                                                  ONL01\n&LABEL   QPRBGEN &TYPE                                            ONL01\n         GBLB  &QBGEN                                             ONL01\n         AIF   ('&TYPE' EQ 'BEGIN').BEGIN                         ONL01\n         AIF   ('&TYPE' EQ 'DONE').DONE                           ONL01\n         MNOTE 4,'PRTGENB MACRO - INVALID OPERAND'                ONL01\n         MEXIT ,                                                  ONL01\n.BEGIN   ANOP  ,                                                  ONL01\n         PUSH  PRINT               SAVE CURRENT PRINT STATUS      ONL01\n         AIF   (&QBGEN).GEN                                       ONL01\n         PRINT NOGEN               DON'T EXPAND CNTL BLOCK MACROS ONL01\n         MEXIT ,                                                  ONL01\n.GEN     ANOP  ,                                                  ONL01\n         PRINT GEN                 EXPAND CNTL BLOCK MACROS       ONL01\n         MEXIT ,                                                  ONL01\n.DONE    ANOP  ,                                                  ONL01\n         POP   PRINT               RESTORE PRINT STATUS           ONL01\n         MEND  ,                                                  ONL01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QSTART": {"ttr": 4097, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    QSTART &TITLE,&MAIN=NO,&TYPE=NORMAL\n***********************************************************************\n*                                                                     *\n*   GLOBAL FLAG DEFINITIONS                                           *\n*                                                                     *\n***********************************************************************\n         GBLB  &QPFK          PF-KEY OPTION (SEE Q5 AND Q8)\n         GBLB  &QACF2         ACF2 AUTH CHECKING (SEE Q6 AND Q14)  FCI*\n         GBLB  &QSP           MVS/SP LEVEL OF JES2.               UF020\n         GBLB  &QGEN          FORCE PRINT GEN OF MACRO EXPANSIONS UF019\n         GBLB  &QJTIP         JTIP PRODUCT INSTALLED (Q33)        UF025\n         GBLB  &QDBC          DBC  PRODUCT INSTALLED              UF024\n         GBLB  &QRNB          ENABLES RNB-SPECIFIC CODE           RNB05\n.*                              (Q4,Q5,Q14,Q16,Q24,Q26,Q27)       RNB05\n         GBLB  &QRACF         RACF CHECKING (QCOMMON,Q10,Q16,Q17) RNB03\n         GBLC  &QRACUSR       NEW RACF USERID (QCOMMON,Q10)       RNB03\n.*                                                                UF019\n.* QPFK=0 SELECTS NO PF-KEY SUPPORT\n.* QPFK=1 SELECTS PF=KEY SUPPORT\n.*QACF2=0 SELECTS NO ACF2 CHECKING (SHOPS WITHOUT ACF2)            FCI*\n.*QACF2=1 SELECTS ACF2 AUTH TO SYSOUT VIA DSN='SYSOUT.LID.JOBNAME' FCI*\n.*  QSP=0 SELECTS PRE-SP SUPPORT                                  UF020\n.*  QSP=1 SELECTS SP SUPPORT                                      UF020\n.* QGEN=0 SELECTS PRINT NOGEN OPTION                              UF019\n.* QGEN=1 SELECTS PRINT GEN OPTION                                UF019\n.*QJTIP=0 SELECTS NO JTIP SUPPORT.                                UF025\n.*QJTIP=1 SELECTS SHOPS WITH JTIP INSTALLED                       UF025\n.* QDBC=0 SELECTS NO DBC SUPPORT.                                 UF024\n.* QDBC=1 SELECTS SHOPS WITH DBC INSTALLED                        UF024\n.*QRACF=0 SELECTS NO RACF SUPPORT                                 RNB03\n.*QRACF=1 SELECTS RACF SUPPORT FOR ACCESS TO THE SPOOL/CHECKPOINT RNB03\n.*        AND FOR THE XP AND XDS COMMANDS. DEFINE TWO RACF        RNB03\n.*        RESOURCES IN CLASS(APPL): QUEUEXP WILL CONTROL THE XP   RNB03\n.*        COMMAND AND QUEUEXDS WILL PROVIDE FURTHER CONTROL OVER  RNB03\n.*        THE XDS COMMAND. WHEN THE RACHECK FOR THE XDS COMMAND   RNB03\n.*        IS DONE, THE JOBNAME WILL BE SPECIFIED AS THE APPLID.   RNB03\n.*        THUS, IF YOU SPECIFY AUDIT(ALL) FOR APPL-QUEUEXDS YOU   RNB03\n.*        WILL KNOW WHAT DATA YOUR PRIVILEGED USERS HAVE BEEN     RNB03\n.*        EXAMINING (AUDITORS LIKE THIS). QRACF IS NOT SUPPORTED  RNB03\n.*        VIA THE SYSPARM OPTION.                                 RNB03\n.*QRACUSR IS USED IF YOUR SPOOL AND CHECKPOINT ARE DEFINED TO     RNB03\n.*        RACF WITH UACC=NONE. IT SPECIFIES A USERID THAT HAS     RNB03\n.*        ACCESS TO THE SPOOL AND CHECKPOINT WITH READ AUTHORITY. RNB03\n.*        DURING INITIALIZATION, THE SPECIFIED USERID WILL BE     RNB03\n.*        SUBSTITUTED INTO THE RACF ACEE SO THE USER OF QUEUE HAS RNB03\n.*        ACCESS TO THE SPOOL AND CHECKPOINT DATA SETS ONLY WHILE RNB03\n.*        THE QUEUE COMMAND IS IN PROGRESS. IF QRACF=1, THEN      RNB03\n.*        QRACUSR MUST BE SPECIFIED. IF YOUR SPOOL AND CHECKPOINT RNB03\n.*        HAVE A UACC OF >= READ, SPECIFY QRACUSR AS NULL ('') TO RNB03\n.*        BYPASS CHANGING THE ACEE USERID. QRACUSR IS NOT         RNB03\n.*        SUPPORTED VIA THE SYSPARM OPTION.                       RNB03\n.*                                                                UF019\n&QPFK    SETB  1\n&QACF2   SETB  0                                                   FCI*\n&QSP     SETB  0                                                  UF020\n&QGEN    SETB  1                                                  UF019\n&QJTIP   SETB  0                                                  UF025\n&QDBC    SETB  0                                                  UF024\n&QRNB    SETB  0                                                  RNB05\n&QRACF   SETB  0                                                  RNB03\n&QRACUSR SETC  'QCMD'                                             RNB03\n.*                                                                UF019\n         LCLA  &CNT,&CTR,&STRNG,&LNTH,&SUB                        UF019\n         AIF   (K'&SYSPARM EQ 0).SYSPEND                          UF019\n         MNOTE *,'SYSPARM IS ''&SYSPARM'' '                       UF019\n         AIF   ('&SYSPARM'(1,1) EQ '(').MORE                      UF019\n  MNOTE 2,'SYSPARM SYNTAX ERROR--MUST BE ENCLOSED IN PARENS'      UF019\n         AGO   .SYSPEND                                           UF019\n.MORE    ANOP                                                     UF019\n&CNT     SETA  K'&SYSPARM                                         UF019\n&CTR     SETA  1                                                  UF019\n&STRNG   SETA  &CTR+1                                             UF019\n.LOOP    AIF   ('&SYSPARM'(&CTR,1) EQ ',' OR &CTR EQ &CNT).FOUND  UF019\n&CTR     SETA  &CTR+1                                             UF019\n         AGO   .LOOP                                              UF019\n.FOUND   ANOP                                                     UF019\n&LNTH    SETA  &CTR-&STRNG                                        UF019\n         AIF   (&LNTH EQ 0).NULL                                  UF019\n         AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'PFK').SPNPFK         UF019\n&QPFK    SETB  1                                                  UF019\n.SPNPFK  AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'NOPFK').SPNPFK2      UF019\n&QPFK    SETB  0                                                  UF019\n.SPNPFK2 AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'ACF2').SPNACF        UF019\n&QACF2   SETB  1                                                  UF019\n.SPNACF  AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'NOACF2').SPNACF2     UF019\n&QACF2   SETB  0                                                  UF019\n.SPNACF2 AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'SP').SPNSP           UF019\n&QSP     SETB  1                                                  UF019\n.SPNSP   AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'NOSP').SPNSP2        UF019\n&QSP     SETB  0                                                  UF019\n.SPNSP2  AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'GEN').SPNGEN         UF019\n&QGEN    SETB  1                                                  UF019\n.SPNGEN  AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'NOGEN').SPNGEN2      UF019\n&QGEN    SETB  0                                                  UF019\n.SPNGEN2 ANOP                                                     UF019\n         AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'JTIP').SPNJTIP       UF019\n&QJTIP   SETB  1                                                  UF019\n.SPNJTIP AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'NOJTIP').SPNJTP2     UF019\n&QJTIP   SETB  0                                                  UF019\n.SPNJTP2 ANOP                                                     UF019\n         AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'DBC').SPNDBC         UF019\n&QDBC    SETB  1                                                  UF019\n.SPNDBC  AIF   ('&SYSPARM'(&STRNG,&LNTH) NE 'NODBC').SPNDBC2      UF019\n&QDBC    SETB  0                                                  UF019\n.SPNDBC2 ANOP                                                     UF019\n.NULL    ANOP                                                     UF019\n         AIF   (&CTR EQ &CNT).SYSPEND                             UF019\n&CTR     SETA  &CTR+1                                             UF019\n&STRNG   SETA  &CTR                                               UF019\n         AGO   .LOOP                                              UF019\n.SYSPEND ANOP                                                     UF019\n         AIF   ('&TYPE'  EQ 'GLOBAL').GEN  FORCE PRINT GEN FOR QCOMMON\n         AIF   (&QGEN).GEN                                        UF019\n         PRINT NOGEN                                              UF019\n         AGO   .START                                             UF019\n.GEN     PRINT GEN                                                UF019\n.START   ANOP                                                     UF019\n***********************************************************************\n MNOTE *,'PFK=&QPFK, ACF2=&QACF2, SP=&QSP, GEN=&QGEN, JTIP=&QJTIP, DBC=+\n               &QDBC, RACF=&QRACF, RACUSR=&QRACUSR '              RNB03\n***********************************************************************\n&NAME    START 0\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE TABLE                                              *\n*                                                                     *\n***********************************************************************\nR0       EQU   0              TEMP WORK\nR1       EQU   1              TEMP WORK\nR2       EQU   2              WORK REG\nR3       EQU   3              WORK REG\nR4       EQU   4              WORK REG\nR5       EQU   5              WORK REG\nR6       EQU   6              WORK REG\nR7       EQU   7              WORK REG\nR8       EQU   8              WORK REG\nR9       EQU   9              ADDRESS OF COMMON SUB-AREA\nR10      EQU   10             ADDRESS OF COMMON SUB-AREA\nR11      EQU   11             ADDRESS OF COMMON VECTOR TABLE\nR12      EQU   12             BASE REGISTER\nR13      EQU   13             SAVE AREA AND TEMPORARY WORK AREA\nR14      EQU   14             TEMP WORK\nR15      EQU   15             TEMP WORK\n***********************************************************************\n*                                                                     *\n*   THE QUEUE COMMAND WAS WRITTEN FOR YOUR AMUSEMENT AND AMAZEMENT BY *\n*     THE INTERGALACTIC MESSIANIC INDIVIDUAL GROUP THERAPY DIVISION   *\n*     OF TRW SYSTEMS, 1 SPACE PARK, REDONDO BEACH, CA. 90278          *\n*   THE ORIGINAL PROGRAMMING WAS DONE BY ANDY ZIDE, CHIEF PROGRAMMER  *\n*     AND RESIDENT FLAKE WHO HAS SINCE DEPARTED TRW TO PLAY WITH      *\n*     MICROCODE.                                                      *\n*   PLEASE ADDRESS ANY COMMENTS, SUGGESTIONS, COMPLAINTS, OR THREATS  *\n*     TO STEVE ANDERSON (R3/1028)   (213) 535-0682   OR               *\n*        PAUL FELIX     (R3/1028)   (213) 535-0682                    *\n*                                                                     *\n*   STEVE ANDERSON HAS LEFT TRW.  PLEASE ADDRESS ANY COMMENTS OR      *\n*   FIXES TO JACK SCHUDEL AT THE ADDRESS LISTED BELOW.                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*   THE FOLLOWING INDIVIDUALS HAVE MADE MODIFICATIONS TO QUEUE WHICH  *\n*     HAVE BEEN INCORPORATED INTO THIS CURRENT VERSION.               *\n*                                                                     *\n*        VILKO MACEK                                                  *\n*        INSURANCE CORPORATION OF BRITISH COLUMBIA                    *\n*        MODIFICATION: PFK SUPPORT                                    *\n*                                                                     *\n*        TRW ISD                                                      *\n*        ANAHEIM, CALIFORNIA                                          *\n*        MODIFICATION: DISPLAY CPU TIME FOR BATCH, STC AND TSO        *\n*                      DISPLAY INITIATORS                             *\n*                                                                     *\n*        KEN TRUE                                                     *\n*        FAIRCHILD CAMERA AND INSTRUMENT                              *\n*        MOUNTAIN VIEW, CALIFORNIA                                    *\n*        MODIFICATION: ACF2 SUPPORT                                   *\n*                      PRINT SCREEN SUPPORT                           *\n*                                                                     *\n*        JACK SCHUDEL                                                 *\n*        NORTHEAST REGIONAL DATA CENTER                               *\n*        233 SSRB, UNIVERSITY OF FLORIDA                              *\n*        GAINESVILLE, FLORIDA  32611                                  *\n*        (904) 392-4601                                               *\n*        MODIFICATIONS:  SEE MEMBER $UFDOC                            *\n*                                                                     *\n*        WALT FARRELL                                                 *\n*        RAINIER NATIONAL BANK                                        *\n*        P. O. BOX C34030                                             *\n*        SEATTLE, WASHINGTON  98124                                   *\n*        (206) 433-7467                                               *\n*        MODIFICATIONS:  SEE MEMBER $RNBDOC                           *\n*                                                                     *\n***********************************************************************\n*\n         AIF   ('&TYPE' EQ 'NORMAL').GO\n         MEXIT\n.GO      ANOP\n&NAME    TITLE &TITLE\n         USING *,R12          BASE REGISTER\n         USING QCOMMON,R11    ACCESS TO COMMON VECTOR TABLE\n         STM   R14,R12,12(R13) STANDARD REGISTER SAVE\n         LR    R12,R15        LOAD BASE REG\n         B     *+28           BRANCH AROUND IDENTIFIER\n         DC    CL8'&NAME'     MODULE IDENTIFIER\n         DC    CL8'&SYSDATE'  ASSEMBLY DATE\n         DC    CL8' &SYSTIME'  ASSEMBLY TIME\n         AIF   ('&MAIN' EQ 'YES').MAINYES\n         LR    R15,R13        RETAIN SAVE AREA ADDR\n         LA    R13,72(R13)    POINT TO NEXT SAVE AREA\n         AGO   .MAINNO\n.MAINYES ANOP\n         LR    R2,R1          SAVE PARAMETER REGISTER\n         GETMAIN R,LV=4096    GET STORAGE FOR SAVEAREA\n         ST    R1,8(R13)      FORWARD POINTER\n         ST    R13,4(R1)      BACKWARD POINTER\n         LR    R13,R1         MOVE ADDR TO R1\n         MEXIT\n.MAINNO  ANOP\n         ST    R13,8(R15)     FORWARD POINTER\n         ST    R15,4(R13)     BACKWARD POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QSTOP": {"ttr": 4102, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x02\\x16o\\x01\\x02\\x16o\\x00$\\x00\\t\\x00\\t\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2002-06-15T00:24:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "GREG"}, "text": "         MACRO\n&NAME    QSTOP &MAIN=NO\n&NAME    L     R13,4(R13)     LOAD NEXT LOWER SAVE AREA SET\n         LM    R14,R12,12(R13) STANDARD REGISTER RESTORE\n         AIF   ('&MAIN' NE 'YES').MAINOK\n         SLR   R15,R15        ZERO RETURN CODE\n.MAINOK  ANOP\n         BR    R14            RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QTILT": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02\\x16o\\x01\\x03\\x04_\\x14V\\x00\\x10\\x00\\x10\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2003-02-14T14:56:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "GREG"}, "text": "         MACRO\n&NAME    QTILT &MESSAGE\n&NAME    L     R15,QVDSPL     LOAD BASE REG\n         USING QDISPLAY,R15   BASE REG FOR DISPLAY WORK AREA\n         L     R14,QDHLINE@   POINT TO HEADING LINE\n         MVC   0(80,R14),=CL80&MESSAGE\n         MVC   QDMLNG,=H'0'   ZERO MESSAGE LENGTH\n         L     R14,QDSHADO@   POINT TO THE SHADOW BUFFER\n         AH    R14,QDLNELEN   POINT TO HEADING LINE SHADOW\n         MVI   0(R14),X'22'   RED REVERSE VIDEO FOR ERROR MESSAGE\n         MVC   1(79,R14),0(R14)\n         DROP  R15\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         LR    R14,R15        SET FOR LOOP\n         BR    R15            GO TO IT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QUEUE": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x13\\x00\\x00\\x01\\x02\\x16o\\x01\\x03\\x04o\\x07\\x14\\x00\\xd3\\x00\\xc5\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.19", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2003-02-15T07:14:00", "lines": 211, "newlines": 197, "modlines": 0, "user": "GREG"}, "text": "QUEUE    QSTART 'QUEUE COMMAND - MAINLINE MODULE',MAIN=YES\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB01 - FIX FINAL TPUT MESSAGE TO WORK WITH SPF TCAM       *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*   CALL - INITIALIZATION                                             *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(INIT)   ADDR OF INIT\n         BALR  R14,R15        GO TO IT\n         LA    R10,LOOP       INTERRUPTED RETURN ADDRESS\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n******************************************************************UF003\n*                                                                 UF003\n*   INITIALIZE 3270 SCREEN VARIABLES                              UF003\n*                                                                 UF003\n******************************************************************UF003\n         GTSIZE ,             READ 3270 SCREEN SIZE               UF003\n         STM   R0,R1,QDOSZR0  SAVE FOR LATER RESTORE              UF003\n         LTR   R0,R0          DISPLAY DEVICE?                     UF003\n         BZ    NOTDISP        NO, ABORT                           UF003\n         SPACE 1                                                  UF003\n         STFSMODE ON,INITIAL=YES  TELL VTAM ABOUT FULLSCREEN MODE UF003\n         SPACE 1                                                  UF003\n         GTTERM PRMSZE=QDPRMSZ,ALTSZE=QDALTSZ,ATTRIB=QDATTRB,     GP@P6+\n               TERMID=QDTRMID,MF=(E,QDGTRM)  GET VTAM DETAILS     GP@P6\n         SPACE 1                                                  GP@P6\n         LM    R0,R1,QDOSZR0  RESTORE DESTROYED REGS              UF003\n         MVI   QDSCRO1,X'7E'  ERASE/WRITE ALTERNATE               UF003\n         CLM   R0,1,QDPRMSZ   PRIMARY SIZE LINE COUNT?            GP@P6\n         BNE   MODELOK        NO, USE ALTERNATE SIZE              GP@P6\n         CLM   R1,1,QDPRMSZ+1 PRIMARY SIZE COLUMN COUNT?          GP@P6\n         BNE   MODELOK        NO, USE ALTERNATE SIZE              GP@P6\n*        STSIZE SIZE=80,LINE=24 2003-02-05 ALL STSIZES REMOVED BY GP@P6\n         MVI   QDSCRO1,X'F5'  ERASE/WRITE FOR PRIMARY SIZE        UF003\n         SPACE 1                                                  UF003\n*              REDO MODEL CODE                       2002-06-16   GP@P6\nMODELOK  STH   R1,QDLNELEN    LINE LENGTH                             *\n         LA    R1,QDSCRTXT+80      POINT TO COLUMN 81      2003-02-14 *\n         MVC   2(7,R1),=X'E4A2859989847E'      C'USERID='  2003-02-14 *\n         MVC   9(8,R1),QLOGON      DISPLAY USERID          2003-02-14 *\n         MVC   19(9,R1),=X'E3859994899581937E' C'TERMINAL='2003-02-14 *\n         MVC   28(8,R1),QDTRMID    DISPLAY TERMINAL NAME   2003-02-14 *\n         LR    R15,R0         GET SCREEN LINE COUNT                   *\n         SH    R15,=H'3'      GET DETAIL DISPLAY LINE COUNT           *\n         CVD   R15,CONVERT    MAKE DECIMAL                            *\n         ZAP   QDLNES,CONVERT DETAIL LINE COUNT      2003-02-05       *\n         MH    R0,QDLNELEN    GET SCREEN DISPLAY CHARACTER COUNT      *\n         ST    R0,QDSCRPLN    LENGTH OF BUFFER WITH SHADOW BUFFER     *\n         MH    R15,QDLNELEN   GET DISPLAY DETAIL CONTENT CAPACITY     *\n         ST    R15,QDSCRLEN   LENGTH TO CLEAR FOR EACH DISPLAY        *\n         LR    R15,R0         GET SCREEN BUFFER SIZE                  *\n         SH    R15,QDLNELEN   GET CAPACITY LESS ONE SCREEN LINE       *\n         LA    R1,QDSCRTXT(R15)                                       *\n         MVC   0(7,R1),=C'REPLY -'                                    *\n         MVI   7(R1),X'0B'    HIGH INTENSITY INPUT FIELD              *\n         XC    8(63,R1),8(R1) CLEAR INPUT AREA                        *\n         MVI   71(R1),X'0C'   LOW INTENSITY OUTPUT FIELD              *\n         LA    R1,72(,R1)     POINT TO PLUS SIGN INDICATOR AREA       *\n         ST    R1,QDPLUS@     SAVE ITS ADDRESS                        *\n         LA    R1,QDSCRTXT    POINT TO FIRST SCREEN LINE              *\n         AH    R1,QDLNELEN    POINT TO SECOND SCREEN LINE             *\n         ST    R1,QDHLINE@    SAVE HEADING LINE ADDRESS               *\n         AH    R1,QDLNELEN    POINT TO THIRD SCREEN LINE              *\n         ST    R1,QDLINE1@    SAVE FIRST DATA LINE ADDRESS            *\n         L     R1,QDSHADO@    POINT TO THE SHADOW AREA                *\n         MVI   0(R1),X'07'    TOP LEFT TEXT IN WHITE                  *\n         MVC   1(14,R1),0(R1)                                         *\n         MVI   16(R1),X'02'   COMMAND ECHO IN RED                     *\n         MVI   80(R1),X'06'   YELLOW USERID+TERMINAL       2003-02-14 *\n         AR    R1,R15         POINT TO SHADOW OF LAST LINE            *\n         MVI   0(R1),X'07'    PROMPT IN WHITE                         *\n         MVC   1(6,R1),0(R1)                                          *\n         MVI   8(R1),X'32'    INPUT AREA IN RED UNDERSCORE            *\n         MVC   9(62,R1),8(R1)                                         *\n         MVI   72(R1),X'07'   PLUS SIGN IN WHITE IF SHOWN             *\n         MVI   73(R1),X'06'   PF3/15 MEANING IN YELLOW IF SHOWN       *\n         MVC   74(6,R1),73(R1)                                        *\n*       END OF REDO MODEL CODE                       2002-06-16   GP@P6\n         SPACE 1                                                  UF003\n         B     LOOP           GO TO PROCESS LOOP                  UF003\n         SPACE 1                                                  UF003\nNOTDISP  LA    R1,NOTDSPL     POINT TO MESSAGE TEXT               GP@P6\n         LA    R0,L'NOTDSPL   SET MESSAGE LENGTH                  GP@P6\n         TPUT  (1),(0),R      SEND MESSAGE TO USER                GP@P6\n         B     EXIT2          AND RETURN TO CALLER                UF003\n         SPACE 1                                                  UF003\nNOTDSPL  DC    C'QUEUE COMMAND REQUIRES DISPLAY TERMINAL'         UF003\n         EJECT ,                                                  UF003\n***********************************************************************\n*                                                                     *\n*   CALL - COMMAND LINE PARSE                                         *\n*                                                                     *\n***********************************************************************\nLOOP     DS    0H                                                 UF006\n         L     R15,=V(PARSE)  ADDR OF PARSE\n         BALR  R14,R15        GO TO IT\n         CLC   =C'E ',QSUBNAME STOP?\n         BE    EXIT           YES.\n         CLC   =C'EXIT ',QSUBNAME STOP?\n         BE    EXIT           YES.\n         CLC   =C'END ',QSUBNAME STOP?\n         BE    EXIT           YES.\n         CLC   =C'STOP ',QSUBNAME STOP?\n         BE    EXIT           YES.\n***********************************************************************\n*                                                                     *\n*   CALL - SUB-COMMAND MODULE SELECTED BY PARSE                       *\n*                                                                     *\n***********************************************************************\n         QHEAD DUMMY,X'26',DMY=Y   NO OUTPUT IN YELLOW REVERSE    GP@P6\n         L     R15,QSUBCMD    ADDR OF SUBCMD FROM QCOMMON\n         BALR  R14,R15        GO TO IT\n         MVC   QDMLNG,=H'0'   ZERO OUT MESSAGE LENGTH\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        WRITE LAST SCREEN, GET NEXT INPUT\n         B     LOOP           DO IT AGAIN\n***********************************************************************\n*                                                                     *\n*   CLEAN UP AND GO HOME                                              *\n*                                                                     *\n***********************************************************************\nEXIT     DS    0H             2003-02-05 - ALL STSIZES REMOVED BY GP@P6\n*        STSIZE SIZELOC=QDOSZR1,LINELOC=QDOSZR0  RESTORE SCRSIZE  UF003\n********                      2003-02-05 - REMOVE NEEDLESS TPUT   GP@P6\n**       MVI   QDSCRO1,X'7E'  SET ERASE/WRITE ALTERNATE           GP@P6\n**       CLI   QDOSZR0+3,24   MORE THAN 24 LINES?                 GP@P6\n**       BH    EXITSZOK       YES, USER ALTERNATE SIZE            GP@P6\n**       CLI   QDOSZR1+3,80   MORE THAN 80 COLUMNS?               GP@P6\n**       BH    EXITSZOK       YES, USER ALTERNATE SIZE            GP@P6\n**       MVI   QDSCRO1,X'F5'  SET ERASE/WRITE (PRIMARY)           GP@P6\n**ITSZOK LA    R1,QDSCREEN    POINT TO DATA STREAM                GP@P6\n**       LA    R0,3           GET LENGTH OF ESC,EW(A),WCC         GP@P6\n**       ICM   R1,8,=X'03'    SET FLAGS FOR FULLSCR               GP@P6\n**       TPUT  (1),(0),R      CLEAR AND RESET THE SCREEN          GP@P6\n********                      2003-02-05 - REMOVE NEEDLESS TPUT   GP@P6\n         STLINENO LINE=1,MODE=OFF                 OFF FULLSCR     UF003\n         USING QCKPT,R8 BASE REG FOR CKPT WORK AREA\nEXIT2    DS    0H                                                 UF003\n         L     R8,QVCKPT      LOAD BASE REG\n         CLOSE MF=(E,HOCKPT)\n         CLOSE MF=(E,QCSPOOLS)\n         TM    QPFLAG,HARDCPY         IS HARDCOPY INVOKED?         FCI*\n         BNO   FREEUP                   NO..SPLIT THIS STUFF       FCI*\n         L     R15,=V(PRINT)               INVOKE PRINT            FCI*\n         MVC   QDREPLY,QBLANK                  TO                  FCI*\n         MVC   QDREPLY(09),=C'PRINT OFF'          FREE UP          FCI*\n         MVC   QDRLNG,=X'0009'                        HARDCOPY     FCI*\n         BALR  R14,R15                                     OUTPUT  FCI*\n         EJECT\n***********************************************************************\n*                                                                  FCI*\n*   FREE HASPCKPT AND HASPACEN DDNAMES BEFORE LEAVING TO BE NEAT.. FCI*\n*                                                                  FCI*\n***********************************************************************\nFREEUP   MVI   DAIRFLAG,X'18'    INDICATE FREE DDNAME(XXXXXXXX)    FCI*\n         MVC   DA18DDN,HASPCKPT+40  GET DDNAME USED...             FCI*\n         L     R15,=V(ALLOCATE)  GET ROUTINE NAME                  FCI*\n         BALR  R14,R15           GO FREE IT..                      FCI*\n*\n         LA    R2,QCSPOOLS       GET ADDR OF LIST OF HASPACE DCBS  FCI*\n         LA    R4,35             MAX OF 35 PASSES THROUGH HERE..   FCI*\nFREEUP1  L     R3,0(R2)          GET ADDRESS OF DCB TO WORK ON     FCI*\n         LTR   R3,R3             ANYONE THERE?                     FCI*\n         BZ    EXITQCK                                             FCI*\n         MVC   DA18DDN,40(R3)    MOVE IN DDNAME FROM DCB           FCI*\n         L     R15,=V(ALLOCATE)  GET ROUTINE NAME                  FCI*\n         BALR  R14,R15           AND GO INVOKE DAIR TO FREE IT..   FCI*\n         LA    R2,4(R2)          BUMP                              FCI*\n         BCT   R4,FREEUP1                                          FCI*\n***********************************************************************\n*                                                                     *\n*   FREE THE AREAS ACQUIRED IN INIT (Q3)                              *\n*                                                                     *\n***********************************************************************\nEXITQCK  OI    QGETL3,X'80'   PREPARE FOR FREEMAIN             PWF FCI*\n         FREEMAIN MF=(E,QFREE)\n         TM    QFLAG1,QFLG1DBC    NEED TO TERMINATE ESTAE?        UF024\n         BZ    NOESTAE            NO, SKIP THIS                   UF024\n         ESTAE 0                  DELETE CURRENT ESTAE            UF024\n         NI    QFLAG1,255-QFLG1DBC  CLEAR FLAG                    UF024\nNOESTAE  DS    0H                                                 UF024\n         QSTOP MAIN=YES           ZERO THE RETURN CODE            GP@P6\n***********************************************************************\n*                                                                     *\n*   CONSTANTS AND OTHER ODDITIES                                      *\n*                                                                     *\n***********************************************************************\n         LTORG\nCLEAR1   EQU   *                   START OF CLEAR DATA            UF003\n*        DC    X'27F5C1'           ESC; ERASE/WRITE; RESET MDT    UF003\n         DC    X'C1'               FIX FOR SPF/TCAM               RNB01\n         DC    X'115D7E'           SBA  24,80                     UF003\n         DC    X'114040'           SBA  1,1                       UF003\n         DC    X'3C404000'         RTA  1,1 WITH NULLS            UF003\n         DC    X'1DC8'             SF, INTENSIFIED                UF003\n         DC    X'13'               INSERT CURSOR                  UF003\nCLEAR    EQU   CLEAR1,*-CLEAR1                                    UF003\nDUMMY    DC    CL80'    NO DATA IS AVAILABLE FOR YOUR REQUEST'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nWORK     DSECT\n         DS    CL72\nCONVERT  DS    D\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QUEUECMN": {"ttr": 4111, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "QCOMMON  TITLE 'QUEUE COMMAND - COMMON AREA'                      UF004\nQCOMMON  QSTART TYPE=GLOBAL\n         QCOMMON CSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "READSPC": {"ttr": 4113, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x02\\x16o\\x01\\x03\\x04_\\x14X\\x00]\\x00]\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2003-02-14T14:58:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "GREG"}, "text": "READSPC  QSTART 'QUEUE COMMAND - READ A BLOCK FROM HASPACE'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB03 - WITH RACF SUPPORT, WHEN A JCT IS READ WIPE OUT THE *\n*                  PASSWORD FIELDS (JCTPASS, JCTNUPAS)                *\n***********************************************************************\n         GBLB  &QRACF                                             RNB03\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n***********************************************************************\n*                                                                     *\n*   CONVERT MTTR TO MBBCCHHR                                          *\n*                                                                     *\n***********************************************************************\n*\n* NOTE - THE INPUT TO THIS ROUTINE IS AS FOLLOWS:\n*            QCTRAK CONTAINS THE MTTR\n*            R1 CONTAINS THE IOAREA ADDRESS\n*\n         LR    R2,R1          MOVE IOAREA ADDR TO R2\n         SR    R3,R3          ZERO R3\n         IC    R3,QCTRAKM     RELATIVE DCB NUMBER\n         SLL   R3,2           MULTIPLY BY 4\n         MVC   QCDADR,QCTRAKR MOVE RECORD NUMBER\n         MVC   QCDADHH,QCTRAKTT MOVE TRACK TO A HALFWORD BOUNDARY\n         LH    R5,QCDADHH     LOAD RELATIVE TRACK NUMBER\n         SR    R4,R4          ZERO R4\n         D     R4,QCTRKCYL(R3) DIVIDE TRACKS BY TRACKS PER CYLINDER\n         STH   R4,QCDADHH     STORE HEAD NUMBER\n         STH   R5,QCDADCC     STORE CYLINDER NUMBER\n         L     R3,QCSPOOLS(R3) DCB ADDRESS\n         USING IHADCB,R3      ADDRESSING FOR DCB DSECT            UF009\n         MVC   DCBSYNAD+1(3),=AL3(SYNAD)  SET SYNAD ADDR IN DCB   UF009\n         DROP  R3             DROP ADDRESSING FOR DCB             UF009\n         READ  HDECB2,DI,(R3),(R2),MF=E\n         CHECK HDECB2\n         TM    QFLAG1,QFLG1IOE  I/O ERROR?                        UF009\n         BZ    QSTOP          NO, RETURN TO CALLER                UF009\n         NI    QFLAG1,255-QFLG1IOE  CLEAR ERROR FLAG              UF009\n*        SIMULATE QTILT ACTION                                    UF009\n         L     R15,QVDSPL     LOAD BASE REG                       GP@P6\n         USING QDISPLAY,R15   BASE REG FOR DISPLAY WORK AREA      GP@P6\n         L     R14,QDSHADO@   POINT TO SHADOW BUFFER              GP@P6\n         AH    R14,QDLNELEN   POINT TO HEADING SHADOW             GP@P6\n         MVI   0(R14),X'22'   RED REVERSE VIDEO FOR ERROR         GP@P6\n         MVC   1(79,R14),0(R14)                                   GP@P6\n         DROP  R15                                                GP@P6\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE             UF009\n         LR    R14,R15        SET FOR LOOP                        UF009\n         BR    R15            GO TO IT                            UF009\nQSTOP    EQU   *                                                  RNB03\n         AIF   (NOT &QRACF).RNB03A                                RNB03\n         USING JCTDSECT,R2    SEE IF WE READ A JCT                RNB03\n         CLC   JCTID,=CL4'JCT'  POSSIBLE JCT?                     RNB03\n         BNE   RNB03C           /NO  - GO QSTOP                   RNB03\n         CLC   JCTJNAME,JCTJMRJN  JOB NAME IN BOTH PLACES?        RNB03\n         BNE   RNB03C             /NO  - GO QSTOP                 RNB03\n         CLC   =C'JOB ',JCTJOBID  IS IT AN STC, A JOB, OR A TSU?  RNB03\n         BE    RNB03B             IF SO, ASSUME THIS IS A JCT     RNB03\n         CLC   =C'TSU ',JCTJOBID                                  RNB03\n         BE    RNB03B                                             RNB03\n         CLC   =C'STC ',JCTJOBID                                  RNB03\n         BNE   RNB03C                                             RNB03\nRNB03B   XC    JCTPASS,JCTPASS    WIPE OUT THE PASSWORDS          RNB03\n         XC    JCTNUPAS,JCTNUPAS                                  RNB03\n         DROP  R2                                                 RNB03\nRNB03C   EQU   *                                                  RNB03\n.RNB03A  ANOP                                                     RNB03\n         QSTOP                                                    RNB03\nSYNAD    SYNADAF ACSMETH=BDAM DECODE ERROR CAUSE                  UF009\n         OI    QFLAG1,QFLG1IOE  SET I/O ERROR FLAG                UF009\n         L     R15,QVDSPL     LOAD BASE REG                       UF009\n         USING QDISPLAY,R15   BASE REG FOR DISPLAY WORK AREA      UF009\n         MVC   QDMLNG,=H'0'   ZERO MESSAGE LENGTH                 UF009\n         L     R15,QDHLINE@   POINT TO HEADING LINE               GP@P6\n         DROP  R15                                                UF009\n         MVC   0(80,R15),QBLANK BLANK MESSAGE AREA          GP@P6 UF009\n         MVC   1(78,R15),50(R1) COPY SYNAD MESSAGE          GP@P6 UF009\n         SYNADRLS ,           RELEASE WORK AREA                   UF009\n         BR    R14            RETURN TO OP SYS                    UF009\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         AIF   (NOT &QRACF).RNB03X                                RNB03\nREADSPC  CSECT                                                    RNB03\nJCT      EQU   0                                                  RNB03\nBUFSTART EQU   0                                                  RNB03\nBUFDSECT EQU   0                                                  RNB03\n         $JCT                                                     RNB03\n.RNB03X  ANOP                                                     RNB03\n         QCOMMON\n         DCBD  DSORG=DA,DEVD=DA                                   UF009\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RELINK": {"ttr": 4353, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//RELINK JOB ,JACK,CLASS=9,MSGCLASS=A\n/*JOBPARM Q=F,I\n//LINK   EXEC  PGM=IEWL,PARM='TEST,LIST,LET,NCAL,XREF,MAP'\n//SYSPRINT DD  SYSOUT=A\n//SYSUT1   DD  UNIT=VIO3350,SPACE=(CYL,(3,3))\n//SYSLMOD  DD  DSN=JES2.SP2.LINKLIB,DISP=SHR\n//SYSLIB   DD  DSN=NER.S685.PGMLIB,DISP=SHR\n//SYSLIN   DD  *\n INCLUDE SYSLIB(Q2)\n ENTRY   QUEUE\n NAME    QUEUE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REPOS": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x10\\x00\\x00\\x01\\x02\\x16\\x7f\\x01\\x03\\x04o\\x06Y\\x01b\\x01'\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@\"", "ispf": {"version": "80.16", "flags": 0, "createdate": "2002-06-16T00:00:00", "modifydate": "2003-02-15T06:59:00", "lines": 354, "newlines": 295, "modlines": 0, "user": "GREG"}, "text": "REPOS    QSTART 'QUEUE COMMAND - DATASET REPOSITIONING ROUTINES'\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   BRANCH TO PROPER ROUTINE                                          *\n*                                                                     *\n***********************************************************************\n         CLC   QCODEH,=H'32'  NEED TO CHECK FOR VALID DATA SET?   GP@P6\n         BH    GO             NO, SO PROCEED                      GP@P6\n         SPACE 1                                                  UF003\nCHKID    CLC   QPDSID,=H'0'   IS THERE A VALID DATASET?\n         BNE   GO             YES. GO AHEAD.\n         QTILT '*** YOU ARE NOT PROCESSING A VALID DATASET ***'\nGO       LH    R1,QCODEH      LOAD FUNCTION CODE\n         CH    R1,=H'44'      IS THE FUNCTION SUPPORTED?\n         BH    STOP           NO. RETURN.\n         B     *+4(R1)        BRANCH TO ROUTINE\n         B     TILT           0 OFFSET\n         B     FIND           4\n         B     FINDTIME       8\n         B     COLUMN         12\n         B     AT             16\n         B     PLUS           20\n         B     MINUS          24\n         B     TOP            28\n         B     BOTTOM         32\n         B     MODEL          36                            GP@P6 UF003\n         B     MONO           40                                  GP@P6\n         B     COLOR          44                                  GP@P6\nTILT     QTILT '*** PARAMETER IS INVALID OR OMITTED ***'\n***********************************************************************\n*                                                                     *\n*   REPOSITION VERTICALLY                                             *\n*                                                                     *\n***********************************************************************\n* SKIP FORWARD\nPLUS     CLI   QPARM1,C' '    DEFAULT NEEDED\n         BNE   PLUS010        NO\n         MVI   QLNG1+1,X'01'  YES, SET LENGTH OF PARM\n         MVI   QPARM1,X'F1'   SET DEFAULT TO 1\nPLUS010  CLI   QPARM1,C'M'    FORWARD MAXIMUM?                   GP/MAH\n         BE    BOTTOM         -> YES - PRETEND COMMAND WAS 'BOTTOM' MAH\n         BAL   R4,NUMERIC     VALIDATE PARAMETER\n         AP    QPREC,COUNT    ADD COUNT TO CURRENT RECORD\n         B     RESUME         CALL LISTDS\n* SKIP BACKWARD\nMINUS    CLI   QPARM1,C' '    DEFAULT NEEDED\n         BNE   MINUS010       NO\n         MVI   QLNG1+1,X'01'  YES, SET LENGTH OF PARM\n         MVI   QPARM1,X'F1'   SET DEFAULT TO 1\nMINUS010 CLI   QPARM1,C'M'    BACK MAXIMUM?                      GP/MAH\n         BE    TOP            -> YES - PRETEND COMMAND WAS 'TOP' GP/MAH\n         BAL   R4,NUMERIC     VALIDATE PARAMETER\n         SP    QPREC,COUNT    SUBTRACT COUNT FROM CURRENT RECORD\n         BP    RESUME         CALL LISTDS IF RESULT POSITIVE.\n* TOP OF DATASET\nTOP      ZAP   QPREC,=P'1'    SET CURRENT RECORD TO TOP OF DS\n* RESUME AT CURRENT RECORD\nRESUME   L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\nSTOP     QSTOP\n* BOTTOM OF DATASET\nBOTTOM   ZAP   QPREC,=P'9999999' SET CURRENT RECORD TO LARGEST\n         MVI   QCODE,32       TELL LISTDS DOWN MAX = BOTTOM       GP@P6\n         B     RESUME         CALL LISTDS\n* POSITION TO THIS RECORD\nAT       BAL   R4,NUMERIC     VALIDATE PARAMETER\n         ZAP   QPREC,COUNT    INDICATE REPOSITION NO\n         B     RESUME         CALL LISTDS\n* CHECK THE PARMETER FOR VALID NUMERIC AND PACK IT\nNUMERIC  LH    R2,QLNG1       LENGTH OF PARM\n         SH    R2,=H'1'       IS THE COUNT FIELD ZERO?\n         BM    RESUME         YES. RESUME FROM CURRENT POSITION.\n         CLI   QPARM1,C'P'    FULL PAGE SPACING?                 GP/MAH\n         BE    FOUNDPG        -> YES - MULIPLY BY PAGESIZE       GP/MAH\n         CLI   QPARM1,C'H'    HALF PAGE SPACING?                 GP/MAH\n         BE    FOUNDHF        -> YES - MULIPLY BY HALFPAGESIZE   GP/MAH\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC CHECK\n         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. TILT.\n         EX    R2,PACK        PACK THE FIELD INTO COUNT\n         CLI   QSUBNAME,C'P'  ?/PAGE FORWARD/BACKWARD SPECIFIED\n         BE    FOUNDP         YES. GO PROCESS\n         CLI   QSUBNAME,C'H'  ?/HALF PAGE FORWARD/BACKWARD SPECIFIED\n         BNE   NEXIT          NO. GO TO EXIT\n         MP    COUNT,QDLNES   YES. MULTIPLY BY PAGE SIZE          UF003\nFOUNDH   DP    COUNT,=P'2'    AND CONVERT TO HALF PAGES           UF003\n         ZAP   COUNT,COUNT(7) RE-ALIGN THE STUPID FIELD           UF003\n         B     NEXIT\nFOUNDHF  ZAP   COUNT,QDLNES   SET SCROLL AMOUNT TO PAGE SIZE      GP@P6\n         B     FOUNDH         NOW GO HALVE IT                     GP@P6\nFOUNDP   MP    COUNT,QDLNES   YES. MULTIPLY BY PAGE SIZE          UF003\n         B     NEXIT                                              GP@P6\nFOUNDPG  ZAP   COUNT,QDLNES   SET SCROLL AMOUNT TO PAGE SIZE      GP@P6\nNEXIT    BR    R4             RETURN\n* EXECUTED INSTRUCTIONS\nMVZ      MVZ   QFZONES(1),QPARM1 CHECK FOR NUMERIC\nPACK     PACK  COUNT,QPARM1(1) PACK COUNT\n***********************************************************************\n*                                                                     *\n*   REPOSITION HORIZONTALLY                                           *\n*                                                                     *\n***********************************************************************\nCOLUMN   CLI   QPARM1,C' '    ?/DEFAULT NEEDED\n         BE    COL010         YES, GO SET IT\n         CLI   QPARM1,C'0'    ?/SET COLUMN TO 1\n         BNE   COL020         NO, TEST IF NUMERIC\nCOL010   MVI   QLNG1+1,X'01'  SET LENGTH OF PARM\n         MVI   QPARM1,X'F1'   SET COLUMN TO 1\nCOL020   BAL   R4,NUMERIC     VALIDATE PARAMETER\n         CP    COUNT,=P'255'  IS THE COUNT FIELD TOO BIG?\n         BH    TILT           YES. TILT.\n         SP    COUNT,=P'1'    COLUMN RELATIVE TO ZERO\n         BM    TILT           INVALID. TILT.\n         CVB   R5,COUNT       CONVERT TO BINARY\n         STH   R5,QPOFFSET    STORE IN QPOFFSET\n         B     RESUME         CALL LISTDS\n***********************************************************************\n*                                                                     *\n*   LOCATE SPECIFIC RECORD                                            *\n*                                                                     *\n***********************************************************************\nFIND     CLI   QSUBNAME+1,C'A' IS THE REQUEST FOR FIND ALL?\n         BE    FIND2          YES. DO NOT UPDATE RECORD POINTER.\n         AP    QPREC,=P'1'    START SEARCH AT NEXT RECORD\nFIND2    CLI   QPARM1,C' '    IS THERE A PARAMETER?\n         BE    RESUME         NO. CONTINUE WITH PREVIOUS FIND.\n         LA    R2,QDREPLY+62  END OF USER REPLY\n         LA    R3,61          MAXIMUM LENGTH OF PARM\n         SH    R3,QOFF1       OFFSET TO FIRST PARM\nLOOP     CLC   0(1,R2),QPARM1 IS THIS THE DELIMITER?\n         BE    FOUND          YES. CONTINUE.\n         BCTR  R2,0           TRY THE PREVIOUS BYTE\n         BCT   R3,LOOP        IS THE LENGTH FIELD EXHAUSTED?\n         B     TILT           YES. TILT.\nFOUND    BCTR  R3,0           DECREMENT LENGTH BY 1\n         LA    R2,QDREPLY+1   ADDR OF REPLY + 1\n         AH    R2,QOFF1       ADDR OF FIRST BYTE OF PARM\n         EX    R3,MVC         MOVE PARM TO QPFIND\n         STH   R3,QPLNG       SAVE LENGTH-1 OF PARM\n         B     COLTEST        TEST IF COLUMN KEYWORD IS PRESENT\nMVC      MVC   QPFIND(1),0(R2) MOVE PARM TO QPFIND\n***********************************************************************\n*                                                                     *\n*    COLUMN RANGE FOR FIND                                            *\n*                                                                     *\n***********************************************************************\nCOLTEST  XC    QOFFS,QOFFS    RESET COLUMN OFFSETS\n         XC    QOFFE,QOFFE\n         LA    R2,3(R2,R3)    PREPARE FOR NEXT FIELD\n         LA    R3,QDREPLY+55  END OF USER REPLY\nLOOP1    CLC   0(3,R2),=CL3'COL'  ?/COLUMN PARAMETER\n         BE    FOUNDA         YES. GO PROCESS\n         LA    R2,1(R2)       NO. LOOK AT NEXT FIELD\n         CR    R2,R3          ?/END OF REPLY\n         BH    RESUME         YES. EXIT\n         B     LOOP1          NO. CHECK AGAIN\nFOUNDA   LA    R2,3(R2)       NEXT FIELD\n         CLI   0(R2),C'('     ?/LP PRESENT\n         BNE   PRESUME        NO. EXIT\n         LA    R2,1(R2)       NEXT FIELD\n         LA    R3,QDREPLY+62  END OF REPLY\n         LR    R5,R2          SAVE START OF THIS FIELD\n         MVI   QDELIMIT,C','  LOOKING FOR DELIMETER = ','\n         BAL   R7,CHKDEL      GO CHECK THE DELIMETER\n         CVB   R6,COUNT       CONVERT START COLUMN OFFSET TO BINARY\n         LTR   R6,R6          ?/USER SPECIFY OFFSET OF ZERO\n         BZ    PRESUME        YES. GO INDICATE AN ERROR\n         BCTR  R6,0           DECREMENT OFFSET BY 1\n         STH   R6,QOFFS       SAVE START COLUMN\n         LA    R2,1(R2)       NEXT FIELD\n         LR    R5,R2          SAVE START OF THIS FIELD\n         MVI   QDELIMIT,C')'  LOOKING FOR DELIMETER = ')'\n         BAL   R7,CHKDEL      GO CHECK THE DELIMETER\n         CVB   R6,COUNT       CONVERT END COLUMN OFFSET TO BINARY\n         LTR   R6,R6          ?/USER SPECIFY OFFSET OF ZERO\n         BZ    PRESUME        YES. GO INDICATE AN ERROR\n         BCTR  R6,0           DECREMENT OFFSET BY 1\n         STH   R6,QOFFE       SAVE END COLUMN\n         CLC   QOFFS,QOFFE    ?/ERROR IN COLUMN SPECIFICATION\n         BNL   PRESUME        YES. DISREGARD COLUMN SEARCH\n         B     RESUME         NO. CONTINUE WITH NORMAL PROCESSING\nCHKDEL   CLC   0(1,R2),QDELIMIT ?/DELIMITER FOUND\n         BE    CHK010         YES. GO PROCESS\n         LA    R2,1(R2)       NO. LOOK AT NEXT FIELD\n         CR    R2,R3          ?/END OF REPLY\n         BH    PRESUME        YES. EXIT\n         B     CHKDEL         NO. CHECK AGAIN\nCHK010   LR    R4,R2          SAVE DELIMITER ADDRESS\n         SR    R4,R5          LENGTH OF SUB-PARM\n         CH    R4,=H'3'       ?/LENGTH TO LONG\n         BNL   PRESUME        YES. DISREGARD COLUMN SEARCH\n         BCTR  R4,0           LENGTH FOR EXEC INTRUCTION\n         MVC   QFZONES,QFZONE  NUMERIC TEST\n         EX    R4,MVZ1\n         CLC   QFZONES,QFZONE ?/FIELD NUMERIC\n         BNE   TILT           NO. EXIT WITH ERROR MESSAGE\n         EX    R4,PACK1\n         BR    R7\nPRESUME  XC    QOFFS,QOFFS    DISREGARD FIND\n         XC    QOFFE,QOFFE       BY COLUMN RANGE\n         QTILT ' *** ERROR IN COLUMN SPECIFICATION ***'\nMVZ1     MVZ   QFZONES(1),0(R5)\nPACK1    PACK  COUNT,0(1,R5)\n***********************************************************************\n*                                                                     *\n*   REPOSITION IN SYSLOG DATASET BY TIME OF DAY                       *\n*                                                                     *\n***********************************************************************\nFINDTIME CLI   QPARM1,C' '    IS THE PARM OMITTED?\n         BE    TILT           YES. TILT.\n         B     RESUME         CALL LISTDS\n         EJECT                                                    UF003\n******************************************************************UF003\n*                                                                 UF003\n*   SWITCH MODEL TYPE FOR 3270 TERMINAL                           UF003\n*                                                                 UF003\n******************************************************************UF003\nMODEL    DS    0H             ,                                   UF003\n         GTTERM PRMSZE=QDPRMSZ,ALTSZE=QDALTSZ,ATTRIB=QDATTRB,     GP@P6+\n               TERMID=QDTRMID,MF=(E,QDGTRM)  HANDLE RECONNECT     GP@P6\n         CLC   QLNG1,=H'1'    SINGLE CHARACTER OPERAND?           GP@P6\n         BNE   MODELBAD       NO, UNSUPPORTED MODEL               GP@P6\n         CLI   QPARM1,C'2'    MODEL 2?                      GP@P6 UF003\n         BE    MODEL2         YES, BRANCH                         UF003\n         CLI   QPARM1,C'3'    MODEL 3?                      GP@P6 UF003\n         BE    MODEL3         YES, BRANCH                         UF003\n         CLI   QPARM1,C'4'    MODEL 4?                      GP@P6 UF003\n         BE    MODEL4         YES, BRANCH                         UF003\n         CLI   QPARM1,C'5'    MODEL 5?                      GP@P6 UF003\n         BE    MODEL5         YES, BRANCH                         UF003\n         CLI   QPARM1,C'X'    MODEL X?                            GP@P6\n         BE    MODELX         YES, BRANCH                         GP@P6\nMODELBAD QTILT 'UNSUPPORTED MODEL TYPE'                           UF003\n         SPACE 1                                                  UF003\n*              REDO MODEL CODE                       2002-06-16   GP@P6\n*              REMOVE ALL STSIZE MACROS              2003-02-05   GP@P6\nMODEL2   MVI   QDSCRO1,X'F5'       ERASE/WRITE                        *\n****     STSIZE SIZE=80,LINE=24    SET SCREEN SIZE FOR VTAM           *\n         LA    R1,80               SCREEN WIDTH                       *\n         LA    R0,24               SCREEN DEPTH                       *\n         B     MODELN              JOIN COMMON CODE                   *\nMODEL3   MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE              *\n****     STSIZE SIZE=80,LINE=32    SET SCREEN SIZE FOR VTAM           *\n         LA    R1,80               SCREEN WIDTH                       *\n         LA    R0,32               SCREEN DEPTH                       *\n         B     MODELN              JOIN COMMON CODE                   *\nMODEL4   MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE              *\n****     STSIZE SIZE=80,LINE=43    SET SCREEN SIZE FOR VTAM           *\n         LA    R1,80               SCREEN WIDTH                       *\n         LA    R0,43               SCREEN DEPTH                       *\n         B     MODELN              JOIN COMMON CODE                   *\nMODEL5   MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE              *\n****     STSIZE SIZE=132,LINE=27   SET SCREEN SIZE FOR VTAM           *\n         LA    R1,QDSCRTXT+80                              2003-02-05 *\n         LA    R1,132              SCREEN WIDTH                       *\n         LA    R0,27               SCREEN DEPTH                       *\n         B     MODELN              JOIN COMMON CODE                   *\nMODELX   MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE   2003-02-14 *\n         SLR   R0,R0                                       2003-02-14 *\n         IC    R0,QDALTSZ          GET ALTERNATE LINES     2003-02-14 *\n         SLR   R1,R1                                       2003-02-14 *\n         IC    R1,QDALTSZ+1        GET ALTERNATE COLUMNS   2003-02-14 *\n         CLC   QDALTSZ,QDPRMSZ     TWO DIFFERENT SIZES?    2003-02-14 *\n         BNE   MODELN              YES                     2003-02-14 *\n         MVI   QDSCRO1,X'F5'       NO, USE ERASE/WRITE     2003-02-14 *\n         SPACE 1                                                      *\nMODELN   STH   R1,QDLNELEN         LINE LENGTH                        *\n         SH    R1,=H'80'           WIDER THAN 80-COLUMNS?  2003-02-14 *\n         BNP   TOPLNOK             NO                      2003-02-14 *\n         LA    R14,QDSCRTXT+80     YES, POINT TO COLUMN 81 2003-02-14 *\n         LR    R15,R1              GET EXTRA WIDTH SIZE    2003-02-14 *\n         SLR   R1,R1               ZERO SOURCE LENGTH      2003-02-14 *\n         ICM   R1,8,QBLANK         USE BLANK PAD CHARACTER 2003-02-14 *\n         MVCL  R14,R0              BLANK REST OF TOP LINE  2003-02-14 *\n         LA    R1,QDSCRTXT+80      POINT TO COLUMN 81      2003-02-14 *\n         MVC   2(7,R1),=X'E4A2859989847E'      C'USERID='  2003-02-14 *\n         MVC   9(8,R1),QLOGON      DISPLAY USERID          2003-02-14 *\n         MVC   19(9,R1),=X'E3859994899581937E' C'TERMINAL='2003-02-14 *\n         MVC   28(8,R1),QDTRMID    DISPLAY TERMINAL NAME   2003-02-14 *\nTOPLNOK  LR    R15,R0              GET SCREEN LINE COUNT              *\n         SH    R15,=H'3'           GET DETAIL DISPLAY LINE COUNT      *\n         CVD   R15,COUNT           MAKE DECIMAL                       *\n         ZAP   QDLNES,COUNT        DETAIL LINE COUNT       2003-02-05 *\n         MH    R0,QDLNELEN         GET SCREEN DISPLAY CHARACTER COUNT *\n         ST    R0,QDSCRPLN         LENGTH OF BUFFER WITH SHADOW BUFFER*\n         MH    R15,QDLNELEN        GET DISPLAY DETAIL CONTENT CAPACITY*\n         ST    R15,QDSCRLEN        LENGTH TO CLEAR FOR EACH DISPLAY   *\n         LR    R15,R0              GET SCREEN BUFFER SIZE             *\n         SH    R15,QDLNELEN        GET CAPACITY LESS ONE SCREEN LINE  *\n         LA    R1,QDSCRTXT(R15)                                       *\n         MVC   0(7,R1),=C'REPLY -'                                    *\n         MVI   7(R1),X'0B'         HIGH INTENSITY INPUT FIELD         *\n         XC    8(63,R1),8(R1)      CLEAR INPUT AREA                   *\n         MVI   71(R1),X'0C'        LOW INTENSITY OUTPUT FIELD         *\n         LA    R1,72(,R1)          POINT TO PLUS SIGN INDICATOR AREA  *\n         ST    R1,QDPLUS@          SAVE ITS ADDRESS                   *\n         LA    R1,QDSCRTXT         POINT TO FIRST SCREEN LINE         *\n         AH    R1,QDLNELEN         POINT TO SECOND SCREEN LINE        *\n         ST    R1,QDHLINE@         SAVE HEADING LINE ADDRESS          *\n         AH    R1,QDLNELEN         POINT TO THIRD SCREEN LINE         *\n         ST    R1,QDLINE1@         SAVE FIRST DATA LINE ADDRESS       *\n         L     R1,QDSHADO@         POINT TO THE SHADOW AREA           *\n         XC    0(256,R1),0(R1)     CLEAR THE TITLE LINE               *\n         MVI   0(R1),X'07'         TOP LEFT TEXT IN WHITE             *\n         MVC   1(14,R1),0(R1)                                         *\n         MVI   16(R1),X'02'        COMMAND ECHO IN RED                *\n         MVI   80(R1),X'06'        YELLOW USERID+TERMINAL  2003-02-14 *\n         AR    R1,R15              POINT TO SHADOW OF LAST LINE       *\n         MVI   0(R1),X'07'         PROMPT IN WHITE                    *\n         MVC   1(6,R1),0(R1)                                          *\n         MVI   8(R1),X'32'         INPUT AREA IN RED UNDERSCORE       *\n         MVC   9(62,R1),8(R1)                                         *\n         MVI   72(R1),X'07'        PLUS SIGN IN WHITE IF SHOWN        *\n         MVC   73(7,R1),72(R1)                                        *\n         OI    QFLAG1,QFLG1RSH     ALTER SCREEN SIZE 2003-02-05       *\n         CLI   QDLNELEN+1,132      132 COLUMNS?      2003-02-05       *\n         BL    RESUMEIT            NO                2003-02-05       *\n         MVC   80(52,R1),79(R1)    YES, FILL IN REST 2003-02-05       *\nRESUMEIT DS    0H      END OF REDO MODEL CODE        2002-06-16   GP@P6\n         CLC   QPDSID,=H'0'        IS THERE A DATASET?            UF003\n         BNE   RESUME              YES, CALL LISTDS               UF003\n         L     R15,QDHLINE@        POINT TO HEADING LINE          GP@P6\n         MVC   0(80,R15),QBLANK    BLANK HEADING LINE       GP@P6 UF003\n         B     STOP                AND RETURN                     UF003\n         SPACE 1                                                  UF003\n***********************************************************************\n*                                                                     *\n*   SWITCH EXTENDED DATA STREAM USAGE             GP@P6 NOVEMBER 2002 *\n*                                                                     *\n***********************************************************************\nMONO     NI    QFLAG2,255-QFLG2EDS RESET BIT\n         B     RESUMEIT\nCOLOR    OI    QFLAG2,QFLG2EDS     SET BIT\n         B     RESUMEIT\n         EJECT                                                    UF003\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\nWORK     DSECT\n         DS    CL72\nCOUNT    DS    D\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEARCH": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02\\x16o\\x01\\x02!_!9\\x02\\x8b\\x02y\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-06-15T00:00:00", "modifydate": "2002-08-03T21:39:00", "lines": 651, "newlines": 633, "modlines": 0, "user": "GREG"}, "text": "SEARCH QSTART 'QUEUE COMMAND - JQE AND JOE SEARCH AND FORMAT'\n*******************************************************************\n* RNB CHANGES:                                                    *\n*      (1) RNB16 - PROCESS BOTH LOCAL AND REMOTE JOE QUEUE.       *\n*                  ALSO, FIX BUG IN UF020 THAT WAS CLEARING       *\n*                  FIELD JOEFLAG IN THE WORK JOE.                 *\n*      (2) RNB19 - FOR SP, SEARCH DUMP Q AND CONVERSION (XEQ) Q IF*\n*                  STATUS COMMAND OR DJ. ALSO OUTPUT QUEUE        *\n*******************************************************************\n         GBLB  &QSP           MVS/SP OPTION                       UF020\n         L     R10,QVCKPT     LOAD BASE REG\n         USING JQEDSECT,R9    BASE REG FOR JQE DSECT\n         USING JOEDSECT,R8    BASE REG FOR JOE DSECT\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n******************************************************************UF006\n*                                                                 UF006\n*   CALL - READ JES2 CHECKPOINT FILE                              UF006\n*                                                                 UF006\n******************************************************************UF006\n         L     R15,=V(CKPT)   ADDR OF CKPT ROUTINE                UF006\n         BALR  R14,R15        GO TO IT                            UF006\n***********************************************************************\n*                                                                     *\n*   BRANCH TO PROPER ROUTINE                                          *\n*                                                                     *\n***********************************************************************\n         LH    R1,QCODEH      LOAD FUNCTION CODE INTO R1\n         CH    R1,=H'48'      IS THE FUNCTION SUPPORTED?\n         BH    STOP           NO. RETURN.\n         B     *+4(R1)        BRANCH TO ROUTINE\n         B     ST             0 OFFSET\n         B     DA             4\n         B     DI             8\n         B     AO   DO        12\n         B     AI             16\n         B     AO             20\n         B     HI             24\n         B     HO             28\n         B     DT             32\n         B     DJ             36\n         B     DS             40\n         B     DQ             44\n         B     DF             48\n***********************************************************************\n*                                                                     *\n*   STATUS - FIND ALL JOBS THAT MATCH LEVEL                           *\n*                                                                     *\n***********************************************************************\nST       CLI   QPARM1,C' '    DID USER SPECIFY LEVEL?\n         BNE   ST2            NO. USE QLOGON.\n         MVC   QPARM1,QLOGON  MOVE USER PARM1 TO LEVEL\nST2      BAL   R2,PARMLEN     DETERMINE PARM LENGTH\n* SEARCH THE TSO QUEUE\n         USING JQTDSECT,R1    BASE REG FOR JQT\nDJ2      LH    R6,QLNG1       LENGTH OF COMPARE FOR LEVEL\n         L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTTSU      ADDR OF TSO QUEUE\n         MVI   QCLASS,0       INDICATE THIS IS THE TSO QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     DJ3            END OF QUEUE\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.\n         B     PRTJQE         PRINT THE RECORD\n* SEARCH THE SYSTEM QUEUE\nDJ3      L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTSTC      ADDR OF STC QUEUE\n         MVI   QCLASS,4       INDICATE THIS IS THE STC QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     DJ4            END OF QUEUE\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.\n         B     PRTJQE         PRINT THE RECORD\n* SEARCH FOR HELD OUTPUT\nDJ4      L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTOUT      ADDR OF $OUTPUT QUEUE\n         DROP  R1\n         MVI   QCLASS,8       INDICATE THIS IS THE HELD OUT QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         AIF   (&QSP).RNB19A                                      RNB19\n         B     ST3            END OF QUEUE\n         AGO   .RNB19B                                            RNB19\n.RNB19A  ANOP                                                     RNB19\n         B     DJ5            END OF QUEUE                        RNB19\n.RNB19B  ANOP                                                     RNB19\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.\n         CLI   JQEHLDCT,0     ARE THERE ANY HELD DATASETS? (PART 1)\n         BNE   PRTJQE         YES. PRINT THE RECORD.\n         TM    JQEHQLOK,X'F0' ARE THERE ANY HELD DATASETS? (PART 2)\n         BNZ   PRTJQE         YES. PRINT THE RECORD.\n         B     REJJQE         REJECT THE RECORD\n         AIF   (NOT &QSP).RNB19C                                  RNB19\n* SEARCH DUMP QUEUE                                               RNB19\nDJ5      L     R1,QCJQHEAD    LOAD ADDR OF JQT                    RNB19\n         USING JQTDSECT,R1    BASE REG FOR JQT                    RNB19\n         LA    R4,JQTDUMP     ADDR OF DUMP QUEUE                  RNB19\n         DROP  R1                                                 RNB19\n         MVI   QCLASS,12      INDICATE THIS IS THE DUMP QUEUE     RNB19\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE                    RNB19\n         B     DJ6            END OF QUEUE                        RNB19\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?      RNB19\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.               RNB19\n         B     PRTJQE         PRINT THE RECORD                    RNB19\n* SEARCH CONVERSION (XEQ) QUEUE                                   RNB19\nDJ6      L     R1,QCJQHEAD    LOAD ADDR OF JQT                    RNB19\n         USING JQTDSECT,R1    BASE REG FOR JQT                    RNB19\n         LA    R4,JQTXEQ      ADDR OF CONVERSION QUEUE            RNB19\n         DROP  R1                                                 RNB19\n         MVI   QCLASS,16      INDICATE THIS IS THE CNV QUEUE      RNB19\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE                    RNB19\n         B     DJ7            END OF QUEUE                        RNB19\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?      RNB19\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.               RNB19\n         B     PRTJQE         PRINT THE RECORD                    RNB19\n* SEARCH OUTPUT (AWAITING OUTPUT) QUEUE                           RNB19\nDJ7      L     R1,QCJQHEAD    LOAD ADDR OF JQT                    RNB19\n         USING JQTDSECT,R1    BASE REG FOR JQT                    RNB19\n         LA    R4,JQTAWOUT    ADDR OF OUTPUT QUEUE                RNB19\n         DROP  R1                                                 RNB19\n         MVI   QCLASS,20      INDICATE THIS IS THE CNV QUEUE      RNB19\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE                    RNB19\n         B     ST3            END OF QUEUE                        RNB19\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?      RNB19\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.               RNB19\n         B     PRTJQE         PRINT THE RECORD                    RNB19\n.RNB19C  ANOP                                                     RNB19\n* SEARCH INPUT QUEUES\nST3      MVI   QCLASS,192     START WITH CLASS A\nST4      BAL   R2,NEXTJQT     FIND NEXT QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     ST4            END OF QUEUE\n         CLI   JQEFLAGS,0     IS THE JOB EXECUTING OR HELD?\n         BNE   ST7            YES. SPECIAL HANDLING.\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?\n         BNE   SKIPJQE        NO. SKIP THIS RECORD.\n         B     PRTJQE         PRINT THE JQE\nST7      CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRT2JQE        YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?\n         BNE   REJJQE         NO. SKIP THIS RECORD.\n         B     PRT2JQE        PRINT THE RECORD WITHOUT INCR COUNT\n* SEARCH OUTPUT QUEUES\nST5      MVI   QCLASS,192     START WITH CLASS A\nST6      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE\n         BAL   R2,SRCHJOE     SEARCH A JOE QUEUE\n         B     ST6            END OF QUEUE\n         CLC   QPARM1,=CL8'*' ALL JOBS REQUESTED?                 GP@P6\n         BE    PRTJQE         YES, PRINT THE RECORD               GP@P6\n         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?\n         BNE   SKIPJOE        NO. SKIP THIS RECORD.\n         B     PRTJOE         PRINT THE RECORD\n* COMPARE USED TO CHECK LEVEL\nSTCLC    CLC   QPARM1(0),JQEJNAME IS THE JOBNAME EQUAL TO LEVEL?\n***********************************************************************\n*                                                                     *\n*   DQ - PRINT SUMMARY OF ALL JOBS IN THE INPUT QUEUES                *\n*                                                                     *\n***********************************************************************\n*  SEARCH ALL QUEUES\nDQ       MVI   QCLASS,192           START WITH CLASS A\n         QHEAD DQHEADER,X'24'       HEADING IN GREEN REVERSE      GP@P6\nDQ1      BAL   R2,NEXTJQT           FIND NEXT QUEUE\n         ZAP   QCOUNTE,=P'0'        ZERO COUNT FOR EXECUTING JOBS\n         ZAP   QCOUNTA,=P'0'        ZERO COUNT FOR AWAITING JOBS\n         ZAP   QCOUNTH,=P'0'        ZERO COUNT FOR HELD JOBS\n         BAL   R2,SRCHJQE           SEARCH THE QUEUE\n         B     DQ4                  END OF QUEUE\n         TM    JQEFLAGS,QUEBUSY     IS THIS JOB EXECUTING\n         BZ    DQ2                  NO, NEXT TEST\n         AP    QCOUNTE,=P'1'        YES, BUMP COUNTER\n         B     SKIPJQE              PROCESS NEXT JQE\nDQ2      TM    JQEFLAGS,X'E0'       IS THIS A HELD JOB\n         BZ    DQ3                  NO, NEXT TEST\n         AP    QCOUNTH,=P'1'        YES, BUMP COUNTER\n         B     SKIPJQE              PROCESS NEXT JQE\nDQ3      CLI   JQEFLAGS,0           IS THIS JOB AWAITING EXECUTION\n         BNE   SKIPJQE              NO, PROCESS NEXT JQE\n         AP    QCOUNTA,=P'1'        YES, BUMP COUNTER\n         B     SKIPJQE              PROCESS NEXT JQE\nDQ4      CLC   QCOUNT,=PL3'0'       IS THIS QUEUE EMPTY\n         BE    DQ1                  YES, TRY THE NEXT QUEUE\n         MVC   QDMSG,DQLINE         MOVE IN DETAIL LINE\n         MVC   FCOUNT,ED5           MOVE IN\n         ED    FCOUNT,QCOUNTE            NUMBER OF JOBS\n         MVC   QECOUNT,FCOUNT+3                    IN EXECUTION\n         MVC   FCOUNT,ED5           MOVE IN\n         ED    FCOUNT,QCOUNTA            NUMBER OF JOBS\n         MVC   QACOUNT,FCOUNT+3                    AWAITING EXECUTION\n         MVC   FCOUNT,ED5           MOVE IN\n         ED    FCOUNT,QCOUNTH            NUMBER OF JOBS\n         MVC   QHCOUNT,FCOUNT+3                    IN HELD STATUS\n         MVC   FCOUNT,ED5           MOVE IN THE TOTAL NUMBER OF JOBS\n         ED    FCOUNT,QCOUNT             IN THIS QUEUE\n         MVC   CLASS,QCLASS         MOVE IN QUEUE CLASS\n         BAL   R2,DISPLAY           GO DISPLAY THIS LINE\n         B     DQ1                  PROCESS THE NEXT QUEUE\n***********************************************************************\n*                                                                     *\n*   DF - PRINT SUMMARY OF ALL JOBS IN THE OUTPUT QUEUES               *\n*                                                                     *\n***********************************************************************\nDF       MVI   QCLASS,192           START WITH CLASS A\n         QHEAD DFHEADER,X'24'       HEADING IN GREEN REVERSE      GP@P6\nDF1      BAL   R2,NEXTJOT           FIND NEXT QUEUE\n         ZAP   QCOUNTE,=P'0'        ZERO COUNT FOR JOBS PRINTING\n         BAL   R2,SRCHJOE           SEARCH THE QUEUE\n         B     DF2                  END OF QUEUE\n         TM    JOEFLAG,X'20'        IS JOB PRINTING\n         BNO   SKIPJOE              NO, PROCESS NEXT JOE\n         AP    QCOUNTE,=P'1'        YES, BUMP COUNTER\n         B     SKIPJOE              PROCESS NEXT JOE\nDF2      CLC   QCOUNT,=PL3'0'       QUEUE EMPTY\n         BE    DF1                  YES, TRY THE NEXT QUEUE\n         MVC   QDMSG,DFLINE         MOVE IN DETAIL LINE\n         MVC   FCOUNT,ED5           MOVE IN\n         ED    FCOUNT,QCOUNTE            NUMBER OF JOBS\n         MVC   QECOUNT,FCOUNT+3                    PRINTING\n         MVC   FCOUNT,ED5           MOVE IN TOTAL NUMBER OF JOBS\n         ED    FCOUNT,QCOUNT             IN THIS QUEUE\n         MVC   CLASS,QCLASS         MOVE IN QUEUE CLASS\n         BAL   R2,DISPLAY           GO DISPLAY THIS LINE\n         B     DF1                  PROCESS NEXT QUEUE\n***********************************************************************\n*                                                                     *\n*   DJ - FIND A SPECIFIC JOB                                          *\n*                                                                     *\n***********************************************************************\nDJ       CLI   QPARM1,C' '    DID USER SPECIFY JOBNAME?\n         BE    DJ9            NO. TILT.\n         MVC   QLNG1,=H'7'    COMPARE FOR 8 CHARACTERS\n         B     DJ2            USE THE STATUS ROUTINES\nDJ9      QTILT '*** YOU MUST SPECIFY JOBNAME ***'\n***********************************************************************\n*                                                                     *\n*   DI - PRINT ALL JOBS IN INPUT QUEUES                               *\n*                                                                     *\n***********************************************************************\nDI       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?\n         BNE   DI5            YES. LIMIT TO ONE QUEUE.\n* SEARCH ALL QUEUES\n         MVI   QCLASS,192     START WITH CLASS A\nDI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE\n         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE\n         B     DI2            END OF QUEUE\n         B     PRTJQE         PRINT THE RECORD\n* SEARCH ONLY ONE QUEUE\nDI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS\n         BAL   R2,FINDJQT     FIND QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         B     PRTJQE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   AI - PRINT JOBS IN INPUT QUEUES THAT ARE AVAILABLE FOR SELECTION  *\n*                                                                     *\n***********************************************************************\nAI       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?\n         BNE   AI5            YES. LIMIT TO ONE QUEUE.\n* SEARCH ALL QUEUES\n         MVI   QCLASS,192     START WITH CLASS A\nAI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE\n         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE\n         B     AI2            END OF QUEUE\n         CLI   JQEFLAGS,0     IS THE JOB BUSY OR HELD?\n         BNE   REJJQE         YES. SKIP IT.\n         B     PRTJQE         PRINT THE RECORD\n* SEARCH ONLY ONE QUEUE\nAI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS\n         BAL   R2,FINDJQT     FIND QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         CLI   JQEFLAGS,0     IS THE JOB BUSY OR HELD?\n         BNE   REJJQE         YES. SKIP IT.\n         B     PRTJQE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   AO - PRINT AVAILABLE JOBS IN THE OUTPUT QUEUE                     *\n*                                                                     *\n***********************************************************************\nAO       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?\n         BNE   AO5            YES. LIMIT TO ONE QUEUE.\n* SEARCH ALL QUEUES\n         MVI   QCLASS,192     START WITH CLASS A\nAO2      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE\n         BAL   R2,SRCHJOE     SEARCH A JQE QUEUE\n         B     AO2            END OF QUEUE\n         B     PRTJOE         PRINT THE RECORD\n* SEARCH ONLY ONE QUEUE\nAO5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS\n         BAL   R2,FINDJOT     FIND QUEUE\n         BAL   R2,SRCHJOE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         B     PRTJOE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   HI - PRINT JOBS IN INPUT QUEUES THAT ARE HELD                     *\n*                                                                     *\n***********************************************************************\nHI       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?\n         BNE   HI5            YES. LIMIT TO ONE QUEUE.\n* SEARCH ALL QUEUES\n         MVI   QCLASS,192     START WITH CLASS A\nHI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE\n         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE\n         B     HI2            END OF QUEUE\n         TM    JQEFLAGS,X'E0' IS THE JOB HELD?\n         BZ    REJJQE         NO. SKIP IT.\n         B     PRTJQE         PRINT THE RECORD\n* SEARCH ONLY ONE QUEUE\nHI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS\n         BAL   R2,FINDJQT     FIND QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         TM    JQEFLAGS,X'E0' IS THE JOB HELD?\n         BZ    REJJQE         NO. SKIP IT.\n         B     PRTJQE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   HO - LIST ALL JOBS WITH HELD OUTPUT                               *\n*                                                                     *\n***********************************************************************\n         USING JQTDSECT,R1    BASE REG FOR JQT\nHO       L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTOUT      ADDR OF $OUTPUT QUEUE\n         DROP  R1\n         MVI   QCLASS,8       INDICATE THIS IS THE HELD OUT QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         CLI   JQEHLDCT,0     ARE THERE ANY HELD DATASETS? (PART 1)\n         BNE   PRTJQE         YES. PRINT THE RECORD.\n         TM    JQEHQLOK,X'F0' ARE THERE ANY HELD DATASETS? (PART 2)\n         BNZ   PRTJQE         YES. PRINT THE RECORD.\n         B     REJJQE         REJECT THE RECORD\n***********************************************************************\n*                                                                     *\n*   DA - FIND ALL EXECUTING JOBS                                      *\n*                                                                     *\n***********************************************************************\nDA       MVI   QCLASS,192     START WITH CLASS A\nDA2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     DA2            END OF QUEUE\n         TM    JQEFLAGS,QUEBUSY IS THE JOB EXECUTING?\n         BZ    REJJQE         NO. REJECT IT.\n         B     PRTJQE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   DT - LIST ALL TSO USERS                                           *\n*                                                                     *\n***********************************************************************\n         USING JQTDSECT,R1    BASE REG FOR JQT\nDT       L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTTSU      ADDR OF TSO QUEUE\n         DROP  R1\n         MVI   QCLASS,0       INDICATE THIS IS THE TSO QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         B     PRTJQE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   DS - LIST ALL SYSTEM STARTED TASKS                                *\n*                                                                     *\n***********************************************************************\n         USING JQTDSECT,R1    BASE REG FOR JQT\nDS       L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTSTC      ADDR OF STC QUEUE\n         DROP  R1\n         MVI   QCLASS,4       INDICATE THIS IS THE STC QUEUE\n         BAL   R2,SRCHJQE     SEARCH THE QUEUE\n         B     STOP           END OF QUEUE\n         B     PRTJQE         PRINT THE RECORD\n***********************************************************************\n*                                                                     *\n*   DETERMINE LENGTH OF LEVEL                                         *\n*                                                                     *\n***********************************************************************\nPARMLEN  LA    R3,7           MAXIMUM LENGTH OF 8\n         LA    R4,QPARM1+7    END OF FIELD\nPARMLEN2 CLI   0(R4),C' '     IS THIS BYTE BLANK?\n         BNE   PARMLEN3       NO. THIS IS THE LENGTH\n         BCTR  R4,0           TRY PREVIOUS BYTE\n         BCT   R3,PARMLEN2    LOOP\nPARMLEN3 STH   R3,QLNG1       STORE THE LENGTH OF LEVEL\n         BR    R2             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   SEARCH A JQE QUEUE                                                *\n*                                                                     *\n***********************************************************************\nSRCHJQE  ZAP   QCOUNT,=P'0'   ZERO THE QUEUE COUNT\n         AIF   (&QSP).QSP3                                        UF020\n         LH    R9,0(R4)       LOAD FIRST JQE OFFSET\n         N     R9,=X'0000FFFF' KILL EXTRANEOUS BITS\nNEXTJQE  SLA   R9,2           MULTIPLY BY 4\n         AGO   .QSP4                                              UF020\n.QSP3    ANOP                                                     UF020\n         L     R9,0(R4)       LOAD FIRST JQE OFFSET               UF020\nNEXTJQE  LA    R9,0(,R9)      KILL EXTRANEOUS BITS                UF020\n         LTR   R9,R9          TEST FOR END OF QUEUE               UF020\n.QSP4    ANOP                                                     UF020\n         BZR   R2             END OF QUEUE. RETURN.\n         A     R9,QCJQTA      ADD BASE TO OFFSET\n         B     4(R2)          DETERMINE ELIGIBILITY\nPRTJQE   AP    QCOUNT,=P'1'   INCREMENT COUNT\nPRT2JQE  SR    R1,R1          INDICATE THIS IS A JQE\n         L     R15,=V(FORMAT) ADDR OF PRINT MODULE\n         BALR  R14,R15        PRINT THE JQE IN R9\n         AIF   (&QSP).QSP5                                        UF020\nREJJQE   LH    R9,JQECHAIN    LOAD OFFSET TO NEXT JQE\n         AGO   .QSP6                                              UF020\n.QSP5    ANOP                                                     UF020\nREJJQE   L     R9,JQENEXT     LOAD OFFSET TO NEXT JQE             UF020\n.QSP6    ANOP                                                     UF020\n         B     NEXTJQE        GET THE NEXT JQE\nSKIPJQE  AP    QCOUNT,=P'1'   INCREMENT COUNT\n         B     REJJQE         CONTINUE\n***********************************************************************\n*                                                                     *\n*   SEARCH A JOE QUEUE                                                *\n*                                                                     *\n***********************************************************************\n         AIF   (&QSP).QSP7                                        RNB16\nSRCHJOE  ZAP   QCOUNT,=P'0'   ZERO THE QUEUE COUNT\nFIRSTJOE LH    R8,0(R4)       LOAD FIRST JOE OFFSET\n         N     R8,=X'0000FFFF' KILL EXTRANEOUS BITS.\n         AGO   .QSP8                                              UF020\n.QSP7    ANOP                                                     UF020\nSRCHJOE  ZAP   QCOUNT,=P'0'    ZERO THE QUEUE COUNT               RNB16\n         OI    QFLAG1,QFLG1LCL SHOW SEARCHING LOCAL QUEUE         RNB16\n         B     FIRSTJOE        AND GO DO IT                       RNB16\n*                                                                 RNB16\nSRCHJOE1 NI    QFLAG1,X'FF'-QFLG1LCL TURN OFF LOCAL QUEUE FLAG    RNB16\n         LA    R4,4(,R4)             POINT TO REMOTE QUEUE        RNB16\n*                                                                 RNB16\nFIRSTJOE L     R8,0(R4)       LOAD FIRST JOE OFFSET               UF020\n         LA    R8,0(,R8)       KILL EXTRANEOUS BITS.              UF020\n.QSP8    ANOP                                                     UF020\n         LTR   R8,R8          IS THE QUEUE EMPTY?\n         AIF   (&QSP).QSP8A                                       RNB16\n         BZR   R2             YES. RETURN TO CALLER.\n         AGO   .QSP8B                                             RNB16\n.QSP8A   BNZ   $1             /NO  - CONTINUE                     RNB16\n*                             /YES -                              RNB16\n         TM    QFLAG1,QFLG1LCL WAS THIS THE LOCAL QUEUE?          RNB16\n         BO    SRCHJOE1       /YES - GO DO REMOTE QUEUE           RNB16\n         BR    R2             /NO  - RETURN TO CALLER             RNB16\n$1       EQU   *                                                  RNB16\n.QSP8B   ANOP                                                     RNB16\n         XC    PRIORITY(12),PRIORITY ZERO OUT HIGHEST POINTERS\n         AIF   (&QSP).QSP9                                        UF020\nNEXTJOE  SLA   R8,2           MULTIPLY BY 4\n         AGO   .QSP10                                             UF020\n.QSP9    ANOP                                                     UF020\nNEXTJOE  LA    R8,0(,R8)      CLEAR EXTRA BITS                    UF020\n         LTR   R8,R8          TEST FOR END OF QUEUE               UF020\n.QSP10   ANOP                                                     UF020\n         BZ    TESTJOE        END OF QUEUE. PASS HIGHEST TO CALLER.\n         A     R8,QCJOTA      ADD BASE TO OFFSET\n         AIF   (&QSP).QSP11                                       UF020\n         LH    R9,JOEJQE      OFFSET TO JQE\n         SLA   R9,2           MULTIPLY BY 4\n         AGO   .QSP12                                             UF020\n.QSP11   ANOP                                                     UF020\n         L     R9,JOEJQE      OFFSET TO JQE                       UF020\n         N     R9,=A(X'00FFFFFF')  CLEAR EXTRA BITS               UF020\n.QSP12   ANOP                                                     UF020\n         BZ    TRYJOE         THIS JOE ALREADY USED. TRY NEXT ONE.\n         A     R9,QCJQTA      ADD BASE TO OFFSET\n         LA    R7,255         PRESET MAXIMUM PRIORITY\n         TM    JQEPRIO,240    IS THIS JOB PRIORITY 15?\n         BO    HIGHJOE        YES. PASS TO CALLER.\n         LA    R1,16          PRESET PRIORITY ONE\n         CLI   JQETYPE,$HARDCPY IS THE JOB EXECUTING?\n         BNE   EXECJOE        YES. USE PRIORITY ONE.\n         IC    R1,JQEPRIO     INSERT JQE PRIORITY\nEXECJOE  IC    R7,JOEPRIO     INSERT JOE PRIORITY\n         AR    R7,R1          ADD PRIORITIES\n         SRL   R7,1           BECAUSE HASP DOES IT, THAT'S WHY\nHIGHJOE  C     R7,PRIORITY    IS THIS LESS THAN PREVIOUS HIGH?\n         BL    TRYJOE         YES. TRY NEXT ONE.\n         STM   R7,R9,PRIORITY NO. REPLACE PREVIOUS HIGH.\n         AIF   (&QSP).QSP11A                                      UF020\nTRYJOE   LH    R8,JOENEXT     ADDR OF NEXT JOE\n         AGO   .QSP12A                                            UF020\n.QSP11A  ANOP                                                     UF020\nTRYJOE   L     R8,JOENEXT     ADDR OF NEXT JOE                    UF020\n         N     R8,=A(X'00FFFFFF')  CLEAR EXTRA BITS               UF020\n.QSP12A  ANOP                                                     UF020\n         B     NEXTJOE        TRY NEXT JOE\nTESTJOE  LM    R7,R9,PRIORITY LOAD ADDR OF HIGHEST JOE\n         LTR   R8,R8          WAS THE QUEUE EMPTY?\n         AIF   (&QSP).QSP12B                                      RNB16\n         BZR   R2             YES. END OF QUEUE.\n         MVC   JOEJQE,=F'0'   INDICATE THIS JOE USED              VBA01\n         AGO   .QSP12C                                            RNB16\n.QSP12B  ANOP                                                     RNB16\n         BNZ   $2                                                 RNB16\n         TM    QFLAG1,QFLG1LCL WAS THIS THE LOCAL QUEUE?          RNB16\n         BO    SRCHJOE1       /YES - GO DO REMOTE QUEUE           RNB16\n         BR    R2             /NO  - END OF QUEUE.                RNB16\n$2       EQU   *                                                  RNB16\n         MVC   JOEJQEB,=F'0'  INDICATE THIS JOE USED        VBA01 RNB16\n.QSP12C  ANOP                                                     RNB16\n*        MVC   JOEJQEB,=F'0'  INDICATE THIS JOE USED        VBA01 RNB16\n*        MVC   JOEJQE,=F'0'   INDICATE THIS JOE USED        CBT1  UF020\n         B     4(R2)          DETERMINE ELIGIBILITY\nPRTJOE   LA    R1,4           INDICATE THIS IS A JOE\n         AP    QCOUNT,=P'1'   INCREMENT COUNT\n         L     R15,=V(FORMAT) ADDR OF PRINT MODULE\n         BALR  R14,R15        PRINT THE JOE IN R9\nREJJOE   B     FIRSTJOE       GET THE NEXT JOE\nSKIPJOE  AP    QCOUNT,=P'1'   INCREMENT COUNT\n         B     REJJOE         CONTINUE\n***********************************************************************\n*                                                                     *\n*   DETERMINE INPUT QUEUE                                             *\n*                                                                     *\n***********************************************************************\nFINDJQT  TR    QCLASS,CLASSTBL DETERMINE OFFSET\n         LH    R4,QCLASSH     LOAD TABLE OFFSET\n         BCTR  R4,0           SUBTRACT 1\n         STH   R4,QCLASSH     RESTORE VALUE\n         B     NEXTJQT2       CONTINUE\nNEXTJQT  TR    QCLASS,CLASSTBL DETERMINE OFFSET FROM FIRST CLASS\n         LH    R4,QCLASSH     LOAD TABLE OFFSET\n         CH    R4,=H'36'      IS THIS THE LAST QUEUE?\n         BNL   NEXTJQT9       YES. GO HOME.\nNEXTJQT2 TR    QCLASS,NAMETBL MOVE CLASS NAME TO QCLASS\n         AR    R4,R4          MULTIPLY BY 2\n         AIF   (NOT &QSP).QSP13                                   UF020\n         AR    R4,R4          AND BY 2 AGAIN                      UF020\n.QSP13   ANOP                                                     UF020\n         USING JQTDSECT,R1    BASE REG FOR JQT\n         L     R1,QCJQHEAD    LOAD ADDR OF JQT\n         LA    R4,JQTCLSA(R4) NEXT QUEUE\n         DROP  R1\n         BR    R2             RETURN TO CALLER\nNEXTJQT9 CLI   QCODE,0        IS THIS A STATUS REQUEST?\n         BE    ST5            YES. GO TO STATUS.\n         CLI   QCODE,36       IS THIS A DJ REQUEST?\n         BNE   STOP           NO. GO HOME.\n         B     ST5            YES. GO TO STATUS.\n***********************************************************************\n*                                                                     *\n*   DETERMINE OUTPUT QUEUE                                            *\n*                                                                     *\n***********************************************************************\nFINDJOT  TR    QCLASS,CLASSTBL DETERMINE OFFSET\n         LH    R4,QCLASSH     LOAD TABLE OFFSET\n         BCTR  R4,0           SUBTRACT 1\n         STH   R4,QCLASSH     RESTORE VALUE\n         B     NEXTJOT2       CONTINUE\nNEXTJOT  TR    QCLASS,CLASSTBL DETERMINE OFFSET FROM FIRST CLASS\n         LH    R4,QCLASSH     LOAD TABLE OFFSET\n         CH    R4,=H'36'      IS THIS THE LAST QUEUE?\n         BNL   STOP           YES. GO HOME.\nNEXTJOT2 TR    QCLASS,NAMETBL MOVE CLASS NAME TO QCLASS\n         AR    R4,R4          MULTIPLY BY 2\n         AIF   (NOT &QSP).QSP14                                   UF020\n         SLL   R4,2           AND THEN BY 4 (WILL ONLY GET LOCALS)UF020\n.QSP14   ANOP                                                     UF020\n         USING JOTDSECT,R1    BASE REG FOR JOT\n         L     R1,QCJOTA      LOAD ADDR OF JOT\n         LA    R4,JOTCLSQ(R4) NEXT QUEUE\n         DROP  R1\n         BR    R2             RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   CALL DISPLAY ROUTINE                                              *\n*                                                                     *\n***********************************************************************\nDISPLAY  LA    R1,QDMSG             SAVE ADDRESS\n         ST    R1,QDMSGA                 OF THE MESSAGE\n         MVC   QDMLNG,=H'80'        SET THE LENGTH\n         L     R15,=V(DISPLAY)      BRANCH TO\n         BALR  R14,R15                     DISPLAY\n         BR    R2                   RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   GO HOME                                                           *\n*                                                                     *\n***********************************************************************\nSTOP     QSTOP\n         LTORG\n***********************************************************************\n*                                                                     *\n*   TABLES FOR CLASS DETERMINATION                                    *\n*                                                                     *\n***********************************************************************\nNAMETBL  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\nCLASSTBL DC    192X'01'\n         DC    X'00010203040506070809',7X'00'\n         DC    X'0A0B0C0D0E0F101112',8X'00'\n         DC    X'131415161718191A',6X'00'\n         DC    X'1B1C1D1E1F2021222324',6X'00'\n***********************************************************************\n*                                                                     *\n*   MISCELLANEOUS GARBAGE                                             *\n*                                                                     *\n***********************************************************************\nED5      DC    X'402020202120'\nDQHEADER DC    CL80'*** INPUT QUEUES ***'\nDQLINE   DC    CL80' INPUT                        EXECUTING      WAITINX\n               G      HELD'\nDFHEADER DC    CL80'*** OUTPUT QUEUES ***'\nDFLINE   DC    CL80' OUTPUT                       PRINTING'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nSEARCH   CSECT ,                                                  UF023\n         SPACE 1                                                  UF001\n$MAXNODE EQU   99             FOR NJE $JOT EXPANSION              UF001\n         SPACE 1                                                  UF001\n         $JQE\n         AIF   (NOT &QSP).NOEQU\nJQEHQLOK EQU   JQEJBLOK       NEW LABEL FOR OLD FIELD             UF020\n.NOEQU   ANOP\n         $JOE\n         $JOT\n         $JQT\nWORK     DSECT\n         DS    CL80\nPRIORITY DS    3F\n         QCOMMON\n         ORG   QDMSG\n         DS    CL9\nCLASS    DS    CL1\n         DS    CL2\nQTCOUNT  DS    CL6\n         DS    CL7\nQECOUNT  DS    CL3\n         DS    CL12\nQACOUNT  DS    CL3\n         DS    CL10\nQHCOUNT  DS    CL3\n         ORG   QTCOUNT\nFCOUNT   DS    CL6\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSLOG": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02 /\\x01\\x02 /#\\x00\\x00n\\x00n\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-07-21T00:00:00", "modifydate": "2002-07-21T23:00:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "GREG"}, "text": "SYSLOG   QSTART 'QUEUE COMMAND - PRINT THE SYSTEM LOG DATASET'\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING WORK,R13       BASE REG FOR TEMP WORK\n***********************************************************************\n*                                                                     *\n*   DETERMINE CURRENT SYSLOG JOB NUMBER               GP@P6 JULY 2002 *\n*                                                                     *\n***********************************************************************\n         ICM   R1,3,QLNG1     WAS A PARAMETER SPECIFIED?\n         BZ    SLTHIS         NO, WANT THIS SYSTEMS SYSLOG\n         CLC   QPARM1,=CL8'SYSLOG'\n         BNE   SLTHAT         DO NOT INTERFERE WITH SPECIFIC REQUEST\nSLTHIS   L     R3,16          POINT TO CVT\n         USING CVTDSECT,R3\n         L     R3,CVTJESCT    POINT TO JESCT\n         DROP  R3\n         USING JESCT,R3\n         L     R3,JESSSCT     POINT TO SSCT\n         DROP  R3\n         USING SSCT,R3\n         L     R3,SSCTSSVT    POINT TO SSVT\n         DROP  R3\n         USING SSVT,R3\n         L     R3,$SVHAVT     POINT TO HAVT\n         DROP  R3\n         LTR   R3,R3          TEST IF ANY PITS\n         BZ    SLTHAT         NO, GIVE UP SEARCH\n         ICM   R3,15,4(R3)    POINT TO SJB OF ASID 1\n         BZ    SLTHAT         SYSLOG MUST NOT BE ACTIVE\n         CLC   236(8,R3),=CL8'SYSLOG'\n         BNE   SLTHAT         SOMETHING HAS GONE AMISS\n         MVC   QPARM1,QBLANK\n         MVC   QPARM1+1(4),232(R3)\n         OC    QPARM1(5),=CL5'10000'\n         MVI   QLNG1+1,5      QPARM1 IS NOW 5-DIGIT INTERNAL JOB ID\nSLTHAT   DS    0H\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n***********************************************************************\n*                                                                     *\n*   CHECK JOBNAME EQUAL SYSLOG                                        *\n*                                                                     *\n***********************************************************************\n         L     R9,QCJCTA      ADDR OF IOAREA FOR JCT\n         USING JCTSTART,R9    BASE REG FOR JCT\n         CLC   JCTJNAME,=CL8'SYSLOG' IS THIS SYSLOG?\n         BNE   TILT           NO. TILT.\n***********************************************************************\n*                                                                     *\n*   DETERMINE NUMBER OF DATASETS FROM CURRENT DATASET                 *\n*                                                                     *\n***********************************************************************\n         LH    R3,JCTPDDBK    HIGHEST DATASET ID NUMBER\n         LH    R2,QLNG2       LENGTH OF BACKUP PARM\n         SH    R2,=H'1'       IS THE BACKUP PARM ZERO LENGTH?\n         BM    CALLLIST       YES. SKIP.\n         CLI   QPARM2,C'-'    IS THERE A MINUS SIGN?\n         BNE   PLUS           NO. SKIP.\n         MVI   QPARM2,C'0'    CHANGE MINUS TO ZERO\nPLUS     MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. QUIT.\n         EX    R2,PACK        PACK THE FIELD\n         CVB   R2,CONVERT     CONVERT TO BINARY\n         SR    R3,R2          BACK UP NUMBER OF DATASETS\n         CH    R3,=H'101'     IS THE NUMBER LESS THAN 101?\n         BL    TILT           YES. TILT.\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\nCALLLIST STH   R3,QPDSID      STORE DATASET ID\n         MVC   QPOFFSET,=H'0' PRINT OFFSET ZERO\n         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\nTILT     QTILT '*** INVALID PARAMETER ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nMVZ      MVZ   QFZONES(1),QPARM2 CHECK FOR NUMERIC\nPACK     PACK  CONVERT,QPARM2(1) CONVERT TO BINARY\n         LTORG\n         DROP  ,                   DROP ALL ADDRESSING            NERDC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nSYSLOG   CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $CVT   ,                                                 GP@P6\n         $JESCT ,                                                 GP@P6\n         $SSCT  ,                                                 GP@P6\n         $SVT   ,                                                 GP@P6\n         $JCT\nWORK     DSECT\n         DS    72C\nCONVERT  DS    D\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSOUT": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x02\\x17?\\x01\\x02\\x18\\x1f\\x15S\\x01\\x9e\\x01\\x9d\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2002-06-22T00:00:00", "modifydate": "2002-06-30T15:53:00", "lines": 414, "newlines": 413, "modlines": 0, "user": "GREG"}, "text": "SYSOUT   QSTART 'QUEUE COMMAND - MANIPULATE SYSOUT'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB00 - MOVED THINGS AROUND FOR FOX ASSEMBLER              *\n*      (2) RNB08 - ALLOW CANCEL/REQ/DEL IF JOBNAME STARTS WITH USERID *\n*                  OR NOTIFY IS FOR USERID, UNLESS JOB SUBMITTED FROM *\n*                  PJS. ALLOW TEC USERS TO MANIPULATE OTHER TEC USER'S*\n*                  JOBS, AND ALSO STC'S.  KEYED TO QRNB=1             *\n*      (3) RNB09 - FOR A REQ COMMAND, IF NO NEWCLASS GIVEN USE CLASS C*\n*                  KEYED TO QRNB=1.                                   *\n***********************************************************************\n         GBLB  &QRNB                                              RNB08\n         USING QCKPT,R10\n         L     R10,QVCKPT\n         USING QDISPLAY,R9\n         L     R9,QVDSPL\n         USING WORK,R13\n***********************************************************************\n*                                                                     *\n*   TEST AUTHORIZATION OF QUEUE                                       *\n*                                                                     *\n***********************************************************************\n**       TESTAUTH FCTN=1          TEST AUTHORIZATION OF USER\n**       LTR   R15,R15            ?/AUTHORIZED\n**       BZ    FJOB               YES. KEEP ON TRUCKING\n         TM    QFLAG1,QFLG1APF    ?/AUTHORIZED                    GP@P6\n         BO    FJOB               YES. KEEP ON TRUCKING           GP@P6\n         QTILT ' *** FUNCTION IS NOT AUTHORIZED ***'\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT AND IOT                       *\n*                                                                     *\n***********************************************************************\nFJOB     L     R15,=V(FINDJOB)    ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15            GO TO IT\n***********************************************************************\n*                                                                     *\n*   VALIDATE THE JOBNAME                                              *\n*                                                                     *\n***********************************************************************\n         LA    R2,QLOGON          START ADDR OF QLOGON\n         LR    R3,R2              SAVE START ADDR\n         LA    R4,7               MAX LENGTH OF LOGON ID\nVALID000 CLI   0(R2),C' '         ?/END OF LOGON ID\n         BE    VALID010           YES. CONTINUE PROCESSING\n         LA    R2,1(R2)           NO.  POINT TO NEXT FIELD\n         BCT   R4,VALID000        GO CHECK AGAIN\nVALID010 SR    R2,R3              LENGTH OF LOGON ID\n         BCTR  R2,R0              DECREMENT FOR EXECUTE INSTRUCTION\n         USING JCTSTART,R4        BASE REG FOR JCT\n         L     R4,QCJCTA          A(JCT)\n         EX    R2,VERJOBN         ?/JOB BELONGS TO USER\n         AIF   (NOT &QRNB).RNB08A                                 RNB08\n         BE    OK                 YES - LET IT GO                 RNB08\n         CLC   =C'PJS',QLOGON IS THIS A PJS USER?                 RNB08\n         BE    WRONGJOB       YES - INVALID                       RNB08\n         BAL   R6,NOPJSJOB    ENSURE NOT A PJS JOB FOR CAN/DEL    RNB08\n         CLC   QLOGON(*-*),JCTTSUID  ** EXECUTED **               RNB08\n         EX    R2,*-6         IS THE USERID SAME AS NOTIFY ID?    RNB08\n         BE    OK             YES - OK                            RNB08\n         CLC   =C'TEC',QLOGON   IS THIS A TEC USER?               RNB08\n         BNE   WRONGJOB         NO  - INVALID                     RNB08\n         TM    JCTJOBFL,JCTSTCJB   IS IT AN STC?                  RNB08\n         BO    OK                  /YES - OK FOR TEC USER         RNB08\n         CLC   =C'TEC',JCTJNAME IS JOBNAME FOR A TEC USER?        RNB08\n         BE    OK               YES - OK                          RNB08\n         CLC   =C'TEC',JCTTSUID IS NOTIFY FOR A TEC USER?         RNB08\n.RNB08A  ANOP                                                     RNB08\n*        BNE   WRONGJOB           NO. GO TELL HIM  DELETED VBA01\nOK       EQU   *                                                  RNB08\n***********************************************************************\n*                                                                     *\n*   VALIDATE THE FUNCTION CODE                                        *\n*                                                                     *\n***********************************************************************\n         LH    R1,QCODEH          GET FUNCTION CODE\n         CH    R1,=H'8'           ?/VALID FUNCTION CODE\n         BH    STOP               NO. EXIT\n***********************************************************************\n*                                                                     *\n*   BRANCH TO THE APPROPIATE PROCESSOR                                *\n*                                                                     *\n***********************************************************************\n         LA    R7,SSOBHDR         ADDR FOR SUBSYSTEM OPTION BLOCK\n         USING SSOB,R7\n         B     *+4(R1)\n         B     DELETE             0   DELETE REQUEST\n         B     REQUEUE            4   REQUEUE REQUEST\n         B     CANCEL             8   CANCEL REQUEST\n***********************************************************************\n*                                                                     *\n*   PROCESS CANCEL REQUEST                                            *\n*                                                                     *\n***********************************************************************\nCANCEL   LA    R5,SSCSBGN         A(CANCEL PARAMETER LIST)\n         BAL   R6,INITSSOB        GO INITIALIZE THE SSOB.\n         MVC   SSOBFUNC,=AL2(SSOBCANC)  SET THE FUNCTION\n         XC    SSCSBGN(SSCSIZE),SSCSBGN CLEAR PARM LIST\n         MVC   SSCSLEN,=AL2(SSCSIZE) SET LENGTH OF CANCEL PARM LIST\n         CLI   QPARM2,C'P'        ?/PURGE THE OUTPUT\n         BNE   CAN000             NO. DON'T SET THE FLAG\n         OI    SSCSFLGS,SSCSCOUT  YES\nCAN000   MVC   SSCSJOBN,JCTJNAME  JOBNAME\n         MVC   SSCSJOBI,JCTJOBID  JES2 JOB ID\n         MVC   SSCSDIMP,=H'16'\n         LA    R5,SSCSJOBI        A(JES2 JOB ID)\n         BAL   R6,FIXJOBID        ENSURE JOBID HAS NO IMBEDDED BLANKS\n         BAL   R6,VERREQ          VERIFY THE REQUEST\n         BAL   R6,CALLSSI         GO CALL SUBSYSTEM INTERFACE RTN\n         L     R1,SSOBRETN        GET RC FOR CANCEL FUNCTION\n         B     *+4(R1)\n         B     FUNCTOK            0 -  CANCEL COMPLETED\n         B     TILTNOJB           4 -  JOBNAME NOT FOUND\n         B     TILTBADI           8 -  INVALID JOBNAME/JOB ID COMB.\n         B     TILTNCAN           12 - JOB NOT CANCELLED - DUP JOBN\n         B     TILTMALL           16 - STATUS ARRAY TOO SMALL\n         B     TILTOUTP           20 - JOB NOT CANCELLED - ON OUTPUT Q\n         B     TILTYNTX           24 - JOB ID WITH INVALID SYNTAX\n         B     TILTICAN           28 - INVALID CANCEL REQUEST\n***********************************************************************\n*                                                                     *\n*   PROCESS REQUEUE REQUEST                                           *\n*                                                                     *\n***********************************************************************\nREQUEUE  LA    R5,SSSOBGN         A(REQUEUE SYSOUT PARM LIST)\n         BAL   R6,INITSSOB        GO INITIALIZE THE SSOB\n         AIF   (NOT &QRNB).RNB09B                                 RNB09\n         CLI   QPARM2,C' '        WAS NEW CLASS GIVEN?            RNB09\n         BNE   RNB09A             /YES - USE IT                   RNB09\n         MVI   QPARM2,C'C'        /NO  - DEFAULT TO CLASS C       RNB09\nRNB09A   EQU   *                                                  RNB09\n.RNB09B  ANOP                                                     RNB09\n         MVC   SSOBFUNC,=AL2(SSOBSOUT) INDICATE SYSOUT IS THE FUNCTION\n         XC    SSSOBGN(SSSOSIZE),SSSOBGN CLEAR PARM LIST\n         MVC   SSSOLEN,=AL2(SSSOSIZE) SET LENGTH OF SYSOUT PARM LIST\n         OI    SSSOUFLG,SSSOSETC  USE SSSOCLAS AS DISP\n         OI    SSSOUFLG,SSSORLSE  RELEASE ALL SELECTED DATA SETS\n         OI    SSSOFLG1,SSSOHLD   SELECTION INCLUDES HELD SYSOUT DS\n         OI    SSSOFLG1,SSSOSJBN  JOB NAME IS PRESENT\n         OI    SSSOFLG1,SSSOSJBI  JOB ID IS PRESENT\n         OI    SSSOFLG2,SSSOCTRL  PROCESSING COMPLETED\n         MVC   SSSOJOBN,JCTJNAME  JOBNAME\n         MVC   SSSOJOBI,JCTJOBID  JOB ID\n         MVC   SSSOCLAS,QPARM2    NEWCLASS\n         LA    R5,SSSOJOBI        A(JES JOB ID)\n         BAL   R6,FIXJOBID        ENSURE JOBID HAS NO EMBEDDED BLANKS\n         BAL   R6,VERREQ          VERIFY THE REQUEST\n         BAL   R6,CALLSSI         GO CALL SUBSYSTEM INTERFACE RTN\nCHKSORC  L     R1,SSOBRETN        GET RETURN CODE FOR SYSOUT FUNCTION\n         B     *+4(R1)\n         B     FUNCTOK            0 -  SYSOUT COMPLETED\n         B     TILTEODS           4 -  NO MORE DS TO SELECT\n         B     TILTNJOB           8 -  JOB NOT FOUND\n         B     TILTINVA           12 - INVALID SEARCH ARGUMENTS\n         B     TILTUNAV           16 - UNABLE TO PROCESS NOW\n         B     TILTDUPJ           20 - DUPLICATE JOB NAMES\n         B     TILTINVJ           24 - INVALID JOBN/JOBID COMBO\n         B     TILTIDST           28 - INVALID DEST SPECIFIED\n***********************************************************************\n*                                                                     *\n*   PROCESS DELETE  REQUEST                                           *\n*                                                                     *\n***********************************************************************\nDELETE   LA    R5,SSSOBGN         A(DELETE SYSOUT PARM LIST)\n         BAL   R6,INITSSOB        GO INITIALIZE THE SSOB\n         MVC   SSOBFUNC,=AL2(SSOBSOUT) INDICATE SYSOUT IS THE FUNCTION\n         XC    SSSOBGN(SSSOSIZE),SSSOBGN CLEAR PARM LIST\n         MVC   SSSOLEN,=AL2(SSSOSIZE) SET LENGTH OF SYSOUT PARM LIST\n         OI    SSSOUFLG,SSSODELC  INDICATE DELETE REQUEST\n         OI    SSSOFLG1,SSSOHLD   SELECTION INCLUDES HELD DS\n         OI    SSSOFLG1,SSSOSJBN  JOB NAME PRESENT\n         OI    SSSOFLG1,SSSOSJBI  JES2 JOB ID PRESENT\n         OI    SSSOFLG2,SSSOCTRL  PROCESSING COMPLETED\n         MVC   SSSOJOBN,JCTJNAME  JOBNAME\n         MVC   SSSOJOBI,JCTJOBID  JES2 JOBID\n         LA    R5,SSSOJOBI        A(JES2 JOBID)\n         BAL   R6,FIXJOBID        ENSURE JOBID HAS NO EMBEDDED BLANKS\n         BAL   R6,VERREQ          VERIFY THE REQUEST\n         BAL   R6,CALLSSI         GO CALL SUBSYSTEM INTERFACE RTN.\n         B     CHKSORC            GO CHECK RC\n***********************************************************************\n*                                                                     *\n*   INITIALIZE THE SUBSYSTEM OPTION BLOCK (SSOB)                      *\n*                                                                     *\n*        R5 - ADDRESS OF FUNCTION PARM LIST                           *\n*        R6 - RETURN ADDRESS                                          *\n*        R7 - A(SSOB)                                                 *\n*                                                                     *\n***********************************************************************\nINITSSOB XC    SSOBEGIN(SSOBHSIZ),SSOBEGIN CLEAR THE SSOB\n         MVC   SSOBID,=C'SSOB'\n         MVC   SSOBLEN,=AL2(SSOBHSIZ) LENGTH OF SSOB HEADER\n         ST    R5,SSOBINDV        FUNCTION DEPENDENT AREA POINTER\n         ST    R7,SSOBPTR         SAVE ADDR OF SSOB\n         OI    SSOBPTR,X'80'      REQUIRED FOR IEFSSREQ INTERFACE\n         BR    R6\n***********************************************************************\n*                                                                     *\n*   REMOVE EMBEDDED BLANKS IN JES2 JOB ID                             *\n*                                                                     *\n***********************************************************************\nFIXJOBID LA    R8,5               MAX LENGTH OF SCAN\n         LA    R5,3(R5)           START LOCATION FOR SCAN\nFIX000   CLI   0(R5),C' '         ?/EMBEDDED BLANK\n         BNE   FIX010             NO. CONTINUE WITH THE SCAN\n         MVI   0(R5),C'0'         YES. REPLACE WITH 0\nFIX010   LA    R5,1(R5)           POINT TO NEXT BYTE\n         BCT   R8,FIX000          GO DO IT AGAIN\n         BR    R6                 ALL OVER. RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*   TELL THE USER WHAT HE IS ABOUT TO DO                              *\n*                                                                     *\n***********************************************************************\nVERREQ   QHEAD WARNING,X'23'      WARNING IN PINK REVERSE VIDEO   GP@P6\n         L     R15,QDHLINE@       POINT TO HEADING LINE           GP@P6\n         USING VCLEAR,R15                                         GP@P6\n         MVC   VJOBN(8),JCTJNAME\n         MVC   VJOBID(8),JCTJOBID\n         LR    R2,R6              SAVE RETURN ADDR\n         LA    R5,VJOBID          A(JES JOB ID)\n         BAL   R6,FIXJOBID        INSURE NO IMBEDDED BLANKS\n         LR    R6,R2              RESTORE RETURN ADDR\n         CLI   QSUBNAME,C'D'      ?/DELETE COMMAND\n         BNE   VER000\n         MVC   VCMD(6),=C'DELETE'\n         B     VER020\nVER000   CLI   QSUBNAME,C'C'      ?/CANCEL COMMAND\n         BNE   VER010\n         MVC   VCMD(6),=C'CANCEL'\n         CLI   QPARM2,C'P'        PURGE SPECIFIED\n         BNE   VER020\n         MVC   VACTION(5),QPARM2\n         B     VER020\nVER010   MVC   VCMD(7),=C'REQUEUE'\n         MVC   VACTION,RQACTION\n         MVC   VCLASS(1),QPARM2\n         DROP  R15                                                GP@P6\nVER020   MVC   QDMLNG,=H'0'       TELL DISPLAY TO PRINT IT NOW\n         L     R15,=V(DISPLAY)    A(MODULE TO DISPLAY THE MESSAGE)\n         BALR  R14,R15            GO DISPLAY THE WARNING\n         BR    R6                 RETURN TO THE CALLER\n***********************************************************************\n*                                                                     *\n*   INTERFACE TO THE SUBSYSTEM                                        *\n*                                                                     *\n***********************************************************************\nCALLSSI  L     R2,16              A(CVT)\n         L     R2,296(R2)         A(JESCT)\n         MODESET MODE=SUP         GET SUPER\n         LA    R1,SSOBPTR         ADDR OF PTR TO SSOB\n         L     R15,20(R2)         A(JESSSREQ)\n         BALR  R14,R15\n         LR    R2,R15             SAVE RETURN CODE\n         MODESET MODE=PROB        BACK TO NORMAL\n         B     *+4(R2)\n         BR    R6                 0 -  SUCCESSFUL INSTRUCTION\n         BR    R6                      DUMMY INSTRUCTION\n         B     TILTNSUP           4 -  SS DOESN'T SUPPORT THIS FUNCTION\n         B     TILTNTUP           8 -  SS EXIST, BUT IS NOT UP\n         B     TILTNOSS           12 - SS DOES NOT EXIST\n         B     TILTDIST           16 - FUNCTION NOT SUPPORTED\n         B     TILTLERR           20 - LOGICAL ERROR\n         AIF   (NOT &QRNB).RNB08B                                 RNB08\n******************************************************************RNB08\n*                                                                *RNB08\n*   TILT IF PJS JOB (ONLY FOR CANCEL OR DELETE)                  *RNB08\n*                                                                *RNB08\n******************************************************************RNB08\n         USING PDBDSECT,R1                                        RNB08\n         USING IOTDSECT,R3                                        RNB08\n*        USING USERIDLEN,R2                                       RNB08\nNOPJSJOB CLI   QCODEH+1,4     IS THIS A REQUEUE?                  RNB08\n         BER   R6             /YES - OK FOR NOW                   RNB08\n*                             /NO  - ENSURE NOT A PJS JOB         RNB08\n         L     R3,QCIOTA      LOAD BASE REG                       RNB08\n         LR    R5,R3          BASE OF IOT                         RNB08\n         A     R5,IOTPDDBP    OFFSET BEYOND LAST PDDB             RNB08\n         LR    R1,R3          BASE OF IOT                         RNB08\n         A     R1,QCPDDB1     OFFSET TO FIRST PDDB IN IOT         RNB08\n         MVC   QPDSID,=H'0'   NULLIFY VALIDITY FOR LISTDS         RNB08\nFINDDS   CLC   =H'5',PDBDSKEY IS THIS THE DATASET?                RNB08\n         BE    FOUNDDS        YES. CONTINUE.                      RNB08\n         LA    R1,PDBLENG(R1) NO. LOOK AT NEXT PDDB.              RNB08\n         CR    R1,R5          HAVE WE GONE PAST THE LAST PDDB?    RNB08\n         BL    FINDDS         NO. TRY AGAIN.                      RNB08\n         B     BADDDTAB       ELSE BAD DD TABLE (INTERP. JCL)     RNB08\nFOUNDDS  L     R5,PDBMTTR     DISK ADDR OF FIRST BLOCK            RNB08\n         DROP  R1                                                 RNB08\n         L     R7,QCBLKA      ADDR OF DATASET BLOCK IOAREA        RNB08\n         MVC   QDMSG,QBLANK   BLANK OUT THE MESSAGE AREA          RNB08\n         ST    R5,QCTRAK      STORE DISK ADDR                     RNB08\n         LR    R1,R7          IOAREA ADDRESS                      RNB08\n         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE    RNB08\n         BALR  R14,R15        GO TO IT                            RNB08\n         LA    R5,10(R7)      ADDR OF FIRST RECORD IN BLOCK       RNB08\n         SR    R7,R7          ZERO OUT REG                        RNB08\n         IC    R7,0(R5)       INSERT LENGTH                       RNB08\n         CLI   5(R5),1        IS THIS A JOB RECORD?               RNB08\n         BNE   BADDDTAB       /NO  - INVALID DD TABLE             RNB08\n         LA    R5,9(R5)       ADDR OF FIRST KEY                   RNB08\n         LR    R8,R7          REMAINING LENGTH OF RECORD          RNB08\n         SR    R15,15         ZERO OUT R15                        RNB08\n         SR    R14,R14        ZERO OUT R14                        RNB08\n         SR    R1,R1          ZERO OUT R1                         RNB08\nTRYFLD   CLI   0(R5),X'A5'    IS THIS THE USER= PARM?             RNB08\n         BE    GOTUSER        YES. PROCESS IT.                    RNB08\nNEXTFLD  IC    R1,1(R5)       NUMBER OF SUBFIELDS                 RNB08\n         LA    R5,2(R5)       UPDATE LOCATION                     RNB08\n         SH    R8,=H'2'       REMAINING COUNT                     RNB08\n         SR    R8,R1          REMAINING COUNT                     RNB08\n         BNP   BADDDTAB       RECORD IS EXHAUSTED                 RNB08\n         LTR   R1,R1          ARE THERE ANY SUBFIELDS?            RNB08\n         BZ    TRYFLD         NO. TRY NEXT FIELD.                 RNB08\nLOOPFLD  TM    0(R5),X'80'    IS THIS A SUB-SUB-FIELD             RNB08\n         BZ    NOSUB          NO. CONTINUE.                       RNB08\n         NI    0(R5),X'7F'    CLEAR THE HEX 80 BIT                RNB08\n         IC    R14,0(R5)      NUMBER OF SUB-SUB-FIELDS            RNB08\n         LA    R5,1(R5)       UPDATE LOCATION                     RNB08\n         SH    R8,=H'1'       REMAINING COUNT                     RNB08\n         SR    R8,R14         REMAINING COUNT                     RNB08\n         BNP   BADDDTAB       RECORD IS EXHAUSTED                 RNB08\n         AR    R1,R14         INCREASE NUMBER OF SUBFIELDS        RNB08\n         B     YESSUB         DECREMENT AND TRY AGAIN             RNB08\nNOSUB    IC    R15,0(R5)      SUBFIELD LENGTH                     RNB08\n         LA    R5,1(R15,R5)   ADD TO LOCATION                     RNB08\n         SR    R8,R15         REMAINING COUNT                     RNB08\n         BNP   BADDDTAB       RECORD IS EXHAUSTED                 RNB08\nYESSUB   BCT   R1,LOOPFLD     DO NEXT SUBFIELD                    RNB08\n         B     TRYFLD         TRY NEXT FIELD                      RNB08\nGOTUSER  CLI   2(R5),7        IS USER ID LENGTH = 7?              RNB08\n         BNER  R6             /NO  - NOT A PJS JOB, OK TO PROCESS RNB08\n         CLI   2(R5),0        IS THE LENGTH ZERO?                 RNB08\n         BER   R6             YES. SKIP THE FIELD.                RNB08\n         CLC   =C'PROD',6(R5) IS IT A PJS JOB? (USER = ???PROD)   RNB08\n         BE    PJSMSG         /YES - BAD                          RNB08\n         BR    R6             /NO  - GO PROCESS                   RNB08\nBADDDTAB QTILT '*** CANNOT PROCESS JOB - DDTABLE MISSING/INVALID' RNB08\nPJSMSG   QTILT '*** CANNOT CAN/DEL JOB SUBMITTED VIA PJS ***'     RNB08\n.RNB08B  ANOP                                                     RNB08\n***********************************************************************\n*                                                                     *\n*   RETURN TO CALLER                                                  *\n*                                                                     *\n***********************************************************************\nSTOP     QSTOP\nFUNCTOK  QTILT ' *** COMMAND SUCCESSFULLY PROCESSED ***'\n***********************************************************************\n*                                                                     *\n*   ERROR MESSAGES                                                    *\n*                                                                     *\n***********************************************************************\nWRONGJOB QTILT ' *** JOBNAME DOES NOT BELONG TO YOU ***'\nTILTNSUP QTILT ' *** QUEUE LOGIC ERROR -- RC =4  FROM SSI ***'\nTILTNTUP QTILT ' *** JES2 IS NOT UP ***'\nTILTNOSS QTILT ' *** QUEUE LOGIC ERROR -- RC =12 FROM SSI ***'\nTILTDIST QTILT ' *** DISASTROUS ERROR DURING PROCESSING ***'\nTILTLERR QTILT ' *** QUEUE LOGIC ERROR -- RC =20 FROM SSI ***'\nTILTNOJB EQU   *\nTILTNJOB QTILT ' *** JOBNAME NOT FOUND ***'\nTILTBADI EQU   *\nTILTINVJ QTILT ' *** INVALID JOBNAME/JOB ID COMBINATION ***'\nTILTNCAN EQU   *\nTILTDUPJ QTILT ' *** DUPLICATE JOBNAME AND NO JOBID GIVEN ***'\nTILTEODS QTILT ' *** JOB HAS NO HELD DATA SETS ***'\nTILTICAN QTILT ' *** CAN''T CANCEL YOUR TSO SESSION OR A STARTED TASK *X\n               **'\nTILTOUTP QTILT ' *** JOB NOT CANCELLED - JOB ON OUTPUT QUEUE ***'\nTILTMALL EQU   *\nTILTYNTX EQU   *\nTILTINVA EQU   *\nTILTUNAV EQU   *\nTILTIDST QTILT ' *** QUEUE LOGIC ERROR ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANEOUS NUTS, BOLTS, ETC.                                   *\n*                                                                     *\n***********************************************************************\nVERJOBN  CLC   QLOGON(*-*),JCTJNAME\nWARNING  DS    0CL80\n         DC    CL21' *** '\n         DC    CL1'('\n         DC    CL8' '\n         DC    CL1')'\n         DC    CL12' '\n         DC    CL37'. HIT ENTER IF OK OR RESPECIFY. ***'\nRQACTION DC    CL11'NEWCLASS( )'\n         LTORG\n         DROP  ,                   DROP ALL ADDRESSINGS           NERDC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nSYSOUT   CSECT ,                                                  UF023\nJCT      EQU   0\nBUFSTART EQU   0\nBUFDSECT EQU   0\n         $TAB\n         $JCT\n         $PDDB                                                    RNB00\n         $IOT                                                     RNB00\n         IEFJSSOB (SO,CS),CONTIG=YES\n         QCOMMON\nVCLEAR   DSECT                                                    GP@P6\n         DS    CL5\nVCMD     DS    CL8\nVJOBN    DS    CL9\nVJOBID   DS    CL10\nVACTION  DS    CL11\n         DS    CL37\nVCLASS   EQU   VACTION+9\nWORK     DSECT\nFILLER   DS    CL512              BIG FILLER\nSSOBPTR  DS    F\nSSOBHDR  DS    CL140\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TABLE": {"ttr": 4872, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//COMMANDS EXEC ASMFCL,PARM.LKED='LET,LIST,RENT,REUS'\n//ASM.SYSIN DD *\n         ENTRY APFCTABL\nIKJEFTE2 CSECT\n         DC    CL8'IKJEFTE2'\n         DC    CL8'06.01.80'\nAPFCTABL DC    CL8'QUEUE   '       QUEUE COMMAND\n         DC    CL8'Q       '       ALIAS\n         DC    CL8'CMD1    '       SPARE TABLE ENTRIES\n         DC    CL8'CMD2    '       SPARE TABLE ENTRIES\n         DC    CL8'CMD3    '       SPARE TABLE ENTRIES\n         DC    CL8'        '       8 BLANKS TABLE TERMINATOR\n         END\n/*\n//LKED.SYSLMOD DD DSN=T90000.IPO38.GENLIB(IKJEFTE2),DISP=SHR\n//*\n//* CHANGE SYSLMOD TO WHATEVER LIBRARY YOU USE TO HOLD SYSTEM MODULES\n//*\n//TSOCMDS EXEC IPOSMP4\n//SMP.SMPCNTL DD *\n  RECEIVE S(TR00003).\n  APPLY S(TR00003) DIS(WRITE).\n/*\n//*\n//* THE VERIFY CARD BELOW IS SET UP FOR A MVS 3.8 SYSTEM WITH THE\n//* TSO COMMAND PACKAGE INSTALLED. IF YOU DON'T HAVE THE COMMAND\n//* PACKAGE YOU WILL NEED TO MODIFY THE VERIFY TO MATCH YOUR\n//* SYSTEM ENVIRONMENT.\n//*\n//SMP.SMPPTFIN DD *\n++ USERMOD(TR00003) /* TSO AUTHORIZED COMMANDS */.\n++ VER(Z038) FMID(EBB1102) PRE(JBB1112).\n++ MOD(IKJEFTE2) DISTLIB(AOST4) LKLIB(GENLIB).\n/*\n//GENLIB DD DSN=T90000.IPO38.GENLIB,DISP=SHR\n//*\n//* CHANGE GENLIB TO WHATEVER LIBRARY YOU USE TO HOLD SYSTEM MODULES\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOHELP": {"ttr": 4874, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION -\n  THE QUEUE COMMAND IS USED TO INTERROGATE THE SYSTEM QUEUES IN ORDER\n  TO DETERMINE THE STATUS OF A JOB OR GROUP OF JOBS. IT ALSO PROVIDES\n  ACCESS TO ALL PARTS OF A JOB WHILE IT IS ON THE QUEUE.\n\n  FOR MORE INFORMATION, TYPE IN - QUEUE HELP.\n)X SYNTAX -\n         QUEUE  OPERAND    DEFAULT OPERAND IS STATUS. AN OPERAND OF\n         Q                 CKPT(UNIT,VOLSER) CAN BE USED TO SPECIFY\n                           A JES2 CHECKPOINT DATASET OTHER THAN THE\n                           STANDARD DATASET.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XDS": {"ttr": 4876, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "XDS      QSTART 'QUEUE COMMAND - PRINT A DATASET FROM SPOOL BY ID'\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB03 - RACF SUPPORT. HANDLE XDS COMMAND SPECIALLY.        *\n*                                                                     *\n***********************************************************************\n         GBLB  &QRACF                                             RNB03\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING WORK,R13       BASE REG FOR TEMP WORK\n***********************************************************************\n*                                                                     *\n*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB\n         BALR  R14,R15        GO TO IT\n         AIF   (NOT &QRACF).RNB03B                                RNB03\n***************************************************************** RNB03\n*                                                               * RNB03\n*  RACF FOR XDS COMMAND: RACHECK FOR APPL-QUEUEXDS AND PASS     * RNB03\n*                        THE JOBNAME AS THE APPL FOR LOGGING    * RNB03\n*                                                               * RNB03\n***************************************************************** RNB03\n         L     R2,QCJCTA      GET JCT                             RNB03\n         USING JCTDSECT,R2    #####                               RNB03\n         RACHECK ENTITY=QRACNMXD,APPL=JCTJNAME,MF=(E,QRACHECK)    RNB03\n         LTR   R15,R15        OK?                                 RNB03\n         BZ    RNB03A         /YES - CONTINUE                     RNB03\n         QTILT '*** XDS COMMAND NOT ALLOWED ***'                  RNB03\n         DROP  R2                                                 RNB03\nRNB03A   DS    0H                                                 RNB03\n.RNB03B  ANOP                                                     RNB03\n***********************************************************************\n*                                                                     *\n*   CHECK AND CONVERT THE DATASET ID NUMBER                           *\n*                                                                     *\n***********************************************************************\n         LH    R2,QLNG2       LENGTH OF DATASET ID FIELD\n         SH    R2,=H'1'       IS THE DATASET ID FIELD ZERO LENGTH?\n         BM    TILT           YES. QUIT.\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. QUIT.\n         EX    R2,PACK        PACK THE FIELD\n         CVB   R2,CONVERT     CONVERT TO BINARY\n         STH   R2,QPDSID      STORE DATASET ID\n***********************************************************************\n*                                                                     *\n*   CHECK AND CONVERT THE PRINT OFFSET                                *\n*                                                                     *\n***********************************************************************\n         MVC   QPOFFSET,=H'0' DEFAULT TO ZERO\n         LH    R2,QLNG3       LENGTH OF OFFSET FIELD\n         SH    R2,=H'1'       IS THE OFFSET FIELD ZERO LENGTH?\n         BM    CALLLIST       YES. USE ZERO OFFSET.\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST\n         EX    R2,MVZ2        MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. QUIT.\n         EX    R2,PACK2       PACK THE FIELD\n         CVB   R2,CONVERT     CONVERT TO BINARY\n         STH   R2,QPOFFSET    STORE OFFSET\n***********************************************************************\n*                                                                     *\n*   CALL LISTDS TO LIST THE DATASET                                   *\n*                                                                     *\n***********************************************************************\nCALLLIST L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\n         QSTOP\nTILT     QTILT '*** DATASET ID INVALID ***'\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\nMVZ      MVZ   QFZONES(1),QPARM2 CHECK FOR NUMERIC\nMVZ2     MVZ   QFZONES(1),QPARM3 CHECK FOR NUMERIC\nPACK     PACK  CONVERT,QPARM2(1) CONVERT TO BINARY\nPACK2    PACK  CONVERT,QPARM3(1) CONVERT TO BINARY\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nWORK     DSECT\n         DS    72C\nCONVERT  DS    D\n         AIF   (NOT &QRACF).RNB03C                                RNB03\nXDS      CSECT                                                    RNB03\nJCT      EQU   0                                                  RNB03\nBUFSTART EQU   0                                                  RNB03\nBUFDSECT EQU   0                                                  RNB03\n         $JCT                                                     RNB03\n.RNB03C  ANOP                                                     RNB03\n         QCOMMON\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT601/FILE601.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT601", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}