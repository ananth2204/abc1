/* REXX                                                              */
/*
       Version 2. 03.02.2011
       This macro was created from MIGRATE one. It uses for allocation
   of GDG.
   You must have PS or PDS/PDSE data set 133 LRECL for data set
   attributes list. Perform 'NUM OFF' edit command!!!
   Insert DSNs in columns 12-55. After macro is run, allocation
   attributes appear in the right columns. This information will be
   used as input for new DS allocation.

          Call format:

          GDGALLOC (REQ|ALLOC (DEL)|?) {FOR Region}

          REQ   - for request allocation attributes.
          ALLOC - for new DS allocation using retrieved attributes.
          DEL   - use this option to delete existing GDG. This
                  option is  optional. It may be issued only with
                  ALLOC option.
                  If GDG already exist, it will be deleted and allocated
                  again with options from file.
          FOR   - it is reserved word. If you use it, you must issue
                  Region too.
          Region- ENDEVOR region. In common case it is member name
                  with variavles for substitution into DSN.
                  You will issue this name without '#' but real
                  member name is started with '#'.
                  See Dict parameter of interface to define library
                  where this member resides.
          ?     - this help text.

   First position of every string is used for status.
   * - means comment.
   A - DS was allocated.
   D - DS was allocated after deletion.
   X - DS already exist.
   E - error during allocation.
   V - variable in DSN does not exist in dictionary.
   N - GDG does not exist or error in parameters.

   You also may use range commands according common ISPF rules:
     Z - for single string;
     ZZ or Zn - for range of strings.

   Author: Alexander I. Vasilenko,
           LUXOFT, Moscow.
           e-mail: ali_vas@mail.ru
                   Alexander.I.Vasilenko@boeing.com
*/
/* Change log.
   12/24 New functionality. Added 'FOR Region' capability.
   12/28 New format of DS list.
               - DS name
               - DISP from JOB/PROC
               - DS type from IDCAMS
               - allocation parameters list in the same order.
   03/18/2011  - New status added. N - DS does not exist.
   03/21/2011  - history capability is activated.
   04/15/2011  - print errors in log line.
   04/20/2011  - blank out param columns before fill attributes.
*/
Address ISREDIT
'MACRO (PARMS) NOPROCESS'
if RC > 0 then do
  say ' It is EDIT macro. Do not use TSO prefix.'
  exit 0
end
Address ISPEXEC CONTROL ERRORS RETURN
S = outtrap(tso_mes.,,noconcat)
upper parms
/*                                                                   */
if substr(parms,1,1) = '?' |,
   substr(parms,1,1) = ' ' then
  call Show_help
/*        Interface  and variavles */    /* 12/24 */
Dict = 'DATALIB.WIRS.SERVBLKP.DICT' /* dictionary */
/* Dict = 'DATALIB.WIRS.PRDP.SERVPROD.DICT' */
/*Dict = 'IS0485.TEST.REXX'           test only */
NewValue. = ''
Region  = ' '              /* 03/21/2011 */
Error.  = 0                /* 04/15/2011 */
OK      = 0                /* 04/20/2011 for OK process */
Ex      = 0                /* 04/20/2011 for already exist */
ForMode = 0
StPos   = 3 /* 12  data set name start position */
WrongDSN = "It is not a real Data Set name. Use macro with option",
   "'FOR Region'."
WrongVar = "Variabel was not found in configuration file. Check your",
           "configuration."
/*      End of Interface  */

/*       Main line                                                   */
if pos(' FOR ',parms) > 0 then do                          /* 12/24 */
  parse var parms . 'FOR' Region .                       /* 12/24 */
  if Region = '' then do                                 /* 12/24 */
    say '  Empty Region.'                                /* 12/24 */
    call Show_Help /* ... and leave macro */             /* 12/24 */
  end                                                    /* 12/24 */
  Region = strip(Region)                                 /* 12/24 */
  ForMode = 1                                            /* 12/24 */
  DS = "'"Dict||"(#"||Region||")'"                       /* 12/24 */
  Address TSO "ALLOC FI(INPUT) DS("DS")"                 /* 12/24 */
  if RC > 0 then do                                      /* 12/24 */
    say "Data set can't be allocated:"                   /* 12/24 */
    say DS ', RC = ' rc                                  /* 12/24 */
    exit 12                                              /* 12/24 */
  end                                                    /* 12/24 */
  Address TSO "execio * diskr INPUT (stem Input. finis)" /* 12/24 */
  Address TSO "FREE  FI(INPUT)"                          /* 12/24 */
  do i = 1 to Input.0                                    /* 12/24 */
    if pos('SET',Input.i) > 0 then do                    /* 12/24 */
      parse var Input.i OldValue '=' NewValue            /* 12/24 */
      OldValue = word(OldValue,words(OldValue))          /* 12/24 */
      NewValue = word(NewValue,1)                        /* 12/24 */
      NewValue.OldValue = OldValue NewValue              /* 12/24 */
    end                                                  /* 12/24 */
  end                                                    /* 12/24 */
end                                                      /* 12/24 */
Address ISREDIT
'process range Z'
RC_Range = RC
  '(LNUM)    = LINENUM .ZLRANGE'
  '(FIRSTLN) = LINENUM .ZFRANGE'
/*'RES' */
/* Next part determines if logging is required and writes log */
'(LogM) = LINE ' 1   /* read first line */
History  = 0    /* do not write history */
LogAFound = 0   /* active log found */
EndOfLog = 0
do i = 1 by 1 until EndOfLog
  '(LogM) = LINE ' i
  if substr(LogM,2,4) = ' LOG' then do
    History  = 1    /* write history */
    if substr(LogM,6,1) = 'A' then do /* current active log */
      LogAFound = 1
      LogPos = i       /* position of active log */
      LogM = overlay(' LOG ',LogM,2,5)
      'LINE ' i ' = (LogM)' /* replace line */
    end
    else do
    end
    iterate
  end
  else do
    if (i = 1) then
      leave i /* Log not found in first line - no logging */
    EndOfLog = 1
    LastPos = i - 1 /* last log position */
  end
end

if History then do    /* write log */
  if LogAFound then do
    if LastPos = LogPos then do /* active log in last pos */
      LogPos = 1    /* move it in first line */
    end
    else
      LogPos = LogPos + 1 /* choose nex line for acive log */
  end
  else        /* active log not found */
    LogPos = 1
  FirstLn = FirstLn + 0 /* to remove 0 from num */
  Lnum    = Lnum + 0    /* to remove 0 from num */
  LogM = overlay('*',LogM,1,133) /* comment line and blank out */
  LogM = overlay('LOGA',LogM,3,4) /* LOG prefix */
  parse value DATE('U') with cDay '/' cMonth '/' .
  parse value DATE() with . . cYear
  cDate = cDay || '/' || cMonth || '/' || cYear
  cTime = substr(TIME(),1,5)
  LogM = overlay(cDate,LogM,8,10)
  LogM = overlay(cTime,LogM,19,8)
  UserID = UserID()
  LogM = overlay(UserID,LogM,28,8)
  LogM = overlay(FirstLn,LogM,37,8)
  LogM = overlay(Lnum,LogM,46,8)
  'LINE ' LogPos ' = (LogM)' /* replace line */
end
/*   END of logging     03/21/2011 */

select
  when substr(word(parms,1),1,3) = 'REQ' then do
    LogM = overlay('REQ  ',LogM,55,5)   /* 03/21/2011 */
    LogM = overlay(Region,LogM,65,4)    /* 03/21/2011 */
    call Fill_attr
    LogM = strip(LogM,'T')              /* 04/15/2011 */
    LogM = LogM 'V='Error.v 'N='Error.N 'E='Error.e 'OK='OK 'Ex='Ex
    'LINE ' LogPos ' = (LogM)'          /* 03/21/2011 */
  end
  when substr(word(parms,1),1,5) = 'ALLOC' then do
    LogM = overlay('ALLOC',LogM,55,5)   /* 03/21/2011 */
    LogM = overlay(Region,LogM,65,4)    /* 03/21/2011 */
    if substr(word(parms,2),1,3) = 'DEL' then do
      LogM = overlay('DEL',LogM,60,3)   /* 03/21/2011 */
      delete = 1
    end
    else
      delete = 0
    call Do_Alloc
    LogM = strip(LogM,'T')              /* 04/15/2011 */
    LogM = LogM 'V='Error.v 'N='Error.N 'E='Error.e 'OK='OK 'Ex='Ex
    'LINE ' LogPos ' = (LogM)'          /* 03/21/2011 */
  end
  otherwise
    call No_parm
end

exit 0
/*                    */

Fill_attr:
do l = Firstln to lnum
  '(TEXT) = LINE ' l
  if substr(Text,1,1) = '*' then iterate
  DSN = word((substr(text,StPos,49)),1)    /* 12/28 */
  parse var DSN DSN '(' . /* isolate DSN */
  UpdDSN = 0 /* suppose DSN has not been changed */ /* 12/24 */
  VarFound = 0 /* if '&' was found */                     /* 12/24 */
  VarAlert = 0                                            /* 12/24 */
  Call CheckVariable                                      /* 12/24 */
  if UpdDSN then do /* substitution has benn performed */ /* 12/24 */
    'LINE_AFTER 'l' = INFOLINE (DSN)'                     /* 12/24 */
  end                                                     /* 12/24 */
  else do                                                 /* 12/24 */
    if VarAlert then                                      /* 12/24 */
      iterate                                             /* 12/24 */
    if VarFound & \ForMode then                           /* 12/24 */
      iterate                                             /* 12/24 */
  end                                                     /* 12/24 */
  Address TSO "LISTCAT ENTRIES('"DSN"') GDG ALL "
  if RC > 0 then do
    call Display_TSO
    text = overlay('N',text,1,2)
    Error.N = Error.N + 1              /* 04/15/2011 */
    'LINE 'l' = (TEXT)'
    iterate
  end
  type = substr(tso_mes.1,1,8) /* must be GDG */
/*text = substr(text,1,44) */
  if type \= 'GDG BASE' then do
    text = overlay('N',text,1,2)  /* 03/18/2011 */
    Error.N = Error.N + 1              /* 04/15/2011 */
    'LINE 'l' = (TEXT)'
  end
  else do
    OK = OK + 1
    t = translate(tso_mes.7,' ','-')
    t = word(t,1)||'('||word(t,2)||')' space(subword(t,3),1)
    text = overlay(' ',text,1)              /* 04.20.2011 */
    text = overlay(' ',text,StPos + 58,100) /* 04.20.2011 */
    text = overlay(t,text,StPos + 58) /* 12/28 */
    'LINE 'l' = (TEXT)'
  end
end
return

Do_Alloc:

do l = Firstln to lnum
  '(TEXT) = LINE ' l
  if substr(Text,1,1) = '*' |,              /* 03/18/2011 */
     substr(Text,1,1) = 'N' then iterate     /* 03/18/2011 */
  tso_mes.0 = 0
  Texts = substr(Text,70) /* parameters list 12/28 */
  DSN   = word((substr(text,StPos,49)),1)      /* 12/28 */
  parse var DSN DSN '(' . /* isolate DSN */
  UpdDSN = 0                                        /* 12/24 */
  VarFound = 0 /* if '&' was found */               /* 12/24 */
  VarAlert = 0                                      /* 12/24 */
  Call CheckVariable                                /* 12/24 */
  if UpdDSN then do                                 /* 12/24 */
    'LINE_AFTER 'l' = INFOLINE (DSN)'               /* 12/24 */
  end                                               /* 12/24 */
  else do                                           /* 12/24 */
    if VarAlert then                                      /* 12/24 */
      iterate                                             /* 12/24 */
    if VarFound & \ForMode then                           /* 12/24 */
      iterate                                             /* 12/24 */
  end                                               /* 12/24 */
  Options   = strip(substr(text,StPos + 58))         /* 12/28 */
  SA = 'A'   /* suppose normal allocation */
  Address TSO "LISTCAT ENTRIES('"DSN"') GDG ALL"
  if RC = 0 then do /* entry already exist */
    if delete then do
      t = translate(tso_mes.7,' ','-')
      t = word(t,1)||'('||word(t,2)||')' space(subword(t,3),1)
      if t = Options then do
        Ex = Ex + 1
        text = overlay('X',text,1)
        'LINE' l ' = (TEXT)'
        iterate
      end
      SA = 'D' /* GDG is allocated after deletion */
      Address TSO "DELETE ('"DSN"') GDG PURGE"
      if RC > 0 then do /* error during deletion */
        Text = overlay('E',Text,1,2)
        Error.E = Error.E + 1        /* 04/15/2011 */
        'LINE 'l' =(TEXT)'
        call Display_TSO
        iterate
      end
    end
    else do
      Ex = Ex + 1
      Text = overlay('X',Text,1,2)
      'LINE 'l' =(TEXT)'
      iterate
    end
  end
  Address TSO "DEFINE GDG (NAME('"DSN"') " options
  if RC = 0 then do
    OK = OK + 1
    Text = overlay(SA,Text,1,2)
    'LINE 'l' =(TEXT)'
  end
  else do /* error during allocation */
    Text = overlay('E',Text,1,2)
    Error.E = Error.E + 1        /* 04/15/2011 */
    'LINE 'l' =(TEXT)'
    call Display_TSO
  end
end
return

CheckVariable:                                        /* 12/24 */
if pos('&',DSN) > 0 then do
  VarFound = 1
  if ForMode then do
    parse var DSN FirstPart '&' OldValue '.' LastPart
    if word(NewValue.OldValue,1) \= '' then do
      DSN = FirstPart||word(NewValue.OldValue,2)||LastPart
      UpdDSN = 1
      Call CheckVariable
    end
    else do /* variable has not been found in config file */
      UpdDSN = 0
      VarAlert = 1
      text = overlay('V',text,1,2)
      Error.V = Error.V + 1        /* 04/15/2011 */
      'LINE 'l' = (TEXT)'
      'LINE_AFTER 'l' = INFOLINE (WrongVar)'
      'LINE_AFTER 'l' = INFOLINE (DSN)'
    end
  end
  else do
    text = overlay('N',text,1,2)        /* 03/18/2011 */
    Error.N = Error.N + 1        /* 04/15/2011 */
    'LINE 'l' = (TEXT)'
    'LINE_AFTER 'l' = INFOLINE (WrongDSN)'
  end
end
return

Display_TSO:
if tso_mes.0 > 0 then do
  do si = tso_mes.0 to 1 by -1
     Temp = tso_mes.si
    'LINE_AFTER 'l' = INFOLINE (Temp)'
  end
end
return

No_parm:
say '  Incorrect parameter was specified - 'word(parms,1)'.'
say '  Enter REQ for request of attributes.'
say '  Enter ALLOC for allocation process.'
return

Show_help:
eoh = 0
do line = 3 until eoh
  if substr(sourceline(line + 1),1,2) = '*/' then
    eoh = 1
  say sourceline(line)
end
/* 'RES' */
exit 0
