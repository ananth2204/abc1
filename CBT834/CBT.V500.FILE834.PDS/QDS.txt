/* REXX                                                              */
/*
       This macro is designed to determine DS type.
   You must have PS or PDS/PDSE data set 133 LRECL for data set
   types list. Perform 'NUM OFF' edit command!!!
   Insert DSNs in columns 12-55. After macro is run, type of DS
   appear in the right column.

          Call format:

          QDS (?)

          ?     - this help text.

   First position of every string is used for status.
   * - means comment.
   V - variable in DSN does not exist in dictionary.
   N - DS does not exist.

   You also may use range commands according common ISPF rules:
     Z - for single string;
     ZZ or Zn - for range of strings.

   Author: Alexander I. Vasilenko,
           LUXOFT, Moscow.
           e-mail: ali_vas@mail.ru
                   Alexander.I.Vasilenko@boeing.com
*/
/* Change log.
   12/24 New functionality. Added 'FOR Region' capability.
   12/28 New format of DS list.
               - DS name
               - DISP from JOB/PROC
               - DS type from IDCAMS
               - allocation parameters list in the same order.
   03.03 Macro is learned to recall migrated DS.
   03/21/2011  - history capability is activated.
   04/15/2011  - print errors in log line.
   04/20/2011  - blank out param columns before fill attributes.
*/
Address ISREDIT
'MACRO (PARMS) NOPROCESS'
if RC > 0 then do
  say ' It is EDIT macro. Do not use TSO prefix.'
  exit 0
end
Address ISPEXEC CONTROL ERRORS RETURN
S = outtrap(tso_mes.,,noconcat)
upper parms
/*                                                                   */
if substr(parms,1,1) = '?' then
  call Show_help

/*        Interface  and variavles */    /* 12/24 */
Dict = 'DATALIB.WIRS.SERVBLKP.DICT' /* dictionary */
/* Dict = 'DATALIB.WIRS.PRDP.SERVPROD.DICT' */
/*Dict = 'IS0485.TEST.REXX'           test only */
NewValue. = ''
Region  = ' '       /* 03/21/2011 */
Error.  = 0         /* 04/15/2011 */
ForMode = 0
StPos   = 3 /* 12  data set name start position */
WrongDSN = "It is not a real Data Set name. Use macro with option",
   "'FOR Region'."
WrongVar = "Variabel was not found in configuration file. Check your",
           "configuration."
/*      End of Interface  */

/*       Main line                                                   */

if pos('FOR ',parms) > 0 then do                          /* 12/24 */
  parse var parms . 'FOR' Region .                       /* 12/24 */
  if Region = '' then do                                 /* 12/24 */
    say '  Empty Region.'                                /* 12/24 */
    call Show_Help /* ... and leave macro */             /* 12/24 */
  end                                                    /* 12/24 */
  Region = strip(Region)                                 /* 12/24 */
  ForMode = 1                                            /* 12/24 */
  DS = "'"Dict||"(#"||Region||")'"                       /* 12/24 */
  Address TSO "ALLOC FI(INPUT) DS("DS")"                 /* 12/24 */
  if RC > 0 then do                                      /* 12/24 */
    say "Data set can't be allocated:"                   /* 12/24 */
    say DS ', RC = ' rc                                  /* 12/24 */
    exit 12                                              /* 12/24 */
  end                                                    /* 12/24 */
  Address TSO "execio * diskr INPUT (stem Input. finis)" /* 12/24 */
  Address TSO "FREE  FI(INPUT)"                          /* 12/24 */
  do i = 1 to Input.0                                    /* 12/24 */
    if pos('SET',Input.i) > 0 then do                    /* 12/24 */
      parse var Input.i OldValue '=' NewValue            /* 12/24 */
      OldValue = word(OldValue,words(OldValue))          /* 12/24 */
      NewValue = word(NewValue,1)                        /* 12/24 */
      NewValue.OldValue = OldValue NewValue              /* 12/24 */
    end                                                  /* 12/24 */
  end                                                    /* 12/24 */
end                                                      /* 12/24 */

Address ISREDIT
'process range Z'
RC_Range = RC
  '(LNUM)    = LINENUM .ZLRANGE'
  '(FIRSTLN) = LINENUM .ZFRANGE'
/*'RES'*/
/* Next part determines if logging is required and writes log */
'(LogM) = LINE ' 1   /* read first line */
History  = 0    /* do not write history */
LogAFound = 0   /* active log found */
EndOfLog = 0
do i = 1 by 1 until EndOfLog
  '(LogM) = LINE ' i
  if substr(LogM,2,4) = ' LOG' then do
    History  = 1    /* write history */
    if substr(LogM,6,1) = 'A' then do /* current active log */
      LogAFound = 1
      LogPos = i       /* position of active log */
      LogM = overlay(' LOG ',LogM,2,5)
      'LINE ' i ' = (LogM)' /* replace line */
    end
    else do
    end
    iterate
  end
  else do
    if (i = 1) then
      leave i /* Log not found in first line - no logging */
    EndOfLog = 1
    LastPos = i - 1 /* last log position */
  end
end

if History then do    /* write log */
  if LogAFound then do
    if LastPos = LogPos then do /* active log in last pos */
      LogPos = 1    /* move it in first line */
    end
    else
      LogPos = LogPos + 1 /* choose nex line for acive log */
  end
  else        /* active log not found */
    LogPos = 1
  FirstLn = FirstLn + 0 /* to remove 0 from num */
  Lnum    = Lnum + 0    /* to remove 0 from num */
  LogM = overlay('*',LogM,1,133) /* comment line and blank out */
  LogM = overlay('LOGA',LogM,3,4) /* LOG prefix */
  parse value DATE('U') with cDay '/' cMonth '/' .
  parse value DATE() with . . cYear
  cDate = cDay || '/' || cMonth || '/' || cYear
  cTime = substr(TIME(),1,5)
  LogM = overlay(cDate,LogM,8,10)
  LogM = overlay(cTime,LogM,19,8)
  UserID = UserID()
  LogM = overlay(UserID,LogM,28,8)
  LogM = overlay(FirstLn,LogM,37,8)
  LogM = overlay(Lnum,LogM,46,8)
  LogM = overlay('QDS',LogM,55,5,' ')
  LogM = overlay(Region,LogM,65,4)
/*   END of logging     03/21/2011 */
end

do l = Firstln to lnum
  '(TEXT) = LINE ' l
  if substr(Text,1,1) = '*' then iterate
  DSN = word((substr(text,StPos,49)),1)   /* 12/28 */
  parse var DSN DSN '(' tail /* isolate DSN */
  UpdDSN = 0 /* suppose DSN has not been changed */ /* 12/24 */
  VarFound = 0 /* if '&' was found */                     /* 12/24 */
  VarAlert = 0                                            /* 12/24 */
  Call CheckVariable                                      /* 12/24 */
  if UpdDSN then do /* substitution has been performed */ /* 12/24 */
    'LINE_AFTER 'l' = INFOLINE (DSN)'                     /* 12/24 */
  end                                                     /* 12/24 */
  else do                                                 /* 12/24 */
    if VarAlert then                                      /* 12/24 */
      iterate                                             /* 12/24 */
    if VarFound & \ForMode then                           /* 12/24 */
      iterate                                             /* 12/24 */
  end                                                     /* 12/24 */
/*text = substr(text,1,44)    get only DS name and blank out all rest */
  s = SYSDSN("'"DSN"'")    /* to recall DS 03.03.2011 */
  if RC > 0 then do                     /* 03.03.2011 */
    call Display_TSO                    /* 03.03.2011 */
    iterate                             /* 03.03.2011 */
  end                                   /* 03.03.2011 */
  Address TSO "LISTCAT ENTRIES('"DSN"') "
  if RC > 0 then do
    call Display_TSO
    iterate
  end
  parse var tso_mes.1 type '-' tail
/*text = overlay(' ',text,StPos + 49,100)     04.20.2011 */
  text = overlay(' ',text,StPos + 49,008)  /* 04.20.2011 */
  text = overlay(type,text,StPos + 49)   /* 12/28 */
  text = overlay(' ',text,1,2)
  'LINE 'l' = (TEXT)'
end

if History then do
  LogM = strip(LogM,'T')
  LogM = LogM 'V='Error.V 'N='Error.N  /* 04/15/2011 */
  'LINE ' LogPos ' = (LogM)' /* replace line */
end
exit 0
/*                    */

CheckVariable:                                        /* 12/24 */
if pos('&',DSN) > 0 then do
  VarFound = 1
  if ForMode then do
    parse var DSN FirstPart '&' OldValue '.' LastPart
    if word(NewValue.OldValue,1) \= '' then do
      DSN = FirstPart||word(NewValue.OldValue,2)||LastPart
      UpdDSN = 1
      Call CheckVariable
    end
    else do /* variable has not been found in config file */
      UpdDSN = 0
      VarAlert = 1
      text = overlay('V',text,1,2)
      Error.V = Error.V + 1      /* 04/15/2011 */
      'LINE 'l' = (TEXT)'
      'LINE_AFTER 'l' = INFOLINE (WrongVar)'
      'LINE_AFTER 'l' = INFOLINE (DSN)'
    end
  end
  else do
    text = overlay('N',text,1,2)
    Error.N = Error.N + 1  /* 04/15/2011 */
    'LINE 'l' = (TEXT)'
    'LINE_AFTER 'l' = INFOLINE (WrongDSN)'
  end
end
return

Display_TSO:
if tso_mes.0 > 0 then do
  Error.N = Error.N + 1       /* 04/15/2011 */
  text = overlay('N',text,1,2)
  'LINE 'l' = (TEXT)'
  do si = tso_mes.0 to 1 by -1
     Temp = tso_mes.si
    'LINE_AFTER 'l' = INFOLINE (Temp)'
  end
end
return

Show_help:
eoh = 0
do line = 3 until eoh
  if substr(sourceline(line + 1),1,2) = '*/' then
    eoh = 1
  say sourceline(line)
end
/*'RES' */
exit 0
