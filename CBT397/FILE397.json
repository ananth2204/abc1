{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011924000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE397.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE397.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\r'", "DS1TRBAL": "b'\\xa3\\xa0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xd6\\x00\\x0b\\x02\\xd6\\x00\\r\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\t\\x00\\x9f\\x01\\t\\x00\\x9f\\x14)\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2009-01-09T00:00:00", "modifydate": "2009-01-09T14:29:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-477"}, "text": "REGULAR CBT TAPE - VERSION 477    FILE:  397\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT477.FILE397\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 84 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/09/09    14:29:30    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MSG": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x10\\x00\\x99&o\\x01\\t\\x00\\x9f\\x14'\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-09-23T00:00:00", "modifydate": "2009-01-09T14:27:10", "lines": 18, "newlines": 18, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Re: PACK routine\nDate: Tue, 6 Jul 1999 22:34:25 GMT\nFrom: Frank Clarke <nisus@MINDSPRING.COM>\n\nOn Sat, 3 Jul 1999 14:57:33 -0400, \"huband\" <huband@ibm.net> wrote:\n\nHi,  I need a routine to convert numeric data to mainframe packed\ndecimal format.  Thanks in advance\n\nYou're welcome.\n\n\nFrank Clarke\nTampa Area REXX Programmers' Alliance (TARPA)\nMember of the REXX Language Assn\n  Join us at http://www.rexxla.org\n(remove currency symbol when replying)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE397": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\t\\x00\\x9f\\x01\\t\\x00\\x9f\\x14)\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2009-01-09T00:00:00", "modifydate": "2009-01-09T14:29:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "CBT-477"}, "text": "//***FILE 397 is from Frank Clarke and contains a routine to        *   FILE 397\n//*           convert numeric data to mainframe packed decimal      *   FILE 397\n//*           format.  PACK and UNPK REXX routines are included.    *   FILE 397\n//*                                                                 *   FILE 397\n//*           email:  nisus@MINDSPRING.COM                          *   FILE 397\n//*                                                                 *   FILE 397\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PACK": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99&o\\x00\\x99&o\\x00C\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-09-23T00:00:00", "modifydate": "1999-09-23T00:43:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "/* rexx\n   Call as:        PACK(nbr,scale,prec) (commas required)\n   Pack the argument.\n   The argument-number must be a number.  'Scale' is the total\n   number of digits.  'Prec' is the number of decimal places.  If\n   'prec' is not specified, default to zero.  If 'scale' is not\n   specified, make it large enough to accommodate the number.\n   'Scale' must be odd.  'C' is the positive sign-nibble; 'D' is the\n   negative sign-nibble.  Fill out the 'frac' with zeroes on the\n   right.  Fill out the 'whol' with zeroes on the left.  Join\n   without the decimal point and with the sign-nibble.  Convert to\n   hex.\n.  ----------------------------------------------------------------- */\nPACK:                                  /*@                           */\n   arg nbr,scale,prec .                /* 347.23 5 2                 */\n   if \\Datatype(nbr,\"N\") then return(\"ERROR\")\n   parse value scale Length(nbr)  with scale  .   /* 5,6 yields 5    */\n   parse value prec \"0\"           with prec   .   /* 2,0 yields 2    */\n   if scale//2 then nop; else scale = scale + 1   /* make it odd     */\n   if nbr < 0 then do; sign = \"D\"; nbr = nbr*-1; end\n              else     sign = \"C\"\n   ptpos = Pos(\".\",nbr)                /* 347.23 maybe               */\n   if ptpos = 0 then parse value nbr \".\"  with  whol frac  .\n   else do                             /*                            */\n      whol = Left(nbr,ptpos-1)         /* 347                        */\n      frac = Substr(nbr,ptpos)         /* .23                        */\n      end\n   frac = Left(frac,prec+1,0)          /* recognize the '.'          */\n   newnbr = Right(whol\"\"Strip(frac,\"L\",\".\"),scale,0)sign\nreturn(x2c(newnbr))                    /*@ PACK                      */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNPK": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99&o\\x00\\x99&o\\x00C\\x00\\x12\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-09-23T00:00:00", "modifydate": "1999-09-23T00:43:00", "lines": 18, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "/*     rexx      */\nUNPK:                                  /*@                           */\n   numeric digits 31\n   parse  arg  nbr , scale, prec  .    /* ::::  3  maybe             */\n   parse value prec \"0\"  with  prec .  /* 3,0 yields 3               */\n   nbrx = C2X(nbr)                     /* 0034723D maybe             */\n   parse value scale Length(nbrx)-1  with  scale  .\n   parse value Reverse(nbrx) with sign 2 revnbrx   /* D 3274300      */\n   if Verify(revnbrx,\"0123456789\") > 0 then,   /* bad string         */\n      return(\"ERROR\")\n   if sign = \"D\" then factor = -1; else factor = 1\n   revfrac = Left(revnbrx,prec,0)      /* 327                        */\n   nbrx = Reverse(revnbrx)             /* 0034723                    */\n   if prec > scale then parse value 0 prec with whol scale; else,\n      whol = Left(nbrx,Length(nbrx)-prec) /* 0034                    */\n   frac = Reverse(revfrac)             /* 723                        */\n   nbr  = Right((whol\".\"frac)*factor,scale)     /* -34.723           */\nreturn(nbr)                            /*@ UNPK                      */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT397/FILE397.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT397", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}