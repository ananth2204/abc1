/***************************** REXX ***********************************
   This REXX/ISPF MACRO is used to maintain and use multiple sets of
        PFKeys.  It can SAVE PF Key Sets, SWAP PF Key Sets, DELETE
        saved PF Key sets, and restore your current ISPF APPLID's
        PF Key Set as it was during the first SWAP.  All changes
        to your PF Keys are saved at SWAP time.

                           --- EXAMPLE ---
<TSO> %PFKSET <ACTion(valid PFKSET action)> <NEWCOPY(Y)> ,
              <PROFILE(PROFILE|SHARED)> Set_Name Set_Desc
<TSO> <%>PFKSET -H -- To display help for this REXX/ISPF Macro

   **** If you forget to restore your PF Keys before logging off,  ****
   **** you can restore them next time you use that ISPF APPLID    ****

   Invoking the first time creates the PFKSET01 ISPF Table creating
        3 PF Key Sets:  Your current ISPF Key set with a SET ID of
        your current ZAPPLID.  A set of ISPF standard PF Keys with
        a SET ID of 'STANDARD'.  And a useful set for use when editting
        with a SET ID of 'ED01'.

  Arguments: InParms     - Non-Positional  parameters
 ----------------------------- NP-PARMS -------------------------------
                  ACTion - DELete    = Delete a PF Keys set
                           DISplay   = Use ISPF Messages to display
                                       current PF Key Set Name & Desc.
                           LISt      = List a PF Key set
                           RECreate  = Delete and Recreate PFKSET01
                           SAVe      = Save a PF Key set
                           SWAp      = Swap PF Key sets    ===> default
                 NEWCOPY - blank     = TBCLOSE REPLACE     ===> default
                           Y|NEWCOPY = TBCLOSE NEWCOPY
                 PROFILE - PROFILE = Save to PROFILE Pool  ===> default
                           SHARED  = Save to SHARED Pool
                    TEST - Used to control traces
 ------------------------Positional  Arguments-------------------------
             PFKey_Set   - Name of PFKey Set to perform ACTION on.
                           If blank, RESTORE PF Key set to current ISPF
                           profiles PF Key set (if previously saved or
                           SWAPed)
             PFKey_Desc  - Description of PFKey Set for SAVEs.

      Files: Uses ISPF TABLE PFKSET01 in the user's ISPF PROFILE dataset
Other EXECS: NONE

EXEC History

EXEC/MACRO Name: PFKSET
         Author: AL FERGUSON - TS ADM (TSAZFA) from version 1.18
                 ALBERT HULSEBOSCH (TTECAH1)
         Writen: 6MAR93
        History: 06FEB17 - v3.05 - Pick up updated version or ERRINFO
                           Common Code routines.
                 01FEB17 - v2.07 - Mass update to pickup Error
                           Handling Fixes.
                 31JAN17 - v2.06 - Update all REXXes with latest
                           common routines via %CCMASS
                 18MAY95 - v2.05 - Update all REXXes with latest
                           versions of commom routines.  This was done
                           via %CCMASS
                 23JUN93 - v2.00 - Maintenance done to include the
                           latest changes to many COPY members.  This
                           maintenance done via CCMASS.
                 26MAY93 - v1.3 Minor fixes to standard functions
                 20APR93 - v1.2 Logic fixes and DISPLAY support
                 14APR93 - v1.1 Logic fixes and ENDEVOR base
                           PF Key Set creation
                 06MAR93 - v1.0
***************************** Rexx ***********************************/
MsgStat=MSG("OFF")
PARSE ARG InParms

IF InParms = '' THEN CALL INVOKE_AS_MACRO
IF WORDPOS(InParms,'-h -H') > 0 THEN CALL DISPLAY_HELP
CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
IF ABBREV('RECREATE',ACTION,3) THEN DO
    ok='0 8';ADDRESS "ISPEXEC" "TBERASE PFKSET01"
    CALL INITIALIZE_PROFILE_TABLE
  END
ELSE DO
    ok='0 8';ADDRESS "ISPEXEC" "TBOPEN PFKSET01 WRITE"
    IF RC = 8 THEN CALL INITIALIZE_PROFILE_TABLE  /* Table doesn't exist */

    IF ABBREV('LIST',ACTION,3) THEN CALL LIST_PFK_SETS
    SELECT
      WHEN ABBREV('DELETE',ACTION,3)  THEN CALL DELETE_PFKEY_SET(PFKey_Set)
      WHEN ABBREV('DISPLAY',ACTION,3) THEN DO
         CALL SET_MSG "PF Key Set is '"PFKSET03"'.",,
              "PF Key Set is '"PFKSET03"' --" PFKSET04".", "NO"
        END
      WHEN ABBREV('LIST',ACTION,3) THEN NOP
      WHEN ABBREV('SAVE',ACTION,3) THEN CALL SAVE_PFKEY_SET
      WHEN ABBREV('SWAP',ACTION,3) THEN DO
         IF PFKey_Set ¬= PFKSET03  THEN CALL SWAP_PFKEYS
         ELSE DO
             CALL SET_MSG  "Already using '"PFKSET03"'!",,
                  "Already using the '"PFKSET03"' PF Key Set!", "YES"
             ExitError=4
         END
        END
    OTHERWISE
       CALL SET_MSG "Unknown ACTION()!.",,
            "'"ACTION"' is not a valid %PFKSET ACTION value.", "YES"
       ExitError=8
    END
END

ok='0';ADDRESS "ISPEXEC" "TBCLOSE PFKSET01" NEWCOPY
MsgStat=MSG(MsgStat)
EXIT ExitError
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0      /* REXX functional values for TRUE and FALSE   */
                     /* Initialize and process non-positional parms   */
  ValidParms="ACTION(SWAP) NEWCOPY(NO) PROFILE(PROFILE) TEST(O)"
  MatchLength=3                    /* NP-Parms match on first # chars */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  ExitError=0

  PARSE VALUE AnythingElse WITH PFKey_Set PFKey_Desc
  UPPER PFKey_Set ACTION NEWCOPY
  PFKey_list  = 'ZPF01  ZPF02  ZPF03  ZPF04  ZPF05  ZPF06  ZPF07  ZPF08',
                'ZPF09  ZPF10  ZPF11  ZPF12  ZPF13  ZPF14  ZPF15  ZPF16',
                'ZPF17  ZPF18  ZPF19  ZPF20  ZPF21  ZPF22  ZPF23  ZPF24'
  PFKeyL_list = 'ZPFL01 ZPFL02 ZPFL03 ZPFL04 ZPFL05 ZPFL06 ZPFL07 ZPFL08',
                'ZPFL09 ZPFL10 ZPFL11 ZPFL12 ZPFL13 ZPFL14 ZPFL15 ZPFL16',
                'ZPFL17 ZPFL18 ZPFL19 ZPFL20 ZPFL21 ZPFL22 ZPFL23 ZPFL24'

  IF PROFILE ¬= 'PROFILE' THEN PROFILE = 'SHARED'
  IF LEFT(NEWCOPY,1) ¬= 'Y' & NEWCOPY ¬= 'NEWCOPY' THEN NEWCOPY = ''
     ELSE                                               NEWCOPY = 'NEWCOPY'
  ADDRESS "ISPEXEC" "VGET (PFKSET03 PFKSET04) ASIS"
  ADDRESS "ISPEXEC" "VGET (ZAPPLID)"

  IF PFKSET03  = '' THEN DO
     PFKSET03=ZAPPLID; PFKSET04="PF Keys for the" ZAPPLID "ISPF Profile"
  END
  SELECT
    WHEN PFKey_Set = '' & ACTION = 'SAVE'   THEN DO
       PFKey_Set=PFKSET03; PFKey_Desc=PFKSET04
      END
    WHEN PFKey_Set = ''                     THEN DO
       PFKey_Set=ZAPPLID; PFKey_Desc="PF Keys for" ZAPPLID "ISPF Profile"
      END
    WHEN PFKey_Desc ¬= '' & ACTION = 'SWAP' THEN ACTION='SAVE'
  OTHERWISE; NOP; END
RETURN
/**********************************************************************
             If no arguments, was it envoked as a MACRO
**********************************************************************/
INVOKE_AS_MACRO:
  "SUBCOM ISREDIT"
  IF RC ¬= 0 THEN RETURN
  ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"
  ADDRESS "ISREDIT" "MACRO (InParms) NOPROCESS "
  IF RC ¬= 0 THEN RETURN                          /* May be TSO call */

RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i = 1 TO SOURCELINE() UNTIL SOURCELINE(i + 2) = 'EXEC History'     /*COPY*/
     source.i = SOURCELINE(i + 1)   /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i = 1 TO i; SAY source.i; END /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i = 1 TO i     /* Build HELP table to display                 *//*COPY*/
        source = source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"            /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK = CENTER("----> END of Help <----",80)                     /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList = ValidParms ' '; InList = InParms ' '                         /*COPY*/
  ParmList = ''; ParmErrorList = ''                                     /*COPY*/
                                                                        /*COPY*/
  DO linx = 1 TO WORDS(ValidParms) UNTIL VpList = ''                    /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList = ParmList STRIP(LEFT(parm.linx,MatchLength))             /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm = STRIP(parm)                                                 /*COPY*/
     ParmNumber = WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)      /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber = value                  /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList = ParmErrorList parm"("value                    /*COPY*/
     ELSE ParmErrorList = ParmErrorList parm"("value")"                 /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse = STRIP(InList) ParmErrorList                       /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
      AnythingElse = STRIP(InList)                                      /*COPY*/
  END                                                                   /*COPY*/
  DO ParmInx = 1 TO linx                                                /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail = TRUE; ELSE TSO_avail = FALSE         /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/**********************************************************************
            Create and Initialize ISPF TABLE PFKSET01
***********************************************************************/
INITIALIZE_PROFILE_TABLE:
  ok='0';ADDRESS "ISPEXEC" "TBCREATE PFKSET01 WRITE KEYS(PFKSET01)",
                           "NAMES(PFKSET02 "PFKey_List PFKeyL_List")"
  PFKSET01=ZAPPLID; PFKSET02="PF Keys for the" ZAPPLID "ISPF Profile"
  ok='0';ADDRESS "ISPEXEC" "TBADD PFKSET01"

  CALL STANDARD_PFKEYS
  CALL ED01_PFKEYS

  PFKSET01=PFKSET03
  ok='0';ADDRESS "ISPEXEC" "TBSAVE PFKSET01"
  ok='0';ADDRESS "ISPEXEC" "TBSCAN PFKSET01 ARGLIST(PFKSET01) PREVIOUS"

  CALL SET_MSG 'PF Key Table Created.',,
       'PF Key Table, PFKSET01, created in your ISPF.PROFILE DSN', "NO"

  PFKSET03=ZAPPLID              /* Back to default PROFILE PF Key Set */
  PFKSET04="PF Keys for the" ZAPPLID "ISPF Profile"
  ok='0 8';ADDRESS "ISPEXEC" "VPUT (PFKSET03 PFKSET04)" PROFILE

IF ACTION = 'SAVE' & PFKey_Set = ZAPPLID THEN EXIT
   ELSE RETURN
/**********************************************************************
            ISPF Standard PF Key Definitions
***********************************************************************/
STANDARD_PFKEYS:
  PFKSET01='STANDARD'; PFKSET02="Modified version of Standard ISPF PF Keys"

  ZPF01='HELP'     ; ZPFL01='HELP'
  ZPF02='SPLIT'    ; ZPFL02='SPLIT'
  ZPF03='END'      ; ZPFL03='END'
  ZPF04='RETURN'   ; ZPFL04='RETURN'
  ZPF05='RFIND'    ; ZPFL05='RFIND'
  ZPF06='RCHANGE'  ; ZPFL06='RCHANGE'
  ZPF07='UP'       ; ZPFL07='UP'
  ZPF08='DOWN'     ; ZPFL08='DOWN'
  ZPF09='SWAP NEXT'; ZPFL09='SWAPNext'
  ZPF10='LEFT'     ; ZPFL10='LEFT'
  ZPF11='RIGHT'    ; ZPFL11='RIGHT'
  ZPF12='RETRIEVE '; ZPFL12='RETRIEVE'
  ZPF13='TSOVIEW'  ; ZPFL13='TSO View'
  ZPF14='SPLIT'    ; ZPFL14='SPLIT'
  ZPF15='END'      ; ZPFL15='END'
  ZPF16='=X'       ; ZPFL16='Exit'
  ZPF17='RFIND'    ; ZPFL17='RE-FIND'
  ZPF18='%PFKSET'  ; ZPFL18='Set PF Keys'
  ZPF19='UP M'     ; ZPFL19='MAX UP'
  ZPF20='DOWN M'   ; ZPFL20='MAX DOWN'
  ZPF21='SWAP LIST'; ZPFL21='SWAPList'
  ZPF22='LEFT M'   ; ZPFL22='MAX LEFT'
  ZPF23='RIGHT M'  ; ZPFL23='MAX RIGHT'
  ZPF24='MUCMD'    ; ZPFL24='MBR Utility'

  ok='0';ADDRESS "ISPEXEC" "TBADD PFKSET01"
RETURN
/**********************************************************************
            Sample ISPF EDIT PF Key Set number 01
***********************************************************************/
ED01_PFKEYS:
  PFKSET01='ED01'; PFKSET02="Useful sample EDit PF Key Set"

  ZPF01='HELP'      ; ZPFL01='HELP'
  ZPF02='SPLIT'     ; ZPFL02='SPLIT'
  ZPF03='END'       ; ZPFL03='END'
  ZPF04='RETURN'    ; ZPFL04='RETURN'
  ZPF05='RFIND'     ; ZPFL05='RFIND'
  ZPF06='RCHANGE'   ; ZPFL06='RCHANGE'
  ZPF07='UP'        ; ZPFL07='UP'
  ZPF08='DOWN'      ; ZPFL08='DOWN'
  ZPF09='SWAP NEXT' ; ZPFL09='SWAPNext'
  ZPF10='LEFT'      ; ZPFL10='LEFT'
  ZPF11='RIGHT'     ; ZPFL11='RIGHT'
  ZPF12='RETRIEVE'  ; ZPFL12='RETRIEVE'
  ZPF13='TSOVIEW'   ; ZPFL13='TSO CMD'
  ZPF14='%VW'       ; ZPFL14='View Parm'
  ZPF15='%HYPER$'   ; ZPFL15='Hyper Cache'
  ZPF16='=3.4'      ; ZPFL16='DSN List'
  ZPF17='JC'        ; ZPFL17='JOB CARD'
  ZPF18='%PFKSET'   ; ZPFL18='Rst PFKs'
  ZPF19='UP M'      ; ZPFL19='MAX UP'
  ZPF20='DOWN M'    ; ZPFL20='MAX DOWN'
  ZPF21='SWAP LIST' ; ZPFL21='SWAPList'
  ZPF22='%RPRINT'   ; ZPFL22='R Print'
  ZPF23='%BR'       ; ZPFL23='Browse DSN'
  ZPF24='%ED'       ; ZPFL24='Edit DSN'

  ok='0';ADDRESS "ISPEXEC" "TBADD PFKSET01"
RETURN
/**********************************************************************
            Display List of PF Key Sets
***********************************************************************/
LIST_PFK_SETS:
  PFKSET01=PFKSET03; PFKSET02=PFKSET04        /* Save current PF Keys */
  ok='0 8';ADDRESS "ISPEXEC" "TBMOD PFKSET01"

  ok='0';ZTDMARK="                      ----> LAST PF KEY SET <----"
    ADDRESS "ISPEXEC" "TBSORT PFKSET01 FIELDS(PFKSET01,C,A)"
    ADDRESS "ISPEXEC" "TBTOP PFKSET01"
  ok='0 4 8';crp=1                    /* Handleable RC's for TBDISPL  */
  DO UNTIL RC ¬= 0
     ADDRESS "ISPEXEC" "TBDISPL PFKSET01 PANEL(PFKSET01) AUTOSEL(NO)",
             "CSRROW("crp") CURSOR(selopt)"
  END
                                      /* START actual processing here */
  DO ZTDSELS
     CALL PROCESS_ROW
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL PFKSET01"
  END

  ok='0';PFKSET01=PFKSET03; PFKSET02=PFKSET04  /* Get current PF Keys */
    ADDRESS "ISPEXEC" "TBTOP PFKSET01"
    ADDRESS "ISPEXEC" "TBSCAN PFKSET01 ARGLIST(PFKSET01)"
RETURN
/**********************************************************************
            Process each selected row
***********************************************************************/
PROCESS_ROW:
  SELECT
    WHEN (selopt = 'D') & (PFKSET01 ¬= PFKSET03) THEN DO
        ok='0';ADDRESS "ISPEXEC" "TBDELETE PFKSET01"
        NEWCOPY = 'NEWCOPY'                   /* Retrieve Freed Space */
        CALL SET_MSG 'PF Key Set Deleted.',,
             'PF Key Table set' PFKSET01 'has been deleted.', "NO"
      END
    WHEN (selopt = 'D') & (PFKSET01 = PFKSET03) THEN DO
        CALL SET_MSG "Can't DELETE" PFKSET03"!",,
             "'"PFKSET03"' is the current PF Key Set, you must be in",
             "another PF Key Set to DELETE it!", "NO"
      END
    WHEN WORDPOS(selopt, '/ S') > 0 THEN DO
        PFKey_Set=PFKSET01; PFKey_Desc=PFKSET02; ACTION='SWAP'
      END
  OTHERWISE; NOP; END
RETURN
/**********************************************************************
            Delete a set of PF Keys
***********************************************************************/
DELETE_PFKEY_SET:
ARG PFKSET01 .
  ok='0';ADDRESS "ISPEXEC" "TBTOP PFKSET01"
  ok='0 8';ADDRESS "ISPEXEC" "TBSCAN PFKSET01 ARGLIST(PFKSET01)"
  IF RC = 0 THEN DO
     ok='0';ADDRESS "ISPEXEC" "TBDELETE PFKSET01"
     NEWCOPY = 'NEWCOPY'                     /* Retrieve Freed Space */
  END

  CALL SET_MSG 'PF Key Set Deleted.',,
       'PF Key Table set' PFKSET01 'has been deleted.', "NO"
RETURN
/**********************************************************************
            Swap current keys for PFKey_Set
***********************************************************************/
SWAP_PFKEYS:
  PFKSET01=PFKSET03; PFKSET02=PFKSET04
  ok='0 8';ADDRESS "ISPEXEC" "TBMOD PFKSET01"

  PFKSET01=PFKey_Set
  ok='0';ADDRESS "ISPEXEC" "TBTOP PFKSET01"
  ok='0 8';ADDRESS "ISPEXEC" "TBSCAN PFKSET01 ARGLIST(PFKSET01)"

  IF RC = 0 THEN DO           /* We have successfully swapped PF Keys */
     CALL SET_MSG "PF Keys Swapped.",,
         "PF Keys swapped from PF Key Set '"PFKSET03"' to '"PFKSET01"'",
         "--" PFKSET02".", "NO"

     IF PFKSET01 = ZAPPLID THEN DO; PFKSET03=''; PFKSET04='';             END
        ELSE                    DO; PFKSET03=PFKSET01; PFKSET04=PFKSET02; END
     ok='0 8'
       ADDRESS "ISPEXEC" "VPUT (PFKSET03 PFKSET04)" PROFILE
       ADDRESS "ISPEXEC" "VPUT ("PFKey_List" )" PROFILE
       ADDRESS "ISPEXEC" "VPUT ("PFKeyL_List")" PROFILE
    END
  ELSE DO                     /* PFKey_Set doesn't exist?!?           */
     CALL SET_MSG 'PF Keys Not Swapped!',,
          "No PF Key Set" PFKey_Set "exists, PF Key Set remains" PFKSET03, "NO"
  END
RETURN
/**********************************************************************
            Save the current PF Key set as PFKey_Set
***********************************************************************/
SAVE_PFKEY_SET:
  PFKSET01=PFKey_Set; PFKSET02=PFKey_Desc
  ok='0';  ADDRESS "ISPEXEC" "TBTOP PFKSET01"
  ok='0 8';ADDRESS "ISPEXEC" "TBMOD PFKSET01"

  IF RC = 0 THEN                      /* PFKey_Set already existed    */
       CALL SET_MSG 'PF Keys Set Updated.',,
           "PF Keys set" PFKey_Set "--" PFKey_Desc"; has been updated.","NO"
  ELSE CALL SET_MSG 'PF Keys Set Created.',,
           "PF Keys set" PFKey_Set "--" PFKey_Desc"; has been created.","NO"

  IF PFKey_Set = ZAPPLID THEN DO; PFKSET03=''; PFKSET04='';                END
     ELSE                     DO; PFKSET03=PFKey_Set; PFKSET04=PFKey_Desc; END
  ok='0 8';ADDRESS "ISPEXEC" "VPUT (PFKSET03 PFKSET04)" PROFILE
RETURN
/**********************************************************************
            Cleanup and Exit Gracefully
***********************************************************************/
CLEANUP:
  ADDRESS "ISPEXEC" "TBCLOSE PFKSET01" NEWCOPY
EXIT ExitError                      /* EXIT with error return code    */
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults = ""                                                   /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults = STRIP(eresults "NL ===>" eresult)                 /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype   = CONDITION('C')          /* Condition causing error        *//*COPY*/
  sourcel = SOURCELINE(elineno)     /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel = LEFT(sourcel,72)     /*COPY*/
  sourcel = STRIP(sourcel)                                              /*COPY*/
  DO e_i = 1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)               /*COPY*/
     nextl = SOURCELINE(elineno + e_i)                                  /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl = LEFT(nextl,72)        /*COPY*/
     sourcel = STRIP(sourcel,'T',',') STRIP(nextl)                      /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause  = ERRORTEXT(RC)       /* Brief description of error     */ /*COPY*/
     expandl = "Can't INTERPRET source with SYNTAX errors!"             /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst = "ADDRESS CALL INTERPRET SAY"                                 /*COPY*/
     ecause  = CONDITION('D')       /* Brief description of error     *//*COPY*/
     FullLine = sourcel             /* Begin getting EXECuted source  *//*COPY*/
     expandl = ""                                                       /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN INDEX(srcl,"=")           > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals = VALUE(srcl); END                             /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl = expandl';' evals                                      /*COPY*/
     END                                                                /*COPY*/
     expandl = STRIP(STRIP(expandl,"L",";"))                            /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN                /*COPY*/
          emsg = ZERRLM                                                 /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF SYMBOL('SYSMSGLVL2') = 'VAR'                THEN                /*COPY*/
          emsg = SYSMSGLVL1 "--" SYSMSGLVL2                             /*COPY*/
     ELSE emsg = SYSMSGLVL1                                             /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0       THEN                /*COPY*/
          emsg = "SYSREASON: '"SYSREASON"'"                             /*COPY*/
  IF etype = 'NOVALUE' THEN ExitError = 4    /* Set EXIT error level  *//*COPY*/
     ELSE ExitError = RC                                                /*COPY*/
  erc = ExitError       /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresult = 1 TO eresult.0; PARSE PULL eresult.eresult; END          /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC = ExitError               /* SET ISPF RC to ExitError       *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitError                      /* EXIT with error return code    *//*COPY*/
