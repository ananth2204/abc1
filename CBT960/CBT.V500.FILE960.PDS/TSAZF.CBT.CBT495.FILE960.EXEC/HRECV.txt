/***************************** REXX ***********************************
   This REXX/ISPF MACRO is used to display HSM DSN Recovery Data and
        allow Recovery of the DSN(s) via an ISPF selection Panel.

                           --- EXAMPLE ---
<TSO> <%>HRECV DsnLevel <LEVEL(TRUE|FALSE)> <TEST(TraceOption)>
<TSO> <%>HRECV -H -- To display help for this REXX/ISPF Macro

  Arguments: DsnLevel    - DSN name or DSN LEVEL to RECOVER
             InParms     - Non-Positional  parameters
 ----------------------------- NP-PARMS -------------------------------
                   LEVEL - DsnLevel is a DSN Level filter, TRUE or FALSE.
                           default:  FALSE (it is an indvidule DSN name)
                    TEST - Used to control traces

      Files: NONE
Other EXECS: NONE

EXEC History

EXEC/MACRO Name: HRECV
         Author: AL FERGUSON - TS ADM (TSAZFA) from version 1.29
                 FERGUSON AL (HUL2353)
         Writen: 22AUG95
        History: 11SEP17 - v1.54 - Refactor
                 06FEB17 - v1.33 - Mass Update of Error routines.
                 01FEB17 - v1.32 - Update for Error Handling Fixes.
                 31JAN17 - v1.31 - Update all REXXes w/latest common
                           routines via %CCMASS
                 17DEC15 - v1.29 - Fix use of "YES" & "NO" for LEVEL.
                 08MAR12 - v1.27 - Changes to help set LEVEL value
                           automatically for non-quoted datasets that do
                           not exist as personal datasets.
                 05APR10 - v1.25 - Changes for zOS 1.11 HLIST updates.
                 27MAR06 - v1.23 - Changes to support stacking the command.
                 27MAR06 - v1.21 - Add POPUP if now DsnLevel provided.
                 27MAR06 - v1.18 - First Working Version
                 22AUG95 - v1.00
***************************** Rexx ***********************************/
MsgStat=MSG("OFF")
ARG DsnLevel InParms

IF WORDPOS(DsnLevel,'-h -H') > 0 THEN CALL DISPLAY_HELP
IF DsnLevel = ''                 THEN CALL INVOKE_AS_MACRO
IF DsnLevel = ''                 THEN DO
   CALL SET_MSG "%HRECV What?!?!","%HRECV requires a DSN to work with!","YES"
   ExitError=8
  END
ELSE                               CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
SELECT
  WHEN GET_HSM_INFO() THEN DO
     DO FOREVER
        ok='4 8';ADDRESS "ISPEXEC" "TBDISPL" _RES@ "PANEL(HRECV01) AUTOSEL(NO)"
        IF RC = 8 & ZTDSELS ¬= 1 THEN LEAVE
        IF ZTDSELS = 0           THEN ITERATE
        DO selected=1 TO ZTDSELS
           CALL PROCESS_SELECTION
           ok='0 8';ADDRESS "ISPEXEC" "TBSCAN" _RES@
        END
        ok='0';ADDRESS "ISPEXEC" "TBSKIP" _RES@ "ROW("ZTDTOP")"
     END
     ok='0';ADDRESS "ISPEXEC" "TBEND" _RES@
    END
  WHEN LEVEL          THEN
     CALL SET_MSG "No HSM Backup Data!", "There is no HSM Backup Data",
                  "for the DSN LEVEL: " DsnLevel "!!!", "YES"
OTHERWISE
     CALL SET_MSG "No HSM Backup Data!", "There is no HSM Backup Data",
                  "for the DSN: " DsnLevel "!!!", "YES"
END

IF ExitError ¬= 0 THEN DO
   ZISPFRC=ExitError;ok="0";ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"
END
MsgStat=MSG(MsgStat)
EXIT ExitError
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0                   /* Setvalues for TRUE and FALSE   */
  PARSE SOURCE . . RName . RDsn .   /* Get REXX Name & EXEC Dsn       */
  JName=MVSVAR("SYMDEF","JOBNAME")  /* Get JOB Name                   */
                                    /* Initialize NonPositional parms */
  ValidParms="LEVEL(FALSE) TEST(O)"
  MatchLength=4                     /* NP-Parms match first # chars   */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  ExitError=0
  _RES@="RT"||TIME("S")

  SELECT
    WHEN LEVEL = TRUE            THEN DsnLevel=STRIP(DsnLevel,"B","'")
    WHEN ABBREV(LEVEL,"Y")       THEN DO
             DsnLevel=STRIP(DsnLevel,"B","'"); LEVEL=TRUE
      END
    WHEN ABBREV(DsnLevel,"'")    THEN          LEVEL=FALSE
    WHEN SYSDSN(DsnLevel) = "OK" THEN          LEVEL=FALSE
  OTHERWISE; DsnLevel=STRIP(DsnLevel,"B","'"); LEVEL=TRUE ; END
  ADDRESS "ISPEXEC" "VGET (ZSCREEN ZSCRMAXW)"
  col=(ZSCRMAXW - 58)/2
  POP_loc="ROW(8) COLUMN("col")"
  ODS_dsn="SPFTEMP"ZSCREEN".HLIST"

  ZTDMARK=CENTER("--->  No More HSM Info  <---", ZSCRMAXW)
          /* Valid HRECV DSN selection options                       */
          /*     C - HCANcel, Cancel an existing queued request      */
          /*     D - HBDELete, Delete a backup version of a DSN      */
          /*     I - All HSM Info from HLIST BCDS                    */
          /*     L - HList, List HSM information on this DSN         */
          /*     Q - HQuery, List DFSMShsm Request for DSN           */
          /*     R - HRECOVer, recover a DSN from a backup version   */
  valopts="C D I L Q R"
RETURN
/**********************************************************************
             If no arguments, was it envoked as a MACRO
**********************************************************************/
INVOKE_AS_MACRO:
  "SUBCOM ISREDIT"
  IF RC ¬= 0 THEN RETURN
  ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"
  ADDRESS "ISREDIT" "MACRO (DsnLevel InParms) NOPROCESS"
  IF RC ¬= 0 | DsnLevel = "" THEN DO
     ok='0';ADDRESS "ISPEXEC" "ADDPOP ROW(5) COLUMN(12)"
     ok='0 8';ADDRESS "ISPEXEC" "DISPLAY PANEL(HRECV05)"
     display_RC=RC
     ok='0';ADDRESS "ISPEXEC" "REMPOP"
     IF display_RC ¬= 0 THEN EXIT
  END
  UPPER DsnLevel
RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i=1 TO SOURCELINE() UNTIL SOURCELINE(i+2) = 'EXEC History'         /*COPY*/
     source.i=SOURCELINE(i+1)       /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i=1 TO i; SAY source.i; END   /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i=1 TO i       /* Build HELP table to display                 *//*COPY*/
        source=source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"              /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK=CENTER("----> END of Help <----",80)                       /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList=ValidParms ' ';InList=InParms ' ';ParmList='';ParmErrorList='' /*COPY*/
                                                                        /*COPY*/
  DO linx=1 TO WORDS(ValidParms) UNTIL VpList = ''                      /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList=ParmList STRIP(LEFT(parm.linx,MatchLength))               /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm=STRIP(parm)                                                   /*COPY*/
     ParmNumber=WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)        /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber=value                    /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList=ParmErrorList parm"("value                      /*COPY*/
     ELSE ParmErrorList=ParmErrorList parm"("value")"                   /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse=STRIP(InList) ParmErrorList                         /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE; AnythingElse=STRIP(InList); END                            /*COPY*/
  DO ParmInx=1 TO linx                                                  /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail=TRUE; ELSE TSO_avail=FALSE             /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY DISPMSG */
/********************************************************************** /*COPY*/
           Use ISPF CONTROL DISPLAY LOCK to give user STATUS            /*COPY*/
                 during a long running portion of REXX                  /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_MSG:                                                            /*COPY*/
PARSE ARG ZERRLM, ZERRALRM .                                            /*COPY*/
  ZERRSM=""; ZERRHM="ISR2MACR"           /* Initialize ISRZ002 Fields *//*COPY*/
  IF ABBREV('YES',ZERRALRM,1)  THEN ZERRALRM='YES'                      /*COPY*/
     ELSE                           ZERRALRM='NO'                       /*COPY*/
  IF SYSVAR('SYSENV') = 'BACK' THEN SAY ZERRLM                          /*COPY*/
  ELSE DO                                                               /*COPY*/
     ok='*';ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK"                    /*COPY*/
            ADDRESS "ISPEXEC" "DISPLAY MSG(ISRZ002)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/**********************************************************************
     Use HSM HLIST commond to get DSN or DSN Level info from HSM
***********************************************************************/
GET_HSM_INFO:
  CALL DISPLAY_MSG "Retrieving information from HSM.  Please wait ...", "NO"

  ok='0 8';ADDRESS "TSO" "DELETE ("ODS_dsn") NVSAM"
  ok='0'                /* Acceptable RC for following Commands       */
  IF LEVEL THEN ADDRESS "TSO" "HLIST LEVEL("DsnLevel") ODS("ODS_dsn") BCDS"
           ELSE ADDRESS "TSO" "HLIST DSN("DsnLevel")   ODS("ODS_dsn") BCDS"
  CALL DISPLAY_MSG "Digesting HSM retrieved information.  Please wait ...", "NO"
    ADDRESS "TSO" "ALLOC DD(HLISTOUT) DSN("ODS_dsn") OLD REUSE"
    ADDRESS "MVS" "EXECIO * DISKR HLISTOUT (STEM HLIST. FINIS)"
    ADDRESS "TSO" "FREE DD(HLISTOUT) DELETE"
  IF HLIST.0 <= 6 THEN RETURN FALSE  /* No HSM BCDS Data for this DSN */

  ok='0 4'
    ADDRESS "ISPEXEC" "TBCREATE" _RES@ "KEYS(DsName versnmbr)"           ,
            "NAMES(DsName2 bkpdsn bkpvol fromvol bkpdate bkptime syscat" ,
            "unsret racfind bkpprof bkpfreq maxver) NOWRITE REPLACE"
  DO i = 4 TO (HLIST.0 - 3)
     SELECT
       WHEN LEFT(HLIST.i,30) = ""                     THEN NOP
       WHEN ABBREV(HLIST.i, "1")                      THEN NOP
       WHEN INDEX(HLIST.i, "DATA SET NAME") > 0       THEN NOP
       WHEN INDEX(HLIST.i, "VOLUME  VOLUME DATE") > 0 THEN NOP
       WHEN INDEX(HLIST.i, "DSNAME =") > 0            THEN PARSE VALUE ,
            HLIST.i WITH . "DSNAME =" DsName ,
                         . "BACKUP FREQ =" bkpfreq ",",
                         . "VERSIONS = " maxver
       WHEN ABBREV(WORD(HLIST.i,1), "TOTAL")          THEN NOP
     OTHERWISE
        PARSE VALUE HLIST.i WITH bkpdsn bkpvol fromvol bkpdate bkptime ,
                                 syscat versnmbr unsret racfind bkpprof
        IF versnmbr = 0 THEN DsName2=DsName; ELSE DsName2=""
        ok='0 8';ADDRESS "ISPEXEC" "TBADD" _RES@
     END
  END
  ok='0';ADDRESS "ISPEXEC" "TBSORT" _RES@ "FIELDS(DsName,C,A VersNmbr,C,A)"
         ADDRESS "ISPEXEC" "TBTOP" _RES@
RETURN TRUE
/**********************************************************************
            Process HRECV01 Panel Selection for current row
***********************************************************************/
PROCESS_SELECTION:
  SELECT
    WHEN sel = "C" THEN DO   /* HCANcel, Cancel a queued request       */
       ok='0';ADDRESS "TSO" "HCANCEL DsName('"DsName"')"
       CALL SET_MSG , "HCANCEL sent for DsName('"DsName"').", "NO"
      END
    WHEN sel = "D" THEN DO   /* HBDELete, Delete a DSN backup          */
       ok='0';ADDRESS "ISPEXEC" "ADDPOP" POP_loc
       ok='0 8';ADDRESS "ISPEXEC" "DISPLAY PANEL(HRECV02)"
       display_RC=RC
       ok='0';ADDRESS "ISPEXEC" "REMPOP"
       IF display_RC = 0 THEN DO
          ADDRESS "TSO" "HBDELETE ('"DsName"') VERSIONS("versnmbr")"
          CALL SET_MSG ,"HBDELETE on version" versnmbr "backup of '"DsName"'."
       END
      END
    WHEN sel = "I" THEN DO   /* HBDELete, Delete a DSN backup          */
       ok='0';ADDRESS "ISPEXEC" "ADDPOP" POP_loc
       ok='0 8';ADDRESS "ISPEXEC" "DISPLAY PANEL(HRECV03)"
       ok='0';ADDRESS "ISPEXEC" "REMPOP"
      END
    WHEN sel = "L" THEN DO   /* HBDELete, Delete a DSN backup          */
       ok='0';ADDRESS "TSO" "HLIST DATASET('"DsName"')"
       CALL SET_MSG ,"HBDELETE on version" versnmbr "backup of '"DsName"'."
      END
    WHEN sel = "Q" THEN DO   /* HQuery, List HFSMShsm Request for DSN  */
       ok='0';ADDRESS "TSO" "HQUERY DATASETNAMES('"DsName"')"
       CALL SET_MSG ,"HQUERY done on '"DsName"'."
      END
    WHEN sel = "R" THEN DO   /* HRECOVer, recover DSN from a backupn   */
       ok='0';ADDRESS "ISPEXEC" "ADDPOP" POP_loc
       ok='0 8';ADDRESS "ISPEXEC" "DISPLAY PANEL(HRECV04)"
       display_RC=RC
       ok='0';ADDRESS "ISPEXEC" "REMPOP"
       IF display_RC = 0 THEN DO
          ADDRESS "TSO" "HRECOVER '"DsName"' GENERATION("versnmbr")",
                                  "NEWNAME('"newname"')" REPLACE
          CALL SET_MSG ,"HRECOVER of '"DsName"' scheduled to '"newname"'."
       END
      END
  OTHERWISE
     CALL SET_MSG , sel "- not currently supported.",
                   "Supported options are:" valopts, "YES"
  END
RETURN
/**********************************************************************
            Cleanup and Exit Gracefully
***********************************************************************/
CLEANUP:
  ok='*'                            /* Ignore all non-0 RCs           */
   ADDRESS "ISPEXEC" "TBEND" _RES@
   ADDRESS "TSO" "FREE DD(HLISTOUT)"
   ADDRESS "TSO" "DELETE ("ODS_dsn") NVSAM"
   ZISPFRC=ExitError
   ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"
EXIT ExitError                      /* EXIT with error return code    */
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults = ""                                                   /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults = STRIP(eresults "NL ===>" eresult)                 /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype  =CONDITION('C')            /* Condition causing error        *//*COPY*/
  sourcel=SOURCELINE(elineno)       /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel=LEFT(sourcel,72)       /*COPY*/
  sourcel=STRIP(sourcel)                                                /*COPY*/
  DO e_i=1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)                 /*COPY*/
     nextl=SOURCELINE(elineno + e_i)                                    /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl=LEFT(nextl,72)          /*COPY*/
     sourcel=STRIP(sourcel,'T',',') STRIP(nextl)                        /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause =ERRORTEXT(RC)         /* Brief description of error     */ /*COPY*/
     expandl="Can't INTERPRET source with SYNTAX errors!"               /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst="ADDRESS CALL INTERPRET SAY"                                   /*COPY*/
     ecause  =CONDITION('D')        /* Brief description of error     *//*COPY*/
     FullLine=sourcel               /* Begin getting EXECuted source  *//*COPY*/
     expandl =""                                                        /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN INDEX(srcl,"=")           > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals=VALUE(srcl); END                               /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl=expandl';' evals                                        /*COPY*/
     END                                                                /*COPY*/
     expandl=STRIP(STRIP(expandl,"L",";"))                              /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN                /*COPY*/
          emsg=ZERRLM                                                   /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
          emsg='No available ERROR description.'                        /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
          emsg='No available ERROR description.'                        /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF SYMBOL('SYSMSGLVL2') = 'VAR'                THEN                /*COPY*/
          emsg=SYSMSGLVL1 "--" SYSMSGLVL2                               /*COPY*/
     ELSE emsg=SYSMSGLVL1                                               /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0       THEN                /*COPY*/
          emsg="SYSREASON: '"SYSREASON"'"                               /*COPY*/
  IF etype = 'NOVALUE' THEN ExitError=4      /* Set EXIT error level  *//*COPY*/
     ELSE ExitError=RC                                                  /*COPY*/
  erc=ExitError         /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresult = 1 TO eresult.0; PARSE PULL eresult.eresult; END          /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC = ExitError               /* SET ISPF RC to ExitError       *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitError                      /* EXIT with error return code    *//*COPY*/
