/***************************** REXX ***********************************
 This REXX verifies all USERMODs are APPLYed to the appropritate SMP/E
      TARGET and all APPLYed USERMODs are being documented.

NOTE: This REXX does NOT require TSO to run, it will run under IRXJCL

                           --- EXAMPLE ---
TSO <%>UMODCHCK umod_list <FAIL_RC(0|4|8)> <TEST(TraceOption)>
TSO <%>UMODCHCK -H -- To display help for this REXX

  Arguments: umod_list   - DSN to find USERMOD Control file & List In
             InParms     - Non-Positional parameters
 ----------------------------- NP-PARMS -------------------------------
                 FAIL_RC - RC to return when Check Fails     default: 4
                    TEST - Used to control traces

      Files: Control file & Usermod list found in umod_list
             SMP/E CSI identified in umod_list
Other EXECS: NO additional REXX EXECs
             SMPQASM external REXX Function

EXEC History

 REXX EXEC Name: UMODCHCK
         Author: AL FERGUSON - TS ADM (TSAZFA) from version 1.29
                 FERGUSON AL (HUL2353)
         Writen: 15SEP09
        History: 30AUG17 - v1.47 - Remove TSO Requirement
                 06FEB17 - v1.31 - Update Error Handling Routines
                 08MAR12 - v1.26 - Fix check for extra USERMODs
                           in CSI that are not in the USERMOD List. Also
                           migrate from TSO ALLOC and FREE to BPXWDYN.
                 15SEP09 - v1.17 - First functional version.
                 15SEP09 - v1.00
***************************** Rexx ***********************************/
PARSE ARG umod_list InParms                  /* Place arguments here */

IF WORDPOS(umod_list,'-h -H') > 0 THEN CALL DISPLAY_HELP
CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
CALL READ_USERMOD_CNTL umod_list

applyed.=""
DO i=1 TO WORDS(trgt_zone.0)
   CALL CHECK_TRGT_CSI WORD(trgt_zone.0,i) global_DSN
END

Rc=MAX(CHECK_FOR_MISSING_USERMODS(),CHECK_FOR_EXTRA_USERMODS())

IF Rc > 0 THEN ExitError=FAIL_RC

EXIT ExitError
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0      /* REXX functional values for TRUE and FALSE   */
                       /* Initialize and process non-Positional parms */
  ValidParms="FAIL_RC(4) TEST(O)"
  MatchLength=3        /* NP-Parms match on first # chars             */
  AcceptAll=FALSE      /* Allow un-recognized NP-PARMS to be passed   */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  ExitError=0
  SYSMSGLVL1=""; SYSMSGLVL2=""
  Lower="abcdefghijklmnopqrstuvwxyz"; Upper="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  PARSE SOURCE . . rname .          /* Get REXX EXEC name             */
  jname=MVSVAR("SYMDEF","JOBNAME")

RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i = 1 TO SOURCELINE() UNTIL SOURCELINE(i + 2) = 'EXEC History'     /*COPY*/
     source.i = SOURCELINE(i + 1)   /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i = 1 TO i; SAY source.i; END /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i = 1 TO i     /* Build HELP table to display                 *//*COPY*/
        source = source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"            /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK = CENTER("----> END of Help <----",80)                     /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList = ValidParms ' '; InList = InParms ' '                         /*COPY*/
  ParmList = ''; ParmErrorList = ''                                     /*COPY*/
                                                                        /*COPY*/
  DO linx = 1 TO WORDS(ValidParms) UNTIL VpList = ''                    /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList = ParmList STRIP(LEFT(parm.linx,MatchLength))             /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm = STRIP(parm)                                                 /*COPY*/
     ParmNumber = WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)      /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber = value                  /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList = ParmErrorList parm"("value                    /*COPY*/
     ELSE ParmErrorList = ParmErrorList parm"("value")"                 /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse = STRIP(InList) ParmErrorList                       /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
      AnythingElse = STRIP(InList)                                      /*COPY*/
  END                                                                   /*COPY*/
  DO ParmInx = 1 TO linx                                                /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail = TRUE; ELSE TSO_avail = FALSE         /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/**********************************************************************
      Read in USERMOD Control file/list and initialize REXX
***********************************************************************/
READ_USERMOD_CNTL:
ARG LstDsn . 1 LstPds . "(" LstMbr ")" .

  IF ¬(MEMBER_EXISTS(LstMbr LstPds)) THEN DO
     CALL SET_MSG "Invalid List DSN!", "'"LstDsn"' is not a valid",
                  "USERMOD List DSN, you must provide one!", "YES"
     EXIT 12
  END
  x=BPXWDYN("ALLOC DD(USERMODS) DSN('"LstDsn"') SHR REUSE")
  ok='0';ADDRESS "MVS" "EXECIO * DISKR USERMODS (STEM usermods. FINIS"
  x=BPXWDYN("FREE DD(USERMODS)")

  trgt_zone.=""; check_list=""
  DO j=1 TO usermods.0
     PARSE VALUE usermods.j WITH _1st_ _2nd_ rest
     SELECT
       WHEN ABBREV(_1st_, "/*")           THEN ITERATE j
       WHEN ABBREV(_1st_, "GLOBAL_CSI")   THEN global_DSN=_2nd_
       WHEN INDEX(trgt_zone.0, _1st_) = 0 THEN DO
           trgt_zone.0=trgt_zone.0 _1st_
           trgt_zone._1st_=trgt_zone._1st_ _2nd_
           check_list=check_list _2nd_
         END
       WHEN INDEX(trgt_zone.0, _1st_) > 0 THEN DO
           trgt_zone._1st_=trgt_zone._1st_ _2nd_
           check_list=check_list _2nd_
         END
     OTHERWISE; NOP; END
  END
RETURN
/* COPY MBREXIST */
/********************************************************************** /*COPY*/
   Check Member for existance in a PDS under MVS ...                    /*COPY*/
***********************************************************************//*COPY*/
MEMBER_EXISTS:                                                          /*COPY*/
ARG ChckMbr ChckDsn .                                                   /*COPY*/
  _EOD_='FFFFFFFFFFFFFFFF'x                 /* End Of Directory       *//*COPY*/
  x=BPXWDYN("ALLOC DD(CHCKDD) DSN("ChckDsn") SHR REUSE" ,               /*COPY*/
              "DSORG(PS) RECFM(F) LRECL(256) BLKSIZE(0)")               /*COPY*/
    ADDRESS "MVS" "EXECIO * DISKR CHCKDD (STEM dir. FINIS"              /*COPY*/
  x=BPXWDYN("FREE DD(CHCKDD)")              /* Free file              *//*COPY*/
  DO blk=1 TO dir.0                         /* Loop through Directory *//*COPY*/
     i=3                                    /* Skip past used bytes   *//*COPY*/
     DO WHILE i < C2D(LEFT(dir.blk,2))                                  /*COPY*/
        mem=SUBSTR(dir.blk,i,8)             /* Get member name        *//*COPY*/
        IF mem = ChckMbr THEN RETURN TRUE   /* Found, we are done     *//*COPY*/
        IF mem = _EOD_   THEN LEAVE blk     /* We are finished        *//*COPY*/
        ttr=C2D(SUBSTR(dir.blk,i+8,3))      /* Member TTR             *//*COPY*/
        len=C2D(BITAND(SUBSTR(dir.blk,i+11,1),'1F'x))*2                 /*COPY*/
        i=i+len+12                          /* Go to Next Dir Entry   *//*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN FALSE                                                            /*COPY*/
/**********************************************************************
      Check TARGET CSI for APPLYed USERMODs
***********************************************************************/
CHECK_TRGT_CSI:
ARG zonenm csinm .
  entry   ="SYSMOD"
  subentry="ENAME,INSTALLDATE,INSTALLTIME"
  filter  ="APPLY='YES'&SMODTYPE='USERMOD'"
  x=BPXWDYN("ALLOC DD(SYSPRINT) NEW REUSE UNIT(VIO)",
            "TRACKS SPACE(1,15) RECFM(F,B) LRECL(132)")
  x=SMPQASM(csinm,zonenm,entry,subentry,filter)
  ok='0';ADDRESS "MVS" "EXECIO * DISKR SYSPRINT (STEM smpe_rpt. FINIS"
  x=BPXWDYN("FREE DD(SYSPRINT)")

  DO j=3 TO smpe_rpt.0 UNTIL ABBREV(smpe_rpt.j, "-----"); NOP; END
  DO j=j+1 TO smpe_rpt.0
     PARSE VALUE smpe_rpt.j WITH before ": " after .
     SELECT
       WHEN ABBREV(before, "-----" )         THEN ITERATE j
       WHEN ABBREV(before, "SYSMOD")         THEN DO
           this_sysmod=after
           applyed.0=applyed.0 this_sysmod
           applyed.ZONE.this_sysmod=zonenm
         END
       WHEN ABBREV(before, "ZONE")           THEN ITERATE j
       WHEN ABBREV(before, "   INSTALLDATE") THEN
           applyed.INSTALL.this_sysmod=after
       WHEN ABBREV(before, "   INSTALLTIME") THEN
           applyed.INSTALL.this_sysmod=applyed.INSTALL.this_sysmod after
     OTHERWISE; NOP; END
  END
RETURN
/**********************************************************************
      Check USERMODS in USERMOD List that are not APPLYed
***********************************************************************/
CHECK_FOR_MISSING_USERMODS:
  missing=0
  DO i=1 TO WORDS(check_list)
     _umod=WORD(check_list, i)
     IF INDEX(applyed.0, _umod) > 0 THEN DO
        SAY "      " _umod "APPLYed on" applyed.INSTALL._umod "to",
                                        applyed.ZONE._umod
        ITERATE i
     END
     missing=missing + 1
     SAY " ====>" _umod "was not APPLYed to any TZONE in '"global_DSN"'!"
  END
RETURN missing
/**********************************************************************
      Check APPLYed USERMODS that are not in the USERMOD List
***********************************************************************/
CHECK_FOR_EXTRA_USERMODS:
  extra=0
  DO i=1 TO WORDS(applyed.0)
     _umod=WORD(applyed.0, i)
     IF INDEX(check_list, _umod) > 0 THEN ITERATE i
     extra=extra+1
     SAY " ====>" _umod "was APPLYed in TZONE:" applyed.ZONE._umod,
         "but is not in the USERMOD Control List!"
  END
RETURN extra
/**********************************************************************
            Cleanup and Exit Gracefully
***********************************************************************/
CLEANUP:
  ok='*'                               /* Ignore all non-0 RCs        */
    x=BPXWDYN("FREE DD(USERMODS)")
    x=BPXWDYN("FREE DD(SYSPRINT)")
    ADDRESS "ISPEXEC" "FTCLOSE"        /* Close File Tailoring DSN    */
    ZISPFRC=ExitError                  /* Initialize ISPF RC Variable */
    ADDRESS "ISPEXEC" "VPUT (ZISPFRC)" /* Set ISPF RC to error RC     */
EXIT ExitError                         /* Set TSO/MVS RC to error RC  */
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults = ""                                                   /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults = STRIP(eresults "NL ===>" eresult)                 /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype   = CONDITION('C')          /* Condition causing error        *//*COPY*/
  sourcel = SOURCELINE(elineno)     /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel = LEFT(sourcel,72)     /*COPY*/
  sourcel = STRIP(sourcel)                                              /*COPY*/
  DO e_i = 1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)               /*COPY*/
     nextl = SOURCELINE(elineno + e_i)                                  /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl = LEFT(nextl,72)        /*COPY*/
     sourcel = STRIP(sourcel,'T',',') STRIP(nextl)                      /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause  = ERRORTEXT(RC)       /* Brief description of error     */ /*COPY*/
     expandl = "Can't INTERPRET source with SYNTAX errors!"             /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst = "ADDRESS CALL INTERPRET SAY"                                 /*COPY*/
     ecause  = CONDITION('D')       /* Brief description of error     *//*COPY*/
     FullLine = sourcel             /* Begin getting EXECuted source  *//*COPY*/
     expandl = ""                                                       /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN INDEX(srcl,"=")           > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals = VALUE(srcl); END                             /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl = expandl';' evals                                      /*COPY*/
     END                                                                /*COPY*/
     expandl = STRIP(STRIP(expandl,"L",";"))                            /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN                /*COPY*/
          emsg = ZERRLM                                                 /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF SYMBOL('SYSMSGLVL2') = 'VAR'                THEN                /*COPY*/
          emsg = SYSMSGLVL1 "--" SYSMSGLVL2                             /*COPY*/
     ELSE emsg = SYSMSGLVL1                                             /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0       THEN                /*COPY*/
          emsg = "SYSREASON: '"SYSREASON"'"                             /*COPY*/
  IF etype = 'NOVALUE' THEN ExitError = 4    /* Set EXIT error level  *//*COPY*/
     ELSE ExitError = RC                                                /*COPY*/
  erc = ExitError       /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresult = 1 TO eresult.0; PARSE PULL eresult.eresult; END          /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC = ExitError               /* SET ISPF RC to ExitError       *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitError                      /* EXIT with error return code    *//*COPY*/
