/***************************** REXX ***********************************
 This REXX determines various system Concatenations, allocates them,
      and then opens the DD for management using the MU (Member
      Utility) REXX. Currently supported System Concatenation are:
          JOBlibs  - The STC JOBs libraries from JES2/MSTJCL00
          PARMlibs - The System PARMLIB Concatenation at IPL Time
          PROClibs - The STC & default PROCLIBs from JES2/MSTJCL00
          PROCMstr - The STC sub=MSTR PROCLIBs from MSTJCL00

                           --- EXAMPLE ---
TSO <%>EDITLIBS LIB_Type <MEMBERS(member_filter)> <TEST(TraceOption)>
TSO <%>EDITLIBS -H -- To display help for this REXX

  Arguments: LIB_Type    - Type of System Concatenation to be managed.
             InParms     - Non-Positional parameters
 ----------------------------- NP-PARMS -------------------------------
                 MEMBERS - Member Filter to use against Concatenation
                    TEST - Used to control traces

      Files: System PARMLIB, PROCLIB, and STCJOBS libraries
Other EXECS: CALLs MU (Member Utility) against the DD.

EXEC History

 REXX EXEC Name: EDITLIBS
         Author: AL FERGUSON - TS ADM (TSAZFA)
         Writen: 11AUG16
        History: 28SEP17 - v1.30 - Minor Refactoring
                 15AUG17 - v1.28 - PROClibs returns JES PROC00 & MSTJCL00
                           IEFPDSI. PROCMstr returns MSTJCL00 IEFPDSI.
                           JOBs returns JES PROC00, MSTJCL00 IEFPDSI,
                           & MSTJCL00 IEFJOBS.
                 14AUG17 - v1.23 - Add support for JES2 PROCLIB
                           PROC00 Concatination.
                 14AUG17 - v1.21 - Add view option for fully
                           specified members.
                 14AUG17 - v1.19 - Refactoring for perfomance.
                 06FEB17 - v1.11 - Pick up updated version or ERRINFO
                           Common Code routines.
                 01FEB17 - v1.10 - Mass update to pickup Error
                           Handling Fixes.
                 31JAN17 - v1.09 - Update all REXXes with latest
                           common routines via %CCMASS
                 16AUG16 - v1.07 - First functioning version with
                           PARMLIB, PROCLIB, JOBLIB, & STCLIB support.
                 11AUG16 - v1.0
***************************** Rexx ***********************************/
MsgStat=MSG("OFF")
ARG LIB_Type InParms                         /* Place arguments here */

IF WORDPOS(LIB_Type,'-h -H') > 0 THEN CALL DISPLAY_HELP
CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
CALL DIGEST_MSTJCL GET_MSTJCL()

SELECT
  WHEN ABBREV(LIB_Type,"PARM")  THEN CALL GET_PARMLIBS
  WHEN ABBREV(LIB_Type,"PROCM") THEN CALL GET_MSTRPROC
  WHEN ABBREV(LIB_Type,"PROC")  THEN CALL GET_JESPROC
  WHEN ABBREV(LIB_Type,"JOB")   THEN CALL GET_JOBLIBS
OTHERWISE
  CALL SET_MSG ,"'"LIB_Type"' NOT supported at this time.","NO"
  EXIT 1
END

LIB_DD="@@@"TIME("S")
x=ALLOC_DD(LIB_DD)
SELECT
  WHEN MEMBERS = ""             THEN CALL MU "DD:"LIB_DD
  WHEN POS('*',MEMBERS) = 0     &,
       POS('%',MEMBERS) = 0     THEN CALL VW "DD:"LIB_DD"("MEMBERS")"
OTHERWISE;                           CALL MU "DD:"LIB_DD"("MEMBERS")"; END

x=BPXWDYN("FREE DD("LIB_DD")")
DO _i_ = 2 TO Dsns.0; x=BPXWDYN("FREE DD(TMP"_i_")"); END

MsgStat=MSG(MsgStat)
EXIT ExitErr
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0                   /* Setvalues for TRUE and FALSE   */
  PARSE SOURCE . . RName . RDsn .   /* Get REXX Name & EXEC Dsn       */
  JName=MVSVAR("SYMDEF","JOBNAME")  /* Get JOB Name                   */
                                    /* Initialize NonPositional parms */
  ValidParms = "MEMBERS() TEST(O)"
  MatchLength=3                     /* NPParms match first # chars    */
  AcceptAll=FALSE                   /* Pass un-recognized NPParms?    */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  ExitErr=0
  SYSMSGLVL1 = ""; SYSMSGLVL2 = ""
  Lower="abcdefghijklmnopqrstuvwxyz";Upper="ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  IF MEMBERS = ""     THEN MEMBERS = AnythingElse

  CVT     = C2D(STORAGE(10,4))                /* point to CVT         */
  ECVT    = C2D(STORAGE(D2X(CVT+140),4))      /* point to CVTECVT     */
  ECVTIPA = C2D(STORAGE(D2X(ECVT+392),4))     /* point to IPA         */

  SYSNAME  = MVSVAR("SYSNAME")            /* zOS SysName Symbol       */
  SYSCLONE = MVSVAR("SYMDEF","SYSCLONE")  /* zOS SysClone Symbol      */
  ENVNAME  = MVSVAR("SYMDEF","ENVNAME")   /* Shop Environ Name Symbol */
  ENVCLONE = MVSVAR("SYMDEF","ENVCLONE")  /* Shop Envir Clone Symbol  */
RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i=1 TO SOURCELINE() UNTIL SOURCELINE(i+2) = 'EXEC History'         /*COPY*/
     source.i=SOURCELINE(i+1)       /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i=1 TO i; SAY source.i; END   /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i=1 TO i       /* Build HELP table to display                 *//*COPY*/
        source=source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"              /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK=CENTER("----> END of Help <----",80)                       /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList=ValidParms ' ';InList=InParms ' ';ParmList='';ParmErrorList='' /*COPY*/
                                                                        /*COPY*/
  DO linx=1 TO WORDS(ValidParms) UNTIL VpList = ''                      /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList=ParmList STRIP(LEFT(parm.linx,MatchLength))               /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm=STRIP(parm)                                                   /*COPY*/
     ParmNumber=WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)        /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber=value                    /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList=ParmErrorList parm"("value                      /*COPY*/
     ELSE ParmErrorList=ParmErrorList parm"("value")"                   /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse=STRIP(InList) ParmErrorList                         /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE; AnythingElse=STRIP(InList); END                            /*COPY*/
  DO ParmInx=1 TO linx                                                  /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail=TRUE; ELSE TSO_avail=FALSE             /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/**********************************************************************
      Digest MSTJCL00 to GET PROCLIB (IEFPDSI) & STCJOBS (IEFJOBS)
***********************************************************************/
DIGEST_MSTJCL:
ARG MstrJcl .
  x=BPXWDYN("ALLOC DD(MSTJCL00) DSN("MstrJcl") SHR REUSE")
    IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "ALLOC MSTJCL00" MstrJcl)
  ok='0';ADDRESS "MVS" "EXECIO * DISKR MSTJCL00 (STEM MstJcl. FINIS"
  x=BPXWDYN("FREE DD(MSTJCL00)")
    IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "FREE MSTJCL00")
  IEFPDSI. = "";IEFPDSI.0 = 0; IEFJOBS. = "";IEFJOBS.0 = 0
  DO i=1 TO MstJcl.0
     SELECT
       WHEN ABBREV(MstJcl.i,"//IEFPDSI ") THEN DO
          j=1; PARSE VALUE MstJcl.i WITH . 'DSN=' IEFPDSI.j . ','
          DO i=i+1 TO MstJcl.0 WHILE ABBREV(MstJcl.i,"// ")
             j=j+1; PARSE VALUE MstJcl.i WITH . 'DSN=' IEFPDSI.j . ','
          END
          IEFPDSI.0=j; i=i-1
         END
       WHEN ABBREV(MstJcl.i,"//IEFJOBS ") THEN DO
          j=1; PARSE VALUE MstJcl.i WITH . 'DSN=' IEFJOBS.j . ','
          DO i=i+1 TO MstJcl.0 WHILE ABBREV(MstJcl.i,"// ")
             j=j+1; PARSE VALUE MstJcl.i WITH . 'DSN=' IEFJOBS.j . ','
          END
          IEFJOBS.0=j; i=i-1
         END
     OTHERWISE; NOP; END
  END
RETURN
/**********************************************************************
      Get PROCLIB Concatenation from zOS System Memory & MSTJCL
***********************************************************************/
GET_MSTJCL:
  IPASTOR = D2X(ECVTIPA + 2152 + (37*8))       /* point to PDE addr    */
  IPAPDE  = C2X(STORAGE((IPASTOR),8))          /* point to PDE         */
  IPAADDR = SUBSTR(IPAPDE,1,8)                 /* PARM address         */
  IPALEN  = X2D(SUBSTR(IPAPDE,9,4))            /* PARM length          */
  IPAPRM  = "MSTJCL"||STORAGE((IPAADDR),IPALEN)
  CALL GET_PARMLIBS
  DO i=1 TO Dsns.0
     IF SYSDSN("'"Dsns.i.DSN"("IPAPRM")'")="OK" THEN LEAVE i
  END
RETURN "'"Dsns.i.DSN"("IPAPRM")'"
/**********************************************************************
      Get PARMLIB Concatenation from zOS System Memory
***********************************************************************/
GET_PARMLIBS:
  IPAPLNUMX = STORAGE(D2X(ECVTIPA+2134),2)    /* number of parmlibs   */
  Dsns. = "";Dsns.0 = C2D(IPAPLNUMX)
  Dsns.0.DSN = STRIP(STORAGE(D2X(ECVTIPA+48),44))   /* loadparm dsn   */
  POFF = 0
  DO p=1 TO Dsns.0
     PARSE VALUE STORAGE(D2X(ECVTIPA+416+POFF),63) WITH Dsns.p.DSN Dsns.p.VOL .
     POFF=POFF+64
  END
RETURN
/**********************************************************************
      Get PROCLIB Concatenation from zOS System Memory & MSTJCL
***********************************************************************/
GET_MSTRPROC:
  Dsns.="";Dsns.0=IEFPDSI.0
  DO i=1 TO IEFPDSI.0
     IF INDEX(IEFPDSI.i,"&SYS") = 0 THEN Dsns.i.DSN = IEFPDSI.i
     ELSE DO
        PARSE VALUE IEFPDSI.i WITH before '&SYSNAME.' after
        Dsns.i.DSN = before||SYSNAME||after
     END
  END
RETURN
/**********************************************************************
      Get JES2 PROCLIB Concatination from JES2 PROC & PARM
***********************************************************************/
GET_JESPROC:
  CALL GET_MSTRPROC
  ProcFound=FALSE
  DO i=1 TO Dsns.0
     IF SYSDSN("'"Dsns.i.DSN"(JES2)'")¬="OK" THEN ITERATE i
     ProcFound=TRUE; LEAVE i
  END
  IF ProcFound THEN DO
     CALL DIGEST_JESPROC "'"Dsns.i.DSN"(JES2)'"
     Dsns.="";Dsns.0=PROC00.0
     DO i=1 TO PROC00.0
        SELECT
          WHEN INDEX(PROC00.i,"&SYS")      = 0 &,
               INDEX(PROC00.i,"&ENV")      = 0 THEN Dsns.i.DSN=PROC00.i
          WHEN INDEX(PROC00.i,"&SYSNAME")  > 0 THEN DO
             PARSE VALUE PROC00.i WITH before '&SYSNAME.' after
             Dsns.i.DSN = before||SYSNAME||after
            END
          WHEN INDEX(PROC00.i,"&SYSCLONE") > 0 THEN DO
             PARSE VALUE PROC00.i WITH before '&SYSCLONE.' after
             Dsns.i.DSN = before||SYSCLONE||after
            END
          WHEN INDEX(PROC00.i,"&ENVNAME")  > 0 THEN DO
             PARSE VALUE PROC00.i WITH before '&ENVNAME.' after
             Dsns.i.DSN = before||ENVNAME||after
            END
          WHEN INDEX(PROC00.i,"&ENVCLONE") > 0 THEN DO
             PARSE VALUE PROC00.i WITH before '&ENVCLONE.' after
             Dsns.i.DSN = before||ENVCLONE||after
            END
        OTHERWISE; NOP; END
     END
    END
  ELSE CALL SET_MSG ,"JES2 PROC not found! Displaying MSTJCL PROCLIBs.","YES"
RETURN
/**********************************************************************
      Digest JES PROC from MSTJCL PROCLIB Concatination
***********************************************************************/
DIGEST_JESPROC:
ARG JesProcDsn .
  x=BPXWDYN("ALLOC DD(JESPROC)  DSN("JesProcDsn") SHR REUSE")
    IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "ALLOC MSTJCL00" JesProcDsn)
  ok='0';ADDRESS "MVS" "EXECIO * DISKR JESPROC (STEM JesProc. FINIS"
  x=BPXWDYN("FREE DD(JESPROC)")
    IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "FREE JESPROC")
  PROC00. = "";PROC00.0 = 0
  DO i=1 TO JesProc.0
     IF ¬(ABBREV(JesProc.i,"//PROC00 ")) THEN ITERATE i

     j=1; PARSE VALUE JesProc.i WITH . 'DSN=' PROC00.j . ','
     DO i=i+1 TO JesProc.0 WHILE ABBREV(JesProc.i,"// ") |,
                                 ABBREV(JesProc.i,"//*")
        IF ABBREV(JesProc.i,"//*") THEN ITERATE i
        j=j+1; PARSE VALUE JesProc.i WITH . 'DSN=' PROC00.j . ','
     END
     PROC00.0=j; LEAVE i
  END
RETURN
/**********************************************************************
      Get PROCLIB Concatenation from zOS System Memory & MSTJCL
***********************************************************************/
GET_JOBLIBS:
  CALL GET_JESPROC
  j=Dsns.0; Dsns.0=Dsns.0+IEFPDSI.0+IEFJOBS.0
  DO i=1 TO IEFJOBS.0
     j=j+1
     IF INDEX(IEFJOBS.i,"&SYS") = 0 THEN Dsns.j.DSN = IEFJOBS.i
     ELSE DO
        PARSE VALUE IEFJOBS.i WITH before '&SYSNAME.' after
        Dsns.j.DSN = before||SYSNAME||after
     END
  END
  DO i=1 TO IEFPDSI.0
     j=j+1
     IF INDEX(IEFPDSI.i,"&SYS") = 0 THEN Dsns.j.DSN = IEFPDSI.i
     ELSE DO
        PARSE VALUE IEFPDSI.i WITH before '&SYSNAME.' after
        Dsns.j.DSN = before||SYSNAME||after
     END
  END
RETURN
/*---------------------------------------------------------------------*
                Use BPXWDYN to update DD Concatenations
 *---------------------------------------------------------------------*/
ALLOC_DD:
ARG DdName .
  DdList = DdName; DsnList = Dsns.1.DSN
  IF Dsns.1.VOL = "" THEN DsnSpec = "DSN("Dsns.1.DSN")"
     ELSE                 DsnSpec = "DSN("Dsns.1.DSN") VOL("Dsns.1.VOL")"
  x=BPXWDYN("ALLOC DD("DdName") SHR REUSE" DsnSpec)
    IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "ALLOC" DdName Dsns.1.DSN)
  DO i=2 TO Dsns.0
     IF WORDPOS(Dsns.i.DSN,DsnList) > 0 THEN ITERATE i
     DsnList = DsnList Dsns.i.DSN
     IF Dsns.i.VOL = "" THEN DsnSpec = "DSN("Dsns.i.DSN")"
        ELSE                 DsnSpec = "DSN("Dsns.i.DSN") VOL("Dsns.i.VOL")"
     x=BPXWDYN("ALLOC DD(TMP"i") SHR REUSE" DsnSpec)
       IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "ALLOC TMP"i  Dsns.1.DSN)
     DdList = DdList",TMP"i
  END
  IF Dsns.0 > 1 THEN DO
     x=BPXWDYN("CONCAT DdList("DdList")")
       IF x ¬= 0 THEN EXIT BPXWDYN_ERR(x "CONCAT" DdName DdList)
  END
RETURN DdList
/*---------------------------------------------------------------------*
      Display BPXWDYN error information for non-zero Return Codes
 *---------------------------------------------------------------------*/
BPXWDYN_ERR:
PARSE ARG BPXWDYN_rc arg2 arg3
  SAY RIGHT(arg2,7) "of:" arg3
  IF BPXWDYN_rc > 0 THEN DO
     PARSE VALUE RIGHT(D2X(BPXWDYN_rc),8,"0") WITH dyn_EC 5 dyn_RC .
     SAY RIGHT(arg2,7) "RC:" BPXWDYN_rc "("dyn_EC dyn_RC")"
    END
  ELSE DO
     dyn_EC = ABS(BPXWDYN_rc); SAY RIGHT(arg2,7) "RC:" BPXWDYN_rc
  END
  IF SYMBOL("S99MSG.0")="VAR" THEN DO i=1 TO S99MSG.0;SAY "  "S99MSG.i;END
RETURN dyn_EC
/**********************************************************************
      Cleanup and exit gracefully
***********************************************************************/
CLEANUP:
ok='*'
  x=BPXWDYN("FREE DD(MSTJCL00)")
  x=BPXWDYN("FREE DD("LIB_DD")")
  DO _i_ = 2 TO Dsns.0; x=BPXWDYN("FREE DD(TMP"_i_")"); END
  ZISPFRC = ExitErr                 /* SET ISPF RC to ExitErr         */
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"
RETURN ExitErr
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno=sigl                      /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults=""                                                     /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults=STRIP(eresults "NL ===>" eresult)                   /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype=CONDITION('C')              /* Condition causing error        *//*COPY*/
  sourcel=SOURCELINE(elineno)       /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel=LEFT(sourcel,72)       /*COPY*/
  sourcel=STRIP(sourcel)                                                /*COPY*/
  DO e_i=1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)                 /*COPY*/
     nextl=SOURCELINE(elineno + e_i)                                    /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl=LEFT(nextl,72)          /*COPY*/
     sourcel=STRIP(sourcel,'T',',') STRIP(nextl)                        /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause=ERRORTEXT(RC)          /* Brief description of error     */ /*COPY*/
     expandl="Can't INTERPRET source with SYNTAX errors!"               /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst="ADDRESS CALL INTERPRET SAY"                                   /*COPY*/
     ecause=CONDITION('D')          /* Brief description of error     *//*COPY*/
     FullLine=sourcel               /* Begin getting EXECuted source  *//*COPY*/
     expandl=""                                                         /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN POS("=",srcl)             > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals=VALUE(srcl); END                               /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl=expandl';' evals                                        /*COPY*/
     END                                                                /*COPY*/
     expandl=STRIP(STRIP(expandl,"L",";"))                              /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN emsg=ZERRLM    /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
             emsg='No available ERROR description.'                     /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
             emsg='No available ERROR description.'                     /*COPY*/
    WHEN SYMBOL('SYSMSGLVL2') = 'VAR'               THEN                /*COPY*/
             emsg=SYSMSGLVL1 "--" SYSMSGLVL2                            /*COPY*/
  OTHERWISE; emsg=SYSMSGLVL1; END                                       /*COPY*/
  IF POS("IN VARIABLE SYSREASON",emsg) > 0          THEN                /*COPY*/
             emsg="SYSREASON: '"SYSREASON"'"                            /*COPY*/
  IF etype = 'NOVALUE' THEN ExitErr=4        /* Set EXIT error level  *//*COPY*/
     ELSE                   ExitErr=RC                                  /*COPY*/
  erc=ExitErr           /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult.="";eresult.0=QUEUED() /* Get info currently on STACK       *//*COPY*/
  DO eresult=1 TO eresult.0; PARSE PULL eresult.eresult; END            /*COPY*/
  ls=LINESIZE()                     /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2=ls; ELSE ls2=ls-30                               /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults=2 TO eresult.0                                            /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC=ExitErr                   /* SET ISPF RC to ExitErr         *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitErr                        /* EXIT with error return code    *//*COPY*/
