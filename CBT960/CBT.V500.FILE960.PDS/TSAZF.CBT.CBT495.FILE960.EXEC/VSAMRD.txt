/***************************** REXX ***********************************
 This REXX is used to test out IGGCSI00 (the Catalog Search Interface)
      programming. This REXX does not require TSO, i.e. it can run
      under the IRXJCL Batch interface.
 This REXX reteives information on VSAM File via CSI and creates two
      sets of IDCAMS Control cards:
      DELETEME DD -- IDCAMS Delete Cards to cleanup existing DSNs
      DEFINEME DD -- IDCAMS Define Cards to redefine new DSNs

                           --- EXAMPLE ---
<TSO> <%>VSAMRDEF DsnLevel <TEST(TraceOption)>
<TSO> <%>VSAMRDEF -H -- To display help for this REXX

  Arguments: DsnLevel    - The DSN Level to search for VSAM Datasets Under
             InParms     - Non-Positional parameters
 ----------------------------- NP-PARMS -------------------------------
                 CATALOG - Catalog to do search against. default: blank
                  FIELDS - Catalog Fields to display.
                           default: VOLSER DEVTYP
                    TEST - Used to control traces

      Files: Input data is pulled from the System Catalog STC
         DD  DELETEME - pre-allocated DD for IDCAMS DELETE statements
         DD  DEFINEME - pre-allocated DD for IDCAMS DEFINE statements
Other EXECS: NONE

EXEC History

 REXX EXEC Name: VSAMRDEF
         Author: AL FERGUSON - TS ADM (TSAZFA) from version 1.14
                 FERGUSON AL (HUL2353)
        Written: 22JAN09
        History: 06FEB17 - v1.16 - Pick up updated version or ERRINFO
                           Common Code routines.
                 01FEB17 - v1.15 - Mass update to pickup Error
                           Handling Fixes.
                 31JAN17 - v1.14 - Update all REXXes with latest
                           common routines via %CCMASS
                 03MAR09 - v1.09 - Most VSAM Plus AIX, PATH, and
                           Associated Names.
                 03MAR09 - v1.06 - Most VSAM Attributes retrieved.
                 22JAN09 - v1.00 - based off IGGCTEST REXX

***************************** Rexx ***********************************/
ADDRESS "MVS" "SUBCOM TSO"                /* Is TSO available?       */
IF RC = 0 THEN MsgStat=MSG("OFF")
ARG DsnLevel InParms                      /* Place arguments here    */

SELECT
  WHEN WORDPOS(DsnLevel,'-h -H') > 0 THEN CALL DISPLAY_HELP
  WHEN DsnLevel = ""                  THEN DO
     CALL SET_MSG "DSN Filter needed!",,
          "This needs a Dataset Name filter to find information on!", "YES"
     EXIT 4
    END
OTHERWISE
    CALL INITIALIZE_THIS_REXX
END
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
/********************************************************************/
/*  SET UP LOOP FOR RESUME (IF A RESUME IS NCESSARY)                */
/********************************************************************/
CATNAMET = ''; DNAMET   = ''
DO UNTIL RESUME ¬= 'Y'
   ok='*';ADDRESS "LINKPGM" "IGGCSI00 MODRSNRC CSIFIELD DWORK"
   IF RC ¬= 0 THEN CALL DISPLAY_IGGCSI_ERROR

   RESUME = SUBSTR(CSIFIELD,150,1)    /* GET RESUME FLAG FOR NEXT LOOP */
   PARSE VALUE DWORK WITH CSIUSRLN +4 CSIREQLN +4 CSIUSDLN +4 CSINUMFD +2 rest
   CSIUSRLN = C2D(CSIUSRLN)           /* Total Length of WORK AREA     */
   CSIREQLN = C2D(CSIREQLN)           /* Minimum Required Work         */
   CSIUSDLN = C2D(CSIUSDLN)           /* GET AMOUNT OF WORK AREA USED  */
   CSINUMFD = C2D(CSINUMFD)           /* Number of field names +1      */
   rest = LEFT(rest, CSIUSDLN-14)
   /********************************************************************/
   /*  PROCESS DATA RETURNED IN WORK AREA                              */
   /********************************************************************/
   DO WHILE LENGTH(rest) > 49         /* DO UNTIL ALL DATA IS PROCESSED*/
      CALL PARSE_DSN
      IF CSICTYPE = '0' THEN CATNAMET = CSICNAME
      ELSE DO
         _type = SET_DSN_TYPE()
     /*  We now have NAME AND TYPE ... Get additional Info         */
         start_at = 2*fld.0; fld_start = 1
         lengths = SUBSTR(rest,1,start_at)
         fld_list = SUBSTR(rest,start_at+1,CSICRETM-(start_at+4))
         rest = SUBSTR(rest,CSICRETM-3)
         IF DNAMET = CSICNAME THEN ITERATE; ELSE DNAMET = CSICNAME
         DO i = 1 TO fld.0
            fld.i.totln = C2D(SUBSTR(lengths,((i*2)-1),2))
            fld.i.list = SUBSTR(fld_list,fld_start,fld.i.totln)
            fld_start = fld_start + fld.i.totln
         END
         SELECT
           WHEN ABBREV(_type, "CLUS") THEN DO
              IF SYMBOL('_output') = "VAR" THEN SAY ""
              _output = "CLUSTER" CSICNAME
              IF LENGTH(fld.2.list) > 2 THEN DO
                 _output = _output "STORCLAS("SUBSTR(fld.2.list,3)")"
                 _sms_ = TRUE
                END
              ELSE _sms_ = FALSE
              IF LENGTH(fld.3.list) > 2 THEN _output = _output,
                                       "MGMTCLAS("SUBSTR(fld.3.list,3)")"
              IF LENGTH(fld.4.list) > 2 THEN _output = _output,
                                       "DATACLAS("SUBSTR(fld.4.list,3)")"
              IF LDS THEN _output = _output "LIN"
              SAY _output
              x = fld.15.totln/fld.15.ln
              DO i = 1 TO x - 1
                 SAY "  ====>",
                     SUBSTR(fld.15.list,((i-1)*fld.15.ln)+1,fld.15.ln)
              END
              _output = "  ====>",
                        SUBSTR(fld.15.list,((x-1)*fld.15.ln)+1,fld.15.ln)
             END
           WHEN ABBREV(_type, "DATA") THEN DO
              IF _sms_ THEN _output = "   DATA" CSICNAME
              ELSE DO
                 y = SUBSTR(fld.1.list,1,fld.1.ln)
                 DO i = 2 TO (fld.1.totln/fld.1.ln)
                    y = y SUBSTR(fld.1.list,((i-1)*fld.1.ln)+1,fld.1.ln)
                 END
                 _output = "   DATA" CSICNAME "VOLUMES("y")"
              END
              _output = _output SET_SPACOPTN(fld.5.list),
                     || SET_ATTR1(fld.8.list) SET_ATTR2(fld.9.list),
                     || SET_VSAMTYPE(fld.10.list),
                       "CISZ("C2D(LEFT(fld.12.list,4))")",
                       "RECSZ("C2D(fld.13.list) C2D(RIGHT(fld.12.list,4))")"
             END
           WHEN ABBREV(_type, "INDE") THEN DO
              IF _sms_ THEN _output = "  INDEX" CSICNAME
              ELSE DO
                 y = SUBSTR(fld.1.list,1,fld.1.ln)
                 DO i = 2 TO (fld.1.totln/fld.1.ln)
                    y = y SUBSTR(fld.1.list,((i-1)*fld.1.ln)+1,fld.1.ln)
                 END
                 _output = "  INDEX" CSICNAME "VOLUMES("y")"
              END
              _output = _output SET_SPACOPTN(fld.5.list),
                        SET_ATTR2(fld.9.list) || SET_AMDKEY(fld.10.list),
                       "CISZ("C2D(LEFT(fld.12.list,4))")",
                       "RECSZ("C2D(fld.13.list) C2D(RIGHT(fld.12.list,4))")"
             END
           WHEN ABBREV(_type, "AIX")  THEN DO
              SAY "    AIX" CSICNAME
              x = fld.15.totln/fld.15.ln
              DO i = 1 TO x - 1
                 SAY "  ====>",
                     SUBSTR(fld.15.list,((i-1)*fld.15.ln)+1,fld.15.ln)
              END
              _output = "  ====>",
                        SUBSTR(fld.15.list,((x-1)*fld.15.ln)+1,fld.15.ln)
             END
           WHEN ABBREV(_type, "PATH") THEN _output = "   PATH" CSICNAME
         OTHERWISE; NOP; END
         SAY _output
      END
   END
END

ok='*';ADDRESS "MVS" "SUBCOM TSO"          /* Is TSO available?       */
IF RC = 0 THEN MsgStat=MSG(MsgStat)
EXIT ExitError
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0      /* REXX functional values for TRUE and FALSE   */
                       /* Initialize and process non-Positional parms */
  ValidParms = "CATALOG() TEST(O)",
                "FIELDS(VOLSER STORCLAS MGMTCLAS DATACLAS",
                       "SPACOPTN PRIMSPAC SCONSPAC ATTR1 ATTR2",
                       "VSAMTYPE AMDKEY AMDCIREC LRECL RGATTR NAME)"
  MatchLength = 3      /* NP-Parms match on first # chars             */
  AcceptAll = FALSE    /* Allow un-recognized NP-PARMS to be passed   */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  NbrSubmited = 0
  SYSUID = USERID()
  UserPrefix = LEFT(SYSUID,4)
  ExitError = 0; SqlError = 0
  SYSMSGLVL1 = ""; SYSMSGLVL2 = ""
  Lower = "abcdefghijklmnopqrstuvwxyz"
  Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

        /* Initial variables used by IGGCSI interface                  */
  MODRSNRC = LEFT(' ',4)              /*   CLEAR MODULE/RETURN/REASON  */
  CSIFILTK = LEFT(STRIP(DsnLevel,"B","'"),44) /*MOVE FILTER KEY INTO LIST */
  CSICATNM = LEFT(CATALOG,44)         /*   CLEAR CATALOG NAME          */
  CSIRESNM = LEFT(' ',44)             /*   CLEAR RESUME NAME           */
  CSIDTYPS = LEFT('CGR',16)           /*   Get these entry types       */
  CSICLDI  = 'Y'                      /*   INDICATE DATA AND INDEX     */
  CSIRESUM = LEFT(' ',1)              /*   CLEAR RESUME FLAG           */
  CSIS1CAT = LEFT(' ',1)              /*   INDICATE SEARCH > 1 CATALOGS*/
  CSIOPTNS = LEFT(' ',1)              /*   CLEAR RESERVE CHARACTER     */
  fld. = ""; fld.0 = WORDS(FIELDS)
  DO i = 1 TO fld.0
     PARSE VALUE VER_FNM(WORD(FIELDS,i)) WITH fnm fld.i.ln fld.i.ty fld.i.rp
     fld.i.nm = LEFT(fnm, 8)
  END
  CSINUMEN = X2C(RIGHT(D2X(fld.0),4,'0'))
  /********************************************************************/
  /*  BUILD THE SELECTION CRITERIA FIELDS PART OF PARAMETER LIST      */
  /********************************************************************/
  CSIOPTS  = CSICLDI ||CSIRESUM||CSIS1CAT||CSIOPTNS
  CSIFIELD = CSIFILTK||CSICATNM||CSIRESNM||CSIDTYPS||CSIOPTS||CSINUMEN
  DO i = 1 TO fld.0; CSIFIELD = CSIFIELD || fld.i.nm; END
  /********************************************************************/
  /*  INITIALIZE AND BUILD WORK ARE OUTPUT PART OF PARAMETER LIST     */
  /********************************************************************/
  WORKLEN = 64000 ; CSIUSRLN = X2C(RIGHT(D2X(WORKLEN),8,'0'))
  DWORK = CSIUSRLN || COPIES('00'X,WORKLEN-4)

  KSDS = FALSE; RRDS = FALSE; LDS = FALSE; VRRDS = FALSE

RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i = 1 TO SOURCELINE() UNTIL SOURCELINE(i + 2) = 'EXEC History'     /*COPY*/
     source.i = SOURCELINE(i + 1)   /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i = 1 TO i; SAY source.i; END /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i = 1 TO i     /* Build HELP table to display                 *//*COPY*/
        source = source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"            /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK = CENTER("----> END of Help <----",80)                     /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList = ValidParms ' '; InList = InParms ' '                         /*COPY*/
  ParmList = ''; ParmErrorList = ''                                     /*COPY*/
                                                                        /*COPY*/
  DO linx = 1 TO WORDS(ValidParms) UNTIL VpList = ''                    /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList = ParmList STRIP(LEFT(parm.linx,MatchLength))             /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm = STRIP(parm)                                                 /*COPY*/
     ParmNumber = WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)      /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber = value                  /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList = ParmErrorList parm"("value                    /*COPY*/
     ELSE ParmErrorList = ParmErrorList parm"("value")"                 /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse = STRIP(InList) ParmErrorList                       /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
      AnythingElse = STRIP(InList)                                      /*COPY*/
  END                                                                   /*COPY*/
  DO ParmInx = 1 TO linx                                                /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail = TRUE; ELSE TSO_avail = FALSE         /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/**********************************************************************
      Pull out Dataset Name information
***********************************************************************/
PARSE_DSN:
  PARSE VALUE rest WITH CSICFLG  +1 CSICTYPE +1 CSICNAME +44 CSICRETM ,
                     +2 CSICRETR +1 CSICRETN +1 rest
  CSICFLG  = C2X(CSICFLG )
  CSICRETM = C2D(CSICRETM)
  CSICRETR = C2D(CSICRETR)           /* Catalog return reason code    */
  CSICRETN = C2D(CSICRETN)           /* Catalog return code           */
RETURN
/**********************************************************************
      Expand CSICTYPE Value for Dataset Type
***********************************************************************/
VER_FNM:
ARG fnm .
  SELECT                      /* Validate Field name and assign len */
    WHEN fnm = "ACTOKEN"  THEN DO; len = 36  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "AKEYPOS"  THEN DO; len = 2   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "AMDCIREC" THEN DO; len = 8   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "AMDKEY"   THEN DO; len = 4   ; typ = "R" ; rep = 'N'; END
    WHEN fnm = "ASSOCSYM" THEN DO; len = 45  ; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "ATTR1"    THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "ATTR2"    THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "BUFSIZE"  THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "CATTR"    THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "COMPIND"  THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "COMUDSIZ" THEN DO; len = 8   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "DATACLAS" THEN DO; len = "VL"; typ = "CH"; rep = 'N'; END
    WHEN fnm = "DEVTYP"   THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "DSCBTTR"  THEN DO; len = 3   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "DSCRDT2"  THEN DO; len = 4   ; typ = "MX"; rep = 'N'; END
    WHEN fnm = "DSEXDT2"  THEN DO; len = 4   ; typ = "MX"; rep = 'N'; END
    WHEN fnm = "ENTYPE"   THEN DO; len = 1   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "ENTNAME"  THEN DO; len = 44  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "EXCPEXIT" THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "FILESEQ"  THEN DO; len = 2   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "GDGALTDT" THEN DO; len = 4   ; typ = "MX"; rep = 'N'; END
    WHEN fnm = "GDGATTR"  THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "GDGLIMIT" THEN DO; len = 1   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "GENLEVEL" THEN DO; len = 4   ; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "HARBA"    THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "HARBADS"  THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "HIKEYV"   THEN DO; len = "VL"; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "HKRBA"    THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "HURBA"    THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "HURBADS"  THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "ITYPEXT"  THEN DO; len = 1   ; typ = "BS"; rep = 'Y'; END
    WHEN fnm = "LOGPARMS" THEN DO; len = 1   ; typ = "B" ; rep = 'N'; END
    WHEN fnm = "LOGSTRID" THEN DO; len = 26  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "LOKEYV"   THEN DO; len = "VL"; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "LRECL"    THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "LTBACKDT" THEN DO; len = 8   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "MGMTCLAS" THEN DO; len = "VL"; typ = "CH"; rep = 'N'; END
    WHEN fnm = "NAME"     THEN DO; len = 44  ; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "NOBLKTRK" THEN DO; len = 2   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "NOBYTAU"  THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "NOBYTTRK" THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "NOEXTNT"  THEN DO; len = 1   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "NOTRKAU"  THEN DO; len = 2   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "NVSMATTR" THEN DO; len = 1   ; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "OPENIND"  THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "OWNERID"  THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "PASSATMP" THEN DO; len = 2   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "PASSPRMT" THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "PASSWORD" THEN DO; len = 32  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "PHYBLKSZ" THEN DO; len = 4   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "PRIMSPAC" THEN DO; len = 3   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "RECVTIME" THEN DO; len = 8   ; typ = "B" ; rep = 'N'; END
    WHEN fnm = "RECVTIMG" THEN DO; len = 8   ; typ = "B" ; rep = 'N'; END
    WHEN fnm = "RGATTR"   THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "RLSBWO"   THEN DO; len = 1   ; typ = "B" ; rep = 'N'; END
    WHEN fnm = "RLSFLAGS" THEN DO; len = 1   ; typ = "B" ; rep = 'N'; END
    WHEN fnm = "SCONSPAC" THEN DO; len = 3   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "SECFLAGS" THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "SPACOPTN" THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "STORCLAS" THEN DO; len = "VL"; typ = "CH"; rep = 'N'; END
    WHEN fnm = "STRIPCNT" THEN DO; len =  2  ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "TYPE"     THEN DO; len = 1   ; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "UDATASIZ" THEN DO; len = 8   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "USVRMDUL" THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "USERAREC" THEN DO; len = "VL"; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VOLSER"   THEN DO; len = 6   ; typ = "CH"; rep = 'Y'; END
    WHEN fnm = "VOLFLG"   THEN DO; len = 1   ; typ = "BS"; rep = 'Y'; END
    WHEN fnm = "VSAMREUS" THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "VSAMSTAT" THEN DO; len = 46  ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "VSAMTYPE" THEN DO; len = 2   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "VVRNFLGS" THEN DO; len = 2   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "XACIFLAG" THEN DO; len = 1   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "XHARBA"   THEN DO; len = 8   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "XHARBADS" THEN DO; len = 8   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "XHKRBA"   THEN DO; len = 8   ; typ = "F" ; rep = 'Y'; END
    WHEN fnm = "XHURBADS" THEN DO; len = 8   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "XHURBA"   THEN DO; len = 8   ; typ = "F" ; rep = 'Y'; END
 /* Tape Library Entry Field Names                                        */
    WHEN fnm = "LCBCONID" THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "LCBDEVTP" THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "LCBDESCR" THEN DO; len = 120 ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "LCBEMPTY" THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "LCBLIBID" THEN DO; len = 5   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "LCBLOGIC" THEN DO; len = 1   ; typ = "B" ; rep = 'N'; END
    WHEN fnm = "LCBSCRTH" THEN DO; len = 1020; typ = "F" ; rep = 'N'; END
    WHEN fnm = "LCBSLOTS" THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "LCBTHRES" THEN DO; len = 1020; typ = "F" ; rep = 'N'; END
 /* Tape Volume Entry Field Names                                         */
    WHEN fnm = "VCBCHKPT" THEN DO; len = 1   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBCRDT"  THEN DO; len = 10  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBDEVTP" THEN DO; len = 4   ; typ = "F" ; rep = 'N'; END
    WHEN fnm = "VCBEDATE" THEN DO; len = 10  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBERRST" THEN DO; len = 2   ; typ = "BS"; rep = 'N'; END
    WHEN fnm = "VCBEXPDT" THEN DO; len = 10  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBLIBNM" THEN DO; len = 44  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBLOC"   THEN DO; len = 1   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBMOUNT" THEN DO; len = 10  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBOWNER" THEN DO; len = 64  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBSGRP"  THEN DO; len = 8   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBSHELF" THEN DO; len = 32  ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBUATTR" THEN DO; len = 1   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBWPROT" THEN DO; len = 1   ; typ = "CH"; rep = 'N'; END
    WHEN fnm = "VCBWRITE" THEN DO; len = 10  ; typ = "CH"; rep = 'N'; END
  OTHERWISE
     CALL SET_MSG ,"Unsupported Field Name: '"fnm"'","YES"
     EXIT 8
  END
RETURN fnm len typ rep
/**********************************************************************
      Determine KSDS Keys, if applicable
***********************************************************************/
SET_AMDKEY:
ARG AMDKEY .
IF AMDKEY = "" THEN RETURN ""
   ELSE RETURN " KEYS("C2D(LEFT(AMDKEY,2)) C2D(RIGHT(AMDKEY,2))")"
/**********************************************************************
      Determine any additional attributes
***********************************************************************/
SET_ATTR1:
ARG ATTR1 .
  IF ATTR1 = "" THEN RETURN ""; ELSE ATTR1 = X2B(C2X(ATTR1))
  IF SUBSTR(ATTR1,1,1) THEN _attr1_ = "SPEED"; ELSE _attr1_ = ""
  IF SUBSTR(ATTR1,3,1) THEN _attr1_ = _attr1_ "RUS"
  IF SUBSTR(ATTR1,4,1) THEN _attr1_ = _attr1_ "ERASE"
RETURN "" STRIP(_attr1_)
/**********************************************************************
      Determine VSAM Share options
***********************************************************************/
SET_ATTR2:
ARG ATTR2 .
  IF ATTR2 = "" THEN RETURN ""; ELSE ATTR2 = X2B(C2X(ATTR2))
  shr_rgn = SUBSTR(ATTR2,1,1) + SUBSTR(ATTR2,2,1) + 1
  shr_sys = SUBSTR(ATTR2,3,1) + SUBSTR(ATTR2,4,1) + 1
RETURN "SHR("shr_rgn shr_sys")"
/**********************************************************************
      Determine how SPACE was allocated
***********************************************************************/
SET_SPACOPTN:
ARG SPACOPTN .
  SELECT
    WHEN SPACOPTN = '01000000'B THEN option = 'RECORDS'
    WHEN SPACOPTN = '10000000'B THEN option = 'TRK'
    WHEN SPACOPTN = '11000000'B THEN option = 'CYL'
    WHEN SPACOPTN = '11111111'B THEN RETURN ""
  OTHERWISE;                         option = '?????????'; END
RETURN option"("C2D(fld.6.list) C2D(fld.7.list)")"
/**********************************************************************
      Determine Alternate Index Attributes
***********************************************************************/
SET_RGATTR:
ARG RGATTR .
  IF RGATTR = ""        THEN RETURN ""; ELSE RGATTR = X2B(C2X(RGATTR))
  IF SUBSTR(RGATTR,1,1) THEN NOP /* options = "UPGRADE"    */
  IF SUBSTR(RGATTR,2,1) THEN NOP /* Is and Alternate Index */
RETURN ""
/**********************************************************************
      Determine any additional VSAM attributes
***********************************************************************/
SET_VSAMREUS:
ARG VSAMREUS .
  IF VSAMREUS = ""        THEN RETURN ""; ELSE VSAMREUS = X2B(C2X(VSAMREUS))
  IF SUBSTR(VSAMREUS,3,1) THEN options = "RUS"
     ELSE                      options = ""
  IF SUBSTR(VSAMREUS,4,1) THEN options = options "ERASE"
RETURN STRIP(options)
/**********************************************************************
      Determine any additional VSAM attributes
***********************************************************************/
SET_VSAMTYPE:
ARG VSAMTYPE .
  IF VSAMTYPE = ""         THEN RETURN ""
  VSAMTYPE = X2B(C2X(VSAMTYPE)); options = ""
  IF SUBSTR(VSAMTYPE, 1,1) THEN KSDS  = TRUE; ELSE KSDS  = FALSE
  IF SUBSTR(VSAMTYPE, 7,1) THEN RRDS  = TRUE; ELSE RRDS  = FALSE
  IF SUBSTR(VSAMTYPE, 8,1) THEN options = options "SPND"
  IF SUBSTR(VSAMTYPE,15,1) THEN LDS   = TRUE; ELSE LDS   = FALSE
  IF SUBSTR(VSAMTYPE,16,1) THEN VRRDS = TRUE; ELSE VRRDS = FALSE
RETURN STRIP(options)
/**********************************************************************
      Expand CSICTYPE Value for Dataset Type
***********************************************************************/
SET_DSN_TYPE:
  SELECT                   /*  ASSIGN ENTRY TYPE NAME  */
    WHEN CSICTYPE = 'A' THEN DTYPE = 'NONVSAM '
    WHEN CSICTYPE = 'B' THEN DTYPE = 'GDG     '
    WHEN CSICTYPE = 'C' THEN DTYPE = 'CLUSTER '
    WHEN CSICTYPE = 'D' THEN DTYPE = 'DATA    '
    WHEN CSICTYPE = 'G' THEN DTYPE = 'AIX     '
    WHEN CSICTYPE = 'H' THEN DTYPE = 'GDS     '
    WHEN CSICTYPE = 'I' THEN DTYPE = 'INDEX   '
    WHEN CSICTYPE = 'L' THEN DTYPE = 'TAPELIB '
    WHEN CSICTYPE = 'R' THEN DTYPE = 'PATH    '
    WHEN CSICTYPE = 'U' THEN DTYPE = 'UCAT    '
    WHEN CSICTYPE = 'W' THEN DTYPE = 'TAPEVOL '
    WHEN CSICTYPE = 'X' THEN DTYPE = 'ALIAS   '
  OTHERWISE;                 DTYPE = '        '; END
RETURN DTYPE
/**********************************************************************
      Translate Catalog entry to readable Device Type
***********************************************************************/
TRAN_DTYP:
ARG cat_entry .
  cat_entry = C2X(cat_entry)
  SELECT
    WHEN cat_entry = '30C08003' THEN dev_type = '3400-2'
    WHEN cat_entry = '30C08003' THEN dev_type = '3420  '
    WHEN cat_entry = '3010200C' THEN dev_type = '3375  '
    WHEN cat_entry = '3010200E' THEN dev_type = '3380  '
    WHEN cat_entry = '3010200F' THEN dev_type = '3390  '
    WHEN cat_entry = '30102004' THEN dev_type = '9345  '
    WHEN cat_entry = '3040200A' THEN dev_type = '3340  '
    WHEN cat_entry = '3050200B' THEN dev_type = '3350  '
    WHEN cat_entry = '3050200D' THEN dev_type = '3330-1'
    WHEN cat_entry = '30502007' THEN dev_type = '3205-2'
    WHEN cat_entry = '30502009' THEN dev_type = '3330  '
    WHEN cat_entry = '30582009' THEN dev_type = '3330V '
    WHEN cat_entry = '32008003' THEN dev_type = '3400-5'
    WHEN cat_entry = '32008003' THEN dev_type = '3420  '
    WHEN cat_entry = '32108003' THEN dev_type = '3400-6'
    WHEN cat_entry = '33008003' THEN dev_type = '3400-9'
    WHEN cat_entry = '33308003' THEN dev_type = '3420C '
    WHEN cat_entry = '34008003' THEN dev_type = '3430-3'
    WHEN cat_entry = '78008080' THEN dev_type = '3480  '
    WHEN cat_entry = '780480C1' THEN dev_type = '3490?A'
    WHEN cat_entry = '780480C2' THEN dev_type = '3590?A'
    WHEN cat_entry = '780480C3' THEN dev_type = '3590?B'
    WHEN cat_entry = '78048080' THEN dev_type = '3480  '
    WHEN cat_entry = '78048081' THEN dev_type = '3490  '
    WHEN cat_entry = '78048083' THEN dev_type = '3590-1'
    WHEN cat_entry = '????????' THEN dev_type = '????  '
  OTHERWISE
     SAY "=====> '"cat_entry"'";     dev_type = 'UNKNOW'
  END
RETURN dev_type
/**********************************************************************
      An error occured when calling IGGCSI00, dislay MODRSNRC, the
         parms used to call it, and the WORK area returned.
***********************************************************************/
DISPLAY_IGGCSI_ERROR:
  SAY  "IGGCSI Error!  LINK RC="RC "MOD="LEFT(MODRSNRC,2),
       "RSN="C2D(SUBSTR(MODRSNRC,3,1)) "RC="C2D(SUBSTR(MODRSNRC,4,1))
  SAY  "_______________________ CSIFIELD ______________________"
  SAY  CSIFIELD
  SAY  "________________________ DWORK ________________________"
  SAY  DWORK
  SAY  "_______________________________________________________"
EXIT RC
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults = ""                                                   /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults = STRIP(eresults "NL ===>" eresult)                 /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype   = CONDITION('C')          /* Condition causing error        *//*COPY*/
  sourcel = SOURCELINE(elineno)     /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel = LEFT(sourcel,72)     /*COPY*/
  sourcel = STRIP(sourcel)                                              /*COPY*/
  DO e_i = 1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)               /*COPY*/
     nextl = SOURCELINE(elineno + e_i)                                  /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl = LEFT(nextl,72)        /*COPY*/
     sourcel = STRIP(sourcel,'T',',') STRIP(nextl)                      /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause  = ERRORTEXT(RC)       /* Brief description of error     */ /*COPY*/
     expandl = "Can't INTERPRET source with SYNTAX errors!"             /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst = "ADDRESS CALL INTERPRET SAY"                                 /*COPY*/
     ecause  = CONDITION('D')       /* Brief description of error     *//*COPY*/
     FullLine = sourcel             /* Begin getting EXECuted source  *//*COPY*/
     expandl = ""                                                       /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN INDEX(srcl,"=")           > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals = VALUE(srcl); END                             /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl = expandl';' evals                                      /*COPY*/
     END                                                                /*COPY*/
     expandl = STRIP(STRIP(expandl,"L",";"))                            /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN                /*COPY*/
          emsg = ZERRLM                                                 /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF SYMBOL('SYSMSGLVL2') = 'VAR'                THEN                /*COPY*/
          emsg = SYSMSGLVL1 "--" SYSMSGLVL2                             /*COPY*/
     ELSE emsg = SYSMSGLVL1                                             /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0       THEN                /*COPY*/
          emsg = "SYSREASON: '"SYSREASON"'"                             /*COPY*/
  IF etype = 'NOVALUE' THEN ExitError = 4    /* Set EXIT error level  *//*COPY*/
     ELSE ExitError = RC                                                /*COPY*/
  erc = ExitError       /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresult = 1 TO eresult.0; PARSE PULL eresult.eresult; END          /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC = ExitError               /* SET ISPF RC to ExitError       *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitError                      /* EXIT with error return code    *//*COPY*/
