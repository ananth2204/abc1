/***************************** REXX ***********************************
 This REXX is an alternative to ISPF/PDF option 3.9.  It supports all the
      function of option 3.9 plus the following:
      1. Any application ID may be specified, even a currently active
         one (including ISP and ISR) -- If a table for an active
         application is changed, it is stored on DASD, but the active
         copy is not affected;
      2. The application ID defaults to the currently active one;
      3. The output table library may be specified (the default is the
         data set currently allocated to ISPTABL;
      4. The following additional commands are supported:
         a. FIND finds a character string WITHin the verb, action or
            description fields;
         b. LOCATE positions the display by verb;
         c. RFIND repeats the FIND action;
         d. SORT sorts by verb, except that all ALIASes are sorted at
            the beginning of the commands table (ALIASes must precede
            the commands they reference) -- the order of duplicate verbs
            is preserved.
      5. With a Terminal capable of handling screens wider then 80, Support
         for the full 80 charactors allowed in the Command section.

                           --- EXAMPLE ---
TSO <%>CMDMAINT ApplId <TEST(TraceOption)>
TSO <%>CMDMAINT -H -- To display help for this REXX

  Arguments: ApplId      - ISPF ApplId who's CMDS you want to EDIT
             InParms     - Non-Positional parameters
 ----------------------------- NP-PARMS -------------------------------
                    TEST - Used to control traces

      Files: The ISPF CMDS Profile member for the ApplId Choosen.
Other EXECS: NONE

EXEC History

 REXX EXEC Name: CMDMAINT
         Author: AL FERGUSON - TS ADM (TSAZFA) from version 1.16
                 ALBERT HULSEBOSCH (TTECAH1) Since version 2.0
               : Douglas H. Adams (original author)
                 Mail code 110-SH28
                 Rockwell International Corporation
                 2201 Seal Beach Boulevard
                 P.O. Box 2515
                 Seal Beach, California 90740-1515
                 (213) 797-2618
         Writen: 19SEP90
        History: 06FEB17 - v1.18 - Pick up updated version or ERRINFO
                           Common Code routines.
                 01FEB17 - v1.17 - Mass update to pickup Error
                           Handling Fixes.
                 31JAN17 - v1.16 - Update all REXXes with latest
                           common routines via %CCMASS
                 14MAY96 - v2.16 - Added support for Wide Actions
                           on Terminals less the 100 wide.
                 14MAY96 - v2.15 - Fix to changed? logic.
                 13MAY96 - v2.08 - Add support for screens wider
                           the 80 charactors to allow the full 80 char-
                           actors in the Command definition section.
                 13MAY96 - v2.0
                 19SEP90 - v1.0

***************************** Rexx ***********************************/
MsgStat=MSG("OFF")
ARG ApplId InParms

SELECT
  WHEN WORDPOS(ApplId,'-h -H') > 0 THEN CALL DISPLAY_HELP
  WHEN ApplId = ""                 THEN DO
     ADDRESS "ISPEXEC" "VGET (ZApplId)"
     ADDRESS "ISPEXEC" "SELECT CMD(%CMDMAINT" ZApplId") NEWAPPL(ISC)"
     EXIT RC
    END
OTHERWISE;                              CALL INITIALIZE_THIS_REXX; END
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
DO FOREVER
    ok='0 8';ADDRESS "ISPEXEC" "DISPLAY PANEL(CMDMAIN1)"
    IF RC = 8 THEN LEAVE

    ApplCmds=ApplId"CMDS"; ApplTemp=ApplId"TEMP"
    ok='0 12';ADDRESS "TSO" "ALLOCATE DD("file") DSN("TableDsn") SHR REUSE"

    IF BUILD() THEN CALL COMMANDS

    ok='0'
      ADDRESS "ISPEXEC" "TBSTATS DUMMY LIBRARY(DUMMY)"
      ADDRESS "TSO" "FREE DD("file")"
END

ok='0';ADDRESS "ISPEXEC" "VPUT (TableDsn) PROFILE"
MsgStat=MSG(MsgStat)
EXIT ExitError
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0        /* REXX functional VALUEs for TRUE and FALSE */
                    /* Initialize and process non-positional parms   */
  ValidParms="TEST(O)"
  MatchLength=4                   /* NP-Parms match on first # chars */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  SYSUID=USERID()
  ExitError=0
  SYSMSGLVL1=""; SYSMSGLVL2=""

  ADDRESS "ISPEXEC" "VGET (ZApplId ZSCREEN ZSCREENW TableDsn)"
  file="CMDMAIN"ZSCREEN; sort="CMDSORT"ZSCREEN; CMDSCRW=MIN(100,ZSCREENW)
  IF TableDsn="" THEN DO
     x=LISTDSI("ISPTABL FILE")
     TableDsn="'"SYSDsName"'"
  END

RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i = 1 TO SOURCELINE() UNTIL SOURCELINE(i + 2) = 'EXEC History'     /*COPY*/
     source.i = SOURCELINE(i + 1)   /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i = 1 TO i; SAY source.i; END /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i = 1 TO i     /* Build HELP table to display                 *//*COPY*/
        source = source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"            /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK = CENTER("----> END of Help <----",80)                     /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList = ValidParms ' '; InList = InParms ' '                         /*COPY*/
  ParmList = ''; ParmErrorList = ''                                     /*COPY*/
                                                                        /*COPY*/
  DO linx = 1 TO WORDS(ValidParms) UNTIL VpList = ''                    /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList = ParmList STRIP(LEFT(parm.linx,MatchLength))             /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm = STRIP(parm)                                                 /*COPY*/
     ParmNumber = WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)      /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber = value                  /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList = ParmErrorList parm"("value                    /*COPY*/
     ELSE ParmErrorList = ParmErrorList parm"("value")"                 /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse = STRIP(InList) ParmErrorList                       /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
      AnythingElse = STRIP(InList)                                      /*COPY*/
  END                                                                   /*COPY*/
  DO ParmInx = 1 TO linx                                                /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail = TRUE; ELSE TSO_avail = FALSE         /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/***********************************************************************
     Alias resolution
***********************************************************************/
ALIAS: PROCEDURE EXPOSE ApplTemp
  ok='0';ADDRESS "ISPEXEC" "TBGET" ApplTemp "ROWID(ROWID)"
  DO level=1 UNTIL ¬(ABBREV(ZCTACT, "ALIAS")) | RC ¬= 0
     ADDRESS "ISPEXEC" "TBTOP" ApplTemp
     ok='0 8';ADDRESS "ISPEXEC" "TBSCAN" ApplTemp "ARGLIST(ZCTVERB)"
  END
  ok='0';ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "ROW("rowid") NOREAD"
RETURN level
/***********************************************************************
     Build temporary command table
***********************************************************************/
BUILD:
  ok='0';ADDRESS "ISPEXEC" "TBCREATE" ApplTemp "LIBRARY("file")",
                           "NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)"
  IF RC ¬= 0 THEN DO
     CALL SET_MSG , "Unable to create temporary table for" ApplId"!", "YES"
     RETURN FALSE
  END
  Rowcurr=0
  ok='0';ADDRESS "ISPEXEC" "TBSTATS" ApplCmds "ROWCURR(ROWCURR)",
                           "STATUS1(STATUS1) STATUS2(STATUS2)"
  Exist? =(status1 == TRUE)
  Closed?=(status2 == TRUE)
  IF ¬(exist?) | rowcurr = 0 THEN DO
     Zctverb=COPIES("_",8)
     Zcttrunc="_"
     Zctact=COPIES("_",60)
     Zctdesc=COPIES("_",57)
     ADDRESS "ISPEXEC" "TBADD" ApplTemp
    END
  ELSE DO
     IF closed? THEN ADDRESS "ISPEXEC" "TBOPEN" ApplCmds "NOWRITE"
     ADDRESS "ISPEXEC" "TBTOP" ApplCmds
     DO rowcurr
        ADDRESS "ISPEXEC" "TBSKIP" ApplCmds
        ADDRESS "ISPEXEC" "TBADD" ApplTemp "MULT("rowcurr")"
     END
     IF closed? THEN ADDRESS "ISPEXEC" "TBEND" ApplCmds
  END
  ADDRESS "ISPEXEC" "TBTOP" ApplTemp
RETURN TRUE
/***********************************************************************
* Command Processing                                                   *
***********************************************************************/
COMMANDS:
  csrpos="0"; cursor=""; verb=""; operand=""; changed?=FALSE
  ok='0 4 8'
      ADDRESS "ISPEXEC" "TBDISPL" ApplTemp "PANEL(CMDMAIN2) POSITION(CRP)"
  DO WHILE RC < 8
     IF crp = 0 THEN crp=ZTDTOP
     DO ZTDSELS
        PARSE UPPER VALUE sel WITH linecmd +1 number
        IF number = "" THEN number=1
        SELECT
          WHEN linecmd = "D" THEN CALL DELETE
          WHEN linecmd = "I" THEN CALL INSERT
          WHEN linecmd = "R" THEN CALL REPEAT
          WHEN linecmd = "W" THEN CALL UPDATE
          WHEN linecmd = " " THEN CALL UPDATE
        OTHERWISE
           CALL SET_MSG "Invalid line option.", "'"linecmd"' is not a",
                        "currently supported line command!", "YES"
        END
        IF ZTDSELS = 1 THEN ITERATE
        ok='0 4';ADDRESS "ISPEXEC" "TBDISPL" ApplTemp
     END
     ok='0';ADDRESS "ISPEXEC" "TBTOP" ApplTemp
            ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "NUMBER("ZTDTOP")"
     PARSE VALUE ZCMD WITH verb operand
     SELECT
       WHEN verb = ""                 THEN NOP
       WHEN ABBREV("CANCEL", verb, 3) THEN LEAVE
       WHEN ABBREV("FIND", verb, 1)   THEN CALL FIND
       WHEN ABBREV("LOCATE", verb, 1) THEN CALL LOCATE
       WHEN ABBREV("RFIND", verb, 1)  THEN CALL RFIND
       WHEN ABBREV("SORT", verb, 1)   THEN CALL SORT
     OTHERWISE
        CALL SET_MSG "Invalid option.", "'"verb"' is not a",
                     "currently supported command!", "YES"
     END
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL" ApplTemp "PANEL(CMDMAIN2)"      ,
               "CURSOR("cursor") CSRROW("crp") CSRPOS("csrpos") AUTOSEL(NO)",
               "POSITION(CRP)"
  END
  CALL DOEND
RETURN
/***********************************************************************
     Delete Command
***********************************************************************/
DELETE:
  DO number
      ok='0';ADDRESS "ISPEXEC" "TBDELETE" ApplTemp
      ok='0 8';ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "NOREAD"
  END
  changed? = TRUE
  IF ZTDSELS = 1 THEN crp = MAX(crp-1,0)
RETURN
/***********************************************************************
     END command
***********************************************************************/
DOEND:
  ok='0'
  IF ABBREV("CANCEL", verb, 3) | ¬ changed?   THEN DO
     ADDRESS "ISPEXEC" "TBEND" ApplTemp
     RETURN
  END
  ADDRESS "ISPEXEC" "TBTOP" ApplTemp
  ADDRESS "ISPEXEC" "TBSKIP" ApplTemp
  ok='0 8'
  DO WHILE RC = 0
     IF TRANSLATE(zctverb," ","_") = "" THEN
        ADDRESS "ISPEXEC" "TBDELETE" ApplTemp
     ADDRESS "ISPEXEC" "TBSKIP" ApplTemp
  END
  ADDRESS "ISPEXEC" "TBQUERY" ApplTemp "ROWNUM(ROWNUM)"
  ok='0'
  IF rownum = 0 THEN DO
     ADDRESS "ISPEXEC" "TBERASE" ApplCmds "LIBRARY("file")"
     ADDRESS "ISPEXEC" "TBEND" ApplTemp
    END
  ELSE DO
     ADDRESS "ISPEXEC" "TBQUERY" ApplTemp "ROWNUM(CURSIZE)"
     Cursize = FORMAT(cursize)
     Moddate = DATE("Ordered")
     Modtime = LEFT(TIME("Normal"),5)
     ADDRESS "ISPEXEC" "TBCLOSE" ApplTemp "LIBRARY("file") NAME("ApplCmds")"
     ADDRESS "ISPEXEC" "LMINIT DATAID(DATAID) DDNAME("file")"
     ADDRESS "ISPEXEC" "LMMSTATS DATAID("dataid") MEMBER("ApplCmds")",
                       "MODTIME("modtime") CURSIZE("cursize")",
                       "USER("SYSUID") MODDATE("moddate")",
                       "INITSIZE("cursize")"
     ADDRESS "ISPEXEC" "LMFREE DATAID("dataid")"
  END
  CALL SET_MSG ApplId"CMDS saved.",,
               "Commands table" ApplId"CMDS saved in" TableDsn".", "NO"
RETURN
/***********************************************************************
     Find command
***********************************************************************/
FIND:
  ok='0';ADDRESS "ISPEXEC" "TBGET" ApplTemp
  Csrpos=1; Cursor=""
  CALL SEARCH
  SaveOperand=operand; SaveCrp=crp; SaveCsrPos=csrpos; SaveCursor=cursor
RETURN
/***********************************************************************
     Insert command
***********************************************************************/
INSERT:
  CALL UPDATE
  ZCTVERB=COPIES("_",8); ZCTTRUNC="_"; ZCTACT=COPIES("_",60)
  ZCTDESC=COPIES("_",57)

  ok='0';ADDRESS "ISPEXEC" "TBADD" ApplTemp "MULT("number")"
  DO number - 1; ADDRESS "ISPEXEC" "TBADD" ApplTemp; END
  IF ZTDSELS = 1 THEN crp=crp+1
RETURN
/***********************************************************************
     Locate command
***********************************************************************/
LOCATE:
  Zctverb=operand"*"
  ok='0 8';ADDRESS "ISPEXEC" "TBSCAN" ApplTemp ,
                   "ARGLIST(ZCTVERB) NOREAD POSITION(CRP)"
  IF RC ¬= 0 THEN DO
     ok='0';ADDRESS "ISPEXEC" "TBTOP" ApplTemp
     ok='0 8';ADDRESS "ISPEXEC" "TBSCAN" ApplTemp ,
                      "ARGLIST(ZCTVERB) NOREAD POSITION(CRP)"
  END
  IF RC = 0 THEN ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "NUMBER(-1)"
RETURN
/***********************************************************************
     Repeat command
***********************************************************************/
REPEAT:
  CALL UPDATE
  ok='0';ADDRESS "ISPEXEC" "TBADD" ApplTemp "MULT("number")"
  DO number-1; ADDRESS "ISPEXEC" "TBADD" ApplTemp; END
  IF ZTDSELS = 1 THEN crp=crp+1
RETURN
/***********************************************************************
     RFIND command
***********************************************************************/
RFIND:
  IF SYMBOL("SaveOperand") ¬= "VAR" THEN DO
     CALL SET_MSG "Enter a FIND!",,
          "RFIND works only after a FIND string has been entered!", "YES"
     RETURN
  END
  Operand=SaveOperand
  IF crp = SaveCrp THEN DO; Cursor=SaveCursor; Csrpos=SaveCsrPos+1; END
     ELSE               DO; Cursor="";         Csrpos=1;            END
  CALL SEARCH
  SaveCrp=crp; SaveCursor=cursor; SaveCsrPos=csrpos
RETURN
/***********************************************************************
     Search for character string
***********************************************************************/
SEARCH:
  Operand=STRIP(operand,"B","'")
  Operand=STRIP(operand,"B","""")
  IF operand = "" THEN DO
     CALL SET_MSG "Search for What?",,
          "SEARCH requires search string to look for!", "YES"
     RETURN
  END
  SELECT
    WHEN cursor = "ZCTVERB" THEN DO
       PosVerb=POS(operand,zctverb,csrpos)
       PosAct =POS(operand,zctact)
       PosDesc=POS(operand,zctdesc)
      END
    WHEN cursor = "ZCTACT" THEN DO
       PosVerb=0
       PosAct =POS(operand,zctact,csrpos)
       PosDesc=POS(operand,zctdesc)
      END
    WHEN cursor = "ZCTDESC" THEN DO
       PosVerb=0
       PosAct =0
       PosDesc=POS(operand,zctdesc,csrpos)
      END
  OTHERWISE
     PosVerb=POS(operand,zctverb)
     PosAct =POS(operand,zctact)
     PosDesc=POS(operand,zctdesc)
  END
  DO WHILE RC = 0 & PosVerb = 0 & PosAct = 0 & PosDesc = 0
      ok='0';ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "POSITION(CRP)"
      PosVerb=POS(operand,zctverb)
      PosAct =POS(operand,zctact)
      PosDesc=POS(operand,zctdesc)
  END
  SELECT
    WHEN RC = 0 & PosVerb ¬= 0 THEN DO
       Cursor = "ZCTVERB"; Csrpos=PosVerb
      END
    WHEN RC=0 & PosAct ¬= 0    THEN DO
       Cursor="ZCTACT"; Csrpos=PosAct
      END
    WHEN RC = 0 & PosDesc ¬= 0 THEN DO
       Cursor="ZCTDESC"; Csrpos=PosDesc
      END
  OTHERWISE
     Cursor=""; Csrpos=0
     CALL SET_MSG "Bottom of data reached",,
                  operand "not found!  Use RFIND to continue from top.", "YES"
     ok='0'
       ADDRESS "ISPEXEC" "TBTOP" ApplTemp
       ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "NUMBER("ZTDTOP") POSITION(CRP)"
  END
RETURN
/***********************************************************************
     Sort command
***********************************************************************/
SORT:
  ok='0'
  ADDRESS "ISPEXEC" "TBCREATE" sort "REPLACE LIBRARY("file")",
                    "NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC LEVEL ORDER)"
  ADDRESS "ISPEXEC" "TBSORT" sort "FIELDS(LEVEL,N,D ZCTVERB,C,A ORDER,C,A)"
  ADDRESS "ISPEXEC" "TBQUERY" ApplTemp "ROWNUM(ROWNUM)"
  ADDRESS "ISPEXEC" "TBTOP" ApplTemp
  DO rownum
     ADDRESS "ISPEXEC" "TBSKIP" ApplTemp "POSITION(ORDER)"
     PARSE VALUE zctact WITH action .
     IF action = "ALIAS" THEN level = alias(); ELSE level = 0

     ADDRESS "ISPEXEC" "TBADD" sort "ORDER MULT("rownum")"
  END
  ADDRESS "ISPEXEC" "TBTOP" sort
  ADDRESS "ISPEXEC" "TBEND" ApplTemp
  ADDRESS "ISPEXEC" "TBCREATE" ApplTemp "LIBRARY("file")",
                           "NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)"
  DO rownum
     ADDRESS "ISPEXEC" "TBSKIP" sort
     ADDRESS "ISPEXEC" "TBADD" ApplTemp "MULT("rownum")"
  END
  ADDRESS "ISPEXEC" "TBEND" sort
  ADDRESS "ISPEXEC" "TBTOP" ApplTemp
  changed? = TRUE
RETURN 0
/***********************************************************************
     Update SELECTed row
***********************************************************************/
UPDATE:
  IF linecmd = "W" THEN DO
     ok='0 8';ADDRESS "ISPEXEC" "DISPLAY PANEL(CMDMAIN3)"
     IF RC = 8 THEN RETURN
  END
  ZCTVERB =TRANSLATE(ZCTVERB," ","_")
  ZCTTRUNC=TRANSLATE(ZCTTRUNC," ","_")
  ZCTACT  =TRANSLATE(ZCTACT," ","_")
  ZCTDESC =TRANSLATE(ZCTDESC," ","_")
  ok='0';ADDRESS "ISPEXEC" "TBPUT" ApplTemp
  changed? = TRUE
RETURN
/**********************************************************************
            Cleanup and Exit Gracefully
***********************************************************************/
CLEANUP:
  ok='*'                            /* Ignore all non-0 RCs           */
    ADDRESS "ISPEXEC" "TBSTATS DUMMY LIBRARY(DUMMY)"
    IF closed? THEN ADDRESS "ISPEXEC" "TBEND" ApplCmds
    ADDRESS "ISPEXEC" "TBEND" sort
    ADDRESS "ISPEXEC" "TBEND" ApplTemp
    ADDRESS "ISPEXEC" "LMFREE DATAID("dataid")"
    ADDRESS "TSO" "FREE DD("file")"
    ZISPFRC=ExitError
    ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"
EXIT ExitError                      /* EXIT with error return code    */
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults = ""                                                   /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults = STRIP(eresults "NL ===>" eresult)                 /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype   = CONDITION('C')          /* Condition causing error        *//*COPY*/
  sourcel = SOURCELINE(elineno)     /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel = LEFT(sourcel,72)     /*COPY*/
  sourcel = STRIP(sourcel)                                              /*COPY*/
  DO e_i = 1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)               /*COPY*/
     nextl = SOURCELINE(elineno + e_i)                                  /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl = LEFT(nextl,72)        /*COPY*/
     sourcel = STRIP(sourcel,'T',',') STRIP(nextl)                      /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause  = ERRORTEXT(RC)       /* Brief description of error     */ /*COPY*/
     expandl = "Can't INTERPRET source with SYNTAX errors!"             /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst = "ADDRESS CALL INTERPRET SAY"                                 /*COPY*/
     ecause  = CONDITION('D')       /* Brief description of error     *//*COPY*/
     FullLine = sourcel             /* Begin getting EXECuted source  *//*COPY*/
     expandl = ""                                                       /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN INDEX(srcl,"=")           > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals = VALUE(srcl); END                             /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl = expandl';' evals                                      /*COPY*/
     END                                                                /*COPY*/
     expandl = STRIP(STRIP(expandl,"L",";"))                            /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN                /*COPY*/
          emsg = ZERRLM                                                 /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF SYMBOL('SYSMSGLVL2') = 'VAR'                THEN                /*COPY*/
          emsg = SYSMSGLVL1 "--" SYSMSGLVL2                             /*COPY*/
     ELSE emsg = SYSMSGLVL1                                             /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0       THEN                /*COPY*/
          emsg = "SYSREASON: '"SYSREASON"'"                             /*COPY*/
  IF etype = 'NOVALUE' THEN ExitError = 4    /* Set EXIT error level  *//*COPY*/
     ELSE ExitError = RC                                                /*COPY*/
  erc = ExitError       /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresult = 1 TO eresult.0; PARSE PULL eresult.eresult; END          /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC = ExitError               /* SET ISPF RC to ExitError       *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitError                      /* EXIT with error return code    *//*COPY*/
