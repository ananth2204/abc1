/***************************** REXX ***********************************
   This REXX/ISPF Macro supports full screen Point-N-Shoot. To improve
        this functionality, assign it to a PFKey, add it as an ISPF CMD,
        or, better yet, do both! If this is envoked as an ISPF Macro and
        a valid dataset is not passed (via PARM or Cursor Position), it
        will view the current DSN or member, if one is passed.

   This REXX/ISPF MACRO supports multiple MEMLIST levels, so you may
        MEMLIST a dataset from within another.

   This REXX/ISPF MACRO supports USS File Directory Lists

   This REXX/ISPF MACRO supports member list pattern matching, i.e.  If
        it is envoked with a DSN of highlev.lowlev(AB*) it will display
        a member list for the PDS of all members starting with AB.  If
        it is envoked with a DSN of highlev.lowlev(AB%) it will display
        a member list for the PDS of all members starting with AB and are
        three characters in length.

                       --- EXAMPLE as TSO CMD ---
TSO <%>ML <dsname> <TEST(TraceOption)> <VOLSER(volser)>,
                     --- EXAMPLE as ISPF Macro ---
    <%>ML <dsname> <TEST(TraceOption)> <VOLSER(volser)>,
<TSO> <%>ML -H -- To display help for this REXX/ISPF Macro

  Arguments: dsname      - Dataset to View
             InParms     - Non-Positional  parameters
 ----------------------------- NP-PARMS -------------------------------
                    TEST - Used to control traces
                  VOLSER - Volume Serial Number to display DSNs for.
                           default:  blank (display cataloged DSNs only)
      Files: The EXEC does a DSN member, or Directory List on DsName
Other EXECS: None

EXEC History

EXEC/MACRO Name: ML
         Author: AL FERGUSON - TS ADM (TSAZFA)
         Writen: 18AUG17
        History: 28SEP17 - v1.04 - More Point-N-Shoot Fixes.
                 21AUG17 - v1.03 - Minor Refactoring
                 21AUG17 - v1.02 - Add support for USS Directory
                           Listing when DsName starts with a '/' or
                           '~/', i.e. is a Path.
                 18AUG17 - v1.00 - Based off MU & VW ISPF Macro based
***************************** Rexx ***********************************/
MsgStat=MSG("OFF")
PARSE ARG DsName InParms

IF WORDPOS(DsName,'-h -H') > 0 THEN CALL DISPLAY_HELP
IF ABBREV('.',DsName)          THEN DO; DsName=""; CALL INVOKE_AS_MACRO; END
IF DsName = ''                 THEN CALL DISPLAY_HELP
   ELSE                             CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
PARSE VALUE DsName WITH Pds . "(" MbrFltr ")" .

ok='0 4 8 12'
SELECT
  WHEN POS("/",DsName) > 0 THEN ADDRESS "ISPEXEC" "DIRLIST PATH(DsName)"
  WHEN ABBREV(Pds,"DD:")   THEN DO
     ADDRESS "ISPEXEC" "LMINIT DATAID(id) DDNAME("SUBSTR(Pds,4)") ENQ(SHRW)"
     IF RC = 8 THEN CALL SET_MSG "Can't %ML", DsName '--' ZERRLM, "YES"
     ADDRESS "ISPEXEC" "LMOPEN DATAID("id") OPTION(INPUT)"
     ADDRESS "ISPEXEC" "MEMLIST DATAID("id") MEMBER("MbrFltr") FIELD(9)"
    END
OTHERWISE
   ADDRESS "ISPEXEC" "LMINIT DATAID(id) DATASET("Pds") ENQ(SHRW)",
                     "VOLUME("VOLSER")"
   IF RC = 8 THEN CALL CALL SET_MSG "Can't %ML", DsName '--' ZERRLM, "YES"
   ADDRESS "ISPEXEC" "LMOPEN DATAID("id") OPTION(INPUT)"
   ADDRESS "ISPEXEC" "MEMLIST DATAID("id") MEMBER("MbrFltr") FIELD(9)"
END

CALL CLEANUP

MsgStat=MSG(MsgStat)
EXIT ExitErr
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This INITIALIZEs any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE=1; FALSE=0                   /* Setvalues for TRUE and FALSE   */
  PARSE SOURCE . . RName . RDsn .   /* Get REXX Name & EXEC Dsn       */
  JName=MVSVAR("SYMDEF","JOBNAME")  /* Get JOB Name                   */
  ADDRESS "ISPEXEC" "VGET (ZDLDSN ZDLVOL)"
  SELECT              /* Support ISPF 3.4/DSLIST VOLSERs              */
    WHEN RC ¬= 0                   THEN NOP
    WHEN ABBREV("*ALIAS", ZDLVOL)  THEN InParms=InParms "VOLSER()"
    WHEN ABBREV(DsName, "'"ZDLDSN) THEN InParms=InParms "VOLSER("ZDLVOL")"
  OTHERWISE; NOP; END
                                    /* Initialize NonPositional parms */
  ValidParms = "TEST(O) VOLSER()"
  MatchLength=4                     /* NPParms match first # chars    */
  AcceptAll=FALSE                   /* Pass un-recognized NPParms?    */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  ExitErr=0
  SYSMSGLVL1=""; SYSMSGLVL2=""

  IF VOLSER = "" THEN ADDRESS "ISPEXEC" "VGET (VOLSER) SHARED"
  response=''; member=''
  IF IsMacro ¬= TRUE THEN IsMacro=FALSE

RETURN
/* COPY PNTNSHOT */
/********************************************************************** /*COPY*/
             If no arguments, was it envoked as a MACRO                 /*COPY*/
**********************************************************************/ /*COPY*/
INVOKE_AS_MACRO:                                                        /*COPY*/
  ADDRESS "MVS" "SUBCOM ISREDIT"                                        /*COPY*/
  IF RC ¬= 0 THEN RETURN                                                /*COPY*/
  TRUE=1; FALSE=0; null=X2C('00')                                       /*COPY*/
  ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"       /* ISPF errors     */ /*COPY*/
  ADDRESS "ISREDIT" "MACRO (DsName InParms) NOPROCESS"                  /*COPY*/
  IF RC = 0 THEN DO                                                     /*COPY*/
     IsMacro=TRUE                                                       /*COPY*/
     ADDRESS "ISREDIT" "(PdsDsn) = DATASET"                             /*COPY*/
     ADDRESS "ISREDIT" "(RowPos,CurPos) = CURSOR"                       /*COPY*/
     IF DsName = "" & RowPos = 1 & CurPos = 0 THEN DsName="'"PdsDsn"'"  /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO; IsMacro=FALSE; PdsDsn=""; END                                /*COPY*/
  IF WORDPOS(DsName,'-h -H')>0 THEN CALL DISPLAY_HELP                   /*COPY*/
                                                                        /*COPY*/
  PARSE VALUE DsName WITH PDS '(' member ')' .                          /*COPY*/
  IF ABBREV(PDS,"'")           THEN PDS=STRIP(PDS,"T","'")"'"           /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN DsName = ""           THEN DsName=DO_POINT_N_SHOOT()           /*COPY*/
    WHEN ABBREV(DsName,"DD:")  THEN NOP                                 /*COPY*/
    WHEN ABBREV(DsName,"dd:")  THEN NOP                                 /*COPY*/
    WHEN POS("/",DsName) > 0   THEN NOP                                 /*COPY*/
    WHEN SYSDSN(PDS) = 'OK'    THEN NOP                                 /*COPY*/
    WHEN PdsDsn ¬= ""          THEN DsName="'"PdsDsn"("DsName")'"       /*COPY*/
  OTHERWISE;                        NOP; END                            /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
     Use Point-n-Shoot to Read dataset from screen                      /*COPY*/
**********************************************************************/ /*COPY*/
DO_POINT_N_SHOOT:                                                       /*COPY*/
  PARSE VALUE GET_CURRENT_LINE() WITH ln (null) .                       /*COPY*/
  DO i=1 TO WORDS(ln) UNTIL WORDINDEX(ln,i)>CurPos; NOP; END            /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN i                > 0 THEN word=WORD(ln,i-1)                    /*COPY*/
    WHEN POS("/",PdsDsn)  > 0 THEN RETURN "'"PdsDsn"'"                  /*COPY*/
    WHEN PdsDsn ¬= ""         THEN RETURN PdsDsn                        /*COPY*/
  OTHERWISE;                       RETURN ""; END                       /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN SYSDSN(word) = 'OK'  THEN RETURN word                          /*COPY*/
    WHEN POS("='",word)   > 0 THEN                                      /*COPY*/
       PARSE VALUE word    WITH  "='" word . "'"                        /*COPY*/
    WHEN POS("DSN=",word) > 0 THEN                                      /*COPY*/
       PARSE VALUE word    WITH . "DSN=" word . ","                     /*COPY*/
    WHEN POS("=",word)    > 0 THEN                                      /*COPY*/
       PARSE VALUE word    WITH   "=" word . ","                        /*COPY*/
    WHEN POS("''",word)   > 0 THEN                                      /*COPY*/
       PARSE VALUE word    WITH  "''" word . "'"                        /*COPY*/
    WHEN ABBREV(word,'"//')   THEN                                      /*COPY*/
       PARSE VALUE word    WITH "//" word . '"'                         /*COPY*/
    WHEN POS("(",word)    > 0 THEN                                      /*COPY*/
       PARSE VALUE word" " WITH   "(" word . ")"                        /*COPY*/
  OTHERWISE; NOP; END                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ABBREV(word,"DD:")                    THEN DsNme=word          /*COPY*/
    WHEN ABBREV(word,"dd:")                    THEN DsNme=word          /*COPY*/
    WHEN INDEX(word, "/")               > 0    THEN DsNme=word          /*COPY*/
    WHEN SYSDSN(word)                   = 'OK' THEN DsNme=word          /*COPY*/
    WHEN SYSDSN(word)     = 'MEMBER NOT FOUND' THEN DsNme=word          /*COPY*/
    WHEN SYSDSN("'"STRIP(word,,"'")"'") = 'OK' THEN                     /*COPY*/
         DsNme="'"STRIP(word,,"'")"'"                                   /*COPY*/
    WHEN SYSDSN("'"STRIP(word,,"'")"'") = 'MEMBER NOT FOUND' THEN       /*COPY*/
         DsNme="'"STRIP(word,,"'")"'"                                   /*COPY*/
    WHEN SYSDSN("'"PdsDsn"("word")'")   = 'OK' THEN                     /*COPY*/
         DsNme="'"PdsDsn"("word")'"                                     /*COPY*/
    WHEN PdsDsn                        ¬= ''   THEN DO                  /*COPY*/
         DsNme="'"PdsDsn"'"; filter=word                                /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE; DsNme = ""; END                                            /*COPY*/
RETURN DsNme                                                            /*COPY*/
/********************************************************************** /*COPY*/
   Use Current Screen Stream & Cursor Possition to get Current Line     /*COPY*/
**********************************************************************/ /*COPY*/
GET_CURRENT_LINE:                                                       /*COPY*/
  ADDRESS "ISPEXEC" "VGET (ZSCREENC ZSCREEND ZSCREENI ZSCREENW)"        /*COPY*/
  ADDRESS "ISPEXEC" "VGET (ZCURDEP ZCURWID)"                            /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN RC = 0 & ¬(IsMacro)                    THEN Wdth=ZCURWID       /*COPY*/
    WHEN IsMacro                                THEN DO                 /*COPY*/
       ADDRESS "ISREDIT" "(Line) = LINE" RowPos                         /*COPY*/
       RETURN Line                                                      /*COPY*/
      END                                                               /*COPY*/
    WHEN POS('* BOTTOM OF DATA *',ZSCREENI) > 0 |,                      /*COPY*/
         POS('* Bottom of Data *',ZSCREENI) > 0 THEN DO                 /*COPY*/
       LstLn=SUBSTR(ZSCREENI,(LENGTH(ZSCREENI)-(ZSCREENW+4)))           /*COPY*/
       IF ABBREV(LstLn,"***")                   THEN Wdth=ZSCREENW+8    /*COPY*/
          ELSE                                       Wdth=ZSCREENW      /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
     Lngth=LENGTH(ZSCREENI)                                             /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN (Lngth/ZSCREENW)   = ZSCREEND       THEN Wdth=ZSCREENW      /*COPY*/
       WHEN (Lngth%ZSCREENW)+1 = ZSCREEND       THEN Wdth=ZSCREENW      /*COPY*/
       WHEN (Lngth//ZSCREEND)  = 0              THEN Wdth=Lngth%ZSCREEND/*COPY*/
       WHEN (Lngth//88)        = 0              THEN Wdth=88            /*COPY*/
     OTHERWISE; Wdth=MIN(88,ZSCREENW); END                              /*COPY*/
  END                                                                   /*COPY*/
  CurPos=(ZSCREENC//Wdth)+1; RowPos=(ZSCREENC%Wdth)                     /*COPY*/
RETURN TRANSLATE(SUBSTR(ZSCREENI,(RowPos*Wdth)+1,Wdth)," ",",")         /*COPY*/
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i=1 TO SOURCELINE() UNTIL SOURCELINE(i+2) = 'EXEC History'         /*COPY*/
     source.i=SOURCELINE(i+1)       /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i=1 TO i; SAY source.i; END   /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i=1 TO i       /* Build HELP table to display                 *//*COPY*/
        source=source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"              /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK=CENTER("----> END of Help <----",80)                       /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList=ValidParms ' ';InList=InParms ' ';ParmList='';ParmErrorList='' /*COPY*/
                                                                        /*COPY*/
  DO linx=1 TO WORDS(ValidParms) UNTIL VpList = ''                      /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList=ParmList STRIP(LEFT(parm.linx,MatchLength))               /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm=STRIP(parm)                                                   /*COPY*/
     ParmNumber=WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)        /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber=value                    /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList=ParmErrorList parm"("value                      /*COPY*/
     ELSE ParmErrorList=ParmErrorList parm"("value")"                   /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse=STRIP(InList) ParmErrorList                         /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE; AnythingElse=STRIP(InList); END                            /*COPY*/
  DO ParmInx=1 TO linx                                                  /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail=TRUE; ELSE TSO_avail=FALSE             /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN RC ¬= 0                   THEN DO                              /*COPY*/
       SAY ''; SAY ZERRSM; SAY ZERRLM; SAY ''                           /*COPY*/
      END                                                               /*COPY*/
    WHEN SYSVAR("SYSNEST") = 'YES' THEN DO                              /*COPY*/
       SAY ''; SAY ZERRSM; SAY ZERRLM; SAY ''                           /*COPY*/
      END                                                               /*COPY*/
    WHEN SYSVAR('SYSENV') = 'BACK' THEN DO                              /*COPY*/
       SAY ''; SAY ZERRSM; SAY ZERRLM; SAY ''                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF ABBREV('YES',ZERRALRM,1)  THEN ZERRALRM='YES'                   /*COPY*/
        ELSE                           ZERRALRM='NO'                    /*COPY*/
     IF ZERRHM = ''               THEN ZERRHM='ISR2MACR'                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                     /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/**********************************************************************
      Cleanup & Exit Gracefully
***********************************************************************/
CLEANUP:
  IF RC = 0 & IsMacro     THEN ADDRESS "ISREDIT" "CURSOR ="RowPos+1 CurPos
  IF RC > 8               THEN DO
     ExitErr=RC
     CALL SET_MSG "Can't %ML", DsName '--' ZERRLM, "YES"
  END
  IF SYMBOL("id") = "VAR" THEN DO
     ok='0';ADDRESS "ISPEXEC" "LMCLOSE DATAID("id")"
            ADDRESS "ISPEXEC" "LMFREE  DATAID("id")"
  END
  ZISPFRC = ExitErr                 /* SET ISPF RC to ExitErr         */
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"
EXIT ExitErr                        /* EXIT with error return code    */
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno=sigl                      /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults=""                                                     /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults=STRIP(eresults "NL ===>" eresult)                   /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype=CONDITION('C')              /* Condition causing error        *//*COPY*/
  sourcel=SOURCELINE(elineno)       /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel=LEFT(sourcel,72)       /*COPY*/
  sourcel=STRIP(sourcel)                                                /*COPY*/
  DO e_i=1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)                 /*COPY*/
     nextl=SOURCELINE(elineno + e_i)                                    /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl=LEFT(nextl,72)          /*COPY*/
     sourcel=STRIP(sourcel,'T',',') STRIP(nextl)                        /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause=ERRORTEXT(RC)          /* Brief description of error     */ /*COPY*/
     expandl="Can't INTERPRET source with SYNTAX errors!"               /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst="ADDRESS CALL INTERPRET SAY"                                   /*COPY*/
     ecause=CONDITION('D')          /* Brief description of error     *//*COPY*/
     FullLine=sourcel               /* Begin getting EXECuted source  *//*COPY*/
     expandl=""                                                         /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN POS("=",srcl)             > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals=VALUE(srcl); END                               /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl=expandl';' evals                                        /*COPY*/
     END                                                                /*COPY*/
     expandl=STRIP(STRIP(expandl,"L",";"))                              /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN emsg=ZERRLM    /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
             emsg='No available ERROR description.'                     /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
             emsg='No available ERROR description.'                     /*COPY*/
    WHEN SYMBOL('SYSMSGLVL2') = 'VAR'               THEN                /*COPY*/
             emsg=SYSMSGLVL1 "--" SYSMSGLVL2                            /*COPY*/
  OTHERWISE; emsg=SYSMSGLVL1; END                                       /*COPY*/
  IF POS("IN VARIABLE SYSREASON",emsg) > 0          THEN                /*COPY*/
             emsg="SYSREASON: '"SYSREASON"'"                            /*COPY*/
  IF etype = 'NOVALUE' THEN ExitErr=4        /* Set EXIT error level  *//*COPY*/
     ELSE                   ExitErr=RC                                  /*COPY*/
  erc=ExitErr           /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult.="";eresult.0=QUEUED() /* Get info currently on STACK       *//*COPY*/
  DO eresult=1 TO eresult.0; PARSE PULL eresult.eresult; END            /*COPY*/
  ls=LINESIZE()                     /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2=ls; ELSE ls2=ls-30                               /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults=2 TO eresult.0                                            /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC=ExitErr                   /* SET ISPF RC to ExitErr         *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitErr                        /* EXIT with error return code    *//*COPY*/
