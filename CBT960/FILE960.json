{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013604000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3174444, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE960.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3174444, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3174444, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE960.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x001\\x07'", "DS1TRBAL": "b'\\\\,'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\t\\xf4\\x00\\x00\\t\\xf7\\x00\\x04\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04_\\x00\\x02\\x01\\x17'/\\x01\\x17'/\\t1\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@\"", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-09-29T00:00:00", "modifydate": "2017-09-29T09:31:02", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-495"}, "text": "REGULAR CBT TAPE - VERSION 495    FILE:  960\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT495.FILE960\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 25 MEMBERS COUNTED; CUMULATIVE SIZE IS 29,612 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/29/17    09:31:02    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$LIST": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0e\\x00V\\x01\\x17$\\x1f\\x01\\x17%_\\x17'\\x00\\x1a\\x00\\x0e\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@\"", "ispf": {"version": "01.14", "flags": 0, "createdate": "2017-08-29T00:00:00", "modifydate": "2017-09-12T17:27:56", "lines": 26, "newlines": 14, "modlines": 0, "user": "AL-FERG"}, "text": "FROM '&SYSUID..CBT.FILE960'\n    $$README - Start here ...\n\n    $$LISTS  - A List of all the XMIT File Member Lists\n    $$REXXS  - List of all the REXX Execs (....EXEC($$$LIST))\n\n    $XREC    - REXX to RECEIEVE all XMIT Files\n\n    @CSI     - XREF of REXXes that use the Catalog Search Interface (CSI) API\n    @DB2     - XREF of REXXes that use DB2 DSNREXX Interface\n    @ISPF    - XREF of ISPF Command REXX EXECs.\n    @MACRO   - XREF of ISPF Edit Macro REXX EXECs\n    @MEM     - XREF of REXXes that use STORAGE() function\n    @MVS     - XREF of REXXes that will run under IRXJCL\n    @RACF    - XREF of REXXes that use R_Admin & RACVAR() REXX APIs\n    @SDSF    - XREF of REXXes using ISFCALL() SDSF Interface\n    @SMPE    - XREF of REXXes used with SMP/E & SMPQASM GIMAPI Interface\n    @SMS     - XREF of REXXes used with SMS, HSM, & RMM Interfaces\n    @SOCK    - XREF of REXXes using the REXX SOCKET Interface\n    @USS     - XREF of REXXes that use BPXWUNIX() & USS Functions\n\n    CNTL     - XMIT Format file with JCL Members (use $XMIT to RECEIVE)\n    EXEC     - XMIT Format file with REXX Members (use $XMIT to RECEIVE)\n    ISPGLIB  - XMIT Format file with ISPF DTL Members (use $XMIT to RECEIVE)\n    ISPLLIB  - XMIT Format file with Load Modules (use $XMIT to RECEIVE)\n    ISPPLIB  - XMIT Format file with ISPF Panels (use $XMIT to RECEIVE)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$LISTS": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00H\\x01\\x17$\\x1f\\x01\\x17%O\\x13\\x01\\x00(\\x00\\x00\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2017-08-29T00:00:00", "modifydate": "2017-09-11T13:01:48", "lines": 40, "newlines": 0, "modlines": 0, "user": "AL-FERG"}, "text": "From '&SYSUID..CBT.FILE960.CNTL'\n    ISPDTLC  - Batch ISPF DTL Compiler (ISPDTLC) JCL\n    SMJCL    - Batch SENDMAIL JCL\n    SMPQASM  - Assemble & LinkEdit a GIMAPI Interface for REXX use.\n\nFrom '&SYSUID..CBT.FILE960.ISPGLIB'\n    USR1CMDS - Sample ISPF UserCMDS\n\nFrom '&SYSUID..CBT.FILE960.ISPLLIB'\n    SMPQASM  - SMP/E GIMAPI Program\n\nFrom '&SYSUID..CBT.FILE960.ISPPLIB'\n    CMDLIST1 - CMDLIST REXX ISPF Panel #1\n    CMDLIST2 - CMDLIST REXX ISPF Panel #2\n\n    CMDMAIN1 - CMDMAINT REXX ISPF Panel #1\n    CMDMAIN2 - CMDMAINT REXX ISPF Panel #2\n    CMDMAIN3 - CMDMAINT REXX ISPF Panel #3\n\n    HRECV01  - HRECV REXX ISPF Panel #1\n    HRECV02  - HRECV REXX ISPF Panel #2\n    HRECV03  - HRECV REXX ISPF Panel #3\n    HRECV04  - HRECV REXX ISPF Panel #4\n    HRECV05  - HRECV REXX ISPF Panel #5\n\n    MU01     - MU (aka MuckUp) REXX Copy/Move Panel\n    PEEK01   - PK Macro Popup Panel\n    PFKSET01 - PF Key Set Panel\n\n    REXXEPNL - My Standard REXX Error Panel 1\n    REXXEPN3 - My Standard REXX Error Panel 2\n\n    RHELP01  - My Standard REXX Help Panel 1\n    RHELP02  - My Standard REXX Help Panel 2\n    RHELP03  - My Standard REXX Help Panel 3\n    RHELP04  - My Standard REXX Help Panel 4\n\n    SMPQPNL  - Used by SMPQREXX\n    SMPQPNL2 - Used by SMPQREXX\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$README": {"ttr": 522, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\r \\x06\\x01\\x17$\\x1f\\x01\\x17%o\\x16\\x19\\x001\\x00\\x03\\x00\\x00``\\xc4\\xd6\\xc3``@\\x00\\x00\\x001\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.13", "flags": 32, "createdate": "2017-08-29T00:00:00", "modifydate": "2017-09-13T16:19:06", "lines": 49, "newlines": 3, "modlines": 0, "user": "--DOC--"}, "text": "                   REXXes using Various APIs\n\nSee $INSTALL member on how to install these and make them available.\n\nMost of ideas (and some of the code) included here are a combination\nof needing to solve a problem for work, curiosity in how things work,\nand inspiration for others (both their ideas and their code).  Much\nof the code I have got inspiration from can be found on CBTTape.org.\n\nWhy did I implement these solution in REXX?  It interfaces with almost\nevery sub-system on zOS, has a huge number of capabilities/APIs, and\nis easily extensible.  Most of my solutions use REXX & JCL to extend\nthe capabilities of the sub-systems I already have access to, to fill\nin a missing piece of the automation puzzle (Programs & Batch JOBs ARE\nAutomation).\n\nDid you know that ...\n  - IBM Provides a REXX STEM SORT function?\n    See EXEC(TSOVSORT) ...\n  - IBM Provides REXX with Regex Support?\n    See EXEC(CHECKJOB) ...\n  - You can allocate a GDG using (+1), (-1), or (-0) in a REXX?\n    See EXEC(GDGCOPY) ...\n  - You can allocate a DSN without TSO support?\n    See EXEC(GDGCOPY) EXEC(STARTUP) EXEC(UMODCHCK) ...\n  - You can read a PDS or PDS/E Directory under MVS (IRXJCL)?\n    See EXEC(GDGCOPY) ...\n  - You can \"efficently\" get DSN Information under MVS (IRXJCL)?\n    See EXEC(DSLIST) EXEC(VSAMRD) EXEC(VSAMRDEF) ...\n  - MVS knows your Name?\n    See EXEC(ACEENAME) ...\n  - You can analyze the results of your JOBs & SYSOUTs?\n    See EXEC(CHECKJOB) & EXEC(GETSYSOT) ...\n  - You can do Full Screen ISPF Point & Shoot in a REXX?\n    See EXEC(BR) EXEC(DSNS) EXEC(ED) EXEC(ML) EXEC(MU) EXEC(VW) ...\n  - You have access to USS Unix Man pages from ISPF?\n    See EXEC(MAN) ...\n  - You can send email via REXX with NO zOS Server required!\n    See EXEC(SENDMAIL) ...\n  - You can do email just like they do on any other Unix Box?\n    See EXEC(USSMAIL) ...\n  - You can have ISPF (zOS 2.2+) automatically setup your session?\n    See EXEC(ZSTART) ...\n  - Do you need to know what day June 2, 1975 was?\n    See EXEC(DATEX) ...\n  - REXX can ask DB2 to Help \"Draw\" a Table Select for you?\n    See EXEC(DB2DRAW) ...\n  - REXX can interface with SMS to find a Dataset's last backup?\n    See EXEC(HRECV) ...\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$REXXS": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00\\x05\\x01\\x17$\\x0f\\x01\\x17%O\\x13\\x00\\x00]\\x006\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-11T13:00:05", "lines": 93, "newlines": 54, "modlines": 0, "user": "AL-FERG"}, "text": "FROM '&SYSUID..CBT.FILE960.EXEC'\n    ACEENAME - Pull Name field value from current ACEE\n    ALIASMC  - Initial Edit Macro to Setup various ISPF Edit command Aliases\n    ALL      - ISPF Macro to Display ALL\n    AR       - ISPF Macro to Display Rest\n    BR       - Point-N-Shoot Browse REXX\n               Works as both a REXX (useful as ISPF CMD) & Edit Macro\n    CDTINFO  - Use IBMs REXX R_Admin (IRRXUTIL) interface to get RACF info\n               on from the RACF CDT Class for dynamically defined Classes.\n               The order of information in this Class *CAN* inpact how/if\n               these Classes work properly. The R_Admin interface is the\n               only way to get the actual order these are defined to RACF!\n    CENTER   - Center selected records Macro\n    CHECKJOB - SDSF REXX to check the RCs of a JOBs STEPs and report back\n               on any issues found.\n    CMDLIST  - Display the list of ISPF Commands available for an APPID\n    CMDMAINT - Do Maintenace on the ISPF Commands available for an APPID\n    CMDTAG   - Convert an ISPF APPLID Command Table to DTL Format\n               (from before IBMs ISPCMDTB EXEC was available)\n    CNTL     - Edit ISPF temporary \".CNTL\" file\n    COMPPRF  - Compress ISPF Profile DSN, w/profile mbr compression\n    CR       - ISPF Macro to Change Rest\n    DATEX    - Date manipulation reXx\n    DB2DRAW  - \"DRAW\" a DB2 SELECT * WHERE as a NOTE in current session\n    DSLIST   - REXX that uses the Catalog Search Interface (CSI) to\n               programatically get a list of DSNs (and requested\n               information) directly from the system catalog. This does\n               not require TSO to function.\n    DSNS     - Point-N-Shoot Dataset List REXX, plus DSLIST capability\n               Works as both a REXX (useful as ISPF CMD) & Edit Macro\n    ED       - Point-N-Shoot Edit REXX\n               Works as both a REXX (useful as ISPF CMD) & Edit Macro\n    EDITLIBS - Edit/View various System Libraries by pulling information\n               from System Memory and then call the ML REXX to display\n               thier Member Lists. Works best as an ISPF CMD.\n    FIXMAC   - A sample ISPF Macro that can be called by MACREP to make\n               mass changes to the members of a PDS.\n    GDGCOPY  - Copies GDG in olders to newest order\n    GETSYSOT - SDSF REXX to extract SYSOUT DD output from a JOB.\n    HRECV    - Extract HSM Backup data & display for recovery\n    ISPTAG   - Convert an ISPF APPLID CMDS or KEY Table to DTL Format\n    ISPTIME  - Display current system Date & Time in an ISPF Message\n    KEYTAG   - Convert an ISPF APPLID PF Key List to DTL Format\n    LJUST    - Left JUSTify selected rows macro\n    MACLST   - ISPF Macro to EXECute the commands in the current Edit DSN.\n    MACREP   - REXX to repeat an ISPF Macro against every member of a PDS.\n    MACREPM  - Initial Edit Macro used by MACREP\n    MAN      - Display USS Man Page for a USS Unix command\n    MIGLEVEL - REXX using Catalog Search Interface (CSI) to ensure all\n               G00V0000s for a GDG are Migrated.\n    ML       - Point-N-Shoot PDS Member List REXX\n               Works as both a REXX (useful as ISPF CMD) & Edit Macro\n    MU       - Point-N-Shoot Member Utility (aka Muck-Up) REXX\n               Works as both a REXX (useful as ISPF CMD) & Edit Macro\n    PFKSET   - Used to manage/switch between different sets of user PF Keys\n    PK       - ISPF Macro to \"PeeK\" at DSN content in JCL\n    RACFACEE - Simple example of using IBMs RACF RACVAR REXX interface\n               to check for a valid ACEE for the current Address Space.\n    RACFGRPS - Extract list of Groups (RACF or TopSecret) from the current\n               Address Spaces ACEE.\n    RACFSTCS - Use IBMs REXX R_Admin (IRRXUTIL) interface to get RACF info\n               on the STCs defined in the RACF STARTED Class.\n    RACFVARS - Use IBMs REXX R_Admin (IRRXUTIL) interface to get RACF info\n               from the RACF RACFVARS Class.\n    REXXTRY  - My version to dynamicly trying a piece of REXX Code\n    RJUST    - Right JUSTify selected rows macro\n    SENDMAIL - REXX Socket program to send email to an SMTP Server.\n               (RFC implementation of SendMail Socket Client)\n    SETMSG   - Display passed string and ISPF Long Error Message\n    SETVAR   - Set an ISPF Profile Variable (useful as ISPF CMD)\n    SHFT     - ISPF Macro to shift selected rows Left or Right\n    SHOWVAR  - Show the value of an ISPF Profile Variable (useful as ISPF CMD)\n    SMPQREXX - Extract & Display information from SMP/E CSI\n    STARTUP  - Dynamically concatinate your ISPF/TSO DSNs infront of\n               those defined to LOGON PROC.\n    STUFFIT  - An ISPF Macro that compresses the current PDS\n    TOASCII  - Sample REXX calling USS to convert DSNs to ASCII (& back)\n    TSOVIEW  - Trap TSO Output and View (or Browse) it (useful as ISPF CMD)\n    TSOVSORT - Trap TSO Output, Sort Output, and View it\n    UMODCHCK - Verify all specified USERMODS are APPLIED to an SMP/E Zone\n    USSMAIL  - Read a pre-allocated email file and send via /bin/sendmail\n    USSMSG   - Display the meaning of a zOS USS RC | Error Code number\n    VSAMRD   - MVS REXX using Catalog Search Interface (CSI) to create\n               IDCAMS DELETE and DEFINE records for VSAM DSNs in a DSN\n               Filter Listing.\n    VSAMRDEF - MVS REXX using Catalog Search Interface (CSI) to create\n               IDCAMS DELETE and DEFINE records for VSAM DSNs in a DSN\n               Filter Listing.\n    VW       - Point-N-Shoot View REXX.\n               Works as both a REXX (useful as ISPF CMD) & Edit Macro\n    XR       - ISPF Macro to Exclude Rest\n    ZSTART   - Manage your ISPF ZSTART Variable via Edit\n    ZSTRTMAC - Initial ISPF Edit Macro used by ZSTART\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 527, "alias": false, "halfwords": 40, "notes": 0, "parms": "b\"\\x01\\r #\\x01\\x17#\\x7f\\x01\\x17%o\\x16&\\x00'\\x00\\x05\\x00\\x00``\\xc4\\xd6\\xc3``@\\x00\\x00\\x00'\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\"", "ispf": {"version": "01.13", "flags": 32, "createdate": "2017-08-25T00:00:00", "modifydate": "2017-09-13T16:26:23", "lines": 39, "newlines": 5, "modlines": 0, "user": "--DOC--"}, "text": "                   Installing & Configuring this File\n\n 1. Start with $$README ... then proceed\n\n 2. RECEIVE the following XMIT Members by doing one of the following:\n    - From CMD Line:   TSO EXEC '&SYSUID..CBT.FILE960($XREC)'\n    - From DSLIST:     EXEC /($XREC)      <=== on this DSN Line\n    - From DS MemList: EXEC_____ $XREC    <=== EXEC on $XREC Mbr Line\n    It will create PDSes of the format 'This.Pds.Name.Member', i.e.\n    the RECEIVEd DSNs will have the member/type affixed to the DSN you\n    started with.\n\n 3. Allocated your own personal ISPF/TSO PDS(/E)s using the format:\n    - &SYSUID..ISPF.ISPGLIB\n    - &SYSUID..ISPF.ISPLLIB\n    - &SYSUID..ISPF.ISPMLIB\n    - &SYSUID..ISPF.ISPPLIB\n    - &SYSUID..ISPF.ISPSLIB\n    - &SYSUID..ISPF.ISPTLIB\n    - &SYSUID..ISPF.PROFILE\n    - &SYSUID..Z.CLIST\n    - &SYSUID..Z.CNTL\n    - &SYSUID..Z.EXEC\n    - &SYSUID..Z.HELP\nNOTE: PDS/E v2 works nice for these! Add a generation number > 1 & you\n      even have versioning!\n\n\n 4. Copy the pieces you want to use to your new ISPF/TSO DSNs\n 5. Logoff of TSO and then Logon ...\n 6. Add \"EXEC '&SYSUID..Z.EXEC(STARTUP)'\" to TSO LOGON Panel Command\n 7. ... the above DSNs at the beginning of your concatenations!\n\n 8. To take full advantage of these REXX EXECs, you should also Download\n    and install (into your new ISPF/TSO DSNs will work) the following\n    FILES from http://CBTTape.org :\n    - FILE312 - for PDSEGEN                   <=== Drop in ISPLLIB\n    - FILE411 - for STEMPUSH & STEMPULL       <=== Drop in ISPLLIB\n    - FILE895 - for STEMEDIT                  <=== Drop in ISPLLIB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$XREC": {"ttr": 529, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01P 0\\x01\\x17#\\x7f\\x01\\x17%_\\x17\\x13\\x00 \\x00\\x00\\x00\\x00n\\xc5\\xe7\\xc5\\xc3@@@\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.80", "flags": 32, "createdate": "2017-08-25T00:00:00", "modifydate": "2017-09-12T17:13:30", "lines": 32, "newlines": 0, "modlines": 0, "user": ">EXEC"}, "text": "/***************************** REXX ***********************************\n This REXX RECEIVE the XMIT format members in this file. Use either\n      via DSLIST (=3.4) line CMD:          /($XREC)\n          or\n      via DSLIST M (Member list) line CMD: EXEC\n\n REXX EXEC Name: $XMITREC\n         Author: AL FERGUSON - TS ADM (TSAZFA)\n         Writen: 25AUG17\n        History: 25AUG17 - v1.00\n***************************** Rexx ***********************************/\nPARSE SOURCE . . RName . RDsn .         /* Get REXX Name & EXEC Dsn  */\nPARSE ARG MbrList\n\nIF MbrList = \"\" | ABBREV(MbrList,\"*\") THEN\n   MbrList=\"CNTL EXEC ISPGLIB ISPLLIB ISPPLIB\"\n\nDO i= 1 TO WORDS(MbrList); CALL BUILD_DSNS(WORD(MbrList,i)); END\n\nEXIT\n/*\n   Do RECEIVE from a REXX?!?!?!\n*/\nBUILD_DSNS:\nARG Mbr .\n  ADDRESS \"TSO\" \"NEWSTACK\"; x=PROMPT(\"ON\"); y=MSG(\"OFF\")\n            QUEUE \"DSN('\"RDsn\".\"Mbr\"') RELEASE SYSOUT(0)\"\n            QUEUE \"\"\n    ADDRESS \"TSO\" \"RECEIVE INDSN('\"RDsn\"(\"Mbr\")') NONAMES\"\n    IF RC = 12 THEN ADDRESS \"TSO\" \"RECEIVE INDSN('\"RDsn\"(\"Mbr\")') NONAMES\"\n  y=MSG(y); x=PROMPT(x); ADDRESS \"TSO\" \"DELSTACK\"\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@CSI": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x17$\\x0f\\x01\\x17$/\\t\\x05\\x00\\x08\\x00\\x03\\x00\\x00\\xe3\\xe2\\xc1\\xe9\\xc6\\xc1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-08-30T09:05:03", "lines": 8, "newlines": 3, "modlines": 0, "user": "TSAZFA"}, "text": "                REXX Using IGGCSI00 Catalog Search Inteface (CSI)\n\n     DSLIST    - Useful & best example of how to code IGGCSI00\n     GDGCOPY\n     MIGLEVEL\n     VSAMRD\n     VSAMRDEF\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@DB2": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00U\\x01\\x17$/\\x01\\x17%o\\x16)\\x00\\x04\\x00\\x03\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2017-08-30T00:00:00", "modifydate": "2017-09-13T16:29:55", "lines": 4, "newlines": 3, "modlines": 0, "user": "AL-FERG"}, "text": "                   REXX using ADDRESS DSNREXX DB2 API\n\n     DB2DRAW\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE960": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04_\\x00U\\x01\\x17'/\\x01\\x17'/\\t0\\x00E\\x00E\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@\"", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-09-29T00:00:00", "modifydate": "2017-09-29T09:30:55", "lines": 69, "newlines": 69, "modlines": 0, "user": "CBT-495"}, "text": "//***FILE 960 is from Al Ferguson and contains many REXX execs      *   FILE 960\n//*           with their accompanying techniques, to get a large    *   FILE 960\n//*           variety of jobs done.                                 *   FILE 960\n//*                                                                 *   FILE 960\n//*           email:  Al.Ferguson@sccompanies.com                   *   FILE 960\n//*                                                                 *   FILE 960\n//*     Description of File Contents:                               *   FILE 960\n//*                                                                 *   FILE 960\n//*                  REXXes using Various APIs                      *   FILE 960\n//*                                                                 *   FILE 960\n//*     See $INSTALL member on how to install these and make        *   FILE 960\n//*     them available.                                             *   FILE 960\n//*                                                                 *   FILE 960\n//*     Most of ideas (and some of the code) included here are a    *   FILE 960\n//*     combination of needing to solve a problem for work,         *   FILE 960\n//*     curiosity in how things work, and inspiration for others    *   FILE 960\n//*     (both their ideas and their code).  Much of the code I      *   FILE 960\n//*     have got inspiration from can be found on CBTTape.org.      *   FILE 960\n//*                                                                 *   FILE 960\n//*     Why did I implement these solution in REXX?  It             *   FILE 960\n//*     interfaces with almost every sub-system on zOS, has a       *   FILE 960\n//*     huge number of capabilities/APIs, and is easily             *   FILE 960\n//*     extensible.  Most of my solutions use REXX & JCL to         *   FILE 960\n//*     extend the capabilities of the sub-systems I already have   *   FILE 960\n//*     access to, to fill in a missing piece of the automation     *   FILE 960\n//*     puzzle (Programs & Batch JOBs ARE Automation).              *   FILE 960\n//*                                                                 *   FILE 960\n//*     Did you know that ...                                       *   FILE 960\n//*       - IBM Provides a REXX STEM SORT function?                 *   FILE 960\n//*         See EXEC(TSOVSORT) ...                                  *   FILE 960\n//*       - IBM Provides REXX with Regex Support?                   *   FILE 960\n//*         See EXEC(CHECKJOB) ...                                  *   FILE 960\n//*       - You can allocate a GDG using (+1), (-1), or (-0) in     *   FILE 960\n//*         a REXX?                                                 *   FILE 960\n//*         See EXEC(GDGCOPY) ...                                   *   FILE 960\n//*       - You can allocate a DSN without TSO support?             *   FILE 960\n//*         See EXEC(GDGCOPY) EXEC(STARTUP) EXEC(UMODCHCK) ...      *   FILE 960\n//*       - You can read a PDS or PDS/E Directory under MVS         *   FILE 960\n//*         (IRXJCL)?                                               *   FILE 960\n//*         See EXEC(GDGCOPY) ...                                   *   FILE 960\n//*       - You can \"efficently\" get DSN Information under MVS      *   FILE 960\n//*         (IRXJCL)?                                               *   FILE 960\n//*         See EXEC(DSLIST) EXEC(VSAMRD) EXEC(VSAMRDEF) ...        *   FILE 960\n//*       - MVS knows your Name?                                    *   FILE 960\n//*         See EXEC(ACEENAME) ...                                  *   FILE 960\n//*       - You can analyze the results of your JOBs & SYSOUTs?     *   FILE 960\n//*         See EXEC(CHECKJOB) & EXEC(GETSYSOT) ...                 *   FILE 960\n//*       - You can do Full Screen ISPF Point & Shoot in a REXX?    *   FILE 960\n//*         See EXEC(BR) EXEC(DSNS) EXEC(ED) EXEC(ML) EXEC(MU)      *   FILE 960\n//*         EXEC(VW) ...                                            *   FILE 960\n//*       - You have access to USS Unix Man pages from ISPF?        *   FILE 960\n//*         See EXEC(MAN) ...                                       *   FILE 960\n//*       - You can do RFC Complient email within REXX via TCPIP?   *   FILE 960\n//*         See EXEC(SENDMAIL) ...                                  *   FILE 960\n//*       - You can do email just like they do on any other         *   FILE 960\n//*         Unix Box?                                               *   FILE 960\n//*         See EXEC(USSMAIL) ...                                   *   FILE 960\n//*       - You can have ISPF (zOS 2.2+) automatically setup        *   FILE 960\n//*         your session?                                           *   FILE 960\n//*         See EXEC(ZSTART) ...                                    *   FILE 960\n//*       - Do you need to know what day of the week June 2,        *   FILE 960\n//*         1975 was?                                               *   FILE 960\n//*         See EXEC(DATEX) ...                                     *   FILE 960\n//*       - You can ask DB2 for Help \"Drawing\" a Table Select?      *   FILE 960\n//*         See EXEC(DB2DRAW) ...                                   *   FILE 960\n//*       - You can interface with SMS to find a DSNs last backup?  *   FILE 960\n//*         See EXEC(HRECV) ...                                     *   FILE 960\n//*                                                                 *   FILE 960\n//*                                                                 *   FILE 960\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@ISPF": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00G\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\x11\\x00\\x01\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 17, "newlines": 1, "modlines": 0, "user": "AL-FERG"}, "text": "                      REXX ISPF Management REXXes\n                         see ISPGLIB(USR1CMDS)\n\n     BR         - Works as ISPF Macro or ISPF CMD!\n     CMDLIST    - Works as ISPF Macro or ISPF CMD!\n     DSNS       - Works as ISPF Macro or ISPF CMD!\n     ED         - Works as ISPF Macro or ISPF CMD!\n     ML         - Works as ISPF Macro or ISPF CMD!\n     MU         - Works as ISPF Macro or ISPF CMD!\n     STARTUP    - Add your ISPF/TSO DSNs infront of LOGON PROCs!\n     SETVAR     - Works as ISPF Macro or ISPF CMD!\n     SHOWVAR    - Works as ISPF Macro or ISPF CMD!\n     TSOVIEW    - Works as ISPF Macro or ISPF CMD!\n     TSOVSORT   - Works as ISPF Macro or ISPF CMD!\n     VW         - Works as ISPF Macro or ISPF CMD!\n     ZSTART\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@MACRO": {"ttr": 539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00G\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\x1f\\x00\\x01\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 31, "newlines": 1, "modlines": 0, "user": "AL-FERG"}, "text": "                            REXX ISPF Macros\n\n     ALIASMC\n     ALL\n     AR\n     BR         - Works as ISPF Macro or ISPF CMD!\n     CENTER\n     CMDLIST    - Works as ISPF Macro or ISPF CMD!\n     CR\n     DSNS       - Works as ISPF Macro or ISPF CMD!\n     ED         - Works as ISPF Macro or ISPF CMD!\n     FIXMAC\n     HRECV      - Works as both ISPF REXX & ISREDIT Macro.\n     LJUST\n     MACLST\n     MACREPM\n     ML         - Works as ISPF Macro or ISPF CMD!\n     MU         - Works as ISPF Macro or ISPF CMD!\n     PFKSET\n     PK\n     RJUST\n     SETVAR     - Works as ISPF Macro or ISPF CMD!\n     SHFT\n     SHOWVAR    - Works as ISPF Macro or ISPF CMD!\n     STUFFIT\n     TSOVIEW    - Works as ISPF Macro or ISPF CMD!\n     TSOVSORT   - Works as ISPF Macro or ISPF CMD!\n     VW         - Works as ISPF Macro or ISPF CMD!\n     XR\n     ZSTRTMAC\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@MEM": {"ttr": 541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00G\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\x06\\x00\\x01\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 6, "newlines": 1, "modlines": 0, "user": "AL-FERG"}, "text": "              REXX EXECs Traversing System Control Blocks\n\n     ACEENAME\n     RACFGRPS\n     UMODCHCK - Traverses a PDS's, or PDS/E's, Directory w/o TSO!\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@MVS": {"ttr": 543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x11\\x01\\x17$/\\x01\\x17$/\\x10P\\x00\\x14\\x00\\x07\\x00\\x00\\xe3\\xe2\\xc1\\xe9\\xc6\\xc1@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2017-08-30T00:00:00", "modifydate": "2017-08-30T10:50:11", "lines": 20, "newlines": 7, "modlines": 0, "user": "TSAZFA"}, "text": "                    Will Run under MVS (i.e. IRXJCL)\n                       (no TSO needed, IKJEFT01)\n\n     ACEENAME\n     CDTINFO\n     DATEX\n     DSLIST\n     GDGCOPY\n     RACFACEE\n     RACFGRPS\n     RACFSTCS\n     RACFVARS\n     SENDMAIL\n     SMPQREXX\n     UMODCHCK\n     USSMAIL\n     USSMSG\n     VSAMRD\n     VSAMRDEF\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@RACF": {"ttr": 770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00G\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\x0f\\x00\\x04\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 15, "newlines": 4, "modlines": 0, "user": "AL-FERG"}, "text": "                REXX Execs call RACF Specific Interfaces\n\nRACVAR REXX Function (optional interface installed via USERMOD)\n     RACFACEE\n\nRACF REXX R_Admin interface (IRRXUTIL)\n     CDTINFO\n     RACFACEE\n     RACFSTCS\n     RACFVARS\n\nTraverses the ACEE of the current Address Space\n     ACEENAME\n     RACFGRPS\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@SDSF": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00G\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\x05\\x00\\x01\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 5, "newlines": 1, "modlines": 0, "user": "AL-FERG"}, "text": "                     Accessing SDSF via ISFCALLS()\n\n     CHECKJOB\n     GETSYSOT\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@SMPE": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00G\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\x05\\x00\\x01\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 5, "newlines": 1, "modlines": 0, "user": "AL-FERG"}, "text": "                       Accessing SMP/E via GIMAPI\n\n     SMPQREXX\n     UMODCHCK\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@SMS": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00G\\x01\\x17%_\\x01\\x17%o\\x16)\\x00\\x04\\x00\\x03\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2017-09-12T00:00:00", "modifydate": "2017-09-13T16:29:47", "lines": 4, "newlines": 3, "modlines": 0, "user": "AL-FERG"}, "text": "                       Accessing SMS, HSM, & RMM\n\n     HRECV\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@SOCK": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x04\\x01\\x17$/\\x01\\x17$/\\tT\\x00\\x04\\x00\\x07\\x00\\x00\\xe3\\xe2\\xc1\\xe9\\xc6\\xc1@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2017-08-30T00:00:00", "modifydate": "2017-08-30T09:54:04", "lines": 4, "newlines": 7, "modlines": 0, "user": "TSAZFA"}, "text": "                  REXX EXECs Using SOCKET() Interface\n\n     SENDMAIL - RFC implementation of SendMail Socket Client\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@USS": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00Q\\x01\\x17$\\x0f\\x01\\x17%o\\x16)\\x00\\t\\x00\\x03\\x00\\x00\\xc1\\xd3`\\xc6\\xc5\\xd9\\xc7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2017-08-28T00:00:00", "modifydate": "2017-09-13T16:29:51", "lines": 9, "newlines": 3, "modlines": 0, "user": "AL-FERG"}, "text": "                  REXX Using BPXWUNIX Inteface to USS\n\n     CHECKJOB\n     MAN\n     TOASCII\n     TSOVSORT - Demonstrates IBM's REXX STEM Var SORT Support!\n     USSMAIL\n     USSMSG\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CNTL": {"ttr": 782, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 P\\x01\\x17%O\\x01\\x17%O\\x107\\x02?\\x02?\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@\\x00\\x00\\x02?\\x00\\x00\\x02?\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2017-09-11T00:00:00", "modifydate": "2017-09-11T10:37:50", "lines": 575, "newlines": 575, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "EXEC": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x06\\x01\\x17'\\x1f\\x01\\x17'\\x1f\\x13\\x15j\\xa4j\\xa4\\x00\\x00n\\xe7\\xd4\\xc9\\xe3@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-09-28T00:00:00", "modifydate": "2017-09-28T13:15:06", "lines": 27300, "newlines": 27300, "modlines": 0, "user": ">XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPGLIB": {"ttr": 12039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x17%O\\x01\\x17%O\\x13Y\\x00\\xc2\\x00\\xc2\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-09-11T00:00:00", "modifydate": "2017-09-11T13:59:51", "lines": 194, "newlines": 194, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPLLIB": {"ttr": 12043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x17%O\\x01\\x17%O\\x13Y\\x00|\\x00|\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-09-11T00:00:00", "modifydate": "2017-09-11T13:59:51", "lines": 124, "newlines": 124, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPPLIB": {"ttr": 12291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\x17%o\\x01\\x17%o\\x01\\x18\\x03\\xa3\\x03\\xa3\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-09-13T00:00:00", "modifydate": "2017-09-13T01:18:40", "lines": 931, "newlines": 931, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT960/FILE960.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT960", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}