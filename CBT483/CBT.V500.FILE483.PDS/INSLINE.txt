/* Rexx */
/* This Macro allows the user to insert lines wherever he likes to    */
/*                                                                    */
/* Parameters are:                                                    */
/*                                                                    */
/* FROM: Specifies the starting line                                  */
/*    - Values accpted: Whole number from 0 to .zlast - 1             */
/*    - Special variables .ZCSR .ZFIRST                               */
/*    - Any valid LABEL set in the current edit - session             */
/*                                                                    */
/* TO  : Specifies the ending line                                    */
/*    - Values accpted: Whole number from 1 to .zlast                 */
/*    - Special variables .ZCSR .ZLAST                                */
/*    - Any valid LABEL set in the current edit - session             */
/*                                                                    */
/* BY  : Specifies the interval by which lines will be inserted.      */
/*    - Values accpted: Whole number smaller than 'TO' - Value        */
/*                                                                    */
/* MODE: Specifies the Mode; either 'X' or 'NX' to limit the affected */
/*      Lines                                                         */
/*                                                                    */
/* The Parameters can be entered in any order or left blank           */
/*                                                                    */
/* Defaults are:                                                      */
/*    - FROM: 1                                                       */
/*    - TO  : .ZLAST                                                  */
/*    - BY  : 1                                                       */
/*    - MODE: ''                                                      */
/* If the entered parms pass through the plausibility checks,         */
/* The User is prompted to enter the Data of the line(s) to be        */
/* inserted.                                                          */
/* The CAPSMODE setting will be checked.                              */
/* If 'OFF', the user is prompted whether he wants the entered data   */
/* in uppercase.                                                      */
/*                                                                    */
/* Example:                                                           */
/* --------                                                           */
/* Your currently edited data looks as follows:                       */
/*                                                                    */
/* 000001 //U00110Y  JOB (7700,0508),'RAMSEIER',CLASS=F,              */
/* 000002 //         MSGCLASS=X,NOTIFY=U00110,TIME=(1,1)              */
/* 000003 //PRTTEST OUTPUT JESDS=ALL,                                 */
/* 000004 //        TITLE='MANUALLIST PER 27.11.91',                  */
/* 000005 //        ADDRESS=('RESO RECHENZENTRUM',                    */
/* 000006 //        'ROEMERSTRASSE 20',                               */
/* 000007 //        '4502 SOLOTHURN',                                 */
/* 000008 //        '     ========='),                                */
/* 000009 //        BUILDING='MUTTENTRASSE 1',                        */
/* 000010 //        DEPT='RESSORT TECHNIK'                            */
/* 000011 //SCHTEPP1 EXEC PGM=IEFBR14,REGION=4M                       */
/* 000012 //SYSPRINT DD  SYSOUT=*,OUTPUT=*.PRTTEST                    */
/*                                                                    */
/* now you want to add a commentline after every line of the address: */
/*                                                                    */
/* type: INSLINE FROM 5 TO 7                                          */
/*                                                                    */
/* Answer to the prompt screen:                                       */
/*                                                                    */
/* //* This is comment                                     */         */
/*                                                                    */
/* Afterwards, your Job looks as follows.                             */
/*                                                                    */
/* 000001 //U00110Y  JOB (7700,0508),'RAMSEIER',CLASS=F,              */
/* 000002 //         MSGCLASS=X,NOTIFY=U00110,TIME=(1,1)              */
/* 000003 //PRTTEST OUTPUT JESDS=ALL,                                 */
/* 000004 //        TITLE='MANUALLIST PER 27.11.91',                  */
/* 000005 //        ADDRESS=('RESO RECHENZENTRUM',                    */
/* 000006 //* This is comment                                     */  */
/* 000007 //        'ROEMERSTRASSE 20',                               */
/* 000008 //* This is comment                                     */  */
/* 000009 //        '4502 SOLOTHURN',                                 */
/* 000010 //* This is comment                                     */  */
/* 000011 //        '     ========='),                                */
/* 000012 //        BUILDING='MUTTENTRASSE 1',                        */
/* 000013 //        DEPT='RESSORT TECHNIK'                            */
/* 000014 //SCHTEPP1 EXEC PGM=IEFBR14                                 */
/* 000015 //SYSPRINT DD  SYSOUT=*,OUTPUT=*.PRTTEST                    */
/*                                                                    */
/* Macro written at Reso                            04/29/94          */
/*                                                      tra           */
/*                                                                    */
/* Changes:                                                           */
/* --------                                                           */
/* Correction in processing of BY value             2019/01/08        */
/*                                                  Peter Glanzmann   */
/*                                                                    */
/**********************************************************************/
Address 'ISREDIT'
'MACRO (PARSTR)'
Trace Off
Upper parstr
par = parstr                      /* Reload input                   */
do_check = 0                      /* Boolean, indicates plaus-check */
Do i = 1 to 4
  wrn.i = 'OK'                    /* Initializes warning-messages   */
End
parse var par . 'FROM 'fline .    /* Parse the FROM - Value         */
If fline = '' Then                /* Empty, deafult will be entered */
  Do
    fline = 1
    wrn.1 = ' not specified; default of 'fline' substituted'
  End
Else
  Do                              /*                                */
    do_check = 1                  /* Value entered; must check      */
    parstr = Delstr(parstr,Pos('FROM',parstr),Length('FROM' fline))
  End                             /* Strip value entered            */
parse var par . 'TO 'toline .
If toline = '' Then               /* Parse and check th TO - Value  */
  Do
    '(toline) = LINENUM .ZLAST'   /* Enter Default if empty         */
    wrn.2 = ' not specified; default of 'toline' substituted'
  End
Else
  Do                              /*                                */
    do_check = 1                  /* Value entered; must check      */
    parstr = Delstr(parstr,Pos('TO',parstr),Length('TO' toline))
  End                             /* Strip value entered            */
parse var par . 'BY 'byline .      /* do. with BY                   */
If byline = '' Then
  Do
    byline = 1
    wrn.3 = ' not specified; default of 'byline' substituted'
  End
Else
  Do                              /*                                */
    do_check = 1                  /* Value entered; must check      */
    parstr = Delstr(parstr,Pos('BY',parstr),Length('BY' byline))
  End                             /* Strip value entered            */
parse var par . 'MODE 'xmode .     /* do. with mode                */
If xmode ¬= '' Then
  Do                              /*                                */
    do_check = 1                  /* Value entered; must check      */
    parstr = Delstr(parstr,Pos('MODE',parstr),Length('MODE' xmode))
  End                             /* Strip value entered            */
If parstr ¬= ' ' Then             /* Is there any garbage left ?    */
  Do
    zedsmsg = parstr 'invalid'
    msg = 'Valid parms are '''FROM''','''TO''','''BY'''or'
    zedlmsg = msg ''''MODE'''; Please respecify'
    Address 'ISPEXEC'
    'ISPEXEC SETMSG MSG(ISRZ001)'
    Exit 12
  End
must_go = 0                       /* Error-indicator; if >0, macro */
If do_check = 1 Then              /* will not execute              */
  Do
    Call Chckparm                 /* Check the parms if needed     */
    Do i = 1 to 4
      If err.i ¬= 'OK' Then       /* Look for error-msgs.          */
        must_go = 1               /* Yes, we got;macro will cancel */
      If wrn.i ¬= 'OK' Then       /* Look for warning-msgs         */
        must_warn = 1
    End
    If must_go = 1 Then           /* Explanin the error(s) and exit*/
      Do
        Say 'Result of Parameter-Check'
        Say '========================='
        Say ''
        Say 'Errors - macro will terminate:'
        Say '------------------------------'
        Say 'FROM' fline': 'err.1
        Say 'TO' toline': 'err.2
        Say 'BY' byline': 'err.3
        Say 'MODE' xmode': 'err.4
        Exit 1
      End
    If must_warn = 1 Then         /* Show warnings and process     */
      Do
        Say ''
        Say 'Warnings - processing will continue:'
        Say '------------------------------------'
        Say 'FROM: 'wrn.1
        Say 'TO: 'wrn.2
        Say 'BY: 'wrn.3
        Say 'MODE: 'wrn.4
        Say ''
      End
  End
Else                              /* Defaults used; tell to user    */
  Do
    Say ''
    Say 'Defaults entered; processing continues'
    Say '--------------------------------------'
    Say 'FROM: 'wrn.1
    Say 'TO: 'wrn.2
    Say 'BY: 'wrn.3
    Say 'MODE: 'wrn.4
    Say ''
  End
colline = '----+----1----+----2----+----3----+----4----+----'
colline = (colline)||('5----+----6----+----7----+----')
error = 0
Say 'Enter data to be inserted.'
Say 'Please do N O T put string in quotes('') :'
Say colline
Parse Pull insrline
If Length(insrline) = 0 Then
  error = 1                      /* prompt + pull new data        */
Else
  Do                             /* Is CAPS OFF ?                 */
    '(CAPMODE) = CAPS'
    If capmode = 'OFF' Then
      Do
        Say 'Should data be inserted in uppercase (Yes/No)'
        Pull answer
        If Length(answer) > 0 Then
          Do
            answer = Substr(answer,1,1)
            Select
              When answer = 'Y' Then
                upper insrline
              When answer = 'N' Then
                nop
              Otherwise
                error = 1
            End
          End
        Else
          error = 1
      End
    Else
      upper insrline
  End
If error = 0 Then                /* No error found; Process         */
  Do
    finish = 0                   /* Init. num. of lines inserted    */
    i = fline                    /* go to start of insertions       */
    j = 0                        /* Counter of excl. lines (if any) */
    Trace off
    If xmode = '' Then           /* Do we have to look for X/NX     */
      Do While i <= toline       /* No, process                     */
        'LINE_AFTER' i '= (INSRLINE)' /* write to file              */
        i = i + byline + 1       /* adjust i                        */
        toline = toline + 1      /* Add the insterted line to total */
        finish = finish + 1      /* increase num of lines inserted  */
      End
    Else                         /* Yes, we must concern on X / NX  */
      Do While i <= toline
        '(excstat) = XSTATUS 'i  /* Do we have a status match ?     */
        If excstat = xmode Then  /* Yes, increase hit-count         */
          Do
            j = j + 1
            If j = byline Then   /* May we put a line ?             */
              Do                 /* Yes, insert it and bump behind  */
                'LINE_AFTER' i '= (INSRLINE)'   /* write to file    */
                i = i + 1        /* increase i                      */
                toline = toline + 1  /* increase total-lines        */
                finish = finish + 1  /* increase total lines insert */
                j = 0            /* start new count of x/nx lines   */
              End
            Else                 /* not yet enough lines; nothing   */
              Nop                /* to do                           */
          End
        Else                     /* No x/nx match; reset counter    */
          j = 0                  /* of matched x/nx lines           */
        i = i + 1                /* increase i in every case        */
      End
    Say finish 'lines inserted' /* Say number of inserted lines     */
  End
Else
  Say 'No or invalid data entered; macro cancelled' /* no data      */
Exit 1                          /* Cursor to commandline + exit     */
/***************/
/* Subroutines */
/***************/
Chckparm:
'(beglin) = LINENUM .zfirst'    /* Set the special variables allowed*/
'(endlin) = LINENUM .zlast'
'(curlin) = LINENUM .zcsr'
fr_parm = Datatype(fline)       /* get Datatype of the FROM         */
If fr_parm = 'CHAR' Then
  Do
    Select
      When fline = '.ZCSR' Then /* evaluate allowed names and refill*/
        Do                      /* to numeric or put error-msg      */
          fline = curlin
          err.1 = 'OK'
          wrn.1 = '.ZCSR substituted with 'curlin
        End
      When fline = '.ZFIRST' Then
        Do
          fline = beglin
          err.1 = 'OK'
          wrn.1 = '.ZFIRST substituted with 'beglin
        End
      When fline = '.ZLAST' Then
        err.1 = 'From 'fline' makes no sense'
      Otherwise
        Do                      /* Could it be a label ?            */
          If Pos('.',fline) = 1 Then
            Do
              '(ln) = LINENUM 'fline
               If Rc > 4 Then   /* No, wrong input                  */
                 err.1 = 'Invalid label entered'
               Else
                 Do
                   wrn.1 = fline 'substituted with 'ln
                   fline = ln   /* Yes, tell user about substitution*/
                   err.1 = 'OK'
                 End
            End
          Else                  /* No label                         */
            err.1 = 'Invalid literal entered'
        End
    End
  End
Else If fr_parm = 'NUM' Then
  Do
    If Datatype(fline,'W') = 0 Then    /* Is it a whole number ?    */
      err.1 = fline' not a whole number'
    Else If fline > endlin | fline < 0 Then
      err.1 = fline' larger than last line or negatif'
    Else
      err.1 = 'OK'
  End
Else
  err.1 = fr_parm' is an invalid datatype'
/* Test 'TO' */
to_parm = Datatype(toline)      /* Do similar test to DO            */
If to_parm = 'CHAR' Then
  Do
    Select
      When toline = '.ZCSR' Then
        Do
          toline = curlin
          err.2 = 'OK'
          wrn.2 = '.ZCSR substituted with 'curlin
        End
      When toline = '.ZFIRST' Then
        Do
          toline = beglin
          err.2 = 'To 'toline' makes no sense'
        End
      When toline = '.ZLAST' Then
        Do
          toline = endlin
          err.2 = 'OK'
          wrn.2 = '.ZLAST substituted with 'endlin
        End
      Otherwise
        Do
          If Pos('.',toline) = 1 Then
            Do
              '(ln) = LINENUM 'toline
              If Rc > 4 Then
                err.2 = 'Invalid label entered'
              Else
               Do
                 wrn.2 = toline 'substituted with 'ln
                 toline = ln
                 err.2 = 'OK'
               End
            End
          Else
            err.2 = 'Invalid literal entered'
        End
    End
  End
Else If to_parm = 'NUM' Then
  Do
    If Datatype(toline,'W') = 0 Then
      err.2 = toline' not a whole number'
    Else If toline > endlin Then
      Do
        wrn.2 = toline' too big; last line 'endlin' substituted'
        err.2 = 'OK'
      End
    Else If toline < 0 Then
      err.2 = toline' too big or negatif'
    Else
      err.2 = 'OK'
  End
Else
  err.2 = to_parm' is an invalid datatype'
If err.2 = 'OK' Then
  Do
    If toline <= fline Then
      err.2 = 'TO smaller than or equal to FROM'
  End
/* Test 'BY' */
by_parm = Datatype(byline)
If byline <= 0 | Datatype(byline,'W') ¬= 1 Then
  err.3 = 'BY must specify a positive whole number'
Else If byline >= toline Then
  Do
    If err.2 = 'OK' Then
      err.3 = 'BY must be smaller than TO'
    Else
      err.3 = 'OK'
  End
Else
  err.3 = 'OK'
/* Test 'MODE' */
If xmode ¬= 'X' & xmode ¬= 'NX' & xmode ¬= '' Then
  err.4 = 'Valid modes are X or NX'
Else if xmode ='' Then
  Do
    wrn.4 = ' not specified; all lines will be processed'
    err.4 = 'OK'
  End
Else
  err.4 = 'OK'
Trace Off
Return
