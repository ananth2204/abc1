//T750KQ   JOB (317,04,E150AQ),'RAMSEIER',
//             MSGLEVEL=(1,1),
//             CLASS=X,
//             MSGCLASS=T,
//             NOTIFY=&SYSUID,
//             TIME=NOLIMIT
//*MAIN SYSTEM=SYT
//*
//ASM      EXEC PGM=ASMA90,REGION=2048K,
//          PARM='NODECK,OBJECT,USING(NOWARN),RENT'
//SYSIN     DD *
QVTOC    TITLE '*** "QVTOC " *** TSO COMMAND PROCESSOR &SYSDATE'
***********************************************************************
*                                                                     *
*     QVTOC - A TSO-COMMAND-PROCESSOR THAT SCANS ALL CURRENTLY ONLINE *
*             DASDS AND BUILDS A LIST WITH ALL LOADMODULES            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*     EQUATES                                                         *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7                      DYNDISP-WORKAREA
R8       EQU   8                      ALLMSGS-PTR.
R9       EQU   9                      DSECT-ADDRESSABILITY
R10      EQU   10                     BAL
R11      EQU   11                     STORAGE OBTAINED AREA
R12      EQU   12                     BASE #1
R13      EQU   13                     HIGHER SAVE-AREA
R14      EQU   14                     BAKR
R15      EQU   15                     RC
         EJECT
***********************************************************************
*     START                                                           *
***********************************************************************
QVTOC    CSECT
QVTOC    AMODE 24
QVTOC    RMODE 24
         PRINT NOGEN
         SPACE 2
         BAKR  14,0                  ESTABLISH LINKAGE-CONVENTIONS
         LR    R11,R15               LOAD TEMPORARY BASE TO MY BASE
         LA    R12,2048              LOAD 2NDRY BASE  ..
         LA    R12,2048(R12,R11)     W. 2ND 4K
         USING QVTOC,R11,R12         TELL ASSEMBLER
         LR    R3,R1                 ESTABLISH CPPL'S  ADDRESSABILITY
GETSTOR  DS    0H
         STORAGE OBTAIN,LENGTH=LDWORK,LOC=BELOW   GET WORKING STORAGE
         LR    R9,R1                 ESTABLISH DSECT'S ADDRESSABILITY
         USING DWORK,R9              TELL ASSEMBLER
         BAL   R10,LOADCPPL          SAVE CPPL INTO MY IOPL
         BAL   R10,GETPARMS          GET THE PARAMETER-STRING
         BAL   R10,GETIOC            GET THE IOC-TOKEN
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, ERRORMSG + OUT)
         XC    SCANWRK,SCANWRK       CLEAR UCB-WORK FIELD
         BAL   R10,INITPNL           PREPARE PRIMARY PANEL FOR DISPLAY
         BAL   R10,DYNDISP           WORKSTORAGE FOR LOG. SCREEN
         LA    R8,ALLMSGS
VOLLOOP  DS    0H
         BAL   R10,NEXTVOL           CHECK THE NEXT (OR FIRST) VOLSER
         LTR   R15,R15               WENT IT OK ?
         BNZ   READLIBS              (BNZ = NO MORE VOLUMES FOUND)
         OI    FLAGBYTE,VTOCREAD     INDICATE VTOC TO BE READ
         BAL   R10,ALLOCVOL          ALLOCATE CURRENT VOLSER
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, STOP PROCESSING)
         BAL   R10,OPENVTOC          CHECK VOLSERS VTOC
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, ERRORMSG + OUT)
         BAL   R10,READVTOC          READ THE VTOC OF CURRENT VOLSER
         BAL   R10,FREEVOL           FREE DYNALLOC'ED VOLSER
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, ERRORMSG + OUT)
         B     VOLLOOP               GET NEXT VOLSER
READLIBS DS    0H                    READ ALL LOADLIBS
         XR    R1,R1                 CLEAR R1
         STH   R1,0(R8)              BE SURE TO CLEAR BEHIND LAST MSG
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, ERRORMSG + OUT)
         BAL   R10,LDSNFILT          LOAD DSN-FILTER (IF ANY)
         LA    R8,ALLMSGS            TOP OF VOLUME/DSN TABLE
         NI    FLAGBYTE,X'7F'        INDICATE NO VTOC TO BE READ
         OI    FLAGBYTE,READPDS      INDICATE PDS TO BE READ
         BAL   R10,OPENOUTF          OPEN OUTPUT-FILE
LIBSLOOP DS    0H
         BAL   R10,ALLOCVOL          RE-ALLOC UNDER DD-STMT LSTPDS
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, ERRORMSG + OUT)
         BAL   R10,SCANLIBS          BUILD MEMBERLISTS PER VOLUME
         BAL   R10,FREEVOL           RE-ALLOC UNDER DD-STMT LSTPDS
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERROR-MSG ?
         BNZ   NOSUCCES              (BNZ = YES, ERRORMSG + OUT)
         LH    R1,0(R8)              LENGTH OF NEXT LIBRARY
         LTR   R1,R1                 IS IT ZERO ?
         BNZ   LIBSLOOP              (BNZ=NO, BUILD MEMBERLIST)
         BAL   R10,CLOSOUTF          NO MORE LIBS, CLOSE OUTPUTFILE
         BAL   R10,CDSNFILT          CLOSE DSN-FILTER (IF ANY)
         BAL   R10,CALLSORT          CALL DFSORT
         B     ENDIT                 (ALL WENT GREAT, NO ERROS-MSG)
NOSUCCES DS    0H
         BAL   R10,PUTLBSNS          ISSUE EITHER INFOS OR ERRORMSG
*
ENDIT    DS    0H
         BAL   R10,ISPFCLN           CLEANUP ISPF-ENV.
         STORAGE RELEASE,LENGTH=LDWORK,ADDR=(R9)   FREE OBTAINED STOR.
         XR    R15,R15               SET RC=0
         PR                          END QVTOC + CLEANUP
         LTORG
*
***********************************************************************
*     EXECUTE                                                         *
***********************************************************************
***********************************************************************
*     SUBROUTINES                                                     *
***********************************************************************
*
LOADCPPL ST    R10,SAVE10
         USING CPPL,R3               GET THE ADDRESSES IN CPPL
         MVC   CPLCBUF,CPPLCBUF      MOVE COMM.-BUFFER ADDR TO MY AREA
         MVC   CPLUPT,CPPLUPT        MOVE USERPROFTAB ADDR TO MY AREA
         MVC   CPLPSCB,CPPLPSCB      MOVE PROT.STEP-CB ADDR TO MY AREA
         MVC   CPLECT,CPPLECT        MOVE ECT-ADDRESS TO MY AREA
         DROP  R3                    FREE CPPL
         L     R10,SAVE10
         BR    R10
*
*********************************************************************
* GET PASSED PARAMETERS
*********************************************************************
*
GETPARMS ST    R10,SAVE10             SAVE BACKPOINTER
         L     R2,PSATOLD-PSA(0)      GET CURRENT TCB
         L     R2,TCBTIO-TCB(R2)      POINT AT TIOT
         USING TIOT1,R2               TELL ASSEMBLER
         LA    R3,TIOENTRY            POINT AT FIRST DDNAME
         USING TIOENTRY,R3            TELL ASSEMBLER
TIOT0010 DS    0H
         XR    R1,R1                  CLEAR WORKREG
         ICM   R1,1,TIOELNGH          GET LENGTH OF TIOT-ENTRY
         BZ    TIOT0020               (BZ = LIBRARY NOT FOUND)
         CLC   TIOEDDNM(8),=CL8'VOLFILT'  IS THERE A VOLUME-FILTER ?
         BNE   TIOT0015               (BNE = NO, TRY NEXT)
         OI    FLAGBYTE,FILTVOL       INDICATE VOLUME-FILTER FOUND
TIOT0015 CLC   TIOEDDNM(8),=CL8'DSNFILT'  IS THERE A VOLUME-FILTER ?
         BNE   TIOT0016               (BNE = LIBRARY NOT FOUND)
         OI    FLAGBYTE,FILTDSN       INDICATE VOLUME-FILTER FOUND
TIOT0016 AR    R3,R1                  STEP TO NEXT ENTRY
         B     TIOT0010
TIOT0020 DS    0H
         XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
*********************************************************************
* GET CURRENT IODF-TOKEN
*********************************************************************
*
GETIOC   ST    R10,SAVE10             GET CURRENT IOCTOKEN
         XC    @MLWAREA,@MLWAREA      CLEAR WORKAREA
         MVC   @MLWAREA(LLIOCINF),LIOCINFO     MOVE MF=L INTO WORKAREA
         IOCINFO IOCTOKEN=TOKEN,MF=(E,@MLWAREA) DO THE EXECUTE-FORM
         XR    R15,R15                SET RC=0
         L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* INITPNL: SHOW ENTRY-PANEL
**********************************************************************
INITPNL  ST    R10,SAVE10             SAVE BACKPOINTER
         XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
*
**********************************************************************
* DYNDISP: OBTAIN WORKINGSTORAGE FOR CURRENT SCREEN (=DYNAMIC AREA)
**********************************************************************
DYNDISP  ST    R10,SAVE10             SAVE BACKPOINTER
         XR    R15,R15                ASSUME RC=0
DYND0090 DS    0H
         L     R10,SAVE10
         BR    R10
         LTORG
*
**********************************************************************
* NEXTVOL: SCAN ALL DASD-VOLUMES FOR VOLSERS
**********************************************************************
NEXTVOL  ST    R10,SAVE10             SAVE BACKPOINTER
         XR    R15,R15                ASSUME RC=0
         XC    @MLWAREA,@MLWAREA      CLEAR WORKAREA
         TM    FLAGBYTE,FILTVOL       VOLUME-FILTER SPECIFIED ?
         BNO   SCANSTRT               (BNZ=NO FILTER, PROCESS ALL)
VOL0010  DS    0H                     DO INITIAL AIACCTAB-CALL
         TM    FLAGBYTE,FILTVUP       IS FILTER ALREADY LOADED ?
         BO    SCANSTRT               (BO=YES, DON'T RELOAD FILTER)
         LOAD  EP=AIACCTAB            LOAD FILTER-PROGRAM
         ST    R0,TABADDR             STORE ENTRY-POINT ADDRESS
         OI    FLAGBYTE,FILTVUP       SET FILTUP-BYTE
         MVI   PARMREC,C'I'           INDICATE 1ST RUN
         LA    R1,7                   LENGTH OF DD-STMT
         STCM  R1,3,PARMREC+1         STORE LENGTH IN PARMREC
         MVC   PARMREC+3(7),=CL7'VOLFILT'    MOVE DD-NAME THEREAFTER
         LA    R1,PARMREC             POINT AT PARMREC
         ST    R1,PARMADDR            STORE IN PARAMETER-ADDRESS FIELD
         LA    R1,PARMADDR            A(PARMADDR)
         L     R15,TABADDR            RELOAD ENTRY-POINT
         BASSM R14,R15                BRANCH THERE
SCANSTRT DS    0H                     START OF VOLUMES LOOP
         MVC   @MLWAREA(LLUCBSCA),MSCANWRK     UCBSCAN MF=L INTO WAREA
         UCBSCAN COPY,                                                 X
               UCBAREA=UCBCOPY,       ANSWER-AREA OF UCBSCAN           X
               WORKAREA=SCANWRK,      WORKAREA                         X
               DYNAMIC=YES,           INCLUDE DYNAMIC DEVICES          X
               DEVNCHAR=DEVWORD,      DEVICE-NR. IN EBCDIC             X
               IOCTOKEN=TOKEN,        CURRENT IODF-TOKEN               X
               RANGE=ALL,             PROCESS ALL ENTRIES              X
               DEVCLASS=DASD,         OF THIS DEVICE-CLASS             X
               MF=(E,@MLWAREA)
         LTR   R2,R15                 WAS UCBSCAN SUCCESSFUL ?
         BNZ   VOL0030                (BNZ=NO, RETURN)
         LA    R1,UCBCOPY             START OF RESULT-AREA
         USING UCBOB,R1               SET UP ADDRESSABILITY
         TM    UCBSTAT,UCBONLI        IS THE DEVICE ONLINE ?
         MVC   CURRVOL,UCBVOLI        SAVE CURRENT VOLSER
         BZ    SCANSTRT               (BZ=NOT ONLINE, TRY NEXT VOLUME)
VOL0020  DS    0H                     CHECK FOR VOLFILT
         TM    FLAGBYTE,FILTVOL       IS A FILTER THERE ?
         BNO   ENDSCAN                (BNO=NO, OUT OF HERE)
         XC    PARMREC,PARMREC
         MVI   PARMREC,C'S'           INDICATE SEARCH-FUNCTIONS
         LA    R1,6                   LENGTH OF UCBVOLI
         STCM  R1,3,PARMREC+1         STORE LENGTH IN PARMREC
         MVC   PARMREC+3(6),CURRVOL          MOVE DD-NAME THEREAFTER
         LA    R1,PARMADDR            A(PARMADDR)
         L     R15,TABADDR            RELOAD ENTRY-POINT
         BASSM R14,R15                BRANCH THERE
         XR    R15,R15                CLEAR R15
         CLI   0(R1),C'M'             WAS THERE A MATCH ?
         BNE   ENDSCAN                (BNE=NO, VOLUME TO BE PROCESSED)
         CLC   2(4,R1),=CL4'DROP'     IS THE VOLUME TO BE DROPPED ?
         BNE   ENDSCAN                (NO, PROCEED)
         B     SCANSTRT               (YES, GET NEXT VOLUME)
VOL0030  DS    0H
         TM    FLAGBYTE,FILTVOL       VOLUME-FILTER SPECIFIED ?
         BNO   ENDSCAN                (BNZ=NO FILTER, PROCESS ALL)
         XC    PARMREC,PARMREC        NO ARG WITH LASTCALL
         MVI   PARMREC,C'T'           INDICATE LAST CALL
         LA    R1,PARMADDR            A(PARMREC)
         L     R15,TABADDR            RELOAD ENTRY-POINT
         BASSM R14,R15                BRANCH THERE
         DELETE EP=AIACCTAB           DELETE PROGRAM AFTER LAST CALL
ENDSCAN  L     R10,SAVE10             LOAD BACKPOINTER
         LR    R15,R2
         BR    R10                    BRANCH THERE
         LTORG
*
*********************************************************************
* OPENOUTF: OPEN OUTPUT-FILE
*********************************************************************
*
OPENOUTF ST    R10,SAVE10             SAVE BACKPOINTER
         MVC   DLMODLST(LMODLST),MODLST   MOVE MODLST DCB INTO WORKAREA
         MVC   DLOPEN(LLOPEN),LOPEN   OPEN MF=L INTO WORKAREA
         OPEN  (DLMODLST,(OUTPUT)),MF=(E,DLOPEN)   OPEN SORTIN-DD
OUTF0090 L     R10,SAVE10             LOAD BACKPOINTER
         BR    R10                    BRANCH THERE
         LTORG
*
*********************************************************************
* LDSNFILT: FIRST CALL TO AIACCTAB FOR DSN-FILTER
*********************************************************************
*
LDSNFILT ST    R10,SAVE10             SAVE BACKPOINTER
         TM    FLAGBYTE,FILTDSN      VOLUME-FILTER SPECIFIED ?
         BNO   LDSN0090              (BNZ=NO FILTER, PROCESS ALL)
         LOAD  EP=AIACCTAB            LOAD FILTER-PROGRAM
         ST    R0,TABADDR             STORE ENTRY-POINT ADDRESS
         MVI   PARMREC,C'I'           INDICATE 1ST RUN
         LA    R1,7                   LENGTH OF DD-STMT
         STCM  R1,3,PARMREC+1         STORE LENGTH IN PARMREC
         MVC   PARMREC+3(7),=CL7'DSNFILT'    MOVE DD-NAME THEREAFTER
         LA    R1,PARMREC             POINT AT PARMREC
         ST    R1,PARMADDR            STORE IN PARAMETER-ADDRESS FIELD
         LA    R1,PARMADDR            A(PARMADDR)
         L     R15,TABADDR            RELOAD ENTRY-POINT
         BASSM R14,R15                BRANCH THERE
LDSN0090 DS    0H
         L     R10,SAVE10             LOAD BACKPOINTER
         BR    R10                    BRANCH THERE
         LTORG
*
*********************************************************************
* ALLOCATE THE VOLUME VIA SVC 99
*********************************************************************
*
ALLOCVOL ST    R10,SAVE10             SAVE BACKPOINTER
         MVC   DLTUD(LTUD),TUDSTART   MOVE TU-CONSTANTS INTO WORKAREA
         TM    FLAGBYTE,VTOCREAD      IS THE VTOC TO BE READ ?
         BO    ALLOC010               (BO=YES, BUMP OVER PDS-ENTRY)
         MVC   CURRVOL(6),2(R8)       MOVE VOLSER FROM WORKMSG
         MVC   DLTUD(LTUDDNA2),TUDDNA2   MOVE PDS-DDNAME
ALLOC010 DS    0H                     PREPARE FOR SVC 99 (VTOC)
         MVC   DLTUD+TUVOLSTR(6),CURRVOL    CURRENT VOLSER IN WAREA
         LA    R1,DLTUD               POINT AT DDNAME IN WORKAREA
         ST    R1,TUPTR001            STORE IN TEXT-PTR
         LA    R1,DLTUD+@TUDSSA1      POINT AT START OF DISP IN WA
         ST    R1,TUPTR001+4          STORE IN TEXT-PTR
         LA    R1,DLTUD+@TUUNTA1      POINT AT START OF UNIT IN WA
         ST    R1,TUPTR001+8          STORE IN TEXT-PTR
         LA    R1,DLTUD+@TUVOLA1      POINT AT START OF VOLSER IN WA
         ST    R1,TUPTR001+12         STORE IN TEXT-PTR
         LA    R1,DLTUD+@TUDSNA1      POINT AT START OF DSN  IN WA
         ST    R1,TUPTR001+16         STORE IN TEXT-PTR
         OI    TUPTR001+16,X'80'      HIGH-ORDER BIT ON
         LA    R2,REQBLK              ADDRESSABILITY FOR RB-DSECT
         USING S99RB,R2               TELL ASSEMBLER
         XC    REQBLK,REQBLK          CLEAR RB
         MVI   S99RBLN,REQBLKLN       SET RB LENGTH
         MVI   S99VERB,S99VRBAL       SET ALLOCATION VERB
         LA    R1,TUPTR001            POINT AT TOP OF TXT-UNIT PTR.LIST
         ST    R1,S99TXTPP            STORE IT IN RB
         LA    R3,RBPTR               ADDRESSABILITY FOR RBP-DSECT
         USING S99RBP,R3              TELL ASSEMBLER
         LA    R1,REQBLK              LOAD ADDRESS OF RB
         ST    R1,S99RBPTR            STORE INTO RB-PTR
         OI    S99RBPTR,S99RBPND      TURN ON HIGH-ORDER BIT
         LA    R1,RBPTR               LOAD ADDR OF RB-POINTER INTO R1
         DYNALLOC                     PERFORM DYNALLOC
         DROP  R2,R3                  DROP DSECT-ADDRESSABILITY
         STM   R1,R3,SAVEALOC         SAVE R1-R3 FOR DYNAMIC DEALLOC
         LTR   R15,R15                TEST DYNALLOC-RC
         BZ    ALCV0090               (BZ=OK, CONTINUE)
         MVC   WORKMSG,ERR0010        MOVE MESSAGE-TEXT INTO WORKAREA
         MVC   WORKMSG+21(6),CURRVOL  FILL IN VOLSER
         MVC   WORKMSG+41(7),DLTUD+6  FILL IN DDNAME
         LA    R1,WORKMSG             START OF ERRORMSG
         ST    R1,@ERRMSG             STORE ADDRESS
ALCV0090 XR    R15,R15                END OF SUBROUTINE
         L     R10,SAVE10             LOAD BACKPOINTER
         BR    R10                    BRANCH THERE
*
*********************************************************************
* OPEN THE VTOC
*********************************************************************
*
OPENVTOC ST    R10,SAVE10             SAVE BACKPOINTER
         MVC   DLRDJFCB(LLRDJFCB),LRDJFCB   RDJFCB MF=L INTO WORKAREA
         MVC   DVOLREF(LVOLREF),VOLREF      DCB "MF=L" INTO WORKAREA
         LA    R3,DVOLREF             A(REENTRANT DCB)
         USING IHADCB,R3              TELL ASSEMBLER
         STCM  R3,B'0111',DLRDJFCB+1  SETUP A(DCB)
         LA    R2,WAEXLST             RENT-EXLST-FIELD
         ST    R2,DCBEXLST            STORE IN DVOLREF-DCBEXLST
         LA    R1,WAJFCB              RENT-JFCB-FIELD
         ICM   R1,B'1000',=X'87'      AND SET HIGH-ORDER BYTE
         ST    R1,0(,R2)              STORE IN WAEXLST
         LA    R1,WAIOB               RENT-IOB-FIELD
         ST    R1,DCBIOBAD            STORE IN DVOLREF-DCBIOBAD
         RDJFCB MF=(E,DLRDJFCB)       READ THE JFCB
         LTR   R15,R15                EVERYTHING OK ?
         BZ    VTOC0020               (BZ=YES, OPEN THE VTOC)
         MVC   WORKMSG,ERR0060        MOVE MSG-CONSTANT INTO WA
         MVC   WORKMSG+47(6),CURRVOL  FILL VARIABLE PART
         LA    R1,WORKMSG             A(ERRORMESSAGE)
         ST    R1,@ERRMSG             STORE ERRMSG-POINTER
         B     VTOC0090               GET THE HELL OUT OF HERE
VTOC0020 DS    0H
         LA    R2,WAJFCB              RENT-JFCB-FIELD
         USING INFMJFCB,R2            TELL ASSEMBLER
         MVI   JFCBDSNM,X'04'         OVERWRITE FORMAT4.DSCB
         MVC   JFCBDSNM+1(43),JFCBDSNM      WITH 44*X'04'
         OPEN  (DVOLREF,(INPUT)),TYPE=J,MF=(E,DLRDJFCB)
         LTR   R15,R15                EVERYTHING OK ?
         BZ    VTOC0090               (BZ=YES, CONTINUE READING)
         MVC   WORKMSG,ERR0070        MOVE MSG-CONSTANT INTO WA
         MVC   WORKMSG+32(6),CURRVOL  MOVE FAILING VOLSER THERE
         LA    R1,WORKMSG
         ST    R1,@ERRMSG             STORE ADDRESS
VTOC0090 DS    0H                     END OF OPEN-VTOC SUBROUTINE
         L     R10,SAVE10             RETURN TO CALLER
         BR    R10
*
*********************************************************************
* READ THE VTOC
*********************************************************************
*
READVTOC ST    R10,SAVE10
         MVC   @MLWAREA(L@TRCALC),@TRCALC   MOVE LISTFORM INTO WORKAREA
         TRKCALC FUNCTN=TRKCAP,       # OF RECORDS PER TRACK           X
               DEVTAB=DCBDVTBL,       DEVICETYPE OF VOLSER             X
               R=1,                   NO BALANCING, CALC WHOLE TRACK   X
               K=44,                  KEYLEN (=DATASETNAME)            X
               DD=96,                 DATA-PORTION (FX-DSCB)           X
               REGSAVE=YES,           SAVE REGS (1,9-11, 14)           X
               MF=(E,@MLWAREA)
         LTR   R15,R15                WAS TRKCALC SUCCESSFULL ?
         BZ    READ0010               (BZ=YES, CONTINUE)
         MVC   WORKMSG,ERR0080        MOVE MSG-CONSTANT INTO WA
         MVC   WORKMSG+38(6),CURRVOL  FILL VARIABLE PART
         LA    R1,WORKMSG
         ST    R1,@ERRMSG             STORE ERRMSG-POINTER
         B     READ0060
READ0010 DS    0H
* THE DATAPORTION THAT WILL BE READ IS COMPUTED AS FOLLOWS:
* # OF RECORDS / TRACK (= R0 AFTER TRKCALC) * TRANSFERCOUNT PER I/O
* THE TRANSFERCOUNT W. "READ MULTIPLE CK + D" (X'5E') IS  K+DD+8 = 148
         MH    R0,=H'148'             # OF REC/TRK * TRANSFERCNT
         ST    R0,WACCW4+4            STORE BUFFERLENGTH IN CCW
         STORAGE OBTAIN,LENGTH=(0),LOC=BELOW
         ST    R1,WACCW4              STORE WORKAREA PTR. IN CCW
         MVI   WACCW4,X'5E'           CCW-CODE: READ MULTIPLE TRACK
READLUP1 DS    0H
         L     R0,DCBRELAD            DCBRELAD = TTR0 OF CURRENT TRACK
         L     R1,DCBDEBAD            DCBDEBAD = ADDRESS OF DE-BLOCK
         LA    R2,MBBCCHHR            MBBCCHHR = ADDRESS RESULT-AREA
* THE CONVERSION ROUTINE WILL DESTROY R9-R13, SO SAVE THEM OUTSIDE PGM
         STM   R8,R13,20(R13)         STORE R8-R13
         LR    R8,R13                 SAVE POINTER TO SAVEAREA
         L     R15,CVTPTR             CVT-POINTER
         L     R15,CVTPCNVT-CVT(,R15) CONVERSION-ROUTINE ADDRESS
         BALR  R14,R15                CONVERT TTR0 INTO MBBCCHHR
         LM    R8,R13,20(R8)          RELOAD REGISTERS 8 - 13
         LTR   R15,R15                WAS CONVERSION SUCCESSFUL ?
         BNZ   CLOSEDCB               (BNZ=NO, END OF WORK)
READ0020 DS    0H                     BUILD AN IOB FOR EXCP
         LA    R1,WAIOB               ADDRESS OF RENT-IOB
         XC    WAIOB,WAIOB            CLEAR OUT WORK-AREA IOB
         USING IOBSTDRD,R1            TELL ASSEMBLER
         OI    IOBFLAG1,IOBCMDCH      TURN ON COMMAND-CHAIN FLAG
         OI    IOBFLAG1,IOBUNREL      TURN ON IOB-UNRELATED FLAG
         LA    R2,WAECB               A(RENT-ECB)
         ST    R2,IOBECBPT            STORE IN IOB
         LA    R2,WACCW2              A(FIRST RENT-CCW)
         ST    R2,IOBSTART            STORE IN IOB
         LA    R2,DVOLREF             A(OPENED DCB)
         ST    R2,IOBDCBPT            STORE IN IOB
         MVC   IOBSEEK,MBBCCHHR       DISK-ADDRESS OF TRACK TO BE READ
READ0030 DS    0H                     PREPARE REMAINING CCW'S
         LA    R2,IOBSEEK+3           LOAD ADDRESS OF 1ST CYL
         ST    R2,WACCW2              STORE IN 1ST CCW
         MVI   WACCW2,X'31'           SEARCH ID EQUAL (X'31')
         MVI   WACCW2+4,X'40'         CHAIN-COMMAND FLAG (PR. OF OP)
         MVI   WACCW2+7,X'05'         XFER-COUNT OF SEARCH (REF.SUMRY)
         LA    R2,WACCW2              A (1ST CCW OF CHAIN)
         ST    R2,WACCW3              STORE IN TIC (CCW3)
         MVI   WACCW3,X'08'           TRANSFER IN CHANNEL (TIC) CCW
         MVI   WAECB,X'00'            CLEAR OUT WAIT-ECB
         EXCP  WAIOB                  UFF |
         WAIT  ECB=WAECB              WAIT FOR END OF IO
         CLI   WAECB,X'7F'            WAS EXCP SUCCESSFUL ?
         BNE   CLOSEDCB               (BNE=NO, ISSUE ERROR-MESSAGE)
         XR    R2,R2
         ICM   R2,B'0111',WACCW4+1    A(READ TRACK) IN OBTAINED AREA
READLUP2 DS    0H                     DETERMINE DSCB-TYPE
         USING DSCB1,R2               ASSUME ITS A F1-DSCB
         CLI   DS1FMTID,X'F4'         IS IT A F4-DSCB ?
         BNE   READ0037               (BNE=NO, CHECK FURTHER)
         USING DSCB4,R2               TELL ASSEMBLER
         MVC   DSCBPTRK,DS4DEVDT      SAVE DS4DEVT
         USING DSCB1,R2               RE-ADDRESS FOR NEXT FX-DSCB
         B     READ0050               GET NEXT DSCB
READ0037 DS    0H
         CLI   DS1FMTID,X'F1'         IS IT A F1-DSCB ?
         BNE   READ0050               (BNE=NO, READ NEXT DSCB)
         TM    DS1DSORG,DS1DSGPO      IS IT A PO-DATASET ?
         BZ    READ0050               (BZ=NO LOADLIB, GET NEXT DSCB)
         TM    DS1RECFM,DS1RECFU      IS IT RECFM=U ?
         BNO   READ0050               (BNO=NO LOADLIB, GET NEXT DSCB)
         TM    DS1SMSFG,DS1PDSE+DS1PDSEX    IS IT A HFS-DATASET ?
         BO    READ0050               (BO=YES, SO ITS NOT A LOADLIB)
         LH    R1,DS1LRECL            LOAD LRECL OF CURRENT DATASET
         LTR   R1,R1                  IS IT ZERO ?
         BNZ   READ0050               (BNZ=NO LOADLIB, GET NEXT DSCB)
READ0040 DS    0H                     COMPOSE INPUT FOR LIBSCAN:
         XC    WORKMSG,WORKMSG        VOLSER(6),DSN(1-44)
         MVC   WORKMSG,CURRVOL        MOVE VOLSER AT BEGIN OF MESSAGE
         MVC   WORKMSG+6(44),DS1DSNAM MOVE DSN THEREAFTER
         LA    R4,WORKMSG+49          A(END OF 44-DSN+6CURRVOL)
READLUP3 CLI   0(R4),C' '             IS THERE A BLANK ?
         BNE   READ0042               (BNE=NO, END OF LENGTH-LOOP)
         BCT   R4,READLUP3            RETRY WITH NEXT CHARACTER
READ0042 DS    0H                     END OF LOOP
         LA    R1,WORKMSG             A(START OF CURRVOL+DSNAME)
         SR    R4,R1                  COMPUTE LENGTH + SAVE IN R4
         LA    R4,1(,R4)              +1 (WE STARTED AT 49)
         ADDMSG (R4),(R1),(R8)        ADD NEXT DSN-VOLSER
         LR    R8,R1                  RE-LOAD MSG-POINTER
READ0050 DS    0H
         CLC   F1DPR,DSCBPTRK         IS IT THE LAST DSCB OF THE TRACK?
         LA    R2,DS1END              A(NEXT DSCB OF THIS TRACK)
         BL    READLUP2               (BL=NO, GET NEXT DSCB OF TRACK)
         LA    R0,1                   LAST DSCB OF TRACK READ.
         AH    R0,DCBRELAD            ADD 1 TO THE RELAD OF RENT-DCB
         STH   R0,DCBRELAD            STORE NEW VALUE IN WORKAREA
         B     READLUP1               GET NEXT TRACK
CLOSEDCB DS    0H                     END OF VTOC
         MVI   WACCW4,X'00'           CLEAR HIGHORDER-BYTE FOR FREEMAIN
         LM    R1,R2,WACCW4           LOAD BUFFER-ADDRESS + LENGTH
         STORAGE RELEASE,LENGTH=(2),ADDR=(1)    FREE WORKING-STORAGE
READ0060 DS    0H                     IF ERROR IN TRKCALC OCCURS
         LA    R2,DVOLREF             A(DCB-WORKAREA)
         MVC   @MLWAREA(LLCLOS),LCLOS    MOVE CLOSE-MF=L INTO WAREA
         CLOSE ((R2)),MF=(E,@MLWAREA)    CLOSE VOLREF-DCB
READ0090 DS    0H
         L     R10,SAVE10             LOAD BACKPOINTER
         BR    R10                    BRANCH THERE
*
*********************************************************************
* DEALLOC  THE VOLUME VIA SVC 99
*********************************************************************
*
FREEVOL  ST    R10,SAVE10             SAVE BACKPOINTER
         LM    R1,R3,SAVEALOC         RELOAD ALLOCATE-DSECTS
         USING S99RB,R2               TELL ASSEMBLER
         USING S99RBP,R3              TELL ASSEMBLER
         XC    DLTUD,DLTUD            CLEAR WORKAREA
         MVC   DLTUD(@TUDSSA1),TUDSTART    MOVE DDNAME SCANVOL THERE
         TM    FLAGBYTE,VTOCREAD      WAS THE VTOC READ ?
         BO    FREE0010               (BO=YES, BUMP OVER LSTPDS-DCB)
         MVC   DLTUD(LTUDDNA2),TUDDNA2     MOVE LSTPDS -DCB THERE
FREE0010 DS    0H
         LA    R4,DLTUD               POINT AT DDNAME IN WORKAREA
         ST    R4,TUPTR001            STORE IN TEXT-PTR
         OI    TUPTR001,X'80'         INDICATE END OF PARMLIST
         MVI   S99VERB,S99VRBUN       SET DEALLOCATION VERB
         LA    R4,TUPTR001            POINT AT TOP OF TXT-UNIT PTR.LIST
         ST    R4,S99TXTPP            STORE IT IN RB
         LA    R1,RBPTR               LOAD ADDR OF RB-POINTER INTO R1
         DYNALLOC                     PERFORM DEALLOC
         LTR   R15,R15                WAS IT SUCCESSFULL ?
         BZ    FREEV090               (BZ=YES, CONTINUE)
         MVC   WORKMSG,ERR0020        MOVE MESSAGE-TEXT INTO WORKAREA
         MVC   WORKMSG+25(6),CURRVOL  FILL IN VOLSER
         MVC   WORKMSG+51(7),DLTUD+6  FILL IN DDNAME
         LA    R1,WORKMSG             START OF ERRORMSG
         ST    R1,@ERRMSG             STORE ADDRESS
FREEV090 XR    R15,R15
         L     R10,SAVE10
         BR    R10
*
***********************************************************************
*     SCANLIBS: READ THE LOADLIBS-DIRECTORIES                         *
***********************************************************************
SCANLIBS ST    R10,SAVE10
         MVC   DLRDJFCB(LLRDJFCB),LRDJPDS   RDJFCB MF=L INTO WORKAREA
         MVC   DLSTPDS(LLSTPDS),LSTPDS      DCB "MF=L" INTO WORKAREA
         LA    R3,DLSTPDS            A(REENTRANT DCB)
         USING IHADCB,R3             TELL ASSEMBLER
         STCM  R3,B'0111',DLRDJFCB+1 SETUP A(DCB)
         LA    R2,WAEXLST            RENT-EXLST-FIELD
         ST    R2,DCBEXLST           STORE IN DVOLREF-DCBEXLST
         LA    R1,WAJFCB             RENT-JFCB-FIELD
         ICM   R1,B'1000',=X'87'     AND SET HIGH-ORDER BYTE
         ST    R1,0(,R2)             STORE IN WAEXLST
         RDJFCB MF=(E,DLRDJFCB)      READ THE JFCB
         LTR   R15,R15               EVERYTHING OK ?
         BZ    SCANLUP0              (BZ=YES, GO AND BUILD MEMBERLIST)
         MVC   WORKMSG,ERR0030       MOVE ERRORMESSAGE INTO WORKAREA
         LA    R1,WORKMSG            STORE A(WORKMSG)
         ST    R1,@ERRMSG            IN @ERRMSG FOR PUTLINE
         B     SCAN0090              DO NOT SCAN LOADLIB
SCANLUP0 DS    0H                    OUTMOST LOOP: ONCE PER LIBRARY
         LA    R2,WAJFCB             RENT-JFCB-FIELD
         USING INFMJFCB,R2           TELL ASSEMBLER
         MVI   JFCBDSNM,C' '         OVERWRITE FORMAT4.DSCB
         MVC   JFCBDSNM+1(43),JFCBDSNM      WITH 44*BLANK
         LH    R1,0(R8)              LOAD LENGTH OF VOLSER+DSN
         SH    R1,=H'7'              SUBTRACT 1 FOR EXECUTE + L'VOLSER
         EX    R1,SCNDSN01           WRITE DATASETNAME IN JFCBDSNM
         MVI   WORKDSN,C' '          CLEAR OUT WORKDSN
         MVC   WORKDSN+1(L'WORKDSN-1),WORKDSN
         EX    R1,SCNDSN02           WRITE DATASETNAME IN WORKMSGDSN
         TM    FLAGBYTE,FILTDSN      DATASET-FILTER SPECIFIED ?
         BNO   SCAN0010              (BNZ=NO FILTER, PROCESS ALL)
         MVI   PARMREC,C'S'          INDICATE SEARCH-FUNCTION AIACCTAB
         LA    R1,44                 LENGTH OF DATASETNAME
         STCM  R1,3,PARMREC+1        STORE BEHIND FUNCTION
         MVC   PARMREC+3(44),WORKDSN    MOVE DSNAME INTO PARMLIST
         LA    R1,PARMADDR           A(PARMREC)
         L     R15,TABADDR           RELOAD ENTRY-POINT
         BASSM R14,R15               BRANCH THERE
         CLI   0(R1),C'M'            WAS THERE A MATCH ?
         BNE   SCAN0010              (BNE=NOMATCH, PROCESS ENTRY)
         CLC   2(4,R1),=CL4'DROP'    IS THE DATASET TO BE DROPPED ?
         BE    SCAN0080              (BE=YES, NEXT LIBRARY, NO OPEN)
SCAN0010 DS    0H
         OPEN  (DLSTPDS,(INPUT)),TYPE=J,MF=(E,DLRDJFCB)   OPEN THE PDS
         LTR   R15,R15               EVERYTHING OK ?
         BNZ   SCAN0090              (BNZ=NO, GET OUT OF HERE)
         MVC   @MLWAREA(L@READ),@READ    READ MF=L INTO WORKAREA
SCANLUP1 DS    0H                    2ND LOOP: CALLED ONCE PER DIRBLOCK
         READ  @MLWAREA,SF,(R3),WDIRBLK,MF=E   READ NEXT DIRBLOCK
         CHECK @MLWAREA              WAIT FOR I/O-COMPLETION
         LH    R2,WDIRDATA           LOAD LENGTH OF DIRECTORY BLOCK
         LA    R1,WDIRDATA+2         POINT AT 1ST MEMBER
         LA    R5,2                  START AFTER LENGTH-HALFWORD
SCANLUP2 DS    0H                    INNERMOST LOOP: ONCE PER MEMBER
         CLC   0(8,R1),BINONES       END OF DIRECTORY REACHED ?
         BE    CLOSEPDS              (BE=YES, CLOSE PDS)
         ST    R1,SAVE1              SAVE REG.1 AROUND PUT
         MVC   WDIRUDL(1),11(R1)     LENGTH OF UDATA IN HALFWORDS
         MVI   WORKMSG,C' '          BLANK OUT WORKMSG
         MVC   WORKMSG+1(L'WORKMSG-1),WORKMSG
         MVC   WORKMSG(8),0(R1)      MOVE MEMBERNAME THERE
         TM    WDIRUDL,X'80'         IS IT AN ALIAS ?
         BNO   SCAN0020              (BNO=NO, BUMP OVER ALIAS-SECTION)
         MVC   WORKMSG+9(2),=CL2'AO'          MOVE ALIAS-ENTRY INTO
         MVC   WORKMSG+12(8),36(R1)   WORKMESSAGE
SCAN0020 DS    0H
         MVC   WORKMSG+21(44),WORKDSN     MOVE DSN THEREAFTER
         MVC   WORKMSG+66(6),CURRVOL  MOVE VOLSER AT THE END OF MESSAGE
         PUT   DLMODLST,WORKMSG      WRITE SORTIN-RECORD
         L     R1,SAVE1              RELOAD REG. 1
         NI    WDIRUDL,X'1F'         CLEAR FLAG-BITS 1-3
         XR    R4,R4                 CLEAR OUT WORKREG
         IC    R4,WDIRUDL            USERDATALENGTH IN HALFWORDS
         MH    R4,=H'2'              MAKE BYTES
         LA    R4,12(,R4)            WHOLE ENTRY-LENGTH
         AR    R5,R4                 ADD TO TOTAL-ENTRIES
         CR    R5,R2                 ALL ENTRIES PROCESSED ?
         BNL   SCANLUP1              (BNL=YES, READ NEXT BLOCK)
         LA    R1,0(R4,R1)           BUMP TO NEXT ENTRY
         B     SCANLUP2              RE-READ
CLOSEPDS DS    0H                    LAST DIRECTORY-BLOCK READ
         LA    R2,DLSTPDS            DCB-WORKAREA
         MVC   @MLWAREA(LLCLOS),LCLOS       MOVE LISTFORM INTO WAREA
         CLOSE ((R2)),MF=(E,@MLWAREA)       CLOSE LOADLIB
SCAN0080 DS    0H                    FILTER-DROPPED ENTRY
         LH    R1,0(R8)              LENGTH OF PROCESSED DSN+L'VOLSER
         LA    R1,2(,R1)             LENGTH OF LENGTH-FIELD
         AR    R8,R1                 POINT AT NEXT LOADLIB
         CLC   2(6,R8),CURRVOL       IS IT ON THE SAME VOLUME ?
         BE    SCANLUP0              (BE=YES, PROCESS IT)
SCAN0090 DS    0H                    END OF VOLUME
         L     R10,SAVE10            LOAD BACKPOINTER
         BR    R10                   BRANCH THERE
         LTORG
SCNDSN01 MVC   JFCBDSNM(0),8(R8)     CURRENT LOADLIB INTO JFCB
SCNDSN02 MVC   WORKDSN(0),8(R8)      CURRENT LOADLIB INTO WORKMESSAGE
CLRDYN01 XC    0(0,R7),0(R7)         BLANK OUT CURRENT LINE IN DYNAREA
*
*********************************************************************
* CLOSOUTF: CLOSE OUTPUT-FILE
*********************************************************************
*
CLOSOUTF ST    R10,SAVE10
         MVC   DLCLOS(LLCLOS),LCLOS         LISTFROM INTO WORKAREA
         CLOSE (DLMODLST),MF=(E,DLCLOS)     CLOSE SORTIN-FILE
OUTFCL90 L     R10,SAVE10            LOAD BACKPOINTER
         BR    R10                   BRANCH THERE
         LTORG
*
*
*********************************************************************
* CDSNFILT: LAST CALL TO AIACCTAB FOR DSN-FILTER
*********************************************************************
*
CDSNFILT ST    R10,SAVE10             SAVE BACKPOINTER
         TM    FLAGBYTE,FILTDSN       VOLUME-FILTER SPECIFIED ?
         BNO   CDSN0090               (BNZ=NO FILTER, DO NOT CLOSE)
         XC    PARMREC,PARMREC
         MVI   PARMREC,C'T'           INDICATE LAST RUN
         LA    R1,PARMADDR            A(PARMADDR)
         L     R15,TABADDR            RELOAD ENTRY-POINT
         BASSM R14,R15                BRANCH THERE
         DELETE EP=AIACCTAB           DELETE PROGRAM AFTER LAST CALL
CDSN0090 XR    R15,R15
         L     R10,SAVE10             LOAD BACKPOINTER
         BR    R10                    BRANCH THERE
         LTORG
*
**********************************************************************
* CALLSORT: CALL DFSORT
**********************************************************************
CALLSORT ST    R10,SAVE10             SAVE BACKPOINTER
         LA    R1,SORTDA              START OF SORT-24BIT-PARAMETERLIST
         ST    R1,@SORTDA             STORE IN ADDRESS-FIELD
         LA    R1,@SORTDA             POINT AT A(SORTDA)
         MVI   0(R1),X'80'            SET HIGH-ORDERBYTE
         LINK  EP=SORT                CALL SORT
CSRT0090 XR    R15,R15
         L     R10,SAVE10             LOAD BACKPOINTER
         BR    R10                    BRANCH THERE
         LTORG
*
**********************************************************************
* ISPFCLN: CLEANUP ISPF-ENVIRONMENT
**********************************************************************
ISPFCLN  ST    R10,SAVE10             SAVE BACKPOINTER
         XR    R15,R15                ASSUME RC=0
         L     R10,SAVE10
         BR    R10
         LTORG
*
*
***********************************************************************
*     PUTLBSNS: DO THE PUTLINE-BUSINESS                               *
***********************************************************************
PUTLBSNS ST    R10,SAVE10
         STFSMODE ON,INITIAL=YES     CLEAR ....
         STFSMODE OFF                      .... SCREEN
         LA    R1,IOPLADS            LOAD DYNAMIC IOPL
         USING IOPL,R1               FILL IT
         L     R0,CPLUPT             LOAD DYN. USER'S PROFILE TABLE
         ST    R0,IOPLUPT            STORE IT IN THE IOPL
         L     R0,CPLECT             LOAD ADDRESS OF DYN. ECT
         ST    R0,IOPLECT            STORE IT IN THE IOPL
         LA    R0,ECBADS             LOAD ADDR OF MY ECB TO R3
         ST    R0,IOPLECB            STORE ADDRESS OF ECBADS IN IOPL
         MVC   @MLWAREA(L@PUTLIN),@PUTLIN
         MVC   DTEXTADS(LTEXTADS),TEXTADS   MOVE CONSTANT TO MY AREA
         LA    R2,ALLMSGS            POINT TO VARIABLE MSG-AREA
         ICM   R1,B'1111',@ERRMSG    IS THERE AN ERRORMESSAGE ?
         BZ    PUTL010               (BZ=NO, WRITE DATA)
         LR    R2,R1                 POINT TO CORRECT ERRORMSG
PUTL010  DS    0H                    PREPARE FOR THE PUTLINE
         XC    DTEXTADS(4),DTEXTADS  CLEAR LENGTH-COUNTER
         LH    R1,0(R2)              LENGTH OF CURRENT ENTRY INTO R5
         LTR   R1,R1                 IS IT ZERO ?
         BZ    PUTL020               (BE = YES, ALL WRITTEN)
PUTL015  LA    R1,4(,R1)             ADD 4 FOR PUTLINE-HEADER
         STH   R1,DTEXTADS           STORE INTO WORKAREA
         BCTR  R1,0                  SUBTRACT 1 FOR EXECUTE
         EX    R1,PUTLMVC1           DO THE EXECUTE
         PUTLINE PARM=@MLWAREA,      DO THE PUTLINE                    X
               OUTPUT=(DTEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         LH    R1,0(R2)              LOAD LENGTH OF MESSAGE
         LA    R1,2(,R1)             ADD LENGTH OF MSG-LENGTH
         AR    R2,R1                 ADD CORRECT LENGTH OF MSG-TEXT
         B     PUTL010               TRY NEXT MESSAGE
PUTL020  XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
*
PUTLMVC1 MVC   DTEXTADS+4(0),2(R2)
***********************************************************************
*     CONSTANTS                                                       *
***********************************************************************
*
TEXTADS  DC    H'132'
         DC    H'0'
         DC    CL132' '
LTEXTADS EQU   *-TEXTADS
*
ERR0010  DC    H'76'
         DC    CL76'DYNALLOC OF VOLSER        UNDER DDNAME          FAIX
               LED. QVTOC TERMINATES.'
         DC    H'0'
*
ERR0020  DC    H'76'
         DC    CL76'DEALLOCATION OF VOLSER        UNSUCCESSFULL. DDN   X
                      STILL ALLOCATED.'
         DC    H'0'
*
ERR0030  DC    H'76'
         DC    CL76'DDNAME SCANPDS NOT ALLOCATED. LOADLIBS CAN NOT BE OX
               PENED. QVTOC IN ERROR.'
         DC    H'0'
*
ERR0060  DC    H'76'
         DC    CL76'DDNAME SCANVOL NOT ALLOCATED. VTOC OF VOLSER       X
                CANNOT BE OBTAINED.'
         DC    H'0'
*
ERR0070  DC    H'76'
         DC    CL76'UNABLE TO OPEN VTOC OF VOLSER        .QVTOC TERMINAX
               ED.'
         DC    H'0'
*
ERR0080  DC    H'76'
         DC    CL76'ERROR IN TRKCALC-ROUTINE FOR VOLSER       . QVTOC TX
               ERMINATES.'
         DC    H'0'
* SVC-99 TEXT-UNITS
TUDSTART DS    0F
TUDDNA1  DC    AL2(DALDDNAM),AL2(1),AL2(7),C'SCANVOL'
@TUDSSA1 EQU   *-TUDSTART
TUDSSA1  DC    AL2(DALSTATS),AL2(1),AL2(1),X'08'       <= DISP=SHR
@TUUNTA1 EQU   *-TUDSTART
TUUNTA1  DC    AL2(DALUNIT),AL2(1),AL2(8),C'SYSALLDA'
@TUVOLA1 EQU   *-TUDSTART
TUVOLA1  DC    AL2(DALVLSER),AL2(1),AL2(6)
TUVOLSTR EQU   *-TUDDNA1
         DC    CL6'      '
@TUDSNA1 EQU   *-TUDSTART
TUDSNA1  DC    AL2(DALDSNAM),AL2(1),AL2(44)
F4DSCB   DC    CL44'FORMAT4.DSCB'
LTUD     EQU   *-TUDDNA1
*
TUDDNA2  DC    AL2(DALDDNAM),AL2(1),AL2(7),C'SCANPDS'
LTUDDNA2 EQU   *-TUDDNA2
*
BINONES  DC    8XL1'FF'
NEWSET   DC    C'PGM(ISPTTDEF) PARM(ISPXXXXX)'
LNEWSET  EQU   *-NEWSET
*
EDMASK   DC     XL8'F020202020202020'
*
SORTDA   DS    0F                     SORT PARAMETERS DATAAREA
SORTPLEN DC    Y(SORTPEND)
@SRTSSTM DC    XL1'00',AL3(SORTSSTM)  A(START SORT STATEMENT)
@SRTESTM DC    XL1'00',AL3(SORTESTM)  A(START SORT STATEMENT)
@SRTSREC DC    XL1'00',AL3(SORTSREC)  A(START RECORD STATEMENT)
@SRTEREC DC    XL1'00',AL3(SORTEREC)  A(END RECORD STATEMENT)
@SRTE15  DC    4XL1'00'               A(E15 SORT ROUTINE)
@SRTE35  DC    4XL1'00'               A(E35 SORT ROUTINE)
@SRTMSGS DC    XL1'03',AL3(SORTMSGS)  A(MSGS-DD-STATEMENT)
SORTPEND EQU   *-@SRTSSTM
*
SORTSSTM DC    C' SORT FIELDS=(1,8,CH,A)'
SORTESTM DC    C' '
SORTSREC DC    C' RECORD TYPE=F'
SORTEREC DC    C' '
SORTMSGS DC    CL8'SYSOUT  '

         EJECT
***********************************************************************
*     MACRO LIST-FORM                                                 *
***********************************************************************
@CAMLST  CAMLST SEARCH,*,*,*
L@CAMLST EQU    *-@CAMLST
*
@CALL    CALL  ,(,,,,,,,,,,),MF=L  CALL LIST FORM
L@CALL   EQU    *-@CALL
*
@PUTLIN  PUTLINE MF=L
L@PUTLIN EQU    *-@PUTLIN
*
@READ    READ   PDSDECB,SF,LSTPDS,*,'S',MF=L
L@READ   EQU    *-@READ
*
@TRCALC  TRKCALC MF=L
L@TRCALC EQU    *-@TRCALC
*
LIOCINFO IOCINFO MF=(L,MTOKEN)
LLIOCINF EQU   *-LIOCINFO
*
         UCBSCAN MF=(L,MSCANWRK)
LLUCBSCA EQU   *-MSCANWRK
*
LOPEN    OPEN  (*),MF=L
LLOPEN   EQU   *-LOPEN
*
LCLOS    CLOSE (*),MF=L
LLCLOS   EQU   *-LCLOS
*
LRDJFCB  RDJFCB (VOLREF),MF=L
LLRDJFCB EQU   *-LRDJFCB
*
LRDJPDS  RDJFCB (LSTPDS),MF=L
*
         EJECT
*
***********************************************************************
*     DCBS    SECTION                                                 *
***********************************************************************
VOLREF   DCB   DSORG=PS,MACRF=E,DDNAME=SCANVOL,EXLST=*,                X
               IOBAD=*,EODAD=CLOSEDCB
LVOLREF  EQU   *-VOLREF
*
LSTPDS   DCB   DSORG=PS,MACRF=R,DDNAME=SCANPDS,EXLST=*,KEYLEN=8,       X
               LRECL=256,BLKSIZE=256,RECFM=F,EODAD=CLOSEPDS
LLSTPDS  EQU   *-LSTPDS
*
MODLST   DCB   DSORG=PS,MACRF=PM,DDNAME=SORTIN
LMODLST  EQU   *-MODLST
*
***********************************************************************
*     WORKING SECTION                                                 *
***********************************************************************
*
DWORK    DSECT
@MLWAREA DS    XL256                  MF=L WORKAREA
*
SAVEALOC DS    3F
SAVE10   DS    F
SAVE1    DS    F
@ERRMSG  DS    F
@SORTDA  DS    F
TABADDR  DS    F
*                                     FOR ISPF-INTERFACE
PARMADDR DS    F                      PARM FOR AIACCTAB
PARMREC  DS    CL80                   PARM FOR AIACCTAB
CURRVOL  DS    CL6                    CURRENT VOLSER
*
CPLCBUF  DS    F                      CPPL-WORKFIELDS
CPLUPT   DS    F
CPLPSCB  DS    F
CPLECT   DS    F
*
ECBADS   DS    F                      PUTLINE WORKFIELDS
IOPLADS  DS    4F
*
DTEXTADS DS    CL(LTEXTADS)           MSG-WORKFIELD
*
DNEWSET  DS    CL(LNEWSET)
DLOPEN   DS    CL(LLOPEN)
DLCLOS   DS    CL(LLCLOS)
DLCALL   DS    CL(L@CALL)
*
DLRDJFCB DS    CL(LLRDJFCB)
DVOLREF  DS    CL(LVOLREF)
DLSTPDS  DS    CL(LLSTPDS)
DLMODLST DS    CL(LMODLST)
         DS    0D
WAIOB    DS    CL(IOBR-IOBSTDRD)      LENGTH OF DASD-IOB (40 BYTES)
         DS    0D
WACCW2   DS    D                      FORMAT 0 CCW#1 (POINTED BY IOB)
WACCW3   DS    D                      FORMAT 0 CCW#2 MUST BE WACCW2 + 8
WACCW4   DS    D                      FORMAT 0 CCW#3 MUST BE WACCW2 +16
WAECB    DS    F
WAEXLST  DS    F
MBBCCHHR DS    XL8
DSCBPTRK DS    HL1                    # OF DSCBS PER TRACK
WAJFCB   DS    XL176
DLTUD    DS    CL(LTUD)
TUPTR001 DS    5F
RBPTR    DS    F
REQBLK   DS    CL(S99RBEND-S99RB)
REQBLKLN EQU   L'REQBLK
DEVWORD  DS    CL4
UCBCOPY  DS    CL48
TOKEN    DS    CL48
SCANWRK  DS    CL100
*
FLAGBYTE DS    X
VTOCREAD EQU   X'80'
READPDS  EQU   X'40'
FILTVOL  EQU   X'20'
FILTDSN  EQU   X'10'
FILTVUP  EQU   X'08'
*
WCAMLST  DS    0F,190X
WDSCBDSN DS    CL44
WDSCBVOL DS    CL6
WDSCBWA  DS    CL140
*
WORKMSG  DS    CL80
WORKDSN  DS    CL56                 44DSN+(MEMBER)+2*'
*
WDIRBLK  DS    0CL264
WDIRKEY  DS    CL8
WDIRDATA DS    CL256
WDIRUDL  DS    XL1
*
ALLMSGS  DS    44CL32000
LALLMSGS EQU   *-ALLMSGS
*
LDWORK   EQU   *-DWORK
*
         EJECT
*
         IEFZB4D0
         IEFZB4D2
*
DSCB1    DSECT                        FORMAT1-DSCB PREFIX: CCHHRKDD
         DS    0D                     ALIGN ON DOUBLEWORD-BNDRY
F1DPCC   DS    H                      CC OF CURRENTLY READ VTOC-TRK
F1DPHH   DS    H                      HH OF CURRENTLY READ VTOC-TRK
F1DPR    DS    HL1                    R  OF CURRENTLY READ VTOC-TRK
F1DPK    DS    HL1                    KEYLENGTH OF CURRENT DSCB
F1DPDD   DS    H                      DATALENGTH OF CURRENT DSCB
         IECSDSL1 (1)                 FORMAT-1 DSCB
LDSCB1   EQU   *-DSCB1
*
DSCB4    DSECT                        FORMAT4-DSCB PREFIX: CCHHRKDD
         DS    0D                     ALIGN ON DOUBLEWORD-BNDRY
F4DPCC   DS    H                      CC OF CURRENTLY READ VTOC-TRK
F4DPHH   DS    H                      HH OF CURRENTLY READ VTOC-TRK
F4DPR    DS    XL1                    R  OF CURRENTLY READ VTOC-TRK
F4DPK    DS    XL1                    KEYLENGTH OF CURRENT DSCB
F4DPDD   DS    H                      DATALENGTH OF CURRENT DSCB
F4DVTOC  DS    XL44                   'DSN' OF VTOC, NOT MAPPED BY F4
         IECSDSL1 (4)
LDSCB4   EQU   *-DSCB4
         IHAPSA
         IKJTCB DSECT=YES
         IEFTIOT1
         PRINT GEN
         IEZIOB
         PRINT NOGEN
         IEFUCBOB
         IKJCPPL
         IKJIOPL
         DSECT
         IEFJFCBN                      SYS1.MODGEN
         DCBD  DSORG=XE,DEVD=DA        SYS1.MACLIB
         CVT   DSECT=YES
         END   QVTOC
/*
//SYSLIB    DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.CNTL
//          DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,DISP=(NEW,PASS),
//          SPACE=(3200,(200,50)),DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80)
//SYSPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//*
//* =====================================================
//* ===== L I N K A G E   E D I T O R ===================
//* =====================================================
//LKED      EXEC PGM=HEWL,REGION=1024K,COND=(0,NE),
//          PARM='XREF,LIST,RENT,REUS'
//SYSLMOD   DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.LOAD
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,3))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)
//          DD *
  NAME    QVTOC(R)
/*
//TESTRC IF (RC EQ 87) THEN
//*                             CHANGE RC TO "0" TO LET QVTOC RUN
//SCHTEPP3   EXEC PGM=IKJEFT01,REGION=8M,PARM='QVTOC'
//STEPLIB  DD  DISP=SHR,DSN=SA1T.T750K.CBTFILE.LOAD
//SYSPRINT DD  SYSOUT=*
//SYSTSPRT DD  SYSOUT=*
//SYSOUT   DD  SYSOUT=*
//SORTIN DD   DSN=&&MEMBERS,DISP=(,PASS),UNIT=VIO,
//            SPACE=(CYL,(1,3),RLSE),
//            DCB=(LRECL=80,RECFM=FB,BLKSIZE=27920)
//SORTOUT  DD SYSOUT=*,LRECL=80
//SYSTSIN  DD  DUMMY
//ACTTRACE DD  SYSOUT=*
//DSNFILT   DD  *
;  AIACCTB - TABLE
KEYLEN=044,ARGLEN=007
;  START OF DATA-PORTION
**                                          ,PROCESS
SYS%.LINK*                                  ,DROP
**.LOAD*                                    ,PROCESS
;---+----1----+----2----+----3----+----4----+----5----+----6----+----7- --+----8
/*
//VOLFILT   DD  *
;  AIACCTB - TABLE
KEYLEN=006,ARGLEN=007
;  START OF DATA-PORTION
**    ,PROCESS
DMS*  ,DROP
WORK%%,DROP
;---+----1----+----2----+----3----+----4----+----5----+----6----+----7- --+----8
/*
//*
//ENDTEST ENDIF
