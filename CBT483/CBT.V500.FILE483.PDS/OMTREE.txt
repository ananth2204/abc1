/* Rexx */
/* */
/* This Rexx builds the hierarchy-tree of all currently mounted HFS */
/* and  shows them in a pseudo-graphic way using either graphic es- */
/* cape, the 3278T-characterset or common characters.               */
/* */
Address TSO                    /* set environment                  */
Parse Upper Arg mode           /* dispmode set by user?            */
If Wordpos(mode,'GRAPHIC DEFAULT CHAR') > 0 Then
  disp_mode = mode             /* yes, store for later use         */
Else
  disp_mode = ''               /* no, will be evaluated later      */
Call Syscalls 'ON'             /* enable openedition-calls         */
Address SYSCALL                /* address it                       */
'Getmntent files.'             /* get mounted files into array     */
Address TSO                    /* set environment                  */
highest = 0                    /* total amount of hiearchy-levels  */
/* The following loop initializes several arrays that will be used */
/* to compute the # of children each hfs has and to save a back-   */
/* pointer to the original element-number of the "files."-array    */
Do i = 1 to files.0            /* # of mounted HFS's               */
  files.mnte_fsname.i = Strip(files.mnte_fsname.i,'B',' ')
  children.i = ''              /* string w. devices of "children"  */
  drawn.i = 'NO'               /* boolean: hfs already "drawn"     */
  dev =  files.mnte_dev.i      /* logical device-# of current hfs  */
  dev_el.dev = i               /* backpointer to the original ar-  */
End                            /* ray element. End loop (# of hfs) */
/* */
/* The following loop determines the hierarchy-level of each hfs   */
/* and saves it in the level. - array-element.                     */
/* The level is computed using the pardev-element, which is the    */
/* parent-device of the hfs and then evaluating this ones mother   */
/* by making the parent the current and increasing the level by 1. */
/* This is repeated until the parent-device is '0', which is the   */
/* root-hfs.                                                       */
/* */
Do i = 1 to files.0            /* # of mounted HFS's               */
level = 0                      /* hiearchy-level of each hfs       */
  mom_found.i = 'NO'           /* boolean for "grand-children"     */
  parent = files.mnte_pardev.i     /* load the parent-device-nr    */
  Do While parent ¬= 0         /* not yet the root-hfs             */
    level = level + 1          /* increase # of levels checked     */
    If level > highest Then    /* is this a new hierarchy-level ?  */
      highest = level          /* yes, save new highest level      */
    parnti = dev_el.parent     /* array-element of parent          */
    parent = files.mnte_pardev.parnti    /* try with new parent    */
    If mom_found.i ¬= 'YES' Then   /* "mother" already found ?     */
      children.parnti = children.parnti' 'i   /* no, fill string   */
    mom_found.i = 'YES'        /* set boolean to avoid a child can */
  End                          /* have more than 1 parent          */
  level.i = level + 1          /* inc. 1 for root-level found      */
End                            /* end loop                         */
highest = highest + 1          /* synchronize highest after root   */
/* */
/* The following loop calls a subroutine that "draws" a box around */
/* the current hfs. see comment at Draw_boxes for further infos.   */
/* */
Do i = 1 to files.0            /* # of mounted HFS's               */
  Call Draw_boxes i level.i    /* draw the box                     */
End                            /* end loop                         */
Do i = 1 to highest            /* initialize hfs-per-level array   */
  pos_on_level.i = ''          /* set array - element to ''        */
End                            /* end loop                         */
scrl = 0             /* # of log. screen-lines w/o connectionlines */
/* */
/* The following subroutine groups, from the left to the right,    */
/* the "family" whithin the whole openedition.                     */
/* see comment at Build_family for further information.            */
Call Build_family              /* call the subroutine              */
/* The following loop "draws" the boxes of those hfs which were    */
/* identified as "parents" in the Build_family subroutine, at the  */
/* logical "left edge" of the current level. the root-hfs has a    */
/* parent-device of 0, so the loop-counter starts at 2.            */
/* */
Do j = 2 to highest            /* start at lvl 2, root is top      */
  Do k = 1 to box.0            /* # of lines per hfs-box           */
    pnlline.k = ''             /* Initialize logical panel-line    */
  End                          /* end of init-loop                 */
  a = j - 1                    /* point to the next higher level   */
  Do i = 1 to Words(realparnt.j)   /* chk every mother of this lvl.*/
    motherdev = Word(realparnt.j,i)   /* pick mothers device-#     */
    mother = dev_el.motherdev  /* get the real files.-element-#    */
    pos_on_level.a = pos_on_level.a' 'mother  /*into positionstring*/
    drawn.mother = 'YES'       /* indicate that this el. is drawn  */
    If motherdev > 0 Then      /* valid element of files.-array ?  */
      Do k = 1 to box.0        /* #of lines for a box              */
        pnlline.k = pnlline.k' 'box.mother.k  /* fill log. pnlline */
      End                      /* box drawn into logical panelline */
  End                          /* all parents of this level drawn  */
  Do k = 1 to box.0            /* fill all log. panellines of this */
    scrl = scrl + 1            /* level into overall log. pnllines */
    scrline.scrl = pnlline.k   /* and increase the counter of all  */
  End                          /* lines to be displayed on the pnl.*/
End                            /* End of drawing the parents-loop  */
savescrl = scrl                /* save # of lines already filled   */
scrl = 0                       /* reset counter for following loop */
/* */
/* The following loop adds the children right to the parents       */
/* whithin the same level. the last level, the one without parents */
/* in it, is added completely, at the "end" of the scrline-array   */
/* */
Do j = 1 to highest            /* Loop-counter: once per level     */
  Do k = 1 to box.0            /* # of lines per hfs-box           */
    pnlline.k = ''             /* Initialize logical panel-line    */
  End                          /* end of init-loop                 */
       /* start of inner loop: all "sisters", hfs's at the same    */
       /* level, are concatenated into the same log. panel-record  */
  Do i = 1 to Words(sisterstr.j)   /* inner loop: once per "sister"*/
    elem = Word(sisterstr.j,i)     /* extract files.i of "sister"  */
    If drawn.elem = 'NO' Then      /* has it already been drawn ?  */
      Do                           /* no, occupy slot in level-rec.*/
        pos_on_level.j = pos_on_level.j' 'elem    /* add rightmost */
        Do k = 1 to box.0          /* Loop: # of lines per box     */
          pnlline.k = pnlline.k' 'box.elem.k      /* add rightmost */
        End                    /* end of innermost loop: 1/boxline */
      End                      /* end of logically drawing element */
  End                          /* end of loop, all sisters drawn   */
  Do k = 1 to box.0            /* once per level: add the logical  */
    scrl = scrl + 1            /* panellines to the overall-array  */
    If scrl > savescrl Then    /* is this a level w/o parents ?    */
      scrline.scrl = pnlline.k     /* yes, just write the line     */
    Else                       /* no, line already exists, add     */
      scrline.scrl = scrline.scrl''pnlline.k  /* sisters beneath   */
    scrline.scrl = Strip(scrline.scrl,'B',' ')  /* Strip blanks    */
  End                          /* end of panellines per level      */
End                            /* end of overall panellines        */
scrline.0 = scrl               /* fill overall-array w. counter    */
dyndisp = ''
'ISPEXEC PQUERY PANEL(OMTREE1) AREANAME(dyndisp),
         AREATYPE('atypname'),
         WIDTH('dynwidth') DEPTH('dyndepth') ROW('arowname'),
         COLUMN('acolname')'   /* Query panel-characteristics      */
dynwidth = dynwidth - 1        /* subtract 1,the attrchar at pos1  */
/* */
/* The following subroutine connects the parents of every level    */
/* with their children and insterts lines for drawing if necessary.*/
/* See Draw_lines for further info.                                */
/* */
Call Draw_lines                /* call the subroutine              */
/* */
/* The following lines determine the kind of display to be used.   */
/* disp_mode is the only parameter accepted and can be either      */
/* GRAPHIC, DEFAULT, or CHAR                                       */
If disp_mode = '' Then        /* no parm passed, find "best" method*/
  Do
    'ISPEXEC VGET (ZGE ZENVIR)'    /* evaluate callers environment */
    If zge = 'NO' Then             /* No graphics, use char-mode   */
      disp_mode = 'CHAR'
    Else If zenvir < 'ISPF 4.1' Then   /* old fashioned ISPF,      */
      Do                          /* no CUA-panels, set pseudo-   */
        disp_mode = 'DEFAULT'      /* graphic characters           */
        'ISPEXEC VGET ZTERM'       /* get actual terminalsetting   */
        term_set = zterm           /* save it                      */
        new_set = '3278T'          /* set "my" desired value       */
        'ISPEXEC SELECT PGM(ISPTTDEF) PARM(ISP'new_set')'  /*tell ISPF*/
      End
    Else
      disp_mode = 'GRAPHIC'        /* graphics on and supported    */
  End
Else                               /* disp_mode entered by user    */
  Do                               /* no further action except if  */
    If disp_mode = 'DEFAULT' Then  /* DEFAULT-mode                 */
      Do
        'ISPEXEC VGET ZTERM'       /* get actual terminalsetting   */
        term_set = zterm           /* save it                      */
        new_set = '3278T'          /* set "my" desired value       */
        'ISPEXEC SELECT PGM(ISPTTDEF) PARM(ISP'new_set')'  /*tell ISPF*/
      End
  End
/* The following statements represent the display loop; panel      */
/* OMTREE1 is displayed unless the user presses 'END'              */
/* */
disp_Rc = 0                    /* boolean: 0=display panel, 8=exit */
Call Build_page 'INIT'         /* compose logical page to be shown */
Do While disp_Rc = 0           /* panel display loop               */
  old_dyndisp = dyndisp        /* save dyndisp before display      */
  'ISPEXEC DISPLAY PANEL(OMTREE1)'     /* display the panel        */
  disp_Rc = Rc                 /* save return-code from display    */
  If disp_Rc = 0 Then          /* was it zero ?                    */
    Do                         /* yes, proceed                     */
      selected = Compare(old_dyndisp,dyndisp)  /* compare dyndisps */
      If selected > 0 Then     /* was a selection made ?           */
        Do                     /* yes, find selected hfs           */
          eff_l = selected % (dynwidth+1)   /* effective line-# is */
          eff_l = flin + eff_l   /* first line/page + line in curr.*/
          eff_c = selected // (dynwidth+1)  /* effective col-# is  */
          eff_c = fcol + eff_c - 2  /* 1st col of screen + current */
                               /* pos.-2 (1 f. x'03', 1 f. start=1 */
          Do i = 1 to files.0  /* search array for matching grids  */
            If gridval.i = eff_c' 'eff_l Then  /* found ?          */
              Call Zoom_hfs
          End                  /* end of inner loop                */
        End                    /* end of selection made            */
      Call Build_page 'SHOW'   /* check for scrolling              */
    End                        /* end of current display           */
End                            /* end of display-loop              */
If disp_mode = 'DEFAULT' Then
  'ISPEXEC SELECT PGM(ISPTTDEF) PARM(ISP'term_set')'      /* reset */
Exit                           /* end of program                   */
/* */
/* Subroutines */
/* */
/* Draw_boxes gets passed the current element of files. -array and   */
/* its hierarchy level. A box is drawn around the hfs-name + mount-  */
/* point. the size of the box depends on which string is the longest:*/
/* HFS-name, mountpoint, or the # of children which will be connected*/
/* to this box (2 byte per child).                                   */
Draw_boxes:                    /* Draw_boxes: draw a box around hfs  */
arg curr lv                    /* get element-# and hierarchylevel   */
l1 = Length(files.mnte_fsname.curr)     /* length of HFS-name        */
l2 = Length(files.mnte_path.curr)       /* length of mountpoint      */
l3 = Length(Copies('40BB'x,(Words(children.curr)))) /* #of children  */
li4 = ('014002'x) || 'Ishell' || ('03'x)  /* Commandline             */
l4 = Length(li4)
Call Hfs_permissions curr      /* get permission scheme              */
li5 = Strip(accstr,'B',' ')
l5 = Length(li5)
dsnl = Max(l1,l2,l3,l4,l5)     /* find the longest line in the box   */
box.curr.1 = ('AC'x) || Substr('BF'x,1,dsnl,'BF'x) || ('BC'x)  /* l1 */
If lv > 1 Then                 /* if not root, draw anchor f. parent */
  box.curr.1 = ('AC'x) || Centre('CB'x,dsnl,'BF'x) || ('BC'x)  /*ancr*/
box.curr.2 = ('FA'x) || Centre(files.mnte_fsname.curr,dsnl) || ('FA'x)
box.curr.3 = ('FA'x) || Centre(files.mnte_path.curr,dsnl) || ('FA'x)
box.curr.4 = ('FA'x) || Centre(li4,dsnl) || ('FA'x)
cmdline = 4                    /* line-# of command-field in the box */
box.curr.5 = ('FA'x) || Centre(li5,dsnl) || ('FA'x)
box.curr.6 = Copies('40CC'x,(Words(children.curr)))
box.curr.6 = ('AB'x) || Centre(box.curr.6,dsnl) || ('BB'x)
box.curr.6 = Translate(box.curr.6,'BF'x,' ')
box.0 = 6                      /* box-size in lines                  */
Return                         /* end of subroutine                  */
/* Build_family: This subroutine builds several arrays that will     */
/* help computing the lines to be drawn later in the program.        */
/* Each array has as much elements as there are hierarchy-levels.    */
/* parentstr.x : a string with the device-# of every hfs which is    */
/*               a parent at the current level.                      */
/* realparnt.x : parentstr w/o duplicates. (a parent can have more   */
/*               than on child).                                     */
/* sisterstr.x : a string containing the real files.-element-# of    */
/*               the currently processed hfs.                        */
Build_family:                  /* start the subroutine               */
Do j = highest to 1 by -1      /* process bottom-up                  */
  parentstr.j = ''             /* string w. all parents              */
  realparnt.j = ''             /* parents w/o duplicates             */
  sisterstr.j = ''             /* sisters                            */
  Do i = 1 to files.0          /* inner loop: once per hfs-file      */
    If level.i = j Then        /* is this one of the current level ? */
      Do                       /* yes, fill the strings              */
        sisterpos = Wordpos(files.mnte_pardev.i,parentstr.j)
        If sisterpos > 0 Then  /* is this a child  ?                 */
          Do                   /* yes, compute position              */
            /* This statements optimize the position whithin a family*/
            /* children are grouped directly under the parent, as    */
            /* far as possible.                                      */
            sp = Wordindex(parentstr.j,sisterpos) - 1  /* pos. in pa-*/
            filler = files.mnte_pardev.i' ' /* -rent-str.ng,make word*/
            parentstr.j = Insert(filler,parentstr.j,sp) /* new p-str.*/
            ip = Wordindex(sisterstr.j,sisterpos) - 1  /* same in i- */
            filler = i' '      /* -string to know which files. it is */
            sisterstr.j = Insert(filler,sisterstr.j,ip) /* new s-str */
          End                  /* end of child-position-calculation  */
        Else                   /* This is not a child, place at the  */
          Do                   /* right end of parentstr.            */
            parentstr.j = parentstr.j' 'files.mnte_pardev.i
            realparnt.j = realparnt.j' 'files.mnte_pardev.i
            sisterstr.j = sisterstr.j' 'i   /* build new strings     */
          End                  /* end of not-a-child action          */
      End                      /* end of correct-level hfs-actions   */
  End                          /* end of inner loop: once per hfs    */
End                            /* end of outer loop: once per level  */
Return                         /* end of subroutine                  */
Draw_lines:
/* */
/* Draw_lines inserts one line in the effective output-array 'line.' */
/* per connection to draw. connections are made from the rightmost   */
/* parent of the highest level (root) to the leftmost child at the   */
/* lowest level in descending sequence. The correct relationship be- */
/* tween child and parent is computed by using the # of anchorpoints */
/* the current parent has. this amount is connected to the currently */
/* rightmost entry in endposstr. after having established the con-   */
/* nection, length between start and end is computed. If length is   */
/* < 0, the direction is changed to leftside. After having drawn the */
/* line, the anchorpoints are deleted in startposstr.x and in        */
/* endposstr.x . The deleted endposstr-entry is added to endline.x . */
/* At the end of each entry, the endline.x -positions are filled w.  */
/* vertical bars to complete the line. The same thing is done with   */
/* those startpos-entries being not the current.                     */
a = 0                          /* counter of total-lines             */
grid = 0                       /* counter of total-lines             */
j = 0                          /* level-counter                      */
longest_line = 0               /* find longest line                  */
Do i = 1 to scrline.0          /* outmost loop: once per scrline     */
  If i = 1 Then                /* At the right top of the screen     */
    Call Add_info_box          /* the info-box is added              */
  If i <= box.0 Then           /* justify the infobox at the right   */
    Do                         /* edge of the screen                 */
      numblks = dynwidth - (Length(scrline.i) + Length(infoline.i))
      If numblks >= 0 Then     /* fill blanks between root + infobox */
        scrline.i = (scrline.i) || Substr(' ',1,numblks,' ') ||,
                    (infoline.i)
      Else                     /* if overlaps occur, infobox on top  */
        Do
          scrline.i = Substr(scrline.i,1,dynwidth,' ')
          ostrt = dynwidth - Length(infoline.i) + 1
          scrline.i = Overlay(infoline.i,scrline.i,ostrt)
        End
    End
  If Length(scrline.i) > longest_line Then  /* is this the longest ? */
    longest_line = Length(scrline.i)   /* yes, save value for panel  */
  a = a + 1                    /* total-lines up 1                   */
  line.a = scrline.i           /* fill array - element               */
  If i // box.0 = cmdline Then      /* is this a "command" - line    */
    Do                         /* yes, compute location of inputfield*/
      grid = grid + 1          /* level of this command line         */
      currpos = 0              /* current position (next cmd-field)  */
      Do k = 1 to Words(pos_on_level.grid)   /* # of sisters in level*/
        currpos = Pos('014002'x,scrline.i,currpos+1) /* get cmd-pos  */
        x = Word(pos_on_level.grid,k)  /* get real element of files. */
        gridval.x = currpos+1' 'a   /* save coordinates in gridval   */
      End                      /* end of gridval - array             */
    End                        /* end of command-line                */
  If i // box.0 = 0 Then       /* is this an anchor-line of parent?  */
    Do                         /* yes                                */
      j = j + 1                /* inc. level-counter                 */
      startposstr.j = ''       /* initialize startposstr.            */
      startpos = 0             /* 1st anchor-point                   */
      endposstr.j = ''         /* pos. of childrens anchor           */
      endpos = 0               /* 1st anchorpoint of child           */
      endline.j = ''           /* those already connected            */
      c = j + 1                /* pointer to next level              */
      Do Words(pos_on_level.c)    /* total amount of children        */
        startpos = Pos('CC'x,scrline.i,startpos+1)   /* get startpos */
        startposstr.j = startposstr.j' 'startpos     /* save it      */
        q = i + 1                 /* anchor of child                 */
        endpos = Pos('CB'x,scrline.q,endpos+1)    /* pos. of anchor  */
        endposstr.j = endposstr.j' 'endpos           /* save it      */
      End                      /* end of inner loop                  */
      Do Words(pos_on_level.c)    /* next loop: once per #of children*/
        a = a + 1              /* next line of overall-array         */
        q = i + 1              /* next line of scrline.x             */
        line.a = Substr(' ',1,Length(scrline.q),' ') /* init new line*/
        Do q = 1 to Words(startposstr.j)-1   /* write vertical bars  */
          line.a = Overlay('FA'x,line.a,(Word(startposstr.j,q)))
        End                    /* end of vertical bars before line   */
        q = Words(startposstr.j)       /* get # of remaining anchors */
        l1 = Word(startposstr.j,q)     /* eff. startpos. in the line */
        l2 = Word(endposstr.j,q)       /* eff. endpos. in the line   */
        linel1 = Max(l1,l2)    /* line1 is the bigger one            */
        linel2 = Min(l1,l2)    /* line2 is the smaller one           */
        linelen = linel1 - linel2      /* compute length of connectio*/
        If linelen > 0 Then            /* is it > 0 ?                */
          Do                           /* yes, draw the line         */
            line.a = Overlay('BF'x,line.a,linel2,linelen,'BF'x)
            If l1 < l2 Then    /* is it direction right ?            */
              Do               /* Yes, draw the line-ancles          */
                line.a = Overlay('AB'x,line.a,linel2)
                line.a = Overlay('BC'x,line.a,linel1)
              End
            Else               /* is it direction left ?             */
              Do               /* Yes, draw the line-ancles          */
                line.a = Overlay('AC'x,line.a,linel2)
                line.a = Overlay('BB'x,line.a,linel1)
              End
          End                  /* end of drawing the line            */
        Else If j < highest Then       /* length = 0 ?               */
          line.a = Overlay('FA'x,line.a,linel1)  /* Yes, just a bar  */
        Else                   /* end of Else - If                   */
          Nop                  /* end of drawing the line            */
        Do b = 1 to Words(endline.j)   /* draw remaining verticalbars*/
          line.a = Overlay('FA'x,line.a,(Word(endline.j,b)))
        End                    /* current panelline is drawn         */
        endline.j = endline.j' 'Word(endposstr.j,q)  /* save endpos  */
        startposstr.j = Delword(startposstr.j,q,1)   /* del rightmost*/
        endposstr.j = Delword(endposstr.j,q,1)       /* del rightmost*/
      End                      /* end child in this level            */
    End                        /* end of all levels                  */
End                            /* end of all lines, array ok.        */
/* */
/* corrective action: If there is more than 1 hierarchy level, the   */
/* last line is just a x'03'. */
line.0 = a - 1                 /* complete the array, YIIPIIEE ||||| */
/* a-1 because of the last level having no children, last line empty */
Return                         /* end of subroutine                  */
/* */
Build_page:
/* */
/* Build_page composes the content (dyndisp) of Panel OMTREE1.       */
/* One parameter is passed: 'INIT' = first call, set defaults.       */
/* 'SHOW' = subsequent call. If a scroll-key was pressed, the new    */
/* dyndisp- contents and the new line + column values are computed.  */
Arg build_type                 /* pick passed parm                   */
If build_type = 'INIT' Then    /* is this the initial call ?         */
  Do                           /* Yes, set defaults                  */
    flin = 1                   /* first line of dyndisp              */
    tlin = line.0              /* total number of lines              */
    llin = Min(dyndepth,tlin)         /* last line of logical page   */
    'ISPEXEC CONTROL NONDISPL END'    /* do a panel-call w/o display */
    'ISPEXEC DISPLAY PANEL(OMTREE1)'  /* to obtain last visible line */
    vlin = Min(dyndepth,vdepth,tlin)  /* last visible line in displ. */
    fcol = 1                   /* first column at first display      */
    lcol = Min(dynwidth,longest_line)      /* last col. of dyndisp   */
    tcol = longest_line        /* total number of columns            */
  End                          /* end of initial call                */
Else                           /* not the first call, scroll         */
  Do
    'ISPEXEC VGET (ZSCROLLN ZVERB ZSCROLLA)'  /* get scroll-vars     */
    Select                     /* select appropriate action          */
      When zverb = 'UP' Then   /* "UP" specified ?                   */
        Do                     /* yes, compute # of lines to scroll  */
          If zscrolla = 'MAX' Then      /* was "MAX" specified ?     */
            Do                 /* yes                                */
              flin = 1         /* point at top of line.-array        */
              llin = Min(dyndepth,tlin)   /* last line of 1st page   */
              vlin = Min(llin,vdepth)     /* last line of page#1     */
            End                /* new value calculated               */
          Else                 /* "max" not specified                */
            Do
              xl = flin - zscrolln    /* subtract #of lines specified*/
              flin = Max(1,xl)        /* find new top line (or 1)    */
              xl = llin - zscrolln    /* subtract #of lines specified*/
              If xl <= 0 Then         /* Is this now < 0 ?           */
                llin = Min(dyndepth,tlin)      /* yes, show 1st page */
              Else
                Do
                  xl = flin + dyndepth-1
                  llin = Min(xl,tlin)
                End
              vlin = Min(llin,tlin,(flin+vdepth))    /* last visible */
            End                /* new value calculated               */
        End                    /* end of "UP" scroll                 */
      When zverb = 'DOWN' Then    /* "DOWN" specified ?              */
        Do                     /* yes, compute # of lines to scroll  */
          If zscrolla = 'MAX' Then      /* was "MAX" specified ?     */
            Do                 /* yes                                */
              flin = tlin - Min(vdepth,dyndepth) + 1 /* 1st of lastp.*/
              llin = tlin      /* last line = total number of lines  */
              vlin = tlin      /* last line = total number of lines  */
            End                /* new value calculated               */
          Else                 /* "max" not specified                */
            Do
              xl = flin + zscrolln     /* add # of rows specified    */
              flin = Min(xl,tlin)      /* do not point "behind" last */
              xl = llin + zscrolln     /* add # of rows specified    */
              llin = Min(xl,tlin)      /* do not point "behind" last */
              vlin = Min(llin,tlin,(flin+vdepth))    /* last visible */
            End                /* new value calculated               */
        End                    /* end of "DOWN" scroll               */
      When zverb = 'LEFT' Then    /* "LEFT" specified ?              */
        Do                     /* yes, compute # of cols. to scroll  */
          If zscrolla = 'MAX' Then      /* was "MAX" specified ?     */
            Do                 /* yes                                */
              fcol = 1         /* point at column 1                  */
              lcol = Min(dynwidth,tcol)   /* last col. of page 1     */
            End                /* new value calculated               */
          Else                 /* "max" not specified                */
            Do
              xl = fcol - zscrolln + 1   /* 1st col of left. page    */
              If Datatype(zscrolla) = 'NUM' Then  /* if abs. numbers */
                xl = xl - 1    /* used, decrease 1 from xl (base=1)  */
              fcol = Max(1,xl)           /* set new value            */
              lcol = fcol + dynwidth - 1    /* last col of left page */
            End                /* new value calculated               */
        End                    /* end of "LEFT" scroll               */
      When zverb = 'RIGHT' Then   /* "RIGHT" specified ?             */
        Do                     /* yes, compute # of cols. to scroll  */
          If zscrolla = 'MAX' Then      /* was "MAX" specified ?     */
            Do                 /* yes                                */
              fcol = tcol - dynwidth + 1  /* 1st col. rightmost page */
              lcol = tcol      /* total numbers of cols.             */
            End                /* new value calculated               */
          Else                 /* "max" not specified                */
            Do
              xl = fcol + zscrolln - 1   /* 1st col. right page      */
              If Datatype(zscrolla) = 'NUM' Then  /* if abs. numbers */
                xl = xl + 1    /* used, increase 1 from xl (base=1)  */
              fcol = Min(xl,tcol)        /* must be < total-columns  */
              xl = lcol + zscrolln - 1   /* last col. right page     */
              If Datatype(zscrolla) = 'NUM' Then  /* if abs. numbers */
                xl = xl + 1    /* used, increase 1 from xl (base=1)  */
              lcol = Min(xl,tcol)        /* must be < total-columns  */
            End                /* new value calculated               */
        End                    /* end of "RIGHT" scroll              */
      Otherwise                /* no scrolling action to be performed*/
        Nop                    /* nop                                */
    End                        /* end of select                      */
  End                          /* end of "SHOW"-call                 */
dyndisp = ''                   /* "CLEARSCREEN"                      */
shadow = ''                    /* No attribute override              */
Do i = flin to llin            /* fill new "page" to be shown        */
  dyndisp = (dyndisp) || ('03'x) || (Substr(line.i,fcol,dynwidth))
End                            /* dyndisp filled, show it            */
If disp_mode = 'CHAR' Then
  dyndisp = Translate(dyndisp,'++++|-oo','ABACBBBCFABFCCCB'x)
Else If disp_mode = 'GRAPHIC' Then
  Do
    shadow = Translate(dyndisp,'$$$$$$$$','ABACBBBCFABFCCCB'x)
    dyndisp = Translate(dyndisp,'DEMNesPG','ABACBBBCFABFCCCB'x)
  End
Else
  Nop
Return
/* */
Zoom_hfs:
/* */
/* Zoom_hfs: If the ISHELL-Command was selected, the current path  */
/* is taken as the new working directory and the ISPF-shell is     */
/* called.                                                         */
rd = files.mnte_path.i         /* pathname to be used as workdir   */
command = Substr(dyndisp,selected,1)   /* validate the entered CMD */
Upper command                  /* make it uppercase                */
Select
  When command = '/' | command = 'S' Then
    Do
      Call Syscalls 'ON'       /* enable openedition-calls         */
      Address SYSCALL          /* address it                       */
      'chdir (rd)'             /* set new working directory        */
      Address TSO
      'ISHELL'                 /* call ISHELL                      */
      Address SYSCALL          /* address it                       */
      'chdir (cwd)'            /* reset original workingdirectory  */
    End
  Otherwise                    /* Room for enhancements (8-))      */
    Nop
End
Return
/* */
Hfs_permissions:
/* */
/* Check callers permissions */
Arg curr                       /* HFS-number                        */
rd = files.mnte_path.curr      /* Name of HFS to be checked         */
sec.0 = '(---)'
sec.1 = '(--x)'
sec.2 = '(-w-)'
sec.3 = '(-wx)'
sec.4 = '(r--)'
sec.5 = '(r-x)'
sec.6 = '(rw-)'
sec.7 = '(rwx)'
Call Syscalls 'ON'             /* enable openedition-calls         */
Address SYSCALL                /* address it                       */
'stat (rd) prmbits.'           /* obtain permission bits           */
prmbits.ST_MODE = Right(prmbits.ST_MODE,4,'0')
accstr = ''
Do a = 2 to 4
  el = Substr(prmbits.ST_MODE,a,1)    /* get next number (octal)   */
  accstr = accstr' 'sec.el     /* add visible form                 */
End
Address TSO
Return
/* */
Add_info_box:
/* Add_info_box puts a small information box right on top of the   */
/* first screen being displayed.                                   */
Call Syscalls 'ON'             /* enable openedition-calls         */
Address SYSCALL                /* address it                       */
'geteuid'                      /* obtain callers userid            */
euid = Retval
'getpwuid (euid) pwuid.'       /* obtain user-info                 */
Address TSO
infoline.2 = ('04'x) || 'OMVS-Userid:' ||,        /* box contents  */
             ('05'x) || Word(pwuid.PW_UID,1) || ('03'x)
l2 = Length(infoline.2)
infoline.3 = ('04'x) || 'Group:' ||,
             ('05'x) || Word(pwuid.PW_GID,1) || ('03'x)
l3 = Length(infoline.3)
infoline.4 = ('04'x) || 'Work-Dir:' ||,
             ('05'x) || Word(pwuid.PW_DIR,1) || ('03'x)
l4 = Length(infoline.4)
infoline.5 = ('04'x) || 'TSO/E Userid:' ||,
             ('05'x) || Word(pwuid.PW_NAME,1) || ('03'x)
l5 = Length(infoline.5)
info_len = Max(l2,l3,l4,l5)    /* determine longest line           */
Do info_i = 2 to 5             /* arrange data within the box      */
  lastblk = Lastpos('05'x,infoline.info_i)
  len = Length(infoline.info_i)
  fillen = info_len - len
  infoline.info_i = Insert(' ',infoline.info_i,lastblk,fillen,' ')
  infoline.info_i = ('FA'x) || (infoline.info_i) || ('FA'x)
End
infoline.1 = ('AC'x) || Substr('BF'x,1,info_len,'BF'x) || ('BC'x)
infoline.6 = ('AB'x) || Substr('BF'x,1,info_len,'BF'x) || ('BB'x)
Return
