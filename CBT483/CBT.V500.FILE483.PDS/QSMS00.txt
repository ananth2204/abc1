//T750KQ   JOB (317,04,E150AQ),'RAMSEIER',
//             MSGLEVEL=(1,1),
//             CLASS=X,
//             MSGCLASS=T,
//             NOTIFY=&SYSUID,
//             TIME=NOLIMIT
//*MAIN SYSTEM=SYT
//*
//ASM      EXEC PGM=ASMA90,REGION=2048K,
//          PARM='NODECK,OBJECT,USING(NOWARN),RENT'
//SYSIN     DD *
QSMS TITLE '*** "QSMS " *** &SYSDATE'
***********************************************************************
*                                                                     *
*     QSMS - READS SMS-CONFIG AND CHECKS MVS-STATUS OF DEFINED VOLS   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*     EQUATES                                                         *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*     START                                                           *
***********************************************************************
QSMS     CSECT
QSMS     AMODE 31
QSMS     RMODE ANY
         PRINT NOGEN
         SPACE 2
         BAKR  14,0                ESTABLISH LINKAGE-CONVENTIONS
         LR    R12,R15             ADDRESSABILITY
         USING QSMS,R12            TELL ASSEMBLER
         LR    R2,R0               A(ENVBLOCK IF CALLED FROM A REXX)
         LR    R3,R1               ESTABLISH CPPL'S  ADDRESSABILITY
GETSTOR  DS    0H                  OBTAIN REENTRANT WORKSPACE
         STORAGE OBTAIN,LENGTH=LDWORK,LOC=ANY
         LR    R11,R1              ESTABLISH DSECT'S ADDRESSABILITY
         USING DWORK,R11           TELL ASSEMBLER
         BAL   R14,CHKENVIR        EVALUATE CALLERS ENVIRONMENT
         BAL   R14,GETCONFG        CALL SMS VIA SSI TO GET SMS-CONFIG
         BAL   R14,GETSVOLI        BUILD A LIST OF ALL SMS-VOLUMES
         BAL   R14,PUTLBSNS        ISSUE PUTLINE (IF TSO-COMMAND)
         BAL   R14,REXXVARS        BUILD REXX-VARS(IF REXX-FUNCTION)
*
         L     R2,RCODE
         STORAGE RELEASE,LENGTH=LDWORK,ADDR=(R11)  FREE OBTAINED STOR.
         LR    R15,R2
         PR                        END QSMS + CLEANUP
         LTORG
*
***********************************************************************
*     SUBROUTINES                                                     *
***********************************************************************
*
*********************************************************************
* CHECK CALLERS ENVIRONMENT
*********************************************************************
*
CHKENVIR ST    R14,SAVE14
         OI    FLAGBYTE,REXXENV      ASSUME RUNNING IN REXX-ENVT.
         CLC   =C'ENVBLOCK',0(R2)    ENVIRONMENT BLOCK FOUND ?
         BE    ENV0030               (BE=YES, BUMP OVER CPPL-SECTION)
         USING CPPL,R3               GET THE ADDRESSES IN CPPL
         MVC   CPLCBUF,CPPLCBUF      MOVE COMM.-BUFFER ADDR TO MY AREA
         MVC   CPLUPT,CPPLUPT        MOVE USERPROFTAB ADDR TO MY AREA
         MVC   CPLPSCB,CPPLPSCB      MOVE PROT.STEP-CB ADDR TO MY AREA
         MVC   CPLECT,CPPLECT        MOVE ECT-ADDRESS TO MY AREA
         DROP  R3                    FREE CPPL
         NI    FLAGBYTE,255-REXXENV  RESET FLAGBYTE
         B     ENV0090
ENV0030  DS    0H
*        OI    FLAGBYTE,REXXENV      CALLED AS REXX-FUNCTION, SET FLAG
         STM   R2,R3,SAVEREXX        SAVE ADDRESSES FOR LATER USE
ENV0090  DS    0H
         LA    R8,ALLMSGS            A(ANSWER-AREA)
         SLR   R9,R9                 A(ERROR-MSG)
         L     R14,SAVE14
         BR    R14
         LTORG
*
*********************************************************************
* GETCONFG: PICK ACTUAL SMS-CONFIG VIA THE SUBSYSTEM INTERFACE
*********************************************************************
*
GETCONFG ST    R14,SAVE14          STORE BACKPOINTER
         LH    R1,=Y(BCD_TOTAL_LENGTH)
         ST    R1,WBCDSLEN
         STORAGE OBTAIN,LENGTH=(R1),                                   X
               LOC=ANY,BNDRY=PAGE,ADDR=(R7)
         L     R1,CVTPTR                        A(CVT) INTO R1
         MVC   CURRSYS(8),CVTSNAME-CVT(R1)
         L     R1,CVTJESCT-CVT(,R1)             A(JESCT) INTO R1
         L     R1,JESCTEXT-JESCT(,R1)           A(JESPEXT) INTO R1
         ICM   R1,B'1111',JESSMSIB-JESPEXT(R1)  A(SMS-SSIB) INTO R2
         BZ    CNFG0080            (BZ=NO SMS-ENV. FOUND, EXIT)
         XC    WSSOB,WSSOB         CLEAR WORK-SSOB
         LA    R2,WSSOB            A(WORK SSOB)
         USING SSOB,R2             TELL ASSEMBLER
         ST    R1,SSOBSSIB         A(WORK-SSIB) INTO WORK-SSOB
         MVC   SSOBID,=C'SSOB'     CB-ID INTO WORKAREA
         MVI   SSOBFUNC+1,SSOBSSMS    FUNCTION-CODE FOR SMS (55)
         MVI   SSOBLEN+1,SSOBHSIZ  LENGTH OF SSOB INTO WORK-SSOB
         LA    R3,WSSSA            A(WORK FUNCTION DEPENDENT AREA)
         ST    R3,SSOBINDV         STORE IN WORK-SSOB
         USING IEFSSSA,R3          TELL ASSEMBLER
         MVC   SSSAID,=C'SSSA'     CB-ID INTO WORKAREA
         LA    R0,SSSALN+SSSA1LN   TOTAL LENGTH OF USED PARTS OF WSSSA
         STH   R0,SSSALEN          STORE IN WSSSA
         MVI   SSSAVER+1,SSOBSSVR  MOVE SSOB-VERSION INTO WSSSA
         MVI   SSSAIFLG,SSSANAUT   SET NON-AUTHORIZED CALLER IN WSSSA
         MVI   SSSASFN+1,SSSAACTV  INDICATE ACT.CONFIG-SRVC. REQUESTED
*                                  SSSA1* = SUBFUNCTION OF ACTIVE CONF.
         MVI   SSSA1TYP,SSSA1CON   GET CONFIG-INFO, MAPPED BY IGDBCD
         LH    R0,=Y(BCD_TOTAL_LENGTH)  LENGTH OF BASIC CONFIG-CB
         ST    R0,SSSA1LEN         STORE IN WSSSA1
         ST    R7,SSSA1PTR         STORE A(WAREA FOR SSSACON)
         LA    R1,WSSOB            A(WSSOB) INTO R1
         ST    R1,@WSSOB           STORE IN PARMLIST-ADDRESS
         OI    @WSSOB,X'80'        SET HIGHORDERBIT
         LA    R1,@WSSOB           A(PARMLIST-ADDRESS) INTO R1
         IEFSSREQ                  ISSUE SMS-SSI-CALL
         LTR   R15,R15             WENT IT OK ?
         BNZ   CNFG0082            (BNZ=NO, SET APPROPRIATE ERROR-MSG)
         ICM   R1,15,SSOBRETN      PICK UP SUBFUNCTION RETURNCODE
         BZ    CNFG0020            (BZ=0, EVERYTHIN WORKED FINE)
         CLC   SSSARSN,=A(SSSA1ISP)      INSUFFICIENT STORAGE PASSED ?
         BNE   CNFG0082            (BNE=NO, OTHER ERROR, QUIT)
         L     R1,WBCDSLEN         LOAD LENGTH OF 1ST GETMAINED AREA
         STORAGE RELEASE,LENGTH=(R1),      FREE INSUFFICIENT WORKAREA  X
               ADDR=(R7)
         MVC   WBCDSLEN,SSSA1ALN   REQUESTED LENGTH OF WORKAREA (RETUR-
*                                  NED BY 1ST IEFSSREQ-CALL
         L     R1,WBCDSLEN         LOAD NEW LENGTH
         STORAGE OBTAIN,LENGTH=(R1),       OBTAIN NEW WORKAREA FOR     X
               LOC=ANY,BNDRY=PAGE,ADDR=(R7)    2ND SSI-CALL
         MVC   SSSA1LEN,SSSA1ALN   SET NEW LENGTH IN IEFSSSA
         ST    R7,SSSA1PTR         STORE A(WAREA FOR SSSACON)
         LA    R1,@WSSOB           A(PARMLIST-ADDRESS) INTO R1
         IEFSSREQ                  ISSUE SMS-SSI-CALL
         ICM   R1,15,SSOBRETN      SUBFUNCTION RC NOW OKAY ?
         BNZ   CNFG0082            (BNZ=NO, ANOTHER ERROR, EXIT)
CNFG0020 DS    0H                  IEFSSREQ WORKED, R7 POINTS AT IGDBCD
         USING IGDBCD,R7           TELL ASSEMBLER
         LA    R2,BCDEND-IGDBCD(,R7)    BUMP OVER BASE DSECT
         USING BCDSYSDT,R2         TELL ASSEMBLER (256 SYSTEM ENTRIES)
         SLR   R1,R1               CLEAR WORKREG
CNFGLUP1 DS    0H                  LOOP: POSITION OF CURRENT SYSTEM
         CLC   CURRSYS,BCDSSTAT    IS THIS THE CURRENT SYSTEM ?
         BE    CNFG0070            (BE=YES, STORE FOR OFFSET VLD)
         LA    R1,1(,R1)           ADD LENGTH OF 1 SYSTEM ENTRY
         LA    R2,16(,R2)          A(NEXT SLOT IN SYSTEM ARRAY)
         B     CNFGLUP1            REDO LOOP
CNFG0070 DS    0H                  CURRENT SYSTEM FOND
         STH   R1,SYSOFFST         STORE OFFSET TO CURRENT SYSTEM
         DROP  R2                  DROP TEMPORARY BASE
         B     CNFG0090            BUMP OVER ERROR-MESSAGES
CNFG0080 DS    0H
         LA    R9,ERR0010          IEFSSREQ FAILED
         B     CNFG0090
CNFG0082 DS    0H
         LA    R9,ERR0020          SUBFUNCTION-CALL FAILED
CNFG0090 DS    0H
         L     R1,WBCDSLEN         LENGTH OF OBTAINED WORKAREA
         STORAGE RELEASE,LENGTH=(R1),      FREE THE AREA               X
               ADDR=(R7)
         L     R14,SAVE14          LOAD BACKPOINTER
         BR    R14                 BRANCH THERE
         LTORG
*
*********************************************************************
* GETSVOLI: BUILD A LIST OF ALL SMS-MG'ED VOLUMES
*********************************************************************
*
GETSVOLI ST    R14,SAVE14          STORE BACKPOINTER
         LH    R1,=Y(WVLD1ST)      LENGTH OF 1 VLD-ENTRY
         ST    R1,WVLDLEN          STORE FOR STORAGE-RELEASE
         STORAGE OBTAIN,LENGTH=(R1),            OBTAIN A RESULT-AREA   X
               LOC=ANY,BNDRY=PAGE,ADDR=(R7)     FOR IEFSSREQ
         L     R1,CVTPTR                        A(CVT) INTO R1
         L     R1,CVTJESCT-CVT(,R1)             A(JESCT) INTO R1
         L     R1,JESCTEXT-JESCT(,R1)           A(JESPEXT) INTO R1
         ICM   R1,B'1111',JESSMSIB-JESPEXT(R1)  A(SMSSSIB) INTO R1
         BZ    SVOL0080            (BZ=NO SMS-ENV. FOUND, EXIT)
         XC    WSSOB,WSSOB         CLEAR WORK-SSOB
         LA    R2,WSSOB            A(WORK SSOB)
         USING SSOB,R2             TELL ASSEMBLER
         ST    R1,SSOBSSIB         A(WORK-SSIB) INTO WORK-SSOB
         MVC   SSOBID,=C'SSOB'     CB-ID INTO WORKAREA
         MVI   SSOBFUNC+1,SSOBSSMS    FUNCTION-CODE FOR SMS (55)
         MVI   SSOBLEN+1,SSOBHSIZ  LENGTH OF SSOB INTO WORK-SSOB
         LA    R3,WSSSA            A(WORK FUNCTION DEPENDENT AREA)
         ST    R3,SSOBINDV         STORE IN WORK-SSOB
         USING IEFSSSA,R3          TELL ASSEMBLER
         MVC   SSSAID,=C'SSSA'     CB-ID INTO WORKAREA
         LA    R0,SSSALN+SSSA1LN   TOTAL LENGTH OF USED PARTS OF WSSSA
         STH   R0,SSSALEN          STORE IN WSSSA
         MVI   SSSAVER+1,SSOBSSVR  MOVE SSOB-VERSION INTO WSSSA
         MVI   SSSAIFLG,SSSANAUT   SET NON-AUTHORIZED CALLER IN WSSSA
         MVI   SSSASFN+1,SSSAACTV  INDICATE ACT.CONFIG-SRVC. REQUESTED
*                                  SSSA1* = SUBFUNCTION OF ACTIVE CONF.
         MVI   SSSA1TYP,SSSA1AVL   GET ALL VOLUMES, MAPPED BY IGDVLD
         LH    R0,=Y(WVLD1ST)      LENGTH OF 1 IGDVLD-CB
         ST    R0,SSSA1LEN         STORE IN WSSSA1
         ST    R7,SSSA1PTR         STORE A(WAREA FOR SSSACON)
         LA    R1,WSSOB            A(WSSOB) INTO R1
         ST    R1,@WSSOB           STORE IN PARMLIST-ADDRESS
         OI    @WSSOB,X'80'        SET HIGHORDERBIT
         LA    R1,@WSSOB           A(PARMLIST-ADDRESS) INTO R1
         IEFSSREQ                  ISSUE SMS-SSI-CALL
         LTR   R15,R15             WENT IT OK ?
         BNZ   SVOL0082            (BNZ=NO, SET APPROPRIATE ERROR-MSG)
         ICM   R1,15,SSOBRETN      PICK UP SUBFUNCTION-RETURNCODE
         BZ    SVOL0020            (BZ=ALL WORKED ANALYZE RESULT)
         CLC   SSSARSN,=A(SSSA1ISP)    INSUFFICIENT STORAGE ?
         BNE   SVOL0082            (BNE=NO, OTHER ERROR, QUIT)
         L     R1,WVLDLEN          LENGTH OF 1ST STORAGE OBTAIN
         STORAGE RELEASE,LENGTH=(R1),  RELEASE OBTAINED WORKAREA       X
               ADDR=(R7)
         MVC   WVLDLEN,SSSA1ALN    LENGTH NEEDED BY IEFSSREQ
         L     R1,WVLDLEN          USE IT FOR 2ND STORAGE OBTAIN
         STORAGE OBTAIN,LENGTH=(R1),       GET BIGGER WORKAREA         X
               LOC=ANY,BNDRY=PAGE,ADDR=(R7)
         MVC   SSSA1LEN,SSSA1ALN   SET NEW LENGTH IN IEFSSSA
         ST    R7,SSSA1PTR         STORE A(WAREA FOR SSSACON)
         LA    R1,@WSSOB           A(PARMLIST-ADDRESS) INTO R1
         IEFSSREQ                  ISSUE SMS-SSI-CALL
         ICM   R1,15,SSOBRETN      2ND CALL WORKED ?
         BNZ   SVOL0082            (BNZ=NO, STILL ERRORS, QUIT)
SVOL0020 DS    0H                  AFTER IEFSSREQ, R7=A(ANSWER-AREA)
         LR    R3,R7               SAVE R7 FOR STORAGE RELEASE
         USING IGDVLD,R3           TOP OF VOLSER-ARRAY RETURNED
         L     R2,VLDPCNT          # OF VOLUME-ENTRIES RETURNED
         L     R4,VLDPLEN          LENGTH OF A SINGLE ENTRY
SVOLLUP0 DS    0H                  LOOP: WALK THROUGH SMS-VOLUMETABLE
         TM    FLAGBYTE,REXXENV    CALLED AS A REXX-FUNCTION ?
         BO    SVOL0022            (BO=YES, EXECUTE INTO ALLMSGS)
         MVI   WORKREC,C' '        CLEAR OUT WORKREC (CURRENT LINE)
         MVC   WORKREC+1(L'WORKREC-1),WORKREC       DO.
         LA    R0,L'WORKREC        LENGTH OF WORKREC
         STH   R0,0(R8)            STORE IN ALLMSGS
         MVC   WORKREC(6),VLDVSER  MOVE VOLSER INTO WORKREC
         B     SVOL0025            BUMP OVER EXECUTE FOR FUNCTIONCALL
SVOL0022 DS    0H                  EXECUTE VOLSER INTO ALLMSGS
         LH    R1,VLDVSLEN         LENGTH OF VOLSERNAME (SHOULD BE 6)
         STH   R1,0(R8)            STORE LENGTH IN ALLMSGS
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE
         EX    R1,SVOLMVC1         WRITE INTO ALLMSGS
         AR    R8,R1               BUMP BEHIND VOLSER +
         AH    R8,=H'3'            ADD LENGTH-HW + 1 (EXECUTE)
SVOL0025 DS    0H
         LH    R1,VLDSGLEN         LENGTH OF STORAGE-GROUP INTO R1
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE
         TM    FLAGBYTE,REXXENV    CALLED AS A REXX-FUNCTION ?
         BZ    SVOL0027            (BZ=NO, WRITE INTO WORKMSG)
         EX    R1,SVOLMVC2         WRITE STORAGE-GROUP INTO ALLMSGS
         LA    R1,1(,R1)           RE-INCREASE AFTER EXECUTE
         STH   R1,0(R8)            STORE LENGTH IN ALLMSGS
         AR    R8,R1               BUMP BEHIND STORAGEGROUP
         AH    R8,=H'2'            ADD LENGTH OF LENGTH-HW
         B     SVOL0028            BUMP OVER TSO-ONLY SECTION
SVOL0027 DS    0H
         EX    R1,SVOLMVC3         WRITE INTO WORKREC
         MVC   WORKREC+36(4),=CL4'N/A '     ASSUME OFFLINE DEVICE
         B     SVOL0029            BUMP OVER SVOL0028 (REXX-ENV.)
SVOL0028 DS    0H
         LA    R1,4                LENGTH OF DEVICE-NR
         STH   R1,0(R8)            STORE IN ALLMSGS
         MVC   2(4,R8),=CL4'N/A '     ASSUME UCB WILL BE OFFLINE
         LA    R8,6(,R8)
SVOL0029 DS    0H
         ICM   R1,B'1111',VLDNUCBA    IS THIS REALLY TRUE?
         BZ    SVOL0030            (BZ=YES, NO UCB FOUND, PROCEED)
         LA    R1,UCBCHAN-UCBOB(R1)   A(UCBCHAN,4-DIGIT DEVICE,BINARY)
         XC    WPACKED,WPACKED     CLEAR PACKED WORKFIELD
         MVI   WPACKED+3,X'0C'     MOVE SIGN FOR UNPACK
         MVO   WPACKED(3),0(2,R1)  MOVE DEVICE-NR. INTO BYTES 2+3
         UNPK  WUNPACK,WPACKED     UNPACK IT INTO WORKAREA
         TR    WUNPACK,TRTAB1      MAKE IT PRINTABLE
         TM    FLAGBYTE,REXXENV    CALLED AS A REXX-FUNCTION ?
         BO    SVOL0295            (BO=YES, WRITE INTO ALLMSGS)
         MVC   WORKREC+36(4),WUNPACK+2   MOVE INTO WORKREC, FORGET SIGN
         B     SVOL0030            BUMP OVER REXX-ENV
SVOL0295 DS    0H
         SH    R8,=H'6'            A(START OF DEVICE-ENTRY IN ALLMSGS)
         MVC   2(4,R8),WUNPACK+2   MOVE INTO ALLMSGS, FORGET SIGN
         LA    R8,6(,R8)           BUMP BEHIND N/A OR DEVICE-NR
SVOL0030 DS    0H                  COMPUTE SMS-STATUS FOR CURRENT VOL.
         LH    R15,SYSOFFST        OFFSET IN SYSTEM-ARRAY (FROM IGDBCD)
         MH    R15,=H'8'           LENGTH OF ONE ENTRY IN ARRAY
         LA    R1,VLDEND-VLD(,R3)  A(START OF SYSTEMS-ARRAY)
         AR    R1,R15              A(CURRENT SYSTEM IN SYSTEMS-ARRAY)
         USING VLDSYSDT,R1         TELL ASSEMBLER
         SLR   R15,R15             CLEAR WORKREG
         SLR   R14,R14             CLEAR WORKREG
         IC    R15,VLDSTSMS        INSERT SMS-STATUS
         IC    R14,VLDSTMVS        INSERT MVS-STATUS
         MH    R15,=Y(TABSMSEL)    COMPUTE OFFSET IN STATUS-TABLE
         A     R15,=A(TABSMSST)    ADD BASE OF TABLE
         TM    FLAGBYTE,REXXENV    CALLED AS A REXX-FUNCTION ?
         BZ    SVOL0035            (BZ=NO, WRITE INTO WORKREC)
         LH    R1,=Y(TABSMSEL)     LENGTH OF A TABLE ENTRY INTO R1
         STH   R1,0(R8)            STORE LENGTH IN ALLMSGS
         MVC   2(TABSMSEL,R8),0(R15)  WRITE STATUS INTO WORKREC
         LA    R8,TABSMSEL+2(,R8)  BUMP BEHIND TABLELENGTH/ENTRY
         B     SVOL0040
SVOL0035 DS    0H                  WRITE SMS-STATUS INTO WORKREC
         MVC   WORKREC+42(TABSMSEL),0(R15)
SVOL0040 DS    0H                  COMPUTE MVS-STATUS FOR CURRENT VOL.
         BCTR  R14,0               (MVSTAB START WITH STATUS 1)
         MH    R14,=Y(TABMVSEL)    COMPUTE OFFSET IN STATUS-TABLE
         A     R14,=A(TABMVSST)    ADD BASE OF TABLE
         TM    FLAGBYTE,REXXENV    CALLED AS A REXX-FUNCTION ?
         BO    SVOL0045            (BZ=YES, WRITE INTO ALLMSGS)
         MVC   WORKREC+60(TABMVSEL),0(R14)   WRITE STATUS INTO WORKREC
         MVC   2(L'WORKREC,R8),WORKREC
         LA    R8,L'WORKREC+2(,R8)
         B     SVOL0050
SVOL0045 DS    0H                  WRITE MVS-STATUS INTO ALLMSGS
         LH    R1,=Y(TABMVSEL)     LENGTH OF A TABLE ENTRY INTO R1
         STH   R1,0(R8)            STORE LENGTH IN ALLMSGS
         MVC   2(TABMVSEL,R8),0(R14)  WRITE STATUS INTO WORKREC
         LA    R8,TABMVSEL+2(,R8)  BUMP BEHIND TABLELENGTH/ENTRY
SVOL0050 DS    0H                  LOAD ADDRESS OF NEXT ENTRY
         AR    R3,R4               A(NEXT IGDVLD IN RETURNED ARRAY)
         BCT   R2,SVOLLUP0         PERFORM WORK WITH NEXT VOLUME
         B     SVOL0090            BUMP OVER ERROR-MESSAGES
SVOL0080 DS    0H
         LA    R9,ERR0010          NO SMS-ENVIRONMENT
         B     SVOL0090
SVOL0082 DS    0H
         LA    R9,ERR0020          IEFSSREQ FAILED
SVOL0090 DS    0H
         L     R1,WVLDLEN          LENGTH OF OBTAINED WORKAREA
         STORAGE RELEASE,LENGTH=(R1),                                  X
               ADDR=(R7)
*
         L     R14,SAVE14          LOAD BACKPOINTER
         BR    R14                 BRANCH THERE
         LTORG
*
         USING IGDVLD,R3
SVOLMVC1 MVC   2(0,R8),VLDVSER
SVOLMVC2 MVC   2(0,R8),VLDSTGRP
SVOLMVC3 MVC   WORKREC+10(0),VLDSTGRP
*
***********************************************************************
*     PUTLBSNS: DO THE PUTLINE-BUSINESS                               *
***********************************************************************
PUTLBSNS ST    R14,SAVE14
         TM    FLAGBYTE,REXXENV      CALLED AS A REXX-FUNCTION ?
         BOR   R14                   (BO=YES, GET OUT OF HERE)
         LA    R1,IOPLADS            LOAD DYNAMIC IOPL
         USING IOPL,R1               FILL IT
         L     R0,CPLUPT             LOAD DYN. USER'S PROFILE TABLE
         ST    R0,IOPLUPT            STORE IT IN THE IOPL
         L     R0,CPLECT             LOAD ADDRESS OF DYN. ECT
         ST    R0,IOPLECT            STORE IT IN THE IOPL
         LA    R0,ECBADS             LOAD ADDR OF MY ECB TO R3
         ST    R0,IOPLECB            STORE ADDRESS OF ECBADS IN IOPL
         MVC   @MLWAREA(L@PUTLIN),@PUTLIN
         MVC   DTEXTADS(LTEXTADS),TEXTADS   MOVE CONSTANT TO MY AREA
         LA    R2,ALLMSGS            POINT TO VARIABLE MSG-AREA
         LTR   R9,R9                 IS THERE AN ERRORMESSAGE ?
         BZ    PUTL010               (BZ=NO, WRITE DATA)
         LR    R2,R9                 POINT TO CORRECT ERRORMSG
PUTL010  DS    0H                    PREPARE FOR THE PUTLINE
         XC    DTEXTADS(4),DTEXTADS  CLEAR LENGTH-COUNTER
         LH    R1,0(R2)              LENGTH OF CURRENT ENTRY INTO R1
         LTR   R1,R1                 IS IT ZERO ?
         BZ    PUTL020               (BE = YES, ALL WRITTEN)
PUTL015  LA    R1,4(,R1)             ADD 4 FOR PUTLINE-HEADER
         STH   R1,DTEXTADS           STORE INTO WORKAREA
         BCTR  R1,0                  SUBTRACT 1 FOR EXECUTE
         EX    R1,PUTLMVC1           DO THE EXECUTE
         PUTLINE PARM=@MLWAREA,      DO THE PUTLINE                    X
               OUTPUT=(DTEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         LH    R1,0(R2)              LOAD LENGTH OF MESSAGE
         LA    R1,2(,R1)             ADD LENGTH OF MSG-LENGTH
         AR    R2,R1                 ADD CORRECT LENGTH OF MSG-TEXT
         B     PUTL010               TRY NEXT MESSAGE
PUTL020  SLR   R15,R15
         L     R14,SAVE14          LOAD BACKPOINTER
         BR    R14                 BRANCH THERE
         LTORG
*
PUTLMVC1 MVC   DTEXTADS+4(0),2(R2)
*
***********************************************************************
*     REXXVARS: BUILD AN ARRAY OF REXX-VARAIBLES                      *
***********************************************************************
REXXVARS ST    R14,SAVE14          SAVE BACKPOINTER
         TM    FLAGBYTE,REXXENV    CALLED AS A REXX-FUNCTION ?
         BZR   R14                 (BZR=NO, DO NOT BUILD VARS)
         LM    R2,R3,SAVEREXX      A(ENVBLOCK INTO R2, A(EFPL) INTO R3
         USING EFPL,R3             TELL ASSEMBLER
         L     R1,EFPLARG          A(ARGTABLE) INTO R1
         CLC   =F'-1',0(R1)        NO ARGUMENT PASSED ?
         BE    REXXER10            (BE=YES, SET APPROPRIATE ERRORMSG)
         USING ARGTABLE_ENTRY,R1   TELL ASSEMBLER
         XC    WSTEMNAM,WSTEMNAM   CLEAR SAVEAREA FOR STEMNAME
         L     R14,ARGTABLE_ARGSTRING_LENGTH     L'PASSED STEMNAME
         C     R14,=F'32'          LONGER THAN 32 CHARACTERS ?
         BH    REXXER20            YES, SET ERROR-MESSAGE AND QUIT
         STH   R14,WSTEMLEN        STORE LENGTH OF STEMNAME
         L     R15,ARGTABLE_ARGSTRING_PTR     A(STEMNAME)
         BCTR  R14,0               SUBTRACT 1 FOR EXECUTE
         EX    R14,REXMVC00        WRITE STEMNAME INTO WSTEMNAM
         EX    R14,REXUPR01        MAKE STEMNAME UPPERCASE
         AR    R15,R14             A(END OF STEMNAME-1)
         CLI   0(R15),C'.'         VALID STEMNAME PASSED ?
         BNE   REXXER25            (BNE=NO, SET ERROR-MSG + QUIT)
         CLC   =F'-1',ARGTABLE_NEXT    IS THIS THE END OF THE PARMLIST?
         DROP  R1                  DROP ARGTABLE-BASE
         BNE   REXXER30            (BNE=NO, MORE THAN 1 PARM, ERROR)
REXX0100 DS    0H                  START BUILDING THE RESULT-ARRAY
         L     R1,ENVBLOCK_IRXEXTE-ENVBLOCK(,R2)  A(IRXEXTE)
         L     R1,IRXEXCOM-IRXEXTE(,R1)           A(IRXEXCOM)
         ST    R1,@WRXCOM          STORE A(IRXEXCOM) IN WORKFIELD
         LA    R0,IRXCOM           A(8 BYTE CONSTANT "IRXEXCOM")
         ST    R0,@WRXCNST         STORE IN IRXEXCOM-PARMLIST
         XC    @WRXPRM2,@WRXPRM2   CLEAR PARAMETER #2 AND ...
         XC    @WRXPRM3,@WRXPRM3   ... PARM #3 IN IRXEXCOM-PARMLIST
         XC    WRXSHVL,WRXSHVL     CLEAR OUT WORK-SHVBLOCK
         LA    R4,WRXSHVL          A(WORK-SHVBLOCK)
         ST    R4,@WRXSHVL         STORE IN IRXEXCOM-PARMLIST
         OI    @WRXSHVL,X'80'      SET HIGHORDERBIT IN LAST PARM
         USING SHVBLOCK,R4         FILL WORK-SHVBLOCK
         MVI   SHVCODE,SHVSTORE    FUNCTION-CODE: DEFINE NEW VARIABLE
         LA    R8,ALLMSGS          A(ALL VALUES + LENGTHS
         SLR   R2,R2               CLEAR OUT ELEMENT-COUNTER
         ST    R2,CURRELEM         STORE IT
REXXLUP0 DS    0H                  OUTMOST LOOP: 1/PER 3RD ARRAY-DIM.
         L     R2,CURRELEM         LOAD ELEMENT-NUMBER
         LA    R2,1(,R2)           INCREASE FOR NEW ARRAY-ELEMENTS
         ST    R2,CURRELEM         STORE IT AGAIN
         PRINTREG (R2),RESULT=DECIMAL,PADCHAR=NULLSTRING
         STH   R0,WELEMLEN         LENGTH OF CURRENT NUMERIC
         MVI   WELEMENT,C'.'       START WITH A DOT
         LH    R2,WELEMLEN         LENGTH OF NUMERIC PART INTO R2
         BCTR  R2,0                SUBTRACT 1 FOR EXECUTE
         EX    R2,REXMVC01         WRITE ELEMENT NUMBER INTO WORKFIELD
         LA    R2,2(,R2)           RELOAD ORIG. LENGTH, ADD 1 FOR DOT
         STH   R2,WELEMLEN         TOTAL LENGTH OF '.' + CURR. NUMERIC
         LA    R5,5                #OF VARIABLES PER ELEMENT
         LA    R2,VARTAB           A(2ND VARIABLE-QUALIFIERS)
REXXLUP1 DS    0H                  INNER LOOP: 1 FOR EVERY VAR/ELEMENT
         XC    WVARNAME,WVARNAME   CLEAR OUT CURRENT VARIABLE-NAME
         LH    R15,WSTEMLEN        LENGTH OF STEMNAME INTO R15
         STH   R15,WVARLEN         STORE IN VARLENGTH-FIELD
         BCTR  R15,0               SUBTRACT 1 FOR EXECUTE
         EX    R15,REXMVC02        WRITE STEMNAME INTO CURRENT VAR.
         LH    R15,WVARLEN         RELOAD ORIGINAL LENGTH
         LA    R0,WVARNAME         A(START OF VARIABLE-NAME)
         AR    R15,R0              A(END OF STEMNAME)
         TM    FLAGBYTE,STEMDONE   JUST ZERO-ELEMENT REMAINING ?
         BZ    REXX0200            (BZ=NO, PROCEED)
         MVI   0(R15),C'0'         WRITE ZERO-ELEMENT
         LA    R1,WVARNAME         A(STEM.0)
         ST    R1,SHVNAMA          STORE IN WORK-SHVBLOCK
         LH    R1,WVARLEN          IF LAST CALL, LENGTH IS COUNTER-DOT
         LA    R1,1(,R1)           ADD LENGTH OF '0'
         ST    R1,SHVNAML          STORE IN WORK-SHVBLOCK
         LA    R1,WELEMENT+1       A(COUNTER BEHIND DOT)
         ST    R1,SHVVALA          STORE IN WORK-SHVBLOCK
         LH    R1,WELEMLEN         LENGTH OF NUMERIC PART + DOT
         BCTR  R1,0                SUBTRACT LENGTH OF DOT
         ST    R1,SHVVALL          STORE IN WORK-SHVBLOCK
         B     REXX0300            ISSUE LAST IRXEXCOM-CALL
REXX0200 DS    0H
         SLR   R1,R1               CLEAR WORKREG
         IC    R1,0(R2)            LENGTH OF 2ND DIMENSION
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE
         EX    R1,REXMVC03         WRITE 2ND DIMENSION THEREAFTER
         LA    R1,1(,R1)           RELOAD ORIGINAL LENGTH
         LH    R0,WVARLEN          LOAD LENGTH UNTIL NOW
         AR    R0,R1               ADD LENGTH OF 2ND DIMENSION
         STH   R0,WVARLEN          STORE NEW LENGTH
         LA    R15,WVARNAME        A(START OF VARIABLE-NAME)
         AH    R15,WVARLEN         A(END OF VARIABLE-NAME)
         LH    R1,WELEMLEN         LENGTH OF DOT + NUMERIC APPENDIX
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE
         EX    R1,REXMVC04         WRITE AT END OF CURRENT STEM
         LA    R1,1(,R1)           RELOAD ORIGINAL LENTGH
         LH    R0,WVARLEN          LOAD LENGTH W/O NUMERIC APPENDIX
         AR    R0,R1               ADD LENGTH OF APPENDIX
         STH   R0,WVARLEN          STORE TOTAL LENGTH OF VARIABLE
         LA    R0,WVARNAME         A(VARIABLE NAME)
         ST    R0,SHVNAMA          STORE IN WORK-SHVBLOCK
         LH    R0,WVARLEN          LENGTH OF VARIABLE
         ST    R0,SHVNAML          STORE IN WORK-SHVBLOCK
         LH    R0,0(R8)            LOAD LENTGTH OF VALUE
         ST    R0,SHVVALL          STORE IN WORK-SHVBLOCK
         LA    R0,2(,R8)           LOAD ADDRESS OF NEXT VALUE
         ST    R0,SHVVALA          STORE IN WORK-SHVBLOCK
REXX0300 DS    0H
         SLR   R0,R0               CLEAR A(OPTIONAL ENV_BLOCK)
         LA    R1,WRXCOMPL         A(IRXEXCOM PARAMETER LIST)
         L     R15,@WRXCOM         A(IRXEXCOM)
         BALR  R14,R15             FIRE ||||
         LTR   R15,R15             WAS CALL SUCCESSFULL ?
         BNZ   REXXER40            BNZ=NO, ISSUE ERROR-MESSAGE
         TM    FLAGBYTE,STEMDONE   ZERO-ELEMENT ALREADY WRITTEN ?
         BO    REXXOK10            (BO=YES, ALL DONE LEAVE NOW)
         SLR   R1,R1               CLEAR WORKREG
         IC    R1,0(R2)            LENGTH OF 2ND VARIABLE-QUALIFIER
         LA    R2,1(,R2)           POINT BEHIND LENGTH FIELD
         AR    R2,R1               A(NEXT 2ND VARAIBLE-QUALIFIER)
         LH    R0,0(R8)            LENGTH OF RECENTLY RETURNED VALUE
         LA    R8,2(,R8)           BUMP OVER LENGTH FIELD IN ALLMSGS
         AR    R8,R0               A(NEXT VALUE IN ALLMSGS)
REXXOK10 DS    0H
         L     R1,EFPLEVAL         A(EVALBLOCK-ADDRESS)
         L     R1,0(,R1)           A(EVALBLOCK)
         USING EVALBLOCK,R1        TELL ASSEMBLER
         LA    R0,1                LENGTH OF RC=0
         ST    R0,EVALBLOCK_EVLEN         STORE IN EVALBLOCK
         MVI   EVALBLOCK_EVDATA,C'0'      SET RC=0
         SLR   R0,R0               SET RC=0 TO SHOW ERROR-MSG IN REXX
         ST    R0,RCODE            STORE IN RCODE
         DROP  R1                  DROP TEMPORARY BASE
         TM    FLAGBYTE,STEMDONE   ZERO-ELEMENT ALREADY WRITTEN ?
         BO    REXX0900            (BO=YES, ALL DONE LEAVE NOW)
         BCT   R5,REXXLUP1         WRITE NEXT PART OF CURRENT ELEMENT
         LH    R1,0(R8)            STILL VARIABLES TO BUILD ?
         LTR   R1,R1               TEST WHETHER LENGTH OF NEXT = 0
         BNZ   REXXLUP0            (BNZ=NO, STILL ELEMENTS, CONTINTUE)
         OI    FLAGBYTE,STEMDONE   INDICATE VERY LAST CALL
         B     REXXLUP1            WRITE ZERO-ELEMENT
REXXER10 DS    0H                  ERROR-SCENARIO 1: NO PARMS PASSED
         L     R1,EFPLEVAL         A(EVALBLOCK-ADDRESS)
         L     R1,0(,R1)           A(EVALBLOCK)
         USING EVALBLOCK,R1        TELL ASSEMBLER
         LA    R0,L'RXMSG010       LENGTH OF ERROR-MESSAGE
         ST    R0,EVALBLOCK_EVLEN         STORE IN EVALBLOCK
         MVC   EVALBLOCK_EVDATA(L'RXMSG010),RXMSG010    ERROR-MSG
         SLR   R0,R0               SET RC=0 TO SHOW ERROR-MSG IN REXX
         ST    R0,RCODE            STORE IN RCODE
         DROP  R1                  DROP TEMPORARY BASE
         B     REXX0900            BUMP AT THE END OF SUBROUTINE
REXXER20 DS    0H                  ERROR-SCENARIO 2: STEM LONGER 32CH.
         L     R1,EFPLEVAL         A(EVALBLOCK-ADDRESS)
         L     R1,0(,R1)           A(EVALBLOCK)
         USING EVALBLOCK,R1        TELL ASSEMBLER
         LA    R0,L'RXMSG020       LENGTH OF ERROR-MESSAGE
         ST    R0,EVALBLOCK_EVLEN         STORE IN EVALBLOCK
         MVC   EVALBLOCK_EVDATA(L'RXMSG020),RXMSG020    ERROR-MSG
         SLR   R0,R0               SET RC=0 TO SHOW ERROR-MSG IN REXX
         ST    R0,RCODE            STORE IN RCODE
         DROP  R1                  DROP TEMPORARY BASE
         B     REXX0900            BUMP AT THE END OF SUBROUTINE
REXXER25 DS    0H                  ERROR-SCENARIO 25 STEM LONGER 32CH.
         L     R1,EFPLEVAL         A(EVALBLOCK-ADDRESS)
         L     R1,0(,R1)           A(EVALBLOCK)
         USING EVALBLOCK,R1        TELL ASSEMBLER
         LA    R0,L'RXMSG025       LENGTH OF ERROR-MESSAGE
         ST    R0,EVALBLOCK_EVLEN         STORE IN EVALBLOCK
         MVC   EVALBLOCK_EVDATA(L'RXMSG025),RXMSG025    ERROR-MSG
         SLR   R0,R0               SET RC=0 TO SHOW ERROR-MSG IN REXX
         ST    R0,RCODE            STORE IN RCODE
         DROP  R1                  DROP TEMPORARY BASE
         B     REXX0900            BUMP AT THE END OF SUBROUTINE
REXXER30 DS    0H                  ERROR-SCENARIO 3: MORE THAN 1 PARM.
         L     R1,EFPLEVAL         A(EVALBLOCK-ADDRESS)
         L     R1,0(,R1)           A(EVALBLOCK)
         USING EVALBLOCK,R1        TELL ASSEMBLER
         LA    R0,L'RXMSG030       LENGTH OF ERROR-MESSAGE
         ST    R0,EVALBLOCK_EVLEN         STORE IN EVALBLOCK
         MVC   EVALBLOCK_EVDATA(L'RXMSG030),RXMSG030    ERROR-MSG
         SLR   R0,R0               SET RC=0 TO SHOW ERROR-MSG IN REXX
         ST    R0,RCODE            STORE IN RCODE
         DROP  R1                  DROP TEMPORARY BASE
         B     REXX0900            BUMP AT THE END OF SUBROUTINE
REXXER40 DS    0H                  ERROR-SCENARIO 3: MORE THAN 1 PARM.
         L     R1,EFPLEVAL         A(EVALBLOCK-ADDRESS)
         L     R1,0(,R1)           A(EVALBLOCK)
         USING EVALBLOCK,R1        TELL ASSEMBLER
         LA    R0,L'RXMSG040       LENGTH OF ERROR-MESSAGE
         ST    R0,EVALBLOCK_EVLEN         STORE IN EVALBLOCK
         MVC   EVALBLOCK_EVDATA(L'RXMSG040),RXMSG040    ERROR-MSG
         SLR   R0,R0               SET RC=0 TO SHOW ERROR-MSG IN REXX
         ST    R0,RCODE            STORE IN RCODE
         DROP  R1                  DROP TEMPORARY BASE
         B     REXX0900            BUMP AT THE END OF SUBROUTINE
REXX0900 DS    0H
         L     R14,SAVE14           LOAD BACKPOINTER
         BR    R14                 BRANCH THERE
*
REXMVC00 MVC   WSTEMNAM(0),0(R15)       SAVE PASSED STEMNAME
REXUPR01 OC    WSTEMNAM(0),=32C' '      MAKE PASSED PARM UPPERCASE
REXMVC01 MVC   WELEMENT+1(0),0(R1)      NUMERIC PART OF VARIABLE
REXMVC02 MVC   WVARNAME(0),WSTEMNAM     BUILD NEW VARIABLE-NAME
REXMVC03 MVC   0(0,R15),1(R2)           BUILD NEW VARIABLE-NAME
REXMVC04 MVC   0(0,R15),WELEMENT        DOT + NUMERIC AT END OF VAR
*
         LTORG
***********************************************************************
*     CONSTANTS                                                       *
***********************************************************************
*
TEXTADS  DC    H'132'
         DC    CL132' '
         DC    H'0'
LTEXTADS EQU   *-TEXTADS
*
TABSMSST DC    CL12'N/A'
TABSMSEL EQU   *-TABSMSST
         DC    CL12'ENABLED'
         DC    CL12'QUIESCED/ALL'
         DC    CL12'QUIESCED/NEW'
         DC    CL12'DISABLED/ALL'
         DC    CL12'DISABLED/NEW'
*
TABMVSST DC    CL7'ONLINE'
TABMVSEL EQU   *-TABMVSST
         DC    CL7'OFFLINE'
         DC    CL7'OFF-PND'
         DC    CL7'BOXED'
         DC    CL7'NOT-RDY'
*
VARTAB   DC    X'07',C'VOL_SER'
         DC    X'08',C'STOR_GRP'
         DC    X'06',C'DEV_NR'
         DC    X'08',C'SMS_STAT'
         DC    X'08',C'MVS_STAT'
*
IRXCOM   DC    CL8'IRXEXCOM'
*
RXMSG010 DC    C'8 REQUIRED PARAMETER STEMNAME OMITTED.'
RXMSG020 DC    C'8 STEMNAME MUST NOT EXCEED 32 CHARACTERS IN LENGTH.'
RXMSG025 DC    C'8 INVALID STEMNAME PASSED. MUST END WITH PERIOD (.)'
RXMSG030 DC    C'8 QSMS ACCEPTS JUST 1 PARAMETER (STEMNAME).'
RXMSG040 DC    C'8 IRXEXCOM CALL FAILED.'
*
ERR0010  DC    H'78'
         DC    CL78'QSMS010E NO ACTIVE SMS-ENVIRONMENT FOUND. NO  ACTIOX
               N TAKEN. PROGRAM TERMINATES'
         DC    H'0'
ERR0020  DC    H'78'
         DC    CL78'QSMS020E SMS-SUBSYSTEM INTERFACE CALL FAILED. NO  AX
               CTION TAKEN. PGM TERMINATES'
         DC    H'0'
*
TRTAB1   EQU   *-240
         DC    C'0123456789ABCDEF'
         ORG
*
***********************************************************************
*     MACRO LIST-FORM                                                 *
***********************************************************************
*
@PUTLIN  PUTLINE MF=L
L@PUTLIN EQU    *-@PUTLIN
*
LIOCINFO IOCINFO MF=(L,MTOKEN)
LLIOCINF EQU   *-LIOCINFO
*
         UCBSCAN MF=(L,MSCANWRK)
LLUCBSCA EQU   *-MSCANWRK
*
         EJECT
*
***********************************************************************
*     WORKING SECTION                                                 *
***********************************************************************
*
DWORK    DSECT
@MLWAREA DS    XL256                  MF=L WORKAREA
@UCBSCAN DS    XL256                  MF=L WORKAREA
*
FLAGBYTE DS    X
REXXENV  EQU   X'80'
STEMDONE EQU   X'40'
*
SAVEREXX DS    2F
WSTEMNAM DS    CL32
WSTEMLEN DS    H
WVARNAME DS    CL48
WVARLEN  DS    H
WELEMENT DS    CL8
WELEMLEN DS    H
CURRELEM DS    F
@WRXCOM  DS    F
*
         DS    0D
WRXCOMPL DS    0XL16
@WRXCNST DS    F
@WRXPRM2 DS    F
@WRXPRM3 DS    F
@WRXSHVL DS    F
         DS    0D
WRXSHVL  DS    XL(SHVBLEN)
*
CPLCBUF  DS    F                      CPPL-WORKFIELDS
CPLUPT   DS    F
CPLPSCB  DS    F
CPLECT   DS    F
*
ECBADS   DS    F                      PUTLINE WORKFIELDS
IOPLADS  DS    4F
*
DTEXTADS DS    CL(LTEXTADS)           MSG-WORKFIELD
*
DEVWORD  DS    CL4
UCBCOPY  DS    CL48
SCANWRK  DS    CL100
TOKEN    DS    CL48
CURVOL   DS    CL6
*
WPACKED  DS    PL4
WUNPACK  DS    CL8
WBCDSLEN DS    F
CURRSYS  DS    CL8
SYSOFFST DS    H
@VLD     DS    F
WVLDLEN  DS    F
*
WORKREC  DS    CL80
SAVE14   DS    F
@ERRMSG  DS    F
RCODE    DS    F
*
@WSSOB   DS    F
         DS    0D
WSSOB    DS    XL(SSOBHSIZ)
         DS    0D
WSSSA    DS    XL(SSSALN+SSSA1LN)
         DS    0D
WVLD1ST  EQU   ((VLDEND-VLD)+(VLDEND2-VLDSYSDT))
ALLMSGS  DS    400CL32000
LDWORK   EQU   *-DWORK
*
         PRINT GEN
         IGDVLD
         IGDBCD
         PRINT NOGEN
         CVT   DSECT=YES
         IEFJESCT
         IEFSSSA
         IEFJSSIB
         IEFSSOBH
         IKJCPPL
         IKJIOPL
         IEFUCBOB
         IRXEFPL
         IRXEVALB
         IRXENVB
         IRXARGTB
         IRXEXTE
         IRXSHVB
         END   QSMS
/*
//SYSLIB    DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.CNTL   <== THIS PDS
//          DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,DISP=(NEW,PASS),
//          SPACE=(3200,(200,50)),DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80)
//SYSPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//*
//* =====================================================
//* ===== L I N K A G E   E D I T O R ===================
//* =====================================================
//LKED      EXEC PGM=HEWL,REGION=1024K,COND=(0,NE),
//          PARM='XREF,LIST,RENT,REUS'
//SYSLMOD   DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.LOAD
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,3))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)
//          DD *
  NAME    QSMS(R)
/*
//TESTRC IF (RC EQ 0) THEN
//SCHTEPP3   EXEC PGM=IKJEFT01,REGION=8M
//STEPLIB  DD  DISP=SHR,DSN=SA1T.T750K.CBTFILE.LOAD
//SYSPROC  DD  DISP=SHR,DSN=SA1T.T750K.CBTFILE.CNTL
//SYSPRINT DD  SYSOUT=*
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  QSMSREXX
  QSMS
//ENDTEST ENDIF
