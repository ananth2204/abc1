//T750KY   JOB  (317,04,E1500K),'RAEMSY',
//             CLASS=X,
//             MSGCLASS=T,
//             MSGLEVEL=(1,1),
//             NOTIFY=&SYSUID,
//             REGION=8M,
//             TIME=NOLIMIT
//*
//*MAIN SYSTEM=SYT
//*
//ASM      EXEC PGM=ASMA90,REGION=2048K,
//          PARM='NODECK,OBJECT,RENT'
//SYSIN     DD *
QLPAR    TITLE '*** "QLPAR" *** TSO COMMAND PROCESSOR &SYSDATE'
***********************************************************************
* QLPAR                                                               *
* =====                                                               *
* QLPAR IS A TSO COMMAND-PROCESSOR THAT EXTRACTS LPAR-INFORMATIONS,   *
* SUCH AS NUMBER OF LPARS, LPAR NAMES, PROCESSOR WEIGHTS A.S.O ...    *
* THANKS TO ALFRED NYKOLYN OF HDS HITACHI DATA SYSTEMS CANADA FOR     *
* THE VERY USEFUL HINTS ABOUT THE DIAGNOSE 204 INSTRUCTION WHICH      *
* EXTRACTS THE NECESSARY LPAR-INFORMATIONS AND TO JULIEN B. WILKINSON *
* OF HDS SWITZERLAND FOR THE INITIAL CODING.                          *
* ALL INFORMATIONS ARE RETURNED VIA THE PUTLINE-MACRO SO THAT THEY    *
* CAN BE ACCESSED BY THE REXX-OUTTRAP FUNCTION.                       *
*                                                                     *
* LINKEDIT PARMS: AMODE(31),RMODE(ANY), RENT,REUS,AC(1)               *
*                                                                     *
* QLPAR MUST BE LINKEDITED IN AN APF-AUTHORIZED + LINKLIST CONCATEN-  *
*       ATED LOADLIBRARY. ADD ALSO AN ENTRY IN THE AUTHCMD-LIST OF    *
*       YOUR IKJTSOXX-MEMBER IN SYS1.PARMLIB                          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*     EQUATES                                                         *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2                      MESSAGE-AREA POINTER
R3       EQU   3                      WORK-REGISTER
R4       EQU   4                      WORK-REGISTER
R5       EQU   5                      PGFIX-STORAGE POINTER
R6       EQU   6                      PGFIX-STORAGE LENGTH
R7       EQU   7                      WORK-REGISTER
R8       EQU   8                      BASE #2
R9       EQU   9                      ERROR-MSG-POINTER
R10      EQU   10                     BAL
R11      EQU   11                     STORAGE OBTAINED AREA
R12      EQU   12                     BASE #1
R13      EQU   13                     HIGHER SAVE-AREA
R14      EQU   14                     BAKR
R15      EQU   15                     RC
         EJECT
***********************************************************************
*     START                                                           *
***********************************************************************
QLPAR    CSECT
QLPAR    AMODE 31
QLPAR    RMODE ANY
         PRINT GEN
         SPACE 2
         BAKR  14,0                  ESTABLISH LINKAGE-CONVENTIONS
         LR    R12,R15               LOAD TEMPORARY BASE TO MY BASE
         LA    R8,2048               LOAD 2NDRY BASE  ..
         LA    R8,2048(R12,R8)       W. 2ND 4K
         USING QLPAR,R12,R8          TELL ASSEMBLER
         LR    R3,R1                 ESTABLISH CPPL'S  ADDRESSABILITY
         XR    R9,R9                 CLEAR RC/ERRORMSG REGISTER
GETSTOR  DS    0H
         STORAGE OBTAIN,LENGTH=LDWORK,LOC=ANY  GET WORKING STORAGE
         LR    R11,R1                ESTABLISH DSECT'S ADDRESSABILITY
         USING DWORK,R11             TELL ASSEMBLER
         BAL   R10,LOADCPPL          SAVE CPPL INTO MY IOPL
         BAL   R10,GETPARMS          GET THE PARAMETER-STRING
         LTR   R9,R9                 WENT IT OK ?
         BNZ   ISSUEMSG              (BNZ = NO, ERRORMSG + OUT)
SETAUTH  MODESET MF=(E,SUPRMOD)      GET ME INTO SUPERVISOR MODE
         STAX  DEFER=YES             NO ATTENTION EXITS, PLEASE
         BAL   R10,FIXPAGE           GO AND PAGEFIX SOME STORAGE
         LTR   R9,R9                 WENT IT OK ?
         BNZ   ISSUEMSG              (BNZ = NO, ERRORMSG + OUT)
         BAL   R10,LPARINFO          GET THIS BLOODY LPAR-INFOS
         BAL   R10,CLEANPAG          CLEANUP PAGEFIXED+GETM'D AREAS
ISSUEMSG DS    0H
         BAL   R10,PUTLBSNS          ISSUE EITHER INFOS OR ERRORMSG
*
ENDIT    DS    0H
REMAUTH  MODESET MF=(E,PROBMOD)      RETURN INTO PROBLEM MODE
         STORAGE RELEASE,LENGTH=LDWORK,ADDR=(R11)  FREE OBTAINED STOR.
         XR    R15,R15                SET RC=0
         PR                           END QLPAR + CLEANUP
*
***********************************************************************
*     EXECUTE                                                         *
***********************************************************************
***********************************************************************
*     SUBROUTINES                                                     *
***********************************************************************
*
LOADCPPL ST    R10,SAVE10
         USING CPPL,R3                GET THE ADDRESSES IN CPPL
         MVC   CPLCBUF,CPPLCBUF       MOVE COMM.-BUFFER ADDR TO MY AREA
         MVC   CPLUPT,CPPLUPT         MOVE USERPROFTAB ADDR TO MY AREA
         MVC   CPLPSCB,CPPLPSCB       MOVE PROT.STEP-CB ADDR TO MY AREA
         MVC   CPLECT,CPPLECT         MOVE ECT-ADDRESS TO MY AREA
         DROP  R3                     FREE CPPL
         L     R10,SAVE10
         BR    R10
*
*********************************************************************
* GET PASSED PARAMETERS
*********************************************************************
*
GETPARMS ST    R10,SAVE10
         XR    R9,R9
         L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* FIXPAGE: PAGEFIX STORAGE VIA GETMAIN (NO STORAGE OBTAIN W. PGSER)
**********************************************************************
FIXPAGE  ST    R10,SAVE10
         XR    R9,R9
         GETMAIN RU,LV=4096,BNDRY=PAGE,LOC=BELOW
         LR    R5,R1                 SAVE POINTER TO GETMAINED AREA
         LTR   R15,R15               CHECK STORAGE OK
         BZ    PAGE0010              (BZ = OKAY, CONTINUE)
         LA    R9,ERR0020            POINT TO THE APPROPRIATE MESSAGE
         B     PAGE0090              GO AND ISSUE IT
PAGE0010 DS    0H
         LA    R6,2048               LOAD LENGTH  ...
         AR    R6,R6                 ... OF 1 PAGE REALSTORAGE
         AR    R6,R5                 POINT AT END OF GETM'D AREA
         BCTR  R6,0                  SUBTRACT 1 TO POINT TO LAST BYTE
         STM   R5,R6,PAGEADRS        SAVE THE POINTERS
         PGSER R,FIX,A=(5),EA=(6),BRANCH=Y,ECB=FIXECB
         LTR   R15,R15               WAS IT SUCCESSFUL ?
         BZ    PAGE0090              (BZ=YES, CONTINUE)
         LA    R9,ERR0030            NO, LOAD ERROR-MESSAGE
PAGE0090 DS    0H
         XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
*
*********************************************************************
* GET LPAR-INFORMATION VIA DIAGNOSE
* INSTRUCTION FORMAT:
*  X'83'       OPCODE FOR DIAGNOSE
*  X'10'       USE REGISTERS 1 (REAL-ADDRESS OF PAGEFIXED STORAGE)
*              AND 0 (W. A CONSTANT OF 4)
*  X'0204'     IS THE DIAGNOSE CODE FOR LPAR-INFORMATIONS
*********************************************************************
*
LPARINFO ST    R10,SAVE10
         XR    R9,R9
         LM    R5,R6,PAGEADRS        GETM'D AREA: START(R3), END(R4)
         LRA   R1,0(0,R5)            LOAD REAL START ADDR INTO R1
         LA    R0,4                  R0 NEEDS A CONSTANT OF '4'
         DC    X'83100204'           PERFORM A DIAGNOSE 204
         USING PRSMBUF,R5            TELL ASSEMBLER
         LA    R2,ALLMSGS            TOP OF MESSAG-AREA
         XR    R4,R4                 CLEAR WORKREG
         IC    R4,PRNBPART           INSERT # OF PARTITIONS
         LR    R6,R4                 SAVE IT FOR OUTER LOOP
         PRINTREG (R4),RESULT=DECIMAL,PADCHAR=BLANK   MAKE IT PRINTABLE
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(30,R7),=CL30'NUMBER OF PARTITIONS:'    MOVE TEXT THERE
         MVC   30(8,R7),8(R1)        MOVE DATA THEREAFTER
         LA    R0,38                 LOAD LENGTH OF ALL TOGETHER
         ADDMSG (R0),(R7),(R2)       MAKE A "PUTLBSNS"-CONFORM STRING
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
         XR    R4,R4                 CLEAR WORKREG
         IC    R4,PRNBPROC           INSERT # OF PROCESSORS
         PRINTREG (R4),RESULT=DECIMAL,PADCHAR=BLANK   MAKE IT PRINTABLE
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(30,R7),=CL30'NUMBER OF PROCESSORS:'    MOVE TEXT THERE
         MVC   30(8,R7),8(R1)        MOVE DATA THEREAFTER
         LA    R0,38                 LOAD LENGTH OF WHOLE STUFF
         ADDMSG (R0),(R7),(R2)       MAKE IT "PUTLBSNS"-COMPATIBLE
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
*
         LR    R4,R5                 POINT AT TOP OF DSECT
         AH    R4,PROFFCUR           ADD OFFSET TO CURRENT PARTITION
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(30,R7),=CL30'CURRENT PARTITION NAME:'  MOVE TEXT THERE
         MVC   30(8,R7),8(R4)        MOVE DATA THEREAFTER
         LA    R0,38                 LOAD LENGTH OF WHOLE STUFF
         ADDMSG (R0),(R7),(R2)       MAKE IT "PUTLBSNS"-COMPATIBLE
LPARLOOP DS    0H                    OUTER LOOP (NR. OF LPAR)
*
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
         LA    R1,1
         STH   R1,0(R2)
         MVI   2(R2),C'*'
         AH    R2,=H'3'
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(30,R7),=CL30'PARTITION SUMMARY FOR:'  MOVE TEXT THERE
         MVC   30(8,R7),PRNAME       MOVE DATA THEREAFTER
         LA    R0,38                 LOAD LENGTH OF WHOLE STUFF
         ADDMSG (R0),(R7),(R2)       MAKE IT "PUTLBSNS"-COMPATIBLE
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
*
         XR    R4,R4                 CLEAR WORKREG
         IC    R4,PRNOPART           INSERT PARTITION-NUMBER
         PRINTREG (R4),RESULT=DECIMAL,PADCHAR=BLANK   MAKE IT PRINTABLE
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(30,R7),=CL30'PHYSICAL NUMBER OF PARTITION'  TEXT THERE
         MVC   30(8,R7),8(R1)        MOVE DATA THEREAFTER
         LA    R0,38                 LOAD LENGTH OF ALL TOGETHER
         ADDMSG (R0),(R7),(R2)       MAKE A "PUTLBSNS"-CONFORM STRING
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
*
         XR    R4,R4                 CLEAR WORKREG
         IC    R4,PRNBPRLO           INSERT # OF LOGICAL PROCESSORS
         LR    R3,R4                 SAVE IT
         PRINTREG (R4),RESULT=DECIMAL,PADCHAR=BLANK   MAKE IT PRINTABLE
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(30,R7),=CL30'NUMBER OF LOGICAL PROCESSORS:' TEXT THERE
         MVC   30(8,R7),8(R1)        MOVE DATA THEREAFTER
         LTR   R4,R4                 ARE THERE NO LOGICAL PROCS?
         BNZ   PROCFND1              YES, THERE ARE, BUMP
         MVI   37(R7),C'0'           MOVE A ZERO THERE
PROCFND1 DS    0H
         LA    R0,38                 LOAD LENGTH OF ALL TOGETHER
         ADDMSG (R0),(R7),(R2)       MAKE A "PUTLBSNS"-CONFORM STRING
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
         LTR   R3,R3                 NO LOGICAL PROCESSORS? $$TEST$$
         BZ    NOLPROCS              BUMP OVER LPROC-LOOP $$TEST$$
*
LPRCLOOP DS    0H                    INNER LOOP, 1 PER PROC PER LPAR.
         XR    R4,R4
         IC    R4,PRNBPRLN           INSERT LPROC-NUMBER
*
         PRINTREG (R4),RESULT=DECIMAL,PADCHAR=BLANK   MAKE IT PRINTABLE
         LA    R7,WORKMSG            POINT TO WORKAREA
         XC    WORKMSG,WORKMSG       CLEAR IT OUT
         MVC   0(22,R7),=CL22'LOGICAL PROCESSOR NR.:'        TEXT THERE
         LTR   R4,R4                 IS IT PROCESSOR-NR '0' ?
         BZ    MOVEZERO              (BZ=YES, MOVE A ZERO THERE)
         MVC   22(8,R7),8(R1)        MOVE DATA THEREAFTER
         B     BUMP0020              BUMP OVER NEXT INSTRUCTION
MOVEZERO MVI   29(R7),C'0'           MOVE A ZERO THERE
BUMP0020 DS    0H
         MVC   32(24,R7),=CL24'WEIGHT-FACTOR (DECIMAL):'
         LH    R4,PRWEIGHT           INSERT WEIGHTNING-FACTOR
         PRINTREG (R4),RESULT=DECIMAL,PADCHAR=BLANK   MAKE IT PRINTABLE
         MVC   56(8,R7),8(R1)        MOVE DATA THEREAFTER
         MVC   66(11,R7),=CL11'CAPPED:  NO'
         TM    PRPRFLAG,PRPRCAPD     IS IT CAPPED?
         BNO   NOTCAPPD              NO, BUMP OVER INSER
         MVC   74(3,R7),=CL3'YES'
NOTCAPPD DS    0H
         LA    R0,77                 LOAD LENGTH OF ALL TOGETHER
         ADDMSG (R0),(R7),(R2)       MAKE A "PUTLBSNS"-CONFORM STRING
         LR    R2,R1                 POINT AT NEXT FREE MESSAGE-SLOT
*
         LA    R5,PRPRLENG(,R5)      ADD 1 LOG.PROC-ENTRY (INNER LOOP)
         BCT   R3,LPRCLOOP           GET NEXT LOGICAL PROCESSOR
NOLPROCS DS    0H                    $$TEST$$ ÉOGICAL PROCS. 0
         LA    R5,PRPRFLEN(,R5)      ADD 1 LPAR-ENTRY (OUTER LOOP)
         BCT   R6,LPARLOOP           GET NEXT LPAR
         L     R10,SAVE10            LOAD SUBROUTINES ENTRY-POINT
         BR    R10                   BRANCH THERE
         LTORG
*
**********************************************************************
* CLEANPAG: FREE PAGEFIXED STORAGE AND GETMAINED AREA
**********************************************************************
CLEANPAG ST    R10,SAVE10
         XR    R9,R9
         LM    R5,R6,PAGEADRS        SAVE THE POINTERS
         PGSER R,FREE,A=(5),EA=(6),BRANCH=Y,ECB=FIXECB
         FREEMAIN RU,LV=4096,A=(5)
CLEAN090 DS    0H
         L     R10,SAVE10
         BR    R10
         LTORG
*
***********************************************************************
*     PUTLBSNS: DO THE PUTLINE-BUSINESS                               *
***********************************************************************
PUTLBSNS ST    R10,SAVE10
         STFSMODE ON,INITIAL=YES     CLEAR ....
         STFSMODE OFF                      .... SCREEN
         LA    R4,IOPLADS            LOAD DYNAMIC IOPL
         USING IOPL,R4               FILL IT
         L     R3,CPLUPT             LOAD DYN. USER'S PROFILE TABLE
         ST    R3,IOPLUPT            STORE IT IN THE IOPL
         L     R3,CPLECT             LOAD ADDRESS OF DYN. ECT
         ST    R3,IOPLECT            STORE IT IN THE IOPL
         LA    R3,ECBADS             LOAD ADDR OF MY ECB TO R3
         ST    R3,IOPLECB            STORE ADDRESS OF ECBADS IN IOPL
         MVC   @MLWAREA(L@PUTLIN),@PUTLIN
         MVC   DTEXTADS(LTEXTADS),TEXTADS   MOVE CONSTANT TO MY AREA
         LA    R3,ALLMSGS            POINT TO VARIABLE MSG-AREA
         LTR   R9,R9                 IS THERE AN ERRORMESSAGE ?
         BZ    PUTL010               (BZ=NO, WRITE DATA)
         LR    R3,R9                 POINT TO CORRECT ERRORMSG
PUTL010  DS    0H                    PREPARE FOR THE PUTLINE
         XC    DTEXTADS(4),DTEXTADS  CLEAR LENGTH-COUNTER
         LH    R5,0(R3)              LENGTH OF CURRENT ENTRY INTO R5
         LTR   R5,R5                 IS IT ZERO ?
         BZ    PUTL020               (BE = YES, ALL WRITTEN)
PUTL015  LA    R4,4(,R5)             ADD 4 FOR PUTLINE-HEADER
         STH   R4,DTEXTADS           STORE INTO WORKAREA
         BCTR  R5,0                  SUBTRACT 1 FOR EXECUTE
         EX    R5,PUTLMVC1           DO THE EXECUTE
         PUTLINE PARM=@MLWAREA,                                        X
               OUTPUT=(DTEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)
*                                    DO THE PUTLINE
         AR    R3,R5                 ADD LENGTH OF MSG-TEXT
         LA    R3,3(,R3)             ADD LENGTH OF MSG-FIELD
         B     PUTL010               TRY NEXT MESSAGE
PUTL020  XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
PUTLMVC1 MVC   DTEXTADS+4(0),2(R3)
***********************************************************************
*     CONSTANTS                                                       *
***********************************************************************
*
TEXTADS  DC    H'132'
         DC    H'0'
         DC    CL132' '
LTEXTADS EQU   *-TEXTADS
*
ERR0020  DC    H'76'
         DC    CL76'ERROR DURING GETMAIN. FUNCTION QLPAR ENDED.'
         DC    H'0'
ERR0030  DC    H'76'
         DC    CL76'PGSER FAILED. QLPAR CAN''T CONTINUE.'
         DC    H'0'
*
EDMASK   DC    X'4020202020202020'
LEDMASK EQU    *-EDMASK
***********************************************************************
*     MACRO LIST-FORM                                                 *
***********************************************************************
@PUTLIN  PUTLINE MF=L
L@PUTLIN EQU    *-@PUTLIN
*
SUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L
*
PROBMOD  MODESET KEY=NZERO,MF=L
*
         EJECT
*
***********************************************************************
*     COPY    SECTION                                                 *
***********************************************************************
***********************************************************************
*     WORKING SECTION                                                 *
***********************************************************************
*
DWORK    DSECT
@MLWAREA DS    XL256                  MF=L WORKAREA
*
SAVE2    DS    F
SAVE10   DS    F
PAGEADRS DS    2F
*
FIXECB   DS    F
*
CPLCBUF  DS    F                      CPPL-WORKFIELDS
CPLUPT   DS    F
CPLPSCB  DS    F
CPLECT   DS    F
*
ECBADS   DS    F                      PUTLINE WORKFIELDS
IOPLADS  DS    4F
*
WORKDW   DS    D
WORKMASK DS    CL(LEDMASK)            MSG-WORKFIELD
*
DTEXTADS DS    CL(LTEXTADS)           MSG-WORKFIELD
*
WORKMSG  DS    CL80
*
ALLMSGS  DS    CL32767
LALLMSGS EQU   *-ALLMSGS
*
LDWORK   EQU   *-DWORK
*
         EJECT
*--------------------------------------------------------------------*
*        DIAGNOSE 204 BUFFER                                         *
*--------------------------------------------------------------------*
         SPACE 3
PRSMBUF  DSECT
PRNBPART DS    XL1                 # PARTITIONS
         DS    XL4
PRNBPROC DS    XL1                 # PHYSICAL PROCESSORS
PROFFCUR DS    H                   CURRENT PARTITION ENTRY OFFSET
PRTOD    DS    D                   TOD CLOCK
PRPRFLEN EQU   *-PRSMBUF
         SPACE 3
*--------------------------------------------------------------------*
*        PARTITION ENTRY                                             *
*--------------------------------------------------------------------*
         SPACE 3
PRSMPART DS    0F
PRNOPART DS    XL1                  PARTITION #
PRNBPRLO DS    XL1                  # LP'S IN THIS PARTITION
         DS    XL6
PRNAME   DS    CL6                  PARTITION NAME
PRPALENG EQU   *-PRSMPART
         SPACE 3
*--------------------------------------------------------------------*
*        LOGICAL PROCESSOR ENTRY FOR PARTITION                       *
*--------------------------------------------------------------------*
         SPACE 3
PRSMPARP DS    0F
         DS    XL1
PRNBPRLN DS    XL1                 LP #
         DS    XL3
PRPRFLAG DS    XL1                 FLAGS
PRPRCAPD EQU   X'40'               FLAGS
PRWEIGHT DS    H                   PARTITION WEIGHT
PRDISP   DS    D                   DISPATCH TIME
         DS    XL8
PRPRLENG EQU   *-PRSMPARP
*
         CVT     DSECT=YES
         IHAPVT
         IKJCPPL
         IKJIOPL
         END   QLPAR
/*
//SYSLIB    DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.CNTL    <== THIS PDS
//          DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,DISP=(NEW,PASS),
//          SPACE=(3200,(200,50)),DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80)
//SYSPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//*
//* =====================================================
//* ===== L I N K A G E   E D I T O R ===================
//* =====================================================
//LKED      EXEC PGM=HEWL,REGION=1024K,COND=(0,NE),
//             PARM='XREF,LIST,LET,AC=1,REUS,RENT'
//SYSLMOD   DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.LOAD
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,3))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)
//          DD *
  NAME    QLPAR(R)
/*
//TESTRC IF (RC EQ 0) THEN
//*
//SCHTEPP3   EXEC PGM=IEBCOPY,REGION=8M
//SYSPRINT DD  SYSOUT=*
//IN1  DD  DSN=SA1T.T750K.CBTFILE.LOAD,
//         DISP=SHR
//OU1  DD  DSN=SYS2.USER.LINKLIB,
//         DISP=SHR
//SYSIN    DD  *
   COPYMOD INDD=((IN1,R)),OUTDD=OU1
   SELECT MEMBER=QLPAR
/*
//ENDTEST ENDIF
