//T750KQ   JOB (317,04,E150AQ),'RAMSEIER',
//             MSGLEVEL=(1,1),
//             CLASS=A,
//             MSGCLASS=T,
//             NOTIFY=&SYSUID,
//             TIME=NOLIMIT
//*MAIN SYSTEM=SYT
//*
//ASM      EXEC PGM=ASMA90,REGION=2048K,
//          PARM='NODECK,OBJECT,RENT'
//SYSIN     DD *
QCMD     TITLE '*** "QCMD" *** TSO COMMAND PROCESSOR &SYSDATE'
***********************************************************************
*                                                                     *
*     QCMD    - SET UP AN EXTENDED MULTIPLE CONSOLE SUPPORT (MCS)     *
*               ENVIRONMENT                                           *
*                                                                     *
*     CALL: 1.: TSO QCMD ....   (DESIRED COMMAND, NOT QUOTED)         *
*                                                                     *
*           2.: TSO QCMD CMD=(CCCCCCCCCCCC),T=SSS,M=X                 *
*               CCCCC IS THE COMMAND YOU WANT TO PERFORM              *
*               SSS   IS THE DECIMAL NUMBER OF SECONDS YOU WANT TO    *
*                     WAIT FOR A MESSAGE TO ARRIVE                    *
*               X     IS THE MESSAGE-DELIVERY FORMAT:                 *
*               P = PUTLINE-DELIVERY (DEFAULT)                        *
*               R = DELIVERY INTO REXX-VARIABLES (SEE REXX-QCMC)      *
*               B = BOTH OF THEM                                      *
*                                                                     *
*           SO, IF YOU'RE HAPPY WITH THE DEFAULT OF 1 SECOND, JUST    *
*           USE CALL FORMAT 1, OTHERWISE SET THE DESIRED WAIT-TIME    *
*           BY USING CALL-FORMAT 2                                    *
*                                                                     *
*                                                                     *
*     THE CP RUNS EITHER AS A TSO-COMMAND (ONLINE OR BATCH)           *
*            OR CALLED BY A REXX-PROCEDURE (ONLINE OR BATCH)          *
*                                                                     *
*     THE CP RETURNS RESULTS VIA THE PUTLINE-COMMAND; SO              *
*         THE ANSWER CAN BE PROCESSED VIA THE OUTTRAP-FUNCTION        *
*         IN REXX EXEC'S                                              *
*                                                                     *
*     THE CP USES MASTER-CONSOLE AUTHORITY, SO YOU DON'T HAVE TO      *
*         ACTIVATE THE RACF-OPERCMDS CLASS TO ISSUE COMMANDS OTHER    *
*         THAN DISPLAY (AS IN SYSCMD - FUNCTION IN REXX)              *
*                                                                     *
*     SYSTEM-REQUIREMENTS:                                            *
*     --------------------                                            *
*     THE CP MUST BE ASSEMBLED + LINKED RENT,REUS,AC=1                *
*     IT MUST RUN IN AUTHORIZED STATE BECAUSE OF THE MODESET          *
*     REQUIREMENTS                                                    *
*     IT IS REENTRANT + REUSABLE                                      *
*     IT MUST BE SPECIFIED IN THE AUTHCMD FIELD OF                    *
*     IKJTSOXX-MEMBER IN SYS1.PARMLIB                                 *
*     MODULE SHOULD RESIDE IN A LNKLST-CONCATENATED LIBRARY           *
*                                                                     *
* SAMPLE: - TSO QCMD D NET,PENDING      -> RETURNS ALL PENDING RES.   *
*                                                                     *
*         - TSO QCMD CMD=(F LLA,REFRESH),T=15  -> WAIT 15 SEC. FOR    *
*                                              MESSAGE 'LLA REFRESHED'*
*                                                                     *
* SPECIALS: TSO QCMD GET_REPLIES GETS A LIST OF ALL CURRENTLY OPEN    *
*           REPLIES.                                                  *
*                                                                     *
* LIMITS: - THE CP CAN NOT TRAP UNSOLICITED MESSAGES                  *
*                                                                     *
*         - THE MAX. NUMBER OF MESSAGES THAT CAN BE TRAPPED IS DETER- *
*           MINED BY THE SIZE OF THE ALLMSGS-FIELD.                   *
*                                                                     *
*         - SOME COMMANDS RETURN MORE THAN 1 MDB, E.G. THE $DI CMD.   *
*           AND SO, ESPECIALLY WHEN WAITING Q LONGTIME FOR RESPONSES, *
*           YOU WILL RECEIVE UNSOLICITED MESSAGES OF OTHER COMMANDS.  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*     EQUATES                                                         *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2                      WORK-REGISTER
R3       EQU   3                      WORK-REGISTER
R4       EQU   4                      WORK-REGISTER
R5       EQU   5                      WORK-REGISTER
R6       EQU   6                      WORK-REGISTER
R7       EQU   7                      WORK-REGISTER
R8       EQU   8                      ERROR-MSG-POINTER
R9       EQU   9                      GETMAINED AREA
R10      EQU   10                     BAL
R11      EQU   11                     BASE #1
R12      EQU   12                     BASE #2
R13      EQU   13                     HIGHER SAVE-AREA
R14      EQU   14                     BAKR
R15      EQU   15                     RC
         EJECT
***********************************************************************
*     START                                                           *
***********************************************************************
QCMD     CSECT
QCMD     AMODE 31
QCMD     RMODE ANY
         PRINT NOGEN
         LR    R3,R1                  SAVE PASSED PARAMETERS
         SPACE 2
         BAKR  14,0                  ESTABLISH LINKAGE-CONVENTIONS
         LR    R11,R15               LOAD TEMPORARY BASE TO MY BASE
         LA    R12,2048               LOAD 2NDRY BASE  ..
         LA    R12,2048(R12,R11)     W. 2ND 4K
         USING QCMD,R11,R12          TELL ASSEMBLER
         LR    R3,R1                 ESTABLISH CPPL'S  ADDRESSABILITY
GETSTOR  DS    0H
         STORAGE OBTAIN,LENGTH=LDWORK,LOC=BELOW     GET WORK STORAGE
         LR    R9,R1                 ESTABLISH DSECT'S ADDRESSABILITY
         USING DWORK,R9              TELL ASSEMBLER
         BAL   R10,LOADCPPL          SAVE CPPL INTO MY IOPL
         BAL   R10,GETPARMS          GET THE PARAMETER-STRING
         LTR   R15,R15               WENT IT OK ?
         BNZ   ENDIT                 (BNZ = NO, ERRORMSG + OUT)
SETAUTH  MODESET MF=(E,SUPRMOD)      GET ME INTO SUPERVISOR MODE
         STAX  DEFER=YES             NO ATTENTION EXITS, PLEASE
         MODESET MF=(E,PROBMOD)      RETURN INTO PROBLEM MODE
         BAL   R10,CONSACT           ACTIVATE MCS-CONSOLE SESSION
         LTR   R15,R15               WENT IT OK ?
         BNZ   ENDIT                 (BNZ = NO, ERRORMSG + OUT)
MAIN0040 CLI   REPLYFLG,C'Y'         SHALL I TRAP REPLY-IDS ?
         BE    GETRPLYS              (BE=YES, GET THE REPLY-IDS)
         BAL   R10,EXECCMD           GO AND EXECUTE THE COMMAND
         BAL   R10,WAITMSG           WAIT FOR MESSAGE
         BAL   R10,GETMSG            DO ORDINARY MDB-BUSINESS
         BAL   R10,CLEANUP           CLEANUP BEFORE RETURNING ERRORMSG
         LTR   R15,R15               R15 SET BY GETMSG. IS IT ZERO ?
         BNZ   ENDIT                 (BNZ = NO,RETURN THE ERRORMESSAGE)
         BAL   R10,PUTLBSNS          DO THE PUTLINE-BUSINESS
         BAL   R10,RETRESLT          PREPARE THE RESULT
         BAL   R10,BUILDVAR          BUILD THE REXX-VARIABLES
         B     ENDIT
GETRPLYS BAL   R10,CHKRPLYS          CHECK FOR ACTIVE REPLIES
         LTR   R15,R15               WENT IT OK ?
         BZ    SETUPXME              (BZ = YES, CONTINUE)
         BAL   R10,CLEANUP           NO REPLIES, CLEANUP AND ...
         B     ENDIT                 ... RETURN
SETUPXME BAL   R10,XMEMINIT          INITIALIZE CROSS-MEMORY SESSION
         BAL   R10,CLEANUP           CLEANUP
         BAL   R10,PUTLBSNS
         BAL   R10,BUILDVAR          BUILD THE REXX-VARIABLES
*
ENDIT    DS    0H
         ST    R8,WORKRC
         LTR   R15,R15               WENT EVERYTHING OK ?
         BZ    END0015               (BZ = YES, SET RC = 0)
         CLI   REPLYFLG,C'Y'
         BNE   END0014
         MVI   QCMDRC,C'4'           INDICATE RC=4 TO BE SET
         B     END0017
END0014  MVI   QCMDRC,C'8'           INDICATE RC=8 TO BE SET
         B     END0017
END0015  MVI   QCMDRC,C'0'           INDICATE RC=0 TO BE SET
END0017  BAL   R10,SETRCODE          SET RC-VARIABLE = 8
         BAL   R10,BUILDVAR          WRITE IT INTO REXX-VARIABLE
         CLI   QCMDRC,C'0'
         BE    RELSTOR
         CLI   MSGDFLAG,MSGDVREX
         BE    RELSTOR
         L     R8,WORKRC
END0020  LA    R4,IOPLADS            LOAD DYNAMIC IOPL
         USING IOPL,R4               FILL IT
         L     R3,CPLUPT             LOAD DYN. USER'S PROFILE TABLE
         ST    R3,IOPLUPT            STORE IT IN THE IOPL
         L     R3,CPLECT             LOAD ADDRESS OF DYN. ECT
         ST    R3,IOPLECT            STORE IT IN THE IOPL
         LA    R3,ECBADS             LOAD ADDR OF MY ECB TO R3
         ST    R3,IOPLECB            STORE ADDRESS OF ECBADS IN IOPL
         MVC   @MLWAREA(L@PUTLIN),@PUTLIN
         MVC   DTEXTADS(LTEXTADS),TEXTADS   MOVE CONSTANT TO MY AREA
         MVC   DTEXTADS+4(LERRMSGS),0(R8)
         PUTLINE PARM=@MLWAREA,                                        X
               OUTPUT=(DTEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)
RELSTOR  DS    0H
         STORAGE RELEASE,LENGTH=LDWORK,ADDR=(R9)     FREE WORK STORAGE
         PR                           END QCMD + CLEANUP
*
***********************************************************************
*     EXECUTE                                                         *
***********************************************************************
MOVETIM1 MVC   0(0,R5),0(R3)
MOVEPRM1 MVC   PARMSTR(0),4(R3)
MOVECMD1 MVC   MGCMD(0),0(R4)
HEXCMD1  XC    0(0,R4),0(R4)
         USING MDBT,R3
MOVEMSG1 MVC   0(0,R6),MDBTMSGT+1
         USING WQE,R2
MOVEALE1 MVC   0(0,R6),WQETXT
*
MVCBLD1  MVC   RXVNAME(0),0(R7)
MVCBLD2  MVC   RXVVAL(0),0(R7)
*
PUTLMVC1 MVC   DTEXTADS+4(0),2(R3)
***********************************************************************
*     SUBROUTINES                                                     *
***********************************************************************
*
LOADCPPL ST    R10,SAVE10
         USING CPPL,R3                GET THE ADDRESSES IN CPPL
         MVC   CPLCBUF,CPPLCBUF       MOVE COMM.-BUFFER ADDR TO MY AREA
         MVC   CPLUPT,CPPLUPT         MOVE USERPROFTAB ADDR TO MY AREA
         MVC   CPLPSCB,CPPLPSCB       MOVE PROT.STEP-CB ADDR TO MY AREA
         MVC   CPLECT,CPPLECT         MOVE ECT-ADDRESS TO MY AREA
         DROP  R3                     FREE CPPL
         L     R10,SAVE10
         BR    R10
*
*********************************************************************
* GET PASSED PARAMETERS
*********************************************************************
*
GETPARMS ST    R10,SAVE10
PARMS001 DS    0H                    CHECK FOR APPROPRIATE ENVIRONMENT
         MVC   @MLWAREA(L@EXTR),@EXTR    MOVE MF=L-WORKAREA INTO DSECT
         LA    R2,DWTSO                  LOAD EXTRACT-ANSWER-AREA
         EXTRACT (R2),MF=(E,@MLWAREA)    EXTRACT THE TSO-BLOCKS
         LTR   R2,R2                 IS THERE ANY ADDRESS ?
         BNZ   PARMS003              (BNZ=YES, WE'RE IN TSO)
         LA    R15,8                 LOAD RC=8
         LA    R8,ERR0030            POINT TO THE APPROPRIATE ERRMSG
         B     PARMS090              SET ERROR-MSG + LEAVE
PARMS003 L     R3,CPLCBUF            LOAD -> TO PARAMETERS
         LH    R4,0(R3)              LENGTH OF PARMSTRING
         LH    R5,2(R3)              OFFS. TO 1ST PARM OR L'NAME
         SH    R4,=H'4'              SUBTR. LENGTH-FIELDS(=1FULLWORD)
         CR    R5,R4                 IS OFFSET TO 1ST PARM = NAME ?
         BNE   PARMS005              NO, SO WE GOT PARMS
         LA    R15,8                 LOAD RC=8
         LA    R8,ERR0010            POINT TO ERROR-MSG
         B     PARMS090              SET ERROR-MSG + GO OUT
PARMS005 DS    0H
         SR    R4,R5                 TOT.LENGTH-OFFSET=EFFECT. LENGTH
         AR    R3,R5                 ADD OFFSET TO CMDBUF ->
         MVC   PARMSTR,BLANK         FILL THE PARAMETERSTRING W. BLANKS
         MVC   PARMSTR+1(L'PARMSTR-1),PARMSTR ....
         STH   R4,PARMLEN            STORE THE TOTAL LENGTH OF PARMS
         STH   R4,MGCMDL             TWICE. ONE INTO CMD-LENGTH FIELD
         BCTR  R4,0                  SUBTRACT 1 FOR EXECUTE
         EX    R4,MOVEPRM1           WRITE IN THE PARMS
PARMS007 DS    0H
         TR    PARMSTR,ALFATAB       CONVERT TO UPPERCASE
         LA    R3,PARMSTR            POINT TO START OF PARAMETERS
         LH    R4,MGCMDL             LOAD LENGTH INTO R4
**LOOP                               START OF PARM-WALKTHROUGH-LOOP
PARMS010 DS    0H                    CHECK TYPE OF COMMAND PASSED:
         CLC   0(5,R3),=CL5'CMD=('   IS IT TYPE 2 (W. T= + CMD=( ?
         BNE   PARMS020              NO AT THIS POS. TRY NEXT
         LA    R3,5(,R3)             YES, FOUND, BUMP BEHIND IT
         ST    R3,STARTCMD           STORE THE STARTING ADDR. OF CMD
         B     PARMS030              LEAVE THE LOOP
PARMS020 LA    R3,1(R3)              NO CMD= FOUND, BUMP TO NEXT CHAR
         BCT   R4,PARMS010           RE-DO THE LOOP
**ENDLOOP                            END OF PARM-WALKTHROUGH-LOOP
         LH    R3,MGCMDL             TYPE 1, JUST CMD CHOSEN, SO
         LA    R4,PARMSTR            LOAD THE LENGTH + SET TIME-FLAG
         MVI   TIMEFLAG,TIMEDEF      NO TIME SET, USE DEFAULT
         MVI   MSGDFLAG,MSGDPUTL     INDICATE PUTLINE MESSAGEPROCESSING
         B     FILLCMD               GO AND FILL IN THE COMMAND
PARMS030 DS    0H                    THERE IS A CMD=(, SO POINT TO
         LH    R4,MGCMDL             THE END OF THE COMMAND:
         LA    R3,PARMSTR              - -> TO START OF CMD AND ...
         AR    R3,R4                     -> ADD THE LENGTH OF THE CMD
**LOOP                               START OF THE CMD-LOOP
PARMS035 CLI   0(R3),C')'            DID WE GET A ')' ?
         BE    PARMS040              YES, GO AHEAD
         BCTR  R3,0                  NO, TRY NEXT
         BCT   R4,PARMS035           RE-DO THE LOOP
**ENDLOOP
         LA    R15,8                 MISSING RIGHT PARANTHESIS.
         LA    R8,ERR0020            SET APPROPRIATE ERROR-MSG + LEAVE
         B     PARMS090
PARMS040 DS    0H                    PREPARE SEPARATION  OF CMD-PART
         L     R4,STARTCMD           LOAD START OF COMMAND-TEXT
         SR    R3,R4                 SUBTRACT CURRENT POS OF ')'
         STH   R3,MGCMDL             STORE EFFECTIVE COMMAND-LENGTH
         BCTR  R3,0                  SUBTRACT 1 FOR EXECUTE
         MVI   REPLYFLG,C'N'         DEFAULT: NOT A REPLY
FILLCMD  EX    R3,MOVECMD1           FILL IN CMD-TYPE 1 OR 2
         EX    R3,HEXCMD1            BLANK OUT, PREVENT T=MISMATCH
         CLC   MGCMD(11),=CL11'GET_REPLIES'  DOES THE USER WANT RID?
         BNE   TIMEBSNS              (BNE=NO, NORMAL BUSINESS)
         MVI   REPLYFLG,C'Y'         SET REPLY-FLAG
*
* END OF COMMAND-SEPARATION
*
TIMEBSNS DS    0H                    TIME=BUSINESS
         TM    TIMEFLAG,TIMEDEF      IS IT THE DEFAULT-TIME (1 SEC ?)
         BO    DEFTIME               YES, NOTHING TO COMPUTE, GO THERE
         LH    R4,PARMLEN            LOAD LENGTH OF PASSED PARMS
         LA    R3,PARMSTR            POINT TO THE START
TIME000  CLC   0(2,R3),=CL2'T='      IS THERE A T= ? (TIME-PARAMETER)
         BE    TIME010               YES, FOUND. BRANCH THERE
         LA    R3,1(R3)              POINT TO NEXT POSITION
         BCT   R4,TIME000            RETRY.
         B     DEFTIME               NO T= FOUND, USE DEFAULT
TIME010  LA    R3,2(R3)              BUMP BEHIND T=
         ST    R3,STARTTIM           STORE IT
         XR    R4,R4                 INIT REG
TIME011  CLI   0(R3),C'0'            IS THIS REALLY A NUMBER ?
         BL    TIME015               NO, CHECK FURTHER
TIME011A CLI   0(R3),C'9'            IS THIS REALLY A NUMBER ?
         BH    TIME015               NO, CHECK FURTHER
         LA    R4,1(,R4)             YES, INCR. POS. + LENGTH COUNTERS
         LA    R3,1(,R3)
         B     TIME011               AND LOOK FOR END OF PARM.
TIME015  LTR   R4,R4                 IS THERE A VALID # AT ALL ?
         BZ    DEFTIME               NO, USE DEFAULT-TIME
         L     R3,STARTTIM           POINT TO START OF T= VALUE
         LA    R5,TIMEVAL            INIT VALUE-FIELD TO GET IT PACKED
         MVC   0(L'TIMEVAL,R5),=CL3'000'  EASILY.
         LA    R6,L'TIMEVAL          LOAD MAX. LENGTH OF TIMER (3)
         SR    R6,R4                 SUBTRACT PARMS LENGTH AND ...
         AR    R5,R6                 ... POINT THERE.
         BCTR  R4,0                  SUBTRACT 1 FOR EXECUTE AND ...
         EX    R4,MOVETIM1           ... DO IT.
         PACK  PACKPARM(2),TIMEVAL(3)  PACK THE DEC. TIMEVALUE ...
         ZAP   TIMEDW,PACKPARM       ... AND STORE IT IN A DOUBLEWORD.
         CVB   R4,TIMEDW             NOW THIS IS THE RIGTH FORM.
         MH    R4,=H'100'            MAKE TIMER UNITS THEREOUT.
         ST    R4,TIINTVL            STORE THIS VALUE
         C     R4,=A(10*60*100)      IS THE WAIT TIME >=10 MINUTES
         BNH   MSGDLVRY              (BNH=NO, LET IT)
DEFTIME  MVC   TIINTVL,=A(0100)      SET DEFAULT-TIME OF 1 SECOND.
*
MSGDLVRY DS    0H                    CHECK MESSAGE DELIVERY
         LH    R4,PARMLEN            LOAD LENGTH OF PASSED PARMS
         LA    R3,PARMSTR            POINT TO THE START
DLV0000  CLC   0(2,R3),=CL2'M='      IS THERE A M= ? (MSGD-PARAMETER)
         BE    DLV0010               YES, FOUND. BRANCH THERE
         LA    R3,1(R3)              POINT TO NEXT POSITION
         BCT   R4,DLV0000            RETRY.
         B     DEFDLVRY              NO M= FOUND, USE DEFAULT
DLV0010  LA    R3,2(,R3)             BUMP BEHIND M=
         CLI   0(R3),C'P'            PUTLINE-DELIVERY REQUIRED ?
         BE    DEFDLVRY              (BNE=YES, THIS IS DEFAULT)
         CLI   0(R3),C'V'            REXX-VARIABLE DELIVERY ?
         BNE   DLV0015               (BNE=NO, TRY FURTHER)
         MVI   MSGDFLAG,MSGDVREX     INDICATE REXX-VAR PROCESSING
         B     PARMS080              BRANCH AT END
DLV0015  CLI   0(R3),C'B'            IS BOTH REQUESTED?
         BNE   DEFDLVRY              (BNE=NO, PARM-ERROR, USE DEFAULT)
         MVI   MSGDFLAG,MSGDBOTH
         B     PARMS080              BRANCH AT END
DEFDLVRY DS    0H
         MVI   MSGDFLAG,MSGDPUTL     INDICATE PUTLINE-PROCESSING
PARMS080 XR    R15,R15
PARMS090 DS    0H
         L     R10,SAVE10
         BR    R10
         LTORG
*********************************************************************
* CONSACT: ACTIVATE MCS-SESSION
*********************************************************************
CONSACT  ST    R10,SAVE10            PREPARE CONSOLE-ACTIVATION
         L     R2,PSAAOLD-PSA        PSAAOLD POINTS TO SUBMITTERS ASCB
         L     R2,ASCBASXB-ASCB(,R2) ASCBASXB POINTS TO THE EXT. BLOCK
         L     R2,ASXBSENV-ASXB(,R2) ASXBSENV POINTS TO THE ACEE
         USING ACEE,R2               TELL ASSEMBLER
         MVC   MCTERM(L'ACEEUSRI),ACEEUSRI  FILL MCS LU= WITH USERID
         DROP  R2
         MVC   MCNAME(8),=CL8'QCMD01'       FILL MCS CONSID W. QCMD01
MCSOP010 DS    0H
         MVC   @MLWAREA(L@MCSOP),@MCSOP
         MODESET MF=(E,SUPRMOD)      GET ME INTO SUPERVISOR MODE
         LA    R3,WAOPPARM           BUILD OPERPARM DEFAULTS
         USING MCSOPPRM,R3           MAP AREA
         MVI   MCSOAUTH,MCSOMSTR     SET MASTER AUTHORITY
         MVI   MCSOMFRM,MCSOMFT      DISPLAY WITH A TIME STAMP
         OI    MCSOMFRM,MCSOMFS      DISPLAY WITH THE SYSTEM NAME
         OI    MCSOMFRM,MCSOMFJ      DISPLAY WITH JOB ID/NAME
         MVI   MCSORCFL,MCSORCAL     ALL ROUTE CODES
         MVI   MCSOLOGC,MCSOLOGN     DO NOT LOG THE ISSUED COMMAND
         MVI   MCSOMIG,MCSOMIGY      ASSIGN A MIGRATION ID
         MVC   MCSOKEY,=C'QCMD    '  USED FOR D C,KEY
         OI    MCSOMISC,MCSOUDY      DISPLAY UD MESSAGES
         OI    MCSOMISC,MCSOAUTN     DON'T QUEUE AUTOMATABLE MESSAGES
         OI    MCSOFLAG,MCSOVRDY     OVERRIDE RACF PROFILE OPERPARM
         MCSOPER REQUEST=ACTIVATE,   ACTIVATE MCS-CONSOLE              X
               NAME=MCNAME,          CONSOLE-NAME                      X
               CONSID=MCCONS,        CONSOLE-ID RETURNED BY MCSOPER    X
               OPERPARM=WAOPPARM,    MAKE ME THE GURU-USER             X
               TERMNAME=MCTERM,      USE USERID FOR TERMNAME AUDIT     X
               MCSCSA=MCCSA,         RETURNED CONS. STATUS AREA ADDR.  X
               MCSCSAA=MCCSAA,       RETURNED CONS. STATUS AREA ALET   X
               MSGDLVRY=FIFO,        MSGS RETAINED BY FIFO             X
               MSGECB=MCMSGECB,      ECB TO POST  WHEN MSG IS QUEUED   X
               ALERTECB=0,           ECB TO POST WHEN ALERT OCCURS     X
               RTNCODE=MCRC,         RETURN CODE FROM MCSOPER (R15)    X
               RSNCODE=MCRCC,        REASON CODE FROM MCSOPER (R0)     X
               MF=(E,@MLWAREA)
         MODESET MF=(E,PROBMOD)      RETURN INTO PROBLEM MODE
         ICM   R15,15,MCRC           WAS THE ACTIVATE SUCCESSFUL ?
         LTR   R15,R15
         BZ    MCSOP080              YES, GO AND EXECUTE THE CMD
         CH    R15,=H'4'             IS THE CONSOLE ALREADY ACTIVE?
         BE    MCSOP020              YES, TRY TO ASSIGN A FREE NUMBER
         LA    R15,8                 IND. RETURN-CODE
         LA    R8,ERR0040            NO, BAD ERROR, ISSUE MESSAGE AND
         B     MCSOP090              TERMINATE THE PROGRAM
MCSOP020 DS    0H                    QCMDXX IN USE, GET NEXT FREE #.
         XR    R3,R3                 CLEAR WORKREG.
         CLI   MCNAME+5,C'9'         IS 2ND DIGIT 9 ?
         BNE   MCSOP030              NO, IT'S EASY, JUST INC. BY 1
         CLI   MCNAME+4,C'9'         IS 1ST DIGIT ALSO = 9 ?
         BNE   MCSOP025              NO, WE STILL HAVE FREE CONSOLES
         LA    R15,8                 ALL 99 CONSOLES USED, INDICATE
         LA    R8,ERR0050            ERROR-MSG + LEAVE
         B     MCSOP090
MCSOP025 IC    R3,MCNAME+4           INCREASE 1ST DIGIT BY 1
         LA    R3,1(,R3)             AND SET 2ND TO 0 (EG: 29+1=30)
         STC   R3,MCNAME+4           STORE 1ST DIGIT.
         MVI   MCNAME+5,C'0'         SET 2ND TO 0 + STORE IT, TOO
         B     MCSOP010              RETRY TO GET A CONSOLE
MCSOP030 IC    R3,MCNAME+5           2ND DIGIT <9, SO JUST ...
         LA    R3,1(,R3)             ... INCREASE IT BY 1 AND ...
         STC   R3,MCNAME+5           STORE IT.
         B     MCSOP010              RETRY TO GET A CONSOLE
MCSOP080 XR    R15,R15
MCSOP090 DS    0H
         L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* EXECCMD: EXECUTE THE COMMAND
**********************************************************************
EXECCMD  ST    R10,SAVE10            PREPARE COMMAND-EXECUTION.
         CLI   REPLYFLG,C'Y'         DO WE JUST WANNA REPLIES ?
         BE    CMD0020               (BE=YES, NO COMMAND NECESSARY)
         MVC   @MLWAREA(L@MGCRE),@MGCRE     MOVE MF=L INTO DSECT
         STCK  MGCART                SET A DUMMY-CART
         LH    R3,MGCMDL             LOAD LENGTH OF THE COMMAND AND ..
         LA    R3,MGCMDL             POINT THERE ...
         MODESET MF=(E,SUPRMOD)      GET INTO SUPERVISOR STATE
         MGCRE TEXT=(R3),            COMMAND BUFFER                    X
               CONSID=MCCONS,        CONSOLE-ID RETURNED BY MCSOPER    X
               CART=MGCART,          COMMAND AND RESPONSE TOKEN        X
               MF=(E,@MLWAREA)
         MODESET MF=(E,PROBMOD)      RETURN INTO PROBLEM MODE
CMD0020  XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
*********************************************************************
* WAITMSG: WAIT FOR THE MESSAGE
***********************************************************************
WAITMSG  ST    R10,SAVE10            WAIT FOR THE MESSAGE WE SHOULD GET
DOWAIT   STIMER WAIT,BINTVL=TIINTVL  GO INTO A WAIT.
         XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* GET THE MESSAGE
**********************************************************************
GETMSG   ST    R10,SAVE10            NOW, START THE MSG-BUSINESS.
         LA    R6,ALLMSGS            -> TO TOP OF MSG-TABLE
GETM0000 DS    0H
         XC    MCMSGECB,MCMSGECB     CLEAR THE MSG-ARRIVED ECB.
         MVC   @MLWAREA(L@OPMSG),@OPMSG   MOVE MF=L INTO DSECT-AREA
         MODESET MF=(E,SUPRMOD)      GET INTO SUPERVISOR STATE
         SAC   512                   SWITCH TO AR MODE
         SYSSTATE ASCENV=AR          TELL MACROS THAT AR MODE IS ACTIVE
         MCSOPMSG REQUEST=GETMSG,    RETRIEVE A MESSAGE                X
               CONSID=MCCONS,        CONSOLE-ID RETURNED BY MCSOPER    X
               RTNCODE=MCRC,         RETURN CODE FROM MCSOPMSG (R15)   X
               RSNCODE=MCRCC,        REASON CODE FROM MCSOPMSG (R0)    X
               MF=(E,@MLWAREA)
         LAE   R3,0(0,R1)            SAVE A(MDB)
         SAC   0                     SWITCH TO PRIMARY MODE
         SYSSTATE ASCENV=P           TELL MACROS PRIM MODE IS ACTIVE
         MODESET MF=(E,PROBMOD)      RETURN INTO PROBLEM MODE
         ICM   R15,15,MCRC
         LTR   R15,R15               STORE THE RC OF GETMSG.
         BNZ   MDB9990               NOT ZERO, NO MORE MSGS.
         MODESET MF=(E,SUPRMOD)      GET INTO SUPERVISOR STATE
         SAC   512                   SWITCH TO AR MODE
         SYSSTATE ASCENV=AR          TELL MACROS THAT AR MODE IS ACTIVE
MDBSTUFF DS    0H
         USING MDB,R3                MDB IS POINTED TO BY GPR3
         CLC   MDBMID,=CL4'MDB '     IS IT REALLY A MDB ?
         BNE   ENDMDB                NO, GET OUT OF HERE
         LAE   R7,0(0,R3)            COPY GPR3 INTO AR7  --> A(MDB)
         SH    R7,=AL2(MDBPLNNO)     SUBTRACT LENGTH OF MDB-PREFIX
         LR    R4,R3                 POINT TO START OF MDB
         AH    R4,MDBLEN             ADD LENGTH OF MDB
         LA    R3,MDBHLEN(,R3)       ADD L'HEADER, POINT TO 1ST MDB OBJ
MDB0000  DS    0H
         CLC   MDBTYPE,=AL2(MDBGOBJ)   IS IT A GENERAL OBJECT ?
         BNE   MDB0010               NO, TRY FURTHER
         USING MDBG,R3               TELL ASSEMBLER
         B     MDB0030               NO FURTHER CHECKING, GET NEXT
MDB0010  DS    0H
         USING MDB,R3                TELL ASSEMBLER
         CLC   MDBTYPE,=AL2(MDBTOBJ) IS IT A TEXT-OBJECT ?
         BNE   MDB0020               NO, TRY FURTHER
*                                    PROCESS TEXT-OBJECT
         USING MDBT,R3               TELL ASSEMBLER
         LH    R5,MDBTLEN            LOAD MDBT-LENGTH
         SH    R5,=AL2(MDBTMBOB)     SUBTRACT NON-MSGTEXT PORTION
         CLI   MSGDFLAG,MSGDPUTL     JUST PUTLINE REQUIRED ?
         BE    MDB0012               (BE=YES, NO COLOR+HLITE REQUIRED)
         LR    R1,R5                 SAVE R5 IN R1
         AH    R1,=H'02'             ADD LENGTH OF COLOR + HILITE
         STH   R1,0(R6)              STORE THE LENGTH
         LA    R6,2(,R6)             BUMP BEHIND LENGTH-VALUE
         MVC   0(1,R6),MDBTPCOL      MOVE THE CURRENT COLOR THERE
         MVC   1(1,R6),MDBTPHIL      MOVE THE HIGHLIGHTING THERE
         LA    R6,2(,R6)             BUMP BEHIND ATTRIBUTE-PREFIX
         B     MDB0013
MDB0012  STH   R5,0(R6)              STORE LENGTH OG TEXT-PORTION IN
         LA    R6,2(,R6)             BUMP BEHIND LENGTH-VALUE
MDB0013  BCTR  R5,0                  MSG-AREA. THEN SUBTR. 1 F. EXECUTE
         EX    R5,MOVEMSG1           DO THE EXECUTE
         AR    R6,R5                 ADD THE LENGTH OF MSG  ....
         LA    R6,1(,R6)             ... + 1.
         B     MDB0030               GO FOR NETX MESSAGE
MDB0020  DS    0H
         USING MDB,R3
         CLC   MDBTYPE,=AL2(MDBCOBJ)  IS IT A CONTROL-PROGRAM OBJECT ?
         BNE   MDB0030               (BNE = NO, PROCEED)
         USING MDBSCP,R3             TELL ASSEMBLER
         B     MDB0030               NO FURTHER CHECKING PROCEED
MDB0030  DS    0H
         USING MDB,R3
         AH    R3,MDBLEN             ADD LENGTH OF MESSAGE
         CR    R3,R4                 COMPARE WITH TOTAL LENGTH
         BL    MDB0000               (BL = STILL SOME WORK, RE-DO)
         ICM   R7,B'1111',MDBPNEXT-MDBPRFX(R7)   NO, POINT TO NEXT MDB
         BZ    ENDMDB                (BZ = NO MOR MESSAGES)
         LR    R3,R7                 LOAD POINTER OF NEXT MDB
         B     MDBSTUFF              REDO MESSAGE-BUSINESS
ENDMDB   DS    0H
         SAC   0                   SWITCH TO PRIMARY MODE
         SYSSTATE ASCENV=P         TELL MACROS THAT PRIM MODE IS ACTIVE
         MODESET MF=(E,PROBMOD)      RETURN INTO PROBLEM MODE
******************************************************************
* PROBLEM: IF A COMMAND RETURNS SEVERAL MESSAGES WITH A SEPARATE
*          MDB EACH (E.G $DI RETURNS 1 COMPLETE MDB PER INITIATOR)
*          THERE MUST BE RE-CALLED THE COMPLETE MDB-BUSINESS.
*          THIS IS DONE IN BRANCHING BACK TO LABEL GETM0000.
*          IF THERE IS NOW ISSUED ANOTHER COMMAND WHILE QCMD IS
*          WAITING FOR AN ANSWER, THE REPLY OF THE OTHER COMMAND IS
*          TRAPPED TOO, UNFORTUNATELY.
******************************************************************
         B     GETM0000              RECALL MDB-BUSINESS
MDB9990  LA    R1,ALLMSGS            POINT AT TOP OF MESSAGEBUFFER
         CR    R6,R1                 WERE THERE MESSAGES WRITTEN ?
         BH    MDB9998               (BH = YES, NO ERRORMSG)
         LA    R15,8                 LOAD RC=8
         LA    R8,ERR0110            POINT AT ERROR-MESSAGE
         B     MDB9999               RETURN
MDB9998  XR    R15,R15               GOT MESSAGES, CLEAR RC
MDB9999  DS    0H                    BRANCH BACK
         L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* CHKRPLYS: CHECK FOR OUTSTANDING REPLIES
**********************************************************************
CHKRPLYS ST    R10,SAVE10
         L     R2,CVTPTR             CVT-POINTER INTO R2
         L     R2,CVTCUCB-CVT(,R2)   UCM-POINTER INTO R2
         LH    R3,UCMRQNR-UCM(,R2)
         L     R2,UCMRPYQ-UCM(,R2)   REPLY-QUEUE POINTER INTO R2
         LTR   R2,R2                 IS IT ZERO ?
         BNZ   RPL00010              (BNZ= NO, REPLIES ARE OUTSTANDING)
         LA    R15,8
         LA    R8,ERR0060
         B     RPL00090
RPL00010 DS    0H
         ST    R2,OREFADDR           STORE ADDRESS OF 1ST OREF
         STH   R3,REPLYNUM           STORE THE NUMBER OF REPLIES
         XR    R15,R15
RPL00090 L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* CONSREM: REMOVE MVS-OPERCONSOLE
**********************************************************************
CLEANUP  ST    R10,SAVE10
         ST    R15,FUNCRC
         MVC   @MLWAREA(L@MCSOP),@MCSOP
         MODESET MF=(E,SUPRMOD)      GET INTO SUPERVISOR STATE
         MCSOPER REQUEST=DEACTIVATE, DEACTIVATE MCS-CONSOLE            X
               CONSID=MCCONS,      CONSOLE-ID RETURNED BY MCSOPER      X
               RTNCODE=MCRC,       RETURN CODE FROM MCSOPER (R15)      X
               RSNCODE=MCRCC,      REASON CODE FROM MCSOPER (R0)       X
               MF=(E,@MLWAREA)
CLEAN010 DS    0H
         STAX  DEFER=NO              READY FOR INTERRUPTS AGAIN
         MODESET MF=(E,PROBMOD)      RETURN TO PROBLEM MODE
         L     R15,FUNCRC
         L     R10,SAVE10
         BR    R10
         LTORG
**********************************************************************
* XMEMINIT: INITIALIZE CROSS-MEMORY ENVIRONMENT
**********************************************************************
XMEMINIT ST    R10,SAVE10
         L     R3,CVTPTR             LOAD CVT-POINTER INTO R3
         L     R3,CVTASVT-CVT(,R3)   LOAD ASVT-POINTER
         L     R3,ASVTMAXU-ASVT(,R3)    ... AND THE MAX-NR. OF ASIDS
         LA    R4,1                  ASID-NR.
ASLOOP   DS    0H                    ADDRESS-SPACES WALKTHROUGH-TABLE
*                                    THANKS TO G.SAINT-FLOUR (SHOWMVS)
         LOCASCB ASID=(R4)           STORES ASIDS ASCB -> INTO R1
         LTR   R15,R1                VALID ASCB ? - TEST+COPY INTO R15
         BZ    ASLP0020              NO, NEXT
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15)    ANY->TO THE JOBNAME?
         BNZ   ASLP0010              YES, GOTCHA
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15)  IS IT STC OR TSO?
         BZ    ASLP0020              NO, TRY THE NEXT ASID
ASLP0010 DS    0H
         ST    R15,ASCBADDR          STORE THE ASCB-ADDRESS
         CLC   0(8,R1),=CL8'CONSOLE '   DO WE HAVE A MATCH?
         BE    ALES0010              YES, GO AHEAD
ASLP0020 DS    0H                    NO HIT, TRY NEXT
         LA    R4,1(,R4)             INCR. ASID-VALUE
         BCT   R3,ASLOOP             STILL SOME WORK ?
         LA    R15,8                 CONSOLE-ASID NOT FOUND, SET
         LA    R8,ERR0070            ERRORMSG + LEAVE
         B     XMEM0090              NO, GO OUT
*
ALES0010 DS    0H
         L     R2,ASCBADDR           LOAD CONSOLES ASCB-ADDRESS INTO R2
         L     R2,ASCBASSB-ASCB(,R2) POINT TO ASSB
         MVC   CONSTOKN,ASSBSTKN-ASSB(R2)     MOVE THE AS-TOKEN
ALES0015 DS    0H                    (--> SYSTEM SERVICES COURSE)
         MODESET MF=(E,SUPRMOD)      GET INTO SUPERVISOR STATE
         ALESERV ADD,                ADD SP-TOKEN TO ACCESSLIST        X
               AL=WORKUNIT,          USE THE DU-AL (TCB-ACCESS LIST)   X
               STOKEN=CONSTOKN,      CONSOLE  SPACETOKEN               X
               ALET=CONSALET,        ALESERV RETURNS ALET THERE        X
               CHKEAX=NO             DON'T CHECK AUTHORISATION INDEX
         ST    R15,WORKRC            SAVE RETURN-CODE
         MODESET MF=(E,PROBMOD)      RETURN TO PROBLEM MODE
         L     R15,WORKRC
         LTR   R15,R15               WORKED ?
         BZ    ALES0020              (BZ=YES, GO AHEAD)
         LA    R15,8                 CONSOLE-ASID NOT FOUND, SET
         LA    R8,ERR0080            ERRORMSG + LEAVE
         B     XMEM0090
ALES0020 DS    0H                    ALES0020: GET REPLY-TEXT
         LA    R6,ALLMSGS            POINT TO START OF MSG-BUFFER
         STORAGE OBTAIN,LENGTH=HUNPAGES,LOC=ANY,BNDRY=PAGE,ADDR=(R7)
         ST    R7,VARTAB
         CLI   MSGDFLAG,MSGDPUTL     PUTLINE-DELIVERY REQUESTED ?
         BE    ALES0022              (BE=YES, BUMP OVER REXX-STUFF)
* REXX-VARAIBLE BUILDING PROCESS
* BUILD THE COUNTER (.0-ELEMENT OF EACH SUB-ARRAY)
         XR    R5,R5                 CLEAR OUT R5
         ST    R5,NROFMSGS           STORE THE NUMBER OF MSGS
         LA    R1,VAR0001            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0001           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         LH    R1,REPLYNUM           STORE THE NUMBER OF REPLIES
         ST    R1,STEMPARM+8         INTO PARMFIELD+8
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
         LA    R1,VAR0002            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0002           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
         LA    R1,VAR0003            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0003           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
         LA    R1,VAR0004            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0004           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
         LA    R1,VAR0005            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0005           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
* END OF REXX-VARAIBLE BUILDING PROCESS
ALES0022 DS    0H
         MODESET MF=(E,SUPRMOD)      GET INTO SUPERVISOR STATE
         SAC   512                   SWITCH INTO ....
         SYSSTATE ASCENV=AR          ... AR-MODE
         L     R2,OREFADDR           SYNCRONIZE THE TWO BASES: GPR
         LAM   R2,R2,CONSALET        .... AND AR
         XR    R4,R4                 CLEAR OUT WORKREG
ALES0025 DS    0H                    END OF REXX-VARIABLES
         L     R3,OREFADDR           POINT AT TOP OF OREF
* REXX-VARAIBLE BUILDING PROCESS
         CLI   MSGDFLAG,MSGDPUTL     PUTLINE-DELIVERY REQUESTED ?
         BE    ALES0030              (BE=YES, BUMP OVER REXX-STUFF)
         LA    R4,1(,R4)             R4=CURRENT ARRAY-ELEMENT-NUMBER
         ST    R4,ELEMPARM           STORE IT IN PARMLIST
         LA    R1,LVAR0001           LENGTH OF VARIABLE-STEM
         ST    R1,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R1,VAR0001            VARIABLE STEM-NAME
         ST    R1,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         LA    R1,2                  LOAD LENGTH OF VALUE
         ST    R1,VALPARM            STORE IT INTO PARMLIST
         LA    R1,OREID-OREF(,R3)    POINT TO START OF REPLY-ID
         ST    R1,VALPARM+4          STORE IT INTO PARMLIST
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
         LA    R1,LVAR0002           LENGTH OF VARIABLE-STEM
         ST    R1,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R1,VAR0002            VARIABLE STEM-NAME
         ST    R1,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         LA    R1,8                  LOAD LENGTH OF ISSUER
         ST    R1,VALPARM            STORE IT INTO PARMLIST
         LA    R1,OREWTORU-OREF(,R3)    POINT TO START OF ISSUER-ID
         ST    R1,VALPARM+4          STORE IT INTO PARMLIST
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
* END OF REXX-VARAIBLE BUILDING PROCESS
ALES0030 DS    0H
*  PUTLINE-BUSINESS
         CLI   MSGDFLAG,MSGDVREX     REXX-VAR-DELIVERY REQUESTED ?
         BE    ALES0035              (BE=YES, BUMP OVER PUTLINE   )
         LA    R1,2                  LOAD LENGTH OF ISSUER
         STH   R1,0(R6)              STORE IT FOR PUTLINE
         MVC   2(2,R6),OREID-OREF(R3) MOVE THE REPLY-ID THERE
         LA    R6,4(,R6)             BUMP BEHIND REPLY + LENGTH
         LA    R1,8                  LOAD LENGTH OF ISSUER
         STH   R1,0(R6)              STORE IT FOR PUTLINE
         MVC   2(8,R6),OREWTORU-OREF(R3) MOVE THE ISSUERS USERID
         LA    R6,10(,R6)            BUMP BEHIND REPLY + LENGTH
*  END OF PUTLINE-BUSINESS
ALES0035 DS    0H                    START WQE-BUSINESS HERE
         L     R2,ORERWQE-OREF(0,R2) POINT TO WQE-ELEMENT
         USING WQE,R2                TELL ASSEMBLER
         CLI   MSGDFLAG,MSGDPUTL     PUTLINE-DELIVERY REQUESTED ?
         BE    ALES0040              (BE=YES, BUMP OVER REXX-STUFF)
*  REXX-VARAIBLE BUILDING BUSINESS
         LA    R5,LVAR0003           LENGTH OF VARIABLE-STEM
         ST    R5,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R5,VAR0003            VARIABLE STEM-NAME
         ST    R5,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         LA    R5,8                  LOAD LENGTH OF ISSUER
         ST    R5,VALPARM            STORE IT INTO PARMLIST
         LAE   R5,WQEOJBID-WQE(0,R2) POINT TO START OF JOBID (AR-MODE)
         ST    R5,VALPARM+4          STORE IT INTO PARMLIST
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
         LA    R5,LVAR0004           LENGTH OF VARIABLE-STEM
         ST    R5,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R5,VAR0004            VARIABLE STEM-NAME
         ST    R5,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         LA    R5,8                  LOAD LENGTH OF ISSUER
         ST    R5,VALPARM            STORE IT INTO PARMLIST
         LAE   R5,WQEOJBNM-WQE(0,R2) POINT TO START OF JOBNAME(AR-MODE)
         ST    R5,VALPARM+4          STORE IT INTO PARMLIST
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
         LA    R5,LVAR0005           LENGTH OF VARIABLE-STEM
         ST    R5,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R5,VAR0005            VARIABLE STEM-NAME
         ST    R5,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         LH    R5,WQETXTLN           LOAD LENGTH OF TEXT
         ST    R5,VALPARM            STORE IT INTO PARMLIST
         LAE   R5,WQETXT-WQE(0,R2)   POINT TO START OF JOBNAME(AR-MODE)
         ST    R5,VALPARM+4          STORE IT INTO PARMLIST
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
* END OF REXX-VARAIBLE BUILDING PROCESS
ALES0040 DS    0H
         CLI   MSGDFLAG,MSGDVREX     REXX-VAR-DELIVERY REQUESTED ?
         BE    ALES0045              (BE=YES, BUMP OVER PUTLINE   )
*  PUTLINE-BUSINESS
         LA    R5,8                  LOAD LENGTH OF ORIGINATING JOBID
         STH   R5,0(R6)              STORE IT
         MVC   2(8,R6),WQEOJBID      MOVE JOBNAME THERE
         LA    R6,10(,R6)            BUMP BEHIND JOBNAME + LENGTH
         LA    R5,8                  LOAD LENGTH OF ORIGINATING JOBNAME
         STH   R5,0(R6)              STORE IT
         MVC   2(8,R6),WQEOJBNM      MOVE JOBNAME THERE
         LA    R6,10(,R6)            BUMP BEHIND JOBNAME + LENGTH
         LH    R5,WQETXTLN           LOAD LENGTH OF MESSAGE-TEXT
         STH   R5,0(R6)              STORE IT
         LA    R6,2(,R6)             BUMP BEHIND
         BCTR  R5,0                  SUBTRACT 1 FOR EXECUTE
         EX    R5,MOVEALE1           WRITE INTO WORKAREA
         AH    R6,WQETXTLN           BUMP BEHIND
*  END OF PUTLINE-BUSINESS
ALES0045 DS    0H
         L     R3,ORELKP-OREF(0,R3)  LOAD ADDRESS OF NEXT OREF
         LTR   R3,R3                 IS IT ZERO (LAST OREF ?)
         BZ    ALES0050              (BZ=YES, PROCEED)
         ST    R3,OREFADDR           STORE NEW OREF-ADDR
         LR    R2,R3                 LOAD R2
         B     ALES0025              RE-WORK
ALES0050 DS    0H
         SAC   0
         SYSSTATE ASCENV=P
         ALESERV DELETE,             REMOVE THE ALET-ENVIRONMENT       X
               ALET=CONSALET,        CONSOLES ALET                     X
               CHKEAX=NO             DON'T CHECK AUTHORISATION INDEX
         ST    R15,WORKRC            STORE RETURNCODE
         MODESET MF=(E,PROBMOD)      RETURN TO PROBLEM MODE
         L     R15,WORKRC            RELOAD RETURNCODE
         LTR   R15,R15               WORKED ?
         BZ    ALES0080              (BZ=YES, GO AHEAD)
         LA    R15,8                 CONSOLE-ASID NOT FOUND, SET
         LA    R8,ERR0080            ERRORMSG + LEAVE
         B     XMEM0090
ALES0080 DS    0H
         XR    R15,R15
XMEM0090 DS    0H
         L     R10,SAVE10
         BR    R10
         LTORG
***********************************************************************
*     MAKEELEM: RETURN THE DATA-PORTION OF ARRAY-COUNT                *
***********************************************************************
MAKEELEM STM   R4,R6,SAVE4TO6        MAKE A NEW ELEMENT OF AN ARRAY
         LM    R4,R6,ELEMPARM        LOAD PASSED PARAMETERS: R4=EL-NR.
         CVD   R4,ARRAYCNT           R5=VAR-LENGTH, R6=VARNAME-ADDR
         MVC   WORKMASK(LARRAYEM),ARRAYEM  MOVE EDIT-TABLE INTO WA
         ED    WORKMASK,ARRAYCNT+4   EDIT THE ARRAY-COUNTER
         LA    R6,WORKMASK           POINT TO START OF WORKFIELD
         LA    R5,LARRAYEM           LENGTH OF WORKFIELD
STRIP010 CLI   0(R6),C' '            IS THERE A BLANK ?
         BNE   STRIP020              (BNE=NO, DATA FROM HEREON)
         LA    R6,1(,R6)             POINT TO NEXT POSITION
         BCT   R5,STRIP010           RETRY
STRIP020 DS    0H
         ST    R5,ELLENGTH           STORE LENGTH OF DATAPORTION
         ST    R6,ELSTART            STORE STARTPOSITION OF DATA
         L     R4,ELEMPARM+4         LOAD LENGTH OF VARNAME
         AR    R4,R5                 ADD LENGTH OF ELEMENT-VALUE
         STH   R4,0(R7)              STORE TOTAL VARIABLE LENGTH
         LA    R7,2(,R7)             BUMP BEHIND IT
         L     R4,ELEMPARM+4         LOAD LENGTH OF VARIABLE-NAME
         BCTR  R4,0                  SUBTRACT 1 FOR EXECUTE
         L     R6,ELEMPARM+8         LOAD VARNAME-ADDRESS
         EX    R4,MOVEELM1           MOVE VARNAME-ADDRESS INTO STOR.
         A     R7,ELEMPARM+4         BUMP BEHIND VARNAME-STEM
         L     R6,ELSTART            LOAD STARTADDR OF ELEMENT-NR.
         L     R5,ELLENGTH           LOAD LENGTH OF ELEMENT-NR.
         BCTR  R5,0                  SUBTRACT 1 FOR EXECUTE
         EX    R5,MOVEELM1           MOVE ELEMENT-NR. BEHIND VARNAME
         A     R7,ELLENGTH           BUMP OVER IT
         L     R5,NROFMSGS           LOAD THE CURRENT NR. OF MSGS
         LA    R5,1(,R5)             ADD 1 FOR IKJCT441-LOOP
         ST    R5,NROFMSGS           STORE THE NUMBER OF MSGS
         LM    R4,R6,SAVE4TO6        RELOAD CLOBBERED REGISTERS
         BR    R5                    BRANCH BACK TO MOM
         LTORG
MOVEELM1 MVC   0(0,R7),0(R6)         MOVE THE DATA-PORTION THERE
***********************************************************************
*     BUILDVAR: BUILD A REXX-VARIABLE                                 *
***********************************************************************
BUILDVAR ST    R10,SAVE10            STORE SUBROUTINES 'BASE'
         CLI   MSGDFLAG,MSGDPUTL     IS JUST PUTLINE REQUIRED ?
         BE    BLD0090               (BE = YES, RETURN)
         STM   R2,R3,SAVE2TO3        STORE CLUBBERED  REGISTERS
         XR    R2,R2
         CLI   MSGDFLAG,MSGDPUTL     JUST PUTLINE NEEDED ?
         BE    BLD0080               (BE = YES, BRANCH BACK TO MOM)
         L     R2,CVTPTR             CVTPOINTER INTO R2 ...
         L     R2,CVTTVT-CVT(,R2)    .... TSVT INTO R2 ...
         USING TSVT,R2               TELL ASSEMBLER
         L     R3,TSVTVACC           VARIABLE-ACCESS ROUTINE INTO R3
         ST    R3,VACADDR            SAVE ENTRY-ADDRESS FOR CALL
         LA    R3,TSVEUPDT           FUNCTION-CODE (SEE SYS1.MACLIB)
         ST    R3,IKJECODE           STORE FOR CALL
         DROP  R2                    DROP TSVT-BASE
         MVC   @MLWAREA(L@CALL),@CALL   CALL-LISTAREA INTO WORKAREA
         L     R7,VARTAB             POINT TO TOP OF VARIABLE-TABLE
         L     R4,NROFMSGS           LOAD THE # OF WALKTHROUGHS
BLD0010  DS    0H                    LOOP-BASE
         XR    R3,R3                 CLEAR OUT ....
         ST    R3,IKJTOKEN           .... TOKEN-WORKAREA
         LH    R2,0(R7)              LOAD LENGTH OF ARRAY-ELEMENTNAME
         ST    R2,LRXVNAME           STORE INTO CALL-PARMLIST
         LA    R7,2(,R7)             BUMP BEHIND
         BCTR  R2,0                  SUBTRACT ONE FOR EXECUTE
         EX    R2,MVCBLD1            WRITE THE ELEMENTNAME INTO WAREA
         A     R7,LRXVNAME           BUMP BEHIND ELEMENT-NAME
         LH    R2,0(R7)              LOAD LENGTH OF ELEMENT-VALUE
         ST    R2,LRXVVAL            STORE INTO CALL-PARMLIST
         LA    R7,2(,R7)             BUMP BEHIND
         BCTR  R2,0                  SUBTRACT 1 FOR EXECUTE ..
         EX    R2,MVCBLD2            WRITE VALUE INTO CALL-PARMLIST
         A     R7,LRXVVAL            BUMP BEHIND
         LA    R2,RXVNAME            POINT TO VARIABLENAME-STARTADDR
         ST    R2,@RXVNAME           STORE INTO CALL-PARMLIST
         LA    R2,RXVVAL             POINT TO VARIABLEVALUE-STARTADDR
         ST    R2,@RXVVAL            STORE INTO CALL-PARMLIST
         L     R15,VACADDR           LOAD IKJCT441-ADDRESS
         CALL  (15),                 CALL IKJCT441                     X
               (IKJECODE,            FUNCTIONCODE (CREATE OR UPDATE)   X
               @RXVNAME,             VARIABLENAME STARTADDRESS         X
               LRXVNAME,             VARIABLENAME LENGTH               X
               @RXVVAL,              VARIABLEVALUE STARTADDRESS        X
               LRXVVAL,              VARIABLEVALUE LENGTH              X
               IKJTOKEN),            ACCESS-ROUTINE TOKEN              X
               VL,MF=(E,@MLWAREA)    31BIT-MODE, WORKAREAPOINTER
         LTR   R2,R15                CREATE WENT OK ?
         BNZ   BLD0070               (BNZ=NO, DON'T PROCEED)
         BCT   R4,BLD0010            WORKED, TRY NEXT
         B     BLD0080               ALL DONE, NO ERROR, PROCEED
BLD0070  LA    R2,40                 LOAD RC X'28'
         CR    R15,R2                IS THIS THE ONE WE GOT ?
         BNE   BLD0075               (BNE=NO, OTHER ERROR)
         LA    R8,ERR0090            YES, NO VALID REXX-ENVIRONMENT.
         LA    R2,8                  SET ERRORMESSAGE
         B     BLD0080               RETURN
BLD0075  DS    0H                    SET GENERAL ERRORMESSAGE
         LA    R2,8
         LA    R8,ERR0100
BLD0080  DS    0H                    CLEANUP REXX-WORKAREA
         L     R7,VARTAB             POINT TO GETMAINED AREA
         STORAGE RELEASE,LENGTH=HUNPAGES,ADDR=(7)    FREE IT
         LR    R15,R2
         LM    R2,R3,SAVE2TO3        RELOAD CLOBBERED REGISTERS
BLD0090  L     R10,SAVE10            RELOAD SUBROUTINE BASE
         BR    R10                   BRANCH BACK TO CALLER
         LTORG
***********************************************************************
*     MAKESTEM                                                        *
***********************************************************************
MAKESTEM STM   R3,R5,SAVE3TO5        STORE REGS THAT I USE
         LM    R3,R5,STEMPARM        LOAD PASSED REGISTERS
         LA    R4,1(,R4)             LENGTH OF VARNAME+1 (FOR 0-EL)
         STH   R4,0(R7)              STORE IT IN GETMAINED AREA
         LA    R7,2(,R7)             BUMP BEHIND IT
         BCTR  R4,0                  REESTABLISH GENUINE LENGTH
         BCTR  R4,0                  SUBTRACT 1 FOR EXECUTE
         EX    R4,STMMOVE1           WRITE VARSTEM INTO G'MNED AREA
         L     R4,STEMPARM+4         RE-LOAD GENUINE LENGTH
         AR    R7,R4                 BUMP BEHIND VAR-STEM
         MVI   0(R7),C'0'            MOVE THERE A '0' (FOR 0-ELEM.)
         LA    R7,1(,R7)             BUMP BEHIND
         CVD   R5,ARRAYCNT           CONVERT THE # OF ELEMENTS
         MVC   WORKMASK(LARRAYEM),ARRAYEM  MOVE EDIT-TABLE INTO WA
         ED    WORKMASK,ARRAYCNT+4   EDIT THE ARRAY-COUNTER
         LA    R4,WORKMASK           POINT TO START OF WORKFIELD
         LA    R3,LARRAYEM           LENGTH OF WORKFIELD
STEM0010 CLI   0(R4),C' '            IS THERE A BLANK ?
         BNE   STEM0020              (BNE=NO, DATA FROM HEREON)
         LA    R4,1(,R4)             PONT TO NEXT POSITION
         BCT   R3,STEM0010           RETRY
STEM0020 DS    0H
         STH   R3,0(R7)              STORE LENGTH OF DATAPORTION
         LA    R7,2(,R7)             BUMP BEHIND IT
         BCTR  R3,0                  SUBTRACT 1 FOR EXECUTE
         EX    R3,STMMOVE2           MOVE THE VALUE THERE
         AR    R7,R3                 BUMP BEHIND IT
         LA    R7,1(,R7)             BUMP OVER EXECUTE-DECR.
         L     R5,NROFMSGS           LOAD THE CURRENT NR. OF MSGS
         LA    R5,1(,R5)             ADD 1 FOR IKJCT441-LOOP
         ST    R5,NROFMSGS           STORE THE NUMBER OF MSGS
         LM    R3,R5,SAVE3TO5        RELOAD ORIGINAL CONTENTS
         BR    R5
         LTORG
STMMOVE1 MVC   0(0,R7),0(R3)
STMMOVE2 MVC   0(0,R7),0(R4)
***********************************************************************
*     ADDVALUE                                                        *
***********************************************************************
ADDVALUE STM   R4,R5,SAVE4TO5
         LM    R4,R5,VALPARM        POINT TO PSEUDO-PARMLIST
         STH   R4,0(R7)             STORE LENGTH OF VALUE
         LA    R7,2(,R7)            BUMP BEHIND
         BCTR  R4,0                 SUBTRACT 1 FOR EXECUTE
         EX    R4,MOVEADD1          WRITE VALUE INTO GETMAINED AREA
         A     R7,VALPARM           BUMP BEHIND
         LM    R4,R5,SAVE4TO5       RELOAD USED REGISTERS
         BR    R5
         LTORG
MOVEADD1 MVC   0(0,R7),0(R5)
***********************************************************************
*     RETRESULT                                                       *
***********************************************************************
RETRESLT ST    R10,SAVE10
         CLI   MSGDFLAG,MSGDPUTL     IS JUST PUTLINE REQUIRED ?
         BE    RESLT040              (BE=YES, GO BACK TO CALLER)
         STORAGE OBTAIN,LENGTH=HUNPAGES,LOC=ANY,BNDRY=PAGE,ADDR=(R7)
         ST    R7,VARTAB
         XR    R4,R4
         ST    R4,NROFMSGS
         LA    R6,ALLMSGS
RESLT010 DS    0H
         LH    R3,0(R6)
         LTR   R3,R3
         BZ    RESLT030
         LA    R6,2(,R6)
         LA    R4,1(,R4)             R4=CURRENT ARRAY-ELEMENT-NUMBER
         ST    R4,ELEMPARM           STORE IT IN PARMLIST
         LA    R1,LVAR0006           LENGTH OF VARIABLE-STEM
         ST    R1,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R1,VAR0006            VARIABLE STEM-NAME
         ST    R1,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         XR    R2,R2
         IC    R2,0(R6)
         SH    R2,=H'240'
         MH    R2,=H'8'
         LA    R1,COLORTAB
         AR    R2,R1
         LA    R1,8                  LOAD LENGTH OF VALUE
         STM   R1,R2,VALPARM         STORE IT INTO PARMLIST + POINTER
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
         LA    R1,LVAR0007           LENGTH OF VARIABLE-STEM
         ST    R1,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R1,VAR0007            VARIABLE STEM-NAME
         ST    R1,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         XR    R2,R2
         CLI   1(R6),X'F0'
         BNP   RESLT025
         IC    R2,1(R6)
         SH    R2,=H'240'
         MH    R2,=H'8'
RESLT025 DS    0H
         LA    R1,HLITETAB
         AR    R2,R1
         LA    R1,8                  LOAD LENGTH OF VALUE
         STM   R1,R2,VALPARM         STORE IT INTO PARMLIST + POINTER
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
*
         LA    R1,LVAR0008           LENGTH OF VARIABLE-STEM
         ST    R1,ELEMPARM+4         STORE IN PARMLIST+4
         LA    R1,VAR0008            VARIABLE STEM-NAME
         ST    R1,ELEMPARM+8         STORE IN PARMLIST+8
         BAL   R5,MAKEELEM           BUILD THE NEW ARRAY-ELEMENT
         LR    R1,R3
         SH    R1,=H'2'
         LA    R2,2(,R6)
         STM   R1,R2,VALPARM         STORE IT INTO PARMLIST + POINTER
         BAL   R5,ADDVALUE           ASSIGN THE VALUE TO THE VARIABLE
*
         AR    R6,R3
         B     RESLT010
RESLT030 DS    0H
         LA    R1,VAR0006            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0006           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         ST    R4,STEMPARM+8         # OF ELEMENTS INTO PARMFIELD+8
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
         LA    R1,VAR0007            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0007           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
         LA    R1,VAR0008            LOAD POINTER TO VAR-STEM INTO R1
         ST    R1,STEMPARM           STORE ADDRESS INTO PARMFIELD
         LA    R1,LVAR0008           LOAD LENGTH OF VARIABLE-STEM
         ST    R1,STEMPARM+4         STORE INTO PARMFIELD+4
         BAL   R5,MAKESTEM           MAKE THE .0 VARIABLE
RESLT040 L     R10,SAVE10
         BR    R10
         LTORG
***********************************************************************
*     RETRESULT                                                       *
***********************************************************************
PUTLBSNS ST    R10,SAVE10
         CLI   MSGDFLAG,MSGDVREX     IS JUST REXX-VARS REQUIRED ?
         BE    PUTL020               (BE=YES, NO PUTLINE)
         STFSMODE ON,INITIAL=YES     CLEAR ....
         STFSMODE OFF                      .... SCREEN
         LA    R4,IOPLADS            LOAD DYNAMIC IOPL
         USING IOPL,R4               FILL IT
         L     R3,CPLUPT             LOAD DYN. USER'S PROFILE TABLE
         ST    R3,IOPLUPT            STORE IT IN THE IOPL
         L     R3,CPLECT             LOAD ADDRESS OF DYN. ECT
         ST    R3,IOPLECT            STORE IT IN THE IOPL
         LA    R3,ECBADS             LOAD ADDR OF MY ECB TO R3
         ST    R3,IOPLECB            STORE ADDRESS OF ECBADS IN IOPL
         MVC   @MLWAREA(L@PUTLIN),@PUTLIN
         MVC   DTEXTADS(LTEXTADS),TEXTADS   MOVE CONSTANT TO MY AREA
         LA    R3,ALLMSGS
PUTL010  DS    0H                    PREPARE FOR THE PUTLINE
         XC    DTEXTADS(4),DTEXTADS  CLEAR LENGTH-COUNTER
         XR    R2,R2                 WORKREG IF MSGDBOTH
         LH    R5,0(R3)              LENGHT OF CURRENT ENTRY INTO R5
         LTR   R5,R5                 IS IT ZERO ?
         BZ    PUTL020               (BE = YES, ALL WRITTEN)
         CLI   REPLYFLG,C'Y'         IS THIS A GET_REPLIES-REQUEST?
         BE    PUTL015               (BNE=YES, NO ATTRS PASSED)
         CLI   MSGDFLAG,MSGDBOTH     IS MSGDLVRY=BOTH ?
         BNE   PUTL015               (BNE=NO, ORDINARY BUSINESS)
         LA    R2,2                  LOAD LENGHT OF ATTRIBUTE-BYTES
         SR    R5,R2                 SUBTRACT ATTR-FIELDS LENGTH
PUTL015  LA    R4,4(,R5)             ADD 4 FOR PUTLINE-HEADER
         STH   R4,DTEXTADS           STORE INTO WORKAREA
         BCTR  R5,0                  SUBTRACT 1 FOR EXECUTE
         AR    R3,R2                 IF ATTR-FIELDS, BUMP OVER THEM
         EX    R5,PUTLMVC1           DO THE EXECUTE
         SR    R3,R2                 IF ATTRS, RESTORE ORIG. LENGTH
         PUTLINE PARM=@MLWAREA,                                        X
               OUTPUT=(DTEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)
*                                    DO THE PUTLINE
         LH    R4,0(R3)              ORIGINAL MSG-LENGTH INTO R4
         AR    R3,R4                 ADD LENGTH OF MSG-TEXT
         LA    R3,2(R3)              ADD LENGTH OF MSG-FIELD
         B     PUTL010               TRY NEXT MESSAGE
PUTL020  XR    R15,R15
         L     R10,SAVE10
         BR    R10
         LTORG
***********************************************************************
*     SETRCODE                                                        *
***********************************************************************
SETRCODE ST    R10,SAVE10
         CLI   MSGDFLAG,MSGDPUTL
         BE    RCODE020
         STORAGE OBTAIN,LENGTH=HUNPAGES,LOC=ANY,BNDRY=PAGE,ADDR=(R7)
         ST    R7,VARTAB
         LA    R1,1
         ST    R1,NROFMSGS
         LA    R1,7
         STH   R1,0(R7)
         MVC   2(7,R7),=CL7'QCMD_RC'
         LA    R1,1
         STH   R1,9(R7)
         MVC   11(1,R7),QCMDRC
RCODE020 L     R10,SAVE10
         BR    R10
         LTORG
***********************************************************************
*     CONSTANTS                                                       *
***********************************************************************
VAR0001  DC    C'QCMD.REPLY_ID.'
LVAR0001 EQU   *-VAR0001
VAR0002  DC    C'QCMD.ISSUER.'
LVAR0002 EQU   *-VAR0002
VAR0003  DC    C'QCMD.JOB_NUMBER.'
LVAR0003 EQU   *-VAR0003
VAR0004  DC    C'QCMD.JOB_ID.'
LVAR0004 EQU   *-VAR0004
VAR0005  DC    C'QCMD.REPLY_TEXT.'
LVAR0005 EQU   *-VAR0005
VAR0006  DC    C'QCMD.MSG_COLOR.'
LVAR0006 EQU   *-VAR0006
VAR0007  DC    C'QCMD.MSG_HILITE.'
LVAR0007 EQU   *-VAR0007
VAR0008  DC    C'QCMD.MSG_TEXT.'
LVAR0008 EQU   *-VAR0008
*
COLORTAB DC    CL8'NEUTRAL'    F0 BLACK ON DISPLAYS, WHITE ON PRINTERS
         DC    CL8'BLUE   '    F1
         DC    CL8'RED    '    F2
         DC    CL8'PINK   '    F3
         DC    CL8'GREEN  '    F4
         DC    CL8'TURQ   '    F5
         DC    CL8'YELLOW '    F6
         DC    CL8'WHITE  '    F7
*
HLITETAB DC    CL8'DEFAULT '
         DC    CL8'BLINK   '   F1: BLINK
         DC    CL8'REVERSE '   F2: REVERSE
         DC    CL8'SPARE#01'
         DC    CL8'USCORE  '   F4: UNDERSCORE
*
HUNPAGES EQU   100*4096
*
ARRAYEM  DC    X'4020202020202020'
LARRAYEM EQU   *-ARRAYEM
*
TEXTADS  DC    H'132'
         DC    H'0'
         DC    CL132' '
LTEXTADS EQU   *-TEXTADS
*
LERRMSGS EQU   79
ERR0010  DC    CL(LERRMSGS)'QCMD0010 NO PARAMETER(S) PASSED. PLEASE ENTX
               ER A VALID COMMAND AND RETRY.       '
ERR0020  DC    CL(LERRMSGS)'QCMD0020 MISSING RIGHT PARANTHESIS. REENTERX
                COMMAND WITH BALANCED PARANTHESES. '
ERR0030  DC    CL(LERRMSGS)'QCMD0030 QCMD RUNS IN A TSO-ENVIRONMENT ONLX
               Y. PROGRAM TERMINATES.              '
ERR0040  DC    CL(LERRMSGS)'QCMD0040 ACTIVATE OF MCS-CONSOLE SESSION FAX
               ILED. PROGRAM TERMINATES.           '
ERR0050  DC    CL(LERRMSGS)'QCMD0050 NO FREE MCS-CONSOLE ENTRY FOUND. PX
               LEASE TRY LATER.                    '
ERR0060  DC    CL(LERRMSGS)'NO REPLIES OUTSTANDING. NO REPLY-IDS RETURNX
               ED                                  '
ERR0070  DC    CL(LERRMSGS)'NO VALID CONSOLE-ADDRESS SPACE LOCATED. PROX
               GRAM TERMINATES                     '
ERR0080  DC    CL(LERRMSGS)'ALESERV SERVICE FAILED. NO CROSSMEMORY ENVIX
               RONMENT COULD BE SET UP.            '
ERR0090  DC    CL(LERRMSGS)'NO ACTIVE REXX-ENVIRONMENT FOUND. NO REXX VX
               RIABLES COULD BE WRITTEN.'
ERR0100  DC    CL(LERRMSGS)'NO REXX-VARIABLES COULD BE WRITTEN. IKJCT44X
               1 ENDED WITH A RC > 0.              '
ERR0110  DC    CL(LERRMSGS)'NO MESSAGE HAS BEEN RETURNED. COMMAND ISSUEX
               D BUT RESPONSE COULD NOT BE TRAPPED.'
*
BLANK    DC    CL1' '
*
ALFATAB  DC    256AL1(*-ALFATAB)
         ORG   ALFATAB+X'81'
         DC    C'ABCDEFGHI'
         ORG   ALFATAB+X'91'
         DC    C'JKLMNOPQR'
         ORG   ALFATAB+X'A2'
         DC    C'STUVWXYZ'
         ORG
         EJECT
*
***********************************************************************
*     MACRO LIST-FORM                                                 *
***********************************************************************
@CALL    CALL  ,(,,,,,,,,,,),MF=L  CALL LIST FORM
L@CALL   EQU    *-@CALL
*
@PUTLIN  PUTLINE MF=L
L@PUTLIN EQU    *-@PUTLIN
*
@EXTR    EXTRACT *,FIELDS=(PSB),MF=L
L@EXTR   EQU    *-@EXTR
*
@MGCRE   MGCRE   MF=L
L@MGCRE  EQU    *-@MGCRE
*
         MCSOPMSG MF=(L,@OPMSG)
L@OPMSG  EQU    *-@OPMSG
*
         MCSOPER MF=(L,@MCSOP)
L@MCSOP  EQU    *-@MCSOP
*
SUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L
*
PROBMOD  MODESET KEY=NZERO,MF=L
*
         EJECT
*
***********************************************************************
*     COPY    SECTION                                                 *
***********************************************************************
***********************************************************************
*     WORKING SECTION                                                 *
***********************************************************************
*
DWORK    DSECT
@MLWAREA DS    XL256                  MF=L WORKAREA
WAOPPARM DS    CL(MCSOPLEN)        OPERPARMS AREA
MCNAME   DS    CL8
MCTERM   DS    CL8
MCCONS   DS    F
MCCSA    DS    A
MCCSAA   DS    F
MCMSGECB DS    F
MCRC     DS    F
MCRCC    DS    F
*
MGCMDL   DS    H                   LENGTH OF COMMAND TEXT
MGCMD    DS    CL126               COMMAND TEXT
MGCMDSIZ EQU   *-MGCMDL            SIZE OF CMD LENGTH-FILED+TEXT
MGCART   DS    D
*
ASCBADDR DS    F                   CONSOLE-ASID ASCB-ADDR
CONSTOKN DS    D                   CONSOLE-ASID SPACE-TOKEN
CONSALET DS    F                   CONSOLE-ASID ACCESSLIST-TOKEN
*
REPLYNUM DS    H                   NUMBER OF REPLIES OUTSTANDING
OREFADDR DS    F                   ADDRESS OF FIRST OREF
SAVE10   DS    F
FUNCRC   DS    F
DWTSO    DS    F
STARTCMD DS    F
TIINTVL  DS    F
CPLCBUF  DS    F                      CPPL-WORKFIELDS
CPLUPT   DS    F
CPLPSCB  DS    F
CPLECT   DS    F
*
VARTAB   DS    F                   START OF GETMAINED AREA
WORKRC   DS    F
STEMPARM DS    3F
ELEMPARM DS    3F
SAVE3TO5 DS    3F
SAVE5    DS    F
SAVE4TO6 DS    3F
SAVE2TO3 DS    2F
SAVE4TO5 DS    2F
VALPARM  DS    2F
NROFMSGS DS    F                   STORE THE NUMBER OF MSGS
ELLENGTH DS    H                   LENGTH OF ELEMENT-COUNTER
ELSTART  DS    F                   START OF NUMERIC ELEMENT-COUNTER
ARRAYCNT DS    D                   ARRAY-COUNTER
WORKMASK DS    CL(LARRAYEM)        EDIT-WORKMASK
*
RXVNAME  DS    CL32                REXX-VARIABLE NAME
LRXVNAME DS    F                   REXX-VARIABLE NAME LENGTH
RXVVAL   DS    CL132               REXX-VARIABLE VALUE
LRXVVAL  DS    F                   REXX-VARIABLE VALUE LENGTH
@RXVNAME DS    AL4                 REXX-VARIABLE NAME POINTER
@RXVVAL  DS    AL4                 REXX-VARIABLE VALUE POINTER
IKJTOKEN DS    F                   IKJCT441 - TOKEN
IKJECODE DS    AL4                 ADDRESS OF FUNCTIONCODE-MODULE
VACADDR  DS    F                   VARIABLE-ACCESS ROUTINE-ADDR
*
QCMDRC   DS    CL1                 RETURNCODE FOR REXX-FUNCTION
*
REPLYFLG DS    CL1                 INDICATES WHETHER TO TRAP REPLY-IDS
*
TIMEFLAG DS    X                   USE TIME FLAG
TIMEDEF  EQU   X'80'               DEFAULT-TIME SHOULD BE USED
TIMESET  EQU   X'40'               TIME WAS SET BY A PARM
*
MSGDFLAG DS    X                   MESSAGE-DELIVERY INDICATOR
MSGDBOTH EQU   X'80'               DELIVER BOTH (PUTLINE + REXX-VARS)
MSGDPUTL EQU   X'40'               DELIVER MESSAGES VIA PUTLINE
MSGDVREX EQU   X'20'               WRITE MESSAGES INTO REXX-VARS
*
CONSFLAG DS    CL1
*
TIMEVAL  DS    CL3
STARTTIM DS    F
PACKPARM DS    PL2'0'
TIMEDW   DS    D
*
ECBADS   DS    F'0'                   PUTLINE WORKFIELDS
IOPLADS  DS    4F
*
DTEXTADS DS    CL(LTEXTADS)           MSG-WORKFIELD
*
PARMLEN  DS    H
PARMSTR  DS    CL80
*
ALLMSGS  DS    8CL32000
LALLMSGS EQU   *-ALLMSGS
LDWORK   EQU   *-DWORK
*
         CVT     DSECT=YES
         IEECUCM                       UNIT CONTROL MODULE
*        IEERDCM                       RESIDENT DCM/SCREEN AREA CB
*        IEETDCM                       PAGEABLE DCM
         IHAORE                        OPERATOR REPLY ELEMENT
         IHAWQE                        WTO(R)-QUEUE ELEMENT
         IHAPSA
         IHAASCB DSECT=YES
         IHAASSB
         IHAASXB DSECT=YES
         IHAASVT
         IHAACEE
         PRINT GEN
         IEAVM105                      MDB
         IEAVG132                      MDBPREFIX
         IEAVG131
         IEZVG111
         IKJTSVT
         IKJCPPL
         IKJIOPL
         END   QCMD
/*
//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,DISP=(NEW,PASS),
//          SPACE=(3200,(200,50)),DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80)
//SYSPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//*
//* =====================================================
//* ===== L I N K A G E   E D I T O R ===================
//* =====================================================
//LKED      EXEC PGM=HEWL,REGION=1024K,COND=(0,NE),
//             PARM='XREF,LIST,LET,AC=1,REUS,RENT'
//SYSLMOD   DD DISP=SHR,DSN=SA1T.T750K.CBTFILE.LOAD
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,3))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)
//          DD *
  NAME    QCMD(R)
/*
//TESTRC IF (RC EQ 0) THEN
//*
//SCHTEPP3   EXEC PGM=IEBCOPY,REGION=8M
//SYSPRINT DD  SYSOUT=*
//IN1  DD  DSN=SA1T.T750K.CBTFILE.LOAD,
//         DISP=SHR
//OU1  DD  DSN=SYS2.USER.LINKLIB,
//         DISP=SHR
//SYSIN    DD  *
   COPYMOD INDD=((IN1,R)),OUTDD=OU1
   SELECT MEMBER=QCMD
/*
//ENDTEST ENDIF
