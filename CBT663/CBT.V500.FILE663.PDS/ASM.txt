./ ADD NAME=DOSSTART 0100-04042-04042-1042-00104-00104-00000-PDPCLIB
; dosstart.asm - startup code for C programs for DOS
;
; This program written by Paul Edwards
; Released to the public domain

.model large

extrn ___start:proc

public ___psp
public ___envptr
public ___osver

_DATA   segment word public 'DATA'
banner  db  "PDPCLIB"
___psp   dd  ?
___envptr dd ?
___osver dw ?
_DATA   ends
_BSS    segment word public 'BSS'
_BSS    ends
_STACK  segment word stack 'STACK'
        db 1000h dup(?)
_STACK  ends

DGROUP  group   _DATA,_BSS
        assume cs:_TEXT,ds:DGROUP

_TEXT segment word public 'CODE'

top:

___intstart proc

; add some nops to create a cs-addressable save area, and also create a
; bit of an eyecatcher

nop
nop
nop
nop

; push the psp now, ready for calling start
push ds
mov ax, 0
push ax

; free initially allocated memory

mov bx, 01111h
mov ah, 4ah
int 21h

mov dx,DGROUP
mov ds,dx

mov ah,30h
int 21h
xchg al,ah
mov [___osver],ax

mov word ptr ___psp, 0
mov word ptr [___psp + 2], es
mov word ptr ___envptr, 0
mov dx, es:[02ch]
mov word ptr [___envptr + 2], dx
mov dx, ds
mov es, dx

; we have already pushed the pointer to psp
call far ptr ___start
add sp, 4  ; delete psp from stack

push ax

; how do I get rid of the warning about "instruction can be compacted
; with override"?  The answer is certainly NOT to change the "far" to
; "near".
call far ptr ___exita
add sp, 2
ret
___intstart endp

public ___exita
___exita proc
push bp
mov bp, sp
mov ax, [bp + 6]
mov ah,4ch
int 21h ; terminate
pop bp
ret
___exita endp


public ___main
___main proc
ret
___main endp


_TEXT ends

end top
./ ADD NAME=DOSSUPA  0100-04042-04042-1042-00736-00736-00000-PDPCLIB
; dossupa.asm - assembler support functions for DOS
;
; This program written by Paul Edwards
; Released to the public domain

.model large

extrn ___divide:proc
extrn ___modulo:proc

public fidrqq
public fiwrqq

_DATA   segment word public 'DATA'
fidrqq  dw  ?
fiwrqq  dw  ?
_DATA   ends
_BSS    segment word public 'BSS'
_BSS    ends

DGROUP  group   _DATA,_BSS
        assume cs:_TEXT,ds:DGROUP

_TEXT segment word public 'CODE'

public ___open
___open proc
push bp
mov bp, sp

push bx
push dx
push ds

mov dx,[bp+8]
mov ds,dx
mov dx,[bp+6]
mov al,[bp+11]

mov ah, 3dh
int 21h

jc ___open1
mov dx,[bp+14]
mov ds,dx
mov bx,[bp+12]
mov word ptr [bx], 0
jmp short ___open2
___open1:
mov dx,[bp+14]
mov ds,dx
mov bx,[bp+12]
mov word ptr [bx], 1
___open2:
pop ds
pop dx
pop bx

pop bp
ret
___open endp


public ___read
___read proc
push bp
mov bp,sp

push bx
push cx
push dx
push ds

mov bx,[bp+6]
mov dx,[bp+10]
mov ds,dx
mov dx,[bp+8]
mov cx,[bp+12]

mov ah, 3fh
int 21h

jc ___read1
mov dx,[bp+16]
mov ds,dx
mov bx,[bp+14]
mov word ptr [bx], 0
jmp short ___read2
___read1:
mov dx,[bp+16]
mov ds,dx
mov bx,[bp+14]
mov word ptr [bx], 1
___read2:

pop ds
pop dx
pop cx
pop bx

pop bp
ret
___read endp


public ___write
___write proc
push bp
mov bp,sp

push bx
push cx
push dx
push ds

mov bx,[bp+6]
mov dx,[bp+10]
mov ds,dx
mov dx,[bp+8]
mov cx,[bp+12]

mov ah, 40h
int 21h

jc ___write1
mov dx,[bp+16]
mov ds,dx
mov bx,[bp+14]
mov word ptr [bx], 0
jmp short ___write2
___write1:
mov dx,[bp+16]
mov ds,dx
mov bx,[bp+14]
mov word ptr [bx], 1
___write2:

pop ds
pop dx
pop cx
pop bx

pop bp
ret
___write endp


; seek - handle, offset, type

public ___seek
___seek proc
push bp
mov bp, sp
push bx
push dx
push cx

mov bx, [bp + 8]
mov dx, [bp + 10]
mov cx, [bp + 12]
mov al, [bp + 13]

mov ah, 042h
int 021h

pop cx
pop dx
pop bx
pop bp
ret
___seek endp


public ___close
___close proc
push bp
mov bp, sp
push bx

mov bx,[bp+8]

mov ah, 03eh
int 021h

pop bx
pop bp
ret
___close endp


public ___remove
___remove proc
push bp
mov bp, sp
push ds
push dx

mov dx, [bp + 8]
mov ds, [bp + 10]

mov ah, 041h
int 021h

pop dx
pop ds
pop bp
ret
___remove endp


public ___rename
___rename proc
push bp
mov bp, sp
push ds
push dx
push es
push di

mov dx, [bp + 8]
mov ds, [bp + 10]
mov di, [bp + 12]
mov es, [bp + 14]

mov ah, 056h
int 021h

pop di
pop es
pop dx
pop ds
pop bp
ret
___rename endp



public ___allocmem
___allocmem proc
push bp
mov bp,sp

push bx
push dx
push ds

mov bx,[bp+6]

shr bx,1
shr bx,1
shr bx,1
shr bx,1

add bx,1
mov ah, 48h
int 21h

jnc allocok
mov ax, 0
allocok:
mov dx,[bp+10]
mov ds,dx
mov bx,[bp+8]

mov word ptr [bx], 0
mov word ptr [bx+2], ax

pop ds
pop dx
pop bx
pop bp
ret
___allocmem endp


public ___freemem
___freemem proc
push bp
mov bp,sp
push es
push dx
push cx

mov dx,[bp+6]
mov cx,[bp+8]

shr dx, 1
shr dx, 1
shr dx, 1
shr dx, 1

add cx, dx
mov es, cx
mov ah, 049h
int 21h

pop cx
pop dx
pop es
pop bp
ret
___freemem endp


; full path, parm block
public ___exec
___exec proc
push bp
mov bp, sp
push ds
push dx
push es
push bx
push cx
push si
push di

mov dx, [bp + 6]
mov ds, [bp + 8]
mov bx, [bp + 10]
mov es, [bp + 12]

jmp short bypass
dummy1 dw ?
dummy2 dw ?
bypass:

mov dummy1, sp
mov dummy2, ss

mov al, 0
mov ah, 04bh
cld              ; dos 2 "bug"
int 21h

cli
mov ss, dummy2
mov sp, dummy1
sti

pop di
pop si
pop cx
pop bx
pop es
pop dx
pop ds
pop bp
ret
___exec endp


public ___datetime
___datetime proc
push bp
mov bp, sp
push ds
push dx
push cx
push bx

mov bx, [bp + 6]
mov ds, [bp + 8]

mov ah, 02ah
int 021h

mov [bx + 0], cx
mov ch, 0
mov cl, dh
mov [bx + 2], cx
mov dh, 0
mov [bx + 4], dx

mov ah, 02ch
int 021h

mov ah, 0
mov al, ch
mov [bx + 6], ax
mov ch, 0
mov [bx + 8], cx
mov ah, 0
mov al, dh
mov [bx + 10], ax
mov dh, 0
mov [bx + 12], dx

pop bx
pop cx
pop dx
pop ds
pop bp
ret
___datetime endp


ifdef WATCOM
; divide dx:ax by cx:bx, result in dx:ax
public __U4D
__U4D proc
push cx
push bx
push dx
push ax
push cx
push bx
push dx
push ax
call far ptr f_lumod@
mov cx, dx
mov bx, ax
call far ptr f_ludiv@
ret
__U4D endp
endif


public f_ludiv@
f_ludiv@ proc far
push bp
mov bp,sp
push bx

cmp word ptr [bp + 12], 0
jne ludiv_full

mov ax, [bp + 8]
mov dx, 0
div word ptr [bp + 10]
mov bx, ax
mov ax, [bp + 6]
div word ptr [bp + 10]

mov dx, bx
jmp short ludiv_fin

ludiv_full:
push word ptr [bp + 12]
push word ptr [bp + 10]
push word ptr [bp + 8]
push word ptr [bp + 6]
call far ptr ___divide
add sp, 8

ludiv_fin:

pop bx
pop bp
ret 8
f_ludiv@ endp


; dx:ax divided by cx:bx, result in dx:ax, module on cx:bx

ifdef WATCOM
public __I4D
__I4D proc
push cx
push bx
push dx
push ax
push cx
push bx
push dx
push ax
call far ptr f_lmod@
mov cx, dx
mov bx, ax
call far ptr f_ldiv@
ret
__I4D endp
endif


; must release stack space in this procedure
public f_ldiv@
f_ldiv@ proc
push bp
mov bp,sp
push dx

cmp word ptr [bp + 12], 0
jne ldiv_full

mov ax,[bp+6]
mov dx,[bp+8]
idiv word ptr [bp+10]
jmp short ldiv_fin

ldiv_full:
push word ptr [bp + 12]
push word ptr [bp + 10]
push word ptr [bp + 8]
push word ptr [bp + 6]
call far ptr ___divide
add sp, 8

ldiv_fin:

pop dx
pop bp
ret 8
f_ldiv@ endp


public f_lmod@
f_lmod@ proc
push bp
mov bp,sp

cmp word ptr [bp + 12], 0
jne lmod_full

mov ax,[bp+6]
mov dx,[bp+8]
idiv word ptr [bp+10]
mov ax,dx
mov dx,0
jmp short lmod_fin

lmod_full:
push word ptr [bp + 12]
push word ptr [bp + 10]
push word ptr [bp + 8]
push word ptr [bp + 6]
call far ptr ___modulo
add sp, 8

lmod_fin:

pop bp
ret 8
f_lmod@ endp


; procedure needs to fix up stack
public f_lumod@
f_lumod@ proc
push bp
mov bp,sp

cmp word ptr [bp + 12], 0
jne lumod_full

mov ax, [bp + 8]
mov dx, 0
div word ptr [bp + 10]
mov ax, [bp + 6]
div word ptr [bp + 10]
mov ax,dx
mov dx, 0
jmp short lumod_fin

lumod_full:
push word ptr [bp + 12]
push word ptr [bp + 10]
push word ptr [bp + 8]
push word ptr [bp + 6]
call far ptr ___modulo
add sp, 8

lumod_fin:

pop bp
ret 8
f_lumod@ endp


; multiply cx:bx by dx:ax, result in dx:ax

public f_lxmul@
public __I4M
public __U4M
f_lxmul@ proc
__I4M:
__U4M:
push bp
mov bp,sp
push cx

push ax
mul cx
mov cx, ax
pop ax
mul bx
add dx, cx

pop cx
pop bp
ret
f_lxmul@ endp


; shift dx:ax left by cl

public f_lxlsh@
f_lxlsh@ proc
push bx

cmp cl, 24
jl lxlsh_16
mov dh, al
mov dl, 0
mov ax, 0
sub cl, 24
jmp short lxlsh_last

lxlsh_16:
cmp cl, 16
jl lxlsh_8
mov dx, ax
mov ax, 0
sub cl, 16
jmp short lxlsh_last

lxlsh_8:
cmp cl, 8
jl lxlsh_last
mov dh, dl
mov dl, ah
mov ah, al
mov al, 0
sub cl, 8
;jmp short lxlsh_last

lxlsh_last:

mov ch, 8
sub ch, cl
xchg ch, cl
mov bx, ax
shr bx, cl
xchg ch, cl
shl dx, cl
or dl, bh
shl ax, cl

pop bx
ret
f_lxlsh@ endp


; shift dx:ax right by cl

public f_lxursh@
f_lxursh@ proc
push bx

cmp cl, 24
jl lxursh_16
mov al, dh
mov ah, 0
mov dx, 0
sub cl, 24
jmp short lxursh_last

lxursh_16:
cmp cl, 16
jl lxursh_8
mov ax, dx
mov dx, 0
sub cl, 16
jmp short lxursh_last

lxursh_8:
cmp cl, 8
jl lxursh_last
mov al, ah
mov ah, dl
mov dl, dh
mov dh, 0
sub cl, 8
;jmp short lxursh_last

lxursh_last:

mov ch, 8
sub ch, cl
xchg ch, cl
mov bx, dx
shl bx, cl
xchg ch, cl
shr ax, cl
or ah, bl
shr dx, cl

pop bx
ret
f_lxursh@ endp


; this procedure needs to fix up the stack
public f_scopy@
f_scopy@ proc

push bp
mov bp, sp
push cx
push ds
push es
push si
push di
lds si, [bp + 6]
les di, [bp + 10]
cld
rep movsb

pop di
pop si
pop es
pop ds
pop cx
pop bp
ret 8
f_scopy@ endp


public f_ftol@
f_ftol@ proc
ret
f_ftol@ endp

public ___SIN__
___SIN__ proc
ret
___SIN__ endp

public ___COS__
___COS__ proc
ret
___COS__ endp

_TEXT ends

end
./ ADD NAME=MVSSTART 0100-04042-04042-1042-00153-00153-00000-PDPCLIB
**********************************************************************
*                                                                    *
*  THIS PROGRAM WRITTEN BY PAUL EDWARDS.                             *
*  RELEASED TO THE PUBLIC DOMAIN                                     *
*                                                                    *
**********************************************************************
**********************************************************************
*                                                                    *
*  MVSSTART - STARTUP ROUTINES FOR MVS FOR USE WITH C/370.           *
*                                                                    *
*  NOTE THAT THE AMODE/RMODE AND CSVQUERY HAVE BEEN COMMENTED        *
*  OUT IN ORDER TO BE COMPATIBLE WITH IFOX (OS/360).  ON OS/370      *
*  AND ABOVE THE AMODE/RMODE CAN BE GIVEN AT ASSEMBLY AND LINK       *
*  TIME INSTEAD.  WITHOUT CSVQUERY, WHEN RUN UNDER TSO, THE          *
*  PROGRAM NAME WILL BE IKJEFT01 INSTEAD OF THE NORMAL NAME, BUT     *
*  THAT WILL NOT AFFECT PROGRAM FUNCTIONALITY.                       *
*                                                                    *
**********************************************************************
         PRINT NOGEN
* YREGS IS NOT AVAILABLE WITH IFOX
*         YREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SUBPOOL  EQU   0
         CSECT
*@@MVSTRT AMODE 31
*@@MVSTRT RMODE ANY
         ENTRY @@MVSTRT
@@MVSTRT EQU   *
         SAVE  (14,12),,@@MVSTRT
         LR    R10,R15
         USING @@MVSTRT,R10
         LR    R11,R1
         GETMAIN RU,LV=STACKLEN,SP=SUBPOOL
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LR    R1,R11
         USING STACK,R13
*
         LA    R2,0
         ST    R2,DUMMYPTR       WHO KNOWS WHAT THIS IS USED FOR
         LA    R2,MAINSTK
         ST    R2,THEIRSTK       NEXT AVAILABLE SPOT IN STACK
         LA    R12,ANCHOR
         ST    R14,EXITADDR
         L     R3,=A(MAINLEN)
         AR    R2,R3
         ST    R2,12(R12)        TOP OF STACK POINTER
         LA    R2,0
         ST    R2,116(R12)       ADDR OF MEMORY ALLOCATION ROUTINE
         ST    R2,ARGPTR
*
         L     R2,CVTPTR
         USING CVT,R2
         L     R2,CVTTCBP
         L     R2,4(R2)
         USING TCB,R2
         L     R2,TCBJSCB
         USING IEZJSCB,R2
         MVC   PGMNAME,JSCBPGMN
*
         LH    R2,JSCBTJID
         ST    R2,TYPE
         L     R2,0(R1)
         LA    R2,0(R2)
         ST    R2,ARGPTR
         LA    R2,PGMNAME
         ST    R2,PGMNPTR
*
* FOR GCC WE NEED TO BE ABLE TO RESTORE R13
         L     R5,SAVEAREA+4
         ST    R5,SAVER13
*
*         LA    R2,=V(@@MVSTRT)
*         CSVQUERY INADDR=(R2),OUTMJNM=PGMNAME,MF=(E,CSVQC)
*
         LA    R1,PARMLIST
         CALL  @@START
         B     RETURN
*
RETURN   DS    0H
         LR    R1,R13
         L     R13,SAVEAREA+4
         LR    R14,R15
         FREEMAIN RU,LV=STACKLEN,A=(R1),SP=SUBPOOL
         LR    R15,R14
         RETURN (14,12),RC=(15)
SAVER13  DS    F
         LTORG
*CEESTART AMODE 31
*CEESTART RMODE ANY
*         ENTRY CEESTART
*CEESTART EQU   *
*CEESG003 AMODE 31
*CEESG003 RMODE ANY
*         ENTRY CEESG003
*CEESG003 EQU   *
*@@CRT0    AMODE 31
*@@CRT0    RMODE ANY
         ENTRY @@CRT0
@@CRT0   EQU   *
*@@EXITA  AMODE 31
*@@EXITA  RMODE ANY
         ENTRY @@EXITA
@@EXITA  EQU   *
*         L     R14,0(R12)
*         L     R15,0(R1)
* FOR GCC, WE HAVE TO USE OUR SAVED R13
         DROP  R10
         USING @@EXITA,R15
         L     R13,=A(SAVER13)
         L     R13,0(R13)
         L     R15,0(R1)
         RETURN (14,12),RC=(15)
*         BR    R14
         LTORG
*
         CVT   DSECT=YES
         IKJTCB
         IEZJSCB
STACK    DSECT
SAVEAREA DS    18F
DUMMYPTR DS    F
THEIRSTK DS    F
PARMLIST DS    0F
ARGPTR   DS    F
PGMNPTR  DS    F
TYPE     DS    F
PGMNAME  DS    CL8
PGMNAMEN DS    C                 NUL BYTE FOR C
ANCHOR   DS    0F
EXITADDR DS    F
         DS    49F
*         CSVQUERY MF=(L,CSVQC)
MAINSTK  DS    8000F
MAINLEN  EQU   *-MAINSTK
STACKLEN EQU   *-STACK
         END
./ ADD NAME=MVSSUPA  0100-04042-04042-1042-00375-00375-00000-PDPCLIB
**********************************************************************
*                                                                    *
*  THIS PROGRAM WRITTEN BY PAUL EDWARDS.                             *
*  RELEASED TO THE PUBLIC DOMAIN                                     *
*                                                                    *
**********************************************************************
**********************************************************************
*                                                                    *
*  MVSSUPA - SUPPORT ROUTINES FOR PDPCLIB UNDER MVS                  *
*                                                                    *
*  NOTE - IF USING 31-BIT ADDRESSING, YOU NEED TO REINSTATE          *
*  THE ONE LINE THAT HAS "LOC=BELOW" IN IT.                          *
*                                                                    *
**********************************************************************
         PRINT NOGEN
* YREGS IS NOT AVAILABLE WITH IFOX
*         YREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SUBPOOL  EQU   0
         CSECT
*@@AOPEN  AMODE 31
*@@AOPEN  RMODE ANY
         ENTRY @@AOPEN
@@AOPEN  EQU   *
         SAVE  (14,12),,@@AOPEN
         LR    R12,R15
         USING @@AOPEN,R12
         LR    R11,R1
         GETMAIN RU,LV=WORKLEN,SP=SUBPOOL
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LR    R1,R11
         USING WORKAREA,R13
*
         L     R3,0(R1)         R3 POINTS TO DDNAME
         L     R4,4(R1)         R4 POINTS TO MODE
         L     R5,8(R1)         R5 POINTS TO RECFM
         L     R8,12(R1)        R8 POINTS TO LRECL
         L     R9,16(R1)        R9 POINTS TO MEMBER NAME (OF PDS)
*         GETMAIN RU,LV=ZDCBLEN,SP=SUBPOOL,LOC=BELOW
* CAN'T USE "BELOW" ON MVS 3.8
         GETMAIN RU,LV=ZDCBLEN,SP=SUBPOOL
         LR    R2,R1
* THIS LINE IS FOR GCC
         LR    R6,R4
* THIS LINE IS FOR C/370
*         L     R6,0(R4)
         LTR   R6,R6
         BNZ   WRITING
* READING
         USING ZDCBAREA,R2
         MVC   ZDCBAREA(INDCBLN),INDCB
         MVC   EOFR24(EOFRLEN),ENDFILE
         LA    R10,JFCB
* EXIT TYPE 07 + 80 (END OF LIST INDICATOR)
         ICM   R10,B'1000',=X'87'
         ST    R10,JFCBPTR
         LA    R10,JFCBPTR
         LA    R4,EOFR24
         USING IHADCB,R2
         STCM  R4,B'0111',DCBEODA
         STCM  R10,B'0111',DCBEXLSA
         MVC   DCBDDNAM,0(R3)
         MVC   OPENMB,OPENMAC
* NOTE THAT THIS IS CURRENTLY NOT REENTRANT AND SHOULD BE MADE SO
         RDJFCB ((R2),INPUT)
         LTR   R9,R9
         BZ    NOMEM
         USING ZDCBAREA,R2
         MVC   JFCBELNM,0(R9)
         OI    JFCBIND1,JFCPDS
NOMEM    DS    0H
*         OPEN  ((R2),INPUT),MF=(E,OPENMB),MODE=31,TYPE=J
* CAN'T USE MODE=31 ON MVS 3.8, OR WITH TYPE=J
         OPEN  ((R2),INPUT),MF=(E,OPENMB),TYPE=J
         B     DONEOPEN
WRITING  DS    0H
         USING ZDCBAREA,R2
         MVC   ZDCBAREA(OUTDCBLN),OUTDCB
         LA    R10,JFCB
* EXIT TYPE 07 + 80 (END OF LIST INDICATOR)
         ICM   R10,B'1000',=X'87'
         ST    R10,JFCBPTR
         LA    R10,JFCBPTR
         USING IHADCB,R2
         STCM  R10,B'0111',DCBEXLSA
         MVC   DCBDDNAM,0(R3)
         MVC   WOPENMB,WOPENMAC
* NOTE THAT THIS IS CURRENTLY NOT REENTRANT AND SHOULD BE MADE SO
         RDJFCB ((R2),OUTPUT)
         LTR   R9,R9
         BZ    WNOMEM
         USING ZDCBAREA,R2
         MVC   JFCBELNM,0(R9)
         OI    JFCBIND1,JFCPDS
WNOMEM   DS    0H
*         OPEN  ((R2),OUTPUT),MF=(E,WOPENMB),MODE=31,TYPE=J
* CAN'T USE MODE=31 ON MVS 3.8, OR WITH TYPE=J
         OPEN  ((R2),OUTPUT),MF=(E,WOPENMB),TYPE=J
DONEOPEN DS    0H
         USING IHADCB,R2
         SR    R6,R6
         LH    R6,DCBLRECL
         ST    R6,0(R8)
         SR    R6,R6
         IC    R6,DCBRECFM
         LA    R7,DCBRECF
         NR    R6,R7
         BZ    VARIABLE
         L     R6,=F'0'
         B     DONESET
VARIABLE DS    0H
         L     R6,=F'1'
DONESET  DS    0H
         ST    R6,0(R5)
         LR    R15,R2
         B     RETURN
*
* THIS IS NOT EXECUTED DIRECTLY, BUT COPIED INTO 24-BIT STORAGE
ENDFILE  LA    R6,1
         BR    R14
EOFRLEN  EQU   *-ENDFILE
*
RETURN   DS    0H
         LR    R1,R13
         L     R13,SAVEAREA+4
         LR    R14,R15
         FREEMAIN RU,LV=WORKLEN,A=(R1),SP=SUBPOOL
         LR    R15,R14
         RETURN (14,12),RC=(15)
         LTORG
* OPENMAC  OPEN  (,INPUT),MF=L,MODE=31
* CAN'T USE MODE=31 ON MVS 3.8
OPENMAC  OPEN  (,INPUT),MF=L,TYPE=J
OPENMLN  EQU   *-OPENMAC
* WOPENMAC OPEN  (,OUTPUT),MF=L,MODE=31
* CAN'T USE MODE=31 ON MVS 3.8
WOPENMAC OPEN  (,OUTPUT),MF=L
WOPENMLN EQU   *-WOPENMAC
INDCB    DCB   MACRF=GL,DSORG=PS,EODAD=ENDFILE,EXLST=JPTR
INDCBLN  EQU   *-INDCB
JPTR     DS    F
OUTDCB   DCB   MACRF=PL,DSORG=PS
OUTDCBLN EQU   *-OUTDCB
*
*
*
*@@AREAD  AMODE 31
*@@AREAD  RMODE ANY
         ENTRY @@AREAD
@@AREAD  EQU   *
         SAVE  (14,12),,@@AREAD
         LR    R12,R15
         USING @@AREAD,R12
         LR    R11,R1
         GETMAIN RU,LV=WORKLEN,SP=SUBPOOL
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LR    R1,R11
         USING WORKAREA,R13
*
         L     R2,0(R1)         R2 CONTAINS HANDLE
         L     R3,4(R1)         R3 POINTS TO BUF POINTER
         LA    R6,0
         GET   (R2)
         ST    R1,0(R3)
         LR    R15,R6
         B     RETURN2
*
RETURN2  DS    0H
         LR    R1,R13
         L     R13,SAVEAREA+4
         LR    R14,R15
         FREEMAIN RU,LV=WORKLEN,A=(R1),SP=SUBPOOL
         LR    R15,R14
         RETURN (14,12),RC=(15)
*
*
*
*@@AWRITE AMODE 31
*@@AWRITE RMODE ANY
         ENTRY @@AWRITE
@@AWRITE EQU   *
         SAVE  (14,12),,@@AWRITE
         LR    R12,R15
         USING @@AWRITE,R12
         LR    R11,R1
         GETMAIN RU,LV=WORKLEN,SP=SUBPOOL
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LR    R1,R11
         USING WORKAREA,R13
*
         L     R2,0(R1)         R2 CONTAINS HANDLE
         L     R3,4(R1)         R3 POINTS TO BUF POINTER
         PUT   (R2)
         ST    R1,0(R3)
         LA    R15,0
         B     RETURNWR
*
RETURNWR DS    0H
         LR    R1,R13
         L     R13,SAVEAREA+4
         LR    R14,R15
         FREEMAIN RU,LV=WORKLEN,A=(R1),SP=SUBPOOL
         LR    R15,R14
         RETURN (14,12),RC=(15)
*
*
*
*@@ACLOSE AMODE 31
*@@ACLOSE RMODE ANY
         ENTRY @@ACLOSE
@@ACLOSE EQU   *
         SAVE  (14,12),,@@ACLOSE
         LR    R12,R15
         USING @@ACLOSE,R12
         LR    R11,R1
         GETMAIN RU,LV=WORKLEN,SP=SUBPOOL
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
         LR    R1,R11
         USING WORKAREA,R13
*
         L     R2,0(R1)         R2 CONTAINS HANDLE
         N     R2,=X'7FFFFFFF'
         MVC   CLOSEMB,CLOSEMAC
*         CLOSE ((R2)),MF=(E,CLOSEMB),MODE=31
* CAN'T USE MODE=31 WITH MVS 3.8
         CLOSE ((R2)),MF=(E,CLOSEMB)
         FREEMAIN RU,LV=ZDCBLEN,A=(R2),SP=SUBPOOL
         LA    R15,0
         B     RETURN3
*
RETURN3  DS    0H
         LR    R1,R13
         L     R13,SAVEAREA+4
         LR    R14,R15
         FREEMAIN RU,LV=WORKLEN,A=(R1),SP=SUBPOOL
         LR    R15,R14
         RETURN (14,12),RC=(15)
         LTORG
* CLOSEMAC CLOSE (),MF=L,MODE=31
* CAN'T USE MODE=31 WITH MVS 3.8
CLOSEMAC CLOSE (),MF=L
CLOSEMLN EQU   *-CLOSEMAC
*
*
*
**********************************************************************
*                                                                    *
*  GETM - GET MEMORY                                                 *
*                                                                    *
**********************************************************************
*@@GETM   AMODE 31
*@@GETM   RMODE ANY
         ENTRY @@GETM
@@GETM   EQU   *
         SAVE  (14,12),,@@GETM
         LR    R12,R15
         USING @@GETM,R12
*
         L     R2,0(R1)
* THIS LINE IS FOR GCC
         LR    R3,R2
* THIS LINE IS FOR C/370
*         L     R3,0(R2)
         A     R3,=F'16'
         GETMAIN RU,LV=(R3),SP=SUBPOOL
         ST    R3,0(R1)
         A     R1,=F'16'
         LR    R15,R1
*
RETURNGM DS    0H
         RETURN (14,12),RC=(15)
         LTORG
*
*
*
**********************************************************************
*                                                                    *
*  FREEM - FREE MEMORY                                               *
*                                                                    *
**********************************************************************
*@@FREEM  AMODE 31
*@@FREEM  RMODE ANY
         ENTRY @@FREEM
@@FREEM  EQU   *
         SAVE  (14,12),,@@FREEM
         LR    R12,R15
         USING @@FREEM,R12
*
         L     R2,0(R1)
         S     R2,=F'16'
         L     R3,0(R2)
         FREEMAIN RU,LV=(R3),A=(R2),SP=SUBPOOL
*
RETURNFM DS    0H
         RETURN (14,12),RC=(15)
         LTORG
*
*
*
**********************************************************************
*                                                                    *
*  GETCLCK - GET THE VALUE OF THE MVS CLOCK TIMER AND MOVE IT TO AN  *
*  8-BYTE FIELD.  THIS 8-BYTE FIELD DOES NOT NEED TO BE ALIGNED IN   *
*  ANY PARTICULAR WAY.                                               *
*                                                                    *
*  E.G. CALL 'GETCLCK' USING WS-CLOCK1                               *
*                                                                    *
*  THIS FUNCTION ALSO RETURNS THE NUMBER OF SECONDS SINCE 1970-01-01 *
*  BY USING SOME EMPERICALLY-DERIVED MAGIC NUMBERS                   *
*                                                                    *
**********************************************************************
*@@GETCLK AMODE 31
*@@GETCLK RMODE ANY
         ENTRY @@GETCLK
@@GETCLK EQU   *
         SAVE  (14,12),,@@GETCLK
         LR    R12,R15
         USING @@GETCLK,R12
*
         L     R2,0(R1)
         STCK  0(R2)
         L     R4,0(R2)
         L     R5,4(R2)
         SRDL  R4,12
         SL    R4,=X'0007D910'
         D     R4,=F'1000000'
         SL    R5,=F'1220'
         LR    R15,R5
*
RETURNGC DS    0H
         RETURN (14,12),RC=(15)
         LTORG
WORKAREA DSECT
SAVEAREA DS    18F
         DS    0F
CLOSEMB  DS    CL(CLOSEMLN)
         DS    0F
OPENMB   DS    CL(OPENMLN)
         DS    0F
WOPENMB  DS    CL(WOPENMLN)
WORKLEN  EQU   *-WORKAREA
ZDCBAREA DSECT
         DS    CL(INDCBLN)
         DS    CL(OUTDCBLN)
         DS    0H
EOFR24   DS    CL(EOFRLEN)
JFCBPTR  DS    F
JFCB     DS    0F
         IEFJFCBN
ZDCBLEN  EQU   *-ZDCBAREA
         DCBD  DSORG=PS
         END
./ ADD NAME=OSSTART  0100-04042-04042-1042-00063-00063-00000-PDPCLIB
; osstart.asm - startup code for C programs
;
; This program written by Paul Edwards, Fidonet 3:711/934
; Released to the public domain
; w/mods by Matthew Parker

; This program is meant to be used as a stub for your C programs
; It is designed for OS/2

.386p

.model flat

;.stack 4000h

extrn __start:near, DosExit:near

_DATA   segment dword public use32 'DATA'
ifdef LINK386_FIX
        org 20000h
endif
banner  db  "PDPCLIB"
_DATA   ends
_BSS    segment dword public use32 'BSS'
_BSS    ends
_STACK  segment dword stack use32 'STACK'
        db 4000h dup(?)
_STACK  ends

DGROUP  group   _DATA,_BSS
        assume cs:_TEXT,ds:DGROUP

_TEXT segment 'CODE'

top:

public __main
__intstart proc
mov eax, [esp+16]
push eax
call __start
sub sp,4
push eax
call __exita
__intstart endp

public __exita
__exita proc
pop eax
pop eax
push eax
push 1
call DosExit
sub sp,8
__exita endp

__main proc
ret
__main endp

_TEXT ends

end top
./ ADD NAME=STRINGA  0100-04042-04042-1042-00050-00050-00000-PDPCLIB
; stringa.asm - string assembler functions
;
; This program written by Paul Edwards, Fidonet 3:711/934
; Released to the public domain
;
; Mods by Rowan Crowe

.386p

.model flat

_DATA   segment dword public use32 'DATA'
_DATA   ends
_BSS    segment dword public use32 'BSS'
_BSS    ends

DGROUP  group   _DATA,_BSS
    assume cs:_TEXT,ds:DGROUP

_TEXT segment 'CODE'

public memcpy
memcpy proc
push ebp
mov ebp, esp
pushf
push edi
push esi
push ecx
mov edi, [ebp+8]
mov eax, edi    ; used for return value
mov esi, [ebp+12]
mov ecx, [ebp+16]
cld
shr ecx, 2
rep movsd
mov cl, byte ptr [ebp+16] ; ECX = 0 so we can safely manipulate
and cl, 3                 ; the bottom byte only
rep movsb
pop ecx
pop esi
pop edi
popf
pop ebp
ret
memcpy endp

_TEXT ends

end
