{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011657000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1704794, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE298.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1704794, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1704794, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE298.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1c\\x0b'", "DS1TRBAL": "b'\\x1eH'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x06\\x00\\t\\x02\\x08\\x00\\x07\\x00\\x1d'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n                         The PUP Command\n\nPURPOSE\n-------\n    This software provides an easy facility for backing up and\n    restoring individual members of a partitioned dataset, using\n    Panvalet to maintain up to 99 backup versions of each member.\n\n\nDESCRIPTION\n-----------\n    The GTEU application is invoked by PUP.  The GTEU application is\n    the software which uses Panvalet to keep backup copies of members\n    of a PDS.  As members are added, or replaced, in a PDS such as a\n    CLIST library, backup copies are entered in a Panvalet library.\n    Up to 99 back copies of each member can be maintained in the\n    Panvalet library.  ISPF statistics are maintained in both the PDS\n    and the Panvalet library.  At any time, the PDS member can be\n    RESTOREd from any back level.  The GTEU programs also can be run\n    in batch jobs with JCL.\n\n    The PUP command is a TSO command processor which is used for\n    online access to the GTEU application programs.  PUP can be run\n    from READY, from ISPF, or from a CLIST or ISPF Dialog.\n\n    The PUP command has the following subcommands:\n\n     HELP      - Execute the HELP facility.\n     STATS     - Display info about the Panvalet and PDS members.\n      STATUS   - Same as STATS.\n     UPDATE    - Update the PDS member and make a backup Panvalet copy.\n      ADD      - Same as UPDATE.\n      CHANGE   - Same as UPDATE.\n     ALIAS     - Create an alias entry for a member of a PDS.\n     DELETE    - Delete a PDS member, or a PDS alias entry.\n     BACKUP    - Make a backup Panvalet member from a PDS member.\n     RESTORE   - Copy a member from the Panvalet library into the PDS.\n     END       - Terminate the PUP command.\n     TSTATS    - Display info with the PANINDEX and PDS commands.\n      TSTATUS  - Same as TSTATS.\n     ABEND0C1  - Cause a S0C1 ABEND for testing.\n\n\nREQUIREMENTS\n------------\n    Only the Panvalet/OS product is required.  The PAN/TSO interface\n    is not required (the 'PAN' command) nor is the PAN/ISPF interface.\n    PanExec is not required.  ISPF is not required.  TSO/E is not\n    required.\n\n    The code was originally written and tested on an MVS/SP1.3.3\n    system, using Panvalet/OS Release 11.0d.  This release of\n    Panvalet/OS was the current release, and was supported under\n    MVS/370 and MVS/XA.\n\n    There is an optional interface to the PDS command and the PANINDEX\n    command.\n\n\nINSTALLATION\n------------\n    The PUP command, and the GTEU application it invokes, easily can\n    be installed in one day.  Installation instructions are provided\n    for an SMP/E install, and a non-SMP/E install.\n\n    All source code is provided.  All code is completely reenterable,\n    reusable and refreshable, so it can be placed into any private or\n    system library.\n\n\nAUTHOR\n------\n    Chuck Hoffman\n    Supervisor, IBM Systems Programming\n    GTE Laboratories, Technical Computation Center\n    40 Sylvan Road\n    Waltham, Massachusetts  02254\n\n                    617/466-2131    V/N 679-2131\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INSTALL": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n                            INSTALLATION\n\n          This installation procedure looks awfully long, but that's\n          because I broke it down into a zillion little steps, and I\n          tried to explain WHY the steps were being performed, and\n          WHAT you should see after each step executes.\n\n          In spite of the length, you should be able to do this\n          install easily within one normal (?) work day, provided you\n          know how to get reasonable batch turnaround.\n\n          You can install this software with SMP/E, or without it.  I\n          personally have a strong preference for using SMP/E, so I\n          naturally recommend that you use SMP/E for this install.\n\n          The member names referred to are in this PDS.\n\n          Disclaimer - Although this software has operated without\n                       error on one MVS/SP1.3.3 system, no one\n                       guarantees that it will operate on any system,\n                       or continue to operate on any system.  No\n                       liability of any sort is assumed by anyone for\n                       malfunction of this software on any system, and\n                       no warrantee or maintenance agreement is\n                       expressed or implied.\n\n              +--------------------------------------------------------+\n              |                                                        |\n              |                    *** NOTICE ***                      |\n              |                                                        |\n              |  This installation procedure makes the following       |\n              |  assumptions:                                          |\n              |                                                        |\n              | A. SYS1.GTEUSRC (this dataset) will be cataloged, and  |\n              |        not on an IPL (SYSRES) volume.                  |\n              |                                                        |\n              | B. SYS1.GTEULK  the transient link library, will be    |\n              |        a new dataset, and will be cataloged but not    |\n              |        on an IPL (SYSRES) volume.                      |\n              |                                                        |\n              | C. SYS1.PROCLIB the existing proc library, will be     |\n              |        cataloged, and not on an IPL (SYSRES) volume.   |\n              |                                                        |\n              | D. SYS1.GTEULIB   new target execution library (TLIB)  |\n              |    SYS1.AGTEULIB  new distribution library  (DLIB)     |\n              |        The two datasets, above, may be old datasets    |\n              |        reused from the previous install.               |\n              |    SYS1.GTELIB    existing TSO TLIB                    |\n              |    SYS1.AGTELIB   existing TSO DLIB                    |\n              |    SYS1.GTEHELP   existing TSO Help TLIB               |\n              |    SYS1.AGTEHELP  existing TSO Help DLIB               |\n              |    SYS1.APROCLIB  existing PROC DLIB                   |\n              |                                                        |\n              |      1.  All the above are located on IPL (SYSRES)     |\n              |          volumes, with the system catalog pointing     |\n              |          to the copy on the current IPL volume.        |\n              |                                                        |\n              |      2.  This installation will be done to copies of   |\n              |          the datasets which are not on the current IPL |\n              |          volume, so VOL=SER information will have to   |\n              |          be provided during execution of batch jobs    |\n              |          to override the catalog pointers to the       |\n              |          current IPL volume.                           |\n              |                                                        |\n              +--------------------------------------------------------+\n\n\n\n STEP  1 - MEMBER $nnDEL - DELETE the prior release of GTEU (R1.01)\n\n    ********************************************************************\n    *  (  )  1.  If you will be doing an install without SMP/E, skip   *\n    *            to STEP 1A.                                           *\n    ********************************************************************\n\n       (  )  2.  If you have the prior release (R1.01) installed, this\n                 job will delete it.  If you do not have the prior\n                 release installed, skip this step.  Be careful to set\n                 the VOL=SER operand in the JCL if you are not going\n                 to be working on the cataloged DLIBs and TLIBs.\n\n\n STEP  2 - MEMBER $nnALLOC - Allocate and catalog datasets.\n\n       (  )  1.  Rename this dataset you are reading to SYS1.GTEUSRC.\n\n       (  )  2.  If you had already installed the prior release, you\n                 can reuse the existing target library (GTEULIB) and\n                 the distribution library (AGTEULIB).  You should\n                 compress them, and check to see that all old members\n                 were deleted by the previous step of this install.\n                 A new transient linklib (GTEULK) should be created,\n                 to avoid mixing old and new software.  The deinstall\n                 of the prior release would not have affected the\n                 transient link library or the source library.\n\n       (  )  3.  Set the actual volume name in the DD1 and DD2\n                 statements.  If you want space allocated on volumes\n                 other than IPL volumes, follow the instructions in\n                 the JCL comments.  Supply JOB card information, then\n                 run the job.\n\n\n STEP  3 - MEMBER $nnASM - Assemble GTEU modules.\n\n       (  )  1.  Module GTEUPUP in this PDS is the source module for\n                 the TSO command processor.  One of its subcommands,\n                 TSTATS, invokes the TSO commands PANINDEX and PDS.\n                 If you do not have both the PANINDEX and PDS\n                 commands, go into EDIT on the GTEUPUP source module\n                 and comment out the two lines relating to the TSTATS\n                 and TSTATUS subcommands at label SUTBL.  This is the\n                 subcommand table of the TSO command processor.\n\n                 If you delete TSTATS, also go into the HELP member\n                 GTEUPUPH and delete the information about TSTATS and\n                 TSTATUS after labels ')S SUBCOMMANDS' and\n                 '=TSTATS=TSTATUS'\n\n       (  )  2.  Module GTEUPUP dynamically allocates four temporary\n                 datasets using the UNIT name of SYSTSO.  At labels\n                 @WK and AWK in source module GTEUPUP, change the UNIT\n                 name from SYSTSO to a valid name for your\n                 installation.  If you need to, you can add a VLSER=\n                 (not VOLSER) parameter to select a particular volume,\n                 and you can optionally delete the UNIT parameter.\n                 Just be sure the macros at @WK and AWK receive the\n                 same changes.  If you need complete information on\n                 the dynamic allocation macros, see macro GTEDADAT in\n                 this dataset.\n\n       (  )  3.  Module GTEUA10 dynamically loads the Panvalet Access\n                 Method (PAM) routines.  It does this because the PAM\n                 routines are not reenterable.  Get a map of the PAM\n                 module with a utility like the Linkage Editor or the\n                 PDS command, and verify that the offsets for the\n                 various PAM routines are correctly entered (for your\n                 release of Panvalet) in the code after the label\n                 'LOAD' in module GTEUA10.  Also, because of the load,\n                 ensure that the PAM routines are in SYS1.LINKLIB or\n                 in a library named in your LNKLSTnn.\n\n                 GTEUA40 dynamically links to PCOMPARE, and GTEUA60\n                 dynamically links to PAN#1.  Ensure that these\n                 programs are also in SYS1.LINKLIB or in a library\n                 named in your LNKLSTnn.\n\n                 Note, a STEPLIB can be used, but be aware that\n                 STEPLIB is ignored under ISPF if you are using an\n                 ISPLKLIB file.\n\n       (  )  4.  Check the position of the name of this dataset,\n                 SYS1.GTEUSRC, in the SYSLIB concatenation of the ASM\n                 step in the instream proc.  Ensure that it is in a\n                 position such that all datasets before it have equal\n                 or larger blocksizes.\n\n       (  )  5.  Supply JOB card information, and run the job.  All\n                 modules will be assembled and linked into the\n                 transient link library SYS1.GTEULK.  All modules will\n                 be reenterable, reusable and refreshable.\n\n       (  )  6.  Check job output.  IEW0461 messages about unresolved\n                 external references to modules beginning with 'GTEU'\n                 are okay.  There should be no other warning messages.\n\n\n STEP  4 - MEMBER $nnLINK - Linkedit the modules into load modules.\n\n       (  )  1.  This step is required if you are installing without\n                 SMP/E.  It is recommended if you are installing with\n                 SMP/E.  This step creates the final, executable load\n                 modules in the target library.  Running this step\n                 before running SMP/E will tell you if you will have\n                 any linkage editor problems.  This member will be\n                 used as JCLIN for the subsequent SMP/E RECEIVE.\n\n       (  )  2.  If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     SYSLMOD\n\n\n STEP  5 - MEMBER $nnREC - RECEIVE function GGU0200.\n\n       (  )  1.  Modify the SMP/E JCL to reflect your installation's\n                 standard.  The following DD statements are included\n                 in all SMP/E jobstreams in this installation for the\n                 current release.  (The GTEULK and GTEUSRC files are\n                 not included for the DELETE of the previous release.)\n\n                 //GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n                 //GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n                 //GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX\n                 //AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX\n\n                 You must include them in your JCL, or define them to\n                 SMP/E zones with DDDEF statements prior to this SMP/E\n                 execution.\n\n                 It is also assumed in all SMP/E jobstreams that\n                 the following files are already defined in DDDEF's in\n                 the target and distribution zones.  They therefore\n                 have not been included in the JCL.\n\n                        PROCLIB  - SYS1.PROCLIB   (TLIB)\n                        APROCLIB - SYS1.APROCLIB  (DLIB)\n                        GTELIB   - SYS1.GTELIB    (TSO command TLIB)\n                        GTEHELP  - SYS1.GTEHELP   (TSO Help TLIB)\n                        AGTEHELP - SYS1.AGTEHELP  (TSO Help DLIB)\n\n                 If they are not in your DDDEF's, include them in your\n                 JCL, or create DDDEF's for them.\n\n       (  )  2.  If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     GTEULIB  AGTEULIB\n\n       (  )  3.  Check job output.  There should be no error messages.\n\n\n STEP  6 - MEMBER $nnAPPX - APPLY CHECK the function.\n\n       (  )  1.  Modify the SMP/E JCL as you did in the RECEIVE step.\n                 Also, add the name of the target zone in the SMPCNTL\n                 file.\n\n                 If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     GTEULIB  AGTEULIB\n\n       (  )  2.  Check job output.  GIM4051 messages from SMP/E are\n                 normal.  These indicate that eventually SMP/E will\n                 use the distribution library AGTEULIB instead of\n                 the transient link library GTEULK as the permanent\n                 residence for the ++MOD load modules.\n\n\n STEP  7 - MEMBER $nnAPP - APPLY the function.\n\n       (  )  1.  Modify the SMP/E JCL as you did in the RECEIVE step.\n                 Also, add the name of the target zone in the SMPCNTL\n                 file.\n\n                 If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     GTEULIB  AGTEULIB\n\n       (  )  2.  Check job output.  GIM4051 messages from SMP/E are\n                 normal.  These indicate that eventually SMP/E will\n                 use the distribution library AGTEULIB instead of\n                 the transient link library GTEULK as the permanent\n                 residence for the ++MOD load modules.\n\n                 There should be no error messages from the linkage\n                 edits.  All modules should be marked reenterable,\n                 reusable, and refreshable.\n\n\n STEP  8 - MEMBER $nnACCX - ACCEPT CHECK the function.\n\n       (  )  1.  Modify the SMP/E JCL as you did in the RECEIVE step.\n                 Also, add the name of the distribution zone in the\n                 SMPCNTL file.\n\n                 If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     GTEULIB  AGTEULIB\n\n       (  )  2.  Check job output.  There should be no error messages.\n\n\n STEP  9 - MEMBER $nnACC - ACCEPT the function.\n\n                 This step makes the DLIBs the residence of all the\n                 executable code.  This will be assumed in later\n                 maintenance, so an ACCEPT at this point is strongly\n                 recommended.  If there is a problem, the entire\n                 function easily can be deleted with SMP/E, and\n                 reRECEIVEd later.\n\n       (  )  1.  Modify the SMP/E JCL as you did in the RECEIVE step.\n                 Also, add the name of the distribution zone in the\n                 SMPCNTL file.\n\n                 If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     GTEULIB  AGTEULIB\n\n       (  )  2.  Check job output.  There should be no error messages\n                 from the linkage edits.  All modules should be marked\n                 reenterable, reusable, and refreshable.\n\n\n STEP 10 - MEMBER $nnUSRMD - Sample USERMOD to the function.\n\n       (  )  1.  This step is a sample jobstream to create a USERMOD\n                 to function GGU0200.  It does use SYS1.GTEUSRC and\n                 SYS1.GTEULK as input TXLIB's.  Note the location of\n                 this JCL for reference later in adding your own mods.\n                 This job is a sample, only.  You should not run it.\n\n    **************************************************************\n    *  (  )  2.  Skip to STEP 11 to continue with the install.   *\n    **************************************************************\n\n\n STEP  1A - MEMBER #nnADEL - (NON-SMP/E) Delete the prior release.\n\n           ****************************************************\n           ***   This step is only for a NON-SMP/E install. ***\n           ****************************************************\n\n       (  )  1.  If you have the prior release (R1.01) installed, this\n                 job will delete it.  If you do not have the prior\n                 release installed, skip this step.  Set the VOL=SER\n                 operand in the JCL and the control card images.\n\n\n STEP  2A - MEMBER #nnAALLO - (NON-SMP/E) Allocate and catalog datasets\n\n           ****************************************************\n           ***   This step is only for a NON-SMP/E install. ***\n           ****************************************************\n\n       (  )  1.  Rename this dataset you are reading to SYS1.GTEUSRC.\n\n       (  )  2.  If you had already installed the prior release, you\n                 can reuse the existing target library (GTEULIB) and\n                 the distribution library (AGTEULIB).  You should\n                 compress them, and check to see that all old members\n                 were deleted by the previous step of this install.\n                 A new transient linklib (GTEULK) should be created,\n                 to avoid mixing old and new software.  The deinstall\n                 of the prior release would not have affected the\n                 transient link library or the source library.\n\n       (  )  3.  Set the actual volume name in the DD1 and DD2\n                 statements.  If you want space allocated on volumes\n                 other than IPL volumes, follow the instructions in\n                 the JCL comments.  Supply JOB card information, then\n                 run the job.\n\n\n STEP  3A - MEMBER #nnAASM - (NON-SMP/E) Assemble GTEU modules.\n\n           ****************************************************\n           ***   This step is only for a NON-SMP/E install. ***\n           ****************************************************\n\n       (  )  1.  Module GTEUPUP in this PDS is the source module for\n                 the TSO command processor.  One of its subcommands,\n                 TSTATS, invokes the TSO commands PANINDEX and PDS.\n                 If you do not have both the PANINDEX and PDS\n                 commands, go into EDIT on the GTEUPUP source module\n                 and comment out the two lines relating to the TSTATS\n                 and TSTATUS subcommands at label SUTBL.  This is the\n                 subcommand table of the TSO command processor.\n\n                 If you delete TSTATS, also go into the HELP member\n                 GTEUPUPH and delete the information about TSTATS and\n                 TSTATUS after label ')S SUBCOMMANDS' and also after\n                 label '=TSTATS=TSTATUS'\n\n       (  )  2.  Module GTEUPUP dynamically allocates four temporary\n                 datasets using the UNIT name of SYSTSO.  At labels\n                 @WK and AWK in source module GTEUPUP, change the UNIT\n                 name from SYSTSO to a valid name for your\n                 installation.  If you need to, you can add a VLSER=\n                 (not VOLSER) parameter to select a particular volume,\n                 and you can optionally delete the UNIT parameter.\n                 Just be sure the macros at @WK and AWK receive the\n                 same changes.  If you need complete information on\n                 the dynamic allocation macros, see macro GTEDADAT in\n                 this dataset.\n\n       (  )  3.  Module GTEUA10 dynamically loads the Panvalet Access\n                 Method (PAM) routines.  It does this because the PAM\n                 routines are not reenterable.  Get a map of the PAM\n                 module with a utility like the Linkage Editor or the\n                 PDS command, and verify that the offsets for the\n                 various PAM routines are correctly entered (for your\n                 release of Panvalet) in the code after the label\n                 'LOAD' in module GTEUA10.  Also, because of the load,\n                 ensure that the PAM routines are in SYS1.LINKLIB or\n                 in a library named in your LNKLSTnn.\n\n                 GTEUA40 dynamically links to PCOMPARE, and GTEUA60\n                 dynamically links to PAN#1.  Ensure that these\n                 programs are also in SYS1.LINKLIB or in a library\n                 named in your LNKLSTnn.\n\n                 Note, a STEPLIB can be used, but be aware that\n                 STEPLIB is ignored under ISPF if you are using an\n                 ISPLKLIB file.\n\n       (  )  4.  Check the position of the name of this dataset,\n                 SYS1.GTEUSRC, in the SYSLIB concatenation of the ASM\n                 step in the instream proc.  Ensure that it is in a\n                 position such that all datasets before it have equal\n                 or larger blocksizes.\n\n       (  )  5.  Supply JOB card information, and run the job.  All\n                 modules will be assembled and linked into the\n                 transient link library SYS1.GTEULK.  All modules will\n                 be reenterable, reusable and refreshable.\n\n       (  )  6.  Check job output.  IEW0461 messages about unresolved\n                 external references to modules beginning with 'GTEU'\n                 are okay.  There should be no other warning messages.\n\n\n STEP  4A - MEMBER $nnLINK - (NON-SMP/E) Linkedit the load modules.\n\n           ****************************************************\n           ***   This step is only for a NON-SMP/E install. ***\n           ****************************************************\n\n       (  )  1.  This step is required if you are installing without\n                 SMP/E.  It is recommended if you are installing with\n                 SMP/E.  This step creates the final, executable load\n                 modules in the target library.  Running this step\n                 before running SMP/E will tell you if you will have\n                 any linkage editor problems.  This member will be\n                 used as JCLIN for the subsequent SMP/E RECEIVE.\n\n       (  )  2.  If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     SYSLMOD\n\n\n STEP  5A - MEMBER $nnACOPY - (NON-SMP/E) Copy modules.\n\n           ****************************************************\n           ***   This step is only for a NON-SMP/E install. ***\n           ****************************************************\n\n       (  )  1.  This step copies the modules from the transient link\n                 library (GTEULK) into permanent DLIBs, and copies the\n                 batch PROCs into SYS1.PROCLIB and into the DLIB for\n                 SYS1.PROCLIB, and it copies the HELP member and its\n                 ALIAS into the TSO HELP library and its DLIB.\n\n       (  )  2.  If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     AGTEULIB\n                     APROCLIB\n                     SYSUT2 (STEP2, GTEHELP)\n                     SYSUT2 (STEP3, AGTEHELP)\n\n       (  )  3.  Check job output.  There should be no error messages.\n\n\n STEP 11 - MEMBER @nnPANLB - Create a Panvalet library from a PDS.\n\n       (  )  1.  This job creates a backup Panvalet library for a PDS.\n                 The Panvalet library name should be the same as the\n                 name of the PDS, plus '.PANUPDTE' added to the end.\n                 The Panvalet library name is not important in batch\n                 processing, but the TSO command processor requires\n                 this pattern.  ICF catalogs support naming\n                 conventions such as these.  Choose a PDS, then fill\n                 in the name at the bottom of the JCL.  The JCL will\n                 generate the Panvalet library name.  (PDS name plus\n                 '.PANUPDTE').  The examples use 'GTEL.CMDPROC', so\n                 the Panvalet library name is 'GTEL.CMDPROC.PANUPDTE'.\n                 The PDS you choose must have RECFM=FB and LRECL=80.\n\n       (  )  2.  Compute the number of members you want to have in the\n                 backup library, using the rule of thumb of one\n                 cylinder in the SPACE allocation, for every 180\n                 datasets on the DATASET operand.  (One Panvalet\n                 'dataset' is required for each backup copy of a\n                 member of a PDS.  Initially, you should start with\n                 about 3 Panvalet datasets for each member of the PDS.\n                 If your PDS has 120 members, you will want about 2\n                 cylinders of space, which will hold about 360\n                 Panvalet datasets in the Panvalet library.)\n\n       (  )  3.  If your installation's Panvalet load modules are not\n                 in SYS1.LINKLIB or in a library on the LNKLSTxx, add\n                 the library name into the JOBLIB concatenation.\n\n       (  )  4.  If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     JOBLIB\n\n       (  )  5.  Run the job.  The condition code should be 0, 4, or\n                 8.  If any of the following occur, you should be\n                 aware of them.\n\n                 CC=4 from GTEUAB0:\n                    A PDS member name had @, #, or $ in it.  Since\n                    PANVALET requires alphanumerics only, the data was\n                    not copied.  The module name will appear in an\n                    error listing from GTEUAB0 about 10 lines after\n                    the '++SUPPRESS ++SOURCE' statement.\n\n                 CC=8 from PAN#1:\n                    o  Member names of patterns 'XXX' and 'XXX01' both\n                       exist simultaneously in the PDS.  Processing\n                       will continue.  'XXX' will be added to the\n                       Panvalet library, then renamed to 'XXX01'.\n                       'XXX01' will have to be added manually or in\n                       batch by you as 'XXX0101'.  Find the member\n                       name in the listing by searching for the\n                       character string 'UNSAT'.\n\n                    o  A member of the PDS had '++' in cc 1-2 of the\n                       80-byte card image.  The Panvalet program tries\n                       to interpret this as a Panvalet control card,\n                       and take action, but cannot.  (Example:\n                       '++MAC'.)  Processing will probably abort.\n                       Although there are ways to force such a member\n                       into the Panvalet library, it will only cause\n                       you headaches later.  Move this member to some\n                       other PDS which will not be processed by this\n                       utility function, then recreate the library and\n                       try again.\n\n       (  )  6.  Look at the Panvalet Library Status and Activity\n                 Report at the bottom of the listing (there is also\n                 one near the top) to see how much space you actually\n                 used in the load operation.  Space allocated will not\n                 exactly match the amount you requested with the rule\n                 of thumb, but it should be close.\n\n       (  )  7.  If you are not familiar with Panvalet utilities, you\n                 may want to save the JCL from STEP4, which uses PAN#2\n                 to get hardcopy of the Panvalet library index.  If\n                 ISPF statistics existed in the PDS directory entry\n                 for a member, they should be converted to a Panvalet\n                 comment.  If not, the comment should be 'INITIAL\n                 VALUE.'\n\n\n STEP 12/13 - MEMBERS @nnBVRFY and @nnBCLEN - Verify batch operation.\n\n             1.  These jobs verify the batch execution of the GTEU\n                 driver functions.  The first job does the verify, and\n                 the second cleans up the PDS and Panvalet library.\n\n       (  )  2.  If you are not using the cataloged copy of the\n                 datasets, fill in the VOL=SER information for the\n                 following files, otherwise delete the VOL=SER\n                 information.\n\n                     JOBLIB\n\n       (  )  3.  Run the first job.  Condition codes should be:\n\n                     STEPNAME    COND\n                     ========    ====\n                     STATSB        12\n                     STATSC        12\n                     All others     0\n\n                 The STATS output at the bottom of the listing should\n                 show that the following exist:\n\n                 In the PDS:   Member GTEUTEST   version 02\n                               Alias  GTEUT1     deleted\n                               Alias  GTEUT2     present\n\n                 In Pan lib:   Member GTEUTEST01 2 records\n                                      GTEUTEST02 3 records\n                                      GTEUTEST03 4 records\n                                      GTEUTEST04 the same as GTEUTEST01\n                                      GTEUTEST05 the same as GTEUTEST02\n                                      GTEUTEST06 the same as GTEUTEST05\n\n       (  )  4.  Run the second job to clean up the datasets.\n\n       (  )  5.  If you are not familiar with Panvalet utilities, you\n                 may want to save this JCL for deleting members from a\n                 Panvalet library, but you will probably choose to\n                 restrict this information from end users.\n\n\n STEP 14 - MEMBERS @nnTVRFY and @nnBCLEN - Verify TSO operation.\n\n                 This is a CLIST to verify the execution of the GTEU\n                 command processor ('PUP') which, in turn, invokes the\n                 same driver functions which were executed previously\n                 in batch.  Additionally, the interface to HELP is\n                 tested, and the interface to PANINDEX and PDS is\n                 executed if you have those commands on your system.\n\n       (  )  1.  Read the CLIST comments.  They describe a test PDS\n                 which you need to create before running the CLIST.\n                 Create the test PDS.  They also describe the use\n                 of the TSO TEST command if your target library is\n                 not currently active on your system.\n\n                 Remember that to uncomment a line, you need to remove\n                 the '/*' from the front end of the line, and also the\n                 '*/' from the back end.\n\n       (  )  2.  If you do not have the PANINDEX and PDS commands, and\n                 you made the source change to the subcommand table in\n                 GTEUPUP, the STATS subcommand will be ignored.  If\n                 you do not have the commands, and you did not make\n                 the source update, then comment out or delete the\n                 CLIST lines invoking the STATS subcommand.\n\n       (  )  3.  Execute the CLIST.  Condition codes should be zero\n                 for all subcommands except the last two STATS.\n\n                 The STATS output at the bottom of the output should\n                 show that the following exist:\n\n                 In the PDS:   Member GTEUTEST   version 02\n                               Alias  GTEUT1     deleted\n                               Alias  GTEUT2     present\n\n                 In Pan lib:   Member GTEUTEST01 2 records\n                                      GTEUTEST02 3 records\n                                      GTEUTEST03 4 records\n                                      GTEUTEST04 the same as GTEUTEST01\n                                      GTEUTEST05 the same as GTEUTEST02\n                                      GTEUTEST06 the same as GTEUTEST05\n\n       (  )  4.  Run the same cleanup job as you ran after the batch\n                 verify job to clean up the datasets.\n\n\n STEP 15 - ACF2 Rules.\n\n       (  )  1.  If you have ACF2, a rule to restrict the update of\n                 XXXX.CMDPROC only to the PUP command processor\n                 which is in LPA, LINKLIB, or a library on the LNKLSTxx:\n\n                   CMDPROC UID(*) READ(A) WRITE(A) ALLOC(P) EXEC(A) +\n                        PGM(PUP) LIB('SYS1.LINKLIB')\n\n                 The following rule would do the same for the batch\n                 programs:\n\n                   CMDPROC UID(*) READ(A) WRITE(A) ALLOC(P) EXEC(A) +\n                        PGM(GTEUA**) LIB('SYS1.LINKLIB')\n\n\n STEP 16 -\n\n       (  )  1.  Your installation is now complete.  Pat yourself on\n                 the back.\n\n       (  )  2.  If you want to pat ME on the back, or throw rocks,\n                 give me a call or write to me.  I would just love to\n                 know if anyone uses this.  I would also love to know\n                 how long it took you to install, the method you used,\n                 any problems you had, and any suggestions for\n                 improvement in the product or the installation\n                 procedures.\n\n                            - Chuck\n\n\n\n                 Chuck Hoffman\n                 Supervisor, IBM Systems Programming\n                 GTE Laboratories, Technical Computation Center\n                 40 Sylvan Road\n                 Waltham, Massachusetts  02254\n\n                                 617/466-2131    V/N 679-2131\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$01DEL": {"ttr": 773, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0#    JOB (GTE4),'DELETE GTEU R1.01',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*  DELETE OLD GTEU RELEASE 1.01 WITH SMP/E\n//*\n//SMP  EXEC SMPE\n//SMPCNTL  DD *\nSET BDY(GLOBAL).\nRECEIVE SELECT(GGU01ZZ) LIST.\nSET BDY(TXXXXXX).\nAPPLY        SELECT(GGU01ZZ).\nSET BDY(DXXXXXX).\nACCEPT       SELECT(GGU01ZZ).\n/*\n//SMPPTFIN DD *\n++FUNCTION (GGU01ZZ).\n++VER(Z038)  DELETE(GGU0101).\n/*\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$02ALLOC": {"ttr": 775, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0A    JOB (GTE4),'ALLOCATE GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*   CREATE LIBRARIES FOR GTEU APPLICATION\n//*\n//*   NOTE - FILL IN THE VOL=SER INFORMATION FOR DD1 AND DD2\n//*\n//*   NOTE - DD3 MUST HAVE A BLOCKSIZE NO LARGER THAN DD1.\n//*\n//*   NOTE - IN THIS JOBSTREAM, VOL('******') AND DEVT(0000) CAUSE\n//*          THE CATALOG ALWAYS TO POINT TO THE CURRENT IPL\n//*          VOLUME.  IF YOU WANT TO USE NON-IPL VOLUME SPACE, DO\n//*          THE FOLLOWING:\n//*            A.  CHANGE TO PGM=IEFBR14\n//*            B.  REMOVE SYSPRINT AND SYSIN DD STATEMENTS\n//*            C.  FOR DD1 AND DD2, CHANGE TO UNIT=SYSDA AND\n//*                REMOVE THE VOL=SER\n//*\n//STEP1  EXEC  PGM=IDCAMS\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n    DEFINE NONVSAM ( NAME(SYS1.GTEULIB   ) VOL('******') DEVT(0000) )\n    DEFINE NONVSAM ( NAME(SYS1.AGTEULIB  ) VOL('******') DEVT(0000) )\n/*\n//*----------------------------------------------------------\n//*     PERMANENT TARGET LIBRARY                          ---\n//*----------------------------------------------------------\n//DD1       DD DSN=SYS1.GTEULIB,DISP=(NEW,KEEP,DELETE),\n//             UNIT=3380,VOL=SER=XXXXXX,\n//             SPACE=(CYL,(1,0,25)),\n//             DCB=(DSORG=PO,RECFM=U,BLKSIZE=17600)\n//*----------------------------------------------------------\n//*     PERMANENT DISTRIBUTION LIBRARY                    ---\n//*----------------------------------------------------------\n//DD2       DD DSN=SYS1.AGTEULIB,DISP=(NEW,KEEP,DELETE),\n//             UNIT=3380,VOL=SER=XXXXXX,\n//             SPACE=(CYL,(1,0,25)),\n//             DCB=(DSORG=PO,RECFM=U,BLKSIZE=6233)\n//*----------------------------------------------------------\n//*     TRANSIENT LINK LIBRARY                            ---\n//*----------------------------------------------------------\n//STEP2  EXEC  PGM=IEFBR14\n//DD3       DD DSN=SYS1.GTEULK,DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(CYL,(1,0,25)),\n//             DCB=(DSORG=PO,RECFM=U,BLKSIZE=6233)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$03ASM": {"ttr": 777, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0B    JOB (GTE4),'ASSEMBLE GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=200\n//*\n//*  ASSEMBLE THE SOURCE MODULES\n//*  LINK THEM INTO A TRANSIENT LINKLIB\n//*  LINKLIB NAME IS ON THE SYSLMOD FILE DD STATEMENT\n//*\n//ASMCLR   PROC NAME=\n//*********************************************\n//*  ASSEMBLE AND LINK REENTERABLE MODULES  ***\n//*********************************************\n//ASM      EXEC PGM=IFOX00,PARM='OBJ,NODECK,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.GTEUSRC,DISP=SHR         <==== NOTE\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  SYSOUT=B\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),DISP=(,PASS)\n//SYSIN    DD  DSN=SYS1.GTEUSRC(&NAME),DISP=SHR\n//*\n//LKED     EXEC PGM=IEWL,COND=(8,LT,ASM),\n//             PARM=(XREF,LET,LIST,NCAL,RENT,REUS,REFR)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.GTEULK(&NAME),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//ASMCLR   PEND\n//*\n//*\n//*\n//S10R  EXEC ASMCLR,NAME=GTEUA10     SUBROUTINE\n//S30R  EXEC ASMCLR,NAME=GTEUA30     SUBROUTINE\n//S40R  EXEC ASMCLR,NAME=GTEUA40     SUBROUTINE\n//S50R  EXEC ASMCLR,NAME=GTEUA50     SUBROUTINE\n//S60R  EXEC ASMCLR,NAME=GTEUA60     SUBROUTINE\n//S70R  EXEC ASMCLR,NAME=GTEUA70     SUBROUTINE\n//S80R  EXEC ASMCLR,NAME=GTEUA80     SUBROUTINE\n//*\n//S00R  EXEC ASMCLR,NAME=GTEUA00     DRIVER - UPDATE\n//S01R  EXEC ASMCLR,NAME=GTEUA01     DRIVER - RESTORE\n//S02R  EXEC ASMCLR,NAME=GTEUA02     DRIVER - DELETE\n//S03R  EXEC ASMCLR,NAME=GTEUA03     DRIVER - ALIAS\n//S04R  EXEC ASMCLR,NAME=GTEUA04     DRIVER - STATS\n//S05R  EXEC ASMCLR,NAME=GTEUA05     DRIVER - BACKUP\n//*\n//SPUP  EXEC ASMCLR,NAME=GTEUPUP     TSO COMMAND PROCESSOR\n//*\n//SA0R  EXEC ASMCLR,NAME=GTEUAA0     UTILITY FOR CREATING LIBRARIES\n//SB0R  EXEC ASMCLR,NAME=GTEUAB0     UTILITY FOR CREATING LIBRARIES\n//*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$04LINK": {"ttr": 779, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " The Linkage Edit JCL is located in member GGU0200 of this dataset.\n It has to be in a member of that name so that the RECEIVE will\n run correctly.  Continue with the install by editing that JCL.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$05REC": {"ttr": 781, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0D    JOB (GTE4),'RECEIVE GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*  RECEIVE FUNCTION FOR GTEU APPLICATION WITH SMP/E\n//*\n//SMP  EXEC SMPE\n//SMPCNTL  DD *\nSET BDY(GLOBAL).\nRECEIVE SELECT(GGU0200) LIST.\n/*\n//SMPPTFIN DD *\n++FUNCTION (GGU0200).\n++VER(Z038).\n++JCLIN  TXLIB(GTEUSRC).\n++MOD(GTEUA10)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA30)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA40)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA50)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA60)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA70)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA80)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA00)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA01)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA02)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA03)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA04)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUA05)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUPUP)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUAA0)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MOD(GTEUAB0)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MAC(GTEUPUPH) MALIAS(PUP)\n    DISTLIB(AGTEHELP) SYSLIB(GTEHELP) TXLIB(GTEUSRC).\n++MAC(GTEUJ00) DISTLIB(APROCLIB) SYSLIB(PROCLIB) TXLIB(GTEUSRC).\n++MAC(GTEUJ01) DISTLIB(APROCLIB) SYSLIB(PROCLIB) TXLIB(GTEUSRC).\n++MAC(GTEUJ02) DISTLIB(APROCLIB) SYSLIB(PROCLIB) TXLIB(GTEUSRC).\n++MAC(GTEUJ03) DISTLIB(APROCLIB) SYSLIB(PROCLIB) TXLIB(GTEUSRC).\n++MAC(GTEUJ04) DISTLIB(APROCLIB) SYSLIB(PROCLIB) TXLIB(GTEUSRC).\n++MAC(GTEUJ05) DISTLIB(APROCLIB) SYSLIB(PROCLIB) TXLIB(GTEUSRC).\n/*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$06APPX": {"ttr": 783, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0E    JOB (GTE4),'APPLY CHECK GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*  APPLY CHECK FUNCTION FOR GTEU APPLICATION WITH SMP/E\n//*\n//SMP  EXEC SMPE\n//SMPCNTL  DD *\nSET BDY(T------).\nAPPLY     CHECK     SELECT(GGU0200).\n/*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$07APP": {"ttr": 785, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0F    JOB (GTE4),'APPLY GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*  APPLY FUNCTION FOR GTEU APPLICATION WITH SMP/E\n//*\n//SMP  EXEC SMPE\n//SMPCNTL  DD *\nSET BDY(T------).\nAPPLY  /* CHECK */  SELECT(GGU0200).\n/*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$08ACCX": {"ttr": 787, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0G    JOB (GTE4),'ACCEPT CHECK GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*  ACCEPT CHECK FUNCTION FOR GTEU APPLICATION WITH SMP/E\n//*\n//SMP  EXEC SMPE\n//SMPCNTL  DD *\nSET BDY(D------).\nACCEPT     CHECK     FUNCTION USERMODS FORFMID(GGU0200).\n/*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$09ACC": {"ttr": 789, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0H    JOB (GTE4),'ACCEPT GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*  ACCEPT FUNCTION FOR GTEU APPLICATION WITH SMP/E\n//*\n//SMP  EXEC SMPE\n//SMPCNTL  DD *\nSET BDY(D------).\nACCEPT  /* CHECK */  FUNCTION USERMODS FORFMID(GGU0200).\n/*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$10USRMD": {"ttr": 791, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0Z    JOB (GTE4),'USERMOD GU20101',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=200\n//*\n//*  --  THIS IS A SAMPLE USERMOD TO THE FUNCTION --\n//*\n//*  PRIOR TO RUNNING THIS JOBSTREAM, CHANGE THE HELP\n//*  MEMBER GTEUPUPH, AND SOURCE MEMBER GTEUPUP, IN SYS1.GTEUSRC.\n//*\n//*  ASSEMBLE SOURCE MODULE FOR GTEUPUP.\n//*  THEN PERFORM SYSMOD TO UPDATE THE LOAD MODULE AND HELP.\n//*\n//ASMCLR   PROC NAME=\n//*********************************************\n//*  ASSEMBLE AND LINK REENTERABLE MODULE   ***\n//*********************************************\n//ASM      EXEC PGM=IFOX00,PARM='OBJ,NODECK,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.GTEUSRC,DISP=SHR         <==== NOTE\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  SYSOUT=B\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),DISP=(,PASS)\n//SYSIN    DD  DSN=SYS1.GTEUSRC(&NAME),DISP=SHR\n//*\n//LKED     EXEC PGM=IEWL,COND=(8,LT,ASM),\n//             PARM=(XREF,LET,LIST,NCAL,RENT,REUS,REFR)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=SYS1.GTEULK(&NAME),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//ASMCLR   PEND\n//*\n//ASM  EXEC ASMCLR,NAME=GTEUPUP\n//*\n//**************************************************************\n//*\n//*  RECEIVE AND APPLY THE SYSMOD\n//*\n//SMP  EXEC SMPE,COND=(8,LE)\n//SMPCNTL  DD *\nSET BDY(GLOBAL).\nRECEIVE SELECT(GU20101) LIST.\nSET BDY(T------).\nAPPLY   SELECT(GU20101) REDO  /* .   ACCEPT IS ONLY A COMMENT, AND\nSET BDY(D------).                    IS INCLUDED FOR USE AFTER TESTING\nACCEPT  SELECT(GU20101)       */ .\n/*\n//SMPPTFIN DD *\n++USERMOD (GU20101)   /*\n\n    COMMENTS GO HERE.\n\n                      */.\n++VER(Z038)  FMID(GGU0200).\n++MOD(GTEUPUP)  LKLIB(GTEULK)  DISTLIB(AGTEULIB)\n                LEPARM(RENT,REUS,REFR).\n++MAC(GTEUPUPH) MALIAS(PUP)\n    DISTLIB(AGTEHELP) SYSLIB(GTEHELP) TXLIB(GTEUSRC).\n/*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//GTEULIB  DD DISP=SHR,DSN=SYS1.GTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#01ADEL": {"ttr": 1026, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0#    JOB (GTE4),'CHUCK HOFFMAN',TIME=30,REGION=512K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=2\n//*\n//*  RUN THIS JOB FOR A NON-SMP DEINSTALL OF RELEASE 1.01\n//*\n//*  DELETE MEMBERS FROM:  TSO COMMAND TLIB\n//*                        TSO HELP TLIB\n//*                        GTEU TLIB\n//*                        TSO HELP DLIB\n//*                        GTEU DLIB\n//*\n//SCRATCH  EXEC  PGM=IEHPROGM,COND=(4,LT)\n//SYSPRINT  DD SYSOUT=*\n//XXXXXX    DD UNIT=3380,VOL=SER=XXXXXX,DISP=SHR\n//SYSIN     DD *\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUA00    TSO TLIB\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUA01\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUA02\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUA03\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUA04\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUA05\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=GTEUPUP\n SCRATCH DSNAME=SYS1.GTELIB,VOL=3380=XXXXXX,MEMBER=PUP\n SCRATCH DSNAME=SYS1.GTEHELP,VOL=3380=XXXXXX,MEMBER=GTEUPUPH  HELP TLIB\n SCRATCH DSNAME=SYS1.GTEHELP,VOL=3380=XXXXXX,MEMBER=PUP\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUAA0   GTEU TLIB\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUAB0\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUAD0\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA00\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA01\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA02\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA03\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA04\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA05\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUPUP\n SCRATCH DSNAME=SYS1.GTEULIB,VOL=3380=XXXXXX,MEMBER=PUP\n SCRATCH DSNAME=SYS1.AGTEHELP,VOL=3380=XXXXXX,MEMBER=GTEUPUPH HELP DLIB\n SCRATCH DSNAME=SYS1.AGTEHELP,VOL=3380=XXXXXX,MEMBER=PUP\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUAA0  GTEU DLIB\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUAB0\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUAD0\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA00\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA01\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA02\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA03\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA04\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA05\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA10\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA30\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA40\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA50\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA60\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA70\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUA80\n SCRATCH DSNAME=SYS1.AGTEULIB,VOL=3380=XXXXXX,MEMBER=GTEUPUP\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#02AALLO": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Run the jobstream in member $..ALLOC\n to create libraries for the GTEU application.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#03AASM": {"ttr": 1030, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Run the jobstream in member $..ASM\n to assemble all the source into a transient link library.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#04ALINK": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " The Linkage Edit JCL is located in member GGU0200 of this dataset.\n Continue with the install by editing that JCL.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#05ACOPY": {"ttr": 1034, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0I    JOB (GTE4),'COPY GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//*   1.  A.  COPY MODULES FROM TRANSIENT LINK LIBRARY INTO DLIB\n//*       B.  COPY PROCS FROM SOURCE INTO PROCLIB\n//*       C.  COPY PROCS FROM SOURCE INTO PROC DLIB\n//*   2.  COPY HELP MEMBER FROM SOURCE INTO TLIB\n//*   3.  COPY HELP MEMBER FROM SOURCE INTO DLIB\n//*\n//STEP1    EXEC  PGM=IEBCOPY\n//SYSPRINT  DD SYSOUT=*\n//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(1,5))\n//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(1,5))\n//*\n//GTEULK   DD DISP=SHR,DSN=SYS1.GTEULK\n//AGTEULIB DD DISP=SHR,DSN=SYS1.AGTEULIB,VOL=SER=XXXXXX,UNIT=3380\n//*\n//GTEUSRC  DD DISP=SHR,DSN=SYS1.GTEUSRC\n//PROCLIB  DD DISP=SHR,DSN=SYS1.PROCLIB\n//APROCLIB DD DISP=SHR,DSN=SYS1.APROCLIB,VOL=SER=XXXXXX,UNIT=3380\n//*\n//SYSIN     DD *\n  COPY   INDD=GTEULK,OUTDD=AGTEULIB\n    SELECT MEMBER=((GTEUA10,,R))                                          000001\n    SELECT MEMBER=((GTEUA30,,R))                                          000001\n    SELECT MEMBER=((GTEUA40,,R))                                          000001\n    SELECT MEMBER=((GTEUA50,,R))                                          000001\n    SELECT MEMBER=((GTEUA60,,R))                                          000001\n    SELECT MEMBER=((GTEUA70,,R))                                          000001\n    SELECT MEMBER=((GTEUA80,,R))                                          000001\n  COPY   INDD=GTEUSRC,OUTDD=PROCLIB\n    SELECT MEMBER=((GTEUJ00,,R))                                          000001\n    SELECT MEMBER=((GTEUJ01,,R))                                          000001\n    SELECT MEMBER=((GTEUJ02,,R))                                          000001\n    SELECT MEMBER=((GTEUJ03,,R))                                          000001\n    SELECT MEMBER=((GTEUJ04,,R))                                          000001\n    SELECT MEMBER=((GTEUJ05,,R))                                          000001\n  COPY   INDD=GTEUSRC,OUTDD=APROCLIB\n    SELECT MEMBER=((GTEUJ00,,R))                                          000001\n    SELECT MEMBER=((GTEUJ01,,R))                                          000001\n    SELECT MEMBER=((GTEUJ02,,R))                                          000001\n    SELECT MEMBER=((GTEUJ03,,R))                                          000001\n    SELECT MEMBER=((GTEUJ04,,R))                                          000001\n    SELECT MEMBER=((GTEUJ05,,R))                                          000001\n/*\n//STEP2  EXEC  PGM=IEBUPDTE\n//SYSUT1    DD DSN=SYS1.GTEUSRC,DISP=SHR\n//SYSUT2    DD DISP=SHR,DSN=SYS1.GTEHELP,VOL=SER=XXXXXX,UNIT=3380\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n./  REPRO  NAME=GTEUPUPH\n./  ALIAS  NAME=PUP\n/*\n//STEP3  EXEC  PGM=IEBUPDTE\n//SYSUT1    DD DSN=SYS1.GTEUSRC,DISP=SHR\n//SYSUT2    DD DISP=SHR,DSN=SYS1.AGTEHELP,VOL=SER=XXXXXX,UNIT=3380\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n./  REPRO  NAME=GTEUPUPH\n./  ALIAS  NAME=PUP\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@11PANLB": {"ttr": 1036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0J    JOB (GTE4),'CREATE PAN LIB',TIME=30,REGION=3072K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=10\n//*\n//******************************************************************\n//*  1.  CREATE NEW PANVALET LIBRARY.                            ***\n//*                                                              ***\n//*      USE THE NAMING CONVENTION OF HAVING THE SAME NAME AS    ***\n//*      THE PDS, PLUS '.PANUPDTE' AS THE LOW LEVEL QUALIFIER.   ***\n//*            +-------------------------------------------+     ***\n//*            | SET THE PDS DSN AT THE BOTTOM OF THIS JCL |     ***\n//*            +-------------------------------------------+     ***\n//*                                                              ***\n//*      RULE OF THUMB:  ABOUT 1 3380 CYLINDER PER 180           ***\n//*                      PANVALET DATASETS (MEMBERS).            ***\n//*                                                              ***\n//*      RESTRICT SOME FUNCTIONS WITH ++SUPPRESS.                ***\n//*                                                              ***\n//*  2.  LOAD NEW PANVALET LIBRARY FROM EXISTING PDS.            ***\n//******************************************************************\n//*\n//*\n//JOBLIB    DD DSN=SYS1.GTEULIB,DISP=SHR,VOL=SER=XXXXXX,UNIT=3380\n//*\n//*\n//*-------------------------------------------------------------------\n//*-------------------------------------------------------------------\n//GTEUJB0   PROC  PDS='** NAME IS MISSING **',                     ---\n//             PRINT='*'                                           ---\n//*                                                                ---\n//**********************************************                   ---\n//*  CREATE NEW PANVALET LIBRARY             ***                   ---\n//**********************************************                   ---\n//*                                                                ---\n//STEP0  EXEC  PGM=PAN#4                                           ---\n//SYSPRINT  DD SYSOUT=*                                            ---\n//PANDD1    DD DSN=&PDS..PANUPDTE,                                 ---\n//             UNIT=SYSTSO,DCB=(DSORG=DA,OPTCD=W),SPACE=(CYL,1),   ---\n//             DISP=(,CATLG,DELETE)                                ---\n//**********************************************                   ---\n//*  CREATE LIST OF NAMES AND STATS          ***                   ---\n//**********************************************                   ---\n//STEP1     EXEC PGM=GTEUAB0,COND=(0,NE),                          ---\n//             REGION=2048K,TIME=(10,00)                           ---\n//SYSUDUMP  DD SYSOUT=*                                            ---\n//*                                                                ---\n//PDS       DD DISP=SHR,DSN=&PDS                                   ---\n//WRK001    DD DSN=&&DIRLIST,UNIT=SYSDA,SPACE=(TRK,(1,1)),         ---\n//             DISP=(,PASS)                                        ---\n//*                                                                ---\n//**********************************************                   ---\n//*  CREATE PAN#1 CONTROL CARD IMAGES        ***                   ---\n//**********************************************                   ---\n//STEP2     EXEC PGM=GTEUAA0,COND=(0,NE),                          ---\n//             REGION=2048K,TIME=(10,00)                           ---\n//*                                                                ---\n//ERRORS    DD SYSOUT=&PRINT                                       ---\n//SYSUT1    DD DSN=&&PANCARDS,UNIT=SYSDA,SPACE=(TRK,(1,1)),        ---\n//             DISP=(,PASS)                                        ---\n//SYSIN     DD DSN=&DIRLIST,DISP=(OLD,DELETE)                      ---\n//*                                                                ---\n//**********************************************                   ---\n//*  COPY THE PDS MEMBERS TO PANVALET LIB    ***                   ---\n//**********************************************                   ---\n//STEP3     EXEC PGM=PAN#1,COND=(4,LT),                            ---\n//             REGION=2048K,TIME=(10,00)                           ---\n//*                                                                ---\n//PDS       DD DISP=SHR,DSN=&PDS                                   ---\n//PANDD1    DD DISP=SHR,DSN=&PDS..PANUPDTE                         ---\n//SYSPRINT  DD SYSOUT=&PRINT                                       ---\n//SYSIN     DD DSN=&&PANCARDS,DISP=(OLD,DELETE)                    ---\n//*                                                                ---\n//**********************************************                   ---\n//*  PRINT THE INDEX OF THE NEW LIBRARY      ***                   ---\n//**********************************************                   ---\n//STEP4     EXEC PGM=PAN#2,COND=(8,LT),                            ---\n//             REGION=2048K,TIME=(10,00)                           ---\n//*                                                                ---\n//PANDD1    DD DISP=SHR,DSN=&PDS..PANUPDTE                         ---\n//SYSPRINT  DD SYSOUT=&PRINT                                       ---\n//SYSIN     DD DDNAME=SYSIN                                        ---\n//*                                                                ---\n//GTEUJB0   PEND                                                   ---\n//*-------------------------------------------------------------------\n//*-------------------------------------------------------------------\n//*\n//S1   EXEC  GTEUJB0,PDS='GTEL.CMDPROC'\n//*\n//STEP0.PANDD1 DD SPACE=(CYL,2)  <------- RULE OF THUMB -----+\n//STEP0.SYSIN  DD *                                          :\n++CLEAR RECORDS=12,DATASETS=360  <------- RULE OF THUMB -----+\n++SUPPRESS ++UPDATE\n++SUPPRESS ++RESEQ\n++SUPPRESS ++RENAME\n++SUPPRESS ++STATUS\n/*\n//STEP4.SYSIN  DD *\n++PRINT 2-UP,COMMENT\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@12BVRFY": {"ttr": 1039, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0K  JOB (GTE4),'VERIFY BATCH GTEU',TIME=30,REGION=2048K,\n//  CLASS=A,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=10\n//*\n//******************************************************************\n//*   THIS JOBSTREAM TESTS THE BATCH PROCS WHICH RUN THE         ***\n//*   GTEU APPLICATION DRIVER PROGRAMS.                          ***\n//*                                                              ***\n//*     PROC      DRIVER      FUNCTION                           ***\n//*     ----      -------     --------                           ***\n//*     GTEUJ00   GTEUA00   - UPDATE, (ADD, CHANGE, REPLACE)     ***\n//*     GTEUJ01   GTEUA01   - RESTORE                            ***\n//*     GTEUJ02   GTEUA02   - DELETE PDS MEMBER OR ALIAS         ***\n//*     GTEUJ03   GTEUA03   - ALIAS ADD                          ***\n//*     GTEUJ04   GTEUA04   - STATISTICS                         ***\n//*     GTEUJ05   GTEUA05   - BACKUP                             ***\n//*                                                              ***\n//******************************************************************\n//*\n//*\n//JOBLIB    DD DSN=SYS1.GTEULIB,DISP=SHR,VOL=SER=XXXXXX,UNIT=3380\n//*\n//*\n//*************************************************************\n//*  ADD MEMBER GTEUTEST, VERSION 01                         **\n//*************************************************************\n//ADD      EXEC  GTEUJ00,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST\n//SEQ  DD *\nThis is a test member, consisting of\ntwo lines of data.\n/*\n//*\n//*************************************************************\n//*  UPDATE MEMBER GTEUTEST, NOW VERSION 02                  **\n//*************************************************************\n//UPDATE1  EXEC  GTEUJ00,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST\n//SEQ  DD *\nThis is a test member, consisting of\nthree\nlines of data.\n/*\n//*\n//*************************************************************\n//*  UPDATE MEMBER GTEUTEST, NOW VERSION 03                  **\n//*************************************************************\n//UPDATE2  EXEC  GTEUJ00,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST\n//SEQ  DD *\nThis is a test member, consisting of\nthree\n(no, four)\nlines of data.\n/*\n//*\n//*************************************************************\n//*  DELETE MEMBER GTEUTEST                                  **\n//*************************************************************\n//DELETE   EXEC GTEUJ02,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST\n//*\n//*\n//*************************************************************\n//*  RESTORE MEMBER GTEUTEST FROM VERSION 01, NOW VERSION 04 **\n//*************************************************************\n//RESTORE1 EXEC GTEUJ01,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST,VERSION=01\n//*\n//*\n//*************************************************************\n//*  RESTORE MEMBER GTEUTEST FROM VERSION 02, NOW VERSION 05 **\n//*************************************************************\n//RESTORE2 EXEC GTEUJ01,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST,VERSION=02\n//*\n//*\n//*************************************************************\n//*  ASSIGN AN ALIAS OF GTEUT1 TO GTEUTEST                   **\n//*************************************************************\n//ALIAS1   EXEC GTEUJ03,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST,ALIAS=GTEUT1\n//*\n//*\n//*************************************************************\n//*  ASSIGN A SECOND ALIAS OF GTEUT2 TO GTEUTEST             **\n//*************************************************************\n//ALIAS2   EXEC GTEUJ03,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST,ALIAS=GTEUT2\n//*\n//*\n//*************************************************************\n//*  DELETE ALIAS GTEUT1                                     **\n//*************************************************************\n//DELETEA  EXEC GTEUJ02,PDS='GTEL.CMDPROC',MEMBER=GTEUT1\n//*\n//*************************************************************\n//*  BACKUP GTEUTEST TO CREATE VERSION 06                    **\n//*************************************************************\n//BACKUP   EXEC GTEUJ05,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST\n//*\n//*************************************************************\n//*  GET STATS ON GTEUTEST                                   **\n//*************************************************************\n//STATSA   EXEC GTEUJ04,PDS='GTEL.CMDPROC',MEMBER=GTEUTEST\n//*\n//*************************************************************\n//*  GET STATS ON GTEUT1, SHOULD NOT EXIST                   **\n//*************************************************************\n//STATSB   EXEC GTEUJ04,PDS='GTEL.CMDPROC',MEMBER=GTEUT1\n//*\n//*************************************************************\n//*  GET STATS ON GTEUT2, SHOULD BE JUST AN ALIAS            **\n//*************************************************************\n//STATSC   EXEC GTEUJ04,PDS='GTEL.CMDPROC',MEMBER=GTEUT2\n//*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@13BCLEN": {"ttr": 1042, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0L  JOB (GTE4),'BATCH CLEANUP',TIME=30,REGION=2048K,\n//  CLASS=A,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=10\n//*\n//CLEANPDS EXEC  PGM=IEHPROGM\n//SYSPRINT  DD SYSOUT=*\n//DISK      DD UNIT=3380,VOL=SER=......,DISP=SHR\n//SYSIN     DD *\n SCRATCH DSNAME=GTEL.CMDPROC,VOL=3380=......,MEMBER=GTEUTEST\n SCRATCH DSNAME=GTEL.CMDPROC,VOL=3380=......,MEMBER=GTEUT2\n/*\n//*\n//CLEANPAN  EXEC  PGM=PAN#2\n//PANDD1    DD DSN=GTEL.CMDPROC.PANUPDTE,DISP=SHR\n//PANDD2    DD DUMMY\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n++CONTROL 0\n++DELETE NAME=GTEUTEST01,GTEUTEST99  (GTEUTEST01 MUST EXIST FOR RANGE)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@14TVRFY": {"ttr": 1044, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0\n/************************************************************/\n/* THIS CLIST CHECKS THE OPERATION OF THE GTEU TSO COMMAND  */\n/* PROCESSOR.  IT ASSUMES THE EXISTENCE OF A PDS NAMED      */\n/* &USERID..GTEUTEST.DATA WITH THE FOLLOWING THREE MEMBERS: */\n/*                                                          */\n/*  NAME    CONTENTS                                        */\n/*  =====   ====================================            */\n/*                                                          */\n/*  TESTA:  THIS IS A TEST MEMBER, CONSISTING OF            */\n/*          TWO LINES OF DATA.                              */\n/*                                                          */\n/*  TESTB:  THIS IS A TEST MEMBER, CONSISTING OF            */\n/*          THREE                                           */\n/*          LINES OF DATA.                                  */\n/*                                                          */\n/*  TESTC:  THIS IS A TEST MEMBER, CONSISTING OF            */\n/*          THREE                                           */\n/*          (NO, FOUR)                                      */\n/*          LINES OF DATA.                                  */\n/*                                                          */\n/************************************************************/\nCONTROL LIST\n/************************************************************/\n/*   IF YOU ARE NOT USING THE CATALOGED COPY OF THE TSO     */\n/*   COMMAND LIBRARY, OR TARGET LIBRARY, UNCOMMENT THE      */\n/*   APPROPRIATE 'ALLOCATE' COMMAND BELOW AND FILL IN THE   */\n/*   'VOL' PARAMETER.                                       */\n/*                                                          */\n/*   IF YOU HAVE PLACED GTEUPUP, ALIAS PUP, INTO A TSO      */\n/*   COMMAND LIBRARY WHICH IS NOT CURRENTLY ACTIVE,         */\n/*   UNCOMMENT THE FOLLOWING 'TEST' COMMAND AND 'GO'        */\n/*   SUBCOMMAND, TO TEST FROM THE TARGET LIBRARY.           */\n/*                                                          */\n/*   DELETE, OR COMMENT OUT, THE 'HELP' LINES IF THE HELP   */\n/*   GTEUPUPH, ALIAS PUP, IS NOT CURRENTLY IN YOUR SYSHELP  */\n/*   CONCATENATION.                                         */\n/*                                                          */\n/*   IF YOU ARE USING THE 'TEST' COMMAND, YOU WILL HAVE TO  */\n/*   END THE CLIST BY MANUALLY TYPING IN THE 'END'          */\n/*   SUBCOMMAND OF THE 'TEST' COMMAND.                      */\n/*                                                          */\n/************************************************************/\n/*****************************************************************/\n/*   ALLOCATE DSN('SYS1.GTELIB') UNIT(3380) VOL(XXXXXX) SHR      */\n/*   ALLOCATE DSN('SYS1.GTEULIB') UNIT(3380) VOL(XXXXXX) SHR     */\n/*****************************************************************/\n/************************************************************/\n/*   TEST  'SYS1.GTEULIB(PUP)'  CP                          */\n/************************************************************/\nPUP\n/************************************************************/\n/*   GO                                                     */\n/************************************************************/\n    HELP\n    HELP  UPDATE  SYNTAX\n    HELP  RESTORE SYNTAX\n    HELP  DELETE  SYNTAX\n    HELP  ALIAS   SYNTAX\n    HELP  STATS   SYNTAX\n    ADD     'GTEL.CMDPROC(GTEUTEST)'  FROM(GTEUTEST.DATA(TESTA))\n    UPDATE  'GTEL.CMDPROC(GTEUTEST)'  FROM(GTEUTEST.DATA(TESTB))\n    CHANGE  'GTEL.CMDPROC(GTEUTEST)'  FROM(GTEUTEST.DATA(TESTC))\n    DELETE  'GTEL.CMDPROC(GTEUTEST)'\n    RESTORE 'GTEL.CMDPROC(GTEUTEST)'  FROM  VERSION(01)\n    RESTORE 'GTEL.CMDPROC(GTEUTEST)'  FROM  VERSION(02)\n    ALIAS   'GTEL.CMDPROC(GTEUTEST)'  GTEUT1\n    ALIAS   'GTEL.CMDPROC(GTEUTEST)'  GTEUT2\n    DELETE  'GTEL.CMDPROC(GTEUT1)'\n    BACKUP  'GTEL.CMDPROC(GTEUTEST)'\n    STATS   'GTEL.CMDPROC(GTEUTEST)'\n    STATS   'GTEL.CMDPROC(GTEUT1)'\n    STATS   'GTEL.CMDPROC(GTEUT2)'\n  END\nEXIT CODE(&MAXCC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GGU0200": {"ttr": 1047, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//CAH0C    JOB (GTE4),'LINK GTEU',TIME=30,REGION=4096K,\n//  CLASS=C,MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=CAH0\n/*JOBPARM  LINES=5\n//*\n//* NOTE - THIS JOB IS RECOMMENDED, BUT NOT ACTUALLY\n//*        NECESSARY IF THE INSTALLATION\n//*        WILL BE DONE WITH SMP.  THIS JCL WILL BE USED\n//*        FOR JCLIN IN THE RECEIVE, AND THE LINK EDITS WILL\n//*        TAKE PLACE IN THE APPLY.\n//*\n//* ------------------------------------------------------------------\n//*\n//*  CREATE LMOD'S IN A TARGET LIBRARY FROM MOD'S IN A\n//*  TEMPORARY LINKLIB.\n//*  TARGET LIBARY NAME IS ON THE SYSLMOD STATEMENT.\n//*\n//*\n//LKEDTGT  EXEC PGM=IEWL,\n//             PARM=(XREF,LET,LIST,NCAL,RENT,REUS,REFR)\n//GTEULK   DD  DSN=SYS1.GTEULK,DISP=SHR\n//*\n//SYSLMOD  DD  DSN=SYS1.GTEULIB,DISP=SHR,VOL=SER=XXXXXX,UNIT=3380\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  *\n  INCLUDE  GTEULK(GTEUA00)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA40)\n  INCLUDE  GTEULK(GTEUA50)\n  INCLUDE  GTEULK(GTEUA60)\n  INCLUDE  GTEULK(GTEUA70)\n  ENTRY  GTEUA00\n    NAME GTEUA00(R)\n  INCLUDE  GTEULK(GTEUA01)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA50)\n  INCLUDE  GTEULK(GTEUA60)\n  INCLUDE  GTEULK(GTEUA80)\n  ENTRY  GTEUA01\n    NAME GTEUA01(R)\n  INCLUDE  GTEULK(GTEUA02)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA70)\n  ENTRY  GTEUA02\n    NAME GTEUA02(R)\n  INCLUDE  GTEULK(GTEUA03)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA70)\n  ENTRY  GTEUA03\n    NAME GTEUA03(R)\n  INCLUDE  GTEULK(GTEUA04)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA50)\n  ENTRY  GTEUA04\n    NAME GTEUA04(R)\n  INCLUDE  GTEULK(GTEUA05)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA50)\n  INCLUDE  GTEULK(GTEUA60)\n  ENTRY  GTEUA05\n    NAME GTEUA05(R)\n  INCLUDE  GTEULK(GTEUPUP)\n  ALIAS  PUP\n  ENTRY  PUP1A\n    NAME GTEUPUP(R)\n  INCLUDE  GTEULK(GTEUAA0)\n  ENTRY  GTEUAA0\n    NAME GTEUAA0(R)\n  INCLUDE  GTEULK(GTEUAB0)\n  INCLUDE  GTEULK(GTEUA50)\n  ENTRY  GTEUAB0\n    NAME GTEUAB0(R)\n/*\n//* ------------------------------------------------------------------\n//*\n//*  CREATE LMOD'S IN A TSO COMMAND TARGET LIBRARY FROM MOD'S IN A\n//*  TEMPORARY LINKLIB.\n//*\n//*  CREATE ONLY LMOD'S REQUIRED FOR TSO EXECUTION.\n//*\n//*  COMMAND TARGET LIBARY NAME IS ON THE SYSLMOD STATEMENT.\n//*\n//LKEDCMD  EXEC PGM=IEWL,\n//             PARM=(XREF,LET,LIST,NCAL,RENT,REUS,REFR)\n//GTEULK   DD  DSN=SYS1.GTEULK,DISP=SHR\n//*\n//SYSLMOD  DD  DSN=SYS1.GTELIB,DISP=SHR,VOL=SER=XXXXXX,UNIT=3380\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  *\n  INCLUDE  GTEULK(GTEUA00)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA40)\n  INCLUDE  GTEULK(GTEUA50)\n  INCLUDE  GTEULK(GTEUA60)\n  INCLUDE  GTEULK(GTEUA70)\n  ENTRY  GTEUA00\n    NAME GTEUA00(R)\n  INCLUDE  GTEULK(GTEUA01)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA50)\n  INCLUDE  GTEULK(GTEUA60)\n  INCLUDE  GTEULK(GTEUA80)\n  ENTRY  GTEUA01\n    NAME GTEUA01(R)\n  INCLUDE  GTEULK(GTEUA02)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA70)\n  ENTRY  GTEUA02\n    NAME GTEUA02(R)\n  INCLUDE  GTEULK(GTEUA03)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA70)\n  ENTRY  GTEUA03\n    NAME GTEUA03(R)\n  INCLUDE  GTEULK(GTEUA04)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA50)\n  ENTRY  GTEUA04\n    NAME GTEUA04(R)\n  INCLUDE  GTEULK(GTEUA05)\n  INCLUDE  GTEULK(GTEUA10)\n  INCLUDE  GTEULK(GTEUA30)\n  INCLUDE  GTEULK(GTEUA50)\n  INCLUDE  GTEULK(GTEUA60)\n  ENTRY  GTEUA05\n    NAME GTEUA05(R)\n  INCLUDE  GTEULK(GTEUPUP)\n  ALIAS  PUP\n  ENTRY  PUP1A\n    NAME GTEUPUP(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEDAALC": {"ttr": 1283, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEDAALC  &NM,&VERB=AL,&ERRMSG=YES\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   PERFORM DYNAMIC ALLOCATION USING A DATA AREA CREATED         ***\n***   BY MACRO GTEDADAT, AND POINTERS/DATA SET BY MACRO GTEDASET.  ***\n**********************************************************************\n*\n**********************************************************************\n***   SET VERB CODE INTO S99RB.                                    ***\n***   MAPPING MACRO IEFZB4D0 MUST APPEAR IN THE SOURCE.            ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB\n.*\n.VBAL    AIF   ('&VERB' NE 'AL').VBUN\n         MVI   (S99VERB-S99RB)(1),S99VRBAL   SET VERB, DSN ALLOC\n         AGO   .VBEND\n.VBUN    AIF   ('&VERB' NE 'UN').VBCC\n         MVI   (S99VERB-S99RB)(1),S99VRBUN   SET VERB, DSN UNALLOC\n         AGO   .VBEND\n.VBCC    AIF   ('&VERB' NE 'CC').VBDC\n         MVI   (S99VERB-S99RB)(1),S99VRBCC   SET VERB, CONCATENATE\n         AGO   .VBEND\n.VBDC    AIF   ('&VERB' NE 'DC').VBRI\n         MVI   (S99VERB-S99RB)(1),S99VRBDC   SET VERB, DECONCATENATE\n         AGO   .VBEND\n.VBRI    AIF   ('&VERB' NE 'RI').VBDN\n         MVI   (S99VERB-S99RB)(1),S99VRBRI   SET VERB, REMOVE IN-USE\n         AGO   .VBEND\n.VBDN    AIF   ('&VERB' NE 'DN').VBIN\n         MVI   (S99VERB-S99RB)(1),S99VRBDN   SET VERB, DDN ALLOC\n         AGO   .VBEND\n.VBIN    AIF   ('&VERB' NE 'IN').VBEND\n         MVI   (S99VERB-S99RB)(1),S99VRBIN   SET VERB, REQUEST INFO\n         AGO   .VBEND\n.VBEND   ANOP\n.*\n*\n**********************************************************************\n***    DO DYNAMIC ALLOCATION                                       ***\n**********************************************************************\n*\n         LA    1,&NM.RBP                ADDRESS OF PTR TO SVC-99 RB\n         SVC   99                       DYNALLOC\n         ST    15,&NM.S99RC             SAVE RETURN CODE FROM SVC-99\n.*\n.*********************************************************************\n.**                                                                ***\n.**   IF &ERRMSG=NO, DO NOT EVER GENERATE CODE FOR IKJEFF18        ***\n.**                                                                ***\n.*********************************************************************\n.*\n         AIF   ('&ERRMSG' EQ 'NO').NOPR\n.*\n*\n**********************************************************************\n***    IF R/C FROM DYNAMIC ALLOCATION NOT ZERO,                    ***\n***    EXECUTE THE IKJEFF18 (DAIRFAIL) PROGRAM TO PRODUCE          ***\n***    ERROR MESSAGES.                                             ***\n**********************************************************************\n*\n         CNOP  2,4                      ALIGN FOR BRANCH INSTRUCTION\n         LTR   15,15                    IF RETURN CODE IS GOOD\n         BZ    EXZ&SYSNDX                 BRANCH TO END OF ROUTINE\n         BAL   1,EXA&SYSNDX  BRANCH AROUND LIST\n*\n**********************************************************************\n***    EXCEPTIONS, DON'T USE IKJEFF18 FOR THESE VERB/ERROR COMBOS  ***\n***                                                                ***\n         DC    H'1'          NUMBER OF MEMBERS IN THIS LIST\n         DC    X'02,0438'    VERB 02 ERR 0438 DDNAME NOT FOUND\n***                                                                ***\n**********************************************************************\n*\nEXA&SYSNDX LA    2,2(0,1)                    R2 IS POINTER TO COMBOS\n           LH    1,0(0,1)                    R1 IS COUNT OF COMBOS\n           LA    15,&NM.RB                   R15 IS BASE OF RB\n*\n           CLC   (S99VERB-S99RB)(1,15),0(2)  IF NO MATCH ON VERB\n           BNE   *+14                          BRANCH TO END OF LOOP\n           CLC   (S99ERROR-S99RB)(2,15),1(2) ELSE IF ERRCDE MATCHES\n           BE    EXZ&SYSNDX                    BRANCH TO ENDING\n           LA    2,6(0,2)                    POINT TO NEXT ENTRY\n           BCT   1,*-24                      LOOP BACK UP TIL EOL\n*\n         LA    1,&NM.DFPRM              POINT TO IKJEFF18 PARM BLOCK\n         CNOP  0,4                      ALIGN FOR FOLLOWING BAL\n         BAL   15,*+20                  LOAD CONST ADDR AND BRANCH\n         DC    A(*+8)                   ADDR OF LINK PARM LIST\n         DC    A(0)                     ADDR OF DCB (NONE)\n         DC    CL8'IKJEFF18'            EP NAME\n         SVC   6                        LINK\n*\n.NOPR    ANOP\nEXZ&SYSNDX NOPR  0                        END POINT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDADAT": {"ttr": 1286, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      GTEDADAT  &MAP=,&DDNAM=,&DSNAM=,&MEMBR=,&STATS=,              X\n               &NDISP=,&CDISP=,                                        X\n               &TRK=,&CYL=,&BLKLN=,&PRIME=,&SECND=,&DIR=,&RLSE=,       X\n               &SPFRM=,&ROUND=,&VLSER=,&PRIVT=,&VLSEQ=,&VLCNT=,        X\n               &VLRDS=,&UNIT=,&UNCNT=,&PARAL=,&SYSOU=,&SPGNM=,&SFMNO=, X\n               &OUTLM=,&CLOSE=,&COPYS=,&LABEL=,&DSSEQ=,&PASPR=,        X\n               &INOUT=,&EXPDT=,&RETPD=,&DUMMY=,&FCBIM=,&FCBAV=,        X\n               &QNAME=,&TERM=,&UCS=,&UFOLD=,&UVRFY=,&DCBDS=,&DCBDD=,   X\n               &SUSER=,&SHOLD=,&MSVGP=,&SSNM=,&PROT=,&BFALN=,&BFTEK=,  X\n               &BLKSZ=,&BUFIN=,&BUFL=,&BUFMX=,&BUFNO=,&BUFOF=,&BUFOU=, X\n               &BUFRQ=,&BUFSZ=,&CODE=,&CPRI=,&DEN=,&DSORG=,&EROPT=,    X\n               &GNCP=,&INTVL=,&KYLEN=,&LIMCT=,&LRECL=,&MODE=,&NCP=,    X\n               &OPTCD=,&PCIR=,&PCIS=,&PRTSP=,&RECFM=,&RSRVF=,&RSRVS=,  X\n               &SOWA=,&STACK=,&THRSH=,&TRTCH=,&IPLTX=,&DIAGN=,&FUNC=,  X\n               &FRID=,&PASSW=,&PERMA=,&CNVRT=,                         X\n               &RTDDN=,&RTDSN=,&RTORG=,       <== FOR DSN ALLOCATION   X\n               &INDDN=,&INDSN=,&INORG=,       <== FOR INFO RETRIEVAL   X\n               &RTMEM=,&RTSTA=,&RTNDP=,&RTCDP=,&RTLIM=,&RTATT=,        X\n               &RTLST=,&RTTYP=,&RELNO=,                                X\n               &RTVOL=,&SSPRM=,&TCBAD=,&REMOV=,&UNALC=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n           LCLA  &TUPLEN\n&TUPLEN    SETA  0\n*\n&NM        DS  0D                       ALIGN FOR GETMAIN\n*\n**********************************************************************\n***        TEXT UNITS FOR SVC99                                    ***\n**********************************************************************\n*\n&NM.TU     DS  0F   TEXT UNITS FOR SVC99\n.*\n.*********************************************************************\n.***       DSNAME ALLOCATION TEXT UNITS - VERB CODE 01             ***\n.*********************************************************************\n.*\n.TUDDNAM   AIF ('&DDNAM' EQ '').TUDSNAM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDDNA#\n           DS  XL6\n&NM.DDNAM  DS  CL8                      DDNAME\n           AGO .TUDSNAM\n.TUDDNA#   ANOP\n           DC  X'0001,0001,0008'\n&NM.DDNAM  DC  CL8'&DDNAM'              DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSNAM   AIF ('&DSNAM' EQ '').TUMEMBR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSNA#\n           DS  XL6\n&NM.DSNAM  DS  CL44                     DATASET NAME\n           AGO .TUMEMBR\n.TUDSNA#   ANOP\n           DC  X'0002,0001,002C'        DATASET NAME (NEXT LINE)\n&NM.DSNAM  DC  CL44'&DSNAM'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMEMBR   AIF ('&MEMBR' EQ '').TUSTATS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUMEMB#\n&NM.MEMKY  DS  XL6\n&NM.MEMBR  DS  CL8                      MEMBER NAME\n           AGO .TUSTATS\n.TUMEMB#   ANOP\n&NM.MEMKY  DC  X'0003,0001,0008'\n&NM.MEMBR  DC  CL8'&MEMBR'              MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSTATS   AIF ('&STATS' EQ '').TUNDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSTAT#\n&NM.STATS  DS  XL7                      STATUS\n           AGO .TUNDISP\n.TUSTAT#   AIF ('&STATS' NE 'OLD').TUSTAT2\n&NM.STATS  DC  X'0004,0001,0001,01'     STATUS=OLD\n           AGO .TUNDISP\n.TUSTAT2   AIF ('&STATS' NE 'MOD').TUSTAT4\n&NM.STATS  DC  X'0004,0001,0001,02'     STATUS=MOD\n           AGO .TUNDISP\n.TUSTAT4   AIF ('&STATS' NE 'NEW').TUSTAT8\n&NM.STATS  DC  X'0004,0001,0001,04'     STATUS=NEW\n           AGO .TUNDISP\n.TUSTAT8   AIF ('&STATS' NE 'SHR').TUNDISP\n&NM.STATS  DC  X'0004,0001,0001,08'     STATUS=SHR\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNDISP   AIF ('&NDISP' EQ '').TUCDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNDIS#\n&NM.NDISP  DS  XL7                      NORMAL DISP\n           AGO .TUCDISP\n.TUNDIS#   AIF ('&NDISP' NE 'UNCATLG').TUNDIS2\n&NM.NDISP  DC  X'0005,0001,0001,01'     NORMAL DISP=UNCATLG\n           AGO .TUCDISP\n.TUNDIS2   AIF ('&NDISP' NE 'CATLG').TUNDIS4\n&NM.NDISP  DC  X'0005,0001,0001,02'     NORMAL DISP=CATLG\n           AGO .TUCDISP\n.TUNDIS4   AIF ('&NDISP' NE 'DELETE').TUNDIS8\n&NM.NDISP  DC  X'0005,0001,0001,04'     NORMAL DISP=DELETE\n           AGO .TUCDISP\n.TUNDIS8   AIF ('&NDISP' NE 'KEEP').TUCDISP\n&NM.NDISP  DC  X'0005,0001,0001,08'     NORMAL DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCDISP   AIF ('&CDISP' EQ '').TUTRK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCDIS#\n&NM.CDISP  DS  XL7                      COND DISP\n           AGO .TUTRK\n.TUCDIS#   AIF ('&CDISP' NE 'UNCATLG').TUCDIS2\n&NM.CDISP  DC  X'0006,0001,0001,01'     COND DISP=UNCATLG\n           AGO .TUTRK\n.TUCDIS2   AIF ('&CDISP' NE 'CATLG').TUCDIS4\n&NM.CDISP  DC  X'0006,0001,0001,02'     COND DISP=CATLG\n           AGO .TUTRK\n.TUCDIS4   AIF ('&CDISP' NE 'DELETE').TUCDIS8\n&NM.CDISP  DC  X'0006,0001,0001,04'     COND DISP=DELETE\n           AGO .TUTRK\n.TUCDIS8   AIF ('&CDISP' NE 'KEEP').TUTRK\n&NM.CDISP  DC  X'0006,0001,0001,08'     COND DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTRK     AIF ('&TRK' EQ '').TUCYL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTRKA\n&NM.TRK    DS  XL4                      TRK\n           AGO .TUCYL\n.TUTRKA    ANOP\n&NM.TRK    DC  X'0007,0000'             TRK\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCYL     AIF ('&CYL' EQ '').TUBLKLN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCYLA\n&NM.CYL    DS  XL4                      CYL\n           AGO .TUBLKLN\n.TUCYLA    ANOP\n&NM.CYL    DC  X'0008,0000'             CYL\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKLN   AIF ('&BLKLN' EQ '').TUPRIME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKL#\n           DS  XL6\n&NM.BLKLN  DS  AL3                      AVERAGE BLOCK LENGTH\n           AGO .TUPRIME\n.TUBLKL#   ANOP\n           DC  X'0009,0001,0003'\n&NM.BLKLN  DC  AL3(&BLKLN)              AVERAGE BLOCK LENGTH\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIME   AIF ('&PRIME' EQ '').TUSECND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIM#\n           DS  XL6\n&NM.PRIME  DS  AL3                      PRIMARY SPACE QUANTITY\n           AGO .TUSECND\n.TUPRIM#   ANOP\n           DC  X'000A,0001,0003'\n&NM.PRIME  DC  AL3(&PRIME)              PRIMARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSECND   AIF ('&SECND' EQ '').TUDIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSECN#\n           DS  XL6\n&NM.SECND  DS  AL3                      SECONDARY SPACE QUANTITY\n           AGO .TUDIR\n.TUSECN#   ANOP\n           DC  X'000B,0001,0003'\n&NM.SECND  DC  AL3(&SECND)              SECONDARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDIR     AIF ('&DIR' EQ '').TURLSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDIRA\n           DS  XL6\n&NM.DIR    DS  AL3                      NUMBER OF DIRECTORY BLOCKS\n           AGO .TURLSE\n.TUDIRA    ANOP\n           DC  X'000C,0001,0003'\n&NM.DIR    DC  AL3(&DIR)                NUMBER OF DIRECTORY BLOCKS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURLSE    AIF ('&RLSE' EQ '').TUSPFRM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURLSEA\n&NM.RLSE   DS  XL4                      RLSE\n           AGO .TUSPFRM\n.TURLSEA   ANOP\n&NM.RLSE   DC  X'000D,0000'             RLSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPFRM   AIF ('&SPFRM' EQ '').TUROUND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPFR#\n&NM.SPFRM  DS  XL7                      SPACE FORMAT\n           AGO .TUROUND\n.TUSPFR#   AIF ('&SPFRM' NE 'ALX').TUSPFR4\n&NM.SPFRM  DC  X'000E,0001,0001,02'     ALX\n           AGO .TUROUND\n.TUSPFR4   AIF ('&SPFRM' NE 'MXIG').TUSPFR8\n&NM.SPFRM  DC  X'000E,0001,0001,04'     MXIG\n           AGO .TUROUND\n.TUSPFR8   AIF ('&SPFRM' NE 'CONTIG').TUROUND\n&NM.SPFRM  DC  X'000E,0001,0001,08'     CONTIG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUROUND   AIF ('&ROUND' EQ '').TUVLSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUROUN#\n&NM.ROUND  DS  XL4                      ROUND\n           AGO .TUVLSER\n.TUROUN#   ANOP\n&NM.ROUND  DC  X'000F,0000'             ROUND\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSER   AIF ('&VLSER' EQ '').TUPRIVT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSE#\n           DS  XL6\n&NM.VLSER  DS  CL6                      VOLUME SERIAL NUMBER\n           AGO .TUPRIVT\n.TUVLSE#   ANOP\n           DC  X'0010,0001,0006'                                MI04304\n&NM.VLSER  DC  CL6'&VLSER'              VOLUME SERIAL NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIVT   AIF ('&PRIVT' EQ '').TUVLSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIV#\n&NM.PRIVT  DS  XL4                      PVT\n           AGO .TUVLSEQ\n.TUPRIV#   ANOP\n&NM.PRIVT  DC  X'0011,0000'             PVT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSEQ   AIF ('&VLSEQ' EQ '').TUVLCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSQ#\n           DS  XL6\n&NM.VLSEQ  DS  AL2                      VOLUME SEQUENCE NUMBER\n           AGO .TUVLCNT\n.TUVLSQ#   ANOP\n           DC  X'0012,0001,0002'\n&NM.VLSEQ  DC  AL2(&VLSEQ)              VOLUME SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLCNT   AIF ('&VLCNT' EQ '').TUVLRDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLCN#\n           DS  XL6\n&NM.VLCNT  DC  AL1                      VOLUME COUNT\n           AGO .TUVLRDS\n.TUVLCN#   ANOP\n           DC  X'0013,0001,0001'\n&NM.VLCNT  DC  AL1(&VLCNT)              VOLUME COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLRDS   AIF ('&VLRDS' EQ '').TUUNIT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLRD#\n           DS  XL6\n&NM.VLRDS  DS  CL44                     VOLUME REF TO THIS DSN\n           AGO .TUUNIT\n.TUVLRD#   ANOP\n           DC  X'0014,0001,002C'        VOLUME REF TO DSN (BELOW)\n&NM.VLRDS  DC  CL44'&VLRDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNIT    AIF ('&UNIT' EQ '').TUUNCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNITA\n           DS  XL6\n&NM.UNIT   DS  CL6                      UNIT\n           AGO .TUUNCNT\n.TUUNITA   ANOP\n           DC  X'0015,0001,0006'\n&NM.UNIT   DC  CL6'&UNIT'               UNIT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNCNT   AIF ('&UNCNT' EQ '').TUPARAL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNCN#\n           DS  XL6\n&NM.UNCNT  DS  AL1                      UNIT COUNT\n           AGO .TUPARAL\n.TUUNCN#   ANOP\n           DC  X'0016,0001,0001'\n&NM.UNCNT  DC  AL1(&UNCNT)              UNIT COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPARAL   AIF ('&PARAL' EQ '').TUSYSOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPARA#\n&NM.PARAL  DS  XL4                      PARALLEL MOUNT\n           AGO .TUSYSOU\n.TUPARA#   ANOP\n&NM.PARAL  DC  X'0017,0000'             PARALLEL MOUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSYSOU   AIF ('&SYSOU' EQ '').TUSPGNM\n           AIF ('&SYSOU' NE '*').TUSYSO2\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYSO#\n&NM.SYSOU  DS  XL4                      SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO#   ANOP\n&NM.SYSOU  DC  X'0018,0000'             SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO2   ANOP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYS##\n           DS  XL6\n&NM.SYSOU  DS  CL1                      SYSOUT CLASS\n           AGO .TUSPGNM\n.TUSYS##   ANOP\n           DC  X'0018,0001,0001'\n&NM.SYSOU  DC  CL1'&SYSOU'              SYSOUT CLASS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPGNM   AIF ('&SPGNM' EQ '').TUSFMNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPGN#\n           DS  XL6\n&NM.SPGNM  DS  CL8                      SYSOUT PROGRAM NAME\n           AGO .TUSFMNO\n.TUSPGN#   ANOP\n           DC  X'0019,0001,0008'\n&NM.SPGNM  DC  CL8'&SPGNM'              SYSOUT PROGRAM NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSFMNO   AIF ('&SFMNO' EQ '').TUOUTLM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSFMN#\n           DS  XL6\n&NM.SFMNO  DS  CL4                      SYSOUT FORM NAME/NUMBER\n           AGO .TUOUTLM\n.TUSFMN#   ANOP\n           DC  X'001A,0001,0004'\n&NM.SFMNO  DC  CL4'&SFMNO'              SYSOUT FORM NAME/NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOUTLM   AIF ('&OUTLM' EQ '').TUCLOSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOUTL#\n           DS  XL6\n&NM.OUTLM  DS  AL3                      OUTLIM\n           AGO .TUCLOSE\n.TUOUTL#   ANOP\n           DC  X'001B,0001,0003'\n&NM.OUTLM  DC  AL3(&OUTLM)              OUTLIM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCLOSE   AIF ('&CLOSE' EQ '').TUCOPYS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCLOS#\n&NM.CLOSE  DS  XL4                      FREE=CLOSE\n           AGO .TUCOPYS\n.TUCLOS#   ANOP\n&NM.CLOSE  DC  X'001C,0000'             FREE=CLOSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCOPYS   AIF ('&COPYS' EQ '').TULABEL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCOPY#\n           DS  XL6\n&NM.COPYS  DS  AL1                      COPIES\n           AGO .TULABEL\n.TUCOPY#   ANOP\n           DC  X'001D,0001,0001'\n&NM.COPYS  DC  AL1(&COPYS)              COPIES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULABEL   AIF ('&LABEL' EQ '').TUDSSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULABE#\n&NM.LABEL  DS  XL7                      LABEL\n           AGO .TUDSSEQ\n.TULABE#   AIF ('&LABEL' NE 'NL').TULABE2\n&NM.LABEL  DC  X'001E,0001,0001,01'     LABEL=NL\n           AGO .TUDSSEQ\n.TULABE2   AIF ('&LABEL' NE 'SL').TULABE3\n&NM.LABEL  DC  X'001E,0001,0001,02'     LABEL=SL\n           AGO .TUDSSEQ\n.TULABE3   AIF ('&LABEL' NE 'NSL').TULABE4\n&NM.LABEL  DC  X'001E,0001,0001,04'     LABEL=NSL\n           AGO .TUDSSEQ\n.TULABE4   AIF ('&LABEL' NE 'SUL').TULABE5\n&NM.LABEL  DC  X'001E,0001,0001,0A'     LABEL=SUL\n           AGO .TUDSSEQ\n.TULABE5   AIF ('&LABEL' NE 'BLP').TULABE6\n&NM.LABEL  DC  X'001E,0001,0001,10'     LABEL=BLP\n           AGO .TUDSSEQ\n.TULABE6   AIF ('&LABEL' NE 'LTM').TULABE7\n&NM.LABEL  DC  X'001E,0001,0001,21'     LABEL=LTM\n           AGO .TUDSSEQ\n.TULABE7   AIF ('&LABEL' NE 'AL').TULABE8\n&NM.LABEL  DC  X'001E,0001,0001,40'     LABEL=AL\n           AGO .TUDSSEQ\n.TULABE8   AIF ('&LABEL' NE 'AUL').TUDSSEQ\n&NM.LABEL  DC  X'001E,0001,0001,48'     LABEL=AUL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSSEQ   AIF ('&DSSEQ' EQ '').TUPASPR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSSE#\n           DS  XL6\n&NM.DSSEQ  DS  AL2                      LABEL= DATASET SEQUENCE NUMBER\n           AGO .TUPASPR\n.TUDSSE#   ANOP\n           DC  X'001F,0001,0002'\n&NM.DSSEQ  DC  AL2(&DSSEQ)              LABEL= DATASET SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPASPR   AIF ('&PASPR' EQ '').TUINOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINOUT   AIF ('&INOUT' EQ '').TUEXPDT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOU#\n&NM.INOUT  DS  XL7                      LABEL=IN OR OUT\n           AGO .TUEXPDT\n.TUINOU#   AIF ('&INOUT' NE 'IN').TUINOU2\n&NM.INOUT  DC  X'0021,0001,0001,40'     LABEL=IN\n           AGO .TUEXPDT\n.TUINOU2   AIF ('&INOUT' NE 'OUT').TUEXPDT\n&NM.INOUT  DC  X'0021,0001,0001,80'     LABEL=OUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEXPDT   AIF ('&EXPDT' EQ '').TURETPD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEXPD#\n           DS  XL6\n&NM.EXPDT  DS  CL5                      EXPDT\n           AGO .TURETPD\n.TUEXPD#   ANOP\n           DC  X'0022,0001,0005'\n&NM.EXPDT  DC  CL5'&EXPDT'              EXPDT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURETPD   AIF ('&RETPD' EQ '').TUDUMMY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURETP#\n           DS  XL6\n&NM.RETPD  DS  AL2                      RETPD\n           AGO .TUDUMMY\n.TURETP#   ANOP\n           DC  X'0023,0001,0002'\n&NM.RETPD  DC  AL2(&RETPD)              RETPD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDUMMY   AIF ('&DUMMY' EQ '').TUFCBIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDUMM#\n&NM.DUMMY  DS  XL4                      DD DUMMY / DSN=NULLFILE\n           AGO .TUFCBIM\n.TUDUMM#   ANOP\n&NM.DUMMY  DC  X'0024,0000'             DD DUMMY / DSN=NULLFILE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBIM   AIF ('&FCBIM' EQ '').TUFCBAV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBI#\n           DS  XL6\n&NM.FCBIM  DS  CL4                      FCB\n           AGO .TUFCBAV\n.TUFCBI#   ANOP\n           DC  X'0025,0001,0004'\n&NM.FCBIM  DC  CL4'&FCBIM'              FCB\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBAV   AIF ('&FCBAV' EQ '').TUQNAME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBA#\n&NM.FCBAV  DS  XL7                      FCB VERIFY OR ALIGN\n           AGO .TUQNAME\n.TUFCBA#   AIF ('&FCBAV' NE 'VERIFY').TUFCBA2\n&NM.FCBAV  DC  X'0026,0001,0001,04'     FCB VERIFY\n           AGO .TUQNAME\n.TUFCBA2   AIF ('&FCBAV' NE 'ALIGN').TUQNAME\n&NM.FCBAV  DC  X'0026,0001,0001,08'     FCB ALIGN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUQNAME   AIF ('&QNAME' EQ '').TUTERM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTERM    AIF ('&TERM' EQ '').TUUCS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTERMA\n&NM.TERM   DS  XL4                      TERM=TS / DSN(*)\n           AGO .TUUCS\n.TUTERMA   ANOP\n&NM.TERM   DC  X'0028,0000'             TERM=TS / DSN(*)\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUCS     AIF ('&UCS' EQ '').TUUFOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUCSA\n           DS  XL6\n&NM.UCS    DS  CL4                      UCS CHARACTER SET\n           AGO .TUUFOLD\n.TUUCSA    ANOP\n           DC  X'0029,0001,0004'\n&NM.UCS    DC  CL4'&UCS'                UCS CHARACTER SET\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUFOLD   AIF ('&UFOLD' EQ '').TUUVRFY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUFOL#\n&NM.UFOLD  DS  XL4                      UCS FOLD\n           AGO .TUUVRFY\n.TUUFOL#   ANOP\n&NM.UFOLD  DC  X'002A,0000'             UCS FOLD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUVRFY   AIF ('&UVRFY' EQ '').TUDCBDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUVRF#\n&NM.UVRFY  DS  XL4                      UCS VERIFY\n           AGO .TUDCBDS\n.TUUVRF#   ANOP\n&NM.UVRFY  DC  X'002B,0000'             UCS VERIFY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDS   AIF ('&DCBDS' EQ '').TUDCBDD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBS#\n           DS  XL6\n&NM.DCBDS  DS  CL44                     DCB REFERENCE TO DSN\n           AGO .TUDCBDD\n.TUDCBS#   ANOP\n           DC  X'002C,0001,0003'        DCB REFERENCE TO DSN (BELOW)\n&NM.DCBDS  DC  CL44'&DCBDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDD   AIF ('&DCBDD' EQ '').TUSUSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBD#\n           DS  XL6\n&NM.DCBDD  DS  CL8                      DCB REFERENCE TO DDNAME\n           AGO .TUSUSER\n.TUDCBD#   ANOP\n           DC  X'002D,0001,0008'\n&NM.DCBDD  DC  CL8'&DCBDD'              DCB REFERENCE TO DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSUSER   AIF ('&SUSER' EQ '').TUSHOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSUSE#\n           DS  XL6\n&NM.SUSER  DS  CL8                      SYSOUT DESTINATION\n           AGO .TUSHOLD\n.TUSUSE#   ANOP\n           DC  X'0058,0001,0008'\n&NM.SUSER  DC  CL8'&SUSER'              SYSOUT DESTINATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSHOLD   AIF ('&SHOLD' EQ '').TUMSVGP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSHOL#\n&NM.SHOLD  DS  XL4                      SYSOUT HOLD=YES\n           AGO .TUMSVGP\n.TUSHOL#   ANOP\n&NM.SHOLD  DC  X'0059,0000'             SYSOUT HOLD=YES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMSVGP   AIF ('&MSVGP' EQ '').TUSSNM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSNM    AIF ('&SSNM' EQ '').TUSSPRM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSPRM   AIF ('&SSPRM' EQ '').TUPROT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPROT    AIF ('&PROT' EQ '').TUBFALN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.*\n.*********************************************************************\n.***          DCB ATTRIBUTE TEXT UNITS - VERB CODE 01              ***\n.*********************************************************************\n.*\n.TUBFALN   AIF ('&BFALN' EQ '').TUBFTEK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFAL#\n&NM.BFALN  DS  XL7                      BFALN\n           AGO .TUBFTEK\n.TUBFAL#   AIF ('&BFALN' NE 'F').TUBFAL2\n&NM.BFALN  DC  X'002E,0001,0001,01'     BFALN=F\n           AGO .TUBFTEK\n.TUBFAL2   AIF ('&BFALN' NE 'D').TUBFTEK                        MI04303\n&NM.BFALN  DC  X'002E,0001,0001,02'     BFALN=D\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBFTEK   AIF ('&BFTEK' EQ '').TUBLKSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFTE#\n&NM.BFTEK  DS  XL7                      BFTEK\n           AGO .TUBLKSZ\n.TUBFTE#   AIF ('&BFTEK' NE 'D').TUBFTE2\n&NM.BFTEK  DC  X'002F,0001,0001,08'     BFTEK=D\n           AGO .TUBLKSZ\n.TUBFTE2   AIF ('&BFTEK' NE 'E').TUBFTE3\n&NM.BFTEK  DC  X'002F,0001,0001,10'     BFTEK=E\n           AGO .TUBLKSZ\n.TUBFTE3   AIF ('&BFTEK' NE 'R').TUBFTE4\n&NM.BFTEK  DC  X'002F,0001,0001,20'     BFTEK=R\n           AGO .TUBLKSZ\n.TUBFTE4   AIF ('&BFTEK' NE 'S').TUBFTE5\n&NM.BFTEK  DC  X'002F,0001,0001,40'     BFTEK=S\n           AGO .TUBLKSZ\n.TUBFTE5   AIF ('&BFTEK' NE 'A').TUBLKSZ\n&NM.BFTEK  DC  X'002F,0001,0001,60'     BFTEK=A\n           AGO .TUBLKSZ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKSZ   AIF ('&BLKSZ' EQ '').TUBUFIN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKS#\n           DS  XL6\n&NM.BLKSZ  DS  AL2                      BLKSIZE\n           AGO .TUBUFIN\n.TUBLKS#   ANOP\n           DC  X'0030,0001,0002'\n&NM.BLKSZ  DC  AL2(&BLKSZ)              BLKSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFIN   AIF ('&BUFIN' EQ '').TUBUFL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFI#\n           DS  XL6\n&NM.BUFIN  DS  AL1                      BUFIN\n           AGO .TUBUFL\n.TUBUFI#   ANOP\n           DC  X'0031,0001,0001'\n&NM.BUFIN  DC  AL1(&BUFIN)              BUFIN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFL    AIF ('&BUFL' EQ '').TUBUFMX\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFLA\n           DS  XL6\n&NM.BUFL   DC  AL2                      BUFL\n           AGO .TUBUFMX\n.TUBUFLA   ANOP\n           DC  X'0032,0001,0002'\n&NM.BUFL   DC  AL2(&BUFL)               BUFL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFMX   AIF ('&BUFMX' EQ '').TUBUFNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFM#\n           DS  XL6\n&NM.BUFMX  DS  AL1                      BUFMAX\n           AGO .TUBUFNO\n.TUBUFM#   ANOP\n           DC  X'0033,0001,0001'\n&NM.BUFMX  DC  AL1(&BUFMX)              BUFMAX\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFNO   AIF ('&BUFNO' EQ '').TUBUFOF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFN#\n           DS  XL6\n&NM.BUFNO  DC  AL1                      BUFNO\n           AGO .TUBUFOF\n.TUBUFN#   ANOP\n           DC  X'0034,0001,0001'\n&NM.BUFNO  DC  AL1(&BUFNO)              BUFNO\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOF   AIF ('&BUFOF' EQ '').TUBUFOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&BUFOF' NE 'L').TUBUFO2\n           AIF ('&MAP' NE 'ONLY').TUBUFF#\n&NM.BUFOF  DS  XL7                      BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFF#   ANOP\n&NM.BUFOF  DC  X'0035,0001,0001,80'     BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFO2   ANOP\n           AIF ('&MAP' NE 'ONLY').TUBUF##\n           DS  XL6\n&NM.BUFOF  DS  AL1                      BUFOFF\n           AGO .TUBUFOU\n.TUBUF##   ANOP\n           DC  X'0035,0001,0001'\n&NM.BUFOF  DC  AL1(&BUFOF)              BUFOFF\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOU   AIF ('&BUFOU' EQ '').TUBUFRQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFO#\n           DS  XL6\n&NM.BUFOU  DS  AL1                      BUFOUT\n           AGO .TUBUFRQ\n.TUBUFO#   ANOP\n           DC  X'0036,0001,0001'\n&NM.BUFOU  DC  AL1(&BUFOU)              BUFOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFRQ   AIF ('&BUFRQ' EQ '').TUBUFSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFR#\n           DS  XL6\n&NM.BUFRQ  DS  AL1                      BUFRQ\n           AGO .TUBUFSZ\n.TUBUFR#   ANOP\n           DC  X'0037,0001,0001'\n&NM.BUFRQ  DC  AL1(&BUFRQ)              BUFRQ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFSZ   AIF ('&BUFSZ' EQ '').TUCODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFS#\n           DS  XL6\n&NM.BUFSZ  DS  AL2                      BUFSIZE\n           AGO .TUCODE\n.TUBUFS#   ANOP\n           DC  X'0038,0001,0002'\n&NM.BUFSZ  DC  AL2(&BUFSZ)              BUFSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCODE    AIF ('&CODE' EQ '').TUCPRI\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCPRI    AIF ('&CPRI' EQ '').TUDEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDEN     AIF ('&DEN' EQ '').TUDSORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDENA\n&NM.DEN    DS  XL7                      DEN\n           AGO .TUDSORG\n.TUDENA    AIF ('&DEN' NE '0').TUDE2\n&NM.DEN    DC  X'003B,0001,0001,03'     DEN=0  (200 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE2     AIF ('&DEN' NE '1').TUDE3\n&NM.DEN    DC  X'003B,0001,0001,43'     DEN=1  (556 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE3     AIF ('&DEN' NE '2').TUDE4\n&NM.DEN    DC  X'003B,0001,0001,83'     DEN=2  (800 BPI, 7/9-TRACK)\n           AGO .TUDSORG\n.TUDE4     AIF ('&DEN' NE '3').TUDE5\n&NM.DEN    DC  X'003B,0001,0001,C3'     DEN=3  (1600 BPI, 9-TRACK)\n           AGO .TUDSORG\n.TUDE5     AIF ('&DEN' NE '4').TUDSORG\n&NM.DEN    DC  X'003B,0001,0001,D3'     DEN=4  (6250 BPI, 9-TRACK)\n           AGO .TUDSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSORG   AIF ('&DSORG' EQ '').TUEROPT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSOR#\n&NM.DSORG  DS  XL8                      DSORG\n           AGO .TUEROPT\n.TUDSOR#   AIF ('&DSORG' NE 'VS').TUDSOR2\n&NM.DSORG  DC  X'003C,0001,0002,0008'   DSORG=VS\n           AGO .TUEROPT\n.TUDSOR2   AIF ('&DSORG' NE 'TQ').TUDSOR3\n&NM.DSORG  DC  X'003C,0001,0002,0020'   DSORG=TQ\n           AGO .TUEROPT\n.TUDSOR3   AIF ('&DSORG' NE 'TX').TUDSOR4\n&NM.DSORG  DC  X'003C,0001,0002,0040'   DSORG=TX\n           AGO .TUEROPT\n.TUDSOR4   AIF ('&DSORG' NE 'GS').TUDSOR5\n&NM.DSORG  DC  X'003C,0001,0002,0080'   DSORG=GS\n           AGO .TUEROPT\n.TUDSOR5   AIF ('&DSORG' NE 'PO').TUDSOR6\n&NM.DSORG  DC  X'003C,0001,0002,0200'   DSORG=PO\n           AGO .TUEROPT\n.TUDSOR6   AIF ('&DSORG' NE 'POU').TUDSOR7\n&NM.DSORG  DC  X'003C,0001,0002,0300'   DSORG=POU\n           AGO .TUEROPT\n.TUDSOR7   AIF ('&DSORG' NE 'MQ').TUDSOR8\n&NM.DSORG  DC  X'003C,0001,0002,0400'   DSORG=MQ\n           AGO .TUEROPT\n.TUDSOR8   AIF ('&DSORG' NE 'CQ').TUDSOR9\n&NM.DSORG  DC  X'003C,0001,0002,0800'   DSORG=CQ\n           AGO .TUEROPT\n.TUDSOR9   AIF ('&DSORG' NE 'CX').TUDSORA\n&NM.DSORG  DC  X'003C,0001,0002,1000'   DSORG=CX\n           AGO .TUEROPT\n.TUDSORA   AIF ('&DSORG' NE 'DA').TUDSORB\n&NM.DSORG  DC  X'003C,0001,0002,2000'   DSORG=DA\n           AGO .TUEROPT\n.TUDSORB   AIF ('&DSORG' NE 'DAU').TUDSORC\n&NM.DSORG  DC  X'003C,0001,0002,2100'   DSORG=DAU\n           AGO .TUEROPT\n.TUDSORC   AIF ('&DSORG' NE 'PS').TUDSORD\n&NM.DSORG  DC  X'003C,0001,0002,4000'   DSORG=PS\n           AGO .TUEROPT\n.TUDSORD   AIF ('&DSORG' NE 'PSU').TUEROPT\n&NM.DSORG  DC  X'003C,0001,0002,4100'   DSORG=PSU\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEROPT   AIF ('&EROPT' EQ '').TUGNCP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEROP#\n&NM.EROPT  DS  XL7                      EROPT\n           AGO .TUGNCP\n.TUEROP#   AIF ('&EROPT' NE 'T').TUEROP2\n&NM.EROPT  DC  X'003D,0001,0001,10'     EROPT=T\n           AGO .TUGNCP\n.TUEROP2   AIF ('&EROPT' NE 'ABE').TUEROP3\n&NM.EROPT  DC  X'003D,0001,0001,20'     EROPT=ABE\n           AGO .TUGNCP\n.TUEROP3   AIF ('&EROPT' NE 'SKP').TUEROP4\n&NM.EROPT  DC  X'003D,0001,0001,40'     EROPT=SKP\n           AGO .TUGNCP\n.TUEROP4   AIF ('&EROPT' NE 'ACC').TUGNCP\n&NM.EROPT  DC  X'003D,0001,0001,80'     EROPT=ACC\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUGNCP    AIF ('&GNCP' EQ '').TUINTVL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUGNCPA\n           DS  XL6\n&NM.GNCP   DC  AL1                      GNCP\n           AGO .TUINTVL\n.TUGNCPA   ANOP\n           DC  X'003E,0001,0001'                                MI04303\n&NM.GNCP   DC  AL1(&GNCP)               GNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINTVL   AIF ('&INTVL' EQ '').TUKYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUKYLEN   AIF ('&KYLEN' EQ '').TULIMCT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUKYLE#\n           DS  XL6\n&NM.KYLEN  DS  AL1                      KEYLEN\n           AGO .TULIMCT\n.TUKYLE#   ANOP\n           DC  X'0040,0001,0001'\n&NM.KYLEN  DC  AL1(&KYLEN)              KEYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULIMCT   AIF ('&LIMCT' EQ '').TULRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULRECL   AIF ('&LRECL' EQ '').TUMODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULREC#\n           DS  XL6\n&NM.LRECL  DS  AL2                      LRECL\n           AGO .TUMODE\n.TULREC#   ANOP\n           DC  X'0042,0001,0002'\n&NM.LRECL  DC  AL2(&LRECL)              LRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMODE    AIF ('&MODE' EQ '').TUNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNCP     AIF ('&NCP' EQ '').TUOPTCD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNCPA\n           DS  XL6\n&NM.NCP    DS  AL1                      NCP\n           AGO .TUOPTCD\n.TUNCPA    ANOP\n           DC  X'0044,0001,0001'\n&NM.NCP    DC  AL1(&NCP)                NCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOPTCD   AIF ('&OPTCD' EQ '').TUPCIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOPTC#\n&NM.OPTCD  DS  XL7                      OPTCD\n           AGO .TUPCIR\n.TUOPTC#   AIF ('&OPTCD' NE 'W').TUPCIR\n&NM.OPTCD  DC  X'0045,0001,0001,80'     OPTCD=W\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIR    AIF ('&PCIR' EQ '').TUPCIS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIS    AIF ('&PCIS' EQ '').TUPRTSP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRTSP   AIF ('&PRTSP' EQ '').TURECFM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRTS#\n&NM.PRTSP  DS  XL7                      PRTSP\n           AGO .TURECFM\n.TUPRTS#   AIF ('&PRTSP' NE '0').TUPRTS2\n&NM.PRTSP  DC  X'0048,0001,0001,01'     PRTSP=0\n           AGO .TURECFM\n.TUPRTS2   AIF ('&PRTSP' NE '1').TUPRTS3\n&NM.PRTSP  DC  X'0048,0001,0001,09'     PRTSP=1\n           AGO .TURECFM\n.TUPRTS3   AIF ('&PRTSP' NE '2').TUPRTS4\n&NM.PRTSP  DC  X'0048,0001,0001,11'     PRTSP=2\n           AGO .TURECFM\n.TUPRTS4   AIF ('&PRTSP' NE '3').TURECFM\n&NM.PRTSP  DC  X'0048,0001,0001,19'     PRTSP=3\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURECFM   AIF ('&RECFM' EQ '').TURSRVF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURECF#\n&NM.RECFM  DS  XL7                      RECFM=F\n           AGO .TURSRVF\n.TURECF#   AIF ('&RECFM' NE 'F').TURECF2\n&NM.RECFM  DC  X'0049,0001,0001,80'     RECFM=F\n           AGO .TURSRVF\n.TURECF2   AIF ('&RECFM' NE 'FA').TURECF3\n&NM.RECFM  DC  X'0049,0001,0001,84'     RECFM=FA\n           AGO .TURSRVF\n.TURECF3   AIF ('&RECFM' NE 'FB').TURECF4\n&NM.RECFM  DC  X'0049,0001,0001,90'     RECFM=FB\n           AGO .TURSRVF\n.TURECF4   AIF ('&RECFM' NE 'FBA').TURECF5\n&NM.RECFM  DC  X'0049,0001,0001,94'     RECFM=FBA\n           AGO .TURSRVF\n.TURECF5   AIF ('&RECFM' NE 'V').TURECF6\n&NM.RECFM  DC  X'0049,0001,0001,40'     RECFM=V\n           AGO .TURSRVF\n.TURECF6   AIF ('&RECFM' NE 'VB').TURECF7\n&NM.RECFM  DC  X'0049,0001,0001,50'     RECFM=VB\n           AGO .TURSRVF\n.TURECF7   AIF ('&RECFM' NE 'U').TURSRVF\n&NM.RECFM  DC  X'0049,0001,0001,C0'     RECFM=U\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURSRVF   AIF ('&RSRVF' EQ '').TURSRVS\n.TURSRVS   AIF ('&RSRVS' EQ '').TUSOWA\n.TUSOWA    AIF ('&SOWA' EQ '').TUSTACK\n.TUSTACK   AIF ('&STACK' EQ '').TUTHRSH\n.TUTHRSH   AIF ('&THRSH' EQ '').TUTRTCH\n.TUTRTCH   AIF ('&TRTCH' EQ '').TUIPLTX\n.TUIPLTX   AIF ('&IPLTX' EQ '').TUDIAGN\n.TUDIAGN   AIF ('&DIAGN' EQ '').TUFUNC\n.TUFUNC    AIF ('&FUNC' EQ '').TUFRID\n.TUFRID    AIF ('&FRID' EQ '').TUPASSW\n.*\n.*********************************************************************\n.***       NON-JCL DYNAMIC ALLOCATION FUNCTIONS - VERB CODE 01     ***\n.*********************************************************************\n.*\n.TUPASSW   AIF ('&PASSW' EQ '').TUPERMA\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPERMA   AIF ('&PERMA' EQ '').TUCNVRT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPERM#\n&NM.PERMA  DS  XL4                      PERMANENT ALLOCATION\n           AGO .TUCNVRT\n.TUPERM#   ANOP\n&NM.PERMA  DC  X'0052,0000'             PERMANENT ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCNVRT   AIF ('&CNVRT' EQ '').TURTDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCNVR#\n&NM.CNVRT  DS  XL4                      CONVERTABLE ALLOCATION\n           AGO .TURTDDN\n.TUCNVR#   ANOP\n&NM.CNVRT  DC  X'0053,0000'             CONVERTABLE ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDDN   AIF ('&RTDDN' EQ '').TURTDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.RTDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TURTDSN\n.TURTDD#   ANOP\n           DC  X'0055,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.RTDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDSN   AIF ('&RTDSN' EQ '').TURTORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.RTDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TURTORG\n.TURTDS#   ANOP\n           DC  X'0056,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.RTDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTORG   AIF ('&RTORG' EQ '').TURTVOL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTOR#\n           DS  XL6\n&NM.RTORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTVOL\n.TURTOR#   DC  X'0057,0001,0002'\n&NM.RTORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTVOL   AIF ('&RTVOL' EQ '').TUREMOV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTVO#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED VOLSER\n&NM.RTVOL  DS  CL6                      RETURNED VOLSER\n           AGO .TUREMOV\n.TURTVO#   ANOP\n           DC  X'005D,0001'\n           DC  XL2'0006'                LEN OF RETURNED VOLSER\n&NM.RTVOL  DC  CL6' '                   RETURNED VOLSER\n.*\n.*********************************************************************\n.***       UNALLOCATE - VERB CODE 02                               ***\n.*********************************************************************\n.*\n.TUREMOV   AIF ('&REMOV' EQ '').TUUNALC\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUREMO#\n&NM.REMOV  DS  XL4                      REMOVE INUSE EVEN IF PERMANENT\n           AGO .TUUNALC\n.TUREMO#   ANOP\n&NM.REMOV  DC  X'0008,0000'             REMOVE INUSE EVEN IF PERMANENT\n.*\n.TUUNALC   AIF ('&UNALC' EQ '').TUTCBAD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNAL#\n&NM.UNALC  DS  XL4                      UNALLOCATE EVEN IF PERMANENT\n           AGO .TUTCBAD\n.TUUNAL#   ANOP\n&NM.UNALC  DC  X'0007,0000'             UNALLOCATE EVEN IF PERMANENT\n.*\n.*********************************************************************\n.***       REMOVE IN-USE ATTRIBUTE - VERB CODE 05                  ***\n.*********************************************************************\n.*\n.TUTCBAD   AIF ('&TCBAD' EQ '').TUINDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTCBA#\n           DS  XL6\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n           AGO .TUINDDN\n.TUTCBA#   ANOP\n           DC  X'0001,0001,0004'\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n.*\n.*********************************************************************\n.***       RETURN INFORMATION - VERB CODE 07                       ***\n.*********************************************************************\n.*\n.TUINDDN   AIF ('&INDDN' EQ '').TUINDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.INDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TUINDSN\n.TUINDD#   ANOP\n           DC  X'0004,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.INDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINDSN   AIF ('&INDSN' EQ '').TUINORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.INDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TUINORG\n.TUINDS#   ANOP\n           DC  X'0005,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.INDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINORG   AIF ('&INORG' EQ '').TURTMEM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOR#\n           DS  XL6\n&NM.INORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTMEM\n.TUINOR#   DC  X'000A,0001,0002'\n&NM.INORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTMEM   AIF ('&RTMEM' EQ '').TURTSTA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTME#\n           DS  XL6\n&NM.RTMEM  DS  CL8                      RETURNED MEMBER NAME\n           AGO .TURTSTA\n.TURTME#   ANOP\n           DC  X'0006,0001,0008'\n&NM.RTMEM  DC  CL8' '                   RETURNED MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTSTA   AIF ('&RTSTA' EQ '').TURTNDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTST#\n           DS  XL6\n&NM.RTSTA  DS  XL1                      RETURNED DATASET STATUS\n           AGO .TURTNDP\n.TURTST#   ANOP\n           DC  X'0007,0001,0001'\n&NM.RTSTA  DS  XL1'00'                  RETURNED DATASET STATUS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTNDP   AIF ('&RTNDP' EQ '').TURTCDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTND#\n           DS  XL6\n&NM.RTNDP  DS  XL1                      RETURNED NORMAL DISP\n           AGO .TURTCDP\n.TURTND#   ANOP\n           DC  X'0008,0001,0001'\n&NM.RTNDP  DS  XL1'00'                  RETURNED NORMAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTCDP   AIF ('&RTCDP' EQ '').TURTLIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTCD#\n           DS  XL6\n&NM.RTCDP  DS  XL1                      RETURNED CONDITIONAL DISP\n           AGO .TURTLIM\n.TURTCD#   ANOP\n           DC  X'0009,0001,0001'\n&NM.RTCDP  DS  XL1'00'                  RETURNED CONDITIONAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLIM   AIF ('&RTLIM' EQ '').TURTATT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLI#\n           DS  XL6\n&NM.RTLIM  DS  XL2                      RETURNED LIMIT SPECIFICATION\n           AGO .TURTATT\n.TURTLI#   ANOP\n           DC  X'000B,0001,0002'\n&NM.RTLIM  DS  XL2'0000'                RETURNED LIMIT SPECIFICATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTATT   AIF ('&RTATT' EQ '').TURTLST\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTAT#\n           DS  XL6\n&NM.RTATT  DS  XL1                      RETURNED D.A. ATTRIBUTE\n           AGO .TURTLST\n.TURTAT#   ANOP\n           DC  X'000C,0001,0001'\n&NM.RTATT  DS  XL1'00'                  RETURNED D.A. ATTRIBUTE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLST   AIF ('&RTLST' EQ '').TURTTYP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLS#\n           DS  XL6\n&NM.RTLST  DS  XL1                      RETURNED LAST ENTRY SPEC.\n           AGO .TURTTYP\n.TURTLS#   ANOP\n           DC  X'000D,0001,0001'\n&NM.RTLST  DS  XL1'00'                  RETURNED LAST ENTRY SPEC.\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTTYP   AIF ('&RTTYP' EQ '').TURELNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTTY#\n           DS  XL6\n&NM.RTTYP  DS  XL1                      RETURNED DATASET TYPE\n           AGO .TURELNO\n.TURTTY#   ANOP\n           DC  X'000E,0001,0001'\n&NM.RTTYP  DS  XL1'00'                  RETURNED DATASET TYPE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURELNO   AIF ('&RELNO' EQ '').TUENDM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURELN#\n           DS  XL6\n&NM.RELNO  DS  XL2                      RETURNED RELATIVE REQUEST NO.\n           AGO .TUENDM\n.TURELN#   ANOP\n           DC  X'000F,0001,0002'\n&NM.RELNO  DS  XL2'0000'                RETURNED RELATIVE REQUEST NO.\n.*\n.*********************************************************************\n.***       MARK END OF LIST OF TEXT UNITS                          ***\n.*********************************************************************\n.*\n.TUENDM    AIF ('&MAP' NE 'ONLY').TUENDU#\n           DS  XL1                      END OF LIST MARKER\n           AGO .TUEND\n.TUENDU#   ANOP\n           DC  X'FF'                    END OF LIST MARKER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEND     ANOP\n.*\n**********************************************************************\n***        REQUEST BLOCKS FOR SVC99                                ***\n**********************************************************************\n*\n&NM.RBP    DS  A                        POINTER TO REQUEST BLOCK\n&NM.RB     DS  5A                       REQUEST BLOCK\n&NM.TUPL   DS  &TUPLEN.A                TEXT UNIT POINTER LIST\n*\n**********************************************************************\n***        DAIRFAIL PARAMETER BLOCK & MISCELLANEOUS STORAGE        ***\n**********************************************************************\n*\n&NM.DFPRM  DS  6F                       PARM BLOCK FOR IKJEFF18\n*\n&NM.S99RC  DS  F                        STORAGE AREA FOR SVC 99 R/C\n           AIF ('&MAP' NE 'ONLY').DF2\n&NM.F02EP  DS  F                        STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DS  XL2                      DAIRFAIL SWITCHES & CALLER ID\n           AGO .DF3\n.DF2       ANOP\n&NM.F02EP  DC  F'0'                     STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DC  X'0032'                  DAIRFAIL SWITCHES & CALLER ID\n.DF3       ANOP\n*\n**********************************************************************\n***        EQUATE FOR TOTAL LENGTH                                 ***\n**********************************************************************\n*\n           DS  0D                       ALIGN FOR GETMAIN\n&NM.LEN    EQU *-&NM                    TOTAL LENGTH\n           MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDADOC": {"ttr": 1796, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEDADOC\n*\n*  +----------------------------------------------------------------+\n*  |  This is an explanation of the GTE Dynamic Allocation macros.  |\n*  |                                                                |\n*  |         Chuck Hoffman                                          |\n*  |         Systems Programming                                    |\n*  |         GTE Laboratories - Technical Computation Center        |\n*  |         40 Sylvan Road                                         |\n*  |         Waltham, MA  02254                                     |\n*  |                               617/466-2131  v/n 679-2131       |\n*  +----------------------------------------------------------------+\n*\n* PURPOSE:\n*     DAIR/IKJDAIR is now being maintained only for compatability with\n* older programs.  IBM states that all new applications should be\n* written using SVC-99 rather than DAIR.  The purpose of these macros\n* is to make the use of SVC-99 and IKJEFF18 (DAIRFAIL messages) easy\n* from assembler programs.\n*\n* REFERENCE:\n*     The user of these routines should have available the IBM manual:\n* 'GC28-0627, OS/VS2 MVS Systems Programming Library:  Job Management'\n* which describes SVC-99.  A detailed knowledge of SVC-99 is not\n* necessary.\n*\n* FUNCTION:\n*     GTEDADAT - Allocates space at assembly time for control blocks.\n*                Generates literals and constants.\n*     GTEDASET - Initializes control blocks at exection time.\n*     GTEDAALC - Invokes SVC-99 and IKJEFF18.\n*\n*\n* GTEDADAT - creating control blocks.\n*\n* 1.  The name of the control blocks is limited to three characters,\n*     because it is used as a prefix for data items in the generated\n*     control blocks.\n*                okay:  ABC      GTEDADAT ...\n*                  no:  ABCD     GTEDADAT ...\n*\n* 2.  The use of MAP=ONLY will produce DS entries without initializing\n*     the contents of the blocks.\n*          DC entries:  ABC      GTEDADAT ...\n*          DS entries:  ABC      GTEDADAT MAP=ONLY,...\n*\n* 3.  The names of text unit operands are the same as those used in the\n*     'Job Management' manual.  For instance, DSNAM and DDNAM rather\n*     than DSNAME and DDNAME.  By limiting operands to five characters,\n*     labels can be created using the 3-character block name as a\n*     prefix, followed by the 5-character (max) operand name.  The\n*     dataset name in the example in 2, above, would be labeled\n*     ABCDSNAM.\n*           -------------------------------------------------\n*           ---  There is one exception because IBM uses  ---\n*           ---  the same last 5 characters for infor-    ---\n*           ---  mation retrieval with two different      ---\n*           ---  SVC-99 verb codes.  If using the DSN     ---\n*           ---  Allocation SVC-99 verb (X'01') use the   ---\n*           ---  IBM names on the left.  If using the     ---\n*           ---  Information Retrieval SVC-99 verb (X'07')---\n*           ---  use the GTE names on the right:          ---\n*           ---                                           ---\n*           ---     DSN Alloc.        Info. Retrieval     ---\n*           ---       RTDDN              INDDN            ---\n*           ---       RTDSN              INDSN            ---\n*           ---       RTORG              INORG            ---\n*           -------------------------------------------------\n*\n* 4.  Text unit operands come in three flavors (refer to 'Job\n*     Management')\n*\n*     A.  Those for which an explicit value is supplied, e.g. DDNAME.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*\n*     B.  Those which are either on or off:  e.g. Space type TRK\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*         ----------------------------------------------------------\n*         ---  Note.  Information retrieval is in this category. ---\n*         ----------------------------------------------------------\n*\n*     C.  Those for which there is a choice which can be coded,\n*         e.g. Dataset organization.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES,DSORG=PS\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*                    +ADCDSORG DC     X'003C,0001,0002,4000'\n*\n*   NOTE 1. -\n*     Each operand generates a text unit which begins with a two-byte\n*     key.  Each operand generates a label.  The label may be at the\n*     key, as in ADCTRK and ADCDSORG, above, or it may be at the\n*     literal, as in ADCDDNAM, above.  Location of the label is based\n*     on a best guess of anticipated use of that text unit.\n*\n*   NOTE 2. -\n*     Setting a key value to X'0000' will cause SVC-99 to ignore that\n*     text unit.  After executing GTEDASET which builds a list of\n*     pointers to the text units, values in the text units can be\n*     changed at will.\n*\n*   NOTE 3. -\n*     At this time, not all operands generate executable code, and\n*     those which do may be in error.  If you discover errors or need\n*     new functions, call Systems Programming.\n*\n*\n* GTEDASET - setting addresses in control blocks\n*\n* 1.  This macro needs to be executed once before the GTEDAALC macro\n*     executes.  It simply links together the control blocks generated\n*     by GTEDADAT.  After this macro has been executed, there is no\n*     problem changing values in the control blocks.\n*\n* 2.  The CPPLPTR operand is the name of a fullword.  If the program is\n*     a TSO Command Processor, the fullword must contain the address of\n*     the Command Processor Parameter List (CPPL).  If the program is\n*     not a Command Processor, the fullword should contain the address\n*     of a fake CPPL, or ERRMSG=NO should be coded in the GTEDAALC\n*     macro (below).\n*\n*\n* GTEDAALC - executing SVC-99 and IKJEFF18\n*\n* 1.  This macro is executed once each time you want SVC-99 to\n*     execute.\n*\n* 2.  The choice of VERB= are as follows.  Again, keywords correspond\n*     to names in the 'Job Management' manual.\n*       VERB=AL  dsn allocation        VERB=UN  dsn or ddn unallocation\n*       VERB=CC  concatenation         VERB=DC  deconcatenation\n*       VERB=RI  remove in-use         VERB=DN  ddn allocation\n*       VERB=IN  information retrieveal\n*\n*     Concatenation and deconcatenation aren't yet supported, but they\n*     will be.\n*\n* 3.  This macro has the ERRMSG=NO operand to suppress creating code to\n*     return the SVC-99 failure messages to the TSO terminal.  Use this\n*     operand when the CPPLPTR operand of the GTEDASET macro points to\n*     a fullword which does not contain the address of a CPPL.  When\n*     this operand is used, the SVC-99 return code and the error and\n*     info codes are still available to your program.  Only the writing\n*     of an error message to the terminal is suppressed.  E.g.:\n*\n*                         GTEDAALC  ADC,VERB=AL,ERRMSG=NO\n*\n*     Places the return and error/info codes in these areas:\n*\n*               +ADCS99RC DS     F        SVC-99 RETURN CODE\n*\n*               +ADCERROR DS     H        SVC-99 ERROR CODE\n*               +ADCINFO  DS     H        SVC-99 INFO CODE\n*\n*     The error and info codes are contiguous, and the error code is\n*     aligned on a fullword boundry.\n*\n*\n* MAPPING MACROS:\n*     The following mapping macros must appear in the source.  Base\n* registers do not need to be assigned.\n*\n*     IEFZB4D0                             Maps SVC-99 blocks\n*     IKJEFFDF DFDSECT=YES,DFDSEC2=YES     Maps IKJEFF18 control blocks\n* ---------------------------------------------------------------------\n         EJECT\n* ---------------------------------------------------------------------\n*                        *** EXAMPLE ***\n*\n* We want to allocate member CURVES of CAH0.PDS.DATA to file FT12F001,\n* and we want to allocate member SPLINE of the same dataset to file\n* FT14F001.  Dataset status should be SHR, and sequential organization\n* will be used.  Further, we want the program to be reenterable, so all\n* variable data will be located in storage obtained with GETMAIN.\n*\n* Choose operands for the GTEDADAT macro by reference to the 'Job\n* Management' manual.\n*\n*\n*\n*             PRINT NOGEN\n*    EXMPL1   LINKSAVE BASE=12,GETMAIN=YES           LINKAGE CNVNTNS\n*             LR    5,1                              HOLD CPPL ADDRESS\n*             GETMAIN R,LV=1024                      GET WORK STORAGE\n*             LR    11,1                             ADDRESSABILITY OF\n*             USING AREA1,11                           WORK STORAGE\n*              .       .\n*             ST    5,CPPLADDR                       SAVE CPPL ADDRESS\n*              .       .\n*              .       .\n*             MVC   XYZ(XYZLEN),ABC                  COPY TO WORK AREA\n*             GTEDASET XYZ,CPPLPTR=CPPLADDR          SET POINTERS\n*              .       .\n*              .       .\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT12F001\n*              .       .\n*              .       .\n*             MVC   XYZMEMBR,=C'SPLINE  '            CHANGE MEMBER NME\n*             MVC   XYZDDNAM,=C'FT14F001'            CHANGE FILE NAME\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT14F001\n*              .       .\n*              .       .\n*    ENDUP    FREEMAIN R,LV=1024,A=(11)              FREE STORAGE\n*             XR    15,15                            ZERO R/C\n*             LINKBACK                               LINKAGE CNVNTNS\n*              .       .\n*              .       .\n*              .       .\n*    ABC      GTEDADAT DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,              X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*    AREA1    DSECT\n*    CPPLADDR DS    F\n*    XYZ      GTEDADAT MAP=ONLY,DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,     X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*             IEFZB4D0\n*             IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n*             END\n* ---------------------------------------------------------------------\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDASET": {"ttr": 1801, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEDASET &NM,&CPPLPTR=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   SET POINTERS AND DATA FOR DYNAMIC ALLOCATION IN DATA AREAS   ***\n***   CREATED BY MACRO GTEDADAT.                                   ***\n**********************************************************************\n*\n**********************************************************************\n***      PLACE ADDRESS OF S99RB INTO S99RBPTR.                     ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB                       ==> R1 POINTS TO S99RB\n         ST    1,&NM.RBP                          FILL IN S99RBPTR\n         OI    &NM.RBP,X'80'                      TURN ON HI BIT\n*\n**********************************************************************\n***      FILL IN S99RB REQUEST BLOCK.                              ***\n***      MAPPING MACRO IEFZB4D0 MUST APPEAR IN SOURCE.             ***\n**********************************************************************\n*\n         MVI   (S99RBLN-S99RB)(1),X'14'           FILL IN LENGTH\n         MVI   (S99VERB-S99RB)(1),X'00'           ZERO VERB CODE\n         XC    (S99FLAG1-S99RB)(4,1),(S99FLAG1-S99RB)(1)   ZERO FLAGS1\n         OI    (S99FLAG1-S99RB)(1),S99ONCNV       SET FLAGS1 OK CONVRT\n         OI    (S99FLAG1-S99RB)(1),S99NOMNT       SET FLAGS1 NO MOUNT\n         LA    2,&NM.TUPL                     ==> R2 POINTS TO TUPL\n         ST    2,(S99TXTPP-S99RB)(0,1)            TUPL ADDR INTO RB\n         XC    (S99FLAG2-S99RB)(4,1),(S99FLAG2-S99RB)(1)   ZERO FLAGS2\n*\n**********************************************************************\n***  BUILD TUPL.                                                   ***\n***  KEY OF LAST TEXT UNIT MUST BE X'FF..'                         ***\n**********************************************************************\n*\n         LA    1,&NM.TU                       ==> R1 POINTS TO TUNITS\n         XR    0,0                                CLEAR R0 FOR COUNTER\n         XR    15,15                              CLEAR R15 WORK REG\n*\nRBA&SYSNDX CLI (S99TUKEY-S99TUNIT)(1),X'FF'       IF KEY IS X'FF..'\n         BE    RBD&SYSNDX                           BRANCH OUT OF LOOP\n         ST    1,0(0,2)                           ADDR OF KEY TO TUPL\n         LA    2,4(0,2)                           INCR POINTER TO TUPL\n*\n         ICM   0,3,(S99TUNUM-S99TUNIT)(1)         TU NUM TO R0\n         LA    1,4(0,1)                           R1 POINTS BEYOND NUM\n         LTR   0,0                                IF TU NUM IS 0\n         BZ    RBA&SYSNDX                         PROCESS NEXT TU\n*\n         ICM   15,3,0(1)                          TU LEN TO R15\n         LA    1,2(15,1)                          PNT BEYND LEN & PARM\n         BCT   0,*-8                              DO FOR EACH LEN+PARM\n*\n         B     RBA&SYSNDX                         PROCESS NEXT TU\n*\nRBD&SYSNDX LA  15,4(0,0)                          POINT TO LAST\n         SR    2,15                                 TUPL ENTRY\n         OI    0(2),S99TUPLN                      MARK LAST TUPL ENTRY\n*\n**********************************************************************\n***  FILL IN THE DAIRFAIL PARAMETER BLOCK.                         ***\n***  IKJEFFDF DFDSECT=YES,DFDSEC2=YES MUST APPEAR IN SOURCE.       ***\n**********************************************************************\n*\n         MVC   &NM.DFPRM+(DFS99RBP-DFDSECTD)(4),&NM.RBP *PTR TO RB\n*\n         LA    1,&NM.S99RC\n         ST    1,&NM.DFPRM+(DFRCP-DFDSECTD)             *PTR TO S99RC\n*\n         LA    1,&NM.F02EP\n         ST    1,&NM.DFPRM+(DFJEFF02-DFDSECTD)          *PTR TO EP\n*\n         LA    1,&NM.ID\n         ST    1,&NM.DFPRM+(DFIDP-DFDSECTD)             *PTR TO SW+ID\n*\n         MVC   &NM.DFPRM+(DFCPPLP-DFDSECTD)(4),&CPPLPTR *PTR TO CPPL\n*\n         XC  &NM.DFPRM+(DFBUFP-DFDSECTD)(4),&NM.DFPRM+(DFBUFP-DFDSECTD)\n*                                                       *ZERO BUFF ADDR\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUAA0": {"ttr": 1804, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         MACRO\n&LABEL   TEXTBILD &AREA=,&TEXT=\n.*+-----------------------------------------------------------------+\n.*|  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   |\n.*|   E.G.                                                          |\n.*|           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    |\n.*|                                                                 |\n.*|  AVALUE   DC  H'5',C'ALPHA'                                     |\n.*|  BVALUE   DC  H'7',C'-BRAVO-'                                   |\n.*|  CVALUE   DC  H'7',C'CHARLIE'                                   |\n.*|                                                                 |\n.*|  OUTAREA  DS  CL80                                              |\n.*|                                                                 |\n.*|  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 |\n.*|  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       |\n.*|                                                                 |\n.*|  UPON COMPLETION:  R1  POINTS TO OUTAREA                        |\n.*|                    R15 HAS TOTAL LENGTH OF TEXT (19)            |\n.*|                                                                 |\n.*|  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      |\n.*|            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          |\n.*|        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      |\n.*+-----------------------------------------------------------------+\n         LCLA  &N1,&N2\n&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS\n&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND\n.*\n&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE\n         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS\n.*\n         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN\n.LOOP1   ANOP\n         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT\n         BCTR  1,0                        MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA\n         EX    1,*-6                    EXECUTE THE MOVE\n         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS\n&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND\n         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP\n.*\n         LA    1,&AREA                  R1 HAS ADDR OF AREA\n         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT\n.*\n         MEND\n*\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUAA0'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n*   THIS ROUTINE USES A LIST OF MEMBERS (SUCH AS PRODUCED BY PROGRAM\n*   GTEUAB0, OR THE LISTDS TSO COMMAND) TO PRODUCE PANVALET (PAN#1)\n*   CONTROL CARD IMAGES.\n*\n*   THE OUTPUT PRODUCED BY THIS PROGRAM BEGINS WITH:\n*           ++OPTION INPUT,PDS\n*           --CONTROL 0\n*\n*   THE INPUT TO THIS PROGRAM IS 80-BYTE CARD IMAGES IN THE FOLLOWING\n*   FORMAT:\n*    ....+....1....+....2....+....3....+....4\n*\n*      MEMBNAME (ALIAS)  PAN-COMMENT\n*      MEMBNAME (ALIAS)  PAN-COMMENT\n*      MEMBNAME (ALIAS)  PAN-COMMENT\n*\n*\n*     CC 03-10,  'MEMBNAME'    - NAME OF A MEMBER OF A PDS.\n*        12-18,  '(ALIAS)'     - BLANKS, OR A NON-ALPHANUMERIC LITERAL\n*                                WHICH WILL CAUSE INPUT TO BE BYPASSED.\n*        21-72,  'PAN-COMMENT' - BLANKS, OR A 52-BYTE PANVALET COMMENT,\n*                                EXPECTED TO BE STATS.\n*\n*   THIS PROGRAM PRODUCES THE FOLLOWING CARDS FOR EACH INPUT NAME:\n*\n*           --ADD NAME,DATA,NOFORMAT\n*           --COMMENT NAME,PAN-STATS  (OR 'INITIAL VERSION')\n*           --RENAME NAME,NAME01\n*\n*   BECAUSE OF PANVALET'S REQUIREMENT THAT ALL CHARACTERS IN A NAME BE\n*   ALPHANUMERIC, AND PANVALET'S INABILITY TO ASSIGN AN ALIAS, THIS\n*   PROGRAM WILL NOT USE THE FOLLOWING INPUT NAMES TO PRODUCE PANVALET\n*   CONTROL CARDS, AND WILL NOTE THE FACT IN THE ERROR REPORT:\n*\n*          MEMBNAME                ERROR\n*          ========                ===================================\n*          $SM                     NATIONAL CHARACTER\n*          LID@011                 NATIONAL CHARACTER\n*          PAN#1                   NATIONAL CHARACTER\n*          FILESTAT (ALIAS)        PARENTHESES (HANDLE ALIAS MANUALLY)\n*\n*          ABC DE                  WILL PRODUCE ABC01, SCAN STOPS\n*                                    ON FIRST BLANK\n*\n*   TO EXECUTE:\n*        //STEP1  EXEC  PGM=GTEUAA0\n*        //ERRORS  DD  SYSOUT=*\n*        //SYSUT1  DD  &&PANCARDS,UNIT=SYSDA,SPACE=(TRK,(1,1)),\n*        //            DISP=(,PASS)\n*        //SYSIN   DD  *\n*          ALPHA            001.05 07/15/86 09/03/86-16:39 00254 CAH0\n*          BRAVO\n*          CHARLIE  (ALIAS)\n*          DELTA            001.17 01/19/86 08/10/86-09:31 00000 JCP0\n*            .               .        .        .      .      .    .\n*            .               .        .        .      .      .    .\n*          ZULU             001.06 01/31/86 09/30/86-12:29 00068 ACH0\n*        /*\n*\n*   COMPLETION CODES:\n*        00 - OKAY\n*        04 - AT LEAST ONE ERROR MESSAGE\n*\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAOPEN   BAL   RBAL,OPEN                OPEN FILES, WRITE INITIAL LINES\n*\nMAXXRW   BAL   RBAL,XXRW                PERFORM READ/WRITE LOOP\n         MVC   COMPCODE(4),RETCDE       SET COMP CODE TO RETURN CODE\n*\nMACLOSE  BAL   RBAL,CLOSE               CLOSE FILES\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   OPEN THE FILES AND WRITE INITIAL LINES OF OUTPUT             ***\n***                                                                ***\n**********************************************************************\nOPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nOPDCB    MVC   DCBERR(DCBERRLN),DCBERRD    INITIALIZE DCB\n         MVC   DCBIN(DCBINLN),DCBIND       INITIALIZE DCB\n         MVC   DCBOUT(DCBOUTLN),DCBOUTD    INITIALIZE DCB\n*\nOPPARM   MVC   OPENL(OPENLLN),OPENLD    INITIALIZE OPEN PARM LIST\n    OPEN  (DCBIN,(INPUT),DCBOUT,(OUTPUT),DCBERR,(OUTPUT)),MF=(E,OPENL)\n*\n         PUT   DCBERR,ERRMSG01          WRITE INITIAL ERROR MESSAGE #1\n         PUT   DCBERR,ERRMSG02          WRITE INITIAL ERROR MESSAGE #2\n*\n         PUT   DCBOUT,OPTCARD           WRITE ++OPTION CARD OUT\n         PUT   DCBOUT,CTLCARD           WRITE ++CONTROL CARD OUT\n*\n         B     OPEND\n*\nOPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     OPEND                    BRANCH TO ENDING\n*\nOPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CLOSE THE FILES                                              ***\n***                                                                ***\n**********************************************************************\nCLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nCLPARM   MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE CLOS PARM LIST\n         CLOSE (DCBIN,,DCBOUT,,DCBERR),MF=(E,CLOSL)  CLOSE THE FILES\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   READ AN INPUT, WRITE OUTPUT OR ERROR MESSAGE                 ***\n***                                                                ***\n**********************************************************************\nXXRW     ST    RBAL,XXRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nXXGET    GET   DCBIN,INAREA             READ A CARD IMAGE\n         TRT   INNAME(16),ALPHANUM      IF NOT ALPHANUMERIC IN 3-18\n         BZ    XXCLEAR                    THEN\n         MVC   ERRAREA(133),BLANKS          CLEAR THE ERROR LINE\n         MVC   ERRAREA+1(80),INAREA         MOVE CARD IMAGE TO ERROR\n         PUT   DCBERR,ERRAREA               WRITE THE CARD IMAGE\n         MVC   RETCDE,=F'4'                 SET CC=4\n         B     XXGET                        GO GET ANOTHER CARD\n*\nXXCLEAR  MVC   MEMNAME(8),BLANKS        INITIALIZE MEMBER NAME\n         LA    R2,8                     R2 IS COUNTER\n         LA    R3,INNAME-1              R3 POINTS BEFORE INPUT NAME\n         LA    R4,MEMNAME-1             R4 POINTS BEFORE MEMBER NAME\n*\nXXLOOP1  LA    R3,1(0,R3)               R3 POINTS TO NEXT INPUT CHAR\n         LA    R4,1(0,R4)               R4 POINTS TO NEXT MEMNAME CHAR\n         CLI   0(R3),X'40'              IF BLANK\n         BE    XXLEN                      GET OUT OF LOOP\n         MVC   0(1,R4),0(R3)            MOVE INPUT CHAR TO MEMNAME\n         BCT   R2,XXLOOP1               DECR COUNT, LOOP BACK UP\n*\nXXLEN    LA    R3,8                     R3 IS INITIAL COUNTER\n         SR    R3,R2                    R3 IS NOW NUMBER OF CHARS\n         STH   R3,MEMLEN                SAVE FOR TEXTBILD\n*\nXXTB1    TEXTBILD  AREA=OUTAREA,TEXT=(ADD,MEMBER,ADD2)\nXXPU1    PUT   DCBOUT,OUTAREA\n*\n         MVC   COM2(53),COM2INIT        INITIALIZE COM2 AREA\n         MVC   COM2+3(50),INPANSTA+1    MOVE PAN STATS TO OUTPUT\n         CLC   COM2+3(50),BLANKS        IF BLANKS\n         BNE   *+10                       THEN\n         MVC   COM2+3(13),INITVALU          MOVE 'INITIAL VALUE'\nXXTB2    TEXTBILD  AREA=OUTAREA,TEXT=(COM,MEMBER,COM2)\nXXPU2    PUT   DCBOUT,OUTAREA\n*\nXXTB3    TEXTBILD  AREA=OUTAREA,TEXT=(REN,MEMBER,COMMA,MEMBER,REN2)\nXXPU3    PUT   DCBOUT,OUTAREA\n*\n         B     XXGET                    GO GET ANOTHER INPUT CARD\n*\nXXEOF    B     XXEND                    IF END OF FILE, GO TO END\n*\nXXEND    L     RBAL,XXRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL133' '\nX00S     DC    XL40'00'                 LITERAL\n*\nOPENLD   OPEN  (,,,,,),MF=L             OPEN PARM LIST\nCLOSD    CLOSE (,,,,),MF=L              CLOSE PARM LIST\n*\nDCBERRD  DCB   DDNAME=ERRORS,DSORG=PS,LRECL=133,BLKSIZE=1330,          X\n               RECFM=FBA,MACRF=PM\n*\nDCBIND   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=XXEOF\n*\nDCBOUTD  DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=80,BLKSIZE=6160,           X\n               RECFM=FB,MACRF=PM\n*\n*\nERRMSG01 DC    CL133'1'\nERRMSG02 DC    CL133'-ANY ERROR INPUTS WILL BE LISTED BELOW'\n*\nINITVALU DC    CL13'INITIAL VALUE'\n*\nOPTCARD  DC    CL80'++OPTION INPUT,PDS'\nCTLCARD  DC    CL80'--CONTROL 0'\nADD      DC    H'06',C'++ADD '\nADD2     DC    H'14',C',NOFORMAT,DATA'\nCOM      DC    H'10',C'--COMMENT '\nREN      DC    H'09',C'--RENAME '\nREN2     DC    H'02',C'01'\nCOMMA    DC    H'01',C','\n*\nCOM2INIT DC    H'51',CL51', '\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      TRT TABLE FOR ALPHANUMERICS AND BLANK (X'40')              ***\n***                                                                 ***\n***********************************************************************\nALPHANUM DS    0D   0 1 2 3  4 5 6 7  8 9 A B  C D E F\n         DC    XL4'11111111,11111111,11111111,11111111'  00-0F\n         DC    XL4'11111111,11111111,11111111,11111111'  10-1F\n         DC    XL4'11111111,11111111,11111111,11111111'  20-2F\n         DC    XL4'11111111,11111111,11111111,11111111'  30-3F\n         DC    XL4'00111111,11111111,11111111,11111111'  40-4F\n         DC    XL4'11111111,11111111,11111111,11111111'  50-5F\n         DC    XL4'11111111,11111111,11111111,11111111'  60-6F\n         DC    XL4'11111111,11111111,11111111,11111111'  70-7F\n         DC    XL4'11111111,11111111,11111111,11111111'  80-8F\n         DC    XL4'11111111,11111111,11111111,11111111'  90-9F\n         DC    XL4'11111111,11111111,11111111,11111111'  A0-AF\n         DC    XL4'11111111,11111111,11111111,11111111'  B0-BF\n         DC    XL4'11000000,00000000,00001111,11111111'  C0-CF\n         DC    XL4'11000000,00000000,00001111,11111111'  D0-DF\n         DC    XL4'11110000,00000000,00001111,11111111'  E0-EF\n         DC    XL4'00000000,00000000,00001111,11111111'  F0-FF\n*\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\nOPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nXXRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nCOM2     DS    H,CL51\n*\nERRAREA  DS    CL133\n*\nINAREA   DS    0CL80\n         DS    CL2\nINNAME   DS    CL8\nINALIAS  DS    CL8\n         DS    CL2\nINPANSTA DS    CL52\n         DS    CL8\n*\nMEMBER   DS    0D\nMEMLEN   DS    H\nMEMNAME  DS    CL8\n*\nOUTAREA  DS    CL80\n*\nOPENL    OPEN  (,,,,,),MF=L             OPEN PARM LIST\nOPENLLN  EQU   *-OPENL\nCLOSL    CLOSE (,,,,),MF=L              CLOSE PARM LIST\nCLOSLLN  EQU   *-CLOSL\n*\nDCBERR   DCB   DDNAME=ERRORS,DSORG=PS,LRECL=133,BLKSIZE=1330,          X\n               RECFM=FBA,MACRF=PM\nDCBERRLN EQU   *-DCBERR\n*\nDCBIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=XXEOF\nDCBINLN  EQU   *-DCBIN\n*\nDCBOUT   DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=80,BLKSIZE=6160,           X\n               RECFM=FB,MACRF=PM\nDCBOUTLN EQU   *-DCBOUT\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUAB0": {"ttr": 2055, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUAB0'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***  PROGRAM TO PRODUCE A DIRECTORY LISTING, WITH ISPF STATS        ***\n***  CONVERTED TO PANVALET COMMENT STATS.                           ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         BAL   RBAL,OPEN                OPEN THE FILES\n         BAL   RBAL,NAMES               GET THE NAMES FROM THE DIRECTRY\n         BAL   RBAL,CLOSE               CLOSE THE FILES\n*\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INITIALIZE CONTROL BLOCKS, AND OPEN THE FILES                 ***\n***                                                                ***\n**********************************************************************\nOPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nOPINIT   MVC   OPENL(OPENLLN),OPENLD    INITIALIZE OPEN PARM LIST\n         MVC   DIRDCB(DIRDCBLN),DIRDCBD INITIALIZE INPUT DCB\n         MVC   WRKDCB(WRKDCBLN),WRKDCBD INITIALIZE OUTPUT DCB\n         MVC   DIRDECB(DIRDECBL),DIRDECBD INITIALIZE INPUT DECB\n*\nOPENFILS OPEN  (DIRDCB,(INPUT),WRKDCB,(OUTPUT)),MF=(E,OPENL)  OPEN\n*\n*\n         B     OPEND\n*\nOPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     OPEND                    BRANCH TO ENDING\n*\nOPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE FILES                                               ***\n***                                                                ***\n**********************************************************************\nCLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nCLINIT   MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE CLOSE PARM LIST\n*\nCLOSFILS CLOSE (DIRDCB,,WRKDCB),MF=(E,CLOSL)   CLOSE\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET THE NAMES FROM THE DIRECTORY                              ***\n***                                                                ***\n**********************************************************************\nNAMES    ST    RBAL,NARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nNASTOR   LH    R2,DIRDCB+(DCBBLKSI-IHADCB)     R2 HAS MAX BLOCKSIZE\n         STH   R2,NABLOCK                      SAVE IT\n         GETMAIN  R,LV=(R2)                    GET STORAGE\n         LR    R9,R1                    R9 POINTS TO STORAGE\n         USING DIRAREA,R9                 ADDRESSABILITY\n*\nNAREAD1  READ  DIRDECB,SF,DIRDCB,DIRAREA,'S',MF=E  READ A BLOCK\n         CHECK DIRDECB                  WAIT FOR READ TO COMPLETE\n         LH    R2,DIRLEN                R2 IS LEN OF DATA IN BLOCK\n         LA    R3,DIRENT                R3 POINTS TO DIR ENTRY AREA\n         USING DIRENTRY,R3                ADDRESSABILITY\n*\n         S     R2,F2                    R2 IS REMAINING LEN OF DATA\nNALOOP2  LTR   R2,R2                    IF NOT POSITIVE REMAINING\n         BNP   NAREAD1                    GO GET ANOTHER BLOCK\n         CLC   DIRNAME(8),XFFS          IF NAME IS ALL X'FF'\n         BE    NAEND                      GO TO ALL DONE WITH DIR\n         MVC   OUTAREA(80),BLANKS       INITIALIZE OUTPUT AREA\n         MVC   OUTAREA+2(8),DIRNAME     MOVE NAME TO OUTPUT AREA\n         TM    DIRC,X'80'               IF THIS IS AN ALIAS ENTRY\n         BNO   *+10                       THEN\n         MVC   OUTAREA+10(8),ALIAS          ADD ' (ALIAS)' TO OUTPUT\n         BAL   RBAL,STATS               CONVERT STATS TO PANVALET COM\nNAPUT    PUT   WRKDCB,OUTAREA           WRITE THE CARD IMAGE\n         NI    DIRC,B'00011111'         TURN OFF NON-LENGTH BITS\n         XR    R4,R4                    R4 CLEAR FOR INSERT\n         IC    R4,DIRC                  R4 HAS NUMBER OF USER H/W'S\n         SLA   R4,1                     R4 IS LENGTH OF USER DATA\n         LA    R4,12(0,R4)              R4 IS LENGTH OF THIS ENTRY\n         LA    R3,0(R4,R3)              R3 POINTS TO NEXT ENTRY\n         SR    R2,R4                    R2 IS BYTES REMAINING THIS BLK\n         B     NALOOP2                  BRANCH BACK UP\n*\n         B     NAEND\n*\nNARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     NAEND                    BRANCH TO ENDING\n*\nNAEND    LH    R2,NABLOCK               R2 HAS GETMAIN SIZE\n         FREEMAIN  R,LV=(R2),A=(R9)\n         L     RBAL,NARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CONVERT STATS TO ISPF STATISTICS                              ***\n***                                                                ***\n**********************************************************************\nSTATS    ST    RBAL,STRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nSTCHECK  CLI   DIRC,X'0F'               IF ALIAS OR NOT ISPF LENGTH\n         BNE   STRET04\n*\nST50CALL LA    R15,OUTAREA+19           PARM ADDRESS\n         ST    R15,A50PARM+00             INTO PARM LIST\n         LA    R15,DIRENTRY             PARM ADDRESS\n         ST    R15,A50PARM+04             INTO PARM LIST\n         OI    A50PARM+04,X'80'         MARK END OF LIST\n         LA    R1,A50PARM               R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA50)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         B     STEND\n*\nSTRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     STEND                    BRANCH TO ENDING\n*\nSTEND    L     RBAL,STRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nF2       DC    F'2'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\nXFFS     DC    XL8'FFFFFFFFFFFFFFFF'    VALUE OF LAST DIR ENTRY\nALIAS    DC    CL8' (ALIAS)'            LITERAL\n*\nOPENLD   OPEN  (,,,),MF=L               PARM LIST FOR OPEN\nCLOSD    CLOSE (,,),MF=L                PARM LIST FOR CLOSE\n         READ  DIRDECBD,SF,MF=L\n*\nDIRDCBD  DCB   DSORG=PS,DDNAME=PDS,RECFM=U,MACRF=(R),EODAD=NAEND\nWRKDCBD  DCB   DSORG=PS,DDNAME=WRK001,RECFM=F,LRECL=80,BLKSIZE=80,     X\n               MACRF=PM\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nOPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nNARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSTRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nA50PARM  DS    2A                       PARM LIST FOR GTEUA50\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\n         PRINT GEN\nOPENL    OPEN  (,,,),MF=L               PARM LIST FOR OPEN\nOPENLLN  EQU   *-OPENL\nCLOSL    CLOSE (,,),MF=L                PARM LIST FOR CLOSE\nCLOSLLN  EQU   *-CLOSL\n         READ  DIRDECB,SF,MF=L\nDIRDECBL EQU   *-DIRDECB\n         PRINT NOGEN\n*\nDIRDCB   DCB   DSORG=PS,DDNAME=PDS,RECFM=U,MACRF=(R),EODAD=NAEND\nDIRDCBLN EQU   *-DIRDCB\nWRKDCB   DCB   DSORG=PS,DDNAME=WRK001,RECFM=F,LRECL=80,BLKSIZE=80,     X\n               MACRF=PM\nWRKDCBLN EQU   *-WRKDCB\n*\nNABLOCK  DS    H                        MAX INPUT BLOCK SIZE\nOUTAREA  DS    CL80                     OUTPUT CARD IMAGE\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\nDIRAREA  DSECT                          DIRECTORY BLOCK MAP\nDIRLEN   DS    H                        LENGTH OF DATA IN BLOCK\nDIRENT   DS    XL74                     DIRECTORY ENTRY\n*\nDIRENTRY DSECT                          DIRECTORY ENTRY MAP\nDIRNAME  DS    CL8                      PROGRAM NAME\nDIRTTR   DS    XL3                      TRACK AND RELATIVE BLOCK\nDIRC     DS    BL1                      VALUE 'C'   ........\n*                                         ALIAS:    1.......\n*                                         UNUSED:   .11.....\n*                                         USR HW'S: ...11111\nDIRUDTA  DS    XL62                     VARIABLE/OPTIONAL USER DATA\n*\n         IHADCB DEVD=DA,DSORG=PS        MAP THE DCB\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUAD0": {"ttr": 2307, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         MACRO\n&LABEL   TEXTBILD &AREA=,&TEXT=\n.*+-----------------------------------------------------------------+\n.*|  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   |\n.*|   E.G.                                                          |\n.*|           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    |\n.*|                                                                 |\n.*|  AVALUE   DC  H'5',C'ALPHA'                                     |\n.*|  BVALUE   DC  H'7',C'-BRAVO-'                                   |\n.*|  CVALUE   DC  H'7',C'CHARLIE'                                   |\n.*|                                                                 |\n.*|  OUTAREA  DS  CL80                                              |\n.*|                                                                 |\n.*|  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 |\n.*|  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       |\n.*|                                                                 |\n.*|  UPON COMPLETION:  R1  POINTS TO OUTAREA                        |\n.*|                    R15 HAS TOTAL LENGTH OF TEXT (19)            |\n.*|                                                                 |\n.*|  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      |\n.*|            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          |\n.*|        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      |\n.*+-----------------------------------------------------------------+\n         LCLA  &N1,&N2\n&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS\n&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND\n.*\n&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE\n         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS\n.*\n         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN\n.LOOP1   ANOP\n         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT\n         BCTR  1,0                        MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA\n         EX    1,*-6                    EXECUTE THE MOVE\n         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS\n&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND\n         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP\n.*\n         LA    1,&AREA                  R1 HAS ADDR OF AREA\n         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT\n.*\n         MEND\n*\n         EJECT\n         LCLC  &MYNAME                  LOCAL CONSTANT\n&MYNAME  SETC  'GTEUAD0'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUAD0                                      ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***    The function of this program is to do some checking of      ***\n***    a member of a CLIST library against installation standards, ***\n***    then to check for required entries in a help library.       ***\n***                                                                ***\n***  To execute this program the following CLIST may be used:      ***\n***                                                                ***\n***  CLIST name: HELPCHK                                           ***\n***                                                                ***\n***     PROC 1 NAME                                                ***\n***     /******************************************************/   ***\n***     /* CLIST TO EXECUTE THE CLIST VS HELP LIBRARY CHECKER */   ***\n***     /*                                                    */   ***\n***     /* CATEGORY=MANAGE                                    */   ***\n***     /* TEST DATASET = (NONE)                              */   ***\n***     /******************************************************/   ***\n***     ALLOC: +                                                   ***\n***       FREE DD(PDS HELP SYSPRINT)                               ***\n***       ALLOC DD(PDS) DSN('SYS1.CMDPROC') SHR                    ***\n***       ALLOC DD(HELP) DSN('SYS1.PPHELP') SHR                    ***\n***       ALLOC DD(SYSPRINT) DSN(*)                                ***\n***     CALL: +                                                    ***\n***       LIBCALL GTEUAD0 '&NAME'                                  ***\n***       SET &PGMCC EQ &LASTCC                                    ***\n***     REPORT: +                                                  ***\n***       WRITE *** HELPCHK COMPLETE, CC=&PGMCC                    ***\n***     CLEANUP: +                                                 ***\n***       FREE DD(PDS HELP SYSPRINT)                               ***\n***     ENDING: +                                                  ***\n***       EXIT CODE(&PGMCC)                                        ***\n***                                                                ***\n***   EXEC mylib.clist(helpchk) 'xxx'                              ***\n***                                                                ***\n***                                                                ***\n***  To execute this program the following JCL may be used:        ***\n***                                                                ***\n***     //HELPCHK  PROC  NAME=                                     ***\n***     //HELPCHK  EXEC  PGM=GTEUAD0,PARM='&NAME'                  ***\n***     //SYSPRINT  DD   SYSOUT=*                                  ***\n***     //PDS       DD   DSN=SYS1.CMDPROC,DISP=SHR                 ***\n***     //HELP      DD   DSN=SYS1.PPHELP,DISP=SHR                  ***\n***     //HELPCHK  PEND                                            ***\n***     //*                                                        ***\n***     //*                                                        ***\n***     //STEP1  EXEC  HELPCHK,NAME=XXX                            ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1.  Examine the PARM field for validity.  Must be 1-8         ***\n***      National characters.                                      ***\n***                                                                ***\n***  2.  Dynamically allocate and read an 'exception list' of      ***\n***      names of CLISTs and HELPs which are exceptions from       ***\n***      standards.  Then close and free the input file.           ***\n***                                                                ***\n***  3.  For the input PDS and HELP files, initialize the DCBs,    ***\n***      open the files, get storage for input buffers, and        ***\n***      initialize DECBs.                                         ***\n***                                                                ***\n***  4.  Find the CLIST member in the PDS file, and scan it for    ***\n***      the presence of the following two items on comment cards. ***\n***                                                                ***\n***      A.  'CATEGORY=name', where 'name' is the name of a HELP   ***\n***          member which contains a 1-line description of all     ***\n***          HELP items in a category.                             ***\n***                                                                ***\n***      B.  'TEST DATASET = '                                     ***\n***                                                                ***\n***      The items listed above can be all on the same comment     ***\n***      card.                                                     ***\n***                                                                ***\n***  5.  Find the HELP member with the same name as the CLIST      ***\n***      member.                                                   ***\n***                                                                ***\n***  6.  Find the HELP member 'name', from 3.A., above, and scan   ***\n***      it for the CLIST/HELP name in positions 1-8.              ***\n***                                                                ***\n***  7.  Close the PDS and HELP files, and release storage used    ***\n***      for buffers.                                              ***\n***                                                                ***\n***  8.  If there have been any errors, open the SYSPRINT file     ***\n***      and write error messages.  Then close the SYSPRINT file.  ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1.  An actual dataset name on the 'TEST DATASET = ' comment   ***\n***      is not required.  The following comment would pass the    ***\n***      scan:                                                     ***\n***                                                                ***\n***          /*  TEST DATASET = (NONE)       */                    ***\n***                                                                ***\n***  2.  The PDS and HELP file must be fixed length, 80-byte       ***\n***      records.                                                  ***\n***                                                                ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***      0 - OK                                                    ***\n***      4 - Error in CLIST or HELP text.  Error message will go   ***\n***          to SYSPRINT file.                                     ***\n***     12 - Error in input parm, or in blocksize of PDS or HELP   ***\n***          dataset.                                              ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Linkage conventions, work, macros.               ***\n***     R4      - Work registers, not used to pass information     ***\n***               between routines.                                ***\n***     R5      - (unused)                                         ***\n***     R6      - (unused)                                         ***\n***     R7      - (unused)                                         ***\n***     R8      - (unused)                                         ***\n***     R9      - Base of input block from PDS file (CLIST).       ***\n***     R10     - Base of input block from HELP file.              ***\n***     R11     - Linkage register used with BAL instructions.     ***\n***     R12     - Base register of program code.                   ***\n***     R13-R15 - Linkage conventions, work, macros.               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***     None                                                       ***\n***                                                                ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, ALIAS(...)               ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial install.                                      ***\n***  2.  A.  Correct bypass of the 'exception' error message.   GU00201\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         USING HELBLOCK,R10             ADDRESSABILITY OF HELP BLOCK\n         USING PDSBLOCK,R9              ADDRESSABILITY OF CLIST BLOCK\n*\nMAPARM   BAL   RBAL,PARM                PROCESS INPUT PARM\n         CLC   RETCDE,F0                IF NOT CLEAN\n         BE    MAEXCPTN                   THEN\n         OI    SWITCH0,X'02'                SET ERROR SWITCH\n         B     END12                        GO TO HIGH ENDING\n*\nMAEXCPTN BAL   RBAL,EXCPTN              DO EXCEPTION PROCESSING\n*\nMAOPEN   BAL   RBAL,OPEN                OPEN THE FILES\n*\nMARPDS   BAL   RBAL,RPDS                READ/SCAN THE CLIST MEMBER\n         CLC   RETCDE,F0                IF BLKSIZE NOT N * 80\n         BE    *+16                       THEN\n         BAL   RBAL,CLOSE                   CLOSE THE FILES\n         OI    SWITCH0,X'02'                SET ERROR SWITCH\n         B     END12                        GO TO HIGH ENDING\n*\nMARHELP  BAL   RBAL,RHELP               LOCATE HELP MEMBER\n*\nMARCAT   BAL   RBAL,RCAT                READ/SCAN THE CATEGORY MEMBER\n         CLC   RETCDE,F0                IF BLKSIZE NOT N * 80\n         BE    *+16                       THEN\n         BAL   RBAL,CLOSE                   CLOSE THE FILES\n         OI    SWITCH0,X'02'                SET ERROR SWITCH\n         B     END12                        GO TO HIGH ENDING\n*\nMACLOSE  BAL   RBAL,CLOSE               CLOSE THE FILES\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   BAL   RBAL,ERRORS              WRITE ANY ERROR MESSAGES\n         L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  PROCESS INPUT PARM                                            ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R2,R1SAVE                R2 POINTS TO PARM LIST\n         L     R2,0(0,R2)               R2 POINTS TO PARM\n         LH    R3,0(0,R2)               R3 HAS LENGTH OF PARM\n         STH   R3,PARMLEN               SAVE IT\n         LTR   R3,R3                    IF ZERO LENGTH\n         BZ    PARET04                    GO TO HIGH ENDING\n         C     R3,=F'8'                 IF LENGTH GREATER THAN 8\n         BH    PARET04                    GO TO HIGH ENDING\n         MVC   PARMIN(8),BLANKS         CLEAR PARMIN FIELD\n         BCTR  R3,0                     LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   PARMIN(0),2(R2)            MOVE PARM CHARACTERS\n         EX    R3,*-6                   EXECUTE THE MOVE\n         B     *+10                     BRANCH AROUND TRANSLATE+TEST\n         TRT   PARMIN(0),TRTNAT           CHECK FOR NATIONAL CHARS\n         EX    R3,*-6                   EXECUTE THE TRANSLATE+TEST\n         BNZ   PARET04                  IF NOT, GO TO HIGH ENDING\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK TO SEE IF THE NAME IS AN EXCEPTION                      ***\n***                                                                ***\n**********************************************************************\nEXCPTN   ST    RBAL,EXRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nEXDCBL   MVC   EXDCB(EXDCBLN),EXDCBD    INITIALIZE DCB\n         MVC   EXDCB+(DCBDDNAM-IHADCB)(8),BLANKS  CLEAR DDNAME FIELD\n*\nEXALLOC  MVC   EX(EXLEN),EXD            INITIALIZE DYNALC DATA\n         GTEDASET  EX,CPPLPTR=R1SAVE    LINK BLOCKS TOGETHER\n         GTEDAALC  EX,VERB=AL,ERRMSG=NO ALLOCATE\n         CLC   EXS99RC,F0               IF ALLOCATION FAILED\n         BNE   EXEND                      GO TO THE ENDING\n*\nEXDDN    XR    R2,R2                    CLEAR R2 FOR INSERT\n         ICM   R2,3,EXRTDDN-2           R2 HAS LENGTH OF RET DDNAME\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   EXDCB+(DCBDDNAM-IHADCB)(0),EXRTDDN  DDNAME INTO DCB\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\nEXOPEN   MVC   OPENEL(OPENELN),OPENED   INITIALIZE OPEN PARM LIST\n         OPEN  (EXDCB,(INPUT)),MF=(E,OPENEL)  OPEN THE FILE\n*\nEXLOOP1  GET   EXDCB,EXINREC            GET AN INPUT RECORD\n         CLC   PARMIN(8),EXINREC        IF NO MATCH WITH PARM NAME\n         BNE   EXLOOP1                    GO GET ANOTHER RECORD\n*\nEXSWITCH OI    SWITCH0,X'01'            TURN ON EXCEPTION SWITCH\n*\nEXEOF    MVC   CLOSEL(CLOSELN),CLOSED   INITIALIZE CLOSE PARM LIST\n         CLOSE (EXDCB),MF=(E,CLOSEL)    CLOSE THE FILE\n*\nEXUNALC  MVC   EXRTDDN-6(2),=X'0001'    CHANGE RTDDN T.U. TO DDN\n         OC    EXDSNAM-6(2),EXDSNAM     KILL THE DSN KEY\n         OC    EXSTATS(2),EXSTATS       KILL THE STATUS KEY\n         GTEDAALC  EX,VERB=UN,ERRMSG=NO UNALLOCATE THE FILE\n*\n         B     EXEND\n*\nEXRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     EXEND                    BRANCH TO ENDING\n*\nEXEND    L     RBAL,EXRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  OPEN THE FILES                                                ***\n***                                                                ***\n**********************************************************************\nOPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   HELDCB(HELDCBLN),HELDCBD INITIALIZE DCB FOR HELP\n         MVC   PDSDCB(PDSDCBLN),PDSDCBD INITIALIZE DCB FOR CLIST\n*\n         MVC   OPENL(OPENLLN),OPENLD    INITIALIZE OPEN PARM LIST\n         OPEN  (HELDCB,(INPUT),PDSDCB,(INPUT)),MF=(E,OPENL)  OPEN\n*\n         MVC   HELBLKSI(2),HELDCB+(DCBBLKSI-IHADCB)  SAVE HELP BLKSI\n         MVC   PDSBLKSI(2),PDSDCB+(DCBBLKSI-IHADCB)  SAVE CLIST BLKSI\n         LH    R3,HELBLKSI               R3 IS BLOCKSIZE OF HELP\n         AH    R3,PDSBLKSI                 PLUS BLOCKSIZE OF CLIST\n         GETMAIN R,LV=(R3)               GET STORAGE\n         ST    R1,HELBUFAD               SAVE THE ADDR FOR HELP RECS\n         LR    R10,R1                    SAVE IT FOR ADDRESSABILITY\n         AH    R1,HELBLKSI               COMPUTE ADDR FOR CLIST RECS\n         ST    R1,PDSBUFAD               SAVE THE ADDR FOR CLIST RECS\n         LR    R9,R1                     SAVE IT FOR ADDRESSABILITY\n*\n         MVC   HELDECB(HELDECBL),HELDECBD  INITIALIZE DECB FOR HELP\n         MVC   PDSDECB(PDSDECBL),PDSDECBD  INITIALIZE DECB FOR CLIST\n*\n         B     OPEND\n*\nOPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     OPEND                    BRANCH TO ENDING\n*\nOPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE FILES                                               ***\n***                                                                ***\n**********************************************************************\nCLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE CLOSE PARM LIST\n         CLOSE (HELDCB,,PDSDCB),MF=(E,CLOSL)  CLOSE THE FILES\n*\n         L     R2,HELBUFAD               R2 POINTS TO I/O STORAGE\n         LH    R3,HELBLKSI               R3 IS BLOCKSIZE OF HELP\n         AH    R3,PDSBLKSI                 PLUS BLOCKSIZE OF CLIST\n         FREEMAIN R,LV=(R3),A=(R2)       FREE STORAGE\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  READ THE CLIST MEMBER                                         ***\n***                                                                ***\n**********************************************************************\nRPDS     ST    RBAL,RPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nRPFIND   MVC   PDSNAME(8),PARMIN        SET NAME\n         XC    PDSTTRC(4),PDSTTRC       CLEAR TTR AND C FIELDS\n         FIND  PDSDCB,PDSNAME,D         POINT TO PDS MEMBER\n         LTR   R15,R15                  IF MEMBER DOESN'T EXIST\n         BNZ   RPEND                      GO TO ENDING\n         OI    SWITCH0,X'80'            TURN ON PDS-MEMB FOUND SWITCH\n*\nRPREAD   TM    SWITCH0,X'40'+X'20'      IF SCAN ALREADY COMPLETE\n         BO    RPEND                      GO TO ENDING\n         READ  PDSDECB,SF,PDSDCB,PDSBLOCK,'S',MF=E   READ A BLOCK\n         CHECK PDSDECB                                 AND WAIT FOR IT\n         LH    R3,PDSBLKSI              R3 HAS REQUESTED BYTES\n         L     R2,PDSDECB+16            R2 POINTS TO THE IOB\n         LH    R2,14(0,R2)              R2 HAS RESIDUAL BYTE COUNT\n         SR    R3,R2                    R3 HAS BYTES READ\n         STH   R3,PDSBYTES              SAVE IT FOR OTHER PROCEDURE\n         BAL   RBAL,PSCAN               PERFORM SCAN\n         CLC   RETCDE,F0                IF SCAN IS BAD\n         BNE   RPRET04                    GO TO HIGH RETURN\n         B     RPREAD                   LOOP BACK UP\n*\nRPEOF    B     RPEND\n*\nRPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     RPEND                    BRANCH TO ENDING\n*\nRPEND    L     RBAL,RPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  LOCATE THE HELP MEMBER                                        ***\n***                                                                ***\n**********************************************************************\nRHELP    ST    RBAL,RHRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nRHFIND   MVC   HELNAME(8),PARMIN        INPUT NAME TO HELP NAME\n         XC    HELTTRC(4),HELTTRC       CLEAR TTR AND C FIELDS\n         FIND  HELDCB,HELNAME,D         POINT TO PDS MEMBER\n         LTR   R15,R15                  IF MEMBER DOESN'T EXIST\n         BNZ   RHEND                      GO TO ENDING\n         OI    SWITCH0,X'04'            TURN ON PDS-MEMB FOUND SWITCH\n*\n         B     RHEND\n*\nRHRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     RHEND                    BRANCH TO ENDING\n*\nRHEND    L     RBAL,RHRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  SCAN INPUT LRECS FOR 'CATEGORY=name' OR 'CATEGORY = name'     ***\n***  SCAN INPUT Lrecs FOR 'TEST DATASET = ' OR 'TEST DATASET='     ***\n***                                                                ***\n**********************************************************************\nPSCAN    ST    RBAL,PSRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LH    R2,PDSBYTES              R2 IS NUMBER OF BYTES READ\n         SRA   R2,32                    R2-R3 SET UP FOR DIVIDE\n         D     R2,=F'80'                R3 IS NUMBER OF INPUT RECORDS\n         LTR   R3,R3                    IF INPUT RECORDS ARE ZERO\n         BZ    PSEND                      BYPASS THIS PROCEDURE\n         LTR   R2,R2                    R2 IS REMAINDER (SHOULD BE 0)\n         BNZ   PSRET04                    IF NOT, HIGH RETURN\n*\n         LA    R2,PDSBLOCK              R2 POINTS TO PDSP BLOCK\n         S     R2,=F'80'                R2 POINTS TO -1 RECORD\nPSLOOP1  LA    R2,80(0,R2)              R2 POINTS TO NEXT RECORD\n         CLC   0(2,R2),=CL2'/*'         IF NOT A COMMENT\n         BNE   PSLOOP1N                   GO TO END OF LOOP\n*\n         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT\n         LA    R1,60                    R1 IS COUNTER FOR SCAN\nPSLOOP2  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER\n         CLC   0(9,R4),=CL9'CATEGORY='  IF IT IS 'CATEGORY='\n         BNE   PSLOOP2N                   THEN\n         MVC   PDSCAT(8),9(R4)              SAVE THE NEXT 8 CHARS\n         OI    SWITCH0,X'40'                TURN ON CAT FOUND SWITCH\n         B     *+8                          LEAVE THE LOOP\nPSLOOP2N BCT   R1,PSLOOP2               ELSE LOOP BACK UP\n*\n         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT\n         LA    R1,54                    R1 IS COUNTER FOR SCAN\nPSLOOP3  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER\n         CLC   0(15,R4),=CL15'TEST DATASET = '  IF LITERAL MATCHES\n         BNE   PSLOOP3N                   THEN\n         OI    SWITCH0,X'20'                TURN ON CAT FOUND SWITCH\n         B     *+8                          LEAVE THE LOOP\nPSLOOP3N BCT   R1,PSLOOP3               ELSE LOOP BACK UP\n*\n         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT\n         LA    R1,58                    R1 IS COUNTER FOR SCAN\nPSLOOP4  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER\n         CLC   0(11,R4),=CL11'CATEGORY = '  IF IT IS 'CATEGORY = '\n         BNE   PSLOOP4N                   THEN\n         MVC   PDSCAT(8),11(R4)             SAVE THE NEXT 8 CHARS\n         OI    SWITCH0,X'40'                TURN ON CAT FOUND SWITCH\n         B     *+8                          LEAVE THE LOOP\nPSLOOP4N BCT   R1,PSLOOP4               ELSE LOOP BACK UP\n*\n         LA    R4,1(0,R2)               R4 POINTS JUST BEFORE TEXT\n         LA    R1,56                    R1 IS COUNTER FOR SCAN\nPSLOOP5  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHARACTER\n         CLC   0(13,R4),=CL13'TEST DATASET='  IF LITERAL MATCHES\n         BNE   PSLOOP5N                   THEN\n         OI    SWITCH0,X'20'                TURN ON CAT FOUND SWITCH\n         B     *+8                          LEAVE THE LOOP\nPSLOOP5N BCT   R1,PSLOOP5               ELSE LOOP BACK UP\n*\nPSLOOP1N BCT   R3,PSLOOP1               IF MORE RECORDS, LOOP BACK UP\n         B     PSEND                      ELSE GO TO END OF PROCEDURE\n*\nPSRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PSEND                    BRANCH TO ENDING\n*\nPSEND    L     RBAL,PSRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  READ THE HELP CATEGORY MEMBER                                 ***\n***                                                                ***\n**********************************************************************\nRCAT     ST    RBAL,RCRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nRCATCHK  TM    SWITCH0,X'40'            IF 'CATEGORY=' WAS NOT FOUND\n         BNO   RCEND                      SKIP THIS PROCEDURE\n*\n         MVC   CATIN(8),BLANKS          CLEAR CATEGORY NAME FIELD\n         LA    R3,8                     R3 IS COUNTER, MAX NAME LENGTH\n         XR    R4,R4                    R4 WILL BE NAME LENGTH\n         LA    R1,CATIN-1               R1 POINTS JUST BEFORE TGT NAME\n         LA    R2,PDSCAT-1              R2 POINTS JUST BEFORE INPUT\nRCLOOPA  LA    R1,1(0,R1)               R1 POINTS TO NEXT TGT CHAR\n         LA    R2,1(0,R2)               R2 POINTS TO NEXT INPUT CHAR\n         TRT   0(1,R2),TRTNAT           IF INPUT CHAR IS NOT NATIONAL\n         BNZ   RCLOOPAN                   LEAVE THE LOOP\n         MVC   0(1,R1),0(R2)            MOVE INPUT CHARACTER TO TARGET\n         LA    R4,1(0,R4)               INCREASE NAME LENGTH BY 1\n         BCT   R3,RCLOOPA               LOOP BACK UP\nRCLOOPAN STH   R4,CATLEN                SAVE THE CATEGORY NAME LENGTH\n         LTR   R4,R4                    IF LENGTH IS ZERO\n         BE    RCEND                      GO TO ERROR ENDING\n*\nRCFIND   MVC   HELNAME(8),CATIN         SET NAME\n         XC    HELTTRC(4),HELTTRC       CLEAR TTR AND C FIELDS\n         FIND  HELDCB,HELNAME,D         POINT TO PDS MEMBER\n         LTR   R15,R15                  IF MEMBER DOESN'T EXIST\n         BNZ   RCEND                      GO TO ENDING\n         OI    SWITCH0,X'10'            TURN ON CAT-MEMB FOUND SWITCH\n*\nRCREAD   TM    SWITCH0,X'08'            IF SCAN IS ALREADY COMPLETE\n         BO    RCEND                      GO TO ENDING\n         READ  HELDECB,SF,HELDCB,HELBLOCK,'S',MF=E   READ A BLOCK\n         CHECK HELDECB                                 AND WAIT FOR IT\n         LH    R3,HELBLKSI              R3 HAS REQUESTED BYTES\n         L     R2,HELDECB+16            R2 POINTS TO THE IOB\n         LH    R2,14(0,R2)              R2 HAS RESIDUAL BYTE COUNT\n         SR    R3,R2                    R3 HAS BYTES READ\n         STH   R3,HELBYTES              SAVE IT FOR OTHER PROCEDURE\n         BAL   RBAL,CSCAN               PERFORM SCAN\n         CLC   RETCDE,F0                IF SCAN IS BAD\n         BNE   RCRET04                    GO TO HIGH RETURN\n         B     RCREAD                   LOOP BACK UP\n*\nRCEOF    B     RCEND\n*\nRCRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     RCEND                    BRANCH TO ENDING\n*\nRCEND    L     RBAL,RCRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  SCAN CATEGORY ENTRY FOR CLIST NAME IN COLS 1-8                ***\n***                                                                ***\n**********************************************************************\nCSCAN    ST    RBAL,CSRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LH    R2,HELBYTES              R2 IS NUMBER OF BYTES READ\n         SRA   R2,32                    R2-R3 SET UP FOR DIVIDE\n         D     R2,=F'80'                R3 IS NUMBER OF INPUT RECORDS\n         LTR   R3,R3                    IF INPUT RECORDS ARE ZERO\n         BZ    CSEND                      BYPASS THIS PROCEDURE\n         LTR   R2,R2                    R2 IS REMAINDER (SHOULD BE 0)\n         BNZ   CSRET04                    IF NOT, HIGH RETURN\n*\n         LA    R2,HELBLOCK              R2 POINTS TO HELP BLOCK\n         S     R2,=F'80'                R2 POINTS TO -1 RECORD\nCSLOOP1  LA    R2,80(0,R2)              R2 POINTS TO NEXT RECORD\n         CLI   0(R2),C'*'               IF A COMMENT\n         BE    CSLOOP1N                   GO TO END OF LOOP\n         CLI   0(R2),C')'               IF A CONTROL LINE\n         BE    CSLOOP1N                   GO TO END OF LOOP\n*\n         CLC   0(8,R2),PARMIN           IF NAME IS NOT IN CC 1-8\n         BNE   CSLOOP1N                   GO TO END OF LOOP\n         OI    SWITCH0,X'08'            ELSE TURN ON CAT-TEXT FOUND\n         B     CSEND                      AND LEAVE THIS PROCEDURE\n*\nCSLOOP1N BCT   R3,CSLOOP1               IF MORE RECORDS, LOOP BACK UP\n         B     CSEND                      ELSE GO TO END OF PROCEDURE\n*\nCSRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CSEND                    BRANCH TO ENDING\n*\nCSEND    L     RBAL,CSRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  WRITE ANY ERROR MESSAGES                                      ***\n***                                                                ***\n**********************************************************************\nERRORS   ST    RBAL,ERRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nERCHECK  TM    SWITCH0,B'11111100'      IF ANY ONE OF THESE IS NOT ON\n         BNO   EROPEN                     PROCESS ERROR MESSAGES\n         TM    SWITCH0,B'00000010'      ELSE IF ERROR FROM MAIN ROUTINE\n         BO    EROPEN                     PROCESS ERROR MESSAGES\n         B     EREND                    ELSE BYPASS THE WHOLE THING\n*\nEROPEN   MVC   SYSDCB(SYSDCBLN),SYSDCBD INITIALIZE SYSPRINT DCB\n         MVC   OPENS(OPENSLN),OPENSL    INITIALIZE OPEN PARM LIST\n         OPEN  (SYSDCB,(OUTPUT)),MF=(E,OPENS)  OPEN THE SYSPRINT FILE\n*\nER01     TM    SWITCH0,X'01'            IF EXCEPTION SWITCH IS ON\n         BNO   ER80                     AND\n         TM    SWITCH0,B'11111100'      IF ANY ONE OF THESE IS NOT ON\n         BO    ER80                       THEN                  GU00201\n         TEXTBILD  AREA=SYSLINE,            BUILD                      X\n               TEXT=(ERMSG01A,PARMLEN,ERMSG01B)   MESSAGE\n         BAL   R3,ERWRTBLT                  WRITE BUILT MESSAGE\n*\nER80     TM    SWITCH0,X'80'            IF SWITCH IS NOT ON\n         BO    *+16                       THEN\n         LA    R2,ERMSG80                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n         B     ER04                         SKIP MSG 20,40,10,08\n*\nER20     TM    SWITCH0,X'20'            IF SWITCH IS NOT ON\n         BO    *+12                       THEN\n         LA    R2,ERMSG20                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n*\nER40     TM    SWITCH0,X'40'            IF SWITCH IS NOT ON\n         BO    *+16                       THEN\n         LA    R2,ERMSG40                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n         B     ER04                         SKIP MSG 10 AND 08\n*\nER10     TM    SWITCH0,X'10'            IF SWITCH IS NOT ON\n         BO    *+16                       THEN\n         LA    R2,ERMSG10                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n         B     ER04                         SKIP MESSAGE 08\n*\nER08     TM    SWITCH0,X'08'            IF SWITCH IS NOT ON\n         BO    *+12                       THEN\n         LA    R2,ERMSG08                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n*\nER04     TM    SWITCH0,X'04'            IF SWITCH IS NOT ON\n         BO    *+12                       THEN\n         LA    R2,ERMSG04                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n*\nER02     TM    SWITCH0,X'02'            IF SWITCH IS ON\n         BNO   *+12                       THEN\n         LA    R2,ERMSG02                   POINT TO ERROR MESSAGE\n         BAL   R3,ERWRITE                   WRITE THE MESSAGE\n*\nERCLOSE  MVC   CLOSS(CLOSSLN),CLOSSL    INITIALIZE CLOSE PARM LIST\n         CLOSE (SYSDCB),MF=(E,CLOSS)    CLOSE THE SYSPRINT FILE\n*\nERRET04  LA    R15,04                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     EREND                          BRANCH TO ENDING\n*\nERWRITE  LH    R4,0(0,R2)               MESSAGE LENGTH TO R4\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         MVC   SYSLINE(133),BLANKS      CLEAR THE OUTPUT LINE\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   SYSLINE(0),2(R2)           MOVE MESSAGE TO THE LINE\n         EX    R4,*-6                   EXECUTE THE MOVE\nERWRTBLT PUT   SYSDCB,SYSLINE           WRITE THE LINE\n         BR    R3                       RETURN\n*\nEREND    L     RBAL,ERRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL133' '                 LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\n         LTORG\n*\nHELDCBD  DCB   DDNAME=HELP,DSORG=PO,MACRF=R,EODAD=RCEOF\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=R,EODAD=RPEOF\nSYSDCBD  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X\n               RECFM=FBA,LRECL=133,BLKSIZE=6118\nEXDCBD   DCB   DDNAME=X,DSORG=PS,MACRF=GM,EODAD=EXEOF\n*\n         READ  HELDECBD,SF,MF=L         DECB\n         READ  PDSDECBD,SF,MF=L         DECB\n*\nOPENLD   OPEN  (,,,),MF=L               OPEN PARM LIST\nCLOSD    CLOSE (,,),MF=L                CLOSE PARM LIST\nOPENSL   OPEN  (,),MF=L                 SYSPRINT OPEN PARM LIST\nCLOSSL   CLOSE (),MF=L                  SYSPRINT CLOSE PARM LIST\nOPENED   OPEN  (,),MF=L                 EXCEPTION OPEN PARM LIST\nCLOSED   CLOSE (),MF=L                  EXCEPTION CLOSE PARM LIST\n*\nEXD      GTEDADAT  DSNAM=SYS1.GTEU.EXCEPTNS,                           X\n               RTDDN=X,STATS=SHR\n*\n         EJECT\n*                      ....+....1....+....2....+....3....+....4....+...x\n               .5....+....6....+....7....+....8\nERMSG80  DC    H'26',C' Did not find CLIST member'\nERMSG40  DC    H'68',C' CLIST comments did not contain ''CATEGORY=name'x\n               ' or ''CATEGORY = name'''\nERMSG20  DC    H'68',C' CLIST comments did not contain ''TEST DATASET='X\n               ' or ''TEST DATASET = '''\nERMSG10  DC    H'27',C' Did not find HELP category'\nERMSG08  DC    H'46',C' HELP category doesn''t contain entry for CLIST'\nERMSG04  DC    H'25',C' Did not find HELP member'\nERMSG02  DC    H'44',C' Error in input name or CLIST/HELP blocksize'\nERMSG01A DC    H'11',C' ** Note:  '\nERMSG01B DC    H'40',C' is an exception to CLIST/HELP standards'\n*                      ....+....1....+....2....+....3....+....4....+...\n         EJECT\n*                TRT TABLE FOR NATIONAL CHARACTERS\nTRTNAT   DS 0D   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 0\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 1\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 2\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 3\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 4\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,00,11,11,11,11' 5\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 6\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11' 7\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 8\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' 9\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' A\n         DC XL1'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11' B\n         DC XL1'11,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11' C\n         DC XL1'11,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11' D\n         DC XL1'11,11,00,00,00,00,00,00,00,00,11,11,11,11,11,11' E\n         DC XL1'00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11' F\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PDS-MEMBER FOUND\n*                .1......               X'40' - FOUND 'CATEGORY=' TEXT\n*                ..1.....               X'20' - FOUND 'TEST DATASET = '\n*                ...1....               X'10' - CATEGORY-MEMBER FOUND\n*                ....1...               X'08' - CAT-TEXT FOUND\n*                .....1..               X'04' - HELP-MEMBER FOUND\n*                ......1.               X'02' - BAD PARM OR BLOCKSIZE\n*                .......1               X'01' - NAME ON EXCEPTION LIST\n*\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nEXRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nOPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nRPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nRHRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPSRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nRCRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCSRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nERRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nPARMLEN  DS    H                        LENGTH OF INPUT PARM\nPARMIN   DS    CL8                      INPUT PARM\nCATLEN   DS    H                        LENGTH OF CATEGORY NAME\nCATIN    DS    CL8                      CATEGORY NAME\n*\nPDSCAT   DS    CL8                      CATEGORY FROM HELP ENTRY\nPDSBYTES DS    H                        NUMBER OF BYTES READ FROM CLIST\nHELBYTES DS    H                        NUMBER OF BYTES READ FROM HELP\n*\nHELDCB   DCB   DDNAME=HELP,DSORG=PO,MACRF=R,EODAD=RCEOF\nHELDCBLN EQU   *-HELDCB\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R,EODAD=RPEOF\nPDSDCBLN EQU   *-PDSDCB\nSYSDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X\n               RECFM=FBA,LRECL=133,BLKSIZE=6118\nSYSDCBLN EQU   *-SYSDCB\nEXDCB    DCB   DDNAME=X,DSORG=PS,MACRF=GM,EODAD=EXEOF\nEXDCBLN  EQU   *-EXDCB\n*\nSYSLINE  DS    CL133                    SYSPRINT OUTPUT LINE\n*\nHELBLKSI DS    H                        BLOCKSIZE OF HELP\nHELBUFAD DS    A                        BUFFER ADDRESS FOR HELP\nPDSBLKSI DS    H                        BLOCKSIZE OF CLIST\nPDSBUFAD DS    A                        BUFFER ADDRESS FOR CLIST\n*\nHELENTRY DS    0D                       DIRECTORY ENTRY FOR FIND\nHELNAME  DS    CL8                        NAME\nHELTTRC  DS    XL3,XL1                    TTR AND C FIELDS\n*\nPDSENTRY DS    0D                       DIRECTORY ENTRY FOR FIND\nPDSNAME  DS    CL8                        NAME\nPDSTTRC  DS    XL3,XL1                    TTR AND C FIELDS\n*\n         READ  HELDECB,SF,MF=L          DECB\nHELDECBL EQU   *-HELDECB\n         READ  PDSDECB,SF,MF=L          DECB\nPDSDECBL EQU   *-PDSDECB\n*\nOPENL    OPEN  (,,,),MF=L               OPEN PARM LIST\nOPENLLN  EQU   *-OPENL\nCLOSL    CLOSE (,,),MF=L                CLOSE PARM LIST\nCLOSLLN  EQU   *-CLOSL\n*\nOPENS    OPEN  (,),MF=L                 SYSPRINT OPEN PARM LIST\nOPENSLN  EQU   *-OPENS\nCLOSS    CLOSE (),MF=L                  SYSPRINT CLOSE PARM LIST\nCLOSSLN  EQU   *-CLOSS\n*\nOPENEL   OPEN  (,),MF=L                 EXCEPTION OPEN PARM LIST\nOPENELN  EQU   *-OPENEL\nCLOSEL   CLOSE (),MF=L                  EXCEPTION CLOSE PARM LIST\nCLOSELN  EQU   *-CLOSEL\n*\nEXINREC  DS    CL80                     EXCEPTION INPUT RECORD\n*\nEX       GTEDADAT  DSNAM=SYS1.GTEU.EXCEPTNS,                           X\n               RTDDN=X,STATS=SHR,MAP=ONLY\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PO,DEVD=DA        DCB\n*\n         IEFZB4D0                          SVC-99 CONTROL BLOCKS\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  IKJEFF18 CONTROL BLOCKS\n*\nHELBLOCK DSECT\n         DS     CL1                     INPUT HELP BLOCK\n*\nPDSBLOCK DSECT\n         DS     CL1                     INPUT CLIST BLOCK\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA00": {"ttr": 2569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA00'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      THIS IS A QUICK AND DIRTY TO CHECK ALL THE GTEUANN         ***\n***      SUBROUTINES FOR AN UPDATE.                                 ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAPARM   BAL   RBAL,PARM                CHECK PARM\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA10    BAL   RBAL,A10PROC             GET PANDIR, PANCOM, NEXTNAME\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA30A   MVC   GU01NAM(8),PARMNAME      GET NAME FROM PARM\n         BAL   RBAL,A30PROC             GET STATS AND COPY OF MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA70    BAL   RBAL,A70PROC             UPDATE STATS, STOW PDS MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA30B   BAL   RBAL,A30PROC             GET STATS AND COPY OF NEW MEMBR\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA40    BAL   RBAL,A40PROC             COMPARE NEW PDS WITH OLD PAN\n         CLC   RETCDE,=F'16'\n         BNL   END12\n*\nMAA50    BAL   RBAL,A50PROC             CREATE PAN COMMENT FROM STATS\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA60    BAL   RBAL,A60PROC             ++ADD THE MEMBER TO PANVALET\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PARM FOR PROPER LENGTH, THEN 'OR' ONTO X'40' FIELD      ***\n***  TO MOVE CAPITAL VALUES INTO STORAGE.                          ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PARMNAME(8),BLANKS       CLEAR PARM AREA\n         L     R2,0(0,R1)               R2 POINTS TO PARM LENGTH\n         LH    R3,0(0,R2)               R3 HAS PARM LENGTH\n         C     R3,=F'8'                 IF PARM CHARS GT 8\n         BH    PARET04                    SHUT DOWN\n         C     R3,=F'1'                 IF PARM CHARS LT 1\n         BL    PARET04                    SHUT DOWN\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMNAME(*-*),2(R2)        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GIVEN PARMNAME, GET THE PANVALET DIRECTORY ENTRY, PANVALET    ***\n***  COMMENT, AND COMPUTE THE NEXT PANVALET NAME.                  ***\n***                                                                ***\n**********************************************************************\nA10PROC  ST    RBAL,A10BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA10CLEAR MVC   PANDIR(PANDIRLN),BLANKS  CLEAR THE PANVALET DIRECTORY\n         MVC   GU04NAML(8),PARMNAME     PUT THE NAME IN\n         MVC   PANCOM(PANCOMLN),BLANKS  CLEAR THE COMMENT AREA\n         MVC   PANNEXT(10),BLANKS       CLEAR THE NEXTNAME FIELD\n         NI    SWITCH1,X'FF'-X'80'      TURN OFF PANFOUND SWITCH\n*\nA10CALL  LA    R15,UPDATE               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+12            INTO PARM LIST\n         LA    R15,PANDDN               PARM ADDRESS\n         ST    R15,PARMLIST+16            INTO PARM LIST\n         OI    PARMLIST+16,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA10)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'4'             IF R/C GT 4,\n         BH    A10RET04                   ERROR ENDING\n         CLC   RETCDE,=F'0'             IF R/C EQ 0\n         BNE   *+8                        THEN\n         OI    SWITCH1,X'80'                TURN ON PANFOUND SWITCH\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A10END\n*\nA10RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A10END                   BRANCH TO ENDING\n*\nA10END   L     RBAL,A10BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET THE ISPF STATS, OR DUMMY STATS, FOR THE INPUT NAME        ***\n***                                                                ***\n**********************************************************************\nA30PROC  ST    RBAL,A30BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA30INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND INITIALIZE  OPEN PARM LIST\n         OPEN  (PDSDCB,(INPUT)),MF=(E,PDSOPN)       OPEN THE DATASET\n*\n         XC    GU01TTR(DIRENTLN-(GU01TTR-DIRENT)),GU01TTR  CLEAR STATS\n*\nA30CALL  LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         OI    PARMLIST+04,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA30)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'8'             IF R/C GT 8,\n         BH    A30RET04                   ERROR ENDING\n         CLC   RETCDE,=F'8'             IF R/C LT 8\n         BNL   *+8                        THEN\n         OI    SWITCH1,X'40'                TURN ON PDSFOUND SWITCH\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A30END\n*\nA30RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A30END                   BRANCH TO ENDING\n*\nA30END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A30BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  COMPARE COPY OF PDS MEMBER IN WORK FILE WITH CURRENT PAN MEMB ***\n***  FIELD GU04NAML HAS CURRENT NAME AFTER PROCEDURE A10PROC.      ***\n***                                                                ***\n**********************************************************************\nA40PROC  ST    RBAL,A40BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA40SKIP  TM    SWITCH1,B'11000000'      IF EITHER WAS NOT FOUND\n         BNO   A40END                     SKIP THIS QUIETLY\n*\nA40INIT  MVC   PANLAST(10),GU04NAML     COPY CURRENT PANVALET NAME\n*\nA40CALL  LA    R15,PANLAST              PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         OI    PARMLIST+00,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA40)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         B     A40END\n*\nA40RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A40END                   BRANCH TO ENDING\n*\nA40END   L     RBAL,A40BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE PAN COMMENT FROM ISPF STATS                            ***\n***  STATS ARE IN DIRENT AREA ALREADY FROM GTEUA30.                ***\n***  COMMENT WILL GO INTO PANCOM AREA.                             ***\n***                                                                ***\n**********************************************************************\nA50PROC  ST    RBAL,A50BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA50CALL  LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         OI    PARMLIST+04,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA50)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,F0                IF RETURN NOT ZERO\n         BNE   A50RET04                   GO TO ERROR RETURN\n*\n         B     A50END\n*\nA50RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A50END                   BRANCH TO ENDING\n*\nA50END   L     RBAL,A50BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE PAN#1 TO '++ADD' THE MEMBER TO PANVALET                ***\n***                                                                ***\n**********************************************************************\nA60PROC  ST    RBAL,A60BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA60CALL  LA    R15,UPDATE               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         OI    PARMLIST+08,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA60)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,F0                IF RETURN NOT ZERO\n         BNE   A60RET04                   GO TO ERROR RETURN\n*\n         B     A60END\n*\nA60RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A60END                   BRANCH TO ENDING\n*\nA60END   L     RBAL,A60BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  UPDATE PDS, UPDATE STATS, STOW THE STATS.                     ***\n***                                                                ***\n**********************************************************************\nA70PROC  ST    RBAL,A70BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA70INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND  INITIALIZE OPEN PARM LIST\n         OPEN  (PDSDCB,(OUTPUT)),MF=(E,PDSOPN)      OPEN THE DATASET\n*\nA70STATS XR    R2,R2                    CLEAR R2 FOR INSERT\n         IC    R2,GU01MOD               R2 IS CURRENT MOD NUMBER\n         LA    R2,1(0,R2)               R2 IS NEXT MOD NUMBER\n         C     R2,=F'99'                IF MOD NUMBER NOW GT 99\n         BNH   *+8                        THEN\n         LA    R2,1(0,0)                    RESET IT TO 1\n         STC   R2,GU01MOD               STORE THE NEW MOD NUMBER\n*\nA70CALL  LA    R15,UPDATE               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         OI    PARMLIST+08,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA70)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'0'             IF R/C NE 0,\n         BNE   A70RET04                   ERROR ENDING\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A70END\n*\nA70RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A70END                   BRANCH TO ENDING\n*\nA70END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A70BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANDDN   DC    CL8'PANDD1'              PANVALET DDNAME\nPDSDDN   DC    CL8'PDS'                 PDS DDNAME\nUPDATE   DC    CL12'UPDATE'             FUNCTION NAME\n*\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSOPND  OPEN  (,),MF=L\nPDSCLSD  CLOSE (,),MF=L\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nA10BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA30BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA40BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA50BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA60BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA70BALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nPARMNAME DS    CL8                      INPUT PARM NAME\n*\nPARMLIST DS    5A                       PARM LIST FOR SUBROUTINES\n*\n         EJECT\nDIRENT   GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRENTLN EQU   *-DIRENT\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n         EJECT\nPANNEXT  DS    CL10                     PANVALET NEXT NAME\nPANLAST  DS    CL10                     PANVALET LAST NAME\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PAN MEMBER FOUND\n*                .1......               X'40' - PDS MEMBER FOUND\n*                ..111111               (NOT USED)\n*\nPDSOPN   OPEN  (,),MF=L\nPDSOPNLN EQU   *-PDSOPN\nPDSCLS   CLOSE (,),MF=L\nPDSCLSLN EQU   *-PDSCLS\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSDCBLN EQU   *-PDSDCB\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PS,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA01": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA01'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      THIS IS A QUICK AND DIRTY TO CHECK ALL THE GTEUANN         ***\n***      SUBROUTINES FOR A RESTORE.                                 ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCH AREA\n*\n         MVC   FUNCTION(12),RESTORE     SET RESTORE FUNCTION\n*\nMAPARM   BAL   RBAL,PARM                CHECK PARM\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA10    BAL   RBAL,A10PROC             GET PANDIR, PANCOM, NEXTNAME\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA60    BAL   RBAL,A60PROC             ++WRITE THE MEMBER TO PDS\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA80    BAL   RBAL,A80PROC             STOW ISPF STATS INTO PDS\n         CLC   RETCDE,=F'4'             IF RETURN GT 4\n         BH    END12                      GO TO HIGH ENDING\n         BE    END04                    ELSE IF 4, GO TO 4 END\n         B     END00                    ELSE GO TO 0 END\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND04    LA    R15,04                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PARM FOR PROPER LENGTH, THEN 'OR' ONTO X'40' FIELD      ***\n***  TO MOVE CAPITAL VALUES INTO STORAGE.                          ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PARMNAME,BLANKS          CLEAR PARM AREA\n         L     R2,0(0,R1)               R2 POINTS TO PARM LENGTH\n         LH    R3,0(0,R2)               R3 HAS PARM LENGTH\n         C     R3,=F'10'                IF PARM CHARS GT 10\n         BH    PARET04                    SHUT DOWN\n         C     R3,=F'3'                 IF PARM CHARS LT 3\n         BL    PARET04                    SHUT DOWN\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMNAME(*-*),2(R2)        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GIVEN PARMNAME, GET THE PANVALET DIRECTORY ENTRY, PANVALET    ***\n***  COMMENT, AND COMPUTE THE NEXT PANVALET NAME.                  ***\n***                                                                ***\n**********************************************************************\nA10PROC  ST    RBAL,A10BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA10CLEAR MVC   PANDIR(PANDIRLN),BLANKS  CLEAR THE PANVALET DIRECTORY\n         MVC   GU04NAML(10),PARMNAME     PUT THE NAME IN\n         MVC   PANCOM(PANCOMLN),BLANKS  CLEAR THE COMMENT AREA\n         MVC   PANNEXT(10),BLANKS       CLEAR THE NEXTNAME FIELD\n         NI    SWITCH1,X'FF'-X'80'      TURN OFF PANFOUND SWITCH\n*\nA10CALL  LA    R15,FUNCTION             PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+12            INTO PARM LIST\n         LA    R15,PANDDN               PARM ADDRESS\n         ST    R15,PARMLIST+16            INTO PARM LIST\n         OI    PARMLIST+16,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA10)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'0'             IF R/C GT 0,\n         BH    A10RET04                   GO TO ERROR ENDING\n         OI    SWITCH1,X'80'            ELSE TURN ON PANFOUND SWITCH\n*\n         B     A10END\n*\nA10RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A10END                   BRANCH TO ENDING\n*\nA10END   L     RBAL,A10BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE PAN#1 TO '++WRITE' THE MEMBER TO THE PDS               ***\n***                                                                ***\n**********************************************************************\nA60PROC  ST    RBAL,A60BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA60CALL  LA    R15,FUNCTION             PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+12            INTO PARM LIST\n         OI    PARMLIST+12,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA60)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,F0                IF RETURN NOT ZERO\n         BNE   A60RET04                   GO TO ERROR RETURN\n*\n         B     A60END\n*\nA60RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A60END                   BRANCH TO ENDING\n*\nA60END   L     RBAL,A60BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CONVERT PAN COMMENT TO ISPF STATISTICS THEN STOW THEM.        ***\n***                                                                ***\n**********************************************************************\nA80PROC  ST    RBAL,A80BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA80CALL  LA    R15,DIRENTRY             PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         OI    PARMLIST+08,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA80)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         B     A80END\n*\nA80RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A80END                   BRANCH TO ENDING\n*\nA80END   L     RBAL,A80BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANDDN   DC    CL8'PANDD1'              PANVALET FILE NAME\nRESTORE  DC    CL12'RESTORE'            FUNCTION NAME\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nA10BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA60BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA80BALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nFUNCTION DS    CL12                     'UPDATE' 'RESTORE' ETC.\nPARMNAME DS    CL10                     INPUT PARM NAME\nPANNEXT  DS    CL10                     UNUSED PARM FOR RESTORE\n*\nPARMLIST DS    5A                       PARM LIST FOR SUBROUTINES\n*\n         EJECT\nDIRENTRY GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRENTLN EQU   *-DIRENTRY\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n         EJECT\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PAN MEMBER FOUND\n*                ..111111               (NOT USED)\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA02": {"ttr": 3075, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA02'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      THIS IS A QUICK AND DIRTY TO CHECK ALL THE GTEUANN         ***\n***      SUBROUTINES FOR A DELETE.                                  ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAPARM   BAL   RBAL,PARM                CHECK PARM\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA30A   MVC   GU01NAM(8),PARMNAME      GET NAME FROM PARM\n         BAL   RBAL,A30PROC             GET STATS AND COPY OF MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA70    BAL   RBAL,A70PROC             DELETE THE PDS MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PARM FOR PROPER LENGTH, THEN 'OR' ONTO X'40' FIELD      ***\n***  TO MOVE CAPITAL VALUES INTO STORAGE.                          ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PARMNAME(8),BLANKS       CLEAR PARM AREA\n         L     R2,0(0,R1)               R2 POINTS TO PARM LENGTH\n         LH    R3,0(0,R2)               R3 HAS PARM LENGTH\n         C     R3,=F'8'                 IF PARM CHARS GT 8\n         BH    PARET04                    SHUT DOWN\n         C     R3,=F'1'                 IF PARM CHARS LT 1\n         BL    PARET04                    SHUT DOWN\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMNAME(*-*),2(R2)        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET THE ISPF STATS, OR DUMMY STATS, FOR THE INPUT NAME        ***\n***                                                                ***\n**********************************************************************\nA30PROC  ST    RBAL,A30BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA30INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND INITIALIZE  OPEN PARM LIST\n         OPEN  (PDSDCB,(INPUT)),MF=(E,PDSOPN)       OPEN THE DATASET\n*\n         XC    GU01TTR(DIRENTLN-(GU01TTR-DIRENT)),GU01TTR  CLEAR STATS\n*\nA30CALL  LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         OI    PARMLIST+04,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA30)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'8'             IF R/C GT 8,\n         BH    A30RET04                   ERROR ENDING\n         CLC   RETCDE,=F'8'             IF R/C LT 8\n         BNL   *+8                        THEN\n         OI    SWITCH1,X'40'                TURN ON PDSFOUND SWITCH\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A30END\n*\nA30RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A30END                   BRANCH TO ENDING\n*\nA30END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A30BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  UPDATE PDS, UPDATE STATS, STOW THE STATS.                     ***\n***                                                                ***\n**********************************************************************\nA70PROC  ST    RBAL,A70BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA70INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND  INITIALIZE OPEN PARM LIST\n         OPEN  (PDSDCB,(OUTPUT)),MF=(E,PDSOPN)      OPEN THE DATASET\n*\nA70STATS XR    R2,R2                    CLEAR R2 FOR INSERT\n         IC    R2,GU01MOD               R2 IS CURRENT MOD NUMBER\n         LA    R2,1(0,R2)               R2 IS NEXT MOD NUMBER\n         C     R2,=F'99'                IF MOD NUMBER NOW GT 99\n         BNH   *+8                        THEN\n         LA    R2,1(0,0)                    RESET IT TO 1\n         STC   R2,GU01MOD               STORE THE NEW MOD NUMBER\n*\nA70CALL  LA    R15,DELETE               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         OI    PARMLIST+08,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA70)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'0'             IF R/C NE 0,\n         BNE   A70RET04                   ERROR ENDING\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A70END\n*\nA70RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A70END                   BRANCH TO ENDING\n*\nA70END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A70BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANDDN   DC    CL8'PANDD1'              PANVALET DDNAME\nPDSDDN   DC    CL8'PDS'                 PDS DDNAME\nDELETE   DC    CL12'DELETE'             FUNCTION NAME\n*\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSOPND  OPEN  (,),MF=L\nPDSCLSD  CLOSE (,),MF=L\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nA30BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA70BALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nPARMNAME DS    CL8                      INPUT PARM NAME\n*\nPARMLIST DS    5A                       PARM LIST FOR SUBROUTINES\n*\n         EJECT\nDIRENT   GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRENTLN EQU   *-DIRENT\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n         EJECT\nPANNEXT  DS    CL10                     PANVALET NEXT NAME\nPANLAST  DS    CL10                     PANVALET LAST NAME\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PAN MEMBER FOUND\n*                .1......               X'40' - PDS MEMBER FOUND\n*                ..111111               (NOT USED)\n*\nPDSOPN   OPEN  (,),MF=L\nPDSOPNLN EQU   *-PDSOPN\nPDSCLS   CLOSE (,),MF=L\nPDSCLSLN EQU   *-PDSCLS\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSDCBLN EQU   *-PDSDCB\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PS,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA03": {"ttr": 3081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA03'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      THIS IS A QUICK AND DIRTY TO CHECK ALL THE GTEUANN         ***\n***      SUBROUTINES FOR AN ADD OF AN ALIAS.                        ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAPARM   BAL   RBAL,PARM                CHECK PARM\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA30A   MVC   GU01NAM(8),PARMNAME      GET NAME FROM PARM\n         BAL   RBAL,A30PROC             GET STATS AND COPY OF MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA70    BAL   RBAL,A70PROC             DELETE THE PDS MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PARM FOR PROPER LENGTH, THEN 'OR' ONTO X'40' FIELD      ***\n***  TO MOVE CAPITAL VALUES INTO STORAGE.                          ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         BAL   RBAL,PRSE                PARSE THE PARM\n*\n         CLC   RETCDE,F0                IF BAD PARSE\n         BNE   PARET04                    GO TO BAD ENDING\n*\n         LA    R1,8                     R1 HAS MAX LENGTH OF NAME\n         CH    R1,NAME1LN               IF MEMBER NAME LONGER\n         BL    PARET04                    GO TO ERROR ENDING\n         CH    R1,NAME2LN               IF ALIAS NAME LONGER\n         BL    PARET04                    GO TO ERROR ENDING\n*\n         MVC   PARMNAME(8),BLANKS       CLEAR THE PARM NAME\n         LH    R3,NAME1LN               R3 HAS MEMBER NAME LENGTH\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMNAME(*-*),NAME1        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         MVC   PARMALIS(8),BLANKS       CLEAR THE ALIAS NAME\n         LH    R3,NAME2LN               R3 HAS ALIAS NAME LENGTH\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMALIS(*-*),NAME2        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  PARSE THE INPUT PARAMETER STRING, IN THE FORM:                ***\n***         'NAME,ALIAS'                                           ***\n***                                                                ***\n**********************************************************************\nPRSE     ST    RBAL,PRRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R1,R1SAVE                RESTORE R1\n         L     R1,0(0,R1)               R1 POINTS TO PARM LENGTH\n         LH    R2,0(0,R1)               R2 HAS TOTAL LENGTH\n         C     R2,=F'3'                 IF PARM LENGTH LT 3 ('X,X')\n         BL    PRRET04                    GO TO BAD ENDING\n         C     R2,=F'17'                IF PARM LENGTH GT 17\n         BH    PRRET04                    GO TO BAD ENDING\n*\n         XC    NAME1LN,NAME1LN          ZERO TGT LENGTH FIELD\n         MVC   NAME1(8),BLANKS          CLEAR TGT NAME FIELD\n         LA    R3,NAME1-1               R3 POINTS JUST BEFORE TGT NAME\n         LA    R1,1(0,R1)               R1 POINTS JUST BEFORE PARM NAM\n         LA    R4,8                     R4 IS MAX LENGTH OF NAME\nPRLOOP1  LA    R1,1(0,R1)               R1 POINTS TO NEXT PARM CHAR\n         LA    R3,1(0,R3)               R3 POINTS TO NEXT TGT CHAR\n         CLI   0(R1),C','               IF NEXT CHAR IS DELIMITER\n         BE    PRLOOP1X                   GO TO LOOP EXIT\n         MVC   0(1,R3),0(R1)            MOVE PARM CHAR TO TGT CHAR\n         BCTR  R2,0                     R2 IS REMAINING PARM CHARS\n         LTR   R2,R2                    IF NONE REMAIN\n         BNP   PRRET04                    ERROR, NO SECOND PARM, END\n         BCT   R4,PRLOOP1               LOOP BACK UP\nPRLOOP1F LA    R1,1(0,R1)               FALLTHRU: POINT TO DELIMITER\n         CLI   0(R1),C','                         IF NOT DELIMITER\n         BNE   PRRET04                              BAD PARM, END\n         LA    R3,1(0,R3)                         POINT AFTER TGT\nPRLOOP1X LA    R0,NAME1                 LOOPEXIT: R0 POINTS TO TGT NAM\n         SR    R3,R0                              R3 IS LEN OF TGT NAM\n         BNP   PRRET04                            IF ZERO, ERROR, END\n         STH   R3,NAME1LN                         SAVE THE LENGTH\n*\nPRDELIM  LA    R1,1(0,R1)               R1 POINTS BEYOND DELIMITER\n         BCTR  R2,0                     R2 IS CHARS REMAINING\n         LTR   R2,R2                    IF NONE REMAIN\n         BNP   PRRET04                    ERROR, NO SECOND PARM, END\n         C     R2,=F'8'                 IF MORE THAN 8 CHARS LEFT\n         BH    PRRET04                    ERROR, PARM TOO LONG, END\n*\nPRPARM2  XC    NAME2LN,NAME2LN          ZERO THE TARGET LENGTH\n         MVC   NAME2(8),BLANKS          CLEAR THE TARGET NAME FIELD\n         STH   R2,NAME2LN               SAVE THE LENGTH\n         BCTR  R2,0                     R2 IS LENGTH-1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   NAME2(0),0(R1)             MOVE PARM TO TARGET\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\n         B     PREND\n*\nPRRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PREND                    BRANCH TO ENDING\n*\nPREND    L     RBAL,PRRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET THE ISPF STATS, OR DUMMY STATS, FOR THE INPUT NAME        ***\n***                                                                ***\n**********************************************************************\nA30PROC  ST    RBAL,A30BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA30INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND INITIALIZE  OPEN PARM LIST\n         OPEN  (PDSDCB,(INPUT)),MF=(E,PDSOPN)       OPEN THE DATASET\n*\n         XC    GU01TTR(DIRENTLN-(GU01TTR-DIRENT)),GU01TTR  CLEAR STATS\n*\nA30CALL  LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         OI    PARMLIST+04,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA30)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'8'             IF R/C GT 8,\n         BH    A30RET04                   ERROR ENDING\n         CLC   RETCDE,=F'8'             IF R/C LT 8\n         BNL   *+8                        THEN\n         OI    SWITCH1,X'40'                TURN ON PDSFOUND SWITCH\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A30END\n*\nA30RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A30END                   BRANCH TO ENDING\n*\nA30END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A30BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  UPDATE PDS, STOW THE STATS                                    ***\n***                                                                ***\n**********************************************************************\nA70PROC  ST    RBAL,A70BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA70INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND  INITIALIZE OPEN PARM LIST\n         OPEN  (PDSDCB,(OUTPUT)),MF=(E,PDSOPN)      OPEN THE DATASET\n*\nA70CALL  LA    R15,ALIAS                PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         LA    R15,PARMALIS             PARM ADDRESS\n         ST    R15,PARMLIST+12            INTO PARM LIST\n         OI    PARMLIST+12,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA70)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'0'             IF R/C NE 0,\n         BNE   A70RET04                   ERROR ENDING\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A70END\n*\nA70RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A70END                   BRANCH TO ENDING\n*\nA70END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A70BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANDDN   DC    CL8'PANDD1'              PANVALET DDNAME\nPDSDDN   DC    CL8'PDS'                 PDS DDNAME\nALIAS    DC    CL12'ALIAS'              FUNCTION NAME\n*\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSOPND  OPEN  (,),MF=L\nPDSCLSD  CLOSE (,),MF=L\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nA30BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA70BALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPRRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nPARMNAME DS    CL8                      INPUT PARM NAME\nPARMALIS DS    CL8                      INPUT PARM NAME\n*\nPARMLIST DS    5A                       PARM LIST FOR SUBROUTINES\n*\n         EJECT\nDIRENT   GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRENTLN EQU   *-DIRENT\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n         EJECT\nPANNEXT  DS    CL10                     PANVALET NEXT NAME\nPANLAST  DS    CL10                     PANVALET LAST NAME\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PAN MEMBER FOUND\n*                .1......               X'40' - PDS MEMBER FOUND\n*                ..111111               (NOT USED)\n*\nPDSOPN   OPEN  (,),MF=L\nPDSOPNLN EQU   *-PDSOPN\nPDSCLS   CLOSE (,),MF=L\nPDSCLSLN EQU   *-PDSCLS\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSDCBLN EQU   *-PDSDCB\n*\nNAME1LN  DS    H                        PARSE PARM BLOCK FOR NAME\nNAME1    DS    CL8\nNAME2LN  DS    H                        PARSE PARM BLOCK FOR ALIAS\nNAME2    DS    CL8\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PS,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA04": {"ttr": 3333, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA04'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      THIS IS A QUICK AND DIRTY TO CHECK ALL THE GTEUANN         ***\n***      SUBROUTINES FOR A STATS.                                   ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCH AREA\n*\n         MVC   FUNCTION(12),STATS       SET RESTORE FUNCTION\n*\nMAPARM   BAL   RBAL,PARM                CHECK PARM\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA10    BAL   RBAL,A10PROC             GET PANDIR, PANCOM, NEXTNAME\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\n         B     END00                    ELSE GO TO 0 END\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND04    LA    R15,04                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PARM FOR PROPER LENGTH, THEN 'OR' ONTO X'40' FIELD      ***\n***  TO MOVE CAPITAL VALUES INTO STORAGE.                          ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PARMNAME,BLANKS          CLEAR PARM AREA\n         L     R2,0(0,R1)               R2 POINTS TO PARM LENGTH\n         LH    R3,0(0,R2)               R3 HAS PARM LENGTH\n         C     R3,=F'8'                 IF PARM CHARS GT 8\n         BH    PARET04                    SHUT DOWN\n         C     R3,=F'1'                 IF PARM CHARS LT 1\n         BL    PARET04                    SHUT DOWN\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMNAME(*-*),2(R2)        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GIVEN PARMNAME, GET THE PANVALET DIRECTORY ENTRY, PANVALET    ***\n***  COMMENT, AND COMPUTE THE NEXT PANVALET NAME.                  ***\n***                                                                ***\n**********************************************************************\nA10PROC  ST    RBAL,A10BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA10CLEAR MVC   PANDIR(PANDIRLN),BLANKS  CLEAR THE PANVALET DIRECTORY\n         MVC   GU04NAML(10),PARMNAME     PUT THE NAME IN\n         MVC   PANCOM(PANCOMLN),BLANKS  CLEAR THE COMMENT AREA\n         MVC   PANNEXT(10),BLANKS       CLEAR THE NEXTNAME FIELD\n         NI    SWITCH1,X'FF'-X'80'      TURN OFF PANFOUND SWITCH\n*\nA10CALL  LA    R15,FUNCTION             PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+12            INTO PARM LIST\n         LA    R15,PANDDN               PARM ADDRESS\n         ST    R15,PARMLIST+16            INTO PARM LIST\n         OI    PARMLIST+16,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA10)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'0'             IF R/C GT 0,\n         BH    A10RET04                   GO TO ERROR ENDING\n         OI    SWITCH1,X'80'            ELSE TURN ON PANFOUND SWITCH\n*\n         B     A10END\n*\nA10RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A10END                   BRANCH TO ENDING\n*\nA10END   L     RBAL,A10BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANDDN   DC    CL8'PANDD1'              PANVALET FILE NAME\nSTATS    DC    CL12'STATS'              FUNCTION NAME\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nA10BALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nFUNCTION DS    CL12                     'UPDATE' 'RESTORE' ETC.\nPARMNAME DS    CL10                     INPUT PARM NAME\nPANNEXT  DS    CL10                     UNUSED PARM FOR RESTORE\n*\nPARMLIST DS    5A                       PARM LIST FOR SUBROUTINES\n*\n         EJECT\nDIRENTRY GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRENTLN EQU   *-DIRENTRY\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n         EJECT\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PAN MEMBER FOUND\n*                ..111111               (NOT USED)\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA05": {"ttr": 3338, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA05'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      THIS IS A QUICK AND DIRTY TO CHECK ALL THE GTEUANN         ***\n***      SUBROUTINES FOR A BACKUP.                                  ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAPARM   BAL   RBAL,PARM                CHECK PARM\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA10    BAL   RBAL,A10PROC             GET PANDIR, PANCOM, NEXTNAME\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA30A   MVC   GU01NAM(8),PARMNAME      GET NAME FROM PARM\n         BAL   RBAL,A30PROC             GET STATS AND COPY OF MEMBER\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA50    BAL   RBAL,A50PROC             CREATE PAN COMMENT FROM STATS\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\nMAA60    BAL   RBAL,A60PROC             ++ADD THE MEMBER TO PANVALET\n         CLC   RETCDE,=F'4'\n         BNL   END12\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PARM FOR PROPER LENGTH, THEN 'OR' ONTO X'40' FIELD      ***\n***  TO MOVE CAPITAL VALUES INTO STORAGE.                          ***\n***                                                                ***\n**********************************************************************\nPARM     ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PARMNAME(8),BLANKS       CLEAR PARM AREA\n         L     R2,0(0,R1)               R2 POINTS TO PARM LENGTH\n         LH    R3,0(0,R2)               R3 HAS PARM LENGTH\n         C     R3,=F'8'                 IF PARM CHARS GT 8\n         BH    PARET04                    SHUT DOWN\n         C     R3,=F'1'                 IF PARM CHARS LT 1\n         BL    PARET04                    SHUT DOWN\n         BCTR  R3,0                     R3 IS LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND OR\n         OC    PARMNAME(*-*),2(R2)        CAPITALIZE INTO STORAGE\n         EX    R3,*-6                   EXECUTE THE OR\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GIVEN PARMNAME, GET THE PANVALET DIRECTORY ENTRY, PANVALET    ***\n***  COMMENT, AND COMPUTE THE NEXT PANVALET NAME.                  ***\n***                                                                ***\n**********************************************************************\nA10PROC  ST    RBAL,A10BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA10CLEAR MVC   PANDIR(PANDIRLN),BLANKS  CLEAR THE PANVALET DIRECTORY\n         MVC   GU04NAML(8),PARMNAME     PUT THE NAME IN\n         MVC   PANCOM(PANCOMLN),BLANKS  CLEAR THE COMMENT AREA\n         MVC   PANNEXT(10),BLANKS       CLEAR THE NEXTNAME FIELD\n         NI    SWITCH1,X'FF'-X'80'      TURN OFF PANFOUND SWITCH\n*\nA10CALL  LA    R15,BACKUP               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+12            INTO PARM LIST\n         LA    R15,PANDDN               PARM ADDRESS\n         ST    R15,PARMLIST+16            INTO PARM LIST\n         OI    PARMLIST+16,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA10)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'4'             IF R/C GT 4,\n         BH    A10RET04                   ERROR ENDING\n         CLC   RETCDE,=F'0'             IF R/C EQ 0\n         BNE   *+8                        THEN\n         OI    SWITCH1,X'80'                TURN ON PANFOUND SWITCH\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A10END\n*\nA10RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A10END                   BRANCH TO ENDING\n*\nA10END   L     RBAL,A10BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET THE ISPF STATS, OR DUMMY STATS, FOR THE INPUT NAME        ***\n***                                                                ***\n**********************************************************************\nA30PROC  ST    RBAL,A30BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA30INIT  MVC   PDSDCB(PDSDCBLN),PDSDCBD             INITIALIZE THE DCB\n         MVC   PDSDCB+(DCBDDNAM-IHADCB)(8),PDSDDN   SET THE DDNAME\n         MVC   PDSOPN(PDSOPNLN),PDSOPND INITIALIZE  OPEN PARM LIST\n         OPEN  (PDSDCB,(INPUT)),MF=(E,PDSOPN)       OPEN THE DATASET\n*\n         XC    GU01TTR(DIRENTLN-(GU01TTR-DIRENT)),GU01TTR  CLEAR STATS\n*\nA30CALL  LA    R15,PDSDCB               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         OI    PARMLIST+04,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA30)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,=F'8'             IF R/C GE 8,\n         BNL   A30RET04                   ERROR ENDING\n         OI    SWITCH1,X'40'            ELSE TURN ON PDSFOUND SWITCH\n         XC    RETCDE,RETCDE            SET R/C EQ 0\n*\n         B     A30END\n*\nA30RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A30END                   BRANCH TO ENDING\n*\nA30END   MVC   PDSCLS(PDSCLSLN),PDSCLSD INITIALIZE  CLOSE PARM LIST\n         CLOSE (PDSDCB),MF=(E,PDSCLS)               CLOSE THE DATASET\n         L     RBAL,A30BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE PAN COMMENT FROM ISPF STATS                            ***\n***  STATS ARE IN DIRENT AREA ALREADY FROM GTEUA30.                ***\n***  COMMENT WILL GO INTO PANCOM AREA.                             ***\n***                                                                ***\n**********************************************************************\nA50PROC  ST    RBAL,A50BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA50CALL  LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,DIRENT               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         OI    PARMLIST+04,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA50)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,F0                IF RETURN NOT ZERO\n         BNE   A50RET04                   GO TO ERROR RETURN\n*\n         B     A50END\n*\nA50RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A50END                   BRANCH TO ENDING\n*\nA50END   L     RBAL,A50BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE PAN#1 TO '++ADD' THE MEMBER TO PANVALET                ***\n***                                                                ***\n**********************************************************************\nA60PROC  ST    RBAL,A60BALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA60CALL  LA    R15,BACKUP               PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANNEXT              PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         OI    PARMLIST+08,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA60)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*\n         CLC   RETCDE,F0                IF RETURN NOT ZERO\n         BNE   A60RET04                   GO TO ERROR RETURN\n*\n         B     A60END\n*\nA60RET04 LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A60END                   BRANCH TO ENDING\n*\nA60END   L     RBAL,A60BALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANDDN   DC    CL8'PANDD1'              PANVALET DDNAME\nPDSDDN   DC    CL8'PDS'                 PDS DDNAME\nBACKUP   DC    CL12'BACKUP'             FUNCTION NAME\n*\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSOPND  OPEN  (,),MF=L\nPDSCLSD  CLOSE (,),MF=L\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nA10BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA30BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA50BALSV DS    F                        RETURN ADDRESS SAVE AREA\nA60BALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nPARMNAME DS    CL8                      INPUT PARM NAME\n*\nPARMLIST DS    5A                       PARM LIST FOR SUBROUTINES\n*\n         EJECT\nDIRENT   GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRENTLN EQU   *-DIRENT\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n         EJECT\nPANNEXT  DS    CL10                     PANVALET NEXT NAME\nPANLAST  DS    CL10                     PANVALET LAST NAME\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - PAN MEMBER FOUND\n*                .1......               X'40' - PDS MEMBER FOUND\n*                ..111111               (NOT USED)\n*\nPDSOPN   OPEN  (,),MF=L\nPDSOPNLN EQU   *-PDSOPN\nPDSCLS   CLOSE (,),MF=L\nPDSCLSLN EQU   *-PDSCLS\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSDCBLN EQU   *-PDSDCB\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PS,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA1T": {"ttr": 3590, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA1T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      CODE TO TEST GTEUA10                                       ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         MVC   DDNAME(8),PANDD1         INITIALIZE DDNAME\n         MVC   GU04NAML(10),TESTNAME    INITIALIZE NAME FIELD\n         MVC   FUNCTION(12),TESTFUNC    INITIALIZE FUNCTION FIELD\n*\n         LA    R15,FUNCTION             ADDR OF PARM\n         ST    R15,PARM10+00              INTO PARM LIST\n         LA    R15,PANDIR               ADDR OF PARM\n         ST    R15,PARM10+04              INTO PARM LIST\n         LA    R15,PANCOM               ADDR OF PARM\n         ST    R15,PARM10+08              INTO PARM LIST\n         LA    R15,NEXTNAME             ADDR OF PARM\n         ST    R15,PARM10+12              INTO PARM LIST\n         LA    R15,DDNAME               ADDR OF PARM\n         ST    R15,PARM10+16              INTO PARM LIST\n         OI    PARM10+16,X'80'          MARK END OF LIST\n         LA    R1,PARM10                R1 POINTS TO LIST\n         L     R15,=V(GTEUA10)          R15 POINTS TO SUBPROGRAM\n         BALR  R14,R15                  CALL THE SUBPROGRAM\n         ST    R15,COMPCODE             SAVE THE COMPLETION CODE\n*\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\nPANDD1   DC    CL8'PANDD1'              LITERAL\nTESTNAME DC    CL10'TESTNAME'           LITERAL\nTESTFUNC DC    CL12'UPDATE'             LITERAL\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\nPARM10   DS    5A                       PARM LIST FOR SUBPROGRAM\n*\nFUNCTION DS    CL12                     FUNCTION PARM\nNEXTNAME DS    CL10                     NEXT PANVALET NAME\nDDNAME   DS    CL8                      DDNAME FOR PANVALET FILE\n*\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT ENTRY\nPANCOMLN EQU   *-PANCOM\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA10": {"ttr": 3594, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA10'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUA10                                      ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***                                                             GU00301\n***   RESTORE and UPDATE functions -                            GU00301\n***                                                             GU00301\n***    The function of this program is to accept a character       ***\n***    string, such as 'NAME', then find information from the      ***\n***    Panvalet library directory for the highest name in the      ***\n***    pattern 'NAMEnn', where 'nn' is '01' to '99'.  This         ***\n***    program will return comment and directory information,      ***\n***    and will also return the next name in the sequence.         ***\n***                                                                ***\n***    If the input name is ARGLE, and the Panvalet library        ***\n***    has members ARGLE01, ARGLE02, and ARGLE03, this program     ***\n***    will return directory and comment information about         ***\n***    ARGLE03, and will return the name ARGLE04 as the next name  ***\n***    in the sequence.                                            ***\n***                                                                ***\n***    The first parm is a 12-character field with the function    ***\n***    name (e.g. UPDATE, RESTORE) in it.  The sequence, above,    ***\n***    is used when the function is UPDATE, returning information  ***\n***    about the current entry, and computing the name of the      ***\n***    next entry.  If RESTORE is selected, the assumption is that ***\n***    the input name is not a pattern, but is the precise name of ***\n***    the member the caller is interested in.  Panvalet directory ***\n***    and comment information is returned about that member, and  ***\n***    the next name in the sequence is not computed.              ***\n***                                                             GU00301\n***   STATS function -                                          GU00301\n***                                                             GU00301\n***    The STATS function will display statistics from the      GU00301\n***    Panvalet library and the PDS.  If the name provided is   GU00301\n***    ARGLE, and if ARGLE01, ARGLE02, and ARGLE03 exist in the GU00301\n***    Panvalet library, information about all of these members GU00301\n***    will be displayed on the SYSPRINT file.  This is the     GU00301\n***    only time SYSPRINT and PDS are opened, and the only time GU00301\n***    there is a call to GTEUA50 to convert ISPF statistics    GU00301\n***    into Panvalet comment statistics.                        GU00301\n***                                                                ***\n***  The following sample code would invoke this program:          ***\n***                                                                ***\n*** *------------------------------------------------------------  ***\n***          LA    R15,FUNCTION             ADDR OF PARM           ***\n***          ST    R15,PARM10+00              INTO PARM LIST       ***\n***          LA    R15,PANDIR               ADDR OF PARM           ***\n***          ST    R15,PARM10+04              INTO PARM LIST       ***\n***          LA    R15,PANCOM               ADDR OF PARM           ***\n***          ST    R15,PARM10+08              INTO PARM LIST       ***\n***          LA    R15,NEXTNAME             ADDR OF PARM           ***\n***          ST    R15,PARM10+12              INTO PARM LIST       ***\n***          LA    R15,DDNAME               ADDR OF PARM           ***\n***          ST    R15,PARM10+16              INTO PARM LIST       ***\n***          OI    PARM10+16,X'80'          MARK END OF LIST       ***\n***          LA    R1,PARM10                R1 POINTS TO LIST      ***\n***          L     R15,=V(GTEUA10)          R15 POINTS TO SUBPROG  ***\n***          BALR  R14,R15                  CALL THE SUBPROGRAM    ***\n***          ST    R15,COMPCODE             SAVE THE COMP CODE     ***\n*** *------------------------------------------------------------  ***\n*** WORKD    DSECT                                                 ***\n*** *                                                              ***\n*** COMPCODE DS    F                        PROGRAM COMPL CODE     ***\n*** PARM10   DS    5A                       PARM LIST FOR SUBPROG  ***\n*** *                                                              ***\n*** PANDIR   GTEUM04 DSECT=NO               PANVALET DIR ENTRY     ***\n*** PANCOM   GTEUM03 DSECT=NO               PANVALET COMMNT ENTRY  ***\n*** FUNCTION DS    CL12                    'RESTORE' 'UPDATE' ETC. ***\n*** NEXTNAME DS    CL10                     NEXT PANVALET NAME     ***\n*** DDNAME   DS    CL8                      DDNAME FOR PAN FILE    ***\n*** *------------------------------------------------------------  ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1.  LOAD the PAM routines into storage, and compute the       ***\n***      entry point addresses for POPEN, PSRCH, PREAD and PCLOSE. ***\n***  2.  Open the Panvalet library.                                ***\n***  3.  Search the directory for the last name in the sequence,   ***\n***      retrieving the directory information and the comments.    ***\n***  4.  Compute the next name in the sequence.                    ***\n***  5.  Close the Panvalet library.                               ***\n***  6.  DELETE the PAM routines.                                  ***\n***                                                                ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. The PAM routines are dynamically loaded as a single module ***\n***     named PAM.  POPEN, PSRCH, PREAD, and PCLOSE are alternate  ***\n***     entry points.  The PAM routines are reusable, but not      ***\n***     reenterable.  Since this program is reenterable, the PAM   ***\n***     routines should not be hard linked into the program.       ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***                                                                ***\n***     00 - Directory/comment for current entry is returned, and  ***\n***          next name has been computed.  Note, next name is not  ***\n***          computed for RESTORE function.                        ***\n***                                                                ***\n***     04 - There was no current entry, and next name has been    ***\n***          computed (e.g. NAME01).  Note, next name is not       ***\n***          computed for RESTORE function.                        ***\n***                                                                ***\n***     12 - Directory/comment for current entry is returned,      ***\n***          but next name could not be computed because the       ***\n***          current name is too high (e.g. current: NAME99).      ***\n***                                                                ***\n***     16 - Failure to open or close the Panvalet library.        ***\n***          Any returned information is unreliable.               ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Linkage conventions, work, macros.               ***\n***     R4-R5   - Work registers, not used to pass information     ***\n***               between routines.                                ***\n***     R6      - (unused)                                         ***\n***     R7      - (unused)                                         ***\n***     R8      - Base address of PANDIR, Panvalet directory info. ***\n***     R9      - Base address of PANCOM, Panvalet comment info.   ***\n***     R10     - Base address of NEXTNAME, returned computed name.***\n***     R11     - Linkage register used with BAL.                  ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage conventions, base of WORKD area.         ***\n***     R14-R15 - Linkage conventions, work, macros.               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     GTEUM01  - Map BLDL entry list                          GU00301\n***     GTEUM02  - Map STOW directory entry                     GU00301\n***     GTEUM03  - Map the Panvalet comment area.                  ***\n***     GTEUM04  - Map the Panvalet directory entry                ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial installation.                                 ***\n***                                                                ***\n***  2.  A.  Add the STATS function.                            GU00301\n***                                                                ***\n***  3.  A.  Fix loop caused by not checking return code from   GU00302\n***          PSRCH after a search for an invalid Panvalet name. GU00302\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAPARM   L     R2,0(0,R1)               R2 POINTS TO FUNCTION PARM\n         MVC   MAFUNCT,0(R2)              MOVE TO STORAGE\n         LM    R8,R10,4(R1)             NEXT 3 PARM ADDRESSES TO REGS\n         USING PANDIR,R8                ADDRESSABILITY\n         USING PANCOM,R9                ADDRESSABILITY\n         USING NEXTNAME,R10             ADDRESSABILITY\n         L     R2,16(0,R1)              R2 POINTS TO PARM #5\n         MVC   DDNAME(8),0(R2)          COPY THE DDNAME IN\n*                                                               GU00301\nMASOPEN  CLC   MAFUNCT(12),MASTATS      IF FUNCTION IS 'STATS'  GU00301\n         BNE   *+8                        THEN                  GU00301\n         BAL   RBAL,SOPEN                 OPEN SYSPRINT, PANDD1 GU00301\n*\nMALOAD   BAL   RBAL,LOAD                LOAD THE PANVALET ROUTINES\n*\nMAOPEN   BAL   RBAL,OPEN                OPEN THE PANVALET LIBRARY\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   END16                      GO TO HIGH RETURN\n*\nMASEARCH BAL   RBAL,SEARCH              FIND THE PANVALET INFORMATION\n         CLC   RETCDE,F0                IF MODULE NOT FOUND\n         BE    MANEXT                     THEN\n         MVC   COMPCODE,F4                  SET COMPLETION CODE TO 4\n*\nMANEXT   BAL   RBAL,NEXT                CREATE THE NEXT NAME\n         CLC   RETCDE,F0                IF NEXTNAME COULDNT BE COMPUTED\n         BNE   END12                      GO TO HIGH RETURN\n*\nMACLOSE  BAL   RBAL,CLOSE               CLOSE THE PANVALET LIBRARY\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   END16                      GO TO HIGH RETURN\n*\nMADELETE BAL   RBAL,DELETE              DELETE THE PANVALET ROUTINES\n*\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nEND00    LA    R15,0                    IF COMPLETION CODE\n         C     R15,COMPCODE               NOT GREATER THAN 00\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   RESET IT\n         B     ENDING                   GO TO ENDING\n*\nEND04    LA    R15,4                    IF COMPLETION CODE\n         C     R15,COMPCODE               NOT GREATER THAN 04\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   RESET IT\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF COMPLETION CODE\n         C     R15,COMPCODE               NOT GREATER THAN 12\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   RESET IT\n         B     ENDING                   GO TO ENDING\n*\nEND16    LA    R15,16                   IF COMPLETION CODE\n         C     R15,COMPCODE               NOT GREATER THAN 16\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   RESET IT\n         B     ENDING                   GO TO ENDING\n*\nENDING   CLC   MAFUNCT(12),MASTATS      IF FUNCTION IS 'STATS'  GU00301\n         BNE   *+8                        THEN                  GU00301\n         BAL   RBAL,SCLOSE                CLOSE SYSPRINT PANDD1 GU00301\n*                                                               GU00301\n         L     R14,COMPCODE             R14 SAVES COMP CODE     GU00301\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*                                                               GU00301\n         EJECT                                                  GU00301\n*************************************************************** GU00301\n***                                                         *** GU00301\n***   OPEN THE SYSPRINT AND PDS FILE USED BY STATS FUNCTION *** GU00301\n***                                                         *** GU00301\n*************************************************************** GU00301\nSOPEN    ST    RBAL,SORBALSV            SAVE RETURN ADDRESS     GU00301\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00301\n*                                                               GU00301\n         MVC   SYSDCB(SYSDCBLN),SYSDCBD  INITIAL SYSPRINT DCB   GU00301\n         MVC   PDSDCB(PDSDCBLN),PDSDCBD  INITIAL PDS DCB        GU00301\n*                                                               GU00301\n         MVC   OPENSL(OPENSLLN),OPENSD   INITIAL OPEN PARM LIST GU00301\n*                                                               GU00301\n         OPEN  (SYSDCB,(OUTPUT),PDSDCB,(INPUT)),MF=(E,OPENSL)   GU00301\n*                                                               GU00301\n         B     SOEND                                            GU00301\n*                                                               GU00301\nSORET04  LA    R15,X'04'                RETURN CODE TO R15      GU00301\n         ST    R15,RETCDE               SAVE IT                 GU00301\n         B     SOEND                    BRANCH TO ENDING        GU00301\n*                                                               GU00301\nSOEND    L     RBAL,SORBALSV            RESTORE RETURN ADDRESS  GU00301\n         BR    RBAL                     RETURN                  GU00301\n*                                                               GU00301\n         SPACE 3                                                GU00301\n*************************************************************** GU00301\n***                                                         *** GU00301\n***  CLOSE THE SYSPRINT AND PDS FILE USED BY STATS FUNCTION *** GU00301\n***                                                         *** GU00301\n*************************************************************** GU00301\nSCLOSE   ST    RBAL,SCRBALSV            SAVE RETURN ADDRESS     GU00301\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00301\n*                                                               GU00301\n         MVC   CLOSSL(CLOSSLLN),CLOSSD   INITIAL CLOSE PARM LST GU00301\n*                                                               GU00301\n         CLOSE (SYSDCB,,PDSDCB),MF=(E,CLOSSL)  CLOSE            GU00301\n*                                                               GU00301\n         B     SCEND                                            GU00301\n*                                                               GU00301\nSCRET04  LA    R15,X'04'                RETURN CODE TO R15      GU00301\n         ST    R15,RETCDE               SAVE IT                 GU00301\n         B     SCEND                    BRANCH TO ENDING        GU00301\n*                                                               GU00301\nSCEND    L     RBAL,SCRBALSV            RESTORE RETURN ADDRESS  GU00301\n         BR    RBAL                     RETURN                  GU00301\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   THE OFFSETS FOR COMPUTING THE ADDRESSES OF POPEN,            ***\n***   PSRCH, PREAD AND PCLOSE, BELOW, ARE TAKEN FROM A MAP         ***\n***   OF THE PAM MODULE AFTER INSTALLATION.  THE DYNAMIC           ***\n***   LOAD, AND THE SUBSEQUENT COMPUTATIONS ARE PERFORMED          ***\n***   BECAUSE THE PAM MODULE IS NOT REENTERABLE, BUT I WANT        ***\n***   THIS MODULE TO BE REENTERABLE.  CHUCK.                       ***\n***                                                                ***\n***  P.S.--                                                        ***\n***   YOU MAY HAVE TO CHANGE THIS CODE WHEN NEW RELEASES OF        ***\n***   THE PANVALET PRODUCT ARE INSTALLED.  SORRY.  CHUCK.          ***\n***                                                                ***\n**********************************************************************\nLOAD     ST    RBAL,LORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LOAD  EP=PAM                   R0 POINTS TO PAM (POPEN)\n         LR    R3,R0                    R3 GETS PTR, BECAUSE OF LA\n         LA    R2,X'0000'(0,R3)         R2 POINTS TO POPEN\n         ST    R2,VPOPEN                  SAVE THE ADDRESS\n         LA    R2,X'00C8'(0,R3)         R2 POINTS TO PSRCH\n         ST    R2,VPSRCH                  SAVE THE ADDRESS\n         LA    R2,X'00F0'(0,R3)         R2 POINTS TO PREAD\n         ST    R2,VPREAD                  SAVE THE ADDRESS\n         LA    R2,X'0118'(0,R3)         R2 POINTS TO PCLOSE\n         ST    R2,VPCLOSE                 SAVE THE ADDRESS\n*\n         B     LOEND\n*\nLORET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     LOEND                    BRANCH TO ENDING\n*\nLOEND    L     RBAL,LORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  DELETE THE PANVALET LOAD MODULE                               ***\n***                                                                ***\n**********************************************************************\nDELETE   ST    RBAL,DERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         DELETE  EP=PAM                 DELETE THE LOAD MODULE\n         XC    VPOPEN,VPOPEN            CLEAR THE POINTER\n         XC    VPSRCH,VPSRCH            CLEAR THE POINTER\n         XC    VPREAD,VPREAD            CLEAR THE POINTER\n         XC    VPCLOSE,VPCLOSE          CLEAR THE POINTER\n*\n         B     DEEND\n*\nDERET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DEEND                    BRANCH TO ENDING\n*\nDEEND    L     RBAL,DERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  OPEN THE PANVALET FILE                                        ***\n***                                                                ***\n**********************************************************************\nOPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nOPINIT   XC    ACTION,ACTION            CLEAR THE ACTION FIELD\n         MVC   BACKUP(8),NOENTRY        SET THE BACKUP FIELD\n*\nOPPARMS  LA    R15,ACTION\n         ST    R15,OPPL+00\n         LA    R15,DDNAME\n         ST    R15,OPPL+04\n         LA    R15,BACKUP\n         ST    R15,OPPL+08\n         OI    OPPL+08,X'80'            MARK END OF LIST\n*\nOPCALL   L     R15,VPOPEN               LOAD ADDRESS OF POPEN\n         LA    R1,OPPL                  POINT TO PARMS\n         BALR  R14,R15                  CALL POPEN\n         LTR   R15,R15                  IF RETURN BAD\n         BNZ   OPRET04                    GO TO HIGH RETURN\n*\n         B     OPEND\n*\nOPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     OPEND                    BRANCH TO ENDING\n*\nOPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE PANVALET FILE                                       ***\n***                                                                ***\n**********************************************************************\nCLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    ACTION,ACTION            CLEAR THE ACTION FIELD\n         LA    R15,ACTION               ADDR OF PARM\n         ST    R15,CLPL+00                INTO PARM LIST\n         OI    CLPL+00,X'80'            MARK THE END OF THE LIST\n         LA    R1,CLPL                  R1 POINTS TO PARM LIST\n         L     R15,VPCLOSE              R15 POINTS TO CLOSE ROUTINE\n         BALR  R14,R15                  CALL THE ROUTINE\n         LTR   R15,R15                  IF BAD RETURN\n         BNZ   CLRET04                    GO TO HIGH RETURN CODE\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  SEARCH FOR THE NEXT PANVALET NAME                             ***\n***                                                                ***\n**********************************************************************\nSEARCH   ST    RBAL,SERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nSEINIT   MVC   NAME1(22),BLANKS         CLEAR NAME1 FIELD\n         MVC   NAME2(11),BLANKS         CLEAR NAME2 FIELD\n         MVC   STNAME(10),GU04NAML      SAVE NAME FOR STATS     GU00301\n*\nSEINIT1  CLC   MAFUNCT,MARESTOR         IF THIS IS A RESTORE\n         BNE   SEINIT2                    THEN\n         MVC   NAME1(10),GU04NAML           USE THE INPUT NAME AS IS\n         MVC   NAME2(10),GU04NAML           DITTO\n         B     SENAMES                      BYPASS NAME GENERATOR CODE\n*\nSEINIT2  LA    R2,8                     SET COUNTER TO EIGHT\n         LA    R3,GU04NAML              R3 POINTS TO INPUT NAME\n         BCTR  R3,0                     R3 POINTS JUST BEFORE NAME\n         LA    R4,NAME1                 R4 POINTS TO BEGIN NAME\n         LA    R5,NAME2                 R5 POINTS TO END NAME\n*\nSELOOP1  LA    R3,1(0,R3)               R3 POINTS TO NEXT CHARACTER\n         CLI   0(R3),X'40'              IF BLANK CHARACTER\n         BE    SESUFFIX                   GO OUT OF LOOP\n         MVC   0(1,R4),0(R3)            MOVE CHARACTER TO NAME1\n         MVC   0(1,R5),0(R3)            MOVE CHARACTER TO NAME2\n         LA    R4,1(0,R4)               INCR NAME1 POINTER\n         LA    R5,1(0,R5)               INCR NAME2 POINTER\n         BCT   R2,SELOOP1               LOOP BACK UP\n*\nSESUFFIX LA    R1,8                     ORIGINAL LENGTH OF SEARCH\n         SR    R1,R2                    R1 AS OFFSET OF SUFFIX\n         ST    R1,SEOFFSET              SAVE IT\n         MVC   0(2,R4),=C'00'           MOVE SUFFIX '00' TO NAME1\n         MVC   0(2,R5),=C'99'           MOVE SUFFIX '99' TO NAME2\n*\nSENAMES  MVC   LASTNAME(10),NAME1       SAVE THE FIRST NAME\n         MVC   NEXTNAME(10),BLANKS      CLEAR THE NEXT NAME\n*\nSECPARMS MVC   PANDIR(PANDIRLN),BLANKS  CLEAR DIRECTORY ENTRY\n         MVC   PANCOM(PANCOMLN),BLANKS  CLEAR COMMENT\n*\nSEPARMS  XC    ACTION,ACTION            CLEAR ACTION FIELD\n         MVC   MYDIR(PANDIRLN),BLANKS   CLEAR DIRECTORY ENTRY\n         MVC   MYCOM(PANCOMLN),BLANKS   CLEAR COMMENT\n         MVC   SUBSET(27),NOENTRY       INITIALIZE SUBSET PARM\n*\nSELIST   LA    R15,ACTION               ADDR OF PARM\n         ST    R15,SEPL+00                INTO LIST\n         LA    R15,MYDIR                ADDR OF PARM\n         ST    R15,SEPL+04                INTO LIST\n         LA    R15,NAME1                ADDR OF PARM\n         ST    R15,SEPL+08                INTO LIST\n         LA    R15,NAME2                ADDR OF PARM\n         ST    R15,SEPL+12                INTO LIST\n         LA    R15,MYCOM                ADDR OF PARM\n         ST    R15,SEPL+16                INTO LIST\n         LA    R15,SUBSET               ADDR OF PARM\n         ST    R15,SEPL+20                INTO LIST\n         OI    SEPL+20,X'80'            MARK END OF LIST\n*\nSECALL   NI    SWITCH0,X'FF'-X'04'      TURN OFF MODULE FOUND SWITCH\n         NI    SWITCH2,X'FF'-X'80'-X'40'  TURN OFF STATS SW'S   GU00301\nSELOOP2  LA    R1,SEPL                  R1 POINTS TO PARM LIST\n         L     R15,VPSRCH               R15 POINTS TO PAN ROUTINE\n         BALR  R14,R15                  CALL PAN ROUTINE\n         LTR   R15,R15                  IF BAD RETURN           GU00302\n         BNZ   SECALLX                    EXIT THE LOOP         GU00302\n         CLC   MYDIR(2),=C'$*'          IF END OF SEARCH\n         BE    SECALLX                    BRANCH OUT\n         OI    SWITCH0,X'04'            TURN ON MODULE FOUND SWITCH\n         MVC   LASTNAME(10),MYDIR+(GU04NAML-PANDIR)  SAVE LAST NAME\n         MVC   PANDIR(PANDIRLN),MYDIR   SAVE THE DIRECTORY ENTRY\n         MVC   PANCOM(PANCOMLN),MYCOM   SAVE THE COMMENT\n         CLC   MAFUNCT,MASTATS          IF THIS IS STATS FUNCT. GU00301\n         BNE   *+8                        THEN                  GU00301\n         BAL   RBAL,STATS                   PERFORM STATS PROC  GU00301\n         B     SELOOP2                  LOOP BACK UP\n*                                                               GU00301\nSECALLX  CLC   MAFUNCT,MASTATS          IF THIS IS STATS FUNCT. GU00301\n         BNE   *+12                       THEN                  GU00301\n         OI    SWITCH2,X'40'                ON PDS STATS SWITCH GU00301\n         BAL   RBAL,STATS                   PERFORM STATS PROC  GU00301\n         TM    SWITCH0,X'04'            IF MODULE WAS NOT FOUND GU00301\n         BNO   SERET04                    GO TO HIGH ENDING\n*\nSERESTL  CLC   MAFUNCT,MARESTOR         IF THIS IS NOT RESTORE\n         BNE   SEEND                      GO TO ENDING\n*\n         LA    R1,7                     R1 IS COUNTER FOR LOOP\nSELOOP3  LA    R2,NAME2+2(R1)           R2 POINTS TO TRAILING CHAR\n         CLI   0(R2),X'40'              IF NONBLANK\n         BNE   *+8                        GET OUT OF LOOP\n         BCT   R1,SELOOP3               ELSE LOOP BACK UP\n         LA    R2,NAME2+2(R1)           R2 POINTS TO TRAILING CHAR\n         BCTR  R2,0                     R2 POINTS TO SUFFIX\n         MVC   0(2,R2),=C'99'           SET ENDING SUFFIX TO '99'\n*\nSELOOP4  LA    R1,SEPL                  R1 POINTS TO PARM LIST\n         L     R15,VPSRCH               R15 POINTS TO PAN ROUTINE\n         BALR  R14,R15                  CALL PAN ROUTINE\n         CLC   MYDIR(2),=C'$*'          IF END OF SEARCH\n         BE    SELOOP4X                   BRANCH OUT\n         MVC   LASTNAME(10),MYDIR+(GU04NAML-PANDIR)  SAVE LAST NAME\n         B     SELOOP4                  LOOP BACK UP\nSELOOP4X NOPR  0                        LOOP EXIT\n*\n         B     SEEND\n*\nSERET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     SEEND                    BRANCH TO ENDING\n*\nSEEND    L     RBAL,SERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*                                                               GU00301\n         EJECT                                                  GU00301\n*************************************************************** GU00301\n***                                                         *** GU00301\n***  DISPLAY PANVALET STATISTICS                            *** GU00301\n***                                                         *** GU00301\n*************************************************************** GU00301\nSTATS    ST    RBAL,STRBALSV            SAVE RETURN ADDRESS     GU00301\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00301\n*                                                               GU00301\n         TM    SWITCH2,X'40'            IF GET PDS STATS SW ON  GU00301\n         BO    STPDS                      GO TO THAT CODE INSTE GU00301\n*                                                               GU00301\nSTHEAD   TM    SWITCH2,X'80'            IF HEADING NOT PRINTED  GU00301\n         BO    STOUT                      THEN                  GU00301\n         MVC   STATLINE(133),BLANKS         CLEAR THE LINE      GU00301\n         MVI   STATLINE,C'1'                FORM EJECT TO LINE  GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG3         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG1         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG2         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         OI    SWITCH2,X'80'                TURN ON HEADING PRI GU00301\n*                                                               GU00301\nSTOUT    MVC   STATLINE(133),BLANKS     CLEAR THE OUTPUT LINE   GU00301\n         MVC   STNAML(10),GU04NAML      PAN NAME TO LINE        GU00301\n         MVC   STSTMT(5),GU04STMT+3     STATEMENT COUNT TO LINE GU00301\n         CLI   GU03VER+L'GU03VER,C'.'   IF THERE IS NO DOT FOLL GU00301\n         BE    STOUT2                     THEN ASSUME NO ISPF S GU00301\n         MVC   STVERMOD(50),GU03VER         JUST PUT COMMENT TO GU00301\n         B     STOUT3                       AND SKIP THE REST   GU00301\nSTOUT2   MVC   STVERMOD(6),GU03VER      VER.MD TO LINE          GU00301\n         MVC   STDATC(8),GU03DATC       DATE CREATED TO LINE    GU00301\n         MVC   STDATIMM(14),GU03DATM    DATE-TIME MODIFIED TO L GU00301\n         MVC   STINIT(5),GU03INIT       INITIAL SIZE TO LINE    GU00301\n         MVC   STID(7),GU03ID           LOGONID/JOBNAME TO LINE GU00301\nSTOUT3   BAL   R2,STPRINT               PRINT THE LINE          GU00301\n*                                                               GU00301\n         B     STEND                                            GU00301\n*                                                               GU00301\nSTPDS    TM    SWITCH2,X'80'            IF PANVALET STUFF FOUND GU00301\n         BO    STPDS2                     GO PRINT PDS STUFF    GU00301\n         MVC   STATLINE(133),BLANKS     ELSE CLEAR THE LINE     GU00301\n         MVI   STATLINE,C'1'                FORM EJECT TO LINE  GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG3     ELSE HEADINGS TO LINE   GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG1         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG2         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),BLANKS         BLANKS TO LINE      GU00301\n         MVC   STATLINE(13),=C' (None found)'  'NOT FOUND' MSG  GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n*                                                               GU00301\nSTPDS2   MVC   STATLINE(133),BLANKS         BLANKS TO LINE      GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG4         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG1         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n         MVC   STATLINE(133),STHDG2         MOVE HEADINGS TO LI GU00301\n         BAL   R2,STPRINT                   PRINT THE LINE      GU00301\n*                                                               GU00301\n         XC    PDSBLDL(PDSBLDLL),PDSBLDL    CLEAR BLDL LIST     GU00301\n         MVC   GU02FF(2),=X'0001'           SET COUNT TO 1 ENTR GU00301\n         LA    R2,PDSBLDLL-4(0,0)           LENGTH OF ISPF ENTR GU00301\n         STH   R2,GU02LL                      INTO BLDL AREA    GU00301\n         MVC   GU02NAM(8),STNAME            MOVE NAME TO BLDL L GU00301\n         BLDL  PDSDCB,PDSBLDL               GET A BLDL ENTRY    GU00301\n*                                                               GU00301\nSTX      LTR   R15,R15                      IF MODULE NOT FOUND GU00301\n         BZ    STALIAS                        THEN              GU00301\n         MVC   STATLINE(133),BLANKS             CLEAR THE LINE  GU00301\n         MVC   STNAML(8),STNAME                 NAME TO LINE    GU00301\n         MVC   STATLINE+13(11),=C'(Not found)'  TEXT TO LINE    GU00301\n         BAL   R2,STPRINT                       PRINT THE LINE  GU00301\n         MVC   STATLINE(133),BLANKS             CLEAR THE LINE  GU00301\n         BAL   R2,STPRINT                       PRINT THE LINE  GU00301\n         B     STRET04                          GO TO HIGH ENDI GU00301\n*                                                               GU00301\nSTALIAS  TM    GU02C,X'80'                  IF ENTRY IS AN ALIA GU00301\n         BNO   STLENGTH                       THEN              GU00301\n         MVC   STATLINE(133),BLANKS             CLEAR THE LINE  GU00301\n         MVC   STNAML(8),STNAME                 NAME TO LINE    GU00301\n         MVC   STATLINE+13(7),=C'(Alias)'       TEXT TO LINE    GU00301\n         BAL   R2,STPRINT                       PRINT THE LINE  GU00301\n         MVC   STATLINE(133),BLANKS             CLEAR THE LINE  GU00301\n         BAL   R2,STPRINT                       PRINT THE LINE  GU00301\n         B     STRET04                          GO TO HIGH ENDI GU00301\n*                                                               GU00301\nSTLENGTH CLI   GU02C,X'0F'                  IF 'C' DOESNT LOOK  GU00301\n         BE    STSTATS                        THEN              GU00301\n         MVC   STATLINE(133),BLANKS             CLEAR THE LINE  GU00301\n         MVC   STNAML(8),STNAME                 NAME TO LINE    GU00301\n         MVC   STATLINE+13(10),=C'(No stats)'   TEXT TO LINE    GU00301\n         BAL   R2,STPRINT                       PRINT THE LINE  GU00301\n         MVC   STATLINE(133),BLANKS             CLEAR THE LINE  GU00301\n         BAL   R2,STPRINT                       PRINT THE LINE  GU00301\n         B     STRET04                          GO TO HIGH ENDI GU00301\n*                                                               GU00301\nSTSTATS  MVC   GU01NAM(11),GU02NAM         NAME, TTR            GU00301\n         MVC   GU01C(28),GU02C             C THRU ID            GU00301\n         MVC   GU01ID+L'GU01ID(3),BLANKS   ENDING BLANKS        GU00301\n         MVC   PANCOM(PANCOMLN),BLANKS  CLEAR PANVALET COMMENT  GU00301\n         LA    R15,PANCOM               ADDR OF PAN COMMENT ARE GU00301\n         ST    R15,A50PARM                INTO PARM LIST        GU00301\n         LA    R15,GU01NAM              ADDR OF PDS ENTRY       GU00301\n         ST    R15,A50PARM+04             INTO PARM LIST        GU00301\n         OI    A50PARM+04,X'80'         MARK END OF LIST        GU00301\n         LA    R1,A50PARM               POINT TO PARM LIST      GU00301\n         L     R15,=V(GTEUA50)          ADDR OF SUBROUTINE      GU00301\n         BALR  R14,R15                  CALL THE SUBROUTINE     GU00301\n         LTR   R15,R15                  IF RETURN BAD           GU00301\n         BNZ   STRET04                    GO TO HIGH ENDING     GU00301\n*                                                               GU00301\nSTSTATP  MVC   STATLINE(133),BLANKS     CLEAR THE LINE          GU00301\n         MVC   STNAML(8),GU01NAM        NAME TO LINE            GU00301\n         MVC   STVERMOD(6),GU03VER      VER AND MOD             GU00301\n         MVC   STDATC(8),GU03DATC       DATE CREATED            GU00301\n         MVC   STDATIMM(14),GU03DATM    DATE-TIME MODIFIED      GU00301\n         MVC   STINIT(5),GU03INIT       INITIAL SIZE            GU00301\n         MVC   STID(7),GU03ID           ID                      GU00301\n         XR    R2,R2                    R2 CLEAR FOR INSERT     GU00301\n         ICM   R2,3,GU01SIZE            R2 HAS SIZE IN BINARY   GU00301\n         CVD   R2,PACKDUBL              PACKDUBL HAS SIZE, PACK GU00301\n         OI    PACKDUBL+7,X'0F'           KILL THE SIGN         GU00301\n         UNPK  STSTMT(5),PACKDUBL+5(3)  ZONE DECIMAL TO LINE    GU00301\n         BAL   R2,STPRINT               PRINT THE LINE          GU00301\n         MVC   STATLINE(133),BLANKS     CLEAR THE LINE          GU00301\n         BAL   R2,STPRINT               PRINT THE LINE          GU00301\n*                                                               GU00301\nSTPDSX   B     STEND                                            GU00301\n*                                                               GU00301\nSTRET04  LA    R15,X'04'                RETURN CODE TO R15      GU00301\n         ST    R15,RETCDE               SAVE IT                 GU00301\n         B     STEND                    BRANCH TO ENDING        GU00301\n*                                                               GU00301\nSTEND    L     RBAL,STRBALSV            RESTORE RETURN ADDRESS  GU00301\n         BR    RBAL                     RETURN                  GU00301\n*                                                               GU00301\nSTPRINT  PUT   SYSDCB,STATLINE                                  GU00301\n         BR    R2                                               GU00301\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  COMPUTE THE NEXT PANVALET NAME                                ***\n***                                                                ***\n**********************************************************************\nNEXT     ST    RBAL,NERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nNEREST   CLC   MAFUNCT(12),MARESTOR     IF FUNCTION IS RESTORE\n         BE    NENEXT2                    THEN FIND SUFFIX BY WAY #2\n         B     NENEXT                   ELSE FIND SUFFIX BY WAY #1\n*\nNENEXT   MVC   NEXTNAME(10),LASTNAME    INITIALIZE NEXT NAME FIELD\n         LA    R3,NEXTNAME              R3 POINTS TO BEGINNING\n         A     R3,SEOFFSET              R3 POINTS TO SUFFIX\n         B     NEADD1                   GO COMPUTE NEW SUFFIX\n*\nNENEXT2  MVC   NEXTNAME(10),LASTNAME    INITIALIZE NEXT NAME FIELD\n         LA    R1,10                    R1 IS COUNTER FOR LOOP\n         LA    R2,NEXTNAME              R2 POINTS TO NAME\n         BCTR  R2,0                     R2 POINTS JUST BEFORE NAME\nNELOOP1  LA    R2,1(0,R2)               R2 POINTS TO NEXT CHARACTER\n         CLI   0(R2),X'40'              IF CHARACTER IS BLANK\n         BE    NELOOP1X                   GET OUT OF LOOP\n         BCT   R1,NELOOP1               ELSE LOOP BACK UP\n         LA    R2,1(0,R2)               FALL THRU, R2 POINTS BEYOND SUF\nNELOOP1X LR    R3,R2                    R3 POINTS JUST BEYOND SUFFIX\n         S     R3,F2                    R3 POINTS TO SUFFIX\n         B     NEADD1                   GO COMPUTE NEW SUFFIX\n*\nNEADD1   ZAP   PACKWORK(4),PACK0(4)     INITIALIZE PACKED FIELD\n         PACK  PACKWORK(4),0(2,R3)      SUFFIX TO PACKED NUMBER\n         AP    PACKWORK(4),PACK1(4)     ADD ONE\n         CP    PACKWORK(4),PACK100      IF 100 OR GREATER\n         BNL   NERET04                    GO TO ERROR\n         UNPK  0(2,R3),PACKWORK(4)      UNPACK THE NEW NUMBER\n         OI    1(R3),X'F0'              KILL THE SIGN\n*\n         B     NEEND\n*\nNERET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     NEEND                    BRANCH TO ENDING\n*\nNEEND    L     RBAL,NERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nF2       DC    F'2'                     CONSTANT\nF4       DC    F'4'                     CONSTANT\nBLANKS   DC    CL133' '                 LITERAL                 GU00301\nX00S     DC    XL40'00'                 LITERAL\nNOENTRY  DC    CL32'NO-ENTRY'           LITERAL\nPACK0    DC    PL4'+0'                  CONSTANT\nPACK1    DC    PL4'+1'                  CONSTANT\nPACK100  DC    PL4'+100'                CONSTANT\nMARESTOR DC    CL12'RESTORE'            LITERAL\nMASTATS  DC    CL12'STATS'              LITERAL                 GU00301\nSTHDG1   DS    0CL133                   HEADING FOR OUTPUT PRIN GU00301\n         DC    CL01' '                                          GU00301\n         DC    CL12'Name'                                       GU00301\n         DC    CL07'Size'                                       GU00301\n         DC    CL08'Ver.Md'                                     GU00301\n         DC    CL10'Created'                                    GU00301\n         DC    CL16'   Modified'                                GU00301\n         DC    CL07'Init'                                       GU00301\n         DC    CL08'ID'                                         GU00301\n         DC    CL64' '                                          GU00301\n*                                                               GU00301\nSTHDG2   DS    0CL133                   HEADING FOR OUTPUT PRIN GU00301\n         DC    CL01' '                                          GU00301\n         DC    CL12'----------'                                 GU00301\n         DC    CL07'-----'                                      GU00301\n         DC    CL08'------'                                     GU00301\n         DC    CL10'--------'                                   GU00301\n         DC    CL16'--------------'                             GU00301\n         DC    CL07'-----'                                      GU00301\n         DC    CL08'-------'                                    GU00301\n         DC    CL64' '                                          GU00301\n*                                                               GU00301\nSTHDG3   DC    CL24' '                                          GU00301\n         DC    CL21'PANVALET STATISTICS'                        GU00301\n         DC    CL88' '                                          GU00301\n*                                                               GU00301\nSTHDG4   DC    CL27' '                                          GU00301\n         DC    CL16'PDS STATISTICS'                             GU00301\n         DC    CL90' '                                          GU00301\n*                                                               GU00301\nOPENSD   OPEN  (,,,),MF=L               OPEN PARM LIST          GU00301\nCLOSSD   CLOSE (,,),MF=L                CLOSE PARM LIST         GU00301\n*                                                               GU00301\nSYSDCBD  DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,BLKSIZE=1330, GU00301X\n               RECFM=FBA,MACRF=(PM)                             GU00301\n*                                                               GU00301\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R)                    GU00301\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nLORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDERBALSV DS    F                        RETURN ADDRESS SAVE AREA\nOPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSERBALSV DS    F                        RETURN ADDRESS SAVE AREA\nNERBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSTRBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00301\nSORBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00301\nSCRBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00301\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                .....1..               X'40' - PANVALET ENTRY FOUND\n*                11111.11               (NOT USED)\n*                                                               GU00301\nSWITCH2  DS    B'00000000'              SWITCH AREA             GU00301\n*                1.......               X'80' - HEADINGS PRINTE GU00301\n*                .1......               X'40' - GET PDS STATS   GU00301\n*                ..111111               (NOT USED)              GU00301\n*\nOPPL     DS    3A                       PARM LIST FOR POPEN\nSEPL     DS    6A                       PARM LIST FOR PSEARCH\nCLPL     DS    1A                       PARM LIST FOR PCLOSE\n*\nVPOPEN   DS    A                        ADDRESS OF POPEN ENTRY POINT\nVPSRCH   DS    A                        ADDRESS OF PSRCH ENTRY POINT\nVPREAD   DS    A                        ADDRESS OF PREAD ENTRY POINT\nVPCLOSE  DS    A                        ADDRESS OF PCLOSE ENTRY POINT\n*\nMAFUNCT  DS    CL12                     FUNCTION PARM\n*\nACTION   DS    F                        PANVALET ACTION PARM\nDDNAME   DS    CL8                      PANVALET LIBRARY DDNAME\nBACKUP   DS    CL8                      PANVALET BACKUP PARM\nNAME1    DS    CL22                     PANVALET NAME1 PARM\nNAME2    DS    CL11                     PANVALET NAME2 PARM\nSUBSET   DS    CL27                     PANVALET SUBSET PARM\n*\nLASTNAME DS    CL10                     LAST PANVALET NAME USED\nSEOFFSET DS    F                        OFFSET OF SUFFIX IN NAME\n*\nPACKWORK DS    PL4                      WORK AREA\n*\nMYDIR    DS    CL80                     WORK AREA FOR PAN DIR ENTRY\nMYCOM    DS    CL52                     WORK AREA FOR PAN COMMENT\n*                                                               GU00301\nSTNAME   DS    CL10                     SAVED PDS NAME FOR STAT GU00301\n*                                                               GU00301\nSTATLINE DS    0CL133                   STATISTICS OUTPUT LINE  GU00301\n         DS    CL1                                              GU00301\nSTNAML   DS    CL10                       PAN MEMBER NAME       GU00301\n         DS    CL2                                              GU00301\nSTSTMT   DS    CL5                        NUMBER OF STATEMENTS  GU00301\n         DS    CL2                                              GU00301\nSTVERMOD DS    CL6                        COMMENT VER.MD        GU00301\n         DS    CL2                                              GU00301\nSTDATC   DS    CL8                        COMMENT DATE CREATED  GU00301\n         DS    CL2                                              GU00301\nSTDATIMM DS    CL14                       COMMENT DATE-TIME MOD GU00301\n         DS    CL2                                              GU00301\nSTINIT   DS    CL5                        COMMENT INITIAL SIZE  GU00301\n         DS    CL2                                              GU00301\nSTID     DS    CL7                        COMMENT LOGONID/JOBNA GU00301\n         DS    CL1                                              GU00301\n         DS    CL64                                             GU00301\n*                                                               GU00301\nPACKDUBL DS    D                        DOUBLE WORD FOR CVD     GU00301\n*                                                               GU00301\nA50PARM  DS    2F                       PARMLIST FOR SUBROUTINE GU00301\n*                                                               GU00301\nOPENSL   OPEN  (,,,),MF=L               OPEN PARM LIST          GU00301\nOPENSLLN EQU   *-OPENSL                                         GU00301\nCLOSSL   CLOSE (,,),MF=L                CLOSE PARM LIST         GU00301\nCLOSSLLN EQU   *-CLOSSL                                         GU00301\n*                                                               GU00301\nSYSDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,BLKSIZE=1330, GU00301X\n               RECFM=FBA,MACRF=(PM)                             GU00301\nSYSDCBLN EQU   *-SYSDCB                                         GU00301\n*                                                               GU00301\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R)                    GU00301\nPDSDCBLN EQU   *-PDSDCB                                         GU00301\n*                                                               GU00301\nPDSSTOW  GTEUM01 DSECT=NO               DIRECTORY ENTRY (FOR ST GU00301\nPDSSTOWL EQU   *-PDSSTOW                                        GU00301\n*                                                               GU00301\nPDSBLDL  GTEUM02 DSECT=NO               DIRECTORY ENTRY (FROM B GU00301\nPDSBLDLL EQU   *-PDSBLDL                                        GU00301\n*                                                               GU00301\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\nPANDIR   GTEUM04  DSECT=YES             PANVALET DIRECTORY ENTRY\nPANDIRLN EQU   *-PANDIR\nPANCOM   GTEUM03  DSECT=YES             PANVALET COMMENT AREA\nPANCOMLN EQU   *-PANCOM\nNEXTNAME DSECT                          NAME OF NEXT PANVALET NAME\n         DS    CL10\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA3T": {"ttr": 4101, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA3T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***   CODE TO TEST GTEUA30                                          ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n*\n         L     R2,R1SAVE                R2 POINTS TO PARM LIST\n         L     R2,0(0,R2)               R2 POINTS TO PARM\n         LH    R3,0(0,R2)               R3 HAS LENGTH OF PARM\n         LTR   R3,R3                    IF ZERO LENGTH\n         BZ    ENDING                     GO TO ENDING\n         MVC   PARMIN(8),BLANKS         CLEAR PARMIN FIELD\n         BCTR  R3,0                     LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   PARMIN(0),2(R2)            MOVE PARM CHARACTERS\n         EX    R3,*-6                   EXECUTE THE MOVE\n*\n         PRINT GEN\n*\n         MVC   PDSDCB(PDSDCBL),PDSDCBD     INITIALIZE DCB\n*\n         MVC   PDOPENL(PDOPENLN),PDOPEND INITIALIZE OPEN LIST\n         OPEN  (PDSDCB,(INPUT)),MF=(E,PDOPENL) OPEN IT\n*\n         MVC   GU01NAM(8),PARMIN        MOVE NAME INTO DIR ENTRY\n*\n         LA    R15,PDSDCB               ADDR OF DCB\n         ST    R15,PARM30+00              INTO PARM LIST\n         LA    R15,DIRENTRY             ADDR OF DIRECTORY ENTRY\n         ST    R15,PARM30+04              INTO PARM LIST\n         OI    PARM30+04,X'80'          MARK END OF LIST\n         LA    R1,PARM30                ADDRESS OF PARM LIST\n         L     R15,=V(GTEUA30)          ADDRESS OF SUBROUTINE\n         BALR  R14,R15                  PERFORM THE SUBROUTINE\n*\n         MVC   PDCLOSL(PDCLOSLN),PDCLOSD INITIALIZE CLOSE LIST\n         CLOSE (PDSDCB),MF=(E,PDCLOSL)  CLOSE IT\n*\n         PRINT NOGEN\n*\nEND00    LA    R15,0                    SET COMPLETION CODE 00\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n         PRINT GEN\nPDOPEND  OPEN  (,),MF=L\nPDCLOSD  CLOSE (),MF=L\n*\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=R\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\nPARMIN   DS    CL8                      INPUT PARM\nDIRENTRY GTEUM01 DSECT=NO               DIRECTORY ENTRY\nPARM30   DS    2F                       PARM LIST FOR GTEUA30\n*\n         PRINT GEN\nPDOPENL  OPEN  (,),MF=L\nPDOPENLN EQU *-PDOPENL\nPDCLOSL  CLOSE (),MF=L\nPDCLOSLN EQU *-PDCLOSL\n         PRINT NOGEN\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R\nPDSDCBL  EQU   *-PDSDCB\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PO,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA30": {"ttr": 4105, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA30'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUA30                                      ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***                                                                ***\n***    The function of this program is to return directory         ***\n***    information about a member of a PDS, and to make a copy     ***\n***    of the member in a sequential file.                         ***\n***                                                                ***\n***    The program accepts the name of the member from the         ***\n***    first eight bytes of a 42-byte input parm.  If it finds     ***\n***    the member, and the directory entry has ISPF statistics,    ***\n***    the ISPF-stats directory entry is converted from 48-byte    ***\n***    BLDL format to 42-byte STOW format, which can be used       ***\n***    later by the caller to update the directory of the PDS.     ***\n***                                                                ***\n***    If the program finds the member, but it does not have ISPF  ***\n***    statistics, the program will create and return a 42-byte    ***\n***    STOW entry for later use by the caller.  The entry will     ***\n***    contain the following stats:                                ***\n***                                                                ***\n***    NAME:  Member name from input                               ***\n***    TTR:   Actual TTR                                           ***\n***    C:     X'0F' for member,  X'8F' for alias                   ***\n***    VER:   001                                                  ***\n***    MOD:   00                                                   ***\n***    SIZE:  Line count                                           ***\n***    INIT:  Line count                                           ***\n***    MOD:   00                                                   ***\n***    ID:    First seven characters of Jobname from TIOTNJOB      ***\n***           field of the TIOT (Task I/O Table).                  ***\n***                                                                ***\n***    If the program does not find the member, it will create     ***\n***    a dummy entry as above, with the TTR field set to X'000000' ***\n***    Also, the sequential output file will be opened and closed  ***\n***    to erase it.                                                ***\n***                                                                ***\n***    RECFM, LRECL, and BLKSIZE information will be copied from   ***\n***    the PDS to the sequential output dataset.                   ***\n***                                                                ***\n***    The PDS must have a LRECL=80, must be a PDS, and must have  ***\n***    a fixed-length record format, with BLKSIZE at least 80.     ***\n***                                                                ***\n***    BPAM is used for manipulating the directory of the PDS,     ***\n***    BSAM is used for copying the PDS member to the output       ***\n***    sequential dataset.                                         ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Invoking this program:                                        ***\n***                                                                ***\n***    This program is a callable subroutine.  The caller passes   ***\n***    the addresses of two parameters to this subroutine:         ***\n***                                                                ***\n***      1.  The address of a 42-byte area containing an 8-byte    ***\n***          member name.  ISPF statistics in STOW format will     ***\n***          be returned in this area.                             ***\n***                                                                ***\n***      2.  The address of an opened DCB with DSORG=PO,MACRF=R.   ***\n***                                                                ***\n***    This program is Reenterable, Reusable, and Refreshable.     ***\n***    The following is sample reenterable code for invoking the   ***\n***    program.                                                    ***\n***                                                                ***\n*** *  ---------------------------------------------------------   ***\n*** *                                                              ***\n***          MVC   PDSDCB(PDSDCBL),PDSDCBD     INITIALIZE DCB      ***\n*** *                                                              ***\n***          MVC   PDOPENL(PDOPENLN),PDOPEND INITIALIZE OPEN LIST  ***\n***          OPEN  (PDSDCB,(INPUT)),MF=(E,PDOPENL) OPEN IT         ***\n*** *                                                              ***\n***          MVC   GU01NAM(8),PARMIN        MOVE NAME TO DIR ENTRY ***\n*** *                                                              ***\n***          LA    R15,PDSDCB               ADDR OF DCB            ***\n***          ST    R15,PARM30+00              INTO PARM LIST       ***\n***          LA    R15,DIRENTRY             ADR OF DIRECTORY ENTRY ***\n***          ST    R15,PARM30+04              INTO PARM LIST       ***\n***          OI    PARM30+04,X'80'          MARK END OF LIST       ***\n***          LA    R1,PARM30                ADDRESS OF PARM LIST   ***\n***          L     R15,=V(GTEUA30)          ADDRESS OF SUBROUTINE  ***\n***          BALR  R14,R15                  PERFORM THE SUBROUTINE ***\n*** *                                                              ***\n***          MVC   PDCLOSL(PDCLOSLN),PDCLOSD INITIALIZE CLOSE LIST ***\n***          CLOSE (PDSDCB),MF=(E,PDCLOSL)  CLOSE IT               ***\n*** *                                                              ***\n*** *  ---------------------------------------------------------   ***\n*** PDOPEND  OPEN  (,),MF=L                                        ***\n*** PDCLOSD  CLOSE (),MF=L                                         ***\n*** *                                                              ***\n*** PDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=R                     ***\n*** *  ---------------------------------------------------------   ***\n*** WORKD    DSECT                                                 ***\n*** PARMIN   DS    CL8                      INPUT PARM             ***\n*** DIRENTRY GTEUM01 DSECT=NO               DIRECTORY ENTRY        ***\n*** PARM30   DS    2F                       PARM LIST FOR GTEUA30  ***\n*** *                                                              ***\n*** PDOPENL  OPEN  (,),MF=L                                        ***\n*** PDOPENLN EQU *-PDOPENL                                         ***\n*** PDCLOSL  CLOSE (),MF=L                                         ***\n*** PDCLOSLN EQU *-PDCLOSL                                         ***\n*** *                                                              ***\n*** PDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R                     ***\n*** PDSDCBL  EQU   *-PDSDCB                                        ***\n*** *  ---------------------------------------------------------   ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1. Check for correct DCB information in the PDS.              ***\n***  2. Open the output sequential dataset.                        ***\n***  3. Try to locate the entry in the directory of the PDS.       ***\n***  4. If the member is not found, create dummy statistics, then  ***\n***     close the output sequential dataset and return to the      ***\n***     caller.                                                    ***\n***  5. If the member is found, check for the existence of ISPF    ***\n***     statistics in the directory entry.                         ***\n***  6. If the entry does not have statistics, create them in      ***\n***     the returned data area.                                    ***\n***  7. Copy the member into the output sequential dataset.        ***\n***  8. Close the output sequential dataset.                       ***\n***  9. Set the return code, free storage, and return to the       ***\n***     caller.                                                    ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. The output file DDNAME is in the macro at label PDSDCBD.   ***\n***                                                                ***\n***  2. The first bit of the 'C' field, at offset +11 (X'0B')      ***\n***     in the returned directory information field indicates      ***\n***     that the entry is an alias, not a true name.               ***\n***                                                                ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***                                                                ***\n***     00 - Member found, had ISPF stats, copied to output file.  ***\n***                                                                ***\n***     04 - Member found, had no ISPF stats, stats created,       ***\n***            member copied to output file.                       ***\n***                                                                ***\n***     08 - Member not found, stats created, output file erased.  ***\n***                                                                ***\n***     16 - A.  DSORG of PDS not PO or POU                        ***\n***          B.  RECFM of PDS not F, FB, FA, or FBA                ***\n***          C.  LRECL of PDS not 80                               ***\n***          D.  BLKSIZE of PDS less than 80                       ***\n***          E.  Not enough storage for FIND of directory entry.   ***\n***          F.  I/O error during FIND of directory entry.         ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Used by macros, and work registers.              ***\n***     R4-R5   - Work registers, not used to pass information     ***\n***               between routines.                                ***\n***     R6      - <unused>                                         ***\n***     R7      - <unused>                                         ***\n***     R8      - Base address of PDS DCB passed by caller.        ***\n***     R9      - Base address of directory entry work area.       ***\n***     R10     - Linkage register used with BAL.                  ***\n***     R11     - <unused>                                         ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage registers and base of WORKD data area.   ***\n***     R14-R15 - Linkage registers.                               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     GTEUM01  - Describes directory entry in STOW format.       ***\n***     GTEUM02  - Describes directory entry in BLDL format.       ***\n***                                                                ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial version.                                      ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\n         PRINT NOGEN\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA 0\n*\n         LM    R8,R9,0(R1)              R8 POINTS TO THE OPEN PDS DCB\n*                                       R9 POINTS TO DIR ENTRY AREA\n         USING PDSDCB,R8                ADDRESSABILITY\n         USING DIRENTRY,R9              ADDRESSABILITY\n*\nMACHKDCB BAL   RBAL,CHKDCB              CHECK DCB INFORMATION\n         CLC   RETCDE,=F'4'             IF NOT F, 80, PO\n         BE    END16                      BRANCH TO BAD ENDING\n*\nMAOPNWRK BAL   RBAL,WOPEN               OPEN THE WORK DATASET\n*\nMAFIND   BAL   RBAL,FINDENT             FIND ENTRY WITH BLDL\n         CLC   RETCDE,=F'8'             IF I/O ERROR, OR VS SHORTAGE\n         BE    END16                      BRANCH TO BAD ENDING\nMANOTFND CLC   RETCDE,=F'4'             IF MEMBER NOT FOUND\n         BNE   MAFOUND                    THEN\n         BAL   RBAL,DUMMYST                 RETURN DUMMY STATS\n         B     END08                        AND RETURN WITH CC=08\n*\nMAFOUND  BAL   RBAL,STATCHK             CHECK FOR ISPF STATS\nMANOSTAT CLC   RETCDE,=F'4'             IF NO STATS\n         BNE   MASTAT                     THEN\n         BAL   RBAL,DUMMYST                 RETURN DUMMY STATS\n         B     MAUNLOAD                 ELSE\nMASTAT   BAL   RBAL,COPYSTAT              RETURN COPIED STATS\n*\nMAUNLOAD BAL   RBAL,UNLOAD              COPY THE DATA OUT\n*\n         TM    SWITCH0,X'80'            IF DUMMY STATS CREATED\n         BO    END04                      BRANCH TO RC=04\n         B     END00                    ELSE BRANCH TO RC=00\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nEND00    LA    R15,0                    SET COMPLETION CODE 00\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nEND04    LA    R15,4                    SET COMPLETION CODE 04\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nEND08    LA    R15,8                    SET COMPLETION CODE 08\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nEND16    LA    R15,16                   SET COMPLETION CODE 16\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nENDING   BAL   RBAL,WCLOSE              CLOSE THE PDS\n*\nENDLINK  L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CHECK PDS DCB FOR CORRECT INFORMATION                         ***\n***                                                                ***\n**********************************************************************\nCHKDCB   ST    RBAL,CHRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    PDSDCB+(DCBDSORG-IHADCB),DCBDSGPO IF NOT PARTITIONED\n         BNO   CHRET04                             GO TO BAD ENDING\n         TM    PDSDCB+(DCBRECFM-IHADCB),DCBRECF  IF NOT FIXED RECFM\n         BNO   CHRET04                             GO TO BAD ENDING\n         CLC   PDSDCB+(DCBLRECL-IHADCB)(2),=H'80' IF NOT LRECL 80\n         BNE   CHRET04                             GO TO BAD ENDING\n         CLC   PDSDCB+(DCBBLKSI-IHADCB)(2),=H'80' IF NOT BLKSI GT 80\n         BL    CHRET04                             GO TO BAD ENDING\n*\n         B     CHEND\n*\nCHRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CHEND                    BRANCH TO ENDING\n*\nCHEND    L     RBAL,CHRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   OPEN THE WORK DCB                                            ***\n***                                                                ***\n**********************************************************************\nWOPEN    ST    RBAL,WORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   WRKDCB(WRKDCBL),WRKDCBD     INITIALIZE DCB\n*\n         LH    R2,PDSDCB+(DCBBLKSI-IHADCB) R2 HAS INPUT BLKSIZE\n         STH   R2,WRKDCB+(DCBBLKSI-IHADCB) STORE IN WORK DCB\n         ST    R2,SAVBLKSI                   AND ALSO SAVE IT\n*\n         LH    R2,PDSDCB+(DCBLRECL-IHADCB) R2 HAS INPUT LRECL\n         STH   R2,WRKDCB+(DCBLRECL-IHADCB) STORE IN WORK DCB\n         ST    R2,SAVLRECL                   AND ALSO SAVE IT\n*\n         LH    R2,PDSDCB+(DCBRECFM-IHADCB) R2 HAS INPUT RECFM\n         STH   R2,WRKDCB+(DCBRECFM-IHADCB) STORE IN WORK DCB\n*\n         MVC   WKOPENL(WKOPENLN),WKOPEND   INITIALIZE OPEN LIST\n         OPEN  (WRKDCB,(OUTPUT)),MF=(E,WKOPENL)  OPEN IT\n*\n         B     WOEND\n*\nWORET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     WOEND                    BRANCH TO ENDING\n*\nWOEND    L     RBAL,WORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE WORK DCB                                            ***\n***                                                                ***\n**********************************************************************\nWCLOSE   ST    RBAL,WCRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   WKCLOSL(WKCLOSLN),WKCLOSD  INITIALIZE CLOSE LIST\n         CLOSE (WRKDCB),MF=(E,WKCLOSL)    CLOSE IT\n*\n         B     WCEND\n*\nWCRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     WCEND                    BRANCH TO ENDING\n*\nWCEND    L     RBAL,WCRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   USE PARM DIR ENTRY FIELDS FOR BLDL.                          ***\n***   CREATE A BLDL ENTRY WITH BLDL.                               ***\n***                                                                ***\n**********************************************************************\nFINDENT  ST    RBAL,FIRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         NI    SWITCH0,X'FF'-X'40'      SET SWITCH TO MEMBER NOT FOUND\n*\n         XC    BLDLNTRY(BLDLLEN),BLDLNTRY  CLEAR ENTRY WORK AREA\n         MVI   GU02FF+1,X'01'           SET ENTRY COUNT TO 1\n         MVI   GU02LL+1,X'50'           SET ENTRY LENGTH TO 80\n         MVC   GU02NAM,GU01NAM          COPY MEMBNAME INTO BLDL AREA\n         LA    R1,PDSDCB                R1 POINTS TO OPEN DCB\n         LA    R0,BLDLNTRY              R0 POINTS TO BLDL ENTRY AREA\n         BLDL  (R1),(R0)                EXECUTE BLDL\n         ST    R15,RETCDE               SAVE THE RETURN CODE\n*                                         00 - FOUND\n*                                         04 - NOT FOUND\n*                                         08 - I/O ERROR OR VS SHORTAGE\n*\n         LTR   R15,R15                  IF MEMBER WAS FOUND\n         BNZ   FIEND                      THEN\n         OI    SWITCH0,X'40'                TURN ON MEMBER FOUND SWITCH\n         TM    GU02C,X'80'                  IF ALSO AN ALIAS\n         BNO   FIEND                          THEN\n         OI    SWITCH0,X'20'                    TURN ON ALIAS SWITCH\n*\n         B     FIEND\n*\nFIRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     FIEND                    BRANCH TO ENDING\n*\nFIEND    L     RBAL,FIRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE A DUMMY ISPF STATS PDS DIRECTORY ENTRY.  FILL IN ALL   ***\n***  USER DATA FIELDS EXCEPT MEMBER NAME AND SIZE.                 ***\n***                                                                ***\n**********************************************************************\nDUMMYST  ST    RBAL,DURBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nDUCOPY   TM    SWITCH0,X'40'            IF MEMBER WAS FOUND\n         BNO   DUTTR                      THEN\n         MVC   GU01TTR(3),GU02TTR           COPY 'TTR'\nDUC      MVC   GU01C(DIRMOC),DUMMYC         INITIALIZE FROM 'C' ON\n         TM    SWITCH0,X'20'                IF IT WAS AN ALIAS ENTRY\n         BNO   DUTIME                         THEN\n         OI    GU01C,X'80'                      MAKE THIS AN ALIAS TOO\n         B     DUTIME                     ELSE\nDUTTR    MVC   GU01TTR(DIRMOTTR),DUMMYTTR    INITIALIZE FROM 'TTR' ON\n*\nDUTIME   TIME  DEC                      R0=DATE MMDDHHTH\n*                                       R1=00YYDDDF\n         ST    R1,GU01DATC              SAVE DATE CREATED  00YYDDDF\n         ST    R1,GU01DATM              SAVE DATE MODIFIED 00YYDDDF\n         STCM  R0,B'1100',GU01TIMM      SAVE TIME MODIFIED HHMM\n*\n         XR    R15,R15                  ADDRESS OF PSA\n         USING PSA,R15                    ASSIGN ADDRESSABILITY\n         L     R14,FLCCVT               ADDRESS OF CVT\n         USING CVTMAP,R14                 ASSIGN ADDRESSABILITY\n         DROP  R15                        DROP ADDRESSABILITY\n         L     R15,CVTTCBP              ADDRESS OF NEXT TCB POINTER\n         L     R15,4(0,R15)             ADDRESS OF CURRENT TCB\n         USING TCB,R15                    ASSIGN ADDRESSABILITY\n         DROP  R14                        DROP ADDRESSABILITY\n         L     R14,TCBTIO               ADDRESS OF TIOT\n         USING TIOT,R14                   ASSIGN ADDRESSABILITY\n         MVC   JOBNAME(8),TIOCNJOB      JOBNAME TO STORAGE\n         DROP  R14,R15                    DROP ADDRESSABILITY\n*\n         MVC   GU01ID(7),JOBNAME        JOBNAME CHARS 1-7 TO ID\n*\n         OI    SWITCH0,X'80'            INDICATE DUMMY STATS CREATED\n*\n         B     DUEND\n*\nDURET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DUEND                    BRANCH TO ENDING\n*\nDUEND    L     RBAL,DURBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FIND OUT IF BLDL ENTRY CONTAINS ISPF STATISTICS.              ***\n***                                                                ***\n**********************************************************************\nSTATCHK  ST    RBAL,STRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLI   GU02C,X'0F'              IF NOT RIGHT LENGTH\n         BE    *+16                       OR\n         CLI   GU02C,X'8F'              IF ALIAS AND NOT RIGHT LENGTH\n         BE    *+8                        THEN\n         B     STRET04                      GO TO BAD COMPLETION\n*\n         CLI   GU02MOD,X'63'            IF MOD NUMBER GT 99\n         BH    STRET04                    GO TO BAD COMPLETION\n*\n         CLI   GU02DATC,X'00'           IF 00YY GREATER THAN 0099\n         BH    STRET04                    GO TO BAD COMPLETION\n         TRT   GU02DATC+1(2),PACKTBL1   IF NOT\n         BNZ   STRET04                    A PACKED\n         TRT   GU02DATC+3(1),PACKTBL2       NUMBER\n         BNZ   STRET04                        GO TO BAD COMPLETION\n         CLC   GU02DATC+2(2),=X'366F'   IF DDD GREATER THAN 366F\n         BH    STRET04                    GO TO BAD COMPLETION\n*\n         CLI   GU02DATM,X'00'           IF 00YY GREATER THAN 0099\n         BH    STRET04                    GO TO BAD COMPLETION\n         TRT   GU02DATM+1(2),PACKTBL1   IF NOT\n         BNZ   STRET04                    A PACKED\n         TRT   GU02DATM+3(1),PACKTBL2       NUMBER\n         BNZ   STRET04                        GO TO BAD COMPLETION\n         CLC   GU02DATM+2(2),=X'366F'   IF DDD GREATER THAN 366F\n         BH    STRET04                    GO TO BAD COMPLETION\n*\n         TRT   GU02TIMM(1),TIMETBL1     IF HH NOT PACKED 00-24\n         BNZ   STRET04                    GO TO BAD COMPLETION\n         TRT   GU02TIMM+1(1),TIMETBL2   IF MM NOT PACKED 00-59\n         BNZ   STRET04                    GO TO BAD COMPLETION\n*\n         B     STEND\n*\nSTRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     STEND                    BRANCH TO ENDING\n*\nSTEND    L     RBAL,STRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   COPY INFORMATION FROM RETURNED BLDL LIST INTO PDS DIRECTORY  ***\n***   ENTRY PARM DATA AREA.                                        ***\n***                                                                ***\n**********************************************************************\nCOPYSTAT ST    RBAL,CORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   GU01TTR,GU02TTR          COPY TTR\n         MVC   GU01C(DIRENLEN-GU01C+DIRENTRY),GU02C\n*                                         COPY:  C,VER,MOD,FILLER,\n*                                                DATC,DATM,TIMM,SIZE,\n*                                                INIT,MODL,ID,FILLER\n*\n         B     COEND\n*\nCORET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     COEND                    BRANCH TO ENDING\n*\nCOEND    L     RBAL,CORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  UNLOAD THE PDS MEMBER TO A SEQUENTIAL WORK DATASET.           ***\n***                                                                ***\n**********************************************************************\nUNLOAD   ST    RBAL,UNRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n*\nUNSTOR   L     R3,SAVBLKSI              R3 HAS WORK AREA LENGTH (BLKSI)\n         GETMAIN R,LV=(R3)              GET ONE BLKSIZE OF STORAGE\n         LR    R2,R1                    R2 POINTS TO STORAGE\n*\nUNEOF1   MVC   SAVEODA,PDSDCB+(DCBEODA-IHADCB)    SAVE PDS EODAD\n         MVC   PDSDCB+(DCBEODA-IHADCB)(3),AUNPDEOF+1  MY EODAD ADDR\n*\nUNDECB1  MVC   PDSDECB(PDDECBLN),PDSDECBD        INITIALIZE DECB\n         MVC   WRKDECB(WKDECBLN),WRKDECBD        INITIALIZE DECB\n*\n*UNFIND  FIND  PDSDCB,GU01TTR,C  <=== S001-1 ABENDS.  DON'T KNOW WHY.\nUNFIND   FIND  PDSDCB,GU01NAM,D         POINT TO PDS MEMBER\n         XR    R5,R5                    CLEAR R5 FOR COUNTER\n*\nUNPDSIN  READ  PDSDECB,SF,PDSDCB,(R2),'S',MF=E   READ A BLOCK\n         CHECK PDSDECB                             WAIT FOR READ\n         L     R4,SAVBLKSI                       R4 HAS REQUSTED BYTES\n         L     R15,PDSDECB+16                    R15 POINTS TO IOB\n         LH    R15,14(0,R15)                     R15 HAS RESID BYT CNT\n         SR    R4,R15                            R4 HAS BYTES READ\n         STH   R4,WRKDCB+(DCBBLKSI-IHADCB)         INTO OUTPUT BLKSIZE\n         AR    R5,R4                               ADD TO BYTE COUNT\n         WRITE WRKDECB,SF,WRKDCB,(R2),'S',MF=E   WRITE THE BLOCK\n         CHECK WRKDECB                             WAIT FOR READ\nUNPDSEOL B     UNPDSIN                           LOOP UP TILL EOF\n*\n*                                           ===> EOF POINT\nUNPDSEOF MVC   PDSDCB+(DCBEODA-IHADCB)(3),SAVEODA  RESTORE EODAD ADDR\n         FREEMAIN R,LV=(R3),A=(R2)      FREE STORAGE\n*\n         XR    R4,R4                    CLEAR R4 FOR DIVIDE\n         D     R4,SAVLRECL              R5 NOW HAS RECORD COUNT\n         STCM  R5,3,GU01SIZE              INTO SIZE STATS FIELD\n         TM    SWITCH0,X'80'              IF DUMMY STATS WERE CREATED\n         BNO   *+8                          THEN\n         STCM  R5,3,GU01INIT                ALSO INTO INIT STATS FIELD\n*\n         B     UNEND\n*\nUNRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     UNEND                    BRANCH TO ENDING\n*\nUNEND    L     RBAL,UNRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nAUNPDEOF DC    A(UNPDSEOF)              EOF BRANCH ADDRESS\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nDUMMYENT DS    0D                       DUMMY PDS STATS ENTRY\nDUMMYNAM DC    CL8' '                     NAME\nDUMMYTTR DC    XL3'000000'                TTR\nDUMMYC   DC    XL1'0F'                    C\nDUMMYVER DC    XL4'01000000'              VER,MOD,FILLER X'0000'\n         DC    2XL4'0080001F'             DATEC,DATEM 01/01/80\n         DC    XL8'00'                    TIMEM,SIZE,INIT,MODL\n         DC    CL10' '                    ID,FILLER X'404040'\n*\nWKOPEND  OPEN  (,),MF=L\nWKCLOSD  CLOSE (),MF=L\nWRKDCBD  DCB   DDNAME=WRK001,DSORG=PS,MACRF=W\n*\n         READ  PDSDECBD,SF,MF=L\n         WRITE WRKDECBD,SF,MF=L\n*\n         EJECT\nPACKTBL1 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'00'-X'0F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'10'-X'1F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'20'-X'2F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'30'-X'3F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'40'-X'4F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'50'-X'5F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'60'-X'6F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'70'-X'7F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'80'-X'8F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'90'-X'9F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'\n*\nPACKTBL2 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'00'-X'0F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'10'-X'1F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'20'-X'2F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'30'-X'3F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'40'-X'4F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'50'-X'5F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'60'-X'6F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'70'-X'7F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'80'-X'8F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0202,0100' X'90'-X'9F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'\n*\n         EJECT\nTIMETBL1 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'00'-X'0F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'10'-X'1F'\n         DC    XL2'0000,0000,0001,0101,0101,0101,0101,0101' X'20'-X'2F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'30'-X'3F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'40'-X'4F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'50'-X'5F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'60'-X'6F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'70'-X'7F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'80'-X'8F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'90'-X'9F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'\n*\nTIMETBL2 DS    0D   0 1  2 3  4 5  6 7  8 9  A B  C D  E F\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'00'-X'0F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'10'-X'1F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'20'-X'2F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'30'-X'3F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'40'-X'4F'\n         DC    XL2'0000,0000,0000,0000,0000,0101,0101,0101' X'50'-X'5F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'60'-X'6F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'70'-X'7F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'80'-X'8F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'90'-X'9F'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'A0'-X'AF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'B0'-X'BF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'C0'-X'CF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'D0'-X'DF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'E0'-X'EF'\n         DC    XL2'0101,0101,0101,0101,0101,0101,0101,0101' X'F0'-X'FF'\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nFIRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDURBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSTRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nUNRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nWORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nWCRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCHRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA 0\n*                1.......                X'80' - DUMMY STATS CREATED\n*                .1......                X'40' - MEMBER WAS FOUND\n*                ..1.....                X'20' - MEMBER WAS AN ALIAS\n*                ...11111                (UNUSED)\n*\nWKOPENL  OPEN  (,),MF=L\nWKOPENLN EQU   *-WKOPENL\nWKCLOSL  CLOSE (),MF=L\nWKCLOSLN EQU   *-WKCLOSL\n         READ  PDSDECB,SF,MF=L          DECB FOR PDS\nPDDECBLN EQU   *-PDSDECB\n         WRITE WRKDECB,SF,MF=L          DECB FOR WORK FILE\nWKDECBLN EQU   *-WRKDECB\n*\n         DS    0F\nSAVEODA  DS    AL3                      SAVE AREA FOR EODAD ADDRESS\n*\nWRKDCB   DCB   DDNAME=WRK001,DSORG=PS,MACRF=W\nWRKDCBL  EQU    *-WRKDCB\n*\nSAVBLKSI DS    F                        SAVED INPUT BLOCKSIZE\nSAVLRECL DS    F                        SAVED INPUT LRECL\n*\nBLDLNTRY GTEUM02 DSECT=NO               BLDL FORMAT ENTRY\nBLDLLEN  EQU   *-BLDLNTRY                 LENGTH OF BLDL ENTRY\n*\nJOBNAME  DS    CL8                      JOB NAME\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         IHADCB DSORG=PO,DEVD=DA\n*\nDIRENTRY GTEUM01\nDIRMOTTR EQU    *-GU01TTR               LENGTH OF MOVE INCLUDING TTR\nDIRMOC   EQU    *-GU01C                 LENGTH OF MOVE EXCLUDING TTR\nDIRENLEN EQU    *-DIRENTRY              LENGTH OF WHOLE ENTRY\n*\n         IHAPSA                         MAP OF PSA  DSECT=PSA\n         IKJTCB                         MAP OF TCB  DSECT=TCB\nTIOT     DSECT\n         IEFTIOT1                       MAP OF TIOT\n         CVT   DSECT=YES                MAP OF CVT  DSECT=CVTMAP\n*\nPDSDCB   DSECT                          OPEN DCB PASSED FROM CALLER\n         DCB   DDNAME=PDS,DSORG=PO,MACRF=R\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA4T": {"ttr": 4609, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA4T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      CODE TO TEST GTEUA40                                       ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\nMASETUP  MVC   LASTNAME(10),DATANAME    INITIALIZE NAME\n         MVC   PRFUNCT(12),DATAFUNC     INITIALIZE PRINT FUNCTION\n*\nMACALL   LA    R15,LASTNAME             ADDRESS OF PARM\n         ST    R15,PARM40+00              INTO PARM LIST\n         LA    R15,PRFUNCT              ADDRESS OF PARM\n         ST    R15,PARM40+04              INTO PARM LIST\n         OI    PARM40+04,X'80'          MARK END OF LIST\n         LA    R1,PARM40                R1 POINTS TO LIST\n         L     R15,=V(GTEUA40)          ADDRESS OF SUBROUTINE\n         BALR  R14,R15                  CALL THE SUBROUTINE\n*\n         ST    R15,COMPCODE             SAVE THE COMPLETION CODE\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nDATANAME DC  CL10'TESTNAME55'\nDATAFUNC DC  CL12'DETAIL'\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nPARM40   DS    2A                       PARMLIST FOR SUBROUTINE\nLASTNAME DS    CL10                     PANVALET NAME TO BE ADDED\nPRFUNCT  DS    CL12                     PRINT FUNCTION TO BE USED\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA40": {"ttr": 4613, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         MACRO\n&LABEL   TEXTBILD &AREA=,&TEXT=\n.*+-----------------------------------------------------------------+\n.*|  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   |\n.*|   E.G.                                                          |\n.*|           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    |\n.*|                                                                 |\n.*|  AVALUE   DC  H'5',C'ALPHA'                                     |\n.*|  BVALUE   DC  H'7',C'-BRAVO-'                                   |\n.*|  CVALUE   DC  H'7',C'CHARLIE'                                   |\n.*|                                                                 |\n.*|  OUTAREA  DS  CL80                                              |\n.*|                                                                 |\n.*|  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 |\n.*|  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       |\n.*|                                                                 |\n.*|  UPON COMPLETION:  R1  POINTS TO OUTAREA                        |\n.*|                    R15 HAS TOTAL LENGTH OF TEXT (19)            |\n.*|                                                                 |\n.*|  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      |\n.*|            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          |\n.*|        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      |\n.*+-----------------------------------------------------------------+\n         LCLA  &N1,&N2\n&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS\n&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND\n.*\n&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE\n         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS\n.*\n         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN\n.LOOP1   ANOP\n         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT\n         BCTR  1,0                        MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA\n         EX    1,*-6                    EXECUTE THE MOVE\n         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS\n&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND\n         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP\n.*\n         LA    1,&AREA                  R1 HAS ADDR OF AREA\n         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT\n.*\n         MEND\n*\n         EJECT\n*\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA40'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUA40                                      ***\n***  DESCRIPTION:                                                  ***\n***    The function of this program is to compare a sequential     ***\n***    copy of a member of a PDS with a member of a Panvalet       ***\n***    library.  This program receives a 3-10 character Panvalet   ***\n***    member name as an input parm.                               ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***  The following code will invoke this program:                  ***\n***                                                                ***\n*** *------------------------------------------------------------- ***\n*** MACALL   LA    R15,LASTNAME             ADDRESS OF PARM        ***\n***          ST    R15,PARM40+00              INTO PARM LIST       ***\n***          OI    PARM40+00,X'80'          MARK END OF LIST       ***\n***          LA    R1,PARM40                R1 POINTS TO LIST      ***\n***          L     R15,=V(GTEUA40)          ADDRESS OF SUBROUTINE  ***\n***          BALR  R14,R15                  CALL THE SUBROUTINE    ***\n*** *------------------------------------------------------------- ***\n*** PARM40   DS    A                        PARMLIST FOR SUBROUTNE ***\n*** LASTNAME DS    CL10                     PAN NAME TO BE ADDED   ***\n*** *------------------------------------------------------------- ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1.  Create input text names for the PAN member from the       ***\n***      input parm.                                               ***\n***  2.  Initialize the DCB and PCOMPARE parm list, and open the   ***\n***      output file which will be used as SYSIN input by PCOMPARE.***\n***      The DDNAME is in the macro at label CNTLDCBD.             ***\n***      The PDS DDNAME is in the data at label PANPARMD.          ***\n***  3.  Create and write the COMPARE, OLD, and NEW command        ***\n***      card images.                                              ***\n***  4.  Close the file.                                           ***\n***  5.  LINK to the PCOMPARE program.                             ***\n***                                                                ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. Do not hard link the PCOMPARE program.                     ***\n***                                                                ***\n***  2. Additionally, when PAN#1 is invoked, it will require the   ***\n***     following files:                                           ***\n***        PANDD1   - The Panvalet library.                        ***\n***        SYSPRINT - Output listing.                              ***\n***        PCWORK1  - Work file to contain old (PAN) card images.  ***\n***        PCWORK2  - Work file to contain new (PDS) card images.  ***\n***        WRK001   - Input sequential copy of PDS member.         ***\n***                                                                ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***     00 - OKAY                                                  ***\n***     12 - Error, or PDS data did not match PAN data.            ***\n***     16 - Input name was shorter than 3 characters.             ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Linkage conventions, work, macros.               ***\n***     R4      - (unused)                                         ***\n***     R5      - (unused)                                         ***\n***     R6      - (unused)                                         ***\n***     R7      - (unused)                                         ***\n***     R8      - (unused)                                         ***\n***     R9      - Base of LASTNAME parm.                           ***\n***     R10     - (unused)                                         ***\n***     R11     - Linkage register used with BAL.                  ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage conventions, base of WORKD area.         ***\n***     R14-R15 - Linkage conventions, work, macros.               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     (none)                                                     ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial version.                                      ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         L     R9,0(R1)                 LOAD PARM ADDRESSES\n         USING LASTNAME,R9                ADDRESSABILITY\n*\nMANAMES  BAL   RBAL,NAMES               PROCESS THE NAME PARM\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO ERROR ENDING\n*\nMAOPEN   BAL   RBAL,OPEN                OPEN THE OUTPUT FILE\nMAPUT    BAL   RBAL,PUT                 WRITE THE OUTPUT RECORDS\nMACLOSE  BAL   RBAL,CLOSE               CLOSE THE OUTPUT FILE\n*\nMAPCOMP  BAL   RBAL,PACOMP              EXECUTE THE PANVALET PROGRAM\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END12                      GO TO ERROR ENDING\n*\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND16    LA    R15,16                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INITIALIZE THE DCB AND OPEN THE OUTPUT FILE.                  ***\n***  INITIALIZE THE PCOMPARE PARM LIST.                            ***\n***                                                                ***\n**********************************************************************\nOPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   CNTLDCB(CNTLDCBL),CNTLDCBD  INITIALIZE THE DCB\n         MVC   OPENL(OPENLLN),OPENLD    INITIALIZE THE OPEN PARM LIST\n*\n         MVC   PANPARM(102),PANPARMD    INITIALIZE PARM\n         LA    R1,PANPARM               R1 HAS ADDR OF PARM\n         ST    R1,PANPARML                INTO PARM LIST\n         OI    PANPARML+00,X'80'        MARK END OF PARM LIST\n*\n         LA    R3,OPENL                 R3 POINTS TO THE PARM LIST\n         LA    R2,CNTLDCB               R2 POINTS TO THE DCB\n         OPEN  ((R2),(OUTPUT)),MF=(E,(R3))  OPEN THE FILE\n*\n         B     OPEND\n*\nOPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     OPEND                    BRANCH TO ENDING\n*\nOPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE OUTPUT FILE.                                        ***\n***                                                                ***\n**********************************************************************\nCLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE THE CLOSE PARM LIST\n*\n         LA    R3,CLOSL                 R3 POINTS TO THE PARM LIST\n         LA    R2,CNTLDCB               R2 POINTS TO THE DCB\n         CLOSE ((R2)),MF=(E,(R3))       CLOSE THE FILE\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE THE PDS AND PAN NAME TEXT UNITS FROM THE INPUT NAME    ***\n***                                                                ***\n**********************************************************************\nNAMES    ST    RBAL,NARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nNASUFF   LA    R2,LASTNAME              R2 POINTS TO NAME\n         BCTR  R2,0                     R2 POINTS JUST BEFORE NAME\n         LA    R3,10                    R3 IS COUNTER\n*\nNALOOP1  LA    R2,1(0,R2)               R2 POINTS TO NEXT CHARACTER\n         CLI   0(R2),X'40'              IF BLANK\n         BE    NALENGTH                   BRANCH OUT\n         BCT   R3,NALOOP1               LOOP BACK UP\n*\n         LA    R2,1(0,R2)               FALL THRU: POINT TO NEXT CHAR\n*\n*                                       R2 NOW POINTS JUST BEYOND NAME\nNALENGTH LA    R3,LASTNAME              R3 POINTS TO NAME\n         SR    R2,R3                    R2 IS LENGTH OF PAN NAME\n         C     R2,=F'3'                 IF LENGTH LT 3\n         BL    NARET04                    GO TO ERROR\n         STH   R2,NAPAN                 SAVE THE LENGTH OF PAN NAME\n*\nNANAMES  LH    R2,NAPAN                 R2 IS LENGTH OF PAN NAME\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   NAPAN+2(0),LASTNAME        MOVE NAME TO STORAGE\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\n         B     NAEND\n*\nNARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     NAEND                    BRANCH TO ENDING\n*\nNAEND    L     RBAL,NARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE AND WRITE PCOMPARE CONTROL CARDS TO OUTPUT FILE        ***\n***                                                                ***\n**********************************************************************\nPUT      ST    RBAL,PURBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TEXTBILD  AREA=PULINE1,TEXT=COMPARE\n         TEXTBILD  AREA=PULINE2,TEXT=(OLD,NAPAN,RPAREN)\n         TEXTBILD  AREA=PULINE3,TEXT=NEW\n*\n         LA    R2,PULINE1-80            R2 POINTS TO -1 LINE\n         LA    R3,PULINES               R3 IS COUNTER\nPULOOP1  LA    R2,80(0,R2)              R2 POINTS TO NEXT LINE\n         PUT   CNTLDCB,(R2)             WRITE THE LINE\n         BCT   R3,PULOOP1               LOOP BACK UP\n*\n         B     PUEND\n*\nPURET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PUEND                    BRANCH TO ENDING\n*\nPUEND    L     RBAL,PURBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  EXECUTE THE PANVALET PROGRAM.                                 ***\n***                                                                ***\n**********************************************************************\nPACOMP   ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R1,PANPARML              POINT TO THE PARM LIST\n         LINK  EP=PCOMPARE              EXECUTE PANVALET\n         LTR   R15,R15                  IF NOT RC=00\n         BNE   PARET04                    GO TO HIGH RETURN\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPANPARMD DC    H'21',CL100'WRK002,,PANDD1,WRK001'\n*\nCNTLDCBD DCB   DDNAME=WRK002,DSORG=PS,LRECL=80,BLKSIZE=80,RECFM=F,     X\n               MACRF=PM\nOPENLD   OPEN  (,),MF=L\nCLOSD    CLOSE (),MF=L\n*\nCOMPARE  DC    H'33',C'COMPARE OUTPUT(NO) REPORT(DETAIL)'\nOLD      DC    H'42',C'OLD COLUMN(1 72) FILEORG(PANVALET) MEMBER('\nRPAREN   DC    H'01',C')'\nNEW      DC    H'23',C'NEW FILEORG(SEQUENTIAL)'\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\nOPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nNARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPURBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nNAPAN    DS    H,CL10                   TEXT OF PAN MEMBER NAME\nLINEOUT  DS    CL80                     OUTPUT TEXT LINE\n*\nPUCOM    DS    H,CL50                   TEXT MADE FROM PAN COMMENT\n*\nPULINE1  DS    CL80                     OUTPUT TEXT TO BE BUILT\nPULINE2  DS    CL80                     OUTPUT TEXT TO BE BUILT\nPULINE3  DS    CL80                     OUTPUT TEXT TO BE BUILT\nPULINES  EQU   (*-PULINE1)/80           NUMBER OF OUTPUT LINES\n*\nPANPARML DS    A\nPANPARM  DS    H,CL100\n*\nCNTLDCB  DCB   DDNAME=WRK002,DSORG=PS,LRECL=80,BLKSIZE=80,RECFM=F,     X\n               MACRF=PM\nCNTLDCBL EQU   *-CNTLDCB\n*\nOPENL    OPEN  (,),MF=L\nOPENLLN  EQU   *-OPENL\n*\nCLOSL    CLOSE (),MF=L\nCLOSLLN  EQU   *-CLOSL\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\nPANCOM   GTEUM03  DSECT=YES             PANVALET COMMENT AREA\n*\nLASTNAME DSECT\n         DS       CL10                  PANVALET NAME TO BE ADDED\n*\n         IHADCB  DSORG=PS,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA5T": {"ttr": 4868, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA5T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      CODE TO TEST GTEUA50.                                      ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         MVC   DIRENTRY(DIRLEN),DUMYDIR INITIALIZE ENTRY\n         LA    R15,PANCOM               ADDR OF PANVALET COMMENT\n         ST    R15,PARM50+00              INTO PARM LIST\n         LA    R15,DIRENTRY             ADDR OF DIRECTORY ENTRY\n         ST    R15,PARM50+04              INTO PARM LIST\n         OI    PARM50+04,X'80'          MARK END OF LIST\n         LA    R1,PARM50                POINT TO PARM LIST\n         L     R15,=V(GTEUA50)          BASE ADDR OF SUBPROGRAM\n         BALR  R14,R15                  CALL THE SUBPROGRAM\n*\nEND00    LA    R15,0                    SET COMPLETION CODE 00\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nDUMYDIR  DS    0D                     , ISPF STATS PDS DIRECTORY ENTRY\nDUMYNAM  DC    CL8'TESTNAME'            MEMBER NAME\nDUMYTTR  DC    XL3'000000'              PDS VALUE 'TTR'\nDUMYC    DC    X'0F'                    PDS VALUE 'C'\nDUMYVER  DC    X'03'         003        ISPF VERSION NUMBER (BIN)\nDUMYMOD  DC    X'59'         89         ISPF MOD NUMBER (BIN)\n         DC    XL2'0000'                (UNUSED, X'0000')\nDUMYDATC DC    XL4'0084100F' 04/09/84   ISPF DATE CREATED (PACK)\nDUMYDATM DC    XL4'0085100F' 04/10/85   ISPF DATE MODIFIED (PACK)\nDUMYTIMM DC    XL2'1357'     13:57      ISPF TIME MODIFIED (PK NOSIGN)\nDUMYSIZE DC    XL2'22'       34         ISPF SIZE (BIN)\nDUMYINIT DC    XL2'3039'     12345      ISPF INITIAL SIZE (BIN)\nDUMYMODL DC    XL2'11'       17         ISPF COUNT OF MOD LINES (BIN)\nDUMYID   DC    CL7'CHUCKIE'             ISPF USERID\n         DC    CL3'   '                 (UNUSED X'404040')\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\nDIRENTRY GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY\nDIRLEN   EQU   *-DIRENTRY\n*\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT AREA\n*\nPARM50   DS    2F                       PARMS FOR SUBPROGRAM\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA50": {"ttr": 4872, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA50'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUA50                                      ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***    The function of this program is to convert some of the      ***\n***    ISPF statistics from a directory entry into comments for    ***\n***    a Panvalet library member.                                  ***\n***                                                                ***\n***  This program is a callable subroutine which uses two parms    ***\n***    for input:  a pointer to a 42-byte directory entry with     ***\n***    ISPF statistics, and a pointer to a 52-byte output area     ***\n***    for the resulting Panvalet comment text.                    ***\n***                                                                ***\n***  Sample code for calling this program is:                      ***\n***                                                                ***\n*** *------------------------------------------------------------- ***\n***          LA    R15,PANCOM               ADDR OF PAN COMMENT    ***\n***          ST    R15,PARM50+00              INTO PARM LIST       ***\n***          LA    R15,DIRENTRY             ADDR OF DIR ENTRY      ***\n***          ST    R15,PARM50+04              INTO PARM LIST       ***\n***          OI    PARM50+04,X'80'          MARK END OF LIST       ***\n***          LA    R1,PARM50                POINT TO PARM LIST     ***\n***          L     R15,=V(GTEUA50)          BASE ADDR OF SUBPGM    ***\n***          BALR  R14,R15                  CALL THE SUBPROGRAM    ***\n*** *------------------------------------------------------------- ***\n*** WORKD    DSECT                                                 ***\n*** *                                                              ***\n*** DIRENTRY GTEUM01 DSECT=NO               PDS DIRECTORY ENTRY    ***\n*** PANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT AREA  ***\n*** PARM50   DS    2F                       PARMS FOR SUBPROGRAM   ***\n*** *------------------------------------------------------------- ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1. Initialize the Panvalet comment field to blanks.           ***\n***  2. Convert the following statistics fields to comments:       ***\n***     a.  Version and Modification                               ***\n***     b.  Date created                                           ***\n***     c.  Date modified                                          ***\n***     d.  Time modified                                          ***\n***     e.  Initial size                                           ***\n***     f.  Logonid                                                ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. The program will check for valid input Julian dates.       ***\n***  2. The program does not check for other input data to be      ***\n***     valid.                                                     ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***     00 - OKAY                                                  ***\n***     16 - Input date out of range (0-365/366).                  ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***     Describe register usage here, such as:                     ***\n***                                                                ***\n***     R0-R3   - Work registers for macros, linkage conventions   ***\n***                 and open code.                                 ***\n***     R4      - (not used)                                       ***\n***     R5      - (not used)                                       ***\n***     R6      - (not used)                                       ***\n***     R7      - (not used)                                       ***\n***     R8      - Base address of Panvalet comment area.           ***\n***     R9      - Base address of directory entry area.            ***\n***     R10     - Linkage register used with BAL.                  ***\n***     R11     - (not used)                                       ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage conventions, base of WORKD DSECT.        ***\n***     R14-R15 - Linkage conventions and work registers.          ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     GTEUM01  - PDS directory entry in STOW format.             ***\n***     GTEUM03  - Panvalet comment area.                          ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***  1.  A.  Initial version.                                      ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         LM    R8,R9,0(R1)              R8 POINTS TO PAN COMMENT AREA\n*                                       R9 POINTS TO DIRECTORY ENTRY\n         USING PANCOM,R8                ADDRESSABILITY\n         USING DIRENTRY,R9              ADDRESSABILITY\n*\n         MVC   PANCOM(PANCOMLN),BLANKS  INITIALIZE DATA AREA\n         BAL   RBAL,PANCMMNT            BUILD COMMENT\n         CLC   RETCDE,=F'0'             IF NOT CLEAN\n         BNE   END16                      GO TO HIGH ENDING\n*\nEND00    LA    R15,0                    SET COMPLETION CODE 00\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nEND16    LA    R15,16                   SET COMPLETION CODE 16\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE THE PANVALET COMMENT FROM ISPF STATS                   ***\n***                                                                ***\n**********************************************************************\nPANCMMNT ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PANCOM(PANCOMLN),BLANKS  INITIALIZE WITH BLANKS\n         MVC   GU03ID,GU01ID            MOVE USER ID INTO COMMENT\n*\n         MVC   WKYYDDDF(4),GU01DATM     MOVE DATE MODIFIED TO WK AREA\n         BAL   RBAL,DATE                CONVERT THE DATE\n         CLC   RETCDE(4),=F'0'          IF NOT GOOD RETURN\n         BNE   PARET04                    GO TO BAD ENDING\n         MVC   GU03DATM(8),MDYAREA+2    MOVE CONVERTED DATE TO COMMENT\n*\n         MVC   WKYYDDDF(4),GU01DATC     MOVE DATE CREATED TO WK AREA\n         BAL   RBAL,DATE                CONVERT THE DATE\n         CLC   RETCDE(4),=F'0'          IF NOT GOOD RETURN\n         BNE   PARET04                    GO TO BAD ENDING\n         MVC   GU03DATC(8),MDYAREA+2    MOVE CONVERTED DATE TO COMMENT\n*\n         XR    R3,R3                    R3 CLEAR FOR INSERT\n         ICM   R3,3,GU01TIMM            R3 HAS 0000HHMM\n         SLL   R3,4                     R3 HAS 000HHMM0\n         O     R3,=F'15'                R3 HAS 000HHMMF\n         ST    R3,PACKHHMM              SAVE FOR EDIT\n         MVC   HHMMAREA(7),HHMMMASK     INITIALIZE WITH EDIT MASK\n         ED    HHMMAREA(7),PACKHHMM+1   CONVERT TO BBHH:MM\n         MVC   GU03TIMM(5),HHMMAREA+2   MOVE TO COMMENT AREA\n         MVI   GU03TIMM-1,C'-'          PUT HYPHEN ONTO LINE\n*\n         XR    R3,R3                    R3 CLEAR FOR INSERT\n         IC    R3,GU01VER               R3 HAS BINARY VERSION NUMBER\n         ZAP   PACKDUBL(8),PACK0        CLEAR WORK DOUBLEWORD\n         CVD   R3,PACKDUBL              PACKDUBL HAS 00000000 0000VVVC\n         UNPK  VMAREA(3),PACKDUBL+6(2)  CONVERT TO 999\n         MVC   GU03VER(3),VMAREA        SAVE IN COMMENT AREA\n         OI    GU03VER+2,X'F0'          KILL THE SIGN\n*\n         XR    R3,R3                    R3 CLEAR FOR INSERT\n         IC    R3,GU01MOD               R3 HAS BINARY MOD NUMBER\n         ZAP   PACKDUBL(8),PACK0        CLEAR WORK DOUBLEWORD\n         CVD   R3,PACKDUBL              PACKDUBL HAS 00000000 00000MMC\n         UNPK  VMAREA(2),PACKDUBL+6(2)  CONVERT TO 99\n         MVC   GU03MOD(2),VMAREA        SAVE IN COMMENT AREA\n         OI    GU03MOD+1,X'F0'          KILL THE SIGN\n         MVI   GU03MOD-1,C'.'           PUT PERIOD INTO COMMENT AREA\n*\n         XR    R3,R3                    R3 CLEAR FOR INSERT\n         ICM   R3,3,GU01INIT            R3 HAS BINARY INITIAL LINES\n         ZAP   PACKDUBL(8),PACK0        CLEAR WORK DOUBLEWORD\n         CVD   R3,PACKDUBL              PACKDUBL HAS 00000000 00NNNNNC\n         UNPK  VMAREA(5),PACKDUBL+5(3)  CONVERT TO 99999\n         MVC   GU03INIT(5),VMAREA       SAVE IN COMMENT AREA\n         OI    GU03INIT+4,X'F0'         KILL THE SIGN\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CONVERT PACKED 00YYDDDF IN WKYYDDDF TO EDITED DISPLAY IN      ***\n***  MDYAREA.                                                      ***\n***                                                                ***\n**********************************************************************\nDATE     ST    RBAL,DARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nDALEAPX  NI    SWITCH0,X'FF'-X'08'      TURN LEAPYEAR SWITCH OFF\n         ICM   R3,15,WKYYDDDF           R3 HAS 00YYDDDF\n         SRA   R3,16                    R3 HAS 000000YY\n         SLA   R3,4                     R3 HAS 00000YY0\n         O     R3,=F'15'                R3 HAS 00000YYF\n         ST    R3,PACKYY                SAVE IT\n         ZAP   PACKDUBL(8),PACKYY       PUT YYF INTO DUBLWRD WK AREA\n         CVB   R3,PACKDUBL              R3 HAS BINARY YEAR\n         XR    R2,R2                    CLEAR R2 FOR DIVIDE\n         D     R2,=F'4'                 DIVIDE YEAR BY 4\n         LTR   R2,R2                    IF A LEAPYEAR\n         BNZ   *+8                        THEN\n         OI    SWITCH0,X'08'                TURN ON LEAPYEAR SWITCH\n*\nDARANGE  XC    PACKDUBL,PACKDUBL        CLEAR WORK DOUBLEWORD\n         MVC   PACKDUBL+6(2),WKYYDDDF+2 PACKDUBL IS 00000000 0000DDDF\n         CVB   R3,PACKDUBL              R3 HAS BINARY DDD\n         C     R3,=F'1'                 IF LESS THAN ONE\n         BL    DARET04                    GO TO BAD ENDING\n         C     R3,=F'366'               IF GREATER THAN 366\n         BH    DARET04                    GO TO BAD ENDING\n         TM    SWITCH0,X'08'            IF NOT LEAPYEAR\n         BO    *+12                       AND\n         C     R3,=F'365'                 IF GREATER THAN 365\n         BH    DARET04                      GO TO BAD ENDING\n*\nDALEAPP1 TM    SWITCH0,X'08'            IF NOT LEAPYEAR\n         BO    *+16                       AND\n         C     R3,=F'60'                  IF MARCH 1 OR LATER\n         BL    *+8                          THEN\n         LA    R3,1(0,R3)                     ADD 1 TO SKIP 2/29\n*\nDATABL   BCTR  R3,0                     R3 -1 TO CONVERT TO OFFSET\n         SLL   R3,1                     R3 IS NOW OFFSET INTO TABLE\n         LA    R3,DADTABLE(R3)          R3 POINTS TO TABLE ENTRY\n         LH    R3,0(0,R3)               R3 HAS 0000MMDD\n         SLA   R3,12                    R3 HAS 0MMDD000\n         O     R3,PACKYY                R3 HAS 0MMDDYYF\n         ST    R3,MMDDYYF               MOVE TO STORAGE FOR EDIT\n         MVC   MDYAREA(10),MDYMASK      INITIALIZE WITH EDIT MASK\n         ED    MDYAREA(10),MMDDYYF      CONVERT TO BBMM/DD/YY\n*\n         B     DAEND\n*\nDARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DAEND                    BRANCH TO ENDING\n*\nDAEND    L     RBAL,DARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\nPACK0    DC    PL4'+0'                  CONSTANT\n*\n*                    F Z M M / D D / Y Y\nMDYMASK  DC    XL10'40212020612020612020'  EDIT MASK FOR MM/DD/YY\n*\n*                   F Z H H : M M\nHHMMMASK DC    XL7'402120207A2020'      EDIT MASK FOR HH:MM\n*\n         LTORG\n         EJECT\nDADTABLE DS    0D        366-ELEMENT MMDD TABLE\nJAN  DC    XL2'0101,0102,0103,0104,0105,0106,0107,0108,0109,0110'\n     DC    XL2'0111,0112,0113,0114,0115,0116,0117,0118,0119,0120'\n     DC    XL2'0121,0122,0123,0124,0125,0126,0127,0128,0129,0130,0131'\nFEB  DC    XL2'0201,0202,0203,0204,0205,0206,0207,0208,0209,0210'\n     DC    XL2'0211,0212,0213,0214,0215,0216,0217,0218,0219,0220'\n     DC    XL2'0221,0222,0223,0224,0225,0226,0227,0228'\nLEAP DC    XL2'0229'\nMAR  DC    XL2'0301,0302,0303,0304,0305,0306,0307,0308,0309,0310'\n     DC    XL2'0311,0312,0313,0314,0315,0316,0317,0318,0319,0320'\n     DC    XL2'0321,0322,0323,0324,0325,0326,0327,0328,0329,0330,0331'\nAPR  DC    XL2'0401,0402,0403,0404,0405,0406,0407,0408,0409,0410'\n     DC    XL2'0411,0412,0413,0414,0415,0416,0417,0418,0419,0420'\n     DC    XL2'0421,0422,0423,0424,0425,0426,0427,0428,0429,0430'\nMAY  DC    XL2'0501,0502,0503,0504,0505,0506,0507,0508,0509,0510'\n     DC    XL2'0511,0512,0513,0514,0515,0516,0517,0518,0519,0520'\n     DC    XL2'0521,0522,0523,0524,0525,0526,0527,0528,0529,0530,0531'\nJUN  DC    XL2'0601,0602,0603,0604,0605,0606,0607,0608,0609,0610'\n     DC    XL2'0611,0612,0613,0614,0615,0616,0617,0618,0619,0620'\n     DC    XL2'0621,0622,0623,0624,0625,0626,0627,0628,0629,0630'\nJUL  DC    XL2'0701,0702,0703,0704,0705,0706,0707,0708,0709,0710'\n     DC    XL2'0711,0712,0713,0714,0715,0716,0717,0718,0719,0720'\n     DC    XL2'0721,0722,0723,0724,0725,0726,0727,0728,0729,0730,0731'\nAUG  DC    XL2'0801,0802,0803,0804,0805,0806,0807,0808,0809,0810'\n     DC    XL2'0811,0812,0813,0814,0815,0816,0817,0818,0819,0820'\n     DC    XL2'0821,0822,0823,0824,0825,0826,0827,0828,0829,0830,0831'\nSEP  DC    XL2'0901,0902,0903,0904,0905,0906,0907,0908,0909,0910'\n     DC    XL2'0911,0912,0913,0914,0915,0916,0917,0918,0919,0920'\n     DC    XL2'0921,0922,0923,0924,0925,0926,0927,0928,0929,0930'\nOCT  DC    XL2'1001,1002,1003,1004,1005,1006,1007,1008,1009,1010'\n     DC    XL2'1011,1012,1013,1014,1015,1016,1017,1018,1019,1020'\n     DC    XL2'1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031'\nNOV  DC    XL2'1101,1102,1103,1104,1105,1106,1107,1108,1109,1110'\n     DC    XL2'1111,1112,1113,1114,1115,1116,1117,1118,1119,1120'\n     DC    XL2'1121,1122,1123,1124,1125,1126,1127,1128,1129,1130'\nDEC  DC    XL2'1201,1202,1203,1204,1205,1206,1207,1208,1209,1210'\n     DC    XL2'1211,1212,1213,1214,1215,1216,1217,1218,1219,1220'\n     DC    XL2'1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231'\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA 0\n*                ....1...               X'08' - LEAPYEAR\n*                1111.111               (UNUSED)\n*\nPACKYY   DS    0F                       00000YYF\n         DS    PL4                        REFORMAT\n*\nPACKHHMM DS    0F                       000HHMMF\n         DS    PL4                        REFORMAT\n*\nVMAREA   DS    CL5                      WORK AREA FOR VERS,MOD,INIT\n*\nPACKDUBL DS    0D                       DOUBLEWORD FOR CVB/CVD\n         DS    PL8                        REFORMAT\n*\nMDYAREA  DS    CL10                     BBMM/DD/YY\nWKYYDDDF DS    F                        WORK AREA FOR DATE\nMMDDYYF  DS    F                        0MMDDYYF\nHHMMAREA DS    CL7                      BBHH:MM\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\nPANCOM   GTEUM03 DSECT=YES              PANVALET COMMENT AREA\nPANCOMLN EQU   *-PANCOM\n*\nDIRENTRY GTEUM01 DSECT=YES              ISPF STATS DIRECTORY ENTRY\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA6T": {"ttr": 5124, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA6T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      CODE TO TEST GTEUA60                                       ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\nMASETUP  MVC   MAFUNCT(12),DATAFUNC     INITIALIZE THE FUNCTION\n         MVC   NEXTNAME(10),DATANAME    INITIALIZE NAME\n         MVC   PANCOM(52),DATACOM       INITIALIZE COMMENT\n         MVC   COPYNAME(10),DATACOPN    INITIALIZE COPY NAME\n*\nMACALL   LA    R15,MAFUNCT              ADDRESS OF PARM\n         ST    R15,PARM60+00              INTO PARM LIST\n         LA    R15,NEXTNAME             ADDRESS OF PARM\n         ST    R15,PARM60+04              INTO PARM LIST\n         LA    R15,PANCOM               ADDRESS OF PARM\n         ST    R15,PARM60+08              INTO PARM LIST\n         LA    R15,COPYNAME             ADDRESS OF PARM\n         ST    R15,PARM60+12              INTO PARM LIST\n         OI    PARM60+12,X'80'          MARK END OF LIST\n         LA    R1,PARM60                R1 POINTS TO LIST\n         L     R15,=V(GTEUA60)          ADDRESS OF SUBROUTINE\n         BALR  R14,R15                  CALL THE SUBROUTINE\n*\n         ST    R15,COMPCODE             SAVE THE COMPLETION CODE\n         B     END00                    GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nDATANAME DC  CL10'TESTNAME55'\nDATACOM  DC  CL52'* ....+....1....+....2....+....3....+....4....+....5'\nDATAFUNC DC  CL12'UPDATE'\nDATACOPN DC  CL10' '\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nPARM60   DS    4A                       PARMLIST FOR SUBROUTINE\nNEXTNAME DS    CL10                     PANVALET NAME TO BE ADDED\nMAFUNCT  DS    CL12                     FUNCTION NAME FOR SUBROUTINE\nCOPYNAME DS    CL10                     FUNCTION NAME FOR SUBROUTINE\nPANCOM   GTEUM03  DSECT=NO              PANVALET COMMENT AREA\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA60": {"ttr": 5128, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         MACRO\n&LABEL   TEXTBILD &AREA=,&TEXT=\n.*+-----------------------------------------------------------------+\n.*|  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   |\n.*|   E.G.                                                          |\n.*|           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    |\n.*|                                                                 |\n.*|  AVALUE   DC  H'5',C'ALPHA'                                     |\n.*|  BVALUE   DC  H'7',C'-BRAVO-'                                   |\n.*|  CVALUE   DC  H'7',C'CHARLIE'                                   |\n.*|                                                                 |\n.*|  OUTAREA  DS  CL80                                              |\n.*|                                                                 |\n.*|  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 |\n.*|  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       |\n.*|                                                                 |\n.*|  UPON COMPLETION:  R1  POINTS TO OUTAREA                        |\n.*|                    R15 HAS TOTAL LENGTH OF TEXT (19)            |\n.*|                                                                 |\n.*|  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      |\n.*|            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          |\n.*|        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      |\n.*+-----------------------------------------------------------------+\n         LCLA  &N1,&N2\n&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS\n&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND\n.*\n&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE\n         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS\n.*\n         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN\n.LOOP1   ANOP\n         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT\n         BCTR  1,0                        MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA\n         EX    1,*-6                    EXECUTE THE MOVE\n         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS\n&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND\n         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP\n.*\n         LA    1,&AREA                  R1 HAS ADDR OF AREA\n         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT\n.*\n         MEND\n*\n         EJECT\n*\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA60'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUA60                                      ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***                                                                ***\n***    The UPDATE function of this program is to copy a member of  ***\n***    a PDS into a Panvalet library.  This program receives a     ***\n***    3-10 character Panvalet member name as an input parm, and   ***\n***    also a 52 character Panvalet comment. The program truncates ***\n***    the last two characters from the Panvalet name to create    ***\n***    the PDS member name.                                        ***\n***                                                                ***\n***    The RESTORE function of this program is similar to UPDATE,  ***\n***    except that it copies in the other direction, from the      ***\n***    Panvalet library to the PDS.  For the RESTORE function, the ***\n***    52-character comment parm is optional, and is ignored.      ***\n***    The RESTORE function also copies the RESTOREd Panvalet      ***\n***    member to the next Panvalet name in the sequence.           ***\n***                                                                ***\n***  The following code will invoke this program:                  ***\n***                                                                ***\n*** *------------------------------------------------------------- ***\n*** MACALL   LA    R15,MAFUNCT              ADDRESS OF PARM        ***\n***          ST    R15,PARM60+00              INTO PARM LIST       ***\n***          LA    R15,NEXTNAME             ADDRESS OF PARM        ***\n***          ST    R15,PARM60+04              INTO PARM LIST       ***\n***          LA    R15,PANCOM               ADDRESS OF PARM        ***\n***          ST    R15,PARM60+08              INTO PARM LIST       ***\n***          LA    R15,COPYNAME             ADDRESS OF PARM        ***\n***          ST    R15,PARM60+12              INTO PARM LIST       ***\n***          OI    PARM60+12,X'80'          MARK END OF LIST       ***\n***          LA    R1,PARM60                R1 POINTS TO LIST      ***\n***          L     R15,=V(GTEUA60)          ADDRESS OF SUBROUTINE  ***\n***          BALR  R14,R15                  CALL THE SUBROUTINE    ***\n*** *------------------------------------------------------------- ***\n*** PARM60   DS    4A                       PARMLIST FOR SUBROUTNE ***\n*** NEXTNAME DS    CL10                     PAN NAME TO BE ADDED   ***\n*** MAFUNCT  DS    CL12                    'RESTORE' 'UPDATE' ETC. ***\n*** COPYNAME DS    CL10                     PAN NAME TO BE COPIED  ***\n*** PANCOM   GTEUM03  DSECT=NO              PANVALET COMMENT AREA  ***\n*** *------------------------------------------------------------- ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1.  Create input text names for the PDS member and PAN member ***\n***      from the input parm.                                      ***\n***  2.  Initialize the DCB and Panvalet parm list, and open the   ***\n***      output file which will be used as SYSIN input by PAN#1.   ***\n***      The DDNAME is in the macro at label CNTLDCBD.             ***\n***      The PDS DDNAME is in the data at label PDSDDN.            ***\n***  3.  Create and write the ++OPTION, ++ADD, and ++COMMENT       ***\n***      card images.                                              ***\n***  4.  Close the file.                                           ***\n***  5.  LINK to the PAN#1 program.                                ***\n***                                                                ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. Do not hard link the PAN#1 program.  It is not reenterable ***\n***     or reusable, and it is huge.                               ***\n***                                                                ***\n***  2. Additionally, when PAN#1 is invoked, it will require the   ***\n***     following files:                                           ***\n***        PANDD1   - The Panvalet library.                        ***\n***        SYSPRINT - Output listing.                              ***\n***                                                                ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***     00 - OKAY                                                  ***\n***     12 - Error returned from PAN#1.                            ***\n***     16 - Input name was shorter than 3 characters.             ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Linkage conventions, work, macros.               ***\n***     R4      - (unused)                                         ***\n***     R5      - (unused)                                         ***\n***     R6      - (unused)                                         ***\n***     R7      - (unused)                                         ***\n***     R8      - Base of COPYNAME parm.                           ***\n***     R9      - Base of NEXTNAME parm.                           ***\n***     R10     - Base of PANCOM parm.                             ***\n***     R11     - Linkage register used with BAL.                  ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage conventions, base of WORKD area.         ***\n***     R14-R15 - Linkage conventions, work, macros.               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     GTEUM03  - Description of Panvalet comment area.           ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial version.                                      ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\nMAPARMS  L     R2,0(0,R1)               R2 POINTS TO FUNCTION PARM\n         MVC   FUNCTION,0(R2)             MOVE INTO STORAGE\n         LM    R9,R10,4(R1)             LOAD OTHER PARM ADDRESSES\n         USING NEXTNAME,R9                ADDRESSABILITY\n         USING PANCOM,R10                 ADDRESSABILITY\n         L     R8,12(0,R1)              LOAD ADDR OF COPY PARM\n         USING COPYNAME,R8                ADDRESSABILITY\n*\nMANAMES  BAL   RBAL,NAMES               PROCESS THE NAME PARM\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO ERROR ENDING\n*\nMAOPEN   BAL   RBAL,OPEN                OPEN THE OUTPUT FILE\nMAPUT    BAL   RBAL,PUT                 WRITE THE OUTPUT RECORDS\nMACLOSE  BAL   RBAL,CLOSE               CLOSE THE OUTPUT FILE\n*\nMAPAN#1  BAL   RBAL,PAN#1               EXECUTE THE PANVALET PROGRAM\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END12                      GO TO ERROR ENDING\n*\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND16    LA    R15,16                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INITIALIZE THE DCB AND OPEN THE OUTPUT FILE.                  ***\n***  INITIALIZE THE PANVALET PARM WITH THE DDNAME.                 ***\n***                                                                ***\n**********************************************************************\nOPEN     ST    RBAL,OPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   CNTLDCB(CNTLDCBL),CNTLDCBD  INITIALIZE THE DCB\n         MVC   OPENL(OPENLLN),OPENLD    INITIALIZE THE OPEN PARM LIST\n*\n         MVC   PANPARM,=H'8'            SET PARM LENGTH\n         MVC   PANPARM+2(8),CNTLDCB+(DCBDDNAM-IHADCB)  COPY THE DDNAME\n         LA    R1,PANPARM               ADDR OF PARM\n         ST    R1,PANPARML                INTO ONE-MEMBER LIST\n         OI    PANPARML+00,X'80'        MARK END OF ONE-MEMBER LIST\n*\n         LA    R3,OPENL                 R3 POINTS TO THE PARM LIST\n         LA    R2,CNTLDCB               R2 POINTS TO THE DCB\n         OPEN  ((R2),(OUTPUT)),MF=(E,(R3))  OPEN THE FILE\n*\n         B     OPEND\n*\nOPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     OPEND                    BRANCH TO ENDING\n*\nOPEND    L     RBAL,OPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE OUTPUT FILE.                                        ***\n***                                                                ***\n**********************************************************************\nCLOSE    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE THE CLOSE PARM LIST\n*\n         LA    R3,CLOSL                 R3 POINTS TO THE PARM LIST\n         LA    R2,CNTLDCB               R2 POINTS TO THE DCB\n         CLOSE ((R2)),MF=(E,(R3))       CLOSE THE FILE\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE THE PDS AND PAN NAME TEXT UNITS FROM THE INPUT NAME    ***\n***                                                                ***\n**********************************************************************\nNAMES    ST    RBAL,NARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nNASUFF   LA    R2,NEXTNAME              R2 POINTS TO NAME\n         BCTR  R2,0                     R2 POINTS JUST BEFORE NAME\n         LA    R3,10                    R3 IS COUNTER\n*\nNALOOP1  LA    R2,1(0,R2)               R2 POINTS TO NEXT CHARACTER\n         CLI   0(R2),X'40'              IF BLANK\n         BE    NALENGTH                   BRANCH OUT\n         BCT   R3,NALOOP1               LOOP BACK UP\n*\n         LA    R2,1(0,R2)               FALL THRU: POINT TO NEXT CHAR\n*\n*                                       R2 NOW POINTS JUST BEYOND NAME\nNALENGTH LA    R3,NEXTNAME              R3 POINTS TO NAME\n         SR    R2,R3                    R2 IS LENGTH OF PAN NAME\n         C     R2,=F'3'                 IF LENGTH LT 3\n         BL    NARET04                    GO TO ERROR\n         STH   R2,NAPAN                 SAVE THE LENGTH OF PAN NAME\n         STH   R2,NAPANCOP              SAVE SAME LENGTH OF COPY NAME\n         S     R2,=F'2'                 R2 IS LENGTH OF PDS NAME\n         STH   R2,NAPDS                 SAVE THE LENGTH OF PDS NAME\n*\nNANAMES  LH    R2,NAPAN                 R2 IS LENGTH OF PAN NAME\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   NAPAN+2(0),NEXTNAME        MOVE NAME TO STORAGE\n         EX    R2,*-6                   EXECUTE THE MOVE\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   NAPANCOP+2(0),COPYNAME     MOVE COPY NAME TO STORAGE\n         EX    R2,*-6                   EXECUTE THE MOVE\n         LH    R2,NAPDS                 R2 IS LENGTH OF PDS NAME\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   NAPDS+2(0),NEXTNAME        MOVE NAME TO STORAGE\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\n         B     NAEND\n*\nNARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     NAEND                    BRANCH TO ENDING\n*\nNAEND    L     RBAL,NARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE AND WRITE PANVALET CONTROL CARDS TO OUTPUT FILE        ***\n***                                                                ***\n**********************************************************************\nPUT      ST    RBAL,PURBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nPUFUNCT  CLC   FUNCTION,RESTORE         IF IT IS A RESTORE\n         BE    PURESTOR                   GENERATE ++WRITE CARDS\n         B     PUOTHER                  ELSE GENERATE ++ADD CARDS\n*\nPURESTOR TEXTBILD  AREA=PULINE1,TEXT=(OPTOUT,PDSDDN,COMMA,NAPDS)\n         TEXTBILD  AREA=PULINE2,TEXT=(WRITE,NAPAN)\n         TEXTBILD  AREA=PULINE3,TEXT=(COPY,NAPAN,COMMA,NAPANCOP)\n         LA    R3,3                     R3 IS COUNTER\n         B     PUTOUT                   GO TO WRITE IT\n*\nPUOTHER  MVC   PUCOM(52),PANCOM         MOVE THE TEXT TO WORK AREA\n         MVC   PUCOM(2),=H'50'          REPLACE '* ' WITH LENGTH\n         TEXTBILD  AREA=PULINE1,TEXT=(OPTION,PDSDDN,COMMA,NAPDS)\n         TEXTBILD  AREA=PULINE2,TEXT=(ADD,NAPAN,DATA)\n         TEXTBILD  AREA=PULINE3,TEXT=(COMMENT,NAPAN,COMMA,PUCOM)\n         LA    R3,3                     R3 IS COUNTER\n         B     PUTOUT                   GO TO WRITE IT\n*\nPUTOUT   LA    R2,PULINE1-80            R2 POINTS TO -1 LINE\nPULOOP1  LA    R2,80(0,R2)              R2 POINTS TO NEXT LINE\n         PUT   CNTLDCB,(R2)             WRITE THE LINE\n         BCT   R3,PULOOP1               LOOP BACK UP\n*\n         B     PUEND\n*\nPURET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PUEND                    BRANCH TO ENDING\n*\nPUEND    L     RBAL,PURBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  EXECUTE THE PANVALET PROGRAM.                                 ***\n***                                                                ***\n**********************************************************************\nPAN#1    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R1,PANPARML              POINT TO THE PARM LIST\n         LINK  EP=PAN#1                 EXECUTE PANVALET\n         LTR   R15,R15                  IF NOT RC=00\n         BNE   PARET04                    GO TO HIGH RETURN\n*\n         B     PAEND\n*\nPARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     PAEND                    BRANCH TO ENDING\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nCNTLDCBD DCB   DDNAME=WRK002,DSORG=PS,LRECL=80,BLKSIZE=80,RECFM=F,     X\n               MACRF=PM\nOPENLD   OPEN  (,),MF=L\nCLOSD    CLOSE (),MF=L\n*\nOPTION   DC    H'15',C'--OPTION INPUT,'\nOPTOUT   DC    H'16',C'--OPTION OUTPUT,'\nADD      DC    H'06',C'--ADD '\nDATA     DC    H'05',C',DATA'\nCOMMENT  DC    H'10',C'--COMMENT '\nCOMMA    DC    H'01',C','\nWRITE    DC    H'13',C'--WRITE WORK,'\nCOPY     DC    H'07',C'--COPY '\n*\nRESTORE  DC    CL12'RESTORE'            FUNCTION LITERAL\n*\nPDSDDN   DC    H'03',CL8'PDS'\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\nOPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nNARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPURBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nFUNCTION DS    CL12                     FUNCTION NAME\nNAPDS    DS    H,CL10                   TEXT OF PDS MEMBER NAME\nNAPAN    DS    H,CL10                   TEXT OF PAN MEMBER NAME\nNAPANCOP DS    H,CL10                   TEXT OF PAN COPY MEMBER NAME\nLINEOUT  DS    CL80                     OUTPUT TEXT LINE\n*\nPUCOM    DS    H,CL50                   TEXT MADE FROM PAN COMMENT\n*\nPULINE1  DS    CL80                     OUTPUT TEXT TO BE BUILT\nPULINE2  DS    CL80                     OUTPUT TEXT TO BE BUILT\nPULINE3  DS    CL80                     OUTPUT TEXT TO BE BUILT\nPULINES  EQU   (*-PULINE1)/80           NUMBER OF OUTPUT LINES\n*\nPANPARML DS    A                        PARM LIST FOR PANVALET\nPANPARM  DS    H,CL100                  LENGTH, TEXT OF PARM\n*\nCNTLDCB  DCB   DDNAME=WRK002,DSORG=PS,LRECL=80,BLKSIZE=80,RECFM=F,     X\n               MACRF=PM\nCNTLDCBL EQU   *-CNTLDCB\n*\nOPENL    OPEN  (,),MF=L\nOPENLLN  EQU   *-OPENL\n*\nCLOSL    CLOSE (),MF=L\nCLOSLLN  EQU   *-CLOSL\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\nPANCOM   GTEUM03  DSECT=YES             PANVALET COMMENT AREA\n*\nNEXTNAME DSECT\n         DS       CL10                  PANVALET NAME TO BE ADDED\nCOPYNAME DSECT\n         DS       CL10                  PANVALET NAME TO BE COPIED\n*\n         IHADCB  DSORG=PS,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA7T": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA7T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***   CODE TO TEST GTEUA70                                          ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n*\n         L     R2,R1SAVE                R2 POINTS TO PARM LIST\n         L     R2,0(0,R2)               R2 POINTS TO PARM\n         LH    R3,0(0,R2)               R3 HAS LENGTH OF PARM\n         LTR   R3,R3                    IF ZERO LENGTH\n         BZ    ENDING                     GO TO ENDING\n         MVC   PARMIN(8),BLANKS         CLEAR PARMIN FIELD\n         BCTR  R3,0                     LENGTH -1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   PARMIN(0),2(R2)            MOVE PARM CHARACTERS\n         EX    R3,*-6                   EXECUTE THE MOVE\n*\n         PRINT GEN\n*\n         MVC   PDSDCB(PDSDCBL),PDSDCBD  INITIALIZE DCB\n*\n         MVC   MAFUNCT(12),TESTFUNC     MOVE FUNCTION TO PARM\n*\n         MVC   PDOPENL(PDOPENLN),PDOPEND INITIALIZE OPEN LIST\n         OPEN  (PDSDCB,(OUTPUT)),MF=(E,PDOPENL) OPEN IT\n*\n         MVC   DIRENTRY(42),DUMMYDIR    INITIALIZE DIRECTORY ENTRY\n         MVC   GU01NAM(8),PARMIN        MOVE NAME INTO DIR ENTRY\n*\n         LA    R15,MAFUNCT              ADDR OF DCB\n         ST    R15,PARM70+00              INTO PARM LIST\n         LA    R15,PDSDCB               ADDR OF DCB\n         ST    R15,PARM70+04              INTO PARM LIST\n         LA    R15,DIRENTRY             ADDR OF DIRECTORY ENTRY\n         ST    R15,PARM70+08              INTO PARM LIST\n         LA    R15,MAALIAS              ADDR OF ALIAS PARM\n         ST    R15,PARM70+12              INTO PARM LIST\n         OI    PARM70+12,X'80'          MARK END OF LIST\n         LA    R1,PARM70                ADDRESS OF PARM LIST\n         L     R15,=V(GTEUA70)          ADDRESS OF SUBROUTINE\nMACALL   BALR  R14,R15                  PERFORM THE SUBROUTINE\n*\n         MVC   PDCLOSL(PDCLOSLN),PDCLOSD INITIALIZE CLOSE LIST\n         CLOSE (PDSDCB),MF=(E,PDCLOSL)  CLOSE IT\n*\n         PRINT NOGEN\n*\nEND00    LA    R15,0                    SET COMPLETION CODE 00\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\nTESTFUNC DC    CL12'ALIAS'              LITERAL FUNCTION FOR TEST\nMAALIAS  DC    CL8'VAMP    '            ALIAS CAN BE UPTO 8 CHARS\n*\nDUMMYDIR DS    0D                     , ISPF STATS PDS DIRECTORY ENTRY\nDUMMNAM  DC    CL8' '                   MEMBER NAME\nDUMMTTR  DC    XL3'000109'              PDS VALUE 'TTR'\nDUMMC    DC    X'0F'                    PDS VALUE 'C'\nDUMMVER  DC    X'01'                    ISPF VERSION NUMBER (BIN)\nDUMMMOD  DC    X'00'                    ISPF MOD NUMBER (BIN)\n         DC    XL2'0000'                (UNUSED, X'0000')\nDUMMDATC DC    XL4'0085100F'            ISPF DATE CREATED (PACK)\nDUMMDATM DC    XL4'0086200F'            ISPF DATE MODIFIED (PACK)\nDUMMTIMM DC    XL2'1606'                ISPF TIME MODIFIED (PK NOSIGN)\nDUMMSIZE DC    XL2'0000'                ISPF SIZE (BIN)\nDUMMINIT DC    XL2'0000'                ISPF INITIAL SIZE (BIN)\nDUMMMODL DC    XL2'0000'                ISPF COUNT OF MOD LINES (BIN)\nDUMMID   DC    CL7'EML17T'              ISPF USERID\n         DC    CL3' '                   (UNUSED X'404040')\n         PRINT GEN\nPDOPEND  OPEN  (,),MF=L\nPDCLOSD  CLOSE (),MF=L\n*\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\nPARMIN   DS    CL8                      INPUT PARM\nMAFUNCT  DS    CL12                    'UPDATE' 'DELETE' 'ALIAS' ETC\nDIRENTRY GTEUM01 DSECT=NO               DIRECTORY ENTRY\nPARM70   DS    4F                       PARM LIST FOR GTEUA70\n*\n         PRINT GEN\nPDOPENL  OPEN  (,),MF=L\nPDOPENLN EQU *-PDOPENL\nPDCLOSL  CLOSE (),MF=L\nPDCLOSLN EQU *-PDCLOSL\n         PRINT NOGEN\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSDCBL  EQU   *-PDSDCB\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n         IHADCB DSORG=PO,DEVD=DA\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA70": {"ttr": 5387, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA70'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   10                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   GTEUA70                                      ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***                                                                ***\n***    The function of this program is to update a PDS with data   ***\n***    from a sequential file, and ISPF statistics from an input   ***\n***    parameter.  Also, this program can delete a PDS entry.      ***\n***                                                                ***\n***    The program accepts the ISPF statistics from the 42-byte    ***\n***    input parm.  It copies the data to the PDS, then uses the   ***\n***    input parm, which is in STOW format, to update the          ***\n***    directory of the PDS.  The program updates the ISPF 'SIZE'  ***\n***    field of the directory entry before performing the STOW     ***\n***    operation.                                                  ***\n***                                                                ***\n***    The sequential dataset must have a LRECL=80, and must have  ***\n***    a fixed length record format.  It must also have a BLKSIZE  ***\n***    of at least 80.                                             ***\n***                                                                ***\n***    BPAM is used for manipulating the directory of the PDS,     ***\n***    and writing the data to the output PDS.  QSAM is used to    ***\n***    read the input sequential dataset.                          ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Invoking this program:                                        ***\n***                                                                ***\n***    This program is a callable subroutine.  The caller passes   ***\n***    the addresses of two parameters to this subroutine:         ***\n***                                                                ***\n***      1.  The address of a 42-byte area containing the ISPF     ***\n***          statistics in STOW format.                            ***\n***      2.  The address of an opened DCB with DSORG=PO, and       ***\n***          MACRF=W or MACRF=(R,W).                               ***\n***                                                                ***\n***    This program is Reenterable, Reusable, and Refreshable.     ***\n***    The following is sample reenterable code for invoking the   ***\n***    program.                                                    ***\n*** *  ---------------------------------------------------------   ***\n***          MVC   PDSDCB(PDSDCBL),PDSDCBD     INITIALIZE DCB      ***\n*** *                                                              ***\n***          MVC   PDOPENL(PDOPENLN),PDOPEND INITIALIZE OPEN LIST  ***\n***          OPEN  (PDSDCB,(OUTPUT)),MF=(E,PDOPENL) OPEN IT        ***\n*** *                                                              ***\n***          LA    R15,MAFUNCT              ADDR OF FUNCTION       ***\n***          ST    R15,PARM70+00              INTO PARM LIST       ***\n***          LA    R15,PDSDCB               ADDR OF DCB            ***\n***          ST    R15,PARM70+04              INTO PARM LIST       ***\n***          LA    R15,DIRENTRY             ADDR OF DIR ENTRY      ***\n***          ST    R15,PARM70+08              INTO PARM LIST       ***\n***          LA    R15,ALIAS                ADDR OF ALIAS PARM     ***\n***          ST    R15,PARM70+12              INTO PARM LIST       ***\n***          OI    PARM70+12,X'80'          MARK END OF LIST       ***\n***          LA    R1,PARM70                ADDRESS OF PARM LIST   ***\n***          L     R15,=V(GTEUA70)          ADDRESS OF SUBROUTINE  ***\n***          BALR  R14,R15                  PERFORM THE SUBROUTINE ***\n*** *                                                              ***\n***          MVC   PDCLOSL(PDCLOSLN),PDCLOSD INITIALIZE CLOSE LIST ***\n***          CLOSE (PDSDCB),MF=(E,PDCLOSL)  CLOSE IT               ***\n*** *  ---------------------------------------------------------   ***\n*** PDOPEND  OPEN  (,),MF=L                                        ***\n*** PDCLOSD  CLOSE (),MF=L                                         ***\n*** *                                                              ***\n*** PDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)                 ***\n*** *  ---------------------------------------------------------   ***\n*** WORKD    DSECT                                                 ***\n*** DIRENTRY GTEUM01 DSECT=NO               DIRECTORY ENTRY        ***\n*** *                                                              ***\n*** PARM70   DS    4F                       PARM LIST FOR GTEUA70  ***\n*** MAFUNCT  DS    CL12                    'UPDATE' 'DELETE' ETC.  ***\n*** *                                                              ***\n*** PDOPENL  OPEN  (,),MF=L                                        ***\n*** PDOPENLN EQU *-PDOPENL                                         ***\n*** PDCLOSL  CLOSE (),MF=L                                         ***\n*** PDCLOSLN EQU *-PDCLOSL                                         ***\n*** *                                                              ***\n*** PDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)                 ***\n*** PDSDCBL  EQU   *-PDSDCB                                        ***\n*** *  ---------------------------------------------------------   ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1. Open the sequential file.                                  ***\n***  2. Initialize the DECB for the PDS.                           ***\n***  3. Get storage for input/output operations.                   ***\n***  4. Enqueue on the DSNAME and member name.                     ***\n***  5. Build output blocks of records.                            ***\n***  6. Write output records.                                      ***\n***  7. Dequeue the DSNAME and member name.                        ***\n***  8. Free storage for input/output operations.                  ***\n***  9. Update the size field of the ISPF statistics.              ***\n*** 10. Update the time and date modified, and ID fields of the    ***\n***     ISPF statistics.                                           ***\n*** 11. STOW the new directory entry into the PDS directory.       ***\n*** 12. Close the output file.                                     ***\n***                                                                ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. The input file DDNAME is in the macro at label SEQDCBD.    ***\n***                                                                ***\n***  2. The first bit of the 'C' field, at offset +11 (X'0B') in   ***\n***     the directory information field indicates that the entry   ***\n***     is an alias, not a true name.                              ***\n***                                                                ***\n***  3. Prior to performing the update, the program obtains an     ***\n***     exclusive enqueue on the 44-byte dsname followed by the    ***\n***     eight-byte member name.  Major name is at label QNAME.     ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***                                                                ***\n***     00 - Operation was successful.                             ***\n***                                                                ***\n***     16 - A.  RECFM of seq file not F, FB, FA, or FBA           ***\n***          B.  LRECL of seq file not 80                          ***\n***          C.  BLKSIZE of seq file less than 80                  ***\n***          D.  Not enough storage for I/O operation, or FREEMAIN ***\n***              for the storage was unsuccessful.                 ***\n***          E.  STOW operation failed because the directory was   ***\n***              out of space.                                     ***\n***          F.  DDNAME for PDS not allocated.                     ***\n***          G.  Failure to enqueue or dequeue the dataset name.   ***\n***          H.  DELETE member name is not in PDS.                 ***\n***          I.  alias name already exists in PDS.                 ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Used by macros, and work registers.              ***\n***     R4-R5   - Work registers, not used to pass information     ***\n***               between routines.                                ***\n***     R6      - <unused>                                         ***\n***     R7      - <unused>                                         ***\n***     R8      - Base address of PDS DCB passed by caller.        ***\n***     R9      - Base address of directory entry work area.       ***\n***     R10     - Linkage register used with BAL.                  ***\n***     R11     - Base address if I/O work area.                   ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage registers and base of WORKD data area.   ***\n***     R14-R15 - Linkage registers.                               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     GTEUM01  - Describes directory entry in STOW format.       ***\n***                                                                ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial version.                                      ***\n***      B.  ADD FOURTH PARM - ALIAS - TO CREATE ALIASES.          ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\n         PRINT NOGEN\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA 0\n*\nMAPARMS  L     R2,0(0,R1)               R2 POINTS TO FUNCTION\n         MVC   FUNCTION,0(R2)             MOVE IT INTO STORAGE\n         LM    R8,R9,4(R1)              R8 POINTS TO THE OPEN PDS DCB\n*                                       R9 POINTS TO DIR ENTRY AREA\n         USING PDSDCB,R8                ADDRESSABILITY\n         USING DIRENTRY,R9              ADDRESSABILITY\n         USING INAREA,R11               ADDRESSABILITY\n*\nMAJOBDSN BAL   RBAL,JOBDSN              FIND JOBNAME AND PDS DSNAME\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO BAD ENDING\n*\nMADEL    CLC   FUNCTION,DELETE          IF FUNCTION IS 'DELETE'\n         BNE   MAALIAS                    THEN\n         BAL   RBAL,DLETE                   DELETE THE ENTRY\n         CLC   RETCDE,F0                IF RETURN CODE OKAY\n         BE    END00                      END WITH RC=00\n         B     END16                    ELSE END WITH RC=04\nMAALIAS  CLC   FUNCTION,ALIAS           IF FUNCTION IS 'ALIAS'\n         BNE   MAALEND                    THEN\n         BAL   RBAL,ALALIAS                 CREATE ALIAS\n         CLC   RETCDE,F0                IF RETURN CODE OKAY\n         BE    END00                      END WITH RC=00\n         B     END16                    ELSE END WITH RC=04\nMAALEND  NOPR  0\n*\nMAOPEN   BAL   RBAL,SQOPEN              OPEN THE SEQUENTIAL DATASET\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO BAD ENDING\n*\nMAENQ    BAL   RBAL,ENQUEUE             ENQUEUE ON THE DATASET NAME\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO BAD ENDING\n*\nMARW     BAL   RBAL,RWPROC              PERFORM READ/WRITE PROC\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO BAD ENDING\n*\nMADEQ    BAL   RBAL,DEQUEUE             DEQUEUE THE DATASET NAME\n         CLC   RETCDE,F0                IF BAD RETURN\n         BNE   END16                      GO TO BAD ENDING\n*\nMACLOSE  BAL   RBAL,SCLOSE              CLOSE THE SEQUENTIAL DATASET\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\nEND00    LA    R15,0                    SET COMPLETION CODE 00\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nEND16    LA    R15,16                   SET COMPLETION CODE 16\n         ST    R15,COMPCODE               INTO STORAGE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FIND JOBNAME AND PDS DSNAME                                   ***\n***                                                                ***\n**********************************************************************\nJOBDSN   ST    RBAL,JORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XR    R15,R15                  ADDRESS OF PSA\n         USING PSA,R15                    ASSIGN ADDRESSABILITY\n         L     R14,FLCCVT               ADDRESS OF CVT\n         USING CVTMAP,R14                 ASSIGN ADDRESSABILITY\n         DROP  R15                        DROP ADDRESSABILITY\n         L     R15,CVTTCBP              ADDRESS OF NEXT TCB POINTER\n         L     R15,4(0,R15)             ADDRESS OF CURRENT TCB\n         USING TCB,R15                    ASSIGN ADDRESSABILITY\n         DROP  R14                        DROP ADDRESSABILITY\n         L     R14,TCBTIO               ADDRESS OF TIOT\n         USING TIOT,R14                   ASSIGN ADDRESSABILITY\n         MVC   JOBNAME(8),TIOCNJOB      JOBNAME TO STORAGE\n*\n         DROP  R15                      DROP ADDRESSABILITY\n         LA    R15,TIOELNGH             ADDRESS OF FIRST TIOT ENTRY\n         USING TIOENTRY,R15               ASSIGN ADDRESSABILITY\n         NI    SWITCH0,X'FF'-X'02'      INITIALIZE PDS DDNAME FOUND SW\nJOLENGTH CLI   TIOELNGH,X'00'           IF ENTRY LNTH 0 (END OF CHAIN)\n         BE    JOENDDDN                   BRANCH OUT\n         CLC   TIOEDDNM(8),PDSDDN       IF MATCH ON DDNAME\n         BE    JODSN                      THEN\n         XR    R0,R0                    CLEAR FOR INSERT\n         IC    R0,TIOELNGH              R6 HAS LENGTH OF ENTRY\n         AR    R15,R0                   R15 POINTS TO NEXT ENTRY\n         B     JOLENGTH                 LOOP BACK UP\n*\nJODSN    OI    SWITCH0,X'02'            TURN ON PDS DDNAME FOUND SWITCH\n         XR    R1,R1                    CLEAR FOR INSERT\n         ICM   R1,7,TIOEJFCB            R1 POINTS TO JFCB\n         USING JFCB,R1                    ASSIGN ADDRESSABILITY\n         MVC   PDSDSN(44),JFCBDSNM      MOVE DSNAME TO STORAGE\n         MVC   PDSMEMNM(8),JFCBELNM     MOVE MEMBER NAME TO RNAME\n*\nJOENDDDN TM    SWITCH0,X'02'            IF DDNAME WAS FOUND\n         BO    JOEND                      GO TO ENDING\n         MVC   PDSDSN(44),BLANKS        ELSE BLANK OUT DSNAME\n         MVC   PDSMEMNM(8),BLANKS         AND MEMBER NAME\n         B     JORET04                    GO TO ERROR ENDING\n*\n         DROP  R14,R15,R1               DROP ADDRESSABILITY\n*\nJORET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     JOEND                    BRANCH TO ENDING\n*\nJOEND    L     RBAL,JORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  ENQUEUE ON THE 52-BYTE RESOURCE NAME OF PDSDSN+GU01NAM        ***\n***                                                                ***\n***  NOTE: USE GU01NAM INSTEAD OF PDSMEMNM.  GU01NAM IS THE        ***\n***        MEMBER NAME FED FROM THE CALLER, WHILE PDSMEMNM IS      ***\n***        ONLY THE MEMBER NAME FROM ALLOCATION (JCL OR ALLOC)     ***\n***        WHICH HAS BEEN PICKED OUT OF THE JFCB.                  ***\n***                                                                ***\n**********************************************************************\nENQUEUE  ST    RBAL,ENRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   RNAME(44),PDSDSN         DSN TO CHARS 1-44 OF RESOURCE\n         MVC   RNAME+44(8),GU01NAM      MEMBER NAME TO CHARS 45-52\n*\n         MVC   ENQ(ENQLN),ENQD          INITIALIZE ENQ PARM LIST\n         LA    R2,QNAME                 R2 POINTS TO QUEUE (MAJOR)\n         LA    R3,RNAME                 R3 POINTS TO RESOURCE (MINOR)\n         ENQ   ((R2),(R3),E,52,SYSTEM),MF=(E,ENQ)  ENQUEUE THE RESOURCE\n         LTR   R15,R15                  IF NON-ZERO RETURN\n         BNZ   ENRET04                    GO TO ERROR\n*\n         B     ENEND\n*\nENRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     ENEND                    BRANCH TO ENDING\n*\nENEND    L     RBAL,ENRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  DEQUEUE THE 52-BYTE RESOURCE NAME.                            ***\n***                                                                ***\n**********************************************************************\nDEQUEUE  ST    RBAL,DERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   DEQ(DEQLN),DEQD          INITIALIZE DEQ PARM LIST\n         LA    R2,QNAME                 R2 POINTS TO QUEUE (MAJOR)\n         LA    R3,RNAME                 R3 POINTS TO RESOURCE (MINOR)\n         DEQ   ((R2),(R3),52,SYSTEM),MF=(E,DEQ)  DEQUEUE THE RESOURCE\n         LTR   R15,R15                  IF NON-ZERO RETURN\n         BNZ   DERET04                    GO TO ERROR\n*\n         B     DEEND\n*\nDERET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DEEND                    BRANCH TO ENDING\n*\nDEEND    L     RBAL,DERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  DELETE THE PDS DIRECTORY ENTRY                                ***\n***                                                                ***\n**********************************************************************\nDLETE    ST    RBAL,DLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         STOW  PDSDCB,DIRENTRY,D        DELETE THE PDS ENTRY\n         LTR   R15,R15                  IF ENTRY NOT FOUND\n         BNZ   DLRET04                    GO TO HIGH RETURN\n*\n         B     DLEND\n*\nDLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DLEND                    BRANCH TO ENDING\n*\nDLEND    L     RBAL,DLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CREATE THE ALIAS ENTRY                                        ***\n***                                                                ***\n**********************************************************************\nALALIAS  ST    RBAL,ALRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R1,R1SAVE                RELOAD R1\n         L     R1,12(0,R1)              PUT ALIAS ADDR INTO R1\n         MVC   GU01NAM(8),0(R1)         PUT ALIAS INTO DIRENT NAME\n         OI    GU01C,X'80'              TURN ON ALIAS BIT\n         NI    GU01C,X'FF'-B'00011111'  TURN OFF REST OF DATA STATS\n         STOW  PDSDCB,DIRENTRY,A        ADD ALIAS ENTRY TO DIRECTORY\n*\n         ST    R15,RETCDE               RETURN CODE FROM STOW\n         B     ALEND                    BRANCH TO ENDING\n*\nALEND    L     RBAL,ALRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  OPEN THE INPUT SEQUENTIAL DATASET                             ***\n***                                                                ***\n**********************************************************************\nSQOPEN   ST    RBAL,SQRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   SQOPENL(SQOPENLN),SQOPEND             INITIALIZE LIST\n         MVC   SEQDCB(SEQDCBL),SEQDCBD               INITIALIZE DCB\n         OPEN  (SEQDCB,(INPUT)),MF=(E,SQOPENL)       OPEN THE DCB\n*\n         TM    SEQDCB+(DCBRECFM-IHADCB),DCBRECF      IF NOT FIXED\n         BNO   SQRET04                                 BRANCH OUT\n         CLC   SEQDCB+(DCBLRECL-IHADCB)(2),=H'80'    IF NOT LRECL 80\n         BNE   SQRET04                                 BRANCH OUT\n         CLC   SEQDCB+(DCBBLKSI-IHADCB)(2),=H'80'    IF BLKSI LT 80\n         BL    SQRET04                                 BRANCH OUT\n         MVC   SEQBLKSI(2),SEQDCB+(DCBBLKSI-IHADCB)  SAVE THE BLKSI\n         MVC   SEQLRECL(2),SEQDCB+(DCBLRECL-IHADCB)  SAVE THE LRECL\n*\n         B     SQEND\n*\nSQRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     SQEND                    BRANCH TO ENDING\n*\nSQEND    L     RBAL,SQRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CLOSE THE INPUT SEQUENTIAL DATASET                            ***\n***                                                                ***\n**********************************************************************\nSCLOSE   ST    RBAL,SCRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   SQCLOSL(SQCLOSLN),SQCLOSD             INITIALIZE LIST\n         CLOSE (SEQDCB),MF=(E,SQCLOSL)               CLOSE THE DCB\n*\n         B     SCEND\n*\nSCRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     SCEND                    BRANCH TO ENDING\n*\nSCEND    L     RBAL,SCRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INITIALIZE DECB FOR PDS.                                      ***\n***  GET STORAGE FOR INPUT/OUTPUT RECORDS.                         ***\n***  READ INPUT RECORDS.                                           ***\n***  BUILD OUTPUT BLOCKS OF RECORDS.                               ***\n***  WRITE OUTPUT RECORDS.                                         ***\n***  FREE STORAGE.                                                 ***\n***  UPDATE SIZE FIELD OF ISPF STATS.                              ***\n***                                                                ***\n**********************************************************************\nRWPROC   ST    RBAL,RWRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nRWDSCB   MVC   PDSDECB(PDDECBLN),PDSDECBD          INITIALIZE DECB\n*\nRWGETM   LH    R4,PDSDCB+(DCBBLKSI-IHADCB)         R4 HAS BLKSIZE\n         GETMAIN  R,LV=(R4)                        GET STORAGE\n         LTR   R15,R15                             IF NOT GOOD\n         BNZ   RWRET04                               GO TO BAD ENDING\n         LR    R11,R1                              R11 POINTS TO INAREA\n*\n         MVC   PDSBLKSI(2),PDSDCB+(DCBBLKSI-IHADCB)  SAVE PDS BLKSIZE\n         XR    R2,R2                    CLEAR R2 FOR COUNTER\nRWLOOP1A XR    R3,R3                    CLEAR R3 FOR BYTE COUNT\n*\nRWLOOP1B LA    R5,INAREA(R3)            R5 POINTS TO TARGET FOR GET\n         GET   SEQDCB,(R5)              READ INTO INAREA\n         LA    R2,1(0,R2)               R2 RECORD COUNT UP BY ONE\n         AH    R3,SEQDCB+(DCBLRECL-IHADCB)  R3 BYTE COUNT UP BY LRECL\n         CH    R3,PDSBLKSI              IF RECORD COUNT LT PDS BLKSIZE\n         BL    RWLOOP1B                   GO GET ANOTHER SEQ RECORD\n         B     RWWRITE                  ELSE GO WRITE THE RECORD\n*\nRWEOFIN  OI    SWITCH0,X'10'   EOF ===> EOF FOR INPUT FILE\n         LTR   R3,R3                    IF NO NEW LRECS BEFORE EOF\n         BZ    RWSTOW                     SKIP THE WRITE\n         B     RWWRITE                  ELSE WRITE THE REMAINING LRECS\n*\nRWWRITE  STH   R3,PDSDCB+(DCBBLKSI-IHADCB)   SET PHYSICAL RECORD LEN\n         WRITE PDSDECB,SF,PDSDCB,INAREA,'S',MF=E   WRITE THE RECORD\n         CHECK PDSDECB                       WAIT FOR OUTPUT\n         TM    SWITCH0,X'10'                 IF NOT END OF FILE\n         BZ    RWLOOP1A                        GO BACK FOR NEXT BLOCK\n*\nRWSTOW   STCM  R2,3,GU01SIZE            PUT SIZE INTO STATS\n         BAL   RBAL,TJOB                CURRENT TIME,DATE,JOBNAME\n         STOW  PDSDCB,DIRENTRY,R        ADD/UPDATE THE PDS ENTRY\n         C     R15,=F'8'                IF BAD STOW\n         BH    RWRET04                    GO TO BAD ENDING\n*\nRWFREEM  FREEMAIN R,LV=(R4),A=(R11)     FREE STORAGE\n         LTR   R15,R15                  IF BAD FREEMAIN\n         BNZ   RWRET04                    GO TO BAD ENDING\n*\n         B     RWEND\n*\nRWRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     RWEND                    BRANCH TO ENDING\n*\nRWEND    L     RBAL,RWRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  ADD CURRENT TIME, DATE, AND JOBNAME TO THE ISPF STATS.        ***\n***                                                                ***\n**********************************************************************\nTJOB     ST    RBAL,TJRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nTJTIME   TIME  DEC                      R0=DATE MMDDHHTH\n*                                       R1=00YYDDDF\n         ST    R1,GU01DATM              SAVE DATE MODIFIED 00YYDDDF\n         STCM  R0,B'1100',GU01TIMM      SAVE TIME MODIFIED HHMM\n*\n         MVC   GU01ID(7),JOBNAME        JOBNAME CHARS 1-7 TO ID\n*\n         B     TJEND\n*\nTJRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     TJEND                    BRANCH TO ENDING\n*\nTJEND    L     RBAL,TJRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nPDSDDN   DC    CL8'PDS'                 DDNAME FOR PDS\nQNAME    DC    CL8'SPFEDIT'             ENQUEUE QUEUE (MAJOR) NAME\nDELETE   DC    CL12'DELETE'             LITERAL\nALIAS    DC    CL12'ALIAS'              LITERAL\n*\nSQOPEND  OPEN  (,),MF=L\nSQCLOSD  CLOSE (),MF=L\nSEQDCBD  DCB   DDNAME=SEQ,DSORG=PS,MACRF=GM,EODAD=RWEOFIN\n*\n         WRITE PDSDECBD,SF,MF=L\n*\nENQD     ENQ   (),MF=L\nDEQD     DEQ   (),MF=L\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSQRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSCRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nRWRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nTJRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nJORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nENRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDERBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nALRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nJOBNAME  DS    CL8                      JOBNAME FROM TIOT\nFUNCTION DS    CL12                     'UPDATE' 'DELETE' ETC.\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA 0\n*                ...1....                X'10' - EOF ON SEQ FILE\n*                ......1.                X'02' - PDS DDNAME FOUND\n*                111.11.1                (UNUSED)\n*\nSEQBLKSI DS    H                        SEQUENTIAL INPUT BLKSIZE\nSEQLRECL DS    H                        SEQUENTIAL INPUT LRECL\nPDSBLKSI DS    H                        PDS OUTPUT BLKSIZE\n*\nPDSDSN   DS    CL44                     PDS DSNAME\nPDSMEMNM DS    CL8                      PDS MEMBER NAME\nRNAME    DS    CL52                     ENQUEUE RESOURCE (MINOR) NAME\n*\nSQOPENL  OPEN  (,),MF=L\nSQOPENLN EQU   *-SQOPENL\nSQCLOSL  CLOSE (),MF=L\nSQCLOSLN EQU   *-SQCLOSL\n         WRITE PDSDECB,SF,MF=L          DECB FOR PDS\nPDDECBLN EQU   *-PDSDECB\n*\nSEQDCB   DCB   DDNAME=SEQ,DSORG=PS,MACRF=GM,EODAD=RWEOFIN\nSEQDCBL  EQU    *-SEQDCB\n*\nENQ      ENQ   (),MF=L\nENQLN    EQU   *-ENQ\nDEQ      DEQ   (),MF=L\nDEQLN    EQU   *-DEQ\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         IHADCB  DEVD=DA,DSORG=PS\n*\nDIRENTRY GTEUM01\n*\n         IHAPSA                         MAP OF PSA  DSECT=PSA\n         IKJTCB                         MAP OF TCB  DSECT=TCB\nTIOT     DSECT\n         IEFTIOT1                       MAP OF TIOT\n         CVT   DSECT=YES                MAP OF CVT  DSECT=CVTMAP\nJFCB     DSECT                          MAP OF JFCB\nJFCBPREF DS    CL16                       PREFIX\n         IEFJFCBN LIST=NO                 JFCB PROPER\n*\nINAREA   DSECT                          DATA INPUT AREA\n         DS    F\n*\nPDSDCB   DSECT                          OPEN DCB PASSED FROM CALLER\n         DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUA8T": {"ttr": 5891, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA8T'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n***********************************************************************\n***                                                                 ***\n***      CODE TO TEST GTEUA80                                       ***\n***                                                                 ***\n***********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         MVC   PANDIR(80),TPANDIR       INITIALIZE TEST DATA\n         MVC   PANCOM(52),TPANCOM       INITIALIZE TEST DATA\n         XC    DIRENTRY(42),DIRENTRY    CLEAR DIRECTORY ENTRY AREA\n*\nMACALL   LA    R15,DIRENTRY             PARM ADDRESS\n         ST    R15,PARMLIST+00            INTO PARM LIST\n         LA    R15,PANDIR               PARM ADDRESS\n         ST    R15,PARMLIST+04            INTO PARM LIST\n         LA    R15,PANCOM               PARM ADDRESS\n         ST    R15,PARMLIST+08            INTO PARM LIST\n         OI    PARMLIST+08,X'80'        MARK END OF LIST\n         LA    R1,PARMLIST              R1 POINTS TO PARM LIST\n         L     R15,=V(GTEUA80)          R15 POINTS TO PROGRAM\n         BALR  R14,R15                  CALL THE SUBROUTINE\n         ST    R15,COMPCODE             SAVE THE RETURN CODE\n*\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\n*                   ....+....1....+....2....+....3....+....4....+....5.\n*              ...+....6....+....7....+....8\nTPANDIR  DC    CL80'JAGUAR03  00400200DATA TAD07/19/8607/22/86000010000X\n               0032 REN170000  JAGUAR03 T---'\nTPANCOM  DC    CL52'* 007.08 01/20/43 08/10/46-03:30 00240 CHUCKIE'\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                1.......               X'80' - (NOT USED)\n*                .1111111               (NOT USED)\n*\nPARMLIST DS    3A                       PARM LIST FOR SUBROUTINE\n         EJECT\nDIRENTRY GTEUM01 DSECT=NO               PDS DIR ENTRY, STOW FORMAT\n         EJECT\nPANDIR   GTEUM04 DSECT=NO               PANVALET DIRECTORY ENTRY\n         EJECT\nPANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT\n         SPACE 3\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUA80": {"ttr": 5895, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT GEN\n         MACRO\n&LABEL   CNVTNUM  &INPUT=,&OUTPUT=,&WORK=WORK8,&DUBL=WORKDUBL\n.*+-------------------------------------------------------------------+\n.*| MACRO TO CONVERT FROM ZONED DISPLAY TO BINARY                     |\n.*|                                                                   |\n.*|  E.G.                                                             |\n.*|             CNVTNUM  INPUT=ZDNUM,OUTPUT=BINNUM                    |\n.*|                                                                   |\n.*|    ZDNUM    DS    CL5                                             |\n.*|    BINNUM   DS    H                                               |\n.*|    *                                                              |\n.*|    WORK8    DS    CL8                                             |\n.*|    WORKDUBL DS    D                                               |\n.*|                                                                   |\n.*| NOTE - AT COMPLETION, THE OUTPUT FIELD AND R1 BOTH CONTAIN        |\n.*|        THE INPUT NUMBER CONVERTED TO BINARY.                      |\n.*+-------------------------------------------------------------------+\n&LABEL   MVI    &WORK,X'F0'                         INITIALIZE WITH\n         MVC    &WORK+1(L'&WORK-1),&WORK              ALL DISPLAY '0'\n         MVC    &WORK+(L'&WORK-L'&INPUT)(L'&INPUT),&INPUT  INSERT INPUT\n.*\n         PACK   &DUBL,&WORK                         CHANGE TO PACKED\n         CVB    R1,&DUBL                            CHANGE TO BINARY\n         ST     R1,&DUBL                            PUT BACK IN STORAGE\n.*\n         MVC    &OUTPUT,&DUBL+(4-L'&OUTPUT)         MOVE TO OUTPUT\n.*\n         MEND\n         EJECT\n         LCLC  &MYNAME                  LOCAL CONSTANT\n*\n&MYNAME  SETC  'GTEUA80'                CSECT NAME\nRBASE    EQU   12                       BASE REGISTER FOR CSECT\nRBAL     EQU   11                       BAL REGISTER\n*\n         TITLE '&MYNAME'                LISTING TITLE\n**********************************************************************\n***                                                                ***\n***                   progname                                     ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***    The function of this program is to create ISPF statistics   ***\n***    from an input Panvalet comment field, and STOW the stats    ***\n***    into the directory of a PDS.                                ***\n***                                                                ***\n***  This program can be invoked with the following code:          ***\n*** *------------------------------------------------------------- ***\n*** MACALL   LA    R15,DIRENTRY             PARM ADDRESS           ***\n***          ST    R15,PARMLIST+00            INTO PARM LIST       ***\n***          LA    R15,PANDIR               PARM ADDRESS           ***\n***          ST    R15,PARMLIST+04            INTO PARM LIST       ***\n***          LA    R15,PANCOM               PARM ADDRESS           ***\n***          ST    R15,PARMLIST+08            INTO PARM LIST       ***\n***          OI    PARMLIST+08,X'80'        MARK END OF LIST       ***\n***          LA    R1,PARMLIST              R1 POINTS TO PARM LIST ***\n***          L     R15,=V(GTEUA80)          R15 POINTS TO PROGRAM  ***\n***          BALR  R14,R15                  CALL THE SUBROUTINE    ***\n***          ST    R15,COMPCODE             SAVE THE RETURN CODE   ***\n*** *------------------------------------------------------------- ***\n*** WORKD    DSECT                                                 ***\n*** *                                                              ***\n*** COMPCODE DS    F                        PROGRAM COMPLETN CODE  ***\n*** PARMLIST DS    3A                       PARM LIST FOR SUBRTINE ***\n*** DIRENTRY GTEUM01 DSECT=NO               PDS ENTRY, STOW FORMAT ***\n*** PANDIR   GTEUM04 DSECT=NO               PANVALET DIR ENTRY     ***\n*** PANCOM   GTEUM03 DSECT=NO               PANVALET COMMENT       ***\n*** *------------------------------------------------------------- ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1.  Check the Panvalet comment for ISPF statistics format.    ***\n***  2.  Convert the Panvalet comment, and the name and initial    ***\n***      size fields from the Panvalet directory entry, into a     ***\n***      PDS directory entry in STOW format.                       ***\n***  3.  OPEN the PDS, FIND the entry, STOW the new entry, and     ***\n***      CLOSE the PDS.                                            ***\n***                                                                ***\n***                                                                ***\n***  NOTES:                                                        ***\n***                                                                ***\n***  1. When the program completes, the PDS directory entry is in  ***\n***     the DIRENTRY parm field.                                   ***\n***                                                                ***\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***     00 - OKAY                                                  ***\n***     04 - Director entry was STOWed, but without stats.         ***\n***          Probably the Panvalet comment was not in stats        ***\n***          format.                                               ***\n***     12 - The update was not made because the member did not    ***\n***          already exist in the PDS.                             ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3   - Linkage conventions, work, macros.               ***\n***     R4      - (unused)                                         ***\n***     R5      - (unused)                                         ***\n***     R6      - (unused)                                         ***\n***     R7      - (unused)                                         ***\n***     R8      - Base of DIRENTRY, the PDS directory entry.       ***\n***     R9      - Base of PANDIR, the Panvalet directory entry.    ***\n***     R10     - Base of PANCOM, the Panvalet comment field.      ***\n***     R11     - Linkage register used with BAL.                  ***\n***     R12     - Base register of program code.                   ***\n***     R13     - Linkage conventions, base of WORKD area.         ***\n***     R14-R15 - Linkage conventions, work, macros.               ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***                                                                ***\n***     GTEUM01  - PDS directory entry, in STOW format.            ***\n***     GTEUM03  - Panvalet comment area, formatted for stats.     ***\n***     GTEUM04  - Panvalet directory entry.                       ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                     ***\n***     GTE Laboratories, Technical Computation Center             ***\n***     40 Sylvan Road                                             ***\n***     Waltham, Massachusetts  02254                              ***\n***                                                                ***\n***                     617/466-2131    V/N 679-2131               ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial installation.                                 ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS ENTERING PROGRAM                       ***\n***                                                                 ***\n***********************************************************************\n&MYNAME  CSECT ,\n         STM   R14,R12,12(R13)          SAVE REGS TO CALLER S.A.\n         B     (BEGIN-&MYNAME)(R15)     BRANCH AROUND EYECATCHER\n         DC    A(L'NAME)                LENGTH OF CSECT NAME\nNAME     DC    C'&MYNAME'               CSECT NAME\n         DC    C' &SYSDATE &SYSTIME '   ASSEMBLY DATE/TIME STAMP\nBEGIN    LR    RBASE,R15                LOAD BASE REGISTER\n         USING &MYNAME,RBASE              ADDRESSABILITY\n         PRINT NOGEN\n         GETMAIN R,LV=WORKDLEN          GET SAVE/WORK AREA\n         ST    R1,8(0,R13)              MY S.A. ADDR INTO CALLER S.A.\n         ST    R13,4(0,R1)              CALLER S.A. ADDR INTO MY S.A.\n         LR    R13,R1                   R13 POINTS TO MY S.A.\n         USING WORKD,R13                ADDRESSABILITY OF SAVE AREA\n         L     R1,4(0,R13)              R1 POINTS TO CALLER S.A.\n         LM    R15,R1,16(R1)            R15 R0 AND R1 ARE RESTORED\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAINLINE ROUTINE                                           ***\n***                                                                 ***\n***********************************************************************\nMAIN     EQU   *                        BEGIN MAINLINE ROUTINE\n         ST    R1,R1SAVE                SAVE INITIAL R1\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         MVI   SWITCH0,B'00000000'      INITIALIZE SWITCH AREA\n*\n         LM    R8,R10,0(R1)             LOAD PARM ADDRESSES\n         USING DIRENTRY,R8              R8 POINTS TO PDS ENTRY\n         USING PANDIR,R9                R9 POINTS TO PAN DIR ENTRY\n         USING PANCOM,R10               R10 POINTS TO PAN COMMENT\n*\n         BAL   RBAL,VALIDATE            CHECK FOR PANVALET/ISPF STATS\n*\n         BAL   RBAL,CONVERT             CONVERT FROM PAN TO PDS\n*\n         BAL   RBAL,STOW                STOW THE STATS IN THE PDS\n         CLC   RETCDE,F0                IF RETURN CODE NOT 00\n         BNE   END12                      GO TO BAD ENDING\n*\n         B     ENDING                   GO TO ENDING\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      LINKAGE CONVENTIONS EXITING PROGRAM                        ***\n***                                                                 ***\n***********************************************************************\n*\nEND00    LA    R15,00                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nEND12    LA    R15,12                   IF PROPOSED COMPLETION CODE\n         C     R15,COMPCODE               IS GREATER THAN STORED CODE\n         BNH   *+8                          THEN\n         ST    R15,COMPCODE                   STORE THE PROPOSED CODE\n         B     ENDING                   GO TO ENDING\n*\nENDING   L     R14,COMPCODE             R14 SAVES COMP CODE\n         LR    R1,R13                   R1 SAVES ADDR OF MY S.A.\n         L     R13,4(0,R1)              R13 RESTORED, PTR CALLER S.A.\n         FREEMAIN R,LV=WORKDLEN,A=(R1)  FREE MY SAVE/WORK AREA\n         LR    R15,R14                  R15 SET TO COMP CODE\n         LM    R0,R12,20(R13)           R0-R12 RESTORED\n         L     R14,12(0,R13)            R14 RESTORED\n         MVI   12(R13),X'FF'            SET COMPLETION SIGNAL\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FIND OUT WHETHER THE PANVALET COMMENT IS IN STATS FORMAT      ***\n***                                                                ***\n**********************************************************************\nVALIDATE ST    RBAL,VARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         NI    SWITCH0,X'FF'-X'01'      TURN OFF STATS SWITCH\n         MVC   VALDWORK(39),PANCOM      COPY CHARS 1-39 TO COMMENT\n         NC    VALDWORK(39),VALDMASK    'AND' THE MASK ONTO COMMENT\n         CLC   VALDWORK(39),VALDMASK    IF THE RESULT MATCHES MASK\n         BNE   VARET04                    THEN\n         OI    SWITCH0,X'01'              TURN ON THE STATS SWITCH\n*\n         B     VAEND\n*\nVARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     VAEND                    BRANCH TO ENDING\n*\nVAEND    L     RBAL,VARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CONVERT FROM PANVALET FORMAT TO PDS ISPF STATS FORMAT         ***\n***                                                                ***\n**********************************************************************\nCONVERT  ST    RBAL,CORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R1,GU04NAML              R1 POINTS TO PAN NAME\n         LA    R2,8(0,0)                R2 IS LOOP COUNTER\nCOLOOP1  LA    R3,1(R1,R2)              R3 POINTS TO TRAILING CHAR\n         CLI   0(R3),X'40'              IF NON-BLANK\n         BNE   CONAME                     LEAVE LOOP, R2=PANLEN-2\n         BCT   R2,COLOOP1               ELSE DECR COUNTER AND LOOP UP\n*\nCOERROR  B     CORET04                  FALL-THRU AFTER 8 IS ERROR\n*\nCONAME   BCTR  R2,0                     R2 IS PANLEN-3, IS PDSLEN-1\n         MVC   GU01NAM(8),BLANKS        INITIALIZE AS BLANKS\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   GU01NAM(0),GU04NAML        MOVE ALL BUT LAST 2 CHARS\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\nCOTTR    XC    GU01TTR,GU01TTR          SET TTR TO X'000000'\n*\nCOSTATS  TM    SWITCH0,X'01'            IF PANCOM IS NOT STATS\n         BNO   CORET04                    BRANCH TO SHORT ENDING\n*\nCOC      MVI   GU01C,X'0F'              SET C TO X'0F' 15 H/W, NO ALIAS\n*\nCOVER    CNVTNUM  INPUT=GU03VER,OUTPUT=GU01VER     CONVERT VERSION\nCOMOD    CNVTNUM  INPUT=GU03MOD,OUTPUT=GU01MOD     CONVERT MOD NUMBER\n*\n         XC    GU01MOD+1(2),GU01MOD+1   CLEAR 2 BYTES AFTER MOD\n*\nCODATC   MVC   JDGREGDT(8),GU03DATC     MOVE DATE TO WORK\n         BAL   RBAL,JDATE               CONVERT TO JULIAN\n         CLC   RETCDE,F0                IF BAD CONVERSION\n         BNE   CORET04                    BRANCH TO SHORT ENDING\n         MVC   GU01DATC,JDJULDT         ELSE MOVE THE DATE\n*\nCODATM   MVC   JDGREGDT(8),GU03DATM     MOVE DATE TO WORK\n         BAL   RBAL,JDATE               CONVERT TO JULIAN\n         CLC   RETCDE,F0                IF BAD CONVERSION\n         BNE   CORET04                    BRANCH TO SHORT ENDING\n         MVC   GU01DATM,JDJULDT         ELSE MOVE THE DATE\n*\nCOTIMM   MVC   WORK8(5),GU03TIMM        WORK8 IS HH:MM...\n         MVC   WORK8+2(2),WORK8+3       WORK8 IS HHMM....\n         PACK  WORKDUBL,WORK8(4)        WORKDUBL IS 00000000 000HHMMC\n         L     R1,WORKDUBL+4            R1 IS 000HHMMC\n         SRL   R1,4                     R1 IS 0000HHMM\n         STCM  R1,3,GU01TIMM            MOVE THE TIME\n*\nCOSIZE   CNVTNUM  INPUT=GU04STMT,OUTPUT=GU01SIZE   STATEMENTS=SIZE\nCOINIT   CNVTNUM  INPUT=GU03INIT,OUTPUT=GU01INIT   INITIAL SIZE\n*\nCOMODL   XC    GU01MODL,GU01MODL        INITIALIZE MOD LINE CNT TO 0\n*\nCOID     MVC   GU01ID,GU03ID            JOBNAME/USERID\n*\n         MVC   GU01ID+7(6),BLANKS       BLANK OUT THE REST\n*\n         B     COEND\n*\nCORET04  MVI   GU01C,X'00'              SET 'C' FOR NONALIAS, NOSTATS\n         LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         ST    R15,COMPCODE             SAVE IT PERMANENTLY, TOO\n         B     COEND                    BRANCH TO ENDING\n*\nCOEND    L     RBAL,CORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CONVERT DISPLAY MM/DD/YY INTO PACKED 00YYDDDF                ***\n***                                                                ***\n**********************************************************************\nJDATE    ST    RBAL,JDRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nJDFORMAT MVC   JDWORK(8),JDGREGDT       MOVE TO WORK AREA\n         NC    JDWORK(8),JDPATT         CHECK NUMERIC 1-2,4-5,7-8\n         CLC   JDWORK(8),JDPATT         IF PATTERN DOESN'T MATCH\n         BNE   JDRET04                    GO TO ERROR END\n*\nJDYEAR   NI    SWITCH0,X'FF'-X'08'      TURN OFF LEAPYEAR SWITCH\n         PACK  WORKDUBL(8),JDYY         WORKDUBL IS 00000000 00000YYC\n         MVC   JDPACKYY(4),WORKDUBL+4   JDPACKYY IS 00000YYC\n         CVB   R1,WORKDUBL              R1 IS BINARY YEAR\n         XR    R0,R0                    R0 CLEAR FOR DIVIDE\n         D     R0,=F'4'                 DIVIDE FOR LEAPYEAR CHECK\n         LTR   R0,R0                    IF LEAPYEAR\n         BNZ   *+8                        THEN\n         OI    SWITCH0,X'08'                TURN ON LEAPYEAR SWITCH\n*\nJDMON    PACK  WORKDUBL(8),JDMM         WORKDUBL IS 00000000 00000MMC\n         CVB   R1,WORKDUBL              R1 IS BINARY MONTH\n         C     R1,=F'1'                 IF LESS THAN JANUARY\n         BL    JDRET04                    GO TO ERROR\n         C     R1,=F'12'                IF GREATER THAN DECEMBER\n         BH    JDRET04                    GO TO ERROR\n         BCTR  R1,0                     R1 CONVERT TO TABLE OFFSET\n         SLA   R1,1                     R1 IS OFFSET INTO TABLE\n         LH    R1,JDDAY0(R1)            R1 BIN DAY FOR DAY 0 OF MONTH\n*\nJDDAY    PACK  WORKDUBL(8),JDDD         WORKDUBL IS 00000000 00000DDC\n         CVB   R0,WORKDUBL              R0 IS BINARY DAY\n         AR    R1,R0                    R1 IS BINARY DDD\n         C     R1,=F'1'                 IF DDD IS 0 OR LESS\n         BL    JDRET04                    GO TO ERROR END\n         C     R1,=F'365'               IF DDD IS GT 365 (WITHOUT LEAP)\n         BH    JDRET04                    GO TO ERROR END\n         TM    SWITCH0,X'08'            IF NOT LEAPYEAR\n         BNO   JDCVD                      AND\n         CLC   JDMM,=C'03'                IF MARCH OR LATER\n         BL    JDCVD                        THEN\n         LA    R1,1(0,R1)                     ADD 1 TO DDD\nJDCVD    CVD   R1,WORKDUBL              WORKDUBL IS 00000000 0000DDDC\n*\nJDCOMB   L     R1,JDPACKYY              R1 IS 00000YYC\n         SRA   R1,4                     R1 IS 000000YY\n         SLA   R1,16                    R1 IS 00YY0000\n         O     R1,WORKDUBL+4            R1 IS 00YYDDDC\n         O     R1,=F'15'                R1 IS 00YYDDDF, NO SIGN\n         ST    R1,JDJULDT               SAVE IT\n*\n         B     JDEND\n*\nJDRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     JDEND                    BRANCH TO ENDING\n*\nJDEND    L     RBAL,JDRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  STOW THE DIRECTORY ENTRY INTO THE PDS DIRECTORY               ***\n***                                                                ***\n**********************************************************************\nSTOW     ST    RBAL,STRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PDSDCB(PDSDCBLN),PDSDCBD INITIALIZE DCB\n         MVC   OPENL(OPENLLN),OPEND     INITIALIZE OPEN LIST\n         MVC   CLOSL(CLOSLLN),CLOSD     INITIALIZE CLOSE LIST\n*\nSTOPEN   OPEN  (PDSDCB,(OUTPUT)),MF=(E,OPENL)     OPEN THE PDS\n*\nSTFIND   FIND  PDSDCB,DIRENTRY,D        FIND THE MEMBER NAME\n         LTR   R15,R15                  IF IT DOESN'T ALREADY EXIST\n         BNZ   STRET04                    CLOSE UP AND GO HOME\n*\nSTSTOW   XC    GU01TTR,GU01TTR          ENSURE TTR IS ZEROED OUT\n         STOW  PDSDCB,DIRENTRY,R        STOW THE ENTRY\n         LTR   R15,R15                  IF NOT CLEAN\n         BNZ   STRET04                    CLOSE UP AND GO HOME\n*\n         B     STCLOSE\n*\nSTRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n*\nSTCLOSE  CLOSE (PDSDCB),MF=(E,CLOSL)    CLOSE THE FILE\n*\nSTEND    L     RBAL,STRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      FIXED DATA AREA                                            ***\n***                                                                 ***\n***********************************************************************\nF0       DC    F'0'                     CONSTANT\nBLANKS   DC    CL80' '                  LITERAL\nX00S     DC    XL40'00'                 LITERAL\n*\nJDDAY0   DC    H'000,031,059,090,120,151'   DDD OF DAY 0 OF EACH MONTH\n         DC    H'181,212,243,273,304,334'\nJDPATT   DC    X'F0F000F0F000F0F0'      PATTERN TO CHECK FOR NN.NN.NN\n*\nVALDMASK DC    CL39'* 000.00 00/00/00 00/00/00-00:00 00000 '\n*\nOPEND    OPEN  (,),MF=L                 PARM LIST FOR OPEN\nCLOSD    CLOSE (),MF=L                  PARM LIST FOR CLOSE\nPDSDCBD  DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\n*\n         LTORG\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      DSECT FOR MY SAVE AREA AND VARIABLES.                      ***\n***                                                                 ***\n***********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE IN R1\n*\nCORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nJDRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nVARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSTRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nSWITCH0  DS    B'00000000'              SWITCH AREA\n*                .......1               X'01' - PAN COMMENT IS STATS\n*                1111111.               (NOT USED)\n*\nJDGREGDT DS    0CL8                     GTEGORIAN DATE\nJDMM     DS    CL2                        MONTH\n         DS    CL1                        /\nJDDD     DS    CL2                        DAY\n         DS    CL1                        /\nJDYY     DS    CL2                        YEAR\n*\nJDWORK   DS    CL8                      WORK AREA TO CHECK NUMERICS\n*\nJDJULDT  DS    F                        JULIAN 00YYDDDF\nJDPACKYY DS    F                        JULIAN YEAR 00000YYC\n*\nWORKDUBL DS    D                        DOUBLEWORD FOR CVB/CVD\n*\nWORK8    DS    CL8                      WORK AREA FOR CNVTNUM\n*\nVALDWORK DS    CL39                     WORK AREA FOR VALDIATION\n*\nOPENL    OPEN  (,),MF=L                 PARM LIST FOR OPEN\nOPENLLN  EQU   *-OPENL\nCLOSL    CLOSE (),MF=L                  PARM LIST FOR CLOSE\nCLOSLLN  EQU   *-CLOSL\n*\nPDSDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W)\nPDSDCBLN EQU   *-PDSDCB\n*\n         DS    0D\nWORKDLEN EQU   *-WORKD\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      MAPPING DSECTS                                             ***\n***                                                                 ***\n***********************************************************************\nDIRENTRY GTEUM01\n         EJECT\nPANCOM   GTEUM03\n         EJECT\nPANDIR   GTEUM04\n*\n         EJECT\n***********************************************************************\n***                                                                 ***\n***      REGISTER EQUATES                                           ***\n***                                                                 ***\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUJ00": {"ttr": 6149, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//GTEUJ00   PROC  PGM1=GTEUA00,\n//             PDS='** NAME IS MISSING **',\n//             MEMBER='** NAME IS MISSING **',\n//             REG1=2048K,\n//             TIME1='(1,00)',\n//             PRINT='*'\n//*********************************************************************\n//*  EXECUTE THE PDS UPDATE UTILITY.                                ***\n//*                                                                 ***\n//*  TO UPDATE MEMBER 'ABC' IN 'SYS1.XYZPROC':                      ***\n//*                                                                 ***\n//*     //S1  EXEC  GTEUJ00,PDS='SYS1.XYZPROC',MEMBER=ABC           ***\n//*     //SEQ  DD DSN=USID.PDSNAME(&MEMBER.),DISP=SHR               ***\n//* -OR-                                                            ***\n//*     //S1  EXEC  GTEUJ00,PDS='SYS1.XYZPROC',MEMBER=ABC           ***\n//*     //SEQ  DD DSN=USID.SEQNAME,DISP=SHR                         ***\n//* -OR-                                                            ***\n//*     //S1  EXEC  GTEUJ00,PDS='SYS1.XYZPROC',MEMBER=ABC           ***\n//*     //SEQ  DD DATA,DLM='??'                                     ***\n//*         DATA                                                    ***\n//*         DATA                                                    ***\n//*     ??                                                          ***\n//*********************************************************************\n//STEP1     EXEC PGM=&PGM1,PARM='&MEMBER',\n//             REGION=&REG1,TIME=&TIME1\n//PDS       DD DISP=SHR,DSN=&PDS             <=== OUTPUT PDS LIB\n//PANDD1    DD DISP=SHR,DSN=&PDS..PANUPDTE   <=== OUTPUT PANVALET LIB\n//SEQ       DD DDNAME=SEQ                    <=== INPUT SEQUENTIAL\n//SYSPRINT  DD SYSOUT=&PRINT\n//WRK001    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n//WRK002    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n//PCWORK1   DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n//PCWORK2   DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUJ01": {"ttr": 6151, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//GTEUJ01   PROC  PGM1=GTEUA01,\n//             PDS='** NAME IS MISSING **',\n//             MEMBER='** NAME IS MISSING **',\n//             VERSION='** VERSION IS MISSING **',\n//             REG1=2048K,\n//             TIME1='(1,00)',\n//             PRINT='*'\n//*********************************************************************\n//*  EXECUTE THE PDS RESTORE UTILITY.                               ***\n//*                                                                 ***\n//*  TO RESTORE MEMBER 'ABC' IN 'SYS1.XYZPROC' FROM THE VERSION     ***\n//*  IN MEMBER 'ABC03' IN 'SYS1.XYZPROC.PANUPDTE':                  ***\n//*                                                                 ***\n//*    //S1  EXEC  GTEUJ01,PDS='SYS1.XYZPROC',MEMBER=ABC,VERSION=03 ***\n//*                                                                 ***\n//*********************************************************************\n//STEP1     EXEC PGM=&PGM1,PARM='&MEMBER.&VERSION',\n//             REGION=&REG1,TIME=&TIME1\n//PDS       DD DISP=SHR,DSN=&PDS             <=== OUTPUT PDS LIB\n//PANDD1    DD DISP=SHR,DSN=&PDS..PANUPDTE   <=== INPUT PANVALET LIB\n//SYSPRINT  DD SYSOUT=&PRINT\n//WRK002    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUJ02": {"ttr": 6153, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//GTEUJ02   PROC  PGM1=GTEUA02,\n//             PDS='** NAME IS MISSING **',\n//             MEMBER='** NAME IS MISSING **',\n//             REG1=2048K,\n//             TIME1='(1,00)',\n//             PRINT='*'\n//*********************************************************************\n//*  EXECUTE THE PDS DELETE UTILITY.                                ***\n//*                                                                 ***\n//*  TO DELETE MEMBER 'ABC' IN 'SYS1.XYZPROC':                      ***\n//*                                                                 ***\n//*     //S1  EXEC  GTEUJ02,PDS='SYS1.XYZPROC',MEMBER=ABC           ***\n//*                                                                 ***\n//*********************************************************************\n//STEP1     EXEC PGM=&PGM1,PARM='&MEMBER',\n//             REGION=&REG1,TIME=&TIME1\n//PDS       DD DISP=SHR,DSN=&PDS             <=== OUTPUT PDS LIB\n//SYSPRINT  DD SYSOUT=&PRINT\n//WRK001    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUJ03": {"ttr": 6155, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//GTEUJ03   PROC  PGM1=GTEUA03,\n//             PDS='** NAME IS MISSING **',\n//             MEMBER='** NAME IS MISSING **',\n//             ALIAS='** NAME IS MISSING **',\n//             REG1=2048K,\n//             TIME1='(1,00)',\n//             PRINT='*'\n//*********************************************************************\n//*  EXECUTE THE PDS DELETE UTILITY.                                ***\n//*                                                                 ***\n//*  TO ADD ALIAS 'XYZ' FOR MEMBER 'ABC' IN 'SYS1.XYZPROC':         ***\n//*                                                                 ***\n//*     //S1  EXEC  GTEUJ03,PDS='SYS1.XYZPROC',MEMBER=ABC,ALIAS=XYZ ***\n//*                                                                 ***\n//*********************************************************************\n//STEP1     EXEC PGM=&PGM1,PARM='&MEMBER,&ALIAS',\n//             REGION=&REG1,TIME=&TIME1\n//PDS       DD DISP=SHR,DSN=&PDS             <=== OUTPUT PDS LIB\n//SYSPRINT  DD SYSOUT=&PRINT\n//WRK001    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUJ04": {"ttr": 6157, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//GTEUJ04   PROC  PGM1=GTEUA04,\n//             PDS='** NAME IS MISSING **',\n//             MEMBER='** NAME IS MISSING **',\n//             REG1=2048K,\n//             TIME1='(1,00)',\n//             PRINT='*'\n//*********************************************************************\n//*  EXECUTE THE PDS STATS UTILITY.                                 ***\n//*                                                                 ***\n//*  TO GET STATISTICS FOR MEMBER 'ABC' IN 'SYS1.XYZPROC', AND/OR   ***\n//*  BACKUP MEMBERS 'ABC00' THRU 'ABC99' IN 'SYS1.XYZPROC.PANUPDTE' ***\n//*                                                                 ***\n//*     //S1  EXEC  GTEUJ04,PDS='SYS1.XYZPROC',MEMBER=ABC           ***\n//*                                                                 ***\n//*********************************************************************\n//STEP1     EXEC PGM=&PGM1,PARM='&MEMBER',\n//             REGION=&REG1,TIME=&TIME1\n//PDS       DD DISP=SHR,DSN=&PDS             <=== PDS LIB\n//PANDD1    DD DISP=SHR,DSN=&PDS..PANUPDTE   <=== PANVALET LIB\n//SYSPRINT  DD SYSOUT=&PRINT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUJ05": {"ttr": 6159, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//GTEUJ05   PROC  PGM1=GTEUA05,\n//             PDS='** NAME IS MISSING **',\n//             MEMBER='** NAME IS MISSING **',\n//             REG1=2048K,\n//             TIME1='(1,00)',\n//             PRINT='*'\n//*********************************************************************\n//*  EXECUTE THE PDS BACKUP UTILITY.                                ***\n//*                                                                 ***\n//*  TO MAKE A BACKUP COPY INTO 'SYS1.XYZPROC.PANUPDTE' OF MEMBER   ***\n//*  'ABC' FROM 'SYS1.XYZPROC':                                     ***\n//*                                                                 ***\n//*     //S1  EXEC  GTEUJ05,PDS='SYS1.XYZPROC',MEMBER=ABC           ***\n//*                                                                 ***\n//*********************************************************************\n//STEP1     EXEC PGM=&PGM1,PARM='&MEMBER',\n//             REGION=&REG1,TIME=&TIME1\n//PDS       DD DISP=SHR,DSN=&PDS             <=== PDS LIB\n//PANDD1    DD DISP=SHR,DSN=&PDS..PANUPDTE   <=== PANVALET LIB\n//SYSPRINT  DD SYSOUT=&PRINT\n//WRK001    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n//WRK002    DD SPACE=(TRK,(1,1)),UNIT=SYSDA,DISP=(,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUM01": {"ttr": 6161, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEUM01  &DSECT=YES\n         PUSH PRINT\n         PRINT GEN\n.*********************************************************************\n.*                                                                 ***\n.*  MACRO TO DESCRIBE PDS DIRECTORY ENTRY WITH ISPF STATISTICS,    ***\n.*  TO BE USED BY 'STOW' MACRO.                                    ***\n.*                                                                 ***\n.*  SEE, ALSO, MACRO GTEUM02.                                      ***\n.*                                                                 ***\n.*  DSECT=YES   WILL CAUSE A DSECT TO BE CREATED.                  ***\n.*  DSECT=NO    DATA WILL BEGIN ON A DOUBLEWORD BOUNDRY.           ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*                                                                 ***\n.*********************************************************************\n         AIF   ('&DSECT' EQ 'YES').GUM01A\n&LABEL   DS    0D                     , ISPF STATS PDS DIRECTORY ENTRY\n         AGO   .GUM01B\n.GUM01A  ANOP\n&LABEL   DSECT                        , ISPF STATS PDS DIRECTORY ENTRY\n.GUM01B  ANOP\n.*\nGU01NAM  DS    CL8                      MEMBER NAME\nGU01TTR  DS    XL3                      PDS VALUE 'TTR'\nGU01C    DS    X                        PDS VALUE 'C'\nGU01VER  DS    X                        ISPF VERSION NUMBER (BIN)\nGU01MOD  DS    X                        ISPF MOD NUMBER (BIN)\n         DS    XL2                      (UNUSED, X'0000')\nGU01DATC DS    PL4                      ISPF DATE CREATED (PACK)\nGU01DATM DS    PL4                      ISPF DATE MODIFIED (PACK)\nGU01TIMM DS    XL2                      ISPF TIME MODIFIED (PK NOSIGN)\nGU01SIZE DS    XL2                      ISPF SIZE (BIN)\nGU01INIT DS    XL2                      ISPF INITIAL SIZE (BIN)\nGU01MODL DS    XL2                      ISPF COUNT OF MOD LINES (BIN)\nGU01ID   DS    CL7                      ISPF USERID\n         DS    CL3                      (UNUSED X'404040')\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUM02": {"ttr": 6163, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEUM02  &DSECT=YES\n         PUSH  PRINT\n         PRINT GEN\n.*********************************************************************\n.*                                                                 ***\n.*  MACRO TO DESCRIBE PDS BLDL ENTRY WITH ISPF STATUSTICS,         ***\n.*  TO BE USED BY 'BLDL' MACRO.                                    ***\n.*                                                                 ***\n.*  SEE, ALSO, MACRO GTEUM01.                                      ***\n.*                                                                 ***\n.*  DSECT=YES   WILL CAUSE A DSECT TO BE CREATED.                  ***\n.*  DSECT=NO    DATA WILL BEGIN ON A DOUBLEWORD BOUNDRY.           ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*                                                                 ***\n.*********************************************************************\n         AIF   ('&DSECT' EQ 'YES').GUM02A\n&LABEL   DS    0D                     , ISPF STATS PDS BLDL ENTRY\n         AGO   .GUM02B\n.GUM02A  ANOP\n&LABEL   DSECT                        , ISPF STATS PDS BLDL ENTRY\n.GUM02B  ANOP\n.*\nGU02FF   DS    XL2                      BLDL COUNT OF ENTRIES\nGU02LL   DS    XL2                      BLDL LENGTH OF ENTRIES\nGU02NAM  DS    CL8                      MEMBER NAME\nGU02TTR  DS    XL3                      PDS VALUE 'TTR'\nGU02K    DS    X                        BLDL VALUE 'K'\nGU02Z    DS    X                        BLDL VALUE 'Z'\nGU02C    DS    X                        PDS VALUE 'C'\nGU02VER  DS    X                        ISPF VERSION NUMBER (BIN)\nGU02MOD  DS    X                        ISPF MOD NUMBER (BIN)\n         DS    XL2                      (UNUSED, X'0000')\nGU02DATC DS    PL4                      ISPF DATE CREATED (PACK)\nGU02DATM DS    PL4                      ISPF DATE MODIFIED (PACK)\nGU02TIMM DS    XL2                      ISPF TIME MODIFIED (PK NOSIGN)\nGU02SIZE DS    XL2                      ISPF SIZE (BIN)\nGU02INIT DS    XL2                      ISPF INITIAL SIZE (BIN)\nGU02MODL DS    XL2                      ISPF COUNT OF MOD LINES (BIN)\nGU02ID   DS    CL7                      ISPF USERID\n         DS    CL3                      (UNUSED X'404040')\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUM03": {"ttr": 6165, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEUM03  &DSECT=YES\n         PUSH  PRINT\n         PRINT GEN\n.*********************************************************************\n.*                                                                 ***\n.*  MACRO TO DESCRIBE PANVALET COMMENT AREA.                       ***\n.*                                                                 ***\n.*  DSECT=YES   WILL CAUSE A DSECT TO BE CREATED.                  ***\n.*  DSECT=NO    DATA WILL BEGIN ON A DOUBLEWORD BOUNDRY.           ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*                                                                 ***\n.*********************************************************************\n         AIF   ('&DSECT' EQ 'YES').GUM03A\n&LABEL   DS    0D                     , PANVALET COMMENT AREA\n         AGO   .GUM03B\n.GUM03A  ANOP\n&LABEL   DSECT                        , PANVALET COMMENT AREA\n.GUM03B  ANOP\n.*\nGU03ASTR DS    CL1                      ASTERISK\n         DS    CL1\nGU03VER  DS    CL3                      NNN VERSION NUMBER\n         DS    CL1\nGU03MOD  DS    CL2                      NN MODIFICATION NUMBER\n         DS    CL1\nGU03DATC DS    CL8                      DD/MM/YY CREATED\n         DS    CL1\nGU03DATM DS    CL8                      DD/MM/YY MODIFIED\n         DS    CL1\nGU03TIMM DS    CL5                      HH:MM MODIFIED\n         DS    CL1\nGU03INIT DS    CL5                      NNNNN INITIAL SIZE\n         DS    CL1\nGU03ID   DS    CL7                      USERID\n         DS    CL3                        BLANKS\n         DS    CL3                      (UNUSED, BLANKS)\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUM04": {"ttr": 6167, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   GTEUM04  &DSECT=YES\n         PUSH  PRINT\n         PRINT GEN\n.*********************************************************************\n.*                                                                 ***\n.*  MACRO TO DESCRIBE PANVALET DIRECTORY ENTRY.                    ***\n.*                                                                 ***\n.*  DSECT=YES   WILL CAUSE A DSECT TO BE CREATED.                  ***\n.*  DSECT=NO    DATA WILL BEGIN ON A DOUBLEWORD BOUNDRY.           ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*                                                                 ***\n.*********************************************************************\n         AIF   ('&DSECT' EQ 'YES').GUM04A\n&LABEL   DS    0D                     , PANVALET DIRECTORY ENTRY\n         AGO   .GUM04B\n.GUM04A  ANOP\n&LABEL   DSECT                        , PANVALET DIRECTORY ENTRY\n.GUM04B  ANOP\n.*\nGU04NAML DS    CL10                     MEMBER NAME, LEFT JUSTIFIED\nGU04LVL  DS    CL3                      LEVEL NUMBER\nGU04USER DS    CL4                      USER NUMBER\nGU04SECL DS    CL1                      SECURITY LEVEL\nGU04TYPE DS    CL5                      DATA TYPE\nGU04STAT DS    0CL3                     STATUS\nGU04PT   DS    CL1                        P OR T\nGU04AI   DS    CL1                        A OR I\nGU04ED   DS    CL1                        E OR D\nGU04DATM DS    CL8                      DATE MAINTAINED MM/DD/YY\nGU04DATA DS    CL8                      DATE ACCESSED MM/DD/YY\nGU04BLKS DS    CL5                      DATA BLOCKS\nGU04STMT DS    CL8                      DATA STATEMENTS\nGU04ASTR DS    CL1                      ASTERISK OR BLANK\nGU04ACTN DS    CL3                      LAST ACTION\nGU04AVBY DS    CL2                      AVERAGE BYTES PER STATEMENT\nGU04SBST DS    CL4                      NUMBER OF SUBSETS\nGU04NAMR DS    CL10                     MEMBER NAME, RIGHT JUSTIFIED\n         DS    CL1                      (NOT USED)\nGU04NT   DS    CL1                      N OR T\n         DS    CL3                      (NOT USED)\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEUPUP": {"ttr": 6401, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PUP - CP TO EXECUTE PDS UPDATE UTILITIES'\n         MACRO\n&LABEL   TEXTBILD &AREA=,&TEXT=\n.*+-----------------------------------------------------------------+\n.*|  MACRO TO BUILD TEXT LINES FROM INDIVIDUAL WORDS AND PHRASES.   |\n.*|   E.G.                                                          |\n.*|           TEXTBILD  AREA=OUTAREA,TEXT=(AVALUE,BVALUE,CVALUE)    |\n.*|                                                                 |\n.*|  AVALUE   DC  H'5',C'ALPHA'                                     |\n.*|  BVALUE   DC  H'7',C'-BRAVO-'                                   |\n.*|  CVALUE   DC  H'7',C'CHARLIE'                                   |\n.*|                                                                 |\n.*|  OUTAREA  DS  CL80                                              |\n.*|                                                                 |\n.*|  CLEARS THE OUTAREA DATA ITEM WITH BLANKS, THEN                 |\n.*|  PRODUCES THE FOLLOWING IN OUTAREA: 'ALPHA-BRAVO-CHARLIE'       |\n.*|                                                                 |\n.*|  UPON COMPLETION:  R1  POINTS TO OUTAREA                        |\n.*|                    R15 HAS TOTAL LENGTH OF TEXT (19)            |\n.*|                                                                 |\n.*|  NOTES 1.  THE LENGTH OF THE CLEAR OPERATION IS TAKEN FROM      |\n.*|            THE DEFINED LENGTH OF THE 'AREA' DATA ITEM.          |\n.*|        2.  THE CODE PRODUCED BY THIS MACRO IS REENTERABLE.      |\n.*+-----------------------------------------------------------------+\n         LCLA  &N1,&N2\n&N1      SETA  N'&TEXT                  NUMBER OF TEXT OPERANDS\n&N2      SETA  1                        INDEX OF INITIAL TEXT OPERAND\n.*\n&LABEL   MVI   &AREA,X'40'              CLEAR THE TEXT LINE\n         MVC   &AREA+1(L'&AREA-1),&AREA   WITH BLANKS\n.*\n         LA    15,&AREA                 R15 POINTS TO TEXT BEGIN\n.LOOP1   ANOP\n         LH    1,&TEXT(&N2)             R1 HAS LENGTH OF TEXT\n         BCTR  1,0                        MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(*-*,15),&TEXT(&N2)+2     MOVE THE DATA\n         EX    1,*-6                    EXECUTE THE MOVE\n         LA    15,1(1,15)               R15 POINTS JUST BEYOND CHARS\n&N2      SETA  &N2+1                    POINT TO NEXT TEXT OPERAND\n         AIF   (&N2 LE &N1).LOOP1       LOOP BACK UP\n.*\n         LA    1,&AREA                  R1 HAS ADDR OF AREA\n         SR    15,1                     R15 HAS TOTAL LENGTH OF TEXT\n.*\n         MEND\n*\n         EJECT\n         PRINT NOGEN\n**********************************************************************\n***                                                                ***\n***                   PUP                                          ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   Attributes -                                                 ***\n***       ASM - RENT (TEST)                                        ***\n***      LKED - REUS, RENT, REFR(/TEST)                            ***\n***                                                                ***\n***   Register Usage -                                             ***\n***       R0-R1 - Macros, Linkage conventions                      ***\n***       R2-R3 - Macros, work                                     ***\n***       R4-R6 - Work                                             ***\n***          R7 - (unused)                                         ***\n***          R8 - Base of WORK8 DSECT (SP-001)                     ***\n***          R9 - Base of various PARMPDLx DSECTs.                 ***\n***         R10 - BAL register                                     ***\n***         R11 - First base register of main program.             ***\n***         R12 - Second base reg of main program, base of exits   ***\n***         R13 - Linkage conventions, Base of WORKD DSECT         ***\n***     R14-R15 - Linkage conventions                              ***\n***                                                                ***\n***                                                                ***\n***   Return Codes -                                               ***\n***        0000 - Normal                                           ***\n***        0004 - ABEND processing took place.                     ***\n***                                                                ***\n***                                                                ***\n***   CSECTs -                                                     ***\n***                                                                ***\n***     PUPxx    - Main program.                                   ***\n***     ESTXIT   - User exit for ABEND processing.                 ***\n***     ATTNXIT  - User exit for Attention interrupts.             ***\n***     APARMPCL - PARSE Control Element List (UPDATE).            ***\n***     BPARMPCL - PARSE Control Element List (RESTORE).           ***\n***     CPARMPCL - PARSE Control Element List (DELETE, STATS).     ***\n***     DPARMPCL - PARSE Control Element List (ALAIS).             ***\n***     PDSMEM   - PARSE Validation Routine for xPOSDSN.           ***\n***                                                                ***\n***   Non-IBM macros used:                                         ***\n***                                                                ***\n***     GTEDADOC - Not used, this is documentation for the         ***\n***                following three macros.                         ***\n***                                                                ***\n***     GTEDADAT - Creates data areas and control blocks for       ***\n***                SVC-99 (DYNALLOC) and IKJEFF18 (DAIRFAIL).      ***\n***     GTEDASET - Links together control blocks and data areas    ***\n***                created by GTEDADAT.                            ***\n***     GTEDAALC - Execute SVC-99 and IKJEFF18.                    ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   Non-IBM subprograms called:                                  ***\n***                                                                ***\n***     GTEUA00  - Utility to update PDS member and Pan library.   ***\n***                Method of call:  LINK macro                     ***\n***                                                                ***\n***     GTEUA01  - Utility to restore PDS member from Pan library. ***\n***                Method of call:  LINK macro                     ***\n***                                                                ***\n***     GTEUA02  - Utility to delete PDS member.                   ***\n***                Method of call:  LINK macro                     ***\n***                                                                ***\n***     GTEUA03  - Utility to add an alias for a PDS member.       ***\n***                Method of call:  LINK macro                     ***\n***                                                                ***\n***     GTEUA04  - Utility to display statistics for PDS member GU00301\n***                and Panvalet members.                        GU00301\n***                Method of call:  LINK macro                  GU00301\n***                                                             GU00301\n***     GTEUA05  - Utility to backup a PDS member into a Pan    GU00401\n***                Library.                                     GU00401\n***                Method of call:  LINK macro                  GU00401\n***                                                             GU00401\n***     PANINDEX - TSO command processor to list selected infor-   ***\n***                mation from a Panvalet directory.               ***\n***                Method of call:  LINK macro                     ***\n***                                                                ***\n***     PDS      - TSO command processor to manipulate partitioned ***\n***                datasets (used to list directory information).  ***\n***                Method of call:  LINK macro                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  CULPRIT:                                                      ***\n***                                                                ***\n***     Chuck Hoffman, IBM Systems Programming                  GU00102\n***     GTE Laboratories, Technical Computation Center          GU00102\n***     40 Sylvan Road                                          GU00102\n***     Waltham, Massachusetts  02254                           GU00102\n***                                                             GU00102\n***                     617/466-2131    V/N 679-2131            GU00102\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  Initial install.                                      ***\n***                                                                ***\n***  2.  A.  Addition of STATUS synonym for STATS subcommand.   GU00102\n***      B.  Add documentation.                                 GU00102\n***                                                                ***\n***  3.  A.  Change STATS to link to GTEUA04.                   GU00301\n***      B.  Add TSTATS to perform old STATS function via the   GU00301\n***          PANINDEX and PDS commands.                         GU00301\n***                                                             GU00401\n***  4.  A.  Add BACKUP function to link to GTEUA05.            GU00401\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOG                                                       ***\n***                                                                ***\n***     1.  Linkage conventions and addressability.                ***\n***     2.  Clear the completion code                              ***\n***     3.  Save the pointer to the CPPL.                          ***\n***                                                                ***\n**********************************************************************\n*\nPUP1A    CSECT\n         STM   R14,R12,12(R13)          SAVE INTO CALLERS S.A.\n         B     BASE-PUP1A(0,R15)        BRANCH TO AROUND EYECATCHER\n         DC    AL1(L'NAME)                LENGTH OF NAME\nNAME     DC    C'PUP1A'                   MODULE NAME\n         DC    C' &SYSDATE &SYSTIME '     DD.MM.YY HH.MM\n         DC    CL32' '\n         DC    C'THIS COMMAND WAS NAMED PUP BY ERNIE LEVENSON AND AL '\n         DC    C'BUCZYNSKI ON AUGUST 27 1986 AT GTE LABORATORIES IN '\n         DC    C'WALTHAM MASS'\n         DC    CL32' '\n*\nBASE     LR    RBASE,R15                RBASE IS BASE REGISTER\n         LA    RBASE2,X'800'(0,RBASE)   COMPUTE VALUE FOR\n         LA    RBASE2,X'800'(0,RBASE2)    SECOND BASE REGISTER\n         USING PUP1A,RBASE,RBASE2       TELL ASSEMBLER\n*\n         GETMAIN  R,LV=WORKDLEN,SP=0    GET AREA FOR MYSAVE AND WORK\n         ST    R13,4(0,R1)              CALLERS S.A. ADDR TO MY S.A.\n         ST    R1,8(0,R13)              MY S.A. ADDR TO CALLERS S.A.\n         LM    R15,R1,16(R13)           RESTORE REGS USED BY GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORKD,R13                  TELL ASSEMBLER\n*\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE TO ZERO\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n*\n         GETMAIN  R,LV=WORK8LEN,SP=1    GET STORAGE FOR COMMAND SCAN\n         LR    R8,R1                    R8 POINTS TO WORK8 AREA\n         USING WORK8,R8                   ADDRESSABILITY\n*\n         B     MAINLINE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n***   This MAINLINE routine is now a loop.  Exit from the loop     ***\n***   comes after label MADECIDE, when the value in SUADDR is      ***\n***   the address of the prolog routine called ENDING.  That       ***\n***   value is obtained by the SUBCHECK routine from SUTBL.        ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   RBAL,ABEND               SET UP ABEND EXIT\n         BAL   RBAL,INTATTN             SET UP ATTENTION INTERRUPT EXIT\n         BAL   RBAL,PPLSETUP            SET UP PARSE PARM LIST\n         BAL   RBAL,AWORK               ALLOCATE WORK DATASETS\n*\nMAPROMPT LA    R15,0                    SELECT PUTLINE MSG #0 (BLANK)\n         BAL   RBAL,PUTLPROC            WRITE THE BLANK LINE\n         LA    R15,2                    SELECT PUTLINE MESSAGE #2\n         BAL   RBAL,PUTLPROC            PROMPT THE USER\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BNE   MAPROMPT                   REPROMPT FOREVER\n         BAL   RBAL,GETLPROC            GET THE USER'S REPLY\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BNE   MAPROMPT                   REPROMPT FOREVER\n*\nMASCAN   BAL   RBAL,SCAN                PERFORM SCAN OF PUTGET MSG\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BNE   MAPROMPT                   GO BACK UP TO PROMPT FOREVER\n*\nMASUBCHK BAL   RBAL,SUBCHECK            CHECK FOR SUBCOMMAND IN TABLE\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BNE   MAPROMPT                   GO BACK UP TO PROMPT FOREVER\n*\nMADECIDE L     R15,SUADDR               R15 IS BRANCH ADDR FROM SUBTBL\n         BALR  RBAL,R15                   PERFORM THE APPROPRIATE PROC\n*\nMAEND    B     MAPROMPT                 BRANCH BACK UP\n*\nMABEND   LA    R15,X'04'(0,0)           RETURN CODE TO R15\n         ST    R15,COMPCODE               SAVE IN COMPLETION CODE\n         B     MAPROMPT                 BRANCH BACK UP\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOG                                                       ***\n***                                                                ***\n***     1.  Unallocate files.                                      ***\n***     2.  Free storage used by IKJSCAN.                          ***\n***     3.  Linkage conventions.                                   ***\n***                                                                ***\n**********************************************************************\nENDING   BAL      RBAL,DWORK              UNALLOCATE WORK/PRINT FILES\n         BAL      RBAL,DPDSPAN            UNALLOCATE PAN/PDS FILES\n         BAL      RBAL,DSEQ               UNALLOCATE SEQ FILE\n*\n         FREEMAIN R,LV=WORK8LEN,SP=1,A=(R8)  FREE STORAGE FOR IKJSCAN\n*\nENDABEND ESTAE    0                       CANCEL THE ABEND EXIT\n*\n         L        R14,COMPCODE            R14 TEMPORARILY HAS COMP CODE\n         LR       R15,R13                 R15 HAS MY SAVE AREA ADDRESS\n         L        R13,4(0,R13)            R13 RESTORE, PNT TO CALLER SA\n         FREEMAIN R,LV=WORKDLEN,SP=0,A=(R15)  FREE MYSAVE,COMPCODE,ETC\n         LM       R0,R12,20(R13)          R0-R12 RESTORE FROM CALLER SA\n         LR       R15,R14                 R15 GETS COMP CODE\n         L        R14,12(0,R13)           R14 RESTORE FROM CALLERS S.A.\n         MVI      12(R13),X'FF'           SIGNAL MODULE COMPLETE\n         BR       R14                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***           SET UP EXIT FOR ABENDS                               ***\n***                                                                ***\n***  Use ESTAE to set up an environment to trap ABENDs.            ***\n***                                                                ***\n***  1.  The exit is ESTXIT.                                       ***\n***  2.  The return point is at label ENDING in the main routine.  ***\n***  3.  The parm list passed to the exit will be:                 ***\n***                                                                ***\n***         ESTUPL                                                 ***\n***         +-----------+                                          ***\n***         |           |==> Return point                          ***\n***         +-----------+                                          ***\n***         |           |==> User work area                        ***\n***         +-----------+    +-----------+                         ***\n***                          | Register  |                         ***\n***                          | save area |                         ***\n***                         ---         ---                        ***\n***                         ---         ---                        ***\n***                          |           |                         ***\n***                          +-----------+                         ***\n***                          | Other data|                         ***\n***                          +-----------+                         ***\n***                                                                ***\n**********************************************************************\nABEND    ST    RBAL,ABRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   ESTAEL(ESTAELLN),ESTAED  INITIALIZE ESTAE PARM LIST\n         LA    R15,MABEND               ADDRESS OF RETURN POINT\n         ST    R15,ESTUPL                 INTO USER PARM LIST\n         LA    R15,ESTUWK               ADDRESS OF USER WORK AREA\n         ST    R15,ESTUPL+4               INTO USER PARM LIST\n         LA    R4,ESTUPL                R4 HAS ADDRESS OF USER PARM LST\n         L     R5,VESTXIT               R5 HAS ADDRESS OF ESTAE EXIT\n*\nABESTAE  ESTAE (R5),PARAM=(R4),MF=(E,ESTAEL)  EXECUTE ESTAE\n*\nABENDEND L     RBAL,ABRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***           SET UP EXIT FOR ATTENTION INTERRUPT                  ***\n***                                                                ***\n**********************************************************************\nINTATTN  ST    RBAL,INRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R15,ATTSAVE              ADDRESS OF SAVE AREA\n         ST    R15,ATTUPSAV               INTO USER PARM LIST\n         LA    R15,ATTECB               ADDRESS OF ECB\n         ST    R15,ATTUPECB               INTO USER PARM LIST\n         OI    ATTUPECB,X'80'           MARK END OF LIST\n*\nINSTAX   MVC   STAXL(STAXLLN),STAXD     INITIALIZE PARM LIST\n         L     R2,VATTNXIT              R2 HAS ADDRESS OF ATTN EXIT\n         LA    R3,ATTIBUF               R3 HAS IBUF ADDRESS\n         LA    R4,L'ATTIBUF             R4 IS LENGTH OF IBUF\n         LA    R5,ATTUPARM              R5 IS ADDRESS OF USER PARMS\n*\nINATTN   STAX  (R2),OBUF=(ATTOBUF,L'ATTOBUF),IBUF=((R3),(R4)),         X\n               USADDR=(R5),MF=(E,STAXL)\n*\nINEND    L     RBAL,INRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST AND I/O PARM LIST           ***\n***        AND COMMAND SCAN PARM LIST                              ***\n***                                                                ***\n***        PARSE                                                   ***\n***          1.  Copy addresses of UPT, ECT and CBUF from CPPL.    ***\n***          2.  Add addresses of own ECB, ANS and UWA, and        ***\n***              address of PCE List (PCL) created by macros.      ***\n***          3.  Zero the CBUF field.  This will be filled in      ***\n***              from the CSPLCBUF field after scan.  Initially    ***\n***              the address will come from the PGPBIBUF input     ***\n***              buffer address after PUTGET.                      ***\n***          4.  Zero the PCL field.  It will be filled in just    ***\n***              prior to each execution of the PARSE routine.     ***\n***                                                                ***\n***        I/O                                                     ***\n***          1.  Copy addresses of UPT and ECT from CPPL.          ***\n***          2.  Add address of own I/O ECB.                       ***\n***          3.  Zero the IOPLIOPB pointer.  This will point to    ***\n***              the parm block for the appropriate I/O routine.   ***\n***              It will be filled in by the execute form of the   ***\n***              STACK, GETLINE, PUTLINE or PUTGET macro when      ***\n***              executed.                                         ***\n***                                                                ***\n***        SCAN                                                    ***\n***          1.  Copy addresses of UPT and ECT from CPPL.          ***\n***          2.  ADDRESSES OF OWN CP ECB, FLG WORD AND CSOA.       ***\n***          3.  Zero the CSPLCBUF field.  This will be filled     ***\n***              in from the GTPBIBUF field after GETLINE.         ***\n**********************************************************************\nPPLSETUP ST    RBAL,PPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         LA    R6,MYPPL                 ADDRESS OF MY PARSE PARM LIST\n         USING PPL,R6                     ADDRESSABILITY\n*\n         MVC   PPLUPT(4),CPPLUPT        UPT  (CPPL)\n         MVC   PPLECT(4),CPPLECT        ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,PPLECB                ECB  (MINE)\n         XC    PPLPCL,PPLPCL            PCL  (0000)\n         LA    R5,MYANS\n         ST    R5,PPLANS                ANS  (MINE)\n         XC    PPLCBUF,PPLCBUF          CBUF (0000)\n         LA    R5,MYUWA\n         ST    R5,PPLUWA                UWA  (MINE)\n         DROP  R6                       DROP ADDRESSABILITY\n*\n         LA    R6,MYIOPL                ADDRESS OF MY IO PARM LIST\n         USING IOPL,R6                    ADDRESSABILITY\n         MVC   IOPLUPT(4),CPPLUPT       UPT  (CPPL)\n         MVC   IOPLECT(4),CPPLECT       ECT  (CPPL)\n         LA    R15,MYIOECB\n         ST    R15,IOPLECB              ECB  (MINE)\n         XC    IOPLIOPB(4),IOPLIOPB     IOPB (0000)\n         DROP  R6                       DROP ADDRESSABILITY\n*\n         LA    R6,MYCSPL                ADDRESS OF MY CMD SCAN PRM LST\n         USING CSPL,R6                    ADDRESSABILITY\n         MVC   CSPLUPT(4),CPPLUPT       UPT  (CPPL)\n         MVC   CSPLECT(4),CPPLECT       ECT  (CPPL)\n         LA    R15,MYCSECB\n         ST    R15,CSPLECB              ECB  (MINE)\n         LA    R15,MYFLG\n         ST    R15,CSPLFLG              FLG  (MINE)\n         LA    R15,MYCSOA\n         ST    R15,CSPLOA               OA   (MINE)\n         XC    CSPLCBUF,CSPLCBUF        CBUF (0000)\n         DROP  R4,R6                    DROP ADDRESSABILITY\n*\nPPEND    L     RBAL,PPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  ALLOCATE THE WORK AND PRINT DATASETS                       GU00301\n***                                                                ***\n**********************************************************************\nAWORK    ST    RBAL,AWRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         BAL   RBAL,DWORK               DEALLOCATE FILE NAMES\n*\n         MVC   AWK(AWKLEN),@WK          INITIALIZE DATA AREAS\n         GTEDASET AWK,CPPLPTR=CPPLPTR   LINK DATA AREAS TOGETHER\n*\nAWWORKS  LA    R3,4                     R3 IS COUNTER FOR LOOP\n         LA    R4,AWKLIST-8             R4 POINTS TO -1 ENTRY IN LIST\nAWLOOP1  LA    R4,8(0,R4)               R4 POINTS TO NEXT DDNAME\n         MVC   AWKDDNAM(8),0(R4)        MOVE DDNAME TO TEXT UNIT\n         GTEDAALC AWK,VERB=AL,ERRMSG=YES   ALLOCATE\n         CLC   AWKS99RC,F0              IF RETURN NOT OKAY\n         BNE   AWRET04                    GO TO HIGH ENDING\n         BCT   R3,AWLOOP1               IF MORE REMAIN, LOOP BACK UP\n*\nAWPRINT  MVC   APR(APRLEN),@PR          INITIALIZE DATA AREAS\n         GTEDASET APR,CPPLPTR=CPPLPTR   LINK DATA AREAS TOGETHER\n         GTEDAALC APR,VERB=AL,ERRMSG=YES   ALLOCATE\n         CLC   APRS99RC,F0              IF RETURN NOT OKAY\n         BNE   AWRET04                    GO TO HIGH ENDING\n*\n         B     AWEND\n*\nAWRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     AWEND                    BRANCH TO ENDING\n*\nAWEND    L     RBAL,AWRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  UNALLOCATE THE WORK DATASETS AND THE PRINT FILE               ***\n***                                                                ***\n**********************************************************************\nDWORK    ST    RBAL,DWRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   DWK(DWKLEN),#WK          INITIALIZE DATA AREAS\n         GTEDASET DWK,CPPLPTR=CPPLPTR   LINK DATA AREAS TOGETHER\n*\nDWWORKS  LA    R3,5                     R3 IS COUNTER FOR LOOP\n         LA    R4,DWKLIST-8             R4 POINTS TO -1 ENTRY IN LIST\nDWLOOP1  LA    R4,8(0,R4)               R4 POINTS TO NEXT DDNAME\n         MVC   DWKDDNAM(8),0(R4)        MOVE DDNAME TO TEXT UNIT\n         GTEDAALC DWK,VERB=UN,ERRMSG=YES   UNALLOCATE\n         BCT   R3,DWLOOP1               IF MORE REMAIN, LOOP BACK UP\n*\n         B     DWEND\n*\nDWRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DWEND                    BRANCH TO ENDING\n*\nDWEND    L     RBAL,DWRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    SCAN THE INPUT PARAMETER STRING                             ***\n***                                                                ***\n***      1.  Fill in CSPLCBUF from GTPBIBUF, to point to input.    ***\n***      2.  Set FLG word to X'00' to syntax check the command.    ***\n***      3.  Execute IKJSCAN with CALLTSSR using own CSPL.         ***\n***                                                                ***\n***                                                                ***\n***    Completion of IKJSCAN is indicated by two fields, the       ***\n***    R15 return code, and the CSOAFLG field.                     ***\n***                                                                ***\n***    R15 Return codes:                                           ***\n***      00 - IKJSCAN completed, see CSOAFLG field for results.    ***\n***      04 - IKJSCAN was passed invalid parameters.               ***\n***                                                                ***\n***    CSOAFLG bit patterns:                                       ***\n***        CSOAVWP   X'80'  VALID WITH PARAMETERS                  ***\n***        CSOAVNP   X'40'  VALID NO   PARAMS                      ***\n***        CSOAQM    X'20'  QUESTION MARK                          ***\n***        CSOANOC   X'10'  NO COMMAND                             ***\n***        CSOABAD   X'08'  BAD CMD NAME                           ***\n***        CSOAEXEC  X'04'  IMPLICIT EXEC COMMAND NAME             ***\n***                                                                ***\n**********************************************************************\nSCAN     ST    RBAL,SCRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n*                                       PTR TO INPUT BUFFER TO CSPL\n         MVC   MYCSPL+(CSPLCBUF-CSPL),MYGTPB+(GTPBIBUF-GTPB)\n         XC    MYFLG,MYFLG              ZERO THE FLAG WORD\n*\n         XC    MYCSECB,MYCSECB          ZERO THE ECB FOR SCAN\nSCANIT   CALLTSSR EP=IKJSCAN,MF=(E,MYCSPL)  SCAN THE INPUT COMMAND\n         LTR   R15,R15                  IF RETURN IS BAD\n         BNZ   SCERR04                    GO TO SET ERROR CODE\n*                                       CHECK FOR EITHER VALID RETURN\n         TM    MYCSOA+(CSOAFLG-CSOA),CSOAVWP+CSOAVNP\n         BZ    SCERR04                  IF NEITHER, GO SET ERROR CODE\n         B     SCEND                      ELSE INDICATE GOOD RETURN\n*\nSCERR04  LA    R15,X'04'(0,0)           SET VALUE\n         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE\n*\nSCEND    L     RBAL,SCRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CHECK FOR SUBCOMMAND IN TABLE                                ***\n***                                                                ***\n***   1.  Compare scanned input string with table entry.           ***\n***   2.  When there is a match, save the branch address from the  ***\n***       table entry and copy the subcommand name into the ECT.   ***\n***   3.  Match will occur where input string first matches        ***\n***       leading characters in table entry.                       ***\n***                                                                ***\n**********************************************************************\nSUBCHECK ST    RBAL,SURBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    SUADDR,SUADDR            CLEAR THE BRANCH ADDRESS\n*\n         L     R4,MYCSOA+(CSOACNM-CSOA) R4 POINTS TO SUBCOMMAND\n         LH    R5,MYCSOA+(CSOALNM-CSOA) R5 IS LENGTH OF SUBCOMMAND\n         BCTR  R5,0                       MINUS 1 FOR EXEC\n         LA    R6,SUTBL-12              R6 POINTS TO -1 ENTRY IN TABLE\n*\nSULOOP   LA    R6,12(0,R6)              R6 POINTS TO NEXT ENTRY\n         CLI   0(R6),X'FF'              IF END OF LIST\n         BE    SUERR04                    GO TO ERROR ENDING\n         B     *+10                     BRANCH AROUND COMPARE\n         CLC   0(0,R4),0(R6)              COMPARE SUBCOMMAND TO TABLE\n         EX    R5,*-6                   EXECUTE THE COMPARE\n         BNE   SULOOP                   IF NO MATCH, LOOP BACK UP\n*\nSUFOUND  MVC   SUADDR(4),8(R6)          MOVE BRANCH ADDR INTO STORAGE\n         L     R4,CPPLPTR               R4 POINTS TO CPPL\n         L     R4,(CPPLECT-CPPL)(R4)    R4 POINTS TO ECT\n         LA    R4,(ECTSCMD-ECT)(R4)     R4 POINTS TO ECTSCMD FIELD\n         MVC   0(8,R4),0(R6)            MOVE SUBCOMMAND NAME TO ECT\n         B     SUEND                    GO TO ENDING\n*\nSUERR04  LA    R15,X'04'(0,0)           SET VALUE\n         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE\n*\nSUEND    L     RBAL,SURBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE THE UPDATE FUNCTION                                    ***\n***                                                                ***\n**********************************************************************\nA0UPDT   ST    RBAL,A0RBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA0PARSE  MVC   PCLAD,AAPCL              ADDR OF APARMPCL TO STORAGE\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     A0END                      AND GO TO END OF ROUTINE\n*\n         USING APARMPDL,R9              ADDRESSABILITY OF PARMS\n*\nA0ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD\n         L     R1,APOSDSN+0             R1 POINTS TO THE DSN\n         LH    R2,APOSDSN+4             R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM\n         EX    R2,*-6                   EXECUTE THE MOVE\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME\n         MVI   0(R2),C'.'               ADD THE DOT\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   A0RET04                    GO TO HIGH ENDING\n*\nA0SEQ    BAL   RBAL,ASEQ                ALLOCATE THE SEQUENTIAL DSN\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   A0RET04                    GO TO HIGH ENDING\n*\nA0PRM    LA    R15,A0PARM               ADDRESS OF PARM LIST\n         ST    R15,A0PARML                INTO PARM LIST\n         OI    A0PARML,X'80'            MARK END OF LIST\n         XC    A0PARM(102),A0PARM       CLEAR THE PARM\n         MVC   A0PARM(2),APOSDSN+12     MEMBER NAME LENGTH TO PARM\n         L     R1,APOSDSN+8             R1 POINTS TO MEMBER NAME\n         MVC   A0PARM+2(8),0(R1)        MOVE NAME TO PARM\n         LA    R1,A0PARML               R1 POINTS TO PARM LIST\n*\nA0LINK   LINK  EP=GTEUA00               LINK TO THE UPDATE UTILITY\n         ST    R15,A0RETCDE             SAVE THE RETURN CODE\n         BAL   RBAL,CONDCODE            WRITE CONDITION CODE\n*\n         B     A0END\n*\nA0RET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A0END                    BRANCH TO ENDING\n*\n         DROP  R9                       DROP ADDRESSABILITY\n*\nA0END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n         L     RBAL,A0RBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE THE RESTORE FUNCTION                                   ***\n***                                                                ***\n**********************************************************************\nA1REST   ST    RBAL,A1RBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA1PARSE  MVC   PCLAD,ABPCL              ADDR OF SELECTED PCL FOR PARSE\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     A1END                      AND GO TO END OF ROUTINE\n*\n         USING BPARMPDL,R9              ADDRESSABILITY OF PARMS\n*\nA1ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD\n         L     R1,BPOSDSN+0             R1 POINTS TO THE DSN\n         LH    R2,BPOSDSN+4             R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM\n         EX    R2,*-6                   EXECUTE THE MOVE\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME\n         MVI   0(R2),C'.'               ADD THE DOT\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   A1RET04                    GO TO HIGH ENDING\n*\nA1VER    L     R5,BSVERS                R5 POINTS TO PARM\n         L     R4,0(0,R5)               R4 HAS BINARY PARM\n         CVD   R4,COPACK8               COPACK8 HAS PACKED PARM\n         OI    COPACK8+7,X'0F'          KILL THE SIGN\n         UNPK  A1VERS(2),COPACK8(8)     CONVERT TO DISPLAY\n*\nA1PRM    LA    R15,A1PARM               ADDRESS OF PARM LIST\n         ST    R15,A1PARML                INTO PARM LIST\n         OI    A1PARML,X'80'            MARK END OF LIST\n         XC    A1PARM(102),A1PARM       CLEAR THE PARM\n         L     R1,BPOSDSN+8             R1 POINTS TO MEMBER NAME\n         LH    R2,BPOSDSN+12            R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   A1PARM+2(0),0(R1)          MOVE THE MEMBER NAME TO PARM\n         EX    R2,*-6                   EXECUTE THE MOVE\n         LA    R1,A1PARM+2+1(R2)        POINT JUST BEYOND NAME\n         MVC   0(2,R1),A1VERS           SUFFIX VERS NUMBER ONTO NAME\n         LA    R2,1+2(0,R2)             R2 IS LENGTH OF NAME + SUFFIX\n         STH   R2,A1PARM+0              MOVE IT TO PARM LENGTH\n*\nA1LINK   LA    R1,A1PARML               R1 POINTS TO PARM LIST\n         LINK  EP=GTEUA01               LINK TO THE UPDATE UTILITY\n         ST    R15,A1RETCDE             SAVE THE RETURN CODE\n         BAL   RBAL,CONDCODE            WRITE THE CONDITION CODE\n*\n         B     A1END\n*\nA1RET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A1END                    BRANCH TO ENDING\n*\nA1END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n         L     RBAL,A1RBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         DROP  R9                       DROP ADDRESSABILITY\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE THE DELETE FUNCTION                                    ***\n***                                                                ***\n**********************************************************************\nA2DELT   ST    RBAL,A2RBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA2PARSE  MVC   PCLAD,ACPCL              ADDR OF SELECTED PCL FOR PARSE\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     A2END                      AND GO TO END OF ROUTINE\n*\n         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS\n*\nA2ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD\n         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN\n         LH    R2,CPOSDSN+4             R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM\n         EX    R2,*-6                   EXECUTE THE MOVE\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME\n         MVI   0(R2),C'.'               ADD THE DOT\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   A2RET04                    GO TO HIGH ENDING\n*\nA2PRM    LA    R15,A2PARM               ADDRESS OF PARM LIST\n         ST    R15,A2PARML                INTO PARM LIST\n         OI    A2PARML,X'80'            MARK END OF LIST\n         XC    A2PARM(102),A2PARM       CLEAR THE PARM\n         MVC   A2PARM(2),CPOSDSN+12     MEMBER NAME LENGTH TO PARM\n         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAME\n         MVC   A2PARM+2(8),0(R1)        MOVE NAME TO PARM\n*\nA2LINK   LA    R1,A2PARML               R1 POINTS TO PARM LIST\n         LINK  EP=GTEUA02               LINK TO THE UPDATE UTILITY\n         ST    R15,A2RETCDE             SAVE THE RETURN CODE\n         BAL   RBAL,CONDCODE            WRITE THE CONDITION CODE\n*\n         B     A2END\n*\nA2RET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A2END                    BRANCH TO ENDING\n*\nA2END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n         L     RBAL,A2RBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         DROP  R9                       DROP ADDRESSABILITY\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  INVOKE THE ALIAS FUNCTION                                     ***\n***                                                                ***\n**********************************************************************\nA3ALIS   ST    RBAL,A3RBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nA3PARSE  MVC   PCLAD,ADPCL              ADDR OF SELECTED PCL FOR PARSE\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     A3END                      AND GO TO END OF ROUTINE\n*\n         USING DPARMPDL,R9              ADDRESSABILITY OF PARMS\n*\nA3ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD\n         L     R1,DPOSDSN+0             R1 POINTS TO THE DSN\n         LH    R2,DPOSDSN+4             R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM\n         EX    R2,*-6                   EXECUTE THE MOVE\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME\n         MVI   0(R2),C'.'               ADD THE DOT\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   A3RET04                    GO TO HIGH ENDING\n*\nA3PRM    LA    R15,A3PARMLN             ADDRESS OF PARM LENGTH\n         ST    R15,A3PARML                INTO PARM LIST\n         OI    A3PARML,X'80'            MARK END OF LIST\n         XC    A3PARM(102),A3PARM       CLEAR THE PARM\n*\n         L     R1,DPOSDSN+8             R1 POINTS TO MEMBER NAME\n         LH    R2,DPOSDSN+12            R2 HAS LENGTH\n         STH   R2,APDMEMLN              SAVE THE LEN FOR TEXTBILD\n         BCTR  R2,0                     R2 IS LEN-1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   APDMEMBR(0),0(R1)          MOVE MEMBER NAME FOR TEXTBILD\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\n         L     R1,DPOSALIS+0            R1 POINTS TO ALIAS NAME\n         LH    R2,DPOSALIS+4            R2 HAS LENGTH\n         STH   R2,APDALILN              SAVE THE LEN FOR TEXTBILD\n         BCTR  R2,0                     R2 IS LEN-1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   APDALIS(0),0(R1)           MOVE MEMBER NAME FOR TEXTBILD\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\n         TEXTBILD AREA=A3PARM,TEXT=(APDMEM,COMMA,APDALI) BUILD PARM\n         STH   R15,A3PARMLN             INSERT THE LENGTH\n*\nA3LINK   LA    R1,A3PARML               R1 POINTS TO PARM LIST\n         LINK  EP=GTEUA03               LINK TO THE UPDATE UTILITY\n         ST    R15,A3RETCDE             SAVE THE RETURN CODE\n         BAL   RBAL,CONDCODE            WRITE THE CONDITION CODE\n*\n         B     A3END\n*\nA3RET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     A3END                    BRANCH TO ENDING\n*\nA3END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n         L     RBAL,A3RBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         DROP  R9                       DROP ADDRESSABILITY\n*                                                               GU00301\n         EJECT                                                  GU00301\n*************************************************************** GU00301\n***                                                         *** GU00301\n***  INVOKE THE STATS FUNCTION                              *** GU00301\n***                                                         *** GU00301\n*************************************************************** GU00301\nA4STAT   ST    RBAL,A4RBALSV            SAVE RETURN ADDRESS     GU00301\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00301\n*                                                               GU00301\nA4PARSE  MVC   PCLAD,ACPCL              ADDR OF SELECTED PCL FO GU00301\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMET GU00301\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD   GU00301\n         BE    *+14                     THEN                    GU00301\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12 GU00301\n         B     A4END                      AND GO TO END OF ROUT GU00301\n*                                                               GU00301\n         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS GU00301\n*                                                               GU00301\nA4ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD     GU00301\n         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN    GU00301\n         LH    R2,CPOSDSN+4             R2 HAS LENGTH           GU00301\n         BCTR  R2,0                       MINUS 1 FOR EXEC      GU00301\n         B     *+10                     BRANCH AROUND THE MOVE  GU00301\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM    GU00301\n         EX    R2,*-6                   EXECUTE THE MOVE        GU00301\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN GU00301\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND N GU00301\n         MVI   0(R2),C'.'               ADD THE DOT             GU00301\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX GU00301\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LI GU00301\n         CLC   RETCDE,F0                IF RETURN BAD           GU00301\n         BNE   A4RET04                    GO TO HIGH ENDING     GU00301\n*                                                               GU00301\nA4PRM    LA    R15,A4PARM               ADDRESS OF PARM LIST    GU00301\n         ST    R15,A4PARML                INTO PARM LIST        GU00301\n         OI    A4PARML,X'80'            MARK END OF LIST        GU00301\n         XC    A4PARM(102),A4PARM       CLEAR THE PARM          GU00301\n         MVC   A4PARM(2),CPOSDSN+12     MEMBER NAME LENGTH TO P GU00301\n         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAM GU00301\n         MVC   A4PARM+2(8),0(R1)        MOVE NAME TO PARM       GU00301\n         LA    R1,A4PARML               R1 POINTS TO PARM LIST  GU00301\n*                                                               GU00301\nA4LINK   LA    R1,A4PARML               R1 POINTS TO PARM LIST  GU00301\n         LINK  EP=GTEUA04               LINK TO THE UPDATE UTIL GU00301\n         ST    R15,A4RETCDE             SAVE THE RETURN CODE    GU00301\n         BAL   RBAL,CONDCODE            WRITE THE CONDITION COD GU00301\n*                                                               GU00301\n         B     A4END                                            GU00301\n*                                                               GU00301\nA4RET04  LA    R15,X'04'                RETURN CODE TO R15      GU00301\n         ST    R15,RETCDE               SAVE IT                 GU00301\n         B     A4END                    BRANCH TO ENDING        GU00301\n*                                                               GU00301\nA4END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL GU00301\n         L        R2,0(0,R2)              R4 POINTS TO PDL      GU00301\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL   GU00301\n         L     RBAL,A4RBALSV            RESTORE RETURN ADDRESS  GU00301\n         BR    RBAL                     RETURN                  GU00301\n*                                                               GU00301\n         DROP  R9                       DROP ADDRESSABILITY     GU00301\n*                                                               GU00401\n         EJECT                                                  GU00401\n*************************************************************** GU00401\n***                                                         *** GU00401\n***  INVOKE THE BACKUP FUNCTION                             *** GU00401\n***                                                         *** GU00401\n*************************************************************** GU00401\nA5BKUP   ST    RBAL,A5RBALSV            SAVE RETURN ADDRESS     GU00401\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO  GU00401\n*                                                               GU00401\nA5PARSE  MVC   PCLAD,ACPCL              ADDR OF APARMPCL TO STO GU00401\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMET GU00401\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD   GU00401\n         BE    *+14                     THEN                    GU00401\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12 GU00401\n         B     A5END                      AND GO TO END OF ROUT GU00401\n*                                                               GU00401\n         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS GU00401\n*                                                               GU00401\nA5ALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD     GU00401\n         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN    GU00401\n         LH    R2,CPOSDSN+4             R2 HAS LENGTH           GU00401\n         BCTR  R2,0                       MINUS 1 FOR EXEC      GU00401\n         B     *+10                     BRANCH AROUND THE MOVE  GU00401\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM    GU00401\n         EX    R2,*-6                   EXECUTE THE MOVE        GU00401\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN GU00401\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND N GU00401\n         MVI   0(R2),C'.'               ADD THE DOT             GU00401\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX GU00401\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LI GU00401\n         CLC   RETCDE,F0                IF RETURN BAD           GU00401\n         BNE   A5RET04                    GO TO HIGH ENDING     GU00401\n*                                                               GU00401\nA5PRM    LA    R15,A5PARM               ADDRESS OF PARM LIST    GU00401\n         ST    R15,A5PARML                INTO PARM LIST        GU00401\n         OI    A5PARML,X'80'            MARK END OF LIST        GU00401\n         XC    A5PARM(102),A5PARM       CLEAR THE PARM          GU00401\n         MVC   A5PARM(2),CPOSDSN+12     MEMBER NAME LENGTH TO P GU00401\n         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAM GU00401\n         MVC   A5PARM+2(8),0(R1)        MOVE NAME TO PARM       GU00401\n         LA    R1,A5PARML               R1 POINTS TO PARM LIST  GU00401\n*                                                               GU00401\nA5LINK   LINK  EP=GTEUA05               LINK TO THE UPDATE UTIL GU00401\n         ST    R15,A5RETCDE             SAVE THE RETURN CODE    GU00401\n         BAL   RBAL,CONDCODE            WRITE CONDITION CODE    GU00401\n*                                                               GU00401\n         B     A5END                                            GU00401\n*                                                               GU00401\nA5RET04  LA    R15,X'04'                RETURN CODE TO R15      GU00401\n         ST    R15,RETCDE               SAVE IT                 GU00401\n         B     A5END                    BRANCH TO ENDING        GU00401\n*                                                               GU00401\n         DROP  R9                       DROP ADDRESSABILITY     GU00401\n*                                                               GU00401\nA5END    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL GU00401\n         L        R2,0(0,R2)              R4 POINTS TO PDL      GU00401\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL   GU00401\n         L     RBAL,A5RBALSV            RESTORE RETURN ADDRESS  GU00401\n         BR    RBAL                     RETURN                  GU00401\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  ALLOCATE PDS AND PANVALET LIBRARIES                           ***\n***                                                                ***\n**********************************************************************\nAPDSPAN  ST    RBAL,APRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         BAL   RBAL,DPDSPAN             FREE THE PDS AND PAN LIBRARIES\n*\n         MVC   APD(APDLEN),@PD          INITIALIZE CONTROL BLOCKS\n         GTEDASET APD,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\n         LA    R3,DPLIST-8              R3 POINTS TO -1 DDNAME\n         LA    R4,APLIST-44             R4 POINTS TO -1 DSNAME\n         LA    R5,2                     R5 IS COUNTER\nAPLOOP1  LA    R3,8(0,R3)               R3 POINTS TO NEXT DDNAME\n         LA    R4,44(0,R4)              R4 POINTS TO NEXT DSNAME\n         MVC   APDDDNAM(8),0(R3)        MOVE DDNAME TO T.U.\n         MVC   APDDSNAM(44),0(R4)       MOVE DSNAME TO T.U.\n         GTEDAALC APD,VERB=AL,ERRMSG=YES  ALLOCATE\n         CLC   APDS99RC,F0              IF RETURN NOT OKAY\n         BNE   APRET04                    GO TO BAD ENDING\n         BCT   R5,APLOOP1               ELSE LOOP BACK UP\n*\n         B     APEND\n*\nAPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     APEND                    BRANCH TO ENDING\n*\nAPEND    L     RBAL,APRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FREE THE PANVALET AND PDS LIBRARIES                           ***\n***                                                                ***\n**********************************************************************\nDPDSPAN  ST    RBAL,DPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R3,2                     R3 IS COUNTER\n         LA    R4,DPLIST-8              R4 POINTS TO -1 DDNAME\nDPLOOP1  LA    R4,8(0,R4)               R4 POINTS TO NEXT DDNAME\n         MVC   DWKDDNAM(8),0(R4)        MOVE DDNAME TO T.U.\n         GTEDAALC DWK,VERB=UN,ERRMSG=YES  FREE THE DDNAME\n         BCT   R3,DPLOOP1               LOOP BACK UP\n*\n         B     DPEND\n*\nDPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DPEND                    BRANCH TO ENDING\n*\nDPEND    L     RBAL,DPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  ALLOCATE THE SEQUENTIAL INPUT DATASET                         ***\n***                                                                ***\n**********************************************************************\nASEQ     ST    RBAL,ASRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         USING APARMPDL,R9              ADDRESSABILITY OF PARMS\n*\n         BAL   RBAL,DSEQ                FREE THE SEQUENTIAL FILE\n*\n         MVC   ASQ(ASQLEN),@SQ          INITIALIZE DATA AREAS\n         GTEDASET ASQ,CPPLPTR=CPPLPTR   LINK AREAS TOGETHER\n         MVC   ASQDDNAM(8),=CL8'SEQ'    MOVE IN DDNAME\n         MVC   ASQDSNAM(44),BLANKS      CLEAR DSNAME\n         L     R1,ASFDSN+0              R1 POINTS TO PARM DSNAME\n         LH    R2,ASFDSN+4              R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   ASQDSNAM(0),0(R1)          MOVE PARM DSN TO T.U.\n         EX    R2,*-6                   EXECUTE THE MOVE\n         TM    ASFDSN+14,X'80'          IF A MEMBER NAME PRESENT\n         BO    ASFMEMB                    BRANCH\n         XC    ASQMEMBR-6(2),ASQMEMBR-6 ELSE KILL THE MEMBER KEY\n         B     ASALLOC                    AND GO TO ALLOCATE\nASFMEMB  MVC   ASQMEMBR(8),BLANKS       CLEAR THE MEMBER NAME FIELD\n         L     R1,ASFDSN+8              R1 POINTS TO MEMBER NAME\n         LH    R2,ASFDSN+12             R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   ASQMEMBR(0),0(R1)          MOVE PARM MEMBER TO T.U.\n         EX    R2,*-6                   EXECUTE THE MOVE\nASALLOC  GTEDAALC ASQ,VERB=AL,ERRMSG=YES  ALLOCATE\n         CLC   ASQS99RC,F0              IF RETURN NOT ZERO\n         BNE   ASRET04                    GO TO HIGH ENDING\n*\n         DROP  R9\n*\n         B     ASEND\n*\nASRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     ASEND                    BRANCH TO ENDING\n*\nASEND    L     RBAL,ASRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FREE THE SEQUENTIAL FILE                                      ***\n***                                                                ***\n**********************************************************************\nDSEQ     ST    RBAL,DSRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   DWKDDNAM(8),=CL8'SEQ'    MOVE 'SEQ' TO FILE NAME\n         GTEDAALC  DWK,VERB=UN,ERRMSG=YES\n*\n         B     DSEND\n*\nDSRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DSEND                    BRANCH TO ENDING\n*\nDSEND    L     RBAL,DSRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n***      1.  Execute IKJPARS with CALLTSSR using own PPL.          ***\n***      2.  Load address of Parm Descriptor Element List (PDL)    ***\n***          from own ANS word into R9 for addressability.         ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n*                                       COPY BUFFER ADDR FROM CSPL\n         MVC   MYPPL+(PPLCBUF-PPL)(4),MYCSPL+(CSPLCBUF-CSPL)\n*\n         MVC   MYPPL+(PPLPCL-PPL)(4),PCLAD   COPY IN PCL ADDRESS\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   UNALLOCATE FILES                                             ***\n***                                                                ***\n**********************************************************************\nUNALLOC  ST    RBAL,UNRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n*                                     INITIALIZE SVC-99 CONTROL BOLCKS\nUNSET    MVC   MY0(MY0LEN),@M0          INITIALIZE DATA\n         GTEDASET MY0,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\n*\nUNEND    L     RBAL,UNRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\nUNDYNALC GTEDAALC MY0,VERB=UN,ERRMSG=NO PERFORM SVC-99/DAIRFAIL\n         BR    R4\n         EJECT\n**********************************************************************\n***                                                                ***\n***   WRITE THE PROGRAM COMPLETION CODE                            ***\n***                                                                ***\n**********************************************************************\nCONDCODE ST    RBAL,CORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nCORETCD  CVD   R15,COPACK8              CONVERT RETURN CODE TO DECIMAL\n         MVC   MSG0001B(8),WRK0001B     INITIALIZE MESSAGE SEGMENT\n         UNPK  MSG0001B+4(4),COPACK8+5(3) CONVERT TO ZONED DECIMAL\n         OI    MSG0001B+7,X'F0'         KILL THE SIGN\n         LA    R15,0                    SELECT PUTLINE MSG #0 (BLANK)\n         BAL   RBAL,PUTLPROC              GO PERFORM PUTLINE\n         LA    R15,1                    SELECT PUTLINE MESSAGE #1\n         BAL   RBAL,PUTLPROC              GO PERFORM PUTLINE\n*\nCOEND    L     RBAL,CORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   WRITE MESSAGE WITH PUTLINE                                   ***\n***                                                                ***\n***    1.  IOPL was initialized at beginning of program, IOPLIOPB  ***\n***        field will be filled in by PUTLINE execute macro.       ***\n***    2.  PTPB will be filled in by PUTLINE execute macro.        ***\n***    3.  OLD will be filled in by this procedure.                ***\n***                                                                ***\n***    Message number in R15 is multiplied by four and used as     ***\n***    offset into PUTABLE.  PUTABLE contains branch addresses     ***\n***    for processing appropriate message.                         ***\n**********************************************************************\nPUTLPROC ST    RBAL,PURBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         SLL   R15,2                    R15 IS NOW OFFSET INTO PUTABLE\n         L     R15,PUTABLE(R15)         R15 NOW POINTS TO PROCESSING\n         BR    R15                      GO TO APPROPRIATE PROCESSING\n*\nPUTABLE  DC    A(PU0000)                PROCESS ADDR FOR BLANK LINE\n         DC    A(PU0001)                PROCESS ADDR FOR PDU0001I\n         DC    A(PU0002)                PROCESS ADDR FOR PDU0002I\n*\nPU0000   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0000              ADDR OF BLANK LINE\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0001   LA    R15,2(0,0)               SEGMENTS = 2\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0001A             ADDR OF PDU0001I, SEG #1\n         ST    R15,MYOLD+4                INTO O.L.D.\n         LA    R15,MSG0001B             ADDR OF PDU0001I, SEG #2\n         ST    R15,MYOLD+8                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0002   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0002              ADDR OF PDU0002I\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPUOUTPUT XC    MYPTPB(MYPTPBLN),MYPTPB  ZERO THE PUTLINE PARM BLOCK\n         XC    MYIOECB,MYIOECB          ZERO THE ECB\n         PUTLINE PARM=MYPTPB,OUTPUT=MYOLD,MF=(E,MYIOPL)\n         LTR   R15,R15                  IF RETURN IS ZERO\n         BZ    PUEND                      GO TO END\n         B     PUERR04                  ELSE GO TO ERROR\n*\nPUERR04  LA    R15,X'04'(0,0)           SET VALUE\n         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE\n*\nPUEND    L     RBAL,PURBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   READ INPUT WITH GETLINE                                      ***\n***                                                                ***\n***    1.  IOPL was initialized at beginning of program, IOPLIOPB  ***\n***        field will be filled in by GETLINE execute macro.       ***\n***    2.  GTPB will be filled in by GETLINE execute macro.        ***\n***                                                                ***\n**********************************************************************\nGETLPROC ST    RBAL,GERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nGEINPUT  XC    MYGTPB(MYGTPBLN),MYGTPB  ZERO THE PARM BLOCK\n         XC    MYIOECB,MYIOECB          ZERO THE ECB\n         GETLINE PARM=MYGTPB,TERMGET=(),MF=(E,MYIOPL)\n         C     R15,F4                   IF RETURN IS NOT GT 4\n         BNH   GEEND                      GO TO END\n         B     GEERR04                  ELSE GO TO ERROR\n*\nGEERR04  LA    R15,X'04'(0,0)           SET VALUE\n         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE\n*\nGEEND    L     RBAL,GERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROCESS HELP SUBCOMMAND                                      ***\n***                                                                ***\n***     1.  Build a CPPL in SP-001.                                ***\n***     2.  LINK to program HELP.                                  ***\n***                                                                ***\n**********************************************************************\nHELPPROC ST    RBAL,HERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nHELPCPPL L     R4,CPPLPTR               POINT TO ORIGINAL CPPL\n         MVC   HPCPPL(16),0(R4)         COPY MAIN CPPL INTO HELP CPPL\n*                                       COPY CBUF PTR FROM CMD SCAN\n         MVC   HPCPPL+(CPPLCBUF-CPPL)(4),MYCSPL+(CSPLCBUF-CSPL)\n*\nHELPIT   LA    R1,HPCPPL                POINT TO HELP CPPL\n         LINK  EP=HELP                  LINK TO HELP COMMAND\n*\n*                                       REMOVE IN-USE ON FILE SYSHELP\nHENOTUSE MVC MY3(MY3LEN),@M3              INITIALIZE SVC99 BLOCKS\n         GTEDASET MY3,CPPLPTR=CPPLPTR     LINK BLOCKS TOGETHER\n         GTEDAALC MY3,VERB=UN,ERRMSG=NO   REMOVE INUSE ATTR\n*\nHEEND    L     RBAL,HERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROCESS TSTATS SUBCOMMAND                                 GU00301\n***                                                                ***\n***     1.  Allocate the PAN and PDS datasets.                     ***\n***     2.  Build a CPPL in SP-001.                                ***\n***     3.  Build command buffers.                                 ***\n***     4.  LINK to TSO commands PANINDEX and PDS.                 ***\n***                                                                ***\n**********************************************************************\nSTATPROC ST    RBAL,STRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nSTPARSE  MVC   PCLAD,ACPCL              ADDR OF SELECTED PCL FOR PARSE\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     STEND                      AND GO TO END OF ROUTINE\n*\n         USING CPARMPDL,R9              ADDRESSABILITY OF PARMS\n*\nSTALLOC  MVC   APDDSN(44),BLANKS        CLEAR THE DSN FIELD\n         L     R1,CPOSDSN+0             R1 POINTS TO THE DSN\n         LH    R2,CPOSDSN+4             R2 HAS LENGTH\n         BCTR  R2,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   APDDSN(0),0(R1)            MOVE DSN FROM PARM\n         EX    R2,*-6                   EXECUTE THE MOVE\n         MVC   APADSN(44),APDDSN        COPY PDS DSN TO PAN DSN\n         LA    R2,APADSN+1(R2)          R2 POINTS JUST BEYOND NAME\n         MVI   0(R2),C'.'               ADD THE DOT\n         MVC   1(L'PANSUFF,R2),PANSUFF  ADD THE PANVALET SUFFIX\n         BAL   RBAL,APDSPAN             ALLOCATE PDS AND PAN LIBRARIES\n         CLC   RETCDE,F0                IF RETURN BAD\n         BNE   STRET04                    GO TO HIGH ENDING\n*\nSTATCPPL L     R4,CPPLPTR               POINT TO ORIGINAL CPPL\n         MVC   STCPPL(16),0(R4)         COPY MAIN CPPL INTO STAT CPPL\n*\nSTPANIPM L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAME\n         LH    R2,CPOSDSN+12            R2 HAS LENGTH\n         XC    PI2TEXT(10),PI2TEXT      CLEAR FOR LATER USE\n         STH   R2,PI2TEXT               STORE THE LENGTH FOR TEXTBILD\n         BCTR  R2,0                     R2 HAS LENGTH-1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   PI2TEXT+2(0),0(R1)         MOVE MEMB NAME FOR TEXTBILD\n         EX    R2,*-6                   EXECUTE THE MOVE\n         TEXTBILD  AREA=STCBUFTX,TEXT=(PI1TEXT,PI2TEXT,PI3TEXT)\n         LA    R15,4(0,R15)             R15 HAS TOTAL LENGTH OF BUFFER\n         STH   R15,STCBUFLN             MOVE BUFFER LENGTH TO BUFFER\n         MVC   STCBUFOF,=H'9'           MOVE OPERAND OFFSET TO BUFFER\n*\n         LA    R15,STCBUF               R15 POINTS TO COMMAND BUFFER\n         ST    R15,STCPPL+(CPPLCBUF-CPPL)  PUT ADDRESS INTO CPPL\n*\nSTPANI   LA    R1,STCPPL                POINT TO STAT CPPL\n         LINK  EP=PANINDEX              LINK TO PANI COMMAND\n*\nSTPDSPM  L     R1,CPOSDSN+0             R1 POINTS TO DSN\n         LH    R2,CPOSDSN+4             R2 HAS LENGTH\n         XC    PD2TEXT(10),PD2TEXT      CLEAR FOR LATER USE\n         STH   R2,PD2TEXT               STORE THE LENGTH FOR TEXTBILD\n         BCTR  R2,0                     R2 HAS LENGTH-1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   PD2TEXT+2(0),0(R1)         MOVE DSN FOR TEXTBILD\n         EX    R2,*-6                   EXECUTE THE MOVE\n         L     R1,CPOSDSN+8             R1 POINTS TO MEMBER NAME\n         LH    R2,CPOSDSN+12            R2 HAS LENGTH\n         XC    PD4TEXT(10),PD4TEXT      CLEAR FOR LATER USE\n         STH   R2,PD4TEXT               STORE THE LENGTH FOR TEXTBILD\n         BCTR  R2,0                     R2 HAS LENGTH-1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   PD4TEXT+2(0),0(R1)         MOVE MEMB NAME FOR TEXTBILD\n         EX    R2,*-6                   EXECUTE THE MOVE\n         TEXTBILD  AREA=STCBUFTX,TEXT=(PD1TEXT,PD2TEXT,PD3TEXT,PD4TEXT)\n         LA    R15,4(0,R15)             R15 HAS TOTAL LENGTH OF BUFFER\n         STH   R15,STCBUFLN             MOVE BUFFER LENGTH TO BUFFER\n         MVC   STCBUFOF,=H'4'           MOVE OPERAND OFFSET TO BUFFER\n*\n         LA    R15,STCBUF               R15 POINTS TO COMMAND BUFFER\n         ST    R15,STCPPL+(CPPLCBUF-CPPL)  PUT ADDRESS INTO CPPL\n*\n*                         NOTE - PDS CMD WILL OVERLAY PCMD FIELD IN\n*                                THE ECT.  THIS IS THE &SYSPCMD FIELD.\n*                                IT MUST BE RESTORED FOR HELP TO WORK.\nSTECTPCM L     R4,CPPLPTR               R4 POINTS TO CPPL\n         L     R4,(CPPLECT-CPPL)(R4)    R4 POINTS TO ECT\n         LA    R4,(ECTPCMD-ECT)(R4)     R4 POINTS TO &SYSPCMD FIELD\n         MVC   STPCMD(8),0(R4)          SAVE IT TEMPORARILY\n*\nSTPDS    LA    R1,STCPPL                POINT TO STAT CPPL\n         LINK  EP=PDS                   LINK TO PDS COMMAND\n         MVC   0(8,R4),STPCMD           RESTORE THE &SYSPCMD FIELD\n*\n         B     STEND\n*\nSTRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     STEND                    GO TO ENDING\n*\nSTEND    LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n         L     RBAL,STRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         DROP  R9                       DROP ADDRESSABILITY\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nAAPCL DC       A(APARMPCL)              ADDR OF PARM CONTROL LIST\nABPCL DC       A(BPARMPCL)              ADDR OF PARM CONTROL LIST\nACPCL DC       A(CPARMPCL)              ADDR OF PARM CONTROL LIST\nADPCL DC       A(DPARMPCL)              ADDR OF PARM CONTROL LIST\nVATTNXIT DC    V(ATTNXIT)               ADDR OF ATTENTION EXIT\nVESTXIT  DC    V(ESTXIT)                ADDR OF ABEND EXIT\n*\nF0       DC    F'0'                     CONSTANT\nF4       DC    F'4'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\nBLANKS   DC    CL80' '                  BLANK LINE\n*                              0....+....1....+....2....+....3....+\nMSG0000  DC    H'06',H'00',CL02'  '\nMSG0001A DC    H'37',H'00',CL33'PDU0001I Function completed (CC=)'\nWRK0001B DC    H'08',H'32',CL4'0000'  (TO BE MODIFIED)\nMSG0002  DC    H'41',H'00',CL37'PDU0002I Type in subcommand, or HELP:'\nATTOBUF  DC    CL66'Interrupt.  Enter a null line to continue, or PA-1 X\n               (BREAK) to end.'\n*\n@M0      GTEDADAT DDNAM=X,UNALC=YES\n@M3      GTEDADAT DDNAM=SYSHELP,REMOV=Y\n*\nSTAXD    STAX  MF=L                     INITIALIZED STAX PARM LIST\n*\nESTAED   ESTAE MF=L\n*\nAWKLIST  DC    CL8'WRK001'              WORK FILE NAME\n         DC    CL8'WRK002'              WORK FILE NAME\n         DC    CL8'PCWORK1'             WORK FILE NAME\n         DC    CL8'PCWORK2'             WORK FILE NAME\n*\nDWKLIST  DC    CL8'WRK001'              WORK FILE NAME\n         DC    CL8'WRK002'              WORK FILE NAME\n         DC    CL8'PCWORK1'             WORK FILE NAME\n         DC    CL8'PCWORK2'             WORK FILE NAME\n         DC    CL8'SYSPRINT'            PRINT FILE NAME\n*\nPANSUFF  DC    C'PANUPDTE'              PAN LIBRARY SUFFIX\n*\nDPLIST   DC    CL8'PDS'                 PDS DDNAME\n         DC    CL8'PANDD1'              PAN DDNAME\n*\n@PD      GTEDADAT DDNAM=X,DSNAM=X,PERMA=YES,STATS=SHR\n*\n@WK      GTEDADAT DDNAM=X,STATS=NEW,NDISP=PASS,CDISP=DELETE,           X\n               TRK=YES,PRIME=1,SECND=1,UNIT=SYSTSO,PERMA=YES\n*\n@PR      GTEDADAT DDNAM=SYSPRINT,TERM=YES,PERMA=YES,                   X\n               BLKSZ=1330,LRECL=133,RECFM=FBA\n*\n@SQ      GTEDADAT DDNAM=SEQ,DSNAM=X,MEMBR=X,STATS=SHR,PERMA=YES\n*\n#WK      GTEDADAT DDNAM=X,UNALC=YES\n*\nPI1TEXT  DC    H'18',CL18'PANINDEX CATEGORY('\nPI3TEXT  DC    H'01',CL01')'\n*\nPD1TEXT  DC    H'05',CL05'PDS '''\nPD3TEXT  DC    H'07',CL07''' ATTR '\n*\nCOMMA    DC    H'01',CL01','\n*                                                               GU00301\n         EJECT                                                  GU00301\n*************************************************************** GU00301\n***                                                         *** GU00301\n***   SUBCOMMAND TABLE                                      *** GU00301\n***                                                         *** GU00301\n*************************************************************** GU00301\n*                                                               GU00301\nSUTBL    DS    0F  SUBCOMMD  BRANCH ADDRESS                     GU00301\n*                  --------  --------------                     GU00301\n         DC    CL8'STATS   ',A(A4STAT)                          GU00301\n         DC    CL8'STATUS  ',A(A4STAT)   <== alias for STATS    GU00301\n         DC    CL8'UPDATE  ',A(A0UPDT)                          GU00301\n         DC    CL8'ADD     ',A(A0UPDT)   <== alias for UPDATE   GU00301\n         DC    CL8'CHANGE  ',A(A0UPDT)   <== alias for UPDATE   GU00301\n         DC    CL8'BACKUP  ',A(A5BKUP)                          GU00401\n         DC    CL8'ALIAS   ',A(A3ALIS)                          GU00301\n         DC    CL8'RESTORE ',A(A1REST)                          GU00301\n         DC    CL8'DELETE  ',A(A2DELT)                          GU00301\n         DC    CL8'POOF    ',A(A2DELT)   <== alias for DELETE   GU00301\n         DC    CL8'HELP    ',A(HELPPROC)                        GU00301\n         DC    CL8'END     ',A(ENDING)                          GU00301\n         DC    CL8'ABEND0C1',A(F0)       <== causes S0C1 ABEND  GU00301\n         DC    CL8'TSTATS  ',A(STATPROC)                        GU00301\n         DC    CL8'TSTATUS ',A(STATPROC) <== alias for TSTATS   GU00301\nSUTBLEND DC    X'FF'                                            GU00301\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***    UPDATE  pds-dsn(pds-member)  FROM(in-dsn{(in-member)})      ***\n***                                 WITH                           ***\n***                                USING                           ***\n***                                                                ***\n**********************************************************************\nAPARMPCL IKJPARM  DSECT=APARMPDL\n*\nAPOSDSN  IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               VALIDCK=PDSMEM,                                         X\n               PROMPT='THE NAME OF THE OUTPUT PDS AND MEMBER',         X\n               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'\n*\nAKEYFROM IKJKEYWD  DEFAULT='FROM'\n         IKJNAME  'FROM',                                              X\n               ALIAS=('WITH','USING'),                                 X\n               SUBFLD=ASUBFROM\n*\nASUBFROM IKJSUBF\nASFDSN   IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               PROMPT='THE NAME OF THE INPUT DATASET',                 X\n               HELP='1-44 CHARACTER DSNAME WITH OPTIONAL MEMBER NAME'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***    RESTORE  pds-dsn(pds-member)  FROM  VERSION(pan-suffix)     ***\n***                                  WITH                          ***\n***                                 USING                          ***\n***                                                                ***\n**********************************************************************\nBPARMPCL IKJPARM  DSECT=BPARMPDL\n*\nBPOSDSN  IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               VALIDCK=PDSMEM,                                         X\n               PROMPT='THE NAME OF THE OUTPUT PDS AND MEMBER',         X\n               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'\n*\nBKEYFROM IKJKEYWD\n         IKJNAME  'FROM',                                              X\n               ALIAS=('WITH','USING')\n*\nBKEYVERS IKJKEYWD  DEFAULT='VERSION'\n         IKJNAME  'VERSION',                                           X\n               SUBFLD=BSUBVERS\n*\nBSUBVERS IKJSUBF\nBSVERS   IKJIDENT  'VERSION NUMBER',                                   X\n               MAXLNTH=2,                                              X\n               PROMPT='1-2 DIGIT PANVALET SUFFIX, 0-99',               X\n               INTEG,                                                  X\n               HELP='2-CHARACTER SUFFIX FROM PANINDEX OR PAN PRINT'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***    DELETE  pds-dsn(pds-member)                                 ***\n***    STATS                                                       ***\n***    TSTATS                                                   GU00301\n***    BACKUP                                                   GU00401\n***                                                                ***\n**********************************************************************\nCPARMPCL IKJPARM  DSECT=CPARMPDL\n*\nCPOSDSN  IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               VALIDCK=PDSMEM,                                         X\n               PROMPT='THE NAME OF THE PDS AND MEMBER',                X\n               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***    ALIAS  pds-dsn(pds-member)  alias                           ***\n***                                                                ***\n**********************************************************************\nDPARMPCL IKJPARM  DSECT=DPARMPDL\n*\nDPOSDSN  IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               VALIDCK=PDSMEM,                                         X\n               PROMPT='THE NAME OF THE PDS AND MEMBER',                X\n               HELP='1-44 CHAR DSNAME AND 1-8 CHAR MEMBER NAME'\n*\nDPOSALIS IKJIDENT 'ALIAS NAME',                                        X\n               MAXLNTH=8,                                              X\n               FIRST=ALPHA,OTHER=ALPHANUM,                             X\n               PROMPT='THE ALIAS NAME FOR THE MEMBER',                 X\n               CHAR,                                                   X\n               HELP='1-8 CHARACTER MEMBER NAME'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA IN SUBPOOL 000                                     ***\n***                                                                ***\n**********************************************************************\nWORKD    DSECT                          AREA-13 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n*\nINRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nABRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nUNRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPURBALSV DS    F                        RETURN ADDRESS SAVE AREA\nGERBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSCRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSURBALSV DS    F                        RETURN ADDRESS SAVE AREA\nHERBALSV DS    F                        RETURN ADDRESS SAVE AREA\nSTRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nA0RBALSV DS    F                        RETURN ADDRESS SAVE AREA\nA1RBALSV DS    F                        RETURN ADDRESS SAVE AREA\nA2RBALSV DS    F                        RETURN ADDRESS SAVE AREA\nA3RBALSV DS    F                        RETURN ADDRESS SAVE AREA\nA4RBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00301\nA5RBALSV DS    F                        RETURN ADDRESS SAVE ARE GU00401\nAWRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDWRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nAPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nASRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDSRBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\n*\nPCLAD    DS    A                        ADDR OF SELECTED PCL FOR PARSE\n*\nMYUWA    DS    0D                       WORK/SAVE AREA FOR PARSE EXITS\nMYUWASV  DS    18F                      SAVE AREA FOR EXITS\nMYUWAWRK DS    14F                      WORK AREA FOR EXITS\n*\nAPLIST   DS    0CL1\nAPDDSN   DS    CL44                     WORK AREA FOR PDS DSN\nAPADSN   DS    CL44                     WORK AREA FOR PAN DSN\n*\nAPDMEM   DS    0H                       WORK AREA FOR PDS MEMBER\nAPDMEMLN DS    H\nAPDMEMBR DS    CL8\n*\nAPDALI   DS    0H                       WORK AREA FOR PDS ALIAS\nAPDALILN DS    H\nAPDALIS  DS    CL8\n*\n*\nMY0      GTEDADAT MAP=ONLY,DDNAM=X,UNALC=YES\nMY3      GTEDADAT DDNAM=SYSHELP,REMOV=Y\n*\nAPD      GTEDADAT MAP=ONLY,DDNAM=X,DSNAM=X,PERMA=YES,STATS=SHR\n*\nAWK      GTEDADAT MAP=ONLY,DDNAM=X,STATS=NEW,NDISP=PASS,CDISP=DELETE,  X\n               TRK=YES,PRIME=1,SECND=1,UNIT=SYSTSO,PERMA=YES\n*\nAPR      GTEDADAT MAP=ONLY,DDNAM=SYSPRINT,TERM=YES,PERMA=YES,          X\n               BLKSZ=1330,LRECL=133,RECFM=FBA\n*\nDWK      GTEDADAT MAP=ONLY,DDNAM=X,UNALC=YES\n*\nASQ      GTEDADAT DDNAM=SEQ,DSNAM=X,MEMBR=X,STATS=SHR,PERMA=YES,       X\n               MAP=ONLY\n*\nPI2TEXT  DS    H,CL8                    PANINDEX CATEGORY NAME\n*\nPD2TEXT  DS    H,CL44                   PDS COMMAND DSN\nPD4TEXT  DS    H,CL8                    PDS COMMAND MEMBER NAME\n*\nSTAXL    STAX  MF=L                     PARM LIST FOR STAX\nSTAXLLN  EQU   *-STAXL                    LENGTH OF PARM LIST\n*\nCOPACK8  DS    D                        DOUBLEWORD FOR CVD\nA1VERS   DS    CL2                      TWO CHARACTERS FOR PARM\n*\nMSG0001B DS    H,H,CL4                  SEGMENT TWO OF MESSAGE\n*\nMYIOPL   DS    4F                       IO PARM LIST\nMYIOECB  DS    F                        ECB FOR I/O ROUTINES\nMYPTPB   PUTLINE MF=L                   PUTLINE PARM BLOCK (PTPB)\nMYPTPBLN EQU   *-MYPTPB                   LENGTH OF PTPB\nMYGTPB   GETLINE MF=L                   GETLINE PARM BLOCK (GTPB)\nMYGTPBLN EQU   *-MYGTPB                   LENGTH OF PTPB\n*                                       OUTPUT LINE DESCRIPTOR, 1 LEVEL\nMYOLD    DS    F                          NUMBER OF SEGMENTS\n         DS    5A                         ADDRS OF UP TO FIVE SEGMENTS\n*\nMYCSECB  DS    F                        ECB FOR COMMAND SCAN\nSUADDR   DS    F                        BRANCH ADDRESS FOR SUBCOMMAND\n*\nSTCBUF   DS    0H                       STATS COMMAND BUFFER\nSTCBUFLN DS    H                          LENGTH OF BUFFER\nSTCBUFOF DS    H                          OFFSET OF OPERAND INTO TEXT\nSTCBUFTX DS    CL100                      TEXT OF COMMAND\n*\nSTPCMD   DS    CL8                      TEMP STORAGE FOR &SYSPCMD FIELD\n*\nATTUPARM DS    0F                       USER PARM LIST FOR ATTENTION\nATTUPSAV DS    A                          ADDRESS OF SAVE AREA\nATTUPECB DS    A                          ADDRESS OF ECB\n*\nATTSAVE  DS    18F                      SAVE AREA FOR ATTENTION EXIT\nATTECB   DS    F                        ECB FOR ATTENTION EXIT\nATTIBUF  DS    CL256                    ATTENTION EXIT INPUT BUFFER\n*\nESTAEL   ESTAE MF=L\nESTAELLN EQU   *-ESTAEL\nESTUPL   DS    0D                       ESTAE USER PARM LIST\n         DS    A                          ADDRESS OF RETURN POINT\n         DS    A                          ADDRESS OF USER WORK AREA\nESTUWK   DS    0D                       ESTAE USER WORK AREA\n         DS    18F                        REGISTER SAVE AREA\n         DS    D                          DOUBLE WORD FOR UNPACK\n         DS    F                          BAL REGISTER SAVE AREA\n         WTO   '.+....1....+....2....+....3....+....4....+....5',      X\n               ROUTCDE=(11),DESC=(7),MF=L\n*\nA0PARML  DS    A                        PARM LIST FOR UPDATE\nA0PARM   DS    H,CL100                  PARM FOR UPDATE\nA0RETCDE DS    F                        RETURN CODE\n*\nA1PARML  DS    A                        PARM LIST FOR RESTORE\nA1PARM   DS    H,CL100                  PARM FOR RESTORE\nA1RETCDE DS    F                        RETURN CODE\n*\nA2PARML  DS    A                        PARM LIST FOR DELETE\nA2PARM   DS    H,CL100                  PARM FOR DELETE\nA2RETCDE DS    F                        RETURN CODE\n*\nA3PARML  DS    A                        PARM LIST FOR ALIAS\nA3PARMLN DS    H                        PARM LENGTH FOR ALIAS\nA3PARM   DS    CL100                    PARM TEXT FOR ALIAS\nA3RETCDE DS    F                        RETURN CODE\n*                                                               GU00301\nA4PARML  DS    A                        PARM LIST FOR STATS     GU00301\nA4PARM   DS    H,CL100                  PARM FOR RESTORE        GU00301\nA4RETCDE DS    F                        RETURN CODE             GU00301\n*                                                               GU00401\nA5PARML  DS    A                        PARM LIST FOR STATS     GU00401\nA5PARM   DS    H,CL100                  PARM FOR RESTORE        GU00401\nA5RETCDE DS    F                        RETURN CODE             GU00401\n*\nWORKDEND DS    0D\nWORKDLEN EQU   *-WORKD                  TOTAL LENGTH OF WORK-13 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA IN SUBPOOL 001                                     ***\n***                                                                ***\n**********************************************************************\nWORK8    DSECT                          AREA-8 FOR VARIABLES\nMYCSPL   DS    6F                       COMMAND SCAN PARM LIST\nMYFLG    DS    F                        COMMAND SCAN FLAG WORD\nMYCSOA   DS    2F                       COMMAND SCAN OUTPUT AREA\n*\nHPCPPL   DS    4F                       HELP COMMAND PROCESSOR PARM LST\nSTCPPL   DS    4F                       STAT COMMAND PROCESSOR PARM LST\n*\nWORK8END DS    0D\nWORK8LEN EQU   *-WORK8                  TOTAL LENGTH OF WORK-8 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING DSECTS                                               ***\n***                                                                ***\n**********************************************************************\nVALPARML DSECT                          PARM LIST FOR PARSE VALIDATION\nPDEADR   DS    A                          ADDR OF PDE BEING CHECKED\nUSERWORD DS    A                          ADDR OF MYUWA\nVALMSG   DS    A                          ADDR OF OPTIONAL MESSAGE\n*\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         IKJIOPL                        I/O PARM LIST\n         IKJGTPB                        GETLINE PARM BLOCK\n         IKJCSPL                        COMMAND SCAN PARM LIST\n         IKJCSOA                        COMMAND SCAN OUTPUT AREA\n         IKJECT                         ENVIRONMENT CONTROL TABLE\n*\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS DAIRFAIL CONTROL BLOCKS\n         IEFZB4D0                       MAPS SVC99 CONTROL BLOCKS\n*\n         IHASDWA                      , SDWA FOR ESTAE EXIT\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EQUATES                                                      ***\n***                                                                ***\n**********************************************************************\nRBASE    EQU   11                       BASE REGISTER\nRBASE2   EQU   12                       BASE REGISTER\nRBAL     EQU   10                       BAL REGISTER\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************************************************\n***   PARSE VALIDATION CHECK FOR MEMBER NAME.                      ***\n***   On entry, R1 points to parm list described by VALPARML.      ***\n***                                                                ***\n***      R1               VALPARML         xPOSDSN                 ***\n***        +-----------+    +-----------+    +-----------+    +--- ***\n***        |           |===>| PDEADR    |===>|           |===>|dsn ***\n***        +-----------+    +-----------+    +-----+--+--+    +--- ***\n***                         | USERWORD  |    |00 01|80|  |         ***\n***                         +-----------+    +-----+--+--+    +--- ***\n***                         |00 00 00 00|    |           |===>|mem ***\n***                         +-----------+    +-----+--+--+    +--- ***\n***                                          |00 01|80|  |         ***\n***                                          +-----+--+--+    +--- ***\n***                                          |           |===>|psw ***\n***                                          +-----+--+--+    +--- ***\n***                                          |00 01|80|  |         ***\n***                                          +-----+--+--+         ***\n***                                                                ***\n***   If member name is present, signal okay with RC=0.            ***\n***   If member name is not present, signal to prompt with RC=4.   ***\n***                                                                ***\n***   After linkage conventions in, R13 points to MYUWA (in main   ***\n***   CSECT) whose address is in USERWORD, the second address in   ***\n***   the parm list.  The length of MYUWA is arbitrary.  This      ***\n***   program uses the first 18 fullwords for its own save area.   ***\n**********************************************************************\nPDSMEM CSECT\n         STM   R14,R12,12(R13)          SAVE INTO PARSE'S SAVE AREA\n         L     R14,4(0,R1)              R14 POINTS TO MYUWA SAVE/WORK\n         ST    R14,8(0,R13)             PARSE'S S.A. POINTS TO MINE\n         ST    R13,4(0,R14)             MY S/W AREA POINTS TO PARSE'S\n         L     R14,12(0,R13)            RESTORE R14\n         L     R13,8(0,R13)             R13 POINTS MYUWA SAVE/WORK AREA\n*\n         LR    RBASE,R15                CREATE OWN BASE REGISTER\n         USING PDSMEM,RBASE             ADDRESSABILITY\n         LR    R9,R1                    BASE OF PARM LIST\n         USING VALPARML,R9              ADDRESSABILITY OF PARM LIST\n*\n         L     R2,0(0,R9)               R2 POINTS TO PDE\n         TM    14(R2),X'80'             IF MEMBER NAME PRESENT\n         BO    PDSMEND0                   SIGNAL OKAY\n*                                       ELSE\nPDSMEND4 LA    R15,4                      SIGNAL TO PROMPT\n         B     PDSMEND                    GO TO END\n*\nPDSMEND0 XR    R15,R15                  SIGNAL OKAY\n*\nPDSMEND  L     R13,4(0,R13)             RESTORE R13 FROM MY S/W AREA\n         LM    R0,R12,20(R13)           RESTORE R0-12 FROM PARSE'S S.A.\n         L     R14,12(0,R13)            RESTORE R14 FROM PARSE'S S.A\n         BR    R14                      RETURN\n*\n         EJECT\n**********************************************************************\n***                  ESTAE (ABEND) EXIT                            ***\n***                                                                ***\n***   This exit will receive control from RTM during ABEND         ***\n***   processing.  Data areas available to this exit will be       ***\n***   the System Diagnostic Work Area (SDWA) provided by the       ***\n***   RTM, and the user parm list and the areas it points to       ***\n***   which are provided by the main routine.                      ***\n***                                                                ***\n***   This exit will format an ABEND message, and write it         ***\n***   with a WTO.  It will then return to RTM.                     ***\n***                                                                ***\n***   The register save area used by this exit has already been    ***\n***   obtained by a GETMAIN by the main program, prior to the      ***\n***   execution of the ESTAE macro.                                ***\n***                                                                ***\n***   This exit is entered by RTM with standard MVS linkage        ***\n***   conventions.  Upon entry, the following relationships        ***\n***   exist:                                                       ***\n***                                                                ***\n*** R1              SDWA (IHASDWA)   ESTUSRPL                      ***\n*** +-----------+   +------------+   +-----------+                 ***\n*** |           |==>| SDWAPARM   |==>| ESURETA   |==> Return point ***\n*** +-----------+   +------------+   +-----------+                 ***\n***                 | SDWAABCC   |   | ESUWRKA   |==> ESUWKD       ***\n***                 +------------+   +-----------+   +-----------+ ***\n***                 |            |                   | Save area | ***\n***                ---          ---                 ---         ---***\n***                ---          ---                 ---         ---***\n***                 |            |                   |           | ***\n***                 +------------+                   +-----------+ ***\n***                 | SDWAGR15   |                   | Other work| ***\n***                 +------------+                   |   areas   | ***\n***                 |            |                   +-----------+ ***\n***                ---          ---                                ***\n***                ---          ---                                ***\n***                 |            |                                 ***\n***                 +------------+                                 ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***          SEE DOCUMENTATION ON PREVIOUS PAGE                    ***\n***                                                                ***\n**********************************************************************\nESTXIT   CSECT\n         STM   R14,R12,12(R13)          SAVE REGS INTO CALLER'S S.A.\n         LR    R12,R15                  R12 HAS BASE ADDRESS\n         USING ESTXIT,R12                 ADDRESSABILITY\n         LR    R11,R1                   R11 POINTS TO SDWA\n         USING SDWA,R11                   ADDRESSABILITY\n         L     R10,SDWAPARM             R10 POINTS TO USER PARM LIST\n         USING ESTUSRPL,R10               ADDRESSABILITY\n         L     R15,ESUSRWKA             R15 POINTS TO USER WORK AREA\n         ST    R13,4(0,R15)             CALLER'S S.A. ADDR TO OWN S.A.\n         ST    R15,8(0,R13)             OWN S.A. ADDR TO CALLER'S S.A.\n         LR    R13,R15                  R13 POINTS TO OWN S.A.\n         USING ESUWKD,R13                 ADDRESSABILITY\n*\nESTMESSG BAL   R9,ESMSG                 FORMAT AND WRITE A MESSAGE\n*\n         PRINT GEN\n         L     R4,ESURETA               R4 CONTAINS RETURN ADDRESS\nESTSETRP SETRP WKAREA=(R11),RC=4,RETADDR=(R4),RETREGS=YES,FRESDWA=YES\n         PRINT NOGEN\n*\nESTEND   XR    R15,R15                  CLEAR RETURN CODE\n         L     R13,4(0,R13)             RESTORE R13, PNT TO CALLER'S SA\n         LM    R0,R12,20(R13)           RESTORE R0-R12 FROM CALLER'S SA\n         L     R14,12(0,R13)            RESTORE R14 FROM CALLER'S S.A.\n         BR    R14                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***                  WRITE ABEND MESSAGE                           ***\n***                                                                ***\n**********************************************************************\nESMSG    ST    R9,ESUBALS1              SAVE BAL REGISTER\n*\n         MVC   WTOL(WTOLLEN),WTOD       INITIALIZE WTO PARM LIST\n*\nESSYSCDE L     R3,SDWAABCC              R3 HAS ABEND CODES\n         SLL   R3,8                     LEFT JUSTIFY SYSTEM CODE\n         LA    R4,WTOL+26               R4 POINTS INTO MESSAGE\n         LA    R5,3                     R5 COUNTER SET TO 3\n         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX\n*\nESR15CDE L     R3,SDWAGR15              R3 HAS ABEND R15 CONTENTS\n         LA    R4,WTOL+42               R4 POINTS INTO MESSAGE\n         LA    R5,8                     R5 COUNTER SET TO 8\n         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX\n*\nESUSRCDE L     R3,SDWAABCC              R3 HAS ABEND CODES\n         N     R3,ESXFFF                R3 HAS ONLY USER CODE\n         CVD   R3,ESUWKDBL              CONVERT TO DECIMAL\n         OI    ESUWKDBL+7,X'0F'         KILL THE SIGN\n         UNPK  WTOL+33(4),ESUWKDBL(8)   UNPACK INTO MESSAGE\n*\nESWTO    WTO   MF=(E,WTOL)              WRITE THE MESSAGE\n*\nESMSGEND L     R9,ESUBALS1              RESTORE THE BAL REGISTER\n         BR    R9                       RETURN\n*\n*\nESHEX    XR    R2,R2                    CLEAR EVEN REG OF EVEN/ODD\n         SLDL  R2,4                     R2 RECEIVES ONE HEX DIGIT\n         LA    R4,1(0,R4)               R4 POINTS TO NEXT MESSAGE CHAR\n         LA    R2,ESHEXTBL(R2)          R2 POINTS TO CHAR IN TABLE\n         MVC   0(1,R4),0(R2)            MOVE CHAR FROM TABLE TO MESSAGE\n         BCT   R5,ESHEX                 LOOP BACK UP\n         BR    R9                       RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***          DATA AREAS AND DSECTS FOR ESTAE EXIT                  ***\n***                                                                ***\n**********************************************************************\nESHEXTBL DC    CL16'0123456789ABCDEF'   TRANSLATE TABLE\n         DS    0F                       ALIGN\nESXFFF   DC    X'00000FFF'              MASK TO CLEAR BITS 0-19\nWTOD     WTO   '*** ABEND ***  Codes: SXXX, U9999, R15=XXXXXXXX',      X\n               ROUTCDE=(11),DESC=(7),MF=L\n*\n*\n*\nESTUSRPL DSECT                          USER PARM LIST\nESURETA  DS    A                          RETURN ADDRESS FOR RTM\nESUSRWKA DS    A                          WORK AREA ADDRESS FOR ME\n*\n*\n*\nESUWKD   DSECT                          USER WORK AREA\nESUWKSAV DS    18F                        REGISTER SAVE AREA\nESUWKDBL DS    D                          DOUBLE WORD FOR UNPACK\nESUBALS1 DS    F                          BAL REGISTER SAVE AREA\nWTOL     WTO   '.+....1....+....2....+....3....+....4....+....5',      X\n               ROUTCDE=(11),DESC=(7),MF=L\nWTOLLEN  EQU   *-WTOL                     LENGTH OF WTO PARM LIST\n*\n         EJECT\n**********************************************************************\n***                  ATTENTION EXIT                                ***\n***                                                                ***\n***  This code is entered after the attention prompt is displayed  ***\n***  and the user's response has been copied into the input buffer.***\n***                                                                ***\n***  This attention exit simply POSTs the ECB which will be        ***\n***  checked by other routines.                                    ***\n***                                                                ***\n***  Upon entry, the following pointers are in place:              ***\n***                                                                ***\n***  R1             Attn prm lst                                   ***\n***  +-----------+   +-----------+                                 ***\n***  |           |==>|           |==> TAIE (**)                    ***\n***  +-----------+   +-----------+                                 ***\n***                  |           |==> IBUF                         ***\n***                  +-----------+                                 ***\n***                  |           |==> ATTUPARM (*)                 ***\n***                  +-----------+    +-----------+                ***\n***                                   |           |==> Save area   ***\n***                                   +-----------+                ***\n***                                   |           |==> ATTECB      ***\n***                                   +-----------+                ***\n***   * ATTUPARM is the user's own parm.  It can contain anything  ***\n***     the user wants it to.  This exit expects the parm to be    ***\n***     a multiple-word list of addresses.  The addresses are the  ***\n***     address of a register save area which this exit will use   ***\n***     as its own, and the address of an ECB which this exit will ***\n***     POST.  The GETMAIN for these two data areas was already    ***\n***     done by the main program.                                  ***\n***                                                                ***\n***  ** The TAIE is mapped by IKJTAIE and contains the input       ***\n***     message length, input TGET return code, interruption       ***\n***     address, and the contents of registers 0-15 at the         ***\n***     time of the interrupt.  (It is not used by this exit.)     ***\n***                                                                ***\n***             TAIE                                               ***\n***             +-----+--+--+                                      ***\n***          +0 |Len. |RC|  |                                      ***\n***             +-----+--+--+                                      ***\n***          +4 |Int. Addr  |                                      ***\n***             +-----------+                                      ***\n***          +8 |64 bytes   |                                      ***\n***             |containing |                                      ***\n***             |contents of|                                      ***\n***             |R0-R15, in |                                      ***\n***             |this order.|                                      ***\n***             |           |                                      ***\n***            ---         ---                                     ***\n***            ---         ---                                     ***\n***             |           |                                      ***\n***             +-----------+                                      ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***          SEE DOCUMENTATION ON PREVIOUS PAGE                    ***\n***                                                                ***\n**********************************************************************\nATTNXIT  CSECT\n         STM   R14,R12,12(R13)          SAVE REGISTERS\n         LR    R12,R15                  BASE REGISTER\n         USING ATTNXIT,R12                ADDRESSABILITY\n         L     R15,8(0,R1)              R15 POINTS TO ATTUPARM\n         L     R15,0(0,R15)             R15 POINTS TO SAVE AREA\n         ST    R15,8(0,R13)             OWN S.A. ADDR TO CALLER'S S.A.\n         ST    R13,4(0,R15)             CALLER'S S.A. ADDR TO OWN S.A.\n         LR    R13,R15                  R13 POINTS TO OWN S.A.\n*\n         LR    R2,R1                    SAVE CONTENTS OF R1\n         L     R3,8(0,R2)               R3 POINTS TO ATTUPARM\n         L     R3,4(0,R3)               R3 POINTS TO ECB\n         POST  (R3)                     POST THE ECB\n*\nATTNEND  XR    R15,R15                  CLEAR RETURN CODE TO 00\n         L     R13,4(0,R13)             RESTORE R13\n         LM    R0,R12,20(R13)           RESTORE R0-R12\n         L     R14,12(0,R13)            RESTORE R14\n         BR    R14                      RETURN\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEUPUPH": {"ttr": 7174, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*  author=cah0  reviewer=cah0  09/11/86   category=manage\n*\n)F FUNCTION -\n\n    The PUP command invokes the PDS Update Utility functions for\n    controlled update of partitioned datasets.\n\n)X SYNTAX -\n\n        PUP\n\n      ALIAS    - none\n      DEFAULTS - n/a\n      REQUIRED - n/a\n\n)O OPERANDS -\n    The PUP command has no operands.\n\n)S SUBCOMMANDS -\n    The PUP command has the following subcommands:\n\n     HELP      - Execute the HELP facility.\n     STATS     - Display info about the Panvalet and PDS members.\n      STATUS   - Same as STATS.\n     UPDATE    - Update the PDS member and make a backup Panvalet copy.\n      ADD      - Same as UPDATE.\n      CHANGE   - Same as UPDATE.\n     ALIAS     - Create an alias entry for a member of a PDS.\n     DELETE    - Delete a PDS member, or a PDS alias entry.\n     BACKUP    - Make a backup Panvalet member from a PDS member.\n     RESTORE   - Copy a member from the Panvalet library into the PDS.\n     END       - Terminate the PUP command.\n     TSTATS    - Display info with the PANINDEX and PDS commands.\n      TSTATUS  - Same as TSTATS.\n     ABEND0C1  - Cause a S0C1 ABEND for testing.\n\n)M\n))PDU0001I - Function completed (CC=nnnn)\n\n    This signals completion of the PDS Update Utility function.  The\n    completion codes (nnnn) are:\n\n    0000 - Normal completion\n    0012 - One of the conditions listed below was encountered:\n\n      Panvalet directory search (GTEUA10) -\n       1.  Directory/comment for current entry is returned, but next\n           name could not be computed because the current name is too\n           high (e.g. current: NAME99).\n       2.  Failure to open or close the Panvalet library.  Any\n           returned information is unreliable.\n\n      Extract/generate ISPF statistics (GTEUA30) -\n       1.  DSORG of PDS not PO or POU\n       2.  RECFM of PDS not F, FB, FA, or FBA\n       3.  LRECL of PDS not 80\n       4.  BLKSIZE of PDS less than 80\n       5.  Not enough storage for FIND of directory entry.\n       6.  I/O error during FIND of directory entry.\n\n      PCOMPARE against Panvalet member (GTEUA40) -\n       1.  Input name was shorter than 3 characters.\n\n      Create Panvalet comment from ISPF stats (GTEUA50) -\n       1.  Input date out of range (0-365/366).\n\n      Invoke program PAN#1 for update function (GTEUA60) -\n       1.  Error returned from PAN#1.\n       2.  Input name was shorter than 3 characters.\n\n      Update PDS member and/or directory entry (GTEUA70) -\n       1.  RECFM of seq file not F, FB, FA, or FBA\n       2.  LRECL of seq file not 80\n       3.  BLKSIZE of seq file less than 80\n       4.  Not enough storage for I/O operation, or FREEMAIN for the\n           storage was unsuccessful.\n       5.  STOW operation failed because the directory was out of\n           space.\n       6.  DDNAME for PDS not allocated.\n       7.  Failure to enqueue or dequeue the dataset name.\n       8.  DELETE member name is not in PDS.\n       9.  ALIAS member already exists in PDS.\n\n      Create ISPF statistics from Panvalet comment (GTEUA80) -\n       1.  The update was not made because the member did not already\n           exist in the PDS.\n\n      Display PDS and Panvalet statistics (GTEUA10) -\n       1.  The member was not found in the PDS.\n       2.  A member with a matching name pattern was not found in the\n           Panvalet library.\n\n))PDU0002I - Type in subcommand:\n\n    This is a prompt to enter the next PUP subcommand.\n\n=UPDATE=CHANGE=ADD\n)F FUNCTION -\n    The UPDATE subcommand executes the UPDATE function of the PDS\n    Update utility.  It copies data from an input sequential dataset,\n    or from a member of an input PDS, into the output PDS and also\n    creates a backup copy in the Panvalet library.  UPDATE creates\n    ISPF-format statistics in both the PDS and Panvalet library.\n    UPDATE also is used for ADDs and CHANGEs.\n\n    Note - When a PDS member which has an alias is UPDATEd or\n           RESTOREd, the old alias will still be associated with\n           the old version of the member.  The old version of the\n           alias should be DELETEd with the DELETE subcommand,\n           then reassigned with the ALIAS subcommand.\n\n)X SYNTAX -\n        UPDATE  pds-dsname(pds-member)  WITH(input-dsn)\n                                        FROM(input-dsn)\n                                       USING(input-dsn)\n\n    ALIASES  - ADD, CHANGE\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member), input-dsn\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS to be updated, and the 1-8\n    character member name.\n\n))WITH(input-dsn)\n    The name of the input datset which contains the updated version\n    of the member.  Input-dsn may be a sequential dataset or a member\n    of a partitioned dataset.  Input-dsn must have 80-byte, fixed-\n    length logical records.\n\n))FROM\n    Synonym for the WITH operand.\n\n))USING\n    Synonym for the WITH operand.\n\n=BACKUP\n)F FUNCTION -\n    The BACKUP subcommand executes the BACKUP function of the PDS\n    Update utility.  It makes a new Panvalet backup copy of the PDS\n    member.\n\n)X SYNTAX -\n        BACKUP  pds-dsname(pds-member)\n\n    ALIASES  - none\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member)\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS, and the 1-8 character name\n    of the member to be backed up.\n\n=RESTORE\n)F FUNCTION -\n    The RESTORE subcommand executes the RESTORE function of the PDS\n    Update utility.  It is used to copy a back-level version of the\n    member from the Panvalet library to the PDS.\n\n    Note - When a PDS member which has an alias is UPDATEd or\n           RESTOREd, the old alias will still be associated with\n           the old version of the member.  The old version of the\n           alias should be DELETEd with the DELETE subcommand,\n           then reassigned with the ALIAS subcommand.\n\n)X SYNTAX -\n        RESTORE  pds-dsname(pds-member)  WITH  VERSION(pan-suffix)\n                                         FROM\n                                        USING\n\n    ALIASES  - none\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member), pan-suffix\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS to be updated, and the 1-8\n    character member name.\n\n))WITH\n    This operand is not required.  It is provided in order to make the\n    subcommand more readable.\n\n))FROM\n    Synonym for the WITH operand.\n\n))USING\n    Synonym for the WITH operand.\n\n))VERSION(pan-suffix)\n    The two-digit suffix, 00-99, of the name of the Panvalet member\n    from which the restore will take place.\n\n=DELETE\n)F FUNCTION -\n    The DELETE subcommand executes the DELETE function of the\n    PDS Update utility.  It DELETEs the member from the PDS, but\n    does not delete backup copies from the Panvalet library.\n\n    Note - When a PDS member which has an alias is UPDATEd or\n           RESTOREd, the old alias will still be associated with\n           the old version of the member.  The old version of the\n           alias should be DELETEd with the DELETE subcommand,\n           then reassigned with the ALIAS subcommand.\n\n           When a PDS member which has an alias is DELETEd, the\n           old alias will still be associated with the old\n           version of the member.  The old version of the alias\n           also should be DELETEd with the DELETE subcommand.\n\n)X SYNTAX -\n        DELETE  pds-dsname(pds-member)\n\n    ALIASES  - none\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member)\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS to be updated, and the 1-8\n    character member name.\n\n=ALIAS\n)F FUNCTION -\n    The ALIAS subcommand executes the ALIAS function of the PDS\n    Update utility.  It assigns an additional, alternate name\n    (alias) to a member of a PDS.  ALIAS has no effect on the\n    backup copies in the Panvalet library.\n\n    Note - When a PDS member which has an alias is UPDATEd or\n           RESTOREd, the old alias will still be associated with\n           the old version of the member.  The old version of the\n           alias should be DELETEd with the DELETE subcommand,\n           then reassigned with the ALIAS subcommand.\n\n           When a PDS member which has an alias is DELETEd, the\n           old alias will still be associated with the old\n           version of the member.  The old version of the alias\n           also should be DELETEd with the DELETE subcommand.\n\n)X SYNTAX -\n        ALIAS  pds-dsname(pds-member)  alias-name\n\n    ALIASES  - none\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member), alias-name\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS to be updated, and the 1-8\n    character member name.\n\n  alias-name\n    The additional, alternate name to be assigned for 'pds-member'.\n\n=STATS=STATUS\n)F FUNCTION -\n    The STATS subcommand displays statistics about the members of\n    a PDS and Panvalet library.\n\n)X SYNTAX -\n        STATS pds-dsname(pds-member)\n\n    ALIASES  - STATUS\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member)\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS to be displayed, and the 1-8\n    character member name.\n\n=END\n)F FUNCTION -\n    The END subcommand terminates the PUP command.\n\n)X SYNTAX -\n        END\n\n    ALIAS    - none\n    REQUIRED - n/a\n    DEFAULTS - n/a\n\n)O OPERANDS -\n    There are no operands.\n\n=TSTATS=TSTATUS\n)F FUNCTION -\n    The TSTATS subcommand executes the TSO commands 'PANINDEX' and\n    'PDS' to display statistics about a member.\n\n)X SYNTAX -\n        TSTATS pds-dsname(pds-member)\n\n    ALIASES  - TSTATUS\n    DEFAULTS - none\n    REQUIRED - pds-dsname(pds-member)\n\n)O OPERANDS -\n  pds-dsname(pds-member)\n    A 1-44 character name of the PDS to be displayed, and the 1-8\n    character member name.\n\n=ABEND0C1=ABEND\n)F FUNCTION -\n    The ABEND0C1 subcommand causes a System 0C1 ABEND for\n    testing.  The PUP command will keep running, however\n    the return code (&LASTCC in a CLIST) will be set to 4.\n\n)X SYNTAX -\n        ABEND0C1\n\n    ALIAS    - none\n    REQUIRED - n/a\n    DEFAULTS - n/a\n\n)O OPERANDS -\n    There are no operands.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT298/FILE298.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT298", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}