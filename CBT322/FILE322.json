{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011750000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE322.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE322.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xbf\\x84'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02s\\x00\\r\\x02t\\x00\\x02\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x08\\x04o\\x01\\x08\\x04o\\x03A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2008-02-15T00:00:00", "modifydate": "2008-02-15T03:41:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-476"}, "text": "REGULAR CBT TAPE - VERSION 476    FILE:  322\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT476.FILE322\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 20 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,067 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/15/08    03:41:39    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOCREXW": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 /\\x00\\x99 /\\x15\\x11\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-21T00:00:00", "modifydate": "1999-07-21T15:11:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": " The documentation for the REXXWAIT program is contained in the code.\n\n Lionel B. Dyck\n Systems Software Lead\n Kaiser Permanente Information Technology\n 25 N. Via Monte Ave\n Walnut Creek, Ca 94598\n\n Phone:   (925) 926-5332\n Fax:     (925) 926-5292\n\n E-Mail:    Lionel.B.Dyck@kp.org\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOCSLEJ": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x08\\x8f\\x00\\x98\\x08\\x9f\\x00\\x06\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-03-29T00:00:00", "modifydate": "1998-03-30T00:06:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "This is a TSO CLIST or REXX command to delay execution of whatever\nwas executing for a certain number of seconds.  E.G.\n\n       SLEEP  5\n\nmeans wait for 5 seconds.  A la the VM Command SLEEP.\n\nThis command was submitted to the CBT Tape by John Kalinich, and\nwas written by\n\n    (c) Hans Joolen\n        Delft University of Technology\n        The Netherlands\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOCSLES": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&O\\x00\\x99&O\\x15A\\x00:\\x00:\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-21T00:00:00", "modifydate": "1999-09-21T15:41:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "SBGOLOB"}, "text": "REXX Function to wait for a specified time\n------------------------------------------\n\n1.0 Installation of SLEEP\n\n    Supplied Material :\n    README.TXT    -  This file\n    SLEEP.TXT     -  Assembler source code for the SLEEP function\n\n    (a) File transfer the SLEEP.TXT file to the mainframe host\n        using ASCII-EBCDIC translation.\n\n    (b) Assemble and link SLEEP into a load library that is\n        available to your TSO userid. Use the following\n        linkedit attributes :\n           AMODE(31)\n           RMODE(ANY)\n           RENT\n           REUS\n           AC(0)\n\n2.0 Using SLEEP\n\n    The program will wait for a specified amount of seconds. The number\n    of seconds to wait for is passed as a parameter to the function\n    by the invoking REXX Exec. If no parameter is passed, a default of\n    10 seconds is used. The maximum specification is 99999 seconds.\n\n    Syntax :\n\n        rcode = SLEEP(secs)\n\n    Keywords :\n\n        RCODE\n          The return code from the SLEEP function. This can be one of\n          the following values :\n            0  - Successful execution of the function\n           -1  - Error in the parameter passed. Verify that the\n                 seconds passed is numeric and between 1 and 99999.\n\n        SECS\n          The number of seconds to wait for. This value can be between 1 and\n          99999. If not specified, SLEEP will use a default value of 10.\n\n    Example :\n\n      rcode = SLEEP(60)  /* Wait for a minute */\n\n\n\n\n\nRob Scott\nScott Enterprise Consultancy Ltd\n\nWebsite : www.secltd.co.uk\nEmail   : rob@secltd.co.uk\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOCSYSL": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\x10T\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T10:54:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Reply-To:     TSO REXX Discussion List <TSO-REXX@BITNIC.CREN.NET>\nSender:       TSO REXX Discussion List <TSO-REXX@BITNIC.CREN.NET>\nFrom:         Roger Lacroix <roger.lacroix@CANREM.COM>\nOrganization: CRS Online  (Toronto, Ontario)\nSubject:      SLEEP\nTo:           Multiple recipients of list TSO-REXX <TSO-REXX@BITNIC.CREN.NET>\n\nHT>Sender: TSO REXX Discussion List <TSO-REXX@BITNIC.BITNET>\nHT>From: Bill Harvey <HARVEY@WUVMD.BITNET>\n\nHT>Is there any kind of SLEEP or WAIT command that can be executed from a\nHT>REXX program to cause it to pause for a period of time?  I'm thinking\nHT>of something like VM's CP SLEEP command...\n\n\nI wrote an MVS TSO assembler routine to do the job (see below).\nCompile and link the code below and you should be a happy camper <grin> .\n\nHope this helps\nRoger...\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOCWAIT": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\t\\x16\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T09:16:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "Please find attached a copy of our program. TSOWAIT\n\n\nI hope it can be useful for other people and please feel free to change\nit were required.\n\n\n*\n*\n*\n*\n*\tMet vriendelijke Groet/Mit freundliche Gruss/Kind regards\n\nWim Hondorp\n\nAkzo Nobel Information Services\ndept. OOC\nP.o. Box 9300\n6800 SB Arnhem\nThe Netherlands\n\nPhone: ++31 - 26 3 66 4991\nFax: ++31 - 26 3 66 2929\n\nE-mail: Wim.Hondorp@akzonobel.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE322": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x08\\x04o\\x01\\x08\\x04o\\x03A\\x00\\x19\\x00\\x19\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2008-02-15T00:00:00", "modifydate": "2008-02-15T03:41:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "CBT-476"}, "text": "//***FILE 322 is from several sources on the Internet, and          *   FILE 322\n//*           contains programs to suspend execution of a CLIST     *   FILE 322\n//*           or REXX exec under TSO, for a given amount of time,   *   FILE 322\n//*           similar to the VM CP command called 'SLEEP'.          *   FILE 322\n//*                                                                 *   FILE 322\n//*           INCLUDED ARE:                                         *   FILE 322\n//*                                                                 *   FILE 322\n//*           TSOWAIT  -  from Wim Hondorp                          *   FILE 322\n//*                                                                 *   FILE 322\n//*           SLEEPJ   -  from Hans Joolen                          *   FILE 322\n//*                                                                 *   FILE 322\n//*           SLEEPR   -  from Gary Scarcella                       *   FILE 322\n//*                                                                 *   FILE 322\n//*           SLEEPS   -  from Rob Scott                            *   FILE 322\n//*                                                                 *   FILE 322\n//*           SYSSLEEP -  from Roger Lacroix                        *   FILE 322\n//*                                                                 *   FILE 322\n//*           REXXWAIT -  from Lionel Dyck                          *   FILE 322\n//*                                                                 *   FILE 322\n//*           ILBOWAT0 -  from Joseph Caughman                      *   FILE 322\n//*                                                                 *   FILE 322\n//*       There are enough ideas included in these programs, so     *   FILE 322\n//*       that if you need something that's a little different,     *   FILE 322\n//*       you can probably program it yourself.                     *   FILE 322\n//*                                                                 *   FILE 322\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BACK": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\t\\x12\\x00\\x1b\\x00_\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T09:12:00", "lines": 27, "newlines": 95, "modlines": 0, "user": "SBGOLOB"}, "text": "         MACRO\n&NAME    BACK  &CC=\n         GBLA  &XYZ\n&NAME    DS    0H\n         AIF   ('&XYZ' EQ '0').VERDER\n         SPACE\n         CLOSE PDUMPOS\n         SPACE\n.VERDER  ANOP\n         LR    1,13 .                  *LOAD ADR SAVEAREA\n         L     13,4(13) .              *LOAD ADR.HIGER SAVEAREA\n  AIF   ('&CC' EQ '(RF)' OR '&CC' EQ '(15)' OR '&CC' EQ '(R15)').R15\n         LA    0,72(0,0) .             *LOAD LENGTH\n         SVC   10 .                    *ISSUE FREEMAIN\n         LM    14,12,12(13) .          *RESTORE REGISTERS\n         AIF   ('&CC' EQ '').EXIT      *TEST CONDITIONCODE\n         LA    15,&CC .                *LOAD CONDITIONCODE\n         AGO   .EXIT\n.R15     ANOP\n         ST    15,16(13) .             *SAVE RET. CODE IN HIGHER SA\n         LA    0,72(0,0) .             *LOAD LENGTH\n         SVC   10 .                    *ISSUE FREEMAIN\n         LM    14,12,12(13) .          *RESTORE REGISTERS\n.EXIT    ANOP\n         BCR   15,14 .                 *RETURN TO CALLER\n         LTORG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BPXBATCH": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01!/\\x01\\x01!/\\x14R\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-07-31T00:00:00", "modifydate": "2001-07-31T14:52:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "WSBG"}, "text": "Date:    Fri, 4 May 2001 09:33:02 -0400\nFrom:    \"Conway, Steven\" <Steven.Conway@CA.COM>\nSubject: Re: Help with Timer/Wait program\nMIME-Version: 1.0\nContent-Type: text/plain; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 8bit\n\n\nTry this step in a batch job.  I use it to halt a job stream for a time.\n\n//BATCH  EXEC PGM=IKJEFT01,DYNAMNBR=150\n//STDOUT   DD SYSOUT=*\n//STDERR   DD SYSOUT=*\n//SYSPROC  DD DSN=SYS1.SBPXEXEC,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\n BPXBATCH pgm /bin/sleep 1h20m\n/*\n\nAnother format for the control card, just in seconds:\n BPXBATCH pgm /bin/sleep 120\n\nSteven Conway\nComputer Associates\nDevelopment Programmer\ntel: +1 703 709-4401\nfax: +1 703 708-3659\nsteven.conway@ca.com <mailto:steven.conway@ca.com>\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENTER": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\t\\x12\\x00D\\x00D\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T09:12:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "SBGOLOB"}, "text": "         MACRO\n&NAME    ENTER &A,&B,&C,&TRACEN=,&REG=\n         GBLC  &TRACE\n         LCLA  &Z\n         LCLA  &Y\n&NAME    CSECT                         ********************************\n         STM   14,12,12(13)            SAVE REG CALLPROG  *\n         AIF   (N'&A GT 0).A                                  *\n         AGO   .E                                             *\n.D       AIF   (N'&B GT 0).B                                  *\n         AIF   (N'&A EQ 0 AND N'&C GT 0).MNOTE1     EN MNOTE2\n         AIF   (N'&C GT 0).MNOTE2\n         AGO   .H\n.G       AIF   (N'&A GT 0).K\n         MNOTE 'BASEREGISTER 12 ASSUMED'       *\n         AGO   .N\n.F       AIF   (N'&C GT 0).P\n         AGO   .G\n.P       AIF   (N'&A GT 0).Q\n         AGO   .QQ\n.A       BALR  &A,0                    *ESTABLISH BASEREGISTER     *\n         USING *,&A                    *ISSUE DISPLACEMENT         *\n         AGO   .D\n.B       USING *+4096,&B               *ISSUE DISPLACEMENT    *\n         AGO   .F\n.E       ANOP\n&Z       SETA  12\n         BALR  &Z,0                    ESTABLISH BASEREGISTER     *\n         USING *,&Z                    *ISSUE DISPLACEMENT        *\n         AGO   .D\n.K       ANOP\n&Z       SETA  &A\n.N       LA    &B,2048(&Z)             *LOAD BASEREGISTER  *\n         LA    &B,2048(&B)             *LOAD BASEREGISTER  *\n         AGO   .H\n.Q       ANOP\n&Z       SETA  &A\n.QQ      ANOP\n&Y       SETA  &B\n         AGO   .W\n.MNOTE1  MNOTE 'FIRST  BASEREG 12 ASSUMED'       *\n         AGO   .X\n.MNOTE2  ANOP\n&Z       SETA  &A\n.X       MNOTE 'SECOND BASEREG 11 ASSUMED'       *\n&Y       SETA  11\n         USING *+4096,&Y               ISSUE DISPLACEMENT   *\n.W       USING *+8192,&C               ISSUE DISPLACEMENT   *\n         LA    &Y,2048(&Z)            *LOAD  BASEREGISTER   *\n         LA    &Y,2048(&Y)            *LOAD  BASEREGISTER   *\n         LA    &C,2048(&Y)            *LOAD  BASEREGISTER   *\n         LA    &C,2048(&C)            *LOAD  BASEREGISTER   *\n.H       ANOP\n         LA    0,72(0,0)               *LOAD LENGTH          *\n         LNR   1,0                     *ANY NEG VALUE IN REG 1     *\n         SVC   10                      *ISSUE GETMAIN               *\n         ST    1,8(13)                 *STORE FORWARD POINTER  *\n         ST    13,4(1)                 *STORE BACKARD POINTER  *\n         L     0,20(13)                *RESTORE REGISTER 0    *\n         L     1,24(13)                *RESTORE REG 1         *\n         L     13,8(13)                SET UP SAVEAREA POINTER*\n&TRACE   SETC  '&TRACEN'\n         AIF   ('&TRACE' NE 'YES').A98\n         OSPDUMP\n.A98     ANOP\n         AIF   ('&REG' EQ 'NO').A99\n         REGEQU\n.A99     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ILBOWAT0": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x08\\x04o\\x01\\x08\\x04o\\x036\\x002\\x002\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-02-15T00:00:00", "modifydate": "2008-02-15T03:36:44", "lines": 50, "newlines": 50, "modlines": 0, "user": "SBGOLOB"}, "text": "From:       \"Joe Caughman\" <joe.caughman@gmail.com>\nDate:       Thu, 14 Feb 2008 18:58:58 -0600\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam\n\nI found a neat trick with cobol that you probably already know\nabout.  Have you ever heard of the ILBOWAT0 command in old school\ncobol?  It allows you to pause the execution of a program for a\nset number of seconds.  It fortunately still works in cobol for\nmvs and such but is no longer documented.  The neat thing is that\nI can use it in rexx, by calling a cobol program with the\ncommand, and allow my rexx program to pause for 1 second\nintervals.  In my new shop, they don't grant authorization to\nOpen MVS Linux commands which shut me out of using the sleep\nfunction that I need in Jumplist.\n\nJoe\n\n\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. WAIT1.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  DELAY-AMT               PIC S9(9) COMP VALUE 1.\n       01  ILBOWAT0                PIC X(8) VALUE 'ILBOWAT0'.\n       LINKAGE SECTION.\n       PROCEDURE DIVISION.\n       MAIN SECTION.\n          CALL ILBOWAT0 USING DELAY-AMT\n          GOBACK.\n\nCompile using 24 bit to a known object lib\n\nSLEEP1\n/* rexx */                                                 your.blink\nor clink\n\"ISPEXEC LIBDEF ISPLLIB DATASET ID('caughma.unit.blink') STACK\"\n\"ISPEXEC SELECT PGM(WAIT1)\"\n\"ISPEXEC LIBDEF ISPLLIB\"\nreturn\n\n\n/* REXX */\nDO II = 1 TO 10\n   CALL SLEEP1\n   SAY II\n   END\n\n", "mimetype": "message/rfc822", "datatype": "ebcdic", "extension": ".eml"}, "OSPDUMP": {"ttr": 538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\t4\\x00)\\x00)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T09:34:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "SBGOLOB"}, "text": "         MACRO\n&NAME    OSPDUMP &STORAGE=,&LIST=\n         GBLA  &XYZ\n         GBLC  &TRACE\n         AIF   ('&TRACE' NE 'YES').A99\n         AIF   (&XYZ NE 0).A01\n***  DCB EN OPEN MACRO-EXPANSIES VOOR OSPDUMP ***\n*    - - - - - - - - - - - - - - - - - - - -    *\n         B     PDUMPOS1\nPDUMPOS  DCB   DDNAME=SYSPDUMP,DSORG=PS,MACRF=(W),                     *\n               RECFM=VBA,BLKSIZE=882,LRECL=125\n         SPACE\nPDUMPOS1 OPEN  (PDUMPOS,(OUTPUT))\n&XYZ     SETA  &XYZ+1\n.A01     AIF   (T'&STORAGE NE 'O').A02\n         AIF   (T'&LIST NE 'O').A03\n         AGO   .A04\n.A02     ANOP\n         SPACE\n&NAME    SNAP  DCB=PDUMPOS,SDATA=CB,PDATA=REGS,ID=&XYZ,                *\n               STORAGE=&STORAGE\n&XYZ     SETA  &XYZ+1\n         MEXIT\n.A03     ANOP\n         SPACE\n&NAME    SNAP  DCB=PDUMPOS,SDATA=CB,PDATA=REGS,ID=&XYZ,                *\n               LIST=&LIST\n&XYZ     SETA  &XYZ+1\n         MEXIT\n.A04     AIF   (&XYZ LE 1).A05\n         AGO   .A06\n.A05     MEXIT\n.A06     ANOP\n         SPACE\n         CLOSE (PDUMPOS)\n&XYZ     SETA  &XYZ-&XYZ\n         MEXIT\n.A99     ANOP\n&NAME    DS    0H\n         CNOP  0,4            GEEN SNAP MACRO-EXPANSIE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REXEXMPL": {"ttr": 540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\x10G\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T10:47:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "/* rexx */\n\nDO i=1 to 10\n   SAY TIME()\n   \"SYSSLEEP\"     /* sleep for 15 seconds */\nEND\n\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REXXWAIT": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 /\\x00\\x99 /\\x14F\\x00\\xcf\\x00\\xcf\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-21T00:00:00", "modifydate": "1999-07-21T14:46:00", "lines": 207, "newlines": 207, "modlines": 0, "user": "SBGOLOB"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n* Name:        REXXWAIT                                               *\n*                                                                     *\n* Function:    REXX Function to wait for hhmmssth                     *\n*                                                                     *\n* Syntax:      X=REXXWAIT(hhmmssth)                                   *\n*                                                                     *\n*              Where:                                                 *\n*                                                                     *\n*              hhmmssth is:                                           *\n*              hh = hours 01 to nn                                    *\n*              mm = minutes 00 to 59                                  *\n*              ss = seconds 00 to 59                                  *\n*              t  = tenths of a second 0-9                            *\n*              h  = hundredths of a second 0-9                        *\n*                                                                     *\n*              Default is to wait for 15 seconds                      *\n*---------------------------------------------------------------------*\n* Sample REXX Usage:                                                  *\n*                                                                     *\n*  /* rexx */\n*  arg val\n*  stime = time()\n*  x=rexxwait(val)\n*  etime = time()\n*  say \"Start:\" stime \"End:\" etime \"X:\" x\n*                                                                     *\n*---------------------------------------------------------------------*\n* Link Edit information:     NON-REENTRANT                            *\n*---------------------------------------------------------------------*\n* Return Codes:                                                       *\n*                                                                     *\n*         0    processing has completed successfully                  *\n*         8    invalid parm                                           *\n*        24    IRXEXCOM bad return code                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n* Author:      Lionel B. Dyck                                         *\n*              Kaiser Permanente                                      *\n*              Walnut Creek, CA 94 98                                 *\n*              (925) 926-5332                                         *\n*              Internet: lionel.b.dyck@kp.org                         *\n*---------------------------------------------------------------------*\n* HISTORY:                                                            *\n*                                                                     *\n*        07/22/99  -  Created                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nREXXWAIT CSECT\nREXXWAIT AMODE 31\n*----------------------------------------------------------*\n*        Housekeeping occurs here                          *\n*----------------------------------------------------------*\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING REXXWAIT,R12        INFORM ASSEMBLER\n         B     STARTIT\n         DC    CL8'REXXWAIT'\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\nSTARTIT  DS    0H\n         SPACE 2\n         LA    R0,72+1000          get savearea plus workarea\n         GETMAIN R,LV=(0)\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R2,R1               SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R2              SET SAVEAREA POINTER\n         USING WORK,R13            USING ON WORKAREA VIA R13\n         EJECT\n*---------------------------------------------------------------------*\n*        PROCESS THE INPUT PARAMETER LIST                             *\n*---------------------------------------------------------------------*\n         LR    R5,R0               -> ENVIRONMENT BLOCK\n         ST    R5,ENVBADDR         Save Environment Block Address\n         USING ENVBLOCK,R5\n         L     R5,ENVBLOCK_IRXEXTE -> EXTERNAL VECTOR TABLE\n         DROP  R5\n         USING IRXEXTE,R5\n         L     R5,IRXEXCOM         LOAD IRXEXCOM EPA\n         ST    R5,EXCOM            SAVE IRXEXCOM EPA\n         DROP  R5\n         LR    R4,R1               -> EFPL\n         USING EFPL,R4             ESTABLISH ADDRESSABILITY TO EFPL\n         L     R5,EFPLEVAL         -> EVAL BLOCK ADDRESS POINTER\n         L     R5,0(0,R5)          -> EVAL BLOCK\n         ST    R5,EVALADDR         SAVE IT'S ADDRESS\n         L     R4,EFPLARG          -> ARGUMENT LIST\n         DROP  R4\n*\n         LTR   R4,R4               ANY ARGUMENT LIST ?\n         BZ    SETDEF              NO\n*\n         USING ARGTABLE_ENTRY,R4   ESTABLISH ADDRESSABILITY TO ARG\n         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY REAL ARGUMENTS\n         BE    SETDEF              NO - SO EXIT\n         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT\n         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH\n         C     R3,=F'08'           Test length\n         BNE   EXIT8               Invalid parm\n         BCTR  R3,R0               LESS 1 FOR MVC\n         EX    R3,MOVETIME         MOVE THE TIME\n         B     START\nSETDEF   MVC   WAITTIME(8),=CL8'00001500'\n         EJECT\n*---------------------------------------------------------------------*\n*        INITIALIZE ALL WORK AREAS FROM OUR CONSTANTS                 *\n*---------------------------------------------------------------------*\nSTART    DS    0H\n*\n         STIMER WAIT,DINTVL=WAITTIME\n         SPACE 2\n         B     EXIT0\n         EJECT\n*---------------------------------------------------------------------*\n*        ALL OF THE EXIT ROUTINES FOLLOW                              *\n*---------------------------------------------------------------------*\nSETRC    DS    0H\n         L     R11,EVALADDR\n         USING EVALBLOCK,R11\n         MVC   EVALBLOCK_EVLEN(4),=A(2)\n         MVC   EVALBLOCK_EVDATA(2),RC\n         DROP  R11\n         SPACE 2\n         LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         LA    R15,0                                        $1/95$\n         BR    R14\n*---------------------------------------------------------------------*\nEXIT0    DS    0H\n         MVC   RC,=C'00'           SET RC TO ZERO\n         B     SETRC\nEXIT8    DS    0H\n         MVC   RC,=C'08'           SET RC TO 8\n         B     SETRC\nEXIT24   DS    0H\n         MVC   RC,=C'24'           SET RC\n         B     SETRC\n         EJECT\n*---------------------------------------------------------------------*\n*        EXECUTED INSTRUCTIONS                                        *\n*---------------------------------------------------------------------*\nMOVETIME MVC   WAITTIME(0),0(R2)       ** EXECUTED\n         SPACE 2\n*---------------------------------------------------------------------*\n*        LITERAL POOL                                                 *\n*---------------------------------------------------------------------*\n         LTORG\n         space 2\n*---------------------------------------------------------------------*\n*        WORK AREA DSECTS                                             *\n*---------------------------------------------------------------------*\nWORK     DSECT\nSAVE     DS    18F\nEVALADDR DS    F\nEXCOM    DS    A                   ADDRESS OF IRXEXCOM LOAD MODULE\nENVBADDR DS    A                   Environment Block Address\nWAITTIME DS    CL8                 Time value\nRC       DS    XL2                 RETURN CODE\n         EJECT\n         IRXEFPL DSECT=YES\n         EJECT\n         IRXARGTB\n         EJECT\n         IRXSHVB\n         EJECT\n         IRXEVALB\n         EJECT\n         IRXEXTE\n         EJECT\n         IRXENVB\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLEEPJ": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x8f\\x00\\x98\\x08\\x8f#S\\x00>\\x00>\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-29T00:00:00", "modifydate": "1998-03-29T23:53:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "SBGOLOB"}, "text": "         LCLC  &ID\n&ID      SETC  'SLEEP V1R0 / J.J. JOOLEN /'.'&SYSDATE'.' '.'&SYSTIME'.'*\n                - SUSPEND EXECUTION'\n*\n*   Calling sequence:\n*      From TSO/E Clist or Rexx:   'SLEEP   nnnn'\n*                                  nnnn = nr. of seconds to sleep\n*\n*   (c) Hans Joolen\n*       Delft University of Technology\n*       The Netherlands\n*\n*\nSLEEP    CSECT ,\n         SAVE  (14,12),,'&ID'\n         LR    12,15\n         USING SLEEP,12\n*   Chain savearea's\n         LA    11,SVA\n         ST    11,8(,13)\n         ST    13,4(,11)\n         LR    13,11\n*   Process environment for calling TSO/E services\n         LR    2,1               Command processor parameter list\n         USING CPPL,2\n         L     1,=A(PARSROOM)    Parse parameter list\n         USING PPL,1             Structure from DSECT\n         MVC   PPLUPT,CPPLUPT    User profile table\n         MVC   PPLECT,CPPLECT    Environment control table\n         MVC   PPLECB,=A(ECB)    Command Processor's ECB\n         MVC   PPLPCL,=A(PARSLIST)\n         MVC   PPLANS,=A(PDLPTR) Answer area for IKJPARS\n         MVC   PPLCBUF,CPPLCBUF  Command buffer\n         MVC   PPLUWA,=A(0)      User work area (validity check rtn's)\n         DROP  2\n*   Get nr. of seconds and wait\n         LINK  EP=IKJPARS        Reg 1 contains Parse parameter list\n         L     2,PDLPTR          Get pointer to PDL (created by IKJPARS\n         USING IKJPARMD,2\n         L     3,INTVL           PDE within PDL, contains ptr to value\n         L     4,0(,3)           Fullword (because of IKJIDENT/INTEG)\n         MH    4,=H'100'         Stimer wants centiseconds\n         ST    4,0(,3)\n         STIMER WAIT,BINTVL=(3)  Sleep for specified nr. of seconds\n*   Return to calling clist\n         IKJRLSA PDLPTR          Release storage allocated by IKJPARS\n         L     13,SVA+4\n         RETURN (14,12),RC=0\n*   Scan parameter list for IKJPARS\nPARSLIST IKJPARM\nINTVL    IKJIDENT 'interval',PROMPT='nr. of seconds to sleep',INTEG\n         IKJENDP\nSVA      DC    18F'0'\nPDLPTR   DC    A(0)              Receives A(PDL) from IKJPARS\nPARSROOM DC    7A(0)             Room for parse PCL\nECB      DC    A(0)\n         LTORG ,\n         IKJCPPL ,               Command processor parameter list\n         IKJPPL ,                Parse parameter list\n         IKJECT ,                Environment control table\n         IKJUPT ,                User profile table\n         END   SLEEP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLEEPR": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x17\\x9f\\x01\\x00\\x17\\x9f\\x084\\x00 \\x00 \\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-06-27T00:00:00", "modifydate": "2000-06-27T08:34:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "WSBG"}, "text": "/*.REXX EXEC */\n/*.*******************************************************************/\n/*.TSOWAIT : WAIT/SLEEP FOR SPECIFIED NUMBER OF SECONDS              */\n/*.*******************************************************************/\n/*.FORMAT: TSOWAIT SECONDS                                           */\n/*.SECONDS MUST BE A WHOLE NUMBER, OTHERWISE DEFAULT TO 15 SECONDS   */\n/*.*******************************************************************/\n/*.USES OS/390 UNIX CALLABLE SERVICES EXTENSIONS FOR REXX            */\n/*.*******************************************************************/\nTRACE OFF\nARG PARMS\nEXITRC = 0\nSECONDS = WORD(PARMS,1)\nDEFAULT_SECONDS = 15\nIF SECONDS = '' THEN SECONDS = DEFAULT_SECONDS\nIF DATATYPE(SECONDS,\"WHOLE NUMBER\")\n    THEN SECONDS = ABS(SECONDS)\n    ELSE SECONDS = DEFAULT_SECONDS\n/* CALL SYSCALLS 'ON' */\nIF SYSCALLS('ON') > 0\nTHEN DO\n        SAY 'UNABLE TO ESTABLISH THE UNIX SYSCALL ENVIRONMENT'\n        EXITRC = SYSCALLS('ON')\n        SIGNAL EXIT\n      END\n/* CALL TIME 'E' */\n/* SAY 'READY TO SLEEP FOR ' SECONDS 'SECONDS' */\nADDRESS SYSCALL 'SLEEP ' SECONDS\nEXITRC = RC\n/* SAY 'I WAITED 'TIME('E')' SECONDS' */\nEXIT:\nEXIT EXITRC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLEEPR$": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x17\\x9f\\x01\\x00\\x17\\x9f\\x084\\x00!\\x00A\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-06-27T00:00:00", "modifydate": "2000-06-27T08:34:00", "lines": 33, "newlines": 65, "modlines": 0, "user": "WSBG"}, "text": "Subject: Cool SLEEP program for file 322 from Gary Scarcella post\nDate: Mon, 26 Jun 2000 14:15:12 -0400\nFrom: Sam Knutson <dragon@his.com>\nTo: sbgolob@aol.com, sbgolob@attglobal.net\n\nI found this looking for something for Bruce Hewson I had filed\nit in my cool bits folder.  It would make a good additon to File\n322.\n\nSubject: Wait in REXX (without having to create/call an assembler\n         program)\n\nDate:    Mon, 24 Jan 2000 10:22:31 -0500\nFrom:    \"Scarcella, Gary V\" <ScarcellaGV@AETNA.COM>\nSubject: Wait in REXX (without having to create/call an\n         assembler program)\n\nI have a REXX program (see below) that can be used without having\nto create/call an assembler program.  The catch is that your\nOS/390 system must have UNIX Systems Services installed.  This\nallows me to call the UNIX sleep function from my REXX program.\n\nFor more details, see this IBM manual:\n\nOS/390 UNIX System Services PDF files - OS/390 Version 2 Release 6\nhttp://www.s390.ibm.com/os390/bkserv/r6pdf/uss.html\n\nTitle: OS/390 V2R6.0 Using REXX and OS/390 UNIX System Services\nDocument Number: SC28-1905-03\n\nGary Scarcella\nInternet address: ScarcellaGV@aetna.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLEEPS": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&O\\x00\\x99&O\\x15A\\x00\\xc4\\x00\\xc4\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-21T00:00:00", "modifydate": "1999-09-21T15:41:00", "lines": 196, "newlines": 196, "modlines": 0, "user": "SBGOLOB"}, "text": "SLEEP    TITLE 'REXX function to wait for a specified time'\n*--------------------------------------------------------------------*\n* Program Name  : SLEEP\n*\n* Language      : Assembler\n* LinkEdit Attr : RENT REUS REFR\n* AMODE         : 31\n* RMODE         : ANY\n* AC            : 00\n*\n* IBM Macros    : MODID, STORAGE, STIMER\n*\n*--------------------------------------------------------------------*\n* Program Function\n*\n* External REXX function to wait for a specified time.\n*\n* The program will wait for a specified amount of seconds. The number\n* of seconds to wait for is passed as a parameter to the function\n* by the invoking REXX Exec. If no parameter is passed, a default of\n* 10 seconds is used. The maximum specification is 99999 seconds.\n*\n* Syntax\n*\n* rcode = sleep(secs)\n*\n* Keywords\n*\n* RCODE   The return code from sleep  :  0  Success\n*                                     : -1  Parameter error\n* SECS    The number of seconds to wait for (1 - 99999)\n*\n*--------------------------------------------------------------------*\n* Registers On Entry\n*\n* R0   -  n/a\n* R1   -  Paramters passed ---> +0  REXX EFPL\n* R15  -  n/a\n*\n* Registers Used in Program\n*\n* R2   -  REXX EFPL\n* R3   -  REXX Evalblock\n* R4   -  REXX Arg Table\n* R5   -  REXX Arg passed = time in seconds\n* R6   -  Length of arg passed\n* R7   -  work\n* R8   -\n* R9   -\n* R10  -  Branch and Link\n* R11  -\n* R12  -  Base Register\n* R13  -  Savearea\n*\n* Registers On Exit\n*\n* R0   -  n/a\n* R1   -  n/a\n* R15  -  Return Code : 0 - Success\n*\n*--------------------------------------------------------------------*\n* (c) Scott Enterprise Consultancy Ltd\n*--------------------------------------------------------------------*\n* Changes\n* 01/11/1996  Rob Scott  Code Written                             V1.0\n* 15/06/1999  Rob Scott  Correct length on EVDATA for '-1'        V1.1\n*--------------------------------------------------------------------*\nSLEEP    CSECT\nSLEEP    AMODE 31\nSLEEP    RMODE ANY\n         BAKR  R14,R0                 linkage stack\n         LR    R12,R15                copy entry address to base\n         USING SLEEP,R12              address it\n         MODID ,                      eyecatcher\n         LR    R2,R1                  copy parms passed\nGETWORK  EQU   *\n         STORAGE OBTAIN,              Get the workarea storage         X\n               LENGTH=WORKLEN,        This much                        X\n               ADDR=(R13),            Address in R13                   X\n               SP=0,KEY=8,            Subpool 0 Key 8                  X\n               LOC=ANY,               Anywhere                         X\n               COND=NO                Unconditional\n         USING WORKAREA,R13           Address workarea\n         LR    R14,R13                Copy workarea address\n         L     R15,=A(WORKLEN)        Get length of workarea\n         XR    R0,R0                  Clear\n         XR    R1,R1                  Clear\n         MVCL  R14,R0                 Init to zeros\n         LA    R13,SAVEAREA           Point to savearea\n         MVC   4(4,R13),=C'F1SA'      Set Acronym\nGETPARMS EQU   *\n*-------------------------------------------------------------------*\n* Capture the standard REXX function control blocks passed via\n* R1. This includes the result (or evaluation) table and a table\n* of arguments used to invoke the function by the user.\n*-------------------------------------------------------------------*\n         MVC   UWORK(7),TIMEMASK      Move in default seconds\n         USING EFPL,R2                addr REXX func parms\n         L     R3,EFPLEVAL            addr of pointer to eval block\n         L     R3,0(R3)               REXX eval block addr\n         USING EVALBLOCK,R3           address it\n         L     R4,EFPLARG             REXX arg list\n         USING ARGTABLE_ENTRY,R4      address arg table\n         MVC   INTERVAL(8),TIMEMASK   set default time\n         CLC   0(4,R4),HEXFF          are there no arguments ?\n         BE    WAITFOR                no - use default\nGOTPARMS EQU   *\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         ICM   R6,B'1111',ARGTABLE_ARGSTRING_LENGTH\n         BZ    WAITFOR                If no parm - use default\n         C     R6,=F'5'               Bigget than 99999 seconds ?\n         BH    PARMERR                Yes - error\n         BCTR  R6,R0                  Subtract 1 for execute\n         EX    R6,ISNUMBER            Check for numbers\n         BNZ   PARMERR                non-numeric found - error\n         MVC   UWORK(7),ZEROS         Init the time field\n         LA    R1,UWORK+6             Point to the end\n         SR    R1,R6                  Subtract length of seconds\n         EX    R6,MOVESECS            Move in the seconds\nWAITFOR  EQU   *\n         PACK  PWORK(4),UWORK(7)      Pack the seconds\n         MP    PWORK(4),=PL2'100'     x 100 for BINTVL\n         CVB   R7,PACKTIME            Convert to binary\n         ST    R7,INTERVAL            and store for STIMER\n         STIMER WAIT,BINTVL=INTERVAL  Wait for the specified time\nRETURN00 EQU   *\n         BAL   R10,FREEWORK           Free the workarea and set rc\n         MVC   EVALBLOCK_EVLEN(4),=F'1'\n         MVC   EVALBLOCK_EVDATA(1),=C'0'\n         LA    R15,0\n         PR\nPARMERR  EQU   *\n         BAL   R10,FREEWORK           Free the workarea and set rc\n         MVC   EVALBLOCK_EVLEN(4),=F'2'\n         MVC   EVALBLOCK_EVDATA(2),=C'-1'\n         LA    R15,0\n         PR\n*\n*-------------------------------------------------------------------*\n* General Routines                                                  *\n*-------------------------------------------------------------------*\n*\nFREEWORK EQU   *\n         STORAGE RELEASE,             Free the workarea storage        X\n               LENGTH=WORKLEN,        This much                        X\n               ADDR=(R13),            Address in R13                   X\n               SP=0,KEY=8,            Subpool 0 Key 8                  X\n               COND=NO                Unconditional\n         BR    R10\n*\n*-------------------------------------------------------------------*\n* Executed Instructions                                             *\n*-------------------------------------------------------------------*\nISNUMBER TRT   0(0,R5),NUMBERS        Test for numbers\nMOVESECS MVC   0(0,R1),0(R5)          Move in the seconds\n*\n*-------------------------------------------------------------------*\n* Constants, Variables and DSECTs                                   *\n*-------------------------------------------------------------------*\nHEXFF    DC    X'FFFFFFFFFFFFFFFF'    hex ff\nTIMEMASK DC    CL7'0000010'           time mask (10 seconds)\nZEROS    DC    CL7'0000000'           zeros\n*\nNUMBERS  DC    256X'FF'               Translate table - Numbers\n         ORG   NUMBERS+C'0'\n         DC    10X'00'\n*\nWORKAREA DSECT\nSAVEAREA DS    18F                    SaveArea\nINTERVAL DS    F                      Time interval\nPACKTIME DS    0D                     8-byte packed time in secs\n         DS    F                      Leading zeros\nPWORK    DS    F                      Packed time field\nUWORK    DS    CL7                    Unpacked work field\nWORKLEN  EQU   *-WORKAREA\n         IRXEFPL                      REXX mapping macros\n         IRXEVALB\n         IRXARGTB DECLARE=YES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSSLEEP": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\x10G\\x00;\\x00;\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T10:47:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "SBGOLOB"}, "text": "SYSSLEEP TITLE '- Sleep X seconds'\n*      -------------------------------------------------------\n*      | Sleep  Program Routine                              |\n*      |-----------------------------------------------------|\n*      | register usage within routine                       |\n*      |  |----------input from calling rtn      <i>         |\n*      |  ||---------modified/initialized        <m>         |\n*      |  |||--------output to called rtns       <o>         |\n*      |  ||||-------returned to calling rtn     <r>         |\n*      |       r0                                            |\n*      |  i  r r1    i-parm (pgm name)          r-pgm addr   |\n*      |   m   r2    program name pointer                    |\n*      |       r3                                            |\n*      |       r4-r11 not used                               |\n*      |   m   r12   routine base register                   |\n*      |  imor r13   save area                               |\n*      |  i    r14   i-return addr                           |\n*      |  i    r15   i-entry addr                            |\n*      -------------------------------------------------------\n         SPACE 2\nSYSSLEEP CSECT\n         SAVE  (14,12),,'SYSSLEEP V1.0.0 &SYSDATE &SYSTIME'\n         LR    R12,R15\n         USING SYSSLEEP,R12\n         LR    R15,R13             old save area\n         LA    R13,SYSSLEEP@S      new save area\n         ST    R13,8(,R15)         new pointer\n         ST    R15,4(,R13)         old pointer\n         SPACE 1\n         L     R2,0(R1)            point to pgm id\n         SPACE 1\n         STIMER  WAIT,BINTVL=STIME\n         SPACE 2\nSYSSLEEP900 EQU *\n         L     R13,4(,R13)         back a save area\n         SAVE  (1)                 save program entry point\n         RETURN (14,12),T,RC=(15)\n         DROP  R12\n         SPACE 1\n         TITLE 'Constants, etc.'\nSYSSLEEP@S DC  18F'0'              save area\nSTIME      DC  F'1500'             sleep for 15 seconds\n*      -------------------------------------------------------\n*      | Literal pool                                        |\n*      -------------------------------------------------------\n         SPACE 1\n         LTORG ,\n         SPACE 1\n*      -------------------------------------------------------\n*      | Dsects, etc.                                        |\n*      -------------------------------------------------------\n         SPACE 1\n         PUSH  PRINT\n         PRINT NOGEN\n         SPACE 1\n         REGEQ PRINT=NO,CONDCODE=NO         Equate for registers\n         SPACE 1\n         POP   PRINT\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOWAIT": {"ttr": 1026, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x10\\x9f\\x15\\x12\\x00V\\x00t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-04-19T15:12:00", "lines": 86, "newlines": 116, "modlines": 0, "user": "SBGOLOB"}, "text": "TSOWAIT  ENTER\n*\n         LR    R2,R1                   SAVE PARM ADRESS\n         USING CPPL,R2                 SET ADRESSEBILITY\n*\n* SET UP ADRESSEBILITY FOR PARS\n*\n         LA    R3,MYPPL\n         USING PPL,R3\n         MVC   PPLUPT,CPPLUPT\n         MVC   PPLECT,CPPLECT\n         LA    R5,MYECB\n         ST    R5,PPLECB\n         L     R5,=V(PARM)\n         ST    R5,PPLPCL\n         LA    R5,ANSWER\n         ST    R5,PPLANS\n         MVC   PPLCBUF,CPPLCBUF\n         XC    PPLUWA,PPLUWA\n         LR    R1,R3\n*\n         CALLTSSR EP=IKJPARS\n         LTR   15,15                   CHECK RETURN-CODE\n         BZ    GOODPARS\n         LA    15,8                    SET RETURN-CODE = 8\n         B     OUT                     GOTO END\n*\nGOODPARS L     R9,ANSWER               POINT TO PARS ANSWER\n         USING IKJPARMD,R9             ADRESSIBILITY TO PDL\n*\n         LA    R5,WAITTIME             POINTER TO WAITTIME PCE\n         L     R6,0(R5)                POINT TO WAITTIME\n         L     R5,0(R6)                GET WAITTIME VALUE\n         SRA   R5,16                   SHIFT 16 BITS TO THE RIGHT\n         STH   R5,TIJD+4               STORE IT\n*******************************************************************\n* CHECK BELOW IS DONE FOR THE FOLLOWING REASON:\n*\n* IF USER ENTERS A WAITTIME VALUE OF < 10 (F.I. 7) THE RESULT\n* WILL BE THAT THE WAITTIME VALUE IN THE PROGRAM IS FILLED LIKE\n* F740 (IT SHOULD BE IN THE FORM OF F0F7.\n* THEREFORE TIJD+5 IS CHECKED FOR THE PRESENCE OF X'1111'.\n*******************************************************************\n         TM    TIJD+5,X'80'\n         BO    CHECKMAX                WAITTME RIGHT FORMAT GO CHECK\n*******************************************************************\n* IF WAITTIME WAS IN THE FORM OF F740, IT IS TRANSFORMED TO F0F7\n*******************************************************************\n         MVC   TIJD+5(1),TIJD+4        MOVE 1 BYTE\n         MVI   TIJD+4,X'F0'            AND MAKE 1ST BYTE F0\n*\nCHECKMAX CLC   TIJD+4,MAXWAIT          WAIT > 60 ?\n         BL    GOWAIT                  NO. GO WAIT\n*\n         MVI   TIJD+4,X'F6'            SET WAITTIME\n         MVI   TIJD+5,X'F0'            TO 60 SECONDS\n         LA    7,L'MAXMSG              TELL THE CALLER\n         LA    8,MAXMSG                WAITTIME SET TO DEFAULT\n         TPUT  (8),(7)\n*\nGOWAIT   STIMER WAIT,DINTVL=TIJD\n*\n         LA    15,0\nOUT      BACK  CC=(15)\n         EJECT\n         DS    2F\nTIJD     DC    XL8'F0F0F0F0F0F0F0C0'\nMAXMSG   DS    0CL240\n         DC    CL80'TSOWAIT0 : SPECIFIED WAITTIME IS TOO LARGE.      '\n         DC    CL80'MAXIMUM WAITTIME IS 60 SECONDS.                  '\n         DC    CL80'60 SECONDS WILL BE USED.                         '\nMAXWAIT  DC    X'F6F0'\nMYECB    DC    F'0'\nMYPPL    DC    7F'0'\nANSWER   DC    F'0'\nUWA      DC    F'0'\nPARSBACK DC    F'0'\n*        PRINT OFF\nPARM     IKJPARM\nWAITTIME IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,DEFAULT='05',   *\n               MAXLNTH=2\n         IKJENDP\n         IKJCPPL\n         IKJPPL\n         CVT DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT322/FILE322.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT322", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}