{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011838000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1175720, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE361.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE361.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x14\\x04'", "DS1TRBAL": "b'\\xaa\\xaa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xa9\\x00\\x00\\x02\\xaa\\x00\\x05\\x00\\x15'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$CHANGE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x12O\\x01\\x00\\x12O\\x14\\x02\\x00\\x0b\\x00\\x04\\x00\\x00\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-05-03T00:00:00", "modifydate": "2000-05-03T14:02:00", "lines": 11, "newlines": 4, "modlines": 0, "user": "CAJ7083"}, "text": "\n* JUL 1999     CHANGED PATTERNS OPTION IN CXYPSCAN TO WILDCARD FOR\n               NUMERIC(!) ALPHABETIC(@) OR ALPHANUMERIC(#) IN ADDITION\n               TO ANY(+).\n\n* MAY 2000     CHANGED DEFAULT IN CXYPSCAN TO ONLY LIST LINES THAT\n               HAVE HITS. FULL LIST CAN BE HAD WITH PARM=LISTALL OR\n               PARM=LA. JOBS WITH PARM=LISTHITS OR PARM=LH WILL STILL\n               OPERATE AS BEFORE.\n\n***FULL DOCUMENTATION FOR CXYPSCAN CAN BE FOUND IN MEMBER CXYPSDOC***\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$NOTESAM": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99\\x06\\x0f\\x00\\x99\\x06\\x9f\\t\\x19\\x00!\\x00\\x06\\x00\\x00\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-03-01T00:00:00", "modifydate": "1999-03-10T09:19:00", "lines": 33, "newlines": 6, "modlines": 0, "user": "CAJ7083"}, "text": "        SAM\n\n    HERE IS MORE MATERIAL THAT WE TALKED ABOUT. AM ASSEMBLING\n  ALL MODS WITH HI-LEVEL ASSEM PGM=ASMA90.WILL RESEND LOADLIB\n  REFLECTING THESE ASSEMBLIES. ALL MOD SIZES CHANGED A LITTLE.\n  OLD LOAD MODS WERE ASSEMBLED WITH PGM=IFOX00(CXYPSCAN AND\n  TAPESCAN) OR PGM=IEV90(ZZRELINK).\n\n       1. FOR PROGRAM=CXYPSCAN COMPLETE DOCUMENTATION IS PROVIDED\n  IN MEMBER CXYPSDOC.\n\n       2. FOR PROGRAM=TAPESCAN I MADE A VERY MODEST CHANGE TO\n  VERSION 5.0 WHICH CAME OFF CBT TAPE IN 1991. THIS CHANGE WAS\n  MADE AT THE REQUEST OF A PROGRAMMER WHO WANTED A PRINT OF THE\n  NUMBER OF BYTES ON EACH FILE AND A RECORD COUNT FOR F OR FB\n  FILES. ORIGINAL SOURCE FOR VERSION 5.0 IS IN MEMBER TAPESC50.\n  CHANGES ARE IN MEMBER TAPESCAS AND ARE SHOWN AS TEMP LIBRARIAN\n  UPDATES TO THE ORIGINAL SOURCE. IF SOMEONE WISHES TO APPLY THESE\n  TO A LATER TAPESCAN THIS WILL SHOW WHERE THE CHANGES GO.\n\n       3. FOR PROGRAM=ZZRELINK INFO ON HOW TO USE CAN BE FOUND IN\n  COMMENTS AT THE BEGINNING OF MEMBER ZZRELINK.\n  SOME CAVEATS FOR ZZRELINK.\n                  1. PROGRAM WILL NOT CORRECTLY RELINK A PAGE\n                     ALIGNED PROGRAM SO IEBCOPY IS INVOKED TO\n                     COPY THE PROGRAM\n                  2. WHEN JCL IS CUT INSTEAD OF THE LINKAGE\n                     EDITOR BEING INVOKED (I.E. WHEN A SYSPUNCH\n                     DD CARD IS PRESENT) THE EXEC PARMS ARE\n                     FREQUENTLY WRONG.\n                  3. IGNORE ZZRELASM RC=08 IN LINK EDIT STEP.\n\n                               FRANK JOHNSTON\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SETRC": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LBL     $SETRC &CODE\n&LBL     CLI   RC,&CODE .               IS THIS CODE > CURRENT RC\n         BNL   MLMA&SYSNDX .            BRANCH IF CURRENT RC NOT LOW\n         MVI   RC,&CODE .               UPDATE TO NEW SEVERITY LEVEL\nMLMA&SYSNDX DS    0H .\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE361": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08?\\x01\\x00\\x13\\x7f\\x10I\\x00\\x10\\x00\\x0c\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2000-05-16T10:49:00", "lines": 16, "newlines": 12, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 361 IS FROM FRANK JOHNSTON OF CHAMBERSBURG, PENNSYLVANIA  *   FILE 361\n//*           AND CONTAINS SOURCE CODE FOR THREE UTILITIES:         *   FILE 361\n//*                                                                 *   FILE 361\n//*           CXYPSCAN - A PDS SCAN AND PRINT UTILITY, WITH MANY    *   FILE 361\n//*                      CONTROL PARAMETERS                         *   FILE 361\n//*                                                                 *   FILE 361\n//*              (reworked as of 05/00)                             *   FILE 361\n//*                                                                 *   FILE 361\n//*           ZZRELINK - A PROGRAM WHICH LOOKS AT A LOAD LIBRARY    *   FILE 361\n//*                      AND RE-LINKEDITS ALL THE MEMBERS INTO A    *   FILE 361\n//*                      DIFFERENT LIBRARY                          *   FILE 361\n//*                                                                 *   FILE 361\n//*           TAPESCAN - A TAPE MAPPING PROGRAM                     *   FILE 361\n//*                                                                 *   FILE 361\n//*           More utilities are included.                          *   FILE 361\n//*                                                                 *   FILE 361\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE362": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x08?\\x00\\x99\\x08?\\x12\\x00\\x00\\x04\\x00\\x04\\x00\\x00\\xc3\\xc2\\xe3\\xf4\\xf2\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T12:00:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "CBT420"}, "text": "//***FILE 362 IS FROM FRANK JOHNSTON OF CHAMBERSBURG, PENNSYLVANIA  *   FILE 362\n//*           AND CONTAINS LOAD MODULES FOR CXYPSCAN, ZZRELINK,     *   FILE 362\n//*           AND TAPESCAN, WHOSE SOURCE CODE IS IN FILE 361.       *   FILE 362\n//*                                                                 *   FILE 362\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BINSRCH": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   BINSRCH &TBEG=(3),&TEND=(4),&AEND=,&BUILD=NO,&ENTLTH=,        X\n               &ARG=(2),&SEQ=A,&COMPARE=L,&ARGOF=0,&FULL=,&TMID=(1),   X\n               &ARGLTH=,&FOUND=,&ENTOF=0\n.**********************************************************************\n.*       MACRO PROTOTYPE SYMBOL MEANINGS AS FOLLOWS                   *\n.**********************************************************************\n.*             AEND = PTR TO ABSOLUTE TABLE END (BUILD FUNCTION ONLY)\n.*\n.*             ARG  = PTR TO ARGUMENT WHICH IS OBJECT OF SEARCH\n.*\n.*             ARGLTH = LENGTH OF ARGUMENT ON WHICH COMPARISON IS BASED\n.*\n.*             ARGOF = OFFSET OF ARGUMENT FROM THE START OF AN ENTRY\n.*\n.*             BUILD = INDICATION AS TO WHETHER THE SEARCH TABLE IS TO\n.*                     BE EXPANDED IF THE SEARCH ARGUMENT IS NOT FOUND\n.*                     IN THE EXISTING TABLE.\n.*\n.*             COMPARE = INDICATION OF WHETHER THE SEARCH TABLE IS KEPT\n.*                       IN ARITHMETIC OR COLLATING SEQUENCE ORDER.\n.*\n.*             ENTLTH = THE LENGTH OF A SINGLE TABLE ENTRY\n.*\n.*             TBEG = PTR TO THE START OF THE TABLE (MUST HAVE A DUMMY\n.*                    ENTRY WITH X'0F' FOR 'COMPARE=A' OR X'FF' FOR\n.*                    'COMPARE=L' IN THE ARGUMENT FIELD OF THE FIRST\n.*                    ENTRY FOR THE 'BUILD=YES' FUNCTION).\n.*\n.*             TEND = PTR TO THE END OF THE TABLE (MUST HAVE THE DUMMY\n.*                    ENTRY DESCRIBED ABOVE IN THE LAST ENTRY OF THE\n.*                    TABLE IF 'BUILD=NO' IS IN EFFECT)\n.**********************************************************************\n         LCLB  &BS(7)              1 = TBEG IN REG NOTATION\n.*                                 2 = TEND IN REG NOTATION\n.*                                 3 = AEND IN REG NOTATION\n.*                                 4 = ARG IN REG NOTATION\n.*                                 5 = DESCENDING ORDER TABLE\n.*                                 6 = ARITHMETIC TABLE SEARCH\n.*                                 7 = FOUND ROUTINE ADDRESS PRESENT\n.**********************************************************************\n.*       CHECK VALIDIITY OF MACRO OPERANDS                            *\n.**********************************************************************\n         AIF   (T'&TBEG EQ 'O').E1    ERROR IF NOT PRESENT\n&BS(1)   SETB  ('&TBEG'(1,1) EQ '(')  TBEG IN REG NOTATION\n.**********************************************************************\n         AIF   (T'&TEND EQ 'O').E2    ERROR IF NOT PRESENT\n&BS(2)   SETB  ('&TEND'(1,1) EQ '(')  TEND IN REG NOTATION\n.**********************************************************************\n         AIF   ('&BUILD' EQ 'NO').BI004 TABLE BUILD REQUESTED\n         AIF   ('&BUILD' NE 'YES').E3   ERROR IF NOT 'YES' OR 'NO'\n.**********************************************************************\n         AIF   (T'&AEND EQ 'O').E4    ERROR IF ABSOLUTE END NOT\n.*                                    SPECIFIED AND BUILD = 'YES'\n&BS(3)   SETB  ('&AEND'(1,1) EQ '(')  AEND IN REGISTER NOTATION\n.**********************************************************************\n         AIF   (T'&FULL EQ 'O').E5    ERROR IF TABLE FULL ROUTINE PTR\n.*                                    NOT SPECIFIED WITH BUILD = 'YES'\n.BI004   ANOP\n.**********************************************************************\n         AIF   (T'&ENTLTH NE 'N').E6  ERROR IF ENTRY LENGTH NOT SELF\n.*                                    DEFINING\n.**********************************************************************\n         AIF   (T'&ARG EQ 'O').E7     ERROR IF ARG NOT SPECIFIED\n&BS(4)   SETB  ('&ARG'(1,1) EQ '(')   ARG IN REG NOTATION\n.**********************************************************************\n         AIF   ('&TMID'(1,1) NE '(').E8 ERROR IF TMID NOT A REGISTER\n.**********************************************************************\n         AIF   ('&SEQ' NE 'A' AND '&SEQ' NE 'D').E9 ASCENDING\n.*                                     AND DESCENDING ORDER ONLY\n&BS(5)   SETB  ('&SEQ' EQ 'D')        SET SEQUENCE TO DESCENDING\n.**********************************************************************\n         AIF   ('&COMPARE' NE 'L' AND '&COMPARE' NE 'A').E10 ERROR\n.*                                    IF NOT LOGICAL OR ARITHMETIC\n.*                                    COMPARE\n&BS(6)   SETB  ('&COMPARE' EQ 'A')    SET COMPARE TYPE TO ARITHMETIC\n.**********************************************************************\n         AIF   (T'&ARGOF NE 'N').E11  ERROR IF NOT SELF-DEFINING\n.**********************************************************************\n         AIF   (T'&ENTOF NE 'N').E12  ERROR IF NOT SELF-DEFINING\n.**********************************************************************\n         AIF   (T'&ARGLTH EQ 'O').E13 ERROR IF NO ARGUMENT LENGTH\n         AIF   (T'&ARGLTH NE 'N').E14  ERROR IF NOT SELF-DEFINING\n.**********************************************************************\n&BS(7)   SETB  (T'&FOUND NE 'O')      FOUND ROUTINE PTR GIVEN\n.**********************************************************************\n***********************************************************************\n*        THE FOLLOWING CODE IS A BINARY SEARCH ROUTINE. THIS ROUTINE  *\n         AIF   ('&BUILD' EQ 'YES').BI008\n*    WILL SEARCH THE TABLE POINTED TO BY 'TBEG' FOR THE ARGUMENT AT   *\n*    'ARG'.                                                           *\n         AGO   .BI012\n.BI008   ANOP\n*    WILL SEARCH THE EXISTING TABLE BEGINNING AT 'TBEG' AND ENDING AT *\n*    'TEND' FOR THE ARGUMENT AT 'ARG'. IF THE SPECIFIED ARGUMENT IS   *\n*    NOT FOUND IN THHE TABLE THEN ALL ENTRIES IN THE TABLE WILL BE    *\n*    PROPAGATED UP, SPACE PERMITTING, THE TABLE TO MAKE ROOM FOR A    *\n*    NEW TABLE ENTRY. IN THIS CASE 'TBEG' WILL BE SET TO POINT TO THE *\n*    POSITION IN THE TABLE WHERE THE NEW ENTRY CAN BE PLACED.         *\n.BI012   ANOP\n***********************************************************************\n         AIF   ('&LABEL' EQ '').BI016 BRANCH IF LABEL NOT CODED\n&LABEL   DS    0H .\n.BI016   ANOP\n.**********************************************************************\n         STM   14,12,12(13) .             SAVE REGISTERS\n         AIF   (NOT &BS(1)).BI020         BRANCH IF SYMBOLIC\n         AIF   ('&TBEG'(1,3) EQ '(3)').BI024 ALREADY IN R1\n         LR    3,&TBEG .         SET PTR TO TABLE START\n         AGO  .BI024\n.BI020   ANOP\n         L     3,&TBEG .         SET PTR TO TABLE START\n.BI024   ANOP\n         AIF   (NOT &BS(2)).BI028        BRANCH IF SYMBOLIC\n         AIF   ('&TEND'(1,3) EQ '(4)').BI032 ALREADY IN R4\n         LR    5,&TEND .         SET PTR TO TABLE END\n         AGO   .BI032\n.BI028   ANOP\n         L     4,&TEND .         SET PTR TO TABLE END\n.BI032   ANOP\n         AIF   (NOT &BS(4)).BI036 IN SYMBOLIC NOTATION\n         AIF   ('&ARG'(1,3) EQ '(2)').BI040 ALREADY IN R2\n         LR    2,&ARG .          SET PTR TO SEARCH ARGUMENT\n         AGO   .BI040\n.BI036   ANOP\n         LA    2,&ARG .          SET PTR TO SEARCH ARGUMENT\n.BI040   ANOP\n         AIF   (NOT &BS(2)).BI041          BRANCH IF SYMBOLIC\n         LR    4,5                         R4 = PTR TO TABEND\n.BI041   ANOP\n         AIF   (NOT &BS(3)).BI044 BRANCH IF NOT IN REG NOTATION\n         LR    6,&AEND .         SAVE PTR TO ABSOLUTE TABLE END PTR\n.BI044   ANOP\n         CLC   &ARGOF.(&ARGLTH,2),&ENTOF.(3) . NEW ENTRY FOR BEGINNING\n         AIF   ('&BUILD' EQ 'NO').BI048    BRANCH IF SEARCH ONLY\n         BL    MLMB&SYSNDX .               BRANCH IF YES\n         AGO   .BI052\n.BI048   ANOP\n         BL    MLMG&SYSNDX .               BRANCH IF YES\n.BI052   ANOP\nMLMA&SYSNDX   DS    0H .\n         LR    1,4 .             TMID = PTR TO END POLE\n         SR    1,3 .             TMID = END POLE - BEGIN POLE\n         SRL   1,5 .              TMID = (BEGIN-END)/(2 * ENTLTH)\n         SLL   1,4 .              ROUND MID-PT OFFSET TO A MULTIPLE\n*                                  OF THE LENGTH OF AN ENTRY\n         AR    1,3 .             TMID = PTR TO MID ENTRY\n         CLC   &ARGOF.(&ARGLTH,2),&ARGOF.(1) .CHECK FOR REQUIRED ENTRY\n         BE    MLMF&SYSNDX .            BRANCH IF ENTRY FOUND\n         CR    3,1 .             BEGIN = MID POLE\n.*\n         AIF   ('&BUILD' EQ 'NO').BI064 BRANCH IF INSERTION NOT REQ'D\n.*\n         BE    MLMC&SYSNDX .       BRANCH IF YES -> NEW ENTRY REQUIRED\n.*\n         AGO   .BI068\n.*\n.BI064   ANOP\n.*\n         BE    MLMG&SYSNDX .        BRANCH IF YES -> NEW ENTRY REQUIRED\n.*\n.BI068  ANOP\n.*\n         CLC &ARGOF.(&ARGLTH,2),&ENTOF.(1) COMPARE ARGUMENT TO ENTRY\n*                                        MID POINT\n         BL    MLMD&SYSNDX .         BRANCH IF ARGUMENT IS LOW\n*\n         LR    3,1 .         NEW BEGIN POLE = CURRENT MID POLE\n         B     MLMA&SYSNDX .        LOOK AT NEXT ENTRY\nMLMD&SYSNDX      DS    0H .                ARGUMENT COMPARED LOW\n         LR    4,1 .           NEW END POLE = CURRENT MID POLE\n         B     MLMA&SYSNDX .       LOOK AT NEXT ENTRY\n.*\n         AIF   ('&BUILD' EQ 'NO').BI418  BRANCH IF NOT BUILD OPERATION\n*\n*        AT THIS POINT WE KNOW THAT A NEW ENTRY IS TO BE INSERTED INTO\n*    THE TABLE.\n*\n.*\nMLMC&SYSNDX     DS    0H .\n         LA    3,&ENTLTH.(3) .         ADJUST PTR FOR ENTRY INSERTION\n.*\nMLMB&SYSNDX     DS    0H .\n.*\n*\n*     HERE TBEG POINTS TO THE TABLE LOCATION WHERE THE ENTRY IS TO BE\n*    INSERTED. WE MUST, HOWEVER, CHECK TO MAKE SURE THERE IS ROOM FOR\n*    BEFORE ATTEMPTING TO INSERT IT.\n*\n         AIF   (&BS(2)).BI404     TEND IN REG NOTATION\n         L     4,&TEND .          GET PTR TO CURRENT END OF TABLE\n         AGO   .BI408\n.BI404   ANOP\n         LR    4,5 .              GET PTR TO CURRENT TABLE END\n.BI408   ANOP\n         AIF   (&BS(3)).BI412     AEND IN REG NOTATION\n         C     4,&AEND .         IS THERE ROOM FOR ANOTHER ENTRY\n         AGO   .BI416\n.BI412   ANOP\n         CR    4,6               IS THERE ROOM FOR ANOTHER ENTRY\n.BI416   ANOP\n         BE    &FULL .        BRANCH IF NOT\n         LA    1,&ENTLTH.(4) .         UPDATE POINTER TO\n         ST    1,TABEND .            NEW TABLE END\n         LA    1,&ENTLTH .             TMID = ENTRY LENGTH\nMLME&SYSNDX   DS    0H .\n*\n*        IN ORDER TO MAKE ROOM FOR THE NEW ENTRY WE MUST NOW SHIFT ALL\n*    EXISTING TABLE ENTRIES UP ONE ENTRY IN THE TABLE FROM THE POINT OF\n*    INSERTION TO THE END OF THE TABLE.\n*\n         MVC   &ENTLTH.(&ENTLTH,4),0(4) . MOVE AN ENTRY UP\n*                                                 ONE TABLE SLOT\n         SR    4,1 .             BACK UP ONE ENTRY\n         CR    4,3 .             HAVE WE MOVED ALL ENTRIES YET\n         BNL   MLME&SYSNDX .       BRANCH IF NOT\n         LM    5,6,40(13) .        RESTORE REGS\n         B     MLMG&SYSNDX .       EXIT\n.BI418   ANOP\nMLMF&SYSNDX DS    0H .\n         LM    5,6,40(13) .        RESTORE REGISTERS\n         AIF   (&BS(7)).BI420      BRANCH IF FOUND ROUTINE PRESENT\n         SR    15,15 .             SET ZERO CONDITION CODE\n         LTR   15,15 .             SET HARDWARE CODE\n         AGO   .BI500\n.BI420   ANOP\n         B     &FOUND .            GO TO FOUND ROUTINE\n.BI500   ANOP\nMLMG&SYSNDX DS 0H .\n         AIF   ('&BUILD' EQ 'YES').EXIT\n         LM    5,6,40(13) .        RESTORE REGS\n         MEXIT\n.E1      MLMERR 16,1,DESC=TBEG TBEG NOT SPECIFIED\n         MEXIT\n.E2      MLMERR 16,1,DESC=TEND TEND NOT SPECIFIED\n         MEXIT\n.E3      MLMERR 16,2,DESC=BUILD INVALID 'BUILD' SPECIFICATION\n         MEXIT\n.E4      MLMERR 16,1,DESC=AEND AEND NOT SPECIFIED BUT REQUIRED\n         MEXIT\n.E5      MLMERR 16,1,DESC=FULL FULL REQUIRED FOR 'BUILD' FUNCTION\n         MEXIT\n.E6      MNOTE  16,'&ENTLTH. IS NOT SELF-DEFINING'\n         MEXIT\n.E7      MLMERR 16,1,DESC=ARG  ARG OPERAND REQUIRED\n         MEXIT\n.E8      MNOTE  16,'TMID NOT SPECIFIED IN REGISTER NOTATION'\n         MEXIT\n.E9      MLMERR 16,2,DESC=SEQ SEQUENCE OPERAND INVALID\n         MEXIT\n.E10     MLMERR 16,2,DESC=COMPARE COMPARE OPERAND INVALID\n         MEXIT\n.E11     MNOTE  16,'ARGOF OPERAND NOT SELF-DEFINING'\n         MEXIT\n.E12     MNOTE  16,'ENTOF OPERAND NOT SELF-DEFINING'\n         MEXIT\n.E13     MLMERR 16,1,DESC=ARGLTH ARGLTH REQUIRED BUT NOT SPECIFIED\n         MEXIT\n.E14     MNOTE  16,'ARGLTH OPERAND NOT SELF-DEFINING'\n         MEXIT\n.EXIT    MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHAIN": {"ttr": 531, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    CHAIN &BASE=10,&SAVE=(14,12),&SAVAR=SAVE,&PL1=NO,&SAVEPTR=13, X\n               &RENT=,&MACBASE=15,&MODULE=*,&DSALTH=100,&WKREG=14,     X\n               &PLICO=NO,&PARM=,&ENTRY=\n         LCLC  &CHARFLD,&INTNAME\n         LCLA  &COUNTER,&ROUND,&BASENO,&BDISP\n         LCLB  &SAVE1\n&INTNAME SETC  '&NAME'\n         AIF    ('&MACBASE' NE '15').NOTB15\n         AIF   ('&MODULE' EQ '').NOTB15\n         AIF   ('&PLICO' EQ 'YES' AND '&MODULE' NE '*').NOTB15\n         USING  *,15 .ESTABLISH TEMPORARY BASE REG\n.NOTB15  ANOP\n         AIF   ('&MODULE' EQ '').SCHECK\n         AIF   ('&MODULE' EQ '*').CSNAME\n         AIF   ('&ENTRY' EQ '').NENT01\n&CHARFLD SETC  '&ENTRY'\n         AGO   .ENT01\n.NENT01  ANOP\n&CHARFLD SETC  '&MODULE'\n.ENT01   ANOP\n&COUNTER SETA  1\n.CHARCNT AIF   ('&CHARFLD'(1,&COUNTER) EQ '&CHARFLD').CNTEND\n&COUNTER SETA &COUNTER+1\n         AGO   .CHARCNT\n.CNTEND  ANOP\n&ROUND   SETA  ((&COUNTER+2)/2)*2+4\n         AIF   ('&PLICO' NE 'YES').NPLI01\n         AIF   ('&MODULE' EQ '*').NPLI01\n&ROUND   SETA  7-&COUNTER\n         AIF   (&ROUND LE 0).PLI01\n         DC    CL&ROUND.' ' PAD MODULE NAME ON LEFT WITH BLANKS\n.PLI01   ANOP\n         AIF   ('&ENTRY' EQ '').NENT02\n         DC    C'&ENTRY' MODULE NAME FOR CORE DUMP IDENTIFICATION\n         DC    AL1(&COUNTER.) LENGTH OF ENTRY NAME\n         ENTRY &ENTRY\n         USING *,15\n&ENTRY   DS    0H\n         AGO   .SCHECK\n.NENT02  ANOP\n         DC    C'&MODULE' MODULE NAME FOR CORE DUMP IDENTIFICATION\n         DC    AL1(&COUNTER.) LENGTH OF MODULE NAME\n         ENTRY &MODULE\n         USING *,15\n&MODULE  DS    0H\n         AGO   .SCHECK\n.NPLI01  ANOP\n&INTNAME B     *+&ROUND .BRANCH AROUND ID\n         DC    AL1(&COUNTER) .     ID LENGTH\n         DC    CL&COUNTER'&CHARFLD' .ID\n&INTNAME SETC  ''                  YES\n         AGO   .SCHECK\n.CSNAME  AIF   ('&SYSECT' EQ '').E1\n&CHARFLD SETC  '&SYSECT'\n&COUNTER SETA  1\n         AGO   .CHARCNT\n.*       NOW CHECK FOR REG'S TO BE SAVED\n.*\n.*       IF CHECKOUT/OPTIMIZER PROLOGUE HAS BEEN REQUESTED THEN A\n.*   STANDARD REGISTER SAVING CONVENTION MUST BE FOLLOWED.\n.*\n.SCHECK  AIF   ('&PLICO' NE 'YES').SCHECK2\n         STM   14,11,12(13) SAVE CALLER'S REGISTERS IN CALLER'S DSA\n&SAVE1   SETB  1           SHOW THAT R1 WAS SAVED\n         AGO   .SCHAIN\n.SCHECK2 AIF   ('&SAVE' EQ '').SCHAIN   REGS TO BE SAVED?\n.SNAMEOK AIF   (T'&SAVE(1) NE 'N').E2   REGS MUST BE SELF-DEFINING\n&COUNTER SETA  &SAVE(1)*4+20\n         AIF   (&COUNTER LE 75).SCHK01\n&COUNTER SETA  &COUNTER-64\n.SCHK01  AIF   (N'&SAVE NE 2).SCHK02\n&INTNAME STM   &SAVE(1),&SAVE(2),&COUNTER.(&SAVEPTR) .SAVE REQ'D REG'S\n&SAVE1   SETB  (&SAVE(1) LE 1 AND &SAVE(2) GE 1)\n&SAVE1   SETB  (&SAVE(1) GT 1 AND &SAVE(2) GE 1)\n&INTNAME SETC  ''\n         AGO   .SCHAIN\n.SCHK02  AIF   (N'&SAVE NE 1).E3\n&INTNAME ST    &SAVE(1),&COUNTER.(&SAVEPTR,0) .SAVE REQ'D REGISTER\n&SAVE1   SETB  (&SAVE(1) EQ 1) SHOW THAT R1 WAS SAVED\n&INTNAME SETC  ''\n.*\n.*       NOW WE CHAIN THE SAVE AREAS\n.*\n.SCHAIN  ANOP\n         AIF   ('&ENTRY' EQ '').NENT03\n         AIF   ('&MODULE' EQ '').E8\n&INTNAME L     &BASE(1),=A(&MODULE.) SET UP BASE ENTRY ADDRESS\n         AGO   .ENT03\n.NENT03  ANOP\n&INTNAME LR    &BASE(1),15 .        ESTABLISH ADDRESSIBILITY\n         AIF   ('&PLICO' NE 'YES').NPLI02\n         AIF   ('&MODULE' EQ '' OR '&MODULE' EQ '*').NPLI02\n.ENT03   ANOP\n         USING &MODULE,&BASE(1)\n         AGO   .PLI02\n.NPLI02  ANOP\n         USING &SYSECT,&BASE(1)\n.PLI02   ANOP\n         SPACE 1\n         AIF   (N'&BASE LE 1).BASETST\n&BASENO  SETA  2\n&BDISP   SETA  4096\n.BASELP1 ANOP\n         LA    &BASE(&BASENO),4095(&BASE(&BASENO-1))\n         LA    &BASE(&BASENO),1(&BASE(&BASENO))\n         AIF   ('&PLICO' NE 'YES').NPLI03\n         AIF   ('&MODULE' EQ '' OR '&MODULE' EQ '*').NPLI03\n         USING &MODULE+&BDISP,&BASE(&BASENO)\n         AGO   .PLI03\n.NPLI03  ANOP\n         USING &SYSECT+&BDISP,&BASE(&BASENO)\n.PLI03   ANOP\n         SPACE 1\n&BASENO  SETA  &BASENO+1\n&BDISP   SETA  &BDISP+4096\n         AIF   (&BASENO LE N'&BASE).BASELP1\n.BASETST AIF   ('&MACBASE' NE '15').NOTB15F\n         AIF   ('&MODULE' EQ '').NOTB15F\n         DROP  15 .DROP TEMPORARY BASE\n.NOTB15F ANOP\n&INTNAME SETC  ''\n         AIF   ('&PL1' EQ 'YES').PL1GEN  PL/1 (F) PROLOGUE REQUIRED\n.*\n         AIF   ('&PLICO' EQ 'YES').PLIGEN CHECKER/OPTIMIZER PROLOGUE\n.*\n*        NOW CHAIN THE SAVE AREAS\n         SPACE 1\n         AIF   ('&RENT' EQ '').SCHAIN1\n         AIF   ('&RENT' NE 'YES').E6    'YES' IS THE ONLY VALID PARM\n         SPACE 1\n*        OBTAIN A DYNAMIC SAVE AREA TO RETAIN RE-ENTRABILITY\n         SPACE 1\n         GETMAIN    R,LV=&DSALTH . GET A DYNAMIC SAVE AREA (DSA)\n         SPACE 1\n         XC    0(&DSALTH,1),0(1) . CLEAR DSA TO ZEROES\n         SPACE 1\n         ST    &SAVEPTR,4(1) .     SAVE PTR TO OLD SAVE AREA IN NEW\n         ST    1,8(0,&SAVEPTR) .   STORE PTR TO NEW SAVE AREA IN OLD\n         LR    &SAVEPTR,1 .        SET POINTER TO NEW SAVE AREA\n         SPACE 1\n         AGO   .EXIT\n.SCHAIN1 ANOP\n         ST    &SAVEPTR,&SAVAR+4 . SAVE PTR TO SAVE AREA\n         LA    &WKREG,&SAVAR .     PICK UP PTR TO NEW SAVE AREA\n         ST    &WKREG,8(0,&SAVEPTR) .STORE PTR TO NEW AREA IN OLD AREA\n         LR    &SAVEPTR,&WKREG .   SET SAVE PTR TO NEW SAVE AREA\n         SPACE 1\n.*\n.*       IF PL1=YES HAS BEEN CODED WE MUST GENERATE THE APPROPRIATE\n.*   PL/1 PROLOGUE FOR ERROR HANDLING\n.*\n.PL1GEN  ANOP\n         AIF   ('&PL1' EQ 'NO').EXIT\n         AIF   ('&PL1' NE 'YES').E4\n         AIF   ('&SYSECT' EQ '').E5\n&CHARFLD SETC  '&SYSECT' .    COUNT NUMBER OF CHARACTERS IN CSECT NAME\n&COUNTER SETA  1\n.CSCOUNT AIF   ('&CHARFLD'(1,&COUNTER) EQ '&CHARFLD').CSCHECK\n&COUNTER SETA  &COUNTER+1\n         AGO   .CSCOUNT\n.CSCHECK AIF   (&COUNTER GT 7).E7  CSECT NAME > 7 CHARACTERS\n&INTNAME L     15,MLMA&SYSNDX .    SET UP DSA AND CHAIN IT TO OTHERS\n         LA    0,&DSALTH .         LOAD UP LENGTH OF REQ'D DSA\n         BALR  14,15 .             LINK TO IHESADA - PL/1 STORAGE MGT.\n&CHARFLD.B DXD A              SYMBOLIC OFFSET OF PSEUDO REGISTER\n         MVI   0(13),X'80' .       SET DSA FLAG\n         ST    13,0(12) .          STORE DSA ADDRESS IN PSEUDO REGISTER\n         ORG   *-2\n         DC    QL2(&SYSECT.B) .PLACES PR OFFSET IN ST INSTRUCTION ABOVE\n         CNOP  0,4 .         ALIGN TO FULL WORD BOUNDARY\n         B     *+8 .         BRANCH OVER ADCON\nMLMA&SYSNDX DC   V(IHESADA) .     ADCON POINTING TO GET DSA ROUTINE\n&INTNAME SETC  ''\n         AGO   .EXIT\n.*\n.*        THE FOLLOWING CODE WILL GENERATE A PL/1 CHECKOUT/OPTIMIZER\n.*   COMPATABLE PROLOGUE, UTILIZING THE LIFO STACK TO OBTAIN DSA CORE\n.*\n.PLIGEN  ANOP\n         LA    0,&DSALTH .  R0 = LENGTH OF REQUIRED DSA\n         L     1,76(13) .   R1 = ADDRESS OF FIRST AVAILABLE BYTE IN\n*                                THE LIFO STACK\n         ALR   0,1 .        R0 = PTR TO END OF REQUIRED DSA IF IT\n*                                FIT IN LIFO STORAGE\n         CL    0,12(12) .   COMPARE RESULT WITH ADDRESS OF LAST\n*                           AVAILABLE BYTE IN LIFO STORAGE\n         BNH   *+10 .       BRANCH IF REQUIRED DSA STORAGE IS AVAILABLE\n*                           IN THE LIFO STACK\n         L     15,116(12) . R15 = PTR TO PL/I STORAGE OVERFLOW ROUTINE\n         BALR  14,15 .      BRANCH OUT TO GETMAIN MORE STORAGE\n         ST    0,76(1) .    UPDATE ADDRESS OF NEXT AVAILABLE BYTE IN\n*                           LIFO STACK\n         ST    13,4(1) .    STORE PTR TO CALLER'S DSA IN OUR DSA\n         MVC   72(4,1),72(13) COPY PTR TO LIBRARY WORKSPACE\n         LR    13,1 .       SET UP PTR TO OUR NEW DSA\n         MVI   0(13),X'80' .SET DSA FLAGS TO PRESERVE PL/I\n         MVI   86(13),X'91' ERROR-HANDLING WHILE EXECUTING\n         MVI   87(13),X'C0' IN THIS ASSEMBLER ROUTINE.\n*\n*        E N D    O F    P L / I    P R O L O G U E\n*\n.*\n.EXIT    ANOP                      NORMAL MACRO EXIT\n         AIF   (NOT &SAVE1).EXIT2    BRANCH IF R1 WAS NOT SAVED\n         AIF   ('&PARM' NE 'YES').EXIT2 BRANCH IF NOT 'PARM=YES'\n         L     1,4(13) .           R1 = PTR TO CALLERS' SAVE AREA\n         L     1,24(1) .           RESTORE R1 TO POINT TO PARMS\n.*\n.EXIT2   MEXIT\n.*\n.*       ERROR MESSAGES\n.*\n.E1      MNOTE 12,'NO CSECT NAME SPECIFIED AND ''*'' CODED'\n         MEXIT\n.E2      MNOTE 12,'INVALID REGISTER SPECIFICATION IN SAVE RANGE'\n         MEXIT\n.E3      MNOTE 12,'INVALID RANGE OF REGISTERS TO BE SAVED'\n         MEXIT\n.E4      MNOTE 12,'INVALID ''PL1='' SPECIFICATION'\n         MEXIT\n.E5      MNOTE 12,'PL1=YES CODED BUT NO CSECT NAME PRESENT'\n         MEXIT\n.E6      MNOTE 12,'INVALID ''RENT='' SPECIFICATION'\n         MEXIT\n.E7      MNOTE 12,'PL1=YES CODED BUT CSECT NAME > 7 CHARACTERS'\n         MEXIT\n.E8      MNOTE 12,'''ENTRY='' OPERAND CODED BUT ''MODULE='' NOT SPECIFIX\n               ED'\n         MEXIT\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CXYPLASM": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 \\x9f\\x00\\x99 \\x9f\\x08F\\x00H\\x00H\\x00\\x00\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-28T00:00:00", "modifydate": "1999-07-28T08:46:00", "lines": 72, "newlines": 72, "modlines": 0, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//SEL     EXEC PGM=AFOLIBR,REGION=256K,PARM='NJTA,NRJS'\n//OSJOB    DD  UNIT=VIO,DISP=(,PASS),SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=800,DSN=&&DATESRCE\n//MASTER   DD  DISP=SHR,DSN=UMV42.LIB.SOURCE\n//LIST     DD  SYSOUT=*\n//INDEX    DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=133)\n//SYSIN    DD  *\n-SEL SXNRSU09,ZJJJ,EXEC,TEMP\n-END\n/*\n//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSLIN   DD  DSN=&&DATEOBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DSN=&&DATESRCE,DISP=(OLD,DELETE)\n//LKED     EXEC PGM=IEWL,\n//             PARM=(XREF,LIST,NCAL,LET)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&DATEOBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//SYSLMOD  DD  DSN=&&SUBRLIB,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=13030),\n//             SPACE=(CYL,(1,,1)),UNIT=SYSDA\n//SYSIN    DD  *\n  ALIAS TIMERTNE\n  ALIAS DATETIME\n  ALIAS DATERTNE\n  ALIAS DATERT\n  NAME SXNRSU09(R)\n/*\n//SEL     EXEC PGM=AFOLIBR,REGION=256K,PARM='NJTA,NRJS'\n//OSJOB    DD  UNIT=VIO,DISP=(,PASS),SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=800,DSN=&&SCANSRCE\n//MASTER   DD  DISP=SHR,DSN=UMV42.LIB.SOURCE\n//LIST     DD  SYSOUT=*\n//INDEX    DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=133)\n//SYSIN    DD  *\n-SEL CXYPSCAN,JZBG,EXEC,TEMP\n-END\n/*\n//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSLIN   DD  DSN=&&SCANOBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DSN=&&SCANSRCE,DISP=(OLD,DELETE)\n//LKED     EXEC PGM=IEWL,\n//             PARM=(XREF,LIST,LET)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&&SUBRLIB,DISP=(OLD,DELETE)\n//SYSLIN   DD  DSN=&&SCANOBJ,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//SYSLMOD  DD  DSN=&&LOADSET,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=13030),\n//             SPACE=(CYL,(1,,1)),UNIT=SYSDA\n//*YSLMOD  DD  DISP=SHR,DSN=UMV42.CAJ7083.LOAD(CXYPSCAN)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CXYPSASM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x06\\x0f\\x00\\x99 \\x8f\\x13U\\x002\\x002\\x00\\x04\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-01T00:00:00", "modifydate": "1999-07-27T13:55:00", "lines": 50, "newlines": 50, "modlines": 4, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSLIN   DD  DSN=&&DATEOBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DISP=SHR,DSN=UMV42.CAJ7083.SGSOURCE(SXNRSU09)\n//LKED     EXEC PGM=IEWL,\n//             PARM=(XREF,LIST,NCAL,LET)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&DATEOBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//SYSLMOD  DD  DSN=&&SUBRLIB,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=13030),\n//             SPACE=(CYL,(1,,1)),UNIT=SYSDA\n//SYSIN    DD  *\n  ALIAS TIMERTNE\n  ALIAS DATETIME\n  ALIAS DATERTNE\n  ALIAS DATERT\n  NAME SXNRSU09(R)\n/*\n//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSLIN   DD  DSN=&&SCANOBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DISP=SHR,DSN=UMV42.CAJ7083.SGSOURCE(CXYPSCAN)\n//LKED     EXEC PGM=IEWL,\n//             PARM=(XREF,LIST,LET)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&&SUBRLIB,DISP=(OLD,DELETE)\n//SYSLIN   DD  DSN=&&SCANOBJ,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//*YSLMOD  DD  DSN=&&LOADSET(CXYPSCAN),DISP=(,PASS),\n//*            DCB=(RECFM=U,BLKSIZE=23200),\n//*            SPACE=(CYL,(1,,1)),UNIT=SYSDA\n//SYSLMOD  DD  DISP=SHR,DSN=UMV42.CAJ7083.LOAD(CXYPSCAN)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CXYPSCAN": {"ttr": 777, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PARTITIONED DATA SET SCAN ROUTINE                     '\n         PRINT  ON,NODATA,GEN\n*\n*      IDENTIFICATION DIVISION.\n*      PROGRAM-ID.     CXYPSCAN\n*      AUTHOR.         FRANK JOHNSTON\n*      DATE WRITTEN.   FEB. 1976\n*      DATE COMPILED.  FEB. 1976\n*      SECURITY.       U\n*      REMARKS.\n*          PRODUCT-NO.\n*          JOB-NO.     7108\n*          TITLE.      PDS SCAN ROUTINE\n*          AUTHORITY.\n*          FREQUENCY.  AS REQUIRED\n*          LINKAGE.    DATETIME SUB-ROUTINE\n*          PURPOSE.    TO SCAN PARTITIONED DATA SETS FOR MATCHES TO\n*                      CHARACTER STRING ARGUMENTS ENTERED VIA CONTROL\n*                      CARDS OR BY THE MASTER CONSOLE OPERATER IN REPLY\n*                      TO WTORS ISSUED BY THIS PROGRAM. THE PROGRAM\n*                      SCANS ANY F FB V OR VB PDS WITH LRECL FROM 50\n*                      TO 255 BYTES. ANY NUMBER OF PDSES CAN BE\n*                      SCANNED IN ONE RUN FOR UP TO 255 ARGUMENTS.\n*                      ALL PDSES TO BE SCANNED MUST HAVE A DDNAME\n*                      BEGINNING WITH EITHER PDS OR PROC. EACH DATA SET\n*                      TO BE SEARCHED MUST HAVE A SEP DDNAME OF PDSXXX\n*                      OR PROCYYY(NO CONCATONATED DATA SETS). MEMBERS\n*                      WILL BE IDENTIFIED AND PRINTED USING 'AND'  OR\n*                      'OR' LOGIC.\n*      CONSOLE MESSAGE. WTORS WILL BE ISSUED PROMPTING THE CONSOLE\n*                       OPERATOR TO ENTER ARGUMENTS IF THIS PROGRAM\n*                       IS RUN WITH PARM=CONSOLE.\n*\n*\n*\n*\n         EJECT\n*      REGISTER USAGE.\n         MACRO\n         EQUAT\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n         MEND\n*          R0.  WORK\n*          R1.  WORK\n*          R2.  WORK\n*          R3.  WORK\n*          R4.  WORK\n*          R5.  WORK\n*          R6.  WORK\n*          R7.  WORK\n*          R8.  ARGUMENT TABLE DSECT\n*          R9.  NO. OF BYTES IN DIR REC\n*          R10. BASE\n*          R11. BASE\n*          R12. BASE\n*          R13. SAVE\n*          R14. RETURN\n*          R15. ENTRY\n*\n         EJECT\nCXYPSCAN CSECT\n         EQUAT\n         EJECT\n         SAVE  (14,12)\n         BALR  R10,R0              FIRST BASE REG\n         USING *,R10,R11,R12\n         LA    R11,2048(R10)       SECOND\n         LA    R11,2048(R11)         BASE REG\n         LA    R12,2048(R11)       THIRD\n         LA    R12,2048(R12)         BASE REG\n         LR    R7,R1               SAVE PARM POINTER\n         LR    R8,R13              SAVE CALLER SAVE AREA POINTER\n         LA    R0,WORKSIZE\n         GETMAIN R,LV=(R0)         GET A SAVE/WORK AREA\n         USING WORK,R13            ADDRESSABILITY\n         LR    R13,R1                 SAVE/WORK AREA\n         STM   R0,R1,WORKSAVE      SAVE INFO ON GOTTEN CORE\n         ST    R13,8(R8)           POINT TO NEW SAVE AREA IN OLD\n         ST    R8,4(R13)           POINT TO OLD SAVE AREA IN NEW\n         LR    R1,R7               RESTORE PARM POINTER\n         MVI   CC,C' '                  CLEAR PRINT\n         MVC   CC+1(CLEARSZE-1),CC        WORK AREAS\n         MVI   BLANKS,C' '              CLEAR AN AREA TO CHECK\n         MVC   BLANKS+1(72),BLANKS        FOR ALL BLANK ARGUMENTS\n         L     R2,0(R1)            LOAD ADDRESS OF PARMS\n         LH    R1,0(R2)            LOAD LENGTH OF PARMS\n         LTR   R1,R1               ANY PARMS SPECIFIED\n         BZ    OPENFLS             NO PARMS\n         LA    R2,2(R2)            POINT PAST LENGTH FIELD\n         LA    R1,1(R1)            ADD 1 TO PARMS CNT FOR\n*                                  BYPASS OF , BETWEEN PARMS\n         MVC   MEMLSTTB,BLANKS     CLEAR\n         MVC   MEMFROM,HEXZEROS      MEMBER\n         MVC   MEMTO,FS                LISTS\nPARMSCAN EQU   *\n         BCTR  R1,R0               BYPASS , BETWEEN PARMS\n         LA    R3,PARMHOLD         POINT R3 TO PARMHOLD\n         XR    R4,R4               ZERO THE\n         XR    R5,R5                 COUNTERS\nSCANLOOP EQU   *\n         CLI   0(R2),C','          IS CHAR A ,\n         BE    PARMSRC             YES - GO SEARCH PARM TABLE\n         CH    R4,=H'19'           IS PARM GT 19 CHARS\n         BE    ERROR0              YES - PARM ERROR\n         MVC   0(1,R3),0(R2)       SAVE PARM CHARACTER\n         LA    R2,1(R2)            UPDATE\n         LA    R3,1(R3)              POINTERS\n         LA    R4,1(R4)                COUNTER\n         BCT   R1,SCANLOOP         END OF PARM LIST\nPARMSRC  EQU   *\n         LA    R6,PARMTAB          POINT TO PARM TABLE\nSCRLOOP  EQU   *\n         CLI   0(R6),X'FF'         IS THIS END OF TABLE\n         BE    ERROR0              YES\n         IC    R5,0(R6)            GET LENGTH OF ENTERED PARM\n         CR    R4,R5               IS THIS ENTRY CORRECT LENGTH\n         BNE   SRCBUMP             NO\n         IC    R5,1(R6)            GET LENGTH OF COMPARE IN PARMTAB\n         BCTR  R5,R0               REDUCE LENGTH BY 1 FOR COMPARE\n         EX    R5,PARMCOMP         IS THIS CORRECT ENTRY\n         BNE   SRCBUMP             NO\n         OC    PARMSWIT,2(R6)      YES SET SWIT FOR THIS PARM\n         TM    3(R6),X'F0'         IS THIS A MEMBER LIST PARM\n         BZ    *+24                NO\n         ST    R7,FWORD            SAVE POINTER TO PARMS\n         BAL   R7,MEMLSTRT         GO VALIDATE REST OF MEMBER PARM\n         L     R7,FWORD            RESTORE POINTER TO PARMS\n         TM    SWIT+3,X'01'        IS IT VALID\n         BO    ERROR0              NO\n         LTR   R1,R1               ANY MORE CHAR\n         BZ    OPENFLS\n         LA    R2,1(R2)            GO PAST ,\n         B     PARMSCAN\nSRCBUMP  EQU   *\n         IC    R5,1(R6)            RESTORE LENGTH FOR UPDATE OF PARMTAB\n         AR    R6,R5               GO TO THE\n         LA    R6,4(R6)              NEXT ENTRY\n         B     SCRLOOP                 IN PARM TAB\nPARMCOMP EQU   *\n         CLC   PARMHOLD(0),4(R6)\nERROR0   EQU   *\n         MVI   CC,C'1'\n         MVC   PRNTWRK(L'ERR0),ERR0     ERROR MESSAGE\n         L     R1,0(R7)            GET ADDRESS OF PARMS\n         LH    R2,0(R1)            LENGTH OF PARMS\n         BCTR  R2,R0               REDUCE BY 1 FOR MOVE\n         EX    R2,PRMERMOV         MOVE PARMS TO PRINT\n         OI    SWIT+1,X'02'        SET INVALID PARM SWITCH\n         B     OPENFLS\nPRMERMOV MVC   PRNTWRK+22(0),2(R1)\n         EJECT\nOPENFLS  EQU   *\n         OPEN  (LIST,(OUTPUT),MESSAGE,(OUTPUT),INDEX,(OUTPUT))\n         TM    PARMSWIT,X'01'      WAS LIST ALL SPECIFIED\n         BNO   *+12                NO\n         NI    PARMSWIT,X'EF'      YES - TURN OFF LIST HIT BIT\n         B     *+8                   EVEN IF SPECIFIED BY A PARM\n         OI    PARMSWIT,X'10'      MAKE LIST HIT THE DEFAULT\n         TM    SWIT+1,X'02'        IS INVALID PARM SW ON\n         BNO   GETARG              NO\n         PUT   MESSAGE,CC\n         MVI   RETCODE,X'18'\n         B     CLOSEUR\nGETARG   EQU   *\n         TM    PARMSWIT,X'20'      ARE ARGS TO BE ENTERED VIA CONSOLE\n         BNO   OPENCARD            NO\n         MVC   HDRM1+1(3),HDRM1A   CHANGE PRINT HEADING\n*                                    TO SHOW CONSOLE ENT\n         B     GETCONSL            GO GET FIRST CONSOLE ENT\nOPENCARD EQU   *\n         OPEN  (CARD)              OPEN CARD FILE\n         B     GETCARD             GO GET FIRST CONTROL CARD\nGETCONSL EQU   *\n         MVI   CARDIN,C' '         CLEAR CARD I/O\n         MVC   CARDIN+1(79),CARDIN   AREA FOR CONSOLE\n         UNPK  CONSLENT+40(3),NEXTARG   SHOW ARGUMENT NUM\n         OI    CONSLENT+42,X'F0'          TO BE ENTERED NEXT\n         XC    CONSLECB,CONSLECB   CLEAR ECB\n         CNOP  0,4\nCONSLENT EQU   *\n         WTOR  'CXYPSCAN ENTER ARGUMENT XXX; ENTER /* OR HIT EOB TO PROX\n               CESS ',CARDIN,80,CONSLECB\n         WAIT  ECB=CONSLECB\n         CLC   CARDIN(2),=C'/*'    IS THIS /*\n         BE    ENDCARD             YES - END OF INPUT\n         CLC   CARDIN(2),=C'  '    IS THIS EOB\n         BE    ENDCARD             YES - END OF INPUT\n         B     ADDARGCT\nGETCARD  EQU   *\n         GET   CARD,CARDIN\nADDARGCT EQU   *\n         AP    CRDCT,=P'1'         ADD TO CARD COUNT\n         CP    CRDCT,=P'1'         IS THIS FIRST CONTROL CARD\n         BNE   PROCESCD            NO\n         LA    R1,ARGENTSZ         YES - STORE SIZE FOR\n         STH   R1,ARGSZHLD           LATTER REFERENCE AND\n         MH    R1,=H'256'              MULTIPLY BY NUMBER OF\n         LR    R0,R1                     ARGUMENTS FOR A TABLE\n         GETMAIN R,LV=(R0)\n         LR    R8,R1               SET UP ADDRESSABILITY\n         USING ARGTAB,R8             TO THE ARGUMENT TABLE\n         STM   R0,R1,ARGSAVE       SAVE POINTERS TO GOTTEN CORE\n         OI    SWIT+1,X'08'        CORE GOTTEN FOR ARGUMENT TABLE\n         TM    PARMSWIT,X'04'      WAS PATTERNS ENTERED AS PARM\n         BNO   PROCESCD            NO\n         OI    SWIT+2,X'80'        YES - FORCE ALL ARGUMENTS\n*                                    TO BE CHECKED FOR PATTERNS\nPROCESCD EQU   *\n         XC    SEARCHLD,SEARCHLD   CLEAR SEARCH LIMIT FIELDS\n         CLC   CARDIN(2),=C'00'    TREAT 00 IN\n         BNE   *+10                  COLUMN 1 + 2\n         MVC   CARDIN(2),=C'01'        SAME AS 01\n         CLC   CARDIN(4),=C'0100'  DO WE WANT TO SEARCH WHOLE RECORD\n         BE    CHECKOPT            YES\n         OI    SWIT+3,X'80'        GO VALIDATE SEARCH\n         BAL   R7,LIMITRTE           LIMIT ENTRY\n         TM    SWIT+3,X'40'        IS IT VALID\n         BO    ERROR1              NO\nCHECKOPT EQU   *\n         CLI   CARDIN+4,C'0'\n         BE    CHECKNUM\n         CLI   CARDIN+4,C'E'       IN AND PROCESSING AN E IN\n         BNE   *+22                   POSITION 5 INDICATES THAT\n         TM    PARMSWIT,X'08'           IF THIS ARGUMENT IS FOUND\n         BO    CHECKNUM                   IT WILL CAUSE MEM NOT FOUND\n         MVC   ERR1RC,=C'04'       EXCLUDE INVALID IN OR PROCCESSING\n         B     ERROR1\n         CLI   CARDIN+4,C'P'       IS THIS ARGUMENT A PATTERN\n         BE    *+14\n         MVC   ERR1RC,=C'05'       SHOW INVALID ENTRY IN COLUMN 5\n         B     ERROR1\n         OI    SWIT+2,X'40'        FLAG ARGUMENT ENTERED AS PATTERN\nCHECKNUM EQU   *\n         CLC   CARDIN+5(2),ASTERICS     CALCULATE LENGTH ?\n         BNE   VALNUM                   NO\n         LA    R1,CARDIN+6         CHECK FOR A\n         LA    R2,CARDIN+70          NON BLANK CHAR\n         CLI   0(R2),C' '              TO INDICATE THE\n         BNE   *+8                       END OF ARGUMENT\n         BCT   R2,*-8\n         CR    R1,R2               TREAT ALL BLANKS\n         BNE   *+14           AS ERROR CONDITION\nBLANKARG EQU   *\n         MVC   ERR1RC,=C'06'\n         B     ERROR1\n         SR    R2,R1               CALCULATE LENGTH\n         CVD   R2,DWORD              OF ARGUMENT AND\n         OI    DWORD+7,X'0F'           PUT IN CARDIN AREA\n         UNPK  CARDIN+5(2),DWORD\n         LR    R1,R2               LENGTH TO R1\n         B     CHKSRLIM\nVALNUM   EQU   *\n         CLI   CARDIN+5,C'0'       MAKE\n         BL    INVARGCH              SURE\n         CLI   CARDIN+5,C'9'           THAT\n         BH    INVARGCH                  ARG\n         CLI   CARDIN+6,C'0'               LENGTH\n         BL    INVARGCH                      IS VALID\n         CLI   CARDIN+6,C'9'                   NUMERIC\n         BNH   *+14\nINVARGCH EQU   *\n         MVC   ERR1RC,=C'07'       SHOW INVALID ARGUMENT LENGTH\n         B     ERROR1\n         PACK  DWORD,CARDIN+5(2)\n         CVB   R1,DWORD            LENGTH OF SEARCH ARGUMEMT\n         CH    R1,=H'0'            IS SA GREATER THAN 0\n         BNH   INVARGLN            NO - ERROR\n         CH    R1,=H'73'           IS SA LESS THAN 74\n         BNH   *+14\nINVARGLN EQU   *\n         MVC   ERR1RC,=C'08'       SHOW INVALID ARGUMENT LENGTH\n         B     ERROR1\n         BCTR  R1,0\n         STC   R1,*+5              TREAT ARGUMENT\n         CLC   CARDIN+7(0),BLANKS    OF ALL BLANKS\n         BE    BLANKARG\n         LA    R1,1(R1)\nCHKSRLIM EQU   *\n         CLC   SEARCHLD,=F'0'      WERE SEARCH LIMITS ENTERED\n         BE    CHECKPAT            NO\n         CLC   SRLGNBIN,=H'0'      WAS EOR SPECFIFIED FOR LIMIT\n         BNE   *+16                NO\n         LA    R2,255              YES - CALCULATE LENGTH\n         SH    R2,SRBEGBIN           OF ARGUMT LIMIT RANGE\n         B     *+8\n         LH    R2,SRLGNBIN         LENGTH OF\n         CR    R1,R2                 ARGUMENT MUST\n         BNH   CHECKPAT                BE EQUAL TO OR\n         MVC   ERR1RC,=C'03'             LOWER THAN THE\n         B     ERROR1                      SEARCH LIMIT RANGE\nCHECKPAT EQU   *\n         TM    SWIT+2,X'C0'        WAS ARGUMENT ENTERED AS PATTERN\n         BZ    *+32\n         LR    R2,R1               POINT R2 TO LENGTH\n         LA    R5,CARDIN+7         POINT R5 TO ARGUMENT\n         BAL   R4,PATTRTNE         GO CHECK FOR A PATTERN\n         TM    SWIT+2,X'20'        IF 1ST CHARACTER IS SHOWN\n         BNO   *+14                  AS PATTERN IT IS AN ERROR\n         MVC   ERR1RC,=C'09'\n         B     ERROR1\n         AP    ARGCT,=P'1'         ADD 1 TO ARGUMENT COUNT\n         CP    ARGCT,=P'255'       OVER 255 ARGUMENTS ENTERED\n         BH    ERROR5              YES\n         AP    NEXTARG,=P'1'       UP COUNT FOR NEXT CONSOLE MSG\n         TM    PARMSWIT,X'08'      IS THIS AND PROCESSING\n         BNO   ARGTBBLD            NO - CONTINUE\n         CP    ARGCT,=P'1'         YES - IS THIS FIRST ARGUMENT\n         BNE   ARGTBBLD            NO - CONTINUE\n         ST    R1,FWORD            SAVE BINARY LENGTH OF ARG\n         LA    R0,64               YES - GET CORE FOR A BIT PATTERN\n         GETMAIN R,LV=(R0)           TABLE TO BE USED TO CHECK FOR HITS\n         XC    0(64,R1),0(R1)      CLEAR TABLE\n         STM   R0,R1,PTRNSAVE      SAVE TABLE INFO\n         OI    SWIT+1,X'01'        SHOW CORE GOTTEN\n         L     R1,FWORD            RESTORE BINARY LENGTH OF ARG\nARGTBBLD EQU   *\n         MVI   ARGFL,X'00'                   CLEAR 2\n         MVC   ARGFL+1(ARGENTSZ*2-1),ARGFL     ENTRIES\n         BCTR  R1,R0               SAVE SA LENGTH IN\n         STC   R1,ARGLNG             THE ARGUMENT TABLE\n         STC   R1,*+5              MOVE ARGUMENT TO\n         MVC   ARG(0),CARDIN+7       THE ARGUMEMT TABLE\n         STC   R1,MOVEARGP+1       TO MOVE ARGUMENT TO PRINT\n         UNPK  ARGNO,ARGCT         USE ARGUMENT COUNT AS THE\n         OI    ARGNO+2,X'F0'         ARGUMENT NUMBER IN TABLE\n         ZAP   DWORD,ARGCT         SAVE ARGUMENT\n         CVB   R6,DWORD              NUM TO BINARY\n         STC   R6,ARGNOBIN             AND SAVE IN TAB\n         TM    PARMSWIT,X'08'      IS THIS AND PROCESSING\n         BNO   *+38                NO\n         CLI   CARDIN+4,C'E'       IS THIS ARG TO BE EXCLUDED\n         BNE   *+18                NO\n         OI    ARGFL,X'10'         YES - FLAG ARG AS EXCLUSION\n         AP    EXCCT,=P'1'         ADD 1 TO EXCLUSION COUNT\n         B     *+16                DO NOT SET CONTROL BITS FOR\n*                                    ARGUMENTS THAT ARE EXCLUDED\n*                                      IF EXCLUDED ARGUMENT(S) ARE\n*                                        FOUND MEMBER COMP WILL FAIL\n         L     R5,PTRNSAVE+4       GO SET BIT FOR THIS\n         LA    R5,32(R5)             ARGUMENT IN CONTROL\n         BAL   R7,BITSETR              FIELD OF BIT PAT TAB\n         TM    SWIT+2,X'40'        ARE THERE +!@#(S) IN PATTERN\n         BNO   *+12                NO\n         OI    ARGFL,X'08'         YES FLAG IN ARGUMENT TABLE\n         NI    SWIT+2,X'BF'\n         BAL   R2,CHKMSGHD         GO CHECK FOR HEADING\n         UNPK  PRNTWRK(3),CRDCT    CARD COUNT\n         OI    PRNTWRK+2,X'F0'       TO PRINT.\n         UNPK  PRNTWRK+4(3),ARGCT  ARG COUNT\n         OI    PRNTWRK+6,X'F0'       TO PRINT\n         MVI   PRNTWRK+7,C' '                CLEAR REST\n         MVC   PRNTWRK+8(123),PRNTWRK+7        OF WORK AREA\n         CLC   SEARCHLD,=F'0'      WERE SEARCH LIMITS ENTERED\n         BNE   *+20                YES\n         MVC   PRNTWRK+8(3),=C'001'     SHOW COLUMN 1 TO EOR\n         MVC   PRNTWRK+12(3),=C'EOR'      FOR NO SEARCH LIMITS\n         B     MOVEARGO\n         OI    ARGFL,X'04'         SET FLAG FOR SEARCH LIMITS\n         LH    R2,SRBEGBIN         PUT BEGINNING\n         CVD   R2,DWORD              COLUMN OF SEARCH\n         OI    DWORD+7,X'0F'           LIMIT TO PRINTER\n         UNPK  PRNTWRK+8(3),DWORD\n         LA    R3,RECWORKA         PUT BEGINNING\n         BCTR  R3,R0                 BYTE OF SEARCH\n         AR    R3,R2                   LIMIT INTO THE\n         ST    R3,ARGLOLIM               TABLE ENTRY\n         CLC   SRLGNBIN,=H'0'           DOES LENGTH HAVE 0\n         BNE   *+22                     NO\n         MVC   PRNTWRK+12(3),=C'EOR'    YES -SHOW\n         LA    R3,RECWORKA+254            EOR AS SEARCH\n         ST    R3,ARGUPLIM                  UPPER LIMIT IN\n         B     MOVEARGO                       BOTH PRINT + TABLE\n         LH    R3,SRLGNBIN         CALCULATE SEARCH\n         AR    R3,R2                 UPPER LIMIT\n         BCTR  R3,R0\n         CVD   R3,DWORD            PUT SEARCH\n         OI    DWORD+7,X'0F'         UPPER LIMIT\n         UNPK  PRNTWRK+12(3),DWORD     TO PRINTER\n         L     R2,ARGLOLIM         PUT SEARCH\n         AH    R2,SRLGNBIN           UPPER LIMIT\n         BCTR  R2,R0                   INTO THE TABLE\n         ST    R2,ARGUPLIM               ENTRY FOR ARG\nMOVEARGO EQU   *\n         TM    ARGFL,X'18'         EXCLUSION AND/OR PATTERN\n         BNZ   *+14                YES\n         MVC   PRNTWRK+16(3),BLANKS     CLEAR OPT FIELD\n         B     MOVECNTP\n         XR    R2,R2\n         IC    R2,ARGFL            ISOLATE BITS FOR\n         N     R2,MASK1F             EXCLUDING ARGUMENTS\n         SRL   R2,3                    AND SEARCH BY PATTERN\n         MH    R2,=H'3'\n         SH    R2,=H'3'\n         LA    R3,PRNTTAB          SHOW EXCLUSION\n         AR    R3,R2                 AND PATTERN SEARCH\n         MVC   PRNTWRK+16(3),0(R3)      OPTION ON PRINTER\nMOVECNTP EQU   *\n         MVC   PRNTWRK+20(2),CARDIN+5   LENGTH TO PRINT\nMOVEARGP EQU   *\n         MVC   PRNTWRK+23(0),CARDIN+7   ARGUMENT TO PRINT\n         ZAP   ARGTARG,=P'0'       ZERO COUNTERS\n         ZAP   ARGTMEM,=P'0'         IN THE ARGUMENT\n         ZAP   ARGTPDS,=P'0'           TABLE\n         LA    R8,ARGENTSZ(R8)     POINT TO NEXT TABLE ENTRY\nPRTMSGDT EQU   *\n         PUT   MESSAGE,CC          PRINT DETAIL LINE\n         IC    R1,LINCTM           INCREMENT\n         LA    R1,1(R1)              PRINT LINE\n         STC   R1,LINCTM               COUNT BY 1\n         TM    PARMSWIT,X'20'      ARE ARGS BEING ENTERED VIA CONSOLE\n         BO    GETCONSL            YES\n         B     GETCARD             NO\nERROR1   EQU   *\n         BAL   R2,CHKMSGHD         GO CHECK FOR HEADING\n         UNPK  PRNTWRK(3),CRDCT    CARD COUNT\n         OI    PRNTWRK+2,X'F0'       TO PRINT.\n         MVC   PRNTWRK+4(3),ASTERICS\n         MVC   PRNTWRK+8(2),ASTERICS\n         MVC   PRNTWRK+8(L'ERR1),ERR1        ERROR MESSAGE 1 TO PRINT\n         MVC   PRNTWRK+8+L'ERR1(80),CARDIN   ERROR CARD TO PRINT\n         B     PRTMSGDT\nCHKMSGHD EQU   *\n         CLI   LINCTM,X'3A'        IS LINE COUNT GREATER THAN 58\n         BH    *+10                YES - GO PRINT HEADING\n         MVI   CC,C' '             NO - SET SINGLE\n         BR    R2                    SPACE AND RETURN\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   CC(L'HDRM1),HDRM1   MOVE IN HEADING\n         PUT   MESSAGE,CC          PRINT HEADING\n         MVC   CC(L'HDRM2),HDRM2   MOVE IN HEADING\n         PUT   MESSAGE,CC          PRINT HEADING\n         MVI   CC,C'0'             DOUBLE SPACE FOR 1ST DETAIL LINE\n         MVI   LINCTM,X'03'        RESET LINE COUNT\n         BR    R2                  RETURN\n         EJECT\nFINDDD   EQU   *\n         EXTRACT TIOTHOLD,FIELDS=TIOT   GET TIOT ADDRESS\n         L     R3,TIOTHOLD         TASK I/O TABLE ADDRESS\n         LA    R3,24(R3)           FIRST DD ENTRY\n         XR    R4,R4\nTIOTLOOP EQU   *\n         IC    R4,0(R3)            LENGTH OF DD ENTRY\n         LTR   R4,R4               IS IT 0 LENGTH\n         BC    7,*+16              NO - CHECK FOR ELIGIBLE DD CARD\n         TM    SWIT+1,X'10'        HAVE WE HAD A GOOD DD CARD IN RUN\n         BZ    ERROR4              NO - ERROR\n         B     OPTPRINT            YES - GO PRINT OPTIONS FOR RUN\n         CLC   4(4,R3),=C'PROC'    IS THIS AN ELIGIBLE DD CARD\n         BE    PROCESDD            YES - GO PROCESS\n         CLC   4(3,R3),=C'PDS'     IS THIS AN ELIGIBLE DD CARD\n         BE    PROCESDD            YES - GO PROCESS\n         AR    R3,R4               NO - GO CHECK\n         B     TIOTLOOP              THE NEXT ENTRY\nPROCESDD EQU   *\n         MVC   DIR+40(8),4(R3)     MOVE DDNAME TO DIR DCB\n         MVC   MEM+40(8),4(R3)     MOVE DDNAME TO MEM DCB\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   PRNTWRK(L'STUBDDN),STUBDDN\n         MVC   PRNTWRK+L'STUBDDN(8),4(R3)\n         MVC   DDNAME,4(R3)\n         OI    SWIT+1,X'10'        INDICATE AT LEAST ONE GOOD DD CARD\n         AR    R3,R4               POINT TO NEXT TIOT ENTRY\n         ST    R3,TIOTHOLD         SAVE POINTER TO NEXT TIOT ENTRY\n         CLI   LINCTM,X'2D'        GO TO\n         BNL   *+12                  NEW PAGE\n         MVI   CC,C'0'                 IF LINCNTM\n         B     *+12                      EXCEEDS 45\n         MVI   CC,C'1'                     AND RESET\n         MVI   LINCTM,X'00'                  TO ZERO\n         PUT   MESSAGE,CC\n         LA    R5,JFCB             POINT TO\n         LR    R6,R5                 THE JFCB\n         ST    R6,F1DSCB+4         DSN POINTER TO OBTAIN CAMLST\n         LA    R6,118(R6)          VOL SER POINTER\n         ST    R6,F1DSCB+8           TO OBTAIN CAMLST\n         LA    R6,F1WORK           I/O AREA POINTER\n         ST    R6,F1DSCB+12          TO OBTAIN CAMLST\n         ST    R5,XLIST            JFCB POINTER TO\n         MVI   XLIST,X'87'           THE DCB EXIT LIST\n         RDJFCB MEM\n         MVC   PRNTWRK(L'STUBDSN),STUBDSN\n         MVC   PRNTWRK+L'STUBDSN(44),JFCB\n         MVI   CC,C' '\n         PUT   MESSAGE,CC\n         MVI   PRNTWRK+L'STUBDSN,C' '\n         MVC   PRNTWRK+L'STUBDSN+1(43),PRNTWRK+L'STUBDSN\n         MVC   PRNTWRK(L'STUBVOL),STUBVOL\n         MVC   PRNTWRK+L'STUBVOL(6),JFCB+118\n         MVI   CC,C' '\n         PUT   MESSAGE,CC\n         OBTAIN F1DSCB\n         STC   R15,OBTNRCHD        SAVE OBTAIN RETURN CODE\n         MVC   PRNTWRK(L'STUBATTR),STUBATTR\n         LH    R6,F1WORK+44\n         OI    SWIT+2,X'08'       GO TO SUB ROUTINE\n         BAL   R7,PRNTBRTE          TO BUILD PRINT TABLE\n         LH    R6,F1WORK+44\n         CVD   R6,DWORD\n         TM    F1WORK+38,X'42'     IS DSORG PO OR PS\n         BNZ   *+18                YES\n         MVC   PRNTWRK+L'STUBATTR(3),=C'UNS' SHOW NOT SUPPORTED\n         OI    SWIT+1,X'40'                    AND SET FILE ERROR\n         B     DISRECFM\n         TM    F1WORK+38,X'02'     IS DSORG PO\n         BNO   *+18                NO\n         MVC   PRNTWRK+L'STUBATTR(3),=C'PO ' SHOW PARTITIONED ORG\n         NI    SWIT+4,X'DF'                    CLEAR SEQ FILE SWIT\n         B     DISRECFM\n         MVC   PRNTWRK+L'STUBATTR(3),=C'PS ' SHOW SEQUENTIAL\n         OI    SWIT+4,X'20'        SET SEQUENTIAL FILE SWIT\n         MVI   JFCB+98,X'40'       SET JFCB TO SEQUENTIAL\n         OI    JFCB+52,X'08'       DO NOT WRITE JFCB BACK\nDISRECFM EQU   *\n         MVI   PRNTWRK+L'STUBATTR+3,C'-'\n         TM    F1WORK+40,X'C0'     IS RECFM EITHER\n         BM    *+18                  FIXED OR VARIABLE\n         MVC   PRNTWRK+L'STUBATTR+4(3),=C'UNS' SHOW NOT SUPPORTED\n         OI    SWIT+1,X'40'                      AND SET FILE ERROR\n         B     DISLRECL\n         TM    F1WORK+40,X'80'     IS RECFM FIXED\n         BNO   *+36                NO\n         MVC   PRNTWRK+L'STUBATTR+4(3),=C'F  ' SHOW FIXED RECFM\n         NI    SWIT+3,X'FB'                  CLEAR VARIABLE SWITCH\n         MVC   HDRS21+130(3),BLANKS\n         TM    F1WORK+40,X'10'     ARE RECORDS BLOCKED\n         BNO   DISLRECL            NO\n         MVI   PRNTWRK+L'STUBATTR+5,C'B'      YES - SHOW IT\n         B     DISLRECL\n         MVC   PRNTWRK+L'STUBATTR+4(3),=C'V  ' SHOW VARIABLE RECFM\n         OI    SWIT+3,X'04'                  SET VARIABLE SWITCH\n         MVC   HDRS21+130(3),HDRS21A\n         LA    R3,PRNTWRK+L'STUBATTR+5\n         TM    F1WORK+40,X'10'     ARE RECORDS BLOCKED\n         BNO   *+12                NO\n         MVI   0(R3),C'B'          YES - SHOW IT\n         LA    R3,1(R3)\n         TM    F1WORK+40,X'08'     ARE RECORDS SPANNED\n         BNO   DISLRECL            NO\n         MVI   0(R3),C'S'          YES - SHOW IT\n         OI    SWIT+1,X'40'        SET FILE ERROR SWITCH\nDISLRECL EQU   *\n         MVI   PRNTWRK+L'STUBATTR+7,C'-'          SHOW\n         UNPK  PRNTWRK+L'STUBATTR+8(5),DWORD        LRECL\n         OI    PRNTWRK+L'STUBATTR+12,X'F0'            OF THE\n         MVI   PRNTWRK+L'STUBATTR+13,C'-'               DATA SET\n         LTR   R6,R6\n         BC    7,*+12\n         OI    SWIT+1,X'40'\n         B     DISBLKSZ\n         LH    R5,F1WORK+42\n         LTR   R5,R5\n         BC    7,*+12\n         OI    SWIT+1,X'40'\n         B     DISBLKSZ\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BO    DISBLKSZ            YES\n         XR    R4,R4\n         DR    R4,R6\n         LTR   R4,R4\n         BC    8,DISBLKSZ\n         OI    SWIT+1,X'40'\nDISBLKSZ EQU   *\n         LH    R5,F1WORK+42\n         CVD   R5,DWORD\n         UNPK  PRNTWRK+L'STUBATTR+14(5),DWORD      SHOW BLKSIZE\n         OI    PRNTWRK+L'STUBATTR+18,X'F0'            OF THE DATA SET\n         PUT   MESSAGE,CC\n         CLI   OBTNRCHD,X'00'      DID OBTAIN FIND DATA SET ON VOLUME\n         BE    *+16                YES\n         LA    R5,ERR2C            POINT TO MSG FOR DATA SET NOT FOUND\n         OI    SWIT+1,X'40'        SET INVALID FILE SWITCH\n         B     ERROR2\n         TM    F1WORK+38,X'42'     IS DSORG PO OR PS\n         BNZ   *+18                YES\n         MVC   ERR2(L'ERR2A),ERR2A      POINT TO BAD\n         LA    R5,ERR2                    DSORG MESSAGE\n         B     ERROR2\n         MVC   ERR2(L'ERR2B),ERR2B      POINT TO INVALIB\n         LA    R5,ERR2                    LRECL/BLKSIZE MSG\n         TM    SWIT+1,X'40'        WAS INVALID FILE SWITCH ALREADY\n*                                    SET BECAUSE OF BAD LRECL/BLKSIZE\n*                                      OR BECAUSE DSORG NOT SUPPORTED.\n         BO    ERROR2\n         MVC   NOLNEHLD,SWIT+2    ISOLATE LENTH OF\n         NI    NOLNEHLD,X'03'       RECORDS BITS FOR PRINT\n         B     GO\n         EJECT\nENDCARD  EQU   *\n         MVI   LINCTM,X'36'        RESET MESSAGE LINE COUNTER\n         CP    CRDCT,=P'0'         DID WE GET ANY CARDS OR CONSOLE ENTS\n         BE    ERROR3              NO\n         CP    ARGCT,=P'0'         DID WE GET ANY VALID ARGUMENTS\n         BNE   *+12                YES - CONTINUE\n         MVI   RETCODE,X'0C'       NO - GO\n         B     CLOSEUR               TO EOJ\n         CP    ARGCT,EXCCT         WERE ALL ARGS EXCLUDED\n         BNE   *+12                NO\n         MVI   RETCODE,X'1C'       YES - ERROR COND\n         B     CLOSEUR               WITH RETURN CODE 28\n         NI    SWIT+2,X'3F'        TURN OFF PATTERN ENTERED FLAGS\n         XC    TRTTAB,TRTTAB\n         CP    ARGCT,=P'1'         IS THERE 1 VALID ARGUMENT\n         BNE   SORTBARG            NO - GO SORT BY ARGUMENT\n         NI    PARMSWIT,X'F7'      TURN OFF AND PROCESSING SWIT\n         NI    PARMSWIT+1,X'F7'    TURN OFF RECORD PROCESSING SWIT\n         B     BLDTRTTB              AND BYPASS SORT BECAUSE WE ONLY\n*                                      HAVE ONE ARGUMENT FOR THIS RUN\nSORTBARG EQU   *\n         BAL   R2,SORTRTNE\nBLDTRTTB EQU   *\n         L     R8,ARGSAVE+4        GET BEGINNING OF ARGUMENT TABLE\n         LA    R1,1                BINARY NUMBER OF 1ST ENT IN ARG TAB\nBTLOOP1  EQU   *\n         XR    R2,R2\n         IC    R2,ARG              PLACE BINARY NO. OF THE TABLE\n         STC   R1,TRTTAB(R2)         IN TRT FOR FIRST CHAR. OF ARG.\nBTLOOP2  EQU   *\n         CLC   ARG(1),ARG+ARGENTSZ      IS FIRST CHAR OF NEXT ARG SAME\n         BNE   *+16                NO\n         LA    R1,1(R1)            YES - UP BIN NO OF ARG TAB ENTRY\n         LA    R8,ARGENTSZ(R8)     POINT TO\n         B     BTLOOP2               NEXT ENTRY\n         OI    ARGFL,X'80'         FLAG THIS AS LAST ARGUMENT\n*                                    BEGINNING WITH THIS CHARACTER\n         CLI   ARG+ARGENTSZ,X'00'  IS THIS LAST ENT IN TABLE\n         BE    *+16                YES\n         LA    R1,1(R1)            NO - UP BIN NO OF ARG TAB ENTRY\n         LA    R8,ARGENTSZ(R8)     GO BUILD NEXT\n         B     BTLOOP1               ENTRY IN TRT\n         MVC   STOPPER,ARG         USE 1ST CHAR OF LAST ARG\n         B     FINDDD\n         EJECT\nERROR3   EQU   *\n         MVI   CC,C'1'\n         MVC   PRNTWRK(L'ERR3),ERR3\n         PUT   MESSAGE,CC\n         MVI   RETCODE,X'0C'\n         B     CLOSEUR\nERROR4   EQU   *\n         MVI   CC,C'0'\n         MVC   PRNTWRK(L'ERR4),ERR4\n         PUT   MESSAGE,CC\n         MVI   RETCODE,X'14'\n         B     CLOSEUR\nERROR5   EQU   *\n         MVI   CC,C'0'\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   PRNTWRK(L'ERR5),ERR5\n         PUT   MESSAGE,CC\n         MVI   RETCODE,X'10'\n         B     CLOSEUR\n         EJECT\nGO       EQU   *\n         CALL  DATETIME,(STARTTME,JULDT,DODDT,STARTCDT,CMPLCD)\n         TM    SWIT+4,X'20'       IS DSORG PS\n         BO    OPENJMEM           YES - BYPASS OPEN OF DIR FILE\n         OPEN  (DIR)\nOPENJMEM EQU   *\n         OPEN (MEM),TYPE=J\n         LH    R0,MEM+62           BLOCK SIZE\n         SLL   R0,1                DOUBLE FOR TWO BUFFERS\n         AH    R0,=H'512'          ADD STORAGE FOR DIR BUFFERS\n         GETMAIN R,LV=(R0)         GET BUFFERS\n         STM   R0,R1,IOARSAVE      SAVE FOR FREEMAIN\n         OI    SWIT,X'02'          INDICATE WE GOT BUFFERS\n         TM    SWIT+4,X'20'       IS DSORG PS\n         BNO   *+16               NO\n         MVC   SEQDIRN2,DDNAME    USE # AND FIRST 7 BYTES OF\n         MVC   0(22,R1),SEQDIR      DDNAME AS A DUMMY DIR ENTRY\n         ST    R1,DIRBADDR         STORE ADRESS OF FIRST DIR BUFFER\n         LA    R1,256(R1)\n         ST    R1,DIRBADDR+4       STORE ADRESS OF SECOND DIR BUFFER\n         LA    R1,256(R1)\n         SH    R0,=H'512'          BACK OUT SIZE OF DIR BUFFERS\n         ST    R1,MEMBADDR         STORE ADDRESS OF FIRST BUFFER\n         SRL   R0,1                COMPUTE ADDRESS OF\n         AR    R1,R0                 SECOND BUFFER\n         ST    R1,MEMBADDR+4       STORE ADDRESS OF SECOND BUFFER\n         LA    R1,DIR              READ DIRECTORY\n         BAL   R2,READ\n         OI    SWIT,X'20'          SUB READS FOR DIR DCB\nFRSTDIR  EQU   *\n         LR    R4,R1               POINT TO DIR I/O AREA\n         LH    R9,0(R4)            NO. OF BYTES\n         SH    R9,=H'2'              USED\n         LA    R4,2(R4)            POINT TO FIRST ENTRY\n         ST    R4,DIRRECAD         SAVE ADD OF CURRENT DIR RECORD\nPROCESSD EQU   *\n         CLC   0(8,R4),FS          IS THIS SENT RECORD\n         BNE   *+20                NO\n         OI    SWIT,X'10'          YES GO\n         LA    R1,DIR                FLUSH\n         BAL   R2,READ                 LAST I/0\n         B     ENDUP\n         MVC   MEMBER,0(R4)        SAVE MEMBER NAME\n         MVC   TTRN(3),8(R4)       SAVE TTR FOR FIND AND CONVERT\n         TM    11(R4),X'80'        IS MEMBER AN ALIAS\n         BNO   *+12                NO\n         TM    PARMSWIT+1,X'02'    ARE WE PROCCESSING ALIASES\n         BNO   GNEXTDIR            NO\n         TM    PARMSWIT+1,X'F0'    ARE THERE MEMBER LIST PARM/S\n         BZ    *+20                NO\n         OI    SWIT+3,X'02'        YES GO CHECK FOR A\n         BAL   R7,MEMLSTRT           MATCH WITH MEMBER\n         TM    SWIT+3,X'01'        DOES IT MATCH\n         BNO   GNEXTDIR            NO\n         AP    SCANMEMS,=P'1'      ADD 1 TO NUMBER OF MEMBERS\n         B     SRCHMEM\nGNEXTDIR EQU   *\n         L     R4,DIRRECAD         RESTORE ADD OF LAST DIR RECORD\n         XR    R3,R3\n         IC    R3,11(R4)           NO. OF\n         N     R3,MASK1F             USER\n         SLL   R3,1                    HALFWORDS\n         AH    R3,=H'12'           SIZE OF BASIC ENTRY\n         AR    R4,R3               POINT TO NEXT ENTRY IN PDS\n         SR    R9,R3               SUBTRACT NO. OF BYTES USED\n         ST    R4,DIRRECAD         SAVE ADD OF CURRENT DIR RECORD\n         BC    2,PROCESSD          NOT END OF BLOCK\n         LA    R1,DIR              READ NEXT\n         BAL   R2,READ               DIR BLOCK\n         B     FRSTDIR\nENDDIR   EQU   *\n         LM    R5,R9,READSAVE\n         B     ENDUP\n         EJECT\nSRCHMEM  EQU   *\n         BAL   R2,FIND\n         OI    SWIT,X'80'          MEMBER DCB\n         LA    R1,MEM\n         BAL   R2,READ\n         OI    SWIT,X'40'          SUB READS FOR MEM DCB\nRESCNT   EQU   *\n         LH    R0,MEM+62           SUBTRACT\n         L     R2,IOBADDR            RESIDUAL\n         SH    R0,14(R2)               COUNT\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BO    *+12                YES\n         LH    R2,RECLEN           NO - PROCESS\n         B     PROCESSM              AS FIXED LENGTH\n         SH    R0,=H'4'            POINT TO FIRST RECORD\n         LA    R1,4(R1)              IN A VARIABLE LENGTH BLOCK\nPROCESSM EQU   *\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BNO   SCANRECM            NO\n         MVC   RECLENV,0(R1)       GET ACTUAL LENGTH\n         LH    R2,RECLENV            OF THE DATA IN THIS\n         SH    R2,=H'4'                RECORD TO BE USED IN\n         STH   R2,RECLENV                SCAN PROCESS AND SAVE\n         SH    R0,=H'4'            REDUCE BLOCK COUNT BY RDW\n         LA    R1,4(R1)            POINT TO DATA FOR THIS RECORD\n         CLC   RECLENV,=H'0'       IS THIS A NULL RECORD\n         BE    *+12                YES\n         NI    SWIT+4,X'7F'        NO TURN OFF NULL SWIT\n         B     SCANRECM\n         MVC   RECWORKA(6),=C'(NULL)'   YES MOVE PHONY\n         MVC   RECWORKA+6(1),STOPPER      RECORD TO WORKAREA\n         OI    SWIT+4,X'80'        SET NULL RECORD SWIT\n         B     SAVERECP\nSCANRECM EQU   *\n         LR    R3,R2               LENGTH OF VARIABLE REC\n         BCTR  R3,R0               REDUCE FOR MOVE\n         CH    R3,=H'254'          IS LENGTH GT 255\n         BNH   *+8                 NO\n         LH    R3,=H'254'          YES - MOVE FIRST 255\n         EX    R3,*+8              MOVE THE\n         B     SAVERECP              REC TO WORKAREA\n         MVC   RECWORKA(0),0(R1)       FOR THE FIRST SCAN\nSAVERECP EQU   *\n         STM   R0,R1,CNTADDR       SAVE BLK CNT/BUFF ADDRESS\n         AP    SCANCNT,=P'1'        ADD 1 TO TOTAL RECORDS SCANNED\n         BAL   R4,SCANRTNE\n         TM    PARMSWIT+1,X'08'    IS THIS RECORD LEVEL LOGIC\n         BNO   *+28                NO\n         L     R5,PTRNSAVE+4       WERE ALL ARGS FOUND\n         CLC   0(32,R5),32(R5)       IN THE RECORD SCANNED\n         BNE   *+8                 NO\n         OI    SWIT,X'0C'          YES - SHOW HITS FOR MEMBER AND PDS\n         XC    0(32,R5),0(R5)      CLEAR ARGUMENT FOUND PART OF TABLE\n         TM    SWIT,X'04'\n         BNO   NEXTMREC\n         TM    PARMSWIT,X'08'      IS THIS AND PROCESSING\n         BNO   *+20                NO\n         TM    PARMSWIT+1,X'08'    IS THIS RECORD LEVEL LOGIC\n         BNO   NEXTMREC            NO\n         LA    R5,*+26             CHANGE EOF ADDRESS OF MEM FILE\n         STCM  R5,B'0111',MEM+33    IN CASE FLUSH CAUSES EOF CONDITION\n         AP    HITSMEMS,=P'1'      ADD 1 TO COUNT OF MEMBER W/HITS\n         OI    SWIT,X'10'          SET FLUSH BIT\n         LA    R1,MEM              GO TO READ ROUT.\n         BAL   R2,READ               TO FLUSH LAST READ\n         LM    R5,R9,READSAVE      RESET REAL EOF\n         LA    R5,ENDMEM             ADDRESS FLUSH\n         STCM  R5,B'0111',MEM+33       OF I/O FOR MEM\n         B     COPY                GO PRINT MEMBER\nNEXTMREC EQU   *\n         LM    R0,R1,CNTADDR\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BO    *+12                YES\n         LH    R2,RECLEN           LRECL - FIXED\n         B     *+8\n         LH    R2,RECLENV          LRECL - VARIABLE\n         AR    R1,R2               POINT TO NEXT RECORD\n         SR    R0,R2               REDUCE BLOCK COUNT BY LAST RECORD\n         BC    4,ABND2             ERROR IF BLOCK COUNT GOES TO NEG\n         BC    2,PROCESSM\n         LA    R1,MEM              GET NEXT\n         BAL   R2,READ               BLOCK\n         B     RESCNT\nABND2    EQU  *\n         ABEND 002,DUMP\n         EJECT\nCOPY     EQU   *\n         NI    SWIT,X'AB'          CLEAR SWITCH\n         OI    SWIT,X'01'          IN COPY OPERATION\n         OI    SWIT+3,X'08'        SHOW A HIT WAS MADE IN THIS RUN\n         BAL   R2,RESETADD         RESET DECB AND BUFFER ADDRESSES\n         BAL   R2,FIND\n         CLI   LINCTI,X'3A'        DO WE PRINT HEADINGS FOR INDEX LIST\n         BNH   BYPINDHD            NO\n         MVC   CCI(53),HDRI1       YES - SET UP FIRST HEADING\n         PUT   INDEX,CCI           PRINT FIRST HEADING\n         MVI   CCI,C' '\n         MVI   PRNTWRKI,C'('            SET UP VOL SER\n         MVC   PRNTWRKI+7(2),=C')-'       AND DATA SET NAME\n         MVC   PRNTWRKI+1(6),JFCB+118       AS SECOND HEADING\n         MVC   PRNTWRKI+9(44),JFCB            FOR THE INDEX LIST\n         PUT   INDEX,CCI           PRINT SECOND HEADING\n         MVC   CCI(53),HDRI3       SET UP THIRD HEADING\n         TM    PARMSWIT,X'40'      DO WE PRINT DISK ADDRESS\n         BNO   *+10                NO\n         MVC   CCI+44(8),HDRI3A    YES - ADJUST HEADING\n         PUT   INDEX,CCI           PRINT THIRD HEADING\n         MVI   LINCTI,X'04'        SET LINE CNT TO 4 AFTER HEADINGS\n         MVI   CCI,C'0'            DOUBLE SPACE FOR FIRST DETAIL LINE\nBYPINDHD EQU   *\n         MVC   PRNTWRKI(8),MEMBER\n         MVI   PRNTWRKI+8,X'40'\n         MVC   PRNTWRKI+9(44),PRNTWRKI+8\n         LA    R2,COPYFSRD         SET EXIT FOR FIRST PASS OF HEADINGS\nNEWPG    EQU   *\n         MVC   HDRS1VOL,JFCB+118   MOVE VOLSER TO 1ST SYSPRINT HEADING\n         MVC   HDRS1DSN,JFCB       MOVE DSN TO 1ST SYSPRINT HEADING\n         MVC   CC(133),HDRS1       MOVE 1ST SYSPRINT HEADING\n         AP    PAGECNT,=P'1'       ADD 1 TO PAGE COUNT\n         ED    PRNTWRK+126(6),PAGECNT   PUT PAGE CNT TO PRINT\n         TM    PARMSWIT,X'80'      IS NO LIST SWIT ON\n         BO    BYLISTHD            YES - BYPASS SYSPRINT HEADINGS\n         TM    SWIT+1,X'20'        HAS PAGE # BEEN PUT IN INDEX LIST\n         BO    *+20                YES\n         MVC   PRNTWRKI+8(6),ZSUPMASK   PUT PAGE NO.\n         ED    PRNTWRKI+8(6),PAGECNT      TO INDEX LIST\n         OI    SWIT+1,X'20'\n         PUT   LIST,CC\n         MVC   CC(133),HDRS21      MOVE 2ND SYSPRINT HEADING\n         PUT   LIST,CC\n         MVI   PRNTWRK,C' '             CLEAR PRINT\n         MVC   PRNTWRK+1(131),PRNTWRK     WORK AREA\n         TM    SWIT+2,X'02'        IS REC LEN GT 85\n         BZ    BYLISTHD            NO\n         MVC   PRNTWRK+16(85),HDRS22    MOVE 3RD SYSPRINT HEADING\n         PUT   LIST,CC\n         TM    SWIT+2,X'01'        IS REC LEN GT 170\n         BZ    BYLISTHD            NO\n         MVC   PRNTWRK+16(85),HDRS23    MOVE 4TH SYSPRINT HEADING\n         PUT   LIST,CC\nBYLISTHD EQU   *\n         XR    R6,R6              USE PRINT\n         IC    R6,NOLNEHLD          LENGTH BITS\n         LA    R6,2(R6)               TO CONTROL\n         STC   R6,LINCT                 PRT OVERFLOW\n         NI    SWIT+1,X'7F'        CLEAR HEADING SWITCH\n         MVI   CC,C'0'\n         MVC   PRNTWRK(8),MEMBER\n         MVI   PRNTWRK+9,C' '\n         BR    R2\nCOPYFSRD EQU   *\n         TM    SWIT,X'40'          IS THIS 1ST TIME\n         BO    NEXREC              NO\n         LA    R1,MEM\n         BAL   R2,READ\n         OI    SWIT,X'40'          SUB READ FOR MEM\nRESCNT2  EQU   *\n         LH    R0,MEM+62           SUBTRACT\n         L     R2,IOBADDR            RESIDUAL\n         SH    R0,14(R2)               COUNT\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BNO   PRINT               NO\n         SH    R0,=H'4'            POINT TO FIRST RECORD\n         LA    R1,4(R1)              IN A VARIABLE LENGTH BLOCK\nPRINT    EQU   *\n         TM    SWIT+1,X'80'        DO WE PRINT HEADINGS\n         BNO   *+16                NO\n         STM   R0,R1,CNTADDR       SAVE BLK CNT/BUFF ADDRESS\n         BAL   R2,NEWPG            GO PRINT HEADINGS\n         LM    R0,R1,CNTADDR\n         AP    COPYCNT,=P'1'       ADD 1 TO TOTAL RECORDS COPIED\n         UNPK  PRNTWRK+9(6),COPYCNT     USE COPYCNT AS\n         OI    PRNTWRK+14,X'F0'           RELATIVE RECORD\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BO    *+12                YES\n         LH    R2,RECLEN           NO - PROCESS\n         B     PRTRECMV              AS FIXED LENGTH\n         LH    R3,RECLEN           TRUNCATE RECORD\n         CH    R3,=H'255'            IF THE LENGTH OF\n         BNH   *+8                     MAX REC GT 255\n         LH    R3,RECLEN           USE THE\n         MVI   RECWORKA,C' '         MAXIMUM\n         SH    R3,=H'2'                LRECL FOR\n         EX    R3,*+8                    THIS FILE\n         B     *+10                        TO CLEAR\n         MVC   RECWORKA+1(0),RECWORKA        WORK AREA\n         MVC   RECLENV,0(R1)       GET ACTUAL LENGTH\n         LH    R2,RECLENV            OF THE DATA IN THIS\n         SH    R2,=H'4'                RECORD TO BE USED IN\n         STH   R2,RECLENV                COPY PROCESS AND SAVE\n         SH    R0,=H'4'            REDUCE BLOCK COUNT BY RDW\n         LA    R1,4(R1)            POINT TO DATA FOR THIS RECORD\n         CH    R2,=H'255'          IF RECORD IS\n         BNH   *+8                   OVER 255 BYTES\n         LH    R2,=H'255'              TRUNCATE FOR MOVE\n         CLC   RECLENV,=H'0'       IS THIS A NULL RECORD\n         BE    *+12                NO\n         NI    SWIT+4,X'7F'        NO TURN OFF NULL SWIT\n         B     PRTRECMV\n         MVC   RECWORKA(6),=C'(NULL)'   YES MOVE PHONY\n         MVC   RECWORKA+6(1),STOPPER      RECORD TO WORKAREA\n         OI    SWIT+4,X'80'        SET NULL RECORD SWIT\n         B     *+22\nPRTRECMV EQU   *\n         LR    R3,R2               MOVE\n         BCTR  R3,R0                 CURRENT\n         EX    R3,*+8                   RECORD\n         B     *+10                       TO THE\n         MVC   RECWORKA(0),0(R1)            WORK AREA\n         STM   R0,R1,CNTADDR       SAVE BLK CNT/BUFF ADDRESS\n         ZAP   HITSWIRE,=P'0'      ZERO NUM OF HITS IN RECORD\n         ZAP   PRTTABE1+10(2),=P'0'     ZERO NUM OF HITS IN 1ST SEG\n         ZAP   PRTTABE2+10(2),=P'0'     ZERO NUM OF HITS IN 2ND SEG\n         ZAP   PRTTABE3+10(2),=P'0'     ZERO NUM OF HITS IN 3RD SEG\n         TM    PARMSWIT+1,X'08'    IS THIS RECORD LEVEL LOGIC\n         BNO   RESCAN              NO\n         OI    SWIT+4,X'40'        SET 1ST PASS SWITCH\n         BAL   R4,SCANRTNE         GO TO SCANRTNE TO BUILD ARGUMENT\n*                                    FOUND PORTION OF THE BIT TABLE\n         NI    SWIT+4,X'BF'        TURN OFF 1ST PASS SWITCH\n         L     R5,PTRNSAVE+4       WERE ALL ARGS FOUND\n         CLC   0(32,R5),32(R5)       IN THE RECORD SCANNED\n         BNE   *+14                NO\n         XC    0(32,R5),0(R5)      CLEAR ARGUMENT FOUND PART OF TABLE\n         B     RESCAN              GO RESCAN FOR HITS AND COUNTS\n         XC    0(32,R5),0(R5)      CLEAR ARGUMENT FOUND PART OF TABLE\n         B     RESCAN+4            NO HITS NO RESCAN\nRESCAN   EQU   *\n         BAL   R4,SCANRTNE         CHECK FOR HIT/S\n         XR    R6,R6               GET NUM OF LINES TO\n         IC    R6,NOLNEHLD           BE PRINTED PER RECORD\n         LA    R5,PRTTABLE         POINT TO PRINT TABLE\n         LA    R1,RECWORKA         POINT TO CURRENT RECORD\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BNO   SETPHTSW\n         TM    SWIT+4,X'80'        IS THIS A NULL RECORD\n         BNO   *+12                NO\n         MVI   RECWORKA+6,C' '     YES CLEAR STOPPER\n         B     SETPHTSW\n         LH    R2,RECLENV          IS THIS MAX\n         CH    R2,=H'255'            RECORD SIZE\n         BNL   SETPHTSW            YES\n         AR    R2,R1               IF NOT CLEAR THE STOPPER\n         MVI   0(R2),C' '              CHARACTER FROM WORK AREA\nSETPHTSW EQU   *\n         OI    SWIT+2,X'04'        SET SWIT TO PRINT HITS/RECORD\nRECPRTLP EQU   *\n         LH    R3,8(R5)            MOVE\n         BCTR  R3,R0                 THIS\n         EX    R3,*+8                  PART\n         B     *+10                      OF REC\n         MVC   PRNTWRK+16(0),0(R1)         TO PRINT\n         LA    R3,1(R3)                      AREA AND\n         AR    R1,R3                           POINT PAST\n         LA    R3,PRTTABLE         IS THIS 1ST\n         CR    R3,R5                 SEG OF REC\n         BNE   CHKHITRE            NO\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BO    *+14                YES\n         MVC   PRNTWRK+129(3),BLANKS    NO - BLANK OUT LENGTH\n         B     CHKHITRE                   FIELD IN RECORD PRINT\n         LH    R3,RECLENV          PRINT OUT\n         CVD   R3,DWORD              LENGTH OF\n         UNPK  PRNTWRK+129(3),DWORD    RECORD IN\n         OI    PRNTWRK+131,X'F0'         1ST LINE\nCHKHITRE EQU   *\n         TM    SWIT,X'04'          ANY HITS IN REC\n         BNO   CLEARST             NO\n         TM    SWIT+2,X'04'        PRINT HITS/REC ?\n         BZ    CHKHITSG            NO\n         AP    HITSRECS,HITSWIRE   ADD NUM OF HITS/RECORD TO TOT PDS\n         AP    HITSWIRT,HITSWIRE   ADD NUM OF HITS/RECORD TO TOT MEM\n         AP    HITWIMEM,=P'1'      ADD 1 TO RECORDS HIT THIS MEMBER\n         UNPK  PRNTWRK+102(3),HITSWIRE  SEND NUM OF HITS\n         OI    PRNTWRK+104,X'F0'          IN RECORD TO PRINT\n         NI    SWIT+2,X'FB'        TURN OFF SWIT FOR HITS/RECORD\nCHKHITSG EQU  *\n         CP    10(2,R5),=P'0'      ANY HITS IN THIS REC SEGMENT\n         BNE   *+14                YES\n         MVC   PRNTWRK+106(22),PRNTWRK+105\n         B     CLEARST+6\n         UNPK  PRNTWRK+107(2),10(2,R5)  NUM OF HITS IN THE\n         OI    PRNTWRK+108,X'F0'          REC SEGMENT TO PRINT\n         L     R3,0(R5)            RESTORE ADDRESS OF FIRST HIT IN SEG\n         LA    R2,RECWORKA-1       SHOW\n         SR    R3,R2                 STARTING\n         CVD   R3,DWORD                LOCATION\n         UNPK  ARGLOC+2(3),DWORD         OF FIRST\n         OI    ARGLOC+4,X'F0'              ARG FOUND\n         XR    R2,R2\n         IC    R2,7(R5)            GET LENGTH OF FOUND ARGUMENT\n         AR    R3,R2               ENDING\n         CVD   R3,DWORD              LOCATION\n         UNPK  ARGLOC+6(3),DWORD       OF FIRST\n         OI    ARGLOC+8,X'F0'            ARG FOUND\n         MVC   PRNTWRK+110(11),ARGLOC   MOVE LOC OF FIRST ARG TO PRINT\n         MVC   PRNTWRK+123(3),4(R5)     MOVE NUM OF FIRST ARG TO PRINT\n         B     *+10\nCLEARST  EQU   *\n         MVC   PRNTWRK+102(27),PRNTWRK+101\n         TM    PARMSWIT,X'10'      ARE WE ONLY PRINTING HITS\n         BNO   *+12                NO\n         TM    SWIT,X'04'          YES - DID LINE HAVE A HIT\n         BNO   NEXREC              NO - BYPASS PRINT\n         ST    R1,FWORD            SAVE RECORD POINTER\n         TM    SWIT+2,X'02'        IS REC LEN GT 85\n         BZ    CLEARHS             NO - SINGLE LINE RECORD\n         TM    PARMSWIT,X'80'      IS NO LIST SWIT ON\n         BO    CLEARHS             YES - BYPASS SYSPRINT DETAILS\n         PUT   LIST,CC             YES - PRINT\n         L     R1,FWORD            RESTORE RECORD POINTER\n         MVI   CC,C' '                  CLEAR\n         MVC   PRNTWRK(106),CC            RESIDUAL\n         MVC   PRNTWRK+129(3),BLANKS        PRINT INFO\n         XR    R3,R3               UPDATE PRINT\n         IC    R3,LINCT              LINE COUNTER\n         LA    R3,1(R3)                AND SAVE FOR\n         STC   R3,LINCT                  OVERFLOW CNTL\n         LA    R5,12(R5)           LOOP BACK TO PRINT SEGMENTS\n         BCT   R6,RECPRTLP            2 AND 3 DEPENDING ON CNT IN R6\nCLEARHS  EQU   *\n         NI    SWIT,X'FB'          CLEAR HIT SWITCH\n         AP    RECSDSP,=P'1'       ADD 1 TO TOTAL RECORDS DISPLAYED\n         TM    PARMSWIT,X'80'      IS NO LIST SWIT ON\n         BO    BYLISTDT            YES - BYPASS SYSPRINT DETAILS\n         TM    SWIT+2,X'02'        IS REC LEN GT 85\n         BZ    *+14                NO GO PRINT SINGLE LINE\n         XR    R1,R1               PICK UP LINE\n         IC    R1,LINCT               COUNT AND GO\n         B     CHKDETOV                 CHECK OVERFLOW\n         PUT   LIST,CC\nBYLISTDT EQU   *\n         MVI   CC,C' '\n         MVC   PRNTWRK(8),CC\n         XR    R1,R1\n         IC    R1,LINCT\n         LA    R1,1(R1)\nCHKDETOV EQU   *\n         CH    R1,=H'56'\n         BNH   *+8\n         OI    SWIT+1,X'80'        SWITCH FOR HEADINGS\n         STC   R1,LINCT\nNEXREC   EQU   *\n         LM    R0,R1,CNTADDR\n         TM    SWIT+3,X'04'        IS RECFM VARIABLE\n         BO    *+12                YES\n         LH    R2,RECLEN           LRECL - FIXED\n         B     *+8\n         LH    R2,RECLENV          LRECL - VARIABLE\n         AR    R1,R2               POINT TO NEXT RECORD\n         SR    R0,R2               REDUCE BLOCK COUNT BY LAST RECORD\n         BC    4,ABND2             ERROR IF BLOCK COUNT GOES TO NEG\n         BC    2,PRINT\n         LA    R1,MEM\n         BAL   R2,READ\n         B     RESCNT2\nENDMEM   EQU   *\n         LM    R5,R9,READSAVE\n         TM    SWIT,X'01'          COPY OPERATION\n         BO    RESETMAD            YES COPY COMPLETE\n         TM    PARMSWIT,X'08'      IS THIS AND OPERATION\n         BNO   CHKHTLSR            NO - CHECK FOR HIT ON LAST READ\n         L     R5,PTRNSAVE+4       DID WE FIND ALL ARGUMENTS IN\n         CLC   0(32,R5),32(R5)       AND OPERATION OR DID PATTERNS\n*                                      MATCH IF WE HAD ARGS EXCLUDED\n         BNE   RESETMAD            NO\n         OI    SWIT,X'0C'          YES SET HIT SWITS FOR PDS AND MEM\n         AP    HITSMEMS,=P'1'      ADD 1 TO COUNT OF MEMBERS\n         B     COPY                  WITH HITS AND GO TO COPY\nCHKHTLSR EQU   *\n         TM    SWIT,X'04'          WAS HIT ON LAST RECORD\n         BO    COPY                YES\nRESETMAD EQU   *\n         BAL   R2,RESETADD\n         TM    SWIT,X'01'          DID WE COPY\n         BO    *+14                YES\n         AP    SCANRECS,SCANCNT    USE SCAN COUNT FOR TOTAL RECORD CNT\n         B     CLEARCTS\n         AP    SCANRECS,COPYCNT    USE COPY COUNT FOR TOTAL RECORD CNT\n         UNPK  PRNTWRKI+15(6),COPYCNT   PUT # RECORDS\n         OI    PRNTWRKI+20,X'F0'          TO INDEX LIST\n         UNPK  PRNTWRKI+22(6),HITWIMEM  PUT LINES HIT\n         OI    PRNTWRKI+27,X'F0'          TO INDEX LIST\n         UNPK  PRNTWRKI+29(7),HITSWIRT  PUT TOTAL HITS FOR\n         OI    PRNTWRKI+35,X'F0'          MEM TO INDEX LIST\n         UNPK  PRNTWRKI+37(4),ARGWIMEM  PUT ARGS FOUND\n         OI    PRNTWRKI+40,X'F0'          TO INDEX LIST\n         TM    PARMSWIT,X'80'      IS NO LIST SWIT ON\n         BNO   *+10                NO\n         MVC   PRNTWRKI+9(5),ASTERICS   YES - SHOW ***** FOR PAGE NO\n         TM    PARMSWIT,X'40'      IS DISK ADDRESS SWIT ON\n         BNO   WRINDEX             NO\n         LA    R1,MEM              GET DCB ADDRESS OF MEM DCB\n         L     R1,44(R1)           GET DEB ADDRESS\n         L     R0,TTRN             PICK UP TTR OF RECORD\n         LA    R2,DWORD            POINT TO AREA WHERE CONVERT\n*                                    ROUTINE WILL STORE DISK ADDR\n         LA    R15,16              CVT\n         L     R15,0(R15)            ADDR\n         L     R15,28(R15)         ADDRESS CONVERT ROUTINE(IECPCNVT)\n         STM   R9,R13,TTMSAVE      SAVE REGS\n         CNOP  2,4                 ALIGN\n         BALR  R14,R15             GO TO CONVERT ROUTINE\n         LM    R9,R13,8(R14)       RESTORE REGS\n         B     *+24\nTTMSAVE  DS    5F\n         UNPK  PRNTWRKI+42(11),DWORD+3(6)    PUT ADDRESS\n         TR    PRNTWRKI+42(10),TRTAB-240       OF MEMBER TO\n         MVI   PRNTWRKI+52,X'40'                 PRINT BUFFER\nWRINDEX  EQU   *\n         PUT   INDEX,CCI           WRITE INDEX RECORD\n         MVI   CCI,C' '            RESET SINGLE SPACE\n         NI    SWIT+1,X'DF'        TURN OFF PAGE # SWITCH\n         XR    R3,R3               UPDATE THE\n         IC    R3,LINCTI             LINE COUNT\n         LA    R3,1(R3)                FOR INDEX\n         STC   R3,LINCTI                 LISTING\nCLEARCTS EQU   *\n         ZAP   SCANCNT,=P'0'\n         ZAP   COPYCNT,=P'0'\n         ZAP   HITWIMEM,=P'0'\n         ZAP   ARGWIMEM,=P'0'\n         ZAP   HITSWIRT,=P'0'\n         NI    SWIT,X'2A'\n         TM    PARMSWIT,X'08'      IS THIS AND OPERATION\n         BNO   GNEXTDIR            NO\n         L     R5,PTRNSAVE+4       YES - CLEAR HITS FOR THIS\n         XC    0(32,R5),0(R5)        MEMBER IN BIT PATTERN TABLE\n         B     GNEXTDIR\n         EJECT\nERROR2   EQU   *\n         MVI   CC,C'0'\n         MVI   PRNTWRK,X'40'\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   PRNTWRK(32),0(R5)\n         PUT   MESSAGE,CC\n         IC    R1,LINCTM           BUMP LINCTM\n         LA    R1,7(R1)              UP BY 7 FOR\n         STC   R1,LINCTM               ERROR2 COND\n         MVI   RETCODEF,X'08'\n         MVI   RETCODE,X'08'\n         TM    SWIT+1,X'40'\n         BO    BUMPTIOT\nENDUP    EQU   *\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   PRNTWRK(35),TOTSMSG\n         UNPK  PRNTWRK+36(7),SCANMEMS\n         OI    PRNTWRK+42,X'F0'\n         MVI   CC,C'0'\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(35),TOTSMSG+35\n         UNPK  PRNTWRK+36(7),SCANRECS\n         OI    PRNTWRK+42,X'F0'\n         MVI   CC,C' '\n         PUT   MESSAGE,CC\n         TM    SWIT,X'02'          DID WE GET BUFFERS\n         BNO   CHECKHIT            NO\n         LM    R0,R1,IOARSAVE      YES\n         FREEMAIN R,LV=(R0),A=(R1)      FREE GOTTEN CORE\nCHECKHIT EQU   *\n         TM    SWIT,X'08'          DID WE HAVE A HIT IN THIS PDS\n         BO    PRNTHITS            YES\n         MVI   RETCODEF,X'04'      NO - SHOW NO HITS THIS PDS\n         CLI   RETCODE,X'04'       IS A PREV RET CODE HIGHER\n         BH    *+8                 YES - BYPASS\n         MVI   RETCODE,X'04'       NO - SET RETURN CODE\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVI   CC,C'0'\n         MVC   PRNTWRK(L'NOHITSM),NOHITSM\n         PUT   MESSAGE,CC\n         IC    R1,LINCTM           BUMP LINCTM\n         LA    R1,13(R1)             UP BY 13 FOR\n         STC   R1,LINCTM               NO HIT COND\n         B     CLOSEDA\nPRNTHITS EQU   *\n         MVI   RETCODEF,X'00'      SHOW RC FOR HITS THIS PDS\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   PRNTWRK(27),HITSMSG\n         UNPK  PRNTWRK+28(7),HITSMEMS\n         OI    PRNTWRK+34,X'F0'\n         MVI   CC,C'0'\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(27),HITSMSG+27\n         UNPK  PRNTWRK+28(7),HITSRECS\n         OI    PRNTWRK+34,X'F0'\n         MVI   CC,C' '\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(27),ARGSMSG\n         UNPK  PRNTWRK+28(7),ARGTOTAL\n         OI    PRNTWRK+34,X'F0'\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(27),RECDISPM\n         UNPK  PRNTWRK+28(7),RECSDSP\n         OI    PRNTWRK+34,X'F0'\n         TM    PARMSWIT,X'80'      IS NO LIST SWITCH ON\n         BNO   *+10                NO\n         MVC   PRNTWRK+28(7),ASTERICS   YES - SHOW ******* FOR\n*                                         NO OF RECORDS DISPLAYED\n         PUT   MESSAGE,CC\n         ZAP   PAGESPDS,PAGECNT\n         SP    PAGESPDS,PAGEBEGP\n         AP    PAGESPDS,=P'1'\n         MVC   PRNTWRK(27),PGSDISPM\n         UNPK  PRNTWRK+28(7),PAGESPDS\n         OI    PRNTWRK+34,X'F0'\n         TM    PARMSWIT,X'80'      IS NO LIST SWITCH ON\n         BNO   *+10                NO\n         MVC   PRNTWRK+28(7),ASTERICS   YES - SHOW ******* FOR\n*                                         PAGES PRINTED IN PDS\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(27),PGRANGES\n         UNPK  PRNTWRK+28(7),PAGEBEGP\n         OI    PRNTWRK+34,X'F0'\n         TM    PARMSWIT,X'80'      IS NO LIST SWITCH ON\n         BNO   *+10                NO\n         MVC   PRNTWRK+28(7),ASTERICS   YES - SHOW ******* FOR\n*                                         FIRST PAGE IN THIS PDS\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(5),PGRANGEE\n         UNPK  PRNTWRK+28(7),PAGECNT\n         OI    PRNTWRK+34,X'F0'\n         TM    PARMSWIT,X'80'      IS NO LIST SWITCH ON\n         BNO   *+10                NO\n         MVC   PRNTWRK+28(7),ASTERICS   YES - SHOW ******* FOR\n*                                         LAST PAGE IN THIS PDS\n         PUT   MESSAGE,CC\n         IC    R1,LINCTM           BUMP LINCTM\n         LA    R1,19(R1)             UP BY 19 FOR\n         STC   R1,LINCTM               NORMAL COND\n         ZAP   PAGEBEGP,=P'1'      POINT TO NEXT PAGE\n         AP    PAGEBEGP,PAGECNT      TO PROCESS NEXT PDS\nCLOSEDA  EQU   *\n         CLOSE (DIR)\n         CLOSE (MEM)\n         CALL  DATETIME,(STOPTIME,JULDT,DODDT,STOPCLDT,CMPLCD)\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   PRNTWRK(L'STARTMSG),STARTMSG\n         MVC   PRNTWRK+L'STARTMSG(L'STARTSTS),STARTSTS\n         MVI   CC,C'0'\n         PUT   MESSAGE,CC\n         MVC   PRNTWRK(L'STOPMSG),STOPMSG\n         MVC   PRNTWRK+L'STARTMSG(L'STOPSTS),STOPSTS\n         MVI   CC,C' '\n         PUT   MESSAGE,CC\nBUMPTIOT EQU   *\n         XC    SWIT(1),SWIT        RESET SWITCHES FOR\n         NI    SWIT+1,X'1F'          POSSIBLE NEXT PASS\n         ZAP   SCANMEMS,=P'0'      ZERO OUT\n         ZAP   SCANRECS,=P'0'        COUNTERS\n         ZAP   SCANCNT,=P'0'           FOR NEXT\n         ZAP   COPYCNT,=P'0'             PASS IF\n         ZAP   HITSMEMS,=P'0'              MORE PDS\n         ZAP   HITWIMEM,=P'0'                CARDS ARE\n         ZAP   HITSRECS,=P'0'                  IN JCL WITH\n         ZAP   ARGWIMEM,=P'0'                    DDNAME PROCXXXX\n         ZAP   ARGTOTAL,=P'0'                      OR WITH DDNAME\n         ZAP   RECSDSP,=P'0'                         IN FORM PDSXXXX\n         MVI   LINCTI,X'3B'        REST LINE COUNT - INDEX LISTING\n         BAL   R2,RESETADD         GO RESET I/O BLOCK POINTERS\n         TM    PARMSWIT,X'20'      IS THIS CONSOLE ENTRY\n         BNO   NEXTDDEN            NO - CONTINUE\n         XR    R1,R1               YES\n         IC    R1,RETCODEF           PUT\n         CVD   R1,DWORD                RC\n         UNPK  WTORC,DWORD+6(2)          TO\n         OI    WTORC+1,X'F0'               WTO\n         XC    WTODSN,WTODSN       PUT DSN\n         MVC   WTODSN,JFCB           TO WTO\n         LA    R1,WTOMSG           PUT OUT\n         WTO   MF=(E,(R1))           END WTO\nNEXTDDEN EQU   *\n         L     R3,TIOTHOLD         POINT TO NEXT DD ENTRY\n         XR    R4,R4               CHECK FOR MORE PDS\n         B     TIOTLOOP              DD CARDS IN THE JCL\nOPTPRINT EQU   *\n         L     R3,16               POINT TO CVT. ADDR IS IN LOW STORAGE\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS, \"0\" OFF CVT\n         L     R3,4(,R3)           POINT TO TCB, \"4\" OFF TCB/ASCB WORDS\n         L     R3,X'B4'(,R3)       POINT TO JSCB. X'B4' OFF CURRENT TCB\n         L     R3,X'108'(,R3)      POINT TO PSCB. X'108' OFF THE JSCB\n         LTR   R3,R3               IS THERE A PSCB\n         BZ    *+14                NO\n         MVC   OPTNSARG,0(R3)      MOVE USERID IN FROM 0 OFF THE PSCB\n         B     OPTPRCHK\n         TM    PARMSWIT,X'A9'      DID ANY DEFAULTS CHANGE\n         BZ    OPTWRITE            NO - GO WRITE OPTIONS MESSAGE\n         TM    PARMSWIT,X'20'      WERE ARG ENTERED VIA CONSOLE\n         BZ    *+10                NO\n         MVC   OPTNSARG,=C'CONSOLE'     YES - SHOW ARGS ENT VIA CONS\nOPTPRCHK EQU   *\n         TM    PARMSWIT,X'81'      WAS PRINT DEFAULT CHANGED\n         BZ    *+28                NO\n         TM    PARMSWIT,X'80'      WAS NOLIST OR DS(*) SPECIFIED\n         BZ    *+14                NO\n         MVC   OPTNSPRT,=C'NONE'   SHOW NO SYSPRINT\n         B     *+10\n         MVC   OPTNSPRT,=C'FULL'   SHOW FULL LIST\n         TM    PARMSWIT,X'08'      IS THIS AND LOGIC\n         BZ    OPTWRITE            NO\n         TM    PARMSWIT+1,X'08'    IS THIS RECORD LEVEL LOGIC\n         BZ    *+14                NO\n         MVC   OPTNSLOG,=C'REC'    YES SHOW RECORD LOGIC\n         B     OPTWRITE\n         MVC   OPTNSLOG,=C'AND'    SHOW AND LOGIC\nOPTWRITE EQU   *\n         MVC   PRNTWRK(L'OPTNSMSG),OPTNSMSG\n         MVI   CC,C'0'\n         PUT   MESSAGE,CC\n         MVI   PRNTWRK+L'STUBMEML,C' '\n         MVC   PRNTWRK+L'STUBMEML+1(38),PRNTWRK+L'STUBMEML\n         MVC   PRNTWRK(L'STUBMEML),STUBMEML\n         TM    PARMSWIT+1,X'F0'\n         BNZ   *+14\n         MVC   PRNTWRK+L'STUBMEML(11),=C'ALL MEMBERS'\n         B     CHKARGTB\n         LA    R7,PRNTWRK+L'STUBMEML\n         LR    R8,R7\n         TM    PARMSWIT+1,X'80'\n         BNO   PRTRANGE\n         MVC   0(7,R7),=C'FROMTO='\n         CLC   MEMFROM,HEXZEROS\n         BNE   *+14\n         MVC   7(8,R7),=C'**START*'\n         B     *+10\n         MVC   7(8,R7),MEMFROM\n         MVI   15(R7),C':'\n         LA    R7,16(R7)\n         CLC   MEMTO,FS\n         BNE   *+14\n         MVC   0(8,R7),=C'***END**'\n         B     *+10\n         MVC   0(8,R7),MEMTO\n         LA    R7,8(R7)\nPRTRANGE EQU   *\n         TM    PARMSWIT+1,X'40'\n         BNO   *+34\n         CR    R7,R8\n         BE    *+12\n         MVI   0(R7),C','\n         LA    R7,1(R7)\n         MVC   0(6,R7),=C'RANGE='\n         MVC   6(3,R7),MEMRANGE\n         LA    R7,9(R7)\n         TM    PARMSWIT+1,X'20'\n         BNO   *+34\n         CR    R7,R8\n         BE    *+12\n         MVI   0(R7),C','\n         LA    R7,1(R7)\n         MVC   0(8,R7),=C'PATTERN='\n         MVC   8(8,R7),MEMPATRN\n         LA    R7,16(R7)\n         TM    PARMSWIT+1,X'10'\n         BNO   CHKARGTB\n         CR    R7,R8\n         BE    *+12\n         MVI   0(R7),C','\n         LA    R7,1(R7)\n         MVC   0(7,R7),=C'STRING='\n         XR    R8,R8\n         IC    R8,MEMSTRNL\n         EX    R8,*+8\n         B     CHKARGTB\n         MVC   7(0,R7),MEMSTRNG\nCHKARGTB EQU   *\n         MVI   CC,C' '\n         PUT   MESSAGE,CC\n         MVI   PRNTWRK+L'STUBMEML,C' '\n         MVC   PRNTWRK+L'STUBMEML+1(67),PRNTWRK+L'STUBMEML\n         TM    PARMSWIT,X'02'      WAS TOTALS BY ARG ASKED FOR\n         BNO   CLOSEUR             NO\n         TM    SWIT+3,X'08'        WERE THERE ANY HITS IN RUN\n         BNO   CLOSEUR             NO\n         CP    ARGCT,=P'1'         IS THERE ONLY 1 VALID ARGUMENT\n         BNE   *+12                NO - SORT\n         L     R8,ARGSAVE+4        YES - BYPASS THE\n         B     PARGTABL              RESORT OF ARG TABLE\n         OI    SWIT+3,X'10'        GO SORT AGUMENT TABLE\n         BAL   R2,SORTRTNE           BY ARGUMENT NUMBER\n         L     R8,ARGSAVE+4\nPARGTABL EQU   *\n         CLI   ARGNO,X'00'         IS THIS END OF ARGUMENT TABLE\n         BE    CLOSEUR             YES\n         CP    ARGTARG,=P'0'       DID THIS ARGUMENT HAVE ANY HITS\n         BE    PARGTABB            NO - BYPASS\n         TM    ARGFL,X'10'         WAS THIS AN EXCLUDE ARGUMENT\n         BO    PARGTABB            YES - BYPASS\n         BAL   R2,CHKARGTH         GO CHECK FOR OVERFLOW\n         MVC   PRNTWRK(L'ARGNO),ARGNO   ARGUMENT TO PRINT\n         UNPK  PRNTWRK+4(7),ARGTARG     TOTAL NUMBER OF\n         OI    PRNTWRK+10,X'F0'           HITS TO PRINT\n         UNPK  PRNTWRK+12(5),ARGTMEM    TOTAL MEMBERS WITH HITS\n         OI    PRNTWRK+16,X'F0'           FOR THIS ARGUMENT TO PRINT\n         UNPK  PRNTWRK+18(5),ARGTPDS    TOTAL PDSES WITH HITS\n         OI    PRNTWRK+22,X'F0'           FOR THIS ARGUMENT TO PRINT\n         MVC   PRNTWRK+24(108),PRNTWRK+23    CLEAR REST OT PRINT AREA\n         TM    ARGFL,X'08'         DOES ARGUMENT CONTAIN PATTERN/S\n         BNO   *+10                NO\n         MVC   PRNTWRK+24(3),PRNTTAB    YES - SHOW IT\n         XR    R3,R3\n         IC    R3,ARGLNG           MOVE THE\n         STC   R3,*+5                ARGUMENT\n         MVC   PRNTWRK+31(0),ARG       TO PRINT\n         LA    R3,1(R3)\n         CVD   R3,DWORD            MOVE THE\n         OI    DWORD+7,X'0F'         ARG LENGTH\n         UNPK  PRNTWRK+28(2),DWORD     TO PRINT\n         PUT   MESSAGE,CC          PRINT THE ARGUMENT\n         IC    R3,LINCTM2\n         LA    R3,1(R3)\n         STC   R3,LINCTM2\nPARGTABB EQU   *\n         LA    R8,ARGENTSZ(R8)     POINT TO NEXT ARG IN TABLE\n         B     PARGTABL\nCHKARGTH EQU   *\n         CLI   LINCTM2,X'38'       IF LINE COUNT\n         BH    *+10                  IS LESS THAN\n         MVI   CC,C' '                 57 SET SINGLE\n         BR    R2                        SPACE AND RET\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVC   CC(L'HDRM2T1),HDRM2T1\n         PUT   MESSAGE,CC          PRINT 1ST HEADING\n         MVC   CC(L'HDRM2T2),HDRM2T2\n         PUT   MESSAGE,CC          PRINT 2ND HEADING\n         MVC   CC(L'HDRM2T3),HDRM2T3\n         PUT   MESSAGE,CC          PRINT 3RD HEADING\n         MVI   PRNTWRK,C' '\n         MVC   PRNTWRK+1(131),PRNTWRK\n         MVI   CC,C'0'             SET DOUBLE SPACE FOR NEXT LINE\n         MVI   LINCTM2,X'05'       RESET OVERFLOW COUNT\n         BR    R2\nCLOSEUR  EQU   *\n         CLOSE (LIST,,MESSAGE,,INDEX)   CLOSE PRINT FILES\n         TM    PARMSWIT,X'20'      WERE ARGS ENTERED VIA CONSOLE\n         BO    FREETAB             YES - BYPASS CLOSE\n         CLOSE (CARD)              NO - CLOSE CARD FILE\nFREETAB  EQU   *\n         TM    SWIT+1,X'08'        DID WE GET AN AREA FOR ARG. TAB.\n         BNO   FREEBITT            NO - GET CHECK FOR BIT TABLE\n         LM    R0,R1,ARGSAVE            YES FREE\n         FREEMAIN R,LV=(R0),A=(R1)        THE AREA\nFREEBITT EQU   *\n         TM    SWIT+1,X'01'        DID WE GET AREA FOR BIT TABLE\n         BNO   FREEWRK             NO\n         LM    R0,R1,PTRNSAVE           YES FREE\n         FREEMAIN R,LV=(R0),A=(R1)        THE AREA\nFREEWRK  EQU   *\n         L     R8,SAVE+4           RESTORE CALLER SAVE AREA\n         LM    R0,R1,WORKSAVE\n         FREEMAIN R,LV=(R0),A=(R1)      FREE SAVE/WORK AREA\n         LR    R13,R8              POINT TO CALLER SAVE ARE\n         XR    R15,R15             PICK UP HIGH\n         IC    R15,RETCODE           RETURN CODE\n         RETURN (14,12),RC=(15)\n         EJECT\nREAD     EQU   *\n         STM   R5,R9,READSAVE      SAVE REGS\n         LR    R7,R1               DCB TO BE READ\n         TM    SWIT,X'80'          ARE WE READING MEMBER DCB\n         BO    READMEM             YES\n         LM    R5,R6,DIRDECBS      DECB ADDRESSES FOR DIRECTORY\n         LM    R8,R9,DIRBADDR      DIRECTORY BUFFERS\n         TM    SWIT+4,X'20'        IS DSORG PS\n         BNO   *+12                NO\n         L     R1,IOARSAVE+4       YES R1 TO DUMMY DIR ENTRY\n         B     READRTN               AND EXIT ROUTINE WITHOUT READ\n         TM    SWIT,X'20'          SUB ENTRY FOR DIRECTORY\n         BO    READSUB             YES\n         B     READFRST\nREADMEM  EQU   *\n         LM    R5,R6,MEMDECBS      DECB ADDRESSES FOR MEMBER DCB\n         LM    R8,R9,MEMBADDR      MEMBER BUFFERS\n         TM    SWIT,X'40'          SUB ENTRY FOR MEMBER DCB\n         BO    READSUB             YES\nREADFRST EQU   *\n         READ  (R5),SF,(R7),(R8),'S',MF=E    READ FIRST BLOCK\nREADSUB  EQU   *\n         TM    SWIT,X'10'          IS THIS FLUSH MODE\n         BO    CHECK               YES\n         READ  (R6),SF,(R7),(R9),'S',MF=E    ALL READS BUT FIRST\nCHECK    EQU   *\n         CHECK (R5)\n         TM    SWIT,X'10'          IS THIS FLUSH MODE\n         BC    1,READRTN           YES\n         TM    SWIT,X'80'          ARE WE READING MEMBER DCB\n         BC    1,*+12              YES\n         LA    R1,DIRDECBS         NO\n         B     *+16\n         LA    R1,MEMDECBS\n         L     R7,16(R5)           SAVE IOB\n         ST    R7,IOBADDR            ADDRESS\n         XR    R5,R6               REVERSE THE\n         XR    R6,R5                 DECB ADDRESSES\n         XR    R5,R6                   FOR THE NEXT\n         STM   R5,R6,0(R1)               PASS\n         XR    R8,R9               REVERSE THE\n         XR    R9,R8                 BUFFER ADDRESSES\n         XR    R8,R9                   FOR THE NEXT\n         STM   R8,R9,8(R1)               PASS\n         LR    R1,R9               MAKE R1 POINT TO BLOCK\nREADRTN  EQU   *\n         LM    R5,R9,READSAVE      RESTORE REGS\n         BR    R2                  RETURN\n         EJECT\nFIND     EQU   *\n         TM    SWIT+4,X'20'        IS DSORG PS\n         BNO   FINDMEM             NO USE FIND FOR BPAM\n         POINT MEM,TTRN\n         B     TESTPFRC\nFINDMEM  EQU   *\n         FIND  MEM,TTRN,C\nTESTPFRC EQU   *\n         LTR   R15,R15             WAS FIND/POINT SUCCESFULL\n         BCR   8,R2                YES\n         ABEND 001,DUMP\n         EJECT\nSCANRTNE EQU   *\n         LA    R1,RECWORKA         POINT R1 TO AREA TO BE SCANNED\n         TM    SWIT+4,X'80'        IS THIS A NULL RECORD\n         BNO   *+12                NO\n         LA    R3,RECWORKA+6       YES BYPASS MOVE OF\n         B     TRTLOOP1-2            STOPPER TO WORKAREA\n         LR    R3,R1               MOVE\n         TM    SWIT+3,X'04'          STOPPER\n         BO    *+12                    CHARACTER\n         AH    R3,RECLEN                 ONE BYTE\n         B     *+26                        BEYOND REC\n         CLC   RECLENV,=H'255'               AND POINT\n         BNH   *+12                            R3 THERE\n         AH    R3,=H'255'                        TO COMPARE\n         B     *+8                                  END OF SCAN\n         AH    R3,RECLENV                             WHEN RECORD\n         MVC   0(1,R3),STOPPER                          LEN EXCEEDED\n         XR    R2,R2\nTRTLOOP1 EQU   *\n         TRT   0(256,R1),TRTTAB    TRANSLATE AND TEST\n         CR    R1,R3               DID WE HIT STOPPER\n         BCR   8,R4                YES - NO HITS\n         BCTR  R2,R0               REDUCE FUNCTION BYTE BY 1\n         MH    R2,ARGSZHLD         POINT TO FIRST ENTRY IN\n         L     R8,ARGSAVE+4          THE ARGUMENT TABLE THAT\n         AR    R8,R2                   BEGINS WITH THIS CHARACTER\n         XR    R2,R2\nTRTLOOP2 EQU   *\n         IC    R2,ARGLNG           GET LENGTH OF ARGUMENT\n         TM    ARGFL,X'08'         IS ARGUMENT A PATTERN\n         BNO   EXCOMP              NO USE REGULAR COMPARE\n         NI    SWIT+2,X'EF'        TURN OFF UNEQUAL COMPARE SWITCH\n         ST    R4,PTRTSAVE         SAVE SCANRTNE RETURN\n         LA    R5,ARG              POINT R5 TO ARGUMENT\n         BAL   R4,PATTRTNE         GO COMPARE DATA TO PATTERENED ARG\n         L     R4,PTRTSAVE         RESTORE SCANRTNE RETURN\n         TM    SWIT+2,X'10'        IS UNEQUAL COMPARE SWITCH ON\n         BO    TRTLOOP3            YES - CONTINUE SEARCH\n         B     *+12                NO - ARG MATCHES WITH DATA\nEXCOMP   EQU   *\n         EX    R2,COMPARE          IS THIS THE ARGUMENT\n         BNE   TRTLOOP3            NO\n         TM    ARGFL,X'04'         DOES ARGUMENT HAVE SEARCH LIMITS\n         BNO   *+16                NO\n         BAL   R7,LIMITRTE         YES - GO SEE IF W/I LIMITS\n         TM    SWIT+3,X'20'        WAS FOUMD ARGUMENT W/I LIMITS\n         BNO   TRTLOOP3            NO\n         TM    SWIT+4,X'80'        IS THIS A NULL RECORD\n         BNO   *+22                NO\n         CLI   ARGLNG,X'05'        IF NULL\n         BNE   TRTLOOP3              RECORD ALLOW\n         CLC   ARG(6),=C'(NULL)'       ONLY THIS\n         BNE   TRTLOOP3                  ARGUMENT\n         TM    SWIT,X'01'          ARE WE COPYING\n         BO    PROCESSH            YES\n         TM    PARMSWIT,X'08'      IS THIS AND PROCESSING\n         BO    SETBITSF            YES GO SET BIT FOUND\n         OI    SWIT,X'0C'          SET HIT SWITS FOR PDS AND MEM\n         BR    R4                  RETURN\nSETBITSF EQU   *\n         L     R5,PTRNSAVE+4       POINT TO FOUND\n         XR    R6,R6                 PART OF BIT TABLE\n         IC    R6,ARGNOBIN         GET ARG NUM OF FOUND ARG\n         BAL   R7,BITSETR          GO SET BIT\n         B     TRTLOOP3            CONTINUE SEARCH\nPROCESSH EQU   *\n         TM    SWIT+4,X'40'        IS THIS FIRST PASS IN COPY\n         BO    SETBITSF              TO SET BIT TABLE FOR RECORD LOGIC\n         OI    SWIT,X'04'          SET HIT SWITCH FOR MEM\n         AP    HITSWIRE,=P'1'      ADD 1 TO NUM OF HITS IN THIS REC\n         BAL   R7,PRNTBRTE         GO FILL IN PRINT SEGMENT TABLE\n         AP    ARGTARG,=P'1'       ADD 1 TO THE TOTAL NUMBER OF\n*                                    TIMES ARGUMENT WAS FOUND IN RUN\n         CLC   ARGDDNAM,DDNAME     ARE WE IN SAME PDS AS\n*                                    LAST HIT FOR THIS ARG.\n         BE    *+26                YES - GO CHECK HIT FLAG\n         MVC   ARGDDNAM,DDNAME     NO - PUT PDS DDNAME IN\n*                                    THIS ARG. TABLE ENTRY\n         AP    ARGTPDS,=P'1'       ADD 1 TO THE TOTAL NUMBER OF PDSES\n*                                    THAT HAVE A HIT FOR THIS ARGUMENT\n         XC    ARGMEM,ARGMEM       CLEAR MEM NAME FOR NEW PDS\n         NI    ARGFL,X'DF'         CLEAR ARGUMENT FOUND FLAG\n         TM    ARGFL,X'20'         IS ARGUMENT FOUND FLAG ON\n         BO    *+14                YES - BYPASS\n         AP    ARGTOTAL,=P'1'      ADD 1 TO COUNT OF ARGUMENTS\n*                                    FOUND WITHIN CURRENT DDNAME\n         OI    ARGFL,X'20'         TURN ON ARGUMENT FOUND FLAG\n         CLC   ARGMEM,MEMBER       ARE WE IN SAME MEMBER AS\n*                                    LAST HIT FOR THIS ARGUMENT\n         BE    *+20                YES - GO CHECK HIT FLAG\n         MVC   ARGMEM,MEMBER       NO - PUT MEMBER NAME IN\n*                                    THIS ARGUMENT TAB ENTRY\n         AP    ARGTMEM,=P'1'       ADD 1 TO THE TOTAL NUMBER OF MEMBERS\n*                                    THAT HAVE A HIT FOR THIS ARGUMENT\n         NI    ARGFL,X'BF'         CLEAR ARGUMENT FOUND FLAG\n         TM    ARGFL,X'40'         IS ARGUMENT FOUND FLAG ON\n         BC    1,TRTLOOP3          YES - CONTINUE LINE SEARCH\n         AP    ARGWIMEM,=P'1'      ADD 1 TO COUNT OF ARGUMENTS\n*                                    FOUND WITHIN CURRENT MEMBER\n         OI    ARGFL,X'40'         TURN ON ARGUMENT FOUND FLAG\nTRTLOOP3 EQU   *\n         TM    ARGFL,X'80'         IS THIS THE LAST ENTRY IN ARGUMENT\n*                                    TABLE BEGINNING WITH THE CHARACTER\n         BO    *+12                YES\n         LA    R8,ARGENTSZ(R8)     NO - GO LOOK\n         B     TRTLOOP2              AT NEXT ARG.\n         LA    R1,1(R1)            RESUME THE SCAN\n         B     TRTLOOP1              AT NEXT CHARACTER\nCOMPARE  EQU   *\n         CLC   0(0,R1),ARG\n         EJECT\nBITSETR  EQU   *\n         ST    R7,FWORD            SAVE RETURN ADDRESS\n         BCTR  R6,R0               REDUCE ARGUMENT NUMBER BY ONE TO\n*                                    MAKE RELATIVE TO BEGINING OF TAB\n         XR    R7,R7               DIV ARGUMENT BY\n         SRDL  R6,3                  EIGHT FOR BYTE\n         SRL   R7,29               USE LO-ORDER THREE BITS AS\n*                                    AN INDEX TO SET CORRECT BIT\n*                                      000-111 WILL  SET BITS 1 T0 8\n         AR    R5,R6               PICK UP CORRECT\n         IC    R6,0(R5)              BYTE FOR ARGUMENT\n         IC    R7,BITSETTB(R7)     TURN ON BIT AND\n         OR    R6,R7                 RESTORE THE BTYE\n         STC   R6,0(R5)                IN THE PAT TABLE\n         L     R7,FWORD            RESTORE RETURN ADDRESS\n         BR    R7                  RETURN\n         EJECT\nPATTRTNE EQU   *\n         TM    SWIT+2,X'C0'        DID WE ENTER TO CHECK FOR PATTERN\n         BZ    COMPPATT            NO - GO COMPARE\n         NI    SWIT+2,X'9F'        TURN OFF 40 BIT AND THE 20 BIT.\n*                                    40 INDICATES THAT +!@#(S) FOUND.\n*                                      20 INDICATES THEY ARE IN POS 1.\n         LR    R3,R2               SAVE LENGTH\nCHKPLOOP EQU   *\n         LA    R6,PATRNTAB\nCHKPTLOP EQU   *\n         CLC   0(1,R5),0(R6)       IS THIS A PATTERN CHARACTER\n         BE    *+20                YES\n         LA    R6,2(R6)            GET NEXT PATTERN TABLE ENTRY\n         CLI   0(R6),C'*'          IS IT END OF TABLE\n         BE    CHKPBUMP            YES\n         B     CHKPTLOP            NO NEXT ENTRY IN PATTERN TABLE\n         CR    R3,R2               YES - IF FIRST BYTE\n         BNE   *+10                  OF ARGUMENT HAS PATT\n         OI    SWIT+2,X'20'            CHARACTER IT WILL BE\n         BR    R4                        TREATED AS AN ERROR\n         OI    SWIT+2,X'40'        SHOW ARG CONTAINS PATT CHAR/S(+!@#)\n         BR    R4\nCHKPBUMP EQU   *\n         LA   R5,1(R5)             CHECK NEXT BYTE\n         BCT  R2,CHKPLOOP            FOR PATTERN CHAR\n         BR   R4\nCOMPPATT EQU  *\n         STM  R1,R4,PTRTSAVE+4     SAVE REGS FOR SUB ROUTINE\n         LR   R3,R1                ADDRESS OF DATA\n         LR   R4,R2                LENGTH OF DATA\n         LA   R4,1(R4)             UP LENGTH BY ONE BECAUSE IT IS\n*                                    STORED MINUS 1 IN ARGUMENT TAB\nCMPPLOOP EQU *\n         LA   R1,PATRNTAB          POINT TO PATTERN TABLE\nCMPTLOOP EQU  *\n         CLC  0(1,R5),0(R1)        DOES ARGUMENT BYTE HAVE PAT CHAR\n         BE   *+20                 YES\n         LA   R1,2(R1)             NO - LOOP\n         CLI  0(R1),C'*'             THRU PATTERN\n         BNE  CMPTLOOP                 TABLE ENTRIES\n         B    *+16                 NOT A PATTERN\n         CLI  0(R1),C'+'           IS THIS PATTERN CHARACTER FOR ALL\n         BE   CMPPBUMP             YES - BYPASS COMPARE\n         B    CMPALPNU             NO - GO CHECK ALPHA/NUMERIC\n         CLC  0(1,R3),0(R5)        IS BYTE IN DATA EQUAL TO\n*                                    THE BYTE IN ARGUMENT TABLE\n         BE   CMPPBUMP             IF EQUAL GO TO NEXT BYTE\nCMPNTFND EQU  *\n         OI   SWIT+2,X'10'         IF NOT TURN ON UNEQUAL SWIT\n         B    COMPEXIT             EXIT ROUTINE\nCMPALPNU EQU  *\n         MVC  TRTTABHD,TRTTAB      SAVE ARGUMENTS TRTTAB\n         MVI  TRTTAB,X'01'\n         MVC  TRTTAB+1(255),TRTTAB\n         TM   1(R1),X'80'          DOES PATTERN INDICATE NUMERIC\n         BNO  *+10                 NO\n         XC   TRTAB09,TRTAB09      YES - CLEAR NUMERICS\n         TM   1(R1),X'40'          DOES PATTERN INDICATE ALPHA\n         BNO  *+40                 NO\n         XC   TRTABAIL,TRTABAIL    CLEAR\n         XC   TRTABJRL,TRTABJRL      LOWER\n         XC   TRTABSZL,TRTABSZL        CASE\n         XC   TRTABAIU,TRTABAIU    CLEAR\n         XC   TRTABJRU,TRTABJRU      UPPER\n         XC   TRTABSZU,TRTABSZU        CASE\n         XR   R2,R2                CLEAR R2\n         TRT  0(1,R3),TRTTAB       IS CHAR NUMERIC(!)\n*                                    ALPHA(@) OR EITHER(#)\n         MVC  TRTTAB,TRTTABHD      RESTORE ARGUMENTS TRTTAB\n         LTR  R2,R2                R2 NOT ZERO SHOWS\n         BNZ  CMPNTFND               CONDITION NOT MET\nCMPPBUMP EQU  *\n         LA   R3,1(R3)             NEXT DATA BYTE\n         LA   R5,1(R5)             NEXT ARGUMENT BTYE\n         BCT  R4,CMPPLOOP          LOOP\nCOMPEXIT EQU  *\n         LM   R1,R4,PTRTSAVE+4     RESTORE REGS FOR SUB ROUTINE\n         BR   R4\n         EJECT\nPRNTBRTE EQU   *\n         TM    SWIT+2,X'08'        IS THIS ENTRY TO BUILD PRINT TABLE\n         BNO   PRNTBREC            NO - GO FILL IN HIT DATA\n         NI    SWIT+2,X'F4'        CLEAR ENTRY SWITCH AND LENGTH BITS\n         CH    R6,=H'49'           CHECK REC LENGTH\n         BH    *+10                   FOR A VALID ENTY\nRECLNERR EQU   *\n         OI    SWIT+1,X'40'              OF 50 BYTES MINIMUM\n         BR    R7                           255 BYTES MAXIMUM.\n         CH    R6,=H'255'                     IF OUT OF THIS RANGE\n         BNH   *+32                IF TRUNCATE\n         TM    F1WORK+40,X'40'       IS SPECIFIED\n         BNO   RECLNERR                AS A PARAMETER\n         TM    PARMSWIT+1,X'04'          JOB WILL ALLOW\n         BNO   RECLNERR                     264 BYTE MAX\n         CH    R6,=H'264'                     LRECL BUT WILL\n         BH    RECLNERR                         ONLY SCAN AND\n         LH    R6,=H'255'                         PRINT FIRST 255\n         STH   R6,RECLEN           SAVE RECORD LENGTH\n         XC    PRTTABLE,PRTTABLE   CLEAR TABLE\n         LA    R4,PRTTABLE         POINT TO TABLE\n         LR    R5,R6\n         CH    R6,=H'85'           IS REC LEN GT 85\n         BH    *+14                YES\n         STH   R6,8(R4)            NO - STORE IN FIRST SEG IN TABLE\n         OI    SWIT+2,X'01'        SET FLAG FOR LEN 00-85\n         BR    R7\n         MVC   8(2,R4),=H'85'      SHOW FULL LEN FOR SEG 1\n         LA    R4,12(R4)           POINT TO NEXT SEG\n         CH    R6,=H'170'          IS REC LEN GT 170\n         BH    *+18                YES\n         SH    R5,=H'85'           NO - DET LENGTH OF\n         STH   R5,8(R4)              SEG AND SAVE IN TABLE\n         OI    SWIT+2,X'02'        SET FLAG FOR LEN 85-170\n         BR    R7\n         MVC   8(2,R4),=H'85'      SHOW FULL LEN FOR SEG 2\n         LA    R4,12(R4)           POINT TO NEXT SEG\n         SH    R5,=H'170'          NO - DET LENGTH OF\n         STH   R5,8(R4)              SEG AND SAVE IN TABLE\n         OI    SWIT+2,X'03'        SET FLAG FOR LEN 171-255\n         BR    R7\nPRNTBREC EQU  *\n         LA    R5,RECWORKA         DET OFFSET OF\n         LR    R6,R1                 FIRST BYTE OF\n         SR    R6,R5                    THE FOUND ARGU\n         LA    R5,PRTTABLE         POINT TO TABLE\n         CH    R6,=H'85'           WAS FIRST BYTE OF HIT IN FIRST\n*                                  SEGMENT(00-85) OF RECORD\n         BNH   *+24                YES\n         CH    R6,=H'170'          WAS FIRST BYTE OF HIT IN SECOND\n*                                  SEGMENT(86-170) OF RECORD\n         BH    *+12                NO ASSUME THIRD SEGMENT (171-255)\n         LA    R5,12(R5)           POINT TO SECOND SEGMENT\n         B     *+8\n         LA    R5,24(R5)           POINT TO THIRD SEGMENT\n         AP    10(2,R5),=P'1'      ADD 1 TO NUM OF HITS IN SEGMENT\n         CP    10(2,R5),=P'1'      IS THIS FIRST HIT IN SEGMENT\n         BNER  R7\n         ST    R1,0(R5)            SAVE ADDRESS OF FIRST HIT IN SEG\n         MVC   4(3,R5),ARGNO       SAVE ARG NO OF FIRST HIT IN SEG\n         MVC   7(1,R5),ARGLNG      SAVE LENGTH OF FIRST HIT IN SEG\n         BR    R7                  SAVE ADDRESS OF FIRST HIT IN SEG\n         EJECT\nLIMITRTE EQU   *\n         TM    SWIT+3,X'80'        IS THIS ENTRY TO VALIDATE LIMITS\n         BNO   LIMITCHK            NO - GO CHECK LIMIT\n         NI    SWIT+3,X'3F'        TURN OFF VALIDATE AND ERROR BITS\n         MVI   TRTTAB,X'01'             USE TRT\n         MVC   TRTTAB+1(255),TRTTAB       INSTRUCTION\n         XC    TRTABAF,TRTABAF              TO VALIDATE\n         XC    TRTAB09,TRTAB09                 FIRST 4 COLS\n         TRT   CARDIN(4),TRTTAB                  FOR HEX DATA\n         BC    8,*+16\n         MVC   ERR1RC,=C'01'       SHOW INVALID SEARCH LIMITS\nLIMITSRX EQU   *\n         OI    SWIT+3,X'40'        INVALID SEARCH LIMIT ENTRY\n         BR    R7\n         MVC   SEARCHLD,CARDIN     MOVE HEX CHARACTERS TO WORK AREA\n         MVC   TRTABAF,TRTABAFH    SET TRT TABLE TO TRANSLATE\n         MVC   TRTAB09,TRTAB09H      COLUMN SEARCH LIMIT ENTRIES\n         TR    SEARCHLD,TRTTAB     TRANSLATE TO BINARY CHARACTERS\n         XR    R5,R5\n         XR    R6,R6\n         IC    R5,SRBEGBIN         MAKE SEARCH\n         IC    R6,SRBEGBIN+1         BEGIN ENTRY\n         SLL   R5,4                    USABLE TO DO\n         OR    R6,R5                     BINARY OPERATIONS\n         STH   R6,SRBEGBIN\n         IC    R5,SRLGNBIN         MAKE SEARCH\n         IC    R6,SRLGNBIN+1         LENGTH ENTRY\n         SLL   R5,4                    USABLE TO DO\n         OR    R6,R5                     BINARY OPERATIONS\n         STH   R6,SRLGNBIN\n         LH    R5,SRBEGBIN         IF THE BEGINNING OF\n         AH    R5,SRLGNBIN           THE SEARCH LIMIT PLUS\n         CH    R5,=H'256'               THE LENGTH EXCEEDS 255\n         BCR   13,R7                      TREAT AS AN ERROR COND\n         MVC   ERR1RC,=C'02'\n         B     LIMITSRX\nLIMITCHK EQU   *\n         C     R1,ARGLOLIM         IS BEGINNING OF FOUND\n         BNL   *+10                  ARGUMENT BELOW LOWER\nLIMITCRX EQU   *                       LIMIT OF SEARCH\n         NI    SWIT+3,X'DF'        YES - ERROR\n         BR    R7\n         XR    R5,R5\n         IC    R5,ARGLNG           IS THE END OF FOUND\n         AR    R5,R1                 ARGUMENT ABOVE UPPER\n         C     R5,ARGUPLIM             LIMIT OF SEARCH\n         BH    LIMITCRX            YES - ERROR\n         OI    SWIT+3,X'20'        SET SWITCH TO SHOW\n         BR    R7                    ARG FOUND W/I LIMITS\n         EJECT\nMEMLSTRT EQU   *\n         TM    SWIT+3,X'02'        IS THIS ENTRY TO CHECK FOR A MATCH\n*                                  OF CURRENT MEMBER WITH MEMBER LISTS\n         BO    MEMMATCH            YES\n*                                  NO - ENTRY IS DURING PROCEESING OF\n*                                  EXEC PARMS AND A TABLE OF MEMBER\n*                                  PARMS WILL BE BUILT AT MEMLSTTB\n         TM    3(R6),X'80'         IS IT FROM/TO\n         BNO   CHKRANGE            NO - GO CHECK FOR RANGE\n         CLC   PARMHOLD(7),=C'MEMFROM'  IS IT FROM\n         BNE   *+22                NO\n         CLC   MEMFROM,HEXZEROS    IS IT FIRST ENTRY FOR FROM\n         BNE   MEMLSTER            NO ERROR\n         MVC   MEMFROM,PARMHOLD+8  SAVE FROM PARM\n         BR    R7                  RETURN\n         CLC   PARMHOLD(5),=C'MEMTO'    IS IT TO\n         BNE   CHKRANGE            NO\n         CLC   MEMTO,FS            IS IT FIRST ENTRY FOR TO\n         BNE   MEMLSTER            NO ERROR\n         MVC   MEMTO,PARMHOLD+6    SAVE TO PARM\n         BR    R7                  RETURN\nMEMLSTER EQU   *\n         OI    SWIT+3,X'01'        ERROR IN MEMBER LIST PARM\n         BR    R7                  RETURN\nCHKRANGE EQU   *\n         TM    3(R6),X'40'         IS IT RANGE\n         BNO   CHKPATRN            NO - GO CHECK FOR PATTERN\n         CLC   MEMRANGE,BLANKS     IS IT FIRST ENTRY FOR RANGE\n         BNE   MEMLSTER            NO\n         CLI   PARMHOLD+10,C':'    IS HI AND LO RANGE SEP BY :\n         BNE   MEMLSTER            NO - ERROR\n         CLC   PARMHOLD+9,PARMHOLD+11   IS B GREATER THAN A\n         BNL   MEMLSTER            NO - ERRROR\n         MVC   MEMRANGE,PARMHOLD+9      SAVE RANGE PARM\n         BR    R7                  RETURN\nCHKPATRN EQU   *\n         TM    3(R6),X'20'         IS IT PATTERN\n         BNO   CHKSTRNG            NO - GO CHECK FOR STRING\n         CLC   MEMPATRN,BLANKS     IS IT FIRST ENTRY FOR PATTERN\n         BNE   MEMLSTER            NO - ERROR\n         MVC   MEMPATRN,PARMHOLD+11     SAVE PATTERN PARM\n         BR    R7                  RETURN\nCHKSTRNG EQU   *\n         TM    3(R6),X'10'         IS IT STRING\n         BNOR  R7                  NO - RETURN\n         CLC   MEMSTRNG,BLANKS     IS IT FIRST ENTRY FOR STRING\n         BNE   MEMLSTER            NO - ERROR\n         XR    R8,R8          CALCULATE\n         XR    R9,R9            THE LENGTH\n         IC    R8,0(R6)           OF THE STRING\n         IC    R9,1(R6)             TO BE USED AS\n         SR    R8,R9                  A MEMBER LIST\n         BCTR  R8,R0          SAVE THE\n         STC   R8,MEMSTRNL      LENGTH\n         EX    R8,*+6         SAVE STRING\n         BR    R7\n         MVC   MEMSTRNG(0),PARMHOLD+10\nMEMMATCH EQU   *\n         NI    SWIT+3,X'FE'        TURN OFF HIT SWITCH\n         TM    PARMSWIT+1,X'80'    IS THERE A FROM/TO PARM\n         BNO   SRCMEMRG            NO - GO CHECK FOR RANGE\n         CLC   MEMBER,MEMFROM      IS MEMBER LOWER THAN START\n         BL    SRCMEMRG            YES - NO HIT\n         CLC   MEMBER,MEMTO        IS MEMBER HIGHER THAN TO\n         BH    SRCMEMRG            YES - NO HIT\n         OI    SWIT+3,X'01'        SHOW HIT\nSRCMEMRG EQU   *\n         TM    PARMSWIT+1,X'40'    IS THERE A RANGE PARM\n         BNO   SRCMEMPT            NO - GO CHECK FOR PATTERN\n         CLC   MEMBER(1),MEMRANGE       IS THE FIRST CHAR OF THE MEM\n*                                       LOWER THAN BEGINNING OF RANGE\n         BL    SRCMEMPT            YES - NO HIT\n         CLC   MEMBER(1),MEMRANGE+2     IS THE FIRST CHAR OF THE MEM\n*                                       HIGHER THAN END OF THE RANGE\n         BH    SRCMEMPT            YES - NO HIT\n         OI    SWIT+3,X'01'        SHOW HIT\nSRCMEMPT EQU   *\n         TM    PARMSWIT+1,X'20'    IS THERE A PATTERN PARM\n         BNO   SRCMEMST            NO - GO CHECK FOR STRING\n         LA    R3,8                LENGTH\n         LA    R4,MEMBER           POINT TO CURRENT MEMBER\n         LA    R5,MEMPATRN         POINT TO PATTERN\nSRCMEMLP EQU   *\n         CLI   0(R5),C'+'          IS THIS POSITION IN THE MEMBER\n*                                  NAME TO BE TREATED AS A PATTERN\n         BE    SRCMEMBP            YES BYPASS COMPARE\n         CLC   0(1,R4),0(R5)       IS THE BYTE IN THIS POSITION OF\n*                                  MEMBER NAME EQUAL TO THE PATTERN\n         BNE   SRCMEMST            NO - NOT A MATCH\nSRCMEMBP EQU    *\n         LA    R4,1(R4)            NEXT MEMBER POSITION\n         LA    R5,1(R5)            NEXT PATTERN POSITION\n         BCT   R3,SRCMEMLP         LOOP\n         OI    SWIT+3,X'01'        SHOW HIT\nSRCMEMST EQU   *\n         TM    PARMSWIT+1,X'10'    IS THERE A STRING PARM\n         BO    *+6                 YES - CHECK FOR STRING\n         BR    R7                  NO - RETURN\n         LA    R3,MEMBER           BEGINNING OF MEMBER NAME\n         LA    R4,MEMBER+8         END OF MEMBER NAME PLUS 1\n         XR    R6,R6\n         IC    R6,MEMSTRNL         LENGTH OF STRING\nSRCSTRLP EQU   *\n         EX    R6,MEMSTRCP         DO THE NEXT XX BYTES IN MEMBER\n*                                  MATCH THE STRING IN MEMSTRNG\n         BNE   *+10\n         OI    SWIT+3,X'01'        SHOW HIT\n         BR    R7                  RETURN\n         LA    R3,1(R3)            WHEN LENGTH OF\n         LR    R5,R3                 STRING PLUS NEXT\n         AR    R5,R6                   CHARACTER IN MEMBER\n         CR    R5,R4                     EXCEEDS EIGHT THE\n         BNLR  R7                          STRING IS NOT PRESENT\n         B     SRCSTRLP\nMEMSTRCP EQU   *\n         CLC   0(0,R3),MEMSTRNG\n         EJECT\nSORTRTNE EQU   *\nSORT1    EQU   *\n         L     R8,ARGSAVE+4        START OF TABLE\n         OI    SWIT+1,X'04'        SET SORTED SWITCH\n         LA    R3,ARGFL+ARGENTSZ   SECOND ENTRY\nSORT2    EQU   *\n         CLI   2(R3),X'00'         IS THIS END OF TABLE\n         BE    SORT4               YES - GO CHECK FOR SORTED CONDITION\n         TM    SWIT+3,X'10'        IS THIS SORT BY ARGNO\n         BNO   *+14                NO\n         CLC   2(L'ARGNO,R3),ARGNO IS SECOND ENTRY GREATER THAN 1ST\n         B     *+10\n         CLC   6(L'ARG,R3),ARG     IS SECOND ENTRY GREATER THAN 1ST\n         BNL   SORT3               YES - GO UPDATE POINTERS\n         NI    SWIT+1,X'FB'        NO - CLEAR SORTED SWITCH AS\n*                                    ENTRIES HAD TO BE REVERSED\n         XC    0(ARGENTSZ,R3),ARGENT    REVERSE\n         XC    ARGENT(ARGENTSZ),0(R3)     THESE 2\n         XC    0(ARGENTSZ,R3),ARGENT        ENTRIES\nSORT3    EQU   *\n         LR    R8,R3               MAKE 2ND ENTRY 1ST\n         LA    R3,ARGFL+ARGENTSZ   GET NEXT ENTRY AS 2ND\n         B     SORT2               GO COMPARE THEM\nSORT4    EQU   *\n         TM    SWIT+1,X'04'        IS TABLE SORTED SWITCH STILL SET\n         BNO   SORT1               NO - GO BACK AND RE-DO\n         BR    R2\n         EJECT\nRESETADD EQU   *\n         LA    R1,MEM1             RESET\n         ST    R1,MEMDECBS           DECB ADDRESSES\n         LA    R1,MEM2                 FOR MEMBER\n         ST    R1,MEMDECBS+4             DCB\n         LM    R0,R1,IOARSAVE      GET I/O AREA SIZE AND ADDRESS\n         SH    R0,=H'512'          RESET\n         LA    R1,512(R1)            BUFFER\n         ST    R1,MEMBADDR             ADDRESSES\n         SRL   R0,1                      FOR I/O AREAS\n         AR    R1,R0                       USED BY THIS\n         ST    R1,MEMBADDR+4                 MEM DATA SET\n         BR    R2\n         EJECT\nSWIT     DC    X'0000000000'\n*        SWITCH SETTINGS\n*        80 READ MEMBER DCB\n*        40 SUB READS MEM.\n*        20 SUB READS DIR.\n*        10 FLUSH\n*        08 HIT-THIS PDS\n*        04 HIT-THIS MEMBER\n*        02 BUFFERS GOTTEN\n*        01 COPY IN EFFECT\n*        SECOND BYTE\n*        80 PRINT HEADINGS\n*        40 INVALID FILE\n*        20 PAGE # IN INDEX\n*        10 PDS CARD TO SCAN IN RUN\n*        08 CORE GOTTEN FOR ARGUMENT TABLE\n*        04 ARGUMENT TABLE SORTED\n*        02 INVALID PARAMETRS/S\n*        01 CORE GOTTEN FOR BIT TABLE\n*        THIRD BTYE\n*        80 ALL ARGUMENTS ENTERED AS PATTERNS\n*        40 ARG ENTERED AS PATTERN/ARG CONTAINS +!@#(S)\n*        20 ERROR IN ARGUMENTS PATTERN\n*        10 UNEQUAL COMPARE DATA VS ARGUMENT\n*        08 BUILD RECORD SEGMENT TABLE\n*        04 PRINT HITS/RECORD\n*        02 + 01 RECORD LENGTH\n*             01   00-85 BYTES\n*             10   86-170 BYTES\n*             11   171-255 BYTES\n*        FOURTH BYTE\n*        80 VALIDATE ARGUMENT SEARCH LIMITS\n*        40 INVALID ARGUMENT SEARCH LIMITS\n*        20 ARGUMENT FOUND W/I SEARCH LIMITS\n*        10 SORT ARG TAB BY ARG\n*        08 HIT-RUN\n*        04 VARIABLE LENGTH RECORDS\n*        02 CHECK FOR MATCH IN MEMLSTRT\n*        01 ERROR IN A MEMPARM/HIT IN MEMLSTRT\n*        FIFTH BYTE\n*        80 VARIABLE LENGTH NULL RECORD\n*        04 1ST PASS IN SCANRTNE (RECORD LOGIC IN COPY)\n*        02 SEQUENTIAL DATA SET\n*        10 UNUSED\n*        08 UNUSED\n*        04 UNUSED\n*        02 UNUSED\n*        01 UNUSED\nPARMSWIT DC    X'0000'\n*        SWITCH SETTINGS\n*        80 DO NOT PRINT MEMBER LIST\n*        40 SHOW DISK ADDRESS OF MEMBER\n*        20 ENTER ARGUMENTS VIA CONSOLE\n*        10 PRINT ONLY HIT LINES (NEW DEFAULT)\n*        08 AND PROCESSING\n*        04 ALL ARGUMENTS ARE PATTERNS\n*        02 PRINT TOTALS BY ARGUMENT\n*        01 PRINT ALL LINES (OLD DEFAULT)\n*        SECOND BYTE\n*        80 MEMBER LIST FROM/TO\n*        40 MEMBER LIST RANGE\n*        20 MEMBER LIST PATTERN\n*        10 MEMBER LIST STRING\n*        08 AND LOGIC AT RECORD LEVEL\n*        04 TRUNCATE (ALLOW LRECL(264) BUT ONLY PROCESS 255)\n*        02 PROCESS ALIASES\n*        01 UNUSED\nPARMHOLD DS    CL19\nPARMTAB  EQU   *\n         DC    X'06068000'\n         DC    CL6'NOLIST'\n         DC    X'02028000'\n         DC    CL2'NL'\n         DC    X'05058000'\n         DC    CL5'DS(*)'\n         DC    X'08084000'\n         DC    CL8'DISKADDR'\n         DC    X'02024000'\n         DC    CL2'DA'\n         DC    X'07072000'\n         DC    CL7'CONSOLE'\n         DC    X'08081000'\n         DC    CL8'LISTHITS'\n         DC    X'02021000'\n         DC    CL2'LH'\n         DC    X'07070100'\n         DC    CL7'LISTALL'\n         DC    X'02020100'\n         DC    CL2'LA'\n         DC    X'03030800'\n         DC    CL3'AND'\n         DC    X'06060808'\n         DC    CL6'RECORD'\n         DC    X'03030808'\n         DC    CL3'REC'\n         DC    X'08080400'\n         DC    CL8'PATTERNS'\n         DC    X'04040400'\n         DC    CL4'PATS'\n         DC    X'07070200'\n         DC    CL7'ARGTOTS'\n         DC    X'02020200'\n         DC    CL2'AT'\n         DC    X'05050002'\n         DC    CL5'ALIAS'\n         DC    X'08080004'\n         DC    CL8'TRUNCATE'\n         DC    X'02020004'\n         DC    CL2'TR'\n         DC    X'10080080'\n         DC    CL8'MEMFROM='\n         DC    X'0E060080'\n         DC    CL6'MEMTO='\n         DC    X'0C090040'\n         DC    CL9'MEMRANGE='\n         DC    X'130B0020'\n         DC    CL11'MEMPATTERN='\n         DC    X'0B0A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'0C0A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'0D0A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'0E0A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'0F0A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'100A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'110A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'120A0010'\n         DC    CL10'MEMSTRING='\n         DC    X'FF'\n         EJECT\nTIOTHOLD DS    F\nHDRM1    DC    CL32'1CRD ARG BEG END ARG LN ARGUMENT'\nHDRM1A   DC    CL3'ENT'\nHDRM2    DC    CL32' NO. NO. COL COL OPT GT   TEXT  '\nHDRM2T1  DC    CL40'1 ARGUMENT HIT TOTALS BY ARGUMENT NUMBER'\nHDRM2T2  DC    CL40'0ARG  TOTAL  MEMBS PDSES ARG LN ARGUMENT'\nHDRM2T3  DC    CL40' NO. FOR ARG  HIT   HIT  OPT GT   TEXT  '\nHDRS1    DS    0CL133\n         DC    CL23'1SYSPRINT LISTING FOR ('\nHDRS1VOL DS    CL6\n         DC    CL2')-'\nHDRS1DSN DS    CL44\n         DC    CL50'                                                PA'\n         DC    CL2'GE'\nZSUPMASK DC    XL6'402020202020'\nHDRS21   DS    0CL133\n         DC    CL48' -MEMBER- RECORD 1...5...10....5...20....5...30.'\n         DC    CL48'...5...40....5...50....5...60....5...70....5...8'\n         DC    CL37'0....5 REC LINE  LOC-1ST  ARG-1ST    '\nHDRS21A  DC    CL3'LGN'\nHDRS22   DS    0CL85\n         DC    CL48'...90....5..100....5..110....5..120....5..130...'\n         DC    CL37'.5..140....5..150....5..160....5..170'\nHDRS23   DS    0CL85\n         DC    CL48'....5..180....5..190....5..200....5..210....5..2'\n         DC    CL37'20....5..230....5..240....5..250....5'\nHDRI1    DC    CL54'1                  INDEX LISTING                   X\n                  '\nHDRI3    DC    CL54' -MEMBER-  PAGE RECRDS W/HITS  T HITS ARGS         X\n                  '\nHDRI3A   DC    CL8'DISKADDR'\nPRNTTAB  EQU   *\n         DC    CL3'PAT'\n         DC    CL3'EXC'\n         DC    CL3'E/P'\nCARDIN   DS    CL80\nTRTAB    DC    CL16'0123456789ABCDEF'\nTRTABAFH DC    XL6'0A0B0C0D0E0F'\nTRTAB09H DC    XL10'00010203040506070809'\nPATRNTAB EQU   *\n         DC    CL1'+'\n         DC    XL1'00'\n         DC    CL1'!'\n         DC    XL1'80'\n         DC    CL1'@'\n         DC    XL1'40'\n         DC    CL1'#'\n         DC    XL1'C0'\n         DC    CL1'*'\nBITSETTB EQU   *\n         DC    BL1'10000000'\n         DC    BL1'01000000'\n         DC    BL1'00100000'\n         DC    BL1'00010000'\n         DC    BL1'00001000'\n         DC    BL1'00000100'\n         DC    BL1'00000010'\n         DC    BL1'00000001'\nXLIST    DS    0F\n         DS    F\nF1DSCB   CAMLST SEARCH,0,0,0\n         DS    0H\nSEQDIR   DS    0CL22\nSEQDIRLN DC    H'22'\nSEQDIRN1 DC    CL1'#'\nSEQDIRN2 DS    CL7\nSEQDIRTT DC    X'00000100'\nSEQDIRST DC    X'FFFFFFFFFFFFFFFF'\nCONSLECB DS    F\n         CNOP  0,4\nWTOMSG   DS    55C\n         ORG   WTOMSG\nWTOMSGLN DC    H'55'\nWTOMFLGS DC    H'00'\n         DC    CL20'**CXYPSCAN ENDED RC('\nWTORC    DS    CL2\n         DC    CL6') PDS('\nWTODSN   DS    CL20\n         DC    CL3')**'\nERR0     DC    CL22'INVALID PARAMETER/S - '\nERR1     DS    0CL33\n         DC    CL21'INVALID ARGUMENT RC=('\nERR1RC   DC    CL2'XX'\n         DC    CL10') ENT WAS '\nERR2     DC    CL32'              INCORRECT FOR SCAN'\nERR2A    DC    CL13'DATA SET ORG.'\nERR2B    DC    CL13'LRECL/BLKSIZE'\nERR2C    DC    CL32'REQUESTED DATA SET NOT ON VOLUME'\nERR3     DC    CL21'NO ARGUMENT/S ENTERED'\nERR4     DC    CL43'NO PDS OR PROC DD CARD IN JCL FOR THIS STEP'\nERR5     DC    CL31'MORE THAN 255 ARGUMENTS ENTERED'\nNOHITSM  DC    CL18'NO HITS IN FILE - '\nCRDCT    DC    PL2'0'\nARGCT    DC    PL2'0'\nEXCCT    DC    PL2'0'\nNEXTARG  DC    PL2'1'\nSCANMEMS DC    PL4'0'\nSCANRECS DC    PL4'0'\nSCANCNT  DC    PL4'0'\nCOPYCNT  DC    PL4'0'\nHITSMEMS DC    PL3'0'\nHITWIMEM DC    PL4'0'\nHITSRECS DC    PL4'0'\nHITSWIRE DS    PL3\nHITSWIRT DC    PL4'0'\nARGWIMEM DC    PL3'0'\nARGTOTAL DC    PL3'0'\nRECSDSP  DC    PL4'0'\nPAGESPDS DS    PL3\nPAGEBEGP DC    PL3'1'\nPAGECNT  DC    PL3'0'\nSTARTSTS DS    CL25\n         ORG   STARTSTS\nSTARTCDT DS    CL11\n         DC    CL4' AT '\nSTARTTME DS    CL6\n         DS    CL4\nSTOPSTS  DS    CL25\n         ORG   STOPSTS\nSTOPCLDT DS    CL11\n         DC    CL4' AT '\nSTOPTIME DS    CL6\n         DS    CL4\nJULDT    DS    CL7\nDODDT    DS    CL8\nCMPLCD   DS    CL1\nOPTNSMSG DS    CL47\n         ORG   OPTNSMSG\n         DC    CL16'OPTNS:ARG INPUT='\nOPTNSARG DC    CL7'SYSIN  '\n         DC    CL10',SYSPRINT='\nOPTNSPRT DC    CL4'HITS'\n         DC    CL7',LOGIC='\nOPTNSLOG DC    CL3'OR '\nSTUBMEML DC    CL9'MEMLST/S:'\nTOTSMSG  DC    CL70'MEMBERS PROCESSED PDS WITH MEMLST/SRECORDS PROCESSEX\n               D PDS WITH MEMLST/S'\nHITSMSG  DC    CL54'NUMBER OF MEMBERS WITH HITSNUMBER OF HITS IN THIS PX\n               DS '\nARGSMSG  DC    CL27'NUMBER OF ARGUMENTS FOUND  '\nSTARTMSG DC    CL22'START TIME FOR PDS IS '\nSTOPMSG  DC    CL5'STOP '\nRECDISPM DC    CL27'NUMBER OF RECORDS DISPLAYED'\nPGSDISPM DC    CL27'PAGES IN SYSPRINT/THIS PDS '\nPGRANGES DC    CL27'FIRST PAGE IN SYSPRINT/PDS '\nPGRANGEE DC    CL5'FINAL'\nARGLOC   DC    CL11' (XXX-YYY) '\nSTUBDDN  DC    CL14'DATA DEF NAME:'\nSTUBDSN  DC    CL14'DATA SET NAME:'\nSTUBVOL  DC    CL14'VOLUME SERIAL:'\nSTUBATTR DC   CL14'ORG-RF-LR-BLK:'\nLINCTM   DC    XL1'3B'\nLINCTM2  DC    XL1'39'\nLINCTI   DC    XL1'3B'\nLINCT    DS    CL1\nOBTNRCHD DS    CL1\nRETCODEF DC    X'00'               RETURN CODE LAST FILE PROCESSED\nRETCODE  DC    X'00'               RETURN CODE HIGHEST IN RUN\n*        RC SETTINGS\n*        00 HITS ON ALL SEARCHED FILES\n*        04 NO HITS ON SOME OR ALL FILES\n*        08 BAD LRECL/BLKSIZE OR NOT PDS\n*        0C NO ARGUMENT/S ENTERED\n*        10 MORE THAN 255 ARGUMENTS EMTERED\n*        14 NO PDS OR PROC DD CARD/S\n*        18 BAD PARAMETER/S ENTERED\n*        1C ALL ARGUMENTS EXCLUDED\nHEXZEROS DC    X'0000000000000000'\nFS       DC    X'FFFFFFFFFFFFFFFF'\nMASKS    DS    0F\nMASK1F   DC    X'0000001F'\nMASK03   DC    X'00000003'\nASTERICS DC    CL7'*******'\n         DS    0F\nPRTTABLE DS    0CL36\nPRTTABE1 EQU   *\n         DS    F         ADDRESS OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    CL3       ARG NO. OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    BL1       LENGTH OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    H         LENGTH OF THIS SEGMENT OF RECORD\n         DS    PL2       NUMBER OF HITS THIS SEGMENT OF RECORD\nPRTTABE2 EQU   *\n         DS    F         ADDRESS OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    CL3       ARG NO. OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    BL1       LENGTH OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    H         LENGTH OF THIS SEGMENT OF RECORD\n         DS    PL2       NUMBER OF HITS THIS SEGMENT OF RECORD\nPRTTABE3 EQU   *\n         DS    F         ADDRESS OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    CL3       ARG NO. OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    BL1       LENGTH OF 1ST HIT THIS SEGMENT OF RECORD\n         DS    H         LENGTH OF THIS SEGMENT OF RECORD\n         DS    PL2       NUMBER OF HITS THIS SEGMENT OF RECORD\nARGSZHLD DS    H\nNOLNEHLD DS    CL1\nTTRN     DC    F'0'\n         EJECT\n         LTORG *\n         EJECT\n         DS    0F\n         READ  MEM1,SF,,,,MF=L\n         READ  MEM2,SF,,,,MF=L\nMEMDECBS DS    0D\n         DC    A(MEM1)\n         DC    A(MEM2)\nMEMBADDR DS    0D\n         DS    F   ADDRESS OF FIRST BUFFER\n         DS    F   ADDRESS OF FSECOND BUFFER\n         READ  DIR1,SF,,,,MF=L\n         READ  DIR2,SF,,,,MF=L\nDIRDECBS DS    0D\n         DC    A(DIR1)\n         DC    A(DIR2)\nDIRBADDR DS    0D\n         DS    F ADDRESS OF FIRST BUFFER\n         DS    F ADDRESS OF SECOND BUFFER\nIOBADDR  DS    0F\n         DS    F\n         EJECT\nDIR      DCB   DSORG=PS,MACRF=(R),DDNAME=PDS,EODAD=ENDDIR,             X\n               BLKSIZE=256,NCP=2\n         EJECT\nMEM      DCB   DSORG=PO,MACRF=(R),DDNAME=PDS,EODAD=ENDMEM,NCP=2,       X\n               EXLST=XLIST\n         EJECT\nLIST     DCB   DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA,DDNAME=SYSPRINT\n         EJECT\nMESSAGE  DCB   DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA,DDNAME=MESSAGE\n         EJECT\nINDEX    DCB   DSORG=PS,MACRF=PM,LRECL=53,RECFM=FA,DDNAME=INDEX\n         EJECT\nCARD     DCB   DSORG=PS,MACRF=GM,LRECL=80,DDNAME=SYSIN,EODAD=ENDCARD\n         EJECT\nARGTAB   DSECT\nARGENT   EQU   *\nARGFL    DS    CL1\n*        80 LAST ENTRY BEGIN/W THIS CHARACTER\n*        40 ARGUMENT FOUND IN CURRENT MEMBER\n*        20 ARGUMENT FOUND IN CURRENT DDNAME\n*        10 EXCLUDE THIS ARGUMENT\n*        08 ARGUMENT CONTAINS PATTERN\n*        04 ARGUMENT HAS SEARCH LIMITS\nARGLNG   DS    CL1\nARGNO    DS    CL3\nARGNOBIN DS    CL1\nARG      DS    CL73\nARGLOLIM DS    F\nARGUPLIM DS    F\nARGMEM   DS    CL8\nARGDDNAM DS    CL8\nARGTARG  DS    PL4\nARGTMEM  DS    PL3\nARGTPDS  DS    PL3\nARGEND   EQU   *\nARGENTSZ EQU   ARGEND-ARGENT\n         EJECT\nWORK     DSECT\nSAVE     DS    18F\nWORKSAVE DS    D\nIOARSAVE DS    D\nARGSAVE  DS    D\nPTRNSAVE DS    D\nCNTADDR  DS    D\nDIRRECAD DS    F\nTRTTAB   DS    0CL256\n         DS    CL129\nTRTABAIL DS    CL9\n         DS    CL7\nTRTABJRL DS    CL9\n         DS    CL8\nTRTABSZL DS    CL8\n         DS    CL23\nTRTABAF  DS    CL6\n         ORG   TRTABAF\nTRTABAIU DS    CL9\n         DS    CL7\nTRTABJRU DS    CL9\n         DS    CL8\nTRTABSZU DS    CL8\n         DS    CL6\nTRTAB09  DS    CL10\n         DS    CL6\nTRTTABHD DS    CL256\nJFCB     DS    44F\nF1WORK   DS    0D\n         DS    96C\nSEARCHLD DS    F\n         ORG   *-4\nSRBEGBIN DS    H\nSRLGNBIN DS    H\nREADSAVE DS    5F\nPTRTSAVE DS    5F\nFWORD    DS    F\nDWORD    DS    D\nDDNAME   DS    CL8\nMEMBER   DS    CL8\nMEMLSTTB DS    0CL36\nMEMFROM  DS    CL8\nMEMTO    DS    CL8\nMEMRANGE DS    CL3\nMEMPATRN DS    CL8\nMEMSTRNG DS    CL8\nMEMSTRNL DS    CL1\nCC       DS    CL1\nPRNTWRK  DS    CL132\nCCI      DS    CL1\nPRNTWRKI DS    CL53\nCLEARWRK EQU   *\nCLEARSZE EQU   CLEARWRK-CC\nBLANKS   DS    CL73\nRECLEN   DS    H\nRECLENV  DS    H\nRECWORKA DS    CL255\nSTOPPER  DS    CL1\nWORKEND  EQU   *\nWORKSIZE EQU   WORKEND-WORK\n         EJECT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CXYPSDOC": {"ttr": 1798, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n       CXYPSCAN IS A HIGH SPEED SCAN AND PRINT UTILITY DEVELOPED BY\n  FRANK JOHNSTON AT U.S. ARMY HDQ DESCOM IN THE LATE 1970'S AND 1980'S.\n  FILES TO BE SCANNED/PRINTED ARE PARTITIONED DATA SETS(PDSES) WITH\n  RECFM OF F FB V OR VB AND LRECL BETWEEN 50 AND 255 BYTES. ANY NUMBER\n  OF SUCH FILES CAN BE INPUT TO ONE BATCH EXECUTION OF THE PROGRAM AND\n  UP TO 255 ARGUMENTS CAN BE SEARCHED FOR. EXTENSIVE PRINT FACILITIES\n  ARE PROVIDED TO SHOW THE USER ALL PERTINENT INFORMATION ABOUT THE\n  RUN.\n\n\n************************************************************************\n*                   MODES OF EXECUTION                                 *\n************************************************************************\n       THE PROGRAM MAY BE EXECUTED IN THREE MODES.\n             1. IN NORMAL BATCH MODE USING THE BATCH JCL SHOWN BELOW.\n             2. IN TSO FOREGROUND MODE BY EXECUTING CLIST PSCAN IN WHICH\n             THE TERMINAL USER WILL BE PROMPTED FOR THE FILE TO BE\n             SCANNED AND THE ARGUMENTS TO BE SEARCHED FOR.\n             3. IN STARTED TASK MODE BY STARTING PROC PDSSCAN FROM THE\n             MVS MASTER CONSOLE IN WHICH CASE THE CONSOLE OPERATOR WILL\n             INDICATE THE FILE TO BE SEARCHED ON THE START COMMAND,\n             AND WILL BE PROMPTED TO ENTER THE SEARCH ARGUMENTS VIA\n             WTORS.\n\n\n       THE FOLLOWING ARE THE JCL REQUIREMENTS FOR A BATCH EXECUTION.\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //          CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(PARM1,,,PARMN)\n             //PROCXXX DD DSN=DATA.SET.NAME1,DISP=SHR\n             //PDSXXXX DD DSN=DATA.SET.NAME2,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n               SEARCH ARGUMENT CONTROL CARDS\n             /*\n\n\n       THE FOLLOWING IS THE CLIST EXECUTED BY TSO WHEN A TERMINAL USER\n       ENTERS THE PSCAN COMMAND AT THE TSO READY.\n             PROC 1 DSNAME PARM( ) LIST( )\n             CONTROL NOMSG\n             FREE FI(SYSPRINT,SYSIN,SYSUDUMP,PROC,INDEX,MESSAGE)\n             CONTROL MSG\n             WRITE ***********************************************\n             WRITE * THIS IS THE DESCOM WRITTEN PROGRAM CXYPSCAN.*\n             WRITE * IT SCANS FOR GIVEN STRINGS OF CHARACTERS IN *\n             WRITE * ANY PDS WITH F/FB/V/VB RECFM 50-255 LRECL.  *\n             WRITE ***********************************************\n             ALLOC FI(PROC) DS('&DSNAME') SHR\n             ALLOC FI(SYSPRINT) SYSOUT(X) HOLD\n             ALLOC FI(INDEX)    SYSOUT(X) HOLD &LIST\n             ALLOC FI(MESSAGE)  SYSOUT(X) HOLD &LIST\n             ALLOC FI(SYSUDUMP) DUMMY\n             ALLOC FI(SYSIN) DS(*) SHR\n             WRITE TYPE IN LENGTH AND SEARCH ARGUMENT AFTER 01000\n             WRITE 01000LLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n             CALL 'SYS1.USERLINK(CXYPSCAN)' '&PARM'\n             FREE FI(MESSAGE INDEX SYSPRINT PROC)\n\n\n       THE FOLLOWING IS THE PROC EXECUTED BY STARTING PDSSCAN FROM\n       THE MVS MASTER CONSOLE.\n             //PDSSCAN  PROC OUTC='*',PDS='SYS1.USERPROC',PARMS=\n             //STEP1    EXEC PGM=CXYPSCAN,PARM='CONSOLE&PARMS'\n             //PDS01     DD  DSN=&PDS,DISP=SHR\n             //MESSAGE   DD  SYSOUT=&OUTC\n             //INDEX     DD  SYSOUT=&OUTC\n             //SYSPRINT  DD  SYSOUT=&OUTC\n             //SYSUDUMP  DD  SYSOUT=&OUTC\n\n\n************************************************************************\n*                   LOGICAL SEARCH METHODS.                            *\n************************************************************************\n       THERE ARE FIVE LOGICAL WAYS TO SEARCH FOR HITS.\n             1. 'OR' (THE DEFAULT). A MEMBER WILL BE CONSIDERED TO BE\n             FOUND IF ANY OF THE ENTERED ARGUMENTS ARE FOUND.\n             2. 'AND' (SPECIFIED BY PARM='AND' ON THE EXEC CARD).\n             A MEMBER WILL BE CONSIDERED TO BE FOUND IF ALL THE\n             ENTERED ARGUMENTS ARE FOUND.\n             3. 'AND' WITH EXCLUSIONS (SPECIFIED BY PARM='AND' ON THE\n             EXEC CARD AND AN E IN COLUMN 5 OF THE CONTROL CARD/S).\n             A MEMBER WILL BE CONSIDERED TO BE FOUND IF ALL THE REGULAR\n             ARGUMENTS ARE FOUND AND NONE OF THE EXCLUDED ARGUMENTS\n             ARE FOUND.\n             4. 'RECORD' (SPECIFIED BY PARM='RECORD' OR 'REC' ON THE\n             EXEC CARD) A MEMBER WILL BE CONSIDERED FOUND IF ALL THE\n             ENTERED ARGUMENTS ARE FOUND WITHIN A LOGICAL RECORD.\n             THIS IS EFFECTIVELY 'AND' LOGIC AT THE RECORD RATHER\n             THAN MEMBER LEVEL.\n             5. 'RECORD' WITH EXCLUSIONS (SPECIFIED BY PARM='RECORD'\n             OR 'REC' ON THE EXEC CARD AN E IN COLUMN 5 OF THE CONTROL\n             CARD/S).\n             A MEMBER WILL BE CONSIDERED TO BE FOUND IF ALL THE REGULAR\n             ARGUMENTS ARE FOUND AND NONE OF THE EXCLUDED ARGUMENTS ARE\n             FOUND WITHIN ONE OR MORE LOGICAL RECORDS WITHIN THE MEMBER.\n\n\n************************************************************************\n*                   BATCH MODE DD CARDS.                               *\n************************************************************************\n       IN BATCH MODE PDSES TO BE SCANNED ARE SPECIFIED VIA //PROC\n       AND/OR //PDS DD CARDS. CXYPSCAN WILL SEARCH ITS TIOT FOR ANY\n       DDNAME BEGINNING WITH PROC OR PDS AND SCAN THESE FILES IF THEY\n       ARE PDSES WITH F FB V OR VB RECFM WITH LRECL BETWEEN 50 AND\n       255 BYTES. SPECIFY A UNIQUE DDNAME FOR EACH PDS TO BE SCANNED.\n       CXYPSCAN DOES NOT SUPPORT CONCATENATED DATA SETS BECAUSE THE\n       DSNS AND VOLSERS CANNOT BE RETRIEVED FROM THE INTERNAL MVS\n       CONTROL BLOCKS FOR PRINT. //PROC AND //PDS ARE COMPLETELY\n       INTERCHANGEABLE AND EITHER PREFIX MAY BE USED WITH ANY SUFFIX\n       FOR ANY PDS.\n\n\n************************************************************************\n*                   PRINTED OUTPUT.                                    *\n************************************************************************\n       THE PRINT OUTPUT IS DIRECTED TO THREE SYSOUT DATA SETS.\n             1. THE //MESSAGE DD CARD CAN RECEIVE SEVERAL TYPES OF\n       MESSAGES AND WILL ALWAYS HAVE SOME OUTPUT. AT A MINIMUM A MESSAGE\n       WILL BE ISSUED INDICATING THE FAILURE TO SCAN ANY FILES BECAUSE\n       OF A RUN-WIDE FAILURE (I.E. BAD PARAMETER/S PRESENT, NO VALID\n       ARGUMENTS ENTERED, OR NO VALID DDNAMES PRESENT). ON RUNS WHERE\n       SCANS ARE PERFORMED THE INFORMATION ABOUT EACH ARGUMENT ENTERED\n       IS PRINTED BEFORE ANY SCANS ARE PERFORMED. ALSO AFTER ALL SCANS\n       ARE FINISHED THE OPTIONS IN EFFECT FOR THE RUN ARE SHOWN. IN\n       ADDITION FOR EACH PDS PROCESSED INFORMATION IS PRINTED ABOUT THE\n       FILE SCANNED ALONG WITH COUNTS OF MEMBERS AND RECORDS PROCESSED.\n       IF THERE ARE ANY HITS IN THE PDS COUNTS OF HITS AND POINTERS INTO\n       THAT PORTION OF THE //SYSPRINT FILE THAT PERTAIN TO THE PDS IS\n       PRINTED. IF THERE ARE NO HITS A MESSAGE TO THAT EFFECT IS SHOWN.\n       IN EITHER CASE 2 MESSAGES ARE PROVIDED SHOWING THE ELAPSED WALL\n       TIME NEEDED TO SCAN THE PDS. AFTER ALL PDSES ARE PROCESSED 2\n       ADDITIONAL MESSAGES ARE PRODUCED. THE FIRST SHOWS WHERE CXYPSCAN\n       OBTAINED ITS INPUT, WHAT THE PRINT OPTION WAS, AND WHAT LOGIC\n       WAS USED. THE SECOND SHOWS ALL MEMBER LIST OPTIONS IN EFFECT.\n       FINALLY IF THERE WHERE ANY HITS IN ANY PDS SCANNED AND IF ARGTOTS\n       OR AT WAS SPECIFIED A TABLE OF ARGUMENT HITS BY ARGUMENT NUMBER\n       WILL BE PRINTED WITH OVERALL TOTALS PLUS TOTALS BY MEMBERS AND\n       PDSES.\n             2. THE //INDEX DD CARD CONTAINS A LIST OF MEMBERS WITH HITS\n       FOUND WITHIN EACH PDS SCANNED. IT IS AN INDEX INTO THE PAGES OF\n       THE //SYSPRINT FILE AND CONTAINS COUNTS OF RECORDS, HITS, AND\n       ARGUMENTS FOUND.\n             3. THE //SYSPRINT DD CARD LISTS THE MEMBERS FOUND WITH\n       HITS. ONLY RECORDS THAT HAVE HITS ARE LISTED AS A DEFAULT OR\n       IF PARM='LISTHITS' OR 'LH' IS SPECIFIED ON THE EXEC CARD. ONE\n       TO THREE LINES ARE REQUIRED PER RECORD DEPENDING ON LRECL. ALSO\n       SHOWN ARE THE RELATIVE NUMBER OF THE RECORD, A COUNT OF HITS\n       WITHIN THE LINE, THE LOCATION OF THE FIRST HIT WITHIN THE LINE,\n       ARGUMENT NUMBER OF THE FIRST HIT WITHIN THE LINE, AND FOR\n       VARIABLE LENGTH RECORDS THE LENGTH OF THE RECORD.\n             THERE IS ONE //MESSAGE LIST PER EXECUTION AND USUALLY ONE\n       //INDEX AND ONE //SYSPRINT PAIR PER PDS IN WHICH HITS ARE FOUND.\n       IF THE USER SPECIFIES PARM='NOLIST' ON THE EXEC CARD, THE\n       //SYSPRINT CARD WILL NOT BE PRODUCED. THE //INDEX AND //SYSPRINT\n       FORMATS ARE PATTERNED AFTER THE LISTPDS UTILITY AND THE -SCAN\n       FUNCTION OF ADR/LIBRARIAN.\n\n\n************************************************************************\n*                   EXECUTION TIME PARMS.                              *\n************************************************************************\n              THERE ARE SEVERAL VALID PARAMETERS FOR CXYPSCAN THOUGH\n       NO PARMS ARE REQUIRED. THE PARMS ARE ALL KEYWORD, ARE SEPERATED\n       BY COMMAS AND MAY BE ENTERED IN ANY ORDER.\n              1. AND. 'AND' LOGIC WILL BE IN EFFECT (I.E. FOR A MEMBER\n              TO BE CONSIDERED TO BE FOUND ALL ARGUMENTS EXCEPT THOSE\n              EXCLUDED MUST BE FOUND WITHIN THE MEMBER). IF AND IS\n              SPECIFIED AND ONLY ONE ARGUMENT IS ENTERED CXYPSCAN WILL\n              SWITCH THE LOGIC TO 'OR' INTERNALLY.\n              2. RECORD OR REC. 'RECORD' LOGIC WILL BE IN EFFECT (I.E.\n              FOR A MEMBER TO BE CONSIDERED TO BE FOUND ALL ARGUMENTS\n              EXCEPT THOSE EXCLUDED MUST BE FOUND WITHIN ONE OR MORE\n              LOGICAL RECORDS WITHIN THE MEMBER). IF RECORD IS\n              SPECIFIED AND ONLY ONE ARGUMENT IS ENTERED CXYPSCAN WILL\n              SWITCH THE LOGIC TO 'OR' INTERNALLY.\n              3. LISTHITS OR LH. LIST ONLY THOSE RECORDS IN WHICH HITS\n              ARE FOUND. THIS IS NOW THE DEFAULT BUT THE PARM IS RETAINED\n              TO MAINTAIN COMPATABILITY WITH OLD JOBS.\n              4. LISTALL OR LA. LIST ALL RECORDS IN THE FOUND MEMBER.\n              LISTALL WILL OVERRIDE LISTHITS(LH) IF BOTH ARE SPECIFIED.\n              THIS WAS THE LIST DEFAULT BUT WAS CHANGED BECAUSE THE VAST\n              MAJORITY OF RUNS USED LISTHIST. THUS THIS PARM WAS ADDED\n              AND LISTHITS WAS RETAINED TO MINIMIZE CHANGES.\n              5. NOLIST OR NL. NO //SYSPRINT LIST OF THE FOUND MEMBERS\n              WILL BE PRODUCED AND ASTERICS WILL BE PLACED INTO THOSE\n              AREAS IN THE //MESSAGE AND //INDEX LISTINGS THAT PERTAIN\n              TO THE //SYSPRINT LISTING. THIS WILL OVERRIDE LISTHITS(LH)\n              AND/OR LISTALL(LA) IF MULTIPLE PARMS ARE ENTERED.\n              6. PATTERNS OR PATS. ANY CHARACTER IN THE SEARCH ARGUMENT\n              EXCEPT THE FIRST THAT HAS EITHER +, !, @,OR # WILL\n              INDICATE A WILDCARD SEARCH OF THE INPUT DATA ACCORDING\n              TO THE FOLLOWING RULES:\n                    A. IF THE WILDCARD PATTERN IS +(PLUS) ANY CHARACTER\n                       IN THE INPUT DATA WILL BE CONSIDERED EQUAL TO\n                       THE PATTERN CHARACTER.\n                    B. IF THE WILDCARD PATTERN IS ! (EXCLAMATION POINT)\n                       ANY NUMERIC (0-9) IN THE INPUT DATA WILL BE\n                       CONSIDERED EQUAL TO THE PATTERN CHARACTER.\n                    C. IF THE WILDCARD PATTERN IS @ (AMPERSAND) ANY\n                       ALPHABETIC (A-Z) IN THE INPUT DATA WILL BE\n                       CONSIDERED EQUAL TO THE PATTERN CHARACTER.\n                    D. IF THE WILDCARD PATTERN IS # (POUND SIGN) ANY\n                       ALPHANUMERIC (0-9,A-Z) IN THE INPUT DATA WILL BE\n                       CONSIDERED EQUAL TO THE PATTERN CHARACTER.\n                       NOTE: ALTHOUGH THE PROGRAM DOES NOT \"FOLD\" UPPER\n                       AND LOWER CASE ALPHABETIC CHARACTERS TOGETHER,\n                       EITHER UPPER OR LOWER CASE LETTERS (A-Z) WILL\n                       SATISFY THE REQUIREMENT FOR @ OR # WILDCARDING.\n              7. CONSOLE. USED IN THE STARTED TASK MODE OF OPERATION.\n              PROGRAM WILL PROMPT THE CONSOLE OPERATOR FOR ARGUMENTS\n              TO BE SEARCHED FOR.\n              8. ARGTOTS OR AT. A LIST OF ARGUMENTS BY ARGUMENT NUMBER\n              WITH HIT COUNTS WILL BE PRODUCED.\n              9. DISKADDR OR DA. THE DISK ADDRESS OF THE FOUND MEMBERS\n              WILL BE PRINTED ON THE //INDEX FILE.\n              10. ALIAS. NORMALLY CXYPSCAN WILL IGNORE ALIAS DIRECTORY\n              ENTRIES ON THE THEORY THAT ONLY ONE COPY OF THE DATA\n              ACTUALLY EXITS IN THE PDS. CODING PARM='ALIAS' WILL\n              CAUSE ALIAS ENTRIES TO BE PROCESSED. CODING ALIAS AND\n              DISKADDR AND FORCING A HIT ON A MEMBER BY ENTERING A\n              KNOWN STRING OF CHARARCTERS WITHIN THE MEMBER WILL\n              SHOW IF THE ALIASES ARE VALID.\n              11. TRUNCATE OR TR. OFTEN ON VARIABLE LENTH PDSES\n              OF CLISTS ETC A BLKSIZE OF FROM TO 256 TO 264 IS\n              INDICATED IN THE VTOC BUT THE DATA CONTAINS VERY\n              SHORT RECORDS. TRUNCATE ALLOWS CXYPSCAN TO PROCESS\n              THE FIRST 255 BYTES OF THESE RECORD.\n\n              AS A DEFAULT CXYPSCAN WILL SCAN ENTIRE PDSES. HOWEVER\n       5 DIFFERENT MEMBER LIST PARAMETERS MAY BE ENTERED TO RESTRICT\n       THE MEMBERS SCANNED. ONE OCCURANCE OF EACH OF THESE PARAMETERS\n       MAY BE USED IN EACH EXECUTION. THE MEMBER LIST/S IN EFFECT WILL\n       BE PRINTED AFTER THE OPTIONS IN EFFECT ON //MESSAGE.\n              1. MEMFROM=XXXXXXXX ALL MEMBERS ARE PROCESSED FROM THE\n              ONE INDICATED TO END OF FILE OR THROUGH THE MEMBER\n              INDICATED ON A FROMTO PARM. XXXXXXXX MUST BE 8 BYTES\n              PADDED WITH BLANKS IF NECESSARY.\n              2. MEMTO=XXXXXXXX ALL MEMBERS ARE PROCESSED THROUGH THE\n              ONE INDICATED FROM THE BEGINNING OF THE FILE OR FROM\n              THE ONE INDICATED ON A MEMFROM PARM. XXXXXXXX MUST BE 8\n              BYTES PADDED WITH BLANKS IF NECESSARY.\n              3. MEMRANGE=X:Y. MEMBERS BEGINNING WITH CHARACTER\n              INDICATED BY X THROUGH THOSE INDICATED BY Y WILL BE\n              PROCESSED. X MUST BE GREATER THAN Y OR A PARAMETER ERROR\n              WILL BE INDICATED. TO GET ONLY MEMBER BEGINNING WITH A\n              CHARACTER USE MEMPATTERN=X+++++++.\n              4. MEMPATTERN=XX++XX++. MEMBERS ARE PROCESSED IF THEY\n              CONTAIN THE CHARACTERS INDICATED IN THE PATTERN. ALL +\n              POSITIONS ARE WILDCARDED. THE PATTERN MUST BE 8 BYTES\n              PADDED WITH BLANKS IF NECESSARY.\n              5. MEMSTRING=X1,,,XN. THE MEMBER WILL BE PROCESSES IF\n              THE CHARACTERS IN THE STRING APPEAR ANYWHERE IN THE\n              MEMBER NAME. THE STRING MAY BE FROM 1 TO 8 CHARACTERS\n              IN LENGTH.\n\n\n************************************************************************\n*                   RETURN CODES.                                      *\n************************************************************************\n              THERE ARE EIGHT POSSIBLE RETURN CODES FOR ANY EXECUTION\n       OF CXYPSCAN.\n              1. 00 HITS ON ALL SCANNED FILES.\n              2. 04 NO HITS ON SOME OR ALL FILES.\n              3. 08 INVALID FILE SPECIFIED.\n                    A. DATA SET NOT ON VOLUME.\n                    B. DATA SET ORG NOT PS OR PO.\n                    C. RECFM NOT F/FB OR V/VB.\n                    D. LRECL NOT 50-255.\n                    E. BLKSIZE NOT MULTIPLE OF LRECL FOR F/FB.\n                    F. SPANNED RECORDS FOR V/VB.\n              4. 0C NO VALID ARGUMENTS ENTERED.\n              5. 10 MORE THAN 255 VALID ARGUMENTS ENTERED.\n              6. 14 NO //PROC OR //PDS CARD/S PRESENT\n              7. 18 INVALID PARAMETER/S ENTERED.\n              8. 1C ALL ARGUMENTS EXCLUDED.\n\n              THE PROGRAM WILL RETURN THE HIGHEST RETURN CODE FOR A PDS\n       AS THE RETURN CODE FOR THE RUN. ERROR CODES 0C THROUGH 1C WILL\n       RESULT IN AN ERROR MESSAGE TO THE EFFECT SHOWN ABOVE AND NO PDS\n       BEING SCANNED.\n\n\n************************************************************************\n*                   USER ABEND CODES.                                  *\n************************************************************************\n              THERE ARE TWO POSSIBLE USER ABEND CODES FOR ANY EXECUTION\n       OF CXYPSCAN.\n              1. ABEND U001. FIND MACRO FAILED FOR A MEMBER NAME THAT\n                 APPEARS IN THE DIRECTORY OF A PDS BEING PROCESSED.\n                 THIS IS CAUSED BY A DISK I/O ERROR OR A CLOBBERED\n                 PDS.\n              2. ABEND U002. WRONG LENGTH RECORD ENCOUNTERED WHEN\n                 PROCESSING A MEMBER OF A PDS. FOR FIXED LENGTH RECORD\n                 FILES THIS IS USUALLY CAUSED BY THE ACTUAL DATA ON\n                 THE DISK BEING DIFFERENT FROM THE LRECL/BLKSIZE\n                 ACTUALLY IN THE F1 DSCB. FOR VARIABLE LENGTH FILES\n                 IT INDICATES A BAD RDW IN THE FILE.\n\n              WHEN EITHER OF THESE CONDITIONS OCCUR THE JOB IS ABENDED\n       AND NO MORE PDSES ARE PROCESSED.\n\n\n************************************************************************\n*                   CONTROL CARDS.                                     *\n************************************************************************\n              THE USER MUST SPECIFY BY CONTROL STATEMENT THE ARGUMENTS\n       TO BE SEARCHED FOR. THE FIRST FOUR POSITIONS SPECIFY IN HEX THE\n       RECORD POSITIONS TO WHICH THE SEARCH IS LIMITED. TYPICALLY YOU\n       CODE 0100 WHICH TELLS CXYPSCAN TO START IN POSITION 1 AND SCAN\n       TO THE END OF RECORD. CODING 0000 IS SYNONYMOUS WITH 0100. IF\n       YOU DO WANT TO RESTRICT THE SEARCH TO CERTAIN COLUMNS ENTER THE\n       BEGINNING LOCATION IN COLUMNS 1+2 (IN HEX) AND THE LENGTH OF\n       THE FIELD IN COLUMNS 3+4 (IN HEX). AN EXAMPLE OF THIS MIGHT BE\n       0A200**PGM=ICKDSF. HERE CHARACTER STRING PGM=ICKDSF IS SEARCHED\n       FOR BETWEEN COLUMNS 10 AND 41. COLUMN 5 MAY HAVE 2 VALID ENTRIES\n       OTHER THAN ZERO. AN E IN COLUMN 5 WHEN USED IN CONJUNCTION WITH\n       PARM='AND', 'RECORD', OR 'REC' ON THE EXEC CARD CAUSES THIS\n       ARGUMENT TO BE USED AS AN EXCLUSION. THAT IS IF THE STRING IS\n       FOUND THE MEMBER OR RECORD WILL BE CONSIDERED NOT FOUND. THERE\n       MAY BE MANY EXCLUDES IN ONE RUN BUT AT LEAST ONE NON EXCLUDED\n       ARGUMENT MUST EXIST.\n       A P IN COLUMN 5 CAUSES A SEARCH OF THE ARGUMMENT FOR A +, !, @\n       OR # AND A WILDCARD SEARCH FOR THESE COLUMNS IN ACCORDANCE WITH\n       THE RULES SHOWN ABOVE UNDER THE PATTERN PARAMETER.\n       THE FIRST CHARACTER OF THE ARGUMENT CANNOT BE PATTERN.\n       TO EXCLUDE A PATTERN ARGUMENT CODE E IN COLUMN 5 OF THE CONTROL\n       STATEMENT AND PARM='PATTERNS' OR 'PATS' ON THE EXECUTE CARD.\n       COLUMNS 6+7 OF THE CONTROL STATEMENT CONTAINS THE LENGTH OF THE\n       ARGUMENT/S BEING SEARCHED FOR. WHEN ** IS ENTERED IN THIS\n       FIELD THE LENGTH OF THE ARGUMENT IS CALCULATED AS STARTING IN\n       COLUMN 8 AND EXTENDING TO THE LAST NON-BLANK CHARACTER AT OR\n       BEFORE COLUMN 71. THUS THE MAXIMUM LENGTH OF AN ARGUMENT USING\n       ** IN COLS 6+7 IS 64 BYTES. TO SEARCH FOR ARGUMENTS EXTENDING TO\n       COLUMN 80 OR FOR ONES ENDING IN BLANK/S YOU MUST CODE A LENGTH\n       FIELD IN DECIMAL IN COLS 6+7. THE MAXIMUM LENGTH THAT CAN BE\n       ENTERED IS THUS 73. IN ALL CASES THE MINIMUM LENGTH IS 01. ANY\n       STRING OF EBCDIC CHARACTERS  MAY BE ENTERED AS A SEARCH\n       ARGUMENT EXCEPT ONE OF ALL BLANKS. WHEN AN INVALID CONTROL\n       STATEMENT IS ENCOUNTERED BY CXYPSCAN THE FOLLOWING ERROR\n       MESSAGE IS SENT TO //MESSAGE:\n       INVALID ARGUMENT RC=(XX) ENT WAS (THE CONTROL STATEMENT).\n       THE POSSIBLE VALUES FOR XX AND THEIR MEANINGS ARE:\n              1. 01 COLUMNS 1-4 CONTAIN OTHER THAN VALID HEX\n                 CHARACTERS (0-9,A-F).\n              2. 02 BEGINNING COLUMN OF THE SEARCH PLUS THE LENGTH\n                 EXCEEDS 255 (I.E. 02FF0**ABCDE). THIS IS ASKING TO\n                 SEARCH FOR STRING ABCDE STARTING IN POSITION 2 OF\n                 THE RECORD THROUGH THE NEXT 255 POSITIONS. THIS\n                 IS INVALID BECAUSE THE SEARCH LIMIT GOES BEYOND THE\n                 MAXIMUM LRECL SUPPORTED BY CXYPSCAN.\n              3. 03 THE ARGUMENT ENTERED IS LONGER THAN THE SEARCH\n                 LIMIT SPECIFIED (I.E. 01040**ABCDE). THIS IS AN\n                 ATTEMPT TO SEARCH FOR STRING ABCDE (5 CHARACTERS) IN\n                 LOCATIONS 1-4 (4 POSITIONS).\n              4. 04 EXCLUDE INVALID IN 'OR' PROCESSING. EXCLUDE ENTRIES\n                 MAY ONLY BE USED IN CONJUNCTION WITH PARM='AND',\n                 PARM='RECORD', OR PARM='REC'.\n              5. 05 INVALID ENTRY IN COLUMN 5 (NOT 0,E,P).\n              6. 06 ARGUMENT CONTAINS ALL BLANKS.\n              7. 07 COLUMNS 6-7 CONTAIN OTHER THAN VALID DECIMAL\n                 CHARACTERS (0-9) OR **.\n              8. 08 INVALID ARGUMENT LENGTH ENTERED (NOT BETWEEN 00-73).\n              9. 09 FIRST CHARACTER OF ARGUMENT ENTERED AS PATTERN.\n\n       CONTROL CARDS ARE ENTERED AS SYSIN DATA VIA THE //SYSIN DD CARD\n       IN BATCH RUNS, AS TERMINAL RESPONSES IN TSO SESSIONS, OR AS\n       REPLIES TO WTORS IN STARTED TASK MODE.\n\n\n************************************************************************\n*                   SAMPLE JOBS.                                       *\n************************************************************************\n       THE FOLLOWING ARE SOME SAMPLE JOBS.\n\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //             CLASS=D,MSGCLASS=X\n             //STEP1    EXEC PGM=CXYPSCAN,PARM=(LISTHITS,AND)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PROC01 DD DSN=QTB2JEH.CBT.FILE081.PDS,DISP=SHR\n             //PROC02 DD DSN=QTB2JEH.CBT.FILE102.PDS,DISP=SHR\n             //PROC03 DD DSN=QTB2JEH.CBT.FILE134.PDS,DISP=SHR\n             //PROC04 DD DSN=QTB2JEH.CBT.FILE136.PDS,DISP=SHR\n             //PROC05 DD DSN=QTB2JEH.CBT.FILE149.PDS,DISP=SHR\n             //PROC06 DD DSN=QTB2JEH.CBT.FILE150.PDS,DISP=SHR\n             //PROC07 DD DSN=QTB2JEH.CBT.FILE182.PDS,DISP=SHR\n             //PROC08 DD DSN=QTB2JEH.CBT.FILE296.PDS,DISP=SHR\n             //PROC09 DD DSN=QTB2JEH.CBT.FILE316.PDS,DISP=SHR\n             //PROC10 DD DSN=QTB2JEH.CBT.FILE336.PDS,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**REVIEW\n             0100004REV\n             01000**REVVSAM\n             /*\n       IN THIS SAMPLE SEVERAL ONLINE CBT FILES ARE SEARCHED FOR\n       REFERENCES TO THE POWERFUL REVIEW COMMAND PROCESSOR PROGRAM.\n       ONLY RECORDS WITH HITS ARE PRINTED. THIS IS NOW THE DEFAULT\n       OR THE PARM CAN BE USED.\n\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //             CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(AND,LISTALL)\n             //PDS01 DD DSN=DB.USER.PROCLIB,DISP=SHR\n             //PDS02 DD DSN=SYS2.VTAADS.PROCLIB,DISP=SHR\n             //PDS03 DD DSN=AP.AAI.PROCLIB,DISP=SHR\n             //PDS04 DD DSN=SYS2.PROCLIB,DISP=SHR\n             //PDS05 DD DSN=AC.USER1.PROCLIB,DISP=SHR\n             //PDS06 DD DSN=DATA.PROCLIB,DISP=SHR\n             //PDS07 DD DSN=SCRAM.PROCLIB,DISP=SHR\n             //PDS08 DD DSN=LSSA.MMS.PROCLIB,DISP=SHR\n             //PDS09 DD DSN=LIS.GP1.PROCLIB,DISP=SHR\n             //PDS10 DD DSN=LIS.GP2.PROCLIB,DISP=SHR\n             //PDS11 DD DSN=LIS.GP3.PROCLIB,DISP=SHR\n             //PDS12 DD DSN=LIL.PROCLIB,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             0107007//AAI2\n             0100005PROC\n             /*\n       IN THIS SAMPLE THE JES2 PROC00 LIBRARIES ARE SEARCHED FOR\n       AN AAI PROC. BOTH ARGUMENTS END IN A BLANK THUS A LENGTH\n       CODE IS ENTERED IN COLS 6+7. THE SEARCH FOR THE //AAI2  STRING\n       IS RESTRICTED TO COLUMNS 1-7. THE FOUND MEMBER/S WILL BE\n       PRINTED IN THEIR ENTIRETY.\n\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //             CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(AND,LA)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PDS05 DD DSN=DDTFDJ.JCL.CNTL,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**PGM=IDCAMS\n             01000**CATALOG\n             01000**ALIAS\n             01000**RELATE\n             01000**DELETE\n             /*\n       IN THIS SAMPLE A SINGLE USER JCL LIB IS SEARCHED FOR JOB/S\n       THAT WILL ASSIGN AN ALIAS LEVEL TO A USER CATALOG. THE JOB/S\n       WILL BE PRINTED IN THEIR ENTIRETY.\n\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //             CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(AND,LA)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PDS05 DD DSN=DDTFDJ.JCL.CNTL,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**PGM=IDCAMS\n             01000**CATALOG\n             0100E**DSN=SYSCTLG\n             01000**ALIAS\n             01000**RELATE\n             01000**DELETE\n             /*\n       THIS SAMPLE IS SIMILAR TO THE PRECEEDING ONE EXCEPT THAT JOB/S\n       WHICH REFERENCE OS CVOLS WILL BE EXCLUDED. NOTICE THE EXCLUDE\n       ARGUMENT FOR DSN=SYSCTLG.\n\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(ARGTOTS)\n             //PDS07 DD DSN=INFOADR.SOURCE.LIB9005,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**MODIFICATION: L3800322\n             01000**MODIFICATION: L3801231\n             01000**MODIFICATION: L3801351\n             01000**MODIFICATION: L3801653\n             01000**MODIFICATION: L3802450\n             01000**MODIFICATION: L3802460\n             01000**MODIFICATION: L3802470\n             01000**MODIFICATION: L3802471\n             01000**MODIFICATION: L3802510\n             01000**MODIFICATION: L3802511\n             01000**MODIFICATION: L3802530\n             01000**MODIFICATION: L3802540\n             01000**MODIFICATION: L3802560\n             01000**MODIFICATION: L3802570\n             01000**MODIFICATION: L3802590\n             01000**MODIFICATION: L3802610\n             01000**MODIFICATION: L3802660\n             01000**MODIFICATION: L3802680\n             01000**MODIFICATION: L3802690\n             01000**MODIFICATION: L3802700\n             01000**MODIFICATION: L3802720\n             01000**MODIFICATION: L3802730\n             01000**MODIFICATION: L3802740\n             01000**MODIFICATION: L3802770\n             01000**MODIFICATION: L3802780\n             01000**MODIFICATION: L3802790\n             01000**MODIFICATION: L3802830\n             01000**MODIFICATION: L3803160\n             01000**MODIFICATION: L3803190\n             01000**MODIFICATION: L3803200\n             01000**MODIFICATION: L3804300\n             01000**MODIFICATION: L3806050\n             01000**MODIFICATION: L3806051\n             /*\n       IN THIS SAMPLE AN INFOADR LIB IS SEARCHED TO LIST SOME\n       ADR/LIBRARIAN FIXES. A TOTAL OF 33 FIXES ARE ASKED FOR.\n       BY USING PARM=ARGTOTS WE CAN QUICKLY COMPARE THE ARGUMENTS\n       BY HITS REPORT TO THE ORIGINAL ARGUMENT LIST TO DETERMINE\n       IF ALL ARGUMENTS WERE FOUND.\n\n             //QTB2FDJX JOB (1K01B9914R,T40,DDT),'JOHNSTON',\n             //             CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(LH)\n             //PROC01    DD  DSN=SYS1.SOURCE,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             0100P**PICTURE  X(02!)\n             /*\n       IN THIS SAMPLE A DESCOM COBOL SOURCE LIB USED TO HOLD FD MAPS\n       FOR COMPILES (I.E. //SYSLIB DD CARD) IS SEARCHED WITH A PATTERN\n       CHARACTER (NOTE P IN COL 5 OF ARGUMENT). THIS EXAMPLE IS LOOKING\n       FOR DISPLAY TYPE FIELDS OF BETWEEN 20 AND 29 BYTES.\n\n             //QTB2FDJX JOB (1K01B9914R,T20,MDT),'JOHNSTON',\n             //          CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,\n             //      PARM='LH,MEMPATTERN=LPALST00,MEMSTRING=LNKLST'\n             //SYSUDUMP  DD  SYSOUT=*\n             //PROC      DD  DSN=SYS1.PARMLIB,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**.ESF.\n             01000**.LOOK.\n             01000**.IOA.\n             /*\n       THIS SAMPLE DEMONSTRATES A COUPLE OF THE MEMBER LIST OPTIONS\n       AVAILABLE TO CXYPSCAN. REFERENCES TO LOAD LIBRARIES FOR 3\n       VENDOR SOFTWARE PACKAGES ARE SEARCHED FOR ON SYS1.PARMLIB IN\n       THE DEFAULT LPA LIST AND ANY LINK LIST MEMBER.\n\n             //QTB2FDJX JOB (1K01B9914R,T20,MDT),'JOHNSTON',\n             //          CLASS=D,MSGCLASS=X\n             //SCAN     EXEC PGM=CXYPSCAN,\n             //      PARM='LH,MEMSTRING=00'\n             //SYSUDUMP  DD  SYSOUT=*\n             //PROC      DD  DSN=SYS1.PARMLIB,DISP=SHR\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**.ESF.\n             01000**.LOOK.\n             01000**.IOA.\n             /*\n       THIS SAMPLE IS SIMILIAR TO THE PREVIOUS IN THAT THE SAME THREE\n       VENDOR SOFTWARE PACKAGES ARE SEARCHED FOR ON SYS1.PARMLIB. SINCE\n       IT IS OUR STANDRARD TO ALWAYS IPL WITH 00 SUFFIXES ON THE PARMLIB\n       MEMBERS WE CAN ISOLATE THE APF, LPA, AND LINK LIST MEMBER IF\n       APPLICABLE (I.E. LPALST00, PROG00, AND LNKLST00), AND NOT REFERENCE\n       ANY OLD OR BACKUP MEMBERS.\n\n             //QTB2FDJX JOB (1K01B9914R,T03,DDT),'JOHNSTON',\n                         MSGCLASS=X,CLASS=D\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(LH)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PDS01    DD DISP=SHR,DSN=P.R1.XLA001UA\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**KNUTELSKY\n             01000**SCZERBA\n             /*\n       CXYPSCAN WILL SCAN SEQUENTIAL DATA SETS WITH THE CORRECT DCB\n       ATTRIBUTES, BUT THE LISTING WILL SHOW THEM AS SINGLE MEMBER\n       PDSES WITH A MEMBER NAME OF #XXXXXXX WHERE XXXXXXX IS THE HI\n       ORDER 7 BYTES OF THE DDNAME. IN THE ABOVE EXAMPLE A DESCOM\n       ADMINITRATIVE FILE IS SCANNED FOR 2 PROPER NAMES.\n\n             //QTB2FDJX JOB (1K01B9914R,T03,DDT),'JOHNSTON',\n             //          MSGCLASS=X,CLASS=D\n             //STEP1    EXEC PGM=IEBGENER\n             //SYSPRINT DD SYSOUT=*\n             //SYSUT1   DD DISP=SHR,DSN=DES2.SYSLOG(-10)\n             //         DD DISP=SHR,DSN=DES2.SYSLOG(-9)\n             //         DD DISP=SHR,DSN=DES2.SYSLOG(-8)\n             //         DD DISP=SHR,DSN=DES2.SYSLOG(-7)\n             //         DD DISP=SHR,DSN=DES2.SYSLOG(-6)\n             //SYSUT2   DD DISP=(,PASS),UNIT=SYSDA,DSN=&&PDS(PDSMEM),\n             //            SPACE=(CYL,(200,,1))\n             //SYSIN    DD DUMMY\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(LH,AT)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PDS05 DD DSN=&&PDS,DISP=(OLD,PASS)\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**-ESF\n             /*\n       SEPERATE GENERATIONS OF GDGS CAN BE TEMPORALLY LOADED UP\n       TO A TERMPORARY PDS. DESCOM RETAINS HARDCOPY LOGS ON-LINE FOR\n       35 DAYS IN A GDG NAMED DES2.SYSLOG. IN THE ABOVE EXAMPLE ALL\n       HARDCOPY LOG MESSAGES FOR THE ESF PRODUCT PRODUCED DURING A\n       5 DAY PERIOD (MONDAY-FRIDAY) IN THE PREVIOUS WEEK ARE PRINTED.\n\n             //QTB2FDJX JOB (1K01B9914R,T03,DDT),'JOHNSTON',\n             //          MSGCLASS=X,CLASS=D\n             //BLDMEM   PROC GEN=\n             //CREATDAY EXEC PGM=IEBGENER\n             //SYSPRINT DD SYSOUT=*\n             //SYSUT1   DD DISP=SHR,DSN=DES2.SYSLOG(-&GEN)\n             //SYSUT2   DD DISP=(MOD,PASS),UNIT=SYSDA,\n             //            DSN=&&PDS(PDSMEM&GEN),\n             //            SPACE=(CYL,(200,,1))\n             //SYSIN    DD DUMMY\n             //         PEND\n             //DAY1     EXEC BLDMEM,GEN=10\n             //DAY2     EXEC BLDMEM,GEN=09\n             //DAY3     EXEC BLDMEM,GEN=08\n             //DAY4     EXEC BLDMEM,GEN=07\n             //DAY5     EXEC BLDMEM,GEN=06\n             //SCAN     EXEC PGM=CXYPSCAN,PARM=(LH,AT)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PDS05 DD DSN=&&PDS,DISP=(OLD,PASS)\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000**-ESF\n             /*\n       THE ABOVE SAMPLE IS SIMILAR TO THE PRECEEDING ONE EXCEPT THAT\n       THE DAYS ARE SPLIT OUT AS INDIVIDUAL MEMBERS.\n\n             //QTB2FDJX JOB (1K01B9914R,T03,DDT),'JOHNSTON',\n             //          MSGCLASS=X,CLASS=D\n             //STEP1    EXEC PGM=TICON\n             //TICLOG    DD  SYSOUT=*\n             //TICIN     DD  *\n             VIRTDATE=1999/12/31\n             VIRTTIME=23:59\n             /*\n             //STEP2    EXEC PGM=CXYPSCAN,PARM=(AND,NL)\n             //SYSUDUMP  DD  SYSOUT=*\n             //PROC02    DD  DISP=SHR,DSN=SYS1.MACLIB\n             //MESSAGE   DD  SYSOUT=*\n             //INDEX     DD  SYSOUT=*\n             //SYSPRINT  DD  SYSOUT=*\n             //SYSIN     DD  *\n             01000** MACRO\n             01000** MEND\n             0100E**CXYPSCAN SPANS THE MILLENIUM\n             /*\n       THE DATES PUT OUT BY CXYPSCAN ARE FULLY Y2K COMPLIANT. HERE THIS\n       CLAIM IS TESTED USING THE SERVICES OF ISOGON'S TICTOC SYSTEM FOR\n       A JOB THAT BEGINS IN 1 CENTURY AND ENDS IN ANOTHER.\n\n************************************************************************\n*                   TSO FOREGROUND OPERATION.                          *\n************************************************************************\n       TO RUN CXYPSCAN IN TSO FOREGROUND MODE THE USER WILL RUN THE\n       PSCAN CLIST SHOWN ABOVE. AS SHOWN ON THE PROC STATEMENT ONLY\n       ONE OPTION IS POSITIONAL AND IT IS REQUIRED. IF NO OPTIONS\n       ARE SPECIFIED WITH THE PSCAN ENTRY TSO WILL PROMPT THE USER\n       FOR THE DSNAME OF THE PDS TO BE SCANNED. THE PROGRAM WILL THEN\n       PROMPT THE TERMINAL USER FOR THE ARGUMENTS TO BE SCANNED FOR.\n       TO END THIS ENTRY PHASE THE TERMINAL USER TYPES IN A /* IN\n       COLUMNS 1-2 AND BLANKS THE REST OF THE FIELD. THIS ENDS THE\n       ENTRY PHASE AND STARTS THE PROCESSING OF THE PDS. OPTIONALLY\n       THE PARM AND LIST OPTION KEYWORDS MAY BE ENTERED WITH THE PSCAN\n       COMMAND. PARM REFERS TO THE PARAMETERS DESIRED ON THE RUN AND\n       WILL BE ENTERED WHEN OTHER THAN THE DEFAULT PARMS ARE REQUIRED.\n       IT IS STRONGLY RECOMMENED THAT THE LIST OPTION ALWAYS BE BE USED.\n       IT'S FORM MUST BE LIST(DS(*)). THE USE OF THE LIST OPTION CAUSES\n       THE ARGUMENT ENTRIES TO BE ECHOED BACK TO THE TERMAINAL USER AS\n       HE ENTERS THEM. THUS ERRORS CAN BE SEEN IMMEDIATELY AND\n       CORRECTED ACCORDING TO THE RETURN CODES SHOWN ABOVE. ONCE THE\n       PDS PROCESSING BEGINS INFORMATION ABOUT THE PDS BEING SCANNED\n       IS SENT TO THE TERMINAL USER, AND AS HITS ARE MADE THE INDEX\n       ENTRIES ARE SHOWN AT THE TERMINAL. WHEN PROCESSING ENDS ALL OTHER\n       OUTPUT ASSOCIATED WITH THE //MESSAGE DD CARD IS SENT TO THE\n       TERMINAL. THE USER CAN THEN USE ISPF 3.8 OR THE SERVICES OF A\n       JES2 SPOOL PRODUCT SUCH AS SDSF OR IOF TO REVIEW THE HELD OUTPUT\n       OF THE //SYSPRINT FILE. A TYPICAL PSCAN ENTRY WOULD BE:\n       PSCAN QTB2FDJ.JCL.CNTL PARM('AND,LH') LIST(DS(*))\n\n\n************************************************************************\n*                   STARTED TASK OPERATION.                            *\n************************************************************************\n       TO EXEC CXYPSCAN FROM THE MVS MASTER CONSOLE THE OPERATOR STARTS\n       THE PDSSCAN PROC SHOWN ABOVE. ON THE START COMMAND HE WILL\n       ENTER THE PDS TO BE SCANNED (UNLESS IT IS THE DEFAULT) AND THE\n       PARAMETERS TO BE USED IN THIS EXECUTION. THE ALPHA CHARACTERS\n       ENTERED UNDER PDS= AND PARMS= MUST BE IN UPPER CASE DUE TO MVS\n       CONVENTIONS. A TYPICAL OPERATOR ENTRY WOULD BE:\n       S PDSSCAN,PDS='DDTFDJ.JCL.CNTL',PARMS=',AND,LISTHITS'\n       NOTE THE , AT THE BEGINNING OF THE PARMS. THIS IS USED TO APPEND\n       THE ENTERED PARMS TO THE CONSOLE PARAMETER SPECIFIED IN THE\n       PROC. AT THIS TIME CXYPSCAN WILL PRESENT THE FOLLOWING WTOR\n       TO THE MASTER CONSOLE OPERATOR:\n       XX CXYPSCAN ENTER ARGUMENT 001; ENTER /* OR HIT EOB TO PROCESS\n       THE OPERATOR WILL ENTER XX(SYSTEM WTOR ID) IMMEDIATELY FOLLOWED\n       BY AN ARGUMENT. IF THE ARGUMENT IS VALID THE WTOR WILL BE\n       REPEATED WITH THE ARGUMENT NUMBER INCREMENTED BY 1. IF ANY\n       ARGUMENT IS ERRONEOUSLY ENTERED THE WTOR WILL REPEAT THE LAST\n       ARGUMENT NUMBER. WHEN ALL ARGUMENTS ARE ENTERED THE ENTRY PHASE\n       CAN BE TERMINATED AND THE PDS PROCESSING PHASE BEGUN BY EITHER\n       ENTERING A /* OR HITTING EOB IN RESPONSE TO THE LAST WTOR.\n       IN CONSOLE MODE ALL PRINTED OUTPUT GOES TO SYSOUT DATA SETS AS\n       PREVIOUSLY DESCRIBED. AT THE END OF THE RUN A WTO IS ISSUED\n       SHOWING THE RETURN CODE FOR THE RUN. THIS ALLOWS THE CONSOLE\n       OPERATOR TO KNOW IF THERE WERE ANY HITS BEFORE HE CONSULTS\n       THE PRINTOUT.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EQUBITS": {"ttr": 2056, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         EQUBITS\n         GBLA  &EQUBITS\n         AIF   (&EQUBITS  EQ 0).EQB004\n         MEXIT\n.EQB004  ANOP\n&EQUBITS SETA  1\n         SPACE 2\n***********************************************************************\n*                                  *                                  *\n*                                  *    SYMBOLIC BIT DEFINITIONS      *\n*                                  *                                  *\n***********************************************************************\n         SPACE 2\nBIT0     EQU   128\nBIT1     EQU   64\nBIT2     EQU   32\nBIT3     EQU   16\nBIT4     EQU   8\nBIT5     EQU   4\nBIT6     EQU   2\nBIT7     EQU   1\n***********************************************************************\n*                                                                     *\n*        E N D    O F    B I T    D E F I N I T I O N S               *\n*                                                                     *\n***********************************************************************\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUREGS": {"ttr": 2058, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&TAG     EQUREGS\n         GBLB  &SW\n         LCLA  &N\n         LCLC  &R\n         AIF   (&SW).EXIT\n&SW      SETB  1\n&R       SETC  'R'\n&N       SETA  0\n.LOOP    ANOP\n&R.&N    EQU   &N\n&N       SETA  &N+1\n         AIF   (&N LT 16).LOOP\n.EXIT    MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSSCAN": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x12/\\x01\\x00\\x12/\\x14Q\\x00\\x07\\x00\\x07\\x00\\x00\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-05-01T00:00:00", "modifydate": "2000-05-01T14:51:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "CAJ7083"}, "text": "//PDSSCAN  PROC OUTC='*',PDS='SYS3.MC01.BATCH.PROCLIB',PARMS=\n//STEP1    EXEC PGM=CXYPSCAN,PARM='CONSOLE&PARMS'\n//PDS01     DD  DSN=&PDS,DISP=SHR\n//MESSAGE   DD  SYSOUT=&OUTC\n//INDEX     DD  SYSOUT=&OUTC\n//SYSPRINT  DD  SYSOUT=&OUTC\n//SYSUDUMP  DD  SYSOUT=&OUTC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSCAN": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x12/\\x01\\x00\\x12/\\x13X\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-05-01T00:00:00", "modifydate": "2000-05-01T13:58:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "CAJ7083"}, "text": "PROC 1 DSNAME PARM( ) LIST( )\nCONTROL NOMSG\nFREE FI(SYSPRINT,SYSIN,SYSUDUMP,PROC,INDEX,MESSAGE)\nCONTROL MSG\nWRITE ***********************************************\nWRITE * THIS IS THE DESCOM WRITTEN PROGRAM CXYPSCAN.*\nWRITE * IT SCANS FOR ARGUMENT STRINGS IN ANY PDS OR *\nWRITE * SEQ FILE WITH F/FB/V/VB RECFM 50-255 LRECL. *\nWRITE ***********************************************\nALLOC FI(PROC) DS('&DSNAME') SHR\nALLOC FI(SYSPRINT) SYSOUT(X) HOLD\nALLOC FI(INDEX)    SYSOUT(X) HOLD &LIST\nALLOC FI(MESSAGE)  SYSOUT(X) HOLD &LIST\nALLOC FI(SYSUDUMP) DUMMY\nALLOC FI(SYSIN) DS(*) SHR\nWRITE TYPE IN LENGTH AND SEARCH ARGUMENT AFTER 01000\nWRITE 01000LLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nCALL 'UMV42.CAJ7083.LOAD(CXYPSCAN)' '&PARM'\nFREE FI(MESSAGE INDEX SYSPRINT PROC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SXNRSU09": {"ttr": 2064, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SXNRSU09 CSECT\n         PRINT ON,GEN,DATA\n*\n*      IDENTIFICATION DIVISION.\n*      PROGRAM-ID.               SXNRSU09\n*      AUTHOR.                   F.JOHNSTON.\n*      DATE-WRITTEN.             30 SEP 69.\n*      DATE-COMPILED.            06 NOV 73.\n*      SECURITY.                 UNCLASSIFIED.\n*      REMARKS.\n*          PRODUCT-NO.           NONE.\n*          JOB-NO.               7108.\n*          TITLE.                DATE ROUTINE.\n*          AUTHORITY.            MIDAP 18-2.\n*          FREQUENCY.            R\n*          LINKAGE.              NONE.\n*          PURPOSE.    TO EXTRACT THE CURRENT DATE FROM THE SUPERVISOR.\n*          ALIASES.    DATERTNE, TIMERTNE, DATETIME, DATERT, TIMERT,\n*                      DATIME.\n*      CONSOLE MESSAGES.         NONE\n         ENTRY DATERTNE,TIMERTNE,DATETIME,DATERT,TIMERT,DATIME\n         USING DATERTNE,15\nDATERT   EQU   *\nDATERTNE MVI   SWIT,X'40'\n         BC    15,GO\n         USING TIMERTNE,15\nTIMERT   EQU   *\nTIMERTNE MVI   SWIT,X'80'\n         BC    15,GO\n         USING DATETIME,15\nDATIME   EQU   *\nDATETIME MVI   SWIT,X'C0'\n         DROP  15\nGO       SAVE  (14,12)\n         BALR  12,0\n         USING *,12\n         LA    11,SAVE\n         ST    11,8(13)\n         ST    13,SAVE+4\n         LR    13,11\n         LR    2,1\n         LA    11,TAB\n         TIME  DEC\n         TM    SWIT,X'80'          TIME SWIT\n         BC    8,DATE              NO GO TO DATE\n         BC    15,TIME\nDATE     LM    7,10,0(2)\n         ST    1,PACFLD\n         OC    SWIT,PACFLD\n         UNPK  UNPACFLD+2(3),PACFLD+1(2)\n         TM    SWIT,X'01'          YEAR 2000 ?\n         BC    1,*+14              YES\n         MVC   UNPACFLD(2),=C'19'\n         B     *+10\n         MVC   UNPACFLD(2),=C'20'\n         UNPK  UNPACFLD+4(3),PACFLD+2(2)\n         MVC   WORKA(4),UNPACFLD\n         MVC   WORKB+7(4),UNPACFLD\n         MVC   0(7,7),UNPACFLD\n         LR    2,1\n         XR    1,1\n         SRDL  2,16\n         SLL   2,4\n         O     2,PLUS\n         SRL   3,16\n         LR    4,3\n         XR    3,3\n         STM   1,2,CVBHLD\n         CVB   1,CVBHLD\n         LA    7,3\n         NR    1,7\n         BC    4,*+8\n         MVI   15(11),X'1D'\n         STM   3,4,CVBHLD\n         CVB   3,CVBHLD\n         XR    5,5\nA2       IC    5,7(11)\n         SR    3,5\n         BC    2,UPDATE\n         MVI   0(10),C'A'\n         BC    4,ADDBCK\nINSER    IC    3,7(11)\n         BC    15,*+6\nADDBCK   AR    3,5\n         MVC   WORKA+4(2),5(11)\n         MVC   WORKB+3(3),1(11)\n         CVD   3,CVBHLD\n         PACK  CVBHLD+7(0),CVBHLD+7(0)\n         MVN   WORKA+6(2),CVBHLD+6\n         MVN   WORKB(2),CVBHLD+6\n         MVC   0(8,8),WORKA\n         MVC   0(11,9),WORKB\nQUIT     L     13,SAVE+4\n         RETURN (14,12)\nUPDATE   C     11,LIMIT\n         BC    8,ERROR\n         LA    11,8(11)\n         BC    15,A2\nERROR    MVI   0(10),C'B'\n         BC    15,INSER\nTIME     L     6,0(2)\n         ST    0,PACFLD\n         OI    UNPACFLD+6,X'0F'\n         MVO   UNPACFLD,PACFLD\n         UNPK  CVBHLD,UNPACFLD\n         MVC   WORKC(4),CVBHLD\n         MVC   WORKC+5(2),CVBHLD+4\n         MVC   WORKC+8(2),CVBHLD+6\n         MVC   0(10,6),WORKC\n         LA    2,4(2)\n         TM    SWIT,X'40'          DATE SWIT\n         BC    1,DATE              YES GO TO DATE\n         BC    15,QUIT\nPACFLD   DS    F\nUNPACFLD DS    CL7\nWORKA    DC    CL8'      99'\nWORKB    DC    CL11'99         '\nWORKC    DC    CL10'    /  .  '\nSWIT     DC    X'00'\nPLUS     DC    F'12'\nCVBHLD   DS    D\nLIMIT    DC    A(TAB+88)\nSAVE     DS    18F\n         DS    0D\nTAB      DC    CL4' JAN'\n         DC    CL3' 01',HL1'31'\n         DC    CL4' FEB'\n         DC    CL3' 02',HL1'28'\n         DC    CL4' MAR'\n         DC    CL3' 03',HL1'31'\n         DC    CL4' APR'\n         DC    CL3' 04',HL1'30'\n         DC    CL4' MAY'\n         DC    CL3' 05',HL1'31'\n         DC    CL4' JUN'\n         DC    CL3' 06',HL1'30'\n         DC    CL4' JUL'\n         DC    CL3' 07',HL1'31'\n         DC    CL4' AUG'\n         DC    CL3' 08',HL1'31'\n         DC    CL4' SEP'\n         DC    CL3' 09',HL1'30'\n         DC    CL4' OCT'\n         DC    CL3' 10',HL1'31'\n         DC    CL4' NOV'\n         DC    CL3' 11',HL1'30'\n         DC    CL4' DEC'\n         DC    CL3' 12',HL1'31'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAPESCAS": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x99\\x06\\x0f\\x00\\x99\\x06\\x9f\\t \\x00\\x84\\x00b\\x00q\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1999-03-01T00:00:00", "modifydate": "1999-03-10T09:20:00", "lines": 132, "newlines": 98, "modlines": 113, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//SEL     EXEC PGM=AFOLIBR,REGION=256K,PARM='NJTA,NRJS'\n//OSJOB    DD  UNIT=VIO,DISP=(,PASS),SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=800,DSN=&&TEMP\n//MASTER   DD  DISP=SHR,DSN=UMV42.LIB.SOURCE\n//LIST     DD  SYSOUT=*\n//INDEX    DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=133)\n//SYSIN    DD  *\n-SEL TAPESC50,HHJC,EXEC,TEMP\n-REP 4610,4620\n*        TM    JFCLTSV,X'31'      NO-OP INST. FOR NOVOLSER BUG\n*        BNZ   SRCHPARM           NO-OP INST. FOR NOVOLSER BUG\n-REP 6320\n*        MVI   SVOUTFLG,C'N'      NO-OP INST. FOR NOVOLSER BUG\n-INS 9270\n         MVI   HDREOFSW,C'N'      HDR2/EOF2 SW OFF\n-INS 9950\nLRECLHLD DC    F'0'               LRECL IN BINARY FOR SL F OR FB FILES\n-INS 10420\nHDREOFSW DC    C'N'\nRECFMSW  DC    C'N'\n-INS 11400\n         MVI   HDREOFSW,C'N'      HDR2/EOF2 SW OFF\n-INS 14500\n         MVI   HDREOFSW,C'Y'      HDR2/EOF2 SW ON\n-INS 14520\n         CLI   RECBUF+4,C'F'      IS RECFM F OR FB\n         BE    *+12               YES\n         MVI   RECFMSW,C'N'       NO - TURN OFF SWITCH\n         B     *+22\n         PACK  BADLNGTH,RECBUF+10(5)   CONVERT LOGICAL\n         CVB   R1,BADLNGTH               RECORD LENGTH TO\n         ST    R1,LRECLHLD                 BINARY AND SAVE TO\n         MVI   RECFMSW,C'Y'                  DETERMINE # OF RECS\n-INS 15870\n         L     R5,FILEBYTS        PICK UP NO. OF BYTES IN FILE\n-INS 16000\n         CVD   R5,BADLNGTH        PUT NO. OF BYTES\n         OI    BADLNGTH+7,X'0F'     IN FILE OUT TO THE\n         UNPK  BYTESMSG,BADLNGTH      TAPEMARK MSG. LINE\n         CLI   RECFMSW,C'Y'       IS THIS SL F OR FB FILE\n         BNE   NORECCNT           NO\n         SR    R0,R0              DIVIDE NUMBER\n         LR    R1,R5                OF BYTES IN THE\n         D     R0,LRECLHLD            FILE BY LRECL.\n         LTR   R0,R0             ANY REMAINDER\n         BNZ   NORECCNT          YES - ERROR\n         CVD   R1,BADLNGTH        PUT NO. OF RECORDS\n         OI    BADLNGTH+7,X'0F'     IN FILE OUT TO THE\n         UNPK  RECSMSG,BADLNGTH       TAPEMARK MSG. LINE\n         B     *+10\nNORECCNT EQU  *\n         MVC   RECSMSG,=C'**N/A*'     SHOW FOR NOT F/FB OR ERROR\n-INS 16080\n         MVC   VTOCBYTE,BYTESMSG\n         MVC   VTOCRECS,RECSMSG\n-INS 16100\n         CLI   HDREOFSW,C'Y'      IS IT HDR2 OR EOF2\n         BE    *+12               YES\n-INS 16110\n         BE    *+8                YES\n         MVI   EOVM+1,CNTSENDS-TPMKMSG-1 SET LENGTH FOR SHORT MVC.\n-INS 16150\n         CLI   HDREOFSW,C'Y'      IS IT HDR2 OR EOF2\n         BE    *+14               YES\n-INS 16160\n         BE    *+10               YES\n         MVC   MSGBUF+18(CNTSENDS-EOVNUM-3),EOVNUM+3  SHORT TM MSG\n-REP 18060\n         MVC   MSGBUF+6(17),VTOCDSN    DATA SET NAME.\n-REP 18080,18110\n         MVC   MSGBUF+31(5),VTOCLREC   LRECL.\n         MVC   MSGBUF+37(5),VTOCBLKS   BLKSIZE.\n         MVC   MSGBUF+43(4),VTOCDEN    DENSITY.\n         MVC   MSGBUF+48(2),VTOCTRTC   TRTCH.\n-REP 18140,18220\n         MVC   MSGBUF+48(3),=C'STD'    INDICATE STD TRTCH\n         MVC   MSGBUF+52(5),VTOCMINB   MINIMUM BLOCK SIZE.\n         MVC   MSGBUF+58(5),VTOCMAXB   MAXIMUM BLOCK SIZE.\n         MVC   MSGBUF+64(5),VTOCAVGB   AVERAGE BLOCK SIZE.\n         MVC   MSGBUF+70(6),VTOCOUNT   NUMBER OF BLOCKS.\n         MVC   MSGBUF+77(11),VTOCBYTE  BYTES IN FILE.\n         MVC   MSGBUF+89(6),VTOCRECS   LOGICAL RECS IN FILE.\n         MVC   MSGBUF+96(8),VTOCCREA   CREATION DATE.\n         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.\n         MVC   MSGBUF+114(8),VTOCSTEP  STEP NAME.\n         MVC   MSGBUF+123(8),VTOCEXPR  EXPIRATION DATE.\n-REP 18650,18720\n         DC    C'  BLK LENS-TM  MIN='\nMINMSG   DC    C'00000'\n         DC    C' MAX='\nMAXMSG   DC    C'00000'\n         DC    C' AVG='\nAVGMSG   DC    C'00000'\n         DC    C'  BLKS-TM='\nCOUNTMSG DC    C'000000'\n         DC    C'  BYTES-TM='\nBYTESMSG DC    C'00000000000'\nCNTSENDS EQU   *\n         DC    C'  LOGICAL RECORDS-TM(F/FB)='\nRECSMSG  DC    C'000000'\n-REP 19150,19170\nVTOCHED2 DC    C'-SEQ. DATA SET NAME      RECFM LRECL BLKSZ  DEN TRT MI*\n               NBK MAXBK AVGBK BLKCNT  BYTES/FILE RECRDS  CREATED JOB N*\n               AME STEPNAME  EXPIRES'\n-INS 20310\nVTOCBYTE DS    CL11               BYTES IN FILE.\nVTOCRECS DS    CL6                LOGICAL RECORDS IN FILE.\n-END\n/*\n//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS2.MC99.OS390.V120.AMODGEN\n//SYSLIN   DD  DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DSN=&&TEMP,DISP=(OLD,DELETE)\n//LKED     EXEC PGM=IEWL,\n//          PARM=(XREF,LET,LIST,MAP,'AC=1')\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//*YSLMOD  DD  DSN=&&LOADSET(TAPESCAN),DISP=(,PASS),\n//*            DCB=(RECFM=U,BLKSIZE=23200),\n//*            SPACE=(CYL,(1,,1)),UNIT=SYSDA\n//SYSLMOD  DD  DISP=SHR,DSN=UMV42.CAJ7083.LOAD(TAPESCAN)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAPESC50": {"ttr": 2311, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TAPESCAN CSECT\n***********************************************************************\n* THIS PROGRAM, CALLED TAPESCAN, WAS WRITTEN BY WILL DALAND, SOCIAL\n* SCIENCE STATISTICAL LABORATORY, INSTITUTE FOR RESEARCH IN SOCIAL\n* SCIENCE, UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL, MARCH 1974.\n* SINCE PROGRAM FOR TAPESCAN WAS PUBLICALLY FUNDED, PERMISSION IS\n* GRANTED FOR ANYONE TO USE THIS PROGRAM IN WHOLE OR IN PART.  IT\n* IS REQUESTED THAT WHEN DOING SO YOU GIVE CREDIT (PREFERABLY BOTH\n* IN SOURCE AND DOCUMENTATION) TO WILL DALAND, IRSS, UNC@CH.\n* VERSION 3.1 INCLUDES EXPIRATION DATE, AVERAGE BLOCK SIZES, AND VTOC\n* LISTING AND WAS PRODUCED BY C. WRANDLE BARTH, GODDARD SPACE FLIGHT\n* CENTER, JANUARY 1975.\n*\n* THIS PROGRAM WAS MODIFIED FOR MVS, JUNE 1978 BY:\n*  STEVE R. HAGGERTY\n*  GTE DATA SERVICES\n*  MARINA DEL REY, CA 90291\n*  (213) 821-0511 EXT. 285\n*\n*  INSTALLED AT UNIONBANC COMPUTER CORPORATION ON 08/25/78\n*  BY HOWARD DEAN (TECHNICAL SERVICES). IF ANY PROBLEMS WITH\n*  THIS PROGRAM ARE ENCOUNTERED, PLEASE CONTACT:\n*\n*   HOWARD M. DEAN\n*   UNION BANK COMPUTER CORPORATION\n*   TECHNICAL SERVICES (8TH FLOOR)\n*   605 W. OLYMPIC BLVD.\n*   LOS ANGELES, CA. 90015\n*   PHONE - (213) 687-5719\n*\n*   WILLIAM J. SMITH\n*   SYNTEX (USA), INC.\n*   3401 HILLVIEW AVENUE\n*   MS A4-CIS\n*   PALO ALTO, CA.  94304\n*   PHONE - (415) 852-1638\n*\n*   LAST ONE TO WORK ON THIS CODE:                             HD DEC86\n*                                                              HD DEC86\n*   HOWARD M. DEAN                                             HD DEC86\n*   SR. SYSTEMS SPECIALIST                                     HD DEC86\n*   AMERICAN PRESIDENT LINES                                   HD DEC86\n*   #3 WATERS PARK DRIVE                                       HD DEC86\n*   SUITE 115                                                  HD DEC86\n*   SAN MATEO, CA 94403                                        HD DEC86\n*   (415) 570-2331                                             HD DEC86\n*                                                              HD DEC86\n* VERSION 3.2 CORRECTED VARIOUS BUGS.\n* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.\n* VERSION 3.4 CORRECTED FOR USE UNDER MVS REL. 3.7F      *GTEDS LA*SRH*\n* VERSION 3.5 CORRECT BUGS AND ADD LINECNT PARAMETER     *GTEDS LA*HMD*\n* VERSION 4.0 REMOVE 7-TRK CODE AND SUPPORT FOR 3480 CARTS     HD DEC86\n* VERSION 5.0 COMPLETE SUPPORT FOR 3480 CARTRIDGE TAPES        HD JAN89\n         EJECT\n***** H I S T O R Y    L O G **********\n*  08/29/78 - HOWARD M. DEAN\n*  A.  INSTALLED AT UNIONBANC COMPUTER\n*  B.  FINISH SUPPORT FOR 556 BPI TAPE (REMOVED BY S. HAGGERTY)\n*      SEE COMMENT AROUND LABEL TRY556. IF DENSITY IS NOT\n*      FOUND, THIS IS THE DEFAULT\n*\n*  09/15/78 - HOWARD M. DEAN\n*   A.  DENSITY PRINTOUT WRONG ON FIRST PAGE OF LISTING. CHANGED\n*       COPY ROUTINE TO ISSUE SENSE CHANNEL COMMAND BEFORE PRINTING\n*       FIRST HEADING SO DENSITY WILL BE CORRECT.\n*\n*   B.  ADD ROUTINE TO CHECK FOR MAGNETIC TAPE DEVICES ON BOTH\n*       INPUT AND OUTPUT, FOR IDIOTS THAT LIKE TO PLAY AROUND\n*       WITH OTHER PEOPLES OVERSIGHTS.\n*\n*   C.  ADD ROUTINE TO CHECK FOR PRINTABLE OUTPUT VOLSER. IF THE\n*       VOLSER FROM THE JFCB IS PRINTABLE, IT IS PRINTED. IF NOT,\n*       THE UCB IS CHECKED FOR A VOLSER. IF THAT IS PRINTABLE IT\n*       IS PRINTED. IF NOT, THE NAME OUTVOL IS USED. THE DCB VOLSER\n*       OR JFCB VOLSER, WHICHEVER IS VALID IS COMPARED TO THE OUTPUT\n*       TAPE LABEL TO DETERMINE IF THE LABEL IS VALID.\n*       ** H. DEAN  09/78 **\n*\n*  10/30/78 - HOWARD DEAN\n*   A.  ADD ROUTINE TO PRINT ERROR MESSAGE IF EXPDT OR\n*       CREDT IN HDR1 OR EOF1 LABEL IS INVALID.\n*\n*   B.  INDICATE STD TRTCH ON VTOC INSTEAD OF BLANKS.\n*\n*   C.  FIX UNPK INSTRUCTION SO TOTAL COUNT OF BLOCKS READ\n*       WOULD NOT BE TRUNCATED. ADDED 3 DIGITS TO LABEL BYTES.\n*\n*  11/22/78 - HOWARD DEAN\n*   A. MOVE DENSITY SENSE ROUTINE TO AVOID ERROR IN SENSE\n*      PROCESSING FOR 6250 BPI TAPES.\n*\n*   B. SET SENSEBYTS INITIALLY TO 3XL8'00'\n*\n*  01/23/79 - HOWARD DEAN\n*   A. FIX DENSITY PRINT ON FIRST PAGE OF COPY LISTING BY ISSUING\n*      READ COMMAND TO SET MODE BEFORE OUTPUT PROCESSING\n*  04/09/79 - HOWARD DEAN\n*   A. MAKE LINE COUNT A SYMBOLIC PARAMETER\n*   B. MAKE \"LINE\" AN EXEC PARAMETER\n*\n*  01/09/84 - WILLIAM SMITH, SYNTEX (USA), INC., PALO ALTO, CA. 94304\n*   A. CHANGED NAME TO \"SYNTEX\" FOR OBVIOUS REASONS\n*   B. EXECUTED UNDER MVS/SP 1.3.3 PUT 8308 WITH UCC/1 4.7 AND\n*      CGA'S \"TOP SECRET\" SECURITY SYSTEM\n*   C. CREDIT IS HEREBY GIVEN TO A PERSONAL FRIEND, C. WRANDLE BARTH,\n*      FORMERLY OF NASA GODDARD SPACE FLIGHT CENTER, FOR THE WORK HE\n*      DID TO ENHANCE TAPESCAN IN THE MID 1970'S UNDER OS/MVT;  ALL\n*      CHANGES IMPLEMENTED BY RANDY ARE FLAGGED -CWB-\n*\n*  08/23/86 - HOWARD M. DEAN, SYNTEX (USA), INC. PALO ALTO, CA 94304\n*   A. FIX PAGE EJECT ROUTINE IN 'VTOC' LISTING TO CORRECTLY\n*      SPACE WHEN A MULTIPLE PAGE VTOC IS PRINTED.\n*\n*  12/24/86 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. REMOVE ALL VESTIGES OF SEVEN TRACK TAPE SUPPORT\n*   B. ADD MINIMAL SUPPORT FOR 3480 TAPE CARDTRIDGES.\n*   C. USE SYSTEM MACROS WHERE POSSIBLE INSTEAD OF HARDCODED VALUES\n*\n*  11/04/88 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. ADD SUPPORT FOR 3480 TAPE CARTRIDGES - MAKE IT WORK\n*\n*  01/09/89 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. FIX 3480 SUPPORT.\n*   B. ADD OPTIONS LIST AT BEGINNING OF INVOCATION             HD JAN89\n*\n*  04/28/89 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. FIX BUG IN OPTIONS LIST WITH \"NOVOLSER\" OPTION\n*\n*  12/11/90 - JAMES E. HAUBER\n*   A. CHANGED HEADING LINE TO INDICATE THAT PROGRAM WAS ASSEMBLED\n*      AT ISC-LETTERKENNY.\n*\n**** NOTE: THIS PROGRAM MUST BE LINKED AUTHORIZED FOR MVS\n****       OPERATION. THIS IS NOT A REQUIREMENT IN ANOTHER\n****       OPERATING SYSTEM. ** HMD 05/79 **\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     OPTIONS IN EFFECT MACRO                         *\n*                                                                     *\n***********************************************************************\n         MACRO\n         OPTN  &C,&CONST,&VALUE\n         LCLA  &N,&P,&P1\n         LCLC  &X,&Y,&Z                                        HD JAN89\n         LCLC  &SANSNO                                         HD JAN89\n&N       SETA  K'&CONST+1\n&P       SETA  &N-2                                            HD JAN89\n&W       SETC  'W'.'&SYSNDX'                                   HD JAN89\n&X       SETC  'X'.'&SYSNDX'                                   HD JAN89\n&Y       SETC  'Y'.'&SYSNDX'                                   HD JAN89\n&Z       SETC  'Z'.'&SYSNDX'                                   HD JAN89\n         AIF   (K'&C EQ 0).SKIP\n.* ASSUME &CONST BEGINS WITH 'NO' IF &C IS NOT EQUAL TO NULLS  HD JAN89\n&SANSNO  SETC  '&CONST'(3,&P)                                  HD JAN89\n         B&C   &X                       NEGATIVE BRANCH        HD JAN89\n         B     &Y                       POSITIVE BRANCH        HD JAN89\n         AGO   .NONUM                                          HD JAN89\n.SKIP    ANOP                                                  HD JAN89\n         AIF   (K'&VALUE EQ 0).ERR01\n         MVC   0(&N,R2),=C',&CONST'\n         L     R1,&VALUE\n         L     R15,=A(DBLWORK)          GET WORK AREA ADDRESS  HD JAN89\n         CVD   R1,0(R15)                CONVERT IN WORK AREA   HD JAN89\n         OI    7(R15),X'0F'             FIX SIGN\n         UNPK  &N.(3,R2),6(2,R15)       UNPACK\n&N       SETA  &N+3                     INCREMENT PAST NUMBER  HD JAN89\n         LA    R2,&N.(R2)               INCREMENT POINTER      HD JAN89\n&W       DS    0H                                              HD JAN89\n         AGO   .MEND                                           HD JAN89\n.NONUM   ANOP                                                  HD JAN89\n&X       DS    0H\n         MVC   0(&N,R2),=C',&CONST'     MOVE NEGATIVE PARM     HD JAN89\n         LA    R2,&N.(R2)               INCREMENT POINTER      HD JAN89\n         B     &Z                       EXIT                   HD JAN89\n&Y       DS    0H                                              HD JAN89\n         MVC   0(&P,R2),=C',&SANSNO'    MOVE POSITIVE PARM     HD JAN89\n         LA    R2,&P.(R2)               INCREMENT POINTER      HD JAN89\n         B     &Z                       EXIT                   HD JAN89\n&Z       DS    0H                                              HD JAN89\n         AGO   .MEND                                           HD JAN89\n.ERR01   MNOTE 12,'VALUE MUST BE SPEIFIED FOR NUMERIC VARIABLE'\n         MEXIT                                                 HD JAN89\n.MEND    ANOP                                                  HD JAN89\n         MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     INITIALIZATION ROUTINES                         *\n*                                                                     *\n***********************************************************************\n         LCLA  &LINECNT                                    *HMD 04/79*\n&LINECNT SETA  57                                          *HMD 04/79*\nMSECT    DSECT\nTRT1     DS    32D\nBLANKBUF DS    CL136              BLANKS FOR BLANKING MSGBUF FAST\nTRT2     DS    32D\nMSGBUF   DS    CL136\nRECBUF   DS    CL136              MINIMUM ALLOC, MAX ALLOC = 32K\nHOLDBUF  DS    CL136                                           HD AUG86\n         EJECT\nTAPESCAN CSECT\nR0       EQU   0   WORK REG + SYSTEM USES\nR1       EQU   1   WORK REG + SYSTEM USES\nR2       EQU   2   MOSTLY FOR LINKAGE TO PUTLINE & GETNUM\nR3       EQU   3   USED IN PARM SCANNER + VTOC ENTRY POINTER.     -CWB-\nR4       EQU   4   BELOW LABEL 'PROCESS' COUNTS BLKS READ FOLLOWING A  *\n                   TAPEMARK OR THE LOAD POINT.\nR5       EQU   5   WORK, INTERNAL SUBROUTINE LINKAGE\nR6       EQU   6   WORK REG\nR7       EQU   7   WORK REG + LENGTH OF LAST BLK READ\nR8       EQU   8   PARM FIELD LENGTH CTR, TOTAL BYTES ON TAPE CTR\nR9       EQU   9   BASE REG FOR DSECT MSECT\nR10      EQU   10  FREE UNUSED REG\nR11      EQU   11  2ND BASE REG\nR12      EQU   12  1ST BASE REG\nR13      EQU   13\nR14      EQU   14  WORK REG + SYSTEM USES\nR15      EQU   15  WORK REG + SYSTEM USES\nIOBECBPT EQU   4\nIOBSTART EQU   16\nDEBUCBAD EQU   32\n         EJECT\nTAPESCAN CSECT                                              -HMD-\n         USING *,R12              BASE FOR INITIALIZATION ONLY\n         STM   14,12,12(13)\n         LR    R12,R15            R12 = TEMP BASE FOR INITIALIZATION\n         L     R11,=A(EXIT)       PERMANENT BASE FOR MAIN AND COMMON\n         USING EXIT,R11\n         LA    R9,SAVE\n         ST    R9,8(R13)\n         ST    13,SAVE+4\n         LR    R13,R9\n         L     R1,0(R1)           GET PTR TO PARM FIELD\n         LH    R8,0(R1)           LOAD PARM FIELD LENGTH\n         LA    R3,2(R1)           SET PTR TO PARM FIELD CHAR STRING\n         LA    R9,SRCHPRM         LOAD TEMPORARY BASE FOR MSECT DSECT\n         USING MSECT,R9           PERMANENT DECLARATION FOR MSECT BASE\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    EXITRC8\n         GETMAIN VU,LA=GMCTRL,A=GMLOCS\n         L     R9,GMLOCS          THERE IS AT LEAST THE MINIMUM CORE\n*              ABOVE STMT SETS UP PERMANENT BASE FOR MSECT DSECT\n*        MVI   BLANKBUF,C' '           (POSTPONE TIL AFTER CLEAR) -CWB-\n*        MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LR    R6,R9              START CLEARING GOTTEN MAIN TO        *\n                                  SHORTEN POSSIBLE DUMPS.\n         L     R4,GMLOCS+4        ACTUAL LENGTH OF GOTTEN MAIN\n         LA    R5,256             OFT-USED CONSTANT FOR CLEARING MAIN\nCLOOP    CR    R4,R5              R5 CONTAINS F'256'\n         BNH   LE256              BIF ONLY 256 OR FEWER BYTES LEFT\n         XC    0(256,R6),0(R6)    CLEAR 256 BYTES\n         SR    R4,R5              R5 CONTAINS F'256'\n         AR    R6,R5              R5 CONTAINS F'256'\n         B     CLOOP\nLE256    BCTR  R4,0               SET TO MACHINE LENGTH\n         EX    R4,XCLEAR          CLEAR LAST 1 TO 256 BYTES\nXCLEAR   XC    0(0,R6),0(R6)      EXECUTED IN STMT ABOVE\n         MVI   BLANKBUF,C' '           CLEAR BLANK AREA.          -CWB-\n         MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LA    R1,MSGBUF+46       FOR ADDRESS CONSTANT IN DYNAMIC -CWB-\n         ST    R1,AMSGBP46        STORAGE.                        -CWB-\n         LA    R1,MSGBUF+72       SECOND ADCON.                   -CWB-\n         ST    R1,AMSGBP72                                        -CWB-\n         LA    R15,RECBUF         POINT THE WRITE\n         O     R15,WRTCMND        CCW TO DYNAMICALLY\n         ST    R15,WRTCMND        ALLOCATED RECORD BUFFER.\n         LA    R15,RECBUF         SET FILE SEARCH CCW TO\n         O     R15,READ81CM       POINT TO\n         ST    R15,READ81CM\n         LA    R15,RECBUF         INSERT POINTER IN               -CWB-\n         O     R15,READCMND            READ COMMAND.              -CWB-\n         ST    R15,READCMND                                       -CWB-\n         LR    R5,R9              PTR TO TRT1\n         LA    R6,16\n         LA    R7,CTABLE\nSETUPTR1 MVC   0(1,5),0(7)        MOVE SEED CHAR INTO TRT1\n         MVC   1(15,5),0(5)       AND PROPAGATE IT\n         LA    5,16(5)\n         LA    7,1(7)\n         BCT   6,SETUPTR1\n         MVC   TRT2(16),CTABLE    MOVE 16 CHAR SEED INTO TRT2\n         MVC   TRT2+16(240),TRT2  AND PROPAGATE IT 15 TIMES\n         TIME  DEC                GET DATE IN R1 IN FORM 00YYJJJF\n         ST    R0,BADLNGTH        SAVE TIME WHILE YOU'RE AT IT\n         LR    R2,R1              PUT IN R2 TO PASS TO DATE SUBROUTINE\n         LA    R1,=A(DATERSLT)    PTR TO PTR TO DATE'S RESULT FIELD\n         L     R15,=V(DATE)       IRSS DATE SUBROUTINE (DATECONV)\n         BALR  R14,R15            CONVERT 00YYJJJF TO MM/DD/YY\n         ED    TIMERSLT,BADLNGTH  EDIT INTO PAGE HEADER LINE BUFFER\n*        SR    R0,R0              SET TO AVOID RESERVING ANY LINES\n*        BAL   R2,PAGECHK         PRINT PAGE HEADER\n         DEVTYPE INPUT+40,DTYPE   CHECK TO SEE IF TAPE DEVICE     -HMD-\n         LTR   R15,R15            DID WE FIND DD STATEMENT?       -HMD-\n         BNZ   NOINPUT            NOPE                            -HMD-\n         CLI   DTYPE+2,X'80'      IS THIS A TAPE DEVICE?          -HMD-\n         BNE   NOTTAPEI           NOPE                            -HMD-\n         RDJFCB (INPUT)           READ INPUT TAPE'S JFCB\n         LTR   R15,R15            SEE IF DD STATEMENT THERE\n         BNE   NOINPUT            EXIT WITH ERR MSG IF NOT\n         MVC   DDVOL,JFCBINX+(JFCBVOLS-JFCB) PUT VOL INTO PAGE HEAD.\n         MVC   JFCLTSV,JFCBINX+(JFCBLTYP-JFCB) SAVE INPUT LABEL TYPE\n         TM    JFCLTSV,X'01'      SEE IF NL OR LTM SPECIFIED\n         BO    *+8                IF IT WAS THEN LEAVE IT AS IT IS\n         MVI   JFCBINX+(JFCBLTYP-JFCB),JFCBLP ELSE SET TO BLP\n         MVC   JFCBINX+JFCBFLSQ-JFCB(2),=H'1' SET FILE SEQ. NO. TO = 1\n         OPEN  (INPUT,INOUT),TYPE=J                            HD OCT88\n         TM    INPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOINPUT            TERMINAL ERROR\n         L     R1,INPUT+(DCBEODAD-IHADCB) GET CORRECT EODAD       -HMD-\n         ST    R1,EODADDR         SAVE FOR EXCP ROUTINE           -HMD-\n         L     R1,GMCTRL+4        LOAD MAXIMUM REQUESTED GETMAIN LENGTH\n         S     R1,GMLOCS+4        SUBTRACT LENGTH ACTUALLY GOTTEN\n         BZ    SENSLDPT           BIF GOT ALL CORE REQUESTED\n         CVD   R1,BADLNGTH        CONVERT DIFERENCE TO PACKED DECIMAL\n         UNPK  MORECORE+33(5),BADLNGTH\n         OI    MORECORE+37,C'0'\n         LH    R2,INPUT+(DCBBLKSI-IHADCB) TO PREVENT DATA 'OVERRUNS'\n         SR    R2,R1              SUBTRACT DIFFERENCE OF MORE CORE\n         STH   R2,INPUT+(DCBBLKSI-IHADCB) AND PUT BACK IN DCB\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'MORECORE),MORECORE\nSENSLDPT LA    R1,=AL3(SENSCMND)  SET UP PTR FOR EXECEXCP CALL\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP        CALL EXCP SUBROUTINE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    SENSTYP            BIF LOAD POINT SENSED           -HMD-\n         LA    R1,=AL3(RWNDCMND)  REWIND AND RE-SENSE COMMAND CHAIN\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         TM    SENSBYTS+1,X'08'   SEE IF NOW AT LOAD POINT\n         BO    SENSTYP            BIF AT LOAD POINT               -HMD-\nLDPTERR  BAL   R2,PUTLINE         PRINT ERROR MESSAGE             -HMD-\n         MVC   MSGBUF(66),=C'0UNABLE TO REWIND INPUT TAPE TO LOAD POINT*\n                - TERMINATING EXECUTION'\n         B     EXITRC8\nSENSTYP  DS    0H                 SENSE DENSITY OF TAPE           -HMD-\n         LA    R1,HDEOD           FAKE EOD ADDRESS                -HMD-\n         ST    R1,EODADDR         SAVE EOD ADDRESS FOR EXECEXCP   -HMD-\n         LA    R1,=AL3(READCMND)  READ TO SET UP SENSE BYTES      -HMD-\n         LA    R2,INPUT           POINT TO DCB                    -HMD-\n         BAL   R4,EXECEXCP        GO DO EXCP                      -HMD-\nHDEOD    LA    R1,=AL3(SENSCMND)  REWIND TO LOAD POINT            -HMD-\n         LA    R2,INPUT           POINT TO INPUT DCB              -HMD-\n         XC    SENSBYTS(24),SENSBYTS                              -HMD-\n         BAL   R4,EXECEXCP        ISSUE EXCP                      -HMD-\nRESTREOD L     R1,INPUT+(DCBEODAD-IHADCB) GET EOD ADDRESS         -HMD-\n         ST    R1,EODADDR         SAVE FOR FUTURE USE             -HMD-\n         L     R2,(DCBDEBAD-IHADCB)+INPUT GET \"DEB\" ADDRESS    HD NOV86\n         L     R2,DEBUCBAD(R2)    GET \"UCB\" ADDRESS            HD NOV86\n         TM    UCBTBYT4-UCBOB(R2),UCB3480                      HD NOV86\n         BO    HD3480             FLAG HEADER IF 3480 DEVICE   HD NOV86\n         TM    SENSBYTS+3,4       P.E.= 1600 B.P.I?               -HMD-\n         BZ    HD6250             NO, TRY 6250                    -HMD-\n         MVI   TAPEDENS,C'3'      SET DENS FOR 1600 BPI           -HMD-\n         MVC   PRTDENS(4),=CL4'1600'   SET PRINT DENS FOR 1600    -HMD-\n         B     HDEND              HEADING END                     -HMD-\nHD6250   L     R2,(DCBDEBAD-IHADCB)+INPUT GET INPUT DEB ADDR.     -HMD-\n         L     R2,DEBUCBAD(R2)    GET UCB ADDRESS                 -HMD-\n         TM    16(R2),2           UCBTYP = 6250?                  -HMD-\n         BNO   HD800              NOPE, TRY 800 BPI               -HMD-\n         MVI   TAPEDENS,C'4'      SET DEN FOR 6250 BPI            -HMD-\n         MVC   PRTDENS(4),=CL4'6250'  SET PRINT FOR 6250          -HMD-\n         B     HDEND                                              -HMD-\nHD3480   MVI   TAPEDENS,C'5'      SELECT DENSITY=5             HD JAN89\n         MVC   PRTDENS(4),=CL4' 38K'                           HD JAN89\n         L     R1,=A(FLAG3480)    LOAD ADDRESS OF FLAG         HD NOV86\n         MVI   0(R1),C'Y'         INDICATE 3480 DEVICE         HD NOV86\n         B     HDEND              CONTINUE WITH PROGRAM        HD NOV86\nHD800    TM    INPUT+(DCBDEN-IHADCB),B'10000011' 800 BPI?         -HMD-\n         MVI   TAPEDENS,C'2'      SET DEN FOR 800 BPI             -HMD-\n         MVC   PRTDENS(4),=CL4' 800'  SET PRINT FOR 800 BPI       -HMD-\n         B     HDEND              END OF ROUTINE                  -HMD-\nHDEND    DS    0H                 ENOUGH OF ALL THIS NONSENSE     -HMD-\n         LA    R1,=AL3(RWNDCMND)  REWIND TO LOAD POINT            -HMD-\n         LA    R2,INPUT           GET INPUT ADDRESS               -HMD-\n         BAL   R4,EXECEXCP        GO DO IT                        -HMD-\nREWOUND  TM    SENSBYTS+1,X'08'   ARE WE AT LOAD POINT NOW?       -HMD-\n         BZ    LDPTERR            NO, INDICATE LOAD ERROR         -HMD-\nSRCHPRM  LTR   R8,R8              LOAD AND TEST REMAINING PARM LENGTH\n         BNH   ENDPARMS\n         SR    R5,R5              ZERO CURRENT PARM LENGTH COUNTER\n         LR    R4,R3              SAVE PTR TO START OF PARM\nSRCHCOMA CLI   0(R3),C','\n         LA    R3,1(R3)           BUMP PTR TO NEXT CHAR\n         BE    GOTCOMMA\n         LA    5,1(5)             COUNTS LENGTH OF CURRENT PARM\n         BCT   R8,SRCHCOMA\nGOTCOMMA CLC   0(6,R4),=C'NOLIST' GET HERE IF COMMA OR END OF PARM LIST\n         BE    NOLIST\n         CLC   0(4,4),=C'LIST'\n         BE    LIST\n         CLC   0(5,4),=C'MAXTM'   INITIALLY 32760           FJP/20FEB79\n         BE    MAXTM\n         CLC   0(6,4),=C'SKIPTM'\n         BE    SKIPTM\n         CLC   0(5,4),=C'NOHEX'\n         BE    NOHEX\n         CLC   0(6,4),=C'MAXEOV'\n         BE    MAXEOV\n         CLC   0(7,4),=C'SKIPEOV'\n         BE    SKIPEOV\n         CLC   0(9,4),=C'NOSUMMARY'\n         BE    NOSUMARY\n         CLC   0(5,4),=C'COUNT'\n         BE    COUNT\n         CLC   0(7,4),=C'NOCOUNT'\n         BE    NOCOUNT\n         CLC   0(6,4),=C'ERRLIM'\n         BE    ERRLIM\n         CLC   0(4,4),=C'COPY'\n         BE    COPY               TAPE COPYING OPTION\n         CLC   0(6,4),=C'EOVMOD'  MOD OPTION IMPLIES COPY & COUNT OPTNS\n         BE    EOVMOD\n         CLC   0(8,4),=C'NOVOLSER'\n         BE    NOVOLSER\n         CLC   0(3,4),=C'OPT'\n         BE    OPT                MISCELLANEOUS OPTIONS\n         CLC   0(4,4),=C'LINE'    LINE COUNT OPTION        *HMD 04/79*\n         BE    LINE                                        *HMD 04/79*\n         CLC   0(4,4),=C'VTOC'                                  MRX-JJJ\n         BE    VTOCONLY                                         MRX-JJJ\nUNRECOG  BAL   R2,PUTLINE\n         MVC   MSGBUF(33),=C'0ERROR - UNRECOGNIZABLE PARAMETER'\nPRLENERR BAL   2,PUTLINE\n         MVC   MSGBUF(32),=C'0WARNING - INVALID PARM IGNORED.'\nSRCHPARM BCTR  R8,0\n         B     SRCHPRM\nGETNUM   DS    0H                 CHAR STRNG INTGR TO BIN INTGR CONV SB\n         SR    6,6                CLEAR ACCUMULATOR\n         CLI   0(4),C'9'          * R4=PTR TO 1ST CHAR OF NUM         *\n         BH    NUMERR             * R5=ACTUAL LENGTH OF NUM           *\n         CLI   0(4),C'0'          * RESULT RETURNED IN R6             *\n         BL    NUMERR             * R2,R4,R5,R6, AND R7 MODIFIED BY   *\n         MH    R6,=H'10'          * USING GETNUM SUBROUTINE.          *\n         IC    R7,0(4)            PICK UP DECIMAL CHARACTER\n         SLL   7,28               CHOP OFF LEFT 4 BITS\n         SRL   7,28               AND SHIFT BACK\n         AR    6,7                ADD DIGIT INTO RESULT\n         LA    4,1(4)             BUMP PTR TO NEXT CHAR\n         BCT   5,GETNUM+2         GO TO TOP OF LOOP\n         BR    2                  RETURN FROM GETNUM SUBROUTINE\nNUMERR   BAL   R2,PUTLINE         ERROR DESCRIPTOR SUBROUTINE\n         MVC   MSGBUF(50),=C'0ERROR - PARAMETER HAS INVALID NUMERICAL C*\n               OMPONENT'\n         B     PRLENERR\nNOCOUNT  CH    R5,=H'7'\n         BNE   PRLENERR           *** WARNING *** MODIFIED IN COPY/MOD *\n                                                  OPTION ROUTINES.\n         MVI   COUNTFLG,C'N'\n         B     SRCHPARM\nCOUNT    CH    R5,=H'5'           FINAL PROCESSING OF COUNT OPTION\n         BNE   UNRECOG\n         MVI   COUNTFLG,C'Y'\n         B     SRCHPARM\nNOVOLSER CH    R5,=H'8'\n         BNE   UNRECOG\n         MVI   SVOUTFLG,C'Y'      SET 'NOVOLSER SPECIFIED' FLAG\n         TM    JFCLTSV,X'31'      SEE IF INPUT HAD LABEL TYPE OF NL,\n         BNZ   SRCHPARM           BLP, OR LTM, AND BIF SO.\n         OI    WRTFLG,X'04'       OR IN 'DO NOT COPY INPUT VOL LABEL'\n         B     SRCHPARM\nCOPY     CH    R5,=H'4'\n         BNE   UNRECOG\n         OI    COPYFLG,X'01'      INDICATE COPY OPTION SPECIFIED\n         OI    WRTFLG,X'01'       INDICATE COPY   REQUESTED (THAT BIT)\n         OI    NOCOUNT+5,X'F0'    NOP OUT NOCOUNT & SET FOR WARN MSG\n         B     COUNT+8            COPY OPTION INVOKES COUNT AUTOMATICLY\nEOVMOD   CH    R5,=H'6'           ADD DATASETS ONTO EOV\n         BNE   UNRECOG\n         OI    COPYFLG,X'03'      BITS = 'COPY OPT + MOD OPT REQUESTED'\n         B     COPY+8             MOD OPTION IMPLIES COPY OPTION\nOPT      CH    R5,=H'3'\n         BNH   PRLENERR\n         LA    R4,4(R4)\n         SH    R5,=H'4'\n         BAL   R2,GETNUM\n         ST    R6,OPTNO\n         B     SRCHPARM\nERRLIM   CH    R5,=H'5'           CHANGE SYNAD ERROR COUNT LIMIT\n         BNH   PRLENERR\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SYNADNO\n         B     SRCHPARM\nNOLIST   CH    R5,=H'6'           FINAL PROCESSING OF NOLIST PARM\n         BNE   UNRECOG\n         SR    R0,R0\n         ST    R0,LISTNO\n         B     SRCHPARM\nLIST     CH    R5,=H'4'\n         BNH   PRLENERR\n         LA    R4,4(R4)\n         SH    R5,=H'4'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          GET PRESUMED NUMBER INTO BINARY FORM\n         ST    R6,LISTNO          STORE NONNEGATIVE BINARY INTEGER\n         B     SRCHPARM\nNOHEX    CH    R5,=H'5'\n         BNE   UNRECOG\n         MVI   HEXFLG,C'N'\n         B     SRCHPARM\nVTOCONLY CH    R5,=H'4'                                         MRX-JJJ\n         BNE   UNRECOG                                          MRX-JJJ\n         MVI   VTOCFLAG,C'Y'      SET VTOC ONLY FLAG           HD OCT88\n         B     SRCHPARM                                         MRX-JJJ\nNOSUMARY CH    R5,=H'9'\n         BNE   UNRECOG\n         MVI   SUMFLG,C'N'        SET SUMMARY FLAG TO 'NOSUMMARY'\n         LA    R0,1               READ MINIMUM OF 1 BLK AFTER A TAPEMRK\n         ST    R0,READNO          SET # OF BLKS TO READ FOR SUMMARY=0\n         B     SRCHPARM\nSKIPTM   CH    R5,=H'6'\n         BNH   PRLENERR\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SKIPTMNO\n         B     SRCHPARM\nLINE     CH    R5,=H'4'            IS THIS PARM 'LINE'?    *HMD 04/79*\n         BNH   PRLENERR            NOPE, LENGTH ERROR      *HMD 04/79*\n         LA    R4,4(R4)            BUMP POINTER            *HMD 04/79*\n         SH    R5,=H'4'            DECREMENT COUNTER       *HMD 04/79*\n         BAL   R2,GETNUM           GET NUMERIC VALUE       *HMD 04/79*\n         CH    R6,=H'30'           TOO LOW?                *HMD 04/79*\n         BL    NUMERR              YES, FORGET IT          *HMD 04/79*\n         CH    R6,=H'99'           TOO HIGH?               *HMD 04/79*\n         BH    NUMERR              YES, FORGET IT          *HMD 04/79*\n         ST    R6,LINECNT          SAVE LINE COUNT PARM    *HMD 04/79*\n         B     SRCHPARM            GET SOME MORE PARMS     *HMD 04/79*\nMAXTM    CH    R5,=H'5'\n         BNH   PRLENERR\n         LA    R4,5(4)\n         SH    R5,=H'5'\n         BAL   R2,GETNUM\n         LTR   R6,R6              MAKE SURE MAXTM IS NOT =0\n         BZ    NUMERR             ERROR - INVALID NUMERICAL PARM\n         ST    R6,MAXTMNO\n         B     SRCHPARM\nSKIPEOV  CH    R5,=H'7'\n         BNH   PRLENERR\n         LA    R4,7(R4)\n         SH    R5,=H'7'\n         BAL   R2,GETNUM\n         ST    R6,SKPEOVNO\n         B     SRCHPARM\nMAXEOV   CH    R5,=H'6'           CHECK LENGTH OF PARM\n         BNH   PRLENERR           LENGTH MUST BE GREATER THAN 6\n         LA    R4,6(R4)           BUMP PTR TO START OF PARM'S NUMBER\n         SH    R5,=H'6'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          CONVERT NUMBER FOLLOWING 'MAXEOV' PRM\n         LTR   R6,R6              MAKE SURE MAXEOV IS NOT=0\n         BZ    NUMERR             INVALID NUMERICAL COMPONENT\n         ST    R6,MAXEOVNO        STORE RESULT\n         B     SRCHPARM\nENDPARMS DS    0H\n         CLC   SKPEOVNO,MAXEOVNO  PARM VALIDITY CHECKING\n         BL    *+26               SKIP IF NO ERROR\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(48),=C'0SKIPEOV PARM GE MAXEOV; SKIPEOV SET TO MA*\n               XEOV-1'\n         L     R2,MAXEOVNO\n         SH    R2,=H'1'\n         ST    R2,SKPEOVNO        STORE IT SET TO MAXEOV-1\n         CLC   SKIPTMNO,MAXTMNO\n         BL    *+26               SKIP IF SKIPTMNO & MAXTMNO CONSISTENT\n         BAL   R2,PUTLINE         PRINT ERROR MESSAGE\n         MVC   MSGBUF(44),=C'0SKIPTM PARM GE MAXTM; SKIPTM SET TO MAXTM*\n               -1'\n         L     R2,MAXTMNO         MAXIMUM ON TAPEMARKS TO BE READ\n         SH    R2,=H'1'\n         ST    R2,SKIPTMNO        STORE AS MAXTM-1\n         CLC   SKPEOVNO,=F'0'     SPECIFIED?\n         BE    ENDP010            NO, ITS OK\n         CLC   SKIPTMNO,=F'0'     SPECIFIED?\n         BE    ENDP010             NO, ITS OK\n         BAL   R2,PUTLINE         BOTH SPECIFIED, ERROR\n         MVC   MSGBUF(52),=C'0BOTH SKIPTM AND SKIPEOV SPECIFIED; SKIPEO+\n               V IGNORED.'        PRINT ERROR MESSAGE\n         MVC   SKPEOVNO,=F'0'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       PRINT OPTIONS IN EFFECT                       *\n*                                                                     *\n***********************************************************************\nENDP010  DS    0H                                              HD OCT88\n         MVC   MSGBUF,BLANKBUF    PRINT A BLANK LINE           HD JAN89\n         BAL   R2,PUTLINE3                                     HD JAN89\n         DC    C'OPT111'                                       HD JAN89\n         SPACE 2                                               HD JAN89\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,LIST,LISTNO                                    HD JAN89\n         CLI   HEXFLG,C'N'                                     HD JAN89\n         OPTN  E,NOHEX                                         HD JAN89\n         CLI   COUNTFLG,C'N'                                   HD JAN89\n         OPTN  E,NOCOUNT                                       HD JAN89\n         CLC   READNO,=F'1'                                    HD JAN89\n         OPTN  E,NOSUMMARY                                     HD JAN89\n         CLI   COPYFLG,0                                       HD JAN89\n         OPTN  E,NOCOPY                                        HD JAN89\n         TM    COPYFLG,X'02'                                   HD JAN89\n         OPTN  NO,NOEOVMOD                                     HD JAN89\n         CLI   SVOUTFLG,C'Y'                                   HD APR89\n         OPTN  E,NOVOLSER                                      HD JAN89\n         MVI   MSGBUF+19,C' '    BLANK OUT FIRST COMMA         HD JAN89\n         BAL   R2,PUTLINE3       PRINT FIRST OPTION SET        HD JAN89\n         NOP   FWY101            POINT TO                      HD JAN89\n         NOPR  0                    BRANCH AROUND              HD JAN89\n         SPACE 2                                               HD JAN89\n         MVC   MSGBUF,BLANKBUF   CLEAR BUFFER FAST             HD JAN89\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,SKIPEOV,SKPEOVNO                               HD JAN89\n         OPTN  ,SKIPTM,SKIPTMNO                                HD JAN89\n         OPTN  ,MAXEOV,MAXEOVNO                                HD JAN89\n         OPTN  ,MAXTM,MAXTMNO                                  HD JAN89\n         OPTN  ,OPT,OPTNO                                      HD JAN89\n         CLI   VTOCFLAG,C'N'                                   HD JAN89\n         OPTN  E,NOVTOCONLY                                    HD JAN89\n         MVI   MSGBUF+19,C' '     BLANK OUT FIRST COMMA\n         BAL   R2,PUTLINE3\n         DC    C'OPT222'                                       HD JAN89\n         SPACE 2                                               HD JAN89\nFWY101   DS    0H                                              HD JAN89\n         TM    COPYFLG,X'01'      SEE IF COPY AND/OR MOD SPECIFIED\n         BZ    NOTBOTH            BIF COPY OPTION NOT SPECIFIEDHD JAN89\n         MVI   COUNTFLG,C'Y'      TURN COUNT OPTION ON         HD OCT88\n         MVI   SVOUTFLG,C'N'      TURN \"NOVOLSER\" OFF          HD OCT88\n***************************************************************HD OCT88\n**                                                             HD OCT88\n**   CHECK OUTPUT TAPE, IF ANY FOR VALID DEVICE TYPE, ETC..    HD OCT88\n**                                                             HD OCT88\n***************************************************************HD OCT88\nOUTCHECK DS    0H                                              HD OCT88\n         DEVTYPE OUTPUT+40,DTYPE  CHECK FOR MAG TAPE DEVICE       -HMD-\n         LTR   R15,R15            IS DD STMT THERE?               -HMD-\n         BNZ   NOOUTPUT           NOPE                            -HMD-\n         CLI   DTYPE+2,X'80'      IS THIS A TAPE DEVICE?          -HMD-\n         BNE   NOTTAPEO           NOPE                            -HMD-\n         RDJFCB (OUTPUT)          ELSE PROCESS COPY AND/OR MOD OPTIONS\n         LTR   R15,R15            SEE IF RDJFCB WENT ALLRIGHT\n         BNE   NOOUTPUT           'MISSING OR INVALID DD' ERROR MSG\n         MVC   SAVEVOL,JFCBOUT+(JFCBVOLS-JFCB) SAVE VOLSER        -HMD-\n         NI    VOLSW,255-VOLSWNV          TURN OFF BIT            -HMD-\n         L     R3,=A(EBCDTBL)             GET TABLE ADDR          -HMD-\n         TRT   SAVEVOL(6),0(R3)           CHECK PRINTABLES        -HMD-\n         BZ    @VALID                     BIF OK                  -HMD-\n         OI    VOLSW,VOLSWNV              TURN ON SWITCH          -HMD-\n         B     *+10                       DONT MOVE IN VOLSER     -HMD\n@VALID   MVC   POSMSG+22(6),SAVEVOL       MOVE VOLSER TO HEADING  -HMD-\n         MVC   OUTLTYP,JFCBOUT+(JFCBLTYP-JFCB)\n         TM    OUTLTYP,X'01'      SEE IF LABEL IS NL OR LTM\n         BO    *+8                BIF YES - IT IS NL OR LTM\n         MVI   JFCBOUT+(JFCBLTYP-JFCB),JFCBLP ELSE SET TO BLP\n         LA    R0,1\n         LH    R2,JOUTFLSQ        SAVE ORIGINAL FILE SEQ. NO.\n         LTR   R2,R2              BUT IF IT'S\n         BNZ   *+6                EQUAL TO ZERO THEN\n         LR    R2,R0              SET IT TO = 1.\n         STH   R0,JOUTFLSQ        TEMPORARILY SET FLSQ IN JFCB TO = 1\n         ST    R2,SVR2            SAVE R2 OVER TRT                -HMD-\n         OPEN  (OUTPUT,INOUT),TYPE=J                           HD OCT88\n         TM    OUTPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOOUTPUT\n         TM    VOLSW,VOLSWNV      IS VOLSER PRINTABLE?            -HMD-\n         BNO   @VOLOK             YES, WE TOOK CARE OF IT EARLIER -HMD-\n         L     R2,(DCBDEBAD-IHADCB)+OUTPUT GET DEB ADDR           -HMD-\n         L     R2,DEBUCBAD(R2)    GET UCB ADDR                    -HMD-\n         MVC   SAVEVOL(6),28(R2)  SAVE VOLSER                     -HMD-\n         L     R3,=A(EBCDTBL)     GET TABLE ADDR                  -HMD-\n         TRT   SAVEVOL(6),0(R3)   SEE IF CHARS ARE PRINTABLE      -HMD-\n         BNZ   @VOLOK             NOPE, THEY ARE NOT..LEAVE CONST.-HMD-\n         MVC   POSMSG+22(6),SAVEVOL   MOVE IN MESSAGE             -HMD-\n@VOLOK   DS    0H                 END OF PRINTABLE CHECK          -HMD-\n         L     R2,SVR2            RESTORE R2 FROM SAVE AREA       -HMD-\n         LA    R1,EXCPIOBP        POINT TO IOB BSAM-TYPE PREFIX.  -CWB-\n         IC    R0,OUTPUT+(DCBIOBA-IHADCB) CHANGE DCB POINTER FROM EXCP-\n         ST    R1,OUTPUT+(DCBIOBA-IHADCB) TYPE TO BSAM-TYPE POINTER\n         STC   R0,OUTPUT+(DCBIOBA-IHADCB) FOR \"EXECEXCP\" CONSISTANCY\n         STH   R2,JOUTFLSQ        RESTORE ORIGINAL FLSQ IN JFCB\n         TM    OUTLTYP,X'42'      SEE IF AL, AUL, SL, OR SUL\n         BZ    COPYOUT            BIF NOT ONE OF ABOVE\n         LA    R1,=AL3(READCMND)  USE EXCP TO READ PRESUMED VOL   -CWB-\n         LA    R2,OUTPUT               LABEL (CHANGED FROM BSAM   -CWB-\n         BAL   R4,EXECEXCP             READING).                  -CWB-\n         LH    R7,READLENG        GET LENGTH OF READ COMMAND.     -CWB-\n         LH    R6,RESIDL          GET RESIDUAL LENGTH AFTER READ. -CWB-\n         SR    R7,R6\n         BNH   BADREC             VERY BAD IF RECORD LENGTH LT 1\n         TM    OUTLTYP,X'02'      SEE IF SL OR SUL, OR AL OR AUL\n         BO    COPYSL             BIF SL OR SUL\n*COPYAL  CLC   RECBUF(4),=X'B6AFAC51'  SEE IF ANSI 'VOL1'\n         BNE   BADOUTVL           AL OR AUL IN JCL, BUT LABEL NOT ANSI\n         C     R7,=F'80'\n         BL    BADOUTVL\n         B     REWINDCK\nCOPYSL   C     R7,=F'80'          SEE IF PRESUMED IBM SL IS 80 BYTES\n         BNE   BADOUTVL           BIF PRESUMED IBM LABEL NOT 80 BYTES\n         CLC   RECBUF(4),=C'VOL1'\n         BNE   BADOUTVL\n         CLC   SAVEVOL,RECBUF+4             COMPARE VOL SERS     -HMD-\n         BNE   BADOUTVL\nREWINDCK CLC   JOUTFLSQ(2),=H'1'  DO NOT REWIND IF FILE SEQ. NO. GT 1\n         BH    COPYOUT            DO NOT REWIND IF FILE SEQ. NO. GT 1\n         TM    COPYFLG,X'02'      DO NOT REWIND IF EOVMOD SPECIFIED\n         BO    COPYOUT            DO NOT REWIND IF EOVMOD SPECIFIED\n         CLI   SVOUTFLG,C'Y'      DO NOT REWIND IF NOVOLSER SPECIFIED\n         BE    COPYOUT            DO NOT REWIND IF NOVOLSER SPECIFIED\n         LA    R1,=AL3(RWNDCMND)  REWIND COMMAND CHAINED TO SENSE CMND\n         LA    R2,OUTPUT          OUTPUT DCB\n         BAL   R4,EXECEXCP        REWIND AND SENSE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    COPYOUT            BIF SENSED LOADPOINT\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(67),=C'0UNABLE TO REWIND OUTPUT TAPE TO LOAD POIN*\n               T - TERMINATING EXECUTION'\n         B     EXITRC8\nBADOUTVL BAL   R2,PUTLINE\n         MVC   MSGBUF(32),=C'0OUTPUT VOLUME LABEL IS INVALID:'\n         LR    R3,R12             PROVIDE PROPER ADDRESSABILITY.\n         L     R12,=A(EXIT+4096)\n         DROP  R12\n         USING TAPESCAN,R3\n         BAL   R5,LISTON\n         B     EXITRC8\n         LR    R12,R3             RESTORE ADDRESSABILITY.\n         DROP  R3\n         USING TAPESCAN,R12\nCOPYOUT  DS    0H                 IF NECESS., MOD PROCESSING DONE HERE\n         LA    R0,EODADOUT        ADDRESS OF NEW OUTPUT TAPE EODAD RTN\n         ST    R0,OUTPUT+(DCBEODAD-IHADCB) AND SET IT UP IN DCB.\nFILELOOP TM    COPYFLG,X'02'      SEE IF MOD SPECIFIED\n         BO    FILEFSM            IF SO THEN DO SRCH FWRD FOR TPMK\n         CLC   COUTFILE,JOUTFLSQ  ARE WE IN RIGHT FILE YET?\n         BNL   FILEMSG            BIF YES\nFILEFSM  LA    R1,=AL3(FSMCMND)   FWRD SPACE JUST PAST NEXT TAPEMARK\n         LA    R2,OUTPUT\n         BAL   R4,EXECEXCP\n         LA    R0,1               MAINTAIN\n         AH    R0,COUTFILE        CURRENT FILE\n         STH   R0,COUTFILE        NUMBER.\n         CH    R0,JOUTFLSQ        BIF NOT YET UP TO SPECIFIED FILE\n         BL    *+12               BIF NOT YET UP TO SPECIFIED FILE\n         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED\n         BZ    FILEMSG            BIF   EOVMOD NOT SPECIFIED\n         LA    R1,=AL3(READCMND)  PREPARE TO READ WHAT IMMEDIATELY-CWB-\n         LA    R2,OUTPUT               FOLLOWS THE TAPE MARK.     -CWB-\n         BAL   R4,EXECEXCP        (CHANGED TO EXCP FROM BSAM.)    -CWB-\n         B     FILELOOP           ELSE IT'S A BLOCK, SO JUST GO ON\nFILEPOS  DS    0H                 BACKSPACE PAST 2ND TAPEMARK OF EOV\n         LA    R2,OUTPUT          PTR TO OUTPUT TAPE'S DCB\n         LA    R1,=AL3(BSFCMND)   BACKSPACE PAST ONE TAPEMARK\n         BAL   R4,EXECEXCP\n         LH    R0,COUTFILE        AND\n         BCTR  R0,0               REDUCE CURRENT FILE NO. APPROPRIATELY\n         STH   R0,COUTFILE\nFILEMSG  DS    0H                 PRINT INITIAL OUTPUT POSITION MSG\n         LH    R1,COUTFILE\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  POSMSG+32(4),BADLNGTH TELL WHERE 1ST FILE OUTPUT GO-CWB-\n         MVC   POSMSG+47(4),POSMSG+32 MOVE INTO EXPLANATORY COMMEN-CWB-\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'POSMSG),POSMSG\n         B     NOTBOTH\nEODADOUT LA    R0,1               COUNT\n         AH    R0,COUTFILE        THIS\n         STH   R0,COUTFILE        TAPEMARK (THE 2ND ONE OF AN EOV).\n         CH    R0,JOUTFLSQ        SEE IF UP TO SPECIFIED TAPEMARK\n         BL    TOPT456            BIF NOT UP TO SPECIFIED TAPEMARK\n         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED\n         BO    FILEPOS            BIF EOVMOD SPECIFIED\n         TM    OPTNO,X'10'        SEE IF 'IGNORE EOV'S UNTIL FLSQ SATIS\n         BO    FILEPOS            BIF IT IS SPECIFIED\n         B     BADEOV             GIVE 'EM HELL, HARRY!\n*\nNOTTAPEO MVC   IDNTAPE+1(6),=C'OUTPUT'   MOVE 'OUTPUT' TO MSG     -HMD-\nNOTTAPEI BAL   R2,PUTLINE         PUT OUT LINE.                   -HMD-\n         MVC   MSGBUF(L'IDNTAPE),IDNTAPE MOVE MSG TO BUFFER       -HMD-\n         B     EXITRC8            RETURN WITH BAD CODE            -HMD-\n*\nTOPT456  TM    OPTNO,X'10'        TEST FOR OPT268435456\n         BO    FILELOOP           AND IF SPECIFIED IGNORE DOUBLE TPMK\nBADEOV   BAL   R2,PUTLINE\n         MVC   MSGBUF(83),=C'0ERROR - EOV INDICATION ENCOUNTERED BEFORE*\n                OUTPUT TAPE FINISHED INITIAL POSITIONING'\n         B     EXITRC8\nEODADBAD BAL   R2,PUTLINE\n         MVC   MSGBUF(092),=C'0ERROR - OUTPUT TAPE HAD TAPEMARK FOLLOWI*\n               NG LOAD POINT, BUT NEITHER LTM OR BLP WAS SPECIFIED'\n*                                 (LENGTH FIELD CORRECTED.)       -CWB-\n         B     EXITRC8\nNOTBOTH  DS    0H\n         L     R12,=A(EXIT+4096)  LOAD 2ND BASE REG FOR MAIN CODE\n         DROP  R12                DROP R12 FOR COMMON STUFF, ONLY R11\n         B     SKIPEOVP           INITIALIZATION ENDS HERE\n         USING TAPESCAN,R12\nNOOUTPUT MVC   BADINPUT+1(6),=C'OUTPUT'\nNOINPUT  BAL   R2,PUTLINE         BAD OR MISSING DD ROUTINE\n         MVC   MSGBUF(L'BADINPUT),BADINPUT\n         B     EXITRC8\n         DROP  R12\nBSFCMND  CCW   X'2F',0,X'70',1    BSF, CC,SLI,SKIP\n         CCW   X'04',SENSBYTS,X'20',24 SENSE SLI UP TO 24 BYTES\nREAD81CM CCW   2,0,X'60',81       SET TO POINT TO RECBUF DYNAMICALLY\n         CCW   4,SENSBYTS,X'20',24 AND SENSE FOR DEBUG\nJFCBOUT  DS    22D\nJOUTFLSQ EQU   JFCBOUT+(JFCBFLSQ-JFCB)\nEXLSTOUT DC    0F'0',X'87',AL3(JFCBOUT)\nGMCTRL   DC    A(RECBUF+136-TRT1)  MINIMUM LENGTH FOR THE GETMAIN\n         DC    A(RECBUF-TRT1+32768) MAXIMUM LENGTH FOR THE GETMAIN\nGMLOCS   DC    2F'0'\nDTYPE    DC    2F'0'              TO HOLD DEVTYPE INFO            -HMD-\nSVR2     DC    F'0'               SAVE AREA FOR R2 OVER TRT       -HMD-\nEXITLIST DS    0F                 INPUT DCB EXIT LIST FOR RDJFCB\n         DC    X'87'              LAST ENTRY AND RDJFCB\n         DC    AL3(JFCBINX)       BUFFER FOR INPUT TAPE'S JFCB\nBADINPUT DC    C'0INPUT  DD STATEMENT MISSING OR INVALID'\nIDNTAPE  DC    C'0INPUT DEVICE IS NOT MAGNETIC TAPE - EXECUTION TERMINAX\n               TED '                                              -HMD-\nPOSMSG   DC    C'0FIRST OUTPUT FILE ON SCRTCH IS 0000 -- LABEL=(0000,BL*\n               P)'                                                -CWB-\nMORECORE DC    C'0WARNING:  TAPESCAN SHOULD HAVE 00000 MORE BYTES OF CO*\n               RE FOR RELIABLE OPERATION; PROCESSING WILL BE ATTEMPTED *\n               ANYWAY.'\nCTABLE   DC    C'0123456789ABCDEF'\nSAVEVOL  DC    CL6' '             SAVE AREA FOR OUTPUT VOLSER     -HMD-\nSVOUTFLG DC    C'N'               C'Y' = 'SAVE OUTPUT VOL LABEL '\nVERIFLG  DC    C'N'\nOUTLTYP  DC    C'0'               FOR SAVING OUTPUT TAPE'S LABEL TYPE\nCOPYFLG  DC    X'00'              COPY AND MOD OPTION REQUEST BITS\nVOLSW    DC    X'00'              SWITCH FOR ALPHANUMERIC TEST    -HMD-\nVOLSWNV  EQU   X'80'              VOLSER NOT ALPHANUMERIC         -HMD-\n         LTORG\n         EJECT\n* COMMON ROUTINES FOR BOTH INITIALIZATION AND MAIN ARE HERE.\nEXIT     MVI   RCINSTR+3,X'00'    NORMAL END, SET RET CODE = 0\nEXITRC8  DS    0H                                                 -CWB-\n         TM    OUTPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    CLOSEIN            IF NOT, SKIP CLOSE.             -CWB-\n         LA    R1,EXCPIOB         RESTORE IOB POINTER IN DCB      -CWB-\n         IC    R0,OUTPUT+(DCBIOBA-IHADCB) TO POINT TO TRUE IOB, NOT\n         ST    R1,OUTPUT+(DCBIOBA-IHADCB) BSAM-TYPE IOB PREFIX.\n         STC   R0,OUTPUT+(DCBIOBA-IHADCB)\n         NI    OUTPUT+(DCBOFLGS-IHADCB),X'7F' PRETEND LAST I/O WAS A\n         OI    OUTPUT+(DCBOFLGS-IHADCB),X'04' READ TO AVOID WRITING A\n*                                      TAPE MARK.                 -CWB-\n         CLOSE  OUTPUT            CLOSE OUTPUT TAPE.              -CWB-\nCLOSEIN  TM    INPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOTOPEN            PROGRAM DIDN'T GET VERY FAR,    -CWB-\n*                                      DID IT.                    -CWB-\n         CLOSE INPUT              CLOSE INPUT TAPE.               -CWB-\nNOTOPEN  DS    0H                                                 -CWB-\n         L     R13,SAVE+4         MAY BYPASS UNRELEASED SYNAD AREA\n         LM    14,12,12(13)\nRCINSTR  LA    15,8\n         BR    R14                FINAL EXIT FROM TAPESCAN IN ALL CASES\nPUTLINE  DS    0H                 GENERAL PRINTING SUBROUTINE, ENTRY 1\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER FAST\nPUTLINE2 EX    0,0(R2)            GENERAL PRINTING SUBROUTINE, ENTRY 2\nPUTLINE3 CLI   MSGBUF,C' '        GENERAL PRINTING SUBROUTINE, ENTRY 3\n         BE    LNCOUNT-4          BIF CARR. CTRL  CHAR IS A BLANK\n         CLI   MSGBUF,C'0'        SEE IF CARRIAGE CONTROL CHAR IS ZERO\n         BE    C0                 BIF IS A ZERO\n         LA    R0,3               NO BLANK OR ZERO, MUST BE A MINUS\n         B     LNCOUNT\nC0       LA    R0,2               COUNT TWO LINES\n         B     LNCOUNT\n         LA    R0,1               COUNT ONE LINE\nLNCOUNT  A     R0,LINENO\n         ST    R0,LINENO\n         C     R0,LINECNT         COMPARE WITH MAX LINES          -HMD-\n         BNH   SAMEPAGE\n         MVC   PAGECHAR,=X'40202120' EDIT PATTERN\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-\n         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         MVI   LINENO+3,X'00'\n         PUT   SYSPRINT,PAGEHDR\n         SPACE 1                                               HD AUG86\n         CLC   =C'VTOC--',0(R2)   ARE WE IN VTOC ROUTINE?      HD AUG86\n         BNE   SAMEPAGE           NO, CONTINUE                 HD AUG86\n         MVC   HOLDBUF,BLANKBUF   CLEAR BUFFER FAST            HD AUG86\n         L     R1,=A(VTOCHED2)    GET HEADER TEXT AND MOVE     HD AUG86\n         MVC   HOLDBUF(L'VTOCHED2),0(R1)                       HD AUG86\n         MVI   LINENO+3,X'04'     INDICATE 3 LINES             HD AUG86\n         PUT   SYSPRINT,HOLDBUF   PUT THE LINE OUT             HD AUG86\n         MVI   MSGBUF,C'0'        INDICATE SKIP 1 LINE         HD DEC86\n         SPACE 1                                               HD AUG86\nSAMEPAGE PUT   SYSPRINT,MSGBUF\n         B     6(R2)              RETURN FROM PUTLINE SUBROUTINE\nPAGECHK  DS    0H                 LINE RESERVATION SUBROUTINE\n         A     R0,LINENO          ADD LINES TO BE RESERVED TO LINE NO\n         C     R0,LINECNT         COMPARE TO MAXIMUM LINE  NUMBER -HMD-\n         BCR   13,R2              RETURN IF CURRENT PAGE HAS ENUF ROOM\n         MVI   LINENO+3,0         ZERO LINE COUNTER\n*        AP    PAGEPACK,=P'1'     COUNT NEW PAGE                  -CWB-\n         MVC   PAGECHAR,=X'40202120'\n*        ED    PAGECHAR,PAGEPACK                                  -CWB-\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-\n         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         PUT   SYSPRINT,PAGEHDR\n         BR    R2\n*BADREC  WTL   'BAD (0) BLOCK SIZE' (OFTEN MEANS TAPE OFF END OF REEL)\nBADREC   DS    0H                                               -CWB-\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'BADRECM),BADRECM\n         B     EXITRC8\nSYNERR   SYNADAF ACSMETH=BSAM\nSYNERR2  ST    R14,SVR14\n         CH    R0,=H'4'           CHECK SYNADAF'S RETURN CODE\n         BNE   DIRECT\n         LH    R14,12(R1)         LOAD NO. OF BYTES READ\n         CVD   R14,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  32(5,R1),BADLNGTH\n         MVC   8(24,R1),=C'0I/O ERROR - BYTES READ='\nDIRECT   BAL   R2,PUTLINE         PRINT SYNAD ERROR MESSAGE\n         MVC   MSGBUF(120),8(R1)\n         LA    R14,1\n         A     R14,ERRCOUNT       INCREMENT ERROR COUNT\n         ST    R14,ERRCOUNT\n         C     R14,SYNADNO        COMPARE ERROR COUNT WITH ERROR LIMIT\n         BH    TOOMANY            PRINT MSG & EXIT IF ERR LIM EXCEEDED\n         SYNADRLS\n         L     R14,SVR14\n         BR    R14\nTOOMANY  BAL   R2,PUTLINE         YOU SHOULD PROBABLY SET ERRLIM TO 0 -\n         MVC   MSGBUF(55),=C'0TAPESCAN TERMINATING DUE TO EXCESSIVE I/O*\n                ERROR COUNT.'\n         B     EXITRC8            FOR TAPE COPYING OPERATIONS.\nEXECEXCP DS    0H                 EXCP SUBROUTINE, R2=PTR TO DCB, AND  *\n                                  R1=PTR TO 3-BYTE ADCON WHICH POINTS  *\n                                  TO CHANNEL PROGRAM.\n         ST    R2,EXCPDCB         SAVE DCB POINTER.               -CWB-\n         L     R2,DCBIOBA-IHADCB(R2) GET PTR TO A BSAM IOB PREFIX\n         MVC   STARTSAV(3),IOBSTART+9(R2) SAVE PTR TO BSAM'S CCW\n         MVC   IOBSTART+9(3,R2),0(R1) MOVE IN PTR TO CHAN PROG\n         LA    R1,4(R2)           LOAD PTR TO ECB IN PREFIX\n         ST    R1,IOBECBPT+8(R2)  STORE PTR TO ECB\n         XC    0(4,R1),0(R1)      CLEAR ECB IN IOB PREFIX\n         EXCP  8(R2)              EXCP USING BSAM'S IOB AND ECB\n         WAIT  ECB=4(R2)\n         L     R1,IOBSTART+8(R2)  RESTORE CCW POINTER.            -CWB-\n         MVC   IOBSTART+9(3,R2),STARTSAV RESTORE PTR TO BSAM'S CCW\n         CLI   4(R2),X'7F'        SEE IF EXCP WORKED PERFECTLY\n         BCR   8,R4               RETURN IF IT DID\n         CLI   4(R2),X'41'        DID PERMANENT ERROR OCCUR?      -CWB-\n         BNE   DOSYN              OTHER ERRORS BRANCH.            -CWB-\n         CLI   0(R1),X'02'        WAS COMMAND CODE A READ?        -CWB-\n         BNE   DOSYN              IF NOT, DO ERROR.               -CWB-\n         LH    R1,6(R1)           GET COMMAND LENGTH.             -CWB-\n         CH    R1,22(R2)          IS RESIDUAL LENGTH THE SAME?    -CWB-\n         BNE   DOSYN              IF NOT, BRANCH FOR ERROR.       -CWB-\n         L     R1,EXCPDCB         ELSE, MUST BE TAPE MARK READ.   -CWB-\n         C     R1,=A(INPUT)       IS THIS THE INPUT DCB?          -HMD-\n         BNE   LOADEOD            NO, LOAD THE EODAD FROM THE DCB -HMD-\n         L     R1,EODADDR         GET PREDEFINED EOD ADDRESS      -HMD-\n         BR    R1                 GO TO IT                        -HMD-\nLOADEOD  L     R1,DCBEODAD-IHADCB(R1) GET EOD FROM DCB            -HMD-\n         BR    R1                 GO TO IT                        -CWB-\nDOSYN    DS    0H                                                 -CWB-\n         LA    R1,8(R2)           GET PTR TO IOB FOR SYNADAF MACRO\n         SYNADAF ACSMETH=EXCP     WORKS OK EVEN THO IOBSTART RESTORED\n         BAL   R14,SYNERR2        NOW DO REST OF ANALYSIS WITH SYNERR\n         BR    R4\n         EJECT\n* CONSTANTS AND STORAGE FOR THIS SECTION\nSAVE     DS    9D\nJFCBINX  DS    22D                176 BYTES\nBADLNGTH DC    D'0'\nDBLPAGE  DC    D'0'               CVD WORK AREA FOR PAGE NUMBER.  -CWB-\nFSMCMND  CCW   X'3F',0,X'30',1    FWRD SPACE FILE, SKIP/SLI\nRWNDCMND CCW   7,0,X'60',1        REWIND TAPE, CHAIN CMND, SLI\nSENSCMND CCW   4,SENSBYTS,X'20',24 SENSE UP TO 24 BYTES, SLI\nREADCMND CCW   X'02',0,X'20',32767  READ COMMAND.                 -CWB-\nREADLENG EQU   READCMND+6           READ LENGTH FIELD.            -CWB-\nWRTCMND  CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GM. -CWB-\nWTMCMND  CCW   X'1F',0,X'60',1    WRITE TM, SLI, CC TO SENSE.     -CWB-\n         CCW   X'04',SENSBYTS,X'20',1  SENSE CHAINED FOR DEV END. -CWB-\n*                                 ABOVE FIELDS MOVED HERE FROM    -CWB-\n*                                      LATTER PART OF PROGRAM TO  -CWB-\n*                                      CORRECT ADDRESSABILITY.    -CWB-\nSENSBYTS DC    3XL8'00'           BUFFER FOR SENSE BYTES\nAMSGBP46 DC    A(0)               A(MSGBUF+46) SET UP DURING INIT -CWB-\nAMSGBP72 DC    A(0)               A(MSGBUF+72) AS ABOVE.          -CWB-\nERRCOUNT DC    F'0'               NUMBER OF SYNAD EXITS TAKEN (I/O ERRS\nOPTNO    DC    F'0'               BIT ORIENTED OPTIONS - MISC/DEBUG\nLINENO   DC    F'90'                                              -CWB-\nEODADDR  DC    F'0'               FAKE END OF DATA ADDRESS        -HMD-\nLISTNO   DC    F'4'               NUMBER OF BLKS TO LIST PER DATASET\nSKIPTMNO DC    F'0'\nMAXTMNO  DC    F'32767'\nSKPEOVNO DC    F'0'\nMAXEOVNO DC    F'1'\nSYNADNO  DC    F'50'              MAX SYNAD EXITS BEFORE TERMINATION\nREADNO   DC    F'3'               SET TO ONE  FOR NOSUMMARY OPTION\nPAGECNT  DC    F'0'               PAGE COUNTER.                   -CWB-\nLINECNT  DC    F'&LINECNT'        LINES/PAGE                      -HMD-\nSVR14    DC    F'0'                                               -CWB-\nCOUTFILE DC    H'1'               CURRENT OUTPUT FILE SEQ. NO.\n*PAGEPACK DC   PL2'0'             (REPL'D BY PAGECNT)             -CWB-\nBADRECM  DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED'\nERRSUMSG DC    C'0NUMBER OF I/O ERRORS=XXXXX'\nPAGEHDR  DC    CL60'1TAPESCAN 5.0 APL-SMDC TAPESCAN AND COPY PROGRAM AT+\n                ISC-LKY '                                   -CWB- -JEH-\nDATERSLT DC    CL8'MM/DD/YY'      DATE WILL BE PLACED HERE\n         DC    CL2'  '\nTIMERSLT DC    XL11'4021207A20207A20204B20'\n         DC    C'   INPUT VOL='                                   -CWB-\nDDVOL    DC    CL6'VVVVVV'                                        -CWB-\n         DC    CL12'    DENSITY='                                 -SRH-\nTAPEDENS DC    CL1'X'\n         DC    CL2' ('\nPRTDENS  DC    CL4' XXX'\n         DC    CL4'BPI)'\n         DC    CL6'  PAGE'\nPAGECHAR DC    X'40202120'        EXAMPLE EDIT PATTERN FOR PAGE NUMBER\n         DC    CL12'           '  PAGE TRAILING BLANKS\nJFCLTSV  DC    X'FF'              FOR SAVING JFCBLTYP BYTE\nSENSW    DC    X'00'              SENS INFO SWITCH                *SRH*\nEXCPIOBP DC    0D'0',A(*)         IOB BSAM-TYPE PREFIX.           -CWB-\nEXCPECB  DC    F'0'                                               -CWB-\nEXCPIOB  DC    B'01000010',XL3'0',A(EXCPECB,0),H'0'  IOB PROPER.  -CWB-\nRESIDL   DC    H'0'               RESIDUAL COUNT.                 -CWB-\nEXCPCCW  DC    A(0)               ADDRESS OF CHANNEL PROGRAM.     -CWB-\n         DC    A(OUTPUT,0,0)                                      -CWB-\nEXCPDCB  DC    A(0)               DCB ADDRESS SAVE AREA.          -CWB-\nSTARTSAV DC    C'SAV'             FOR SAVING BSAM'S IOBSTART FIELD\nWRTFLG   DC    X'00'              TWO BIT COPY FLAG, X'03'=WRITE BLOCK\nCOUNTFLG DC    C'Y'               COUNT OPTION DEFAULT VALUE\nHEXFLG   DC    C'Y'\nSUMFLG   DC    C'Y'\nVTOCFLAG DC    C'N'               VTOC ONLY FLAG               HD OCT88\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,            *\n               BLKSIZE=3458,LRECL=133\n         EJECT\n* MAXIMUM BLKSIZE IS 32760                                     HD DEC86\nINPUT    DCB   DDNAME=INPUT,MACRF=RC,DSORG=PS,RECFM=U,DEVD=TA,         *\n               BLKSIZE=32760,EODAD=EODS,SYNAD=SYNERR,EXLST=EXITLIST\n         EJECT\nOUTPUT   DCB   DDNAME=OUTPUT,MACRF=(E),EODAD=EODADBAD,DSORG=PS,   -CWB-*\n               IOBAD=EXCPIOB,DEVD=TA,EXLST=EXLSTOUT               -CWB-\n         EJECT\n         LTORG\n         EJECT\n* MAIN LOOP AND MAIN LINE CODE STARTS HERE\nSKIPEOVP DS    0H                 SKIPEOV OPTION CONTROL ROUTINE\n         USING EXIT+4096,R12\n         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-\n*                                      BLOCK ENTRY.               -CWB-\n         CLC   CEOVNO,SKPEOVNO\n         BNL   SKIPTMPR\n         SR    R4,R4              ZERO TO GET GOOD BLK CNT EVEN IF     *\n                                  SKIPTM OR SKIPEOV USED.\n         SR    R8,R8              (RE)-ZERO BYTE COUNTER\n         ST    R8,BLKCNT          (RE)-ZERO BLKCNT\n         BAL   R5,READER          CHECK FOR DOUBLE TAPEMARK\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   CONTROL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *\n                                                    LABEL).\n         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *\n                                  TAPEMARK OR THE LOAD POINT.\n         BNE   CONTROL            BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   CONTROL\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         B     CONTROL            POSITION PAST TAPEMARK AND GOTO EODS\nSKIPTMPR CLC   CTPMKNO,SKIPTMNO   SKIPTM OPTION CONTROL ROUTINE\n         BL    SKIPEOVP+12\n         SR    R8,R8              CLEAR CTR FOR TOTAL BYTES ON TAPE\n         ST    R8,BLKCNT          (RE)-ZERO BLKCNT\n         OI    WRTFLG,X'02'       OR IN  'ALL TM & EOV SKIPPING DONE'\n         L     R1,CTPMKNO         GET TAPEMARK COUNT.             -CWB-\n         SR    R0,R0              CALCULATE NUMBER OF SL FILES    -CWB-\n         D     R0,=F'3'                WE HAVE SKIPPED.           -CWB-\n         ST    R1,TRUESEQN        SAVE AS LABEL= VALUE.           -CWB-\n         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-\n*                                      BLOCK ENTRY.               -CWB-\nPROCESS  DS    0H                 TOP OF OUTER MAIN LOOP\n         SR    R4,R4              ZERO BLK COUNTER\n         ST    R4,FILEBYTS        CLEAR FILE BYTE COUNT.          -CWB-\n         ST    R4,MAX             RESET MAX BLKSIZE WATCHER\n         MVC   MIN,=F'32767'      RESET MIN BLKSIZE WATCHER\n         MVC   PREVHDR1,HDR1FLAG     SAVE PREV LABEL INDICATION.  -CWB-\n         MVI   HDR1FLAG,C'N'             ASSUME NO HDR1 LABEL.    -CWB-\n         MVI   LABLFLAG,C'N'      ASSUME THIS FILE IS NOT A LABEL.-CWB-\nPROCESS2 DS    0H                 TOP OF MAIN INNER LOOP\n         C     R4,READNO          SEE IF BLK IS TO BE READ FOR SUMMARY\n         BNL   OTHRCHKS\n         BAL   R5,READON          READ BLK, CALC LENGTH, DO MIN/MAX\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   NOLABEL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *\n                                                    LABEL).\n         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *\n                                  TAPEMARK OR THE LOAD POINT.\n         BNE   *+18               BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   *+8\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         CLI   SUMFLG,C'Y'        SEE IF SUMMARY OPTION IS YES\n         BE    CHKLABEL           DO SUMMARY PROCESSING IF SO\nNOLABEL  C     R4,LISTNO\n         BNH   LISTER             BRANCH TO LIST BLOCK\n         B     PROCESS2\nOTHRCHKS C     R4,LISTNO\n         BNL   CHKCNT             BRANCH IF EVERYTHING ALREADY LISTED\n         BAL   R5,READON\nLISTER   BAL   R5,LISTON\n         B     PROCESS2\nCHKCNT   CLI   COUNTFLG,C'N'\n         BE    CONTROL\n         BAL   R5,READER          TOP    OF MAIN COUNTBLK OPTION LOOP\n         B     *-4                BOTTOM OF MAIN COUNTBLK OPTION LOOP\nCONTROL  CNTRL INPUT,FSM          FORWARD SPACE TO NEXT TAPEMARK,      *\n                                  THEN BACKSPACE OVER IT.\n         SR    R4,R4              RE-ZERO CURRENT BLK COUNT\n         ST    R4,MAX             ZERO MAX TO INHIBIT BLK COUNT MSG\n         SR    R8,R8              IS THIS NECESSARY?\n         BAL   R5,READON          NOW READ THE TAPEMARK\n         BAL   R5,LISTON          RETURN HERE IF NO TAPEMARK - ERROR!\n         BAL   R2,PUTLINE         PRINT ERR MSG\n         MVC   MSGBUF(37),=C'0ERROR - EXPECTED TAPEMARK NOT FOUND.'\n         B     EXITRC8\nREADON   DS    0H\n         MVC   RECBUF,BLANKBUF    CLEAR FIRST PART OF BUFFER FAST\nREADER   XC    TAPE(4),TAPE       CLEAR ECB\n         LA    R2,RECBUF\n         READ  TAPE,SF,INPUT,(R2),'S' READ A BLK OR TAPEMARK (WE HOPE)\n         CHECK TAPE\n         MVI   MARK,X'00'         SET TO X'FF' WHEN TAPEMARK READ (EOD)\n         LA    R4,1(R4)           COUNT THE BLK JUST READ FOR DATASET\n         L     R6,TAPE+16         GET PTR TO IOB\n         LH    R6,14(R6)          GET RESIDUAL COUNT\n         LH    R7,INPUT+(DCBBLKSI-IHADCB)\n         SR    R7,R6              COMPUTE BLOCK'S LENGTH\n         BNH   BADREC             BIF ZERO OR NEG RECORD LENGTH\n         L     R1,FILEBYTS        ADD BLOCK LENGTH TO TOTAL       -CWB-\n         AR    R1,R7                   BYTE COUNT FOR THIS        -CWB-\n         ST    R1,FILEBYTS             FILE.                      -CWB-\n         AR    R8,R7              COUNT ALL BYTES READ DURING RUN\n         C     R7,MAX             COMPARE CURRENT BLK'S SIZE WITH MAX\n         BNH   *+8                SKIP IF OLD MAX IS BIGGER\n         ST    R7,MAX             STORE NEW MAX BLK LENGTH\n         C     R7,MIN             COMPARE BLK'S SIZE WITH PREVIOUS MIN\n         BNL   *+8                SKIP IF OLD MIN IS SMALLER\n         ST    R7,MIN             STORE NEW MINIMUM BLOCK LENGTH\n         SPACE 1                                               HD DEC86\n         TM    SENSW,1        DID WE GET THE SENS INFO?\n         BO    DENEND         YEP,GO ON\n         LA    R1,=AL3(SENSCMND) POINT TO SENS CMDS\n         LA    R2,INPUT       POINT TO INPUT DATASET\n         LR    R6,R4          SAVE R4\n         BAL   R4,EXECEXCP    DO SENS EXCP\n         LR    R4,R6          RESTORE R4\n         OI    SENSW,1        TELL'M WE BEEN HERE BEFORE\n         SPACE 1                                               HD DEC86\nRD3480A  CLI   FLAG3480,C'Y'  ARE WE PROCESSING A 3480?        HD DEC86\n         BNE   RD3480Z        NO, CHECK 1600/6250              HD DEC86\n         MVI   TAPEDENS,C'5'  SELECT DENSITY=5                 HD NOV86\n         MVC   PRTDENS(4),=CL4' 38K'                           HD JAN89\n         B     DENEND         MOVE TEXT AND END DENSITY CHK    HD NOV86\nRD3480Z  DS    0H                                              HD DEC86\n         SPACE 1                                               HD DEC86\n         TM    SENSBYTS+3,4   P.E. = 1600 BPI\n         BNO   TRY6250        NOPE, TRY 6250BPI\n         MVI   TAPEDENS,C'3'      SET DENS FOR 1600 BPI\n         MVC   PRTDENS(4),=CL4'1600'\n         B     DENEND\nTRY6250  L     R2,(DCBDEBAD-IHADCB)+INPUT GET DEB PTR\n         L     R2,DEBUCBAD(R2)    GET UCB PTR\n         TM    16(R2),2           UCBTYP = 6250BPI?\n         BNO   TRY800             NOPE, TRY 800 BPI\n         MVI   TAPEDENS,C'4'      SET DEN FOR 6250BPI\n         MVC   PRTDENS(4),=CL4'6250'\n         B     DENEND\nTRY800   TM    INPUT+(DCBDEN-IHADCB),B'10000011' 800BPI?\n         BNO   TRY556             TRY 556BPI\n         MVI   TAPEDENS,C'2'      SET DENS\n         MVC   PRTDENS(4),=CL4' 800'  TO 800 BPI\n         B     DENEND             BRANCH AROUND 556 CODE         -HMD-\nTRY556   DS    0H ANYONE STILL USING THESE TURKEYS? DO YOUR OWN THING\n* I AM, AND WHOSE CALLING THEM TURKEYS, SUCKER                   -HMD-\n         MVI   TAPEDENS,C'1'      DEN=1 FOR 556 BPI              -HMD-\n         MVC   PRTDENS(4),=CL4' 556'  MOVE DEN TO PRINT          -HMD-\nDENEND   DS    0H\n         CLI   WRTFLG,X'03'       SEE IF SHOULD WRITE TO OUTPUT TAPE\n         BNE   READEREX\n         STH   R7,WRTCMND+6       STORE BLK LENGTH IN WRITE CCW\n         LA    R1,=AL3(WRTCMND)\n         LA    R2,OUTPUT\n         LR    R6,R4              SAVE R4 (CURRENT FILE BLK CNT)\n         BAL   R4,EXECEXCP\n         LR    R4,R6              RESTORE R4 (CURRENT FILE BLK COUNT)\nREADEREX NI    WRTFLG,X'03'       ZERO OFF POSSIBLE 'NOVOLSER' BIT\n         BR    R5                 RETURN FROM READON SUBROUTINE\nLISTON   DS    0H                                              HD JAN89\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPD           YES..BYPASS PRINT            HD JAN89\n         MVI   MSGBUF,C'0'\n         LA    R0,4               PREPARE TO RESERVE 4 LINES\n         BAL   R2,PAGECHK         RESERVE 4 LINES\n         BAL   R2,PUTLINE2        LIST THE FIRST PART OF THE BLOCK\n         MVC   MSGBUF+1(132),RECBUF\nHEXON    DS    0H                                              HD JAN89\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPD           YES, BYPASS PRINT            HD JAN89\n         CLI   HEXFLG,C'N'        SEE IF HEXLIST SPECIFIED\n         BCR   8,R5               BER R5 RETURN IF HEXLIST NOT SPECIFID\n         MVC   MSGBUF+1(132),RECBUF\n         MVI   TRINT1+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES\n         MVI   TRINT2+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES\n         C     R7,=F'132'         SEE IF LENGTH OF BLK EXCEEDS 1 LINE\n         BH    TRINT1             BRANCH IF LE 132 BYTES\n         BCTR  R7,0               CONVERT BLK LENGTH TO MACHINE LENGTH\n         STC   R7,TRINT1+1        AND STORE IN 1ST TR INSTRUCTION\n         STC   R7,TRINT2+1        AND IN THE SECOND ONE\nTRINT1   TR    MSGBUF+1(132),TRT1 MODIFIED INSTRUCTION (LENGTH)\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL\n         BAL   R2,PUTLINE3        PRINT FIRST LINE OF HEX\n         DC    C'TRT111'\n         MVC   MSGBUF+1(132),RECBUF\nTRINT2   TR    MSGBUF+1(132),TRT2 MODIFIED INSTRUCTION (LENGTH)\n         BAL   R2,PUTLINE3        PRINT SECOND LINE OF HEX\n         DC    C'TRT222'          FILLER\nVTOCBYPD BR    R5                 RETURN FROM LISTON OR HEXON SUBR\nCHKLABEL DS    0H\n         MVI   LABLFLAG,C'Y'      NOTE WE HAVE A LABEL.           -CWB-\n         MVI   MSGBUF,C'0'\n         MVC   MSGBUF+1(132),RECBUF\n         CLC   RECBUF(4),=C'HDR1'\n         BE    HDR1\n         CLC   RECBUF(4),=C'EOF1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'HDR2'\n         BE    HDR2\n         CLC   RECBUF(4),=C'EOF2'\n         BE    EOF2EOV2\n         CLC   RECBUF(4),=C'VOL1'\n         BE    VOL1\n         CLC   RECBUF(4),=C'EOV1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'EOV2'\n         BE    EOF2EOV2\n         MVI   LABLFLAG,C'N'      OOPS, NO LABEL.                 -CWB-\n         B     NOLABEL            IT'S NOT A LABEL AFTER ALL\nHDR1     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP1           YES, BYPASS THIS MESS        HD JAN89\n         MVI   HDR1FLAG,C'Y'      NOTE HEADER LABEL FILE.         -CWB-\n         LA    R0,14              PREPARE TO RESERVE 14 LINES\n         BAL   R2,PAGECHK\n         MVC   MSGBUF,BLANKBUF    CLEAR PRINT BUFFER FAST\n         MVI   MSGBUF+43,C'*'     MOVE IN SEED FOR FILL\n         MVC   MSGBUF+44(47),MSGBUF+43 FILL IN REST OF ASTERISKS\n         MVI   MSGBUF,C'-'\n         BAL   R2,PUTLINE3        PRINT LINE OF ASTERISKS\n         DC    C'HDR222'\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL TO BLANK\n         BAL   R2,PUTLINE3        PRINT 2ND LINE OF ASTERISKS\n         DC    C'HDR333'\n         MVC   MSGBUF+45(44),=C' DATASET SEQUENCE NUMBER 0000  (LABEL=0*\n               000) '\n         MVC   MSGBUF+70(4),RECBUF+31  MOVE IN DATASET SEQUENCE NUMBER\n*        MVC   MSGBUF+83(4),RECBUF+31  AND MOVE IT IN AGAIN       -CWB-\nVTOCBYP1 DS    0H                                              HD JAN89\n         L     R5,CURRVTOC        POINT TO CURRENT VTOC BLOCK.    -CWB-\n         CLI   0(R5),VTOCEPB      IS THIS BLOCK FULL?             -CWB-\n         BL    NXTENTRY           IF NOT, BRANCH.                 -CWB-\n         GETMAIN  R,LV=VTOCBLSZ   ELSE, GET CORE FOR ANOTHER BLOCK-CWB-\n         ST    R1,0(R5)           SAVE FOREWARD POINTER.          -CWB-\n         MVI   0(R5),VTOCEPB      REINSERT THE ENTRY COUNT.       -CWB-\n         LR    R5,R1              MAKE NEW BLOCK CURRENT.         -CWB-\n         ST    R1,CURRVTOC                                        -CWB-\n         LA    R3,8(R5)           STEP OVER INITIAL DOUBLEWORD.   -CWB-\n*                                      R3 POINTS AT CURRENT ENTRY.-CWB-\n         SR    R0,R0              CLEAR ENTRY COUNT AND FORWARD   -CWB-\n         ST    R0,0(R5)                POINTER IN NEW BLOCK.      -CWB-\n         MVI   0(R5),1            CHANGE ENTRY COUNT TO 1.        -CWB-\n         B     CLEARVEN           GO CLEAR THE FIRST ENTRY.       -CWB-\nNXTENTRY LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT VTOC ENTRY.     -CWB-\n         SR    R1,R1              INCREMENT ENTRY COUNT.          -CWB-\n         IC    R1,0(R5)                                           -CWB-\n         LA    R1,1(R1)                                           -CWB-\n         STC   R1,0(R5)                                           -CWB-\n         USING VTOC,R3            R3 WILL ALWAYS POINT TO ENTRY.  -CWB-\nCLEARVEN MVC   VTOC(VTOCSIZE),BLANKBUF  CLEAR OUT VTOC ENTRY.     -CWB-\n         L     R1,TRUESEQN        ADVANCE THE TRUE DATA SET       -CWB-\n         LA    R1,1(R1)                SEQUENCE NUMBER COUNT.     -CWB-\n         ST    R1,TRUESEQN                                        -CWB-\n         L     R1,TRUESEQN        USE TRUE SEQUENCE NUMBER (AS    -CWB-\n         CVD   R1,DBLWORK              OPPOSED TO WHAT THE LABEL  -CWB-\n         OI    DBLWORK+7,X'0F'         SAYS) IN THE LABEL=XXXX    -CWB-\n         UNPK  MSGBUF+83(4),DBLWORK    PART OF THE MESSAGE.       -CWB-\n         MVC   VTOCSEQN,MSGBUF+83 ALSO USE IT IN VTOC.            -CWB-\n         CLI   VTOCFLAG,C'Y'           VTOC ONLY?              HD JAN89\n         BE    VTOCBYP2                YES, FILL IN LABEL REC  HD JAN89\n         BAL   R2,PUTLINE3        PRINT MSG BETWEEN TWO LINES OF STARS\n         DC    C'HDR444'\n         MVC   MSGBUF+44(47),MSGBUF+43 REFILL WITH ASTERISKS\n         BAL   R2,PUTLINE3\n         DC    C'HDR555'\n         BAL   R2,PUTLINE3\n         DC    C'HDR666'\n         MVC   MSGBUF+40(56),BLANKBUF CLEAR ASTERISKS TO BLANKS\n         MVC   MSGBUF+1(80),RECBUF\n         MVC   MSGBUF+82(35),=C'1ST HEADER LABEL RECORD,  FILE NO. '\nVTOCBYP2 DS    0H                                              HD JAN89\n         MVC   MSGBUF+116(4),RECBUF+31 MOVE IN DATASET SEQUENCE #\n         MVC   DATASEQ,RECBUF+31  SAVE DATASET SEQUENCE #\n         MVI   MSGBUF,C'-'        CCTRL FOR 2 BLANK LINES, THEN PRINT\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP3           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'HDR111'\n         BAL   R5,HEXON           PRINT HEX IF OPTION IS YES\nVTOCBYP3 DS    0H                                              HD JAN89\n         CLC   RECBUF+54(6),=C'000000' SEE IF BLK CNT = 0\n         BNE   DOBLKCNT\n         MVC   MSGBUF,BLANKBUF\n         MVI   SWT2,X'01'               MOVE IN HEADR CODE        -HMD-\nLBL1     DS    0H\n         MVC   MSGBUF+6(7),=C'DSNAME='\n         MVC   MSGBUF+13(17),RECBUF+4\n         LTR   R3,R3                  DO WE HAVE A VTOC ENTRY?    -CWB-\n         BZ    *+10                   IF NOT, SKIP DSN SAVE.      -CWB-\n         MVC   VTOCDSN,RECBUF+4   SAVE DSN FOR VTOC.              -CWB-\n         MVC   MSGBUF+32(14),=C'CREATION DATE=' (MOVED OVER)      -CWB-\nCHKDATE  DS    0H                 CHECK FOR VALID DATA            -HMD-\n         L     R6,=A(NUBTABL)     LOAD TABLE ADDRESS              -HMD-\n         CLC   =C'00000',RECBUF+42 CHECK FOR ZERO CREATION DATE   -HMD-\n         BE    BADCREDT           BAD CREATION DATE               -HMD-\n         TRT   RECBUF+42(5),0(R6) CHECK FOR NUMERICS              -HMD-\n         BZ    DATEOK1            DATE IS OK                      -HMD-\nBADCREDT DS    0H                 CREATION DATE IS BAD            -HMD-\n         L     R1,AMSGBP46        POINT TO MESSAGE BUFFER         -HMD-\n         MVC   0(8,R1),=C'INVALID ' MOVE INVALID TO MSG           -HMD-\n         OI    SWT2,C'0'          INDICATE BAD DATE               -HMD-\n         B     CDATBAD            SKIP DATE CONVERSION         HD JAN89\nDATEOK1  DS    0H                                                 -HMD-\n         PACK  BADLNGTH+4(4),RECBUF+42(5)   CONVERT FOR DATE SUBROUTINE\n         L     R2,BADLNGTH+4\n         LA    R1,AMSGBP46        PTR TO PTR TO DATE SUBR'S RSULT -CWB-\n         L     R15,=V(DATE)       IRSS DATECONV SUBROUTINE\n         BALR  R14,R15            DATE SUBROUTINE\nCDATBAD  DS    0H                                              HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCCREA,MSGBUF+46 SAVE DATE FOR VTOC.             -CWB-\n         CLC   RECBUF+48(5),=C'00000'  DOES TAPE HAVE EXP DATE?   -HMD-\n         BE    EXPIRED            IF NOT, BRANCH.                 -CWB-\n         MVC   MSGBUF+56(16),=C'EXPIRATION DATE='  ELSE, LIST IT. -CWB-\n         TRT   RECBUF+48(5),0(R6)    SEE IF VALID EXPDT           -HMD-\n         BZ    DATEOK2            YES, IS VALID                   -HMD-\nBADEXPDT L     R1,AMSGBP72        GET POINTER TO MSG BUFFER       -HMD-\n         MVC   0(8,R1),=C'INVALID ' MOVE INVALID TO MSG BUFFER    -HMD-\n         OI    SWT2,C'0'          INDICATE ERROR                  -HMD-\n         B     EDATBAD            FORGET DATE CONVERSION          -HMD\nDATEOK2  PACK  BADLNGTH+4(4),RECBUF+48(5)                         -CWB-\n         L     R2,BADLNGTH+4      DO CONVERSION AS BEFORE.        -CWB-\n         LA    R1,AMSGBP72                                        -CWB-\n         L     R15,=V(DATE)                                       -CWB-\n         BALR  R14,R15                                            -CWB-\nEDATBAD  DS    0H                                              HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCEXPR,MSGBUF+72 SAVE EXP DATE FOR VTOC.         -CWB-\nEXPIRED  EQU   *                                                  -CWB-\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP4           CONTINUE PROCESSING          HD JAN89\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         DC    CL6'LBL111'\n         BAL   R5,PUTERROR        SEND WARNING MESSAGE            -HMD-\nVTOCBYP4 B     LABELEND           END OF THIS LABEL           HD  JAN89\nPUTERROR DS    0H                 ERROR MESSAGE ROUTINE           -HMD-\n         CLI   SWT2,X'03'         SEE IF ERROR                    -HMD-\n         BLR   R5                 BRANCH IF NO ERROR              -HMD-\n         CLI   SWT2,C'1'          IS THIS A HDR ERROR?            -HMD-\n         BNE   TRLRERR            NO, MUST BE A TRAILER ERROR     -HMD-\n         MVC   ERR1MSG(4),=C'HDR1'                                -HMD-\n         B     *+10                                               -HMD-\nTRLRERR  MVC   ERR1MSG(4),=C'EOF1'                                -HMD-\n         MVC   MSGBUF,BLANKBUF    CLEAR OUTPUT BUFFER             -HMD-\n         BAL   R2,PUTLINE2                                        -HMD-\n         MVC   MSGBUF(LMSG),ERR0MSG                               -HMD\n         BR    R5                 RETURN TO CALLER                -HMD-\nEOF1EOV1 DS    0H\n         CLC   DATASEQ,RECBUF+31  COMPARE OLD DATASET SEQ. NO. TO  THE *\n                                  CURRENT ONE.\n         BE    NEWSEQNO           SKIP ERROR MSG IF EQUAL\n         CLI   DATASEQ,C'N'       SEE IF 'NONE' STILL IN DATASEQ\n         BE    NEWSEQNO           SKIP ERR MSG IF NO PREVIOUS HDR1\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP5           YES, BYPASS THIS MESS        HD JAN89\n         BAL   R2,PUTLINE2\n         MVC   MSGBUF(100),=C'0ERROR - THE DATASET SEQ. NO. ON THE FOLL*\n               OWING LABEL DOES NOT MATCH THAT ON THE PRECEDING HDR1 LA*\n               BEL'\n         LA    R0,6               PREPARE TO RESERVE 6 LINES\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINTOUT\nVTOCBYP5 DS    0H                                              HD JAN89\n         MVC   MSGBUF+1(132),RECBUF RESTORE MSGBUF\nNEWSEQNO MVC   DATASEQ,RECBUF+31  GET NEW DATASET SEQUENCE NUMBER\n         MVC   MSGBUF+82(35),=C'1ST TRAILER LABEL RECORD, FILE NO. '\n         MVC   MSGBUF+116(4),RECBUF+31\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    DOBLKCNT           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'EOF1EV'\n         BAL   R5,HEXON\nDOBLKCNT MVC   MSGBUF,BLANKBUF\n         MVI   SWT2,X'02'         INDICATE IN TRAILER ROUTINE     -HMD-\n         MVC   MSGBUF+82(12),=C'BLOCK COUNT=' (MOVED OVER.)       -CWB-\n         MVC   MSGBUF+94(6),RECBUF+54                             -CWB-\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    LBL1               IF NOT, SKIP SAVE.              -CWB-\n         CLI   VTOCOUNT,C' '      HAS THE TRUE BLOCK COUNT BEEN   -CWB-\n         BNE   LBL1                    FILLED IN?  IF SO, BRANCH. -CWB-\n         MVC   VTOCOUNT,RECBUF+54 ELSE, FILL IT IN FROM THE LABEL.-CWB-\n         B     LBL1\nEOF2EOV2 DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP6           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINT\n         MVC   MSGBUF+82(35),=C'2ND TRAILER LABEL RECORD, FILE NO. '\n         B     LBL2\nHDR2     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP6           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,8               PREPARE TO RESERVE 8 LINES  FOR PRINT\n         BAL   R2,PAGECHK         RESERVE PRINT\n         MVC   MSGBUF+82(35),=C'2ND HEADER LABEL RECORD,  FILE NO. '\nLBL2     DS    0H\n         MVC   MSGBUF+116(4),DATASEQ\n         BAL   R2,PUTLINE3\n         DC    C'HDR222'\n         BAL   R5,HEXON\nVTOCBYP6 DS    0H                                              HD JAN89\n         MVC   BLKSIZE(5),RECBUF+5\n         MVC   LRECL(5),RECBUF+10\n         MVC   RECFM(1),RECBUF+4  MOVE F, U, OR V PART OF RECFM DESC.\n         SR    R1,R1\n         CLI   RECBUF+38,C'R'     SEE IF BLOCKING ATTRIBUTE IS 'BS'\n         BNE   *+18               BIF NOT BS (BS AS IN 'VBS')\n         LA    R1,2\n         MVC   RECFM+1(2),=C'BS'\n         B     CTRLCHAR\n         CLI   RECBUF+38,C' '     SEE IF BLOCKING ATTRIBUTE IS UNBLKED\n         BE    CTRLCHAR           BIF UNBLOCKED\n         MVC   RECFM+1(1),RECBUF+38   MOVE B OR S BLOCK ATTRIBUTE CHAR\n         LA    R1,1               BUMP PTR PAST THE B OR S\nCTRLCHAR LA    R1,RECFM+1(R1)\n         MVC   0(1,R1),RECBUF+36\n         MVC   TRTCH(2),RECBUF+34\n         CLC   TRTCH(2),LBL2MSG+1 SEE IF IT'S 2 BLANKS\n         BNE   *+10\n         MVC   TRTCH(8),=C'STANDARD' 9-TRK\n         CLI   VTOCFLAG,C'Y'      CHECK FOR VTOC ONLY          HD JAN89\n         BE    VTOCBYP7           BYPASS PRINT                 HD JAN89\n         BAL   R2,PUTLINE\nVTOCBYP7 DS    0H                                              HD JAN89\n         MVC   MSGBUF(109),LBL2MSG\n         CLI   RECBUF,C'H'        SEE IF IS 'HDR2'\n         BNE   LABELEND           BIF IT WAS EOF2 OR EOV2      HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOVSTUFF           IF NOT, SKIP SAVES.             -CWB-\n         MVC   VTOCRECF,RECFM     COPY DATA FOR VTOC.             -CWB-\n         MVC   VTOCLREC,LRECL                                     -CWB-\n         MVC   VTOCBLKS,BLKSIZE                                   -CWB-\n         MVC   VTOCDEN,PRTDENS                                    *SRH*\n         MVC   VTOCTRTC,RECBUF+34                                 -CWB-\n         MVC   VTOCJOBN,RECBUF+17                                 -CWB-\n         MVC   VTOCSTEP,RECBUF+26                                 -CWB-\nNOVSTUFF EQU   *                                                  -CWB-\n         MVC   MSGBUF+2(120),MSGBUF+1    CLEAR MOST OF MSGBUF\n         MVC   CRMSG+15(8),RECBUF+17\n         MVC   CRMSG+32(8),RECBUF+26\n         CLI   VTOCFLAG,C'Y'                                   HD JAN89\n         BE    VTOCBYP8                                        HD JAN89\n         BAL   R2,PUTLINE2\n         MVC   MSGBUF+6(L'CRMSG),CRMSG\nVTOCBYP8 B     LABELEND                                        HD JAN89\n         EJECT                                                 HD JAN89\n************************************************************** HD JAN89\n**                                                             HD JAN89\n**        ROUTINE TO HANDLE VOLSER FILE AND PRINT VOLSER       HD JAN89\n**                                                             HD JAN89\n************************************************************** HD JAN89\nVOL1     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP9           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         AND RESERVE THEM\n         MVC   MSGBUF+82(19),=C'VOLUME LABEL RECORD'\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         DC    C'VOL111'\n         BAL   R5,HEXON\nVTOCBYP9 DS    0H                                              HD JAN89\n         MVC   MSGBUF,BLANKBUF\n         MVC   MSGBUF+6(21),=C'VOLUME SERIAL NUMBER='\n         MVC   MSGBUF+27(6),RECBUF+4\n         MVC   MSGBUF+40(19),=C'OWNER INFORMATION='''\n         MVC   MSGBUF+59(10),RECBUF+41\n         MVI   MSGBUF+69,C''''\n         MVC   VSNSAVE,RECBUF+4   SAVE VSN AND OWNER FOR USE      -CWB-\n         MVC   OWNERSAV,RECBUF+41      IN VTOC LISTING.           -CWB-\n         MVI   MSGBUF,C'0'\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPA           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'VOL222'\n         CLC   (JFCBINX+JFCBVOLS-JFCB)(6),RECBUF+4 SEE IF VOLUME MATCH\n         BE    LABELEND           BIF SAME                     HD JAN89\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(098),=C'0WARNING - VOLUME SERIAL NUMBER IN ABOVE *\n               LABEL DOES NOT MATCH THAT SPECIFIED ON INPUT DD STATEMEN*\n               T'\nVTOCBYPA DS    0H                                              HD JAN89\n         TM    WRTFLG,X'01'       ARE WE MAKING A COPY?        -CWB-\n         BZ    LABELEND           IF NOT, CONTINUE PROCESSING. -CWB-\n         L     R0,CTPMKNO         GET CURRENT TAPEMARK NUMBER\n         LTR   R0,R0              SEE IF IT'S ZERO (NO TAPEMARKS YET)\n         BNZ   LABELEND           BIF A TAPEMARK HAS ALREADY BEEN READ\n         TM    JFCLTSV,X'02'      SEE IF 'SL' (OR SUL) BIT IS ON\n         BZ    LABELEND           IF IT'S NOT THEN 'NO VERIFY' (BLP OR *\n                                  AL) WAS SPECIFIED IN JCL; SO KEEP ON.\n         BAL   R2,PUTLINE         PRINT OPERATOR ERROR TERMINATION MSG\n         MVC   MSGBUF(38),=C'0TERMINATION DUE TO WRONG TAPE MOUNTED'\n         B     EXITRC8\nLABELEND B     PROCESS2                                        HD JAN89\n         EJECT                                                 HD JAN89\n************************************************************** HD JAN89\n**                                                             HD JAN89\n**               EOD PROCESSING                                HD JAN89\n**                                                             HD JAN89\n************************************************************** HD JAN89\nEODS     DS    0H\n*        AP    MARKNO,=P'1'       COUNT THE TAPEMARK              -CWB-\n*        UNPK  MARKNUM,MARKNO                                     -CWB-\n         L     R1,MARKNO          COUNT THE TAPEMARK (COUNT       -CWB-\n         LA    R1,1(R1)                STORED IN BINARY FORM).    -CWB-\n         ST    R1,MARKNO                                          -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         UNPK  MARKNUM,DBLWORK                                    -CWB-\n         OI    MARKNUM+3,X'F0'\n         LA    R1,1\n         A     R1,CTPMKNO         CURRENT NUMBER OF TAPEMARKS PASSED\n         ST    R1,CTPMKNO         IS NOW UPDATED TO ACTUAL VALUE\n         L     R1,BLKCNT          BLKS IN PREVIOUS DATASETS\n         AR    R1,R4              ADD NO. OF BLKS IN DATASET JUST READ\n         ST    R1,BLKCNT          TO GET TOTAL BLKS READ SO FAR (EXCEPT*\n                                  FOR SKIPPING - SKIPEOV OR SKIPTM).\n         CLI   WRTFLG,X'03'       SEE IF COPY BEING DONE NOW\n         BNE   *+24               SKIP WRITING TAPEMARK IF NOT\n         LA    R1,=AL3(WTMCMND)   PTR TO PTR TO WTM CCW FOR OUTPUT TAPE\n         LA    R2,OUTPUT          DCB FOR WTM EXCP OUTPUT\n         ST    R4,SVR4            SAVE R4 FOR EXEC ESCP CALL\n         BAL   R4,EXECEXCP        CAL SUBROUTINE TO ISSUE EXCP\n         L     R4,SVR4            RESTORE R4\n         CLI   COUNTFLG,C'N'\n         BE    SIMPLETM           BIF COUNT OPTION NOT SPECIFIED\n         L     R0,MAX\n         LTR   R0,R0\n         BZ    SIMPLETM           BIF NO COUNTING WORK HAS BEEN DONE\n         LTR   R4,R4              BYPASS MAX/MIN/AVG IF           -CWB-\n         BZ    SIMPLETM                NO RECORDS.                -CWB-\n         L     R1,MIN\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  MINMSG,BADLNGTH\n         L     R1,MAX\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  MAXMSG,BADLNGTH\n         LR    R1,R4              COPY COUNT OF RECORDS AND DIVIDE-CWB-\n         SRA   R1,1                    BY 2 TO ROUND THE AVERAGE. -CWB-\n         A     R1,FILEBYTS        ADD NUMBER OF BYTES IN FILE.    -CWB-\n         SR    R0,R0              CLEAR R0 FOR DIVIDE.            -CWB-\n         ST    R0,FILEBYTS        ALSO CLEAR FILEBYTS FOR NEXT    -CWB-\n*                                      FILE.                      -CWB-\n         DR    R0,R4              DIVIDE FOR AVERAGE BLOCK SIZE.  -CWB-\n         CVD   R1,BADLNGTH        MAKE AVERAGE SIZE PRINTABLE.    -CWB-\n         OI    BADLNGTH+7,X'0F'                                   -CWB-\n         UNPK  AVGMSG,BADLNGTH                                    -CWB-\n         CVD   R4,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  COUNTMSG,BADLNGTH\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOSAVE             IF NOT, BRANCH.                 -CWB-\n         CLI   LABLFLAG,C'Y'      IS THIS A LABEL FILE?           -CWB-\n         BE    NOSAVE             IF SO, DON'T SAVE STAT'S.       -CWB-\n         MVC   VTOCMINB,MINMSG    SAVE MIN, MAX, AVG, AND COUNT   -CWB-\n         MVC   VTOCMAXB,MAXMSG         FOR VTOC LISTING.          -CWB-\n         MVC   VTOCAVGB,AVGMSG                                    -CWB-\n         MVC   VTOCOUNT,COUNTMSG                                  -CWB-\nNOSAVE   EQU   *                                                  -CWB-\n*        MVI   EOVM+1,120         SET LENGTH FOR POSSIBLE LONG EOV-CWB-\n         MVI   EOVM+1,CNTSEND-TPMKMSG-1  SET LENGTH FOR MVC.      -CWB-\n*        MVI   MSGBUF+100,C' '    PREPARE TO CLEAR PART OF MSG BUF-CWB-\n*        MVC   MSGBUF+101(32),MSGBUF+100 CLEAR LAST PART OF  BUFFE-CWB-\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER COMPLETELY.        -CWB-\n*        MVC   MSGBUF+18(87),EOVNUM+3                             -CWB-\n         MVC   MSGBUF+18(CNTSEND-EOVNUM-3),EOVNUM+3 COPY MESG.    -CWB-\n         LA    R5,PUTLINE2        SPECIFY LONG TYPE OF TAPEMARK MSG\n         B     TMSGDONE\nSIMPLETM MVI   EOVM+1,33          SET LENGTH OF POSSIBLE EOV MSG\n         LA    R5,PUTLINE         SPECIFY SHORT TPMK FOUND MSG IF ANY\n*************************************************************  HD AUG86\n** LABEL TMSGDONE REPLACED BELOW                           **  HD AUG86\n*************************************************************  HD AUG86\n*TMSGDONE  CLI   MARK,X'FF'\n*          BE    EOVPROC\n*          MVI   MARK,X'FF'\n*************************************************************  HD AUG86\n** END OF REPLACED CODE SEGMENT                            **  HD AUG86\n*************************************************************  HD AUG86\nTMSGDONE DS    0H                                                 -CWB-\n         CLI   EOV1FLG,C'Y'\n         BE    EOVPROC            BIF 'EOV PENDING' FLAG SET\n         CLI   MARK,X'FF'         TWO CONSECUTIVE MARKS?          -CWB-\n         BNE   SKPCHK             IF NOT, BRANCH.                 -CWB-\n         CLI   PREVHDR1,C'N'      PREV FILE A HDR1 LABEL?         -CWB-\n         BE    EOVPROC            IF NOT, GO DO EOV.              -CWB-\nSKPCHK   MVI   MARK,X'FF'         NOTE THIS MARK FOUND.           -CWB-\n         CLC   SKPEOVNO,CEOVNO    SKIP SKIPTM PROCESSSING IF\n         BH    SKIPEOVP           SKIPEOV PROCESSING IS BEING DONE\n         CLC   CTPMKNO,SKIPTMNO   COMPARE CTPMKNO WITH SKIPTMNO\n         BL    SKIPTMPR           BRANCH TO DO POSSIBLE SKIPTM PROCESS\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPB           BYPASS PRINT IF YES.         HD JAN89\n         BALR  R2,R5              TO PUTLINE OR PUTLINE2\nVTOCBYPB DS    0H                                              HD JAN89\n         MVC   MSGBUF(18),TPMKMSG\n         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY\n         CLC   CTPMKNO,MAXTMNO\n         BL    PROCESS\n         CLI   WRTFLG,X'03'       CHECK IF COPY BEING DONE\n         BNE   *+16               SKIP IF IT'S NOT BEING DONE\n         LA    R1,=AL3(WTMCMND)   OTHERWISE WRITE AN EXTRA TAPEMARK,\n         LA    R2,OUTPUT          JUST TO MAKE SURE.  THIS COULD\n         BAL   R4,EXECEXCP        RESULT  IN 3 TAPEMARKS IN LAST EOV.\n         B     PRENDMSG\nEOVPROC  DS    0H                 HANDLES END-OF-VOLUME INDICATIONS\n         MVI   EOV1FLG,C'N'       CLEAR 'EOV PENDING' FLAG\n*        AP    EOVNO,=P'1'        COUNT EOV'S                     -CWB-\n*        UNPK  EOVNUM,EOVNO                                       -CWB-\n         L     R1,EOVNO           COUNT EOV'S (COUNT STORED       -CWB-\n         LA    R1,1(R1)                IN BINARY FORM).           -CWB-\n         ST    R1,EOVNO                                           -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         UNPK  EOVNUM,DBLWORK                                     -CWB-\n         OI    EOVNUM+2,X'F0'\n*        MVC   WRITELOG+11(3),EOVNUM                              -CWB-\n*WRITELOG WTL  'EOV000 ENCOUNTERED'                               -CWB-\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPC           YES..BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE\nVTOCBYPC DS    0H                                              HD JAN89\nEOVM     MVC   MSGBUF(00),TPMKMSG LENGTH SPECIFIED IN EODS EXIT\n         LA    R1,1\n         A     R1,CEOVNO\n         ST    R1,CEOVNO\n         C     R1,SKPEOVNO\n         BL    SKIPEOVP           BIF SKIPEOV BEING DONE\n         BNE   NOTJUST            BIF SKIPEOV PROCESSING NOT JUST DONE\n         CLC   CTPMKNO,SKIPTMNO   SEE IF SKIPTM PROCESSING COMPLETED\n         BL    NOTJUST            BIF NOT, SKIPTMNO SHOULD BECOME      *\n                                  ACTUAL NUMBER OF TAPEMARKS SKIPPED.\n         MVC   SKIPTMNO,CTPMKNO   MORE THAN SKIPTMNO WERE SKIPPED DUE  *\n                                  SKIPEOV; RESET SKIPTMNO TO INDICATE  *\n                                  ACTUAL NUMBER SKIPPED (FOR LNGTH EST)\nNOTJUST  DS    0H\n         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY\n         CLC   CEOVNO,MAXEOVNO\n         BL    PROCESS\n         SPACE 2                                               HD JAN89\nPRENDMSG DS    0H                                              HD JAN89\n         CLI   COUNTFLG,C'N'\n         BE    SHORT              SKIP TO NOT PRINT COUNTS\n         LA    R0,6               PREPARE TO RESERVE 6 LINES FOR PRINT\n         BAL   R2,PAGECHK         RESERVE THEM\n         LA    R1,=AL3(SENSCMND)  RE-SENSE AT END OF PROCESSING\n         LA    R2,INPUT           PTR TO DCB FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         CLI   FLAG3480,C'Y'      IS THIS A 3480 DEVICE        HD JAN89\n         BE    ADDDEN3            YES, CONTINUE WITH PROCESS   HD JAN89\n         MVI   INDEX+3,8          SINCE 9-TRK, LOAD OFFSET     HD JAN89\n         TM    SENSBYTS+3,X'04'   CHECK IF PE, 1 = PE = 1600 BPI\n         BNO   CK6250             CK FOR 6250 BPI 9TRK\n         MVI   (DCBDEN-IHADCB)+INPUT,X'C3' SET DEN=1600 BPI INDICATOR\n         MVI   LNGTHEST+50,C'3'   SET DENSITY = 3              HD JAN89\n         B     ADDDEN3            CONTINUE WITH LENGTH CHECK   HD JAN89\n         SPACE 1\nEIGHTBPI DS    0H\n         MVI   INDEX+3,0          SET OFFSET IN BPI TABLE      HD JAN89\n         MVI   INPUT+(DCBDEN-IHADCB),X'83' SET DEN=800 BPI INDICATOR\n         MVI   LNGTHEST+50,C'2'   SET DENSITY = 2              HD JAN89\n         B     ADDDEN3            CONTINUE WITH LENGTH CHECK   HD JAN89\n         SPACE 1\nCK6250   L     R2,(DCBDEBAD-IHADCB)+INPUT GET DEB ADDR\n         L     R2,DEBUCBAD(R2)    GET UCB ADDR\n         TM    16(R2),2           CK UCBTYP FOR 6250 BPI\n         BNO   EIGHTBPI           NOPE, ASSUME 800 BPI         HD JAN89\n         MVI   (DCBDEN-IHADCB)+INPUT,X'D3' SET DENS=4 FOR 6250 BPI\n         MVI   LNGTHEST+50,C'4'   SAY DENS=4\n         MVI   INDEX+3,12         SET INDEX FOR 6250 BPI       HD JAN89\n         B     ADDDEN3            BYPASS SOME CODE\n         SPACE 1\n*\n*         FORMULA FOR LENGTH IN INCHES FOLLOWS:\n*         INCHES=R8/BPI+(IBG*BLKCNT+CTPMKNO*TMLENGTH)/1000\n         SPACE 1\nADDDEN3  L     R15,CTPMKNO        LOAD NUMBER OF TAPEMARKS READ\n         S     R15,SKIPTMNO       SUBTRACT NUMBER OF TAPEMARKS SKIPPED\n         MH    R15,TMLENGTH       MULTIPLY BY (TAPEMARK LENGTH*1000)\n         CLI   FLAG3480,C'N'      3480?                        HD JAN89\n         BE    ADDEN3A            YES, BYPASS THIS             HD JAN89\n         MVI   LNGTHEST+50,C'5'   INDICATE DENSITY=5           HD JAN89\n         L     R1,BLKCNT          LOAD BLOCK COUNT             HD JAN89\n         MH    R1,GAP3480         MULT TO GET GAP LEN*1000     HD JAN89\n         AR    R1,R15             GET TOTAL GAP + TM LGTH*1000 HD JAN89\n         SR    R0,R0              CLEAR FOR DIVIDE             HD JAN89\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+GAP IN.   HD JAN89\n         LR    R15,R1             SAVE FOR LATER               HD JAN89\n         L     R2,BPI3480         LOAD DENSITY                 HD JAN89\n         B     ADDEN3B            CONTINUE WITH CALCULATION    HD JAN89\nADDEN3A  DS    0H                                              HD JAN89\n         L     R2,INDEX           LOAD INDEX INTO BPI/IBG TABLE\n         L     R1,BLKCNT          LOAD BLOCK COUNT\n         MH    R1,BPIBGTBL(R2)    MULTIPLY TO GET TOTAL GAP LENGTH*1000\n*                                                              HD JAN89\n         AR    R1,R15             GET TOTAL GAP + TAPEMARK LENGTH*1000\n         SR    R0,R0\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+ GAP LENGTH INCHES\n         LR    R15,R1             SAVE THIS FOR LATER\n         LH    R2,BPIBGTBL+2(R2)  LOAD PHYSICAL BPI (NOT LOGICAL BPI)\n*                                                              HD JAN89\nADDEN3B  DS    0H                                              HD JAN89\n         LR    R1,R8              LOAD TOTAL BYTE COUNT\n         SR    R0,R0\n         DR    R0,R2              DIVIDE BYTE COUNT BY PHYSICAL BPI\n         AR    R1,R15             GET TOTAL LENGTH IN INCHES\n         SR    R0,R0\n         D     R0,=F'12'          GET FEET IN R1, INCHES IN R0\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  LNGTHEST+17(4),BADLNGTH\n         CVD   R0,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  LNGTHEST+27(2),BADLNGTH\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(81),LNGTHEST\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(106),LNGTHACC\n         MVI   SHORTNOW+1,LNGTHEST-ENDMSG-1  SET LENGTH OF MESSAGE-HMD-\n         CVD   R8,BADLNGTH        TOTAL BYTES READ (FOR COUNT OPT ONLY)\n         OI    BADLNGTH+7,X'0F'   SET SIGN NIBBLE\n         UNPK  BYTES,BADLNGTH\n         L     R8,BLKCNT          TOTAL BLKS READ ON TAPE, EXCLUDING   *\n                                  THOSE READ DURING SKIP PROC%SSING.\n         CVD   R8,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  NBLKS,BADLNGTH\nSHORT    BAL   R2,PUTLINE         PRINT 'SUCCESSFUL END' MSG\nSHORTNOW MVC   MSGBUF(L'ENDMSG),ENDMSG (LENGTH MODIFIED FOR COUNTBLKS)\n         L     R2,ERRCOUNT        COUNT OF SYNAD EXITS TAKEN\n         LTR   R2,R2              SEE IF ZERO\n*        BZ    EXIT               EXIT IF SO                      -CWB-\n         BZ    LISTVTOC           GO DO VTOC IF SO.               -CWB-\n         CVD   R2,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  ERRSUMSG+22(5),BADLNGTH\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'ERRSUMSG),ERRSUMSG\n*        B     EXIT                                               -CWB-\n         SPACE 3\nLISTVTOC CLC   FRSTVTOC+1(3),=AL3(0)  DID WE MAKE A VTOC?         -CWB-\n         BE    EXIT               IF NOT, SKIP IT.                -CWB-\n         LA    R0,100             RESERVE 100 LINES (FORCE EJECT).-CWB-\n         BAL   R2,PAGECHK                                         -CWB-\n         BAL   R2,PUTLINE         OUTPUT VTOC HEADING.            -CWB-\n         MVC   MSGBUF(VHEADLEN),VTOCHEAD                          -CWB-\n         BAL   R2,PUTLINE         OUTPUT COLUMN HEADINGS.         -CWB-\n         MVC   MSGBUF(L'VTOCHED2),VTOCHED2                        -CWB-\n         L     R4,FRSTVTOC        GET ADDRESS OF FIRST VTOC BLOCK.-CWB-\n         SR    R8,R8              CLEAR R8 FOR 1-BYTE COUNTS.     -CWB-\nNEXTVBLK LA    R3,8(R4)           GET ADDRESS OF FIRST ENTRY IN   -CWB-\n*                                      THE VTOC BLOCK.            -CWB-\n         IC    R8,0(R4)           GET THE NUMBER OF ENTRIES IN    -CWB-\n*                                      THIS VTOC BLOCK.           -CWB-\nNEXTLINE MVC   MSGBUF,BLANKBUF    BUILD THE VTOC ENTRY LINE:      -CWB-\n         MVC   MSGBUF+1(4),VTOCSEQN    DATA SET SEQUENCE NUMBER.  -CWB-\n         MVC   MSGBUF+7(17),VTOCDSN    DATA SET NAME.             -CWB-\n         MVC   MSGBUF+26(4),VTOCRECF   RECFM.                     -CWB-\n         MVC   MSGBUF+32(5),VTOCLREC   LRECL.                     -CWB-\n         MVC   MSGBUF+40(5),VTOCBLKS   BLKSIZE.                   -CWB-\n         MVC   MSGBUF+47(4),VTOCDEN    DENSITY.                   -CWB-\n         MVC   MSGBUF+53(2),VTOCTRTC   TRTCH.                     -CWB-\n         CLC   VTOCTRTC,LBL2MSG+1    Q. TRTCH IS BLANKS.          -HMD-\n         BNE   *+10                  A. NO, LEAVE AS IT IS        -HMD-\n         MVC   MSGBUF+53(3),=C'STD'     INDICATE STD. TRTCH       -HMD-\n         MVC   MSGBUF+59(5),VTOCMAXB   MAXIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+68(5),VTOCMINB   MINIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+77(5),VTOCAVGB   AVERAGE BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+86(6),VTOCOUNT   NUMBER OF BLOCKS.          -CWB-\n         MVC   MSGBUF+95(8),VTOCCREA   CREATION DATE.             -CWB-\n         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.                  -CWB-\n         MVC   MSGBUF+115(8),VTOCSTEP  STEP NAME.                 -CWB-\n         MVC   MSGBUF+125(8),VTOCEXPR  EXPIRATION DATE.           -CWB-\n         BAL   R2,PUTLINE3        OUTPUT THE LINE.                -CWB-\n         DC    CL6'VTOC--'        REQUIRED DEAD SPACE.            -CWB-\n         LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT ENTRY.          -CWB-\n         BCT   R8,NEXTLINE        LOOP IF MORE IN THIS BLOCK.     -CWB-\n         LR    R1,R4              POINT TO VTOC BLOCK.            -CWB-\n         L     R4,0(R4)           GET ADDRESS OF NEXT BLOCK.      -CWB-\n         LA    R0,VTOCBLSZ        GET VTOC BLOCK SIZE.            -CWB-\n         FREEMAIN  R,LV=(0),A=(1) FREE UP VTOC BLOCK'S CORE.      -CWB-\n         LA    R4,0(R4)           CLEAR HIGH-ORDER BYTE.          -CWB-\n         LTR   R4,R4              IS FOREWARD POINTER ZERO?       -CWB-\n         BZ    EXIT               IF SO, WE'RE DONE.              -CWB-\n         B     NEXTVBLK           ELSE, GO DO NEXT BLOCK.         -CWB-\n         EJECT\nCTPMKNO  DC    F'0'               # OF TAPEMARKS ALREADY ENCOUNTERED\nCEOVNO   DC    F'0'               # OF DOUBLE TAPEMARKS PASSED\nSVR4     DC    F'0'               FOR SAVING R4 TEMPORARILY\nBLKCNT   DC    F'0'               KEEPS TRACK OF TOTAL BLKS READ ON TAPE\n                                  EXCLUDING THOSE READ DURING SKIPPING.\nMAX      DC    F'0'               KEEPS TRACK OF MAX BLK LEN   HD DEC86\nMIN      DC    F'32760'           KEEPS TRACK OF MIN BLK LEN   HD DEC86\nTMLENGTH DC    H'3750'            DEFAULT TAPEMARK LENGTH*1000 (9-TRK)\nINDEX    DC    F'0'               NOCONV=+4, +DEN*8            HD DEC86\n         EJECT\n*\n*  -.-.-.- DO NOT CHANGE THE ORDER OF THE FOLLOWING TABLE -.-.-.-.\n*\n*TBLORG EQU BPIBGTBL-20           THEORETICAL ORIGIN OF BPIBGTBL\n*                                 WHICH IS LIKE A 3-D ARRAY:\n*                                 NOCONV=+4, +DEN*8\nBPIBGTBL DC    H'601,800'    800 BPI NOCONV 9-TRK\n         DC    H'1,1'       1600 BPI CONV   9-TRK (NOT USED)\n         DC    H'651,1600'  1600 BPI NOCONV 9-TRK\n         DC    H'300,6250'  6250 BPI NOCONV 9-TRK                 *SRH*\n*  TABLE END                                                      *SRH*\nGAP3480  DC    H'100'       3480 GAP                           HD JAN89\nBPI3480  DC    F'38000'     3480 DENSITY                       HD JAN89\nMARKNO   DC    F'0'               NUMBER OF TAPE MARKS READ.      -CWB-\nEOVNO    DC    F'0'               NUMBER OF EOV'S PROCESSED.      -CWB-\nTPMKMSG  DC    C'0TAPEMARK NO. '\nMARKNUM  DC    C'    '\n         DC    C' -- EOV NO. '\nEOVNUM   DC    CL3'000'\n         DC    C'    BLOCK LENGTHS:  MIN='                        -CWB-\nMINMSG   DC    C'00000'\n         DC    C'  MAX='                                          -CWB-\nMAXMSG   DC    C'00000'\n         DC    C'  AVG='                                          -CWB-\nAVGMSG   DC    C'00000'                                           -CWB-\n         DC    C'    NUMBER OF BLOCKS='\nCOUNTMSG DC    C'000000'\nCNTSEND  EQU   *                                                  -CWB-\nDATASEQ  DC    CL4'NONE'\nENDMSG   DC    C'0SUCCESSFUL PROCESSING OF THIS TAPE COMPLETED'\n         DC    C':    TOTAL BYTES READ='\nBYTES    DC    C'XXXXXXXXXXX'    NUMBER OF BYTES READ             -HMD-\n         DC    C'    NUMBER OF DATA BLOCKS READ='\nNBLKS    DC    C'XXXXXX'\nLNGTHEST DC    C'0LENGTH ESTIMATE=XXXX FEET YY INCHES ASSUMING DEN=X AN*\n               D TRTCH=STANDARD           '\nLNGTHACC DC    C'0(LENGTH ESTIMATE USUALLY ACCURATE WITHIN PLUS OR MINU*\n               S TEN PERCENT;  ALMOST ALWAYS WITHIN TWENTY PERCENT)'\nLNGT3480 DC    C'0LENGTH TEST BYPASSED FOR 3480 CARTRIDGE DEVICE' -HMD-\nLNGT348A DC    C'0LENGTH MEANINGLESS FOR CARTRIDGE TAPE'       HD DEC86\nLBL2MSG  DC    CL12'0     RECFM='\nRECFM    DC    CL18'          BLKSIZE='\nBLKSIZE  DC    CL18'XXXXX       LRECL='\nLRECL    DC    CL20'XXXXX               '\nDENSITY  DC    CL6'TRTCH='\nTRTCH    DC    CL35' '\nCRMSG    DC    C'CREATED BY JOB          IN STEP         '\nMARK     DC    X'00'              'TAPEMARK JUST READ' FLAG (00 = NOT)\nEOV1FLG  DC    C'N'               SET EOV1FLG =C'Y' WHENEVER 1ST BLK   *\n                                  AFTER A TAPEMARK IS 80 BYTES LONG &  *\n                                  STARTS WITH 'EOV1'.\nSWT2     DC    X'00'              SET FOR INVALID CREDT OR EXPDT  -HMD-\nLABLFLAG DC    C'N'               INDICATES WHETHER WE ARE        -CWB-\n*                                      PROCESSING A LABEL FILE.   -CWB-\nPREVHDR1 DC    C'N'               C'Y' IF PREV FILE A HDR1 LABEL. -CWB-\nHDR1FLAG DC    C'N'               C'Y' IF CURRENT FILE A HDR1.    -CWB-\nFLAG3480 DC    C'N'               C'Y' IF TAPE IS A 3480       HD NOV86\nDBLWORK  DC    D'0'               CVB/CVD WORK AREA.              -CWB-\nCURRVTOC DC    A(FRSTVTOC)        CURRENT VTOC BLOCK.             -CWB-\nFRSTVTOC DC    AL1(VTOCEPB),AL3(0)  ADDRESS OF FIRST VTOC BLOCK;  -CWB-\n*                                      HIGH-ORDER BYTE SET TO     -CWB-\n*                                      FORCE FIRST GETMAIN.       -CWB-\nFILEBYTS DC    F'0'               NUMBER OF BYTES IN THIS FILE.   -CWB-\nTRUESEQN DC    F'0'               LABEL= VALUE SEQUENCE NUMBER.   -CWB-\nVTOCHEAD DC    C'-VOLUME TABLE OF CONTENTS FOR '                  -CWB-\nVSNSAVE  DC    C'VSNVSN',C'    '                                  -CWB-\nSAVETRK  DC    C'9 TRACK    '                                     -CWB-\nOWNERSAV DC    CL10'          '                                   -CWB-\nVHEADLEN EQU   *-VTOCHEAD                                         -CWB-\nVTOCHED2 DC    C'-SEQ.  DATA SET NAME     RECFM  LRECL  BLKSIZE DEN TRT*\n               CH  MAX BLK  MIN BLK  AVG BLK  BLK COUNT  CREATED  JOB N*\n               AME  STEP      EXPIRES'                            -CWB-\nERR0MSG  DC    C'0WARNING - THE CREATION DATE AND/OR EXPIRATION DATE  OX\n               N THE ABOVE '\nERR1MSG  DC    C'HDR1'\nERR2MSG  DC    C' LABEL IS INVALID '\nLMSG     EQU   *-ERR0MSG\n         EJECT\n         LTORG\n         EJECT\n*****************************************************************-HMD-\n**  THIS TABLE IS USED TO DETERMINE IF THE VOLSER IN THE JFCB  **-HMD-\n**  OR IN THE UCB IS PRINTABLE EBCDIC. IF SO IT IS DISPLAYED;  **-HMD-\n**  IF NOT, THE DEFAULT CONSTANT IS DISPLAYED..SEE POSMSG.     **-HMD-\n*****************************************************************-HMD-\nEBCDTBL  DS    0C\n         DC    256XL1'FF'                FOR NON-PRINTABLES     -HMD-\n         ORG   EBCDTBL+C' '              SPACES ARE OK          -HMD-\n         DC    X'00'                     MAKE IT OK             -HMD-\n         ORG   EBCDTBL+C'$'              DOLLAR-SIGN            -HMD\n         DC    X'00'                     MAKE IT OK             -HMD-\n         ORG   EBCDTBL+C'#'              POUND-SIGN AND AT-SIGN -HMD-\n         DC    X'0000'                   BOTH ARE OK            -HMD-\n         ORG   EBCDTBL+C'A'              ALPHABET (UPPER-CASE)  -HMD-\n         DC    9X'00'                    OK                     -HMD-\n         ORG   EBCDTBL+C'J'                                     -HMD-\n         DC    9X'00'                                           -HMD-\n         ORG   EBCDTBL+C'S'                                     -HMD-\n         DC    8X'00'                                           -HMD-\n         ORG   EBCDTBL+C'0'              NUMBERS                -HMD-\n         DC    10X'00'                                          -HMD-\n         ORG   ,                         BACK TO REALITY        -HMD-\n         EJECT\n****************************************************************-HMD-\n** THIS TABLE IS USED TO DETERMINE WHETHER THE CREATION DATE  **-HMD-\n** OR THE EXPIRATION DATE IN THE HDR1 OR EOF1 FIELD OF A      **-HMD-\n** STANDARD LABELED TAPE IS NUMERIC. IF NOT, AN ERROR MSG IS  **-HMD-\n** PRINTED AND TAPESCAN CONTINUES.                            **-HMD-\n****************************************************************-HMD-\nNUBTABL  DS    0C                 NUMERIC CHECK TABLE\n         DC    256XL1'FD'         TO DISTINGUISH FROM EBCDTBL\n         ORG   NUBTABL+C'0'       NUMBERS ONLY\n         DC    10X'00'\n         ORG   ,                  BACK TO REALITY\n         EJECT\nDATE     CSECT\n         SAVE  (14,12),T,*\n*      R1 = ADDR FOR OUTPUT (DS CL8'MM/DD/YY')\n*      R2 = R1 FROM THE TIME MACRO\n         LR    R12,R15\n         USING DATE,R12\n         LA    R3,DATESAVE\n         ST    R13,4(,R3)\n         ST    R3,8(,R13)\n         LR    R13,R3\n         USING PARMAREA,R1\n         L     R1,0(,R1)   GET ADDR FOR OUTPUT            *LACCD*\n         ST    R2,W2                    STORE DATE (00YYDDDF)\n         TM    W2+1,01                  IF ODD NOT LEAP.\n         BO    NOLEAP                    NOT LEAP\n         TM    W2+1,X'12'               TEST FOR LEAP (VALID TILL 1999)\n         BM    NOLEAP                   1NOT LEAP\n         MVI   MONTHTBL+5,29            SETUP FEB LEAP YEAR\nNOLEAP   UNPK  MMDDYY+6(3),W2+1(2)           UNPK YR\n         XC    W1(6),W1                  CLEAR YR FOR DAY RTN.\n         CVB   R4,W1                    GET DAY\n         LA    R5,MONTHTBL-4            SET BACK PTR\nMONLUPE  LA    R5,4(R5)                 INCR THRU MON TBL\n         SH    R4,0(R5)                 DROP DOWN THRU MONTBL\n         BH    MONLUPE                  NOT YET, TRY AGAIN\n         AH    R4,0(R5)                 ADD BACK THE DAY\n         CVD   R4,W1                    MAKE\n         OI    W2+3,X'0F'                  THE DAY\n         UNPK  MMDDYY+2(3),W2+2(2)            PRINTABLE\n         MVI   MMDDYY+5,C'/'            RESTORE SLASH\n         MVC   MMDDYY(2),2(R5)          MOVE THE MONTH\n         MVI   MMDDYY+2,C'/'  RESTORE SLASH\n         MVC   THEDATE,MMDDYY         MOVE DATE TO USER\nRETURN   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),,RC=0 RESTORE REGS AND RETURN\n         EJECT\n         SPACE 2\nMONTHTBL DS    0CL48\nMTK      DC    H'31',C'01' JAN\n         DC    H'28',C'02' FEB\n         DC    H'31',C'03' MAR\n         DC    H'30',C'04' APR\n         DC    H'31',C'05' MAY\n         DC    H'30',C'06' JUN\n         DC    H'31',C'07' JLY\n         DC    H'31',C'08' AUG\n         DC    H'30',C'09' SEP\n         DC    H'31',C'10' OCT\n         DC    H'30',C'11' NOV\n         DC    H'255',C'12' DEC\n         SPACE 2\nDATESAVE     DS    9D\nW1       DS    F              WORKARE1\nW2       DS    F              WORKAREA2\nMMDDYY   DS    CL9\nPARMAREA DSECT\nTHEDATE  DS    CL8\n         SPACE 5\nVTOC     DSECT\nVTOCSEQN DS    CL4                SEQUENCE NUMBER                 -CWB-\nVTOCDSN  DS    CL17               DATA SET NAME.                  -CWB-\nVTOCRECF DS    CL4                RECFM.                          -CWB-\nVTOCLREC DS    CL5                LRECL.                          -CWB-\nVTOCBLKS DS    CL5                BLKSIZE.                        -CWB-\nVTOCDEN  DS    CL4                DENSITY.                        -CWB-\nVTOCTRTC DS    CL2                TRTCH.                          -CWB-\nVTOCMAXB DS    CL5                MAXIMUM BLOCK SIZE.             -CWB-\nVTOCMINB DS    CL5                MINIMUM BLOCK SIZE.             -CWB-\nVTOCAVGB DS    CL5                AVERAGE BLOCK SIZE.             -CWB-\nVTOCOUNT DS    CL6                BLOCK COUNT.                    -CWB-\nVTOCCREA DS    CL8                CREATION DATE.                  -CWB-\nVTOCJOBN DS    CL8                JOB NAME.                       -CWB-\nVTOCSTEP DS    CL8                STEP NAME.                      -CWB-\nVTOCEXPR DS    CL8                EXPIRATION DATE.                -CWB-\n         DS    0D                 ADVANCE TO DOUBLE WORD BNDRY.   -CWB-\nVTOCSIZE EQU   *-VTOC             SIZE OF VTOC ENTRY.             -CWB-\nVTOCEPB  EQU   10                 NUMBER OF ENTRIES PER BLOCK.    -CWB-\nVTOCBLSZ EQU   VTOCEPB*VTOCSIZE+8 SIZE OF VTOC BLOCK.             -CWB-\n         EJECT\n         IEFUCBOB LIST=YES                                        -HMD-\n         EJECT                                                 HD DEC86\n         DCBD  DSORG=PS,DEVD=TA                                HD DEC86\n         EJECT                                                 HD DEC86\nJFCB     DSECT                                                 HD DEC86\n         IEFJFCBN LIST=YES                                     HD DEC86\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TESTSCAN": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00\\x00\\x00\\x99\\x06\\x0f\\x01\\x00\\x13o\\x13\\x19\\x00'\\x00\\x15\\x00\\x14\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-01T00:00:00", "modifydate": "2000-05-15T13:19:00", "lines": 39, "newlines": 21, "modlines": 20, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (DAZC1130,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//CONTROL  EXEC PGM=CXYPSCAN,PARM=('AND')\n//SYSUDUMP  DD  SYSOUT=*\n//PROC02 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLCNTL\n//PROC03 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLBASE\n//PROC04 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLDES\n//PROC05 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLDES2\n//PROC06 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLCLEV\n//PROC07 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLNAVY\n//MESSAGE   DD  SYSOUT=*\n//INDEX     DD  SYSOUT=*\n//SYSPRINT  DD  SYSOUT=*\n//*YSPRINT  DD  SYSOUT=A,DEST=A27LEAD.PLOC0CE\n//SYSIN     DD  *\n01000**PGM=AFOLIBR\n01000**//MASTER\n01000**-OPT\n01000**INIT\n/*\n//EXPORT   EXEC PGM=CXYPSCAN,PARM=('LH,AND')\n//STEPLIB   DD  DISP=SHR,DSN=UMV42.CAJ7083.LOAD\n//SYSUDUMP  DD  SYSOUT=*\n//PROC02 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLCNTL\n//PROC03 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLBASE\n//PROC04 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLDES\n//PROC05 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLDES2\n//PROC06 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLCLEV\n//PROC07 DD DISP=SHR,DSN=UMV42.CAJ7083.JCLNAVY\n//MESSAGE   DD  SYSOUT=*\n//INDEX     DD  SYSOUT=*\n//SYSPRINT  DD  SYSOUT=*\n//*YSPRINT  DD  SYSOUT=A,DEST=A27LEAD.PLOC0CE\n//SYSIN     DD  *\n01000**PGM=AFOLIBR\n01000**//MASTER\n01000**-OPT\n01000**INIT\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTTPSC": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x06\\x9f\\x00\\x99\\x06\\x9f\\t!\\x00\\x0b\\x00\\x07\\x00\\x06\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-10T00:00:00", "modifydate": "1999-03-10T09:21:00", "lines": 11, "newlines": 7, "modlines": 6, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,TYPRUN=HOLD\n//CONTROL EXEC PGM=TAPESCAN\n//SYSPRINT DD SYSOUT=*\n//INPUT    DD UNIT=OCART,VOL=SER=MHTB21,DISP=OLD,\n//            LABEL=(,SL,EXPDT=98000)\n//EXPORT  EXEC PGM=TAPESCAN\n//STEPLIB  DD DISP=SHR,DSN=UMV42.CAJ7083.LOAD\n//SYSPRINT DD SYSOUT=*\n//INPUT    DD UNIT=OCART,VOL=SER=MHTB21,DISP=OLD,\n//            LABEL=(,SL,EXPDT=98000)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTZZRL": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x99\\x06O\\x00\\x99\\x06\\x7f\\x138\\x00'\\x00'\\x00\\x03\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-05T00:00:00", "modifydate": "1999-03-08T13:38:00", "lines": 39, "newlines": 39, "modlines": 3, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (DAZC1130,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083,TYPRUN=HOLD\n//CONTROL EXEC PGM=ZZRELINK,REGION=1024K,PARM='SIZE=(1024K,128K)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLOUT  DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,5),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,5),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,5),UNIT=SYSDA\n//IN1      DD  DISP=SHR,DSN=SYS3.MC99.NCPASS.V204.ASSIST.LOAD\n//OUT1     DD  DSN=&&TEMPLPA,UNIT=SYSDA,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=23200),SPACE=(TRK,(1,,1))\n//OUT2     DD  DSN=&&TEMPLOD,UNIT=SYSDA,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=23200),SPACE=(TRK,(1,,1))\n//SYSIN    DD  *\n   L  I=((IN1,R)),O=OUT1\n   S  M=(AUTHXNCP,SEVPRE01,SEVPST01)\n   L  I=((IN1,R)),O=OUT2\n   S  M=(SERACF)\n/*\n//EXPORT  EXEC PGM=ZZRELINK,REGION=1024K,PARM='SIZE=(1024K,128K)'\n//STEPLIB  DD DISP=SHR,DSN=UMV42.CAJ7083.LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSLOUT  DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,5),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,5),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,5),UNIT=SYSDA\n//IN1      DD  DISP=SHR,DSN=SYS3.MC99.NCPASS.V204.ASSIST.LOAD\n//OUT1     DD  DSN=&&TEMPLPA2,UNIT=SYSDA,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=23200),SPACE=(TRK,(1,,1))\n//OUT2     DD  DSN=&&TEMPLOD2,UNIT=SYSDA,DISP=(,PASS),\n//             DCB=(RECFM=U,BLKSIZE=23200),SPACE=(TRK,(1,,1))\n//SYSIN    DD  *\n   L  I=((IN1,R)),O=OUT1\n   S  M=(AUTHXNCP,SEVPRE01,SEVPST01)\n   L  I=((IN1,R)),O=OUT2\n   S  M=(SERACF)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMTZIPLD": {"ttr": 3087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99 \\x8f\\x01\\x00\\x13o\\x13A\\x00\\x1d\\x00\\x1c\\x00\\x04\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-07-27T00:00:00", "modifydate": "2000-05-15T13:41:00", "lines": 29, "newlines": 28, "modlines": 4, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//TSOBATCH EXEC PGM=IKJEFT01,DYNAMNBR=25\n//SYSTSPRT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSTSIN  DD *\n XMIT ABANSP01.CAJ7083 DA('UMV42.CAJ7083.LOAD') +\n OUTDA('UMV42.CAJ7083.LOAD.XMI')\n/*\n//ZIP      EXEC PGM=PKZIP,REGION=2M\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSIN    DD *\n-ECHO\n-ARCHIVE(UMV42.CAJ7083.LOAD.ZIP)\n-ARCHSCLASS(STANDARD)\n-BINARY\nUMV42.CAJ7083.LOAD.XMI\n/*\n//VIEW     EXEC PGM=PKZIP,REGION=2M\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSIN    DD *\n-ECHO\n-ARCHIVE(UMV42.CAJ7083.LOAD.ZIP)\n-VIEWDETAIL\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMTZIPSR": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99 \\x8f\\x01\\x00\\x13o\\x13A\\x00\\x1d\\x00\\x1c\\x00\\x04\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-07-27T00:00:00", "modifydate": "2000-05-15T13:41:00", "lines": 29, "newlines": 28, "modlines": 4, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//TSOBATCH EXEC PGM=IKJEFT01,DYNAMNBR=25\n//SYSTSPRT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSTSIN  DD *\n XMIT ABANSP01.CAJ7083 DA('UMV42.CAJ7083.SGSOURCE') +\n OUTDA('UMV42.CAJ7083.SGSOURCE.XMI')\n/*\n//ZIP      EXEC PGM=PKZIP,REGION=2M\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSIN    DD *\n-ECHO\n-ARCHIVE(UMV42.CAJ7083.SGSOURCE.ZIP)\n-ARCHSCLASS(STANDARD)\n-BINARY\nUMV42.CAJ7083.SGSOURCE.XMI\n/*\n//VIEW     EXEC PGM=PKZIP,REGION=2M\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSIN    DD *\n-ECHO\n-ARCHIVE(UMV42.CAJ7083.SGSOURCE.ZIP)\n-VIEWDETAIL\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZMESAGE": {"ttr": 3331, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE  'Z Z M E S A G E  -  ZZRELINK MESSAGE HANDLING ROUTINE'\nZZMESAGE CSECT\nGR0      EQU   0\nGR1      EQU   1\nGR2      EQU   2\nGR3      EQU   3\nGR4      EQU   4\nGR5      EQU   5\nGR6      EQU   6\nGR7      EQU   7\nGR8      EQU   8\nGR9      EQU   9\nGR10     EQU   10                 BASE REGISTER 1\nGR11     EQU   11                 BASE REGISTER 2\nGR12     EQU   12\nGR13     EQU   13\nGR14     EQU   14\nGR15     EQU   15\nTRIPLESP EQU   C'-'\nSKPSPACE EQU   C' '\nC0       EQU   C'0'               EQUATES\nC1       EQU   C'1'                 TO SET UP\nC2       EQU   C'2'                   RETURN CODE\nC9       EQU   C'9'                     IN EOJ MSG\nFF       EQU   X'FF'\nFIFTYSIX EQU   56\nBLNK     EQU   C' '               BLANK CHARACTER\nBUFL     EQU   120                LENGTH (MINUS 1) OF MSG BUFFER\nCCLEN    EQU   80                 LENGTH OF CONTROL CARD\nCHAR0    EQU   C'0'               FOR SETTING PAGE NBR ZONE BITS\nCOFF     EQU   20                 OFFSET IN BFR FOR CTL CD IMAGE\nZZRMNO   EQU   4                  OFFSET INTO 'ZZR1  I' FOR MSG NBR\nLFT2     EQU   2                  FOR USE WITH 'SLL' INSTRUCTION\nLINE1    EQU   1                  FOR ADDING 1 TO LINE COUNT\nLINES3   EQU   3                  FOR ADDING 3 TO LINE COUNT\nLNKBK    EQU   4                  FOR STD LINKAGE USE\nLNKTHS   EQU   8                  FOR STD LINKAGE USE\nMSGK     EQU   3                  CONSTANT LENGTH OF 3 BYTES WHICH BE-\n*                                 GIN EACH MESSAGE 'DC'\nM2       EQU   2                  LENGTH OF EACH MSG LIST ENTRY\nNAMLEN   EQU   8                  LENGTH OF NAME\nNBRLEN   EQU   7                  LENGTH OF NUMBER AND OF 'ZZR1  I' CON\nDDNLTH   EQU   8                  LENGTH OF DDNAME\nNLEN     EQU   2                  LENGTH OF MSG NBR PUT INTO 'ZZR1  I'\nOFF172I  EQU   12                 OFFSET INTO MSG ZZR172I FOR NAME\nPGOFF    EQU   116                OFFSET INTO PAGE HEADER FOR PAGE NBR\nPNLEN    EQU   4                  LENGTH OF PAGE NUMBER\nRCOFF    EQU   25                 OFFSET IN EOJ MSG (WTO) FOR RET CODE\nRCOFFP   EQU   16                 OFFSET IN EOJ MSG (NOT WTO) FOR R.C.\nSYN1     EQU   62                 LENGTH OF 1ST PART OF SYNADAF MSG\nSYN2     EQU   58                 LENGTH OF 2ND PART OF SYNADAF MSG\nTXTOFF   EQU   9                  OFFSET IN BFR FOR MSG TEXT\nVALOFF   EQU   3                  OFFSET INTO VALIDATION ERR MSG\nZRO      EQU   0                  CONSTANT OF ZERO\nL1       EQU   1                  LENGTH OF 1\nL3       EQU   3                  LENGTH OF 3\nL8       EQU   8                  LENGTH OF 8\nP1       EQU   1                  TO BE ADDED TO SOMETHING\nP4       EQU   4                  TO ADD 4 TO SOMETHING\nX0       EQU   0                  OFFSET OF ZERO\nX1       EQU   1                  OFFSET OF ONE\nLSYN1    EQU   SYN1+P1\n         EJECT\n         SAVE  (14,12),,*\n         LR    GR10,GR15          ADDRESSIBILITY\n         USING ZZMESAGE,GR10\n         USING ZZRELCOM,4\n         LA    GR12,SAVE\n         ST    GR12,LNKTHS(GR13)  STD LINKAGE\n         ST    GR13,LNKBK(GR12)   ADDR OF CALLER'S SAVE AREA\n         LR    GR13,GR12\n         LA    GR2,MSGLIST\n         TM    IOEF2,SPRNOPN      I/O ERROR ON SYSPRINT\n         BZ    PRNTMSG            NO - PROCEED TO WRITE MSG\n         TM    X0(GR2),IOERF      IS I/O ERR MSG IN BUFFER ALREADY\n         BO    WTOS               ISSUE SYNADAF MSG AS WTO\n         CLI   X1(GR2),BADPRINT   IS SYSPRINT BAD - WTO TO BE ISSUED\n         BNE   TESTM53            NO - SEE IF 'END OF JOB' WTO TO\n*                                 BE WRITTEN\n         L     GR9,ATXT           ADDR OF MESSAGE TEXT CSECT\n         USING TXTCSECT,GR9\n         MVC   ZZR172I+OFF172I(NAMLEN),NAMEFLD PUT NAME INTO WTO TEXT\n*                                 MOVE NAME OF SYSPRINT DD WHICH\n*                                 COULD NOT BE OPENED INTO\n*                                 WTOLFBAD WTO\n         LA    GR1,ZZR172I        POINT TO WTO MESSAGE\n         WTO   MF=(E,(1))\nTESTM53  CLI   X1(GR2),M53        IS 'END OF JOB' WTO TO BE ISSUED NOW\n         BNE   RETURN             IF NOT, RETURN TO CALLER NOW\n         LA    GR1,WTOLF5         ADDRESS OF LIST FORM\n*                                 'END OF JOB' WTO\n         CLI   RCBUF,C9           IS RETURN CODE 10 OR HIGHER\n         BH    WTORC12            YES, MOVE IN 12\n         MVI   RCOFF-P1(GR1),C0   NO, MOVE IN 0X\n         MVC   RCOFF(L1,GR1),RCBUF  MOVE IN RETURN CODE\n         B     GOWTO              AND WRITE EOJ WTO MSG\nWTORC12  EQU   *\n         MVI   RCOFF-P1(GR1),C1   MOVE IN 10\n         MVI   RCOFF(GR1),C2      MOVE IN 2\nGOWTO    EQU   *\n         WTO   MF=(E,(1))         EXECUTE 'END OF JOB' WTO\n         B     RETURN             NOW EXIT TO CALLER\nPRNTMSG  EQU   *\n         SR    GR3,GR3\n         IC    GR3,LINECT\n         LTR   GR3,GR3            DOES LINE-COUNT NOW = 0\n         BZ    PRNTHEAD           IF SO, GO PRINT PAGE HEADER\nRDYWRT1  EQU   *\n         MVI   MSGBUF,SKPSPACE\nRDYWRTHD TM    X0(GR2),IOERF      IS THERE A MSG IN THE BUFFER\n         BO    WRTMSG             IF SO, GO WRITE IT\nRDYWRT2  EQU   *\n         LA    GR6,MSGBUF+P1\n         TM    X0(GR2),CTLCD      IS A CONTROL STMT TO BE PRINTED\n         BO    ADCC               IF ON, GO PRINT THE CONTROL STMT\n         SR    GR11,GR11\n         IC    GR11,X1(GR2)       GET MESSAGE CODE\n         SLL   GR11,LFT2          MULTIPLY MSG CODE NUMBER BY 4 TO\n*                                 USE IT AS AN INDEX TO THE TABLE OF\n*                                 POINTERS TO MESSAGE TEXT\n         L     GR5,MSGTAB(GR11)   OBTAIN THE POINTER TO THE MESSAGE TXT\n         TM    X0(GR2),RCODE      IS A RETURN CODE TO BE PUT INTO MSG\n         BZ    ANYPARM            NO- SEE IF ANY PARAMETERS\n         CLI   RCBUF,C9           IS RETURN CODE 10 OR HIGHER\n         BH    WRTRC12            YES, MOVE IN 12\n         MVI   RCOFFP-P1(GR5),C0  NO, MOVE IN 0X\n         MVC   RCOFFP(L1,GR5),RCBUF MOVE IN RETURN CODE\n         B     ANYPARM            AND WRITE EOJ MSG\nWRTRC12  EQU   *\n         MVI   RCOFFP-P1(GR5),C1  MOVE IN 10\n         MVI   RCOFFP(GR5),C2     MOVE IN 2\nANYPARM  EQU   *\n         TM    X0(GR2),PBIT       ARE THERE ANY PARAMETERS\n         BZ    NOPARAM            NO - CONTINUE PROCESSING\n         TM    PARAMS,NAME        IS THERE A NAME PARAMETER\n         BZ    NBRPARM            NO - IS THERE A NBR PARAMETER\n         SR    GR8,GR8\n         IC    GR8,NAMEDISP       DISPLACEMENT OF NAME FROM BEGINING\n*                                 OF MSG IS IN GR8\n         AR    GR8,GR5            ADD DISPLACEMENT TO MESSAGE ADDRESS\n         LA    GR8,MSGK(GR8)      POINT TO START OF MSG TEXT\n         MVC   X0(NAMLEN,GR8),NAMEFLD  PUT NAME INTO MSG TEXT\nNBRPARM  TM    PARAMS,NBR         IS THERE A NUMBER PARAMETER\n         BZ    DDTEST1            NO - CONTINUE PROCESSING\n         SR    GR8,GR8\n         IC    GR8,NODISP         DISPLACEMENT OF NAME FROM\n*                                 BEGINNING OF MSG IS IN GR8\n         AR    GR8,GR5            ADD DISPLACEMENT TO MESSAGE ADDRESS\n         LA    GR8,MSGK(GR8)      POINT TO START OF MSG TEXT\n         MVC   X0(NBRLEN,GR8),NOFLD    PUT NUMBER INTO MSG TEXT\nDDTEST1  TM    PARAMS,DDNM        IS DDNAME PRESENT\n         BNO   NOPARAM            NO _ CONTINUE PROCESSING\n         SR    GR8,GR8            ZERO R8\n         IC    GR8,DDNMDISP       DISPLACEMENT OF DDNAME\n         AR    GR8,GR5            POINT AT DDNAME SLOT\n         LA    GR8,MSGK(GR8)      POINT AT TRUE SLOT\n         MVC   X0(DDNLTH,GR8),DDNMFLD INSERT DDNAME IN MESSAGE\nNOPARAM  EQU   *\n         CLI   X1(GR2),GENERUAL   IS THIS A 'VALIDATION ERROR' MSG\n         BNE   NOTVALID           IF NOT, NO SPECIAL SETUP REQUIRED\n         MVC   VALOFF(NAMLEN,GR5),DDVALNM   PUT NAME BEING VALIDATED IN\n*                                 GENERVAL MSG\nNOTVALID EQU   *\n         MVC   X0(NBRLEN,GR6),ZZRCON   SET UP 'ZZR1XXI' IN BUFFER\n*                                 BUFFER\n         MVC   ZZRMNO(NLEN,GR6),X1(GR5) PUT MSG NBR INTO 'ZZR1  I'\n         SR    GR7,GR7\n         IC    GR7,X0(GR5)        GET LENGTH OF MSG TEXT (IN BYTES)\n         BCTR  GR7,GR0            SUBTR 1 FOR EX\n         EX    GR7,MOVEMSG        LENGTH OF MSG IS IN GR7\n         B     WRTMSG             GO WRITE THE MSG\nADCC     LA    GR5,CCIMAGE\n         MVC   COFF(CCLEN,GR6),X0(GR5) PUT CONTROL CARD IMAGE\n*                                 INTO THE BUFFER\nWRTMSG   EQU   *\n         LA    GR6,MSGBUF\nWRTHEAD  EQU   *\n         LA    GR7,PRTDCB\n         LA    GR8,WTOS           ADDRESS TO BE USED BY SYNAD ROUTINE\n*                                 IF I/O ERROR OCCURRS WHILE 'PRINTING'\n         PUT   (GR7),(GR6)        PRINT MESSAGE\n         TM    IOEF2,SPRNOPN      I/O ERROR ON SYSPRINT\n         BZ    NOPUTERR           NO - CONTINUE PROCESSING\nWTOS     MVC   WTOLF1+P4(SYN1),MSGBUF+P1 PUT 1ST PART OF SYNADAF\n*                                 MESSAGE INTO WTO BUFFER\n         MVC   WTOLF2+P4(SYN2),MSGBUF+LSYN1 PUT SECOND PART OF\n*                                 SYNADAF MESSAGE INTO WTO BUFFER\n         LA    GR1,WTOLF1         ADDRESS OF LIST FORM WTO IN GR1\n         WTO   MF=(E,(1))         EXECUTE WTO\n         LA    GR1,WTOLF2         ADDRESS OF LIST FORM WTO IN GR1\n         WTO   MF=(E,(1))         EXECUTE WTO\n*                                 TWO WTO'S MUST BE ISSUED BECAUSE\n*                                 IMPLEMENTATION OF MCS DOES NOT\n*                                 ALLOW MORE THAN 72 BYTES PER LINE\n*                                 ON THE OPERATORS CONSOLE\n         B     TESTM53            SEE IF END OF JOB MSG TO BE WRITTEN\nNOPUTERR EQU   *\n         TM    SWITCH,WRTHDMSG    WAS A HEADER JUST PRINTED\n         BO    NISWOFF            YES - DONT CLEAR BUFFER\n         MVI   MSGBUF,BLNK        SET MSG BUFFER TO BLANKS AFTER WRITE\n         MVC   MSGBUF+P1(BUFL),MSGBUF\n         B     NOTHEAD            SINCE MSG ISNT A HEADER, GO TO\n*                                 GET THE NEXT MESSAGE\nNISWOFF  EQU   *\n         NI    SWITCH,FF-WRTHDMSG TURN OFF HEADER SWITCH\n         MVI   MSGBUF,TRIPLESP    IF A HEADER WAS PRINTED,\n*                                 SET CARRIAGE CONTROL CHARACTER TO\n*                                 TRIPLE SPACE\n         LA    GR3,LINES3(GR3)    ADD 3 TO LINE COUNT\n         B     RDYWRTHD           BRANCH TO SET UP FOR PRINTING THE\n*                                 MESSAGE WHICH FOLLOWS THE HEADER\nWTOLF1   WTO   '                                                       X\n                      ',MF=L      FOR 1ST PART OF SYNADAF MSG\nWTOLF2   WTO   '                                                       X\n                  ',MF=L          FOR 2ND PART OF SYNADAF MSG\nWTOLF5   WTO   'ZZR147I END OF JOB - X WAS HIGHEST SEVERITY CODE',MF=L\n         SPACE 1\nNOTHEAD  EQU   *\n         LA    GR3,LINE1(GR3)     ADD 1 TO LINE COUNT\n         STC   GR3,LINECT\n         CLI   LINECT,FIFTYSIX    WAS THE 56'TH LINE JUST PRINTED\n         BL    RETCAL             IF NOT, SEE IF NECESSARY TO RETURN\n*                                 TO CALLER\n         MVI   LINECT,ZRO         RESET LINE COUNT\nRETCAL   TM    X0(GR2),LASTMSG    IS THIS THE LAST MSG TO HANDLE NOW\n         BO    RETURN             IF SO, EXIT TO CALLER\n         LA    GR2,M2(GR2)        ELSE POINT TO NXT MSG LIST ENTRY\n         CLI   LINECT,ZRO         DOES PAGE HEADER NEED TO BE PRINTED\n         BNE   RDYWRT1            IF NOT, GO TO SET UP NEXT MESSAGE\n         SR    GR3,GR3\nPRNTHEAD OI    SWITCH,WRTHDMSG\n         LA    GR6,HEADBUF\n         MVC   PGOFF(PNLEN,GR6),PGNO   PUT PAGE NBR INTO HEADER MSG\n         PACK  PGCONVRT(L8),PGNO+P1(L3) NOW INCREMENT IT\n         CVB   GR8,PGCONVRT       CONVERT PACKED PAGE NUMBER TO\n*                                 BINARY\n         LA    GR8,X1(GR8)        ADD 1 TO PAGE NUMBER\n         CVD   GR8,PGCONVRT       CONVERT BACK TO DECIMAL\n         UNPK  PGNO+P1(L3),PGCONVRT\n         OI    PGNO+L3,CHAR0      CHANGE SIGN OF LOW ORDER BYTE TO ZONE\n         B     WRTHEAD            GO WRITE THE HEADER\nRETURN   L     GR13,SAVE+LNKBK\n         RETURN  (14,12)\nPGCONVRT DC    D'0'               AREA FOR PAGE NBR CONVERSION\nATXT     DC    A(TXTCSECT)        ADDR OF MESSAGE TEXT CSECT\nSAVE     DC    18F'0'             REGISTER SAVE AREA\nMOVEMSG  MVC   TXTOFF(X0,GR6),MSGK(GR5) EXECUTED TO PUT MSG INTO BUFFER\nSWITCH   DC    X'00'              INTERNAL SWITCH\nWRTHDMSG EQU   X'80'         ON = A PAGE HEADER IS BEING WRITTEN\n*              LOW ORDER 7 BITS NOT USED\nZZRCON   DC    C'ZZR1  I'         MESSAGE NUMBER CONSTANT\n* THE FOLLOWING 121 BYTES ARE THE PAGE HEADER TEXT\nHEADBUF  DC    C'1'            CARRIAGE CONTROL=EJECT\n         DC    40C' '\n         DC    C'ZZRELINK MESSAGES AND CONTROL STATEMENTS '\n         DC    29C' '\n         DC    C'PAGE '\n         DC    5C' '\n         DS    0F\nPATCHLEN EQU   (*-ZZMESAGE)/20      LENGTH OF 5 PER CENT PATCH AREA\nPATCH    DC    XL(PATCHLEN)'00'   5 PER CENT PATCH AREA          A41780\n         DS    0F\nMSGTAB   EQU   *-4                MSGTAB IS A TABLE OF POINTERS TO\n*                                 THE MESSAGES. IT MUST START AT THE\n*                                 FIRST ENTRY-4 BECAUSE THERE IS NO\n*                                 MESSAGE WITH THE NUMBER 0\n* NOTE - EACH ADCON IS ACCESSED AS NEEDED BY USING THE MESSAGE CODE AND\n*        MULTIPLYING IT BY 4.  IT IS THEREFORE IMPORTANT TO RETAIN THE\n*        SAME SEQUENCE OF ADCONS AND MESSAGE CODES.\n*        DC    AL4(ZZR100I)       MESSAGE TEXT NOT IN THIS MODULE\n*        DC    AL4(ZZR101I)       MESSAGE TEXT NOT IN THIS MODULE\n*        DC    AL4(ZZR102I)       MESSAGE TEXT NOT IN THIS MODULE\n*        DC    AL4(ZZR103I)       MESSAGE TEXT NOT IN THIS MODULE\n         DC    AL4(ZZR104I)\n         DC    AL4(ZZR105I)\n         DC    AL4(ZZR106I)\n         DC    AL4(ZZR107I)\n         DC    AL4(ZZR108I)\n         DC    AL4(ZZR109I)\n         DC    AL4(ZZR110I)\n         DC    AL4(ZZR111I)\n         DC    AL4(ZZR112I)\n         DC    AL4(ZZR113I)\n         DC    AL4(ZZR114I)\n         DC    AL4(ZZR115I)\n         DC    AL4(ZZR116I)\n         DC    AL4(ZZR117I)\n         DC    AL4(ZZR118I)\n         DC    AL4(ZZR119I)\n         DC    AL4(ZZR120I)\n         DC    AL4(ZZR121I)\n         DC    AL4(ZZR122I)\n         DC    AL4(ZZR123I)\n         DC    AL4(ZZR124I)\n         DC    AL4(ZZR125I)\n         DC    AL4(ZZR126I)\n         DC    AL4(ZZR127I)\n         DC    AL4(ZZR128I)\n         DC    AL4(ZZR129I)\n         DC    AL4(ZZR130I)\n         DC    AL4(ZZR131I)\n         DC    AL4(ZZR132I)\n         DC    AL4(ZZR133I)\n         DC    AL4(ZZR134I)\n         DC    AL4(ZZR135I)\n         DC    AL4(ZZR136I)\n         DC    AL4(ZZR137I)\n         DC    AL4(ZZR138I)\n*        DC    AL4(ZZR139I)       SYNADAF MSG - TEXT NOT IN THIS MODULE\n         DC    AL4(ZZR140I)\n         DC    AL4(ZZR141I)\n         DC    AL4(ZZR142I)\n         DC    AL4(ZZR143I)\n         DC    AL4(ZZR144I)\n         DC    AL4(ZZR145I)\n         DC    AL4(ZZR146I)\n         DC    AL4(ZZR147I)\n         DC    AL4(ZZR148I)\n         DC    AL4(ZZR149I)\n         DC    AL4(ZZR150I)\n         DC    AL4(ZZR151I)\n         DC    AL4(ZZR152I)\n         DC    AL4(ZZR153I)\n         DC    AL4(ZZR154I)\n         DC    AL4(ZZR155I)\n         DC    AL4(ZZR156I)\n         DC    AL4(ZZR157I)\n         DC    AL4(ZZR158I)\n         DC    AL4(ZZR159I)\n         DC    AL4(ZZR160I)\n         DC    AL4(ZZR161I)\n         DC    AL4(ZZR162I)\n         DC    AL4(ZZR163I)\n         DC    AL4(ZZR164I)\n         DC    AL4(ZZR165I)\n         DC    AL4(ZZR166I)\n         DC    AL4(ZZR167I)\n         DC    AL4(ZZR168I)\n         DC    AL4(ZZR169I)\n         DC    AL4(ZZR170I)\n*        DC    AL4(ZZR171I)       I/O ERROR MSG - TEXT IN ZZRIOE MODULE\n         DC    AL4(ZZR172I)\n*        DC    AL4(ZZR173I)       MESSAGE TEXT NOT IN THIS MODULE\n*        DC    AL4(ZZR174I)       MESSAGE TEXT NOT IN THIS MODULE\n*        DC    AL4(ZZR175I)       MESSAGE TEXT NOT IN THIS MODULE\n*        DC    AL4(ZZR176I)       MESSAGE TEXT NOT IN THIS MODULE\n         DC    AL4(ZZR177I)\n         DC    AL4(ZZR178I)                                           $\n*        DC    AL4(ZZR188I)       MSG TEXT NOT IN THIS MODULE    A38720\n         EJECT\nZZRVMTXT CSECT\nTXTCSECT EQU   ZZRVMTXT\n***********************************************************************\n* MESSAGE TEXT FORMAT -\n* A 1 BYTE HEXADECIMAL CONSTANT , WHICH IS THE HEXADECIMAL            *\n* EQUIVALENT OF THE NUMBER OF BYTES  IN THE MESSAGE TEXT , IS         *\n* DEFINED                                                             *\n* FOLLOWING THE 1 BYTE HEXADECIMAL CONSTANT IS THE MESSAGE TEXT.      *\n* THE MESSAGE TEXT IS A VARIABLE LENGTH CHARACTER DEFINED FIELD       *\n* OF WHICH THE FIRST TWO BYTES ARE THE VARIABLE TO BE USED AS THE     *\n* MESSAGE NUMBER IN ZZR1  I CONSTANT FIELD\n***********************************************************************\n*                                                                     *\n* NOTE - NOT ALL MESSAGES ISSUED BY THIS UTILITY PROGRAM HAVE THEIR\n*        MESSAGE TEXT CONTAINED WITHIN THIS MODULE.  THOSE MESSAGES NOT\n* CONTAINED HEREIN ARE NOTED IN THEIR APPROPRIATE LOCATIONS WITHIN THE\n*        MESSAGES HERE.\n* MESSAGE NUMBERS CURRENTLY IN USE ARE -\n*ZZR100I THROUGH ZZR177I AND ZZR188I                             A38720\n*                                                                     *\n***********************************************************************\n* THE FOLLOWING 4 MESSAGES ARE CONTAINED WITHIN ZZRIOE MODULE -\n*ZZR100I - I/O ERROR READING MEMBER (MBRNAME)\n*ZZR101I - I/O ERROR WRITING MEMBER DATA AT TTR = (TTR) /READBACK CHECK\n*ZZR102I MEMBER (NAME) NOT COPIED DUE TO I/O ERROR\n*ZZR103I MEMBERS (MBRNAME) THROUGH END OF DATA SET ARE NOT ACCESSIBLE\n*        DUE TO I/O ERROR\nZZR104I  DC    X'1A'              MSG LENGTH\n         DC    C'04INVALID COMMAND OR KEYWORD'\nZZR105I  DC    X'11'              MSG LENGTH\n         DC    C'05PARAMETER INVALID'\nZZR106I  DC    X'13'              MSG LENGTH\n         DC    C'06UNEQUAL PARENTHESIS'\nZZR107I  DC    X'14'              MSG LENGTH\n         DC    C'07INVALID CONTINUATION'\nZZR108I  DC    X'20'              MSG LENGTH\n         DC    C'08MEMBER WITHOUT SELECT OR EXCLUDE'\nZZR109I  DC    X'37'              MSG LENGTH\n         DC    C'09NO MIXING OF SELECT AND EXCLUDE MODES IN SAME'\n         DC    C' LINK STEP'\nZZR110I  DC    X'19'              MSG LENGTH\n         DC    C'10INVALID REPLACE SPECIFIED'\nZZR111I  DC    X'0F'              MSG LENGTH\n         DC    C'11NULL PARAMETERS'\nZZR112I  DC    X'20'              MSG LENGTH\n         DC    C'12CANNOT RENAME/REPLACE ON EXCLUDE'\nZZR113I  DC    X'1B'              MSG LENGTH\n         DC    C'13OUTDD OR INDD NOT SPECIFIED'\nZZR114I  DC    X'1B'              MSG LENGTH\n         DC    C'14OUTDD/LIST NOT ON LINK CARD'\nZZR115I  DC    X'14'              MSG LENGTH\n         DC    C'15END OF FILE ON SYSIN'\nZZR116I  DC    X'3E'              MSG LENGTH\n         DC    C'16MIXING CONTROL STATEMENTS FROM OLD AND NEW '\n         DC    C'VERSION OF ZZRELINK'\nZZR117I  DC    AL1(46)            MSG LENGTH\n         DC    C'17OVERLAYS NOT SUPPORTED. XXXXXXXX NOT RE-LINKED'\nZZR118I  DC    X'17'              MSG LENGTH\n         DC    C'18CONTROL STATEMENT ERROR'\nZZR119I  DC    X'18'              MSG LENGTH\n         DC    C'19STATEMENT SEQUENCE ERROR'\nZZR120I  DC    X'19'              MSG LENGTH\n         DC    C'20         VALIDATION ERROR'\nZZR121I  DC    AL1(33)            MSG LENGTH\n         DC    C'21ERROR ATTEMPTING TO OPEN XXXXXXXX'\nZZR122I  DC    X'1A'              MSG LENGTH\n         DC    C'22DSCB COULD NOT BE OBTAINED'\nZZR123I  DC    X'18'              MSG LENGTH\n         DC    C'23DATA SET NOT PARTITIONED'\nZZR124I  DC    X'0D'              MSG LENGTH\n         DC    C'24INVALID LRECL'\nZZR125I  DC    X'11'              MSG LENGTH\n         DC    C'25INVALID BLOCKSIZE'\nZZR126I  DC    X'29'              MSG LENGTH\n         DC    C'26         REFERENCES AN UNMOVABLE DATA SET'\nZZR127I  DC    X'12'              MSG LENGTH\n         DC    C'27RECFM INCOMPATIBLE'\nZZR128I  DC    AL1(47)            MSG LENGTH\n         DC    C'28UNABLE TO GAIN ACCESS TO DIRECTORY FOR XXXXXXXX'\nZZR129I  DC    AL1(64)            MSG LENGTH\n         DC    C'29XXXXXXXX DIRECTORY ERROR. ALIAS XXXXXXXX OCCURS '\n         DC    C'MORE THAN ONCE.'\nZZR130I  DC    AL1(46)            MESSAGE LENGTH\n         DC    C'30IMPLEMENTATION RESTRICTION - ALIAS TABLE FULL.'\nZZR131I  DC    AL1(51)            MSG LENGTH\n         DC   C'31UNABLE TO DETERMINE EPA FOR XXXXXXXX. NOT RE-LINKED.'\nZZR132I  DC    AL1(40)            MSG LENGTH\n         DC    C'32I/O ERROR READING DIRECTORY FOR XXXXXXXX'\nZZR133I  DC    AL1(83)            MSG LENGTH\n         DC    C'33XXXXXXXX NOT RE-LINKED. EXISTS ON OUTPUT DATA SET '\n         DC    C'BUT REPLACE OPTION NOT SPECIFIED.'\nZZR134I  DC    X'26'              MSG LENGTH\n         DC    C'34CANNOT COMPRESS WITH SELECT OR EXCLUDE'\nZZR135I  DC    AL1(53)            MSG LENGTH\n         DC    C'35I/O ERROR ON XXXXXXXX WHILE READING CESD FOR '\n         DC    C'XXXXXXXX'\nZZR136I  DC    AL1(77)            MSG LENGTH\n         DC    C'36LOAD MODULE XXXXXXXX MARKED ''NOT EDITABLE''. '\n         DC    C'IT WAS COPIED TO OUTPUT DATA SET.'\nZZR137I  DC    X'4E'\n         DC    C'37CANNOT SPECIFY DUPLICATE MEMBERNAMES FOR SELECT/EXCLX\n               UDE/RENAME - NAME=        '\nZZR138I  DC    X'2A'              MSG LENGTH\n         DC    C'38CANNOT PROCESS ALL OLD/NEW-NAMES SPECIFIED'\n*ZZR139I - SYNADAF MESSAGE TEXT, NOT CONTAINED WITHIN THIS MODULE\nZZR140I  DC    X'29'              MSG LENGTH\n         DC    C'40         REFERENCES A NULL INPUT DATA SET'\nZZR141I  DC    X'3E'              MSG LENGTH\n         DC    C'41CANNOT RE/DE-BLOCK WITH NOTE-LIST/USER TTRN IN '\n         DC    C'MEMBER         '\nZZR142I  DC    X'1F'              MSG LENGTH\n         DC    C'42CANNOT CONTINUE TO BUILD CTLTAB'\nZZR143I  DC    X'3E'              MSG LENGTH\n         DC    C'43ALL SELECTED MEMBERS LINKED - DID NOT USE ALL '\n         DC    C'SPECIFIED INDD''S'\nZZR144I  DC    X'49'              MSG LENGTH\n         DC    C'44THERE ARE         UNUSED TRACKS IN OUTPUT DATA SET '\n         DC    C'REFERENCED BY         '\nZZR145I  DC    X'27'              MSG LENGTH\n         DC    C'45CANNOT COMPRESS TRACK OVERFLOW DATA SET'\nZZR146I  DC    X'23'              MSG LENGTH\n         DC    C'46CANNOT COMPRESS WITH RE/DE-BLOCKING'\nZZR147I  DC    X'28'              MSG LENGTH\n         DC    C'47END OF JOB - X WAS HIGHEST SEVERITY CODE'\nZZR148I  DC    X'4F'              MSG LENGTH\n         DC    C'48NO SPACE IN OUTPUT DIRECTORY FOR DIRECTORY ENTRIES'\n         DC    C' FROM INPUT DATA SET         '\nZZR149I  DC    X'3E'              MSG LENGTH\n         DC    C'49THERE ARE          UNUSED DIRECTORY BLOCKS IN '\n         DC    C'OUTPUT DIRECTORY'\nZZR150I  DC    X'56'              MSG LENGTH                     A36049\n         DC    C'50**WARNING** THE OUTPUT DS REF BY XXXXXXXX CONTAINS T*\n               OO MANY DIRECTORY BLOCKS PER TRACK'               A36049\nZZR151I  DC    X'20'              MSG LENGTH                     A36047\n         DC    C'51JOB HAS TERMINATED WITH ERROR(S)'             A36047\nZZR152I  DC    X'38'              MSG LENGTH\n         DC    C'52         COMPRESSED - WAS ALREADY IN PLACE AND NOT '\n         DC    C'MOVED'\nZZR153I  DC    X'37'              MSG LENGTH\n         DC    C'53ALL MEMBERS COMPRESSED - ALL WERE ORIGINALLY '\n         DC    C'COMPRESSED'\nZZR154I  DC    X'25'              MSG LENGTH\n         DC    C'54         HAS BEEN SUCCESSFULLY COPIED'\nZZR155I  DC    X'38'              MSG LENGTH\n         DC    C'55         HAS BEEN SUCCESSFULLY COPIED AND IS A '\n         DC    C'''NEWNAME'''\nZZR156I  DC    X'1C'              MSG LENGTH\n         DC    C'56NOT A DIRECT ACCESS DATA SET'\nZZR157I  DC    X'1F'              MSG LENGTH\n         DC    C'57XXXXXXXX DD STATEMENT NOT FOUND'\nZZR158I  DC    AL1(41)            MSG LENGTH\n         DC    C'58UNIT ALLOCATED TO XXXXXXXX NOT SUPPORTED.'\nZZR159I  DC    X'3C'              MSG LENGTH\n         DC    C'59NO MEMBERS LINKED FROM INPUT DATA SET '\n         DC    C'REFERENCED BY         '\nZZR160I  DC    X'16'              MSG LENGTH\n         DC    C'60CONCATENATED DATA SETS'\nZZR161I  DC    X'2D'              MSG LENGTH\n         DC    C'61COMPRESS TO BE DONE USING INDD NAMED         '\nZZR162I  DC    X'4A'              MSG LENGTH\n         DC    C'62INPUT DATASET FROM INDD NAMED          NOT SAME AS'\n         DC    C' OUTDD - CANNOT COMPRESS'\nZZR163I  DC    X'2F'              MSG LENGTH\n         DC    C'63NO MEMBER NAMES FOR PARTIAL LINK, '\n         DC    C'WILL NOT LINK'\nZZR164I  DC    X'12'              MSG LENGTH\n         DC    C'64TOTAL LINK ASSUMED'\nZZR165I  DC    X'49'              MSG LENGTH\n         DC    C'65         ''FOUND'' BUT NOT LINKED, DUE TO I/O ERROR X\n               READING INPUT DIRECTORY'\nZZR166I  DC    X'34'              MSG LENGTH\n         DC    C'66NO MEMBERS LINKED TO DATA SET REFERENCED BY '\n         DC    C'        '\nZZR167I  DC    X'47'              MSG LENGTH\n         DC    C'67FOLLOWING MEMBER(S) LINKED FROM INPUT DATA SET REFERX\n               ENCED BY          -'\nZZR168I  DC    X'5C'              MSG LENGTH\n         DC    C'68**WARNING** DUE TO ERROR, POSSIBLE LOSS OF '\n         DC    C'ACCESS TO MEMBER DATA AND/OR INCOMPLETE DIRECTORY'\nZZR169I  DC    X'4A'              MSG LENGTH\n         DC    C'69**WARNING** DUE TO I/O ERROR ON SYSUT4, OUTPUT '\n         DC    C'DIRECTORY MAY BE INCOMPLETE'\nZZR170I  DC    X'5D'              MSG LENGTH\n         DC    C'70**WARNING** DUE TO SYSUT3 I/O ERROR, COMPRESS-IN-PLAX\n               CE NOT DONE AND LINK OPERATION TERMINATED'\n* THE FOLLOWING MESSAGE IS CONTAINED WITHIN ZZRIOE MODULE -\n*ZZR171I **WARNING** DIRECTORY MAY NOT REFLECT VALID LOCATION OF MEM-\n*        BER DATA\nZZR172I  WTO   'ZZR172I          COULD NOT BE OPENED',MF=L\n*ZZR173I - MESSAGE TEXT FOR THIS MSG IS IN ZZRDV1 MODULE\n* THE FOLLOWING 3 MESSAGES ARE CONTAINED WITHIN THE ZZRWSU MODULE -\n*ZZR174I ** WARNING ** INPUT RECORD IS A SHORT LENGTH RECORD     A38720\n*        -DDNAME=          -OUTPUT TTRN=                         A38720\n*ZZR175I ** WARNING ** INPUT RECORD IS GREATER THAN OUTPUT       A38720\n*        BLKSIZE  -DDNAME=          -OUTPUT TTRN=                A38720\n*ZZR176I MEMBER        IN DATASET REFERENCED BY        HAS MORE  A38720\n*        THAN ONE NOTELIST POINTER                               A38720\nZZR177I  DC    X'39'              MSG LENGTH\n         DC    C'77         WAS SELECTED BUT NOT FOUND IN ANY INPUT DATX\n               A SET'\nZZR178I  DC    AL1(77)            MSG LENGTH                          $\n         DC    C'78LOAD MODULE XXXXXXXX MARKED ''PAGE ALIGNED''. '    $\n         DC    C'IT WAS COPIED TO OUTPUT DATA SET.'                   $\n* THE FOLLOWING MESSAGE IS CONTAINED WITHIN MODULE ZZRWSU -      A38720\n*ZZR188I MEMBER        IN DATASET REFERENCED BY        HAS       A38720\n*        RECORDS GREATER THAN BLKSIZE                            A38720\n         DS    0D\n         EJECT\nZZRELCOM   DSECT\n         ZZRELCOM\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZRELASM": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x06O\\x00\\x99\\x06\\x7f\\x132\\x003\\x00\"\\x00$\\xc3\\xc1\\xd1\\xf7\\xf0\\xf8\\xf3@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-03-05T00:00:00", "modifydate": "1999-03-08T13:32:00", "lines": 51, "newlines": 34, "modlines": 36, "user": "CAJ7083"}, "text": "//CAJ7083D JOB (UMVESWSP,CAJ7083),'JOHNSTON',\n//         CLASS=A,MSGCLASS=X,NOTIFY=CAJ7083\n//ASMSUBRS PROC MEMBER=TEMPNAME\n//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=UMV42.CAJ7083.SGSOURCE\n//SYSLIN   DD  DSN=&&OBJECT(&MEMBER),\n//             SPACE=(3040,(200,40,2)),\n//             UNIT=VIO,DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FB)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DISP=SHR,DSN=UMV42.CAJ7083.SGSOURCE(&MEMBER)\n//LKED     EXEC PGM=IEWL,\n//             PARM=(XREF,LIST,LET)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJECT(&MEMBER),DISP=(OLD,PASS)\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//SYSLMOD  DD  DSN=&&SUBRS(&MEMBER),DISP=(MOD,PASS),\n//             DCB=(RECFM=U,BLKSIZE=23200),\n//             SPACE=(CYL,(2,,2)),UNIT=SYSDA\n//         PEND\n//STEP1    EXEC ASMSUBRS,MEMBER=ZZMESAGE\n//STEP2    EXEC ASMSUBRS,MEMBER=ZZRESCAN\n//STEP3    EXEC ASMSUBRS,MEMBER=ZZROVBLD\n//STEP4    EXEC ASMSUBRS,MEMBER=ZZROVCRD\n//ASMZZREL EXEC PGM=ASMA90,PARM='OBJECT,NODECK',REGION=1000K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=UMV42.CAJ7083.SGSOURCE\n//SYSLIN   DD  DSN=&&ZZRLOBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSIN    DD  DISP=SHR,DSN=UMV42.CAJ7083.SGSOURCE(ZZRELINK)\n//LKED     EXEC PGM=IEWL,\n//             PARM=(XREF,LIST,LET,'AC=1')\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&&SUBRS,DISP=(OLD,DELETE)\n//SYSLIN   DD  DSN=&&ZZRLOBJ,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(200,20))\n//*YSLMOD  DD  DSN=&&LOADSET(ZZRELINK),DISP=(,PASS),\n//*            DCB=(RECFM=U,BLKSIZE=23200),\n//*            SPACE=(CYL,(1,,1)),UNIT=SYSDA\n//SYSLMOD  DD  DISP=SHR,DSN=UMV42.CAJ7083.LOAD(ZZRELINK)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZRELCOM": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x961\\x8f\\x00\\x97(o\\x10V\\x01\\xce\\x01\\xcb\\x00\\x04\\xd8\\xe3\\xc2\\xf2\\xc3\\xf0\\xf4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1996-11-13T00:00:00", "modifydate": "1997-10-13T10:56:00", "lines": 462, "newlines": 459, "modlines": 4, "user": "QTB2C04"}, "text": "         MACRO\n&NAME    ZZRELCOM\n         TITLE 'Z Z R E L C O M  -  ZZRELINK COMMUNICATIONS AREA'\n**********       C O M M U N I C A T I O N    A R E A        **********\n**********               Z Z R E L I N K                     **********\n*\n* THE FOLLOWING DESCRIPTION IS FOR ZZRELINK.\n* IT IS BASICALLY THE SAME FOR THE IEBCOPY PROCEDURE EXCEPT THAT\n* IT DOES NOT GO THROUGH ALL THE SORTING STEPS. IT ALSO DOES NOT BUILD\n* MULTIPLE DD TABLES AND IT DOES NOT ALLOW FOR RENAMES.\n*\n         SPACE 2\n         SPACE 2\n* ABBREVIATIONS USED FREQUENTLY -\n*        ODE = OUTPUT DIRECTORY ENTRY\n*        IDE = INPUT DIRECTORY ENTRY\n         SPACE 2\n*\n* SETAB = SELECT/EXCLUDE TABLE\n*        THE SETAB CONSISTS OF 10-BYTE ENTRIES.  ENTRIES ARE MADE TO\n*        THIS TABLE WHEN -\n*              1) A SELECTIVE LINK HAS BEEN SPECIFIED.  EACH ENTRY IS\n*              FOR THE NAME OF A MEMBER TO BE SELECTED.  IF A MEMBER IS\n*              TO BE RENAMED, TWO 10-BYTE ENTRIES ARE MADE IN THE SETAB\n*              2) AN EXCLUSIVE LINK HAS BEEN SPECIFIED.  EACH ENTRY IS\n*              FOR THE NAME OF A MEMBER TO BE EXCLUDED.\n*        NOTE- IN THE CASE OF A SELECTIVE LINK (AND ONLY IN THIS CASE),\n*              THE SETAB WILL ALSO BE USED AS THE CTLTAB.  IN ALL OTHER\n*              CASES, A SEPARATE CTLTAB WILL BE CONSTRUCTED.\n*        BYTE 0 OF AN ENTRY IS DESIGNATED AS SEFLAG1.  WITHIN THIS BYTE\n*        THE FOLLOWING BITS HAVE MEANING -\nSEBIT1   EQU   X'80' ON=THIS IS A NEWNAME ENTRY\nSEBIT2   EQU   X'40' ON=THIS IS A RENAMED ENTRY\nSEBIT3   EQU   X'20' ON=REPLACE OPTION WAS SPECIFIED FOR THIS MEMBER\nSEBIT4   EQU   X'10' ON=DONTLINK FLAG...DO NOT PROCESS THIS ENTRY\nSEBIT5   EQU   X'08' ON= THIS MEMBER HAS BEEN ''FOUND'' ON INPUT D.S.\nSEBIT6   EQU   X'04' ON= THIS IS LAST ENTRY IN SETAB/CTLTAB\n*        LO ORDER 2 BITS NOT USED\n*        NOTE THE DEFINITION OF SEBIT3.  IF, IN THE INDD TABLE, BYTE 0\n*              BIT 2 IS ON, THIS MEANS THAT THE REPLACE OPTION WAS SPE-\n*              CIFIED FOR ALL MEMBERS COPIED FROM THIS INDD.  IT IS\n*              VALID FOR BOTH OF THESE BITS TO BE ON AT THE SAME TIME,\n*              ALTHOUGH IF THE BIT IS ON IN THE INDD TABLE, IT IS UN-\n*              NECESSARY FOR SEBIT3 TO ALSO BE ON IN THE SETAB.\n         EJECT\n* FOLLOWING IS A DESCRIPTION OF THE CONTROL TABLE -CTLTAB-\n* (REMEMBER THAT THIS TABLE IS PHYSICALLY THE SAME TABLE AS SETAB WHEN\n* A SELECTIVE LINK OPERATION IS SPECIFIED, BUT IS PHYSICALLY INDEPEN-\n* DENT AND DISTINCT FROM THE SETAB FOR AN EXCLUSIVE LINK OPERATION.\n* THERE IS NO SETAB FOR A FULL LINK OPERATION, AND THE CTLTAB IN THIS\n* CASE IS CONSTRUCTED SIMILARLY TO WHEN AN EXCLUSIVE LINK IS SPECIFIED.\n* SINCE THE SETAB AND CTLTAB ARE ONE AND THE SAME FOR A SEL. LINK, THIS\n*  DESCRIPTION WILL ASSUME THAT A SELECTIVE LINK IS BEING DONE, FOR THE\n*  PURPOSE OF SETTING UP THE TABLE INITIALLY.)....\n         SPACE 2\n*        INITIAL TABLE, FOLLOWING CCSCAN PROCESSING OF ''SELECT'' -\n***********************************************************************\n*SEFLAG1 *SEFLAG2 * NAME OF MEMBER TO BE SELECTED, OR, IF SPECIFIED,  *\n*(DESCR. *(UNUSED)* NEWNAME.  IF NEWNAME WAS SPECIFIED, THE TABLE WILL*\n* ABOVE) *        * CONTAIN 1 ENTRY FOR OLDNAME AND ANOTHER FOR NEW.  *\n***********************************************************************\n* 1 BYTE * 1 BYTE *----------------------8 BYTES----------------------*\n         SPACE 2\n* OLDNAME/NEWNAME PAIRS ARE NOW EXTRACTED FROM THE SETAB.  THEN THE\n* CTLTAB IS SORTED ALPH. BY MBRNAME, AND A NEWNAME PTRTABLE SET UP.\n* WHEN THIS HAS BEEN DONE, THE INPUT DATA SET'S DIRECTORY IS SEARCHED\n* FOR MATCHING NAMES (THE NEWNAME ENTRIES IN THE TABLE ARE NOT USED FOR\n* THIS COMPARISON).  WHEN A MATCHING MEMBERNAME IS FOUND, THE DIRECTORY\n* ENTRY IS RETAINED IN CORE (IF SPACE PERMITS), OR IT IS SPILLED ONTO\n* SYSUT3.  IN EITHER CASE, THE CORE ADDRESS OR THE TTR+INDICATOR ARE\n* PUT INTO THE CTLTAB, OVERLAYING THE HIGH-ORDER 4 BYTES OF 'OLDNAME'.\n* THE MEMBER-TTR IS EXTRACTED FROM THE DIRECTORY ENTRY, AND OVERLAYS\n* THE LOW-ORDER 4 BYTES OF 'OLDNAME' IN THE CTLTAB.  SEBIT5 IS TURNED\n* ON.  IF THIS IS AN ALIAS ENTRY, SEFLAG2 IS SET AS FOLLOWS -\nALIAS    EQU   X'80'         TO TEST FOR AND SET ALIAS DIRECTORY ENTRY\n         SPACE 2\n*        CTLTAB ENTRY FOR A ''FOUND'' MEMBER -\n         SPACE 2\n***********************************************************************\n*SEFLAG1 *SEFLAG2 * INDIC. * ADDR OF THE IN-* ZEROES *   MEMBER TTR   *\n*        *        *  BYTE  * PUT DIR. ENTRY *        *                *\n***********************************************************************\n*-1 BYTE-*-1 BYTE-*-1 BYTE-*-----3 BYTES----*-1 BYTE-*-----3 BYTES----*\n         SPACE 2\n* THE INDICATOR BYTE IS ZEROES IF THE DIRECTORY ENTRY IS IN CORE, OR IT\n* IS HEX '01' IF THE DIRECTORY ENTRY WAS SPILLED TO SYSUT3.\n* NOTE THAT CTLTAB ENTRIES FOR A ''NEWNAME'' ARE NOT OVERLAYED OR AL-\n* TERED AT ANY TIME.  ONCE THE ENTIRE INPUT DIRECTORY HAS BEEN SCANNED,\n* (OR AT LEAST ALL ENTRIES FOR MEMBERS TO BE COPIED FROM THIS INPUT\n* DATA SET HAVE BEEN BUILT), THE OUTPUT DATA SET DIRECTORY IS READ.\n* MEMBERNAMES OF MEMBERS CURRENTLY IN THE OUTPUT DATA SET ARE COMPARED\n* AGAINST MEMBERNAMES OF MEMBERS REFERENCED IN THE CTLTAB FOR THE CUR-\n* RENT INPUT DATA SET, UNLESS THE LATTER WERE RENAMED.  IF THE INPUT\n* MEMBER IS RENAMED, THEN THE NEWNAME IS COMPARED AGAINST THE OUTPUT.\n* IF DUPLICATE NAMES ARE ENCOUNTERED, AND IF THE REPLACE OPTION WAS NOT\n* SPECIFIED ON EITHER THE INDD LEVEL OR THE MEMBERNAME LEVEL, THEN THE\n* DONT-LINK BIT (SEBIT4) IS SET IN THE FLAG BYTE OF THE APPROPRIATE\n* CTLTAB ENTRY, AND THE INDIC. BYTE (BYTE 3) OF THIS ENTRY IS SET TO\n* HEX 'FF'.\n* THINK OF THE LOW-ORDER 8-BYTES OF EACH ''FOUND'' CTLTAB ENTRY AS BE-\n* ING DIVIDED INTO A LEFT HALF (INDIC. + DIR. ENTRY ADDR.) AND A RIGHT\n* HALF (ZEROES + MBR. TTR).  THE LEFT HALF NOW REPRESENTS DIRECTORY\n* ENTRIES FOUND IN THE CURRENT INPUT DATA SET, AND IS IN ALPHAMERIC\n* SEQUENCE.\n         EJECT\n* THE NEXT STEP IN CTLTAB PROCESSING CAUSES THE ''FOUND'' ENTRIES TO BE\n* MANIPULATED, WITH THE RESULT BEING THAT THE LEFT HALF CONTAINS (IN-\n* DIC + ADDR OF DIR. ENTRY) IN SEQUENCE BY MEMBER TTR, AND THE RIGHT\n* HALF CONTAINS THIS SAME INFORMATION (INDIC. + ADDR OF DIR. ENTRY) IN\n* ALPHAMERIC SEQUENCE, OVERLAYING THE ACTUAL MEMBER TTR.  ANOTHER RE-\n* SULT OF THIS MANIPULATION OF THE CTLTAB IS THAT MAIN-MEMBER ENTRIES\n* PRECEDE THE CORRESPONDING ALIAS ENTRIES.  NOTE THAT THE BITS SET IN\n* SEFLAG1 ARE NOW ONLY USEFUL FOR THE ''RIGHT HALF'' OF THE CTLTAB,\n* SINCE THEY ARE NOT MANIPULATED AND THUS REMAIN IN THE ORIGINAL (AL-\n* PHABETIC) SEQUENCE.\n         SPACE 2\n*        CTLTAB ENTRY FOR A FOUND MEMBER FOLLOWING TTR SORT -\n         SPACE 2\n***********************************************************************\n*SEFLAG1 *SEFLAG2 * INDIC. * ADDR OF IN. DE * INDIC. * ADDR OF IN. DE *\n*        *        *  BYTE  *                *  BYTE  *                *\n*        *        *IN SEQ BY MEMBER TTR     *IN SEQ ALPHAMERICALLY    *\n***********************************************************************\n* 1 BYTE-*-1 BYTE-*-1 BYTE-*-----3 BYTES----*-1 BYTE-*-----3 BYTES----*\n         SPACE 2\n* AT THIS POINT, THERE IS NO LOGICAL RELATIONSHIP BETWEEN THE LEFT AND\n* RIGHT HALVES OF THE RELEVANT CTLTAB ENTRIES.  BOTH HALVES CONTAIN THE\n* SAME INFORMATION, BUT IT IS IN TWO DIFFERENT SEQUENCES.  NOTE THAT,\n* IF A MEMBER BEING LOOKED FOR IS NOT ''FOUND'', ITS CTLTAB ENTRY RE-\n* MAINS UNALTERED - THE NAME IS STILL UN-OVERLAYED.\n* FROM THIS POINT ON, THOSE MEMBERS OF THE INPUT DATA SET WHOSE DIREC-\n* TORY ENTRIES ARE REFERENCED IN THE CTLTAB WILL BE COPIED, PROVIDED\n* THAT THEY ARE ''FOUND'' AND NOT FLAGGED AS ''DONT-LINK''.  THEN THE\n* DIRECTORY ENTRIES WILL BE MERGED.  AS THE MERGE IS PERFORMED, WHEN AN\n* INPUT DE IS MERGED, IF THIS IS A SELECTIVE LINK, THE DONT-LINK BIT\n* (SEBIT4) IS TURNED ON, THUS ALLOWING FOR THESE ENTRIES IN THE CTLTAB\n* TO BE IGNORED IN SUBSEQUENT PASSES THROUGH THE SAME TABLE FOR THE EN-\n* SUING INPUT DATA SETS.\nJSTCPD   EQU   X'10'              IF ON IN THE 2ND BYTE OF A CTLTAB EN-\n*                                 TRY (SEFLAG2), THERE IS A NAME (CON-\n*                                 TAINED IN THE 3RD THROUGH 10TH BYTES\n*                                 OF THIS ENTRY) OF AN INPUT MEMBER\n*                                 WHICH HAS BEEN SUCCESSFULLY COPIED.\n*                                 THIS MEMBERNAME WILL BE PRINTED BY\n*                                 THE TERMINATION MODULE (ZZRVTM) UNDER\n*                                 APPROPRIATE CONDITIONS, AT WHICH TIME\n*                                 THIS BIT WILL BE TURNED OFF.\n***********************************************************************\n         TITLE 'Z Z R E L I N K  -  CONTROL, DDNAME, AND SELECT TABLES'\n*XXXXXXXXXX    EVERY CONSTANT BETW. HERE AND NXT X'S MUST BE CONTIGUOUS\n* ALL CONSTANTS BETWEEN X'S ARE SET TO ZERO FOR EVERY INPUT DATA SET.\n* THE NAMES OF THE CONSTANTS WHICH ARE INCLUDED IN THIS CONTIG. AREA -\n* CDCT, FCT, NNTCT, OLDTTR, FLG5\n* ICPT,SVLSTO,SVFSTO,FLG2,FLG6,SWITCH1,UTTRFLAG,OBCT\n         SPACE 2\n***********************************************************************\nINBEGIN  DC    F'0'          ADDRESS OF START OF INDD TABLE\nREPLACOP EQU   SEBIT3        IF ON IN HI-ORDER BYTE OF AN INDD-TABLE\n*                            ENTRY, THE REPLACE OPTION WAS SPECIFIED\n*                            FOR THIS INPUT DATA SET.\nSEBEGIN  DC    AL4(0)        ADDR OF BEGINNING OF SETAB\nSESTOP   DC    F'0'          IF SELECTIVE OR EXCLUSIVE LINK, THIS IS\n*                            THE ADDRESS (+1) OF THE END OF THE SETAB.\n*                            IF FULL LINK, ADDR (+1) OF END OF INDDTAB.\nADNNPTRT DS    AL4           ADDR OF NEWNAME POINTER TABLE\nCTAD     DS    AL4           ADDR OF CONTROL TABLE - IF SELECTIVE LINK,\n*                            THIS WILL BE SAME AS SEBEGIN.\nENCT     DC    HL2'0'        COUNT OF NBR OF ENTRIES IN CTLTAB (TOTAL)\n*              IF THIS IS A SELECTIVE LINK, THIS COUNT WILL BE INI-\n*              TIALIZED TO THE NUMBER OF ENTRIES IN SETAB.\nCOUNT    DC    HL2'0'        COUNT OF NBR OF ENTRIES IN SETAB IF SEL OR\n*                            EXCL LINK, OR ZERO IF FULL LINK.\nINDDCT   DC    AL2(0)        COUNT OF NO. INDD'S IN CURRENT STEP\nNNCT1    DC    AL2(0)        NBR OF NEWNAMES SPECIFIED IN CURRENT SE-\n*                            LECTIVE LINK STEP (IF NOT SEL CPY, = 0)\n         DS    0D\nOUTNAME  DC    CL8' '        NAME OF CURRENT OUTPUT DD\n         SPACE 2\nCCIMAGE  DS    10D                     SCAN CONTROL CARD BUFFER\n         SPACE 2\nWKA1     DC    10F'0'        VOLATILE WORK AREA FOR GENERAL USE\n*\n*****   PLEASE NOTE---    ZZRESCAN IS NOT THE ONLY MODULE WHICH USES\n**                WKA1 FOR TEMPORARY WORK SPACE.\n*                 HOWEVER, THE FOLLOWING 4 EQUATES ARE USED ONLY BY\n*                 ZZRESCAN -\n*\nSARG     EQU   WKA1          TEMPORARY WORK AREA USED BY ZZRESCAN\n*                            TO HOLD SEARCH ARGUMENT 8 BYTES LONG\nSAVEPAPR EQU   WKA1+8        TEMPORARY WORK AREA USED BY ZZRESCAN\n*                            TO HOLD PARTIAL PARAMETERS IF CONTROL CARD\n*                            IS CONTINUED, 8 BYTES LONG.\nLEFTPCNT EQU   WKA1+16       TEMPORARY WORK AREA USED BY ZZRESCAN\n*                            TO HOLD COUNT OF LEFT PARENTHESIS SCANNED.\nRGHTPCNT EQU   WKA1+18       TEMPORARY WORK AREA USED BY ZZRESCAN\n*                            TO HOLD COUNT OF RIGHT PARENTHESIS SCANNED\n*                            BOTH LEFTPCNT AND RGHTPCNT 2 BYTES EACH\n*                            AND MUST BE CONTIGUOUS STORAGE.\nCSTOREG  DC    3F'0'         SAVE AREA USED BY ZZRESCAN\n         SPACE 2\n*        REGISTER SAVE AREAS\nSV1      DC    18F'0'        REGISTER SAVE AREA FOR MAINFLOW\nSV2      DC    18F'0'        REGISTER SAVE AREA FOR NON-RESIDENT RTNES\nMCAMOD   DC    10F'0'             ZZRELCOM CHANGE AREA\n* MCAMOD IS A PATCH-AREA FOR USE IN MAINTENANCE OF THIS PROGRAM\n         TITLE 'POINTERS FOR INTER-MODULE COMMUNICATION'\nVZZRSCN  DC    V(ZZRESCAN)         ADDR OF CONTROL CARD SCAN ROUTINE\nVZZRLEOF DC    V(ZZRLEOF) EP ADDRESS OF SYSIN EODAD EXIT IN ZZRESCAN\nVZZRLMES DC    V(ZZMESAGE)         ADDRESS OF MESSAGE WRITER ROUTINE\nVZZRTERM DC    V(ZZRTERM)         ADDRESS OF TERMINATION ROUTINE\n         ORG   VZZRTERM\nAZZRTERM DS    F                  ADDRESS OF TERMINATION ROUTINE\n         TITLE 'S Y S I N    D A T A    C O N T R O L    B L O C K'\n*CARDCB  DCB   DDNAME=SYSIN,RECFM=FB,LRECL=80,EODAD=VZZRLEOF,\n*              MACRF=(GM),DSORG=PS\nCARDCB   DCB   DDNAME=SYSIN,RECFM=FB,LRECL=80,EODAD=VZZRLEOF,          X\n               MACRF=(GM),DSORG=PS\n         TITLE 'S Y S P R I N T    D A T A    C O N T R O L    B L O C X\n               K'\n* PRTDCB DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),RECFM=FBA,\n*              LRECL=121,BLKSIZE=121\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),RECFM=FBA,          X\n               LRECL=121,BLKSIZE=121\n         TITLE 'SWITCH AND WORK AREA DEFINITIONS FOR ZZRESCAN'\n* THE FOLLOWING SWITCHES (PARMSWCH, CCSWITCH, COMDCDSW, CPARAMSW, CCDE-\n* LIM, CCDELIM2) ARE PRIMARILY BUT NOT SOLELY USED BY ZZRESCAN -\n*\n         SPACE 1\nPARMSWCH DC    XL1'0'    SCAN INTERNAL INDD AND MEMBER SWITCHES\nSCANNAME EQU   X'80'         SCANNING NAME\nSET4REPL EQU   X'40'         MULTIPLE ( EXPECT REPLACE\nONELEFT  EQU   X'20'         FIRST LEFT PARENTHESIS\nLINKNOW  EQU   X'10'         NOW SCANNING LINK CARD\nSTOPSCAN EQU   X'08'         BLANK ENCOUNTERED\nFLUSHSW  EQU   X'04'                   FLUSH TO NEXT LINK RE/SET ALONE\nHASNEWNM EQU   X'02'         HAVE A NEW NAME WITH MEMBER\nCOMDPART EQU   X'01'         PARTIAL COMMAND- CONTINUED ON NEXT CARD\n*\n         SPACE 1\nCCSWITCH DC    XL1'0'                  CONTROL CARD SWITCHES- EXTERNAL\nCARDPRTD EQU   X'80'         ON = CONTROL STATEMENT HAS BEEN PRINTED\nSYSINEOF EQU   X'40'         END OF FILE ON SYSIN\nUNECPARN EQU   X'20'         INDD/MEMBER NAMES IMBEDDED IN PARENTHESIS\nZZRLINKC EQU   X'10'         ZZRLINK CONTROL CARDS\nCOMDNOW  EQU   X'08'         COMMAND WORD\nLASTPARM EQU   X'04'         LAST PARAMETER- BYPASS SWITCH\nMULTSE   EQU   X'02' MULTIPLE SELECT/EXCLUDE STATEMENTS\nFIRSTSCN EQU   X'01' ON=ZZRESCAN HAS BEEN CALLED FOR THE FIRST TIME\n*\n         SPACE 2\nCOMDCDSW DC    XL1'0'           SOME EXTERNAL SWITCHES\nLINKDONE EQU   X'80'         LINK COMMAND SCANNED ALL OK\nSELECTSC EQU   X'40'         SELECT COMMAND SCANNED\nEXCLUDES EQU   X'20'         EXCLUDE COMMAND SCANNED\nNEWOUT   EQU   X'10'         OUTDD KEYWORD PRESENT\nNEWINDD  EQU   X'08'         INDD KEYWORD PRESENT\nLISTSW   EQU   X'04'         DO NOT LIST MEMBERS COPIED (LIST=NO)\nCOMPRESS EQU   X'02'                   COMPRESS LINK DATA SET\nMEMBRCD1 EQU   X'01'         MEMBER STATEMENT\n*\n         SPACE 2\nCPARAMSW DC    XL1'0'       INTERNAL SCAN SWITCHES\nDELIMEND EQU   X'80'         DELIMITER IN COLUMN 71\nCONTINY  EQU   X'40'         CONTINUATION\nPARMCOME EQU   X'20'         PARAMETER FOLLOWS\nPARTPARM EQU   X'10'         PARTIAL PARAMETER\nREAD1    EQU   X'08'         READ ANOTHER CONTROL STATEMENT\nCOMDPARM EQU   X'04'         COMMAND FOLLOWED BY PARAMETER\nCOL72BLK EQU   X'02'         COLUMN 72 NOT BLANK\nPARMZERO EQU   X'01'         PARAMETER LENGTH ZERO\n*\n         SPACE 2                                                 A48742\nSCANSWCH DC    XL1'0'        INTERNAL SCAN SWITCHES              A48742\nNOCMMEXP EQU   X'80'         DON'T SCAN COMMAND ON CONTIN CARDS  A48742\n*              LOW ORDER 7 BITS NOT USED - RESERVED              A48742\n*\n         SPACE 2\nCCDELIM  DC    XL1'0'        INTERNAL SCAN SWITCHES\nEQUALSGN EQU   X'80'         EQUAL SIGN\nCOMMASGN EQU   X'40'         COMMA\nLEFTPRSG EQU   X'20'         LEFT PARENTHESIS\nRIGHTPRS EQU   X'10'         RIGHT PARENTHESIS\nBLANKSGN EQU   X'08'         BLANK\nLASTCOMA EQU   X'04'         LAST DELIMITER A COMMA- READ A CARD\nBADBLOCK EQU   X'02' VALIDATE-ZZRDV0 SETS IF SYSIN/SYSPRINT BLOCKSIZE\n*          IS BAD.\n*              LO ORDER BIT NOT USED\n*\n         SPACE 2\nCCDELIM2 DC    XL1'0'  USED TO SAVE SETTINGS OF CCDELIM ON CONTINUATION\n*\n         TITLE 'ERROR FLAG DEFINITIONS USED BY OPEN FAILURE ROUTINE'\nIOEF2    DC    X'00'              FLAGS DESCRIBING NATURE/TYPE OF I/O\n*                                 ERROR\nERF9     EQU   X'80'         ON = 'HARD' ERROR WRITING MERGED OUTPUT\n*                                 DIRECTORY TO SYSUT4\nERF10    EQU   X'40'         ON = ERROR READING FROM SYSUT4.  IF 'ERF4'\n*                                 OFF, ERROR OCCURRED DURING MERGE\n*                                 PHASE OF PROGRAM - IF 'ERF4' ON, SEE\n*                                 DESCRIPTION OF 'ERF4'.\nNOSYSIN  EQU   X'20'         ON = SYSIN COULD NOT BE OPENED OR WAS IN-\n*                                 VALID, OR BECAME UNUSABLE DUE TO AN\n*                                 I/O ERROR\nSPRNOPN  EQU   X'10'         SYSPRINT COULD NOT BE OPENED, WAS INVALID-\n*                                 LY SPECIFIED, OR AN I/O ERROR OCCUR-\n*                                 RED MAKING SYSPRINT UNAVAILABLE\n*              LOW ORDER 4 BITS NOT USED - RESERVED\n*\n         TITLE 'SWITCH AND WORK AREA DEFINITIONS FOR ZZMESAGE'\n         DS    0H\nMSGLIST  DC    4H'0'              AREA FOR PARAMETRIC INPUT TO ZZMESAGE\nMSG1     EQU   MSGLIST\nMSG2     EQU   MSG1+2\nMSG3     EQU   MSG2+2\nMSG4     EQU   MSG3+2\n* THE FOLLOWING BITS WILL BE SET ON BY THE CALLER OF ZZMESAGE (MESSAGE\n* WRITING ROUTINE) IN THE HIGH ORDER BYTE OF EACH APPROPRIATE HALFWORD\n* IN THE MSGLIST PARAMETER(S) BEING USED -\nLASTMSG  EQU   X'80'         ON = LAST PARAMETER IN MSGLIST\nCTLCD    EQU   X'40'         ON = A CONTROL CARD IS TO BE PRINTED\nIOERF    EQU   X'20'         ON = A MESSAGE IS IN THE MESSAGE BUFFER -\n*                                 AND IS TO BE PRINTED.  NO MSG CODE IS\n*                                 ASSOCIATED WITH THIS MESSAGE, AND IT\n*                            USUALLY WILL BE A SYNADAF MESSAGE.\nRCODE    EQU   X'10'         ON = PUT RETURN CODE INTO THIS MSG TEXT\nPBIT     EQU   X'08'         ON = USE PARAM LIST WITH THIS MSG TEXT\n*              LO ORDER 3 BITS NOT USED - RESERVED\n         SPACE 2\nMSGPARAM DS    9H                 THIS FIELD IS TO CONTAIN PARAMETERS\n*                                 TO BE PLACED IN MESSAGES\n         ORG   MSGPARAM\nNAMEDISP DC    X'00'              THE DISPLACEMENT OF A NAME\n*                                 PARAMETER FROM THE BEGINNING OF\n*                                 THE MESSAGE IT IS TO BE PLACED IN\n*                                 THIS BYTE\nNODISP   DC    X'00'              THE DISPLACEMENT OF A NUMBER\n*                                 PARAMETER FROM THE BEGINNING OF\n*                                 THE MESSAGE IT IS TO BE PLACED IN\n*                                 THIS BYTE\nDDNMDISP DC    X'00'              DISPLACEMENT OF DDNAME FROM MSG START\n         DS    0D\nNAMEFLD  DC    CL8' '        AREA CONTAINING NAME TO BE PUT INTO MSG\nDDNMFLD  DC    CL8' '        AREA CONTAINING DDNAME TO INSERT IN MSG\nDDVALNM  EQU   NAMEFLD       USED BY VALIDATE TO SAVE DD NAME\nPARAMS   DC    X'00'\nNAME     EQU   X'80'         ON = THERE IS A NAME PARAMETER\nNBR      EQU   X'40'         ON = THERE IS A NUMBER PARAMETER\nDDNM     EQU   X'20'         ON = THERE IS A DDNAME PARAMETER\nNOFLD    DC    CL7'0'        AREA CONTAINING NUMBER TO BE PUT INTO MSG\n         TITLE 'MESSAGE CODE DEFINITIONS USED BY ALL ZZRELINK MODULES'\n***********************************************************************\n*        THE FOLLOWING MESSAGE CODES ARE USED BY ZZRELINK, ZZRESCAN,  *\n*    AND ZZMESAGE TO IDENTIFY AND PRODUCE ALL ZZRELINK MESSAGES.      *\n***********************************************************************\nINALCNTR EQU     01                INVALID COMMAND OR KEYWORD\nINVALSPR EQU     02                INVALID PARAMETER\nONEQPARN EQU     03                UNEQUAL PARENTHESIS\nINVALCON EQU     04                INVALID CONTINUATION\nMEMNOSE  EQU     05                MEMBER WITHOUT SELECT/EXCLUDE\nMULTSSEE EQU     06                ONLY ONE SELECT/EXCLUDE PER INDD\nINVALREP EQU     07                INVALID REPLACE SPECIFIED\nNULLPARM EQU     08                NULL PARAMETERS\nNORREN   EQU     09                CANNOT RENAME/REPLACE ON EXCLUDE\nNOINDD   EQU     10                OUTDD OR INDD NOT SPECIFIED\nINVALIST EQU   11                  OUTDD/LIST NOT ON LINK STATEMENT\nENDMESS  EQU   12                  END OF CONTROL CARDS\nMODEERR  EQU   13                  MIXING ZZRLINKAND ZZRDSCPY MODE\nNOOVLYS  EQU   14                  WARNING - OVERLAYS NOT SUPPORTED\nSCANMSG  EQU   15                  CONTROL STATEMENT ERROR\nSEQERROR EQU   16                  STATEMENT SEQUENCE ERROR\nGENERUAL EQU   17                  GENERAL VALIDATION MESSAGE\nOPENERRX EQU   18                  OPEN ERROR MESSAGE\nOBTAINER EQU   19                  OBTAIN ERROR\nNOTPDSER EQU   20                  OBTAIN NOT PDS\nINVALREC EQU   21                  INVALID LRECL\nINVALBLK EQU   22                  INVALID BLOCKSIZE\nUNMOVEDS EQU   23                  DATA SET UNMOVABLE\nRECFMINC EQU   24                  RECFM INCOMPATIBLE\nNODIR    EQU   25                  UNABLE TO OPEN DIRECTORY DCB\nDIRERR01 EQU   26                  ALIAS NAME X OCCURS MORE THAN ONCE\nATABFULL EQU   27                  ALIAS TABLE FULL\nEPAERR01 EQU   28                  UNABLE TO LOCATE EPA OF MODULE X\nDIRERR02 EQU   29                  I/O ERROR READING DIRECTORY FOR X\nREPERR01 EQU   30                  MEMBER X NOT RELINKED - NO REP OPT\nM39      EQU   31                  CANNOT COMPRESS WITH SELECT OR\n*                                  EXLCUDE\nCESDIOER EQU   32                  I/O ERROR READING CESD RECORDS\nNE       EQU   33                  LOAD MODULE IS 'NOT EDITABLE'\n*                                  BUFFERS FOR COMPRESS\nM42      EQU   34 CANNOT SPECIFY DUPLICATE NAME FOR SEL/EXCL/RENAME\nM43      EQU   35                  CANNOT PROCESS ALL OLD/NEW NAMES\n*                                  SPECIFIED\nM45      EQU   36                  (DATA SET NAME) REFERENCES A NULL\n*                                  INPUT DATA SET\nM46      EQU   37                  CANNOT RE/DE BLOCK WITH\n*                                  NOTE-LIST/USER TTRN IN MEMBER\n*                                  (MEMBER NAME)\nM47      EQU   38                  CANNOT CONTINUE TO BUILD CTLTAB\nM48      EQU   39                 ALL SELECTED MEMBERS COPIED - DID NOT\n*                                 USE ALL SPECIFIED INDD'S\nM49      EQU   40                  (NUMBER) UNUSED TRKS IN OUTPUT DATA\n*                                  SET REFERENCED BY (DDNAME)\nM50      EQU   41                  CANNOT COMPRESS TRACK OVERFLOW DATA\n*                                  SET\nM51      EQU   42                  CANNOT COMPRESS WITH RE/DE BLOCKING\nM53      EQU   43                  END OF JOB (0,4,8) WAS HIGHEST\n*                                  SEVERITY CODE\nNORMOD   EQU   44                  NO SPACE IN OUTPUT DIRECTORY FOR\n*                                  DIRECTORY ENTRIES FROM DATA SET\n*                                  (DATA SET NAME)\nUNUSDDB  EQU   45                  THERE ARE (NUMBER) UNUSED DIRECTORY\n*                                  BLOCKS IN THE OUTPUT DIRECTORY\nTMDBTR   EQU   46     **WARNING** THE OUTPUT DS REF BY XXXXXXXX  A36049\n*                     CONTAINS TOO MANY DIRECTORY BLOCKS PER     A36049\n*                     TRACK                                      A36049\nM58      EQU   47                  ERROR FORCES JOB TO TERMINATE\nM59      EQU   48                  (MEMBER NAME) COMPRESSED- WAS\n*                                  ALREADY IN PLACE\nM60      EQU   49                  ALL MEMBERS COMPRESSED-\n*                                  ALL WERE ORIGINALLY COMPRESSED\nMEMCOP   EQU   50                  (MEMBERNAME) HAS BEEN SUCCESSFULLY\n*                                  COPIED\nRNMEMCOP EQU   51                  (MEMBER NAME) HAS BEEN RENAMED AND\n*                                  SUCCESSFULLY COPIED\nNOTDA    EQU   52                 DATA SET NOT DIRECT ACCESS\nNODDCARD EQU   53                 DD CARD NOT FOUND\nUNITER01 EQU   54                 UNIT TYPE DEFINED BY X NOT SUPPORTED\nNOMBCPDM EQU   55                 NO MBRS COPIED FROM INPUT DATASET RE-\n*                                 FERENCED BY (XXXXXXXX)\nCONCATBD EQU   56                 CONCATENATED DATA SETS\nIMPCOMPR EQU   57                 IMPLIED COMPRESS\nNOCMPOSS EQU   58                 CANNOT COMPRESS\nNOLINK   EQU   59                 NO MEMBERS FOR PARTIAL LINK,\n*                                 WILL NOT LINK\nDOFULLCP  EQU  60                 TOTAL LINK ASSUMED\nMFBNC    EQU   61 MEMBER FOUND BUT NOT COPIED - I/O ERROR READING\n*                 INPUT DIRECTORY\nNONELINK EQU   62 NO MEMBERS COPIED\nFOLLMCPD EQU   63 FOLLOWING MBRS COPIED FROM INPUT DS REF BY XXXXXXXX\nPLAMPID  EQU   64 POSSIBLE LOSS OF ACCESS TO MEMBER AND/OR INCOMPLETE\n*                 DIRECTORY\nWODINC   EQU   65 SYSUT4 I/O ERROR - OUTPUT DIRECTORY MAY BE INCOMPLETE\nWONTCOM  EQU   66 I/O ERROR ON SYSUT3 - COMPRESS IN PLACE NOT DONE\nBADPRINT EQU   67 SYSPRINT COULD NOT BE OPENED\nSMNF    EQU   68                  (MBRNAME) WAS SELECTED BUT NOT FOUND\nPA       EQU   69                  LOAD MODULE IS PAGE ALIGNED        $\n         SPACE 2\nRCBUF    DC    C'0'               COMPLETION-CODE AREA...CONTAINS CHAR-\n*                                 ACTER REPRESENTATION OF HIGHEST\n*                                 COMPLETION CODE SET BY UTILITY PGM\nLINECT   DC   X'0'                COUNT OF NBR LINES WRITTEN ON ONE PG\nPGLIMIT  EQU   56                 MAX NBR OF LINES TO BE PUT ON ONE PG\n         SPACE 2\nMSGBUF   DC    121C' '            MESSAGE BUFFER\nPGNO     DC    C'0001'            STARTING PAGE NUMBER FOR MSG OUTPUT\n*************              END OF COMMUNICATION AREA   ****************\n***   KEEP CARD  'MCAEND' LAST IN COMMUNICATION AREA JUST BEFORE THE **\n****  EQUATE THAT DETERMINES THE COMMUNICATIONS AREA SIZE 'MCASIZE'  **\n         SPACE 1\nMCAEND   DS    0D        END OF COMMUNICATION AREA\nMCASIZE  EQU   MCAEND-ZZRELCOM    SIZE OF COMMUNICATIONS AREA FOR SNAPS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZRELINK": {"ttr": 3595, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RLNK     TITLE 'Z Z R E L I N K  -  ZZRELINK RE-LINK EDIT UTILITY '\n*\n*    AUTHOR:   J. SCULLION\n*\n*    DATED:    11 FEB 1973\n*\n*    FUNCTION: THIS IS THE MAINLINE CONTROL ROUTINE FOR THE LINK\n*              UTILITY ROUTINE.\n*\n*              THE PURPOSE OF THIS UTILITY IS TO READ CONTROL CARDS\n*              THAT ARE SIMILAR TO IEBCOPY CONTROL CARDS AND DO EITHER\n*              OF:\n*                   1.   GENERATE AND PUNCH A LINKAGE EDITOR JCL STREAM\n*               OR\n*                   2.   GENERATE A JCL STREAM AND INVOKE THE LINKAGE\n*                        EDITOR\n*\n*              THIS MAINLINE MODULE WILL CONTROL THE ROUTINES THAT:\n*             -VALIDATE THE CONTROL CARDS\n*             -READ PDS DIRECTORIES\n*             -GENERATE MESSAGES\n*             -GENERATE JCL STREAM\n*\n*              THIS ROUTINE IS SIMILAR TO IEBCOPY IN THAT IT WILL ALLOW\n*\n*\n*                   ALL MEMBERS OF A PDS TO BE RELINKED\n*             OR    SELECTED MEMBERS OF A PDS TO BE RELINKED\n*             OR    EXCLUDING CERTAIN MEMBERS OF A PDS FROM RELINKING\n*\n*         FORMAT OF CONTROL STATEMENTS ARE:\n*\n*              LINK      INDD=          ,OUTDD=\n*              L         I=             ,O=\n*\n*              SELECT    MEMBER=\n*              S         M=\n*\n*              EXCLUDE   MEMBER=\n*              E         M=\n*\n*         THE REPLACE OPTION CAN ALSO BE SPECIFIED. IT IS CODED IN\n*     THE SAME MANNER AS THE OPTION IS USED IN IEBCOPY.\n*     IT CAN REPLACE SELECTED MEMBERS OF A DATA SET OR IT CAN REPLACE\n*     THE WHOLE DATA SET. IF THE REPLACE OPTION IS NOT SPECIFIED, THE\n*     LINK IF INVOKED WILL NOT REPLACE THE MEMBER IN THE NEW DATA SET\n*     IF THE MEMBER IS PRESENT IN THE NEW DATA SET.\n*\n*     SEE THE WRITE-UP IN THE STANDARDS MANUAL FOR THE JCL REQUIRED.\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n*\n*     THIS PROGRAM IS BUILT FROM FIVE MODULES:\n*\n*     1.   ZZRELINK      MAIN LINE  AND  MAIN PROCESSOR\n*     2.   ZZRESCAN      CONTROL CARD SCAN ROUTINE.\n*     3.   ZZMESAGE      MESSAGE WRITER ROUTINE.\n*     4.   ZZROVBLD      ENTRY POINT DETERMINATION AND OVERLAY TABLE\n*                        BUILD ROUTINE.\n*     5.   ZZROVCRD      OVERLAY CARD GENERATOR ROUTINE.\n*\n*     ZZRELCOM IS THE COMMUNICATIONS AREA BETWEEN MODULES.\n*\n*\n         EJECT\n         EQUREGS\n         EJECT\n         EQUBITS\n         TITLE 'ENVIRONMENT PRESERVATION ROUTINE'\nZZRELINK CSECT\n*\n*         SAVE REGISTERS AND ESTABLISH ADDRESSABILITY\n*\n         CHAIN SAVE=(14,12),BASE=(8,10,11,12),SAVAR=SV1               $\n         TITLE 'ONE TIME INITIALIZATION ROUTINE'\n*\n*         INITIAL PROCESSING I.E. OPENING OF FILES ETC.\n*\n         MVI   SZPRMSW,X'00'            TURN PARM SW OFF\n         MVI   LEUSED,X'00'             LINK-EDIT WAS USED            $\n         L     R1,0(R1)                 PTR T0 PARM BUFFER\n         LH    R2,0(R1)                 PARM LENGTH\n         STH   R2,SZPRMLTH              SAVE PARM LENGTH FOR LATER\n         LTR   R2,R2                    PARM PRESENT?\n         BNP   PSTPARM                  NO PARM PRESENT\n         BCTR  R2,0                     DECR FOR EXEC\n         EX    R2,MOVE3                 SAVE THE SIZE PARAMETER\n         MVI   SZPRMSW,X'FF'            TURN PARM PRES SW ON\nPSTPARM  DS    0H\n         OPEN  (PRTDCB,(OUTPUT))        OPEN SYSPRINT\n*\n         TM    PRTDCB+48,X'10'          OPEN OK\n         BO    NXTOP2                   YES\n*\n         MVC   NAMEFLD(8),=C'SYSPRINT'  SYSPRINT DD CARD MISSING\n         OI    IOEF2,SPRNOPN            SHOW SYSPRINT OPEN FAILED\n         MVI   MSGLIST,0                INITIALIZE MESSAGE LIST\n         MVI   MSGLIST+1,BADPRINT       SET UP MESSAGE NUMBER\n         BAL   R2,MSGWRT                GO WRITE MESSAGE\n         MVI   RC,16                    SET RETURN CODE TO 16\n         B     ZZRTERM                  GOTO END OF JOB\n*\nNXTOP2   DS    0H\n         OPEN  (CARDCB,(INPUT))         OPEN SYSIN\n*\n         TM    CARDCB+48,X'10'          OPEN OK\n         BO    NXTOP3                   YES\n*\n         MVC   DDNMFLD(5),=C'SYSIN'     SYSIN OPEN ERROR\nOPENFAIL DS    0H\n         MVI   DDNMDISP,26              NAME GOES IN +26\n         MVI   MSGLIST,0                INITIALIZE MESSAGE LIST\n         MVI   MSGLIST+1,OPENERRX       SHOW OPEN ERROR\n         BAL   R2,MSGWRTD               WRITE MESSAGE WITH DDNAME\n         MVI   RC,16                    SET RETURN CODE TO 16\n         B     ZZRTERM                  GOTO END OF JOB\n*\nNXTOP3   DS    0H\n         BAL   R7,CHKFUNC               CHECK THE FUNCTION\n         CLI   LESWCH,X'FF'             PUNCH REQUIRED\n         BE    NXTOP4                   NO\n         OPEN  (SYSPUNCH,(OUTPUT))      OPEN SYSPUNCH\n*\n         TM    SYSPUNCH+48,X'10'        OPEN OK\n         BO    ENDOPN                   YES\n*\n         MVC   DDNMFLD(8),=C'SYSPUNCH'  SHOW SYSPUNCH OPEN FAILED\n         B     OPENFAIL                 PRODUCE MESSAGE AND TERMINATE\n*\nNXTOP4   DS    0H\n         CLI   UT2,X'FF'                SYSUT2 DD PRESENT\n         BE    NXTOP5\n         MVC   DDNMFLD(6),=C'SYSUT2'    SHOW SYSUT2 OPEN FAILED\n         BAL   R2,NODD                  PRODUCE NO DD CARD MESSAGE\n         MVI   RC,16                    SET RETURN CODE TO 16\n         B     ZZRTERM                  TERMINATE\nNXTOP5   DS    0H\n         CLI   SYSLOPR,X'FF'            SYSLOUT DD PRESENT?\n         BE    NXTOP6                   YES\n         MVC   DDNMFLD(7),=C'SYSLOUT'   SHOW DD CARD MISSING\n         BAL   R2,NODD                  PRODUCE NO DD CARD MESSAGE\n         MVI   RC,16                    SET RETURN CODE TO 16\n         B     ZZRTERM                  TERMINATE\nNXTOP6   DS    0H\n         CLI   UT1,X'FF'                SYSUT1 DD PRESENT?\n         BE    ENDOPN                   YES\n         MVC   DDNMFLD(6),=C'SYSUT1'    SHOW SYSUT1 OPEN FAILED\n         BAL   R2,NODD                  PRODUCE NO DD CARD MESSAGE\n         MVI   RC,16                    SET RETURN CODE TO 16\n         B     ZZRTERM                  TERMINATE\nENDOPN   DS    0H\n         LA    R4,ZZRTERM               R4 = PTR TO EOJ ROUTINE\n         ST    R4,VZZRTERM              SET UP COMM. PTR TO EOJ\n         TITLE 'MAINLINE CONTROL ROUTINE'\n*\n*         THE FOLLOWING CONTROLS THE OVERALL PROCESSING. IT CONTROLS\n*    THE CONTROL CARD SCAN ROUTINE, TABLE BUILDING ROUTINE, MEMBER\n*    PROCESSING ROUTINE\n*\n         BAL   R7,INITLZ                SET UP VALUES FOR SCAN ROUTINE\nBEGINLNK DS    0H\n         LA    R4,ZZRELCOM              ADDR COMM AREA\n         L     R15,VZZRSCN              GET ADDRESS OF ZZRESCAN\n         BALR  R14,R15                  DO CONTROL CARD SCAN\n         BAL   R7,ALIASSTR              BUILD ALIAS TABLE\n         BAL   R7,MEMREAD               DO PROCESSING FOR DATA SET\n         B     BEGINLNK                 REPEAT FOR NEXT OPERATION\n         TITLE 'ZZRESCAN - WORK AREA INITIALIZATION ROUTINE'\n*\n*      SCAN ROUTINE INITIALIZATION\n*\nINITLZ   DS    0H\n         MVC   CARDCB+32(4),VZZRLEOF    SET UP EODAD EXIT PTR\n         MVI   CPARAMSW,X'08'           FORCE FIRST READ\n         MVI   CCSWITCH,X'01'           FIRST SCAN SWITCH\n         L     R5,=A(TABCOR)            R5 = PTR TO TABLE WORK AREA\n         ST    R5,SEBEGIN               START OF SETAB\n         ST    R5,SESTOP                END OF SETAB\n         ST    R5,INBEGIN               START OF INDD TABLE\n         BR    R7\n         TITLE 'FUNCTION DETERMINATION ROUTINE'\n*\n*    THE FOLLOWING DECIDES WHETHER THE FUNCTION WILL BE TO PUNCH\n*    CARDS OR ELSE TO INVOKE THE LINKAGE EDITOR.\n*\n*    CARDS WILL BE PUNCHED WHEN A //SYSPUNCH CARD IS PRESENT.\n*\n*    LINKAGE EDITOR WILL BE INVOKED WHEN THERE IS NO //SYSPUNCH CARD.\n*\nCHKFUNC  DS    0H\n         L     R1,16(0)                 CVT\n         L     R1,0(R1)                 TCBTCB\n         L     R1,4(R1)                 TCB\n         L     R1,12(R1)                TIOT\n         LA    R1,24(R1)                LOAD PAST TIOT HEADER\n         ST    R1,ADRTIOT               SAVE TIOT ADDRESS\n*\n*    LOOP THROUGH TIOT TO SEE WHAT DD CARDS ARE PRESENT\n*\nTIOTLP   DS    0H\n         CLI   0(R1),X'00'              LAST ENTRY?\n         BE    CHKRET                   YES\n         CLC   4(8,R1),=C'SYSPUNCH'     SYSPUNCH PRESENT?\n         BNE   CONTSR1                  NOT FOUND YET\n         MVI   LESWCH,X'00'             TURN OFF L E FUNCTION\n         B     TIOTINCR                 BUMP UP TO NEXT ENTRY\nCONTSR1  DS    0H\n         CLC   4(6,R1),=C'SYSUT2'       SYSUT2 PRESENT\n         BNE   CONTSR2                  NOT FOUND YET\n         MVI   UT2,X'FF'                SYSUT2 FOUND\n         B     TIOTINCR                 BUMP UP TO NEXT ENTRY\nCONTSR2  DS    0H\n         CLC   4(7,R1),=C'SYSLOUT'      SYSLOUT PRESENT\n         BNE   CONTSR3                  NOT FOUND YET\n         MVI   SYSLOPR,X'FF'            SYSLOUT FOUND\n         B     TIOTINCR                 BUMP UP TO NEXT ENTRY\nCONTSR3  DS    0H\n         CLC   4(6,R1),=C'SYSUT3'       SYSUT3 PRESENT\n         BNE   CONTSR4                  BRANCH IF NOT SYSUT3\n         MVI   UT3,X'FF'                SHOW SYSUT3 PRESENT\n         B     TIOTINCR                 BUMP UP TO NEXT ENTRY\nCONTSR4  DS    0H\n         CLC   4(6,R1),=C'SYSUT1'       SYSUT1 PRESENT?\n         BNE   TIOTINCR                 NO - CHECK NEXT TIOT ENTRY\n         MVI   UT1,X'FF'                SHOW SYSUT1 PRESENT\nTIOTINCR DS    0H\n         SR    R2,R2                    ZERO R2\n         IC    R2,0(R1)                 LENGTH OF DD ENTRY\n         AR    R1,R2                    BUMPP UP TO NEXT ENTRY\n         B     TIOTLP                   TEST NEXT ENTRY\nCHKRET   DS    0H\n         BR    R7                       RETURN\n         TITLE 'MEMBER READ ROUTINE - SELECT MEMBER FROM DIRECTORY'\n*\n*         THE FOLLOWING GETS A MEMBER AND THEN PASSES CONTROL TO THE\n*    ROUTINE THAT CONTROLS THE PROCESSING OF IT.\n*\nMEMREAD  DS    0H\n         BAL   R9,DDSRCH                VERIFY THAT INDD AND OUTDD PRES\n         LR    R6,R5                    R5=R6 WILL FORCE A READ\n         MVC   DDCB+33(3),AEODAM+1      END OF DIRECTORY EXIT\n         XC    PRVATTRB(3),PRVATTRB     CLEAR ATTRIBUTE INDICATORS    $\n         ZAP   STEPNO,=P'0'             SET STEP NO. TO ZERO\n         MVI   COPYSW,0                 RESET COPY SWITCH\n         LA    R4,ZZRELCOM              PTR TO COMM AREA\n         LA    R1,0                     CODE = 0 - CLOSE OPEN REQ\n         L     R15,=V(ZZROVBLD)         PTR TO ROUTINE\n         BALR  R14,R15                  DO THE PROCESS\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   BEGINLNK                 NOT ZERO - OPEN FAILED\n         CLOSE (OUTDCB)\n         MVC   OUTDCB+40(8),OUTNAME      DDNAME\n         OPEN  (OUTDCB)\n         TM    OUTDCB+48,X'10'\n         BNO   DDNMDER1                 OPEN NOT SUCCESSFULL          $\n         RDJFCB (OUTDCB)                READ JFCB FOR ENQUE LOGIC     $\n         MVC   QENQOUT+2(6),JFCB+118    SAVE VOLSER FOR ENQUE         $\n         MVC   RENQOUT,JFCB             SAVE DSNAME FOR ENQUE         $\n         B     GETMEMBR                                               $\nDDNMDER1 EQU   *                                                      $\n*    OPEN WAS NOT SUCESSFUL, PUT OUT MESSAGE.\n         MVC   DDNMFLD(8),OUTNAME        SET UP DDNAME FOR MESSAGE\nDIRERR1  DS    0H\n         MVI   MSGLIST+1,NODIR           SHOW MESSAGE TO WRITE\n         LA    R2,BEGINLNK               SET RETURN ADDRESS\n         MVI   DDNMDISP,39               DDNAME GOES AT +39\n         $SETRC 8                      SET RETURN CODE TO 8\n         B     MSGWRTD                   GO WRITE MESSAGE WITH DDNAME\nGETMEMBR DS    0H\n         BAL   R9,MEMRDR                DO READ ROUTINE\n         TM    11(R6),X'80'             IS IT AN ALIAS\n         BO    MEMINCR                  YES - GET NEXT MEMBER\n         MVC   MEMNAME(8),0(R6)         SAVE THE MEMBER NAME\n         MVC   ADDRMAIN(3),8(R6)        SAVE TTR OF MEMBER\n         IC    R4,11(R6)                PICK UP INDICATOR BYTE        $\n         SLL   R4,27                    SHIFT OFF THE                 $\n         SRL   R4,27                      UNWANTED BITS               $\n         CH    R4,=H'11'                IS LENGTH LESS THAN OR = 34   $\n         BNH   NOTAUTH                  YES - CANT HAVE AUTH CODE     $\n         MVI   SETSSISW,X'00'           CLEAR SETSSISW                $\n         CLI   30(R6),X'98'             DOES MEMBER HAVE SET SSI      $\n         BNE   *+26                     NO                            $\n         MVI   SETSSISW,X'FF'           SET SETSSI SW                 $\n         MVC   SETSSIBI,34(R6)          SAVE BINARY SETSSI INFO       $\n         CLI   39(R6),X'01'             IS PROGRAM AUTHORIZED         $\n         BE    *+16                     YES                           $\n         B     NOTAUTH                  NO                            $\n         CLI   34(R6),X'01'             IS NON SET SSI                $\n         BNE   NOTAUTH                    MOD AUTHORIZED              $\n         OI    20(R6),X'01'             YES- USE BIT 7 OF 1ST         $\n         B     *+8                        ATTRIBUTE BYTE FOR AUTH     $\nNOTAUTH  EQU   *                                                      $\n         NI    20(R6),X'FE'             TURN OFF AUTH BIT             $\n         MVC   ATTRIB(2),20(R6)         SAVE ATTRIBUTES\n         CH    R4,=H'10'                IS LENGTH LESS THAN OR = 32   $\n         BNH   *+14                     NO CANT HAVE AMODE/RMODE      $\n         MVC   ATTRIB+2(1),31(R6)       SAVE AMODE/RMODE INFO         $\n         B     *+8                                                    $\n         MVI   ATTRIB+2,X'00'           CLEAR AMODE/RMODE INFO        $\n         NI    ATTRIB,X'FD'             TURN OFF PAGE ALIGN BIT       $\n         CH    R4,=H'09'                IS LENGTH LESS THAN OR = 30   $\n         BNH   *+16                     NO - CANT HAVE PAGE ALIGNMENT $\n         TM    30(R6),X'20'             IS MODULE PAGE ALIGNED ?      $\n         BNO   *+8                      NO                            $\n         OI    ATTRIB,X'02'             YES USE BIT 6 OF FIRST        $\n*                                         ATTRIBUTE BYTE FOR PG ALIGN $\n         MVC   EPADDR(3),27(R6)         SAVE ENTRY POINT ADDRESS\n         BAL   R14,MEMPRCSS             DO MEMBER PROCESSING          $\n         MVI   FIRSTAL+1,0              SET UP FOR FIRST ENTRY\nMEMINCR  DS    0H\n         LA    R6,11(R6)                BUMP PAST CONSTANTS\n         SR    R4,R4                    ZERO R4\n         NI    0(R6),X'1F'              TURN OFF UNWANTED BITS\n         IC    R4,0(R6)                 GET LENGTH\n         SLA   R4,1                     *2 = # OF BYTES\n         LA    R6,1(R4,R6)              BUMP PAST USER DATA\n         B     GETMEMBR                 GET NEXT MEMBER\nMEMRDR   DS    0H\n         CR    R6,R5                    END OF BLOCK\n         BNL   MREAD                    YES - GET NEXT BLOCK\nMEMEND   DS    0H\n         CLC   0(8,R6),FFF              END OF DIRECTORY\n         BE    MEMRET                   YES - RETURN TO MAINLINE\n         BR    R9                       NO - RETURN TO PROCESSING\nMREAD    DS    0H\n         READ  DDECB,SF,DDCB,DBLOCK\n         CHECK DDECB\n         SR    R5,R5                    ZERO R5\n         AH    R5,DBLOCK                LENGTH OF BLOCK\n         LA    R6,DBLOCK                START OF BLOCK\n         AR    R5,R6                    END OF BLOCK\n         LA    R6,2(R6)                 START OF FIRST ENTRY\n         B     MEMEND                   CHECK OUT THE ENTRY\nMEMRET   DS    0H\n         CLOSE (SYSUT2)                 CLOSE SYSUT2\n         LH    R5,COUNT                 NO. OF ENTRIES IN SELECT TABLE\n         LTR   R5,R5                    ANY ENTRIES IN TABLE\n         BZ    NOSELECT                 NO - LINK ALL WAS REQUESTED\n         LH    R5,ENCT                  R5 = NO. OF SELECT ENTRIES\n         LTR   R5,R5                   ENTRIES IN SELECT TABLE\n         BZ    NOSELECT                 NO - MUST HAVE BEEN EXCLUDES\n         L     R5,SEBEGIN               R5 = PTR TO SELECT TABLE\nCHKSEL   DS    0H\n         TM    0(R5),SEBIT5             WAS THIS MEMBER PROCESSED\n         BO    SELNEXT                  YES - NO MESSAGE TO WRITE\n         MVI   MSGLIST+1,SMNF           MEMBER SELECTED BUT NOT FOUND\n         $SETRC 4                      SET RETURN CODE TO 4\n         MVI   NAMEDISP,0               MEMBER NAME GOES AT +0\n         MVC   NAMEFLD(8),2(R5)         MOVE IN MEMBER TO DISPLAY\n         LA    R2,SELNEXT               SET RETURN ADDRESS\n         B     MSGWRTN                  WRITE ERROR MESSAGE\nSELNEXT  DS    0H\n         LA    R5,10(R5)                BUMP TO NEXT ENTRY\n         C     R5,SESTOP                END OF TABLE ?\n         BL    CHKSEL                   NO - GET NEXT ENTRY\nNOSELECT DS    0H\n         CLI   ALLSET,X'FF'             READY TO DO LINK?\n         MVI   ALLSET,X'00'             RESET SWITCH\n         BNE   0(0,R7)                  RETURN - NO LINK REQ\n         CLI   LESWCH,X'FF'             APPLICATION FUNCTION REQ\n         BNE   PSTCLSE                  NO - DONT DO LINK\n         BAL   R14,ENQOUT               ENQ THE FILE TO BE LINKED TO  $\n         LINK  EP=IEWL,PARAM=(OPLISTL,DDNMLST),VL=1\n         MVI   LEUSED,X'FF'             SHOW THAT LINK-EDIT WAS USED  $\n         BAL   R14,DEQOUT               DEQ THE FILE LINKED TO        $\n         BR    R7                       RETURN\nPSTCLSE  DS    0H\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(2),=C'/*'         MOVE IN DELIMITER\n         PUT   SYSPUNCH,CNTCRD          PUT IT OUT\n         BR    R7                       RETURN TO MAINLINE\n         TITLE 'MEMBER PROCESSING ROUTINE'\n*\n*         THE FOLLOWING CONTROLS THE FLOW OF PROCESSING FOR EACH\n*    MEMBER TESTING IF LINKS ARE REQUIRED AND WHAT INFORMATION TO GET\n*\nMEMPRCSS DS    0H\n         ST    R14,PROCRTRN             SAVE RETURN ADDRESS           $\n         BAL   R9,LNKREQ                TEST IF LINK IS REQUIRED\n         CLI   MEMNAME,C' '             IS NAME BLANK\n         BE    PRCSSEND                 YES - RETURN LINK NOT REQ\n         BAL   R9,VERPLC                REPLACE MEMBER ON OUTPUT?\n         MVI   OVLYSW,X'FF'             INIT OVERLAY SW TO ON\n         TM    ATTRIB,X'20'             OVERLAY PRESENT?\n         BO    PATEST                   YES - LEAVE SW ON             $\n         MVI   OVLYSW,X'00'             NO OVERLAY - TURN SW OFF\nPATEST   EQU   *                                                      $\n         TM    ATTRIB,X'02'             IS MOD MARKED PAGE ALIGN      $\n         LA    R9,PAMSG                 SET TO PRODUCE MESSAGE        $\n         MVC   NAMEFLD(8),MEMNAME                                     $\n         BNO   NETEST                                                 $\n         B     NOEDIT                                                 $\nNETEST   DS    0H\n         TM    ATTRIB+1,X'08'           IS MODULE MARKED N.E.\n         LA    R9,NEMSG                 SET TO PRODUCE MESSAGE\n         MVC   NAMEFLD(8),MEMNAME\n         BO    NOEDIT                   BRANCH IF YES\n*\n         BAL   R9,CESDSTRT              GET CSECT NAME OF ENTRY POINT\n         CLI   CSCTNAME,C' '            IS NAME BLANK\n         BE    PRCSSEND                 YES - RETURN NAME NOT FOUND\n*\n         BAL   R9,PARMGEN               SET UP LINK OPTIONS\n*\n         CLI   LESWCH,X'FF'             INVOKE LINKAGE EDITOR\n         BE    INVOKELE                 YES - SKIP PAST JCL GEN\n         BAL   R9,JCLGENR               GENERATE THE JCL\n         B     PRCSSEND                 RETURN\nINVOKELE DS    0H\n         CLI   ALLSET,X'FF'             EVERYTHING ALREADY SET UP\n         BE    SYSUT2OP                 YES DONT DO AGAIN\n         BAL   R9,GENDDLST              SET UP DDNAME LIST\n         MVI   ALLSET,X'FF'             SET SET-UP SW = ON\n         OPEN  (SYSUT2,OUTPUT)\n         TM    SYSUT2+48,X'10'          OPEN OK\n         BO    SYSUT2OP                 YES - CONTINUE\n         MVC   DDNMFLD(6),=C'SYSUT2'    SHOW SYSUT2 OPEN FAILED\n         B     OPENFAIL                 PRODUCE MESSAGE AND TERMINATE\nSYSUT2OP DS    0H\n         BAL   R4,CONTGEN               GENERATE CONTROL CARDS\n         B     PRCSSEND                 RETURN\nNOEDIT   DS    0H\n         CLI   UT3,X'FF'                SYSUT3 DD CARD PRESENT\n         BNE   0(0,R9)                  NO - CAN'T DO COPY\n         TM    SYSUT3+48,BIT3           IS SYSUT3 OPEN\n         BO    GENCOPY                  YES - GO GEN COPY CARD\n         OPEN  (SYSUT3,OUTPUT)          OPEN IEBCOPY FILE\nGENCOPY  DS    0H\n         CLI   COPYSW,X'FF'             COPY CARD PUNCHED YET\n         BE    SELGEN                   BRANCH IF YES - NEED SELECT\n         MVI   COPYSW,X'FF'             SHOW COPY CARD GEN'D\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CONTROL CARD\n         MVC   CNTCRD(L'COPYBASE),COPYBASE MOVE BASIC COPY TEXT\n         L     R2,INBEGIN               POINT AT INDD TABLE\n         MVC   CNTCRD+15(8),2(R2)       MOVE INPUT DDNAME TO CARD\n         LA    R2,CNTCRD+16             SET PTR FOR SCAN\nCOPYSCAN DS    0H\n         CLI   0(R2),C' '               END OF INPUT DDNAME\n         BE    COPYFND1                 BRANCH IF YES\n         LA    R2,1(R2)                 BUMP TO NEXT CHARACTER\n         B     COPYSCAN                 CONTINUE SCAN\nCOPYFND1 DS    0H\n         MVC   0(7,R2),=C',OUTDD='      MOVE IN OUTDD TEXT\n         MVC   7(8,R2),OUTNAME          MOVE IN OUTPUT DDNAME\n         PUT   SYSUT3,CNTCRD            WRITE OUT COPY CARD\nSELGEN   DS    0H\n         MVC   CNTCRD,CNTCRD-1          CLEAR CONTROL AREA\n         MVC   CNTCRD(L'SELECT),SELECT  MOVE BASIC SELECT TEXT\n         CLI   REPLACE,X'FF'            REPLACE OPTION SPECIFIED\n         BNE   NRCOPY                   BRANCH IF NOT\n         MVC   CNTCRD+27(2),=C'(('      SET UP REPLACE FORMAT\n         MVC   CNTCRD+29(8),MEMNAME     MOVE IN MEMBER NAME\n         LA    R2,CNTCRD+30             SET UP FOR SCAN\nSELSCAN  DS    0H\n         CLI   0(R2),C' '               END OF MEMBER NAME\n         BE    SELFND1                  BRANCH IF YES\n         LA    R2,1(R2)                 BUMP UPP TO NEXT CHARACTER\n         B     SELSCAN                  LOOK AT NEXT CHARACTER\nSELFND1  DS    0H\n         MVC   0(5,R2),=C',,R))'        SET REPLACE OPTION\n         B     PUTSEL                   PUNCH OUT SELECT CARD\nNRCOPY   DS    0H\n         MVC   CNTCRD+27(8),MEMNAME     PLACE MEMBER NAME ON CARD\nPUTSEL   DS    0H\n         PUT   SYSUT3,CNTCRD            PUNCH OUT  SELECT CARD\nFIRSTAL  NOP   NFIRSTAL                 BRANCH IF NOT FIRST ENTRY\n         LR    R15,R9                   SET FOR NO ALIAS RETURN\n         BAL   R14,ALSCAN               GO SCAN ALIAS TABLE\n         MVI   FIRSTAL+1,X'F0'          SHOW FIRST ALIAS DONE\n         MVC   MEMNAME(8),3(R3)         SET UP ALIAS NAME AS MEMBER\n         B     SELGEN                   GO PRODUCE SELECT CARD\nNFIRSTAL DS    0H\n         SH    R3,=H'16'                DECREMENT TO NEXT ALIAS\n         CLC   0(3,R3),16(R3)           IS THE TTR THE SAME\n         BNE   0(0,R9)                  BRANCH IF NO - ALIAS COMPLETE\n         MVC   MEMNAME(8),3(R3)         SET UP ALIAS NAME AS MEMBER\n         B     SELGEN                   GO GENERATE SELECT CARD\nPAMSG    EQU   *                                                      $\nNEMSG    EQU   *                                                      $\n         TM    ATTRIB,X'02'             IS MOD MARKED PAGE ALIGN      $\n         BNO   *+12                     NO                            $\n         MVI   MSGLIST+1,PA             SET PA MESSAGE                $\n         B     *+8                                                    $\n         MVI   MSGLIST+1,NE             SET NE MESSAGE                $\n         L     R14,PROCRTRN             RESTORE RETURN ADDRESS        $\n         LR    R2,R14                   SET RETURN ADDRESS            $\n         MVI   NAMEDISP,12              MODULE NAME GOES AT +12\n         B     MSGWRTN                  GO WRITE MESSAGE\nPRCSSEND DS    0H\n         L     R14,PROCRTRN             RESTORE RETURN ADDRESS        $\n         BR    R14                      RETURN                        $\nPROCRTRN DS    F                                                      $\n         TITLE 'REPLACE OPTION VERIFICATION ROUTINE'\n*\n*    IF REPLACE OPTION WAS NOT SPECIFIED, THE MEMBER CAN NOT\n*    BE PRESENT ON THE OUTPUT FILE. PRODUCE AN ERROR MESSAGE IN\n*    THIS CASE.\n*\nVERPLC   DS    0H\n         CLI   REPLACE,X'FF'            REPLACE OPTION?\n         BE    VERFRET                  YES - RETURN\n         MVC   BLDLIST+4(8),MEMNAME     NAME FOR BLDL\n         BLDL  OUTDCB,BLDLIST           BUILD LIST\n         LTR   R15,R15                  RETURN CODE ZERO?\n         BNZ   VERFRET                  BRANCH IF MEMBER NOT FOUND\n*   MEMBER IS PRESENT AND REPLACE OPTION WAS NOT SPECIFIED.\n         MVC   NAMEFLD(8),MEMNAME       SET MEMBER NAME FOR MESSAGE\n         MVI   NAMEDISP,0               MEMBER NAME GOES AT +0\n         MVI   MSGLIST+1,REPERR01       SET UP NO RELACE OPT. MESSAGE\n         LA    R2,PRCSSEND              RETURN ADDRESS\n         B     MSGWRTN                  WRITE MESSAGE WITH NAME\nVERFRET  DS    0H\n         BR    R9                       RETURN\n         TITLE 'ALIAS TABLE BUILD ROUTINE'\n*\n*         THE FOLLOWING WILL BUILD A TABLE OF TTR'S AND ALIAS NAMES\n*    FOR ALL ALIASES IN THE DIRECTORY. MAX WAS INCREASED FROM ORIG.   $\n*    500 TO 601 AND LOGIC CHANGED TO USE GETMAIN FOR TABLE IN APR. 86 $\n*    AND INCREASED TO 2000 FOR MVS/ESA(OS390) MAR 97                  $\n*\n*    FORMAT OF TABLE:    BYTES  1 -  3  TTR OF MAIN MEMBER NAME\n*                        BYTES  4 - 11  ALIAS NAME\n*\nALIASSTR DS    0H\n         CLOSE (DDCB)\n         L     R3,INBEGIN                START OF TABLE\n         MVC   DDCB+40(8),2(R3)         DDNAME OF DATA SET\n         MVC   DDCB+33(3),AEODAD+1      END OF DIRECTORY EXIT\n         LM    R0,R1,TABLEN             PICK UP NO. OF ENTRIES IN     $\n*                                       THE ALIAS TABLE AND THE ADD.  $\n*                                       OF WORK AREA TO HOLD THE TAB. $\n         LTR   R1,R1                    DO WE ALREADY HAVE WORK AREA  $\n         BC    7,TABPOINT               YES - CONTINUE                $\n         SLL   R0,4                     CALCULATE THE SIZE OF TABLE   $\n*                                       BY MULT. NO. OF ENTRIES X 16  $\n         GETMAIN R,LV=(R0)              OBTAIN A WORK AREA            $\n         ST    R1,ATABS                 SAVE BEGINNING OF TABLE       $\n         ST    R1,TABEND                SAVE END OF TABLE             $\n         ST    R1,TABADD                SAVE ADDRESS OF TABLE         $\n         AR    R1,R0                    POINT TO END OF TABLE         $\n         SH    R1,=H'16'                BACK OFF ONE ENTRY            $\n         ST    R1,ALEND                 SAVE POINTER TO LAST ENTRY    $\n         SRL   R0,4                     RESTORE NO. OF ENTRIES        $\n         ST    R0,TABLEN                SAVE NO. OF ENTRIES           $\nTABPOINT EQU   *                                                      $\n         L     R4,TABADD                POINT R4 TO TABLE             $\n         MVI   0(R4),X'FF'              RESET 1ST TABLE ENTRY TO X'FF'\n         MVC   1(15,R4),0(R4)\n         ST    R4,TABEND\n         MVI   JOBSW+1,X'00'            SET UP TO PUNCH JOB CARD\n*                                       IF GENERATE FUNCTION\n*\n         OPEN  (DDCB)\n         TM    DDCB+48,X'10'            OPEN SUCESSFUL?\n         BNO   ALIASER1                 NO - ERROR SITUATION\n         LR    R6,R5                    R5=R6 WILL FORCE A READ\nALIASBLD DS    0H\n         BAL   R9,DREAD                 DO READ IF REQUIRED.\n         TM    11(R6),X'80'             ALIAS?\n         BZ    DIRINCR                  NO - GET NEXT ENTRY\n         MVC   ALENTRY(3),8(R6)         TTR\n         MVC   ALENTRY+3(8),0(R6)       ALIAS NAME\n         LA    R4,ALENTRY               ADDRESS OF ENTRY FOR TABLE\n         LM    R1,R2,ATABS              SET UP SEARCH TABLE\n         BINSRCH ARG=(R4),FOUND=ALIASER2,BUILD=YES,AEND=ALEND,         X\n               ARGLTH=11,ENTLTH=16,FULL=ALIASER3,                      X\n               TBEG=(R1),TEND=(R2),TMID=(R3)\n         MVC   0(11,R3),ALENTRY         PUT ENTRY INTO TABLE\nDIRINCR  DS    0H\n         LA    R6,11(R6)                BUMP PAST CONSTANTS\n         SR    R4,R4                    ZERO R4\n         NI    0(R6),X'1F'              TURN OFF UNWANTED BITS\n         IC    R4,0(R6)                 GET LENGTH\n         SLA   R4,1                     * 2 = # OF BYTES\n         LA    R6,1(R4,R6)              BUMP PAST USER DATA\n         B     ALIASBLD                 CHECK NEXT ENTRY\nDREAD    DS    0H\n         CR    R6,R5                    END OF BLOCK\n         BNL   DIRDR                    YES - GET NEW BLOCK\nDIREND   DS    0H\n         CLC   0(8,R6),FFF              END OF DIRECTORY\n         BE    ALIASRET                 RETURN TO MAINLINE\n         BR    R9                       RETURN TO BUILD\nDIRDR    DS    0H\n         READ  RDECB,SF,DDCB,DBLOCK\n         CHECK RDECB\n         SR    R5,R5                    ZERO R5\n         AH    R5,DBLOCK                LENGTH OF BLOCK\n         LA    R6,DBLOCK                START OF BLOCK\n         AR    R5,R6                    END OF BLOCK\n         LA    R6,2(R6)                 START OF FIRST ENTRY\n         B     DIREND                   CHECK OUT THE ENTRY\nALIASER1 DS    0H\n         L     R3,INBEGIN               START OF TABLE\n         MVC   DDNMFLD(8),2(R3)         PLACE DDNAME IN MESSAGE\n         B     DIRERR1                  GO WRITE MESSAGE\nALIASER2 DS    0H\n         L     R3,INBEGIN               START OF TABLE\n         MVC   DDNMFLD(8),2(R3)         SET UP DDNAME FOR MESSAGE\n         MVI   MSGLIST+1,DIRERR01       INDICATE MSG TO WRITE\n         MVI   DDNMDISP,0               DDNAME GOES AT +0\n         $SETRC 8                      SET RETURN CODE TO 8\n         LA    R2,BEGINLNK              SET UP RETURN ADDRESS\n         B     MSGWRTD                  WRITE MESSAGE WITH DDNAME\nALIASER3 DS    0H\n         MVI   MSGLIST,LASTMSG          SHOW LAST MESSAGE             $\n         MVI   MSGLIST+1,ATABFULL       SET UP MESSAGE TO WRITE\n         $SETRC 8                      SET RETURN CODE TO 8\n         LA    R2,BEGINLNK              SET RETURN ADDRESS\n         B     MSGWRT                   WRITE MESSAGE - NO PARMS\nALIASRET DS    0H\n         CLOSE (DDCB,REREAD),TYPE=T\n         BR    R7                       RETURN TO MAINLINE\n         TITLE 'MEMBER SELECT VERIFICATION ROUTINE'\n*\n*         THE FOLLOWING CHECKS TO SEE IF THE SELECTED MEMBER FROM THE\n*    DIRECTORY MUST BE RELINKED.\n*         IF THERE ARE NO SELECTS OR EXCLUDES, ALL MUST BE RELINKED.\n*\n*         IF THERE ARE SELECTS, ONLY THOSE SELECTED MUST BE RELINKED.\n*\n*         IF THERE ARE EXCLUDES, ALL BUT THOSE EXCLUDED MUST BE\n*    RELINKED.\n*\nLNKREQ   DS    0H\n         LH    R4,COUNT                 # ENTRIES IN SETAB\n         CH    R4,=H'0'                 NO ENTRIES = FULL LINK\n         L     R2,INBEGIN               START OF TABLE\n         BE    TSTRPLC                  BRANCH IF FULL LINK\n         LH    R4,ENCT                  # OF EXCLUDE ENTRIES\n         CH    R4,=H'0'                 IS IT EXCLUSIVE LINK\n         L     R4,SEBEGIN               POINT TO FIRST ENTRY IN TABLE\n         BNE   SELVCPY                  NO - IT IS SELECTIVE LINK\nEXCLCPY  DS    0H\n         CLC   2(8,R4),MEMNAME          IS IT TO BE EXCLUDED\n         BE    BLNKNME                  YES - BLANK IT OUT\n         LA    R4,10(R4)                BUMP UP TO NEXT ENTRY\n         C     R4,SESTOP                END OF TABLE\n         BNL   TSTRPLC                  YES - RELINK MEMBER\n         B     EXCLCPY                  CHECK NEXT ENTRY\nSELVCPY  DS    0H\n         LR    R2,R4\n         CLC   2(8,R4),MEMNAME          IS IT TO BE SELECTED\n         BE    TSTRPLC                  YES - RETURN\n         LA    R4,10(R4)                BUMP UP TO NEXT ENTRY\n         C     R4,SESTOP                END OF TABLE\n         BNL   BLNKNME                  YES - DO NOT LINK MEMBER\n         B     SELVCPY                  CHECK NEXT ENTRY\nTSTRPLC  DS    0H\n         OI    0(R2),SEBIT5             SHOW MEMBER FOUND ON INPUT DS.\n         MVI   REPLACE,X'00'            INIT TO 0\n         TM    0(R2),REPLACOP           REPLACE?\n         BO    REPLCON                  YES\n         L     R2,INBEGIN               START OF INDD TABLE\n         TM    0(R2),REPLACOP           REPLACE?\n         BNO   LNKREQRT                 NO\nREPLCON  DS    0H\n         MVI   REPLACE,X'FF'            YES\n         BR    R9                       RETURN\nBLNKNME  DS    0H\n         MVC   MEMNAME(8),BLNK8         BLANK OUT NAME\nLNKREQRT DS    0H\n         BR    R9                       RETURN\n         TITLE 'ENTRY POINT DETERMINATION ROUTINE'\n*\n*         THE FOLLOWING WILL GET THE CSECT NAME OF THE ENTRY POINT FOR\n*    THE MAIN MEMBER AND BUILD OVERLAY TABLES IF REQUIRED.\n*\nCESDSTRT DS    0H\n         LA    R4,ZZRELCOM              PTR TO COMM AREA\n         MVC   WKA1(8),MEMNAME          MOVE MEMBER NAME TO COMM AREA\n         MVC   WKA1+8(1),OVLYSW         OVERLAY SW\n         MVC   WKA1+9(3),EPADDR         ENTRY POINT ADDRESS\n         MVC   WKA1+12(4),ADDRMAIN      MAIN MEMBER ADDRESS\n         LA    R1,4                     CODE 4 - REQ TO BUILD TABLES\n         L     R15,=V(ZZROVBLD)         PTR TO ROUTINE\n         BALR  R14,R15                  DO PROCESS\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   MEMINCR                  PROCESS FAILED\n         MVC   CSCTNAME(8),WKA1         SAVE CSECT NAME\n         TM    OVLYSW,X'FF'             OVERLAY MODULE?\n         BZ    CESDRET                  NO - CSECT NAME ONLY RETRIEVED\n         MVC   SEGBFBEG(4),WKA1+8       START OF SEGTAB\n         MVC   SEGUSED(4),WKA1+12       END OF SEGTAB\n         MVC   CESDADR(4),WKA1+16       START OF CESD TABLE\n         MVC   CESDUSED(4),WKA1+20      END OF CESD TABLE\nCESDRET  DS    0H\n         BR    R9                       RETURN TO CALLER\n         TITLE 'LINKAGE EDITOR CONTROL CARD BUILD ROUTINE'\n*\n*         THE FOLLOWING WRITES TO SYSUT2 THE CONTROL CARDS REQUIRED\n*    FOR LINK EDITING; WHEN THE FUNCTION IS PUNCH, IT WRITES IT OUT TO\n*    SYSPUNCH\nCONTGEN  DS    0H\n         ST    R4,SVREG4                SAVE R4\n         L     R9,INBEGIN               R9 = PTR TO INPUT DDNAME TBL\n         MVC   INDCB+40(8),OUTNAME      SET UP DDNAME FOR RDJFCB\n         RDJFCB (INDCB)                 READ THE JOB FILE CONTROL  BLK\n*\n         CLC    JFCB(11),=C'SYS1.SVCLIB' IS THIS SVCLIB\n         BNE    NOTSVCS                  BRANCH IF NOT SYS1.SVCLIB\n         MVI    SVCLIB,X'FF'             SHOW SVCLIB WAS ALTERED\n         MVC    SVCDDNM(8),OUTNAME       SAVE PTR TO SVCLIB\nNOTSVCS  DS     0H\n         CLI   LESWCH,X'FF'             INVOKE LINKAGE EDITOR?\n         BE    USEUT2                   YES - USE SYSUT2\n         LA    R9,SYSPUNCH              NO - USE SYSPUNCH\n         B     DDSETUP                  DD SET UP\nUSEUT2   DS    0H\n         LA    R9,SYSUT2                USE SYSUT2\nDDSETUP  DS    0H\n         CLC   JFCB(13),=C'SYS1.NUCLEUS ' IS THIS THE NUCLEUS\n         BNE   NOTNUC                   BRANCH IF NOT NUCLEUS D.S.\n         MVC   CNTCRD,CNTCRD-1          CLEAR WORK AREA\n         MVC   CNTCRD+20(L'NUCINS01),NUCINS01\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   (R9),CNTCRD              'INSERT IEAANIP0'\n         MVC   CNTCRD+20(L'NUCINS02),NUCINS02\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   (R9),CNTCRD              'INSERT IEAQFX00'\n         MVC   CNTCRD+20(L'NUCINS03),NUCINS03\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         MVI   CNTCRD+34,C' '           CLEAR EXTANEOUS BLANK\n         PUT   (R9),CNTCRD              'INSERT DOSBLKS'\n         MVC   CNTCRD+20(L'NUCINS04),NUCINS04\n         MVI   CNTCRD+33,C' '           CLEAR EXTRANEOUS CHAR\n         PUT   (R9),CNTCRD              'INSERT IGFCCH'\n         B     ALCHECK                  NO ENTRY CARD FOR NUCLEUS\nNOTNUC   DS    0H\n         CLC   CSCTNAME,=C'$PRIVATE'    DO WE BYPASS ENTRY CARD       $\n         BE    ALCHECK                  YES                           $\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD+15(5),=C'ENTRY'   MOVE IN ENTRY\n         MVC   CNTCRD+25(8),CSCTNAME    MOVE IN ENTRY POINT NAME\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   (R9),CNTCRD              WRITE OUT RECORD\nALCHECK  DS    0H\n         LA    R14,PARMLOOP             SET UP FOUND ADDRESS\n         LA    R15,PARMEND              SET UP NO ALIAS EXIT\nALSCAN   DS    0H\n         CLC   ATABS,TABEND             ANY ALIASES?\n         BE    0(0,R15)                 NO\n         LM    R1,R2,ATABS              ADDR OF START AND END OF TABLE\n         LA    R4,ADDRMAIN              SEARCH ARGUMENT\n         BINSRCH ARG=(R4),FOUND=PARMFND,BUILD=NO,AEND=ALEND,           X\n               ARGLTH=3,ENTLTH=16,TBEG=(R1),TEND=(R2),TMID=(R3)\n         BR    R15                      GO TO NO ALIAS EXIT\nPARMFND  DS    0H\nPARMPOSL DS    0H\n         C     R1,TABEND                LAST ENTRY IN TABLE\n         BE    PARMPOSE                 YES - R1 IS POSITIONED\n         CLC   0(3,R1),16(R1)           CURR ENTRY = NEXT ENTRY\n         BNE   PARMPOSE                 R1 PTS TO LAST ENTRY FOR MEM\n         AH    R1,=H'16'                POS TO NEXT ENTRY\n         B     PARMPOSL                 CHECK THIS ENTRY\nPARMPOSE DS    0H\n         LR    R3,R1                    R3 PTS TO LAST ENTRY FOR MEM\n         BR    R14                      EXIT TO CALLER WITH ALIAS PTR\nPARMLOOP DS    0H\n*    POSITION R3 SO THAT IT POINTS TO THE LAST ALIAS OF THE GROUP FOR\n*    THE MEMBER WE ARE PROCESSING. ALL THE ALIASES FOR A MEMBER ARE\n*    GROUPED TOGETHER, AND AFTER THE BINARY SEARCH, R3 COULD POINT TO\n*    TO THE START, MIDDLE, OR END OF THE GROUP. THE PRECEDING WILL\n*    ENSURE THAT R3 IS ALWAYS POINTING TO THE END OF THE GROUP AND\n*    THEREFORE ALLOWS THE ALIASES TO BE SELECTED FROM BOTTOM OF ARRAY\n*    TO START OF ARRAY.\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD+10(5),=C'ALIAS'   MOVE IN ALIAS\n         MVC   CNTCRD+20(8),3(R3)       MOVE IN ALIAS NAME\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   (R9),CNTCRD              WRITE OUT RECORD\n         C     R3,ATABS                 FIRST ENTRY IN TABLE?\n         BNH   PARMEND                  YES - GET OUT\n         SH    R3,=H'16'                DECREMENT TO NEXT ENTRY\n         CLC   0(3,R3),16(R3)           IS NEXT ENTRY EQUAL TO CURRENT\n         BE    PARMLOOP                 YES - PUT THIS ALIAS OUT\nPARMEND  DS    0H\n         CLI   SETSSISW,X'FF'           DOES MOD HAVE SETSSI INFO     $\n         BNE   GENINCCD                 NO                            $\n         L     R3,SETSSIBI                                            $\n         LA    R4,SETSSIDP                                            $\n         LA    R1,8                                                   $\nCONHEX   EQU   *                                                      $\n         XR    R2,R2                    LOOP                          $\n         SLDL  R2,4                       THRU                        $\n         IC    R0,TRTAB(R2)                 CHANGING                  $\n         STC   R0,0(R4)                       SSI FROM                $\n         LA    R4,1(R4)                         HEXADECIMAL           $\n         BCT   R1,CONHEX                          TO ZONED            $\n         MVC   CNTCRD,CNTCRD-1          PUT OUT                       $\n         MVC   CNTCRD+8(6),=C'SETSSI'     SETSSI TO                   $\n         MVC   CNTCRD+18(8),SETSSIDP        CONTROL CARD              $\n         BAL   R1,NUMCARD               NUMBER THIS CARD              $\n         PUT   (R9),CNTCRD              WRITE OUT RECORD              $\n         MVI   SETSSISW,X'00'           RESET SW                      $\nGENINCCD EQU   *                                                      $\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD+5(7),=C'INCLUDE'  MOVE IN INCLUDE\n         L     R3,INBEGIN               START OF TABLE\n         MVC   CNTCRD+15(8),2(R3)       MOVE IN DDNAME\n         LA    R2,CNTCRD+16             OFFSET OF DDNAME\nPRMLP1   DS    0H\n         CLI   0(R2),C' '               IS IT BLANK\n         BE    FNDBLK1                  YES\n         LA    R2,1(R2)                 BUMP UP ADDRESS\n         B     PRMLP1                   REPEAT\nFNDBLK1  DS    0H\n         MVI   0(R2),C'('               MOVE IN LEFT PAREN\n         LA    R2,1(R2)                 BUMP UP ADDRESS\n         MVC   0(8,R2),MEMNAME          MOVE IN MEMBER NAME\nPRMLP2   DS    0H\n         CLI   0(R2),C' '               IS IT BLANK\n         BE    FNDBLK2                  YES\n         LA    R2,1(R2)                 BUMP UP ADDRESS\n         B     PRMLP2                   REPEAT\nFNDBLK2  DS    0H\n         MVI   0(R2),C')'               MOVE IN RIGHT PAREN\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   (R9),CNTCRD              WRITE OUT RECORD\n         TM    OVLYSW,X'FF'             OVERLAY PRESENT?\n         BZ    PSTOVLY                  NO - DO NOT GEN OVERLAY CARDS\n         ST    R9,ADCRDOUT              ST ADDR OF CARD OUT DCB\n         LA    R1,CARDNUM               PTR TO CARD # COUNTER\n         ST    R1,ADCARNUM              ST THE ADDRESS\n         LA    R1,SEGBFBEG              R1 POINTS TO PARMS\n         L     R15,=V(ZZROVCRD)         R15 -> CARD GENERATOR\n         BALR  R14,R15                  DO THE PROCESS\nPSTOVLY  DS    0H\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD+1(4),=C'NAME'     MOVE IN NAME\n         MVC   CNTCRD+10(8),MEMNAME     MOVE IN MEMBER NAME\n         CLI   REPLACE,X'FF'            IS REPLACE OPTION REQ\n         BNE   DONTREP                  NO - PUT OUT RECORD\n         LA    R2,CNTCRD+10             OFFSET OF NAME\nPRMLP3   DS    0H\n         CLI   0(R2),C' '               IS IT BLANK\n         BE    FNDBLK3                  YES\n         LA    R2,1(R2)                 BUMP UP ADDRESS\n         B     PRMLP3                   REPEAT\nFNDBLK3  DS    0H\n         MVC   0(3,R2),=C'(R)'          MOVE IN REPLACE OPTION\nDONTREP  DS    0H\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   (R9),CNTCRD              WRITE OUT RECORD\n         L     R4,SVREG4                RESTORE R4\n         BR    R4                       RETURN\n         TITLE 'LINKAGE EDITOR PARAMETER GENERATION ROUTINE'\n*\n*         THE FOLLOWING GENERATES THE PARAMETERS REQUIRED FOR THIS\n*    LINKAGE EDIT.\n*\nPARMGEN  DS    0H\n*\n*   THE FOLLOWING CODE TESTS TO SEE IF THE MEMBER HAS THE SAME\n*   ATTRIBUTES AS THE PRECEEDING ONE, IF IT DOES, A LINK IS NOT\n*   DONE NOW. IF THE ATTRIBUTES ARE DIFFERENT, A LINK IS DONE AND\n*   THE ATTRIBUTES ARE RECALCULATED.\n*\n         NI    ATTRIB,255-BIT6          TURN OFF UNWANTED BITS        $\n         NI    ATTRIB+1,255-BIT1-BIT2-BIT3-BIT5-BIT6\n         CLI   ALLSET,X'00'             VALUES SET UP ?\n         BE    ATTR1                    NO - SET THEM UP\n         CLC   ATTRIB(3),PRVATTRB       IS ATTRB = PREV ATTRB         $\n         BE    PARMRET                  YES - RETURN\n         CLI   LESWCH,X'FF'             L E REQUIRED\n         BNE   PSTCLS2                  NO - PUCH CARDS\n         CLOSE (SYSUT2)\n         BAL   R14,ENQOUT               ENQ THE FILE TO BE LINKED TO  $\n         LINK  EP=IEWL,PARAM=(OPLISTL,DDNMLST),VL=1\n         MVI   LEUSED,X'FF'             SHOW THAT LINK-EDIT WAS USED  $\n         BAL   R14,DEQOUT               DEQ THE FILE LINKED TO        $\n         B     RESET                    SET UP NEW PARAMETERS\nPSTCLS2  DS    0H\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(2),=C'/*'         DELIMITER\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH CARD\n*\nRESET    DS    0H\n         MVI   ALLSET,X'00'             TURN SET-UP SW = OFF\nATTR1    DS    0H\n         LA    R3,OPLISTV+18            ADDR OF STRING\n         TM    SZPRMSW,X'FF'            SIZE PARM PRES?\n         BZ    ATTR2                    NO - CHECK NEXT ATTRIBUTE\n         MVC   0(1,R3),=C','            MOVE A COMMA INTO STRING\n         LA    R3,1(R3)                 BUMP UP LENGTH\n         LH    R4,SZPRMLTH              GET PARM LENGTH\n         BCTR  R4,0                     DECR FOR EXEC\n         EX    R4,MOVE2                 INSERT INTO STRING\n         AH    R3,SZPRMLTH              BUMP UP LENGTH\nATTR2    DS    0H\n         LA    R4,OPLISTV               SAVE LENGTH                   $\n         LR    R2,R3                      OF BASIC PARMS              $\n         SR    R2,R4                        FOR PUNCHING OF           $\n         STH   R2,BLEPARML                    LE CONTROL CARDS        $\n         TM    ATTRIB,X'20'             OVERLAY PRESENT?\n         BZ    ATTR3                    NO - CHECK NEXT ATTRIBUTE\n         MVC   0(5,R3),=C',OVLY'        MOVE IN OPTION\n         LA    R3,5(R3)                 BUMP UP LENGTH\nATTR3    DS    0H\n         TM    ATTRIB,X'80'             IS IT REENTERABLE\n         BZ    ATTR4                    NO CHECK NEXT ATTRIBUTE\n         MVC   0(5,R3),=C',RENT'        MOVE IN OPTION\n         LA    R3,5(R3)                 BUMP UP LENGTH\nATTR4    DS    0H\n         TM    ATTRIB,X'40'             IS IT REUSABLE\n         BZ    ATTR5                    NO CHECK NEXT ATTRIBUTE\n         MVC   0(5,R3),=C',REUS'        MOVE OPTION\n         LA    R3,5(R3)                 BUMP UP LENGTH\nATTR5    DS    0H\n         TM    ATTRIB+1,X'01'           IS IT REFRESHABLE\n         BZ    ATTR6                    NO CHECK NEXT ATTRIBUTE\n         MVC   0(5,R3),=C',REFR'        MOVE IN OPTION\n         LA    R3,5(R3)                 BUMP UP LENGTH\nATTR6    DS    0H\n         TM    ATTRIB,X'08'             IS IT ONLY LOADABLE\n         BZ    ATTR7                    NO CHECK NEXT ATTRIBUTE\n         MVC   0(3,R3),=C',OL'          MOVE IN OPTION\n         LA    R3,3(R3)                 BUMP UP LENGTH\nATTR7    DS    0H\n         TM    ATTRIB,X'04'             IS IT SCATTER FORMAT\n         BZ    ATTR8                    NO CHECK NEXT ATTRIBUTE\n         MVC   0(5,R3),=C',SCTR'        MOVE IN OPTION\n         LA    R3,5(R3)                 BUMP UP LENGTH\nATTR8    DS    0H\n         TM    ATTRIB,X'10'             IS IT TESTRAN\n         BZ    ATTR9                    NO CHECK NEXT ATTRIBUTE\n         MVC   0(5,R3),=C',TEST'        MOVE IN OPTION\n         LA    R3,5(R3)                 BUMP UP LENGTH\nATTR9    DS    0H\n         TM    ATTRIB+1,X'80'           IS IT DOWNWARD COMPATIBLE\n         BO    ATTR10                   NO CHECK NEXT ATTRIBUTE       $\n         MVC   0(3,R3),=C',DC'          MOVE IN OPTION\n         LA    R3,3(R3)                 BUMP UP LENGTH\nATTR10   EQU   *                                                      $\n         TM    ATTRIB,X'01'             IS IT AUTHORIZED              $\n         BZ    ATTR11                   NO CHECK NEXT ATTRIBUTE       $\n         MVC   0(5,R3),=C',AC=1'        MOVE IN OPTION                $\n         LA    R3,5(R3)                 BUMP UP LENGTH                $\nATTR11   EQU   *                                                      $\n         CLI   ATTRIB+2,X'00'           ANY AMODE/RMODE INFO          $\n         BZ    ENDATTRB                 NO - END OF ATTRIBUTES        $\n         TM    ATTRIB+2,X'03'           ANY AMODE IN MAIN EP          $\n         BZ    ATTR11B                  NO - CHECK ALIAS/ALT EP       $\nATTR11MP EQU   *                                                      $\n         BO    *+18                                                   $\n         MVC   0(9,R3),=C',AMODE=31'    MOVE IN OPTION                $\n         LA    R3,9(R3)                   PARM AMODE=31               $\n         B     ATTR12                                                 $\n         MVC   0(10,R3),=C',AMODE=ANY'  MOVE IN OPTION                $\n         LA    R3,10(R3)                  PARM AMODE=ANY              $\n         B     ATTR12                                                 $\nATTR11B  EQU   *                                                      $\n         TM    ATTRIB+2,X'C0'           ANY AMODE IN ALIAS/ALT EP     $\n         BZ    ATTR12                   NO CHECK NEXT ATTRIBUTE       $\n         B     ATTR11MP                                               $\nATTR12   EQU   *                                                      $\n         TM    ATTRIB+2,X'10'           ANY RMODE INFO                $\n         BZ    ENDATTRB                 NO - END OF ATTRIBUTES        $\n         MVC   0(10,R3),=C',RMODE=ANY'  MOVE IN RMODE OPTION          $\n         LA    R3,10(R3)                                              $\nENDATTRB DS    0H\n         LA    R4,OPLISTV\n         SR    R3,R4\n         STH   R3,OPLISTL               LENGTH OF PARAMETER STRING\n         MVC   PRVATTRB(3),ATTRIB       SAVE ATTRIBUTES               $\nPARMRET  DS    0H\n         BR    R9                       RETURN\n         TITLE 'LINKAGE EDITOR DDNAME LIST GENERATOR'\n*\n*         THE FOLLOWING GENERATES THE DDNAME LIST FOR THE LINKAGE\n*    EDITOR WHEN REQUIRED.\n*\nGENDDLST DS    0H\n         MVC   DDENTR3,OUTNAME          MOVE IN OUTDDNAME\n         BR    R9                       RETURN\n         TITLE 'JCL GENERATION ROUTINE - GENERATE FUNCTION ONLY'\n*\n*         THE FOLLOWING GENERATES THE JCL WHEN THE FUNCTION IS TO\n*    PUNCH IT OUT.\n*\nJCLGENR  DS    0H\n         CLI   ALLSET,X'FF'             JCL SET UP\n         BE    JCLSET                   YES DONT DO AGAIN\n*\nJOBSW    NOP   NOJOB                    BRANCH IF NO JOB CARD TO PUNCH\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD AREA\n         MVC   CNTCRD(L'JOBCARD),JOBCARD MOVE CARD TO PUNCH AREA\n         AP    JOBNO,=P'1'              BUMP UP JOB NUMBER\n         UNPK  CNTCRD+7(3),JOBNO        PLACE JOB NUMBER ON CARD\n         OI    CNTCRD+9,X'F0'           ENSURE VALID SIGN\n         BAL   R1,NUMCARD               GO NUMBER JCL CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH OUT JOB CARD\n         MVI   JOBSW+1,X'F0'            SHOW JOB CARD ALREADY PUNCHED\nNOJOB    DS    0H\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         AP    STEPNO,=P'1'             GET CURRENT STEP NUMBER\n         UNPK  LEEXEC+6(3),STEPNO(2)    UNPACK INTO STEPNAME\n         OI    LEEXEC+8,X'F0'           ENSURE VALID SIGN\n         MVC   CNTCRD(L'LEEXEC),LEEXEC  SET UP L.E. EXEC CARD\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(L'BLEPARM),BLEPARM SET UP BASIC L.E. PARMS\n         LH    R4,BLEPARML              LENGTH                        $\n         BCTR  R4,0                     DECREMENT FOR EXECUTE\n         EX    R4,MOVE1                 UPDATE STRING\n         LA    R4,CNTCRD+10                                           $\n         AH    R4,BLEPARML                                            $\n         MVI   0(R4),C''''\n         CLC   OPLISTL,BLEPARML         ADDITIONAL PARMS ?            $\n         BE    *+8                      NO                            $\n         MVI   1(R4),C','               YES - SHOW CONTINUATION       $\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\n         CLC   OPLISTL,BLEPARML         ADDITIONAL PARMS ?            $\n         BE    BYEXPARM                 NO                            $\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD                $\n         MVC   CNTCRD(4),=C'// '''      BEGIN CONTINUATION CARD       $\n         LH    R4,OPLISTL               GET LENGTH OF                 $\n         SH    R4,BLEPARML                ADDITIONAL PARMS            $\n         SH    R4,=H'2'                 REDUCE FOR COMMA AND MOVE     $\n         LA    R3,OPLISTV               LOCATE ADDITIONAL             $\n         AH    R3,BLEPARML                PARMS IN WHOLE LIST         $\n         EX    R4,MOVE1B                MOVE ADDITIONAL PARMS         $\n         LA    R3,CNTCRD+4                TO LINK EDIT PARMS ON       $\n         AR    R3,R4                        CONTINUATION CARD AND     $\n         MVC   1(2,R3),=C''')'                AND TERMINATE PARM LIST $\n         BAL   R1,NUMCARD               NUMBER THIS CARD              $\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT                  $\nBYEXPARM EQU   *                                                      $\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(L'LESYSOUT),LESYSOUT SET UP SYSPRINT DD CARD\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(L'LESYSUT1),LESYSUT1 SET UP SYSUT1 WORK FILE\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\n* BYPASS UNIT LOOKUP FOR SYSUT1 DD CARD, TO ACTIVATE MAKE BRANCH A NOP\n         B     BYUNIT\n         LD    R2,OUTNAME               FPR2 = DDNAME\n         BAL   R4,UNITGEN               DO UNIT LOOK-UP\n         L     R4,UNITAB(R1)            GET PTR TO UNIT TEXT\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CONTROL CARD\n         MVC   CNTCRD(24),0(R4)         MOVE IN UNIT TEXT\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH OUT THE CARD\nBYUNIT   MVC   INDCB+40(8),OUTNAME      MOVE DDNAME TO DCB\n         RDJFCB (INDCB)                 READ JFCB\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(L'LESYSLMD),LESYSLMD MOVE IN BASIC SYSLMOD DD\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         LD    R2,OUTNAME               FPR2 = DDNAME\n         BAL   R4,UNITGEN               DO UNIT LOOK-UP\n         L    R4,UNITAB(R1)             PTR TO UNIT TEXT\n         MVC  CNTCRD(24),0(R4)          MOVE IN UNIT TEXT\n         MVC  CNTCRD+24(9),=C',VOL=SER=' MOVE IN BASIC VOLUME TEXT\n         LD   R2,OUTNAME                FLPR2 = DDNAME\n         BAL  R4,VOLGEN                 DO VOLUME LOOK-UP\n         MVC  CNTCRD+33(6),VOLUME       INSERT VOL ID\n         MVI  CNTCRD+39,C','            CONTINUE INDICATION\n         BAL  R1,NUMCARD                NUMBER THIS CARD\n         PUT  SYSPUNCH,CNTCRD           PUT OUT CARD\n         MVC  CNTCRD,CNTCRD-1           BLANK OUT CARD\n         MVC  CNTCRD(L'LEDSNAME),LEDSNAME MOVE IN DSNAME PARAMETER\n         MVC  CNTCRD+22(44),JFCB        INSERT DSN\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUT OUT CARD\n         L     R3,INBEGIN               START OF TABLE\n         MVC   INDCB+40(8),2(R3)        MOVE IN DDNAME TO DCB\n         RDJFCB (INDCB)                 READ JFCB\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         L     R3,INBEGIN               START OF TABLE\n         MVC   CNTCRD(L'LEINPUT),LEINPUT BASIC INPUT TEXT\n         MVC   CNTCRD+2(8),2(R3)\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   DW,2(R3)                 MOVE TO DW BOUNDRY\n         LD    R2,DW                    FLPR2 = DDNAME\n         BAL   R4,UNITGEN               DO UNIT LOOK-UP\n         L     R4,UNITAB(R1)            GET PTR TO UNIT TEXT\n         MVC   CNTCRD(24),0(R4)         MOVE IN UNIT TEXT\n         MVC   CNTCRD+24(9),=C',VOL=SER=' SET UP BASIC VOL TEXT\n         MVC   DW,2(R3)                 MOVE TO DW BOUNDRY\n         LD    R2,DW                    FLPR2 = DDNAME\n         BAL   R4,VOLGEN                GET VOL ID\n         MVC   CNTCRD+33(6),VOLUME      VOL ID\n         MVI   CNTCRD+39,C','           CONTINUE INDICATION\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUT OUT CARD\n         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD\n         MVC   CNTCRD(L'LEDSNAME),LEDSNAME BASIC DSNAME TEXT\n         MVC   CNTCRD+22(44),JFCB       DSNAME\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD         PUT OUT CARD\n         MVC   CNTCRD,CNTCRD-1         BLANK OUT CARD\n         MVC   CNTCRD(L'LESYSLIN),LESYSLIN MOVE IN SYSLIN DD\n         BAL   R1,NUMCARD               NUMBER THIS CARD\n         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT\nJCLSET   DS    0H\n         ST    R9,SVREG9                SAVE R9\n         BAL   R4,CONTGEN               PUNCH OUT CONTROL CARDS\n         L     R9,SVREG9                RESTORE R9\n         MVI   ALLSET,X'FF'             TURN SET-UP SW = ON\n         BR    R9                       RETURN\n*\nNUMCARD  DS    0H\n         CLI   LESWCH,X'FF'             APPLICATION FUNCTION ?\n         BE    0(0,R1)                  RETURN IF YES\n         AP    CARDNUM,=P'10'           INCREMENT CARD NUMBER\n         UNPK  CNTCRD+72(8),CARDNUM     NUMBER THE CARD\n         OI    CNTCRD+79,X'F0'          ENSURE VALID CHARACTER\n         BR    R1                       RETURN\n         TITLE 'UNIT AND VOLUME DETERMINATION ROUTINE'\nUNITGEN  DS    0H\n         MVI   DDFND+1,X'F0'            SET BRANCH SWITCH\n         B     TIOTSET                  ENTER TIOT LOOK-UP\nVOLGEN   DS    0H\n         MVI   DDFND+1,X'00'            INDIC VOL LOOK-UP REQ\nTIOTSET  DS    0H\n         L     R1,ADRTIOT               R1 PTS TO TIOT\n         SR    R14,R14                  CLEAR LENGTH REG\nTIOTLUP  DS    0H\n         IC    R14,0(R1)                LENGTH OF ENTRY\n         LTR   R14,R14                  END OF TIOT?\n         BZ    TIOTER1                  NO MATCHING DD ENTRY\n         MVC   DW,4(R1)                 MOVE TO BOUNDRY\n         CD    R2,DW                    IS THIS THE REQ DD ENTRY\n         BE    DDFND                    BRANCH IF YES\n         LA    R1,0(R14,R1)             BUMP TO NEXT DD ENTRY\n         B     TIOTLUP                  BRANCH TO TIOT LOOP\nDDFND    DS    0H\n         NOP   UNITLOOP                 BRANCH IF A UNIT GEN\n         L     R1,16(R1)                R1 = PTR TO UCB\n         TM    18(R1),X'20'             IS THIS A DASD DEVICE\n         BZ    UCBER1                   NO - ERROR\n         MVC   VOLUME(6),28(R1)         SET UP VOLUME\n         BR    R4                       RETURN\nUNITLOOP DS    0H\n         L     R1,16(R1)                R1 = PTR TO UCB\n         TM    18(R1),X'20'             DASD DEVICE?\n         BZ    UCBER1                   NO - ERROR\n         LR    R14,R1                   SAVE UCB PTR\n         TM    19(R14),X'0F'            IS IT 3390                    $\n         BNO   *+10                     NO                            $\n         LA    R1,28                    YES - SET UP 3390             $\n         BR    R4                       3390                          $\n         LA    R1,4                     SET FOR 3330 FIRST\n         TM    19(R14),X'09'            3330?\n         BNO   *+16                     NO                            $\n         TM    19(R14),X'04'            IS IT DUAL DENSITY            $\n         BCR   8,R4                     NO - 3330                     $\n         LA    R1,20                    YES - SET UP 3330-1           $\n         BR    R4                       3330-1                        $\n         TM    19(R14),X'0E'            IS IT 3380                    $\n         BNO   *+10                     NO                            $\n         LA    R1,24                    YES - SET UP 3380             $\n         BR    R4                       3380                          $\n         SR    R1,R1                    TRY FOR 2314\n         TM    19(R14),X'08'            2314?\n         BCR   1,R4                     YES - RETURN\n         LA    R1,8                     TRY FOR 2301\n         TM    19(R14),X'02'            2301?\n         BCR   1,R4                     YES - RETURN\n         LA    R1,12                    TRY FOR 2305\n         TM    19(R14),X'06'            2305 M1 ?\n         BCR   1,R4                     YES - RETURN\n         TM    19(R14),X'07'            2305 M2 ?\n         BCR   1,R4                     YES - RETURN\n         LA    R1,16                    TRY FOR 2311\n         TM    19(R14),X'01'            2311?\n         BCR   1,R4                     YES - RETURN\n         STD   R2,DDNMFLD               SET UP DDNAME\n         MVI   DDNMDISP,18              DDNAME GOES AT +18\n         MVI   MSGLIST+1,UNITER01       SET UP UNIT ERROR MESSAGE\n         LA    R2,BEGINLNK              SET RETURN ADDRESS\n         $SETRC 8                       SET RETURN CODE TO 8\n         B     MSGWRTD                  WRITE MESSAGE WITH DDNAME\nUCBER1   DS    0H\n         MVI   MSGLIST+1,NOTDA         NOT DASD DEVICE\n         LA    R2,BEGINLNK             SET RETURN ADDRESS\n         $SETRC 8                       SET RETURN CODE TO 8\n         B     MSGWRT                  WRITE ERROR MESSAGE\nTIOTER1  DS    0H\n         STD   R2,DDNMFLD              DD CARD MISSING\n         $SETRC 8                     SET RETURN CODE TO 8\n         LA    R2,BEGINLNK             SET RETURN ADDRESS\nNODD     DS    0H\n         MVI   DDNMDISP,0              DDNAME GOES AT +0\n         MVI   MSGLIST+1,NODDCARD      SET UP DD CARD MISSING\n         B     MSGWRTD                 WRITE MESSAGE WITH NAME\n         TITLE 'I/O ERROR RECOVERY ROUTINES'\n*\n*        CONSTANTS AREA\n*\nMOVE1    MVC   CNTCRD+10(*-*),OPLISTV   MOVE IN STRING                $\n*\nMOVE1B   MVC   CNTCRD+4(*-*),1(R3)      MOVE IN STRING                $\n*                                                                     $\nMOVE2    MVC   0(*-*,R3),SZPARM         MOVE IN STRING\n*\nMOVE3    MVC   SZPARM(*-*),2(R1)        MOVE IN STRING\n*\nDDCBIOER DS    0H\n         L     R3,INBEGIN               START OF TABLE\n         MVC   DDNMFLD(8),2(R3)         MOVE DDNAME TO MSG AREA\nDIRER2   DS    0H\n         MVI   DDNMDISP,32              DDNAME GOES AT +32\n         MVI   MSGLIST+1,DIRERR02       SHOW I/O ERROR ON DIRECTORY\n         LA    R2,BEGINLNK              RETURN ADDRESS\n         B     MSGWRTN                  WRITE MESSAGE WITH NAME\n*\nOUTIOER  DS    0H\n         MVC   DDNMFLD(8),OUTNAME       SET NAME FOR MESSAGE\n         B     DIRER2                   WRITE MESSAGE\n         TITLE 'TERMINATION ROUTINE - END OF JOB AND CLEANUP'\n*\n*         THE FOLLOWING CONTROLS THE TERMINATION OF THIS UTILITY.\n*    IT CLOSES FILES, RETURNS CONTROL TO THE OPER SYS ETC.\n*\nZZRTERM  DS    0H\n         TM    SYSUT3+48,BIT3           ANY COPIES TO DO\n         BNO   NOCOPIES                 BRANCH IF NOT\n         CLOSE (SYSUT3)                 CLOSE THE CONTROL DATA SET\n*\n         CLI   LESWCH,X'FF'             APPLICATION FUNCTION ?\n         BNE   NOCOPIES                 BRANCH IF NOT\n         LINK  EP=IEBCOPY,PARAM=(COPYOPTN,COPYDDNM),VL=1\n*\nNOCOPIES DS    0H\n         CLI   SVCLIB,X'FF'             SCVLIB ALTERED\n         BNE   NOIOSUP                  BRANCH IF NOT\n*\n*        ASK FOR OPERATOR VERIFICATION AND INVOKE IEHIOSUP\n*\nVERIOSUP DS    0H\n         XC    RECB,RECB                CLEAR REPLY ECB\n         WTOR  'ACTION 0571 - VERIFY REQUEST TO PERFORM IEHIOSUP ON ''SX\n               YS1.SVCLIB''',REPLY,1,RECB,ROUTCDE=1,DESC=2\n         WAIT  ECB=RECB                 WAIT FOR REPLY\n         OI    REPLY,C' '               ENSURE UPPER CASE REPLY\n         CLI   REPLY,C'T'               REPLY = 'TERMINATE'\n         BE    NOIOSUP                  BRANCH IF YES\n         CLI   REPLY,C'U'               OK TO GO AHEAD\n         BE    IOSPLINK                 BRANCH IF YES\n         WTO   'ACTION 0008 - REPLY NOT VERIFIED',ROUTCDE=1,DESC=2\n         B     VERIOSUP                 GO ASK AGAIN\nIOSPLINK DS    0H\n         TM    OUTDCB+48,BIT3           IS DCB OPEN\n         BNO   IOSPOPEN                 BRANCH IF NOT\n         CLOSE (OUTDCB)\nIOSPOPEN DS    0H\n         MVC   OUTDCB+40(8),SVCDDNM     SET UP FOR BLDL\n         MVC   IOSPDD(8),SVCDDNM        SET UP FOR IOSUP\n         OPEN  (OUTDCB)                 OPEN DCB TO SVCLIB\n         MVC   BLDLIST+4(8),=C'IGC0009I' TEST FOR SVC 99 ON SYSTEM\n         BLDL  OUTDCB,BLDLIST           GO TO BLDL ROUTINE\n         LTR   R15,R15                  TEST TO SEE IF SVC 99 FOUND\n         BNZ   NOTSOSYS                 BRANCH IF NOT FOUND\n         MVI   IOSUPARM+1,3             SHOW PARM=TSO PRESENT\nNOTSOSYS DS    0H\n         LINK  EP=IEHIOSUP,PARAM=(IOSUPARM,IOSPDDNM),VL=1\n*\nNOIOSUP  DS    0H\n         CLOSE (PRTDCB)\n         CLOSE (CARDCB)\n         CLOSE (SYSPUNCH)\n         LM    R0,R1,TABLEN             PICK UP NO. OF ENTRIES IN     $\n*                                       THE ALIAS TABLE AND THE ADD.  $\n*                                       OF WORK AREA TO HOLD THE TAB. $\n         LTR   R1,R1                    DID WE OBTAIN A WORK AREA     $\n         BC    8,RETURN                 NO - CONTINUE                 $\n         SLL   R0,4                     CALCULATE THE SIZE OF TABLE   $\n*                                       BY MULT. NO. OF ENTRIES X 16  $\n         FREEMAIN R,LV=(R0),A=(R1)      FREE WORK AREA                $\n         XR    R1,R1                    CLEAR POINTER                 $\n         ST    R1,TABADD                  TO TABLE AREA               $\nRETURN   EQU   *                                                      $\n         L     R13,4(R13)\n         CLI   LEUSED,X'FF'             WAS LINK-EDIT USED THIS RUN   $\n         BE    *+12                     YES                           $\n         LA    R15,20                   NO - SHOW A 20 RC             $\n         B     *+10\n         XR    R15,R15                  CLEAR R15\n         IC    R15,RC                   SET RETURN CODE\n         RETURN (14,12),RC=(15)\n         TITLE 'INTERFACES TO MESSAGE WRITING ROUTINE'\nMSGWRTD  DS    0H\n         MVI   MSGLIST,PBIT+LASTMSG     SHOW PARM PRESENT & LAST MSG\n         MVI   PARAMS,DDNM              SHOW DDNAME PRESENT\n         B     MSGWRT                   GO WRITE MESSAGE\n*\nMSGWRTN  DS    0H\n         MVI   MSGLIST,PBIT+LASTMSG     SHOW LAST MSG AND PARMS\n         MVI   PARAMS,NAME              SHOW NAME PARM PRESENT\n*\nMSGWRT   DS    0H\n         LA    R4,ZZRELCOM             RESET PTR TO COMMUNICATION AREA\n         L     R15,VZZRLMES             GET PTR TO MESSAGE WRITER\n         BALR  R14,R15                  GO WRITE MESSAGE\n         BR    R2                       EXIT TO SUPPLIED RETURN POINT\n         TITLE 'ROUTINE TO VERIFY PRESENCE OF INDD AND OUTDD CARDS'\n*\n*         THE FOLLOWING LOKS THROUGH THE TIOT TO SEE IF\n*     DDCARDS ARE PRESENT FOR THE INDD DATASET AND THE OUTDD DATASET.\n*\nDDSRCH   DS    0H\n         MVI   INDDPR,X'00'             INIT SWITCH TO ZERO\n         MVI   OUTDDPR,X'00'            INIT SWITCH TO ZERO\n         L     R1,ADRTIOT               R1 -> TIOT\n         L     R3,INBEGIN               R3 -> INDD TABLE\nSRCHLOOP DS    0H\n         SR    R14,R14                  INIT R14 TO ZERO\n         IC    R14,0(R1)                LENGTH OF ENTRY\n         LTR   R14,R14                  ENTRY PRESENT?\n         BZ    SRCHEND                  END OF TIOT\n         CLC   OUTNAME(8),4(R1)         OUTNAME MATCH?\n         BNE   TESTINDD                 NO - CHECK INDD\n         MVI   OUTDDPR,X'FF'            SHOW OUT DD PRESENT\n         B     SRCHINCR                 INCREMENT TO NEXT TIOT ENTRY\nTESTINDD DS    0H\n         CLC   2(8,R3),4(R1)            INNAME MATCH?\n         BNE   SRCHINCR                 NO MATCH\n         MVI   INDDPR,X'FF'             SHOW IN DD PRESENT\nSRCHINCR DS    0H\n         LA    R1,0(R14,R1)             BUMP UP TO NEXT ENTRY\n         B     SRCHLOOP                 PROCESS NEXT ENTRY\nSRCHEND  DS    0H\n         TM    INDDPR,X'FF'             WAS IN DD PRESENT?\n         BZ    NOINDDPR                 NO - ERROR\n         TM    OUTDDPR,X'FF'            WAS OUT DD PRESENT?\n         BZ    NOOUTDD                  NO - ERROR\n         BR    R9                       RETURN - ALL PRESENT\nNOINDDPR DS    0H\n         MVC   DDNMFLD(8),2(R3)         STORE DD NAME FOR MSG\nSETDDRET DS    0H\n         LA    R2,BEGINLNK              SET THE RETURN ADDRESS\n         $SETRC 8                       SET THE RETURN CODE TO 8\n         B     NODD                     WRITE DD MISSING MSG\nNOOUTDD  DS    0H\n         MVC   DDNMFLD(8),OUTNAME       DD NAME FOR MSG\n         B     SETDDRET                 SET RETURN ADDRESS\n         TITLE 'DATA AREAS AND CONSTANTS'\n*                                                                     $\n*         THE FOLLOWING ENQUES AND DEQUEUES THE SYSLMOD TYPE DATA     $\n*     SET (THE DATA SET TO BE LINKED TO) WITH A QNANE AND RNANE       $\n*     COMPATABLE WITH SHARDISK AND THE PROGS. OF THE CAP SYSTEM.      $\n*                                                                     $\nENQOUT   EQU   *                                                      $\n         ST    R14,SVREG14              SAVE RETURN REG               $\n         ENQ   (QENQOUT,RENQOUT,E,,SYSTEM)   ENQ FILE                 $\n         B     ENQDEQRT                                               $\nDEQOUT   EQU   *                                                      $\n         ST    R14,SVREG14              SAVE RETURN REG               $\n         DEQ   (QENQOUT,RENQOUT,,SYSTEM)     DEQ FILE                 $\nENQDEQRT EQU   *                                                      $\n         L     R14,SVREG14              RESTORE RETURN REG            $\n         BR    R14                      RETURN                        $\n         EJECT                                                        $\n*\n*         THE FOLLOWING DEFINES THE AREAS OF STORAGE REQUIRED\n*    IN THIS ROUTINE.\n*\nFFF      DC    8X'FF'                   8 BYTES OF 'FF'\nATTRIB   DS    CL3                      ATTRIBUTES OF MEMBER          $\nPRVATTRB DC    XL3'00'                  SAVE ATTRB AREA               $\n*       ATTRIBUTE BIT DEFINITIONS                                     $\n*   BYTE 1         BYTE 2         BYTE 3                              $\n*  80  RENT       80  DC         80  UNUSED                           $\n*  40  REUS       40  UNUSED     40  UNUSED                           $\n*  20  OVLY       20  UNUSED     20  UNUSED                           $\n*  10  TEST       10  UNUSED     10  RMODE=ANY                        $\n*  08  OL         08  NOT LE     08  AMODE=31(TRUE ALIAS OR ALT EP)   $\n*  04  SCTR       04  UNUSED     0C  AMODE=ANY(TRUE ALIAS OR ALT EP)  $\n*  02  PAGE ALIGN 02  UNUSED     02  AMODE=31(MAIN EP)                $\n*  01  AC=1       01  REFR       03  AMODE=ANY(MAIN EP)               $\nEPADDR   DS    CL3                      ENTRY POINT OF MEMBER\nDW       DC    D'0'\nADDRMAIN DC    F'0'\nMEMNAME  DS    CL8                      MEMBER NAME\nSVCDDNM  DS    CL8                      SVCLIB DD NAME\nCSCTNAME DS    CL8                      MAIN ENTRY CSECT NAME\nSETSSIBI DS    F                        SETSSI BINARY                 $\nSETSSIDP DS    D                        SETSSI DISPLAY                $\nTRTAB    DC    CL16'0123456789ABCDEF'                                 $\nBLNK8    DC    CL8' '                   FIELD OF BLANKS\nDBLOCK   DC    H'00',256X'00'\n         DC    50C' '\n         DC    CL1' '                   USED TO BLANK OUT CARD\nCNTCRD   DS    CL80                     JCL OR CONTROL CARD AREA\nAEODAM   DC    A(MEMRET)                EOF EXIT\nAEODAD   DC    A(ALIASRET)              EOF EXIT\nUT1      DC    XL1'00'                  SYSUT1 SWITCH  FF - PRESENT\n*                                                      00 - NOT PRES\nUT2      DC    XL1'00'                  SYSUT2 SWITCH  FF - PRESENT\n*                                                      00 - NOT PRES\nLESWCH   DC    XL1'FF'                  LINK SWITCH    FF - LINK\n*                                                      00 - PUNCH\nLEUSED   DC    XL1'00'                  LINK-EDIT USED FF - USED-RUN  $\n*                                                      00 - NOT USED  $\nSETSSISW DC    XL1'00'                  SETSSI SWITCH  FF - SETSSI    $\n*                                                      00 - NO SETSSI $\nREPLACE  DC    XL1'00'                  REPLACE SWITCH FF - YES\n*                                                      00 - NO\nALLSET   DC    XL1'00'                  SET UP SWITCH  00 - DO SET UP\n*                                                      FF - DONT SET UP\nSYSLOPR  DC    XL1'00'                  SYSLOUT SWITCH FF - PRESENT\n*                                                      00 - NOT PRES\nINDDPR   DC    XL1'00'                  INDD SWITCH    FF - PRESENT\n*                                                      00 - NOT PRES\nOUTDDPR  DC    XL1'00'                  OUTDD SWITCH   FF - PRESENT\n*                                                      00 - NOT PRES\nUT3      DC    XL1'00'                  SYSUT3 SWITCH  FF - PRESENT\n*                                                      00 - NOT PRES\nSVCLIB   DC    XL1'00'\nCOPYSW   DC    XL1'00'\nRC       DC    XL1'00'                  RETURN CODE HOLD AREA\nREPLY    DC    C' '\nRECB     DC    F'0'\nSVREG14  DS    F                                                      $\nSVREG9   DS    F                        SAVE AREA FOR R9\nSVREG4   DS    F                        SAVE AREA FOR R4\nSVREG5   DS    F                        SAVE AREA FOR R5\nADRTIOT  DS    F                        SAVE TIOT ADDRESS\nBLDLIST  DC    H'1'\n         DC    H'58'\n         DS    56X\nJFCB     DS    44F                      JFCB\n         DS    0H\nQENQOUT  DC    CL8'MM      '                                          $\nRENQOUT  DC    CL44' '                                                $\nDDNMLST  DC    H'48'                    LIST LENGTH\n         DC    C'SYSUT2  '\n         DC    XL8'00'\nDDENTR3  DS    CL8\n         DC    C'SYSLIB  '\n         DC    XL8'00'\n         DC    C'SYSLOUT '\n         DS    0H\nOPLISTL  DS    XL2\nOPLISTV  DC    CL78'LET,LIST,XREF,NCAL'                               $\nCOPYOPTN DC    H'0'\nCOPYDDNM DC    H'40'\n         DC    8XL1'00'                UNUSED\n         DC    8XL1'00'                UNUSED\n         DC    8XL1'00'                UNUSED\n         DC    8XL1'00'                UNUSED\n         DC    CL8'SYSUT3'             ALTERNATE NAME FOR SYSIN\nIOSUPARM DC    H'0'\n         DC    C'TSO'\nIOSPDDNM DC    H'64'\n         DC    56XL1'00'\nIOSPDD   DC    CL8' '\n         DS    0F\nTABLEN   DC    F'2000'                                                $\nTABADD   DC    F'0'                                                   $\nALEND    DS    F                                                      $\nALENTRY  DS    CL11\nATABS    DS    F                                                      $\nTABEND   DS    F                                                      $\n         DS    0F\nXLIST1   DC    X'87'\n         DC    AL3(JFCB)\nUNITAB   DC    A(T2314)\n         DC    A(T3330)\n         DC    A(T2301)\n         DC    A(T2305)\n         DC    A(T2311)\n         DC    A(T3330D)                                              $\n         DC    A(T3380)                                               $\n         DC    A(T3390)                                               $\nT2314    DC    C'//             UNIT=2314'\nT3330    DC    C'//             UNIT=3330'\nT2301    DC    C'//             UNIT=2301'\nT2305    DC    C'//             UNIT=2305'\nT2311    DC    C'//             UNIT=2311'\nT3330D   DC    C'//           UNIT=3330-1'                            $\nT3380    DC    C'//             UNIT=3380'                            $\nT3390    DC    C'//             UNIT=3390'                            $\nVOLUME   DS    CL6\nJOBNO    DC    PL2'0'\nSTEPNO   DC    PL2'0'\nCARDNUM  DC    PL5'0'\n*\n* THE FOLLOWING MUST STAY DEFINED IN THE ORDER SHOWN\nSEGBFBEG DS    F\nSEGUSED  DS    F\nCESDADR  DS    F\nCESDUSED DS    F\nADCARNUM DS    F\nADCRDOUT DS    F\nOVLYSW   DC    XL1'0'\nSZPARM   DS    CL24\nSZPRMSW  DC    XL1'00'\nSZPRMLTH DS    H\n*\nJOBCARD  DC    C'//RELNKXXX JOB 1,''JOE PROGRAMMER'''\nLEEXEC   DC    C'//STEPXXX  EXEC PGM=IEWL,REGION=512K,'               $\nBLEPARML DS    H                                                      $\nBLEPARM  DC    C'// PARM=('''                                         $\nLESYSOUT DC    C'//SYSPRINT DD  SYSOUT=A'\nLESYSUT1 DC    C'//SYSUT1   DD  SPACE=(CYL,(5,1)),UNIT=SYSDA  '       $\nLESYSLMD DC    C'//SYSLMOD  DD  DISP=OLD,'\nLEDSNAME DC    C'//             DSNAME='\nLEINPUT  DC    C'//         DD  DISP=SHR,'\nLESYSLIN DC    C'//SYSLIN   DD  *'\nCOPYBASE DC    C'     COPY INDD='\nSELECT   DC    C'          SELECT    MEMBER='\nNUCINS01 DC    C'INSERT IEAANIP0'\nNUCINS02 DC    C'INSERT IEAQFX00'\nNUCINS03 DC    C'INSERT DOSBLKS'\nNUCINS04 DC    C'INSERT IGFCCH'\n         LTORG\n         EJECT\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=(PM),LRECL=80,BLKSIZE=80,           X\n               DSORG=PS,RECFM=FB\n         EJECT\nSYSUT3   DCB   DDNAME=SYSUT3,MACRF=(PM),LRECL=80,BLKSIZE=80,           X\n               DSORG=PS,RECFM=FB\n         EJECT\nSYSPUNCH DCB   DDNAME=SYSPUNCH,MACRF=(PM),LRECL=80,                   $X\n               DSORG=PS,RECFM=FB\n         EJECT\nDDCB     DCB    MACRF=(RP),BLKSIZE=256,DSORG=PS,RECFM=F,SYNAD=DDCBIOER\n         EJECT\nOUTDCB   DCB   MACRF=(RP),BLKSIZE=256,DSORG=PS,RECFM=F,SYNAD=OUTIOER, $X\n               EXLST=XLIST1                                           $\n         EJECT\nINDCB    DCB    EXLST=XLIST1,DSORG=PO,MACRF=(R),RECFM=U,BLKSIZE=7294\n         EJECT\nZZRELCOM DS    0D\n         ZZRELCOM\n         EJECT\n         DS    0F\nTABCOR   DC    16X'FF'\n         DS    CL1024\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZRESCAN": {"ttr": 4358, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SCAN     TITLE 'Z Z R E S C A N  -  ZZRELINK CONTROL CARD SCAN'\nZZRESCAN CSECT\n         ENTRY ZZRLEOF\n         SPACE 1\n*                                                                     *\n*TITLE- ZZRELINK CONTROL CARD SCAN AND ANALYSIS CSECT- ZZRESCAN       *\n*                                                                     *\n*                                                                     *\n*FUNCTION/OPERATION-  THIS MODULE SCANS CONTROL CARDS AND GIVES       *\n*       MESSAGES FOR SYNTAX OR SEQUENCE ERRORS. IT BUILDS AN INDD     *\n*       TABLE OF DD NAMES OF INPUT DATA SETS WHICH CONTAIN MEMBERS    *\n*       TO BE COPIED. IT BUILDS AN SE TABLE OF MEMBER NAMES TO BE     *\n*       SELECTED OR EXCLUDED IN THE LINK. IT STORES THE NAME OF       *\n*       THE OUTPUT DD STATEMENT IN BUFFER 'OUTNAME'.                  *\n*                                                                     *\n*ENTRY POINTS- ENTERED AT ZZRESCAN.                                   *\n*        ENTERED AT ZZRSEF ON EOF ON SYSIN                            *\n*                                                                     *\n*INPUT- SYSIN WHICH CONSISTS OF CONTROL STATEMENTS.                   *\n*                                                                     *\n*OUTPUT- SYSPRINT WHICH CONTAINS THE DIAGNOSTIC MESSAGES AND THE      *\n*        CONTENTS OF SYSIN                                            *\n*                                                                     *\n*EXITS-  ERROR- IF AN ERROR OCCURS, A CODE IS STORED, A MESSAGE IS    *\n*        GIVEN TO THE USER EXPLAINING THE ERROR CONDITION AND A       *\n*        RETURN TO THE CALLING PROGRAM IS GIVEN.                      *\n*                                                                     *\n*EXTERNAL ROUTINES- READ CARD (GET), PRINT CARD OR ERROR MESSAGE (PUT)*\n*                                                                     *\n*TABLES/WORK AREAS-                                                   *\n*      -KEYTAB-    LIST OF VALID KEYWORDS                             *\n*      -COMDTABL-  LIST OF VALID COMMAND WORDS                        *\n*      -CCIMAGE-   BUFFER CONTAINING CONTROL CARD IMAGE               *\n*      -INDD TABLE-POINTED TO BY INBEGIN                              *\n*      -SE TABLE-  POINTED TO BY SEBEGIN                              *\n*      -CTAD-      POINTER TO CONTROL TABLE BUILT WHEN SELECTIVE LINK *\n*      -PARMSWCH-  INTERNAL SCAN SWITCHES                             *\n*      -CCSWITCH-  EXTERNAL SCAN SWITCHES                             *\n*      -COMDCDSW-  EXTERNAL SCAN SWITCHES                             *\n*      -CPARAMSW-  INTERNAL SCAN SWITCHES                             *\n*      -SV2-       REGISTER SAVE AREA                                 *\n*                                                                     *\n*ATTRIBUTES- SERIAL REUSABLE                                          *\n*                                                                     *\n         EJECT\n         SPACE 1\n*                                                                     *\n*                    SCAN ROUTINE CONSTANTS                           *\n*                                                                     *\nANAT     EQU   C'@'                    NATIONAL SYMBOL- OKAY IN MEMBER\nAPOUND   EQU   C'#'                    NATIONAL SYMBOL- OKAY IN MEMBER\nADOLLAR  EQU   C'$'                    NATIONAL SYMBOL- OKAY IN MEMBER\nAC       EQU   C'L'\nANA      EQU   X'C0'                   START OF VALID CHARACTER\nEQUAL    EQU   C'='                    HEX 'EQUAL'\nCOMMA    EQU   C','                    HEX 'COMMA'\nBLANKCOL EQU   C' '                    HEX 'BLANK'\nPARENLFT EQU   C'('                    LEFT PARENTHESIS\nPARENRGT EQU   C')'                    RIGHT PARENTHESIS\nCRESET0  EQU   X'00'                   RESETS SWITCHES\n         SPACE 1\n*                                                                     *\n*                      SYMBOLIC REGISTER FOR SCAN                     *\n         SPACE 1\nLENGTH   EQU   9                       LENGTH OF PARAMETER REGISTER 9\nSCANADR  EQU   1                       ADDRESS OF PARAMETER REGISTER 1\nGR0      EQU   0\nGR1      EQU   1\nGR2      EQU   2\nGR3      EQU   3\nGR4      EQU   4                       COMMUNICATION AREA POINTER\nGR5      EQU   5\nGR6      EQU   6\nGR7      EQU   7\nGR8      EQU   8\nGR9      EQU   9\nGR10     EQU   10\nGR11     EQU   11\nGR12     EQU   12                      REGISTER USED FOR BASE ADDRESS\nGR13     EQU   13\nGR14     EQU   14\nGR15     EQU   15\nFF       EQU   X'FF'              ALL BITS ON\nLEN8     EQU   8                  LENGTH OF COMMAND OR KEYWORD\nLEN12    EQU   12                 LENGTH OF ENTRY\nSAV4     EQU   4                  OLD SAVE AREA\nSAV8     EQU   8                  SAVE\nTABLE0   EQU   0                  ZERO TABLE DISPLACEMENT\nINDD1    EQU   1                  ENTRIES IN INDD TABLE\nLEN10    EQU   10                 LENGTH OF  10\nLEN2     EQU   2                  LENGTH OF  2\nLEN4     EQU   4                  LENGTH OF  4\nCOL71    EQU   71                 COLUMN 72\nCOL70    EQU   70                 COLUMN 71\nSCAN0    EQU   0                  COLUMN BEING SCANNED\nUP1      EQU   1                  COLUMN UPDATE\nPARCNT   EQU   X'01'              PARENTHESIS COUNT\nMS7      EQU   7                  MASK OF 7\nMS5      EQU   5                  MASK OF 5\nEX       EQU   C'E'               E FOR EXCLUDE\nIN       EQU   C'I'               I FOR INCLUDE\nCOMPCD   EQU   C'4'               COMPLETION CODE\nCOMPCDE  EQU   C'8'               COMPLETION CODE                A44144\nMS8      EQU   8                  MASK OF 8\nLEN3     EQU   3                  LENGTH OF 3\nMS2      EQU   2                  MASK OF 2\n         EJECT\n         SAVE  (14,12),,*\n*\n*                    BASE ADDRESS REGISTER GR12-- COMMUNICATION AREA 4\n*\n         BALR  GR12,GR0           ESTABLISH ADDRESSABILITY\n         USING NEXT,GR12\n         USING ZZRELCOM,4\n         SPACE 1\nNEXT     EQU   *\n         ST    GR13,SV2+SAV4      SAVE POINTER TO OLD SAVE AREA\n         LA    GR15,SV2                NEW SAVE AREA THIS CSECT\n         ST    GR15,SAV8(GR13)    POINTER TO NEW SAVE AREA IN OLD\n         LR    GR13,GR15               POINTER TO THIS CSECT SAVE AREA\n         SPACE 1\n         TM    CCSWITCH,SYSINEOF       END OF FILE ON LAST READ\n         BO    TERMS              YES- TERMINATE JOB-- SYSIN DONE\n         TM    PARMSWCH,FLUSHSW        FLUSHING\n         BO    IGNORE             YES- GET NEXT CARD\n         TM    CCSWITCH,ZZRLINKC       HAVE ZZRLINK CONTROL CARDS\n         BO    SCANERRM           YES- MIXED CODES\n         NI    COMDCDSW,FF-SELECTSC-EXCLUDES-MEMBRCD1 RESET SWITCHES\n         B     TOSCAN                  CONTINUE\n         SPACE 1\nIGNORE   EQU   *\n         TM    CPARAMSW,COL72BLK       IS THIS CARD CONTINUED    A48742\n         BO    IGNRENXT                NO                        A48742\n         NI    SCANSWCH,FF-NOCMMEXP    RESET BYPASS SCAN SWITCH  A48742\n         B     IGNOREON                AND CONTINUE              A48742\nIGNRENXT EQU   *                                                 A48742\n         OI    SCANSWCH,NOCMMEXP       SET BYPASS SCAN SWITCH    A48742\nIGNOREON EQU   *                                                 A48742\n         MVI   COMDCDSW,CRESET0\n         MVI   CCDELIM2,CRESET0\n         TM    CCSWITCH,CARDPRTD  WAS THE CARD PRINTED           A48800\n         BO    GOONSC             YES                            A48800\n         BAL   GR9,PRNTCRD        NO, PRINT THE CARD             A48800\n         SPACE 1\nGOONSC   EQU   *\n         MVI   CCSWITCH,CRESET0        CLEAR SWITCHES FIRST TIME THRU\nGOONS    EQU   *\n         MVI   CPARAMSW,READ1          FORCE READ FIRST CONTROL CARD\n         SPACE 1\nTOSCAN   EQU   *\n         BAL   GR14,RDCARD             GO TO CONTROL CARD SCAN\nRETRTOSC EQU   *\n         L     LENGTH,CSTOREG          LENGTH OF PARAMETER\n         L     SCANADR,CSTOREG+SAV4 START OF PARAMETER\n         LTR   LENGTH,LENGTH           IS SCAN LENGTH ZERO\n         BZ    BADPARM                 BAD PARAMETER\n         TM    CCSWITCH,COMDNOW        IS COMMAND SWITCH ON\n         BO    OPRLUP             YES- CHECK COMMAND WORDS\n*                                                                     *\n*   KEYWORD LOOKUP ROUTINE\n         LA    GR5,KEYTAB              START OF KEY WORD TABLE\n         LA    GR7,KEYEND              END OF KEY WORD TABLE\n         B     SCANTBL                 SEARCH FOR KEY WORD\n         SPACE 1\n*   COMMAND WORD LOOKUP TABLE\nOPRLUP   LA    GR5,COMDTABL            START OF COMMAND TABLE\n         LA    GR7,COMDEND             END OF COMMAND TABLE\nSCANTBL  EQU   *\n         LA    GR6,LEN8           MAXIMUM LENGTH OF KEYWORD OR COMMAND\n         CR    LENGTH,GR6              TEST IF LENGTH EXCEEDS 8\n         BH    PRTBAD                  PRINT BAD CARD\n         LA    GR6,LEN12          INCREMENT VALUE- 12 BYTE ENTRIES\n         MVC   SARG(LEN8),BLANKS8 MOVE BLANKS TO SEARCH ARGUMENT\n         BCTR  LENGTH,GR0         DECREMENT FOR EXECUTE COUNT\n         EX    LENGTH,OPRLUP3          MOVE PARAMETER TO 'SARG'\nOPRCMP   CLC   SARG(LEN8),TABLE0(GR5) TEST IF SEARCH ARGUMENT IN TABLE\n         BNE   OPRLUP2                 NO- CONTINUE SCAN OF TABLE\n         LA    GR5,LEN8(GR5)      ENTRY ADDRESS OF ROUTINE\n         BR    GR5                     ENTER PROPER ROUTINE\nOPRLUP2  BXLE  GR5,GR6,OPRCMP          LOOP TO CONTINUE SCAN\nPRTBAD   EQU   *\n         LA    GR2,INALCNTR            INVALID COMMAND OR KEYWORD\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         EJECT\n*     COMMAND LOOKUP TABLE\n* FORMAT OF TABLE -\n*     1) KEYWORD OR ABBREVIATION (ALWAYS AN 8-BYTE 'DC')\n*     2) BRANCH TO ANALYZER SUBROUTINE\nCOMDTABL DS    0F                      START OF VALID COMMAND TABLE\n         DC    C'LINK    '        KEYWORD\n         B     CHKLINK            BRANCH TO ANALYZER\n         DC    C'L       '        ABBREVIATION\n         B     CHKLINK            BRANCH TO ANALYZER\n* SUBSEQUENT TABLE ELEMENTS ARE IN SAME FORMAT AS THE ABOVE\n         DC    C'EXCLUDE '\n         B     CHKEXCLD           CHECK EXCLUDE\n         DC    C'E       '\n         B     CHKEXCLD           CHECK EXCLUDE\n         DC    C'SELECT  '\n         B     CHKSELCT           CHECK SELECT\nCOMDEND  DC    C'S       '             END OF COMMAND WORD TABLE\n         B     CHKSELCT           CHECK SELECT\n         EJECT\n*     KEYWORD LOOKUP TABLE\n* FORMAT OF TABLE -\n*     1) KEYWORD OR ABBREVIATION (ALWAYS AN 8-BYTE 'DC')\n*     2) BRANCH TO ANALYZER SUBROUTINE\nKEYTAB   DS    0F                 START OF KEY WORD TABLE\n         DC    C'MEMBER  '        KEYWORD\n         B     MEMBRANL           BRANCH TO ANALYZER\n         DC    C'M       '        ABBREVIATION\n         B     MEMBRANL           BRANCH TO ANALYZER\n* SUBSEQUENT TABLE ELEMENTS ARE IN SAME FORMAT AS THE ABOVE\n         DC    C'OUTDD   '\n         B     OUTDDANL           CHECK OUTDD\n         DC    C'O       '\n         B     OUTDDANL           CHECK OUTDD\n         DC    C'INDD    '\n         B     INDDANL            CHECK INDD\nKEYEND   DC    C'I       '\n         B     INDDANL            CHECK INDD\n         EJECT\n         SPACE 1\n         SPACE 1\nOUTDDANL EQU   *\n         TM    PARMSWCH,FLUSHSW        DOING A FLUSH\n         BO    IGNORE             YES- SKIP THIS CARD\n         TM    PARMSWCH,LINKNOW        ON LINK STATEMENT\n         BZ    INVALODL           ERROR- OUTDD NOT ON LINK CARD\n         SPACE 1\nCOMPRETN EQU   *                       RETURN POINT AFTER MESSAGE\n         OI    COMDCDSW,NEWOUT         SET OUTDD SCANNED SWITCH\n*                                        LINK OPERATION HAS BEEN FOUND\n         TM    CPARAMSW,DELIMEND       NAME ON NEXT CARD (= IN COL 71)\n         BZ    PICKNAME           NO- NORMAL PROCESSING\n         BAL   GR10,GETPARM            GET NEXT CARD- POSITION TO PARM\n         SPACE 1\nPICKNAME EQU   *\n         BAL   GR14,RDCARD             GET PARAMETER\n         L     SCANADR,CSTOREG+SAV4 START OF PARAMETER\n         L     LENGTH,CSTOREG          SIZE OF PARAMETER\n         LA    GR6,LEN8           MAXIMUM LENGTH OF NAME\n         CR    GR6,LENGTH\n         BL    BADPARM                 NAME GREATER THAN 8 BYTES\n         MVC   OUTNAME(LEN8),BLANKS8\n         MVC   OUTNAME(LENGTH),SCAN0(SCANADR)\n         TM    CCSWITCH,LASTPARM       LAST PARAMETER ON CARD\n         BZ    TOSCAN             NO- CHECK FOR LIST OPTION\n         B     CHKCOMSC                CHECK FOR CONTINUED COMMENTS\n         SPACE 1\nCHKCOMSC EQU   *\n         TM    CPARAMSW,COL72BLK       CONTINUED CARD\n         BZ    LINKALLD           FINISH UP LINK CARD SCAN\n         BAL   GR9,CHK4COMT            CHECK FOR CONTINUED COMMENTS\nLINKALLD EQU   *\n         OI    COMDCDSW,LINKDONE       SET DONE WITH LINK CARD SWITCH\n         MVI   PARMSWCH,CRESET0        RESET ALL, ESPECIALLY 'LINKNOW'\n         B     GOONSC                  GET NEXT CARD\n         SPACE 1\nCHKEXCLD EQU   *\n         TM    PARMSWCH,FLUSHSW        FLUSHING\n         BO    IGNORE             YES- IGNORE THIS CARD\n         TM    COMDCDSW,SELECTSC       SELECT CARD AHEAD\n         BO    MULTS              YES- ERROR TO HAVE BOTH\n         LA    GR7,RETRNEV             RETURN ADDRESS\n         TM    COMDCDSW,EXCLUDES       MULTIPLE EXCLUDES\n         BZ    TESTCSE            NO\n         B     MULTSET                 SET MULTIPLE S/E SWITCH\n         SPACE 1\nRETRNEV  EQU   *\n         OI    COMDCDSW,EXCLUDES       SET EXCLUDE SWITCH\n         NI    COMDCDSW,FF-MEMBRCD1    INDIC MEMBER KEYWORD FOR  A38724\n*           THIS EXCLUDE COMMAND NOT YET FOUND                   A38724\n         B     TOSCAN                  CONTINUE\n         SPACE 1\nCHKSELCT EQU   *\n         LA    GR7,SELCTOK             RETURN FROM FOLLOWING ROUTINE\n         TM    PARMSWCH,FLUSHSW        DOING A FLUSH\n         BO    IGNORE             YES- SKIP THIS CARD\n         TM    COMDCDSW,EXCLUDES       EXCLUDE CARD AHEAD OF SELECT\n         BO    MULTS              YES- ERROR TO MIX THEM\n         TM    COMDCDSW,SELECTSC       PREVIOUS SELECT\n         BZ    TESTCSE            ONLY ONE SELECT\nMULTSET  EQU   *\n         OI    CCSWITCH,MULTSE         MULTIPLE SELECT/EXCLUDE\nTESTCSE  EQU   *\n         TM    PARMSWCH,COMDPART       PART OF COMMAND ON NEXT CARD\n         BZ    NOGOON             NO- GO ON AND PRINT CARD\n         MVI   PARMSWCH,CRESET0        RESET ENTIRE SWITCH\n         B     AFTRPRT                 DO NOT PRINT CARD\n         SPACE 1\nNOGOON   EQU   *\n         BAL   GR9,PRNTCRD             PRINT THE CARD\nAFTRPRT  EQU   *\n         TM    COMDCDSW,NEWINDD        HAVE AN INDD\n         BZ    NOINDDSP           NO- SEQUENCE ERROR\n         TM    CCSWITCH,LASTPARM       MORE PARAMETERS ON CARD\n         BO    NULLP              NO- MUST HAVE MEMBER KEYWORD\n         NI    CCSWITCH,FF-COMDNOW RESET COMMAND WORD SWITCH\n         BR    GR7                     RETURN\n         SPACE 1\nSELCTOK  EQU   *\n         OI    COMDCDSW,SELECTSC       SET SELECT SWITCH\n         NI    COMDCDSW,FF-MEMBRCD1    INDIC MEMBER KEYWORD FOR  A38724\n*           THIS EXCLUDE COMMAND NOT YET FOUND                   A38724\n         B     TOSCAN                  CONTINUE\n         SPACE 1\nINDDANL  EQU   *\n         TM    PARMSWCH,FLUSHSW        DOING A FLUSH\n         BO    IGNORE             YES- SKIP THIS CARD\n         TM    CCSWITCH,ZZRLINKC       ZZRLINK STATEMENTS\n         BO    SCANERRM           YES- MIXED MODES\n         TM    PARMSWCH,LINKNOW        INDD ON LINK CARD\n         BO    NEXTI              YES\n         TM    COMDCDSW,SELECTSC+EXCLUDES  JUST GOT SELECT OR EXCLUDE\n         BM    RESETIN            YES- DO A LINK\n         BAL   GR9,PRNTCRD             PRINT INDD CARD\n         TM    COMDCDSW,NEWINDD        JUST HAD AN INDD\n         BO    STRMEMBS           ADD THESE NAMES TO TABLE\n         NI    CCSWITCH,FF-MULTSE RESET MULTIPLE S/E SWITCH\n         B     GOGOGO                  GO BUILD THE INDD TABLE\n         SPACE 1\nNEXTI    EQU   *\n         TM    COMDCDSW,NEWINDD        INDD ON LINK CARD ALREADY\n         BO    SCANERR            YES- ONLY ONE INDD PER LINK CARD\nGOGOGO   EQU   *\n         OI    COMDCDSW,NEWINDD        FLAG AS HAVE AN INDD\n         NI    COMDCDSW,FF-SELECTSC-EXCLUDES-MEMBRCD1 RESET SWITCHES\n         SPACE 1\n**********                                                   **********\n**********         BUILD TABLE OF INDD NAMES                 **********\n**********                                                   **********\n         SPACE 1\n         XC    COUNT(LEN2),COUNT  CLEAR COUNT\n         XC    ENCT(LEN2),ENCT    CLEAR SE TABLE ENTRY COUNT\n         XC    NNCT1(LEN2),NNCT1  CLEAR NEW NAME COUNT\n         XC    INDDCT(LEN2),INDDCT CLEAR INDD COUNT\n         MVC   SESTOP(LEN4),INBEGIN NO SE OR INDD ENTRIES YET\nSTRMEMBS EQU   *\n         TM    CPARAMSW,DELIMEND       NAME ON NEXT CARD (= IN 71)\n         BZ    CONTSC             NO- CONTINUE NORMAL PROCESSING\nGETNEXTC EQU   *\n         LA    GR10,SCANSOME           RETURN FROM FOLLOWING ROUTINE\n         SPACE 1\n*  ROUTINE 'GETPARM' READS NEXT CARD AND POSITIONS TO CONTINUATION\n*   PARAMETER. GR10 SET ON ENTRY TO ROUTINE WITH RETURN ADDRESS.\n         SPACE 1\nGETPARM  EQU   *\n         BAL   GR9,READCC              GET NEXT CARD\n         BAL   GR9,PRNTCRD             PRINT THE CARD\n         MVI   CPARAMSW,CRESET0        CLEAR PARAMETER SWITCH\n         CLI   CCIMAGE+COL71,BLANKCOL COL 72 BLANK\n         BE    ARNDNXT                 YES- NOT CONTINUED\n         OI    CPARAMSW,COL72BLK       SET COLUMN 72 NOT BLANK SWITCH\nARNDNXT  EQU   *\n         LA    GR6,CCIMAGE+COL70  END OF CARD PARAMETER COLUMN\n         BAL   GR9,NAMESCAN            SCAN OVER NAME IF ANY\n         SPACE 1\nLOOP2    EQU   *\n         CLI   SCAN0(GR3),BLANKCOL COLUMN BLANK\n         BNE   STRTPARM                NO- START OF PARAMETER\nLOOPPARM EQU   *\n         LA    GR3,UP1(GR3)       UPDATE TO NEXT COLUMN\n         CR    GR3,GR6\n         BNH   LOOP2                   SCAN TO COLUMN 71\n         B     GETPARM                 GET NEXT CARD\n         SPACE 1\nSTRTPARM EQU   *\n         ST    GR3,CSTOREG+SAV8   STORE START OF PARAMETER\n         NI    PARMSWCH,FF-COMDPART RESET PARAMETER CONTINUED SWITCH\n         OI    CPARAMSW,PARMCOME       SET TO EXPECT PARAMETER\n         BR    GR10                    RETURN\n         SPACE 1\nCONTSC   EQU   *\n         L     GR3,CSTOREG+SAV8   COLUMN TO START SCAN\n         NI    CCSWITCH,FF-UNECPARN RESET PARENTHESIS SWITCH\n         XC    LEFTPCNT(LEN4),LEFTPCNT CLEAR PARENTHESIS COUNT BUFFER\n         CLI   SCAN0(GR3),PARENLFT  START WITH LEFT PAREN\n         BNE   SCANSOME                GET NEXT PARAMETER\n         OI    CCSWITCH,UNECPARN       SET PARENTHESIS SWITCH\n         LA    GR3,UP1(GR3)       UP TO ACTUAL NAME- SET 4 BCTR\n         MVI   LEFTPCNT+UP1,PARCNT MAKE LEFT PAREN COUNT 1\nSCANSOME EQU   *\n         NI    PARMSWCH,LINKNOW        RESET ALL BUT LINK NOW SWITCH\n         SR    GR7,GR7                 CLEAR PARAMETER SIZE\n         BCTR  GR3,GR0            BACK UP POINTER\n         SPACE 1\n***********************************************************************\n*** START OF GENERAL INDD OR MEMBER NAME SCAN ROUTINE AT INDDLOOP.  ***\n***********************************************************************\n         SPACE 1\nINDDLOOP EQU   *\n         LA    GR3,UP1(GR3)       UP TO NEXT COLUMN\n         TM    CPARAMSW,DELIMEND       UP TO 71\n         BZ    NOGET              NO\n         BAL   GR10,GETPARM            GET PARAMETER FROM NEXT CARD\nNOGET    EQU   *\n         BAL   GR9,TESTLAST            CHECK IF UP TO COLUMN 71\n         CLI   SCAN0(GR3),COMMA   COMMA\n         BH    TRYNAME                 NO- HIGHER THAN COMMA\n         BE    CHKCOMMA                YES- DELIMITER\n         CLI   SCAN0(GR3),PARENLFT     LEFT PARENTHESIS\n         BE    CHKPARNL                YES\n         CLI   SCAN0(GR3),PARENRGT     RIGHT PARENTHESIS\n         BE    CHKPARNR                YES\n         CLI   SCAN0(GR3),ADOLLAR      IS IT A NATIONAL SYMBOL '$'\n         BE    STRNAME                 YES- OKAY\n         CLI   SCAN0(GR3),BLANKCOL     BLANK\n         BNE   BADPARM                 BAD PARAMETER\n         TM    PARMSWCH,SCANNAME       BEEN SCANNING NAME\n         BO    BLNKSTP                 YES- STOP NAME SCAN\n         SPACE 1\nSET4READ EQU   *\n         CLC   LEFTPCNT(LEN2),RGHTPCNT EQUAL NUMBER LEFT AND RIGHT PARE\n         BNE   MISSPARN                ERROR- MISSING PARENTHESIS\n         TM    CPARAMSW,COL72BLK       CARD CONTINUED\n         BZ    GOONS                   NO GET NEXT CARD\n         BAL   GR9,CHK4COMT            CHECK FOR CONTINUED COMMENTS\n         B     GOONS                   GET NEXT CARD\n         SPACE 1\nCHK4COMT EQU   *\n         ST    GR9,SARG                SAVE RETURN ADDRESS\n         LA    GR6,CCIMAGE+COL71       COLUMN 72\nLOOPCOM  EQU   *\n         CLI   SCAN0(GR3),BLANKCOL     NEXT COLUMN BLANK\n         BNE   ACOMMENT                NO- START OF COMMENT\n         LA    GR3,UP1(GR3)\n         CR    GR3,GR6                 END OF CARD NO COMMENT FOUND\n         BNE   LOOPCOM                 CONTINUE COMMENT SCAN\n         B     CONTINV                 INVALID CONTINUATION      A48799\n         SPACE 1\nACOMMENT EQU   *\n         BAL   GR9,READCC              READ NEXT CARD\n         BAL   GR9,PRNTCRD             PRINT THE COMMENT CARD\n         CLI   CCIMAGE+COL71,BLANKCOL  COMMENT CONTINUED\n         BNE   ACOMMENT                YES- GET NEXT COMMENT CARD\n         NI    CPARAMSW,FF-COL72BLK    RESET CONTINUED SWITCH\n         L     GR9,SARG                LOAD RETURN ADDRESS\n         BR    GR9                     RETURN TO CALLER\n         SPACE 1\nCHKIFSTP EQU   *\n         LA    GR3,UP1(GR3)\n         TM    PARMSWCH,COMDPART       UP TO COL 71 PARM CONTINUED\n         BO    GETNEXTC                YES- GET NEXT CARD\n         CLI   SCAN0(GR3),BLANKCOL     NEXT COLUMN BLANK\n         BNE   SCANSOME                NO- SCAN SOME MORE\n         B     CHKCONTY                CHECK IF CARD CONTINUED\n         SPACE 1\nTRYNAME  EQU   *\n         CLI   SCAN0(GR3),ANA\n         BNL   STRNAME                 OKAY- ALPHABETIC OR NUMERIC\n         SPACE 1\n*  THREE NATIONAL SYMBOLS ALLOWED IN MEMBER NAMES- 'AT' SIGN, POUND\n*    SIGN, AND DOLLAR SIGN. CHECK BEFORE FOR DOLLAR SIGN MUST CHECK\n*    HERE FOR 'AT' AND POUND SYMBOL.\n         SPACE 1\n         CLI   SCAN0(GR3),ANAT         IS IT AN 'AT' SIGN\n         BE    STRNAME                 YES- OKAY\n         CLI   SCAN0(GR3),APOUND       IS IT A 'POUND' SIGN\n         BE    STRNAME            YES - OKAY\n         CLI   SCAN0(GR3),EQUAL        COULD IT BE AN EQUAL SIGN\n         BNE   BADPARM            IF ITS NOT, ITS INVALID\n         TM    COMDCDSW,MEMBRCD1       EQUAL SIGN IN MEMBER NAME SCAN\n         BO    BADPARM                 YES- NOT ALLOWED\n         TM    PARMSWCH,LINKNOW        EQUAL SIGN WITH INDD ON LINK\n         BZ    BADPARM                 NO- NOT ALLOWED IF NOT ON LINK\n         TM    PARMSWCH,COMDPART       DELIMITER IN COLUMN 71\n         BZ    TSTDLM                  NOT IN 71\n         OI    CPARAMSW,DELIMEND       SET IN 71 SWITCH\nTSTDLM   EQU   *\n         TM    CPARAMSW,CONTINY        PARAMETER WAS CONTINUED\n         BZ    SETRETOK                NO\n         NI    CCSWITCH,FF-COMDNOW     RESET COMMAND SWITCH\n         BAL   GR9,KCREATE             RECREATE KEYWORD\n         OI    CPARAMSW,PARMCOME  SET BIT\n         SPACE 1\n*          NAME NOT SCANNED, IF AN EQUAL SIGN IS A KEYWORD, POINTERS\n*   ALL SET,   GO TO KPASS AND WILL RETURN TO CHECK KEYWORD JUST AS IF\n*   RDCARD ROUTINE HAD SCANNED THE KEYWORD.\n         SPACE 1\nSETRETOK EQU   *\n         LA    GR14,RETRTOSC           RETURN FROM INITIALIZED 'KPASS'\n         ST    GR14,SARG               STORE RETURN SO RDCARD CAN FIND\n         B     KPASS                   SET UP AS IF 'RDCARD' SCANNED\n         SPACE 1\nSTRNAME  EQU   *\n         LA    GR7,UP1(GR7)            UP COUNT OF CHARACTERS IN NAME\n         TM    PARMSWCH,SCANNAME       ALREADY SCANNING NAME\n         BO    ALLSCAN                 YES\n         OI    PARMSWCH,SCANNAME       SET NAME SCANNING SWITCH\n         LR    GR1,GR3                 LOAD POINTER TO START OF NAME\nALLSCAN  EQU   *\n         TM    PARMSWCH,COMDPART       CONTINUED NAME\n         BZ    SAMECARD                NO- CARD COMPLETE\n         OI    CPARAMSW,CONTINY        SET TO CONTINUE ON NEXT CARD\n         LA    GR14,INDDLOOP           RETURN ADDRESS\n         ST    GR14,SARG               STORE RETURN ADDRESS FOR SCAN\n         B     KPART                   SET UP FIRST PART OF PARAMETER\n         SPACE 1\nSAMECARD EQU   *\n         TM    CPARAMSW,DELIMEND       CHARACTER IN 71, NOT CONTINUED\n         BZ    INDDLOOP                NO- CONTINUE SCAN\n         B     ENDNAME                 STORE NAME\n         SPACE 1\nCHKPARNL EQU   *\n*\n*    NAMES ON MEMBER STATEMENT ONLY IN () IF RENAME OR REPLACE OPTION\n*   WAS SPECIFIED.  HOWEVER, FOR COMPATIBILITY, ALSO ALLOW LIST OF\n*   MBR NAMES WITHIN PARENS.\n*\n         TM    CCSWITCH,ZZRLINKC       ZZRLINK CONTROL CARDS\n         BZ    TSTRGHT                 NO\n         NI    PARMSWCH,FF-ONELEFT     RESET LEFT PARENTHESIS SWITCH\n         B     CONTCPPY           ADD 1 TO LEFT-PAREN COUNT\n         SPACE 1\nTSTRGHT  EQU   *\n         TM    COMDCDSW,EXCLUDES       REPLACE/RENAME ON EXCLUDE\n         BO    NORENAME           IF SO, ITS INVALID\n         TM    PARMSWCH,ONELEFT   WAS A LEFT PAREN ALREADY SCANNED\n         BO    BADREPLC                YES- INVALID REPLACE SPECIFIED\n         OI    PARMSWCH,SET4REPL+ONELEFT  SET SWITCHES FOR REPLACE\n         SPACE 1\nCONTCPPY EQU   *\n         LH    GR6,LEFTPCNT\n         LA    GR6,UP1(GR6)            UP COUNT BY 1\n         STH   GR6,LEFTPCNT            STORE NEW COUNT\n         TM    PARMSWCH,SCANNAME       LEFT PAREN WHILE SCAN OF NAME\n         BO    BADREPLC                YES- INVALID REPLACE SPECIFIED\n         B     INDDLOOP                CONTINUE SCAN\n         SPACE 1\nCHKDUPC  EQU   *\n         TM    CPARAMSW,DELIMEND       COMMA IN COLUMN 71\n         BO    ENDNAME                 YES- END SCAN OF NAME\n         CLI   UP1(GR3),COMMA          NEXT CHARACTER ALSO A COMMA\n         BE    NULLP                   YES- NULL PARAMETER ERROR\n         CLI   UP1(GR3),PARENRGT       IS COMMA FOLLOWED BY RIGHT PAREN\n         BE    NULLP              YES - NULL PARAMETER\n         B     ENDNAME                 CONTINUE\n         SPACE 1\nBLNKSTP  EQU   *\n         MVI   CCDELIM,BLANKSGN        SET AS DELIMITER A BLANK\nENDNAME  EQU   *\n         TM    CPARAMSW,CONTINY        PARM CONTINUED\n         BZ    NOCONT                  NO\n         NI    CCSWITCH,FF-COMDNOW     RESET COMMAND SWITCH\n         BAL   GR9,KCREATE             YES- RECREATE PARAMETER\nNOCONT   EQU   *\n         LA    GR9,LEN8\n         CR    GR7,GR9\n         BH    BADPARM                 BAD PARAMETER\n         L     GR8,SESTOP              NEXT SLOT IN INDD TABLE\n         MVC   TABLE0(LEN10,GR8),FLAGBYTS  CLEAR FLAGS, BLANK NAME\n         BCTR  GR7,GR0                 DECREMENT COUNT FOR EXECUTE\n         EX    GR7,MOVEDDNM            MOVE DD NAME TO TABLE\n         NI    PARMSWCH,FF-SCANNAME    RESET SCANNING NAME SWITCH\n         TM    COMDCDSW,MEMBRCD1       MEMBER STATEMENT\n         BO    MEMBRCD                 YES- HANDLE DATA SET NAMES\n         TM    PARMSWCH,SET4REPL       THIS NAME A REPLACE\n         BZ    REGNAME                 NO- CONTINUE\n         OI    TABLE0(GR8),REPLACOP    SET REPLACE OPTION BIT\n         NI    PARMSWCH,FF-SET4REPL-HASNEWNM  RESET SWITCHES\n         SPACE 1\nREGNAME  EQU   *\n         LH    GR6,INDDCT\n         LA    GR6,UP1(GR6)            UP DD COUNT\n         STH   GR6,INDDCT              STORE NEW COUNT\n         LA    GR8,LEN10(GR8)          NEXT SLOT IN INDD BUFFER\n         ST    GR8,SESTOP              END OF SE TABLE\n         SR    GR7,GR7                 CLEAR COUNT REGISTR\n         TM    CCDELIM,BLANKSGN        END OF NAMES REACHED\n         BZ    INDDLOOP                NO- SCAN FOR MORE NAMES\n         CLI   SCAN0(GR3),COMMA        REALLY STOPPED AT A COMMA\n         BE    CHKCONTY                YES\nISDONE   EQU   *\n         NI    PARMSWCH,FF-LINKNOW     RESET LINK CARD SCAN SWITCH\n         TM    COMDCDSW,NEWOUT         HAD AN OUTDD ON LINK CARD\n         BZ    NOINDDSP                NO OUTDD SPECIFIED\n         OI    COMDCDSW,LINKDONE+NEWOUT+NEWINDD BE SURE ALL ARE SET\n         B     SET4READ                GET NEXT CARD\n         SPACE 1\nRESETIN  EQU   *\n         NI    COMDCDSW,FF-NEWINDD     RESET HAVE AN INDD SWITCH\n         LA    GR3,CCIMAGE             START OF CARD\n         NI    CPARAMSW,COL72BLK       RESET ALL BUT CONTINUATION PUNCH\n         ST    GR3,CSTOREG+SAV8        STORE COLUMN TO SCAN NEXT\n         NI    CCSWITCH,CRESET0        CLEAR SWITCH\n         B     GETOUT                  RETURN TO MAINSTREAM\n         SPACE 1\nTESTLAST EQU   *\n         LA    GR5,CCIMAGE+COL70       LAST COLUMN (71)\n         CR    GR3,GR5                 UP TO COLUMN 71\n         BCR   MS7,GR9                 NO- CONTINUE\n         OI    CPARAMSW,DELIMEND       CHARACTER IN COLUMN 71\n         TM    CPARAMSW,COL72BLK       CONTINUATION PUNCH IN COLUMN 72\n         BO    SETCONT                 SET FOR CONTINUED PARAMETER\n         MVI   CCDELIM,BLANKSGN        SET TO STOP SCAN\n         BR    GR9                     RETURN\nSETCONT  EQU   *\n         OI    PARMSWCH,COMDPART       SET AS CONTINUED PARAMETER\n         BR    GR9                     RETURN\n         SPACE 1\nCHKCOMMA EQU   *\n         TM    PARMSWCH,SCANNAME       SCANNING NAME\n         BZ    CHKIFSTP                NO- CHECK IF CAN STOP (N,R),NAME\n         TM    CPARAMSW,DELIMEND       COMMA IN COLUMN 71\n         BO    CHKCONT                 YES                       A45150\n         CLI   UP1(GR3),BLANKCOL       NEXT COLUMN BLANK         A45150\n         BNE   NOCMBLNK                NO                        A45150\nCHKCONT  EQU   *                                                 A45150\n         TM    PARMSWCH,SET4REPL+HASNEWNM REPLACE/RENAME SPECIFIED\n         BC    MS5,CONTINV             YES ILLEGAL TO CONTINUE\n         TM    CPARAMSW,COL72BLK       PUNCH IN COLUMN 72\n         BZ    CONTINV                 NO- CONTINUATION ERROR\n         CLI   UP1(GR3),BLANKCOL       NEXT COLUMN BLANK\n         BE    BLNKSTP                 YES\nNOCMBLNK EQU   *                                                 A45150\n         TM    PARMSWCH,SET4REPL       REPLACE EXPECTED\n         BZ    CHKDUPC            NO - CHECK NEXT COLUMN FIRST\n         NI    PARMSWCH,FF-ONELEFT     RESET LEFT PARENTHESIS SWITCH\n         TM    COMDCDSW,MEMBRCD1       DOING MEMBER SCAN\n         BO    REPMEMB                 YES CHECK RENAME REPLACE\n         SPACE 1\nON2TST   EQU   *\n         TM    CPARAMSW,DELIMEND\n         BO    CONTINV            INVALID TO CONTINUE REPLACE    A48799\n         LA    GR3,UP1(GR3)       UP SCAN POINTER                A48799\n         BAL   GR9,TESTLAST       CHECK IF UP TO COLUMN 71       A48799\n         TM    CPARAMSW,DELIMEND  UP TO COLUMN 71                A48799\n         BO    CONTINV            INVALID TO CONTINUE REPLACE    A48799\n         CLC   SCAN0(LEN2,GR3),RPARN  DOES 'R)' FOLLOW           A48799\n         BNE   BADREPLC           IF NOT, ITS INVALID\n         LA    GR3,UP1(GR3)       UP SCAN POINTER                A48799\n         BAL   GR9,TESTLAST            CHECK IF UP TO COLUMN 71  A45185\n         SPACE 1\nCHKPARNR EQU   *\n         TM    PARMSWCH,ONELEFT        WAS SWITCH RESET\n         BO    BADREPLC           IF NOT, INVALID CTL CARD\n         LH    GR6,RGHTPCNT\n         LA    GR6,UP1(GR6)            UP COUNT RIGHT PARENS\n         STH   GR6,RGHTPCNT            STORE NEW COUNT\n         CLC   LEFTPCNT(LEN2),RGHTPCNT COMPARE PARENTHESIS COUNT\n         BNE   CHKIFUNC                CHECK IF STARTED WITH LEFT PAREN\n         TM    CCSWITCH,UNECPARN       STARTED WITH PARENTHESIS\n         BZ    ALLOK                   NO\n         CLI   UP1(GR3),BLANKCOL       NEXT COLUMN BLANK\n         BNE   MORETEST           KEEP ON\n         TM    COMDCDSW,MEMBRCD1  MEMBER NAME\n         BO    ALLOK                   YES,STORE NAME\n         TM    PARMSWCH,SCANNAME  WAS A NAME BEING SCANNED\n         BO    BLNKSTP                 IF SO, GO TO STORE THE NAME\n         B     ISDONE             DD NAME STORED\nMORETEST EQU   *\n         CLI   UP1(GR3),PARENLFT       NEXT CHARACTER LEFT PAREN\n         BE    MISSPARN                UNEQUAL PARENTHESIS\n         CLI   UP1(GR3),PARENRGT       NEXT CHARACTER RIGHT PAREN\n         BE    MISSPARN                UNEQUAL PARENTHESIS\n         TM    PARMSWCH,LINKNOW        LINK CARD                 A41802\n         BO    ALLOK                   YES                       A41802\n         B     BADREPLC                INVALID CTL CARD          A41802\nALLOK    EQU   *\n         TM    PARMSWCH,SCANNAME       SCANNING NAME\n         BO    NAMEFND                 YES- NAME COMPLETE        A45174\n         TM    CPARAMSW,DELIMEND       UP TO 71                  A45174\n         BO    GOONS                   YES- GET NEXT CARD        A45174\n         B     INDDLOOP                NO- CONTINUE SCAN         A45174\nNAMEFND  EQU   *                                                 A45174\n         TM    CPARAMSW,DELIMEND       UP TO 71\n         BO    BLNKSTP                 YES- SET AS IF BLANK STOPPED\n         CLI   UP1(GR3),BLANKCOL       IS NEXT COLUMN BLANK\n         BNE   ENDNAME                 NO- END SCAN OF THIS NAME\n         B     BLNKSTP                 SET STOPPED ON BLANK SWITCH\n         SPACE 1\nCHKIFUNC EQU   *\n         TM    CCSWITCH,UNECPARN       STARTED WITH PARENTHESIS\n         BZ    MISSPARN                NO- UNEQUAL PAREN COUNT\n         B     ENDNAME                 STORE NAME\n         SPACE 1\nMEMBRANL EQU   *\n         TM    COMDCDSW,SELECTSC+EXCLUDES   SELECT OR EXCLUDE\n         BZ    BADMEMBS           IF NEITHER, CANT SAY 'MEMBER'\n         TM    CCSWITCH,ZZRLINKC  ZZRLINK CONTROL STATEMENTS\n         BO    SCANERRM           YES MIXED CODES\n         TM    COMDCDSW,MEMBRCD1  WAS MEMBER KEYWRD FOUND ALRDY  A38724\n         BO    BADMEMBS           YES-CANT SAY 'MEMBER'          A38724\n         OI    COMDCDSW,MEMBRCD1       SET MEMBER KEYWORD SWITCH\n         TM    CCSWITCH,MULTSE         CONSECUTIVE S/E\n         BO    STRMEMBS                ADD NAMES TO TABLE\n         MVC   SEBEGIN(LEN4),SESTOP    START OF SE TABLE\n         B     STRMEMBS                START INTERNAL MEMBER NAME SCAN\n         SPACE 1\nREPMEMB  EQU   *\n         LA    GR3,UP1(GR3)            UP TO NEXT NAME\n         BAL   GR9,TESTLAST            CHECK IF UP TO COLUMN 71\n         CLI   SCAN0(GR3),ADOLLAR      VALID MEMBER NAME CHARACTER\n         BE    OK4NAMEM                YES\n         CLI   SCAN0(GR3),COMMA        NEXT CHARACTER A COMMA\n         BE    CHK4R                   YES- MUST BE R)\n         BL    BADPARM            IF LT COMMA, ITS AN INVALID CHARACTER\nOK4NAMEM EQU   *\n         ST    GR3,CSTOREG+SAV4        SAVE POINTER START OF NEW NAME\n         SR    GR10,GR10               SECOND PARAMETER COUNT REGISTER\n         SPACE 1\nNAME2LOP EQU   *\n         LA    GR10,UP1(GR10)          UP NAME CHARACTER COUNT\n         TM    CPARAMSW,DELIMEND\n         BO    CONTINV               INVALID TO CONTINUE REPLACE A48799\n         CLI   SCAN0(GR3),ANA          USUAL CHARACTERS IN NAME\n         BNL   OKCHAR                  YES- VALID CHARACTER\n         CLI   SCAN0(GR3),ADOLLAR      A DOLLAR SIGN\n         BE    OKCHAR                  YES, OK\n         CLI   SCAN0(GR3),ANAT         AN 'AT' SIGN\n         BE    OKCHAR                  YES- VALID CHARACTER\n         CLI   SCAN0(GR3),APOUND       A 'POUND' SIGN\n         BNE   BADPARM                 WILL NOT BE , OR ) HERE\nOKCHAR   EQU   *\n         LA    GR3,UP1(GR3)            POINT TO NEXT CHARACTER\n         BAL   GR9,TESTLAST            TEST IF IN COLUMN 71\n         CLI   SCAN0(GR3),COMMA        COMMA\n         BL    CHKRTPAR                CHECK IF RIGHT PARENTHESIS\n         BH    NAME2LOP                SCAN TO END OF NAME\n         OI    PARMSWCH,SET4REPL+HASNEWNM  SET REPLACE-NEW NAME SWITCH\n         B     ON2TST                  UP POINTER AND RIGHT PAREN COUNT\n         SPACE 1\nCHKRTPAR EQU   *\n         CLI   SCAN0(GR3),ADOLLAR      VALID MEMBER NAME CHARACTER\n         BE    NAME2LOP                YES\n         CLI   SCAN0(GR3),PARENRGT     RIGHT PARENTHESIS\n         BNE   BADPARM            IF NOT, ITS AN INVALID CHARACTER\n         NI    PARMSWCH,FF-SET4REPL    RESET REPLACE SWITCH\n         OI    PARMSWCH,HASNEWNM       SET NEW NAME- NO REPLACE\n         B     CHKPARNR                UP RIGHT PAREN COUNT\n         SPACE 1\nCHK4R    EQU   *\n         OI    PARMSWCH,SET4REPL       SET REPLACE- NO NEW NAME SW\n         B     ON2TST                  UP POINTERS\n         SPACE 1\nMEMBRCD  EQU   *\n         TM    PARMSWCH,HASNEWNM       HAVE A NEW NAME\n         BZ    ONLYOLD                 NO\n         OI    TABLE0(GR8),SEBIT2      FLAG AS HAS A NEW NAME\nONLYOLD  TM    PARMSWCH,SET4REPL       REPLACE OPTION\n         BZ    NOREPL                  NO REPLACE\n         OI    TABLE0(GR8),REPLACOP    SET REPLACE OPTION\nNOREPL   EQU   *\n         TM    PARMSWCH,HASNEWNM       NEW NAME\n         BZ    NAMEDONE           NO\n         LA    GR9,LEN8\n         LA    GR8,LEN10(GR8)          UP SE TABLE POINTER\n         CR    GR10,GR9                NEW NAME GREATER THAN 8 BYTES\n         BH    BADPARM            IF SO, ITS TOO LONG\n         MVC   TABLE0(LEN10,GR8),FLAGBYTS CLEAR FLAGS, BLK NAME SE TAB\n         L     GR1,CSTOREG+SAV4        GET START OF NEW NAME\n         BCTR  GR10,GR0                DECREMENT LENGTH FOR EXECUTE\n         EX    GR10,MOVEDDNM           MOVE MEMBER NAME TO SE TABLE\n         OI    TABLE0(GR8),SEBIT1      FLAG AS THIS IS NEW NAME\n         LH    GR6,ENCT\n         LA    GR6,UP1(GR6)\n         STH   GR6,ENCT                UP SE ENTRY COUNT\n         LH    GR6,NNCT1\n         LA    GR6,UP1(GR6)            INCREMENT NEW NAME COUNT\n         STH   GR6,NNCT1               STORE UPPED NEW NAME COUNT\n         TM    PARMSWCH,SET4REPL       REPLACE OPTION\n         BZ    NAMEDONE                NO REPLACE\n         OI    TABLE0(GR8),SEBIT3      FLAG AS MEMBER REPLACE OPTION\n         SPACE 1\nNAMEDONE EQU   *\n         LA    GR8,LEN10(GR8)          UP TO NEXT SLOT SE TABLE\n         LH    GR6,ENCT\n         LA    GR6,UP1(GR6)\n         STH   GR6,ENCT                UP SE ENTRY COUNT\n         NI    PARMSWCH,FF-SET4REPL-HASNEWNM  RESET SWITCHES\n         ST    GR8,SESTOP              END OF SE TABLE\n         SR    GR7,GR7\n         TM    CCDELIM,BLANKSGN        JUST REACHED A BLANK\n         BZ    INDDLOOP                NO- SCAN TILL BLANK\n         CLI   SCAN0(GR3),COMMA        REALLY STOPPED AT COMMA\n         BNE   SET4READ                NO- ALL DONE\n         SPACE 1\nCHKCONTY EQU   *\n         TM    CPARAMSW,COL72BLK       PUNCH IN CONTINUE COLUMN 72\n         BZ    CONTINV            IF NOT, SET UP INVALID CONTINUE MSG\n         MVI   CCDELIM,CRESET0         RESET STOPPED ON BLANK SWITCH\n         LA    GR10,SCANSOME           RETURN FROM READING NEXTCARD\n         B     GETPARM                 GET NEXT CARD\n         SPACE 1\n         SPACE 1\nBADPARM  EQU   *\n         LA    GR2,INVALSPR\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nINVALODL EQU   *\n         LA    GR2,INVALIST            OUTDD NOT ON LINK CARD\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nBADMEMBS EQU   *\n         LA    GR2,MEMNOSE\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nCONTINV  EQU   *                                                 A48799\n         LA    GR2,INVALCON            INVALID CONTINUATION      A48799\n         B     GIVESCNE                GIVE MESSAGE              A48799\n         SPACE 1\nBADREPLC EQU   *\n         LA    GR2,INVALREP\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nNORENAME EQU   *\n         LA    GR2,NORREN\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nMISSPARN EQU   *\n         LA    GR2,ONEQPARN       MESSAGE CODE\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nPRTNULL1 EQU   *\n         TM    PARMSWCH,FLUSHSW        FLUSHING\n         BO    IGNORE                  YES- GET NEXT CARD\nNULLP    EQU   *\n         LA    GR2,NULLPARM            NULL PARAMETER MESSAGE\n         B     GIVESCNE           PRT CARD, SET RC TO 4, WRT MSG\n         SPACE 1\nNOINDDSP EQU   *\n         LA    GR2,NOINDD\n         B     GIVESEQS                GIVE MESSAGES\n         SPACE 1\n         SPACE 1\nSCANERRM EQU   *\n         LA    GR2,MODEERR\n         B     ERRSTOP                 GIVE MESSAGE\n         SPACE 1\nMULTS    EQU   *\n         LA    GR2,MULTSSEE\n         SPACE 1\nGIVESEQS EQU   *\n         BAL   GR11,WRITEOUT      PRT CARD, SET RC TO 4, WRT MSG\nSCANSEQR EQU   *\n         LA    GR2,SEQERROR            STATEMENT SEQUENCE ERROR\n         B     ERRSTOP                 GIVE MESSAGE\n         SPACE 1\nMSSEQER  EQU   *\n         LA    GR2,SEQERROR\n         BAL   GR11,WRITEOUT      PRT CARD, SET RC TO 4, WRT MSG\n         B     NEWSCAN                 SCAN THIS LINK- DON'T FLUSH IT\n         SPACE 1\nGIVESCNE EQU   *\n         BAL   GR11,WRITEOUT      PRT CARD, SET RC TO 4, WRT MSG\nSCANERR  EQU   *\n         LA    GR2,SCANMSG\nERRSTOP  EQU   *\n         TM    PARMSWCH,FLUSHSW        STATEMENT ERROR WHILE FLUSHING\n         BO    IGNORE             YES\n         MVI   PARMSWCH,FLUSHSW        SET FLUSH SWITCH\n         TM    CPARAMSW,COL72BLK       IS THIS CARD CONTINUED    A48742\n         BZ    WRITEOUT                NO                        A48742\n         OI    SCANSWCH,NOCMMEXP       SET BYPASS SCAN SWITCH    A48742\n         SPACE 1\nWRITEOUT EQU   *\n         TM    CCSWITCH,CARDPRTD       WAS CARD PRINTED\n         BO    SETC8                   YES                       A44144\n         BAL   GR9,PRNTCRD             PRINT THE CARD\nSETC8    EQU   *                                                 A44144\n         CLI   RCBUF,COMPCDE           IS RETURN CODE 8 OR MORE  A44144\n         BNL   STRMESS                 YES- DO NOT CHANGE IT     A44144\n         MVI   RCBUF,COMPCDE           SET CODE TO 8             A44144\n         B     STRMESS                 AND STORE MSG NUMBER      A44144\nSETC4    EQU   *\n         CLI   RCBUF,COMPCD            IS COMPLETION CODE 4 OR MORE\n         BNL   STRMESS                 YES- DO NOT CHANGE IT\n         MVI   RCBUF,COMPCD            SET CODE TO 4\nSTRMESS  EQU   *\n         STH   GR2,MSGLIST             STORE MESSAGE NUMBER\n         MVI   MSGLIST,LASTMSG         FLAG AS LAST MESSAGE\nKEEPCODE EQU   *\n         L     GR15,VZZRLMES           MESSAGE WRITER\n         BALR  GR14,GR15               GIVE THE MESSAGE\n         TM    PARMSWCH,FLUSHSW        ERROR\n         BCR   MS8,GR11                RETURN CARD OR MESSAGE PRINTED\n         L     13,4(13)\n         L     14,12(13)\n         L     15,VZZRTERM\n         LM    0,12,20(13)\n         BR    15\n         SPACE 1\nZZRSEF   EQU   *                       SYSIN EODAD ROUTINE\nZZRLEOF  DS    0H\n         OI    CCSWITCH,SYSINEOF       FLAG AS END OF FILE SYSIN\n         TM    CPARAMSW,COL72BLK  EOF AFTER CONTINUED CARD\n         BO    CONTINV            YES- INVALID CONTINUATION\n         TM    PARMSWCH,FLUSHSW        EOF WHILE FLUSHING CARDS\n         BO    TERMS                   GIVE EOF MESSAGE AND QUIT\n         TM    COMDCDSW,LINKDONE       HAD A LINK STATEMENT\n         BZ    NOINDDSP\n         TM    CCSWITCH,ZZRLINKC       ZZRLINK CONTROL CARDS\n         BO    CHKSMEM                 YES- CHECK IF HAVE ALL CARDS\n         TM    COMDCDSW,NEWOUT+NEWINDD HAD AN OUTDD AND AN INDD\n         BO    GETOUT                  BEGIN LINK\n         B     NOINDDSP                NO- SET TO ISSUE ERROR MESSAGE\n         SPACE 1\n         SPACE 1\nGETOUT   EQU   *\n         MVC   COUNT(LEN2),ENCT        NEED SE COUNT EXCLUDE/SELECT\n         TM    COMDCDSW,SELECTSC       SELECT OPERATION\n         BZ    TESTEX                  NO- EXCLUDE OR FULL LINK\n         MVC   CTAD(LEN4),SEBEGIN      STORE CTAD FOR SELECT LINK\n         B     DOLINK                  CONTINUE\n         SPACE 1\nTESTEX   EQU   *\n         XC    NNCT1(LEN2),NNCT1       CLEAR NEW NAME COUNT\n         XC    ENCT(LEN2),ENCT         CLEAR FOR EXCLUDE/FULL\n         MVC   CTAD(LEN4),SESTOP       SET TO SESTOP ON FULL/EXCLUDE\n         TM    COMDCDSW,EXCLUDES       EXCLUSIVE LINK\n         BO    DOLINK                  YES- FINISH UP\n         XC    COUNT(LEN2),COUNT       CLEAR SE COUNT ON FULL LINK\n         MVC   SEBEGIN(LEN4),SESTOP    FULL LINK NO ENTRIES IN SE TABLE\n         SPACE 1\nDOLINK   EQU   *\n         NI    CCSWITCH,FF-FIRSTSCN    TURN OFF FIRST ENTRY SWITCH\n         L     GR13,LEN4(GR13)         SAVE AREA POINTER\n         RETURN (14,12)                RETURN TO CALLER\n         SPACE 1\nTERMS    EQU   *\n         LA    GR2,ENDMESS             SYSIN EOF MESSAGE\n         OI    PARMSWCH,FLUSHSW        SET TO RETURN TO TERMINATE\n         OI    IOEF2,NOSYSIN           SET SWITCH FOR VTM\n         B     STRMESS                 GIVE MESSAGE- NO RETURN\n         SPACE 1\nREADCC   EQU   *\n         LA    GR0,CCIMAGE             CONTROL CARD BUFFER\n         LA    GR1,CARDCB              SYSIN DCB\n         LA    GR8,SYSINERX            SYSIN ERROR RETURN ADDRESS\n         GET   (GR1),(GR0)             GET NEXT STATEMENT\n         NI    CCSWITCH,FF-CARDPRTD    RESET CARD PRINTED SWITCH\n         BR    GR9                     RETURN\n         SPACE 1\nSYSINERX EQU   *\n         OI    IOEF2,NOSYSIN\n         OI    CCSWITCH,SYSINEOF       FAKE AN EOF READ\n         OI    PARMSWCH,FLUSHSW        SET FLUSH SWITCH\n         B     KEEPCODE                GIVE SYNAD MESSAGE\n         SPACE 1\nPRNTCRD  EQU   *\n         MVI   MSGLIST,LASTMSG+CTLCD   SET TO PRINT CONTROL CARD\n         MVI   MSGLIST+UP1,CRESET0     CLEAR MSG NUMBER\n         L     GR15,VZZRLMES           MESSAGE WRITER\n         BALR  GR14,GR15               PRINT THE CARD\n         OI    CCSWITCH,CARDPRTD       SET CARD PRINTED SWITCH\n         BR    GR9                     RETURN- CARD IS PRINTED\n         SPACE 1\nCHKLINK  EQU   *                       ANALYSE LINK COMMAND\n         TM    PARMSWCH,FLUSHSW        DOING A FLUSH\n         BO    NEWSCAN                 YES- RESET COMMAND SWITCHES\n         NI    CCSWITCH,FF-COMDNOW-MULTSE  RESET SWITCHES\n         TM    COMDCDSW,LINKDONE       PREVIOUS LINK DONE\n         BZ    NEWSCAN                 NO- SCAN REST OF CARD\n         SPACE 1\n*  NOW MUST ENTER MAINFLOW TO FINISH UP PREVIOUS LINK OPERATION\n         SPACE 1\nKEEPLINK EQU   *\n         TM    CCSWITCH,ZZRLINKC       HAVE ZZRLINK CONTROL CARDS\n         BO    CHKSMEM                 YES- CHECK IF HAVE ALL CARDS\n         TM    COMDCDSW,NEWINDD        INDD KEYWORD BEFORE LINK\n         BZ    MSSEQER                 NO- SEQUENCE ERROR LINK FOLLOWS\n         NI    COMDCDSW,SELECTSC+EXCLUDES+COMPRESS+LISTSW RESET REST\n         NI    CPARAMSW,COL72BLK       KEEP FLAG COLUMN 72 NOT BLANK ON\n         MVI   CCSWITCH,CRESET0        RESET SWITCH\n         OI    PARMSWCH,LINKNOW        SET SWITCH TO SHOW LINK PENDING\n         B     GETOUT                  FINISH THIS LINK STEP\n         SPACE 1\nNEWSCAN  EQU   *\n         MVI   PARMSWCH,LINKNOW        SET FOR SCAN, RESET FLUSH\n         NI    SCANSWCH,FF-NOCMMEXP    RESET BYPASS SCAN SWITCH  A48742\n         TM    CCSWITCH,CARDPRTD       IF CONTINUED WAS PRINTED\n         BO    PRNTDONE                ALREADY PRINTED\n         MVI   LINECT,CRESET0          RESET LINE COUNT TO FORCE HEADER\n         BAL   GR9,PRNTCRD             PRINT HEADER AND LINK CARD\nPRNTDONE EQU   *\n         NI    COMDCDSW,COMPRESS       SAVE COMPRESS FLAG\n         NI    CPARAMSW,FF-PARTPARM-CONTINY  RESET SOME SWITCHES\n         TM    CCSWITCH,LASTPARM       LAST PARAMETER SCANNED\n         BZ    TOSCAN                  NO- GET PARAMETERS\n         TM    CCSWITCH,FIRSTSCN       FIRST ENTRY\n         BZ    SCANERRM                NO, MIXED CODE\n         B     NOINDDSP\n         SPACE 1\nCHKSMEM  EQU   *\n         TM    COMDCDSW,EXCLUDES+SELECTSC  SELECT OR EXCLUDE\n         BZ    GETOUT                  NO\n         TM    COMDCDSW,MEMBRCD1       HAVE MEMBER CARD\n         BO    GETOUT                  YES\n         LA    GR2,NOLINK              WILL NOT LINK\n         B     ERRSTOP                 GIVE MESSAGE AND QUIT\n         SPACE 1\n         EJECT\n***********************************************************************\n*                      CONTROL STATEMENT ANALYSIS ROUTINES            *\n***********************************************************************\n         SPACE 1\nRDCARD   EQU   *\n         MVI   CCDELIM,CRESET0         RESET DELIMITER SWITCH\n         ST    GR14,SARG               SAVE RETURN REGISTER\n         TM    CPARAMSW,READ1          IS READ CARD SWITCH ON\n         BZ    GOTCARD                 DON'T READ ANOTHER CARD YET\n         SPACE 1\nKGTCD    EQU   *\n         NI    CPARAMSW,PARTPARM+CONTINY+COL72BLK SAVE ALL CONT SWITS.\n         BAL   GR9,READCC              GET NEXT CARD FROM SYSIN\n         NI    CPARAMSW,FF-COL72BLK    RESET CONTINUED CARD SWITCH\n         CLI   CCIMAGE+COL71,BLANKCOL  COLUMN 72 BLANK\n         BE    SCANCHK                 YES                       A48742\n         OI    CPARAMSW,COL72BLK       COLUMN 72 NOT BLANK\nSCANCHK  EQU   *                                                 A48742\n         TM    SCANSWCH,NOCMMEXP       SCAN NEEDED               A48742\n         BO    IGNORE                  NO                        A48742\n         B     KPFOL                   START SCAN                A48742\n         SPACE 1\nGOTCARD  EQU   *\n         L     GR3,CSTOREG+SAV8        LOAD ADDRESS OF LAST PASS\n         TM    CPARAMSW,PARMCOME       DOES A PARAMETER FOLLOW\n         BO    SCANCARD                YES- SCAN THE CARD\n         SPACE 1\nKPFOL    EQU   *\n         LA    GR9,KOMMD               RETURN ADDRESS\nNAMESCAN EQU   *\n         LA    GR3,CCIMAGE             START OF CONTROL STATEMENT\n         CLC   SCAN0(LEN3,GR3),SLASHEOF  /* CARD\n         BE    ZZRSEF                  YES- ENTER EODAD ROUTINE\n         SR    GR7,GR7                 CLEAR COUNT BUFFER\n         LA    GR1,LEN8\nKNAME    EQU   *\n         CLI   SCAN0(GR3),BLANKCOL     IS COLUMN BLANK\n         BCR   MS8,GR9                 FIRST COLUMN BLANK OR NAME ENDS\n         LA    GR7,UP1(GR7)            UP CHARACTER COUNT\n         CR    GR7,GR1                 NAME GREATER THAN 8 CHARACTERS\n         BH    BADPARM                 YES- INVALID NAME\n         LA    GR3,UP1(GR3)            GO TO NEXT COLUMN\n         B     KNAME                   CHECK FOR BLANK\n         SPACE 1\nKOMMD    LA    GR3,UP1(GR3)            SPACE TO NEXT COLUMN AFTER NAME\n         LA    GR5,CCIMAGE+COL70       LAST COLUMN (71)\n         OI    CCSWITCH,COMDNOW        SET COMMAND SWITCH\nKABC     CLI   SCAN0(GR3),BLANKCOL     IS COLUMN BLANK\n         BNE   SCANCARD                NO- CHECK PARAMETERS\n         CR    GR3,GR5                 IS THIS THE END COLUMN\n         BE    PRTNULL1                YES- END OF CARD REACHED\n         LA    GR3,UP1(GR3)            ADJUST POINTER TO NEXT COLUMN\n         B     KABC                    CONTINUE SCAN\n         SPACE 1\nSCANCARD EQU   *\n         MVC   CCDELIM2(UP1),CCDELIM   SAVE DELIMETER SWITCH SETTING\n         MVI   CCDELIM,CRESET0         RESET DELIMITER SWITCH\n         LR    GR1,GR3                 SAVE POINTER TO PRESENT COLUMN\n         ST    GR3,CSTOREG+SAV4        SAVE START OF PARAMETER\n         SR    GR7,GR7                 CLEAR LENGTH REGISTER\n         LA    GR5,CCIMAGE+COL70       LAST COLUMN (71)\n         TM    CPARAMSW,PARTPARM       PARTIAL PARAMETER\n         BZ    KCONT                   NO- CONTINUE\n         TM    PARMSWCH,COMDPART       COMMAND WORD\n         BO    DONTRSTC                YES- KEEP COMDNOW SWITCH ON\n         NI    CCSWITCH,FF-COMDNOW     RESET ANALYSING COMMAND SWITCH\nDONTRSTC EQU   *\n         TM    CCSWITCH,CARDPRTD  WAS CARD PRINTED\n         BO    NOPR               IF SO, DONT PRINT IT AGAIN\n         BAL   GR9,PRNTCRD        ELSE PRINT CONTINUED CARD\nNOPR     EQU   *\n         L     GR1,CSTOREG+SAV4        RESTORE POINTER\n         TM    CPARAMSW,CONTINY        FROM MEMBER/INDD SCAN\n         BZ    KOMPAR                  NO- CONTINUE SCAN\n         BCTR  GR3,GR0                 BACK UP POINTER BY ONE\n         NI    PARMSWCH,FF-COMDPART    RESET COMDPART SWITCH\n         B     TESTRETN                STORE AND RETURN\n         SPACE 1\nKFORZRO  EQU   *\n         TM    CCDELIM,BLANKSGN        IS IT A BLANK\n         BZ    BADPARM                 INVALID NAME/PARAMETER\n         B     NOTFIRST                NO FIRST PARAMETER PART FAKE IT\n         SPACE 1\nKCONT    EQU   *\n         NI    CCSWITCH,FF-LASTPARM    RESET SWITCH\n         CR    GR3,GR5                 SCANNED BEYOND COLUMN 71\n         BNH   KOMPAR                  NO- CHECK PARAMETERS\n         SPACE 1\nNOTFIRST EQU   *\n         TM    CPARAMSW,COL72BLK       CONTINUATION PUNCH IN 72\n         BZ    CONTINV            IF NOT, CONTINUATION IS INVALID\n         SR    GR7,GR7                 NO COUNT FOR FIRST PARAMETER\n         B     APARM0                  SET UP FOR PARTIAL PARAMETER\n         SPACE 1\nKOMPAR   CLI   SCAN0(GR3),EQUAL        IS CHARACTER A DELIMITER\n         BNH   DELIMIT                 YES-'EQUAL' CHARACTER OR LOWER\n         LA    GR7,UP1(GR7)            ADD ONE TO LENGTH\n         CR    GR3,GR5                 IS THIS THE END COLUMN\n         BE    KPTERR                  YES- SAVE PARTIAL PARAMETER\n         LA    GR3,UP1(GR3)            UP POINTER TO NEXT COLUMN\n         B     KOMPAR                  CONTINUE SCANNING FOR DELIMITER\n         SPACE 1\nKPTERR   EQU   *\n         TM    CCSWITCH,COMDNOW   SCANNING COMMAND WORD\n         BZ    NOTCOMD                 NO\n         CLI   SCAN0(GR1),AC           WORD STARTS WITH C\n         BNE   PRTANDGO                NO\n         TM    COMDCDSW,LINKDONE       MIGHT BE LINK\n         BO    KEEPLINK                NOT FIRST LINK\n         MVI   LINECT,CRESET0          RESET LINE COUNT TO FORCE HEADER\nPRTANDGO EQU   *\n         BAL   GR9,PRNTCRD             PRINT LINK CARD\n         L     GR1,CSTOREG+SAV4        RESTORE POINTER TO START OF PARM\n         OI    PARMSWCH,COMDPART       SET TO KEEP 'COMDNOW' SET\nNOTCOMD  EQU   *\n         TM    CPARAMSW,COL72BLK       IS COLUMN 72 BLANK\n         BZ    KETBYP                  YES- SET LAST PARM GET NEXT CARD\nKPART    EQU   *\n         LR    GR2,GR7\n         BCTR  GR2,GR0                 DECREMENT FOR EXECUTE\n         EX    GR2,MOVEP               SAVE PARTIAL PARAMETER\nAPARM0   EQU   *\n         OI    CPARAMSW,PARTPARM       SET PARTIAL PARAMETER SWITCH\n         ST    GR7,CSTOREG             SAVE PARTIAL PARAMETER COUNT\n         B     KGTCD                   GET NEXT CARD\n         SPACE 1\nKETBYP   EQU   *\n         OI    CCSWITCH,LASTPARM       NO MORE PARAMETERS\nKPASS    LA    GR3,UP1(GR3)            UP POINTER TO NEXT COLUMN\nKWENT    EQU   *\n         NI    CPARAMSW,FF-READ1-PARMZERO  RESET SWITCHES\n         ST    GR7,CSTOREG             STORE LENGTH REGISTER\nTESTRETN EQU   *\n         L     GR14,SARG               RESTORE RETURN REGISTER\n         ST    GR1,CSTOREG+SAV4        STORE SCAN ADDRESS REGISTER\n         ST    GR3,CSTOREG+SAV8        STORE ADDRESS REGISTER\n         BR    GR14                    RETURN TO MAINSTREAM\n         SPACE 1\nDELIMIT  CR    GR3,GR5                 IS THIS END COLUMN\n         BE    SETCC2                  YES- SET INDICATOR\n         TM    CPARAMSW,PARTPARM       IS PARTIAL PARAMETER SWITCH ON\n         BO    KPPAR                   YES-COMPLETE PARAMETER\n         B     TESTPAR                 CHECK PARAMETER\n         SPACE 1\nSETCC2   EQU   *\n         OI    CPARAMSW,DELIMEND       SET DELIMITER IN END COLUMN SW\n         CLI   SCAN0(GR3),BLANKCOL     BLANK\n         BE    ABLNKCOL                YES\n         TM    CPARAMSW,COL72BLK       PUNCH IN COLUMN 72\n         BZ    CONTINV            IF NOT, CTL STMT IS INVALID\n         TM    CPARAMSW,PARTPARM       PARTIAL PARAMETER\n         BO    CONTINV                 SECOND LEVEL CONTINUATION\n         SPACE 1\nTESTPAR  LTR   GR7,GR7                 TEST IF LENGTH ZERO\n         BC    MS2,DELIM               LENGTH NOT ZERO\n         OI    CPARAMSW,PARMZERO       SET LENGTH ZERO SWITCH\n         SPACE 1\nDELIM    CLI   SCAN0(GR3),EQUAL        TEST IF DELIMITER IS AN EQUAL\n         BE    KEY                     YES- GO TO KEY WORD ROUTINE\n         CLI   SCAN0(GR3),COMMA        TEST FOR COMMA\n         BE    PARAMC                  YES- GO TO PARAMETER ROUTINE\n         CLI   SCAN0(GR3),BLANKCOL     TEST FOR BLANK\n         BNE   BADPARM                 BAD PARAMETER\nABLNKCOL EQU   *\n         TM    CCSWITCH,COMDNOW        IS COMMAND SWITCH ON\n         BO    KPCMD                   YES-GO TO ADJUST POINTER\n         MVI   CCDELIM,BLANKSGN        SET BLANK DELIMITER\nDECID    TM    CPARAMSW,DELIMEND       IS DELIMITER IN END COLUMN\n         BO    KWENT                   YES- SET UP COUNT OF FIRST PART\n         TM    CPARAMSW,PARMZERO       LENGTH EQUAL ZERO\n         BO    KFORZRO                 YES- SET UP ZERO LENGTH\n         OI    CPARAMSW,PARMCOME       SET PARAMETER FOLLOWS SWITCH\n         TM    CCDELIM,BLANKSGN        IS IT A BLANK\n         BZ    KPASS              NO- RETURN WITH POINTERS SET\n         B     KETBYP                  CONTINUE\n         SPACE 1\nKEY      EQU   *\n         NI    CCSWITCH,FF-COMDNOW     RESET ANALYSING COMMAND SWITCH\n         MVI   CCDELIM,EQUALSGN        SET DELIMITER AN EQUAL\n         CLI   UP1(GR3),BLANKCOL       COLUMN AFTER = BLANK\n         BNE   DECID                   GO TO CHECK DELIMITER\n         TM    COMDCDSW,NEWOUT         HAD AN OUTDD\n         BZ    NULLP              IF NOT, SET UP NULL PARAMS MSG\n         B     PRTNULL1                PRINT THE CARD\n         SPACE 1\nPARAMC   EQU   *\n         MVI   CCDELIM,COMMASGN        SET DELIMITER COMMA\n         CLI   UP1(GR3),BLANKCOL       COLUMN AFTER COMMA BLANK\n         BNE   DECID                   NO- CONTINUE\n         TM    CPARAMSW,COL72BLK       COLUMN 72 BLANK\n         BZ    CONTINV            IF NOT, CTL STMT IS INVALID\n         B     DECID                   GO TO CHECK DELIMITER\n         SPACE 1\nKPPAR    EQU   *\n        LA    GR9,DELIM               RETURN FROM PARAMETER CREATE\nKCREATE  EQU   *\n         L     GR8,CSTOREG             SIZE OF FIRST PART OF PARAMETER\n         LTR   GR7,GR7            IS LENGTH OF SECOND PART ZERO\n         BC    MS8,KOMPL               YES- THE PARAMETER IS COMPLETE\n         LA    GR6,SAVEPAPR            NO- ADDRESS OF FIRST PART\n         AR    GR6,GR8                 ADDRESS TO MOVE IN SECOND PART\n         LR    GR10,GR7\n         BCTR  GR10,GR0                DECREMENT COUNT FOR EXECUTE\n         EX    GR10,MOVEPP             MOVE SECOND PART TO BUFFER\nKOMPL    AR    GR7,GR8                 TOTAL LENGTH OF PARAMETER\n         LA    GR1,SAVEPAPR            LOAD PARAMETER BUFFER ADDRESS\n         MVC   CCDELIM2(UP1),CCDELIM   SAVE DELIMITER\n         MVI   CCDELIM,CRESET0         CLEAR DELIMITER SETTINGS\n         NI    CPARAMSW,FF-CONTINY-PARTPARM  RESET CONTINUED SWITCHES\n         NI    PARMSWCH,FF-COMDPART    RESET COMDPART SWITCH\n         BR    GR9                     RETURN\n         SPACE 1\nKPCMD    LA    GR3,UP1(GR3)            ADJUST POINTER TO NEXT COLUMN\n         CLI   SCAN0(GR3),BLANKCOL     IS COLUMN BLANK\n         BNE   KPCMA                   NO- CHECK FOR COMMA\n         CR    GR5,GR3                 IS THIS THE LAST COLUMN\n         BE    KETBYP                  YES- NO PARAMETER FOLLOWS\n         B     KPCMD                   CONTINUE SCAN\n         SPACE 1\nKPCMA    CLI   SCAN0(GR3),COMMA        IS COMMA THE FIRST CHARACTER\n         BE    KETBYP                  YES- NO PARAMETER FOLLOWS\n         BCTR  GR3,GR0                 BACK UP REGISTER 3 TO PARAMETER\n         OI    CPARAMSW,PARMCOME       SET PARAMETER FOLLOWS SWITCH\n         B     KPASS                   GO TO RETURN\n         SPACE 1\n*\n*                 EXECUTE STATEMENTS USED IN SCAN ROUTINE\n*\n         SPACE 1\nMOVEP    MVC   SAVEPAPR(UP1),SCAN0(GR1) STORE PARTIAL PARAMETER\nMOVEPP   MVC   SCAN0(UP1,GR6),SCAN0(GR1) RECREATES PARAMETER\nOPRLUP3  MVC   SARG(UP1),SCAN0(SCANADR)  MOVE TO SEARCH ARGUMENT\nMOVEDDNM MVC   LEN2(UP1,GR8),SCAN0(GR1)  MOVE DD NAME TO INDD TABLE\n         SPACE 1\nLISTALLC DC    C'NO'                   DO NOT LIST MEMBERS COPIED\nRPARN    DC    C'R)'                   FLAGS RENAME OR REPLACE\nSLASHEOF DC    C'/* '                  SIGNALS EOF\n         SPACE 1\nFLAGBYTS DC    XL10'00004040404040404040'  INDD SE TABLE ENTRY FORM\nBLANKS8  EQU   FLAGBYTS+2              DOUBLE WORD OF BLANKS\n         SPACE 1\n         SPACE 1\n         SPACE 1\nPATCHLEN EQU   (*-ZZRESCAN)/20    LENGTH OF 5 PER CENT PATCH AREA\nPATCH    DC    XL(PATCHLEN)'00'   5 PER CENT PATCH AREA          A41780\n         EJECT\n         SPACE 1\n         SPACE 1\n         DCBD  DSORG=PS\nBOFLGS   EQU   DCBOFLGS-IHADCB         OPEN FLAGS IN DCB\nDDNAME1  EQU   DCBDDNAM-IHADCB         DD NAME FIELD IN DCB\nSYNADADR EQU   DCBSYNAD-IHADCB         SYNAD ADDRESS IN DCB\nEOFADDRS EQU   DCBEODAD-IHADCB+1       EODAD ADDRESS IN DCB\n         SPACE 1\n         EJECT\nZZRELCOM DSECT\n         ZZRELCOM\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZROVBLD": {"ttr": 4870, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'ROUTINE TO BUILD OVERLAY TABLES FOR THE CARD GENERATOR'\nZZROVBLD CSECT\n         EQUREGS\n         EJECT\n         CHAIN BASE=12\n         USING ZZRELCOM,R4\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    FUNCTION TABLE FORMAT    R1 HAS CODE FOR FUNCTION REQUIRED.      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         B     BLDRTNS(R1)\nBLDRTNS  DS    0H\n         B     CLSOPN                   CODE = 0\n         B     BLDTAB                   CODE = 4\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    FUNCTION - CLOSE AND OPEN THE FILE                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCLSOPN   DS    0H\n         MVI   RC,0                     SET RETURN CODE TO ZERO\n         CLOSE (ESDCB)                  CLOSE PREVIOUS INPUT D.S.\n         L     R3,INBEGIN               START OF TABLE\n         MVC   ESDCB+40(8),2(R3)        MAIN DD NAME\n         MVC   ESDCB+33(3),AEODAE+1     END OF CESD EXIT\n         OPEN  (ESDCB)                  OPEN THE FILE\n         TM    ESDCB+48,X'10'           OPEN SUCESSFUL?\n         BO    NORMRET                  OPEN O.K. - RETURN\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    OPEN IS UNSUCESSFUL PUT OUT MESSAGE                              *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         MVI   RC,12\n         MVC   DDNMFLD(8),2(R3)         MOVE IN DDNAME FOR MESSAGE\n         MVI   DDNMDISP,0               DDNAME GOES AT +0\n         MVI   MSGLIST+1,NODDCARD       SET UP DD CARD MISSING MESSAGE\n         MVI   MSGLIST,PBIT+LASTMSG     SHOW PARM PRES & LAST MSG\n         MVI   PARAMS,DDNM              SHOW DDNAME PRESENT\n         LA    R2,NORMRET               R2 HAS SUPPLIED RETURN POINT\nMSGWRT   DS    0H\n         L     R15,VZZRLMES             PTR TO MESSAGE WRITER\n         BALR  R14,R15                  GO WRITE MESSAGE\n         BR    R2                       EXIT TO SUPPLIED RETURN POINT\nMSGWRTN  DS    0H\n         MVI   MSGLIST,PBIT+LASTMSG     SHOW LAST MSG AND PARMS\n         MVI   PARAMS,NAME              SHOW NAME PARM PRESENT\n         B     MSGWRT                   WRITE MESSAGE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    FUNCTION - BUILD NECESSARY OVERLAY TABLES                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nBLDTAB   DS    0H\n         MVI   RC,0                     SET RETURN CODE TO ZERO\n         MVI   CNMEFND,X'00'            SET FOUND SWITCH OFF\n         MVI   CESDSW,X'00'             SET CESD FOUND SWITCH OFF     $\n         ZAP   CSECTCTR,=P'0'           CLEAR CSECT COUNTER TO 0      $\n         MVI   ENDTABSW,X'00'           TURN ENDTAB SW OFF\n         MVI   CSCTNAME,C' '            INIT FIRST CHAR TO BLANK\n         MVC   MEMNAME(8),WKA1          GET MEMBER NAME\n         MVC   OVLYSW(1),WKA1+8         GET OVERLAY SWITCH\n         MVC   EPADDR(3),WKA1+9         GET EPA ADDRESS\n         MVC   ADDRMAIN(4),WKA1+12      GET MAIN MEMBER ADDRESS\n         LA    R6,CESDADR               R6 -> START OF CESD TABLE\n         FIND  ESDCB,ADDRMAIN,C         ESTABLISH BEGINNING OF MEMBER\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    SET UP TO GET NEXT RECORD                                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDGET  DS    0H\n         LA    R2,CESDBFFR              PTR TO READ BUFFER\n         LA    R3,256                   LENGTH OF READ\n         BAL   R9,CESDREAD              READ A RECORD\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    DO WE WANT TO PROCESS THIS RECORD                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CLI   0(R2),X'80'              IDR?\n         BE    CESDGET                  YES - GET NEXT BLOCK\n         CLI   0(R2),X'40'              SYM?\n         BE    CESDGET                  YES - GET NEXT BLOCK\n         CLI   0(R2),X'20'              CESD?\n         BNE   *+12                     NO                            $\n         MVI   CESDSW,X'FF'             INDICATE AT LEAST ONE         $\n         B     CESDFND                  CESD FOUND AND PROCESS        $\n         TM    OVLYSW,X'FF'             OVERLAY PROCESSING?\n         BZ    CESDER1                  NO - CSECT NOT FOUND - ERROR\n         CLI   0(R2),X'01'              CONTROL RECORD?\n         BE    CESDCMPL                 YES - SEGTAB FOLLOWS\n         B     CESDER1                  CSECT ERROR\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    SET UP TO PROCESS BLOCK                                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDFND  DS    0H\n         LH    R7,6(R2)                 LENGTH OF DATA IN BLOCK\n         SRL   R7,4                     / 16 = # OF ENTRIES\n         LA    R5,8(R2)                 BUMP PAST BLOCK HEADER\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    CHECK CESD DATA FOR WHAT WE WANT                                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDCHCK DS    0H\n         CLI   8(R5),X'07'              IS THIS A NULL RECORD         $\n         BE    CESDINCR                 YES - SKIP                    $\n         CLI   12(R5),X'00'             SEG # = ZERO?\n         BNE   *+14                     NO - CONTINUE                 $\n         CLC   13(3,R5),=X'000000'      YES - TREAT AS WR, NULL,      $\n         BE    CESDINCR                   OR ER TYPE IF LEN. = ZERO   $\n         CLI   8(R5),X'14'              SEGTAB OR ENDTAB?\n         BNE   CHCKPVT                  NO - CONTINUE CHECKS\n         TM    ENDTABSW,X'FF'           FIRST PC ITEM?\n         BO    ENDTAB                   MUST BE ENDTAB\n         MVI   ENDTABSW,X'FF'           INDICATE SEGTAB FOUND\n         MVC   0(8,R5),=C'$SEGTAB '     INDICATE SEGTAB\n         B     UPDTCTAB                 MOVE TO BUFFER\nENDTAB   DS    0H\n         MVC   0(8,R5),=C'$ENDTAB '     INDICATE ENDTAB\n         B     UPDTCTAB                 MOVE TO BUFFER\nCHCKPVT  DS    0H\n         CLI   8(R5),X'04'              PRIVATE CODE TYPE?\n         BNE   CONTCHK1                 CONTINUE CHECKS\n         MVC   0(8,R5),=C'$PRIVATE'     INDICATE PRIVATE CODE\n         B     UPDTCTAB                 MOVE TO BUFFER\nCONTCHK1 DS    0H\n         NI    8(R5),X'0F'              TURN OFF UNWANTED BITS\n         CLI   8(R5),X'00'              SD TYPE?\n         BE    CNMEPRCS                 YES - CHECK FOR CSECT NAME\n         CLI   8(R5),X'03'              LR TYPE?\n         BE    CNMEPRCS                 YES - CHECK FOR CSECT NAME\n         CLI   8(R5),X'05'              COMMON TYPE?\n         BNE   CESDINCR                 NO - UNACCEPTABLE TYPE\n         CLI   0(R5),X'40'              BLANK COMMON?\n         BNE   UPDTCTAB                 NO - MOVE TO BUFFER\n         MVC   0(8,R5),=C'$BLKCOM '     INDICATE BLANK COMMON\n         B     UPDTCTAB                 MOVE TO BUFFER\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    SET BUFFER TO LOOK AT NEXT ENTRY                                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDINCR DS    0H\n         LA    R5,16(R5)                INCR TO NEXT ENTRY\n         BCT   R7,CESDCHCK              CHECK NEXT ENTRY\n         B     CESDGET                  GET NEXT RECORD WHEN NO ENTRY\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS ROUTINE ACTUALLY DOES THE READ                              *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDREAD DS    0H\n         READ  CESDECB,SF,ESDCB,(R2),(R3)    DO THE READ\n         CHECK CESDECB                  WAIT FOR COMPLETION OF READ\n         BR    R9                       RETURN\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS PHASE READS IN THE SEGTAB AND PLACES IT IN SEGTAB BUFFER    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDCMPL DS    0H\n         ST    R6,CESDUSED              PTR TO DYNAMIC END OF TABLE\n         LH    R3,14(R2)                GET LENGTH FROM CCW\n         LA    R2,SEGBFBEG              PTR TO START OF SEGTAB BUFFER\n         LR    R8,R2                    R8 -> SEGTAB\n         AR    R8,R3                    LENGTH OF SEGTAB\n         BAL   R9,CESDREAD              READ THE SEGTAB\n         ST    R8,SEGUSED               DYNAMIC END OF SEGTAB\n         B     OVLYRET                  RETURN FROM OVERLAY ROUTINE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    MOVE CESD ENTRY TO TABLE                                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nUPDTCTAB DS    0H\n         TM    OVLYSW,X'FF'             OVERLAY MODULE?\n         BZ    CESDINCR                 NO - DO NOT SET UP TABLE\n         MVC   0(16,R6),0(R5)           MOVE ENTRY TO BUFFER\n         MVC   10(2,R6),=H'0'           ZERO OUT ADDRESS\n         AH    R6,=H'16'                UPDATE BUFFER POINTER\n         B     CESDINCR\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    RETRIEVE CSECT NAME OF MAIN ENTRY POINT                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCNMEPRCS DS    0H\n         AP    CSECTCTR,=P'1'           ADD 1 TO THE COUNT OF CEST    $\n*                                       NAMES FOUND IN CESD FOR MOD   $\n         TM    CNMEFND,X'FF'            NAME FOUND ALREADY?\n         BO    CNMERET                  YES - RETURN\n         CLC   9(3,R5),EPADDR           ADDRESSES MATCH?\n         BNE   CNMERET                  NO - NOT THE NAME\n         MVC   CSCTNAME(8),0(R5)        SAVE THE CSECT NAME\n         MVI   CNMEFND,X'FF'            SHOW FOUND\n         TM    OVLYSW,X'FF'             OVERLAY MODULE?\n         BZ    CSCTRET                  NO - DO NOT SET UP TABLE\nCNMERET  DS    0H\n         CLI   8(R5),X'03'              LR TYPE?\n         BE    CESDINCR                 YES - PROCESS NEXT ENTRY\n         B     UPDTCTAB                 SD TYPE - MOVE TO BUFFER\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    RETURN FROM OVERLAY BUILD ROUTINE. SET UP VALUES IN COMM AREA.   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nOVLYRET  DS    0H\n         LA    R9,SEGBFBEG              R9 -> START OF SEGTAB\n         ST    R9,WKA1+8                STORE THE ADDRESS\n         MVC   WKA1+12(4),SEGUSED       MOVE END OF SEGTAB\n         LA    R9,CESDADR               R9 -> START OF CESD TABLE\n         ST    R9,WKA1+16               STORE THE ADDRESS\n         MVC   WKA1+20(4),CESDUSED      MOVE END OF CESD TABLE\nCSCTRET  DS    0H\n         MVC   WKA1(8),CSCTNAME         MOVE CSECT NAME\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    RETURN TO CALLING ROUTINE                                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nNORMRET  DS    0H\n         L     R13,4(R13)               RESTORE SAVE AREA POINTER\n         XR    R15,R15                  CLEAR R15\n         IC    R15,RC                   SET RETURN CODE\n         RETURN (14,12),RC=(15)         RETURN\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    EOF EXIT WHEN READING MEMBER LOAD MODULE. NO VALID ENTRY POINT.  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nCESDER1  DS    0H\n         CLI   CESDSW,X'FF'             HAVE AT LEAST 1 CESD ENTRY    $\n         BNE   NOEPERR                  NO - BYPASS CHECKS FOR MOD    $\n         CLC   EPADDR,=X'000000'        IF ENTRY POINT ADDRESS IS 0   $\n         BNE   *+14                     BUT NO VALID EP NAME FOUND    $\n         MVC   WKA1(8),=C'$PRIVATE'     PASS BACK $PRIVATE AS A SW    $\n         B     NORMRET                  TO BYPASS USE OF ENTRY CARD   $\n         CP    CSECTCTR,=P'1'           IF THE CESD HAS ONLY 1 CEST,  $\n         BNE   NOEPERR                  THERE IS NO EP MATCH, AND     $\n         MVC   WKA1(8),=C'$PRIVATE'     THERE IS A NON-ZERO EP, WE    $\n         B     NORMRET                  WILL ASUME AN RPG MODULE AND  $\n*                                       PASS BACK $PRIVATE AS A SW    $\n*                                       TO BYPASS USE OF ENTRY CARD   $\nNOEPERR  EQU   *                                                      $\n         MVC   NAMEFLD(8),MEMNAME       SET MEMBER NAME FOR MSG\n         MVI   NAMEDISP,28              MEMBER NAME GOES AT +28\n         MVI   MSGLIST+1,EPAERR01       SET FOR EPA ERROR MSG\n         MVI   RC,4                     SET RETURN CODE TO 4\n         LA    R2,NORMRET               SET RETURN ADDRESS\n         B     MSGWRTN                  WRITE MSG WITH NAME\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    I/O ERROR HANDLING ROUTINE SYNAD EXIT FOR ESDCB                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nESDIOER  DS    0H\n         SYNADAF ACSMETH=BPAM           ANALYZE I/O ERRORS\n         WTO   MF=(E,(1)),ROUTCDE=11,DESC=7  PUT OUT SYNAD MESSAGE\n         MVC   NAMEFLD(8),MEMNAME       SET UP MEMBER NAME FOR MSG\n         L     R3,INBEGIN               PTR TO INDD TABLE\n         MVC   DDNMFLD(8),2(R3)         MOVE DDNAME TO MSG\n         MVI   NAMEDISP,45              MEMBER NAME GOES AT +45\n         MVI   DDNMDISP,13              DDNAME GOES AT +13\n         MVI   MSGLIST+1,CESDIOER       I/O ERROR READING MEMBER\n         LA    R2,ESDIOER1              SET RETURN ADDRESS\n         B     MSGWRTN                  WRITE MSG WITH NAME\nESDIOER1 DS    0H\n         SYNADRLS                       RELEASE SYNAD BUFFERS\n         MVI   RC,12                    SET RETURN CODE TO 12\n         B     NORMRET                  RETURN\n         EJECT\nESDCB    DCB   MACRF=(R),RECFM=U,SYNAD=ESDIOER,DSORG=PO\n         EJECT\nZZRELCOM DSECT\n         ZZRELCOM\n         EJECT\nZZROVBLD CSECT\nRC       DC    XL1'00'\n*\nAEODAE   DC    A(CESDER1)\n*\nSAVE     DS    18F\n*\nCNMEFND  DC    XL1'00'\n*\nCESDSW   DC    XL1'00'                                                $\n*                                                                     $\nENDTABSW DC    XL1'00'\n*\nOVLYSW   DC    XL1'00'\n*\nCSECTCTR DS    PL2                                                    $\n*                                                                     $\nEPADDR   DS    CL3\n*\nMEMNAME  DS    CL8\n*\nADDRMAIN DC    F'0'\n*\nCSCTNAME DS    CL8\n*\nCESDUSED DC    F'0'\n*\nSEGUSED  DC    F'0'\n*\nCESDBFFR DC    XL256'0'\n*\nSEGBFBEG DS    CL1048\n*\n         EJECT\n         LTORG\n         EJECT\nCESDADR  DS    CL20480\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZROVCRD": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'ROUTINE TO CREATE OVERLAY CARDS FOR THE LINKAGE EDITOR'\nZZROVCRD CSECT\n         EQUREGS                        REGISTER EQUATES\n         EJECT\n         CHAIN BASE=12                  SET UP ADDRESSABILITY\n         EJECT\n         MVC   SEGBFBEG(4),0(R1)        BEGINNING ADDRESS OF SEGTAB\n         MVC   SEGUSED(4),4(R1)         DYNAMIC END OF SEGTAB\n         MVC   CESDADR(4),8(R1)         BEGINNING OF CESD TABLE\n         MVC   CESDUSED(4),12(R1)       DYNAMIC END OF CESD TABLE\n         MVC   ADCARNUM(4),16(R1)       ADDR OF CARD ACC FIELD\n         MVC   ADCRDOUT(4),20(R1)       ADDR OF CARD OUT DCB\n         EJECT\n         L     R3,SEGBFBEG              R3 -> SEGTAB\n         LA    R3,24(0,R3)              R3 -> 1ST LINE\n         LA    R4,4                     INDEX\n         L     R5,SEGUSED               PTR TO DYNAMIC END OF TABLE\n         SR    R5,R4                    -4 FOR BXLE END ADDRESS\n         SR    R6,R6                    CLEAR COUNTER\n         EJECT\nSTSEGNO  DS    0H\n         LA    R6,1(0,R6)               ADD 1 TO COUNTER\n         STC   R6,3(0,R3)               STORE SEG # IN APPROPRIATE LINE\n         BXLE  R3,R4,STSEGNO            PROCESS ALL SEGTAB LINES\n         MVC   0(2,R3),=X'FFFF'         DESIGNATES END OF TABLE\n         LA    R1,4                     INDEX\n         MVC   RGCNT(2),=H'1'           INITIALIZE REGION COUNT\n         NI    INSRTSW,X'00'            TURN SWITCH OFF\n         LA    R8,4                     R8 = 4\n         L     R11,SEGBFBEG             R11 -> SEGTAB\n         LR    R10,R11                  R10 -> SEGTAB\n         LA    R11,8(0,R11)             ADDR OF HGHEST SEG # IN REG\n         LA    R10,24(0,R10)            R10 -> 1ST LINE IN SEGTAB\n         EJECT\nPRCRGNS  DS    0H\n         ST    R1,R1SVE                 SAVE INDEX REGISTER\n         SR    R0,R0                    CLEAR R0\n         IC    R0,0(0,R11)              GET HIGHEST SEGMENT #\n         LTR   R0,R0                    IS IT ZERO?\n         BZ    ENDOVLY                  NO MORE CARDS TO CREATE\n         BCTR  R0,0                     -1 TO GET INDEX TO LAST LINE\n         SLL   R0,2                     X 4 BYTES PER ENTRY\n         L     R9,SEGBFBEG              START OF SEGTAB\n         LA    R9,24(0,R9)              POINT TO FIRST LINE\n         AR    R9,R0                    ADDR OF LAST LINE\nPNCLOOP  DS    0H\n         L     R4,CESDADR               START OF CESD TABLE\n         LA    R6,16                    INDEX\n         L     R7,CESDUSED              PTR TO DYNAMIC END OF CESD TAB\n         SR    R7,R6                    -16 TO POINT TO END OF TABLE\nNXTSEG   DS    0H\n         TM    9(R4),X'FF'              ENTRY PROCESSED?\n         BO    BXLE1                    YES - GET NEW ENTRY\n         CLC   12(1,R4),0(R11)          IN RANGE OF HIGHEST SEG #\n         BH    BXLE1                    NO - DO NOT PROCESS\n         CLC   12(1,R4),3(R10)          SEG # = # SEARCHING FOR\n         BNE   BXLE1                    NO - DO NOT PROCESS\n         CLC   0(8,R4),=C'$BLKCOM '     BLANK COMMON SYMBOL?\n         BE    SETPRSW                  YES- SHOW PROCESSED\n         CLC   0(8,R4),=C'$ENDTAB '     ENTAB SYMBOL?\n         BE    SETPRSW                  YES - SHOW PROCESSED\n         CLC   0(8,R4),=C'$PRIVATE'     PRIVATE SYMBOL?\n         BE    SETPRSW                  YES - SHOW PROCESSED\n         CLC   0(8,R4),=C'$SEGTAB '     SEGTAB SYMBOL?\n         BE    SETPRSW                  YES - SHOW PROCESSED\n         MVC   OVLYCRD,OVLYCRD-1        BLANK OUT CARD\n         MVC   OVLYCRD+10(6),=C'INSERT' MOVE IN INSERT MESSAGE\n         MVC   OVLYCRD+17(8),0(R4)       MOVE IN CSECT NAME\n         OI    INSRTSW,X'FF'            SHOW INSERT FOR THIS SEGMENT\n         BAL   R2,PUTCRD                PUT OUT THE CARD\nSETPRSW  DS    0H\n         OI    9(R4),X'FF'              SHOW ITEM PROCESSED.\nBXLE1    DS    0H\n         BXLE  R4,R6,NXTSEG             PROCESS NEXT SEGMENT\n         EJECT\n         CLC   4(2,R10),=X'FFFF'        END OF SEG TABLE?\n         BE    ENDOVLY                  YES - END\n         TM    INSRTSW,X'FF'            INSERT CARD PUNCHED FOR SEG?\n         BZ    BXLE2                    NO - SKIP OVERLAY CARD\n         LR    R2,R10                   R2 -> CURRENT LINE OF SEGTAB\n         AR    R2,R8                    ADD INCREMENT\n         CR    R2,R9                    END OF SEBTAB?\n         BH    BXLE2                    YES - DONT GEN OVERLAY CARD\n         NI    INSRTSW,X'00'            RESET SWITCH\n         MVC   OVLYCRD,OVLYCRD-1        BLANK OUT CARD\n         MVC   OVLYCRD+5(7),=C'OVERLAY' MOVE IN OVERLAY MESSAGE\n         SR    R3,R3                    ZERO OUT R3\n         IC    R3,4(R10)                GET PREV SEGMENT #\n         LTR   R3,R3                    SEG # = 0\n         BZ    USEREGID                 YES - USE REGION ID FOR OVERLAY\n         CVD   R3,ADAREA                CONVERT TO DECIMAL\n         OI    ADAREA+7,X'03'           MAKE POSITIVE\n         MVC   OVLYCRD+13(4),=C'OVLY'   MOVE IN OVLY VERBIAGE\n         UNPK  OVLYCRD+17(3),ADAREA+6(2) UNPACK SEG #\n         BAL   R2,PUTCRD                PUT OUT THE CARD\n         B     BXLE2                    ITERATE LOOP\nUSEREGID DS    0H\n         LH    R3,RGCNT                 PUT REGION # INTO R3\n         CVD   R3,ADAREA                CONVERT IT TO DECIMAL\n         OI    ADAREA+7,X'03'           FORCE IT POSITIVE\n         MVC   OVLYCRD+13(6),=C'REGION' MOVE IN VERBIAGE\n         UNPK  OVLYCRD+19(1),ADAREA+7(1) UNPACK REGION #\n         BAL   R2,PUTCRD                WRITE OUT THE CARD\nBXLE2    DS    0H\n         BXLE  R10,R8,PNCLOOP           ITERATE LOOP\n         EJECT\n         LA    R11,2(0,R11)             INDEX TO NEXT LINE\n         CLI   0(R11),X'00'             MORE REGIONS?\n         BE    ENDOVLY                  NO - END TASK\n         LH    R3,RGCNT                 GET COUNT\n         LA    R3,1(0,R3)               ADD 1 TO COUNT\n         CVD   R3,ADAREA                CONVERT TO DECIMAL\n         OI    ADAREA+7,X'03'           FORCE POSITIVE\n         STH   R3,RGCNT                 SAVE THE COUNT\n         MVC   OVLYCRD,OVLYCRD-1        BLANK OUT CARD\n         MVC   OVLYCRD+9(6),=C'REGION'  MOVE IN REGION VERBIAGE\n         UNPK  OVLYCRD+15(1),ADAREA+7(1) MOVE IN REGION #\n         MVC   OVLYCRD+16(8),=C'(REGION)' MOVE IN VERBIAGE\n         MVC   OVLYCRD+1(7),=C'OVERLAY' MOVE IN VERBIAGE\n         BAL   R2,PUTCRD                PUT OUT THE CARD\n         L     R1,R1SVE                 RETRIEVE REGION INDEX\n         BCT   R1,PRCRGNS               PROCESS NEXT REGION\n         B     ENDOVLY                  END TASK\n         EJECT\nPUTCRD   DS    0H\n         L     R1,ADCARNUM              R1 -> CARD COUNT\n         AP    0(5,R1),=P'10'           UP THE CARD COUNT\n         UNPK  OVLYCRD+72(8),0(5,R1)    NUMBER THE CARD\n         OI    OVLYCRD+79,X'F0'         ENSURE VALID CHARACTER\n         L     R5,ADCRDOUT              ADDRESS OF DCB\n         PUT   (R5),OVLYCRD             PUT OUT CARD\n         BR    R2                       RETURN\nENDOVLY  DS    0H\n         L     R13,4(R13)               RESTORE R13\n         RETURN (14,12),RC=0            RETURN\n         EJECT\nSAVE     DS    18F\n         DC    CL1' '                   USED TO BLANK OUT CARD\nOVLYCRD  DS    CL80                     OVLY CARD WORK AREA\nSEGBFBEG DS    F\nSEGUSED  DS    F\nCESDADR  DS    F\nCESDUSED DS    F\nADCARNUM DS    F\nADCRDOUT DS    F\nR1SVE    DS    F\nADAREA   DC    1D'0'\nRGCNT    DC    1H'0'\nINSRTSW  DC    XL1'00'\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT361/FILE361.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT361", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}