/* REXX - RECONRX0 ***************************************************/
/* TITLE    : DBRC COMMAND GENERATOR                                  */
/*                                                                    */
/* THIS PROCESS IS JCL DRIVEN: SEE JOB in jcldbrc(initdbgn).          */
/* If the TIME parm is required to be used to run your jobs, note that*/
/* I have had to use time=(5) to get the batch job to complete w/cc=0.*/
/*                                                                    */
/*    Using the output of LIST.RECON will cause problems(e.g. an inf. */
/* Loop.  The program is coded to only use the commands below:        */
/*                                                                    */
/*    READ OUTPUT OF THE FOLLOWING LIST COMMANDS:                     */
/*             LIST.RECON STATUS                                      */
/*             LIST.DB ALL DBDS                                       */
/*             LIST.DBDSGRP ALL                                       */
/*             LIST.CAGRP ALL                                         */
/*    GENERATE THE FOLLOWING INIT COMMANDS:                           */
/*             INIT.RECON                                             */
/*             INIT.DB                                                */
/*             INIT.DBDS                                              */
/*             CHANGE.DBDS only as part of PROCESS_ADS_RECORD         */
/*             INIT.ADS                                               */
/*             INIT.DBDSGRP                                           */
/*             INIT.CAGRP                                             */
/*                                                                    */
/*Larry Prestosa (USA)                                                */
/*c Xephon 1996                                                       */
/*                                                                    */
/*  modified by Larry Altman(lda) 8,9/2004 (generally lower case)     */
/*        - run against IMS V6.1 recons to produce command output.    */
/*        - run against IMS V7.1 recons to produce command output.    */
/*        - i added change.dbds icoff stmts as comments, since the    */
/*          the dba has the option to take full images or not after   */
/*          registration.                                             */
/*        - i added delete.db stmts as comments, to be uncommented as */
/*          needed.                                                   */
/*        - the change.dbds stmts are easily deleted if desired:      */
/*          - edit the listcmd dataset,                               */
/*          - only change.dbds,                                       */
/*          - delete nx all                                           */
/*          - save.                                                   */
/*  thoughts for the future: add code to generate notify.ic stmts     */
/*                           for each init.db/dbds.                   */
/*                                                                    */
/************************************* DEFINE FILES USED *****/
signal on halt                         /*lda: 08/29/04*/
call on error                          /*lda: 08/29/04*/

trace o
me=me()
/************************************* ALLOCATE FILES USED ***/
if sysvar(sysenv)='FORE' then
  do
    sysut1=me'.recon.listing'                   /*lda: 08/29/04*/
    sysut2=me'.recon.initcmd'                   /*lda: 08/29/04*/
    say "allocating datasets..."                /*lda: 08/29/04*/
    "free fi(sysut1,sysut2)"                    /*lda: 08/29/04*/
    "alloc fi(sysut1) da('"sysut1"') shr"       /*lda: 08/29/04*/
    "alloc fi(sysut2) da('"sysut2"') shr"       /*lda: 08/29/04*/
  end
/************************************* READ INPUT FILE   *****/
"DELSTACK"
DO FOREVER
   "EXECIO 1 DISKR SYSUT1"
   IF RC=2 THEN LEAVE
   PULL INRECORD
/* PARSE VAR INRECORD 3 INRECORD.TYPE 11 */     /*lda: 08/29/04*/
   inrecord.type=word(inrecord,1)               /*lda: 08/29/04*/
   select
     when inrecord.type = 'RECON' then
       call process_recon_record
     when inrecord.type = 'DB'    then
       call process_db_record
     when inrecord.type = 'DBDS'  then
       call process_dbds_record
     when inrecord.type = '-ADS'  then
       call process_ads_record
     when inrecord.type = 'DBDSGRP' then
       call process_dbdsgrp_record
     when inrecord.type = 'CAGRP' then
       call process_cagrp_record
     otherwise
       nop
   end /* of select */
END
/************************************* FINALIZATION         ***/
eof_rtn:
   if rc=2 then say 'END-OF-FILE'
   "execio 0 diskw sysut2(finis"
   "execio 0 diskr sysut1(finis"
if sysvar(sysenv)='FORE' then                 /*lda: 08/29/04*/
  do
    "free fi(sysut1,sysut2)"
    address ispexec "edit dataset('"sysut2"')"
  end
EXIT
/************************************* CALLED ROUTINES      ***/
/************************************* PROCESS RECON RECORDS */
PROCESS_RECON_RECORD:
trace o
   INRECORD = ' '
   LISTRECON.COMMAND = 'INIT.RECON'
   DO UNTIL INDEX(INRECORD,'CATALOGED') \= 0
     "EXECIO 1 DISKR SYSUT1"
     IF RC=2 THEN LEAVE
     PULL INRECORD
     IF INDEX(INRECORD,'CATALOGED=')    > 0 THEN
     DO
       SEPARATOR = 'CATALOGED='
       PARSE VAR INRECORD . (SEPARATOR) WK.CATDS .
       IF WK.CATDS = 'YES' THEN
         LISTRECON.CATDS = 'CATDS'
       ELSE
         LISTRECON.CATDS = 'NOCATDS'
     END
     IF INDEX(INRECORD,'FORCER')        > 0 THEN
       LISTRECON.FORCER = 'FORCER'
     IF INDEX(INRECORD,'NOFORCER')      > 0 THEN
       LISTRECON.FORCER = 'NOFORCER'
     IF INDEX(INRECORD,'DASD UNIT=')    > 0 THEN
     DO
       SEPARATOR = 'DASD UNIT='
       PARSE VAR INRECORD . (SEPARATOR) WK.DASDUNIT .
       LISTRECON.DASDUNIT = 'DASDUNIT('||WK.DASDUNIT||')'
     END
     IF INDEX(INRECORD,'CHECK=')        > 0 THEN
     DO
       SEPARATOR = 'CHECK='
       PARSE VAR INRECORD . (SEPARATOR) LISTRECON.CHECK .
     END
     IF INDEX(INRECORD,'TAPE UNIT=')    > 0 THEN
     DO
       SEPARATOR = 'TAPE UNIT='
       PARSE VAR INRECORD . (SEPARATOR) WK.TAPEUNIT .
       LISTRECON.TAPEUNIT = 'TAPEUNIT('||WK.TAPEUNIT||')'
     END
     IF INDEX(INRECORD,'SSID=')         > 0 THEN
     DO
       SEPARATOR = 'SSID='
       PARSE VAR INRECORD . (SEPARATOR) WK.SSID .
       LISTRECON.SSID = 'SSID('||WK.SSID||')'
     END
     IF INDEX(INRECORD,'CONTROL=')      > 0 THEN
     DO
       SEPARATOR = 'CONTROL='
       PARSE VAR INRECORD . (SEPARATOR) WK.CONTROL .
       IF WK.CONTROL= 'SHARE' THEN
         LISTRECON.CONTROL='SHARECTL'
       ELSE
         LISTRECON.CONTROL='RECOVCTL'
     END
     IF INDEX(INRECORD,'STARTNEW=')     > 0 THEN
     DO
       SEPARATOR = 'STARTNEW='
       PARSE VAR INRECORD . (SEPARATOR) WK.STARTNEW .
       IF WK.STARTNEW= 'YES' THEN
         LISTRECON.STARTNEW='STARTNEW'
       ELSE
         LISTRECON.STARTNEW='NONEW'
     END
   END
   QUEUE LISTRECON.COMMAND,
         LISTRECON.CATDS,
         LISTRECON.DASDUNIT,
         LISTRECON.FORCER,
         LISTRECON.CHECK,
         '-'
   "EXECIO 1 DISKW SYSUT2"
   QUEUE '          ',
         LISTRECON.CONTROL,
         LISTRECON.SSID,
         LISTRECON.STARTNEW,
         LISTRECON.TAPEUNIT
   "EXECIO 1 DISKW SYSUT2"
   RETURN
/************************************* PROCESS DB RECORDS ****/
PROCESS_DB_RECORD:
trace
   INRECORD = ' '
   LISTDB.COMMAND = 'INIT.DB   '
   strt_comment='  /*'
   end_comment='  */'
   deldb.command  = 'DELETE.DB '
   LISTDB.DBD=''
   LISTDB.RECOV='        '           /* DEFAULTS             */
   LISTDB.SHARELVL='0'               /* DEFAULTS             */
   LISTDB.TYPE='IMS'                 /* DEFAULTS             */
   DO UNTIL (INDEX(INRECORD,'-----------') \= 0)
     "EXECIO 1 DISKR SYSUT1"
     IF RC=2 THEN LEAVE
     PULL INRECORD
     IF INDEX(INRECORD,'DBD=')     > 0 THEN
     DO
       SEPARATOR = 'DBD='
       PARSE VAR INRECORD . (SEPARATOR) WK.DBD .
       LISTDB.DBD='DBD('||WK.DBD||')'
     END
     IF INDEX(INRECORD,'SHARE LEVEL=') > 0 THEN
     DO
       SEPARATOR = 'SHARE LEVEL='
       PARSE VAR INRECORD . (SEPARATOR) WK.SHARELVL .
       LISTDB.SHARELVL='SHARELVL('||WK.SHARELVL||')'
     END
     IF INDEX(INRECORD,'TYPE=') > 0 THEN
     DO
       SEPARATOR = 'TYPE='
       PARSE VAR INRECORD . (SEPARATOR) WK.TYPE .
       LISTDB.TYPE='TYPE'||WK.TYPE
     END
     IF INDEX(INRECORD,'RECOVERABLE           =NO') > 0 THEN
       LISTDB.RECOV ='NONRECOV'
   END
   /*lda: 09/07/04: next 2 stmts */
   queue strt_comment delete.db listdb.dbd end_comment
   "execio 1 diskw sysut2"

   QUEUE LISTDB.COMMAND,
         LISTDB.DBD,
         LISTDB.SHARELVL,
         LISTDB.TYPE,
         LISTDB.RECOV
   "EXECIO 1 DISKW SYSUT2"
   RETURN
/************************************* PROCESS DBDS RECORDS **/
PROCESS_DBDS_RECORD:
trace o
   INRECORD = ' '
   LISTDBDS.COMMAND = 'INIT.DBDS '
   changedbds       = 'CHANGE.DBDS'                /*lda: 08/29/04*/
   LISTDBDS.DEFLTJCL=''              /* DEFAULT              */
   LISTDBDS.ICJCL=''                 /* DEFAULT              */
   LISTDBDS.OICJCL=''                /* DEFAULT              */
   LISTDBDS.RECOVJCL=''              /* DEFAULT              */
   LISTDBDS.RECOVPD='0'              /* DEFAULT              */
   LISTDBDS.REUSE=''                 /* DEFAULT              */
   LISTDBDS.DBD=''                   /* INITIALIZE           */
   LISTDBDS.DSN=''                   /* INITIALIZE           */
   LISTDBDS.DDN=''                   /* INITIALIZE           */
   LISTDBDS.AREA=''                  /* INITIALIZE           */
   LISTDBDS.GENMAX=''                /* INITIALIZE           */
   DO UNTIL INDEX(INRECORD,'---------') \= 0
     "EXECIO 1 DISKR SYSUT1"
     IF RC=2 THEN LEAVE
     PULL INRECORD
     IF (INDEX(INRECORD,'ADS LIST: ') \= 0) THEN LEAVE
     IF INDEX(INRECORD,'DBD=')     > 0 THEN
     DO
       SEPARATOR = 'DBD='
       PARSE VAR INRECORD . (SEPARATOR) WK.DBD .
       LISTDBDS.DBD='DBD('||WK.DBD||')'
     END
     IF INDEX(INRECORD,'DSN=')     > 0 THEN
     DO
       SEPARATOR = 'DSN='
       PARSE VAR INRECORD . (SEPARATOR) WK.DSN .
       LISTDBDS.DSN='DSN('||WK.DSN||')'
     END
     IF INDEX(INRECORD,'DDN=')     > 0 THEN
     DO
       SEPARATOR = 'DDN='
       PARSE VAR INRECORD . (SEPARATOR) WK.DDN .
       LISTDBDS.DDN='DDN('||WK.DDN||')'
     END
     IF INDEX(INRECORD,'AREA=')     > 0 THEN
     DO
       SEPARATOR = 'AREA='
       PARSE VAR INRECORD . (SEPARATOR) WK.AREA .
       LISTDBDS.AREA='AREA('||WK.AREA||')'
     END
     IF INDEX(INRECORD,'GENMAX=')   > 0 THEN
     DO
       SEPARATOR = 'GENMAX='
       PARSE VAR INRECORD . (SEPARATOR) WK.GENMAX .
       LISTDBDS.GENMAX='GENMAX('||WK.GENMAX||')'
     END
     IF INDEX(INRECORD,'DEFLTJCL=') > 0 THEN
     DO
       SEPARATOR = 'DEFLTJCL='
       PARSE VAR INRECORD . (SEPARATOR) WK.DEFLTJCL .
       IF WK.DEFLTJCL = '**NULL**' THEN
         LISTDBDS.DEFLTJCL=''
       ELSE
         LISTDBDS.DEFLTJCL='DEFLTJCL('||WK.DEFLTJCL||')'
     END
     IF INDEX(INRECORD,'ICJCL=')    > 0 THEN
     DO
       SEPARATOR = 'ICJCL='
       PARSE VAR INRECORD . (SEPARATOR) WK.ICJCL .
       LISTDBDS.ICJCL='ICJCL('||WK.ICJCL||')'
     END
     IF INDEX(INRECORD,'OICJCL=') > 0 THEN
     DO
       SEPARATOR = 'OICJCL='
       PARSE VAR INRECORD . (SEPARATOR) WK.OICJCL .
       LISTDBDS.OICJCL='OICJCL('||WK.OICJCL||')'
     END
     IF INDEX(INRECORD,'RECOVJCL=') > 0 THEN
     DO
       SEPARATOR = 'RECOVJCL='
       PARSE VAR INRECORD . (SEPARATOR) WK.RECOVJCL .
       LISTDBDS.RECOVJCL='RECOVJCL('||WK.RECOVJCL||')'
     END
     IF INDEX(INRECORD,'RECOVPD=')  > 0 THEN
     DO
       SEPARATOR = 'RECOVPD='
       PARSE VAR INRECORD . (SEPARATOR) WK.RECOVPD .
       LISTDBDS.RECOVPD='RECOVPD('||WK.RECOVPD||')'
     END
     IF INDEX(INRECORD,'REGISTERED ADS #') > 0 THEN
     DO
       SEPARATOR = 'REGISTERED ADS #        ='
       PARSE VAR INRECORD . (SEPARATOR) WK.ADSCOUNT .
     END
     IF INDEX(INRECORD,'REUSE') > 0 THEN
       LISTDBDS.REUSE ='REUSE'
     IF INDEX(INRECORD,'NOREUSE') > 0 THEN
       LISTDBDS.REUSE ='NOREUSE'
   END
   QUEUE LISTDBDS.COMMAND,
         LISTDBDS.DBD,
         LISTDBDS.DDN,
         LISTDBDS.AREA,
         LISTDBDS.DSN,
         '-'
   "EXECIO 1 DISKW SYSUT2"
   QUEUE '          ',
         LISTDBDS.ICJCL,
         LISTDBDS.OICJCL,
         LISTDBDS.RECOVJCL,
         LISTDBDS.DEFLTJCL,
         '-'
   "EXECIO 1 DISKW SYSUT2"
   QUEUE '          ',
         LISTDBDS.GENMAX,
         LISTDBDS.RECOVPD,
         LISTDBDS.REUSE
   "EXECIO 1 DISKW SYSUT2"
   /*lda: 08/29/04: next 3 stmts */
   queue strt_comment changedbds listdbds.dbd listdbds.ddn 'ICOFF',
         end_comment
   queue strt_comment end_comment
   "execio 2 diskw sysut2"
   RETURN
/************************************* PROCESS ADS RECORDS **/
PROCESS_ADS_RECORD:
   INRECORD = ' '
   LISTADS.COMMAND = 'INIT.ADS  '
   LISTADS.DBD=LISTDBDS.DBD          /* INITIALIZE           */
   LISTADS.AREA=LISTDBDS.AREA        /* INITIALIZE           */
   LISTADS.ADDN=''                   /* INITIALIZE           */
   LISTADS.ADSN=''                   /* INITIALIZE           */
   LISTADS.STATUS=LISTDBDS.STATUS    /* INITIALIZE           */
   QUEUE 'CHANGE.DBDS',
         LISTADS.DBD,
         LISTADS.AREA,
         'NORECOV'
   "EXECIO 1 DISKW SYSUT2"
   DO WK.ADSCOUNT
     QUEUE LISTADS.COMMAND,
           LISTADS.DBD,
           LISTADS.AREA,
           '-'
     "EXECIO 1 DISKW SYSUT2"
     "EXECIO 1 DISKR SYSUT1"
     PULL INRECORD
     PARSE VAR INRECORD WK.ADDN,
                        WK.ADSN,
                        WK.STATUS,
                      .
     LISTADS.ADDN='ADDN('||WK.ADDN||')'
     LISTADS.ADSN='ADSN('||WK.ADSN||')'
     QUEUE '          ',
         LISTADS.ADDN,
         LISTADS.ADSN
     "EXECIO 1 DISKW SYSUT2"
   END
   RETURN
/************************************* PROCESS DBDSGRP RECORDS */
PROCESS_DBDSGRP_RECORD:
trace o
   INRECORD = ' '
   LISTDBDSGRP.COMMAND = 'INIT.DBDSGRP'
   LISTDBDSGRP.GRPNAME = ''
   "EXECIO 1 DISKR SYSUT1"
   IF RC=2 THEN LEAVE
   PULL INRECORD
   IF INDEX(INRECORD,'GRPNAME=') > 0 THEN
   DO
     SEPARATOR = 'GRPNAME='
     PARSE VAR INRECORD . (SEPARATOR) WK.GRPNAME .
     LISTDBDSGRP.GRPNAME='GRPNAME('||WK.GRPNAME||')'
   END
   IF INDEX(INRECORD,'MEMBERS=') > 0 THEN
   DO
     SEPARATOR = 'MEMBERS='
     PARSE VAR INRECORD . (SEPARATOR) WK.MEMBERS .
   END
   QUEUE LISTDBDSGRP.COMMAND,
         LISTDBDSGRP.GRPNAME,
         '-'
   "EXECIO 1 DISKW SYSUT2"
   QUEUE '           GRPMEM(            -'
   "EXECIO 1 DISKW SYSUT2"
   DO WK.MEMBERS
     "EXECIO 1 DISKR SYSUT1"
     IF RC=2 THEN LEAVE
     PULL INRECORD
     PARSE VAR INRECORD WK.DBD,
                        WK.DDN,
                        .
     /* PAGE BREAKS CAN CAUSE PROBLEM. */
     /* THIS CODE WILL HANDLE IT.      */
     IF INDEX(INRECORD,'LISTING OF RECON') > 0 THEN
     DO
       "EXECIO 1 DISKR SYSUT1"
       IF RC=2 THEN LEAVE
       PULL INRECORD
       PARSE VAR INRECORD WK.DUMMY,
                          WK.DBD,
                          WK.DDN,
                          .
     END
     LISTDBDSGRP.MEMBER = '             ('||WK.DBD||','||WK.DDN') -'
     QUEUE LISTDBDSGRP.MEMBER
     "EXECIO 1 DISKW SYSUT2"
   END
   QUEUE ')'
   "EXECIO 1 DISKW SYSUT2"
RETURN
/************************************* PROCESS CAGRP RECORDS */
PROCESS_CAGRP_RECORD:
trace o
   INRECORD = ' '
   LISTCAGRP.COMMAND = 'INIT.CAGRP'
   LISTCAGRP.GRPNAME = ''
   LISTCAGRP.GRPMAX  = ''
   LISTCAGRP.CAJCL   = 'CAJCL'       /* DEFAULTS             */
   LISTCAGRP.DEFLTJCL= 'DEFLTJCL'    /* DEFAULTS             */
   LISTCAGRP.REUSE   = 'NOREUSE'     /* DEFAULTS             */
   DO 3
     "EXECIO 1 DISKR SYSUT1"
     IF RC=2 THEN LEAVE
     PULL INRECORD
     IF INDEX(INRECORD,'GRPNAME=') > 0 THEN
     DO
       SEPARATOR = 'GRPNAME='
       PARSE VAR INRECORD . (SEPARATOR) WK.GRPNAME .
       LISTCAGRP.GRPNAME='GRPNAME('||WK.GRPNAME||')'
     END
     IF INDEX(INRECORD,'GRPMAX=') > 0 THEN
     DO
       SEPARATOR = 'GRPMAX='
       PARSE VAR INRECORD . (SEPARATOR) WK.GRPMAX .
       LISTCAGRP.GRPMAX='GRPMAX('||WK.GRPMAX||')'
     END
     IF INDEX(INRECORD,'CAJCL=') > 0 THEN
     DO
       SEPARATOR = 'CAJCL='
       PARSE VAR INRECORD . (SEPARATOR) WK.CAJCL .
       LISTCAGRP.CAJCL='CAJCL('||WK.CAJCL||')'
     END
     IF INDEX(INRECORD,'MEMBERS=') > 0 THEN
     DO
       SEPARATOR = 'MEMBERS='
       PARSE VAR INRECORD . (SEPARATOR) WK.MEMBERS .
     END
     IF INDEX(INRECORD,'DFLTJCL=') > 0 THEN
     DO
       SEPARATOR = 'DFLTJCL='
       PARSE VAR INRECORD . (SEPARATOR) WK.DFLTJCL .
       IF WK.DFLTJCL = '**NULL**' THEN
         LISTCAGRP.DFLTJCL=''
       ELSE
         LISTCAGRP.DFLTJCL='DFLTJCL('||WK.DFLTJCL||')'
     END
     IF INDEX(INRECORD,'REUSE') > 0 THEN
       LISTCAGRP.REUSE ='REUSE'
     IF INDEX(INRECORD,'NOREUSE') > 0 THEN
       LISTCAGRP.REUSE ='NOREUSE'
   END
   QUEUE LISTCAGRP.COMMAND,
         LISTCAGRP.GRPNAME,
         LISTCAGRP.GRPMAX,
         LISTCAGRP.CAJCL,
         LISTCAGRP.REUSE,
         '-'
   "EXECIO 1 DISKW SYSUT2"
   QUEUE '           GRPMEM(            -'
   "EXECIO 1 DISKW SYSUT2"
   DO WK.MEMBERS
     "EXECIO 1 DISKR SYSUT1"
     IF RC=2 THEN LEAVE
     PULL INRECORD
     PARSE VAR INRECORD WK.DBD,
                        WK.DDN,
                        .
     /* PAGE BREAKS CAN CAUSE PROBLEM. */
     /* THIS CODE WILL HANDLE IT.      */
     IF INDEX(INRECORD,'LISTING OF RECON') > 0 THEN
     DO
       "EXECIO 1 DISKR SYSUT1"
       IF RC=2 THEN LEAVE
       PULL INRECORD
       PARSE VAR INRECORD WK.DUMMY,
                          WK.DBD,
                          WK.DDN,
                          .
     END
     LISTCAGRP.MEMBER = '             ('||WK.DBD||','||WK.DDN') -'
     QUEUE LISTCAGRP.MEMBER
     "EXECIO 1 DISKW SYSUT2"
   END
   QUEUE ')'
   "EXECIO 1 DISKW SYSUT2"
   RETURN

halt: signal eof_rtn                   /*lda: 08/29/04*/
error:                                 /*lda: 08/29/04*/
trace o
stmt=condition('d')
if word(stmt,1)='execio'      then return
if word(stmt,1)='free'        then return
if word(stmt,1)='edit' & rc=4 then return
say rc stmt sigl
signal eof_rtn
