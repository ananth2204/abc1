{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011305000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE132.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE132.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\n'", "DS1TRBAL": "b'<\\xd4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xce\\x00\\x0b\\x00\\xcf\\x00\\x01\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"DAYTIMER": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 ADD\n/*                                                                */\n/*                                                                */\n/*                                                                */\n/* THE PURPOSE OF THIS CLIST IS TO NOTIFY YOU OF CALENDER         */\n/* APPOINTMENTS. YOU CAN ADD TO YOUR CALENDAR FOR AN APPOINTMENT  */\n/* LATER TODAY OR FUTURE DATES.                                   */\n/*                                                                */\n/*                                                                */\n/*  REQUIREMENTS:  YOUR MUST HAVE A AN 80 BYTE DATA SET CALLED:   */\n/*                 XXXX.DATE.DATA    (PS FORMAT)                  */\n/*                  IN YOUR CLIST DATA SET YOU NEED THE FOLLOWING */\n/*                  XXXX.CLIST(DAYTIMER)                          */\n/*                  XXXX.CLIST(SIGON) WHICH CONTAINS THE FOLLOWING*/\n/*            COLUMN 1                                            */\n/*                   WRITE  **  EXECUTE SIGNON                    */\n/*                   DAYTIMER                                     */\n/*                                                                */\n/*            THIS WILL DISPLAY YOUR CALENDAR ACTIVITIES FOR      */\n/*            TODAY IF THE DATE YOUR LOGON DATE EQUALS TODAY.     */\n/*            ITEMS YOU HAVE ENTERED FOR FUTURE REMINDERS WILL    */\n/*            ONLY DISPLAY WHEN YOUR LOGON DATE EQUAL THE DATE    */\n/*            YOU TOLD IT TO REMIND YOU 'OR' IF IT IS A TOMORROW  */\n/*            REMINDER IT WILL ALSO DISPLAY.  ITEMS WILL AUTO-    */\n/*            MATICALLY DELETE WHEN APPOINTMENT DATE IS LESS THAN */\n/*            LOGGED ON DATE. IF NO ITEMS RESIDE IN YOUR DATA     */\n/*            SET IT WILL DISPLAY 'CLEAR' WHEN YOU LOG ON.        */\n/*                                                                */\n/*            ENTER 'DAYTIMER ADD' ON YOUR TSO SCREEN TO ADD      */\n/*            A REMINDER.  AFTER ENTERING MM/DD/YR AND MESSAGE    */\n/*            THIS CLIST WILL ASK YOU IF YOU HAVE MORE REMINDER   */\n/*            MESSAGES TO ENTER WITH EITHER A 'N' FOR NO OR 'Y'   */\n/*            FOR YES.                                            */\n/*                                                                */\n/*            IF YOU WANT TO REVIEW CURRENT AND TOMORROWS         */\n/*            REMINDERS JUST KEY IN TSO MODE 'DAYTIMER',          */\n/*            IT WILL DISPLAY DATES AND MESSAGES.                 */\n/*                                                                */\n/* KEYWORD 'ADD' ALLOWS YOU TO ADD ADDITIONAL INFORMATION         */\n/*                                                                */\n/* )STARTHELP                                                     */\n/*                                                                */\n/* )F FUNCTION -'DATE' IS AN ONLINE APPOINTMENT MEMBER            */\n/*                                                                */\n/* )X SYNTAX -   'DATE'                                           */\n/*                                                                */\n/* )O OPERANDS - 'ADD' COMMAND WILL THEN PROMPT YOU FOR DATE      */\n/*              MM/DD/YY AND THEN FOR A ONE-LINE TEXT.            */\n/*                                                                */\n/* )ENDHELP                                                       */\n/*                                                                */\nCONTROL NOMSG NOCONLIST\nFREE F(DATE)\nERROR EXIT\nALLOC F(DATE) DA(DATE.DATA) SHR\nOPENFILE DATE\nSET SDATE EQ &SUBSTR(7:8,&SYSDATE)&SUBSTR(1:2,&SYSDATE)-\n&SUBSTR(4:5,&SYSDATE)\nERROR +\nDO\n  IF &ACTIVITY EQ N THEN WRITE  CALENDAR CLEARED...\n  CLOSFILE DATE\n  OPENFILE DATE OUTPUT\n  SET &M EQ 1\n  DO WHILE &M NE &N\n    SET XXXX EQ &&D&M\n    SET &DATE EQ &STR(&XXXX)\n    PUTFILE DATE\n    SET &M EQ &M+1\n  END\n  IF &ADD NE &STR() THEN +\n  DO\n    MORE: WRITENR ENTER DATE IN FORM MM/DD/YY:\n    READ &D\n    WRITENR ENTER TEXT:\n    READ\n    SET &DATE EQ &STR(&D &SYSDVAL)\n    PUTFILE DATE\n  WRITENR ARE THERE ANY ADDITIONAL ENTRIES TO BE MADE? Y/N\n  READ &YN\n  IF &YN EQ Y THEN GOTO MORE\n  END\n  CLOSFILE DATE\n  EXIT\nEND\nSET &N EQ 1\nSET &ACTIVITY EQ N\nWRITE\nGET: GETFILE DATE\nSET DDATE EQ &SUBSTR(7:8,&DATE)&SUBSTR(1:2,&DATE)&SUBSTR(4:5,&DATE)\nIF &DDATE LT &SDATE THEN +\nDO\n  WRITE DELETED: &DATE\n  GOTO GET\nEND\nIF &SDATE EQ &DDATE THEN +\nDO\n  WRITE   TODAY:  &DATE\n  SET &ACTIVITY EQ Y\nEND\nIF &SDATE+1 EQ &DDATE THEN +\nDO\n  WRITE TOMORROWS REMINDER: &DATE\nEND\nSET D&N EQ &DATE\nSET &N  EQ &N+1\nGOTO GET\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSUTABND": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PSUTABND CSECT\n**\n**  FOR INFORMATION CALL: GEORGE RAMAS\n**                        OAKLAND, CALIFORNIA 94610\n**                        (415)-763-0540\n**          STARTING 1990 (510)\n**\n**  THE PURPOSE OF THIS UTILITY IS TO HALT PROCESSING IN A PROCEDURE\n**  IF A SELECTED CONDITION CODE IS RECEIVED.  IT WILL DISPLAY A\n**  MESSAGE TO THE CONSOLE AND ASK THE OPERATOR TO REPLY 'Y' TO\n**  CONTINUE OR 'N' TO FLUSH.  THE JOB 'NAME' WILL ALSO BE DISPLAY\n**  IN THIS MESSAGE.  THIS ALERTS THE OPERATOR WHEN A JOB ABENDS\n**  WITHOUT ROLLING OFF THE CONSOLE SCREEN.\n**\n**  YOU CAN DISPLAY AN ADDITIONAL MESSAGE WITH THE ABOVE MESSAGE\n**  BY KEYING UP 45 CHARACTERS IN A 'PARM='XXXXXXXX'' FIELD IN THE\n**  JCL ON THE EXEC LINE'\n**\n**      //************\n**      //ABENDCHK EXEC PGM=PSUTABND,COND=((0,EQ,DLSD4020),EVEN),\n**      //  PARM='THE PIVOT PROCESSING HAS ABENDED'\n**      //************\n**      //STEPLIB DD DSN=OSSP.UTILITY.LOADLIB,\n**      //           DISP=SHR\n**\n**\n**\n**\n         SPACE\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n         SAVE  (14,12),,*\n         L     2,0(R1)            LOAD PARM ADDRESS IN REG 2\n         LR    R11,R15\n         USING PSUTABND,R11\n         ST    R13,SAVEREG+4\n         LA    R3,SAVEREG\n         ST    R3,8(R13)\n         LR    R13,R3\nSETUP    EXTRACT ADRTIOT,FIELDS=TIOT   EXTRACT TIOT ADDRESS\n         L     R7,ADRTIOT         LOAD TIOT ADDRESS\n         MVC   JOBNAME(8),0(R7)   MOVE JOBNAME TO WTOR\n         MVC   GIVE+1(1),1(R2)    INSERT PARM LENGTH\n******* THE ABOVE INSTRUCTION MODIFIES THE LENGTH ATTRIBUTE OF THE ***\n******* FOLLOWING INSTRUCTION.                                     ***\nGIVE     MVC   MESSAGE,2(R2)      MOVE PARM MESSAGE TO WTO\nWTO      WTO   '********************************************************\n               *********************************************************\n               ************',ROUTCDE=(2,11),DESC=(2)\nWTOR     WTOR  '*** REPLY Y TO CONTINUE JOB----- -REPLY N TO ABEND    **\n               *****************',REPLY,1,ECB,ROUTCDE=(2,11)\n         WAIT  ECB=ECB            WAIT FOR REPLY\n         CLI   REPLY,C'Y'         OK TO CONTINUE ??\n         BE    EOJ                IF SO, NORMAL END\n         MVC   ECB,RESET          CLEAR ECB\n         CLI   REPLY,C'N'         VALID REPLY ??\n         BNE   WTOR               BAD REPLY-DISPLAY AGAIN\n         ABEND 999                ABEND\nEOJ      L     R13,SAVEREG+4      RESTORE REG 13\n         RETURN (14,12),RC=0      RETURN\n         EJECT\nSAVEREG  DS    18F                ALIGN ON FULLWORD\n         SPACE 3\nECB      DC    F'0'\nRESET    DC    F'0'\nADRTIOT  DC    F'0'\nJOBNAME  EQU   WTOR+16+24,8\nMESSAGE  EQU   WTO+8+4\nREPLY    DS    CL1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSUTDUMP": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PSUTDUMP CSECT\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n*   PSUTDUMP ** SUPER GENER UTILITY PROGRAM                         *\n*                                                                   *\n*   WE HAVE HAD A PROBLEM THAT HAS ONLY OCCURRED TWICE THIS YEAR    *\n*   WHEN EXECUTING THIS UTILITY. IT GIVES A FALSE 'PSUTDUMP20'      *\n*   SAYING THAT THE DD NUMBERING IS UNEVEN.  IT ONLY HAPPENS        *\n*   DURING TAPE DRIVE ALLOCATION TIME WHEN A DRIVE IS NOT AVAILABLE *\n*   AND THE OPERATOR REPLIES 'HOLD' AND 'WAIT',  WHEN THE ALLOCATION*\n*   BECOMES AVAILABLE THIS UTILITY ABENDS.  ALL WE DO IS RESTART    *\n*   WITHOUT ANY CHANGES AND IT RUNS OK.  IF ANYONE FINDS A FIX      *\n*   BEFORE I DO PLEASE SEND IN A FIX AND A NOTE TO ME.              *\n*   AGAIN THIS RARELY HAPPENS AND THIS UTILITY IS WIDELY USED WHERE *\n*   I WORK, SO IT'S VERY RELIABLE                                   *\n*                                                                   *\n*                GEORGE RAMAS                                       *\n*                250 MONTECITO AVENUE                               *\n*                OKLAND, CALIFORNIA   94610                         *\n*                                                                   *\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n*   PRODUCTION SERVICES UTILITY DUMP                                *\n*                                                                   *\n*   FOR INFORMATION CALL: GEORGE RAMAS                              *\n*                         OAKLAND, CALIFORNIA 94610                 *\n*                         (415)-763-0540                            *\n*           STARTING 1990 (510)                                     *\n*                                                                   *\n*   THIS UTILITY IS SUPPORTED BY OPERATIONS SUPPORT SERVICES        *\n*                                                                   *\n*   ***IMPORTANT NOTE***                                            *\n*                                                                   *\n*   WHEN YOU ARE ASSEMBLING THIS SOURCE, YOU MUST HAVE THE IBM      *\n*   MACRO 'IEFJFCBN' AND 'IEFJFCBX' IN YOUR MACLIB.  THESE ARE IBM  *\n*   COPYWRITTEN MACROS AND CANNOT BE COPIED TO A NON IBM SHOP.      *\n*   UNDER PENALTY OF THE BIG BLUE BOX.  ALSO NEED MACRO 'IEFJFCBE'  *\n*                                                                   *\n*   PSUTDUMP IS A SUPER IEBGENER. IT WILL ALLOW YOU TO HAVE         *\n*   UP TO 99 INPUTS AND 99 OUTPUTS.  IT CAN BE USED FOR BACKUP      *\n*   PURPOSES, PRINTING OR COPY DATA SETS OR ANY COMBINATION         *\n*   TOGETHER. FOR RESTART PURPOSES, YOUR SHOULD KEEP YOUR PRINT     *\n*   AND BACKUP STEPS SEPARATE.                                      *\n*                                                                   *\n*   PSUTDUMP WILL ACCEPT A PARM OF 'CHK'. IF PRESENT, THIS          *\n*   PARM WILL PREVENT THE OPENING OF OUTPUT DATASETS IF THE         *\n*   INPUT DATASET IS EMPTY.  DO NOT USE THIS PARAMETER WHEN         *\n*   STACKING OUTPUT DATA SETS.  THIS IS TO BE USED ONLY WHEN        *\n*   CREATING SEPARATE AND INDIVIDUAL OUTPUTXX TAPE DATA SETS.       *\n*   WITH THE UNIT PARAMETER OF 'UNIT=(TAPE,,DEFER)' SHOULD BE USED. *\n*                                                                   *\n*   IF DCB INFORMATION IS NOT SPECIFIED FOR OUTPUTXX IT WILL BE     *\n*   COPIED FROM INPUTXX.  ALL RECFM MUST BE IDENTICAL IN THE FIRST  *\n*   CHARACTER (IE, 'F'BA , 'V'B, 'F'BM OR 'U' FOR ALL OUTPUTXX.     *\n*   YOU CANNOT HAVE A FB GOING TO A VB OR VISA VERSA.               *\n*                                                                   *\n*   YOU CAN SHORTEN THOUGH AN LRECL ON YOUR INPUTTXX IF YOUR        *\n*   SPECIFY THE SHORTEN LRECL ON THE DCB FOR OUTPUTXX.              *\n*   THIS CAN BE USED ONLY WHEN A SMALLER PORTION OF A RECORD        *\n*   INSTEAD THE ENTIRE LRECL.                                       *\n*                                                                   *\n*   THIS PROGRAM WILL ALSO DISPLAY IN YOUR SYSOUT SECTION AT THE    *\n*   END OF YOUR LISTING THE FOLLOWING INFORMATION:                  *\n*                                                                   *\n*   EXECUTING JOB NAME                                              *\n*   PROC STEP                                                       *\n*   JOB STEP                                                        *\n*   DDNAME (INPUTXX OUTPUTXX)                                       *\n*   INPUTXX RECORD COUNT (SHOWS SEPARATE RECORD COUNTS FOR ALL      *\n*                         CANCATENATED DATA SETS) DISK OR TAPE(S)   *\n*                                                                   *\n*   OUTPUTXX RECORD COUNT (WILL DISPLAY A SEPARATE RECORD COUNT     *\n*                          IF OUTPUT IS TAPE, THEN A FINAL TOTAL)   *\n*                                                                   *\n*   RECFM-LRECL-BLKSIZE FOR INPUTXX AND OUTPUTXX DD                 *\n*                                                                   *\n*   WHEN MULTIPLE OUTPUT FILES ARE CREATED (REEL 1, 2, 3),          *\n*   RECORDS COUNTS FOR EACH SEPARATE TAPE WILL BE DISPLAYED.        *\n*   THIS WILL SHOW OUTPUTXX STATISTICS FOR UP TO 20 OUTPUT TAPES    *\n*   AND A GRAND TOTAL FOR THE OUTPUT FILE WILL SHOW A FINAL TOTAL   *\n*   NUMBER OF RECORDS TOTALLY WRITTEN TO YOUR OUTPUT DD.            *\n*                                                                   *\n*   USE THE FOLLOWING CODING RULES TO CREATE YOUR JCL.              *\n*                                                                   *\n*   WHEN DCB IS NOT SPECIFIED, IT WILL BE COPIED FROM INPUT         *\n*                                                                   *\n*     USE WHEN CREATING BACKUP FILES                                *\n*                                                                   *\n*     //BACKUP  EXEC PGM=PSUTDUMP                                   *\n*     //*                                                           *\n*     //INPUT01    DD  DSN=FNBP.TRAN1025.CHECKING,                  *\n*     //               DISP=OLD                                     *\n*     //*                                                           *\n*     //INPUT02    DD  DSN=FNBP.DEPS2510.CHECKING,                  *\n*     //               DISP=OLD                                     *\n*                                                                   *\n*     //OUTPUT01   DD  DSN=FNBP.BKUP4505.CHECKING(+1),              *\n*     //               DISP=(,CATLG,DELETE),                        *\n*     //               UNIT=TAPE,                                   *\n*     //               VOL=(,RETAIN),                               *\n*     //               LABEL=(1,SL,RETPD=30),                       *\n*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *\n*     //*                                                           *\n*     //OUTPUT02   DD  DSN=FNBP.DEPS4504.CHECKING,                  *\n*     //               DISP=(,CATLG,DELETE),                        *\n*     //               UNIT=AFF=OUTPUT01,                           *\n*     //               VOL=REF=*.OUTPUT01,                          *\n*     //               LABEL=(2,SL,RETPD=30),                       *\n*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *\n*     //*                                                           *\n*     //SYSOUT     DD  SYSOUT=*                                     *\n*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *\n*                                                                   *\n*      THIS STEP WILL CREATE AN OUTPUT ONLY IF THERE IS INPUT DATA. *\n*      DO NOT STACK FILES WHEN USING PARM VALUE, LABEL ERRORS MAY   *\n*      OCCUR IF DATA IS MISSING BETWEEN LABEL FILES.                *\n*                                                                   *\n*     //CHECK   EXEC PGM=PSUTDUMP,PARM='CHK'                        *\n*     //*                                                           *\n*     //INPUT01    DD  DSN=FNBP.TRAN1025.CHECKING,                  *\n*     //               DISP=OLD                                     *\n*     //*                                                           *\n*     //INPUT02    DD  DSN=FNBP.DEPS2510.CHECKING,                  *\n*     //               DISP=OLD                                     *\n*                                                                   *\n*     //OUTPUT01   DD  DSN=FNBP.BKUP6505.SAVINGS(+1),               *\n*     //               DISP=(,CATLG,DELETE),                        *\n*     //               UNIT=(TAPE80,,DEFER),                        *\n*     //               LABEL=(1,SL,RETPD=30),                       *\n*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *\n*     //*                                                           *\n*     //OUTPUT02   DD  DSN=FNBP.DEPS4504.SLIPS(+1),                 *\n*     //               DISP=(,CATLG,DELETE),                        *\n*     //               UNIT=(TAPE80,,DEFER),                        *\n*     //               LABEL=(1,SL,RETPD=30),                       *\n*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *\n*     //*                                                           *\n*     //SYSOUT     DD  SYSOUT=*                                     *\n*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *\n*                                                                   *\n*     USE WHEN COPYING INPUT DATA TO DISK (TAPE AND DISK CAN BE     *\n*                                          MIXED)                   *\n*                                                                   *\n*     //COPYDSK EXEC PGM=PSUTDUMP                                   *\n*     //*                                                           *\n*     //INPUT01    DD  DSN=FNBP.HOSP5015.PATIENTS,                  *\n*     //               DISP=OLD                                     *\n*     //*                                                           *\n*     //INPUT02    DD  DSN=FNBP.PAYM6025.LATE,                      *\n*     //               DISP=OLD                                     *\n*                                                                   *\n*     //OUTPUT01   DD  DSN=FNBP.HOSP5015.PATIENTS(+1),              *\n*     //               DISP=(,CATLG,DELETE),                        *\n*     //               UNIT=SYSDA,                                  *\n*     //               SPACE=(TRK,(3,1),RLSE),                      *\n*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *\n*     //*                                                           *\n*     //OUTPUT02   DD  DSN=FNBP.PAYM6025.LATE(+1),                  *\n*     //               DISP=(,CATLG,DELETE),                        *\n*     //               UNIT=SYSDA,                                  *\n*     //               SPACE=(TRK,(3,1),RLSE),                      *\n*     //               DCB=(FNBDSCB,RECFM=FB,LRECL=80,BLKSIZE=9440) *\n*     //*                                                           *\n*     //SYSOUT     DD  SYSOUT=*                                     *\n*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *\n*                                                                   *\n*                                                                   *\n*     USE WHEN SENDING DATA TO PRINT                                *\n*                                                                   *\n*     //PRINT1 EXEC PGM=PSUTDUMP                                    *\n*     //*                                                           *\n*     //INPUT01    DD  DSN=FNBP.CHEK3005.REGISTER,                  *\n*     //               DISP=OLD                                     *\n*     //*                                                           *\n*     //INPUT02    DD  DSN=FNBP.HOSP3005.PATIENTS,                  *\n*     //               DISP=OLD                                     *\n*     //*                                                           *\n*     //INPUT03    DD  DSN=FNBP.BANK3005.LOANS,                     *\n*     //               DISP=OLD                                     *\n*     //*                                                           *\n*     //OUTPUT01   DD  SYSOUT=(C,,8011),                            *\n*     //               DCB=BLKSIZE=133                              *\n*     //*                                                           *\n*     //OUTPUT02   DD  SYSOUT=(C,,8011),                            *\n*     //               DCB=BLKSIZE=133                              *\n*     //*                                                           *\n*     //OUTPUT03   DD  SYSOUT=(C,,8011),                            *\n*     //               DCB=BLKSIZE=133                              *\n*                                                                   *\n* >>OR //   DCB=(RECFM=FBA,LRECL=133,BLKSIZE=9310)                  *\n*                                                                   *\n*     //SYSOUT     DD  SYSOUT=*                                     *\n*     //SYSUDUMP   DD  DUMMY   **USE ONLY WHEN NECESSARY**          *\n*                                                                   *\n*                                                                   *\n*      PSUTDUMP ERROR MESSAGE:                                      *\n*                                                                   *\n*      PSUTDUMP10 ** NUMBERING SEQUENCE IS NOT CORRECT FOR INPUTXX  *\n*                     AND OUTPUTXX CHECK NUMBERING OR SPELLING      *\n*                                                                   *\n*      PSUTDUMP20 ** YOU HAVE DUPLICATE DD NUMBERS IN YOUR INPUTXX  *\n*                     OR OUTPUTXX STATEMENTS                        *\n*                                                                   *\n*      PSUTDUMP30 ** ARE THERE EQUAL NUMBERING DD STATEMENTS FOR    *\n*                     INPUTXX AND OUTPUTXX OR MISSPELLED DD         *\n*                     STATEMENTS.                                   *\n*                                                                   *\n*      PSUTDUMP40 ** LRECL SPECIFIED ON OUTPUT DOES NOT MATCH       *\n*                      INPUT DCB                                    *\n*                                                                   *\n*      PSUTDUMP60 ** INVALID PARM VALUE SPECIFIED                   *\n*                                                                   *\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n*        SOURCE MODIFICATION ON 02/07/80 TO ALLOW FOR INPUT(TAPE)\n*          TO OUTPUT(DASD,UNIT RECORD, OR TAPE)\n*\n*    SOURCE MODIFICATION ON 12/13/88 TO DISPLAY RECORD COUNTS\n*    SOURCE MODIFICATION ON 05/08/89 TO COPY DCB FROM INPUT TO OUTPUT\n*\n*\n*        REGISTER ASSIGNMENT\n*        0 - STANDARD LINKAGE\n*        1 - STANDARD LINKAGE\n*        2 - TRT MAY DESTROY THE CONTENTS OF THIS REG\n*        3 - INITIALIZATION AND WORKINK REG\n*        4 - \"               \"    \"      \"\n*        5 - INPUT DCB\n*        6 - OUTPUT DCB\n*        7 - OUTPUT DD TABLE\n*        8 - INPUT DD TABLE\n*        9 -\n*       10 -\n*       11 - FIRST BASE\n*       12 - SECOND BASE\n*\n*\n         USING  IHADCB,5\n*\n         PRINT NOGEN\n         YREGS\n         STM   R14,12,12(13)       SAVE CALLERS REGS.\n         BALR  R11,0               LOAD BASE REG.\n         USING *,11                ESTABLISH ADDRESSABILITY.\n         USING *+4095,12           ESTABLISH ADDRESSABILITY.\n         LA    R12,4095(11)\n         ST    R13,SAVEAREA+4      CHAIN SAVE AREAS.\n         LR    R15,13                \"    \"     \"\n         LA    R13,SAVEAREA          \"    \"     \"\n         ST    R13,8(15)             \"    \"     \"\n         BAL   R10,SETPARM\n         LA    R8,INTABLE          LOAD ADDR OF INPUT DD TABLE.\n         LA    R7,OUTABLE          LOAD ADDR OF OUTPUT DD TABLE.\n         LA    R5,INPUT            LOAD ADDR OF INPUT DCB.\n         LA    R6,OUTPUT           LOAD ADDR OF OUTPUT DCB.\n         L     R3,16               -> TO CVT.\n         L     R3,0(R3)            -> TO TCB ->'R IN CVT.\n         L     R3,4(R3)            -> TO TCB.\n         L     R3,12(R3)           -> TO TIOT.\n         ST    R3,TIOTPTR          -> TO TIOT.\n*\n         BAL   R10,OPENSOUT\n         BAL   R10,DSPTITLE\n*\n         LA    R4,24               SO NEXT INST WILL -> TO DD ENTRY.\nSCAN     LA    R3,0(R4,R3)         -> TO NEXT OR FIRST DD ENTRY.\n         LTR   R4,R4               SET COND CODE.\n         BZ    SORTIT              ALL DD'S CHECKED - GO SORT THEM.\n         IC    R4,0(R3)            NEXT TIME WILL -> TO NEXT ENTRY.\n         CLC   4(5,R3),DDNAME(R5)  IS IT AN INPUT DD ?\n         BNE   SCAN2               NO - GO SEE IF IT'S AN OUTPUT DD.\n         CLI   11(R3),C' '         INPUT DD NAME LENGTH OF 7 ?\n         BNE   SCAN                NO GO GET NEXT DD ENTRY.\n         TRT   9(2,R3),NUMTAB      IS INPUT DD NUMBER NUMERIC ?\n         BC    R7,SCAN             NO GO GET NEXT DD ENTRY.\n         MVC   0(2,R8),9(R3)       YES PUT IT IN THE INPUT TABLE.\n         LA    R8,2(R8)            -> TO NEXT SPACE IN INPUT DD TABLE.\n         B     SCAN                GO GET NEXT DD ENTRY.\nSCAN2    CLC   4(6,R3),DDNAME(R6)  IS IT AN OUTPUT DD ?\n         BNE   SCAN                NO GO GET NEXT DD ENTRY.\n         TRT   10(2,R3),NUMTAB     IS OUTPUT DD NUMBER NUMERIC ?\n         BC    R7,SCAN             NO GO GET NEXT DD ENTRY.\n         MVC   0(2,R7),10(R3)      YES PUT IT IN THE OUTPUT DD TABLE.\n         LA    R7,2(R7)            -> TO NEXT SPACE IN OUTPUT DD TABLE.\n         B     SCAN                GO GET NEXT DD ENTRY.\n*********************************************************************\n*\nSORTIT   SR    R3,3                ZERO IN REG 3.\n         LA    R2,INTABLE          ADDR OF INPUT DD TABLE IN REG 2.\n         SH    R8,=H'2'            -> REG 8 TO LAST ENTRY IN TABLE.\n         LR    R4,R2               SAVE ->'R TO 1ST ENTRY IN TABLE.\n         BAL   R10,CHECK           GO SORT INPUT TABLE.\n         SR    R3,R3               RESET REG 3 TO ZERO.\n         LA    R2,OUTABLE          ADDR OF OUTPUT DD TABEL IN REG 2.\n         LR    R8,R7               ADDR OF LAST ENTRY NOT USED OF\n*                                  OF OUTPUT DD TABLE FROM REG 7 - 8.\n         SH    R8,=H'2'            -> REG 8 TO LAST ENTRY IN TABLE.\n         LR    R4,R2               SAVE ->'R TO 1ST ENTRY IN TABLE.\n         BAL   R10,CHECK           GO SORT OUTPUT DD TABLE.\n         CLC   INTABLE,OUTABLE     IS THERE AN INPUT DD FOR EACH OUTPUT\n*                                  DD AND CONVERSLY.\n         BE    DOIT                YES THEN CONTINUE PROCESSING.\n        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               'PSUTDUMP30 DD NUMBERING IS UNEQUAL, CHECK DD  ',       X\n               '           NUMBERING, POSSIBLE DUPLICATE NUMBERS',     X\n               '           OR THERE IS NOT A ONE FOR ONE NUMBERING',   X\n               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               ROUTCDE=(2)\n         ABEND 30,DUMP,STEP          NO THEN ABEND WITH USER ABEND 30.\nDOIT     EQU   *\n         MVC   DDNAME+5(2,5),0(4)  SET UP FIRST DD TO BE DUMPED.\n         MVC   DDNAME+6(2,6),0(4)  SET UP FIRST DD TO BE DUMPED TO.\nRUN      DS    0H\n         MVC   DDNAME+5(2,5),0(4)  SET UP  DD TO BE DUMPED.\n         MVC   DDNAME+6(2,6),0(4)  SET UP  DD TO BE DUMPED TO.\n*\n         BAL   R10,INITCTR\n         OPEN  (INPUT,(INPUT))\n*\n         RDJFCB (INPUT)          GET INFO FOR 1ST FILE\n         MVC   INJFCB,INFMJFCB\n         MVC   IRECFM,JFCRECFM\n         MVC   ILRECL,JFCLRECL\n         MVC   IBLKSI,JFCBLKSI\nRDJFOUT  DS    0H\n         RDJFCB (OUTPUT)\n         MVC   ORECFM,JFCRECFM\n         MVC   OLRECL,JFCLRECL\n         MVC   OBLKSI,JFCBLKSI\n         CLC   ORECFM,IRECFM      OUTPUT RECFM SAME AS INPUT?\n         BE    SAME01\n         CLI   ORECFM,B'0'        RECFM UNSPECIFIED?\n         BE    DUPRECFM           YES\n*\n*   COMPARE HI 2 BITS\n*\n         MVC   IRECFMHI,IRECFM\n         NI    IRECFMHI,B'11000000'\n         MVC   ORECFMHI,ORECFM\n         NI    ORECFMHI,B'11000000'\n         CLC   IRECFMHI,ORECFMHI  FIXED, VAR, UNDEF SAME?\n         BE    SAME01             YES, LEAVE ALONE\n        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               'PSUTDUMP40 RECFM INCOMPATIBLE                 ',       X\n               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               ROUTCDE=(2)\n         ABEND 40,DUMP,STEP          NO THEN ABEND WITH USER ABEND 40.\nDUPRECFM DS    0H\n         MVC   JFCRECFM,IRECFM    FORCE SAME AS INPUT\n         MVC   ORECFM,JFCRECFM\nSAME01   DS    0H\n         CLC   JFCLRECL,=H'0'     OUTPUT LRECL UNSPECIFIED?\n         BNE   SAME02\n         MVC   JFCLRECL,ILRECL    YES, FORCE SAME AS INPUT\n         MVC   OLRECL,JFCLRECL\nSAME02   DS    0H\n         CLC   JFCBLKSI,=H'0'     OUTPUT BLKSI UNSPECIFIED?\n         BNE   SAME03\n         MVC   JFCBLKSI,IBLKSI    YES, FORCE SAME AS INPUT\n         MVC   OBLKSI,JFCBLKSI\nSAME03   DS    0H\n         MVC   OUTJFCB,INFMJFCB   SAVE OUTPUT JFCB\n         BAL   R14,OPFORMAT\n         MVC   OPVOL,=C'*NONE*'\n         MVC   INFMJFCB(176),INJFCB RESTORE JFCB FROM INPUT\n*\nGET      GET   INPUT               READ INPUT RECORD.\n         ST    R1,IPRCD\n*\nCHKDCB   DS    0H\n         CLI   DCBSW,C'2'          TAKEN DCB EXIT?\n         BNE   CHKOPEN             NO\n         MVI   DCBSW,C'1'          RESET\n         BAL   R10,DSPIPCNT        DISPLAY INPUT COUNTS\n         RDJFCB (INPUT)            GET INFO FOR NEXT FILE\n         B     GET                 REDO LAST READ\n*\nCHKOPEN  DS    0H\n         CLI   OPENSW,C'Y'         IS OUTPUT OPEN?\n         BE    CHKEOV\n*\n         MVI   OPENSW,C'Y'\n         MVC   INFMJFCB(176),OUTJFCB\n         OPEN  (OUTPUT,(OUTPUT)),TYPE=J\n         RDJFCB (OUTPUT)         GET INFO FOR OUTPUT FILE\n         BAL   R14,OPFORMAT      FORMAT OUTPUT JFCB INFO\n         MVC   INFMJFCB(176),INJFCB RESTORE INPUT JFCB\n*\nCHKEOV   DS    0H\n         CLI   EOVSW,C'Y'          VOLUME CHANGE?\n         BNE   PUT                 NO\n         MVI   EOVSW,C'N'          RESET\n         BAL   R10,DSPIPCNT        DISPLAY INPUT COUNTS\n         BAL   R10,INCRVOL         POINT TO NEXT VOL SER\n*\nPUT      DS    0H\n         L     R3,IPRCD\n         TM    ORECFM,JFCVAR       IS OUTPUT VARIABLE?\n         BZ    PUT05               NO\n         CLC   0(2,R3),OLRECL      IS LRECL < MAX?\n         BNH   PUT05               YES\n         MVC   0(2,R3),OLRECL      NO, TRUNCATE\nPUT05    DS    0H\n         PUT   OUTPUT,(R3)         WRITE RECORD\nINCRCTR  DS    0H\n         AP    IRCDCTR,=P'1'       INCR INPUT  COUNTER\n         AP    ORCDCTR,=P'1'       INCR OUTPUT COUNTER\n         B     GET                 GO GET ANOTHER ONE.\nIPRCD    DS    F                   ADDRESS OF INPUT RECORD\nIRECFM   DS    B                   INPUT RECFM\nIRECFMHI DS    B                   INPUT RECFM HI 2 BITS\nILRECL   DS    H                   INPUT LRECL\nIBLKSI   DS    H                   INPUT BLKSIZE\nORECFM   DS    B                   OUTPUT RECFM\nORECFMHI DS    B                   OUPUT RECFM HI 2 BITS\nOLRECL   DS    H                   OUTPUT LRECL\nOBLKSI   DS    H                   OUTPUT BLKSIZE\n*******************************************************************\n*\nEODAD    DS    0H\n         BAL   R10,DSPIPCNT\n         CLOSE (INPUT)\n         CLI   OPENSW,C'Y'   IS OUTPUT FILE OPEN?\n         BE    CLOSEOP\n         CLI   OSPARM,C'C'   SHOULD IT BE?\n         BE    FREEPOOL      NO, 'CHK' PARM PRESENT\n         MVI   OPENSW,C'Y'\n         MVC   INFMJFCB(176),OUTJFCB  RESTORE OUTPUT JFCB\n         OPEN  (OUTPUT,(OUTPUT)),TYPE=J\n         RDJFCB (OUTPUT)         GET INFO FOR OUTPUT FILE\n         BAL   R14,OPFORMAT      FORMAT OUTPUT JFCB INFO\nCLOSEOP  DS    0H\n         CLOSE (OUTPUT)\n         FREEPOOL OUTPUT\nFREEPOOL DS    0H\n         BAL   R10,DSPOPCNT\n         FREEPOOL INPUT\n         LA    R4,2(R4)       POINT TO NEXT ENTRY IN TABLE.\n         CR    R4,R7          AT END OF TABLE ?\n         BL    RUN            NO GO DUMP NEXT FILE.\n*\n*                 E O J\n*\n         CLOSE SYSOUT\n         L     R13,SAVEAREA+4 YES\n         LM    R14,12,12(13)  RETURN\n         SR    R15,15         TO\n         BR    14             CALLER\n********************************************************************\n*\nSORT     LA    R2,2(2)        INCR TO NEXT 2 ENTRIES IN TABLE.\n         USING SORTWORK,2\nCHECK    CR    R2,R8          AT END OF UNSORTED TABLE ?\n         BE    TABLEND        YES GO SEE IF WE'RE DONE.\n         BL    COMPARE        NO CHECK SEQ.\n         WTO   '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',      X\n               'PSUTDUMP10 NUMBERING SEQUENCE NOT CORRECT, CHECK',     X\n               '           NUMBERING SEQUENCE OR DD NAME SPELLING',    X\n               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',      X\n               ROUTCDE=(2)\n         ABEND 10,DUMP,STEP   DD STATMENT MISSING FOR INPUT OR OUTPUT.\nCOMPARE  CLC   LOW,NEXT       NO ARE THESE 2 ITEMS IN SEQ ?\n         BL    SORT           YES GO TO NEXT ONE.\n         BH    SWAP           NOT IN SEQ GO SWAP THEM.\n        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               'PSUTDUMP20   DUPLICATE INPUT OR OUTPUT DD NUMBERING',  X\n               '           CHECK INPUT AND OUTPUT SEQUENCE NUMBERS',   X\n               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               ROUTCDE=(2)\n*                             CANT HAVE 2 DD NAMES THE SAME\n         ABEND 20,DUMP,STEP   WHAT ARE YOU TRYING TO DO ???\nSWAP     LH    R3,LOW         SAVE LOW OUT OF SEQ ITEM IN REG 3.\n         MVC   LOW,NEXT       MOVE LOW ITEM DOWN IN TABLE.\n         STH   R3,NEXT        PUT HIGH ITEM WHERE LOW ITEM WAS.\n         B     SORT           GO TO CHECK NEXT ONE.\nTABLEND  CH    R3,=H'0'       IS WHOLE TABLE IN SEQ ?\n         BER   10             YES RETURN\n         SH    R8,=H'2'       NO REDUCE SEARCH TABLE SIZE.\n         LR    R2,4           RESET REG 2 TO -> TO TOP OF TABLE.\n         SR    R3,3           RESET REG 3 TO ZERO.\n         B     CHECK          GO BACK THROUGH AGAIN.\n*\nIPDCBEX  DS    0H\n         STM   R0,R15,DCBSAVE      SAVE LINKAGE REGISTER\n         LA    R13,SAVEAREA\n*\n         CLI   DCBSW,C'0'          1ST TIME?\n         BNE   SETRERD             NO, SET REREAD SW\n         OI    DCBOFLGS,X'08'      SET FOR UNLIKE ATTRIBUTES\n         MVI   DCBSW,C'1'          SET TO NOT 1ST TIME\n         B     DCBEXIT\nSETRERD  DS    0H\n         MVI   DCBSW,C'2'          SET TO REDO LAST READ\n         B     DCBEXIT\n*\nDCBEXIT  DS    0H\n         LM    R0,R15,DCBSAVE\n         BR    14\nDCBSAVE  DS    9D\nDCBSW    DC    C'0'\nOPENSW   DC    C'N'\nINJFCB   DS    CL176\nOUTJFCB  DS    CL176\n*\nIPEOVEX  DS    0H\n         STM   R0,R15,EOVSAVE      SAVE LINKAGE REGISTER\n         LA    R13,SAVEAREA\n*\n         MVI   EOVSW,C'Y'          INDICATE NEW VOLUME\nRDJ02    DS    0H\n*\nEOVEXIT  DS    0H\n         LM    R0,R15,EOVSAVE\n         BR    14\nEOVSAVE  DS    9D\nEOVSW    DC    C'N'\n*\nINCRVOL  DS    0H\n         ST    R10,INCS10       SAVE LINKAGE REGISTER\n*\n         L     R10,IVOLPTR\n         LA    R10,6(R10)          INCREMENT VOLSER POINTER\n         ST    R10,IVOLPTR\n         L     R10,INCS10\n         BR    R10\nINCS10   DS    F\nIVOLPTR  DS    F\n*\nOPEOVEX  DS    0H\n         STM   R0,R15,OEOVSAVE     SAVE LINKAGE REGISTER\n         LA    R13,SAVEAREA\n*\n         CLC   OVOLCTR,=F'21'      LUMP ALL VOLS > 20 INTO 21\n         BNL   MAXOVOL\n         L     R10,OVOLCTR\n         LA    R10,1(R10)          INCREMENT VOLSER COUNTER\n         ST    R10,OVOLCTR         SAVE VOL COUNTER\n         L     R10,OCNTPTR         GET POINTER TO COUNT TABLE\n         ZAP   0(8,R10),ORCDCTR    STORE LAST VOL'S RECORD COUNT\n         AP    OTOTCNT,ORCDCTR     ADD TO TOTAL COUNT\n         ZAP   ORCDCTR,=P'0'\n         LA    R10,8(R10)          POINT TO NEXT COUNT ENTRY\n         ST    R10,OCNTPTR\nMAXOVOL  DS    0H\n*\nOEOVEXIT DS    0H\n         LM    R0,R15,OEOVSAVE\n         BR    14\nOEOVSAVE DS    9D\nOVOLCTR  DS    F                 NUMBER OF O/P VOLUMES\nOCNTPTR  DS    F                 NBR OF RECORD COUNTS IN OCNTTBL\nOTOTCNT  DS    PL8'0'\nOCNTTBL  DS    21PL8             MAX OF 21 VOLUMES\n*\nDSPIPCNT DS    0H\n         STM   R2,R10,DSPSVA\n*\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,IRCDCTR\n         MVC   IPCNT,ZSUPP8\n         ZAP   IRCDCTR,=P'0'\n*\n         CLC   IVOLPTR,=F'120'     MORE THAN 20 VOLUMES?\n         BL    CHK5VOLS            NO\n         MVC   IPVOL,=6C'*'        YES\n         B     MOVERECL\n*\nCHK5VOLS DS    0H\n         CLC   IVOLPTR,=F'30'     MORE THAN 5 VOLUMES?\n         BL    MOVEVOL            NO\n* GET VOL SER FROM JFCB EXTENSION\n         MVC   JFCBXPTR+1(3),JFCBEXAD\n         L     R10,JFCBXPTR\n         LA    R10,20(R10)        POINT TO VOL SER LIST\n         A     R10,IVOLPTR        ADD VOL POINTER\n         S     R10,=F'30'         SUBTRACT LENGTH OF 1ST 5 VOLS\n         MVC   IPVOL,0(R10)\n         B     MOVERECL\n*\nMOVEVOL  DS    0H\n         LA    R10,JFCBVOLS\n         A     R10,IVOLPTR\n         MVC   IPVOL,0(R10)\n*\nMOVERECL DS    0H\n         LA    R2,0                SET R2 TO ZERO\n         LH    R2,JFCLRECL         LOAD LRECL\n         CVD   R2,CVDWRK\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,CVDWRK\n         MVC   IPLRECL,ZSUPP5\n*\n         LA    R2,0                SET R2 TO ZERO\n         LH    R2,JFCBLKSI         LOAD BLKSIZE\n         CVD   R2,CVDWRK\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,CVDWRK\n         MVC   IPBLK,ZSUPP7\n*\n         MVC   RECFMWK,JFCRECFM\n         BAL   R10,SETRECFM\n         MVC   IPRECFM,RECFMSET\n*\n         MVC   IPDSN,JFCBDSNM\n*\n         LA    R0,IPMSG\n         BAL   R10,WRITSOUT\n         MVC   IPMSG,=133C' '\n         ZAP   IRCDCTR,=P'0'\n*\n         LM    R2,R10,DSPSVA\n         BR    10\n*\nJFCBXPTR DC    F'0'\n*\nOPFORMAT DS    0H\n         STM   R2,R15,FORMSA\n*\n         LA    R2,0                SET R2 TO ZERO\n         LH    R2,JFCLRECL         LOAD LRECL\n         CVD   R2,CVDWRK\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,CVDWRK\n         MVC   OPLRECL,ZSUPP5\n*\n         LA    R2,0                SET R2 TO ZERO\n         LH    R2,JFCBLKSI         LOAD BLKSIZE\n         CVD   R2,CVDWRK\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,CVDWRK\n         MVC   OPBLK,ZSUPP7\n*\n         MVC   RECFMWK,JFCRECFM\n         BAL   R10,SETRECFM\n         MVC   OPRECFM,RECFMSET\n*\n         MVC   OPDSN,JFCBDSNM\n*\n         LM    R2,R15,FORMSA\n         BR    14\n*\nFORMSA   DS    14F\n*\nDSPOPCNT DS    0H\n         STM   R2,R10,DSPSVA\n*\n         RDJFCB (OUTPUT)         GET INFO FOR OUTPUT FILE\n         L     R10,OCNTPTR         GET POINTER TO COUNT TABLE\n         ZAP   0(8,R10),ORCDCTR    STORE LAST VOL'S RECORD COUNT\n         AP    OTOTCNT,ORCDCTR     ADD TO TOTAL COUNT\n*\n         LA    R7,0                VOL COUNTER\n         LA    R8,JFCBVOLS         VOLUME LIST\n         LA    R9,OCNTTBL          TABLE OF COUNTS BY VOLSER\n*\nPUT1VOL  DS    0H\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,0(R9)       RECORD COUNT\n         MVC   OPCNT,ZSUPP8\n         CLI   OPENSW,C'N'         WAS OUTPUT OPENED?\n         BE    UNOPENED\n         C     R7,=F'20'           PAST VOL NUMBER 20?\n         BNL   OPVOL21\n         C     R7,=F'5'            PAST VOL NUMBER 5?\n         BNL   OPVOL6\n         MVC   OPVOL,0(R8)         VOL SER\n         B     PUTOPMSG\nOPVOL6   DS    0H\n* GET VOL SER FROM JFCB EXTENSION\n         MVC   JFCBXPTR+1(3),JFCBEXAD\n         L     R10,JFCBXPTR\n         LA    R10,20(R10)        POINT TO VOL SER LIST\n         AR    R10,R8             ADD VOL POINTER\n         S     R10,=A(JFCBVOLS+30) SUBTRACT LENGTH OF 1ST 5 VOLS\n         MVC   OPVOL,0(R10)\n         B     PUTOPMSG\nOPVOL21  DS    0H\n         MVC   OPVOL,=C'*MORE*'\n         B     PUTOPMSG\nUNOPENED DS    0H\n         MVC   OPVOL,=C'*NONE*'\n         B     PUTOPMSG\n*\nPUTOPMSG DS    0H\n         LA    R0,OPMSG\n         BAL   R10,WRITSOUT\n         MVC   OPDDGRP,=9C' '\n         C     R7,OVOLCTR\n         BE    CHKOPTOT\n         LA    R7,1(R7)              NEXT VOL NUMBER\n         LA    R8,6(R8)              NEXT VOL SER\n         LA    R9,8(R9)              NEXT RECORD COUNT\n         B     PUT1VOL\nCHKOPTOT DS    0H\n         CLC   OVOLCTR,=F'0'\n         BE    CLROPMSG\n         MVC   OPMSG,=133C' '\n         MVC   OPCNT,=8C'-'\n         LA    R0,OPMSG\n         BAL   R10,WRITSOUT\n         MVC   ZSUPPWK,ZSUPP\n         ED    ZSUPPWK,OTOTCNT     TOTAL RECORD COUNT\n         MVC   OPCNT,ZSUPP8\n         LA    R0,OPMSG\n         BAL   R10,WRITSOUT\nCLROPMSG DS    0H\n         MVC   OPMSG,=133C' '\n*\n         LA    R0,=133C' '\n         BAL   R10,WRITSOUT\n*\n         LM    R2,R10,DSPSVA\n         BR    10\nDSPSVA   DS    11F\nTIOTWK   DS    H\n*\nFINDTIOT DS    0H\n         ST    R10,FINDS10         SAVE LINKAGE REGISTER\n*\n         L     R3,TIOTPTR          ADDRESS OF TIOT\n         LH    R4,TIOTWK           SO NEXT INST WILL -> TO DD ENTRY.\n         LA    R3,0(R4,R3)         -> TO NEXT OR FIRST DD ENTRY.\n*\n         L     R10,FINDS10          RESTORE LINKAGE REGISTER\n         BR    10\nFINDS10  DS    F\n*\nSETRECFM DS    0H\n         ST    R10,SETRS10         SAVE LINKAGE REGISTER\n*\n         MVC   RECFMSET,=CL5' '\n         MVC   RECFMWK1,RECFMWK\n         TM    RECFMWK1,B'10000000' FIXED?\n         BNZ   FMFIX\n         MVC   RECFMWK1,RECFMWK\n         TM    RECFMWK1,B'01000000' VARIABLE?\n         BNZ   FMVAR\nFMUND    DS    0H\n         MVI   RECFM1,C'U'\n         B     CHKBLK\nFMFIX    DS    0H\n         MVI   RECFM1,C'F'\n         B     CHKBLK\nFMVAR    DS    0H\n         MVI   RECFM1,C'V'\n         B     CHKBLK\nCHKBLK   DS    0H\n         MVC   RECFMWK1,RECFMWK\n         TM    RECFMWK1,B'00010000' BLOCKED?\n         BZ    CHKASA\n         MVI   RECFM2,C'B'\nCHKASA   DS    0H\n         MVC   RECFMWK1,RECFMWK\n         TM    RECFMWK1,B'00000100' ASA?\n         BNZ   FMASA\n         MVC   RECFMWK1,RECFMWK\n         TM    RECFMWK1,B'00000010' MACHINE?\n         BNZ   FMMACH\n         B     SETRECFX\nFMASA    DS    0H\n         MVI   RECFM3,C'A'\n         B     SETRECFX\nFMMACH   DS    0H\n         MVI   RECFM3,C'M'\n         B     SETRECFX\nSETRECFX DS    0H\n*\n         L     R10,SETRS10          RESTORE LINKAGE REGISTER\n         BR    10\nSETRS10  DS    F\n*\nDSPTITLE DS    0H\n         ST    R10,DSPTS10         SAVE LINKAGE REGISTER\n         MVC   JOBNAME,0(R3)\n         CLC   =C' ',16(R3)        IF JOBSTEP SPACE, NOT A PROC\n         BE    NOTPROC\n         MVC   PROCSTEP,8(R3)\n         MVC   JOBSTEP,16(R3)\n         B     DSPSTEP\n*\nNOTPROC  DS    0H\n         MVC   PROCSTEP,=CL8'*NONE*'\n         MVC   JOBSTEP,08(R3)\n*\nDSPSTEP  DS    0H\n         LA    R0,TITLMSG\n         BAL   R10,WRITSOUT\n*\n         LA    R0,=133C' '\n         BAL   R10,WRITSOUT\n*\n         LA    R0,STEPMSG\n         BAL   R10,WRITSOUT\n*\n         LA    R0,=133C' '\n         BAL   R10,WRITSOUT\n*\n         LA    R0,HDGMSG1\n         BAL   R10,WRITSOUT\n*\n         LA    R0,HDGMSG2\n         BAL   R10,WRITSOUT\n*\n         L     R10,DSPTS10          RESTORE LINKAGE REGISTER\n         BR    10\nDSPTS10  DS    F\n*\nGETDSN   DS    0H                  POINT TO JFCB\n         ST    R10,GETDS10         SAVE LINKAGE REGISTER\n*\n         MVC   JFCBADDR,=4X'00'\n         MVC   JFCBADDR+1(3),X'0C'(R3)  MOVE TIOEJFCB\n         L     R10,JFCBADDR\n         MVC   JFCBDSN,16(R10)           MOVE DATASET NAME\n*\n         L     R10,GETDS10          RESTORE LINKAGE REGISTER\n         BR    10\nGETDS10  DS    F\nJFCBADDR DS    F\nJFCBDSN  DS    CL52\n*\nOPENSOUT DS    0H\n         ST    R10,OPENS10         SAVE LINKAGE REGISTER\n*\n         OPEN  (SYSOUT,OUTPUT)        OPEN SYSOUT\n         B      OPENEXIT\nSOUTERR  WTO   'UNABLE TO OPEN SYSOUT - ABNORMAL TERMINATION'\n         ABEND 60,DUMP,STEP\n*\nOPENEXIT DS    0H\n         L     R10,OPENS10          RESTORE LINKAGE REGISTER\n         BR    10\nOPENS10  DS    F\n*\nSETPARM  DS    0H\n         ST    R10,PARMS10         SAVE LINKAGE REGISTER\n*\n         MVI   OSPARM,C' '\n         L     R10,0(R1)\n         CLC   =H'0',0(R10)        IS PARM LENGTH = 0?\n         BE    PARMEXIT\n         CLC   =H'3',0(R10)        IS PARM LENGTH = 3?\n         BNE   BADPARM\n         CLC   =C'CHK',2(R10)\n         BNE   BADPARM\n         MVC   OSPARM,=C'C'\n         MVC   TITLMODE,=C'(CHECK MODE)'\n         B     PARMEXIT\nBADPARM  DS    0H\n        WTO    '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               'PSUTDUMP60 INVALID PARM VALUE SPECIFIED       ',       X\n               '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*',  X\n               ROUTCDE=(2)\n         ABEND 60,DUMP,STEP\n*\nPARMEXIT DS    0H\n         L     R10,PARMS10          RESTORE LINKAGE REGISTER\n         BR    R10\nPARMS10  DS    F\nOSPARM   DS    CL1\n*\nINITCTR  DS    0H\n         ST    R10,INITS10         SAVE LINKAGE REGISTER\n         MVI   OPENSW,C'N'         OUTPUT OPEN SWITCH\n         ZAP   IRCDCTR,=P'0'       ZERO RECORD COUNTER\n         ZAP   ORCDCTR,=P'0'       ZERO RECORD COUNTER\n         ZAP   OTOTCNT,=P'0'       ZERO TOTAL COUNTER\n         MVI   DCBSW,C'0'          SET TO 1ST TIME\n         MVI   EOVSW,C'N'\n         MVC   IVOLPTR,=F'0'\n         MVC   OVOLCTR,=F'0'\n         MVC   OCNTPTR,=A(OCNTTBL)\n*\n         MVC   IPDDNAM,DDNAME(R5)\n         MVI   IPCOLON,C':'\n         MVC   OPDDNAM,DDNAME(R6)\n         MVI   OPCOLON,C':'\n*\n         L     R10,INITS10          RESTORE LINKAGE REGISTER\n         BR    10\nINITS10  DS    F\n*\nWRITSOUT DS     0H\n         ST    R10,WRITS10\n*\n         PUT   SYSOUT\n*\n         L     R10,WRITS10\n         BR    10\nWRITS10  DS    F\n*-------------------------------------------------\n*\nSAVEAREA DC    9D'0'\nINTABLE  DC    CL200' '\nOUTABLE  DC    CL200' '\n*\nNUMTAB   DS    0D\n         DC    X'F00102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'00000000000000000000FAFBFCFDFEFF'\n*\nINPUT    DCB   DSORG=PS,MACRF=GL,DDNAME=INPUT,EODAD=EODAD,EXLST=IEXLST\nOUTPUT   DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT,EXLST=OEXLST\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,RECFM=FBA,              X\n               LRECL=133,BLKSIZE=133\n*\nIEXLST   DS    0F\n         DC    X'05',AL3(IPDCBEX)\n         DC    X'06',AL3(IPEOVEX)\n         DC    X'87',AL3(INFMJFCB)\n*\nOEXLST   DS    0F\n         DC    X'06',AL3(OPEOVEX)\n         DC    X'87',AL3(INFMJFCB)\n*\n*   FILE STATISTICS MESSAGES\n*\nDDLEN    EQU  9\nCNTLEN   EQU  8\nDSNLEN   EQU  44\nVOLLEN   EQU  6\nRECFMLEN EQU  5\nLRECLLEN EQU  5\nBLKLEN   EQU  5\n*\nDDCOL    EQU  2\nCNTCOL   EQU  DDCOL+DDLEN+1\nDSNCOL   EQU  CNTCOL+CNTLEN+1\nVOLCOL   EQU  DSNCOL+DSNLEN+1\nRECFMCOL EQU  VOLCOL+VOLLEN+1\nLRECLCOL EQU  RECFMCOL+RECFMLEN+1\nBLKCOL   EQU  LRECLCOL+LRECLLEN+1\n*\nIRCDCTR  DC    PL8'0'\nORCDCTR  DC    PL8'0'\nTIOTPTR  DS    F                ADDRESS OF TIOT\nRECFMWK  DS    CL1\nRECFMWK1 DS    CL1\nRECFMSET DS    0CL5\n         DS    CL2\nRECFM1   DS    CL1\nRECFM2   DS    CL1\nRECFM3   DS    CL1\n*\nCVDWRK   DS    D\nZSUPP    DC    C' ',13X'20',X'2120'\n*\nZSUPPWK  DS    0CL16\n         DS    CL8\nZSUPP8   DS    0CL8\n         DS    CL1\nZSUPP7   DS    0CL7\n         DS    CL2\nZSUPP5   DS    0CL5\n         DS    CL2\nZSUPP3   DS    CL3\n*\nTITLMSG  EQU   *\n         DC    C'1'\n         DC    132C'-'\n         ORG   TITLMSG+26\n         DC    C'  P S U T D U M P  '\n         DS    CL5\nTITLMODE DS    CL12\n         ORG\n*\nSTEPMSG  DC    CL133' '\n         ORG   STEPMSG+1\n         DC    C'  JOB: '\nJOBNAME  DS    CL8\n         DC    C'  PROC STEP: '\nPROCSTEP DS    CL8\n         DC    C'  JOB STEP: '\nJOBSTEP  DS    CL8\n         ORG\n*\nHDGMSG1  DC    CL133' '\n         ORG   HDGMSG1-1+DDCOL\n         DC    CL10'  DDNAME'\n         ORG   HDGMSG1-1+CNTCOL\n         DC    CL09'   COUNT'\n         ORG   HDGMSG1-1+DSNCOL\n         DC    CL45'DSNAME'\n         ORG   HDGMSG1-1+VOLCOL\n         DC    CL06'VOLSER'\n         ORG   HDGMSG1-1+RECFMCOL\n         DC    CL06'RECFM'\n         ORG   HDGMSG1-1+LRECLCOL\n         DC    CL06'LRECL'\n         ORG   HDGMSG1-1+BLKCOL\n         DC    CL07'BLKSIZE'\n         ORG\n*\nHDGMSG2  DC    CL133' '\n         ORG   HDGMSG2-1+DDCOL\n         DC    09C'-'\n         ORG   HDGMSG2-1+CNTCOL\n         DC    08C'-'\n         ORG   HDGMSG2-1+DSNCOL\n         DC    44C'-'\n         ORG   HDGMSG2-1+VOLCOL\n         DC    6C'-'\n         ORG   HDGMSG2-1+RECFMCOL\n         DC    05C'-'\n         ORG   HDGMSG2-1+LRECLCOL\n         DC    05C'-'\n         ORG   HDGMSG2-1+BLKCOL\n         DC    07C'-'\n         ORG\n*\nIPMSG    DC    CL133' '\n         ORG   IPMSG-1+DDCOL\n         DS    CL1\nIPDDNAM  DS    CL7\nIPCOLON  DC    C':'\n         ORG   IPMSG-1+CNTCOL\nIPCNT    DS    CL8\n         ORG   IPCNT+CNTLEN-1\nIPSIGN   DS    CL1\n         ORG   IPMSG-1+DSNCOL\nIPDSN    DS    CL44\n         ORG   IPMSG-1+VOLCOL\nIPVOL    DS    CL6\n         ORG   IPMSG-1+RECFMCOL\nIPRECFM  DS    CL5\n         ORG   IPMSG-1+LRECLCOL\nIPLRECL  DS    CL5\n         ORG   IPMSG-1+BLKCOL\nIPBLK    DS    CL7\n         ORG\n*\nOPMSG    DC    CL133' '\n         ORG   OPMSG-1+DDCOL\nOPDDGRP  DS    0CL9\nOPDDNAM  DS    CL8\nOPCOLON  DC    C':'\n         ORG   OPMSG-1+CNTCOL\nOPCNT    DS    CL8\n         ORG   OPCNT+CNTLEN-1\nOPSIGN   DS    CL1\n         ORG   OPMSG-1+DSNCOL\nOPDSN    DS    CL44\n         ORG   OPMSG-1+VOLCOL\nOPVOL    DS    CL6\n         ORG   OPMSG-1+RECFMCOL\nOPRECFM  DS    CL5\n         ORG   OPMSG-1+LRECLCOL\nOPLRECL  DS    CL5\n         ORG   OPMSG-1+BLKCOL\nOPBLK    DS    CL7\n         ORG\n*\n         IEFJFCBN\n*\n         LTORG\n*\n*\nSORTWORK DSECT\nLOW      DS    CL2\nNEXT     DS    CL2\n         DSECT\nDCBS     DCBD  DSORG=PS\nLRECL    EQU   DCBLRECL-IHADCB\nBLKSIZE  EQU   DCBBLKSI-IHADCB\nRECFM    EQU   DCBRECFM-IHADCB\nDDNAME   EQU   DCBDDNAM-IHADCB\nTIOTOFF  EQU   DCBTIOT-IHADCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PSUTEOF": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PSUTEOF  CSECT\n*\n*  THIS IS AN PRODUCTION SERVICES UTILITY PROGRAM\n*\n**  FOR INFORMATION CALL: GEORGE RAMAS\n**                        OAKLAND, CALIFORNIA 94610\n**                        (415)-763-0540\n**          STARTING 1990 (510)\n**\n*  THIS VERSION OF PSUTEOF DEMANDS THAT THE DD NAME 'FILE' BE AT\n*  LEAST IN THE FIRST FOUR BYTES, ELSE IT WILL RETURN A CONDITION CODE\n*  OF U0001.  YOU CAN HAVE FILEXX THRU FILEXX (AS MANY AS YOU WANT)\n*\n*  //FILE01 DD DSN=LOSP.TRAN10125.SORTED(+1),  **ALLOCATES WITH EOF**\n*              DISP=(,CATLG,DELETE),\n*              UNIT=SYSDA,\n*              SPACE=(CYL,(25,15)), **NO RLSE PARAMETER HERE**\n*              DCB=(MDLDSCB,RECFM=FBA,LRECL=133,BLKSIZE=9310,DSORG=PS)\n*\n*  NOTE:  FOR ABOVE ALLOCATION REPEAT THE SPACE PARAMETER IN THE\n*         STEP THAT THE DATA SET IS BEING WRITTEN TO WITH THE\n*         'RLSE' PARAMETER.\n*\n*  //FILEAA DD DSN=LOSP.PAYM2510.DEPOSTS(0),\n*              DISP=OLD     ***WRITE EOF TO DSN***\n*\n*\n*\n* GENERAL PURPOSE REGISTERS\n          SPACE\nR0        EQU 0\nR1        EQU 1\nR2        EQU 2\nR3        EQU 3\nR4        EQU 4\nR5        EQU 5\nR6        EQU 6\nR7        EQU 7\nR8        EQU 8\nR9        EQU 9\nR10       EQU 10\nR11       EQU 11\nR12       EQU 12\nR13       EQU 13\nR14       EQU 14\nR15       EQU 15\n          SPACE\n* FLOATING POINT REGISTERS\n          SPACE\nF0        EQU 0\nF2        EQU 2\nF4        EQU 4\nF6        EQU 6\n          SPACE\n* EXTENDED CONTROL REGISTERS\n          SPACE\nC0        EQU 0\nC1        EQU 1\nC2        EQU 2\nC3        EQU 3\nC4        EQU 4\nC5        EQU 5\nC6        EQU 6\nC7        EQU 7\nC8        EQU 8\nC9        EQU 9\nC10       EQU 10\nC11       EQU 11\nC12       EQU 12\nC13       EQU 13\nC14       EQU 14\nC15       EQU 15\n         SAVE  (14,12),,*\n         LR    R11,R15\n         USING PSUTEOF,R11\n         ST    R13,SAVEAREA+4\n         LA    R3,SAVEAREA\n         ST    R3,8(R13)\n         LR    R13,R3\n         SLR   R6,R6\n*   GET TIOT FOR THIS JOB\n         EXTRACT ADRTIOT,FIELDS=TIOT\n         L     R7,ADRTIOT          POINT 7 TO TIOT START\n         LA    R7,24(R7)           GET TO FIRST DD ENTRY IN TIOT\nDOIT     CLC   4(4,R7),=CL4'FILE'  SEE IF WE HAVE A VALID DD\n         BNE   NEXT                IF NOT GO TO NEXT\n         MVC   FILEA+40(8),4(R7)   MOVE DDNAME TO DCB FOR WRITE\n         OPEN  (FILEA,OUTPUT)      WRITE EOF\n         CLOSE FILEA                   ON INDICATED DD\nNEXT     IC    R6,0(R7)            LENGTH OF ENTRY\n         AR    R7,R6               BUMP TO NEXT DD ENTRY IN TIOT\n         CLC   0(4,R7),=F'0'       END OF TIOT TEST\n         BNE   DOIT                GO DO NEXT DD\nEOJ      EQU   *\n         SR    15,15\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\nFILEA    DCB   DSORG=PS,BUFL=32760,MACRF=(PM),DDNAME=XXXXXXXX\nSAVEAREA DS    18F\nADRTIOT  DC    F'0'                ADDRESS OF TIOT FROM EXTRACT MACRO\n         EJECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSUTGDG": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "000100******************************************************************\n000200*** I D E N T I F I C A T I O N                 D I V I S I O N **\n000300** *                          PSUTGDG                           **\n000400***                                                             **\n000500***    THE PURPOSE OF THIS PROGRAM IS TO LIST THE NUMBER OF GDG **\n000600***    ENTRIES FOR A SELECT GROUP OF DATA SETS OR NODE LEVELS.  **\n000700***    IT SELECTS CERTAIN FIELDS FROM A IDCAMS LISTCAST OUTPUT. **\n000800***                                                             **\n000803***    FOR INFORMATION: GEORGE RAMAS                            **\n000804***                     OAKLAND, CALIFORNIA 94610               **\n000805***                     (415) 763-0540                          **\n000806***          AFTER 1990 (510)                                   **\n000810***                                                             **\n000900***    THE INPUT TO THIS PROGRAM IS A LISTCAT USING THE         **\n001000***    UTILITY PGM=IDCAMS                                       **\n001100***                                                             **\n001110***  //STEP1  EXEC PGM=IDCAMS                                   **\n001120***  //*                                                        **\n001130***  //SYSPRINT DD DSN=&&LISTING,                               **\n001140***  //            DISP=(,PASS,DELETE),                         **\n001150***  //            UNIT=SYSDA,                                  **\n001160***  //            SPACE=(CYL,(2,1),RLSE),                      **\n001170***  //            DCB=(RECFM=VBA,LRECL=125,BLKSIZE=23476)      **\n001180***  //*                                                        **\n001190***  //* USE LEVEL FOR NODE SELECTION      DLSP                 **\n001200***  //* USE ENTRY FOR FULL DATA SET NAME  DLSP.TRAN1050        **\n001201***  //* YOU MUST USE THE 'ALL' PARAMETER                       **\n001202***  //*                                                        **\n001203***  //SYSIN    DD *                                            **\n001204***    LISTC LEVEL(DLSP) ALL                                    **\n001205***  /*                                                         **\n001206***  //*                                                        **\n001207***  //SYSOUT   DD SYSOUT=*                                     **\n001208***                                                             **\n001209***    EXECUTION JCL FOR THIS PROGRAM IS AS FOLLOWS:            **\n001300***                                                             **\n001400***  //STEP2  EXEC PGM=PSUTGDG,COND=(0,NE)                      **\n001500***  //*                                                        **\n001600***  //STEPLIB DD DSN=OSSP.UTILITY.LOADLIB,                     **\n001700***  //*                                                        **\n001800***  //GDGLIST DD DSN=&&LISTING,                                **\n001900***  //           DISP=(OLD,DELETE),                            **\n002000***  //           DCB=(RECFM=VBA,LRECL=125,BLKSIZE=23476)       **\n002100***  //*                                                        **\n002200***  //GDGRPT  DD SYSOUT=A,                                     **\n002300***  //           DCB=(RECFM=FBA,LRECL=133,BLKSIZE=23408)       **\n002400***  //*                                                        **\n002500***  //SYSOUT  DD SYSOUT=*                                      **\n002600***  //SYSUDMP DD SYSOUT=*                                      **\n002700***                                                             **\n002800***                                                             **\n002900******************************************************************\n003000 IDENTIFICATION DIVISION.\n003100 PROGRAM-ID.    PSUTGDG.\n003200 INSTALLATION.\n003300 AUTHOR.\n003400 DATE-WRITTEN.    OCT. 1988.\n003500 DATE-COMPILED.\n003600 REMARKS.\n003700  PURPOSE:\n003800\n003900\n004000  INPUT:\n004100   1) FILE NAME:  GDG-LIST                  DD NAME:    GDGLST\n004200      REC LENGTH: 80                        KEY LENGTH: --\n004300      DSORG:      SEQ                       RECFMT:     FB\n004400\n004500  OUTPUT:\n004600   1) FILE NAME:  GDG-REPORT                DD NAME:    GDGRPT\n004700      REC LENGTH: 133                       KEY LENGTH: --\n004800      DSORG:      SEQ                       RECFMT:     FB\n004900\n005000*\n005100******************************************************************\n005200** * * * * * *  M O D I F I C A T I O N      L O G  * * * * * * **\n005300**            COMMENT IN                                         *\n005400**  DATE      COL 73-80   DESCRIPTION OF CHANGE & NAME           *\n005500**  --------  ----------- ---------------------------------------*\n005600**  99/99/99  FNB001      TEXT...   PROGRAMMER NAME.             *\n005700**                                                               *\n005800******************************************************************\n005900     EJECT\n006000 ENVIRONMENT DIVISION.\n006100 CONFIGURATION SECTION.\n006200 SOURCE-COMPUTER. IBM-3090.\n006300 OBJECT-COMPUTER. IBM-3090.\n006400 INPUT-OUTPUT SECTION.\n006500 FILE-CONTROL.\n006600     SELECT GDG-LIST            ASSIGN TO UT-S-GDGLST.\n006700     SELECT GDG-REPORT          ASSIGN TO UT-S-GDGRPT.\n006800     EJECT\n006900 DATA DIVISION.\n007000 FILE SECTION.\n007100******************************************************************\n007200*** INPUT FILE                           INPUT                  **\n007300******************************************************************\n007400 FD  GDG-LIST\n007500     RECORDING MODE IS V\n007600     LABEL RECORDS ARE STANDARD\n007700     BLOCK CONTAINS 0 RECORDS\n007710     RECORD CONTAINS 0 TO 121 CHARACTERS.\n007800 01  GDG-LIST-RCD.\n008000     05  GDG-LIST-DATA.\n008100         10  TITLE-FLD                PIC X(08).\n008200             88  ENTRY-BRK                  VALUE '0GDG BAS'\n008300                                                  '0NONVSAM'.\n008400             88  GDG-BASE-HDR               VALUE '0GDG BAS'.\n008500             88  NONVSAM-HDR                VALUE '0NONVSAM'.\n008510             88  LST-CC-CHAR-ONLY           VALUE '0       '.\n008520             88  LST-PG-HDR                 VALUE '1IDCAMS '.\n008600         10  GDG-LIST-FILLER          PIC X(113).\n008700\n008800\n008900     EJECT\n009000******************************************************************\n009100*** REPORT FILE                          OUTPUT/REPORT          **\n009200******************************************************************\n009300 FD  GDG-REPORT\n009400     LABEL RECORDS ARE STANDARD\n009500     BLOCK CONTAINS 0 RECORDS.\n009600 01  GDG-RPT-RCD.\n009700     05  G-R-CC                       PIC X(01).\n009800     05  G-R-FILLER                   PIC X(132).\n009900     EJECT\n010000******************************************************************\n010100*** W O R K I N G                                 S T O R A G E **\n010200***                       PSUTGDG                               **\n010300******************************************************************\n010400 WORKING-STORAGE SECTION.\n010405 77  PAN-VALET PICTURE X(24) VALUE '002CBT1898   11/01/89'.\n010500 01  FILLER              PIC X(45) VALUE\n010600       '**** PSUTGDG WORKING STORAGE STARTS HERE ****'.\n010700\n010800\n010900 01  LIST-RCD-AREA.\n011000     05  LST-RCD-CHRCTR          OCCURS 80 TIMES\n011100                                 INDEXED BY LC1 LC2.\n011200         10  LST-CHAR                 PIC X(01).\n011300             88  SPACE-CHAR                  VALUE SPACE.\n011400             88  HYPHEN-CHAR                 VALUE '-'.\n011500             88  ALPH-NMRIC       VALUE '0' THRU '9'\n011600                                        'A' THRU 'Z'\n011601                                         '.'.\n011602\n011603 01  LIST-FLD-AREA.\n011700     05  LST-FLD-DATA                 PIC X(80).\n012000             88  GDG-HDR-FLD              VALUE '0GDG'.\n012100             88  NONVSAM-HDR-FLD          VALUE '0NONVSAM '.\n012200             88  GDG-FLD                  VALUE 'GDG'.\n012400             88  LIMIT-FLD                VALUE 'LIMIT'.\n012800             88  ASSOCIATIONS-FLD         VALUE 'ASSOCIATIONS'.\n013200             88  NUL-FLD                  VALUE '(NULL)'.\n013600             88  VOLSER-FLD               VALUE 'VOLSER'.\n014000             88  NONVSAM-FLD              VALUE 'NONVSAM'.\n014100             88  SPACE-FLD                VALUE '0'.\n014200     05  LST-FLD-CHRCTR  REDEFINES LST-FLD-DATA\n014300                                 OCCURS 80  TIMES\n014400                                 INDEXED BY FC1 FC2.\n014500         10  LST-FLD-CHAR             PIC X(01).\n014600\n014610 01  WORK-TEXT-AREA.\n014620     05  WS-HOLD-GDG-DSN-GRP.\n014630         10  WS-HOLD-GDG-DSN-FLD\n014651                              JUSTIFIED RIGHT\n014660                                      PIC X(40).\n014670     05  WS-TEST-GDG-DSN-GRP.\n014680         10  WS-TEST-DSN-FLD          PIC X(40).\n014690         10  WS-TEST-DSN-GNVOL        PIC X(09).\n014691     05  WS-RDF-TEST-GDG-DSN  REDEFINES WS-TEST-GDG-DSN-GRP\n014692                              JUSTIFIED RIGHT\n014693                                      PIC X(49).\n014700\n014800\n014900 01  FILLER              PIC X(45) VALUE\n015000       '**  PUSTGDG  OUTPUT WORK RECORDS START HERE *'.\n015100\n015200 01  PR-LINE-HDR1.\n015300     05  PR-CC-HDR1                  PIC X(01) VALUE '1'.\n015400     05  PR-HDR-FILL1                PIC X(60) VALUE\n015500         '         GENERATION DATA GROUPS   '.\n015510     05  PR-HDR-FILL2                PIC X(07) VALUE ' DATE:'.\n015600     05  PR-HDR1-RN-DATE             PIC X(10).\n015601     05  PR-HDR-FILL3                PIC X(07) VALUE ' TIME:'.\n015602     05  PR-HDR1-RN-TIME             PIC X(10).\n015603     05  PR-HDR1-FILL4               PIC X(05) VALUE 'PAGE '.\n015604     05  PR-HDR1-PAGE-NO             PIC ZZZZZZ9.\n015605\n015700 01  PR-LINE-HDR2.\n015800     05  PR-CC-HDR2                  PIC X(01) VALUE SPACE.\n015900     05  PR-HDR2-FILL1               PIC X(40) VALUE\n016000        '  GDG BASE DSN '.\n016100     05  PR-HDR2-FILL2               PIC X(07) VALUE\n016200       'LIMIT'.\n016300     05  PR-HDR2-FILL3               PIC X(10) VALUE\n016400       ' VOLSER'.\n016500     05  PR-HDR2-FILL4               PIC X(40) VALUE\n016600       '    ASSOCIATIONS (NONVSAM) '.\n016700 01  PR-LINE-HDR3.\n016800     05  PR-CC-HDR3                  PIC X(01) VALUE SPACE.\n016900     05  PR-HDR3-FILL1               PIC X(80) VALUE SPACE.\n017000 01  PR-LINE-DTL.\n017100     05  PR-CC1                      PIC X(01) VALUE SPACE.\n017200     05  FILLER                      PIC X(01) VALUE SPACE.\n017300     05  PR-GDG-DSN                  PIC X(40).\n017400     05  PR-LIMIT                    PIC X(07).\n017500     05  PR-VOLSER                   PIC X(10).\n017600     05  PR-ASSOC-FILES              PIC X(70).\n017700\n017800*\n017900     EJECT\n018000******************************************************************\n018100*** SAVE/COMPARE AREAS                                          **\n018200******************************************************************\n018300 01  FILLER              PIC X(45) VALUE\n018400       '** PSUTGDG   SAVE/COMPARE AREAS START HERE **'.\n018500 01  SAVE-FIELDS.\n018600     03  HIGHEST-SEVERITY         PIC 9      VALUE 0.\n018700     03  PREV-KEY                 PIC X(40)  VALUE SPACES.\n018800     EJECT\n018900******************************************************************\n019000*** WORK/DISPLAY/CONSTANT FIELDS                                **\n019100******************************************************************\n019200 01  FILLER              PIC X(45) VALUE\n019300       '** PSUTGDG   WORK FIELDS ****** START HERE **'.\n019400*\n019500 01  WORK-FIELDS.\n019600     03  WORK-TIME.\n019700         05  WORK-HOURS      PIC 99.\n019800         05  WORK-MINUTES    PIC 99.\n019900         05  WORK-SECS       PIC 99.\n020000*\n020100     03  DISPLAY-TIME.\n020200         05  DISP-HOURS      PIC 99.\n020300         05  FILLER          PIC X VALUE ':'.\n020400         05  DISP-MINUTES    PIC 99.\n020500         05  FILLER          PIC X VALUE ':'.\n020600         05  DISP-SECS       PIC 99.\n020700*\n020800     03  DISP-CURRENT-DATE   PIC X(08)   VALUE SPACES.\n020900*\n021000     03  WK-UNPACK-DATE      PIC 9(07)   VALUE ZERO.\n021100     03  WK-UNPACK-DATE-R    REDEFINES  WK-UNPACK-DATE.\n021200         05  FILLER          PIC 9.\n021300         05  WK-UNPACK-MM    PIC 99.\n021400         05  WK-UNPACK-DD    PIC 99.\n021500         05  WK-UNPACK-YY    PIC 99.\n021600*\n021700     03  WK-DATE-0YYMMDD     PIC 9(07)       VALUE 0.\n021800     03  WK-DATE-0YYMMDD-R  REDEFINES  WK-DATE-0YYMMDD.\n021900       04  FILLER            PIC 9.\n022000       04  WK-DATE-YYMMDD.\n022100         05  WK-YYMMDD-YY    PIC 99.\n022200         05  WK-YYMMDD-MM    PIC 99.\n022300         05  WK-YYMMDD-DD    PIC 99.\n022400*\n022500     03  WK-DATE-MMDDYY.\n022600         05  WK-MMDDYY-MM    PIC 99          VALUE 0.\n022700         05  WK-MMDDYY-DD    PIC 99          VALUE 0.\n022800         05  WK-MMDDYY-YY    PIC 99          VALUE 0.\n022900*\n023000     03  WK-FORMAT-DATE.\n023100         05  WK-FORMAT-MM    PIC 99          VALUE ZERO.\n023200         05  FILLER          PIC X VALUE '-'.\n023300         05  WK-FORMAT-DD    PIC 99          VALUE ZERO.\n023400         05  FILLER          PIC X VALUE '-'.\n023500         05  WK-FORMAT-YY    PIC 99          VALUE ZERO.\n023600*\n023700     03  DISPLAY-AMT-EDIT    PIC Z,ZZZ,ZZ9-  VALUE ZERO.\n023800     03  DISPLAY-AMT-NUM     PIC S9(07)    VALUE +0.\n023900     03  DISPLAY-WHEN-COMPILED.\n024000         05  DISPLAY-COMPILED-TIME    PIC X(08) VALUE SPACES.\n024001         05  DISPLAY-COMPILED-DATE    PIC X(12) VALUE SPACES.\n024002     EJECT\n024003******************************************************************\n024100*** SUBSCRIPTS & SWITCHES                                       **\n024200******************************************************************\n024300 01  FILLER              PIC X(45) VALUE\n024400       '** PSUTGDG   SUBSCRIPTS/SWITCHES START HERE *'.\n024500 01  SWITCHES.\n024600     03  READ-SW                     PIC X VALUE LOW-VALUE.\n024700         88  FIRST-READ                  VALUE LOW-VALUE.\n024800         88  NORMAL-READ                 VALUE SPACE.\n024900         88  GDG-EOF                     VALUE HIGH-VALUE.\n025000     03  EDIT-DATA-SW                PIC X VALUE SPACE.\n025100         88  DATA-OK                     VALUE 'Y'.\n025110         88  PRINT-LINE                  VALUE 'P'.\n025200         88  BY-PASS-GROUP               VALUE 'B'.\n025300\n025400 01  SUBSCRIPTS        COMP SYNC.\n025500     03  PAGE-SUB            PIC S9(03)   VALUE +0.\n025600     03  LINE-SUB            PIC S9(03)   VALUE +0.\n025700     03  MSG-SUB             PIC S9(03)   VALUE +0.\n025800     EJECT\n025900******************************************************************\n026000*** COUNTERS                                                    **\n026100******************************************************************\n026200 01  FILLER              PIC X(45) VALUE\n026300       '** PSUTGDG   COUNTERS START HERE ************'.\n026400\n026500 01  COUNTERS    COMP-3.\n026600     03  CTR-RECS-READ          PIC S9(7)   VALUE +0.\n026700     03  CTR-RECS-PROCESSED     PIC S9(7)   VALUE +0.\n026800     03  CTR-RECS-REJECTED      PIC S9(7)   VALUE +0.\n026900     03  CTR-PAGES-WRITTEN      PIC S9(7)   VALUE +0.\n027000     03  CTR-RECS-WRITTEN       PIC S9(7)   VALUE +0.\n027100     03  CTR-RECS-WRITTEN-PAGE  PIC S9(7)   VALUE +0.\n027200             88  PAGE-BREAK         VALUE +54 THRU +99999.\n027300     03  CTR-PGM-ERRORS         PIC S9(3)   VALUE +0.\n027400     EJECT\n027500******************************************************************\n027600*** MESSAGES                                                    **\n027700******************************************************************\n027800 01  FILLER              PIC X(45) VALUE\n027900       '** PSUTGDG   MESSAGES START HERE ************'.\n028000\n028100 01  MESSAGES.\n028200     03  MSG-PGM-START          PIC X(31)   VALUE\n028300         '*  PSUTGDG  START EXECUTION AT '.\n028301     03  MSG-PGM-COMPILED       PIC X(31)   VALUE\n028302         '*  PSUTGDG  LAST COMPILED   -  '.\n028400     03  MSG-CONTROL-TOTALS     PIC X(60)   VALUE\n028500         '* * * * * PSUTGDG  CONTROL TOTALS * * * * * * * * * * *\n028600-        '* *'.\n028700     03  MSG-ASTERISKS          PIC X(60)   VALUE ALL '*'.\n028800     03  MSG-RECS-READ          PIC X(40)   VALUE\n028900         '* TOTAL      RECORDS READ             = '.\n029000     03  MSG-RECS-PROCESSED     PIC X(40)   VALUE\n029100         '*      GDG RECORDS PROCESSED          = '.\n029200     03  MSG-RECS-REJECTED      PIC X(40)   VALUE\n029300         '*       DATA SETS REJECTED            = '.\n029400     03  MSG-PAGES-WRITTEN      PIC X(40)   VALUE\n029500         '* TOTAL           PAGES WRITTEN       = '.\n029600     03  MSG-RECS-WRITTEN       PIC X(40)   VALUE\n029700         '* TOTAL GDG ENTRY LIMITS WRITTEN      = '.\n029800     03  MSG-PGM-ERRORS         PIC X(40)   VALUE\n029900         '* TOTAL PROGRAM ERRORS ENCOUNTERED    = '.\n030000     03  MSG-HIGHEST-SEVERITY   PIC X(40)   VALUE\n030100         '*       HIGHEST SEVERITY WAS          = '.\n030200     03  MSG-PGM-END            PIC X(31)   VALUE\n030300         '* PSUTGDG     END EXECUTION AT '.\n030400     03  MSG-BILL-FILE-EMPTY    PIC X(52)   VALUE\n030500         '* INPUT FILE IS EMPTY - NO PROCESSING PERFORMED'.\n030600     EJECT\n030700******************************************************************\n030800*** INTERNAL TABLES                                             **\n030900******************************************************************\n031000 01  FILLER              PIC X(45) VALUE\n031100       '** PSUTGDG   INTERNAL TABLES START HERE *****'.\n031200\n031300     EJECT\n031400******************************************************************\n031500*** P R O C E D U R E                           D I V I S I O N **\n031600***                          PSUTGDG                            **\n031700******************************************************************\n031800 PROCEDURE DIVISION.\n031900*\n032000******************************************************************\n032100 00000-MAIN-LINE.\n032200******************************************************************\n032300\n032400***\n032500***  READY TRACE.\n032600***\n032700     PERFORM  A0000-INIT.\n032800     PERFORM  B0000-PROCESS-FILE\n032900              UNTIL    GDG-EOF.\n033000     PERFORM  C0000-EOJ.\n033100     STOP RUN.\n033200\n033300\n033400\n033500\n033600******************************************************************\n033700     EJECT\n033800******************************************************************\n033900 A0000-INIT.\n034000******************************************************************\n034100* 1) DISPLAYS PROGRAM START INFORMATION\n034200* 2) OPENS FILES\n034300* 3) DOES FIRST READ OF INPUT FILE\n034400*\n034500*\n034600     DISPLAY SPACES.\n034700     DISPLAY  MSG-ASTERISKS.\n034800     MOVE  TIME-OF-DAY     TO  WORK-TIME.\n034900     MOVE  WORK-HOURS      TO  DISP-HOURS.\n035000     MOVE  WORK-MINUTES    TO  DISP-MINUTES.\n035100     MOVE  WORK-SECS       TO  DISP-SECS.\n035200     MOVE  CURRENT-DATE    TO  DISP-CURRENT-DATE\n035300                               PR-HDR1-RN-DATE.\n035400     MOVE  DISPLAY-TIME    TO  PR-HDR1-RN-TIME.\n035401     MOVE  WHEN-COMPILED   TO DISPLAY-WHEN-COMPILED.\n035402     DISPLAY  MSG-PGM-START\n035403              DISPLAY-TIME  ' ON '\n035500              DISP-CURRENT-DATE.\n035600     DISPLAY  MSG-PGM-COMPILED\n035700              DISPLAY-COMPILED-DATE\n035800              '  '\n035801              DISPLAY-COMPILED-TIME.\n035802     OPEN INPUT   GDG-LIST\n035803          OUTPUT  GDG-REPORT.\n035804     PERFORM  IO3000-WRITE-HEADER.\n035900\n036000\n036100     EJECT\n036200 B0000-PROCESS-FILE.\n036300******************************************************************\n036400* 1) PROCESSES INPUT FILE RECORDS\n036500* 2) EDITS ALL DATA FIELDS\n036600******************************************************************\n036700     PERFORM IO1000-READ-GDG-LIST.\n036800     IF  GDG-EOF\n036900             NEXT SENTENCE\n037000     ELSE IF  GDG-BASE-HDR\n037100             PERFORM  B0200-CHECK-GDG-HDR\n037200     ELSE IF BY-PASS-GROUP\n037300             NEXT SENTENCE\n037400     ELSE IF LST-PG-HDR\n037500             NEXT SENTENCE\n037600     ELSE IF GDG-LIST-FILLER  EQUAL SPACES\n037601             NEXT SENTENCE\n037602     ELSE\n037603             PERFORM  B1000-EDIT-FIELDS.\n037604\n037700     EJECT\n037800 B0200-CHECK-GDG-HDR.\n037900******************************************************************\n038000*           TEST FOR GDG HEADER RECORD                           *\n038100*         IF GDG RECORD SET UP NEW GROUP.                        *\n038200******************************************************************\n038300\n038400     MOVE  SPACES TO  LIST-FLD-AREA\n038500                      PR-LINE-DTL\n038600                      EDIT-DATA-SW\n038601                      WS-HOLD-GDG-DSN-FLD\n038610                      LIST-RCD-AREA.\n038611     MOVE GDG-LIST-DATA TO LIST-RCD-AREA.\n038620     PERFORM B2000-MOVE-DSN-FLD.\n039100\n039200     EJECT\n039300 B1000-EDIT-FIELDS.\n039400******************************************************************\n039500* 1) EDITS ALL FIELDS                                            *\n039600* 2)                                                             *\n039700******************************************************************\n039800\n039900     SET FC1  TO 1.\n040000     MOVE SPACES TO LST-FLD-DATA\n040100     MOVE GDG-LIST-DATA  TO  LIST-RCD-AREA.\n040110     IF  LST-CC-CHAR-ONLY\n040120             MOVE SPACE TO LST-CHAR (1).\n040200     PERFORM B3100-POSITION-CHAR\n040300                VARYING LC1 FROM 1 BY 1\n040400                UNTIL LC1 > 80\n040500                   OR (LST-CHAR (LC1) NOT = SPACE\n040600                       AND LST-CHAR (LC1) NOT =  '-').\n040700     PERFORM  B3200-MOVE-CHAR\n040800                 VARYING  LC1 FROM LC1 BY 1\n040900                 UNTIL LC1 > 80\n041000                    OR LST-CHAR (LC1) = SPACE\n041100                    OR LST-CHAR (LC1) =   '-'.\n041500     IF  LIMIT-FLD\n041600             MOVE SPACES TO LIST-FLD-AREA\n041700             PERFORM B2200-MOVE-LIMIT-FLD\n041701     ELSE IF ASSOCIATIONS-FLD\n041702             MOVE SPACES TO LIST-FLD-AREA\n041703             PERFORM B2400-CHK-NULL\n041710     ELSE IF NONVSAM-HDR-FLD\n041720             MOVE SPACES TO LIST-FLD-AREA\n041730             PERFORM B2600-MOVE-ASSOC-FLD\n041800     ELSE IF VOLSER-FLD\n041900             MOVE SPACES TO LIST-FLD-AREA\n042000             PERFORM B2300-MOVE-VOLSER-FLD\n042700     ELSE\n042800             NEXT SENTENCE.\n042900     MOVE  SPACES TO LIST-FLD-AREA.\n043000\n043100     EJECT\n043200 B2000-MOVE-DSN-FLD.\n043300******************************************************************\n043400*           MOVES THE DSN ON GDG LINE TO THE PRINT LINE.\n043500*\n043600******************************************************************\n043700\n043800      PERFORM  B3100-POSITION-CHAR\n043900                   VARYING LC1  FROM 10  BY 1\n044000                   UNTIL LC1 > 80\n044100                      OR (NOT SPACE-CHAR (LC1)\n044200                          AND NOT HYPHEN-CHAR (LC1)).\n044210      SET  LC2  TO  LC1.\n044300      SET  FC1  TO  1.\n044400      PERFORM  B3200-MOVE-CHAR\n044500                   VARYING LC1  FROM LC1 BY 1\n044600                   UNTIL LC1 > 80\n044700                      OR FC1 > 80\n044800                      OR NOT ALPH-NMRIC (LC1).\n045000      MOVE  LST-FLD-DATA  TO  PR-GDG-DSN.\n045001      MOVE  SPACES  TO    LST-FLD-DATA.\n045003      SET  FC2  TO  80.\n045004      PERFORM  B3100-POSITION-CHAR\n045005                   VARYING LC1  FROM LC1 BY -1\n045006                   UNTIL LC1 < LC2\n045007                      OR ALPH-NMRIC (LC1).\n045008      PERFORM  B3300-MOVE-CHAR-RIGHT\n045009                   VARYING LC1  FROM LC1 BY -1\n045010                   UNTIL LC1 < LC2\n045011                      OR FC2 < 1\n045012                      OR LST-CHAR (LC1) = SPACE\n045013                      OR LST-CHAR (LC1) = '-'.\n045014      MOVE  LST-FLD-DATA  TO  WS-HOLD-GDG-DSN-FLD.\n045100      MOVE   '0'  TO PR-CC1.\n045200\n045300\n045400     EJECT\n045500 B2200-MOVE-LIMIT-FLD.\n045600******************************************************************\n045700*           MOVE THE GDG LIMIT TO THE PRINT LINE.                *\n045800******************************************************************\n045900\n046000      PERFORM  B3100-POSITION-CHAR\n046100                   VARYING LC1  FROM LC1 BY 1\n046200                   UNTIL LC1 > 80\n046300                     OR (LST-CHAR (LC1) NOT = SPACES\n046400                        AND LST-CHAR (LC1) NOT = '-').\n046500      SET  FC1  TO 1.\n046600      PERFORM  B3200-MOVE-CHAR\n046700                   VARYING LC1  FROM LC1 BY 1\n046800                   UNTIL LC1 > 80\n046900                      OR FC1 > 80\n047000                      OR LST-CHAR (LC1) = SPACE\n047100                      OR LST-CHAR (LC1) = '-'.\n047200      MOVE  LST-FLD-DATA  TO  PR-LIMIT.\n047210      PERFORM IO2000-WRITE-A-RPT-LINE.\n047220      MOVE SPACES TO PR-LINE-DTL.\n047300\n047400     EJECT\n047500 B2300-MOVE-VOLSER-FLD.\n047600******************************************************************\n047700*           MOVE THE VOLSER    TO THE PRINT LINE.                *\n047800******************************************************************\n047900\n048000      PERFORM  B3100-POSITION-CHAR\n048100                   VARYING LC1  FROM LC1 BY 1\n048200                   UNTIL LC1 > 80\n048300                     OR (LST-CHAR (LC1) NOT = SPACES\n048400                        AND LST-CHAR (LC1) NOT = '-').\n048500      SET  FC1  TO 1.\n048600      PERFORM  B3200-MOVE-CHAR\n048700                   VARYING LC1  FROM LC1 BY 1\n048800                   UNTIL LC1 > 80\n048900                      OR FC1 > 80\n049000                      OR LST-CHAR (LC1) = SPACE\n049100                      OR LST-CHAR (LC1) = '-'.\n049200      MOVE  LST-FLD-DATA  TO  PR-VOLSER.\n049210      IF  PRINT-LINE\n049220             PERFORM  IO2000-WRITE-A-RPT-LINE\n049230             MOVE SPACES TO PR-LINE-DTL.\n049300\n049400     EJECT\n049500 B2400-CHK-NULL.\n049600******************************************************************\n049700*           IF (NULL) ON ASSOCIATION BY PASS THE GROUP.          *\n049800******************************************************************\n049900\n050000      PERFORM  B3100-POSITION-CHAR\n050100                   VARYING LC1  FROM LC1 BY 1\n050200                   UNTIL LC1 > 80\n050300                      OR (LST-CHAR (LC1)     NOT = SPACES\n050400                          AND LST-CHAR (LC1) NOT = '-').\n050500      SET  FC1 TO 1.\n050600      PERFORM  B3200-MOVE-CHAR\n050700                   VARYING LC1  FROM LC1 BY 1\n050800                   UNTIL LC1 > 80\n050900                      OR FC1 > 80\n051000                      OR LST-CHAR (LC1) = SPACE\n051100                      OR LST-CHAR (LC1) = '-'.\n051200      IF  NUL-FLD\n051300              MOVE  'B'  TO EDIT-DATA-SW.\n051400\n051500\n053800\n053900     EJECT\n053910 B2600-MOVE-ASSOC-FLD.\n053920******************************************************************\n053930*          TEST THE DSN AND NONVSAM DSN TO MATCH AND PRINT.\n053940*\n053950******************************************************************\n053960\n053970      PERFORM  B3100-POSITION-CHAR\n053980                   VARYING LC1  FROM LC1 BY 1\n053990                   UNTIL LC1 > 80\n053991                      OR (NOT SPACE-CHAR (LC1)\n053992                          AND NOT HYPHEN-CHAR (LC1)).\n053993      SET  LC2  TO LC1.\n053994      SET  FC1  TO  1.\n053995      PERFORM  B3200-MOVE-CHAR\n053996                   VARYING LC1  FROM LC1 BY 1\n053997                   UNTIL LC1 > 80\n053998                      OR FC1 > 80\n053999                      OR NOT ALPH-NMRIC (LC1).\n054000      MOVE  LST-FLD-DATA  TO  PR-ASSOC-FILES.\n054001      MOVE  SPACES  TO    LST-FLD-DATA.\n054003      SET  FC2  TO  80.\n054004      PERFORM  B3100-POSITION-CHAR\n054005                   VARYING LC1  FROM LC1 BY -1\n054006                   UNTIL LC1 < LC2\n054007                      OR ALPH-NMRIC (LC1).\n054008      PERFORM  B3300-MOVE-CHAR-RIGHT\n054009                   VARYING LC1  FROM LC1 BY -1\n054010                   UNTIL LC1 < LC2\n054020                      OR FC2 < 1\n054030                      OR SPACE-CHAR (LC1)\n054031                      OR HYPHEN-CHAR (LC1).\n054032      MOVE  LST-FLD-DATA  TO  WS-RDF-TEST-GDG-DSN.\n054033      IF  WS-HOLD-GDG-DSN-FLD  =  WS-TEST-DSN-FLD\n054034              MOVE  'P' TO  EDIT-DATA-SW\n054035      ELSE\n054036              MOVE  'B' TO  EDIT-DATA-SW.\n054037\n054038\n054039      EJECT\n054040 B3000-SET-FOR-MOVE.\n054100******************************************************************\n054200* 1)  SETS UP THE CHARACTER BY CHARACTER MOVE FROM THE GDG RECORD*\n054300*          TO THE REPORT AREA.                                   *\n054400******************************************************************\n054500\n054600     MOVE SPACES TO LIST-FLD-AREA.\n054700\n054800 B3100-POSITION-CHAR.\n054900******************************************************************\n055000* 1)  POSITIONS THE POINTER TO THE NEXT FIELD TO MOVE.           *\n055100*          TO THE TEST AREA.                                     *\n055200******************************************************************\n055300\n055400     IF  LC1 < 80\n055500               NEXT SENTENCE.\n055600\n055700\n055800 B3200-MOVE-CHAR.\n055900******************************************************************\n056000* 1)  MOVES THE CHARACTER TO THE RECEIVING FIELD.                *\n056100*                                                                *\n056200******************************************************************\n056300\n056400     MOVE LST-CHAR (LC1)  TO  LST-FLD-CHAR (FC1).\n056500     SET  FC1 UP BY 1.\n056600\n056700     EJECT\n056710 B3300-MOVE-CHAR-RIGHT.\n056720******************************************************************\n056730* 1)  MOVE THE CHARACTER TO THE RIGHT MOST POSITION              *\n056740*          OF WORK AREA                                          *\n056750******************************************************************\n056760\n056770     MOVE LST-CHAR (LC1)  TO  LST-FLD-CHAR (FC2).\n056780     SET  FC2 DOWN BY  1.\n056790\n056791     EJECT\n056900 C0000-EOJ.\n057000******************************************************************\n057100* 1) CLOSES FILES\n057200* 2) DISPLAYS CONTROL TOTALS\n057300*\n057400*\n057410******************************************************************\n057500     CLOSE   GDG-LIST\n057600             GDG-REPORT.\n057700\n057800     DISPLAY  SPACES.\n057900     DISPLAY  MSG-CONTROL-TOTALS.\n058000     MOVE     CTR-RECS-READ         TO  DISPLAY-AMT-NUM.\n058100     MOVE     DISPLAY-AMT-NUM       TO  DISPLAY-AMT-EDIT.\n058200     MOVE  CTR-RECS-PROCESSED       TO  DISPLAY-AMT-NUM.\n058300     DISPLAY  MSG-RECS-PROCESSED        DISPLAY-AMT-EDIT.\n058400     MOVE  CTR-RECS-REJECTED        TO  DISPLAY-AMT-NUM.\n058500     MOVE     DISPLAY-AMT-NUM       TO  DISPLAY-AMT-EDIT.\n058600     DISPLAY  MSG-RECS-REJECTED         DISPLAY-AMT-EDIT.\n058700     MOVE  CTR-PAGES-WRITTEN        TO  DISPLAY-AMT-NUM.\n058800     MOVE     DISPLAY-AMT-NUM       TO  DISPLAY-AMT-EDIT.\n058900     DISPLAY  MSG-PAGES-WRITTEN         DISPLAY-AMT-EDIT.\n059000     MOVE  CTR-RECS-WRITTEN         TO  DISPLAY-AMT-NUM.\n059100     MOVE     DISPLAY-AMT-NUM       TO  DISPLAY-AMT-EDIT.\n059200     DISPLAY  MSG-RECS-WRITTEN          DISPLAY-AMT-EDIT.\n059300     MOVE  CTR-PGM-ERRORS           TO  DISPLAY-AMT-NUM.\n059400     MOVE     DISPLAY-AMT-NUM       TO  DISPLAY-AMT-EDIT.\n059500     DISPLAY  MSG-PGM-ERRORS            DISPLAY-AMT-EDIT.\n059600     DISPLAY  MSG-HIGHEST-SEVERITY      HIGHEST-SEVERITY.\n059700     MOVE  TIME-OF-DAY     TO  WORK-TIME.\n059800     MOVE  WORK-HOURS      TO  DISP-HOURS.\n059900     MOVE  WORK-MINUTES    TO  DISP-MINUTES.\n060000     MOVE  WORK-SECS       TO  DISP-SECS.\n060100     MOVE  CURRENT-DATE    TO  DISP-CURRENT-DATE.\n060200     DISPLAY  MSG-PGM-END\n060300              DISPLAY-TIME  ' ON '\n060400              DISP-CURRENT-DATE.\n060500     DISPLAY  MSG-ASTERISKS.\n060600*\n060700 C0000-EXIT.\n060800     EXIT.\n060900     EJECT\n061000******************************************************************\n061100** INPUT/OUTPUT ROUTINES\n061200******************************************************************\n061300*\n061400*---------------------\n061500 IO1000-READ-GDG-LIST.\n061600*---------------------\n061700*\n061800*\n061900     READ  GDG-LIST     AT END\n062000         MOVE  HIGH-VALUE TO READ-SW.\n062100     IF  GDG-EOF\n062200             NEXT SENTENCE\n062300     ELSE\n062400             MOVE SPACE TO READ-SW\n062500             ADD  +1  TO  CTR-RECS-READ.\n062600\n062700     EJECT\n062800 IO2000-WRITE-A-RPT-LINE.\n062900******************************************************************\n063000*       READ AND CONTROL THE INPUT FILE.                         *\n063100******************************************************************\n063200     WRITE  GDG-RPT-RCD  FROM   PR-LINE-DTL\n063300                 AFTER POSITIONING  PR-CC1.\n063400     ADD  +1   TO  CTR-RECS-WRITTEN.\n063500     IF  PR-CC1 = '0'\n063600             ADD  +2  TO CTR-RECS-WRITTEN-PAGE\n063700     ELSE\n063800             ADD  +1   TO  CTR-RECS-WRITTEN-PAGE.\n063900     IF  PAGE-BREAK\n064000             PERFORM IO3000-WRITE-HEADER.\n064100\n064200\n064300\n064400 IO3000-WRITE-HEADER.\n064500******************************************************************\n064600*        WRITES NEW PAGE AND PAGE HEADERS.                       *\n064700******************************************************************\n064800\n064900     ADD  1  TO CTR-PAGES-WRITTEN.\n064910     MOVE  CTR-PAGES-WRITTEN TO PR-HDR1-PAGE-NO.\n065000     WRITE GDG-RPT-RCD\n065100            FROM PR-LINE-HDR1\n065200            AFTER POSITIONING PR-CC-HDR1.\n065300     WRITE GDG-RPT-RCD\n065400            FROM PR-LINE-HDR2\n065500            AFTER POSITIONING PR-CC-HDR2.\n065600     WRITE GDG-RPT-RCD\n065700            FROM PR-LINE-HDR3\n065800            AFTER POSITIONING PR-CC-HDR3.\n065900     MOVE  ZERO  TO CTR-RECS-WRITTEN-PAGE.\n066000\n066100\n066200******************************************************************\n066300** ERROR ROUTINES\n066400******************************************************************\n066500*\n066600*---------------------\n066700 X1000-DATA-ERROR.\n066800*---------------------\n066900*\n067000*\n067100*\n067200     DISPLAY  'X1000-DATA-ERROR'.\n067300*\n067400\n067500\n067600*************************************************************\n067700*** END OF SOURCE CODE FOR PROGRAM PSUTGDG                ***\n067800*************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YREGS": {"ttr": 1289, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         YREGS\n         GBLA  &REGS\n&REGS    SETA  1\n         SPACE 1\nR0       EQU   0                   REGISTER  0\nR1       EQU   1                   REGISTER  1\nR2       EQU   2                   REGISTER  2\nR3       EQU   3                   REGISTER  3\nR4       EQU   4                   REGISTER  4\nR5       EQU   5                   REGISTER  5\nR6       EQU   6                   REGISTER  6\nR7       EQU   7                   REGISTER  7\nR8       EQU   8                   REGISTER  8\nR9       EQU   9                   REGISTER  9\nR10      EQU   10                  REGISTER 10\nR11      EQU   11                  REGISTER 11\nR12      EQU   12                  REGISTER 12\nR13      EQU   13                  REGISTER 13\nR14      EQU   14                  REGISTER 14\nR15      EQU   15                  REGISTER 15\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT132/FILE132.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT132", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}