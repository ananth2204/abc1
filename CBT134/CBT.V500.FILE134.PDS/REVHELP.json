{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201213145122000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1058148, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6480, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "GREG.REVIEW.HELP", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"GREG.REVIEW.HELP": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6480, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3000, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200348", "DS1SCEXT": "b'\\x80\\x19P'", "DS1SCALO": "b'P\\x00\\x00E'", "DS1LSTAR": "b'\\x00\\x0e\\x08'", "DS1TRBAL": "b'!4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f80\\x00\\x04\\x98@`'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f80\\x00\\x04\\x98@`'", "b'X\\xf5\\x12\\x98\\x00\\x00\\x01\\xa9\\x00\\t\\x01\\xab\\x00\\r\\x00#'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"FSH": {"ttr": 22, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00P\\x00\\x86!\\x8f\\x01\\x18#\\x1f\\x174\\x03\\x98\\x01O\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1986-08-06T00:00:00", "modifydate": "2018-08-19T17:34:50", "lines": 920, "newlines": 335, "modlines": 0, "user": "GREG"}}, "FSHELP": {"ttr": 22, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00P\\x00\\x86!\\x8f\\x01\\x18#\\x1f\\x174\\x03\\x98\\x01O\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1986-08-06T00:00:00", "modifydate": "2018-08-19T17:34:50", "lines": 920, "newlines": 335, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'FSHELP' RELEASE 48.3     AUGUST 2018\n)F Function -\n  The FSHELP command displays a HELP member on a 3270 terminal\n  in full screen mode.\n\n  In the field labelled MEMBER==> _______, FSHELP displays the current\n  HELP member; if the cursor is positioned to this field and a command\n  name is entered, FSHELP will display that new member's HELP data.\n\n  In the field labelled SUBCOMMAND==> _______, FSHELP displays the\n  current subcommand of the HELP command; if the cursor is positioned\n  to this field and a name is entered, FSHELP will display the member's\n  HELP data for the entered subcommand.\n\n  The field labelled INPUT===> _______ is the primary input field for\n  FSHELP; any supported subcommand may be entered.\n\n  In the field labelled SCROLL ===> __, FSHELP displays the default\n  forward and backward scroll amount; if the cursor is positioned to\n  this field and an amount is entered, that quantity will become the\n  new default scroll amount.\n\n)X Syntax -\n        FSHELP 'command' FUNCTION SYNTAX  POSITIONAL(nn)  ALL\n                        OPERANDS('keyword-list')  MSGID('keyword-list')\n\n  Aliases  - FSH, HEL\n  Required - NONE.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             available commands with a short description of each will\n             be displayed.\n  NOTE     - 'keyword-list' is optional when OPERANDS is used.\n)O Operands -\n)P 'command' - Name of the TSO command to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Syntax data is to be displayed.\n))OPERANDS('keyword-list')\n           - Operand description is to be displayed.  If\n             'keyword-list' is present, positioning is to the first\n             operand in the list encountered.\n 'keyword-list'\n           - keywords separated by commas, blanks, or tabs.\n))ALL      - FUNCTION, SYNTAX, and OPERAND descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('keyword-list')\n           - A description of the message identified by MSGID is to be\n             displayed.\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n             PFK1  - HEL     PFK2  - START      PFK3  - END\n             PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n             PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n             PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n             PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n             PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n             PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n             PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n   HELP    - Request HELP about FSHELP and/or its subcommands.\n   HEL     - Same as 'HELP'.\n   FSHELP  - Same as 'HELP'.\n   FSH     - Same as 'HELP'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Same as 'KEYS'.\n   UP      - Scroll backwards a specified number of records.\n             If no operand is specified, the 'scroll' value is\n             used.  This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of records.\n             If no operand is specified, the 'scroll' value is\n             used.  This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   TOP     - Scroll up to the first record (on this volume).\n   BOTTOM  - Scroll down to the last record.\n   BOT     - Same as 'BOTTOM'.\n   LIST    - Display the specified record number.\n             (Relative record number only, not sequence numbers.)\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   HEX ON  - Display each data byte as 2 hexadecimal digits.\n   HEX OFF - Display each data byte as a single character.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   HEXC ON - Alter the HEX ON display to show keyboard characters.\n   HEXC OFF- Leave the HEX ON display to show all data in hexadecimal.\n   HEXC    - If HEXC currently on, turn it off.  If off, turn it on.\n   HEXR ON - Show the data twice, first as characters, then in hex.\n   HEXR OFF- Do not show the data as characters and hex simultaneously.\n   HEXR    - If HEXR currently on, turn it off.  If off, turn it on.\n   HEXX ON - Show each data byte as a character and as hexadecimal.\n   HEXX OFF- Do not show the data as characters and hex simultaneously.\n   HEXX    - If HEXX currently on, turn it off.  If off, turn it on.\n   FIND    - Search until the specified data or pattern is found.\n   F       - Same as 'FIND'.\n   FINDNOT - Search until the specified data or pattern is not found.\n   FN      - Same as 'FINDNOT'.\n   RFIND   - Repeat the previous FIND or FINDNOT operation.\n   IFIND   - Same as 'RFIND'.\n   RESET   - Deactivate line exclusion caused by the ALL or REST\n             operand of a FIND or FINDNOT subcommand.\n   RES     - Same as 'RESET'.\n   FULL ON - Use full EBCDIC translation for display without using any\n             APL characters.\n   FULL OFF- Use the standard 3270 keyboard character set for display.\n   FULL    - If FULL is on, turn it off.  If off, turn it on.\n   DISP T  - Display TN/T11-like EBCDIC text characters where possible.\n             This is similar to 3278T in ISPF.\n   DISP A  - Display APL/EBCDIC characters where possible.\n             This is similar to 3278A in ISPF.\n   DISP    - Toggle between DISP T and DISP A.\n   DISPLAY - Same as 'DISP'.\n   DIR     - Display the member selection list of the HELP file.\n   COMMAND - Switch to the specified HELP MEMBER.\n   MEMBER  - Switch to the specified HELP MEMBER.\n   MEM     - Same as 'MEMBER'.\n   SUBCOM  - Switch to a different subcommand in the same HELP member.\n   SUB     - Same as 'SUBCOM'.\n   TSO     - Issue a TSO command.  CLISTs are not supported.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   COLOR # - Set the data display color to color number '#'.\n   COLOR ON- Turn on 7-color/extended highlighting mode.\n             This may give errors on some older model terminals.\n   COLOR OFF- Turn off 7-color/extended highlighting mode.\n   COLOR   - If COLOR is on, turn it off.  If off, turn it on.\n   COLOUR  - Same as 'COLOR'.\n   APPEND  - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Data is to be appended\n             to any existing data in the output file.\n   ADD     - Same as 'APPEND'.\n   TACKON  - Same as 'APPEND'.\n   COPY    - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Any data in the output\n             file will be overwritten and lost.\n   CUTOFF  - Same as 'COPY'.\n   CUT     - Same as 'COPY'.\n   CUTOVER - Same as 'COPY'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - END the command bypassing the directory member list.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT'.\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'HEL' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Alias    - FSHELP, FSH, HEL\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'FSHELP' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=COMMAND=MEMBER=COM=MEM\n)F Function -\n  The COMMAND subcommand switches to a different member in the HELP\n  file.  The member must exist for the switch to succeed.\n)X Syntax -\n     COMMAND 'membername'\n\n Aliases  - COM, MEMBER, MEM\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'membername' - Specifies the name of a new MEMBER to be displayed.\n=SUBCOM=SUB\n)F Function -\n  The SUBCOM subcommand switches to a different subcommand\n  description in the same member or command.\n)X SYNTAX -\n     SUBCOM 'subname'\n\n Alias    - SUB\n Defaults - Same subcommand.\n Required - None.\n)O OPERANDS -\n)P 'subname' - specifies the subcommand name for this member or command.\n=DIR\n)F Function -\n  The DIR subcommand causes the member list of the HELP file\n  to be displayed.\n)X Syntax -\n     DIR\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the screen to a text string.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexdecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n   7.  Searches for picture strings are not allowed in ASCII mode.\n   8.  If currently in ASCII mode a text or character string specifed\n       in the command will be translated to ASCII.\n   9.  The 'REST' and 'ALL' operands causes lines failing the match\n       criteria to be excluded from view.  No place marker lines for\n       this exclusion are shown.  This exclusion is cancelled by\n       other FIND/FINDNOT commands, and by 'UP' (including 'UP\n       MAX'), 'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by\n       'DOWN' or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by\n       formatting subcommands.\n\n)X Syntax -\n     FIND 'string'  'column-1'  'column-2'\n                     FIRST / NEXT / PREV / LAST / REST / ALL\n                     PREFIX / SUFFIX / WORD\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00bc - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as character (type C) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n=FINDNOT=FN\n)F Function -\n  The FINDNOT subcommand positions the screen to a text string\n  which does NOT match the search argument.\n\n  The notes listed under FIND also apply to FINDNOT.\n\n)X Syntax -                                                        rm\n   FINDNOT 'string'  'column-1'  'column-2'\n                      FIRST / NEXT / PREV / LAST / REST / ALL\n                      PREFIX / SUFFIX / WORD                       .\n                                                                   ns\n Alias    - FN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.      .\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will only show records with non-blanks.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND or FINDNOT\n  operation.  No operands are allowed.  It is expected that RFIND\n  will be used as the default meaning of a PFK such as PF5 or PF17.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand deactivates line exclusion caused by the\n  REST and ALL operands of any FIND or FINDNOT subcommand.  The\n  first file data line displayed on the screen (ie. the location\n  line number) remains unchanged.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand moves the screen left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand moves the screen right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the screen to the first line of the\n  data set or member.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the screen to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FULL\n)F Function -\n  The FULL subcommand specifies whether character data is displayed\n  using full EBCDIC translation or only standard 3270 keyboard\n  characters.  If turned on then only code-points that usually cause\n  screen errors are deemed to be undisplayable.  If turned off then\n  all characters not on a \"standard\" keyboard are deemed to be\n  undisplayable.  (In character mode, undisplayable bytes are\n  represented by a period ('.').)  Terminals with APL support may\n  have normally unprintable characters displayed from the APL\n  character set instead when in 'FULL OFF' mode, equivalent to one of\n  the 3278A or the 3278T terminal display modes of ISPF, depending\n  on the value set by the DISPLAY subcommand.\n)X Syntax -\n     FULL ON / OFF\n\n Aliases  - None.\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))ON       - Specifies that all code points X'40' to X'FE' and some\n             below X'40' are displayable characters.\n))OFF      - Specifies that only keyboard and possibly APL\n             characters are displayable.\n=DISPLAY=DISP\n)F Function -\n  The DISPLAY subcommand specifies whether character data shown\n  in FULL OFF mode is TEXT EBCDIC (as per TN and T11 print trains)\n  or not.  This subcommand can be used to improve the readability\n  of the data being REVIEWed.  The current setting is shown in the\n  message area of the top screen line after the KEYS subcommand is\n  issued.  The DISPLAY setting is saved in the user profile data set.\n)X Syntax -\n     DISPLAY A / T\n\n Alias    - DISP\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))A        - Specifies that data code points are to be displayed\n             from the standard character set if keyboard characters,\n             or possibly from the graphic (APL) character set if not\n             keyboard characters.  The graphic character set is not\n             available on some terminals.  This mode is similar to\n             the ISPF 3278A display mode.\n))T        - Specifies that the \"text\" character set (similar to the\n             TN and T11 print trains) is to be used for character\n             code point interpretation.  Characters from the primary\n             (standard) and alternate (graphic/APL) character sets\n             may be used as appropriate in order to assist in data\n             representation.  This mode is similar to the ISPF 3278T\n             display mode, and is helpful in reading syntax diagrams.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the FSHELP session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HEL     PFK2  - SPLIT      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F Function -\n  The HEX subcommand specifies the display mode (character or\n  hexadecimal) for data.  If HEX is entered without operands,\n  the current HEX mode is switched to the opposite HEX mode.\n\n  The normal HEX ON display shows each data byte as two\n  hexadecimal digits.  In this format, the maximum number of data\n  bytes shown on each line is half that of the HEX OFF display.\n\n  The formatting of the HEX ON display can be modified by\n  using the HEXC command.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that data should be displayed in HEX mode.\n))OFF      - Specifies that data should be displayed in character mode.\n=HEXC\n)F Function -\n  The HEXC subcommand can be used to modify the HEX ON display.\n  The HEXC setting only affects the display of the data when HEX ON\n  is active.\n\n  When HEXC is OFF, HEX ON shows the usual two hexadecimal digits\n  for each data byte.  This can lead to a crowded screen which is\n  difficult to read.\n\n  When HEXC is ON, the HEX ON display is modified to show bytes\n  which correspond to keyboard characters as a blank followed by the\n  character itself.  Further, nulls are shown as two underscores\n  instead of 00.  (An underscore is shown as a single underscore.)\n\n  HEXC can therefore provide improved readability of the data\n  and help the user find non-zero data while still providing a\n  unique rendering for each of the 256 possible code points.\n)X Syntax -\n     HEXC  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that HEX ON shows two hexadecimal digits for\n             each data byte except for keyboard characters and nulls.\n))OFF      - Specifies that HEX ON always shows two hexadecimal digits\n             for each data byte.\n=HEXR\n)F Function -\n  The HEXR subcommand can be used to display the data in an alternate\n  hexadecimal format.  The advantage of the HEXR display over the\n  normal HEX display is that the screen is less crowded and the\n  character data can be viewed simultaneously.\n\n  The maximum number of data bytes that can be shown by HEXR on each\n  line is one quarter of the screen width.  The left-most quarter of\n  each line shows the data in character mode.  The other three\n  quarters of the line show each byte as two hexadecimal digits with\n  a space between each pair of digits.\n\n  Further, to assist with locating non-zero and non-blank data, nulls\n  are shown as two periods instead of 00, and blanks are shown as two\n  underscores instead of 40.\n\n  Data matched by a FIND command will highlight both the character\n  and the hexadecimal parts of the display.  The cursor may be placed\n  in either part of the display to control cursor-specified scrolling.\n\n  The name of HEXR comes from \"HEX on the right\".\n)X Syntax -\n     HEXR  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXR display mode.\n))OFF      - Deactivates the HEXR display mode.\n=HEXX\n)F Function -\n  The HEXX subcommand provides and extended hexadecimal display\n  over the normal HEX display format.  The extension is that each\n  data byte is shown as it would be in character mode, followed\n  immediately by its hexadecimal code point value, followed by a\n  blank to make obvious the character-hexadecimal pairing.\n\n  As a result of this format, the maximum number of data bytes\n  which can be shown on a screen line is one quarter of the screen\n  width.\n)X Syntax -\n     HEXX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXX display mode.\n))OFF      - Deactivates the HEXX display mode.\n=COLOR=COLOUR\n)F Function -\n  The COLOR subcommand specifies whether or not data is to be\n  displayed using 3270 extended highlighting and extended color,\n  and which color is to be used for actual data display.  Colors\n  for character mode and hexadecimal mode may be independently\n  selected.  This command may cause errors on some terminals\n  depending on terminal type and network definitions.  If no\n  operands are entered then the color mode is switched to the\n  opposite mode.\n\n  The data display colors may be saved in the profile data set.\n)X Syntax -\n     COLOR  ON / OFF / #\n\n Alias    - COLOUR\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON      - Specifies that 3270 data stream extensions may be used.\n            This may be rejected if the terminal is known to not\n            support color or extended highlighting.\n))OFF     - Specifies that 3270 data stream extensions may not be used.\n))#       - Specifies the color to be used for actual data.\n            If specified while in character mode then this color is\n            used in character mode.  If specified while in hexadecimal\n            mode then this color is used in hexadecimal mode.\n            # must be a single hexadecimal digit and may be rejected\n            if it is known that the color is not supported by the\n            terminal.  The possible colors and their codes are:\n               1 - Blue                9 - Deep blue\n               2 - Red                 A - Orange\n               3 - Pink                B - Purple\n               4 - Green               C - Pale green\n               5 - Turquoise           D - Pale turquoise\n               6 - Yellow              E - Grey\n               7 - Neutral             F - White\n                  (Codes 0 and 8 (black) are not allowed.)\n                  (Codes 9 to F are only for 16-color terminals.)\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=SPLIT\n)F Function -\n  The SPLIT subcommand requests that a new parallel session is to be\n  initiated and given control.  The new session will be under the\n  RFE (REVIEW Front End) menu hierarchy.  The new session will NOT\n  be started if it would cause the maximum logical session limit to\n  be exceeded.  If no operand is supplied the RFE primary option\n  menu is shown.\n)X Syntax -\n     SPLIT  'option'\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be\n  invoked from the FSHELP processor. CLISTs are not supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the screen to the relative line\n  number entered.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - lineno\n)O Operands -\n)P 'lineno' -  Specifies the relative line number to which the screen\n               is to be positioned.\n=APPEND=ADD=TACKON\n)F Function -\n  The APPEND subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The APPEND subcommand\n  performs the same processing as the COPYOUT subcommand except that\n  the output file is opened for EXTEND, so that data is appended to\n  any data already residing in the output file.\n\n  ** Note that PDS members cannot be extended.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity.  Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     APPEND 'record-count'\n\n Aliases  - ADD, TACKON\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=COPYOUT=CUTOFF=CUT=CUTOVER\n)F Function -\n  The COPYOUT subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The COPYOUT subcommand\n  performs the same processing as the APPEND subcommand except that\n  the output file is opened for OUTPUT, so that data already residing\n  in the output file is overwritten and lost.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity. Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     COPYOUT 'record-count'\n\n Aliases  - CUTOFF, CUT, CUTOVER\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/FSHELP user profile to disk.\n  The REVIEW/FSHELP user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the FSHELP command, or, if in member\n  selection mode, returns to the member selection list.  The member\n  selection list may be bypassed with the EXIT command.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the FSHELP command, bypassing\n  the member selection list.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HEL": {"ttr": 22, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00P\\x00\\x86!\\x8f\\x01\\x18#\\x1f\\x174\\x03\\x98\\x01O\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1986-08-06T00:00:00", "modifydate": "2018-08-19T17:34:50", "lines": 920, "newlines": 335, "modlines": 0, "user": "GREG"}}, "REV": {"ttr": 513, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x002\\x00\\x84#\\x7f\\x01\\x18#\\x1f\\x175\\x08\\xb4\\x00L\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1984-08-24T00:00:00", "modifydate": "2018-08-19T17:35:32", "lines": 2228, "newlines": 76, "modlines": 0, "user": "GREG"}}, "REVED": {"ttr": 3073, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'1\\x07\\x00U\\x01\\x04\\x07?\\x01 \"/\"W\\x074\\x02\\xdf\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "49.07", "flags": 0, "createdate": "2004-03-13T00:00:00", "modifydate": "2020-08-09T22:57:55", "lines": 1844, "newlines": 735, "modlines": 0, "user": "GREG"}}, "REVEDIT": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'1\\x07\\x00U\\x01\\x04\\x07?\\x01 \"/\"W\\x074\\x02\\xdf\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "49.07", "flags": 0, "createdate": "2004-03-13T00:00:00", "modifydate": "2020-08-09T22:57:55", "lines": 1844, "newlines": 735, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVEDIT' RELEASE 49.7    AUGUST 2020\n)F Function -\n  REVEDIT is the fullscreen editor component of the REVIEW command.\n  REVEDIT is not a TSO command, but this HELP member will be accessed\n  when HELP is requested in a non-ISPF environment.\n\n  The TSO command to access the REVIEW Editor directly is REVED.\n\n  REVEDIT allows the editing of MVS data sets residing on direct\n  access storage devices (DASD) which may contain records which have\n  a fixed-length or variable-length format.  Currently only non-VSAM\n  is supported.\n\n  When the REVED alias of REVIEW is used to process a PDS, the default\n  action of the 'S' selection code is changed from Browse to Edit.\n\n  The data set being browsed by REVIEW can be edited with REVEDIT\n  by issuing an UPDATE or EDIT or VIEW primary command.  If REVIEW is\n  operating as an ISPF application, then the EDIT and VIEW commands\n  will invoke the corresponding ISPF function instead of REVEDIT.\n\n  Under MVS/ESA and later (including OS/390 and z/OS) data being\n  edited may be held in a data space which can grow with the data up\n  to two gigabytes (2GB) in size subject to installation limits\n  implemented either by design (eg. system exits) or circumstance (eg.\n  insufficient auxiliary storage to allow processing to continue).\n\n  On pre-ESA systems data being edited is held in the user region.\n\n  REVEDIT can also be invoked in VIEW mode indicated by blue (instead\n  of green) line numbers.  Changes made to the data in VIEW mode\n  cannot be saved back to the data set being viewed.  Data being\n  viewed - whether changed or not - can be exported using the CREATE\n  and/or REPLACE subcommands.\n\n  When a data set is being edited it is serialized to protect against\n  concurrent update.  This serialization is not performed for VIEW.\n)X Syntax -\n         REVED   'dsname'\n                    VOLUME('volume')\n                    UNIT('unit')\n                    QUICK\n                    GEN\n                    XISPMODE\n     or\n         REVED   'filename'  FILE  XISPMODE\n     or\n         REVED   'pathname'\n\n  Required - 'dsname'\n     or      'filename'  FILE\n     or      'pathname'  which must begin with a slash or tilde\n     or      no operands for \"point and shoot\".\n\n  Defaults - UNIT(SYSALLDA) when VOLUME is specified.\n)O Operands -\n)P 'dsname' or 'dsname(member)' - The data set to be examined.\n   'filename' - The DDNAME allocated to the data set to be examined.\n   'pathname' - The path name of an UNIX directory.\n\n   If the first operand begins with a slash ('/') or a tilde ('~')\n   then it is deemed to specify an UNIX directory path, and no other.\n   operands are allowed.  The tilde specifies the user's home\n   directory.  A specific UNIX file may be specified to directly\n   access the data contained in the file.\n\n   If the first operand does not begin with a slash or tilde then it\n   is assumed to be a DSNAME unless it is followed by the keyword\n   'FILE'.\n\n   Specifying the file name of PARMLIB when there is no PARMLIB DD\n   allocated on a OS/390 1.2 or later system requests that the\n   logical PARMLIB service be used to REVED the system PARMLIB\n   concatenation.\n\n   If no operands are supplied then REVED reads the screen image\n   and extracts the data set name from the part of the screen\n   containing the cursor.  This works in both fullscreen and line\n   modes, but not under Session Manager which updates the screen\n   before REVED receives control.  If a data set name is not found\n   then normal TSO prompting is commenced except for a recursive\n   REVIEW/REVED session where a message is displayed.\n\n   ISPF users may like to load\n       TSO REV) MODE(FSCR\n   into a PF key for easy access to \"point and shoot\", although\n       TSO REV\n   provides the same functionality since OS/390 2.10.  Similarly,\n       TSO REV\n   can be loaded into a RFE/REVIEW/REVED Program Function key.\n\n   A member name is NOT considered part of the data set name for\n   \"point and shoot\" purposes.\n\n   A UNIX path name cannot be processed by \"point and shoot\".\n\n))FILE     - This keyword indicates that the first operand is\n             a FILENAME, not a DSNAME.  This is useful for looking\n             at a temporary data set or at concatenated libraries.\n             A member name may be specified in the first operand\n             after the DDNAME if the DDNAME is allocated to a\n             PDS.  This allows you to enter 'REVED SYSPROC(X) F'\n             to edit member 'X' in whatever PDS is allocated to\n             DDNAME 'SYSPROC'.\n\n             The 'FILE' operand may be abbreviated to 'F'.\n\n))VOLUME('volume') - For uncataloged data sets, the volume serial.\n\n             'VOLUME' may be abbreviated to 'V'.\n\n))UNIT('unit') - For uncataloged data sets, the unit type.\n             This operand is ignored if 'VOLUME' is not specified.\n             If 'VOLUME' is specified the default unit is 'SYSALLDA'.\n             For data sets accessed via the catalog, the unit is\n             determined from the catalog entry.\n\n             'UNIT' may be abbreviated to 'U'.\n\n))QUICK    - This indicates that if an unquoted data set name was\n             specified then the name was fully qualified apart from\n             the prefix (ie. no trailing qualifier has to be added).\n             This saves a search of the catalog to look for trailing\n             qualifiers which is otherwise performed unconditionally\n             unless the 'VOLUME' operand was specified.  This operand\n             is ignored if 'VOLUME' is specified.\n\n             The 'QUICK' operand may be abbreviated to 'Q'.\n\n))GEN      - This operand - valid for z/OS systems only - specifies\n             that if the member list of a Version 2 PDSE data library\n             which may have generation members is to be shown, then\n             all extant member generations should also be shown in\n             the member list.  The 'REF N' and 'REF G' member list\n             commands can be used to dynamically switch the display\n             of member generations in the member list.  Currently,\n             the display of member generations for PDSE program\n             libraries is not supported.\n\n             The 'GEN' operand may be abbreviated to 'G'.\n\n))XISPMODE - This specifies that REVED\n             1) is not to act as an ISPF application and is therefore\n                to perform terminal I/O and subcommand processing\n                natively; and\n             2) is not to determine terminal capabilities from ISPF\n                variables but is to issue a Read Partition (Query)\n                itself if appropriate.\n\n             This operand will only affect processing in an ISPF\n             environment.\n\n             The 'XISPMODE' operand may be abbreviated to 'X'.\n\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'\n             under z/OS or 'REVPROF' under MVS/370.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or record.\n   BOTTOM  - Scroll down to the last line or record.\n   BOT     - Same as 'BOTTOM'.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ----------------------- REVEDIT SUBCOMMANDS -----------------------\n\n These subcommands are available while editing file data:\n\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   LIST    - Display the specified record number (relative record\n             numbers only, not sequence numbers) or labelled record.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   CAPS ON - Ensure all data entered is translated to upper case.\n   CAPS OFF- Ensure the case of entered data is not changed.\n   CAPS    - Toggle the CAPS setting.\n   NULL ON - Use nulls (x'00) to reprsent trailing blanks in the data.\n   NULL OFF- Use blanks to represent trailing blanks in the data.\n   NULL    - Toggle the NULL setting.\n   NULLS   - Same as 'NULL'.\n   COLS ON - Activate the column marker.\n   COLS OFF- Deactivate the column marker.\n   COLS    - Toggle the display of the column marker.\n   PROF ON - Activate the profile settings display line.\n   PROF OFF- Deactivate the profile settings display line.\n   PROF    - Toggle the display of the profile settings line.\n   COPY    - Import the contents of a data set into the edited data.\n   CREATE  - Create a new data set or member with edit session data.\n   CRE     - Same as 'CREATE'.\n   REPLACE - Replace a data set or member with edit session data.\n   REP     - Same as 'REPLACE'.\n   REPL    - Same as 'REPLACE'.\n   DELETE  - Delete either all excluded or all unexcluded records.\n   DEL     - Same as 'DELETE'.\n   HEX ON  - Display the data in hexadecimal and character formats.\n   HEX OFF - Display the data in character format.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   HI OFF  - Turns off syntax highlighting.\n   HI JCL  - Activates JCL source code syntax highlighting only.\n   HI AUTO - Activates syntax highlighting based on the type of\n             data detected by REVEDIT.\n   HI ASM  - Set HI AUTO in the profile and set the current source\n             type to Assembler.\n   HI CLIST- Set HI AUTO in the profile and set the current source\n             type to CLIST.\n   HI DATA - Set HI AUTO in the profile and set the current source\n             type to DATA which suppresses non-JCL highlighting.\n   HI PLI  - Set HI AUTO in the profile and set the current source\n             type to PL/I.\n   DSNCHECK- Control catalog look-up when HI JCL is set.\n   TABS    - Set software tabbing columns.\n   FIND    - Search until the specified data or pattern is found.\n   F       - Same as 'FIND'.\n   FINDNOT - Search until the specified data or pattern is not found.\n   FN      - Same as 'FINDNOT'.\n   RFIND   - Repeat the previous FIND or FINDNOT or EXCLUDE or EXNOT.\n   IFIND   - Same as 'RFIND'.\n   CHANGE  - Search for specified data and replace it.\n   RCHANGE - Repeat the previous CHANGE operation.\n   ICHANGE - Same as 'RCHANGE'.\n   EXCLUDE - Exclude lines from display.\n   X       - Same as 'EXCLUDE'.\n   FLIP    - Toggle the exclusion status of every data record.\n   BOUNDS  - Control the column range to which commands apply.\n   STATS   - Set whether member statistics are to be stored or not.\n   LEVEL   - Set the modification level of the member statistics.\n   VERSION - Set the version level of the member statistics.\n   NUMBER  - Set sequence numbering on or off.\n   UNNUM   - Clear sequence numbers from the data.\n   PROFILE - Display current profile settings.\n   PROF    - Same as 'PROFILE'.\n   REDO    - Undo an 'UNDO'.\n   RENUM   - Resequence the data records.\n   RESET   - Various pending actions and controls. exclusions.\n   RES     - Same as 'RESET'.\n   SORT    - Sort records into a different order based on data content.\n   SUBMIT  - Submit the data set or MEMBER being edited.\n             TSO SUBMIT is invoked.\n   SUB     - Same as 'SUBMIT'.\n   SB      - Same as 'SUBMIT' but with no line mode messages.\n   CUT     - Copy records from the edit data to the clipboard.\n   PASTE   - Copy some records from the clipboard into the edit data.\n   UNDO    - Undo a change to the data being edited or viewed.\n   UNDO ON - Enable UNDO.\n   UNDO OFF- Disable UNDO and release UNDO resources.\n   ZAP     - Control whether PDS members with fixed-length records\n             that have an unchanged record count at save time are\n             to be stored in the same location (using update-in-place)\n             to save disk space, or not.\n   SAVE    - Write the data being edited back to its source data set.\n   AUTOSAVE- Control the data save action of the END subcommand.\n --------------------- REVEDIT LINE COMMANDS ---------------------\n\n These actions codes are entered in the line number field in the\n left margin and specify locations for specific actions.\n\n          Table of valid line action codes.\n---------------------------------------------------------------------\nCode| Meaning |n|B|Bn|R| Description\n----| ------- |-|-|--|-| --------------------------------------------\n  ( | left    |C|Y|C |!| shift data in record(s) left\n  ) | right   |C|Y|C |!| shift data in record(s) right\n  A | After   |X| |  | | target of copy or move is after this line\n  B | Before  |X| |  | | target of copy or move is before this line\n  C | Copy    |L|Y|  | | line(s) to be copied\n  D | Delete  |L|Y|  | | line(s) to be deleted\n  F | First   |L| |  | | first lines of excluded block are unexcluded\n  I | Insert  |L| |  | | insert new line(s) after this line\n  L | Last    |L| |  | | last lines of excluded block are unexcluded\n  M | Move    |L|Y|  | | line(s) to be moved\n  O | Over    |L|Y|  |!| line(s) to be overlaid\n  R | Repeat  |X|Y|X | | line(s) to be repeated\n  S | Show    | | |  | | selected excluded block is unexcluded\n  U | Upper   |L|Y|  |!| line(s) to be translated to upper case\n  W | loWer   |L|Y|  |!| line(s) to be translated to lower case\n  X | eXclude |L|Y|  | | line(s) to be excluded\n TF |TextFlow |C| |  |!| reflow text\n TS |TextSplit|L| |  |!| split text to a new line and insert\n TE |TextEntry| | |  |!| use rest of screen as a single entry field\n---------------------------------------------------------------------\n   Legend: n - Function of multiplier number after action code.\n           B - Can the action code be doubled to denote the first\n               and last lines of a contiguous block of lines?\n          Bn - Function of multiplier number after action block code.\n           R - Does the BOUNDS setting control the target column range?\n           C - Multiplier specifies number of columns.\n           L - Multiplier specifies number of lines.\n           X - Multiplier specifies number of times.\n           Y - Yes, the code can be doubled for block start and end.\n           ! - Yes, only columns in the BOUNDS range are updated.\n ----------------------------------------------------------------------\n Additional notes for TE (Text Entry):\n (1) Input text is reflowed into the column range described by the\n     current BOUNDS setting of new lines when <enter> is pressed.\n (2) When the processing of TE data is pending, Program Function keys\n     will function as <enter> and the PF key meanings will be ignored.\n (3) When the processing of TE data is pending, an attention interrupt\n     will cause the TE request to be cancelled, and entered data will\n     be discarded.\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the display to a data string, and\n  the record containing the matched data will have any display\n  exclusion status reset.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or scope restrictions\n       may be supplied in any order after the search argument.\n)X Syntax -\n     FIND 'string'  'column-1'  'column-2'\n                    'label-1'  'label-2'\n                     FIRST / NEXT / PREV / LAST / ALL\n                     PREFIX / SUFFIX / WORD\n                     EX / NX\n                     UPDATED / NOUPDATE\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as text (type T) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))EX      - Only search records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only search records not excluded from display.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=FINDNOT=FN\n)F Function -\n  The FINDNOT subcommand positions the display to a data string which\n  does NOT match the search argument, and the record containing the\n  mismatch will have any display exclusion status reset.\n\n  The notes listed under FIND also apply to FINDNOT.\n)X Syntax -\n   FINDNOT 'string'  'column-1'  'column-2'\n                     'label-1'  'label-2'\n                      FIRST / NEXT / PREV / LAST / ALL\n                      PREFIX / SUFFIX / WORD\n                      EX / NX\n                      UPDATED / NOUPDATE\n\n Alias    - FN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column-1' - Optional, specifies first or only column to search.\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will count all non-blanks.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))EX      - Only search records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only search records not excluded from display.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=EXCLUDE=EX=X\n)F Function -\n  The EXCLUDE subcommand positions the display to a data string,\n  and the record containing the matched data will be excluded from\n  display.  Alternatively, EXCLUDE may be used to exclude all lines,\n  exclude all tines that have been updated in this session, or\n  exclude all tines that have not been updated in this session.\n\n  EXCLUDE notes:\n   1.  A search argument is required unless one of ALL, UPDATED\n       or NOUPDATE is the only operand specified.  A single\n       unquoted asterisk may be used to specify the same argument\n       as was last used.\n   2.  The first operand is always treated as the search argument\n       unless one of ALL, UPDATED or NOUPDATE is the only operand\n       specified.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n   7.  EXCLUDE will never search records which are excluded from\n       display.\n)X Syntax -\n     EXCLUDE 'string'  'column-1'  'column-2'\n                       'label-1'  'label-2'\n                        FIRST / NEXT / PREV / LAST / ALL\n                        PREFIX / SUFFIX / WORD\n                        UPDATED / NOUPDATE\n              or\n     EXCLUDE ALL / UPDATED / NOUPDATE\n\n Aliases  - EX, X\n Defaults - NEXT\n Required - 'string' unless ALL is the only operand.\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as character (type C) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n             If ALL is the only operand, then exclude all lines.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=EXNOT=EXN=XN\n)F Function -\n  The EXNOT subcommand positions the display to a data string which\n  does NOT match the search argument, and the record containing the\n  mismatch will be excluded from display.  Excluded lines will not\n  be searched.\n\n  The notes listed under EXCLUDE also apply to EXNOT.\n)X Syntax -\n   EXNOT 'string'  'column-1'  'column-2'\n                   'label-1'  'label-2'\n                    FIRST / NEXT / PREV / LAST / ALL\n                    PREFIX / SUFFIX / WORD\n                    UPDATED / NOUPDATE\n\n Aliases  - EXN, XN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column-1' - Optional, specifies first or only column to search.\n              eg. \"XN ' ' 70\"\n                   will exclude a non-blank in column 70.\n              eg. \"XN ' ' ALL\"\n                   will exclude all non-blanks.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND or FINDNOT or\n  EXCLUDE or EXNOT operation.  No operands are allowed.  It is\n  expected that RFIND will be used as the default meaning of a PFK\n  such as PF5 or PF17.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string, direction and range.\n Required - None.\n)O Operands - None.\n=CHANGE=CHG=C\n)F Function -\n  The CHANGE subcommand performs the alteration of selected data in\n  a specified way.  The display is also repositioned to show the\n  change.\n\n  CHANGE notes:\n   1.  A search argument or \"from string\" is required, as is a\n       data replacement specification or \"to string\".  For either\n       operand (or both operands) a single unquoted asterisk may be\n       used to specify the same argument as was last used\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  If the replacement specification is a picture string then\n       it must be the same length as the search argument.\n   5.  The only picture string mask characters that are recognised\n       in the \"to string\" are '=' (to leave the character unchanged),\n       '>' (to perform upper case translation), and '<' (to perform\n       lower case translation).  All other characters are processed\n       literally.\n   6.  Quotation marks are required whenever the string type needs\n       to be specified.\n   7.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   8.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n)X Syntax -\n     CHANGE 'string-1'  'string-2'\n                    'column-1'  'column-2'\n                    'label-1'  'label-2'\n                     FIRST / NEXT / PREV / LAST / ALL\n                     PREFIX / SUFFIX / WORD\n                     EX / NX\n                     UPDATED / NOUPDATE\n\n Aliases  - CHG, C\n Defaults - NEXT\n Required - 'string-1', 'string-2'\n)O Operands -\n)P 'string-1' - Specifies the data and data type to be replaced.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as text (type T) strings,\n              which requests a case insensitive search.\n\n)P 'string-2' - Specifies the replacement data.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for replacement exactly as typed.\n\n              T - Text for replacement casing according to the\n                  CAPS setting.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     = - character is to be left unchanged.\n                     > - character is to be translated to upper case.\n                     < - character is to be translated to lower case.\n                  Non-mask characters represent themselves.\n                  The picture string must have the same length\n                  as the search argument.  Picture string mask\n                  characters will be treated as actual replacement\n                  characters when ASCII ON is active.\n\n              Unquoted replacement strings will always cause the\n              replacement data to be in upper case.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))EX      - Only search records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only search records not excluded from display.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=RCHANGE=ICHANGE\n)F Function -\n  The RCHANGE subcommand repeats the previous CHANGE operation.\n  No operands are allowed.  It is expected that RCHANGE will be\n  used as the default meaning of a PFK such as PF6 or PF18.\n\n)X Syntax -\n     RCHANGE\n\n Alias    - ICHANGE\n Defaults - Same string specifications and direction and range.\n Required - None.\n)O Operands - None.\n=FLIP\n)F Function -\n  The FLIP subcommand causes to exclusion status of every line to be\n  toggled to the opposite setting.  All lines eligible for display\n  are excluded, and all excluded lines become eligible for display.\n\n)X Syntax -\n     FLIP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=DELETE=DEL\n)F Function -\n  The DELETE subcommand causes the deletion of all lines that are\n  either excluded or not excluded.\n\n)X Syntax -\n     DELETE    ALL     EX / NX\n\n Alias    - DEL\n Defaults - None.\n Required - ALL and one of EX and NX.\n)O Operands - None.\n))EX      - Only delete records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only delete records not excluded from display.\n))ALL     - A required operand to verify the scope of the deletion.\n=RESET=RES\n)F Function -\n  The RESET subcommand deactivates all line exclusions and clears\n  all pending line commands.  Indications of CHANGE ALL activity\n  (underscored line number) and CHANGE errors (line number shown in\n  reverse video) are also cleared.  The display of PROFILE details\n  is turned off.\n\n)X Syntax -\n     RESET COMMAND / CHANGE / ERROR / LABEL / EXCLUDED / SOURCE\n           '.label1' '.label2'\n\n Alias    - RES\n Defaults - COMMAND  CHANGE  ERROR  EXCLUDED\n Required - None.\n)O Operands -\n)P '.label1' - Specifies the first or last line of a block of lines\n               to be reset.\n)P '.label2' - Specifies the last or first line of a block of lines\n               to be reset.\n))COMMAND - specifies that pending line commands are to be cleared.\n            COM or CMD for short.\n))CHANGE  - specifies that CHANGE ALL line update indicators are\n            to be cleared.  CHA or CHG for short.\n))ERROR   - specifies that CHANGE ALL line error indicators are\n            to be cleared.  ERR for short.\n))EXCLUDED- specifies that lines will no longer be excluded.\n            X or any abbreviation of EXCLUDED down to EX for short.\n))LABEL   - specifies that line labels will be cleared.\n))SOURCE  - effectively the same as 'ASCII OFF'.\n=UP=-\n)F Function -\n  The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand moves the display left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand moves the display right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the display to the first line of the\n  data set or member.  It differs from 'UP MAX' when line exclusion\n  is active in that line exclusion is not cancelled.  In this case,\n  TOP can be used to view the results of a \"FIND ALL\" search from\n  the start without the need to reissue the \"FIND ALL\" command.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the display to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F Function -\n  The HEX subcommand specifies whether the hexadecimal byte\n  contents of the data is to be displayed or not.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that the data's hexadecimal should be shown.\n))OFF    - Specifies that the data's hexadecimal should not be shown.\n=NULLS=NULL=NUL\n)F Function -\n  The NULLS subcommand specifies whether trailing blanks on a screen\n  line showing a data record are to be written to the terminal as\n  blanks or (except for the first) as nulls to allow 3270 insert\n  mode to operate without prior character deletion.\n)X Syntax -\n     NULLS  ON / OFF / ?\n\n Aliases  - NULL, NUL\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that after the last non-blank character and\n         one blank of data shown on a screen line, subsequent blanks\n         to the end of the line will be rendered as nulls.\n))OFF    - Specifies that all blanks in the data will be represented\n         by blanks on the terminal display.\n))?      - Display the current setting without changing it.\n=CAPS\n)F Function -\n  The CAPS subcommand specifies whether input alphabetic data is\n  to automatically be translated to upper case or left unchanged.\n)X Syntax -\n     CAPS  ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that lower-case alphabetic data entered by the\n         user will be folded to upper case.\n))OFF    - Specifies that alphabetic data entered by the user will\n         not have its case altered.\n))?      - Display the current setting without changing it.\n=ASCII\n)F Function -\n  The ASCII subcommand specifies whether character data is displayed\n  using ASCII-to-EBCDIC translation or is to be treated as EBCDIC\n  characters.  If turned on then system-supplied translation is\n  carried out.  FIND strings entered while not in the current ASCII\n  setting cannot be used in RFIND operations.  FIND strings entered\n  while ASCII is turned on are translated to ASCII before the search\n  begins.\n)X Syntax -\n     ASCII ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that ASCII data is being REVIEWed and should\n           be translated to EBCDIC before being displayed.\n))OFF    - Specifies that the data is to be shown as-is in EBCDIC.\n))?      - Display the current setting without changing it.\n=COLUMNS=COLS=COL\n)F Function -\n  The COLUMNS subcommand can activate a column indicator line so\n  that the exact column number of specific data can be more easily\n  determined.\n\n  The amount of virtual storage used to hold data being edited is\n  also displayed in the left margin.  If this size is always shown\n  in megabytes (MB) then a data space is being used to hold the\n  data.  If this size is ever shown in kilobytes (KB) then the user\n  region is being used to hold the data.\n\n  The COLUMNS display is not visible when PROFILE ON is in effect.\n  The COLUMNS display is not affected by the RESET command.\n)X Syntax -\n     COLUMNS  ON / OFF\n\n Aliases  - COLS, COL\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that top data display line is used to show\n         a column number indicator line.\n))OFF    - Specifies that column number indicator line is not to\n         be shown.\n=STATS\n)F Function -\n  The STATS subcommand specifies whether REVEDIT should save PDS\n  and PDSE member statistics in the directory entry's userdata or not.\n)X Syntax -\n     STATS  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that REVEDIT is to save member statistics.\n))OFF    - Specifies that REVEDIT is not to save member statistics.\n=LEVEL=LEV\n)F Function -\n  The LEVEL subcommand allows a user to specify the modification\n  level number to be saved in a member's statistics.\n)X Syntax -\n     LEVEL  'levnum'\n\n Alias    - LEV\n Defaults - None.\n Required - 'levnum'\n)O Operands -\n)P 'levnum'  - specifies a decimal number in the 0 to 99 range.\n=VERSION=VERS=VER\n)F Function -\n  The VERSION subcommand allows a user to specify the modification\n  version number to be saved in a member's statistics.\n)X Syntax -\n     VERSION 'vernum'\n\n Aliases  - VERS, VER\n Defaults - None.\n Required - 'vernum'\n)O Operands -\n)P 'vernum'  - specifies a decimal number in the 1 to 99 range.\n=ZAP\n)F Function -\n  The ZAP subcommand permits the use of update-in-place to save\n  PDS member contents in some cases in order to save disk space.\n  Update-in-place is only used for non-PDSE PDS members with\n  fixed-length records when the number of records to be saved\n  equals the number of records currently on disk.\n)X Syntax -\n     ZAP  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that REVEDIT is allowed to use update-in-place.\n))OFF    - Specifies that REVEDIT is never to use update-in-place.\n=PROFILE=PROF\n)F Function -\n  The PROFILE subcommand causes the display of the current settings\n  of several editing options which affect how REVEDIT behaves.\n\n  The amount of virtual storage used to hold data being edited is\n  also displayed in the left margin.  If this size is always shown\n  in megabytes (MB) then a data space is being used to hold the\n  data.  If this size is ever shown in kilobytes (KB) then the user\n  region is being used to hold the data.\n\n  The PROFILE display overlays the COLUMNS display, so PROFILE OFF\n  must be in effect for the COLUMNS display to be visible.  The\n  PROFILE display is turned off by the RESET command.\n)X Syntax -\n     PROFILE  ON / OFF\n\n Alias    - PROF\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that current profile settings are to be shown.\n))OFF    - Specifies that current profile settings are not to be shown.\n=NUMBER=NUMB=NUM\n)F Function -\n  The NUMBER subcommand specifies whether the data is to have\n  record sequence numbers in the last eight (8) bytes of the data.\n  EBCDIC numeric characters are used.  Only fixed-length records\n  having a length of at least 40-bytes can have sequence numbers\n  maintained by REVEDIT.  For PDS or PDSE members with STATS ON, the\n  last two digits contain the last update modification level number.\n)X Syntax -\n     NUMBER  ON / OFF\n\n Aliases  - NUMB, NUM\n Defaults - None.\n Required - ON or OFF\n)O Operands -\n))ON     - Specifies that the data is to contain sequence numbers.\n))OFF    - Specifies that sequence numbers are not to be used.\n=UNNUMBER=UNNUM=UNN\n)F Function -\n  The UNNUMBER subcommand can only be used when NUMBER ON is in\n  effect, and causes all sequence numbers to be replaced by blanks,\n  and sets NUMBER to OFF.\n)X Syntax -\n     UNNUMBER\n\n Aliases  - UNNUM, UNN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RENUMBER=RENUM=REN\n)F Function -\n  The RENUMBER subcommand causes all records to have sequence\n  numbers loaded (or reloaded) into the last eight (8) bytes of\n  data, and sets NUMBER to ON.  For PDS or PDSE members with STATS\n  ON, the last two digits contain the last update modification level\n  number.  Only fixed-length records having a length of at least\n  40-bytes can have sequence numbers maintained by REVEDIT.\n)X Syntax -\n     RENUMBER\n\n Aliases  - RENUM, REN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=SUBMIT=SUB=SB\n)F Function -\n  The SUBMIT subcommand invokes TSO SUBMIT to submit the edit\n  session's copy of the data for background processing.  If the SB\n  alias is used, the REVSB CLIST is invoked which prevents line mode\n  messages - the submission message is shown on the top line.\n)X Syntax -\n     SUBMIT\n\n Aliases  - SUB, SB\n Defaults - None.\n Required - None.\n)O Operands - None.\n=COPY\n)F Function -\n  The COPY subcommand facilitates the importing of the contents of\n  a data set or member into the data being edited.  The insertion\n  point is specified by an 'A' (for after) or 'B' (for before) line\n  command.  If there are no edit data lines then the insertion point\n  line command is not required.\n\n  An optional operand may be used to directly specify the source of\n  the data to be copied.  If a member of a partitioned data set is\n  being edited and the operand specified is unquoted, contains no\n  periods, and does not exceed 8 characters in length, then the\n  operand is taken to specify another member in the data set being\n  edited; otherwise the operand is deemed to specify a data set name.\n\n  If the source data set is partitioned and no member name in paren-\n  theses was appended to the data set name, then a member list will\n  be presented from which a single member can be selected.\n\n  If no operands are specified then a data entry panel is displayed\n  where the user can nominate the copy data source.\n)X Syntax -\n     COPY  'source'\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'source'  - Specifies a member name of the PDS being edited,\n            a data set name, or a data set name and member name.\n=CREATE=CRE\n)F Function -\n  The CREATE subcommand facilitates the exporting of data being\n  edited into a new data set or new member of an old or new data set.\n  The data lines to be copied are specified by a 'C' line command\n  with an optional multiplier, or by a 'CC'..'CC' block of lines.\n\n  If a member of a partitioned data set is being edited, another\n  member of the same data set can be directly nominated as the data\n  target by specifying its name as the subcommand operand.\n\n  If no operands are specified then a data entry panel is displayed\n  where the user can nominate the data set to contain to written data.\n\n  CREATE is the same as REPLACE except that an existing data set (or\n  member if partitioned) will not be overwritten.\n)X Syntax -\n     CREATE  'member'\n\n Alias    - CRE\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'member'  - Specifies a new member name of the PDS being edited.\n=REPLACE=REPL=REP\n)F Function -\n  The REPLACE subcommand facilitates the exporting of data being\n  edited into an existing data set.  The data lines to be copied are\n  specified by a 'C' line command with an optional multiplier, or by\n  a 'CC'..'CC' block of lines.\n\n  If a member of a partitioned data set is being edited, another\n  member of the same data set can be directly nominated as the data\n  target by specifying its name as the subcommand operand.\n\n  If no operands are specified then a data entry panel is displayed\n  where the user can nominate the data set to contain to written data.\n\n  REPLACE is the same as CREATE except that a new data set cannot\n  be created.\n)X Syntax -\n     REPLACE  'member'\n\n Aliases  - REPL, REP\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'member'  - Specifies a member name of the PDS being edited.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F Function -\n  The LOCATE subcommand repositions the display such that the\n  specified line is shown as the first or top-most data line on the\n  screen.\n\n  The line can be nominated either by number, label or condition,\n  and can also be restricted by label range if FIRST or LAST is also\n  specified.\n)X Syntax -\n     LOCATE 'lineno'\n        or\n     LOCATE '.label'\n        or\n     LOCATE COMMAND / CHANGE / ERROR / UPDATE / LABEL\n            FIRST / NEXT / PREV / LAST\n        or\n     LOCATE COMMAND / CHANGE / ERROR / UPDATE / LABEL\n            FIRST / LAST\n            '.label1' '.label2'\n\n Aliases  - L, LOC, LOCATE\n Defaults - NEXT if one of COM, CHA, ERR, UPD or LAB is specified.\n Required - 'lineno' or '.label' or one of COM, CHA, ERR, UPD or LAB\n Note     - See the HELP for LABEL for line label syntax.\n)O Operands -\n)P 'lineno'  - Specifies the relative line number to which the display\n               is to be positioned.\n)P '.label'  - Specifies the label of the line to which the display\n               is to be positioned.\n)P '.label1' - Specifies the first or last line of a block of lines\n               to be searched for the nominated condition.\n)P '.label2' - Specifies the last or first line of a block of lines\n               to be searched for the nominated condition.\n))COMMAND - specifies that a pending line command rather than a\n            record number is to be located.  COM or CMD for short.\n))CHANGE  - specifies that a line altered by a CHANGE ALL rather than a\n            record number is to be located.  CHA or CHG for short.\n))ERROR   - specifies that a line where a CHANGE ALL failed rather than\n            a record number is to be located.  ERR for short.\n))UPDATE  - specifies that a line which has been altered this session\n            rather than a record number is to be located.\n))LABEL   - specifies that a line which has been labelled this session\n            rather than a record number is to be located.\n            LAB or LBL for short.\n))FIRST   - requests the relocation to the first line - within the\n            nominated block if two labels were specified - with the\n            specified condition.\n))NEXT    - requests the relocation to the next line after the\n            current top line with the specified condition.\n))PREV    - requests the relocation to the previous line before the\n            current top line with the specified condition.\n))LAST    - requests the relocation to the last line - within the\n            nominated block if two labels were specified - with the\n            specified condition.\n=LABEL\n)F Function -\n  LABEL is not a subcommand.\n\n  This HELP entry documents the use of line labels.\n\n  A label is assigned by entering the label name by itself in the\n  left margin or line command area on the screen line displaying the\n  record to be labelled.  The label can then be used in a LOCATE\n  command to reposition the display back to the labelled record.\n\n  Also, a pair of line labels can be used in a LOCATE or RESET\n  command to restrict the scope of the requested action.\n\n  A record cannot have more than one label at a time.\n\n  Reusing the same label for a different record will remove that\n  label from the record that was associated with it earlier.\n)X Syntax -\n     '.label'\n\n  where '.label' is a character string which does not exceed 6\n  characters in length, starts with a period, and is followed only\n  by alphabetic characters.\n\n  The alphabetic characters will be folded to upper case automatically\n  both when the label is assigned and when used as a command operand.\n\n  A further restriction on the name of user-defined labels is that\n  the second character may not be 'Z', which is reserved for internal\n  labels.\n\n  Automatically defined internal labels are:\n      .ZFIRST - the first record\n      .ZF     - an abbreviation of .ZFIRST\n      .ZLAST  - the last record\n      .ZL     - an abbreviation of .ZLAST\n      .ZCSR   - the record where the cursor is located\n                or the first record on the screen, as appropriate.\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SORT\n)F Function -\n  The SORT subcommand allows records to be reordered according to\n  data content.\n)X Syntax -\n       SORT  'column-1'  'column-2'\n               A / D\n               EX / NX\n\n Aliases  - None.\n Defaults - A (ascending order), and all records are sorted.\n Required - None.\n)O Operands -\n)P 'column-1' - Optional, specifies first column of the sort field.\n                If not specified the start of the record is assumed.\n)P 'column-2' - Optional, specifies last column of the sort field.\n                If not specified the end of the record is assumed,\n                except for sequence numbers which are not sorted\n                unless the sort field starts within the sequence\n                number data.\n))A           - Requests sorting in ascending order.\n                This is the default.\n))D           - Requests sorting in descending order.\n))EX          - Only search records excluded from display.  X for short.\n))NX          - Only search records not excluded from display.\n=BOUNDS=BOUND=BNDS=BND\n)F Function -\n  The BOUNDS subcommand specifes the active column range which can\n  be processed by several operation types.  Operations limited by\n  the active bounds include text flow, copy over, shift left, shift\n  right, and the various kinds of find and change.  On color\n  terminals data outside the active bounds are shown in blue.\n\n  If no bound columns are apecified then the default bounds are\n  restored.\n)X Syntax -\n       BOUNDS  'column-1'  'column-2'\n\n Aliases  - BOUND, BNDS, BND\n Defaults - None - reset to default bounds.\n Required - None.\n)O Operands -\n)P 'column-1' - specifies the first or left-most column within the\n                active bounds.  If specified as an asterisk then the\n                left bound is not changed.  It must not be greater\n                than 'column-2'.\n)P 'column-2' - specifies the last or right-most column within the\n                active bounds.  If specified as an asterisk then the\n                right bound is not changed.  It must not be less\n                than 'column-2'.\n=CUT\n)F Function -\n  The CUT subcommand copies selected records from the edit data\n  to the clipboard, which is a holding area in your TSO session's\n  region.  Records in the clipboard can be subsequently copied\n  into active edit data by the PASTE subcommand.\n\n  Records to be copied to the clipboard can only be specified by\n  a C line command or by a CC-CC block command.\n)X Syntax -\n       CUT     R / A\n\n Aliases  - None.\n Defaults - R\n Required - None.\n)O Operands -\n))R           - Requests that existing records in the clipboard\n                are discarded.  If no new edit data records are\n                selected then the only function of the command\n                is to empty the clipboard.\n))A           - Requests that existing records in the clipboard\n                are retained.  New selected records are appended\n                to the existing contents of the clipboard.\n=PASTE\n)F Function -\n  The PASTE subcommand copies the contents of the clipboard\n  into the active edit data.  The contents of the clipboard are\n  not altered, and can be copied again by a subsequent PASTE\n  operation.\n\n  The target location for the PASTE is specified by an A (for\n  'after') or a B (for 'before') line command.  When editing an\n  empty data set or member the target location does not have to\n  be specified.\n\n  Data to be pasted is loaded into the clipboard by the CUT\n  subcommand.\n)X Syntax -\n       PASTE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=HILITE=HI\n)F Function -\n  The HILITE subcommand controls syntax coloring and highlighting.\n  This status is saved in the profile if one exists.  The highlighting\n  is only ever displayed when 80-byte records are being edited.\n)X Syntax -\n     HILITE AUTO / ASM / CLIST / JCL / PLI / DATA / OFF\n\n Alias    - HI\n Default  - None.\n Required - one of AUTO, ASM, JCL or OFF.\n)O Operands -\n))AUTO    - specifies that both JCL and non-JCL source highlighting\n            may be displayed.  JCL syntax highlighting is used for\n            records beginning with '//' or '/*'.  Other source types\n            may be detected based upon the data content, especially\n            the first non-comment record.\n))JCL     - specifies JCL syntax highlighting is to be displayed\n            whenever records beginning with '//' or '/*' are shown.\n            Non-JCL records will not be highlighted.\n))ASM     - specifies that automatic syntax highlighting is to be\n            enabled, and that Assembler source syntax highlighting\n            is to be used for non-JCL records in this session.\n))CLIST   - specifies that automatic syntax highlighting is to be\n            enabled, and that TSO CLIST source syntax highlighting\n            is to be used for non-JCL records in this session.\n))PLI     - specifies that automatic syntax highlighting is to be\n            enabled, and that PL/I source syntax highlighting is\n            to be used for non-JCL records in this session.\n))DATA    - specifies that automatic syntax highlighting is to be\n            enabled, but that no highlighting is to be used for\n            non-JCL records in this session.\n))OFF     - specifies syntax highlighting is never to be displayed.\n            This also suppresses JCL highlighting extensions such\n            as data set name catalog look-up.\n=DSNCHECK=DSNCHK=DSNC\n)F Function -\n  The DSNCHECK subcommand controls the handling of data set names\n  when JCL syntax highlighting is active.  When a data set name is\n  recognized after DSN= in JCL, a catalog search is made for that\n  data set.  If it is found in the catalog then the name is highligted\n  with underscores, otherwise it is shown in blue.\n\n  In some cases such as when there are catalog errors, the catalog\n  searches may generate problems.  DSNCHECK provides a way to disable\n  the catalog searches without disabling all JCL syntax coloring.\n\n  Note that &SYSUID is the only symbol that is automatically\n  resolved before the catalog is searched.  Any other occurrence of\n  an ampersand in the data set name will prevent a catalog search.\n)X Syntax -\n     DSNCHECK  ON / OFF / ?\n\n Alias    - DSNCHK, DSNC\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Enables data set catalog status highlighting.\n))OFF    - Disables data set catalog status highlighting.\n))?      - Display the current setting without changing it.\n=TABS\n)F Function -\n  The TABS commands sets optional software tabbing columns.  After\n  entering data on a line, pressing <emter> will cause the cursor\n  to be moved to the next tab column, which can facilitate more\n  convenient data entry when entering formatted data.\n)X Syntax -\n     TABS    'col1' ('col2') ('col3') ...\n\n Alias    - None.\n Defaults - None.\n Required - 'col1'\n)O Operands -\n)P   The valid operands are 1 or more column numbers.\n  All operands must be numeric and unquoted.\n  No column number is allowed to exceed the maximum record length.\n  A TABS command will replace any previous active tab settings.\n  'TABS 0' can be used to clear active tab settings.\n))OFF    - Disables data set catalog status highlighting.\n=UNDO\n)F Function -\n  The UNDO subcommand without operands instructs the editor to\n  restore the data to the state that existed before the latest\n  changes input by the user were applied.  Only changes performed\n  in the current Edit session since UNDO was last activated can be\n  undone.  No more than 31 consecutive UNDOs can ever be performed,\n  and this number may not be achievable for large data sets.\n\n  The UNDO subcommand with an operand controls whether UNDO is\n  enabled or disabled.  UNDO will not be enabled if the data width\n  exceeds an internal limit of around four thousand columns, nor\n  if there are more records than an arbitrary internal limit.\n\n  Use REDO to undo an UNDO.\n)X Syntax -\n     UNDO  ON / OFF\n\n Aliases  - None.\n Defaults - Perform an UNDO operation.\n Required - None.\n)O Operands -\n))ON     - Specifies that necessary resources are to be acquired\n         and that UNDO is to be enabled.\n))OFF    - Specifies that UNDO is to be disabled and its associated\n         resources can be released.\n=REDO\n)F Function -\n  The REDO subcommand instructs the editor to reapply the changes\n  which were removed by the most recent UNDO subcommand (that has\n  not also been redone).\n\n  REDO is only available if UNDO is enabled and has not not been\n  disabled since the UNDO subcommand being backed out.  Once manual\n  changes are applied to the edit data after an UNDO, that UNDO can\n  no longer be backed out by REDO.\n\n  Use UNDO to undo changes to the data before using REDO.\n)X Syntax -\n     REDO\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand instructs REVEDIT to discard all data\n  being edited and terminate.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SAVE\n)F Function -\n  The SAVE subcommand instructs REVEDIT to write the data being edited\n  back to the data set which is the nominal source of the data.\n)X Syntax -\n     SAVE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=AUTOSAVE\n)F Function -\n  The AUTOSAVE subcommand specifies whether the END subcommand\n  will perform an automatic save of the data, or prompt the user\n  for a SAVE or CANCEL command.\n)X Syntax -\n     AYTOSAVE  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that the END subcommand will automatically\n         save the data if it has been changed before terminating\n         the REVEDIT session.\n))OFF    - Specifies that the END subcommand will prompt the user\n         to save or discard the data if it has changed before the\n         REVEDIT session can be terminated.\n=END\n)F Function -\n  The END subcommand instructs REVEDIT to terminate the Edit\n  session.\n\n  If no change was made to the data then the data will not be\n  written back to disk.\n\n  If AUTOSAVE is ON and the data was changed then the data\n  will be saved back to the data set being edited.\n\n  If AUTOSAVE is OFF and the data was changed then a message\n  requesting that SAVE or CANCEL be entered will be displayed.\n\n  If END invokes the SAVE function but the SAVE fails, then REVEDIT\n  will not terminate the session.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand performs the same processing as END, except\n  that if REVEDIT was invoked from a member selection list then the\n  member selection list will not be displayed but instead the entire\n  REVIEW session will end.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVIEW": {"ttr": 513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x002\\x00\\x84#\\x7f\\x01\\x18#\\x1f\\x175\\x08\\xb4\\x00L\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1984-08-24T00:00:00", "modifydate": "2018-08-19T17:35:32", "lines": 2228, "newlines": 76, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVIEW' RELEASE 48.3     AUGUST 2018\n)F Function -\n  The REVIEW command allows a data set or UNIX entity to be examined\n  at a 3270 TSO terminal in full screen mode.  Both disk and tape\n  files may be REVIEWed.  If a PDS or PDSE without a member is\n  specified then a member selection list is displayed.\n\n  When looking at file data, a 'K' may be shown in the \"ruler\"\n  heading line to denote the first and last, or only, column(s) of\n  record keys.  On color terminals the portion of the \"ruler\" line\n  corresponding to record keys is shown in red.  If the record\n  format indicates printer carriage control characters then an 'A'\n  or an 'M' as appropriate may be shown in column 1 of the \"ruler\"\n  heading line.\n\n  When a PDS or PDSE member list is displayed, load module members\n  with a residence mode of ANY are listed in high intensity or green\n  in the member list, while those with a residence mode of 64 are\n  listed in high intensity or yellow in the member list.  For\n  non-program members, aliases are flagged with a green asterisk\n  after the member name, and SCLM-managed members are flagged with\n  an equals sign ('=') in the member list.\n\n  REVIEW can format records according to Assembler data structure\n  source code supplied by the user.  REVIEW can also format system\n  related data such as SMF records, EREP data, VTOC entries, tape\n  labels and load module structure and identification data.  REVIEW\n  can format the directories of ZIP files created by PKZIP, Info-ZIP,\n  WinZIP, etc.\n\n  REVIEW allows the browsing and extraction of individual zipped\n  files within a ZIP archive.\n\n  REVIEW can display the history and structure of program objects\n  residing in PDSE data sets or UNIX files, and load modules\n  residing in PDS data sets, including compilation and program bind\n  timestamps.\n\n  REVIEW can display pictures encoded as 1-bit (black-and-white),\n  4-bit (16 colors) or 8-bit (256 colors) single-plane \".PCX\" (ZSoft\n  Paintbrush) files on a terminal with 3270 graphics capabilities.\n\n  REVIEW can display pictures encoded as 1-bit (black-and-white),\n  4-bit (16 colors), 8-bit (256 colors), 16-bit (high color), 24-bit\n  or 32-bit (true color) uncompressed single-plane \".BMP\" (Windows\n  or OS/2 Bitmap) files on a terminal with 3270 graphics capabilities.\n\n  REVIEW can display pictures in \".GIF\" (Graphics Interchange Files)\n  files.\n\n  When rendering pictures, REVIEW will only use color 3270 graphics\n  when colors other than 3270 black or 3270 white are actually used\n  in the rendering.  The only 3270 colors which will be used by REVIEW\n  are black, blue, red, pink, green, turquoise, yellow and white.\n\n  REVIEW can process a single data set or a pre-allocated file\n  concatenation.  Partitioned files can be sequentialized,\n  offloaded in PDSLOAD (IEBUPDTE-like) format, or searched for\n  specific or picture-masked data.  Load modules can be offloaded\n  into a sequential format, and can be delinked into object decks.\n  Sequential offload files can be processed to restore members\n  into partitioned data sets.\n\n  REVIEW can display the contents of the virtual storage in the user's\n  address space.\n\n  REVIEW can process the system PARMLIB concatenation.\n\n  REVIEW can process UNIX files such as HFS (Hierarchical File System)\n  files.\n\n  REVIEW can operate as an ISPF dialog.\n\n  REVIEW allows access to, and the saving of, data by data content,\n  data beyond I/O errors and end-of-file markers, and data from\n  deleted members of a PDS.\n\n  REVIEW can convert ASCII data to EBCDIC.\n\n  REVIEW can be invoked recursively by using the TSO subcommand.\n  Swapping between parallel sessions allows access to any nested\n  REVIEW session without requiring the termination of any other\n  REVIEW session.\n\n  The 'REVED' command is a way of invoking REVIEW and setting the\n  default action for non-VSAM data sets to edit with REVEDIT instead\n  of browse with REVIEW.  Using REVED with a sequential data set\n  name immediately starts a REVEDIT session.  Using REVED with a\n  partitioned data set name alters the meaning of the 'S' selection\n  code to mean edit (with REVEDIT) rather than browse (with REVIEW).\n\n  It is intended that the installation authorize 'REVVSAM' to allow the\n  REVIEWing of VSAM components for problem diagnosis by programming\n  support staff.  Normally, VSAM KSDS, ESDS, RRDS, VRRDS and LINEAR\n  clusters, paths, alternate indices and their components can be\n  REVIEWed without this authorization, with logical records being\n  extracted from controlintervals for non-LINEAR organizations.  If a\n  DB2 tablespace is REVIEWed, each row from a table in the tablespace\n  will be presented as a logical record, independently from any DB2\n  activity.\n\n  The 'REVVSAM' command is intended to allow the browsing of physical\n  VSAM components (ie. VSAM objects with VTOC entries) even with\n  corrupt or missing data in a CATALOG, VVDS or CI control flags.\n  APF authority is also required to REVIEW subsystem data sets.\n\n  Under z/OS, if REVIEW is APF authorized, the system will permit the\n  browsing of Basic Catalog Sturcture and VVDS data sets, but ISPF\n  services cannot be used.  Therefore, a name such as 'REVVSAM' or\n  'REVAUTH' should be authorized instead of the name(s) normally\n  used such as 'REVIEW' and 'REV'.\n\n  There are no APF authorization requirements under MVS/370.\n)X Syntax -\n         REVIEW  'dsname'\n                    VOLUME('volume')\n                    UNIT('unit')\n                    QUICK\n                    DATA\n                    GEN\n                    TOP('rel-addr')\n                    SUBSYS('subsys')\n                    XISPMODE\n     or\n         REVIEW  'ACTIVE'    TOP('rel-addr')\n     or\n         REVIEW  'filename'  FILE  DATA  TOP('rel-addr')  XISPMODE\n     or\n         REVIEW  'pathname'\n\n  Required - 'dsname'\n     or      'filename'  FILE\n     or      'pathname'  which must begin with a slash or tilde\n     or      no operands for \"point and shoot\".\n\n  Defaults - TOP(0)\n             UNIT(SYSALLDA) when VOLUME is specified.\n\n  Aliases  - REV, REVED, REVVSAM\n)O Operands -\n)P 'dsname' or 'dsname(member)' - The data set to be examined.\n   'filename' - The DDNAME allocated to the data set to be examined.\n   'pathname' - The path name of an UNIX directory.\n\n   If the first operand begins with a slash ('/') or a tilde ('~')\n   then it is deemed to specify an UNIX directory path, and no other\n   operands are allowed.  The tilde specifies the user's home\n   directory.  A specific UNIX file may be specified to directly\n   access the data contained in the file.\n\n   If the first operand does not begin with a slash or tilde then it\n   is assumed to be a DSNAME unless it is followed by the keyword\n   'FILE'.\n\n   Specifying the quoted dsname of 'FORMAT4.DSCB' and a VOLUME\n   requests that the VTOC of that volume be REVIEWed.\n\n   Specifying the quoted dsname of 'ACTIVE' requests that the\n   user's virtual storage (and not a data set) is REVIEWed.\n\n   Specifying the file name of PARMLIB when there is no PARMLIB DD\n   allocated on a OS/390 1.2 or later system requests that the\n   logical PARMLIB service be used to REVIEW the system PARMLIB\n   concatenation.\n\n   If no operands are supplied then REVIEW reads the screen image\n   and extracts the data set name from the part of the screen\n   containing the cursor.  This works in both fullscreen and line\n   modes, but not under Session Manager which updates the screen\n   before REVIEW receives control.  If a data set name is not found\n   then normal TSO prompting is commenced except for a recursive\n   REVIEW session where a message is displayed.\n\n   ISPF users may like to load\n       TSO REV) MODE(FSCR\n   into a PF key for easy access to \"point and shoot\", although\n       TSO REV\n   provides the same functionality since OS/390 2.10.  Similarly,\n       TSO REV\n   can be loaded into a REVIEW Program Function key.\n\n   A member name is NOT considered part of the data set name for\n   \"point and shoot\" purposes.\n\n   A UNIX path name cannot be processed by \"point and shoot\".\n\n))FILE     - This keyword indicates that the first operand is\n             a FILENAME, not a DSNAME.  This is useful for looking\n             at a temporary data set or at concatenated libraries.\n             A member name may be specified in the first operand\n             after the DDNAME if the DDNAME is allocated to a\n             PDS.  This allows you to enter 'REVIEW SYSPROC(X) F'\n             to look at member 'X' in whatever PDS is allocated to\n             DDNAME 'SYSPROC'.\n\n             Note that REVIEWing a concatenated sequential file may\n             cause unexpected behaviour.\n\n             The 'FILE' operand may be abbreviated to 'F'.\n\n))VOLUME('volume') - For uncataloged data sets, the volume serial.\n\n             'VOLUME' may be abbreviated to 'V'.\n\n))UNIT('unit') - For uncataloged data sets, the unit type.\n             This operand is ignored if 'VOLUME' is not specified.\n             If 'VOLUME' is specified the default unit is 'SYSALLDA'.\n             For data sets accessed via the catalog, the unit is\n             determined from the catalog entry.\n\n             'UNIT' may be abbreviated to 'U'.\n\n))TOP('rel-addr') - This specifies a relative address within the\n             data set to be considered as the logical top-of-data.\n             'TOP' performs the same function as the 'NEWTOP'\n             subcommand before the initial display of data.  As with\n             'NEWTOP', 'rel-addr' is a 1 to 6 hexadecimal digit\n             number interpreted as a TTR for disk data sets, or as\n             a BLOCK IDENTIFIER for tape data sets.  When 0 is\n             specified or defaulted to, no special action is taken.\n             This operand is ignored for VSAM and subsystem data sets.\n             When browsing the virtual storage of the TSO session's\n             address space, TOP specifies the initial virtual storage\n             display address.\n\n             'TOP' may be abbreviated to 'T'.\n\n))TTR('rel-addr') - Same as TOP('rel-addr').\n\n))SUBSYS('subsys') - For subsystem data sets, this specifies the 1-4\n             character subsystem name.  The subsystem must be active\n             and allow data set allocation for this to be successful.\n             The subsystem data set name specified may include a\n             member name in parentheses if appropriate.\n             This operand is ignored if 'VOLUME' is specified.\n\n             'SUBSYS' may be abbreviated to 'S'.\n\n))QUICK    - This indicates that if an unquoted data set name was\n             specified then the name was fully qualified apart from\n             the prefix (ie. no trailing qualifier has to be added).\n             This saves a search of the catalog to look for trailing\n             qualifiers which is otherwise performed unconditionally\n             unless the 'VOLUME' operand was specified.  This operand\n             is ignored if 'VOLUME' is specified.\n\n             The 'QUICK' operand may be abbreviated to 'Q'.\n\n))DATA     - This operand has several uses which, in general, mean\n             that control data is displayed rather than interpreted.\n             Specifically, this operand has seven (7) different\n             functions depending upon the type of data set being\n             REVIEWed.\n\n             1) For a VSAM component -\n                'DATA' indicates that control interval information\n                and DB2 tablespace structure is not to be interpreted\n                and that physical blocks are to be shown as-is without\n                extracting logical records or rows.\n\n             2) For a VSAM KSDS (Key-Sequenced Data Set) cluster -\n                'DATA' indicates that records are to be presented in\n                RBA (Relative Byte Address) or physical order rather\n                than in key-sequence order.\n\n             3) For a partitioned data set -\n                'DATA' indicates that the PDS directory is to be\n                REVIEWed as a sequential file, thereby precluding\n                access to the contents of members.\n\n             4) For other disk files with fixed length records -\n                'DATA' indicates that direct access logic which can\n                speed up access to different parts of the file will\n                not be used.  This logic is employed by default when\n                RECFM=F, RECFM=FS, or RECFM=FBS unless 'DATA' is\n                specified.  It is also used when RECFM=FB and the\n                VTOC indicates more than 256 tracks of data unless\n                'DATA' is specified.\n                (If this direct access logic is used and the file\n                does not use standard blocking, incorrect line\n                numbers and/or I/O errors could possibly occur.\n                The 'NEWTOP' subcommand (without any operand)\n                can be used from within REVIEW to make REVIEW\n                start behaving as if 'DATA' had been specified.)\n\n             5) For a SUBSYSTEM data set with a member included -\n                'DATA' indicates that a sequential file will be\n                allocated to the specified member only and data from\n                other members will not be accessible.  Use the 'DATA'\n                operand if the subsystem data set has members but the\n                subsystem does not support partitioned access.\n                (Normally, if 'DATA' was not specified then data from\n                the nominated member would initially be displayed,\n                but data from other members could subsequently\n                be displayed by using the 'MEMBER' subcommand.)\n\n             6) For a ZIP file 'DATA' indicates that the ZIP directory\n                will not be formatted, but that normal sequential read\n                and display processing will take place.  Only DASD\n                sequential data sets, PDS members and UNIX regular\n                files are checked for ZIP format by REVIEW.\n\n             7) For recognizable picture file types such as PCX\n                (Paintbrush), BMP (Bitmap) and GIF, 'DATA' specifies\n                that picture data is not to be interpreted, but that\n                normal data display processing will take place.\n                Without the 'DATA' operand REVIEW would attempt to\n                recognize supported picture data types, and render\n                such pictures on the screen.  (The 'FORMAT OFF'\n                subcommand can be used from within REVIEW to instruct\n                REVIEW to discard the picture data and therefore no\n                longer show the picture image.  A subsequent 'NEWTOP'\n                subcommand could be used to reactivate the image\n                display.)  The first data record must be at least 80\n                bytes long for REVIEW to recognize picture data.  The\n                rendering of pictures is never attempted when REVIEW\n                is running as an ISPF application.\n\n             The 'DATA' operand may be abbreviated to 'D'.\n\n))GEN      - This operand - valid for z/OS systems only - specifies\n             that if the member list of a Version 2 PDSE data library\n             which may have generation members is to be shown, then\n             all extant member generations should also be shown in\n             the member list.  The 'REF N' and 'REF G' member list\n             commands can be used to dynamically switch the display\n             of member generations in the member list.  Currently,\n             the display of member generations for PDSE program\n             libraries is not supported.\n\n             The 'GEN' operand may be abbreviated to 'G'.\n\n))XISPMODE - This specifies that REVIEW\n             1) is not to act as an ISPF application and is therefore\n                to perform terminal I/O and subcommand processing\n                natively; and\n             2) is not to determine terminal capabilities from ISPF\n                variables but is to issue a Read Partition (Query)\n                itself if appropriate.\n\n             This operand will only affect processing in an ISPF\n             environment.\n\n             The second function listed above relates to detecting\n             the graphics capabilities of the TSO terminal.  If you\n             want REVIEW to render graphic images (pictures) in an\n             ISPF environment then the XISPMODE operand is required\n             so that REVIEW will detect that the terminal can handle\n             graphics.  Without this operand, REVIEW determines\n             color, highlighting and graphics escape support from\n             ISPF, does not perform terminal I/O for a Query, and\n             can therefore present non-graphic file data more rapidly.\n\n             The 'XISPMODE' operand may be abbreviated to 'X'.\n\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'\n             under z/OS or 'REVPROF' under MVS/370.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or record (on this volume).\n   BOTTOM  - Scroll down to the last line or record.\n   BOT     - Same as 'BOTTOM'.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------------- REVIEW-DATA MODE SUBCOMMANDS ---------------------\n\n These subcommands are available while REVIEWing file data:\n\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   LIST    - Display the specified record number (relative record\n             numbers only, not sequence numbers) or labelled record.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   HEX ON  - Display each data byte as 2 hexadecimal digits.\n   HEX OFF - Display each data byte as a single character.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   HEXC ON - Alter the HEX ON display to show keyboard characters.\n   HEXC OFF- Leave the HEX ON display to show all data in hexadecimal.\n   HEXC    - If HEXC currently on, turn it off.  If off, turn it on.\n   HEXR ON - Show the data twice, first as characters, then in hex.\n   HEXR OFF- Do not show the data as characters and hex simultaneously.\n   HEXR    - If HEXR currently on, turn it off.  If off, turn it on.\n   HEXX ON - Show each data byte as a character and as hexadecimal.\n   HEXX OFF- Do not show the data as characters and hex simultaneously.\n   HEXX    - If HEXX currently on, turn it off.  If off, turn it on.\n   FIND    - Search until the specified data or pattern is found.\n   F       - Same as 'FIND'.\n   FINDSMF - Search for an SMF record type and optionally sub-type.\n   FS      - Same as 'FINDSMF'.\n   FINDNOT - Search until the specified data or pattern is not found.\n   FN      - Same as 'FINDNOT'.\n   RFIND   - Repeat the previous FIND or FINDNOT operation.\n   IFIND   - Same as 'RFIND'.\n   RESET   - Deactivate line exclusion caused by the ALL or REST\n             operand of a FIND or FINDNOT subcommand.\n   RES     - Same as 'RESET'.\n   FULL ON - Use full EBCDIC translation for display with using any\n             APL characters.\n   FULL OFF- Use the standard 3270 keyboard character set for display.\n   FULL    - If FULL is on, turn it off.  If off, turn it on.\n   ASCII ON- Specifies that ASCII data is being REVIEWed and that\n             characters are to be translated to EBCDIC before being\n             displayed.  Note that search arguments to the 'FIND' and\n             'FINDNOT' commands typed in while in ASCII mode are\n             translated to ASCII.\n   ASCII OFF- Leave the characters to be displayed in EBCDIC.\n   ASCII   - If ASCII is on, turn it off.  If off, turn it on.\n   DISP T  - Display TN/T11-like EBCDIC text characters where possible.\n             This is similar to 3278T in ISPF.\n   DISP A  - Display APL/EBCDIC characters where possible.\n             This is similar to 3278A in ISPF.\n   DISP    - Toggle between DISP TN and DISP APL.\n   DISPLAY - Same as 'DISP'.\n   DIR     - Display the directory of the partitioned data set or file\n             currently being REVIEWed.\n   MEMBER  - Switch to a specified member within the same\n             partitioned data set (or concatenation thereof)\n             as the current member.\n   MEM     - Same as 'MEMBER'.\n   NEWTOP  - Specify a relative physical address to be considered\n             as the top-of-data.  This is useful for looking past\n             I/O errors, end-of-file markers, and at deleted members.\n             It is also useful for directly viewing data a long way\n             from the start without reading all the preceding records.\n   SUBMIT  - Submit the file or MEMBER being REVIEWed.\n             TSO SUBMIT is invoked.\n             The data set must be sequential or partitioned,\n             and have fixed length 80-byte records.\n   SUB     - Same as 'SUBMIT'.\n   SB      - Same as 'SUBMIT' but with no line mode messages.\n   RDW ON  - Show the RDW of each variable-length record as if it were\n             part of the record's data.\n   RDW OFF - Undo 'RDW ON'.\n   RDW     - If RDW is currently on, turn it off.  If off, turn it on.\n   SMF ON  - If SMF data is being examined, convert the record\n             to eye-readable format.\n   SMF OFF - Undo 'SMF ON'.\n   SMF     - If SMF is currently on, turn it off.  If off, turn it on.\n   EREP ON - If LOGREC data is being examined, convert the record\n             to eye-readable format.\n   EREP OFF- Undo 'EREP ON'.\n   EREP    - If EREP is currently on, turn it off. If off, turn it on.\n   FORMAT  - Format file data according to Assembler data definition\n             source code in the nominated member of the REVFMTS file.\n             VTOC entries can be formatted without the REVFMTS file.\n   FMT     - Same as 'FORMAT'.\n   FMT OFF - Suspend record formatting.  Disable picture rendering.\n   FMT ON  - Resume record formatting.\n   FMTVAR  - Manually specify the data type of a data item.\n   FV      - Same as 'FMTVAR'.\n   COLOR # - Set the data display color to color number '#'.\n   COLOR ON- Turn on 7-color/extended highlighting mode.\n             This may give errors on some older model terminals.\n   COLOR OFF- Turn off 7-color/extended highlighting mode.\n   COLOR   - If COLOR is on, turn it off.  If off, turn it on.\n   COLOUR  - Same as 'COLOR'.\n   APPEND  - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Data is to be appended\n             to any existing data in the output file.\n   ADD     - Same as 'APPEND'.\n   TACKON  - Same as 'APPEND'.\n   COPYOUT - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Any data in the output\n             file will be overwritten and lost.\n   CUTOFF  - Same as 'COPYOUT'.\n   CUT     - Same as 'COPYOUT'.\n   CUTOVER - Same as 'COPYOUT'.\n   RTF     - COPYOUT print files with message and ASM text coloring.\n   FMTPRT ON - Enable color highlighting of print report data.\n             Also, allow COPYOUT to truncate trailing blanks.\n   FMTPRT OFF - Disable color highlighting of print report data.\n   FMTPRT  - If FMTPRT is currently on, turn it off.\n             If off, turn it on.\n   PICDATA - Cause Assembler source statements describing picture\n             image data to be written to a file.\n   SETUNZ  - Override unzip file attributes.\n   EDIT    - Process the current data set with ISPF EDIT.\n   BROWSE  - Process the current data set with ISPF BROWSE.\n   VIEW    - Process the current data set with ISPF VIEW.\n   INFO    - Display the attributes of the data set being REVIEWed.\n\n\n These subcommands are available only while REVIEWing virtual storage:\n   LEFT    - Display the previous storage address in the trace table.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Display the next storage address in the trace table.\n   '>'     - Same as 'RIGHT'.\n   EQUATE  - Equate a symbol name to a storage address.\n   EQ      - Same as 'EQUATE'.\n   DROP    - Remove a previously defined EQUATE.\n   LIST    - Display the storage contents at the specified address.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n\n --------------- DIRECTORY ENTRY LIST MODE SUBCOMMANDS ----------------\n\n   To see the list of available subcommands and valid entry selection\n   action codes when REVIEW is displaying directory entries, type\n   'FSHELP' (or 'FSH' or 'HEL') and press <ENTER>.\n\n   REVIEW has three (3) different directory displays.  They are:\n      (1) \"PDS\" type - for a PDS, a data PDSE, and concatenated\n          files of any sort of PDS and/or PDSE.\n      (2) \"PDSE\" type - for an unconcatenated program object PDSE.\n      (3) \"UNIX\" type - for UNIX directories and files in\n          hierarchical file structures.\n\n   The list of available subcommands and valid entry selection codes\n   depends on the type of active directory display.  The 'FSHELP'\n   command will cause the valid options for that display type to be\n   shown.\n\n   When REVIEW is running as an ISPF application, the HELP subcommand\n   will be intercepted by ISPF.\n\n   The default value of PF1 is intended to provide access to this\n   TSO HELP member which is primarily intended to document subcomands\n   available while REVIEWing file contents (as opposed to directories).\n\n These subcommands are available while REVIEWing directories:\n\n   BROWSE  - Causes ISPF Browse to be invoked to process the specified\n   /B        member or file.\n\n   DELINK  - (For load modules only.  Not for program objects.)\n   /DL       This subcommand instructs REVIEW to delink load modules\n             and write object \"decks\" to a sequential data set.\n\n             The subject PDS must have RECFM=U and must not be a PDSE.\n\n             Only tagged members are delinked, unless there are no\n             tagged members in which case ALL MEMBERS are delinked.\n\n             REVIEW will attach the DELINKI program from CBT file 90\n             to perform the delink function.  Fixed-length 80-byte\n             records are written.  Note that SCATTER and OVERLAY\n             programs will NOT be handled correctly.\n\n             If the resultant object data is relinked, the new load\n             modules may not be bit-for-bit copies of the original\n             load modules, even though they should be functionally\n             equivalent.  That is, reconstructed load modules may be\n             reblocked and/or reordered.\n\n   EDIT    - (Not for program objects.)\n   /E        Causes ISPF Edit to be invoked to process the specified\n             member or file.\n\n   OFFLOAD - (Not for program objects or UNIX files.)\n   /OFF      This subcommand instructs REVIEW to offload PDS members\n             to a sequential file.  Offloading can be performed for\n             a partitioned data set or concatenation with ANY record\n             format.\n\n             The output RECFM will be overridden to FB or VB as\n             appropriate.  The output LRECL will be overridden to\n             the PDS LRECL or 80, whichever is greater.  If the PDS\n             has an undefined record format then fixed-length\n             80-byte records will be written.\n\n             Members will be offloaded in member selection list\n             order, and will be preceded by an IEBUPDTE-like\n             './ ADD ' control statement.  IEBUPDTE-like './ ALIAS '\n             statements are also generated only if the member list is\n             sorted into TTR-order, and only for aliases whose\n             corresponding real member is also offloaded.  Note that\n             only the first occurrence of a given member name in a\n             concatenation can be offloaded.\n\n             Only tagged members are offloaded, unless there are no\n             tagged members in which case ALL MEMBERS are offloaded.\n\n             If the first two (2) data bytes of a record are './'\n             then they will be translated to '><' on output.\n\n   PDSLOAD - (Not for program objects or UNIX files.)\n   /PDS      This subcommand instructs REVIEW to process sequential\n             input and load the data into members of the library\n             being REVIEWed, which must not be a concatenation.\n\n             The user is prompted with a panel to specify the data\n             set containing the sequential input, whether ISPF\n             statistics are to be generated, and an optional\n             member name selection mask.\n\n             The input is expected to be data created by OFFLOAD\n             or a compatible offload process.\n\n             REVIEW will attach the PDSLOAD program from CBT file 93\n             (or the REVLMOD program if the PDS RECFM=U) to perform\n             the reload operation.\n\n             Load modules reconstructed by this subcommand will be\n             bit-for-bit copies of the original load modules.  No\n             reblocking is performed for load modules.\n\n             See PDSLOAD documentation for details on fixed- and\n             variable-length record format combinations, and record\n             truncation and extension actions.\n\n   REFRESH - This subcommand instructs REVIEW to update in-storage\n   /REF      directory information with the latest data from disk.\n             It will reset the tag status of all entries.\n\n   RESET   - This subcommand instructs REVIEW to untag all entries\n   /RES      without re-reading entry list data from disk.\n\n   RFIND   - Position the directory display so that the next tagged\n   /IFIND    entries is the top entry shown.  If there are no entries\n             tagged the number of PDS directory blocks read is shown.\n\n   SEARCH  - This subcommand instructs REVIEW to search PDS or PDSE\n   /FIND/F   member contents, or UNIX file contents for specified data.\n             When entered, the user will be presented with a data\n             entry screen in which to specify the search type, the\n             data to be searched for, an optional column range where\n             the data must reside, optional modifiers, and, for PDS\n             and PDSE data sets, a member name mask field which can\n             be used to restrict the search to members with certain\n             name patterns.\n\n   SELECT  - Specify a PDS or PDSE member, or UNIX file to be\n   /SEL/S    browsed using REVIEW.\n\n   SEQLOAD - (For PDS and PDSE data sets only.  Not for UNIX files.)\n   /SEQ      This subcommand instructs REVIEW to offload PDS members\n             to a sequential file.  Offloading can only be performed\n             for fixed-length and variable-length record files.  The\n             output RECFM will be overridden to FB or VB as\n             appropriate.  The output LRECL will be overridden to\n             the PDS LRECL.  Members will be offloaded in member\n             selection list order.  Note that only the first\n             occurrence of a given member name in a concatenation\n             can be offloaded.\n\n             If NO MEMBERS are tagged then ALL MEMBERS are offloaded.\n\n      Note:  'SEQLOAD' performs the same processing as 'OFFLOAD'\n             except that no IEBUPDTE-like control statements are\n             generated, './' is not translated on output, and the\n             minimum output LRECL of 80 required by 'OFFLOAD' for\n             IEBUPDTE compatibility is not required by 'SEQLOAD'.\n             'SEQLOAD' cannot process RECFM=U libraries.\n\n   SORT    - Causes the displayed directory entries to be reordered\n             according to the specified criterion.  Use 'HELP' to\n             see the available sort categories.\n\n   TAGFLIP - This subcommand instructs REVIEW to toggle the tag status\n   /TF       for every entry in the selection list.  Tagged entries\n             will become untagged, while entries which were untagged\n             will be tagged.\n\n   UPDATE  - (Not for program objects or UNIX files.)\n   /U        Causes REVEDIT to be invoked to process the specified\n             member.\n\n   VIEW    - (Not for program objects or UNIX files.)\n   /V        Causes ISPF View to be invoked to process the specified\n             member.\n\n\n ------------- DIRECTORY ENTRY LIST MODE SELECTION CODES --------------\n\n These selection codes can be used to select an entry for processing\n from a directory entry display:\n\n   /       - Selection code for selecting an entry to be REVIEWed\n             from a PDS or PDSE member list or UNIX directory list\n             as if the 'DATA' operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents, and the DATA operand cannot be specified on\n             an UNIX REVIEW request.  This selection code performs the\n             same function as the 'S' selection code except that the\n             DATA operand is deemed to have been specified.  This\n             will prevent REVIEW from attempting to interpret data\n             content such as pictures and ZIP file directories.  '/'\n             and 'S' are identical when used to navigate the UNIX\n             directory structure.\n\n   A       - Selection code for selecting a UNIX file to be REVIEWed.\n             This code instructs REVIEW to treat the file as an ASCII\n             text file.  ASCII-to-EBCDIC translation is activated,\n             and a new line is triggered by an ASCII LF character\n             (x'0A') or an ASCII CRLF string (x'0D0A').  (EBCDIC text\n             files employ the EBCDIC NL character (x'15') to trigger\n             a new line.)\n\n   B       - Selection code for selecting an entry to be browsed\n             from a PDS or PDSE member list, or UNIX directory list.\n             In an ISPF environment ISPF/PDF Browse is used, otherwise\n             REVIEW is used.\n\n   E       - Selection code for selecting an entry to be edited\n             from a PDS or PDSE member list, or UNIX directory list.\n             In an ISPF environment ISPF/PDF Edit is used, otherwise\n             REVEDIT is used.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n   M       - Selection code for extracting and displaying the module\n             map of a program.\n\n   D       - Selection code for deleting a member from an\n             unconcatenated PDS (not a PDSE) such that it can be\n             restored by the 'R' selection code.\n\n   R       - Selection code for restoring a deleted member and for\n             resetting the tag status of an entry.  All tags can be\n             cleared by REFRESH and RESET.  REFRESH will also clear\n             display entries for deleted members meaning that they\n             cannot be restored by the R selection code.\n\n   S       - Selection code for selecting an entry to be REVIEWed\n             from a PDS or PDSE member list, or UNIX directory list.\n             When a UNIX subdirectory entry is selected REVIEW treats\n             this as a navigation request, and replaces the displayed\n             entries with entries from the selected subdirectory.\n\n             With the 'REVED' TSO command selecting a PDS member with\n             'S' specifies that the member should be edited with\n             REVEDIT.\n\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity or reverse\n             video in the entry list.  For PDS and PDSE data sets,\n             if any members are tagged, then only tagged members are\n             processed during offload (see OFFLOAD and SEQLOAD),\n             delink (see DELINK) and search (see SEARCH) operations.\n             For UNIX files, if any entries are tagged then only\n             tagged files are processed during search operations.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as RFIND\n             can be used to locate the next tagged entry.  All tags\n             can be cleared by REFRESH and RESET.\n\n   V       - Selection code for selecting an entry to be viewed\n             from a PDS or PDSE member list.  In an ISPF environment\n             ISPF/PDF View is used, otherwise REVEDIT View is used.\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=MEMBER=MEM\n)F Function -\n  The MEMBER subcommand switches to a different member in the same PDS\n  or concatenation thereof.  It is only valid for partitioned files.\n)X Syntax -\n     MEMBER 'membername'\n\n Alias    - MEM\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'membername' - Specifies the name of a new MEMBER to be displayed.\n=DIR\n)F Function -\n  The DIR subcommand causes the member list of the PDS being REVIEWed\n  to be displayed.  It is only valid for partitioned files.  Its main\n  use is to allow access to the member list when the member being\n  REVIEWed was accessed directly and an END command would terminate\n  the REVIEW session.\n)X Syntax -\n     DIR\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the screen to a text string.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n   7.  Searches for picture strings are not allowed in ASCII mode.\n   8.  If currently in ASCII mode a text or character string specified\n       in the command will be translated to ASCII.\n   9.  The 'REST' and 'ALL' operands causes lines failing the match\n       criteria to be excluded from view.  No place marker lines for\n       this exclusion are shown.  This exclusion is cancelled by\n       other FIND/FINDNOT commands, and by 'UP' (including 'UP\n       MAX'), 'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by\n       'DOWN' or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by\n       formatting subcommands.\n)X Syntax -\n     FIND 'string'  'column-1'  'column-2'\n                     FIRST / NEXT / PREV / LAST / REST / ALL\n                     PREFIX / SUFFIX / WORD\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as character (type C) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n=FINDSMF=FS\n)F Function -\n  The FINDSMF subcommand positions the screen to an SMF record of\n  the requested type and optionally also subtype.  It is only of\n  practical value when SMF data is being REVIEWed.\n\n  FINDSMF notes:\n   1.  The first or only search argument specifying the SMF record\n       type must be a single unquoted decimal number between 0\n       and 255 inclusive.\n   2.  An optional additional numeric operand is allowed.\n       It is a second search argument specifying the SMF record\n       subtype and must be a single unquoted decimal number\n       between 0 and 255 inclusive.\n   3.  Subtype searches for system records (0 to 127) are only\n       allowed for record types known to have subtypes.  Subtype\n       searches for user records (128 to 255) are allowed without\n       validation.\n   4.  No validity checking is performed on the specified subtype.\n       Hence it is possible to search for a subtype which does not\n       exist.\n   5.  The first operand is required.\n   6.  A search will be performed even for non-SMF data.\n   7.  Obviously a column operand is not applicable.\n   8.  A non-numeric operand of 'FIRST', 'NEXT', 'PREV', 'LAST',\n       'REST' or 'ALL' may be entered to indicate the search\n       direction and starting location.\n)X Syntax -\n   FINDSMF 'type' 'subtype'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FS\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - 'type'\n)O Operands -\n)P    'type' - Specifies the decimal SMF record type.\n               Unquoted decimal integer in the 0 to 255 range.\n)P 'subtype' - Specifies the decimal SMF record subtype.  Optional.\n               Unquoted decimal integer in the 0 to 255 range.\n               eg. \"FS 30 NEXT\" or \"FS 30\"\n                    will search for any type 30 SMF record.\n               eg. \"FS 30 NEXT 5\" or \"FS 30 5 NEXT\" or \"FS 30 5\"\n                    will search for a type 30 subtype 5 SMF record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other record types.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other record types.\n=FINDNOT=FN\n)F Function -\n  The FINDNOT subcommand positions the screen to a text string\n  which does NOT match the search argument.\n\n  The notes listed under FIND also apply to FINDNOT.\n)X Syntax -\n   FINDNOT 'string'  'column-1'  'column-2'\n                      FIRST / NEXT / PREV / LAST / REST / ALL\n                      PREFIX / SUFFIX / WORD\n\n Alias    - FN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will only show records with non-blanks.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND or FINDNOT operation.\n  No operands are allowed.  It is expected that RFIND will be used as\n  the default meaning of a PFK such as PF5 or PF17.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand deactivates line exclusion caused by the\n  REST and ALL operands of any FIND or FINDNOT subcommand.  The\n  first file data line displayed on the screen (ie. the location\n  line number) remains unchanged.\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand moves the screen left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n\n   When browsing virtual storage, LEFT means jump back to the storage\n  address shown before this address was shown.  Any operand is ignored.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand moves the screen right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n\n   When browsing virtual storage, RIGHT means jump to the next storage\n  address shown after this address was shown.  Any operand is ignored.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the screen to the first line of the data\n  set or member.  It differs from 'UP MAX' when line exclusion is\n  active in that line exclusion is not cancelled.  In this case, TOP\n  can be used to view the results of a \"FIND ALL\" search from the\n  start without the need to reissue the \"FIND ALL\" command.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the screen to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FULL\n)F Function -\n  The FULL subcommand specifies whether character data is displayed\n  using full EBCDIC translation or only standard 3270 keyboard\n  characters.  If turned on then only code-points that usually cause\n  screen errors are deemed to be undisplayable.  If turned off then\n  all characters not on a \"standard\" keyboard are deemed to be\n  undisplayable.  (In character mode, undisplayable bytes are\n  represented by a period ('.').)  Terminals with APL support may\n  have normally unprintable characters displayed from the APL\n  character set instead when in 'FULL OFF' mode, equivalent to one of\n  the 3278A or the 3278T terminal display modes of ISPF, depending\n  on the value set by the DISPLAY subcommand.\n)X Syntax -\n     FULL ON / OFF / ?\n\n Aliases  - None.\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))ON       - Specifies that all code points X'40' to X'FE' and some\n             below X'40' are displayable characters.\n))OFF      - Specifies that only keyboard and possibly APL\n             characters are displayable.\n))?        - The current setting is displayed without change.\n=DISPLAY=DISP\n)F Function -\n  The DISPLAY subcommand specifies whether character data shown in\n  FULL OFF mode is TEXT EBCDIC (as per TN and T11 print trains) or\n  not.  This subcommand can be used to improve the readability of\n  the data being REVIEWed.  The current setting is shown in the\n  message area of the top screen line after the KEYS subcommand is\n  issued.  The DISPLAY setting is saved in the user profile data set.\n\n  It also control the code point used to represent non-display\n  characters.\n)X Syntax -\n     DISPLAY APL / TEXT / x / ?\n\n Alias    - DISP\n Defaults - Toggles APL/TEXT without changing non-display code point.\n            Initially, non-display characters are shown as periods.\n Required - None.\n Note     - DISPLAY does not permit more than 1 operand.\n Examples -\n     DISP ?              will show the current DISPLAY settings.\n     DISP .              will show non-display characters as periods.\n     DISP ' '            will show non-display characters as blanks.\n     DISP ~              will show non-display characters as tildes.\n     DISP B              will show non-display characters as 'B'.\n     DISP A              will show characters as per ISPF 3278A.\n     DISP 'a'            will show non-display characters as 'A'.\n     DISP T'a'           will show non-display characters as 'A'.\n     DISP C'a'           will show non-display characters as 'a'.\n     DISP AP             will show characters as per ISPF 3278A.\n     DISP APL            will show characters as per ISPF 3278A.\n     DISP s              will show non-display characters as 'S'.\n     DISP 'T'            will show non-display characters as 'T'.\n     DISP t              will show characters as per ISPF 3278T.\n     DISP tn             will show characters as per ISPF 3278T.\n     DISP T11            will show characters as per ISPF 3278T.\n     DISP TEXT           will show characters as per ISPF 3278T.\n)O Operands -\n)P  x      - Specifies a single quoted or unquoted character.\n             This character will be used to represent characters in\n             the data being browsed with code points in the x'00' to\n             x'3F' range, and x'FF'.\n))APL      - Specifies that data code points are to be displayed\n             from the standard character set if keyboard characters,\n             or possibly from the graphic (APL) character set if not\n             keyboard characters.  The graphic character set is not\n             available on some terminals.  This mode is similar to\n             the ISPF 3278A display mode.\n         **  Any unquoted operand beginning with 'A' or 'a' is deemed\n             to specify this operand.\n))TEXT     - Specifies that the \"text\" character set (similar to the\n             TN and T11 print trains) is to be used for character\n             code point interpretation.  Characters from the primary\n             (standard) and alternate (graphic/APL) character sets\n             may be used as appropriate in order to assist in data\n             representation.  This mode is similar to the ISPF 3278T\n             display mode, and is helpful in reading syntax diagrams.\n         **  Any unquoted operand beginning with 'T' or 't' is deemed\n             to specify this operand.\n))?        - The current setting is displayed without change.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=ASCII\n)F Function -\n  The ASCII subcommand specifies whether character data is displayed\n  using ASCII-to-EBCDIC translation or is to be treated as EBCDIC\n  characters.  If turned on then system-supplied translation is\n  carried out.  FIND strings entered while not in the current ASCII\n  setting cannot be used in RFIND operations.  FIND strings entered\n  while ASCII is turned on are translated to ASCII before the search\n  begins.\n)X Syntax -\n     ASCII ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that ASCII data is being REVIEWed and should\n             be translated to EBCDIC before being displayed.\n))OFF      - Specifies that the data is to be shown as-is in EBCDIC.\n))?        - The current setting is displayed without change.\n=FMTPRT\n)F Function -\n  The FMRPRT subcommand specifies whether the highlighting of\n  recognized parts of print report data is to occur or not.  If\n  enabled, various aspects of the job log, job messages, and some\n  utility and assembler output are highlighted to improve\n  readability.  When enabled, any COPYOUT request will truncate the\n  trailing blanks of each record before copying the data to the\n  output file.\n)X Syntax -\n     FMRPRT ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that color highlighting of print report data\n             is allowed, and that COPYOUT may truncate trailing\n             blanks.\n))OFF      - Specifies that no highlighting of print report data\n             is to occur.\n))?        - The current setting is displayed without change.\n=INFO\n)F Function -\n  The INFO subcommand will cause the display of the allocation\n  attributes of the data set being processed by REVIEW.  After\n  viewing this information, press <Enter> or any PF key to restore\n  the display of the file data.\n)X Syntax -\n     INFO\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F Function -\n  The HEX subcommand specifies the display mode (character or\n  hexadecimal) for data.  If HEX is entered without operands,\n  the current HEX mode is switched to the opposite HEX mode.\n\n  The normal HEX ON display shows each data byte as two\n  hexadecimal digits.  In this format, the maximum number of data\n  bytes shown on each line is half that of the HEX OFF display.\n\n  The formatting of the HEX ON display can be modified by\n  using the HEXC command.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that data should be displayed in HEX mode.\n))OFF      - Specifies that data should be displayed in character mode.\n=HEXC\n)F Function -\n  The HEXC subcommand can be used to modify the HEX ON display.\n  The HEXC setting only affects the display of the data when HEX ON\n  is active.\n\n  When HEXC is OFF, HEX ON shows the usual two hexadecimal digits\n  for each data byte.  This can lead to a crowded screen which is\n  difficult to read.\n\n  When HEXC is ON, the HEX ON display is modified to show bytes\n  which correspond to keyboard characters as a blank followed by the\n  character itself.  Further, nulls are shown as two underscores\n  instead of 00.  (An underscore is shown as a single underscore.)\n\n  HEXC can therefore provide improved readability of the data\n  and help the user find non-zero data while still providing a\n  unique rendering for each of the 256 possible code points.\n)X Syntax -\n     HEXC  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that HEX ON shows two hexadecimal digits for\n             each data byte except for keyboard characters and nulls.\n))OFF      - Specifies that HEX ON always shows two hexadecimal digits\n             for each data byte.\n=HEXR\n)F Function -\n  The HEXR subcommand can be used to display the data in an alternate\n  hexadecimal format.  The advantage of the HEXR display over the\n  normal HEX display is that the screen is less crowded and the\n  character data can be viewed simultaneously.\n\n  The maximum number of data bytes that can be shown by HEXR on each\n  line is one quarter of the screen width.  The left-most quarter of\n  each line shows the data in character mode.  The other three\n  quarters of the line show each byte as two hexadecimal digits with\n  a space between each pair of digits.\n\n  Further, to assist with locating non-zero and non-blank data, nulls\n  are shown as two periods instead of 00, and blanks are shown as two\n  underscores instead of 40.\n\n  Data matched by a FIND command will highlight both the character\n  and the hexadecimal parts of the display.  The cursor may be placed\n  in either part of the display to control cursor-specified scrolling.\n\n  The name of HEXR comes from \"HEX on the right\".\n)X Syntax -\n     HEXR  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXR display mode.\n))OFF      - Deactivates the HEXR display mode.\n=HEXX\n)F Function -\n  The HEXX subcommand provides and extended hexadecimal display\n  over the normal HEX display format.  The extension is that each\n  data byte is shown as it would be in character mode, followed\n  immediately by its hexadecimal code point value, followed by a\n  blank to make obvious the character-hexadecimal pairing.\n\n  As a result of this format, the maximum number of data bytes\n  which can be shown on a screen line is one quarter of the screen\n  width.\n)X Syntax -\n     HEXX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXX display mode.\n))OFF      - Deactivates the HEXX display mode.\n=RDW\n)F Function -\n  The RDW subcommand allows record descriptor words (RDWs) to be\n  displayed as part of the record's data.  Display column numbers\n  and the maximum display record length are adjusted by 4 as\n  appropriate.\n\n  The RDW command is only valid when processing variable-length\n  records read from a data set using a DCB.  For all other cases,\n  RDW will be rejected as an invalid command.\n)X Syntax -\n     RDW   ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the display of RDWs as part of the data.\n))OFF      - Deactivates the display of RDWs as part of the data.\n))?        - The current setting is displayed without change.\n=SMF\n)F Function -\n  The SMF subcommand specifies whether or not SMF records are to\n  be converted to eye-readable summary format or not.  It is only\n  of practical use if SMF records are being REVIEWed.  If SMF is\n  entered without operands the current SMF mode is switched to the\n  opposite SMF mode.  Note that activating SMF formatting\n  deactivates EREP formatting.\n)X Syntax -\n     SMF  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that SMF data should be interpreted.\n))OFF      - Specifies that SMF data should not be interpreted.\n=EREP\n)F Function -\n  The EREP subcommand specifies whether or not environmental\n  records (originally from SYS1.LOGREC) are to be converted to\n  eye-readable summary format or not.  It is only of practical\n  use if LOGREC records are being REVIEWed.  If EREP is entered\n  without operands the current EREP mode is switched to the\n  opposite EREP mode.  Note that activating EREP formatting\n  deactivates SMF formatting.\n)X Syntax -\n     EREP  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that EREP data should be interpreted.\n))OFF      - Specifies that EREP data should not be interpreted.\n=FORMAT=FMT\n)F Function -\n  The FORMAT subcommand causes REVIEW to format file data on the\n  screen according to the data structure and types specified in\n  Assembler DS and/or DC statements.  The \"ruler\" heading line above\n  the data is used to show the names of the visible data items, and\n  where room permits the starting column number of the item is shown\n  directly above the data item name.\n\n  The format of the actual file data remains unchanged when HEX ON\n  is active.  When HEX OFF is current, each data item is formatted\n  according to the data type in the DS or DC statement.  The main\n  data types are character, hexadecimal, decimal, and binary\n  integer.\n\n  The Assembler statements are read from the partitioned data set(s)\n  allocated to the REVFMTS file.  REVFMTS must be allocated before it\n  can be used by this subcommand.  The TSO subcommand may be useful in\n  helping to perform this allocation from within REVIEW.  The FMTVAR\n  subcommand can be used to override the data type of a specific data\n  item or variable in a dynamic fashion.\n\n  Note that for variable-length records, the record descriptor word\n  (RDW) is assumed to be present in the data structure source, even\n  though the contents of the RDW are not shown by REVIEW.\n\n  When using this subcommand (as opposed to the SMF subcommand) to\n  format SMF records, the following members of SYS1.MACLIB may be\n  useful, especially after a FINDSMF ALL subcommand has been issued:\n     IFASMFR  - type 0                   IAZSMF49 - type 49\n     IFASMFR1 - type 7                   IFASMFR5 - type 50\n     IFGSMF14 - type 14 and type 15      IAZSMF45 - type 52\n     IGGSMF17 - type 17                  IAZSMF45 - type 53\n     IFASMFR2 - type 20                  IAZSMF45 - type 54\n     IGESMF21 - type 21                  IAZSMF45 - type 55\n     IOSDSMFR - type 22                  IAZSMF45 - type 56\n     IAZSMF24 - type 24                  IAZSMF45 - type 57\n     IAZSMF25 - type 25                  IAZSMF45 - type 58\n     IAZSMF26 - type 26                  IDASMF62 - type 62\n     IFASMFI6 - type 36                  IGGSMF63 - type 63\n     IFASMFR4 - type 40                  IDASMF64 - type 64\n     IAZSMF43 - type 43                  IGGSMF67 - type 67\n     IAZSMF45 - type 45                  IGGSMF68 - type 68\n     IAZSMF47 - type 47                  IGGSMF69 - type 69\n     IAZSMF48 - type 48                  IFASMFR9 - type 80\n\n  When REVIEWing a VTOC, the VTOC entries can be formatted by\n  'FORMAT ON' even when no REVFMTS file allocation is present.\n)X Syntax -\n     FORMAT  'fmtname' / ON / OFF\n\n Alias    - FMT\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n)P 'fmtname' - Specifies the member name of the REVFMTS file which\n               is to be read for data structure information in the\n               form of Assembler DS and/or DC statements.  Once read\n               the format is held in memory until overlaid by a\n               subsequent FORMAT request or REVIEW terminates.\n               Optionally, the format name may be quoted.\n))ON         - Specifies that the in-storage format that was read\n               due to a previous FORMAT request is to be used\n               again to format the data display.\n))OFF        - Specifies that special formatting of file data is\n               to be suspended.\n=FMTVAR=FV\n)F Function -\n  The FMTVAR subcommand allows a user to override the data type\n  of a data item or variable in a data structure previously read\n  into memory by a FORMAT subcommand.  This is sometimes useful to\n  enhance the viewability of some items.\n)X Syntax -\n     FMTVAR  'varname'  'type'\n\n Alias    - FV\n Defaults - None.\n Required - 'varname' and 'type'\n)O Operands -\n)P 'varname' - Specifies the name of the data item or variable which\n               is to have its data type specified.  Note that data\n               items which have no name (because there was no label\n               in the defining Assembler statement) cannot have their\n               data type changed by this subcommand.\n)P 'type'    - Specifies the data type which is to now be used to\n               format the specified data item.  This operand must be\n               a single character.  Valid types are:\n\n               C - Characters.\n                   Can be translated to EBCDIC when ASCII is ON.\n                   Default for Assembler definition type C.\n\n               Z - Zoned decimal.\n                   Same as C but leading '0's are shown as blanks.\n                   Default for Assembler definition type Z.\n\n               X - Hexadecimal.\n                   Each byte is shown as two hexadecimal digits.\n                   Default for Assembler definition types\n                   A, D, E, L, Q, S, V, X, and Y.\n\n               P - Packed decimal.\n                   Each byte is shown as two hexadecimal digits.\n                   Leading zeros are shown as blanks.\n                   If the last four bits of the item are a valid\n                   packed decimal sign then it is shown as a\n                   blank for hex A, C, E, and F to denote positive,\n                   and as a '-' (minus sign) for hex B and D to\n                   denote negative.\n                   Default for Assembler definition type P.\n\n               I - Signed binary integer.\n                   The item is treated as a twos-complement binary\n                   integer and converted to decimal for display.\n                   A leading minus sign will be used when the first\n                   bit of the item is a '1' indicating a negative\n                   number.\n                   The maximum length supported is four (4) bytes.\n                   Default for Assembler definition types\n                   F and H when two or four bytes long.\n\n               U - Unsigned binary integer.\n                   The item is treated as a non-negative binary\n                   integer and converted to decimal for display.\n                   The maximum length supported is four (4) bytes.\n                   Default for Assembler definition types\n                   F and H when one or three bytes long.\n\n               B - Bits (binary digits).\n                   The item is treated as a bit string where each\n                   byte is shown as eight (8) binary digits.\n                   Consective bytes are separated by an underscore.\n                   Default for Assembler definition type B.\n=COLOR=COLOUR\n)F Function -\n  The COLOR subcommand specifies whether or not data is to be\n  displayed using 3270 extended highlighting and extended color,\n  and which color is to be used for actual data display.  Colors\n  for formatting mode, character mode and hexadecimal mode may be\n  independently selected.  This command may cause errors on some\n  terminals depending on terminal type and network definitions.\n  If no operands are entered then the color mode is switched to\n  the opposite mode.\n\n  The data display colors may be saved in the profile data set.\n)X Syntax -\n     COLOR  ON / OFF / #\n\n Alias    - COLOUR\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON      - Specifies that 3270 data stream extensions may be used.\n            This may be rejected if the terminal is known to not\n            support color or extended highlighting.\n))OFF     - Specifies that 3270 data stream extensions may not be used.\n))#       - Specifies the color to be used for actual data.\n\n            If specified when formatting is active then this color is\n            used when the record display is the result of formatting.\n\n            Otherwise, when record formatting is OFF:\n            If specified while in character mode then this color is\n            used in character mode.  If specified while in hexadecimal\n            mode then this color is used in hexadecimal mode.\n\n            If specified while a picture image is being displayed, then\n            a) the \"white\" pixels of a black-and-white image are shown\n               in this color, or\n            b) all non-black pixels of a color image displayed using\n               programmed symbols are shown in this color unless the\n               color number is 7 whereupon all colors are shown\n               correctly, or\n            c) the color number is used to control which color planes\n               GDDM will be requested to display.\n            The picture color is NOT saved in the profile data set,\n            and defaults to 7 (neutral).\n\n            # must be a single hexadecimal digit and may be rejected\n            if it is known that the color is not supported by the\n            terminal.  The possible colors and their codes are:\n               1 - Blue                9 - Deep blue\n               2 - Red                 A - Orange\n               3 - Pink                B - Purple\n               4 - Green               C - Pale green\n               5 - Turquoise           D - Pale turquoise\n               6 - Yellow              E - Grey\n               7 - Neutral             F - White\n                  (Codes 0 and 8 (Black) are not allowed.)\n                  (Codes 9 to F are only for 16-color terminals.)\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by\n  SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=SUBMIT=SUB=SB\n)F Function -\n  The SUBMIT subcommand invokes TSO SUBMIT for the file or member\n  being REVIEWed.  This subcommand is invalid unless the file is\n  sequential or partitioned, and has fixed length 80-byte records.\n  If the SB alias is used, the REVSB CLIST is invoked which prevents\n  line mode messages - the submission message is shown on the top line.\n)X Syntax -\n     SUBMIT\n\n Aliases  - SUB, SB\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=EQUATE=EQ\n)F Function -\n  The EQUATE subcommand is only available when browsing the virtual\n  storage of your address space.  It causes the symbol name to be\n  equated to a virtual storage address.  The symbol name can then\n  be used in subsequent LOCATE subcommands.\n\n  EQUATE commands specifying the names of modules in LPA, JPA, and\n  z/OS nucleus control sections will supersede the relevant automatic\n  equates.\n)X Syntax -\n     EQUATE 'symbol' 'address'\n\n Alias    - EQ\n Defaults - None.\n Required - 'symbol', 'address'\n\n Example:\n EQ TIOT 21C.%+C%\n)O Operands -\n)P 'symbol' -  Specifies a 1 to 8 character name with similar syntax\n               requirements to a job name.\n)P 'address' - Specifies a virtual storage address with similar syntax\n               requirements to addresses specified under the TEST\n               command of TSO.\n=EQUATE=EQ\n)F Function -\n  The DROP subcommand is only available when browsing the virtual\n  storage of your address space.  It removes the effect of a\n  previously issued EQUATE command.\n\n  If the symbol being dropped is a name of a module in LPA, JPA, or\n  a z/OS nucleus control section, then that module will subsequently\n  be identified by that symbol name.\n)X Syntax -\n     DROP   'symbol'\n\n Aliases  - None.\n Defaults - None.\n Required - 'symbol'\n)O Operands -\n)P 'symbol' -  Specifies a 1 to 8 character symbol name previously\n               used in an EQUATE subcommand.\n=LABEL\n)F Function -\n  LABEL is not a subcommand.  This HELP entry documents the use\n  of line labels.  For a similar function when browsing virtual\n  storage, see the EQUATE subcommand.\n\n  A label is assigned by entering the label name by itself in the\n  primary input area.  The label is then associated with the first or\n  top-most record on display.  The label can be used in a LIST or\n  LOCATE command to reposition the display back to the labelled record.\n\n  If a defined label name is reused to define a second record,\n  then it is no longer associated with its original record.\n\n  Multiple labels may be associated with a single record.  That is,\n  a record may have more than one label.\n)X Syntax -\n     .label\n\n  where .label is a character string which does not exceed 8 characters\n  in length, contains no imbedded blanks, and begins with a period.\n\n  Alphabetic characters in the name are folded to upper case before\n  they are processed, both when the label is assigned, and when the\n  label name is used as the operand of a LIST or LOCATE subcommand.\n\n  When the label is used to locate a record, the leading period may\n  be omitted as long as the rest of the label name is not made up of\n  numeric characters only.  That is, the period is required when it is\n  necessary to distinguish between a label name and a record number.\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the screen to the relative line\n  number entered, or to the line assigned to the specified label.\n\n   When browsing virtual storage, the operand can be used to specify\n  a storage address instead of a line number.  The symbol X can be\n  used to specify the current address.  Addressing indirection can be\n  used in a way similar to usage under TSO TEST.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'lineno'\n\n Examples of locating storage:\n L 200\n   - display line 200.\n L 21C.\n   - display storage at address 21C.\n L 21C.%\n   - display the current TCB which is pointed to by the word at 21C.\n L 21C.%+C%\n   - display your TIOT (Task I/O Table).\n L X-14\n   - display the data 20 bytes before the data being displayed now.\n L IEFBR14\n   - display storage at the entry point of LPA module IEFBR14.\n L REVIEW+1A\n   - display the date and time stamp in the REVIEW load module.\n L 21C%%+C%+10?\n   - display storage at the entry point of JPA module REVIEW\n     using PSA->TCB->PRB->CDE->E.P.\n)O Operands -\n)P 'lineno' -  Specifies the data which is to be positioned as\n               the first or top-most visible line on the screen.\n\n               The specification can take one of several forms:\n\n               - Relative (from the top of the file) record number\n                 specified as a decimal number.\n\n               - A previously assigned label.  Look at the HELP\n                 for LABEL for information about line labels.\n                 The leading period may be omitted if the rest\n                 of the label name contains at least 1 non-numeric.\n\n               - A virtual storage address when browsing virtual\n                 storage.  See examples under SYNTAX above.\n=NEWTOP\n)F Function -\n  The NEWTOP command allows the specification of an arbitrary\n  relative physical address to be considered as the top-of-data.\n  This is useful for viewing data beyond I/O errors and end-of-file\n  markers that would normally be encountered, for viewing the\n  contents of deleted PDS members, and for resynchronizing the\n  REVIEW session with a file that is currently being updated.\n  It is also useful for directly viewing data a long way from the\n  start of the file without reading all the preceding records.\n)X Syntax -\n     NEWTOP 'rel-addr'\n\n Aliases  - None.\n Defaults - 0\n Required - None.\n)O Operands -\n)P 'rel-addr' - a 1 to 6 hexadecimal digit number specifying a\n     relative physical address.  For disk files this specifies a\n     relative TTR.  For tape files this specifies a relative block\n     number.  A value of zero specifies that the real top-of-data\n     address is to be used and previously acquired end-of-file and\n     record location information is to be dropped.\n  ** Note that 0 is the only operand allowed when viewing VSAM\n     files, and in this case NEWTOP merely performs a CLOSE\n     followed by an OPEN to drop all pre-loaded buffers.\n  ** Also note that the subcommand sequence\n            HEX ON\n            RIGHT MAX\n            HEX OFF\n     can be used to display the relative physical address of each\n     logical record in NEWTOP operand format.  For spanned records\n     the address of the last segment is shown.\n=APPEND=ADD=TACKON\n)F Function -\n  The APPEND subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The APPEND subcommand\n  performs the same processing as the COPYOUT subcommand except that\n  the output file is opened for EXTEND, so that data is appended to\n  any data already residing in the output file.\n\n  ** Note that PDS members cannot be extended.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity.  Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     APPEND 'record-count'\n\n Aliases  - ADD, TACKON\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=COPYOUT=CUTOFF=CUT=CUTOVER\n)F Function -\n  The COPYOUT subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The COPYOUT subcommand\n  performs the same processing as the APPEND subcommand except that\n  the output file is opened for OUTPUT, so that data already residing\n  in the output file is overwritten and lost.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity. Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     COPYOUT 'record-count'\n\n Aliases  - CUTOFF, CUT, CUTOVER\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=RTF\n)F Function -\n  The RTF subcommand performs the same function as COPYOUT\n  but only processes print files.  The output data is a Rich Text\n  Format (RTF) file containing pagination data from carriage control\n  characters, and print coloring information assigned by REVIEW.\n\n  The color information in the RTF file will broadly match that\n  shown by REVIEW on the screen.  Colors are determined by message\n  identifier recognition and by Assembler listing syntax highlighting.\n\n  A file being REVIEWed is deemed a print file if it is job output\n  being processed by REVOUT, or if it has A or M carriage control\n  in the record format.  Further, the maximum logical record length\n  must be less than 256.\n\n  The output file is suitable for a text transfer to a distributed\n  platform system where it can be transformed into other file types\n  such as Adobe's Portable Document Format (PDF).\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.  Consult the information for COPYOUT above for\n  further details.  ** Note that there is no RTF version of APPEND.\n)X Syntax -\n     RTF 'record-count'\n\n Aliases  - None.\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=PICDATA\n)F Function -\n  The PICDATA subcommand causes REVIEW to write fixed-length\n  80-byte records to a specified data set.  The records are Assembler\n  source statements containing data necessary to recreate the image\n  which is currently being displayed by REVIEW.  The user will be\n  prompted to supply a data set name.\n\n  This subcommand is only valid when REVIEW can display the image\n  contained in a picture file.  Its use provides a mechanism for\n  exporting an image into other application source code.\n\n  If REVIEW is displaying the picture with programmed symbols,\n  the file will contain the data necessary to load the symbols\n  (18 bytes per format type-1 symbol) plus data regarding symbol\n  placement in the picture.\n\n  If REVIEW issues calls to GDDM to display the picture, the\n  data will contain the bitmaps passed to GDDM via GSIMG calls.\n\n  Data for blue, red and green planes will be written for color\n  images, whereas only one plane is used for black-and-white images.\n)X Syntax -\n     PICDATA\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SETUNZ\n)F Function -\n  The SETUNZ subcommand allows the overriding of the data type\n  and the record length of data produced by the unzip process.\n  Normally, the data type (binary, ASCII text or EBCDIC text) is\n  derived from the zip archive directory entry for the file chosen\n  for unzipping.\n\n  For binary files variable-length records are used, and the\n  default record data length is the number of columns of the TSO\n  terminal screen, unless the total byte count is a multiple of 80,\n  in which case fixed-length 80-byte records are extracted.\n\n  For text records, variable-length records are used and the\n  default maximum record length is 4092.  ASCII text records are\n  terminated by ASCII LF or ASCII CRLF, and EBCDIC text records are\n  terminated by EBCDIC NL.  These control codes are discarded after\n  triggering a new record, and are not actually output as data bytes.\n\n  Some versions of the MINIZIP program can store MVS data set\n  attributes in the comment area of the file's central file directory\n  entry.  When these comments are detected by REVIEW, they are used\n  instead of the defaults described above, unless overridden by\n  values explicitly set using the SETUNZ subcommand.\n\n  When MVS fixed-length records are indicated in the zip directory,\n  EBCDIC text is treated as binary data.\n\n  After any operands have been processed, the active settings are\n  reported in the top screen line message area.\n)X Syntax -\n     SETUNZ  'data-type'  'record-length'\n\n Aliases  - None.\n Defaults - None - report the currrent settings without change.\n Required - None.\n)O Operands -\n Note: The operands may appear in any order.\n)P 'data-type'\n              - Specifies the type of data being unzipped.\n                Only the first character of the operand is examined.\n                The allowed values are:\n              O for OFF meaning no data-type override is active.\n              B for BINARY meaning the data is a stream of bytes\n                which is not translated or otherwise modified.\n                Note that extra nulls may be output to fill the\n                last record after the end of data.\n              A for ASCII text which is translated to EBCDIC.\n              E for EBCDIC text which is not translated.\n)P 'record-length'\n              - Specifies a decimal number in the 0 to 32767 range.\n                The override is cleared by a specification of 0.\n                Specifying a non-zero value less than 5 for text\n                files may cause an unzip process to abend your\n                whole REVIEW/RFE session.\n=BROWSE\n)F Function -\n  The BROWSE subcommand requests ISPF to BROWSE the data set or\n  member currently being REVIEWed.  This subcommand is only valid\n  when the current data set is an MVS DASD data set.  It is not\n  valid for a UNIX file or a data set being treated as a ZIP file.\n  The ISPF request will only succeed in an IBM ISPF environment.\n)X Syntax -\n     BROWSE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EDIT\n)F Function -\n  The EDIT subcommand requests ISPF to EDIT the data set or member\n  currently being REVIEWed.  This subcommand is only valid when the\n  current data set is an MVS DASD data set.  It is not valid for an\n  UNIX file or a data set being treated as a ZIP file.  The ISPF\n  request will only succeed in an IBM ISPF environment.  If ISPF\n  Edit cannot be invoked then REVEDIT Edit will be used instead.\n)X Syntax -\n     EDIT\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=VIEW\n)F Function -\n  The VIEW subcommand requests ISPF to VIEW the data set or member\n  currently being REVIEWed.  This subcommand is only valid when the\n  current data set is an MVS DASD data set.  It is not valid for an\n  UNIX file or a data set being treated as a ZIP file.  The ISPF\n  request will only succeed in an IBM ISPF environment.  If ISPF\n  View cannot be invoked then REVEDIT View will be used instead.\n)X Syntax -\n     VIEW\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/FSHELP user profile to disk.\n  The REVIEW/FSHELP user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the REVIEW command, or, if in member\n  selection mode, returns to the member selection list.  The member\n  selection list may be bypassed with the EXIT subcommand.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the REVIEW command, bypassing\n  the member selection list.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVLEV": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x008\\x01\\x10\\x07O\\x01\\x19\\x02\\x7f#2\\x02\\xff\\x01O\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2010-03-15T00:00:00", "modifydate": "2019-01-27T23:32:38", "lines": 767, "newlines": 335, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVLEV' RELEASE 48.5    JANUARY 2019\n)F Function -\n  REVLEV is a processing option of RFE (REVIEW Front End) with the\n  main function of presenting a list of data sets which then allows\n  the easy selection of data sets for processing by utility functions.\n\n  The initial panel allows the specification of the data set name\n  prefix and a volume serial number.\n\n  If the volume serial number field is left blank then the catalog\n  is used as the source of data set names to list.\n\n  If a volume serial number is supplied the data sets on that volume\n  are listed, subject to filtering by the specified data set name\n  prefix.  If no data set name prefix is specified then all data sets\n  on the volume are listed.\n\n  When a data set name list is presented, each detail line has a\n  single character selection code input field, the name of the data\n  set, and several attributes of the data set.\n\n  Initially the list is sorted by data set name.  Any of the display\n  columns can be used to sort the list, either in ascending or\n  descending order.  Each sortable attribute has a default sort\n  order.  For example, SORT NAME has a default sort order of\n  ascending, as does SORT VOLUME, but SORT AL and SORT US have a\n  default sort order of descending.\n\n  The input selection code field can be used to trigger an action\n  upon the data set listed on that display line.\n\n\n  Volume-specific extras\n  ======================\n\n  When a volume serial number is supplied, the resultant list of\n  data sets is read from the Volume Table Of Contents (VTOC) of\n  that volume.  RFE also issues a Sense-Id I/O operation to the\n  volume and the type of device and control unit returned by that\n  operation are shown at the top left corner of the screen.\n\n  For terminals with suitable graphics facilities, and when the\n  geometry of the disk volume suits, a disk space usage plot will\n  be displayed after the end of the data set list.  Each track is\n  represented by a single 3270 pixel.  The top row of pixels\n  represents track or head 0 of each cylinder, the second pixel\n  row represents track or head 1 of each cylinder, and so on.\n  The left-most column of pixels in the plot represents cylinder 0.\n\n  The colors used in the volume space map plot are:\n\n  White     - The volume label (track 0) and space described by\n              the format-4 DSCB (which is the VTOC).\n\n  Green     - Space described by a format-1 DSCB for non-VSAM data\n              sets which are not CVOLs, or DSORG=DA or DSORG=IS.\n\n  Pink      - Space described by a format-1 DSCB for non-VSAM data\n              sets which are CVOLs, or DSORG=DA or DSORG=IS.\n\n  Turquoise - Space described by a format-1 DSCB for VSAM data sets.\n\n  Yellow    - Space described by a format-3 DSCB.  Such space will\n              include secondary extents from extent 4 onwards.  The\n              first 3 extents of a data set are described by a\n              format-1 DSCB.\n\n  Blue      - Space described by a format-5 DSCB, which is free space.\n              This will only be visible if the VTOC is not indexed.\n\n  Red       - Any space which was plotted more than once.  Such\n              space is actually in more than one extent and any\n              such space indicates a corrupt VTOC.  Also, if a\n              data set name prefix was specified, then all extents\n              of all listed data sets will be shown in red.\n)X Syntax -\n         REVLEV\n\n  Required - None.\n  Defaults - None.\n  Aliases  - None.\n)O Operands - None.\n)S Subcommands -\n ------------------------ SELECTION CODES -----------------------------\n\n Listed data sets can be processed by the following selection codes:\n\n A - ALLOCATE LIKE - Allocate a new data set with some attributes\n     of the selected data set already primed in the data set\n     creation specification panel.\n\n B - BROWSE - Look at the contents of the data set using the REVIEW\n     data set browser.\n\n C - CATALOG - Create a catalog entry for an uncataloged data set.\n\n D - DELETE - Delete the data set after a confirmation panel is shown.\n\n  ** NOTE: DISP=(,DELETE) is used to carry out the DELETE function.\n     If the data still exists after being dynamically deallocated,\n     then the D action is flagged as being unsuccessful, but no\n     other feedback is given.  Possible reasons include the data\n     set's retention period has not expired, and the data set's\n     name is not entirely comprised of valid qualifiers.\n\n E - EDIT - Update the data set with the REVEDIT editor.\n\n I - INFORMATION - Display details about the data set including PDS\n     directory information.\n\n L - LISTCAT - Display the catalog entry details as reported by\n     the LISTCAT command.\n\n M - MEMLIST - Display the member list of the PDS or PDSE.\n\n R - RENAME - Change the name of the selected data set.\n\n S - SHORT INFORMATION - same as the I selection code except that\n     the data set is not opened so PDS directory information will\n     not be shown and the last referenced date will not be changed.\n\n U - UNCATALOG - Delete the catalog entry of the selected data set\n     without deleting the actual data set.\n\n V - VIEW - Look at the contents of the data set using the REVEDIT\n     editor in View mode, which means changes cannot be saved.\n\n Z - COMPRESS - Reclaim unused space in a PDS by a CONDENSE process\n     which causes the contents of the PDS to be copied to a holding\n     sequential data set (usually called 'userid.CONDENSE'), the PDS\n     to be reset to empty, and the contents written back to the PDS\n     from the holding data set.\n\n  ** NOTE: If the write-back phase does not complete successfully,\n     the holding data set is not deleted.  Its contents can be used\n     as input to the REVLPDS program to reconstruct the PDS.  The\n     necessary DDs for PGM=REVLPDS are SYSUT1 for the sequential\n     input and SYSUT2 for the partitioned output.\n\n ------------------------ DISPLAY COLUMNS -----------------------------\n\n Data sets are listed with the following information columns:\n\n DATA-SET-NAME - The name of the data set or catalog entry.\n\n VOLUME - The serial number of the first or only volume where\n          the data set resides.  This will be followed by a\n          plus sign '+' for multi-volume data sets.  When the\n          data set list is made of VTOC entries, the volume\n          will be followed by a not sign ('\u00ac') when the listed\n          data set is not cataloged.\n\n ALTRK  - The number of tracks allocated to the data set on this\n          volume.  For cataloged multi-volume data sets, this is\n          the total number of tracks allocated on all volumes.\n\n USTRK  - The total number of tracks from the start of the data\n          set used to hold the data.  This data item is only\n          maintained by the system for sequential and PDS\n          (excluding PDSE) data sets.\n\n ORG    - The data set organization.  Possible values are:\n            CAT - Formatted OS catalog - known as SYSCTLG or CVOL\n            DA  - Direct Access\n            DAU - Direct Access Unmovable\n            IS  - Indexed Sequential\n            PS  - Physical Sequential - DSNTYPE=BASIC\n            PSE - Physical Sequential Extended Format - may be\n                  striped and/or compressed\n            PSL - Physical Sequential Large - can be larger than\n                  65536 tracks - DSNTYPE=LARGE\n            PSU - Physical Sequential Unmovable\n            PO  - Partitioned Organization - DSNTYPE=PDS\n            POE - Partitioned Organization Extended - PDSE -\n                  DSNTYPE=LIBRARY\n            POU - Partitioned Organization Unmovable\n            VS  - VSAM\n          (DSNTYPE is a z/OS JCL parameter.)\n\n FRMT   - The record format of the data set.\n\n %      - The fullness percentage of the data set.  This is only\n          meaningful for sequential and PDS (excluding PDSE) data sets.\n\n XT     - The number of extents of disk space owned by the data set.\n\n LRECL  - The maximum length of a logical record allowed in the\n          data set.\n\n BLKSZ  - The maximum length of a physical block allowed in the\n          data set.\n\n REFDT  - The date that the data set was last opened, or perhaps\n          closed for some versions of the operating system.\n          This field will be blank for data sets that have never\n          been opened.\n\n CREDT  - The date that the data set was created.\n\n          An 'R' displayed between the CREDT and EXPDT columns\n          indicates that the RACF protection bit has been set\n          in data set's VTOC entry.\n\n EXPDT  - If non-blank, this is the expiration date set in the\n          VTOC (not catalog) entry.  Attempting an update before\n          this date is passed will cause a WTOR to be issued to\n          seek permission from the system operator.  The PURGE\n          keyword is needed on the DELETE command to delete data\n          sets that have not yet passed their expiration date.\n\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all RFE options:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------------------ LOCAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in the data set filter entry panel:\n\n   ALLOC   - Allocate a new data set.\n   A       - Same as 'ALLOC'.\n\n ------------------------ LOCAL SUBCOMMANDS ---------------------------\n\n These subcommands are available when a data set list is displayed:\n\n   UP      - Scroll upwards a specified number of display lines.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll downwards a specified number of display lines.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first display line.\n   BOTTOM  - Scroll down to the last display line.\n   BOT     - Same as 'BOTTOM'.\n   LEFT    - Scroll to the show the left-most information columns.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the show the right-most information columns.\n   '>'     - Same as 'RIGHT'.\n   FIND    - Search for the specified data set name substring.\n   F       - Same as 'FIND'.\n   RFIND   - Repeat the previous FIND.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Reposition the display to the specified line number,\n             or sort field prefix if non-numeric.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   SEARCH  - Request a multi-data set search.\n   SRCHFOR - Same as 'SEARCH'.\n   SORT    - Sort the display lines based on the content of a\n             particular column.\n   MEMBER  - Search partitioned data sets (PDS and PDSE) in the data\n             set list for any members with names which match the\n             specified member name mask.\n   MEM     - Same as 'MEMBER'.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/FSHELP user profile to disk.\n  The REVIEW/FSHELP user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the REVLEV command.  If REVLEV is\n  invoked as RFE option 3.4, then END will exit back to the previous\n  menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the REVLEV command.  If REVLEV is\n  invoked as RFE option 3.4, then =X will terminate the logical\n  screen session.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the display to a data set which\n  contains the search argument string in its name.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The entire first operand is treated as the search argument,\n       so, in general, do NOT use quotes.\n)X Syntax -\n     FIND 'string'   FIRST / NEXT / PREV / LAST\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the string to look for in data set names.\n))FIRST   - Search forward from the top of the data set list.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the data set list.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND operation.\n  No operands are allowed.  It is expected that RFIND will be used\n  as the default meaning of a PFK such as PF5 or PF17.\n  Note: RFIND in the forward direction skips the current top line.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=SEARCH=SRCHFOR\n)F   The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-data set search can be specified.\n  The facilities of the REVIEW FIND subcommand are used.  Searched\n  data sets are flagged with the $ character to indicate the most\n  action performed.  Only data sets where matching data was found\n  will be shown in high intensity or white.\n)X Syntax -\n     SEARCH\n ALIASES  - SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand clears all pending line commands, all\n  action error status indicators, and all last-action-performed\n  indicators.\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TOP\n)F   The TOP subcommand requests that the first entry in the data\n  set list is show as the first data set listed on the screen.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F   The BOTTOM subcommand requests that the last part of the data\n  set list is shown on the screen.  When the list is too long to be\n  shown in its entirety, the end-of-list marker line is shown on\n  the last line of the screen, and the last data set in the list is\n  shown on the second last line of the screen.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand ensures that the left-most display items after\n  the data set name are visible.  This is the initial left/right\n  display location.  If the screen is sufficiently wide the LEFT and\n  RIGHT subcommands may not result in any change to the display.\n)X Syntax -\n     LEFT\n\n Aliases  - LEFT, <\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand ensures that the right-most display items\n  are visible.  If the screen is sufficiently wide the LEFT and\n  RIGHT subcommands may not result in any change to the display.\n)X Syntax -\n     RIGHT\n\n Aliases  - RIGHT, >\n Defaults - None.\n Required - None.\n)O Operands - None.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the data set list so that the top\n  detail display line has the first or only occurrence of the locate\n  data.  The locate data specified may be a display line number, or\n  non-numeric data which is matched with the sort field.\n\n  Example 1: When a list of more than 29 data sets is shown,\n                LOC 30\n             will scroll the display to show the thirtieth line first.\n\n  Example 2: When a list of SYS1 data sets is initially shown,\n                L SYS1.H\n             may scroll the display to show SYS1.HELP first.\n\n  Example 3: After SORT F D is issued for a data set list,\n                LIST F\n             scrolls the display to show the first data set in the\n             list that has fixed-length records.\n)X Syntax -\n     LIST 'locdata'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - locdata\n)O Operands -\n)P 'locdata' - specifes how the top detail display line is to be\n               located.  The data can be numeric or non-numeric.\n\n  For numeric data, the operand specifies the line number to be\n  positioned as the top visible detail line.  When 0 (zero) is\n  specified, the TOP subcommand action is performed.\n\n  For non-numeric data, the operand is deemed to be a string which\n  is compared to the start of the sort column contents.  The first\n  display line which does not compare low with the operand is\n  shown as the top detail display line.\n=SORT\n)F Function -\n  The SORT subcommand causes the displayed data set list to be\n  reordered according to the specified criterion.  Underscored\n  column headings may be selected as the sorting criterion without\n  typing a SORT command by means of cursor placement.\n\n  Cursor-selected sorts will use the default sort order (either\n  ascending or descending) for that column.  The first operand must\n  always specify the display column to be used as the sort field.  A\n  second optional operand may specify one of the two sort orders.\n\n  Every column is a valid sort field, even if the screen is not wide\n  enough to show all columns.  When wide screens are not used, the\n  number of omitted columns depends on the length of the longest\n  data set name listed.\n)X Syntax -\n     SORT  'sort-field'  'sort-order'\n\n Aliases  - None.\n Defaults - D (for DATA-SET-NAME)\n Required - None.\n)O Operands -\n)P 'sort-field' - The name of the display column.\n    Only the first character of the operand is examined.\n      Valid sort field names are:\n  A - default sort order D - allocated number of tracks\n  B - default sort order A - physical block size\n  C - default sort order D - creation date\n  D - default sort order A - data set name - has an alias of N\n  E - default sort order D - expiration date\n  F - default sort order A - record format\n  L - default sort order A - logical record length\n  O - default sort order A - organization\n  P - default sort order D - percent used - has an alias of %\n  R - default sort order D - last-referenced date\n  U - default sort order D - used number of tracks\n  V - default sort order A - volume serial number\n  X - default sort order D - number of extents\n)P 'sort-order' - The sort order which is either A or D.\n    Only the first character of the operand is examined.\n      Valid sort orders are:\n  A - ascending\n  D - descending\n=MEMBER=MEM\n)F Function -\n  The MEMBER subcommand causes partitioned data sets in the list to\n  be searched for members with names matching the mask specified as\n  the only operand.\n\n  Data sets with matching member names are highlighted in white or\n  high intensity, while other data sets are unhighlighted.\n\n  The operation begins with a RESET action, so any residual last\n  command indicators are cleared.\n\n  All PDS and PDSE data sets in the list are eligible, and are given\n  a last command indicator of an asterisk, which is shown in red if\n  the data set could not be successfully accessed.  Non-partitioned\n  data sets are not affected by this command.\n\n  Internally, the processing of a PDS or PDSE is terminated when the\n  first match is found, or the end of the directory is reached.\n\n  The command can process requests for a specific member, or for a\n  generic match.\n\n Examples -\n  MEM *ABC*  - look for member names containing the string 'ABC'.\n  MEM ABC*   - look for member names starting with 'ABC'.\n  MEM *ABC   - look for member names ending with 'ABC'.\n  MEM %ABC*  - look for member names with 'ABC' as the second through\n               fourth characters.\n  MEM %ABC%* - look for member names with 'ABC' as the second through\n               fourth characters which are at least 5 characters long.\n  MEM A*BC   - this will match, for example, ABC, AABC, ABBC and AXBC.\n)X Syntax -\n     MEMBER  'member-name-mask'\n\n Aliases  - MEM\n Defaults - None.\n Required - 'member-name-mask'\n)O Operands -\n)P 'member-name-mask' - a mask to filter member names.  A single\n    string of up to 8 non-blank characters must be specified.\n    Alphabetics will be upper-cased.  Generic masking characters\n    are an asterisk to match zero or more non-blanks, and a percent\n    sign to match any single non-blank character.\n\n    Note that any occurrence of an asterisk-asterisk ('**') or an\n    asterisk-percent ('*%') in the mask will be rejected as invalid.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVOUT": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00\\x03\\x01\\t\\x01\\x8f\\x01\\x18#\\x1f\\x17(\\x01\\xc6\\x01?\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2009-01-18T00:00:00", "modifydate": "2018-08-19T17:28:03", "lines": 454, "newlines": 319, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVOUT' RELEASE 48.3     AUGUST 2018\n)F Function -\n  The REVOUT command gives access to REVIEW's job status display.\n  REVOUT uses the TSO FIB commands to display the status of jobs\n  and display the contents of held SYSOUT.\n\n  REVOUT facilities may also be accessed from RFE option 3.8.\n\n  Jobs are listed in the order returned by the STATUS TSO command.\n  The user can process listed jobs by entering selection codes.\n  REVOUT will use the OUTPUT and CANCEL TSO commands to carry out\n  the requested action(s).\n\n  REVOUT requires that the REVOUTJB CLIST is installed for implicit\n  command execution.\n\n  REVIEW is used to browse held SYSOUT.  Browsed job output may be\n  colored by REVIEW depending on message identifier recognition\n  and Assembler listing syntax highlighting.\n\n  Under MVS 3.8 systems running JES2, the STATUS command is not used\n  but rather the JES2 checkpoint and SPOOL data sets are dynamically\n  allocated and read directly.\n\n  (Note this point for security administration purposes.)\n\n  In this MVS 3.8 with JES2 case, 'jobname' may also be a job name\n  prefix, where the supplied job name characters are matched and\n  all subsequent characters are wildcarded.  A single asterisk may\n  be specified to select all jobs.  Also, spooled output from jobs\n  without held SYSOUT is accessed by directly reading the SPOOL.\n  Held SYSOUT is also accessed directly from the SPOOL unless the\n  FIB ON setting is active.\n)X Syntax -\n         REVOUT  'jobname'\n\n  Required - None.\n\n  Defaults - Default STATUS command search when no operand is used.\n\n  Aliases  - None.\n)O Operands -\n)P 'jobname' - The job name argument passed to the STATUS TSO command.\n\n  Note that for MVS 3.8 systems running JES2, this operand can also\n  be a job name prefix, where the supplied job name characters are\n  matched and all subsequent characters are wildcarded.  A single\n  asterisk may be specified to select all jobs.\n)S Subcommands -\n ------------------------ GLOBAL SUBCOMMANDS ------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------------------ REVOUT SUBCOMMANDS ------------------------\n\n These subcommands are available while REVIEWing file data:\n\n   STATUS  - Change the job name search argument.\n   ST      - Same as 'STATUS'.\n   LIST    - Display the specified line number.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   INPUT   - MVS 3.8 JES2 users only - look at non-SYSOUT data sets.\n   FIB     - MVS 3.8 JES2 users only - control TSO OUTPUT command use.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or record (on this volume).\n   BOTTOM  - Scroll down to the last line or record.\n   BOT     - Same as 'BOTTOM'.\n\n\n ---------------------- REVOUT SELECTION CODES ----------------------\n\n These selection codes can be used in the S column to process a job:\n\n   S       - Browse the job's held SYSOUT.  REVIEW will be used.\n             Only held SYSOUT can be viewed unless running on an\n             MVS 3.8 system with JES2.\n\n   /       - Same as 'S'.\n\n   C       - Cancel a job.  Started tasks and TSO sessions cannot\n             be cancelled.\n\n   P       - Purge a job.  For started tasks and TSO sessions a\n             request will be made to delete any held SYSOUT instead.\n\n   O       - Release held SYSOUT for printing.  A new SYSOUT class\n             can be specified simultaneously in the Q column.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVOUT' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVOUT' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the screen to the first line of the\n  job list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the screen to the last line of the\n  job list.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input\n  strings and text implied by PFK usage are not recallable.  The\n  first command recalled is the most recently typed in command.\n  Consecutive RECALL commands cause increasingly older commands to\n  be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by\n  SWAP.\n)X Syntax -\n     SWAP    LIST  /  NEXT  /  PREV  /  #  /  'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the screen to the relative line\n  number entered.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - lineno\n)O Operands -\n)P 'lineno' -  Specifies the relative line number to which the screen\n               is to be positioned.\n=FIB\n)F Function -\n  The FIB command only has any effect in an MVS 3.8 JES2 environment.\n  It is not present in the z/OS version of REVOUT.  The FIB setting\n  controls whether the TSO OUTPUT command will be used to retrieve\n  held SYSOUT or direct I/O to the SPOOL is used instead.  The FIB\n  setting is not saved in the user's profile because it is assumed\n  that everyone would prefer the default setting of FIB OFF.\n)X Syntax -\n     FIB    ON  /  OFF  /  ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON  - The OUTPUT FIB command will be used to retrieve held SYSOUT.\n))OFF - The OUTPUT FIB command will not be invoked.\n))?   - Display the current setting without changing it.\n=INPUT\n)F Function -\n  The INPUT command only has any effect in an MVS 3.8 JES2 environ-\n  ment.  It is not present in the z/OS version of REVOUT.  The INPUT\n  setting controls whether the SPOOL data sets selected for browsing\n  are restricted to SYSOUT data sets or not.\n)X Syntax -\n     INPUT    ON  /  OFF  /  ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON  - Non-SYSOUT SPOOL data sets will be browsed as well as SYSOUT.\n))OFF - Only SYSOUT data sets will be selected for browsing.\n))?   - Display the current setting without changing it.\n=STATUS=ST\n)F Function -\n  The STATUS subcommand specifies the job name to search for.\n)X Syntax -\n     STATUS 'jobname'\n\n Alias    - ST\n Defaults - Default STATUS TSO command search when no operand is used.\n Required - None.\n)O Operands -\n)P 'jobname' - The job name argument passed to the STATUS TSO command.\n\n  Under MVS 3.8 systems running JES2, the STATUS command is not used\n  but rather the JES2 checkpoint and SPOOL data sets are dynamically\n  allocated and read directly.\n\n  (Note this point for security administration purposes.)\n\n  In this MVS 3.8 with JES2 case, 'jobname' may also be a job name\n  prefix, where the supplied job name characters are matched and\n  all subsequent characters are wildcarded.  A single asterisk may\n  be specified to select all jobs.  Also, spooled output from jobs\n  without held SYSOUT is accessed by directly reading the SPOOL.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand terminates the REVOUT command.  Further,\n  the profile data is marked as unchanged so any profile updates\n  such as new PFK assignments will be discarded.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the REVOUT command.  If REVOUT is\n  invoked as RFE option 3.8, then END will exit back to the previous\n  menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the REVOUT command.  If REVOUT is\n  invoked as RFE option 3.8, then =X will terminate the logical\n  screen session.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVPDS": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x008\\x01\\x04\\x12?\\x01\\x19\\x02\\x7f#\\x12\\x03&\\x03\\xb1\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2004-05-02T00:00:00", "modifydate": "2019-01-27T23:12:38", "lines": 806, "newlines": 945, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVPDS' RELEASE 48.5    JANUARY 2019\n)F Function -\n  REVPDS is not a TSO command.\n\n  This HELP member describes the subcommands available when REVIEW\n  is displaying the member list of a single PDS, a single data PDSE\n  (as opposed to a program object PDSE), or a file of concatenated\n  PDS and/or PDSE data sets.\n\n  A green asterisk is displayed immediately after the member name\n  when a non-program member is an alias.  Alias program members have\n  a their real name displayed in the ALIAS-OF column.\n\n  An equals sign is displayed between the member's TTR and the ISPF\n  version when the member is flagged as being managed by SCLM.\n\n)X Syntax -\n         REVIEW 'partitioned file specification'\n\n  Aliases  - REV, REVED\n)O Operands -\n   'partitioned file specification' should not include a member name.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------ REVIEW PARTITIONED MEMBER LIST SUBCOMMANDS ------------\n\n These subcommands are available while processing the member list\n of a partitioned file:\n\n   BROWSE  - Browse a member with ISPF Browse.\n   B       - Same as 'BROWSE'.\n   DELINK  - Create object deck(s) from load module(s).\n   DL      - Same as 'DELINK'.\n   EDIT    - Edit a member with ISPF Edit.\n   E       - Same as 'EDIT'.\n   FIND    - Same as 'SEARCH'.\n   F       - Same as 'SEARCH'.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Display the specified member's entry.\n   LOCATE  - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   L       - Same as 'LIST'.\n   OFFLOAD - Unload members to sequential output.\n   OFF     - Same as 'OFFLOAD'.\n   PDSLOAD - Recreate members from sequential input.\n   PDS     - Same as 'PDSLOAD'.\n   REFRESH - Reread the directory entries and update the member list.\n   REF     - Same as 'REFRESH'.\n   RESET   - Untag all member display entries.\n   RES     - Same as 'RESET'.\n   RFIND   - Position the display to the next tagged member entry,\n             or if no entries are tagged report the number of\n             directory blocks that were read.\n   SEARCH  - Request a multi-member search.\n   SRCHFOR - Same as 'SEARCH'.\n   SELECT  - Browse a member with REVIEW.\n   SEL     - Same as 'SELECT'.\n   S       - Same as 'SELECT'.\n   SEQLOAD - Sequentialize member contents.\n   SEQ     - Same as 'SEQLOAD'.\n   SORT    - Sort the display order of member entries.\n   MEMBER  - Search partitioned data sets (PDS and PDSE) in the data\n             set list for any members with names which match the\n             specified member name mask.\n   MEM     - Same as 'MEMBER'.\n   PATTERN - Search partitioned data sets (PDS and PDSE) in the data\n             set list for any members with names which contain the\n             specified string.\n   PAT     - Same as 'PATTERN'.\n   TAGFLIP - Toggle the tag status of all member entries.\n   TF      - Same as 'TAGFLIP'.\n   UPDATE  - Edit a member with REVEDIT.\n   U       - Same as 'UPDATE'.\n   VIEW    - View a member with ISPF View.\n   V       - Same as 'VIEW'.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or entry.\n   BOTTOM  - Scroll down to the last line or entry.\n   BOT     - Same as 'BOTTOM'.\n\n -------------------- MEMBER LIST SELECTION CODES --------------------\n\n These selection codes can be used to select a member entry for\n processing from a directory member list display:\n\n   S       - Selection code for selecting a member to be REVIEWed.\n\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field containing a period but no character is typed.\n\n             With the 'REVED' TSO command selecting a PDS member\n             with 'S' specifies that the member should be edited\n             with REVEDIT.\n\n   E       - Selection code for selecting a member to be edited.\n             In an ISPF environment ISPF Edit is used;\n             otherwise REVEDIT is used.\n\n   B       - Selection code for selecting a member to be browsed.\n             In an ISPF environment ISPF Browse is used;\n             otherwise REVIEW is used.\n\n   V       - Selection code for selecting a member to be viewed.\n             In an ISPF environment ISPF View is used;\n             otherwise REVEDIT is used in VIEW mode.\n\n   U       - Selection code for selecting a member to be edited.\n             REVEDIT is used.  REVEDIT will not process members\n             with an undefined record format, or members allowed\n             to have spanned records.\n\n   D       - Selection code for deleting a member from an\n             unconcatenated PDS (not a PDSE) such that it can be\n             restored by the 'R' selection code.\n\n   N       - Selection code for renaming a member from an\n             unconcatenated PDS or data PDSE.  You will be\n             prompted for the new name.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity in the entry\n             list.  If any members are tagged, then only tagged\n             members are processed during offload (see OFFLOAD and\n             SEQLOAD), delink (see DELINK) and search (see SEARCH)\n             operations.  Further, tagging an entry may be useful for\n             display control purposes when the entry list is large as\n             RFIND can be used to locate the next tagged entry.  All\n             tags can be cleared by REFRESH and RESET.\n\n   R       - Selection code for restoring a deleted member and for\n             resetting the tag status of an entry.  All tags can be\n             cleared by REFRESH and RESET.  REFRESH will also clear\n             display entries for deleted members meaning that they\n             cannot be restored by the R selection code.\n\n   H       - Selection code for displaying the history of a program.\n             The Binder dialog API is used to extract identification\n             record (IDR) data which contains compile, link edit and\n             zap timestamped information.\n\n             Under MVS/370, the HISTORY subcommand of the PDS command\n             is used to produce the displayed output.\n\n   M       - Selection code for displaying the module map of a program.\n             The Binder dialog API is used to extract ESD class data\n             for load modules and compatible program objects, or MAP\n             class data from non-migratable program objects.\n\n             Under MVS/370, the MAP subcommand of the PDS command\n             is used to produce the displayed output.\n\n   /       - Selection code for selecting a member to be REVIEWed\n             as if the 'DATA' operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents.  This selection code performs the same function\n             as the 'S' selection code except that the DATA operand is\n             deemed to have been specified.  This will prevent REVIEW\n             from attempting to interpret data content such as\n             pictures and ZIP directories.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=SEARCH=FIND=F=SRCHFOR\n)F   The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-member search can be specified.\n  The facilities of the REVIEW FIND subcommand are used, and searched\n  members are tagged when a match is found and untagged when no match\n  is found.  If any members are tagged then only tagged members are\n  searched.\n)X Syntax -\n     SEARCH\n ALIASES  - FIND, F, SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RFIND=IFIND\n)F   The RFIND subcommand performs one of two functions depending on\n  whether any member display entries are currently tagged or not.\n\n  If no members are tagged then RFIND reports the number of PDS\n  directory blocks that were read.  If this read activity was not\n  interrupted by the user the reported number represents the number\n  of directory blocks which are used in the PDS, or in all PDSs in\n  a concatenated file.\n\n  If one or more members are tagged then RFIND positions the next\n  tagged entry at the top of the display.  If the display is currently\n  positioned at or past the last tagged entry then the display is\n  positioned at the end-of-list entry.  If the display is currently\n  positioned at the end-of-list entry then the display is positioned\n  at the first tagged entry.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TAGFLIP=TF\n)F   The TAGFLIP subcommand causes to tag status of every member\n  to be toggled to the opposite setting.  All untagged members are\n  tagged, and all tagged members are untagged.\n)X Syntax -\n     TAGFLIP\n\n Alias    - TF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F   The RESET subcommand causes all members to become untagged\n  without updating any other member information.\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=REFRESH=REF\n)F   The REFRESH subcommand instructs REVIEW to update the in-storage\n  member information with the latest data from the directory or\n  directories of the relevant PDS(s) and/or PDSE(s).  All member\n  display entries will be untagged and information about deleted\n  members will be discarded.\n)X Syntax -\n     REFRESH   N / G\n\n Alias    - REF\n Defaults - Retain current member generation display mode.\n Required - None.\n))N       - Do not show member generations in the member list.\n))G       - Display member generations in the member list.\n   Note that 'G' will be treated as an invalid operand unless the\n   current library is a Version 2 PDSE allowing member generations.\n)O Operands - None.\n=UP=-\n)F   The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F   The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F   The TOP subcommand moves the display to the first directory\n  entry in the display list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F   The BOTTOM subcommand moves the display to the last directory\n  display entry.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F   The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F   The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F   The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F   The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F   The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F   The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F   The TSO subcommand specifies a TSO command processor to be\n  invoked from the REVIEW processor.  Commands generating an implicit\n  EXEC such as SYSPROC member names and commands immediately prefixed\n  by a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F   The LOCATE subcommand repositions the display to the relative\n  line number entered, or locates a pending line command.\n)X Syntax -\n     LOCATE  'member'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The member name of the entry to be placed at the top\n             of the display.  If the member list is sorted into an\n             order other than member name collating sequence then\n             the exact member name must be specified.\n               If no exact member name is found when the list is\n             sorted by ID, then the operand is used to position\n             the display to the matching user ID.\n=SELECT=SEL=S\n)F   SELECT allows a member to be selected for REVIEW from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.\n)X Syntax -\n     SELECT  'member'\n\n Aliases  - SEL, S\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed by REVIEW.\n=BROWSE=B\n)F   BROWSE allows a member to be selected for browse from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.  In an ISPF environment ISPF\n  Browse is used; otherwise REVIEW is used.\n)X Syntax -\n     BROWSE  'member'\n\n Alias    - B\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed.\n=VIEW=V\n)F   VIEW allows a member to be selected for view from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.  In an ISPF environment ISPF\n  View is used; otherwise REVIEW is used.\n)X Syntax -\n     VIEW  'member'\n\n Alias    - V\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be viewed.\n=EDIT=E\n)F   EDIT allows a member to be selected for edit from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.  In an ISPF environment ISPF\n  Edit is used; otherwise REVEDIT is used.\n)X Syntax -\n     EDIT  'member'\n\n Alias    - E\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing or new member to be edited.\n=UPDATE=U\n)F   UPDATE allows a member to be selected for edit by REVEDIT from\n  the primary input area without first locating the member's list\n  entry in the display.  Only members in the first PDS or PDSE of a\n  concatenation can be processed by this subcommand.\n)X Syntax -\n     UPDATE  'member'\n\n Alias    - U\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing or new member to be edited.\n=DELINK=DL\n)F   The DELINK subcommand instructs REVIEW to delink load modules\n  and write object \"decks\" to a sequential data set.  The user will\n  be prompted to specify an output data set.\n\n  DELINK notes:\n   1.  The subject PDS must have RECFM=U and must not be a PDSE.\n   2.  Only tagged members are delinked, unless there are no\n       tagged members in which case ALL MEMBERS are delinked.\n   3.  REVIEW will attach the DELINKI program from CBT file 90\n       to perform the delink function.  Fixed-length 80-byte\n       records are written.  Note that SCATTER and OVERLAY\n       programs will NOT be handled correctly.\n   4.  If the resultant object data is relinked, the new load\n       modules may not be bit-for-bit copies of the original\n       load modules, even though they should be functionally\n       equivalent.  That is, reconstructed load modules may be\n       reblocked and/or reordered.\n   5.  DELINKI can generate Program Binder control statements\n       which are not supported by the Linkage Editor.\n)X Syntax -\n     DELINK\n\n Alias    - DL\n Defaults - None.\n Required - None.\n)O Operands - None.\n=OFFLOAD=OFF\n)F   The OFFLOAD subcommand instructs REVIEW to offload PDS members\n  to a sequential file.  Offloading can be performed for a\n  partitioned data set or concatenation with ANY record format.\n  The user will be prompted to specify an output data set.\n\n  OFFLOAD notes:\n   1.  The output RECFM will be overridden to FB or VB as appropriate.\n       The output LRECL will be overridden to the PDS LRECL or 80,\n       whichever is greater.  If the PDS has an undefined record\n       format then fixed-length 80-byte records will be written.\n   2.  Members will be offloaded in member selection list order,\n       and will be preceded by an IEBUPDTE-like './ ADD ' control\n       statement.\n   3.  IEBUPDTE-like './ ALIAS ' statements are also generated only if\n       the member list is sorted into TTR-order, and only for aliases\n       whose corresponding real member is also offloaded.\n   4.  Only the first occurrence of a given member name in a\n       concatenation can be offloaded.\n   5.  Program objects cannot be offloaded.\n   6.  Only tagged members are offloaded, unless there are no\n       tagged members in which case ALL MEMBERS are offloaded.\n   7.  If the first two (2) data bytes of a fixed-length or\n       variable-length record are './' then they will be\n       translated to '><' on output.\n)X Syntax -\n     OFFLOAD\n\n Alias    - OFF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SEQLOAD=SEQ\n)F   The SEQLOAD subcommand instructs REVIEW to copy PDS members\n  contents to a sequential file.  Sequentialising  can be performed\n  for a partitioned data set or concatenation with fixed-length or\n  variable-length records.  The user will be prompted to specify\n  an output data set.\n\n  SEQLOAD notes:\n   1.  The output RECFM will be overridden to FB or VB as appropriate.\n       The output LRECL will be overridden to the PDS LRECL.\n   2.  The data from real members will be written in member selection\n       list order.\n   3.  Only the first occurrence of a given member name in a\n       concatenation can be copied.\n   4.  Only tagged members are copied, unless there are no tagged\n       members in which case ALL MEMBERS are copied.\n   5.  'SEQLOAD' performs the same processing as 'OFFLOAD' except\n       that no IEBUPDTE-like control statements are generated, './'\n       is not translated on output, and the minimum output LRECL of\n       80 required by 'OFFLOAD' for IEBUPDTE compatibility is not\n       required by 'SEQLOAD'.  'SEQLOAD' cannot process RECFM=U\n       libraries.\n)X Syntax -\n     SEQLOAD\n\n Alias    - SEQ\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PDSLOAD=PDS\n)F   The PDSLOAD subcommand instructs REVIEW to process sequential\n  input and load the data into members of the library being REVIEWed,\n  which must not be a concatenation.  The user is prompted with a\n  panel to specify the data set containing the sequential input,\n  whether ISPF statistics are to be generated, and an optional member\n  name selection mask.\n\n  PDSLOAD notes:\n   1.  The input is expected to be data created by OFFLOAD or a\n       compatible offload process.\n   2.  REVIEW will attach the PDSLOAD program from CBT file 93 (or\n       the REVLMOD program if the PDS RECFM=U) to perform the reload\n       operation.\n   3.  Load modules reconstructed by this subcommand will be\n       bit-for-bit copies of the original load modules.  No\n       reblocking is performed for load modules.\n   4.  See PDSLOAD documentation for details on fixed- and\n       variable-length record format combinations, and record\n       truncation and extension actions.\n)X Syntax -\n     PDSLOAD\n\n Alias    - PDS\n Defaults - None.\n Required - None.\n=SORT\n)F   The SORT subcommand causes the displayed directory entries to be\n  reordered according to the specified criterion.  Underscored column\n  headings may be selected as the sorting criterion without typing\n  a SORT command by means of cursor placement.\n)X Syntax -\n     SORT  'sort-field'\n\n Aliases  - None.\n Defaults - None.\n Required - 'sort-field'\n)O Operands -\n)P 'sort-field' - The name of the display field to be used for sorting.\n      Valid sort field names are:\n  NAME or N - Sort the list into ascending name order.\n  CHA  or C - Sort the list into descending change timestamp order.\n  DATE or D - Sort the list into descending change timestamp order.\n  SIZE or S - Sort the list into descending size order.\n  TTR  or T - Sort the list into ascending TTR order.  This is\n              the order that the members were saved into the PDS.\n  ID   or I - Sort the list into ascending UserId order.\n  USER or U - Sort the list into ascending UserId order.\n  SSI or SS - Sort the list into ascending SSI or VV.MM order.\n  VER  or V - Sort the list into ascending SSI or VV.MM order.\n=MEMBER=MEM\n)F Function -\n  The MEMBER subcommand causes member entries in the display list with\n  names matching the mask specified as the only operand to be tagged.\n  All other members are untagged.\n\n  The command can process requests for a specific member, or for a\n  generic match.\n\n Examples -\n  MEM ABC    - look for member 'ABC'.\n  MEM *ABC*  - look for member names containing the string 'ABC'.\n  MEM ABC*   - look for member names starting with 'ABC'.\n  MEM *ABC   - look for member names ending with 'ABC'.\n  MEM %ABC*  - look for member names with 'ABC' as the second through\n               fourth characters.\n  MEM %ABC%* - look for member names with 'ABC' as the second through\n               fourth characters which are at least 5 characters long.\n  MEM A*BC   - this will match, for example, ABC, AABC, ABBC and AXBC.\n)X Syntax -\n     MEMBER  'member-name-mask'\n\n Aliases  - MEM\n Defaults - None.\n Required - 'member-name-mask'\n)O Operands -\n)P 'member-name-mask' - a mask to filter member names.  A single\n    string of up to 8 non-blank characters must be specified.\n    Alphabetics will be upper-cased.  Generic masking characters\n    are an asterisk to match zero or more non-blanks, and a percent\n    sign to match any single non-blank character.\n\n    Note that any occurrence of an asterisk-asterisk ('**') or an\n    asterisk-percent ('*%') in the mask will be rejected as invalid.\n=PATTERN=PAT\n)F Function -\n  The PATTERN subcommand causes member entries in the display list\n  with names containing the string specified as the only operand to\n  be tagged.  All other members are untagged.\n\n  The PATTERN command is similar to the MEMBER command, except that\n  unless the supplied string begins with a generic mask character\n  then an asterisk is prepended, and unless the supplied string\n  ends with an asterisk then an asterisk is appended.\n\n  For example:\n    PAT ABC      is equivalent to    MEM *ABC*\n    PAT ABC%     is equivalent to    MEM *ABC%*\n    PAT A%BC     is equivalent to    MEM *A%BC*\n    PAT A*BC     is equivalent to    MEM *A*BC*\n    PAT ABCDEFG  is equivalent to    MEM *ABCDEFG*\n                 except that         MEM *ABCDEFG*\n                 is invalid because '*ABCDEFG*' is longer than 8\n                 characters.\n)X Syntax -\n     PATTERN  'member-name-substring'\n\n Aliases  - PAT\n Defaults - None.\n Required - 'member-name-substring'\n)O Operands -\n)P 'member-name-substring' - a string fragment to filter member names.\n    A single string of up to 8 non-blank characters must be specified.\n    Alphabetics will be upper-cased.  Generic masking characters are\n    an asterisk to match zero or more non-blanks, and a percent sign\n    to match any single non-blank character.\n\n    Note that any occurrence of an asterisk-asterisk ('**') or an\n    asterisk-percent ('*%') in the mask will be rejected as invalid.\n=CANCEL=CAN\n)F   The CANCEL subcommand instructs REVIEW to terminate without\n  saving and changes to the REVIEW profile.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F   The END subcommand instructs REVIEW to terminate after saving\n  any changes to the REVIEW profile.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F   The EXIT subcommand performs the same processing as END when\n  issued from a member selection list display.  That is, REVIEW saves\n  any changes to the REVIEW profile and terminates.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVPDSE": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x00@\\x01\\x04\\x13\\x0f\\x01\\x19\\x02\\x7f#\\x13\\x02.\\x01\\xe6\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2004-05-09T00:00:00", "modifydate": "2019-01-27T23:13:40", "lines": 558, "newlines": 486, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVPDSE' RELEASE 48.5   JANUARY 2019\n)F Function -\n  This member describes the subcommands available when REVIEW is\n  displaying the member list of a single program object PDSE.\n)X Syntax -\n         REVIEW 'program object library specification'\n)O Operands -\n 'program object library specification'\n                 should not include a member name.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------ REVIEW PARTITIONED MEMBER LIST SUBCOMMANDS ------------\n\n These subcommands are available while processing the member list\n of a partitioned file:\n\n   BROWSE  - Browse a member with ISPF Browse.\n   B       - Same as 'BROWSE'.\n   FIND    - Same as 'SEARCH'.\n   F       - Same as 'SEARCH'.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Display the specified member's entry.\n   LOCATE  - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   L       - Same as 'LIST'.\n   REFRESH - Reread the directory entries and update the member list.\n   REF     - Same as 'REFRESH'.\n   RESET   - Untag all member display entries.\n   RES     - Same as 'RESET'.\n   RFIND   - Position the display to the next tagged member entry,\n             or if no entries are tagged report the number of\n             directory blocks that were read.\n   SEARCH  - Request a multi-member search.\n   SRCHFOR - Same as 'SEARCH'.\n   SELECT  - Browse a member with REVIEW.\n   SEL     - Same as 'SELECT'.\n   S       - Same as 'SELECT'.\n   SORT    - Sort the display order of member entries.\n   TAGFLIP - Toggle the tag status of all member entries.\n   TF      - Same as 'TAGFLIP'.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or entry.\n   BOTTOM  - Scroll down to the last line or entry.\n   BOT     - Same as 'BOTTOM'.\n\n -------------------- MEMBER LIST SELECTION CODES --------------------\n\n These selection codes can be used to select a member entry for\n processing from a directory member list display:\n\n   S       - Selection code for selecting a member to be REVIEWed.\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   B       - Selection code for selecting a member to be browsed.\n             ISPF/PDF Browse is used.  This will only work if the\n             file is acceptable to ISPF/PDF Browse and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity or reverse\n             video in the entry list.  If any members are tagged,\n             then only tagged members are examined during a search.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as RFIND\n             can be used to locate the next tagged entry.  All tags\n             can be cleared by REFRESH and RESET.\n\n   R       - Selection code for resetting the tag status of an entry.\n             All tags can be cleared by REFRESH and RESET.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n             The Binder API is invoked to access IDR data which is\n             then formatted and shown with one item per line.  The\n             last display record will usually contain the program\n             bind (link edit) IDR data, including the date and time\n             of the bind.\n\n   M       - Selection code for extracting and displaying the module\n             map of a program.\n\n             The Binder API is invoked to access ESD (for compatible\n             program objects) or MAP (for other levels) data which\n             is then formatted and shown with one item per line.\n\n             The types of map data shown are:\n               'M'     Module\n               'C'     Class\n               'O'     Overlay segment\n               'S'     Section within class\n               'P'     Part within class\n               'L'     Label within section\n               'X'     Text extent within section or part\n               'E'     End-of-module\n\n             The use of FIND ALL can be used to enhance the display\n             by suppressing unwanted data.\n\n             Examples for PO level 1 program objects:\n               To show only sections:\n                 F SD 1 ALL\n               To show only sections and their external labels:\n                 F D 2 ALL\n\n             Examples for other PO levels:\n               To show only classes present:\n                 F C 1 ALL\n               To show all section names present:\n                 F S 2 ALL\n\n   /       - Selection code for selecting a member to be REVIEWed\n             as if the DATA operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents.  This selection code performs the same function\n             as the 'S' selection code except that the DATA operand is\n             deemed to have been specified.  This will prevent REVIEW\n             from attempting to interpret data content such as\n             pictures.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=SEARCH=FIND=F=SRCHFOR\n)F Function -\n  The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-member search can be specified.\n  The facilities of the REVIEW FIND subcommand are used, and searched\n  members are tagged when a match is found and untagged when no match\n  is found.  If any members are tagged then only tagged members are\n  searched.\n)X Syntax -\n     SEARCH\n Aliases  - FIND, F, SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand positions the next tagged entry at the top\n  of the display.  If the display is currently positioned at or past\n  the last tagged entry then the display is positioned at the\n  end-of-list entry.  If the display is currently positioned at the\n  end-of-list entry then the display is positioned at the first\n  tagged entry.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TAGFLIP=TF\n)F Function -\n  The TAGFLIP subcommand causes to tag status of every member\n  to be toggled to the opposite setting.  All untagged members are\n  tagged, and all tagged members are untagged.\n)X Syntax -\n     TAGFLIP\n\n Alias    - TF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand causes all members to become untagged\n  without updating any other member information.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=REFRESH=REF\n)F Function -\n  The REFRESH subcommand instructs REVIEW to update the in-storage\n  member information with the latest data from the directory or\n  directories of the relevant PDS(s) and/or PDSE(s).  All member\n  display entries will be untagged.\n)X Syntax -\n     REFRESH\n\n Alias    - REF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the display to the first directory\n  entry in the display list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the display to the last directory\n  display entry.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     SPLIT  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F Function -\n  The LOCATE subcommand repositions the display to the relative\n  line number entered, or locates a pending line command.\n)X Syntax -\n     LOCATE  'member'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The member name of the entry to be placed at the top\n             of the display.  If the member list is sorted into an\n             order other than member name collating sequence then\n             the exact member name must be specified.\n               If no exact member name is found when the list is\n             sorted by ID, then the operand is used to position\n             the display to the matching user or job name.\n=SELECT=SEL=S\n)F Function -\n  SELECT allows a member to be selected for REVIEW from the primary\n  input area without first locating the member's list entry in the\n  display.\n)X Syntax -\n     SELECT  'member'\n\n Aliases  - SEL, S\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed by REVIEW.\n=BROWSE=B\n)F Function -\n  BROWSE allows a member to be selected for browse from the primary\n  input area without first locating the member's list entry in the\n  display.  The invocation of ISPF Browse will not be successful\n  unless REVIEW is running in an ISPF environment.\n)X Syntax -\n     BROWSE  'member'\n\n Alias    - B\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed.\n=SORT\n)F Function -\n  The SORT subcommand causes the displayed directory entries to be\n  reordered according to the specified criterion.  Underscored\n  column headings may be selected as the sorting criterion without\n  typing a SORT command by means of cursor placement.\n)X Syntax -\n     SORT  'sort-field'\n\n Aliases  - None.\n Defaults - None.\n Required - 'sort-field'\n)O Operands -\n)P 'sort-field' - The name of the display field to be used for sorting.\n      Valid sort field names are:\n  NAME or N - Sort the list into ascending name order.\n  CHA  or C - Sort the list into descending change timestamp order.\n  DATE or D - Sort the list into descending change timestamp order.\n  SIZE or S - Sort the list into descending size order.\n  TTR  or T - Sort the list into ascending TTR (or MLT) order.\n  ID   or I - Sort the list into ascending UserId/Job order.\n  JOB  or J - Sort the list into ascending UserId/Job order.\n  USER or U - Sort the list into ascending UserId/Job order.\n  SSI or SS - Sort the list into ascending SSI order.\n  VER  or V - Sort the list into descending PM version+sublevel order.\n  EPA  or E - Sort the list into descending entry point order.\n  REAL or R - Sort the list into ascending real name order.\n  AL        - Sort the list into ascending (alias) name order.\n  AC        - Sort the list into descending authorization code order.\n  AT        - Sort the list into attribute flags bit pattern order.\n  AM   or M - Sort the list into RMODE/AMODE flags bit pattern order.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand instructs REVIEW to terminate without\n  saving and changes to the REVIEW profile.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand instructs REVIEW to terminate after saving\n  any changes to the REVIEW profile.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand performs the same processing as END when\n  issued from a member selection list display.  That is, REVIEW saves\n  any changes to the REVIEW profile and terminates.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVTSO": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x000\\x01\\x10\\x07O\\x01\\x18#\\x1f\\x17&\\x018\\x01/\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2010-03-15T00:00:00", "modifydate": "2018-08-19T17:26:30", "lines": 312, "newlines": 303, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVTSO' RELEASE 48.3     AUGUST 2018\n)F Function -\n  This is the documentation for the TSO command processing option\n  of RFE (REVIEW Front End).  REVTSO is not a TSO command.\n\n  The processing panel presented by this option offers a number of\n  advantages over the TSO global subcommand, the main ones being:\n\n  (1) An extended input area is presented allowing command input\n      up to 234 characters in length.\n  (2) The ten most recently issued commands are saved, and can be\n      recalled by cursor selection.  That is, when the command input\n      area is empty and the cursor is placed on a screen line which\n      displays a previously issued command, that entire command is\n      recalled and placed in the main input area for optional editing\n      before being executed again.\n  (3) Unlike the dynamic command recall stack which commences with\n      the initial TSO command which sets up the REVIEW environment,\n      the ten most recent commands can be saved in permanent storage\n      residing in the profile data set.\n\n  In general, the above listed advantages not withstanding, this\n  TSO command processing option has restrictions similar to those\n  imposed on the global TSO subcommand.  In particular, this RFE\n  option does not provide any special ability to initiate APF\n  authorized TSO processing.\n\n  As with the global TSO subcommand, CLIST commands can be implicitly\n  invoked.\n\n  Should the user wish to not save the updated recent commands list\n  the option can be exited using the CANCEL command.  Note that if\n  any CANCEL operands are present the input is treated as a request\n  to issue the TSO CANCEL (FIB) command.  The abbreviation CAN is not\n  subject to this operand test.\n\n  As with ISPF option 6, individual commands can be prevented from\n  being recorded in the displayed list of recent commands simply\n  by prefixing the command string with 'TSO '.  This has the effect\n  of causing the command to be issued via the global TSO command\n  facility instead of via the logic of the TSO command option.\n\n  Exiting the TSO command processing option with the END command,\n  or any inter-option jump string commencing with the equals sign\n  '=' causes the current recent command list to be passed back to\n  RFE.  Note that the command list will only be saved to the profile\n  data set at the termination of the logical session (or split screen).\n\n  The profile data set is a single PDS allocated to the ISPPROF file\n  under z/OS, or the REVPROF file under MVS/370.  From a data\n  management point of view, the profile data set contains fixed-length\n  80-byte records.  The saved commands for this option are stored\n  in member $$REVTSO.\n)X Syntax -\n         6\n     from the RFE primary option menu, or\n         =6\n     from elsewhere in RFE, or\n         RFE 6\n     from TSO, or\n         START 6\n     from with the REVIEW/RFE environment.\n\n  Required - None.\n  Defaults - None.\n  Aliases  - None.\n)O Operands - None.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all RFE options:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The SPLIT subcommand requests that a new parallel session is to be\n  initiated and given control.  The new session will be under the\n  RFE (REVIEW Front End) menu hierarchy.  The new session will NOT\n  be started if it would cause the maximum logical session limit to\n  be exceeded.  If no operand is supplied the RFE primary option\n  menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the recent TSO command list changes made\n  this session.  If the TSO command processing option is reselected\n  the saved command list shown will be the same as at the start of\n  the current session.  If CANCEL (but not CAN) has any operands\n  specified it is processed as the TSO FIB command CANCEL and not\n  as the local RFE subcommand, which allows the TSO CANCEL command\n  to be issued from this option.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the option and returns control\n  to the RFE primary option menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the RFE logical session, also\n  referred to as a parallel session, or \"split screen\".  When\n  the last logical session is terminated the whole RFE/REVIEW\n  environment is terminated, which usually means that the TSO\n  READY prompt will be issued.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVUNIX": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x00\\x03\\x01\\x04\\x13_\\x01\\x19\\x02\\x7f#\\x15\\x02A\\x01\\xd7\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2004-05-14T00:00:00", "modifydate": "2019-01-27T23:15:03", "lines": 577, "newlines": 471, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'REVUNIX' RELEASE 48.5   JANUARY 2019\n)F Function -\n  This member describes the subcommands available when REVIEW is\n  displaying the entry list of a UNIX directory.\n)X Syntax -\n         REVIEW 'UNIX path specification'\n)O Operands -\n   'UNIX path specification' must begin with a slash ('/') - or\n   with a tilde ('~') which specifies the user's home directory.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ----------- REVIEW UNIX DIRECTORY ENTRY LIST SUBCOMMANDS -----------\n\n These subcommands are available while processing the entry list\n of a UNIX directory:\n\n   BROWSE  - Browse a regular file with ISPF Browse.\n   B       - Same as 'BROWSE'.\n   EDIT    - Edit a regular file with ISPF Edit.\n   E       - Same as 'EDIT'.\n   FIND    - Same as 'SEARCH'.\n   F       - Same as 'SEARCH'.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Display the specified entry.\n   LOCATE  - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   L       - Same as 'LIST'.\n   REFRESH - Reread the directory entries and update the display.\n   REF     - Same as 'REFRESH'.\n   RESET   - Untag all display entries.\n   RES     - Same as 'RESET'.\n   RFIND   - Position the display to the next tagged entry.\n   SEARCH  - Request a search of some or all regular files listed.\n   SRCHFOR - Same as 'SEARCH'.\n   SELECT  - Navigate REVIEW to the nominated entry.\n   SEL     - Same as 'SELECT'.\n   S       - Same as 'SELECT'.\n   SORT    - Sort the display order of directory entries.\n   TAGFLIP - Toggle the tag status of all directory entries.\n   TF      - Same as 'TAGFLIP'.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or entry.\n   BOTTOM  - Scroll down to the last line or entry.\n   BOT     - Same as 'BOTTOM'.\n\n -------------------- ENTRY LIST SELECTION CODES --------------------\n\n These selection codes can be used to select an entry for\n processing from a directory entry list display:\n\n   S       - Selection code for selecting a file to be REVIEWed\n             or a new directory to have its entries displayed.\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   A       - Selection code for selecting a file to be REVIEWed\n             or a new directory to have its entries displayed.\n             If a file is to be REVIEWed it will be treated as\n             an ASCII text file, and not as a file containing\n             EBCDIC data.  If a directory is selected the 'A'\n             selection code will function as an 'S' selection code.\n\n   E       - Selection code for selecting a file to be edited.\n             ISPF/PDF Edit is used.  This will only work if the\n             file is acceptable to ISPF/PDF Edit and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   B       - Selection code for selecting a file to be browsed.\n             ISPF/PDF Browse is used.  This will only work if the\n             file is acceptable to ISPF/PDF Browse and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity in the entry\n             list.  If any files are tagged, then only tagged files\n             are processed during search (see SEARCH) operations.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as RFIND\n             can be used to locate the next tagged entry.  All tags\n             can be cleared by REFRESH and RESET.\n\n   R       - Selection code for resetting the tag status of an entry.\n             All tags can be cleared by REFRESH and RESET.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n             The Binder API is invoked to access IDR data which is\n             then formatted and shown with one item per line.  The\n             last display record will usually contain the program\n             bind (link edit) IDR data, including the date and time\n             of the bind.\n\n   M       - Selection code for extracting and displaying the module\n             map of a program.\n\n             The Binder API is invoked to access ESD (for compatible\n             program objects) or MAP (for other levels) data which\n             is then formatted and shown with one item per line.\n\n             The types of map data shown are:\n               'M'     Module\n               'C'     Class\n               'O'     Overlay segment\n               'S'     Section within class\n               'P'     Part within class\n               'L'     Label within section\n               'X'     Text extent within section or part\n               'E'     End-of-module\n\n             The use of FIND ALL can be used to enhance the display\n             by suppressing unwanted data.\n\n             Examples for PO level 2 program objects:\n               To show only sections:\n                 F SD 1 ALL\n               To show only sections and their external labels:\n                 F D 2 ALL\n\n             Examples for other PO levels:\n               To show only classes present:\n                 F C 1 ALL\n               To show all section names present:\n                 F S 2 ALL\n\n   /       - Selection code for selecting a entry to be REVIEWed\n             as if the DATA operand had been specified.  Invoking\n             REVIEW to process a UNIX file system allows no operands\n             to be specified.  This selection code performs the same\n             function as the 'S' selection code except that the DATA\n             operand is deemed to have been specified.  This will\n             prevent REVIEW from attempting to interpret data\n             content such as pictures and ZIP directories.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=SEARCH=FIND=F=SRCHFOR\n)F Function -\n  The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-file search can be specified.\n  The facilities of the REVIEW FIND subcommand are used, and searched\n  files are tagged when a match is found and untagged when no match\n  is found.  If any regular files are tagged then only tagged regular\n  files are searched.\n)X Syntax -\n     SEARCH\n Aliases  - FIND, F, SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand positions the next tagged entry at the top\n  of the display.  If the display is currently positioned at or past\n  the last tagged entry then the display is positioned at the\n  end-of-list entry.  If the display is currently positioned at the\n  end-of-list entry then the display is positioned at the first\n  tagged entry.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TAGFLIP=TF\n)F Function -\n  The TAGFLIP subcommand causes to tag status of every entry to be\n  toggled to the opposite setting.  All untagged entries are tagged,\n  and all tagged entries are untagged.\n\n)X Syntax -\n     TAGFLIP\n\n Alias    - TF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand causes all entries to become untagged\n  without updating any other entry information.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=REFRESH=REF\n)F Function -\n  The REFRESH subcommand instructs REVIEW to update the in-storage\n  entry information with the latest data from the relevant UNIX\n  directory.  All display entries will be untagged.\n\n)X Syntax -\n     REFRESH\n\n Alias    - REF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the display to the first directory\n  entry in the display list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the display to the last directory\n  display entry.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is to be\n  initiated and given control.  The new session will be under the\n  RFE (REVIEW Front End) menu hierarchy.  The new session will NOT\n  be started if it would cause the maximum logical session limit to\n  be exceeded.  If no operand is supplied the RFE primary option\n  menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F Function -\n  The LOCATE subcommand repositions the display to the relative\n  line number entered, or locates a pending line command.\n)X Syntax -\n     LOCATE  'entry'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of the entry to be placed at the top of\n             the display.  If the entry list is sorted into an\n             order other than entry name collating sequence then\n             the exact entry name must be specified.\n               If no exact entry name is found when the list is\n             sorted by ID, then the operand is used to position\n             the display to the matching user ID.\n=SELECT=SEL=S\n)F Function -\n  SELECT allows a entry to be selected for REVIEW from the primary\n  input area without first locating the list entry in the display.\n)X Syntax -\n     SELECT  'entry'\n\n Aliases  - SEL, S\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of an existing entry to be browsed by REVIEW.\n=BROWSE=B\n)F Function -\n  BROWSE allows a regular file to be selected for browse from the\n  primary input area without first locating the list entry in the\n  display.  ISPF Browse is used.\n)X Syntax -\n     BROWSE  'entry'\n\n Alias    - B\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of an existing file to be browsed by ISPF.\n=EDIT=E\n)F Function -\n  EDIT allows a regular file to be selected for edit from the\n  primary input area without first locating the list entry in the\n  display.  ISPF Edit is used.\n)X Syntax -\n     EDIT  'entry'\n\n Alias    - E\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of a file to be edited by ISPF.\n=SORT\n)F Function -\n  The SORT subcommand causes the displayed directory entries to be\n  reordered according to the specified criterion.\n)X Syntax -\n     SORT  'sort-field'\n\n Aliases  - None.\n Defaults - None.\n Required - 'sort-field'\n)O Operands -\n)P 'sort-field' - The name of the display field to be used for sorting.\n      Valid sort field names are:\n  NAME or N - Sort the list into ascending name order.\n  CHA or CH - Sort the list into descending change timestamp order.\n  CRE or CR - Sort the list into descending create timestamp order.\n  ACC  or A - Sort the list into descending access timestamp order.\n  SIZE or S - Sort the list into descending size order.\n  ID   or I - Sort the list into ascending Owner UserId order.\n  OWN  or O - Sort the list into ascending Owner UserId order.\n  USER or U - Sort the list into ascending Owner UserId order.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand instructs REVIEW to terminate without\n  saving and changes to the REVIEW profile.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand instructs REVIEW to display the directory\n  entries of the parent directory of the current directory.  When\n  the current directory is the root directory END will cause REVIEW\n  to terminate.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand instructs REVIEW to terminate, and is\n  functionally equivalent to a number of successive END subcommands\n  such that the last END is issued at the root directory level.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVVSAM": {"ttr": 513, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x002\\x00\\x84#\\x7f\\x01\\x18#\\x1f\\x175\\x08\\xb4\\x00L\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1984-08-24T00:00:00", "modifydate": "2018-08-19T17:35:32", "lines": 2228, "newlines": 76, "modlines": 0, "user": "GREG"}}, "RFE": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x005\\x01\\x10\\x07O\\x01\\x18#\\x1f\\x172\\x01\\xb4\\x01\\xaf\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2010-03-15T00:00:00", "modifydate": "2018-08-19T17:32:35", "lines": 436, "newlines": 431, "modlines": 0, "user": "GREG"}, "text": "*                    TSO HELP FOR 'RFE' RELEASE 48.3        AUGUST 2018\n)F Function -\n  The RFE command provides a 3270 fullscreen environment for general\n  processing under TSO with an emphasis on data set operations.  The\n  chief utility for examining and changing data sets is the REVIEW\n  command, and for this reason it is called the \"REVIEW Front End\".\n\n  RFE presents a primary option menu from which an option is selected\n  by typing the option name into the primary input area.  The 'END'\n  command returns control from the selected option to the primary\n  option menu.\n\n  Jumping between options directly without an intervening display\n  of the main menu is also possible by prefixing the target option\n  name with the equals sign.  For example, to jump to option 6\n  enter the string '=6' (without the quotes) in the primary input\n  area near the top of the screen.\n\n  Multiple parallel RFE logical sessions can exist.  A new session\n  is created by the 'START' command which is equivalent to entering\n  'TSO RFE' in the primary input area.\n\n  A logical RFE session is terminated by entering 'END' at the main\n  menu, or selecting the primary option of 'X'.  Consequently, an\n  RFE logical session can be ended by the primary input string of\n  '=X' from any RFE option.\n\n\n  Graphic Displays\n  ================\n\n  For terminals with suitable graphics facilities under MVS/370,\n  three graphic displays are shown on the primary option menu.\n\n  From left to right, they are:\n\n\n  (1) A plot of virtual storage usage.\n\n      This is presented as a 64 by 64 array representing the 4,096\n      4KB pages in the 16MB virtual storage address space.  Each\n      array element is a 2 by 2 3270 pixel square.  The 64 by 64\n      array has a yellow border 2 3270 pixels wide.\n\n      The bottom row of the array represents virtual pages 0 to\n      63 going left to right, the second-bottom row represents\n      virtual pages 64 to 127 going left to right, and so on.\n\n      The color codes used to represent page usage are:\n\n      Black        - UnGETMAINed pages.  Attempting to reference\n                     virtual storage addresses in these pages\n                     will cause an addressing exception program\n                     interrupt which MVS will convert to a S0C4\n                     abnormal end (abend).\n\n      Red          - Nucleus pages.  Under MVS/370 the nucleus\n                     is V=R, which means that the real address\n                     of all parts of the nucleus is the same as\n                     the virtual address.  The nucleus starts\n                     at address 0.  The private area starts at\n                     the 64KB boundary above the nucleus.\n\n      Green        - Private pages in a user key.  Application\n                     programs and data usually reside in these\n                     pages.\n\n      White        - Private pages in a system key.  Job-related\n                     system control blocks such as the Scheduler\n                     Work Area (SWA) usually reside in these\n                     pages at the top of the private area, while\n                     authorized reentrant programs can reside in\n                     these pages in lower parts of the private\n                     area.\n\n      Pink         - Local System Queue Area (LSQA).  It is the\n                     residency of the LSQA which defines whether\n                     an address space is swapped in or swapped out.\n                     The LSQA may be swappable, but it is not\n                     pagable.  The segment and page tables used\n                     by Dynamic Address Translation (DAT) reside\n                     in LSQA.  LSQA usually occupies the highest\n                     pages in the private area.\n\n      Blue         - Pagable common pages.  CSA subpools 231 and\n                     241 use these pages.\n\n      Yellow       - Page-fixed common pages.  CSA subpools 227\n                     and 228 use these pages.\n\n      Shaded green - The Link Pack Area (LPA).  The LPA contains\n                     reentrant programs permanently resident in\n                     virtual storage.\n\n      Turquoise    - The System Queue Area (SQA).  The SQA is not\n                     pagable and contains control blocks used for\n                     managing the whole system.  All SQA storage\n                     is in key 0.\n\n\n  (2) A bar graph of the frame count versus UIC distribution.\n\n      The X-axis covers the allowable Unreferenced Interval Count\n      (UIC) range from 0 to 255 with each 3270 pixel covering 2\n      adjacent UIC values.  The Y-axis plots the number of frames\n      with a given UIC value at a scale of 2 frames per 3270 pixel.\n      Vertical bar plots are truncated at a frame count of 256\n      which corresponds to 1MB of real storage.\n\n      If a page frame has not been referenced for 10 SRM intervals,\n      it is said to have a UIC of 10.  An SRM interval may be\n      something like a couple of seconds elapsed time, depending\n      on the CPU speed adjustment factor, which is obviously\n      model-dependent.\n\n\n  (3) A plot of real storage usage.\n\n      This is presented as a 64 by 64 array representing the 4,096\n      4KB frames that can exist when the maximum real storage size\n      of 16MB is present.  Each array element is a 2 by 2 3270 pixel\n      square.  The 64 by 64 array has a yellow border 2 3270 pixels\n      wide.\n\n      The bottom row of the array represents page frames 0 to\n      63 going left to right, the second-bottom row represents\n      page frames 64 to 127 going left to right, and so on.\n\n      The color codes used to represent frame usage are:\n\n      Black        - Unused frames available for use.\n\n      Red          - Non-RSM frames.  Frames that are not managed\n                     by the Real Storage Manager are nucleus frames,\n                     bad frames (those found to have an error),\n                     and frames varied offline.\n\n      Green        - Pagable private storage.\n\n      Pink         - Page-fixed private storage.\n\n      Turquoise    - SQA and LSQA storage.  SQA pages tend to occupy\n                     the frames with the highest addresses.\n\n      Blue         - Pagable common (CSA and LPA) storage.\n\n      Yellow       - Page-fixed common (CSA and LPA) storage.\n\n      White        - All frames containing private pages including\n                     LSQA belonging to >this< address space.  Since\n                     >this< address space will usually be a TSO user\n                     address space, these pages will be available for\n                     reuse by the time you are reading this, because\n                     the system will swap out your TSO session while\n                     it waits for the next input from your TSO\n                     terminal.  (While MVS 3.8J does not perform\n                     logical swapping, it does exploit page reclaim.)\n\n\n  Profile data set\n  ================\n\n  It is possible to save various settings across RFE and TSO sessions.\n  For this to occur the settings must be saved in permanent storage.\n  This is achieved by writing those settings to a permanent data set\n  at the end of an RFE session.\n\n  The profile data set is a single PDS allocated to the ISPPROF file\n  under z/OS, or the REVPROF file under MVS/370.  From a data\n  management point of view, the profile data set contains fixed-length\n  80-byte records.\n\n  Various settings such as customized Program Function Key assignments,\n  scroll amounts, display settings, editor settings, and recent TSO\n  commands can be saved into the various members of the profile data\n  set.\n\n  Changes are saved by default (when the profile data set is allocated)\n  but usually profile changes can be discarded if functions are\n  terminated with the 'CANCEL' command instead of the usual 'END'\n  command.\n)X Syntax -\n         RFE  'option'\n\n  Aliases  - None.\n  Required - None.\n  Defaults - None.\n)O Operands -\n)P 'option' - initial menu option to be selected.  If specified\n           the display of the primary option menu will be skipped.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all RFE options:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by\n  SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the recent TSO command list changes made\n  this session.  If the TSO command processing option is reselected\n  the saved command list shown will be the same as at the start of\n  the current session.  If CANCEL (but not CAN) has any operands\n  specified it is processed as the TSO FIB command CANCEL and not\n  as the local RFE subcommand, which allows the TSO CANCEL command\n  to be issued from this option.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the option and returns control\n  to the RFE primary option menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the RFE logical session, also\n  referred to as a parallel session, or \"split screen\".  When\n  the last logical session is terminated the whole RFE/REVIEW\n  environment is terminated, which usually means that the TSO\n  READY prompt will be issued.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT134/CBT.V500.FILE134.PDS/REVHELP.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT134/CBT.V500.FILE134.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}