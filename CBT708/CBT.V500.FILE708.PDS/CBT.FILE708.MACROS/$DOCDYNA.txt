
  DYNAMIC ALLOCATION MACROS


  MACROS (ALLOC FREE)

  NAME     ALLOC DUMMY,PERM,DSN=,DDN=,DDNRET=,MEMBER=,DISP=,
                 WAITDSN=NO,WAITUNIT=NO,WAITVOL=NO,
                 VOL=,UNIT=,SYSOUT=,FREE=,COPIES=,LABEL=,
                 BLKSIZE=,DEN=,DSORG=,KEYLEN=,LRECL=,RECFM=,
                 PASWORD=,DSNRET=,MF=AUTO,PREFIX=,ERROR=,
                 SPACE=,F=,FILE=,DA=,QNAME=,DSORGRT=,
                 VOLRET=,DCBDSN=,DCBDDN=,SPECIAL=,DDNTO=,
                 FCB=,
                 DEFER=,UNITCNT=,
                 FORMS=,DEST=,SSREQ=,FORUSER=,TU=,DSNPDE=


  NAME     FREE  UNALC,DSN=,DDN=,MEMBER=,DISP=,SYSOUT=,
                 ERROR=,MF=AUTO,PREFIX=,FILE=,F=,DA=,HOLD=


  NAME     DYNSPACE TYPE


  DOCUMENTATION

  This  macro provides a dynamic allocation function by build-
  ing a dynamic allocation parameter list and invoking SVC 99.

  It first sets up a workarea environment  for  the  parameter
  list  and then tests the keywords supplied and invokes inner
  macros to build the text units. The inner macros  themselves
  use inner macros to update global variables, store text unit
  pointers  etc  there  are  three ways of specifying the work
  area address.

  A) MF=AUTO, MF=G, MF=(E,address,lnthsymb).
  In the first form, an inner macro DYNSPACE is called to name
  a work area, the name being returned in the global SETC var-
  iable &DYNSP. A DSECT is created to  map  this  area.    The
  global variables &dtuo (text unit offset counter) and &DTUPO
  (text  unit  pointer  offset  accumulator)  are set to zero.
  These accumulators are updated as each text  unit  processor
  aquires  storage.  After all text units have been built, the
  amount of space used is calculated, and the  DYNSPACE  macro
  is then called again to log the amount needed. DYNSPACE Sets
  a global variable &DYNSPQ to the highest amount any ALLOC or
  FREE  macro  requested,  and when called with the expand op-
  tion, (no operands or name field supplied), expands  into  a
  ds for that quantity. (See DYNSPACE)

  MF=G  specifies  that  the ALLOC macro enter the begin macro
  workarea to acquire the storage necessary. It does this  via
  the RCPDS macro. (See RCPDS). However, if the ALLOC macro is
  called several times with this option, a lot of storage will
  be  used  up,  as the storage will not be shared. Thus, this
  form should only be used if the ALLOC/FREE macro is only  to
  be used once or twice during an assembly.

  MF=E causes the macro to use a user specified work area. The
  second  parameter gives the name of the workarea, and an op-
  tional third parameter is the name of a symbol to be equated
  to the length of the required work area.

  Dynamic allocation functions are similar to those  available
  with  JCL, using the same keywords. However, certain formats
  are slightly different. For instance, certain  keywords  can
  have  varying  parameters,  eg  dataset name, DDNAME, VOLSER
  etc.  Provision is made for both variable specification.  In
  the absolute form, the parameter is entered in quotes,
  ex.    ALLOC DSN='SYS1.LINKLIB',DISP=SHR
  however, this name remains fixed for the assembly.   In  the
  variable  format,  the  address  of  a locator is specified,
  where the locator consists of a six byte field, the first  4
  bytes  of  which  point to the parameter, while the next two
  contain the length.

  ex.         ALLOC DSN=LOCATOR
     LOCATOR  DC    A(dsn),Y(12)
     DSN      DC    C'SYS1.LINKLIB'

  Numeric quantities e.g. COPIES= for  sysout,  should  either
  specify  a  numeric  value, COPIES=3, a value in a register,
  COPIES=(r3), or the  name  off  a  fullword  containing  the
  value,  COPIES=numcopys,  where  numcopys  is  the name of a
  fullword field.

  Other keywords such as DISP=  can  only  have  the  absolute
  form, and values should not be entered within quotes.  Addi-
  tional  facilities  not available with JCL are the return by
  the system of information on the dataset, eg DSORG. This  is
  done  by specifying DSORGRT=symbol, where symbol is a symbol
  which will be equated to a two  byte  field  containing  the
  DSORG type (see Job Management, Supervisor and TSO).

  The  system  can  also generate and return a DDNAME. This is
  carried out  by  entering  DDNTO=(addr1,addr2,,...)    Where
  addr1,addr2  etc are the names of 8 byte fields which are to
  receive the DDNAME.

  Note that WAITDSN=YES, WAITVOL=YES or  WAITUNIT=YES  require
  that  the  program  be  APF authorized, or in Key 0-7, or in
  supervisor state.

  For  further information on dynamic allocation, see Job Man-
  agement, Supervisor and TSO SPL's.


  DYNSPACE

  This is an inner macro to ALLOC/FREE.  It is called to:

  1.  Log the various amounts needed by each, remembering  the
      largest.

  2.  Generating a DS for the largest amount.

  The  first  two  functions  are invoked by ALLOC/FREE macros
  only, and the third is used by the  programmer,  either  ex-
  plicitly, or by BEGINWKA, if the latter is used.

  To invoke the naming function, ALLOC/FREE generate:

  name DYNSPACE

  Note.  The  naming  operation  only  generates a name on the
  first call in the assembly. The name remains the same  until
  DYNSPACE is called to expand into a DS.

  The second function is invoked by the macro call
       DYNSPACE ADD

  (no name field and one operand) it uses the global variables
  &dtuo  and  &DTUPO  to calculate the space for this request,
  and updates &DYNSPQ only if the current  request  is  for  a
  greater amount

  The  third  function  is invoked by calling DYNSPACE with no
  name or operand field.

  This expands into a define storage, clears the DYNSPACE name
  global SETC, and the &DYNSPQ GLOBAL SETA.   Thus, the  macro
  is serially reusable in all functions.

  S99FAIL

  S99FAIL  macro  will  invoke the dynamic allocation (SVC 99)
  error message display routine.


  EXAMPLES

           ALLOC DUMMY,DDN=DDNAME
           ALLOC DDN=DDNAME,DSN=DSNAME,DISP=SHR
           FREE  DDN=DDNAME
           ALLOC DDN=DDNAME,UNIT=UNITADDR
           S99FAIL

           data areas

           DYNSPACE
                    SPACE
           UNITADDR DC    A(UNIT)
           UNITL    DC    Y(3)
           UNIT     DC    CL3' '
                    SPACE
           DDNAME   DC    A(DDN)
           DDNL     DC    Y(8)
           DDN      DC    CL8' '
                    SPACE
           DSNAME   DC    A(DSN)
           DSNL     DC    Y(44)
           DSN      DC    CL44' '

         These are required as mapping for the above macros:

           IEFZB4D0
           IEFZB4D2
