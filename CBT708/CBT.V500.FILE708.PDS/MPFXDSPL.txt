./ ADD NAME=$NOTE01  0102-12208-12208-1027-00018-00012-00000-SYTH
$TMPLATE  SYS1.MPF.COMMANDS member which standardizes documention of
          MPF message responses
          COPY the $TMPLATE member to the new message response PDS
          member and update the comment fields
          $TMPLATE is not shown in the MPFXDSPL output

EPW0309I  SYS1.MPF.COMMANDS member demonstrates use of $TMPLATE

ASMACL    Updated job to include assemble and link MPFXDSPL

EXECUTE   Execution JCL for MPFXDSPL

MPFXDSPL  Source code for MPF message response program that displays
          contents of MPF ECSA Table  I've taken portions of the
          existing MPF programs plus coding of a TIMEDATE routine to
          create this.

PRINT     Example of MPF table printout
./ ADD NAME=$TMPLATE 0101-12208-12208-1240-00008-00008-00000-SYTH
*
* < message id >
*
* MPF EXIT code <explaination>
*
* Written: mm/dd/yyyy <programmer name>
*
* Replace with the executable commands and drop the * in this line
./ ADD NAME=ASMACL   0100-12208-12208-0940-00122-00122-00000-SYTH
//GSIASMCL JOB ,'SIEGEL',CLASS=A,MSGCLASS=X,REGION=0M,
//         MSGLEVEL=(1,1),NOTIFY=&SYSUID
//*********************************************************************
//*                                                                   *
//*         CHANGES BEFORE SUBMITTING                                 *
//*                                                                   *
//* C ALL 'CBT.FILE708.PDS' 'THIS DATASET'                            *
//* C ALL 'CBT.FILE708.MACROS' 'THE DATASET FROM STEP 6 OF $INSTALL'  *
//* C ALL 'SYSP.LINKLIB' 'A DATASET IN THE LINKLIST'                  *
//*                                                                   *
//*********************************************************************
//C        EXEC PGM=ASMA90,
//         PARM='LIST,OBJECT,NODECK'
//SYSIN    DD DISP=SHR,DSN=CBT.FILE708.PDS(TSOROUTE)    <=== CHANGE
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=CBT.FILE708.MACROS,DISP=SHR           <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),
//            UNIT=SYSALLDA,DISP=(MOD,PASS),
//            DCB=(BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1)
//L        EXEC PGM=HEWL,COND=(4,LT,C),
//         PARM='XREF,LET,LIST,RENT,REUS,REFR'
//SYSLIN   DD DSN=&&OBJ,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//SYSLMOD  DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(1,1,1)),
//             DSN=&&TSOROUTE(TSOROUTE)
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DSN=SYS1.CSSLIB,DISP=SHR
//SYSIN    DD *
  NAME TSOROUTE(R)
/*
//C        EXEC PGM=ASMA90,
//         PARM='LIST,OBJECT,NODECK'
//SYSIN    DD DISP=SHR,DSN=CBT.FILE708.PDS(MPFXDSPL)     <=== CHANGE
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=CBT.FILE708.MACROS,DISP=SHR           <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),
//            UNIT=SYSALLDA,DISP=(MOD,PASS),
//            DCB=(BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1)
//L        EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL',COND=(4,LT,C)
//SYSLIN   DD DSN=&&OBJ,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//SYSLMOD  DD DSN=SYSP.LINKLIB,DISP=SHR                 <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DSN=SYS1.CSSLIB,DISP=SHR
//SYSIN    DD *
  ENTRY MPFXDSPL
  SETCODE AC(1)
  INCLUDE SYSLIB(IEANTCR)
  INCLUDE SYSLIB(IEANTRT)
  INCLUDE SYSLIB(IEANTDL)
  NAME MPFXDSPL(R)
/*
//C        EXEC PGM=ASMA90,
//         PARM='LIST,OBJECT,NODECK'
//SYSIN    DD DISP=SHR,DSN=CBT.FILE708.PDS(MPFLOAD)     <=== CHANGE
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=CBT.FILE708.MACROS,DISP=SHR           <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),
//            UNIT=SYSALLDA,DISP=(MOD,PASS),
//            DCB=(BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1)
//L        EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL',COND=(4,LT,C)
//SYSLIN   DD DSN=&&OBJ,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//SYSLMOD  DD DSN=SYSP.LINKLIB,DISP=SHR                 <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DSN=SYS1.CSSLIB,DISP=SHR
//SYSIN    DD *
  ENTRY MPFLOAD
  SETCODE AC(1)
  INCLUDE SYSLIB(IEANTCR)
  INCLUDE SYSLIB(IEANTRT)
  INCLUDE SYSLIB(IEANTDL)
  NAME MPFLOAD(R)
/*
//C        EXEC PGM=ASMA90,
//         PARM='LIST,OBJECT,NODECK'
//SYSIN    DD DISP=SHR,DSN=CBT.FILE708.PDS(MPFXTALL)    <=== CHANGE
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=CBT.FILE708.MACROS,DISP=SHR           <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),
//            UNIT=SYSALLDA,DISP=(MOD,PASS),
//            DCB=(BLKSIZE=3040,LRECL=80,RECFM=FB,BUFNO=1)
//L        EXEC PGM=HEWL,COND=(4,LT,C),
//         PARM='XREF,LET,LIST,RENT,REUS,REFR'
//SYSLIN   DD DSN=&&OBJ,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//SYSLMOD  DD DSN=SYSP.LINKLIB,DISP=SHR                 <=== CHANGE
//SYSUT1   DD DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),
//            UNIT=SYSALLDA,DCB=BUFNO=1
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DSN=SYS1.CSSLIB,DISP=SHR
//         DD DSN=&&TSOROUTE,DISP=SHR
//SYSIN    DD *
  ENTRY MPFXTALL
  SETCODE AC(1)
  INCLUDE SYSLIB(IEANTRT)
  INCLUDE SYSLIB(TSOROUTE)
  NAME MPFXTALL(R)
/*
//
./ ADD NAME=EPW0309I 0100-12208-12208-0947-00009-00009-00000-SYTH
*
* EPW0309I ENTER 'YES' TO CONTINUE TERMINATION. 'NO' TO KEEP FFST ALIVE
*
* MPF exit code to capture system halting of FFST component and
* automatically reply to it
*
* Written: 03/01/2012 Thomas Hutchins
*
REPLY NN,YES
./ ADD NAME=EXECUTE  0100-12208-12208-1019-00008-00008-00000-SYTH
//MPFXDSPL JOB (ACCNT CODE),'PROGRAMMER NAME',CLASS=X,MSGCLASS=X,       JOB05374
//         MSGLEVEL=(1,1),REGION=0M,NOTIFY=&SYSUID
/*JOBPARM  LINES=9999,FORMS=STD
//* ******************************************************************
//STEP1   EXEC PGM=MPFXDSPL
//STEPLIB  DD  DISP=SHR,DSN=SYS1.AUTH.PDS.LOADLIB
//SYSOUT   DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
./ ADD NAME=MPFXDSP$ 0108-01044-12209-0008-00031-00030-00000-SBGOLOB
//SBGOLOBM JOB (CCMVS),'HI FOLKS',
// NOTIFY=&SYSUID,
// CLASS=B,MSGCLASS=X,COND=(1,LT)
//*
//*     ASM LINKEDIT FROM SOURCE ASM
//*
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//         DD DISP=SHR,DSN=SBGOLOB.FILE708.MACROS
//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(MPFXDSPL)
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,
//            DSN=&&TEMP
//*
//LKED   EXEC  PGM=HEWL,
//       PARM='NCAL,MAP,LIST,LET'
//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB
//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB
//CSSLIB   DD  DISP=SHR,DSN=SYS1.CSSLIB
//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP
//SYSLIN   DD  *
 INCLUDE OBJECT
 INCLUDE CSSLIB(IEANTRT)
 SETSSI  CB485875
 SETCODE AC(1)
 NAME    MPFXDSPL(R)
/*
./ ADD NAME=MPFXDSPL 0100-12208-12208-0942-00389-00389-00000-SYTH
MPFXDSPL TITLE 'MPF code to display command table in ECSA'
MPFXDSPL CSECT
MPFXDSPL AMODE 31
MPFXDSPL RMODE 24
         YREGS
         BAKR  R14,0               Store Regs & Envir on Link Stack
         LAE   R12,00(,R15)        R12 = The Base Register
         LA    R11,4095(,R12)      R11 = Second Base Register
         LA    R11,1(,R11)         Add 1 more
         USING MPFXDSPL,R12,R11    Establish Addressability
         B     START               Branch around constants
**********************************************************************
*    Copyright (c) 1998-2007 and Written by Glenn Siegel SSC Corp.   *
**********************************************************************
         DC    C' MPFXDSPL '       Program Name Identifier
         DC    C'Version 6.0 '     Version
         DC    C'&SYSDATE '        Assembly Date
         DC    C'&SYSTIME '        Assembly Time
         DC    C'Copyright(c) 1998 2007 '
         DC    C'Glenn Siegel '
         DC    C'SSC Corp. '
         DC    C'631-444-5339 '
         DC    C'516-607-4005 cell '
         DC    C'GlennSiegel@optonline.net '
**********************************************************************
*                                                                    *
*   TH   - Strip MPFXTALL for executable logic                       *
*                                                                    *
**********************************************************************
START    DS    0H
**********************************************************************
*        GETMAIN SUBPOOL 230 AND INITIALIZE WORKAREA                 *
**********************************************************************
GETM     DS    0H
         GETMAIN RU,LV=WORKSIZE,SP=230,LOC=(BELOW,ANY)
         LTR   R15,R15             Test getmain
         BZ    AFTERGM             OK continue
         WTO   'MPF029E - GETMAIN ERROR',DESC=(2),ROUTCDE=(1)
         B     MPF008R             Bye
AFTERGM  DS    0H
         LR    R2,R1               Point to Reentrant work area
         LA    R3,PSETSIZE         Store length of preset constants
         LR    R5,R3               Copy to R4 for MVCL
         LA    R4,PSETAREA         Point to preset data area
         MVCL  R2,R4               Prime work area with preset data
         LR    R13,R1              Sace address of getmained storage
         USING WORKAREA,R13        Establish Addressability
         MVC   SAVEAREA+4,=C'F1SA' Indicate stack in use
*
*
**********************************************************************
*        GET NAME TOKEN ROUTINE                                      *
**********************************************************************
GETNAMET DS    0H
         LA    R3,TOKEN
         LA    R2,RETCODE
         CALL  IEANTRT,(SYSLVL,NAME,(R3),(R2)),MF=(E,RENTCALL)
         IF    (RETCODE,EQ,=A(IEANT_NOT_FOUND))
         WTO   'MPF015E - Name/Token not found error',                 X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF021E - Notify MPFXDSPL Support',                    X
               DESC=(2),ROUTCDE=(1)
         B     FREEMEM       Return
         ENDIF
**********************************************************************
*        FIND MESSAGE ID                                             *
**********************************************************************
         L     R4,ECSA_ADD         Store table address in R4
         L     R6,ECSA_ADD         Store table address in R6
         L     R8,ECSA_LEN         Store length of table in R8
         ALR   R6,R8               Add length to R6 for end of table
         ST    R6,ENDTABLE         Store end of table address
**********************************************************************
*        OPEN SYSOUT FOR REPORT                                      *
**********************************************************************
         GETMAIN R,LV=DCBSZ1       Get output dcb area
         LR    R10,R1
         MVC   0(DCBSZ1,R10),OUTFILE
**********************************************************************
*        GET STORAGE FOR OUTPUT RECORD                               *
**********************************************************************
         GETMAIN R,LV=133          Get output record area
         LR    R9,R1
         USING OUT_DSECT,R9
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC
**********************************************************************
*        OPEN FILE PUT OUT TITLE LINE                                *
**********************************************************************
         OPEN  (OUTFILE,OUTPUT)     Open output file

* ********************************************************************
* * TIMEDATE Routine found in GOOGLE GROUPS                          *
* * bit.listserv.ibm-main                                            *
* * TIME Macro (getting Date MM/DD)                                  *
* * Original post by Franklin, Boe, Wednesday, October 7, 1998       *
* ********************************************************************
         MVC   TSZEROS,=CL4'0'
         TIME  DEC,TIMEDATE,DATETYPE=MMDDYYYY,LINKAGE=SYSTEM
         MVC   DTIME,EDPATIME
         ED    DTIME(5),TIMEDATE
         ED    DTIME+5(8),TIMEDATE+8
         MVC   MNTH,MN
         MVI   MNTHSEP,C'/'
         MVC   DAY,DD
         MVI   DAYSEP,C'/'
         MVC   YEAR,YYYY

         MVI   OUT_CC,C'1'         Set carriage control
         MVC   OUT_DATA,OUT_HEADER Set header in output field
         PUT   OUTFILE,OUT_REC

         MVI   OUT_REC,C' '        Skip a line
         MVC   OUT_REC+1(132),OUT_REC
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC

**********************************************************************
*        OUTPUT ECSA MPFLOAD INFORMATION                             *
**********************************************************************

         MVC   SAYNAME,NAME                MOVE TOKEN TO DISPLAY
         HEX   SAYNTADD,4,ECSA_ADD         MOVE ADDRESS TO DISPLAY
         HEX   SAYNTLEN,4,ECSA_LEN         MOVE LENGTH TO DISPLAY

         MVI   OUT_REC,C' '
         MVC   OUT_REC+8(L'NAMETOKN),NAMETOKN
         MVC   OUT_REC+32(L'SAYNAME),SAYNAME
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC

         MVC   OUT_REC+8(L'NAMEADDR),NAMEADDR
         MVC   OUT_REC+32(L'SAYNTADD),SAYNTADD
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC

         MVC   OUT_REC+8(L'NAMELENG),NAMELENG
         MVC   OUT_REC+32(L'SAYNTLEN),SAYNTLEN
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC
*
*  HEX INFORMATION IN OUTPUT STREAM
*

**********************************************************************
GETNXMES DS    0H
         CL    R4,ENDTABLE         End of MPFLOAD data
         BNL   FREEMEM             Yup bye
         CLC   TEMPLATE,0(R4)
         BNE   MPFXT050
         LR    R6,R4               Point R6 to first record
         LA    R4,4095(,R6)        Bump table past template record
         LA    R4,4095(,R4)        Bump table
         LA    R4,2(,R4)           Add 2 more to next record
MPFXT050 DS    0H
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(8),0(R4) Move message command to output line
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC

         B     MPFXT200            Go get commands
TEMPLATE DC    C'$TMPLATE'
MPFXT100 DS    0H
         LA    R4,4095(,R6)        Bump table
         LA    R4,4095(,R4)        Bump table
         LA    R4,2(,R4)           Add 2 more to next record
         B     GETNXMES            Get next message
         SPACE ,
**********************************************************************
MPFXT200 DS    0H
         LR    R6,R4               Point R6 to first record
         LA    R4,8(R4)            Point R4 to first command
**********************************************************************
MPFXT250 DS    0H
         CLI   0(R4),X'FF'         End of commands
         BE    MPFXT100            Yup bump to next message
         CL    R4,ENDTABLE         End of MPFLOAD data
         BNL   LOADERR             Yup say and bye

         MVC   OUT_REC+12(80),0(R4)   Move command to SYSOUT
         PUT   OUTFILE,OUT_REC
         MVI   OUT_REC,C' '
         MVC   OUT_REC+1(132),OUT_REC

         LA    R4,80(,R4)          Bump up for next command
         B     MPFXT250            Get next record
         SPACE ,
**********************************************************************
LOADERR  DS    0H
         WTO   'MPF014E - Memory Load Error',DESC=(2),ROUTCDE=(1)
         B     MPF008F
         SPACE ,
**********************************************************************
MPF008F  DS    0H
         WTO   'MPF008E - Notify MPFXDSPL Support',                    X
               DESC=(2),ROUTCDE=(1)
         B     FREEMEM             Bye
**********************************************************************
MPF008R  DS    0H
         WTO   'MPF008E - Notify MPFXDSPL Support',                    X
               DESC=(2),ROUTCDE=(1)
         B     RETURN              Bye
**********************************************************************
*        FREE MEMORY ROUTINE                                         *
**********************************************************************
FREEMEM  DS    0H
         CLOSE  (OUTFILE)
         LA    R2,WORKAREA
         LA    R1,WORKSIZE
         FREEMAIN R,LV=(R1),A=(R2),SP=230
         LTR   R15,R15             Test freemain
         BZ    RETURN              Ok bye
         WTO   'MPF030E - FREEMAIN ERROR',DESC=(2),ROUTCDE=(1)
         B     MPF008R
         EJECT
**********************************************************************
*        HEX ROUTINE                                                 *
**********************************************************************

*********************************************************************
*      HEX CONVERT ROUTINE                                          *
*********************************************************************
HEX      DS    0H
         MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R4                  RETURN TO CALLER
*
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
**********************************************************************
*        END OF PROCESSING                                           *
**********************************************************************
RETURN   DS    0H
         ESTAEX 0                  Delete MPFXTALL ESTAE         GG59
*
*    Linkage back to caller:
         LGHI 15,0                 Set return code
         PR                        Pop the stack
*
         SPACE 1
         LTORG ,
**********************************************************************
*        CONSTANT DATA                                               *
**********************************************************************
SYSLVL   DC    A(IEANT_SYSTEM_LEVEL)
NAME     DC    CL16'MPF_EXIT_TABLE'     The name of the token
PERSOPT  DC    A(IEANT_PERSIST)         Keep the token after job ends
*
NAMETOKN DC    CL24'   MPFXDSPL NAME TOKEN: '
NAMEADDR DC    CL24'         TABLE ADDRESS: '
NAMELENG DC    CL24'          TABLE LENGTH: '
*
EDPATIME DC    X'402020202020202020202020202020'
         CNOP  0,4
         SPACE 2
         LTORG
         EJECT
**********************************************************************
*        VARIABLE DATA. NOTE THAT THIS DATA IS COPIED TO A WORK AREA *
*        AND UPDATED THERE                                           *
**********************************************************************
         SPACE 2
OUTFILE  DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT,RECFM=FBA,LRECL=133,    X
               BLKSIZE=1330
DCBSZ1   EQU   *-OUTFILE

         EJECT
PSETAREA DS    0D                  Preset MGCR work area
SAVEAREX DS    18F                 SAVEAREA
SSCMD    DC    AL2(SCMDLN)
         DC    XL2'00'
         DC    CL80' '
SCMDLN   EQU   *-SSCMD
*
OHEADER  DC CL132'DATE: 07/25/2012     CONTENTS OF ECSA LOAD'
*
*
PSETSIZE EQU   *-PSETAREA          Size of the variable Work Area
         EJECT
**********************************************************************
*        GETMAIN WORK AREA                                           *
**********************************************************************
WORKAREA DSECT                     Preset work area
         DS    0D
SAVEAREA DS    18F                 SAVEAREA
CMDHDR   DC    XL2'20'
         DC    XL2'00'
CMDTEXT  DC    CL80' '
*
OUT_HEADER DS 0CL132
           DS  CL6
MNTH       DS  CL2
MNTHSEP    DS  CL1
DAY        DS  CL2
DAYSEP     DS  CL1
YEAR       DS  CL4
           DS  CL116
*
**********************************************************************
* END OF SEEDED STORAGE                                              *
**********************************************************************
         DS    0F                  Alignment
*
MSGNP    DS    D                                                 GS51
*
*
MEMN     DS    CL8                 Member name
*
*
ENDTABLE DS    F                   Address for end of table
*
*
MSGTXT   DS    CL133               Message text     length change PJ01
*
CMDSID   DS    CL8                 Command SYSID
*
TESTNN   DS    CL2                 Test area for not numeric
*
         DS    0D                  Alignment
TOKENSW  DS    CL16                The token
NAMESW   DS    CL16                The name of the token
RENTCALR CALL  ,(SYSLVL,NAMESW,TOKENSW,RETCODE),MF=L
RENTCALD CALL  ,(SYSLVL,NAMESW,RETCODE),MF=L
RENTCALC CALL  ,(SYSLVL,NAMESW,TOKENSW,PERSOPT,RETCODE),MF=L
*
         DS    0D                  Alignment
TOKEN    DC    XL16'00'            The token
         ORG   TOKEN
ECSA_ADD DS    F                   ECSA address
ECSA_LEN DS    F                   Length of ECSA
         ORG
RETCODE  DC    F'0'                Return code from name token
*
RENTCALL CALL  ,(SYSLVL,NAME,TOKEN,RETCODE),MF=L
*
         ORG
SAVER4B  DS    F                REGISTER SAVE FOR HEX ROUTINE
HEXSAVE  DS    3F               SAVE FOR HEX MACRO
SAYNAME  DS    CL16
SAYNTADD DS    XL8
SAYNTLEN DS    XL8
TIMEDATE DS    0CL16            TIME AND DATE RETURNED MMDDYYYY
H        DS    CL1
M        DS    CL1
S        DS    CL1
         DS    CL5
MO       DS    CL1
DA       DS    CL1
YR       DS    CL2                 4 DIGIT YEAR
TSZEROS  DS    CL4
         DS    0H
DTIME    DS    0CL13
         DS    CL1
HH       DS    CL2                 HOUR
MM       DS    CL2                 MINUTES
MN       DS    CL2                 MONTH
DD       DS    CL2                 DAY
YYYY     DS    CL4                 YEAR
         DS    0D
WORKSIZE EQU   *-WORKAREA          Size of the variable work area
**********************************************************************
*                                                                    *
**********************************************************************
OUT_DSECT  DSECT
OUT_REC    DS    0CL133
OUT_CC     DS    CL1
OUT_DATA   DS    CL132
         LTORG
*        PRINT   GEN                                              GG58
         PRINT   ON,NOGEN                                         GG58
         IHAPSA  ,                 MAP PSA                        GG58
         IHASDWA ,                 MAP SDWA                       GG59
         IHAASCB ,                 MAP ASCB                       GG58
         IEANTASM                  Name token service declares
         IEZVX100
         CVT     DSECT=YES         The CVT
         END   MPFXDSPL
./ ADD NAME=PRINT    0100-12208-12208-1025-00019-00019-00000-SYTH
DATE:  7/26/2012     CONTENTS OF ECSA LOAD

          MPFXDSPL NAME TOKEN: MPF_EXIT_TABLE
                TABLE ADDRESS: 0EFA9000
                 TABLE LENGTH: 00020000

BPXF032D
           REPLY NN,I

BPXI078D
           REPLY NN,Y

CAS9227A
           REPLY NN,Y

CA7574
           IF WORD 01 EQ (CA7ICOM
           GET REPLYID
           DELSWITCH CAICOM
