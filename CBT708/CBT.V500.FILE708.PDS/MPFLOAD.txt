MPFLOAD  CSECT
MPFLOAD  AMODE 31
MPFLOAD  RMODE 24
         YREGS
         BAKR  R14,0                   STORE REGS & ENVIR ON LINK STACK
         LAE   R12,00(,R15)            R12 IS THE BASE
         LA    R11,4095(,R12)          R11 = SECOND BASE REGISTER
         LA    R11,1(,R11)             ADD 1 MORE
         LA    R10,4095(,R11)          R10 = THIRD BASE REGISTER
         LA    R10,1(,R10)             ADD 1 MORE
         USING MPFLOAD,R12,R11,R10     ADDRESS IT
         LA    R13,SAVEAREA            ADDRESS SAVEAREA
         MVC   SAVEAREA+4,=C'F1SA'     INDICATE STACK IN USE
         B     GETPARM                 BRANCH AROUND CONSTANTS
**********************************************************************
*    Copyright (c) 1998-2007 and Written by Glenn Siegel SSC Corp.   *
**********************************************************************
         DC    C' MPFLOAD '          PROGRAM NAME IDENTIFIER
         DC    C'Version 5.9 '       Version
         DC    C'&SYSDATE '          ASSEMBLY DATE
         DC    C'&SYSTIME '          ASSEMBLY TIME
         DC    C'Copyright (c) 1998-2007 '
         DC    C'Glenn Siegel '
         DC    C'SSC Corp. '
         DC    C'631-444-5339 '
         DC    C'516-607-4005 cell '
         DC    C'GlennSiegel@optonline.net '
**********************************************************************
* GG01 -    Added code to check if executing in *MASTER* asid; if so,*
*           get @ parm via S/S INITRTN method, otherwise get @ parm  *
*           using the standard R1 @ parms at entry method;           *
*           Added mapping macros: IHAPSA, IHAASCB, and IEFJSIPL      *
*           (PSA to get @ to ASCB, ASCB to determine if we are in    *
*           *MASTER* ASID, and IEFJSIPL to map S/S INITRTN parm list *
*            Modification by Garry G. Green                          *
* Changed MPF004I to MPF104I for Garry G. Green                      *
**********************************************************************
*      GET DSN FROM PARM                                             *
**********************************************************************
GETPARM  DS    0H
         L     R15,PSAAOLD-PSA(0)      GET @ ASCB                  GG01
         LH    R15,ASCBASID-ASCB(R15)  GET ASID                    GG01
         CH    R15,=H'1'               Q. EXECUTING IN *MASTER*    GG01
         BNE   NOTMAST                 A. NO - BRANCH              GG01
         L     R2,4(R1)                GET @ JSIPL                 GG01
         XR    R1,R1                   ZERO FOR FOLLOWING          GG01
         IC    R1,JSILGTPR-JSIPL(R2)   GET @ S/S INITPARMS         GG01
         L     R2,JSIADRPR-JSIPL(R2)   GET @ PARM DATA             GG01
         SH    R2,=H'2'                MAKE CONSISTENT WITH        GG01
*                                     STD PARM FIELD HWORD LEN HDR GG01
         B     COMMON                  BRANCH TO COMMON PARM       GG01
NOTMAST  DS    0H                     NOT EXECUTING AS SSI INITRTN GG01
         L     R2,0(,R1)               GET PARM FIELD ADDR
         LH    R1,0(,R2)               GET PARM LENGTH
COMMON   DS    0H                      COMMON PARM PROCESSING      GG01
         LTR   R1,R1                   ANY PARM DATA?
         BZ    BADPARM                 NO, SAY AND BYE
         CH    R1,MAXPARM              VALID PARM LENGTH?
         BNH   PARMOK                  YES
BADPARM  WTO   'MPF001E - INVALID OR MISSING PARM ON EXEC STATEMENT',  X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF008E - NOTIFY SYSTEMS PROGRAMMER',                  X
               DESC=(2),ROUTCDE=(1)
         B     EOJ                     NO PARM, BYE
PARMOK   BCTR  R1,0                    COMPUTE LENGTH CODE
         EX    R1,PARMVC               PUT DSN
**********************************************************************
*      GET DSN FROM PARM                                             *
**********************************************************************
         LA    R6,HOLDMEM              SET R6 TO HOLDMEM
         SR    R7,R7                   INTIALIZE COUNT FOR MEMBERS
*********************************************************************
*      DYNALLOC ROUTINE FOR DIRECTORY                               *
*********************************************************************
         ALLOC DDN=DDNAMED,                                            X
               DSN=DSNAMEI,                                            X
               DISP=SHR,                                               X
               ERROR=S99FAIL
**********************************************************************
*      OPEN DIRECTORY                                                *
**********************************************************************
OPENS    OPEN  (PDS)                    OPEN FILES
**********************************************************************
*      READ DIRECTORY BLOCKS, EXTRACT DIRECTORY MEMBER NAMES AND     *
*      WRITE TO THE HOLDMEM MAX OF 1000 MEMBERS                      *
**********************************************************************
READ     EQU   *             *** READ DIRECTORY ENTRY ROUTINE ***
         LH    R2,REMBYTS              GET NBR BYTES REMAINING IN BLOCK
         CH    R2,ELEVEN               ANY MORE ENTRIES IN BLOCK
         BNL   GETADR                  YES
NEXREC   GET   PDS                     READ DIRECTORY BLOCK
         LR    R2,R1                   GET BLOCK ADDRESS
         MVC   REMBYTS,0(R2)           MOVE NBR BYTES IN BLOCK
         CLC   REMBYTS,ZERO            ANY BYTES IN BLOCK
         BE    ADDRS_R6                NO, GO ADDRESS R6
         LA    R2,2(R2)                STEP PAST BLOCK SIZE FIELD
         ST    R2,RECADDR              STORE RECORD ADDRESS
GETADR   L     R2,RECADDR              GET NEXT ENTRY ADDRESS
         CLI   0(R2),X'F9'             END OF DIRECTORY?
         BH    ADDRS_R6                YES, GO ADDRESS R6
         BAS   R9,MOVEHLD              GO MOVE MEMBER NAME TO HOLDMEM
         NI    11(R2),CLRBITS          CLEAR ALIAS, TTR BITS
         SR    R8,R8                   CLEAR WORK REG
         IC    R8,11(R2)               GET NBR USER HALFWORDS
         SLL   R8,1                    MULTIPLY BY 2
         LA    R8,12(R8)               CALCULATE RECORD LENGTH
         LH    R2,REMBYTS              GET NBR BYTES REMAINING
         SR    R2,R8                   SUBTRACT THIS ENTRY LENGTH
         BP    STREM                   ANY LEFT
         SR    R2,R2                   NO, SET TO ZERO
STREM    STH   R2,REMBYTS              STORE REMAINING BYTES
         A     R8,RECADDR              CALCULATE NEXT ENTRY ADDRESS
         ST    R8,RECADDR              STORE NEXT ENTRY ADDRESS
         B     OPENS                   GET NEXT DIRECTORY ENTRY
*********************************************************************
*      MOVEHLD MOVES MEMBER NAME TO THE HOLD AREA ADDRESSED BY R6   *
*      FROM DIRECTORY ENTRY ADDRESSED BY R2                         *
*********************************************************************
MOVEHLD  EQU   *
         MVC   0(8,R6),0(R2)           MOVE MEMBER NAME TO HOLDMEM
         LA    R6,8(R6)                POINT TO NEXT HOLDMEM AREA
         LA    R7,1(R7)                ADD 1 TO MEMBER COUNT
         BR    R9                      GET NEXT DIR MEMBER
*********************************************************************
*      ADDRS_R6 POINTS R6 TO BEGINING OF HOLDMEM                    *
*********************************************************************
ADDRS_R6 EQU   *
         CLOSE (PDS)                   CLOSE DIRECTORY
         FREE  DDN=DDNAMED             FREE PDS
         LA    R6,HOLDMEM              SET R6 TO START OF HOLDMEM
         SR    R2,R2                   CLEAR SECOND MEMBER COUNT
         LR    R8,R7                   COPY COUNT TO R8
         SLL   R8,13                   MULTIPLY MEMBER COUNT BY 8192
*********************************************************************
*      GETMAIN SUBPOOL 241 KEY 0 TO STORE MEMBER NAMES AND COMMANDS *
*********************************************************************
CREATE   EQU   *
         MODESET MODE=SUP,KEY=ZERO     AUTHORIZE FOR GETMAIN IN ECSA
         GETMAIN RU,LV=(R8),SP=241,LOC=ANY,KEY=0
         ST    R1,ECSA_ADD             STORE ECSA ADDRESS IN TOKEN
         ST    R8,ECSA_LEN             STORE LENGTH OF ECSA IN TOKEN
         LR    R9,R1                   COPY ADDRESS OF GETMAIN TO R9
*********************************************************************
*      GET NEXT MEMBER                                              *
*********************************************************************
GETNXMEM EQU   *
         LR    R4,R9               START OF RECORD
         LA    R2,1(R2)            ADD 1 TO SECOND MEMBER COUNT
         CR    R2,R7               COMPARE MEMBER COUNT
         BH    CREATNT             GOT EM ALL, CREATE NAME/TOKEN
         MVC   0(8,R4),0(R6)       MOVE MEMBER NAME TO ECSA
*********************************************************************
*      DYNALLOC SETUP                                               *
*********************************************************************
DYNALLOC MVC   MEMN,0(R6)          MEMBER NAME TO DYNALLOC TU
         LA    R6,8(R6)            POINT TO NEXT HOLDMEM AREA
         LA    R5,4092(R4)         POINT R5 END OF USABLE RECORD
         LA    R5,4092(R5)         POINT R5 END OF USABLE RECORD
         LA    R4,8(R4)        INCREMENT TABLE BY 8 FOR START OF CMDS
*********************************************************************
*      DYNALLOC ROUTINE FOR COMMAND MEMBERS                         *
*********************************************************************
         ALLOC DDN=DDNAMEI,                                            X
               DSN=DSNAMEI,                                            X
               MEMBER=MEMBERIN,                                        X
               DISP=SHR,                                               X
               ERROR=S99FAIL
*********************************************************************
*      OPEN COMMAND FILE                                            *
*********************************************************************
         LA    R3,CMDS                LOAD R3 ADDRESS OF CMDS
         OPEN  ((R3),INPUT),MODE=24   OPEN
         USING IHADCB,R3              USING
         TM    DCBOFLGS,X'10'         TEST GOOD OPEN?
         BZ    OPNFAIL                NO BYE
         DROP  R3
*********************************************************************
*      GET COMMANDS AND STORE EM                                    *
*********************************************************************
GETCMDS  EQU   *
         CNOP  0,4                 ALIGNMENT
         GET   CMDS,CMDTEXT        DCB MOVES INPUT RECORD TO CMDTEXT
         CLI   CMDTEXT,C'*'        SKIP COMMENTS
         BE    GETCMDS             GET NEXT RECORD
         CLI   CMDTEXT,C' '        SKIP BLANK COL 1
         BE    BLANK1              WTO
         CR    R4,R5               END OF RECORD
         BNL   MORE102             YUP BYE
         MVC   0(80,R4),CMDTEXT    MOVE CMD TO TABLE
         LA    R4,80(R4)           INCREMENT TABLE BY 80
         B     GETCMDS             GET NEXT RECORD
*********************************************************************
BLANK1   WTO   'MPF006E - BLANK IN COLUMN ONE NOT ALLOWED',            X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF008E - NOTIFY SYSTEMS PROGRAMMER',                  X
               DESC=(2),ROUTCDE=(1)
         B     GETCMDS             GET NEXT RECORD
*********************************************************************
MORE102  WTO   'MPF007E - MORE THEN 102 COMMANDS NOT ALLOWED',         X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF008E - NOTIFY SYSTEMS PROGRAMMER',                  X
               DESC=(2),ROUTCDE=(1)
*********************************************************************
CLSCMDS  EQU   *
         MVI   0(R4),X'FF'         PUT END OF CMDS
         LA    R9,4095(R9)         BUMP TABLE
         LA    R9,1(R9)            BUMP TABLE 1 MORE
         LA    R9,4095(R9)         BUMP TABLE TO NEXT RECORD
         LA    R9,1(R9)            BUMP TABLE 1 MORE
         LA    R3,CMDS             POINT R3 TO CMDS
         CLOSE ((R3))              CLOSE CMDS
*********************************************************************
FREEDD   EQU   *
         FREE  DDN=DDNAMEI
*********************************************************************
BGETNEW  EQU   *
         B     GETNXMEM            GET NEXT MEMBER
*********************************************************************
OPNFAIL  WTO   'MPF017E - DYNAMIC ALLOCATION OPEN FAILED',             X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF008E - NOTIFY SYSTEMS PROGRAMMER',                  X
               DESC=(2),ROUTCDE=(1)
         FREE  DDN=DDNAMEI
         B     EOJ
*********************************************************************
S99FAIL  EQU   *
         S99FAIL
DYNFAIL  WTO   'MPF018E - DYNAMIC ALLOCATION FAILED',                  X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF008E - NOTIFY SYSTEMS PROGRAMMER',                  X
               DESC=(2),ROUTCDE=(1)
         B     EOJ
*********************************************************************
*      NAME TOKEN SECTION                                           *
*      CHECK FOR EXISTING NT IF, FREE STORAGE AND DELETE NAME/TOKEN *
*********************************************************************
CREATNT  EQU   *
         CALL  IEANTRT,(SYSLVL,NAME,TOKEN2,RETCODE)
         IF   (RETCODE,EQ,=A(IEANT_OK))
         WTO   'MPF002I - NAME/TOKEN EXISTS DELETE N/T AND STORAGE'
         L     R5,ECSA_AD2             STORE ECSA ADDRESS IN R5
         L     R9,ECSA_LE2             STORE LENGTH OF ECSA IN R9
         FREEMAIN RU,LV=(R9),A=(R5),SP=241,KEY=0
         CALL  IEANTDL,(SYSLVL,NAME,RETCODE)
         IF   (RETCODE,EQ,=A(IEANT_OK))
         WTO   'MPF003I - NAME/TOKEN AND STORAGE SUCCESSFULLY DELETED'
         ENDIF
         ENDIF
*********************************************************************
*      CREATE THE NAME/TOKEN PAIR                                   *
*      CHECK RETCODE FROM NAME/TOKEN CREATE                         *
*********************************************************************
         CALL  IEANTCR,(SYSLVL,NAME,TOKEN,PERSOPT,RETCODE)
         IF    (RETCODE,EQ,=A(IEANT_OK))
         WTO   'MPF104I - NAME/TOKEN AND STORAGE SUCCESSFULLY CREATED'
         WTO   'MPF004I - MPFXTALL Version 5.9'
         MVC   WTONAME,NAME                MOVE TOKEN TO DISPLAY
         HEX   WTONTADD,4,ECSA_ADD         MOVE ADDRESS TO DISPLAY
         HEX   WTONTLEN,4,ECSA_LEN         MOVE LENGTH TO DISPLAY
         WTO   MF=(E,WTOA)                 WTO TOKEN NAME
         WTO   MF=(E,WTOB)                 WTO ADDRESS NAME
         WTO   MF=(E,WTOC)                 WTO LENGTH NAME
         ENDIF
         IF    (RETCODE,EQ,=A(IEANT_NOT_FOUND))
         WTO   'MPF005E - NAME/TOKEN ERROR NAME/TOKEN NOT FOUND',      X
               DESC=(2),ROUTCDE=(1)
         WTO   'MPF008E - NOTIFY SYSTEMS PROGRAMMER',                  X
               DESC=(2),ROUTCDE=(1)
         ENDIF
*********************************************************************
*      END OF JOB                                                   *
*********************************************************************
EOJ      EQU *
         MODESET MODE=PROB,KEY=NZERO
         PR                            POP THE STACK
*********************************************************************
PARMVC   MVC   DSNN(1),2(R2)           EXECUTED MOVE DSNAME
*********************************************************************
*      HEX CONVERT ROUTINE                                          *
*********************************************************************
HEX      DS    0H
         MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R4                  RETURN TO CALLER
*
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
SAVER4B  DS    F                REGISTER SAVE FOR HEX ROUTINE
HEXSAVE  DS    3F               SAVE FOR HEX MACRO
*********************************************************************
*      DATA AREAS FOR DIRECTORY READ                                *
*********************************************************************
REMBYTS  DC    H'0'                    BYTES REMAINING IN BLOCK
ELEVEN   DC    H'11'                   CONSTANT 11
ZERO     DC    H'0'                    CONSTANT ZERO
RECADDR  DS    A                       BLOCK ADDRESS
CLRBITS  EQU   X'1F'                   AND MASK
HOLDMEM  DS    1000CL8                 DATA AREA FOR MEMBER NAMES
*********************************************************************
*      DATA AREAS FOR DYNAMIC ALLOCATION                            *
*********************************************************************
         CNOP  0,4
DSNAMEI  DC    A(DSNN)                   ADDRESS FOR DSNN
DSNL     DC    Y(44)                     LENGTH OF DSNN
DSNN     DC    CL44' '                   DSNAME
*
         CNOP  0,4
DDNAMEI  DC    A(DDNN)                   ADDRESS FOR DDNN
DDNL     DC    Y(8)                      LENGTH OF DDNN
DDNN     DC    C'MPFLOADC'               DDNAME
*
         CNOP  0,4
MEMBERIN DC    A(MEMN)                   ADDRESS OF MEMN
MEML     DC    Y(8)                      LENGTH OF MEMN
MEMN     DC    CL8'        '             MEMBER NAME
*
         CNOP  0,4
DDNAMED  DC    A(DDNNDL)                 ADDRESS FOR DDNNDL
DDNDL    DC    Y(8)                      LENGTH OF DDNNDL
DDNNDL   DC    C'MPFLOADP'               DDNAME
*
CMDTEXT  DS    CL80
*
         DYNSPACE
*********************************************************************
*        DATA AREAS FOR NAME TOKEN                                  *
*********************************************************************
SYSLVL   DC    A(IEANT_SYSTEM_LEVEL)
NAME     DC    CL16'MPF_EXIT_TABLE'      THE NAME OF THE TOKEN
         DS    0D
TOKEN    DC    XL16'00'                  THE TOKEN
         ORG   TOKEN
ECSA_ADD DS    F                         ECSA ADDR
ECSA_LEN DS    F                         LENGTH OF ECSA
         ORG
TOKEN2   DC    XL16'00'                  THE TOKEN2
         ORG   TOKEN2
ECSA_AD2 DS    F                         ECSA ADDR
ECSA_LE2 DS    F                         LENGTH OF ECSA
         ORG
RETCODE  DC    F'0'
PERSOPT  DC    A(IEANT_PERSIST)       KEEP THE TOKEN AFTER JOB ENDS
*********************************************************************
*        DATA AREAS FOR WTO                                         *
*********************************************************************
WTOA     DC    AL2(WTOAE-WTOA),AL2(0)
         DC    C'MPF009I -     NAME:    '
WTONAME  DS    CL16
WTOAE    DS    0F
*
WTOB     DC    AL2(WTOBE-WTOB),AL2(0)
         DC    C'MPF010I -     ADDRESS: '
WTONTADD DS    XL8
WTOBE    DS    0F
*
WTOC     DC    AL2(WTOCE-WTOC),AL2(0)
         DC    C'MPF011I -     LENGTH:  '
WTONTLEN DS    XL8
WTOCE    EQU   *
         DS    0F
*********************************************************************
SAVEAREA DS    18F                     SAVEAREA
*********************************************************************
*        DATA AREAS                                                 *
*********************************************************************
MAXPARM  DC    H'44'            MAXIMUM PARM LENGTH
*********************************************************************
*        FILE DEFINITIONS                                           *
*********************************************************************
PDS      DCB   DSORG=PS,MACRF=GL,DDNAME=MPFLOADP,RECFM=F,              X
               LRECL=256,BLKSIZE=256,EODAD=ADDRS_R6
*********************************************************************
CMDS     DCB   DSORG=PS,DDNAME=MPFLOADC,EODAD=CLSCMDS,MACRF=(GM)
*********************************************************************
         EJECT
         PRINT   ON,NOGEN
         DCBD  DSORG=(QS),DEVD=DA
*********************************************************************
         IHAPSA   ,              MAP PSA                           GG01
         IHAASCB  ,              MAP ASCB                          GG01
         IEFJSIPL ,              MAP INPUT PLIST                   GG01
         IEANTASM                NAME TOKEN SERVICE ASSEMBLER DECLARES
         IEFZB4D0                SVC99 DSECTS
         IEFZB4D2                SVC99 DSECTS
*********************************************************************
         END
